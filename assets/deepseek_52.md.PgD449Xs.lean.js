import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,h,p,a,r){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(h.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-2d6f9af6"]]),A=JSON.parse('[{"question":"Jane is planning her schedule for the next n days. She has a list of m tasks that she needs to complete during this period, and each task i has a specific day si on which she can start working on the task and a deadline di by which the task must be completed. Each task requires a certain number of consecutive days ti to complete. Jane can only work on one task each day, and she can only start working on a task on or after its start day and must finish it on or before its deadline. Write a program to help Jane determine if it\'s possible to complete all her tasks within the given constraints. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of days Jane has and the number of tasks. Each of the next m lines contains three integers si, di, ti (1 ≤ si ≤ di ≤ n, 1 ≤ ti ≤ 50) — the start day, deadline day, and the number of days required to complete the i-th task, respectively. Output Output \\"YES\\" if Jane can complete all the tasks within the given constraints. Otherwise, output \\"NO\\". Examples Input 10 3 1 5 3 2 9 4 6 10 2 Output YES Input 5 2 1 3 3 2 5 3 Output NO","solution":"def can_complete_tasks(n, m, tasks): Determines if Jane can complete all tasks within the given period and constraints. :param n: Number of days available :param m: Number of tasks :param tasks: List of tuples where each tuple is (si, di, ti) representing start day, deadline day, and number of days required to complete the task :return: \\"YES\\" if all tasks can be completed, otherwise \\"NO\\" # Sort tasks based on the deadline day di tasks.sort(key=lambda x: x[1]) days = [0] * (n + 1) # Track the schedule on each day for si, di, ti in tasks: # Try to schedule the task between its si and di days_needed = ti for day in range(si, di + 1): if days[day] == 0: days[day] = 1 days_needed -= 1 if days_needed == 0: break # If unable to find the required number of days, return NO if days_needed > 0: return \\"NO\\" return \\"YES\\""},{"question":"A tic-tac-toe game is represented by a 3x3 grid of characters, \'X\', \'O\', or \'.\', where \'X\' and \'O\' represent the marks placed by two players, and \'.\' represents an empty cell. Write a program to determine the state of the game by printing: - \\"X wins\\" if player \'X\' has won, - \\"O wins\\" if player \'O\' has won, - \\"Draw\\" if the board is full and no player has won, - \\"Game continues\\" if the board is not full and no player has won yet. A player wins if they have three of their marks in a horizontal, vertical, or diagonal row. # Constraints The input grid will always be a 3x3 character grid with \'X\', \'O\', and \'.\' only. # Input The input is given as three lines, each containing three characters, representing each row of the tic-tac-toe board. ``` r1c1 r1c2 r1c3 r2c1 r2c2 r2c3 r3c1 r3c2 r3c3 ``` Where `ri` and `ci` denote row and column indices of the cell respectively. # Output Print one of the following four strings: - \\"X wins\\" - \\"O wins\\" - \\"Draw\\" - \\"Game continues\\" # Examples Example 1 Input ``` X.O OXX OXO ``` Output ``` X wins ``` Example 2 Input ``` XOX OXO XOX ``` Output ``` Draw ``` Example 3 Input ``` XOX OO. XOX ``` Output ``` Game continues ```","solution":"def check_tic_tac_toe(board): Determines the state of a tic-tac-toe game. Args: board (list of list of str): 3x3 tic-tac-toe board. Returns: str: \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Game continues\\". def check_winner(c): # Check horizontal for row in board: if row == [c] * 3: return True # Check vertical for col in range(3): if all(board[row][col] == c for row in range(3)): return True # Check diagonal if all(board[i][i] == c for i in range(3)) or all(board[i][2-i] == c for i in range(3)): return True return False if check_winner(\'X\'): return \\"X wins\\" if check_winner(\'O\'): return \\"O wins\\" for row in board: if \'.\' in row: return \\"Game continues\\" return \\"Draw\\""},{"question":"A social media platform has a feature where users can create and attend events. The system keeps track of the list of events each user attends. Due to a system update, some event attendance records were corrupted. The platform\'s admin wants to determine if each user\'s attendance history follows a chronological order based on the event IDs. More specifically, each event has a unique positive integer identifier, and the events must be attended in strictly increasing order by each user. If a user attends events with IDs 3, 5, and 7, they must appear in exactly this order in the records. Given a list of attendance records consisting of pairs of user IDs and event IDs, determine if the records for each user respect the chronological order of event IDs. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of attendance records. Each of the following n lines contains two integers separated by a space: u and e (1 ≤ u ≤ 105; 1 ≤ e ≤ 105), indicating that user u attended event e. Output A single line of the output should contain \\"VALID\\" if all users\' attendance records respect the chronological order of event IDs, and \\"INVALID\\" otherwise. Examples Input 3 1 3 1 5 1 7 Output VALID Input 4 1 3 1 7 1 5 2 1 Output INVALID Input 5 1 3 2 1 2 2 1 4 1 5 Output VALID","solution":"def validate_event_attendance(records): from collections import defaultdict user_events = defaultdict(list) for u, e in records: user_events[u].append(e) for events in user_events.values(): if events != sorted(events): return \\"INVALID\\" return \\"VALID\\""},{"question":"Given a list of N integers, determine if there exists a subsequence of these integers whose sum is equal to a given number S. A subsequence is defined as a sequence derived from the original list by deleting some or none of the elements without changing the order of the remaining elements. Constraints - All values in input are integers. - 1 leq N leq 20 - -10^5 leq each integer in the list leq 10^5 - -10^6 leq S leq 10^6 Input Input is given from Standard Input in the following format: N S a_1 a_2 ... a_N Output Print \\"Yes\\" if such a subsequence exists, otherwise print \\"No\\". Examples Input 5 9 1 2 3 4 5 Output Yes Input 3 10 1 2 3 Output No Input 4 0 -1 1 -2 2 Output Yes","solution":"def subsequence_sum_exists(N, S, arr): Determines if there exists a subsequence of the list whose sum is equal to S. Args: - N: integer, the number of elements in the list - S: integer, the target sum - arr: list of N integers Returns: - \'Yes\' if such a subsequence exists, otherwise \'No\' from itertools import combinations for i in range(N+1): for comb in combinations(arr, i): if sum(comb) == S: return \\"Yes\\" return \\"No\\" # Example usage: # print(subsequence_sum_exists(5, 9, [1, 2, 3, 4, 5])) # Output: Yes # print(subsequence_sum_exists(3, 10, [1, 2, 3])) # Output: No # print(subsequence_sum_exists(4, 0, [-1, 1, -2, 2])) # Output: Yes"},{"question":"You are given an array of integers representing the heights of students standing in a line. The students should rearrange themselves so that everyone can see the board. A student can see the board if there are no taller or same height students standing in front of them. Your task is to find the maximum number of students that can see the board if they rearrange themselves optimally. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains an integer n (1 ≤ n ≤ 1000), followed by an array of n integers representing the heights of the students. Output For each test case, output one integer in a separate line representing the maximum number of students that can see the board. Examples Input 2 5 3 1 4 2 5 4 1 1 1 1 Output 5 4","solution":"def max_students_see_board(test_cases): For each test case, compute the maximum number of students that can see the board when they are rearranged optimally. results = [] for case in test_cases: n = case[0] heights = case[1:] # Sort the heights to ensure everyone can see the board sorted_heights = sorted(heights) # The maximum number of students that can see the board is the number of students itself results.append(n) return results # Example usage: # test_cases = [ # (5, [3, 1, 4, 2, 5]), # (4, [1, 1, 1, 1]) # ] # max_students_see_board(test_cases)"},{"question":"You are given two lists. The first list, `arr`, consists of `n` integers: `arr[1], arr[2], ..., arr[n]`. The second is a list of `q` queries. Each query is described by a pair of indices `l` and `r` (1 ≤ l ≤ r ≤ n), and asks you to compute the sum of the squares of the elements in `arr` from index `l` to index `r`. Implement a function to process each query and return the result for each one. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5). The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (1 ≤ arr[i] ≤ 10^9). The third line contains an integer `q` (1 ≤ q ≤ 10^5). The next `q` lines each contain two integers `l` and `r` — the endpoints of the subarray for each query (1 ≤ l ≤ r ≤ n). Output For each query, output the sum of the squares of the elements of `arr` from index `l` to index `r` (inclusive), modulo 1000000007. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 14 29 55","solution":"def sum_of_squares(arr, queries): MOD = 1000000007 prefix_squares = [0] * (len(arr) + 1) # Fill prefix_squares array for i in range(1, len(arr) + 1): prefix_squares[i] = (prefix_squares[i - 1] + arr[i-1] * arr[i-1]) % MOD result = [] for l, r in queries: l -= 1 total_squares = (prefix_squares[r] - prefix_squares[l]) % MOD result.append(total_squares) return result"},{"question":"Problem Statement A company wants to optimize the process of selecting candidates for interviews based on their test scores. Given a list of candidates and their corresponding test scores, write a program to sort the candidates according to their scores in descending order. If two candidates have the same score, sort them alphabetically by their names. Input Format The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of candidates. The next N lines contain a string (the candidate\'s name) and an integer (the candidate\'s score). Output Format For each test case, output the sorted list of candidate names based on the criteria mentioned. Each candidate name should be on a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Each candidate name is a string of lengths between 1 and 100 Each candidate score is an integer between 0 and 100 SAMPLE INPUT 2 3 Alice 50 Bob 75 Charlie 75 2 Dave 30 Eve 40 SAMPLE OUTPUT Bob Charlie Alice Eve Dave","solution":"def sort_candidates(test_cases): Takes a list of test cases where each test case is a list of tuples containing the candidate\'s name and score. Returns a list of lists containing the sorted candidate names according to their scores in descending order. If two candidates have the same score, they are sorted alphabetically by their names. result = [] for candidates in test_cases: # Sort candidates primarily by score (descending) and secondarily by name (alphabetically) sorted_candidates = sorted(candidates, key=lambda x: (-x[1], x[0])) result.append([name for name, score in sorted_candidates]) return result # Function to parse the input and use the sort_candidates function to produce output def main(input_data): input_lines = input_data.strip().split(\\"n\\") index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 candidates = [] for _ in range(N): parts = input_lines[index].split() name = \\" \\".join(parts[:-1]) score = int(parts[-1]) candidates.append((name, score)) index += 1 test_cases.append(candidates) result = sort_candidates(test_cases) output = [] for sorted_candidates in result: for candidate in sorted_candidates: output.append(candidate) output.append(\\"\\") # Add an empty line between test cases for clarity return \\"n\\".join(output).strip() # strip() to remove the last empty line # Example usage: input_data = 2 3 Alice 50 Bob 75 Charlie 75 2 Dave 30 Eve 40 print(main(input_data))"},{"question":"You are given a sequence of n integers (a_1, a_2, ..., a_n) and a list of m queries. Each query is represented as a pair of integers l and r (1 ≤ l ≤ r ≤ n). To answer a query, you need to find the sum of all integers in the subsequence (a_l, a_{l+1}, ..., a_r). Write a program to efficiently handle multiple queries on this sequence. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of elements in the sequence and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10000) — the elements of the sequence. The next m lines contain two integers l and r each (1 ≤ l ≤ r ≤ n) — the indices for each query. Output For each query, output the sum of the elements in the subsequence (a_l, a_{l+1}, ..., a_r). Examples Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15","solution":"def preprocess(prefix_sums, sequence): Fill the prefix_sums array where prefix_sums[i] is the sum of all elements from the beginning of the sequence up to and including index i-1. for i in range(1, len(sequence) + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] def query_sum(prefix_sums, l, r): Returns the sum of elements in the subsequence from index l to r (inclusive). return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, sequence, queries): Processes the sum queries on the given sequence. prefix_sums = [0] * (n + 1) preprocess(prefix_sums, sequence) results = [] for l, r in queries: results.append(query_sum(prefix_sums, l, r)) return results"},{"question":"Given a list of integers, rearrange the elements so that all even numbers appear before all odd numbers. Preserve the relative order of the even and odd numbers. Constraints * 1 leq |list| leq 50 * 1 leq num leq 1000, where num represents an element of the list. Input Input is given from Standard Input in the following format: list Output Print the rearranged list. Examples Input [3, 1, 2, 4, 7, 6] Output [2, 4, 6, 3, 1, 7] Input [1, 1, 1, 2] Output [2, 1, 1, 1]","solution":"def rearrange_list(lst): Rearranges the list so that all even numbers appear before all odd numbers, while preserving the relative order of the even and odd numbers. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"Anna loves flowers and has recently started her own flower shop. She is trying to arrange the potted flowers in a straight line across her shop to create a beautiful display. However, she wants to follow a specific pattern to ensure that the display looks aesthetically pleasing. The pattern she wants to follow is \\"increasing beauty.\\" You are given heights of `N` flower pots arranged in a straight line. Anna considers a display of flower pots to be \\"aesthetically pleasing\\" if the heights of the flower pots are strictly increasing. Your task is to determine the maximum length of any contiguous subarray of flower pots which is \\"aesthetically pleasing.\\" For example, if the heights of the flower pots are `[1, 2, 1, 2, 3]`, the longest subarray with strictly increasing heights is `[1, 2, 3]`, which has a length of 3. Write a function `max_increasing_subarray_length` that takes the following input: - `n` (integer): The number of flower pots. - `heights` (list of integers): The heights of the `n` flower pots. The function should return the length of the longest contiguous subarray where the heights of the flower pots are strictly increasing. Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of flower pots. - The second line contains `n` integers, `heights[i]` (1 ≤ heights[i] ≤ 1,000,000), where `heights[i]` is the height of the flower pot at position `i`. Output - Print an integer, the length of the longest contiguous subarray with strictly increasing heights. Example Input: ``` 5 1 2 1 2 3 ``` Output: ``` 3 ``` Explanation: - The longest contiguous subarray with strictly increasing heights is `[1, 2, 3]`, which has a length of 3. Function Signature ```python def max_increasing_subarray_length(n: int, heights: List[int]) -> int: ```","solution":"from typing import List def max_increasing_subarray_length(n: int, heights: List[int]) -> int: if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given an array of integers, your task is to determine if there are any three integers in the array that sum up to a given target value. If such a triplet exists, find one such triplet and print it. If no such triplet exists, return \\"NO\\". INPUT: First line of input contains an integer T, the number of test cases. The first line of each test case contains two integers N and K, where N is the number of elements in the array, and K is the target sum. The second line contains N integers representing the elements of the array. OUTPUT: For each test case, output \\"NO\\" (without quotes) if no such triplet exists. Otherwise, output three integers that sum up to K. If there are multiple solutions, output any of them. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 -10^6 ≤ array elements ≤ 10^6 -10^6 ≤ K ≤ 10^6 SAMPLE INPUT: 2 6 9 1 2 3 4 5 6 4 10 1 2 3 8 SAMPLE OUTPUT: 1 2 6 NO","solution":"def find_triplet_sum(arr, n, target): Function to find a triplet in the array that sums to the target. :param arr: List of integers :param n: Number of elements in array :param target: Target sum :return: A tuple of three integers that sum to the target or \\"NO\\" arr.sort() for i in range(n): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return (arr[i], arr[left], arr[right]) elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases to find triplets in arrays that sum to the target. :param test_cases: List of tuples. Each tuple has (N, K, arr) :return: List of results for each test case results = [] for n, k, arr in test_cases: result = find_triplet_sum(arr, n, k) results.append(result) return results"},{"question":"Paint a Grid You are given an N x M grid where each cell contains a number representing the color of that cell. You are to perform a painting operation which changes the color of a cell and its neighboring cells (up, down, left, and right ones). Given a cell position (x, y) and new color Z, your task is to write a function that will change the color of the specified cell and its neighbors to Z. If any neighboring cell is not of the same initial color as the specified cell, that cell\'s color should remain unchanged. Implement the function `paintGrid` that will perform the painting operation. Input The function receives three parameters: 1. `grid` (2D List of integers): The representation of the grid, grid[i][j] contains the integer representing the color of the cell at position (i, j). The dimensions of the grid are N x M. 2. `position` (tuple of two integers): The coordinates (x,y) of the cell whose color is to be changed. 3. `new_color` (integer): The new color Z to be applied to the specified cell and its neighbors. Output The function should return the modified grid after performing the painting operation. Constraints - The dimensions of the grid (N, M) are such that 1 ≤ N, M ≤ 100. - The color values and the new_color Z are non-negative integers. - You can assume (x, y) are always valid within the grid\'s boundaries. Example ```python def paintGrid(grid, position, new_color): # Implement the logic here # Sample Input grid = [ [1, 1, 1], [1, 1, 0], [1, 0, 1] ] position = (1, 1) new_color = 2 # Expected Output # [ # [2, 2, 2], # [2, 2, 0], # [2, 0, 1] # ] ```","solution":"def paintGrid(grid, position, new_color): Change the color of the specified cell and its same-color neighbors to the new color. N, M = len(grid), len(grid[0]) x, y = position original_color = grid[x][y] def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] != original_color: return grid[x][y] = new_color dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if original_color != new_color: dfs(x, y) return grid"},{"question":"Alex has a grid of dimensions 50 rows by 50 columns where each cell is initialized to 0. Alex can perform the following operation: set all values in a given subgrid to a specific value. Each subgrid is defined by its top-left and bottom-right corners. After performing a number of operations, Alex wants to know the sum of all values in the grid. Can you help Alex calculate the total sum of the values in the grid? # Input - The first line contains an integer m (1 ≤ m ≤ 50) — the number of operations. - Each of the next m lines contains five integers: x1, y1, x2, y2, v (1 ≤ x1 ≤ x2 ≤ 50, 1 ≤ y1 ≤ y2 ≤ 50, 0 ≤ v ≤ 100), where x1, y1 are the coordinates of the top-left cell, x2, y2 are the coordinates of the bottom-right cell of the subgrid, and v is the value to which all cells in the subgrid will be set. # Output - In a single line, print the sum of all values in the grid after all operations are applied. # Examples Input ``` 2 1 1 2 2 5 2 2 3 3 3 ``` Output ``` 34 ``` Input ``` 3 1 1 1 1 10 1 1 2 2 5 3 3 3 3 1 ``` Output ``` 31 ``` # Note - For the first example, the grid will look as follows after applying all the operations (only a portion of the grid is shown, the rest remains zero): ``` 5 5 0 0 ... 5 3 3 0 ... 0 3 3 0 ... 0 0 0 0 ... ... ``` The sum of all values in this grid segment is 34. - For the second example, the grid will look as follows after applying all the operations (again, only a portion of the grid is shown): ``` 5 5 0 0 ... 5 5 0 0 ... 0 0 1 0 ... 0 0 0 0 ... ... ``` The sum of all values in this grid segment is 31.","solution":"def calculate_total_sum(m, operations): grid = [[0] * 50 for _ in range(50)] for operation in operations: x1, y1, x2, y2, v = operation for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] = v total_sum = 0 for row in grid: total_sum += sum(row) return total_sum"},{"question":"Problem Statement You are given an array arr consisting of n positive integers and an integer k . Your task is to find the number of contiguous subarrays of arr such that the difference between the maximum and minimum element in the subarray is at most k . # Input - The first line contains an integer n (1 le n le 10^5), the size of the array. - The second line contains n positive integers, the elements of the array arr (1 le arr[i] le 10^9). - The third line contains an integer k (0 le k le 10^9). # Output - Output a single integer, the number of contiguous subarrays where the difference between the maximum and minimum element is at most k . # Examples **Input:** ``` 5 1 3 6 4 2 2 ``` **Output:** ``` 8 ``` **Input:** ``` 3 4 4 4 0 ``` **Output:** ``` 6 ``` **Explanation:** **Example 1:** - The valid subarrays are: [1, 3], [3, 6], [6, 4], [4, 2], [1, 3, 6], [3, 6, 4], [6, 4, 2], [1, 3, 6, 4, 2] - Hence, the total number of valid subarrays is 8. **Example 2:** - Every subarray of [4, 4, 4] is valid because all elements are the same and the difference between the maximum and minimum element is 0. Hence, there are 6 valid subarrays: [4], [4], [4], [4, 4], [4, 4], [4, 4, 4]","solution":"def count_valid_subarrays(arr, k): n = len(arr) start = 0 end = 0 result = 0 min_deque = [] max_deque = [] while end < n: while min_deque and arr[min_deque[-1]] > arr[end]: min_deque.pop() min_deque.append(end) while max_deque and arr[max_deque[-1]] < arr[end]: max_deque.pop() max_deque.append(end) while arr[max_deque[0]] - arr[min_deque[0]] > k: start += 1 if min_deque[0] < start: min_deque.pop(0) if max_deque[0] < start: max_deque.pop(0) result += (end - start + 1) end += 1 return result # Read input values if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) k = int(data[n+1]) print(count_valid_subarrays(arr, k))"},{"question":"In a galaxy far, far away, there exists an advanced civilization that has developed an intriguing numbering system where each number is represented as a string of lowercase English letters. The civilization follows specific rules to convert integers to their unique string representation and vice versa. Given an integer n, the civilization divides it into segments, each of which is converted to its corresponding letter in the English alphabet (a = 1, b = 2, ..., z = 26). However, the segmentation must strictly follow these rules: 1. Each segment ranges between \'a\' (1) and \'z\' (26) inclusively. 2. Numbers with more than two digits must be split into valid segments; for example, 123 should be segmented as \\"abc\\" or \\"aw\\", but not as \\"lc\\" (since 123 isn\'t a valid segment). 3. The sum of the segments should maintain the original value of n. Your task is to write a function that receives an integer n and returns the total number of unique valid string representations for the given number. # Input The input consists of a single integer n (1 ≤ n ≤ 10^9). # Output Output a single integer representing the total number of unique valid string representations for the given number. # Example Input: 123 Output: 3 Explanation: The valid segments are [\\"abc\\", \\"aw\\", \\"lc\\"]. Therefore, there are 3 unique representations of the number 123. Input: 27 Output: 1 Explanation: The valid segment is [\\"bg\\"]. Therefore, there is 1 unique representation of the number 27. # Note The integer values exceeding the length constraints should be segmented accordingly, ensuring valid sequences by following the alphabetic mapping thoroughly.","solution":"def count_valid_segments(n): Given an integer n, returns the total number of unique valid string representations. s = str(n) length = len(s) def is_valid_segment(segment): if not segment or segment[0] == \'0\': return False num = int(segment) return 1 <= num <= 26 def count_ways(index): if index == length: return 1 if index > length: return 0 count = 0 if is_valid_segment(s[index:index + 1]): count += count_ways(index + 1) if is_valid_segment(s[index:index + 2]): count += count_ways(index + 2) return count if s and s[0] == \'0\': # leading zeros are not allowed return 0 return count_ways(0)"},{"question":"Bob is playing a game \\"Encryptor\'s Tower\\". In this game, Bob needs to protect his tower by setting up multiple layers of encryption. The encryption is represented as a binary string where \'1\' is an active bit and \'0\' is an inactive bit. Bob\'s goal is to find the minimum number of moves required to convert the encryption\'s binary string `s` into another binary string `t` of the same length, where a move is defined as toggling any bit (changing \'0\' to \'1\' or \'1\' to \'0\'). Help Bob to determine the minimum number of moves needed. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the length of the binary strings. The second line contains a binary string s of length n. The third line contains a binary string t of length n. Output: Output the minimum number of moves required to convert `s` into `t`. Example: Input 4 1100 1001 Output 2 Note: In the given example, the minimum number of moves can be achieved by toggling the second and third bits of the string `s`. Thus, `1100` can be converted to `1001` in 2 moves.","solution":"def min_moves_to_convert(n, s, t): Returns the minimum number of moves required to convert binary string s into binary string t. Parameters: n (int): Length of the binary strings. s (str): The initial binary string. t (str): The target binary string. Returns: int: The minimum number of moves required. moves = 0 for i in range(n): if s[i] != t[i]: moves += 1 return moves"},{"question":"A string is said to be a valid parentheses string (VPS) if it matches one of the following: 1. It is an empty string \\"\\". 2. It can be written as AB (A concatenated with B), where A and B are valid parentheses strings. 3. It can be written as (A), where A is a valid parentheses string. You are given a string s consisting only of \'(\' and \')\'. A substring of s is defined as a contiguous sequence of characters within s. Your task is to determine the number of pairs (i, j) such that the substring s[i:j+1] (both inclusive) is a valid parentheses string. Input The first line contains a single integer n (1 ≤ n ≤ 2000) — the length of the string s. The second line contains the string s consisting of \'(\' and \')\'. Output Print a single integer — the number of pairs (i, j) such that the substring s[i:j+1] is a valid parentheses string. Examples Input 6 ()()() Output 6 Input 4 (()) Output 2 Note In the first example, the 6 valid substrings are: (i, j) pairs (0, 1), (2, 3), (4, 5), (0, 3), (2, 5), (0, 5). In the second example, the 2 valid substrings are: (0, 3), (1, 2).","solution":"def count_vps_substrings(n, s): Counts the number of valid parentheses substrings in the given string s. Args: n (int): The length of the string s. s (str): The string containing only \'(\' and \')\'. Returns: int: The number of valid parentheses substrings. count = 0 # Iterate start from 0 to n for i in range(n): balance = 0 # Iterate end from i to n for j in range(i, n): if s[j] == \'(\': balance += 1 elif s[j] == \')\': balance -= 1 # Valid parentheses substring if balance is 0 if balance == 0: count += 1 # If balance is negative, no chance for future balancing if balance < 0: break return count"},{"question":"You are given a list of N positive integers. Your task is to find the maximum possible sum of a subsequence such that no two elements of the subsequence are adjacent in the list. For example, given the list [3, 2, 5, 10, 7], the maximum sum is 15, achieved by taking the elements 3, 5, and 7. Write a function `maxNonAdjacentSum(N, arr)` that takes an integer N (the number of elements in the list) and a list of N positive integers `arr`, and returns the maximum possible sum of a subsequence such that no two elements are adjacent. # Function Signature ```python def maxNonAdjacentSum(N: int, arr: List[int]) -> int: ``` # Input - `N` : An integer (1 ≤ N ≤ 10^5) representing the number of elements in the list. - `arr` : A list of N positive integers (1 ≤ arr[i] ≤ 10^4). # Output - Return a single integer which is the maximum sum of a subsequence with the given constraints. # Example ```python print(maxNonAdjacentSum(5, [3, 2, 5, 10, 7])) # Output: 15 print(maxNonAdjacentSum(4, [3, 2, 7, 10])) # Output: 13 print(maxNonAdjacentSum(3, [3, 2, 5])) # Output: 8 ``` # Explanation In the first example, the subsequence [3, 5, 7] is not adjacent and has the maximum sum of 15. In the second example, the subsequence [3, 10] is not adjacent and has the maximum sum of 13. In the third example, the subsequence [3, 5] is not adjacent and has the maximum sum of 8. Note: Ensure that the function handles the case where N=1 correctly.","solution":"from typing import List def maxNonAdjacentSum(N: int, arr: List[int]) -> int: if N == 0: return 0 if N == 1: return arr[0] prev1 = arr[0] prev2 = 0 for i in range(1, N): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"The Gwapo City Library is organizing a unique book lending competition. The library has N shelves, each containing a certain number of books. A participant can borrow books from these shelves under certain rules. They start by selecting any shelf and can consecutively borrow books from the subsequent shelves, but only if the number of books in each subsequent shelf increases. Your task is to write a program to determine the maximum number of books a participant can borrow by selecting a starting shelf and borrowing books from subsequent shelves with increasing number of books. Input The input is given in the following format: N b1 b2 b3 ... bN The first line gives the number of shelves N (1 ≤ N ≤ 1000), and the second line gives N integers where bi (0 ≤ bi ≤ 1000) represents the number of books on the i-th shelf. Output For the given shelf information, output the maximum number of books a participant can borrow. Example Input 5 1 3 2 5 4 Example Output 9 Explanation: The sequence of shelves with increasing number of books is 1, 3, and 5, totaling 1 + 3 + 5 = 9 books.","solution":"def max_books(N, books): Returns the maximum number of books a participant can borrow by selecting a starting shelf and borrowing from subsequent shelves with an increasing number of books. if N == 0: return 0 max_sum = [0] * N max_sum[0] = books[0] for i in range(1, N): max_sum[i] = books[i] for j in range(i): if books[i] > books[j]: max_sum[i] = max(max_sum[i], max_sum[j] + books[i]) return max(max_sum) # Example usage: # N = 5 # books = [1, 3, 2, 5, 4] # print(max_books(N, books)) # Output: 9"},{"question":"You are given two strings, s1 and s2, each containing lowercase English letters. Determine the minimum number of steps required to make these two strings anagrams of each other. In one step, you can delete exactly one character from either string. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Input The first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. For each test case, the first line contains the string s1 (1 ≤ |s1| ≤ 10^5), and the second line contains the string s2 (1 ≤ |s2| ≤ 10^5). It is guaranteed that the sum of the lengths of strings across all test cases does not exceed 2 ⋅ 10^5. Output For each test case, print the answer — the minimum number of steps required to make the strings s1 and s2 anagrams of each other. Example Input 4 abc cde a ab ab cd abc bca Output 4 2 4 0 Note In the first test case, we can delete \'a\' and \'b\' from s1 and \'d\' and \'e\' from s2 to make both strings \\"c\\". In the second test case, we can delete \'b\' from s2 to make both strings \\"a\\". In the third test case, we can delete all characters from both strings to make both strings empty. In the fourth test case, the strings are already anagrams of each other. Hence, no deletions are required.","solution":"from collections import Counter def min_steps_to_anagram(s1, s2): count1 = Counter(s1) count2 = Counter(s2) steps = 0 for char in set(count1.keys()).union(set(count2.keys())): steps += abs(count1[char] - count2[char]) return steps def solve(test_cases): results = [] for s1, s2 in test_cases: results.append(min_steps_to_anagram(s1, s2)) return results"},{"question":"Josh explores zigzag pattern: Given an array of n integers, arrange the elements in a zigzag pattern where the first element is less than the second element, the second element is greater than the third element, and so on, i.e., a[0] < a[1] > a[2] < a[3] > a[4] < ... Your task is to reorder the elements of the array to achieve the desired zigzag pattern. Input The first line contains one integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), the elements of the array. Output Print the elements of the array in a zigzag pattern. Examples Input 7 4 3 7 8 6 2 1 Output 3 7 4 8 2 6 1 Input 5 1 4 3 2 9 Output 1 4 2 9 3 Note In the first example, the array elements are reordered to form the zigzag pattern: - 3 < 7 > 4 < 8 > 2 < 6 > 1 In the second example, the array elements are reordered to form the zigzag pattern: - 1 < 4 > 2 < 9 > 3","solution":"def zigzag(arr): Reorders the elements of the array to achieve a zigzag pattern. n = len(arr) # Traverse all even positioned elements for i in range(n-1): if i % 2 == 0: if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] else: if arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"A large amusement park plans to divide its land into plots. Each plot will be rectangular in shape. A specialized contractor is hired to optimize the areas for different attractions and needs. For efficiency, the contractor needs a program that helps to quickly determine the greatest possible number of ways to divide a given plot into smaller rectangular plots. You are given the dimensions of the main plot as integers L (length) and W (width). The contractor can divide the plot only by drawing line segments either parallel to the length or width of the plot such that every smaller plot is also rectangular and non-overlapping. Your task is to calculate the maximum number of ways to subdivide the original plot, where each subdivision happens in such a way that each smaller rectangular plot itself can be subdivided further in an optimal way until no more divisions are possible. Input The input consists of a single line containing two space-separated integers L and W, representing the length and width of the plot. Output Print a single integer representing the maximum number of ways to subdivide the original rectangular plot. Constraints 1 ≤ L, W ≤ 10^5 SAMPLE INPUT 4 3 SAMPLE OUTPUT 5 Explanation: The plot of dimensions 4 x 3 can be divided into: 1) One vertical line at position 1, making two plots of 1x3 and 3x3. 2) One vertical line at position 2, making two plots of 2x3 and 2x3. 3) One horizontal line at position 1, making two plots of 4x1 and 4x2. 4) One horizontal line at position 2, making two plots of 4x2 and 4x1. 5) One horizontal line at position 3, making two plots of 4x3 and 4x0 (not a valid division). The answer is reduced by considering unique ways only. Note: The complexity lies in calculating optimal subdivisions and handling large input efficiently, adhering to constraints.","solution":"def max_subdivisions(L, W): Calculate the maximum number of ways to subdivide the rectangular plot. Parameters: L (int): The length of the plot. W (int): The width of the plot. Returns: int: The maximum number of ways to subdivide the plot. return (L - 1) + (W - 1)"},{"question":"Write a function to find the first non-repeated character in a given string. Input The input consists of a single line which contains a non-empty string `s` of length not exceeding 1000 characters. Output The function should return the first non-repeated character in the string. If all characters are repeated, return \\"None\\". Example Input swiss Output w Input aabbcc Output None","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string `s`. If all characters are repeated, returns \\"None\\". char_count = {} # Count the frequency of each character in the string. for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once. for char in s: if char_count[char] == 1: return char return \\"None\\""},{"question":"You have been given a list of integers representing the heights of a sequence of buildings. Your task is to find the maximum height difference between any two buildings such that the taller building appears later in the list than the shorter one. **Input** The first line contains an integer `n` (1 ≤ n ≤ 100000), representing the number of buildings. The second line contains `n` space-separated integers representing the heights of the buildings. **Output** Print a single integer, which is the maximum height difference between any two buildings such that the taller building appears later in the list than the shorter one. If no such difference exists, print 0. **Example** Input ``` 6 3 1 4 7 5 8 ``` Output ``` 7 ``` *Explanation* - The differences are: - between 3 and 4: 1 - between 3 and 7: 4 - between 3 and 5: 2 - between 3 and 8: 5 - between 1 and 4: 3 - between 1 and 7: 6 - between 1 and 5: 4 - between 1 and 8: 7 - between 4 and 7: 3 - between 4 and 5: 1 - between 4 and 8: 4 - between 7 and 8: 1 - The maximum difference is 7. - If no building taller exists later in the list for any building, the output is 0.","solution":"def max_height_difference(buildings): Finds the maximum height difference between any two buildings such that the taller building appears later in the list than the shorter one. If no such difference exists, returns 0. :param buildings: List[int] - a list of integers representing the heights of the buildings. :return: int - the maximum height difference. if not buildings: return 0 max_difference = 0 min_height_so_far = buildings[0] for height in buildings: if height > min_height_so_far: max_difference = max(max_difference, height - min_height_so_far) min_height_so_far = min(min_height_so_far, height) return max_difference"},{"question":"A famous cat named Whiskers is playing a game with her N toy mice. Each mouse has a unique integer label from 1 to N. The game involves performing two types of operations on these mice: 1. Swap the labels of two specified mice. 2. Find the current label of a specified mouse. Initially, the labels of the mice are in sorted order (i.e., mouse i has label i). Let’s define the operations more formally: * **Swap Operation:** This operation is defined as `swap x y`, where x and y are the labels of the mice to swap. * **Query Operation:** This operation is defined as `query x`, where x is the label of the mouse whose current position we want to find. Constraints: * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq x, y leq N You are given the initial arrangement of the mice and a series of Q operations. Your task is to process all operations and output the result of each query. Input The first line contains two integers N and Q. Each of the next Q lines contains one operation, which is either: - `swap x y` - `query x` Output For each `query x` operation, output the current label of the specified mouse on a new line. Example Input 5 3 swap 2 4 query 3 query 2 Output 3 4","solution":"def process_operations(N, operations): # Initialize the mice labels in sorted order mice = list(range(1, N+1)) results = [] for operation in operations: parts = operation.split() if parts[0] == \'swap\': x, y = int(parts[1]), int(parts[2]) # Swap the mice labels at positions x-1 and y-1 mice[x-1], mice[y-1] = mice[y-1], mice[x-1] elif parts[0] == \'query\': x = int(parts[1]) # Add the current label of the mouse to the results results.append(mice[x-1]) return results"},{"question":"Problem Statement: You are given a string containing only lowercase alphabetical characters and spaces. Your task is to write a program that rearranges the words in the string such that they appear in reverse order, but the characters within each word are unchanged. Input: A single line containing the string to be rearranged. Output: A single line containing the words in reverse order. Constraints: - The input string will not exceed 1000 characters in length. - There may be multiple spaces between words in the input string. Example: Input: \\"the quick brown fox\\" Output: \\"fox brown quick the\\" Input: \\" hello world \\" Output: \\"world hello\\"","solution":"def reverse_words_in_string(s): Returns the string with the words in reverse order keeping the characters within each word unchanged. :param s: A string containing lowercase alphabetical characters and spaces. :return: A string with the words in reverse order. # Split the string by spaces to get a list of words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list back into a string with a single space separator return \' \'.join(reversed_words)"},{"question":"You are working on a story-driven game where the player needs to navigate through a grid-based world. The world is represented by a 2D grid of characters, where each character can either be a player (\'P\'), an item (\'I\'), an obstacle (\'#\'), or an empty space (\'.\'). The player can move in four possible directions: up, down, left, and right. However, the player cannot move through obstacles (\'#\') and cannot move outside the boundaries of the grid. The goal is to determine the minimum number of moves the player needs to reach any item (\'I\') starting from the initial player position (\'P\'). If no items are reachable, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 300), representing the number of rows and columns in the grid. Each of the next n lines contains exactly m characters that describe the grid. Output Output a single integer, the minimum number of moves needed for the player to reach any item. If no items are reachable, output -1. Examples Input 5 5 P ..... #.... #...I # Output 7 Input 3 3 P.# # I.. Output -1 Note In the first example, the player can navigate around the obstacles to reach the item in 7 moves. In the second example, the items are not reachable from the player\'s starting position.","solution":"from collections import deque def min_moves_to_item(n, m, grid): # Find the starting position of the player for i in range(n): for j in range(m): if grid[i][j] == \'P\': start = (i, j) break # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set() visited.add((start[0], start[1])) while queue: x, y, steps = queue.popleft() # Check if we have reached an item if grid[x][y] == \'I\': return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # No item is reachable return -1"},{"question":"You are given an array of n integers. You need to perform exactly k operations on this array to maximize its sum. In one operation, you can pick any single element of the array, negate its value (multiply by -1), and add it back to the array. The constraints ensure that the operation count k is less than or equal to the number of elements n in the array. Input The first input line contains a pair of integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the number of elements in the array and the number of operations to perform. The second line contains n space-separated integers ai (-1000 ≤ ai ≤ 1000) — the elements of the array. Output Print the maximum possible sum of the array after performing exactly k operations. Examples Input 5 3 -1 2 3 4 -5 Output 15 Input 4 2 -3 -2 1 6 Output 12","solution":"def maximize_sum(n, k, arr): arr.sort() for i in range(k): if arr[i] < 0: arr[i] = -arr[i] else: break return sum(arr)"},{"question":"You are given an array of n distinct integers, and we want to make it a sorted array by performing exactly one operation. In one operation, you can select any subarray (i.e., a contiguous subsequence) of the array and reverse it. Your task is to find the subarray that needs to be reversed to make the entire array sorted in non-decreasing order. If no such subarray exists or if multiple subarrays can be reversed to get a sorted array, return any such subarray. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. # Output Output two integers l and r (1 ≤ l ≤ r ≤ n) — the start and end indices of the subarray that you should reverse to sort the entire array in non-decreasing order. # Example **Input:** ``` 5 1 5 3 4 2 ``` **Output:** ``` 2 5 ``` **Note:** In the example above, reversing the subarray from index 2 to index 5 (subarray [5, 3, 4, 2]) will result in the sorted array [1, 2, 3, 4, 5]. The actual subarray to reverse may differ if there are multiple valid options.","solution":"def find_subarray_to_reverse(n, array): # Create a sorted version of the array sorted_array = sorted(array) # Identify the leftmost position where the arrays differ l = 0 while l < n and array[l] == sorted_array[l]: l += 1 # If the entire array is already sorted if l == n: return (1, 1) # Identify the rightmost position where the arrays differ r = n - 1 while array[r] == sorted_array[r]: r -= 1 return (l + 1, r + 1)"},{"question":"A company has a fleet of self-driving cars positioned on a straight road. Each car has a unique position on the road represented by an integer coordinate. The company wants to schedule a series of updates where they reposition some of the cars to new coordinates. After each update, they are interested in determining the minimum distance required for a data center to be placed on the road such that it can serve all the cars effectively. The service criteria is that the closest car to the data center should be exactly at distance `k` units while all other cars should be at a distance greater than or equal to `k`. Given the initial positions of `n` cars on the road and the scheduled `m` updates, determine the required minimum distance for the data center after each update. Input The first line contains three integers `n`, `k`, and `m` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9, 0 ≤ m ≤ 10^5) — the number of cars, the fixed distance `k`, and the number of updates, respectively. The second line contains `n` integers `p_i` (1 ≤ p_i ≤ 10^9) — the initial positions of the cars on the road. Each of the next `m` lines contains two integers `i` (1 ≤ i ≤ n) and `x` (1 ≤ x ≤ 10^9) — the position of the `i`-th car is updated to `x`. Output Print `m+1` lines: the required minimum distance for the data center initially and after each update. Examples Input 5 3 2 1 4 7 10 13 2 6 4 8 Output 3 3 3 Input 3 5 1 1 6 10 3 3 Output 5 5 Note In the first example, the initial positions are [1, 4, 7, 10, 13]. The data center can be positioned such that the closest car is at a distance of 3 units from it, while all other cars are at a greater or equal distance. After each update, regardless of the new positions, the optimal placement remains with `k = 3`.","solution":"def min_dist_for_data_center(n, k, m, positions, updates): Determines the required minimum distance for the data center initially and after each update. Parameters: n : int - number of cars k : int - fixed distance for the closest car m : int - number of updates positions : list of int - initial positions of cars updates : list of tuple - updates in the format (i, x) where car i\'s position is updated to x Returns: list of int - minimum distances for the data center initially and after each update # Find the initial minimum required distance positions.sort() def min_distance(positions): positions.sort() for i in range(1, n): if positions[i] - positions[i-1] >= k: return k return k # Initial minimum distance result = [min_distance(positions)] # Apply each update and find new minimum distance for update in updates: i, x = update positions[i-1] = x result.append(min_distance(positions)) return result"},{"question":"At a certain castle, there is a grand feast happening. People from all over the kingdom are invited, and they bring with them various dishes as gifts for the host. There is a tradition to arrange these dishes in a specific pattern resembling the shape of a pyramid when viewed from the side. The pyramid structure requires that the number of dishes decreases by exactly one as you go up each level. For example, the base level of the pyramid might have 5 dishes, the next level 4, and so on until the top level has exactly one dish. There is a long table to display these dishes, and it can either fit the full pyramid structure or a part of it. Your task is to determine the maximum height of the pyramid that can be formed on the table given the total number of dishes. The total number of dishes given will always be able to form at least the top level of the pyramid with one dish. Input The first line of input contains an integer, T, denoting the number of test cases. Each of the following T lines contains a single integer N representing the number of dishes. Output For each test case, output a single integer, the maximum height of the pyramid that can be formed with N dishes. Example Input 3 6 20 15 Output 3 5 5 Explanation - For the first test case with 6 dishes, the pyramid can have a maximum height of 3 (5 dishes on the base, 4 dishes on the next level, 3 dishes on the next, and 1 dish on the top-level totals 1+2+3 dishes). - For the second test case with 20 dishes, the pyramid can have a maximum height of 5. - For the third test case with 15 dishes, the pyramid can have a maximum height of 5.","solution":"def max_pyramid_height(n): height = 0 dishes_used = 0 while dishes_used + (height + 1) <= n: height += 1 dishes_used += height return height def solve_pyramids(T, dishes): results = [] for n in dishes: results.append(max_pyramid_height(n)) return results"},{"question":"A popular video game involves traversing a grid-like maze. The maze is represented as an `n x m` grid with cells that are either free or blocked. The player starts from the top-left corner of the grid and needs to reach the bottom-right corner. The player can only move to the right or down from any cell to an adjacent one. However, some cells are blocked, meaning the player cannot step on them. Given a representation of the maze, determine if there is a path from the top-left corner to the bottom-right corner. The maze is provided as a list of strings, where each string represents a row of cells in the grid. A cell is \'.\' if it is free and \'X\' if it is blocked. Write a function `is_path(maze)` that takes a list of strings `maze` as input and returns `True` if there\'s a path from the top-left to the bottom-right, and `False` otherwise. # Input - `maze`: A list of strings where each string represents a row of the maze. Each string contains only \'.\' or \'X\'. The length of the strings and the list is between 1 and 1000. # Output - Return `True` if there is a path from the top-left to the bottom-right corner of the maze. - Return `False` otherwise. # Example Input: ```python maze = [ \\"....\\", \\"...X\\", \\"X...\\", \\"....\\" ] ``` Output: ```python True ``` Input: ```python maze = [ \\"....\\", \\"X..X\\", \\"....\\", \\"X..X\\" ] ``` Output: ```python False ```","solution":"def is_path(maze): rows, cols = len(maze), len(maze[0]) visited = set() def dfs(r, c): if r >= rows or c >= cols or maze[r][c] == \'X\' or (r, c) in visited: return False if r == rows - 1 and c == cols - 1: return True visited.add((r, c)) return dfs(r + 1, c) or dfs(r, c + 1) return dfs(0, 0)"},{"question":"Develop a function that calculates the product of all unique prime factors of a given positive integer n. A prime factor of a number is a prime number that divides it evenly. Constraints: 1 <= n <= 1000 Input: One integer n. Output: One integer which is the product of all unique prime factors of n. Sample Input: 12 Sample Output: 6 Explanation: The prime factors of 12 are 2 and 3. The product of these unique prime factors is 6. Sample Input: 315 Sample Output: 105 Explanation: The prime factors of 315 are 3, 5, and 7. The product of these unique prime factors is 105.","solution":"def product_of_unique_prime_factors(n): def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True unique_prime_factors = set() for i in range(2, n + 1): if n % i == 0 and is_prime(i): unique_prime_factors.add(i) product = 1 for prime in unique_prime_factors: product *= prime return product"},{"question":"Problem H: Balanced String Checker Given a string consisting of opening and closing parentheses `(` and `)`, your task is to determine if the string is balanced. A string is considered balanced if each opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. For example, the strings `\\"()\\"`, `\\"(())\\"`, and `\\"(()())\\"` are balanced, while the strings `\\"((()\\"`, `\\"(()\\"`, and `\\")(\\"` are not. Write a program that reads multiple strings and checks whether each string is balanced. Input The input consists of multiple strings. Each string will be given in a new line and will contain only `(` and `)`. The maximum length of each string is 100,000 characters. The new set *ends* by a line containing a single period (`.`). Output For each input string, output the word `YES` if the string is balanced, otherwise print `NO`. Sample Input ``` () (( ()) (()()) ))( . ``` Sample Output ``` YES NO YES YES NO ```","solution":"def is_balanced_string(s): Determines if a string of parentheses is balanced. Parameters: s (str): The input string consisting of \'(\' and \')\' Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \'NO\' stack.pop() return \'YES\' if not stack else \'NO\' def process_input(input_lines): Process a list of input lines and return the results for each line. Parameters: input_lines (list): List of strings, each string consisting of \'(\' and \')\' or a period (\'.\') indicating end of input Returns: list: A list containing \\"YES\\" or \\"NO\\" for each corresponding line in input_lines that is not a period results = [] for line in input_lines: if line == \'.\': break results.append(is_balanced_string(line)) return results"},{"question":"A company has decided to conduct a coding competition using binary trees. The task they give you is to calculate the sum of the values of all nodes in a binary tree that do not have a sibling. A node is considered to not have a sibling if it is the only child of its parent. The tree is given in the form of a list of edges where each edge connects two nodes. The root of the tree is always node 1. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge connecting node u and node v. Output Print a single integer — the sum of the values of all nodes that do not have a sibling. Examples Input 5 1 2 1 3 2 4 2 5 Output 0 Input 5 1 2 2 3 3 4 4 5 Output 14 Input 3 1 2 2 3 Output 5 Note In the first example, all nodes have a sibling, so the output is 0. In the second example, nodes 2, 3, 4, and 5 do not have a sibling. The sum of their values is 2 + 3 + 4 + 5 = 14.","solution":"def sum_of_nodes_with_no_sibling(n, edges): from collections import defaultdict, deque # Degenerate case if n == 1: return 1 # Building the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # To keep track of parents and visited nodes visited = [False] * (n + 1) parent = [0] * (n + 1) # BFS to determine parent-child relationships q = deque([1]) visited[1] = True while q: node = q.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node q.append(neighbor) # Finding nodes with no siblings node_count = defaultdict(int) for i in range(2, n + 1): node_count[parent[i]] += 1 no_sibling_sum = 0 for i in range(2, n + 1): if node_count[parent[i]] == 1: no_sibling_sum += i return no_sibling_sum"},{"question":"You are responsible for organizing a knitting competition that involves knitting a unique pattern on a scarf. The task is to determine how many unique patterns can be knitted given a set of rules and constraints. A unique pattern is defined as a non-empty substring within a given string that represents the knitted scarf. The knitting machine records the scarf pattern as a sequence of lowercase letters, where each letter represents a different color of the yarn. Your job is to find out how many unique patterns (substrings) can be derived from the given scarf pattern. Note that different occurrences of the same substring are considered the same pattern. Input The first line contains a single integer T (1 ≤ T ≤ 10) representing the number of test cases. Each of the next T lines contains a single string S (1 ≤ |S| ≤ 200), where S represents the knitted scarf pattern for that test case. Output For each test case, print the number of unique patterns that can be derived from the string S. Example Input: 2 abc aaa Output: 6 3 Explanation: For the first test case, the unique substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". For the second test case, the unique substrings are: \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_unique_patterns(T, cases): results = [] for S in cases: unique_substrings = set() for i in range(len(S)): for j in range(i+1, len(S)+1): unique_substrings.add(S[i:j]) results.append(len(unique_substrings)) return results"},{"question":"The coding world is abuzz with a new trend: reversing strings with a twist! Instead of just reversing the string characters, you must reverse the order of the words in the string. Each word is defined as a contiguous sequence of non-space characters, and the words should be separated by exactly one space in the output. Help a fellow coder by writing a function that performs this task. The function should handle multiple lines of input. Input Format: The first line contains an integer t, denoting the number of test cases. Each of the next t lines contains a test case with a string s to be reversed. Output Format: For each test case, print the reversed string as described. Constraints: 1 ≤ t ≤ 100 1 ≤ length(s) ≤ 1000 SAMPLE INPUT 3 hello world the quick brown fox practice makes perfect SAMPLE OUTPUT world hello fox brown quick the perfect makes practice","solution":"def reverse_words_in_lines(t, lines): Reverses the order of words in each line of input. Args: t (int): Number of test cases. lines (list of str): List of input strings. Returns: list of str: List of strings with words reversed. result = [] for line in lines: reversed_line = \' \'.join(line.split()[::-1]) result.append(reversed_line) return result"},{"question":"You are part of a team tasked with organizing the seating arrangements for a conference where important discussions on data security will take place. Each participant needs to be seated such that all of them can communicate directly or indirectly with every other participant. In other words, the seating arrangement should ensure that the conference room forms a single connected component if the participants and their connections are represented as a graph. Your task is to write a program that determines if the provided seating plan meets the criteria of forming a single connected component. The participants are represented by integers starting from 1 up to n. The connections between participants indicating that they can directly communicate are given as a set of pairs of integers. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of participants. - The second line contains an integer `m` (0 ≤ m ≤ 4950), the number of connections. - Each of the next `m` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n; a ≠ b), indicating that participant `a` can directly communicate with participant `b`. **Output:** - Print `YES` if the seating arrangement forms a single connected component. Otherwise, print `NO`. **Example:** _Input:_ ``` 4 3 1 2 2 3 3 4 ``` _Output:_ ``` YES ``` _Input:_ ``` 4 2 1 2 3 4 ``` _Output:_ ``` NO ``` Your program should read the input from the standard input and output the result to the standard output.","solution":"def is_connected(n, connections): from collections import defaultdict, deque if n == 1: return \\"YES\\" graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) visited = set() def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\" # Code to read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) connections = [(int(data[i]), int(data[i+1])) for i in range(2, len(data), 2)] result = is_connected(n, connections) print(result)"},{"question":"Given two integers N and M, print the product of N and M if N is even; otherwise, print the sum of N and M. Constraints * 1 leq N, M leq 100 * All values in input are integers. Input Input is given from Standard Input in the following format: N M Output If N is even, print the product of N and M; otherwise, print the sum of N and M. Examples Input 4 6 Output 24 Input 3 7 Output 10 Input 5 2 Output 7","solution":"def process_numbers(N, M): Given two integers N and M, return the product of N and M if N is even; otherwise, return the sum of N and M. if N % 2 == 0: return N * M else: return N + M"},{"question":"In a certain card game, each card has a positive integer written on it. A player wins if they can draw 3 cards such that the sum of the numbers on those cards is exactly 15. You are given a list of integers representing the cards in a player\'s hand. Determine whether the player has a winning hand. Constraints * The number of cards in the player\'s hand will be between 3 and 20. * Each integer on the cards will be between 1 and 10. Input Input is given from Standard Input in the following format: N a1 a2 a3 ... aN Where: * N is an integer representing the number of cards. * a1, a2, a3, ..., aN are integers representing the numbers on the cards. Output If the player has a winning hand, print `WIN`; otherwise, print `LOSE`. Examples Input 5 5 5 5 3 7 Output WIN Input 4 1 2 3 4 Output LOSE","solution":"from itertools import combinations def check_winning_hand(cards): Checks if there\'s a combination of 3 cards that sum to 15. for combo in combinations(cards, 3): if sum(combo) == 15: return \\"WIN\\" return \\"LOSE\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = list(map(int, input().split())) N = data[0] cards = data[1:] print(check_winning_hand(cards))"},{"question":"Rohan is designing a text-based adventure game where characters can collect various items. Each character has a limited inventory size, and they can\'t carry more items than their inventory allows. Rohan needs help implementing the functionality to add items to a character\'s inventory. Write a function that simulates adding items to a character\'s inventory, considering the constraints mentioned above. Function signature: ```python def add_to_inventory(current_items: List[str], new_items: List[str], max_inventory_size: int) -> List[str]: ``` **Inputs:** - `current_items`: A list of strings representing the items currently in the character\'s inventory. The list contains unique item names. - `new_items`: A list of strings representing the new items that the character wants to add to their inventory. This list may contain duplicates or items already present in `current_items`. - `max_inventory_size`: An integer representing the maximum number of items the character can carry. **Output:** - A list of strings representing the updated inventory after attempting to add all `new_items` without exceeding the `max_inventory_size`. **Rules:** - If adding all items from `new_items` exceeds the `max_inventory_size`, only add as many items as possible, preserving the order. - Ensure no duplicate items are present in the final inventory. - If an item from `new_items` is already in `current_items`, it should not be added again. **Example:** ```python current_items = [\\"sword\\", \\"shield\\"] new_items = [\\"potion\\", \\"shield\\", \\"potion\\", \\"helmet\\"] max_inventory_size = 4 print(add_to_inventory(current_items, new_items, max_inventory_size)) # Output: [\\"sword\\", \\"shield\\", \\"potion\\", \\"helmet\\"] current_items = [\\"sword\\", \\"shield\\"] new_items = [\\"sword\\", \\"shield\\"] max_inventory_size = 4 print(add_to_inventory(current_items, new_items, max_inventory_size)) # Output: [\\"sword\\", \\"shield\\"] ```","solution":"from typing import List def add_to_inventory(current_items: List[str], new_items: List[str], max_inventory_size: int) -> List[str]: inventory_set = set(current_items) # To check for duplicates quickly updated_inventory = list(current_items) # Start with the current inventory for item in new_items: if item not in inventory_set and len(updated_inventory) < max_inventory_size: updated_inventory.append(item) inventory_set.add(item) return updated_inventory"},{"question":"Task Create a function that checks whether there is a valid permutation of a given integer array such that every pair of adjacent elements has an absolute difference of at least 2. Constraints * 1 ≤ length of array ≤ 100 * The array contains integers between 1 and 100 inclusive. Input The input is a single line containing space-separated integers which represent the array. Output The output should be a single line containing `YES` if such a permutation exists, otherwise `NO`. Examples Input 1 3 5 7 Output YES Input 1 2 3 4 Output NO Input 10 2 8 4 6 Output YES Input 1 Output YES","solution":"def valid_permutation(arr): Check if there is a valid permutation of the array such that every pair of adjacent elements has an absolute difference of at least 2. arr.sort() n = len(arr) for i in range(1, n): if abs(arr[i] - arr[i-1]) < 2: return \\"NO\\" return \\"YES\\" # Example usage if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip() arr = list(map(int, input_data.split())) print(valid_permutation(arr))"},{"question":"You are given a sequence of N integers and a target integer T. Your task is to determine the number of pairs of integers in the sequence that add up to the target T. Each pair should be counted only once and the elements of the pair should not be the same element (i.e., you cannot use the same index twice). Input The first line consists of two integers N and T — the length of the sequence and the target sum (1 ≤ N ≤ 100, -10^5 ≤ T ≤ 10^5). The second line contains N integers — the elements of the sequence (each element is between -10^5 and 10^5). Output Output a single integer — the number of pairs that add up to the target sum. Examples Input 5 9 2 7 11 15 1 Output 1 Input 4 10 4 6 3 7 Output 2","solution":"def count_pairs_with_sum(N, T, sequence): This function counts the number of unique pairs (i, j) where i != j and sequence[i] + sequence[j] == T. count = 0 seen = {} for number in sequence: complement = T - number if complement in seen and seen[complement] > 0: count += seen[complement] if number in seen: seen[number] += 1 else: seen[number] = 1 return count"},{"question":"# Problem A robot is placed in a 2D grid where each cell can either be free or blocked. The robot can move up, down, left, or right, but cannot move into blocked cells. The robot starts from the upper-left corner of the grid and must reach the lower-right corner. The grid is represented as a list of strings where each string is a row of the grid and each character in the string is either \'0\' for a free cell or \'1\' for a blocked cell. You need to determine the minimum number of steps required for the robot to reach the lower-right corner of the grid from the upper-left corner. If it is not possible for the robot to reach its destination, return -1. # Constraints 1. The grid will have dimensions ( m times n ) where ( 1 leq m, n leq 100 ). 2. The grid cells will only contain \'0\' or \'1\'. 3. The starting cell (upper-left) and the destination cell (lower-right) are always \'0\'. # Input The input consists of an integer ( t ) (number of test cases), followed by ( t ) test cases. Each test case consists of a value ( m ) (number of rows), ( n ) (number of columns), and then ( m ) strings each of length ( n ) representing the grid. # Output For each test case, output the minimum number of steps required for the robot to reach the destination or -1 if it is not possible. # Examples Input ``` 2 3 3 000 010 000 4 4 0000 0110 0110 0000 ``` Output ``` 4 6 ``` Explanation For the first test case, the robot can move like this: - Right (1 step) - Down (1 step) - Down (1 step) - Right (1 step) Total steps = 4 For the second test case, the robot can move like this: - Right (1 step) - Right (1 step) - Down (1 step) - Down (1 step) - Right (1 step) - Right (1 step) Total steps = 6","solution":"from collections import deque def min_steps_to_reach_destination(grid): rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] == \'0\' queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (rows - 1, cols - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def min_steps_for_multiple_grids(test_cases): results = [] for grid in test_cases: results.append(min_steps_to_reach_destination(grid)) return results"},{"question":"Alex and Bob are playing a game with a sequence of integers. The game consists of taking turns to remove an integer from the sequence until no integers are left. The winner is the one who removes the last integer. Alex always goes first. To make the game interesting, they add the following rule: on their turn, a player can only remove an integer if it divides the sum of the remaining integers in the sequence or if it is the only integer left. You are given the sequence of integers. Determine who will win the game assuming both Alex and Bob play optimally. Input: The first line contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N, the length of the sequence. The second line contains N space-separated integers. Output: For each test case, output \\"Alex\\" if Alex wins the game, otherwise output \\"Bob\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10^9, where 1 ≤ i ≤ N Sample Input: 2 3 2 3 4 4 1 2 1 3 Sample Output: Bob Alex Explanation: In the first test case, starting with the sequence [2, 3, 4]: - Alex can remove 2 (sum of [2, 3, 4] is 9 which 2 does not divide), so Alex must remove it as it\'s the first move and no other moves are possible. Now [3, 4] is left. - Bob can remove 3 (sum of [3, 4] is 7 which 3 does not divide), so Bob removes it. Now [4] is left. - Alex has to remove the last remaining 4. As Bob removed the last element, Bob wins. In the second test case, starting with the sequence [1, 2, 1, 3]: - Alex can remove 1 (sum of [1, 2, 1, 3] is 7 which 1 does not divide), Alex removes 1. Now [2, 1, 3] is left. - Bob can remove 1 (sum of [2, 1, 3] is 6 which 1 divides), Bob removes 1. Now [2, 3] is left. - Alex can remove 2 (sum of [2, 3] is 5 which 2 does not divide), Alex removes it. Now [3] is left. - Bob has to remove the last remaining 3. As Alex removed the last element, Alex wins.","solution":"def game_winner(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] if N % 2 == 0: results.append(\\"Alex\\") else: results.append(\\"Bob\\") return results"},{"question":"You are managing a robot vacuum cleaner with the capability to clean various rooms within a house. Each room has a different amount of dirt. The robot starts at room 0 and can only move to an adjacent room i from its current room j if the absolute difference between the dirt levels of room i and room j is not greater than a given threshold K. Your task is to determine if the robot can visit each room in the house based on this constraint. Input The first line contains the number of test cases, T. For each test case, the first line contains two integers, the number of rooms N and the threshold K. The second line of each test case contains N integers, representing the dirt levels in each room. Output For each test case, output \\"Yes\\" if the robot can visit every room starting from room 0, otherwise output \\"No\\". Constraints 1 ≤ T ≤ 1000 2 ≤ N ≤ 10000 0 ≤ K, dirt levels ≤ 10000 Example Input: 2 5 3 2 5 8 6 3 3 2 7 10 5 Output: Yes No","solution":"def can_visit_all_rooms(T, test_cases): results = [] def dfs(current_room, dirt_levels, visited, K): for next_room in range(len(dirt_levels)): if not visited[next_room] and abs(dirt_levels[current_room] - dirt_levels[next_room]) <= K: visited[next_room] = True dfs(next_room, dirt_levels, visited, K) for test_case in test_cases: N, K = test_case[0] dirt_levels = test_case[1] visited = [False] * N visited[0] = True dfs(0, dirt_levels, visited, K) if all(visited): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Kenneth recently encountered a unique problem while developing an AI algorithm. He needs to manipulate a given array of integers according to a set of operations to achieve the maximum sum of all elements in the array. He is allowed to perform the following operations exactly once on the entire array: 1. Choose two elements and swap them. 2. Reverse any sub-array of his choice. Help Kenneth determine the maximum possible sum of the array after performing one of the above operations. INPUT: The first line consists of a single integer T, the number of test cases. The next line of each test case consists of an integer n, the size of the array. The following line contains n space-separated integers representing the elements of the array. OUTPUT: For each test case, return the maximum possible sum of the array after performing one of the allowed operations. 1 ≤ T ≤ 100 2 ≤ n ≤ 10^5 -10^9 ≤ array[i] ≤ 10^9 SAMPLE INPUT 2 3 1 -2 3 4 -1 -3 4 2 SAMPLE OUTPUT 4 7 Explanation: - In the first test case, by reversing the sub-array [-2, 3] we get [1, 3, -2], which yields a maximum possible sum of 4. - In the second test case, swapping 4 and -1 results in [4, -3, -1, 2], which yields a maximum possible sum of 7.","solution":"def max_sum_after_operations(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] max_sum = sum(arr) # Since replacing or reversing doesn\'t change the sum, the maximum sum after # operation will still be the sum of the array. results.append(max_sum) return results # Wrapper to handle input and output format def solve(T, test_cases): return max_sum_after_operations(T, test_cases)"},{"question":"A company has \'n\' employees, and they are working on various projects. Each project has a specific duration and a set of prerequisites, represented by other projects that must be completed before it can start. The company\'s management wants to ensure that all projects can be completed within the given constraints. You are given \'n\', the total number of projects, and a list of \'m\' dependencies where each dependency is a pair (a, b) which means project \'a\' must be completed before project \'b\' can start. Write a program to determine the minimum number of days required to complete all the projects. If it\'s impossible to complete all projects due to cyclical dependencies, the program should return -1. Input Format: - The first line contains an integer \'n\' denoting the total number of projects (1 ≤ n ≤ 1,000). - The second line contains an integer \'m\' denoting the number of dependencies (0 ≤ m ≤ 10,000). - The next \'m\' lines each contain two integers \'a\' and \'b\' (1 ≤ a, b ≤ n) representing a dependency. Output Format: - Output a single integer which is the minimum number of days to complete all projects, or -1 if it\'s not possible. SAMPLE INPUT 4 4 1 2 2 3 3 4 4 2 SAMPLE OUTPUT -1","solution":"from collections import defaultdict, deque def min_days_to_complete_projects(n, m, dependencies): # Initialize graph and in-degree count graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} # Build the graph and update in-degrees for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Queue for the projects with no prerequisites zero_indegree_queue = deque([k for k in in_degree if in_degree[k] == 0]) # If the queue is initially empty, there is a cycle if not zero_indegree_queue: return -1 days = 0 completed_projects = 0 while zero_indegree_queue: days += 1 for _ in range(len(zero_indegree_queue)): node = zero_indegree_queue.popleft() completed_projects += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_indegree_queue.append(neighbor) if completed_projects != n: return -1 return days"},{"question":"Given a string `s` consisting only of the characters `+` and `-`, determine the final net value of the string. The `+` character has a value of +1, and the `-` character has a value of -1. Write a program to calculate the net value by summing up all the `+` and `-` characters in the string `s`. Constraints * The length of the string `s` (|s|) is between 1 and 100. Input Input is given from Standard Input in the following format: ``` s ``` Output Print the net value of the string `s`. Examples Input ``` ++-+- ``` Output ``` 1 ``` Input ``` ---- ``` Output ``` -4 ```","solution":"def net_value(s): Returns the net value of the string s composed of \'+\' and \'-\' characters. `+` has a value of +1, and `-` has a value of -1. return s.count(\'+\') - s.count(\'-\') # To verify the function works as expected, you can print the net value # For example: # s = \\"++-+-\\" # print(net_value(s)) # Output should be 1 # s = \\"----\\" # print(net_value(s)) # Output should be -4"},{"question":"Write a function that takes a list of integers and returns the first negative integer in the list. If there are no negative integers, return `None`. Constraints * 1 leq len(list) leq 100 * -1000 leq integer leq 1000 Input Input is given from Standard Input in the following format: list of integers separated by spaces Output Print the first negative integer in the list. If no negative integers are found, print `None`. Examples Input 3 5 -2 7 8 Output -2 Input 1 2 3 4 5 Output None Input -1 -2 -3 -4 -5 Output -1","solution":"def first_negative_integer(lst): Returns the first negative integer in the list. If there are no negative integers, return None. for num in lst: if num < 0: return num return None"},{"question":"A bicycle-sharing company is planning to deploy its bikes in a new city. Each bike station has n docks and there are m bikes to be parked. The company wants to know the number of ways to place the bikes in the docks such that no dock is empty and no two bikes are placed in the same dock. Input The input consists of two integers n and m (1 ≤ n ≤ 10, 1 ≤ m ≤ 10), where n represents the number of docks and m represents the number of bikes. Output Output one integer - the number of ways to park the bikes in the docks according to the given constraints. Examples Input 3 3 Output 6 Input 2 2 Output 2 Note Explanation for the first example: There are 3! (3 factorial) ways to park 3 bikes in 3 docks. So, the output is 6. Explanation for the second example: There are 2! (2 factorial) ways to park 2 bikes in 2 docks. So, the output is 2.","solution":"import math def number_of_ways_to_park_bikes(n, m): Returns the number of ways to park m bikes in n docks such that no dock is empty and no two bikes are placed in the same dock. if n == m: # When n == m, the number of ways is simply m! (factorial of m) return math.factorial(m) else: # It\'s impossible to park more bikes than the number of docks or with empty docks return 0"},{"question":"A software company requires a system to manage and monitor bug reports efficiently. Each bug report has a unique identifier and a priority level. The system needs to support some key operations: adding a new bug report, removing the highest priority bug report, and querying the highest priority bug report. Bug reports with higher priority levels should be handled earlier. If two bug reports have the same priority level, the one that was added earlier is handled first. You are required to implement this bug tracking system. Input: The first line contains an integer q (1 ≤ q ≤ 100,000) – the number of operations. Each of the next q lines contains an operation in one of the following formats: - ADD id priority – Adds a new bug report with the given id (a unique string) and priority (an integer between 1 and 10^9 inclusive). - REMOVE – Removes the highest priority bug report. If there are multiple such reports, the one added earlier should be removed first. - QUERY – Prints the id of the highest priority bug report. If there are multiple such reports, the one added earlier should be printed first. Output: For each QUERY operation, print the id of the highest priority bug report. Examples: Input: 6 ADD bug1 5 ADD bug2 7 QUERY ADD bug3 7 REMOVE QUERY Output: bug2 bug3 Note: In the example above: 1. The first QUERY returns \\"bug2\\" as it has the highest priority (7). 2. After the REMOVE operation, \\"bug2\\" is removed, thus the next highest priority bug is \\"bug3\\" with the same priority and added earlier than \\"bug1\\". The second QUERY returns \\"bug3\\".","solution":"import heapq class BugTracker: def __init__(self): self.bug_heap = [] self.bug_dict = {} self.counter = 0 def add(self, bug_id, priority): entry = (priority, self.counter, bug_id) self.counter += 1 heapq.heappush(self.bug_heap, (-priority, self.counter, bug_id)) self.bug_dict[bug_id] = entry def remove(self): while self.bug_heap: priority, counter, bug_id = heapq.heappop(self.bug_heap) if bug_id in self.bug_dict and self.bug_dict[bug_id][2] == bug_id: del self.bug_dict[bug_id] return def query(self): while self.bug_heap: priority, counter, bug_id = self.bug_heap[0] if bug_id in self.bug_dict and self.bug_dict[bug_id][2] == bug_id: return bug_id else: heapq.heappop(self.bug_heap) return None"},{"question":"In a distant future, scientists have developed robotic insects to assist in various environmental monitoring tasks. These robotic insects need to be programmed to return to their charging stations periodically to avoid running out of battery. However, the efficiency of these robotic insects depends on their ability to find the optimal path back to their charging stations with the minimum battery consumption. You are hired as a software developer to assist in programming these robotic insects. Your task is to implement an algorithm to find the shortest path in a grid that represents the environment they operate in. The grid is filled with different types of terrains, each with its own battery consumption rate. The robot can move to adjacent cells horizontally or vertically. Given a grid of size m x n, where each cell represents the battery consumption rate for that terrain, determine the minimum battery consumption required for a robot to travel from the top-left corner of the grid (0,0) to the bottom-right corner (m-1,n-1). Input The input consists of multiple datasets. Each dataset has the following format: m n g00 g01 ... g0n-1 g10 g11 ... g1n-1 ... gm-1,0 gm-1,1 ... gm-1,n-1 Where m (1 ≤ m ≤ 100) is the number of rows, n (1 ≤ n ≤ 100) is the number of columns, and gij (1 ≤ gij ≤ 1000) is the battery consumption rate for the cell at row i and column j. The last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed. Output For each dataset, output the minimum battery consumption required to travel from the top-left corner to the bottom-right corner in a line. Example Input 3 3 1 2 2 3 8 2 4 2 1 2 2 1 2 2 1 0 0 Output 8 4","solution":"import heapq def minimum_battery_consumption(grid): Finds the shortest path in a grid from top-left to bottom-right using Dijkstra\'s algorithm. :param grid: List of lists of integers representing battery consumption rates. :return: Minimum battery consumption required to travel from (0, 0) to (m-1, n-1). m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() pq = [(grid[0][0], 0, 0)] # Priority queue holding (cost, x, y) while pq: current_cost, x, y = heapq.heappop(pq) if (x, y) in visited: continue visited.add((x, y)) if x == m - 1 and y == n - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: heapq.heappush(pq, (current_cost + grid[nx][ny], nx, ny)) return -1 def process_input(data): Processes the input data and applies minimum_battery_consumption to each dataset. :param data: List of strings representing the input. :return: List of integers representing the results for each dataset. results = [] i = 0 while i < len(data): m, n = map(int, data[i].strip().split()) if m == 0 and n == 0: break grid = [] for j in range(i + 1, i + 1 + m): grid.append(list(map(int, data[j].strip().split()))) results.append(minimum_battery_consumption(grid)) i += m + 1 return results"},{"question":"You are given an array of integers of size n. Your task is to find the maximum sum of any contiguous subarray within the given array and also count the number of such subarrays that have this maximum sum. The maximum sum is defined as the largest possible sum of any contiguous elements in the array. If there are multiple subarrays with the same maximum sum, you must count all of them. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−1 000 000 ≤ ai ≤ 1 000 000) — the elements of the array. Output On the first line, print a single integer — the maximum sum. On the second line, print a single integer — the number of subarrays with this maximum sum. Examples Input 5 1 2 -2 3 -1 Output 4 1 Input 8 2 1 -3 4 -1 2 1 -5 4 Output 6 1 Note For the first sample case, the maximum sum of any contiguous subarray is 4. This sum is achieved by the subarray [1, 2, -2, 3]. There is only one such subarray that yields this maximum sum. For the second sample case, the maximum sum of any contiguous subarray is 6. This sum is achieved by the subarray [4, -1, 2, 1]. There is only one subarray that yields this maximum sum.","solution":"def max_subarray_sum_and_count(arr): Returns the maximum sum of any contiguous subarray and the count of such subarrays with this maximum sum. max_sum = -float(\'inf\') current_sum = 0 max_count = 0 element_count = len(arr) for i in range(element_count): if current_sum > 0: current_sum += arr[i] else: current_sum = arr[i] if current_sum > max_sum: max_sum = current_sum max_count = 1 elif current_sum == max_sum: max_count += 1 return max_sum, max_count"},{"question":"You are working on a new text editor application and need to implement a useful feature. The feature allows users to replace a specific word in the document with a new word. However, you want to control the number of replacements performed with each function call in order to enhance performance on very large documents. The function should only replace the first `n` occurrences of the target word. Write a function `replace_first_n_occurrences` that takes four parameters: a string `document` representing the text document, a string `target` representing the target word to be replaced, a string `replacement` representing the replacement word, and an integer `n` indicating the number of occurrences to replace. The function should return the modified document after performing the replacements. **Input:** - A string `document` (1 ≤ length of document ≤ 10^6) — the text document. - A string `target` (1 ≤ length of target ≤ 100) — the word to be replaced. - A string `replacement` (1 ≤ length of replacement ≤ 100) — the word that will replace the target. - An integer `n` (1 ≤ n ≤ total number of occurrences of target in document) — the number of occurrences to replace. **Output:** - Return a string representing the modified document after replacing the first `n` occurrences of the target word. **Example:** **Input:** ``` document = \\"the quick brown fox jumps over the lazy dog\\" target = \\"the\\" replacement = \\"a\\" n = 1 ``` **Output:** ``` \\"a quick brown fox jumps over the lazy dog\\" ``` **Input:** ``` document = \\"hello hello hello world\\" target = \\"hello\\" replacement = \\"hi\\" n = 2 ``` **Output:** ``` \\"hi hi hello world\\" ``` Note: 1. You should handle the replacements in a case-sensitive manner. 2. Only replace exact matches of the target word bounded by non-alphabetic characters or string boundaries.","solution":"import re def replace_first_n_occurrences(document, target, replacement, n): Replaces the first n occurrences of target word with the replacement word in the document. pattern = fr\'b{re.escape(target)}b\' return re.sub(pattern, replacement, document, count=n)"},{"question":"Tina plans to color a row of houses in her neighborhood. Each house must be painted in one of three colors: Red, Blue, or Green. The cost of painting each house in any one of the three colors is different. Tina wants to paint all the houses such that no two adjacent houses have the same color and to minimize the total cost of painting. You are given the number of houses N and a cost matrix costs where `costs[i][0]`, `costs[i][1]`, and `costs[i][2]` represent the cost of painting the `i`-th house with Red, Blue, and Green, respectively. Your task is to determine the minimum cost to paint all the houses under the given constraints. Input - The first line contains a single integer T denoting the number of test cases. - For each test case: - The first line contains a single integer N denoting the number of houses. - The next N lines contain three space-separated integers, representing the costs of painting each house with Red, Blue, and Green respectively. Output For each test case, output a single line containing the minimum cost to paint all the houses. Constraints - 1 <= T <= 100 - 1 <= N <= 1000 - 1 <= costs[i][j] <= 1000 Example Input 2 3 17 2 17 16 16 5 14 3 19 2 100 2 1 3 17 20 Output 10 4 Explanation For the first test case: - Paint the first house Blue, cost = 2 - Paint the second house Green, cost = 5 - Paint the third house Blue, cost = 3 Total cost = 2 + 5 + 3 = 10 For the second test case: - Paint the first house Green, cost = 1 - Paint the second house Blue, cost = 3 Total cost = 1 + 3 = 4","solution":"def min_cost_to_paint_houses(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] # number of houses costs = test_cases[t][1] # cost matrix if N == 0: results.append(0) continue # Initialize the dp array with the first house costs dp = costs[0] # Iterate over each house starting from the second house for i in range(1, N): # Calculate the minimum costs for painting the current house with each color new_dp = [ costs[i][0] + min(dp[1], dp[2]), # Red costs[i][1] + min(dp[0], dp[2]), # Blue costs[i][2] + min(dp[0], dp[1]) # Green ] dp = new_dp # Update dp with the new values # The result for this test case is the minimum cost of painting the last house results.append(min(dp)) return results"},{"question":"A caretaker has been assigned the task of watering plants in a linear garden. The garden can be represented as an array of plants, where each element corresponds to the amount of water (in liters) needed by that plant. The caretaker starts at any position in the garden, and on each step, decides whether to move left or right. However, due to restrictions, the caretaker can only make at most one left move for the entire duration of the task. Once the caretaker makes a left move, all subsequent moves must be to the right. Given the array `plants`, determine the maximum amount of water the caretaker can use by watering the plants, starting from any position in the array and adhering to the movement constraints. # Constraints - The number of plants, `n`, in the garden is between 2 and 100, inclusive. - Each `plants[i]` is between 1 and 1000, inclusive. # Input An integer `n` and an array `plants` of length `n`. # Output A single integer representing the maximum amount of water the caretaker can use by watering the plants as described. # Examples Input ``` 5 4 2 1 6 5 ``` Output ``` 18 ``` Input ``` 4 1 3 4 2 ``` Output ``` 10 ``` Input ``` 6 2 3 1 5 2 4 ``` Output ``` 17 ``` Explanations - In the first example, the caretaker can start at position 3 (water 1 liter) and move left to position 2 (water 2 liters), then move to position 1 (water 4 liters), then continue moving right to position 3 again (water 1 liter) and then positions 4 and 5 (water 6 and 5 liters respectively), totaling 18 liters. - In the second example, the caretaker can start at position 3 (water 4 liters) and just move left to position 2 (water 3 liters), then move to position 1 (water 1 liter), then move right to position 4 (water 2 liters), totaling 10 liters.","solution":"def max_water_usage(n, plants): Determine the maximum amount of water the caretaker can use by watering the plants. Parameters: n (int): The number of plants in the garden. plants (list): A list where each element represents the amount of water needed by that plant. Returns: int: The maximum amount of water that can be used by the caretaker. max_water = 0 # Calculate maximum water without making any left move for start in range(n): current_water = 0 for i in range(start, n): current_water += plants[i] max_water = max(max_water, current_water) # Calculate maximum water with exactly one left move for start in range(n): # Move right till any point current_water = 0 for right in range(start, n): current_water += plants[right] max_water = max(max_water, current_water) # After one left move, move all to the right left_water = 0 for left in range(start - 1, -1, -1): left_water += plants[left] combined_water = current_water + left_water max_water = max(max_water, combined_water) return max_water"},{"question":"You are given an integer array `nums` of length `n` and an integer `target`. Implement an algorithm to determine if there are two distinct indices `i` and `j` in the array such that their corresponding values sum up to the given `target`. Your task is to return the indices `i` and `j` (0-based index) if such a pair exists, otherwise return an empty list. Input: * The first line contains one integer `n` (1 ≤ n ≤ 10^5) — length of the array. * The second line contains `n` integers `nums[i]` (-10^9 ≤ nums[i] ≤ 10^9) — the elements of the array. * The third line contains one integer `target` (-10^9 ≤ target ≤ 10^9). Output: * If there exists two distinct indices `i` and `j` such that nums[i] + nums[j] = `target`, print the indices `i` and `j`. * If such indices do not exist, print an empty list. Example: Input: 6 1 2 3 4 5 6 9 Output: 2 5 Explanation: In the example, `nums[2] + nums[5] = 3 + 6 = 9`. Note: - You need to print the indices in ascending order (i.e., i < j). - If there are multiple such pairs, return any one of them.","solution":"def two_sum(nums, target): Determines if there are two distinct indices i and j such that nums[i] + nums[j] equals target. Args: nums (list of int): The list of numbers. target (int): The target sum. Returns: list: A list containing indices i and j if such a pair exists, otherwise an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Alice and Bob are playing a game with a collection of N marbles. Each marble has an integer written on it. Alice starts the game by selecting a subset of marbles. Bob can either accept the subset, making it the final selection, or discard it. If Bob discards the subset, Alice must select a different subset of marbles. The game continues until Bob accepts a subset or there are no more unchosen subsets left for Alice to pick. The aim is for Alice to maximize the sum of the integers on the marbles in the subset that Bob finally accepts. Alice always strives for optimal play to maximize the sum, while Bob aims to minimize it by forcing Alice to choose a subset that Bob cannot discard. Given the list of integers on the marbles, determine the maximum sum Alice can guarantee in the game. Input: - The first line contains the number of test cases, T. - For each test case: - The first line contains an integer N, the number of marbles. - The second line contains N space-separated integers representing the numbers on the marbles. Output: For each test case, output the maximum sum that Alice can guarantee, in a new line. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 20 - -1000 ≤ each integer on the marble ≤ 1000 Example: Input: 2 3 1 2 3 4 -1 -2 -3 -4 Output: 3 -1","solution":"def max_guaranteed_sum(T, cases): results = [] for case in cases: N, marbles = case marbles.sort(reverse=True) guaranteed_max_sum = marbles[0] results.append(guaranteed_max_sum) return results # Example usage if __name__ == \\"__main__\\": T = 2 cases = [ (3, [1, 2, 3]), (4, [-1, -2, -3, -4]) ] print(max_guaranteed_sum(T, cases)) # Output: [3, -1]"},{"question":"A robotics company has developed a series of n robots, each assigned with a unique function. Each robot completes its specific task in distinct stages. Every stage i of robot j takes tij units of time. The stages for each robot must be completed in sequential order, and all robots start working simultaneously at time 0. However, a robot can start its next stage only after it has completed the previous one. There is no rest period or delay between completing one stage and starting the next. Given the times each robot takes to complete each stage, determine the time it takes for each robot to finish all of its stages. Input The first line of the input contains integers n, m (1 ≤ n ≤ 50, 1 ≤ m ≤ 500), where n is the number of robots and m is the number of stages for each robot. Then follow n lines, each containing m integers ti1, ti2, ..., tim (1 ≤ tij ≤ 1000), where tij is the time the j-th stage of the i-th robot takes. Output Print a single line containing n integers representing the time taken for each robot to complete all its stages. Examples Input 3 2 4 3 2 5 1 1 Output 7 7 2 Input 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output 6 15 24 33","solution":"def total_time_for_each_robot(n, m, times): Given the times each robot takes to complete each stage, determine the time it takes for each robot to finish all of its stages. :param n: Number of robots :param m: Number of stages for each robot :param times: A list of lists, each sublist representing times of each stage for one robot :return: A list with the total time taken for each robot to complete all stages total_times = [] for robot_stages in times: total_time = sum(robot_stages) total_times.append(total_time) return total_times"},{"question":"You\'ve been tasked with creating a circular park with n different stations arranged in a circle. Each station i has a certain number of visitors vi that needs to be given attention. The visitors can only be attended to if the person attending starts at their initial station and follows a circular route in either a clockwise or counterclockwise direction. Once the person starts attending the visitors at the initial station, they must finish all the stations in the circular route they have chosen. You may only start the route at one of the stations and must finish the entire circle to complete the task. Determine the lowest total number of visitors the person needs to attend all the stations by selecting the optimal starting point and direction. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of stations. The second line contains n integers v1, v2, ..., vn (0 ≤ vi ≤ 10^9) representing the number of visitors at each station. Output Output a single integer representing the minimum total number of visitors the person would need to attend if optimally choosing the starting station and direction. Example Input 5 1 3 2 5 4 Output 10 Note In this example, choosing to start at station 3 and moving clockwise would cover visitors in this sequence: 2 + 5 + 4 + 1 + 3 = 15. Choosing to start at station 4 and moving counterclockwise would cover visitors in this sequence: 5 + 2 + 3 + 1 + 4 = 15. The optimal solution is to start at station 1 and move clockwise covering 1 + 3 + 2 + 5 + 4 = 10.","solution":"def min_total_visitors(n, visitors): Returns the minimum total number of visitors one needs to attend all the stations by choosing the optimal starting point and direction. Parameters: n (int): the number of stations. visitors (list of int): the number of visitors at each station. Returns: int: total visitors return sum(visitors)"},{"question":"A word ladder is a puzzle where you must convert a starting word to an ending word by changing one letter at a time, with each intermediate word being a valid word in the given dictionary. Each step must result in a valid word and you can only change one letter at a time. Input First line contains two space-separated strings, the start word and end word. The second line contains an integer N, the number of words in the dictionary. The third line contains N space-separated strings, each of them representing a word in the dictionary. Output An integer indicating the minimum number of steps required to convert the start word to the end word. If not possible, return -1. Example Input: hit cog 6 hot dot dog lot log cog Output: 5 Explanation One possible sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\". There are 4 steps to convert \\"hit\\" to \\"cog\\" through valid dictionary words. Another example Input: hit cog 4 hot dot dog log Output: -1 Explanation It\'s not possible to convert \\"hit\\" to \\"cog\\" with the given dictionary words.","solution":"from collections import deque def word_ladder(start, end, dictionary): Returns the minimum number of steps to convert start to end using the given dictionary. Each step changes one letter and resulting word must be in the dictionary. If the conversion is not possible, returns -1. if end not in dictionary: return -1 dictionary = set(dictionary) queue = deque([(start, 1)]) # store the current word and current step count while queue: word, steps = queue.popleft() if word == end: return steps # Generate all possible transformations and add valid transformations to the queue for i in range(len(word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = word[:i] + char + word[i+1:] if next_word in dictionary: dictionary.remove(next_word) queue.append((next_word, steps + 1)) return -1 def get_input_and_solve(input_string): input_lines = input_string.strip().split(\'n\') start, end = input_lines[0].split() n = int(input_lines[1]) dictionary = input_lines[2].split() return word_ladder(start, end, dictionary)"},{"question":"A country has a network of cities connected by bidirectional roads. Each road has a specific travel time associated with it. The government needs to determine the shortest travel time from the capital city to all other cities in the country. The capital city is always city 1. Your task is to implement an efficient algorithm to solve this problem. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads in the country, respectively. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) — representing a road between cities u and v with travel time t. Each road is bidirectional. Output Print a single line containing n integers — the minimum travel time from the capital city to each city (including the capital city itself). If a city is unreachable from the capital city, print -1 for that city. Examples Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 Output 0 2 3 6 7 Input 4 3 1 2 5 2 3 3 3 4 2 Output 0 5 8 10 Input 4 2 1 2 1 3 4 1 Output 0 1 -1 -1 Note In the first example, the shortest travel times from the capital city 1 to each of the cities are calculated using the shortest path algorithm. In the second example, every city is reachable from the capital city within the given travel times. In the third example, city 3 and city 4 are not reachable from the capital city.","solution":"import heapq def shortest_travel_times(n, m, roads): graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(source): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances distances_from_capital = dijkstra(1) result = [] for i in range(1, n+1): result.append(distances_from_capital[i] if distances_from_capital[i] != float(\'inf\') else -1) return result"},{"question":"Input The input consists of a single line containing a string of 10 characters. The first character is a letter from A to D, the second character is a hyphen (`-`), followed by 8 digits. The input is guaranteed to be valid. Output Output a single integer derived by summing all the digits in the string and then adjusting the sum according to the following rules: - Add 1 if the first character is \'A\'. - Subtract 1 if the first character is \'B\'. - Double the sum if the first character is \'C\'. - Halve the sum if the first character is \'D\'. Examples Input A-12345678 Output 37 Input C-87654321 Output 72 Input D-12003456 Output 16","solution":"def process_input(input_string): Process the input string according to the specified rules: - Sum the digits in the string. - Adjust the sum based on the first character: * Add 1 if the first character is \'A\'. * Subtract 1 if the first character is \'B\'. * Double the sum if the first character is \'C\'. * Halve the sum if the first character is \'D\'. first_character = input_string[0] digits = input_string[2:] total_sum = sum(int(digit) for digit in digits) if first_character == \'A\': total_sum += 1 elif first_character == \'B\': total_sum -= 1 elif first_character == \'C\': total_sum *= 2 elif first_character == \'D\': total_sum //= 2 return total_sum"},{"question":"Alice has recently bought a new painting and wants to hang it on her wall. Her wall has n hooks, some of which are already used to hang other items. Alice wants to find out if there is a way to hang the painting using exactly k hooks. You are given the status of all n hooks on the wall, where ‘1’ represents that the hook is free and ‘0’ represents that the hook is occupied. Your task is to determine if there exists a subset of exactly k hooks that are free. Input The first line contains two space-separated integers n and k (1 ≤ k ≤ n) — the number of hooks on the wall and the number of hooks Alice needs to hang the painting, respectively. The second line contains n space-separated integers hi (0 ≤ hi ≤ 1) representing the status of each hook; ‘1’ if the hook is free and ‘0’ if it is occupied. Output If it is possible to find exactly k free hooks, print \\"Yes\\" (without the quotes). Otherwise, print \\"No\\" (without the quotes). Example Input 5 3 1 0 1 0 1 Output Yes Input 5 4 1 0 1 0 1 Output No","solution":"def can_hang_painting(n, k, hooks): Determine if it is possible to hang the painting using exactly k free hooks. Parameters: n (int): Number of hooks on the wall. k (int): Number of hooks needed to hang the painting. hooks (list): List of integers representing the status of each hook (1 for free, 0 for occupied). Returns: str: \\"Yes\\" if it\'s possible to find exactly k free hooks, otherwise \\"No\\". free_hooks = hooks.count(1) if free_hooks >= k: return \\"Yes\\" else: return \\"No\\""},{"question":"A kingdom is divided into multiple regions and each region has multiple towns connected by roads. The king wants to ensure that he can travel between any two towns in his kingdom via a path that consists of main roads only. However, due to limited resources, he cannot upgrade all roads to main roads and must carefully choose which to upgrade to satisfy certain conditions. The king\'s advisor proposed the following plan: - There should be exactly one simple path between any pair of towns within the same region using only main roads. - Upgraded main roads should be chosen to minimize the sum of their weights (cost of upgrading). Your task is to find out which roads should be upgraded to main roads based on the advisor\'s plan. Input The first line of input contains two positive integers n and m (1 ≤ n ≤ 103, 1 ≤ m ≤ 105) — the number of towns in the kingdom and the number of roads connecting the towns. The next m lines describe the roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 104) indicating a road connecting town u and town v with an upgrade cost of w. Each road can be traveled in both directions, and there might be multiple roads between the same pair of towns. Output First, output a single integer k — the number of roads that will be upgraded to main roads. Then, output k lines, each containing two integers u and v representing a road between town u and town v that will be upgraded. If there are multiple solutions, any valid one is acceptable. If it\'s impossible to connect all towns within the advisor\'s constraints, print \\"-1\\". Examples Input 4 5 1 2 5 1 3 10 2 3 6 2 4 2 3 4 4 Output 3 1 2 2 4 3 4 Input 3 3 1 2 1 2 3 4 1 3 2 Output 2 1 2 1 3","solution":"def find_main_roads(n, m, roads): Find the roads that should be upgraded to main roads based on given towns and connections. Parameters: n (int): The number of towns. m (int): The number of roads. roads (list): List of tuples where each tuple represents a road with (u, v, w). Returns: tuple: A tuple containing an integer k and a list of k tuples each containing two towns (u, v). Returns -1 if it\'s impossible to connect all towns. parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 roads.sort(key=lambda x: x[2]) mst = [] total_cost = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) mst.append((u, v)) total_cost += w if len(mst) != n - 1: return -1 return len(mst), mst"},{"question":"You are given two strings: `S` (the text) and `P` (the pattern). Your task is to find all the starting indices of the pattern `P` in the text `S`. You need to implement a function that searches for occurrences of the pattern in the text using the Knuth-Morris-Pratt (KMP) algorithm, which should work efficiently even for large inputs. **Constraints:** 1. The text `S` and the pattern `P` will only contain lowercase English letters. 2. The length of `S` will be at most 10^5. 3. The length of `P` will be at most 10^4. **Input:** The input consists of two lines: - The first line contains the string `S`. - The second line contains the string `P`. **Output:** Print all starting indices of occurrences of the pattern `P` in the string `S` in a single line, separated by spaces. If the pattern is not found in the text, print a single line with the value `-1`. **Example:** Input: ``` ababcababcabc abc ``` Output: ``` 2 7 10 ``` Input: ``` hello ll ``` Output: ``` 2 ``` Input: ``` abcdef gh ``` Output: ``` -1 ```","solution":"def KMP_search(S, P): KMP algorithm to find all starting indices of pattern P in text S. # Function to create the longest proper prefix which is also suffix array def compute_lps_array(P): lps = [0] * len(P) length = 0 # length of the previous longest prefix suffix i = 1 # the loop calculates lps[i] for i = 1 to len(P) - 1 while i < len(P): if P[i] == P[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps # Main KMP algorithm M = len(P) N = len(S) lps = compute_lps_array(P) result = [] i = 0 # index for S j = 0 # index for P while i < N: if P[j] == S[i]: i += 1 j += 1 if j == M: result.append(i - j) j = lps[j - 1] elif i < N and P[j] != S[i]: if j != 0: j = lps[j - 1] else: i += 1 if not result: return [-1] return result def find_pattern_indices(S, P): indices = KMP_search(S, P) if indices == [-1]: print(\\"-1\\") else: print(\\" \\".join(map(str, indices)))"},{"question":"In a faraway kingdom, there are N unique magical potions and M bi-directional magical pathways connecting them. Each pathway connects two potions, and traveling through a pathway for a certain amount of time allows the traveler to consume the effects of all potions connected through the pathway. The magic intensity, or the duration of the potion\'s effect, varies across the pathways. The intensity of the pathway is the duration for which the effect lasts, and longer durations yield stronger effects. A renowned alchemist wants to concoct a powerful elixir by consuming as many unique potions as possible. Starting from a specific potion S, he aims to drink an elixir of the maximum possible power by traveling through pathways to consume potions until he cannot travel any further. Your task is to determine the maximum possible intensity of the elixir the alchemist can create given the constraints. Input The input consists of a single test case formatted as follows: N M S u_1 v_1 c_1 : u_M v_M c_M The first line contains three integers N, M, and S, where N is the number of unique magical potions (2 leq N leq 100,000), M is the number of bi-directional pathways (1 leq M leq 200,000), and S is the potion you start from (1 leq S leq N). The following M lines represent the pathway information: the i-th line of the M lines consists of three integers u_i, v_i, c_i, which means the i-th pathway connects the potions u_i and v_i (1 leq u_i, v_i leq N, u_i ne v_i) with the intensity c_i (1 leq c_i leq 10^9). All the potions are guaranteed to be connected, meaning there is at least one pathway connecting any two potions. Output Output the maximum possible intensity of the elixir the alchemist can create. Examples Input 3 3 1 1 2 2 2 3 3 1 3 4 Output 4 Input 4 4 2 1 2 5 2 3 3 3 4 7 4 1 10 Output 10 Input 5 5 5 1 2 1 2 3 2 3 4 3 4 5 4 5 1 5 Output 5","solution":"def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def maximum_intensity_elixir(N, M, S, pathways): edges = sorted(pathways, key=lambda x: -x[2]) parent = list(range(N+1)) rank = [0] * (N+1) max_intensity = 0 for u, v, c in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) max_intensity = max(max_intensity, c) return max_intensity # The function to parse input and feed to the main function def solve_problem(input_str): lines = input_str.split(\'n\') N, M, S = map(int, lines[0].split()) pathways = [tuple(map(int, line.split())) for line in lines[1:] if line] return maximum_intensity_elixir(N, M, S, pathways)"},{"question":"You are given two strings: `s1` and `s2`. Both strings are guaranteed to be of the same length and consist only of lowercase English letters. You need to determine whether you can transform `s1` into `s2` by performing a series of shifts on its characters. A shift operation means incrementing or decrementing a character to the next or previous one in the alphabet, with \'a\' following \'z\' and vice versa in a cyclic manner. The transformation must be done in such a way that the same number of shifts is applied to every character in `s1` to get the corresponding character in `s2`. Input The first line of input contains the string `s1` consisting of exactly `n` (1 ≤ n ≤ 100) lowercase English letters. The second line contains the string `s2` also of length `n` and consisting of lowercase English letters. Output Print `YES` if it\'s possible to transform `s1` into `s2` using the same number of cyclic shifts for each character. Otherwise, print `NO`. Examples Input abc bcd Output YES Input abc acd Output NO Input xyz yza Output YES Note In the first example, each character of \\"abc\\" can be shifted by one position to get \\"bcd\\". In the second example, the first and second characters of \\"abc\\" match \\"acd\\" with one shift, but the third character does not match with the same number of shifts. In the third example, shifting each character by one position from \\"xyz\\" gives \\"yza\\".","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 by performing a series of shifts on its characters. :param s1: First string :param s2: Second string :return: \'YES\' if the transformation is possible, otherwise \'NO\' shift = (ord(s2[0]) - ord(s1[0])) % 26 for i in range(1, len(s1)): if (ord(s2[i]) - ord(s1[i])) % 26 != shift: return \'NO\' return \'YES\'"},{"question":"You are given a tree with n nodes, rooted at node 1. The nodes are numbered from 1 to n. Each node i has a value vi. A tree is a connected acyclic graph. A query is a pair (u, k) which means you need to find the k-th smallest value in the subtree of node u. The subtree of a node u is the set of all nodes that have u as their ancestor (including u itself). Write a program to process q such queries efficiently. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. The second line contains n integers vi (1 ≤ vi ≤ 109) — the values of the nodes. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) meaning there is an edge between nodes u and v. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains two integers u and k (1 ≤ u ≤ n, 1 ≤ k ≤ size of subtree of u) — the parameters of the query. Output Print q lines. The i-th line should contain the answer to the i-th query. Example Input 5 5 1 4 2 3 1 2 1 3 2 4 2 5 3 1 2 2 1 3 1 Output 2 1 4","solution":"from collections import defaultdict import bisect def dfs(node, parent, adj_list, node_values, subtree_nodes): Performs a depth-first search to collect all nodes in each subtree. subtree_nodes[node].append(node_values[node-1]) for neighbor in adj_list[node]: if neighbor != parent: dfs(neighbor, node, adj_list, node_values, subtree_nodes) subtree_nodes[node].extend(subtree_nodes[neighbor]) subtree_nodes[node].sort() def kth_smallest_in_subtree(subtree_nodes, u, k): Returns the k-th smallest value in the subtree of node u. return subtree_nodes[u][k-1] def process_queries(n, node_values, edges, queries): Process the queries on the tree. adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Subtree nodes with sorted values subtree_nodes = defaultdict(list) dfs(1, -1, adj_list, node_values, subtree_nodes) results = [] for u, k in queries: results.append(kth_smallest_in_subtree(subtree_nodes, u, k)) return results if __name__ == \\"__main__\\": # Example Usage n = 5 node_values = [5, 1, 4, 2, 3] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] queries = [(1, 2), (2, 1), (3, 1)] result = process_queries(n, node_values, edges, queries) for r in result: print(r)"},{"question":"To streamline the operations in a warehouse, you need to develop a system that efficiently tracks and retrieves packages stored on shelves. Each shelf can hold one package and is labeled with a unique identifier. The system should support two main operations: adding a package to a specific shelf and retrieving a package from a specific shelf. Design and implement a program that manages these operations. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of operations. The next n lines each contain an operation in one of the following formats: - `\\"ADD <shelf_id> <package_id>\\"` — where `<shelf_id>` is a unique identifier for the shelf (an integer) and `<package_id>` is the identifier of the package (a string of alphanumeric characters). - `\\"RETRIEVE <shelf_id>\\"` — where `<shelf_id>` is the identifier of the shelf from which to retrieve the package. Output For each \\"RETRIEVE\\" operation, output the `<package_id>` of the package stored at the specified shelf. If the shelf is empty, output \\"EMPTY\\". Example Input 7 ADD 1 AB123 ADD 2 XYZ789 RETRIEVE 1 ADD 1 QWE456 RETRIEVE 2 RETRIEVE 3 RETRIEVE 1 Output AB123 XYZ789 EMPTY QWE456 Explanation 1. We add package \\"AB123\\" to shelf 1. 2. We add package \\"XYZ789\\" to shelf 2. 3. We retrieve the package from shelf 1, which is \\"AB123\\". 4. We add package \\"QWE456\\" to shelf 1, replacing the previous package. 5. We retrieve the package from shelf 2, which is \\"XYZ789\\". 6. Shelf 3 is empty, so the output is \\"EMPTY\\". 7. Finally, we retrieve the package from shelf 1, which is \\"QWE456\\".","solution":"class Warehouse: def __init__(self): self.shelves = {} def add_package(self, shelf_id, package_id): self.shelves[shelf_id] = package_id def retrieve_package(self, shelf_id): return self.shelves.get(shelf_id, \\"EMPTY\\") def manage_operations(operations): warehouse = Warehouse() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": shelf_id = int(parts[1]) package_id = parts[2] warehouse.add_package(shelf_id, package_id) elif command == \\"RETRIEVE\\": shelf_id = int(parts[1]) results.append(warehouse.retrieve_package(shelf_id)) return results"},{"question":"Martha is very interested in botany and has recently become fascinated with the structure of trees. She learned that every tree can be uniquely represented as an undirected acyclic graph. She is interested in finding two particular nodes in a tree, which she will call x and y, such that the distance between x and y is the maximum among all pairs of nodes in the tree. Given a tree with n nodes represented by n-1 edges, write an algorithm to find the distance between nodes x and y as described above. Input The first line contains a single integer n (2 ≤ n ≤ 10⁵) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v. Output Output a single integer, which is the maximum distance between any two nodes in the tree. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 6 1 2 1 3 3 4 3 5 4 6 Output 4 Note For the first example, the tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` The distances between some pairs of nodes are: (4, 5) = 2, (4, 3) = 3, (3, 5) = 3, and so on. The maximum distance is 3, which is the distance between node 4 and node 3 or node 5 and node 3. For the second example, the tree can be visualized as: ``` 1 / 2 3 / 4 5 / 6 ``` The distances are: (2, 6) = 4, (1, 6) = 3, and so on. The maximum distance is 4, which is the distance between node 2 and node 6.","solution":"from collections import deque, defaultdict def bfs(farthest_node_start, n, graph): visited = [-1] * (n + 1) queue = deque([farthest_node_start]) visited[farthest_node_start] = 0 farthest_node = farthest_node_start max_distance = 0 while queue: node = queue.popleft() current_distance = visited[node] for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance def max_distance_in_tree(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: Find the farthest node from any arbitrary node, say node 1 farthest_node, _ = bfs(1, n, graph) # Step 2: Find the farthest node from the above farthest node _, max_distance = bfs(farthest_node, n, graph) return max_distance"},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 100). Output Output a single string. Examples Input 3 Output abc Input 5 Output abcde Input 10 Output abcdefghij","solution":"def generate_alphabet_string(n): Returns the first n letters of the alphabet as a string. alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" return alphabet[:n]"},{"question":"A factory produces widgets and each widget has a distinct identifier. The factory has a primary machine and a secondary machine to handle the production. The primary machine processes the odd-numbered widgets, while the secondary machine processes the even-numbered widgets. However, due to a malfunction in the log files, some widgets processed by the primary machine were off by one (i.e., processed as even) and likewise, some by the secondary machine were off by one (i.e., processed as odd). Your task is to determine if there exists any malfunction in the log by checking if each widget is processed by the correct machine according to their identifier. Input The first line contains one integer n (1 ≤ n ≤ 10000) — the number of widgets. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 * n) — the identifiers of the widgets processed by the primary machine. The third line contains n distinct integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 2 * n) — the identifiers of the widgets processed by the secondary machine. Output If all widgets are correctly processed, print \\"Correct\\". Otherwise, print \\"Malfunction\\". Examples Input 4 1 3 5 7 2 4 6 8 Output Correct Input 4 1 2 5 7 3 4 6 8 Output Malfunction Note In the first example, each odd-numbered widget is processed by the primary machine and each even-numbered widget is processed by the secondary machine. In the second example, widget 2 is incorrectly assigned to the primary machine, and widget 3 is incorrectly assigned to the secondary machine, thus causing a \\"Malfunction\\".","solution":"def check_widget_logs(n, primary, secondary): Determines if there exists any malfunction in the widget logs. Parameters: n : int : number of widgets primary : list of int : identifiers of widgets processed by the primary machine secondary : list of int : identifiers of widgets processed by the secondary machine Returns: str : \\"Correct\\" if all widgets are correctly processed, otherwise \\"Malfunction\\" for widget in primary: if widget % 2 == 0: return \\"Malfunction\\" for widget in secondary: if widget % 2 != 0: return \\"Malfunction\\" return \\"Correct\\""},{"question":"Peter is planning to organize lecture sessions for his online coding class. He wants to balance the duration of each session in such a way that the total cumulative time is minimized, with the condition that no session is shorter than minLength nor longer than maxLength. Furthermore, Peter prefers that each session should have a duration within a specified preferred range for optimal engagement. Input The first input line contains two integers n (1 ≤ n ≤ 100) — the number of lecture sessions Peter has to organize, and totalTime (0 ≤ totalTime ≤ 1000) — the total time (in hours) he has available for all sessions combined. The second line contains two integers minLength (0 ≤ minLength ≤ 50) and maxLength (minLength ≤ maxLength ≤ 50) — the minimum and maximum duration respectively for each session. The third line contains two integers prefLower (minLength ≤ prefLower ≤ maxLength) and prefUpper (prefLower ≤ prefUpper ≤ maxLength) — the lower and upper bounds of the preferred duration range for each session. Output If it is possible to organize all n lecture sessions within the given constraints such that their total time equals totalTime, print \\"YES\\" in the first line, followed by n space-separated integers representing the duration of each session in the second line. If there are multiple possible solutions, print any of them. If it is not possible, print \\"NO\\" in a single line. Examples Input 3 9 2 4 3 4 Output YES 3 3 3 Input 4 10 2 5 3 4 Output YES 3 3 2 2","solution":"def organize_sessions(n, total_time, min_length, max_length, pref_lower, pref_upper): if total_time < n * min_length or total_time > n * max_length: return \\"NO\\" durations = [min_length] * n remaining_time = total_time - n * min_length # Start adjusting the durations to try to fit within the preferred duration for i in range(n): if remaining_time == 0: break max_possible_increase = min(remaining_time, max_length - min_length) to_pref_upper = pref_upper - min_length if to_pref_upper <= max_possible_increase: durations[i] += to_pref_upper remaining_time -= to_pref_upper else: durations[i] += max_possible_increase remaining_time -= max_possible_increase if remaining_time > 0: for i in range(n): if remaining_time == 0: break current_increase = min(remaining_time, max_length - durations[i]) durations[i] += current_increase remaining_time -= current_increase if remaining_time == 0: return \\"YES\\", durations else: return \\"NO\\""},{"question":"You are given a positive integer n, followed by n non-negative integers representing coins denominations. You can use each coin any number of times. Your task is to determine the minimum number of coins required to make exactly m units of currency. If it is not possible to make m units with the given denominations, return -1. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^5) — the number of coin denominations and the amount of currency to be made, respectively. The second line contains n integers denoting the coin denominations a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4). Output Print a single integer — the minimum number of coins required to make exactly m units of currency. If it is not possible to make m units, print -1. Examples Input 3 11 1 2 5 Output 3 Input 2 3 2 4 Output -1 Input 1 7 3 Output -1 Note In the first example, the required amount 11 can be made with three coins: 5 + 5 + 1 In the second example, you cannot make the amount 3 with the given coins. In the third example, the coin denomination of 3 cannot sum up to 7.","solution":"def minimum_coins(n, m, coins): Determines the minimum number of coins required to make exactly m units of currency. Returns -1 if it is not possible to make m units with the given denominations. # Initialize the DP array, use float(\'inf\') as placeholder for an impossible situation dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Dynamic programming solution for i in range(1, m + 1): for coin in coins: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) # Check if we found a valid solution for amount m return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"Nina is learning about software versioning. A software version is represented in a format like \\"Major.Minor.Patch\\" where Major, Minor, and Patch are non-negative integers. Two versions can be compared to determine which one is newer. For example, version \\"1.2.3\\" is newer than \\"1.2.2\\" but older than \\"1.3.0\\". Nina wants to find out the latest version among a given list of versions. Can you help her? Input: The first line contains an integer N, denoting the number of versions. Each of the next N lines contains a single version represented as a string in the format \\"Major.Minor.Patch\\". Output: Print the latest version. Constraints: 1 ≤ N ≤ 1000 0 ≤ Major, Minor, Patch ≤ 999 The versions are well-formed and do not contain leading zeroes. SAMPLE INPUT 3 1.2.3 1.3.0 1.2.10 SAMPLE OUTPUT 1.3.0 Explanation Among the given versions, \\"1.3.0\\" is the latest as Major version 1 is the same for all versions, but Minor version 3 is greater than Minor version 2.","solution":"def find_latest_version(versions): Finds and returns the latest version among a list of versions. Args: versions (list of str): A list of version strings in the format \\"Major.Minor.Patch\\". Returns: str: The latest version string. return max(versions, key=lambda v: list(map(int, v.split(\'.\'))))"},{"question":"In a village, there are M water wells, each well is at a specific location on a straight line. N villagers need water and the ith villager lives at position Pi on this line. Each villager will go to the closest well to fetch water. If multiple wells are at the same minimum distance, the villager can choose any of those wells arbitrarily. Write a program that determines for each villager the minimum distance to the closest well. Input The first line contains an integer M (1 ≤ M ≤ 100), the number of wells. The second line contains M space-separated integers Wi (0 ≤ Wi ≤ 10^6), the locations of the wells. The third line contains an integer N (1 ≤ N ≤ 100), the number of villagers. The fourth line contains N space-separated integers Pi (0 ≤ Pi ≤ 10^6), the locations of the villagers. Output Print N lines, each containing the minimum distance for the respective villager to the closest well. Example Input: 3 2 5 8 4 1 4 6 9 Output: 1 1 1 1","solution":"def minimum_distance_to_wells(M, wells, N, villagers): Returns a list of minimum distances for each villager to the closest well. wells.sort() # Sort the locations of the wells for easier comparison min_distances = [] for villager in villagers: min_distance = float(\'inf\') for well in wells: distance = abs(villager - well) if distance < min_distance: min_distance = distance min_distances.append(min_distance) return min_distances"},{"question":"You are given a list of integers and you need to find the longest consecutive sequence of integers within the list. Return the length of this longest sequence. INPUT The first and only line of the input contains space-separated integers. OUTPUT The output should be a single integer representing the length of the longest consecutive sequence. CONSTRAINTS 1 ≤ number of integers in the list ≤ 10^5 -10^6 ≤ each integer in the list ≤ 10^6 SAMPLE INPUT 100 4 200 1 3 2 SAMPLE OUTPUT 4","solution":"def longest_consecutive_sequence(nums): Given a list of integers, return the length of the longest consecutive sequence of integers. nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Oleg the book collector has a large number of books, each with a unique ID number. He likes to keep his books organized but finds it challenging when it comes to moving them between shelves. Each shelf has a unique identifier, and a book can only be on one shelf at a time. Oleg keeps a record of book movements in a log, which includes multiple operations in the following format: 1. `ADD book_id shelf_id`: This operation adds a book with the given `book_id` to the specified `shelf_id`. If the book is already on a different shelf, it should be moved to the new shelf. 2. `REMOVE book_id`: This operation removes the book with the given `book_id` from its current shelf. If the book is not on any shelf, this operation is ignored. 3. `QUERY shelf_id`: This operation outputs the list of `book_id`s of the books currently on the specified `shelf_id`, sorted in increasing order of `book_id`. Oleg needs your help to process a list of operations and provide the results for all `QUERY` operations. Input The first line of the input contains an integer `m` (1 ≤ m ≤ 10000) — the number of operations. Each of the next `m` lines contains an operation in one of the formats described above. - `ADD` and `REMOVE` operations are each followed by two integers `book_id` and `shelf_id` (1 ≤ book_id, shelf_id ≤ 10000). - `QUERY` operations are each followed by one integer `shelf_id`. Output For each `QUERY` operation, output a single line containing space-separated integers representing the sorted `book_id`s of the books currently on the specified `shelf_id`. If the shelf is empty, output an empty line. Examples Input 10 ADD 1 1 ADD 2 1 ADD 3 2 REMOVE 2 QUERY 1 QUERY 2 ADD 2 2 REMOVE 1 QUERY 1 QUERY 2 Output 1 3 2 3 2 Note In the first example, after the initial operations: - Shelf 1 will contain books 1 and 2. - Shelf 2 will contain book 3. After removing book 2, shelf 1 will only contain book 1. Hence, the query for shelf 1 will return `1`. After adding book 2 to shelf 2, shelf 2 will have books 3 and 2. Hence, the query for shelf 2 will return `2 3` (sorted). After removing book 1, shelf 1 will be empty. Finally, after another set of additions, the shelves are updated accordingly for the final `QUERY` operations.","solution":"def book_collection_operations(m, operations): from collections import defaultdict shelf_books = defaultdict(set) book_shelf = {} result = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \'ADD\': book_id = int(parts[1]) shelf_id = int(parts[2]) if book_id in book_shelf: current_shelf = book_shelf[book_id] shelf_books[current_shelf].remove(book_id) shelf_books[shelf_id].add(book_id) book_shelf[book_id] = shelf_id elif cmd == \'REMOVE\': book_id = int(parts[1]) if book_id in book_shelf: current_shelf = book_shelf[book_id] shelf_books[current_shelf].remove(book_id) del book_shelf[book_id] elif cmd == \'QUERY\': shelf_id = int(parts[1]) sorted_books = sorted(shelf_books[shelf_id]) result.append(\\" \\".join(map(str, sorted_books))) return result"},{"question":"Jessica loves playing with sessions of lights. She has an array of lights, each indexed from 1 to n and each can be either on (represented by \'1\') or off (represented by \'0\'). Jessica can perform the following operation any number of times: Choose a subarray of the lights and flip all the lights in that subarray (if a light is \'1\', it will become \'0\' and vice versa). Jessica wants to find out the maximum number of lights that can be turned on after performing any number of operations. Given the initial state of the lights, determine the maximum number of lights that can be on after Jessica performs her operations optimally. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of lights. The second line contains a string of length n, consisting of characters \'0\' and \'1\' which represents the initial state of the lights. Output Print the maximum number of lights that can be turned on after performing any number of operations. Examples Input 5 00110 Output 4 Input 5 00000 Output 5 Input 5 11111 Output 4 Explanation In the first example: Jessica can choose to flip the third and fourth lights, converting the array to \\"00101\\", and then flip the last light to get \\"00110\\". Finally, she can flip the first three lights to get \\"11010\\", and then flip the last four lights to get \\"11110\\". Thus, four lights will be on. In the second example: Jessica can flip the whole array to get \\"11111\\". In the third example: Jessica will turn off one of the lights by flipping necessary subarrays to achieve the maximum number of lights turned on, which is 4.","solution":"def maximize_lights(n, lights): original_count = lights.count(\'1\') max_flip_gain = 0 current_gain = 0 for light in lights: if light == \'0\': current_gain += 1 else: current_gain -= 1 if current_gain < 0: current_gain = 0 max_flip_gain = max(max_flip_gain, current_gain) if original_count == n: return original_count - 1 return original_count + max_flip_gain"},{"question":"Mark operates a gift shop and needs to organize the customer orders based on the prices. He quickly runs into the problem of identifying which orders are duplicates and which are unique. Help Mark by writing a program that identifies all unique orders and prints them in ascending order of their prices. Input The first input line contains an integer n (1 ≤ n ≤ 100) — the number of price values in the order list. The second line contains n space-separated integer numbers — the prices of each order. These prices are non-negative integers and do not exceed 1000. Output Output all unique prices in ascending order. If there are no unique prices, output a single line with \\"NO UNIQUE ORDERS\\". Examples Input 6 5 3 8 3 5 10 Output 8 10 Input 4 7 7 7 7 Output NO UNIQUE ORDERS","solution":"def find_unique_orders(n, prices): Identifies all unique orders and returns them in ascending order of their prices. If there are no unique prices, returns \\"NO UNIQUE ORDERS\\". Args: n : int : number of price values in the order list prices : list of int : price values of the orders Returns: str : unique prices in ascending order separated by space, or \\"NO UNIQUE ORDERS\\" if there are no unique prices from collections import Counter price_counts = Counter(prices) unique_prices = [price for price, count in price_counts.items() if count == 1] unique_prices.sort() if unique_prices: return \' \'.join(map(str, unique_prices)) else: return \'NO UNIQUE ORDERS\'"},{"question":"Alice is organizing a marathon competition. Each participant is given a choice of N checkpoints to visit in order to earn points. Each checkpoint has a certain number of points associated with it. However, participants can visit at most K checkpoints. Given the number of checkpoints N, the maximum number of checkpoints K that can be visited, and the array A of length N where A[i] represents the points for visiting the i-th checkpoint, determine the maximum points a participant can earn by visiting at most K checkpoints. Input The first line of the input contains two integers N and K (1 ≤ K ≤ N ≤ 300). The second line of the input contains N integers, the elements of array A (1 ≤ A[i] ≤ 1000). Output Output a single integer representing the maximum points a participant can earn by visiting at most K checkpoints. Examples Input 5 3 1 2 3 4 5 Output 12 Input 4 2 7 4 5 3 Output 12 Input 6 1 5 5 5 5 5 5 Output 5","solution":"def max_points(N, K, A): Returns the maximum points a participant can earn by visiting at most K checkpoints. Parameters: N (int): Number of checkpoints. K (int): Maximum number of checkpoints that can be visited. A (list): List of integers where A[i] represents the points for visiting the i-th checkpoint. Returns: int: Maximum points earned. # Sort the points array in descending order sorted_points = sorted(A, reverse=True) # Sum up the points of the top K checkpoints return sum(sorted_points[:K])"},{"question":"You are given a string of brackets consisting of only characters \'(\' and \')\'. The string is considered valid if it meets the following criteria: 1. The string is empty. 2. The string is non-empty, and for every open parenthesis \'(\', there exists a matching closing parenthesis \')\'. 3. Every closing parenthesis matches an open parenthesis that occurs before it. 4. The substrings, when read from left to right, represent valid strings of nested parentheses. For example, the strings \\"()\\", \\"(())\\", and \\"(()(()))\\" are valid, while \\"(\\", \\")\\", and \\"())\\" are not valid. Given a string of brackets, your task is to determine if the string is valid. Constraints * The length of the string will be between 1 and 10^5. Input The input consists of one line containing a string of brackets. Output Print \\"Yes\\" if the string is valid, otherwise print \\"No\\". Examples Input (()) Output Yes Input )()( Output No Input (()()) Output Yes Input ((()) Output No Input ()) Output No","solution":"def is_valid_bracket_sequence(sequence): Determines if a given sequence of brackets is valid. :param sequence: A string containing only \'(\' and \')\' :returns: \\"Yes\\" if the sequence is valid, otherwise \\"No\\" stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack[-1] != \'(\': return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"Alyssa loves encryption and challenges her friends with puzzles. She invented a simple encryption technique based on shifting characters in a string. Given a string and an integer \'k\', she shifts each character in the string by \'k\' positions to the right where the alphabet wraps around (i.e., \'z\' followed by \'a\'). She only considers lowercase English letters in the string. INPUT: - The first line contains an integer T, the number of test cases. - The next T lines each contain a string and an integer k separated by a space. OUTPUT: - For each test case, output the encrypted string. CONSTRAINTS: 1 < T < 11 1 < length of string < 100 1 < k < 26 EXAMPLE INPUT: 3 abc 2 xyz 1 hello 3 EXAMPLE OUTPUT: cde yza khoor","solution":"def shift_character(char, k): Shift a character by k positions in the alphabet. return chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) def encrypt_string(s, k): Encrypt the string by shifting each character by k positions. return \'\'.join(shift_character(char, k) for char in s) def process_cases(cases): Process multiple test cases. results = [] for s, k in cases: encrypted = encrypt_string(s, k) results.append(encrypted) return results def parse_input(input_data): Parse input data into format suitable for processing. lines = input_data.split(\'n\') T = int(lines[0]) cases = [line.split() for line in lines[1:T+1]] cases = [(s, int(k)) for s, k in cases] return cases"},{"question":"The Forest Department of a national park is conducting a study to understand the animals\' average daily movement in the forest based on their types. They have collected data about the distances traveled by different animals each day over a week. As a part of the research team, your task is to analyze this data and identify the animal type that has the highest average daily movement. Write a program to compute the animal type with the highest average distance traveled per day. Input Format: - The first line contains an integer `n` (number of animal types). - The next `n` lines contain the animal type followed by 7 space-separated integers representing the distances traveled by that animal each day of the week. Output Format: - Output the animal type that has the highest average distance traveled per day. Constraints: - 1 ≤ n ≤ 20 - 1 ≤ distance traveled ≤ 100 - The name of the animal type is a single word, and its length will not exceed 20 characters. SAMPLE INPUT 3 Tiger 10 20 30 40 50 60 70 Elephant 15 25 35 45 55 65 75 Deer 10 30 20 50 60 40 70 SAMPLE OUTPUT Elephant Explanation: The average distance traveled per day: - Tiger: (10+20+30+40+50+60+70)/7 = 40 - Elephant: (15+25+35+45+55+65+75)/7 = 45 - Deer: (10+30+20+50+60+40+70)/7 = 40 Therefore, Elephant has the highest average daily movement.","solution":"def highest_average_movement(n, animal_data): Returns the animal type with the highest average daily movement based on input animal data Parameters: n (int): Number of animal types animal_data (List[str]): List of strings, each containing animal type followed by 7 space-separated integers Returns: str: Animal type with the highest average daily movement max_average = -1 max_animal = \\"\\" for line in animal_data: parts = line.split() animal = parts[0] distances = list(map(int, parts[1:])) average_distance = sum(distances) / len(distances) if average_distance > max_average: max_average = average_distance max_animal = animal return max_animal"},{"question":"Problem statement You are given a rectangular matrix of size m x n consisting of positive integers. Your task is to find the maximum sum of any submatrix of the given matrix. A submatrix is defined as a non-empty rectangular section of the matrix, formed by choosing some of its rows and some of its columns and taking all the elements in those rows and columns for the submatrix. Write a function to calculate the maximum sum of any submatrix within the given matrix. Function Signature: ```python def max_sum_submatrix(matrix: List[List[int]]) -> int: # your code here ``` Input: - A 2D list of integers representing the matrix, where 1 ≤ m, n ≤ 100, and 1 ≤ matrix[i][j] ≤ 1000. Output: - An integer representing the maximum sum of any submatrix. Example: Input: ```python matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] ``` Output: ```python 29 ``` Explanation: The submatrix with the maximum sum is: ``` [ [3, 8, 10], [-4, -1, 1] ] ``` with sum 3 + 8 + 10 - 4 - 1 + 1 = 17. Example: Input: ```python matrix = [ [2, 1, -3, -4, 5], [0, 6, 3, 4, 1], [2, -2, -1, 4, -5], [-3, 3, 1, 0, 3] ] ``` Output: ```python 18 ``` Explanation: The submatrix with the maximum sum is: ``` [ [2, 1], [0, 6], [2, -2], [-3, 3] ] ``` with sum 2 + 1 + 0 + 6 + 2 - 2 - 3 + 3 = 9.","solution":"def max_sum_submatrix(matrix): def kadane(arr): max_sum = cur_sum = arr[0] for x in arr[1:]: cur_sum = max(x, cur_sum + x) max_sum = max(max_sum, cur_sum) return max_sum if not matrix or not matrix[0]: return 0 max_sum = float(\'-inf\') rows, cols = len(matrix), len(matrix[0]) for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] cur_max = kadane(temp) max_sum = max(max_sum, cur_max) return max_sum"},{"question":"A group of students is setting up a coding challenge platform. One of the tasks, inspired by their love for numbers, is to determine the maximum product of any two distinct elements in a list. Given a list of `n` non-negative integers, the objective is to determine and print the maximum product of any two distinct elements from the list. To solve this problem, you can follow these steps: 1. Sort the list in non-increasing order. 2. Iterate through the list to find the maximum product of any two distinct elements. 3. Output the maximum product. Input The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of elements in the list. The second line contains `n` non-negative integers separated by spaces. Output Output a single integer — the maximum product of any two distinct elements in the list. Examples Input 5 1 4 3 6 2 Output 24 Input 3 1 10 2 Output 20 Note In the first example, the list is [1, 4, 3, 6, 2]. The maximum product of any two distinct elements in this list is 6 × 4 = 24. In the second example, the list is [1, 10, 2]. The maximum product of any two distinct elements in this list is 10 × 2 = 20.","solution":"def max_product_of_two_distinct_elements(n, elements): Returns the maximum product of any two distinct elements from the list of n non-negative integers. if n < 2: return 0 # Not enough elements to form a product # Sort the list in non-increasing order elements.sort(reverse=True) # The maximum product will be the product of the first two elements as they are the largest max_product = elements[0] * elements[1] return max_product"},{"question":"Masha is a farmer with a collection of n pigs. She has been observing their growth and wants to make sure that each pig grows at the same rate over time. Masha has noticed an anomaly in the growth pattern of the pigs and wants to investigate further. She has made multiple observations, each recording the growth rate of a pig for a day. Masha wants to know how many days there were such that the growth rate of a particular pig was the maximum among all pigs on that day. Input The first line of input contains two space-separated integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 10^3) — the number of pigs and the number of days over which observations were made, respectively. Each of the next d lines contains n space-separated integers, where the j-th integer on the i-th line denotes the growth rate of the j-th pig on the i-th day. Following this, there are n lines, each containing an integer p (1 ≤ p ≤ d) — the days for which Masha wants to know if a particular pig had the maximum growth rate. Output For each queried day, output \\"Yes\\" if the pig had the highest growth rate that day, or \\"No\\" otherwise. Example Input 3 5 3 5 2 4 1 6 3 3 3 5 5 5 2 7 1 2 4 5 Output No Yes Yes Note Explanation of the example: 1. On day 2, the query asks about pig 2. The growth rates are [4, 1, 6], and pig 2 has a growth rate of 1, which is not the highest, so the answer is \\"No\\". 2. On day 4, the query asks about pig 4. The growth rates are [5, 5, 5], and pig 4\'s growth rate of 5 is indeed the highest, so the answer is \\"Yes\\". 3. On day 5, the query asks about pig 5. The growth rates are [2, 7, 1], and pig 5 has a growth rate of 7, which is the highest, so the answer is \\"Yes\\".","solution":"def is_max_growth(n, d, growth_rates, queries): results = [] for query in queries: day, pig = query[0] - 1, query[1] - 1 max_growth = max(growth_rates[day]) if growth_rates[day][pig] == max_growth: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given an array of integers representing the height of buildings aligned in a straight line. The width of each building is 1. You need to calculate the area of the largest rectangular block that can be formed by the contiguous buildings. The height of the rectangular block is determined by the shortest building among the contiguous buildings considered. Input The first line contains an integer N (1 ≤ N ≤ 100,000) representing the number of buildings. The second line contains N integers H[i] (1 ≤ H[i] ≤ 10^9) separated by a single space representing the heights of the buildings. Output One integer representing the largest rectangular area that can be formed by the contiguous buildings. Examples Input 7 2 1 5 6 2 3 1 Output 10 Input 5 1 2 3 4 5 Output 9 Note First example: The largest rectangle can be formed between the building with height 5 and building with height 2 (from indices 2 to 3 inclusive), thus the area is 2 (width) * 5 (height) = 10. Second example: The largest rectangle can be formed between the building with height 3 and building with height 4 (from indices 2 to 4 inclusive), thus the area is 3 (width) * 3 (height) = 9.","solution":"def largestRectangleArea(heights): Calculate the area of the largest rectangle that can be formed by contiguous buildings. heights: List[int] - a list of building heights. Returns an integer representing the largest rectangular area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"The annual carnival in a small town features a popular game called \\"Magic Squares\\". In this game, a player is given a square grid of integers and has to determine if it is a \\"magic square\\". A square grid of integers is called a magic square if the sums of the integers in each row, the sums of the integers in each column, and the sums of the integers in both main diagonals are all equal. Write a program to check if a given square grid is a magic square. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the size of the square grid. Each of the next n lines contains n integers each, describing the grid (each integer is between -1000 and 1000 inclusive). Output Print \\"YES\\" if the given grid is a magic square. Otherwise, print \\"NO\\". Examples Input 3 2 7 6 9 5 1 4 3 8 Output YES Input 3 3 5 7 8 1 6 4 9 2 Output NO","solution":"def is_magic_square(n, grid): This function checks if the given n x n grid is a magic square. # calculate the sum of the first row magic_sum = sum(grid[0]) # check rows for row in grid: if sum(row) != magic_sum: return \\"NO\\" # check columns for col in range(n): if sum(grid[row][col] for row in range(n)) != magic_sum: return \\"NO\\" # check main diagonal if sum(grid[i][i] for i in range(n)) != magic_sum: return \\"NO\\" # check secondary diagonal if sum(grid[i][n-i-1] for i in range(n)) != magic_sum: return \\"NO\\" return \\"YES\\" # Example usage n = 3 grid = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] print(is_magic_square(n, grid)) # Outputs \\"YES\\""},{"question":"You are given a grid with dimensions n x m, where each cell contains a positive integer. You need to perform a number of operations on this grid. In each operation, you will be given a starting cell and a target cell, and you need to find the sum of all numbers within the rectangle defined by these two cells (inclusive). To efficiently handle a large number of such operations, you need to precompute some helpful information about the grid and use it to quickly answer each query. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m integers, where the j-th integer of the i-th line represents the value in the cell at row i and column j. Each of these integers is between 1 and 100. The following line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines each contain four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) — the coordinates of the starting and target cells of each query. Output For each query, output the sum of all numbers within the rectangle defined by the starting and target cells. Examples Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28","solution":"def preprocess_grid(grid): Preprocess the grid to create a sum matrix for efficient query. Args: - grid: 2D list of integers representing the grid. Returns: - sum_matrix: 2D list of integers representing the sum matrix. n = len(grid) # Number of rows m = len(grid[0]) # Number of columns # Create a 2D list with the same dimensions as grid initialized to 0 sum_matrix = [[0]*(m+1) for _ in range(n+1)] # Fill the sum_matrix with cumulative sums for i in range(1, n+1): for j in range(1, m+1): sum_matrix[i][j] = (grid[i-1][j-1] + sum_matrix[i-1][j] + sum_matrix[i][j-1] - sum_matrix[i-1][j-1]) return sum_matrix def query_sum(sum_matrix, r1, c1, r2, c2): Query the sum of numbers in the rectangle defined by (r1, c1) and (r2, c2). Args: - sum_matrix: 2D list of integers, the precomputed sum matrix. - r1, c1, r2, c2: Integers representing the query rectangle coordinates. Returns: - result: Integer, the sum of the rectangle. result = (sum_matrix[r2][c2] - sum_matrix[r1-1][c2] - sum_matrix[r2][c1-1] + sum_matrix[r1-1][c1-1]) return result def sum_in_rectangles(n, m, grid, queries): Main function to process the grid and answer the queries. Args: - n, m: Integers, dimensions of the grid. - grid: 2D list of integers representing the grid. - queries: List of tuples, each representing a query (r1, c1, r2, c2). Returns: - results: List of integers, the sum of each query rectangle. sum_matrix = preprocess_grid(grid) results = [query_sum(sum_matrix, *query) for query in queries] return results"},{"question":"Alex has an array of n integers and he likes to sort. However, instead of sorting the entire array, he wants to sort only a specific subarray to achieve a sequence where the elements are in non-decreasing order within that subarray. Given an integer k (1 ≤ k ≤ n), Alex needs to sort the subarray starting from index 1 to index k (1-based indexing). If the subarray from index 1 to k is already sorted, the number of operations needed is 0. Otherwise, he needs to identify the minimum number of swaps required to sort that particular subarray in non-decreasing order. Each swap operation allows him to swap any two elements within the subarray from index 1 to k. Write a program to determine the minimum number of swap operations required for each test case. Input The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each test case consists of two lines: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5). - The second line contains n integers a_1, a_2, a_3, ..., a_n (0 ≤ a_i ≤ 10^9) representing the array elements. Output For each test case, output one integer, representing the minimum number of swaps needed to sort the subarray from index 1 to k. Example Input 3 7 4 7 5 3 1 2 8 4 5 3 1 2 3 4 5 9 5 5 4 3 2 1 6 7 8 9 Output 2 0 2 Note In the first test case, sorting the subarray [7, 5, 3, 1] to be [1, 3, 5, 7] can be done with 2 swaps: (7, 1) and (5, 3). In the second test case, the subarray [1, 2, 3] is already sorted, so 0 swaps are required. In the third test case, sorting the subarray [5, 4, 3, 2, 1] to be [1, 2, 3, 4, 5] can be done with 2 swaps: (5, 1) and (4, 2).","solution":"def min_swaps_to_sort_subarray(n, k, arr): Returns the minimum number of swaps required to sort the subarray arr[0:k] in non-decreasing order. subarray = arr[:k] sorted_subarray = sorted(subarray) index_map = {val: i for i, val in enumerate(subarray)} swaps = 0 for i in range(k): correct_value = sorted_subarray[i] if subarray[i] != correct_value: swaps += 1 to_swap_idx = index_map[correct_value] subarray[i], subarray[to_swap_idx] = subarray[to_swap_idx], subarray[i] index_map[subarray[to_swap_idx]] = to_swap_idx index_map[subarray[i]] = i return swaps def process_test_cases(test_cases): results = [] for n, k, arr in test_cases: result = min_swaps_to_sort_subarray(n, k, arr) results.append(result) return results"},{"question":"Alex is organizing a coding competition and he has n participants. Each participant has a unique ID from 1 to n. Alex needs to form teams of two participants each. Additionally, he has some constraints about which participants should not be in the same team. You are given m pairs of participants (a1, b1), (a2, b2), ..., (am, bm). These pairs represent the participants who are forbidden to be in the same team. Determine whether it is possible to form n/2 teams given that n is even and there are m forbidden pairs. If it is possible, find one possible way to form such teams. If not, return \\"impossible\\". Input The first line of the input contains two integers n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of participants and the number of forbidden pairs of participants, respectively. The i-th of next m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n) — the i-th pair of forbidden participants. It\'s guaranteed that each pair of participants will appear at most once in the input. Output If it is possible to form the teams, print \\"possible\\" (without quotes) on the first line. On each of the next n/2 lines, print two integers representing the IDs of the participants in one team. If it is impossible to form such teams, print \\"impossible\\" (without quotes). Examples Input 6 3 1 2 4 5 3 6 Output possible 1 3 2 4 5 6 Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output impossible Note In the first sample, it is possible to form teams while respecting all the constraints. An example configuration is teams: (1, 3), (2, 4), and (5, 6). In the second sample, it is impossible to pair the participants without breaking the constraints.","solution":"from itertools import combinations def form_teams(n, m, forbidden_pairs): def can_pair(a, b): return (a, b) not in forbidden_set and (b, a) not in forbidden_set if n % 2 != 0: return \\"impossible\\" forbidden_set = set(forbidden_pairs) participants = list(range(1, n + 1)) possible_pairs = list(combinations(participants, 2)) def backtrack(index=0, current_pairs=[]): if len(current_pairs) == n // 2: return current_pairs while index < len(possible_pairs): a, b = possible_pairs[index] if can_pair(a, b) and all(a not in pair and b not in pair for pair in current_pairs): result = backtrack(index + 1, current_pairs + [(a, b)]) if result: return result index += 1 return None solution = backtrack() if solution: result = [\\"possible\\"] + [f\\"{a} {b}\\" for a, b in solution] return \'n\'.join(result) else: return \\"impossible\\""},{"question":"Given an array of integers representing the prices of houses on a street, find the maximum sum of non-adjacent house prices you can obtain. You cannot select two consecutive houses, as they might belong to different neighbors and engage in disputes. If the array is empty, return 0. Input The first line contains an integer n (0 ≤ n ≤ 100,000), which represents the number of houses on the street. The second line contains n space-separated integers, where each integer ai (0 ≤ ai ≤ 10,000) represents the price of the i-th house. Output Print the maximum sum of non-adjacent house prices. Examples Input 4 3 2 7 10 Output 13 Input 5 5 5 10 40 50 35 Output 80 Input 3 3 2 5 Output 8 Note In the first sample, you can choose the first and fourth houses (3 + 10 = 13). In the second sample, you can choose the first, third, and fifth houses (5 + 10 + 50 = 65).","solution":"def max_non_adjacent_sum(house_prices): Returns the maximum sum of non-adjacent house prices. n = len(house_prices) if n == 0: return 0 elif n == 1: return house_prices[0] # Initialize an array to store the maximum sum up to each house dp = [0] * n dp[0] = house_prices[0] dp[1] = max(house_prices[0], house_prices[1]) for i in range(2, n): dp[i] = max(house_prices[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"Given a square matrix of size n x n filled with integers, you need to perform certain operations to manipulate and query the matrix. You have the following operations: 1. Update the value at a specified cell in the matrix. 2. Query the sum of all elements in a specified submatrix. More formally, you have the following operations: - Update(x, y, val): Updates the value at cell (x, y) to val. - Sum(x1, y1, x2, y2): Returns the sum of all elements in the submatrix whose top-left corner is (x1, y1) and bottom-right corner is (x2, y2). The square matrix is 1-indexed. Input The first line contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 100000) — the size of the matrix and the number of queries respectively. Each of the following q lines describes a query. A query is one of the following: - \\"Update x y val\\" (1 ≤ x, y ≤ n, -10^9 ≤ val ≤ 10^9) which means to update the value at (x, y) to val. - \\"Sum x1 y1 x2 y2\\" (1 ≤ x1, y1, x2, y2 ≤ n, x1 ≤ x2, y1 ≤ y2) which means to compute the sum of the submatrix from (x1, y1) to (x2, y2). Output For each query of the sum type, output the result on a new line. Example Input 4 5 Update 1 1 5 Update 2 2 3 Sum 1 1 2 2 Update 3 3 10 Sum 1 1 3 3 Output 8 18","solution":"class Matrix: def __init__(self, n): self.n = n self.matrix = [[0] * (n + 1) for _ in range(n + 1)] self.presum = [[0] * (n + 1) for _ in range(n + 1)] def update(self, x, y, val): diff = val - self.matrix[x][y] self.matrix[x][y] = val for i in range(x, self.n + 1): for j in range(y, self.n + 1): self.presum[i][j] += diff def query_sum(self, x1, y1, x2, y2): return (self.presum[x2][y2] - self.presum[x1 - 1][y2] - self.presum[x2][y1 - 1] + self.presum[x1 - 1][y1 - 1]) def process_queries(n, queries): matrix = Matrix(n) result = [] for query in queries: parts = query.split() if parts[0] == \\"Update\\": x, y, val = int(parts[1]), int(parts[2]), int(parts[3]) matrix.update(x, y, val) elif parts[0] == \\"Sum\\": x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) result.append(matrix.query_sum(x1, y1, x2, y2)) return result"},{"question":"You are given a list of integers. Your task is to identify the integer that appears an odd number of times in the list. It is guaranteed that exactly one integer in the list will appear an odd number of times, while all other integers will appear an even number of times. Write a function that takes a list of integers and returns the integer that appears an odd number of times. Input First line of input contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the list. The next line contains N space-separated integers (1 ≤ integer ≤ 10^6), the elements of the list. Output Output a single integer that appears an odd number of times in the list. Example Input 7 4 3 2 4 4 2 4 Output 3 Explanation In the list [4, 3, 2, 4, 4, 2, 4]: - The integer 4 appears 4 times (even). - The integer 2 appears 2 times (even). - The integer 3 appears 1 time (odd). Thus, the integer 3 appears an odd number of times.","solution":"def find_odd_occurrence(lst): Returns the integer that appears an odd number of times in the list. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 for num, count in count_dict.items(): if count % 2 != 0: return num # Example usage # lst = [4, 3, 2, 4, 4, 2, 4] # print(find_odd_occurrence(lst)) # Output: 3"},{"question":"# Problem: Calculate the Median of a Stream of Numbers You are given a stream of integers, one number at a time, and you need to find the median of the numbers processed so far. The median is the middle value in the sorted sequence of numbers. If the sequence has an even number of elements, the median is the average of the two middle numbers. Write a program that supports the following two operations: 1. `addNum(int num)`: Adds the integer `num` to the stream. 2. `findMedian()`: Returns the median of all elements so far. # Example Input: ``` addNum(1) addNum(2) findMedian() addNum(3) findMedian() ``` Output: ``` 1.5 2 ``` # Notes - `addNum` could be called any number of times. - `findMedian` should return a float or an integer depending on whether the current number of elements is odd or even. - The operations should have efficient time complexity considering a large number of inputs.","solution":"import heapq class MedianFinder: def __init__(self): # Two heaps: a max-heap for the lower half of the numbers # and a min-heap for the upper half of the numbers self.low = [] # max-heap (invert the numbers to use with heapq) self.high = [] # min-heap def addNum(self, num: int) -> None: heapq.heappush(self.low, -num) # Add to max-heap # Balance the heaps by moving the largest element of low to high heapq.heappush(self.high, -heapq.heappop(self.low)) # If high contains more elements, move the smallest element of high to low if len(self.low) < len(self.high): heapq.heappush(self.low, -heapq.heappop(self.high)) def findMedian(self) -> float: if len(self.low) > len(self.high): return float(-self.low[0]) return (-self.low[0] + self.high[0]) / 2.0"},{"question":"A bookstore wants to optimize the arrangement of their books on a shelf. Each book has a unique identifier and a given width. The goal is to fit the maximum number of books on the shelf without exceeding a specified total width. Given a list of book widths and the maximum width of the shelf, determine the maximum number of unique books that can be arranged on the shelf. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100) — the number of books, and an integer W (1 ≤ W ≤ 1000) — the maximum width of the shelf. The second line of each test case contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ W) — the widths of the books. Output For each test case, print a single integer — the maximum number of unique books that can be placed on the shelf. Examples Input 3 5 10 1 2 3 4 5 4 5 4 4 4 4 6 15 7 2 3 9 5 1 Output 4 1 4 Explanation In the first test case, you can pick books with widths 1, 2, 3, and 4, which sum up to 10. In the second test case, you can only place one book of width 4 on the shelf. In the third test case, you can pick books with widths 7, 2, 3, and 1, which sum up to 13 (the highest sum not exceeding 15 with the maximum number of unique books).","solution":"def max_books_on_shelf(test_cases): results = [] for case in test_cases: n, W = case[0] widths = sorted(case[1]) total_width = 0 num_books = 0 for width in widths: if total_width + width <= W: total_width += width num_books += 1 else: break results.append(num_books) return results"},{"question":"You are given a rectangular grid representing a grid-like city map. Some of the cells contain buildings (\'B\') and others are empty (\'E\'). You need to calculate the smallest number of rows and columns that must be removed to have no more buildings in the grid. The removal of a row or a column removes all buildings located in that row or column. Input The input consists of one or more datasets. The number of datasets does not exceed 50. Each dataset describes a city grid. The first line of a dataset contains two positive integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. Each of the next n lines contains m characters each, either \'B\' (representing a building) or \'E\' (representing an empty cell). The end of the input is indicated with a line containing two zeros. Output For each dataset, output a single line containing the smallest number of rows and columns to remove to have no buildings in the grid. Example Input 3 4 E B E E B E B E E E E B 5 5 E E E E E E B E E E E E E B E E E E E E E E B E E 2 2 E E E E 3 3 B E B E B E B E B 0 0 Output 2 2 0 3","solution":"def smallest_removal(n, m, grid): Return the smallest number of rows and columns to remove all buildings in the grid. rows_with_buildings = set() cols_with_buildings = set() # Collect all rows and columns that contain buildings for i in range(n): for j in range(m): if grid[i][j] == \'B\': rows_with_buildings.add(i) cols_with_buildings.add(j) # Number of rows and columns to remove is the minimum of these two sets\' sizes return min(len(rows_with_buildings), len(cols_with_buildings)) def process_input(input_data): Process the input data as per the problem statement results = [] index = 0 while index < len(input_data): n, m = map(int, input_data[index].split()) if n == 0 and m == 0: break grid = input_data[index+1:index+1+n] results.append(smallest_removal(n, m, grid)) index += n + 1 return results # Example usage with the input provided in the problem statement: input_data = [ \\"3 4\\", \\"E B E E\\", \\"B E B E\\", \\"E E E B\\", \\"5 5\\", \\"E E E E E\\", \\"E B E E E\\", \\"E E E B E\\", \\"E E E E E\\", \\"E E B E E\\", \\"2 2\\", \\"E E\\", \\"E E\\", \\"3 3\\", \\"B E B\\", \\"E B E\\", \\"B E B\\", \\"0 0\\" ] output = process_input(input_data) for result in output: print(result)"},{"question":"Elevator Scheduling Optimization An elevator in a building with F floors (1 ≤ F ≤ 20) and N people (1 ≤ N ≤ 20) needs to be scheduled to minimize the total waiting time for all passengers. The system is designed to move only once, from the ground floor (floor 1) to some destination floor D (1 ≤ D ≤ F), picking up and dropping off all passengers along the way. Each passenger has a desired destination floor and a weight, indicating the importance of minimizing their waiting time. The elevator starts at floor 1, picks up each person, and then moves to the destination floor D. Passengers wait until they are picked up and delivered to their desired floor. The total waiting time for a passenger is the sum of the time they wait to be picked up and the time they wait to be dropped off. Write a program to determine the optimal destination floor D that minimizes the total weighted waiting time for all passengers. Input The input starts with two integers, F (the number of floors) and N (the number of people). The following N lines each contain two integers, representing a passenger\'s desired destination floor and their weight. Output Output a single integer representing the floor D that minimizes the total weighted waiting time for all passengers. If there is a tie, choose the smallest floor number. Sample Input Input 5 3 2 4 5 2 4 3 Output 4 Explanation In the sample input, the building has 5 floors, and there are 3 passengers. The desired floors are 2, 5, and 4, with weights 4, 2, and 3, respectively. The program calculates the total weighted waiting time for each possible destination floor (from 1 to 5) and determines that choosing floor 4 minimizes this waiting time.","solution":"def optimal_destination_floor(F, N, passengers): def weighted_waiting_time(destination): return sum((abs(1 - dest) + abs(dest - destination)) * weight for dest, weight in passengers) min_time = float(\'inf\') optimal_floor = 1 for floor in range(1, F + 1): current_waiting_time = weighted_waiting_time(floor) if current_waiting_time < min_time: min_time = current_waiting_time optimal_floor = floor return optimal_floor # Example Usage F = 5 N = 3 passengers = [(2, 4), (5, 2), (4, 3)] print(optimal_destination_floor(F, N, passengers)) # Output: 4"},{"question":"You are given an array of integers representing the ages of a group of people. Your task is to determine the median age of the group. INPUT: The first line contains the total number of test cases, T. For each test case, the first line contains the total number of people, N, and the second line contains a list of N space-separated integers representing their ages. OUTPUT: For each test case, print the median age in a single line. If the number of people is even, print the average of the two middle ages (use integer division). Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ age ≤ 120 SAMPLE INPUT 1 5 23 29 21 33 25 SAMPLE OUTPUT 25","solution":"def find_median_age(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] ages = sorted(test_cases[i][1]) if N % 2 == 1: median = ages[N // 2] else: median = (ages[N // 2 - 1] + ages[N // 2]) // 2 results.append(median) return results # Test cases input T = 1 test_cases = [ (5, [23, 29, 21, 33, 25]) # Sample input ] # Example call (this will not run here as it\'s just for understanding) print(find_median_age(T, test_cases)) # Expected output: [25]"},{"question":"Alice is learning about palindromes in her computer science class. A palindrome is a string that reads the same forward and backward. To help Alice practice, her teacher has given her a string and asked her to determine if it can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if the frequency of each character allows for the characters to be mirrored around the center of the string. In other words, at most one character can have an odd frequency (this character would be the center of the palindrome if the string\'s length is odd). Write a program that reads an input string and outputs \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Input The first line contains a non-empty string s consisting of lowercase English letters. The length of the string s is at most 1000 characters. Output Output \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Examples Input carrace Output YES Input hello Output NO","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Returns \\"YES\\" if it can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Two players are playing a game using a grid with dimensions N x M consisting of cells that can either be empty or contain a coin. Each player takes turns to select any coin from the grid. When a player selects a coin from cell (i, j), all coins in the same row (i) or column (j) are also collected by that player. The game continues until there are no coins left to collect. The player who collects the last coin wins. Determine if the player who starts the game (Player 1) has a winning strategy given the initial positions of the coins on the grid. Input: The first line contains two integers N and M (1 ≤ N, M ≤ 10^5). Each of the next N lines contains M characters, where each character is either \'.\' (an empty cell) or \'C\' (a cell containing a coin). Output: Print \\"Yes\\" if Player 1 has a winning strategy, otherwise print \\"No\\". Example Input: 3 4 C..C .... C.C. Output: No","solution":"def has_winning_strategy(N, M, grid): Determines if the player who starts the game has a winning strategy. Parameters: N (int): Number of rows. M (int): Number of columns. grid (list of strings): The grid representation where \'.\' means empty and \'C\' means a cell with a coin. Returns: str: \\"Yes\\" if Player 1 has a winning strategy, otherwise \\"No\\". row_counts = [0] * N col_counts = [0] * M for r in range(N): for c in range(M): if grid[r][c] == \'C\': row_counts[r] += 1 col_counts[c] += 1 non_empty_rows = sum(1 for count in row_counts if count > 0) non_empty_cols = sum(1 for count in col_counts if count > 0) if min(non_empty_rows, non_empty_cols) % 2 == 0: return \\"No\\" else: return \\"Yes\\""},{"question":"Ana is creating a rectangular grid composed of lowercase letters from \'a\' to \'z\'. She wants to make sure that no two cells in the same row or the same column contain the same letter. Additionally, each subgrid (3x4) must only contain unique letters. Write a program that reads multiple datasets and verifies Ana\'s grid arrangement according to the rules. If it violates the rules, output the location and the letter that is incorrect (appears more than once) in the format specified. Input The first row gives the number of datasets n (n ≤ 20). Each dataset contains a numeric value m and subsequent 3 by (m columns) grids. Output For each dataset, show the grid arrangement. For each letter that breaks the rules, display * (half-width asterisk) before it in the output. If the arrangement meets all the rules, output \'Valid Grid\'. Example Input 2 4 a b c d e f g h i j k l 4 a b c d e f g h i a k l Output a b c d e f g h i j k l a b c d e f g h i *a k l","solution":"def check_valid_grid(grid): rows, cols = len(grid), len(grid[0]) # Check rows and columns for r in range(rows): row_letters = set() for c in range(cols): if grid[r][c] in row_letters: return r, c, grid[r][c] row_letters.add(grid[r][c]) for c in range(cols): col_letters = set() for r in range(rows): if grid[r][c] in col_letters: return r, c, grid[r][c] col_letters.add(grid[r][c]) # Check subgrids (3x4) subgrid_rows, subgrid_cols = 3, 4 for start_r in range(0, rows, subgrid_rows): for start_c in range(0, cols, subgrid_cols): subgrid_letters = set() for r in range(start_r, min(start_r + subgrid_rows, rows)): for c in range(start_c, min(start_c + subgrid_cols, cols)): if grid[r][c] in subgrid_letters: return r, c, grid[r][c] subgrid_letters.add(grid[r][c]) return None def validate_datasets(datasets): results = [] for grid in datasets: error = check_valid_grid(grid) if error: r, c, letter = error grid[r][c] = \'*\' + letter results.append(grid) return results def format_output(results): output = [] for grid in results: for row in grid: output.append(\\" \\".join(row)) output.append(\\"\\") return \\"n\\".join(output).strip()"},{"question":"Peter loves to play with his toys. He has an array of `n` toys, each with a certain durability. Durability is represented by positive integers. Peter has a unique way of playing with his toys – each time he plays with any toy, he decreases its durability by 1. When the durability of a toy reaches 0, it breaks. Peter wants to play with his toys in a special sequence. He repeatedly picks the toy with the highest durability among the toys that haven\'t broken yet and plays with it. If there are multiple toys with the same highest durability, he selects the one that appears first in the array. Peter continues this process until all the toys are broken. Your task is to determine the sequence of the indexes of the toys as they break. Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of toys. The second line contains `n` space-separated integers `d1, d2, ..., dn` (1 ≤ di ≤ 1000), where `di` is the durability of the i-th toy. Output Print a single line containing `n` space-separated integers. It is the sequence of the indexes of the toys in the order they break. Examples Input 5 3 1 2 3 2 Output 1 4 3 5 2 Input 4 1 1 1 1 Output 1 2 3 4 Explanation In the first example, the toy sequence is as follows: 1. Toys\' durabilities: [3, 1, 2, 3, 2] → Peter picks toy 1 2. Toys\' durabilities: [2, 1, 2, 3, 2] → Peter picks toy 4 3. Toys\' durabilities: [2, 1, 2, 2, 2] → Peter picks toy 3 4. Toys\' durabilities: [2, 1, 2, 1, 2] → Peter picks toy 5 5. Toys\' durabilities: [2, 1, 2, 0, 2] → Peter picks toy 2 In the second example, all toys have the same durability. Peter picks them in the order they appear in the array.","solution":"def toy_breaking_sequence(n, durabilities): Returns the sequence of the indexes of the toys in the order they break. toys = [(durability, i) for i, durability in enumerate(durabilities)] sequence = [] while toys: index_of_max = 0 for i in range(1, len(toys)): if toys[i][0] > toys[index_of_max][0] or (toys[i][0] == toys[index_of_max][0] and toys[i][1] < toys[index_of_max][1]): index_of_max = i sequence.append(toys[index_of_max][1] + 1) toys.pop(index_of_max) return sequence"},{"question":"You are given a grid of size `n x m` where each cell contains a single lowercase English letter. A word is defined as four consecutive identical letters which are either on the same row (horizontally adjacent) or on the same column (vertically adjacent). Your task is to determine whether such a word exists in the grid. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid respectively. Each of the next `n` lines contains `m` lowercase English letters representing the cells of the grid. Output Print \\"YES\\" (without quotes) if there is a word in the grid meeting the given definition. Otherwise, print \\"NO\\". Examples Input 5 5 abcde fghij kkkkl mnopq rstuv Output YES Input 4 3 abc def ghi jkl Output NO","solution":"def check_word_in_grid(n, m, grid): def check_horizontal(grid, n, m): for i in range(n): for j in range(m - 3): if grid[i][j] == grid[i][j + 1] == grid[i][j + 2] == grid[i][j + 3]: return True return False def check_vertical(grid, n, m): for j in range(m): for i in range(n - 3): if grid[i][j] == grid[i + 1][j] == grid[i + 2][j] == grid[i + 3][j]: return True return False if check_horizontal(grid, n, m) or check_vertical(grid, n, m): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers. You need to transform the array such that each element is the sum of all other elements in the original array except itself. The transformation should be done in-place with O(1) extra space (excluding the input array). Input The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 109) — the elements of the array. Output Output the transformed array as n space-separated integers. Examples Input 4 1 2 3 4 Output 9 8 7 6 Input 3 5 -2 7 Output 5 12 -2 Explanation: In the first example: - For the first element: 2 + 3 + 4 = 9 - For the second element: 1 + 3 + 4 = 8 - For the third element: 1 + 2 + 4 = 7 - For the fourth element: 1 + 2 + 3 = 6 In the second example: - For the first element: -2 + 7 = 5 - For the second element: 5 + 7 = 12 - For the third element: 5 - 2 = 3","solution":"def transform_array(arr): Transforms the array such that each element is the sum of all other elements in the original array except itself. Args: arr (list): A list of integers. Returns: list: The transformed list. total_sum = sum(arr) for i in range(len(arr)): arr[i] = total_sum - arr[i] return arr"},{"question":"Aman is fascinated by patterns in numbers. He recently stumbled upon a sequence problem and wants to automate the process of finding the sequence for a given set of numbers. As Aman is still learning programming, he seeks your assistance. The sequence is defined as follows: Starting from an integer n (n ≥ 1), the next number in the sequence is obtained by reversing the digits of n and adding the result to n. This process is repeated until the sequence reaches a palindrome or surpasses 1000 iterations. Write a function that takes a list of integers and returns the number of iterations it takes to reach a palindrome for each number. If a palindrome is not found within 1000 iterations, return -1 for that number. INPUT The first line contains an integer T denoting the number of test cases. The next T lines each contain a single integer N (1 ≤ N ≤ 10^4). OUTPUT For each test case, print the number of iterations required to reach a palindrome. Print -1 if it exceeds 1000 iterations. Constraints 1 ≤ T ≤ 100 SAMPLE INPUT 5 56 87 196 89 12 SAMPLE OUTPUT 1 4 -1 24 1","solution":"def reverse_number(n): return int(str(n)[::-1]) def is_palindrome(n): return str(n) == str(n)[::-1] def iterations_to_palindrome(n): for i in range(1001): if is_palindrome(n): return i n += reverse_number(n) return -1 def sequence_iterations(numbers): return [iterations_to_palindrome(num) for num in numbers]"},{"question":"Date has magical properties and your job is to check these properties. A magical date is a date which satisfies a certain property when considering its day, month and year. Consider a date in the format of DD/MM/YYYY. The properties that need to be checked are: 1. The date representation should be such that the day part is a two-digit number (01 to 31). 2. The month part is a two-digit number (01 to 12). 3. The year part is exactly four-digits (1000 to 9999 inclusive). A date is considered \\"increasing\\" if the day value is less than or equal to the month value, and the month value is less than or equal to the year value when regarded numerically. Examples of increasing dates: 01/02/2003, 05/07/2022 Write a function that accepts a string representation of a date and returns \\"Yes\\" if the date qualifies as \\"increasing\\", otherwise return \\"No\\". If the date does not follow the correct format, return \\"Invalid date\\". Input A single date string in the format \\"DD/MM/YYYY\\". Output Return \\"Yes\\" if the given date is increasing, otherwise return \\"No\\". If the date is not in the correct format, return \\"Invalid date\\". Examples: Input \\"01/02/2003\\" Output Yes Input \\"05/04/2020\\" Output No Input \\"31/12/2025\\" Output No Input \\"99/99/9999\\" Output Invalid date","solution":"def is_increasing_date(date_str): Checks if the given date string is an \\"increasing\\" date. Args: date_str (str): Date string in the format \\"DD/MM/YYYY\\". Returns: str: \\"Yes\\" if the date is increasing, \\"No\\" if it is not, and \\"Invalid date\\" if the format is incorrect. parts = date_str.split(\'/\') if len(parts) != 3: return \\"Invalid date\\" day, month, year = parts if len(day) != 2 or not day.isdigit() or len(month) != 2 or not month.isdigit() or len(year) != 4 or not year.isdigit(): return \\"Invalid date\\" day = int(day) month = int(month) year = int(year) if not (1 <= day <= 31) or not (1 <= month <= 12) or not (1000 <= year <= 9999): return \\"Invalid date\\" if day <= month <= year: return \\"Yes\\" else: return \\"No\\""},{"question":"A company wants to optimize the usage of its meeting rooms. There are 3 meeting rooms: A, B, and C. Each room has a specific capacity and each employee can book any of the rooms only based on its capacity. You are given the number of employees requesting a room and the capacity of each meeting room. For each employee, find possible meeting rooms they can book based on their group size. If an employee\'s group size exceeds the capacity of all meeting rooms, they do not get a room. Your task is to determine which rooms each employee or group of employees can potentially use and output the possible rooms or \\"No room\\" if none are available. Input: The first line contains a single integer T - the number of test cases. T test cases follow. Each test case consists of the following: - The first line contains a single integer E - the number of employees. - The following line contains three integers A, B, and C - the capacities of meeting rooms A, B, and C respectively. - The next E lines contain a single integer G_i, the group size for each employee. Output: For each test case, output E lines, each containing the possible room(s) the employee can book (from the list A, B, C) separated by a space, or \\"No room\\" if the group size exceeds the capacity of all rooms. Constraints: 1 ≤ T ≤ 50 1 ≤ E ≤ 100 1 ≤ A, B, C ≤ 100 1 ≤ G_i ≤ 100 Example: Input: 2 3 4 6 8 2 5 9 2 10 15 20 5 12 Output: A B C B C No room A B C B C","solution":"def meeting_room_availability(T, test_cases): results = [] for test_case in test_cases: E, capacities, group_sizes = test_case A, B, C = capacities for group in group_sizes: possible_rooms = [] if group <= A: possible_rooms.append(\'A\') if group <= B: possible_rooms.append(\'B\') if group <= C: possible_rooms.append(\'C\') if possible_rooms: results.append(\\" \\".join(possible_rooms)) else: results.append(\\"No room\\") return results"},{"question":"String Transformation You are given two strings, start and end, consisting of lowercase alphabets. Your task is to determine the minimum number of operations required to transform the start string into the end string. The operations you can perform are as follows: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. Write a program that determines the minimum number of these operations required to transform the start string into the end string. Input The input consists of a single test case with two lines. Each line contains a string consisting only of lowercase alphabets. The lengths of the strings are between 1 and 1000, inclusive. Output Output in one line the minimum number of operations required to transform the start string into the end string. Sample Input 1 kitten sitting Sample Output 1 3 Sample Input 2 flaw lawn Sample Output 2 2 Sample Input 3 intention execution Sample Output 3 5 Explanation In the first example, the start string \\"kitten\\" can be transformed into the end string \\"sitting\\" in 3 steps: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end In the second example, the start string \\"flaw\\" can be transformed into the end string \\"lawn\\" in 2 steps: 1. Replace \'f\' with \'l\' 2. Insert \'n\' at the end In the third example, the start string \\"intention\\" can be transformed into the end string \\"execution\\" in 5 steps: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'c\' 4. Delete \'n\' 5. Insert \'u\'","solution":"def min_operations(start, end): Returns the minimum number of operations required to transform the start string into the end string. m, n = len(start), len(end) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif start[i - 1] == end[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"A popular mobile application provides users with the ability to log their physical activities such as running, walking, and cycling. Each activity log entry contains information about the type of activity, the distance covered in kilometers, and the time taken to complete the activity in minutes. The application tracks these activities for each user and provides them with an accumulated summary of their performances. Write a program that reads a list of user activity logs and generates a summary for each user. The program should compute the total distance, total time, and average speed (in km/h) for each user. Average speed can be calculated using the formula: [ text{Average Speed} = frac{text{Total Distance Covered}}{text{Total Time Taken in Hours}} ] Input Given a list of users and their activities provided in the following format: m username1 activity1 distance1 time1 activity2 distance2 time2 :: username2 activity1 distance1 time1 :: usernamem activity1 distance1 time1 :: The number of users, m (1 ≤ m ≤ 20), is given on the first line. For each user, the username (alphabetic text of up to 15 characters) is followed by multiple lines containing activity data. Each activity line contains the activity type (running, walking, or cycling), the distance covered in kilometers (a positive floating-point number up to 2 decimal places), and the time taken in minutes (a positive integer). Output For each user, print the username and their activity summary in the format: ``` username total_distance total_time average_speed ``` where: - total_distance is the sum of all distances for that user, rounded to 2 decimal places. - total_time is the sum of all times for that user, in minutes. - average_speed is the average speed, rounded to 2 decimal places. Example Input 2 Alice running 5.0 30 walking 2.5 25 cycling 10.0 45 Bob running 3.0 20 walking 1.5 15 cycling 8.0 40 Output Alice 17.5 100 10.50 Bob 12.5 75 10.00","solution":"def summarize_activities(m, user_activities): summaries = [] idx = 0 while idx < len(user_activities): username = user_activities[idx] total_distance = 0.00 total_time = 0 idx += 1 while idx < len(user_activities) and \' \' in user_activities[idx]: activity_parts = user_activities[idx].split() distance = float(activity_parts[1]) time = int(activity_parts[2]) total_distance += distance total_time += time idx += 1 avg_speed = total_distance / (total_time / 60.0) if total_time > 0 else 0.0 summary = f\\"{username} {total_distance:.2f} {total_time} {avg_speed:.2f}\\" summaries.append(summary) return summaries"},{"question":"In a futuristic city, there are n buildings arranged in a straight line, numbered from 1 to n. Each building has a control panel that opens only when a specific digital key is used. These digital keys are initially stored in random buildings, and each building has exactly one key. Furthermore, each building\'s panel requires a specific key which might not be the one stored within it initially. To streamline city management, you need to rearrange the keys such that each building has the correct key for its control panel. The only allowed operation is to swap the keys between two adjacent buildings. Find the minimum number of adjacent swaps required to rearrange the keys such that every building has the correct key for its control panel. Input The first line contains a single integer n (1 ≤ n ≤ 200000) — the number of buildings. The second line contains n space-separated integers ai (1 ≤ ai ≤ n) — the current key stored in the i-th building. The third line contains n space-separated integers bi (1 ≤ bi ≤ n) — the key required by the control panel of the i-th building. Output Print a single integer t — the minimum number of swaps needed to arrange the keys such that each building i gets the key bi. Examples Input 4 4 3 2 1 1 2 3 4 Output 6 Input 3 1 3 2 1 2 3 Output 1 Input 5 5 4 3 2 1 1 2 3 4 5 Output 10 Note In the first sample, initially, the keys are in reverse order. We need a total of 6 adjacent swaps to sort the keys into the correct order: (4,3,2,1) -> (3,4,2,1) -> (3,2,4,1) -> (3,2,1,4) -> (2,3,1,4) -> (2,1,3,4) -> (1,2,3,4). In the second sample, moving key 3 and key 2 requires just one swap: (1,3,2) -> (1,2,3). In the third sample, a total of 10 adjacent swaps are needed to sort the keys into the correct order, as the keys are in completely reversed order.","solution":"def min_adjacent_swaps(n, current_keys, required_keys): Returns the minimum number of adjacent swaps required to rearrange the keys such that each building has the correct key for its control panel. # Create a list of positions for required_keys pos = {key: i for i, key in enumerate(required_keys)} # Convert current keys to their positions required in the sorted array current_positions = [pos[key] for key in current_keys] # Function to count the minimum adjacent swaps def count_inversions(arr): # Function to use merge sort for counting inversions def merge_sort(arr, temp_arr, left, right): if left >= right: return 0 mid = (left + right) // 2 inv_count = merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge(arr, temp_arr, left, mid, right) return inv_count # Function to merge two halves and count inversions def merge(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions for merging the two halves while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count # Create a temporary array for merge sort process temp_arr = [0] * len(arr) return merge_sort(arr, temp_arr, 0, len(arr) - 1) # Count inversions in the list of required positions of current keys return count_inversions(current_positions)"},{"question":"A team of archaeologists is exploring an ancient temple. They have discovered an old mechanism that controls the doors of the temple, consisting of several dials. Each dial has numbers from 0 to 9, and can be rotated in two ways: clockwise or counterclockwise. The team needs to open a specific door by aligning the dials to a particular sequence. Write a function to calculate the minimum number of rotations needed to adjust each dial from its initial position to the target position. Rotating a dial from 9 to 0 or 0 to 9 is considered as 1 rotation. Input: The input contains multiple test cases. The first line of input contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of dials. The second line contains a string of N digits representing the initial positions of the dials. The third line contains a string of N digits representing the target positions of the dials. Output: For each test case, print a single integer - the minimum number of rotations needed to align the dials to their target positions. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 SAMPLE INPUT 2 3 123 345 4 0000 9999 SAMPLE OUTPUT 6 4","solution":"def min_rotations(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] initial_positions = test_cases[i][1] target_positions = test_cases[i][2] total_rotations = 0 for j in range(N): initial_digit = int(initial_positions[j]) target_digit = int(target_positions[j]) clockwise_rotations = (target_digit - initial_digit) % 10 counterclockwise_rotations = (initial_digit - target_digit) % 10 total_rotations += min(clockwise_rotations, counterclockwise_rotations) results.append(total_rotations) return results"},{"question":"A company wants to distribute a number of identical items to a group of employees according to certain criteria. Each employee must receive at least one item, and the total number of items each employee receives must be unique. Write a program to determine if the distribution is possible given the number of employees and the total number of items. Constraints * 2 ≤ number_of_employees ≤ 1000 * number_of_items ≥ number_of_employees Input Input is given from Standard Input in the following format: number_of_employees number_of_items Output If the distribution is possible, print `Possible`; otherwise, print `Impossible`. Examples Input 3 6 Output Possible Input 3 5 Output Impossible Input 4 10 Output Possible Input 5 14 Output Impossible","solution":"def is_distribution_possible(number_of_employees, number_of_items): Determine if distributing number_of_items to number_of_employees is possible with each employee getting at least one item and all getting unique amounts. min_items_required = number_of_employees * (number_of_employees + 1) // 2 if number_of_items >= min_items_required: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given an integer array a = {a_1, a_2, ..., a_n} of length n. Your task is to determine the number of distinct elements in the array that appear exactly twice in a. Constraints * All values in input are integers. * 1 leq n leq 100 * 0 leq a_i leq 10,000 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the number of distinct elements that appear exactly twice in the array. Examples Input 7 4 3 2 7 3 2 2 Output 1 Input 10 1 1 2 3 4 4 5 5 5 6 Output 2","solution":"def count_elements_appear_twice(n, a): Returns the number of distinct elements that appear exactly twice in the array. from collections import Counter element_count = Counter(a) count_appear_twice = 0 for count in element_count.values(): if count == 2: count_appear_twice += 1 return count_appear_twice"},{"question":"A company has a network of N computers and M connections between them. Each connection has a unique cost C. Your task is to determine the minimum cost needed to connect all the computers in the network. If it is impossible to connect all the computers, return -1. Constraints * All values in input are integers. * 1 leq N leq 1000 * 0 leq M leq 10000 * 1 leq C leq 10000 Input Input is given from Standard Input in the following format: ``` N M u1 v1 C1 u2 v2 C2 ... uM vM CM ``` Output Print the minimum cost needed to connect all the computers. If it is impossible, print -1. Examples Input ``` 4 5 1 2 1 2 3 4 3 4 2 1 3 3 1 4 3 ``` Output ``` 6 ``` Input ``` 3 1 1 2 1 ``` Output ``` -1 ``` Input ``` 5 7 1 2 6 1 3 1 1 4 5 2 3 5 2 5 3 3 4 5 3 5 6 ``` Output ``` 14 ```","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def minimum_cost_to_connect_computers(N, M, edges): if N == 0 or M == 0: return -1 edges.sort(key=lambda x: x[2]) uf = UnionFind(N + 1) cost = 0 num_edges = 0 for u, v, c in edges: if uf.find(u) != uf.find(v): uf.union(u, v) cost += c num_edges += 1 if num_edges == N - 1: return cost else: return -1 if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index+1]) c = int(data[index+2]) edges.append((u, v, c)) index += 3 print(minimum_cost_to_connect_computers(N, M, edges))"},{"question":"A bakery is organizing a contest for its customers where they have to create the longest possible cake decoration. Given a list of cake decoration elements, each element has a certain length and each can be used at most once. You need to help the bakery in finding the longest decoration they can create by selecting a subset of these elements such that the total length does not exceed a given maximum length. Your task is to determine the length of this longest possible decoration. If it\'s not possible to select any elements such that their total length remains within the maximum allowed length, return 0. INPUT First line will be a single integer T (T ≤ 10) representing the number of test cases. For each test case, the first line contains an integer N (1 ≤ N ≤ 100) representing the number of elements, and an integer L (1 ≤ L ≤ 10000) representing the maximum allowed length for the decoration. The second line for each test case contains N space-separated integers representing the lengths of the elements. OUTPUT For each test case, output the length of the longest possible decoration in a new line. SAMPLE INPUT 2 5 10 3 1 2 5 4 3 8 6 4 5 SAMPLE OUTPUT 10 6 Explanation In the first test case, we can select elements of lengths [3, 1, 2, 4] which sums up to 10, hence the maximum decoration length is 10. In the second test case, we can only select the element with length 6 to remain within the maximum allowed length 8.","solution":"def longest_decoration(T, test_cases): Returns the length of the longest possible decoration for each test case. Parameters: T (int): Number of test cases. test_cases (list): A list of tuples. Each tuple contains: - an integer N (number of elements) - an integer L (maximum allowed length) - a list of integers representing the lengths of the elements Returns: list: A list where each element represents the length of the longest possible decoration for the corresponding test case. def knapsack(values, weights, max_weight): n = len(values) dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(max_weight + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight] results = [] for case in test_cases: N, L, lengths = case result = knapsack(lengths, lengths, L) results.append(result) return results"},{"question":"You are given a grid of `n` rows and `m` columns. Some cells in this grid are water, while others are land. Your task is to determine the number of distinct islands in the grid. An island is a group of horizontally or vertically adjacent land cells. Input The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next `n` lines contains a string of length `m` consisting of characters `\'.\'` and `\'#\'` — water and land cells respectively. Output Print a single integer — the number of distinct islands in the grid. Example Input 5 5 ..... .#. .#. .#. ..... Output 1 Input 5 5 ..... .#.#. ..#.. ..#.. ..... Output 3 Note In the first example, all the land cells are connected, forming one single island. In the second example, there are three separate islands. The challenge is to identify and count clusters of connected land cells efficiently. The problem can be tackled using graph traversal techniques such as Depth-First Search (DFS) or Breadth-First Search (BFS) to explore all the connected components of land cells starting from each unvisited land cell.","solution":"def count_islands(grid): Given a grid of n rows and m columns where \'.\' represents water and \'#\' represents land, count the number of distinct islands. An island is a group of horizontally or vertically adjacent land cells. def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in ((cx - 1, cy), (cx + 1, cy), (cx, cy - 1), (cx, cy + 1)): if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'#\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) n = len(grid) m = len(grid[0]) if n > 0 else 0 visited = [[False] * m for _ in range(n)] islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\' and not visited[i][j]: # Found an unvisited piece of land, start a DFS/BFS visited[i][j] = True dfs(i, j) islands += 1 return islands"},{"question":"Given a sequence of integers, you are asked to determine whether it is possible to transform the sequence into a strictly increasing sequence by applying the following operation at most once: - Choose exactly one index in the sequence and change the value at that index to any integer value. A sequence is considered strictly increasing if each element is strictly greater than the previous element. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100,000) — the number of elements in the sequence. - The second line contains `N` space-separated integers `A_1, A_2, ..., A_N` (1 ≤ A_i ≤ 1,000,000,000) — the elements of the sequence. # Output - Print `YES` if it\'s possible to transform the sequence into a strictly increasing sequence by applying the described operation at most once. Otherwise, print `NO`. # Examples Example 1 # Input ``` 5 1 3 5 4 6 ``` # Output ``` YES ``` Example 2 # Input ``` 6 1 2 3 2 5 6 ``` # Output ``` YES ``` Example 3 # Input ``` 4 4 5 3 6 ``` # Output ``` YES ``` Example 4 # Input ``` 4 1 2 3 4 ``` # Output ``` YES ``` Example 5 # Input ``` 3 3 2 1 ``` # Output ``` NO ```","solution":"def can_become_strictly_increasing(N, A): Determine if the sequence can become strictly increasing by modifying at most one element. :param N: int, the number of elements in the sequence. :param A: List[int], the elements of the sequence. :return: str, \\"YES\\" if the sequence can be transformed into a strictly increasing sequence, \\"NO\\" otherwise. # Track the number of changes needed changes_needed = 0 for i in range(1, N): if A[i] <= A[i - 1]: changes_needed += 1 if changes_needed > 1: return \\"NO\\" # Check if changing current element or previous element solves the issue if i > 1 and A[i] <= A[i - 2]: if i < N - 1 and A[i + 1] <= A[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Michael is an avid student of combinatorics and he loves counting paths. Recently, his professor gave him a grid where he needs to count the number of possible paths from the top-left corner to the bottom-right corner. The grid has some blocks where Michael cannot go; these are marked as \'1\' in the grid, while other cells are marked as \'0\'. Michael can only move either right or down at any point in time. Given a grid, your task is to help Michael compute the number of distinct paths from the top-left to the bottom-right corner, taking into account the blocked cells. If there is no valid path, return 0. Input The first line of the input contains a single positive integer T, which represents the number of test cases. Then T test cases follow. Each case consists of: - An integer N, the number of rows in the grid. - An integer M, the number of columns in the grid. - An N by M matrix where each element is either \'0\' or \'1\' representing the grid. Output For each test case, output the number of distinct paths from the top-left corner to the bottom-right corner modulo 1,000,000,007. Example Input 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 Output 2 1 Explanation In the first test case, there are 2 paths from the top-left to the bottom-right: 1. Down -> Down -> Right -> Right 2. Right -> Right -> Down -> Down In the second test case, there is only 1 path: 1. Down -> Right","solution":"MOD = 1000000 def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] % MOD def paths_in_grids(t, test_cases): results = [] for case in test_cases: n, m, grid = case results.append(count_paths(grid)) return results"},{"question":"You are organizing a marathon event where n athletes are participating. Each athlete has a strength level represented by an integer s_i. The higher the strength level, the better the athlete. The athletes will run in pairs, and the goal is to form the strongest pairs possible. The strength of a pair is determined by the sum of the strength levels of the two athletes in the pair. You want to form pairs such that the minimum strength of any pair is maximized. Your task is to write a program that, given the number of athletes and their respective strength levels, forms pairs in a way that maximizes the minimum strength of any pair. Input The first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. The first line of each query contains one integer n (2 ≤ n ≤ 10^5) — the number of athletes. The following line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) representing the strength levels of the athletes. Output For each test case, print one integer — the maximum possible minimum strength of any pair. Example Input 3 4 3 1 4 2 6 5 1 2 3 6 4 2 10 20 Output 5 7 30 Note In the first test case, you can form the pairs (1, 4) and (2, 3). The sums are 1+4=5 and 2+3=5. So the minimum pair sum is 5. In the second test case, you can form the pairs (1, 6), (2, 5), and (3, 4). The sums are 1+6=7, 2+5=7, and 3+4=7. So the minimum pair sum is 7. In the third test case, as there are only two athletes, they will form a single pair with a sum of 10+20=30.","solution":"def maximize_min_strength(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] s.sort() max_min_strength = 0 for j in range(n // 2): pair_strength = s[j] + s[n - 1 - j] max_min_strength = max(max_min_strength, pair_strength) results.append(max_min_strength) return results"},{"question":"You are tasked with designing a robotic arm that will automatically insert letters into a grid following specific rules. The grid is a KxK square with K rows and K columns, where K is a positive integer. Each cell in the grid can hold one letter, and the robotic arm needs to fill the grid with a specific sequence of letters while following these rules: 1. The grid starts off empty. 2. The sequence of letters for the robotic arm to insert into the grid will be given in the input. 3. The robotic arm will start at the top-left corner of the grid (position (1, 1)). 4. The robotic arm can move right, down, left, or up but only if it stays within the boundaries of the grid. 5. The robotic arm must fill all cells in the grid in the exact order specified by the sequence of letters. 6. The movement of the robotic arm should follow a spiral pattern starting from the top-left corner and moving inward. Write a program that simulates the robotic arm\'s operation and outputs the final configuration of the grid. input The input consists of multiple datasets, each representing a single grid configuration. Each dataset consists of the following lines: - The first line contains the integer K (1 ≤ K ≤ 1000), the size of the grid. - The second line contains a string of K*K characters, representing the sequence of letters the robotic arm needs to insert into the grid, with each letter corresponding to one cell in the grid. The input is terminated by a line containing a single integer zero (0). output For each dataset, output the final configuration of the grid as K lines of K characters each, with each cell showing the letter inserted by the robotic arm. Separate the grids from different datasets with a blank line. Example Input 3 ABCDEFGHI 4 ABCDEFGHIJKLMNOP 0 Output ABC HIF GDE ABCD LMNE KFOE JIHG","solution":"def fill_grid(K, sequence): grid = [[\'\' for _ in range(K)] for _ in range(K)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up x, y = 0, 0 # start at top-left corner dir_index = 0 # start by moving right for i in range(K*K): grid[x][y] = sequence[i] next_x = x + directions[dir_index][0] next_y = y + directions[dir_index][1] if (0 <= next_x < K) and (0 <= next_y < K) and grid[next_x][next_y] == \'\': x, y = next_x, next_y else: dir_index = (dir_index + 1) % 4 # change direction x += directions[dir_index][0] y += directions[dir_index][1] return grid def process_input(input_data): data = input_data.strip().split(\'n\') i = 0 results = [] while i < len(data): K = int(data[i].strip()) if K == 0: break sequence = data[i + 1].strip() grid = fill_grid(K, sequence) results.append(grid) i += 2 return results def format_output(grids): output = [] for grid in grids: for row in grid: output.append(\'\'.join(row)) output.append(\'\') # Separate grids with a blank line return \'n\'.join(output).strip() # Example usage def main(): import sys input_data = sys.stdin.read() grids = process_input(input_data) output = format_output(grids) print(output) if __name__ == \\"__main__\\": main()"},{"question":"Jim is a tech enthusiast who loves playing around with different gadgets. He has recently acquired a new task scheduler that allows him to run tasks sequentially based on their priorities. Each task has a priority value assigned to it and when adding a task, he can also set an optional delay. Jim has a target to process a specific number of tasks in a specific order but needs your help to validate if the scheduler\'s log correctly reflects the operations to achieve this order. The log contains events of the following types: * `ADD` x [d] - means that Jim added a task with priority x and an optional delay d (if delay is not specified, it defaults to 0). * `PROCESS` x - means that the task with priority x was processed. Tasks are always processed in the order of their priorities whenever the optional delay has elapsed. Processed tasks will not appear again in the log. Jim needs to know if it is possible to achieve the processing order specified in the log. Can you help him? Input The first line contains the integer `m` (1 ≤ m ≤ 10^5) representing the number of tasks to be processed. The next `2m` lines contain a series of events as described above. It is guaranteed that there are exactly `m` events of the `ADD` type and each prioritized task from 1 to `m` occurs exactly once in the events of the `PROCESS` type. Output If the log is consistent and the tasks can be processed accordingly, print \\"VALID\\". Otherwise, print \\"INVALID\\". In case of a valid log, on the second line, print the sequence of tasks in the order they were added, as a space-separated list of integers. If multiple valid sequences exist, print any. Examples Input 5 ADD 3 ADD 1 PROCESS 1 ADD 4 2 PROCESS 3 ADD 2 PROCESS 2 ADD 5 1 PROCESS 4 PROCESS 5 Output VALID 3 1 4 2 5 Input 3 PROCESS 1 ADD 1 ADD 2 PROCESS 2 ADD 3 PROCESS 3 Output INVALID Input 4 ADD 2 ADD 3 1 ADD 1 ADD 4 2 PROCESS 2 PROCESS 1 PROCESS 3 PROCESS 4 Output VALID 2 3 1 4 Note In the first example, tasks are added and processed in a manner such that all of them are processed according to their priority after the delay constraints. In the second example, the log reflects an invalid scenario where a task is being processed before it is added. In the third example, despite the delays and addition orders, tasks can be processed correctly by their priorities and delays.","solution":"import heapq def validate_task_log(m, events): add_ops = [] process_ops = set() for event in events: words = event.split() if words[0] == \\"ADD\\": priority = int(words[1]) delay = int(words[2]) if len(words) == 3 else 0 heapq.heappush(add_ops, (delay, priority)) elif words[0] == \\"PROCESS\\": priority = int(words[1]) if not process_ops: # If no task has been added yet return \\"INVALID\\" if priority not in process_ops: # If the task to be processed is not in the tasks to be processed return \\"INVALID\\" process_ops.remove(priority) if add_ops: # All tasks with elapsed delay should be added to process_ops while add_ops and add_ops[0][0] == 0: _, task = heapq.heappop(add_ops) process_ops.add(task) # Decrease delay for tasks still in the queue add_ops = [(delay-1, task) for delay, task in add_ops] heapq.heapify(add_ops) if not add_ops and not process_ops: return \\"VALID\\" else: return \\"INVALID\\" def main(): import sys input = sys.stdin.read data = input().splitlines() m = int(data[0]) events = data[1:] validation_result = validate_task_log(m, events) print(validation_result) if validation_result == \\"VALID\\": added_tasks = [int(event.split()[1]) for event in events if event.startswith(\\"ADD\\")] print(\\" \\".join(map(str, added_tasks))) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers, you are required to find the subarray (contiguous elements) that has the maximum sum and print its sum. Additionally, if there are multiple subarrays with the same maximum sum, you should return the first one (i.e., the one that starts with the smallest index). # Input format - The input consists of a single line containing multiple integers separated by spaces, representing the elements of the array. # Output format - Print a single integer representing the largest sum of the contiguous subarray. # Constraints - Each element of the array will be an integer in the range [-10^4, 10^4]. - The array will have at least 1 element and at most 10^5 elements. # Examples Example 1: Input: ``` 1 -3 2 1 -1 ``` Output: ``` 3 ``` Explanation: The subarray with the maximum sum is `[2, 1]` which sums up to `3`. Example 2: Input: ``` -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The subarray with the maximum sum is `[4, -1, 2, 1]` which sums up to `6`. Example 3: Input: ``` -1 -2 -3 -4 ``` Output: ``` -1 ``` Explanation: The subarray with the maximum sum is `[-1]` which sums up to `-1`. # Notes - Consider using Kadane\'s Algorithm for achieving an optimal solution with O(n) time complexity. - If there are multiple subarrays with the same maximum sum, return the one with the smallest start index from the input.","solution":"def max_subarray_sum(nums): Finds the subarray with the maximum sum and returns its sum. if len(nums) == 0: raise ValueError(\\"Input array cannot be empty\\") max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers representing the heights of buildings aligned in a row, your task is to find the largest rectangle that can be formed from the buildings\' heights. Each building has a width of 1. The heights are given in the form of an array `heights` where `heights[i]` represents the height of the `i-th` building. Constraints: * 1 ≤ heights.length ≤ 1000 * 0 ≤ heights[i] ≤ 10^4 Input The input consists of one line containing the space-separated integers indicating the heights of the buildings. Output Print a single integer representing the area of the largest rectangle that can be formed within the bounds of the given buildings. Example Input 2 1 5 6 2 3 Output 10 Explanation From the heights array, the largest rectangle can be formed using the heights `5` and `6` (at indices 2 and 3), yielding an area of 2 * 5 = 10.","solution":"def largestRectangleArea(heights): Calculate the area of the largest rectangle in the histogram. :param heights: List[int], a list of integers representing the heights of the buildings. :return: int, the area of the largest rectangle. # Stack to store the indices of heights array stack = [] max_area = 0 index = 0 while index < len(heights): # If this building is higher than the building on the top of the stack or stack is empty if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] stack as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate the area with each popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are a programmer tasked with helping to optimize the storage system for a data center. In the data center, multiple servers store data in a grid format. Each server\'s storage grid can be represented as an `n x m` 2D grid. Each cell in the grid has a unique non-negative integer value representing the amount of data stored. You need to transform the server data grids to ensure they all follow the same pattern relative to their data distribution. Specifically, you must determine whether for each pair of servers, one server\'s grid can be transformed into the other by shifting the rows and columns any number of times cyclically. Given two servers `A` and `B` with their respective storage grids, find out if it\'s possible to transform the grid of server A into the grid of server B by cyclically shifting rows and columns. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — representing the number of rows and columns in each server\'s storage grid. - The next `n` lines contain `m` non-negative integers each, representing Server A\'s storage grid. - The following `n` lines contain `m` non-negative integers each, representing Server B\'s storage grid. # Output Print \\"YES\\" if it is possible to transform Server A\'s grid into Server B\'s grid by cyclically shifting rows and columns any number of times, otherwise print \\"NO\\". # Examples Input ``` 3 3 1 2 3 4 5 6 7 8 9 5 6 4 8 9 7 2 3 1 ``` Output ``` YES ``` Input ``` 2 2 1 2 3 4 2 1 3 5 ``` Output ``` NO ``` # Note In the first example, you can transform Server A\'s grid into Server B\'s grid by first rotating the rows as follows: - Shift the first row one step to the right: [3, 1, 2] - Shift the second row one step to the left: [5, 6, 4] - Shift the third row one step to the right: [9, 7, 8] Then, circular shift the columns: - Shift the first column one step down: [5, 8, 3], [1, 9, 7], [4, 2, 6] - Shift the second column one step down: [7, 5, 8], [8, 6, 3], [2, 9, 1] - Shift the third column one step up: [3, 1, 2], [4, 5, 6], [9, 7, 8] In the second example, no matter how you try to shift the rows or columns of Server A\'s grid, you cannot match Server B\'s grid due to the distinct values present.","solution":"def can_transform(gridA, gridB, n, m): def generate_all_shifts(grid): shifts = set() for row_shift in range(n): for col_shift in range(m): shifted_grid = [] for i in range(n): shifted_row = [] for j in range(m): shifted_row.append(grid[(i + row_shift) % n][(j + col_shift) % m]) shifted_grid.append(tuple(shifted_row)) shifts.add(tuple(shifted_grid)) return shifts gridA_shifts = generate_all_shifts(gridA) gridB_shifts = generate_all_shifts(gridB) return \\"YES\\" if gridA_shifts & gridB_shifts else \\"NO\\" def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) gridA = [] gridB = [] index = 2 for _ in range(n): gridA.append([int(data[index + j]) for j in range(m)]) index += m for _ in range(n): gridB.append([int(data[index + j]) for j in range(m)]) index += m return gridA, gridB, n, m if __name__ == \\"__main__\\": gridA, gridB, n, m = read_input() print(can_transform(gridA, gridB, n, m))"},{"question":"# Given a string s, return the length of the longest substring without repeating characters. You are given a single string `s`. You need to find the length of the longest substring without any repeating characters. For example, given: - Input: \\"examplestring\\" - Output: 8 Here are some additional examples to guide you: **Examples** **Input:** \\"abcabcbb\\" **Output:** 3 Explanation: The answer is \\"abc\\", with the length of 3. **Input:** \\"bbbbb\\" **Output:** 1 Explanation: The answer is \\"b\\", with the length of 1. **Input:** \\"pwwkew\\" **Output:** 3 Explanation: The answer is \\"wke\\", with the length of 3. **Note:** - Your solution should have a time complexity of O(n), where n is the length of the input string `s`. - The input string can contain both uppercase and lowercase English letters, digits, and special characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"Write a function `largestUniqueSubstring` that takes a string as input and returns the length of the longest substring with all unique characters. The function should be optimized to handle long strings efficiently. **Function Signature:** ```python def largestUniqueSubstring(s: str) -> int: ``` **Input:** - A single string `s` containing lowercase alphabetical characters, with a length up to 10^5. **Output:** - An integer representing the length of the longest substring with all unique characters. **Example:** ```plaintext Input: \\"abcabcbb\\" Output: 3 Explanation: The longest substring with all unique characters is \\"abc\\", which has a length of 3. ``` ```plaintext Input: \\"bbbbb\\" Output: 1 Explanation: The longest substring with all unique characters is \\"b\\", which has a length of 1. ``` ```plaintext Input: \\"pwwkew\\" Output: 3 Explanation: The longest substring with all unique characters is \\"wke\\", which has a length of 3. ``` **Constraints:** - The input string `s` contains only lowercase alphabetical characters. - The length of the input string `s` will not exceed 100,000 characters. **Function Skeleton:** ```python def largestUniqueSubstring(s: str) -> int: # Your implementation here pass ```","solution":"def largestUniqueSubstring(s: str) -> int: Returns the length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(char_index[s[end]] + 1, start) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a program that helps you to verify if your Sudoku solution is correct. A Sudoku puzzle consists of a 9x9 grid, divided into nine 3x3 subgrids. The objective is to fill the grid with numbers from 1 to 9 so that each row, each column, and each 3x3 subgrid contains all nine digits. Your task is to write a program that checks whether a given Sudoku solution is valid or not. The input will be a completed Sudoku grid represented as a 2D list. Input: The input starts with an integer T, the number of Sudoku grids to validate. Each Sudoku grid is represented over 9 lines, with each line containing 9 integers separated by a space. Output: For each grid, output \\"Valid\\" if the Sudoku solution is correct, otherwise output \\"Invalid\\". Example: Input: 2 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Output: Valid Invalid Explanation: For the first grid, all rows, columns, and subgrids contain every number from 1 to 9 exactly once. Hence, it is a valid Sudoku solution. For the second grid, the Sudoku solution is repeated twice which makes it invalid according to the rules of the game.","solution":"def is_valid_sudoku(grid): def is_valid_block(block): return sorted(block) == list(range(1, 10)) def get_column(grid, col_idx): return [grid[row_idx][col_idx] for row_idx in range(9)] def get_subgrid(grid, start_row, start_col): return [grid[r][c] for r in range(start_row, start_row + 3) for c in range(start_col, start_col + 3)] for i in range(9): if not is_valid_block(grid[i]): # Check rows return \\"Invalid\\" if not is_valid_block(get_column(grid, i)): # Check columns return \\"Invalid\\" for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_block(get_subgrid(grid, i, j)): # Check subgrids return \\"Invalid\\" return \\"Valid\\" def sudoku_validator(T, grids): results = [] for grid in grids: results.append(is_valid_sudoku(grid)) return results"},{"question":"The kingdom of Algoria is under attack by neighboring King Ulrich. The Algorian army needs to fortify its defenses quickly. They have n fortresses, each with a certain number of soldiers s. King Ulrich plans to launch m attacks, each targeting a specific fortress and having a certain strength p. The strength of an attack is defined as the number of soldiers required to repel it. Each attack will succeed if the number of soldiers in the targeted fortress is less than the attack strength. After each attack, whether successful or not, the number of soldiers in the fortress will be reduced by the strength of the attack (if unsuccessful, the fortress\' soldier count becomes zero). The Algorian command needs to know the outcome of each attack and the remaining number of soldiers in each fortress after all the attacks. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5), the number of fortresses and the number of attacks, respectively. The second line contains n integers s (0 ≤ s ≤ 10^9), the number of soldiers in each fortress. The next m lines contain two integers f and p (1 ≤ f ≤ n, 0 ≤ p ≤ 10^9), the index of the fortress and the strength of the attack, respectively. Output For each attack, print \\"Success\\" if the attack succeeds, otherwise print \\"Failed\\". After all the attacks, print n integers, the remaining number of soldiers in each fortress in the same order as the fortresses are given in the input. Example Input 3 4 10 20 30 1 5 2 25 3 15 1 5 Output Failed Success Failed Failed 0 0 15 Explanation The first attack targets fortress 1 with strength 5. The current number of soldiers there is 10, which is more than the attack strength. Hence, the attack fails and the number of soldiers in fortress 1 becomes 10 - 5 = 5. The second attack targets fortress 2 with strength 25. The current number of soldiers there is 20, which is less than the attack strength. Hence, the attack succeeds and the number of soldiers in fortress 2 becomes 0. The third attack targets fortress 3 with strength 15. The current number of soldiers there is 30, which is more than the attack strength. Hence, the attack fails and the number of soldiers in fortress 3 becomes 30 - 15 = 15. The fourth attack targets fortress 1 again, now with strength 5. The current number of soldiers there is 5, which is equal to the attack strength. Hence, the attack fails and the number of soldiers in fortress 1 becomes 5 - 5 = 0.","solution":"def fortify_defenses(n, m, soldiers, attacks): result = [] for attack in attacks: f, p = attack if soldiers[f-1] < p: result.append(\\"Success\\") soldiers[f-1] = 0 else: result.append(\\"Failed\\") soldiers[f-1] -= p return result, soldiers # Example usage n = 3 m = 4 soldiers = [10, 20, 30] attacks = [(1, 5), (2, 25), (3, 15), (1, 5)] output = fortify_defenses(n, m, soldiers, attacks) for res in output[0]: # Print results of each attack print(res) print(\\" \\".join(map(str, output[1]))) # Print remaining soldiers in each fortress"},{"question":"Snowplow Problem During winter, a city with a grid-system of streets is planning how to effectively clear snow from the roads. The city is organized as an MxN grid where each cell represents a 1x1 block with a certain amount of snow (measured in units). The roads in the city are horizontal or vertical lines along the grid. The city can deploy one or more snowplows on any road. Each snowplow can move vertically or horizontally along its designated road and clear the snow on that road. The task is to determine the minimum number of snowplows needed to clear all the snow in the city if each snowplow can clear an entire row or column once deployed. Input: The input consists of several test cases. Each test case starts with two integers M and N (1 ≤ M, N ≤ 50), representing the number of rows and columns, respectively. The next M lines each contain N integers, representing the amount of snow (in units) in each block of the grid (0 ≤ snow_units ≤ 10). The input ends with a line containing two zeros. Output: For each test case, print the minimum number of snowplows needed to clear the snow from all the streets in the grid. Example: Input: 3 4 1 0 2 3 0 0 0 0 2 1 3 0 2 2 0 1 2 0 0 0 Output: 2 2 Explanation: In the first test case (3x4 grid), a minimum of 2 snowplows are needed. In the second test case (2x2 grid), a minimum of 2 snowplows are needed.","solution":"def min_snowplows_needed(grids): results = [] for grid in grids: M, N = grid[\'dimensions\'] grid_data = grid[\'data\'] # Determine minimum number of snowplows needed min_plows = 0 for row in grid_data: if any(snow > 0 for snow in row): min_plows += 1 results.append(min_plows) return results def parse_input(input_data): idx = 0 grids = [] while idx < len(input_data): M, N = map(int, input_data[idx].split()) if M == 0 and N == 0: break grid_data = [] for i in range(1, M + 1): row = list(map(int, input_data[idx + i].split())) grid_data.append(row) grids.append({\'dimensions\': (M, N), \'data\': grid_data}) idx += (M + 1) return grids def main(input_data): grids = parse_input(input_data) results = min_snowplows_needed(grids) return results # Example usage: input_data = [ \\"3 4\\", \\"1 0 2 3\\", \\"0 0 0 0\\", \\"2 1 3 0\\", \\"2 2\\", \\"0 1\\", \\"2 0\\", \\"0 0\\" ] results = main(input_data) for result in results: print(result)"},{"question":"Implement a function `find_invalid_parentheses(s: str) -> List[str]` that takes a string `s` containing only parentheses characters \'(\' and \')\' and returns all the possible results from removing the minimum number of invalid parentheses in order to make the input string valid. The output should be in the form of a list of strings in lexicographical order. **Note**: Consider an empty string as a valid input. # Function Signature ```python def find_invalid_parentheses(s: str) -> List[str]: pass ``` # Input - A string `s` containing only \'(\' and \')\' # Output - A list of strings containing valid parentheses combinations # Example ```python assert find_invalid_parentheses(\\"()())()\\") == [\\"(())()\\", \\"()()()\\"] assert find_invalid_parentheses(\\"(a)())()\\") == [\\"(a())()\\", \\"(a)()()\\"] assert find_invalid_parentheses(\\")(\\") == [\\"\\"] ``` # Constraints - The length of the input string `s` will be at most 20.","solution":"from typing import List def find_invalid_parentheses(s: str) -> List[str]: def is_valid(string: str) -> bool: count = 0 for char in string: if char == \'(\': count += 1 elif char == \')\': count -= 1 if count < 0: return False return count == 0 def bfs(s: str) -> List[str]: from collections import deque queue = deque([s]) visited = set([s]) found = False valid_expressions = [] while queue: current_str = queue.popleft() if is_valid(current_str): valid_expressions.append(current_str) found = True if found: continue for i in range(len(current_str)): if current_str[i] not in \\"()\\": continue next_str = current_str[:i] + current_str[i+1:] if next_str not in visited: visited.add(next_str) queue.append(next_str) return valid_expressions valid_expressions = bfs(s) valid_expressions.sort() return valid_expressions"},{"question":"Anek loves playing with numbers and challenging himself with mathematical puzzles. One day, he stumbled upon an interesting problem on a billboard and decided to solve it. The problem was as follows: Given a positive integer n, determine the sum of the squares of the digits of n, then keep doing the same with the resulting number. If at any point the result becomes 1, then n is called a \\"Happy Number\\". Anek needs your help to determine if a given number n is a Happy Number. Write a function to check if a given number is a Happy Number. Input Input contains a single positive integer n (1 ≤ n ≤ 10000). Output Output 1 if the number is a Happy Number. Otherwise, output 0. Examples Input 19 Output 1 Input 4 Output 0","solution":"def is_happy_number(n): def sum_of_squares(num): return sum(int(digit)**2 for digit in str(num)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = sum_of_squares(n) return 1 if n == 1 else 0"},{"question":"You\'ve been hired as a software engineer at a toy-making company, and your first task is to design an interactive game for a toy robot. The robot is placed on an infinite 2D grid at coordinates (0, 0) facing north. It can receive a sequence of commands to move, turn left, or turn right. # Commands - `G` (go): Move forward one unit in the direction it is currently facing. - `L` (left): Turn 90 degrees to the left without moving. - `R` (right): Turn 90 degrees to the right without moving. The robot continues moving and turning based on the commands given in the sequence. Your task is to write a function that determines if the robot is bound in a circle or not. A robot is considered to be bounded in a circle if, after executing the sequence of commands forever, it never leaves the vicinity of its starting point. # Direction - North: `(0, 1)` - East: `(1, 0)` - South: `(0, -1)` - West: `(-1, 0)` # Input A single string `commands` representing the sequence of commands the robot will follow. The string length does not exceed 10000 characters. # Output Return `True` if the robot is bound in a circle, otherwise return `False`. # Examples Example 1 **Input**: ``` \\"GL\\" ``` **Output**: ``` True ``` **Explanation**: The robot moves in the following steps: 1. `G`: Go to `(0, 1)` (facing north) 2. `L`: Change direction to west `(facing west)` The robot\'s position repeatedly returns to `(0, 0)` making it bound in a circle. Example 2 **Input**: ``` \\"GG\\" ``` **Output**: ``` False ``` **Explanation**: The robot moves in the following steps: 1. `G`: Go to `(0, 1)` (facing north) 2. `G`: Go to `(0, 2)` (facing north) The robot keeps moving north and will never return to the origin. # Constraints - `1 <= commands.length <= 10000` - The commands string consists only of characters \\"G\\", \\"L\\", and \\"R\\".","solution":"def is_robot_bounded(commands): Determine if the robot is bounded in a circle. # Possible directions (North, East, South, West) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initial position and direction x, y = 0, 0 direction = 0 # Start facing North for command in commands: if command == \'G\': x += directions[direction][0] y += directions[direction][1] elif command == \'L\': direction = (direction - 1) % 4 elif command == \'R\': direction = (direction + 1) % 4 # The robot is in a circle if it returns to the original position (0, 0) # or it does not face North at the end of the sequence. return (x == 0 and y == 0) or direction != 0"},{"question":"A library has decided to digitize its collection of books. Each book has a unique ID and a certain number of copies available. The library wants to create a system to manage the borrowing and returning of books. You are tasked with writing a program that allows the library to handle borrowing and returning operations efficiently. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of operations. - Each of the next `n` lines contains a string `operation` and an integer `book_id`. # Output - For each \\"borrow\\" operation, if the book is available, print \\"Borrowed successfully\\". If the book is not available, print \\"Book not available\\". - For each \\"return\\" operation, always print \\"Returned successfully\\". # Example ```input 6 borrow 1 borrow 1 return 1 borrow 2 return 2 borrow 1 ``` ```output Borrowed successfully Book not available Returned successfully Borrowed successfully Returned successfully Borrowed successfully ``` # Note - Initially, assume that each book-id has only one copy available. - Books that are borrowed are not available until they are returned. - If a borrowed book is attempted to be borrowed again before it is returned, it is considered \\"not available\\". Write a program to simulate the above operations and generate the appropriate output for each operation.","solution":"def library_system(n, operations): book_status = {} result = [] for operation, book_id in operations: if operation == \\"borrow\\": if book_status.get(book_id, True): book_status[book_id] = False result.append(\\"Borrowed successfully\\") else: result.append(\\"Book not available\\") elif operation == \\"return\\": book_status[book_id] = True result.append(\\"Returned successfully\\") return result"},{"question":"You are given an integer n. Your task is to create an array a of length n such that the sum of any two distinct elements in the array is not prime. If there are multiple such arrays, print any one of them. If no such array exists, print -1. Input The input consists of a single integer n (1 ≤ n ≤ 1000) – the length of the array you need to generate. Output If it is possible to create such an array, print n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) – the elements of the array. If there are multiple possible solutions, print any one of them. If it is not possible to create such an array, print -1. Examples Input 4 Output 1 1 1 1 Input 5 Output 6 10 14 15 21 Note For the first example, all elements are the same, so the sum of any two distinct elements will be 2, which is prime. Hence, the output is all ones. For the second example, let\'s verify: - The sum of 6 and 10 is 16 (not prime) - The sum of 6 and 14 is 20 (not prime) - The sum of 6 and 15 is 21 (not prime) - The sum of 6 and 21 is 27 (not prime) - The sum of 10 and 14 is 24 (not prime) - The sum of 10 and 15 is 25 (not prime) - The sum of 10 and 21 is 31 (prime, but there are other valid combinations) - The sum of 14 and 15 is 29 (prime, but there are other valid combinations) - The sum of 14 and 21 is 35 (not prime) - The sum of 15 and 21 is 36 (not prime) Hence, it is a valid output.","solution":"def generate_array(n): Given an integer n, generate an array of length n such that the sum of any two distinct elements in the array is not prime. If no such array exists, return -1. # Array with a single element: any element will suffice since no two distinct elements exist. if n == 1: return [4] # Generate an array where all elements are n+1 # Since n+1 + n+1 = 2*(n+1) and any even number > 2 is not prime return [n + 1] * n"},{"question":"You are tasked with implementing a text editor that contains functionality to find the length of the longest substring containing only vowels from a given string. Vowels are defined as the characters \'a\', \'e\', \'i\', \'o\', and \'u\'. To complete this task, you need to write a function that takes a single string as input and returns the length of the longest substring that consists solely of vowels. The function should be able to handle an input string with a length of up to 100,000 characters. # Input - A single line containing a string `s` consisting of lowercase English letters. # Output - A single integer representing the length of the longest substring containing only vowels. # Examples Input ``` earthproblem ``` Output ``` 2 ``` Input ``` letsgooutside ``` Output ``` 3 ``` Input ``` beautifulexample ``` Output ``` 3 ``` # Constraints - The input string will contain only lowercase English letters. - The input string will have a length between 1 and 100,000. Your task is to ensure the function efficiently identifies and computes the length of the longest substring of vowels in a given string. The function should have a linear time complexity to handle the upper limit of input size effectively.","solution":"def longest_vowel_substring(s): Returns the length of the longest substring containing only vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"There is a kingdom with N cities and M roads connecting these cities. Each road has a unique certain length. The king wants to ensure that it is possible to travel between any two cities, and to do so, he needs to add some of the roads to a Royal Road Network. The requirement for the Royal Road Network is that the sum of the lengths of the roads included in this network should be as small as possible, while still making sure that all cities are connected. You are asked to help the king by providing a program to determine the minimum possible total length of the Royal Road Network (i.e., to find the length of the Minimum Spanning Tree of the graph). Input The input consists of multiple datasets. Each dataset is described below: N M u1 v1 w1 ... uM vM wM The first line of each dataset contains two integers N and M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 50000), which represent the number of cities and the number of roads, respectively. The following M lines describe the M roads. The i-th line contains three integers ui, vi (1 ≤ ui, vi ≤ N) and wi (1 ≤ wi ≤ 10000). These indicate there is a road connecting city ui and city vi with length wi. There are no self-loops or multiple edges between any pair of cities. The input is terminated by a line with two zeros. This line should not be processed. Output For each dataset, print the minimum total length of the royal road network on a new line. Example Input 4 5 1 2 5 2 3 3 1 3 2 3 4 4 2 4 6 0 0 Output 9","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 def kruskal(N, roads): roads.sort(key=lambda x: x[2]) uf = UnionFind(N) mst_weight = 0 mst_edges = 0 for u, v, w in roads: if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += w mst_edges += 1 if mst_edges == N - 1: break return mst_weight def minimum_road_network_lengths(datasets): results = [] for N, M, roads in datasets: result = kruskal(N, roads) results.append(result) return results"},{"question":"You\'re given an integer array `arr` consisting of distinct integers. Using this array, your task is to generate the smallest possible permutation of `arr` such that it forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers where the difference between consecutive terms is constant. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. **Output:** - Print `n` space-separated integers — the smallest permutation of the array `arr` that forms an arithmetic sequence. **Example:** Input: ``` 5 3 8 1 6 10 ``` Output: ``` 1 3 5 7 9 ``` Input: ``` 4 2 4 6 8 ``` Output: ``` 2 4 6 8 ``` **Explanation:** In the first example: - The input array is `[3, 8, 1, 6, 10]`. - Sorting the array gives `[1, 3, 6, 8, 10]`. - The common difference that forms an arithmetic sequence from the smallest integer can be calculated. In this case, the smallest permutation with the common difference will be `[1, 3, 5, 7, 9]`, which is the desired output. In the second example: - The input array is `[2, 4, 6, 8]` which is already an arithmetic sequence with a common difference of `2`, hence it remains `[2, 4, 6, 8]`.","solution":"def smallest_arithmetic_sequence(n, arr): Returns the smallest permutation of the array arr that forms an arithmetic sequence. arr.sort() d = (arr[-1] - arr[0]) // (n - 1) # Construct the arithmetic sequence arithmetic_sequence = [arr[0] + i * d for i in range(n)] return arithmetic_sequence"},{"question":"A store has a daily promotional offer where every Kth customer gets a discount coupon. The store wants to inform customers how many more need to enter before the next person receives a coupon. Write a program that calculates the number of customers left before the next discount coupon is given. Constraints * All values in input are integers. * 1 ≤ K ≤ 100 * 1 ≤ N ≤ 1000 Input The input consists of two space-separated integers K and N, where: - K is the customer frequency to receive a discount coupon. - N is the current number of customers that have entered the store. Output Print the number of customers that need to enter before the next discount coupon is given. Examples Input 5 3 Output 2 Input 4 6 Output 2 Input 9 9 Output 9","solution":"def customers_until_next_coupon(K, N): Returns the number of customers that need to enter before the next discount coupon is given. Parameters: K (int): The customer frequency to receive a discount coupon. N (int): The current number of customers that have entered the store. Returns: int: Number of customers that need to enter before the next discount coupon. return K - (N % K)"},{"question":"You are provided with a string containing a mixture of uppercase letters, lowercase letters, digits, and special characters. Your task is to process the string and output a new string that satisfies the following conditions: 1. Remove all digits from the string. 2. Replace every uppercase letter with a corresponding lowercase letter. 3. Replace every special character with an underscore `_`. 4. Retain the order of the characters as they appear in the original string. Write a program that reads a single string from the input, processes it according to the above conditions, and outputs the resulting string. Input: - A single string `s` (1 ≤ length of s ≤ 1000) Output: - A single string that meets the specified conditions. Example: Input: ``` HelloWorld!123 ``` Output: ``` helloworld!___ ``` Explanation: 1. Digits \\"123\\" are removed. 2. Uppercase letters \\"H\\" and \\"W\\" are replaced with \\"h\\" and \\"w\\". 3. Special character \\"!\\" remains unchanged (since only digits are to be removed). 4. The output string is \\"helloworld!___\\".","solution":"def process_string(s: str) -> str: Process the input string according to the specified conditions: 1. Remove all digits. 2. Convert uppercase letters to lowercase. 3. Replace special characters with underscore \'_\'. Maintain the order of characters as in the original string. processed = [] for char in s: if char.isdigit(): continue elif char.isalpha(): processed.append(char.lower()) else: processed.append(\'_\') return \'\'.join(processed)"},{"question":"Mario has a large rectangular field of size N x M that he wants to fill with flower beds. Each flower bed is a square of size B x B, and Mario wants to maximize the number of flower beds that he can fit in the field such that no two flower beds overlap. Given the dimensions of the field and the size of the square flower bed, write a program to calculate the maximum number of flower beds that can be placed in the field. Input The input consists of multiple datasets. The end of the input is indicated by a line containing two zeros. Each dataset consists of a single line in the following format: N M B Where: - N (1 ≤ N ≤ 10^9) is the length of the field. - M (1 ≤ M ≤ 10^9) is the width of the field. - B (1 ≤ B ≤ 10^9) is the side length of the square flower bed. Output For each dataset, output a single line containing the maximum number of square flower beds that can be placed in the field without overlapping. Example Input 10 15 3 7 8 2 0 0 0 Output 15 12 Explanation In the first dataset, a 10x15 field with square flower beds of size 3x3: - The number of flower beds that fit in the length is `10 // 3 = 3`. - The number of flower beds that fit in the width is `15 // 3 = 5`. So the total number of flower beds is `3 * 5 = 15`. In the second dataset, a 7x8 field with square flower beds of size 2x2: - The number of flower beds that fit in the length is `7 // 2 = 3`. - The number of flower beds that fit in the width is `8 // 2 = 4`. So the total number of flower beds is `3 * 4 = 12`.","solution":"def max_flower_beds(field_configurations): Calculate the maximum number of square flower beds that can be placed in the field without overlapping. Parameters: field_configurations (List[Tuple[int, int, int]]): List of tuples where each tuple contains: N (int): Length of the field. M (int): Width of the field. B (int): Side length of the square flower bed. Returns: List[int]: List of integers where each integer is the maximum number of flower beds for the corresponding input. results = [] for N, M, B in field_configurations: if N == 0 and M == 0 and B == 0: break beds_in_length = N // B beds_in_width = M // B total_beds = beds_in_length * beds_in_width results.append(total_beds) return results # Example usage: # inputs = [ # (10, 15, 3), # (7, 8, 2), # (0, 0, 0) # ] # print(max_flower_beds(inputs)) # Output: [15, 12]"},{"question":"You are given an array of n positive integers. You have to perform a specific operation exactly k times. In each operation, select two indices i and j (1 ≤ i, j ≤ n, i ≠ j) and replace a[i] with a[i] + a[j]. Your task is to determine the maximum possible value of the array element at index x (1 ≤ x ≤ n) after exactly k operations. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^5) — the number of elements in the array and the number of operations respectively. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 10^9) — the elements of the array. The third line contains a single integer x (1 ≤ x ≤ n) — the index of the element whose maximum possible value you need to determine. Output Print the maximum possible value of the array element at index x after exactly k operations. Example Input 5 3 1 2 3 4 5 3 Output 15 Note For the given input, you can perform the following operations: 1. Add a[3] = 3 + a[5] = 5 resulting in a[3] = 8. 2. Add a[3] = 8 + a[4] = 4 resulting in a[3] = 12. 3. Add a[3] = 12 + a[4] = 4 again resulting in a[3] = 16. Thus, the maximum possible value of the array element at index 3 after 3 operations is 16.","solution":"def max_value_after_operations(n, k, array, x): array[x-1] += k * max(array) return array[x-1]"},{"question":"Alice and Bob are participating in a coding contest. During the contest, they are faced with an interesting challenge involving arrays and the XOR operation. They are given an array of n integers a_1, a_2, ..., a_n and an integer k. The task is to find how many ways there are to choose a subarray (a contiguous portion of the array) whose XOR of all elements is equal to k. Recall that the XOR operation for two integers x and y, denoted as x ^ y, is the bitwise XOR. The XOR of a subarray (a_i, a_i+1, ... a_j) is defined as a_i ^ a_i+1 ^ ... ^ a_j. The input will consist of multiple test cases. For each test case, output the number of valid subarrays. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100000) and k (0 ≤ k ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9). Output For each test case, print the number of subarrays whose XOR is equal to k. Example Input 2 5 4 4 2 2 6 4 4 0 8 1 2 2 Output 4 1","solution":"def count_xor_subarrays(test_cases): results = [] for testcase in test_cases: n, k = testcase[0] arr = testcase[1] count = 0 prefix_xor = 0 xor_count = {} xor_count[0] = 1 # To handle cases where prefix XOR itself is k for num in arr: prefix_xor ^= num desired_xor = prefix_xor ^ k if desired_xor in xor_count: count += xor_count[desired_xor] if prefix_xor in xor_count: xor_count[prefix_xor] += 1 else: xor_count[prefix_xor] = 1 results.append(count) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine whether it is possible to partition the nodes of this graph into two sets such that there are no edges within each set, only between the sets. If it is possible, print \\"Yes\\" and one possible way of partitioning the nodes. Otherwise, print \\"No\\". Input: - The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the number of nodes and the number of edges. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the endpoints of an edge. It\'s guaranteed that there are no multiple edges between any pair of vertices. Output: - If it is possible to partition the nodes into two sets satisfying the conditions, print \\"Yes\\" on the first line. On the second line, print a string of length n where the i-th character is \'A\' if the i-th vertex is in the first set, and \'B\' if the i-th vertex is in the second set. - If it is not possible, print \\"No\\". Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: Yes ABAB Input: 3 3 1 2 2 3 3 1 Output: No Note: In the first example, the nodes can be partitioned into sets {1, 3} and {2, 4} or any other valid bipartition. In the second example, it is not possible to partition the nodes in such a way, as the graph contains an odd cycle.","solution":"from collections import deque def is_bipartite(n, m, edges): # Step 1: Build adjacency list adjacency_list = [[] for _ in range(n+1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) colors = [-1] * (n + 1) # Initialize all nodes with no color def bfs(start_node): queue = deque([start_node]) colors[start_node] = 0 # Start coloring with color 0 (A) while queue: node = queue.popleft() current_color = colors[node] next_color = 1 - current_color # Alternate color for neighbor in adjacency_list[node]: if colors[neighbor] == -1: # Not colored yet colors[neighbor] = next_color queue.append(neighbor) elif colors[neighbor] == current_color: return False return True for node in range(1, n + 1): if colors[node] == -1: # Node not visited yet if not bfs(node): return \\"No\\" partitioning = \'\'.join(\'A\' if colors[i] == 0 else \'B\' for i in range(1, n + 1)) return f\\"Yesn{partitioning}\\""},{"question":"You are given a directed graph with `n` vertices and `m` edges. Each vertex is labeled from 1 to n. The task is to determine the shortest path from a source vertex s to a target vertex t using the given constraints. Constraints: - If there exists a direct edge from vertex u to vertex v, you can move from u to v in one step. - If there is no direct edge from vertex u to vertex v, you are allowed to reverse at most one edge in the whole graph to make the movement possible. Your task is to find the minimum number of steps required to reach the target vertex t from the source vertex s under the given constraints. Input The first line contains three integers n, m, and s, and t (2 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ s, t ≤ n), where n is the number of vertices, m is the number of directed edges, s is the source vertex, and t is the target vertex. The next m lines contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a directed edge from vertex u to vertex v. Output Output one integer — the minimum number of steps required to reach the target vertex t from the source vertex s, or -1 if it is not possible to reach the target. Examples Input 5 5 1 5 1 2 2 3 3 4 4 5 2 5 Output 2 Input 4 2 1 4 1 2 3 4 Output -1","solution":"from collections import deque, defaultdict def shortest_path_with_one_reverse(n, m, s, t, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) if s == t: return 0 queue = deque([(s, 0, False)]) visited = set() visited_with_reversal = set() while queue: node, steps, reversed_used = queue.popleft() if node == t: return steps if not reversed_used: for u, v in edges: if v == node and (u, True) not in visited_with_reversal: visited_with_reversal.add((u, True)) queue.append((u, steps + 1, True)) for neighbor in graph[node]: if (neighbor, reversed_used) not in visited: visited.add((neighbor, reversed_used)) queue.append((neighbor, steps + 1, reversed_used)) return -1"},{"question":"You are given a series of commands that represent a simple text editor. The editor supports the following commands: 1. `APPEND <string>`: Append the given string to the end of the current text. 2. `DELETE <count>`: Delete the last `count` characters from the current text. If `count` is greater than the current text length, delete all the characters. 3. `COPY <start> <length>`: Copy the substring of the given length starting from the character at position `start` (0-based). Store this substring in the clipboard. 4. `PASTE`: Append the currently stored clipboard contents to the end of the current text. Your task is to implement a text editor that processes a series of these commands and then outputs the final text. Input The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) denoting the number of commands. The next `n` lines are the commands, one on each line. Strings consist of uppercase English letters, numbers and spaces. Commands are guaranteed to be valid. Output Output a single line containing the final text after executing all commands. Examples Input 5 APPEND Hello APPEND World COPY 0 5 PASTE APPEND ! Output HelloWorldHello! Input 4 APPEND Code COPY 0 4 DELETE 4 PASTE Output Code Explanation of Examples: In the first example, the series of operations modifies the text as follows: 1. `APPEND Hello` -> \\"Hello\\" 2. `APPEND World` -> \\"HelloWorld\\" 3. `COPY 0 5` (copies \\"Hello\\" to clipboard) 4. `PASTE` -> \\"HelloWorldHello\\" 5. `APPEND !` -> \\"HelloWorldHello!\\" In the second example: 1. `APPEND Code` -> \\"Code\\" 2. `COPY 0 4` (copies \\"Code\\" to clipboard) 3. `DELETE 4` -> \\"\\" 4. `PASTE` -> \\"Code\\"","solution":"def text_editor(n, commands): text = \\"\\" clipboard = \\"\\" for command in commands: parts = command.split() action = parts[0] if action == \\"APPEND\\": text += command[7:] # APPEND <string>, so skip 7 characters to get <string> elif action == \\"DELETE\\": count = int(parts[1]) text = text[:-count] if count <= len(text) else \\"\\" elif action == \\"COPY\\": start = int(parts[1]) length = int(parts[2]) clipboard = text[start:start + length] elif action == \\"PASTE\\": text += clipboard return text"},{"question":"In a small town, there is a popular restaurant that sells n types of pastries. Each type of pastry has a certain popularity score assigned to it. Due to limited resources, the owner of the restaurant wants to promote exactly k different types of pastries that have the highest total popularity score. You are asked by the owner to determine which k types of pastries to promote to achieve the highest possible total popularity score. If there are multiple ways to choose, any one of them will be considered correct. Input The first line contains the integers n and k (1 ≤ k ≤ n ≤ 100) — the number of different types of pastries and the number of types to be promoted. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 10^6) — the popularity scores of each type of pastry. Output In the only line print the maximum possible total popularity score that can be achieved by promoting exactly k types of pastries. Examples Input 5 3 5 3 9 7 6 Output 22 Input 4 2 1 8 3 5 Output 13 Input 6 4 4 11 2 3 14 8 Output 37 Note In the first example, by choosing the pastries with popularity scores 9, 7, and 6, the total popularity score will be 22. In the second example, by choosing the pastries with popularity scores 8 and 5, the total popularity score will be 13. In the third example, by choosing the pastries with popularity scores 14, 11, 8, and 4, the total popularity score will be 37.","solution":"def max_popularity_score(n, k, scores): Returns the maximum possible total popularity score by promoting exactly k types of pastries. # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Take the top k scores and sum them up return sum(sorted_scores[:k])"},{"question":"A popular online game involves collecting special gems from different locations. Each gem has a specific color represented by a character: \'R\' for red, \'B\' for blue, \'G\' for green, and \'Y\' for yellow. The player\'s goal is to collect a set of gems such that all chosen gems can be grouped into pairs of the same color. You are given an integer N and a string S consisting of N characters describing the colors of the gems the player has collected. Determine whether the gems can be grouped into pairs based on their color. If it is possible to group all the gems into pairs, print `Yes`. Otherwise, print `No`. Constraints * 1 leq N leq 100 * S consists of characters \'R\', \'B\', \'G\', and \'Y\'. Input Input is given from Standard Input in the following format: N S Output Print `Yes` if it is possible to group all the gems into pairs based on their color. Otherwise, print `No`. Examples Input 6 RGBRGB Output Yes Input 5 RRGBG Output No Input 8 RRGGBBYY Output Yes","solution":"def can_be_grouped_into_pairs(N, S): Returns \'Yes\' if the gems can be grouped into pairs of the same color, otherwise \'No\'. from collections import Counter # Count the frequency of each color color_count = Counter(S) # Check if all counts are even for count in color_count.values(): if count % 2 != 0: return \'No\' return \'Yes\'"},{"question":"You are given an array of n integers. A subarray of this array is defined as a contiguous segment of the array. You are required to determine the sum of all distinct elements for every possible subarray. Finally, output the maximum sum among these distinct sums. Input The first line contains an integer n (1 ≤ n ≤ 3·103), the length of the array. The second line contains n integers a0, a1, ..., an-1 (-109 ≤ ai ≤ 109), separated by a space. Output Print a single integer: the maximum sum of distinct elements among all possible subarrays. Examples Input 4 2 1 2 3 Output 6 Input 5 5 5 5 5 5 Output 5 Input 6 -1 2 -1 3 2 -1 Output 5 Note In the first example, the subarray [2, 1, 2, 3] has the maximum sum of distinct elements: 2 + 1 + 3 = 6. In the second example, all subarrays will have the same sum of distinct elements, which is 5. In the third example, the subarray with the maximum sum of distinct elements is [-1, 2, -1, 3], which gives the sum of -1 + 2 + 3 = 4. The subarray [2, -1, 3, 2] also gives the sum of 4. The subarray [2, 3] gives the sum of 5. Hence, the maximum sum of distinct elements is 5.","solution":"def max_sum_distinct_subarray(arr): n = len(arr) max_sum = float(\'-inf\') for i in range(n): seen = set() current_sum = 0 for j in range(i, n): if arr[j] not in seen: seen.add(arr[j]) current_sum += arr[j] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"An insect crawling on a number line needs to move from point 0 to point n. However, the insect can only move in certain patterns. Each time the insect can either move by \'a\' units or by \'b\' units. If the insect moves past point n, it will turn back to zero and start its journey over again. The insect continues repeating this process until it lands exactly on point n. Your task is to determine the minimum number of moves the insect needs to make to land exactly on point n. Input The input consists of a single line containing three space-separated integers: - n: the destination point (1 ≤ n ≤ 100,000) - a: the first step size (1 ≤ a ≤ 1,000) - b: the second step size (1 ≤ b ≤ 1,000) Output Output a single integer: the minimum number of moves needed to land exactly on point n. If it is not possible, return -1. Examples Input ``` 10 3 5 ``` Output ``` 2 ``` Input ``` 7 4 6 ``` Output ``` -1 ``` Input ``` 12 5 7 ``` Output ``` 2 ``` Note In the first example, the insect can reach the point 10 by moving two steps of size 5. In the second example, it is not possible for the insect to reach point 7 with steps of size 4 and 6. In the third example, one possible way for the insect to reach point 12 is by moving one step of size 5 and one step of size 7.","solution":"def min_moves_to_reach(n, a, b): Determine the minimum number of moves needed to land exactly on point n. If it is not possible, return -1. from math import gcd gcd_ab = gcd(a, b) if n % gcd_ab != 0: return -1 min_moves = float(\'inf\') for x in range((n // a) + 1): if (n - (x * a)) % b == 0: y = (n - (x * a)) // b min_moves = min(min_moves, x + y) return min_moves if min_moves != float(\'inf\') else -1"},{"question":"You are given a list of n employees, where each employee is represented by a tuple containing an integer \'age\' and a string \'role\'. An activity is considered team-building if a group of employees at least have one \'Manager\'. The productivity of a team is defined as the sum of ages of all the employees in the team. Your task is to find the maximum productivity a team-building activity can have given the employees. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees. - Each of the following n lines contains an integer age (1 ≤ age ≤ 100) and a string role, which can be either \'Manager\' or \'Worker\'. Each tuple represents an employee. Output: - Print a single integer — the maximum productivity of the team-building activity. Examples Input: 5 25 Manager 35 Worker 30 Manager 40 Worker 50 Worker Output: 180 Input: 4 40 Worker 50 Worker 30 Worker 20 Worker Output: 0 Input: 3 60 Manager 45 Manager 55 Worker Output: 160 Note: In the first example, a team with all employees would be the most productive since it includes at least one \'Manager\', achieving a total productivity of 25 + 35 + 30 + 40 + 50 = 180. In the second example, no team-building activity is possible because none of the employees are \'Managers\'. In the third example, the most productive team includes all employees (60 + 45 + 55 = 160) as there are multiple \'Managers\' present.","solution":"def max_productivity(n, employees): Calculates the maximum productivity of a team-building activity. Parameters: n (int): Number of employees employees (list of tuples): List where each tuple contains the age of an employee and their role Returns: int: Maximum productivity if there is at least one Manager, otherwise 0 total_age = 0 has_manager = False for age, role in employees: total_age += age if role == \'Manager\': has_manager = True if has_manager: return total_age else: return 0"},{"question":"A large organization is undergoing a restructuring of their internal teams. Each team consists of a hierarchy of employees, each having a unique ID and potentially multiple subordinates who report to them. The organization’s structure is such that every employee, except the CEO, has exactly one manager they report to. You are tasked to determine the maximum depth (distance from the CEO) of this hierarchical structure. The input will provide pairs of employee IDs, where the first ID in each pair is the manager, and the second ID is the subordinate. The employee with no manager is identified as the CEO. The depth of the CEO is considered as 1. Write a function `team_depth(pairs: List[Tuple[int, int]]) -> int` that takes a list of pairs `pairs` representing the hierarchical relationships and returns the maximum depth of the hierarchy, counting from the CEO. # Input - `pairs`: A list of tuples of integers where each tuple represents a (manager, subordinate) relationship. Employee IDs are positive integers. # Output - An integer representing the maximum depth of the hierarchy. # Example Input ``` pairs = [ (1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7), (4, 8), (5, 9) ] ``` Output ``` 4 ``` # Note The hierarchy for the provided example is: ``` 1 (CEO) / 2 3 / / 4 5 6 7 / 8 9 ``` The maximum depth from the CEO (employee 1) to the furthest employee (8 or 9) is 4.","solution":"from typing import List, Tuple, Dict def team_depth(pairs: List[Tuple[int, int]]) -> int: from collections import defaultdict, deque # Create a dictionary to store the hierarchy hierarchy = defaultdict(list) all_subordinates = set() for manager, subordinate in pairs: hierarchy[manager].append(subordinate) all_subordinates.add(subordinate) # Find the CEO (the one who is not anyone\'s subordinate) ceo = None for manager in hierarchy.keys(): if manager not in all_subordinates: ceo = manager break if ceo is None: return 0 # Perform a BFS to determine the maximum depth max_depth = 0 queue = deque([(ceo, 1)]) # (employee, current depth) while queue: current, depth = queue.popleft() max_depth = max(max_depth, depth) for subordinate in hierarchy[current]: queue.append((subordinate, depth + 1)) return max_depth"},{"question":"Sam loves solving puzzles, and he got a special lockbox. The lockbox consists of a long row of lockers, numbered from 1 to n from left to right. Initially, all the lockers are closed. Sam can perform two types of operations on the lockers: 1. Toggle the state (open/close) of all lockers with numbers between l and r (both inclusive). 2. Count the number of open lockers between l and r (both inclusive). Help Sam manage the lockbox. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 10^5), which represent the number of lockers and the number of operations respectively. Each of the next m lines begins with integer type (1 ≤ type ≤ 2), which represents the type of operation. If type = 1, there will be two more integers l and r (1 ≤ l ≤ r ≤ n) in this line, describing an operation of type 1. If type = 2, there will be two more integers l and r (1 ≤ l ≤ r ≤ n) in this line, describing an operation of type 2. Output For each operation of type 2, print a line containing the answer — the count of open lockers. Example Input 5 6 1 1 3 2 2 4 1 2 4 2 1 5 1 1 5 2 1 5 Output 2 2 3 Note In the first sample, initially all lockers are closed: [0, 0, 0, 0, 0] (where 0 represents a closed locker and 1 represents an open locker). After the first operation, the lockers state changes to [1, 1, 1, 0, 0]. The second operation asks for the number of open lockers between 2 and 4, which is 2. After the third operation, the lockers state changes to [1, 0, 0, 1, 0]. The fourth operation asks for the number of open lockers between 1 and 5, which is 2. After the fifth operation, the lockers state changes to [0, 1, 1, 0, 1]. The final operation asks for the number of open lockers between 1 and 5, which is 3.","solution":"def manage_lockers(n, m, operations): lockers = [0] * n # Initially, all lockers are closed (represented by 0) results = [] for operation in operations: type_op, l, r = operation l -= 1 # Convert to 0-based index r -= 1 # Convert to 0-based index if type_op == 1: # Toggle the state of lockers from l to r (inclusive) for i in range(l, r + 1): lockers[i] = 1 - lockers[i] # Toggle the state (0 becomes 1 and 1 becomes 0) elif type_op == 2: # Count the number of open lockers between l and r (inclusive) result = sum(lockers[l:r + 1]) results.append(result) return results"},{"question":"In a small town, there is a grid structured as an n x m matrix, representing a town map. Some cells in the grid represent houses, and others represent roads (empty cells). Due to some planned construction work, you need to ensure that certain conditions are met for the roads in the town. Specifically, you need to make sure that: - All road cells are reachable from any other road cell. - Any road cell must be part of exactly one simple path within the town. You can achieve this by changing some of the house cells into road cells, but you cannot change an existing road cell into a house cell. Your task is to provide a way to transform the town map accordingly. # Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The descriptions of the test cases follow. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - Each of the next n lines contains m characters. Each character is either \'.\' (representing a road) or \'#\' (representing a house). # Output For each test case, print n lines. Each should contain m characters, representing one row of the grid. Each character should either be \'.\' or \'#\', representing a road or a house, respectively. If there are multiple answers, you can print any. It is guaranteed that the answer always exists. # Example Input ``` 2 3 4 .#.. #. #. 5 5 ..# .#.#. .#..# ..... # ``` Output ``` .... .... .... ...... ....# ....# .#... # ``` # Note In the first test case, one possible solution is to convert all houses to roads to ensure that all roads are reachable from any other road and there are no cycles. In the second test case, roads can be made into a connected component satisfying the given conditions by judiciously selecting a few houses to convert to roads, for example: ``` ...... ..# . ....# . ``` This ensures that each road cell is part of a single path and all roads are connected.","solution":"def transform_town_map(t, test_cases): results = [] for n, m, grid in test_cases: new_grid = [] for i in range(n): new_grid.append([\'.\']*m) results.append(new_grid) return results"},{"question":"You are given a list of employee records. Each record contains the employee\'s name, age, and salary separated by spaces. Implement a program that reads the records and calculates the average salary of employees who are older than a given age. Input The first line contains an integer n, the number of employee records (1 ≤ n ≤ 100). Each of the next n lines contains a single employee record in the format \\"Name Age Salary\\", where Name is a string of alphabetic characters, Age is an integer (1 ≤ Age ≤ 100), and Salary is a positive integer. The last line contains an integer k, the age threshold (1 ≤ k ≤ 100). Output Output the average salary (rounded to the nearest integer) of employees who are older than k. If no employee is older than k, output 0. Example Input 3 Alice 30 60000 Bob 25 50000 Carol 35 70000 30 Output 70000","solution":"def calculate_average_salary(records, age_threshold): Calculate the average salary of employees who are older than a given age threshold. total_salary = 0 count = 0 for record in records: name, age, salary = record.split() age = int(age) salary = int(salary) if age > age_threshold: total_salary += salary count += 1 if count == 0: return 0 return round(total_salary / count)"},{"question":"A network of computers is represented as an undirected graph with n nodes and m edges. Each node is uniquely identified by an integer from 1 to n. Write a program to determine the minimum number of computers that need to be infected initially to ensure that all computers in the network become infected given that if a computer is infected, it can directly infect all its connected neighbors in one step. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105), representing the number of nodes and edges in the network, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between the nodes u and v. Output Print a single integer, the minimum number of initially infected computers required to ensure all computers in the network become infected. Examples Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 1 Input 7 4 1 2 2 3 4 5 6 7 Output 3 Note In the first sample, infecting computer 1 will eventually infect all computers because the network is fully connected. In the second sample, at least 3 computers need to be initially infected (one in each connected component).","solution":"def find_connected_components(n, connections): from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for node in range(1, n + 1): if not visited[node]: components += 1 bfs(node) return components def min_initial_infected(n, connections): return find_connected_components(n, connections) # Example usage n = 7 connections = [(1, 2), (2, 3), (4, 5), (6, 7)] print(min_initial_infected(n, connections)) # Output: 3"},{"question":"A company is organizing a team-building activity where employees are paired to form teams. Each employee has a particular skill level that can be represented as an integer. The goal is to form teams such that the total difference in skill levels between all pairs is minimized. To create a fair matching, the company decides to use a specific strategy: each team will consist of exactly two employees, and an employee can be part of only one team. The difference in skill levels between any two employees in a team is the absolute value of the difference of their skill levels. The task is to form teams such that the sum of these absolute differences is minimized. Input The first line of the input contains integer n (2 ≤ n ≤ 5000), indicating the total number of employees. The second line contains n integers representing the skill levels of the employees. The skill levels are guaranteed to be distinct. Output Print a single integer, the minimum total difference in skill levels across all pairs formed. Example 1 Input 4 1 2 3 4 Output 2 Example 2 Input 6 10 20 30 40 50 60 Output 30 Example 3 Input 2 5 9 Output 4 Explanation In the first example, if the teams are formed as (1, 2) and (3, 4), the total difference is |1-2| + |3-4| = 1 + 1 = 2. In the second example, the optimal pairing is (10, 20), (30, 40), (50, 60), making the total difference |10-20| + |30-40| + |50-60| = 10 + 10 + 10 = 30. In the third example, there\'s only one possible team with the total difference |5-9| = 4.","solution":"def minimum_total_difference(n, skill_levels): Returns the minimum total difference in skill levels across all pairs formed. :param n: The total number of employees :param skill_levels: List of integers representing skill levels of employees :return: Minimum total difference of skill levels # Sort the skill levels to ensure we can pair the closest skill levels skill_levels.sort() # Initialize the minimum total difference total_difference = 0 # Pair the employees in pairs of two, closest skill levels together for i in range(0, n, 2): total_difference += abs(skill_levels[i] - skill_levels[i+1]) return total_difference"},{"question":"Given an n x n grid where some cells contain obstacles and some cells are empty, you need to determine the number of unique paths from the top-left corner of the grid to the bottom-right corner. The robot can move either right or down at any point in time but cannot move to a cell containing an obstacle. **Input**: - The first line of the input contains a single integer n (1 ≤ n ≤ 100), representing the size of the grid. - The next n lines each contain n integers (0 or 1) separated by spaces. A cell containing 0 represents an empty cell, and a cell containing 1 represents an obstacle. **Output**: - Output a single integer representing the number of unique paths from the top-left cell to the bottom-right cell. If there is no such path, output 0. **Example**: **Input**: ``` 3 0 0 0 0 1 0 0 0 0 ``` **Output**: ``` 2 ``` **Explanation**: - There are 2 unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"Given two non-negative integers N and S, your task is to output a list of integers of length N such that the sum of the integers is exactly S. If it is not possible to create such a list, output an empty list. Constraints - 0 leq N leq 100 - 0 leq S leq 1000 Input The input consists of two integers N and S, separated by a space. Output Output a list of N non-negative integers whose sum is S, or an empty list if no such list exists. Examples Input 5 15 Output [3, 3, 3, 3, 3] Input 4 8 Output [2, 2, 2, 2] Input 1 0 Output [0] Input 3 2 Output [] Input 0 5 Output []","solution":"def create_list_with_sum(N, S): Returns a list of N non-negative integers that sum up to S. If it is not possible to create such a list, return an empty list. if S == 0: return [0] * N if N > 0 else [] if S < N or (N == 0 and S > 0): return [] # Base value for each element in the list base_value = S // N remainder = S % N result = [base_value] * N # Distribute the remainder for i in range(remainder): result[i] += 1 return result"},{"question":"You are given a list of integers representing the heights of a series of buildings. You need to determine the maximum number of buildings that can be painted given the following constraints: - You can\'t paint two consecutive buildings. - Each building has a height, and taller buildings require more paint. The amount of paint required to paint a building is equal to its height. Write a function to find the maximum height sum of non-consecutive buildings that can be painted. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing an integer n (1 ≤ n ≤ 3000) — the number of buildings. The next line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings. The sum of n for all test cases in one test does not exceed 3000. Output For each test case, output one integer — the maximum height sum of non-consecutive buildings that can be painted. Example Input 3 5 3 2 5 10 7 3 3 2 7 4 4 1 1 4 Output 15 10 8 Explanation For the first test case, the optimal solution is to paint buildings with heights 3, 5, and 7. For the second test case, the optimal solution is to paint buildings with heights 3 and 7. For the third test case, the optimal solution is to paint buildings with heights 4 and 4.","solution":"def max_non_consecutive_sum(heights): if not heights: return 0 n = len(heights) if n == 1: return heights[0] dp = [0] * n dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + heights[i]) return dp[-1] def max_heights_sum(t, test_cases): results = [] for case in test_cases: n, heights = case results.append(max_non_consecutive_sum(heights)) return results"},{"question":"You have a list of n positive integers, and you need to partition this list into two non-empty parts. Each part must have at least one integer. The main goal is to minimize the absolute difference between the sums of the two parts. Write a program that achieves this. Input The first line of the input file contains the integer n (2 ≤ n ≤ 1000), representing the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10000), which are the integers in the list. Output Print a single number — the minimum possible absolute difference between the sums of the two parts. Examples Input 4 2 3 4 5 Output 0 Input 3 1 2 4 Output 1 Input 5 1 1 1 1 6 Output 2 Note In the first example, you can partition the list into {2, 4} and {3, 5}, giving a sum difference of 0. In the second example, the partition {1, 2} and {4} should result in the absolute difference of 1, which is the minimum possible. In the third example, the best partition is {1, 1, 1, 1} and {6}, which results in the minimum possible absolute difference of 2.","solution":"def min_partition_difference(n, arr): from itertools import combinations total_sum = sum(arr) min_diff = float(\'inf\') # We only need to check partition sizes from 1 to n//2 to avoid redundant calculations. for i in range(1, n // 2 + 1): for subset in combinations(arr, i): subset_sum = sum(subset) # Calculate the absolute difference diff = abs((total_sum - subset_sum) - subset_sum) if diff < min_diff: min_diff = diff return min_diff # Example usage: # n = 4 # arr = [2, 3, 4, 5] # print(min_partition_difference(n, arr)) # Output: 0"},{"question":"A group of delivery drones needs to deliver packages to various destinations. Each drone has a limited battery capacity and a fixed rate of battery consumption per kilometer. Given the initial battery charge of the drone, its consumption rate, and a list of destinations it must reach, determine the minimum number of stops to recharge along the way to ensure all deliveries are made. Recharging can only be done at certain positions which are also provided in the input. **Input:** The input is a sequence of datasets. Each dataset is formatted as follows: d c k x1 y1 f1 x2 y2 f2 ... xd yd fd r p1 q1 p2 q2 ... pr qr The first line of a dataset contains three integers: - d: number of destinations - c: initial battery charge in percentage (0 <= c <= 100) - k: battery consumption rate per kilometer The following d lines each contain three integers x, y, and f. (x, y) represents the coordinates of a destination, and f represents the amount of battery required for delivery at that destination. The next line contains an integer r representing the number of recharging stations. The following r lines each contain two integers p and q representing the coordinates of the recharging stations. You can assume the battery can be fully recharged at these stations. The dataset is terminated by a line containing three zeros. The number of datasets does not exceed 100. **Output:** For each dataset, output a single line containing the minimum number of recharges needed to ensure all deliveries are completed. If it is not possible to complete all deliveries, output -1. **Example:** Input ``` 3 50 1 10 10 20 20 5 30 15 15 10 2 5 5 25 10 2 100 2 10 20 30 30 40 50 1 20 10 0 0 0 ``` Output ``` 1 -1 ``` In this problem, you need to compute the minimum number of recharges required for each dataset while calculating the battery consumption as the drone travels to each destination and recharge station. You need to ensure that the drone can reach each destination with sufficient battery, considering deliveries\' required battery, and utilize the nearest recharge stations effectively.","solution":"from math import sqrt from collections import deque def distance(x1, y1, x2, y2): return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_recharges(d, c, k, destinations, recharge_stations): initial_battery = c current_position = (0, 0) current_battery = initial_battery recharges = 0 destinations = deque(sorted(destinations, key=lambda dest: sqrt(dest[0]**2 + dest[1]**2))) while destinations: x, y, f = destinations.popleft() travel_distance = distance(current_position[0], current_position[1], x, y) required_battery = travel_distance * k + f if required_battery > 100: # If it\'s impossible to complete the mission even with a full charge. return -1 if current_battery >= required_battery: # If enough battery to reach and deliver: current_battery -= required_battery current_position = (x, y) else: reachable_stations = sorted([station for station in recharge_stations if distance(current_position[0], current_position[1], station[0], station[1]) * k <= current_battery], key=lambda s: distance(s[0], s[1], x, y)) if not reachable_stations: return -1 nearest_station = reachable_stations[0] recharges += 1 recharge_distance = distance(current_position[0], current_position[1], nearest_station[0], nearest_station[1]) current_battery -= recharge_distance * k current_battery = 100 # Fully recharged current_position = nearest_station destinations.appendleft((x, y, f)) # Put the current destination back to be processed again return recharges"},{"question":"Sarah loves solving puzzles and is quite fond of letter transformation games. She has developed a new transformation rule for changing one string into another. The rule involves a series of operations where in each operation she can change exactly one character of the string to any other character. Given two strings s1 and s2 of the same length n, Sarah wants to convert s1 to s2 in the minimum number of operations using her transformation rule. Your task is to help Sarah by finding this minimum number of operations required. Input The first line contains t (1 ≤ t ≤ 10^5) — the number of test cases. The following 2t lines describe the test cases where the first line of each test case contains the string s1 (1 ≤ |s1| ≤ 10^5) and the second line contains the string s2 of the same length as s1. Output For each test case, print the minimum number of operations required to transform s1 into s2. Example Input 3 abc bcd aaaa bbbb xyz xzz Example Output 3 4 1 Explanation For the first test case, \\"abc\\" transforms to \\"bcd\\" with the following operations: 1. Change \'a\' to \'b\' 2. Change \'b\' to \'c\' 3. Change \'c\' to \'d\' For the second test case, \\"aaaa\\" transforms to \\"bbbb\\" with the following operations: 1. Change the first \'a\' to \'b\' 2. Change the second \'a\' to \'b\' 3. Change the third \'a\' to \'b\' 4. Change the fourth \'a\' to \'b\' For the third test case, \\"xyz\\" transforms to \\"xzz\\" with the following operations: 1. Change \'y\' to \'z\'","solution":"def min_operations_to_transform(t, test_cases): This function computes the minimum number of operations required to transform string s1 into s2. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains two strings (s1, s2) of the same length. Returns: list: A list containing the minimum number of operations required for each test case. results = [] for i in range(t): s1, s2 = test_cases[i] operations = sum(1 for a, b in zip(s1, s2) if a != b) results.append(operations) return results"},{"question":"A company needs an efficient algorithm to manage their conference room bookings. The conference room can be booked for meetings throughout the day, and each meeting has a start time and end time. You are to determine the maximum number of non-overlapping meetings that can be held in the conference room in a single day. Each meeting i is defined by its start time `si` and end time `ei` (with `si` < `ei`). Two meetings can be scheduled consecutively if the end time of the first meeting is less than or equal to the start time of the second meeting. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of meetings. Each of the following n lines contains two integers `si` and `ei` (0 ≤ `si` < `ei` ≤ 10^9) — the start and end times of the ith meeting. Output Output a single integer — the maximum number of non-overlapping meetings that can be scheduled in the conference room. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Note In the first example, the optimal schedule would include meetings (1,3) and (3,5), as meeting (2,4) overlaps with both of the others. In the second example, all meetings can be scheduled consecutively without overlapping.","solution":"def max_non_overlapping_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be held in the conference room. Parameters: n (int): the number of meetings meetings (list of tuple): list of tuples where each tuple contains two integers si and ei - start and end times of ith meeting Returns: int: maximum number of non-overlapping meetings # Sort the meetings by end time meetings.sort(key=lambda x: x[1]) max_count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"Julia loves creating new shapes using her computer. She has recently become interested in determining if a given sequence of characters can form a valid shape for her new designs. A shape is considered valid if it forms a palindrome subsequence. A string is called a palindrome if it reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Your task is to help Julia write a program that checks if it\'s possible to select a non-empty subsequence of characters from the given sequence to form a palindrome. Input The input consists of a single line containing a non-empty string s of length no greater than 104. The string s consists of only lowercase Latin letters. Output Print \\"YES\\" if there exists a non-empty subsequence of the string that is a palindrome. Otherwise, print \\"NO\\". Examples Input abcba Output YES Input abcd Output NO Note In the first example, the entire string \\"abcba\\" is a palindrome, so the output is \\"YES\\". In the second example, there is no non-empty subsequence of \\"abcd\\" that can form a palindrome, so the output is \\"NO\\".","solution":"def can_form_palindrome(s): Returns \\"YES\\" if there exists a non-empty subsequence of the string `s` that can form a palindrome. Otherwise, returns \\"NO\\". from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Check the number of characters with odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given an array of N integers, you need to find the minimum number of steps required to sort the array in non-decreasing order by performing the following operation any number of times: 1. You are allowed to choose any subarray (contiguous part of the array) and reverse it. Input The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers, denoting the elements of the array. Output Output a single integer representing the minimum number of steps required to sort the array. Constraints 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^9 Example Input: 5 3 1 2 4 5 Output: 1 Explanation Example case: By reversing the subarray (3, 1, 2) to get (2, 1, 3), the array becomes sorted.","solution":"def minimum_steps_to_sort(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return 0 n = len(arr) # Find the longest sorted (continuous) subarray in arr longest_sorted_len = 1 current_sorted_len = 1 for i in range(1, n): if arr[i] >= arr[i - 1]: current_sorted_len += 1 else: if current_sorted_len > longest_sorted_len: longest_sorted_len = current_sorted_len current_sorted_len = 1 longest_sorted_len = max(longest_sorted_len, current_sorted_len) # Min steps to sort is 2 if there\'s a portion that\'s not already sorted return 1 if longest_sorted_len < n else 0"},{"question":"The Central Forestry Organization (CFO) is responsible for monitoring wildlife in a protected forest. They have installed numerous sensors throughout the forest to track animal movements. Each sensor records sightings of various animals at different times. For analysis, the CFO needs to determine how frequently certain animals are seen. Your task is to write a program that, given a list of sensor records, returns the frequency of each animal sighted. Each sensor record consists of an entry in the format \\"<animal_name>-<count>\\", where <animal_name> is a string representing the name of the animal (composed of lowercase English letters only) and <count> is an integer representing the number of times this animal was sighted by that sensor. Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of sensor records. The next n lines each contain a record in the format \\"<animal_name>-<count>\\" (1 ≤ <count> ≤ 1,000,000). Output Print each unique animal name and the total sighting count for that animal, sorted by animal name in ascending order. Each output line should be in the format \\"<animal_name> <total_count>\\". Examples Input 5 deer-3 rabbit-2 deer-7 fox-5 rabbit-3 Output deer 10 fox 5 rabbit 5 Input 3 bear-4 tiger-2 bear-6 Output bear 10 tiger 2 Input 4 elephant-1 elephant-2 elephant-3 monkey-4 Output elephant 6 monkey 4 Note In the first sample, the records indicate sightings of \\"deer\\", \\"rabbit\\", and \\"fox\\". The total sightings are \\"deer\\" = 10, \\"rabbit\\" = 5, and \\"fox\\" = 5. In the second sample, the records indicate sightings of \\"bear\\" and \\"tiger\\". The total sightings are \\"bear\\" = 10 and \\"tiger\\" = 2.","solution":"def animal_sightings(n, records): sightings = {} for record in records: animal, count = record.split(\'-\') count = int(count) if animal in sightings: sightings[animal] += count else: sightings[animal] = count sorted_sightings = sorted(sightings.items()) return sorted_sightings"},{"question":"You are given a sequence of integers. Your task is to determine whether it is possible to rearrange the integers in the sequence such that the difference between any two adjacent integers is at most 1. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The following 2 * t lines contain the descriptions of the test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in the sequence. The second line contains n integers separated by spaces, each representing an element of the sequence. Output For each test case, output \\"YES\\" if it is possible to rearrange the sequence such that the difference between any two adjacent integers is at most 1, otherwise output \\"NO\\". Example Input 3 4 1 2 2 3 5 5 4 3 2 1 3 10 1 2 Output YES YES NO Note In the first test case, you can rearrange the sequence as [1, 2, 2, 3] or [2, 1, 2, 3], where the difference between any two adjacent numbers is at most 1. In the second test case, the sequence is already arranged to satisfy the condition, i.e., [5, 4, 3, 2, 1]. In the third test case, there is no way to rearrange the sequence to satisfy the condition since the differences between 10 and the other numbers are too large.","solution":"def can_rearrange(t, test_cases): results = [] for case in test_cases: n, sequence = case sequence.sort() valid = True for i in range(1, n): if sequence[i] - sequence[i - 1] > 1: valid = False break results.append(\\"YES\\" if valid else \\"NO\\") return results def process_input(input_lines): t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) sequence = list(map(int, input_lines[index + 1].split())) test_cases.append((n, sequence)) index += 2 return t, test_cases"},{"question":"A developer is tasked with creating a new feature for an application that deals with celebrity endorsements on social media. Given an array where each element represents the number of endorsements a celebrity has at a certain time, the developer needs to calculate how many times a celebrity\'s endorsement count increases consecutively from one time point to the next. The developer wants to identify the longest streak of increasing endorsements for a celebrity in the array. Write a function longestStreak that takes an array of integers as input and returns an integer representing the length of the longest streak of consecutive increases in endorsements. # Function Signature ```python def longestStreak(endorsements: List[int]) -> int: pass ``` # Input - endorsements: a List of integers representing the number of endorsements, 1 ≤ len(endorsements) ≤ 10^5, 1 ≤ endorsements[i] ≤ 10^9 # Output - Return an integer representing the length of the longest streak of consecutive increases in endorsements. # Example Example 1 ```python endorsements = [2, 3, 7, 9, 3, 1, 4, 5, 6] print(longestStreak(endorsements)) # Output: 4 ``` Explanation: - The longest streak of increasing endorsements is [3, 4, 5, 6], which has a length of 4. Example 2 ```python endorsements = [5, 6, 8, 3, 4, 7, 2] print(longestStreak(endorsements)) # Output: 3 ``` Explanation: - The longest streak of increasing endorsements is [3, 4, 7], which has a length of 3.","solution":"from typing import List def longestStreak(endorsements: List[int]) -> int: if not endorsements: return 0 max_streak = 1 current_streak = 1 for i in range(1, len(endorsements)): if endorsements[i] > endorsements[i - 1]: current_streak += 1 else: if current_streak > max_streak: max_streak = current_streak current_streak = 1 return max(max_streak, current_streak)"},{"question":"A chef is planning to open a new restaurant chain and wants to make sure that the seating capacity of each restaurant meets the local regulations. The seating capacity is determined by various seating areas: tables, booths, and bar stools. Each area has a different seat allocation, and they must all fit within the restaurant\'s given dimensions. You are provided with the dimensions of the restaurant and several seating instructions in sequence. Your task is to calculate the total seating capacity of the restaurant based on the given instructions. In the script, a restaurant is defined using the instruction `Restaurant [name]([width],[height])`. The restaurant\'s width and height are given in meters. The seating areas are defined by: - `Table [name]([number_of_seats])` — create a new seating area [name] of type Table with the specified number of seats. - `Booth [name]([number_of_seats])` — create a new seating area [name] of type Booth with the specified number of seats. - `Stool [name]([number_of_seats])` — create a new seating area [name] of type Stool with the specified number of seats. - `[restaurant_name].add_seating([seating_area_name],[width],[height])` — add the seating area [seating_area_name] to the restaurant [restaurant_name] with the given width and height in square meters. All sizing instructions ensure that every added seating area will fit within the remaining dimensions of the restaurant. Input: The first line contains an integer n — the number of instructions (1 ≤ n ≤ 100). The following n lines contain instructions to define the restaurant and its seating, in the following format: - \\"Restaurant [name]([width],[height])\\" — create a new restaurant with the specified dimensions. - \\"Table [name]([number_of_seats])\\", \\"Booth [name]([number_of_seats])\\", \\"Stool [name]([number_of_seats])\\" — create a new seating area with the specified number of seats. - \\"[restaurant_name].add_seating([seating_area_name],[width],[height])\\" — add the seating area to the restaurant. Output: For each restaurant, print on a single line its name and the number of seats available in the restaurant, separated by a space. The lines must be ordered lexicographically by the restaurant\'s name. Example: Input 7 Restaurant main_dining(20,20) Table t1(4) Booth b1(6) Stool s1(2) main_dining.add_seating(t1,5,5) main_dining.add_seating(b1,5,5) main_dining.add_seating(s1,2,2) Output main_dining 12 In this example, the seating areas `t1`, `b1`, and `s1` are added to the restaurant `main_dining` with respective seating capacities of 4, 6, and 2, making the total seating capacity of the restaurant 12.","solution":"class SeatingArea: def __init__(self, name, number_of_seats): self.name = name self.number_of_seats = number_of_seats class Restaurant: def __init__(self, name, width, height): self.name = name self.width = width self.height = height self.seating_areas = {} self.total_seats = 0 def add_seating(self, seating_area, width, height): if seating_area.name in self.seating_areas: return False self.seating_areas[seating_area.name] = (seating_area, width, height) self.total_seats += seating_area.number_of_seats return True def parse_instruction(instruction): if instruction.startswith(\\"Restaurant\\"): parts = instruction.split() name = parts[1].split(\'(\')[0] dimensions = parts[1].split(\'(\')[1].strip(\')\').split(\',\') width = int(dimensions[0]) height = int(dimensions[1]) return (\\"Restaurant\\", name, width, height) elif instruction.startswith(\\"Table\\") or instruction.startswith(\\"Booth\\") or instruction.startswith(\\"Stool\\"): parts = instruction.split() seating_type = parts[0] name = parts[1].split(\'(\')[0] seats = int(parts[1].split(\'(\')[1].strip(\')\')) return (seating_type, name, seats) else: parts = instruction.split(\'.\') rest_name = parts[0] sub_parts = parts[1].split(\'add_seating(\') seating_name_width_height = sub_parts[1].strip(\')\').split(\',\') seating_name = seating_name_width_height[0] width = int(seating_name_width_height[1]) height = int(seating_name_width_height[2]) return (\\"add_seating\\", rest_name, seating_name, width, height) def seating_capacity(n, instructions): restaurants = {} seating_areas = {} for instruction in instructions: parsed = parse_instruction(instruction) if parsed[0] == \\"Restaurant\\": name, width, height = parsed[1], parsed[2], parsed[3] restaurants[name] = Restaurant(name, width, height) elif parsed[0] in [\\"Table\\", \\"Booth\\", \\"Stool\\"]: seating_type, name, seats = parsed[0], parsed[1], parsed[2] seating_areas[name] = SeatingArea(name, seats) elif parsed[0] == \\"add_seating\\": rest_name, seating_name, width, height = parsed[1], parsed[2], parsed[3], parsed[4] if rest_name in restaurants and seating_name in seating_areas: restaurants[rest_name].add_seating(seating_areas[seating_name], width, height) results = [] for rest_name in sorted(restaurants.keys()): results.append(f\\"{rest_name} {restaurants[rest_name].total_seats}\\") return results"},{"question":"Given a string s, you are allowed to remove at most one character. You need to check if it is possible to make the string a palindrome by removing at most one character. Your function should return a boolean denoting if the string can be converted into a palindrome after removing at most one character. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. # Input - The input is a string s, which consists of lowercase English letters (1 ≤ |s| ≤ 10^5). # Output - You must return a boolean value, `true` if the string can be transformed into a palindrome by removing at most one character, otherwise `false`. # Example ```plaintext Input \\"abca\\" Output true Explanation By removing \'b\' or \'c\' from the string \\"abca\\", we can make it a palindrome, \\"aca\\" or \\"aba\\". Input \\"racecar\\" Output true Explanation The string \\"racecar\\" is already a palindrome, so no need to remove any character. Input \\"abcdef\\" Output false Explanation There\'s no way to make this string a palindrome by removing only one character. ```","solution":"def valid_palindrome(s): Check if the string can be a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if s[i:j+1] is a palindrome return all(s[k] == s[j - k + i] for k in range(i, j)) i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) i += 1 j -= 1 return True"},{"question":"You are responsible for a warehouse management system where goods are stored in a large three-dimensional grid (x, y, z), where 0 ≤ x, y, z ≤ 100. Each cell in the grid can either be empty or contain a single package. The warehouse is managed in such a way that package retrieval is recorded by a sequence of movements from one cell to another. Your task is to verify the sequences of movements provided to you and ensure that they follow the warehouse\'s movement rules. The movements must start from a specified initial cell, should not attempt to move outside the boundaries of the grid, and must ensure that there is a package in the current cell before moving to pick it up. Also, each movement must be logged until the target package is reached. Movements are defined as transitions between adjacent cells along any of the three axes (x, y, z). The movements can only be one step at a time along any axis. You must create a program to check the validity of each movement sequence. Write a function that takes an initial cell, a target cell, and a sequence of movements, and determines if the sequence is valid. A sequence is considered valid if: 1. It starts at the initial cell. 2. Every movement is a step to an adjacent cell. 3. The movements do not leave the grid. 4. The movements must eventually end at the target cell. Input Format: - The grid is represented by an integer 3D array where each element can either be 0 (empty) or 1 (package). - The first line of input represents the dimensions of the grid. - The next line specifies the initial coordinates (ix, iy, iz) and the target coordinates (tx, ty, tz). - The following lines provide a sequence of movements, each line containing three integers (dx, dy, dz) representing the movement along each axis. - Input is terminated by a line containing -1 -1 -1. Output Format: - For each sequence of movements, output \\"VALID\\" or \\"INVALID\\" depending on whether the sequence meets the criteria. Example: ``` Input: 50 50 50 5 5 5 45 45 45 1 0 0 1 0 0 0 1 0 0 0 1 -1 -1 -1 Output: VALID ``` Explanation: - The grid size is 50x50x50. - The initial coordinates are (5, 5, 5). - The target coordinates are (45, 45, 45). - The movement sequence steps from (5, 5, 5) to (6, 5, 5), then to (7, 5, 5), and continues in steps to move towards the target. Each step is to an adjacent cell, all movements remain within the grid boundaries, and eventually the target cell is reached.","solution":"def is_valid_sequence(grid_dimensions, start, target, movements): Determines if the sequence of movements is valid. :param grid_dimensions: A tuple of (x, y, z) dimensions of the grid. :param start: A tuple of (x, y, z) start coordinates. :param target: A tuple of (x, y, z) target coordinates. :param movements: A list of (dx, dy, dz) movements. :return: \\"VALID\\" if the movement sequence is valid, otherwise \\"INVALID\\". x_max, y_max, z_max = grid_dimensions current_position = list(start) for movement in movements: dx, dy, dz = movement current_position[0] += dx current_position[1] += dy current_position[2] += dz # Check if the new position is within the grid boundaries if not (0 <= current_position[0] <= x_max and 0 <= current_position[1] <= y_max and 0 <= current_position[2] <= z_max): return \\"INVALID\\" # Check if the movement is too large (more than 1 step) if abs(dx) > 1 or abs(dy) > 1 or abs(dz) > 1: return \\"INVALID\\" # Ensure the sequence ends at the target position if tuple(current_position) == target: return \\"VALID\\" return \\"INVALID\\" # Example use case (as given in the problem statement) if __name__ == \\"__main__\\": grid_dimensions = (50, 50, 50) start = (5, 5, 5) target = (45, 45, 45) movements = [ (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1) ] print(is_valid_sequence(grid_dimensions, start, target, movements))"},{"question":"You are given an integer n and an array a consisting of n integers. You are allowed to perform the following operation on the array any number of times: - Choose any element a_i from the array (1 ≤ i ≤ n) and replace it with a_i modulo k, where k is a positive integer less than a_i. Your task is to determine the minimum possible maximum value of any element in the array after performing the operations optimally. Input The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5). The second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9). It is guaranteed that the sum of all n in all test cases does not exceed 2 ⋅ 10^5. Output For each test case, output the minimum possible maximum value of any element in the array after performing the operations optimally. Example Input 3 3 2 6 4 4 12 7 15 8 5 5 5 5 5 5 Output 1 1 4","solution":"def min_possible_max_value(n, array): Determines the minimum possible maximum value of any element in the array after performing the operation optimally. max_value = max(array) # We can always make all elements in the array equal to 1. return max_value if max_value == 1 else 1 def process_test_cases(test_cases): results = [] for n, array in test_cases: results.append(min_possible_max_value(n, array)) return results"},{"question":"Given an array of integers, you need to determine the sum of the maximum possible adjacent subarray within it. A subarray is a contiguous part of an array. You must find a non-empty subarray which has the largest sum. Input - The first line contains a single integer n (1 ≤ n ≤ 105), the length of the array. - The second line contains n integers a1, a2, ..., an (-104 ≤ ai ≤ 104), the elements of the array. Output - Output a single integer, the sum of the maximum possible adjacent subarray. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The subarray [4, -1, 2, 1] has the largest sum 6. Note: There could be more than one subarray with the same maximum sum, but you only need to return the sum of one of them. The required time complexity is O(n).","solution":"def max_subarray_sum(arr): Returns the sum of the maximum possible adjacent subarray within the array. Parameters: arr (List[int]): The input array of integers. Returns: int: The sum of the maximum possible adjacent subarray. max_sum = curr_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"Given an infinite chessboard, a knight is placed at the position (0, 0) and you are given a target position (x, y) that the knight wants to reach. The knight can move from its current position (i, j) to any of the positions (i+2, j+1), (i+2, j-1), (i-2, j+1), (i-2, j-1), (i+1, j+2), (i+1, j-2), (i-1, j+2), or (i-1, j-2). Your task is to write a program that calculates the minimum number of moves the knight needs to reach the target position (x, y) from its starting position (0, 0). Input The input consists of a single line containing two integers x and y (−150 ≤ x, y ≤ 150) which denote the coordinates of the target position. Output Output a single integer denoting the minimum number of moves that the knight needs to reach the target position. Example Input 5 5 Output 4 Explanation The knight moves from (0, 0) to (2, 1), then to (4, 2), then to (3, 4), and finally to (5, 5).","solution":"from collections import deque def min_knight_moves(x, y): Calculate the minimum number of moves for a knight to reach the target position (x, y) from the starting position (0, 0) on an infinite chessboard. # Normalize x and y to make use of symmetry x, y = abs(x), abs(y) # Directions in which a knight can move directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] queue = deque([(0, 0, 0)]) # (current_x, current_y, current_depth) visited = set((0, 0)) while queue: cx, cy, depth = queue.popleft() if (cx, cy) == (x, y): return depth for dx, dy in directions: nx, ny = cx + dx, cy + dy if (nx, ny) not in visited and -150 <= nx <= 150 and -150 <= ny <= 150: visited.add((nx, ny)) queue.append((nx, ny, depth + 1))"},{"question":"You are given a string consisting of lowercase Latin characters. You have to determine the number of substrings which start and end with the same character. **Input** The first line contains an integer n (1 ≤ n ≤ 1000) – the length of the string. The second line contains the string of length n, consisting of lowercase Latin characters. **Output** Print a single integer – the number of substrings which start and end with the same character. **Examples** **Input** 4 abca **Output** 5 **Input** 5 aaaaa **Output** 15 **Input** 6 abcdef **Output** 6 **Explanation of examples** In the first example, the valid substrings are a, b, c, and a again, plus aa. That makes 5 valid substrings. In the second example, every possible substring starting and ending with \'a\' is valid, leading to the maximum count of 15. In the third example, each character itself forms a valid substring, hence the number of valid substrings is equal to the length of the string.","solution":"def count_substrings(n, s): Returns the number of substrings which start and end with the same character. :param n: Length of the string :param s: The string consisting of lowercase Latin characters :return: The number of substrings which start and end with the same character count = 0 # Using a frequency array to store occurrences of characters freq = [0] * 26 # Count frequencies of characters in the string for char in s: freq[ord(char) - ord(\'a\')] += 1 # Calculate the number of valid substrings for i in range(26): if freq[i] > 0: count += (freq[i] * (freq[i] + 1)) // 2 return count"},{"question":"Problem You are given an array of integers, and you need to perform a series of operations to find the longest contiguous subarray that forms a valid bracket sequence. The operations involve replacing certain numbers with either an opening bracket `(` or a closing bracket `)`. A valid bracket sequence is defined as: - An empty sequence is valid. - If \\"A\\" is a valid sequence, then \\"(A)\\" is also a valid sequence. - If \\"A\\" and \\"B\\" are both valid sequences, then \\"AB\\" is a valid sequence. You can replace the elements of the array in the following manner: - Replace each number `0` with the opening bracket `(`. - Replace each number `1` with the closing bracket `)`. Your task is to find the length of the longest contiguous subarray that can be transformed into a valid bracket sequence through these replacements. # Constraints - 1 ≤ T ≤ 100 (Number of test cases) - 1 ≤ N ≤ 10^5 (Length of the array) - The array contains only integers 0 and 1. # Input The input consists of multiple test cases. Each test case is provided in the following format: ``` T N a1 a2 a3 ... aN ``` - The first line contains the integer `T`, the number of test cases. - For each test case, the first line contains the integer `N`, the length of the array. - The second line contains `N` integers separated by spaces, representing the array. # Output For each test case, output a single integer, the length of the longest contiguous subarray that can be transformed into a valid bracket sequence. # Example Input ``` 2 6 0 1 0 1 1 0 4 0 1 1 0 ``` Output ``` 4 2 ``` # Explanation **Test Case 1:** For the array `[0, 1, 0, 1, 1, 0]`, the longest contiguous subarray that forms a valid bracket sequence is `[0, 1, 0, 1]` which translates to `(())`. **Test Case 2:** For the array `[0, 1, 1, 0]`, the longest contiguous subarray that forms a valid bracket sequence is `[0, 1]` which translates to `()` or `[1, 0]` which translates to `()`.","solution":"def longest_valid_subarray(arr): Returns the length of the longest contiguous subarray that can be transformed into a valid bracket sequence. max_len = 0 stack = [] last_invalid_index = -1 # To keep track of the last invalid position for i, val in enumerate(arr): if val == 0: # Map 0 to open bracket \'(\' stack.append(i) else: # Map 1 to close bracket \')\' if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - last_invalid_index) else: last_invalid_index = i return max_len def main(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(longest_valid_subarray(arr)) return results"},{"question":"You are given a list of integers representing the heights of different mountains. You are allowed to perform any number of operations to equalize the heights of the mountains. In one operation, you can increase or decrease the height of any mountain by 1 unit. Your goal is to minimize the total number of operations required to make all mountains have the same height. Input The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer N, the number of mountains. The second line contains N space-separated integers Hi, the heights of the mountains. Output For each test case, print a single integer, the minimum number of operations required to make all mountains have the same height on a separate line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Hi ≤ 10^6 Example Input: 2 3 1 2 3 4 5 5 8 8 Output: 2 6","solution":"def min_operations_to_equalize_heights(T, test_cases): Calculate the minimum number of operations required to make all mountains have the same height. :param T: Number of test cases :param test_cases: A list of tuples. Each tuple contains two elements: - an integer N (number of mountains) - a list of integers Hi (heights of the mountains) :return: A list of integers representing the minimum operations for each test case results = [] for case in test_cases: N, heights = case median_height = sorted(heights)[N // 2] operations = sum(abs(h - median_height) for h in heights) results.append(operations) return results # Utility function to read input and format the output for easier testing def process_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, heights)) index += 2 return T, test_cases def process_output(output_list): return \\"n\\".join(map(str, output_list))"},{"question":"Shira works at a logistics company and she has to process data for multiple shipments. Each shipment contains a different number of packages, and each package has a weight. Shira wants to calculate the total weight of the shipments except for the heaviest and the lightest package in each shipment. If a shipment has less than three packages, the weight of that shipment is considered zero. Your task is to write a program to help Shira by calculating the total weights of multiple shipments as described above. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of shipments. Each of the next t lines contains: - An integer n (1 ≤ n ≤ 10^5) — the number of packages in the shipment. - n space-separated integers w_i (1 ≤ w_i ≤ 10^6) — the weights of the packages in the shipment. Output For each shipment, output a single integer — the total weight of the shipment excluding the heaviest and the lightest package. If the shipment has less than three packages, output 0. Example Input 3 5 2 3 9 5 1 3 4 5 6 2 8 9 Output 10 5 0","solution":"def calculate_total_weights(t, shipments): results = [] for shipment in shipments: n, weights = shipment if n < 3: results.append(0) else: total_weight = sum(weights) - max(weights) - min(weights) results.append(total_weight) return results # Example usage: t = 3 shipments = [ (5, [2, 3, 9, 5, 1]), (3, [4, 5, 6]), (2, [8, 9]) ] print(calculate_total_weights(t, shipments)) # Output: [10, 5, 0]"},{"question":"A company needs to assign tasks to its team members in an efficient manner. Each task takes a certain amount of time to complete, and each team member can work for a limited number of hours per day. The goal is to determine the minimum number of days required to complete all tasks given the number of tasks and the hours they take. Input The first line of the input contains an integer T, the number of test cases. For each test case: - The first line contains two space-separated integers N and H, where N is the number of tasks and H is the number of hours each team member can work per day. - The second line contains N space-separated integers denoting the time each task takes in hours. Output For each test case, print the minimum number of days required to complete all tasks, assuming optimal distribution of tasks. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ H ≤ 10^9 1 ≤ Time taken by each task ≤ 10^3 SAMPLE INPUT 2 4 8 2 2 3 7 3 5 4 4 4 SAMPLE OUTPUT 2 3 Explanation Test case #1: One way to distribute tasks is: - Day 1: (2, 2, 3) = 7 hours - Day 2: (7) = 7 hours This requires exactly 2 days. Test case #2: One task can be completed per day in this scenario: - Day 1: (4) = 4 hours - Day 2: (4) = 4 hours - Day 3: (4) = 4 hours This requires exactly 3 days.","solution":"def min_days_to_complete_tasks(T, test_cases): results = [] for i in range(T): N, H = test_cases[i][0] tasks = test_cases[i][1] days = 0 current_day_hours = 0 for task in tasks: if current_day_hours + task <= H: current_day_hours += task else: days += 1 current_day_hours = task days += 1 # Don\'t forget the last batch of tasks if there\'s any results.append(days) return results"},{"question":"You are given a matrix of integers where each cell represents the height of the terrain at that point. The objective is to determine if there exists a path from the top-left corner to the bottom-right corner of the matrix such that we can only move to adjacent cells (up, down, left, or right) and only to cells with equal or lower height than the current cell. Create an algorithm to determine if such a path exists. Input: - The first line consists of two integers `n` and `m`, representing the number of rows and columns in the matrix respectively. - The next `n` lines each contain `m` integers, representing the heights of the cells in the matrix. Output: - Output \\"YES\\" if such a path exists. - Output \\"NO\\" if no such path exists. Example: Input: 3 3 1 2 3 2 3 4 3 4 5 Output: NO Input: 3 3 1 2 1 1 2 1 1 1 1 Output: YES","solution":"def can_reach_bottom_right(n, m, matrix): Determine if a path exists from the top-left to bottom-right of the matrix with the given constraints. from collections import deque def is_valid_move(x, y, prev_height): return 0 <= x < n and 0 <= y < m and not visited[x][y] and matrix[x][y] <= prev_height # Directions for moving: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" visited[x][y] = True current_height = matrix[x][y] for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y, current_height): queue.append((new_x, new_y)) return \\"NO\\""},{"question":"A company has organized a coding competition for its employees. Each participant has a unique id and is assigned a score based on their performance. The competition consists of three rounds, and the final score for each participant is the sum of their scores from all three rounds. You are provided with a list of tuples where each tuple consists of three elements: participant id (a unique integer), score for round 1, and score for round 2. The score for round 3 is not given directly. Instead, you are given the frequency of each score that was obtained by participants in round 3. Your task is to calculate the total score for each participant and output the id of the participant with the highest total score. If there is a tie (i.e., multiple participants have the same highest total score), output the smallest participant id among them. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of participants. The following n lines contain three integers each: participant_id (1 ≤ participant_id ≤ 10^9), score_1 (0 ≤ score_1 ≤ 100), score_2 (0 ≤ score_2 ≤ 100) — the id and scores for round 1 and round 2 respectively. The next line contains an integer m (1 ≤ m ≤ 100) — the number of different scores obtained by participants in round 3. The following m lines contain each two integers k (0 ≤ k ≤ 100) and f (1 ≤ f ≤ 10^5) — denoting that the score k was obtained by f participants. Output Print the id of the participant with the highest total score. If there is a tie, print the smallest id among such participants. Examples Input 5 1 50 40 2 70 30 3 80 20 4 60 25 5 55 35 3 90 2 75 1 60 2 Output 1 Input 3 10 80 90 11 95 85 12 78 88 2 35 1 50 2 Output 11 Note In the first example, the scores for round 3 are distributed such that the total scores for each participant, when all possible combinations are considered, are as follows: - Participant 1: 50 + 40 + 90 = 180 (Second 90 can also be used by Participant 2) - Participant 2: 70 + 30 + 90 = 190 - Participant 3: 80 + 20 + 75 = 175 - Participant 4: 60 + 25 + 75 = 160 - Participant 5: 55 + 35 + 60 = 150 The highest total score is 190 obtained by participant 2. In the second example, total scores for each participant are: - Participant 10: 80 + 90 + 50 = 220 - Participant 11: 95 + 85 + 50 = 230 - Participant 12: 78 + 88 + 35 = 201 Participant 11 has the highest total score of 230.","solution":"def find_top_participant(n, participants, m, round3_scores): from heapq import nlargest # Parse the participants\' data participant_scores = {participant_id: {\'score_1\': score_1, \'score_2\': score_2} for participant_id, score_1, score_2 in participants} # Create a list of all round 3 scores round3_scores_list = [] for score, frequency in round3_scores: round3_scores_list.extend([score] * frequency) # Sort the round 3 scores in descending order to assign the highest scores first round3_scores_list = sorted(round3_scores_list, reverse=True) # Calculate the total scores for each participant participant_total_scores = [] for participant_id, scores in participant_scores.items(): total_score = scores[\'score_1\'] + scores[\'score_2\'] participant_total_scores.append((total_score, participant_id)) # Get the n largest total scores from round 3 highest_scores = nlargest(n, participant_total_scores) # Determine the highest possible total score for each participant for i, (total_score, participant_id) in enumerate(highest_scores): highest_scores[i] = (total_score + round3_scores_list[i], participant_id) # Determine the participant(s) with the highest total score highest_total_score = max(highest_scores)[0] top_participants = [pid for score, pid in highest_scores if score == highest_total_score] # Return the participant id with the smallest id among those with the highest total score return min(top_participants) # Example usage n = 5 participants = [ (1, 50, 40), (2, 70, 30), (3, 80, 20), (4, 60, 25), (5, 55, 35) ] m = 3 round3_scores = [ (90, 2), (75, 1), (60, 2) ] print(find_top_participant(n, participants, m, round3_scores)) # Output: 2"},{"question":"Emily is developing a new encryption algorithm that operates on binary strings. To test her algorithm, she needs to generate specific patterns of binary strings. She defines a “Nested Pattern” of length N as a binary string that starts with exactly K zeros, followed by L ones, and then ends with exactly K zeros. For example, for K = 2 and L = 3, the sequence “0011100” is a valid Nested Pattern of length N = 7. Using her programming skills, Emily wants to determine how many different Nested Patterns she can generate for given integers N, K, and L. Write a program that computes the number of valid Nested Patterns for given values of N, K, and L. As the number of possible patterns can be large, the result should be given modulo 1,000,000,007. Input The input is provided in the following format: N K L The input line provides the length of the sequence N (1 leq N leq 10^5), the number of starting and ending zeros K (0 leq K leq N/2), and the number of ones L (1 leq L leq N - 2K). Output Output the number of valid Nested Patterns on a single line. Examples Input 7 2 3 Output 1 Input 10 3 4 Output 1","solution":"MOD = 1_000_000_007 def count_nested_patterns(N, K, L): Returns the number of valid Nested Patterns of length N with K starting and ending zeros and L ones in the middle. # Validating inputs if K < 0 or L < 1 or N < 1 or K > N // 2 or L > N - 2 * K: return 0 # Calculate the length condition if N == 2 * K + L: return 1 else: return 0"},{"question":"Given a matrix of size M x N consisting of only 0s and 1s, write a program that finds the maximum size square sub-matrix with all 1s and returns its area. # Input: Two integers M and N, representing the dimensions of the matrix. Following M lines contain N space-separated integers, each representing the elements of the matrix. # Output: Output an integer representing the area of the largest square sub-matrix with all 1s. # Constraints: 1 ≤ M, N ≤ 100 Each element of the matrix is either 0 or 1. # Sample Input: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 # Sample Output: 4 # Explanation: The largest square sub-matrix with all 1s has an area of 4 (2x2 matrix). --- # Sample Input: 3 3 0 1 0 1 1 1 0 1 0 # Sample Output: 1 # Explanation: The largest square sub-matrix with all 1s has an area of 1 (1x1 matrix).","solution":"def max_square_submatrix_area(matrix): Finds the maximum size square sub-matrix with all 1s and returns its area. :param matrix: List of List of integers (0s and 1s) :return: Integer representing the area of the largest square sub-matrix with all 1s if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0] * N for _ in range(M)] max_side = 0 # Initialize first row and column of dp table for i in range(M): dp[i][0] = matrix[i][0] max_side = max(max_side, dp[i][0]) for j in range(N): dp[0][j] = matrix[0][j] max_side = max(max_side, dp[0][j]) # Fill the dp table for i in range(1, M): for j in range(1, N): if matrix[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square sub-matrix with all 1s is side^2 return max_side ** 2 def max_square_submatrix_area_from_input(input_string): Converts input string to matrix and computes the area of the largest square sub-matrix with all 1s. :param input_string: The M, N dimensions followed by M space-separated lines representing matrix :return: Integer representing the area of the largest square sub-matrix with all 1s lines = input_string.strip().split(\'n\') M, N = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return max_square_submatrix_area(matrix)"},{"question":"Lara loves reading books, and she has recently found a collection of books. Each book has a certain number of pages, and Lara wants to read them all. However, she doesn\'t want to read all the books in one go and prefers to pace herself. Lara sets a rule that she will read exactly `m` pages per day. Determine the minimum number of days Lara will need to read all the books if she can choose any book to start with and can switch books after finishing one. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of books. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the number of pages in each book. - The third line contains an integer `m` (1 ≤ m ≤ 1000) — the number of pages Lara will read per day. Output: - Print a single integer — the minimum number of days needed to read all books. Example Input: 4 300 400 600 500 300 Output: 6","solution":"def minimum_days_to_read_books(n, book_pages, m): Returns the minimum number of days needed to read all books. Parameters: n (int): The number of books. book_pages (list of int): The number of pages in each book. m (int): The number of pages Lara will read per day. Returns: int: The minimum number of days required to read all books. total_pages = sum(book_pages) days_needed = (total_pages + m - 1) // m # Adjusting the integer division result to account for any remainder pages return days_needed"},{"question":"To enhance the performance of his online store, Alex wants to analyze the purchasing patterns of his customers. He recently started a campaign to collect customer purchase records, which consist of the items that each customer bought. Alex needs to find out the number of unique items bought by each customer to tailor personalized offerings. Input: First line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of customers. The following N lines contain customer purchase records, where each purchase record is a space-separated string of item names bought by a single customer. Output: For each test case, output N lines. For each customer, output the number of unique items they bought. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ length of each item\'s name ≤ 20 1 ≤ number of items in each purchase record ≤ 100 SAMPLE INPUT 1 3 apple orange apple banana carrot potato carrot banana apple orange SAMPLE OUTPUT 3 2 3","solution":"def count_unique_items(test_cases): results = [] for test in test_cases: N, customers = test result = [] for customer in customers: unique_items = set(customer.split()) result.append(len(unique_items)) results.append(result) return results"},{"question":"In a certain video game, players can collect magic stones that come in various colors. Each magic stone has a specific power value, and players can create power amulets by combining a set of these stones. Each amulet has exactly K magic stones in it, and the power value of an amulet is the sum of the power values of its constituent stones. However, players also have a set of special rules they must follow when creating amulets: 1. An amulet must contain exactly one stone of each color. 2. Each color has a specified number of stones available, and each stone of the same color has the same power value. Given the number of available magic stones for each color, the power values for each stone color, and the requirement that an amulet must contain one stone of each color, determine how many distinct power values the amulets can have. Input The first line contains two integers, C and K (1 ≤ C ≤ 10, 1 ≤ K ≤ 109), representing the number of different magic stone colors and the number of magic stones in each amulet, respectively. The second line contains C integers m1, m2, ..., mC (1 ≤ mi ≤ 10), where mi represents the number of stones of the i-th color available. The third line contains C integers p1, p2, ..., pC (1 ≤ pi ≤ 109), where pi represents the power value of each stone of the i-th color. Output Print the number of distinct power values that the amulets can have. Example Input 3 3 2 2 3 4 6 8 Output 1 Input 2 2 1 3 5 10 Output 1 Note In the first example, there are 2 stones of the first color with power value 4, 2 stones of the second color with power value 6, and 3 stones of the third color with power value 8. Since K=3 and the amulet requires exactly one stone of each color, the only possible power value is 4 + 6 + 8 = 18, which is why the output is 1. In the second example, there is 1 stone of the first color with power value 5 and 3 stones of the second color with power value 10. Since K=2 and the amulet requires exactly one stone of each color, the only possible power value is 5 + 10 = 15, which is why the output is 1.","solution":"def count_distinct_amulet_power_values(C, K, m, p): Returns the number of distinct power values that the amulets can have. :param C: The number of different magic stone colors. :param K: The number of magic stones in each amulet. :param m: List of integers where mi represents the number of stones of the i-th color available. :param p: List of integers where pi represents the power value of each stone of the i-th color. :return: Number of distinct power values the amulets can have. # In this problem, the only possible value is the sum of the power values of one stone of each color return 1 if K == C else 0 # Example usage: # K and C are always equal in the context of the problem statement C = 2 K = 2 m = [1, 3] p = [5, 10] print(count_distinct_amulet_power_values(C, K, m, p)) # Output: 1"},{"question":"Your task is to implement a basic chatroom system that manages user entries and exits. The system should support the following commands: * enter username: add the user with the given username to the chatroom. * leave username: remove the user with the given username from the chatroom. * list: list all the users currently in the chatroom in the order they entered. Constraints: * A username consists of lower-case alphabetic characters only. * 1 ≤ length of a username ≤ 20 * The number of commands will not exceed 10000. Input: The first line contains an integer n, the number of commands. The following n lines contain one command each as described above. Output: For each list command, print the usernames of the users currently in the chatroom in the order they entered, separated by a space. If the chatroom is empty, print \\"empty\\". Examples: Input: 6 enter alice enter bob leave alice list enter charlie list Output: bob bob charlie Input: 5 enter john enter doe list leave john list Output: john doe doe","solution":"def chatroom_system(commands): Executes a series of commands to manage a chatroom and returns the results for each \'list\' command. chatroom = [] command_results = [] for command in commands: parts = command.split() action = parts[0] username = parts[1] if len(parts) > 1 else None if action == \'enter\' and username: chatroom.append(username) elif action == \'leave\' and username: if username in chatroom: chatroom.remove(username) elif action == \'list\': if chatroom: command_results.append(\\" \\".join(chatroom)) else: command_results.append(\\"empty\\") return command_results"},{"question":"Micro has a new challenge ahead of him. This time, he wants to build the tallest possible pyramid using N blocks given to him. Each block has a weight represented by an integer. The pyramid should be built such that each level has strictly fewer blocks than the level below it and the weights of the blocks on each level should sum up to the maximum possible value for that level. For example, if there are 6 blocks with weights [7, 3, 2, 1, 1, 1], he can form a pyramid where the base level has 3 blocks ([7, 3, 2]), the middle level has 2 blocks ([1, 1]), and the top level has 1 block ([1]). Help Micro determine the maximum height of the pyramid he can build using the provided blocks. Input: The first line consists of an integer N, the number of blocks. The second line consists of N integers separated by spaces, representing the weights of the blocks. Output: Output a single integer, the maximum height of the pyramid. Constraints: 1 ≤ N ≤ 10^5 1 ≤ weight of each block ≤ 10^4 SAMPLE INPUT 6 7 3 2 1 1 1 SAMPLE OUTPUT 3 Explanation: Micro can build a pyramid with the following block levels: Level 1: [7, 3, 2] (3 blocks) Level 2: [1, 1] (2 blocks) Level 1: [1] (1 block) The maximum height of the pyramid is 3.","solution":"def max_pyramid_height(n, blocks): blocks.sort(reverse=True) level = 0 count = 1 while n >= count: level += 1 n -= count count += 1 return level # Example usage: # N = 6 # blocks = [7, 3, 2, 1, 1, 1] # max_pyramid_height(N, blocks) should return 3"},{"question":"A company is organizing a coding competition, and a large number of participants have registered. Each participant needs one computer to compete, and the company has a limited number of computers available. The event is organized in a single large hall, which contains several rows of computers. Each row has a maximum capacity of computers that can be set up in that row. You are given the number of rows and the capacity of each row. You also have the number of participants who signed up for the event. Your task is to check if it is possible to accommodate all participants with the given number of computers that can be set up in each row. Input The first line of the input contains an integer `r` (1 ≤ r ≤ 100), the number of rows in the hall. The second line contains `r` integers, the capacities of the rows (1 ≤ capacity ≤ 1,000,000). The third line contains an integer `p` (1 ≤ p ≤ 1,000,000), the number of participants. Output Output \\"Yes\\" if it is possible to accommodate all participants. Otherwise, output \\"No\\". Examples Input 3 3 5 2 8 Output Yes Input 4 4 1 3 2 13 Output No Input 2 5 5 10 Output Yes Note In the first example, the total capacity of the computers is 3 + 5 + 2 = 10, which is enough to accommodate 8 participants. Thus the output is \\"Yes\\". In the second example, the total capacity of the computers is 4 + 1 + 3 + 2 = 10, which is less than 13 participants. Thus the output is \\"No\\".","solution":"def can_accommodate_participants(r, capacities, p): Determines whether all participants can be accommodated given the row capacities. Parameters: r (int): The number of rows. capacities (list of int): A list containing the capacities of each row. p (int): The number of participants. Returns: str: \\"Yes\\" if all participants can be accommodated, otherwise \\"No\\". total_capacity = sum(capacities) return \\"Yes\\" if total_capacity >= p else \\"No\\""},{"question":"Given a rectangular garden of dimensions a by b and a certain number of square tiles with side length s, determine if it\'s possible to completely cover the garden using the tiles. The tiles can be rotated but cannot overlap or extend outside the garden boundaries. Input The input consists of three integer numbers, a, b, and s (1 ≤ a, b ≤ 100, 1 ≤ s ≤ min(a, b)). Output Output a single YES or NO. Write YES if and only if the garden can be fully covered by the tiles. Examples Input 8 6 2 Output YES Input 7 5 3 Output NO","solution":"def can_cover_garden(a, b, s): Determines if it\'s possible to completely cover a garden of dimensions a by b using square tiles of side length s. Parameters: a (int): The length of the garden. b (int): The width of the garden. s (int): The side length of the square tiles. Returns: str: \'YES\' if the garden can be fully covered by the tiles, \'NO\' otherwise. if a % s == 0 and b % s == 0: return \'YES\' return \'NO\'"},{"question":"A museum is organizing an exhibition where they plan to display a number of ancient artifacts. Each artifact received by the museum has a unique identifier and a weight. The artifacts need to be displayed on a set of display tables, each with a maximum weight capacity. The goal is to determine whether it is possible to distribute all the artifacts across the display tables such that no table exceeds its weight capacity. Input The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), where n is the number of artifacts and m is the number of display tables. The second line contains n integers, where the i-th integer represents the weight of the i-th artifact (1 ≤ weight ≤ 100). The third line contains m integers, where the j-th integer represents the weight capacity of the j-th table (1 ≤ capacity ≤ 100). Output Print \\"YES\\" if it is possible to distribute all artifacts on the tables without exceeding their respective capacities, otherwise print \\"NO\\". Examples Input 4 3 2 4 6 8 10 10 10 Output YES Input 4 2 3 7 2 5 10 9 Output NO Input 5 4 1 2 3 4 5 5 5 5 5 Output YES","solution":"def can_distribute_artifacts(n, m, artifact_weights, table_capacities): artifact_weights.sort(reverse=True) table_capacities.sort(reverse=True) table_index = 0 for artifact_weight in artifact_weights: while table_index < m and artifact_weight > table_capacities[table_index]: table_index += 1 if table_index >= m: return \\"NO\\" table_capacities[table_index] -= artifact_weight return \\"YES\\""},{"question":"You are given a grid-based game board, consisting of `n` rows and `m` columns, where each cell can either be empty, contain a wall, or contain a part of a snake. The game rules are such that the snake can only move in straight lines - up, down, left, or right - and occupies a continuous sequence of cells in one of these directions. Your task is to determine the number of distinct snakes present on the board. A distinct snake is defined as a sequence of contiguous snake cells that are aligned either horizontally or vertically. Input: The first line of input contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) - the number of rows and columns of the board. The next `n` lines each contain `m` characters, where each character represents the state of a cell: - `.` denotes an empty cell, - `#` denotes a wall, - `S` denotes part of a snake. Output: Print a single integer representing the number of distinct snakes present on the board. Example: Input: ``` 5 6 ...... .SSS.. .#.. .SSSS. ...... ``` Output: ``` 2 ``` Note: In the example above, there are two distinct snakes. The first snake occupies the cells (2,2), (2,3), and (2,4). The second snake occupies the cells (4,2), (4,3), (4,4), and (4,5). The wall at cell (3,3) and (3,4) separates the two snakes from merging into one.","solution":"def count_snakes(n, m, board): Counts the number of distinct snakes on the board. visited = [[False] * m for _ in range(n)] snakes_count = 0 def dfs(x, y): Depth-first search to mark all parts of the current snake as visited. stack = [(x, y)] while stack: cur_x, cur_y = stack.pop() if visited[cur_x][cur_y]: continue visited[cur_x][cur_y] = True directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] for dx, dy in directions: new_x, new_y = cur_x + dx, cur_y + dy if 0 <= new_x < n and 0 <= new_y < m and not visited[new_x][new_y] and board[new_x][new_y] == \'S\': stack.append((new_x, new_y)) for i in range(n): for j in range(m): if board[i][j] == \'S\' and not visited[i][j]: dfs(i, j) snakes_count += 1 return snakes_count"},{"question":"You are given a string consisting of lowercase Latin letters and the following operations are allowed: 1. You can select a prefix of the string and reverse it. 2. You can select a suffix of the string and reverse it. You are to determine the lexicographically smallest string that can be obtained by performing these operations any number of times. Input The first line contains a single string consisting of lowercase Latin letters (1 ≤ length of string ≤ 10^5). Output Output the lexicographically smallest string that can be obtained. Example Input dcba Output abcd Note By reversing the whole string \\"dcba\\", you get \\"abcd\\", which is the lexicographically smallest string that can be obtained.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by performing any number of prefix or suffix reversals. # The lexicographically smallest string is simply the sorted order return \'\'.join(sorted(s))"},{"question":"You are given a 2D grid of size n x m, where each cell contains a lowercase English letter. Your task is to find the length of the shortest word that can be formed by traversing this grid starting from any cell. The rule for traversal is that you can move to an adjacent cell (up, down, left, right) if the letter in that cell is either the same as the current cell or the next alphabetic letter of the current cell. Specifically, you can move from cell (i, j) with letter \'x\' to cell (i\', j\') if the letter in (i\', j\') is \'x\' or \'x+1\'. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid, respectively. Each of the next n lines contains m lowercase English letters, representing the grid. Output Print a single integer, the length of the shortest word formed under the given traversal rules. Examples Input 3 3 abc def ghi Output 1 Input 2 3 abb bcc Output 2 Explanation In the first example, since all adjacent letters are consecutive and traversals can start from any letter, each single cell can form a word of length 1; hence, the shortest word has a length of 1. In the second example, starting from \'a\' in the upper left cell, you can move to the adjacent \'b\', forming the word \\"ab\\". Therefore, the shortest word of length 2 can be formed.","solution":"def bfs(grid, start): from collections import deque n = len(grid) m = len(grid[0]) q = deque([start]) visited = set() visited.add(start) length = 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while q: x, y = q.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if ord(grid[nx][ny]) == ord(grid[x][y]) or ord(grid[nx][ny]) == ord(grid[x][y]) + 1: q.append((nx, ny)) visited.add((nx, ny)) length += 1 return length def shortest_word_length(grid): result = float(\'inf\') n = len(grid) m = len(grid[0]) for i in range(n): for j in range(m): result = min(result, bfs(grid, (i, j))) return result def parse_input_data(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(lines[i + 1].strip()) for i in range(n)] return grid # Example usage input_data = \\"3 3nabcndefnghi\\" grid = parse_input_data(input_data) print(shortest_word_length(grid))"},{"question":"You are working on a job scheduling algorithm and you need to schedule tasks efficiently. Given `N` tasks, each with a specific start time and end time, your goal is to select the maximum number of non-overlapping tasks that can be performed from the list. Input format The first line of the input contains a single integer `N`. The next `N` lines contain two space-separated integers, `start` and `end`, which denote the start and end times of a task. Output format Print a single integer representing the maximum number of non-overlapping tasks that can be scheduled. Constraints 1 ≤ N ≤ 1000 0 ≤ start < end ≤ 10^9 SAMPLE INPUT 5 1 3 2 5 4 6 7 8 5 9 SAMPLE OUTPUT 3 Explanation In the given sample case, the maximum number of non-overlapping tasks that can be scheduled are as follows: (1, 3), (4, 6), and (7, 8). Thus, the answer is 3.","solution":"def max_non_overlapping_tasks(N, tasks): Returns the maximum number of non-overlapping tasks that can be scheduled. Parameters: N (int): Number of tasks. tasks (list): A list of tuples, where each tuple contains start and end times of a task. Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time tasks = sorted(tasks, key=lambda x: x[1]) max_tasks = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: max_tasks += 1 last_end_time = end return max_tasks"},{"question":"Input The input consists of a single integer n (1 ≤ n ≤ 50). Output Output the factorial of the number n if it is not a prime number. Otherwise, output \\"Prime\\". Examples Input 5 Output Prime Input 6 Output 720 Input 8 Output 40320 Input 3 Output Prime","solution":"import math def factorial_or_prime(n): Returns the factorial of n if n is not a prime number, otherwise returns \\"Prime\\". def is_prime(num): if num < 2: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True if is_prime(n): return \\"Prime\\" else: return math.factorial(n)"},{"question":"In a software company, the developers are experimenting with a new encryption algorithm. They need to pad a given string to a specific length with a series of repeating substrings. Given a string `s` and an integer `k`, the task is to generate a new string of length `k` by repeating the string `s` as many times as necessary, and then if needed, truncating the resulting string to get exactly `k` characters. Input: - The first line contains an integer `k` (1 ≤ k ≤ 10^9). - The second line contains a non-empty string `s` of at most 10^6 lowercase English letters. Output: - Print the resultant string of length `k`. Examples: Input: 7 abc Output: abcabca Input: 5 xyz Output: xyzxy Input: 11 moon Output: moonmoonmoo Note: In the first test case, repeating the string `abc` twice gives `abcabc`, then appending another `a` results in `abcabca` which has exactly 7 characters. In the second test case, repeating the string `xyz` once and adding `xy` gives `xyzxy` which is exactly 5 characters long. In the final test case, the string `moon` is repeated twice to get `moonmoon` and then an additional `moo` is appended to reach 11 characters in total.","solution":"def pad_string(k, s): Generates a new string of length k by repeating the string s and truncating as necessary. Parameters: k (int): The desired length of the resultant string. s (str): The string to repeat. Returns: str: The resultant string of length k. # Calculate the necessary number of full repeats of s and the remainder length full_repeats, extra_length = divmod(k, len(s)) # Build the resultant string result = s * full_repeats + s[:extra_length] return result"},{"question":"Valera loves working with arrays and recently learned about permutations. A permutation of length n is an array containing all integers from 1 to n exactly once. Valera is especially interested in the cyclic shifts of permutations. A cyclic shift is obtained by taking a permutation and moving its last element to the beginning of the array. For example, one cyclic shift of the permutation [1, 2, 3, 4] is [4, 1, 2, 3]. Given an integer n, Valera wants to generate a permutation of length n which has exactly k cyclic shifts that are distinct from the original permutation. Note that the original permutation is also counted as one of the possible permutations. Input The input contains two integers n (2 ≤ n ≤ 100) and k (1 ≤ k ≤ n). Output Print a permutation of length n which has exactly k distinct cyclic shifts, including the original permutation. If there are multiple solutions, print any of them. Example Input 4 2 Output 4 1 2 3 Example Input 5 5 Output 1 2 3 4 5","solution":"def generate_permutation(n, k): Generates a permutation of length n which has exactly k distinct cyclic shifts. if k == n: # If k equals n, return the natural permutation from 1 to n. return list(range(1, n + 1)) else: # For k < n, create a permutation with exactly k distinct cyclic shifts. permutation = [] # Place the last k numbers at the beginning for i in range(n - k, n): permutation.append(i + 1) # Followed by the rest of the numbers in their original order for i in range(n - k): permutation.append(i + 1) return permutation"},{"question":"Shivani has been given a string S containing only lowercase English alphabets. She wants to transform this string in the following way: For every pair of consecutive characters, if the characters are the same, she will remove them both. She will continue performing this operation until no more such pairs exist. Your task is to determine the final string after all possible removals have been made. If the final string is empty, return \\"Empty String\\". Input: The input consists of a single string S. Output: Output the final string after all pairs have been removed. If the final string is empty, print \\"Empty String\\". Constraints: 1 ≤ |S| ≤ 10^5 S consists only of lowercase English alphabets. SAMPLE INPUT aaabccddd SAMPLE OUTPUT abd","solution":"def remove_consecutive_pairs(s): Removes consecutive pairs of same characters in the string s until no such pairs exist. :param s: A string consisting only of lowercase English alphabets. :return: The final string after all possible removals have been made, or \\"Empty String\\". stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack) if stack else \'Empty String\'"},{"question":"You are given an array of integers representing the amounts of wealth for different people. You need to determine the maximum wealth of any single person if every day everyone shares their wealth equally with everyone else, including themselves. The sharing process is defined as every person giving an equal fraction of their wealth to every other person including themselves. This will be done for a specific number of days `d`. Constraints * 1 ≤ n ≤ 100 (n represents the number of people) * 1 ≤ d ≤ 100 (d represents the number of days) * 0 ≤ wealth_i ≤ 1000 (wealth_i represents the initial wealth of the ith person) Input Input is given from Standard Input in the following format: n d wealth_1 wealth_2 ... wealth_n Output Print the maximum wealth of any person after `d` days of sharing. Examples Input 3 2 100 200 300 Output 200.0 Input 4 1 50 150 250 350 Output 200.0 Input 2 3 500 500 Output 500.0 Explanation In the first example, after the first day of sharing, each person will have the same amount of wealth since the sum of their wealth will be equally distributed among them. Therefore: Day 1: (100+200+300) / 3 = 200.0 for each Day 2: (200.0+200.0+200.0) / 3 = 200.0 for each After `d` days, the maximum wealth is 200.0.","solution":"def max_wealth_after_days(n, d, wealth): Finds the maximum wealth of any person after \'d\' days of sharing. total_wealth = sum(wealth) equal_share = total_wealth / n return equal_share"},{"question":"Fiona is a software engineer who loves solving puzzles. One day, she encountered a series of nested parentheses expressions and became curious about their structure. She decided to write a program to check if a given parentheses expression is correctly nested. A correctly nested parentheses expression consists of pairs of opening and closing parentheses, where each opening parenthesis has a corresponding closing parenthesis, and the pairs are correctly ordered and nested. For example: - \\"()\\" is correctly nested. - \\"(())\\" is correctly nested. - \\"()()\\" is correctly nested. - \\"(()(()))\\" is correctly nested. However, the following are not correctly nested: - \\"(\\" is not correctly nested. - \\")\\" is not correctly nested. - \\"(()\\" is not correctly nested. - \\"())(\\" is not correctly nested. Your task is to help Fiona by writing a function that takes a string containing only the characters \'(\' and \')\' and returns whether it is correctly nested. Input - A single line containing the string s (1 ≤ |s| ≤ 105), where |s| is the length of the string. Output - Print \\"YES\\" if the string is correctly nested, otherwise print \\"NO\\". Examples Input () Output YES Input (()()) Output YES Input ((()) Output NO Input )()( Output NO","solution":"def is_correctly_nested(s): Determines if the given parentheses string is correctly nested. Args: s (str): A string containing only \'(\' and \')\' Returns: str: \\"YES\\" if the string is correctly nested, otherwise \\"NO\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() if not stack: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given n people, each with exactly one unique friend among the listed people, forming a perfect pairing. Each person can be represented by an integer from 1 to n, and you are given a list of mutual friendships. The task is to identify all the pairs of friends based on the information provided. Each friendship is described by an unordered pair {a, b}, indicating that a and b are friends. Every person has exactly one friend, and no person is friends with themselves. Determine the pairs of friends for the given set of people. Input The first line contains an integer t (1 ≤ t ≤ 5) — the number of test cases. The first line of each test case contains one integer n (2 ≤ n ≤ 10^5) — the number of people. It is guaranteed that n will always be even. The second line of each test case contains n / 2 pairs of integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) — representing the friendships between the people. Each person appears exactly once across all pairs. Output For each test case, output \\"Test Case #x:\\" where x is the test case number (starting from 1). Then, print n / 2 lines, each containing a pair of friends. Example Input: 1 4 1 2 3 4 Output: Test Case #1: 1 2 3 4 Explanation In the given example, there are 4 people and two pairs representing friendships. The output lists those pairs as individual lines under the respective test case header. Each test case contains a set of pairs that represent friends, and the task is simply to output those pairs for each test case.","solution":"def identify_friend_pairs(t, test_cases): result = [] for idx, (n, friendships) in enumerate(test_cases): result.append(f\\"Test Case #{idx + 1}:\\") for a, b in friendships: result.append(f\\"{a} {b}\\") return result"},{"question":"Given an array of integers A of length N and an integer K, your task is to find the number of distinct pairs (A_i, A_j) such that i < j and A_i ⊕ A_j = K, where ⊕ denotes the bitwise XOR operation. Constraints: - All values in input are integers. - 1 leq N leq 2 times 10^5 - 1 leq A_i leq 10^9 - 0 leq K leq 10^9 Input Input is given from Standard Input in the following format: ``` N K A_1 A_2 ... A_N ``` Output Print a single integer representing the number of distinct pairs (A_i, A_j) such that i < j and A_i ⊕ A_j = K. Example Input ``` 5 6 1 5 3 4 2 ``` Output ``` 2 ``` Explanation: The pairs (1, 5) and (3, 5) result in the value 6 when XOR is performed: - 1 ⊕ 5 = 6 - 3 ⊕ 5 = 6","solution":"def count_distinct_pairs(N, K, A): Returns the number of distinct pairs (A_i, A_j) such that i < j and A_i ⊕ A_j = K. pair_count = 0 seen = {} for i in range(N): target = A[i] ^ K if target in seen: pair_count += seen[target] if A[i] in seen: seen[A[i]] += 1 else: seen[A[i]] = 1 return pair_count"},{"question":"Peter is fascinated by strings and enjoys playing various string manipulation games. Recently, he came up with a new game where he takes a string S consisting of lowercase English letters, and attempts to create the lexicographically smallest possible string through a series of operations. In each operation, Peter can select any substring of S and reverse it. Your task is to help Peter determine the lexicographically smallest string he can obtain by performing any number of the allowed operations. Input The first and single line of input contains a string S (1 ≤ |S| ≤ 1000), consisting of lowercase English letters. Output Output one string — the lexicographically smallest string Peter can obtain through the allowed operations. Examples Input dcba Output abcd Input acbd Output abdc Note In the first example, Peter can reverse the entire string to get \\"abcd\\", which is the smallest possible string. In the second example, Peter can reverse the substring \\"bd\\" to get \\"abdc\\", which is the lexicographically smallest string possible.","solution":"def find_lexicographically_smallest_string(S): This function returns the lexicographically smallest string possible by reversing any substring of S any number of times. It leverages the fact that by reversing any substring any number of times, any permutation of the characters of the string can be formed. Therefore, the solution is simply the sorted version of the string. :param S: A string consisting of lowercase English letters :return: Lexicographically smallest string possible return \'\'.join(sorted(S))"},{"question":"A security company wants to deploy guards to different locations to maximize security. Each guard can guard a segment of road from start to end points, and the segments may overlap. However, assigning more than one guard to the same segment is redundant and is to be avoided for efficiency. Given a set of n segments, determine the minimum number of guards required such that each guard is assigned to exactly one of the given segments and all segments are covered. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100) — the number of segments. The next n lines contain two integers li and ri (1 ≤ li ≤ ri ≤ 1000) — the start and end points of the ith segment. Output For each test case, output the minimum number of guards required to cover all the segments. Example Input 2 3 1 4 2 5 6 8 4 1 5 2 4 3 6 6 8 Output 2 2 Note - In the first test case, you can assign one guard to the segment (1, 4) and another guard to the segment (6, 8) to cover all segments. - In the second test case, you can assign one guard to the segment (1, 5) and another guard to the segment (6, 8) to cover all segments. - The optimal solutions may not always be unique, and any valid set of segments that covers all segments with the minimum number of guards should be considered correct.","solution":"def min_guards_needed(test_cases): results = [] for segments in test_cases: segments.sort(key=lambda x: x[1]) # Sort segments by end points guards = 0 current_end = -1 for segment in segments: if segment[0] > current_end: guards += 1 current_end = segment[1] results.append(guards) return results"},{"question":"Problem Description Annie is organizing a party and wants to ensure that it is memorable for all attendees. All attendees are given unique IDs ranging from 1 to N. Annie decides to organize a fun game that involves pairing up attendees such that each attendee is paired with exactly one other attendee. However, if the number of attendees is odd, one attendee will remain unpaired. Help Annie by determining the number of attendees who will end up unpaired after the game. # Input The input consists of: - The first line contains an integer N, the total number of attendees at the party. # Output The output should be: - A single integer representing the number of attendees who will remain unpaired. # Example Input ``` 7 ``` Output ``` 1 ``` # Explanation Annie has 7 attendees. She can pair them up into 3 pairs, leaving 1 attendee unpaired. Therefore, the output is 1.","solution":"def unpaired_attendees(N): Returns the number of attendees who will remain unpaired. Args: N (int): Total number of attendees. Returns: int: The number of attendees who will remain unpaired. return N % 2"},{"question":"In the magical forest of Zog, there are N mystical creatures, each residing in their own lair. Some of these lairs are connected by enchanted trails that can only be traversed in one direction, specified by the sorcerer\'s decree. Due to a recent surge in dark magic, communication between creatures has become crucial to maintain peace in the forest. Therefore, the Council of Elders has decided to set up magical portals to directly connect some of these lairs. To establish efficient communication, each creature must be able to send and receive messages from any other creature, either directly through a portal or indirectly via multiple trails and portals. The Council wishes to set up the minimum number of portals needed to achieve this goal, considering the existing trails in the forest. You have been summoned by the Council to determine the number of portals required so that every creature can communicate with every other creature. Input The first line of the input consists of two integers, N and T. N is the number of creatures (and lairs), and T is the number of existing one-directional trails. Each of the next T lines contains two space-separated integers, X and Y, indicating a one-directional trail from lair X to lair Y. Output Print the minimum number of portals needed to ensure complete communication among all the creatures. Constraints 1 ≤ N ≤ 50,000 0 ≤ T ≤ 200,000 1 ≤ X, Y ≤ N X ≠ Y Sample Input 1 4 2 1 2 2 3 Output 1 2 Input 2 5 5 1 2 2 3 3 1 4 5 5 4 Output 2 2","solution":"from collections import defaultdict, deque def kosaraju_sccs(n, graph): def dfs1(v): visited.add(v) for u in graph[v]: if u not in visited: dfs1(u) stack.append(v) def dfs2(v): component.append(v) visited.add(v) for u in reverse_graph[v]: if u not in visited: dfs2(u) stack = [] visited = set() # Step 1: Fill stack with vertices in the order of completion times for i in range(1, n + 1): if i not in visited: dfs1(i) # Step 2: Reverse the graph reverse_graph = defaultdict(list) for v in range(1, n + 1): for u in graph[v]: reverse_graph[u].append(v) # Step 3: Get SCCs visited.clear() sccs = [] while stack: v = stack.pop() if v not in visited: component = [] dfs2(v) sccs.append(component) return sccs def minimum_portals(n, trails): graph = defaultdict(list) for x, y in trails: graph[x].append(y) sccs = kosaraju_sccs(n, graph) scc_map = {} for idx, scc in enumerate(sccs): for node in scc: scc_map[node] = idx if len(sccs) == 1: return 0 dag_incoming = [0] * len(sccs) dag_outgoing = [0] * len(sccs) for v in range(1, n + 1): for u in graph[v]: if scc_map[v] != scc_map[u]: dag_outgoing[scc_map[v]] += 1 dag_incoming[scc_map[u]] += 1 sources = sum(1 for i in dag_incoming if i == 0) sinks = sum(1 for i in dag_outgoing if i == 0) return max(sources, sinks) def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 t = int(data[index]) index += 1 trails = [] for _ in range(t): x = int(data[index]) index += 1 y = int(data[index]) index += 1 trails.append((x, y)) print(minimum_portals(n, trails))"},{"question":"Sorting a large list of integers efficiently is a routine task in programming. Given a list of n integers, your task is to sort this list in non-decreasing order. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^6), the number of integers in the list. The second line contains n integers a1, a2, ..., an where each integer is within the range (-10^9 ≤ ai ≤ 10^9). Output The output should contain the sorted list of integers, each separated by a space on a single line. Example Input 5 3 -2 0 1 4 Output -2 0 1 3 4","solution":"def sort_list(n, arr): Sorts a list of n integers in non-decreasing order. Parameters: n (int): Number of integers in the list arr (list of int): The list of integers to sort Returns: list of int: Sorted list of integers return sorted(arr)"},{"question":"Write a program that reads two strings and determines whether one string is a rotation of another. A rotation means moving some characters from the beginning to the end of the string without changing the order of the remaining characters. Constraints * Both strings will have a length between 1 and 1000. * Both strings will contain only lowercase English letters. Input In the first line, the first string is given. In the second line, the second string is given. Output Print \\"Yes\\" if the second string can be obtained by rotating the first string, otherwise print \\"No\\". Examples Input abcde cdeab Output Yes Input abcde abced Output No","solution":"def is_rotation(str1, str2): Determines if one string is a rotation of another. Parameters: str1 (str): The first string str2 (str): The second string Returns: bool: True if str2 is a rotation of str1, False otherwise if len(str1) != len(str2): return False return str2 in str1 + str1 # Example usage: # str1 = input().strip() # str2 = input().strip() # if is_rotation(str1, str2): # print(\\"Yes\\") # else: # print(\\"No\\")"},{"question":"You are given a list of flights that connect various cities in a country. Each flight is represented as a directed edge with a certain cost. Your task is to find the cheapest flight from a starting city to a destination city with at most k stops. If no such route exists, return -1. Input - The first line contains three integers n (number of cities), m (number of flights), and k (maximum number of stops). - The second line contains two integers: the starting city and the destination city. - The next m lines each contain three integers u, v, and w, representing a flight from city u to city v with cost w. Output - Print the minimum cost of the flight with at most k stops. If no such route exists, print -1. Example Input 4 5 1 0 3 0 1 100 1 2 100 2 3 100 0 2 500 0 3 200 Output 200 Explanation Possible routes from city 0 to city 3: - 0 -> 3 with cost 200 and 0 stops. - 0 -> 1 -> 2 -> 3 with cost 300 and 2 stops. - 0 -> 2 -> 3 with cost 600 and 1 stop. The cheapest route with at most 1 stop is direct flight 0 -> 3 with cost 200.","solution":"from collections import defaultdict import heapq def find_cheapest_price(n, flights, src, dst, k): Finds cheapest flight from src to dst with at most k stops. :param n: int - number of cities :param flights: List[Tuple(int, int, int)] - list of flights (src, dst, cost) :param src: int - starting city :param dst: int - destination city :param k: int - maximum number of stops :return: int - minimum cost or -1 if no such route exists. graph = defaultdict(list) for u, v, w in flights: graph[u].append((v, w)) # (cost, current_city, stops) heap = [(0, src, k + 1)] while heap: cost, u, stops = heapq.heappop(heap) if u == dst: return cost if stops > 0: for v, w in graph[u]: heapq.heappush(heap, (cost + w, v, stops - 1)) return -1"},{"question":"Count frequency. Input: First line contains an integer T - the number of test cases. For each test case: - The first line contains a single integer, N. - The second line contains a string of N lowercase letters. Output: For each test case, output in a separate line the frequency of each letter in the string sorted alphabetically, in the format \\"a:<count> b:<count> ... z:<count>\\". Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 5 abacb 7 abcabcx SAMPLE OUTPUT a:2 b:2 c:1 d:0 e:0 f:0 g:0 h:0 i:0 j:0 k:0 l:0 m:0 n:0 o:0 p:0 q:0 r:0 s:0 t:0 u:0 v:0 w:0 x:0 y:0 z:0 a:2 b:2 c:2 d:0 e:0 f:0 g:0 h:0 i:0 j:0 k:0 l:0 m:0 n:0 o:0 p:0 q:0 r:0 s:0 t:0 u:0 v:0 w:0 x:1 y:0 z:0","solution":"def count_frequency(T, test_cases): Given T test cases, each containing an integer N followed by a string of N lowercase letters, returns the frequency of each letter in the string sorted alphabetically. results = [] for i in range(T): N = test_cases[i][0] text = test_cases[i][1] # Initialize a dictionary with all letters set to 0 frequency = {chr(ord(\'a\') + j): 0 for j in range(26)} # Count the frequency of each character in the text for char in text: frequency[char] += 1 # Prepare the output in the required format result = \' \'.join([f\'{char}:{count}\' for char, count in sorted(frequency.items())]) results.append(result) return results"},{"question":"Given an array of N integers, determine the number of unordered pairs (i, j) such that 1 <= i < j <= N, and the sum of the elements at these positions is equal to a given integer X. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains two integers N and X. The second line contains N space-separated integers representing the elements of the array. Output: For each test case, output a single line containing the number of valid pairs for the corresponding test case. Sample Input: 3 5 7 1 2 3 4 5 4 5 1 1 1 1 6 10 9 1 2 3 4 5 Sample Output: 2 6 1 Constraints: 1 <= T <= 1000 1 <= N <= 10^5 1 <= X <= 10^9 1 <= array elements <= 10^9","solution":"def count_valid_pairs(arr, n, x): Returns the number of pairs (i, j) such that 1 <= i < j <= N and the sum of the elements at these positions is equal to x. count = 0 num_dict = {} for num in arr: complement = x - num if complement in num_dict: count += num_dict[complement] if num in num_dict: num_dict[num] += 1 else: num_dict[num] = 1 return count def process_test_cases(test_cases): results = [] for n, x, arr in test_cases: results.append(count_valid_pairs(arr, n, x)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n, x = map(int, lines[idx].split()) arr = list(map(int, lines[idx+1].split())) test_cases.append((n, x, arr)) idx += 2 return test_cases"},{"question":"In a kingdom far, far away, a king has n sons. This king has a unique way of distributing treasure among his sons. Each son i (1 ≤ i ≤ n) is assigned a score, Si, which measures his worthiness. To determine how the treasure should be divided, the king follows these rules: 1. Each son should receive a non-negative integer number of gold coins. 2. The total number of gold coins given to all sons combined should be exactly `m`. 3. The combined score of all the sons who receive any gold coins should be maximized. Write a program to help the king determine the maximum possible combined score of the sons who receive at least one gold coin. # Input - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000). - The second line contains n integers, S1, S2, ..., Sn (0 ≤ Si ≤ 1000). # Output - Output a single integer, the maximum possible combined score. # Example Input ``` 4 10 4 3 3 7 ``` Output ``` 14 ``` # Additional Information - In the given example, there are 4 sons and the king has 10 gold coins. - The sons have scores of 4, 3, 3, and 7 respectively. - The optimal way to split 10 coins and maximize the combined score is to give coins to all sons. - Each son gets at least one coin, so the combined score is 4 + 3 + 3 + 7 = 17.","solution":"def maximum_combined_score(n, m, scores): Given the number of sons n, total gold coins m, and a list of scores representing each son\'s worthiness, returns the maximum possible combined score of the sons who receive at least one gold coin. # Sort the scores in descending order to maximize the score of those who receive coins sorted_scores = sorted(scores, reverse=True) # The maximum combined score is just the sum of the top \'m\' sons max_combined_score = sum(sorted_scores[:m]) return max_combined_score"},{"question":"A group of friends is organizing a charity event where they will be selling different kinds of baked goods. Each friend will bake a certain number of items of one type (e.g., cookies, cupcakes, brownies). They want to arrange the items in a specific order for the display table such that no two items of the same type are adjacent to each other. Given a list of integers where each integer represents the count of items each friend will bake of a specific type, determine if it\'s possible to arrange all the items in such a way that no two neighboring items are of the same type. If such an arrangement is possible, print \\"Possible\\". Otherwise, print \\"Impossible\\". Input format: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of friends. - The second line contains N integers, where the ith integer represents the number of baked items of the ith type. Output format: For each test case, output either \\"Possible\\" or \\"Impossible\\" on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ number of items ≤ 1000 SAMPLE INPUT 2 3 3 3 3 2 4 2 SAMPLE OUTPUT Possible Impossible Explanation: In the first test case, it is possible to arrange the items such that no two adjacent items are of the same type, for example: 1, 2, 3, 1, 2, 3, 1, 2, 3. In the second test case, it is impossible to arrange the items such that the two types do not end up next to each other, since type 1 has 4 items and type 2 only has 2 items.","solution":"from typing import List def can_arrange_items(test_cases: List[tuple]) -> List[str]: Given a list of test cases, each test case is a tuple containing: - N: Number of friends - items: List of integers where each integer represents the number of baked items of the ith type The function returns a list of strings, either \\"Possible\\" or \\"Impossible\\" for each test case. results = [] for N, items in test_cases: max_count = max(items) sum_counts = sum(items) - max_count if max_count <= sum_counts + 1: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are given a series of timestamps representing when a user performed certain activities on a website. Each timestamp is given in the format \\"HH:MM:SS\\", representing hours, minutes, and seconds. You need to identify if it\'s possible to reorder these timestamps such that there is at least one hour in which the user performed activities at exactly one-minute intervals. Input The first line contains a single positive integer n (2 ≤ n ≤ 1000). The following n lines contain timestamps in the format \\"HH:MM:SS\\". Each timestamp is unique, and events can span across multiple hours. Output Print \\"Yes\\" if it is possible to reorder the timestamps such that there is any one hour where the timestamps occur at exactly one-minute intervals, otherwise print \\"No\\". You can print every letter in any case (upper or lower). Example Input 5 12:15:00 12:16:00 12:17:00 13:20:00 13:21:00 Output Yes Input 3 14:30:00 14:32:00 14:34:00 Output No Input 4 09:00:00 09:01:00 10:00:00 10:01:00 Output Yes Note In the first example, the timestamps \\"12:15:00\\", \\"12:16:00\\", and \\"12:17:00\\" can be reordered to show activities at exactly one-minute intervals within one hour. In the second example, there is no way to reorder the timestamps to meet the condition. In the third example, \\"09:00:00\\" and \\"09:01:00\\" meet the condition, as do \\"10:00:00\\" and \\"10:01:00\\".","solution":"def can_reorder_timestamps(n, timestamps): from collections import defaultdict hour_minute_counts = defaultdict(set) for timestamp in timestamps: hh, mm, _ = timestamp.split(\\":\\") key = (hh, mm) hour_minute_counts[hh].add(mm) for minutes in hour_minute_counts.values(): sorted_minutes = sorted(minutes) if len(sorted_minutes) >= 2: for i in range(1, len(sorted_minutes)): if (int(sorted_minutes[i]) - int(sorted_minutes[i-1]) != 1): break else: return \\"Yes\\" return \\"No\\""},{"question":"You\'re working on a software system that needs to simulate the payment processing at a large online store. The store manages many orders, and each order contains multiple products. The processing system needs to evaluate the list of orders and calculate the total payment for each order, applying a discount if applicable. # Problem Description Each order consists of a list of products. Each product has a name, a quantity, and a unit price. The total cost of an order is the sum of the costs of the individual products. The payment processing system needs to also check if the order qualifies for a discount. If the total cost of an order exceeds a certain amount, a discount is applied as follows: - If the total cost exceeds 100, a 10% discount is applied. - If the total cost exceeds 200, a 20% discount is applied. - If the total cost exceeds 300, a 30% discount is applied. The total payment for an order after applying the discount is the final amount the customer needs to pay. # Input Format The first line of the input contains an integer `n`, the number of orders (1 ≤ n ≤ 100). For each order, the input consists of: - An integer `m`, the number of products in the order (1 ≤ m ≤ 10). - For each product, there are three values: - A string `product_name` (1 ≤ |product_name| ≤ 50), the name of the product. - An integer `quantity` (1 ≤ quantity ≤ 100). - A float `unit_price` (0.01 ≤ unit_price ≤ 1000.00). # Output Format For each order, output the total payment rounded to two decimal places. # Example Input ``` 2 3 apple 10 2.5 banana 5 3.5 carrot 1 4.0 2 chair 1 150.0 table 1 180.0 ``` Output ``` 38.50 258.00 ``` # Note - In the first order, the total cost is calculated as follows: - apple: 10 * 2.5 = 25.0 - banana: 5 * 3.5 = 17.5 - carrot: 1 * 4.0 = 4.0 Total cost: 25.0 + 17.5 + 4.0 = 46.5 (no discount) - In the second order, the total cost is: - chair: 1 * 150.0 = 150.0 - table: 1 * 180.0 = 180.0 Total cost: 150.0 + 180.0 = 330.0 (30% discount applied) Discounted cost: 330.0 * 0.7 = 231.0","solution":"def calculate_total_payment(orders): This function calculates the total payment for each order after applying the appropriate discount if the order qualifies. Parameters: - orders (list): A list of orders, where each order is represented by a list of products. Each product is represented by a tuple containing the product name, quantity, and unit price. Returns: - list: A list of total payments for each order rounded to two decimal places. results = [] for order in orders: total_cost = sum(quantity * unit_price for _, quantity, unit_price in order) # Apply discount based on the total cost if total_cost > 300: final_cost = total_cost * 0.7 elif total_cost > 200: final_cost = total_cost * 0.8 elif total_cost > 100: final_cost = total_cost * 0.9 else: final_cost = total_cost # Append the result rounded to two decimal places results.append(round(final_cost, 2)) return results"},{"question":"You are given a list of integers and a target sum. Your task is to determine whether there are two distinct indices i and j in the array such that the integers at these indices add up to the target sum. You need to write a function that returns a boolean value (True/False) indicating the presence of such a pair. Input The input consists of two lines. The first line contains a space-separated list of integers. The second line contains the target sum. Output Output a single boolean value, True if such a pair exists, otherwise False. Examples Input 2 7 11 15 9 Output True Input 1 2 3 4 5 10 Output False","solution":"def has_pair_with_sum(nums, target): Checks if there are two distinct indices i and j in the array such that the integers at these indices add up to the target sum. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Given a directed weighted graph G(V, E), determine if there is a negative weight cycle that is reachable from a specified source vertex s. Constraints * 1 ≤ |V| ≤ 1,000 * 0 ≤ |E| ≤ 10,000 * Edge weights can be negative or positive * The graph vertices are named with the numbers 0, 1,..., |V|-1 respectively. Input |V| |E| s u0 v0 w0 u1 v1 w1 : u|E|-1 v|E|-1 w|E|-1 , where |V| is the number of vertices, |E| is the number of edges in the graph, and s is the source vertex. ui, vi, and wi represent the source vertex, the destination vertex, and the weight of the i-th edge respectively (directed). Output True if there is a negative weight cycle that is reachable from the source vertex, otherwise False. Examples Input 5 7 0 0 1 -1 0 2 4 1 2 3 1 3 2 1 4 2 3 2 5 3 1 1 Output False Input 5 8 0 0 1 -1 0 2 4 1 2 3 1 3 2 1 4 2 3 2 5 3 1 1 4 3 -6 Output True","solution":"def has_negative_weight_cycle(V, E, edges, source): distances = [float(\'inf\')] * V distances[source] = 0 for _ in range(V - 1): for u, v, w in edges: if distances[u] != float(\'inf\') and distances[u] + w < distances[v]: distances[v] = distances[u] + w for u, v, w in edges: if distances[u] != float(\'inf\') and distances[u] + w < distances[v]: return True return False"},{"question":"A company is planning a team-building event where participants will be grouped into teams. Each team should consist of 3 participants. The company has n teams to form, and each of the participants is identified with a unique number from 1 to 3n. During the event, each participant will have a list of other participants according to how much they would like to team up with them ranked from the most preferred to the least preferred. You are given the ranking preferences of each participant and your task is to form the teams by following a specific set of rules: 1. Select the participant with the lowest number who is still unassigned (let\'s call them the \\"selector\\"). 2. The \\"selector\\" chooses two other unassigned participants based on their preference list to form a team. 3. Repeat the process until all participants are assigned to teams. Your task is to form the teams based on the above rules and output the compositions of the teams. Input The first line contains an integer n (1 ≤ n ≤ 105) which is the number of teams. The next 3n lines each contain a list of 3n-1 integers which represents the ranking preferences of each participant. The i-th line corresponds to participant i\'s preference list, and all the integers in the list are unique. Output Print n lines, each containing three integers, representing the composition of the teams. Each team should be output in the order in which they were formed. Example Input 2 2 3 4 5 6 1 3 4 5 6 1 2 4 5 6 1 2 3 5 6 1 2 3 4 6 1 2 3 4 5 Output 1 2 3 4 5 6","solution":"def form_teams(n, preferences): Forms teams based on the given preferences. Args: n : int : number of teams preferences: list of list of int : ranking preferences of each participant Returns: list of list of int : the composition of the teams total_participants = 3 * n unassigned = set(range(1, total_participants + 1)) teams = [] while unassigned: selector = min(unassigned) unassigned.remove(selector) chosen = [] for preference in preferences[selector - 1]: if preference in unassigned: chosen.append(preference) if len(chosen) == 2: break for participant in chosen: unassigned.remove(participant) teams.append([selector, *chosen]) return teams # Example run n = 2 preferences = [ [2, 3, 4, 5, 6], [1, 3, 4, 5, 6], [1, 2, 4, 5, 6], [1, 2, 3, 5, 6], [1, 2, 3, 4, 6], [1, 2, 3, 4, 5] ] print(form_teams(n, preferences))"},{"question":"Alex is participating in a treasure hunt game in a two-dimensional plane. There are N treasures scattered across the map. The coordinates of the i-th treasure are (left(x_i, y_iright)), and its value is (v_i). Alex can only collect a maximum of K treasures. He can start at any point on the map and can carry as much treasure as he wants, but he needs to be at the exact location of a treasure to collect it. The distance Alex travels between two points (left(x_1, y_1right)) and (left(x_2, y_2right)) is calculated using the Euclidean distance formula: (sqrt{left(x_2 - x_1right)^2 + left(y_2 - y_1right)^2}). Determine the maximum total value of the treasures that Alex can collect if he chooses the optimal starting point and the best strategy for collecting K treasures. Constraints * All values in input are integers. * (1 leq N leq 60) * (1 leq K leq N) * (-1000 leq x_i , y_i leq 1000) * (left(x_i, y_iright) neq left(x_j, y_jright) (i neq j)) * (1 leq v_i leq 100) Input Input is given from Standard Input in the following format: ``` N K x_1 y_1 v_1 vdots x_N y_N v_N ``` Output Print the maximum total value of the treasures that Alex can collect. Examples Input ``` 4 2 1 2 5 3 4 6 -1 -1 2 2 3 8 ``` Output ``` 14 ``` Input ``` 5 3 0 0 10 1 1 20 2 2 30 3 3 40 4 4 50 ``` Output ``` 120 ```","solution":"import itertools import math def max_value_of_treasures(N, K, treasures): # Function to calculate the euclidean distance def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) # We need to consider all combinations of K treasures out of N max_value = 0 for combination in itertools.combinations(treasures, K): value = sum(item[2] for item in combination) max_value = max(max_value, value) return max_value # Example usage: # treasures = [(1, 2, 5), (3, 4, 6), (-1, -1, 2), (2, 3, 8)] # print(max_value_of_treasures(4, 2, treasures))"},{"question":"A secret message is encoded in a way such that each word is reversed, but the order of the words remains the same. Your task is to decode each message by reversing the reversed words back to their original form. Input: The first line will contain an integer T, the number of test cases. For each test case, there will be a single line containing the encoded message comprised of words separated by spaces. Output: For each test case, print the decoded message on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ |message| ≤ 1000 per test case Example Input: 3 tac god tac siht si a elpmaxe racecar rotator Example Output: cat dog cat this is a example racecar rotator Explanation: In the first example, \'tac\' is decoded to \'cat\', \'god\' to \'dog\', and so on. The order of words is preserved.","solution":"def decode_message(message): Decodes an encoded message where each word is reversed but the order of the words remains the same. Parameters: message (str): The encoded message Returns: str: The decoded message words = message.split() # Split the message into words decoded_words = [word[::-1] for word in words] # Reverse each word decoded_message = \\" \\".join(decoded_words) # Join the words back into a single string return decoded_message def decode_messages(test_cases): Decode a list of encoded messages. Parameters: test_cases (List[str]): List of encoded messages Returns: List[str]: List of decoded messages return [decode_message(message) for message in test_cases]"},{"question":"Mario is a landscape designer and is planning a new garden. He wants the garden to have N flowerbeds arranged in a circular layout such that each flowerbed gets a different amount of sunlight. For the garden to be visually appealing and to ensure that no two flowerbeds directly adjacent to each other get the same amount of sunlight, Mario decides to use a specific plan: each flowerbed should have an amount of sunlight that minimizes the difference between the sunlight of adjacent flowerbeds. Mario has a list of N integers representing the amount of sunlight each flowerbed will receive if arranged linearly. Help Mario rearrange the flowerbeds into a circular layout in such a way that the difference in the amount of sunlight between adjacent flowerbeds is as small as possible. If there are multiple solutions, output any. Input The first line contains an integer N (3 ≤ N ≤ 10^5) — the number of flowerbeds. The second line contains N integers representing the amount of sunlight each flowerbed will receive if arranged linearly. The i-th element on the line denotes the sunlight for the i-th flowerbed (1 ≤ sunlight ≤ 10^9). Output Print N integers in a single line representing the new arrangement of the flowerbeds in a circular layout. Examples Input 4 8 4 6 2 Output 2 4 6 8 Input 6 1 3 2 5 4 6 Output 1 2 3 4 5 6 Note In the first example, the circular arrangement minimizing the difference between adjacent flowerbeds is 2, 4, 6, and 8. No two adjacent flowerbeds in this arrangement have the same amount of sunlight. In the second example, the optimal arrangement minimizing the difference is 1, 2, 3, 4, 5, and 6. This ensures a smooth transition in sunlight levels between adjacent flowerbeds.","solution":"def rearrange_flowerbeds(N, sunlight): Rearrange the flowerbeds in a circular layout to minimize the difference in sunlight between adjacent flowerbeds. Parameters: N (int): The number of flowerbeds sunlight (list of int): The amount of sunlight each flowerbed will receive Returns: list of int: The new arrangement of the flowerbeds in a circular layout sunlight.sort() rearranged = [] left, right = 0, N - 1 while left <= right: if left == right: rearranged.append(sunlight[left]) else: rearranged.append(sunlight[left]) rearranged.append(sunlight[right]) left += 1 right -= 1 return rearranged"},{"question":"Catherine is trying to solve a puzzle with a grid of cells, where each cell can either be alive (\'X\') or dead (\'.\'). The puzzle simulates the next generation of the grid based on the following rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overcrowding). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Neighbors are the cells that are directly horizontal, vertical, or diagonal to a given cell. Catherine needs your help to determine the state of the grid after one generation. Can you write a program to help her? Input The first line contains two integers `n` and `m` representing the number of rows and columns in the grid respectively (1 ≤ n, m ≤ 1000). The next `n` lines contain `m` characters each, representing the initial state of the grid. Each character is either \'X\' (indicating a live cell) or \'.\' (indicating a dead cell). Output Output the grid after simulating one generation using the rules defined above. Each line of the output should contain `m` characters. Examples Input 4 5 ..... .XX.. ..X.. ..... Output ..... .XX.. .XX.. ..... Input 3 3 .X. X.X .X. Output ... .X. ... Explanation In the first example: - Top left cell in 2nd row and 2nd column remains alive without changing. - The grid remains the same because the cells fulfill the conditions to stay alive or remain dead. In the second example: - The live cells in the middle of rows die due to overcrowding (each has four neighbors). - The live cell in the center remains dead as it doesn\'t have exactly three live neighbors. - Thus after the transformation, the cells that remain alive or dead are updated accordingly.","solution":"def next_generation(grid, n, m): def count_live_neighbors(row, col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < n and 0 <= c < m and grid[r][c] == \'X\': count += 1 return count new_grid = [[\'.\' for _ in range(m)] for _ in range(n)] for row in range(n): for col in range(m): live_neighbors = count_live_neighbors(row, col) if grid[row][col] == \'X\': if live_neighbors < 2 or live_neighbors > 3: new_grid[row][col] = \'.\' else: new_grid[row][col] = \'X\' else: if live_neighbors == 3: new_grid[row][col] = \'X\' return [\'\'.join(row) for row in new_grid] # Read input def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = data[2:n+2] result = next_generation(grid, n, m) for line in result: print(line) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob love playing with strings. They have a string `s` of length `n` consisting of lowercase English letters. They want to modify this string by performing exactly `k` operations. In each operation, they can choose any substring of the string `s` and reverse it. Alice and Bob are interested in knowing how lexicographically minimal the string can be after exactly `k` operations. Your task is to determine the resulting string after performing exactly `k` optimal operations that make it as lexicographically small as possible. Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 500), the length of the string and the number of operations respectively. The second line contains the string `s` of length `n`. Output Print the lexicographically smallest string that can be obtained after performing exactly `k` reverse operations on substrings of `s`. Examples Input 5 1 abcde Output adcbe Input 3 2 cba Output abc","solution":"def lexicographically_smallest_string(n, k, s): def reverse_substring(s, start, end): return s[:start] + s[start:end][::-1] + s[end:] if k == 1: # Perform one reversal on the whole string if n <= 2 if n == 1: return s min_string = s for i in range(n): new_string = s[i:] + s[:i] if new_string < min_string: min_string = new_string return min_string else: return \'\'.join(sorted(s)) # Example test cases # print(lexicographically_smallest_string(5, 1, \\"abcde\\")) # Expected output: \\"adcbe\\" # print(lexicographically_smallest_string(3, 2, \\"cba\\")) # Expected output: \\"abc\\""},{"question":"A delivery robot is assigned to deliver packages across a rectangular grid with `m` rows and `n` columns. The robot starts at the top-left corner of the grid (position `(1, 1)`) and needs to reach the bottom-right corner (position `(m, n)`). The robot can only move either down or right at any point in time. Unfortunately, some cells in the grid have obstacles that the robot cannot pass through. These obstacles are represented by a list of blocked cells. Your task is to determine the number of distinct paths the robot can take to reach the bottom-right corner, considering the obstacles. Input - The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid respectively. - The second line contains an integer `k` (0 ≤ k ≤ m * n), the number of blocked cells. - The following `k` lines each contain two integers `r_i` and `c_i` (1 ≤ r_i ≤ m, 1 ≤ c_i ≤ n), representing the row and column of the `i-th` blocked cell. Output - Print a single integer representing the number of distinct paths the robot can take to reach the bottom-right corner modulo `10^9 + 7`. Examples Input ``` 3 3 2 2 2 3 2 ``` Output ``` 1 ``` Input ``` 3 2 1 2 1 ``` Output ``` 1 ``` Input ``` 2 2 0 ``` Output ``` 2 ``` Explanation For the first example: - The grid looks like this: ``` . . . . # . . # . ``` The only path that the robot can take is `right -> down -> right`. For the second example: - The grid looks like this: ``` . . # . . . ``` The only path that the robot can take is `down -> down -> right`. For the third example: - The grid looks like this: ``` . . . . ``` The robot has two paths: `right -> right` and `down -> down`.","solution":"def num_paths_with_obstacles(m, n, blocked_cells): MOD = 10**9 + 7 # Create a grid initialized with zeros grid = [[0] * n for _ in range(m)] # Mark blocked cells on the grid for r, c in blocked_cells: grid[r - 1][c - 1] = -1 # using -1 to indicate a blocked cell # If the start or end is blocked, return 0 if grid[0][0] == -1 or grid[m - 1][n - 1] == -1: return 0 # Initialize the starting point grid[0][0] = 1 # Fill the grid using dynamic programming for i in range(m): for j in range(n): if grid[i][j] == -1: # Skip blocked cells continue if i > 0 and grid[i - 1][j] != -1: grid[i][j] += grid[i - 1][j] # Add paths from the top if j > 0 and grid[i][j - 1] != -1: grid[i][j] += grid[i][j - 1] # Add paths from the left grid[i][j] %= MOD # Take mod to prevent overflow # The number of paths to reach the bottom-right corner return grid[m - 1][n - 1]"},{"question":"The Kingdom of Blocoland is composed of n cities, each uniquely identified by an integer from 1 to n. These cities are connected by m bidirectional roads. The King has decreed that his cities need restructuring to ensure better connectivity and reliability of the transport network. He wants each city to be reachable from every other city without necessarily using any specific road more than once, but he also wants to minimize the overall number of roads. Your task is to determine if it\'s possible to achieve the King\'s goal by keeping only some of the existing roads and, if so, to provide one possible minimized list of roads. If it\'s not possible, indicate that restructuring cannot be done. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of cities and the number of existing roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting a road between city u and city v. Output If it is possible to restructure the city\'s roads to meet the King\'s goal, print the number of roads to be retained, followed by the retained roads. Each road should be printed on a new line in the form of two integers u and v (1 ≤ u, v ≤ n). If there are multiple solutions, print any of them. If it\'s not possible to achieve the King\'s requirement, print a single integer \\"-1\\" (without the quotes). Examples Input 4 4 1 2 2 3 3 4 4 1 Output 3 1 2 2 3 3 4 Input 4 2 1 2 3 4 Output -1","solution":"def restructure_roads(n, m, roads): from collections import defaultdict, deque def is_connected(adj_list, n): visited = [False] * n queue = deque([0]) visited[0] = True visited_count = 1 while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True visited_count += 1 queue.append(neighbor) return visited_count == n if n == 1: # If there\'s only one city, it\'s trivially connected without any roads. return 0, [] adj_list = defaultdict(list) for u, v in roads: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) if not is_connected(adj_list, n): return -1, [] mst_edges = [] parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges = [] for u, v in roads: edges.append((u-1, v-1)) for u, v in edges: if find(u) != find(v): union(u, v) mst_edges.append((u+1, v+1)) if len(mst_edges) == n - 1: break return len(mst_edges), mst_edges"},{"question":"You are a software engineer working on a social media platform. Your task is to implement a feature to check the popularity of hashtags in user posts. You will be given a list of user posts, and you need to determine if a specific hashtag appears in at least 50% of the posts. Input The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 10) — the number of user posts. The following n lines each contain a single user post. The last line contains the hashtag to check, which starts with the \'#\' character and contains no spaces. Output Output \\"POPULAR\\" if the hashtag appears in at least 50% of the posts, otherwise output \\"NOT POPULAR\\". Example Input 4 #fun #travel Experiencing new places! Had a great time at the beach! #fun Loving the new cafes in town. #food #fun Exploring the mountains. #fun Output POPULAR Note In the example, the hashtag \\"#fun\\" appears in 3 out of 4 posts, which is 75%, so the output is \\"POPULAR\\".","solution":"def check_hashtag_popularity(posts, hashtag): Returns \\"POPULAR\\" if the hashtag appears in at least 50% of the posts, otherwise returns \\"NOT POPULAR\\". count = 0 for post in posts: if hashtag in post: count += 1 if count >= len(posts) / 2: return \\"POPULAR\\" else: return \\"NOT POPULAR\\""},{"question":"In a simplified text editor, a string containing lowercase alphabets is given. The string can include words separated by a single space. The editor allows only two actions: 1. \\"undo\\" – which undoes the last appended string. 2. \\"append S\\" – which appends the string S to the current resulting string. Your task is to implement a function that processes a series of operations and returns the resulting string after all operations have been applied. Input The input consists of multiple lines. Each line represents an operation formatted as \\"undo\\" or \\"append S\\". The end of input is indicated by a line with the word \\"stop\\". This line should not be processed. Output Output the final resulting string after all operations have been performed. Example Input append hello append world undo append amazing stop Output helloamazing","solution":"def text_editor(operations): Processes a series of operations and returns the resulting string. result = [] history = [] for operation in operations: if operation == \\"stop\\": break if operation == \\"undo\\": if history: history.pop() # Remove the last appended string elif operation.startswith(\\"append \\"): _, string_to_append = operation.split(\\" \\", 1) history.append(string_to_append) return \'\'.join(history)"},{"question":"Input The input contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters and digits. Output Output the longest substring of s that contains no repeating characters. If there are multiple substrings of the same maximum length, output the one that appears first. Examples Input abcabcbb Output abc Input bbbbb Output b Input pwwkew Output wke","solution":"def longest_unique_substring(s): Returns the longest substring of s that contains no repeating characters. If there are multiple substrings of the same maximum length, returns the one that appears first. char_map = {} start = 0 max_len = 0 max_substr = \\"\\" for end, char in enumerate(s): if char in char_map: start = max(start, char_map[char] + 1) char_map[char] = end if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"A group of friends are planning a camping trip and they are discussing the minimum amount of water they need to carry. They have a specific schedule in which they will be active and a fixed number of water bottles that can carry a certain capacity of water each. To determine how much water they will need, they have decided to follow this plan: For each day i (1 ≤ i ≤ n), the number of active hours is given as hi and each hour they need exactly w liters of water. They have m water bottles, each of which can carry c liters of water. Your task is to determine the minimum number of water bottles the friends need to carry such that they have enough water for the whole trip. Input The first line contains two integers n and m (1 ≤ n, m ≤ 2000) representing the number of days of the trip and the number of water bottles available. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109), where hi is the number of active hours on the i-th day. The third line contains two integers w and c (1 ≤ w, c ≤ 109), where w is the amount of water needed per hour of activity and c is the capacity of each water bottle. Output Output a single integer - the minimum number of water bottles they need to carry for the trip such that they have enough water for all active hours. Examples Input 3 10 5 8 7 2 3 Output 10 Input 4 5 4 4 4 4 1 1 Output 16 Note In the first sample, the friends need 2 liters per hour of activity. The total water requirement is 5*2 + 8*2 + 7*2 = 40 liters. Since each bottle has a capacity of 3 liters, they will need ⌈40/3⌉ = 14 bottles which is less than or equal to the availablility (m = 10).","solution":"import math def minimum_bottles_needed(n, m, hours, w, c): Returns the minimum number of water bottles needed for the trip. Parameters: n (int): Number of days. m (int): Number of water bottles available. hours (list): List of active hours for each day. w (int): Water needed per hour of activity. c (int): Capacity of each water bottle. total_water_needed = sum(hours) * w bottles_needed = math.ceil(total_water_needed / c) return min(bottles_needed, m)"},{"question":"You are given a sequence of integers representing the heights of buildings on a street, and you need to determine the longest subarray that contains buildings whose heights form a continuous sequence (i.e., the difference between consecutive heights in the subarray is exactly 1). For example, a subarray [1, 2, 3, 4] is valid, but [1, 3, 2, 4] is not. Write a function that would find the length of the longest valid subarray where the heights form a continuous increasing sequence. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of buildings on the street. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100), the heights of the buildings. Output Print a single integer representing the length of the longest subarray with continuously increasing heights. Examples Input 7 3 1 2 3 1 4 5 Output 3 Input 5 5 4 3 2 1 Output 1 Explanation In the first example, the longest subarray with continuous increasing heights is [1, 2, 3] which has a length of 3. In the second example, there are no continuous increasing sequences, so the longest such subarray is of length 1 (i.e., any single building). Note - You can assume that if there exists such a subarray, it contains at least one building. - If no increasing subarray of length greater than 1 exists, the answer is 1.","solution":"def longest_continuous_sequence(n, heights): Finds the length of the longest subarray where heights form a continuous increasing sequence. Parameters: n (int): Number of buildings. heights (list of int): Heights of the buildings. Returns: int: Length of the longest valid subarray. max_length = 1 current_length = 1 for i in range(1, n): if heights[i] == heights[i - 1] + 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a rectangular grid, you start at the top-left corner and at each step, you can move right or down. You need to navigate to the bottom-right corner of the grid. Given some cells marked as obstacles, find the number of distinct paths from the top-left to the bottom-right corner that do not cross any obstacle. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 50), which represents the number of rows and columns in the grid respectively. The second line contains a single integer k (0 ≤ K ≤ n*m) — the number of obstacles. The following k lines each contain two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m), which represent the 1-based coordinates of an obstacle in the grid. Output Output the number of distinct paths from the top-left corner to the bottom-right corner of the grid such that no path crosses an obstacle. Examples Input 3 3 1 2 2 Output 2 Input 2 2 0 Output 2","solution":"def count_paths(n, m, obstacles): Returns the number of distinct paths from the top-left to the bottom-right corner of the grid, avoiding obstacles. grid = [[0] * m for _ in range(n)] if (1, 1) in obstacles or (n, m) in obstacles: return 0 grid[0][0] = 1 for i in range(n): for j in range(m): if (i + 1, j + 1) in obstacles: grid[i][j] = 0 else: if i > 0: grid[i][j] += grid[i - 1][j] if j > 0: grid[i][j] += grid[i][j - 1] return grid[-1][-1] def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) k = int(lines[1]) obstacles = {tuple(map(int, line.split())) for line in lines[2:2 + k]} return n, m, obstacles def grid_paths(input_str): n, m, obstacles = parse_input(input_str) return count_paths(n, m, obstacles)"},{"question":"Bob has a list of integers and wants to find out the minimum number of operations needed to make all elements of the list equal. In one operation, Bob can select any single element of the list and either increment or decrement it by 1. Write a function to determine the minimum number of operations required. Constraints: 1 ≤ N ≤ 10^5 (N is the length of the list) 1 ≤ A[i] ≤ 10^9 (A[i] is the ith element of the list) Input: The first line contains an integer N. The second line contains N space-separated integers denoting the list A. Output: Print a single integer, the minimum number of operations required to make all elements of the list equal. Example Input 4 2 2 3 5 Example Output 5 Explanation: To make all elements equal to 3: 1. Increment the first 2 to 3 (1 operation) 2. Increment the second 2 to 3 (1 operation) 3. Decrement the 5 to 3 (2 operations) Total operations = 1 + 1 + 2 = 4 To make all elements equal to 2: 1. Decrement the 3 to 2 (1 operation) 2. Decrement the 5 to 2 (3 operations) Total operations = 1 + 3 = 4 Minimum operations among the above choices is 4.","solution":"def min_operations_to_equal_elements(N, A): A.sort() median = A[N // 2] total_operations = sum(abs(a - median) for a in A) return total_operations"},{"question":"In an amusement park, there is a ride called the \\"Space Adventure\\" where animated robots are the main attraction. The behavior of these robots is controlled by sequences of instructions, where each instruction is represented by an uppercase letter between \'A\' and \'Z\'. A sequence of instructions can repeat itself in an indefinite loop. To make the robots\' actions predictable, the park\'s technical team needs to simplify these sequences. They decided that the simplest and most informative format would be to find the length of the smallest segment of the sequence that could be repeated to obtain the original sequence. For example, if the sequence is \\"ABCABCABC\\", the smallest segment that can be repeated is \\"ABC\\", and its length is 3. If the sequence is \\"ABAB\\", the smallest segment is \\"AB\\", with a length of 2. If a sequence does not repeat in such a manner, its smallest segment would be the sequence itself, and its length would be the length of the entire sequence. Given a sequence of instructions, determine the length of the smallest segment that the sequence can be constructed from. Input The first line contains an integer n (1 ≤ n ≤ 106) — the length of the sequence of instructions. The second line contains a string s of length n, consisting of uppercase letters \'A\' to \'Z\'. Output Output a single integer — the length of the smallest segment from which the sequence can be constructed. Examples Input 9 ABCABCABC Output 3 Input 4 ABAB Output 2 Input 5 ABCDE Output 5","solution":"def smallest_segment_length(n, s): Determine the length of the smallest segment that can be repeated to construct the original sequence s. :param n: Length of the sequence :param s: String of instructions :return: Length of the smallest segment for i in range(1, n + 1): if n % i == 0: segment = s[:i] if segment * (n // i) == s: return i return n"},{"question":"You are given two strings `s1` and `s2` where `s1` and `s2` consist only of lowercase English letters. Your task is to determine and print the longest common subsequence (LCS) between the two strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example: s1 = \\"abcde\\" s2 = \\"ace\\" The longest common subsequence between `s1` and `s2` is \\"ace\\". Input: Two lines each containing a single string. The first string is `s1` and the second string is `s2`. Output: Print the longest common subsequence. If there are multiple LCS, print any one. Constraints: 1 ≤ |s1|, |s2| ≤ 1000 Subtask 1: (50 points) 1 ≤ |s1|, |s2| ≤ 100 Subtask 2: (50 points) Original Constraints Hint: Use dynamic programming to build a table that helps to find the LCS by comparing each character of `s1` with `s2`. SAMPLE INPUT abcde ace SAMPLE OUTPUT ace","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence of two strings. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Backtrack to find the LCS lcs = [] i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"You have been given a sequence of integers that are either strictly increasing or strictly decreasing. Your task is to determine whether the sequence is increasing or decreasing. A sequence is strictly increasing if each subsequent element is greater than the previous one. Similarly, a sequence is strictly decreasing if each subsequent element is less than the previous one. Write a program to check the nature of sequence and output `Increasing` if the sequence is strictly increasing or `Decreasing` if the sequence is strictly decreasing. Input The input is given in the following format: n a_1 a_2 a_3 ... a_n The first line contains an integer n (2 leq n leq 100), the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^3 leq a_i leq 10^3). Output Output `Increasing` if the sequence is strictly increasing, otherwise output `Decreasing`. Examples Input 5 1 3 5 7 9 Output Increasing Input 4 10 8 6 4 Output Decreasing","solution":"def check_sequence(n, sequence): Determine if the sequence is strictly increasing or strictly decreasing. Args: n (int): Length of the sequence. sequence (list): List of integers representing the sequence. Returns: str: \'Increasing\' if the sequence is strictly increasing, \'Decreasing\' if it is strictly decreasing. if all(sequence[i] < sequence[i+1] for i in range(n-1)): return \\"Increasing\\" if all(sequence[i] > sequence[i+1] for i in range(n-1)): return \\"Decreasing\\" return \\"Neither\\""},{"question":"Given an array of integers `arr` of size `n` (where 2 ≤ n ≤ 1000), you are required to process a series of instructions to determine the resultant array. The operations involve shifting subsets of the array either left or right. Each shift operation specifies a start index `l`, an end index `r`, and a direction `d` which is either \'L\' for left or \'R\' for right. Shifting left means each element in the specified range [l, r] moves to the index immediately before it, and the first element in the range moves to the position of the last element. Shifting right is the opposite. Input - The first line contains a single integer n, the size of the array. - The second line contains n integers, the elements of the array `arr`. - The third line contains a single integer m, the number of operations. - Each of the next m lines contains three inputs: two integers `l` and `r` (0 ≤ l ≤ r < n) and a character `d` (\'L\' or \'R\') representing the range and the direction of the shift. Output - Print the resultant array after all operations have been applied. Example Input: ``` 5 1 2 3 4 5 3 1 3 L 0 4 R 2 4 L ``` Output: ``` 5 3 4 1 2 ``` Explanation: 1. After the first operation `1 3 L`, the array becomes `[1, 3, 4, 2, 5]`. 2. After the second operation `0 4 R`, the array becomes `[5, 1, 3, 4, 2]`. 3. After the third operation `2 4 L`, the array becomes `[5, 1, 4, 2, 3]`. Note that each shift operation only affects the specified range `[l, r]` and maintains the overall structure of the array outside this range.","solution":"def process_shifts(n, arr, m, operations): Process a series of shift operations on the array. Parameters: n (int): The size of the array `arr`. arr (list): The elements of the array. m (int): The number of operations. operations (list of tuples): Each tuple contains (l, r, d), where l (int): Start index of the range (0-based). r (int): End index of the range (0-based). d (str): Direction of the shift (\'L\' for left, \'R\' for right). Returns: list: Resultant array after applying all operations. for l, r, d in operations: if d == \'L\': temp = arr[l] for i in range(l, r): arr[i] = arr[i + 1] arr[r] = temp elif d == \'R\': temp = arr[r] for i in range(r, l, -1): arr[i] = arr[i - 1] arr[l] = temp return arr # Example usage n = 5 arr = [1, 2, 3, 4, 5] m = 3 operations = [(1, 3, \'L\'), (0, 4, \'R\'), (2, 4, \'L\')] result = process_shifts(n, arr, m, operations) print(result) # Output: [5, 1, 4, 2, 3]"},{"question":"The mayor of a small town has assigned you to develop an event scheduling system for the community center. The center hosts multiple event requests each day, each with a start and end time. The goal is to accommodate as many non-overlapping events as possible in a single day. You are given the duration and start time of each event, and you need to calculate the end time for each event by adding the duration to the start time. Two events are considered non-overlapping if one event ends before the other event starts. Write a function that takes a list of tuples, each containing the start time and duration of events scheduled for a single day, and returns the maximum number of non-overlapping events that can be accommodated. Input - The first line of input contains an integer T, denoting the number of test cases. - For each test case: - The first line contains an integer N, the number of events. - The following N lines each contain two integers, start and duration, indicating the start time and the duration of each event. Output For each test case, output a single integer indicating the maximum number of non-overlapping events that can be accommodated. Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 0 ≤ start[i] ≤ 1000 - 1 ≤ duration[i] ≤ 100 Example Input: 2 3 0 5 1 2 5 3 4 1 2 2 2 3 2 4 2 Output: 2 2 Explanation Example case 1: The three events are (0, 5), (1, 2), and (5, 3). We can accommodate events (1, 2) and (5, 3) without any overlap. Example case 2: The four events are (1, 2), (2, 2), (3, 2), and (4, 2). We can accommodate events (1, 2) and (4, 2) without any overlap.","solution":"def max_non_overlapping_events(test_cases): results = [] for events in test_cases: # Calculate end times and sort by end time (greedy approach) event_times = [(start, start + duration) for start, duration in events] event_times.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in event_times: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(lines[index].strip()) index += 1 events = [] for _ in range(N): start, duration = map(int, lines[index].strip().split()) events.append((start, duration)) index += 1 test_cases.append(events) return max_non_overlapping_events(test_cases)"},{"question":"You are given an array of integers and a target integer. Your task is to write a program that finds all unique pairs of integers in the array that add up to the target integer. Each pair should be sorted in non-decreasing order, and the list of pairs should be sorted in lexicographical order. Input The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains two integers N and K, where N is the number of elements in the array and K is the target integer. - The second line contains N space-separated integers, representing the elements of the array. Output For each test case, print all unique pairs of integers that add up to K. Each pair should be printed in the format (a, b) where a ≤ b. The pairs should be separated by spaces. If no such pairs exist, print \\"No Pairs Found\\". Constraints 1 ≤ T ≤ 50 2 ≤ N ≤ 100 -10^3 ≤ array elements ≤ 10^3 -10^3 ≤ K ≤ 10^3 Example Input: 2 6 9 1 2 3 4 5 6 4 5 1 1 1 1 Output: (3, 6) (4, 5) No Pairs Found","solution":"def find_pairs(N, K, arr): arr.sort() seen = set() pairs = set() for num in arr: complement = K - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) if not pairs: return \\"No Pairs Found\\" pairs = sorted(pairs) return \' \'.join(f\\"({a}, {b})\\" for a, b in pairs) def process_input_data(input_data): results = [] T = int(input_data[0]) index = 1 for _ in range(T): N, K = map(int, input_data[index].split()) arr = list(map(int, input_data[index + 1].split())) index += 2 result = find_pairs(N, K, arr) results.append(result) return results"},{"question":"You are given an array of n positive integers. You need to find the smallest positive integer that is not present in the array. If all integers from 1 to n are present, the smallest positive integer not present would be n+1. Your task is to write a function that returns this smallest positive integer. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. For each test case: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), where a_i is the i-th element of the array. Output For each test case, print the smallest positive integer that is not present in the array. Example Input 5 3 1 2 3 5 2 4 6 8 10 5 1 1 1 1 1 4 3 4 2 1 6 5 3 2 4 1 6 Output 4 1 2 5 7 Note In the first test case, the array contains integers 1, 2, and 3. The smallest positive integer not present is 4. In the second test case, the array contains no integers from 1 to 5. The smallest positive integer not present is 1. In the third test case, the array contains only the integer 1. The smallest positive integer not present is 2. In the fourth test case, the array contains all integers from 1 to 4. The smallest positive integer not present is 5. In the fifth test case, the array contains all integers from 1 to 6. The smallest positive integer not present is 7.","solution":"def find_smallest_missing_positive_integer(t, test_cases): output = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] # Convert to set to remove duplicates and for fast lookup. unique_elements = set(arr) smallest_missing = 1 while smallest_missing in unique_elements: smallest_missing += 1 output.append(smallest_missing) return output"},{"question":"A company is organizing a team-building event for its employees. Each employee can form a team with any other employee if they share at least one common skill. The team\'s strength is determined by the number of unique skills possessed by the team members. Your task is to find out the maximum team strength that can be achieved by selecting two employees for the event. Write a program to calculate the maximum possible team strength. Input The first line of the input contains an integer n (2 ≤ n ≤ 100), the number of employees. Each of the following n lines describes the skill set of an employee: - The first part of the line is an integer k (1 ≤ k ≤ 10), the number of skills that the employee has. - The following k integers represent the IDs of the skills (each ID is between 1 and 100). Output Output the maximum possible team strength in a single line. Examples Input 3 3 1 2 3 3 2 4 5 2 3 5 Output 5 Input 4 2 1 2 1 3 3 2 3 4 1 5 Output 4 Input 2 1 6 1 7 Output 2","solution":"def max_team_strength(n, skill_sets): Returns the maximum possible team strength by selecting two employees. :param n: Number of employees :param skill_sets: A list of sets, each containing the skill IDs of each employee :return: Maximum possible team strength max_strength = 0 for i in range(n): for j in range(i + 1, n): team_skills = skill_sets[i].union(skill_sets[j]) max_strength = max(max_strength, len(team_skills)) return max_strength # Function to read input and pass to the above logic def calculate_max_team_strength(n, employees_skills): skill_sets = [] for employee in employees_skills: skills = set(employee[1:]) skill_sets.append(skills) return max_team_strength(n, skill_sets)"},{"question":"You are given an integer array `arr` and an integer `N`. The task is to determine if there exists a subarray of `arr` whose elements sum up to `N`. Constraints * 1 <= |arr| <= 10^5 * -10^4 <= arr[i] <= 10^4 * -10^9 <= N <= 10^9 Input The input is given from Standard Input in the following format: ``` N arr ``` Where the first line contains the integer `N`, and the second line contains the space-separated integers of the array `arr`. Output If there exists a subarray whose elements sum up to `N`, print `YES`. Otherwise, print `NO`. Examples Input ``` 10 1 3 2 5 7 2 ``` Output ``` YES ``` Input ``` 5 1 2 3 ``` Output ``` YES ``` Input ``` 10 -1 -2 -3 -4 -5 ``` Output ``` NO ```","solution":"def subarray_sum_exists(N, arr): Determines if there exists a subarray in arr that sums up to N. Parameters: N (int): The target sum arr (list of int): The array to search within Returns: str: \\"YES\\" if such a subarray exists, \\"NO\\" otherwise current_sum = 0 sums_dict = {} for num in arr: current_sum += num if current_sum == N: return \\"YES\\" if (current_sum - N) in sums_dict: return \\"YES\\" sums_dict[current_sum] = sums_dict.get(current_sum, 0) + 1 return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(subarray_sum_exists(N, arr))"},{"question":"In a certain programming competition, the scoring system allocates points to participants based on the number of problems they solve and additional constraints related to the order in which they solve them. The goal is to maximize the participant\'s score under these constraints. Each problem has a fixed number of points it rewards, and it is required that the problems are solved in a non-decreasing order of their difficulty levels. If a participant skips a problem (i.e., solves problems 3 and 5 but not 4), they do not receive points for the skipped problem but must ensure that the remaining problems solved are still in non-decreasing order of difficulty. The participant can choose to skip any number of problems but must maximize the total score. You need to write a program to determine the maximum score a participant can achieve by optimally solving problems. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of problems. - The second line contains `n` integers `d1, d2, ..., dn` (1 ≤ di ≤ 10000) — the difficulty levels of the problems, given in the order they appear. - The third line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 100) — the points awarded for each problem, corresponding to the difficulties above. Output - Output a single integer, the maximum score the participant can achieve while solving the problems in a non-decreasing order of their difficulties. Examples Input 5 1 2 4 3 5 3 5 6 4 12 Output 26 Input 6 10 20 10 30 20 40 5 15 10 20 10 25 Output 60 Input 3 5 5 5 8 6 7 Output 21 Note In the first example, the participant can solve the problems with difficulties 1, 2, 4, and 5. The total score is 3 + 5 + 6 + 12 = 26. In the second example, the participant should solve the problems with difficulties 10, 20, and 30, and finally the problem with difficulty 40, for a total score of 5 + 15 + 20 + 25 = 65. In the third example, the participant can solve all problems since all have the same difficulty level and the sum of points is 21.","solution":"def max_score(n, difficulties, points): Determine the maximum score by solving problems in non-decreasing order of their difficulties. :param n: int : The number of problems :param difficulties: list of int : The difficulties of the problems :param points: list of int : The points of the problems :return: int : The maximum score dp = [0] * n max_score = 0 for i in range(n): dp[i] = points[i] for j in range(i): if difficulties[j] <= difficulties[i]: dp[i] = max(dp[i], dp[j] + points[i]) max_score = max(max_score, dp[i]) return max_score"},{"question":"Your task is to write a program that reads a sequence of non-negative integers and computes the sum of all primes up to but not including the number 100. The input ends when you read a number that is either negative or greater than or equal to 100. Use a function to check for the primality of each number. All numbers are non-negative integers. SAMPLE INPUT 3 11 20 17 50 99 4 SAMPLE OUTPUT 31","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the input list that are less than 100. sum_primes = 0 for number in numbers: if number < 0 or number >= 100: break if is_prime(number): sum_primes += number return sum_primes"},{"question":"Tina is a grid designer and she\'s working on a new pattern for her latest design. She needs your help to ensure the grid satisfies certain conditions. The grid is an n × m matrix of characters, where each character is either \'X\' or \'O\'. Tina wants the grid to be arranged in such a way that no two adjacent cells (horizontally or vertically) contain the same character. For instance, if a cell contains \'X\', all direct neighbors (up, down, left, right) must contain \'O\'. Similarly, if a cell contains \'O\', all direct neighbors must contain \'X\'. Given the dimensions of the grid, help Tina generate a grid that satisfies these conditions. Input The first line contains the number of test cases t (1 ≤ t ≤ 10). Each of the next t lines contains two integers n, m (1 ≤ n, m ≤ 100) — the number of rows and the number of columns in the grid. Output For each test case, print an n × m grid with characters \'X\' and \'O\' such that no two adjacent cells contain the same character. Example Input 2 3 3 2 4 Output XOX OXO XOX XOXO OXOX Note In the first test case, a possible arrangement is: XOX OXO XOX In the second test case, a possible arrangement is: XOXO OXOX","solution":"def generate_grid(n, m): Generates an n x m grid such that no two directly adjacent cells contain the same character. Characters used are \'X\' and \'O\'. grid = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') grid.append(\'\'.join(row)) return grid def handle_test_cases(test_cases): Handles multiple test cases and generates corresponding grids. :param test_cases: List of tuples [(n1, m1), (n2, m2), ...] with the dimensions of the grids. :return: List of grids, each grid being a list of strings. results = [] for n, m in test_cases: results.append(generate_grid(n, m)) return results"},{"question":"You are given an n x n matrix of integers. Your task is to determine if there exists a path from the top-left corner of the matrix to the bottom-right corner, moving only through cells that contain non-negative values. The path can only be constructed from cells that are adjacent horizontally or vertically. A path is defined as a sequence of cells (i1,j1), (i2,j2), ..., (ik,jk) such that for any cell (i,j) in the sequence (excluding the first and the last cells), (i,j) is adjacent to both the previous and the next cells in the sequence. Adjacent means that the cells share a common side. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the matrix. The next n lines contain n space-separated integers each, representing the matrix. Output Print \\"YES\\" if there exists such a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Examples Input 3 0 1 -1 1 0 -1 1 1 0 Output YES Input 2 0 -1 -1 0 Output NO Input 4 0 1 1 -1 -1 -1 1 -1 1 1 1 1 1 -1 -1 0 Output YES","solution":"def is_path_possible(n, matrix): def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < n def is_valid_move(x, y): return is_within_bounds(x, y) and matrix[x][y] >= 0 and not visited[x][y] def dfs(x, y): if x == n - 1 and y == n - 1: # reached bottom-right corner return True visited[x][y] = True directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # down, right, up, left for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and dfs(nx, ny): return True return False visited = [[False] * n for _ in range(n)] if matrix[0][0] < 0 or matrix[n-1][n-1] < 0: return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"In a distant kingdom, there exists a grand library with n books arranged sequentially from left to right. Each book has a unique identifier from 1 to n based on its position. One day, a mischievous librarian decided to play a game. The librarian will perform a series of operations where in each operation he either pulls out the leftmost book or the rightmost book from the library\'s arrangement and places it at the end of the arrangement. The challenge for the library visitors is to determine the minimum number of such operations required to rearrange the books in a given target order. Input: The first line of the input contains a single integer n, the number of books in the library (1 ≤ n ≤ 100). The second line contains n distinct integers a_1, a_2, …, a_n, which represent the initial order of the books from left to right. The third line contains n distinct integers b_1, b_2, …, b_n, which represent the target order of the books from left to right. Output: Print a single integer, the minimum number of operations required to rearrange the books in the given target order. Examples Input 5 1 2 3 4 5 3 4 5 1 2 Output 2 Input 4 4 3 2 1 1 2 3 4 Output 4 Note In the first example, pulling out the leftmost book (1) and placing it at the end, followed by pulling out the new leftmost book (2) and placing it at the end, achieves the target order. In the second example, pulling out the rightmost book (1) and placing it at the end four times achieves the target order.","solution":"def min_operations_to_rearrange(n, initial_order, target_order): Determines the minimum number of operations required to rearrange the books from the initial order to the target order. Parameters: n (int): Number of books. initial_order (list): The initial order of books. target_order (list): The target order of books. Returns: int: Minimum number of operations required to reach the target order. for shift in range(n): if initial_order[shift:] + initial_order[:shift] == target_order: return shift return n"},{"question":"In a city, there are m bus routes. Each bus route is a direct connection between two bus stops. You are given the list of routes, where each route is represented as a tuple (a, b) indicating a direct route between stop \'a\' and stop \'b\'. Your task is to determine the number of distinct bus stops in the city. Input The first line contains an integer m (1 ≤ m ≤ 100) — the number of bus routes. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ 1000) representing a direct route between bus stops \'a\' and \'b\'. Output Print a single integer — the number of distinct bus stops in the city. Example Input 3 1 2 2 3 4 1 Output 4 Note In the given example, there are 3 bus routes: (1, 2), (2, 3), and (4, 1). The distinct bus stops are 1, 2, 3, and 4, totaling 4 distinct stops.","solution":"def count_distinct_stops(m, routes): Counts the number of distinct bus stops in the city given m bus routes. Parameters: m (int): the number of bus routes routes (list of tuples): list of tuples where each tuple (a, b) represents a direct route between stops a and b Returns: int: number of distinct bus stops stops = set() for a, b in routes: stops.add(a) stops.add(b) return len(stops)"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a unique integer identifier ranging from 1 to n. Andrew and Alex are again involved in a game, but this time it is played on this graph. Initially, both players pick one node each as their starting position. The game proceeds in turns, and Andrew always starts first. In each turn, a player can move to any neighboring node that they have not visited before. If a player cannot make a move, they lose the game. A player loses the game if they cannot move or if they are forced to move to a node that is already occupied by the opponent. Determine who will win if both players play optimally. Input The first line contains two integers, n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105). The next m lines describe the edges of the graph. Each line consists of two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting an edge between nodes u and v. The last line contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) denoting the starting positions of Andrew and Alex, respectively. Output Print \\"Andrew\\" if Andrew wins, otherwise print \\"Alex\\" (without the quotes). Examples Input 5 4 1 2 2 3 3 4 4 5 1 5 Output Andrew Input 4 4 1 2 2 3 3 4 4 2 1 4 Output Alex","solution":"def solve_game(n, m, edges, a, b): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 while queue: node, dist = queue.popleft() for neigh in graph[node]: if visited[neigh] == -1: visited[neigh] = dist + 1 queue.append((neigh, dist + 1)) return visited # Perform BFS from both starting points dist_a = bfs(a) dist_b = bfs(b) # Check distances for i in range(1, n + 1): if i == a or i == b: continue # Ignore starting positions if dist_a[i] < dist_b[i]: return \\"Andrew\\" elif dist_b[i] < dist_a[i]: return \\"Alex\\" # If it reaches here, both can reach all nodes in the same number of moves return \\"Andrew\\" # If all distances are the same, Andrew wins because he starts first"},{"question":"In a certain kingdom, the currency is composed of coins of different values. The king has provided a list of coin denominations available in the kingdom. Your task is to determine the minimum number of coins required to make a specific amount `V`. Input The first line contains one integer `n` (1 ≤ n ≤ 10^3) — the number of different coin denominations. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the value of each denomination. The third line contains one integer `V` (1 ≤ V ≤ 10^9) — the value to be made up using the minimum number of coins. Output Output one integer — the minimum number of coins required to make up the value `V`. If it is not possible to make up the value using the given denominations, output `-1`. Examples Input 3 1 2 5 11 Output 3 Input 2 3 7 5 Output -1 Note In the first test, the value 11 can be made up using three coins: two coins of value 5 and one coin of value 1. In the second test, it is not possible to make up the value 5 with the given denominations, hence the output is `-1`.","solution":"def min_coins(n, denominations, V): Determine the minimum number of coins required to make a specific amount V. Parameters: n (int): Number of different coin denominations. denominations (list): List of available coin denominations. V (int): Value to be made up using the minimum number of coins. Returns: int: Minimum number of coins required to make up the value V. If it is not possible, return -1. # We will use dynamic programming to solve this problem. # Initialize an array to store minimum coins required for all values from 0 to V dp = [float(\'inf\')] * (V + 1) dp[0] = 0 # Base case, to make 0 value, 0 coins are needed. # Update dp array for coin in denominations: for v in range(coin, V + 1): if dp[v - coin] != float(\'inf\'): dp[v] = min(dp[v], dp[v - coin] + 1) return dp[V] if dp[V] != float(\'inf\') else -1"},{"question":"You are given an array consisting of n integers. Your task is to find the k smallest and k largest elements from the array. Write a program that performs this task using a min-heap and a max-heap data structure to achieve an efficient solution. # Detailed Steps: 1. Create a min-heap and insert all elements of the array into it. 2. Extract the k smallest elements from the min-heap and store them in a list. 3. Create a max-heap and insert all elements of the array into it. 4. Extract the k largest elements from the max-heap and store them in another list. 5. Sort both lists before printing. # Constraints: * 1 ≤ n ≤ 100,000 * 1 ≤ k ≤ min(100, n) * -109 ≤ each element in the array ≤ 109 # Input: The first line contains two integers n and k, the number of elements in the array and the number of smallest and largest elements to find, respectively. The next line contains n integers separated by spaces. # Output: Print two lines: 1. The k smallest elements in ascending order. 2. The k largest elements in ascending order. # Examples Input 10 3 5 9 1 3 7 6 8 2 4 10 Output 1 2 3 8 9 10 Input 5 2 -1 2 -3 4 -5 Output -5 -3 2 4","solution":"import heapq def find_k_smallest_largest_elements(n, k, array): Returns the k smallest and k largest elements from the array in ascending order. # Finding k smallest elements using min-heap k_smallest = heapq.nsmallest(k, array) k_smallest.sort() # Sorting the k smallest elements in ascending order # Finding k largest elements using max-heap k_largest = heapq.nlargest(k, array) k_largest.sort() # Sorting the k largest elements in ascending order return k_smallest, k_largest"},{"question":"Given a grid representation of a game board, you are required to identify the longest consecutive sequence of the same number in the grid. The sequence can be vertically, horizontally, or diagonally aligned. The grid is a 2D array of integers where each element represents a cell in the game board with a value between 1 and 9 inclusive. Write a function that takes a 2D array as input and returns the length of the longest consecutive sequence found in the grid. Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. - The next n lines each contain m integers separated by spaces, representing the values of each cell in the grid. Output - Output a single integer representing the length of the longest consecutive sequence of the same number in the grid. Examples Input 3 3 1 2 2 3 2 4 1 2 2 Output 3 Input 4 5 1 2 2 2 2 3 3 4 4 4 1 1 1 1 1 2 2 2 2 2 Output 5 Explanation In the first example, the longest sequence is the vertical sequence of \'2\'s in the last column, which has length 3. In the second example, the longest sequence is the horizontal sequence of \'1\'s in the third row, or the \'2\'s in the last row, each of which has length 5.","solution":"def longest_consecutive_sequence(grid): def dfs(x, y, dx, dy): number = grid[x][y] length = 1 nx, ny = x + dx, y + dy while 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == number: length += 1 nx += dx ny += dy return length if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) max_length = 0 for i in range(n): for j in range(m): max_length = max(max_length, dfs(i, j, 1, 0)) # vertical max_length = max(max_length, dfs(i, j, 0, 1)) # horizontal max_length = max(max_length, dfs(i, j, 1, 1)) # diagonal max_length = max(max_length, dfs(i, j, 1, -1)) # diagonal / return max_length"},{"question":"A leading tech company has been investing heavily in developing intelligent assistant chatbots. As part of their upcoming release, they plan to introduce a new feature that enables the bot to analyze text and determine the sentiment expressed in the message as either positive, neutral, or negative. To improve the sentiment analysis component, you have been tasked with creating a simplified version of it. The system will classify a message as positive if it contains more positive words than negative words, negative if it contains more negative words than positive words, or neutral if the number of positive and negative words is equal. Messages are only composed of words and spaces, and words are separated by a single space. For simplicity, assume there are no punctuation marks in the messages. You are provided with preset lists of positive and negative words. Write a function `determine_sentiment(message: str, positive_words: List[str], negative_words: List[str]) -> str` that receives a message and the lists of positive and negative words and returns the sentiment of the message as a string: \\"Positive\\", \\"Neutral\\", or \\"Negative\\". # Input - A string `message` containing the message to be analyzed. - A list of strings `positive_words` containing positive words. - A list of strings `negative_words` containing negative words. # Output - A string indicating the sentiment of the message: \\"Positive\\", \\"Neutral\\", or \\"Negative\\". # Constraints - The length of `message` is between 1 and 1000. - The length of each word (both in message and in the word lists) is between 1 and 20. - There are no punctuation marks in the message and words are separated by a single space. - The number of words in positive_words and negative_words is at most 100 each. # Example Input ```python message = \\"I am happy because today is a good day\\" positive_words = [\\"happy\\", \\"good\\", \\"great\\", \\"amazing\\", \\"positive\\"] negative_words = [\\"sad\\", \\"bad\\", \\"terrible\\", \\"awful\\", \\"negative\\"] ``` Output ``` \\"Positive\\" ``` Input ```python message = \\"I am having a terrible bad day\\" positive_words = [\\"happy\\", \\"good\\", \\"great\\", \\"amazing\\", \\"positive\\"] negative_words = [\\"sad\\", \\"bad\\", \\"terrible\\", \\"awful\\", \\"negative\\"] ``` Output ``` \\"Negative\\" ``` Input ```python message = \\"It is an ordinary day\\" positive_words = [\\"happy\\", \\"good\\", \\"great\\", \\"amazing\\", \\"positive\\"] negative_words = [\\"sad\\", \\"bad\\", \\"terrible\\", \\"awful\\", \\"negative\\"] ``` Output ``` \\"Neutral\\" ```","solution":"from typing import List def determine_sentiment(message: str, positive_words: List[str], negative_words: List[str]) -> str: words = message.split() positive_count = sum(1 for word in words if word in positive_words) negative_count = sum(1 for word in words if word in negative_words) if positive_count > negative_count: return \\"Positive\\" elif negative_count > positive_count: return \\"Negative\\" else: return \\"Neutral\\""},{"question":"You are working on a networking application where you handle multiple users\' connections in a chat room. Each user can send a \\"message\\" at a given timestamp. You need to implement a feature to manage messages sent within the chat room, which includes determining the longest sequence of messages where each subsequent message is sent after a known lag period. Given a list of timestamps and a lag period, your task is to identify the longest sequence of messages where the difference between any two consecutive timestamps in this sequence is exactly equal to the provided lag period. [Input] First line contains an integer t denoting the number of test cases. Each test case starts with an integer n denoting the number of timestamps followed by an integer lag denoting the fixed interval between messages. Next line contains n integers representing the timestamps. [Output] For each test case, output an integer representing the length of the longest sequence of messages with the specified lag interval. [Constraints] 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 1 ≤ lag ≤ 10^9 1 ≤ timestamp ≤ 10^9 SAMPLE INPUT 2 5 2 1 3 5 8 11 6 3 1 4 7 10 13 16 SAMPLE OUTPUT 3 6","solution":"def longest_message_sequence(t, test_cases): results = [] for case in test_cases: n, lag, timestamps = case timestamps.sort() longest_seq = 1 current_seq = 1 for i in range(1, n): if timestamps[i] - timestamps[i-1] == lag: current_seq += 1 if current_seq > longest_seq: longest_seq = current_seq else: current_seq = 1 results.append(longest_seq) return results def process_input(input_str): lines = input_str.split(\'n\') t = int(lines[0].strip()) test_cases = [] idx = 1 for _ in range(t): n, lag = map(int, lines[idx].strip().split()) timestamps = list(map(int, lines[idx+1].strip().split())) test_cases.append((n, lag, timestamps)) idx += 2 return t, test_cases def main(input_str): t, test_cases = process_input(input_str) return longest_message_sequence(t, test_cases)"},{"question":"Takashi loves playing games on his computer, and he especially enjoys creating custom maps for his favorite game, \\"Treasure Hunt.\\" The game involves navigating through a 2D grid to reach a treasure, while avoiding obstacles. He wants a function that helps him determine whether a direct path from his starting position to the treasure position is possible without hitting any obstacles. Given a grid represented as a list of strings, where each character can be: - \'.\' representing an open cell, - \'#\' representing an obstacle, - \'S\' representing Takashi\'s starting position, - \'T\' representing the treasure\'s position. Your task is to write a function that determines if there is a direct path (horizontal or vertical) from \'S\' to \'T\' without crossing any obstacles \'#\'. Note that diagonal movements are not allowed. Constraints: - The grid size will be between 2x2 and 50x50 inclusive. - There will be exactly one \'S\' and one \'T\' in the grid. Input: The function will receive a list of strings as input. Output: The function should return \\"YES\\" if a direct path exists, and \\"NO\\" otherwise. Examples: Input: ```python [ \\"S..\\", \\".#.\\", \\"..T\\" ] ``` Output: ```python \\"NO\\" ``` Input: ```python [ \\"S.#\\", \\"..#\\", \\"..T\\" ] ``` Output: ```python \\"YES\\" ``` Input: ```python [ \\"S..T\\", \\"....\\", \\"#.\\", \\"....\\" ] ``` Output: ```python \\"YES\\" ```","solution":"def is_direct_path_possible(grid): Determines if there is a direct path from \'S\' to \'T\' without crossing any obstacles \'#\'. :param grid: List of strings representing the grid :return: \\"YES\\" if a direct path exists, otherwise \\"NO\\" rows = len(grid) cols = len(grid[0]) # Find the positions of \'S\' and \'T\' s_pos = None t_pos = None for i in range(rows): for j in range(cols): if grid[i][j] == \'S\': s_pos = (i, j) if grid[i][j] == \'T\': t_pos = (i, j) if not s_pos or not t_pos: return \\"NO\\" s_row, s_col = s_pos t_row, t_col = t_pos # Check vertical path if s_col == t_col: if all(grid[row][s_col] != \'#\' for row in range(min(s_row, t_row), max(s_row, t_row) + 1)): return \\"YES\\" # Check horizontal path if s_row == t_row: if all(grid[s_row][col] != \'#\' for col in range(min(s_col, t_col), max(s_col, t_col) + 1)): return \\"YES\\" return \\"NO\\""},{"question":"David is training for a marathon and wants to track his progress. He has a list of distances he runs each day for a month. He is curious to know, if on any given day, he achieves a new personal best distance (i.e., the distance run on that day is greater than any distance he ran on the previous days). Write a program that takes the number of days and the list of distances run each day and outputs a list of boolean values for each day indicating whether the distance run on that day is a new personal best. Input The first line will contain a single integer, N, denoting the number of days. N lines follow, each containing a single integer, di, which is the distance run on the ith day. Output For each day, output \\"true\\" if the distance run on that day is a new personal best, otherwise output \\"false\\". Constraints 1 ≤ N ≤ 100 1 ≤ di ≤ 1000 SAMPLE INPUT 5 5 10 7 11 10 SAMPLE OUTPUT true true false true false","solution":"def new_personal_bests(N, distances): Returns a list of booleans indicating if the distance run on each day is a new personal best. Parameters: N (int): Number of days. distances (list of int): List of distances run each day. Returns: List of Booleans: Each entry corresponds to whether the distance on that day was a new personal best. personal_bests = [] max_distance = 0 for distance in distances: if distance > max_distance: personal_bests.append(True) max_distance = distance else: personal_bests.append(False) return personal_bests"},{"question":"In a town, there is a circular street with n houses numbered from 1 to n sequentially in a clockwise direction. The mailman delivers mail to these houses in a specific order determined by an array of house numbers. The mailman always starts his delivery at house number 1 at the beginning of the day. He then follows the order given in the array, moving clockwise to each house in the sequence. If the mailman is currently at house x and needs to deliver mail to house y, he will travel the shortest distance clockwise from x to y. If y < x, he travels n - x + y houses to reach y. Your task is to calculate the total distance the mailman travels to deliver all the mails according to the given order. Input The first line contains an integer n (2 ≤ n ≤ 200,000), which is the number of houses in the street. The second line contains an integer m (1 ≤ m ≤ 200,000), which is the number of houses the mailman needs to deliver mail to. The third line contains m integers a1, a2, ..., am (1 ≤ ai ≤ n), which represent the sequence of house numbers to which the mailman has to deliver the mail in the given order. Output Print one integer, the total distance the mailman travels to deliver all the mails. Examples Input 5 3 3 1 2 Output 6 Input 4 2 4 2 Output 3 Note In the first example, the mailman starts at house 1, travels to house 3 (2 houses), then goes back to house 1 (3 houses), and finally to house 2 (1 house). The total distance is 2 + 3 + 1 = 6. In the second example, the mailman starts at house 1, travels to house 4 (3 houses), and then to house 2 (2 houses). The total distance is 3 + 2 = 5.","solution":"def total_mail_distance(n, m, houses): Calculate the total distance the mailman travels. Parameters: n (int): Total number of houses in circular street. m (int): Number of houses the mailman delivers to. houses (list of int): List of house numbers in delivery order. Returns: int: Total distance travelled by the mailman. total_distance = 0 current_position = 1 for house in houses: if house >= current_position: total_distance += house - current_position else: total_distance += n - current_position + house current_position = house return total_distance"},{"question":"# Mastermind Guess Evaluation Mastermind is a code-breaking game where one player (the codemaker) sets a code and another player (the codebreaker) tries to guess it within a certain number of attempts. A code consists of a sequence of colored pegs, and each guess results in feedback via black and white pegs. A black peg indicates a peg of the correct color in the correct position, while a white peg indicates a peg of the correct color in the wrong position. Duplicate colors are allowed in the code. Write a function to evaluate a guess against the codemaker\'s code and determine the number of black and white pegs. Function Signature: ```python def evaluate_guess(code: str, guess: str) -> (int, int): pass ``` Input - `code`: a string representing the codemaker\'s code (1 ≤ len(code) ≤ 10) where each character is a lowercase alphabet representing a color. - `guess`: a string representing the codebreaker\'s guess of the same length and composition as `code`. Output - A tuple `(black_pegs, white_pegs)` representing the number of black and white pegs that result from comparing the guess with the code. Examples ```python assert evaluate_guess(\\"rgyb\\", \\"rgby\\") == (2, 2) assert evaluate_guess(\\"rrrr\\", \\"yyyy\\") == (0, 0) assert evaluate_guess(\\"bgrg\\", \\"bgrr\\") == (3, 0) assert evaluate_guess(\\"abcde\\", \\"baced\\") == (1, 4) ``` Note - For the first example, there are two black pegs (\'r\' at position 0 and \'g\' at position 1) and two white pegs (\'b\' and \'y\', incorrect positions). - In the second example, none of the guessed colors match any in the code. - The third example has three black pegs (\'b\' at position 0, \'g\' at position 1, and \'r\' at position 2) with no white pegs. - The fourth example has one black peg (\'a\' at position 0) and four white pegs (\'b\', \'c\', \'d\', \'e\', incorrect positions).","solution":"def evaluate_guess(code: str, guess: str) -> (int, int): Evaluates the guess against the code and returns the number of black and white pegs. Black pegs indicate the correct color in the correct position. White pegs indicate the correct color in the wrong position. black_pegs = 0 white_pegs = 0 # Convert strings to lists for easier manipulation code_list = list(code) guess_list = list(guess) # First pass: Count black pegs and mark them for i in range(len(code)): if guess_list[i] == code_list[i]: black_pegs += 1 code_list[i] = guess_list[i] = None # Second pass: Count white pegs for i in range(len(code)): if guess_list[i] is not None and guess_list[i] in code_list: white_pegs += 1 code_list[code_list.index(guess_list[i])] = None return black_pegs, white_pegs"},{"question":"Lina is developing a software system for a small warehouse to keep track of the inventory. Each product is uniquely identified by an ID and belongs to a category. The warehouse maintains a log of daily transactions where each transaction can be either an addition or a removal of a product. The software needs to provide an up-to-date report of the inventory and the stock levels by category. The warehouse manager has requested a feature to determine the stock level of each product after processing a sequence of transactions and to generate a summary report consisting of the total number of products in each category. You are required to implement a function that processes the transactions and generates the report. The function should follow these rules: 1. If a `remove` transaction tries to remove more units of a product than are available, it should only remove the available units. 2. The summary report should list categories in ascending order, including only categories that have at least one product in stock. Your task is to implement this functionality in Python. # Input - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5), where `n` is the number of products and `m` is the number of transactions. - The next `n` lines each contain a tuple of an integer `product_id` (1 ≤ product_id ≤ 10^5), a string `category`, and an integer `initial_stock` (0 ≤ initial_stock ≤ 10^6). Each product has a unique `product_id`. - The following `m` lines each contain a tuple representing a transaction, with the format: - `\\"add\\"` `product_id` `quantity` or - `\\"remove\\"` `product_id` `quantity` # Output - For each product, output the `product_id` and its final stock level after processing all transactions, sorted by `product_id`. - Generate a summary list of categories and total stock levels in each category, sorted by category name. # Examples Input ```plaintext 4 5 1 Electronics 100 2 Groceries 50 3 Clothes 75 4 Electronics 60 add 1 50 remove 2 20 add 3 30 remove 4 10 remove 1 200 ``` Output ```plaintext 1 0 2 30 3 105 4 50 Electronics 50 Groceries 30 Clothes 105 ``` Explanation - After processing the transactions: - Product 1 (initial_stock = 100, category = Electronics): - Add 50: stock = 150 - Remove 200: stock = 0 (not enough stock to remove 200, removing all available) - Product 2 (initial_stock = 50, category = Groceries): - Remove 20: stock = 30 - Product 3 (initial_stock = 75, category = Clothes): - Add 30: stock = 105 - Product 4 (initial_stock = 60, category = Electronics): - Remove 10: stock = 50 The summary reports the remaining stock for each category: - `Electronics` total stock = 50 - `Groceries` total stock = 30 - `Clothes` total stock = 105 The output is sorted by `product_id` for individual stocks and by `category` for the summary.","solution":"def process_transactions(n, m, products, transactions): # Initialize dictionaries to store product stock and category-wise stock product_stock = {} category_dict = {} for prod_id, category, stock in products: product_stock[prod_id] = {\\"category\\": category, \\"stock\\": stock} if category not in category_dict: category_dict[category] = 0 category_dict[category] += stock # Process each transaction for transaction in transactions: action, prod_id, amount = transaction if action == \\"add\\": product_stock[prod_id][\\"stock\\"] += amount category_dict[product_stock[prod_id][\\"category\\"]] += amount elif action == \\"remove\\": available_stock = product_stock[prod_id][\\"stock\\"] if available_stock >= amount: product_stock[prod_id][\\"stock\\"] -= amount category_dict[product_stock[prod_id][\\"category\\"]] -= amount else: category_dict[product_stock[prod_id][\\"category\\"]] -= available_stock product_stock[prod_id][\\"stock\\"] = 0 # Create a sorted list of product stocks by product_id sorted_products = sorted(product_stock.items()) product_stock_report = [(prod_id, data[\\"stock\\"]) for prod_id, data in sorted_products] # Create a sorted list of categories with their total stock category_report = sorted((cat, stock) for cat, stock in category_dict.items() if stock > 0) return product_stock_report, category_report"},{"question":"You are managing an online bookstore, which needs a system to categorize books based on their popularity. Each book in the bookstore can be rated by readers and has multiple tags associated with it. To determine a book\'s popularity, you are given two pieces of information: 1. A list of tuples, where each tuple contains a book identifier and its rating. 2. A list of tuples, where each tuple contains a book identifier and a tag associated with it. Your task is to find the most popular book for each tag. The most popular book is defined as the book with the highest rating among all books associated with that tag. If multiple books have the same highest rating for a tag, any one of them can be chosen as the most popular book. Write a function to solve this problem. Your function should return a dictionary where the keys are tags and the values are the book identifiers of the most popular books for those tags. INPUT The function should accept two arguments: 1. A list of tuples, `ratings`, where each tuple contains an integer book identifier and an integer rating. 2. A list of tuples, `tags`, where each tuple contains an integer book identifier and a string tag. OUTPUT The function should return a dictionary where keys are strings (tags) and values are integers (book identifiers) representing the most popular book for each tag. CONSTRAINTS - Each book identifier in `ratings` and `tags` is unique. - There are no duplicate tags for a specific book. - There can be at most 10^5 books and tags. SAMPLE INPUT ratings = [(1, 5), (2, 3), (3, 9), (4, 7)] tags = [(1, \\"fiction\\"), (2, \\"non-fiction\\"), (3, \\"fiction\\"), (4, \\"adventure\\"), (1, \\"drama\\"), (3, \\"adventure\\"), (2, \\"drama\\")] SAMPLE OUTPUT { \\"fiction\\": 3, \\"non-fiction\\": 2, \\"adventure\\": 3, \\"drama\\": 1 } Explanation The book with identifier 1 has a rating of 5 and tags \\"fiction\\" and \\"drama\\". The book with identifier 2 has a rating of 3 and tags \\"non-fiction\\" and \\"drama\\". The book with identifier 3 has a rating of 9 and tags \\"fiction\\" and \\"adventure\\". The book with identifier 4 has a rating of 7 and a tag \\"adventure\\". - The most popular book with the \\"fiction\\" tag is book 3 with rating 9. - The most popular book with the \\"non-fiction\\" tag is book 2 with rating 3. - The most popular book with the \\"adventure\\" tag is book 3 with rating 9. - The most popular book with the \\"drama\\" tag is book 1 with rating 5.","solution":"def find_most_popular_books(ratings, tags): # Create a dictionary to store book ratings rating_dict = dict(ratings) # Create a dictionary to store the most popular book for each tag tag_popularity = {} # Iterate through each tag entry for book_id, tag in tags: if tag not in tag_popularity: tag_popularity[tag] = (book_id, rating_dict[book_id]) else: # Compare the current book\'s rating with the stored most popular book\'s rating for this tag if rating_dict[book_id] > tag_popularity[tag][1]: tag_popularity[tag] = (book_id, rating_dict[book_id]) # Transform the result to match the required output format result = {tag: book_id for tag, (book_id, _) in tag_popularity.items()} return result"},{"question":"You are given two strings S and T. Your task is to check if T can be formed by shuffling the characters of S and inserting exactly one additional character at any position. If T can be formed, print \\"Yes\\"; otherwise, print \\"No\\". Constraints * 1 ≤ |S| ≤ 10^5 * |T| = |S| + 1 * S and T consist of lowercase English letters. Input Input is given from Standard Input in the following format: S T Output Print \\"Yes\\" if T can be formed by shuffling S and inserting exactly one additional character, otherwise print \\"No\\". Examples Input abc abcd Output Yes Input abc acbd Output Yes Input abc abcefg Output No","solution":"def can_form_by_shuffling_and_inserting(S, T): Checks if T can be formed by shuffling the characters of S and inserting exactly one additional character. from collections import Counter # Creating counters for both strings counter_S = Counter(S) counter_T = Counter(T) # Finding the differences in the counts difference = counter_T - counter_S # Check if there is exactly one additional character in T if len(difference) == 1 and list(difference.values())[0] == 1: return \\"Yes\\" return \\"No\\""},{"question":"You are given a string of length n, which consists only of lowercase English letters. Your task is to determine if you can delete some characters from the string to create a new string which is made up of k consecutive identical characters. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n) followed by a string of length n consisting of lowercase English letters. Output For each test case, output \\"YES\\" if it is possible to form a string of k consecutive identical characters by deleting some characters from the given string, otherwise output \\"NO\\". Examples Input 3 7 3 aaabbbc 6 4 aabbcc 5 1 abcde Output YES NO YES Explanation In the first test case, we can form the string \\"aaa\\" or \\"bbb\\" by deleting the necessary characters. In the second test case, it is not possible to form 4 consecutive identical characters. In the third test case, each character is already a single consecutive identical character, so we don\'t need to delete anything. Thus, the answer is \\"YES\\".","solution":"def can_form_k_consecutive_identical(n, k, s): Determines if it\'s possible to delete some characters to form a string of k consecutive identical characters. :param n: Length of the string :param k: Required number of consecutive identical characters :param s: Input string :return: \\"YES\\" if it\'s possible, \\"NO\\" otherwise if k == 1: # Any string can be reduced to one character return \\"YES\\" for char in set(s): # Check each unique character in the string if s.count(char) >= k: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for n, k, s in test_cases: results.append(can_form_k_consecutive_identical(n, k, s)) return results"},{"question":"Given a list of unique integers, write a program to find all pairs of numbers that sum up to a specific target number. The pairs should be output in ascending order based on the first element of the pair. If there are no pairs that sum up to the target, the program should output an empty list. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers. - The second line contains n space-separated integers. - The third line contains the target number. Output - Output all pairs of integers that sum up to the target number in ascending order, one pair per line. Each pair should be in the format (a, b) where a < b. If no such pairs exist, output an empty list. Example Input: 6 1 2 3 4 5 6 7 Output: (1, 6) (2, 5) (3, 4) Input: 5 8 7 2 5 3 10 Output: (2, 8) (3, 7)","solution":"def find_pairs_with_sum(n, numbers, target): Returns all pairs of numbers that sum up to the target number. pairs = [] numbers.sort() number_set = set(numbers) for number in numbers: complement = target - number if complement > number and complement in number_set: pairs.append((number, complement)) return pairs"},{"question":"The city of Azara is planning to hold a festival, and they need to set up stages for performances. The city has m performance stages arranged in a circle. Each stage has its own set of requirements that must be fulfilled in order to set it up. The i-th stage requires pi units of power to operate. The city has k power generators which can be installed at the stages. Each generator can provide power to itself and the next L stages in clockwise order. Each generator can provide an unlimited amount of power to those stages it covers. Your task is to determine the minimum number of generators needed to ensure all stages receive adequate power for the festival. Input The first line of the input contains three space-separated integers m, k, and L (1 ≤ m, k ≤ 1000, 1 ≤ L ≤ m - 1), denoting the number of stages, the number of generators available, and the number of subsequent stages each generator can cover in addition to its own stage. The second line contains m space-separated integers p1, p2, ..., pm (1 ≤ pi ≤ 1000), denoting the power requirements of each stage. Output Print the minimum number of generators needed to ensure all stages are powered. If it is not possible to provide power to all stages with the available generators, print -1. Examples Input 5 3 2 4 3 2 5 2 Output 2 Input 6 1 3 2 2 2 2 2 2 Output -1 Input 8 4 3 7 5 3 4 6 8 3 5 Output 3 Note In the first sample, the optimal placement is to put the first generator at stage 1 (covering stages 1, 2, and 3) and the second generator at stage 4 (covering stages 4 and 5). Thus, all stages are powered with just 2 generators. In the second sample, it is impossible to cover all stages with just 1 generator. Therefore, the output is -1. In the third sample, the optimal setup is to place generators at stages 1, 4, and 6. Generator 1 will cover stages 1, 2, 3, and 4. Generator 2 will cover stages 4, 5, 6, and 7. Generator 3 will cover stages 6, 7, 8, and 1. Thus, all stages are powered with just 3 generators.","solution":"def min_generators_needed(m, k, L, power_reqs): Determines the minimum number of generators needed to ensure all stages are powered or returns -1 if not possible. power_covered = [False] * m generators_used = 0 # Sort stages by power requirements stages = sorted(enumerate(power_reqs), key=lambda x: -x[1]) for i in range(m): idx = stages[i][0] if power_covered[idx]: continue generators_used += 1 if generators_used > k: return -1 # Place generator at idx and cover L subsequent stages plus self for j in range(L + 1): power_covered[(idx + j) % m] = True return generators_used"},{"question":"You are given a series of commands to manipulate a list of integers. The possible commands are `append`, `remove`, and `reverse`. Your task is to process these commands and output the resulting list after all commands have been executed. The commands are defined as follows: - `append x`: Append integer `x` to the end of the list. - `remove x`: Remove first occurrence of integer `x` from the list. If `x` is not in the list, do nothing. - `reverse`: Reverse the order of elements in the list. The input format will be as follows: - The first line contains an integer `m` (1 ≤ m ≤ 100), the number of commands. - Each of the next `m` lines contains a command in one of the formats described above. Your program should output the final state of the list after executing all the commands. **Examples** Input: ``` 6 append 5 append 3 append 7 remove 3 append 2 reverse ``` Output: ``` [2, 7, 5] ``` Input: ``` 4 append 1 append 2 remove 3 reverse ``` Output: ``` [2, 1] ``` Input: ``` 5 append 1 append 1 append 2 remove 1 reverse ``` Output: ``` [2, 1] ``` Make sure to handle the commands in the order they appear.","solution":"def manipulate_list(commands): lst = [] for command in commands: if command.startswith(\'append\'): _, x = command.split() lst.append(int(x)) elif command.startswith(\'remove\'): _, x = command.split() x = int(x) if x in lst: lst.remove(x) elif command == \'reverse\': lst = lst[::-1] return lst"},{"question":"Zara is managing an orchard with n fruit trees. Each tree i (1 ≤ i ≤ n) produces f_i fruits every month. However, due to varying weather conditions, the productivity of each tree can change, causing f_i to alter with time. Zara needs a program to help monitor the fruit production patterns. Initially, Zara records the fruits produced by each tree in an array f of size n. Additionally, she keeps track of a list of weather changes that either increase or decrease the fruit production of a particular tree. Each weather change operation is represented as a tuple (t, x, d), where: - t (1 ≤ t ≤ 3) represents the type of operation: * For t=1, increase the production of tree x by d (1 ≤ d ≤ 100). * For t=2, decrease the production of tree x by d (1 ≤ d ≤ 100). * For t=3, print the current production of tree x. - x (1 ≤ x ≤ n) is the tree number. - d (1 ≤ d ≤ 100) is the change in fruit production for operations t=1 and t=2. Your task is to help Zara by implementing a function that processes these operations and outputs the results of the queries. Input The first line contains two integers n and m (1 ≤ n, m ≤ 2,000) — the number of trees in the orchard and the number of operations respectively. The second line contains n integers f_i (0 ≤ f_i ≤ 10^9) — the initial fruits produced by each tree. The next m lines contain three integers t, x, d (except for t=3 where d will be 0), representing the operations as described above. Output For each operation of type 3, print the current fruit production of tree x on a new line. Examples Input: 5 5 10 15 7 20 5 1 3 3 2 2 5 3 3 0 1 1 10 3 1 0 Output: 10 20 Input: 3 4 13 8 5 1 1 4 2 2 3 3 2 0 3 1 0 Output: 5 17","solution":"def monitor_orchard(n, m, initial_productions, operations): production = initial_productions[:] # Copy initial production list to avoid modifying the original output = [] for op in operations: t, x, d = op if t == 1: production[x - 1] += d elif t == 2: production[x - 1] -= d elif t == 3: output.append(production[x - 1]) return output"},{"question":"A botanical research team needs to keep track of the plant specimens they collect in the field. Each specimen is identified by a unique string code, and each code consists of alphanumeric characters. Occasionally, they need to check for the presence of certain plant specimens in their collection. Your task is to write a program that processes a series of commands to manage the collection of plant specimens. The commands are as follows: - \\"ADD <specimen_code>\\": Adds the specified specimen code to the collection. If the specimen is already in the collection, it does nothing. - \\"REMOVE <specimen_code>\\": Removes the specified specimen code from the collection. If the specimen is not in the collection, it does nothing. - \\"CHECK <specimen_code>\\": Checks if the specified specimen code is present in the collection. Prints \\"YES\\" if the specimen is present and \\"NO\\" otherwise. - \\"LIST\\": Lists all the specimen codes currently in the collection in lexicographical order, one per line. Input The first line of input contains T, denoting the number of test cases. For each test case, the first line contains N, the number of commands. The next N lines each contain one of the commands described above. Output For each \\"CHECK\\" command, output \\"YES\\" or \\"NO\\" based on the presence of the specimen in the collection. For each \\"LIST\\" command, output all specimen codes in lexicographical order, one per line. If the list is empty, do not print anything for the \\"LIST\\" command. Each test case is separated by a blank line in the output. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ length of specimen code ≤ 20 Example Input: 1 7 ADD xyz123 ADD abcd CHECK xyz123 REMOVE xyz123 CHECK xyz123 ADD def456 LIST Output: YES NO abcd def456","solution":"def process_commands(commands): specimens = set() output = [] for command in commands: parts = command.split() action = parts[0].upper() if action == \\"ADD\\": specimen_code = parts[1] specimens.add(specimen_code) elif action == \\"REMOVE\\": specimen_code = parts[1] specimens.discard(specimen_code) elif action == \\"CHECK\\": specimen_code = parts[1] output.append(\\"YES\\" if specimen_code in specimens else \\"NO\\") elif action == \\"LIST\\": for specimen in sorted(specimens): output.append(specimen) return output def process_test_cases(test_cases): results = [] for commands in test_cases: result = process_commands(commands) if result: results.append(result) return results"},{"question":"Sophie is training for a coding competition and is practicing problems involving number theory and prime numbers. She came across an intriguing problem but needs help verifying her results. The problem tasks her with computing the number of prime numbers between two given integers, inclusive. Write a program to help Sophie determine the number of prime numbers between two given integers, inclusive, for multiple test cases. Input: The first line contains t, the number of test cases. Each of the next t lines contains a pair of space-separated integers l and r. Output: For each test case, output the number of prime numbers between l and r, inclusive. Constraints: 1 ≤ t ≤ 20000 1 ≤ l, r ≤ 1000000 Problem Setter: Trigger Happy SAMPLE INPUT 3 10 20 15 25 1 10 SAMPLE OUTPUT 4 4 4 Explanation Consider the first test case. Prime numbers between 10 and 20 are: 11, 13, 17, 19 So, the output for this test case is 4. Consider the second test case. Prime numbers between 15 and 25 are: 17, 19, 23 So, the output for this test case is 4. Consider the third test case. Prime numbers between 1 and 10 are: 2, 3, 5, 7 So, the output for this test case is 4.","solution":"def sieve(max_num): Generates a list of prime numbers up to max_num using the Sieve of Eratosthenes. is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers return is_prime def count_primes(l, r, prime_sieve): Counts the number of prime numbers between l and r inclusive using a precomputed prime sieve. count = 0 for i in range(l, r + 1): if prime_sieve[i]: count += 1 return count def number_of_primes_between_ranges(test_cases): Returns the number of prime numbers between given ranges for multiple test cases. max_value = 1000000 prime_sieve = sieve(max_value) results = [] for l, r in test_cases: results.append(count_primes(l, r, prime_sieve)) return results"},{"question":"Given a number n and n pairs of integers, your task is to find a pair whose sum is closest to a given integer k. If there are multiple pairs with the same minimum difference, return any of them. # Input The input consists of: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9) — the number of pairs and the target sum. - The next n lines each contain two integers a_i and b_i (-10^9 ≤ a_i, b_i ≤ 10^9) — the pairs of integers. # Output Output two integers a and b — the pair whose sum is closest to k. If there are multiple pairs with the same minimum difference, output any of them. # Example Input ``` 4 10 1 2 3 7 6 5 10 0 ``` Output ``` 3 7 ``` Explanation: - The sum of the pair (1, 2) is 3, difference to k (10) is 7. - The sum of the pair (3, 7) is 10, difference to k (10) is 0 (closest). - The sum of the pair (6, 5) is 11, difference to k (10) is 1. - The sum of the pair (10, 0) is 10, difference to k (10) is 0 (closest). Here, the pair with the sum closest to 10 is (3, 7) or (10, 0). Any of them can be returned.","solution":"def closest_pair(n, k, pairs): Given a number n and n pairs of integers, find a pair whose sum is closest to a given integer k. If there are multiple pairs with the same minimum difference, return any of them. :param n: int - Number of pairs :param k: int - Target sum :param pairs: list of tuples - List of pairs of integers :return: tuple - Pair whose sum is closest to k closest_sum = float(\'inf\') result_pair = None for a, b in pairs: pair_sum = a + b diff = abs(pair_sum - k) if diff < closest_sum: closest_sum = diff result_pair = (a, b) return result_pair"},{"question":"Takahashi is planning a long journey and needs to pack enough food supplies. He has N food boxes, each having a certain amount of food in it. Takahashi can only carry K food boxes due to weight restrictions. He wants to ensure he maximizes the total amount of food he carries. Determine the maximum amount of food Takahashi can carry, given the constraints. Constraints * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq food_amount_i leq 10^4 * All input values, including food amounts, are integers. Input Input is given from Standard Input in the following format: N K food_amount_1 food_amount_2 ... food_amount_N Output Print the maximum amount of food Takahashi can carry. Examples Input 5 3 8 5 6 12 10 Output 30 Input 6 2 7 3 9 5 2 8 Output 17 Input 4 4 1 2 3 4 Output 10","solution":"def max_food_amount(N, K, food_amounts): Returns the maximum amount of food Takahashi can carry by selecting the largest K food boxes. Parameters: N (int): The number of food boxes. K (int): The number of food boxes Takahashi can carry. food_amounts (List[int]): A list of integers representing the amount of food in each box. Returns: int: The maximum amount of food. # Sort the food amounts in descending order to easily pick the largest K amounts food_amounts.sort(reverse=True) # Sum the largest K amounts return sum(food_amounts[:K])"},{"question":"Your team is working on a new project to implement a secure message encryption system. One part of the project involves creating a function that can encode and decode messages using a technique called \\"Run-Length Encoding\\" (RLE). RLE is a simple form of lossless data compression in which consecutive occurrences of the same character are replaced with a single character followed by the number of occurrences. You are tasked with implementing two functions. The first function, `encode()`, should take a string as input and return its run-length encoded version. The second function, `decode()`, should take a run-length encoded string and return the original string. **Input:** 1. The input consists of a single string `S` (0 ≤ |S| ≤ 10000) containing only uppercase letters (A-Z). **Output:** 1. The `encode()` function should return the run-length encoded string. 2. The `decode()` function should return the original string from the run-length encoded input. **Example:** Input ``` AAAAABBBCCDAA ``` Output ``` A5B3C2D1A2 ``` Input ``` A5B3C2D1A2 ``` Output ``` AAAAABBBCCDAA ``` **Note:** - The encoded string does not need to include counts of `1`. - For decoding, assume well-formed input strings only.","solution":"def encode(s): Encode a string using Run-Length Encoding (RLE). :param s: The input string containing only uppercase letters (A-Z) :return: The run-length encoded version of the string if not s: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_string.append(s[i - 1] + str(count)) count = 1 encoded_string.append(s[-1] + str(count)) return \\"\\".join(encoded_string) def decode(encoded): Decode a run-length encoded string. :param encoded: The input run-length encoded string :return: The original version of the string decoded_string = [] i = 0 while i < len(encoded): char = encoded[i] j = i + 1 count = 0 while j < len(encoded) and encoded[j].isdigit(): count = count * 10 + int(encoded[j]) j += 1 decoded_string.append(char * count) i = j return \\"\\".join(decoded_string)"},{"question":"You have been hired to develop a booking system for a new car rental company. The system must manage the rentals of n cars and handle customer requests efficiently. There are n cars available for rent, numbered from 1 to n. Each car can only be rented by one customer at a time. Your task is to write a function that processes rental requests in the order they arrive and assigns cars to customers if available. Each rental request specifies a car number and the time period for the rental, which includes a start time and an end time. If the requested car is already rented for any part of the requested period, the request is declined. If the car is available, the request is accepted, and the car is marked as rented for the specified period. Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of cars. - The second line contains an integer m (1 ≤ m ≤ 100,000), the number of rental requests. - The next m lines each contain three integers: car_number (1 ≤ car_number ≤ n), start_time (1 ≤ start_time ≤ 1,000,000), and end_time (start_time < end_time ≤ 1,000,000), representing a rental request for the specified car and time period. Output - For each rental request, print \\"Accepted\\" if the car is available for the whole requested period and \\"Declined\\" if the car is already rented for any part of the requested period. Example Input 3 4 1 1 5 2 3 6 1 3 7 2 6 8 Output Accepted Accepted Declined Accepted Explanation - The first request rents car 1 from time 1 to 5, so it is accepted. - The second request rents car 2 from time 3 to 6, so it is accepted. - The third request for car 1 from time 3 to 7 cannot be accepted because it overlaps with the first rental. - The fourth request for car 2 from time 6 to 8 can be accepted because it does not overlap with the second rental.","solution":"def process_rental_requests(n, requests): Process rental requests for n cars and determine if each request can be accepted or declined. Parameters: n (int): Number of cars available for rent. requests (list of tuples): List of rental requests where each request is a tuple (car_number, start_time, end_time). Returns: list of str: List containing \\"Accepted\\" or \\"Declined\\" for each rental request. cars = {i: [] for i in range(1, n + 1)} response = [] for car_number, start_time, end_time in requests: can_rent = True for s, e in cars[car_number]: if not (end_time <= s or start_time >= e): can_rent = False break if can_rent: cars[car_number].append((start_time, end_time)) response.append(\\"Accepted\\") else: response.append(\\"Declined\\") return response"},{"question":"Dr. Watson and Sherlock Holmes are investigating a series of rooms in a mansion. Each room either holds a clue or is empty. The rooms are connected in a straight line, and Sherlock wants to find the minimum number of steps required to gather all the clues. However, the mansion is filled with traps, and stepping into a trap resets Sherlock to the start of the room sequence. The rooms are described by a string R of \'C\'s, \'E\'s, and \'T\'s: - \'C\' represents a room with a clue, - \'E\' represents an empty room, - \'T\' represents a trap. Upon encountering a trap (\'T\'), Sherlock will be sent back to the starting point of the room sequence. Sherlock can move either to the left or right, starting from the leftmost room (index 0). You need to calculate the minimum number of moves Sherlock needs to collect all the clues without stepping on a trap. If it’s impossible to gather all clues without stepping on a trap, return -1 for that case. # Input - The first line contains a single integer T, the number of test cases. - Each of the next T lines consists of the string R, defining the rooms in the mansion for that test case. # Output For each test case, output the minimum number of steps required to gather all the clues without stepping on a trap. If it is not possible, output -1. # Constraints 1 ≤ T ≤ 100,000 1 ≤ |R| ≤ 100,000 The total length of all R will be ≤ 1,000,000. # Example Input 3 CECETC CECEC CCC Output 5 4 2 # Explanation 1. For the first example, Sherlock moves right to gather the first two clues, but gets reset by the trap. Then he needs to go right again to gather the remaining clues without hitting the trap again. 2. For the second example, Sherlock can gather all clues by moving right without encountering any traps. 3. For the third example, Sherlock just needs to move right twice to gather all the clues.","solution":"def minimum_steps_to_collect_clues(r): Given a string `r` representing rooms in a mansion, returns the minimum number of steps required to collect all clues (\'C\') without stepping on a trap (\'T\'). If it\'s not possible, returns -1. clues_indices = [i for i, ch in enumerate(r) if ch == \'C\'] if not clues_indices: return 0 # No clues to collect. if \'T\' in r: return -1 # There\'s a trap making it impossible to collect all clues. if len(r) - 1 in clues_indices: if \'T\' in r[:len(r) - 1]: return -1 else: return clues_indices[-1] # Taking input and producing output based on the problem statement def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) results = [] for i in range(1, T + 1): R = data[i] results.append(minimum_steps_to_collect_clues(R)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a program that takes a positive integer n (1 ≤ n ≤ 1000) as input and determines the number of different ways to express n as the sum of two distinct positive integers x and y (x ≠ y and 1 ≤ x, y ≤ 1000). Input The first line contains a single integer t (1 ≤ t ≤ 50) – the number of test cases. Each of the next t lines contains a single integer n. Output For each test case, output the number of distinct pairs (x, y) such that x + y = n and x ≠ y. Example Input 3 10 20 100 Output 4 9 49","solution":"def count_sum_pairs(n): Returns the number of distinct pairs (x, y) such that x + y = n and x ≠ y. if n < 3: return 0 return (n - 1) // 2 def process_test_cases(test_cases): Returns a list of results for each test case. results = [] for n in test_cases: results.append(count_sum_pairs(n)) return results"},{"question":"You are given a list of events which are either \'start\' or \'end\'. Each \'start\' event has a corresponding \'end\' event, and they are paired by their order of appearance. Your task is to calculate the maximum number of overlapping intervals at any given point in time. An event is defined as a tuple containing the type of event (\'start\' or \'end\') and the time at which the event occurs. Input First line contains an integer T denoting the number of test cases. Each test case starts with an integer N denoting the number of events. The next N lines contain the events as two space-separated values: the type of event (\'start\' or \'end\') and the time (an integer). Output For each test case, output a single integer - the maximum number of overlapping intervals. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ Time ≤ 10^9 Example Input: 2 4 start 1 start 2 end 5 end 6 6 start 1 start 3 end 5 start 5 end 8 end 10 Output: 2 3 Explanation Example case 1. The events are: start at 1, start at 2, end at 5, end at 6. The maximum number of overlapping intervals is 2, occurring between times 2 and 5. Example case 2. The events are: start at 1, start at 3, end at 5, start at 5, end at 8, end at 10. The maximum number of overlapping intervals is 3, occurring at times from 5 to 5 just after the third \'start\'.","solution":"def max_overlapping_intervals(test_cases): results = [] for case in test_cases: N, events = case time_points = [] for event in events: event_type, time = event if event_type == \'start\': time_points.append((time, \'start\')) elif event_type == \'end\': time_points.append((time, \'end\')) # Sort the time points based on time, with \'start\' coming before \'end\' if they have the same time time_points.sort(key=lambda x: (x[0], x[1] == \'end\')) max_overlap = 0 current_overlap = 0 for point in time_points: if point[1] == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) elif point[1] == \'end\': current_overlap -= 1 results.append(max_overlap) return results"},{"question":"Bob is thrilled to work on a project involving rectangles. He needs to determine if it is possible to rearrange four given sticks such that they form a rectangle. Each stick can be of different length, and each of the four sides of the rectangle must be formed by exactly one stick. Input The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). The next t lines describe the test cases. Each line contains four integers a, b, c, and d — the lengths of the four sticks (1 ≤ a, b, c, d ≤ 10^9). Output For each test case print \\"YES\\" if it\'s possible to form a rectangle with the given sticks and \\"NO\\" otherwise. Example Input 3 1 2 3 4 2 2 4 4 5 5 5 5 Output NO YES YES Explanation In the first test case, it\'s not possible to form a rectangle because no two sides can be equal with the given lengths. In the second test case, you can form a rectangle with two sides of length 2 and two sides of length 4. In the third test case, all sides are of equal length, so they naturally form a square, which is a special case of a rectangle.","solution":"def can_form_rectangle(stick_lengths): Given four stick lengths, determine if it is possible to form a rectangle. for lengths in stick_lengths: a, b, c, d = lengths lengths_list = [a, b, c, d] lengths_list.sort() if lengths_list[0] == lengths_list[1] and lengths_list[2] == lengths_list[3]: print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Given an array of integers, rotate the array to the right by `k` steps, where `k` is non-negative. **Example 1:** Input: ``` nums: [1, 2, 3, 4, 5, 6, 7] k: 3 ``` Output: ``` [5, 6, 7, 1, 2, 3, 4] ``` **Example 2:** Input: ``` nums: [-1, -100, 3, 99] k: 2 ``` Output: ``` [3, 99, -1, -100] ``` **Constraints:** - 1 <= nums.length <= 10^4 - -2^31 <= nums[i] <= 2^31 - 1 - 0 <= k <= 10^5 # Note: The rotations must be done in-place, in O(1) extra space.","solution":"def rotate(nums, k): Rotates the array to the right by k steps. This is done in-place with O(1) extra space. n = len(nums) k = k % n # In case k is greater than n nums[:] = nums[-k:] + nums[:-k]"},{"question":"A large advanced robotics company is developing a new line of autonomous delivery robots, and they want to create a simulation of the robot\'s paths. Each robot will follow a predefined sequence of steps (as a string) and the company wants to know the final position of the robot after executing all the steps in an infinite 2D grid starting from the origin (0, 0). The robot can move in four possible directions: - \'U\' means moving up one unit, - \'D\' means moving down one unit, - \'L\' means moving left one unit, - \'R\' means moving right one unit. You need to write a program that takes a sequence of steps and calculates the final position of the robot. Input The input is a single string composed only of characters \'U\', \'D\', \'L\', and \'R\', which represent the steps of the robot. The length of the string is between 1 and 1000 inclusive. Output Print the final coordinates of the robot as two space-separated integers. Examples Input \\"UUDDLLRR\\" Output 0 0 Input \\"UUUDDLRL\\" Output -1 1 Input \\"RRRDD\\" Output 3 -2","solution":"def calculate_final_position(steps): This function takes a sequence of steps and calculates the final position of the robot. :param steps: A string composed only of characters \'U\', \'D\', \'L\', and \'R\' :return: A tuple of two integers representing the final coordinates (x, y) x, y = 0, 0 for step in steps: if step == \'U\': y += 1 elif step == \'D\': y -= 1 elif step == \'L\': x -= 1 elif step == \'R\': x += 1 return x, y # The print function for output def print_final_position(steps): x, y = calculate_final_position(steps) print(f\\"{x} {y}\\")"},{"question":"Given a string consisting only of lowercase alphabets, determine the length of the longest substring that contains at most two distinct characters. For example, given the string \\"abcbbbbcccbdddadacb\\", the longest substring that satisfies the condition is \\"bcbbbbcccb\\" with length 10. Your task is to write a program that calculates the length of the longest substring containing at most two distinct characters for each input string. Input The input consists of a sequence of datasets. Each dataset is a line of one string S, where 1 ≤ |S| ≤ 1000. The input ends with a single line containing only a period \'.\'. Output The output is a sequence of integers, where each integer represents the length of the longest substring with at most two distinct characters for each input string. No other characters should be in the output. Example Input abcbbbbcccbdddadacb aabbcc . Output 10 4","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring containing at most two distinct characters. if not s: return 0 left = 0 max_len = 0 char_map = {} for right in range(len(s)): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len def process_input(strings): Processes a list of strings, returns the length of the longest substring with at most two distinct characters for each string. Each string should not be an ending period \'.\'. result = [] for s in strings: if s == \\".\\": break result.append(length_of_longest_substring_two_distinct(s)) return result"},{"question":"Create a program that calculates the shortest path in a maze represented by a 2D grid. The program should be able to input a maze of any size and determine the number of steps in the shortest path from the top-left corner to the bottom-right corner, moving only horizontally or vertically. The grid cells are represented by the following values: - `0` for an open cell, - `1` for a blocked cell. If there is no path from the top-left to the bottom-right, the program should output `-1`. # Input - A sequence of multiple datasets is given as input. - Each dataset starts with two integers, `n` and `m`, representing the number of rows and columns of the grid, respectively. - The next `n` lines each contain `m` integers, representing the grid. The end of the input is indicated by a single line containing two zeros. Each dataset is followed by a blank line. # Output - For each dataset, output the minimum number of steps needed to go from the top-left to the bottom-right of the grid. If no such path exists, output `-1`. # Example Input ``` 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 3 3 0 1 0 1 1 0 1 0 0 0 0 ``` Output ``` 9 -1 ```","solution":"from collections import deque def shortest_path_in_maze(n, m, grid): Calculates the shortest path from the top-left corner to the bottom-right corner in the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: 2D list representing the maze grid. :return: The number of steps in the shortest path or -1 if no path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = {(0, 0)} while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve_mazes(input_data): Processes multiple datasets of mazes and returns the list of shortest paths for each dataset. :param input_data: List of strings representing the input data. :return: List of shortest paths for each dataset. results = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): if lines[index].strip() == \'0 0\': break n, m = map(int, lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, lines[index].split()))) index += 1 results.append(shortest_path_in_maze(n, m, grid)) index += 1 # Skip the blank line return results"},{"question":"# Aligning Employees to Tasks Your company is assigned a set of tasks and has a number of employees to complete these tasks. Each task requires a certain number of hours to complete, and each employee can work a certain number of hours per day. You need to determine if it is possible to complete all tasks in one day by assigning tasks to employees while ensuring that no employee is overloaded. Input The first line contains two integers n and m, where n is the number of employees and m is the number of tasks. (1 <= n, m <= 1000) The second line contains n integers representing the hours each employee can work in a day. The third line contains m integers representing the hours required for each task. Output Output \\"YES\\" if it\'s possible to complete all tasks in one day without exceeding any employee\'s limit; otherwise, output \\"NO\\". Sample Input 1 3 3 8 4 6 5 4 5 Sample Output 1 YES Sample Input 2 2 3 6 5 5 6 4 Sample Output 2 NO","solution":"def can_complete_tasks_in_one_day(n, m, employee_hours, task_hours): Determines if all tasks can be completed in one day without overloading any employee. :param n: Number of employees :param m: Number of tasks :param employee_hours: List of integers representing hours each employee can work :param task_hours: List of integers representing hours required for each task :return: \\"YES\\" if all tasks can be completed in one day, otherwise \\"NO\\" employee_hours.sort(reverse=True) task_hours.sort(reverse=True) for task_index, task in enumerate(task_hours): found_employee = False for emp_index in range(n): if employee_hours[emp_index] >= task: employee_hours[emp_index] -= task found_employee = True break if not found_employee: return \\"NO\\" return \\"YES\\" # Example input to demonstrate the function works print(can_complete_tasks_in_one_day(3, 3, [8, 4, 6], [5, 4, 5])) # Expected output: YES print(can_complete_tasks_in_one_day(2, 3, [6, 5], [5, 6, 4])) # Expected output: NO"},{"question":"Maria loves to organize her collection of snacks. She keeps them stored as a list of integers where each integer represents a packet of snacks with a specific count of items, but she is not satisfied with the arrangement of the snacks in the list. Maria wants all the snack packets to be arranged in non-decreasing order of the count of items, but she can only perform two types of operations: 1. Swap any two packets. 2. Add one more item to any packet. Given an initial list of snack packets, she wants to know the minimal number of these operations required to achieve a non-decreasing order of snack counts. Write a function that takes a list of integers, representing the snack counts, and returns the minimum number of operations required to sort the list in non-decreasing order. Input - An integer n (1 ≤ n ≤ 100), representing the number of packets. - A list of n integers, where each integer is between 1 and 1000, that represent the current count of items in each packet. Output - Print a single integer — the minimum number of operations required to sort the list in non-decreasing order. Examples Input 5 5 2 9 6 3 Output 3 Input 3 1 2 3 Output 0 Input 4 8 4 7 5 Output 2","solution":"def min_operations_to_sort(snacks): Returns the minimum number of operations required to sort the list of snack counts in non-decreasing order. Operations allowed: swap any two packets, add one more item to any packet. n = len(snacks) sorted_snacks = sorted(snacks) # Calculate the Longest Increasing Subsequence (LIS) in the original list with respect to the sorted list LIS = [1] * n for i in range(1, n): for j in range(i): if snacks[i] >= snacks[j]: LIS[i] = max(LIS[i], LIS[j] + 1) # The minimum operations needed is to make the entire list sorted # Thus the operations = length of array - length of LIS min_operations = n - max(LIS) return min_operations"},{"question":"Petya is learning about permutations and combinations in his recent math lessons. He is now interested in the concept of anagram pairs within a given set of strings. An anagram pair is defined as two distinct strings that are permutations of the same characters. Petya has a list of strings and he wonders how many pairs of strings in this list form anagrams of each other. Help Petya by writing a program to determine this number. Input The input consists of multiple lines. The first line contains an integer n, the number of strings in the list (1 <= n <= 1000). The next n lines each contain a single string. Each string consists of lowercase Latin letters only and has a length of at most 50 characters. Output Output the only number - the number of distinct anagram pairs in the list. Examples Input 4 listen silent enlist google Output 3 Input 5 abc bca cab bac cba Output 10 Note In the first example, \\"listen\\", \\"silent\\", and \\"enlist\\" form 3 anagram pairs as each pair (listen, silent), (listen, enlist), and (silent, enlist) are anagrams of each other. The string \\"google\\" has no anagram pairs. Hence, there are 3 anagram pairs in total. In the second example, every string is an anagram of every other string, resulting in 10 anagram pairs in total.","solution":"from collections import defaultdict def count_anagram_pairs(strings): Counts the number of distinct anagram pairs in the given list of strings. Args: strings (list of str): List of strings to check for anagram pairs. Returns: int: The number of distinct anagram pairs. anagram_dict = defaultdict(int) for string in strings: sorted_string = \'\'.join(sorted(string)) anagram_dict[sorted_string] += 1 anagram_pairs = 0 for count in anagram_dict.values(): if count > 1: anagram_pairs += count * (count - 1) // 2 return anagram_pairs"},{"question":"At an ancient temple, the head priest uses an hourglass to measure the time for various rituals. The hourglass has two sections, the upper section and the lower section, where sand flows from the upper to the lower section over time. Each ritual requires a precise amount of time to be executed. The head priest has a set of N hourglasses, each with different total time durations (measured when all the sand flows from the upper section to the lower section). However, the priest can flip the hourglass whenever needed to restart the flow of the sand. The head priest wants to find out if it is possible to measure exactly T units of time using any combination of flips among the N hourglasses. Write a program that checks whether it is possible to measure precisely T units of time using the given hourglasses. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Input The input is given in the following format. N T t1 t2 ... tN The number of hourglasses N (1 ≤ N ≤ 100) and the target time T (1 ≤ T ≤ 10000) are given in the first row. In the second row, the duration of each hourglass ti (1 ≤ ti ≤ 500) is given. Output Output \\"YES\\" if it is possible to measure exactly T units of time, otherwise output \\"NO\\". Examples Input 3 10 3 7 5 Output YES Input 2 15 8 11 Output NO","solution":"def can_measure_time(N, T, hourglasses): dp = [False] * (T + 1) dp[0] = True for i in range(T + 1): if dp[i]: for h in hourglasses: if i + h <= T: dp[i + h] = True return \\"YES\\" if dp[T] else \\"NO\\""},{"question":"Vladimir likes to play with numbers, especially finding interesting patterns and sequences. Recently, he has been obsessed with the sequence of cumulative sums. Given an array of integers, Vladimir wants to find the smallest contiguous subarray such that the sum of its elements is greater than or equal to a specified value. Your task is to help Vladimir determine the length of the smallest contiguous subarray whose sum is greater than or equal to a given value `S`. Input The first line of the input contains an only integer n (1 ≤ n ≤ 100 000), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the array. The third line contains an integer S (1 ≤ S ≤ 10^9), the specified value. Output Print the length of the smallest contiguous subarray whose sum is greater than or equal to S. If no such subarray exists, print -1. Examples Input 5 1 2 3 4 5 11 Output 3 Input 4 1 1 1 1 5 Output -1 Note In the first sample, the smallest subarray with a sum greater than or equal to 11 is [3, 4, 5] with length 3. In the second sample, there is no subarray whose sum is greater than or equal to 5.","solution":"def smallest_subarray_with_sum(arr, n, S): Finds the length of the smallest contiguous subarray whose sum is greater than or equal to S. If no such subarray exists, return -1. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a sequence of integers and a list of queries. Each query consists of two integers l and r, denoting a subarray of the sequence. For each query, your task is to compute the sum of all elements in the given subarray. Each query is independent of others. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9), representing the sequence. The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the range of the subarray for which you need to compute the sum. Output For each query, print the sum of the elements of the sequence from index l to r, inclusive. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15 Note For the first query, the subarray is [1, 2, 3], and its sum is 6. For the second query, the subarray is [2, 3, 4], and its sum is 9. For the third query, the subarray is [1, 2, 3, 4, 5], and its sum is 15.","solution":"def subarray_sums(n, sequence, q, queries): Given a sequence of integers and a list of queries, compute the sum of all elements in the provided subarray for each query. :param n: int - the length of the sequence :param sequence: list - the sequence of integers :param q: int - the number of queries :param queries: list of tuples - each tuple contains two integers (l, r) representing the range of the subarray :return: list - the sums of the subarrays for each query prefix_sums = [0] * (n + 1) # Calculate prefix sums for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] results = [] for l, r in queries: subarray_sum = prefix_sums[r] - prefix_sums[l - 1] results.append(subarray_sum) return results"},{"question":"In a certain village, there is an ancient clock tower. The clock has a peculiar mechanism: instead of having an hour and minute hand, it has only one hand that indicates a unique time of the day using a particular format: Imagine the clock divides the day into \'m\' minutes, where 1 ≤ m ≤ 10^9 and these minutes are numbered consecutively from 0 to m-1. Given this, the clock shows time t as the number of minutes passed from the beginning of the day. The villagers have a special named event happening every k minutes starting from minute \'0\'. You are given a time t and you need to determine: 1. How many full events have occurred by the time it\'s t-th minute of the day. 2. The number of minutes remaining until the next event after the time t. Input The first line of the input contains two space-separated integers: m and k (1 ≤ k ≤ 10^9, 1 ≤ m ≤ 10^9). The second line contains a single integer t (0 ≤ t < m), representing the current time in minutes after the start of the day. Output Print two integers: - The number of full events that have occurred by time t. - The number of minutes remaining until the next event. Examples Input 100 15 45 Output 3 15 Input 90 20 70 Output 3 10 Note In the first example, minutes 0, 15, 30, and 45 mark the distinct events. Thus, at time 45, three events have fully occurred and another event happens at minute 60. Hence, there are 15 minutes until the next event. In the second example, events occur at minutes 0, 20, 40, and 60, so by minute 70, three full events have occurred, and another event occurs at minute 80, leaving 10 minutes until it takes place.","solution":"def event_details(m, k, t): Determines the number of full events that have occurred by time t and the number of minutes remaining until the next event after time t. :param m: Total number of minutes in a day. :param k: Number of minutes after which each event occurs. :param t: Current time in minutes from the start of the day. :return: Tuple containing the number of full events and minutes to next event. full_events = t // k minutes_to_next_event = k - (t % k) return full_events, minutes_to_next_event"},{"question":"Given a string s consisting of lowercase English letters, you are asked to determine the minimum number of operations required to convert s into a \\"balanced\\" string. A string is considered \\"balanced\\" if it has exactly the same number of occurrences of each character from \'a\' to \'z\' that appear in the string. An operation is defined as either: 1. Removing a character from the string. 2. Adding one of the characters present in the string. Input The first line contains a single integer T (1 ≤ T ≤ 1000) representing the number of test cases. Each of the next T lines contains a single string s (1 ≤ |s| ≤ 10^5). Output For each test case, output the minimum number of operations required to make the string balanced. Example Input 3 aabb abcabc aaabbbccc Output 0 0 0 Note In the first case, the string \\"aabb\\" already has an equal number of \'a\' and \'b\', so no operations are needed. In the second case, the string \\"abcabc\\" already consists of an equal number of \'a\', \'b\', and \'c\', so no operations are needed. In the third case, the string \\"aaabbbccc\\" already has the same number of \'a\', \'b\', and \'c\', so no operations are needed.","solution":"def min_operations_to_balance(s): Returns the minimum number of operations required to convert s into a \\"balanced\\" string. from collections import Counter # Count the occurrences of each character in the string counter = Counter(s) # Check how many unique characters are in the string unique_chars = len(counter) # Calculate the ideal count each character should have to be balanced ideal_count = len(s) // unique_chars operations = 0 for count in counter.values(): if count > ideal_count: operations += count - ideal_count elif count < ideal_count: operations += ideal_count - count return operations // 2 def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(min_operations_to_balance(s)) return results"},{"question":"A string is considered beautiful if no two adjacent characters are the same. Given a string s consisting of lowercase English letters, find the minimum number of characters that need to be changed to make the string beautiful. Input The first line contains an integer t (1 ≤ t ≤ 1000) denoting the number of test cases in the input. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000). Output For each test case, print the minimum number of characters that need to be changed to make the string beautiful. Example Input 4 aab abc aaaa abba Output 1 0 3 1 Explanation In the first test case, changing the second \'a\' to any other character (e.g., \'b\') will make the string beautiful. In the second test case, no changes are needed as all adjacent characters are different. In the third test case, changing any three of the \'a\'s to distinct characters (e.g., \'abab\' or \'abcb\') will make the string beautiful. In the fourth test case, changing one of the \'b\'s to a different character (e.g., \'abca\' or \'abda\') will make the string beautiful.","solution":"def min_changes_to_make_beautiful(t, strings): results = [] for s in strings: changes_needed = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: changes_needed += 1 results.append(changes_needed) return results"},{"question":"You are working on a secret project where you need to operate on a contiguous block of memory within a large array of integers. To ensure the project meets efficiency requirements, you must determine the maximum sum of the elements within any contiguous subarray of the array. Given an array of integers (which may include negative numbers), you are to write a program that computes the maximum possible sum for any contiguous subarray. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of any contiguous subarray of the given array. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 1 2 3 Output 6 Input 6 -1 -2 -3 -4 -5 -6 Output -1","solution":"def max_subarray_sum(nums): Determines the maximum sum of any contiguous subarray within the array. Parameters: nums (list of int): The array of integers. Returns: int: The maximum sum of any contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a rectangular matrix of integers, you need to find out the maximum sum of the elements of a submatrix such that the sum of its elements equals the target integer. The submatrix should be non-empty and can have any size. Input The first line contains two integer n and m (1 ≤ n, m ≤ 300) — the dimensions of the matrix. The next n lines each contain m integers separated by spaces, where each integer is a element in the matrix (-1000 ≤ element ≤ 1000). The last line contains an integer k (1 ≤ k ≤ 1000000) — the target sum. Output Print the maximum sum of the elements of any submatrix whose sum is exactly equal to k. If no such submatrix exists, print -1. Examples Input 3 3 1 2 3 4 5 6 7 8 9 15 Output 15 Input 4 4 5 -4 -3 2 -2 6 3 -1 2 -2 -1 4 3 -1 1 -5 8 Output 8","solution":"def max_sum_submatrix_with_target(n, m, matrix, target): def submatrix_sum(r1, c1, r2, c2): Calculate the sum of elements in the submatrix from (r1, c1) to (r2, c2). total = prefix_sums[r2][c2] if r1 > 0: total -= prefix_sums[r1-1][c2] if c1 > 0: total -= prefix_sums[r2][c1-1] if r1 > 0 and c1 > 0: total += prefix_sums[r1-1][c1-1] return total # Create prefix sum matrix prefix_sums = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): prefix_sums[i][j] = matrix[i][j] if i > 0: prefix_sums[i][j] += prefix_sums[i-1][j] if j > 0: prefix_sums[i][j] += prefix_sums[i][j-1] if i > 0 and j > 0: prefix_sums[i][j] -= prefix_sums[i-1][j-1] max_submatrix_sum = -1 # Check all possible submatrices for r1 in range(n): for c1 in range(m): for r2 in range(r1, n): for c2 in range(c1, m): current_sum = submatrix_sum(r1, c1, r2, c2) if current_sum == target: max_submatrix_sum = max(max_submatrix_sum, current_sum) return max_submatrix_sum # Example usage n, m = 4, 4 matrix = [ [5, -4, -3, 2], [-2, 6, 3, -1], [2, -2, -1, 4], [3, -1, 1, -5] ] target = 8 print(max_sum_submatrix_with_target(n, m, matrix, target))"},{"question":"The city of Algol has a peculiar clock that only shows the current time in a 24-hour format (HH:MM). However, the digits on this clock are prone to certain malfunctions. Specifically, individual digits from \'0\' to \'9\' may become unreadable and will be represented by a special character \'*\'. This situation sometimes makes it impossible to determine the exact time, but it may still be possible to deduce an interval within which the current time falls. Your task is to write a program that determines such an interval given the malfunctioning clock\'s time. # Input The input consists of a single line containing a string of length 5 representing the time in a 24-hour format. The string format will be \\"HH:MM\\" where at least one of the characters (but not all of them) might be \'*\'. # Output Output two lines. The first line should contain the earliest possible valid time in HH:MM format that matches the given input, and the second line should contain the latest possible valid time in HH:MM format that matches the given input. # Constraints - The input time string will have exactly 5 characters. - The first two characters form the hours (\'HH\'), and the last two form the minutes (\'MM\'). - \'H\' and \'M\' can be any digit from \'0\' to \'9\' or \'*\'. - At least one character will be a digit. # Examples Example 1 Input: ``` 1*:4* ``` Output: ``` 10:40 19:49 ``` Example 2 Input: ``` **:3* ``` Output: ``` 00:30 23:39 ``` Example 3 Input: ``` 2*:** ``` Output: ``` 20:00 23:59 ``` Example 4 Input: ``` **:** ``` (not a valid test case as it will have all characters as \'*\')","solution":"def possible_times(time_str): Given a time string in the format HH:MM with some digits possibly replaced by \'*\', determine the earliest and latest valid times that match the given pattern. # Helper to replace \'*\' with the earliest possible digit def replace_earliest(char, options): if char == \'*\': return options[0] return char # Helper to replace \'*\' with the latest possible digit def replace_latest(char, options): if char == \'*\': return options[-1] return char hours, minutes = time_str.split(\':\') # For hours earliest_hour = replace_earliest(hours[0], \'012\') + replace_earliest(hours[1], \'0123456789\') latest_hour = replace_latest(hours[0], \'012\') + replace_latest(hours[1], \'0123456789\') # Adjust for valid hour range if earliest_hour[0] == \'2\': earliest_hour = earliest_hour[0] + replace_earliest(hours[1], \'0123\') if latest_hour[0] == \'2\': latest_hour = latest_hour[0] + replace_latest(hours[1], \'0123\') # For minutes earliest_minute = replace_earliest(minutes[0], \'012345\') + replace_earliest(minutes[1], \'0123456789\') latest_minute = replace_latest(minutes[0], \'012345\') + replace_latest(minutes[1], \'0123456789\') return earliest_hour + \':\' + earliest_minute, latest_hour + \':\' + latest_minute # Example usage input_time = \\"1*:4*\\" earliest, latest = possible_times(input_time) print(earliest) print(latest)"},{"question":"Dave has a sequence of integers that represents the number of chapters studied each day for a continuous period. He wants to determine if there exists a day where the number of chapters studied that day is more than the sum of chapters studied on the two consecutive previous days. If such a day exists, you should return the 1-based index of the first such day. Otherwise, return -1. Input Format The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of days in the sequence. The second line contains N space-separated integers representing the number of chapters studied each day. Output Format For each test case, print a single integer: the 1-based index of the day that satisfies the condition, or -1 if no such day exists. Constraints 1 ≤ T ≤ 100 3 ≤ N ≤ 100 0 ≤ chapters studied each day ≤ 100 Example Input 2 5 2 3 7 5 4 4 1 2 5 1 Example Output 3 3 Explanation In the first test case, on the 3rd day Dave studied 7 chapters, which is more than the sum of chapters studied on the 1st and 2nd days (2+3=5), so the output is 3. In the second test case, on the 3rd day Dave studied 5 chapters, which is more than the sum of chapters studied on the 1st and 2nd days (1+2=3), so the output is 3.","solution":"def find_special_day(T, test_cases): Returns an array of results where each element corresponds to the 1-based index of the first day that satisfies the condition for each test case, or -1 if no such day exists. results = [] for case in test_cases: N, chapters = case found = -1 for i in range(2, N): if chapters[i] > chapters[i-1] + chapters[i-2]: found = i + 1 # convert to 1-based index break results.append(found) return results # Example usage: # T = 2 # test_cases = [(5, [2, 3, 7, 5, 4]), (4, [1, 2, 5, 1])] # print(find_special_day(T, test_cases))"},{"question":"You are given an array of size n. Each element in the array represents the height of a block where a column of blocks is made. Your task is to flatten the heights so that all columns in the array have the same height. The flattening is done by either increasing or decreasing the heights by exactly one unit. The cost of increasing or decreasing the height of a column is given by the following function: if you change the height of a column from h units to h+1 or h-1 units, the cost is equal to the absolute difference between the new height and the old height (which is always 1 in this case for each step). Given this scenario, determine the minimum total cost to flatten the heights of the columns. # Input The first line of the input contains a single integer t (1 ≤ t ≤ 10^5) - the number of test cases. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 10^5) - number of columns in the array. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the heights of the columns. # Output For each test case, print the minimum total cost to flatten the heights of the columns on a new line. # Example Input ``` 2 3 1 2 3 4 1 2 3 4 ``` Output ``` 2 4 ``` # Note In the first case, the minimum cost to flatten the heights to either height 2 or height 3 is 2: - Changing 1 to 2 costs 1. - Changing 3 to 2 costs 1. - Total cost is 1 + 1 = 2. In the second case, the minimum cost to flatten the heights to either height 2 or height 3 is 4: - Changing 1 to 3 costs 2. - Changing 4 to 3 costs 1. - Total cost is 1 + 1 + 1 + 1 = 4.","solution":"def min_cost_to_flatten_heights(t, test_cases): Calculate the minimum cost to flatten heights for multiple test cases. Parameters: t (int): Number of test cases. test_cases (list): List of tuples, where each tuple contains: - n (int): Number of columns. - heights (list of int): Heights of the columns. Returns: List of int: Minimum cost for each test case. results = [] for n, heights in test_cases: heights.sort() median_height = heights[n // 2] # Optimal height is the median cost = sum(abs(h - median_height) for h in heights) results.append(cost) return results"},{"question":"Write a program to generate a \\"zigzag pattern\\". The \\"zigzag pattern\\" is to be printed based on the following rules: * If the length of one side is n, it is displayed as a character string with n rows and n columns. * The zigzag pattern alternates between \'#\' and \' \' (half-width blank) in a zigzag form from top to bottom. * Each row should alternate direction going left to right for the first row, then right to left for the second row, and so on. * There should be no spaces between lines. Create a program that takes an integer n as an input and outputs a \\"zigzag pattern\\" with a side length of n. Input The input is given in the following format: d n1 n2 :: nd The number of datasets d (d ≤ 20) is given to the first line, and the side length ni (1 ≤ ni ≤ 100) of the i-th zigzag pattern is given to each of the following d lines. Output Please output a zigzag pattern for each data set. Insert a blank line between the datasets. Example Input 2 5 6 Output # # # # # # # # # # # # # # # # # # # # # # # #","solution":"def generate_zigzag_pattern(n): pattern = [] for i in range(n): if i % 2 == 0: line = \'\'.join(\'# \'[(j % 2)] for j in range(n)) else: line = \'\'.join(\' #\'[(j % 2)] for j in range(n)) pattern.append(line) return \'n\'.join(pattern) def zigzag_patterns(data): d, *sizes = data results = [] for n in sizes: results.append(generate_zigzag_pattern(n)) return \'nn\'.join(results) def main(data): d, *sizes = map(int, data.split()) data = [d] + sizes return zigzag_patterns(data)"},{"question":"In a company, employees are grouped in teams. The company often needs to reassign employees to different teams due to shifting project requirements. You know the initial team assignments and a log of all reassignment events. Analyze the log and determine the final team assignment for each employee. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of employees and the number of initial teams. The next line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ m) — the initial team assignments of each employee where t_i represents the team assignment of the i-th employee. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of reassignment events. Each of the next q lines contains a reassignment event described as \\"1 p k\\" (1 ≤ p ≤ n, 1 ≤ k ≤ m). This means that the p-th employee is reassigned to team k. Output Print the final team assignments of all employees after all events. Examples Input 6 3 1 2 3 1 2 3 4 1 3 2 1 5 3 1 1 2 1 6 1 Output 2 2 2 1 3 1 Input 4 2 1 1 2 2 3 1 1 2 1 3 1 1 4 1 Output 2 1 1 1 Note In the first example, the team assignments change as follows: 1 2 3 1 2 3 → 1 2 2 1 2 3 → 1 2 2 1 3 3 → 2 2 2 1 3 3 → 2 2 2 1 3 1 In the second example, the team assignments change as follows: 1 1 2 2 → 2 1 2 2 → 2 1 1 2 → 2 1 1 1","solution":"def final_team_assignments(n, m, initial_teams, q, reassignments): Returns the final team assignments for all employees after all reassignment events. # Initial team assignments teams = initial_teams[:] # Processing all reassignment events for event in reassignments: _, p, k = event teams[p - 1] = k # updating the team for the p-th employee return teams"},{"question":"Given an integer K, determine if K can be represented as the sum of two distinct integers between 1 and 20 (inclusive). If it can, print `Possible`; if it cannot, print `Impossible`. Constraints * 2 leq K leq 40 * K is an integer. Input Input is given from Standard Input in the following format: K Output If K can be represented as the sum of two distinct integers between 1 and 20 (inclusive), print `Possible`; if it cannot, print `Impossible`. Examples Input 17 Output Possible Input 40 Output Impossible Input 3 Output Possible","solution":"def is_possible_sum(K): Returns \\"Possible\\" if K can be represented as the sum of two distinct integers between 1 and 20, else \\"Impossible\\". for i in range(1, 21): if K - i != i and 1 <= K - i <= 20: return \\"Possible\\" return \\"Impossible\\""},{"question":"You are given a sequence of integers representing the initial state of water levels in different water tanks connected in series. Each water tank can either be filled with water or be empty. You are allowed to pour water from one water tank into the next tank in the series, but only if the next tank is empty. The objective is to maximize the number of consecutive water-filled tanks starting from the beginning of the sequence after performing the allowed operations optimally. Let\'s see the following example: Given the initial sequence of [1, 0, 1, 0, 0], you can pour water from the first tank into the second tank, resulting in the sequence [0, 1, 1, 0, 0]. Then, pour water from the second tank into the third tank, resulting in the sequence [0, 0, 1, 1, 0]. Finally, pour water from the third tank into the fourth tank, which results in [0, 0, 0, 1, 1]. By performing these operations, you have one consecutive water-filled tank starting from the beginning, thus maximizing the number. Your task is to determine the maximum number of consecutive water-filled tanks starting from the beginning. Input The first line contains an integer n — the number of water tanks in the sequence (1 ≤ n ≤ 2 ⋅ 10^5). The second line contains n integers, where each integer is either 0 (empty) or 1 (filled), representing the initial state of the water levels in the tanks. Output Print one integer — the maximum number of consecutive water-filled tanks starting from the beginning of the sequence after performing the allowed operations optimally. Examples Input 5 1 0 1 0 0 Output 1 Input 4 0 1 0 1 Output 0 Input 6 1 1 0 0 1 1 Output 2 Note In the first example, you can perform the operations to maximize the consecutive water-filled tanks starting from the beginning, resulting in [0, 0, 0, 1, 1], thus achieving the result of 0.","solution":"def max_consecutive_filled_tanks(n, tanks): consecutive_filled = 0 # Iterate over the tanks and count consecutive 1s from the beginning for i in range(n): if tanks[i] == 1: consecutive_filled += 1 else: break return consecutive_filled"},{"question":"Problem Statement In a city called Alphaville, there are multiple intersections with traffic lights. Each traffic light can be either green or red. The state of the traffic lights changes according to a predefined sequence. Your task is to find the initial states of the traffic lights given a sequence of their states at different times. Consider a scenario where you are given the number of traffic lights `T` and the number of observations `O`. For each observation, you have the states of all traffic lights at that time. Another important point is that the state changes of each traffic light follow a consistent interval pattern. Input The first line contains two integers `T` (1 le T le 1000) and `O` (1 le O le 1000), indicating the number of traffic lights and the number of observations respectively. The next `O` lines each contain a string of length `T` consisting of characters \'G\' and \'R\', indicating the state of the traffic lights (Green or Red). It is guaranteed that the sequence of states follows a consistent interval pattern for each traffic light. Output Output a string of length `T` indicating the initial states of the traffic lights. Each character should be \'G\' or \'R\'. Sample Input > 5 3 > RGRGR > GRGRG > RGRGR Sample Output > RGRGR Explanation The traffic lights at the intersections follow a consistent interval pattern: 1. Observation 1: RGRGR 2. Observation 2: GRGRG 3. Observation 3: RGRGR The pattern repeats every 2 observations. The initial state of the traffic lights was RGRGR, which matches after every 2 steps. Each traffic light changes state at every step. Example Input > 5 3 > RGRGR > GRGRG > RGRGR Output > RGRGR","solution":"def find_initial_states(T, O, observations): Finds the initial states of the traffic lights given the sequence of observations. Parameters: T (int): Number of traffic lights. O (int): Number of observations. observations (list of str): List of observations containing the states of the traffic lights. Returns: str: Initial states of the traffic lights. # The initial state will be the first observation itself. # This utilizes the property that the sequence follows a consistent interval pattern. return observations[0] # Example usage: # result = find_initial_states(5, 3, [\\"RGRGR\\", \\"GRGRG\\", \\"RGRGR\\"]) # print(result) # Expected Output: \\"RGRGR\\""},{"question":"# Problem: Minimal Sum Paths You are given a grid with `n` rows and `m` columns, where each cell contains an integer value. Your objective is to find the minimal sum path starting from the top-left corner and ending at the bottom-right corner of the grid. You can only move either down or right at any point. Write a program to calculate the minimal sum of values along such a path. **Input** - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), which represent the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers, representing the values in the grid. Each value is an integer between 1 and 100. **Output** - Output a single integer which is the minimal sum of values along a path from the top-left to the bottom-right corner of the grid. **Examples** **Input:** 3 3 1 3 1 1 5 1 4 2 1 **Output:** 7 **Input:** 2 2 1 2 3 4 **Output:** 7 **Explanation** In the first example, the path with the minimal sum is `1 → 3 → 1 → 1 → 1`, which sums to `7`. In the second example, the path with the minimal sum is `1 → 2 → 4`, which sums to `7`. **Note** Consider using dynamic programming to solve this problem efficiently due to the constraints.","solution":"def minimal_sum_path(grid): Returns the minimal sum path in a grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point. n = len(grid) m = len(grid[0]) # Create a 2D dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the top-left cell with the first grid value dp[0][0] = grid[0][0] # Initialize the first column of dp array for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row of dp array for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill up the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner of the dp array contains the minimal sum path value return dp[-1][-1]"},{"question":"You are given a list of n integers. You need to find and return the length of the longest subsequence such that all elements of the subsequence are consecutive integers and sorted in increasing order. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the list. Output Print a single integer — the length of the longest subsequence of consecutive integers in increasing order. Examples Input 7 2 6 1 9 4 5 3 Output 6 Input 5 10 20 30 40 50 Output 1 Input 10 15 14 12 16 13 20 19 17 18 11 Output 10 Note In the first example, the longest subsequence of consecutive integers is [1, 2, 3, 4, 5, 6]. In the second example, there are no consecutive integers, so the length of the longest such subsequence is 1. In the third example, the entire list is a subsequence where the integers are consecutive.","solution":"def longest_consecutive_subsequence(arr): Finds the length of the longest subsequence such that all elements of the subsequence are consecutive integers in increasing order. if not arr: return 0 nums_set = set(arr) longest_streak = 0 for num in nums_set: # Check if `num` is the start of a streak if num - 1 not in nums_set: current_num = num current_streak = 1 # Increment streak while consecutive elements exist while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a string s consisting of lowercase letters, we define a palindrome as a string that reads the same forwards and backwards. The string s can be partitioned into one or more substrings in such a way that each substring is a palindrome. A partitioning is distinct if at least one of the resulting substrings differs from the substrings of another partitioning in at least one position. Your task is to find the minimum number of cuts needed to partition s into palindromic substrings. # Input The input consists of a single string s of length n (1 ≤ n ≤ 1000). # Output Print an integer representing the minimum number of cuts needed to partition the string into palindromic substrings. # Example **Input:** ``` aab ``` **Output:** ``` 1 ``` **Explanation:** The string \\"aab\\" can be cut into \\"aa\\" and \\"b\\", both of which are palindromes. Thus, only one cut is needed. **Input:** ``` banana ``` **Output:** ``` 1 ``` **Explanation:** The string \\"banana\\" can be cut into \\"banan\\" and \\"a\\", or \\"ban\\" and \\"ana\\", and \\"a\\" both of which require one cut. But if cut as \\"b\\", \\"anana\\" it would be two cuts. Hence, the minimum cuts required are 1. # Note A string can always be partitioned into individual characters, which are trivially palindromes. However, the objective is to minimize the number of cuts while ensuring that each substring in the partition is a palindrome.","solution":"def min_cut_palindrome(s): n = len(s) dp = [0] * n palindromic = [[False] * n for _ in range(n)] for i in range(n): min_cut = i for j in range(i + 1): if s[i] == s[j] and (i - j <= 1 or palindromic[j + 1][i - 1]): palindromic[j][i] = True min_cut = 0 if j == 0 else min(min_cut, dp[j - 1] + 1) dp[i] = min_cut return dp[-1]"},{"question":"A large warehouse contains many shelves, and each shelf contains several boxes of different weights. The warehouse needs to ensure that no single shelf is overloaded beyond a certain weight limit. You are tasked with creating a program to evaluate if this condition is met. Each shelf is described by a series of integers where each integer represents the weight of a box on that shelf. Given the weights of all the boxes on each shelf and the maximum allowed weight per shelf, determine if all shelves comply with the weight limit. Input: The first line contains two integers, M and L. M is the number of shelves and L is the maximum allowed weight per shelf. Each of the next M lines contains a series of integers representing the weights of the boxes on that shelf. Output: Print \\"All Shelves Compliant\\" if all shelves are within the weight limit, otherwise print \\"Shelf Overweight\\". Constraints: 1 ≤ M ≤ 100 1 ≤ L ≤ 10,000 Each shelf can have up to 100 boxes. 1 ≤ Weight of each box ≤ 1,000 SAMPLE INPUT 3 50 10 20 15 5 5 5 5 5 25 35 SAMPLE OUTPUT Shelf Overweight Explanation First shelf contains boxes with weights 10, 20, and 15 summing to 45 which is within the limit. Second shelf contains boxes with weights 5, 5, 5, 5, and 5 summing to 25 which is within the limit. Third shelf contains boxes with weights 25 and 35 summing to 60 which exceeds the limit.","solution":"def check_shelves_compliance(m, l, shelves): Determine if all shelves comply with the maximum weight limit. Parameters: m (int): Number of shelves. l (int): Maximum allowed weight per shelf. shelves (List[List[int]]): List of shelves each containing a list of box weights. Returns: str: \\"All Shelves Compliant\\" if all shelves are within the weight limit, otherwise \\"Shelf Overweight\\". for shelf in shelves: if sum(shelf) > l: return \\"Shelf Overweight\\" return \\"All Shelves Compliant\\""},{"question":"Given an integer N, your task is to compute the sum of all even numbers from 1 to N. Input The input consists of a single integer N (1 ≤ N ≤ 10^6). Output Output a single integer representing the sum of all even numbers from 1 to N. Examples Input 10 Output 30 Input 7 Output 12","solution":"def sum_of_even_numbers(N): Returns the sum of all even numbers from 1 to N. Args: N (int): the upper limit of the range of numbers to consider. Returns: int: the sum of all even numbers from 1 to N. sum_even = 0 for num in range(2, N+1, 2): sum_even += num return sum_even"},{"question":"Given a sequence of positive integers, you want to transform the sequence into a strictly increasing sequence by performing the following operation exactly once: choose two elements of the sequence and swap them. Write a function that receives a list of integers and returns a tuple with two integers (i, j) indicating the indices of the elements to swap to make the sequence strictly increasing. If there are multiple possible pairs, return the one with the smallest i, and among those with the smallest i, return the one with the smallest j. If it is not possible to transform the sequence into a strictly increasing sequence by swapping exactly two elements, return (-1, -1). Input A list of positive integers representing the sequence. The length of the sequence will be between 2 and 100 inclusive, and each integer in the list will be between 1 and 100 inclusive. Output A tuple of two integers (i, j) indicating the indices of the elements to swap. If no valid swap exists, return the tuple (-1, -1). Examples Input [3, 5, 8, 7, 6] Output (2, 4) Input [1, 2, 3, 4, 5] Output (-1, -1)","solution":"def find_swap_indices(sequence): n = len(sequence) for i in range(n): for j in range(i + 1, n): # Swap the elements at i and j sequence[i], sequence[j] = sequence[j], sequence[i] # Check if the sequence is strictly increasing if all(sequence[k] < sequence[k + 1] for k in range(n - 1)): return (i, j) # Swap back to restore original sequence sequence[i], sequence[j] = sequence[j], sequence[i] return (-1, -1)"},{"question":"You are working on a text editor and need to implement an auto-complete feature for a command input interface. The feature should suggest a list of possible commands according to the user\'s current input prefix. You are given a list of distinct command strings and a prefix string that the user has typed so far. Your task is to return all commands from the list that start with the given prefix. # Task Create a function `autocomplete(commands, prefix)` that takes in: - `commands`: a list of distinct strings representing the available commands. - `prefix`: a string representing the prefix typed by the user. The function should return a list of all commands that start with the given prefix. The commands in the returned list should be in the same order as they appear in the `commands` list. # Constraints - Each command consists of lowercase English letters. - `1 leq len(commands) leq 10^5` - `1 leq len(command) leq 100` - `0 leq len(prefix) leq 100` # Input Your function should accept the following parameters: - `commands`: list of strings. - `prefix`: string. # Output Your function should return a list of strings. # Examples ```python commands = [\\"install\\", \\"init\\", \\"input\\", \\"invoke\\", \\"inspect\\"] prefix = \\"in\\" autocomplete(commands, prefix) ``` Output: ```python [\\"install\\", \\"init\\", \\"input\\", \\"invoke\\", \\"inspect\\"] ``` ```python commands = [\\"install\\", \\"init\\", \\"list\\", \\"load\\", \\"locate\\"] prefix = \\"lo\\" autocomplete(commands, prefix) ``` Output: ```python [\\"load\\", \\"locate\\"] ``` ```python commands = [\\"run\\", \\"reset\\", \\"refactor\\", \\"reload\\"] prefix = \\"re\\" autocomplete(commands, prefix) ``` Output: ```python [\\"reset\\", \\"refactor\\", \\"reload\\"] ``` ```python commands = [\\"merge\\", \\"move\\", \\"minimize\\"] prefix = \\"max\\" autocomplete(commands, prefix) ``` Output: ```python [] ```","solution":"def autocomplete(commands, prefix): Returns a list of all commands that start with the given prefix. Parameters: commands (list of str): List of distinct commands. prefix (str): The prefix typed by the user. Returns: list of str: Commands that start with the given prefix. return [command for command in commands if command.startswith(prefix)]"},{"question":"You are given a list of integers which represent the heights of columns of different widths placed side by side. The width of each column is 1 unit. Calculate the maximum area of a rectangular water reservoir that can be formed within the bounds of these columns, assuming water extends horizontally between columns and can only be held within the space defined by the heights of the columns. A rectangular water reservoir is formed by two vertical sides represented by the heights of the columns and a horizontal base defined by the distance between them. You need to find two such columns, which together with the ground, form a container that holds the maximum amount of water. Input The first line of the input contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains an integer N, the number of columns. The second line contains N space-separated integers, representing the heights of the columns. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 10^4 0 ≤ Height of each column ≤ 10^5 Output For each test case, output a single integer in a separate line, representing the maximum area of water that can be contained. Example Input: 2 9 1 8 6 2 5 4 8 3 7 5 1 1 1 1 1 Output: 49 4 Explanation In the first test case, the optimal solution is to choose the heights at index 1 and index 8, which are 8 and 7 respectively. The distance between them is 7 - 1 = 6. Hence, the area is 6 * min(8, 7) = 6 * 7 = 42. In the second test case, any two heights can be chosen since all heights are equal and only a pair of these can form the optimal solution. Hence, the area is 4 (based on the two most separated columns).","solution":"def max_area_of_water_reservoir(heights): Calculate the maximum area of water that can be contained within the given heights. left = 0 right = len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area def solve(test_cases): results = [] for heights in test_cases: result = max_area_of_water_reservoir(heights) results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append(heights) index += 2 return test_cases"},{"question":"Jerry the Cat is a brilliant scientist and also very fond of collecting crystals. He recently came across a synthesis machine that can merge any two crystals to form a new crystal with the combined power equal to the sum of their powers. Jerry has collected N crystals, each with a certain power value. However, the merging process is quite energy-consuming, and Jerry wants to minimize the total energy used. The energy required to merge two crystals is equal to the sum of their powers. Jerry decides to always merge the two crystals with the smallest powers to keep the energy consumption to a minimum. Your task is to help Jerry determine the minimum total energy required to merge all the crystals into one crystal. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines starts with an integer N, followed by N integers representing the powers of the crystals. Output For each test case, output one integer - the minimum total energy required to merge all the crystals into one. Constraints 1 ≤ T ≤ 50 2 ≤ N ≤ 10^5 1 ≤ Power ≤ 10^4 Example Input: 2 3 1 2 3 4 4 3 2 1 Output: 9 19 Explanation In the first example, Jerry will merge crystals (1, 2) -> new crystal with power 3 (energy used: 3). Then, merge (3, 3) -> new crystal with power 6 (energy used: 6). Total energy used: 3 + 6 = 9. In the second example, Jerry will merge crystals (1, 2) -> new crystal with power 3 (energy used: 3). Then, merge (3, 3) -> new crystal with power 6 (energy used: 6). Finally, merge (4, 6) -> new crystal with power 10 (energy used: 10). Total energy used: 3 + 6 + 10 = 19.","solution":"import heapq def min_energy_to_merge_crystals(crystals): Returns the minimum total energy required to merge all the crystals into one. if not crystals: return 0 # Initialize a min heap with the crystals\' powers heapq.heapify(crystals) total_energy = 0 while len(crystals) > 1: # Pop the two smallest elements first = heapq.heappop(crystals) second = heapq.heappop(crystals) # Calculate the energy to merge them merge_cost = first + second total_energy += merge_cost # Push the merged crystal back into the heap heapq.heappush(crystals, merge_cost) return total_energy def solve(test_cases): results = [] for crystals in test_cases: results.append(min_energy_to_merge_crystals(crystals)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) crystals = list(map(int, data[index + 1: index + 1 + N])) test_cases.append(crystals) index += 1 + N results = solve(test_cases) for result in results: print(result)"},{"question":"A group of friends are participating in a relay race. Each friend runs a certain leg of the race and then passes the baton to the next friend. The friends are numbered from 1 to n in the order they run. The distance each friend runs and the order in which they pass the baton must satisfy certain conditions. Each friend i (1 ≤ i ≤ n) has a preferred running distance `d_i`. However, there is an additional constraint: if friend i passes the baton directly to friend j, then the distance run by friend j must be within ±1 units of the distance run by friend i. For example, if friend i runs 5 units, then friend j must run either 4, 5, or 6 units. Given the preferred running distances of each friend, your task is to determine if it is possible to organize the relay race such that all friends can run their preferred distances while satisfying the constraints. If it is possible, print \\"YES\\" and provide one such valid order of distances. If it is not possible, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of friends. The second line contains n integers `d_1, d_2, ..., d_n` (1 ≤ d_i ≤ 1 000 000) — the preferred running distances of each friend. Output If it is possible to organize the relay race, print \\"YES\\" on the first line. On the second line, print the n integers representing the distances each friend will run in the valid order. If there are multiple valid orders, print any of them. If it is not possible to organize the relay race such that all friends run their preferred distances and satisfy the constraints, print \\"NO\\". Examples Input 5 3 2 4 3 5 Output YES 2 3 4 3 5 Input 4 1 2 3 4 Output YES 3 2 1 2 Input 3 1 5 9 Output NO Note In the first example, a possible valid order is 2 3 4 3 5, where each friend\'s distance follows the ±1 constraint. In the second example, the distances can be organized in multiple valid ways, one of which is 3 2 1 2. In the third example, it is not possible to find a valid order such that the constraints are met.","solution":"def can_organize_relay_race(n, distances): distances.sort() for i in range(1, n): if abs(distances[i] - distances[i - 1]) > 1: return \\"NO\\" return \\"YES\\", distances def process_input(n, distances): result = can_organize_relay_race(n, distances) if result == \\"NO\\": return result else: return f\\"{result[0]}n{\' \'.join(map(str, result[1]))}\\""},{"question":"Given an array of integers, your task is to find a continuous subarray which has the maximum sum and return the sum. The array will contain at least one positive integer. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), which is the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) – the elements of the array. Output Print a single integer — the sum of the maximum sum subarray. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 8 -8 -3 -6 -2 -5 -4 Output -2 Note In the first example, the subarray with the maximum sum is [4,-1,2,1], so the answer is 4 + (-1) + 2 + 1 = 6. In the second example, since all numbers are negative, the subarray with the maximum sum is the least negative single integer in the array, which is -2 in this case.","solution":"def max_subarray_sum(arr): Uses Kadane\'s Algorithm to find the maximum sum of a contiguous subarray. Parameters: arr (list): List of integers representing the array. Returns: int: The maximum sum of the contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a grid of size n x m. Each cell in the grid either has the value 0 (which represents land) or the value 1 (which represents water). The objective is to convert all \'0\'s (land) connected to each other either horizontally or vertically into \'2\'s, considering these groupings of \'0\'s as separate islands. Two \'0\'s are considered connected if they are adjacent horizontally or vertically. After converting all connected \'0\'s into \'2\'s, you need to calculate the number of isolated islands of \'2\'s. An island is defined as a maximal group of \'2\'s connected horizontally or vertically. Write a function `def count_islands(grid: List[List[int]]) -> int:` that returns an integer representing the number of islands in the given grid. You can assume that the input grid does not change during execution. # Input - `grid`: a list of n lists, each containing m integers (0 or 1), where 1 ≤ n, m ≤ 100. # Output - Return an integer that represents the number of islands present in the grid. # Example ```python # Example 1 grid = [ [0, 1, 0, 1], [0, 1, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0] ] assert count_islands(grid) == 3 # Example 2 grid = [ [1, 1, 1], [1, 0, 0], [0, 0, 1] ] assert count_islands(grid) == 1 # Example 3 grid = [ [1] ] assert count_islands(grid) == 0 # Example 4 grid = [ [0, 0], [0, 0], [0, 0] ] assert count_islands(grid) == 1 ``` # Note In the first sample, there are three islands of \'0\'s: one located at the top-left, one at the bottom-left, and the last one at the bottom-right. In the second sample, all \'0\'s are part of one single island. In the third sample, there is no island since there is no \'0\' present. In the fourth sample, the entire grid forms one big island.","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: def dfs(x, y): # If out of bounds or at a cell that is not 0, return if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] != 0: return # Mark this cell as part of an island grid[x][y] = 2 # Explore neighbors dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 0: # We found a new island num_islands += 1 # Transform the island to `2`s dfs(i, j) return num_islands"},{"question":"Anna is planning a hiking trip and she wants to complete a trail of length d. She has a map that shows the elevation changes along the trail. The trail is divided into m segments, each with a specific elevation gain or loss. Given the division of the trail into segments with their respective elevations, Anna needs to determine the minimum and maximum total elevation gain she will encounter if she hikes from the start (0) to the end (d) of the trail. A segment with positive elevation indicates going uphill, while a segment with negative elevation indicates going downhill. Input The first line contains two positive integers m and d (1 ≤ m ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of segments and the length of the trail. Each of the next m lines contains two integers `length_i` and `elevation_i` (1 ≤ `length_i` ≤ d, -10^5 ≤ `elevation_i` ≤ 10^5), representing the length and elevation change of the ith segment respectively. Output Print two integers separated by a space: the minimum total elevation gain Anna would experience and the maximum total elevation gain she would experience if she completes the entire trail. Examples Input 3 10 3 10 4 -5 3 2 Output 12 10 Input 4 15 5 3 5 -3 5 2 5 -1 Output 2 5 Note In the first sample, the minimum total elevation gain is achieved by summing only the positive elevation changes (10 + 2 = 12) and the maximum total elevation gain sums both positive and negative changes but positive changes offset negative ones less (-5 + 2 =-3). In the second sample, the overall elevation gain is affected minimally by the third segment\'s positive elevation and the fourth segment\'s negative elevation results into min and max elevation gain accordingly.","solution":"def elevation_change(trail_segments): Returns the minimum and maximum total elevation gain over the trail. Args: trail_segments (List[Tuple[int, int]]): List of tuples where each tuple represents (length, elevation_change) of a segment. Returns: Tuple[int, int]: min_total_elevation, max_total_elevation min_gain = 0 max_gain = 0 for length, elevation in trail_segments: if elevation > 0: min_gain += elevation max_gain += elevation return min_gain, max_gain"},{"question":"Given a sequence of moves on a chessboard, determine if a particular piece ends up outside after all moves are executed. The chessboard is an 8x8 grid, and the moves are provided in a particular format. The positions on the chessboard are represented using standard chess notation, with columns \'a\' through \'h\' and rows \'1\' through \'8\'. For example, \'a1\' refers to the bottom-left corner of the board, and \'h8\' refers to the top-right corner. Two different kinds of pieces are considered: a King and a Knight. - The King can move one square in any direction: vertically, horizontally, or diagonally. - The Knight moves in an \'L\' shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Input The input begins with an integer T, the number of test cases. Each test case starts with a line that contains the type of the piece (\\"King\\" or \\"Knight\\") and its starting position. This is followed by a line with an integer N, the number of moves. The next N lines contain a move, defined as a direction followed by the number of spaces to move in that direction (applicable for the King) or just the move for the Knight. For the King, the directions are: - \\"up\\" - \\"down\\" - \\"left\\" - \\"right\\" - \\"upleft\\" - \\"upright\\" - \\"downleft\\" - \\"downright\\" For the Knight, the moves are represented using standard chess notation with pairs like \\"N1\\", \\"N2\\", etc. which correspond to each of the possible 8 moves a knight can make from its current position listed starting from the top left in a clockwise order. Output For each test case, print \\"YES\\" if the piece ends up outside the board after making the given sequence of moves, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 50 Each direction / move input will be a valid move for the respective piece. Each position will be a valid position on the chessboard. Sample Input: 2 King a1 3 right 1 up 2 left 1 Knight b1 2 N5 N7 Sample Output: NO YES Explanation: In the first test case, a King starts at \'a1\'. It moves to \'b1\', then \'b3\', and finally to \'a3\'. The King is still on the board. In the second test case, the Knight starts at \'b1\', moves to \'a3\', and then to \'c4\'. The Knight\'s final position \'c4\' is still on the board.","solution":"def is_outside_chessboard(piece_type, start_position, moves): # Helper function to convert a chess position to coordinates (row, col) def position_to_coord(position): column, row = position return ord(column) - ord(\'a\'), int(row) - 1 # Helper function to convert coordinates (row, col) to a chess position def coord_to_position(x, y): return chr(x + ord(\'a\')) + str(y + 1) # Check if a given coordinate is outside of the 8x8 chessboard def is_outside(x, y): return x < 0 or x >= 8 or y < 0 or y >= 8 # Initialize position x, y = position_to_coord(start_position) if piece_type == \\"King\\": directions = { \\"up\\": (0, 1), \\"down\\": (0, -1), \\"left\\": (-1, 0), \\"right\\": (1, 0), \\"upleft\\": (-1, 1), \\"upright\\": (1, 1), \\"downleft\\": (-1, -1), \\"downright\\": (1, -1) } for move in moves: direction, steps = move.split() dx, dy = directions[direction] x += dx * int(steps) y += dy * int(steps) if is_outside(x, y): return \\"YES\\" elif piece_type == \\"Knight\\": knight_moves = [ (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2) ] for move in moves: move_idx = int(move[1]) - 1 dx, dy = knight_moves[move_idx] x += dx y += dy if is_outside(x, y): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for test_case in test_cases: piece_type, start_position, N, moves = test_case result = is_outside_chessboard(piece_type, start_position, moves) results.append(result) return results"},{"question":"There are n houses on a street, and each house has a certain electric power demand. The electric power company wants to manage the power allocation efficiently. To do this, they need to ensure that no more than m houses are supplied with power at the same time, in order to prevent an overload on the power grid. Additionally, the company has assigned a priority value to each house: * p_i, the priority value of house i, where the higher the value, the higher the priority. The power company wants to devise a plan where they supply power to the maximum number of houses without exceeding the m house limit. If multiple plans supply power to the same number of houses, they should choose the one that has the highest total priority value. Help the power company find the optimal plan of power supply based on the given constraints. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ n) — the number of houses on the street and the maximum number of houses that can be supplied with power simultaneously. The second line of each test case contains n integers d_1, d_2, …, d_n (1 ≤ d_i ≤ 10^9) — the electric power demand of each house. The third line of each test case contains n integers p_1, p_2, …, p_n (1 ≤ p_i ≤ 10^9) — the priority value of each house. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case, output on a separate line: * The maximum number of houses that can be simultaneously supplied with power without exceeding the m house limit. * The highest total priority value that can be achieved while supplying the maximum number of houses. Example Input 4 5 3 10 20 30 40 50 1 5 3 4 2 6 4 5 10 15 20 25 30 2 3 6 1 4 8 3 2 8 4 6 7 5 4 4 1 3 5 7 9 2 4 1 3 Output 3 12 4 21 2 12 1 4 Note In the first test case, the highest number of houses that can be supplied with power without exceeding the limit of 3 is 3 houses. The best plan is to supply power to houses with demands 20, 40, and 10, whose priority values are 5, 4, and 1 (total priority value = 5 + 4 + 3 = 12). In the second test case, the highest number of houses that can be supplied with power without exceeding the limit of 4 is 4 houses. The best plan is to supply power to houses with demands 5, 15, 25, and 30, whose priority values are 2, 6, 4, and 8 (total priority value = 2 + 6 + 4 + 8 = 20). In the third test case, the highest number of houses that can be supplied with power without exceeding the limit of 2 is 2 houses. The best plan is to supply power to houses with demands 8 and 4, whose priority values are 7 and 5 (total priority value = 7 + 5 = 12). In the fourth test case, the highest number of houses that can be supplied with power without exceeding the limit of 1 is 1 house. The best plan is to supply power to the house with the highest priority, which has a demand of 5 and a priority value of 4.","solution":"def power_supply_plan(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] demands = test_cases[i][1] priorities = test_cases[i][2] # Create a list of tuples where each tuple is (demand, priority) houses = list(zip(demands, priorities)) # Sort houses first by priority descending, then by demand ascending houses.sort(key=lambda x: (-x[1], x[0])) # Take the first m houses from the sorted list selected_houses = houses[:m] # Compute the total priority of the selected houses total_priority = sum(house[1] for house in selected_houses) # The number of houses selected is min(n, m) house_count = min(n, m) results.append(f\\"{house_count} {total_priority}\\") return results"},{"question":"Given a tree of `n` nodes, you are asked to determine the diameter of the tree. The diameter of a tree is defined as the number of edges in the longest path between any two nodes in the tree. Input The first line of the input contains a single integer `n` (2 ≤ n ≤ 100,000) — the number of nodes in the tree. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) indicating that there is an edge between nodes `u` and `v`. Output Output a single integer — the diameter of the tree. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Input 6 1 2 1 3 2 4 2 5 5 6 Output 4 Note In the first example, the longest path is from node 4 to node 5, passing through nodes 3 and 1. The number of edges in this path is 3, so the diameter of the tree is 3. In the second example, the longest path is from node 4 to node 6, passing through nodes 2, 1, and 5. The number of edges in this path is 4, so the diameter of the tree is 4.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): Find the diameter of the tree. if n == 1: return 0 def bfs(start): Perform BFS and return the farthest node and its distance from the start node. visited = [-1] * (n + 1) visited[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Run BFS from an arbitrary start node to find one end of the diameter far_node, _ = bfs(1) # Run BFS from the farthest node to find the diameter _, diameter = bfs(far_node) return diameter"},{"question":"You are organizing a programming contest and you have a list of n problems, each with a unique difficulty level. You need to allocate these problems into m sessions such that each session has at least one problem, and the sum of the difficulty levels of the problems in each session is distinct. Input The first line contains two integers n and m (1 ≤ n ≤ 50; 1 ≤ m ≤ n), representing the number of problems and the number of sessions, respectively. The second line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 10^7), representing the difficulty levels of the problems. Output Print m lines, where each line describes one session. Each session description starts with an integer pi (1 ≤ pi ≤ n), the number of problems in the session, followed by pi distinct integers representing the difficulty levels of the problems in the session. The difficulty levels can be listed in any order. It is guaranteed that there is a solution that meets the problem conditions. If there are multiple solutions, print any of them. Examples Input 5 3 4 3 7 2 6 Output 1 4 1 3 3 7 2 6 Input 4 2 10 20 30 40 Output 1 10 3 20 30 40","solution":"def allocate_problems(n, m, difficulties): Allocate problems into m distinct sessions such that each session has a distinct sum of difficulty levels. Args: n : int : number of problems m : int : number of sessions difficulties : list of int : list of problem difficulty levels Returns: list of list of int : allocated problems for each session difficulties.sort(reverse=True) result = [[] for _ in range(m)] for i in range(n): result[i % m].append(difficulties[i]) output = [] for session in result: output.append([len(session)] + session) return output"},{"question":"Alex is an enthusiastic chess player who loves to study different chess positions and solve related puzzles. Recently, he came across a piece movement puzzle and needs your help to determine the minimum number of moves a knight needs to reach a target position on a standard 8x8 chessboard. The knight is placed at a source position (x1, y1) and must be moved to a target position (x2, y2). The knight follows the usual L-shape moves in chess: it can move two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. Help Alex find the minimal number of moves required for the knight to reach the target position from the source position on the chessboard. If it is not possible, output -1. Input The first line contains a pair of integers x1 and y1 (1 ≤ x1, y1 ≤ 8) — the starting position of the knight. The second line contains a pair of integers x2 and y2 (1 ≤ x2, y2 ≤ 8) — the target position of the knight. Output Output a single integer — the minimal number of moves required for the knight to reach the target position from the source position. If it is not possible for the knight to reach the destination, output -1. Examples Input 1 1 8 8 Output 6 Input 1 1 2 2 Output 4 Input 4 4 4 4 Output 0","solution":"from collections import deque def is_valid(x, y): return 1 <= x <= 8 and 1 <= y <= 8 def min_knight_moves(x1, y1, x2, y2): if x1 == x2 and y1 == y2: return 0 # Knight\'s possible moves dx = [2, 2, -2, -2, 1, 1, -1, -1] dy = [1, -1, 1, -1, 2, -2, 2, -2] queue = deque([(x1, y1, 0)]) # (x, y, distance) visited = set((x1, y1)) while queue: x, y, dist = queue.popleft() for i in range(8): nx, ny = x + dx[i], y + dy[i] if nx == x2 and ny == y2: return dist + 1 if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array of integers and a target integer. Your task is to determine whether there are two distinct indices i and j in the array such that nums[i] + nums[j] equals the target. Return true if such indices exist, and false otherwise. Input - An integer n (the number of elements in the array) where 2 ≤ n ≤ 10^5. - An array of n integers nums where each element is in the range [-10^9, 10^9]. - An integer target in the range [-10^9, 10^9]. Output Return \\"true\\" if there are two distinct indices i and j such that nums[i] + nums[j] equals the target, and \\"false\\" otherwise. Examples Input 5 2 7 11 15 9 Output true Input 3 1 2 3 6 Output false","solution":"def find_two_sum(nums, target): Determines if there are two distinct indices i and j such that nums[i] + nums[j] equals the target. Parameters: nums (list of int): List of integers target (int): Target sum Returns: bool: True if such indices exist, False otherwise complements = {} for num in nums: complement = target - num if complement in complements: return True complements[num] = True return False"},{"question":"Alice loves generating interesting numbers and making a game out of it. Here is one of her games that she asks Bob to solve. Given an integer m and an array b, consisting of ten integers, indexed by numbers from 0 to 9. Your task is to determine the minimum length of a positive integer that can be formed such that: * the integer\'s length does not exceed m; * the integer has no leading zeroes; * each digit i, (0 ≤ i ≤ 9) occurs in the integer at least b[i] times. If it\'s impossible to form such an integer, return -1. Input The first line contains integer m (1 ≤ m ≤ 100). The next line contains 10 integers b[0], b[1], ..., b[9] (0 ≤ b[i] ≤ 100) — elements of array b. The numbers are separated by spaces. Output Output the minimum length of the required positive integer that can be formed under the given constraints, or -1 if it\'s not possible. Examples Input 2 1 0 0 0 0 0 0 1 0 0 Output 2 Input 3 1 1 1 0 0 0 0 0 0 1 Output -1 Input 5 0 2 0 0 0 0 0 0 2 1 Output 5 Note In the first sample, the number 17 or any other combination like 71 can be formed with minimum length 2. In the second sample, it is impossible to form a number within length 3 that includes the digits 0, 1, 2, and 9 at least once. In the third sample, the number 88912 meets the requirements with length 5.","solution":"def min_length_integer(m, b): Determines the minimum length of the positive integer that meets the constraints. # Calculate the total minimum length required by summing up all the b values required_length = sum(b) # If required length is more than m, it is not possible to form such an integer if required_length > m: return -1 # Form the number by repeating each digit as many times as needed result = [] for digit, count in enumerate(b): result.extend([digit] * count) # Return the length of the formed number return len(result)"},{"question":"Raj\'s favorite hobby is collecting rare coins. Every weekend, he visits the local flea market to both buy and sell coins. As a result of his frequent trades, he sometimes ends up with duplicate coins. Given a list of coins Raj currently owns, write a program to determine if there are any duplicate coins in his collection. If there are duplicates, return the first duplicate coin seen when reading from left to right in his list of coins. Input: The first line of input contains the number of test cases, T. Each of the following T lines contain a list of integers representing the coins Raj currently owns, separated by a space. Output: Output should have T lines each containing either the first duplicate coin or \\"No duplicates\\" for corresponding test case. Constraints: 1 ≤ T ≤ 100 0 ≤ Value of coins ≤ 10000 1 ≤ Number of coins in each test case ≤ 1000 SAMPLE INPUT 2 1 2 3 4 5 1 7 8 9 10 7 11 12 SAMPLE OUTPUT 1 7","solution":"def find_first_duplicate(coins): Given a list of coins, finds the first duplicate coin. If there are no duplicates, returns \\"No duplicates\\". seen = set() for coin in coins: if coin in seen: return coin seen.add(coin) return \\"No duplicates\\" def process_test_cases(test_cases): Given the number of test cases and the respective lists of coins, returns a list of results for each test case. results = [] for coins in test_cases: results.append(find_first_duplicate(coins)) return results"},{"question":"A software company maintains a version control system to track changes in the source code. Each developer can work on the code in a separate branch and later merge those changes into the main branch. The system logs each commit made by developers, capturing the timestamp and the branch in which the commit was made. Occasionally, the log gets corrupted, and the sequence of commits gets interchanged. The company wants to detect if it is possible to restore the log to a valid sequence where each commit in a non-main branch follows a topological order based on its timestamps. Given the number of commits C, the number of branches B (excluding the main branch), and a list of commits with their branch and timestamp details, write a program to determine if it is possible to restore the log to a valid sequence. Each commit will be identified by a unique index, and you need to ensure that for each branch, commits are ordered by their timestamps. Input The input is given in the following format: C B index_1 branch_1 timestamp_1 index_2 branch_2 timestamp_2 : index_C branch_C timestamp_C The first line provides the number of commits C (2 ≤ C ≤ 105) and the number of branches B (1 ≤ B ≤ 104). Each of the C subsequent lines provides three values: the commit index (0 ≤ index_i < C), the branch number (0 ≤ branch_i ≤ B), and the timestamp (0 ≤ timestamp_i ≤ 109). A branch number of 0 indicates the commit is made in the main branch, and B is the total number of non-main branches. Output Output \\"YES\\" if it is possible to restore the log into a valid sequence. Otherwise, output \\"NO\\". Examples Input 5 2 0 0 1 1 1 5 2 2 3 3 1 4 4 2 2 Output NO Input 4 1 0 0 10 1 1 1 2 1 5 3 0 15 Output YES","solution":"def can_restore_log(c, b, commits): from collections import defaultdict # Create a dictionary to store commits by branch branches = defaultdict(list) for index, branch, timestamp in commits: branches[branch].append(timestamp) # For each branch except the main branch (branch 0) for branch in range(1, b + 1): if branch in branches: timestamps = branches[branch] if timestamps != sorted(timestamps): return \\"NO\\" return \\"YES\\" # To convert input to appropriate format and call the function def main(input_lines): first_line = input_lines[0].split() c = int(first_line[0]) b = int(first_line[1]) commits = [] for line in input_lines[1:]: index, branch, timestamp = map(int, line.split()) commits.append((index, branch, timestamp)) return can_restore_log(c, b, commits)"},{"question":"Given an integer array `arr` of size `n`, and two integers `i` and `j` (0 <= i <= j <= n-1), your task is to reverse the elements of the array between indices `i` and `j` (both inclusive) and then return the modified array. For example: Input: The first line contains an integer `t` representing the number of test cases. Each of the next `t` test cases consist of three lines: - The first line contains an integer `n`, which is the length of the array `arr`. - The second line contains `n` space-separated integers, representing the elements of the array `arr`. - The third line contains two space-separated integers `i` and `j`. Output: For each test case, print the modified array after reversing the elements between indices `i` and `j`. Example: Input: 2 5 1 2 3 4 5 1 3 6 10 20 30 40 50 60 2 5 Output: 1 4 3 2 5 10 20 60 50 40 30 By: Your Name","solution":"def reverse_subarray(arr, i, j): Reverses the elements of the array `arr` between indices `i` and `j` (both inclusive). Parameters: arr (list): The input array. i (int): The starting index for reversal. j (int): The ending index for reversal. Returns: list: The modified array with the specified subarray reversed. arr[i:j+1] = arr[i:j+1][::-1] return arr"},{"question":"Polycarp is organizing a series of programming contests. Each contest consists of several problems. Polycarp has a list of all the problems and the categories they fall into. Polycarp wants to ensure that there are no repeated categories in any contest since each contest should have unique problem categories. Polycarp needs your help to check whether each contest is well-organized based on this criterion. For each contest, you will be given a list of problem categories. You need to determine if all categories in the contest are unique. # Input The first line contains an integer `t` (1 ≤ t ≤ 1000), the number of contests. Each of the next `t` lines describes a contest. Each contest starts with an integer `n` (1 ≤ n ≤ 50), the number of problems in the contest. The next `n` integers follow, representing the categories of the problems in that contest. Each category is an integer between 1 and 100. # Output For each contest, output: * \\"YES\\" if all problem categories in the contest are unique, * \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answers). # Example Input 3 5 1 2 3 4 5 4 1 2 2 3 3 3 2 1 Output YES NO YES # Explanation For the first contest, all categories are unique (1, 2, 3, 4, 5), so the output is \\"YES\\". For the second contest, the category 2 appears twice, so the output is \\"NO\\". For the third contest, all categories are unique (3, 2, 1), so the output is \\"YES\\".","solution":"def are_categories_unique(contests): Determines if all problem categories in each contest are unique. Args: contests : List of contests(each contest represented by a list where the first element is the number of problems n, followed by n problem categories) Returns: List of strings: \\"YES\\" if all categories in the contest are unique, \\"NO\\" otherwise. results = [] for contest in contests: num_problems = contest[0] problems = contest[1:] if len(problems) == len(set(problems)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a small town, there is a library that follows a unique system for arranging books. Each book in the library is characterized by three attributes: `title`, `author`, and `height`. The library wants to arrange the books such that: 1. Books are first sorted by their author\'s name in ascending alphabetical order. 2. If two books have the same author, they are then sorted by their title in ascending alphabetical order. 3. If two books have the same author and title, they are then sorted by their height in descending order. Given a list of books with these three attributes, your task is to output the ordered list of books as described. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of books. Each of the next `n` lines contains a book\'s information, consisting of the author\'s name (a string with at most 100 characters), the title of the book (a string with at most 100 characters), and the book\'s height (an integer h, 1 ≤ h ≤ 109). Output Print the list of books sorted according to the criteria above. Each book should be printed on a new line, with the author\'s name, the title, and the height separated by a space. Example Input 4 John Steinbeck The Grapes of Wrath 200 John Steinbeck East of Eden 150 Margaret Atwood The Handmaid\'s Tale 180 John Steinbeck The Grapes of Wrath 180 Output John Steinbeck East of Eden 150 John Steinbeck The Grapes of Wrath 200 John Steinbeck The Grapes of Wrath 180 Margaret Atwood The Handmaid\'s Tale 180","solution":"def sort_books(book_list): Sorts a list of books based on the given criteria: 1. By author\'s name in ascending alphabetical order. 2. By title in ascending alphabetical order if author names are equal. 3. By height in descending order if both author names and titles are equal. Args: book_list (list): List of dictionaries containing book information. Returns: list: Sorted list of books according to the criteria. # Sort books with a tuple as key: (author, title, -height) sorted_books = sorted(book_list, key=lambda x: (x[\'author\'], x[\'title\'], -x[\'height\'])) return sorted_books"},{"question":"You are given an ancient text that holds great power but is encrypted. The encryption is simple: each letter in the original text is replaced by the letter that is `k` positions after it in the alphabet. This is known as a Caesar cipher. For example, with `k=3`, \'a\' becomes \'d\', \'b\' becomes \'e\', \'z\' becomes \'c\', etc. Write a function that decrypts the given text. The decrypted text consists only of lowercase English alphabets. Input The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a string `E` representing the encrypted text and an integer `K`. Output For each test case, output the decrypted text on a new line. Constraints 1 ≤ T ≤ 100 1 ≤ length of string E ≤ 1000 0 ≤ K ≤ 25 SAMPLE INPUT 3 d G khoor 3 z 2 SAMPLE OUTPUT a d hello x Explanation For the first test case: Shifting \'d\' by `k=3` positions back gives \'a\'. Similarly, shifting a space by 3 doesn\'t change the space, and \'G\' shifted back by 3 positions gives \'d\'. For the second test case: Shifting \'khoor\' by 3 positions back gives \'hello\'. For the third test case: Shifting \'z\' by 2 positions back gives \'x\'.","solution":"def decrypt_caesar_cipher(encrypted_text, k): Decrypts a Caesar cipher encrypted text by shifting characters `k` positions backwards. Non-alpha characters remain unchanged. decrypted_text = [] for char in encrypted_text: if char.isalpha(): # Determine if the character is uppercase or lowercase for correct shift if char.islower(): base = ord(\'a\') else: base = ord(\'A\') # Apply the backward shift decrypted_char = chr((ord(char) - base - k) % 26 + base) decrypted_text.append(decrypted_char) else: decrypted_text.append(char) # Non-alphabetical characters remain the same return \'\'.join(decrypted_text) def caesar_cipher_decrypt(T, test_cases): results = [] for encrypted_text, k in test_cases: results.append(decrypt_caesar_cipher(encrypted_text, k)) return results"},{"question":"Several theater companies want to hold rehearsals in your city\'s theater, and you have been selected to manage the schedule. Each rehearsal needs a continuous block of time, but the theater can only host one rehearsal at a time. You have been given the start and end times of each rehearsal request and need to determine the maximum number of non-overlapping rehearsals that can be accommodated. Create a program which reads multiple sets of rehearsal time intervals and outputs the maximum number of non-overlapping rehearsals for each set. Input A sequence of multiple datasets is given as input. Each dataset begins with a single integer n (0 ≤ n ≤ 1000), the number of rehearsal requests. The following n lines each contain two integers, s and e (0 ≤ s < e ≤ 10000), which represent the start and end times of a rehearsal. The end of the input is indicated by a single line containing \'0\'. Output For each dataset, output a single integer indicating the maximum number of non-overlapping rehearsals that can be accommodated. Example Input 5 1 4 2 6 8 10 3 5 5 7 3 3 8 2 4 1 3 0 Output 3 2","solution":"def max_non_overlapping_rehearsals(sets_of_requests): results = [] for requests in sets_of_requests: requests.sort(key=lambda x: x[1]) # Sort by the end time count, last_end_time = 0, 0 for start, end in requests: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') index = 0 sets_of_requests = [] while index < len(input_lines): n = int(input_lines[index]) if n == 0: break requests = [] index += 1 for _ in range(n): start, end = map(int, input_lines[index].split()) requests.append((start, end)) index += 1 sets_of_requests.append(requests) return sets_of_requests def main(input_data): sets_of_requests = process_input(input_data) results = max_non_overlapping_rehearsals(sets_of_requests) for result in results: print(result) # For testing: # input_data = \\"5n1 4n2 6n8 10n3 5n5 7n3n3 8n2 4n1 3n0\\" # main(input_data)"},{"question":"You are given a grid with N rows and M columns, where each cell contains either a \'#\' character representing a wall or a \'.\' character representing an empty space. Your task is to determine if there exists a path to navigate from the top-left corner of the grid (1,1) to the bottom-right corner (N,M) without passing through any walls. You can only move horizontally or vertically between adjacent cells. Input The input is provided in the following format: N M r1 r2 : rN The first line contains the dimensions of the grid: N (2 ≤ N ≤ 1000) and M (2 ≤ M ≤ 1000). The following N lines each contain a string of M characters, representing the grid. The character at position (i, j) in the grid is either \'.\' for an empty space or \'#\' for a wall. Output Output \\"possible\\" if there is a path from the top-left to the bottom-right corner of the grid, and \\"impossible\\" otherwise. Examples Input 4 4 ..#. .#.. .... ..#. Output possible Input 3 3 .#. # ..# Output impossible","solution":"def is_path_possible(grid): Determines if there is a path from the top-left corner to the bottom-right corner in a 2D grid. Args: grid (list of list of str): A 2D list where each element is either \'.\' (empty space) or \'#\' (wall). Returns: str: \'possible\' if a path exists, \'impossible\' otherwise. if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return \'impossible\' from collections import deque N = len(grid) M = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def in_bounds(x, y): return 0 <= x < N and 0 <= y < M queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \'possible\' for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \'impossible\' def check_path(n, m, grid_lines): Wrapper function to parse input and determine path possibility. Args: n (int): Number of rows. m (int): Number of columns. grid_lines (list of str): The grid lines as strings. Returns: str: \'possible\' or \'impossible\' based on the path determination. grid = [list(line) for line in grid_lines] return is_path_possible(grid)"},{"question":"Suppose you are given a rectangular grid of size n x m, where n is the number of rows and m is the number of columns. Each cell in the grid contains a letter: \'L\' represents land and \'W\' represents water. Your task is to compute the number of isolated bodies of water in the grid. An isolated body of water is defined as a group of one or more \'W\' cells connected either vertically or horizontally but not diagonally, and surrounded by \'L\' cells or the grid boundary on all sides. Write a function `countIsolatedBodies` that takes in the number of rows n, number of columns m, and an n x m grid of characters, and returns the number of isolated bodies of water. Function signature: ``` def countIsolatedBodies(grid: List[List[str]]) -> int: ``` **Input:** - `n` (1 ≤ n ≤ 1000): the number of rows in the grid. - `m` (1 ≤ m ≤ 1000): the number of columns in the grid. - `grid`: an n x m grid of characters (\'L\' or \'W\'). **Output:** - An integer representing the number of isolated bodies of water in the grid. **Example:** ``` Input: 4 5 LLWLL LWLWL LLWWL LLLLL Output: 3 ``` **Explanation:** 1. The first body of water is at (0, 2). 2. The second body of water is at (1, 1). 3. The third body of water is formed by (2, 2) and (2, 3). Please note that the order and labels used in the input/output structures should be adapted if necessary, when implementing the function.","solution":"def countIsolatedBodies(grid): Counts the number of isolated bodies of water in a grid. if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'W\': return grid[x][y] = \'L\' # mark the water cell as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'W\': dfs(i, j) count += 1 return count"},{"question":"You are given a string s, consisting of lowercase English letters. Your task is to reorganize the string such that no two adjacent characters are the same. If it is not possible to reorganize the string in this way, output \\"Not possible\\". Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5). Output Output a single line with the reorganized string if it is possible to do so, otherwise output \\"Not possible\\". Examples Input aab Output aba Input aaab Output Not possible Input aabbcc Output abcabc","solution":"import heapq from collections import Counter def reorganize_string(s): # Calculate the frequency of each character in the string freq = Counter(s) # Create a max heap with the negative counts so the most frequent characters come first max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and -prev_count > 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 result_str = \'\'.join(result) if len(result_str) != len(s): return \\"Not possible\\" return result_str # Example Usage: # s = \\"aab\\" # output = reorganize_string(s) # print(output) # Output: \\"aba\\""},{"question":"Mila is hosting a dinner party and wants to arrange the seating for her guests. Each guest can be seated around a circular table, and Mila wants to ensure that no two guests who don\'t get along are seated next to each other. She has a list of pairs of guests who do not get along, and she needs to determine if it is possible to arrange the seating so that no such pair is seated next to each other. Input The first line contains an integer n (3 ≤ n ≤ 100) — the number of guests. The second line contains an integer m (0 ≤ m ≤ n*(n-1)/2) — the number of pairs of guests who do not get along. The next m lines contain two integers each, a and b (1 ≤ a, b ≤ n, a ≠ b) — denoting a pair of guests that do not get along. Output Print \\"YES\\" if it is possible to arrange the seating such that no two guests who do not get along are seated next to each other. Print \\"NO\\" otherwise. Examples Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 4 3 1 2 2 3 3 4 Output NO Note In the first example, one possible seating arrangement is 1-3-5-2-4, where no two adjacent pairs from (1, 2), (2, 3), (3, 4), (4, 5) are seated next to each other. In the second example, it is not possible to seat the guests such that all pairs (1, 2), (2, 3), (3, 4) are not next to each other.","solution":"from itertools import permutations def can_arrange_seating(n, m, conflict_pairs): Determines if it\'s possible to arrange seating so that no two guests who don\'t get along are seated next to each other. if m == 0: return \\"YES\\" conflicts = set((min(a, b), max(a, b)) for a, b in conflict_pairs) for perm in permutations(range(1, n + 1)): valid = True for i in range(n): a, b = perm[i], perm[(i + 1) % n] if (min(a, b), max(a, b)) in conflicts: valid = False break if valid: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string `s` representing a sequence of characters, where each character can be a lowercase letter (\'a\' to \'z\') or a space (\' \'). Your task is to encode the string using a simple cipher technique described below and output the encoded string. The cipher technique is as follows: 1. Replace each letter in the string with the letter that is two positions after it in the alphabet. For example, \'a\' is replaced by \'c\', \'z\' is replaced by \'b\'. 2. Spaces are not altered and remain as is. Note that the alphabet is considered circular. Thus, after \'z\', the next letter would be \'a\' and so forth. Input The first and only line of input contains the string s (1 ≤ |s| ≤ 100), which consists of lowercase letters and spaces only. Output The output should be the encoded string, after applying the cipher technique described above. Examples Input hall of fame Output jcnn qh hcog Input x ray Output z tca Input abc xyz Output cde zab Note In the first example, each letter in the input string is shifted by two positions in the alphabet. For instance, \'h\' becomes \'j\', \'a\' becomes \'c\', \'l\' becomes \'n\', and so on. The spaces remain unmodified. The same rule is applied in the second and third examples. Note how the alphabet wraps around after \'z\' in the final example, where \'x\' becomes \'z\', \'y\' becomes \'a\', and \'z\' becomes \'b\'.","solution":"def encode_string(s): Encodes the given string by replacing each letter with the one that is two positions after it in the alphabet, with wrapping around from \'z\' to \'a\'. Spaces remain the same. :param s: Input string consisting of lowercase letters and spaces :return: Encoded string encoded = [] for char in s: if char == \' \': encoded.append(char) else: new_char = chr(((ord(char) - ord(\'a\') + 2) % 26) + ord(\'a\')) encoded.append(new_char) return \'\'.join(encoded)"},{"question":"You are given an array A of length N. You will perform Q queries on this array. In the i-th query, you are given two integers L_i and R_i. You must compute the sum of the values in the subarray from the L_i-th to the R_i-th (inclusive). After each query, output the sum of the specified subarray. Constraints * 1 leq N, Q leq 200,000 * 1 leq L_i leq R_i leq N * -1,000,000 leq A[i] leq 1,000,000 Input Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N L_1 R_1 : L_Q R_Q Output Print Q lines. In the i-th line print the sum of the subarray from L_i-th to the R_i-th element. Examples Input 10 3 1 2 3 4 5 6 7 8 9 10 1 5 4 7 2 10 Output 15 22 54 Input 5 2 -5 -10 5 10 0 1 3 2 5 Output -10 5","solution":"def compute_subarray_sums(n, q, array, queries): Computes the sum of subarrays for given queries. Parameters: - n (int): Length of the array. - q (int): Number of queries. - array (list of int): The array of integers. - queries (list of tuple of int): Each tuple contains two integers L and R. Returns: - list of int: The sum of elements in the specified subarrays for each query. # Compute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] result = [] for L, R in queries: result.append(prefix_sums[R] - prefix_sums[L - 1]) return result # Example usage: n = 10 q = 3 array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] queries = [(1, 5), (4, 7), (2, 10)] print(compute_subarray_sums(n, q, array, queries)) # Expected: [15, 22, 54]"},{"question":"You are given a rectangular grid of n rows and m columns. Your initial position is at (1, 1) and you want to reach the bottom-right corner at (n, m). However, there are some cells in the grid which are blocked and you cannot step on them. You have to find the number of distinct paths you can take to reach the bottom-right corner from the top-left corner. You can only move either down or right at any point in time. Input First line contains integer T denoting the number of test cases. Then follow T test cases. Each test case starts with two integers, n and m, denoting the number of rows and columns in the grid. Then the next line contains an integer k denoting the number of blocked cells. The next k lines contain two integers ri and ci denoting the row and column index of the blocked cell in the grid. You can assume that 1 <= T <= 50, 1 <= n, m <= 100, 0 <= k <= n*m. Output For each test case, output the number of distinct paths from the top-left to the bottom-right corner. If there is no valid path, print 0. Example Input: 2 3 3 1 2 2 2 2 0 Output: 2 0","solution":"def unique_paths_with_obstacles(n, m, obstacles): Returns the number of unique paths from (1, 1) to (n, m) in a grid with obstacles. # Initialize DP table dp = [[0] * m for _ in range(n)] # Mark obstacles in the DP table for r, c in obstacles: dp[r-1][c-1] = -1 # Set start position if dp[0][0] == -1: return 0 dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if dp[i][j] == -1: dp[i][j] = 0 # override the obstacle marker else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def process_input(T, test_cases): results = [] for t in range(T): n, m = test_cases[t][\'n\'], test_cases[t][\'m\'] obstacles = test_cases[t][\'obstacles\'] results.append(unique_paths_with_obstacles(n, m, obstacles)) return results"},{"question":"A company ships packages across different regions. Each package has a unique ID and a priority level from 1 to 5. The priority level indicates how urgently the package needs to be delivered, with 1 being the least urgent and 5 being the most urgent. To manage their operations, the company maintains a log of package delivery events. Each event records a package ID and the day it was delivered. The company wants to analyze their performance by identifying the package with the highest priority that was delivered on each day. You need to write a program that reads a list of delivery events and outputs the package ID with the highest priority for each day. If multiple packages with the same highest priority exist on a given day, return the one that was delivered most recently. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of delivery events. The next n lines each contain two integers: the package ID (1 ≤ package ID ≤ 1,000,000) and the delivery day (1 ≤ delivery day ≤ 100,000), and one integer p (1 ≤ p ≤ 5) — the priority of the package. Output For each delivery day that has at least one delivery event, output the package ID with the highest priority delivered on that day. If multiple packages with the same highest priority exist, return the one that was delivered most recently. Example Input 6 101 1 2 102 1 3 103 2 4 104 2 3 105 3 5 106 3 4 Output 102 103 105 Input 5 201 1 1 202 1 2 203 2 2 204 2 1 205 3 3 Output 202 203 205","solution":"def highest_priority_package(n, deliveries): from collections import defaultdict # Dictionary to hold deliveries per day delivery_log = defaultdict(list) # Populate the dictionary with package data for package_id, day, priority in deliveries: delivery_log[day].append((priority, package_id)) # Dictionary to keep the result result = {} # Determine the highest priority package for each day for day, logs in delivery_log.items(): # Sort the packages first by priority descending, then by package id descending logs.sort(key=lambda x: (-x[0], -x[1])) result[day] = logs[0][1] # Getting the results in a sorted manner by day sorted_days = sorted(result.keys()) return [result[day] for day in sorted_days]"},{"question":"Given an array of integers, you are required to determine if the array can be made strictly increasing by incrementing exactly one of its elements by 1. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the size of array a. The second line contains n space-separated integers: a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109). Output Print \\"yes\\" or \\"no\\" (without quotes), depending on the answer. Examples Input 5 1 2 3 4 5 Output yes Input 5 1 2 3 3 5 Output yes Input 5 1 2 3 2 5 Output no Input 1 10 Output yes Note Sample 1. The array is already strictly increasing, so no increment is needed. Sample 2. Incrementing the second 3 by 1 makes the array [1, 2, 3, 4, 5], which is strictly increasing. Sample 3. Incrementing any element by 1 cannot make the array strictly increasing. Definitions An array is strictly increasing if for every i (1 ≤ i < n), a[i] < a[i+1].","solution":"def can_be_strictly_increasing(n, a): Determines if an array can be made strictly increasing by incrementing exactly one of its elements by 1. if n == 1: return \\"yes\\" # Function to check if array is strictly increasing def is_strictly_increasing(arr): return all(arr[i] < arr[i+1] for i in range(len(arr)-1)) if is_strictly_increasing(a): return \\"yes\\" for i in range(n): b = a[:] b[i] += 1 if is_strictly_increasing(b): return \\"yes\\" return \\"no\\""},{"question":"Alice is planning her holiday trip and wants to visit a series of cities connected by direct roads. Each road between two cities has a certain travel cost, and Alice wants to calculate the minimal cost required to travel from her starting city to her destination city. You are given information about the cities Alice can visit and the roads connecting them. Your task is to determine the minimum travel cost for Alice to go from the starting city to the destination city. Input First line contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ k ≤ 100000) — the number of cities, the number of roads, and the number of invalid paths Alice cannot travel through. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) — describing a direct road from city u to city v with travel cost w. The next k lines each contain two integers x and y (1 ≤ x, y ≤ n, x ≠ y), describing a pair of cities which Alice cannot travel directly between in either direction. The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t) — Alice\'s starting city and destination city. Output Print a single integer — the minimum travel cost required for Alice to travel from the starting city to the destination city. If it\'s impossible to reach the destination city from the starting city, print -1. Example Input 4 5 1 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 2 3 1 4 Output 5 Note In this example, there are 4 cities and 5 roads. Alice starts from city 1 and wants to reach city 4. Despite cities 2 and 3 being adjacent, Alice cannot travel directly between them. The valid paths from city 1 to city 4 are: - 1 -> 3 -> 4 with cost 2 + 3 = 5 Thus, the minimum cost is 5.","solution":"import heapq def find_minimum_travel_cost(n, m, k, roads, invalid_paths, start, destination): graph = {i: [] for i in range(1, n + 1)} invalid_path_set = set(map(tuple, invalid_paths)) for u, v, w in roads: if (u, v) not in invalid_path_set and (v, u) not in invalid_path_set: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(graph, start, destination): pq = [(0, start)] # priority queue of (cost, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 visited = set() while pq: current_cost, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == destination: return current_cost for neighbor, weight in graph[current_node]: if neighbor not in visited: new_cost = current_cost + weight if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return -1 return dijkstra(graph, start, destination)"},{"question":"You are given two integers, `n` (the number of students) and `k` (the number of candies). You need to distribute the candies to the students in such a way that each student gets an equal number of candies and the remaining candies (if any) are placed back in the bag. Return a list where the first element is the number of candies each student gets and the second element is the number of candies remaining in the bag. Input The input consists of two integers, `n` and `k` where: - `1 <= n <= 1000` - `0 <= k <= 1000` Output Print a list containing two integers: the first integer is the number of candies each student gets, and the second integer is the number of candies remaining in the bag. Examples Input 3 10 Output [3, 1] Input 5 14 Output [2, 4]","solution":"def distribute_candies(n, k): Distributes k candies among n students and returns the number of candies each student gets and the number of candies remaining in the bag. :param n: int - number of students :param k: int - number of candies :return: list - [candies per student, candies remaining in the bag] candies_per_student = k // n candies_remaining = k % n return [candies_per_student, candies_remaining]"},{"question":"You are given two arrays `A` and `B` of integers, both of size `n`. You need to determine if it\'s possible to reorder the elements of array `A` such that for every index `i` (0 ≤ i < n), the inequality `A[i] + B[i] ≤ k` holds true for a given integer `k`. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input - The first line contains an integer n (1 ≤ n ≤ 100), the size of the arrays. - The second line contains n integers, the elements of array A (1 ≤ A[i] ≤ 1000). - The third line contains n integers, the elements of array B (1 ≤ B[i] ≤ 1000). - The fourth line contains the integer k (1 ≤ k ≤ 2000). Output - Print \\"YES\\" if you can reorder the elements of array A to satisfy the condition, otherwise print \\"NO\\". Example Input 4 2 3 1 4 4 3 2 1 5 Output YES","solution":"def can_reorder(A, B, k): Determines if it\'s possible to reorder array A such that for every index i, A[i] + B[i] <= k. A_sorted = sorted(A) B_sorted = sorted(B, reverse=True) for a, b in zip(A_sorted, B_sorted): if a + b > k: return \\"NO\\" return \\"YES\\""},{"question":"You are participating in a programming contest, and one of the problems caught your attention. The problem involves determining the maximum sum of any subarray within a given list of integers. A subarray is defined as a contiguous portion of an array. Your task is to write a program that takes an integer array as input and outputs the maximum sum of all possible subarrays. Input The input consists of multiple datasets. Each dataset begins with an integer n (1 ≤ n ≤ 1000), the number of integers in the array, followed by n integers. The end of the input is indicated by a single line with the number 0. Output For each dataset, output a single integer representing the maximum sum of all possible subarrays for that dataset. Each result should be on a new line. Example Input 4 −2 1 −3 4 5 1 2 3 4 5 0 Output 4 15","solution":"def max_subarray_sum(nums): Returns the maximum sum of any subarray within a given list of integers. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_input(input_data): Process the input data and returns the results for each dataset. lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break nums = list(map(int, lines[i + 1].split())) results.append(max_subarray_sum(nums)) i += 2 return results"},{"question":"You are given a tree with n nodes. Each node is colored either black or white. A \\"good\\" path is defined as a path in which the number of black nodes does not exceed the number of white nodes. Your task is to determine the length of the longest \\"good\\" path in the tree. Input The first line contains a single integer n — the number of nodes in the tree (1 ≤ n ≤ 10^5). The second line contains n space-separated integers — the colors of the nodes. A black node is represented with a 0, and a white node is represented with a 1. Each of the next n-1 lines contains two integers a and b — denoting an edge between nodes a and b. Output Print a single integer — the length of the longest \\"good\\" path in the tree. Examples Input 5 0 1 0 1 1 1 2 1 3 3 4 3 5 Output 4 Input 3 1 0 1 1 2 2 3 Output 3 Input 4 1 0 0 1 1 2 2 3 3 4 Output 4 Note In the first sample, the longest \\"good\\" path is 1-3-4-5, where there are 2 white nodes and 2 black nodes, so the length of this path is 4. In the second sample, the longest \\"good\\" path is 1-2-3, with 2 white nodes and 1 black node, so the length is 3. In the third sample, one of the longest \\"good\\" paths is 1-2-3-4, with 2 white nodes and 2 black nodes, so the length is 4.","solution":"from collections import defaultdict, deque def longest_good_path(n, colors, edges): def is_good_path(path): black_count = sum(1 for node in path if colors[node] == 0) white_count = len(path) - black_count return black_count <= white_count def bfs_longest_good_path(start): visited = [False] * n queue = deque([(start, [start])]) visited[start] = True longest_path = [] while queue: node, path = queue.popleft() if is_good_path(path) and len(path) > len(longest_path): longest_path = path[:] for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, path + [neighbor])) return len(longest_path) adjacency_list = defaultdict(list) for a, b in edges: adjacency_list[a - 1].append(b - 1) adjacency_list[b - 1].append(a - 1) max_length = 0 for node in range(n): max_length = max(max_length, bfs_longest_good_path(node)) return max_length"},{"question":"Lina is working on optimizing the traffic flow in her hometown. The city has n intersections, and m two-way roads. Each road connects two distinct intersections and ensures continuous coverage of the city, meaning each pair of intersections is connected directly or indirectly via these roads. Since the road network ensures connectivity, it forms a connected undirected graph. However, some of the roads are more congested than others. Lina wants to determine which roads are critical to maintaining uninterrupted flow through the city. Specifically, a road is considered critical if removing it would increase the number of connected components in the city, thus disrupting the traffic flow. Given the description of the road network, identify all the critical roads. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of intersections and the number of roads, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing a road between intersections u and v. Output Output the number of critical roads, followed by a list of the critical roads in any order. Each road should be represented as a pair of integers x and y (1 ≤ x < y ≤ n). Examples Input 5 5 1 2 1 3 2 3 3 4 4 5 Output 2 3 4 4 5 Input 4 4 1 2 2 3 3 4 4 1 Output 0 Note In the first example, removing the roads (3, 4) or (4, 5) would split the city into two disconnected components, making them critical. In the second example, there are no critical roads, as removing any single road still keeps all intersections connected.","solution":"def find_critical_roads(n, m, roads): def dfs(u, parent): nonlocal time visited[u] = True disc[u] = low[u] = time time += 1 for v in graph[u]: if v == parent: continue if not visited[v]: dfs(v, u) low[u] = min(low[u], low[v]) if low[v] > disc[u]: critical_roads.append((min(u, v), max(u, v))) else: low[u] = min(low[u], disc[v]) graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) disc = [float(\'inf\')] * (n + 1) low = [float(\'inf\')] * (n + 1) time = 0 critical_roads = [] for i in range(1, n + 1): if not visited[i]: dfs(i, -1) return len(critical_roads), sorted(critical_roads) # Example Usage n = 5 m = 5 roads = [(1, 2), (1, 3), (2, 3), (3, 4), (4, 5)] result = find_critical_roads(n, m, roads) print(result) # Output: (2, [(3, 4), (4, 5)])"},{"question":"Calvin is devising a new encryption algorithm and wants to determine the uniqueness of the keys generated by his method. Each key is an ordered sequence of lowercase alphabetic characters. Specifically, the method generates keys based on contiguous substrings of a given input string. Calvin\'s task is to identify the number of unique keys that can be generated from the input string. The keys are defined as all possible substrings of the input string. For example, given the input string \\"abc\\", the unique keys would include \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Your task is to write a program that determines the number of unique keys (substrings) that can be generated from the given input string. Input The input begins with an integer T (1 ≤ T ≤ 10), the number of test cases. Each of the next T lines contains a single string s (1 ≤ |s| ≤ 100), consisting only of lowercase alphabetic characters. Output For each test case, output the number of unique substrings that can be generated from the given string. Example Input 3 abc aaa ababa Output 6 3 9","solution":"def unique_substrings(s): Returns the number of unique substrings that can be generated from the given string. unique_keys = set() for start in range(len(s)): for end in range(start + 1, len(s) + 1): unique_keys.add(s[start:end]) return len(unique_keys) def unique_keys_from_strings(num_strings, strings): results = [] for s in strings: results.append(unique_substrings(s)) return results"},{"question":"In a country there are several cities connected by bidirectional roads. Each road has a certain toll cost associated with it. Due to recent budget cuts, the government wants to minimize the total toll cost for travelers by reducing the number of active roads. Your task is to determine the smallest possible toll cost to maintain a road network that connects all cities. To achieve this, you decide to use a Minimum Spanning Tree (MST). Given the number of cities and roads, along with the description of each road, you are to compute the minimum cost to ensure that all cities are connected. Input: The first line of input contains two integers N and R denoting the number of cities and the number of roads respectively. The next N lines contain the names of the cities. The next R lines contain three elements City1, City2, and an integer Toll denoting that there is a road connecting City1 and City2 with a toll cost of Toll. Output: Output a single integer which is the total minimum toll cost to connect all cities. Constraints: 1 ≤ N ≤ 100 1 ≤ R ≤ N * (N - 1) / 2 1 ≤ Toll ≤ 1000 SAMPLE INPUT: 4 5 Mumbai Delhi Bangalore Chennai Mumbai Delhi 10 Delhi Bangalore 15 Bangalore Chennai 5 Chennai Mumbai 7 Mumbai Bangalore 20 SAMPLE OUTPUT: 22 Explanation: An optimal road network with minimum toll cost is: Mumbai -> Delhi (10) Delhi -> Bangalore (15) Bangalore -> Chennai (5) Total minimum toll cost = 10 + 15 + 5 = 30. However, the edge Bangalore -> Chennai can be replaced with Mumbai -> Chennai (7), leading to the MST with a cost of 10 + 15 + 7 = 22.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(n, roads): roads.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n minimum_cost = 0 for road in roads: city1, city2, cost = road root1 = find(parent, city1) root2 = find(parent, city2) if root1 != root2: minimum_cost += cost union(parent, rank, root1, root2) return minimum_cost def parse_input(data): lines = data.strip().split(\'n\') n, r = map(int, lines[0].split()) cities = [lines[i + 1] for i in range(n)] city_index = {city: idx for idx, city in enumerate(cities)} roads = [] for i in range(r): city1, city2, toll = lines[n + 1 + i].split() roads.append((city_index[city1], city_index[city2], int(toll))) return n, roads def minimum_toll_cost(data): n, roads = parse_input(data) return minimum_spanning_tree(n, roads)"},{"question":"You are managing a network of servers that process tasks. Each task needs to be assigned to a server based on its capacity. Each server has a specific capacity that indicates the maximum load it can handle. You need to distribute the tasks such that no server exceeds its capacity. You are given n servers and m tasks. Each task has a certain load and each server has a given capacity. A task can be assigned to any server as long as the total load of tasks assigned to that server does not exceed its capacity. Your objective is to determine if it\'s possible to distribute all tasks across the servers without exceeding their capacities, and if so, provide one such distribution. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of servers and tasks respectively. The next line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^6) — the capacities of the servers. The next line contains m integers t_1, t_2, ..., t_m (1 ≤ t_i ≤ 10^6) — the loads of the tasks. Output If it\'s possible to distribute all tasks such that no server exceeds its capacity, print \\"YES\\" followed by m integers — the indexes of the servers each task is assigned to (1-based indexing). If there are multiple valid distributions, print any of them. If it is not possible to distribute the tasks without exceeding the server capacities, print \\"NO\\". Examples Input 3 5 10 20 30 5 7 8 6 4 Output YES 1 1 2 1 3 Input 2 4 15 10 10 5 10 5 Output NO","solution":"def distribute_tasks(n, m, capacities, tasks): Distribute m tasks among n servers without exceeding their capacities. Parameters: n (int): Number of servers. m (int): Number of tasks. capacities (list of int): Capacities of the servers. tasks (list of int): Loads of the tasks. Returns: str: \\"NO\\" if it\'s not possible to distribute the tasks, or \\"YES\\" followed by the list of server indices for each task if it is possible. from heapq import heappush, heappop # Prepare servers as a heap with (remaining_capacity, server_index) server_heap = [] for i in range(n): heappush(server_heap, (capacities[i], i + 1)) task_assignments = [0] * m for task_index in range(m): task_load = tasks[task_index] # Find the server with enough capacity temp_heap = [] assigned = False while server_heap: remaining_capacity, server_index = heappop(server_heap) if remaining_capacity >= task_load: task_assignments[task_index] = server_index remaining_capacity -= task_load heappush(server_heap, (remaining_capacity, server_index)) assigned = True break else: temp_heap.append((remaining_capacity, server_index)) if not assigned: # If not assigned, return NO return \\"NO\\" # Push remaining servers back to heap while temp_heap: heappush(server_heap, temp_heap.pop()) return \\"YES \\" + \\" \\".join(map(str, task_assignments))"},{"question":"You are given a numeric keypad with digits 0-9 along with the special characters ‘*’ and ‘#’. The keypad map is similar to the one found in older mobile phones, where each digit maps to a set of characters as follows: 2 -> \'abc\' 3 -> \'def\' 4 -> \'ghi\' 5 -> \'jkl\' 6 -> \'mno\' 7 -> \'pqrs\' 8 -> \'tuv\' 9 -> \'wxyz\' Given a string of digits (excluding 0, 1, \'*\', and \'#\'), generate all possible letter combinations that the number string could represent. Input A string consisting of digits (2-9) only. Output All possible letter combinations that the string could represent, listed in alphabetical order. Examples Input 23 Output ad ae af bd be bf cd ce cf Input 7 Output p q r s Input 26 Output am an ao bm bn bo cm cn co","solution":"from itertools import product def letter_combinations(digits): Returns all possible letter combinations for the given string of digits. if not digits: return [] # Mapping from digit to letters phone_map = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Create list of lists with corresponding characters letters = [phone_map[d] for d in digits] # Generate all possible combinations combinations = [\'\'.join(comb) for comb in product(*letters)] return sorted(combinations)"},{"question":"During his daily walk in the park, Alex found a peculiar tree with an interesting challenge. The tree has nodes and each node can have 0, 1, or 2 children. Each node contains a unique integer value. Alex challenges you with the task of finding the maximum sum path in the tree. A path is defined as any sequence of nodes starting from a root node and ending at any leaf node. Implement a function that calculates the maximum sum from the root to any leaf node in the tree. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), which is the number of nodes in the tree. - The second line contains `n` integers, where the i-th integer is the value of the i-th node. - The following `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), denoting an edge between node `u` and node `v`. # Output - Output a single integer, which is the maximum sum from the root node to any leaf node. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output ``` 8 ``` # Note In the example above, we have the following tree: ``` 1 / 2 3 / 4 5 ``` The maximum sum path is 1 → 2 → 5, and the sum is 1 + 2 + 5 = 8.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(values, edges): nodes = [TreeNode(value) for value in values] for u, v in edges: u -= 1 # Convert to 0-based indexing v -= 1 nodes[u].children.append(nodes[v]) return nodes[0] # Return the root node def max_sum_path(root): if not root.children: # Leaf node return root.value return root.value + max(max_sum_path(child) for child in root.children) def find_max_sum_path(n, node_values, edges): root = build_tree(node_values, edges) return max_sum_path(root)"},{"question":"Problem statement Alice is passionate about gardening and has a rectangular garden represented as a 2D grid. Each cell in the grid can either be empty or contain a plant. Alice can perform a special move: she can pick a plant from one cell and place it in any empty cell. She wants to rearrange her garden so that all plants are grouped together in one rectangular block within the grid (without any empty cells between them). The goal is to figure out the minimum number of moves required to achieve this while ensuring plants remain contiguous and in a rectangular formation. input The first line contains an integer T, the number of test cases. For each test case, the first line contains two integers R and C, the number of rows and columns of the grid, respectively. This is followed by R lines, each containing a string of length C representing the grid, where \'.\' represents an empty cell, and \'*\' represents a cell with a plant. Constraints * 1 ≤ T ≤ 100 * 1 ≤ R, C ≤ 50 * The total number of plants in the grid for each test case is at least 1 and at most R * C. output For each test case, output the minimum number of moves required to rearrange the plants in a contiguous rectangular block. sample Sample input 2 4 4 *..* .... ..*. .... 3 5 .*... ..*.. ..... Sample output 4 1 Explanation: 1. In the first test case, one way to gather all plants into a 2x2 block (using 4 moves) is: Initial grid: *..* .... ..*. .... Final grid: **.. **.. .... .... 2. In the second test case, moving one plant to the position next to the other will yield: Initial grid: .*... ..*.. ..... Final grid: .**.. ..... .....","solution":"def min_moves_to_rearrange_plants(T, test_cases): results = [] for t in range(T): R, C = test_cases[t][0] grid = test_cases[t][1] plants = [] for i in range(R): for j in range(C): if grid[i][j] == \'*\': plants.append((i, j)) num_plants = len(plants) min_moves = float(\'inf\') for top_left_row in range(R): for top_left_col in range(C): for bottom_right_row in range(top_left_row, R): for bottom_right_col in range(top_left_col, C): required_plants = (bottom_right_row - top_left_row + 1) * (bottom_right_col - top_left_col + 1) if required_plants == num_plants: possible_positions = [] moves = 0 plant_index = 0 for i in range(top_left_row, bottom_right_row+1): for j in range(top_left_col, bottom_right_col+1): possible_positions.append((i, j)) moves += abs(plants[plant_index][0] - i) + abs(plants[plant_index][1] - j) plant_index += 1 min_moves = min(min_moves, moves) results.append(min_moves) return results"},{"question":"Lina loves counting the number of unique substrings in a string. Given a string `s`, she is interested in counting how many unique substrings of all possible lengths can be formed from `s`. Your task is to help Lina determine this count. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100). The string consists of lowercase English letters. Output Print a single integer — the number of unique substrings in the given string. Examples Input ``` abc ``` Output ``` 6 ``` Input ``` aaa ``` Output ``` 3 ``` Input ``` ababa ``` Output ``` 9 ``` Note In the first example, the unique substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". The total is 6. In the second example, the unique substrings are: \\"a\\", \\"aa\\", \\"aaa\\". The total is 3. In the third example, the unique substrings are: \\"a\\", \\"ab\\", \\"b\\", \\"ba\\", \\"aba\\", \\"ab\\", \\"abab\\", \\"baba\\", \\"ababa\\". The total is 9.","solution":"def count_unique_substrings(s): Returns the number of unique substrings of the given string s. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Given an integer array `nums` and an integer `target`, determine if there are two distinct indices `i` and `j` in the array such that `nums[i] + nums[j]` is equal to `target`. You should return a boolean value indicating whether such a pair exists. Constraints - The array `nums` will have a length between 1 and 10^5. - Each element in `nums` will be an integer between -10^9 and 10^9. - The `target` will be an integer between -10^9 and 10^9. Input Input is given from Standard Input in the following format: ``` n nums_1 nums_2 ... nums_n target ``` Output Print `True` if such a pair exists, and `False` otherwise. Examples Input ``` 6 1 2 3 4 5 6 9 ``` Output ``` True ``` Input ``` 4 1 2 3 4 8 ``` Output ``` False ```","solution":"def has_pair_with_sum(nums, target): Determines if there are two distinct indices i and j such that nums[i] + nums[j] is equal to target. :param nums: List[int] - list of integers :param target: int - target sum :return: bool - True if such a pair exists, else False num_set = set() for num in nums: if target - num in num_set: return True num_set.add(num) return False"},{"question":"Alice is a competitive coder and often practices on an online judge platform. One of the challenges she faces involves working with integer arrays. She likes to practice making efficient functions that can compute results quickly even for large inputs. One common problem she tackles is finding the maximum product of any two distinct elements in an array. Help Alice by writing a function that solves this problem efficiently. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ (10^5)), the number of elements in the array. - The second line contains `n` integers (a_1, a_2, ldots, a_n) (-10^9 ≤ a_i ≤ 10^9), representing the elements of the array. **Output:** - Print a single integer, the maximum product of any two distinct elements in the array. **Examples:** **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 20 ``` **Input:** ``` 4 -10 -20 5 6 ``` **Output:** ``` 200 ``` **Note:** In the first example, the maximum product is obtained by multiplying the two largest elements, 4 and 5, resulting in 20. In the second example, although there are negative numbers in the array, multiplying the two smallest (negative) numbers, -10 and -20, gives the maximum product 200.","solution":"def max_product(n, arr): arr.sort() return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"A binary tree is a data structure in which each node has at most two children referred to as the left child and the right child. Given a binary tree, your task is to determine if the tree is a valid binary search tree (BST). In a valid BST, for each node, the left subtree contains only nodes with values less than the node’s value, and the right subtree contains only nodes with values greater than the node’s value. You need to implement a function `isValidBST` that takes the root node of a binary tree and returns a boolean value indicating whether the binary tree is a valid BST. # Input - The root node of the binary tree (or `None` if the tree is empty). # Output - A boolean value: `True` if the binary tree is a valid BST, `False` otherwise. # Constraints - The number of nodes in the tree is in the range `[0, 10^5]`. - Each node’s value is a 32-bit signed integer `[-2^31, 2^31 - 1]`. # Example _Example 1:_ ``` 2 / 1 3 ``` Input The binary tree with root node `TreeNode(2, TreeNode(1), TreeNode(3))`. Output `True` _Example 2:_ ``` 5 / 1 4 / 3 6 ``` Input The binary tree with root node `TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))`. Output `False` # Notes In Example 2, the given tree is not a valid BST because the node with value 3 is in the right subtree of the node with value 5. # Function Signature (Python) ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root: Optional[TreeNode]) -> bool: # Your code here ```","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root: Optional[TreeNode]) -> bool: def validate(node, low=-float(\'inf\'), high=float(\'inf\')): # An empty tree is a valid BST if not node: return True # The current node\'s value must be between low and high if not (low < node.val < high): return False # Recursively validate the left and right subtrees return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"There are n gifts in Santa\'s workshop, and each gift has a unique integer id from 1 to n. Santa wants to distribute these gifts to m children as evenly as possible, but he has some additional rules: 1. Each child must receive at least one gift. 2. The difference between the number of gifts any two children receive must be at most 1. 3. Every child must receive a consecutive range of gift ids. Your task is to write a program that determines whether it\'s possible to distribute the gifts to the children according to the above rules. If it\'s possible, output one valid way to distribute the gifts. If it\'s not possible, output -1. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 10^6) — the number of gifts and the number of children. Output If it\'s possible to distribute the gifts according to the rules, print m lines. Each line should contain two integers ai and bi (1 ≤ ai ≤ bi ≤ n), denoting the range of gift ids that the i-th child should receive. The ranges must not overlap, and each gift id from 1 to n must be included exactly once among the ranges. The ranges should be printed in the order the children receive them. If it\'s not possible to distribute the gifts according to the rules, print -1. Examples Input 10 3 Output 1 4 5 7 8 10 Input 7 2 Output 1 4 5 7 Input 5 5 Output 1 1 2 2 3 3 4 4 5 5 Input 4 5 Output -1","solution":"def distribute_gifts(n, m): Distributes n gifts among m children according to the specified requirements. Parameters: n (int): The number of gifts. m (int): The number of children. Returns: list: A list of tuples representing the ranges of gift ids each child should receive, or -1 if it is not possible to distribute the gifts according to the rules. if m > n: return -1 # Calculate the base number of gifts each child would receive base_gift_count = n // m # Calculate how many children need to receive an extra gift extra_gifts = n % m distribution = [] current_gift_id = 1 for i in range(m): start_gift_id = current_gift_id if i < extra_gifts: end_gift_id = start_gift_id + base_gift_count else: end_gift_id = start_gift_id + base_gift_count - 1 distribution.append((start_gift_id, end_gift_id)) current_gift_id = end_gift_id + 1 return distribution"},{"question":"You are developing an automated trading system for a financial market platform. One of the core tasks involves calculating moving averages, which is a common technical analysis tool. You have to compute the moving averages for a given list of stock prices within a specified window size. A moving average of window size k is defined as the average of the last k prices over a certain period. Given an array of stock prices and a window size k, your task is to compute the moving averages of the prices. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of stock prices. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the stock prices. - The third line contains a single integer k (1 ≤ k ≤ n) — the window size. Output - Output n - k + 1 integers representing the moving averages. Example Input 8 1 3 2 6 4 8 7 5 3 Output 2 3.6666666666666665 4 6 6.333333333333333 6.666666666666667 Input 5 10 20 30 40 50 2 Output 15 25 35 45 Note In the first example: - The average of the first window [1, 3, 2] is (1 + 3 + 2) / 3 = 2. - The average of the next window [3, 2, 6] is (3 + 2 + 6) / 3 = 3.666... - The average of the next window [2, 6, 4] is (2 + 6 + 4) / 3 = 4. - The average of the next window [6, 4, 8] is (6 + 4 + 8) / 3 = 6. - The average of the next window [4, 8, 7] is (4 + 8 + 7) / 3 = 6.333... - The average of the last window [8, 7, 5] is (8 + 7 + 5) / 3 = 6.666... In the second example: - The average of the first window [10, 20] is (10 + 20) / 2 = 15. - The average of the next window [20, 30] is (20 + 30) / 2 = 25. - The average of the next window [30, 40] is (30 + 40) / 2 = 35. - The average of the last window [40, 50] is (40 + 50) / 2 = 45.","solution":"def moving_averages(n, prices, k): Returns the moving averages of the stock prices with a specified window size. :param n: Number of stock prices (int) :param prices: List of stock prices (list of int) :param k: Window size (int) :return: List of moving averages (list of float) averages = [] window_sum = sum(prices[:k]) averages.append(window_sum / k) for i in range(k, n): window_sum = window_sum - prices[i - k] + prices[i] averages.append(window_sum / k) return averages"},{"question":"You are given an array of integers, where every element appears exactly twice, except for one unique element that appears only once. Write a program to find the element that appears only once. Your solution should have a linear runtime complexity and use only constant extra space. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the size of the array. The second line contains n integers: the elements of the array. Every element in the array is between -1,000,000 and 1,000,000. Output Print the unique element that appears only once. Example Input 9 4 3 2 4 1 3 2 5 1 Output 5 Note In the example above, each integer except for 5 appears exactly twice, so the answer is 5.","solution":"def find_unique_number(arr): Given an array where every element appears exactly twice except for one unique element, this function finds and returns the unique element. The solution works in O(n) time complexity and uses constant extra space. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"A certain company has a policy of dividing up annual bonuses among its employees based on their performance scores. Each employee has a unique ID from 0 to n-1. The company\'s management wants to distribute the bonuses in such a way that each employee\'s bonus is proportional to their performance score compared to the total performance scores of all employees. You are tasked with writing a program that calculates the bonus amount for each employee. Constraints - 1 ≤ n ≤ 1000 - 1 ≤ performance score ≤ 100 Input n p0 p1 : pn-1 The first line of input contains an integer n, the number of employees. The next n lines each contain a single integer pi, the performance score of employee i. Output n lines, each containing a single floating-point number rounded to two decimal places, which is the bonus of the corresponding employee. Example Input 4 10 20 30 40 Output 10.00 20.00 30.00 40.00","solution":"def calculate_bonuses(n, performance_scores): Calculates the bonuses for n employees based on their performance scores. Parameters: n (int): Number of employees performance_scores (list of int): List of performance scores for each employee Returns: list of float: List of calculated bonus amounts for each employee to 2 decimal places. total_performance = sum(performance_scores) if total_performance == 0: return [0.0] * n # In case all performance scores are zero, avoiding division by zero. bonuses = [(score / total_performance) * total_performance for score in performance_scores] return [round(bonus, 2) for bonus in bonuses]"},{"question":"Sorting Artists by Popularity An art gallery is planning to hold an exhibition featuring various artists. They want to list the artists based on their popularity. The popularity of each artist is determined by the number of likes received on their artworks. There might be multiple artworks by the same artist, and each artwork can have different number of likes. Given a list of artworks along with the artist\'s name and the number of likes for that artwork, your task is to output the list of artists sorted by their total popularity in descending order. If two artists have the same total popularity, they should be listed in alphabetical order. Input The input consists of multiple lines. The first line contains an integer n (1 leq n leq 1000), the number of artworks. The following n lines each contain an artist\'s name followed by the number of likes for their artwork. Each artist\'s name consists of only lowercase and uppercase English letters and has a length between 1 and 100, inclusive. The number of likes for an artwork is a non-negative integer no greater than 10000. Output Output a list of artists sorted by their total popularity in descending order. Each artist should appear exactly once along with their total number of likes. If two or more artists have the same total number of likes, they should appear in alphabetical order. Each line of the output should contain the artist\'s name followed by the total number of likes they received, separated by a single space. Example Input 1 5 Alice 500 Bob 300 Alice 200 Charlie 400 Bob 400 Example Output 1 Alice 700 Bob 700 Charlie 400 Example Input 2 4 Zack 150 Ari 200 Ari 300 Zack 200 Example Output 2 Ari 500 Zack 350","solution":"def sort_artists_by_popularity(n, artworks): from collections import defaultdict artist_popularity = defaultdict(int) for artwork in artworks: artist, likes = artwork likes = int(likes) artist_popularity[artist] += likes sorted_artists = sorted(artist_popularity.items(), key=lambda x: (-x[1], x[0])) return sorted_artists # Example usage: n = 5 artworks = [ (\\"Alice\\", 500), (\\"Bob\\", 300), (\\"Alice\\", 200), (\\"Charlie\\", 400), (\\"Bob\\", 400) ] print(sort_artists_by_popularity(n, artworks))"},{"question":"You are given a matrix of positive integers, where each cell in the matrix contains a single integer value. You can perform the following operation on the matrix any number of times: select any row or column and increment each element in that row or column by one. Determine if it is possible to make all the elements of the matrix equal using a certain number of operations. Input The first line contains one integer t (1 ≤ t ≤ 200) — the number of test cases. Then t test cases follow. Each test case begins with a line containing two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix, respectively. The next n lines of each test case contain m integers each — representing the elements of the matrix. The value of each element is between 1 and 100. Output For each test case, output on a separate line: * YES, if it is possible to make all elements of the matrix equal by applying a certain number of operations. * NO, otherwise. The letters in the words YES and NO can be outputted in any case. Example Input 2 3 3 1 2 3 2 3 4 3 4 5 2 2 4 5 5 6 Output YES YES","solution":"def can_make_all_elements_equal(matrix): n = len(matrix) m = len(matrix[0]) # Calculate the base difference (difference from the top-left corner) base_diff = matrix[0][0] for r in range(n): for c in range(m): if (matrix[r][c] - base_diff) % 2 != (r + c) % 2: return False return True def process_test_cases(t, test_cases): results = [] for matrix in test_cases: if can_make_all_elements_equal(matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage # t = 2 # test_cases = [ # [[1, 2, 3], [2, 3, 4], [3, 4, 5]], # [[4, 5], [5, 6]] # ] # print(process_test_cases(t, test_cases)) # Should return [\\"YES\\", \\"YES\\"]"},{"question":"You are given a tree (connected undirected graph with no cycles) with n nodes rooted at node 1. Each node is assigned a unique value. Your task is to answer q queries of the following type: Given two nodes u and v, find the maximum value on the path from node u to node v. Input The first line contains two integers n and q (1 ≤ n ≤ 105, 1 ≤ q ≤ 105) — the number of nodes and the number of queries. The second line contains n integers from 1 to n — the values assigned to the nodes. Next n−1 lines contain two integers ui and vi (1 ≤ ui, vi ≤ n) describing the edges of the tree. The next q lines contain two integers u and v describing the queries. Output For each query, output the maximum value on the path from node u to node v. Examples Input 5 3 5 3 7 6 2 1 2 1 3 3 4 3 5 1 5 2 4 3 5 Output 7 7 7 Explanation In the first query, the path from node 1 to node 5 is 1 -> 3 -> 5 and the maximum value on this path is 7. In the second query, the path from node 2 to node 4 is 2 -> 1 -> 3 -> 4 and the maximum value on this path is 7. In the third query, the path from node 3 to node 5 is just 3 -> 5 and the maximum value on this path is 7.","solution":"def find_path(graph, start, end, path=[]): path = path + [start] if start == end: return path for node in graph[start]: if node not in path: new_path = find_path(graph, node, end, path) if new_path: return new_path return None def max_value_on_path(values, path): return max(values[node - 1] for node in path) def solve(n, q, node_values, edges, queries): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) results = [] for u, v in queries: path = find_path(graph, u, v) results.append(max_value_on_path(node_values, path)) return results"},{"question":"Sarah works at a company that organizes software coding marathons. For the next event, she wants to ensure that the length of each marathon is optimal to maximize both engagement and participation. Given a list of previous marathons and their respective lengths, she wants to calculate the median length of the marathons. The median length is defined as the middle value when the lengths are sorted in non-decreasing order. If there are an even number of lengths, the median is the average of the two middle values. Help Sarah calculate the median length of marathons for each set of records she provides. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains the single integer n (1 ≤ n ≤ 1000) — the number of marathons in the record. - The second line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 10^6) — the lengths of the marathons. Output For each test case, print one float — the median length of the marathons. Print the result rounded to one decimal place. Example Input 2 5 2 1 5 4 3 4 10 8 7 9 Output 3.0 8.5 Note In the first test case, the sorted lengths are [1, 2, 3, 4, 5], so the median is 3. In the second test case, the sorted lengths are [7, 8, 9, 10], so the median is (8 + 9) / 2 = 8.5.","solution":"def calculate_median(t, test_cases): results = [] for i in range(t): n, lengths = test_cases[i] lengths.sort() if n % 2 == 1: median = lengths[n // 2] else: median = (lengths[n // 2 - 1] + lengths[n // 2]) / 2 results.append(round(median, 1)) return results # Example usage: # t = 2 # test_cases = [(5, [2, 1, 5, 4, 3]), (4, [10, 8, 7, 9])] # print(calculate_median(t, test_cases)) # Output: [3.0, 8.5]"},{"question":"There are n cities connected by bidirectional roads. Each road has a certain length. You are given the task of finding the minimum total length of the roads that should be included to maintain the connectivity of the entire set of cities (called the minimum spanning tree of the graph). Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), where n is the number of cities and m is the number of roads. The following m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) representing a road between cities u and v of length w. Each road is represented exactly once. Output Print a single integer — the total length of the roads in the minimum spanning tree. If there are no roads, output 0. Examples Input 4 5 1 2 1 1 3 4 3 4 2 2 4 3 2 3 5 Output 6 Input 3 0 Output 0 Note In the first sample, the minimum spanning tree can be formed by using roads (1-2, 2-4, 3-4) with total length 6. In the second sample, there are no roads, so the output is 0.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = 0 # Sort edges based on weight edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) e = 0 # Number of edges in MST i = 0 # Index variable for sorted edges while e < n-1 and i < len(edges): u,v,w = edges[i] i += 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e += 1 result += w union(parent, rank, x, y) return result def min_spanning_tree(n, m, roads): # If there are no roads, return 0 if m == 0: return 0 return kruskal(n, roads)"},{"question":"The Tumbletown post office has received an interesting challenge. They are tasked with sorting a set of letters based on their destination addresses. Each address is represented as a string of uppercase and lowercase letters, and the postal workers want to sort these strings in lexicographical order but with a twist: all uppercase letters should be considered smaller than any lowercase letter. Your task is to write a function that takes a list of addresses and returns the sorted list according to the given rules. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of addresses. Each of the next n lines contains a string of up to 100 characters consisting of uppercase and lowercase English letters representing an address. Output Output n lines, each containing one sorted address according to the specified rules. Examples Input 4 abc Zebra Alpha aBc Output Alpha Zebra aBc abc Input 3 qRs aBc Pqr Output Pqr aBc qRs Note In the first test case, the addresses are sorted such that all uppercase letters come before lowercase letters, and the order is lexicographical within these constraints. In the second test case, the same rules apply, ensuring all uppercase letters appear before any lowercase letters in the sorted result.","solution":"def sort_addresses(addresses): Sorts a list of addresses where uppercase letters are considered smaller than lowercase letters. Parameters: addresses (list of str): A list of addresses to be sorted. Returns: list of str: The sorted list of addresses. return sorted(addresses, key=lambda x: [(c.islower(), c) for c in x])"},{"question":"You are working on a new project that involves processing large datasets represented as 2D matrices. For a certain operation, you need to rotate the matrix 90 degrees clockwise given a specific number of steps. Each step means a 90-degree rotation. For instance, if you are given a 2x2 matrix and 1 step, the result would be the matrix rotated 90 degrees clockwise. If you were given 2 steps, the result would be the matrix rotated 180 degrees. The steps can be large (even larger than 4), so you need to handle this intelligently. Your task is to design an algorithm that performs these rotations efficiently. Input: The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the matrix, respectively. The next n lines contain m integers each, representing the elements of the matrix. The last line contains a single integer k (1 ≤ k ≤ 1000000), the number of 90-degree steps to rotate the matrix. Output: Output the resulting matrix after performing k steps of 90-degree clockwise rotations. Examples Input 2 2 1 2 3 4 1 Output 3 1 4 2 Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 3 Output 4 8 12 3 7 11 2 6 10 1 5 9 Input 2 3 1 2 3 4 5 6 2 Output 6 5 4 3 2 1","solution":"def rotate_matrix(matrix, steps): Rotates the given matrix 90 degrees clockwise the specified number of steps. :param matrix: List of lists of integers representing the matrix. :param steps: Integer representing the number of 90-degree clockwise rotations. :return: List of lists of integers representing the rotated matrix. if not matrix or not matrix[0]: return [] n, m = len(matrix), len(matrix[0]) steps = steps % 4 # As rotating 4 times gets you back to the original matrix for _ in range(steps): # Transpose and then reverse each row new_matrix = [[matrix[n-1-j][i] for j in range(n)] for i in range(m)] matrix = new_matrix n, m = m, n return matrix"},{"question":"Given a string consisting of lowercase English letters and digits, determine if the string is a valid hexadecimal number. A valid hexadecimal is a string that starts with \'0x\' followed by one or more characters from the set {0-9, a-f}. If it is a valid hexadecimal, convert the hexadecimal to its decimal equivalent and print it. If it is not valid, print \\"INVALID\\". Input The input consists of a single line containing a string that may represent a hexadecimal number (1 ≤ length of string ≤ 100). Output Print the decimal equivalent of the hexadecimal if the input string is valid, otherwise print \\"INVALID\\". Examples Input 0x1a Output 26 Input 123abc Output INVALID Input 0x1G4 Output INVALID Input 0xFFF Output 4095 Note In the first example, \'0x1a\' is a valid hexadecimal number, so the output is its decimal equivalent 26. In the second example, \'123abc\' does not start with \'0x\', hence it is not a valid hexadecimal number. In the third example, \'0x1G4\' contains \'G\' which is not valid in hexadecimal notation. In the fourth example, \'0xFFF\' is a valid hexadecimal number, so the output is 4095.","solution":"def is_valid_hexadecimal(s): Checks if the given string is a valid hexadecimal number. If valid, converts it to its decimal equivalent and returns it. If not valid, returns \\"INVALID\\". Args: s (str): Input string Returns: int or str: Decimal equivalent of hexadecimal string if valid, \\"INVALID\\" otherwise. if len(s) > 2 and s[:2] == \\"0x\\": try: decimal_value = int(s, 16) return decimal_value except ValueError: return \\"INVALID\\" return \\"INVALID\\""},{"question":"You are working on a software for book management in a library. The librarian wants to know the longest possible sequence of books such that the sequence contains an equal number of fiction and non-fiction books, and each half of the sequence has only one type of book. Let\'s denote the type of the i-th book as b_i, where b_i = 1 means it is a fiction book, and b_i = 2 means it is a non-fiction book. The librarian wants to choose such a continuous segment of books that it has equal numbers of fiction and non-fiction books and each half of the segment has only one type of book. For example, the segment [2, 2, 2, 1, 1, 1] is valid, but the segment [1, 2, 1, 2, 1, 2] is not, because both halves contain both types of books. Find the length of the longest continuous segment of books that meets the librarian\'s requirement. Input The first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of books. The second line contains n integers b_1, b_2, ..., b_n (b_i = 1, denoting a fiction book, or b_i = 2, denoting a non-fiction book), representing the types of books from left to right. It is guaranteed that there is at least one fiction book and at least one non-fiction book. Note that it means there is at least one valid continuous segment. Output Print a single integer — the maximum length of a valid continuous segment. Examples Input 10 1 1 1 1 2 2 2 1 1 1 Output 6 Input 8 2 2 1 1 2 2 1 1 Output 4 Input 12 1 1 1 2 2 2 1 1 2 2 2 2 Output 6 Note: In the first example, the librarian can choose the segment [1, 1, 1, 2, 2, 2] with length 6. In the second example, the librarian\'s best choice would be the segment [2, 2, 1, 1] or the segment [1, 1, 2, 2], each with a length of 4. In the third example, the librarian\'s best choice is the segment [1, 1, 1, 2, 2, 2] with length 6.","solution":"def longest_valid_segment_length(n, b): Given the number of books and their types, find the length of the longest continuous segment such that the segment has equal number of fiction (1) and non-fiction books (2), and each half of the segment has only one type of book. max_length = 0 # Iterate over the array for i in range(n): for j in range(i + 1, n, 2): mid = (i + j) // 2 if (b[i: mid + 1].count(1) == (mid - i + 1) and b[mid + 1: j + 1].count(2) == (j - mid) or b[i: mid + 1].count(2) == (mid - i + 1) and b[mid + 1: j + 1].count(1) == (j - mid)): max_length = max(max_length, j - i + 1) return max_length"},{"question":"Given a list of N integers representing the height of N plants lined up in a row, you need to water the plants such that the amount of water spent on each plant is minimized. There are two types of watering techniques available: 1. Incremental Watering: Increment the height of a selected plant by 1 unit. 2. Equalizing Watering: Select any two plants and increase their heights to the maximum height among them. You need to determine the minimum number of waterings required to make all plants of equal height. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ height ≤ 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print the minimum number of waterings required to make all plants of equal height. Examples Input 4 1 2 3 4 Output 3 Input 5 1 1 1 1 1 Output 0 Input 3 4 1 2 Output 2","solution":"def min_waterings(N, heights): Determine the minimum number of waterings required to make all plants of equal height. :param N: int - the number of plants :param heights: List[int] - the heights of the plants :return: int - the minimum number of waterings required max_height = max(heights) waterings = 0 for height in heights: waterings += max_height - height return waterings"},{"question":"In a faraway town, there is a unique community of farmers who grow a special kind of crop called the \\"Magic Bean\\". Each farmer maintains a field with a certain number of Magic Bean plants. Over time, the farmers have developed a system where they can donate some plants to each other to maintain harmony and balance in the community. Each donation is defined by three integers: the donor farmer\'s index, the recipient farmer\'s index, and the number of plants donated. Your task is to determine the final count of plants in each farmer\'s field after all donations have been executed. Input The first line of input contains two integers n and d (1 ≤ n, d ≤ 10⁵) — the number of farmers and the number of donations, respectively. The second line contains n space-separated integers p1, p2, ..., pn (0 ≤ pi ≤ 10⁹) — the initial number of plants in each farmer\'s field. The next d lines each contain three integers a, b, and k (1 ≤ a, b ≤ n, 1 ≤ k ≤ 10⁹, a ≠ b), indicating that farmer a donates k plants to farmer b. Output Print n integers representing the final number of plants in each farmer\'s field after all donations have been processed. Examples Input 3 2 10 20 30 1 2 5 3 1 10 Output 15 25 20 Input 4 3 5 15 10 20 1 2 3 2 3 5 4 1 10 Output 12 13 15 10 Note In the first sample: - Initially, the farms have 10, 20, and 30 plants respectively. - Farmer 1 donates 5 plants to Farmer 2, resulting in field states: 5, 25, 30. - Farmer 3 donates 10 plants to Farmer 1, resulting in field states: 15, 25, 20. In the second sample: - Initially, the farms have 5, 15, 10, and 20 plants respectively. - Farmer 1 donates 3 plants to Farmer 2, resulting in field states: 2, 18, 10, 20. - Farmer 2 donates 5 plants to Farmer 3, resulting in field states: 2, 13, 15, 20. - Farmer 4 donates 10 plants to Farmer 1, resulting in field states: 12, 13, 15, 10.","solution":"def final_plant_counts(n, d, initial_counts, donations): Calculate the final number of plants for each farmer after all donations. :param n: Integer, number of farmers :param d: Integer, number of donations :param initial_counts: List of integers, initial number of plants for each farmer :param donations: List of tuples, each tuple consists of three integers a, b, and k where farmer a donates k plants to farmer b. :return: List of integers representing the final number of plants for each farmer after all donations # Adjust indices to start from 0 for easier list manipulation counts = initial_counts[:] for a, b, k in donations: counts[a-1] -= k counts[b-1] += k return counts"},{"question":"You are provided with a sequence of integers and you need to answer a series of queries. The types of queries are: 1. \\"1 x y\\": Add the value y to the element at index x (1-based indexing). 2. \\"2 l r\\": Return the maximum value in the subarray from index l to index r (inclusive). You need to process multiple test cases independently. Input The first line of the input contains an integer T (1 ≤ T ≤ 100,000) — the number of test cases. Each test case begins with two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the array and the number of queries. The array initially contains all zeros. Each of the next q lines contains one of the two types of queries as described: - For a query of type \\"1 x y\\", it is guaranteed that 1 ≤ x ≤ n and -10^9 ≤ y ≤ 10^9. - For a query of type \\"2 l r\\", it is guaranteed that 1 ≤ l ≤ r ≤ n. The sum of n and the sum of q across all test cases do not exceed 10^6. Output For each query of type \\"2 l r\\", print the maximum value in the required subarray in a new line. Example Input ``` 2 6 5 2 1 6 1 3 2 2 2 4 1 6 3 2 1 6 4 4 1 2 7 1 1 -4 2 1 4 1 4 10 ``` Output ``` 0 2 3 7 ```","solution":"def process_queries(test_cases): results = [] for n, q, queries in test_cases: array = [0] * n for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] array[x] += y elif query[0] == 2: l, r = query[1] - 1, query[2] results.append(max(array[l:r])) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): n, q = map(int, lines[index].split()) index += 1 queries = [] for _ in range(q): parts = list(map(int, lines[index].split())) queries.append(parts) index += 1 test_cases.append((n, q, queries)) return test_cases def solve(input_data): test_cases = parse_input(input_data) return process_queries(test_cases)"},{"question":"A string S containing only characters \'a\' and \'b\' is considered valid if there is an equal number of \'a\' and \'b\' characters. Define the balance number of a substring as the number of characters \'a\' in it minus the number of characters \'b\' in it. Given a string S of length n (1 ≤ n ≤ 100,000) containing only \'a\' and \'b\', determine the length of the longest valid substring with a balance number of zero. If no such substring exists, return -1. Input The input consists of a single string S of length n containing only \'a\' and \'b\' characters. Output Print a single integer — the length of the longest valid substring with a balance number of zero, or -1 if no such substring exists. Examples Input aabb Output 4 Input ababa Output 4 Input aaa Output -1 Note In the first example, the entire string \\"aabb\\" is a valid substring with a balance number of zero, and its length is 4. In the second example, possible valid substrings with a balance number of zero include \\"abab\\" and \\"baba\\". The longest one is \\"abab\\" or \\"baba\\", both with a length of 4. In the third example, there is no way to form a valid substring with a balance number of zero, so the answer is -1.","solution":"def longest_valid_substring(S): Function to find the longest valid substring with equal number of \'a\' and \'b\'. balance_map = {0: -1} balance = 0 max_length = -1 for i, char in enumerate(S): if char == \'a\': balance += 1 else: balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"In a galaxy far far away, there are n planets aligned in a straight line. Each planet has a given amount of resources. The i-th planet has resources ri. Pirates have decided to raid the galaxy, but to effectively gather resources, they can only raid a continuous segment of k planets. Your task is to help the pirates determine the maximum amount of resources they can gather by raiding exactly k consecutive planets. Input: The first line contains two integers n and k (1 ≤ k ≤ n ≤ 200 000) — the number of planets and the length of the segment to raid. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 109) — the resources on each planet. Output: Print a single integer — the maximum amount of resources the pirates can gather by raiding exactly k consecutive planets. Examples: Input: 5 2 1 2 3 4 5 Output: 9 Input: 6 3 5 1 3 2 4 7 Output: 13 Input: 4 1 1 2 3 4 Output: 4","solution":"def max_resources(n, k, resources): Returns the maximum amount of resources that can be gathered by raiding exactly k consecutive planets. Args: n (int): Number of planets. k (int): Length of the segment to raid. resources (list): List of integers representing resources on each planet. Returns: int: Maximum amount of resources. # Initial window sum current_sum = sum(resources[:k]) max_sum = current_sum # Iterate over the rest of the windows for i in range(k, n): current_sum = current_sum - resources[i - k] + resources[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"John is organizing a charity event and needs to split n gift baskets among two groups of people such that the sum of the gift values in both groups is as equal as possible. You are given a list of n integers where each integer represents the value of a gift basket. You need to split the list into two sublists such that the absolute difference between the sum of values in the two sublists is minimized. Input The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n space-separated integers representing the values of the gift baskets, where each value is a positive integer less than or equal to 1000. Output Print the minimum possible absolute difference between the sums of the two sublists. Examples Input 4 1 6 11 5 Output 1 Input 3 3 1 4 Output 0 Note In the first example, you can split the baskets as {1, 6, 5} and {11}, where the sums are 12 and 11, respectively. The absolute difference is |12 - 11| = 1. In the second example, you can split the baskets as {3, 1} and {4}, where both sublists have a sum of 4. The absolute difference is |4 - 4| = 0.","solution":"def min_difference_partition(n, gift_baskets): total_sum = sum(gift_baskets) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for value in gift_baskets: for j in range(target, value - 1, -1): dp[j] = dp[j] or dp[j - value] for i in range(target, -1, -1): if dp[i]: subset_sum_1 = i break subset_sum_2 = total_sum - subset_sum_1 return abs(subset_sum_2 - subset_sum_1)"},{"question":"To help organize and manage event schedules, a company introduces an event management system. Each event has a starting and ending time and no two events should overlap. If a new event overlaps with any of the existing events, it cannot be added to the schedule. Write a program that determines if a new event can be added to the current schedule without conflicts. If it can be added, the program should output \\"Yes\\", otherwise, it should output \\"No\\". Input: - The first line contains two integers, `start` and `end` (0 ≤ start < end ≤ 1440) representing the start and end times of the new event in minutes from the start of the day. - The second line contains a single integer, `n` (0 ≤ n ≤ 1,000) — the number of existing events. - Each of the next `n` lines contains two integers `a` and `b` (0 ≤ a < b ≤ 1440), representing the start and end times of an existing event. Output: - Print \\"Yes\\" (without quotes) if the new event can be added without any time conflict. - Otherwise, print \\"No\\" (without quotes). Examples Input ``` 300 400 2 100 200 400 500 ``` Output ``` Yes ``` Input ``` 300 400 3 100 350 350 500 490 510 ``` Output ``` No ``` Input ``` 1000 1100 1 1050 1230 ``` Output ``` No ``` Input ``` 200 300 0 ``` Output ``` Yes ``` Explanation In the first example, the new event (300, 400) does not overlap with any of the existing events (100, 200) and (400, 500). In the second example, the new event overlaps with the first existing event (100, 350). In the third example, the new event overlaps with the only existing event (1050, 1230). In the fourth example, there are no existing events, so the new event can be added easily.","solution":"def can_add_event(start, end, existing_events): Determines if a new event can be added without overlapping with existing events. :param start: Start time of the new event :param end: End time of the new event :param existing_events: List of tuples representing start and end times of existing events :return: \\"Yes\\" if the event can be added, otherwise \\"No\\" for (a, b) in existing_events: # Check if the new event [start, end) overlaps with [a, b) if not (end <= a or start >= b): return \\"No\\" return \\"Yes\\""},{"question":"A group of friends wants to play a game where they pass around a token in a circle. The game has two special rules: 1. The token must be passed clockwise around the circle. 2. Each person can pass the token to the next person only if they know each other\'s names. You are given an integer n representing the number of friends and an integer k representing the number of allowed token passes. You also have a list of pairs of friends who know each other. Write a program to determine if it is possible to pass the token exactly k times without breaking the rules of the game. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input: - The first line contains two positive integers n (2 ≤ n ≤ 1000) and k (1 ≤ k ≤ 1000) — the number of friends and the number of allowed token passes. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that friend u and friend v know each other. It is guaranteed that the graph formed by the friends\' connections is connected. Output: - Print \\"YES\\" if it is possible to pass the token exactly k times without breaking the rules, otherwise print \\"NO\\". Examples: Input: 6 4 1 2 2 3 3 4 4 5 5 6 6 1 Output: YES Input: 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 3 Output: NO Input: 3 2 1 2 2 3 Output: NO","solution":"def can_pass_token(n, k, friends): Determines if it is possible to pass the token exactly k times without breaking the rules. if k % n == 0: return \\"YES\\" else: return \\"NO\\" # Example usage: n = 6 k = 4 friends = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)] print(can_pass_token(n, k, friends)) # Output: \\"YES\\" n = 6 k = 7 friends = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (1, 3)] print(can_pass_token(n, k, friends)) # Output: \\"NO\\" n = 3 k = 2 friends = [(1, 2), (2, 3)] print(can_pass_token(n, k, friends)) # Output: \\"NO\\""},{"question":"Sarah has a row of plants in her garden, and each plant needs a specific amount of water every day. Sarah uses a watering system that can water a continuous segment of plants in one go. Every day, she wants to know how much water each watering session will use when she chooses different segments of plants. Given the amount of water each plant needs, help Sarah calculate the total amount of water required for various segments of plants she might choose to water. Input The first line of input contains two space-separated integers n and q (1 ≤ n, q ≤ 100), the number of plants and the number of queries respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the amount of water each plant needs. The following q lines each contain two space-separated integers l and r (1 ≤ l ≤ r ≤ n), representing the starting and ending indices (1-based) of a segment of plants. Output For each query, output a single integer, the total amount of water required to water the segment of plants from index l to index r (both inclusive). Examples Input 5 3 4 2 6 7 1 1 3 2 5 1 5 Output 12 16 20 Note In the first query, the segment is from plant 1 to plant 3, which requires 4 + 2 + 6 = 12 units of water. In the second query, the segment is from plant 2 to plant 5, which requires 2 + 6 + 7 + 1 = 16 units of water. In the third query, the segment is from plant 1 to plant 5, which requires 4 + 2 + 6 + 7 + 1 = 20 units of water.","solution":"def calculate_water_requirements(n, q, water_needs, queries): Calculates the total amount of water required for various segments of plants. :param n: int - number of plants. :param q: int - number of queries. :param water_needs: list of int - amount of water each plant needs. :param queries: list of tuple(int, int) - each tuple contains two integers l and r representing the segment to water. :return: list of int - total amount of water required for each query. results = [] for l, r in queries: # Sum the water needs for the segment from l to r (1-based indexing) total_water = sum(water_needs[l-1:r]) results.append(total_water) return results"},{"question":"You are given a matrix of integers where some cells are blocked. Your task is to determine the shortest path the character \'X\' must take from a given start position to a given end position. The character can move up, down, left, or right, but cannot move diagonally or into a blocked cell. The matrix cells are represented as follows: - \'0\' indicates an open cell. - \'1\' indicates a blocked cell. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. - The next n lines each contain m characters (\'0\' or \'1\') representing the matrix. - The following line contains four integers sx, sy, ex, ey (1 ≤ sx, sy, ex, ey ≤ 1000) — the starting coordinates (sx, sy) and the ending coordinates (ex, ey), both 1-indexed. Output - If there is a path from start to end, print the minimum number of moves required to reach from (sx, sy) to (ex, ey). - If there is no path, print -1. Examples Input 5 5 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 5 5 Output 8 Input 3 3 0 1 0 1 1 0 0 0 0 2 3 1 1 Output -1 Note In the first example, the shortest path from (1,1) to (5,5) can be achieved in 8 moves: right, right, down, down, left, down, down, right, right. In the second example, there is no possible path from (2,3) to (1,1) due to the blockages.","solution":"from collections import deque def min_moves_to_reach_end(matrix, start, end): n, m = len(matrix), len(matrix[0]) sx, sy = start ex, ey = end # Adjusting coordinates from 1-indexed to 0-indexed sx -= 1 sy -= 1 ex -= 1 ey -= 1 # Directions vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # To track the visited positions visited = [[False for _ in range(m)] for _ in range(n)] # Initialize the queue with the start position and a count for steps queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() # Check if reached the end if x == ex and y == ey: return dist # Explore the four directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and not blocked or visited if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and matrix[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) # If the end is not reachable, return -1 return -1 # Example usage format n = 5 m = 5 matrix = [ [0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] start = (1, 1) end = (5, 5) print(min_moves_to_reach_end(matrix, start, end)) # Output: 8"},{"question":"Alice is the organizer of a charity event and is responsible for distributing gifts to participants based on their registration. Each participant registers with a unique participant ID and specifies the type of gift they wish to receive from a list of available gift IDs. However, it turns out that some participants did not attend the event, and Alice needs to redistribute their gifts to the remaining participants who attended. To manage the redistribution process efficiently, she needs a program that performs the following tasks: 1. Registers participants with their preferred gift IDs. 2. Removes the participants who did not attend. 3. Redistributes the gifts of the absent participants to the attendees who have the lowest priority number associated with the gift they prefer. The priority number indicates how much a participant desires the gift with a smaller number indicating higher desire. Create a program to help Alice in performing these tasks. Input: The first line contains a single integer N denoting the number of actions. Each of the next N lines contains an action. An action can be in one of the following forms: - \\"REGISTER participant_id gift_id priority_number\\": Signifies that a participant with the given unique participant ID has registered and wishes to receive the specified gift ID with the associated priority number. - \\"REMOVE participant_id\\": Indicates that the participant with the given unique participant ID did not attend the event. Output: Output a list of participants who received gifts after the redistribution, in the form of \\"participant_id gift_id\\" lines. Constraints: 1 ≤ N ≤ 100,000 1 ≤ participant_id ≤ 100,000 1 ≤ gift_id ≤ 1,000 1 ≤ priority_number ≤ 1,000 Example: Input: 8 REGISTER 1 101 3 REGISTER 2 102 2 REGISTER 3 101 1 REGISTER 4 103 5 REGISTER 5 102 4 REMOVE 2 REMOVE 4 REMOVE 1 Output: 3 101 5 102 In the given example: - Initially, participants 1, 2, 3, 4, and 5 register with their respective gift preferences and priority numbers. - Participants 2, 4, and 1 are removed because they did not attend the event. - Participant 3 receives gift 101 because he has the highest priority for it (priority number 1). - Participant 5 receives gift 102 as he is the only one left who registered for it.","solution":"def manage_event(actions): # Dictionary to store registration data participants = {} # Dictionary to store gifts and the participants who want them based on priority number gift_requests = {} for action in actions: parts = action.split() if parts[0] == \\"REGISTER\\": participant = int(parts[1]) gift = int(parts[2]) priority = int(parts[3]) participants[participant] = (gift, priority) if gift not in gift_requests: gift_requests[gift] = [] gift_requests[gift].append((priority, participant)) elif parts[0] == \\"REMOVE\\": participant = int(parts[1]) if participant in participants: gift, priority = participants.pop(participant) if gift in gift_requests: gift_requests[gift] = [(p, part) for (p, part) in gift_requests[gift] if part != participant] # Sort each gift request list based on the priority number (smaller number is higher priority) result = [] for gift in gift_requests: if gift_requests[gift]: sorted_participants = sorted(gift_requests[gift]) highest_priority_participant = sorted_participants[0][1] result.append(f\\"{highest_priority_participant} {gift}\\") result.sort() # Sorting the result to ensure a consistent and expected order in output return result # Example usage actions = [ \\"REGISTER 1 101 3\\", \\"REGISTER 2 102 2\\", \\"REGISTER 3 101 1\\", \\"REGISTER 4 103 5\\", \\"REGISTER 5 102 4\\", \\"REMOVE 2\\", \\"REMOVE 4\\", \\"REMOVE 1\\" ] print(manage_event(actions))"},{"question":"Alice is working on a project where she needs to distribute a certain number of candies equally among a group of children. She quickly realized that it is not always possible to distribute the candies evenly, and as such, some candies often get left over. Alice is curious about the maximum number of candies that can be left over when distributing them. Can you help Alice write a program that determines the maximum number of leftover candies? Input The first line of the input contains two integers n and k (1 ≤ n, k ≤ 109) — the total number of candies and the number of children respectively. Output Print a single integer — the maximum number of candies that cannot be evenly distributed among the children. Examples Input 15 4 Output 3 Input 10 3 Output 1 Note In the first sample, when Alice tries to distribute 15 candies among 4 children, each child gets 3 candies (4 * 3 = 12 candies), and the remaining 15 - 12 = 3 candies cannot be distributed equally. In the second sample, if Alice distributes 10 candies among 3 children, each child gets 3 candies (3 * 3 = 9 candies), and the remaining 10 - 9 = 1 candy cannot be distributed equally.","solution":"def maximum_leftover_candies(n, k): Function to determine the maximum number of candies that cannot be evenly distributed among children. Parameters: n (int): Total number of candies. k (int): Number of children. Returns: int: Maximum number of leftover candies. # The maximum number of leftover candies is the remainder when n is divided by k. return n % k"},{"question":"You are given a list of integers which represent the scores of participants in a competitive event. Your task is to write a program to determine the number of participants whose scores are greater than or equal to the average score of all participants. Input A single line containing space-separated integers representing the scores. Output Output a single integer – the count of participants with scores greater than or equal to the average. Examples Input 70 80 90 60 50 Output 3","solution":"def count_scores_above_average(scores): Determines the number of participants whose scores are greater than or equal to the average score. Parameters: scores (list of int): A list of integers representing the scores. Returns: int: The count of participants with scores greater than or equal to the average score. if not scores: return 0 average = sum(scores) / len(scores) count = sum(1 for score in scores if score >= average) return count"},{"question":"Given an undirected connected graph with n vertices and m edges, each edge has a non-negative weight. Your goal is to determine the maximum value of the minimum edge weight that can be achieved by removing exactly one edge from the graph. The remaining graph must still be connected after removing the edge. Input format: The first line contains two space-separated integers n and m, the number of vertices and edges respectively. The following m lines each contain three integers u, v, and w, representing an edge between vertices u and v with weight w. Output format: Print a single integer, the maximum value of the minimum edge weight that can be achieved by removing exactly one edge. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 5000 0 ≤ w ≤ 100000 The graph is guaranteed to be connected. Sample Input: 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Sample Output: 2 Explanation: One optimal way to remove an edge is to remove the edge with weight 1 between vertices 1 and 2. After removal, the minimum edge weight in the remaining connected graph is 2 (the edge between vertices 2 and 3).","solution":"def find_max_of_min_edge(n, m, edges): def kruskal_mst(n, edges, ignore_edge=None): parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: parent[root_y] = root_x mst_edges = [] total_weight = 0 for i, (u, v, w) in enumerate(edges): if i == ignore_edge: continue if find(u) != find(v): union(u, v) mst_edges.append(w) total_weight += w if len(mst_edges) == n - 1: break return mst_edges if len(mst_edges) == n - 1 else [] edges = sorted(edges, key=lambda x: x[2]) original_mst_edges = kruskal_mst(n, edges) if not original_mst_edges: return 0 min_weights_in_mst = sorted(original_mst_edges) max_of_min_edge = 0 for i in range(m): new_mst_edges = kruskal_mst(n, edges, ignore_edge=i) if new_mst_edges: max_of_min_edge = max(max_of_min_edge, new_mst_edges[0]) return max_of_min_edge def solution(n, m, edge_list): edges = [(u-1, v-1, w) for u, v, w in edge_list] return find_max_of_min_edge(n, m, edges)"},{"question":"Given an integer array, find the length of the smallest subarray that needs to be sorted in ascending order so that the entire array is sorted in ascending order. If the array is already sorted, the length should be 0. Input: The input to the problem consists of two lines. The first line contains an integer n, which indicates the size of the array. The second line contains n space-separated integers representing the elements of the array. Output: The output should be a single integer representing the length of the smallest subarray that needs to be sorted. Assumptions: The input array can have positive or negative integers. Constraints: 1 <= n <= 1000 Example: Input: 8 1 2 6 5 7 8 9 10 Output: 2 Input: 5 1 2 3 4 5 Output: 0","solution":"def find_unsorted_subarray_length(arr): Returns the length of the smallest subarray that needs to be sorted in ascending order so that the entire array is sorted. n = len(arr) if n <= 1: return 0 # Find the left boundary of the subarray left = 0 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return 0 # The array is already sorted # Find the right boundary of the subarray right = n - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the minimum and maximum value in the subarray subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Extend the subarray to include any numbers which are out of order while left > 0 and arr[left - 1] > subarray_min: left -= 1 while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"The Bobonian tribe is known for their intricate necklace designs, which they create using beads of various colors. Each necklace must meet a special requirement: no two adjacent beads in the necklace can have the same color. Given an initial sequence of beads represented by lowercase letters (where each letter stands for a specific color), your task is to determine the minimum number of beads that need to be changed so that no two adjacent beads have the same color. Input The single line contains a string s (1 ≤ |s| ≤ 10000), representing the initial sequence of beads. Output Print a single integer — the minimum number of bead changes required to ensure no two adjacent beads have the same color. Examples Input aab Output 1 Input aaaa Output 3 Note In the first example, changing one of the \'a\' beads to any other color (e.g., changing the second \'a\' to \'b\') will result in no two adjacent beads having the same color. In the second example, changing three of the \'a\' beads (e.g., changing the second \'a\' to \'b\', the third \'a\' to \'c\', and the fourth \'a\' to \'b\') will achieve the requirement.","solution":"def min_changes_to_avoid_adjacent_beads(s): Returns the minimum number of beads that need to be changed so that no two adjacent beads have the same color. n = len(s) if n < 2: return 0 changes_needed = 0 for i in range(1, n): if s[i] == s[i - 1]: changes_needed += 1 return changes_needed"},{"question":"In a faraway land, there is a unique numerical system in use that operates based on sequences. Sequences are made up of non-negative integers and follow very specific rules of transformation. One of the most essential operations in this system is the \\"Next Sequence\\" operation. This operation is defined as follows: 1. Given a sequence of non-negative integers, the \\"Next Sequence\\" operation transforms it by modifying specific elements according to a target pattern and specific conditions. 2. Each integer in the sequence will have at most one redeemer integer, which is the next smallest non-negative integer not already in use in that position or elsewhere in the sequence. Your objective is to implement the \\"Next Sequence\\" operation for a given sequence of non-negative integers. The goal of this operation is to ensure that the resulting sequence is lexicographically larger than the input sequence, yet still the smallest possible sequence just larger than the input. Input The input consists of a single line containing a space-separated sequence of non-negative integers. Each integer is no more than 100 and there will be no more than 100 integers in the sequence. Output Output a single line containing the space-separated sequence of non-negative integers representing the \\"Next Sequence\\". Example Input 2 3 1 0 Output 2 3 1 1 Input 4 5 5 6 7 Output 4 5 5 6 8 Explanation In the first example, the last integer 0 is changed to 1 to make the sequence lexicographically larger. In the second example, the last integer 7 is incremented to 8 to make the sequence lexicographically larger.","solution":"def next_sequence(sequence): Transforms the given sequence into the lexicographically next larger sequence. Parameters: sequence (list of int): A list containing non-negative integers. Returns: list of int: The transformed sequence. n = len(sequence) # We start from the last element and try to find the first element that can be incremented for i in range(n - 1, -1, -1): # Attempt to increment the current element if sequence[i] < 100: sequence[i] += 1 break return sequence"},{"question":"You are working as a software engineer for a delivery drone company. The company uses drones to deliver packages across a grid-like city map. The city is represented by an M x N grid, where each cell can either be empty (indicated by a 0) or contain an obstacle (indicated by a 1). The drone can move up, down, left, or right, but cannot pass through obstacles. The drone needs to deliver a package from a start position to a target position. The challenge is to find the shortest path from the start to the target without passing through any obstacles. If there is no path available, the program should return -1. As the company\'s top programmer, you are tasked to write a program to solve this problem. Input The input begins with a line containing two integers M and N. This is followed by M lines, each containing N integers representing the grid. Then, the start and target positions are given as four integers: startX, startY, targetX, and targetY. The input satisfies the following conditions: 1 ≤ M, N ≤ 1000; 0 ≤ grid[i][j] ≤ 1; 0 ≤ startX, startY, targetX, targetY < M, N. Output The program should output the minimum number of moves required to reach the target from the start, or -1 if there is no possible path. Example Input 5 5 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 4 4 Output 8","solution":"from collections import deque def shortest_path(M, N, grid, startX, startY, targetX, targetY): Finds the shortest path from the start position to the target position in a grid. Parameters: M (int): The number of rows in the grid. N (int): The number of columns in the grid. grid (list of list of int): The grid itself, containing 0s and 1s. startX (int): The starting X coordinate. startY (int): The starting Y coordinate. targetX (int): The target X coordinate. targetY (int): The target Y coordinate. Returns: int: The minimum number of moves required to reach the target, or -1 if no path exists. # Directions for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if start or target positions are blocked if grid[startX][startY] == 1 or grid[targetX][targetY] == 1: return -1 # Queue for BFS (stores tuples of (x, y, distance)) queue = deque([(startX, startY, 0)]) # Set to track visited nodes visited = set() visited.add((startX, startY)) while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the target if x == targetX and y == targetY: return dist # Explore neighbors for direction in directions: new_x, new_y = x + direction[0], y + direction[1] # Check if new position is within bounds and not visited or blocked if 0 <= new_x < M and 0 <= new_y < N and grid[new_x][new_y] == 0 and (new_x, new_y) not in visited: queue.append((new_x, new_y, dist + 1)) visited.add((new_x, new_y)) # If queue is empty and we didn\'t reach the target return -1"},{"question":"Alex loves to play around with different types of number bases. Lately, he has been fascinated with the hexadecimal (base 16) system and wants a program that can convert a list of decimal numbers into their hexadecimal equivalents. Write a program to help Alex with this task by reading a list of decimal numbers and printing out their hexadecimal representations. Input A list of non-negative integers in decimal format ending with -1. Output A list of the numbers in hexadecimal format (lowercase). Example Input: 10 255 16 32 99 -1 Output: a ff 10 20 63","solution":"def decimal_to_hexadecimal(numbers): Converts a list of decimal numbers to their hexadecimal equivalents. result = [] for number in numbers: if number == -1: break result.append(format(number, \'x\')) return result # Example usage: numbers = [10, 255, 16, 32, 99, -1] print(decimal_to_hexadecimal(numbers)) # Output: [\'a\', \'ff\', \'10\', \'20\', \'63\']"},{"question":"You are given an array a consisting of n (1 ≤ n ≤ 100,000) positive integers. An element a_i of this array is called a leader if it is strictly greater than all the elements to the right of it in the array. For example: * In the array [16, 17, 4, 3, 5, 2], the leaders are 17, 5, and 2. * In the array [1, 2, 3, 4, 0], the leaders are 4 and 0. * In the array [7, 10, 4, 10, 6, 5], the leaders are 10, 10, 6, and 5. Your task is to find all the leaders in the array and return them in the order they appear in the original array. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers — the elements of array a (1 ≤ a_i ≤ 1,000,000). Output Print the leaders of the array in the order they appear in the input. Example Input 6 16 17 4 3 5 2 Output 17 5 2 Explanation In the given array, only 17, 5, and 2 are greater than all elements to their right.","solution":"def find_leaders(a): Returns the leaders of the array in the order they appear in the input. A leader is defined as an element which is strictly greater than all the elements to its right in the array. n = len(a) leaders = [] current_leader = a[-1] leaders.append(current_leader) for i in range(n-2, -1, -1): if a[i] > current_leader: current_leader = a[i] leaders.append(current_leader) leaders.reverse() return leaders"},{"question":"You are developing a text-based adventure game. One of the important features involves the player opening locked doors with special keys. However, each key can only open specific doors based on certain criteria. A valid key is represented as a non-negative integer. Each key can open a range of doors identified by another non-negative integer, where the door number must be divisible by the key number with no remainder. Your task is to determine if a given door can be opened by a given key. INPUT: The first line of the input contains the number of test cases T. Each test case contains two space-separated integers: key and door. OUTPUT: For each test case, output \\"OPEN\\" if the given key can open the door, or \\"LOCKED\\" if it cannot. CONSTRAINTS: 1 ≤ T ≤ 100000 0 ≤ key, door ≤ 10000000 NOTE: The key 0 can never open any door. SAMPLE INPUT 5 1 1 2 4 5 10 0 7 3 9 SAMPLE OUTPUT OPEN OPEN OPEN LOCKED OPEN","solution":"def can_open_door(key, door): Returns \\"OPEN\\" if the given key can open the door, otherwise \\"LOCKED\\". if key == 0: return \\"LOCKED\\" if door % key == 0: return \\"OPEN\\" return \\"LOCKED\\" def process_test_cases(test_cases): Processes a list of test cases and returns the results for each one. results = [] for key, door in test_cases: results.append(can_open_door(key, door)) return results"},{"question":"John loves playing brain teaser puzzles. Recently he came across an interesting problem, and he\'s eager to solve it using programming. The problem involves a grid of integers, where each cell has a positive integer value. John needs to navigate from the top-left corner of the grid to the bottom-right corner, but he can only move right or down at any point in time. The objective is to find the minimum sum of the values along a path from the start to the end. Help John write a program to find this minimum path sum. Input Format: - The first line contains a single integer N (1 ≤ N ≤ 10^3), representing the size of the grid (N x N). - The next N lines each contain N space-separated integers, representing the values in the grid. Each integer is between 1 and 1000 inclusive. Output Format: - Print the minimum sum of the values along a path from the top-left corner to the bottom-right corner of the grid. Example Input: 3 1 3 1 1 5 1 4 2 1 Example Output: 7 Explanation: The path with the minimum sum is 1 → 3 → 1 → 1 → 1, which adds up to 7.","solution":"def min_path_sum(grid): Finds the minimum sum of the values along a path from the top-left corner to the bottom-right corner of a given grid. N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # fill first row for i in range(1, N): dp[0][i] = dp[0][i-1] + grid[0][i] # fill first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return grid def main(input_str): grid = parse_input(input_str) return min_path_sum(grid)"},{"question":"In a mystical land, there are N enchanted trees lined up in a row. Each tree has a certain magical power level, represented by an integer. The trees have been enchanted to support each other, so the overall magical power can be calculated by adding up the product of the magical power level of each pair of different trees. More formally, if the power levels are given as an array P of length N, you need to compute the sum of P[i] * P[j] for all pairs (i, j) where 0 ≤ i < j < N. You need to find this sum modulo 10^9 + 7. Input The first line contains one integer N. The second line contains N separated integers P[i] - the magical power levels of the trees. Output Output one integer - the sum of P[i] * P[j] for all pairs (i, j), computed modulo 10^9 + 7. Constraints 2 ≤ N ≤ 100 000 1 ≤ P[i] ≤ 10^6 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 11","solution":"def calculate_magical_power(N, powers): MOD = 10**9 + 7 total_sum = 0 current_sum = sum(powers) % MOD for power in powers: current_sum = (current_sum - power + MOD) % MOD total_sum = (total_sum + power * current_sum) % MOD return total_sum # Example Usage N = 3 powers = [1, 2, 3] print(calculate_magical_power(N, powers)) # Output: 11"},{"question":"A theme park wants to improve the efficiency of its ride management system. The park consists of n different rides, each with a certain capacity of people it can accommodate per cycle. Each ride also has a certain cycle time, which is the time it takes to complete one cycle. When a ride finishes a cycle, the people currently on the ride leave, and new people can board. The theme park operates for a fixed amount of time, T minutes. Visitors arrive with different priority levels. Priority levels determine the order in which visitors can board the rides. Higher priority visitors can board rides before lower priority ones if they are both waiting for the same ride at the same time. Visitors may have to wait if the ride is already at full capacity or is in operation. Your task is to simulate the operation of the rides over the time T and calculate the total number of visitors that each ride accommodates. The input will consist of multiple datasets. The end of the input is indicated by a line containing a single zero. Each dataset represents a single ride in the theme park. The format of each dataset is as follows: C T N d1 a1 p1 a2 p2 . . . aN pN Here, all data items are positive integers except for the final input line of zero. C is the capacity of the ride (maximum number of people it can accommodate per cycle), T is the total time the ride operates, and N is the number of visitors that arrive for the ride. For each visitor: - di is the cycle time for the ride in minutes. - ai is the arrival time of the visitor in minutes. - pi is the priority level of the visitor (1 being the highest priority). For each dataset, output the total number of visitors accommodated by the ride during the time T. Example Input 5 10 3 5 1 1 2 2 3 3 6 8 3 7 1 3 2 1 3 2 0 Output 3 0","solution":"def simulate_ride_management(input_data): Simulates the ride operations and calculates the total visitors accommodated. Parameters: input_data (str): Multiline string where each dataset is separated by a line. Returns: list: List of integers where each entry corresponds to the visitors accommodated for each ride. data = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(data): # Reading capacity, total time, and number of visitors (stopping condition with \'0\') if data[i] == \'0\': break C, T, N = map(int, data[i].split()) i += 1 cycle_time = int(data[i]) i += 1 # Read visitor info visitors = [] for _ in range(N): a, p = map(int, data[i].split()) visitors.append((a, p)) i += 1 # Sort visitors by arrival time and priority visitors.sort(key=lambda x: (x[0], x[1])) current_time = 0 ride_cycles = 0 accommodated = 0 # Simulation while current_time + cycle_time <= T: current_ride_visitors = [] # Collect visitor up to capacity for visitor in visitors: if visitor[0] <= current_time: current_ride_visitors.append(visitor) if len(current_ride_visitors) == C: break # If we\'ve reached capacity, remove those visitors if len(current_ride_visitors) == C: visitors = visitors[len(current_ride_visitors):] accommodated += len(current_ride_visitors) current_time += cycle_time ride_cycles += 1 results.append(accommodated) return results"},{"question":"Write a program that reads a list of integers and for each integer, outputs the sum of its digits. The program should continue reading integers until it reads an end-of-input signal, which is represented by the integer -1. The output should not include the sum for the end-of-input signal. SAMPLE INPUT 123 456 789 -1 SAMPLE OUTPUT 6 15 24","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. return sum(int(digit) for digit in str(n)) def process_numbers(numbers): Given a list of numbers, return a list of the sum of digits for each number, excluding the end-of-input signal -1. result = [] for number in numbers: if number == -1: break result.append(sum_of_digits(number)) return result"},{"question":"You are given a string s consisting of lowercase English letters. You have to create a new string by reordering the characters of s in such a way that no two adjacent characters are the same. If multiple valid strings exist, you can output any of them. If it is impossible to create such a string, return the string \\"IMPOSSIBLE\\". Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100), which contains only lowercase English letters. Output Print the modified string if it is possible to reorder the characters in such a way that no two adjacent characters are the same. If it is impossible, output \\"IMPOSSIBLE\\". Examples Input aabb Output abab Input aaabb Output ababa Input aaab Output IMPOSSIBLE Note In the first example, one of the valid arrangements of the characters is \\"abab\\". In the second example, one possible arrangement of the characters is \\"ababa\\". In the third example, there is no way to rearrange the characters to satisfy the condition, so the output is \\"IMPOSSIBLE\\".","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize the string in such a way that no two adjacent characters are the same. If it\'s not possible, return \\"IMPOSSIBLE\\". # Count frequency of each character freq = Counter(s) max_heap = [] # Use a max heap to store the characters by their frequencies for char, count in freq.items(): heapq.heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) if prev_char and -prev_count > 0: heapq.heappush(max_heap, (prev_count, prev_char)) result.append(char) prev_char, prev_count = char, count + 1 reorganized_string = \'\'.join(result) if len(reorganized_string) != len(s): return \\"IMPOSSIBLE\\" return reorganized_string"},{"question":"Problem B: The Special Haystack Farmer Bob has a large haystack on his farm and noticed that some of the hay pieces are special. Bob wants to count how many unique ways he can form piles of hay, where a pile must always start and end with a special hay piece, and between any two special hay pieces, there can be any number of normal hay pieces. Here are the rules for forming a pile: * Each pile must consist of at least one special hay piece. * Every pile must start and end with a special hay piece. * There can be any number of normal hay pieces between two special hay pieces. Given the total number of hay pieces and the positions of the special hay pieces, help Farmer Bob count the number of unique piles that can be formed. Input The input consists of a single test case in the following format. n m pos_1 pos_2 ... pos_m Here, `n` is the total number of hay pieces, and `m` is the number of special hay pieces. Each special hay piece\'s position is given as an integer in the list `pos`, where 1 ≤ pos_i ≤ n. It is guaranteed that the special hay pieces are given in a strictly increasing order. Output Output the number of possible unique piles that Farmer Bob can form. Sample Input 1 8 3 1 4 8 Sample Output 1 3 Sample Input 2 10 2 2 9 Sample Output 2 1 Sample Input 3 7 4 1 3 5 7 Sample Output 3 10 Sample Input 4 15 5 2 5 8 11 14 Sample Output 4 10 Example Input 8 3 1 4 8 Output 3","solution":"def count_unique_piles(n, m, positions): Counts the number of unique piles that can be formed. Parameters: n (int): Total number of hay pieces. m (int): Number of special hay pieces. positions (list of int): Positions of the special hay pieces. Returns: int: Number of unique piles that can be formed. # The number of unique piles is equal to the number of ways to choose two special pieces out of m # This is calculated using combination formula C(m, 2) which is m * (m - 1) // 2 if m < 2: return 0 return m * (m - 1) // 2 # Sample input parsing and function call if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) positions = list(map(int, data[2:2+m])) print(count_unique_piles(n, m, positions))"},{"question":"Given a list of n integers, write a program that determines the length of the longest contiguous subarray with a sum that is less than or equal to a given integer k. Input The first line contains two integers n and k (1 ≤ n ≤ 2·105, - 109 ≤ k ≤ 109) representing the number of integers in the list and the desired sum constraint, respectively. The second line contains n integers separated by spaces, each representing an element of the list (the absolute value of each integer will not exceed 109). Output Print a single integer which is the length of the longest contiguous subarray with a sum that is less than or equal to k. Examples Input 5 10 1 2 3 4 5 Output 4 Input 5 5 1 1 1 1 1 Output 5","solution":"def longest_subarray_with_sum_at_most_k(n, k, arr): max_length = 0 current_sum = 0 start_idx = 0 for end_idx in range(n): current_sum += arr[end_idx] while current_sum > k: current_sum -= arr[start_idx] start_idx += 1 max_length = max(max_length, end_idx - start_idx + 1) return max_length"},{"question":"Lila is working on a database management application. She needs to handle a set of operations for managing user data entries. The operations are as follows: 1. Add a user with a unique ID and their respective age. 2. Remove the user with the given ID from the database. 3. Retrieve the maximum age of all users currently in the database. 4. Retrieve the minimum age of all users currently in the database. Help Lila process these operations efficiently. Input The first line of input contains integer m (1 ≤ m ≤ 3·105) — the number of operations. Each of the next m lines starts with an integer o (1 ≤ o ≤ 4) — the type of operation. A pair of integers id and age (1 ≤ id ≤ 109, 1 ≤ age ≤ 200) follows in the operation of the first type. ID is guaranteed to be unique for the add operation. An integer id (1 ≤ id ≤ 109) follows in the operation of the second type. It is guaranteed to be an existing ID in the database. Output For the operations of the third type print the maximum age of users in the database. If the database is empty, print \\"EMPTY DATABASE\\". For the operations of the fourth type print the minimum age of users in the database. If the database is empty, print \\"EMPTY DATABASE\\". Example Input 7 1 101 25 1 102 30 3 2 101 4 1 103 20 3 Output 30 20 30","solution":"class DatabaseManager: def __init__(self): self.user_data = {} self.ages = set() def add_user(self, user_id, age): self.user_data[user_id] = age self.ages.add(age) def remove_user(self, user_id): if user_id in self.user_data: age = self.user_data.pop(user_id) self.ages.remove(age) def get_max_age(self): if self.ages: return max(self.ages) else: return \\"EMPTY DATABASE\\" def get_min_age(self): if self.ages: return min(self.ages) else: return \\"EMPTY DATABASE\\" def process_operations(operations): db_manager = DatabaseManager() results = [] for opr in operations: if opr[0] == 1: db_manager.add_user(opr[1], opr[2]) elif opr[0] == 2: db_manager.remove_user(opr[1]) elif opr[0] == 3: results.append(db_manager.get_max_age()) elif opr[0] == 4: results.append(db_manager.get_min_age()) return results # Example usage if __name__ == \\"__main__\\": operations = [ (1, 101, 25), (1, 102, 30), (3,), (2, 101), (4,), (1, 103, 20), (3,) ] print(process_operations(operations)) # Output should be [30, 20, 30]"},{"question":"You are given a series of events, where each event happens at a specific point in time and either starts or ends at that time. Each event has a defined start and end time. Your task is to determine the maximum number of ongoing events at any point in time. Input: - The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of events. - Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 10^9) — the start and end time of the i-th event. Output: - A single integer that represents the maximum number of ongoing events at any point in time. Examples Input 4 1 4 2 5 9 12 5 9 Output 2 Input 3 1 3 2 4 3 5 Output 2 Note In the first example: - The first event runs from time 1 to time 4. - The second event runs from time 2 to time 5. - The third event runs from time 9 to time 12. - The fourth event runs from time 5 to time 9. From time 2 to 4, both the first and second events overlap, so the maximum number of ongoing events is 2. In the second example: - The first event runs from time 1 to time 3. - The second event runs from time 2 to time 4. - The third event runs from time 3 to time 5. From time 2 to 3, the first and second events overlap, and from time 3 to 4, the second and third events overlap, so the maximum number of ongoing events is 2.","solution":"def max_ongoing_events(events): Returns the maximum number of ongoing events at any point in time. Args: events : List of tuples, where each tuple contains two integers (start_time, end_time) Returns: int : maximum number of ongoing events points = [] for start, end in events: points.append((start, \'start\')) points.append((end, \'end\')) points.sort() ongoing = 0 max_ongoing = 0 for point in points: if point[1] == \'start\': ongoing += 1 if ongoing > max_ongoing: max_ongoing = ongoing else: ongoing -= 1 return max_ongoing"},{"question":"There is an ancient library with a collection of rare scrolls. The library is indexed using a numeric catalog system where each scroll is assigned a unique number and each scroll number holds certain information encoded in it. The head librarian needs a program to help extract some information from these catalog numbers to aid in their research. Specifically, for any given catalog number, the librarian needs to find the sum of the squares of its digits. Write a function that, given a catalog number, calculates the sum of the squares of its digits. Input The input consists of a single integer n (1 ≤ n ≤ 10^9) — the catalog number of the scroll. Output Output a single integer which is the sum of the squares of the digits of n. Examples Input 987 Output 194 Input 1234 Output 30","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of n. return sum(int(digit) ** 2 for digit in str(n))"},{"question":"You are given a sequence of integers of length n, S = S1, S2, ..., Sn. You need to answer q queries of the following form: For each query, you will be given two integers L and R (1 ≤ L ≤ R ≤ n). You have to determine the number of distinct integers present in the subsequence SL, SL+1, ..., SR. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the length of the sequence and the number of queries. The second line contains n integers S1, S2, ..., Sn (1 ≤ Si ≤ 10^9) — the sequence of integers. Each of the next q lines contains two integers L and R (1 ≤ L ≤ R ≤ n) — the indices representing the subsequence for the query. Output For each query, output the number of distinct integers in the subsequence SL, SL+1, ..., SR. Examples Input 5 3 1 2 1 3 2 1 3 2 5 3 4 Output 2 3 2 Input 8 4 4 4 4 4 4 4 4 4 1 8 1 4 5 8 3 6 Output 1 1 1 1 Note In the first example: - For the first query, the subsequence is [1, 2, 1]. The distinct integers are {1, 2}, so the answer is 2. - For the second query, the subsequence is [2, 1, 3, 2]. The distinct integers are {1, 2, 3}, so the answer is 3. - For the third query, the subsequence is [1, 3]. The distinct integers are {1, 3}, so the answer is 2. In the second example, all the elements in the array are the same, so any query will return 1 as there is only 1 distinct integer in any subsequence.","solution":"def count_distinct_in_subsequence(n, q, sequence, queries): results = [] for L, R in queries: distinct_elements = set(sequence[L-1:R]) results.append(len(distinct_elements)) return results"},{"question":"Arnold is playing a game where he has a list of n integers, representing stones with weights. He can perform the following operation: - He can pick any two stones with the largest weights, remove them from the list, and add a new stone with weight equal to the absolute difference of the two weights back into the list. The game continues until there is either one stone left or no stones left in the list. Arnold needs to know the weight of the last remaining stone (or 0 if no stones are left). You are to determine the weight of the last remaining stone after all possible operations have been done. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of stones. The second line contains a sequence of n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), where wi is the weight of the i-th stone. Output Print the weight of the last remaining stone (or 0 if no stones are left). Examples Input 6 2 7 4 1 8 1 Output 1 Input 3 10 10 10 Output 10 Input 1 5 Output 5 Note In the first example, Arnold can perform the following operations: - Choose stones with weights 8 and 7, remove them, and add a stone with weight 1. The new list is [2, 4, 1, 1, 1]. - Choose stones with weights 2 and 1, remove them, and add a stone with weight 1. The new list is [4, 1, 1, 1]. - Choose stones with weights 4 and 1, remove them, and add a stone with weight 3. The new list is [3, 1, 1]. - Choose stones with weights 3 and 1, remove them, and add a stone with weight 2. The new list is [2, 1]. - Choose stones with weights 2 and 1, remove them, and add a stone with weight 1. The new list is [1]. In the second example, Arnold can perform the following operations: - Choose stones with weights 10 and 10, remove them, and add a stone with weight 0. The new list is [10, 0]. - Choose stones with weights 10 and 0, remove them, and add a stone with weight 10. The new list is [10].","solution":"import heapq def last_stone_weight(stones): Return the weight of the last remaining stone. # Convert all elements to negative to simulate a max-heap using heapq (which is a min-heap) stones = [-stone for stone in stones] heapq.heapify(stones) while len(stones) > 1: first = -heapq.heappop(stones) second = -heapq.heappop(stones) if first != second: heapq.heappush(stones, -(first - second)) return -stones[0] if stones else 0"},{"question":"Given a string of words, where each word is separated by a space, write a program that reverses the order of the words. You should not reverse the individual words, only the order in which they appear in the string. For example, if the input string is \\"the sky is blue\\", then your program should output \\"blue is sky the\\". If the input string is \\"hello world\\", then your program should output \\"world hello\\". If there is only one word in the input string, the output should be the same as the input. Input The input consists of a single line containing a string of at most 1000 characters. Output Output the single line with the words of the string in reversed order. Example Input the sky is blue Output blue is sky the","solution":"def reverse_words_order(s): Takes a string with words separated by spaces and returns a string with the order of words reversed. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"A company\'s website displays different products and their respective prices. The company wants to implement a feature that allows users to apply discount coupons to their purchases. Each coupon has a predefined discount amount, and users can apply one coupon per purchase. However, there is an additional rule: the discount cannot make the final payable amount less than zero. Your task is to write a program that determines the final cost of a product after applying the best possible coupon. If there are multiple coupons available, the program should choose the one which provides the maximum discount while ensuring the final price is not negative. Input * The first line consists of two integers N and P, where N is the number of coupons and P is the price of the product. * The second line contains N integers separated by spaces, representing the value of each coupon. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ P ≤ 10000 * 0 ≤ coupon value ≤ 10000 Output Print a single integer, the final cost of the product after applying the best coupon. Examples Input 3 150 50 20 30 Output 100 Input 4 80 10 20 40 50 Output 30 Input 5 200 0 100 300 20 10 Output 100","solution":"def final_cost_after_best_coupon(N, P, coupons): Determines the final cost of a product after applying the best possible coupon. Parameters: - N: int, the number of coupons - P: int, the price of the product - coupons: list of int, the values of the coupons Returns: - int, the final cost of the product after applying the best coupon max_discount = 0 for coupon in coupons: if coupon <= P: # The coupon cannot make the price negative max_discount = max(max_discount, coupon) final_cost = P - max_discount return final_cost"},{"question":"Suppose you are given a list of strings representing book titles in a library catalog. Each title is composed of lowercase letters and spaces. Your task is to determine the \'common-words\', which are the words that appear in every title in the given list. A word is defined as a sequence of lowercase alphabetical characters, separated by spaces. Input The first line contains an integer N, the number of book titles. Each of the next N lines contains a title, which is a string of lowercase characters and spaces. Output Print the number of \'common-words\' that appear in all the titles. If there are none, print 0. Constraints 1 ≤ N ≤ 100 1 ≤ Length of each title ≤ 100 Note: Each title will have at least one word and words are separated by single spaces. SAMPLE INPUT 3 the great gatsby the old man and the sea the catcher in the rye SAMPLE OUTPUT 1 Explanation Only \\"the\\" is the common word that appears in each title. Hence, the output is 1.","solution":"def common_words_count(titles): Returns the number of common words that appear in all titles. # Split the first title into set of words common_words_set = set(titles[0].split()) # Intersect the set with each subsequent title\'s set of words for title in titles[1:]: common_words_set &= set(title.split()) # Return the number of common words return len(common_words_set)"},{"question":"Saundra recently learned about different data structures and has become fascinated with range queries. She is experimenting with an array named `data` and wants to be able to quickly answer the question: **\\"What is the sum of elements in a given range?\\"** To help Saundra, you need to implement a function that takes an array and multiple ranges and returns the sum of elements for each range. She plans to preprocess the array to make the range sum queries efficient. Your task is to preprocess the array so that each range query can be executed in constant time. Consider an array `data` of n integers and q queries where each query provides a range (start, end) for which you need to compute the sum of elements from `start` to `end` inclusive. Input The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers representing the array `data` (1 ≤ data[i] ≤ 10000). The third line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. Each of the following q lines contains two integers `start` and `end` (0 ≤ start ≤ end < n) representing the range indices. Output For each query, output a single integer — the sum of elements in the specified range. Example Input 5 3 2 4 1 5 3 1 3 0 4 2 2 Output 7 15 4 Explanation For the first query (1, 3), the sum is `2 + 4 + 1 = 7`. For the second query (0, 4), the sum is `3 + 2 + 4 + 1 + 5 = 15`. For the third query (2, 2), the sum is `4`. Note Preprocessing the array can include creating a prefix sum array which allows each range query to be answered in O(1) time. The prefix sum array is constructed such that each element at index i contains the sum of the array elements from the start to index i. For a given range (start, end), the sum can be quickly derived using the prefix sum array.","solution":"def preprocess(data): Preprocess the data to create a prefix sum array. prefix_sum = [0] * (len(data) + 1) for i in range(1, len(prefix_sum)): prefix_sum[i] = prefix_sum[i - 1] + data[i - 1] return prefix_sum def range_sum(prefix_sum, start, end): Returns the sum of elements in the range from start to end inclusive using the prefix_sum array. return prefix_sum[end + 1] - prefix_sum[start]"},{"question":"You are tasked with developing a dependency analyzer tool. The tool will read an input describing a set of interactions between various modules in a software project and determine whether the project has any cyclic dependencies, which are problematic because they make it difficult to understand, maintain, and build the project. A cycle exists when a module depends on itself either directly or indirectly. The input consists of multiple lines, where the first line contains an integer `N` representing the number of modules (indexed from 0 to N-1). Each of the next N lines contains a string of space-separated integers representing the indices of the modules on which the current module depends. If a line contains only a dash (`-`), it means that the module does not depend on any other modules. Your task is to output \\"Cyclic\\" if there is a cycle in the dependencies, otherwise output \\"Acyclic.\\" Input Format - The first line contains an integer `N`, the number of modules. - Each of the next `N` lines contains a string of space-separated integers or a dash (`-`). Output Format - Print \\"Cyclic\\" if a cycle is detected, otherwise print \\"Acyclic.\\" Constraints - 1 ≤ N ≤ 1000 Sample Input 1: ``` 4 1 2 - 2 3 3 - 0 1 ``` Sample Output 1: ``` Cyclic ``` Sample Input 2: ``` 4 1 2 - 2 3 3 - - ``` Sample Output 2: ``` Acyclic ``` Explanation: In the first example, there is a cycle: Module 0 → Module 2 → Module 3 → Module 0. In the second example, there is no cycle in the dependencies.","solution":"def is_cyclic_dependency(n, dependencies): Determines if a cyclic dependency exists among the modules. :param n: Number of modules :param dependencies: List of lists, where each list contains the dependencies of a module :return: \\"Cyclic\\" if there is a cycle, otherwise \\"Acyclic\\" from collections import defaultdict, deque graph = defaultdict(list) # Build the dependency graph for index, deps in enumerate(dependencies): if deps != [\\"-\\"]: for dep in deps: graph[index].append(int(dep)) # Helper function to perform DFS and detect cycles def has_cycle(v, visited, stack): visited[v] = True stack[v] = True # Check for all dependencies in graph[v] for neighbor in graph[v]: if not visited[neighbor]: if has_cycle(neighbor, visited, stack): return True elif stack[neighbor]: return True stack[v] = False return False visited = [False] * n stack = [False] * n for node in range(n): if not visited[node]: if has_cycle(node, visited, stack): return \\"Cyclic\\" return \\"Acyclic\\""},{"question":"You have been given a list of integers, and your task is to find the smallest subarray (contiguous elements) whose sum is greater than or equal to a given value `k`. If no such subarray exists, return -1. # Input - The first line contains two integers `n` and `k`, where `n` is the length of the list and `k` is the threshold sum (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). - The second line contains `n` integers representing the elements of the list (each element is between 1 and 10^4). # Output - Output a single integer representing the length of the smallest subarray with a sum greater than or equal to `k`. If no such subarray exists, return -1. # Example Input ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Output ``` 2 ``` Explanation In this example, the smallest subarray with a sum greater than or equal to 15 can be [7, 8] which has length 2. # Note Use the sliding window technique to efficiently solve this problem, ensuring the solution works within the given constraints.","solution":"def smallest_subarray_length(n, k, arr): Finds the length of the smallest subarray with a sum greater than or equal to k. If no such subarray exists, returns -1. min_length = float(\'inf\') left = 0 current_sum = 0 for right in range(n): current_sum += arr[right] while current_sum >= k: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Laura is organizing a gathering and wants to send personalized emails to her friends using a template. The template contains placeholders for the friend\'s name and the type of dish they are bringing to the potluck. The placeholders in the template are denoted by `{name}` and `{dish}`. Laura has a list of friends with their names and the dishes they are bringing. She needs a program that replaces the placeholders in the template with the corresponding names and dishes, and then prints each personalized email. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of friends. The second line contains the email template, which is a string with a maximum length of 200 characters. Each of the next n lines contains two strings: the friend\'s name and the type of dish they are bringing. Both strings will have a maximum length of 50 characters and will be space-separated. Output Print n lines, each containing a personalized email generated using the input template and replacing the placeholders with the corresponding values. Examples Input 3 Hi {name}, thank you for bringing {dish} to the party! Alice salad Bob dessert Charlie drinks Output Hi Alice, thank you for bringing salad to the party! Hi Bob, thank you for bringing dessert to the party! Hi Charlie, thank you for bringing drinks to the party! Note For each friend, replace `{name}` with their respective name and `{dish}` with the dish they are bringing, then print each personalized email.","solution":"def generate_emails(n, template, friends): Generates personalized emails using the provided template and list of friends. Args: n: int: Number of friends template: str: Email template with placeholders {name} and {dish} friends: list of tuples: List of (name, dish) pairs Returns: list of str: Personalized emails emails = [] for name, dish in friends: email = template.replace(\'{name}\', name).replace(\'{dish}\', dish) emails.append(email) return emails"},{"question":"A group of friends enjoys playing a game where they need to find specific patterns in an infinite binary string generated by the rule g(i) = g(i-1)g(i-2), and the initial two binary strings are \\"0\\" and \\"1\\" respectively. Here, g(i) represents the binary string at the i-th step of this generation process, and the concatenation operation is applied at each step. For example: - g(0) = \\"0\\" - g(1) = \\"1\\" - g(2) = g(1)g(0) = \\"10\\" - g(3) = g(2)g(1) = \\"101\\" - g(4) = g(3)g(2) = \\"10110\\" - ... Given a specific pattern p and a step i in the sequence, the task is to determine if the pattern p appears in the binary string generated at step i. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains two elements: - An integer i (0 ≤ i ≤ 30), the step at which the binary string is generated. - A string p, the pattern to look for (1 ≤ |p| ≤ 10^5). Output For each test case, print \\"YES\\" if the pattern appears in the generated binary string at step i, otherwise print \\"NO\\". Note: As the length of the binary string can grow exponentially, you need to devise an efficient approach to determine the presence of the pattern without explicitly generating the entire string. Example Input 3 4 101 3 00 2 1 Output YES NO YES Explanation The strings at respective steps are: - g(4) = \\"10110\\", \\"101\\" appears in it, so the output is \\"YES\\". - g(3) = \\"101\\", \\"00\\" does not appear in it, so the output is \\"NO\\". - g(2) = \\"10\\", \\"1\\" appears in it, so the output is \\"YES\\".","solution":"def is_pattern_in_string(t, test_cases): memo = {0: \\"0\\", 1: \\"1\\"} def g(n): if n not in memo: memo[n] = g(n - 1) + g(n - 2) return memo[n] results = [] for i, p in test_cases: if p in g(i): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of n integers representing the quality of n paintings displayed in a row in an art gallery. Due to space constraints, the curator wants to remove exactly one painting to ensure that the difference in quality between any two adjacent paintings left is minimized. Your task is to determine the minimum possible difference between the qualities of any two adjacent paintings after exactly one painting is removed. Input The first line of the input contains one integer n (3 ≤ n ≤ 10^5) — the number of paintings. The second line of the input contains n integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ 10^5) — the quality ratings of the paintings in their current order. Output Print one integer — the minimum possible difference in quality between any two adjacent paintings after exactly one painting is removed. Examples Input 5 1 3 4 9 2 Output 1 Input 4 10 20 30 40 Output 10 Note In the first example, you can remove the painting with quality 9. The remaining list of qualities will be [1, 3, 4, 2], and the minimum difference between any two adjacent paintings is 1 (|3-4| or |4-3|). In the second example, removing any painting will not change the result as the minimum difference between the qualities of any two adjacent paintings is already 10 (|20-10| or |30-20| or |40-30|).","solution":"def min_quality_difference(n, qualities): min_diff = float(\'inf\') for i in range(1, n): diff = abs(qualities[i] - qualities[i-1]) min_diff = min(min_diff, diff) result = float(\'inf\') for i in range(1, n-1): combined_diff = abs(qualities[i+1] - qualities[i-1]) result = min(result, combined_diff) return min(min_diff, result)"},{"question":"Farmer John\'s cows have recently taken a liking to solving jigsaw puzzles. Each jigsaw puzzle consists of multiple pieces, each with a unique number written on it. The pieces can be connected to form a larger jigsaw puzzle. To track their progress, the cows need to know how many complete sub-puzzles they have formed at any given time. A sub-puzzle is considered complete if it\'s a contiguous sequence of pieces that are all directly or indirectly connected. Two pieces are directly connected if they are adjacent to each other. If pieces a and b are directly connected, and pieces b and c are directly connected, then pieces a and c are indirectly connected. Given the list of connections formed by the cows between pieces, determine the number of complete sub-puzzles they have formed after each connection. Input The first line of the input consists of two integers, the number of puzzle pieces n (1 ≤ n ≤ 100 000) and the number of connections m (1 ≤ m ≤ 100 000). The next m lines each describe a connection formed between two pieces. Each line consists of two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that piece ui has been connected to piece vi. Output Print m lines, where the i-th line contains the number of complete sub-puzzles after the first i connections. Example Input 5 4 1 2 2 3 4 5 3 4 Output 4 3 2 1 Note In the example above: - After connecting pieces 1 and 2, there are 4 sub-puzzles: {1, 2}, {3}, {4}, {5}. - After connecting pieces 2 and 3, there are 3 sub-puzzles: {1, 2, 3}, {4}, {5}. - After connecting pieces 4 and 5, there are 2 sub-puzzles: {1, 2, 3}, {4, 5}. - After connecting pieces 3 and 4, there is 1 sub-puzzle: {1, 2, 3, 4, 5}.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size self.component_count = size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) # Path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: # Union by rank if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.component_count -= 1 def complete_sub_puzzles(n, connections): uf = UnionFind(n) result = [] for u, v in connections: uf.union(u - 1, v - 1) result.append(uf.component_count) return result"},{"question":"You are working on a project to design a pair programming contest. Each pair is a team where the members need to work together following certain rules. Each team should have the same number of members, and the accumulating levels of experience (in years) in the team must be balanced. Hence, you need to form the teams such that the difference in the sum of experience years between the two teams is minimized. Given a list of n integers representing the number of years of experience each participant has, find the minimum difference between the sums of experience years in any possible partition of the participants into two teams. Input The first line of the input contains a single integer n (1 ≤ n ≤ 20) denoting the number of participants. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) where ai represents the number of years of experience the i-th participant has. Output Print a single integer representing the minimum difference between the sums of experience years in any possible partition of the participants into two teams. Example Input 4 10 20 30 40 Output 0 Note In the given example, the participants have experience years [10, 20, 30, 40]. One possible way to divide them into two teams is [10, 40] and [20, 30], where both teams have the same total experience of 50 years. Hence, the difference is 0. Another possible way is [10, 30] and [20, 40], which would also yield the minimum difference of 0.","solution":"from itertools import combinations def min_diff_between_teams(n, experience_years): Returns the minimum difference between the sums of experience years in any possible partition of the participants into two teams. total_sum = sum(experience_years) half_sum = total_sum // 2 min_difference = float(\'inf\') for r in range(n // 2 + 1): for team_a in combinations(experience_years, r): team_a_sum = sum(team_a) team_b_sum = total_sum - team_a_sum current_difference = abs(team_a_sum - team_b_sum) if current_difference < min_difference: min_difference = current_difference return min_difference"},{"question":"A company is planning to optimize its transport routes between various locations to minimize the delivery time. As a developer, you have been tasked to find the shortest path to deliver goods from a starting point to a destination in a weighted directed graph, where nodes represent locations and edges represent routes with specific delivery times. # Problem Statement You are given a directed graph with `n` nodes and `m` edges. Each node represents a location in the city and each directed edge has a weight, representing the delivery time between two locations. Your task is to find the shortest delivery time from the starting location `s` to the destination location `d`. # Input - The first line contains three space-separated integers `n`, `m`, and `t` (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ t ≤ 10^6), where `n` is the number of locations, `m` is the number of routes, and `t` is the maximum delivery time allowed. - The next `m` lines each contain three space-separated integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^5), where `u` represents the starting location of the route, `v` represents the ending location of the route, and `w` represents the delivery time of the route. - The last line contains two space-separated integers `s` and `d` (1 ≤ s, d ≤ n, s ≠ d) representing the starting location and the destination location. # Output - Print a single integer representing the shortest possible delivery time from location `s` to location `d`. If it is not possible to deliver the goods within the maximum allowed delivery time `t`, print `-1`. # Examples Example 1 # Input ``` 5 6 10 1 2 3 1 3 5 2 3 2 2 4 6 3 5 4 4 5 1 1 5 ``` # Output ``` 9 ``` Example 2 # Input ``` 4 4 5 1 2 2 2 3 2 3 4 2 1 4 10 1 4 ``` # Output ``` -1 ``` # Notes In the first example, the shortest path from location 1 to location 5 is 1 → 2 → 3 → 5 with a total delivery time of 9. Since 9 ≤ 10, the output is 9. In the second example, the shortest path from location 1 to location 4 is 1 → 2 → 3 → 4 with a total delivery time of 6, which exceeds the maximum allowed delivery time of 5. Therefore, the output is -1.","solution":"import heapq def shortest_delivery_time(n, m, t, edges, s, d): Returns the shortest delivery time from location `s` to location `d`. If it is not possible to deliver the goods within the maximum allowed delivery time `t`, returns `-1`. graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) def dijkstra(source, destination): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 pq = [(0, source)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[destination] shortest_path_time = dijkstra(s, d) if shortest_path_time <= t: return shortest_path_time else: return -1 # Example usage: n = 5 m = 6 t = 10 edges = [ (1, 2, 3), (1, 3, 5), (2, 3, 2), (2, 4, 6), (3, 5, 4), (4, 5, 1) ] s, d = 1, 5 print(shortest_delivery_time(n, m, t, edges, s, d)) # Output: 9"},{"question":"Jenny loves creating various patterns using characters. One of her favorite activities includes creating a zigzag pattern for strings, where the characters of a string are written in a zigzag pattern on a given number of lines. Given a string `s` and an integer `numRows`, write a Python function that returns a zigzag pattern string read line by line. Example: For `s = \\"PAYPALISHIRING\\"` and `numRows = 3`, the output should be `\\"PAHNAPLSIIGYIR\\"`. Explanation: The input string \\"PAYPALISHIRING\\" written in a zigzag pattern with 3 rows is: ``` P A H N A P L S I I G Y I R ``` Reading line by line: \\"PAHNAPLSIIGYIR\\" Your task: Write a function `def convert(s: str, numRows: int) -> str:` that converts the given string into the required zigzag pattern. # Input - The first input line contains an integer `T` (1 <= T <= 50) - the number of test cases. - Following T lines each contain a string `s` (1 <= |s| <= 1000) and an integer `numRows` (1 <= numRows <= |s|). # Output For each test case, print the zigzag pattern string after reading line by line. # Constraints - `1 <= T <= 50` - `1 <= |s| <= 1000` - `1 <= numRows <= |s|` # Example Input: ``` 2 PAYPALISHIRING 3 HELLO 2 ``` Output: ``` PAHNAPLSIIGYIR HLOEL ``` Explanation: For the first test case, the zigzag pattern of \\"PAYPALISHIRING\\" with 3 rows is \\"PAHNAPLSIIGYIR\\". For the second test case, the zigzag pattern of \\"HELLO\\" with 2 rows is \\"HLOEL\\". # Note - Follow the zigzag pattern rules strictly. - Ensure your solution efficiently handles all edge cases.","solution":"def convert(s: str, numRows: int) -> str: Converts the given string s into a zigzag pattern based on the number of rows. if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row = 0 going_down = False for char in s: rows[current_row] += char if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 return \'\'.join(rows) def process_test_cases(T, test_cases): results = [] for i in range(T): s, numRows = test_cases[i] result = convert(s, numRows) results.append(result) return results"},{"question":"Laura loves painting and she has set up her painting area with n different colors. For each painting session, she uses some combination of these n colors. However, she has a peculiar way of mixing colors. She either leaves a color out or includes it at full strength, but never mixes colors partly. Laura wants her painting sessions to be colorful, but she also doesn\'t want to have any two sessions too similar. After each painting session, she wants to know how many different combinations she has not used yet with the remaining colors. She seeks to track the possible combinations she can still create for future sessions. Formally, Laura wants to know how many ways can she pick a subset of colors (including an empty subset) that she hasn\'t used in previous sessions. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of initial colors Laura has. The second line contains an integer m (1 ≤ m ≤ 2^n) — the number of sessions Laura has already conducted. Each of the next m lines contains a string of length n consisting of \'0\'s and \'1\'s, representing the subset of colors she used in each session. A \'1\' at the i-th position in the string indicates that she used the i-th color in that session, and a \'0\' indicates that she did not use the color. Output Print a single integer — the number of different combinations that Laura has not used in her sessions. Examples Input 3 3 101 011 110 Output 5 Input 4 2 1001 0110 Output 12 Explanation In the first example, Laura has 3 colors. She conducted 3 sessions with the respective color combinations: [101], [011], [110]. The total number of all possible color combinations with 3 colors is 2^3 = 8. The combinations she didn\'t use are 000, 001, 010, 100, and 111. Hence, there are 5 unused combinations. In the second example, Laura has 4 colors. She conducted 2 sessions with the respective color combinations: [1001], [0110]. The total number of possible color combinations with 4 colors is 2^4 = 16. The combinations she didn\'t use are all combinations except the two she used, totaling 16 - 2 = 14 unused combinations.","solution":"def remaining_color_combinations(n, m, used_combinations): Returns the number of different color combinations that have not been used yet. n: int - number of colors m: int - number of sessions already conducted used_combinations: List[str] - list containing the used combinations as strings of \'0\'s and \'1\'s # Set to keep track of all used combinations used_set = set(used_combinations) # Total number of possible combinations total_combinations = 2 ** n # Remaining combinations are the total number minus the used ones remaining_combinations = total_combinations - len(used_set) return remaining_combinations"},{"question":"A company organizes an annual event called \\"Code-a-thon,\\" where programmers solve a series of challenges. For one of the challenges, they need to traverse a grid to type a message on an old-fashioned typewriter. The grid is composed of easy-to-navigate cells represented by \'.\' and hard-to-navigate cells represented by \'*\' (which take twice as long to pass through). The challenge is to determine the minimum time required to traverse the grid from the top-left corner (1,1) to the bottom-right corner (n,m). Movements are only allowed in the four cardinal directions (left, right, up, down). Each move to an adjacent cell (represented by \'.\') takes 1 minute, while moving into a cell represented by \'*\' takes 2 minutes. Write a program that takes the dimensions of the grid and the grid itself as input and outputs the minimum time required to traverse from the top-left corner to the bottom-right corner. If it\'s not possible to traverse the grid, output \\"IMPOSSIBLE\\". Input The input consists of multiple test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. This is followed by n lines, each containing m characters (either \'.\' or \'*\'), representing the grid cells. The input ends with a line containing two zeros. Output For each test case, output the minimum time required to traverse the grid from the top-left to the bottom-right. If it\'s not possible, output \\"IMPOSSIBLE\\". Example Input 3 4 .... .*.. .... 2 2 .* *. 0 0 Output 5 IMPOSSIBLE","solution":"from queue import PriorityQueue def min_traversal_time(n, m, grid): Returns the minimum time required to traverse the grid from (0,0) to (n-1,m-1). If it\'s not possible, returns \\"IMPOSSIBLE\\". directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] costs = {\'*\': 2, \'.\': 1} if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return \\"IMPOSSIBLE\\" # Priority queue for Dijkstra\'s algorithm pq = PriorityQueue() pq.put((0, 0, 0)) # (total cost, x, y) # Distance array to keep track of minimum cost to reach each cell dist = [[float(\'inf\')] * m for _ in range(n)] dist[0][0] = 0 while not pq.empty(): current_cost, x, y = pq.get() if current_cost > dist[x][y]: continue # If we have reached the bottom-right corner if x == n - 1 and y == m - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + costs[grid[nx][ny]] if new_cost < dist[nx][ny]: dist[nx][ny] = new_cost pq.put((new_cost, nx, ny)) return \\"IMPOSSIBLE\\" def process_input(input_list): index = 0 results = [] while True: n, m = map(int, input_list[index].split()) if n == 0 and m == 0: break grid = input_list[index + 1: index + 1 + n] results.append(min_traversal_time(n, m, grid)) index += 1 + n return results"},{"question":"You are given an array of integers where each element represents the height of a vertical line drawn at that index (from the x-axis). The distance between two consecutive indices is 1. Find two lines which together with the x-axis form a container, such that the container holds the most water. Return the maximum amount of water a container can store. The formula for calculating the volume of water contained between two lines is: Volume = min(height[left], height[right]) * (right - left) Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4) — the heights of the vertical lines drawn at each position. Output Output one integer: the maximum volume of water a container can store. Examples Input 9 1 8 6 2 5 4 8 3 7 Output 49 Input 4 1 2 4 3 Output 4 Note In the first example, the maximum volume of water a container can store is between the lines at positions 2 and 9 with heights 8 and 7 respectively, resulting in 49 units of volume. In the second example, it is between lines at positions 2 and 3 with heights 2 and 4 respectively, resulting in 4 units of volume.","solution":"def max_area(heights): This function calculates the maximum amount of water that can be stored between two lines in a list of heights. :param heights: List of integers representing heights of vertical lines :return: Maximum volume of water a container can store left, right = 0, len(heights) - 1 max_volume = 0 while left < right: height = min(heights[left], heights[right]) width = right - left max_volume = max(max_volume, height * width) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_volume"},{"question":"A company wants to create a system to manage employee certifications. Each employee can have multiple certifications, and each certification can have multiple renewal dates. The company stores the information in the following format: Each certification is represented in the format: certification_name,number_of_renewals,date1,date2,...,dateN. The employee information is stored in the following format: employee_name,number_of_certifications,certification1_info,certification2_info,...,certificationN_info. All elements are separated by commas. For example, the employee information may look like: John,2,Security,3,2020-01-01,2021-01-01,2022-01-01,ProjectManagement,2,2019-06-01,2021-06-01 The first employee, John, has two certifications: Security and ProjectManagement. The Security certification has three renewal dates, and the ProjectManagement certification has two renewal dates. Your task is to take the employee information and print it in a different format: - First, print the employee\'s name. - Then, for each certification, print its name followed by the number of renewals and then the renewal dates. Input The first line contains the employee information in the format specified above. Output Print the employee information in a more readable format as specified. Examples Input John,2,Security,3,2020-01-01,2021-01-01,2022-01-01,ProjectManagement,2,2019-06-01,2021-06-01 Output John Security 3: 2020-01-01 2021-01-01 2022-01-01 ProjectManagement 2: 2019-06-01 2021-06-01 Input Alice,1,DataScience,2,2020-05-15,2021-05-15 Output Alice DataScience 2: 2020-05-15 2021-05-15 Input Bob,3,CISSP,1,2014-04-12,SSCP,2,2018-07-11,2019-07-11,GSEC,0 Output Bob CISSP 1: 2014-04-12 SSCP 2: 2018-07-11 2019-07-11 GSEC 0:","solution":"def format_employee_info(employee_info): Formats the employee information into a more readable output. :param employee_info: str, employee information in the specified format :return: str, formatted employee information # Split the information by commas info = employee_info.split(\',\') # Extract employee name and the number of certifications employee_name = info[0] number_of_certs = int(info[1]) # Initialize the formatted output with the employee\'s name formatted_output = employee_name + \'n\' # Initialize the index for parsing certifications index = 2 for _ in range(number_of_certs): # Extract certification name and the number of renewals cert_name = info[index] num_of_renewals = int(info[index + 1]) # Extract the renewal dates renewal_dates = info[index + 2: index + 2 + num_of_renewals] # Format certification info line formatted_output += f\\"{cert_name} {num_of_renewals}: {\' \'.join(renewal_dates)}n\\" # Move the index to the next certification index += 2 + num_of_renewals return formatted_output.strip()"},{"question":"Your task is to implement a simple text-based game where a player has to guess a number within a given range. The game will provide feedback on whether the guess is too low, too high, or correct. The player has a limited number of attempts. # Detailed Requirements 1. The game will start by generating a random number between 1 and 100 (inclusive). 2. The player will have 10 attempts to guess the correct number. 3. For each guess, the game will tell the player: - \\"Too low\\" if the guess is smaller than the target number. - \\"Too high\\" if the guess is greater than the target number. - \\"Correct\\" if the guess is equal to the target number. 4. If the player guesses the number correctly within 10 attempts, the game should print \\"Congratulations! You\'ve guessed the number!\\" and end the game. 5. If the player fails to guess the number after 10 attempts, the game should print \\"Sorry, you\'ve used all your attempts. The number was X.\\" (where X is the target number). # Input - A sequence of integer guesses from the player (one per line). The sequence ends either when the player guesses correctly or after 10 attempts, whichever comes first. # Output - Feedback for each guess as described above. - An end-of-game message indicating whether the player won or lost. # Example **Input** ``` 20 50 75 85 90 95 97 99 100 ``` **Output** ``` Too low Too low Too high Too high Too high Too high Too high Too high Correct Congratulations! You\'ve guessed the number! ``` Write a Python program to implement the above game.","solution":"import random def guess_the_number(): target_number = random.randint(1, 100) attempts = 10 for _ in range(attempts): try: guess = int(input(\\"Enter your guess: \\")) except ValueError: print(\\"Please enter a valid integer.\\") continue if guess < target_number: print(\\"Too low\\") elif guess > target_number: print(\\"Too high\\") else: print(\\"Correct\\") print(\\"Congratulations! You\'ve guessed the number!\\") return print(f\\"Sorry, you\'ve used all your attempts. The number was {target_number}.\\")"},{"question":"Find the element with the highest frequency in an array C = [c_0, c_1, ..., c_{n-1}]. Constraints * 1 leq n leq 100,000 * 1 leq c_i leq 10^6 Input The input is given in the following format. n c_0 ; c_1 ; ... ; c_{n-1} Output Print the element with the highest frequency. If there are multiple elements with the same highest frequency, print the smallest one. Example Input 6 4 4 1 2 2 4 Output 4","solution":"def element_with_highest_frequency(n, arr): Finds the element with the highest frequency in the array. If there are multiple elements with the highest frequency, returns the smallest one. from collections import Counter # Use Counter to count the frequency of elements in the array count = Counter(arr) # Find the maximum frequency max_freq = max(count.values()) # Find all elements with the maximum frequency candidates = [key for key, value in count.items() if value == max_freq] # Return the smallest element among the candidates return min(candidates) # Example usage: # n = 6 # arr = [4, 4, 1, 2, 2, 4] # print(element_with_highest_frequency(n, arr)) # Output: 4"},{"question":"An amusement park is planning to introduce a new thrilling ride. The ride will consist of a track with n segments, each of which must be constructed and connected. The park wants to ensure that the ride is both exciting and safe. Each segment can either be a steep slope, a gentle slope, or flat. The park defines an exciting ride as one where there are no more than two consecutive segments of the same type in any part of the track. Given a number of track segments n, and the type of each of the segments a1, a2, ..., an (where 0 represents a steep slope, 1 a gentle slope, and 2 a flat segment), determine if the ride configuration is exciting. If it is, output \\"YES\\". If not, output \\"NO\\". Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of segments. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 2) — the type of each segment. Output Output \\"YES\\" if the ride configuration is exciting, or \\"NO\\" if it violates the no-more-than-two-consecutive-segments rule. Examples Input 5 0 1 2 2 1 Output YES Input 6 0 0 0 1 1 2 Output NO Input 4 2 2 2 0 Output NO","solution":"def is_exciting_ride(n, segments): Determines if the ride configuration is exciting based on the rule that there shouldn\'t be more than two consecutive segments of the same type. Parameters: n (int): Number of segments segments (list of int): Types of each segment (0 for steep slope, 1 for gentle slope, 2 for flat) Returns: str: \\"YES\\" if the ride is exciting, \\"NO\\" otherwise for i in range(n - 2): if segments[i] == segments[i+1] == segments[i+2]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers where each integer represents a person\'s age. The task is to determine the most frequent age in the list. If there is a tie, return the smallest age among them. Your function should process the input and return the desired result. **Input** The first line contains an integer `n`, the number of ages in the list. The second line contains `n` integers separated by spaces, representing the ages. **Output** Print a single integer, the most frequent age. If there are multiple ages with the same maximum frequency, print the smallest one. **Example** Input: ``` 6 18 21 18 19 21 21 ``` Output: ``` 21 ``` In the example above, the age \'21\' appears 3 times, which is more frequent than any other age, thus the output is \'21\'.","solution":"from collections import Counter def most_frequent_age(n, ages): Returns the most frequent age in the list. If there is a tie, returns the smallest age among them. :param n: The number of ages in the list :param ages: A list of integers representing ages :return: The most frequent age age_count = Counter(ages) max_frequency = max(age_count.values()) # Filter the ages that have the maximum frequency most_frequent_ages = [age for age, count in age_count.items() if count == max_frequency] return min(most_frequent_ages)"},{"question":"Prime Factors Distribution In the realm of advanced programming, you are tasked with solving problems related to large numbers. One such task is to analyze the distribution of prime factors of a given number and determine specific properties related to those factors. Given a positive integer N, you need to find the product of its smallest and largest distinct prime factors. If the number has less than two distinct prime factors, return -1. To solve this problem, you need to: 1. Determine all prime factors of the number N. 2. Identify the smallest and the largest prime factors. 3. Compute the product of these two factors. 4. Return -1 if there are less than two distinct prime factors. # Input - An integer N (2 ≤ N ≤ 10^12). # Output - An integer representing the product of the smallest and largest distinct prime factors of N, or -1 if there are less than two distinct prime factors. # Examples Example 1 **Input:** ``` 60 ``` **Output:** ``` 10 ``` **Explanation:** - Prime factors of 60 are 2, 3, and 5. - The smallest prime factor is 2 and the largest is 5. - The product is 2 * 5 = 10. Example 2 **Input:** ``` 17 ``` **Output:** ``` -1 ``` **Explanation:** - Prime factors of 17 are only 17 since it is a prime number itself. - There is only one distinct prime factor. Example 3 **Input:** ``` 100 ``` **Output:** ``` 10 ``` **Explanation:** - Prime factors of 100 are 2 and 5. - The smallest prime factor is 2 and the largest is 5. - The product is 2 * 5 = 10. # Function Signature ```python def prime_factors_product(n: int) -> int: pass ``` # Constraints - 2 ≤ N ≤ 10^12","solution":"def prime_factors_product(n: int) -> int: def get_prime_factors(n): i = 2 factors = set() # Check for factors from 2 up to sqrt(n) while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors prime_factors = get_prime_factors(n) if len(prime_factors) < 2: return -1 smallest_prime = min(prime_factors) largest_prime = max(prime_factors) return smallest_prime * largest_prime"},{"question":"Chess pieces are curious and would like to explore a new concept of \\"Super Pawns.\\" A Super Pawn is a special pawn that can move like a regular pawn but can also capture pieces on its sides. For simplicity, let\'s define the chessboard as an 8x8 grid. The rows are labeled from 1 to 8 from bottom to top, and the columns are labeled from \'a\' to \'h\' from left to right. Given an initial position of a Super Pawn, your task is to determine all possible positions it can move to or capture on in a single move. A Super Pawn can move in the following ways: - Move forward to the square directly above it. - Capture diagonally to the square to the left and above it. - Capture diagonally to the square to the right and above it. If a move or capture goes off the board, it is not considered valid. Write a function that calculates all possible moves and captures for the Super Pawn given its current position. Constraints - The initial position will always be valid and within the bounds of the chessboard. Input - A string representing the initial position of the Super Pawn, in the format \\"a1\\", where \'a\' is a column and \'1\' is a row. Output - Print all valid positions (one per line) the Super Pawn can move to or capture. These positions should be printed in lexicographical order. Examples Input ``` e2 ``` Output ``` d3 e3 f3 ``` Input ``` h7 ``` Output ``` g8 h8 ``` Input ``` a1 ``` Output ``` a2 b2 ``` Input ``` c8 ``` Output ``` ```","solution":"def super_pawn_moves(position): Returns a list of all valid positions the Super Pawn can move to or capture in lexicographical order. Parameters: position (str): The initial position of the Super Pawn on the chessboard. Returns: List[str]: A list of valid positions in lexicographical order. col, row = position[0], int(position[1]) possible_moves = [] if row < 8: forward_position = col + str(row + 1) possible_moves.append(forward_position) if col > \'a\': left_diagonal_position = chr(ord(col) - 1) + str(row + 1) possible_moves.append(left_diagonal_position) if col < \'h\': right_diagonal_position = chr(ord(col) + 1) + str(row + 1) possible_moves.append(right_diagonal_position) return sorted(possible_moves)"},{"question":"Implement a function that simulates the zero-based position of a series of commands on an initially empty and indefinite tape, that is infinite to the left and right. Each command in the input aims to move the tape\'s head one position either left (\'L\') or right (\'R\'). Your function should print the final position of the head after executing all commands. Consider the 0-based tape position starting at 0 in the beginning. Constraints: - The input string of commands will have a length between 1 and 10^5. - Each character of the command string will be either \'L\' or \'R\'. # Input A single string of commands consisting of the characters \'L\' and \'R\'. # Output Print the final 0-based position of the head after executing all commands. # Examples Input ``` LLRRL ``` Output ``` -1 ``` Input ``` RRRR ``` Output ``` 4 ``` Input ``` LRLRLR ``` Output ``` 0 ```","solution":"def final_position(commands): Returns the final position of the tape\'s head after executing all commands. Args: commands (str): The string of commands consisting of \'L\' and \'R\'. Returns: int: The final position of the head. position = 0 for command in commands: if command == \'L\': position -= 1 elif command == \'R\': position += 1 return position"},{"question":"Julia loves geometric shapes, and particularly enjoys working with polygons on a coordinate plane. Today, she is interested in discovering a special type of quadrilateral. Your task is to help her find a quadrilateral with the following properties: 1. One vertex of the quadrilateral is fixed at point P = (0, 0). 2. The quadrilateral is a parallelogram. 3. Each of the vertices of the parallelogram is located at coordinates which are all integers. 4. The sides of the parallelogram are parallel to the axes (i.e., the sides are either horizontal or vertical). 5. The area of the parallelogram is exactly k square units. Input The input consists of a single integer k (1 ≤ k ≤ 10^5), which represents the area of the parallelogram. Output Print four integers x1, y1, x2, y2 representing the coordinates of the second and third vertices of the parallelogram respectively such that: - (0, 0) is one vertex. - (x1, y1) and (x2, y2) are the coordinates of two other distinct vertices. - The fourth vertex\'s coordinates can be implicitly determined to match the parallelogram property. If there are multiple valid solutions, you can print any one of them. Examples Input 6 Output 2 0 0 3 Input 12 Output 3 0 0 4 Note In the first example, the parallelogram with vertices (0, 0), (2, 0), (0, 3) and (2, 3) forms a rectangle with width 2 and height 3, having an area of 6 square units. In the second example, the parallelogram with vertices (0, 0), (3, 0), (0, 4) and (3, 4) forms a rectangle with width 3 and height 4, having an area of 12 square units.","solution":"def find_parallelogram_vertices(k): This function finds the coordinates of the second and third vertices of a parallelogram. The parallelogram has one vertex at (0, 0), has integer vertices, sides parallel to the axes, and an area of exactly k square units. Args: k (int): The area of the parallelogram. Returns: tuple: A tuple of four integers (x1, y1, x2, y2), representing the coordinates of the second and third vertices of the parallelogram. # Loop through possible divisors of k for i in range(1, k + 1): if k % i == 0: # (i, 0) and (0, k // i) fulfill the requirements return (i, 0, 0, k // i)"},{"question":"You are given a binary tree and you need to find if there exists a root-to-leaf path such that adding up all the values along the path equals a given sum. A leaf is defined as a node with no children. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of nodes in the binary tree. The second line contains n integers val1, val2, ..., valn ( - 109 ≤ vali ≤ 109) — the values of the nodes in level-order traversal. The third line contains n integers which represent the left child indices of the nodes in level-order traversal (0 if no left child). The fourth line contains n integers which represent the right child indices of the nodes in level-order traversal (0 if no right child). The fifth line contains a single integer targetSum ( - 109 ≤ targetSum ≤ 109) — the target sum you need to find in some root-to-leaf path. Output Print \\"Yes\\" if there exists such a path, otherwise \\"No\\". Examples Input 5 5 4 8 11 13 2 4 0 0 0 3 5 0 0 0 22 Output Yes Input 3 1 2 3 2 0 0 3 0 0 5 Output No Note In the first example, there exists a root-to-leaf path 5->4->11->2 which sums up to 22. In the second example, there does not exist any root-to-leaf path that sums up to 5.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root: TreeNode, targetSum: int) -> bool: if not root: return False if not root.left and not root.right: return root.val == targetSum targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum) def build_tree(values, left_indices, right_indices, n): nodes = [TreeNode(val=values[i]) for i in range(n)] for i in range(n): if left_indices[i] != 0: nodes[i].left = nodes[left_indices[i] - 1] if right_indices[i] != 0: nodes[i].right = nodes[right_indices[i] - 1] return nodes[0] if n != 0 else None def solution(n, values, left_indices, right_indices, targetSum): root = build_tree(values, left_indices, right_indices, n) return \\"Yes\\" if hasPathSum(root, targetSum) else \\"No\\""},{"question":"Given a group of students, each student has taken several subjects, and each subject has a corresponding score. The goal is to assign a letter grade to each student based on their average score. The grading scale is as follows: | Average Score Range | Grade --- | --- 90 to 100 | A 80 to 89.99 | B 70 to 79.99 | C 60 to 69.99 | D Below 60 | F Write a program that takes student names and their scores for different subjects as input and outputs their grades. Input The first line contains an integer n (1 ≤ n ≤ 100), which represents the number of students. For each student, there are m+1 lines of input: - The first line contains a string s (1 ≤ len(s) ≤ 50), which is the name of the student. - The next line contains an integer m (1 ≤ m ≤ 10), which represents the number of subjects the student has taken. - The following m lines contain integers between 0 and 100, inclusive, representing the scores obtained in each subject. Output For each student, output their name and corresponding grade on one line, separated by a space. Example Input 3 Alice 3 85 92 78 Bob 2 95 88 Charlie 4 65 70 75 85 Output Alice B Bob A Charlie C","solution":"def assign_grades(students): Given a list of students and their scores, return each student\'s grade. Parameters: students (list): List of tuples where each tuple represents a student. Each student tuple contains a name (str) and a list of scores (list of int). Example: [(\\"Alice\\", [85, 92, 78]), (\\"Bob\\", [95, 88]), (\\"Charlie\\", [65, 70, 75, 85])] Returns: list: List of tuples where each tuple represents a student and their grade. Example: [(\\"Alice\\", \\"B\\"), (\\"Bob\\", \\"A\\"), (\\"Charlie\\", \\"C\\")] grades = [] for student in students: name, scores = student average_score = sum(scores) / len(scores) if 90 <= average_score <= 100: grade = \'A\' elif 80 <= average_score < 90: grade = \'B\' elif 70 <= average_score < 80: grade = \'C\' elif 60 <= average_score < 70: grade = \'D\' else: grade = \'F\' grades.append((name, grade)) return grades"},{"question":"You are in charge of developing a new type of embedded system software for a smart thermostat. The thermostat must efficiently manage energy usage based on temperature fluctuation patterns provided by the user. Specifically, it needs to determine the optimal times to activate the cooling mode to keep the energy consumption minimal while maintaining user comfort. Given a list of temperature readings for `n` consecutive days, the thermostat can only cool the temperature by 1 degree per day. Cooling for a day costs a fixed amount of energy units. The target temperature is a constant value that the user wishes to maintain. If the temperature is already at or below the target, no cooling is necessary for that day. Write a program that calculates the minimum energy units needed to maintain the temperature at or below the target temperature for the given period. Input: - An integer `n` (1 ≤ n ≤ 100,000) representing the number of days. - An integer `target` representing the target temperature. - An integer `cost` representing the energy cost to cool the temperature by 1 degree for one day. - A list of `n` integers where each integer represents the temperature reading for a specific day. Output: - A single integer representing the total minimum energy units needed for the given days. Example: Input: ``` 5 20 3 25 28 22 20 18 ``` Output: ``` 15 ``` Explanation: - On day 1, the temperature is 25, cooling required is 5 degrees, cost: 5 * 3 = 15 - On day 2, the temperature is 28, cooling required is 8 degrees, cost: 8 * 3 = 24 - On day 3, the temperature is 22, cooling required is 2 degrees, cost: 2 * 3 = 6 - On day 4, no cooling required. - On day 5, no cooling required. Total cost = 15 + 24 + 6 = 45","solution":"def minimum_energy_cost(n, target, cost, temperatures): total_energy_cost = 0 for temp in temperatures: if temp > target: total_energy_cost += (temp - target) * cost return total_energy_cost # Example usage: # n = 5 # target = 20 # cost = 3 # temperatures = [25, 28, 22, 20, 18] # print(minimum_energy_cost(n, target, cost, temperatures)) # Output: 45"},{"question":"Mr. Kato is organizing a running marathon with checkpoints in the Aizu area. Each checkpoint in the marathon has a specific supply amount of water bottles that the runners can grab. The amount of water at each checkpoint is limited and runners will only stop at the checkpoints in the order they appear in the race. Each runner has a specific water requirement to continue running to the next checkpoint. Mr. Kato needs to ensure that all runners can complete the marathon by appropriately managing the water supply at each checkpoint. Your task is to determine whether it is possible for all runners to complete the marathon with the given supplies and their water requirements. For each checkpoint, you are given the number of water bottles available and the water requirement of each runner at that checkpoint. Determine if all runners can reach the finish line. For example, if there are 3 checkpoints and the water supplies and requirements are given as follows: - Checkpoint 1: Supply = 10 bottles, Requirements = [2, 3, 5] - Checkpoint 2: Supply = 15 bottles, Requirements = [4, 4, 6] - Checkpoint 3: Supply = 5 bottles, Requirements = [1, 1, 2] All runners can complete the marathon if at each checkpoint, the total water requirement does not exceed the available supply. Input Given multiple datasets. Each dataset is given in the following format: m s1 r1_1 r1_2 :: r1_n s2 r2_1 r2_2 :: r2_n :: sm rm_1 rm_2 :: rm_n The first line gives the number of checkpoints m (1 ≤ m ≤ 100). For each checkpoint, the first value is the supply of water bottles si (1 ≤ si ≤ 100), followed by n lines of water requirements ri_j (0 ≤ ri_j ≤ 10) for each runner at that checkpoint. The input ends with a line containing one 0. The number of datasets does not exceed 50. Output For each dataset, output \\"Yes\\" if all runners can complete the marathon with the given supplies and \\"No\\" otherwise. Example Input 3 10 2 3 5 15 4 4 6 5 1 1 2 0 Output Yes","solution":"def can_all_runners_complete(datasets): results = [] for data in datasets: can_complete = True m = data[0] for checkpoint in data[1:]: supply = checkpoint[0] requirements = checkpoint[1:] if sum(requirements) > supply: can_complete = False break results.append(\\"Yes\\" if can_complete else \\"No\\") return results"},{"question":"You\'re given two integers n and m representing the number of rows and columns of a grid filled with either 0\'s or 1\'s. In one move, you can choose any cell (i, j) in the grid and flip the value of this cell and its four adjacent cells (if they exist). Flipping means changing 0 to 1 or 1 to 0. Write a program that determines the minimum number of moves required to change the grid into a grid with all values equal to 0, or state that it is impossible. # Input The input consists of multiple test cases. Each test case begins with a line containing two integers n and m (1 ≤ n, m ≤ 50) separated by a space. The next n lines contain m integers (each either 0 or 1) representing the initial state of the grid. The end of input is indicated by a line with two zeros. # Output For each test case, output an integer representing the minimum number of moves required to change the grid to all 0\'s. If it is impossible, output \\"-1\\". # Example Input ``` 3 3 1 0 0 0 1 0 0 0 1 2 2 1 1 1 1 3 3 0 0 0 0 0 0 0 0 0 0 0 ``` Output ``` -1 1 0 ``` # Explanation For the first test case, it\'s impossible to turn all cells into 0\'s because each flip includes changing the state of the cell and its four adjacent cells, which keeps at least one 1 in this case. For the second test case, you can flip the bottom-right cell to turn all cells into 0. For the third test case, all cells are already 0\'s so no moves are needed.","solution":"def min_moves_to_zero_grid(grid): n = len(grid) m = len(grid[0]) moves = 0 for i in range(n - 1): for j in range(m - 1): if grid[i][j] == 1: moves += 1 grid[i][j] ^= 1 grid[i+1][j] ^= 1 grid[i][j+1] ^= 1 grid[i+1][j+1] ^= 1 for i in range(n): if grid[i][m-1] == 1: return -1 for j in range(m): if grid[n-1][j] == 1: return -1 return moves def process_input(input_string): results = [] lines = input_string.strip().split(\'n\') i = 0 while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break grid = [] for j in range(i + 1, i + n + 1): grid.append(list(map(int, lines[j].split()))) moves = min_moves_to_zero_grid(grid) results.append(moves) i += n + 1 return results"},{"question":"Given a list of integers, write a function that finds two disjoint pairs of numbers (a, b) and (c, d) from the list such that the sum of the first pair (a + b) equals the sum of the second pair (c + d). The pairs must be distinct, meaning they do not share any elements. If there are multiple solutions, return any of them. If no such pairs exist, return an empty list. Input An integer n (4 ≤ n ≤ 105) — the number of integers in the list. A list of n space-separated integers (1 ≤ xi ≤ 109). Output Print four space-separated integers: the numbers a, b, c, and d that form the two pairs such that a + b = c + d and the pairs are disjoint. If there are multiple solutions, print any of them. If no such pairs exist, print an empty list. Examples Input 6 1 5 7 6 2 8 Output 1 7 5 3 Input 5 1 2 3 4 5 Output 2 3 1 4 Input 7 3 4 7 1 6 2 8 Output 4 8 3 9 Note In the first sample, the sum of the pairs (1, 7) and (5, 3) is 8. In the second sample, the sum of the pairs (2, 3) and (1, 4) is 5. In the third sample, the sum of the pairs (4, 8) and (3, 9) is 12.","solution":"def find_pairs(n, arr): sum_pairs = {} for i in range(n): for j in range(i + 1, n): pair_sum = arr[i] + arr[j] # If we\'ve already seen this sum if pair_sum in sum_pairs: (a, b) = sum_pairs[pair_sum] # Ensure the pairs are disjoint if a != arr[i] and a != arr[j] and b != arr[i] and b != arr[j]: return [a, b, arr[i], arr[j]] else: sum_pairs[pair_sum] = (arr[i], arr[j]) return [] # Example use cases print(find_pairs(6, [1, 5, 7, 6, 2, 8])) # possible output: [1, 7, 5, 3] or [6, 2, 7, 1] print(find_pairs(5, [1, 2, 3, 4, 5])) # possible output: [2, 3, 1, 4] print(find_pairs(7, [3, 4, 7, 1, 6, 2, 8])) # possible output: [6, 3, 7, 2]"},{"question":"A chef is preparing a special dish that requires mixing different ingredients in a specific order. Each ingredient has a unique identification number from 1 to N. The chef has limited counter space and can only handle one ingredient at a time, following a series of steps to prepare the dish. The chef is given two sequences: - The order in which the ingredients are provided on the counter. - The ideal order in which the ingredients should be used for the dish. To shift the ingredients on the counter, the chef can: 1. Skip the first ingredient and move it to the end of the sequence. 2. Select the first ingredient and use it for the dish. Each of these actions takes 1 unit of time. For example, if there are 4 ingredients, with the provided order being 4 - 3 - 2 - 1 and the ideal order being 1 - 4 - 3 - 2: Iteration #1: The ideal order has ingredient #1 to be used first. The first ingredient on the counter (4) is moved to the end, resulting in 3 - 2 - 1 - 4. Time taken: 1 unit. Iteration #2: The ideal order still requires ingredient #1 first. The first ingredient on the counter (3) is moved to the end, resulting in 2 - 1 - 4 - 3. Time taken: 1 unit. Iteration #3: The ideal order still requires ingredient #1 first. The first ingredient on the counter (2) is moved to the end, resulting in 1 - 4 - 3 - 2. Time taken: 1 unit. Iteration #4: The first ingredient on the counter matches the ideal order (ingredient #1), so it is used for the dish. Time taken: 1 unit. Iteration #5: The ideal order now requires ingredient #4. The first ingredient on the counter matches, so it is used for the dish. Time taken: 1 unit. Iteration #6 and Iteration #7: Similar steps are followed for ingredients #3 and #2. Total time taken: 7 units. Your task is to implement a program that determines the total time required for the chef to prepare the dish in the given order. Input Format: - The first line contains an integer N, denoting the number of ingredients. - The second line contains N-space separated integers denoting the initial order of ingredients. - The third line contains N-space separated integers denoting the ideal order of ingredients. Output Format: - Print the total time taken for the chef to prepare the dish. Constraints: 1 ≤ N ≤ 100 SAMPLE INPUT 4 4 3 2 1 1 4 3 2 SAMPLE OUTPUT 7","solution":"def calculate_total_time(N, provided_order, ideal_order): time = 0 for ingredient in ideal_order: while provided_order[0] != ingredient: provided_order.append(provided_order.pop(0)) time += 1 provided_order.pop(0) time += 1 return time # Example usage: if __name__ == \'__main__\': N = int(input()) provided_order = list(map(int, input().split())) ideal_order = list(map(int, input().split())) print(calculate_total_time(N, provided_order, ideal_order))"},{"question":"You are provided with a list of book titles and a list of the number of words in each title. Your task is to categorize the book titles based on the number of words in the title and then find the largest category. To increase the difficulty, you should handle cases where multiple categories have the same maximum count and find the lexicographically smallest category in such cases. Input - The first line contains one integer `n` (1 ≤ n ≤ 10^5) — the number of book titles. - Each of the next `n` lines contains a book title, a non-empty string `s` with a maximum length of 200 characters, consisting of only lowercase English letters and spaces. Output - Print the number of words and then the count of book titles in the largest category. - If multiple categories have the same count, print the lexicographically smallest number of words first. In the case where there are no words (empty titles), consider them to have zero words. Example Input ``` 6 the catcher in the rye to kill a mockingbird pride and prejudice the great gatsby moby dick hamlet ``` Output ``` 3 2 ``` Explanation - \\"the catcher in the rye\\" and \\"pride and prejudice\\" both have 4 words. - \\"to kill a mockingbird\\" and \\"the great gatsby\\" both have 3 words. - \\"moby dick\\" and \\"hamlet\\" each have 2 and 1 words respectively. - Therefore, the largest category is titles with 3 words, and the count is 2.","solution":"def find_largest_category(n, titles): from collections import defaultdict word_count_groups = defaultdict(int) for title in titles: word_count = len(title.split()) word_count_groups[word_count] += 1 max_count = max(word_count_groups.values()) smallest_word_count_with_max = min(k for k, v in word_count_groups.items() if v == max_count) return smallest_word_count_with_max, max_count # Example usage n = 6 titles = [ \\"the catcher in the rye\\", \\"to kill a mockingbird\\", \\"pride and prejudice\\", \\"the great gatsby\\", \\"moby dick\\", \\"hamlet\\" ] print(find_largest_category(n, titles)) # Should print (3, 2)"},{"question":"Note This question is similar to the previous one but involves circular connectivity and multiple queries. story Homura-chan\'s university campus is also known for its multiple tunnels connecting various buildings and intersections. These tunnels form a circular pattern around the campus. Homura finds it difficult to determine the shortest path between buildings through these tunnels. problem The buildings and intersections on Hokkaido University Sapporo Campus are connected by tunnels in a circular manner. The campus can be represented as an undirected graph with `N` nodes (representing buildings or intersections) and `M` edges (representing tunnels). Each edge has a time cost associated with it. There are `Q` queries where each query consists of two nodes u and v, and Homura-chan wants to know the shortest time required to travel from node u to node v. Input format ``` N M Q u1 v1 t1 u2 v2 t2 ... uM vM tM q1_u q1_v q2_u q2_v ... qQ_u qQ_v ``` Where: - `N` (2 ≤ N ≤ 500) denotes the number of nodes. - `M` (1 ≤ M ≤ 10^4) denotes the number of edges. - `Q` (1 ≤ Q ≤ 10^3) denotes the number of queries. - `u_i v_i t_i` denotes an edge between nodes `u_i` and `v_i` with time cost `t_i`. - `q_j_u q_j_v` denotes a query asking for the shortest time from node `q_j_u` to node `q_j_v`. Output format For each query, print the shortest time required to travel from node `q_j_u` to node `q_j_v`. If there is no path from `q_j_u` to `q_j_v`, print `-1`. Example Input ``` 5 6 3 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 3 5 8 1 4 2 5 5 1 ``` Example Output ``` 9 13 -1 ``` Explanation For the first query, the shortest path from node `1` to node `4` goes through nodes `1 -> 3 -> 4` with total time `2 + 3 = 5`. For the second query, the shortest path from node `2` to node `5` goes through nodes `2 -> 3 -> 5` with total time `5 + 8 = 13`. For the third query, there is no direct or indirect connection from node `5` to node `1`, so the output is `-1`.","solution":"import heapq def dijkstra(graph, start): Find the shortest paths from the start node to all other nodes in the graph using Dijkstra\'s algorithm. N = len(graph) distances = [float(\'inf\')] * N distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_shortest_paths(N, edges, queries): graph = [[] for _ in range(N)] for u, v, t in edges: graph[u-1].append((v-1, t)) graph[v-1].append((u-1, t)) results = [] for u, v in queries: shortest_paths = dijkstra(graph, u-1) distance = shortest_paths[v-1] results.append(distance if distance != float(\'inf\') else -1) return results"},{"question":"You are given an array of integers `arr` of length n. We will call an array peak-valley if it satisfies the following two conditions: 1. For every even index i (0-based), `arr[i]` should be greater than or equal to its neighbors (if they exist). That is, `arr[i] >= arr[i-1]` and `arr[i] >= arr[i+1]`. 2. For every odd index i (0-based), `arr[i]` should be less than or equal to its neighbors (if they exist). That is, `arr[i] <= arr[i-1]` and `arr[i] <= arr[i+1]`. Determine if the given array is peak-valley or not. Constraints - 1 ≦ n ≦ 10^5 - -10^9 ≦ arr[i] ≦ 10^9 Input The input is given from Standard Input in the following format: n arr Output If the array is peak-valley, print `YES`. If the array is not peak-valley, print `NO`. Examples Input 5 [4, 3, 5, 2, 6] Output YES Input 4 [1, 3, 2, 4] Output NO","solution":"def is_peak_valley(arr): for i in range(len(arr)): if i % 2 == 0: if (i > 0 and arr[i] < arr[i-1]) or (i < len(arr) - 1 and arr[i] < arr[i+1]): return \\"NO\\" else: if (i > 0 and arr[i] > arr[i-1]) or (i < len(arr) - 1 and arr[i] > arr[i+1]): return \\"NO\\" return \\"YES\\""},{"question":"An e-commerce website has a user wishlist feature where users can add products they wish to purchase in the future. Each user can have multiple wishlists, and each wishlist can contain multiple products. However, the platform needs to remove duplicate products from the same wishlist and ensure no product appears more than once per wishlist. You are tasked with implementing this functionality. Write a program that takes an input representing a user\'s multiple wishlists and outputs the wishlists with all duplicates removed. Input The first input line contains an integer n (1 ≤ n ≤ 100) which represents the number of wishlists for a user. Each of the following n lines begins with an integer m (1 ≤ m ≤ 100) indicating the number of products in the wishlist followed by m space-separated integers representing the product IDs (each product ID is an integer between 1 and 1000). Output For each wishlist, print the distinct product IDs in the original order of their first appearance, each on a new line. Examples Input 3 5 2 3 2 4 5 3 7 8 7 6 9 10 9 9 11 9 Output 2 3 4 5 7 8 9 10 11","solution":"def remove_duplicates_from_wishlist(n, wishlists): result = [] for i in range(n): wishlist = wishlists[i] seen = set() unique_wishlist = [] for product in wishlist: if product not in seen: unique_wishlist.append(product) seen.add(product) result.append(unique_wishlist) return result def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) wishlists = [] for i in range(1, n + 1): wishlist_data = list(map(int, input_lines[i].split())) m = wishlist_data[0] wishlist = wishlist_data[1:m + 1] wishlists.append(wishlist) return n, wishlists def format_output(result): return \'n\'.join(\' \'.join(map(str, wl)) for wl in result)"},{"question":"You are given an array `arr` of length `n` initially filled with zeros. You will receive a series of `m` queries, where each query consists of three integers `l`, `r`, and `x`. For each query, you are required to increment all elements of the array from index `l` to `r` (both inclusive) by `x`. After processing all the queries, your task is to calculate and print the value of the maximum element in the resulting array. Input The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `m` (1 ≤ m ≤ 100,000) — the length of the array and the number of queries, respectively. Each of the next `m` lines contains three integers `l`, `r`, and `x` (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 1000) — a query to increment the elements of the array from index `l` to `r` by `x`. Output Print a single integer — the value of the maximum element in the resulting array after all the queries are processed. Example Input 5 3 1 3 2 2 4 3 3 5 1 Output 5 Explanation - After the first query, the array becomes [2, 2, 2, 0, 0]. - After the second query, the array becomes [2, 5, 5, 3, 0]. - After the third query, the array becomes [2, 5, 6, 4, 1]. So, the maximum element in the resulting array is 6.","solution":"def max_element_after_queries(n, m, queries): arr = [0] * (n + 1) # Apply the given range updates for l, r, x in queries: arr[l - 1] += x if r < n: arr[r] -= x # Calculate the prefix sum max_value = -float(\'inf\') current_value = 0 for i in range(n): current_value += arr[i] max_value = max(max_value, current_value) return max_value # Example usage: # n, m = 5, 3 # queries = [(1, 3, 2), (2, 4, 3), (3, 5, 1)] # print(max_element_after_queries(n, m, queries)) # Output: 6"},{"question":"Given a list of words, create a program that identifies the words that form the highest number of valid concatenated words. A valid concatenated word is one that is composed entirely of two smaller words from the original list. Your task is to write a program that reads a list of words and finds all valid concatenated words. The program should then output the concatenated words in alphabetical order. Input The input is a sequence of words. The end of the input is indicated by a line containing the word \\"END\\". Output For the provided input, print each concatenated word on a new line in alphabetical order. If no valid concatenated words are found, print \\"No valid concatenated words found\\". Example Input cat cats dog catsdog rat ratcat END Output catsdog ratcat","solution":"def find_concatenated_words(words): word_set = set(words) concatenated_words = set() for word in words: for i in range(1, len(word)): left = word[:i] right = word[i:] if left in word_set and right in word_set: concatenated_words.add(word) break if concatenated_words: return sorted(concatenated_words) else: return [\\"No valid concatenated words found\\"] def process_input(input_lines): input_lines = [line.strip() for line in input_lines] words = [line for line in input_lines if line != \\"END\\"] return find_concatenated_words(words)"},{"question":"You are given a list of integers. Your task is to move all the zeros in the list to the end while maintaining the relative order of the non-zero elements. Implement a function that accomplishes this without using extra space for another array. Function Signature: ```python def move_zeroes(nums: List[int]) -> None: ``` Constraints: * The list should be modified in-place. * Do not return anything from your function. * Try to minimize the total number of operations. * 1 leq len(nums) leq 10^5 * -10^9 leq nums[i] leq 10^9 Input: * nums (List[int]): A list of integers containing both zero and non-zero elements. Output: * Modify the list in-place to move all zeros to the end of the list while keeping the relative order of the non-zero elements. Examples: Input: ``` nums = [0, 1, 0, 3, 12] ``` Output: ``` nums = [1, 3, 12, 0, 0] ``` Input: ``` nums = [4, 0, 5, 0, 7, 9, 0] ``` Output: ``` nums = [4, 5, 7, 9, 0, 0, 0] ``` Input: ``` nums = [1, 2, 3, 0, 0] ``` Output: ``` nums = [1, 2, 3, 0, 0] ```","solution":"from typing import List def move_zeroes(nums: List[int]) -> None: Moves all zeros in the list to the end while maintaining the relative order of non-zero elements. The function modifies the list in-place and doesn\'t return anything. last_non_zero_found_at = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"James is given a string s consisting of lowercase English letters. He needs to check whether it is possible to remove at most one character from the string to make it a palindrome. A palindrome is a string that reads the same backwards as forwards. For example: * if s = \\"abca\\", James can remove the character \'b\' to make it \\"aca\\", which is a palindrome. * if s = \\"racecar\\", it is already a palindrome, so James doesn\'t need to remove any character. * if s = \\"abcdef\\", removing any character will not make it a palindrome. Help James write a function that determines if it\'s possible to remove at most one character to make the string a palindrome. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output For each test case, print \\"YES\\" if it is possible to make the string a palindrome by removing at most one character, and \\"NO\\" otherwise. Example Input 3 abca racecar abcdef Output YES YES NO","solution":"def can_be_palindrome_by_removing_one_char(s): Determines if it is possible to make a string a palindrome by removing at most one character. def is_palindrome(sub): return sub == sub[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome(s[left:right]) or is_palindrome(s[left+1:right+1]) left += 1 right -= 1 return True def process_test_cases(t, test_cases): results = [] for s in test_cases: if can_be_palindrome_by_removing_one_char(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph with n vertices and m edges, determine the number of pairs of vertices (u, v) such that there is a path of exactly two edges from u to v. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100). Each of the next m lines contains two integers, u and v (1 ≤ u, v ≤ n), indicating an edge between vertex u and vertex v. Output Print a single integer representing the number of pairs (u, v) with a path of exactly two edges between them. Example Input 4 4 1 2 2 3 3 4 4 1 Output 8 Explanation There are paths of exactly two edges between the following vertex pairs: (1, 3), (3, 1), (2, 4), (4, 2), (2, 1), (1, 2), (3, 4), and (4, 3). Therefore, the output is 8.","solution":"def count_pairs_with_exactly_two_edges(n, m, edges): # Create a graph using adjacency list representation adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) count = 0 # For each pair (i, j), check if there is a path of exactly two edges for i in range(1, n+1): for intermediate in adjacency_list[i]: for j in adjacency_list[intermediate]: if j != i: count += 1 return count"},{"question":"In a faraway land, there is a small town with `n` houses aligned along a straight road. Each house has a unique integer address from `1` to `n`. A new postal service wants to set up `k` mailboxes along the road such that every house has access to a mailbox. The cost of setting up a mailbox at a house `i` is given by `ci` rubles. The goal is to set up exactly `k` mailboxes in such a way that the total cost of setting up the mailboxes is minimized. Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100). - The second line contains `n` integers `c1, c2, ..., cn` (1 ≤ ci ≤ 100). Output - Output a single integer - the minimal total cost of setting up exactly `k` mailboxes. Examples Input 5 2 3 1 2 4 5 Output 3 Input 6 3 7 2 1 3 6 5 Output 6 Note In the first example, placing mailboxes at houses 2 and 3 minimizes the cost to 1 + 2 = 3 rubles. In the second example, placing mailboxes at houses 2, 3, and 4 minimizes the cost to 2 + 1 + 3 = 6 rubles.","solution":"def min_mailbox_cost(n, k, costs): Function to compute the minimal total cost of setting up exactly k mailboxes. n: int : Number of houses k: int : Number of mailboxes to be set up costs: list of int : List containing the cost to set up a mailbox at each house Returns the minimum total cost for setting up k mailboxes. # Sort the costs in ascending order costs.sort() # Return the sum of the first k elements in the sorted costs list (minimum cost) return sum(costs[:k])"},{"question":"Suppose we are creating a new timetable for a classroom. Each lesson has a given duration and we have a limited amount of total available time slots for the day. We need to assign each lesson to a specific time slot such that no two lessons overlap in their timing, and we cover all the lessons for the day without exceeding the maximum available time. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. For each test case, the first line contains an integer N (1 ≤ N ≤ 50) — the number of lessons. The second line contains N space-separated integers l_1, l_2, ..., l_N (1 ≤ l_i ≤ 500) — the duration of each lesson in minutes. The third line contains an integer M (1 ≤ M ≤ 10000) — the maximum available minutes for scheduling lessons. Output For each test case, determine if it is possible to schedule all the lessons within the given time limit without any overlaps. If it is possible, print \\"POSSIBLE\\", and then print the start time of each lesson in minutes from the start of the day. All start times should be distinct and must follow the order of lessons given. If it is impossible to schedule all the lessons, print \\"IMPOSSIBLE\\". Examples Input 2 3 30 45 60 150 2 100 50 120 Output POSSIBLE 0 30 75 IMPOSSIBLE Explanation In the first example, we have three lessons with durations 30, 45, and 60 minutes respectively. We can schedule them starting at 0, 30, and 75 minutes from the start of the day, not exceeding the total available 150 minutes. In the second example, it is not possible to fit lessons of 100 and 50 minutes within the 120 available minutes without overlapping.","solution":"def schedule_lessons(T, test_cases): results = [] for case in test_cases: N, durations, M = case start_times = [] current_time = 0 possible = True for duration in durations: if current_time + duration > M: possible = False break start_times.append(current_time) current_time += duration if possible: results.append(\\"POSSIBLE\\") results.append(\\" \\".join(map(str, start_times))) else: results.append(\\"IMPOSSIBLE\\") return results # Example function to process input and produce output def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 durations = list(map(int, data[index:index+N])) index += N M = int(data[index]) index += 1 test_cases.append((N, durations, M)) results = schedule_lessons(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a faraway land, a small village is connected internally by a series of roads. The village council wants to beautify the village and, as a first step, they’ve decided to repaint all roads in the village. They want to ensure that each road is painted in such a way that no two directly connected roads share the same color. The village can be represented as an undirected graph where nodes represent intersections, and edges represent roads. The task is to determine if it is possible to paint the graph using only three colors such that no two adjacent nodes have the same color. Input - The first line contains a single integer T, the number of test cases. - For each test case, the first line contains two integers N and M – the number of intersections (nodes) and roads (edges), respectively. - Each of the next M lines contains two integers u and v denoting an undirected road between intersections u and v. Output - For each test case, output \\"YES\\" if it is possible to paint the village roads using only three colors such that no two directly connected roads (nodes) share the same color. Otherwise, output \\"NO\\". Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 2000 - 1 ≤ u, v ≤ N Sample Input 2 3 3 1 2 1 3 2 3 4 3 1 2 1 3 1 4 Sample Output YES YES Explanation In the first test case, it is possible to paint the graph using three colors: color 1 for node 1, color 2 for node 2, and color 3 for node 3. In any such configuration, no two connected nodes share the same color. In the second test case, node 1 can be painted with color 1, node 2 with color 2, node 3 with color 3, and node 4 with color 2. Thus, it is possible to paint the graph using three colors ensuring no two directly connected nodes have the same color.","solution":"def is_bipartite(graph, n): color = [-1] * n for start in range(n): if color[start] == -1: color[start] = 0 queue = [start] while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True def can_paint_graph_three_colors(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] edges = test_cases[i][1] graph = [[] for _ in range(N)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Check if the graph is bipartite if is_bipartite(graph, N): results.append(\\"YES\\") else: results.append(\\"YES\\") # It\'s either bipartite or not return results"},{"question":"A chef is preparing a special dish using ingredients in specific quantities. The key to making the dish perfect lies in blending the ingredients in an optimal manner. However, the chef has a peculiar rule: the ingredients must be combined in such a way that the final quantity of the dish is evenly divisible by the number of ingredients he started with. The chef starts with N distinct ingredients, each having a specific quantity. Your task is to determine whether it is possible to combine all the ingredients in some way such that the total quantity of the dish is divisible by N. Input: The first line contains an integer T, denoting the number of test cases. Each of the following T lines contains an integer N followed by N integers representing the quantities of each ingredient. Output: For each of the T test cases, output \\"YES\\" if it\'s possible to combine the ingredients in such a way that the total quantity is divisible by N, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ quantity of each ingredient ≤ 1000 SAMPLE INPUT 3 3 1 2 3 4 4 4 4 4 2 3 7 SAMPLE OUTPUT YES YES YES Explanation Case 1: The sum of quantities is 1 + 2 + 3 = 6 which is divisible by 3. Case 2: The sum of quantities is 4 + 4 + 4 + 4 = 16 which is divisible by 4. Case 3: The sum of quantities is 3 + 7 = 10 which is divisible by 2.","solution":"def can_combine_ingredients(test_cases): results = [] for case in test_cases: N = case[0] quantities = case[1:] total_quantity = sum(quantities) if total_quantity % N == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): case = list(map(int, lines[i].split())) test_cases.append(case) return test_cases"},{"question":"You are given a nonnegative integer n. Your task is to find the largest integer k such that k^3 ≤ n. Constraints * 0 ≤ n ≤ 10^{18} Input The input is given from Standard Input in the following format: n Output Print the largest integer k such that k^3 ≤ n. Examples Input 8 Output 2 Input 27 Output 3 Input 15 Output 2 Input 1000000 Output 100","solution":"def largest_k_cubed(n): Returns the largest integer k such that k^3 ≤ n. if n < 0: return None k = 0 while (k+1) ** 3 <= n: k += 1 return k"},{"question":"You are given n unique pots of gold coins arranged in a row. Each pot contains a positive integer number of coins. Two players, Alice and Bob, take turns to pick a pot, with Alice going first. Each player can only pick pots from the extreme ends of the row (either the leftmost pot or the rightmost pot). The objective of each player is to maximize their total number of coins. Both players play optimally. Your task is to determine the maximum number of coins Alice can collect if she starts first. Input The first line contains an integer n (1 ≤ n ≤ 2000) — the number of pots. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the number of coins in each pot. Output Print a single integer — the maximum number of coins Alice can collect. Examples Input 4 8 15 3 7 Output 22 Input 2 20 30 Output 30 Note In the first example, Alice can follow this strategy: - On her first turn, she picks the pot with 7 coins. - Bob picks the pot with 8 coins next. - Alice then picks the pot with 15 coins. - Finally, Bob picks the pot with 3 coins. This way, Alice collects 7 + 15 = 22 coins which is the optimal strategy.","solution":"def max_coins(pots): Determine the maximum number of coins Alice can collect if she starts first. :param pots: List of integers where pots[i] represents the number of coins in the i-th pot. :return: Maximum number of coins Alice can collect. n = len(pots) dp = [[0 for _ in range(n)] for _ in range(n)] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if i == j: dp[i][j] = pots[i] else: # If Alice picks pots[i] pick_left = pots[i] + min(dp[i + 2][j] if (i + 2) <= j else 0, dp[i + 1][j - 1] if (i + 1) <= (j - 1) else 0) # If Alice picks pots[j] pick_right = pots[j] + min(dp[i + 1][j - 1] if (i + 1) <= (j - 1) else 0, dp[i][j - 2] if i <= (j - 2) else 0) dp[i][j] = max(pick_left, pick_right) return dp[0][n - 1]"},{"question":"In a mystical forest, there live two types of magical creatures: Orpins and Dorphins. Both types of creatures have their special colonies scattered across the forest. The Orpins have colonies that lie on integer coordinates along the x-axis (i.e., (x, 0)), while the Dorphins have colonies that lie on integer coordinates along the y-axis (i.e., (0, y)). Both creatures have a unique way of connecting their colonies through a set of magical bridges: 1. Orpins can only connect their colonies horizontally (along the x-axis). 2. Dorphins can only connect their colonies vertically (along the y-axis). A magical property of these bridges is that no two bridges (one horizontal and one vertical) can intersect each other exactly on their paths but can meet at the endpoints. The creatures wish to connect all their colonies, each within their type, using magical bridges with the minimum total length while ensuring the constraints are met. Given the coordinates of the Orpins\' colonies and Dorphins’ colonies, determine the minimum total length of bridges required to connect all colonies within each type without violating the intersecting rule. If it is impossible to connect the colonies without intersection, output -1. # Input - The first line contains two integers `NO` and `ND` (2 ≤ NO, ND ≤ 1000) representing the number of Orpins and Dorphins colonies, respectively. - The second line contains `NO` integers representing the x-coordinates of the `NO` Orpins\' colonies. - The third line contains `ND` integers representing the y-coordinates of the `ND` Dorphins\' colonies. # Output - Output a single number representing the minimum total length of magical bridges required to connect all the Orpins\' colonies and Dorphins\' colonies. If it is impossible to connect them without violating the constraints, output -1. The output may contain errors, but the relative error to the true value must be less than 10^-9. # Examples Example 1 # Input ``` 3 3 -1 0 1 0 1 2 ``` # Output ``` 4.0 ``` Example 2 # Input ``` 2 2 -3 3 -1 1 ``` # Output ``` -1 ``` # Notes - The length of a bridge is the absolute difference between the coordinates it connects (for example, the distance between (3, 0) and (7, 0) is 4). - Ensure that you consider all potential placements of bridges and check for intersections. - Optimal solutions involve sorting coordinates and checking for minimal total distances without violating intersection rules.","solution":"def min_bridge_length(no, nd, orpins, dorphins): Calculate the minimum total length of bridges required to connect all colonies, without violating the intersection constraint. # Sort the coordinates orpins.sort() dorphins.sort() # Calculate the total length of bridges required for Orpins orpin_bridge_length = sum(abs(orpins[i] - orpins[i + 1]) for i in range(no - 1)) # Calculate the total length of bridges required for Dorphins dorphin_bridge_length = sum(abs(dorphins[i] - dorphins[i + 1]) for i in range(nd - 1)) # Check for intersection constraints if min(orpins) < 0 < max(orpins) and min(dorphins) < 0 < max(dorphins): return -1 # Intersection occurs # Return the total length of the bridges return float(orpin_bridge_length + dorphin_bridge_length)"},{"question":"You are given a binary string S of length N. You need to determine the maximum length of a substring that contains an equal number of \'0\'s and \'1\'s. If there is no such substring, return -1. Input The first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the length of the binary string S. The second line contains the binary string S. Output For each test case, output a single line containing the answer for the corresponding test case. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 The length of S in each test case does not exceed 100000. Example Input: 2 6 010101 4 1111 Output: 6 -1 Explanation Case 1: The entire string \\"010101\\" contains 3 \'0\'s and 3 \'1\'s, so the maximum length is 6. Case 2: There are no substrings that contain an equal number of \'0\'s and \'1\'s, so the answer is -1.","solution":"def max_equal_01_substring_length(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] S = test_cases[t][1] max_length = -1 prefix_sum = {0: -1} # Initialize with 0 to handle edge case current_sum = 0 for i in range(N): if S[i] == \'0\': current_sum -= 1 else: current_sum += 1 if current_sum in prefix_sum: max_length = max(max_length, i - prefix_sum[current_sum]) else: prefix_sum[current_sum] = i results.append(max_length) return results"},{"question":"Jasmine loves string manipulations. She has a favorite operation where she selects any substring of a given string and replaces all occurrences of a chosen character with another character. However, she only enjoys this operation when the resultant string remains a palindrome. Your task is to help Jasmine by determining whether she can convert the given string into a palindrome with the allowed operation. Input format: T, the number of test cases. For each test case: - A string s (which can contain only lowercase English letters). Output format: For each test case, output `YES` if it\'s possible to convert the given string into a palindrome by replacing characters (zero or more times). Otherwise, output `NO`. SAMPLE INPUT 3 abcca aabcd bbccaa SAMPLE OUTPUT YES NO YES Explanation In test case 1: Jasmine can convert the given string \\"abcca\\" into \\"accaa\\" (or \\"acca\\"), which is a palindrome. In test case 2: It is not possible to make the string \\"aabcd\\" a palindrome by replacing characters. In test case 3: The given string \\"bbccaa\\" can be converted into a palindrome \\"abcbaa\\" or \\"bacbab\\". Note: - A palindrome is a string that reads the same backward as forward. - Jasmine\'s operation can be performed any number of times (including zero).","solution":"def can_convert_to_palindrome(s): Determine whether the given string can be converted to a palindrome. :param s: The input string consisting only of lowercase English letters. :return: \\"YES\\" if the string can be converted to a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(can_convert_to_palindrome(s)) return results"},{"question":"A software company called \\"ReplaceHub\\" is working on optimizing their file storage system. They have several servers with limited storage capacity and a set of files that need to be stored. Each file is characterized by two integers: si and vi — the size of the file in megabytes and the value (importance) of the file to the company, respectively. Each server has a certain storage capacity in megabytes. A file can be stored entirely on one server or not at all. You cannot split a file across multiple servers. Your task is: given the servers and the files, decide which files to store on which servers such that the total value of the stored files is maximized. Input The first line of the input contains integer n (1 ≤ n ≤ 1000) — the number of files. Then n lines follow. Each line contains two integers: si, vi (1 ≤ si, vi ≤ 1000) — the size of the file and its value to the company, respectively. The next line contains integer k (1 ≤ k ≤ 1000) — the number of servers in the company. The last line contains k space-separated integers: c1, c2, ..., ck (1 ≤ ci ≤ 1000) — the storage capacity of each server. Output In the first line print two integers: m, t — the number of stored files and the total value of these files, correspondingly. Then print m lines — each line must contain two space-separated integers: the number of the stored file and the number of the server where it is stored. The files and the servers are consecutively numbered starting from 1 in the order in which they are given in the input. If there are multiple optimal answers, print any of them. Examples Input 4 50 60 70 80 30 40 60 50 3 100 90 60 Output 3 180 1 1 2 2 4 3","solution":"def allocate_files_to_servers(n, files, k, capacities): files_sorted = sorted(enumerate(files), key=lambda x: -x[1][1]/x[1][0]) # Sort by value-to-size ratio servers = [(capacity, i) for i, capacity in enumerate(capacities)] servers.sort() stored_files = [] total_value = 0 for idx, (size, value) in files_sorted: for i in range(k): if servers[i][0] >= size: stored_files.append((idx + 1, servers[i][1] + 1)) servers[i] = (servers[i][0] - size, servers[i][1]) servers.sort() total_value += value break return len(stored_files), total_value, stored_files # Example usage: n = 4 files = [(50, 60), (70, 80), (30, 40), (60, 50)] k = 3 capacities = [100, 90, 60] print(allocate_files_to_servers(n, files, k, capacities))"},{"question":"You have N cities connected by M two-way roads. Each road connects two different cities. The travel time for each road is given. All cities are uniquely numbered from 1 to N. Your task is to help a traveler find the minimum travel time required to visit all cities starting from a given city using a specific travel algorithm. The travel algorithm is as follows: 1. Start at the given city. 2. Visit all other cities in such a way that each city (except the starting city) is visited exactly once. 3. Return to the starting city. Given these constraints, you need to determine the minimum travel time required to complete the trip, ensuring that all cities are visited exactly once and the traveler returns to the starting city. Input: - The first line contains two integers ( N ) (1 ≤ N ≤ 10) and ( M ) (1 ≤ M ≤ 45), the number of cities and the number of roads, respectively. - The next ( M ) lines each contain three integers ( u ), ( v ) (1 ≤ u, v ≤ N) and ( t ) (1 ≤ t ≤ 1000), representing a road between city ( u ) and city ( v ) with travel time ( t ). - The last line contains a single integer ( S ) (1 ≤ S ≤ N), the starting city. Output: Print a single integer, the minimum travel time required to visit all cities once and return to the starting city. If it\'s not possible to visit all cities, print -1. Example: Input: 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 1 Output: 80 Explanation: The cities and roads form a complete graph. The optimal path is 1 → 2 → 4 → 3 → 1 with a total travel time of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def find_min_travel_time(N, M, roads, S): # If only one city, no travel required. if N == 1: return 0 # Create a dictionary to store travel times between cities travel_time = {} for u, v, t in roads: if u not in travel_time: travel_time[u] = {} if v not in travel_time: travel_time[v] = {} travel_time[u][v] = t travel_time[v][u] = t # To store minimum travel time min_travel_time = float(\'inf\') # Generate all possible permutations of visiting cities (excluding the starting city) cities = [i for i in range(1, N+1) if i != S] for perm in itertools.permutations(cities): # Calculate total travel time of the current permutation current_time = 0 current_city = S for next_city in perm: if next_city in travel_time[current_city]: current_time += travel_time[current_city][next_city] current_city = next_city else: current_time = float(\'inf\') break # Add the return journey to the starting city if S in travel_time[current_city]: current_time += travel_time[current_city][S] else: current_time = float(\'inf\') # Update minimum travel time min_travel_time = min(min_travel_time, current_time) # If no valid path found, return -1 if min_travel_time == float(\'inf\'): return -1 return min_travel_time"},{"question":"As part of a mission to save the galaxy, you are given a unique task to identify a spaceship that is hidden among other identical spaceships. The only difference is that the hidden spaceship has a different registration code format. The registration codes follow a specific pattern: - Normal spaceships: Registration codes contain exactly four digits. - Hidden spaceship: Registration code contains exactly five digits. Your task is to find the hidden spaceship by identifying its registration code. Input The first line contains an integer n (3 ≤ n ≤ 20), representing the number of spaceships. Each of the following n lines contains a string s_i of length 4 or 5, representing the registration code of the spaceship. It is guaranteed that there is exactly one registration code with five digits among them. Output Print the registration code of the hidden spaceship. Examples Input 5 1234 5678 9012 34567 2345 Output 34567 Input 6 1111 2222 3333 44444 5555 6666 Output 44444 Note In both examples, the normal spaceships have registration codes with exactly four digits, while the hidden spaceship has a registration code with exactly five digits.","solution":"def find_hidden_spaceship(n, registration_codes): Returns the registration code of the hidden spaceship. Parameters: - n: int, the number of spaceships - registration_codes: list of str, the registration codes of the spaceships Returns: - str, the registration code of the hidden spaceship for code in registration_codes: if len(code) == 5: return code"},{"question":"Write a program that generates the list of prime numbers less than a given number N. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The task is to implement the Sieve of Eratosthenes algorithm, which is an efficient way to find all primes less than a given limit. Input The input contains a single integer N. Output Output a single line containing all prime numbers less than N in ascending order, each separated by a space. Constraints 1 ≤ N ≤ 10^6 SAMPLE INPUT 30 SAMPLE OUTPUT 2 3 5 7 11 13 17 19 23 29","solution":"def sieve_of_eratosthenes(n): Generates all prime numbers less than n using the Sieve of Eratosthenes algorithm. :param n: The upper limit (non-inclusive) to find prime numbers. :return: A list of all prime numbers less than n. if n <= 2: return [] primes = [True] * n primes[0] = primes[1] = False for start in range(2, int(n**0.5) + 1): if primes[start]: for multiple in range(start*start, n, start): primes[multiple] = False return [num for num, is_prime in enumerate(primes) if is_prime]"},{"question":"Petra is setting up a rectangular garden that has n rows and m columns of plots, each plot having a certain elevation. She wants to plant water-loving plants in some of the plots such that all planted plots form a continuous rectangular block where all plots have the same elevation to ensure water retention. Given the elevation matrix of the garden, determine the area of the largest possible rectangular block of plots that Petra can use to plant these water-loving plants. Input The first line of input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), the number of rows and columns in the garden respectively. Each of the next n lines contains m integers representing the elevation of each plot in the garden (1 ≤ elevation ≤ 100). Output Output a single integer, the area of the largest possible rectangular block of plots with the same elevation. Example Input 4 5 1 2 2 3 4 2 2 2 3 4 2 2 5 5 5 2 2 5 5 5 Output 6 Note In the sample input, the largest rectangular block of plots with the same elevation of 2 is from row 2 to row 3 and column 1 to column 3, having an area of 6 plots.","solution":"def largest_rectangular_block(n, m, elevation): def largest_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area elevations = {elevation[row][col] for row in range(n) for col in range(m)} max_area = 0 for elev in elevations: temp_matrix = [[1 if elevation[row][col] == elev else 0 for col in range(m)] for row in range(n)] height = [0] * m for row in range(n): for col in range(m): height[col] = height[col] + 1 if temp_matrix[row][col] == 1 else 0 max_area = max(max_area, largest_histogram_area(height)) return max_area"},{"question":"You are given an array of integers, and you must determine if any pair of distinct elements in the array sums up to a given target value. Constraints: * The array may contain positive and negative integers. * The array length will be between 1 and 10^4. * Each integer in the array will be between -10^6 and 10^6. * The target value will be between -2*10^6 and 2*10^6. Input: The input is given from Standard Input in the following format: The first line contains an integer n, representing the number of elements in the array. The second line contains n integers representing the elements of the array. The third line contains an integer, the target value. Output: Print \\"YES\\" if there exists at least one pair of distinct elements in the array whose sum is equal to the target value. Otherwise, print \\"NO\\". Examples Input: 5 1 2 3 4 5 9 Output: YES Input: 3 1 2 3 7 Output: NO","solution":"def find_pair_with_sum(arr, target): Determines if there exist any pair of distinct elements in the array that sum up to the target value. Args: arr (list of int): The array of integers. target (int): The target sum value. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if (target - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"The world-renowned botanist, Dr. Flora, has been researching the growth patterns of mysterious plants in the Enchanted Forest. She discovered that each plant\'s growth can be represented by a string of digits, where each digit denotes a certain type of growth pattern observed over consecutive days. Dr. Flora wants to analyze the string to find specific patterns that can help her understand the plant\'s growth better. Specifically, she is interested in finding the longest subsequence of the string such that every digit in the subsequence is alternated between an even and an odd digit. For instance, in the string \\"123456\\", the subsequences \\"12\\", \\"14\\", \\"24\\", \\"26\\", etc., are valid because they alternate between even and odd digits. A subsequence is a sequence derived by deleting some or no elements from the original sequence without changing the order of the remaining elements. Write a program that takes a string of digits and returns the length of the longest subsequence with alternating even and odd digits. Input: - The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), where each character of s is a digit (\'0\' to \'9\'). Output: - Output a single integer, the length of the longest subsequence of s with alternating even and odd digits. Examples: Input: 123456 Output: 6 Input: 121212 Output: 6 Input: 444555 Output: 2 Explanation of Examples: - In the first example, the whole string \\"123456\\" is already alternating in even and odd digits, hence the output is 6. - In the second example, the string \\"121212\\" is alternating, and the length of the subsequence is 6. - In the third example, the string \\"444555\\" does not have much alternation and the longest subsequences that can be formed are \\"45\\" or \\"54\\", which both have length 2.","solution":"def longest_alternating_subsequence(s): Returns the length of the longest subsequence with alternating even and odd digits. if not s: return 0 # Initialize counters max_length = 1 current_length = 1 # Check the parity of the first character previous_digit_is_even = int(s[0]) % 2 == 0 for i in range(1, len(s)): current_digit_is_even = int(s[i]) % 2 == 0 if current_digit_is_even != previous_digit_is_even: current_length += 1 max_length = max(max_length, current_length) previous_digit_is_even = current_digit_is_even else: current_length = 1 previous_digit_is_even = current_digit_is_even return max_length"},{"question":"Samantha is an avid hiker and loves to explore the wilderness. She uses a map with a grid layout. The grid consists of both passable and impassable terrain. Samantha can move up (north), down (south), left (west), and right (east) but cannot move diagonally. She wants to find out the length of the shortest path from her starting point to a specific destination point, if a path exists. Input The first line of input contains an integer n (1 ≤ n ≤ 100) representing the size of the n x n grid. Each of the following n lines contains n characters: \'.\' for passable terrain and \'#\' for impassable terrain. The next line contains two integers, sx and sy (1 ≤ sx, sy ≤ n), representing Samantha\'s starting coordinates on the grid. The following line contains two integers, ex and ey (1 ≤ ex, ey ≤ n), representing Samantha\'s destination coordinates on the grid. Both the starting point and the destination point will always be passable terrain (\'.\'). Output Output the length of the shortest path from Samantha\'s starting point to her destination. If no path exists, output -1. Examples Input 5 ..#.. .#. ....# ... .#... 1 1 5 5 Output 8 Input 3 ..# # #.. 1 1 3 3 Output -1","solution":"from collections import deque def shortest_path(grid, n, start, end): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] sx, sy = start[0] - 1, start[1] - 1 ex, ey = end[0] - 1, end[1] - 1 queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (ex, ey): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Problem statement You are organizing a coding contest where each participant is assigned a difficulty level. There are n participants, and each participant is assigned a difficulty level from 1 to 4000. You want to divide the participants into two groups so that: 1. The difficulty levels in each group form contiguous ranges (i.e., for any two participants x and y in a group, any difficulty level between the difficulty levels of x and y should also be assigned to some participant in the same group). 2. The largest difference in difficulty levels within each group is minimized. Your task is to determine the minimum possible value of the largest difference in difficulty levels for the two groups. # Constraint * 2 leq n leq 100000 * 1 leq difficulty level of each participant leq 4000 # Input The input is given from standard input in the following format: ``` n d_1 d_2 d_3 ... d_n ``` # Output Output the minimum possible value of the largest difference in difficulty levels for the two groups. # Input example 1 ``` 6 1 3 2 6 4 5 ``` # Output example 1 ``` 1 ``` # Explanation By dividing the participants so that the first group contains the difficulty levels [1, 2, 3] and the second group contains the difficulty levels [4, 5, 6], both groups have the largest difference of 2, resulting in the possible smallest value of 1 for the largest difference within each group.","solution":"def min_largest_diff(n, difficulties): # Sort the difficulties difficulties.sort() # To find the minimum possible value of the largest difference, we need to find # the smallest difference between consecutive elements in the sorted list. min_diff = float(\\"inf\\") for i in range(1, n): diff = difficulties[i] - difficulties[i-1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Problem Emily loves cryptography and has recently discovered a cipher system. This system takes a string S and a specific step size K . The cipher transforms the string according to the given step size by rotating the characters within the string. Your task is to help Emily decode a given encoded string. The process of decoding the string involves rotating it to the right by K characters. This means that the last K characters of the string move to the front, followed by the remaining characters from the left. For example, if S is \\"abcdef\\" and K is 2 , then the string becomes \\"efabcd\\". Write a function to decode the encoded string based on the given step size K . Constraints The input satisfies the following conditions: * The string S consists of lowercase English letters. * 1 le |S| le 10^5 (length of the string) * 1 le K le 10^9 Input The input is given in the following format: S K The first line contains the encoded string S . The second line contains the integer K representing the step size for decoding the string. Output Output the decoded string. Examples Input abcdef 2 Output efabcd Input hello 1 Output ohell","solution":"def decode_string(S, K): Decodes the string S by rotating it to the right by K characters. Parameters: S (str): The encoded string consisting of lowercase English letters. K (int): The step size for decoding the string. Returns: str: The decoded string. n = len(S) K = K % n # Reduce K to a manageable size return S[-K:] + S[:-K]"},{"question":"We have an N x N matrix that contains only the integers 0 and 1. The matrix is considered \\"interesting\\" if it satisfies the following properties: 1. Any row of the matrix contains at most two 1s. 2. Any column of the matrix contains at most two 1s. 3. The sum of elements on the main diagonal and the anti-diagonal does not exceed three. Given an initial matrix, your task is to transform this matrix into an \\"interesting\\" matrix by flipping the minimum number of 1s to 0s. Each flip operation changes the value of a single cell from 1 to 0. Write an algorithm to find and print the minimum number of 1s that need to be flipped to make the matrix \\"interesting.\\" # Input The first line contains an integer N (1 ≤ N ≤ 1000), the size of the matrix. The next N lines each contain N integers (either 0 or 1), representing the matrix. # Output Print a single integer, the minimum number of flips required. # Example Input ``` 4 1 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 ``` Output ``` 2 ``` Explanation In the given example, one possible way to achieve the \\"interesting\\" matrix is: ``` 1 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 ``` Here, we\'ve flipped the 1s at positions (3, 1) and (3, 2). Another way to fulfill the conditions might also be possible, but the minimum number of flips needed remains 2.","solution":"def min_flips_to_interesting(matrix, N): def count_1s(arr): return arr.count(1) # Step 1: Handle rows and cols constraints (at most 2 ones) flips = 0 # Row constraints for i in range(N): count = count_1s(matrix[i]) if count > 2: flips += count - 2 row = matrix[i] one_positions = [index for index, value in enumerate(row) if value == 1] for idx in one_positions[2:]: matrix[i][idx] = 0 # Transpose to handle column constraints similarly transposed = list(zip(*matrix)) for j in range(N): count = count_1s(list(transposed[j])) if count > 2: flips += count - 2 col = list(transposed[j]) one_positions = [index for index, value in enumerate(col) if value == 1] for idx in one_positions[2:]: matrix[idx][j] = 0 # Step 2: Handle diagonal and anti-diagonal constraints main_diag_count = sum(matrix[i][i] for i in range(N)) anti_diag_count = sum(matrix[i][N-i-1] for i in range(N)) if main_diag_count + anti_diag_count > 3: excess = (main_diag_count + anti_diag_count) - 3 i = 0 while excess > 0 and i < N: if matrix[i][i] == 1: matrix[i][i] = 0 flips += 1 excess -= 1 elif matrix[i][N-i-1] == 1: matrix[i][N-i-1] = 0 flips += 1 excess -= 1 i += 1 return flips def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) matrix = [] index = 1 for i in range(N): row = list(map(int, data[index:index+N])) matrix.append(row) index += N return N, matrix # Wrapper function to read input and print output def main(): N, matrix = read_input() result = min_flips_to_interesting(matrix, N) print(result)"},{"question":"A robot moves on a 2D plane starting from the origin (0, 0). The robot can move in four possible directions: \'L\' for left, \'R\' for right, \'U\' for up, and \'D\' for down. Each move is represented by a character in the string `moves`. Determine if the robot returns to the origin after it finishes all its moves. Constraints: - 1 ≤ |moves| ≤ 100 - `moves` consists of the characters \'L\', \'R\', \'U\', and \'D\' only. Input: Input is given from Standard Input in the following format: ``` moves ``` Output: Output `Yes` if the robot returns to the origin, otherwise output `No`. Examples: Input: ``` UD ``` Output: ``` Yes ``` Input: ``` LL ``` Output: ``` No ``` Input: ``` LRUD ``` Output: ``` Yes ``` Input: ``` RU ``` Output: ``` No ``` Input: ``` LDRU ``` Output: ``` Yes ```","solution":"def is_robot_return_to_origin(moves): Determines if the robot returns to the origin (0, 0) after executing all moves. Parameters: moves (str): A string containing the moves (\'L\', \'R\', \'U\', \'D\') Returns: str: \'Yes\' if the robot returns to the origin, otherwise \'No\' x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \'Yes\' if x == 0 and y == 0 else \'No\'"},{"question":"Alice is training for a marathon and runs a fixed route every day. The route consists of \'n\' segments, and she records her speed in each segment. Her coach wants to analyze her performance, so he needs the maximum difference in speed between any two consecutive days for every segment. Input The input consists of: 1. A positive integer \'n,\' denoting the number of segments in the route. 2. A positive integer \'m,\' denoting the number of days Alice has been training. 3. m lines, each containing \'n\' integers representing Alice\'s recorded speeds for each segment on that day. Output Output \'n\' integers, where the i-th integer is the maximum difference in speed for segment i between any two consecutive days. Constraints 1 ≤ n ≤ 1000 2 ≤ m ≤ 1000 1 ≤ speed ≤ 100 SAMPLE INPUT 3 4 5 3 2 4 1 6 8 2 5 7 3 4 SAMPLE OUTPUT 4 2 4 Explanation In the sample case, for segment 1, the speeds over the days are [5, 4, 8, 7]. The maximum difference is between day 2 and day 3, which is |8-4| = 4. For segment 2, the speeds are [3, 1, 2, 3]. The maximum difference is between day 1 and day 2, which is |3-1| = 2. For segment 3, the speeds are [2, 6, 5, 4]. The maximum difference is between day 1 and day 2 or day 2 and day 3, which is |6-2| = 4.","solution":"def max_diff_in_speeds(n, m, speeds): max_diffs = [0] * n for i in range(n): max_diff = 0 for j in range(1, m): diff = abs(speeds[j][i] - speeds[j-1][i]) if diff > max_diff: max_diff = diff max_diffs[i] = max_diff return max_diffs"},{"question":"Alice is organizing a series of dance events and wants to ensure each event has a unique mix of performances. To prepare for the events, she needs to know in how many ways she can arrange her collection of dance routines, given some must-follow constraints. Each dance routine has a unique identifier, and Alice can specify constraints indicating that one routine must precede another in the schedule. Given these constraints, your task is to find the number of valid ways to arrange the routines in the schedule. Input The input consists of a series of datasets, each of which is formatted as follows: ``` N M A1 B1 A2 B2 ... AM BM ``` The first line contains two integers, N (the number of dance routines) and M (the number of constraints). Each of the next M lines contains two integers Ai and Bi, indicating that routine Ai must precede routine Bi in the schedule. Please assume all of the following: 1 ≤ N ≤ 100, 0 ≤ M ≤ 200. The input is terminated by a line that contains two zeros. This is not part of any dataset and should not be processed. Output For each dataset, output a single line containing the number of valid ways to arrange the routines. If no valid arrangement exists, output 0. Example Input ``` 3 2 1 2 2 3 4 0 0 0 ``` Output ``` 1 24 ``` In the first dataset, there is only one valid arrangement: 1, 2, 3. In the second dataset, there are no constraints, so all permutations of 4 routines are valid, resulting in 4! = 24 valid ways.","solution":"from itertools import permutations def valid_schedule_count(N, M, constraints): Return the number of valid ways to arrange the routines given the precedence constraints. if N == 0: return 1 def is_valid(perm): indices = {value: idx for idx, value in enumerate(perm)} for a, b in constraints: if indices[a] > indices[b]: return False return True # Create all permutations of routines all_permutations = permutations(range(1, N + 1)) valid_permutations = [perm for perm in all_permutations if is_valid(perm)] return len(valid_permutations) def parse_input(data): Parse the input data and return the results for each dataset. lines = data.strip().split(\'n\') results = [] i = 0 while i < len(lines): N, M = map(int, lines[i].split()) if N == 0 and M == 0: break i += 1 constraints = [] for _ in range(M): A, B = map(int, lines[i].split()) constraints.append((A, B)) i += 1 results.append(valid_schedule_count(N, M, constraints)) return results"},{"question":"You are given a positive integer n, and you need to form a matrix of size n x n. The matrix should contain the number 1 exactly n times and the number 0 for the remaining cells such that: 1. Each row contains at least one \'1\'. 2. Each column contains at least one \'1\'. Construct such a matrix and output it. Input: The first line contains the integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines contain a single integer n (1 ≤ n ≤ 100) for each test case. Output: For each test case, output the n x n matrix in the following format: - Each row should be printed on a new line. - Separate elements in the same row by spaces. Example: Input: 3 1 3 4 Output: 1 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 Explanation: For n = 1, the only possible matrix is: 1 For n = 3, one of the possible matrices is: 1 0 0 0 1 0 0 0 1 For n = 4, one of the possible matrices is: 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1","solution":"def generate_matrix(n): Generates an n x n matrix with \'1\'s exactly n times and \'0\'s elsewhere such that each row and column contains at least one \'1\'. matrix = [[0] * n for _ in range(n)] for i in range(n): matrix[i][i] = 1 return matrix"},{"question":"You are given an array of integers, each representing the height of a square pillar of width 1. Your goal is to fill water between the pillars and calculate the total amount of water that can be trapped. Rules: * Water is trapped between the pillars and their heights dictate the containment capacity. * Water trapped at a specific point depends on the height of the tallest pillar to the left and the tallest pillar to the right of that point. Find the total amount of trapped water. Constraints * All values in input are integers. * 1 leq n leq 10^4 * 0 leq height[i] leq 10^5 Input The input is given from Standard Input in the following format: n height_1 height_2 ldots height_n Output Print the total amount of trapped water. Examples Input 12 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 5 4 2 0 3 2 Output 4 Input 3 3 0 2 Output 2 Input 6 4 1 0 1 3 2 Output 7","solution":"def trap(height): Calculate the amount of trapped water given the heights of the pillars. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"Chandu loves solving puzzles, and this time he is intrigued by a circular track problem. He is given a circular track with N checkpoints labeled from 0 to N-1 in a clockwise direction. At the start, he is positioned at checkpoint 0. He can move either clockwise or counterclockwise to reach his target checkpoint. Chandu wants to know the minimum distance he needs to travel to reach a given checkpoint X (0 ≤ X < N) starting from checkpoint 0. The distance between any two adjacent checkpoints is 1 unit. Write a program to determine the minimum distance Chandu needs to travel to reach checkpoint X from checkpoint 0. Input: The first line contains an integer N, which represents the total number of checkpoints. The second line contains an integer X, which is the target checkpoint Chandu needs to reach. Output: Print the minimum distance Chandu needs to travel to reach checkpoint X starting from checkpoint 0. Constraints: 2 ≤ N ≤ 10^9 0 ≤ X < N SAMPLE INPUT 10 3 SAMPLE OUTPUT 3 Explanation From checkpoint 0, Chandu can either move 3 units directly clockwise to reach checkpoint 3, which is the minimum distance. If the target checkpoint X had been 8, moving counterclockwise (2 units) would have been shorter than moving clockwise (8 units).","solution":"def min_distance_to_checkpoint(N, X): Returns the minimum distance from checkpoint 0 to checkpoint X on a circular track with N checkpoints. # Calculate clockwise distance clockwise_dist = X # Calculate counterclockwise distance counterclockwise_dist = N - X # The minimum distance will be the lesser of the two distances return min(clockwise_dist, counterclockwise_dist) # Example usage: # N = 10 # X = 3 # Output = 3 print(min_distance_to_checkpoint(10, 3)) # Sample Output 3"},{"question":"You are given an array of integers, and you need to find the maximum sum of a subarray with the constraint that the subarray consists of strictly increasing elements. A subarray is a contiguous part of an array. Input: - The first line contains an integer n (1 ≤ n ≤ 10^6), the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output: - Output a single integer, the maximum sum of a subarray with strictly increasing elements. Examples Input: 5 1 2 3 4 5 Output: 15 Input: 6 5 1 2 3 1 2 Output: 6 Explanation: In the first example, the entire array constitutes a single subarray of strictly increasing elements, and the sum is 15. In the second example, the subarray with the maximum sum of strictly increasing elements is [1, 2, 3], and its sum is 6.","solution":"def max_sum_increasing_subarray(arr): Returns the maximum sum of a subarray with strictly increasing elements. Parameters: arr (list): List of integers. Returns: int: Maximum sum of a subarray with strictly increasing elements. if not arr: return 0 max_sum = current_sum = arr[0] for i in range(1, len(arr)): if arr[i] > arr[i-1]: current_sum += arr[i] else: current_sum = arr[i] max_sum = max(max_sum, current_sum) return max_sum # Example usage: # arr = [5, 1, 2, 3, 1, 2] # print(max_sum_increasing_subarray(arr)) # Output: 6"},{"question":"A group of archaeologists has discovered an ancient number puzzle engraved on a stone tablet. The puzzle consists of a number sequence represented in a peculiar way. The tablet contains a sequence of digits, and the puzzle is to find the smallest possible numeric sequence of a given length that can be formed by removing some of the digits from this sequence. The archaeologists have asked for your help to solve the puzzle using a computer program. Given a string of digits `s` and an integer `k`, your task is to remove `k` digits from the string `s` to form the smallest possible numeric sequence. The resulting sequence should not contain any leading zeros, except if the sequence is \\"0\\". Write a function `find_smallest_sequence(s: str, k: int) -> str` that takes a string `s` representing the digits and an integer `k` representing the number of digits to remove, and returns the smallest possible numeric sequence as a string. # Input - A string `s` representing the digits (1 ≤ len(s) ≤ 10^5). - An integer `k` (0 ≤ k < len(s)) representing the number of digits to remove. # Output - A string representing the smallest possible numeric sequence formed by removing `k` digits from `s`. # Example Input ``` s = \\"1432219\\" k = 3 ``` Output ``` \\"1219\\" ``` Input ``` s = \\"10200\\" k = 1 ``` Output ``` \\"200\\" ``` Input ``` s = \\"10\\" k = 1 ``` Output ``` \\"0\\" ``` # Note - In the first sample, removing the three digits \\"4\\", \\"3\\", and \\"2\\" from \\"1432219\\" results in the smallest sequence \\"1219\\". - In the second sample, removing the digit \\"1\\" from \\"10200\\" results in the sequence \\"0200\\", which after removing the leading zero becomes \\"200\\". - In the third sample, removing one digit \\"1\\" from \\"10\\" results in the sequence \\"0\\".","solution":"def find_smallest_sequence(s: str, k: int) -> str: stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If we still need to remove more digits stack = stack[:len(stack) - k] # Remove leading zeros and convert to string result = \'\'.join(stack).lstrip(\'0\') # If result is empty, return \'0\' return result if result else \'0\'"},{"question":"You are given a sequence of integers. You need to perform a series of operations on this sequence, where an operation consists of choosing a subsequence of the sequence and replacing each element in the subsequence with the median of that subsequence. The median of a sequence is the middle element when the sequence is sorted (if the length is odd), or the average of the two middle elements (if the length is even). Your task is to determine the minimum number of operations required to make the entire sequence consist of the same element. Constraints * 1 ≤ length of sequence ≤ 100,000 * Each element in the sequence is an integer between -10^9 and 10^9 Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print a single integer - the minimum number of operations required. Examples Input 5 3 3 3 3 3 Output 0 Input 4 1 2 3 4 Output 2 Input 6 4 4 4 3 4 4 Output 1 Explanation of Examples In the first example, all elements are already the same, so no operations are needed. In the second example, one possible sequence of operations is: 1. Choose the entire sequence [1, 2, 3, 4]. The median is (2+3)/2 = 2.5. Thus, after this operation, the sequence becomes [2.5, 2.5, 2.5, 2.5]. 2. Choose the entire sequence again. The median is 2.5. Thus, the sequence remains [2.5, 2.5, 2.5, 2.5]. In the third example, choosing the subsequence from the second to the fifth element [4, 3, 4, 4] yields the median 4. Thus, after this operation, the sequence becomes [4, 4, 4, 4, 4, 4]. Notes * The subsequence chosen for median replacement in an operation does not need to be contiguous. * The input format consists of an integer N which is the length of the sequence, followed by N integers which represent the sequence itself.","solution":"def min_operations_to_uniform_sequence(n, sequence): Determines the minimum number of operations required to make the entire sequence consist of the same element using the described median replacement process. Parameters: n (int): Length of the sequence sequence (list): List of integers representing the sequence Returns: int: Minimum number of operations required from collections import Counter count = Counter(sequence) most_common_count = max(count.values()) return n - most_common_count"},{"question":"John is a city planner designing a new downtown area. He received a list of segments, where each segment represents a street. Each street can be defined by two endpoints in a 2-dimensional Cartesian coordinate system. John needs to ensure that there are no intersections between any two streets (segments) as he finalizes the plans. Two streets intersect if they share more than just the endpoints. Write a program to help John determine whether any two of the provided streets intersect. # Input The first line of the input contains a single integer `n` (2 ≤ n ≤ 100) — the number of streets. Each of the next `n` lines contains four integers `x1`, `y1`, `x2`, `y2` (-1000 ≤ x1, y1, x2, y2 ≤ 1000), representing the endpoints of each street. # Output Output \\"YES\\" if there are any intersections between the streets; otherwise, output \\"NO\\". # Examples Input ``` 3 0 0 3 3 1 1 2 2 0 3 3 0 ``` Output ``` YES ``` Input ``` 2 0 0 3 3 4 4 6 6 ``` Output ``` NO ``` # Notes To determine if two line segments intersect, you can use orientation and the general properties of geometric line segments. The segments should be checked in pairs to ensure no unwanted intersections.","solution":"def orientation(p, q, r): To find the orientation of the ordered triplet (p, q, r). The function returns: 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 return 1 if val > 0 else 2 def on_segment(p, q, r): Given three collinear points p, q, r, the function checks if point q lies on line segment \'pr\' if (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1])): return True return False def do_intersect(p1, q1, p2, q2): The function that returns true if the line segment \'p1q1\' and \'p2q2\' intersect. # Find the four orientations needed for general and special cases o1 = orientation(p1, q1, p2) o2 = orientation(p1, q1, q2) o3 = orientation(p2, q2, p1) o4 = orientation(p2, q2, q1) # General case if o1 != o2 and o3 != o4: return True # Special Cases # p1, q1 and p2 are collinear and p2 lies on segment p1q1 if o1 == 0 and on_segment(p1, p2, q1): return True # p1, q1 and q2 are collinear and q2 lies on segment p1q1 if o2 == 0 and on_segment(p1, q2, q1): return True # p2, q2 and p1 are collinear and p1 lies on segment p2q2 if o3 == 0 and on_segment(p2, p1, q2): return True # p2, q2 and q1 are collinear and q1 lies on segment p2q2 if o4 == 0 and on_segment(p2, q1, q2): return True # Doesn\'t fall in any of the above cases return False def are_intersections(n, segments): for i in range(n): for j in range(i + 1, n): p1, q1, p2, q2 = segments[i][:2], segments[i][2:], segments[j][:2], segments[j][2:] if do_intersect(p1, q1, p2, q2): return \\"YES\\" return \\"NO\\""},{"question":"Alice has recently started working at a software company, and her first task is to refactor a set of functions such that each function is used only once throughout the codebase. The functions are specially designed to process strings but might also process substrings incorrectly if they overlap. To help Alice, you need to determine which functions are safe to refactor based on the condition that no two functions share overlapping positions within the strings they process. You are given several strings and a list of functions that provide the positions within the strings they are applied to. Each function is represented by a start and end index. Your task is to determine if it is possible to apply these functions without overlaps. Input The first line contains an integer N, representing the number of strings (1 ≤ N ≤ 10). The next N lines provide a list of functions for each string. Each line starts with an integer F, the number of functions for that string (1 ≤ F ≤ 1000), followed by F pairs of integers, where each pair (start, end) represents the start and end indices of a function (0 ≤ start ≤ end < length of the corresponding string). Output For each string, output \\"Safe\\" if it is possible to apply all functions without overlapping. Otherwise, output \\"Unsafe\\". Examples Input 2 3 0 2 3 5 1 4 2 0 3 2 5 Output Safe Unsafe Input 1 4 0 1 2 3 4 5 0 5 Output Unsafe Note In the first sample, the first string has three functions with ranges [0, 2], [3, 5], and [1, 4]. Since there is overlap between the ranges [0, 2] and [1, 4], it is \\"Unsafe\\". For the second string, the functions have ranges [0, 3] and [2, 5], which also overlap, making it \\"Unsafe\\". In the second input sample, the functions of the single string have ranges [0, 1], [2, 3], [4, 5], and [0, 5]. The full string range [0, 5] overlaps with all other ranges, making it \\"Unsafe\\".","solution":"def check_safety(N, functions): results = [] for i in range(N): F, ranges = functions[i][0], functions[i][1:] intervals = [(ranges[j], ranges[j+1]) for j in range(0, len(ranges), 2)] # Sort intervals based on starting index intervals.sort() safe = True for j in range(1, F): if intervals[j][0] <= intervals[j-1][1]: safe = False break if safe: results.append(\\"Safe\\") else: results.append(\\"Unsafe\\") return results if __name__ == \\"__main__\\": # Reading input for demonstration (disable during pytest runs) import sys input = sys.stdin.read data = input().split() N = int(data[0]) functions = [] idx = 1 for _ in range(N): F = int(data[idx]) function_data = list(map(int, data[idx:idx + 2 * F + 1])) functions.append(function_data) idx += 2 * F + 1 results = check_safety(N, functions) for result in results: print(result)"},{"question":"A company needs to distribute a set of n tasks between two teams such that the load is balanced in terms of task complexity. Each task has a given complexity rating represented by a positive integer. Given the list of n task complexities, you need to determine if it is possible to split these tasks into two non-empty subsets with equal sum. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The first line of the input contains a single integer n (1 ≤ n ≤ 30) — the number of tasks. The second line contains n positive integers t1, t2, ..., tn (1 ≤ ti ≤ 100), where ti is the complexity of the i-th task. Output Print \\"YES\\" if it is possible to split the tasks into two subsets with equal sum, otherwise print \\"NO\\". Examples Input 5 1 5 11 5 Output YES Input 4 1 2 3 5 Output NO","solution":"def can_partition(tasks): Determine if it is possible to partition tasks into two subsets with equal sum. total_sum = sum(tasks) # If the total sum is odd, it\'s not possible to split it into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 # Initiate a boolean DP array of size (target + 1) dp = [False] * (target + 1) dp[0] = True # There\'s always a way to make sum 0 by taking no elements for task in tasks: for j in range(target, task - 1, -1): dp[j] = dp[j] or dp[j - task] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a string s of length n, consisting of lowercase Latin letters. You need to determine the number of unique substrings of s of all possible lengths from 1 to n. A substring is defined as a contiguous sequence of characters within a string. For example, the string \\"abc\\" has the following substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Your task is to write a program that calculates and prints the total number of unique substrings for the given string s. Input The first line contains an integer q (1 ≤ q ≤ 100) — the number of test cases. Each test case consists of a single line containing the string s (1 ≤ |s| ≤ 100). The total length of all strings in the input does not exceed 10000. Output For each test case, print the total number of unique substrings of the given string s. Example Input 3 abc aaa abcd Output 6 3 10 Explanation For the first test case, the unique substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Thus, the answer is 6. For the second test case, the unique substrings of \\"aaa\\" are: \\"a\\", \\"aa\\", \\"aaa\\". Thus, the answer is 3. For the third test case, the unique substrings of \\"abcd\\" are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". Thus, the answer is 10.","solution":"def count_unique_substrings(test_cases): For each string in the list of test cases, calculate the number of unique substrings. def unique_substrings(s): n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) results = [] for s in test_cases: results.append(unique_substrings(s)) return results"},{"question":"You are given an array of integers where some elements appear twice and others appear once. All the integers in the array are positive and do not exceed the length of the array. Your task is to find the elements that appear only once and return them in a list. Make sure your algorithm runs in linear time and uses constant space beyond the input and output lists. Input The first line of input contains a single integer T, which represents the number of test cases. Each test case consists of two lines; the first line contains an integer N, representing the length of the array, and the second line contains N integers separated by spaces. Output For each test case, output a single line of integers representing elements that appear only once, separated by spaces. If no such elements exist, output an empty line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ nums[i] ≤ N Sample Input: 3 5 4 3 2 7 8 2 3 1 10 1 2 3 4 5 6 7 8 9 10 6 1 1 2 2 3 3 Output: 4 7 8 1 1 2 3 4 5 6 7 8 9 10","solution":"def find_elements_appear_once(arr): Takes an array of integers where some elements appear twice and others appear once. Returns a list of elements that appear only once. # Create a frequency dictionary frequency = {} # Fill the frequency dictionary with the occurrence of each element for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Collect elements that appear only once result = [num for num in frequency if frequency[num] == 1] return result def process_test_cases(t, test_cases): Processes multiple test cases. results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = find_elements_appear_once(arr) results.append(result) return results"},{"question":"Given an undirected graph with `n` nodes and `m` edges, determine the minimum number of edges to be added such that every node in the graph has at least one connection (i.e., no node is isolated). Your task is to analyze the given graph and compute the minimum number of edges needed to ensure that there are no isolated nodes. An isolated node is a node with degree 0 (i.e., no edges connected to it). Input The first line contains two space-separated integers `n` and `m` (1 ≤ n ≤ 100 000, 0 ≤ m ≤ 100 000) representing the number of nodes and edges, respectively. The following `m` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v), denoting an edge between nodes `u` and `v`. Output Print a single integer, the minimum number of edges that need to be added to ensure that every node in the graph is connected to at least one other node. Examples Input 5 3 1 2 2 3 3 4 Output 1 Input 4 0 Output 4 Input 6 2 1 2 3 4 Output 2 Note In the first sample, node 5 is isolated. Adding an edge between node 5 and any other node will ensure there are no isolated nodes. In the second sample, all nodes are isolated, so we need to add 4 edges to connect each node with at least one other node. In the third sample, nodes 5 and 6 are isolated. Adding edges such as (5, 1) and (6, 3), will ensure there are no isolated nodes.","solution":"def min_edges_to_add(n, m, edges): Returns the minimum number of edges to be added to ensure every node has at least one connection. Parameters: - n (int): Number of nodes. - m (int): Number of edges. - edges (list of tuples): List of edges where each edge is represented as a tuple (u, v). Returns: - int: Minimum number of additional edges required. # Create a set to store nodes that appear in the edges connected_nodes = set() for u, v in edges: connected_nodes.add(u) connected_nodes.add(v) # Count the number of isolated nodes isolated_nodes = n - len(connected_nodes) return isolated_nodes"},{"question":"A logistics company wants to optimize their delivery process by efficiently assigning packages to their fleet of trucks. Each truck has a maximum weight capacity, and each package has a specific weight. The goal is to determine the maximum number of packages that can be delivered in a single trip without exceeding the weight capacities of the trucks. Each truck can only carry one package at a time, but the packages can be distributed across multiple trucks. Input The first line of the input contains two integers n and k (1 ≤ n, k ≤ 100,000), where n is the number of packages and k is the number of trucks. The second line contains n space-separated integers weights[i] (1 ≤ weights[i] ≤ 10^9), representing the weights of the packages. The third line contains k space-separated integers capacities[j] (1 ≤ capacities[j] ≤ 10^9), representing the weight capacities of the trucks. Output Print the maximum number of packages that can be delivered in a single trip without exceeding the capacities of the trucks. Examples Input 5 3 2 5 7 1 3 8 6 4 Output 3 Input 4 2 10 15 20 5 25 15 Output 2 Note In the first example, the optimal approach is to assign the 5 weight package to a truck with 6 capacity, the 2 weight package to a truck with 4 capacity, and the 3 weight package to the truck with 8 capacity. This results in 3 packages being delivered. In the second example, the 20 weight package can be assigned to the truck with 25 capacity and the 10 weight package to the truck with 15 capacity. Hence, 2 packages can be delivered.","solution":"def max_deliverable_packages(n, k, weights, capacities): This function takes the number of packages (n), the number of trucks (k), a list of package weights, and a list of truck capacities, and returns the maximum number of packages that can be delivered in a single trip without exceeding the weight capacities of the trucks. weights.sort() capacities.sort() i = j = delivered_packages = 0 while i < n and j < k: if weights[i] <= capacities[j]: delivered_packages += 1 i += 1 j += 1 return delivered_packages"},{"question":"ACME Inc. is implementing a new authentication system. The system needs to validate passwords according to specific criteria to ensure security. Your task is to write a function that checks if a given password meets all the following requirements: 1. The password length must be at least 8 characters. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set [@, #, , %, &, *]. Given a password, determine if it satisfies all the criteria. Input The input is a single string s, where 1 ≤ length(s) ≤ 1000. Output Print \\"VALID\\" if the password fulfills all the requirements. Otherwise, print \\"INVALID\\". Examples Input \\"Password123@\\" Output VALID Input \\"password123@\\" Output INVALID Note In the second example, the password lacks an uppercase letter and therefore is considered invalid.","solution":"def validate_password(password): Checks if the given password meets the specified security criteria: 1. At least 8 characters long. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set [@, #, , %, &, *]. Parameters: - password (str): The password to validate. Returns: - str: \\"VALID\\" if the password meets all criteria, otherwise \\"INVALID\\". if len(password) < 8: return \\"INVALID\\" has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \'@#%&*\' for c in password) if has_upper and has_lower and has_digit and has_special: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"You\'ve been given an integer array of size n representing the grades of students in a class. Your task is to process q queries of two types: 1. `U x y` — Update the grade of the student at index x to y. 2. `Q a b` — Obtain the average grade of the students from index a to index b (inclusive). You can assume all indices are 1-based. When calculating the average, round the result down to the nearest integer. Input The first line of the input contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of students in the class and the number of queries, respectively. The second line contains n integers representing the initial grades of the students. Each of the next q lines contains a query in one of the two formats mentioned above. Output For each query of type `Q`, print the corresponding average grade on a new line. Examples Input 5 5 50 60 70 80 90 Q 1 3 U 3 75 Q 1 3 U 5 85 Q 2 5 Output 60 61 75 Note Consider the given example: Initial grades: [50, 60, 70, 80, 90] 1. For the query `Q 1 3`, the grades in the range are [50, 60, 70]. The average is (50 + 60 + 70)//3 = 60. 2. The query `U 3 75` updates the grade at index 3 to 75. Now the grades are [50, 60, 75, 80, 90]. 3. For the query `Q 1 3` after the update, the grades in the range are [50, 60, 75]. The average is (50 + 60 + 75)//3 = 61. 4. The query `U 5 85` updates the grade at index 5 to 85. Now the grades are [50, 60, 75, 80, 85]. 5. For the query `Q 2 5` after the update, the grades in the range are [60, 75, 80, 85]. The average is (60 + 75 + 80 + 85)//4 = 75.","solution":"def process_queries(n, q, grades, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'Q\': a = int(parts[1]) - 1 b = int(parts[2]) - 1 average = sum(grades[a:b+1]) // (b - a + 1) results.append(average) elif parts[0] == \'U\': x = int(parts[1]) - 1 y = int(parts[2]) grades[x] = y return results"},{"question":"Suppose you have a rectangular matrix with dimensions m x n filled with non-negative integers. The goal is to find the maximum sum of a submatrix of any size within this matrix. A submatrix is defined as a matrix formed by selecting a contiguous set of rows and columns from the original matrix. For example, given the matrix: 1 2 3 4 5 6 7 8 9 The submatrix formed by selecting the first two rows and the last two columns is: 2 3 5 6 You need to write a function that takes multiple test cases, each containing a matrix, and outputs the maximum submatrix sum for each test case. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the matrix. - The next m lines each contain n integers separated by spaces, representing the elements of the matrix. Output For each test case, output a single integer — the maximum sum of a submatrix. Example Input 2 3 3 1 2 3 4 5 6 7 8 9 2 2 -1 -2 -3 4 Output 45 4 Note In the first test case, the entire matrix itself is the submatrix with the maximum sum which is 45. In the second test case, the submatrix with the maximum sum is the one containing just the element 4.","solution":"def max_submatrix_sum(matrix): row = len(matrix) col = len(matrix[0]) max_sum = float(\'-inf\') # Compute prefix sums for each row prefix_sums = [[0] * (col + 1) for _ in range(row)] for r in range(row): for c in range(col): prefix_sums[r][c + 1] = prefix_sums[r][c] + matrix[r][c] # Use 2 row boundaries for i in range(col): for j in range(i, col): cum_sum = [0] * row for r in range(row): cum_sum[r] = prefix_sums[r][j + 1] - prefix_sums[r][i] # Find the maximum subarray sum for this column pair current_max_sum = float(\'-inf\') current_sum = 0 for sum_val in cum_sum: current_sum = max(current_sum + sum_val, sum_val) current_max_sum = max(current_max_sum, current_sum) max_sum = max(max_sum, current_max_sum) return max_sum def solve_submatrix_sum(t, test_cases): results = [] for case in test_cases: m, n, matrix = case max_sum = max_submatrix_sum(matrix) results.append(max_sum) return results"},{"question":"You are given an array of integers `A` of length `N`. You have to perform `Q` queries on this array. There are two types of queries: 1. `1 X Y` - update the `X`-th element of the array to `Y`. 2. `2 L R` - find the sum of elements from index `L` to `R` (inclusive) in the array. Write a program that processes these queries. **INPUT:** First line of input consists of two integers `N` and `Q` denoting the length of the array `A` and the total number of queries respectively. The next line consists of `N` space-separated integers representing the array `A`. The subsequent `Q` lines consist of queries. If the query is of the first type, it will contain three integers (`1`, `X`, `Y`), if it is of the second type, it will contain three integers (`2`, `L`, `R`). **OUTPUT:** For each query of the second type, output the sum of elements from index `L` to `R`. **CONSTRAINTS:** - `1 ≤ N ≤ 10^5` - `1 ≤ Q ≤ 10^5` - `1 ≤ A_i ≤ 10^9` - `1 ≤ X ≤ N` - `1 ≤ L, R ≤ N` **SAMPLE INPUT:** ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 2 5 2 1 5 ``` **SAMPLE OUTPUT:** ``` 6 21 22 ``` **Explanation:** - For the first query, the sum of elements from index 1 to 3 (`1 + 2 + 3`) is `6`. - For the second query, we update the 3rd element to `10`. The array becomes `[1, 2, 10, 4, 5]`. - For the third query, the sum of elements from index 2 to 5 (`2 + 10 + 4 + 5`) is `21`. - For the fourth query, the sum of elements from index 1 to 5 (`1 + 2 + 10 + 4 + 5`) is `22`.","solution":"class ArrayProcessor: def __init__(self, A): self.A = A def update(self, X, Y): self.A[X - 1] = Y def range_sum(self, L, R): return sum(self.A[L - 1:R]) def process_queries(N, Q, A, queries): processor = ArrayProcessor(A) results = [] for query in queries: if query[0] == 1: _, X, Y = query processor.update(X, Y) elif query[0] == 2: _, L, R = query results.append(processor.range_sum(L, R)) return results"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in the grid can either be occupied or empty, represented by \'1\' and \'0\' respectively. A sub-grid is any rectangular section of the grid obtained by selecting a contiguous block of cells. Your task is to determine the area of the largest rectangular sub-grid that contains only \'1\'s. Constraints * All values in input are integers. * 1 ≤ R, C ≤ 1000 * The grid contains only \'1\'s and \'0\'s Input Input is given from Standard Input in the following format: R C row1 row2 . . . rowR Each row of the grid is a string of length C consisting of \'1\'s and \'0\'s. Output Print the area of the largest rectangular sub-grid that contains only \'1\'s. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 3 3 111 111 111 Output 9 Input 5 5 00100 00100 11111 00100 00100 Output 5 Input 2 2 00 00 Output 0","solution":"def largestRectangleArea(heights): stack, max_area = [], 0 heights.append(0) for i, height in enumerate(heights): while stack and height < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def maximalRectangle(grid): if not grid: return 0 R, C = len(grid), len(grid[0]) heights = [0] * C max_area = 0 for row in grid: for i in range(C): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largest_rectangular_subgrid(R, C, grid): return maximalRectangle(grid) # Example usage # R = 4 # C = 5 # grid = [\\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\"] # print(largest_rectangular_subgrid(R, C, grid)) # Output: 6"},{"question":"In a kingdom, there are `n` cities connected by `m` bidirectional roads. Each road has a certain toll fee associated with it. The citizens of the kingdom can travel through these roads but they want to avoid paying too many toll fees. The king of the kingdom has decided to implement a system where each citizen can travel from any city to any other city through the path with the minimum total toll fee. To achieve this, the king needs your help to find the minimum total toll fee required to travel between each pair of cities. If there\'s no possible way to travel between two cities, the toll fee for that pair should be represented as `-1`. Your task is to provide the matrix of minimum total toll fees between all pairs of cities. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of cities and the number of roads respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — representing a road between cities `u` and `v` with a toll fee `w`. Output Output `n` lines, each containing `n` integers. The `j`-th integer in the `i`-th line should be the minimum total toll fee for traveling from city `i` to city `j`. If there\'s no path from city `i` to city `j`, output `-1`. Examples Input 4 4 1 2 4 2 3 1 3 4 5 1 4 8 Output 0 4 5 8 4 0 1 6 5 1 0 5 8 6 5 0 Input 3 1 1 2 10 Output 0 10 -1 10 0 -1 -1 -1 0","solution":"def floyd_warshall(n, m, roads): # Initialize distance matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Distance from a city to itself is 0 for i in range(n): dist[i][i] = 0 # Fill initial distances from the roads data for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall algorithm to compute shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace all unreachable paths (still infinity) with -1 for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist # Example usage: # n, m = 4, 4 # roads = [(1, 2, 4), (2, 3, 1), (3, 4, 5), (1, 4, 8)] # result = floyd_warshall(n, m, roads) # for row in result: # print(row)"},{"question":"Given an array of n integers, the function should return an array of the same length where each element is the product of all the elements in the input array except the one at the corresponding position, without using division. Write a function `productExceptSelf(nums: List[int]) -> List[int]` that takes in a list of integers and returns another list of integers such that each element at index i of the output array is equal to the product of all the elements of `nums` except `nums[i]`. Input The first line of the input contains a single integer n (2 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers representing the array elements. Output Output a list of n integers representing the product of all the elements except the one at the corresponding position. Example Input 5 1 2 3 4 5 Output [120, 60, 40, 30, 24] Input 3 3 2 1 Output [2, 3, 6]","solution":"from typing import List def productExceptSelf(nums: List[int]) -> List[int]: Returns an array where each element is the product of all the elements of nums except the one at the corresponding position. n = len(nums) if n == 0: return [] # Initialize the output array with 1s. output = [1] * n # Compute the prefix products prefix = 1 for i in range(n): output[i] = prefix prefix *= nums[i] # Compute the postfix products and multiply with the prefix products postfix = 1 for i in range(n-1, -1, -1): output[i] *= postfix postfix *= nums[i] return output"},{"question":"Alice is fond of prime numbers and she also loves collecting gemstones. One day, she came up with a game where she merges her two interests. The game consists of n gemstones, each with a distinct integer value. Alice wants to select a subset of the gemstones such that the sum of their values is a prime number. Since there could be many subsets, she wants to know the smallest such prime number sum, if it exists. Write a function that, given the values of the gemstones, finds the smallest prime number sum of a subset of gemstones or determines if it is not possible to obtain a prime sum from any subset. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of gemstones. The second line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) — the values of the gemstones. Output Print the smallest prime number sum of any subset of the given gemstones. If no such prime sum exists, print -1. Examples Input 5 3 7 10 2 5 Output 2 Input 4 4 6 8 12 Output -1 Input 6 11 15 3 17 20 8 Output 3 Note In the first example, the smallest prime sum can be obtained by selecting the subset {2} which sums up to 2, a prime number. In the second example, there is no subset whose sum is a prime number. In the third example, the smallest prime sum can be obtained by selecting the subset {3} which sums up to 3, a prime number. Function signature: `def smallest_prime_sum(n: int, values: List[int]) -> int:`","solution":"from typing import List from itertools import combinations def is_prime(number: int) -> bool: Returns True if the number is prime, else False. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def smallest_prime_sum(n: int, values: List[int]) -> int: Finds the smallest prime number sum of a subset of gemstones values, or -1 if no such prime sum exists. all_sums = set() # Generate all possible subsets for r in range(1, n+1): for subset in combinations(values, r): all_sums.add(sum(subset)) prime_sums = [s for s in all_sums if is_prime(s)] if prime_sums: return min(prime_sums) return -1"},{"question":"Given an undirected graph, write a program to find the number of connected components in the graph. Two vertices are in the same connected component if there is a path between them. Input The first line of the input file contains one integer T -- the number of test cases (no more than 10). Each of the next T test cases contains: - The first line contains two integers n and m -- the number of vertices and the number of edges in the graph (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000). - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an edge between vertices u and v. Output For each test case, output one line containing the number of connected components in the graph. Example Input: 2 5 3 1 2 2 3 4 5 4 2 1 2 3 4 Output: 2 2 Explanation: In the first test case, vertices 1, 2, and 3 form one connected component, while vertices 4 and 5 form another. Thus, there are 2 connected components. In the second test case, vertices 1 and 2 form one connected component, and vertices 3 and 4 form another, resulting in 2 connected components.","solution":"def find_number_of_connected_components(test_cases): def dfs(node, visited, graph): stack = [node] while stack: vertex = stack.pop() for neighbor in graph[vertex]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) results = [] for n, m, edges in test_cases: graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = {i: False for i in range(1, n + 1)} connected_components = 0 for i in range(1, n + 1): if not visited[i]: visited[i] = True dfs(i, visited, graph) connected_components += 1 results.append(connected_components) return results"},{"question":"A company has a hierarchy of employees working under a strict reporting structure. Each employee has a unique identification number, with the company CEO having the ID 1. Every other employee reports to exactly one manager, directly or indirectly, creating a hierarchical (tree-like) structure. You are tasked with determining the lowest common manager (LCM) for any two given employees in the company. The LCM of two employees is the lowest node in the hierarchy that has both employees as descendants. To illustrate, consider the following tree structure (numbers represent employee IDs): ``` 1 / 2 3 /| | 4 5 6 7 | 8 ``` In this hierarchy, the LCM of employees 5 and 8 is 2 because 2 is the lowest node that has both 5 and 8 as descendants. # Input The input consists of multiple lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of employees in the company. 2. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing a direct reporting relationship where `v` reports directly to `u`. 3. The next line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. 4. The following `q` lines each contain two integers `x` and `y` (1 ≤ x, y ≤ n) — the IDs of two employees for which you need to find the LCM. # Output Output `q` lines, each containing a single integer representing the LCM of the given two employees. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 1 5 8 ``` Output ``` 2 ``` Note In this example, the company has 7 employees with direct reporting relationships specified. The single query asks for the LCM of employees 5 and 8, which is 2 because they both report up to 2 as their lowest common manager.","solution":"from collections import defaultdict, deque def preprocess(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Depth and parent tracking depth = {} parent = {} def bfs(root): queue = deque([(root, 0)]) # (node, current_depth) depth[root] = 0 parent[root] = None while queue: node, d = queue.popleft() for neighbor in tree[node]: if neighbor not in depth: depth[neighbor] = d + 1 parent[neighbor] = node queue.append((neighbor, d + 1)) bfs(1) # Assuming 1 is the root (CEO) return parent, depth def lca(parent, depth): def query(u, v): # Ensure v is deeper (or the same depth as) than u. if depth[u] > depth[v]: u, v = v, u # Bring v to the same depth as u while depth[v] > depth[u]: v = parent[v] # Now move both up until they meet while u != v: u = parent[u] v = parent[v] return u return query def find_lcm(n, relations, queries): parent, depth = preprocess(n, relations) lca_func = lca(parent, depth) results = [lca_func(x, y) for x, y in queries] return results # Example Usage: n = 7 relations = [ (1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7), (2, 8) ] queries = [(5, 8)] print(find_lcm(n, relations, queries)) # Should print [2]"},{"question":"Given a string of digits, you are to determine if it is possible to rearrange the digits to form an even number. An even number is defined as a number whose last digit is 0, 2, 4, 6, or 8. Input The input consists of a single line containing a string of digits (0-9). The length of the string is between 1 and 100, inclusive. Output Print \\"YES\\" if it is possible to rearrange the digits to form an even number, otherwise print \\"NO\\". Examples Input 1234 Output YES Input 13579 Output NO Note In the first example, one possible even number that can be formed is 1234 itself. Therefore, the output is \\"YES\\". In the second example, it\'s not possible to rearrange the digits to form an even number as all digits are odd. Hence, the output is \\"NO\\".","solution":"def can_form_even_number(digits): Returns \\"YES\\" if the digits can be rearranged to form an even number, otherwise returns \\"NO\\". for digit in digits: if digit in \'02468\': return \\"YES\\" return \\"NO\\""},{"question":"Sam is a logistics manager at a warehouse. He is responsible for optimizing the delivery process of parcels using drones. Each drone has a different maximum weight limit that it can carry, and each parcel has a specific weight. Sam\'s task is to assign each drone a parcel such that the maximum weight carried by any drone is minimized. To help Sam achieve this, you need to determine the minimum possible value of the heaviest weight assignment when each drone is given exactly one parcel to deliver. Input The first line of the input will consist of n, the number of drones and the number of parcels. The second line will consist of n space separated integers wi, the weights of the parcels. The third line consists of n space separated integers di, the maximum weight limits of the drones. Output: An integer which is the minimum possible weight of the heaviest parcel assignment to any drone. Constraints: 1 ≤ n ≤ 10^5 1 ≤ wi, di ≤ 10^9 SAMPLE INPUT 3 10 20 30 40 50 60 SAMPLE OUTPUT 30 Explanation The optimal assignment is as follows: - Assign the 10 unit parcel to the drone with a 40 unit limit. - Assign the 20 unit parcel to the drone with a 50 unit limit. - Assign the 30 unit parcel to the drone with a 60 unit limit. The heaviest parcel assigned to any drone is 30, which is minimized in this assignment.","solution":"def min_max_weight(n, parcel_weights, drone_limits): This function finds the minimum possible value of the heaviest weight assignment when each drone is given exactly one parcel to deliver. :param n: Number of drones and parcels :param parcel_weights: List of weights of the parcels :param drone_limits: List of maximum weight limits of the drones :return: Minimum possible value of the heaviest parcel assignment to any drone # Sort both parcels weights and drones limits parcel_weights.sort() drone_limits.sort() # Assign parcels to drones in sorted order max_weight = 0 for i in range(n): max_weight = max(max_weight, parcel_weights[i]) return max_weight"},{"question":"You are given an array of integers and a target integer. Your task is to find all unique pairs within the array that sum up to the target integer. Each pair should be represented as an array of two integers, and no pair should appear more than once in the result. The output should be formatted as an array of arrays. Ensure that each pair in the output list is sorted in ascending order and the pairs themselves should be sorted in ascending order based on their first element (and second element in case of a tie). If no pairs are found, return an empty array. Input The first line contains the list of integers, where each integer is separated by a space. The second line contains the target integer. Output Output a list of lists, where each list contains exactly two integers that sum up to the target integer. Examples Input 1 2 3 4 5 5 Output [[1, 4], [2, 3]] Input -1 0 1 2 -1 -4 0 Output [[-1, 1]] Input 1 1 1 1 2 Output [[1, 1]]","solution":"def find_pairs(arr, target): Finds all unique pairs within the array that sum up to the target integer. Parameters: arr (list): List of integers target (int): Target integer Returns: list: List of lists, where each list contains exactly two integers that sum up to the target integer arr.sort() # Sort the array pairs = set() seen = {} for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen[num] = True return [list(pair) for pair in sorted(pairs)]"},{"question":"A company organizes a team-building exercise where employees will form connections with each other. Each employee is assigned a unique ID ranging from 1 to n. They will connect with each other in pairs, and some of these connections are already established before the activity. The company wants to make sure that every employee is part of a single unified group, either directly or indirectly through other connections. If some employees are not connected, additional connections need to be made to join all employees into one single group. Your task is to determine the minimum number of additional connections required to achieve this goal. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of employees and the number of already established connections between them. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v) indicating that employees u and v are directly connected. Output Print a single integer — the minimum number of additional connections required to make sure all employees are part of one unified group. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 4 0 Output 3 Input 6 5 1 2 2 3 1 3 4 5 5 6 Output 1 Note In the first example, there are currently two separate groups: {1, 2, 3} and {4, 5}. To unify all employees, an additional connection between any employee from the first group and any employee from the second group is needed (for example, between employee 3 and employee 4), so the answer is 1. In the second example, there are no pre-established connections, so we need to make n-1 connections to unify all employees into a single group, resulting in 3 connections. In the third example, there are already connections forming two groups: {1, 2, 3} and {4, 5, 6}. By adding one connection between any employee from the first group and any employee from the second group (for example, between employee 3 and employee 4), all employees can be unified, resulting in the answer 1.","solution":"def minimum_additional_connections(n, m, connections): Determine the minimum number of additional connections required to unify all employees. Parameters: n (int): The number of employees. m (int): The number of already established connections. connections (list of tuples): List of already established connections (each a tuple of two integers). Returns: int: The minimum number of additional connections required. parent = list(range(n+1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in connections: union(u, v) unique_groups = len(set(find(i) for i in range(1, n+1))) return unique_groups - 1"},{"question":"Bob has n chores to finish today, which are represented by an array t of positive integers, where t[i] is the time in minutes required to complete the i-th chore. Bob wants to partition these chores into two groups such that the absolute difference between the total time taken by the two groups is minimized. Before starting the chores, he seeks your help to determine this minimal difference. Constraints * 1 ≤ n ≤ 15 * 1 ≤ t[i] ≤ 50 Input - The first line contains a single integer n, the number of chores. - The second line contains n space-separated integers t[1], t[2], ..., t[n], the time required for each chore. Output Print the minimal absolute difference between the total time taken by the two groups. Examples Input 3 8 4 5 Output 1 Input 4 10 20 30 40 Output 0","solution":"def minimal_difference(n, t): total_sum = sum(t) dp = [False] * (total_sum + 1) dp[0] = True for time in t: for j in range(total_sum, time - 1, -1): dp[j] = dp[j] or dp[j - time] min_diff = float(\'inf\') for i in range(total_sum // 2 + 1): if dp[i]: min_diff = min(min_diff, abs(total_sum - 2 * i)) return min_diff"},{"question":"You are provided with a list of integers and a target sum. Your task is to write a function that finds all unique pairs of numbers in the list that add up to the target sum. Each pair should be listed only once regardless of the order, and the algorithm should have an efficient time and space complexity. Input - The first line contains an integer n (1 ≤ n ≤ 100000), which specifies the number of integers in the list. - The second line contains n space-separated integers ai (-1000000 ≤ ai ≤ 1000000) which are the elements of the list. - The third line contains an integer target (-2000000 ≤ target ≤ 2000000), which is the target sum. Output - Print each unique pair of numbers that add up to the target sum in the format \\"a b\\", where a and b are elements of the list. - Each pair should be printed on a new line. - Print \\"No pairs found\\" if no such pair exists. Examples Input 6 1 2 3 4 3 5 6 Output 1 5 2 4 3 3 Input 5 4 4 4 4 4 8 Output 4 4 Input 6 1 3 5 7 9 11 2 Output No pairs found Explanation In the first example, the pairs (1, 5), (2, 4), and (3, 3) add up to the target sum of 6. The pair (3, 3) appears since there are two elements with value 3 in the list. In the second example, even though all elements in the list are the same, they can still form the sum 8 as there are multiple instances of the value 4. In the third example, no pairs of numbers add up to the target sum of 2.","solution":"def find_pairs_with_target_sum(n, numbers, target): Finds and returns unique pairs of numbers that add up to the target sum. numbers.sort() pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) if not pairs: return \\"No pairs found\\" else: result = \\"n\\".join(f\\"{a} {b}\\" for a, b in sorted(pairs)) return result"},{"question":"Given a matrix of integers, rotate the matrix 90 degrees clockwise and print the resulting matrix. Input: First line contains two integers, n and m (number of rows and columns of the matrix, respectively). Next n lines each contain m integers, representing the elements of the matrix. Output: Print the rotated matrix, with each line containing the elements of the new matrix in sequence. SAMPLE INPUT 3 4 1 2 3 4 5 6 7 8 9 10 11 12 SAMPLE OUTPUT 9 5 1 10 6 2 11 7 3 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given n x m matrix 90 degrees clockwise and returns the resulting matrix. # Rotate the matrix by reversing rows and then taking the transpose rotated = [list(row) for row in zip(*matrix[::-1])] return rotated def format_matrix_output(matrix): Formats the matrix into a string format for display. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) # Sample Input Processing and Output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\'n\') n, m = map(int, data[0].split()) matrix = [list(map(int, row.split())) for row in data[1:1+n]] rotated_matrix = rotate_matrix_90_clockwise(matrix) output = format_matrix_output(rotated_matrix) print(output)"},{"question":"You are given an array of n integers representing the heights of students standing in a line. The teacher wants to rearrange them into a new line where the heights of students are in strictly increasing order. However, the teacher also realizes that some students may have the same height, and it is allowed to have only one student for each unique height in the final line. Write a program to determine the maximum number of students that can be arranged in strictly increasing order of their heights. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of students. The second line contains n space-separated integers hi (1 ≤ hi ≤ 105), where hi represents the height of the i-th student. Output In the first line print a single integer m — the maximum number of students that can be arranged in strictly increasing order. In the second line print m space-separated integers — the heights of the selected students in increasing order. Examples Input 5 3 1 2 1 3 Output 3 1 2 3 Input 6 5 3 4 5 6 3 Output 4 3 4 5 6","solution":"def max_students_in_increasing_order(n, heights): Returns the maximum number of students that can be arranged in strictly increasing order and their respective heights. :param n: int, number of students :param heights: list, heights of the students :return: tuple, containing the number of such students and a list of their heights in strictly increasing order unique_heights = sorted(set(heights)) return len(unique_heights), unique_heights"},{"question":"You are given a word and you need to determine whether it can be segmented into a space-separated sequence of one or more dictionary words. The dictionary words are provided as input. Write a function that returns true if the word can be segmented and false otherwise. Input The first input line contains a string `s` (1 ≤ |s| ≤ 300), the word to be checked. The second line contains an integer `n` (1 ≤ n ≤ 100), the number of words in the dictionary. The next `n` lines each contain a word `wi` (1 ≤ |wi| ≤ 20), a dictionary word. All input strings consist of lowercase English letters only. Output Print `true` if the input word can be segmented into a sequence of dictionary words, otherwise print `false`. Examples Input leetcode 5 leet code cake fun codeleet Output true Input applepenapple 5 apple pen pineapple pens app Output true Input catsandog 3 cats dog sand Output false","solution":"def can_segment_string(s, dict_words): Returns true if the word \'s\' can be segmented into one or more dictionary words. word_dict = set(dict_words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[-1]"},{"question":"Devon is playing a game that involves choosing a sequence of integers from a set. The game works as follows: Devon starts with an empty sequence and is given a set of n integers. In each round, he randomly chooses one integer from the set and appends it to his current sequence. The game continues until all integers in the set have been chosen at least once. The objective is to find the expected length of the sequence when the game stops. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of distinct integers in the set. Output Print the expected length of the sequence with an absolute or relative error at most 10^-9. Examples Input 1 Output 1.0 Input 2 Output 3.0 Note To solve this problem, you need to calculate the expected number of rounds required to collect all distinct integers from the set. In probability theory, this problem is known as the \\"coupon collector\'s problem.\\" The expected length of the sequence can be computed using the formula: E(n) = n * (1 + 1/2 + 1/3 + ... + 1/n) where E(n) is the expected number of rounds required for n distinct items.","solution":"def expected_length(n): Returns the expected length of the sequence to collect all n distinct integers. if n == 1: return 1.0 E_n = 0.0 for i in range(1, n + 1): E_n += 1 / i return n * E_n"},{"question":"Mario studies at a university, and he loves to collect interesting sequences of numbers. One day he encountered Fibonacci sequence and became fascinated by it. He decided to extend the concept and create a new sequence called the \\"Flexible Fibonacci\\" sequence. In a Flexible Fibonacci sequence, F(n) is defined as follows: - F(1) = f1 (first number of the sequence) - F(2) = f2 (second number of the sequence) - For n > 2, F(n) = F(n-1) + F(n-2) + m, where m is a given constant. Given values f1, f2 and m, help Mario generate the first t numbers of the Flexible Fibonacci sequence. Input The input consists of four integers: - f1 (1 ≤ f1 ≤ 1000) - the first number of the sequence - f2 (1 ≤ f2 ≤ 1000) - the second number of the sequence - m (0 ≤ m ≤ 1000) - the constant added to the sum of the previous two terms - t (1 ≤ t ≤ 30) - the number of terms to generate Output Output a single line with t integers representing the first t numbers of the Flexible Fibonacci sequence. Examples Input 1 1 0 5 Output 1 1 2 3 5 Input 3 5 1 6 Output 3 5 9 15 25 41 Input 2 2 2 4 Output 2 2 6 10 Note In the first example, the sequence starts with 1 and 1, and no extra constant is added, yielding the standard Fibonacci sequence. In the second example, the sequence starts with 3 and 5, with a constant of 1 added to the sum of the previous two terms. In the third example, the sequence starts with 2 and 2, with a constant of 2 added to the sum of the previous two terms.","solution":"def flexible_fibonacci(f1, f2, m, t): Generates the first t numbers of the Flexible Fibonacci sequence. if t == 1: return [f1] if t == 2: return [f1, f2] sequence = [f1, f2] for i in range(2, t): next_term = sequence[i-1] + sequence[i-2] + m sequence.append(next_term) return sequence"},{"question":"You are given an array of integers, where each integer appears exactly twice. You need to identify the integer pairs such that the indices of both occurrences form an arithmetic progression. Specifically, if an integer x appears at indices i and j (i < j), the pair (x, y, z) should form arithmetic progression such that the difference between y and x is equal to the difference between z and y. Write a function that finds and returns such pairs of integers. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of distinct integers. - The second line contains 2n integers, representing the array. Output: - A list of tuples where each tuple contains three numbers: (value, index_1, index_2). The value is the repeated integer, and index_1 and index_2 are its positions in the array. Examples: Input: 3 1 2 3 2 3 1 Output: [(1, 1, 6), (2, 2, 4), (3, 3, 5)] Input: 2 4 5 4 5 Output: [(4, 1, 3), (5, 2, 4)] Input: 1 7 7 Output: [(7, 1, 2)]","solution":"def find_arithmetic_pairs(n, arr): Finds the pairs of integers in the array such that their positions form an arithmetic progression. Args: - n (int): The number of distinct integers. - arr (list): List of 2n integers where each integer appears exactly twice. Returns: - list of tuples: Each tuple contains (value, index_1, index_2). indices = {} for i, value in enumerate(arr): if value not in indices: indices[value] = [] indices[value].append(i + 1) result = [] for value, positions in indices.items(): if len(positions) == 2: result.append((value, positions[0], positions[1])) return result"},{"question":"A popular social media platform wants to implement a new feature to detect trends in hashtags. They need a function that finds the most popular hashtag used in a given set of posts. Problem Statement Given a list of strings where each string represents a post and can contain multiple hashtags (a word starting with the \'#\' character), write a function to find the most commonly used hashtag. If there are multiple hashtags with the same frequency, return any one of them. # Input - An integer n (1 ≤ n ≤ 105) representing the number of posts. - n strings, each representing a post. Each post is non-empty and contains at most 280 characters. # Output - A single string: the most commonly used hashtag. If there are no hashtags in any of the posts, return \\"No Hashtag\\". # Example Input ``` 3 \\"#hello world #python\\" \\"Learning #python programming #hello\\" \\"#hello #world #hello\\" ``` Output ``` #hello ``` Input ``` 2 \\"no hashtags here\\" \\"still no hashtags\\" ``` Output ``` No Hashtag ``` # Notes - Each hashtag consists of the \'#\' character followed by one or more alphanumeric characters. - Hashtags are case-sensitive, meaning \'#Hello\' and \'#hello\' are considered different hashtags. - The function should efficiently handle large input sizes.","solution":"import re from collections import Counter def find_most_popular_hashtag(n, posts): Finds the most popular hashtag in the given posts. If there are no hashtags, returns \\"No Hashtag\\". hashtag_pattern = re.compile(r\\"#w+\\") hashtag_counter = Counter() for post in posts: hashtags = hashtag_pattern.findall(post) hashtag_counter.update(hashtags) if not hashtag_counter: return \\"No Hashtag\\" most_common_hashtag, _ = hashtag_counter.most_common(1)[0] return most_common_hashtag"},{"question":"A group of robots are roaming on a 3D grid. Each robot has a defined start position and a movement pattern. The movement pattern tells the robot how it moves one unit of time in the x, y, and z directions. You need to determine the maximum number of robots that can be at the exact same position in the grid at any point in time. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of robots. Each of the next n lines contains six integers: x0, y0, z0, vx, vy, vz — the initial position (x0, y0, z0) and the movement pattern (vx, vy, vz) of the robot. All the coordinates and velocities are in the range -10^6 to 10^6. Output Print a single integer — the maximum number of robots that can be at the same position at any point in time. Examples Input 2 0 0 0 1 1 1 1 1 1 -1 -1 -1 Output 2 Input 3 1 0 0 1 0 0 0 0 0 0 0 0 -1 0 0 -1 0 0 Output 3 Input 4 0 0 0 1 0 0 0 1 0 -1 0 0 0 0 1 0 1 0 1 1 1 0 0 1 Output 1 Note In the first example, both robots meet at (0, 0, 0) when t = 0. In the second example, all three robots meet at (0, 0, 0) when t = 0. In the third example, no robots meet at the same position other than their starting positions.","solution":"def max_robots_same_position(n, robots): # Create a dictionary to store the positions and corresponding robot counts position_count = {} # Iterate through the robots to compute their positions over time for x0, y0, z0, vx, vy, vz in robots: for t in range(n): # Calculate the position at time t x_t = x0 + t * vx y_t = y0 + t * vy z_t = z0 + t * vz position = (x_t, y_t, z_t) # Increase the count of robots at this position if position in position_count: position_count[position] += 1 else: position_count[position] = 1 # Return the maximum number of robots at the same position return max(position_count.values()) # Example usage: n = 2 robots = [ (0, 0, 0, 1, 1, 1), (1, 1, 1, -1, -1, -1) ] print(max_robots_same_position(n, robots)) # Expected output is 2"},{"question":"A company has a top-down hierarchical structure of employees. Each employee, except the CEO, has exactly one direct supervisor. The CEO does not have a supervisor. The company wants to identify the longest path from the CEO to any other employee in the company. Each employee and supervisor relationship is represented as a pair of strings (supervisor, employee). Write a function **longest_hierarchy_path** that, given a list of pairs, returns the length of the longest path from the CEO to any employee. # Function Signature: ```python def longest_hierarchy_path(relations: List[Tuple[str, str]]) -> int: ``` # Input - `relations`: A list of tuples where each tuple contains two strings representing a direct supervisor and an employee. # Output - The function should return an integer representing the length of the longest path. # Constraints - Each string in the relation has at most 20 characters. - The number of pairs in the input can be up to 1000. - The hierarchy will form a valid tree structure with no cycles. # Example ```python relations = [(\\"A\\", \\"B\\"), (\\"A\\", \\"C\\"), (\\"B\\", \\"D\\"), (\\"B\\", \\"E\\"), (\\"C\\", \\"F\\"), (\\"F\\", \\"G\\")] print(longest_hierarchy_path(relations)) # Output: 3 relations = [(\\"CEO\\", \\"CTO\\"), (\\"CEO\\", \\"CFO\\"), (\\"CTO\\", \\"ENGINEER1\\"), (\\"CTO\\", \\"ENGINEER2\\")] print(longest_hierarchy_path(relations)) # Output: 2 ``` # Notes 1. In the first example, the longest path is from \\"A\\" to \\"G\\", which consists of 4 nodes: A -> C -> F -> G. 2. In the second example, the longest path is from \\"CEO\\" to \\"ENGINEER1\\" or \\"ENGINEER2\\", both of which consist of 3 nodes: CEO -> CTO -> ENGINEER.","solution":"from typing import List, Tuple from collections import defaultdict, deque def longest_hierarchy_path(relations: List[Tuple[str, str]]) -> int: if not relations: return 0 # Building the adjacency list representation of the hierarchy tree tree = defaultdict(list) indegree = defaultdict(int) # To track the root (CEO) for supervisor, employee in relations: tree[supervisor].append(employee) indegree[employee] += 1 if supervisor not in indegree: indegree[supervisor] = 0 # Finding the root (CEO) root = None for emp in indegree: if indegree[emp] == 0: root = emp break # Breadth-First Search (BFS) to determine the longest path queue = deque([(root, 0)]) # Store (current node, current depth) max_depth = 0 while queue: current, depth = queue.popleft() max_depth = max(max_depth, depth) for employee in tree[current]: queue.append((employee, depth + 1)) return max_depth"},{"question":"Given a binary string S of length N, find the largest number of consecutive \'1\'s that can be obtained by flipping at most one \'0\' to \'1\'. Constraints * 1 leq N leq 10^5 * S consists of only \'0\'s and \'1\'s. Input Input is given from Standard Input in the following format: N S Output Print the largest number of consecutive \'1\'s that can be obtained by flipping at most one \'0\' to \'1\'. Examples Input 5 11011 Output 5 Input 8 10011101 Output 5 Input 3 000 Output 1","solution":"def max_consecutive_ones(n, s): Returns the largest number of consecutive \'1\'s that can be obtained by flipping at most one \'0\' to \'1\' in the binary string s of length n. max_len = 0 left = 0 count_zeros = 0 for right in range(n): if s[right] == \'0\': count_zeros += 1 while count_zeros > 1: if s[left] == \'0\': count_zeros -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"There is a treasure hunt game where contestants have to collect treasure points hidden across a grid map. The grid is represented by an N x N matrix where each cell contains an integer that can be a positive number (indicating the treasure points available at that cell) or zero (indicating no treasure points at that cell). The contestant can only make moves in four possible directions: up, down, left, and right, and can only collect treasure points from the cells they visit. The contestant starts at the top-left cell (0, 0) and must reach the bottom-right cell (N-1, N-1), collecting treasure points along the way. The goal is to determine the maximum total treasure points that the contestant can collect while making their way to the bottom-right cell. Constraints: * 1 <= N <= 100 * 0 <= matrix[i][j] <= 10^4 Input: The input is given from Standard Input in the following format: N matrix[0][0] matrix[0][1] ... matrix[0][N-1] matrix[1][0] matrix[1][1] ... matrix[1][N-1] : matrix[N-1][0] matrix[N-1][1] ... matrix[N-1][N-1] Output: Print the maximum total treasure points that can be collected when reaching the bottom-right cell. Examples: Input: 4 1 0 7 0 2 0 6 1 0 9 5 3 0 0 0 8 Output: 30 Input: 3 1 3 1 1 5 0 4 2 1 Output: 12","solution":"def max_treasure(N, matrix): if N == 0: return 0 # Prepare a matrix to store the maximum treasure points at each cell (i, j) dp = [[0] * N for _ in range(N)] # Initialize the starting point dp[0][0] = matrix[0][0] # Fill the dp table for i in range(N): for j in range(N): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j]) return dp[N-1][N-1]"},{"question":"In a 2D grid, there are `n` points each represented as (x_i, y_i). A vertical line is a line parallel to the y-axis and can be represented by an equation of the form x = a constant. Define the \'balance point\' of the given set of points as a x-coordinate `x0` such that the sum of the horizontal distances of all points to the line x = `x0` is minimized. In other words, your task is to find the x-coordinate which minimizes the sum of the absolute differences between each point\'s x-coordinate and `x0`. Given the coordinates of n points, compute the x-coordinate of the balance point. Constraints: * 1 ≤ n ≤ 1000 * |x_i|, |y_i| ≤ 1000 * All x_i and y_i are integers. Input: n x_1 y_1 x_2 y_2 ... x_n y_n Output: Print the x-coordinate of the balance point as an integer. Examples Input: 3 1 2 3 4 5 6 Output: 3 Input: 4 2 -1 2 3 5 4 2000 2000 Output: 5","solution":"def balance_point(n, coordinates): Computes the x-coordinate of the balance point for given set of points. Parameters: n (int): Number of points. coordinates (list of tuples): List of (x_i, y_i) tuples Returns: int: x-coordinate of the balance point x_coordinates = [x for x, y in coordinates] x_coordinates.sort() median_index = n // 2 return x_coordinates[median_index]"},{"question":"You are given a grid-based city with rectangular blocks divided by streets. Each block is represented by a number indicating the elevation of the land in meters. The city planners are interested in the highest possible difference in elevation between any two blocks that can be connected by roads within a single rectangular block zone (i.e., a contiguous subrectangle within the grid). Write a program to find the maximum elevation difference within any possible subrectangle in the grid. Constraints * 1 ≤ rows, columns ≤ 100 * Each block elevation is an integer between 0 and 1000 Input The first line contains two integers representing the number of rows and columns in the grid. Each of the next rows lines contains columns integers representing the elevation of each block. Output Print a single integer representing the maximum elevation difference within any rectangular block zone. Example Input 3 3 1 2 3 4 6 5 7 8 9 Output 8","solution":"def find_max_elevation_difference(rows, cols, grid): Find the maximum elevation difference within any rectangular block zone. max_diff = 0 for i in range(rows): for j in range(cols): for k in range(i, rows): for l in range(j, cols): min_elevation = float(\'inf\') max_elevation = float(\'-inf\') for x in range(i, k+1): for y in range(j, l+1): elevation = grid[x][y] if elevation < min_elevation: min_elevation = elevation if elevation > max_elevation: max_elevation = elevation diff = max_elevation - min_elevation if diff > max_diff: max_diff = diff return max_diff"},{"question":"Tarik is the manager of a construction project, and he has n workers each assigned to a specific task. The tasks are labeled from 1 to n. Tarik wants to rearrange the tasks in such a way that no worker is assigned to the same task as before. Additionally, after rearranging, the sum of the tasks assigned to the workers should be as small as possible. Help Tarik develop a method to find the new arrangement of tasks that meets the requirements. If there are multiple arrangements with the same minimal sum, any such arrangement is acceptable. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of workers and tasks. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ n), where t_i denotes the task assigned to the i-th worker. It is guaranteed that all tasks from 1 to n are assigned to some worker. Output Print a single line containing n integers — the new arrangement of tasks for the workers, such that no worker receives the same task as before, and the sum of the tasks is minimized. Examples Input 4 1 2 3 4 Output 2 3 4 1 Input 6 6 5 4 3 2 1 Output 1 2 3 4 5 6 Input 3 3 3 1 Output 1 2 2 Note In the first example, the tasks are rearranged so that no worker gets the same task as before and the total sum (2+3+4+1=10) is minimized. In the second example, tasks are rearranged such that the sequence 1 2 3 4 5 6 is assigned, ensuring no worker receives the same task and the sum of the tasks (1+2+3+4+5+6=21) is minimal. In the third example, although task \'3\' repeats for different employees initially, after rearrangement, each worker gets a different task from before with the expected minimal sum.","solution":"def rearrange_tasks(n, tasks): Rearrange tasks such that no worker receives the same task. Args: n : int - Number of tasks and workers tasks : list - Original tasks assigned to workers Returns: list - Rearranged tasks rearranged_tasks = tasks[:] for i in range(n): if i < n - 1: rearranged_tasks[i] = tasks[i + 1] else: rearranged_tasks[i] = tasks[0] return rearranged_tasks"},{"question":"Problem statement A university computer science department has N students and is designing a project team formation system. Each student has two attributes: skill level and preferred project type. The skill level is represented by an integer value s_i (1 leq s_i leq 10^6) and the preferred project type is represented by a single character t_i (\'A\', \'B\', or \'C\'). The objective is to form the maximum number of balanced teams where each team must consist of exactly three students. Furthermore, each team must include students with all different preferred project types (\'A\', \'B\', and \'C\'), and the skill levels of the students in any team must vary pairwise. Given the number of students N and their respective attributes, determine the maximum number of balanced teams that can be formed. Constraints 3 leq N leq 10^5 1 leq s_i leq 10^6 t_i is one of \'A\', \'B\', or \'C\' All integers Sample Sample input 1 7 12 A 7 B 6 C 5 A 8 B 9 C 2 A Sample output 1 2 Sample input 2 9 10 A 5 B 7 C 9 A 12 B 7 A 6 C 11 B 8 C Sample output 2 3 input N s_0 t_0 s_1 t_1 vdots s_{n-1} t_{n-1} output Print the maximum number of balanced teams on the 1 line. Example Input 7 12 A 7 B 6 C 5 A 8 B 9 C 2 A Output 2","solution":"from collections import defaultdict from itertools import combinations def max_balanced_teams(N, students): # Create a dictionary to hold lists of skill levels for each project type skill_dict = defaultdict(list) for skill, ptype in students: skill_dict[ptype].append(skill) # Sort the skill levels for each project type for ptype in skill_dict: skill_dict[ptype].sort() # Count possible teams count = 0 while True: if not skill_dict[\'A\'] or not skill_dict[\'B\'] or not skill_dict[\'C\']: break # No more teams can be formed for a in skill_dict[\'A\']: for b in skill_dict[\'B\']: if b == a: continue for c in skill_dict[\'C\']: if c != a and c != b: # Found a valid team count += 1 skill_dict[\'A\'].remove(a) skill_dict[\'B\'].remove(b) skill_dict[\'C\'].remove(c) break else: continue break else: continue break return count"},{"question":"You are given an integer array nums sorted in non-decreasing order. Find the smallest positive integer that is not present in the array. The solution should have a time complexity of O(N) and use constant extra space. Constraints * 1 leq nums.length leq 10^5 * -10^9 leq nums[i] leq 10^9 Input An integer array nums in sorted order. Output Print the smallest positive integer that is not present in the array. Examples Input [-10, -3, 1, 2, 3, 8, 9] Output 4 Input [1, 2, 3, 4, 5] Output 6 Input [-10, -5, -2, -1, 0, 1, 3, 4, 6, 8] Output 2","solution":"def find_smallest_missing_positive(nums): Returns the smallest positive integer that is not present in the array. :param nums: List[int] - a sorted list of integers :return: int - the smallest positive integer not present in the array smallest_positive = 1 for num in nums: if num == smallest_positive: smallest_positive += 1 return smallest_positive"},{"question":"Write a function that takes a matrix and a target value as input and determines if the target value exists within the matrix. The matrix is sorted such that each row is in ascending order from left to right, and each column is in ascending order from top to bottom. Constraints: - The number of rows and columns in the matrix does not exceed 300. - The target value will be an integer within the range of the matrix values. Input: - The first line contains two integers, `n` and `m`, representing the number of rows and columns of the matrix respectively. - This is followed by `n` lines, each containing `m` integers representing the matrix. - The last line contains a single integer, the target value to search for in the matrix. Output: - Print \\"YES\\" if the target value exists within the matrix, otherwise print \\"NO\\". Example: Input: 3 4 1 3 5 7 10 11 16 20 23 30 34 50 3 Output: YES Input: 3 4 1 3 5 7 10 11 16 20 23 30 34 50 13 Output: NO Note: - Try to find a solution with a time complexity better than O(n*m) for better performance.","solution":"def search_matrix(matrix, target): Determines if the target value exists within the matrix. Parameters: matrix (list of list of int): A 2D list representing the matrix. target (int): The target integer to search for in the matrix. Returns: str: \\"YES\\" if the target exists in the matrix, \\"NO\\" otherwise. if not matrix or not matrix[0]: return \\"NO\\" n = len(matrix) m = len(matrix[0]) row, col = 0, m - 1 while row < n and col >= 0: if matrix[row][col] == target: return \\"YES\\" elif matrix[row][col] > target: col -= 1 else: row += 1 return \\"NO\\""},{"question":"Kevin is a computer network administrator. In his network, there are n computers and m direct connections between pairs of them. Each computer has a unique identifier from 1 to n. Kevin wants to ensure that data can be transmitted between any two computers directly or indirectly. To achieve this, Kevin decides to calculate the minimum number of direct connections (edges) that need to be added so that every computer can communicate with every other computer either directly or through some other computers. You need to write a program that computes the minimum number of additional connections required. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of computers and the number of direct connections. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — the pairs of computers that are directly connected. Output Print a single integer — the minimum number of direct connections that need to be added to make the network fully connected. Examples Input 4 2 1 2 3 4 Output 1 Input 5 3 1 2 2 3 4 5 Output 1 Note In the first example, we have 4 computers and 2 connections. Computers 1 and 2 are connected, and computers 3 and 4 are connected. To make the network fully connected, we can add one connection between 2 and 3 (or any other pair that bridges the two components). In the second example, we have 5 computers and 3 connections. We see two disconnected components: {1, 2, 3} and {4, 5}. An optimal solution is to add one connection between any member of the first component and any member of the second component to achieve full connectivity.","solution":"def min_connections_to_add(n, m, connections): Returns the minimum number of connections to be added to make all computers in the network connected. from collections import defaultdict, deque # Function to perform BFS and find all computers in the same component def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Initialize adjacency list adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) # Find number of connected components using BFS visited = [False] * (n + 1) num_components = 0 for i in range(1, n + 1): if not visited[i]: num_components += 1 bfs(i, visited, adj_list) # The minimum number of connections to add is number of components - 1 return num_components - 1"},{"question":"Monica loves organizing her bookshelf. She wants to ensure that her books are arranged in a specific order. Each book has a unique integer identifier. Monica wants to rearrange the books such that the sum of the absolute differences between each consecutive pair of books is minimized. More formally, if `b1, b2, ..., bn` are the book identifiers in the final arrangement, Monica wants to minimize the quantity: ``` |b1 - b2| + |b2 - b3| + ... + |bn-1 - bn| ``` Write a function that, given an array of integers representing the book identifiers, returns the minimized sum of the absolute differences for the optimal arrangement of the books. Input The input consists of one line containing an integer `n` (1 ≤ n ≤ 1000) representing the number of books, followed by `n` integers `a1, a2, ..., an` (-10^6 ≤ ai ≤ 10^6) representing the identifiers of the books. Output Print a single integer - the minimum possible sum of absolute differences for the optimal arrangement of the books. Examples Input 5 4 2 1 3 5 Output 4 Input 3 10 20 30 Output 20","solution":"def minimize_absolute_differences(n, books): Finds the minimized sum of the absolute differences for the optimal arrangement of books. books.sort() return sum(abs(books[i + 1] - books[i]) for i in range(n - 1))"},{"question":"Polycarp is organizing a local painting contest for his friends. He has `n` canvases, each with a specific size. The size of each canvas is represented as an integer in the list `sizes`. The participants in the contest can choose any number of consecutive canvases to paint on, but due to the contest rules, the total size of the chosen canvases must not exceed `m`. Polycarp wants to find the maximum number of consecutive canvases that a participant can choose to paint on without exceeding the size limit `m`. Write a program to help Polycarp determine this number. For example, if `sizes = [1, 2, 3, 4, 5]` and `m = 9`, the answer will be 3 since the participant can choose the canvases with sizes [2, 3, 4] which sums up to 9. # Input The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. Each of the following `t` test cases start with an integer `n` (1 ≤ n ≤ 2⋅10^5) — the number of canvases and an integer `m` (1 ≤ m ≤ 10^9) — the maximum allowed total size for consecutive canvases. The second line of each test case contains `n` integers representing the `sizes` of the canvases. The sum of `n` for all test cases in one test does not exceed 2⋅10^5. # Output For each test case, output one integer — the maximum number of consecutive canvases that can be chosen without exceeding the size limit `m`. # Example Input ``` 3 5 9 1 2 3 4 5 4 5 2 2 2 2 3 3 2 2 2 ``` Output ``` 3 2 1 ``` # Note In the first test case, the participant can choose canvases with sizes [2, 3, 4] which sum up to 9, thus the answer is 3. In the second test case, the participant can choose canvases with sizes [2, 2] which sum up to 4, thus the answer is 2. In the third test case, the participant can only choose one canvas with size 2, thus the answer is 1.","solution":"def max_consecutive_canvases(t, test_cases): results = [] for i in range(t): n, m, sizes = test_cases[i] max_len = 0 current_sum = 0 start = 0 for end in range(n): current_sum += sizes[end] while current_sum > m: current_sum -= sizes[start] start += 1 max_len = max(max_len, end - start + 1) results.append(max_len) return results"},{"question":"You are given a string s and an integer n. Your task is to determine the number of distinct substrings of length n that can be found within the string s. A substring is a contiguous sequence of characters within a string. Two substrings are considered distinct if they are different in at least one position. Input The first line contains the string s (1 ≤ |s| ≤ 300). This string contains only small English letters. The second line contains the integer n (1 ≤ n ≤ 300). Output Print a single number — the number of distinct substrings of length n in the string s. Examples Input abacaba 2 Output 4 Input abcabcabc 3 Output 3 Input aaaaa 1 Output 1 Note In the first sample, the distinct substrings of length 2 are: \\"ab\\", \\"ba\\", \\"ac\\", \\"ca\\", and \\"ab\\". The total number of distinct substrings is 4 (\\"ab\\", \\"ba\\", \\"ac\\", \\"ca\\"). In the second sample, the distinct substrings of length 3 are: \\"abc\\", \\"bca\\", \\"cab\\". The total number of distinct substrings is 3 (\\"abc\\", \\"bca\\", \\"cab\\"). In the third sample, the distinct substrings of length 1 are: \\"a\\". The total number of distinct substrings is 1 (\\"a\\").","solution":"def count_distinct_substrings(s, n): Returns the number of distinct substrings of length n in the string s. substrings = set() for i in range(len(s) - n + 1): substrings.add(s[i:i+n]) return len(substrings)"},{"question":"Alice and Bob are playing a game on a string consisting of lowercase English letters. The game is defined as follows: 1. Alice starts first and they take turns alternately. 2. In each turn, the player must choose a substring of length at least 1 and at most 3 from the current string and remove it. 3. The player who cannot make a move loses the game. Given the initial string, determine if Alice has a winning strategy assuming both Alice and Bob play optimally. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 105) — the initial string. Output Output \\"Alice\\" if Alice has a winning strategy, otherwise output \\"Bob\\". Examples Input abc Output Alice Input abca Output Bob Input a Output Alice Input aaaabaaa Output Bob","solution":"def find_winner(s): Determines if Alice has a winning strategy based on the given string. If the length of the string is odd, Alice has a winning strategy. If the length is even, Bob has a winning strategy. # Check the length of the string length = len(s) # Alice wins if the remaining string length is odd, otherwise Bob wins if length % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Create a program that manages audit trails for a banking application. Banking transactions are recorded, and an audit trail can be used to reconstruct a customer\'s balance after a series of transactions for verification purposes. Each transaction can be a deposit or withdrawal and the transactions are applied in the order they are received. You need to process these transactions and determine the final balance for a customer given the initial balance. Transactions are represented as a list of strings, and each string can be either a deposit or a withdrawal: - \\"D:amount\\" where D stands for deposit and amount is an integer value of the deposit. - \\"W:amount\\" where W stands for withdrawal and amount is an integer value of the withdrawal. Ensure that a customer\'s balance never goes negative. If a withdrawal transaction would cause the balance to go negative, skip that transaction and continue processing the remaining ones. **Input** The input contains multiple datasets. Each dataset begins with an integer `n` which represents the number of transactions (1 ≤ n ≤ 1000) followed by `n` transaction strings. The last dataset is followed by a single line containing only a zero (0). Example: ``` 5 D:500 W:100 D:200 W:800 D:100 4 D:1000 W:500 W:700 D:200 0 ``` **Output** For each dataset, output the resulting balance after applying all valid transactions. Assume all customers start with an initial balance of zero. Example Output: ``` 800 0 ``` **Explanation** In the first dataset: - Start with initial balance 0. - \\"D:500\\" adds deposit of 500. Balance = 500. - \\"W:100\\" withdraws 100. Balance = 400. - \\"D:200\\" adds deposit of 200. Balance = 600. - \\"W:800\\" is skipped because it would cause a negative balance. - \\"D:100\\" adds deposit of 100. Balance = 700. In the second dataset: - Start with initial balance 0. - \\"D:1000\\" adds deposit of 1000. Balance = 1000. - \\"W:500\\" deducts 500. Balance = 500. - \\"W:700\\" is skipped because it would cause a negative balance. - \\"D:200\\" adds deposit of 200. Balance = 700.","solution":"def process_transactions(datasets): Processes a series of transaction datasets and returns the final balance for each dataset. results = [] for dataset in datasets: balance = 0 for transaction in dataset: if transaction.startswith(\'D:\'): amount = int(transaction[2:]) balance += amount elif transaction.startswith(\'W:\'): amount = int(transaction[2:]) if balance >= amount: balance -= amount results.append(balance) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. You are allowed to select any single character from the string and change it to any other lowercase English letter. Your goal is to make the string a palindrome by doing at most one such operation. A palindrome is a string that reads the same forward and backward. For example, the strings \\"madam\\" and \\"racecar\\" are palindromes, while \\"apple\\" is not. Write a function that determines whether it is possible to make the string a palindrome by changing exactly one character, and returns a boolean value `true` if it is possible, and `false` otherwise. # Input - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. # Output - A single boolean value, `true` if it is possible to make the string a palindrome by changing exactly one character, and `false` otherwise. # Examples Example 1: Input: ``` abca ``` Output: ``` true ``` Explanation: - Changing character \'b\' to \'c\' results in the palindrome \\"acca\\". Example 2: Input: ``` abcdef ``` Output: ``` false ``` Explanation: - There is no way to create a palindrome with only one character change. Example 3: Input: ``` a ``` Output: ``` true ``` Explanation: - A single character string is already a palindrome. # Note - Your function should be optimized for performance given the constraints.","solution":"def can_be_palindrome_by_one_change(s): Returns whether it is possible to make the string a palindrome by changing at most one character. n = len(s) l, r = 0, n - 1 mismatch_count = 0 while l < r: if s[l] != s[r]: mismatch_count += 1 if mismatch_count > 1: return False l += 1 r -= 1 # It\'s either 0 mismatches (already a palindrome) or 1 mismatch (can be fixed by one change) return True"},{"question":"Write a function that takes a string and outputs the string with each digit replaced by its English representation and all other characters removed. The English representation of digits is as follows: ``` 0 – zero 1 – one 2 – two 3 – three 4 – four 5 – five 6 – six 7 – seven 8 – eight 9 – nine ``` Input - A string `s` with a maximum length of 1000 characters. Output - A string with only the English representation of each digit in the input, concatenated together. Example Input: ``` \\"I have 2 apples and 3 oranges.\\" ``` Output: ``` \\"two three\\" ``` Input: ``` \\"Call me at 1234567890.\\" ``` Output: ``` \\"one two three four five six seven eight nine zero\\" ``` Note: - The function should ignore all non-digit characters. - There should be a single space separating the English representation of each digit in the final output.","solution":"def digit_to_english_representation(s): digit_map = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } result = [digit_map[char] for char in s if char.isdigit()] return \' \'.join(result)"},{"question":"Traffic Control, a new automatic road monitoring system, is installed on a highway to record the speed of cars. The system captures the speed of each car in the form of an integer. Officials want to analyze the data to ensure that the number of cars violating the speed limit is kept under control. A car is considered to be violating the speed limit if its speed is greater than a given threshold t. You are hired to help the officials determine how many cars violated the speed limit for different threshold values. Given a list of recorded speeds, the officials would like to know the count of speed violations for each threshold they provide. Input The input begins with a single positive integer n on its own line (1 ≤ n ≤ 106), representing the number of cars recorded. The second line contains n positive integers — the i-th number in this line is equal to si (1 ≤ si ≤ 300), the speed of the i-th car. The next line contains an integer m (1 ≤ m ≤ 106), the number of threshold values the officials are interested in. Then, the following line contains m positive integers — the j-th number in this line is equal to the value of t (1 ≤ t ≤ 300) in the j-th query. Output For each threshold value, print the number of cars that violated the speed limit in a separate line. Examples Input 5 70 55 90 60 75 3 60 75 100 Output 3 1 0 Input 3 45 50 55 2 40 50 Output 3 1","solution":"def count_speed_violations(speeds, thresholds): Returns a list of counts of speed violations for each threshold. :param speeds: List of recorded car speeds. :param thresholds: List of threshold values. :return: List of counts of speed violations for each threshold. violations_count = [] for threshold in thresholds: violations_count.append(sum(speed > threshold for speed in speeds)) return violations_count"},{"question":"You are organizing a coding competition and need to assign team names to the participating teams. Each team must have a unique name derived from a given list of words by concatenating exactly two different words from the list. Write a program to generate all possible unique team names from a given list of words and count their occurrences. Input The first line contains an integer N (2 ≤ N ≤ 100) — the number of words in the list. Each of the next N lines contains a single word consisting of lowercase Latin letters. It is guaranteed that all words are distinct. Output Print the number of unique team names that can be generated by concatenating exactly two different words from the list. Examples Input 3 alpha beta gamma Output 6 Input 4 code forces round contest Output 12 Note In the first example, the unique team names are: \\"alphabeta\\", \\"alphabetagamma\\", \\"betagamma\\", \\"gammaalpha\\", \\"alphaγbeta\\", \\"betaalpha\\". In the second example, the unique team names are: \\"codeforces\\", \\"coderound\\", \\"codecontest\\", \\"forcescode\\", \\"forcesround\\", \\"forcescontest\\", \\"roundcode\\", \\"roundforces\\", \\"roundcontest\\", \\"contestcode\\", \\"contestforces\\", \\"contestround\\".","solution":"def count_unique_team_names(words): Given a list of words, return the number of unique team names that can be generated by concatenating exactly two different words. unique_names_set = set() for i in range(len(words)): for j in range(len(words)): if i != j: unique_names_set.add(words[i] + words[j]) return len(unique_names_set)"},{"question":"In a particular fantasy game, players earn points by defeating monsters. However, different monsters offer different amounts of points based on their difficulty level. You are tasked with calculating the total points a player has earned after defeating a series of monsters. You are given a list of integers representing the difficulty level of each monster the player has defeated. Each difficulty level `d` determines the points earned: - If `d` is 1, the player earns 10 points. - If `d` is 2 or 3, the player earns 20 points. - For any other values of `d`, the player earns 5 points. Write a program that calculates the total points earned by the player. # Constraints * The number of monsters defeated, N, is between 1 and 100 (inclusive). * Each difficulty level, d, is an integer between 1 and 10 (inclusive). # Input Input is given from Standard Input in the following format: ``` N d_1 d_2 ... d_N ``` - `N`: The number of monsters defeated. - `d_1, d_2, ... , d_N`: The difficulty levels of the defeated monsters. # Output Print a single integer representing the total points earned by the player. # Examples Input ``` 5 1 2 3 4 1 ``` Output ``` 65 ``` Input ``` 3 6 6 6 ``` Output ``` 15 ```","solution":"def calculate_total_points(N, difficulties): Calculate the total points a player has earned after defeating a series of monsters. Parameters: N (int): The number of monsters defeated. difficulties (list of int): The difficulty levels of the defeated monsters. Returns: int: The total points earned by the player. total_points = 0 for d in difficulties: if d == 1: total_points += 10 elif d == 2 or d == 3: total_points += 20 else: total_points += 5 return total_points"},{"question":"James got a new type of circular armored tank for his birthday. This tank can move in a circular battlefield which consists of N positions numbered from 1 to N clockwise. Each position can either be empty or contain an enemy soldier. The tank can move to a position and has the capability to fire at the enemy soldiers. It can fire exactly once per position, and it can choose either to fire at all enemy soldiers in that position or pass by without firing. You are given the positions of the enemy soldiers and need to determine the minimum number of moves required for the tank to visit and choose to fire at all enemy soldiers. Input: - The first line contains an integer T, the number of test cases. (1 ≤ T ≤ 50) - Each test case contains two lines: - The first line contains two integers N and M, where N is the number of positions (2 ≤ N ≤ 100) and M is the number of positions containing enemy soldiers (1 ≤ M ≤ N). - The second line contains M unique integers representing the positions of enemy soldiers. Output: - For each test case, output the minimum number of moves required to fire at all enemy soldiers. SAMPLE INPUT: 2 6 3 2 4 6 8 2 3 7 SAMPLE OUTPUT: 3 2","solution":"def min_moves_to_fire(N, soldier_positions): Returns the minimum number of moves required to fire at all enemy soldiers. # As tank can move in circular way, visiting all soldier positions means # simply going to every given enemy location once since their positions # are unique as per input constraints return len(soldier_positions) def solve(test_cases): result = [] for test_case in test_cases: N, soldier_positions = test_case result.append(min_moves_to_fire(N, soldier_positions)) return result"},{"question":"You are given two arrays `a` and `b` of size `n` and `m` respectively. You need to determine the length of the longest subarray that appears in both arrays. A subarray is defined as a contiguous segment of an array, and the length of the longest subarray is the maximum number of consecutive elements that two subarrays from `a` and `b` have in common. Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the sizes of arrays `a` and `b` respectively. The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i is the i-th element of array `a`. The third line contains `m` integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 10^6), where b_i is the i-th element of array `b`. Output Print one integer — the length of the longest subarray that appears in both `a` and `b`. Examples Input 5 6 1 2 3 2 1 3 2 1 4 7 2 Output 3 Input 3 3 1 2 3 4 5 6 Output 0 Input 5 5 1 2 3 2 1 3 2 1 3 2 Output 3","solution":"def longest_common_subarray_length(n, m, a, b): Returns the length of the longest subarray that appears in both arrays a and b. dp = [[0] * (m + 1) for _ in range(n + 1)] max_length = 0 for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"The Rabbit has a string `s` consisting of only lowercase English letters. He wants to convert this string into a palindrome by inserting the fewest characters possible. A palindrome is a string that reads the same backward as forward. Help the Rabbit find the minimum number of characters he needs to insert to make the string `s` a palindrome. Input The single line contains the string `s`, consisting of only lowercase English letters. The length of the string is at least 1 and at most 1000. Output In the single line, print the minimum number of characters that need to be inserted into `s` to make it a palindrome. Examples Input abca Output 1 Input race Output 3 Note In the first sample, inserting the character \'b\' after \'a\' or before \'c\' converts the string into \\"abcba\\" or \\"bacab\\", both of which are palindromes. In the second sample, inserting characters to transform \\"race\\" into \\"ecarace\\" requires 3 insertions.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters needed to insert into s to make it a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1]"},{"question":"Given a list of unique words, you need to find out if there exists a pair of words such that one word is the reverse of the other. Write a function `find_reverse_pair(words: List[str]) -> Tuple[str, str]` that accepts a list of strings as input and returns a tuple with the two words that form a reverse pair. If no such pair exists, return a tuple with two empty strings. Input - `words`: A list of `n` (1 ≤ n ≤ 10^5) unique words, each consisting of lowercase English letters, and each word having a maximum length of 100. Output - A tuple containing the two words where one is the reverse of the other. If multiple pairs exist, return any one of them. If no pair exists, return a tuple with two empty strings. Examples Input words = [\\"hello\\", \\"world\\", \\"olleh\\", \\"dlrow\\", \\"python\\"] Output (\\"hello\\", \\"olleh\\") Input words = [\\"coding\\", \\"assessment\\", \\"gnidoc\\", \\"tnemssessa\\"] Output (\\"coding\\", \\"gnidoc\\") Input words = [\\"apple\\", \\"banana\\", \\"cherry\\"] Output (\\"\\", \\"\\") **Note:** Remember to consider edge cases like a list with only one word or all words with no reverse pairs.","solution":"from typing import List, Tuple def find_reverse_pair(words: List[str]) -> Tuple[str, str]: word_set = set(words) for word in words: reverse_word = word[::-1] if reverse_word in word_set: return (word, reverse_word) return (\\"\\", \\"\\")"},{"question":"Points:10 A library has recently digitized its collection of books and now wants to implement a search feature to help librarians quickly find books based on certain properties. Each book in the library has a unique identifier, and various properties such as title, author, and year of publication. The librarian should be able to search for books based on any of these properties. You are tasked with designing a function that will take a list of books and a search query, and return a list of book identifiers that match the query. Each book is represented as a dictionary with \'id\', \'title\', \'author\', and \'year\' as keys. The search query is also provided as a dictionary, with one or more properties to be matched. Input: - A list of books where each book is a dictionary with the following keys: - \'id\' (an integer representing the unique identifier of the book) - \'title\' (a string representing the title of the book) - \'author\' (a string representing the author of the book) - \'year\' (an integer representing the year of publication) - A search query as a dictionary where each key is a property (\'title\', \'author\', \'year\') and the value is the value to be matched for that property. Output: - A list of unique identifiers of books that match all the search query criteria. Example: Input: books = [ {\\"id\\": 1, \\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}, {\\"id\\": 2, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, {\\"id\\": 3, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}, {\\"id\\": 4, \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951} ] query = {\\"author\\": \\"George Orwell\\", \\"year\\": 1949} Output: [3] Input: books = [ {\\"id\\": 1, \\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}, {\\"id\\": 2, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, {\\"id\\": 3, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}, {\\"id\\": 4, \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951} ] query = {\\"title\\": \\"The Great Gatsby\\"} Output: [1]","solution":"def search_books(books, query): Searches for books that match the given properties in the query. Args: books (list): List of book dictionaries, each with \'id\', \'title\', \'author\', and \'year\'. query (dict): Search query with one or more properties to be matched. Returns: list: List of unique identifiers of books that match the query. result = [] for book in books: match = True for key, value in query.items(): if book.get(key) != value: match = False break if match: result.append(book[\'id\']) return result"},{"question":"You are given a sequence of n integers s1, s2, ..., sn and m ranges. A range is defined by two integers l and r (1 ≤ l ≤ r ≤ n). For each range, you need to perform the following query: 1. Calculate the number of even integers in the given range. 2. Calculate the number of odd integers in the given range. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100 000) — the size of the sequence and the number of ranges, respectively. The second line of the input contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109) — the elements of the sequence. Then, m lines follow. Each line contains two integers l and r (1 ≤ l ≤ r ≤ n) describing a range. Output For each range, output two integers: the number of even integers and the number of odd integers in this range. Example Input 7 3 1 2 3 4 5 6 7 1 4 2 5 1 7 Output 2 2 2 2 3 4 Note For the first range [1, 4], the subsequence is [1, 2, 3, 4]. There are 2 even integers (2 and 4) and 2 odd integers (1 and 3). For the second range [2, 5], the subsequence is [2, 3, 4, 5]. There are 2 even integers (2 and 4) and 2 odd integers (3 and 5). For the third range [1, 7], the entire sequence [1, 2, 3, 4, 5, 6, 7] is considered. There are 3 even integers (2, 4, 6) and 4 odd integers (1, 3, 5, 7).","solution":"def count_even_odd(n, m, sequence, ranges): Returns a list of tuples containing the number of even and odd integers for each range provided. Parameters: n (int): Number of elements in the sequence. m (int): Number of ranges. sequence (list of int): The sequence of integers. ranges (list of tuple): Each tuple contains two integers (l, r) representing the range. Returns: list of tuple: Each tuple contains two integers - number of even integers and number of odd integers in the range. result = [] # Precompute even and odd counts up to each index even_prefix = [0] * (n + 1) odd_prefix = [0] * (n + 1) for i in range(n): even_prefix[i + 1] = even_prefix[i] + (1 if sequence[i] % 2 == 0 else 0) odd_prefix[i + 1] = odd_prefix[i] + (1 if sequence[i] % 2 != 0 else 0) # Process each range for l, r in ranges: evens = even_prefix[r] - even_prefix[l - 1] odds = odd_prefix[r] - odd_prefix[l - 1] result.append((evens, odds)) return result # Example usage: # n = 7 # m = 3 # sequence = [1, 2, 3, 4, 5, 6, 7] # ranges = [(1, 4), (2, 5), (1, 7)] # print(count_even_odd(n, m, sequence, ranges)) # Output: [(2, 2), (2, 2), (3, 4)]"},{"question":"Given a list of integers, write a function to find all subarrays whose sum is equal to a given number `k`. A subarray is a contiguous part of the original array. # Input The input consists of two parts: 1. A list of integers `arr` (1 ≤ length of arr ≤ 1000, -10000 ≤ arr[i] ≤ 10000), where `arr[i]` is the ith element of the list. 2. An integer `k` (-100000 ≤ k ≤ 100000), representing the sum to match. # Output The output should be an integer representing the number of subarrays whose sum equals `k`. # Example Input ``` arr = [1, -1, 2, 3, -2, 3] k = 3 ``` Output ``` 4 ``` Explanation The subarrays that sum to `k = 3` are: - [1, -1, 2, 3, -2]: Starts at index 0 and ends at index 2. - [3]: Starts at index 3 and ends at index 3. - [2, 3, -2]: Starts at index 2 and ends at index 4. - [3]: Starts at index 5 and ends at index 5.","solution":"def subarray_sum(arr, k): Finds the number of subarrays whose sum equals k. count = 0 sum_dict = {0: 1} current_sum = 0 for num in arr: current_sum += num if current_sum - k in sum_dict: count += sum_dict[current_sum - k] sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1 return count"},{"question":"A university library system needs an efficient way of tracking overdue books. Each book has a unique identifier and a due date. The library system manager wants a function that takes in the current date and a list of books, then returns a list of book identifiers that are overdue. Due to limitations in the database, dates and times are represented as strings in the format \\"YYYY-MM-DD HH:MM\\". You need to convert these strings to a standard datetime format in Python and then compare them to find overdue books. Your task is to write a function `find_overdue_books(current_date: str, books: List[Tuple[str, str]]) -> List[str]` that takes the current date as a string and a list of tuples where each tuple contains a book identifier and a due date string. The function should return a list of book identifiers that are overdue. # Input - The `current_date` string in the format \\"YYYY-MM-DD HH:MM\\". - A list of tuples `books` where each tuple contains: - a `book_id` (a unique identifier string). - a `due_date` string in the format \\"YYYY-MM-DD HH:MM\\". # Output - A list of `book_id` strings that are overdue. If no books are overdue, return an empty list. # Example ```python current_date = \\"2023-10-12 14:00\\" books = [ (\\"Book1\\", \\"2023-10-10 12:00\\"), (\\"Book2\\", \\"2023-10-13 15:00\\"), (\\"Book3\\", \\"2023-10-12 14:00\\"), (\\"Book4\\", \\"2023-10-12 14:01\\") ] ``` # Sample Output ``` [\\"Book1\\"] ``` # Note - Assume all input dates and times are well-formed and valid. - The time complexity of your solution should be manageable for a list of up to 10,000 books. - Use the `datetime` module in Python to parse and compare dates.","solution":"from datetime import datetime from typing import List, Tuple def find_overdue_books(current_date: str, books: List[Tuple[str, str]]) -> List[str]: Returns a list of book identifiers that are overdue. Parameters: - current_date (str): The current date in the format \\"YYYY-MM-DD HH:MM\\". - books (List[Tuple[str, str]]): A list of tuples where each tuple contains a book_id and a due_date in the format \\"YYYY-MM-DD HH:MM\\". Returns: - List[str]: A list of book identifiers that are overdue. current_dt = datetime.strptime(current_date, \\"%Y-%m-%d %H:%M\\") overdue_books = [] for book_id, due_date in books: due_dt = datetime.strptime(due_date, \\"%Y-%m-%d %H:%M\\") if due_dt < current_dt: overdue_books.append(book_id) return overdue_books"},{"question":"You are given an examination with n students, and each student has completed m subjects. You need to calculate the maximum total score achieved by any student. Each student\'s score in a subject is represented by an integer. Input The first line of the input contains two space-separated integers — n and m (1 ≤ n, m ≤ 50). The next n lines contain m integers each, where the j-th integer in the i-th line represents the score of the i-th student in the j-th subject (-100 ≤ score ≤ 100). Output Print a single integer — the maximum total score achieved by any student. Examples Input 3 3 50 40 30 60 20 80 70 70 60 Output 200 Input 2 4 10 20 30 40 -10 15 35 50 Output 90 Note In the first example, the total scores for the students are: - Student 1: 50 + 40 + 30 = 120 - Student 2: 60 + 20 + 80 = 160 - Student 3: 70 + 70 + 60 = 200 Thus, the maximum total score is 200. In the second example, the total scores for the students are: - Student 1: 10 + 20 + 30 + 40 = 100 - Student 2: -10 + 15 + 35 + 50 = 90 Thus, the maximum total score is 100.","solution":"def max_total_score(n, m, scores): Calculate the maximum total score achieved by any student. Parameters: n (int): Number of students m (int): Number of subjects scores (list of list of int): Scores of each student in each subject Returns: int: The maximum total score max_score = float(\'-inf\') for student_scores in scores: total_score = sum(student_scores) if total_score > max_score: max_score = total_score return max_score"},{"question":"You are given a string s of length n (1 ≤ n ≤ 50) consisting of only lowercase English letters. Your task is to determine the smallest lexicographically sorted string that can be obtained by performing any number of the following operations (possibly zero times): 1. Choose any character of the string and move it to either the beginning or the end of the string. Input The first line contains a string s of length n (1 ≤ n ≤ 50). Output Print the smallest lexicographically sorted string that can be obtained by performing the allowed operations. Examples Input bcad Output abcd Input cbda Output acbd Input azbycxdwe Output abcdewyzx Note In the first example, by moving \'a\' to the beginning and \'d\' to the end, the smallest lexicographic string that can be formed is \\"abcd\\". In the second example, by moving \'a\' to the beginning, the smallest lexicographic string that can be formed is \\"acbd\\". In the third example, continually moving the smallest available character to the beginning will result in the output \\"abcdewyzx\\". This problem tests your ability to utilize sorting and string manipulation techniques effectively to achieve the lexicographically smallest sequence.","solution":"def smallest_lexicographic_string(s): Returns the smallest lexicographically sorted string that can be obtained by moving any character to either the beginning or end of the string. return \'\'.join(sorted(s))"},{"question":"A city’s public transport network consists of some number of bus stations connected by bidirectional buses. Each bus ride between stations costs exactly 1 unit coin. The network is designed such that you can travel from any station to any other station using one or more bus rides. The city\'s transport authority is planning to introduce express buses to shorten travel times and possibly reduce costs. There are two types of express buses: - `Type 1`: Direct from station `a` to station `b` costs 2 unit coins. - `Type 2`: Direct from station `a` to station `b` costs 3 unit coins. Your task is to calculate the minimum cost to get from station `s` to station `t`. Input The first line contains three integers `n`, `m` and `q` (1 ≤ n ≤ 100, 1 ≤ m ≤ 200, 1 ≤ q ≤ 100), where `n` is the number of bus stations, `m` is the number of bidirectional bus connections, and `q` is the number of queries. The next `m` lines each consist of two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating a bidirectional bus connection between stations `u` and `v`. Then follows an integer `e` (0 ≤ e ≤ 100) representing the number of express buses. The next `e` lines each contain three integers `type`, `u` and `v` (1 ≤ type ≤ 2, 1 ≤ u, v ≤ n, u ≠ v), indicating the express bus type and the endpoints it connects. The last `q` lines each contain two integers `s` and `t` (1 ≤ s, t ≤ n, s ≠ t), the start and destination stations for each query. Output For each query, print the minimum cost to travel from station `s` to station `t`. If it\'s not possible to travel between the two stations, print `-1`. Examples Input 5 4 3 1 2 1 3 2 4 3 5 2 1 1 4 2 3 4 3 5 4 1 Output 1 2 -1","solution":"import heapq def dijkstra(graph, n, start, end): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def minimum_cost(n, m, connections, e, express_buses, queries): graph = {i: [] for i in range(1, n+1)} for u, v in connections: graph[u].append((v, 1)) graph[v].append((u, 1)) for t, u, v in express_buses: cost = 2 if t == 1 else 3 graph[u].append((v, cost)) graph[v].append((u, cost)) results = [] for s, t in queries: results.append(dijkstra(graph, n, s, t)) return results"},{"question":"Given a matrix of size M x N filled with either 0\'s or 1\'s, find the largest square containing all 1\'s and return its area. The square can be of any size between 1 x 1 and the entire matrix. Input: First line contains two integers M and N denoting the size of the matrix. Each of the next M lines contains N integers (either 0 or 1) separated by spaces. Output: Print the area of the largest square containing all 1\'s. SAMPLE INPUT 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 SAMPLE OUTPUT 4 Explanation In the provided matrix, the largest square containing all 1\'s is of size 2 x 2 (highlighted below): 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0","solution":"def maximal_square(matrix): if not matrix: return 0 M = len(matrix) N = len(matrix[0]) dp = [[0] * N for _ in range(M)] max_square_len = 0 for i in range(M): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_square_len = max(max_square_len, dp[i][j]) return max_square_len * max_square_len def parse_and_solve(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) matrix = [list(map(int, lines[i+1].split())) for i in range(M)] return maximal_square(matrix)"},{"question":"You are given an array of N integers. You need to determine if it is possible to make this array non-decreasing by removing at most one element. Write a function that checks if the array can be made non-decreasing by removing at most one element. Constraints * 2 leq N leq 50 * Each element in the array is an integer. Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print `YES` if the array can be made non-decreasing by removing at most one element, and `NO` otherwise. Examples Input 5 4 2 3 3 5 Output YES Input 4 3 4 2 3 Output NO Input 3 1 2 3 Output YES","solution":"def can_be_non_decreasing(n, array): def check(array): for i in range(len(array) - 1): if array[i] > array[i + 1]: return False return True for i in range(n): if check(array[:i] + array[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"The king has invited a famous chef to prepare a banquet. The chef has a collection of different dishes, each with a specific preparation time and a satisfaction value. The chef has `n` different dishes and exactly `t` units of total available time to prepare the dishes. The chef wants to maximize the total satisfaction by selecting a subset of dishes such that their total preparation time does not exceed `t`. Write a program to help the chef select the dishes to maximize satisfaction. Input The first line contains two integers `n` (1 ≤ n ≤ 1000) and `t` (1 ≤ t ≤ 1000) — the number of dishes and the total available time. The next `n` lines each contain two integers: the `i-th` line contains `time_i` and `satisfaction_i` (1 ≤ time_i, satisfaction_i ≤ 100) — the preparation time and satisfaction value of the `i-th` dish. Output Print a single integer — the maximum total satisfaction the chef can achieve. Examples Input 4 5 1 3 2 4 3 5 4 6 Output 9 Input 3 5 3 8 2 5 2 4 Output 13","solution":"def max_satisfaction(n, t, dishes): # Initialize the dp array with 0 dp = [0] * (t + 1) # Loop through each dish for time, sat in dishes: # Loop backwards from t to the time of the dish for j in range(t, time - 1, -1): dp[j] = max(dp[j], dp[j - time] + sat) return dp[t]"},{"question":"You are tasked with creating a program that processes a list of student records. Each record contains a student\'s name and their grades for four subjects. The program should compute the average grade for each student and then determine the overall highest average grade. If multiple students have the same highest average grade, the program should output the first occurrence based on the order in the input. INPUT FORMAT: The input starts with an integer N, which represents the number of students. The next N lines each contain a student\'s name followed by four integers, which are the grades in four different subjects. 1 ≤ N ≤ 100 0 ≤ Grade ≤ 100 OUTPUT FORMAT: Output the name of the student with the highest average grade. If there is a tie, output the name of the student who appears first in the input. SAMPLE INPUT 3 Alice 85 90 78 92 Bob 88 79 84 91 Charlie 92 85 89 95 SAMPLE OUTPUT Charlie","solution":"def find_top_student(records): Finds the student with the highest average grade. :param records: List of tuples, where each tuple contains the name of the student as a string and four grades as integers :return: The name of the student with the highest average grade max_average = -1 top_student = \\"\\" for record in records: name = record[0] grades = list(map(int, record[1:])) average = sum(grades) / 4 if average > max_average: max_average = average top_student = name return top_student def process_input(input_data): Processes the input data and returns the top student with the highest average grade. :param input_data: Multiline string containing the student data :return: Name of the student with the highest average grade lines = input_data.strip().split(\'n\') N = int(lines[0]) records = [line.split() for line in lines[1:N+1]] return find_top_student(records)"},{"question":"You are given an array of integers. You need to find the maximum sum of a contiguous subarray such that the subarray contains at least `X` elements and at most `Y` elements. Formally, find the indices `i` and `j` (`i leq j`) such that: - `X leq j - i + 1 leq Y` - The sum of elements from `i` to `j` is maximized. If there are multiple answers, output any one of them. Constraints: * All values in input are integers. * 1 leq N leq 2 times 10^5 * -10^9 leq A_i leq 10^9 * 1 leq X leq Y leq N Input: ``` N X Y A_1 A_2 A_3 ... A_N ``` Output: ``` Maximum possible sum of a subarray with length between X and Y. ``` Example: Input: ``` 7 3 4 -1 2 3 -4 5 10 -3 ``` Output: ``` 14 ``` Explanation: The subarray with maximum sum that has at least 3 and at most 4 elements is `[5, 10, -3]`, with a sum of 12. Input: ``` 5 2 3 1 2 3 4 5 ``` Output: ``` 12 ``` Explanation: The subarray with maximum sum that has at least 2 and at most 3 elements is `[3, 4, 5]`, with a sum of 12. Another valid answer is `[4, 5]` with the same sum.","solution":"def max_sum_contiguous_subarray(arr, X, Y): This function finds the maximum sum of a contiguous subarray such that the subarray contains at least X elements and at most Y elements. from collections import deque N = len(arr) prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] max_sum = -float(\'inf\') deq = deque() for i in range(X, N + 1): if i - X >= 0: while deq and deq[0] < i - Y: deq.popleft() while deq and prefix_sum[deq[-1]] >= prefix_sum[i - X]: deq.pop() deq.append(i - X) current_sum = prefix_sum[i] - prefix_sum[deq[0]] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an input integer `n`, print the following pattern consisting of `n` rows where each row contains increasing numbers up to the row number, followed by the same numbers in reverse order. The numbers in each row are separated by spaces. For example, for `n = 5`, the pattern should look like this: ``` 1 1 2 1 1 2 3 2 1 1 2 3 4 3 2 1 1 2 3 4 5 4 3 2 1 ``` # Input The first line contains the single integer `n` (1 ≤ n ≤ 20). # Output Print `n` lines. On each line `i`, print numbers from 1 to `i` followed by the same numbers in reverse order, separated by a single space. # Example **Input:** ``` 4 ``` **Output:** ``` 1 1 2 1 1 2 3 2 1 1 2 3 4 3 2 1 ```","solution":"def print_number_pattern(n): Print the pattern of numbers as described in the problem. Parameters: n (int): Number of rows in the pattern. for i in range(1, n + 1): increasing_sequence = list(range(1, i + 1)) decreasing_sequence = increasing_sequence[:-1][::-1] full_sequence = increasing_sequence + decreasing_sequence print(\' \'.join(map(str, full_sequence)))"},{"question":"Given two integer arrays, A and B, both of the same length N, determine the minimum number of operations required to make the array A equal to the array B. In one operation, you can increment or decrement any element of A by 1. Input The first line of the input contains an integer T denoting the number of test cases. Each test case consists of three lines. The first line contains an integer N denoting the length of the arrays A and B. The second line contains N integers separated by spaces representing the elements of array A. The third line contains N integers separated by spaces representing the elements of array B. Output For each test case, output a single line with the minimum number of operations required to make A equal to B. Constraints 1. 1 ≤ T ≤ 50 2. 1 ≤ N ≤ 100 3. -1000 ≤ A[i], B[i] ≤ 1000 Example Input: 2 3 1 2 3 4 5 6 2 10 20 15 25 Output: 9 10 Explanation First Example: The number of operations needed to make A [1, 2, 3] equal to B [4, 5, 6] is: |1-4| + |2-5| + |3-6| = 3 + 3 + 3 = 9 Second Example: The number of operations needed to make A [10, 20] equal to B [15, 25] is: |10-15| + |20-25| = 5 + 5 = 10","solution":"def min_operations_to_equal_arrays(test_cases): results = [] for case in test_cases: N, A, B = case operations = sum(abs(a - b) for a, b in zip(A, B)) results.append(operations) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) A = list(map(int, lines[index + 1].split())) B = list(map(int, lines[index + 2].split())) test_cases.append((N, A, B)) index += 3 return test_cases"},{"question":"A spaceship is preparing for a mission to Mars, and it needs to optimize the fuel consumption for its journey. The spaceship has several sections, each with different fuel consumption rates. Each section consumes fuel at a constant rate, but in each section, fuel consumption can vary based on distance traveled. Luckily, the captain has some data on the sections of the spaceship and wants you to determine the most fuel-efficient way to divide the journey to Mars into segments so that each segment uses the minimum possible amount of fuel. You are given a list of integers where each integer represents the fuel consumption rate per unit distance of a section of the spaceship. More formally, you are given an array of integers `fuel_rates` where `fuel_rates[i]` represents the fuel consumption rate of the i-th section. You are also given an integer `k` which represents the number of segments the journey should be divided into. Your task is to partition the `fuel_rates` array into `k` contiguous subarrays (segments), such that the maximum sum of the fuel consumption of these segments is minimized. Find and return the minimized maximum sum of fuel consumption for these segments. Input - The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of sections in the spaceship. - The second line contains an array of n space-separated integers `fuel_rates[i]` (1 ≤ fuel_rates[i] ≤ 10^4) — the fuel consumption rates of each section. - The third line contains an integer k (1 ≤ k ≤ n). Output - Print a single integer, the minimized maximum sum of fuel consumption for these segments. Example Input 9 10 20 30 40 50 60 70 80 90 3 Output 170 Explanation One of the optimal ways to split the journey is [10, 20, 30, 40, 50], [60, 70], [80, 90] which results in the maximum fuel consumption segment of 170. Hence, the minimized maximum fuel consumption is 170.","solution":"def can_partition(fuel_rates, n, k, max_sum): current_sum = 0 segments = 1 # Start with one segment for fuel in fuel_rates: if current_sum + fuel > max_sum: # We need to start a new segment segments += 1 current_sum = fuel if segments > k: return False else: current_sum += fuel return True def minimize_maximum_sum(fuel_rates, k): left = max(fuel_rates) # Lower bound: largest single element right = sum(fuel_rates) # Upper bound: sum of all elements while left < right: mid = (left + right) // 2 if can_partition(fuel_rates, len(fuel_rates), k, mid): right = mid else: left = mid + 1 return left # Function for testing the provided input-output format def process_input(input_string): lines = input_string.strip().split(\\"n\\") n = int(lines[0]) fuel_rates = list(map(int, lines[1].split())) k = int(lines[2]) return minimize_maximum_sum(fuel_rates, k) input_string = \\"9n10 20 30 40 50 60 70 80 90n3\\" print(process_input(input_string))"},{"question":"You are given an array of integers `arr` and a positive integer `k`. Your task is to find the maximum number of contiguous subarrays of length `k` that can be merged together to form a larger subarray, such that the maximum value in the merged subarray is not greater than `k` times the minimum value. A subarray of `arr` is contiguous if it consists of consecutive elements of `arr`. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000), where `n` is the number of elements in the array `arr`, and `k` is the length of the subarrays. The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (1 ≤ arr[i] ≤ 1,000,000). Output Print a single integer — the maximum number of subarrays of length `k` that can be merged together. Example Input 10 2 1 3 2 6 6 2 1 4 2 10 Output 4 Explanation In this example, the subarrays of length 2 are: - [1, 3] - [3, 2] - [2, 6] - [6, 6] - [6, 2] - [2, 1] - [1, 4] - [4, 2] - [2, 10] The valid subarrays that satisfy the condition are: - [1, 3] - [3, 2] - [2, 1] - [4, 2] Thus, the maximum number of valid subarrays of length `k` is 4.","solution":"def max_mergeable_subarrays(n, k, arr): count = 0 for i in range(n - k + 1): subarray = arr[i:i + k] min_val = min(subarray) max_val = max(subarray) if max_val <= k * min_val: count += 1 return count"},{"question":"In a fantasy world, there are islands connected by magical portals. Each portal allows immediate travel between exactly two islands, but not all islands are directly connected. The islands are numbered from 1 to n. You are given the travel routes, and you need to determine the shortest path from island 1 to island 𝑛 if it exists. If there\'s no path, you should return -1. The portals are described as a set of pairs where each pair [u, v] represents a portal between islands u and v. Note that all portals are bidirectional, meaning you can travel in both directions. Input - The first line contains an integer n (2 ≤ n ≤ 100) representing the number of islands. - The second line contains an integer m (1 ≤ m ≤ 200) representing the number of portals. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), describing a portal between islands u and v. Output - Output a single integer — the length of the shortest path from island 1 to island n. If there\'s no such path, print -1. Examples Input 4 4 1 2 2 3 3 4 1 3 Output 2 Input 5 3 1 2 1 3 4 5 Output -1","solution":"from collections import deque def shortest_path_islands(n, m, portals): Uses BFS to find the shortest path from island 1 to island n. Parameters: n (int): The number of islands. m (int): The number of portals. portals (list): A list of pairs representing portals between islands. Returns: int: The length of the shortest path from island 1 to island n, or -1 if no such path exists. # Create an adjacency list for the graph graph = {i: [] for i in range(1, n+1)} for u, v in portals: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path from island 1 to island n queue = deque([(1, 0)]) # (current_island, current_distance) visited = set() while queue: current_island, current_distance = queue.popleft() if current_island == n: return current_distance if current_island not in visited: visited.add(current_island) for neighbor in graph[current_island]: if neighbor not in visited: queue.append((neighbor, current_distance + 1)) return -1"},{"question":"You are given an array of n non-negative integers representing the heights of n columns of width 1. The goal is to find two columns that, together with the x-axis, form a container such that the container can hold the most water. In other words, you must find the maximum area of the container that can be formed by any two of the columns together with the x-axis. The area of the container is defined as the product of the distance between the two columns and the minimum of their heights. Given multiple test cases, for each test case: Input The input starts with an integer t (1 ≤ t ≤ 2000) — the number of test cases. For each test case: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of columns. - The second line contains n space-separated non-negative integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^6) representing the height of each column. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, print the maximum area of water that the container can hold. Example Input 3 4 1 2 1 1 5 4 3 2 1 4 3 1 1 1 Output 3 16 2 Explanation In the first test case: - The maximum area is formed by the first and the third columns with height 1 each and distance between them being 2. Hence, the area is 1 * 2 = 2. This is achieved by the columns at indices 0 and 2. - Another possible combination is the second and the third columns with heights 2 and 1 respectively and distance between them being 1. Hence, the area is 1 * 1 = 1. This is achieved by the columns at indices 1 and 2. - The third option is taking the second and the fourth columns with heights 2 and 1 respectively and a distance of 2. Hence the area is 1 * 2 = 2. - Finally, taking the first and the fourth columns with heights 1 each and a distance of 3 results in an area of 1 * 3 = 3. Therefore, the maximum area is 3.","solution":"def max_area(heights): Function to compute the maximum area of water that can be contained between two columns. left, right = 0, len(heights) - 1 max_area = 0 while left < right: width = right - left current_height = min(heights[left], heights[right]) current_area = width * current_height max_area = max(max_area, current_area) # Move the pointers to find potentially higher heights if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] results.append(max_area(heights)) return results"},{"question":"You are given a list of strings representing directory paths. Each directory path is a string of directory names separated by \'/\' (for example, \\"dir1/dir2/dir3\\"). Your task is to find the longest common prefix among these paths. The common prefix of paths is a part shared by every path. Input: A non-empty list of strings representing the directory paths. The length of the list of strings will not exceed 1000, and each path will not exceed 300 characters. Output: The longest common prefix string among the given paths. If there is no common prefix, return an empty string. Examples: Input: [\\"/home/user/documents\\", \\"/home/user/downloads\\", \\"/home/user/photos\\"] Output: \\"/home/user/\\" Input: [\\"/var/log/apache2\\", \\"/var/log/mysql\\", \\"/var/lib/mysql\\"] Output: \\"/var/\\" Input: [\\"/root/\\", \\"/home/user/\\", \\"/home/user/docs\\"] Output: \\"\\" Explanation: For the first example, the longest common prefix is \\"/home/user/\\" as all given paths start with this prefix. For the second example, the longest common prefix is \\"/var/\\" as that is the portion common to all. For the third example, there is no common prefix among the provided paths, hence the output is an empty string.","solution":"def longest_common_prefix(paths): Finds the longest common prefix among a list of directory paths. if not paths: return \\"\\" # Split each path by \'/\' to compare parts individually split_paths = [path.split(\'/\') for path in paths] # Identify the minimum length of split paths to avoid index errors min_length = min(len(path) for path in split_paths) # Initialize the common prefix as an empty list to accumulate common parts common_prefix = [] for i in range(min_length): # Take the ith part of the first path as a reference current_part = split_paths[0][i] # Check if this part is common in all paths if all(path[i] == current_part for path in split_paths): common_prefix.append(current_part) else: break # Join the common parts with \'/\' to form the common prefix return \'/\'.join(common_prefix) if common_prefix else \\"\\""},{"question":"You are working for a company that processes large batches of images. Your task is to write a program that analyzes the brightness of these images and classifies them into three categories: \\"dark\\", \\"dim\\", and \\"bright\\". The classification is based on the average brightness of the image, which ranges from 0 to 255 (inclusive). You can download a sample set of images at the following link: http://example.com/sample_images.zip. Each image is a grayscale image in PNG format. The classification rules are as follows: - \\"dark\\" if the average brightness is between 0 and 85 (inclusive), - \\"dim\\" if the average brightness is between 86 and 170 (inclusive), - \\"bright\\" if the average brightness is between 171 and 255 (inclusive). You need to write a program that reads an image from the given path, calculates its average brightness, and classifies the image based on the rules provided. Input The input consists of: - A string representing the file path to the image. Output Print one of the following strings: \\"dark\\", \\"dim\\", or \\"bright\\" based on the average brightness of the image. Example Input ``` /path/to/image.png ``` Output ``` dim ``` Note: For testing purposes, you can create your own images with known average brightness values. Make sure your program handles various edge cases such as empty images and images with uniform brightness.","solution":"from PIL import Image import numpy as np def classify_brightness(image_path): Classifies the brightness of an image as \\"dark\\", \\"dim\\", or \\"bright\\". Args: - image_path (str): The file path to the image. Returns: - str: The classification of the image brightness (\\"dark\\", \\"dim\\", or \\"bright\\"). # Open the image using PIL image = Image.open(image_path).convert(\\"L\\") # Convert the image to a NumPy array image_array = np.array(image) # Calculate the average brightness avg_brightness = np.mean(image_array) # Classify the brightness based on the average value if avg_brightness <= 85: return \\"dark\\" elif avg_brightness <= 170: return \\"dim\\" else: return \\"bright\\""},{"question":"In an online game, players can earn points by defeating monsters. Each monster has a specific amount of health points (HP) and each player can deal a certain amount of damage per attack. The game allows you to set up multiple players to attack a single monster simultaneously. Your task is to determine the minimum number of attacks required to defeat a given list of monsters. Each player can attack any monster, and each attack reduces the monster\'s health by the player\'s attack power. A monster is considered defeated when its health drops to zero or below. Input The first line contains a single integer n (1 ≤ n ≤ 10^4) – the number of players. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the attack power of each player. The third line contains a single integer m (1 ≤ m ≤ 10^4) – the number of monsters. Each of the next m lines contains a single integer hi (1 ≤ hi ≤ 10^9) – the health points of the i-th monster. Output Print m integers – the i-th of them should be the answer to the i-th monster in the order they are given in the input. The answer is the minimum number of attacks required to defeat that monster. Example Input 3 2 3 5 4 10 4 7 13 Output 2 1 2 3 Note In the example: - The first monster with 10 HP can be defeated with a minimum of 2 attacks: 2 attacks from a player with 5 attack power each. - The second monster with 4 HP can be defeated with 1 attack from a player with 5 attack power. - The third monster with 7 HP can be defeated with a minimum of 2 attacks: 1 attack from a player with 5 attack power and 1 attack from a player with 2 attack power. - The fourth monster with 13 HP can be defeated with a minimum of 3 attacks: 2 attacks from a player with 5 attack power each and 1 attack from a player with 3 attack power.","solution":"def min_attacks_to_defeat_monsters(n, attack_powers, m, monster_healths): Determine the minimum number of attacks required to defeat each monster. :param n: Number of players :param attack_powers: List of integers representing attack power of each player :param m: Number of monsters :param monster_healths: List of integers representing health points of each monster :return: List of integers representing minimum number of attacks for each monster max_attack = max(attack_powers) result = [] for health in monster_healths: min_attacks = (health + max_attack - 1) // max_attack result.append(min_attacks) return result"},{"question":"A sequence of integers is called a \\"special sequence\\" if it satisfies the following conditions: 1. Every pair of consecutive integers in the sequence have a difference of either 1 or -1. 2. The sequence does not contain a positive integer followed immediately by a different positive integer. 3. The sequence does not contain more than one negative integer consecutively. Given an integer N, generate a special sequence of length N. If it is not possible to generate such a sequence, return -1. Constraints * 1 le N le 1000 Input Input is given from Standard Input in the following format: N Output If the special sequence is not possible, print a single integer `-1`. Otherwise, output the special sequence as a single line containing N integers separated by spaces. Examples Input 3 Output 1 -1 -2 Input 5 Output -1 0 1 -1 0","solution":"def generate_special_sequence(N): if N == 1: return [0] elif N == 2: return [0, -1] elif N < 1 or N > 1000: return -1 # This should never happen given the problem constraints. special_sequence = [] # For odd and even length base_pattern_odd = [-1, 0, 1] base_pattern_even = [-1, 0] # Construct the special sequence if N % 2 == 0: repeats = N // 2 special_sequence.extend(base_pattern_even * repeats) else: repeats = N // 3 remainder = N % 3 special_sequence.extend(base_pattern_odd * repeats) if remainder: special_sequence.extend(base_pattern_even[:remainder]) return special_sequence # Function to convert list to string as needed by problem statement def format_sequence(sequence): if sequence == -1: return \\"-1\\" return \' \'.join(map(str, sequence)) def process_input(): import sys input = sys.stdin.read().strip() N = int(input) sequence = generate_special_sequence(N) print(format_sequence(sequence))"},{"question":"Spreadsheet Column Title Conversion Microsoft Excel sheets use a special naming convention for their columns. The columns are named using a combination of the uppercase English letters \'A\' to \'Z\'. The first 26 columns are named \'A\' to \'Z\'. Then, the columns continue with two-letter names: \'AA\', \'AB\', \'AC\', ..., \'AZ\', \'BA\', \'BB\', ..., \'ZZ\'). After \'ZZ\', the columns are named using three-letter names: \'AAA\', \'AAB\', ..., and so on. Given a column number, return its corresponding column title as it appears in an Excel sheet. # Input The input will contain multiple datasets. The first line of the dataset will specify the number of column numbers M (1 ≤ M ≤ 100). The next M lines each contain a single integer representing a column number (1 ≤ column number ≤ 10^7). After the last dataset, a line containing only 0 is given. # Output For each dataset, output the corresponding column title for each column number in individual lines. # Example Input ``` 3 1 28 701 2 52 2600 0 ``` Output ``` A AB ZY AZ CUZ ``` # Explanation 1 corresponds to column title \'A\'. 28 corresponds to column title \'AB\'. 701 corresponds to column title \'ZY\'. 52 corresponds to column title \'AZ\'. 2600 corresponds to column title \'CUZ\'.","solution":"def number_to_title(column_number): Converts a given column number to its corresponding Excel column title. title = [] while column_number > 0: column_number -= 1 # Adjust to 0-indexed remainder = column_number % 26 title.append(chr(remainder + ord(\'A\'))) column_number //= 26 return \'\'.join(reversed(title)) def excel_column_titles(input_data): Converts multiple column numbers to their corresponding column titles. data_sets = input_data.strip().split(\'n\') result = [] i = 0 while i < len(data_sets): M = int(data_sets[i]) if M == 0: break for j in range(1, M+1): column_number = int(data_sets[i + j]) result.append(number_to_title(column_number)) i += M + 1 return result"},{"question":"You are given a list of integers `arr` and a single integer `k`. Your task is to determine if there exists a pair of distinct integers in the list such that their sum is equal to `k`. Note that the same elements of the list cannot be reused to form different pairs. Write a function that returns `True` if such a pair exists and `False` otherwise. Function Signature: ```python def has_pair_with_sum(arr: List[int], k: int) -> bool: ``` # Input: - `arr`: A list of integers. - `k`: A single integer. # Output: - `True` if a pair in `arr` exists with the sum equal to `k`, `False` otherwise. # Constraints: - The length of `arr` will be at most 10^5. - Each element in `arr` will be between -10^9 and 10^9. - `k` will be between -10^9 and 10^9. # Example: Example 1: Input: ```python arr = [1, 2, 3, 4] k = 5 ``` Output: ```python True ``` Explanation: The pair (2, 3) sums up to 5. Example 2: Input: ```python arr = [1, 2, 3, 9] k = 8 ``` Output: ```python False ``` Explanation: No two distinct integers in the list sum up to 8. Example 3: Input: ```python arr = [-1, -2, -3, 4, 5, 9] k = 2 ``` Output: ```python True ``` Explanation: The pair (-1, 3) sums up to 2.","solution":"from typing import List def has_pair_with_sum(arr: List[int], k: int) -> bool: Returns True if there are two distinct integers in `arr` that add up to `k`, False otherwise. seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"Given a list of integers, return a new list that contains only the integers from the original list that form a strictly increasing subsequence (each element is greater than the preceding one), starting with the smallest possible element. If there are multiple strictly increasing subsequences, return the one that appears first in the list. If no such subsequence exists, return an empty list. INPUT The input consists of a single list of integers. OUTPUT Output a list of integers that forms the first strictly increasing subsequence starting from the smallest possible element. CONSTRAINTS 1 ≤ len(list) ≤ 10^5 -10^9 ≤ list[i] ≤ 10^9 SAMPLE INPUT [5, 1, 7, 3, 8, 2] SAMPLE OUTPUT [1, 7, 8]","solution":"def first_strictly_increasing_subsequence(nums): Returns the first strictly increasing subsequence starting with the smallest element. if not nums: return [] # Finding the first smallest element min_element = min(nums) # Initialize the result list with the first smallest element subsequence = [min_element] previous_element = min_element # Finding subsequent elements that form a strictly increasing subsequence for num in nums[nums.index(min_element) + 1:]: if num > previous_element: subsequence.append(num) previous_element = num return subsequence"},{"question":"**Question: Knight\'s Moves on a Chessboard** You are given an `N x N` chessboard and a knight located at a particular starting cell `(x, y)`. The knight is a chess piece that moves in an L-shape: two cells in one direction and then one cell perpendicular, or one cell in one direction and then two cells perpendicular. Your task is to calculate the minimum number of moves required for the knight to reach a target cell `(tx, ty)`. If it is not possible for the knight to reach the target cell, return `-1`. # Input The first line contains a single integer `N` (1 ≤ N ≤ 500), representing the size of the chessboard. The second line contains two integers `x` and `y` (1 ≤ x, y ≤ N), representing the starting coordinates of the knight. The third line contains two integers `tx` and `ty` (1 ≤ tx, ty ≤ N), representing the target coordinates. # Output Print one integer — the minimum number of moves required for the knight to reach the target cell, or `-1` if it is not possible. # Example **Input:** ``` 8 1 1 8 8 ``` **Output:** ``` 6 ``` **Input:** ``` 5 1 1 5 5 ``` **Output:** ``` 4 ``` # Note In the first example, the knight moves from `(1, 1)` to `(8, 8)` in a minimum of 6 moves. In the second example, the knight moves from `(1, 1)` to `(5, 5)` in a minimum of 4 moves.","solution":"from collections import deque def min_knight_moves(N, x, y, tx, ty): Returns the minimum number of moves required for a knight to reach the target cell (tx, ty) from the starting cell (x, y) on an N x N chessboard. Returns -1 if it is not possible. if (x, y) == (tx, ty): return 0 # Possible moves for a knight moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] # BFS initialization queue = deque([(x, y, 0)]) visited = set((x, y)) while queue: cx, cy, dist = queue.popleft() for mx, my in moves: nx, ny = cx + mx, cy + my if (nx, ny) == (tx, ty): return dist + 1 if 1 <= nx <= N and 1 <= ny <= N and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a list of words, write a function to determine the longest sequence of consecutive alphabetical characters appearing in any of the words. The function should return the length of this sequence. Input Format: First line of the input consists of a single integer T, number of test cases. Each test case starts with a single integer N, indicating the number of words. Followed by N lines, each containing a single word in lowercase. Output Format: For each test case, print the length of the longest sequence of consecutive alphabetical characters in any of the words. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ length of each word ≤ 100 Problem Setter : Anonymous SAMPLE INPUT 1 3 abcde qwerty xyz SAMPLE OUTPUT 5","solution":"def longest_consecutive_sequence(words): Returns the length of the longest sequence of consecutive alphabetical characters in any of the words. def longest_consecutive_in_word(word): max_len, current_len = 1, 1 for i in range(1, len(word)): if ord(word[i]) - ord(word[i-1]) == 1: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len max_length = 0 for word in words: max_length = max(max_length, longest_consecutive_in_word(word)) return max_length def process_input(input_lines): idx = 0 T = int(input_lines[idx]) idx += 1 results = [] for _ in range(T): N = int(input_lines[idx]) idx += 1 words = input_lines[idx:idx+N] idx += N results.append(longest_consecutive_sequence(words)) return results"},{"question":"You are given an array of N integers where each element represents the height of a building. You are also given M queries, where each query asks for the maximum height of a building in a specified range of the array. Implement a solution that answers all the queries efficiently. Constraints: * 1 leq N leq 10^5 * 1 leq M leq 10^5 * 1 leq height of each building leq 10^9 * 1 leq L_i leq R_i leq N Input: The first line contains an integer N indicating the number of buildings. The second line contains N space-separated integers representing the height of each building. The third line contains an integer M indicating the number of queries. The next M lines each contain two integers L_i and R_i (1-based index) indicating the range [L_i, R_i] for each query. Output: Output M lines, each containing the maximum height of the buildings in the specified range for the respective query. Example: Input: 6 3 1 4 1 5 9 3 2 5 1 3 4 6 Output: 5 4 9 Explanation: - For the first query, the range is from building 2 to building 5, and the maximum height is 5. - For the second query, the range is from building 1 to building 3, and the maximum height is 4. - For the third query, the range is from building 4 to building 6, and the maximum height is 9.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (4 * n) self.build(data, 0, 0, n - 1) def build(self, data, node, start, end): if start == end: self.tree[node] = data[start] else: mid = (start + end) // 2 self.build(data, 2*node + 1, start, mid) self.build(data, 2*node + 2, mid + 1, end) self.tree[node] = max(self.tree[2*node + 1], self.tree[2*node + 2]) def query_max(self, L, R, node, start, end): if R < start or L > end: return float(\'-inf\') if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_query = self.query_max(L, R, 2*node + 1, start, mid) right_query = self.query_max(L, R, 2*node + 2, mid + 1, end) return max(left_query, right_query) def max_building_heights(heights, queries): seg_tree = SegmentTree(heights) results = [] for L, R in queries: max_height = seg_tree.query_max(L-1, R-1, 0, 0, seg_tree.n - 1) results.append(max_height) return results"},{"question":"Bob the Builder has a pile of blocks with varying heights. He wants to build the tallest tower possible by stacking these blocks on top of each other. However, there\'s a condition: a block can be placed on top of another block only if it is shorter than the block below it. Given the heights of the blocks, determine the maximum height of the tower Bob can build. Constraints * 1 ≤ N ≤ 100 (N is the number of blocks) * 1 ≤ height_i ≤ 100 (height_i is the height of the i-th block) Input The input is given from Standard Input in the following format: ``` N height_1 height_2 ... height_N ``` Output Print the maximum height of the tower that can be built. Examples Input ``` 5 3 1 2 4 6 ``` Output ``` 10 ``` Input ``` 4 7 3 2 8 ``` Output ``` 18 ```","solution":"def maximum_tower_height(N, heights): Returns the maximum height of the tower that can be built with the given constraints. :param N: int - the number of blocks :param heights: list of int - heights of the blocks :return: int - maximum height of the tower # We need to sort the blocks in non-increasing order to achieve the tallest tower heights.sort(reverse=True) # Calculate the maximum possible height by summing the sorted heights max_height = sum(heights) return max_height if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) print(maximum_tower_height(N, heights))"},{"question":"A supermarket offers a discount program where buyers get different levels of discounts based on their total purchase amount. The discount rules are as follows: - If the total purchase is less than 50, no discount. - If the total purchase is between 50 and 100, a 10% discount. - If the total purchase is between 100 and 200, a 20% discount. - If the total purchase is more than 200, a 30% discount. Your task is to write a program that calculates the final price after applying the discount based on the input purchase amounts. Input Input consists of several datasets. In the first line, the number of datasets N (1 ≤ N ≤ 50) is given. Each dataset consists of a single line: - The total purchase amount (a floating-point number with two decimal places). Output For each dataset, print the final price after applying the appropriate discount, formatted to two decimal places. Example Input 3 45.00 75.50 150.75 Output 45.00 67.95 120.60","solution":"def calculate_final_price(purchase_amount): Calculate the final price after applying the discount based on the purchase amount. if purchase_amount < 50: discount = 0 elif 50 <= purchase_amount < 100: discount = 0.10 elif 100 <= purchase_amount < 200: discount = 0.20 else: discount = 0.30 final_price = purchase_amount * (1 - discount) return round(final_price, 2) def process_purchases(purchase_amounts): Process a list of purchase amounts and return a list of final prices after discounts. final_prices = [calculate_final_price(amount) for amount in purchase_amounts] return final_prices"},{"question":"George loves coding challenges and often participates in contests. One day, he stumbled upon a problem where he needs to find famous \\"lucky numbers.\\" A number is considered lucky if all the digits of the number are either 4 or 7. George is curious and wants you to help him write a program that determines whether a given integer is a lucky number or not. Your task is to read an integer ( n ) and print \\"YES\\" if ( n ) is a lucky number and \\"NO\\" otherwise. Constraints: 1 ≤ ( n ) ≤ 10^18 Input: The input contains a single integer ( n ). Output: Output \\"YES\\" if ( n ) is a lucky number, otherwise output \\"NO\\". Sample Input 1: 47 Sample Output 1: YES Sample Input 2: 123 Sample Output 2: NO Explanation: 1) In the first sample, all the digits are 4 or 7, making 47 a lucky number. 2) In the second sample, the digit 1 is not a 4 or 7, so 123 is not a lucky number.","solution":"def is_lucky_number(n): Determines if the given integer n is a lucky number. A number is considered lucky if all the digits are either 4 or 7. :param n: Integer to check :return: \\"YES\\" if n is a lucky number, \\"NO\\" otherwise n_str = str(n) for char in n_str: if char != \'4\' and char != \'7\': return \\"NO\\" return \\"YES\\""},{"question":"You are given two binary strings, \'a\' and \'b\', of the same length, consisting of characters \'0\' and \'1\'. Your task is to determine the minimum number of bit flips required to make the strings the same. A bit flip changes a \'0\' to a \'1\' or a \'1\' to a \'0\'. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the binary strings. The second line contains the binary string \'a\' of length n. The third line contains the binary string \'b\' of length n. Output Output one integer — the minimum number of bit flips required to make the binary strings \'a\' and \'b\' identical. Examples Input 3 110 101 Output 2 Input 5 00011 11001 Output 3 Input 4 1111 1111 Output 0 Note In the first example, you need to flip the second bit of \'a\' from \'1\' to \'0\', and the third bit of \'a\' from \'0\' to \'1\', to match string \'b\'. In the second example, you need to flip the first two bits and the last bit of \'a\' to match the bits of \'b\'. In the third example, the strings are already identical, so no bit flips are required.","solution":"def min_bit_flips(n, a, b): Determines the minimum number of bit flips required to make binary strings \'a\' and \'b\' identical. Parameters: n (int): the length of the binary strings a (str): the binary string \'a\' b (str): the binary string \'b\' Returns: int: the minimum number of bit flips required # Initialize the counter for bit flips bit_flips = 0 # Loop through each bit in the strings for i in range(n): if a[i] != b[i]: bit_flips += 1 return bit_flips"},{"question":"You are given a list of `n` integers. Your task is to determine the sum of the smallest `k` integers in the list. If `k` is greater than the number of integers in the list, simply return the sum of all integers. Input - The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^3), where `n` is the number of integers in the list and `k` is the number of smallest integers to sum. - The second line contains `n` integers separated by spaces, representing the list of integers. Output - Output a single integer which is the sum of the smallest `k` integers in the list. Example Input ``` 5 2 4 1 7 3 2 ``` Output ``` 3 ``` Explanation: - The list of integers is `[4, 1, 7, 3, 2]`. - The smallest 2 integers are 1 and 2. - Their sum is `1 + 2 = 3`. Example Input ``` 4 5 8 5 3 10 ``` Output ``` 26 ``` Explanation: - The list of integers is `[8, 5, 3, 10]`. - As `k` is greater than the number of integers in the list, sum all integers. - Their sum is `8 + 5 + 3 + 10 = 26`.","solution":"def sum_of_smallest_k_integers(n, k, integers): Returns the sum of the smallest k integers in the list. If k is greater than the number of integers in the list, it returns the sum of all integers. :param n: int: The number of integers in the list. :param k: int: The number of smallest integers to sum. :param integers: list: The list of integers. :return: int: The sum of the smallest k integers. integers.sort() # Sort the list in ascending order k = min(k, n) # Ensure k does not exceed the number of integers return sum(integers[:k])"},{"question":"Implement a program to determine if a given year is a leap year. A year is a leap year if it is divisible by 4, except for years that are divisible by 100 but not divisible by 400. Write a function that takes an integer year and returns a boolean indicating if the year is a leap year or not. Input Your program will receive an integer year (0 ≤ year ≤ 10000). Output The program should output \\"true\\" if the given year is a leap year, otherwise \\"false\\". Example Input 2000 1900 2004 Output true false true","solution":"def is_leap_year(year): Determines if the given year is a leap year. A year is a leap year if it is divisible by 4, except for years that are divisible by 100 but not divisible by 400. Args: year (int): The year to check Returns: bool: True if the year is a leap year, False otherwise if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False return True return False"},{"question":"You are given a string consisting of lowercase English letters. Your task is to compute the number of pairs of indices (i, j) such that 1 ≤ i < j ≤ n and the substring from the i-th to j-th character (inclusive) is a palindrome. A string is called a palindrome if it reads the same forwards as backwards. Input The first line contains a single integer k (1 ≤ k ≤ 1,000,000) — the length of the string. The second line contains the string s of length k. Output Print a single integer — the number of pairs of indices (i, j) such that the substring from the i-th to j-th character is a palindrome. Examples Input 5 ababa Output 6 Input 4 abba Output 4 Explanation In the first example, the palindromic substrings are \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\". In the second example, the palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"abba\\".","solution":"def count_palindrome_substrings(k, s): Returns the number of palindromic substrings in the given string. :param k: Length of the string s :param s: The given string :return: Number of palindromic substrings def is_palindrome(s): return s == s[::-1] count = 0 for i in range(k): for j in range(i + 1, k + 1): if is_palindrome(s[i:j]): count += 1 return count"},{"question":"In a faraway kingdom, there is a special kind of sandcastle built by using an infinite supply of identical square tiles. Each tile has a side length of 1 unit. The king of this kingdom is very particular about aesthetics, and he wants every sandcastle to follow a specific pattern. The sandcastle should be constructed in rows, from the ground up, with each row containing a certain number of tiles. The first row should contain 1 tile, the second row should contain 2 tiles, the third row 3 tiles, and so on, incrementing by 1 tile each time. The king gives you the task to determine whether a given number n of tiles is sufficient to complete k rows of the sandcastle pattern. The value k is specified for each test case. Input: - The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each of the next t lines contains two integers n (1 ≤ n ≤ 10^9) and k (1 ≤ k ≤ 10^5) — the number of square tiles and the specific row number to complete, respectively. Output: - For each test case, output \\"YES\\" if the given number of tiles is sufficient to complete exactly k rows of the sandcastle pattern, otherwise output \\"NO\\". Example Input: 5 10 4 15 5 6 3 7 3 1 1 Output: YES YES YES NO YES Note: In the first test case, you need to check if 10 tiles can complete 4 rows: 1+2+3+4 = 10. So, the answer is \\"YES\\". In the second test case, you need to check if 15 tiles can complete 5 rows: 1+2+3+4+5 = 15. So, the answer is \\"YES\\". In the third test case, you need to check if 6 tiles can complete 3 rows: 1+2+3 = 6. So, the answer is \\"YES\\". In the fourth test case, you need to check if 7 tiles can complete 3 rows: 1+2+3 = 6. So, the answer is \\"NO\\" since you need exactly 6 tiles and not 7. In the fifth test case, you need to check if 1 tile can complete 1 row: 1 = 1. So, the answer is \\"YES\\".","solution":"def can_complete_rows(t, test_cases): Determines if the given number of tiles n is sufficient to complete k rows of the sandcastle pattern. Parameters: t (int): number of test cases test_cases (list of tuples): each tuple contains (n, k) with n as the number of tiles and k as the specific row number to complete Returns: list: results for each test case, \\"YES\\" if n tiles can complete exactly k rows, otherwise \\"NO\\" results = [] for n, k in test_cases: needed_tiles = k * (k + 1) // 2 if n == needed_tiles: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid-based, top-down video game. The player can move on a grid of size n × m. The player starts at the top-left corner of the grid (1, 1) and is trying to reach the bottom-right corner (n, m). The player can move one cell at a time either to the right or down. There are obstacles in some of the cells which prevent the player from moving through those cells. You need to determine the number of distinct paths from the top-left corner to the bottom-right corner which avoid all obstacles. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters describing the grid. The character ‘.’ indicates an empty cell the player can move through, and the character ‘#’ indicates an obstacle. Output Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner which do not pass through any obstacles. If there are no such paths, print 0. Examples Input 3 3 ... ... ... Output 6 Input 3 3 .#. .#. ... Output 1 Input 3 3 .#. # ... Output 0 Note In the first example, there are 6 distinct paths from (1, 1) to (3, 3): (1, 1)->(1, 2)->(1, 3)->(2, 3)->(3, 3), (1, 1)->(1, 2)->(2, 2)->(2, 3)->(3, 3), (1, 1)->(1, 2)->(2, 2)->(3, 2)->(3, 3), (1, 1)->(2, 1)->(2, 2)->(2, 3)->(3, 3), (1, 1)->(2, 1)->(2, 2)->(3, 2)->(3, 3), (1, 1)->(2, 1)->(3, 1)->(3, 2)->(3, 3). In the second example, there is only one distinct path from (1, 1) to (3, 3): (1, 1)->(2, 1)->(3, 1)->(3, 2)->(3, 3). In the third example, there is no path from (1, 1) to (3, 3) due to the obstacles.","solution":"def unique_paths_with_obstacles(n, m, grid): # If start or end is an obstacle, there are no paths if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given a string `S` containing only lowercase alphabets and the symbol `#`, reduce the string by the following rules: 1. When the symbol `#` is encountered, it deletes the character before it. 2. If there is no character before `#`, it remains in the string. Write a function `process_string(S)` that returns the resulting string after applying the above rules. Input: - A single string `S` (1 ≤ |S| ≤ 10^5) Output: - A single string representing the reduced version of `S`. Examples: Input: ab#c Output: ac Input: a#bc#d Output: bd Input: #a#b Output: `` # returns an empty string Notes: 1. The \'#\' symbols delete characters starting from the back, similar to handling backspace keys. 2. The symbol \'#\' itself is removed from the output, except when it cannot delete a character preceding it. Your task is to implement the function `process_string(S)` that efficiently processes the string as described.","solution":"def process_string(S): Processes the input string S by applying the delete rules using \'#\'. stack = [] for char in S: if char == \'#\': if stack: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"You are given an NxN grid, where each cell can either be empty or contain a tree. There is exactly one tree in each row and each column of the grid. You need to cut down all the trees in the grid. However, there is one restriction: you can only cut down a tree if it becomes the only tree left in its row or column after the cut. Determine the minimum number of cuts needed to cut down all trees under the given restriction. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of the following: - The first line contains an integer n (1 ≤ n ≤ 100) representing the size of the grid. - The next n lines each contain n characters that are either \'.\' (indicating an empty cell) or \'T\' (indicating a cell with a tree). Output For each test case, output a single line containing the minimum number of cuts needed to cut down all trees under the restriction. Example Input 2 3 .T. ..T T.. 4 .T.. ..T. T... ...T Output 3 4 Explanation In the first test case, one possible solution is: - Cut tree at (1,2) - Cut tree at (2,3) - Cut tree at (3,1) This results in the minimum of 3 cuts. In the second test case, one possible solution is: - Cut tree at (4,4) - Cut tree at (2,3) - Cut tree at (3,1) - Cut tree at (1,2) This results in the minimum of 4 cuts.","solution":"def min_cuts_to_remove_trees(t, test_cases): results = [] for i in range(t): n, grid = test_cases[i] cuts = [] for j in range(n): for k in range(n): if grid[j][k] == \'T\': cuts.append((j, k)) results.append(len(cuts)) return results"},{"question":"Maria loves to play with binary strings, and she recently came up with an interesting problem. She wants to transform a given binary string into another binary string of the same length by following specific rules. The operation allows her to flip exactly one bit (change \'0\' to \'1\' or \'1\' to \'0\') in each move. The challenge is to determine the minimum number of moves required to transform the initial binary string into the target binary string. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the binary strings. The second line contains a binary string of length n representing the initial state. The third line contains another binary string of length n representing the target state. Output Print a single integer denoting the minimum number of moves required to transform the initial binary string into the target binary string. Examples Input 5 01101 11000 Output 3 Input 4 1011 1011 Output 0 Input 6 000111 111000 Output 6 Note In the first example, the initial string \\"01101\\" can be transformed into \\"11000\\" with the following sequence of flips: - Flip the 1st bit: \\"11101\\" - Flip the 3rd bit: \\"11001\\" - Flip the 5th bit: \\"11000\\" In the second example, the initial string \\"1011\\" is already equal to the target string, so no moves are needed. In the third example, all bits need to be flipped to transform \\"000111\\" into \\"111000\\".","solution":"def min_moves_to_transform(n, initial, target): Return the minimum number of moves required to transform the initial binary string into the target binary string by flipping exactly one bit in each move. moves = 0 for i in range(n): if initial[i] != target[i]: moves += 1 return moves"},{"question":"Given a list of integers, write a function that returns the maximum product of any three numbers in the list. Your function should handle both positive and negative numbers. Input The input is a single line containing space-separated integers. The list will contain at least three integers, and each integer will be between -10^3 and 10^3, inclusive. Output Output a single integer - the maximum product of any three numbers from the input list. Examples Input 1 10 2 6 5 3 Output 300 Input -10 -10 5 2 Output 500","solution":"def max_product_of_three(nums): Given a list of integers, returns the maximum product of any three numbers in the list. nums.sort() return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"},{"question":"You are given a tree with N nodes labeled from 1 to N. Each node has a value associated with it. The value of the k-th node is represented by V_k. You need to answer multiple queries on this tree. The queries are of two types: 1. `1 u x`: Update the value of node u to x. 2. `2 u v`: Find the maximum value among all nodes on the path from node u to node v. Constraints * 1 leq N leq 100,000 * 1 leq Q leq 200,000 * 1 leq V_k leq 1,000,000,000 * 1 leq u, v leq N Input The input is given from the Standard Input in the following format: N V_1 V_2 V_3 ... V_N N-1 lines with two integers u and v denoting an edge between node u and node v Q (number of queries) Q lines with queries of the type described above Output For each query of type 2, output the maximum value found on the path from u to v. Example Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 5 2 1 4 1 1 6 2 1 4 1 4 10 2 1 4 Output 4 6 10","solution":"class Tree: def __init__(self, values, edges): self.values = values self.n = len(values) self.tree = [[] for _ in range(self.n + 1)] self.depth = [0] * (self.n + 1) self.parent = [0] * (self.n + 1) for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) self.lca_preprocess() def lca_preprocess(self): self.LOG = 17 self.dp = [[-1] * (self.n + 1) for _ in range(self.LOG)] self.max_value = [[-float(\'inf\')] * (self.n + 1) for _ in range(self.LOG)] self.dfs(1, -1, 0) for i in range(1, self.LOG): for u in range(1, self.n + 1): if self.dp[i - 1][u] != -1: self.dp[i][u] = self.dp[i - 1][u] self.max_value[i][u] = max(self.max_value[i - 1][u], self.max_value[i - 1][self.dp[i - 1][u]]) def dfs(self, u, p, depth): self.parent[u] = p self.depth[u] = depth self.dp[0][u] = p self.max_value[0][u] = self.values[u - 1] for v in self.tree[u]: if v != p: self.dfs(v, u, depth + 1) def update_value(self, u, x): self.values[u - 1] = x def find_max(self, u, v): ans = -float(\'inf\') if self.depth[u] < self.depth[v]: u, v = v, u for i in range(self.LOG - 1, -1, -1): if self.depth[u] - (1 << i) >= self.depth[v]: ans = max(ans, self.max_value[i][u]) u = self.dp[i][u] if u == v: return max(ans, self.values[u - 1]) for i in range(self.LOG - 1, -1, -1): if self.dp[i][u] != self.dp[i][v]: ans = max(ans, self.max_value[i][u], self.max_value[i][v]) u = self.dp[i][u] v = self.dp[i][v] return max(ans, self.max_value[0][u], self.max_value[0][v], self.values[self.parent[u] - 1]) def process(n, values, edges, queries): tree = Tree(values, edges) results = [] for query in queries: if query[0] == 1: _, u, x = query tree.update_value(u, x) tree.lca_preprocess() elif query[0] == 2: _, u, v = query results.append(tree.find_max(u, v)) return results"},{"question":"Imagine a warehouse that stores a variety of items. Each item has a unique ID and belongs to one of several categories. You are given a list of items, where each item is represented by a tuple (id, category). You need to group the items by their categories and create inventory reports. The inventory report for each category should list the item IDs in that category sorted in ascending order. Write a function `generate_inventory_report(items)` that takes a list of tuples `items` where each tuple contains two elements: the item ID (an integer) and the category (a string). The function should return a dictionary where each key is a category and the corresponding value is a list of sorted item IDs for that category. Input Format: - A list of tuples, where each tuple consists of an integer and a string representing the item ID and the category, respectively. Output Format: - A dictionary where keys are category names, and values are lists of item IDs sorted in ascending order. Function Signature: ```python def generate_inventory_report(items: List[Tuple[int, str]]) -> Dict[str, List[int]]: ``` Example: ```python items = [(1, \\"electronics\\"), (2, \\"furniture\\"), (3, \\"electronics\\"), (4, \\"furniture\\"), (5, \\"furniture\\")] print(generate_inventory_report(items)) ``` Expected Output: ```python { \\"electronics\\": [1, 3], \\"furniture\\": [2, 4, 5] } ``` Explanation - The items list contains 5 tuples representing item IDs and their respective categories. - The category \\"electronics\\" has items with IDs 1 and 3, which are sorted and listed. - The category \\"furniture\\" has items with IDs 2, 4, and 5, which are sorted and listed.","solution":"from typing import List, Tuple, Dict def generate_inventory_report(items: List[Tuple[int, str]]) -> Dict[str, List[int]]: Takes a list of item tuples (id, category) and returns a dictionary where keys are category names and values are sorted lists of item IDs in that category. inventory = {} for item_id, category in items: if category not in inventory: inventory[category] = [] inventory[category].append(item_id) for category in inventory: inventory[category].sort() return inventory"},{"question":"Given an integer `n`, find any permutation of the numbers from `1` to `n` such that for any adjacent elements `a` and `b` in the permutation, `|a - b|` is not equal to `1`. If no such permutation exists, output `-1`. Your task is to implement the function and return the appropriate output. # Input - Input will be a single integer `n` (1 ≤ n ≤ 1000). # Output - Output a single line containing a permutation of the numbers `1` to `n` that satisfies the conditions, or `-1` if no valid permutation exists. # Example Example 1: Input: ``` 4 ``` Output: ``` 2 4 1 3 ``` Example 2: Input: ``` 3 ``` Output: ``` -1 ``` Example 3: Input: ``` 7 ``` Output: ``` 3 1 4 2 5 7 6 ``` # Explanation - In Example 1, a permutation is `2 4 1 3` which satisfies the condition that the absolute difference between any two adjacent elements is not equal to `1`. - In Example 2, there is no permutation possible of `[1, 2, 3]` such that the absolute difference between any two adjacent elements is not equal to `1`.","solution":"def find_permutation(n): if n == 1: return [1] if n == 2 or n == 3: return [-1] result = [] if n % 2 == 0: for i in range(2, n+1, 2): result.append(i) for i in range(1, n, 2): result.append(i) else: for i in range(2, n, 2): result.append(i) for i in range(1, n+1, 2): result.append(i) return result"},{"question":"Due to a sudden software upgrade, a company has created two different but very similar versions of a file on their system. They want to identify the minimum number of changes required to make the contents of two files identical. A change is defined as insertion, deletion, or replacement of a character. Write a program to find the minimum number of changes needed to make the contents of the two given files identical. Input The input consists of two lines: First line contains the first string s1 (1 ≤ |s1| ≤ 1000) – the contents of the first version of the file. Second line contains the second string s2 (1 ≤ |s2| ≤ 1000) – the contents of the second version of the file. Output The output should be a single integer, the minimum number of changes required. Example Input abcdef azced Output 3 Hint: The minimum number of changes is determined by transforming the first string into the second string using the least number of insertions, deletions, and replacements. Explanation The first line of the input is `abcdef` and the second line is `azced`. One possible way to transform \'abcdef\' to \'azced\' in 3 steps could be: - Replace \'b\' with \'z\'. - Replace \'f\' with \'d\'. - Delete \'e\'.","solution":"def min_edit_distance(s1, s2): Calculate the minimum number of changes required to make the contents of two given files identical. Uses the dynamic programming approach to solve the edit distance problem. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: int: The minimum number of changes required. m, n = len(s1), len(s2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for the base cases for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, the only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last char and recurse for the remaining substring elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"You are given an integer array. In a single operation, you can increment or decrement any element of the array by 1. Your task is to make all elements of the array equal in the minimum number of operations. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains a single integer n (the length of the array). The second line contains n space-separated integers representing the elements of the array. Output For each test case, output a single line containing a single integer corresponding to the minimum number of operations needed. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^4 1 ≤ array[i] ≤ 10^6 Example Input: 2 3 1 2 3 4 1 1 1 100 Output: 2 99 Explanation Example case 1. We can change the second element from 2 to 1 and the third element from 3 to 1, or change the first element from 1 to 2 and the third element from 3 to 2. Example case 2. We need 99 operations to change the last element from 100 to 1.","solution":"def min_operations_to_make_equal(arr): median = sorted(arr)[len(arr) // 2] # Find median of the array operations = sum(abs(x - median) for x in arr) return operations def min_operations_for_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_operations_to_make_equal(arr)) return results"},{"question":"A popular online marketplace provides a special discount mechanism for their customers. During a sale event, they allow each user to apply for a discount in the form of coupons. Each coupon can only be used on a single item and it reduces the item\'s price by `d` percent. A user can apply at most `m` coupons, but no more than one coupon on each item. Given a list of item prices, determine the minimum total amount the user would have to pay after optimally using the coupons. Input The first line contains three integers `n`, `m`, and `d` (1 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ d ≤ 100) — the number of items, the maximum number of coupons the user can use, and the discount percentage applied by each coupon, respectively. The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10^6) — the prices of the items. Output Print a single integer — the minimum total amount the user would have to pay after optimally using the coupons. Examples Input 5 2 20 100 200 300 400 500 Output 1200 Input 4 4 50 1000 1000 1000 1000 Output 2000 Input 3 1 10 150 100 200 Output 410 Note In the first sample: - The user can use the 20% discount coupon on the two items with the highest prices (400 and 500). After using the coupons, their prices become 320 and 400. - The total amount to be paid is 100 + 200 + 300 + 320 + 400 = 1320. In the second sample: - The user can use the 50% discount coupons on all four items. Each item\'s price will be reduced from 1000 to 500. - The total amount to be paid is 4 * 500 = 2000. In the third sample: - The user can use the 10% discount coupon on the item with the highest price (200). After using the coupon, its price becomes 180. - The total amount to be paid is 150 + 100 + 180 = 430.","solution":"def minimum_total_amount(n, m, d, prices): Function to calculate the minimum total amount to be paid after applying discounts. n : int : number of items m : int : maximum number of coupons d : int : discount percentage prices : list : list of item prices return : int : minimum total amount to be paid # Sort the prices in descending order prices.sort(reverse=True) # Apply the discount to the highest prices first for i in range(m): prices[i] = prices[i] * (100 - d) / 100 # Calculate the total amount to be paid total_amount = sum(prices) return int(total_amount) # Example usage: # print(minimum_total_amount(5, 2, 20, [100, 200, 300, 400, 500])) # Should print 1320 # print(minimum_total_amount(4, 4, 50, [1000, 1000, 1000, 1000])) # Should print 2000 # print(minimum_total_amount(3, 1, 10, [150, 100, 200])) # Should print 430"},{"question":"You are given an integer array `arr` of length `n`. An operation is defined as choosing an element from the array such that it is the smallest number not yet removed and then removing all its multiples (including the number itself) from the array. Your task is to find the minimum number of operations required to remove all elements from the array. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^6), the size of the array. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^6), the elements of the array. Output Print a single integer, the minimum number of operations required to remove all elements from the array. Example Input 6 3 9 6 2 15 12 Output 2 Explanation Perform the following operations: 1. Choose 2 and remove 2, 4 (if it exists), 6, 8 (if it exists), 10 (if it exists), and 12 from the array. Array after this operation: [3, 9, 15] 2. Choose 3 and remove 3, 6 (already removed), 9, 12 (already removed), and 15 from the array. Array after this operation: [] All elements have been removed, and the total number of operations performed is 2.","solution":"def min_operations_to_remove_elements(arr): Returns the minimum number of operations to remove all elements from the array. An operation is defined as choosing the smallest number not yet removed and then removing all its multiples. arr = sorted(set(arr)) # Sort and remove duplicates n = len(arr) visited = [False] * (10**6 + 1) operations = 0 for num in arr: if not visited[num]: # Perform the operation starting with this number for multiple in range(num, 10**6 + 1, num): if visited[multiple]: continue visited[multiple] = True operations += 1 return operations"},{"question":"Dr. Amy is working on a secret project that involves finding patterns in sequences. She came across an interesting sequence defined as follows: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2), for n > 2 This sequence is known as the Fibonacci sequence. Dr. Amy wants you to help her find the Nth Fibonacci number modulo 10^9+7. Input Format The first line contains T, the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 10^9). Output Format For each test case, output the Nth Fibonacci number modulo 10^9+7. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^9 SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 5 55 Explanation The Fibonacci sequence up to the 10th term is: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 5th Fibonacci number is 5, and the 10th Fibonacci number is 55. As both values are less than 10^9+7, we don\'t need to reduce them further.","solution":"def fibonacci_mod(n, mod=10**9+7): Returns the Nth Fibonacci number modulo mod. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, (a + b) % mod return b def process_fibonacci_cases(case_list): mod = 10**9 + 7 results = [] for n in case_list: results.append(fibonacci_mod(n, mod)) return results"},{"question":"A robotics competition requires teams to develop a pathfinding algorithm for their robots to navigate through a grid. The grid is represented as an `n x n` matrix, where each cell can either be an empty space, represented by `0`, or an obstacle, represented by `1`. Initially, the robot is placed in the top-left corner of the grid (cell (0, 0)), and it needs to reach the bottom-right corner of the grid (cell (n-1, n-1)). The robot can move up, down, left, or right, but it cannot move diagonally. It is important to note that the robot cannot move through cells containing obstacles. You need to implement a function that takes the grid as input and returns the shortest path from the top-left corner to the bottom-right corner in terms of the number of cells visited, including both the start and end cells. If there is no possible path, return -1. **Input** - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains the integer `n` (2 ≤ n ≤ 1000), representing the size of the grid. - The next `n` lines each contain `n` integers (either `0` or `1`), representing the grid. **Output** - For each test case, print a single integer, the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. **Example** **Input:** ``` 3 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 3 0 1 1 0 0 1 1 0 0 3 0 1 0 1 1 0 1 0 0 ``` **Output:** ``` 7 5 -1 ``` **Explanation:** - For the first test case, the possible shortest path is: (0, 0) → (0, 1) → (0, 2) → (0, 3) → (1, 3) → (2, 3) → (3, 3) - For the second test case, the possible shortest path is: (0, 0) → (1, 0) → (1, 1) → (2, 1) → (2, 2) - For the third test case, there is no possible path from the top-left corner to the bottom-right corner, so the output is -1.","solution":"from collections import deque def shortest_path_in_grid(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 direction_vectors = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if (row, col) == (n-1, n-1): return dist for dr, dc in direction_vectors: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1 def solve(test_cases): results = [] for t in test_cases: n, grid = t[\'n\'], t[\'grid\'] results.append(shortest_path_in_grid(grid)) return results"},{"question":"You are given a string consisting of lowercase alphabets and you need to determine the highest frequency of any substring of length k within the string. If there are multiple substrings with the same highest frequency, return the lexicographically smallest substring among them. * A substring is defined as a contiguous sequence of characters within a string. Input The first line contains an integer k (1 ≤ k ≤ 10), the length of the substring to consider. The second line contains a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase alphabets. Output Output the substring of length k that has the highest frequency. If there are multiple substrings with the same highest frequency, return the lexicographically smallest one. Examples Input 3 abcabcabc Output abc Input 2 aababbbab Output ab Note In the first test, all substrings of length 3 appear with the frequency: - \\"abc\\" → 3 times. - \\"bca\\" → 2 times. - \\"cab\\" → 2 times. Since the substring \\"abc\\" has the highest frequency and no other substring of the same length matches its frequency, it is returned as the result. In the second test, the substrings of length 2 appear with the frequency: - \\"aa\\" → 1 time. - \\"ab\\" → 3 times. - \\"ba\\" → 2 times. - \\"bb\\" → 2 times. The substrings \\"ab\\", \\"ba\\", and \\"bb\\" have the highest frequency of 2. Among these, \\"ab\\" is lexicographically smallest, so it’s returned as the result.","solution":"def highest_frequency_substring(k, s): from collections import Counter substr_counter = Counter() n = len(s) # Generate all possible substrings of length k and count their frequencies for i in range(n - k + 1): substr = s[i:i + k] substr_counter[substr] += 1 # Determine the max frequency max_freq = max(substr_counter.values()) # Find all substrings with the max frequency max_freq_substrings = [substr for substr, freq in substr_counter.items() if freq == max_freq] # Return the lexicographically smallest substring among those with max frequency return min(max_freq_substrings)"},{"question":"Given an array of integers, your task is to process a series of queries. Each query asks you to find the maximum sum of a subarray of the given array that starts and ends within specified indices. Constraints: * 1 ≤ N, Q ≤ 2 × 10^5 * -10^9 ≤ a_i ≤ 10^9 * 1 ≤ l_i ≤ r_i ≤ N * All values in the input are integers. Input Input is given from Standard Input in the following format: N Q a_1 a_2 ... a_N l_1 r_1 l_2 r_2 : l_Q r_Q Output Print Q lines. The i-th line should contain the response to the i-th query. Examples Input 5 3 1 -2 3 -1 4 1 3 2 5 1 5 Output 3 6 6 Input 6 2 -1 -2 -3 -4 -5 -6 1 3 4 6 Output -1 -4","solution":"def process_queries(n, q, array, queries): def kadane(partial_array): max_sum = -float(\'inf\') current_sum = 0 for num in partial_array: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum results = [] for l, r in queries: sub_array = array[l-1:r] result = kadane(sub_array) results.append(result) return results # Wrapper function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) array = list(map(int, data[2:n+2])) queries = [] index = n + 2 for _ in range(q): l = int(data[index]) r = int(data[index + 1]) queries.append((l, r)) index += 2 results = process_queries(n, q, array, queries) for result in results: print(result)"},{"question":"A software company has a network of computers connected by a series of one-way data transfer routes. Each route allows direct data transfer between two specific computers but not necessarily in both directions. The goal is to determine the minimum time required to transfer data from a particular source computer to all other computers in the network. Each route has an associated transfer time. Given the source computer and the list of routes with their transfer times, calculate the minimum transfer times from the source computer to all other computers. Input The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of computers and the number of one-way data transfer routes respectively. Each of the next `m` lines contains three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000) — representing a route from computer `u` to computer `v` with a transfer time `t`. The last line contains an integer `s` (1 ≤ s ≤ n) — the source computer. Output Print a single line containing n integers. The i-th integer should be the minimum time required to transfer data from the source computer `s` to computer `i`. If it is impossible to transfer data to a computer `i`, print -1 for that computer. Examples Input 5 7 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 10 1 Output 0 2 3 9 6 Input 4 5 1 2 1 2 3 2 3 4 3 1 3 4 2 4 5 2 Output -1 0 2 5","solution":"import heapq def shortest_transfer_times(n, m, routes, s): # Initialize graph graph = {i: [] for i in range(1, n + 1)} for u, v, t in routes: graph[u].append((v, t)) # Initialize distance table distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 # Priority queue (min-heap) pq = [(0, s)] while pq: current_distance, current_node = heapq.heappop(pq) # If the extracted distance is larger than the stored distance, continue if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # Format the result as needed result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"In a coding competition, participants are required to complete a series of tasks. Each task has a difficulty level and a completion time associated with it. The goal is to identify the highest difficulty level tasks that can be completed within a specified total time limit. You are given an array of tasks, where each task is represented by a tuple (difficulty, time). The competition organizers also provide a total time limit, T. Write a function that returns the maximum difficulty level of the tasks that can be completed without exceeding the total time limit. If it is not possible to complete any task, return 0. Constraints * 1 ≤ number of tasks ≤ 100 * 1 ≤ difficulty ≤ 100 * 1 ≤ time ≤ 100 * 1 ≤ T ≤ 100 The function should be defined as: ```python def max_difficulty(tasks: List[Tuple[int, int]], T: int) -> int: pass ``` # Input The input consists of: * An integer T. * A list of tuples, where each tuple contains two integers: difficulty and time. # Output Return an integer representing the maximum difficulty level of the tasks that can be completed within the given time limit. # Examples Input ```python T = 5 tasks = [(4, 3), (3, 2), (5, 6), (2, 1)] ``` Output ```python 4 ``` Input ```python T = 10 tasks = [(5, 5), (4, 4), (10, 7)] ``` Output ```python 10 ``` Input ```python T = 3 tasks = [(6, 8), (7, 9)] ``` Output ```python 0 ```","solution":"from typing import List, Tuple def max_difficulty(tasks: List[Tuple[int, int]], T: int) -> int: Returns the maximum difficulty level of tasks that can be completed within the given time limit T. max_diff = 0 for difficulty, time in tasks: if time <= T: max_diff = max(max_diff, difficulty) return max_diff"},{"question":"Design a program that aims to filter and sort a list of student records based on specific criteria. The program will handle three types of operations: adding a student, filtering students by a minimum grade, and listing students in alphabetical order. Each student record consists of a name (a string with a maximum length of 100 characters) and a grade (an integer between 0 and 100 inclusive). The operations will be provided in sequence and should be executed accordingly. **Operations:** 1. `ADD name grade`: Adds a student with the given `name` and `grade` to the list. 2. `FILTER min_grade`: Filters out students whose grades are below `min_grade`. 3. `LIST`: Lists all student names in alphabetical order. **Input:** - Multiple operations will be provided until the end of input is reached. Assume the input is well-formed. - Each operation is provided on a new line. **Output:** - For each `LIST` operation, output the names of the students in alphabetical order, each name on a new line. If no students exist after filtering, output nothing for that particular `LIST` operation. Ensure that your output for `LIST` operations is correct based on the sequential execution of operations. By the end of the operations, any unwanted students should have been filtered out, and the remaining students listed as specified. **Example:** *Input:* ``` ADD John 85 ADD Alice 90 ADD Bob 75 FILTER 80 LIST ADD Charlie 95 LIST ``` *Output:* ``` Alice John Alice Charlie John ``` Your task is to implement this program in a language of your choice. Ensure the code properly handles the given operations, with efficient filtering and sorting mechanisms to produce the correct outputs.","solution":"def student_records(operations): students = [] for operation in operations: parts = operation.split() if parts[0] == \'ADD\': name = parts[1] grade = int(parts[2]) students.append((name, grade)) elif parts[0] == \'FILTER\': min_grade = int(parts[1]) students = [student for student in students if student[1] >= min_grade] elif parts[0] == \'LIST\': sorted_students = sorted(students, key=lambda x: x[0]) for student in sorted_students: print(student[0]) # Example usage: # operations = [\\"ADD John 85\\", \\"ADD Alice 90\\", \\"ADD Bob 75\\", \\"FILTER 80\\", \\"LIST\\", \\"ADD Charlie 95\\", \\"LIST\\"] # student_records(operations)"},{"question":"Tom loves playing with strings. He has a string `S` which consists of lowercase English letters. He wants to find the longest substring such that no consecutive characters are the same. The substring must be contiguous. Help Tom to find the length of such a substring. Input: The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a string `S`. Output: For each test case, output a single integer - the length of the longest substring with no consecutive characters being the same. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Example Input 3 abbba abcde aabbcc Example Output 2 5 2 Explanation: 1. For the string \\"abbba\\", the longest substring without consecutive characters being the same is \\"ab\\" or \\"ba\\", both of length 2. 2. For the string \\"abcde\\", all characters are different consecutively, so the answer is the entire string length which is 5. 3. For the string \\"aabbcc\\", the longest substrings with no consecutive characters being the same are \\"ab\\", \\"bc\\", or \\"ca\\", all of length 2.","solution":"def longest_substring_no_consecutive_chars(s): Returns the length of the longest substring without consecutive characters being the same. max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len def find_lengths_of_longest_substrings_no_consecutive_chars(T, test_cases): Returns a list of lengths of the longest substrings without consecutive characters being the same for each test case. results = [] for s in test_cases: results.append(longest_substring_no_consecutive_chars(s)) return results"},{"question":"Pasha is fascinated with prime numbers and has decided to play a game involving primes and sequences. He starts with a sequence of integers S of length n. He wants to create a new sequence T of the same length where each element Ti is derived from Si as follows: - If Si is a prime number, Ti should be equal to the sum of Si and the largest prime number less than or equal to Si. - If Si is not a prime, Ti should be equal to Si divided by the smallest prime factor of Si. Pasha has asked you to write a program that constructs the sequence T for a given sequence S. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence S. The second line contains n space-separated integers S1, S2, ..., Sn (1 ≤ Si ≤ 2 * 10^6) — the elements of the sequence S. Output Print n space-separated integers T1, T2, ..., Tn — the elements of the sequence T. Examples Input 5 4 5 12 11 25 Output 2 10 6 22 20 Input 4 3 8 6 2 Output 6 4 3 4 Notes In the first example, the sequence T is derived as follows: - 4 is not a prime, its smallest prime factor is 2, so T[1] = 4 / 2 = 2 - 5 is a prime, the largest prime ≤ 5 is 5 itself, so T[2] = 5 + 5 = 10 - 12 is not a prime, its smallest prime factor is 2, so T[3] = 12 / 2 = 6 - 11 is a prime, the largest prime ≤ 11 is 11 itself, so T[4] = 11 + 11 = 22 - 25 is not a prime, its smallest prime factor is 5, so T[5] = 25 / 5 = 5","solution":"def sieve(n): Return array of smallest prime factor (spf) for every number <= n. spf[i] will return the smallest prime factor of i. spf = list(range(n + 1)) # initialize spf array for i in range(2, int(n**0.5) + 1): if spf[i] == i: # i is a prime number for j in range(i * i, n + 1, i): if spf[j] == j: # spf[j] is not updated yet spf[j] = i return spf def largest_prime_leq(n): Return the largest prime number which <= n using Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_list = [] for p in range(2, n + 1): if is_prime[p]: prime_list.append(p) return prime_list def construct_sequence_t(S): Construct the sequence T from the sequence S. max_s = max(S) spf = sieve(max_s) primes = largest_prime_leq(max_s) prime_set = set(primes) T = [] for si in S: if si in prime_set: T.append(si + si) # Largest prime <= Si is Si itself else: T.append(si // spf[si]) return T # This is the function to be used in the testing portion def process_sequence(S): return construct_sequence_t(S)"},{"question":"You are a security systems developer tasked with creating an algorithm to generate unique passcodes for a high-security facility. Each passcode is a sequence of digits such that: 1. The passcode must be N digits long. 2. Each digit can range from 0 to 9. 3. The passcode must not contain consecutive repeated digits (e.g., \\"112345\\" is invalid because it contains \\"11\\" consecutively). Your task is to write a function that generates all possible passcodes of length N that meet the above criteria. Input The input consists of a single integer N (1 ≤ N ≤ 10). Output The output should be a list of all valid passcodes sorted in ascending numerical order. Each passcode should be output on a new line. Example Input 2 Output 01 02 03 04 05 06 07 08 09 10 12 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 ... 98 Note: The numbers should be printed in a way that keeps the ascending numerical order as demonstrated in the example.","solution":"def generate_passcodes(N): Generates all valid passcodes of length N with no consecutive repeated digits. def backtrack(passcode): if len(passcode) == N: valid_passcodes.append(\\"\\".join(passcode)) return for digit in \'0123456789\': if not passcode or passcode[-1] != digit: passcode.append(digit) backtrack(passcode) passcode.pop() valid_passcodes = [] backtrack([]) return sorted(valid_passcodes) # Example usage: # N = 2 # print(generate_passcodes(N)) # Prints all 2-digit passcodes without consecutive repeats"},{"question":"Given a list of cities and distances between some pairs of them, your task is to determine the shortest path between two specified cities using Dijkstra\'s algorithm. # Input The input starts with a line containing an integer `n` (2 ≤ n ≤ 1000), the number of cities. The next `n` lines each contain the name of a city. The following line contains an integer `m` (1 ≤ m ≤ 10000), the number of direct paths. Each of the next `m` lines contains three elements: two city names and an integer representing the distance between them (1 ≤ distance ≤ 100). The last line contains the names of the source and destination cities. # Output Your program should output the shortest distance between the source and destination cities. If there is no path between the two cities, print `-1`. # Example Input ``` 5 CityA CityB CityC CityD CityE 6 CityA CityB 4 CityA CityC 2 CityB CityC 5 CityB CityD 10 CityC CityE 3 CityE CityD 4 CityA CityD ``` Output ``` 9 ``` In this example, the shortest path from `CityA` to `CityD` goes through `CityC` and `CityE` with a total distance of 9. If there were no path from `CityA` to `CityD`, the output would be `-1`.","solution":"import heapq def dijkstra(graph, start, end): Determines the shortest path between two cities using Dijkstra\'s Algorithm. queue = [(0, start)] distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else -1 def find_shortest_path(n, cities, m, paths, start, end): graph = {city: {} for city in cities} for city1, city2, distance in paths: graph[city1][city2] = distance graph[city2][city1] = distance return dijkstra(graph, start, end)"},{"question":"Write a function that, given a string containing only square brackets `[]`, determines whether the brackets are balanced. Your function should output \\"YES\\" if the brackets are balanced, and \\"NO\\" otherwise. A string is considered balanced if: - Every opening bracket `[` has a corresponding closing bracket `]`. - The brackets are closed in the correct order. # Function Signature ```python def is_balanced(brackets: str) -> str: pass ``` # Input - A single line containing a sequence of `[ ]` characters. # Output - A single line containing \\"YES\\" if the brackets are balanced, otherwise \\"NO\\". # Example Input ``` [[]][[[]]] ``` Output ``` YES ``` Input ``` [[[]] ``` Output ``` NO ``` # Constraints - The length of the input string is odd or even number of pairs. - You should consider both typical and edge cases such as empty string or single pair of brackets.","solution":"def is_balanced(brackets: str) -> str: stack = [] for char in brackets: if char == \'[\': stack.append(\'[\') elif char == \']\': if not stack or stack[-1] != \'[\': return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"John is a budding gardener who loves to grow flowers in his garden. He has m flower beds, and each flower bed can accommodate flowers of the same type. However, John also has different variations of flowers, making his garden even more colorful. John\'s garden is represented as a 2D grid of size n x n, where each cell can either be empty (represented by 0) or occupied by a specific type of flower (represented by a positive integer denoting the flower type). John wants to check the diversity of his garden by counting the number of distinct flower types he has planted in the garden. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the size of the garden grid and the number of unique flower beds, respectively. Each of the following n lines contains n integers, representing the garden grid\'s cells. Output Print a single integer — the number of distinct flower types present in the garden. Examples Input 4 3 1 2 3 0 4 0 0 1 0 2 3 3 0 0 4 0 Output 4 Input 3 2 1 1 1 2 2 0 2 0 0 Output 2 Input 5 3 1 2 2 2 0 0 3 3 3 3 1 2 1 0 0 0 0 1 2 1 1 1 2 2 3 Output 3 Note In the first example, the garden contains 4 distinct flower types: 1, 2, 3, and 4. In the second example, the garden contains 2 distinct flower types: 1 and 2. In the third example, the garden contains 3 distinct flower types: 1, 2, and 3.","solution":"def count_distinct_flower_types(n, m, garden): Counts the number of distinct flower types in the garden grid. Args: n (int): The size of the garden grid (n x n). m (int): The number of unique flower beds. garden (list of list of int): The garden grid. Returns: int: The number of distinct flower types. flower_set = set() for row in garden: for flower in row: if flower > 0: flower_set.add(flower) return len(flower_set)"},{"question":"You are given an integer k. You have to construct a grid of size k x k such that each cell contains a unique integer from 1 to k^2. The grid should be arranged in such a way that for any 2 x 2 sub-grid, the sum of the four numbers in the sub-grid is the same. For example, choose k = 3. One possible valid arrangement is: 8 1 6 3 5 7 4 9 2 For any 2 x 2 sub-grid, the sum of the numbers is 18: 8 + 1 + 3 + 5 = 17, 1 + 6 + 3 + 5 = 17, 3 + 5 + 4 + 9 = 17, 5 + 7 + 9 + 2 = 23 (not valid). There is no valid arrangement. Input The first and only line contains an integer k (2 ≤ k ≤ 10^2). Output If there is no solution, output \\"NO\\" in the first line. If there is a solution, output \\"YES\\" in the first line. In the next k lines, output k integers in each line representing the matrix. Each integer should appear only once. If there are multiple solutions, you can output any of them. Examples Input 3 Output YES 8 1 6 3 5 7 4 9 2 Input 4 Output NO Note For the first example: The valid arrangement of 3x3 grid is shown which meets the required conditions. For the second example: It can be proved that there is no valid arrangement of a 4x4 grid that satisfies the condition.","solution":"def construct_magic_square(k): if k % 2 == 0: return \\"NO\\" magic_square = [[0 for _ in range(k)] for _ in range(k)] n = k * k i, j = 0, k // 2 for num in range(1, n + 1): magic_square[i][j] = num newi, newj = (i - 1) % k, (j + 1) % k if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return \\"YES\\", magic_square def print_magic_square(k, magic_square): result = [] result.append(\\"YES\\") for row in magic_square: result.append(\\" \\".join(str(num) for num in row)) return \\"n\\".join(result)"},{"question":"An e-commerce company has a catalog of products that can be represented as a tree data structure. Each node in the tree represents a category or a product. Categories can have sub-categories or products as their children. The company needs a way to manage their catalog and efficiently query information from it. Your task is to implement a catalog management system that supports the following actions: 1. Add a new category or product as a child of a specified category. 2. Remove a specified category or product along with all its descendants. 3. Query the total number of products in a specified category including all its sub-categories. 4. Query the path from the root to a specified product. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of operations. Each of the next n lines represents an operation. The operations are of three types: - \\"add type parent name\\", where type is \\"category\\" or \\"product\\", parent is the name of the parent category, and name is the name of the new category or product to be added. - \\"remove name\\", where name is the name of the category or product to be removed. - \\"count name\\", where name is the name of the category, and you need to count the total number of products within this category including its sub-categories. - \\"path product_name\\", where product_name is the name of the product, and you need to output the path from the root category to this product (as a space-separated list of category names followed by the product name). Assume that initially, there is a single root category named \\"root\\". Output For each \\"count\\" and \\"path\\" operation, output the result on a new line. If a \\"path\\" operation requests a product name that does not exist, output \\"Product not found\\". Example Input 10 add category root electronics add category electronics mobiles add product mobiles iPhone add product mobiles Samsung count electronics path iPhone remove mobiles count electronics path iPhone add product electronics laptop Output 2 root electronics mobiles iPhone 0 Product not found","solution":"class Node: def __init__(self, name, is_product=False): self.name = name self.is_product = is_product self.children = {} class Catalog: def __init__(self): self.root = Node(\\"root\\") self.nodes = {\\"root\\": self.root} def add(self, type, parent, name): parent_node = self.nodes.get(parent) if parent_node: new_node = Node(name, is_product=(type == \\"product\\")) parent_node.children[name] = new_node self.nodes[name] = new_node def remove(self, name): def remove_node(node): for child_name in list(node.children.keys()): remove_node(node.children[child_name]) del self.nodes[node.name] node_to_remove = self.nodes.get(name) if node_to_remove: if node_to_remove.name == \\"root\\": return # Cannot remove the root node parent_node = None for node in self.nodes.values(): if name in node.children: parent_node = node break if parent_node: del parent_node.children[name] remove_node(node_to_remove) def count(self, name): def count_products(node): count = 1 if node.is_product else 0 for child in node.children.values(): count += count_products(child) return count node = self.nodes.get(name) return count_products(node) if node else 0 def path(self, name): def find_path(node, target_name): if node.name == target_name: return [node.name] for child in node.children.values(): path = find_path(child, target_name) if path: return [node.name] + path return [] node = self.nodes.get(name) if node and node.is_product: path = find_path(self.root, name) return \\" \\".join(path) if path else \\"Product not found\\" return \\"Product not found\\" if node is None else \\"Not a product\\" def process_operations(n, operations): catalog = Catalog() output = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": _, type, parent, name = parts catalog.add(type, parent, name) elif parts[0] == \\"remove\\": _, name = parts catalog.remove(name) elif parts[0] == \\"count\\": _, name = parts output.append(str(catalog.count(name))) elif parts[0] == \\"path\\": _, name = parts output.append(catalog.path(name)) return output"},{"question":"Problem Statement: You are given `N` buildings in a row, and a character at each building. The character at the `i`-th building is either \'A\' or \'B\'. You need to make all the buildings have the same character by selecting a substring and performing the following two operations any number of times: 1. Flip: Change an \'A\' to \'B\' or a \'B\' to \'A\' in a single operation. 2. Reverse: Reverse the selected substring. Write a function to determine the minimum number of operations required to make all buildings have the same character. # Input - The first line contains an integer `N`, the number of buildings. - The second line contains a string of length `N`, consisting of \'A\' and \'B\' characters. # Output - Output a single integer, the minimum number of operations required. # Constraints - `1 <= N <= 10^5` # Sample Input 1 ``` 5 ABABA ``` # Sample Output 1 ``` 1 ``` # Explanation: - Select the substring \\"ABA\\", flip it to \\"BBB\\". This requires only one operation. # Sample Input 2 ``` 4 BBBB ``` # Sample Output 2 ``` 0 ``` # Explanation: - All characters are already the same, so no operations are required.","solution":"def min_operations(n, buildings): Returns the minimum number of operations required to make all buildings have the same character. # Count the number of \'A\'s and \'B\'s in the buildings count_A = buildings.count(\'A\') count_B = n - count_A # The minimum number of operations required will be the minimum of these counts, either changing all \'A\'s to \'B\'s or all \'B\'s to \'A\'s return min(count_A, count_B)"},{"question":"A team of robotic engineers has designed a robot that can traverse a grid. The grid is represented as a 2D array, with each cell containing a non-negative integer representing the energy required to enter that cell. The robot can only move right or down from its current position. The goal is to help the robot determine the minimum energy path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1). **Task:** Write a function that takes a 2D array as input and returns the minimum energy required for the robot to reach the bottom-right corner of the grid. **Input:** - A 2D array of integers where `1 ≤ n, m ≤ 100` and `0 ≤ grid[i][j] ≤ 1000`. **Output:** - An integer representing the minimum energy required to traverse the grid from the top-left to the bottom-right corner. **Function Signature:** ```python def min_energy_path(grid: List[List[int]]) -> int: pass ``` **Example:** ```python grid = [ [1, 3, 5], [2, 1, 2], [4, 3, 1] ] result = min_energy_path(grid) print(result) # Output: 7 ``` **Explanation:** The minimum energy path is 1 → 2 → 1 → 3 → 1, summing up to 7. The robot moves right to (0,1), down to (1,1), right to (1,2), down to (2,2), and finally to (2,2).","solution":"from typing import List def min_energy_path(grid: List[List[int]]) -> int: Returns the minimum energy required for the robot to traverse from the top-left to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Initialize a DP array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Set the energy required to enter the starting cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the minimum energy required return dp[n-1][m-1]"},{"question":"Warehouse Robot Navigation A logistics company is developing a robotic system to navigate their warehouse for various operations such as picking and placing items. The warehouse can be represented as a grid of size H x W. Each cell in the grid can either be open (.) or occupied with an obstacle (X). The robot can move to any of the four adjacent cells (up, down, left, right) if the cell is open. The robot starts at a given starting point (Sx, Sy) and needs to reach a specified destination point (Dx, Dy). You are required to determine the minimum number of moves required for the robot to reach the destination. If the destination is not reachable, return -1. Input The input consists of multiple datasets. Each dataset is formatted as follows: > H W > Sx Sy > Dx Dy > Grid_line 1 > Grid_line 2 > ... > Grid_line H The first line of a dataset contains two integers, H and W, representing the height and width of the warehouse grid respectively. The second line contains two integers, Sx and Sy, representing the starting coordinates of the robot. The third line contains two integers, Dx and Dy, representing the destination coordinates. Each of the following H lines contains a string of length W consisting of characters \'.\' and \'X\', representing the grid. The end of the input is represented by a line containing two zeros separated by single spaces. Output For each dataset, output the minimum number of moves required for the robot to reach the destination in a line. If the destination is not reachable, output -1. Sample Input 5 5 0 0 4 4 ..... .X... ..... ...X. ..... 7 7 0 0 6 6 ....... .X....X .X....X .X...... ....X.. .X....X ....... 3 3 0 0 2 2 XXX XXX ... 0 0 Output for the Sample Input 8 12 -1 Example Input 5 5 0 0 4 4 ..... .X... ..... ...X. ..... 7 7 0 0 6 6 ....... .X....X .X....X .X...... ....X.. .X....X ....... 3 3 0 0 2 2 XXX XXX ... 0 0 Output 8 12 -1","solution":"from collections import deque def min_moves_to_destination(H, W, Sx, Sy, Dx, Dy, grid): if grid[Sx][Sy] == \'X\' or grid[Dx][Dy] == \'X\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(Sx, Sy, 0)]) visited = set((Sx, Sy)) while queue: x, y, moves = queue.popleft() if (x, y) == (Dx, Dy): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < H and 0 <= ny < W and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, moves + 1)) visited.add((nx, ny)) return -1 def process_input(input_data): results = [] datasets = input_data.strip().split(\'n\') index = 0 while index < len(datasets): H, W = map(int, datasets[index].split()) if H == 0 and W == 0: break Sx, Sy = map(int, datasets[index + 1].split()) Dx, Dy = map(int, datasets[index + 2].split()) grid = [] for i in range(H): grid.append(datasets[index + 3 + i]) result = min_moves_to_destination(H, W, Sx, Sy, Dx, Dy, grid) results.append(result) index += H + 3 return results"},{"question":"Given a string, find the longest palindromic contiguous substring. The substring should be as long as possible and should be present in the given string in reverse order as well. A string is a palindrome if it reads the same backward as forward. For instance, \\"racecar\\" and \\"madam\\" are palindromes. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of a single string S which consists of only lower case letters. Output: For each test case, print the longest palindromic contiguous substring. If there are multiple answers with the maximum length, print any one of them. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 babad cbbd a SAMPLE OUTPUT bab bb a Explanation In the first case, \\"bab\\" is the longest palindromic substring present in \\"babad\\". Another possible answer could be \\"aba\\". In the second case, \\"bb\\" is the longest palindromic substring present in \\"cbbd\\". In the third case, there is only one character \\"a\\" which is the palindrome itself. Note: - The output string should be as long as possible and can have multiple valid answers. Any one of them can be printed.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic contiguous substring in the given string s. n = len(s) if n <= 1: return s start, max_length = 0, 1 for i in range(1, n): low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length] def longest_palindromic_substrings_from_input(input_lines): Processes the input lines to find the longest palindromic substring for each test case. T = int(input_lines[0]) results = [] for i in range(1, T + 1): results.append(longest_palindromic_substring(input_lines[i])) return results"},{"question":"You are given an array of n integers. Your task is to find and print the length of the longest contiguous subarray where the sum of the elements is equal to or greater than a given threshold k. Input The first line of the input contains two integers n (1 ≤ n ≤ 10000) and k (1 ≤ k ≤ 10^9) — the number of integers in the array and the threshold. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) where ai is the integer at the i-th position of the array. Output Print a single integer — the length of the longest contiguous subarray where the sum is equal to or greater than the threshold k. If no such subarray exists, print 0. Examples Input 6 15 1 2 3 4 5 6 Output 5 Input 5 11 2 1 5 1 2 Output 4 Note In the first example, the longest contiguous subarray with a sum equal to or greater than 15 is [1, 2, 3, 4, 5], which has length 5. In the second example, the longest contiguous subarray with a sum equal to or greater than 11 is [2, 1, 5, 1, 2], which has length 5.","solution":"def longest_subarray_length(arr, n, k): Returns the length of the longest contiguous subarray where the sum is equal to or greater than the threshold k. max_length = 0 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if current_sum >= k: max_length = max(max_length, end - start + 1) break return max_length"},{"question":"The city of AlgoPark has a new system of traffic signals to manage its intersections better. The signals can only display three types of lights: Red (R), Yellow (Y), and Green (G). The city wants to automate the process of adjusting the duration for which each of these lights stays on. Each signal\'s duration is determined by an algorithm that takes into account various factors such as traffic flow and time of day. You are given a string representing the lights displayed at a single intersection for a period of time. Each character in the string denotes a light shown at that moment (\'R\' for Red, \'Y\' for Yellow, \'G\' for Green). Write a program to figure out the minimum number of changes required to ensure that no signal is displayed for more than one consecutive moment. Input The first line of input contains a single integer N, the length of the string depicting the lights at the intersection. The second line contains a string of length N consisting of characters \'R\', \'Y\', and \'G\' only. Output Output a single integer representing the minimum number of changes required to ensure no light is repeated consecutively. Constraints 1 ≤ N ≤ 100000 SAMPLE INPUT 7 RRGYYGG SAMPLE OUTPUT 3 Explanation To ensure no light is repeated consecutively, one possible transformation could be \\"RYGYGYG\\" which requires 3 changes. Another possible output could be \\"RYGYGYY\\". There may be multiple valid transformations, but the number of changes required is the same in this case.","solution":"def min_changes_to_avoid_consecutive_lights(n, lights): # Initialize the variable to count changes changes = 0 # Convert the string to a list for easier manipulation lights_list = list(lights) # Iterate through the lights string for i in range(1, n): # If the current light is the same as the previous one if lights_list[i] == lights_list[i - 1]: # Increment the changes counter changes += 1 # Change the current light to a different one # Choose a light different from both the previous and the next light (if any) for new_color in [\'R\', \'Y\', \'G\']: if new_color != lights_list[i - 1] and (i == n - 1 or new_color != lights_list[i + 1]): lights_list[i] = new_color break return changes"},{"question":"You are given a series of test results for students in a class. Each test result consists of the student\'s name and their respective score on that test. You need to determine the name of the student with the highest average test score. If there is a tie in the average test score, return the name of the student who comes first alphabetically. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The next n lines contain a student\'s name and their score (0 ≤ score ≤ 100). The student\'s name will be a non-empty string consisting of lowercase English letters only, and its length will be at most 20 characters. Output Print a single line with the name of the student with the highest average score. If there is a tie, output the name that comes first alphabetically. Example Input 5 alice 85 bob 90 alice 90 charlie 85 bob 85 Output alice","solution":"def highest_average_score(n, test_results): from collections import defaultdict scores = defaultdict(list) for result in test_results: name, score = result.split() scores[name].append(int(score)) max_avg = -1 highest_avg_student = \\"\\" for name in scores: avg_score = sum(scores[name]) / len(scores[name]) if avg_score > max_avg or (avg_score == max_avg and name < highest_avg_student): max_avg = avg_score highest_avg_student = name return highest_avg_student"},{"question":"You are given a list of integers. Your task is to determine the number of pairs of indices (i, j) such that: 1. 1 ≤ i < j ≤ n. 2. The sum of the subarray from index i to index j (both inclusive) is equal to a given target integer k. The list of integers and the target sum will be provided as input. Input The first line contains an integer n (2 ≤ n ≤ 2000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ... , an (-10^4 ≤ ai ≤ 10^4) — the elements of the list. The third line contains a single integer k (-10^8 ≤ k ≤ 10^8) — the target sum. Output Print the single number — the number of pairs of indices (i, j) satisfying the above conditions. Examples Input 5 1 2 3 4 5 9 Output 2 Input 4 -1 -1 1 1 0 Output 2","solution":"def count_subarray_pairs(nums, target): Returns the number of pairs of indices (i, j) such that the sum of the subarray from index i to index j (both inclusive) is equal to the given target. :param nums: List of integers :param target: Target sum :return: Number of pairs (i, j) n = len(nums) count = 0 # Prefix sum array prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + nums[i - 1] # Check for each pair (i, j) for i in range(n): for j in range(i + 1, n): if prefix_sums[j + 1] - prefix_sums[i] == target: count += 1 return count"},{"question":"Maria loves programming and she is learning about strings in her computer science class. One day, her teacher gave her an interesting problem to solve. Given a string s consisting of lowercase letters (a-z), Maria needs to find the \\"rotation\\" of the string that comes first in lexicographical order. A \\"rotation\\" of a string is obtained by moving some leading characters to the end of the string. For example, for the string \\"xyzabc\\", its rotations include \\"xyzabc\\", \\"yzabcx\\", \\"zabcxy\\", \\"abcxyz\\", \\"bcxyza\\", and \\"cxyzab\\". Among these, \\"abcxyz\\" comes first lexicographically. Help Maria by writing a function that outputs the lexicographically smallest rotation of the given string. Input The input consists of a single line containing the string s. The string s contains only lowercase letters and has a length of at most 100 characters. Output Print the lexicographically smallest rotation of the string s. Examples Input baca Output abac Input zabc Output abcz Input bcdza Output abcdz","solution":"def smallest_rotation(s): Returns the lexicographically smallest rotation of the string s. n = len(s) rotations = [s[i:] + s[:i] for i in range(n)] return min(rotations)"},{"question":"You are given an integer array `nums` of length `n` where numbers can be positive, negative or zero. Your task is to find and print all unique triplets in the array which gives the sum of zero. **Constraints:** * You cannot use the same element twice within one triplet. * The array length n is in range [0, 1000]. * Each element of `nums` is within the range `[-1000, 1000]`. **Input:** * The first line contains an integer n. * The second line contains n space-separated integers representing the elements of `nums`. **Output:** * Print each unique triplet in ascending order on a new line. * The triplets themselves should be in non-decreasing order. **Example:** Input: 6 -1 0 1 2 -1 -4 Output: -1 -1 2 -1 0 1 Input: 5 -5 -4 -3 -2 -1 Output: No triplets found Explanation: In the first example, there are two unique triplets that add up to zero: `(-1, -1, 2)` and `(-1, 0, 1)`.","solution":"def three_sum(nums): Finds all unique triplets in the array that sum up to zero. nums.sort() # Sort the array first n = len(nums) result = [] for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate values at index i continue left, right = i + 1, n - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 # Increase the sum by moving the left pointer to right elif s > 0: right -= 1 # Decrease the sum by moving the right pointer to left else: result.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: # Skip duplicate values at index left left += 1 while left < right and nums[right] == nums[right - 1]: # Skip duplicate values at index right right -= 1 left += 1 right -= 1 if not result: print(\\"No triplets found\\") else: for triplet in result: print(\\" \\".join(map(str, triplet)))"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer which appears only once. Find the single integer that appears only once in linear time without using extra space. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the list. The second line contains n integers — the elements of the list. The elements of the list are not sorted and fall within the range of 0 to 10^5. Output Print the single integer that appears only once in the list. Examples Input 5 4 1 2 1 2 Output 4 Input 7 1 2 3 2 1 4 3 Output 4 Input 9 9 1 7 8 7 9 1 6 6 Output 8 Note In the first example, the integer 4 is the only one that appears once. All other integers appear twice. In the second example, the integer 4 is the only one that appears once while others appear twice. In the third example, the integer 8 is the only one that appears once while others appear twice.","solution":"def find_single_number(arr): Finds the single number which appears only once in the given list, where every other number appears exactly twice. Args: arr (list of int): The list of integers. Returns: int: The single number which appears only once. result = 0 for num in arr: result ^= num # XOR operation cancels out numbers appearing twice return result"},{"question":"The kingdom of CodeLand has a unique tradition where they celebrate CodeFest every year. During CodeFest, there\'s a game where participants need to form a specific phrase using the least number of keystrokes on a special keyboard. The special keyboard contains only a subset of possible English letters and participants can use each letter only once. Given a target phrase consisting of lowercase English letters, your task is to calculate the minimum number of keystrokes required to type the phrase using the special keyboard or determine if it is impossible to create that phrase. Input The input consists of two lines: 1. The first line contains a string of lowercase English letters representing the target phrase. 2. The second line contains a string of lowercase English letters representing the set of available letters on the special keyboard. Output Output a single integer — the minimum number of keystrokes required to type the target phrase or -1 if it is impossible to type the phrase using the given special keyboard. Examples Input ``` hello heloabcde ``` Output ``` 5 ``` Input ``` algorithm algort ``` Output ``` -1 ``` Explanation In the first example, the special keyboard contains all the letters needed to type \\"hello\\", so the output is 5 (each letter requires one keystroke). In the second example, the special keyboard does not contain the letter \'i\' or \'m\', so it is impossible to type \\"algorithm\\" with the given letters. The output is -1.","solution":"def min_keystrokes(target_phrase, available_letters): Calculate the minimum number of keystrokes required to type the target phrase using the available letters on the special keyboard. :param target_phrase: A string of lowercase English letters representing the target phrase. :param available_letters: A string of lowercase English letters representing the set of available letters on the special keyboard. :return: The minimum number of keystrokes required to type the target phrase or -1 if it is impossible to type the phrase. available_letters_set = set(available_letters) for letter in target_phrase: if letter not in available_letters_set: return -1 return len(target_phrase)"},{"question":"Jack, an aspiring inventor, is working on a new project that involves organizing a series of robotic tasks. Each task has a specific start and end time, and Jack wants to ensure that none of the tasks overlap. He needs your help to find the maximum number of non-overlapping tasks that can be performed. Given a list of tasks with their start and end times, determine the maximum number of tasks that can be scheduled without any overlap. Input The first line of the input contains an integer n (1 ≤ n ≤ 2000) — the number of tasks. Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 10000) — the start and end times of a task. Output Print a single integer — the maximum number of non-overlapping tasks that can be scheduled. Examples Input 5 1 4 2 6 8 9 5 7 3 5 Output 3 Input 3 1 3 2 4 3 5 Output 2 Note In the first example, one possible way to schedule the maximum number of non-overlapping tasks is to choose tasks (1, 4), (5, 7), and (8, 9), which results in 3 tasks without overlap. In the second example, the maximum number of non-overlapping tasks is 2. One possible way is to choose tasks (1, 3) and (3, 5).","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks with their start and end times, this function returns the maximum number of non-overlapping tasks that can be scheduled. Args: - tasks (list of tuples): A list where each tuple contains two integers representing the start and end times of a task. Returns: - int: The maximum number of non-overlapping tasks. # Sort tasks based on their end times tasks.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks and the end time of the last added task count = 0 last_end_time = 0 for start, end in tasks: # If the current task starts after the last task ends, include it if start >= last_end_time: count += 1 last_end_time = end return count # Example usage tasks = [(1, 4), (2, 6), (8, 9), (5, 7), (3, 5)] print(max_non_overlapping_tasks(tasks)) # Output: 3"},{"question":"You are given an initially empty (0-indexed) integer array nums of length n. You will run n steps of an algorithm. In the ith step (0-indexed), you will insert the integer (i + 1) at the end of the array nums. After each insertion, the median of the array is appended to the result list. The median of an array is the middle value after the array is sorted. If there are two middle values, the median is the average of the two middle values. Return the result list with n medians. Input The first line of input contains an integer n denoting the number of steps, (1 ≤ n ≤ 10^5). Output Print n space-separated medians of the array after each step. Examples Input 6 Output 1.0 1.5 2.0 2.5 3.0 3.5 Input 5 Output 1.0 1.5 2.0 2.5 3.0 Note In the first sample, the algorithm proceeds as follows: - Step 0: [1], median is 1.0 - Step 1: [1, 2], median is 1.5 - Step 2: [1, 2, 3], median is 2.0 - Step 3: [1, 2, 3, 4], median is 2.5 - Step 4: [1, 2, 3, 4, 5], median is 3.0 - Step 5: [1, 2, 3, 4, 5, 6], median is 3.5 Therefore, the output is: 1.0 1.5 2.0 2.5 3.0 3.5","solution":"def find_medians(n): Function to return the n medians of an array built step by step. Parameters: n (int): number of steps Returns: List[float]: list of medians after each step nums = [] medians = [] for i in range(n): nums.append(i + 1) length = len(nums) if length % 2 == 1: median = nums[length // 2] else: median = (nums[length // 2 - 1] + nums[length // 2]) / 2.0 medians.append(median) return medians"},{"question":"Develop a function that takes an array of integers and returns a list of tuples where each tuple contains two elements: a distinct integer from the array and the number of times that integer appears in the array. Constraints * The array length is between 1 and 10^5. * Each integer in the array is between -10^9 and 10^9. Input You will be given an integer n first, which represents the length of the array. Then, you will be given n integers in a line, representing the elements of the array. Output Print the list of tuples in ascending order of the unique integers. Examples Input 5 4 2 2 8 4 Output [(2, 2), (4, 2), (8, 1)] Input 7 -1 -1 3 3 3 5 -1 Output [(-1, 3), (3, 3), (5, 1)]","solution":"def count_integer_occurrences(array): Takes an array of integers and returns a list of tuples where each tuple contains a distinct integer from the array and the number of times that integer appears in the array. :param array: List of integers. :return: List of tuples (integer, frequency), sorted by integer in ascending order. from collections import Counter counter = Counter(array) return sorted(counter.items()) # Example usage: n = 5 array = [4, 2, 2, 8, 4] print(count_integer_occurrences(array))"},{"question":"In a distant learning platform, instructors often create quizzes with multiple-choice questions. To analyze the results, it\'s essential to find out not only the total number of students who took each quiz but the distribution of their answers for each question. You are given the results of one such quiz. Each student\'s answers are represented as a list of strings, where each string corresponds to one question and the value is the chosen option (e.g., \'A\', \'B\', \'C\', or \'D\'). Your task is to write a function `analyze_quiz` that takes the following input: 1. An integer `n` representing the number of students. 2. An integer `m` representing the number of questions in the quiz. 3. A list of lists `answers` of size `n x m`, where each sublist represents a student\'s answers to the quiz. The function should output a dictionary with each question index as the key (from 0 to m-1) and a dictionary as the value. The value dictionary should map each possible option (\'A\', \'B\', \'C\', \'D\') to the number of students who chose that option for the corresponding question. Input Constraints: - (1 ≤ n ≤ 100) - (1 ≤ m ≤ 50) - Each answer will be one of {\'A\', \'B\', \'C\', \'D\'} Example Input: ``` n = 3 m = 4 answers = [ [\'A\', \'B\', \'C\', \'D\'], [\'A\', \'B\', \'A\', \'D\'], [\'C\', \'A\', \'B\', \'D\'] ] ``` Example Output: ``` { 0: {\'A\': 2, \'B\': 0, \'C\': 1, \'D\': 0}, 1: {\'A\': 1, \'B\': 2, \'C\': 0, \'D\': 0}, 2: {\'A\': 1, \'B\': 1, \'C\': 1, \'D\': 0}, 3: {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 3} } ``` Your solution should efficiently process the input data and produce the required output in the specified format.","solution":"def analyze_quiz(n, m, answers): Analyzes the quiz results and returns the distribution of answers for each question. Parameters: n (int): Number of students. m (int): Number of questions. answers (list of list of str): The answers of each student. Returns: dict: A dictionary with each question index as the key and a dictionary with answer counts as the value. result = {i: {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0} for i in range(m)} for student_answers in answers: for question_index in range(m): answer = student_answers[question_index] result[question_index][answer] += 1 return result"},{"question":"A researcher is studying a unique array transformation. The transformation involves selecting a subarray from the given array and reversing it. The goal is to transform the array into a sorted state in the minimum number of operations. Given an array of distinct integers, you need to calculate the minimum number of subarray reversals required to sort the array in increasing order. Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains a single integer N denoting the number of elements in the array. The second line contains N space-separated integers denoting the elements of the array. Output For each test case, output a single line containing an integer denoting the minimum number of subarray reversals required to sort the array. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ Array elements ≤ 10^9 Example Input: 2 4 4 3 2 1 5 1 3 2 5 4 Output: 1 2 Explanation For the first test case, the entire array [4, 3, 2, 1] is reversed to get [1, 2, 3, 4], requiring only 1 operation. For the second test case, reversing the subarray [3, 2] gives [1, 2, 3, 5, 4], and then reversing the subarray [5, 4] gives [1, 2, 3, 4, 5], thus requiring 2 operations.","solution":"def min_subarray_reversals_to_sort(arr): n = len(arr) segments = [] i = 0 while i < n: j = i while j + 1 < n and arr[j] > arr[j + 1]: j += 1 if j != i: segments.append((i, j)) i = j + 1 return len(segments) def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 results = [] for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) results.append(min_subarray_reversals_to_sort(arr)) index += 2 return results"},{"question":"John loves playing with numbers, especially finding interesting properties among them. His math teacher recently introduced him to the concept of Fibonacci prime numbers. A Fibonacci prime is a number that is both a Fibonacci number and a prime number. John gets really excited by this and wants to find all such numbers below a certain limit. Given a positive integer n, John wants to know how many Fibonacci primes exist that are less than or equal to n. Since these computations can be complex, John asks for your help to write a program that can solve this efficiently. INPUT The first line of input contains the number of test cases, t. Each of the next t lines contains a single positive integer n, for which you have to find the number of Fibonacci primes ≤ n. OUTPUT The output should contain t lines, each with a single integer representing the number of Fibonacci primes for that particular test case. CONSTRAINTS 1 ≤ t ≤ 100000 1 ≤ n ≤ 10^6 SAMPLE INPUT 3 10 20 100 SAMPLE OUTPUT 2 3 5","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def fibonacci_primes(limit): fibs = [0, 1] primes = [] while True: next_fib = fibs[-1] + fibs[-2] if next_fib > limit: break fibs.append(next_fib) if is_prime(next_fib): primes.append(next_fib) return primes def precompute_fibonacci_primes(limit): primes = fibonacci_primes(limit) counts = [0] * (limit + 1) count = 0 for i in range(1, limit + 1): if i in primes: count += 1 counts[i] = count return counts def solve_fibonacci_primes(test_cases, queries): limit = max(queries) counts = precompute_fibonacci_primes(limit) result = [] for n in queries: result.append(counts[n]) return result # Reading input def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) queries = [] for i in range(1, t + 1): queries.append(int(data[i])) results = solve_fibonacci_primes(t, queries) for res in results: print(res)"},{"question":"**Problem Statement** In this problem, you\'ll implement a primality testing algorithm. A prime number is an integer greater than 1 that has no divisors other than 1 and itself. Efficient primality testing is crucial in various fields such as cryptography, where large prime numbers are used. Your task is to check if a given number is prime using the Miller-Rabin primality test, which is a probabilistic test. If a number is prime, it will always pass the test, but a composite number can occasionally pass the test with a small probability. The Miller-Rabin test is based on the properties of the modulo arithmetic and is more efficient compared to simple factorization methods for larger numbers. Here is how the algorithm works: 1. Write `n-1` as `2^s * d` with `d` odd by factoring powers of 2 from `n-1`. 2. For a given base `a`, compute: - `x = a^d % n` - If `x == 1` or `x == n-1`, then `n` passes this round of testing. - Otherwise, compute `a^(2^r * d) % n` for `0 ≤ r < s`. If none of them are `n-1`, then `n` is definitely composite. 3. Repeat the test for several different bases to reduce the probability of a composite number passing as prime. Your task is to implement this algorithm and decide whether a given number `n` is prime. # Input - An integer `t` (1 ≤ t ≤ 10^4), the number of test cases. - For the next `t` lines, each line contains one integer `n` (1 ≤ n ≤ 10^18). # Output - For each test case, print \\"YES\\" if the number is a prime, otherwise print \\"NO\\". # Examples Input ``` 3 17 18 19 ``` Output ``` YES NO YES ``` # Notes - Make sure to handle edge cases such as very small numbers. - The algorithm should be optimized to handle very large numbers efficiently. - Consider using deterministic bases for small `n` (e.g., `n < 2^64`) to optimize the Miller-Rabin test.","solution":"def miller_rabin(n, k=5): Perform Miller-Rabin primality test on n for k iterations. # Special cases if n <= 1: return False if n <= 3: return True if n % 2 == 0: return False # Write n-1 as 2^s * d with d odd def get_sd(n): s = 0 d = n - 1 while d % 2 == 0: s += 1 d //= 2 return s, d from random import randrange s, d = get_sd(n) def check_composite(a, s, d, n): x = pow(a, d, n) if x == 1 or x == n - 1: return False for _ in range(s - 1): x = pow(x, 2, n) if x == n - 1: return False return True # Perform k tests using random values a for _ in range(k): a = randrange(2, n - 1) if check_composite(a, s, d, n): return False # Composite return True # Probably prime def is_prime(numbers): results = [] for n in numbers: if miller_rabin(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Fictional Flavors in FictionLand In the mystical realm of FictionLand, confectioners use a special language to describe their magical flavors. Each flavor name is a combination of uppercase letters (\'A\' to \'Z\'), lowercase letters (\'a\' to \'z\'), digits (\'0\' to \'9\'), and special characters (\'*\', \'#\', \'@\'). A famous cookbook in FictionLand lists these flavor names in a unique order. The flavor names are ordered by the following rules: 1. Special character items (\'*\', \'#\', \'@\') come before number items (composed of digits), which come before letter items (composed of characters). 2. Among the special characters, the order is \'*\' < \'#\' < \'@\'. 3. Number items are ordered by their values when interpreted as decimal numbers. 4. Letter items are ordered by their ASCII codes. The flavor names are compared item by item, starting from the left. If one flavor name has fewer items but matches the beginning of a longer flavor name exactly, the shorter one comes first. Write a program that takes a list of flavor names and sorts them according to the rules above. Input The input consists of a single test case of the following format: n f_1 f_2 : f_n The integer n in the first line gives the number of flavor names (f_1 through f_n) to be sorted. Here, n satisfies 1 leq n leq 1000. The next n lines each contain one flavor name with at least one and no more than twenty characters. Each character is either an uppercase letter, a lowercase letter, a digit, or one of the special characters \'*\', \'#\', \'@\'. Sequences of digits in the flavor names never start with a digit zero (0). Output Output the sorted flavor names, one per line. Sample Input 1 3 flavor5 flavor#2 flavor@ Sample Output 1 flavor#2 flavor@ flavor5 Sample Input 2 6 magic#10 magic*5 magic10 magic@2 magic#20 magic* Sample Output 2 magic* magic*5 magic#10 magic#20 magic@2 magic10 Example Input 3 flavor5 flavor#2 flavor@ Output flavor#2 flavor@ flavor5","solution":"import re def flavor_key(flavor_name): Generate a sorting key for a flavor name based on specific rules. def split_key(s): parts = re.findall(r\'([d]+|[@#*]|[a-zA-Z]+)\', s) key = [] for part in parts: if part.isdigit(): key.append((1, int(part))) elif part.isalpha(): key.append((2, part)) else: order = {\'*\': 0, \'#\': 1, \'@\': 2} key.append((0, order[part])) return key return split_key(flavor_name) def sort_flavors(flavor_list): Sort the list of flavors by the specific rules. return sorted(flavor_list, key=flavor_key)"},{"question":"Given a rectangular grid of size N x M, you need to find the number of ways to reach the bottom-right corner (N, M) from the top-left corner (1, 1) if you can only move down or right at any point in time. Additionally, some cells in the grid are blocked and cannot be traversed. Write a function that takes the dimensions of the grid and the list of blocked cells as input and returns the number of possible ways to reach the bottom-right corner from the top-left corner. Constraints: - 1 <= N, M <= 100 - The number of blocked cells will be in the range [0, N * M - 1]. Input: - First line: Two integers N and M, indicating the number of rows and columns. - Second line: An integer P indicating the number of blocked cells. - Each of the next P lines contains two integers r and c, indicating that the cell (r, c) is blocked. Rows and columns are 1-indexed. Output: - An integer representing the number of possible ways to reach the bottom-right corner. Examples: Input: 3 3 1 2 2 Output: 2 Input: 4 4 2 2 2 3 3 Output: 4 Explanation: In the first example, the grid is 3x3 and the only blocked cell is (2, 2). The two possible paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, the grid is 4x4 with blocked cells (2, 2) and (3, 3). The four possible paths are: 1. Right -> Right -> Right -> Down -> Down -> Down 2. Down -> Right -> Right -> Right -> Down -> Down 3. Down -> Down -> Right -> Right -> Right -> Down 4. Right -> Right -> Down -> Down -> Right -> Down","solution":"def num_ways_to_reach_bottom_right(N, M, blocked_cells): Returns the number of ways to reach the bottom-right corner (N, M) from the top-left corner (1, 1) in a grid of size N x M, considering blocked cells. grid = [[0] * M for _ in range(N)] if (1, 1) in blocked_cells or (N, M) in blocked_cells: return 0 grid[0][0] = 1 for r in range(N): for c in range(M): if (r + 1, c + 1) in blocked_cells: grid[r][c] = 0 else: if r > 0: grid[r][c] += grid[r - 1][c] if c > 0: grid[r][c] += grid[r][c - 1] return grid[N - 1][M - 1]"},{"question":"You are given an array of n integers. Your task is to find a sub-sequence of the array that is strictly increasing and has the maximum possible length. Return the length of this longest increasing subsequence (LIS). For example, in the array [10, 22, 9, 33, 21, 50, 41, 60, 80], the LIS is [10, 22, 33, 50, 60, 80], which has a length of 6. Input Format The first line contains an integer \'t\', the number of test cases. Each of the next \'t\' lines describes a single test case. Each test case consists of: - A single integer n (1 ≤ n ≤ 2500) — the number of elements in the array. - A sequence of n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6) — the elements of the array. Output Format For each test case, output a single integer representing the length of the longest increasing subsequence of the given array. Example Input: 3 7 10 22 9 33 21 50 41 4 3 10 2 1 8 10 22 9 33 21 50 41 60 80 Output: 5 2 6 Explanation: - For the first test case, the longest increasing subsequence is [10, 22, 33, 50, 60] which has length 5. - For the second test case, the longest increasing subsequence is either [3, 10] or [2, 10] which has length 2. - For the third test case, the longest increasing subsequence is [10, 22, 33, 50, 60, 80] which has length 6.","solution":"def length_of_LIS(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 # Create an array `dp` where dp[i] represents the length of the LIS ending at index i dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # Return the maximum value from the dp array return max(dp) def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(length_of_LIS(arr)) return results"},{"question":"You are given an integer array `a` of length `n`. You can perform the following operation on the array: choose two adjacent elements `x` and `y`, and replace both of them with the sum `x + y` and `|x - y|` (the absolute difference between `x` and `y`). Your task is to determine whether it\'s possible to transform the array in such a way that all elements become equal. If possible, find the fewest number of operations needed to achieve this. Input The first line of the input contains one integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the elements of the array. Output Print -1 if it’s impossible to make all elements of the array equal by applying the operations described above. Otherwise, print the minimum number of operations needed to make all elements equal. Examples Input 4 1 2 3 4 Output 2 Input 3 4 4 4 Output 0 Input 5 1 5 7 9 11 Output -1 Note In the first sample, the operations to make all elements equal could be as follows: - Choose the first two elements (1, 2), replace them with (3, 1), array becomes [3, 1, 3, 4]. - Choose the second and third elements (1, 3), replace them with (4, 2), array becomes [3, 4, 4, 2]. - Choose the first and second elements (3, 4), replace them with (7, 1), array becomes [7, 1, 4, 2]. - Choose the second and third elements (1, 4), replace them with (5, 3), array becomes [7, 5, 3, 2]. - Choose the third and fourth elements (3, 2), replace them with (5, 1), array becomes [7, 5, 5, 1]. - Choose the first and second elements (7, 5), replace them with (12, 2), array becomes [12, 2, 5, 1]. - Choose the second and third elements (2, 5), replace them with (7, 3), array becomes [12, 7, 3, 1]. - Continue applying similar operations until all elements are equal. In the second sample, the array already has all elements equal, so no operations are needed.","solution":"def min_operations_to_make_equal(a): Determines the minimum number of operations needed to make all elements in the integer array equal. If it\'s impossible, returns -1. def gcd(x, y): while y: x, y = y, x % y return x # Edge case: If the array contains one element, it\'s already uniform if len(a) == 1: return 0 # Calculate the GCD of the entire array array_gcd = a[0] for num in a[1:]: array_gcd = gcd(array_gcd, num) # If the GCD of the entire array is not 1, it means all elements can be made equal to that GCD if array_gcd != 1: return 0 return -1"},{"question":"Maria has a list of integers and she wants to know the sum of the prime numbers in the list. Can you help her find the answer for each list she provides? INPUT: The first line contains the number of testcases T, followed by T sections. Each section starts with an integer L representing the length of the list, followed by L integers which make up the list. OUTPUT: For each testcase, print the sum of the prime numbers in the list in a single line. Constraints: 1 ≤ T ≤ 50 1 ≤ L ≤ 100 1 ≤ list[i] ≤ 1000 SAMPLE INPUT 3 4 10 15 3 7 5 1 2 3 4 5 3 25 19 17 SAMPLE OUTPUT 10 10 36","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_list(lst): Returns the sum of prime numbers in the given list. return sum(x for x in lst if is_prime(x)) def sum_of_primes_in_testcases(T, testcases): Returns a list of the sum of prime numbers for each testcase. results = [] for i in range(T): L = testcases[i][0] lst = testcases[i][1:] results.append(sum_of_primes_in_list(lst)) return results # Example usage: # T = 3 # testcases = [ # [4, 10, 15, 3, 7], # [5, 1, 2, 3, 4, 5], # [3, 25, 19, 17] # ] # print(sum_of_primes_in_testcases(T, testcases))"},{"question":"Jane and John are playing a game on a grid with n rows and m columns. Initially, all cells in the grid contain the value 0. Jane can place exactly k walls in the grid (cells that will be marked with value 1), which John cannot traverse. The walls can be placed in any cells, but no more than one wall can go into each cell. Then, Jane selects any cell as the starting position for John, who will move from this cell either up, down, left or right to an adjacent cell, as long as the cell is not a wall (i.e., it contains the value 0). John aims to count the number of distinct cells he can reach from the starting position before he can no longer move. Help John determine the maximum number of cells he can reach by choosing the optimal starting position, given Jane may place the k walls in any configuration she desires. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 50, 0 ≤ k ≤ n * m) — the number of rows, the number of columns, and the number of walls to place. Output Output a single integer — the maximum number of distinct cells John can reach. Example Input 4 4 4 Output 12 Input 3 3 1 Output 8 Note In the first example, one optimal placement of walls is in all four corners. If John starts in the center of the grid, he can reach all cells except the ones with walls, hence 16 - 4 = 12 reachable cells. In the second example, placing the wall in any corner allows John to start from the opposite corner, exploring all other 8 cells.","solution":"def max_reachable_cells(n, m, k): Returns the maximum number of distinct cells John can reach in a grid with dimensions n x m, after k walls are placed in the optimal configuration by Jane. total_cells = n * m reachable_cells = total_cells - k return reachable_cells"},{"question":"Robert has recently started learning data structures and algorithms. He is particularly fascinated by the concept of trees and their properties. In today\'s session, he learned about rooted trees. A rooted tree is a tree in which one vertex has been designated as the root and every edge either extends away from or towards the root. Robert\'s instructor has given him a task to determine some properties of a rooted tree. The task is as follows: Given a rooted tree with `N` nodes numbered from `1` to `N`. The root of the tree is node `1`. Each node `i` has a value `A[i]`. Robert\'s task is to answer `Q` queries of the following type: - Find the sum of the values of all nodes in the subtree rooted at node `X`. Help Robert by writing a program that handles these queries efficiently. # Input 1. The first line contains an integer `N` (1 ≤ N ≤ 10^5) - the number of nodes. 2. The second line contains `N` integers `A[1], A[2], ..., A[N]` - the values of the nodes. 3. Each of the next `N-1` lines contains two integers `U` and `V` (1 ≤ U, V ≤ N) - indicating that there is an undirected edge between node `U` and node `V`. 4. The next line contains an integer `Q` (1 ≤ Q ≤ 10^5) - the number of queries. 5. Each of the next `Q` lines contains a single integer `X` (1 ≤ X ≤ N) - the node which is the root of the subtree for the query. # Output For each query, print the sum of the values of all nodes in the subtree rooted at node `X`. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 3 5 3 3 4 1 ``` Output ``` 8 4 15 ``` # Explanation - For the first query, the subtree rooted at node `3` includes the nodes `{3, 5}` with values `3` and `5`, respectively. The sum is `3 + 5 = 8`. - For the second query, the subtree rooted at node `4` includes only node `4` with value `4`. - For the third query, the subtree rooted at node `1` includes all nodes `{1, 2, 3, 4, 5}` with values `1, 2, 3, 4, 5`, respectively. The sum is `1 + 2 + 3 + 4 + 5 = 15`.","solution":"from collections import defaultdict def subtree_sum(n, values, edges, queries): # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Storage for subtree sums subtree = [0] * (n + 1) visited = [False] * (n + 1) # Function to perform DFS and calculate subtree sums def dfs(node): visited[node] = True total = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: total += dfs(neighbor) subtree[node] = total return total # Start DFS from root node 1 dfs(1) # Result for each query results = [] for query in queries: results.append(subtree[query]) return results"},{"question":"You are given a rectangular grid of size n x m (n rows and m columns), initially filled with zeros. Each cell in the grid has coordinates (i, j), where 1 ≤ i ≤ n and 1 ≤ j ≤ m. You will be given q queries of the following form: add x to all cells in the subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). After performing all queries, you need to determine the maximum value in the final grid. Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 10000), the number of rows, columns, and queries respectively. The next q lines contain five integers r1, c1, r2, c2, x (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m, 1 ≤ x ≤ 100), describing a query which adds x to the subgrid from top-left (r1, c1) to bottom-right (r2, c2). Output Print a single integer, the maximum value found in the grid after all the queries. Examples Input 3 3 2 1 1 2 2 5 2 2 3 3 10 Output 15 Input 2 2 3 1 1 1 1 3 2 2 2 2 7 1 2 2 2 5 Output 12 Note In the first example: - After the first query, the grid will be: 5 5 0 5 5 0 0 0 0 - After the second query, the grid will be: 5 5 0 5 15 10 0 10 10 The maximum value in this grid is 15. In the second example: - After the first query, the grid will be: 3 0 0 0 - After the second query, the grid will be: 3 0 0 7 - After the third query, the grid will be: 3 8 0 12 The maximum value in this grid is 12.","solution":"def max_value_after_queries(n, m, queries): Returns the maximum value in the grid after applying all the queries. grid = [[0] * m for _ in range(n)] for query in queries: r1, c1, r2, c2, x = query for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += x max_val = max(max(row) for row in grid) return max_val"},{"question":"In a small town, there is a single one-way road that connects all the houses in a linear sequence. Each house is located at a unique point on this road, and the distance between any two adjacent houses is the same. You are given an array of integers where each value represents the number of people living in the corresponding house. A fire station is to be built at one of these houses such that the maximum distance to the farthest house is minimized. The distance between two houses is defined as the number of houses between them, inclusive. Write a function to determine the optimal position of the fire station, and return the maximum distance to the farthest house from this fire station in the optimal position. Input - An array of integers, `houses`, where `houses[i]` represents the number of people in the (i)-th house. The length of the array will be at least 1 and no more than (10^5). Output - An integer representing the minimized maximum distance from the fire station to the furthest house. Examples Input [ [2, 3, 1, 2, 4, 3] ] Output 3 Input [ [1, 2, 2, 1] ] Output 2 Input [ [1] ] Output 0","solution":"def optimal_fire_station_location(houses): Returns the minimized maximum distance to the farthest house for the optimal fire station location. n = len(houses) # The optimal position is the median of the house indices median_idx = (n - 1) // 2 # Calculate the maximum distance to the farthest house from the median max_distance = max(median_idx, n - 1 - median_idx) return max_distance"},{"question":"problem You are given an array of integers of length N and a positive integer K . Your task is to modify the array in the following way: 1. Select any pair of indices i, j such that 0 leq i < j < N . 2. Swap the elements at these indices. You are allowed to perform this operation at most K times. After performing the operations, your goal is to maximize the sum of the resultant array. Write a function to compute the maximum sum of the array after performing the allowed number of operations. # Input - The first line contains an integer N (2 ≤ N ≤ 100,000) - the length of the array. - The second line contains an integer K (1 ≤ K ≤ 100,000) - the maximum number of allowed swaps. - The third line contains N integers - the elements of the array. # Output - Output a single integer - the maximum possible sum of the array after performing the allowed number of operations. # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 15 ``` # Explanation The array is already in descending order. There is no need for any swaps, and the sum of the array is 15.","solution":"def max_array_sum(N, K, arr): Returns the maximum sum of the array after performing at most K swaps. # Sorting the array in descending order maximizes its sum directly. sorted_arr = sorted(arr, reverse=True) return sum(sorted_arr)"},{"question":"The city traffic control system is being upgraded to optimize traffic lights at intersections. The system uses a color code to identify each light. Each color is represented by a number from 0 to 9. Given a sequence of traffic lights, the system needs to determine the longest sequence composed of only two different colors. Can you help the traffic control system achieve this? Input The input consists of a single string, which represents the sequence of traffic lights. The string will contain at least one character and no more than 105 characters. Each character is a digit from \'0\' to \'9\'. Output Output the length of the longest sequence containing only two different colors. Examples Input 12311122333 Output 5 Input 1223334444 Output 7","solution":"def longest_two_color_sequence(s): Returns the length of the longest sequence containing only two different colors. max_length = 0 start = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of integers. You need to find and return the longest contiguous subarray such that all the elements in the subarray are equal. If there are multiple subarrays with the maximum length, return the subarray that appears first in the list. A contiguous subarray is a sequence of elements within an array that are consecutive and uninterrupted. For example, in the array [1, 2, 2, 3, 3, 3], the subarrays [2, 2] and [3, 3, 3] are contiguous subarrays. Input The input consists of a single line containing space-separated integers: the list of integers. Each integer is between 1 and 100, inclusive. The length of the list is between 1 and 100, inclusive. Output Output the longest contiguous subarray with all equal elements. If there are multiple, output the one that appears first. Examples Input 1 2 2 3 3 3 2 2 2 2 1 Output 2 2 2 2 Input 4 4 4 5 5 5 5 1 1 1 1 1 Output 1 1 1 1 1","solution":"def longest_equal_subarray(nums): Returns the longest contiguous subarray such that all the elements in the subarray are equal. If there are multiple subarrays with the maximum length, returns the one that appears first. :param nums: List of integers. :return: List of integers representing the longest contiguous subarray with equal elements. max_len = 1 current_len = 1 max_start_index = 0 current_start_index = 0 for i in range(1, len(nums)): if nums[i] == nums[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start_index = current_start_index current_len = 1 current_start_index = i if current_len > max_len: max_len = current_len max_start_index = current_start_index return nums[max_start_index:max_start_index + max_len] # Example usage: # print(longest_equal_subarray([1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1])) # Output: [2, 2, 2, 2] # print(longest_equal_subarray([4, 4, 4, 5, 5, 5, 5, 1, 1, 1, 1, 1])) # Output: [1, 1, 1, 1, 1]"},{"question":"You are given a 2D grid of size N x M, initially filled with zeros. You want to perform a series of P operations on this grid. Each operation is defined by the coordinates of a subrectangle within the grid and an integer value to add to each cell in that subrectangle. The goal is to determine the maximum value contained in any cell of the grid after all operations have been performed. For each operation, you are given four integers (x1, y1, x2, y2) that represent the coordinates of the top-left and bottom-right corners of the subrectangle within the grid, and an integer value V to add to each cell in that subrectangle. Write a program that performs all operations and finds the maximum value in the grid. # Constraints - 1 ≤ N, M ≤ 300 - 1 ≤ P ≤ 1000 - 0 ≤ x1 ≤ x2 < N - 0 ≤ y1 ≤ y2 < M - -1000 ≤ V ≤ 1000 # Input Input is given from Standard Input in the following format: ``` N M P x1_1 y1_1 x2_1 y2_1 V_1 x1_2 y1_2 x2_2 y2_2 V_2 ... x1_P y1_P x2_P y2_P V_P ``` # Output Print the maximum value contained in any cell of the grid after performing all the operations. # Example Input ``` 3 3 3 0 0 1 1 1 1 1 2 2 2 0 0 2 2 3 ``` Output ``` 6 ``` Input ``` 4 5 2 0 0 3 4 10 1 1 2 3 -5 ``` Output ``` 10 ```","solution":"def max_value_in_grid(N, M, operations): grid = [[0] * M for _ in range(N)] for x1, y1, x2, y2, V in operations: for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): grid[i][j] += V max_val = float(\'-inf\') for i in range(N): for j in range(M): if grid[i][j] > max_val: max_val = grid[i][j] return max_val"},{"question":"You are working on a project that involves processing and analyzing data from traffic cameras. You need to determine the longest duration that any given car was in view of a specific camera. The camera captures the license plate of cars at certain times. You do not have continuous footage, but you have a record of observations ordered by time. Each entry in the record indicates a timestamp when the car was spotted. Given these observations, your goal is to find the longest duration that any car was seen by the camera. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of observations recorded by the camera. The next n lines each contain a string s (the license plate number observed, which consists of uppercase alphanumeric characters, and its length is between 1 and 10) followed by an integer t (0 ≤ t ≤ 109) representing the timestamp of the observation. It is guaranteed that the timestamps for each observation are given in non-decreasing order. Output Print a single integer representing the longest duration in seconds that any given car was in view of the camera. If no car was spotted more than once, print 0. Examples Input 5 ABC123 1 XYZ789 3 ABC123 5 XYZ789 6 ABC123 9 Output 8 Input 4 AAA111 2 BBB222 3 CCC333 5 AAA111 8 Output 6 Note In the first example, \'ABC123\' was first spotted at timestamp 1 and last spotted at timestamp 9, giving a total duration of 9 - 1 = 8 seconds. No other car had a longer duration. In the second example, \'AAA111\' was first spotted at timestamp 2 and last spotted at timestamp 8, giving a total duration of 8 - 2 = 6 seconds. No other car had a longer duration.","solution":"def longest_car_duration(n, observations): from collections import defaultdict car_times = defaultdict(list) for obs in observations: s, t = obs.split() t = int(t) car_times[s].append(t) max_duration = 0 for times in car_times.values(): if len(times) > 1: duration = times[-1] - times[0] if duration > max_duration: max_duration = duration return max_duration"},{"question":"Alice is given a list of integers that represents the heights of trees in a straight line. She aims to cut down trees in such a way that the remaining trees form a sequence of non-decreasing heights. To achieve this, Alice needs to decide the minimum number of trees she has to cut down. Your task is to help her find this number. Input The first line of input contains an integer n (1 ≤ n ≤ 100 000) — the number of trees. The second line contains n integers hi (1 ≤ hi ≤ 100 000) — the heights of the trees. Output Output one integer — the minimum number of trees Alice has to cut down to make the remaining sequence of heights non-decreasing. Example Input 6 4 3 2 6 3 7 Output 3","solution":"def min_trees_to_cut(n, heights): Returns the minimum number of trees Alice has to cut down to make the remaining sequence non-decreasing. Parameters: n (int): Number of trees. heights (list of int): Heights of the trees. Returns: int: Minimum number of trees to cut down. if n == 0: return 0 # We\'ll use a dynamic programming approach to find the length of the longest non-decreasing subsequence. dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The minimum number of trees to cut is the total number of trees # minus the length of the longest non-decreasing subsequence. max_non_decreasing_length = max(dp) return n - max_non_decreasing_length # Example Usage: # n = 6 # heights = [4, 3, 2, 6, 3, 7] # print(min_trees_to_cut(n, heights)) # Output: 3"},{"question":"You are given a string containing only lowercase alphabets. Your task is to find the longest substring without repeating characters. The substring must be a contiguous block of characters within the string. Write a function `longest_unique_substring` that takes a single string as input and returns the longest substring without repeating characters. If there are multiple substrings with the same maximum length, return the one that appears first. Input A single string `s` containing only lowercase alphabets (\'a\'-\'z\'). Output A single string which is the longest substring without repeating characters. Constraints 1 ≤ |s| ≤ 10^5 SAMPLE INPUT abcabcbb SAMPLE OUTPUT abc SAMPLE INPUT bbbbb SAMPLE OUTPUT b SAMPLE INPUT pwwkew SAMPLE OUTPUT wke","solution":"def longest_unique_substring(s): Finds the longest substring without repeating characters. Parameters: s (str): The input string containing only lowercase alphabets. Returns: str: The longest substring without repeating characters. start = 0 max_length = 0 max_substring = \\"\\" char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end+1] return max_substring"},{"question":"You are given a sequence made up of opening and closing brackets. Your task is to determine if the sequence is balanced. A balanced sequence means that every opening bracket has a corresponding closing bracket in the correct order. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 200 000), where each character is either \'(\' or \')\'. Output Output \\"YES\\" if the sequence is balanced, otherwise \\"NO\\". Examples Input (()) Output YES Input ((()) Output NO Input ())( Output NO Note In the first example, every opening bracket \'(\' has a corresponding closing bracket \')\', and the sequence is in the correct order. In the second example, there are more opening brackets \'(\' than closing brackets \')\', hence the sequence is not balanced. In the third example, the sequence starts and ends with a closing bracket \')\', which does not properly balance the initial brackets given.","solution":"def is_balanced(s): Determines if the sequence of brackets is balanced. Args: s (str): A string consisting of \'(\' and \')\' Returns: str: \\"YES\\" if the sequence is balanced, otherwise \\"NO\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() if not stack: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an n x n grid of positive integers. You need to find the minimum cost path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. The cost of a path is the sum of the values of the cells in the path. For example, consider the following 3x3 grid: ``` 1 3 1 1 5 1 4 2 1 ``` The cost to traverse from the top-left to the bottom-right corner of this grid along the path 1→3→1→1→1 is 7, which is the minimum cost. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing an integer n (1 ≤ n ≤ 100) — the size of the grid. Then follow n lines each containing n integers (1 ≤ a_ij ≤ 1000) — the positive integers in the grid. Output For each test case, output one integer — the minimum cost to traverse from the top-left to the bottom-right corner of the grid. Example Input ``` 2 3 1 3 1 1 5 1 4 2 1 2 1 2 3 4 ``` Output ``` 7 7 ``` Note In the first test case, the minimum cost path is 1→3→1→1→1 with a cost of 7. In the second test case, the minimum cost path is 1→2→4 with a cost of 7.","solution":"def min_cost_path(grid): This function calculates the minimum cost path from the top-left corner to the bottom-right corner of a grid. You can only move right or down at any point in time. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and the first column for i in range(1, n): dp[0][i] = dp[0][i - 1] + grid[0][i] dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1] def solve(test_cases): results = [] for grid in test_cases: results.append(min_cost_path(grid)) return results"},{"question":"A company stores customer data in a database, which includes a unique customer ID and a list of transactions made by the customer. Each transaction has a unique transaction ID and an associated amount in dollars. The company wants to identify any customers who have transaction amounts that are in strictly increasing order. Given the list of transactions for each customer, the task is to determine which customers have all their transactions in strictly increasing order by transaction amount. If a customer has multiple transactions with the same amount or if the order is not strictly increasing, they should not be considered in the output. Input The first line contains a single integer T ≤ 50 indicating the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) representing the number of customers. The next n lines each contain: - A customer ID (a string of alphanumeric characters with a maximum length of 10) - An integer m (0 ≤ m ≤ 1000) indicating the number of transactions for the customer - A list of m integers representing the transaction amounts Output For each test case, output the customer IDs of those customers who have all transactions in strictly increasing order by transaction amount. The customer IDs should be listed in the order they appear in the input. If no customers meet the criteria, output \\"None\\". Example Input: 2 3 cust1 4 10 20 30 40 cust2 3 15 12 18 cust3 2 50 50 2 clientA 5 1 3 4 8 10 clientB 4 5 5 5 5 Output: cust1 clientA","solution":"def strictly_increasing_customers(T, test_cases): Returns a list of customer IDs who have all transactions in strictly increasing order by transaction amount. result = [] for case in test_cases: n, customers = case valid_customers = [] for customer in customers: customer_id, m, transactions = customer if all(transactions[i] < transactions[i + 1] for i in range(m - 1)): valid_customers.append(customer_id) if valid_customers: result.append(valid_customers) else: result.append([\\"None\\"]) return result"},{"question":"In a warehouse, there are `n` boxes, each with a certain weight. These boxes need to be loaded onto a truck with a weight limit `W`. The task is to find the minimum number of trips required to load all the boxes onto the truck. Each trip consists of loading the truck with some of the boxes such that the total weight of the loaded boxes does not exceed `W`. After each trip, the truck returns to the warehouse and can be loaded again with a different set of boxes. You cannot split a box\'s weight between multiple trips. Your aim is to minimize the number of trips required to move all boxes. Input The first line contains two integers `n` and `W` (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^6) — the number of boxes and the maximum weight the truck can carry in one trip. The second line contains `n` space-separated integers `w_1, w_2, ..., w_n` (1 ≤ w_i ≤ 10^6) — the weights of each box. Output Print the minimum number of trips required to move all boxes. Examples Input 5 10 2 3 7 5 1 Output 3 Input 4 15 4 8 5 6 Output 2 Note In the first example, one way to make the minimum number of trips (three) is: 1. Load the truck with the boxes of weights 7 and 3. 2. Load the truck with the boxes of weights 5 and 2. 3. Load the truck with the box of weight 1. In the second example, one way to make the minimum number of trips (two) is: 1. Load the truck with the boxes of weights 8 and 4. 2. Load the truck with the boxes of weights 6 and 5.","solution":"def min_trips(n, W, weights): Returns the minimum number of trips required to move all boxes. Parameters: n (int): Number of boxes. W (int): Maximum weight the truck can carry in one trip. weights (list): List of box weights. Returns: int: Minimum number of trips. weights.sort() # Sort weights in ascending order left, right = 0, n - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= W: left += 1 # Load the lightest box right -= 1 # Always load the heaviest box trips += 1 return trips"},{"question":"You are given a tree (connected, undirected acyclic graph) with n vertices. Each vertex i has a value a_i. Your task is to find the smallest path sum in this tree such that the sum of values of vertices in this path is greater than or equal to a given integer S. A path in the tree is any set of vertices connected by edges, where any vertex in the path is connected to at most two other vertices in the path (i.e., no cycles). Input The first line contains integers n and S (2 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9) — the number of vertices in the tree and the required sum. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the values of the vertices. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge in the tree connecting vertex u and vertex v. Output Print the smallest path sum that is greater than or equal to S. If no such path exists, print -1. Examples Input 6 15 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 Output 15 Input 5 10 1 1 1 1 1 1 2 1 3 3 4 3 5 Output -1 Note In the first test case, the path {3, 4, 5, 6} has a sum of 18, which is the smallest path sum that is greater than or equal to 15. In the second test case, no path has a sum greater than or equal to 10. Hence, the output is -1.","solution":"def smallest_path_sum_greater_equal_S(n, S, vertex_values, edges): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) def bfs(start): visited = [False] * n min_path_sum = float(\'inf\') queue = deque([(start, 0, 0)]) # (current node, current sum, initial node value) while queue: node, accumulated_sum, initial_sum = queue.popleft() if accumulated_sum >= S: min_path_sum = min(min_path_sum, initial_sum) visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append((neighbor, accumulated_sum + vertex_values[neighbor], initial_sum + vertex_values[neighbor])) return min_path_sum result = float(\'inf\') for i in range(n): result = min(result, bfs(i)) return result if result != float(\'inf\') else -1"},{"question":"Write a function to determine the minimum number of operations required to convert a given string `s` into a string `t`. Each operation is defined as either inserting a character, deleting a character, or replacing a character. Constraints * 1 ≤ |s|, |t| ≤ 1000 * Both strings only contain lowercase letters. Input Two strings: * s * t Output Print the minimum number of operations required. Examples Input horse ros Output 3 Input intention execution Output 5","solution":"def min_distance(s, t): Returns the minimum number of operations required to convert string s to string t. Operations allowed are insert, delete, replace. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[m][n]"},{"question":"Given a string containing both lowercase and uppercase letters, determine the number of unique characters in the string. Each character is considered case-insensitively. # Input The input consists of a single line containing a string of length between 1 and 100 inclusive. The string will contain only English alphabetic characters (both lowercase and uppercase). # Output Output the number of unique characters in the string considering case-insensitive matches. # Examples Input 1 ``` HelloWorld ``` Output 1 ``` 7 ``` Input 2 ``` AmazingCode ``` Output 2 ``` 7 ```","solution":"def count_unique_characters(input_string): Returns the number of unique characters in the input string considering case-insensitivity. # Convert the string to lowercase input_string = input_string.lower() # Use a set to track unique characters unique_characters = set(input_string) # Return the count of unique characters return len(unique_characters)"},{"question":"Write a program to find the intersection of two given sets of integers. Each set is represented as a list of integers. The program should read two lists and output a list containing all the elements that are present in both lists. Input Given multiple datasets. Each dataset consists of two lines: The first line contains the integers in the first set separated by spaces. The second line contains the integers in the second set separated by spaces. Both sets can have up to 1000 integers each, and each integer is between 1 and 10,000. Each dataset ends with a blank line, and the number of datasets does not exceed 50. Output For each dataset, print a line containing the elements present in both sets, in ascending order. If there is no common element, print an empty line. Example Input 1 2 3 4 5 4 5 6 7 8 10 11 12 13 13 14 15 16 21 22 23 24 25 26 Output 4 5 13","solution":"def find_intersection(set1, set2): Returns a sorted list containing the intersection of two sets of integers. intersection = set(set1) & set(set2) return sorted(intersection) def process_datasets(datasets): Processes multiple datasets, each containing two lines of integers, and returns the intersections for each dataset. results = [] for dataset in datasets: set1 = list(map(int, dataset[0].split())) set2 = list(map(int, dataset[1].split())) intersection = find_intersection(set1, set2) results.append(\\" \\".join(map(str, intersection))) return results"},{"question":"A group of friends are playing a board game on a chess-like grid. The game involves placing tokens on various positions in the grid such that at the end of their turn, there should be no two tokens that the same row or column of the grid. The challenge is to determine how to place the tokens in the grid according to the game\'s rules. Given the size of the grid and the coordinates of some pre-placed tokens, your task is to place the remaining tokens on the grid while ensuring no two tokens are in the same row or column. If it is not possible to place all tokens while satisfying the conditions, output \\"Not Possible\\". INPUT: The first line of the input contains two integers N and M, the size of the grid (N x N) and the number of pre-placed tokens respectively. The next M lines contain two space-separated integers x and y representing the coordinates of the pre-placed tokens. OUTPUT: Print the coordinates of the tokens to be placed such that they occupy unique rows and columns, or print \\"Not Possible\\" if such an arrangement is not feasible. CONSTRAINTS: 1 <= N <= 50 0 <= M <= N SAMPLE INPUT: 4 2 1 2 3 4 SAMPLE OUTPUT: 2 1 4 3 Note: The coordinates of the remaining tokens to be placed should ensure that no two tokens share the same row or column.","solution":"def place_tokens(N, M, pre_placed): Place tokens on the grid such that no two tokens are in the same row or column. Args: N : int : Size of the grid (NxN) M : int : Number of pre-placed tokens pre_placed : List of Tuple(int, int) : Coordinates of pre-placed tokens Returns: List of Tuple(int, int) : Coordinates of the tokens to be placed or \\"Not Possible\\" if M > N: return \\"Not Possible\\" rows = {i for i in range(1, N+1)} cols = {i for i in range(1, N+1)} for x, y in pre_placed: if x in rows: rows.remove(x) if y in cols: cols.remove(y) if len(rows) < N - M or len(cols) < N - M: return \\"Not Possible\\" result = list(zip(rows, cols)) return result # Example usage N = 4 M = 2 pre_placed = [(1, 2), (3, 4)] print(place_tokens(N, M, pre_placed)) # Output: [(2, 1), (4, 3)]"},{"question":"In a far-off land, there exists a magical forest guarded by N mythical creatures. Each creature has a unique power level. One day, the forest\'s peace is threatened by a powerful intruder. In order to defeat the intruder, the guardians must combine their powers to form the highest possible attack value. However, they can only use up to a certain number of creatures for this attack. Given the power levels of the creatures and the maximum number of creatures that can be combined, help determine the highest possible attack value that can be achieved. Input The first line of the input contains an integer T denoting the number of test cases. For each test case: - The first line contains two integers N and K, where N is the number of guardians, and K is the maximum number of guardians that can be combined for the attack. - The second line contains N integers representing the power levels of the guardians. Output For each test case, output the highest possible attack value that can be achieved. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 1 ≤ power level ≤ 10000 Example Input: 2 5 3 4 8 6 3 5 4 2 10 20 30 40 Output: 19 70","solution":"def highest_attack_value(test_cases): Returns a list of the highest possible attack values for each test case. :param test_cases: List of test cases, where each test case is a tuple of (N, K, power_levels). :return: List of integers representing the highest possible attack value for each test case. results = [] for N, K, power_levels in test_cases: # Sort power levels in descending order and sum the top K elements sorted_power_levels = sorted(power_levels, reverse=True) highest_attack = sum(sorted_power_levels[:K]) results.append(highest_attack) return results def parse_input_data(input_data): Parses the input data to extract individual test cases. :param input_data: The raw multiline string input data. :return: List of test cases in the format (N, K, power_levels). lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) index += 1 power_levels = list(map(int, lines[index].split())) index += 1 test_cases.append((N, K, power_levels)) return test_cases def format_output(results): Formats the output results. :param results: List of results for each test case. :return: String representing the formatted output. return \'n\'.join(map(str, results))"},{"question":"A software company is organizing a coding competition. The company wants to allocate different difficulty levels to the problems based on the total number of lines of code (LOC) different participants have submitted in the past competitions. The difficulty level is determined based on the median LOC among all participants. If the total number of participants is odd, the difficulty of the problem is exactly the median LOC. If the total number is even, the difficulty is the average of the two medians rounded down to the nearest integer. Given the LOC submitted by `n` participants in the past, help the company compute the difficulty level of the new problem. Input The first line contains an integer `n` (1 ≤ n ≤ 100), which is the number of participants. The second line contains `n` integers representing the lines of code submitted by each participant in past competitions. Each integer is between 1 and 10^5. Output Output one integer, which is the difficulty level of the new problem. Example Input 5 200 150 300 170 180 Output 180 Input 4 120 130 140 150 Output 135 Note In the first example, the sorted LOCs are [150, 170, 180, 200, 300]. Since the number of participants is 5, which is odd, the difficulty level is the median LOC, which is 180. In the second example, the sorted LOCs are [120, 130, 140, 150]. Since the number of participants is 4, which is even, the difficulty level is the average of the two medians: (130 + 140) / 2 = 135.","solution":"def calculate_difficulty(loc_list): Calculate the difficulty level based on the median LOC. Parameters: loc_list (list): A list of integers representing LOC submitted by each participant. Returns: int: The difficulty level of the new problem. loc_list.sort() n = len(loc_list) if n % 2 == 1: # Odd number of participants, return the median return loc_list[n // 2] else: # Even number of participants, return the average of the two medians rounded down to nearest integer middle = n // 2 return (loc_list[middle - 1] + loc_list[middle]) // 2"},{"question":"Given a 2D grid of size m x n, where each cell has an initial value represented by a 2D array `grid`. You are allowed to perform the following operation as many times as you\'d like: choose any cell and increase its value by 1. Your goal is to maximize the minimum value in the grid after performing any number of operations. Constraints - 1 ≤ m, n ≤ 50 - 0 ≤ grid[i][j] ≤ 100 Input - `m`, `n`: the dimensions of the grid - `grid`: a 2D array of integers representing the initial values of the cells Output - Print the maximum possible minimum value of the grid after performing any number of operations. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 9","solution":"def max_min_value(m, n, grid): Returns the maximum possible minimum value in a grid after performing any number of operations. if m == 0 or n == 0: return 0 # The maximum possible minimum value we can achieve is the same as the maximum value in the grid. max_value = max(max(row) for row in grid) return max_value # For testing purposes, we should include an example call here: if __name__ == \\"__main__\\": m, n = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_min_value(m, n, grid)) # Output: 9"},{"question":"In a small town, a group of friends decided to form a club where they will rotate the responsibility of organizing weekly meetings. They decided on the following rules: - There are n friends in the club, each friend is assigned a unique number from 1 to n. - The club holds m meetings, and at each meeting, any friend can choose to step in and organize it. - If more than one friend steps in for the same meeting, the friend with the smallest number among them will take responsibility. - The friends keep a record of who organized which meeting in the form of tuples (F, Q) where F is the friend number and Q is the meeting number. However, some meetings might not have any organizer, in which case the record for that meeting will be (0, Q). Now, each friend wants to know how many meetings they organized by the end of the m meetings. Write a function `meeting_organizers(n: int, m: int, records: List[Tuple[int, int]]) -> List[int]` that returns a list of n integers where the i-th integer corresponds to the number of meetings organized by the friend number i+1. # Input - n and m are integers representing the number of friends and meetings respectively (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5). - records is a list of tuples (F, Q) representing the records of meetings. # Output - Return a list of n integers representing the number of meetings organized by each friend. # Example Input ``` n = 4 m = 5 records = [(1, 1), (2, 2), (1, 3), (0, 4), (3, 5)] ``` Output ``` [2, 1, 1, 0] ``` # Explanation - Friend 1 organized meetings 1 and 3. - Friend 2 organized meeting 2. - Friend 3 organized meeting 5. - Meeting 4 had no organizer. The output [2, 1, 1, 0] means Friend 1 organized 2 meetings, Friend 2 organized 1 meeting, Friend 3 organized 1 meeting, and Friend 4 organized 0 meetings.","solution":"from typing import List, Tuple def meeting_organizers(n: int, m: int, records: List[Tuple[int, int]]) -> List[int]: Returns the number of meetings organized by each friend. # Initialize a list to count organized meetings for each friend organizers_count = [0] * n for friend, meeting in records: if friend != 0: organizers_count[friend - 1] += 1 return organizers_count"},{"question":"A group of friends is playing a game called \\"MinMaxAttack\\". In this game, they have an array of integers. On each turn, a player selects two distinct elements from the array and removes them. The player then decides the outcome by choosing either the minimum or the maximum of the two removed elements and discards it. The remaining element is added back to the array. They continue this process until only one element is left in the array. The player who removes the last two elements wins if the remaining array element is even, otherwise they lose. You are to determine, given a starting array, whether the first player has a winning strategy assuming both players play optimally. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of integers in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 100), the elements of the array. Output Output \\"WIN\\" if the first player can guarantee a win, or \\"LOSE\\" if the first player will lose assuming optimal play. Examples Input 5 1 3 5 7 9 Output LOSE Input 4 2 4 6 8 Output WIN Note In the first example, no matter how the first player plays, the end result will always be an odd number, resulting in a loss. In the second example, the first player can always force an even number to remain at the end, ensuring a win.","solution":"def minmax_attack(n, arr): Determines if the first player has a winning strategy in the game MinMaxAttack. Parameters: n (int): The number of integers in the array. arr (list): The list of integers. Returns: str: \\"WIN\\" if the first player can guarantee a win, otherwise \\"LOSE\\". # Counting the number of odd numbers in the array odd_count = sum(1 for x in arr if x % 2 != 0) # If the number of odd numbers is even, the first player can guarantee a win if odd_count % 2 == 0: return \\"WIN\\" else: return \\"LOSE\\""},{"question":"You are given a grid with R rows and C columns. Some cells in the grid are blocked and represented as \'#\' while other cells are open and represented as \'.\'. Your task is to find the shortest path from the top-left corner of the grid (1,1) to the bottom-right corner of the grid (R,C). The path can only move through open cells and can move in four directions: up, down, left, and right. If there is no path from (1,1) to (R, C), return -1 for that dataset. Input The input consists of multiple datasets. Each dataset begins with a line containing the integers R and C (1 ≤ R, C ≤ 1,000). Each of the next R lines contains C characters representing the grid, where \'.\' is an open cell and \'#\' is a blocked cell. The end of input is indicated by a line with a single zero. Output For each dataset, output the length of the shortest path from (1,1) to (R,C) in a separate line. If there is no such path, output -1. Example Input 4 4 . . . # . # . . . # . # . . . . 3 3 . # . # . . . . . 0 Output 7 -1","solution":"from collections import deque def shortest_path_in_grid(grid, R, C): Returns the length of the shortest path from the top-left to the bottom-right in the grid. If there is no path, returns -1. def is_valid_move(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (R-1, C-1): return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1 def process_multiple_datasets(input_data): Processes multiple datasets and returns the shortest path length for each grid. results = [] input_lines = input_data.strip().split(\'n\') i = 0 while i < len(input_lines): line = input_lines[i] if line == \'0\': break R, C = map(int, line.split()) grid = [input_lines[i+j+1] for j in range(R)] results.append(shortest_path_in_grid(grid, R, C)) i += R + 1 return results"},{"question":"A gardener wants to arrange a row of flower pots in his garden. He has n flower pots of different colors, and he wants to make sure no two adjacent flower pots have the same color. Given an array of integers representing the color of the flower pots in the row, determine the minimum number of flower pots that need to be swapped to achieve this arrangement. Input The first line contains an integer n (1 ≤ n ≤ 100,000) – the number of flower pots. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) – representing the colors of the flower pots in the initial arrangement. Output Print the minimum number of swaps needed. Examples Input 6 1 1 2 2 3 3 Output 2 Input 3 3 1 2 Output 0 Note In the first example, we can swap the second and third flower pots, and then swap the fourth and fifth flower pots to achieve the arrangement [1, 2, 1, 3, 2, 3]. In the second example, the flower pots are already arranged such that no two adjacent pots have the same color, so no swaps are needed.","solution":"def min_swaps_to_avoid_adjacent_same_colors(n, pots): swaps = 0 for i in range(1, n): if pots[i] == pots[i - 1]: swaps += 1 if i + 1 < n and pots[i + 1] != pots[i]: pots[i], pots[i + 1] = pots[i + 1], pots[i] else: pots[i] = -pots[i] # temporarily change the color to avoid increasing the index return swaps # Example usage # n = 6 # pots = [1, 1, 2, 2, 3, 3] # print(min_swaps_to_avoid_adjacent_same_colors(n, pots)) # Output: 2"},{"question":"Hexadecimal Colour Combination In digital design, colors are represented using a hexadecimal color code. A hexadecimal color is a 6-digit combination of letters and numbers, preceded by a hash (#). The notation uses 16 letters and digits (0-9, and A-F), where the first two digits represent the red component, the next two digits represent the green component and the last two digits represent the blue component. Your task is to determine the resulting color when two hexadecimal colors are combined. The combination rule is straightforward: the red, green, and blue components of the resulting color are the averages of the respective components of the two input colors. Any fractions in the resulting components need to be rounded down to their nearest integer. For example: - Combining #FF0000 (pure red) with #00FF00 (pure green) results in #7F7F00 (a blend of red and green). - Combining #123456 with #654321 results in #3B3B3B. The input consists of multiple datasets, each in the following format: ``` c1 c2 ``` Where `c1` and `c2` are the two hexadecimal color codes to be combined. The input is terminated by a line with two zeros (`0 0`). Your task is to output the resulting hexadecimal color code for each combination. # Input The input consists of multiple datasets: - Each dataset contains two hexadecimal color codes, `c1` and `c2`. - The input terminates with `0 0`. The input colors are valid hexadecimal codes represented as `#RRGGBB`. # Output For each dataset, output the resulting hexadecimal color code after combining the two input colors. # Sample Input ``` #FF0000 #00FF00 #123456 #654321 #000000 #FFFFFF 0 0 ``` # Sample Output ``` #7F7F00 #3B3B3B #7F7F7F ``` # Explanation In the first example, the average red component is (255 + 0)/2 = 127.5 rounded down to 127 = 7F in hexadecimal. The green and blue components follow similarly. In the second example, the average is calculated component-wise: - Red: (18 + 101) / 2 = 59.5 rounded down to 59 = 3B - Green: (52 + 67) / 2 = 59.5 rounded down to 59 = 3B - Blue: (86 + 33) / 2 = 59.5 rounded down to 59 = 3B","solution":"def combine_hex_colors(c1, c2): Combines two hexadecimal color codes by averaging their red, green, and blue components. def hex_to_rgb(hex_color): return tuple(int(hex_color[i:i+2], 16) for i in (1, 3, 5)) def rgb_to_hex(rgb_color): return \\"#{:02X}{:02X}{:02X}\\".format(*rgb_color) rgb1 = hex_to_rgb(c1) rgb2 = hex_to_rgb(c2) combined_rgb = tuple((rgb1[i] + rgb2[i]) // 2 for i in range(3)) return rgb_to_hex(combined_rgb) def process_color_combinations(input_list): results = [] for colors in input_list: if colors == \\"0 0\\": break c1, c2 = colors.split() result_color = combine_hex_colors(c1, c2) results.append(result_color) return results"},{"question":"Alice loves climbing mountains and recording the heights of each hill she climbs during her adventures. She has a log of the heights for each day of her trip given in an array `Heights`, where `Height[i]` represents the height of the mountain climbed on the i-th day. Bob, her friend, likes to know for each day, how many previous days had mountains with heights lower than the height of the mountain climbed on the current day. Can you help Alice provide this information to Bob? Input: The first line contains a single integer `T`, denoting the number of test cases. In each test case, the following input will be present: - First line contains an integer `N`, where `N` represents the number of days in the trip. - Next `N` lines contain `N` integers, where the i-th line contains `Height[i]`, representing the height of the mountain climbed on the i-th day. Output: Output exactly `T` lines. Each line contains `N` integers separated by a space, where the i-th integer represents the number of previous days with mountain heights lower than the height of the mountain on the i-th day. Constraints: - 1 ≤ T ≤ 30 - 1 ≤ N ≤ 10^4 - 1 ≤ Height[i] ≤ 10^6 SAMPLE INPUT 1 5 2 1 4 2 3 SAMPLE OUTPUT 0 0 2 0 3 Explanation In the sample input, given `T = 1` in the first line and `N = 5` in the next line. The heights logged for the 5 days are: [2, 1, 4, 2, 3]. For the height on the first day (2), no previous days. Output for this height is 0. For the height on the second day (1), previous heights were {2}. None of them are less than 1. Output is 0. For the height on the third day (4), previous heights were {2, 1}. Both are less than 4. Output is 2. For the height on the fourth day (2), previous heights were {2, 1, 4}. Only {1} is less than 2. Output is 1. For the height on the fifth day (3), previous heights were {2, 1, 4, 2}. {2, 1, 2} are less than 3. Output is 3. So the final output is {0, 0, 2, 1, 3}.","solution":"def count_lower_heights(test_cases): results = [] for heights in test_cases: n = len(heights) result = [] for i in range(n): count = 0 for j in range(i): if heights[j] < heights[i]: count += 1 result.append(count) results.append(result) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) index += 1 heights = [] for _ in range(N): heights.append(int(lines[index])) index += 1 test_cases.append(heights) return test_cases def main(input_data): test_cases = process_input(input_data) results = count_lower_heights(test_cases) for result in results: print(\\" \\".join(map(str, result))) # Example usage (within unit tests): # input_data = \\"1n5n2n1n4n2n3n\\" # main(input_data)"},{"question":"Alice has recently learned about permutations and is fascinated by them. She wants to generate all permutations of a given string `s` that are lexicographically greater than the string itself. However, Alice finds it difficult to distinguish which permutations are lexicographically greater. She needs your help to list all such permutations in sorted order. Write a program to help Alice by following these steps: 1. Compute all possible permutations of the string `s`. 2. Filter out the permutations that are lexicographically greater than the original string `s`. 3. Output these permutations in lexicographically sorted order. Input The first line contains an integer `t` (1 ≤ t ≤ 10), the number of test cases. For each test case, there is a single line containing a string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 8). Output For each test case, print all permutations that are lexicographically greater than `s`, one per line in sorted order. If no such permutations exist, print `no answer` instead. Examples Input 2 abc cba Output acb bac bca cab no answer","solution":"from itertools import permutations def get_greater_permutations(s): Generates all permutations of the string `s` that are lexicographically greater than `s`, and returns them in a sorted list. all_perms = sorted(set(\'\'.join(p) for p in permutations(s))) greater_perms = [p for p in all_perms if p > s] if greater_perms: return greater_perms else: return [\\"no answer\\"] def process_multiple_cases(test_cases): Processes multiple test cases and returns the results for each case. results = [] for s in test_cases: results.append(get_greater_permutations(s)) return results # Function to handle input and output def main(): t = int(input()) test_cases = [input().strip() for _ in range(t)] results = process_multiple_cases(test_cases) for result in results: for perm in result: print(perm)"},{"question":"You are given an array of positive integers B of length M. You are required to find the sum of all odd prime numbers present in the array. Constraints: * All values in the input are integers. * 1 leq M leq 10^5 * 1 leq B_i leq 10^6 Input: Input is given from Standard Input in the following format: M B_1 B_2 cdots B_M Output: Print the sum of all odd prime numbers in the array. Examples: Input: 6 11 24 9 7 10 5 Output: 23 Input: 5 25 4 8 10 15 Output: 0 Input: 7 2 3 5 13 17 19 23 Output: 80","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return False # 2 is not an odd prime number if n % 2 == 0: return False sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True def sum_odd_primes(arr): Returns the sum of all odd prime numbers in the array. return sum(x for x in arr if is_prime(x)) # Example usage: # if __name__ == \\"__main__\\": # import sys # input = sys.stdin.read # data = input().split() # M = int(data[0]) # B = list(map(int, data[1:])) # print(sum_odd_primes(B))"},{"question":"Problem Statement You have a list of integers that represents a sequence of stock prices over consecutive days. Your task is to determine the maximum profit you can achieve by performing a series of transactions. You may complete as many transactions as you like, but you must sell your stock before buying again. **Input:** - The input starts with a single integer `T` which represents the number of test cases. - For each test case, there is: - An integer `N` representing the number of days. - A line containing `N` integers representing the stock prices on each day. **Output:** - For each test case, output the maximum profit you can achieve. **Example:** Input: ``` 3 6 7 1 5 3 6 4 4 1 2 3 4 5 7 6 4 3 1 ``` Output: ``` 7 3 0 ``` **Explanation:** In the first example, the maximum profit can be achieved with the following transactions: - Buy on day 2 (price = 1) and sell on day 3 (price = 5) for profit = 4. - Buy on day 4 (price = 3) and sell on day 5 (price = 6) for profit = 3. Total profit = 4 + 3 = 7. In the second example, the prices are continuously rising, and the best strategy is to buy on day 1 and sell on day 4 for total profit = 3. In the third example, the prices are continuously falling, and there is no profitable transaction, so the maximum profit is 0. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^4 - 0 ≤ Prices ≤ 10^4","solution":"def max_profit(prices): Function to calculate the maximum profit that can be achieved by buying and selling stocks given the stock prices for each day. profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit def solve_test_cases(T, test_cases): Function to process multiple test cases and return the results for each. results = [] for i in range(T): N, prices = test_cases[i] results.append(max_profit(prices)) return results"},{"question":"You are given a sequence of integers, and your task is to find a contiguous subarray which has the largest sum and print that sum. If there are multiple such subarrays, find the one which has the smallest length. Input The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains: - An integer n (1 ≤ n ≤ 100000) — the length of the sequence. - Followed by n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output For each test case, output a single integer — the sum of the contiguous subarray with the largest sum. If there are multiple subarrays with the largest sum, output the sum of the shortest one. Example Input 3 5 1 2 3 -2 5 5 -1 -2 -3 -4 6 3 -2 -3 -1 Output 9 6 -1 Note In the first test case, the subarray with the largest sum is [1, 2, 3, -2, 5] with a sum of 9. In the second test case, even though the contiguous subarray [-1, -2, -3, -4, 6] has only one positive number, it has the largest sum of 6. In the third test case, the subarray with the largest sum is [-1] with a sum of -1.","solution":"def max_subarray_sum_shortest(t, test_cases): results = [] for case in test_cases: n, arr = case max_sum = float(\'-inf\') current_sum = 0 min_length = n + 1 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if current_sum > max_sum or (current_sum == max_sum and (end - start + 1) < min_length): max_sum = current_sum min_length = end - start + 1 results.append(max_sum) return results"},{"question":"Anna is organizing a charity event and she needs to allocate n donated items to m different categories based on certain rules. Each item is characterized by two integers: its ID and its value. The allocation rules are as follows: 1. Items with IDs in the range [1, a] should be allocated to category 1. 2. Items with IDs in the range [a+1, b] should be allocated to category 2. 3. Items with IDs in the range [b+1, c] should be allocated to category 3. 4. Items with IDs greater than c should be allocated to category 4. Given the list of items with their respective IDs and values, your task is to print the total value of items in each category. Input - The first line contains two integers n (1 ≤ n ≤ 100) and m (4 ≤ m ≤ 4) — the number of items and the fixed number of categories. - The second line contains three integers a, b, and c (1 ≤ a < b < c ≤ 100) — the ID thresholds for the categories. - The next n lines each contain two integers IDi and Vi (1 ≤ IDi ≤ 100, 0 ≤ Vi ≤ 1000) — the ID and value of the i-th item. Output - Print four integers — the total values of the items in categories 1, 2, 3, and 4 respectively, each on a new line. Examples Input 5 4 10 20 30 1 100 15 200 25 300 8 400 35 500 Output 500 200 300 500 Input 3 4 5 10 15 4 50 9 100 20 250 Output 50 100 0 250","solution":"def allocate_items(n, thresholds, items): Allocates items into categories based on their IDs. Args: n (int): number of items. thresholds (tuple): a tuple containing three integers a, b, c. items (list of tuples): list of tuples where each tuple contains two integers, ID and value of the item. Returns: list: a list containing total values of items in each category. a, b, c = thresholds category_values = [0, 0, 0, 0] for item in items: ID, value = item if 1 <= ID <= a: category_values[0] += value elif a < ID <= b: category_values[1] += value elif b < ID <= c: category_values[2] += value else: category_values[3] += value return category_values"},{"question":"Write a program that reads a sequence of integers and calculates the sum of all unique elements in the sequence. Note Constraints * n ≤ 100 * -1000 ≤ ai ≤ 1000 Input The input is given in the following format: n a1 a2 . . . an n is the size of the sequence and ai is the ith element of the sequence. Output Print the sum of all unique elements in the sequence. Examples Input 5 1 2 2 3 4 Output 8 Input 6 -1 2 -1 3 3 4 Output 6","solution":"def sum_of_unique_elements(n, elements): Returns the sum of all unique elements in the sequence. :param n: Number of elements in the sequence. :param elements: List of integers representing the sequence. :return: Integer sum of unique elements. unique_elements = [] for element in elements: if elements.count(element) == 1: unique_elements.append(element) return sum(unique_elements)"},{"question":"You are given a sequence of integers and you need to determine the maximum number of consecutive zeros in the sequence. The sequence is given as input in a single line, where each integer is separated by a space. Your task is to write a program that computes the longest streak of consecutive zeros. For example, in the sequence \\"1 0 0 1 0 0 0 1 0\\", the longest streak of consecutive zeros is 3. Input: A single line of integers separated by spaces. Output: A single integer representing the maximum number of consecutive zeros in the given sequence. Constraints: 1. The sequence can contain between 1 and 1000 integers. 2. Each integer will be either a 0 or a 1. SAMPLE INPUT 1 0 0 1 0 0 0 1 0 SAMPLE OUTPUT 3 Explanation: In the given sequence, there are three streaks of consecutive zeros: \\"0 0\\", \\"0 0 0\\", and the last \\"0\\". The longest streak contains three consecutive zeros, hence the output is 3.","solution":"def longest_consecutive_zeros(sequence): Returns the length of the longest streak of consecutive zeros in the sequence. :param sequence: A string of integers separated by spaces. :return: An integer representing the maximum number of consecutive zeros. numbers = sequence.split() max_count = 0 current_count = 0 for num in numbers: if num == \'0\': current_count += 1 else: if current_count > max_count: max_count = current_count current_count = 0 if current_count > max_count: max_count = current_count return max_count"},{"question":"You are given an array of n integers. Your task is to partition the array into two subsets such that the sum of elements in both subsets is equal. If it is not possible to partition the array in such a way, return \\"Impossible\\". Otherwise, return any one pair of valid subsets. Input The first line contains an integer n (1 ≤ n ≤ 20), the number of elements in the array. The second line contains n integers a0, a1, ..., an-1 (1 ≤ ai ≤ 100), the elements of the array. Output If it is possible to partition the array into two subsets with equal sum, output two lines containing the indices of the elements in the first and second subset respectively. If there are several solutions, you may output any of them. Indexing starts from 1. If it is not possible, output \\"Impossible\\". Example Input 4 1 5 11 5 Output 1 2 3 4 Input 3 1 2 5 Output Impossible","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"Impossible\\" target = total_sum // 2 n = len(nums) dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target + 1): if j >= nums[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] else: dp[i][j] = dp[i-1][j] if not dp[n][target]: return \\"Impossible\\" subset1 = [] subset2 = [] i, j = n, target while i > 0 and j > 0: if dp[i][j] and not dp[i-1][j]: subset1.append(i) j -= nums[i-1] i -= 1 subset2 = [k+1 for k in range(n) if (k+1) not in subset1] subset1.sort() subset2.sort() return subset1, subset2 # Read input def read_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) nums = list(map(int, data[1:])) return n, nums def main(): n, nums = read_input() result = can_partition(nums) if result == \\"Impossible\\": print(result) else: subset1, subset2 = result print(\\" \\".join(map(str, subset1))) print(\\" \\".join(map(str, subset2)))"},{"question":"Vasya\'s favorite hobby is collecting rare stamps. He keeps his collection in a special album which has k pages. Each page can hold m stamps. Initially, all the pages are empty. Each time Vasya acquires a new stamp, he puts it on the first page that has space for it, filling one page completely before moving on to the next. Recently, Vasya received a batch of n new stamps. Unfortunately, some of the new stamps are duplicates. Vasya only wants to keep one of each unique stamp in his album. Help Vasya optimize his collection by placing the stamps into his album in the order in which he received them. Ensure the page layout is completely filled up in the manner described above. Return the number of unique stamps and how they are placed in the album. Input The first line contains three integers k, m, and n (1 ≤ k, m ≤ 100, 1 ≤ n ≤ 10^4), denoting the number of pages in the album, the number of stamps each page can hold, and the number of new stamps, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), representing the sequence of stamps Vasya received. Output Print the number of unique stamps in the collection. Then print the album layout where each line represents a page in the album, and contains the stamps on that page, separated by spaces. If a page has fewer than m stamps, fill up the remaining places with 0s. Examples Input 3 4 10 5 3 5 8 1 3 2 4 4 7 Output 7 5 3 8 1 2 4 7 0 0 0 0 0 Input 2 5 8 10 20 10 30 40 50 60 30 Output 6 10 20 30 40 50 60 0 0 0 0 Note In the first example, there are 7 unique stamps (5, 3, 8, 1, 2, 4, 7). The first page is fully filled with 4 stamps. The second page holds the remaining 3 stamps and one 0 to fill the remaining space. In the second example, there are 6 unique stamps (10, 20, 30, 40, 50, 60). The first page is fully filled with 5 stamps, and the second page holds the remaining stamp and four 0s to fill the remaining space.","solution":"def organize_stamps(k, m, n, stamps_received): unique_stamps = list(dict.fromkeys(stamps_received)) num_unique_stamps = len(unique_stamps) album = [[0] * m for _ in range(k)] index = 0 for i in range(k): for j in range(m): if index < num_unique_stamps: album[i][j] = unique_stamps[index] index += 1 return num_unique_stamps, album # Example Usage # k = 3, m = 4, n = 10, stamps_received = [5, 3, 5, 8, 1, 3, 2, 4, 4, 7] k, m, n = 3, 4, 10 stamps_received = [5, 3, 5, 8, 1, 3, 2, 4, 4, 7] num_unique_stamps, album = organize_stamps(k, m, n, stamps_received) print(num_unique_stamps) for page in album: print(\' \'.join(map(str, page)))"},{"question":"Alice has recently started learning about prime numbers, and she is fascinated by them. To help her understand them better, you want to create a function that generates prime numbers. The goal is for the function to generate all prime numbers up to a given number `n`. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves. For example, the first few prime numbers are 2, 3, 5, 7, etc. Your task is to write a function that takes an integer `n` as input and returns a list of all prime numbers up to and including `n`. **Input:** The input consists of a single integer `n` (1 ≤ n ≤ 10^6). **Output:** Output a space-separated list of prime numbers up to and including `n`. **Examples:** **Input:** ``` 10 ``` **Output:** ``` 2 3 5 7 ``` **Input:** ``` 20 ``` **Output:** ``` 2 3 5 7 11 13 17 19 ``` **Explanation:** In the first example, the prime numbers up to 10 are 2, 3, 5, and 7. In the second example, the prime numbers up to 20 are 2, 3, 5, 7, 11, 13, 17, and 19.","solution":"def generate_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start * start, n + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime]"},{"question":"Alice is working on a data compression algorithm for her project. One of the steps in her algorithm involves finding substrings within a given string that are palindromes. A palindrome is a string that reads the same backward as forward. Alice\'s task is simplified if she can find all unique substrings of a given string that are palindromes and then return their count. For example, the string \\"ababa\\" has the following palindromic substrings: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Note that each unique palindromic substring is counted only once, regardless of how many times it appears within the string. Your task is to help Alice by writing a function that takes a string as input and returns the number of unique palindromic substrings. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) — the string itself. The string s contains only lowercase English letters. Output Output a single integer — the number of unique palindromic substrings in the string. Example Input ababa Output 5 Explanation The unique palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\".","solution":"def count_unique_palindromic_substrings(s): def is_palindrome(sub): return sub == sub[::-1] unique_pals = set() for start in range(len(s)): for end in range(start + 1, len(s) + 1): substring = s[start:end] if is_palindrome(substring): unique_pals.add(substring) return len(unique_pals) # Example usage: #print(count_unique_palindromic_substrings(\\"ababa\\")) # Output: 5"},{"question":"A string is considered a valid parentheses string (VPS) if it meets the following criteria: 1. It is the empty string \\"\\". 2. It can be written as AB (A concatenated with B), where A and B are VPS. 3. It can be written as (A), where A is a VPS. Given a string comprising only \'(\' and \')\', determine if it is a valid parentheses string (VPS). Constraints * The length of the string will not exceed 10,000. Input The input consists of a single string containing only \'(\' and \')\'. Output Output \\"YES\\" if the string is a valid parentheses string. Otherwise, output \\"NO\\". Example Input ()() Output YES Input (()) Output YES Input (()))( Output NO","solution":"def is_valid_parentheses(s: str) -> str: Determines if a string is a valid parentheses string (VPS). Parameters: s (str): A string consisting of \'(\' and \')\'. Returns: str: \\"YES\\" if the string is a valid parentheses string, otherwise \\"NO\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given a binary tree. The task is to find the minimum and maximum depth of the tree, where: - Minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. - Maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Input Format: - The first line contains t, the number of test cases. - For each test case, the input is separated over several lines: * The first line contains the value of the root node. * The second line contains integer n, the number of edges. * The next n lines each contain two space-separated integers u and v, which denote an edge between node u and node v in the tree. Output Format: For each test case, print two space-separated integers: the minimum and maximum depth of the corresponding binary tree. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 1000 1 ≤ value of nodes ≤ 10000 Note: - The tree is always rooted at the node with the value provided in the first line of each test case. - It can be guaranteed that the given structure is always a tree. SAMPLE INPUT 2 1 3 1 2 1 3 2 4 2 2 2 1 2 3 SAMPLE OUTPUT 2 3 2 2 Explanation For the first test case, the binary tree is: 1 / 2 3 / 4 Minimum depth: the path is 1 -> 3 (depth is 2). Maximum depth: the path is 1 -> 2 -> 4 (depth is 3). For the second test case, the binary tree is: 2 / 1 3 Both minimum and maximum depths are 2.","solution":"from collections import defaultdict, deque # Function to create the adjacency list for the tree def create_tree(edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree # Function to calculate the minimum depth using Breadth-First Search def find_min_depth(root, tree): visited = set() queue = deque([(root, 1)]) # (current_node, current_depth) while queue: node, depth = queue.popleft() if node not in visited: visited.add(node) children = [child for child in tree[node] if child not in visited] if not children: return depth for child in children: queue.append((child, depth + 1)) # Function to calculate the maximum depth using Depth-First Search def find_max_depth(root, tree): def dfs(node, depth): visited.add(node) max_depth = depth for child in tree[node]: if child not in visited: max_depth = max(max_depth, dfs(child, depth + 1)) return max_depth visited = set() return dfs(root, 1) def find_min_and_max_depth(t, test_cases): results = [] for i in range(t): root, edges = test_cases[i] tree = create_tree(edges) min_depth = find_min_depth(root, tree) max_depth = find_max_depth(root, tree) results.append(f\\"{min_depth} {max_depth}\\") return results"},{"question":"Alex is developing a new messaging application which requires efficient management of user chat groups. He wants to implement a feature where users can create and manage nested chat groups, and retrieve messages from a specific group and all its subgroups in a hierarchical manner. Each group has a unique ID and can contain multiple messages and nested subgroups. The groups can be managed through two main operations: - Add a message to a group. - Query messages from a group and all its descendant subgroups. Implement a system to handle these operations. The operations are defined as follows: 1. `1 groupID content`: Add a new message with the given content to the specified group. 2. `2 groupID`: Query all messages from the specified group and all its subgroups. Messages should be returned in the order they were added. # Input Format - The first line contains two integers, `g` and `n`, the number of groups and the number of operations respectively. - The next `g - 1` lines each contain two integers `parentGroupID childGroupID` representing a parent-child relationship between groups. - The next `n` lines each contain a query of either form `1 groupID content` or `2 groupID`. # Output Format For each query of form `2 groupID`, output the retrieved messages, each on a new line. Separate different query results with a blank line. # Constraints - 1 ≤ g ≤ 100,000 - The number of groups. - 1 ≤ n ≤ 200,000 - The number of queries. - The total length of all messages will not exceed 1,000,000 characters. - Each group and query will have a valid `groupID`. # Example Input ``` 5 7 1 2 1 3 2 4 2 5 1 1 Hello 1 2 Welcome 1 4 Nested 1 5 Messages 2 1 1 3 World 2 2 ``` Output ``` Hello Welcome Nested Messages Welcome Nested Messages ``` Explanation In the first query `\\"2 1\\"`, group 1 contains the message \\"Hello\\" and all its subgroups (2, 4, 5) contain messages \\"Welcome\\", \\"Nested\\", and \\"Messages\\" respectively. In the second query `\\"2 2\\"`, group 2 contains the message \\"Welcome\\" and all its subgroups (4, 5) contain messages \\"Nested\\" and \\"Messages\\" respectively.","solution":"from collections import defaultdict, deque class GroupChatSystem: def __init__(self, g): self.groups = defaultdict(list) self.subgroups = defaultdict(list) self.messages = defaultdict(list) def add_group(self, parentGroupID, childGroupID): self.subgroups[parentGroupID].append(childGroupID) def add_message(self, groupID, content): self.messages[groupID].append(content) def query_messages(self, groupID): result = [] queue = deque([groupID]) while queue: current = queue.popleft() result.extend(self.messages[current]) for sub in self.subgroups[current]: queue.append(sub) return result def main(): import sys input = sys.stdin.read data = input().splitlines() g, n = map(int, data[0].split()) system = GroupChatSystem(g) index = 1 for _ in range(g - 1): parentGroupID, childGroupID = map(int, data[index].split()) system.add_group(parentGroupID, childGroupID) index += 1 results = [] for i in range(index, index + n): query = data[i].split() op = int(query[0]) groupID = int(query[1]) if op == 1: content = \' \'.join(query[2:]) system.add_message(groupID, content) elif op == 2: messages = system.query_messages(groupID) results.append(\\"n\\".join(messages)) results.append(\\"\\") # blank line to separate queries print(\\"n\\".join(results).strip())"},{"question":"# Problem Statement In a magical land, a sequence of magical artifacts is monitored over time. Each artifact has a power level, which is a positive integer. One day, the wizard council decided to evaluate the artifacts to find a certain pattern: a sub-sequence where each subsequent artifact in the sub-sequence has a strictly greater power level than its predecessor. Given a list of integers representing the power levels of the artifacts in chronological order, write a program to find the length of the longest strictly increasing subsequence. Input - The first line contains an integer n (1 ≤ n ≤ 105) — the number of artifacts. - The second line contains n integers indicating the power levels of the artifacts (each integer is between 1 and 109 inclusive). Output - Print a single integer representing the length of the longest strictly increasing subsequence. Examples Input 6 2 5 3 7 11 8 Output 4 Input 5 7 7 7 7 7 Output 1 Input 10 10 9 2 5 3 7 101 18 Output 4 Note In the first example, the longest strictly increasing subsequence is [2, 3, 7, 11], with a length of 4. In the second example, all power levels are the same, so the longest strictly increasing subsequence length is 1. In the third example, the sequence [2, 3, 7, 101] is one of the possible longest strictly increasing subsequences, with a length of 4. Implement the program to find the required solution efficiently given the constraints.","solution":"def length_of_lis(nums): Finds the length of the longest strictly increasing subsequence in a list of integers. if not nums: return 0 from bisect import bisect_left lis = [] for num in nums: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"The Mysterious Island is a popular destination for treasure hunters. The island is divided into a grid of n rows and m columns, where each cell either contains land or water. A treasure is hidden on the island, and the hunters have a map of the island with the exact location of the treasure. The hunters start at the top-left corner of the grid (0, 0) and need to reach the location of the treasure. They can only move horizontally or vertically and cannot walk on water. Your task is to determine the minimum number of steps required for the hunters to reach the treasure from the starting point. If it\'s impossible to reach the treasure, you should return -1. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the island. The next n lines contain m characters each — describing the island. Each character is either \'L\' (land) or \'W\' (water). The last line contains two space-separated integers tx and ty (0 ≤ tx < n, 0 ≤ ty < m) — the row and column indices of the treasure. Output If it\'s possible for the hunters to reach the treasure, output the minimum number of steps required. Otherwise, output -1. Examples Input 4 5 LLLLL LWLWL LWLWL LLLLL 3 4 Output 7 Input 4 4 LLLL LLLL LLLL WWWW 3 3 Output -1 Input 1 1 L 0 0 Output 0 Note In the first example, the hunters can reach the treasure by following the path: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) in 7 steps. In the second example, the hunters cannot reach the treasure as there is a row of water blocking the way. In the third example, the treasure is already at the starting point, so no steps are required.","solution":"from collections import deque def min_steps_to_treasure(n, m, island, tx, ty): if island[0][0] == \'W\' or island[tx][ty] == \'W\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] visited[0][0] = True queue = deque([(0, 0, 0)]) # (row, col, steps) while queue: x, y, steps = queue.popleft() if x == tx and y == ty: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and island[nx][ny] == \'L\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"Maria loves chocolates. She has N rectangular chocolate bars. Each chocolate bar has a width W and a height H. Maria wants to wrap each chocolate bar using a piece of paper. The width and the height of the paper must be at least as large as the width and the height of the chocolate bar respectively. You have M pieces of wrapping paper, each piece having dimensions P and Q. Find the maximum number of chocolate bars Maria can wrap. Note that you cannot cut the paper or the chocolate bars, and each piece of wrapping paper can be used to wrap at most one chocolate bar. Input First line contains an integer T (number of test cases, around 20). T cases follow. Each test case starts with an integer N (number of chocolate bars, 1 <= N <= 1000). Next line contains N pairs of integers, W and H, which are the dimensions of the chocolate bars (1 <= W, H <= 100,000,000). Next line contains an integer M (number of pieces of wrapping paper, 1 <= M <= 1000). Each of the next M lines contains two integers P and Q (1 <= P, Q <= 100,000,000), separated by a space. Output For each test case, output the maximum number of chocolate bars Maria can wrap, in a new line. Example Input: 1 3 15 20 30 25 17 19 3 20 30 25 25 15 20 Output: 2 Explanation: Only 1 test case here, and a possible answer can be, using (15,20) wrapping paper to wrap chocolate bar of dimensions (15,20), and using (25,25) wrapping paper to wrap chocolate bar of dimensions (30,25). We cannot wrap more than 2 chocolate bars.","solution":"def max_chocolates_wrapped(test_cases): def can_wrap(chocolate, paper): W, H = chocolate P, Q = paper return (W <= P and H <= Q) or (W <= Q and H <= P) results = [] for case in test_cases: chocolates = case[\'chocolates\'] papers = case[\'papers\'] wrapped_count = 0 for paper in papers: for i, chocolate in enumerate(chocolates): if can_wrap(chocolate, paper): wrapped_count += 1 chocolates.pop(i) # remove the chocolate that has been wrapped break # move to the next paper after wrapping one chocolate with it results.append(wrapped_count) return results # Example input structure test_cases = [ { \'chocolates\': [(15, 20), (30, 25), (17, 19)], \'papers\': [(20, 30), (25, 25), (15, 20)] } ] print(max_chocolates_wrapped(test_cases)) # Example usage"},{"question":"In a town, there are n people. Each person holds a certain amount of gold coins. They can give these coins to others but can never receive coins from anyone. The goal is to determine the minimum number of people in the town who must give away all their coins such that everyone else has at least one person they can receive coins from. More formally, you need to identify a minimum subset of people with no coins such that every other person either belongs to this subset or can potentially receive coins from someone in this subset. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000), representing the number of people in the town. The second line contains n integers, where the i-th integer ai (0 ≤ ai ≤ 1,000) represents the number of gold coins person i holds. Output Print the size of the minimum subset of people who must give away all their coins. Examples Input 5 3 0 2 1 0 Output 2 Input 4 0 0 1 2 Output 1 Note In the first example, the people who must give away all their coins could be person 1 and person 4. In the second example, the person who must give away all their coins could be person 3.","solution":"def min_subset_to_give_away_all_coins(n, coins): Determines the minimum size of subset of people who must give away all their coins. Parameters: n (int): The number of people in the town. coins (list): List of integers where the i-th integer represents the number of coins person i holds. Returns: int: The minimum size of subset of people who must give away all their coins. # Count how many people have zero coins zero_coin_count = sum(1 for coin in coins if coin == 0) # If nobody has any coins, we don\'t need to make anyone give away coins if zero_coin_count == n: return 0 # The answer is the count of people having zero coins return zero_coin_count"},{"question":"You are a software engineer working on a data-processing pipeline. Your current task is to write a function that finds the majority element in a list of integers. The majority element is the element that appears more than half the time in the list. If no such element exists, the function should return -1. The list can contain up to 10,000 integers, each ranging from 0 to 100,000. To achieve this, you should implement the function `find_majority_element` that takes an integer list as input and returns the majority element or -1 if no such element exists. For efficiency considerations, the function should run in linear time, O(n), and use constant space, O(1). # Function Signature ```python def find_majority_element(arr: List[int]) -> int: ``` # Input - `arr` (List[int]): A list of integers where 1 ≤ len(arr) ≤ 10,000 and each integer is between 0 and 100,000. # Output - (int): The majority element or -1 if no majority element exists. # Example ```python assert find_majority_element([1, 2, 3, 2, 2, 2, 5, 2, 2]) == 2 assert find_majority_element([1, 1, 2, 2, 3, 3]) == -1 assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4 assert find_majority_element([6, 6, 6, 7, 7]) == 6 ``` # Notes - Think through edge cases such as lists with only one element or lists where there is no element that appears more than half of the time. - Make use of the Boyer-Moore Voting Algorithm or another suitable linear time algorithm to solve the problem efficiently.","solution":"from typing import List def find_majority_element(arr: List[int]) -> int: Finds the majority element in the list if it exists. The majority element is the element that appears more than half the time in the list. # Boyer-Moore Voting Algorithm candidate = None count = 0 # Phase 1: Find a candidate for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) # Phase 2: Verify if the candidate is actually a majority if arr.count(candidate) > len(arr) // 2: return candidate else: return -1"},{"question":"A famous online game requires players to identify the longest path in a graph consisting of several nodes connected by weighted edges. The game\'s developers are planning to add a new level where the graph forms a tree (a connected acyclic graph). To make it challenging, the path should only be identified as the longest path between any two leaf nodes. You, as a talented developer, are tasked with writing a program to solve this problem. # Input Format: - The first line contains an integer `n` (the number of nodes in the tree). - Each of the next `n-1` lines contains three integers `u`, `v`, and `w` indicating that there is an edge connecting node `u` to node `v` with weight `w`. # Output Format: - Output a single integer: the length of the longest path between any two leaf nodes. # Constraints: - `2 ≤ n ≤ 1000` - `1 ≤ u, v ≤ n` - `1 ≤ w ≤ 1000` # Sample Input: ``` 5 1 2 1 2 3 2 2 4 1 4 5 3 ``` # Sample Output: ``` 6 ``` # Explanation: The tree structure is as follows: ``` 1 | 2 / 3 4 5 ``` The leaves are nodes 1, 3, and 5. The longest path between any two leaves is from node 1 to node 5 with a total weight of 1 + 2 + 1 + 3 = 7. Hence the output is 7.","solution":"from collections import defaultdict, deque def longest_path_in_tree(n, edges): def bfs(start_node): visited = [False] * (n+1) distance = [-1] * (n+1) queue = deque([start_node]) visited[start_node] = True distance[start_node] = 0 farthest_node = start_node max_distance = 0 while queue: node = queue.popleft() for neighbor, weight in graph[node]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[node] + weight queue.append(neighbor) if distance[neighbor] > max_distance: max_distance = distance[neighbor] farthest_node = neighbor return farthest_node, max_distance # Construct the graph from edge list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Step 1: Perform BFS from an arbitrary node to find the farthest node arbitrary_start = 1 farthest_node, _ = bfs(arbitrary_start) # Step 2: Perform BFS from the farthest node found in Step 1 opposite_farthest_node, diameter = bfs(farthest_node) return diameter"},{"question":"You are given a list of strings. Your task is to combine these strings into a single sentence while ensuring that the words are in alphabetical order. Additionally, each word should be capitalized and separated by a single space. If the list is empty, return an empty string. Input The input contains a list of strings where each string is a word consisting only of lowercase alphabetical characters. Output Output a single string that represents the sentence formed by the words in alphabetical order, capitalized and separated by a single space. Constraints 0 ≤ number of words in the list ≤ 100 1 ≤ length of each word ≤ 20 Example Input 1: [\\"banana\\", \\"apple\\", \\"kiwi\\"] Output 1: \\"Apple Banana Kiwi\\" Input 2: [\\"dog\\", \\"cat\\"] Output 2: \\"Cat Dog\\" Input 3: [] Output 3: \\"\\"","solution":"def combine_and_sort_words(words): Combines the list of words into a single sentence, with words sorted alphabetically, capitalized, and separated by a single space. If the list is empty, returns an empty string. :param words: List of words consisting only of lowercase alphabetical characters. :return: A single string representing the sentence. if not words: return \\"\\" sorted_words = sorted(words) capitalized_words = [word.capitalize() for word in sorted_words] return \\" \\".join(capitalized_words)"},{"question":"You are given a list of integers. Your task is to sort this list in such a way that all the even numbers come before all the odd numbers, and the relative order among the even and the odd numbers is preserved. Constraints * 1 ≤ the number of integers in the list ≤ 100 * -1000 ≤ each integer ≤ 1000 Input Input is given from Standard Input in the following format: n a1 a2 a3 ... an where n is the number of integers in the list, and a1, a2, a3, ..., an are the integers. Output Output the sorted list in the required format. The numbers should be printed in a single line, separated by spaces. Examples Input 6 3 1 2 4 5 6 Output 2 4 6 3 1 5 Input 4 4 2 3 1 Output 4 2 3 1","solution":"def sort_even_before_odd(numbers): Sort the list such that all even numbers come before all odd numbers, preserving their relative order. evens = [x for x in numbers if x % 2 == 0] odds = [x for x in numbers if x % 2 != 0] return evens + odds def main(): input_data = input() n = int(input_data.split()[0]) numbers = list(map(int, input_data.split()[1:])) sorted_numbers = sort_even_before_odd(numbers) print(\' \'.join(map(str, sorted_numbers)))"},{"question":"Alice is working on a series of assignments for her computer science class. One of her assignments requires her to process a list of integers and determine the largest contiguous subarray that contains an equal number of even and odd integers. She is provided with a list of integers and needs to find the length of the largest contiguous subarray that meets this criterion. Given an array arr[] of length N, where arr[k] represents the k-th integer in the list, write a function to determine the length of the longest contiguous subarray with an equal number of even and odd integers. Input Format: The first line of input contains an integer N, which represents the number of integers in the array. The second line contains N space-separated integers which represents the elements of the array arr[]. Output Format: Print the length of the longest contiguous subarray that contains an equal number of even and odd integers. If there is no such subarray, print 0. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ arr[k] ≤ 10^9, where 0 ≤ k < N SAMPLE INPUT 10 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT 10 Explanation: The entire array has 5 even and 5 odd integers, so the largest contiguous subarray with equal number of even and odd integers is the entire array itself. SAMPLE INPUT 6 2 4 6 1 3 5 SAMPLE OUTPUT 6 Explanation: The entire array forms the largest contiguous subarray with 3 even and 3 odd integers. SAMPLE INPUT 5 1 1 1 1 1 SAMPLE OUTPUT 0 Explanation: There are no even integers in the array, so there is no subarray with an equal number of even and odd integers. Hence the output is 0.","solution":"def longest_subarray_equal_even_odd(arr): # Dictionary to store the first occurrence of delta index_map = {0: -1} max_len = 0 delta = 0 for i in range(len(arr)): if arr[i] % 2 == 0: delta += 1 else: delta -= 1 if delta in index_map: max_len = max(max_len, i - index_map[delta]) else: index_map[delta] = i return max_len"},{"question":"Problem Consider a warehouse where different types of packages are stored. The packages have expiry dates and weights. The warehouse manager needs to determine which package is the best to use next based on specific criteria: expiry date and weight. The sooner the expiry date, the higher the priority. If two packages have the same expiry date, the lighter one has higher priority. Given details of two packages, determine which package should be used next or if they are considered equally preferable. Constraints The input satisfies the following conditions. * 1 leq E_1, E_2 leq 10000 * 1 leq W_1, W_2 leq 1000 * All inputs are integers. Input The input is given in the following format: E_1 W_1 E_2 W_2 Each element is given separated by blanks. E_1 and E_2 represent the expiry dates of the first and second package respectively (lower value means sooner expiry date), and W_1 and W_2 represent the weights of the first and second package respectively. Output Print \\"Package 1\\" if the first package is preferable, \\"Package 2\\" if the second package is preferable, and \\"Same\\" if both are equally preferable on the 1 line. Examples Input 2024 10 2025 5 Output Package 1 Input 2023 15 2023 10 Output Package 2 Input 2022 10 2022 10 Output Same","solution":"def choose_package(E1, W1, E2, W2): Determines which package should be used next based on expiry date and weight. Args: E1 (int): Expiry date of the first package. W1 (int): Weight of the first package. E2 (int): Expiry date of the second package. W2 (int): Weight of the second package. Returns: str: \\"Package 1\\" if the first package is preferable, \\"Package 2\\" if the second package is preferable, \\"Same\\" if both are equally preferable. if E1 < E2: return \\"Package 1\\" elif E1 > E2: return \\"Package 2\\" else: if W1 < W2: return \\"Package 1\\" elif W1 > W2: return \\"Package 2\\" else: return \\"Same\\""},{"question":"Write a program which evaluates the health condition of patients based on their body temperature readings over a week. Each patient records their body temperature (in degrees Celsius) three times a day (morning, afternoon, and evening) for seven days. The health condition is evaluated based on the following criteria: * A patient is considered to have a \\"Fever\\" if the average temperature for any given day is greater than or equal to 38 degrees Celsius. * A patient is considered \\"Normal\\" if none of the daily average temperatures are greater than or equal to 38 degrees Celsius. Input The input consists of multiple datasets. Each dataset contains 21 float values representing the body temperature readings over a week (in following order: morning, afternoon, evening repeated for seven days). Each new patient’s data is given on a new line. The input ends with a single line containing the word \\"END\\". Your program should not process this terminal symbol. The number of datasets (the number of patients) does not exceed 50. Output For each dataset, print the health condition (\\"Fever\\" or \\"Normal\\") in a line. Example Input 36.5 37.2 37.8 36.9 37.4 37.6 37.0 37.1 37.8 37.3 37.5 38.0 36.8 37.2 37.6 37.1 37.4 37.5 36.9 37.3 37.7 36.7 38.5 39.2 39.8 38.9 39.4 38.6 39.0 38.1 39.8 38.3 38.5 39.0 38.8 39.2 38.6 38.1 39.4 38.5 37.9 38.3 38.7 END Output Normal Fever","solution":"def evaluate_health_condition(patients_data): Evaluates the health condition based on body temperature readings over a week. Parameters: patients_data (list of list of float): A list where each element is another list containing 21 float values representing temperature readings for a patient. Returns: list of str: A list where each element is a string (\\"Fever\\" or \\"Normal\\") indicating the health condition of the corresponding patient. result = [] for data in patients_data: has_fever = False for i in range(0, 21, 3): avg_temp = sum(data[i:i+3]) / 3 if avg_temp >= 38.0: has_fever = True break result.append(\\"Fever\\" if has_fever else \\"Normal\\") return result"},{"question":"Input The input contains a single string s (1 ≤ |s| ≤ 1000). Output Output the length of the longest substring of s that contains only unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring of s that contains only unique characters. n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index_map = {} for end in range(n): char = s[end] if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a set of non-negative integers, you need to determine the minimum number of steps required to reduce each number to zero. In each step, you can subtract any non-zero power of 2 from any of the numbers. A non-zero power of 2 is any number of the form (2^k) where (k) is a non-negative integer. For example, to reduce the number 9 to zero, you could take the following steps: - Subtract (2^3 = 8) from 9 to get 1. - Subtract (2^0 = 1) from 1 to get 0. Thus, reducing 9 to zero takes a minimum of 2 steps. Write a program that reads a sequence of non-negative integers and outputs the minimum number of steps required to reduce each number to zero. **Input:** The input consists of lines containing non-negative integers. The input ends with a line containing a single negative integer. You may assume that all non-negative integers are less than (10^6). **Output:** The output should consist of lines each containing a single integer corresponding to the minimum number of steps required to reduce that input number to zero. **Example:** **Input:** ``` 9 15 7 4 0 -1 ``` **Output:** ``` 2 4 3 1 0 ``` Explanation: - For 9: (9 - 8 = 1), (1 - 1 = 0) (2 steps) - For 15: (15 - 8 = 7), (7 - 4 = 3), (3 - 2 = 1), (1 - 1 = 0) (4 steps) - For 7: (7 - 4 = 3), (3 - 2 = 1), (1 - 1 = 0) (3 steps) - For 4: (4 - 4 = 0) (1 step) - For 0: No steps needed (0 steps)","solution":"def min_steps_to_zero(numbers): Given a list of non-negative integers, returns the minimum number of steps required to reduce each number to zero, where in each step you can subtract any non-zero power of 2. results = [] for num in numbers: steps = 0 while num > 0: highest_power = 1 << (num.bit_length() - 1) num -= highest_power steps += 1 results.append(steps) return results"},{"question":"Andrei loves reading books. He has a collection of n books placed on a single shelf in his room. Each book has a unique ISBN number, and the size of the book is represented by its height hi. Andrei wants to arrange the books in a specific order—either all in non-decreasing or all in non-increasing order of their heights. Help Andrei by writing a program that will output the minimum number of swaps required to arrange the books in the desired order. Note that in every swap, Andrei can only swap two books\' positions on the shelf. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of books. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the initial heights of the books on the shelf. Output: - One integer — the minimum number of swaps required to arrange the books in non-decreasing order or non-increasing order of their heights. Example: Input: 5 4 3 5 1 2 Output: 3 Explanation: To arrange in non-decreasing order: [1, 2, 3, 4, 5] Possible swaps: - Swap 4 with 1: [1, 3, 5, 4, 2] - Swap 3 with 2: [1, 2, 5, 4, 3] - Swap 5 with 3: [1, 2, 3, 4, 5] Thus, three swaps are needed to sort in non-decreasing order. Alternatively, we could also check sorting in non-increasing order and return the minimum swaps required among both sorting orders.","solution":"def min_swaps_to_sort_books(n, heights): def count_swaps(arr): arr = [(val, idx) for idx, val in enumerate(arr)] arr.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr[i][1] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr[x][1] cycle_size += 1 if cycle_size > 1: swaps += (cycle_size - 1) return swaps sorted_heights_asc = sorted(heights) sorted_heights_desc = sorted(heights, reverse=True) swaps_to_ascend = count_swaps(heights[:]) swaps_to_descend = count_swaps(heights[::-1]) return min(swaps_to_ascend, swaps_to_descend)"},{"question":"Polycarp loves to collect coins, and he has n coins at his disposal. Each coin has a specific weight and value. Polycarp is planning to select some coins to carry in his bag. However, his bag can only hold a maximum weight w. Polycarp wants to maximize the total value of the coins he carries without exceeding the weight capacity of his bag. Polycarp needs your help to determine the maximum value he can carry in his bag. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of coins Polycarp has. The second line contains an integer w (1 ≤ w ≤ 1000) — the maximum weight that Polycarp\'s bag can carry. The next n lines contain two integers each, wi and vi (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 1000) — the weight and the value of the i-th coin. Output Print a single integer — the maximum value that Polycarp can carry in his bag. Example Input 5 10 4 50 3 40 5 100 2 30 1 20 Output 170 Explanation Polycarp can carry three coins: the ones with weights 4, 3, and 2 which give him the maximum value of 50 + 40 + 30 = 120 without exceeding the weight limit of 10.","solution":"def knapsack(n, w, items): Determines the maximum value that can be carried in a bag with weight limit w. n: Number of coins w: Maximum weight capacity of the bag items: List of tuples where each tuple contains (weight, value) of the coins Returns the maximum value that can be carried. dp = [[0] * (w + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i-1] for j in range(w + 1): if j >= weight: dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight] + value) else: dp[i][j] = dp[i-1][j] return dp[n][w] # Example Usage if __name__ == \\"__main__\\": n = 5 w = 10 items = [(4, 50), (3, 40), (5, 100), (2, 30), (1, 20)] print(knapsack(n, w, items)) # Output: 170"},{"question":"You are given a special type of string manipulation operation called \\"shift-replace\\". The \\"shift-replace\\" operation on a string works as follows: 1. Select any two indices i and j such that 0 ≤ i < j < n (where n is the length of the string). 2. Replace the character at index i with the character at index j. Given a string s of length n, determine the minimum number of \\"shift-replace\\" operations required to make the string a palindrome. If it is impossible to form a palindrome using these operations, return -1. A string is called a palindrome if it reads the same forwards and backwards. # Input - A single string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. # Output - Output a single integer representing the minimum number of operations required to make the string a palindrome, or -1 if it is not possible. # Example Input ``` ababc ``` Output ``` 1 ``` Input ``` ab ``` Output ``` -1 ``` Explanation For the first example, you can pick indices (0, 2) to replace \'a\' at index 0 with \'b\' at index 2, resulting in the string \\"bbbab\\" which is a palindrome. Thus, only 1 operation is needed. For the second example, since there are only two different characters, it is impossible to form a palindrome, thus the output is -1.","solution":"def min_shift_replace_operations(s): Determine the minimum number of \\"shift-replace\\" operations required to make the string a palindrome. Return -1 if it is impossible. Args: s (str): The input string. Returns: int: Minimum number of operations or -1 if impossible. n = len(s) if n == 1: return 0 def is_palindrome_possible(s): # A string can be rearranged to form a palindrome if at most one character has an odd count. from collections import Counter counts = Counter(s) odd_counts = sum(1 for count in counts.values() if count % 2 != 0) return odd_counts <= 1 if not is_palindrome_possible(s): return -1 l = 0 r = n - 1 operations = 0 s = list(s) # Convert string to list for mutability while l < r: if s[l] != s[r]: if l < r - 1 and s[l] == s[r - 1]: # Replace r-1 with r s[r] = s[r - 1] operations += 1 r -= 1 elif l + 1 < r and s[l + 1] == s[r]: # Replace l+1 with l s[l] = s[l + 1] operations += 1 l += 1 else: # Replace l with r s[l] = s[r] operations += 1 l += 1 r -= 1 return operations"},{"question":"Write a function `compressString` that takes a string as input and performs run-length encoding. Run-length encoding is a simple form of data compression where consecutive elements of the data are stored as a single data value and count. For example, the string \\"aaabbccdded\\" will be compressed to \\"a3b2c2d2e1d1\\". Your task is to implement the `compressString` function. # Input: - A single string, `s` (1 ≤ length of s ≤ 1000), containing only lowercase English letters. # Output: - A single string, which is the run-length encoded version of the input string. # Example: Example 1: Input: ``` aabcccccaaa ``` Output: ``` a2b1c5a3 ``` Example 2: Input: ``` abcd ``` Output: ``` a1b1c1d1 ``` # Constraints: - You may assume that the string always has at least one character. - You must handle all edge cases, such as a string with all identical characters or a string with no repeated characters. # Notes: - Be mindful of efficiency in your implementation. - The output string should be as short as possible while accurately representing the run-length encoding.","solution":"def compressString(s): Performs run-length encoding on the given string. Args: s: A string containing only lowercase English letters. Returns: A string which is the run-length encoded version of the input string. if not s: return \\"\\" compressed = [] count = 1 current_char = s[0] for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") return \'\'.join(compressed)"},{"question":"A: String Segmentation with Dictionary Words problem Given a string `s` and a dictionary of words `dict` containing valid English words, write a program that determines how many different ways the string `s` can be segmented into a sequence of one or more dictionary words. Input format - The first line contains the string `s`. - The second line contains the number of words `n` in the dictionary. - The next `n` lines each contain a word (`dict` contains exactly these `n` words). Constraint - 1 leq |s| leq 100 - 1 leq n leq 50 - Each word in `dict` consists of lowercase alphabetic characters only. Output format Output a single integer which is the number of different ways to segment string `s` using the dictionary words. Input example 1 applepie 5 apple pie app le piecake Output example 1 2 Explanation: There are two ways to segment the string \'applepie\' -> \\"apple pie\\" and \\"app le pie\\". Input example 2 catsanddog 7 cat cats and sand dog catsand dogsand Output example 2 3 Explanation: There are three ways to segment the string \'catsanddog\' -> \\"cat sand dog\\", \\"cats and dog\\", and \\"catsand dog\\". Example Input applepie 5 apple pie app le piecake Output 2","solution":"def count_segmentations(s, word_dict): Returns the number of different ways the string `s` can be segmented into a sequence of one or more dictionary words. n = len(s) dp = [0] * (n + 1) dp[0] = 1 # There is one way to segment an empty string for i in range(1, n + 1): for word in word_dict: if i >= len(word) and s[i - len(word):i] == word: dp[i] += dp[i - len(word)] return dp[n] def main(): s = input().strip() n = int(input().strip()) word_dict = set(input().strip() for _ in range(n)) print(count_segmentations(s, word_dict))"},{"question":"You are given a list of integers. You can perform the following operation exactly once: choose two different indices i and j such that 1 ≤ i, j ≤ n, and swap the elements at those indices. Your task is to determine the minimum possible difference between the maximum and minimum elements in the list after applying the operation. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the list. The second line contains n integers — the elements of the list. Output Print a single integer — the minimum possible difference between the maximum and minimum elements in the list after exactly one swap operation. Example Input 5 1 3 5 7 9 Output 6","solution":"def min_difference_after_swap(n, arr): Determine the minimum possible difference between the maximum and minimum elements in the list after applying exactly one swap operation. Parameters: n (int): the number of elements in the list. arr (list of int): the elements of the list. Returns: int: the minimum possible difference after one swap. if n == 1: return 0 sorted_arr = sorted(arr) current_max = sorted_arr[-1] current_min = sorted_arr[0] # Check the possibility by exchanging elements close to the edges. # Swap something from the maximum edge to nearer minimum edge. if n >= 2: # minimal element increased by the second largest min_diff1 = sorted_arr[-2] - sorted_arr[0] else: min_diff1 = float(\'inf\') # Swap something from the minimum edge to nearer maximum edge. if n >= 2: # maximum element decreased by the second smallest min_diff2 = sorted_arr[-1] - sorted_arr[1] else: min_diff2 = float(\'inf\') return min(min_diff1, min_diff2)"},{"question":"**Sum of Digit Powers** Given a number N, determine if there exists an integer k such that the sum of the digits of N, each raised to the power of their position (1-based index) in N, equals k times N. Input A single integer N is given in a line. Output Print \\"YES\\" if such an integer k exists, otherwise print \\"NO\\". Constraints * 1 leq N leq 10^9 Sample Input 1 89 Sample Output 1 YES Sample Input 2 123 Sample Output 2 NO Sample Input 3 135 Sample Output 3 YES Sample Input 4 10 Sample Output 4 NO Explanation For Sample Input 1: 8^1 + 9^2 = 8 + 81 = 89 which is 1 times 89, hence the output is \\"YES\\". For Sample Input 2: 1^1 + 2^2 + 3^3 = 1 + 4 + 27 = 32 which is not a multiple of 123, hence the output is \\"NO\\".","solution":"def sum_of_digit_powers(N): Determines if there exists an integer k such that the sum of the digits of N, each raised to the power of their position (1-based index) in N, equals k times N. digits = list(map(int, str(N))) power_sum = sum(d ** (i + 1) for i, d in enumerate(digits)) if power_sum % N == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Bob and Alice are playing a game with a binary string of length n. They take turns performing operations on the string, starting with Bob. In one operation, the player can pick any substring \\"11\\" and replace it with a \\"0\\". The game ends when there are no more \\"11\\" substrings left. If the resulting string contains at least one \\"1\\", Bob wins; otherwise, Alice wins. Your task is to determine the winner of the game when both players play optimally. Input The first line contains an integer n (1 ≤ n ≤ 10^5), which represents the length of the binary string. The second line contains a binary string of length n. Output Print \\"Bob\\" if Bob wins the game; otherwise, print \\"Alice\\". Example Input 6 110011 Output Bob Explanation Initially, Bob can replace the first \\"11\\" with a \\"0\\", resulting in \\"00011\\". Now Alice replaces the middle \\"11\\" with a \\"0\\", resulting in \\"00001\\". Since there is at least one \\"1\\" remaining, Bob wins. Input 4 1001 Output Alice Explanation There is no \\"11\\" in the string initially, so no moves can be made, and Alice wins as there’s no \\"1\\" in the resulting string.","solution":"def determine_winner(n, binary_string): Determines the winner of the game when both Bob and Alice play optimally. Args: n (int): length of the binary string binary_string (str): a binary string of length n Returns: str: \\"Bob\\" if Bob wins, \\"Alice\\" otherwise if \\"11\\" in binary_string: return \\"Bob\\" return \\"Alice\\""},{"question":"You are given an array of integers of length n. Calculate the minimum value of the sum of absolute differences of pairs of elements when the array is divided into two non-empty subarrays. Formally, given an array a of length n, find two non-empty subarrays b and c such that: 1. b and c are contiguous subarrays of a. 2. Every element of a belongs to either b or c. 3. The sum of absolute differences of all pairs of elements (x from b, y from c) is minimized. You need to output this minimum value. Input The first line contains a single integer n (2 ≤ n ≤ 2*10^5) — the length of the array. The second line contains n integers a0, a1, ..., an-1 (1 ≤ ai ≤ 10^9). Output Print a single integer — the minimum sum of absolute differences between all pairs of elements chosen from b and c. Examples Input 5 1 3 6 4 2 Output 6 Input 4 3 1 4 1 Output 3 Note In the first example, you can divide the array into b = [1, 3] and c = [6, 4, 2]. The sum of absolute differences is |1-6| + |1-4| + |1-2| + |3-6| + |3-4| + |3-2| = 5 + 3 + 1 + 3 + 1 + 1 = 14. This is not the minimum. Rather, dividing into b = [1, 3, 6] and c = [4, 2] gives |1-4| + |1-2| + |3-4| + |3-2| + |6-4| + |6-2| = 3 + 1 + 1 + 1 + 2 + 4 = 12. However, the optimal division here would be b = [1, 3, 6] and c = [4, 2], which gives the minimum sum of 6. In the second example, the optimal division is b = [3, 1] and c = [4, 1] which gives the minimum sum of 3.","solution":"def min_sum_of_absolute_differences(n, arr): Returns the minimum sum of absolute differences when the array is divided into two non-empty subarrays. arr.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, abs(arr[i] - arr[i-1])) return min_diff # Example usage: # print(min_sum_of_absolute_differences(5, [1, 3, 6, 4, 2])) # Output: 1 # print(min_sum_of_absolute_differences(4, [3, 1, 4, 1])) # Output: 0"},{"question":"Given an array of N integers, we define its filtering feature as follows: for a given integer K, an array is filtered by removing K - 1 initial elements if and only if the K-th element exists in the remaining array. Your task is to determine the minimum K for which the sum of the filtered array is maximized. If there are multiple valid K values that yield the same maximum sum, choose the smallest K among them. Input The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array. The second line contains N space-separated integers representing the elements of the array (each integer is between -10^4 and 10^4). Output Print a single integer, the minimum K required to achieve the maximum sum of the filtered array. Example Input: 5 1 3 -2 5 4 Output: 4","solution":"def find_optimal_k(N, arr): This function returns the minimum K for which the sum of the filtered array is maximized. max_sum = -float(\'inf\') optimal_k = 1 current_sum = 0 for k in range(1, N+1): if k > 1: current_sum -= arr[k-2] current_sum += arr[k-1] if current_sum > max_sum: max_sum = current_sum optimal_k = k return optimal_k # Example usage: if __name__ == \\"__main__\\": N = int(input()) arr = list(map(int, input().split())) print(find_optimal_k(N, arr))"},{"question":"Given a list of integers, your task is to generate a new list where each element in the new list is the product of every integer in the original list except the integer at that position. For example, if the input list is [1, 2, 3, 4], the output list should be [24, 12, 8, 6]. This is because: - The first element of the output list is 2 * 3 * 4 = 24. - The second element is 1 * 3 * 4 = 12. - The third element is 1 * 2 * 4 = 8. - The fourth element is 1 * 2 * 3 = 6. Input A sequence of multiple datasets is given as input. Each dataset consists of a single line containing space-separated integers. The end of the input is indicated by a single line containing \\"end\\". Each dataset will contain between 2 and 100 integers. Each integer in the dataset will be between 1 and 1000. Output For each dataset, output the new list as space-separated integers on one line. Example Input 1 2 3 4 2 3 4 5 end Output 24 12 8 6 60 40 30 24","solution":"def product_except_self(nums): Given a list of integers, produces a new list where each element is the product of every integer in the original list except the integer at that position. length = len(nums) # Initialize the result list with 1s result = [1] * length # Calculate products of all elements to the left of each element left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each element right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result def process_input(input_lines): Processes multiple lines of space-separated integers, computes the product_except_self for each line, and returns the results in a list of lists. results = [] for line in input_lines: if line.strip() == \\"end\\": break numbers = list(map(int, line.strip().split())) result = product_except_self(numbers) results.append(result) return results"},{"question":"You are given a sequence of operations on an initially empty stack. A stack is a data structure that supports the following operations: - **PUSH x**: Push integer x onto the stack. - **POP**: Remove the top element from the stack. - **PEEK**: Retrieve the top element from the stack without removing it. Your task is to implement a data structure that supports these operations efficiently. Additionally, you need to handle a sequence of commands that query the current state of the stack. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of operations. Each of the following n lines contains one of the commands: PUSH x, POP, or PEEK. The commands are given in the order they should be executed. It is guaranteed that the POP and PEEK commands will not occur more times than there are elements in the stack at the time they are issued. Output For each PEEK command, print the top element of the stack. Examples Input 8 PUSH 10 PUSH 20 PEEK POP PEEK PUSH 30 POP PEEK Output 20 10 10 Input 5 PUSH 5 PUSH 15 POP PEEK POP Output 5","solution":"class Stack: def __init__(self): self.stack = [] def push(self, x): self.stack.append(x) def pop(self): if self.stack: return self.stack.pop() def peek(self): if self.stack: return self.stack[-1] def execute_stack_operations(operations): stack = Stack() results = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, x = operation.split() stack.push(int(x)) elif operation == \\"POP\\": stack.pop() elif operation == \\"PEEK\\": results.append(stack.peek()) return results"},{"question":"In a certain country, there are N cities connected by M bidirectional roads. Each road connects two cities and has a certain travel cost associated with it. The government has decided to improve the connectivity of the cities by turning them into a more connected network. They have decided to achieve this by ensuring there is exactly one unique path between any pair of cities, which essentially means they want to create a spanning tree of the cities. The cost of constructing this spanning tree is defined as the sum of the costs of the roads included in the spanning tree. Given the cities and the roads with their associated costs, your task is to compute the minimum cost required to construct the spanning tree. Constraints * 2 ≤ N ≤ 1000 * 1 ≤ M ≤ 10000 * 1 ≤ cost of each road ≤ 10000 Input The input is given from Standard Input in the following format: N M u_1 v_1 cost_1 u_2 v_2 cost_2 ... u_M v_M cost_M Each of the next M lines describes a road with three integers, u_i and v_i (1 ≤ u_i, v_i ≤ N), and cost (the travel cost of the road between u_i and v_i). Output Print the minimum cost required to construct the spanning tree. Examples Input 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 Output 6 Input 3 3 1 2 2 1 3 3 2 3 1 Output 3","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 mst_edges = 0 for edge in edges: if mst_edges == n - 1: break u, v, cost = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_cost += cost mst_edges += 1 union(parent, rank, root_u, root_v) return mst_cost def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 cost = int(data[index + 2]) edges.append((u, v, cost)) index += 3 result = minimum_spanning_tree(n, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice loves programming challenges. She recently encountered a new type of challenge where she needs to rearrange letters of a given string in such a way that no two adjacent letters are the same. If she succeeds, the resulting string should be returned; otherwise, the function should return an empty string (\\"\\"). Write a function that receives a string s and returns a new string as described above or an empty string if it is not possible to rearrange the letters. The function must be efficient and handle edge cases as well. Input - A single string s of length 1 ≤ |s| ≤ 10^5, consisting of lowercase English letters. Output - A rearranged string such that no two adjacent letters are the same or an empty string if such rearrangement is not possible. Examples Input \\"aaabbc\\" Output \\"ababac\\" Input \\"aaab\\" Output \\"\\"","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges a string s such that no two adjacent characters are the same. Returns the rearranged string or an empty string if not possible. if not s: return \\"\\" # Count the frequency of each character char_count = Counter(s) # Use a max heap to track the most frequent characters max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) previous_char = None previous_freq = 0 result = [] while max_heap or previous_freq < 0: if not max_heap: # If the heap is empty but we still have a character left to place, it\'s not possible return \\"\\" freq, char = heapq.heappop(max_heap) result.append(char) # Add the previous character back if it still has remaining frequency if previous_freq < 0: heapq.heappush(max_heap, (previous_freq, previous_char)) previous_freq = freq + 1 # decrease frequency previous_char = char return \\"\\".join(result)"},{"question":"A robotics company is building a delivery robot that operates on a grid-based map of their warehouse. The warehouse is represented as a 2D grid of size `n x m`, where `n` is the number of rows and `m` is the number of columns. Each cell in the grid represents either an empty space (denoted as 0) or an obstacle (denoted as 1). The robot can move up, down, left, or right from its current position but cannot move diagonally. The robot starts at the top-left corner of the grid (position `(0, 0)`) and needs to reach its destination at the bottom-right corner of the grid (position `(n-1, m-1)`). The robot\'s goal is to find the shortest path from the start to the destination. If it is possible to find such a path, return the length of the shortest path. If it is not possible, return -1. Input: - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 100`), the number of rows and columns of the grid. - The next `n` lines each contain `m` integers (either `0` or `1`), representing the grid. Output: - If there is a path from the top-left to the bottom-right corner, print the length of the shortest path. - Otherwise, print -1. Example: Input: 4 4 0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 Output: 7 Explanation: The grid represents the following map: <pre> 0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 </pre> The shortest path from the top-left to the bottom-right is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2), which is of length 7. If no path exists, print -1. For instance: Input: 3 3 0 1 0 1 0 1 1 0 0 Output: -1","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 1)]) # (row, column, path_length) visited = set((0, 0)) while queue: row, col, path_length = queue.popleft() if row == n-1 and col == m-1: return path_length for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, path_length + 1)) return -1"},{"question":"John is learning about linked lists in his programming class. A linked list is a linear data structure where elements are stored in nodes, and each node points to the next node. John learned how to append elements to the end of a linked list, but now he wants to try inserting elements into a sorted linked list while maintaining the sort order. Write a function that accepts a sorted linked list and an integer value, inserts the integer into the correct position in the list, and returns the head of the updated list. Input * First line contains an integer n (0 ≤ n ≤ 10^4) - the initial number of elements in the linked list. * Second line contains n space-separated integers representing elements of the linked list in sorted order. * Third line contains an integer x - the value to be inserted. Output * Print the elements of the updated linked list in sorted order. Function Signature: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_into_sorted_linked_list(head: ListNode, val: int) -> ListNode: # Your implementation here ``` Example Input ``` 5 1 2 4 5 6 3 ``` Output ``` 1 2 3 4 5 6 ``` In this example, the initial sorted linked list is 1 -> 2 -> 4 -> 5 -> 6, and after inserting 3, the list becomes 1 -> 2 -> 3 -> 4 -> 5 -> 6.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_into_sorted_linked_list(head: ListNode, val: int) -> ListNode: new_node = ListNode(val) # If the list is empty if head is None: return new_node # If the new node should be inserted at the beginning if val <= head.val: new_node.next = head return new_node current = head # Traverse the list to find the correct position to insert while current.next is not None and current.next.val < val: current = current.next new_node.next = current.next current.next = new_node return head # Helper function to create a linked list from a list def create_linked_list(arr): if not arr: return None head = ListNode(arr[0]) current = head for value in arr[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert linked list to list def linked_list_to_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result"},{"question":"Alice and Bob have a shared list where they keep record of activities they plan to do together during weekends. Each activity has a unique priority associated with it. They want to reorder the activities based on their priorities to complete them efficiently. Given a list of activities with their respective priorities, return the reordered list of activities in descending order of priorities. If two activities have the same priority, maintain their original order. Input: The first line contains an integer `n` (1 ≤ n ≤ 100), the number of activities. The next `n` lines each contain a string representing an activity and an integer representing its priority. Output: A list of activities reordered in descending order of priorities. Sample Input: 3 hiking 5 swimming 10 reading 5 Sample Output: swimming hiking reading SAMPLE INPUT 4 coding 3 running 8 gaming 5 biking 8 SAMPLE OUTPUT running biking gaming coding","solution":"def reorder_activities(n, activities): Reorders activities based on their priorities in descending order. If two activities have the same priority, maintain their original order. Args: n (int): Number of activities. activities (list of tuples): List of tuples where each tuple contains a string (activity) and an integer (priority). Returns: list: Reordered list of activities in descending order of priorities. # Sort activities based on priority in descending order while maintaining order of same priority sorted_activities = sorted(activities, key=lambda x: (-x[1], activities.index(x))) return [activity for activity, priority in sorted_activities] # Function to convert input format to required input arguments def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) activities = [] for line in lines[1:]: activity, priority = line.rsplit(maxsplit=1) activities.append((activity, int(priority))) return n, activities"},{"question":"A company needs to monitor the temperature of its servers to ensure they do not overheat. The servers generate a temperature reading every minute, and these readings are stored in an array. The company wants to know the maximum temperature recorded in any given contiguous subarray of length `m`. You need to write a program that, given the array of temperature readings and the integer `m`, finds the maximum temperature for every subarray of length `m` and returns these maximum values in the order of their appearance in the array. Input The first line contains two space-separated integers `n` and `m` (1 ≤ m ≤ n ≤ 10^5), where `n` is the number of temperature readings and `m` is the length of the subarray. The second line contains `n` space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10^5) — the temperature readings. Output Print the maximum temperature for every subarray of length `m` in the order they appear in the array. Examples Input 7 3 1 3 2 5 4 8 6 Output 3 5 5 8 8 Input 5 2 4 2 12 10 5 Output 4 12 12 10 Note In the first test case, the contiguous subarrays of length `m=3` and their corresponding maximum temperatures are: - [1, 3, 2] -> 3 - [3, 2, 5] -> 5 - [2, 5, 4] -> 5 - [5, 4, 8] -> 8 - [4, 8, 6] -> 8 So, the output is 3 5 5 8 8. In the second test case, the contiguous subarrays of length `m=2` and their corresponding maximum temperatures are: - [4, 2] -> 4 - [2, 12] -> 12 - [12, 10] -> 12 - [10, 5] -> 10 So, the output is 4 12 12 10.","solution":"def max_temperatures_in_subarrays(n, m, temperatures): Returns the maximum temperature for every contiguous subarray of length m. :param n: Total number of temperature readings :param m: Length of the subarray :param temperatures: List of temperature readings :return: List of maximum temperatures for each subarray of length m if m > n: return [] from collections import deque result = [] deque_indices = deque() for i in range(n): # Remove elements from the front of the deque that are outside the current window if deque_indices and deque_indices[0] <= i - m: deque_indices.popleft() # Remove elements from the back of the deque if they are smaller than the current element while deque_indices and temperatures[deque_indices[-1]] <= temperatures[i]: deque_indices.pop() deque_indices.append(i) # Start adding maximums to the result list after the first window of size m has been processed if i >= m - 1: result.append(temperatures[deque_indices[0]]) return result"},{"question":"You are tasked with developing a string manipulation utility that compresses repeated characters in a string. Specifically, you need to compress the string by transforming each set of consecutive repeated characters into the character followed by the count of its repetitions. If a character appears only once consecutively, it remains as is, appended by \'1\'. # Detailed Instructions 1. **Input**: A single string `s` with length `L` (1 ≤ L ≤ 1000). The string contains only lowercase English letters. 2. **Output**: A single compressed string where each set of consecutive repeated characters is represented by the character followed by the number of its repetitions. 3. **Constraints**: - The string will only contain lowercase English letters. - You must maintain the order of characters as they appear in the input string. # Example Input: ``` aaabbcaa ``` Output: ``` a3b2c1a2 ``` In this example, the input string `aaabbcaa` is compressed as follows: - \'a\' appears 3 times consecutively, which is represented as \'a3\'. - \'b\' appears 2 times consecutively, which is represented as \'b2\'. - \'c\' appears 1 time consecutively, which is represented as \'c1\'. - \'a\' appears 2 times consecutively at the end, which is represented as \'a2\'. Your program should compress any given string in the same manner. Implement a function that takes in the input string and returns the compressed string.","solution":"def compress_string(s): Compress the string by transforming each set of consecutive repeated characters into the character followed by the count of its repetitions. Parameters: s (str): The input string containing only lowercase English letters. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 length = len(s) for i in range(1, length): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 # Append the last character and its count compressed.append(f\\"{s[-1]}{count}\\") return \'\'.join(compressed)"},{"question":"You are given a set of stacks S_i (i = 0, 1, ..., n-1) to perform a series of operations. Each stack follows the LIFO (Last In First Out) principle. Implement the following operations for the stacks: * push(t, x): Push an integer x onto stack S_t. * top(t): Report the value at the top of stack S_t. If S_t is empty, do nothing. * pop(t): Remove the top element from stack S_t. If S_t is empty, do nothing. Initially, all stacks are empty. Constraints * 1 leq n leq 1,000 * 1 leq q leq 200,000 * -1,000,000,000 leq x leq 1,000,000,000 Input The input is given in the following format. ``` n q query_1 query_2 : query_q ``` Each query query_i is given by ``` 0 t x ``` or ``` 1 t ``` or ``` 2 t ``` where 0, 1, and 2 represent the push, top, and pop operations respectively. Output For each top operation, print the integer present at the top of the stack in a new line. Example Input: ``` 3 7 0 0 1 0 1 2 0 1 3 1 0 1 1 2 1 1 1 ``` Output: ``` 1 3 2 ```","solution":"def stack_operations(n, q, queries): stacks = [[] for _ in range(n)] result = [] for query in queries: operation = query.split() if operation[0] == \'0\': # push t = int(operation[1]) x = int(operation[2]) stacks[t].append(x) elif operation[0] == \'1\': # top t = int(operation[1]) if stacks[t]: result.append(stacks[t][-1]) elif operation[0] == \'2\': # pop t = int(operation[1]) if stacks[t]: stacks[t].pop() return result"},{"question":"The annual school sports day is around the corner, and Arjun, the sports coordinator, is responsible for organizing the event. He wants to ensure that the relay races are fair and exciting. Each race consists of teams, and each team has 4 members. The race distances are fixed to 100 meters for each team member. The total race time for each team is the sum of the best individual times of the 4 team members. Arjun wants to determine the fastest relay team for each query based on the members\' recorded times. Given the recorded times of the students and the team compositions, help Arjun find the fastest team for each query. Input Format: - The first line contains an integer m, representing the number of students. - The next line contains m integers, indicating the recorded times (in seconds) for each student. Each student\'s time is a positive integer. - The following line contains an integer t, representing the number of teams. - Each of the next t lines contains 4 integers, denoting the student IDs (1-indexed) for each team. - The next line contains an integer q, representing the number of queries. - Each of the next q lines contains a single integer denoting the team ID for which Arjun wants to determine the race time. Output Format: For each query, output the total race time of the team. Constraints: - 1 ≤ m ≤ 100 - 1 ≤ Time (in seconds) ≤ 100 - 1 ≤ t ≤ 50 - 1 ≤ q ≤ 100 - Each team consists of exactly 4 distinct members. SAMPLE INPUT 6 12 15 10 11 14 13 3 1 2 3 4 2 3 5 6 1 3 4 6 2 1 3 SAMPLE OUTPUT 48 50 Explanation Query 1: Team 1 consists of members with times 12, 15, 10, 11. The total race time is 12 + 15 + 10 + 11 = 48. Query 2: Team 3 consists of members with times 12, 10, 11, 13. The total race time is 12 + 10 + 11 + 13 = 46.","solution":"def find_fastest_teams(m, times, t, teams, q, queries): # Calculate total race time for each team team_times = [] for team in teams: total_time = sum(times[student_id - 1] for student_id in team) # 1-indexed to 0-indexed team_times.append(total_time) # Retrieve race time for each query results = [team_times[query - 1] for query in queries] # 1-indexed to 0-indexed return results"},{"question":"In a certain university, students are divided into groups based on their grades in a particular course. The grading system is such that each student receives an integer grade between 0 and 100, inclusive. You are tasked with writing a program that will help identify a special kind of group. A group is considered special if it contains at least one student and the difference between the highest grade and the lowest grade in the group is less than or equal to a given integer D. Your task is to determine the number of different special groups that can be formed from a list of N students. Two groups are considered different if there is at least one student present in one group and not in the other. # Input * The first line contains two integers N and D — the number of students and the maximum allowed difference, respectively. * The second line contains N integers — the grades of the students. # Output Output a single integer — the number of different special groups. # Constraints * 1 ≤ N ≤ 100 * 0 ≤ grade ≤ 100 * 0 ≤ D ≤ 100 # Example Input ``` 3 10 10 15 20 ``` Output ``` 7 ``` Explanation The possible special groups are: - {10} - {15} - {20} - {10, 15} - {10, 20} - {15, 20} - {10, 15, 20}","solution":"def special_groups_count(N, D, grades): count = 0 # Iterate over all possible 2^N-1 subsets (non-empty) for i in range(1, 1 << N): current_set = [] for j in range(N): if i & (1 << j): current_set.append(grades[j]) if max(current_set) - min(current_set) <= D: count += 1 return count # Example usage: # N, D = 3, 10 # grades = [10, 15, 20] # print(special_groups_count(N, D, grades)) # Output should be 7"},{"question":"Given an MxN grid of integers, you need to determine the maximum sum obtained by a contiguous subarray, which can be taken from any row, column, or diagonal. A contiguous subarray in this context means a continuous sequence of cells within a row, column, or diagonal. # Input The input is given in the following format: - The first line contains two integers M and N (1 ≤ M, N ≤ 1000) representing the number of rows and columns of the grid. - The next M lines each contains N integers representing the grid values. # Output Output a single integer, the maximum sum obtained from the contiguous subarrays of the grid. # Example **Input:** ``` 3 4 1 2 -1 4 -2 3 5 -1 3 2 1 0 ``` **Output:** ``` 11 ``` # Explanation The contiguous subarray yielding the maximum sum in the given example is the diagonal from the cell (1,1) to the cell (3,3) with the sum of 3 + 5 + 3 = 11.","solution":"def max_contiguous_subarray_sum(grid): def kadane(arr): max_so_far = float(\'-inf\') max_ending_here = 0 for x in arr: max_ending_here = max_ending_here + x if max_ending_here < x: max_ending_here = x if max_so_far < max_ending_here: max_so_far = max_ending_here return max_so_far M = len(grid) N = len(grid[0]) max_sum = float(\'-inf\') # Check maximum sum for every row for i in range(M): max_sum = max(max_sum, kadane(grid[i])) # Check maximum sum for every column for j in range(N): col = [grid[i][j] for i in range(M)] max_sum = max(max_sum, kadane(col)) # Check maximum sum for diagonals (bottom-left to top-right) for k in range(M): diag = [] i, j = k, 0 while i >= 0 and j < N: diag.append(grid[i][j]) i -= 1 j += 1 max_sum = max(max_sum, kadane(diag)) for k in range(1, N): diag = [] i, j = M-1, k while i >= 0 and j < N: diag.append(grid[i][j]) i -= 1 j += 1 max_sum = max(max_sum, kadane(diag)) # Check maximum sum for diagonals (top-left to bottom-right) for k in range(N): diag = [] i, j = 0, k while i < M and j < N: diag.append(grid[i][j]) i += 1 j += 1 max_sum = max(max_sum, kadane(diag)) for k in range(1, M): diag = [] i, j = k, 0 while i < M and j < N: diag.append(grid[i][j]) i += 1 j += 1 max_sum = max(max_sum, kadane(diag)) return max_sum # Example usage: # grid = [ # [1, 2, -1, 4], # [-2, 3, 5, -1], # [3, 2, 1, 0] # ] # print(max_contiguous_subarray_sum(grid)) # Output: 11"},{"question":"Given a string s of length n (1 ≤ n ≤ 100) and a dictionary of words, determine if the string can be segmented into a space-separated sequence of one or more dictionary words. You are also provided with `m` vocabulary words (1 ≤ m ≤ 100). Each of these words has a length between 1 and 100 (inclusive) and consists entirely of lowercase letters. Write a function `canSegmentString(s, dictionary)` to determine if the string can be segmented. **Function signature** ```python def canSegmentString(s: str, dictionary: List[str]) -> bool: ``` **Example** ```python # Example 1 s1 = \\"applepenapple\\" dictionary1 = [\\"apple\\", \\"pen\\"] print(canSegmentString(s1, dictionary1)) # Output: True (The string can be segmented as \\"apple pen apple\\") # Example 2 s2 = \\"catsandog\\" dictionary2 = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] print(canSegmentString(s2, dictionary2)) # Output: False (The string cannot be segmented into dictionary words) ``` **Input** The first line contains an integer n (1 ≤ n ≤ 100) – the length of the string s. The second line contains the string s. The third line contains an integer m (1 ≤ m ≤ 100) – the number of words in the dictionary. The next m lines each contain one dictionary word. **Output** Output \\"True\\" (without quotes) if the string can be segmented, otherwise output \\"False\\". **Explanation** In Example 1, \\"applepenapple\\" can be split into words from the dictionary: \\"apple pen apple\\". In Example 2, no segmentation makes all parts match dictionary words, so the result is False.","solution":"from typing import List def canSegmentString(s: str, dictionary: List[str]) -> bool: n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for word in dictionary: word_len = len(word) if i >= word_len and s[i - word_len:i] == word: dp[i] = dp[i] or dp[i - word_len] return dp[n]"},{"question":"Given an integer n, determine if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Constraints * 1 <= n <= 10^6 Input The input is given from Standard Input in the following format: n Output If n is a prime number, print `prime`. Otherwise, print `not prime`. Examples Input 5 Output prime Input 10 Output not prime Input 1 Output not prime","solution":"def is_prime(n): Determines if the given integer n is a prime number. Returns \'prime\' if n is a prime number, otherwise \'not prime\'. if n <= 1: return \'not prime\' if n <= 3: return \'prime\' if n % 2 == 0 or n % 3 == 0: return \'not prime\' i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return \'not prime\' i += 6 return \'prime\'"},{"question":"Implement a function `hotel_check_in` that calculates the number of rooms required at a hotel given a list of check-in and check-out times of guests. The hotel has an arbitrary number of rooms and each room can only be occupied by one guest at a time. Given the list of arrival and departure times of guests, the goal is to determine the minimum number of rooms needed to accommodate all guests. You can assume the arrival and departure times are given as integers representing the number of minutes past midnight for a particular day (0 <= time < 1440). # Input The input consists of: - An integer n (1 ≤ n ≤ 1000), the number of guests. - n lines each containing two space-separated integers ai and di (0 ≤ ai, di < 1440), the arrival time and departure time of the i-th guest. It is guaranteed that for each guest, the arrival time is strictly less than the departure time (ai < di). # Output Output a single integer, the minimum number of rooms required to accommodate all guests. # Examples Input ``` 3 0 30 15 45 40 50 ``` Output ``` 2 ``` Input ``` 2 100 200 150 300 ``` Output ``` 2 ``` Input ``` 4 300 400 350 450 320 330 360 370 ``` Output ``` 3 ``` # Note In the first example: - Guest 1 arrives at 0 and leaves at 30. - Guest 2 arrives at 15 and leaves at 45. - Guest 3 arrives at 40 and leaves at 50. At time 15, Guest 1 and Guest 2 overlap. At time 40, Guest 2 and Guest 3 overlap. So, the hotel needs at least 2 rooms to accommodate all guests.","solution":"def hotel_check_in(n, guests): Calculates the minimum number of rooms required to accommodate all guests. Parameters: n (int): Number of guests guests (list of tuples): Each tuple (ai, di) represents the arrival and departure times of a guest. Returns: int: The minimum number of rooms required. events = [] for arrival, departure in guests: events.append((arrival, \'arrival\')) events.append((departure, \'departure\')) # Sort events by time. If times are the same, \'departure\' comes before \'arrival\'. events.sort(key=lambda x: (x[0], x[1] == \'arrival\')) max_rooms = 0 current_rooms = 0 for event in events: if event[1] == \'arrival\': current_rooms += 1 max_rooms = max(max_rooms, current_rooms) else: current_rooms -= 1 return max_rooms"},{"question":"Construct a database schema for an e-commerce platform that satisfies the following conditions: * The platform has products, customers, and orders. * Each customer has a unique email address. * Each product has a unique SKU (Stock Keeping Unit). * An order can have multiple products, and a product can be in multiple orders. * Each order is associated with exactly one customer. * Each product has a name, description, and price. * Each customer has a name, email, and an address. * Each order has an order date and a total amount. Create the necessary SQL tables including primary keys, foreign keys, and appropriate data types. Constraints * Product name and customer name are strings with a maximum length of 255 characters. * Product description is a string with a maximum length of 1000 characters. * Email address is a string with a maximum length of 255 characters. * Price and total amount are decimal types with two decimal places. * Order date is a datetime type. Output Your output should be the complete SQL schema that creates the required tables and relationships. Example Output ```sql CREATE TABLE Products ( SKU VARCHAR(50) PRIMARY KEY, Name VARCHAR(255) NOT NULL, Description VARCHAR(1000), Price DECIMAL(10, 2) NOT NULL ); CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT PRIMARY KEY, Name VARCHAR(255) NOT NULL, Email VARCHAR(255) UNIQUE NOT NULL, Address VARCHAR(255) ); CREATE TABLE Orders ( OrderID INT AUTO_INCREMENT PRIMARY KEY, CustomerID INT, OrderDate DATETIME NOT NULL, TotalAmount DECIMAL(10, 2) NOT NULL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ); CREATE TABLE OrderDetails ( OrderDetailID INT AUTO_INCREMENT PRIMARY KEY, OrderID INT, SKU VARCHAR(50), Quantity INT NOT NULL, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (SKU) REFERENCES Products(SKU) ); ```","solution":"def generate_ecommerce_schema(): Returns the SQL schema for the e-commerce platform. return CREATE TABLE Products ( SKU VARCHAR(50) PRIMARY KEY, Name VARCHAR(255) NOT NULL, Description VARCHAR(1000), Price DECIMAL(10, 2) NOT NULL ); CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT PRIMARY KEY, Name VARCHAR(255) NOT NULL, Email VARCHAR(255) UNIQUE NOT NULL, Address VARCHAR(255) ); CREATE TABLE Orders ( OrderID INT AUTO_INCREMENT PRIMARY KEY, CustomerID INT, OrderDate DATETIME NOT NULL, TotalAmount DECIMAL(10, 2) NOT NULL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ); CREATE TABLE OrderDetails ( OrderDetailID INT AUTO_INCREMENT PRIMARY KEY, OrderID INT, SKU VARCHAR(50), Quantity INT NOT NULL, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (SKU) REFERENCES Products(SKU) ); schema_sql = generate_ecommerce_schema() print(schema_sql) # Just to visualize"},{"question":"You are given an array of integers representing the heights of buildings in a city. Your task is to determine the maximum number of buildings that have an unobstructed view of the sunset, given that the sun sets in the west direction (i.e., to the right). A building has an unobstructed view of the sunset if there are no taller buildings to its right. Write a function `max_buildings_with_view(buildings: List[int]) -> int` that takes as input a list `buildings` representing the heights of the buildings from left to right, and returns the maximum number of buildings that have an unobstructed view of the sunset. Input - The input is a list of integers `buildings` where `1 ≤ len(buildings) ≤ 10^6` and `1 ≤ buildings[i] ≤ 10^9`. Output - The output should be a single integer representing the maximum number of buildings with an unobstructed view of the sunset. Examples Input: [4, 2, 3, 1] Output: 3 Input: [4, 3, 2, 1] Output: 4 Input: [1, 2, 3, 4] Output: 1 Explanation: In the first example, the buildings with heights [4, 3, 1] have an unobstructed view of the sunset. In the second example, all buildings have an unobstructed view of the sunset since each building is taller than the buildings to its right. In the third example, only the last building with height 4 has an unobstructed view of the sunset.","solution":"from typing import List def max_buildings_with_view(buildings: List[int]) -> int: Returns the maximum number of buildings that have an unobstructed view of the sunset. Parameters: buildings (List[int]): List of integers representing the heights of the buildings. Returns: int: The maximum number of buildings with an unobstructed view of the sunset. max_height = 0 count = 0 # Traverse the buildings from right to left for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count"},{"question":"You are given a list of games along with their release dates, and you want to identify which month had the maximum game releases. The data is provided in a file in the following format: each line contains a game\'s name followed by its release date in the format \\"YYYY-MM-DD\\". Game names and release dates are separated by a single space. - Game name is a non-empty sequence of words consisting of English letters, digits, and spaces. Game names do not contain leading or trailing whitespace. - Release date is in the format \\"YYYY-MM-DD\\". The first line of the input specifies the number of games N (1 ≤ N ≤ 1000). Each of the following N lines contains a game name and a release date. Output the month and year with the maximum game releases in the format \\"YYYY-MM\\". If multiple months have the same number of maximum releases, output the earliest month (in terms of chronological order). Input: The input will be a series of lines as described above. Output: Output the year and month with the maximum game releases in the format \\"YYYY-MM\\". Example Input: 5 The Last of Us 2013-06-14 Cyberpunk 2077 2020-12-10 Halo Infinite 2021-11-15 The Witcher 3 2015-05-19 Death Stranding 2019-11-08 Output: 2021-11","solution":"def find_max_release_month(game_data): Given a list of games and their release dates, finds the year and month with the maximum game releases. Parameters: game_data (list of str): List of games with their release dates, first element contains number of games. Returns: str: The year and month with the maximum game releases in the format \\"YYYY-MM\\". from collections import defaultdict from datetime import datetime release_counts = defaultdict(int) for i in range(1, int(game_data[0]) + 1): *name, release_date = game_data[i].rsplit(maxsplit=1) year_month = release_date[:7] # \\"YYYY-MM\\" release_counts[year_month] += 1 max_releases = max(release_counts.values()) months_with_max_releases = sorted(k for k, v in release_counts.items() if v == max_releases) return months_with_max_releases[0]"},{"question":"Given a string s, you need to answer q queries. Each query consists of two integers l and r, and for each query, you should find the most frequent character in the substring defined by the range [l, r] (1-based indexing). If there are multiple characters with the same highest frequency, return the lexicographically smallest one. Input The first line of the input contains the string s (1 ≤ |s| ≤ 105) — the initial string. The second line contains an integer q (1 ≤ q ≤ 2·104) — the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|) — the parameters of the current query. Output For each query, print a single character — the most frequent character in the specified substring, or the lexicographically smallest one if there are multiple characters with the same highest frequency. Examples Input abacabadabacaba 3 1 4 5 11 1 15 Output a a a","solution":"def most_frequent_character(s, queries): For each query, find the most frequent character in the substring defined by the range [l, r] Arguments: s -- the initial string queries -- a list of tuples with each tuple containing two integers (l, r) Returns: A list of characters corresponding to the most frequent character in the substrings defined by queries from collections import Counter results = [] for l, r in queries: substring = s[l-1:r] count = Counter(substring) most_frequent = min(char for char in count if count[char] == max(count.values())) results.append(most_frequent) return results # For demonstration purposes, a simple helper function to read input and print output def main(): import sys input = sys.stdin.read data = input().split() s = data[0] q = int(data[1]) queries = [] index = 2 for _ in range(q): l, r = int(data[index]), int(data[index+1]) queries.append((l, r)) index += 2 results = most_frequent_character(s, queries) for result in results: print(result)"},{"question":"You are working with a dataset of logged events, each event representing an activity performed by a user in an application. Each event has a timestamp, a user ID and an event type. You need to process the logs and return a summary of user activities. Given an input list of events where each event is a dictionary with three keys: `\\"timestamp\\"` (a string in `YYYY-MM-DD HH:MM:SS` format), `\\"user_id\\"` (an integer), and `\\"event_type\\"` (a string), your task is to return a summary that includes: 1. **Total Number of Events**: The total count of all events. 2. **Unique Users**: The count of unique users who performed at least one event. 3. **Event Counts by Type**: A dictionary where the keys are the event types, and the values are the counts of each type of event. 4. **Earliest Event Timestamp**: The earliest timestamp of all the events. 5. **Latest Event Timestamp**: The latest timestamp of all the events. The order of events in the input list is not guaranteed. # Input - A list of dictionaries, where each dictionary contains: - `timestamp` (string): The timestamp of the event in `YYYY-MM-DD HH:MM:SS` format. - `user_id` (integer): The ID of the user who performed the event. - `event_type` (string): The type of event performed. # Output - A dictionary with the following keys and their corresponding values: - `total_events`: An integer representing the total number of events. - `unique_users`: An integer representing the number of unique users. - `event_counts`: A dictionary where the keys are the event types and the values are the counts of each event type. - `earliest_event`: A string representing the earliest event timestamp. - `latest_event`: A string representing the latest event timestamp. # Example ```python input_events = [ {\\"timestamp\\": \\"2022-09-15 13:45:30\\", \\"user_id\\": 1, \\"event_type\\": \\"login\\"}, {\\"timestamp\\": \\"2022-09-15 14:00:00\\", \\"user_id\\": 2, \\"event_type\\": \\"login\\"}, {\\"timestamp\\": \\"2022-09-15 14:30:00\\", \\"user_id\\": 1, \\"event_type\\": \\"logout\\"}, {\\"timestamp\\": \\"2022-09-15 15:00:00\\", \\"user_id\\": 3, \\"event_type\\": \\"login\\"}, {\\"timestamp\\": \\"2022-09-15 15:30:00\\", \\"user_id\\": 2, \\"event_type\\": \\"logout\\"} ] expected_output = { \\"total_events\\": 5, \\"unique_users\\": 3, \\"event_counts\\": { \\"login\\": 3, \\"logout\\": 2 }, \\"earliest_event\\": \\"2022-09-15 13:45:30\\", \\"latest_event\\": \\"2022-09-15 15:30:00\\" } ``` # Notes - You may assume that all timestamps are valid and in the correct format. - The input list can contain up to 10,000 events. Write a function `summarize_events(events: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[int, Dict[str, int], str]]` to solve the problem.","solution":"from typing import List, Dict, Union from collections import defaultdict def summarize_events(events: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[int, Dict[str, int], str]]: Given a list of event dictionaries, return a summary containing the total number of events, the count of unique users, the counts of event types, the earliest event timestamp, and the latest event timestamp. total_events = len(events) unique_users = set() event_counts = defaultdict(int) earliest_event, latest_event = None, None for event in events: user_id = event[\\"user_id\\"] event_type = event[\\"event_type\\"] timestamp = event[\\"timestamp\\"] unique_users.add(user_id) event_counts[event_type] += 1 if earliest_event is None or timestamp < earliest_event: earliest_event = timestamp if latest_event is None or timestamp > latest_event: latest_event = timestamp return { \\"total_events\\": total_events, \\"unique_users\\": len(unique_users), \\"event_counts\\": dict(event_counts), \\"earliest_event\\": earliest_event, \\"latest_event\\": latest_event }"},{"question":"Given an array of integers, you are required to find the minimum number of operations needed to make all the elements of the array equal. In one operation, you can: 1. Select any subsequence of the array (not necessarily contiguous). 2. Replace all selected elements with the value of their average (rounding down to the nearest integer). Determine the minimal number of operations needed to make all elements in the array equal. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, print a single integer — the minimum number of operations required to make all elements equal. Example Input 4 3 4 2 7 4 1 1 1 1 5 5 2 5 2 5 6 1 3 2 4 2 2 Output 2 0 2 2 Explanation - In the first test case, one possible way is: 1. Select the subsequence [4, 7] and replace both with their average value 5 → [5, 2, 5]. 2. Select the subsequence [2, 5] and replace both with their average value 3 → [3, 3, 3]. - In the second test case, all elements are already equal, so no operations are needed. - In the third test case, one possible way is: 1. Select the subsequence [5, 5, 5] and replace all with their average value 5 → [5, 2, 5, 2, 5]. 2. Select the subsequence [5, 2, 2] and replace all with their average value 3 → [3, 3, 3, 3, 3]. - In the fourth test case, one possible way is: 1. Select the subsequence [1, 3, 2] and replace all with their average value 2 → [2, 2, 2, 4, 2, 2]. 2. Select the subsequence [4, 2] and replace both with their average value 3 → [2, 3, 3, 3, 3, 3].","solution":"def min_operations_to_equal_elements(test_cases): results = [] for n, array in test_cases: unique_elements = set(array) if len(unique_elements) == 1: results.append(0) else: results.append(1) return results"},{"question":"Given a paragraph with words separated by spaces, and a list of words `B`, create a new paragraph where the words in list `B` are replaced by asterisks (`*`), with each word in `B` being substituted by a string of asterisks that has the same length as the word being replaced. Write a function `censor_paragraph(paragraph: str, B: List[str]) -> str` that takes in the paragraph and the list of words `B`, and returns the censored paragraph. # Function Signature ```python def censor_paragraph(paragraph: str, B: List[str]) -> str: ``` # Input - `paragraph`: a string representing the paragraph. - `B`: a list of words that need to be censored. # Output The function should return the censored paragraph, with words in list `B` replaced by asterisks. # Constraints - The paragraph consists of only English letters and spaces. - Words in `B` are guaranteed to be present in the paragraph. - The length of each word in `B` will be less than or equal to 100. - The length of the paragraph will be less than or equal to 1000. # Example Input ```python \\"hello world this is a test\\", [\\"world\\", \\"test\\"] ``` Output ```python \\"hello ***** this is a ****\\" ``` Explanation The words `world` and `test` in the paragraph are replaced by `*****` and `****`, respectively, matching their lengths with asterisks.","solution":"from typing import List def censor_paragraph(paragraph: str, B: List[str]) -> str: Returns the censored paragraph, with words in list `B` replaced by asterisk strings of the same length as the words being replaced. :param paragraph: str - The input paragraph. :param B: List[str] - The list of words to be censored. :return: str - The censored paragraph. words = paragraph.split() censored_words = {word: \'*\' * len(word) for word in B} for i, word in enumerate(words): if word in censored_words: words[i] = censored_words[word] return \' \'.join(words)"},{"question":"In a far-off universe, there exists a magical code that consists of a sequence of n integers. This code can either be unlocked or remain locked, and whether it unlocks or not depends on the differences between consecutive elements in the sequence. A code is considered unlocked if the differences between consecutive elements include at least one positive number and one negative number. You are tasked with creating a program that determines if a given code sequence is unlocked or locked. Your program should identify the sequence\'s status by examining the differences between consecutive elements in the sequence. Input The first line contains an integer n (2 ≤ n ≤ 1000), representing the number of integers in the code sequence. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the code sequence. Output Print \\"Unlocked\\" if the code sequence meets the unlocking criteria, and \\"Locked\\" otherwise. Examples Input 6 3 1 4 1 5 9 Output Unlocked Input 5 2 2 2 2 2 Output Locked Input 3 1 2 3 Output Locked","solution":"def determine_code_status(n, sequence): Determines if the code sequence is \'Unlocked\' or \'Locked\' based on the differences between consecutive elements. Args: n: int - the number of integers in the sequence. sequence: list of int - the code sequence. Returns: str - \'Unlocked\' if the sequence meets the criteria, \'Locked\' otherwise. has_positive_diff = False has_negative_diff = False for i in range(1, n): diff = sequence[i] - sequence[i-1] if diff > 0: has_positive_diff = True elif diff < 0: has_negative_diff = True # Early exit if both conditions are met if has_positive_diff and has_negative_diff: return \\"Unlocked\\" # If we exit the loop without meeting both conditions, it\'s Locked return \\"Locked\\""},{"question":"Johnny is trying to compile a report about the company\'s sales performance over the past month. The company\'s sales data is stored in a list of integers where each integer represents the amount of sales on a particular day. Johnny needs to find the longest subarray (contiguous elements) where the sales values are in strictly increasing order. Help Johnny by writing a function that takes the list of integers and returns the length of the longest strictly increasing subarray. Input - The input consists of a single line containing an integer n (1 ≤ n ≤ 10^5), the number of days for which sales data is available. - The next line contains n space-separated integers sales[i] (1 ≤ sales[i] ≤ 10^9) which indicates the sales amount on the i-th day. Output - Print a single integer — the length of the longest strictly increasing subarray. Examples Input 6 100 200 300 150 250 500 Output 3 Input 5 1 3 5 7 9 Output 5 Input 7 7 1 2 3 1 2 3 4 Output 4 Note In the first example, the longest strictly increasing subarray is [100, 200, 300], which has length 3. In the second example, the entire array is strictly increasing, so the length is 5. In the third example, the longest strictly increasing subarray is [1, 2, 3, 4], which has length 4.","solution":"def longest_increasing_subarray_length(sales): Returns the length of the longest strictly increasing subarray. Parameters: sales (list): A list of integers representing sales amounts for each day. Returns: int: The length of the longest strictly increasing subarray. if not sales: return 0 n = len(sales) max_length = 1 current_length = 1 for i in range(1, n): if sales[i] > sales[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Farmer John needs to build a new barn on his farm, but he has some constraints. The farm is represented as an n x m grid, with each cell either containing a rock or being empty. Farmer John wants to build the barn in such a way that it forms a rectangular area on the grid which is free of any rocks. Given the layout of the grid, determine the area of the largest possible rectangle that can be built without containing any rocks. If no such rectangle exists, the area should be considered as 0. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains a string of m characters: the j-th character of the i-th string is either \\".\\" or \\"#\\". A \\".\\" means that the corresponding cell is empty, while a \\"#\\" means that the cell contains a rock. Output Output a single integer, the area of the largest possible rectangle that can be built without containing any rocks. Examples Input 2 3 ..# .#. Output 2 Input 4 4 .... ..#. .... #... Output 6 Input 3 3 # # # Output 0 Explanation In the first example, the largest rectangle that can be constructed without rocks has an area of 2. In the second example, the largest rectangle has an area of 6. In the third example, there are no empty cells to build a rectangle, so the output is 0.","solution":"def maximalRectangleArea(grid): if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) heights = [0] * m max_area = 0 for row in grid: for j in range(m): heights[j] = heights[j] + 1 if row[j] == \'.\' else 0 max_area = max(max_area, largestRectangleInHistogram(heights)) return max_area def largestRectangleInHistogram(heights): stack = [] max_area = 0 heights.append(0) # Sentinel to pop all elements at the end for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() # Remove the sentinel return max_area"},{"question":"In a certain kingdom, there are n cities connected by m one-way roads. Each road has a certain length. The King\'s messengers need to deliver messages between certain pairs of cities quickly, taking the shortest possible route. You are given the starting and ending cities for these message deliveries. Your task is to calculate the minimum delivery time for each pair of cities, or determine if it is impossible to deliver a message between them. Input The first line contains three integers: n, m, and q (1 ≤ n ≤ 500, 1 ≤ m ≤ 10,000, 1 ≤ q ≤ 1,000) — the number of cities, the number of one-way roads, and the number of queries, respectively. The next m lines describe the roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10,000); u is the starting city, v is the ending city, and w is the length of the road. The following q lines describe the queries. Each line contains two integers x and y (1 ≤ x, y ≤ n) — the cities between which the delivery time should be calculated. Output For each query, print a single integer — the minimum delivery time between city x and city y. If there is no route connecting these cities, print -1. Examples Input 4 4 2 1 2 4 2 3 1 3 4 2 1 3 7 1 4 2 1 Output 7 -1 Note In the first query, the shortest route from city 1 to city 4 is 1 → 2 → 3 → 4, which has a total length of 4 + 1 + 2 = 7. In the second query, there is no route from city 2 to city 1, so the delivery is impossible.","solution":"import heapq def shortest_paths(n, m, roads, queries): # Initialize graph graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) # Function to compute shortest path using Dijkstra\'s algorithm def dijkstra(start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, w in graph[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heapq.heappush(pq, (dist[v], v)) return dist # Precompute shortest path from every city to every other city all_distances = [dijkstra(city) for city in range(n + 1)] # Resolve queries results = [] for x, y in queries: result = all_distances[x][y] if all_distances[x][y] != float(\'inf\') else -1 results.append(result) return results"},{"question":"A robot is placed in a grid with R rows and C columns. The robot can move up, down, left, or right, but it is restricted to move exactly K steps. The robot starts at position (start_row, start_col). Some cells in the grid are blocked, and the robot cannot move to these cells. The objective is to determine the number of free cells the robot can reach by making exactly K moves. Constraints * All values in input are integers. * 1 leq R, C leq 100 * 0 leq K leq 10 * 0 leq start_row < R * 0 leq start_col < C Input Input is given from Standard Input in the following format: R C start_row start_col K grid * R, C: the number of rows and columns in the grid. * start_row, start_col: the starting position of the robot. * K: the number of steps the robot must take. * grid: R lines where each line contains C characters, \'0\' for free cell and \'1\' for blocked cell. Output Print the number of free cells the robot can reach by making exactly K moves. Examples Input 3 3 1 1 2 000 010 000 Output 4 Input 4 4 0 0 1 0000 0000 0000 0000 Output 2 Input 5 5 2 2 3 00000 00100 00000 00100 00000 Output 8 Explanation In the first example, the robot can move to (0,1), (1,0), (1,2), and (2,1) in 2 moves. In the second example, the robot can move to (0,1) or (1,0) in 1 move. In the third example, the robot can move to eight different free cells in exactly 3 moves.","solution":"def reachable_cells(R, C, start_row, start_col, K, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = deque([(start_row, start_col, 0)]) visited.add((start_row, start_col)) reachable = set() while queue: r, c, steps = queue.popleft() if steps == K: reachable.add((r, c)) continue for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'0\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return len(reachable)"},{"question":"In a far-away kingdom, there is a unique game played by the citizens called \\"Magic Squares\\". In this game, there\'s a grid of size n x n composed of non-negative integers. The objective is to find the maximum sum obtainable from any sub-square of the grid. A sub-square is any contiguous sub-grid of the main grid, including the entire grid itself. Your task is to write a function that finds the sum of the maximum sub-square in the given grid. Input: The first line contains a single integer t, representing the number of test cases. For each test case, the first line contains an integer n, representing the dimension of the grid. The next n lines each contain n space-separated integers representing the values in the grid. Output: For each test case, the output should be a single integer representing the maximum sum obtainable from any sub-square of the grid. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100 0 ≤ grid[i][j] ≤ 1000 None of the input files exceed 4MB. SAMPLE INPUT 1 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 45 Explanation The entire grid is the sub-square with the maximum sum: 1 2 3 4 5 6 7 8 9 Sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45","solution":"def max_sub_square_sum(grid): Returns the sum of the maximum sub-square in the given grid. n = len(grid) # Create a prefix sum matrix prefix = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix[i][j] = grid[i - 1][j - 1] + prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] max_sum = float(\'-inf\') # Iterate over all possible sub-squares for i1 in range(1, n + 1): for j1 in range(1, n + 1): for i2 in range(i1, n + 1): for j2 in range(j1, n + 1): current_sum = prefix[i2][j2] - prefix[i1 - 1][j2] - prefix[i2][j1 - 1] + prefix[i1 - 1][j1 - 1] if current_sum > max_sum: max_sum = current_sum return max_sum def magic_squares(t, grids): Handles multiple test cases and returns the results for each test case. result = [] for grid in grids: result.append(max_sub_square_sum(grid)) return result"},{"question":"Problem Statement: Given a string, find the length of the longest substring without repeating characters. Input The first line contains an integer N, the number of test cases followed by N lines. Each line contains a string S. Output Output has N lines. Each line contains the length of the longest substring without repeating characters. Example Input 3 abcabcbb bbbbb pwwkew Output 3 1 3","solution":"def length_of_longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. max_len = 0 start = 0 seen = {} for end in range(len(s)): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): Process multiple test cases to find the length of the longest substrings without repeating characters. results = [] for s in test_cases: result = length_of_longest_substring_without_repeating_characters(s) results.append(result) return results"},{"question":"Problem Description A pattern of numbers is said to be lexicographically ordered when it is arranged in a dictionary-like order. For instance, \\"123\\" comes before \\"132\\", \\"213\\", and so on. Our objective is akin to this, but for a mathematical sequence. Given an integer n, generate and print all integer permutations of the sequence from 1 to n in lexicographical order. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single integer n denoting the range 1 to n. Output For each test case, output all permutations of the sequence from 1 to n in lexicographical order, each permutation in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 6 Example Input: 2 3 2 Output: 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 1 2 2 1 Explanation In the first test case, there are 6 permutations of the sequence from 1 to 3 printed in lexicographical order. In the second test case, there are 2 permutations of the sequence from 1 to 2 printed in lexicographical order.","solution":"import itertools def generate_lexicographical_permutations(n): Generates all permutations of numbers from 1 to n in lexicographical order. numbers = list(range(1, n + 1)) permutations = list(itertools.permutations(numbers)) permutations.sort() # Sort lexicographically return permutations def process_test_cases(T, test_cases): Process T test cases and return lexicographical permutations for each n in test_cases. results = [] for n in test_cases: results.append(generate_lexicographical_permutations(n)) return results"},{"question":"In the bustling city of Codeville, the city planner faces a unique challenge. The city consists of n intersections and m two-way roads connecting pairs of intersections. Each road has a certain length in kilometers. The city planner wants to find the shortest path from the central hospital, located at intersection 1, to every other intersection in the city. Your task is to help the city planner by writing a program that will compute the shortest path from the central hospital to all other intersections using Dijkstra\'s algorithm. Input The first input line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of intersections and the number of roads, respectively. Each of the next m lines describe a road with three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000) — representing a road between intersections u and v with length w kilometers. Output Print n−1 lines, where the i-th line contains a single integer: the length of the shortest path from the central hospital (intersection 1) to intersection i+1. If an intersection is unreachable, print -1 for that intersection. Examples Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 Output 2 3 7 6 Input 4 2 1 2 1 3 4 1 Output 1 -1 -1 Note In the first sample, the shortest paths from the central hospital (intersection 1) to each intersection are as follows: - To intersection 2: path 1 -> 2, distance 2. - To intersection 3: path 1 -> 2 -> 3, distance 3. - To intersection 4: path 1 -> 2 -> 4, distance 7. - To intersection 5: path 1 -> 3 -> 5, distance 6. In the second sample, intersections 3 and 4 are unreachable from intersection 1. Hence, their shortest paths are -1.","solution":"import heapq def dijkstra(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 pq = [(0, 1)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = [] for i in range(2, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Alice is playing a card game with her friends, and she wants to sort her deck of cards. Each card has a rank and a suit. The ranks are represented by numbers from 1 to 13, where 1 stands for Ace, 11 for Jack, 12 for Queen, and 13 for King. The suits are represented by the characters \'S\' (Spades), \'H\' (Hearts), \'D\' (Diamonds), and \'C\' (Clubs). The priority of suits in descending order is Spades, Hearts, Diamonds, and Clubs. Alice wants to sort her deck of cards firstly by rank in ascending order, and if two cards share the same rank, by suit in the aforementioned priority order. Write a function that takes a list of cards and returns a sorted list using the described criteria. Input The input consists of a single line containing a space-separated list of cards, where each card is represented as a string with its rank and suit. Each rank is a number between 1 and 13 and each suit is one of \'S\', \'H\', \'D\', \'C\'. Output The function should return a space-separated list of sorted cards. Example Input 5H 3C 13D 1S 12H 11C 1H 13S Output 1S 1H 3C 5H 11C 12H 13S 13D Note In the example, the initial list of cards is \\"5H 3C 13D 1S 12H 11C 1H 13S\\". After sorting by rank and suit, we get \\"1S 1H 3C 5H 11C 12H 13S 13D\\". Note that among the cards with rank 1, Spades comes before Hearts, and among the cards with rank 13, Spades comes before Diamonds.","solution":"def sort_cards(cards): Sorts a list of cards firstly by rank in ascending order, and if two cards share same rank, by suit priority (\'S\', \'H\', \'D\', \'C\'). Args: cards (list of str): list of cards where each card is represented as a string with rank and suit. Returns: list of str: sorted list of cards. # Priority order of suits suit_priority = {\'S\': 0, \'H\': 1, \'D\': 2, \'C\': 3} # Custom sorting key def card_key(card): rank, suit = int(card[:-1]), card[-1] return (rank, suit_priority[suit]) # Sorting the cards sorted_cards = sorted(cards.split(), key=card_key) # Returning the result as space-separated string return \' \'.join(sorted_cards)"},{"question":"You are tasked with implementing a spell-check function for a new text editor. A string is considered to contain a spelling error if it has three or more consecutive identical characters (e.g., \\"aaab\\", \\"boook\\", \\"caaaar\\"). Input The first and only line of input contains a single nonempty string s of length at most 1000 composed of lowercase letters (a-z). Output Output YES if the string s contains a spelling error and NO otherwise. Examples Input hellooo Output YES Input beautiful Output NO Note A string s contains a spelling error if it has three or more consecutive identical characters anywhere in the string.","solution":"def contains_spelling_error(s): Returns \'YES\' if the string s contains three or more consecutive identical characters, otherwise \'NO\'. n = len(s) for i in range(n - 2): if s[i] == s[i + 1] == s[i + 2]: return \'YES\' return \'NO\'"},{"question":"In a small town, there is an administrator who needs to organize meetings for the community groups. Each meeting has a start time and an end time, and no two meetings can overlap. The administrator wants to maximize the number of meetings that can be held in a given day. Your task is to write a program that determines the maximum number of non-overlapping meetings that can be scheduled in a single day. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of meetings. Each of the next n lines contains two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9), the start and end times of a meeting. Output Output a single integer, the maximum number of non-overlapping meetings that can be scheduled in a single day. Examples Input 4 1 3 2 4 3 5 6 8 Output 3 Input 3 3 8 2 6 5 7 Output 1","solution":"def max_non_overlapping_meetings(n, meetings): Determines the maximum number of non-overlapping meetings that can be scheduled in a single day. Parameters: n (int): Number of meetings meetings (list of tuples): A list where each tuple contains start and end time of a meeting (s_i, e_i) Returns: int: Maximum number of non-overlapping meetings # Sort meetings by their end time meetings.sort(key=lambda x: x[1]) max_meetings = 0 end_time = 0 for start, end in meetings: if start >= end_time: max_meetings += 1 end_time = end return max_meetings"},{"question":"You are tasked with developing a feature for an online bookstore that tracks the number of sales for each book. The bookstore uses a simple algorithm to determine the top-selling books for a given period. Your job is to implement this feature. Given a list of sales transactions, where each transaction records the sale of a specific book identified by its unique ISBN, write a function to determine the top N best-selling books. In case of a tie (multiple books with the same number of sales), the books should be sorted by their ISBN in ascending order. Input - An integer n (1 ≤ n ≤ 10^5), the number of sales transactions. - A list of n strings, where each string is an ISBN representing a sale. - An integer k (1 ≤ k ≤ min(10, number of unique ISBNs)), the number of top-selling books to return. Output - A list of the top k ISBNs, sorted by the number of sales in descending order. In the case of a tie, sort by ISBN in ascending order. Examples Input 10 [\\"978-1-60309-452-8\\", \\"978-1-60309-459-7\\", \\"978-1-60309-450-4\\", \\"978-1-60309-450-4\\", \\"978-1-60309-450-4\\", \\"978-1-60309-459-7\\", \\"978-1-60309-461-0\\", \\"978-1-60309-450-4\\", \\"978-1-60309-460-3\\", \\"978-1-60309-459-7\\"] 3 Output [\\"978-1-60309-450-4\\", \\"978-1-60309-459-7\\", \\"978-1-60309-452-8\\"] Input 5 [\\"978-1-60309-452-8\\", \\"978-1-60309-459-7\\", \\"978-1-60309-450-4\\", \\"978-1-60309-459-7\\", \\"978-1-60309-459-7\\"] 2 Output [\\"978-1-60309-459-7\\", \\"978-1-60309-450-4\\"] Note In the first example, the ISBN \\"978-1-60309-450-4\\" is the best-selling book with 4 sales, followed by \\"978-1-60309-459-7\\" with 3 sales, and \\"978-1-60309-452-8\\" with 1 sale. In the second example, the ISBN \\"978-1-60309-459-7\\" is the best-selling book with 3 sales, followed by \\"978-1-60309-450-4\\" with 1 sale.","solution":"from collections import Counter def top_selling_books(sales_transactions, k): Determine the top k best-selling books based on sales transactions. :param sales_transactions: List of ISBN strings representing sales transactions. :param k: Integer representing the number of top-selling books to return. :return: List of the top k ISBNs sorted by the number of sales in descending order. In the case of a tie, sort by ISBN in ascending order. # Count the sales for each ISBN sales_count = Counter(sales_transactions) # Sort by number of sales (descending) and by ISBN (ascending) in case of tie sorted_sales = sorted(sales_count.items(), key=lambda item: (-item[1], item[0])) # Extract the top k ISBNs top_k_books = [isbn for isbn, count in sorted_sales[:k]] return top_k_books"},{"question":"Chris is a robotics enthusiast who programs his robot to move around a grid. Chris\'s robot is initially located at the bottom-left corner of a grid, which is represented as (0, 0). The grid has obstacles in the form of certain cells that the robot cannot step on. The robot can only move up or right to navigate from the bottom-left to the top-right corner. Chris needs your help to find the number of unique paths his robot can take to get to the top-right corner without hitting any obstacles. Can you write a program to assist him? Input The input consists of multiple data sets. The first line contains the number of data sets. Each data set is described in the format below: n m grid - n is the number of rows in the grid (2 ≤ n ≤ 100). - m is the number of columns in the grid (2 ≤ m ≤ 100). - grid is an n x m matrix where each cell is either 0 or 1. A 0 indicates an empty cell which the robot can move to, and a 1 indicates an obstacle which the robot cannot move to. Output For each data set, print the number of unique paths from the bottom-left to the top-right corner, avoiding obstacles. If there is no possible path, print 0. Example Input 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 Output 2 1","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][m - 1] def solve(data): result = [] num_datasets = int(data[0]) index = 1 for _ in range(num_datasets): n = int(data[index]) m = int(data[index + 1]) grid = [] for i in range(n): grid.append(list(map(int, data[index + 2 + i].split()))) index += 2 + n result.append(unique_paths_with_obstacles(grid)) return result"},{"question":"You are given a positive integer number n. You need to determine the minimum number of digits that need to be replaced in this number so that the resulting number is divisible by 7. The number n consists of exactly m digits (1 ≤ m ≤ 105), and the digits are given in a single string without leading zeroes. For example, the number 1709 or 239 could be such numbers. The leading zeroes are not allowed in the resulting number obtained by replacing the digits. You can replace any digit with any other digit from 0 to 9, but you must replace at least one digit. Write a program to determine the minimum number of digits that need to be replaced to make the number divisible by 7. Input The input consists of a single line containing the integer number n (1 ≤ n < 10100000). Output Print one integer — the minimum number of digits that need to be replaced to make the number divisible by 7. If it\'s impossible to achieve such a number, print -1. Examples Input 10 Output 1 Input 777 Output 0 Input 123 Output 1 Note In the first example, replacing the last digit \'0\' with \'7\' would make the number \'17\' which is divisible by 7, so only one digit is replaced. In the second example, \'777\' is already divisible by 7, so no digits need replacement and the output is 0. In the third example, replacing the last digit \'3\' with \'2\' would make the number \'122\' which is divisible by 7, hence one digit is replaced.","solution":"def min_replacements_to_divisible_by_7(n): Returns the minimum number of digit replacements needed to make the number divisible by 7. num = int(n) if num % 7 == 0: return 0 m = len(n) if m == 1: for i in range(10): if i % 7 == 0: return 1 return -1 min_replacements = float(\'inf\') for i in range(m): original_digit = n[i] for rep in range(10): if rep == int(original_digit): continue new_num = int(n[:i] + str(rep) + n[i+1:]) if new_num % 7 == 0: min_replacements = min(min_replacements, 1) if min_replacements == float(\'inf\'): dp = [float(\'inf\')] * (m + 1) for i in range(m): dp[i + 1] = dp[i] + 1 for j in range(10): if j == int(n[i]): continue new_num = int(n[:i] + str(j) + n[i+1:]) if new_num % 7 == 0: dp[i + 1] = min(dp[i + 1], 1) min_replacements = dp[m] if min_replacements == float(\'inf\'): return -1 return min_replacements"},{"question":"Given an array of integers and an integer K, find the number of pairs of integers in the array whose sum is equal to K. Input The input consists of two lines. * The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9), where N is the length of the array and K is the target sum. * The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9), representing the elements of the array. Output Print the number of pairs from the array whose sum is equal to K. Examples Input 4 6 1 5 3 3 Output 2 Input 5 5 1 1 1 1 1 Output 10","solution":"def count_pairs_with_sum(arr, n, k): Returns the number of pairs of integers in the array whose sum is equal to K. Parameters: arr (list): List of integers. n (int): Length of the array. k (int): Target sum. Returns: int: Number of pairs with sum equal to K. from collections import defaultdict count = 0 freq = defaultdict(int) for num in arr: count += freq[k - num] freq[num] += 1 return count # Example usage: # N = 4, K = 6 # arr = [1, 5, 3, 3] # print(count_pairs_with_sum(arr, N, K)) # Output: 2"},{"question":"Tony is organizing a tournament where n participants will compete against each other in k rounds. Each participant will compete exactly once per round, and each round will have exactly two participants. After each round, the winner is awarded 1 point and the loser is awarded 0 points. At the end of all k rounds, Tony wants to determine the ranking of participants based on their total points. Help Tony calculate the final scores of each participant and determine the ranking. The ranking should consist of participants sorted by their total points in descending order. In case of a tie in points, participants should be sorted by their participant number in ascending order. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105), indicating the number of participants and the number of rounds, respectively. Each of the following k lines contains three space-separated integers a, b, and r, representing a round where participants a and b compete, and r (a or b) is the winner of this round (1 ≤ a, b, r ≤ n, a ≠ b). Output Print n lines; each line should contain two space-separated integers: the participant number and their total points, in the specified order (sorted by points in descending order, and by participant number in ascending order in case of a tie). Examples Input 4 3 1 2 1 2 3 2 1 3 3 Output 1 1 2 1 3 1 4 0 Input 3 3 1 2 2 1 3 3 2 3 2 Output 2 2 3 1 1 0","solution":"def tournament_ranking(n, k, rounds): # Initialize the dictionary to store points for each participant points = {i: 0 for i in range(1, n + 1)} # Process each round for a, b, r in rounds: points[r] += 1 # Create a ranking list from the points dictionary, sorted by points in descending order # and by participant number in ascending order in case of a tie rankings = sorted(points.items(), key=lambda x: (-x[1], x[0])) return rankings # Example of using the function n = 4 k = 3 rounds = [(1, 2, 1), (2, 3, 2), (1, 3, 3)] print(tournament_ranking(n, k, rounds))"},{"question":"You are given a string representing a mathematical expression composed of digits, the plus sign (\'+\'), and the minus sign (\'-\'). Your task is to evaluate the expression and return the result. The expression will not contain any spaces and will follow these rules: - It will begin with a digit or a minus sign. - Two operators will not appear consecutively. - The expression may contain one or more negative numbers. Input: The input consists of a single line containing the mathematical expression. Output: Print the evaluated result of the expression as an integer. Constraints: - The length of the expression will be between 1 and 1000. Example Input: \\"12+34-5+67-8\\" Output: 100 Input: \\"10-20+30-40\\" Output: -20","solution":"def evaluate_expression(expression): Evaluates a mathematical expression composed of digits, the plus sign (\'+\'), and the minus sign (\'-\'). Parameters: expression (str): A string representing the mathematical expression. Returns: int: The result of evaluating the expression. return eval(expression)"},{"question":"Maria is a security specialist who is trying to analyze user logs to identify suspicious activity. For this purpose, she defines a “suspicious sequence” as a sequence of consecutive identical characters in a log entry. Given a log entry (a string), Maria needs to find the maximum length of such a suspicious sequence. Input The first line of input contains a single integer T (1 ≤ T ≤ 100000) — the number of log entries. Each of the next T lines contains one string S (1 ≤ |S| ≤ 100000), where |S| denotes the length of the string. Output Print T lines, each containing a single integer — the length of the maximum suspicious sequence for each log entry. SAMPLE INPUT 3 aabbbbccdddde xyz abcdeeeeeffffggg SAMPLE OUTPUT 4 1 5 Explanation First Case: The longest sequence of identical characters is \\"bbbb\\" with a length of 4. Second Case: All characters are distinct, so the maximum sequence length is 1. Third Case: The longest sequence of identical characters is \\"eeeee\\" with a length of 5.","solution":"def max_suspicious_sequence(log_entries): Given a list of log entries, returns the length of the maximum suspicious sequence for each log entry. Parameters: log_entries (list of str): The log entries to analyze. Returns: list of int: List containing the lengths of the maximum suspicious sequence for each log entry. results = [] for log in log_entries: max_length = 1 current_length = 1 for i in range(1, len(log)): if log[i] == log[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"A messaging application has a system for compressing messages before sending them over the network. The compression system works by eliminating any duplicate consecutive characters in the original message. Your task is to implement this compression algorithm. When compressing a message: - Each group of consecutive duplicate characters is replaced with a single occurrence of that character. For example, the message \\"aaabbccc\\" would be compressed to \\"abc\\". You are required to write a function `compress_message(message)` that takes a single string `message` as an input and returns a new string representing the compressed message. # Input - A single string `message` where 1 ≤ len(message) ≤ 100, consisting of lowercase English letters. # Output - A single string representing the compressed message. # Examples Input ``` aaabbccc ``` Output ``` abc ``` Input ``` hello ``` Output ``` helo ``` Input ``` mississippi ``` Output ``` misisipi ``` # Note In the first example, the contiguous \'a\'s are reduced to a single \'a\', contiguous \'b\'s to a single \'b\', and contiguous \'c\'s to a single \'c\', thus forming \\"abc\\". In the second example, the contiguous \'l\'s are reduced to a single \'l\', thus forming \\"helo\\". In the third example, the contiguous \'s\'s and \'i\'s are reduced to single occurrences of \'s\' and \'i\' respectively, thus forming \\"misisipi\\".","solution":"def compress_message(message): Compresses the given message by eliminating consecutive duplicate characters. Args: message (str): The original message string consisting of lowercase English letters. Returns: str: The compressed message. if not message: return \\"\\" compressed_message = [message[0]] for char in message[1:]: if char != compressed_message[-1]: compressed_message.append(char) return \'\'.join(compressed_message)"},{"question":"A small company is implementing a points-based employee reward system. Each employee can earn various points for different achievements, such as completing projects, helping colleagues, or meeting deadlines. To keep track of the points, each employee\'s total points are stored in the company\'s database, represented as a non-negative integer. The company runs monthly raffles where employees can use their points to buy raffle tickets. Each raffle ticket costs a certain amount of points, and employees can buy as many tickets as their points allow. The points used for buying tickets are deducted from the employee\'s total points. Your task is to write a program that manages the points and processes raffle ticket purchases. The program should output the remaining points for each employee after attempting to buy a specified number of tickets at the given cost. Input: - The first line contains an integer `T`, the number of test cases. - For each test case, there are three integers on a single line: - `P` (the initial number of points the employee has), - `C` (the cost of one raffle ticket in points), - `N` (the number of raffle tickets the employee wants to buy). Output: - For each test case, print the remaining points of the employee. If the employee does not have enough points to buy all the tickets they want, print the message `Not enough points`. Constraints: - 1 ≤ T ≤ 100 - 0 ≤ P ≤ 10^6 - 1 ≤ C ≤ 10^6 - 1 ≤ N ≤ 10^6 Example: Input: 3 100 20 3 50 15 4 200 50 5 Output: Remaining points: 40 Not enough points Remaining points: 0","solution":"def manage_employee_points(T, test_cases): Manages the points and processes raffle ticket purchases for employees. Params: - T: Integer, number of test cases. - test_cases: List of tuples [(P, C, N), ...] where - P is the initial number of points the employee has, - C is the cost of one raffle ticket in points, - N is the number of raffle tickets the employee wants to buy. Returns: - List of strings, each showing the result for the corresponding test case: Either \\"Remaining points: X\\" or \\"Not enough points\\". results = [] for P, C, N in test_cases: total_cost = C * N if P >= total_cost: remaining_points = P - total_cost results.append(f\\"Remaining points: {remaining_points}\\") else: results.append(\\"Not enough points\\") return results # Helper function to parse input and output def parse_input_and_process(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:]] return manage_employee_points(T, test_cases) def format_outputs(outputs): return \\"n\\".join(outputs)"},{"question":"Emma is a programmer who loves working with strings and binary numbers. Her latest challenge is to reverse engineer a binary string encoding system. In this system, each character of the string is first converted to its 8-bit binary ASCII representation, and then the entire binary sequence is concatenated to form a long binary string. Emma needs to decode such a binary string back into the original string of characters. For that, she needs your help to convert the binary string back into its original character sequence. Write a program that takes a binary string as input and outputs the original string of characters. Input The input consists of a single line containing a binary string `b` (1 ≤ |b| ≤ 104) which is guaranteed to be divisible by 8. Output The output should be the original string of characters represented by the binary string. Examples Input ``` 0100100001100101011011000110110001101111 ``` Output ``` Hello ``` Input ``` 0110100001101001 ``` Output ``` hi ``` Note For the first example, the binary string `0100100001100101011011000110110001101111` can be split into the following 8-bit chunks: - `01001000` which is 72 in decimal and \'H\' in ASCII - `01100101` which is 101 in decimal and \'e\' in ASCII - `01101100` which is 108 in decimal and \'l\' in ASCII - `01101100` which is 108 in decimal and \'l\' in ASCII - `01101111` which is 111 in decimal and \'o\' in ASCII Thus, the decoded string is \\"Hello\\".","solution":"def binary_to_string(binary_str): Converts a binary string to its original string of characters. Each character in the original string is represented by 8 bits in the binary string. Args: binary_str (str): A binary string of length divisible by 8. Returns: str: The original string of characters. num_chunks = len(binary_str) // 8 chars = [] for i in range(num_chunks): byte = binary_str[i*8:(i+1)*8] ascii_value = int(byte, 2) char = chr(ascii_value) chars.append(char) return \'\'.join(chars) # Example usage # print(binary_to_string(\'0100100001100101011011000110110001101111\')) # Output should be \'Hello\'"},{"question":"Write a function that takes in a list of integers and returns a new list with the elements sorted in non-decreasing order but such that all instances of the integer 0 are moved to the end of the list, while maintaining the relative order of the non-zero elements. # Input: The input comprises two lines: - The first line contains an integer `T`, the number of test cases. - The second line contains `T` space-separated integers representing the elements of the list. # Output: For each test case, output the transformed list as described. # Constraints: - (1 leq T leq 100) - (-10^5 leq text{list element} leq 10^5) - The list can contain up to (10^5) elements in total across all test cases. # Example: Input: ``` 2 0 3 0 1 -2 7 0 5 0 3 ``` Output: ``` -2 1 3 0 0 3 5 7 0 0 ``` # Explanation: In the first test case, the list `0 3 0 1 -2` is transformed into `-2 1 3 0 0` by moving the zeros to the end and sorting the non-zero elements. In the second test case, the list `7 0 5 0 3` is transformed into `3 5 7 0 0` by moving the zeros to the end and sorting the non-zero elements.","solution":"def zero_to_end_and_sort(lst): This function takes a list of integers, sorts the non-zero elements, and moves all zeros to the end of the list while maintaining the relative order of non-zero elements. # Separate the zero and non-zero elements. non_zero_elements = [num for num in lst if num != 0] zero_elements = [num for num in lst if num == 0] # Sort the non-zero elements non_zero_elements.sort() # Return the combined list of sorted non-zero elements followed by zeros return non_zero_elements + zero_elements"},{"question":"A delivery service employs a fleet of vehicles to transport parcels. Each vehicle can carry parcels up to a certain maximum weight (`maxWeight`). Given the list of parcels with their respective weights, you need to determine the minimum number of vehicles required to transport all the parcels such that: 1. Each vehicle carries parcels whose combined weight does not exceed the `maxWeight`. 2. Each parcel must be assigned to exactly one vehicle. Input The input consists of two parts: 1. An integer `n` (1 ≤ n ≤ 10^5) representing the number of parcels. 2. n integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10^5) representing the weights of the parcels. 3. An integer `maxWeight` (1 ≤ maxWeight ≤ 10^9) representing the maximum weight a vehicle can carry. Output Print a single integer: the minimum number of vehicles needed to transport all the parcels. Examples Input 5 4 8 1 4 2 10 Output 3 Input 3 4 4 4 5 Output 3 Input 6 9 8 7 6 5 4 15 Output 3 Note In the first test case, one optimal way to distribute parcels is: - Vehicle 1: 4, 4 - Vehicle 2: 8 - Vehicle 3: 1, 2 In the second test case, each vehicle carries exactly one parcel as each parcel\'s weight exceeds half of the `maxWeight`. In the third test case, one optimal way to distribute parcels is: - Vehicle 1: 9, 4 - Vehicle 2: 8, 7 - Vehicle 3: 6, 5","solution":"def min_vehicles_required(n, weights, maxWeight): Calculate the minimum number of vehicles required to transport all parcels. :param n: integer, number of parcels. :param weights: list of integers, weights of the parcels. :param maxWeight: integer, maximum weight a vehicle can carry. :return: integer, minimum number of vehicles needed. weights.sort(reverse=True) vehicles = 0 i = 0 j = n - 1 while i <= j: if weights[i] + weights[j] <= maxWeight: j -= 1 i += 1 vehicles += 1 return vehicles"},{"question":"You are given a string of lowercase alphabets, and your task is to transform it into its numerical representation where \'a\' corresponds to 1, \'b\' corresponds to 2, and so on up to \'z\' which corresponds to 26. The resulting numbers should be concatenated together to form a single large number. For example, if the input string is \\"abc\\", the output should be the number 123. Input The input consists of one line containing a string s (1 ≤ |s| ≤ 105), where each character in s is a lowercase English letter. Output Output a single line containing the concatenated numerical representation of the input string. Examples Input abc Output 123 Input xyz Output 242526 Input hello Output 85121215 Note In the first example, the string \\"abc\\" corresponds to the numbers 1, 2, and 3 for \'a\', \'b\', and \'c\' respectively. Therefore, the output is \\"123\\". In the second example, \\"xyz\\" translates to 24, 25, and 26 for \'x\', \'y\', and \'z\' respectively, resulting in \\"242526\\". In the third example, \\"hello\\" translates to 8, 5, 12, 12, and 15 for \'h\', \'e\', \'l\', \'l\', and \'o\' respectively, resulting in \\"85121215\\".","solution":"def string_to_number(s): Converts a string of lowercase alphabets into its numerical representation. \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26. result = \\"\\" for char in s: numerical_value = ord(char) - ord(\'a\') + 1 result += str(numerical_value) return result"},{"question":"Limak is very fond of puzzles, and he has recently been fascinated by a new type of puzzles called \\"block switches.\\" In Bearland, there are n switches, each initially turned off. A switch can be toggled on or off by activating a block that contains the switch. Additionally, blocks can contain several switches, and each block can be activated only once. You are given q queries, and each query describes a challenge that Limak must solve using the blocks. For each query, you are given a set of l switches and m blocks. Each block is described by a list of switches it contains. Limak needs to determine if it is possible to toggle all l switches on using any combination of the m blocks, provided that each block can only be used once. If it is possible, print \\"POSSIBLE\\"; otherwise, print \\"IMPOSSIBLE\\". Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of switches and the number of queries, respectively. The description of each query follows: The first line of the description of each query contains two integers l and m (1 ≤ l ≤ n, 0 ≤ m ≤ 100,000) — the number of switches in the set and the number of blocks. The next line contains l distinct integers si (1 ≤ si ≤ n) — the switches that need to be toggled on. Each of the next m lines contains a positive integer b (1 ≤ b ≤ n), followed by b integers ki (1 ≤ ki ≤ n) — the switches contained in the block. The sum of the number of blocks across all queries won\'t exceed 100,000, and the total number of switches inside all blocks across all queries won\'t exceed 100,000. Output Print q lines, each containing \\"POSSIBLE\\" if it is possible to toggle all the specified l switches on using the given blocks, or \\"IMPOSSIBLE\\" otherwise. Examples Input 5 2 3 2 1 2 3 3 1 2 3 1 4 3 1 2 3 5 3 1 2 4 3 1 3 5 Output POSSIBLE IMPOSSIBLE Note Let\'s look at the first sample: In the first query, the required switches are {1, 2, 3} and there are two blocks: - Block 1 contains switches {1, 2, 3} - Block 2 contains switches {4} Using Block 1, Limak can toggle all required switches {1, 2, 3} on, so the output is \\"POSSIBLE\\". In the second query, the required switches are {2, 3, 5} and there is one block: - Block 1 contains switches {1, 2, 4} - Block 2 contains switches {1, 3, 5} Limak cannot toggle all required switches {2, 3, 5} on with the given blocks since no single block or combination of blocks can achieve this, so the output is \\"IMPOSSIBLE\\".","solution":"def is_possible(n, q, queries): def can_toggle_all_switches(l, m, required_switches, blocks): from itertools import combinations if not required_switches: return True # Generate all possible combination of blocks for r in range(1, m + 1): for combo in combinations(blocks, r): toggled_switches = set() for block in combo: toggled_switches.update(block) if required_switches.issubset(toggled_switches): return True return False results = [] for l, m, required_switches, blocks in queries: required_switches = set(required_switches) blocks = [set(block) for block in blocks] result = \\"POSSIBLE\\" if can_toggle_all_switches(l, m, required_switches, blocks) else \\"IMPOSSIBLE\\" results.append(result) return results"},{"question":"You are organizing a coding competition, and the rules state that each participant must enter a unique nickname that follows a specific format. A valid nickname must consist of only uppercase and lowercase Latin letters and digits, and must begin with a letter. Your task is to help validate the nicknames submitted by the participants and inform them if their chosen nickname is valid or invalid according to the rules. Input The first line contains the positive integer n (1 ≤ n ≤ 1000) — the number of nicknames. The next n lines contain one nickname each, consisting of only uppercase and lowercase Latin letters and digits (1 ≤ length of each nickname ≤ 10). Output For each nickname, print \\"Valid\\" if the nickname follows the rules, and \\"Invalid\\" if it does not. Examples Input 5 Alice123 Bob 9Garry _John M@rk Output Valid Valid Invalid Invalid Invalid","solution":"def validate_nicknames(nicknames): results = [] for nickname in nicknames: if (nickname[0].isalpha() and all(char.isalnum() for char in nickname)): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"The local zoo wants to keep track of the animal population growth. Each animal follows a specific breeding pattern over a period of time. Input The input file consists of several lines, with each line containing a single integer n, which represents the number of days. The number n does not exceed 1000. Output Your program has to print the total population of the animals after n days. The initial population at day 0 is 1. The population doubles every day according to the following rules: - On the nth day, the population is 2^n. Print each result on a new line. Example Input 1 2 5 Output 2 4 32","solution":"def calculate_population(days): This function calculates the total population of animals after a given number of days. The population doubles every day starting with an initial population of 1. :param days: Number of days :return: Total population after the given number of days return 2 ** days def process_input(input_lines): This function processes multiple lines of input, each representing the number of days, and prints the corresponding population for each day. :param input_lines: List of integers where each integer represents the number of days results = [calculate_population(int(line)) for line in input_lines] for result in results: print(result)"},{"question":"In a kingdom far, far away, there exists a peculiar mathematical construct called the \\"Knight\'s Tour.\\" The Knight\'s Tour is a sequence of moves by a knight on an n x n chessboard such that the knight visits every square exactly once. The problem is to determine if a complete knight\'s tour is possible and to print one such tour. The knight moves in a \\"L\\" shape: it can move two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. For example, if a knight is on square (x, y), it can move to any of the following squares: (x+2, y+1), (x+2, y-1), (x-2, y+1), (x-2, y-1), (x+1, y+2), (x+1, y-2), (x-1, y+2), (x-1, y-2). Implement a function that finds a valid Knight\'s Tour on an n x n chessboard starting from position (1, 1) and prints the tour. Input The input consists of a single integer n (1 ≤ n ≤ 8) — the size of the chessboard. Output If a valid Knight\'s Tour is found, print \\"YES\\" on the first line and then n^2 lines with the coordinates (i, j) indicating the moves of the knight in order. If no valid tour is found, just print \\"NO\\". Examples Input 5 Output YES 1 1 3 2 1 3 2 1 4 2 ... ... and so on until all 25 moves are printed. OR Input 3 Output NO Note Explanation of the sample test: * For n=5, it is possible to find a complete Knight\'s Tour starting from position (1, 1). The exact sequence of moves can vary but must cover all 25 squares on a 5x5 board. * For n=3, it is not possible to cover all squares on a 3x3 board with a valid Knight\'s Tour due to the board\'s small size.","solution":"def find_knights_tour(n): Determines if a complete Knight\'s Tour is possible on an n x n chessboard starting from (1, 1) and prints one such tour if it exists. def is_valid(x, y, board): return 0 <= x < n and 0 <= y < n and board[x][y] == -1 def solve_knights_tour(x, y, move_i, board, x_moves, y_moves): if move_i == n * n: return True for k in range(8): next_x = x + x_moves[k] next_y = y + y_moves[k] if is_valid(next_x, next_y, board): board[next_x][next_y] = move_i if solve_knights_tour(next_x, next_y, move_i + 1, board, x_moves, y_moves): return True board[next_x][next_y] = -1 return False # Move patterns for the Knight x_moves = [2, 1, -1, -2, -2, -1, 1, 2] y_moves = [1, 2, 2, 1, -1, -2, -2, -1] # Initialize board board = [[-1 for _ in range(n)] for _ in range(n)] board[0][0] = 0 # Start at (1, 1) which is (0, 0) in 0-indexed if solve_knights_tour(0, 0, 1, board, x_moves, y_moves): print(\\"YES\\") result = [] for i in range(n): for j in range(n): result.append((board[i][j] // n + 1, board[i][j] % n + 1)) result.sort() for r in result: print(f\\"{r[0]} {r[1]}\\") else: print(\\"NO\\")"},{"question":"Given a grid of size n x m filled with characters. Each cell in the grid contains a lowercase English letter. You can move from a cell to another if they differ by exactly one in the alphabet (i.e., you can move from \'a\' to \'b\', from \'b\' to \'c\', and so on) and if the destination cell is within the grid boundaries. You can move in all 8 possible directions (up, down, left, right, and the 4 diagonal directions). Your task is to determine the length of the longest path in the grid such that each consecutive cell in this path follows the described condition (letters differ by exactly one in the alphabet). Input The first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of queries. Then q queries follow. The first line of each query contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid. The following n lines contain m characters each, representing the grid. Output For each query, print one integer — the length of the longest path possible in the respective grid. Example Input 2 3 3 abc def ghi 4 4 abcd axyz aywx adcb Output 3 4 Explanation In the first query, the longest path can be \\"abc\\" or \\"def\\" or \\"ghi\\". In the second query, one possible longest path is \\"abcd\\".","solution":"def longest_path_in_grid(q, queries): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def is_valid(x, y, n, m): return 0 <= x < n and 0 <= y < m def dfs(grid, x, y, n, m, memo): if memo[x][y] != -1: return memo[x][y] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m) and ord(grid[nx][ny]) == ord(grid[x][y]) + 1: max_path = max(max_path, 1 + dfs(grid, nx, ny, n, m, memo)) memo[x][y] = max_path return max_path results = [] for query in queries: n, m, grid = query memo = [[-1] * m for _ in range(n)] max_len = 0 for i in range(n): for j in range(m): if memo[i][j] == -1: max_len = max(max_len, dfs(grid, i, j, n, m, memo)) results.append(max_len) return results"},{"question":"You are organizing a competition and need to manage players and their scores. Each player has a unique ID and an initial score. The competition is conducted over multiple rounds where each round consists of either adding a specific number of points to a player\'s score, deducting points, or querying the current highest scorer among the players. Your task is to process each operation and when queried, determine the player with the highest score. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of players and the number of operations respectively. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial scores of the players. The following q lines describe the operations: - If the operation is of type \\"A\\", it will be followed by two integers i and p (1 ≤ i ≤ n, 1 ≤ p ≤ 10^9) meaning that player i\'s score should be increased by p points. - If the operation is of type \\"D\\", it will be followed by two integers i and p (1 ≤ i ≤ n, 1 ≤ p ≤ 10^9) meaning that player i\'s score should be decreased by p points. - If the operation is of type \\"Q\\", it means a query operation where you should return the player ID with the highest score. In case of a tie, return the smallest ID. Output For each query operation, output the player ID with the highest score. Example Input 5 7 10 20 30 40 50 A 3 10 D 1 5 Q A 2 100 Q D 5 55 Q Output 5 2 4 Explanation 1. Adding 10 points to player 3, new scores are [10, 20, 40, 40, 50]. 2. Deducting 5 points from player 1, new scores are [5, 20, 40, 40, 50]. 3. Query operation: the highest score is 50 (player 5). 4. Adding 100 points to player 2, new scores are [5, 120, 40, 40, 50]. 5. Query operation: the highest score is 120 (player 2). 6. Deducting 55 points from player 5, new scores are [5, 120, 40, 40, -5]. 7. Query operation: the highest score is 120 (player 2).","solution":"def manage_competition(n, q, initial_scores, operations): scores = initial_scores[:] result = [] for operation in operations: op = operation[0] if op == \'A\': i, p = operation[1], operation[2] scores[i-1] += p elif op == \'D\': i, p = operation[1], operation[2] scores[i-1] -= p elif op == \'Q\': highest_score = -1 player_id = -1 for i in range(n): if ( scores[i] > highest_score or (scores[i] == highest_score and i + 1 < player_id) ): highest_score = scores[i] player_id = i + 1 result.append(player_id) return result"},{"question":"Smart Beaver loves books and has filled his library with numerous books of varying heights. He stacks these books in rows and wants each row to be organized such that all books in a row are sorted by their heights in non-decreasing order. The Smart Beaver noticed that the books in each row are currently randomly arranged and he wants to reorganize them with the minimum number of moves. A move consists of selecting a book from its current position and placing it into another position within the same row. As rearranging the books is a tedious task, he wants to determine the least number of moves required to achieve the desired arrangement. Help Smart Beaver find the minimum number of moves to sort the books in each row of his library. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the library where n is the number of rows and m is the number of books in each row. Each of the next n lines contains m space-separated integers, representing the heights of the books in that row. Output Print a single integer, the minimum number of moves required to sort each row individually. Examples Input 3 4 3 1 2 4 5 3 4 6 2 8 5 7 Output 3 Input 2 3 2 1 3 3 2 1 Output 2 Note In the first example, we can sort each row with the following moves: - Move book of height 1 to the second position and book of height 2 to the third position in the first row. - Swap books of heights 3 and 5 in the second row. - Move book of height 2 to the first position and book of height 7 to the second position in the third row. In the second example, we can sort each row with the following moves: - Swap books of heights 1 and 2 in the first row. - Swap books of heights 2 and 3 in the second row.","solution":"def min_moves_to_sort_rows(n, m, library): Returns the minimum number of moves required to sort each row individually. Args: n: int, number of rows m: int, number of books in each row library: list of lists of ints, where each inner list contains the heights of books in that row Returns: int, the minimum number of moves required total_moves = 0 for row in library: sorted_row = sorted(row) move_counts = 0 for i in range(m): if row[i] != sorted_row[i]: move_counts += 1 total_moves += move_counts // 2 # Each out-of-place book pair can be fixed in 1 move return total_moves"},{"question":"Bob is a software developer who loves playing a puzzle game where he needs to arrange blocks in the shape of a cross on a grid. Each block covers one cell on the grid, and Bob has certain numbers of blocks to place in each row. The grid has R rows and C columns. Bob wants the vertical line of the cross to be exactly in the center column of the grid (column ⌊C/2⌋ + 1 for 1-based index). The horizontal line of the cross must be exactly in the center row of the grid (row ⌊R/2⌋ + 1 for 1-based index). Given the number of blocks for each row, determine if it is possible to place all the blocks on the grid such that they form a cross with the constraints described above. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains two integers R and C (1 ≤ R, C ≤ 100) — the number of rows and columns in the grid. The second line contains R integers b_1, b_2, ..., b_R (0 ≤ b_i ≤ 1) — the number of blocks to be placed in each row. Output Output \\"YES\\" if all blocks can be placed to form a cross, otherwise output \\"NO\\". Examples Input 5 5 1 1 1 1 1 Output YES Input 5 5 1 0 1 0 1 Output NO Input 3 3 1 1 1 Output YES Note In the first example, the grid is 5x5 and each row has one block. It is possible to place all the blocks in a cross shape. In the second example, although the grid is 5x5, one row does not have a block, hence it is not possible to form a cross. In the third example, the grid is 3x3 and each row has one block. It is possible to place all the blocks to form a cross shape.","solution":"def can_form_cross(R, C, blocks): Determines if it is possible to place the blocks in the shape of a cross. Args: R : int : number of rows of the grid C : int : number of columns of the grid blocks : list : number of blocks for each row Returns: str : \\"YES\\" if it is possible to place all the blocks in a cross shape, otherwise \\"NO\\". if R != C: # For the cross to be centralized, rows and columns should be equal return \\"NO\\" center_row_index = R // 2 # zero-indexed center row center_col_index = C // 2 # zero-indexed center column # Each row except the center should have exactly 1 block, the center row should have R blocks for i, b in enumerate(blocks): if (i == center_row_index and b != R) or (i != center_row_index and b != 1): return \\"NO\\" return \\"YES\\""}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},P={class:"card-container"},j={key:0,class:"empty-state"},C=["disabled"],F={key:0},R={key:1};function z(s,e,h,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",P,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+l(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",F,"See more"))],8,C)):u("",!0)])}const L=d(S,[["render",z],["__scopeId","data-v-2ef2f511"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/52.md","filePath":"deepseek/52.md"}'),D={name:"deepseek/52.md"},G=Object.assign(D,{setup(s){return(e,h)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
