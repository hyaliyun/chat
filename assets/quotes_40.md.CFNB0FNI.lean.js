import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-673be4ef"]]),A=JSON.parse('[{"question":"You are given a grid of size n x n filled with integers. Starting from the top-left corner of the grid, you can only move right or down at each step until you reach the bottom-right corner of the grid. Along the path, you collect the integers in the cells you visit. The goal is to calculate the maximum sum of numbers you can collect on such a path. Input: The first line contains an integer n (1 ≤ n ≤ 50) — the size of the grid. Each of the next n lines contains n integers, representing the grid. Output: Print a single integer — the maximum sum of numbers you can collect. Examples: Input: 3 1 3 1 1 5 1 4 2 1 Output: 12 Input: 2 1 2 1 2 Output: 5 Note: In the first example, the path 1 -> 3 -> 5 -> 2 -> 1 gives a maximum sum of 12. In the second example, the path 1 -> 2 -> 2 gives a maximum sum of 5.","solution":"def max_path_sum(n, grid): Calculate the maximum sum of numbers collected from the top-left corner to the bottom-right corner only moving right or down. Parameters: n (int): The size of the grid. grid (List[List[int]]): The grid of integers. Returns: int: The maximum sum of numbers collected. # Create a DP table to store the maximum sum at each cell dp = [[0] * n for _ in range(n)] # Initialize the top-left corner with the first cell value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"Julia discovered an enchanted forest where magical coordinates are hidden in the form of integer points on the Cartesian plane. Each set of these points forms a triangle, often with unique properties. She is particularly interested in right-angled triangles, which have one angle exactly 90 degrees. Julia wants to catalog sets of four such points where every subset of three points forms a unique right-angled triangle. In other words, given four points, every possible combination of three points should form a right-angled triangle. Your task is to help Julia verify if a given set of four points has this property. Input The input consists of four lines, each containing a pair of integer coordinates xi and yi (-1000 ≤ xi, yi ≤ 1000). It\'s guaranteed that all four points are distinct. Output Print \\"YES\\" if all subsets of three points form a right-angled triangle. Otherwise, print \\"NO\\". Example Input 0 0 3 0 0 4 3 4 Output YES Input 0 0 1 1 2 2 3 3 Output NO Explanation In the first example, every subset of three points forms a right-angled triangle: (0,0), (3,0), (0,4) form a right-angled triangle; (0,0), (3,0), (3,4) form a right-angled triangle, and so on. Therefore, the output is \\"YES\\". In the second example, the points (0,0), (1,1), (2,2), and (3,3) are collinear, and thus cannot form right-angled triangles. Therefore, the output is \\"NO\\".","solution":"def is_right_angle(x1, y1, x2, y2, x3, y3): Checks if the triangle formed by (x1, y1), (x2, y2), (x3, y3) is a right-angled triangle. # Calculate squares of the lengths of the sides a2 = (x2 - x1) ** 2 + (y2 - y1) ** 2 b2 = (x3 - x1) ** 2 + (y3 - y1) ** 2 c2 = (x3 - x2) ** 2 + (y3 - y2) ** 2 # Check if any permutation of these squares satisfies Pythagorean Theorem return a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2 def are_all_subsets_right_angled(points): Verifies if all subsets of three points out of the four provided points form a right-angled triangle. :param points: List of tuples containing four points (x, y) :return: \\"YES\\" if all subsets of three points form a right-angled triangle, otherwise \\"NO\\" # Extract individual points (x1, y1), (x2, y2), (x3, y3), (x4, y4) = points # Check all subsets of 3 points to see if they form a right-angled triangle if ( is_right_angle(x1, y1, x2, y2, x3, y3) and is_right_angle(x1, y1, x2, y2, x4, y4) and is_right_angle(x1, y1, x3, y3, x4, y4) and is_right_angle(x2, y2, x3, y3, x4, y4) ): return \\"YES\\" return \\"NO\\""},{"question":"A company wants to distribute its annual bonuses to its employees based on their individual performances. The performance of each employee is measured on a scale from 0 to 100. The company has decided to give out the bonuses such that: 1. Each employee gets at least one unit of bonus. 2. Employees with a higher performance rating receive more bonuses than their immediate neighbors (i.e., the employees ranked directly before and after them). Given the performance ratings of all employees, determine the minimum total number of bonuses the company needs to give out. Input The first line of input contains an integer n (1 ≤ n ≤ 105), the number of employees. The second line contains n integers, where the i-th integer pi (0 ≤ pi ≤ 100) is the performance rating of the i-th employee. Output Output the minimum total number of bonuses the company needs to give out. Examples Input 3 1 2 2 Output 4 Input 5 10 20 30 20 10 Output 9 Input 6 1 2 3 4 5 6 Output 21 Note In the first example, the minimum number of bonuses can be distributed as follows: [1, 2, 1]. Thus, the total number of bonuses will be 4. In the second example, bonuses can be distributed as [1, 2, 3, 2, 1]. The total number of bonuses will be 9. In the third example, bonuses can be distributed as [1, 2, 3, 4, 5, 6], since the ratings are strictly increasing. The total number of bonuses will be 21.","solution":"def min_bonuses(n, ratings): # Initialize an array to store bonuses with at least one bonus for each employee bonuses = [1] * n # Traverse from left to right for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Traverse from right to left for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"There is a game which involves arranging blocks to form a tower. You are given an array of integers where each integer represents the height of a block. The only rule in this game is that you cannot place a taller block on top of a shorter block. Given the heights of the blocks, determine the maximum height of a tower that can be formed. You are required to output this height. Note that you can only use each block once. Input The first line contains integer n (1 ≤ n ≤ 1000). The second line contains n integers representing the heights of the blocks (1 ≤ height ≤ 10⁶). Output Output a single integer — the maximal height of a tower that can be formed. Examples Input 5 5 3 8 6 2 Output 18 Note In the test example, one way to form the tallest tower is by arranging the blocks with heights 5, 6, and 8. This gives a total height of 5 + 6 + 8 = 19. The tower with blocks 2 and 3 has a total height of only 5. Thus, the maximum height is 18","solution":"def max_tower_height(n, heights): Returns the maximum height of a tower that can be formed with the given blocks, obeying the rule that taller blocks cannot be placed on top of shorter blocks. :param n: int : Number of blocks :param heights: list : List of integers representing the heights of the blocks :return: int : Maximum tower height # Sort the blocks in descending order sorted_heights = sorted(heights, reverse=True) # Initialize tower height tower_height = 0 # Iterate through the sorted heights and construct the tower for height in sorted_heights: tower_height += height return tower_height"},{"question":"A software development company has recently introduced a new feature that allows employees to submit tasks that they need help with. Each task has a unique integer ID and a complexity rating between 1 and 5, with 1 being very easy and 5 being very difficult. Sometimes an employee might submit tasks that are dependent on other tasks. This means a task can only start if all of its dependent tasks have been completed. Your job is to determine the order in which the tasks should be completed to respect the dependencies and minimize the time until all tasks are completed. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of tasks. - The next line contains a list of n integers, where the i-th integer represents the complexity rating of the i-th task. - The next line contains an integer m (0 ≤ m ≤ 1000), the number of dependencies. - Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that task ui must be completed before task vi. Output: - Print a list of integers indicating the order in which the tasks should be completed. If there are multiple valid orders, print any one. If there is no way to complete all tasks due to a cycle in the dependencies, print \\"IMPOSSIBLE\\". Examples Input: 5 3 1 4 2 5 4 1 2 1 3 3 4 4 5 Output: 1 3 4 5 2 Input: 4 3 1 2 5 3 1 2 2 3 3 1 Output: IMPOSSIBLE","solution":"from collections import defaultdict, deque def find_task_order(n, complexities, m, dependencies): # Build the graph graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in dependencies: graph[u].append(v) indegree[v] += 1 # Topological sort using Kahn\'s algorithm queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"IMPOSSIBLE\\""},{"question":"Liam is building a house using special bricks. Each brick has a specific strength, denoted by a non-negative integer. Liam wants to build the house such that it can withstand the maximum possible force. The total strength of the house is the sum of the strengths of all the bricks used. However, Liam can only use each type of brick exactly once. Liam has a special ability to merge two bricks into a single brick with a strength equal to the sum of the strengths of merged bricks. He can merge any number of pairs of bricks any number of times. What is the maximum total strength of the house where he uses each type of brick exactly once? Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different types of bricks. The second line contains n space-separated non-negative integers, where the i-th integer denotes the strength of the i-th type of brick. Output Output a single integer, the maximum total strength of the house. Examples Input 3 2 4 7 Output 13 Input 5 10 20 0 1 5 Output 36 Input 1 8 Output 8 Input 4 3 7 2 6 Output 18 Note In the first example, Liam can merge the first and second bricks to form a brick with strength 6. Then merge this new brick with the third brick to get a total strength of 13. In the second example, Liam can merge the fourth and fifth bricks to form a brick with strength 6, then merge this new brick with the second brick to get 26. Finally, merge the first and third bricks to get a total strength of 36.","solution":"def max_total_strength(n, strengths): Calculate the maximum total strength of the house by summing all the brick strengths since merging them is the equivalent of summing them up. Parameters: n (int): Number of different types of bricks strengths (list): List of integers representing the strengths of each brick type Returns: int: Maximum total strength of the house return sum(strengths)"},{"question":"# Problem Statement You are given a list of integers representing the prices of a stock on different days. You have to maximize your profit by choosing a day to buy the stock and a day in the future to sell it. However, you can only complete at most one transaction (i.e., buy one and sell one share of the stock), as you are going on a vacation. Write a function to find the maximum profit you can achieve. If you cannot achieve any profit, return 0. Input - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, denoting the number of days. - The second line contains N space-separated integers, denoting the prices of the stock on each day. Output - For each test case, output a single line containing the maximum profit you can achieve from the stock prices. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 3 * 10^4 - 1 ≤ Prices[i] ≤ 10^4 Example Input: 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Output: 5 0","solution":"def max_profit(prices): This function calculates the maximum profit that can be achieved by buying and selling stock on different days. Parameters: prices (list): List of integers representing stock prices on different days. Returns: int: The maximum profit that can be achieved. If no profit can be achieved, returns 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price else: potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit def max_profit_for_test_cases(test_cases): This function processes multiple test cases and returns the results. Parameters: test_cases (list of lists): List of test cases, where each test case is represented as a list of stock prices. Returns: list: List of integers representing the maximum profit for each test case. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"Alice is organizing a robot race where robots have to collect energy pills along a straight track to finish the race. The track is represented as a 2D grid of size `n x m`. Each cell in the grid can either be empty or contain an energy pill. The robot starts at the top-left corner of the grid (0,0) and must reach the bottom-right corner (n-1,m-1). The robot can only move right or down at each step. Your task is to find the maximum number of energy pills the robot can collect from the start to the finish line. Constraints: - The dimensions of the grid are given by `2 ≤ n, m ≤ 500`. - Each cell can contain at most one energy pill, denoted by 1 if it has a pill and 0 otherwise. Input: The input is given from Standard Input in the following format: ``` n m grid_1_1 grid_1_2 ... grid_1_m grid_2_1 grid_2_2 ... grid_2_m ... grid_n_1 grid_n_2 ... grid_n_m ``` Output: Output the maximum number of energy pills the robot can collect. Example: Input: ``` 3 3 0 0 1 1 0 0 0 1 1 ``` Output: ``` 3 ```","solution":"def max_energy_pills(n, m, grid): # Create a DP table to store the maximum number of energy pills collected up to each cell. dp = [[0]*m for _ in range(n)] # Initialize the value for the start position dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at the bottom-right corner is the maximum number of energy pills that can be collected return dp[-1][-1] def from_input_string(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [] for line in lines[1:]: grid.append(list(map(int, line.split()))) return n, m, grid def to_input_string(inputs): n, m, grid = inputs lines = [f\\"{n} {m}\\"] for row in grid: lines.append(\\" \\".join(map(str, row))) return \\"n\\".join(lines) def from_output_string(output_string): return int(output_string.strip()) def to_output_string(output): return str(output)"},{"question":"You are given a list of words. Write a program to determine the longest word in which the letters can be rearranged to form a palindrome. If there are multiple words with the same longest length, return any one of them. A word can be rearranged to form a palindrome if at most one character occurs an odd number of times. Input: The first line of the input contains an integer T denoting the number of test cases. Each of the following T lines contains a single string S consisting of lowercase English letters only. Output: For each test case, print the longest word from the given list that can be rearranged to form a palindrome. If no such word exists, print \\"None\\". Constraints: 1 ≤ T ≤ 10 1 ≤ len(S) ≤ 50 SAMPLE INPUT 2 redder level civic noon anna SAMPLE OUTPUT redder civic","solution":"def can_form_palindrome(word): Check if a word can be rearranged to form a palindrome. from collections import Counter count = Counter(word) odd_count = sum(1 for cnt in count.values() if cnt % 2 != 0) return odd_count <= 1 def longest_palindromic_word(words): Find the longest word in the list that can be rearranged to form a palindrome. longest_word = \\"None\\" for word in words: if can_form_palindrome(word): if longest_word == \\"None\\" or len(word) > len(longest_word): longest_word = word return longest_word def process_test_cases(test_cases): Process a list of test cases to find the longest palindromic word for each. results = [] for words in test_cases: result = longest_palindromic_word(words.split()) results.append(result) return results"},{"question":"Andy has a collection of n books, each with a unique number from 1 to n on their spines. He wants to arrange the books sequentially from 1 to n on his bookshelf. However, he can only move books in pairs: any two books can be swapped in one move. Help Andy determine the minimum number of swaps required to arrange all the books in the correct order. Input The first line of the input contains integer n (1 ≤ n ≤ 100 000) — the number of books on the shelf. The second line contains n integers ai (1 ≤ ai ≤ n, ai ≠ aj if i ≠ j) — the sequence of the numbers on the books’ spines. Output Print a single integer — the minimum number of swaps required to arrange the books in the correct order. Examples Input 5 4 3 1 5 2 Output 4 Input 4 1 3 4 2 Output 2 Note In the first sample, the swaps can be performed as follows: 1. Swap books 4 and 1 -> [1, 3, 4, 5, 2] 2. Swap books 3 and 2 -> [1, 2, 4, 5, 3] 3. Swap books 4 and 3 -> [1, 2, 3, 5, 4] 4. Swap books 5 and 4 -> [1, 2, 3, 4, 5] In the second sample, the swaps can be performed as follows: 1. Swap books 3 and 2 -> [1, 2, 4, 3] 2. Swap books 4 and 3 -> [1, 2, 3, 4]","solution":"def min_swaps_to_sort_books(n, books): Returns the minimum number of swaps required to sort the books sequentially from 1 to n. # Create an array of the pairs (book number, index) indexed_books = [(book, i) for i, book in enumerate(books)] # Sort the array by book number indexed_books.sort() # To keep track of visited elements visited = [False] * n swaps = 0 for i in range(n): # Already in the correct place or already visited if visited[i] or indexed_books[i][1] == i: continue cycle_length = 0 x = i while not visited[x]: visited[x] = True x = indexed_books[x][1] cycle_length += 1 # If there is a cycle of size k, it takes (k-1) swaps to sort if cycle_length > 0: swaps += (cycle_length - 1) return swaps"},{"question":"Certain paragraphs of text are chosen from a large document and classified into distinct topics based on their content. You need to write a program that classifies a given set of paragraphs into one of the predefined topics. Each paragraph is a sequence of words, and each topic is represented by a few keywords. The topic of a paragraph is determined by the highest frequency of keywords from that topic in the paragraph. If two topics have the same frequency of keywords in a paragraph, the paragraph should be classified to the topic that appears first in the input list. Note that a paragraph belongs to exactly one topic. input Read the following input from standard input. * The first line contains an integer T, the number of topics (1 ≤ T ≤ 10). * The following T lines each contain a topic name followed by a colon and a space-separated list of keywords for that topic. Each topic name is a single word, and the keywords are unique within a topic. * The next line contains an integer P, the number of paragraphs (1 ≤ P ≤ 100). * The following P lines each contain a paragraph as a sequence of words. Words are case insensitive. output For each paragraph, output the name of the topic that it is classified into based on the criteria mentioned. Example Input 3 Sports: football basketball tennis Technology: computer programming software Health: fitness nutrition 2 I love playing football and basketball with my friends. The latest advancements in computer programming are impressive. Output Sports Technology","solution":"import re def classify_paragraphs(num_topics, topics_list, num_paragraphs, paragraphs_list): topics = {} for i in range(num_topics): parts = topics_list[i].split(\': \') topic_name = parts[0].strip() keywords = set(parts[1].strip().lower().split()) topics[topic_name] = keywords results = [] for paragraph in paragraphs_list: words = re.findall(r\'bw+b\', paragraph.lower()) topic_freq = {topic: 0 for topic in topics} for word in words: for topic, keywords in topics.items(): if word in keywords: topic_freq[topic] += 1 max_topic = max(topic_freq, key=lambda k: (topic_freq[k], -list(topics.keys()).index(k))) results.append(max_topic) return results"},{"question":"In a fictional game, you are given a grid with n rows and m columns. This grid contains some obstacles and some empty cells. You can move in four possible directions from an empty cell: up, down, left, or right, but cannot move into a cell with an obstacle. You are provided with the initial positions of several characters on this grid, and each character must reach a specific target position. Write a program to determine whether it is possible for each character to reach its respective target position. If it is possible for each character to reach its target position, provide the minimum number of steps needed for each character to reach its target. Input The first line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 100) — the number of rows, columns, and characters respectively. The next n lines each contain m characters, either \'.\' (empty cell) or \'#\' (obstacle). The next k lines each contain four space-separated integers r1, c1, r2, c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) representing the initial position (r1, c1) and the target position (r2, c2) of the i-th character. Output If it is possible for each character to reach its respective target position, output \\"YES\\" followed by k integers denoting the minimum number of steps each character needs to take. If it is not possible for at least one character to reach its target position, output \\"NO\\". Examples Input 5 5 2 ..#.. ..... . ..... ..... 1 1 2 2 4 4 5 5 Output YES 2 2 Input 3 3 1 .#. .#. .#. 1 1 3 3 Output NO Note In the first example, the grid allows both characters to reach their target positions with the minimum number of steps being 2 for each. In the second example, the obstacles make it impossible for the character to reach the target position, hence the answer is \\"NO\\".","solution":"from collections import deque def is_valid_move(grid, n, m, row, col): return 0 <= row < n and 0 <= col < m and grid[row][col] == \'.\' def bfs(grid, n, m, start, target): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set((start[0], start[1])) while queue: r, c, steps = queue.popleft() if (r, c) == (target[0], target[1]): return steps for dr, dc in directions: new_r, new_c = r + dr, c + dc if is_valid_move(grid, n, m, new_r, new_c) and (new_r, new_c) not in visited: visited.add((new_r, new_c)) queue.append((new_r, new_c, steps + 1)) return -1 def solve_game(n, m, k, grid, characters): results = [] for char in characters: r1, c1, r2, c2 = char r1, c1, r2, c2 = r1 - 1, c1 - 1, r2 - 1, c2 - 1 # Convert to 0-based indexing if (r1, c1) == (r2, c2): results.append(0) continue min_steps = bfs(grid, n, m, (r1, c1), (r2, c2)) if min_steps == -1: return \\"NO\\" results.append(min_steps) return \\"YESn\\" + \\" \\".join(map(str, results))"},{"question":"Given an array of integers A of length N, and an integer K, determine whether or not there are two distinct indices i and j in the array such that A[i] + A[j] = K. If such a pair exists, return \\"YES\\". Otherwise, return \\"NO\\". Constraints * 2 leq N leq 100 * -1000 leq A[i] leq 1000 * -2000 leq K leq 2000 * All values in input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print \\"YES\\" if there are two distinct indices i and j in the array such that A[i] + A[j] = K. Otherwise, print \\"NO\\". Examples Input 5 10 1 2 3 4 6 Output YES Input 4 8 1 2 3 4 Output NO Input 6 -3 -1 -2 -3 0 1 2 Output YES","solution":"def has_pair_with_sum(A, K): Determines if there are two distinct indices i and j in the array A such that A[i] + A[j] = K. Parameters: A (list of int): The list of integers. K (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for number in A: if K - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Given an array of positive integers, we are interested in finding a sub-array whose sum is closest to, but not exceeding, a specified integer `S`. A sub-array can be any contiguous part of the array. You need to write a program that accepts an array of integers and the integer `S` as inputs and outputs the sub-array whose sum is closest to and not greater than `S`, alongside the sum of the sub-array. # Input - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `S` (1 ≤ S ≤ 10^9) — the number of elements in the array and the specified integer `S`. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^5) — the array elements. # Output - Output the starting and ending indices (1-based) of the sub-array whose sum is closest to and does not exceed `S`. - If there are multiple sub-arrays with the same sum closest to `S`, output the one with the smallest starting index. If there are still ties, output the one with the smallest ending index. - If no such sub-array exists, output `0 0`. # Examples Input ``` 8 15 1 2 3 4 5 6 7 8 ``` Output ``` 1 5 ``` Input ``` 5 5 5 1 2 3 4 ``` Output ``` 1 1 ``` Input ``` 9 100 10 20 30 40 50 60 70 80 90 100 ``` Output ``` 1 9 ``` # Note In the first example, the sub-array from index 1 to 5 has the sum `1+2+3+4+5 = 15`, which is exactly `S`, and thus the closest possible to `S`. In the second example, the only possible sub-array whose sum is `5` (exactly `S`) is the sub-array consisting of the first element only. In the third example, the entire array is considered as its sum exceeds `100`. Write a function, or complete the script, to fulfill the problem\'s requirements.","solution":"def find_closest_subarray(n, S, arr): Returns the 1-based start and end indices of the sub-array whose sum is closest to and does not exceed S. If no such sub-array exists, returns (0, 0). current_sum = 0 start = 0 closest_sum = 0 result = (0, 0) for end in range(n): current_sum += arr[end] while current_sum > S and start <= end: current_sum -= arr[start] start += 1 if closest_sum < current_sum <= S: closest_sum = current_sum result = (start + 1, end + 1) return result"},{"question":"You are given an undirected graph with N nodes and M edges. The nodes are numbered from 1 to N. Each edge is defined by a pair of nodes (u, v) and a weight w (1 ≤ w ≤ 10^6). You need to answer Q queries. There are 2 types of queries: 1. What is the shortest path distance from node X to node Y? 2. Add a new edge (u, v) with weight w to the graph. Input The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000), the number of nodes and edges in the graph. Then M lines follow, each containing three integers u, v, w representing an edge between nodes u and v with weight w. The next line contains a single integer Q (1 ≤ Q ≤ 1000), the number of queries. Then Q queries follow, one per line: * Queries of type 1 have the format: 1 X Y (1 ≤ X, Y ≤ N), where X and Y are nodes in the graph. * Queries of type 2 have the format: 2 u v w (1 ≤ u, v ≤ N; 1 ≤ w ≤ 10^6), where u and v are nodes and w is the weight of the edge. Output For each query of type 1, print the shortest path distance between the nodes X and Y. If there is no path between the two nodes, print -1. Examples Input 5 5 1 2 4 2 3 2 3 4 3 4 5 1 5 1 7 3 1 1 3 2 2 5 2 1 1 3 Output 6 6 Note In the first test case, the shortest path from node 1 to node 3 is 6 (1-2-3). After adding the edge (2, 5) with weight 2, the graph becomes: 1 -- 4 --> 2 -- 2 --> 5 | / <-- 7 -- 3 -- 3 --> 4 All nodes in the graph eventually have a path to another. In the next query, the shortest path from node 1 to node 3 is still 6 (1-2-3).","solution":"import heapq class Graph: def __init__(self, n): self.n = n self.adj = [[] for _ in range(n)] self.dist = [[float(\'inf\')] * n for _ in range(n)] self.updated = False def add_edge(self, u, v, w): self.adj[u-1].append((v-1, w)) self.adj[v-1].append((u-1, w)) self.updated = False def shortest_path(self, x, y): if not self.updated: self._update_all_pairs_shortest_path() return self.dist[x-1][y-1] if self.dist[x-1][y-1] != float(\'inf\') else -1 def _update_all_pairs_shortest_path(self): for i in range(self.n): self._dijkstra(i) self.updated = True def _dijkstra(self, src): dist = [float(\'inf\')] * self.n dist[src] = 0 pq = [(0, src)] while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, w in self.adj[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heapq.heappush(pq, (dist[v], v)) self.dist[src] = dist def process_graph_operations(n, edges, queries): graph = Graph(n) for u, v, w in edges: graph.add_edge(u, v, w) results = [] for query in queries: if query[0] == 1: _, x, y = query results.append(graph.shortest_path(x, y)) elif query[0] == 2: _, u, v, w = query graph.add_edge(u, v, w) return results"},{"question":"You are given a list of integers. A sublist is defined as any consecutive portion of the list. We say a sublist is harmonious if the difference between its maximum and minimum values is exactly one. Your task is to determine the length of the longest harmonious sublist in the given list. Constraints * 1 ≤ n ≤ 10^5, where n is the length of the list. * -10^9 ≤ a_i ≤ 10^9, where a_i is the ith integer in the list. Input The input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Output Output the length of the longest harmonious sublist. If there is no such sublist, output 0. Examples Input 6 1 2 2 1 3 4 Output 4 Input 8 1 1 1 1 1 1 1 1 Output 0","solution":"def findLHS(nums): Returns the length of the longest harmonious sublist such that the difference between its maximum and minimum values is exactly one. num_count = {} for num in nums: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 longest_harmonious = 0 for num in num_count: if num + 1 in num_count: longest_harmonious = max(longest_harmonious, num_count[num] + num_count[num + 1]) return longest_harmonious"},{"question":"Given an array of integers, you are to find a pair of integers (i, j) such that 0 <= i < j < N, and the difference `(array[j] - array[i])` is minimized. If there are multiple pairs with the same minimum difference, return the pair with the smallest index i. If there are still multiple pairs, return the pair with the smallest index j. Constraints: * 2 <= N <= 100,000 * -10^9 <= array[i] <= 10^9 Input: Input is given from Standard Input in the following format: ``` N array_1 array_2 ... array_N ``` Output: Print the indices i and j (0-based) of the pair with minimum difference. Examples: Input: ``` 5 1 3 4 8 16 ``` Output: ``` 1 2 ``` Input: ``` 6 10 20 30 10 40 50 ``` Output: ``` 0 3 ```","solution":"def find_minimum_difference_pair(arr): Finds and returns the pair of indices (i, j) such that the difference (arr[j] - arr[i]) is minimized with the conditions 0 <= i < j < N. If multiple pairs have the same difference, the pair with the smallest i is returned, and if there are still multiple pairs, the pair with the smallest j is returned. Parameters: arr (list): List of integers Returns: tuple: Pair of indices (i, j) N = len(arr) if N < 2: return None # Create a list of (value, index) tuples and sort it sorted_array = sorted((val, idx) for idx, val in enumerate(arr)) min_diff = float(\'inf\') min_pair = (None, None) # Find the pair with the minimum difference for k in range(1, N): val1, idx1 = sorted_array[k-1] val2, idx2 = sorted_array[k] diff = val2 - val1 if diff < min_diff: min_diff = diff min_pair = (idx1, idx2) elif diff == min_diff: if idx1 < min_pair[0]: min_pair = (idx1, idx2) elif idx1 == min_pair[0] and idx2 < min_pair[1]: min_pair = (idx1, idx2) i, j = min_pair return (i, j) if i < j else (j, i) # Function to handle input and output for the given problem def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) array = list(map(int, data[1:N+1])) i, j = find_minimum_difference_pair(array) print(i, j) # Uncomment below line to run main when executing the script # if __name__ == \'__main__\': # main()"},{"question":"A sequence of length N is defined to be \\"pleasant\\" if the sum of the absolute differences between consecutive elements is less than or equal to a given integer S. Determine whether it is possible to reorder the given sequence to make it \\"pleasant\\". Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^9 * 0 leq S leq 10^18 * All input values are integers. Input Input is given from Standard Input in the following format: N S A_1 A_2 ... A_N Output If it is possible to reorder the sequence to make it \\"pleasant\\", print `POSSIBLE`; otherwise, print `IMPOSSIBLE`. Examples Input 4 5 1 2 3 4 Output POSSIBLE Input 5 3 10 10 10 10 10 Output POSSIBLE Input 3 1 1 10 100 Output IMPOSSIBLE Input 6 15 5 2 9 12 6 1 Output POSSIBLE","solution":"def is_pleasant_sequence_possible(N, S, A): Determine whether it is possible to reorder the sequence to make it \\"pleasant\\". A sequence of length N is defined to be \\"pleasant\\" if the sum of the absolute differences between consecutive elements is less than or equal to S. Parameters: N : int : the number of elements in the sequence S : int : the maximum allowed sum of absolute differences A : list of int : the sequence of integers Returns: str : \\"POSSIBLE\\" if reordering the sequence can make it \\"pleasant\\", otherwise \\"IMPOSSIBLE\\" A.sort() total_diff = sum(abs(A[i] - A[i - 1]) for i in range(1, N)) if total_diff <= S: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" # Input handling if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) S = int(data[1]) A = list(map(int, data[2:])) print(is_pleasant_sequence_possible(N, S, A))"},{"question":"A group of tourists wants to visit several landmarks located on a circular route. The circular route consists of `n` landmarks arranged in a clockwise direction, numbered from `1` to `n`. There are also some paths directly connecting specific pairs of landmarks with known distances. The tourists want to find the shortest possible distance to travel from their starting landmark around the circular route to their destination landmark. The tourists can travel either clockwise or counter-clockwise, whichever is shorter. Write a program that calculates the shortest distance between a pair of landmarks. # Input The input contains multiple test cases. The first line of the input contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The following `t` test cases follow. Each test case consists of: - The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of landmarks. - The second line contains `n` integers `d_i` (1 ≤ d_i ≤ 1000) — the distances between consecutive landmarks in a clockwise direction. `d_i` is the distance from the `i`-th landmark to the `(i+1)`-th landmark, and `d_n` is the distance from the `n`-th landmark back to the `1`-st landmark. - The third line contains two integers `start` and `end` (1 ≤ start, end ≤ n) — their starting and destination points. # Output For each test case, output a single integer — the shortest distance between the two specified landmarks. # Example Input: ``` 3 5 2 1 5 4 3 1 3 4 5 1 3 2 2 4 6 1 1 1 1 1 1 3 6 ``` Output: ``` 3 4 3 ``` # Explanation - For the first test case, there are two possible routes to get from landmark `1` to landmark `3`: - Clockwise: 2 + 1 = 3 - Counter-clockwise: 3 + 4 + 5 = 12 The shortest path has a distance of 3. - For the second test case: - Clockwise: 1 + 3 = 4 - Counter-clockwise: 2 + 5 = 7 The shortest path has a distance of 4. - For the third case: - Clockwise: 1 + 1 + 1 = 3 - Counter-clockwise: 1 + 1 + 1 = 3 Both paths are of equal distance, so the shortest path is 3. Implement the program to solve the given problem.","solution":"def shortest_distance_between_landmarks(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] distances = case[\'distances\'] start = case[\'start\'] end = case[\'end\'] if start > end: start, end = end, start clockwise_distance = sum(distances[start-1:end-1]) counter_clockwise_distance = sum(distances[0:start-1]) + sum(distances[end-1:]) results.append(min(clockwise_distance, counter_clockwise_distance)) return results"},{"question":"Write a program to check whether a given maze has a valid path from the top-left corner to the bottom-right corner. The maze is represented as a grid of cells where each cell can either be an open space or an obstacle. You can move from a cell to its adjacent cell (up, down, left, or right) if that cell is an open space. The objective is to determine if there exists a path from the top-left corner to the bottom-right corner. Constraints: * 1 ≤ H ≤ 10 * 1 ≤ W ≤ 10 * H x W ≤ 100 Input: The input consists of the following format: H W F11 F12 ... F1W F21 F22 ... F2W ... FH1 FH2 ... FHW Fij is either \'.\' or \'#\', and each has the following meaning: (1 ≤ i ≤ H, 1 ≤ j ≤ W) * \'.\': Open space * \'#\': Obstacle Output: Print \\"yes\\" if there is a valid path from the top-left corner to the bottom-right corner of the maze. Otherwise, print \\"no\\". Examples: Input: 3 3 ..# .#. ... Output: yes Input: 2 2 .. Output: no Input: 5 5 ..... .#. .#.#. .#.#. ...#. Output: yes","solution":"def is_valid_path(maze): H, W = len(maze), len(maze[0]) visited = [[False for _ in range(W)] for _ in range(H)] def is_valid(x, y): return 0 <= x < H and 0 <= y < W and maze[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == H-1 and y == W-1: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True return False return \\"yes\\" if maze[0][0] == \'.\' and dfs(0, 0) else \\"no\\""},{"question":"Write a function `find_smallest_cycle` that finds the smallest positive integer cycle in a directed graph represented as an adjacency list. A cycle in a graph is a path that starts and ends at the same vertex without repeating any edges. # Function Signature ```python def find_smallest_cycle(graph: dict) -> int: pass ``` # Input - `graph` (dict): A dictionary where keys are nodes and values are lists of nodes to which there is a directed edge. # Output - The length of the smallest cycle in the graph. If there is no cycle, return -1. # Example ```python graph = { 1: [2], 2: [3], 3: [1, 4], 4: [5], 5: [6], 6: [4] } print(find_smallest_cycle(graph)) # Output: 3 ``` # Explanation: - The cycles in the given graph are `1 -> 2 -> 3 -> 1` and `4 -> 5 -> 6 -> 4`. - The lengths of these cycles are 3 and 3 respectively. - Since both are of the same length, the smallest length cycle is 3. # Constraints: - The graph contains up to 500 nodes. - Each node has at most 10 edges.","solution":"def find_smallest_cycle(graph: dict) -> int: from collections import deque def bfs(start): queue = deque([(start, 0)]) visited = {start: 0} while queue: node, depth = queue.popleft() for neighbor in graph.get(node, []): if neighbor == start: return depth + 1 if neighbor not in visited: visited[neighbor] = depth + 1 queue.append((neighbor, depth + 1)) elif visited[neighbor] >= visited[node] and neighbor in queue: return depth + 1 + (visited[node] - visited[neighbor]) return float(\'inf\') smallest_cycle = float(\'inf\') for node in graph: cycle_length = bfs(node) smallest_cycle = min(smallest_cycle, cycle_length) return smallest_cycle if smallest_cycle != float(\'inf\') else -1"},{"question":"Given a set of points on a two-dimensional plane, determine if they can form a convex polygon. Constraints: - 3 leq n leq 1,000 - The points are unique. - -10,000 leq x_i, y_i leq 10,000 (coordinates of the points) Input The input is given in the following format. n x_1; y_1 x_2; y_2 : x_n; y_n In the first line, the number of points n is given. The following n lines contain the coordinates of the points on the plane. Output Print \\"YES\\" if the points can form a convex polygon. Otherwise, print \\"NO\\". Note: - A polygon is convex if all its interior angles are less than 180 degrees. - The order in which the points are given does not necessarily reflect the potential order in the polygon. You may need to reorder the points to form the convex polygon. Example Input 5 0 0 1 1 1 0 0 1 2 2 Output NO Input 4 0 0 1 1 1 0 0 1 Output YES","solution":"def can_form_convex_polygon(points): def cross_product_orientation(p, q, r): # Compute the orientation of the triplet (p, q, r) # >0 if counterclockwise, <0 if clockwise, 0 if collinear return (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0]) # Get the number of points n = len(points) if n < 3: return \\"NO\\" # Sort points by their coordinates in lexicographical order points = sorted(points) # Build the lower hull lower_hull = [] for p in points: while len(lower_hull) >= 2 and cross_product_orientation(lower_hull[-2], lower_hull[-1], p) <= 0: lower_hull.pop() lower_hull.append(p) # Build the upper hull upper_hull = [] for p in reversed(points): while len(upper_hull) >= 2 and cross_product_orientation(upper_hull[-2], upper_hull[-1], p) <= 0: upper_hull.pop() upper_hull.append(p) # Remove the last point of each half because it\'s duplicated at the beginning of the other half del lower_hull[-1] del upper_hull[-1] # The points forming the convex hull if combined upper and lower hull convex_hull = lower_hull + upper_hull if len(convex_hull) != n: return \\"NO\\" # Check if all points in the convex hull are given if all(point in convex_hull for point in points): return \\"YES\\" else: return \\"NO\\" # Read input def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) points = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] print(can_form_convex_polygon(points)) # Uncomment the following lines to test with given input format # if __name__ == \\"__main__\\": # main()"},{"question":"You are given an array of n integers representing the scores of students in an exam. Your task is to allocate these students into k groups such that the maximum difference between scores within any group is minimized. Input: - The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of students and the number of groups respectively. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i represents the score of the i-th student. Output: - Print an integer — the minimized maximum difference between scores within any group. Example: Input: 5 2 10 20 30 40 50 Output: 20 Explanation: Divide the students into groups [10, 20, 30] and [40, 50]. The maximum difference within the first group is 20 and within the second group is 10. Hence, the minimized maximum difference is 20.","solution":"def minimize_max_difference(n, k, scores): Function to find the minimized maximum difference between scores within any group. n: int - the number of students k: int - the number of groups scores: list of int - the scores of the students Return the minimized maximum difference between scores within any group. scores.sort() def can_divide_with_max_diff(max_diff): groups = 1 min_score = scores[0] for score in scores: if score - min_score > max_diff: groups += 1 min_score = score if groups > k: return False return True low, high = 0, scores[-1] - scores[0] result = high while low <= high: mid = (low + high) // 2 if can_divide_with_max_diff(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You have been hired by an education software company to create a quiz application where users can add new quiz questions. To ensure the users provide valid inputs, you need to create a function that checks the format of the questions and answers. Each question consists of a question text followed by a list of multiple-choice answers, one of which is correct. Write a program that reads multiple quiz questions from the input and validates each question. A valid question has at least one answer choice, and exactly one answer is marked as correct. Input The input consists of several lines where each line represents a quiz question and its answer choices in the following format: <question>? <answer_1>(<correct_flag>), <answer_2>(<correct_flag>), ... Here, `<question>` is the text of the question, and `<answer_i>` is the text of the i-th answer choice. `<correct_flag>` is either \\"correct\\" or \\"incorrect\\", indicating whether the answer is the correct one. Output For each question in the input, the program should output whether the question is valid. - If the question is valid, output \\"Valid Question\\". - If the question is invalid, output \\"Invalid Question\\". Example Input What is the capital of France? Paris(correct), London(incorrect), Berlin(incorrect) Who wrote \'Hamlet\'? Shakespeare(correct), Tolstoy(incorrect) What is 2 + 2? 3(incorrect), 4(correct), 5(incorrect), 6(incorrect) Output Valid Question Valid Question Valid Question","solution":"def validate_quiz_question(question_line): Validates a quiz question. Args: question_line (str): A single line representing a quiz question and its answers. Returns: str: \\"Valid Question\\" if the question is valid, \\"Invalid Question\\" otherwise. if not question_line: return \\"Invalid Question\\" question_parts = question_line.split(\'?\') if len(question_parts) != 2: return \\"Invalid Question\\" question_text = question_parts[0].strip() answers = question_parts[1].strip().split(\',\') if not question_text or not answers: return \\"Invalid Question\\" correct_count = 0 for answer in answers: answer_parts = answer.rsplit(\'(\', 1) if len(answer_parts) != 2: return \\"Invalid Question\\" answer_text = answer_parts[0].strip() correct_flag = answer_parts[1].replace(\')\', \'\').strip() if not answer_text or correct_flag not in [\'correct\', \'incorrect\']: return \\"Invalid Question\\" if correct_flag == \'correct\': correct_count += 1 if correct_count != 1: return \\"Invalid Question\\" return \\"Valid Question\\" def validate_quiz_questions(input_lines): Validates a list of quiz questions. Args: input_lines (list of str): A list of strings where each string is a quiz question. Returns: list of str: A list of validation results for each quiz question. return [validate_quiz_question(line) for line in input_lines]"},{"question":"It is the annual competition of the strategic game \\"City Invasion\\". The game consists of a row of cities numbered from 1 to n, and each city has a certain initial number of troops. During the course of the game, each player can perform a series of operations to rearrange their troops to maximize their strategic advantage. Each operation consists of moving a single troop from one city to another city, and you can perform up to m such operations in total. The objective is to ensure that after all movements, no two adjacent cities have more troops than their starting number. Additionally, no city should end up with more troops than it initially had. You are given the initial number of troops in each city. Your task is to determine whether it is possible to rearrange the troops using at most m operations to meet the conditions. If possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^9). The next line contains n integers T1, T2, ..., Tn (0 ≤ Ti ≤ 10^5) where Ti denotes the number of troops in the i-th city. Output Print \\"YES\\" if it is possible to rearrange the troops according to the rules, otherwise print \\"NO\\". Examples Input 5 3 3 1 2 4 3 Output YES Input 3 1 2 3 4 Output NO Note In the first sample, it is possible to rearrange the troops as follows: - Move one troop from city 1 to city 2, resulting in 2 2 2 4 3. - Move one troop from city 4 to city 3, resulting in 2 2 3 3 3. - Move one troop from city 5 to city 4, resulting in 2 2 3 4 2. In the second sample, no feasible rearrangement allows each adjacent pair of cities to have no more troops than their starting values with only one move.","solution":"def can_rearrange_troops(n, m, troops): max_troops = max(troops) required_operations = 0 # Compute how many operations would be needed to achieve a non-increasing order for i in range(n - 1): if troops[i] < troops[i + 1]: required_operations += troops[i + 1] - troops[i] # Check if the required operations are within limits and validate max troops condition return \\"YES\\" if required_operations <= m and max(troops) == max_troops else \\"NO\\""},{"question":"Given the following sample questions, here\'s a new question following the guidelines provided. --- problem You are given an array of one or more integers. Your task is to find the product of the number of all unique non-empty subarrays present in the given array. A subarray is defined as a contiguous segment of the array. Input format The input is given in the following format: N A_1 A_2 ... A_N * The first line contains an integer N (1 ≤ N ≤ 100,000), the length of the array. * The second line contains N space-separated integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 1,000,000), representing the elements of the array. Output format Output the product of the number of all unique subarrays present in the given array. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ A_i ≤ 1,000,000 Note: Two subarrays are considered unique if they start or end at different positions, even if they contain the same set of elements. Input example 5 2 1 2 3 2 Output example 15 Example Explanation: In the given example, there are 15 unique non-empty subarrays: [2], [1], [2], [3], [2], [2, 1], [1, 2], [2, 3], [3, 2], [2, 1, 2], [1, 2, 3], [2, 3, 2], [2, 1, 2, 3], [1, 2, 3, 2], [2, 1, 2, 3, 2] The product is the length of this list (15). ---","solution":"def unique_subarrays_count(n, array): Returns the count of all unique non-empty subarrays in the given array. count = 0 for i in range(n): for j in range(i, n): count += 1 return count"},{"question":"Bob\'s second task in X corporation is to secure the data transmission between the servers using encryption. He needs to implement a basic encryption algorithm that transforms a given input string into an encrypted version. The encryption algorithm is designed to shift each alphabetical character by a certain number of positions in the alphabet, wrapping around if necessary. For this task, Bob will receive two inputs: a string to encrypt and an integer shift value. # Input The input consists of two lines: - The first line contains the string `s` (1 ≤ length of s ≤ 10^5), which consists of lowercase English alphabetic characters. - The second line contains a single integer `k` (0 ≤ k ≤ 25), indicating the shift value. # Output Output a single line containing the encrypted string. # Examples Input ``` hello 3 ``` Output ``` khoor ``` Input ``` abcxyz 2 ``` Output ``` cdezab ``` # Explanation In the first example, each character in the string \\"hello\\" is shifted 3 positions forward in the alphabet: - \'h\' becomes \'k\' - \'e\' becomes \'h\' - \'l\' becomes \'o\' - \'l\' becomes \'o\' - \'o\' becomes \'r\' In the second example, each character in the string \\"abcxyz\\" is shifted 2 positions forward in the alphabet: - \'a\' becomes \'c\' - \'b\' becomes \'d\' - \'c\' becomes \'e\' - \'x\' becomes \'z\' - \'y\' becomes \'a\' - \'z\' becomes \'b\'","solution":"def encrypt_string(s, k): Encrypts the given string by shifting each character by k positions in the alphabet. Parameters: s (str): the string to encrypt, contains only lowercase alphabetic characters. k (int): the shift value (0 ≤ k ≤ 25). Returns: str: the encrypted string. encrypted = [] for char in s: shifted_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted.append(shifted_char) return \'\'.join(encrypted)"},{"question":"Modifying Array Based on Queries You are given an array of integers and a sequence of queries. Each query contains three integers: `L`, `R`, and `X`. For each query, you need to add `X` to all elements of the array between indices `L` and `R` (inclusive). Write a function that performs the given operations on the array and returns the modified array. **Function Signature:** ```python def modify_array(arr: List[int], queries: List[Tuple[int, int, int]]) -> List[int]: pass ``` **Input Format:** - `arr` : List of integers (with size at least 1 and at most 10^5). - `queries` : List of tuples, where each tuple contains three integers `(L, R, X)`. **Output Format:** Return the array after all queries have been processed. **Constraints:** - 1 ≤ len(arr) ≤ 10^5 - Number of queries ≤ 10^5 - 1 ≤ L ≤ R ≤ len(arr) - -10^9 ≤ X ≤ 10^9 - -10^9 ≤ arr[i] ≤ 10^9 **Example:** **Input:** ```python arr = [1, 2, 3, 4, 5] queries = [(1, 3, 2), (2, 4, -1)] ``` **Output:** ```python [3, 3, 4, 3, 5] ``` **Explanation:** - First query adds 2 to elements from index 1 to 3. The array becomes `[3, 4, 5, 4, 5]`. - Second query adds -1 to elements from index 2 to 4. The array becomes `[3, 3, 4, 3, 5]`.","solution":"from typing import List, Tuple def modify_array(arr: List[int], queries: List[Tuple[int, int, int]]) -> List[int]: Modifies the array based on queries. Each query (L, R, X) means adding X to each element from index L to R inclusive. for L, R, X in queries: for i in range(L - 1, R): arr[i] += X return arr"},{"question":"You are tasked with managing the DataTransferGrid of a corporation. The grid is composed of N DataNodes connected by M communication lines. Each communication line has an associated cost for data transfer. Your job is to ensure that data can be transferred between any two DataNodes in the grid while minimizing the overall data transfer cost. Each DataNode must be able to communicate with every other DataNode either directly or indirectly through other DataNodes. The goal is to determine the minimum cost to provide this capability. Input The first line contains two integers N and M (2 ≤ N ≤ 10^4, 1 ≤ M ≤ 10^5), the number of DataNodes and the number of communication lines, respectively. The next M lines each contain three integers U, V, and W (0 ≤ U ≠ V < N, 1 ≤ W ≤ 1000), which describe a communication line connecting DataNode U and DataNode V with a cost W. Output A single integer, the minimum cost to ensure that all DataNodes can communicate with each other. Example Input 5 7 0 1 10 0 4 20 1 2 30 1 3 40 2 3 50 3 4 60 1 4 70 Output 130 Note To ensure that all DataNodes can communicate: - Choose lines 0-1 (10), 1-2 (30), 1-3 (40), and 0-4 (20). - Total cost: 10 + 30 + 40 + 20 = 100.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_connect_data_nodes(N, M, connections): connections.sort(key=lambda x: x[2]) parent = [i for i in range(N)] rank = [0] * N min_cost = 0 edges_used = 0 for u, v, w in connections: if find(parent, u) != find(parent, v): union(parent, rank, u, v) min_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return min_cost else: return -1 # Not possible to connect all DataNodes # Example usage input_data = [ (5, 7), (0, 1, 10), (0, 4, 20), (1, 2, 30), (1, 3, 40), (2, 3, 50), (3, 4, 60), (1, 4, 70) ] N, M = input_data[0] connections = input_data[1:] print(minimum_cost_to_connect_data_nodes(N, M, connections)) # Output: 100"},{"question":"A music streaming service wants to optimize its recommendation system. The system analyzes a user\'s playlist and suggests new songs based on genre preferences. Each song in the playlist has a genre assigned to it, represented as an integer. The playlist can have multiple songs of the same genre. Your task is to develop a function that identifies the most frequent genres in a playlist and returns them in a sorted list. The function should take two inputs: 1. An integer n, which represents the number of genres. 2. A list of integers, playlist, which represents the genres of the songs in a user\'s playlist. The function should return a list of integers that represent the most frequent genres in descending order of their frequency. If two genres have the same frequency, the genre with the smaller integer value comes first. Input The first line contains an integer n (1 ≤ n ≤ 20). The second line contains a list of integers, playlist, representing the genres in the user\'s playlist. The length of the playlist will be between 1 and 1000. Output Print a list of integers representing the most frequent genres in descending order of their frequency. If two genres have the same frequency, the genre with the smaller integer value appears first. Examples Input 5 [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] Output [4, 3, 2, 1] Input 3 [1, 1, 2, 2, 3, 3] Output [1, 2, 3] Input 4 [4, 4, 4, 2, 2, 1] Output [4, 2, 1]","solution":"from collections import Counter def most_frequent_genres(n, playlist): Returns the most frequent genres in descending order of their frequency. If two genres have the same frequency, the genre with the smaller integer value comes first. Parameters: n (int): The number of genres. playlist (list of int): The genres of the songs in a user\'s playlist. Returns: List[int]: A list of integers representing the most frequent genres in descending order. genre_count = Counter(playlist) sorted_genres = sorted(genre_count.items(), key=lambda x: (-x[1], x[0])) return [genre for genre, count in sorted_genres]"},{"question":"A software company needs a way to manage their employees\' workflows more efficiently. They have a system that keeps track of dependencies between various tasks. Each task must be completed only after all its dependent tasks are done. Your task is to determine the sequence in which the tasks can be completed. If there are multiple valid sequences, find the lexicographically smallest one. Input The input is to be read from the standard input of your program. It begins with an integer \'t\', the number of test cases (1 ≤ t ≤ 100), followed by \'t\' test cases. Each test case starts with a line containing two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000) – the number of tasks and the number of dependencies, respectively. The next \'m\' lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting that task u must be completed before task v. Output For each test case, output a line with the lexicographically smallest valid sequence of task completions. If it\'s not possible to complete all tasks following the dependencies, output \\"Impossible\\". Example Sample input: 2 5 4 1 2 1 3 3 4 2 4 4 2 1 2 2 3 Sample output: 1 2 3 4 5 Impossible Explanation In the first test case, one valid sequence is 1, 2, 3, 4, 5. Another valid sequence might include 1, 3, 2, 4, etc., but the lexicographically smallest is 1, 2, 3, 4, 5. In the second test case, it is impossible to complete all tasks because task 1 must be completed before task 2 and task 2 before task 3, but no tasks fulfill these conditions.","solution":"import heapq import sys input = sys.stdin.read def task_order(t, test_cases): result = [] for i in range(t): n, m = test_cases[i][0] dependencies = test_cases[i][1] # Initialize graph and in-degree counts graph = {j: [] for j in range(1, n+1)} in_degree = {j: 0 for j in range(1, n+1)} for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Use a min-heap to always pick the lexicographically smallest task next min_heap = [] for j in range(1, n+1): if in_degree[j] == 0: heapq.heappush(min_heap, j) task_sequence = [] while min_heap: current = heapq.heappop(min_heap) task_sequence.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: heapq.heappush(min_heap, neighbor) # Check if we have a valid sequence for all tasks if len(task_sequence) == n: result.append(\\" \\".join(map(str, task_sequence))) else: result.append(\\"Impossible\\") return result # To process the input in the format described in the prompt def main(): input_data = input().strip().split(\'n\') t = int(input_data[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_data[index].split()) index += 1 dependencies = [] for _ in range(m): u, v = map(int, input_data[index].split()) index += 1 dependencies.append((u, v)) test_cases.append(((n, m), dependencies)) results = task_order(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of n positive integers. Your task is to find the smallest prime number greater than the maximum number in the array. If the maximum number in the array is a prime, find the next prime number after it as well. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array. The second line of each test case contains n integers — the elements of the array (1 ≤ a_i ≤ 10^9). Output For each test case, output a single integer — the smallest prime number greater than the maximum number in the array. Example Input 3 3 1 2 3 4 11 15 7 9 2 1000000000 999999937 Output 5 17 1000000007 Note In the first test case, the maximum number in the array is 3, and the next prime number is 5. In the second test case, the maximum number in the array is 15, and the next prime number is 17. In the third test case, the maximum number in the array is 1000000000, and the next prime number is 1000000007.","solution":"def is_prime(x): Helper function to check if a number is prime. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def next_prime(n): Function to find the next prime number greater than a given number n. if n <= 1: return 2 prime = n found = False while not found: prime += 1 if is_prime(prime): found = True return prime def smallest_prime_greater_than_max(arr): Function to find the smallest prime number greater than the maximum number in the array. max_num = max(arr) return next_prime(max_num) def solve(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(smallest_prime_greater_than_max(arr)) return results"},{"question":"problem You are participating in a treasure hunt game that involves collecting gold coins hidden in a grid-like map. The map is represented as an N x N matrix where each cell contains an integer that indicates the number of gold coins in that cell. You need to calculate the maximum number of gold coins you can collect starting from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1). You can only move to the right or down at any point in time. You cannot move diagonally or backwards. Create a program to compute the maximum number of gold coins that can be collected. input The input consists of multiple datasets. Each dataset is given in the following format. On the first line, the integer N (1 ≤ N ≤ 1000) is provided, which represents the size of the grid. The next N lines each contain N integers representing the gold coins Gij in the grid cell. When N = 0, the input is completed. The number of datasets does not exceed 10. output Output the maximum number of gold coins you can collect for each dataset on one line. Examples Input 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 0 Output 12 4 Input None Output None","solution":"def max_gold_coins(matrix): Given a grid-like map represented as an N x N matrix where each cell contains an integer that indicates the number of gold coins in that cell. This function calculates the maximum number of gold coins that can be collected starting from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1). You can only move to the right or down at any point in time. N = len(matrix) if N == 0: return 0 # Initialize DP table dp = [[0] * N for _ in range(N)] dp[0][0] = matrix[0][0] # Fill the first row (can only move from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (can only move from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[N-1][N-1] def process_input(input_string): Processes input string and calculates the maximum number of gold coins for each dataset. Returns a list of results corresponding to each dataset. input_lines = input_string.strip().split(\\"n\\") index = 0 results = [] while index < len(input_lines): N = int(input_lines[index]) if N == 0: break matrix = [] for i in range(1, N + 1): matrix.append(list(map(int, input_lines[index + i].split()))) results.append(max_gold_coins(matrix)) index += N + 1 return results def main(input_string): results = process_input(input_string) for result in results: print(result)"},{"question":"Maxine is designing a custom electronic circuit for her latest invention. The circuit is composed of several electrical components connected by wires. Each component is represented by a unique integer ID. Some pairs of components have direct connections (wires) between them, which is represented as a list of pairs (u, v) where u and v are IDs of two directly connected components. Maxine needs to ensure that her circuit does not have any short circuits, which would occur if there is a cycle in the connections. Your task is to help Maxine determine if her circuit design is free from any cycles (short circuits). Write a program that checks if the given network of connections is acyclic. Input: - The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. - For each test case: - The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 2000), where N is the number of components and M is the number of direct connections. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing a direct connection between components u and v. Output: - For each test case, print \\"Acyclic\\" if the circuit has no cycles, otherwise print \\"Cyclic\\". Example: Input: 2 3 3 1 2 2 3 3 1 4 2 1 2 3 4 Output: Cyclic Acyclic","solution":"def is_acyclic(n, edges): from collections import defaultdict, deque graph = defaultdict(list) indegree = defaultdict(int) for u, v in edges: graph[u].append(v) indegree[v] += 1 if u not in indegree: indegree[u] = 0 queue = deque([node for node in indegree if indegree[node] == 0]) visited = 0 while queue: node = queue.popleft() visited += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return visited == n def check_circuits(test_cases): results = [] for n, m, edges in test_cases: if is_acyclic(n, edges): results.append(\\"Acyclic\\") else: results.append(\\"Cyclic\\") return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] i = 1 for _ in range(T): N, M = map(int, input_lines[i].split()) edges = [] for j in range(M): u, v = map(int, input_lines[i + j + 1].split()) edges.append((u, v)) test_cases.append((N, M, edges)) i += M + 1 for result in check_circuits(test_cases): print(result)"},{"question":"A large corporation is organizing a hackathon where a number of teams will be competing on various problems. Each team has a certain number of members. Each member can belong to exactly one team. However, there\'s a twist: to create some interaction among teams, after initial registration, the organizer will allow the merging of some teams. More formally, consider an array `teams` where `teams[i]` represents the number of members in the i-th team. The corporation will then perform several operations of the following type: 1. Merge two teams: This operation will combine the members of two distinct teams into a single team. Given the initial state of the `teams` array and a list of merge operations, you are required to find the maximum possible number of members in any team after all merges are completed. Input - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each test case starts with an integer `n` (1 ≤ n ≤ 100) — the number of teams. - The next line contains `n` integers where the i-th integer `teams[i]` (1 ≤ teams[i] ≤ 1000) represents the initial number of members in the i-th team. - The next line contains an integer `m` (0 ≤ m ≤ n*(n-1)/2) — the number of merge operations. - The following `m` lines each contain two integers `a` and `b` (0 ≤ a, b < n, a ≠ b) denoting a merge operation where the members of team `a` and team `b` should be combined. Each pair (a, b) will be unique within each test case. Output For each test case, output the maximum number of members in any team after performing all the merge operations. Example Input 2 4 10 20 30 40 2 0 1 0 2 3 100 200 300 1 1 2 Output 60 500 Explanation In the first test case, the initial number of members in the teams are [10, 20, 30, 40]. After the first merge of teams 0 and 1, the number of members becomes [30, 30, 40]. Then, merging teams 0 and 2 results in [60, 30]. The maximum number of members in any team is 60. In the second test case, after merging teams 1 and 2, the number of members in the teams becomes [100, 500]. The maximum number of members in any team is 500.","solution":"def find_max_team_members(t, test_cases): results = [] for i in range(t): n, teams, m, merges = test_cases[i] # Initialize the teams list for a, b in merges: teams[a] += teams[b] teams[b] = 0 results.append(max(teams)) return results"},{"question":"Shooshuns have discovered a row of colored stones, where each stone is represented by an integer indicating its color. They want to make all stones the same color by performing the following operation any number of times: - Choose two adjacent stones and change the color of one of them to the color of the other. Given a row of n stones, determine the minimum number of operations required to make all stones the same color. If it\'s impossible to make all stones the same color, output -1. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of stones. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the colors of the stones. Output Print the minimum number of operations required to make all stones the same color. If it is impossible, print -1. Examples Input 5 1 2 2 3 2 Output 2 Input 3 1 2 3 Output -1 Note In the first test case, one way to make all stones the same color is: - Change the first stone (color 1) to color 2, resulting in the sequence [2, 2, 2, 3, 2] - Change the fourth stone (color 3) to color 2, resulting in the sequence [2, 2, 2, 2, 2] Thus, the answer equals two. In the second test case, it is impossible to make all stones the same color as there are three different colors and no adjacent pairs that can be merged to eventually result in a single color. Thus, the answer equals -1.","solution":"def min_operations(n, stones): Returns the minimum number of operations required to make all stones the same color. If it is impossible, returns -1. # If there is only one stone, no operations are needed if n == 1: return 0 color_counts = {} max_count = 0 for color in stones: if color not in color_counts: color_counts[color] = 0 color_counts[color] += 1 max_count = max(max_count, color_counts[color]) # If the max_count of any color is 1 and n > 2, then it is impossible to make them all same color if max_count == 1 and n > 2: return -1 # Minimum operations to make all stones the same color # Total stones (n) - max occurrence of the most frequent color (max_count) return n - max_count"},{"question":"Pam enjoys decorating her house with different shapes made of stars. She is particularly fond of drawing filled rectangles and has recently learned about writing Python programs to do so. She wants a program that will draw a solid rectangle of given width and height using asterisks (\'*\'). Given a width and a height, help Pam generate a filled rectangle of asterisks where each row has the given width and there are a total of rows equal to the given height. Input - The first line of input contains an integer width (1 <= width <= 50). - The second line of input contains an integer height (1 <= height <= 50). Output - Print a filled rectangle of asterisks where each row has the given width and there are a total of rows equal to the given height. Examples Input 5 3 Output ***** ***** ***** Input 2 2 Output ** **","solution":"def draw_filled_rectangle(width, height): Generates a filled rectangle of given width and height using asterisks (\'*\'). Args: width (int): The width of the rectangle. height (int): The height of the rectangle. Returns: str: A string representation of the filled rectangle. rectangle = [] for _ in range(height): rectangle.append(\'*\' * width) return \'n\'.join(rectangle)"},{"question":"A company has a hierarchy of employees, represented as a tree with the CEO as the root. Each employee is assigned a distinct ID from 1 to n, where the CEO has ID 1. The tree is represented as an array parent[], where parent[i] represents the parent ID of the employee with ID i. The CEO does not have a parent, so parent[1] = 0. There is an ongoing project that requires assigning project codes to each employee. These codes are integers that start from 1 and go up to n. The company wants to assign these project codes such that no employee has the same project code as their immediate manager. Your task is to write a program that assigns project codes to all employees following this rule. Input 1. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of employees. 2. The second line contains an array parent[] of size n, where parent[i] represents the parent ID of employee i. Output Output n integers — the project codes assigned to each employee from ID 1 to ID n in the order of their IDs. Example Input 6 0 1 1 2 2 3 Output 1 2 3 4 5 6 Input 4 0 1 1 3 Output 1 2 3 4 Note In the first example, the hierarchy is: 1 ├── 2 | ├── 4 | └── 5 └── 3 └── 6 An example valid output is assigning project codes 1 to 6 without any two employees having the same code as their manager or their manager\'s manager. In the second example, the hierarchy is: 1 ├── 2 └── 3 └── 4 An example valid output is assigning project codes 1 to 4 without any two employees having the same code as their manager.","solution":"def assign_project_codes(n, parent): Assigns project codes to employees such that no employee has the same project code as their immediate manager or their parent\'s parent. :param n: int - Number of employees :param parent: list of ints - List containing the parent ID of each employee starting from ID 1. :return: list of ints - List containing the assigned project codes from collections import defaultdict, deque project_codes = [0] * n children = defaultdict(list) for i in range(1, n): children[parent[i]].append(i + 1) queue = deque([1]) code = 1 while queue: current = queue.popleft() project_codes[current - 1] = code code += 1 for child in children[current]: queue.append(child) return project_codes"},{"question":"Marie loves palindromes. A palindrome is a string that reads the same forward and backward. As a birthday present, she wants to get a string that can be rearranged to become a palindrome. Unfortunately, her friend accidentally shuffled the letters in the string. You need to help her by checking if the given shuffled string can be rearranged to form a palindrome. Input: The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a single string of lowercase alphabets which Marie needs to check. Output: For each test case, print \\"YES\\" if the given string can be rearranged to form a palindrome. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of string ≤ 10^5 SAMPLE INPUT 3 aabbcc abc a SAMPLE OUTPUT YES NO YES","solution":"def can_form_palindrome(string): Returns \\"YES\\" if the given string can be rearranged to form a palindrome. Otherwise, returns \\"NO\\". from collections import Counter char_count = Counter(string) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): Processes a list of test cases. T: Number of test cases test_cases: List of strings to check Returns a list of results for each test case. return [can_form_palindrome(case) for case in test_cases]"},{"question":"Vera is a school teacher who likes to create creative math problems for her students. Recently, she\'s been obsessed with sequences, particularly palindromic sequences. A sequence is called palindromic if it reads the same backward as forward. She decided to create a problem for her students where they need to construct the longest possible palindromic subsequence from a given sequence of integers. A subsequence is derived by deleting some or no elements without changing the order of the remaining elements. However, she also knows that this might be a bit tricky for them, so she decided to provide them with some examples and explanations. You are given a sequence of integers. Write a program that determines the length of the longest palindromic subsequence. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The next line contains n integers a_i (1 ≤ a_i ≤ 1000), which represents the sequence of integers. Output Print a single integer - the length of the longest palindromic subsequence in the given sequence of integers. Examples Input 7 1 2 3 4 3 2 1 Output 7 Input 5 1 2 3 2 1 Output 5 Input 6 1 2 3 4 5 6 Output 1 Explanation In the first example, the whole sequence is a palindrome itself, so the longest palindromic subsequence has length 7. In the second example, the whole sequence is again a palindrome, so the longest palindromic subsequence has length 5. In the third example, every single element is a palindrome of length 1, so the longest palindromic subsequence that can be formed is of length 1.","solution":"def longest_palindromic_subsequence(sequence): n = len(sequence) dp = [[0]*n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the DP array for l in range(2, n+1): for i in range(n-l+1): j = i+l-1 if sequence[i] == sequence[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"Tom is working on a graph theory problem. He needs to design a simple network of cities connected by bidirectional roads. Each city must be reachable from every other city either directly or via other cities, i.e., the network should form a single connected component. Tom wants to identify the city\'s influence by determining how many pairs of cities are indirectly connected through exactly one other city. Your task is to help Tom calculate this. A pair of cities (A, B) are considered indirectly connected through exactly one other city C if: - There is no direct road between A and B. - There are direct roads between A and C and between B and C. Input The first line of input contains two integers n (2 ≤ n ≤ 500) and m (0 ≤ m ≤ n(n-1)/2) — the number of cities and the number of bidirectional roads, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing a road between cities u and v. Output Output a single integer — the number of valid pairs of cities (A, B) satisfying the described conditions. Example Input 4 3 1 2 2 3 3 4 Example Output 2 Note In the given example, we have the following roads: 1-2, 2-3, 3-4 - Cities 1 and 3 are indirectly connected through city 2. - Cities 2 and 4 are indirectly connected through city 3. The pairs (1, 3) and (2, 4) are valid.","solution":"def count_indirect_connections(n, m, roads): Count the number of pairs of cities that are indirectly connected through exactly one other city. from collections import defaultdict # Initialize adjacency list for the graph graph = defaultdict(set) for u, v in roads: graph[u].add(v) graph[v].add(u) # To keep track of how many valid pairs of cities we have indirect_pairs_count = 0 # Iterate over all possible pairs of cities (i, j) for i in range(1, n+1): for j in range(i+1, n+1): # Cities i and j should not have a direct road between them if j not in graph[i]: # Check if there exists a city k that connects both i and j indirectly for k in range(1, n+1): if k != i and k != j: if k in graph[i] and k in graph[j]: indirect_pairs_count += 1 break return indirect_pairs_count"},{"question":"You are given a list of `n` integers. Your task is to find out if there exists a contiguous subarray whose sum is zero. If such a subarray exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains a single integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (|a_i| ≤ 10^9). Output For each test case, print \\"YES\\" if there is a contiguous subarray with sum zero, otherwise print \\"NO\\". Example Input 3 5 4 2 -3 1 6 5 4 2 0 1 6 3 -3 2 3 Output YES YES NO Note In the first test case, there is a subarray with sum zero: [2, -3, 1]. In the second test case, there is a subarray with sum zero: [0]. In the third test case, there is no subarray with sum zero.","solution":"def has_zero_sum_subarray(arr): This function finds if there\'s a contiguous subarray with sum zero in the given list `arr`. prefix_sum = 0 seen_sums = set() for number in arr: prefix_sum += number if prefix_sum == 0 or prefix_sum in seen_sums: return \\"YES\\" seen_sums.add(prefix_sum) return \\"NO\\" def process_test_cases(test_cases): This function processes multiple test cases and applies the `has_zero_sum_subarray` function to each. results = [] for n, arr in test_cases: result = has_zero_sum_subarray(arr) results.append(result) return results # Example usage: t = 3 test_cases = [ (5, [4, 2, -3, 1, 6]), (5, [4, 2, 0, 1, 6]), (3, [-3, 2, 3]) ] # Process the test cases result = process_test_cases(test_cases) for res in result: print(res)"},{"question":"Alice received a new puzzle game for her birthday. The game involves placing tiles on a grid, and each tile has a specific characteristic: a number printed on it. The grid itself is an n x n matrix. Alice quickly became fascinated by the patterns she could create by summing up the numbers on certain tiles. She wants to find the special row or column that yields the highest possible sum. Your task is to help Alice determine either the highest sum of any single row or any single column. Input The first line contains an integer n (1 ≤ n ≤ 5000), which represents the size of the grid. The next n lines each contain n integers ai,j (0 ≤ ai,j ≤ 1000), where ai,j represents the number on the tile at the ith row and jth column. Output Output a single integer that is the maximum sum of any row or column in the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 24 Input 2 1000 1000 1000 1000 Output 2000 Input 4 1 2 3 4 4 3 2 1 7 8 9 10 1 1 1 1 Output 34 Note In the first example, selecting the last column or the last row yields the highest sum of 24. In the second example, every row and column has the same sum of 2000. In the third example, the sum of the third row is the highest, which is 34.","solution":"def max_row_col_sum(n, grid): Returns the maximum sum of any single row or column in the grid. :param n: The size of the grid (n x n). :param grid: A list of lists containing integers representing the grid. :return: An integer that is the maximum sum of any row or column. max_sum = 0 # Calculate the sum of each row and update max_sum for row in grid: row_sum = sum(row) if row_sum > max_sum: max_sum = row_sum # Calculate the sum of each column and update max_sum for col in range(n): col_sum = sum(grid[row][col] for row in range(n)) if col_sum > max_sum: max_sum = col_sum return max_sum"},{"question":"Given an integer `n`, determine if it is possible to rearrange the first `n` natural numbers (1, 2, 3, ..., n) into a sequence such that the absolute difference between any two adjacent numbers is either 1 or a prime number. If such a sequence exists, print \\"POSSIBLE\\" followed by the sequence. Otherwise, print \\"IMPOSSIBLE\\". Input The input consists of a single integer `n` (1 ≤ n ≤ 10^5). Output If a valid sequence exists, print \\"POSSIBLE\\" on the first line. On the second line, print the sequence of the first `n` natural numbers arranged such that the absolute difference between any two adjacent numbers is either 1 or a prime number. If no such sequence exists, print \\"IMPOSSIBLE\\". Examples Input 4 Output POSSIBLE 1 2 3 4 Input 5 Output IMPOSSIBLE","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def rearrange_sequence(n): if n == 1: return \\"POSSIBLEn1\\" if n == 2 or n == 3: return \\"IMPOSSIBLE\\" if n == 4: return \\"POSSIBLEn1 3 2 4\\" if n == 5: return \\"IMPOSSIBLE\\" if n == 6: return \\"POSSIBLEn1 3 2 5 4 6\\" return \\"POSSIBLEn\\" + \\" \\".join(map(str, range(1, n + 1))) def main(): import sys input = sys.stdin.read n = int(input().strip()) print(rearrange_sequence(n))"},{"question":"Write a program to determine the most frequent word in a given document. The word frequency is case insensitive, and punctuation marks should be ignored. If there is a tie for the most frequent word, return any one of them. Input The input begins with a single line integer n (1 ≤ n ≤ 100) that indicates the number of lines in the document. The next n lines contain the text of the document. Each line of text contains a sequence of words with common punctuation marks like commas, periods, exclamations, and question marks. Output Print the most frequent word in the document, converted to lower case. Constraints * Words consist only of alphabetical characters, separated by spaces or punctuation marks. * Words are case insensitive (e.g., \\"The\\" and \\"the\\" are the same word). * Punctuation marks should not be considered part of a word. Examples Input ``` 3 The quick brown fox jumped over the lazy dog. The dog was not amused. The fox, however, was very proud! Was the fox quick? Yes, it was quick! ``` Output ``` the ``` Input ``` 2 Hello, world! Hello again. World peace is important. World peace is possible. ``` Output ``` world ```","solution":"import re from collections import Counter def most_frequent_word(n, lines): Determines the most frequent word in a document. :param n: The number of lines in the document. :param lines: A list of strings representing each line of the document. :return: The most frequent word in the document in lower case. text = \' \'.join(lines).lower() words = re.findall(r\'bw+b\', text) word_count = Counter(words) most_common_word = word_count.most_common(1)[0][0] return most_common_word"},{"question":"Your company uses a bespoke analytics platform which processes a series of tasks with dependent constraints. The platform is designed to perform a sequence of operations where some tasks must be completed before others can start. Each task is represented by a single lowercase letter and dependencies between tasks are represented as a directed graph where each edge `u -> v` means that task `u` must be completed before task `v` can start. Your task is to compute a valid order of task execution or detect a cycle if the tasks cannot be ordered due to cyclic dependencies. Write a program that reads the number of datasets followed by the datasets themselves. For each dataset, compute a valid order of task execution or output \\"Cycle detected\\". Input format: 1. The number of datasets `D` (1 <= D <= 50). 2. For each dataset: a. The number of tasks `T` (1 <= T <= 26) and the number of dependencies `E` (0 <= E <= 325). b. The next `E` lines contain two space-separated characters `u` and `v` where `u` must be completed before `v`. Output format: For each dataset, output a valid order of task execution or \\"Cycle detected\\" if a valid order does not exist. Example Input 2 6 6 a c b c c e d e e f a d 4 4 a b b c c a d c Output a b d c e f Cycle detected Notes: - If there are multiple valid orders, any one of them can be output. - Ensure that you do not add extra spaces or new lines after the output of each dataset\'s result. Only add a new line between the results of subsequent datasets.","solution":"def find_order_or_detect_cycle(datasets): def topological_sort(tasks, dependencies): from collections import deque, defaultdict indegree = {task: 0 for task in tasks} adj_list = defaultdict(list) for u, v in dependencies: adj_list[u].append(v) indegree[v] += 1 queue = deque([task for task in tasks if indegree[task] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in adj_list[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == len(tasks): return order else: return \\"Cycle detected\\" results = [] for dataset in datasets: T, E, dependencies = dataset tasks = set() for u, v in dependencies: tasks.add(u) tasks.add(v) tasks = list(tasks) result = topological_sort(tasks, dependencies) if result != \\"Cycle detected\\": results.append(\\" \\".join(result)) else: results.append(result) return results def read_input(input_str): lines = input_str.strip().split(\\"n\\") index = 0 D = int(lines[index]) index += 1 datasets = [] for _ in range(D): T, E = map(int, lines[index].split()) index += 1 dependencies = [] for __ in range(E): u, v = lines[index].split() dependencies.append((u, v)) index += 1 datasets.append((T, E, dependencies)) return datasets def main(input_str): datasets = read_input(input_str) results = find_order_or_detect_cycle(datasets) return \\"n\\".join(results)"},{"question":"You are given a sequence of integers a1, a2, ..., an. Your task is to determine whether this sequence is almost sorted. A sequence is considered almost sorted if at most one element can be removed to make the sequence strictly increasing. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print \\"YES\\" if the sequence is almost sorted, otherwise print \\"NO\\". Examples Input 5 1 2 10 5 7 Output YES Input 4 10 20 30 40 Output YES Input 6 5 9 1 3 4 7 Output NO","solution":"def is_almost_sorted(n, sequence): def is_strictly_increasing(seq): return all(seq[i] < seq[i + 1] for i in range(len(seq) - 1)) for i in range(n): new_sequence = sequence[:i] + sequence[i + 1:] if is_strictly_increasing(new_sequence): return \\"YES\\" return \\"NO\\""},{"question":"You are given a permutation of the first n natural numbers (1, 2, 3, ..., n). A permutation is invertible if you can find a sequence of swaps such that when applied to the permutation, it results in the identity permutation (1, 2, 3, ..., n). A swap is defined as swapping the values at two indices i and j (1 ≤ i, j ≤ n). Your task is to determine the minimum number of swaps required to convert the given permutation into the identity permutation. # Input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the permutation. The second line contains n integers, a_1, a_2, ... , a_n — the permutation of the first n natural numbers. # Output: Output a single integer — the minimum number of swaps required. # Examples: Input: 5 5 4 3 2 1 Output: 2 Input: 4 4 3 1 2 Output: 3 # Note: In the first example, one way to sort the permutation into the identity permutation is: - Swap positions 1 and 5 - Swap positions 2 and 4 In the second example, one way to sort the permutation into the identity permutation is: - Swap positions 1 and 4 - Swap positions 1 and 3 - Swap positions 2 and 4","solution":"def min_swaps_to_identity(n, permutation): Returns the minimum number of swaps required to convert the given permutation into the identity permutation. # Create an array to keep track of whether the element has been visited or not visited = [False] * n index_map = {v: i for i, v in enumerate(permutation)} # value to its index mapping swaps = 0 for i in range(n): if visited[i] or permutation[i] == i + 1: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True next_index = index_map[x + 1] x = next_index cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Alyssa P. Hacker is a renowned engineer who likes to challenge herself with unique optimization problems. This time, she has devised a complex system of pipes interconnecting various fuel tanks in her laboratory. Each pipe has a certain flow capacity, and Alyssa wants to ensure that fuel flows optimally through the system from a source tank to a destination tank without exceeding the capacities of the pipes. Given a network of tanks and pipes, represented as a directed graph where nodes represent tanks and edges represent pipes with their respective capacities, your task is to find the maximum possible flow of fuel from the source tank to the destination tank. Input The first line contains two integers, n and m, (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) representing the number of tanks and pipes, respectively. The tanks are numbered from 1 to n. The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000), representing a pipe from tank u to tank v with capacity c. The last line contains two integers, s and t, (1 ≤ s, t ≤ n, s ≠ t) where s is the source tank and t is the destination tank. Output Print a single integer, the maximum flow of fuel that can be transported from the source tank to the destination tank. Example Input 4 5 1 2 100 1 3 100 2 4 50 3 4 50 2 3 50 1 4 Output 100 Explanation Based on the given example, there are four tanks and five pipes. The system allows a maximum flow of 100 from tank 1 (source) to tank 4 (destination) considering the capacities of the pipes. Note: There may be multiple paths in the network, and the goal is to utilize them optimally to carry the maximum possible fuel to the destination tank.","solution":"from collections import deque def bfs_capacity(residual_graph, source, sink, parent): Perform BFS on the residual graph to find if there\'s a path from source to sink. It also updates the parent array to store the path. visited = [False] * len(residual_graph) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v, capacity in enumerate(residual_graph[u]): if not visited[v] and capacity > 0: # If not visited and there\'s available capacity queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp(capacity_graph, source, sink): Implementation of the Edmonds-Karp algorithm to find the maximum flow in a flow network. n = len(capacity_graph) residual_graph = [row[:] for row in capacity_graph] parent = [-1] * n max_flow = 0 while bfs_capacity(residual_graph, source, sink, parent): # Find the maximum flow through the path found by BFS path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, residual_graph[parent[s]][s]) s = parent[s] # update residual capacities of the edges and reverse edges along the path v = sink while v != source: u = parent[v] residual_graph[u][v] -= path_flow residual_graph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_flow_fuel_network(n, m, edges, s, t): capacity_graph = [[0] * n for _ in range(n)] for u, v, c in edges: capacity_graph[u-1][v-1] += c # -1 to adjust 1-based index to 0-based return edmonds_karp(capacity_graph, s-1, t-1) # Convert s and t to 0-based index"},{"question":"You are given an undirected graph with N nodes and M edges. The nodes are numbered from 1 to N. The edges are given as an array of 2-element arrays where each element represents an edge between two nodes. Your task is to determine the number of connected components in the given graph. A connected component is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. Input An input is given in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M * The first line contains two integers, N and M representing the number of nodes and edges respectively. * The next M lines each contain two integers u_i and v_i indicating that there is an edge between node u_i and node v_i. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ M ≤ 10^5 * 1 ≤ u_i, v_i ≤ N Output Print the number of connected components in one line. Sample Input 1 5 3 1 2 2 3 4 5 Sample Output 1 2 In this example, there are two connected components: {1, 2, 3} and {4, 5}. Sample Input 2 6 0 Sample Output 2 6 In this example, there are no edges, so each node is its own connected component. Sample Input 3 4 2 1 2 3 4 Sample Output 3 2 In this example, there are two connected components: {1, 2} and {3, 4}.","solution":"def find_connected_components(N, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for node in range(1, N+1): if node not in visited: bfs(node) connected_components += 1 return connected_components def parse_input(input_data): lines = input_data.strip().split(\\"n\\") N, M = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return N, edges def number_of_connected_components(input_data): N, edges = parse_input(input_data) return find_connected_components(N, edges)"},{"question":"In the kingdom of Zør, a new regulation has been established for the acceptance of lottery ticket numbers. You\'re tasked with checking whether the number on a ticket meets the following criteria: * The number must have exactly 6 digits. * The sum of its first three digits must be equal to the sum of its last three digits. If the ticket number meets the criteria, output `LUCKY`; otherwise, print `UNLUCKY`. Constraints * The input is a single integer. * 100000 leq T leq 999999 Input A single integer T representing the lottery ticket number. Output If the ticket number meets the criteria, print `LUCKY`; otherwise, print `UNLUCKY`. Examples Input 123321 Output LUCKY Input 123456 Output UNLUCKY","solution":"def check_lottery_ticket(T): Checks if a lottery ticket number is \'LUCKY\' or \'UNLUCKY\'. Parameters: T (int): The lottery ticket number (must be 6 digits). Returns: str: \'LUCKY\' if the ticket is lucky, \'UNLUCKY\' otherwise. # Convert the number to a string str_t = str(T) # Ensure the number has exactly 6 digits if len(str_t) != 6: return \'UNLUCKY\' # Calculate the sum of the first three digits and the last three digits first_half_sum = sum(int(digit) for digit in str_t[:3]) second_half_sum = sum(int(digit) for digit in str_t[3:]) # Determine if the ticket is lucky if first_half_sum == second_half_sum: return \'LUCKY\' else: return \'UNLUCKY\'"},{"question":"Polycarp loves playing with strings. He has recently devised a game where he needs to transform a string into a palindrome by performing a series of operations. In one operation, he can remove any one character from the string. Polycarp is curious to know the minimum number of operations required to transform the given string into a palindrome. A palindrome is a string that reads the same forwards and backwards. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case contains a string s (1 ≤ |s| ≤ 1000) — the string Polycarp wants to transform into a palindrome. The string consists of only lowercase English letters. Output For each test case, output a single integer — the minimum number of operations required to transform the given string into a palindrome. Example Input 3 abc aabb racecar Output 2 2 0 Explanation In the first test case, Polycarp can remove \'a\' and \'c\' to make the string \\"b\\" which is a palindrome. In the second test case, Polycarp can remove one \'a\' and one \'b\' to form the string \\"ab\\" or \\"ba\\", which when reversed remains as \\"ab\\" or \\"ba\\". Polycarp can then remove one more character to form \\"a\\" or \\"b\\" which are palindromes. In the third test case, the string is already a palindrome and no operations are required.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the given string into a palindrome. def longest_palindromic_subsequence_length(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1] else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] lps_length = longest_palindromic_subsequence_length(s) return len(s) - lps_length def solve(t, test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"You are given an array of passengers\' rides in a theme park where each element in the array represents the number of rides taken by a passenger. The theme park management wants to know the number of passengers who have taken the minimum number of rides possible. Write a function `minRidesPassengers` that takes an array of integers as input and returns the number of passengers who have taken the minimum number of rides. Input: - An array of integers `rides` where `1 <= rides.length <= 1000` and `1 <= rides[i] <= 100` represents the number of rides taken by each passenger. Output: - Return a single integer representing the number of passengers who have taken the minimum number of rides. Example: # Example 1: ```python rides = [5, 3, 9, 1, 3, 1] print(minRidesPassengers(rides)) # Output: 2 ``` # Example 2: ```python rides = [4, 4, 4, 4] print(minRidesPassengers(rides)) # Output: 4 ``` # Example 3: ```python rides = [2, 1, 3, 2, 1, 1] print(minRidesPassengers(rides)) # Output: 3 ``` Note: In the first example, the minimum number of rides taken is 1, and there are 2 passengers who have taken 1 ride. Therefore, the output is 2.","solution":"def minRidesPassengers(rides): Determines the number of passengers who have taken the minimum number of rides. Parameters: rides (list of int): List of integers where each element represents the number of rides taken by a passenger. Returns: int: Number of passengers who have taken the minimum number of rides. # Find the minimum number of rides taken min_rides = min(rides) # Count and return the number of passengers who have taken the minimum number of rides return rides.count(min_rides)"},{"question":"You are given an integer array `arr` and you need to perform Q queries on it. Each query contains a type and some associated values: - Type 1: Given an index and a value, update the array at the given index to the given value. - Type 2: Given two indices x and y, return the sum of the elements of the subarray from index x to y (inclusive). Input/Output format: Input - The first line contains two integers `n` and `Q` (1 ≤ n, Q ≤ 10^5), the size of the array and the number of queries respectively. - The second line contains `n` integers denoting the elements of the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). - The next `Q` lines describe the queries. - For Type 1, the format is `1 idx value` (1 ≤ idx ≤ n, -10^9 ≤ value ≤ 10^9). - For Type 2, the format is `2 x y` (1 ≤ x ≤ y ≤ n). Output For each query of Type 2, print the sum of the elements from index `x` to `y`. Examples Input: ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 2 4 ``` Output: ``` 6 17 ``` Explanation: 1. The original array is `[1, 2, 3, 4, 5]`. 2. For the first query `2 1 3`, the sum from index 1 to 3 is `1 + 2 + 3 = 6`. 3. For the second query `1 2 10`, update index 2 to 10, the array becomes `[1, 10, 3, 4, 5]`. 4. For the third query `2 2 4`, the sum from index 2 to 4 is `10 + 3 + 4 = 17`.","solution":"def process_queries(n, Q, arr, queries): results = [] for query in queries: if query[0] == 1: # Update type query idx, value = query[1] - 1, query[2] arr[idx] = value elif query[0] == 2: # Sum type query x, y = query[1] - 1, query[2] results.append(sum(arr[x:y])) return results"},{"question":"Problem description. Ana loves creating shapes with building blocks. She has an unlimited supply of blocks and always starts by placing one block on the ground. Each subsequent layer she builds must be a complete rectangle where the number of blocks in the lower layer completely supports the upper layer. The area of the base layer (the first layer) is always greater than or equal to the area of the layer above. Ana is interested in knowing the maximum number of layers she can build if she uses exactly N blocks. Write a program to help Ana determine the maximum number of complete rectangular layers she can build given N blocks. Input - The input contains multiple test cases. - The first line of the input contains a positive integer T, denoting the number of test cases. - Each test case is described with a single positive integer N, representing the number of blocks available. Output - For each test case, output one line with the maximum number of complete rectangular layers Ana can build with N blocks. Constraints - 1 ≤ T ≤ 10^5 - 1 ≤ N ≤ 10^9 Example Input: 3 10 6 28 Output: 4 3 7 Explanation: For the first test case: - Ana can use the blocks in the following way: - 1st layer: 1 block - 2nd layer: 2 blocks (2*1) - 3rd layer: 3 blocks (3*1) - 4th layer: 4 blocks (4*1) Hence, the maximum layers Ana can build with 10 blocks is 4. For the second test case: - Ana can use: - 1st layer: 1 block - 2nd layer: 2 blocks - 3rd layer: 3 blocks Thus, the maximum layers she can build with 6 blocks is 3. For the third test case: - Ana can use: - 1st layer: 1 block - 2nd layer: 2 blocks - 3rd layer: 3 blocks - 4th layer: 4 blocks - 5th layer: 5 blocks - 6th layer: 6 blocks - 7th layer: 7 blocks So, Ana can build a maximum of 7 layers with 28 blocks.","solution":"def max_layers(N): Returns the maximum number of complete rectangular layers that can be built with N blocks. layers = 0 total_blocks = 0 height = 1 while total_blocks + height <= N: total_blocks += height layers += 1 height += 1 return layers def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(max_layers(N)) return results"},{"question":"In a competitive game, players compete to collect the maximum number of coins in a grid. The grid is represented as an N x M matrix, where each cell contains a certain number of coins. Players can only move right or down from the top-left corner (0,0) to the bottom-right corner (N-1, M-1). Given the grid, write a function to calculate the maximum number of coins a player can collect along the path from the start to the destination. Constraints: 1 ≤ N, M ≤ 100 Each cell in the grid contains a non-negative integer representing the number of coins. Input: The first line contains two integers N and M, the dimensions of the grid. The following N lines contain M integers each, representing the number of coins in each cell of the grid. Output: An integer representing the maximum number of coins that can be collected. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: The optimal path is 1 -> 3 -> 5 -> 2 -> 1, which collects a total of 12 coins. Note: - It\'s advisable to use dynamic programming to solve this problem efficiently given the constraints.","solution":"def max_coins(grid): Calculate the maximum number of coins collectible in a grid by moving only right or down. grid: List[List[int]] - A 2D list representing the grid where each element is the number of coins in that cell. return: int - The maximum number of coins collectible. if not grid or not grid[0]: return 0 N = len(grid) M = len(grid[0]) # Create a DP table to store the maximum coins collectible up to each cell. dp = [[0]*M for _ in range(N)] # Initialize the top-left corner with the initial number of coins. dp[0][0] = grid[0][0] # Initialize the first row. for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column. for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the DP table. for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum number of coins collectible. return dp[N-1][M-1]"},{"question":"Thalia has a favorite number, and she loves to tinker with it. She starts with an integer n and performs the following operations repeatedly: if the integer is even, she divides it by 2; if it is odd, she multiplies it by 3 and adds 1. Thalia continues this process until the integer becomes 1. Your task is to determine the number of operations required to transform the given integer n into 1 using the described process. Input The input consists of a single integer n (1 ≤ n ≤ 10^6). Output Output a single integer representing the number of operations needed to transform the integer n into 1. Examples Input 7 Output 16 Input 1 Output 0 Input 27 Output 111 Note For the first example, the sequence of operations is as follows: 7 is odd, so multiply by 3 and add 1 to get 22 22 is even, so divide by 2 to get 11 11 is odd, so multiply by 3 and add 1 to get 34 34 is even, so divide by 2 to get 17 17 is odd, so multiply by 3 and add 1 to get 52 52 is even, so divide by 2 to get 26 26 is even, so divide by 2 to get 13 13 is odd, so multiply by 3 and add 1 to get 40 40 is even, so divide by 2 to get 20 20 is even, so divide by 2 to get 10 10 is even, so divide by 2 to get 5 5 is odd, so multiply by 3 and add 1 to get 16 16 is even, so divide by 2 to get 8 8 is even, so divide by 2 to get 4 4 is even, so divide by 2 to get 2 2 is even, so divide by 2 to get 1 Hence, the number of operations is 16.","solution":"def steps_to_transform_to_one(n): steps = 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = n * 3 + 1 steps += 1 return steps"},{"question":"You are given an array of integers and you need to answer several range queries. Each query requires you to update a subarray by adding a specified value, and then find the product of all the elements in that subarray. To handle each query efficiently, you need to keep track of the changes and calculate the product within the specified range. Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2 * 10^5) — the size of the array and the number of queries. - The second line contains `n` integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9) — the initial elements of the array. - Each of the next `q` lines contains three integers `l`, `r` and `x` (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9) — a query where `l` and `r` are the boundaries of the subarray and `x` is the value to add to each element of the subarray. Output For each query, print the product of the elements in the updated subarray modulo 10^9 + 7. Example Input: 5 3 1 2 3 4 5 1 3 2 2 5 1 3 4 3 Output: 48 210 252 Explanation: Initial array: [1, 2, 3, 4, 5] 1) Add 2 to elements from index 1 to 3 (inclusive). Array becomes: [3, 4, 5, 4, 5] Product of elements from index 1 to 3 (inclusive) = 3 * 4 * 5 = 60, modulo 10^9 + 7 is 60. 2) Add 1 to elements from index 2 to 5 (inclusive). Array becomes: [3, 5, 6, 5, 6] Product of elements from index 2 to 5 (inclusive) = 5 * 6 * 5 * 6 = 900, modulo 10^9 + 7 is 900. 3) Add 3 to elements from index 3 to 4 (inclusive). Array becomes: [3, 5, 9, 8, 6] Product of elements from index 3 to 4 (inclusive) = 9 * 8 = 72, modulo 10^9 + 7 is 72.","solution":"MOD = 10**9 + 7 def range_query_product(n, q, array, queries): results = [] for query in queries: l, r, x = query l -= 1 # converting to 0-based index r -= 1 # converting to 0-based index # Add x to each element in the range [l, r] for i in range(l, r + 1): array[i] += x # Calculate the product of subarray [l, r] % MOD product = 1 for i in range(l, r + 1): product = (product * array[i]) % MOD results.append(product) return results"},{"question":"You are given an array of integers, and you need to determine whether it is possible to make all elements equal by adding or subtracting 1 to/from some of the elements exactly once. Input The only line of input contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the array, followed by `n` space-separated integers `a_1, a_2, ..., a_n` where each integer (−1000 ≤ a_i ≤ 1000). Output Output \\"YES\\" if it is possible to make all elements of the array equal by adding or subtracting 1 to/from some of the elements exactly once, otherwise output \\"NO\\". Examples Input 3 1 2 3 Output YES Input 4 1 2 4 5 Output NO Input 5 -1 0 1 -2 -1 Output YES","solution":"def can_make_elements_equal(n, arr): Determines if it is possible to make all elements in the array equal by adding or subtracting 1 to/from some elements exactly once. arr = sorted(arr) for i in range(1, n): if arr[i] - arr[i - 1] > 1: return \\"NO\\" return \\"YES\\""},{"question":"A museum security system is being redesigned, and they need an algorithm that will help them switch the security cameras\' focus efficiently. The museum can be represented as a grid of rooms, where each room has a particular number of valuable artifacts. The security camera can focus on any contiguous sub-rectangle of rooms, and the number of artifacts within that sub-rectangle determines the priority of monitoring that area. You are given a grid of dimensions n x m filled with non-negative integers, where each integer represents the number of artifacts in that room. Your task is to find the sub-rectangle of rooms that has the maximum number of artifacts and print the number of artifacts in that sub-rectangle. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines contain m integers each, representing the number of artifacts in each room (0 ≤ number of artifacts ≤ 1000). Output Print a single integer: the maximum number of artifacts in any contiguous sub-rectangle of rooms. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 0 0 0 0 Output 0 Note In the first sample, the entire grid is the sub-rectangle with the maximum number of artifacts, and the sum is 45. In the second sample, all rooms have 0 artifacts, so any sub-rectangle will also have 0 artifacts.","solution":"def max_artifacts(grid): Given a grid of dimensions n x m filled with non-negative integers, this function returns the maximum number of artifacts in any contiguous sub-rectangle of rooms. n = len(grid) m = len(grid[0]) # Initialize the prefix sums array with extra space for convenience prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Compute the prefix sums for the grid for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) max_sum = 0 # Iterate over all possible sub-rectangles for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): current_sum = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You have two boxes of equal size that can each hold up to N marbles. Each marble is either red or blue. The boxes are denoted as A and B. You can transfer marbles between the boxes and change the color of the marbles under certain conditions. Your goal is to make the number of red marbles in both boxes equal. You are given the initial state of the boxes, with each box containing some number of red and blue marbles. You need to determine the minimum number of operations required to achieve the goal and print the result. An operation is defined as: 1. Transfer one red marble from box A to box B. 2. Transfer one blue marble from box A to box B. 3. Transfer one red marble from box B to box A. 4. Transfer one blue marble from box B to box A. 5. Change the color of one red marble to blue in any box. 6. Change the color of one blue marble to red in any box. Input The first line contains one integer N (1 ≤ N ≤ 10^5) – the size of each box. The next line contains two integers R_A and B_A (0 ≤ R_A, B_A ≤ N) – the number of red and blue marbles in box A. The next line contains two integers R_B and B_B (0 ≤ R_B, B_B ≤ N) – the number of red and blue marbles in box B. Output Output a single integer – the minimum number of operations required to make the number of red marbles in both boxes equal. Example Input 4 2 2 3 1 Output 1 Note In the example, you can change one red marble in box A to blue, resulting in boxes with 1 red and 3 blue marbles in A and 3 red and 1 blue marbles in B. Alternatively, you could transfer one red marble from box B to box A. This problem requires understanding the transformation and equalization strategies for two sets of quantities under given constraints.","solution":"def min_operations_to_equal_red_marbles(N, R_A, B_A, R_B, B_B): Calculate the minimum number of operations required to make the number of red marbles in both boxes equal. Parameters: - N: Capacity of each box (int) - R_A: Number of red marbles in box A (int) - B_A: Number of blue marbles in box A (int) - R_B: Number of red marbles in box B (int) - B_B: Number of blue marbles in box B (int) Returns: - int: Minimum number of operations # Calculate the difference in the number of red marbles diff = abs(R_A - R_B) # The minimum number of operations is exactly the difference, since one operation can # either transfer or change the color of one marble return diff"},{"question":"Nina is a puzzle enthusiast and she found a peculiar kind of puzzle involving sequences. She has a sequence of integers and she can modify any element in the sequence as long as it remains a positive integer. Her goal is to make the entire sequence palindromic with as few modifications as possible. A sequence is palindromic if it reads the same forward and backward. Given an integer array representing the sequence, determine the minimum number of modifications needed to make the sequence palindromic. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains `n` space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output Print a single integer — the minimum number of modifications needed to make the sequence palindromic. Example Input 5 1 2 3 2 1 Output 0 Input 6 1 2 3 4 2 1 Output 1 Note In the first example, the sequence is already palindromic, so no modifications are needed. In the second example, one way to make the sequence palindromic is to change the 4 to a 3. Hence, the minimum number of modifications is 1.","solution":"def min_modifications_to_palindrome(n, sequence): Returns the minimum number of modifications needed to make the sequence palindromic. Parameters: n (int): The length of the sequence. sequence (list of int): The elements of the sequence. Returns: int: The minimum number of modifications needed. modifications = 0 left, right = 0, n - 1 while left < right: if sequence[left] != sequence[right]: modifications += 1 left += 1 right -= 1 return modifications"},{"question":"In a land far away, there is a tradition in which every household flies a unique flag outside their home. Each flag is made up of a combination of colored stripes, specifically red (R), green (G), blue (B), and yellow (Y). The uniqueness of a flag is defined by its pattern of colored stripes, where no two adjacent stripes are of the same color. For example, \\"RGBY\\" and \\"RYBG\\" are valid flags, whereas \\"RRGY\\" and \\"BGGB\\" are not. Given a flag pattern, determine if it is unique according to the tradition\'s rules. Constraints * 1 ≤ |Pattern| ≤ 100 * Pattern only contains the characters \'R\', \'G\', \'B\', and \'Y\'. Input Input is given from Standard Input in the following format: Pattern Output Print `YES` if the pattern is a valid unique flag according to the tradition\'s rules, and `NO` otherwise. Examples Input RGBY Output YES Input RRGY Output NO Input RYBG Output YES Input BGGB Output NO","solution":"def is_unique_flag(pattern): Determine if a flag pattern is unique according to the tradition\'s rules. for i in range(1, len(pattern)): if pattern[i] == pattern[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"In a magical forest, there are n mushrooms placed in a line. Each mushroom has a unique snail on it. The snails are very curious and like to swap positions with each other to explore the forest. However, there is a special rule they follow: a snail can only swap with an adjacent snail, and it can only swap a certain number of times. You have to determine if the snails can be rearranged to match a target order after performing a given number of swaps. Input The first line contains three integers n, k, and t (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1,000,000, and 1 ≤ t ≤ 1,000,000) — the number of snails, the maximum number of swaps that can be performed, and the number of test cases, respectively. The next two lines contain n integers each. The first line represents the initial arrangement of snails, and the second line represents the target arrangement. The last t lines each contain a single integer representing the maximum number of swaps to be checked for that test case. Output For each test case, print \\"Yes\\" if it is possible to rearrange the snails to match the target arrangement within the given number of swaps, otherwise print \\"No\\". Examples Input 5 10 2 1 2 3 4 5 5 4 3 2 1 1 10 Output No Yes Note In the first test case, 1 swap is not enough to completely reverse the order of the snails, hence the output is \\"No\\". In the second test case, 10 swaps are enough to rearrange the snails from [1, 2, 3, 4, 5] to [5, 4, 3, 2, 1], hence the output is \\"Yes\\".","solution":"def can_rearrange_snails(n, k, initial, target, test_cases): Determine if snails can be rearranged to match the target arrangement after performing a given number of swaps. Parameters: n (int): number of snails k (int): maximum number of swaps initial (list): initial arrangement of snails target (list): target arrangement of snails test_cases (list): list of test cases, each representing max swaps for that test Returns: list: list of strings \\"Yes\\" or \\"No\\" for each test case # Compute the minimum swaps required to match the target arrangement min_swaps_required = 0 arranged_initial = initial[:] for i in range(n): if arranged_initial[i] != target[i]: swap_index = arranged_initial.index(target[i], i) while swap_index > i: arranged_initial[swap_index], arranged_initial[swap_index - 1] = arranged_initial[swap_index - 1], arranged_initial[swap_index] swap_index -= 1 min_swaps_required += 1 # Check each test case to determine if it\'s possible to rearrange within the given swaps results = [] for max_swaps in test_cases: if min_swaps_required <= max_swaps: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"In a futuristic world, a spaceship captain must navigate a series of interconnected sectors to deliver supplies. The sectors are represented as nodes in a graph, and the passages between them as edges. The spaceship starts in Sector 1 and must visit all sectors at least once, returning to its starting point (Sector 1). The sectors may have multiple passages connecting them, but not all passages are bidirectional: some are one-way, and some are two-way. The spaceship\'s fuel consumption is directly proportional to the number of edges traversed on its journey. Your task is to help the captain determine the minimum number of edges (passes) required to complete the journey to all sectors and return to the starting sector. Each of the passages is represented as an unordered set {u_i, v_i} if they are two-way, or an ordered pair (u_i, v_i) if they are one-way. Constraints: * 2 leq N leq 1000 (number of sectors) * 1 leq M leq 10000 (number of passages) * 1 leq u_i, v_i leq N (sector indices) Input: The input consists of: - An integer N, the number of sectors. - An integer M, the number of passages. - M lines each containing two integers u_i, v_i, representing a passage between sector u_i and sector v_i. If u_i is less than v_i, the passage is two-way; otherwise, it is one-way. Output: An integer representing the minimum number of passages (edges) required for the spaceship to visit all sectors at least once and return to Sector 1. Example: Input: 5 6 1 2 2 3 4 5 3 4 2 5 5 1 Output: 6 Input: 4 4 1 2 2 3 3 4 4 2 Output: 4","solution":"from collections import defaultdict, deque def find_minimum_edges(N, M, passages): adj = defaultdict(list) in_degree = [0] * (N + 1) out_degree = [0] * (N + 1) for u, v in passages: if u < v: adj[u].append(v) adj[v].append(u) out_degree[u] += 1 out_degree[v] += 1 in_degree[u] += 1 in_degree[v] += 1 else: adj[u].append(v) out_degree[u] += 1 in_degree[v] += 1 def bfs(start): visited = [False] * (N + 1) q = deque([start]) visited[start] = True while q: node = q.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True q.append(neighbor) return visited def is_strongly_connected(): # Check from every node if it can reach every other node start = 1 visited = bfs(start) for i in range(1, N + 1): if (out_degree[i] or in_degree[i]) and not visited[i]: return False # Reverse the graph rev_adj = defaultdict(list) for u in adj: for v in adj[u]: rev_adj[v].append(u) visited = [False] * (N + 1) visited = bfs(start) for i in range(1, N + 1): if (out_degree[i] or in_degree[i]) and not visited[i]: return False return True if is_strongly_connected(): for i in range(1, N + 1): if out_degree[i] != in_degree[i]: return M return M"},{"question":"In the kingdom of Zoltar, a great tournament is taking place. The tournament consists of M challenges, each represented as an undirected graph with N nodes and E edges. Each edge has a certain weight representing the difficulty in travelling between those nodes. Each participant in the tournament can perform a series of jumps from one node to another, but they wish to minimize the total difficulty encountered during their journey. Two participants, Alice and Charlie, have to travel from a starting node S to an ending node T in some of the tournament challenges. They both are very good at guessing the shortest possible path but still want to confirm the exact difficulty they would encounter on their respective journeys. Your task is to assist in finding the minimum difficulty for each query, where Alice and Charlie will provide you their starting node S and ending node T. Given a challenge, you have to answer Q such queries. INPUT: The first line of input contains two integers N and E, the number of nodes and edges in the graph. The next E lines contain three space-separated integers U, V, and W, indicating that there is an edge between node U and node V with difficulty W. The next line contains a single integer Q, the number of queries. The following Q lines contain two space-separated integers S and T, representing the starting node and the ending node for each query. OUTPUT: For each query, print a single integer representing the minimum difficulty to travel from node S to node T. If there is no path from S to T, print -1. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ E ≤ 2*10^5 1 ≤ U, V ≤ N 1 ≤ W ≤ 10^6 1 ≤ Q ≤ 10^4 1 ≤ S, T ≤ N NOTE: Use efficient algorithms such as Dijkstra’s algorithm to handle large graph sizes and multiple queries efficiently. SAMPLE INPUT: 5 6 1 2 1 2 3 2 3 4 1 4 5 2 1 3 4 3 5 3 3 1 5 2 4 1 3 SAMPLE OUTPUT: 6 3 3 Explanation: Query 1 The minimum difficulty Alice and Charlie encounter while travelling from node 1 to node 5 is 6 by taking the path 1 -> 2 -> 3 -> 4 -> 5 with total difficulty 1 + 2 + 1 + 2 = 6. Query 2 The minimum difficulty Alice and Charlie encounter while travelling from node 2 to node 4 is 3 by taking the path 2 -> 3 -> 4 with total difficulty 2 + 1 = 3. Query 3 The shortest path from node 1 to node 3 is directly using the edge between them with difficulty 3.","solution":"import heapq from collections import defaultdict import sys def dijkstra(N, graph, start, end): # Distance from start to start is 0 distances = {node: float(\'inf\') for node in range(1, N+1)} distances[start] = 0 # Min-heap priority queue priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we\'ve found a shorter way to `current_node`, skip processing it if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def minimum_difficulty(N, E, edges, Q, queries): graph = defaultdict(list) # Build the graph for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] # Process each query for S, T in queries: result = dijkstra(N, graph, S, T) results.append(result) return results # Example usage: N, E = 5, 6 edges = [ (1, 2, 1), (2, 3, 2), (3, 4, 1), (4, 5, 2), (1, 3, 4), (3, 5, 3) ] Q = 3 queries = [ (1, 5), (2, 4), (1, 3) ] print(minimum_difficulty(N, E, edges, Q, queries))"},{"question":"Anagram Detection is one of the important topics taught by Professor Flitwick. Harry Potter and Ron Weasley are working on a spell that can detect whether two words are anagrams of each other. Your task is to help them by writing a function that checks if two given words are anagrams. Two words are considered anagrams if they consist of the same characters with the same frequency, but possibly in a different order. Input The first line contains the number of test cases T. Each of the next T lines contains two words separated by a space. Output Output T lines, each containing \\"YES\\" if the two words are anagrams, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 20 1 ≤ Length of each word ≤ 100 SAMPLE INPUT 3 listen silent evil vile friend fiend SAMPLE OUTPUT YES YES NO","solution":"def are_anagrams(word1, word2): Returns \'YES\' if word1 and word2 are anagrams, \'NO\' otherwise. # Sort the characters in each word and compare return \'YES\' if sorted(word1) == sorted(word2) else \'NO\' def check_anagrams(cases): Processes a list of tuple pairs (word1, word2) and returns \'YES\' or \'NO\' for each pair. results = [are_anagrams(word1, word2) for word1, word2 in cases] return results # Sample interaction function def main(): T = int(input()) cases = [tuple(input().split()) for _ in range(T)] results = check_anagrams(cases) for result in results: print(result)"},{"question":"You are given n cookies and m people. You want to distribute the cookies in such a way that each person gets at least one cookie, and the distribution is as fair as possible, meaning the difference between the maximum number of cookies given to a person and the minimum number of cookies given to a person is minimized. Write a program that takes as input the numbers n and m and outputs the maximum number of cookies any person can get and the minimum number of cookies any person can get such that the distribution is as fair as possible. Input The input consists of two integers, n (1 ≤ n ≤ 10^9) and m (1 ≤ m ≤ 10^5). Output Print two integers separated by a space: the maximum number of cookies a person can get and the minimum number of cookies a person can get in the fairest distribution possible. Example Input 10 3 7 4 Example Output 4 3","solution":"def fair_cookie_distribution(n, m): Returns the maximum and minimum number of cookies a person can get in the fairest distribution possible. if m == 0: return 0, 0 min_cookies = n // m max_cookies = min_cookies + (1 if n % m != 0 else 0) return max_cookies, min_cookies"},{"question":"Sam and Jane are playing an interesting game with permutations and subsequences. The game rules are as follows: * They start with a string s of distinct lowercase English letters. * A valid move consists of selecting a non-empty subsequence of s and rearranging its characters to form a permutation which lexicographically precedes the original subsequence. * The player must modify the original subsequence in-place in the string s. * Sam moves first. * The player who cannot make a move loses. A subsequence of a string is obtained by deleting zero or more characters from the string without changing the order of the remaining characters. Given the string s, determine the winner of the game if both players play optimally. # Input - A single string s consisting of distinct lowercase English letters (1 ≤ |s| ≤ 1000). # Output - Output the name of the winner (\\"Sam\\" or \\"Jane\\") of the game. # Examples Input ``` dbca ``` Output ``` Sam ``` Input ``` abcd ``` Output ``` Jane ``` Note: A permutation is considered lexicographically smaller than another if it appears earlier in a dictionary or lexicon.","solution":"def determine_winner(s): Determines the winner of the game given the string s. :param s: str - input string consisting of distinct lowercase English letters :return: str - \\"Sam\\" if Sam wins, or \\"Jane\\" if Jane wins if s == \'\'.join(sorted(s)): return \\"Jane\\" else: return \\"Sam\\""},{"question":"You are working on a software development project where data needs to be processed and displayed in a certain order. The project has specific requirements for arranging and collapsing ranges of integers. Recently, a new requirement has been added: given a list of ranges, merge the overlapping ranges and output the merged ranges in sorted order. A range [l, r] is an interval where l is the lower bound and r is the upper bound of that range, and l ≤ r. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of ranges. Each of the next n lines contains two integers li and ri (0 ≤ li ≤ ri ≤ 10^9) — the bounds of the i-th range. Output Output the merged ranges in sorted order, where each range is represented by its lower and upper bounds. Each range should be on a new line. Example Input 4 1 3 2 6 8 10 15 18 Output 1 6 8 10 15 18 Input 2 1 4 4 5 Output 1 5 Explanation: - In the first example, the first two ranges overlap and are merged to [1, 6]. The rest of the ranges do not overlap, so they remain as they are. - In the second example, the two ranges [1, 4] and [4, 5] overlap at the boundary and are merged into a single range [1, 5].","solution":"def merge_ranges(ranges): if not ranges: return [] # Sort ranges by the starting point (and by end point in case of tie) ranges.sort(key=lambda x: (x[0], x[1])) merged = [] start, end = ranges[0] for i in range(1, len(ranges)): current_start, current_end = ranges[i] if current_start <= end: # Overlapping ranges, merge them end = max(end, current_end) else: # Non-overlapping range, push the previous range to merged merged.append([start, end]) start, current_start start, end = current_start, current_end # Don\'t forget to add the last range merged.append([start, end]) return merged"},{"question":"Stan loves playing with number sequences, particularly ones that follow an intriguing pattern. Recently, he found an interesting sequence of integers - the \\"Digit-Factorial Sequence\\". In this sequence, each number is defined as the sum of the factorials of its digits. For example, the number 145 is part of this sequence because (1! + 4! + 5! = 1 + 24 + 120 = 145). Stan wants to generate all the numbers in the Digit-Factorial Sequence that are less than or equal to a given number (N). Write a program that takes a single integer (N) as input and outputs all the numbers in the Digit-Factorial Sequence that are less than or equal to (N). The output sequence should be in ascending order. Input - A single integer (N (0 leq N leq 10^6)). Output - A sequence of integers, each on a new line, which are less than or equal to (N) and part of the Digit-Factorial Sequence. The output should be in ascending order. Example Input 100000 Output 1 2 145 40585 Note: - Factorials of digits are computed as follows: (0! = 1), (1! = 1), (2! = 2), (3! = 6), (4! = 24), (5! = 120), (6! = 720), (7! = 5040), (8! = 40320), (9! = 362880). - Special property of the sequence should be used to find the numbers efficiently.","solution":"import math def digit_factorial_sequence(N): Generates all numbers in the Digit-Factorial Sequence that are less than or equal to N. def digit_factorial_sum(num): return sum(math.factorial(int(digit)) for digit in str(num)) result = [] for i in range(1, N + 1): if i == digit_factorial_sum(i): result.append(i) return result"},{"question":"Alice has been given a special assignment in her Data Structures class. She has to analyze the efficiency of the various algorithms for merging multiple sorted arrays into one sorted array. To test her understanding, she is given m sorted arrays and needs to merge them into a single sorted array. The goal is to write a function that takes m sorted arrays as input and produces a single sorted array containing all the elements from the input arrays. Input The first line contains an integer m (1 ≤ m ≤ 1000), the number of sorted arrays. For each of the next m lines, the i-th line begins with an integer n_i (1 ≤ n_i ≤ 1000), the number of elements in the i-th sorted array, followed by n_i integers a_1, a_2, ..., a_n_i (1 ≤ a_j ≤ 10^9), the elements of the i-th sorted array. Output Print a single line containing all the elements from all the input arrays, sorted in non-decreasing order. Examples Input 3 5 1 4 7 10 12 3 2 8 14 4 3 9 16 20 Output 1 2 3 4 7 8 9 10 12 14 16 20 Input 2 6 1 1 1 1 1 1 7 2 2 2 2 2 2 2 Output 1 1 1 1 1 1 2 2 2 2 2 2 2 Note In the first example, there are three sorted arrays: * [1, 4, 7, 10, 12] * [2, 8, 14] * [3, 9, 16, 20] The merged sorted array is: * [1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 16, 20]","solution":"import heapq from typing import List, Tuple def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: Merges multiple sorted arrays into a single sorted array. merged_array = [] heap = [] # Initialize the heap with the first element of each array, along with the array index and element index for i, array in enumerate(arrays): if array: heapq.heappush(heap, (array[0], i, 0)) # Extract the smallest elements one by one and add the next element from the same array to the heap while heap: val, array_idx, element_idx = heapq.heappop(heap) merged_array.append(val) next_element_idx = element_idx + 1 if next_element_idx < len(arrays[array_idx]): heapq.heappush(heap, (arrays[array_idx][next_element_idx], array_idx, next_element_idx)) return merged_array"},{"question":"Given a list of integers, *nums*, return the k most frequent elements. You may return the answer in any order. Input Format The first line of input contains t, the number of test cases. Each of the next t lines contains a space-separated list of integers followed by an integer k. Output Format For each test case, output k integers that represent the k most frequent elements in the list. The output for each testcase should be in a separate line. Constraints 1 ≤ t ≤ 10 1 ≤ len(nums) ≤ 10^4 -10^4 ≤ nums[i] ≤ 10^4 1 ≤ k ≤ len(nums) SAMPLE INPUT 2 1 1 1 2 2 3 2 3 3 4 4 4 4 5 5 5 2 SAMPLE OUTPUT 1 2 3 4 5 3 Explanation Test case 1: The integers 1, 2, and 3 appear in the list with frequencies 3, 3, and 1 respectively. Since k is 3, the three most frequent elements are 1, 2, and 3. Test case 2: The integers 4, 5, and 3 appear in the list with frequencies 4, 3, and 1 respectively. Since k is 3, the three most frequent elements are 4, 5, and 3.","solution":"from collections import Counter def k_most_frequent_elements(nums, k): Returns the k most frequent elements in the list nums. frequency_count = Counter(nums) most_common = frequency_count.most_common(k) return [element for element, count in most_common] def process_test_cases(test_cases): Processes multiple test cases and returns the k most frequent elements for each. results = [] for nums, k in test_cases: results.append(k_most_frequent_elements(nums, k)) return results"},{"question":"In a kingdom far, far away, there are n castles. Each castle has exactly one road leading to it and one road leading away from it. The king wants to establish a new trade route which will allow merchants to travel between any two castles in the kingdom, passing through exactly one intermediate castle. As a royal advisor, your job is to determine whether such an intermediate castle exists, and if so, identify two castles A and B such that travel is possible from A to B via the intermediate castle C. To help you, you are given the length of the road leading to each castle. Given the set of road lengths, you will need to query the kingdom\'s map to check possible travel routes. You can ask whether travel is possible between any two castles, but there\'s no limit on the number of queries you can make. The king requires a solution that minimizes the travel distance. Therefore, among all such pairs, you need to select the pair (A, B) with the minimum sum of road lengths leading to A and B. Remember, after receiving a \\"Yes\\" response from the query (indicating that travel is possible), you must determine the final answer and terminate the program immediately. # Input The first line contains an integer n (3 ≤ n ≤ 500) — the number of castles in the kingdom. The second line contains n space-separated integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 1000), where l_i is the length of the road leading to the i-th castle. # Interaction To ask whether you can travel from castle A to castle B, print \\"? A B\\" (1 ≤ A, B ≤ n, A ≠ B). The judge will respond \\"Yes\\" if travel is possible, otherwise \\"No\\". To output the final answer, print \\"! A B C\\", where A, B, and C are the castles satisfying the problem\'s requirements. After outputting the final answer, your program must terminate immediately. # Examples Input ``` 4 2 3 1 4 ``` Output ``` ? 1 2 ? 1 3 Yes ! 1 3 2 ``` Input ``` 3 5 5 5 ``` Output ``` ? 1 2 ? 1 3 ? 2 3 No No No ! 0 0 0 ``` # Explanation In the first example, the user queries travel routes between several pairs of castles until finding that travel from castle 1 to castle 3 via castle 2 is possible. Therefore, the program outputs \\"! 1 3 2\\". In the second example, despite multiple queries, there is no possible route matching the requirements, so the program outputs \\"! 0 0 0\\".","solution":"def find_castles(n, lengths, query_fn): # Iterate over all pairs of castles to find A, B such that travel is possible from A to B via any castle C castle_pairs = [] for i in range(n): for j in range(i + 1, n): castle_pairs.append((i + 1, j + 1, lengths[i] + lengths[j])) # Sort pairs based on the sum of road lengths for minimal travel distance castle_pairs.sort(key=lambda x: x[2]) for (A, B, _) in castle_pairs: if query_fn(A, B) == \\"Yes\\": # if query yes, check every other castle for C in range(1, n+1): if C != A and C != B: print(f\'! {A} {B} {C}\') return # If no valid travel exists print(\'! 0 0 0\')"},{"question":"Jamie loves reading books. He has a bookshelf with `n` spaces, and he\'s planning to fill it up with books from his collection. Each type of book has a certain height, and Jamie wants to maximize the total height of the books on his shelf. Jamie has `m` different types of books. He can place the same type of book multiple times on the shelf, but the total number of books placed should not exceed the available spaces on the shelf. For each type of book `i`, its height is given by `h_i`. Your task is to help Jamie determine the maximum total height of books he can place on his shelf. # Input The first line contains a single integer `t` (1 ≤ t ≤ 10,000), the number of test cases. The following lines contain the descriptions of the test cases. Each test case consists of: - A single line with two integers `n` and `m` (1 ≤ n ≤ 1,000,000; 1 ≤ m ≤ 100), the number of spaces on the bookshelf and the number of types of books. - A single line containing `m` integers `h_i` (1 ≤ h_i ≤ 1,000), the heights of the books of each type. The test cases are separated by a blank line. It is guaranteed that the total number of test cases is at most 10. # Output For each test case, output the maximum total height of books Jamie can place on his shelf. # Example Input ``` 2 5 3 7 3 9 4 2 5 6 ``` Output ``` 45 24 ``` # Explanation In the first test case, Jamie can place 5 books of height 9, which maximizes the total height to `5 * 9 = 45`. In the second test case, Jamie can place 4 books of height 6, which gives the maximum total height of `4 * 6 = 24`.","solution":"def maximize_bookshelf_height(t, test_cases): Returns the maximum total height of books that can be placed on the shelf for each test case. Parameters: t : int : number of test cases test_cases : list : a list containing test case information. Each item is a tuple containing n, m, and a list of m heights. Returns: list : a list of integers representing the maximum total height of books for each test case results = [] for (n, m, heights) in test_cases: max_height = max(heights) total_height = n * max_height results.append(total_height) return results"},{"question":"John is working on a network analysis problem involving directed graphs. He wants to identify strongly connected components (SCCs) in a directed graph. An SCC is a maximal strongly connected subgraph where every pair of vertices (u, v) within the subgraph has a path from u to v and vice-versa. Given a directed graph with `n` vertices and `m` edges, help John by writing a program to find all SCCs in the graph. Input - The first line contains two integers `n` (2 ≤ n ≤ 1000), the number of vertices, and `m` (1 ≤ m ≤ 5000), the number of directed edges. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing a directed edge from vertex `u` to vertex `v`. Output - First, print the number of SCCs. - Then, for each SCC, print the number of vertices in the SCC followed by the list of vertices in that SCC. Each SCC’s vertices should be listed in increasing order, and the SCCs should be printed in any order. Example Input: 6 7 1 2 2 3 3 1 4 5 5 6 6 4 5 6 Output: 2 3 1 2 3 3 4 5 6 Explanation In the example above, there are two strongly connected components: - The first SCC contains the vertices {1, 2, 3} because there is a cycle involving these vertices. - The second SCC contains the vertices {4, 5, 6} because there is a cycle involving these vertices.","solution":"from collections import defaultdict def find_sccs(n, m, edges): Finds the strongly connected components (SCCs) in a directed graph using Kosaraju\'s algorithm. n: int - number of vertices m: int - number of edges edges: list of tuples - directed edges (u, v) Returns a list of SCCs. def dfs(v, graph, visited, stack): visited[v] = True for u in graph[v]: if not visited[u]: dfs(u, graph, visited, stack) stack.append(v) def fill_order(v, graph, visited, stack): visited[v] = True for u in graph[v]: if not visited[u]: fill_order(u, graph, visited, stack) stack.append(v) def transpose_graph(graph): transposed = defaultdict(list) for v in graph: for u in graph[v]: transposed[u].append(v) return transposed def kosaraju(n, graph): stack = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: fill_order(i, graph, visited, stack) transposed = transpose_graph(graph) visited = [False] * (n + 1) sccs = [] while stack: v = stack.pop() if not visited[v]: scc_stack = [] dfs(v, transposed, visited, scc_stack) scc_stack.sort() # Sort vertices in SCC sccs.append(scc_stack) return sccs graph = defaultdict(list) for u, v in edges: graph[u].append(v) sccs = kosaraju(n, graph) print(len(sccs)) for scc in sccs: print(f\\"{len(scc)} \\" + \\" \\".join(map(str, scc))) return len(sccs), sccs # Example usage n, m = 6, 7 edges = [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6), (6, 4), (5, 6)] find_sccs(n, m, edges)"},{"question":"Given an integer \'n\' (1 <= n <= 20), write a program to generate a pattern of \'X\' of size \'n\' using the \'*\' symbol. Example: 1) Input: n=3 Output: * * * * * 2) Input: n=5 Output: * * * * * * * * * SAMPLE INPUT 4 SAMPLE OUTPUT * * * * * * * Explanation The \'X\' pattern is formed by printing \'*\' at positions where either the row index equals the column index, or the row index and column index add up to n-1.","solution":"def generate_x_pattern(n): Generates an \'X\' pattern of size \'n\' using the \'*\' symbol. Args: n (int): Size of the pattern (1 <= n <= 20) Returns: List[str]: The generated pattern as a list of strings. pattern = [] for i in range(n): line = [\' \'] * n line[i] = \'*\' line[n-i-1] = \'*\' pattern.append(\'\'.join(line)) return pattern"},{"question":"Given an integer array, a triplet (i, j, k) is called beautiful if i < j < k and gcd(arr[i], arr[j], arr[k]) > 1. Here gcd(x, y) denotes the greatest common divisor of x and y. You are provided with a list of integers. Your task is to determine the number of beautiful triplets in the array. If there are no beautiful triplets, print \\"NO\\" (without quotes). Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of elements in the array. The second line contains n integers (1 ≤ arr[i] ≤ 10^9) representing the elements of the array. Output Print a single integer — the number of beautiful triplets in the array. If there are no such triplets, print \\"NO\\". Example Input 5 4 6 8 3 9 Output 2 Explanation In the given example: - The triplets (4, 6, 8) and (6, 8, 9) are beautiful because gcd(4, 6, 8) = 2 and gcd(6, 8, 9) = 1 (considering pairwise gcd, all three values are > 1). - There are no other triplets that satisfy the condition. Therefore, there are 2 beautiful triplets.","solution":"import math def count_beautiful_triplets(arr): def gcd(a, b): while b: a, b = b, a % b return a n = len(arr) beautiful_triplets_count = 0 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if gcd(arr[i], gcd(arr[j], arr[k])) > 1: beautiful_triplets_count += 1 if beautiful_triplets_count == 0: return \\"NO\\" else: return beautiful_triplets_count"},{"question":"Given a list of employees and the preferences for who they want to share a project with, create a program that forms pairs of employees such that their preferences are respected as far as possible. Each employee lists up to two other employees they prefer to work with. The task is to assign each employee into exactly one pair, based on their preferences, such that the overall number of preferred pairs is maximized. Input The first line contains an integer N (2 ≤ N ≤ 1000) indicating the number of employees (N will always be even). The following N lines each contain the preferences of the employees. Each line starts with the employee\'s index (1 to N), followed by up to two other indices indicating their preferred partners. Output The output should contain N/2 lines. Each line should consist of two integers representing the indices of the paired employees. Ensure that each employee is included in only one pair and pairs are listed in any order. Example Input 6 1 2 3 2 1 4 3 5 4 2 5 3 6 Output 1 2 3 5 4 6","solution":"def form_pairs(n, preferences): from collections import defaultdict # Parse the preferences to form a dictionary pref_dict = defaultdict(list) for pref in preferences: parts = list(map(int, pref.split())) emp = parts[0] pref_dict[emp] = parts[1:] # Initialize pairs and a set to keep track of used employees pairs = [] used = set() def find_pair(emp): # We try to find the first preferred partner that is not yet paired for pref in pref_dict[emp]: if pref not in used: return pref return None # Go through each employee and try to pair them based on preferences for emp in range(1, n + 1): if emp not in used: partner = find_pair(emp) if partner: pairs.append((emp, partner)) used.add(emp) used.add(partner) # Some employees might not yet be paired, pair them arbitrarily remaining = [emp for emp in range(1, n + 1) if emp not in used] for i in range(0, len(remaining), 2): pairs.append((remaining[i], remaining[i + 1])) return pairs # Example usage: n = 6 preferences = [ \\"1 2 3\\", \\"2 1 4\\", \\"3 5\\", \\"4 2\\", \\"5 3\\", \\"6\\" ] print(form_pairs(n, preferences))"},{"question":"A group of friends has decided to celebrate the holiday season by exchanging gifts amongst themselves. They decide to play a game called Secret Santa where each member of the group randomly assigns one other member to give a gift to. They make the assignments in such a way that no one gives a gift to themselves and everyone must both give and receive exactly one gift. To facilitate the process, they want you to write a program that assigns each person their Secret Santa such that all the constraints are met. However, they also want each assignment to be as fair as possible, in the sense that no one should receive a gift from the same person for consecutive years, if possible. You are provided with the number of members in the group and the history of previous year’s assignments. Your task is to generate a new set of assignments for the current year that meets the game\'s constraints and attempts to minimize repeats from last year’s assignments. Input The input consists of two parts: 1. The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of people in the group. 2. The next n lines each contains two integers, ai and bi (1 ≤ ai, bi ≤ n) indicating that person ai gave a gift to person bi last year. Output Output n lines each containing two integers ai and bi (1 ≤ ai, bi ≤ n) indicating that person ai will give a gift to person bi this year. The assignments should be different from last year’s assignments, if possible. If it is not possible to generate such assignments while keeping the constraints, print \\"Impossible\\". Examples Input: 5 1 2 2 3 3 4 4 5 5 1 Output: 1 3 2 4 3 5 4 1 5 2 Input: 4 1 2 2 3 3 4 4 1 Output: 4 2 2 1 1 3 3 4 Note: In the second example, the output avoids any direct repetition from the previous year.","solution":"import random def secret_santa(n, last_years_pairs): # Create initial assignments from last year\'s pairs last_year_dict = {a: b for a, b in last_years_pairs} # Initialize the current year assignment with -1 to indicate unassigned current_year_assignments = [-1] * n for i in range(1, n+1): # Exclude the current person and the person they gave a gift to last year possible_recipients = set(range(1, n+1)) - {i, last_year_dict[i]} if not possible_recipients: return \\"Impossible\\" # Randomly assign a possible recipient chosen = random.choice(list(possible_recipients)) current_year_assignments[i-1] = chosen # Remove the recipient from all other possible lists to maintain balance for j in range(1, n+1): if chosen in possible_recipients: possible_recipients.remove(chosen) # Transform the result to the desired output format result = [] for i in range(n): result.append((i+1, current_year_assignments[i])) return result"},{"question":"In MovieLand, there are three theaters numbered 1, 2, and 3. Each theater shows either action movies (denoted by `A`) or drama movies (denoted by `D`). A string T of length 3 represents the type of movies each theater shows. If T_i is `A`, Theater i shows action movies; if T_i is `D`, Theater i shows drama movies. To create a balanced movie experience, for each pair of one theater showing action movies and another showing drama movies, there will be a special event organized in MovieLand. Determine if there is a pair of theaters that will lead to a special event. Constraints * Each character of T is `A` or `D`. * |T| = 3 Input Input is given from Standard Input in the following format: T Output If there is a pair of theaters that will lead to a special event, print `Event`; otherwise, print `No Event`. Examples Input ADA Output Event Input DDA Output Event Input AAA Output No Event","solution":"def check_special_event(T): Determines if there\'s a pair of theaters showing different types of movies that will lead to a special event. Parameters: T (str): A string of length 3 representing the type of movies each theater shows. Returns: str: \'Event\' if there\'s at least one pair of theaters with different types, otherwise \'No Event\'. action_count = T.count(\'A\') drama_count = T.count(\'D\') if action_count > 0 and drama_count > 0: return \\"Event\\" return \\"No Event\\""},{"question":"You are tasked with implementing a search feature for a digital library. The library contains books, each represented by a unique book ID and a list of keywords associated with that book. Users can search for books by providing a list of keywords, and the search results should return the book IDs of books that contain all the keywords in the search query. Write a program to support this functionality. Specifically, you need to determine which books match each query and return the book IDs in ascending order for each query. Input: The input consists of multiple test cases in the following format: N Q book_id_1 keyword_1 keyword_2 ... keyword_k1 ... book_id_N keyword_1 keyword_2 ... keyword_kn k query_keyword_1 query_keyword_2 ... query_keyword_k ... The first line contains two integers N and Q, where N (1 ≤ N ≤ 1000) is the number of books and Q (1 ≤ Q ≤ 10000) is the number of queries. Each of the next N lines describes a book: the first string is a unique book ID, followed by a list of keywords associated with that book. Both book IDs and keywords consist of lowercase English letters and numbers only. Each book can have up to 10 keywords, and the total length of all keywords in the input does not exceed 100,000 characters. Each of the next Q lines represents a query: an integer k (1 ≤ k ≤ 10), followed by k keywords that need to be matched. Output: For each query, output a line containing the book IDs of books that match all the keywords in the query, sorted in ascending order. If no books match, output \\"none\\". Examples: Input: 5 3 book1 mathematics science book2 physics chemistry mathematics book3 science physics book4 chemistry science book5 mathematics 2 science mathematics 1 chemistry 3 mathematics science chemistry Output: book1 book2 book4 none Input: 4 2 book1 a b c book2 a d e book3 a f g book4 a b e 2 a b 1 f Output: book1 book4 book3","solution":"def search_books(N, Q, book_data, queries): from collections import defaultdict # Create a dictionary to hold the keywords and their associated book ids keyword_to_books = defaultdict(set) for book in book_data: parts = book.split() book_id = parts[0] keywords = parts[1:] for keyword in keywords: keyword_to_books[keyword].add(book_id) result = [] for query in queries: query_parts = query.split() k = int(query_parts[0]) query_keywords = query_parts[1:] if not query_keywords: # if query_keywords is empty result.append(\\"none\\") continue book_candidates = keyword_to_books[query_keywords[0]].copy() for keyword in query_keywords[1:]: book_candidates.intersection_update(keyword_to_books[keyword]) if book_candidates: result.append(\\" \\".join(sorted(book_candidates))) else: result.append(\\"none\\") return result"},{"question":"Implement a function that takes a string as input and reverses the vowels in the string, while keeping all other characters in their original positions. Input The input will be a single string `s` (1 ≤ |s| ≤ 1,000), consisting of uppercase and lowercase English letters. Output Return the modified string after reversing the vowels. Example Input hello Output holle","solution":"def reverse_vowels(s): Returns the string with vowels reversed in their positions. :param s: Input string :type s: str :return: Modified string with reversed vowels :rtype: str vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] in vowels and s[j] in vowels: s[i], s[j] = s[j], s[i] i += 1 j -= 1 if s[i] not in vowels: i += 1 if s[j] not in vowels: j -= 1 return \'\'.join(s)"},{"question":"Binary Tree Paths Given a binary tree, write a function to return all root-to-leaf paths. A leaf is a node with no children. Example: Input: ``` 1 / 2 3 5 ``` Output: [\\"1->2->5\\", \\"1->3\\"] Explanation: All root-to-leaf paths are: 1->2->5 1->3 Input format: A binary tree is represented as an array where `null` denotes a missing node. Example: [1, 2, 3, null, 5] Output format: A list of strings representing all the root-to-leaf paths. Constraint: * The number of nodes in the tree will be in the range [1, 100]. * The value of each node will be in the range [-100, 100]. Examples: Input: [1, 2, 3, null, 5] Output: [\\"1->2->5\\", \\"1->3\\"] Input: [1, 2, 3] Output: [\\"1->2\\", \\"1->3\\"]","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def binary_tree_paths(root): def construct_paths(node, path): if node: path += str(node.val) if not node.left and not node.right: # if it\'s a leaf node paths.append(path) # add the path to paths else: path += \\"->\\" # extend the current path construct_paths(node.left, path) construct_paths(node.right, path) paths = [] construct_paths(root, \\"\\") return paths"},{"question":"In a world of multi-dimensional creatures, Deetah, a mathematical researcher, is working on an interesting experiment involving 2D geometrical shapes. She needs to determine if a set of rectangles completely covers another rectangle without gaps or overlaps. Let there be a target rectangle with the bottom-left corner at (0,0) and the top-right corner at (W,H). Deetah also has N smaller rectangles, each defined by their bottom-left and top-right corner coordinates: (x1, y1) and (x2, y2). Write a program to determine if the N rectangles completely cover the target rectangle without any gaps or overlaps. Constraints * All values in input are integers. * 1 leq N leq 10^4 * 1 leq W, H leq 1000 * 0 leq x1 < x2 leq W * 0 leq y1 < y2 leq H Input Input is given from Standard Input in the following format: W H N x1_1 y1_1 x2_1 y2_1 x1_2 y1_2 x2_2 y2_2 . . . x1_N y1_N x2_N y2_N Output If the N rectangles completely cover the target rectangle without gaps or overlaps, print `Yes`; otherwise, print `No`. Examples Input 10 10 3 0 0 5 5 5 0 10 5 0 5 10 10 Output Yes Input 5 5 3 0 0 3 3 3 0 5 5 0 3 2 5 Output No Input 4 4 2 0 0 2 4 2 0 4 4 Output Yes","solution":"def is_completely_covered(W, H, rectangles): total_area = W * H covered_area = 0 events = [] for rect in rectangles: x1, y1, x2, y2 = rect events.append((x1, \'start\', y1, y2)) events.append((x2, \'end\', y1, y2)) events.sort() active_intervals = [] prev_x = 0 for event in events: x, event_type, y1, y2 = event if active_intervals: total_y_coverage = 0 prev_y = -1 for low, high in sorted(active_intervals): if high > prev_y: total_y_coverage += high - max(prev_y, low) prev_y = high covered_area += total_y_coverage * (x - prev_x) if event_type == \'start\': active_intervals.append((y1, y2)) elif event_type == \'end\': active_intervals.remove((y1, y2)) prev_x = x return \\"Yes\\" if covered_area == total_area else \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() W = int(data[0]) H = int(data[1]) N = int(data[2]) rectangles = [] index = 3 for _ in range(N): x1 = int(data[index]) y1 = int(data[index + 1]) x2 = int(data[index + 2]) y2 = int(data[index + 3]) rectangles.append((x1, y1, x2, y2)) index += 4 print(is_completely_covered(W, H, rectangles)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has an initial value which is an integer. You are required to perform q updates to the graph. Each update can either be an update of the vertex\'s value or a query for the sum of all vertices\' values connected to a specific vertex. More formally, there are q operations, of the following types: 1. \\"1 u val\\" - Update the value of vertex u to val. 2. \\"2 u\\" - Query and return the sum of all vertices\' values in the connected component containing vertex u. Write a program that processes these q updates and queries on the graph. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of vertices and edges in the graph, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the initial values of the vertices. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — representing an edge between vertex u and vertex v. The next line contains one integer q (1 ≤ q ≤ 10^5) — the number of operations. The following q lines describe the operations in the format described above. Output For each operation of the second type, print the required sum. Example Input 5 3 3 10 5 8 6 1 2 1 3 4 5 4 2 1 1 4 15 2 4 2 5 Output 18 21 21 Note In the example provided: 1. The initial graph has edges (1, 2), (1, 3), and (4, 5). Initially, the values of the vertices are {3, 10, 5, 8, 6}. 2. The first operation is querying the sum of values of the connected component containing vertex 1, which includes vertices {1, 2, 3}. The sum is 3+10+5=18. 3. The second operation is updating the value of vertex 4 to 15. Now the values of the vertices are {3, 10, 5, 15, 6}. 4. The third operation is querying the sum of values of the connected component containing vertex 4, which includes vertices {4, 5}. The sum is 15+6=21. 5. The fourth operation is querying the sum of values of the connected component containing vertex 5, which also includes vertices {4, 5}. So, the sum is still 21.","solution":"class Graph: def __init__(self, n, values): self.n = n self.values = values self.adj_list = [[] for _ in range(n)] self.component = [-1] * n self.component_sum = [] def add_edge(self, u, v): self.adj_list[u].append(v) self.adj_list[v].append(u) def dfs(self, node, comp_id, component_sum): stack = [node] self.component[node] = comp_id while stack: curr = stack.pop() component_sum += self.values[curr] for neighbor in self.adj_list[curr]: if self.component[neighbor] == -1: self.component[neighbor] = comp_id stack.append(neighbor) return component_sum def find_components(self): comp_id = 0 for i in range(self.n): if self.component[i] == -1: component_sum = self.dfs(i, comp_id, 0) self.component_sum.append(component_sum) comp_id += 1 def update_value(self, u, val): old_val = self.values[u] self.values[u] = val comp_id = self.component[u] self.component_sum[comp_id] += (val - old_val) def query_sum(self, u): comp_id = self.component[u] return self.component_sum[comp_id] def process_operations(n, m, values, edges, queries): graph = Graph(n, values) for u, v in edges: graph.add_edge(u-1, v-1) graph.find_components() results = [] for query in queries: if query[0] == 1: u, val = query[1] - 1, query[2] graph.update_value(u, val) elif query[0] == 2: u = query[1] - 1 results.append(graph.query_sum(u)) return results"},{"question":"A company wants to optimize their delivery routes. They need to find the shortest possible route that visits each of their delivery locations exactly once and returns to the starting point. This problem is commonly known as the Traveling Salesman Problem (TSP). Your task is to implement a function `find_shortest_route` that takes an adjacency matrix of distances between delivery locations and returns the minimum travel distance required to complete the route. Input: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of delivery locations. - The next `N` lines contain `N` integers each, where the j-th integer in the i-th line represents the distance from location i to location j. A value of 0 indicates no direct path from location i to location j and can be ignored in the context of this question. Output: - For each test case, output a single integer, the minimum travel distance for the optimal route. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 12 1 ≤ distance ≤ 1000 Example: Input: 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 Output: 80 64","solution":"import itertools def find_shortest_route(test_cases): results = [] for graph in test_cases: N = len(graph) vertices = range(N) min_tour_cost = float(\'inf\') for perm in itertools.permutations(vertices): current_cost = 0 for i in range(N): current_cost += graph[perm[i]][perm[(i + 1) % N]] min_tour_cost = min(min_tour_cost, current_cost) results.append(min_tour_cost) return results # Example input parsing def parse_input(input_string): data = list(map(int, input_string.split())) idx = 0 T = data[idx] idx += 1 test_cases = [] for _ in range(T): N = data[idx] idx += 1 graph = [] for i in range(N): graph.append(data[idx:idx + N]) idx += N test_cases.append(graph) return find_shortest_route(test_cases)"},{"question":"Jay is an avid collector of books and tracks his collection meticulously. He logs the number of books he has after each month, resulting in a cumulative list of the total number of books at the end of each month. He maintains another list, which represents the number of books he bought in each month individually. Unfortunately, Jay lost this second list. Given the cumulative list of books he has at the end of each month, help Jay reconstruct the list of the number of books he bought each month. The cumulative list is in chronological order. Your task is to print the monthly book acquisition list from the provided cumulative book list. Input: First line contains an integer N - the number of months Second line contains N space-separated integers - representing the cumulative number of books he has at the end of each month Output: Output N space-separated integers - representing the number of books bought each month Constraints: 1 ≤ N ≤ 100 1 ≤ value_of_each_element_in_cumulative_list ≤ 10^9 SAMPLE INPUT 5 10 20 35 50 70 SAMPLE OUTPUT 10 10 15 15 20","solution":"def monthly_books_acquisition(cumulative_list): Given a list of cumulative book counts at the end of each month, returns the list of books acquired each month. monthly_books = [cumulative_list[0]] # books bought in the first month for i in range(1, len(cumulative_list)): monthly_books.append(cumulative_list[i] - cumulative_list[i-1]) return monthly_books # Example usage: # cumulative_list = [10, 20, 35, 50, 70] # print(monthly_books_acquisition(cumulative_list)) # Output: [10, 10, 15, 15, 20]"},{"question":"You are given a string S consisting of lowercase letters. Your task is to determine the length of the longest palindrome that can be formed by rearranging the characters of S. A palindrome is a string that reads the same forward and backward, such as \\"racecar\\", \\"level\\", or \\"aaabaaa\\". The palindrome does not need to use all the characters of S, but it should be as long as possible. Constraints * 1 leq |S| leq 1000 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: ``` S ``` Output Print the length of the longest palindrome that can be formed from the characters of S. Examples Input ``` abccccdd ``` Output ``` 7 ``` Input ``` aabbcc ``` Output ``` 6 ``` Input ``` abc ``` Output ``` 1 ```","solution":"from collections import Counter def longest_palindrome_length(s): Function to determine the length of the longest palindrome that can be formed by rearranging the characters of s. char_count = Counter(s) length = 0 center_added = False for count in char_count.values(): # Add all pairs of characters to the palindrome length length += (count // 2) * 2 # If there\'s an odd character, it can be used as a center if count % 2 == 1 and not center_added: length += 1 center_added = True return length"},{"question":"Kavya loves playing on her staircase by jumping either 1 or 2 steps at a time. Her playful nature got her curious about the number of distinct ways she can reach the top of a staircase having `n` steps. Given the number of steps `n`, calculate the number of distinct ways Kavya can reach the top modulo 1000000007. Input The first line of input contains a single integer `n` representing the number of steps. Output Print a single integer representing the number of distinct ways to reach the top of the staircase modulo 1000000007. SAMPLE INPUT 4 SAMPLE OUTPUT 5","solution":"def count_ways(n): MOD = 1000000007 # Base case: If there are no steps, there\'s one way to stay at the ground (start position) if n == 0: return 1 # Base case: If there\'s only one step, there\'s only one way to reach the top elif n == 1: return 1 # Base case: If there are two steps, there are two ways: (1+1) or (2) elif n == 2: return 2 # Initialize dynamic programming array dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 dp[2] = 2 # Fill the dp array for i in range(3, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n]"},{"question":"Lucia has recently started gardening and she wants to plant flowers in her garden such that the color pattern appears symmetrical. She has n different types of flowers, each type is available in a specific quantity with a given color code. The garden is arranged in a circular pattern and in order to achieve the symmetrical design, the color pattern when viewed from any direction should appear the same. Given a list of flower types, where each flower type is represented by a color code and its quantity, determine if it\'s possible to plant the flowers in a circular garden to form a symmetrical pattern. # Input The first line contains an integer n (1 ≤ n ≤ 2000) — the number of different flower types. The next n lines each contain a string ci and integer qi (1 ≤ qi ≤ 1000), where ci is a single character representing the color code of the flower type, and qi is the quantity available for that type. # Output If it\'s possible to achieve the symmetrical pattern, print \\"YES\\". Otherwise, print \\"NO\\". # Examples Input ``` 3 A 4 B 2 C 4 ``` Output ``` YES ``` Input ``` 2 A 2 B 1 ``` Output ``` NO ``` Note In the first example: - We can arrange the flowers as AA BB CC AA CC BB, which is symmetrical. In the second example: - It\'s not possible to form a symmetrical pattern with one of the types having odd quantity.","solution":"def can_form_symmetrical_pattern(flower_types): Determine if it\'s possible to plant the flowers in a circular garden to form a symmetrical pattern. Args: flower_types : list of tuples List where each tuple contains a string ci representing the flower color code and an integer qi representing the quantity of that type of flower. Returns: str \\"YES\\" if a symmetrical pattern is possible, \\"NO\\" otherwise. # Check if all quantities are even for _, quantity in flower_types: if quantity % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Arun, a software engineer, is designing an optimal memory allocator for a computer system. The system contains M blocks of memory, and each block can be used to store one specific type of data. There are N types of data, each requiring a specific number of blocks of memory. Your task is to determine whether it is possible to store all the data types given the memory blocks available, and if so, what is the minimum number of blocks that should remain unused to achieve this. Constraints: * 1 ≤ N ≤ 100 * 1 ≤ M ≤ 1000 * 1 ≤ memory_i ≤ 1000 * The sum of all memory requirements does not exceed the total blocks of memory available. Input: The input is given from standard input in the following format: N M memory_1 memory_2 : memory_N Output: If it is not possible to store all kinds of data, print -1. If it is possible, print the minimum number of blocks that should remain unused. Examples: Input: 3 10 2 4 5 Output: -1 Input: 4 15 3 5 6 4 Output: -1 Input: 5 50 7 8 10 15 5 Output: 0","solution":"def min_blocks_unused(N, M, memory_requirements): Determines if it is possible to store all data types given the memory blocks available and calculates the minimum number of blocks that should remain unused. Parameters: N (int): Number of data types M (int): Number of memory blocks available memory_requirements (list of int): A list containing the memory requirements for each data type Returns: int: -1 if it is not possible, otherwise the minimum number of unused blocks total_required_memory = sum(memory_requirements) if total_required_memory <= M: return M - total_required_memory else: return -1"},{"question":"Example Input: 6 2 5 1 4 7 9 12 15 8 10 17 20 Output: 4","solution":"def longest_interval(intervals): Returns the length of the longest interval in the given list. max_length = 0 for interval in intervals: length = interval[1] - interval[0] if length > max_length: max_length = length return max_length"},{"question":"You are given a string S consisting of lowercase English letters. You want to perform a series of operations on this string to make it symmetrical. A string is symmetrical if it reads the same forwards and backwards. In one operation, you can select any character in the string and replace it with any other character. Your task is to determine the minimum number of operations required to make the string symmetrical. Constraints * 1 leq |S| leq 10^5 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Output the minimum number of operations required to make the string symmetrical. Examples Input abc Output 1 Input abca Output 1 Input racecar Output 0 Input abcdefgh Output 4","solution":"def min_operations_to_symmetrical(S): Returns the minimum number of operations required to make the string S symmetrical. n = len(S) operations = 0 for i in range(n // 2): if S[i] != S[n - 1 - i]: operations += 1 return operations"},{"question":"A garden designer wants to create a beautiful flower arrangement using square flowerbeds. Each flowerbed is represented by a collection of points in a 2D plane. The designer wants to maximize the number of distinct squares that can be formed by selecting four of these points. Each distinct square should have its four corners among the given points. The squares do not necessarily need to be aligned with the coordinate axes. Your task is to write a program that determines the number of distinct squares that can be formed from a set of points. **Input:** The input consists of multiple datasets. Each dataset is given in the following format. The input ends on a line containing one zero. - The first line contains an integer `n`, which is the number of points in the dataset. - The next `n` lines contain two integers `x` and `y`, representing the coordinates of a point. `n` is an integer that satisfies `1 ≤ n ≤ 1000`, and the coordinates `x` and `y` are integers satisfying `0 ≤ x, y ≤ 1000`. **Output:** For each dataset, output an integer indicating the number of distinct squares that can be formed. Output each value on a new line. **Examples:** ``` Input: 5 0 0 1 1 1 0 0 1 2 2 6 1 1 2 2 3 3 4 4 5 5 6 6 0 Output: 1 0 ``` In the first dataset, the points (0, 0), (1, 1), (1, 0), and (0, 1) form one distinct square. In the second dataset, no four points can form a square.","solution":"def count_squares(points): Given a set of points, this function counts the number of distinct squares that can be formed using those points as vertices. point_set = set(points) n = len(points) square_count = 0 for i in range(n): for j in range(i + 1, n): # Calculate the mid-point and the vector orthogonal to (points[j] - points[i]) mid_x = (points[i][0] + points[j][0]) / 2 mid_y = (points[i][1] + points[j][1]) / 2 vec_x = points[i][0] - points[j][0] vec_y = points[i][1] - points[j][1] orth_x = -vec_y orth_y = vec_x # Calculate the possible remaining two points of the square p3 = (mid_x + orth_x / 2, mid_y + orth_y / 2) p4 = (mid_x - orth_x / 2, mid_y - orth_y / 2) if p3 in point_set and p4 in point_set: square_count += 1 return square_count // 2 def distinct_squares_datasets(datasets): results = [] for dataset in datasets: n = dataset[0] points = dataset[1:] results.append(count_squares(points)) return results"},{"question":"When embarking on a treasure hunt, a group of adventurers is faced with a grid-based map, where each cell can either be free for movement or blocked. The adventurers start at the top-left corner of the grid and must reach the bottom-right corner. They can only move to the right or downward in order to progress. To ensure they don\'t get lost, they will follow exactly these two types of movements. They want to know in how many different ways they can reach the end goal, given the grid\'s layout of free and blocked cells. There is always at least one valid path available. Write a function `find_paths(grid: List[List[int]]) -> int` that calculates the number of different paths from the top-left to the bottom-right of the grid. # Input - A 2D array `grid` of size `n x m` (1 ≤ n, m ≤ 1000) where `grid[i][j]` can be: - 0 for free cells (cells they can move into) - 1 for blocked cells (cells they can\'t move into) # Output - An integer showing the number of different paths from the top-left corner to the bottom-right corner of the grid. The answer should be given modulo 10^9 + 7. # Examples Example 1: Input: ``` [[0, 0, 0], [0, 1, 0], [0, 0, 0]] ``` Output: ``` 2 ``` Explanation: There are only two valid paths: 1. Right → Right → Down → Down 2. Down → Down → Right → Right Example 2: Input: ``` [[0, 0], [0, 0]] ``` Output: ``` 2 ``` Explanation: There are only two valid paths: 1. Right → Down 2. Down → Right Example 3: Input: ``` [[0, 1], [0, 0]] ``` Output: ``` 1 ``` Explanation: There is only one valid path: 1. Down → Right","solution":"from typing import List MOD = 10**9 + 7 def find_paths(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"For a list A containing n integers, perform a sequence of the following operations: * add(value): Add the integer value to the list A. * remove(index): Remove the integer at the position index in the list A. If the index is out of bounds, ignore this operation. * get_range(L, R): Print all integers in the list A that are within the index range L to R (inclusive). If the range is out of bounds, adjust it to fit within valid indices. * odd_sum(): Print the sum of all odd integers currently in the list A. Constraints * 1 leq q leq 100,000 * -10^9 leq value leq 10^9 * 1 leq n leq 100,000 * 0 leq index < length of A * 0 leq L leq R < length of A * The total number of integers processed by get_range operations does not exceed 200,000 * The total number of integers processed by odd_sum operations does not exceed 100,000 Input The input is given in the following format. n A q query_1 query_2 : query_q Each query query_i is given by: 0 value or 1 index or 2 L R or 3 where the first digits 0, 1, 2, and 3 represent add, remove, get_range, and odd_sum operations. Output For each get_range operation, print the corresponding integers in the specified range. For each odd_sum operation, print the sum of all odd integers currently in the list. Example Input 5 1 3 5 7 9 8 0 2 1 1 2 1 3 3 0 11 2 2 4 1 3 2 0 2 Output 5 7 15 5 7 11 3 5","solution":"def add(A, value): Add value to the list A. A.append(value) def remove(A, index): Remove the element at the given index from the list A. If the index is out of bounds, do nothing. if 0 <= index < len(A): A.pop(index) def get_range(A, L, R): Return the elements in the range [L, R] from list A. If the range is out of bounds, adjust to fit within valid indices. L = max(0, L) R = min(len(A) - 1, R) return A[L:R + 1] def odd_sum(A): Return the sum of all odd integers in the list A. return sum(x for x in A if x % 2 != 0)"},{"question":"Book Reading Schedule You have K books that you want to read. You plan to spend D days reading these books, and you have a schedule where you will read the B_i -th book on the i -th day for i = 1, 2, 3, dots, D . However, you dislike reading the same book for two consecutive days and you want to change your schedule to ensure that you read a different book each day. Determine the minimum number of changes needed to ensure that no book is read on two consecutive days. It can be proved that it is always possible to achieve this with the given constraints. Input Input is provided in the following format: K D B_1 B_2 ldots B_D Output Output the minimum number of changes needed to ensure that no book is read on two consecutive days. Constraints * 2 leq K leq 10^9 * 1 leq D leq 10^5 * 1 leq B_i leq K * All inputs are integers. Input Example 1 5 4 1 1 2 3 Output Example 1 1 Input Example 2 4 5 2 2 2 3 4 Output Example 2 2 Example Input 4 5 3 3 3 2 1 Output 2","solution":"def min_changes(k, d, books): Determines the minimum number of changes needed to ensure that no book is read on two consecutive days. :param k: The total number of different books (1 ≤ k ≤ 10^9). :param d: The number of days (1 ≤ d ≤ 10^5). :param books: List of integers representing the books read each day (1 ≤ B_i ≤ k). :return: The minimum number of changes needed. changes = 0 for i in range(1, d): if books[i] == books[i - 1]: changes += 1 return changes"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find the length of the longest substring that contains only vowels. Vowels are the characters \'a\', \'e\', \'i\', \'o\', and \'u\'. Input The input consists of a single string S. Output Output a single integer representing the length of the longest substring that contains only vowels. Constraints 1 ≤ |S| ≤ 100,000 Example Input: earthproblem Output: 2 Explanation The longest substring that contains only vowels is \\"ea\\", which has a length of 2. Input: letshavefun Output: 1 Explanation The longest substring that contains only vowels is \\"e\\", which has a length of 1.","solution":"def longest_vowel_substring(s): Returns the length of the longest substring in s that contains only vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given a string consisting of lowercase Latin letters. You can do the following operation any number of times: remove exactly one occurrence of any character from the string. Your goal is to determine the minimum number of characters you need to remove from the string so that the remaining string has no two consecutive characters that are the same. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 2·10^5), consisting of lowercase Latin letters. It is guaranteed that the sum of the lengths of all strings in the input does not exceed 2·10^5. Output For each test case, print a single integer — the minimum number of characters you need to remove for the corresponding string. Examples Input 3 aabb abbba abcde Output 2 2 0 Explanation In the first case, we can remove the first \'a\' and the first \'b\' to get \\"ab\\". In the second case, we can remove one \'b\' and either the second \'a\' or the last \'a\' to get \\"aba\\". In the third case, all characters are already different so nothing needs to be removed.","solution":"def min_removals_no_consecutive_duplicates(s): This function takes a string s and returns the minimum number of characters that need to be removed so that no two consecutive characters are the same. removals = 0 previous_char = \'\' for char in s: if char == previous_char: removals += 1 else: previous_char = char return removals def process_test_cases(t, test_cases): return [min_removals_no_consecutive_duplicates(s) for s in test_cases]"},{"question":"Carl wants to extract information from a long string of text. In this string, each piece of data is separated by a delimiter. However, he needs to find how many of a specific kind of data item appear in the string. Write a program to determine the number of occurrences of a specific substring in a given text. Carl will provide both the text and substring to search for. Input The first input line contains a string of text. This string will be made of lowercase and uppercase letters and spaces, with a maximum length of 200 characters. The second input line contains the substring to search for. This string will be made of lowercase and uppercase letters, with a maximum length of 10 characters. Output Output a single integer, the number of times the substring appears in the text. Examples Input This_is_a_test_string test Output 1 Input ABCD_ABC_ ABC Output 2 Input the quick brown fox jumps over the lazy dog the Output 2","solution":"def count_substring_occurrences(text, substring): Returns the number of occurrences of the substring in the given text. Parameters: text (str): The string of text. substring (str): The substring to search for. Returns: int: The count of occurrences of the substring in the text. return text.count(substring)"},{"question":"Alice is organizing a coding competition in which each participant is assigned a unique ID from 1 to N. She has collected scores of all participants over M rounds. Each participant\'s score for each round is given as an integer. Alice wants to determine the maximum score and the minimum score for each participant after all M rounds of competition. However, due to the large number of participants and rounds, she needs an efficient way to calculate these values. Input: - The first line contains two integers, N (number of participants) and M (number of rounds). - The next M lines each contain N integers, representing the scores of participants in each round. Output: - For each participant, output two space-separated integers on a new line: the maximum score and the minimum score over the M rounds. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - Scores are integers in the range [-1000, 1000] SAMPLE INPUT 3 3 5 -2 7 3 0 6 -1 -4 2 SAMPLE OUTPUT 5 -1 0 -4 7 2 Explanation: There are 3 participants and 3 rounds: - Participant 1 has scores [5, 3, -1]. The maximum score is 5 and the minimum score is -1. - Participant 2 has scores [-2, 0, -4]. The maximum score is 0 and the minimum score is -4. - Participant 3 has scores [7, 6, 2]. The maximum score is 7 and the minimum score is 2.","solution":"def find_max_min_scores(N, M, scores): Function to find the maximum and minimum scores for each participant. :param N: Number of participants :param M: Number of rounds :param scores: List of scores for each round, where each element is a list of scores for participants in that round :return: List of tuples with (max_score, min_score) for each participant max_scores = [-float(\'inf\')] * N min_scores = [float(\'inf\')] * N for round_scores in scores: for i in range(N): if round_scores[i] > max_scores[i]: max_scores[i] = round_scores[i] if round_scores[i] < min_scores[i]: min_scores[i] = round_scores[i] result = [(max_scores[i], min_scores[i]) for i in range(N)] return result"},{"question":"John is passionate about social media and loves to analyze the posts shared by his friends. He has devised a system that assigns a popularity score to each post based on the number and types of interactions it receives. The interactions are either \\"like,\\" \\"comment,\\" or \\"share.\\" Each type has a different weight: a \\"like\\" adds 1 point, a \\"comment\\" adds 3 points, and a \\"share\\" adds 5 points to the post\'s score. Given a list of posts and their interactions, your task is to determine which post has the highest popularity score. If multiple posts have the same highest score, the post that appears first in the list should be considered. Input The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of posts. Then follow n lines, each containing the information about a post in the format \\"post_id num_likes num_comments num_shares\\", where post_id is a string of alphanumeric characters with a length from 1 to 32, num_likes, num_comments, and num_shares are integers (0 ≤ num_likes, num_comments, num_shares ≤ 1000), representing the number of \\"likes\\", \\"comments\\", and \\"shares\\" for that post respectively. Output Print the post_id of the post with the highest popularity score. Examples Input 3 post1 10 5 2 post2 8 7 3 post3 15 2 1 Output post2 Input 2 firstPost 5 2 1 secondPost 2 3 1 Output firstPost","solution":"def find_most_popular_post(n, posts): def calculate_score(likes, comments, shares): return likes + 3 * comments + 5 * shares max_score = -1 most_popular_post = \\"\\" for post in posts: post_id, num_likes, num_comments, num_shares = post score = calculate_score(int(num_likes), int(num_comments), int(num_shares)) if score > max_score: max_score = score most_popular_post = post_id return most_popular_post"},{"question":"Given a string of mixed alphabets and numbers, write a program to split the string into contiguous segments of alphabets and numbers and then concatenates them separately. Finally, return both the concatenated alphabets and concatenated numbers. **Input:** A single line of string `s` containing lowercase alphabets and digits (0-9). The length of the string can be up to 10^5. **Output:** Output the concatenated alphabets followed by a space and then the concatenated numbers. **Examples:** **Input:** ``` a1b2c3d4 ``` **Output:** ``` abcd 1234 ``` **Input:** ``` 3applesand4bananas2eat ``` **Output:** ``` applesandbananaseat 342 ``` **Input:** ``` no1letters3here5 ``` **Output:** ``` nolettershere 135 ``` **Note:** 1. Ensure your solution handles the input efficiently, given the larger constraints on the string length. 2. Your solution should scan the string in a single pass to separate and concatenate the alphabets and numbers.","solution":"def split_and_concat(s): Splits the input string into contiguous segments of alphabets and numbers, concatenates them separately, and returns both concatenated alphabets and numbers. alphabets = [] numbers = [] for char in s: if char.isdigit(): numbers.append(char) elif char.isalpha(): alphabets.append(char) return \'\'.join(alphabets) + \' \' + \'\'.join(numbers)"},{"question":"A group of friends is planning to go on a hiking trip. They have a device that tracks their position and displays it as a series of timestamps and coordinates. Unfortunately, the device has a bug that randomly marks some positions as invalid. To avoid any problems, the friends need to filter out the invalid positions and verify if the remaining coordinates form a valid straight hiking path. Given a sequence of position records, each containing a timestamp and an x-y coordinate, determine if the valid positions form a straight line. Positions marked as invalid should be ignored in the verification process. # Input The first line contains an integer `n` (1 ≤ n ≤ 1000) – the number of position records. The next `n` lines each contain an integer `t` (0 ≤ t ≤ 10^9) denoting the timestamp, two integers `x` and `y` (0 ≤ x, y ≤ 10^6) denoting the coordinates, and a character `v` (\'Y\' for valid, \'N\' for invalid). # Output Print \\"YES\\" if the valid positions form a straight line, and \\"NO\\" otherwise. # Examples Input: ``` 6 1 1 1 Y 2 2 2 Y 3 3 3 Y 4 4 4 Y 5 5 5 N 6 6 6 Y ``` Output: ``` YES ``` Input: ``` 5 1 1 2 Y 2 2 4 Y 3 3 6 N 4 4 8 Y 5 5 9 Y ``` Output: ``` NO ``` # Explanation In the first example, all valid coordinates (1,1), (2,2), (3,3), and (6,6) lie on the line y = x. In the second example, the coordinates (1,2), (2,4), (4,8), and (5,9) do not lie on a straight line. (5,9) breaks the pattern of x and y increasing proportionally.","solution":"def is_straight_path(n, points): def collinear(p1, p2, p3): return (p2[1] - p1[1]) * (p3[0] - p2[0]) == (p3[1] - p2[1]) * (p2[0] - p1[0]) valid_points = [(x, y) for _, x, y, v in points if v == \'Y\'] if len(valid_points) < 2: return \\"YES\\" first_point = valid_points[0] second_point = valid_points[1] for i in range(2, len(valid_points)): if not collinear(first_point, second_point, valid_points[i]): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, we want to rearrange the elements of the array into wave form. In other words, arrange the elements such that every second element is greater than its left and right neighbors. Formally, for an input array arr, if its sorted order is arr[i], then we want arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4], and so on. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the array. Output Output the array elements in a single line after rearranging them in the required wave form. If there are multiple solutions, you may print any of them. Examples Input 5 3 6 5 10 7 Output 6 3 10 5 7 Input 4 1 2 3 4 Output 2 1 4 3","solution":"def wave_sort(arr): Rearranges the array into a wave form such that every second element is greater than its left and right neighbors. arr.sort() # Swap adjacent elements in sorted array for i in range(1, len(arr), 2): arr[i], arr[i - 1] = arr[i - 1], arr[i] return arr"},{"question":"Given a string s, you are allowed to select any substring t of s and reverse it. Determine if it is possible to obtain a palindrome by performing at most one such operation. A string is called a palindrome if it reads the same backward as forward. Input - The first line contains an integer q (1 ≤ q ≤ 100 000) — the number of queries. - Each of the next q lines contains a string s (1 ≤ |s| ≤ 100 000) consisting of only lowercase English letters. The total length of all strings does not exceed 2 ⋅ 10^6. Output For each query, print \\"YES\\" if it is possible to obtain a palindrome by reversing at most one substring, otherwise print \\"NO\\". Examples Input 3 abca racecar abcdef Output YES YES NO Note In the first query, the string \\"abca\\" can be transformed into \\"abba\\" by reversing the substring \\"bc\\". In the second query, the string \\"racecar\\" is already a palindrome, so no operation is needed. In the third query, it is impossible to create a palindrome by reversing any single substring.","solution":"def can_be_palindrome_with_one_reverse(s): Determines if the string s can be transformed into a palindrome by performing at most one substring reverse operation. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return \\"YES\\" n = len(s) left, right = 0, n - 1 # Identify the first mismatch while left < right and s[left] == s[right]: left += 1 right -= 1 if left >= right: return \\"YES\\" # Check by excluding left or right character def check_substring_excluding(s, left, right): l, r = left, right - 1 while l < r and s[l] == s[r]: l += 1 r -= 1 if l >= r: return True l, r = left + 1, right while l < r and s[l] == s[r]: l += 1 r -= 1 return l >= r if check_substring_excluding(s, left, right): return \\"YES\\" return \\"NO\\" def process_queries(queries): results = [] for s in queries: results.append(can_be_palindrome_with_one_reverse(s)) return results"},{"question":"A game involves moving a character on a grid. The grid is of size n x m (n rows and m columns). The game character can move up, down, left, or right to an adjacent cell, but cannot move to cells marked with obstacles. You need to determine the minimum number of moves required to transport the character from a starting position (sx, sy) to a target position (tx, ty). If it\'s impossible to reach the target position, return -1. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines contain m characters each, representing the grid. The characters can be: - \'.\' representing an empty cell - \'#\' representing an obstacle. The next line contains two integers sx and sy (1 ≤ sx, sy ≤ n, m), the starting position of the character. The last line contains two integers tx and ty (1 ≤ tx, ty ≤ n, m), the target position of the character. Output: Print a single integer representing the minimum number of moves required to reach the target position from the starting position. If it\'s impossible to reach the target, print -1. Examples Input: 5 5 ..... ..#.. ..#.. ..#.. ..... 1 1 5 5 Output: 8 Input: 3 3 .#. .#. .#. 1 1 3 3 Output: -1 Explanation: In the first example, the character can move in multiple ways to reach the target position in 8 moves. For instance: Right, Right, Down, Down, Down, Right, Right, Down. In the second example, the character cannot reach the target as there are obstacles blocking its path.","solution":"from collections import deque def min_moves_to_reach_target(n, m, grid, sx, sy, tx, ty): Determines the minimum number of moves required to move from (sx, sy) to (tx, ty) on the grid. If it\'s impossible to reach the target, returns -1. # Convert input coordinates to zero-based indexing sx, sy, tx, ty = sx - 1, sy - 1, tx - 1, ty - 1 # Directions for moving up, down, left, right directions = [(1,0), (-1,0), (0,1), (0,-1)] # Queue for BFS queue = deque([(sx, sy, 0)]) # (current_x, current_y, steps) # Visited set visited = set([(sx, sy)]) while queue: cx, cy, steps = queue.popleft() # If we have reached the target if (cx, cy) == (tx, ty): return steps # Explore all possible directions for dx, dy in directions: nx, ny = cx + dx, cy + dy # Check if the move is within bounds and not an obstacle if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If the target is not reachable return -1"},{"question":"Given a list of strings, write a program to determine the longest substring that appears in at least two of the strings. If there are multiple substrings with the same maximum length, return any one of them. Input: First line contains n, the number of strings. Next n lines each contain a string. Output: Print the longest substring common in at least two strings. If no such substring exists, print an empty string. Constraints: 2 ≤ n ≤ 10 1 ≤ |s| ≤ 100 Sample Input: 3 banana ananas ban Sample Output: an Explanation: The substring \\"an\\" appears in \\"banana\\", \\"ananas\\", and \\"ban\\". There is no longer common substring that appears in at least two of the strings.","solution":"def longest_common_substring(strings): def get_common_substrings(str1, str2): length = len(str1) result_set = set() for i in range(length): for j in range(i + 1, length + 1): if str1[i:j] in str2: result_set.add(str1[i:j]) return result_set def get_longest_substring(substrings): if not substrings: return \\"\\" return max(substrings, key=len) n = len(strings) if n < 2: return \\"\\" common_substrings = get_common_substrings(strings[0], strings[1]) for i in range(2, n): new_common_substrings = set() for common_substring in common_substrings: if common_substring in strings[i]: new_common_substrings.add(common_substring) common_substrings = new_common_substrings return get_longest_substring(common_substrings)"},{"question":"Given an array `A` consisting of `n` integers, your task is to find and print the length of the longest subarray that has the same element repeated throughout. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array `A` (1 ≤ A[i] ≤ 1000). # Output - Output a single integer — the length of the longest subarray of identical elements. # Example Input 5 1 2 2 2 1 Output 3 Input 10 4 4 4 4 5 5 6 6 6 6 Output 4 Input 8 1 1 1 1 1 1 1 1 Output 8 # Explanation In the first example, the longest subarray with identical elements is `[2, 2, 2]`, which has a length of 3. In the second example, there are two longest subarrays with identical elements (`[4, 4, 4, 4]` and `[6, 6, 6, 6]`), each with a length of 4. In the third example, the entire array consists of identical elements `[1, 1, 1, 1, 1, 1, 1, 1]`, so the length is 8.","solution":"def longest_subarray_length(A): Returns the length of the longest subarray where all elements are identical. max_len = 1 current_len = 1 for i in range(1, len(A)): if A[i] == A[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"There is a magical kingdom with N dragons, each with a power level. To maintain balance in the kingdom, the kings need to find the second highest unique power among these dragons. If there is no second highest unique power, return -1. The power levels of the dragons are given in an array. Input ::: First line of input contains N, denoting the number of dragons. Next line contains N space-separated integers denoting the power levels of the dragons. Output ::: Print the second highest unique power level of the dragons. If there is no such power level, print -1. Constraints ::: 1 ≤ N ≤ 10^6, 0 ≤ power level of dragons ≤ 10^9. SAMPLE INPUT 6 3 3 5 5 8 2 SAMPLE OUTPUT 5 Explanation: The unique power levels are [2, 3, 5, 8], among which the second highest is 5.","solution":"def second_highest_unique_power(n, power_levels): Returns the second highest unique power level among dragons or -1 if there\'s no second highest unique power. unique_power_levels = list(set(power_levels)) if len(unique_power_levels) < 2: return -1 unique_power_levels.sort(reverse=True) return unique_power_levels[1]"},{"question":"As a spaceship captain, you are responsible for distributing supplies (fuel, food, and water) to various planets in your sector. Each planet has different requirements for each type of supply, and you have a limited amount of each supply on your spaceship. Your goal is to determine the maximum number of planets you can fully supply with the current resources you have. Input The first line of input contains three integers, F, L, and W (1 ≤ F, L, W ≤ 1000), representing the amount of fuel, food, and water available on your spaceship, respectively. The second line contains a single integer n (1 ≤ n ≤ 100) representing the number of planets in your sector. The next n lines each contain three integers, fi, li, and wi (1 ≤ fi, li, wi ≤ 100), representing the fuel, food, and water required by the i-th planet. Output Your program should output just one integer — the maximum number of planets you can fully supply with the given amounts of resources. Examples Input 100 200 300 3 50 100 150 80 80 80 40 40 60 Output 2 Input 50 50 50 4 10 10 10 20 20 20 30 30 30 40 40 40 Output 2 Input 500 500 500 5 100 100 100 150 150 150 200 200 200 250 250 250 300 300 300 Output 3","solution":"def max_planets(fuel, food, water, planets): Determine the maximum number of planets that can be fully supplied given the resources. :param fuel: The amount of fuel available :param food: The amount of food available :param water: The amount of water available :param planets: List of tuples where each tuple contains the fuel, food, and water required by a planet :return: The maximum number of planets that can be fully supplied count = 0 planets.sort(key=lambda x: (x[0] + x[1] + x[2])) for fi, li, wi in planets: if fuel >= fi and food >= li and water >= wi: fuel -= fi food -= li water -= wi count += 1 return count"},{"question":"In a bustling metropolis, the city council has decided to install new public bike-sharing stations. These stations need to be strategically placed to ensure maximum coverage and accessibility for the residents. The city is laid out as a grid of streets that run east-west and north-south. The objective is to place the bike-sharing stations in such a way that the maximum distance any resident has to walk to reach a station is minimized. You have been tasked with writing a program to determine the optimal locations for these stations. # Input The input is given in the following format: ``` m n b x1 y1 x2 y2 :: xb yb ``` - `m` (1 ≤ m ≤ 1000): the number of east-west streets. - `n` (1 ≤ n ≤ 1000): the number of north-south streets. - `b` (1 ≤ b ≤ 1000): the number of bike-sharing stations to be installed. - `xi yi`: the coordinates of the `i-th` potential location for a bike-sharing station. (1 ≤ xi ≤ m, 1 ≤ yi ≤ n) # Output Output a list of `b` coordinates, each represented as `(xi, yi)` that minimizes the maximum distance any resident has to walk to reach a bike-sharing station. If there are multiple solutions, output any one of them. # Example Input ``` 5 5 2 1 2 2 3 4 4 3 1 5 5 ``` Output ``` (2, 3) (4, 4) ``` Input ``` 3 3 1 1 1 2 2 3 3 ``` Output ``` (2, 2) ``` # Explanation In the first example, the optimal stations should ideally be placed at coordinates `(2,3)` and `(4,4)` to ensure that the maximum walking distance is minimized. In the second example, placing the station at `(2,2)` minimizes the maximum walking distance for all residents.","solution":"def optimal_bike_stations(m, n, b, locations): Determines the optimal locations for bike-sharing stations to minimize the maximum walking distance any resident has to walk. Parameters: m (int): Number of east-west streets. n (int): Number of north-south streets. b (int): Number of bike-sharing stations to be installed. locations (list of tuples): List of potential coordinates for the stations. Returns: list of tuples: Optimal coordinates for the bike-sharing stations. # For simple heuristic approach: # 1. Calculate the median of the potential locations\' x and y coordinates # 2. Use those median values as the center and choose up to `b` closest locations from the center xs = sorted(x for x, y in locations) ys = sorted(y for x, y in locations) median_x = xs[len(xs) // 2] median_y = ys[len(ys) // 2] # Sort locations by distance from the median point locations.sort(key=lambda loc: abs(loc[0] - median_x) + abs(loc[1] - median_y)) # Select b locations that are closest to the median point return locations[:b]"},{"question":"You are given a binary tree. Write a function to determine the lowest common ancestor (LCA) of two given nodes in the tree. The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in the tree that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself). Input - A function will be provided to construct a binary tree from a list of strings. - A function call will provide the root of the binary tree and two nodes `p` and `q`. Output - The function should return the LCA node of the two given nodes `p` and `q`. Example ```python # Example of tree construction # from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def stringToTreeNode(input: str) -> TreeNode: if not input: return None inputValues = [s.strip() for s in input.strip(\'[]\').split(\',\')] root = TreeNode(int(inputValues[0])) nodeQueue = [root] front = 0 index = 1 while index < len(inputValues): node = nodeQueue[front] front += 1 if index < len(inputValues) and inputValues[index] != \\"null\\": leftNumber = int(inputValues[index]) node.left = TreeNode(leftNumber) nodeQueue.append(node.left) index += 1 if index < len(inputValues) and inputValues[index] != \\"null\\": rightNumber = int(inputValues[index]) node.right = TreeNode(rightNumber) nodeQueue.append(node.right) index += 1 return root def lowestCommonAncestor(root: \'TreeNode\', p: \'TreeNode\', q: \'TreeNode\') -> \'TreeNode\': # Code implementation goes here ``` For example, given the binary tree: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` and the nodes `p = 5`, `q = 1`, the LCA will be 3. Example function calls with expected outputs: Example 1: ``` assert lowestCommonAncestor(stringToTreeNode(\\"[3,5,1,6,2,0,8,null,null,7,4]\\"), TreeNode(5), TreeNode(1)).val == 3 ``` Example 2: ``` assert lowestCommonAncestor(stringToTreeNode(\\"[3,5,1,6,2,0,8,null,null,7,4]\\"), TreeNode(5), TreeNode(4)).val == 5 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def stringToTreeNode(input: str) -> TreeNode: if not input: return None inputValues = [s.strip() for s in input.strip(\'[]\').split(\',\')] root = TreeNode(int(inputValues[0])) nodeQueue = [root] front = 0 index = 1 while index < len(inputValues): node = nodeQueue[front] front += 1 if index < len(inputValues) and inputValues[index] != \\"null\\": leftNumber = int(inputValues[index]) node.left = TreeNode(leftNumber) nodeQueue.append(node.left) index += 1 if index < len(inputValues) and inputValues[index] != \\"null\\": rightNumber = int(inputValues[index]) node.right = TreeNode(rightNumber) nodeQueue.append(node.right) index += 1 return root def lowestCommonAncestor(root: \'TreeNode\', p: \'TreeNode\', q: \'TreeNode\') -> \'TreeNode\': if root is None or root.val == p.val or root.val == q.val: return root left = lowestCommonAncestor(root.left, p, q) right = lowestCommonAncestor(root.right, p, q) if left and right: return root return left if left is not None else right"},{"question":"Snuke has a grid of size NxM where each cell in the grid can be either empty (represented by \'.\') or an obstacle (represented by \'#\'). Snuke wants to place exactly K yellow balls in some of the empty cells in such a way that every row and every column contains at least one yellow ball. Given the initial configuration of the grid, determine whether it is possible to place the balls according to the described constraints. If there is a possible arrangement, output \\"Yes\\". Otherwise, output \\"No\\". Constraints * 1 leq N, M leq 50 * 1 leq K leq N * M Input Input is given from Standard Input in the following format: N M K grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] Output Print \\"Yes\\" if there is a possible way to place the balls, otherwise print \\"No\\". Examples Input 3 3 3 . . # . # . # . . Output Yes Input 2 3 3 . # . # # . Output No","solution":"def can_place_balls(n, m, k, grid): Determines if it is possible to place exactly K yellow balls in the grid such that every row and every column contains at least one yellow ball. empty_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'.\'] if len(empty_cells) < k: return \\"No\\" # Check if each row has at least one empty cell for i in range(n): if all(grid[i][j] == \'#\' for j in range(m)): return \\"No\\" # Check if each column has at least one empty cell for j in range(m): if all(grid[i][j] == \'#\' for i in range(n)): return \\"No\\" return \\"Yes\\" # Example Usage # n, m, k = 3, 3, 3 # grid = [ # [\'.\', \'.\', \'#\'], # [\'.\', \'#\', \'.\'], # [\'#\', \'.\', \'.\'] # ] # print(can_place_balls(n, m, k, grid)) # Output: Yes"},{"question":"# Problem: Special Subsequence for an Array You are given an array of integers `a` of length `n` where each element `a[i]` belongs to the range [1, `k`]. You need to find a subsequence `s` from the array `a` such that: 1. The subsequence `s` contains each integer from 1 to `k` exactly once. 2. The length of the subsequence `s` should be as large as possible while satisfying condition 1. In case there are multiple solutions, output any one of them. Input - The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 10^5, 1 ≤ `k` ≤ 50). - The second line contains `n` integers representing the array `a` where each element is between 1 and `k`. Output - A single integer `m` representing the length of the longest subsequence `s` that satisfies the given conditions. - The next line contains `m` integers, the elements of the subsequence `s`. Examples **Example 1:** Input: ``` 9 3 2 1 3 2 2 1 3 1 2 ``` Output: ``` 3 2 1 3 ``` **Example 2:** Input: ``` 10 4 4 3 2 1 4 3 2 1 4 3 ``` Output: ``` 4 4 3 2 1 ``` **Example 3:** Input: ``` 6 2 1 2 2 1 1 2 ``` Output: ``` 2 1 2 ``` Note - In the first example, the subsequence `s` (2, 1, 3) contains each integer from 1 to 3 exactly once. The length of the subsequence is 3. - In the second example, the subsequence `s` (4, 3, 2, 1) contains each integer from 1 to 4 exactly once. The length of the subsequence is 4. - In the third example, the subsequence `s` (1, 2) contains each integer from 1 to 2 exactly once. The length of the subsequence is 2.","solution":"def find_special_subsequence(n, k, a): Finds the longest subsequence s from the array a that contains each integer from 1 to k exactly once. :param n: int, length of the array a :param k: int, the maximum integer in the array :param a: list of int, the array containing integers from 1 to k :return: tuple (m, s) where m is the length of the subsequence s and s is the list of the subsequence elements seen = [False] * (k + 1) subsequence = [] for num in a: if num <= k and not seen[num]: subsequence.append(num) seen[num] = True if all(seen[1:k+1]): break return len(subsequence), subsequence"},{"question":"Write a program that reads an integer n and prints the nth number in the Fibonacci sequence. You can assume that n ≤ 30. Input An integer n (1 ≤ n ≤ 30) in a line. Output Print the nth Fibonacci number in a line. Example Input 7 Output 13","solution":"def fibonacci(n): Returns the nth Fibonacci number. Args: n: an integer indicating the position in the Fibonacci sequence (1 ≤ n ≤ 30) Returns: The nth Fibonacci number. if n <= 0: raise ValueError(\\"The input n should be a positive integer.\\") a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"Consider an array `arr` of `n` positive integers. You can perform the following operation any number of times: - Choose any two distinct elements `a` and `b` in the array, such that `a` is greater than `b`, and replace `a` with `a - b`. Your task is to determine the maximum possible greatest common divisor (GCD) of all elements in the array after applying the operation any number of times. You have to answer `t` independent test cases. Input - The first line contains a single integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. - Each of the next `t` lines consists of two parts: - The first part is an integer `n` (1 ≤ n ≤ 10^4) — the number of elements in the array. - The second part is `n` integers: `arr1, arr2, ..., arrn` (1 ≤ arri ≤ 10^9) — the elements of the array. Output For each test case, output the maximum possible GCD of the array after performing the operation any number of times. Example Input 3 3 10 15 20 4 7 5 9 6 2 14 28 Output 5 1 14 Note In the first test case: - Choose `20` and `15` and replace `20` with `20 - 15 = 5`. Now the array is `[10, 15, 5]`. - Choose `10` and `5` and replace `10` with `10 - 5 = 5`. Now the array is `[5, 15, 5]`. - Choose `15` and `5` and replace `15` with `15 - 5 = 10`. Now the array is `[5, 10, 5]`. - Continue applying the operations to eventually get `[5, 5, 5]`, which gives a GCD of `5`. In the second test case: - Any operations will lead the array to contain elements with no common divisor other than `1`. In the third test case: - Since `14` and `28` have a common divisor of `14` from the beginning, no operations are needed. The maximum possible GCD is `14`.","solution":"import math def max_possible_gcd(n, arr): This function returns the maximum possible GCD of the array elements after performing the allowed operations any number of times. Parameters: n (int): The number of elements in the array. arr (list): List containing the array elements. Returns: int: The maximum possible GCD of the array elements. if n == 1: return arr[0] # Compute the GCD of the entire array result_gcd = arr[0] for num in arr[1:]: result_gcd = math.gcd(result_gcd, num) return result_gcd def process_test_cases(t, test_cases): This function processes multiple test cases and returns their results. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains \'n\' and the list of integers Returns: list: List of results of all test cases results = [] for i in range(t): n, arr = test_cases[i] results.append(max_possible_gcd(n, arr)) return results"},{"question":"You are given a sequence of n integers representing the heights of bars in a histogram. Your goal is to determine the area of the largest rectangle that can be formed within the histogram, where the rectangle is contiguous and can stretch across multiple bars but must be aligned at the bottom. Input The first line of input contains one integer n (1 ≤ n ≤ 100 000): the number of bars in the histogram. The next line of input contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1 000 000): the heights of the bars in the histogram. Output Output one integer: the area of the largest rectangle that can be formed within the given histogram. Example Input 7 2 1 5 6 2 3 1 Output 10 Note The largest rectangle can be formed between the third and fourth bars (with heights 5 and 6) and stretches across two bars with a total area of 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed within the given histogram. :param heights: List of integers representing the heights of the bars in the histogram :return: Integer representing the largest rectangle area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() if not stack: area = heights[top_of_stack] * index else: area = heights[top_of_stack] * (index - stack[-1] - 1) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() if not stack: area = heights[top_of_stack] * index else: area = heights[top_of_stack] * (index - stack[-1] - 1) max_area = max(max_area, area) return max_area"},{"question":"A popular puzzle game company has decided to add an additional feature to their flagship game. The new feature will allow users to create customized puzzles using letters and words from a predefined dictionary. Your task is to write a function that validates whether a given target word can be formed using letters from the dictionary. The dictionary consists of several words, and each word\'s letters can be rearranged to form new words. Your function should determine if the target word can be formed by concatenating one or more dictionary words. Each letter in the dictionary words can only be used once per occurrence of the word. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of words in the dictionary. - The following `n` lines each contain a dictionary word. Each word consists of lowercase English letters and has a length between 1 and 100. - The last line contains a target word which also consists of lowercase English letters and has a length between 1 and 100,000. # Output - Output \\"YES\\" if the target word can be formed, otherwise output \\"NO\\". # Examples Input ``` 5 hello world these are words helloworldthese ``` Output ``` YES ``` Input ``` 4 apple pen pine pineapple pineapplepenapple ``` Output ``` YES ``` Input ``` 3 cat dog fish dogcatfishcat ``` Output ``` NO ``` # Notes In the first example, the target word \\"helloworldthese\\" can be formed by concatenating \\"hello\\", \\"world\\", and \\"these\\". Each word from the dictionary can be used in its entirety, and letters can only be used as many times as they appear in the dictionary. In the second example, the target word \\"pineapplepenapple\\" can be formed by concatenating \\"pineapple\\", \\"pen\\", and \\"apple\\". In the third example, although all the words can be completely rearranged, \\"dogcatfishcat\\" cannot be formed by concatenating all given dictionary words in any order because the word \\"cat\\" appears twice without sufficient words in the dictionary to support the duplication. Implement your function to validate the target word according to the given dictionary rules.","solution":"def can_form_target_word(n, dictionary, target): Determines if the target word can be formed by concatenating one or more dictionary words, using each letter in the dictionary words at most once per occurrence. Parameters: n (int): Number of words in the dictionary. dictionary (list of str): List of dictionary words. target (str): The target word to validate. Returns: str: \\"YES\\" if the target word can be formed, otherwise \\"NO\\". from collections import Counter # Count occurrence of each character in the target word target_count = Counter(target) # Sum up counts of each character in all dictionary words dict_count = Counter() for word in dictionary: dict_count += Counter(word) # Check if target\'s character counts can be covered by the dictionary character counts for char, count in target_count.items(): if dict_count[char] < count: return \\"NO\\" return \\"YES\\""},{"question":"Maria enjoys playing a game with her friends involving number sequences. The rules are simple: she starts with an integer and repeatedly applies a series of operations to transform it into a sequence of other integers. The operations involve adding a specific value to the current number until it exceeds a given limit. Each operation is defined by adding a constant value `d` and checking against a maximum value `m`. Maria is curious to know how many distinct numbers can be generated before the current number exceeds the maximum value. She wants to track the sequence and count the unique integers up to that maximum value. Your task is to help Maria determine the number of distinct integers in this sequence. Input: - A single line containing three integers `a`, `m`, and `d` where `1 ≤ a, m, d ≤ 10^9`. `a` is the starting integer, `m` is the maximum value the sequence should not exceed, and `d` is the constant value added at each step. Output: - Print a single integer representing the count of distinct numbers in the sequence that can be formed by repeatedly adding `d` to `a` without exceeding `m`. Examples: Input: 2 20 3 Output: 7 Input: 5 15 4 Output: 3 Input: 1 1 1 Output: 1 Note: In the first example, starting with 2, the sequence generated by repeatedly adding 3 is: 2, 5, 8, 11, 14, 17, 20. There are 7 distinct numbers before the sequence exceeds 20. In the second example, the sequence generated by starting with 5 and adding 4 is: 5, 9, 13. These are 3 distinct numbers before exceeding 15. In the third example, starting at 1 and adding 1 repeatedly will only generate 1 before exceeding the maximum value of 1.","solution":"def count_distinct_numbers(a, m, d): Returns the count of distinct numbers generated by starting at `a`, adding `d` repeatedly, and stopping before the number exceeds `m`. distinct_count = 0 while a <= m: distinct_count += 1 a += d return distinct_count"},{"question":"Function Efficiency Analysis Bytecorp is planning to optimize a set of functions used in their software. They have provided a simplified prototype code and want to identify which function is the most time-consuming. A function is defined as the most time-consuming if it has the highest sum of its instruction execution times. Consider the following n functions, each represented by a unique integer ID from 1 to n. Each function consists of m instruction execution times, listed in a provided list. Your task is to determine the ID of the function with the highest total execution time. If multiple functions have the same highest execution time, return the smallest function ID. Function IDs start from 1. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) - the number of functions. - The second line contains a single integer m (1 ≤ m ≤ 10^5) - the number of instruction execution times per function. - The next n lines each contain m space-separated integers representing the execution times of each instruction for the respective function. Each integer is positive and does not exceed 1000. # Output Print a single integer, the ID of the function with the highest total execution time. If there are multiple such functions, print the smallest ID. # Example Input ``` 3 3 5 10 15 10 10 10 5 7 25 ``` Output ``` 3 ``` Explanation 1. Function 1 total execution time: 5 + 10 + 15 = 30 2. Function 2 total execution time: 10 + 10 + 10 = 30 3. Function 3 total execution time: 5 + 7 + 25 = 37 Since function 3 has the highest execution time, the output is 3.","solution":"def find_most_time_consuming_function(n, m, execution_times): Returns the function ID with the highest total execution time. If there are multiple such functions, returns the smallest ID. n: int - number of functions m: int - number of instruction execution times per function execution_times: List[List[int]] - List of lists containing the execution times for each function max_total_time = -1 function_with_max_time = -1 for i in range(n): total_time = sum(execution_times[i]) if total_time > max_total_time or (total_time == max_total_time and function_with_max_time > i + 1): max_total_time = total_time function_with_max_time = i + 1 return function_with_max_time"},{"question":"You are given an m x n grid representing a maze. Each cell in the grid is either an open space \'O\' or a wall \'X\'. The goal is to determine if there\'s a path from the top-left corner to the bottom-right corner of the grid, only moving up, down, left, or right through open spaces. Input The input starts with a single integer t (1 ≤ t ≤ 500) — the number of test cases. Each test case begins with two integers m and n (1 ≤ m, n ≤ 100), representing the dimensions of the maze. The next m lines each contain a string of length n consisting of characters \'O\' and \'X\', representing the grid. Output For each test case, output \\"YES\\" if a path exists from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). Example Input 3 3 3 OXO OOX XOX 4 4 OOOO XXOX XXOX OOOX 2 2 OX XO Output NO YES NO Explanation For the first test case, there\'s no path from the top-left corner to the bottom-right corner. For the second test case, a possible path is as follows: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3). For the third test case, there\'s no path from the top-left corner to the bottom-right corner.","solution":"def is_path_exist(grid): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'X\' or visited[x][y]: return False if x == m - 1 and y == n - 1: return True visited[x][y] = True # Move in four possible directions: down, up, right, left if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False m = len(grid) n = len(grid[0]) visited = [[False for _ in range(n)] for _ in range(m)] return dfs(0, 0) def solve(mazes): results = [] for maze in mazes: if is_path_exist(maze): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) index = 1 mazes = [] for _ in range(t): m, n = map(int, lines[index].split()) index += 1 maze = [] for _ in range(m): maze.append(list(lines[index])) index += 1 mazes.append(maze) return mazes def main(input_data): mazes = process_input(input_data) results = solve(mazes) for result in results: print(result)"},{"question":"A scientist discovered a new pattern in a specific sequence of numbers known as Fibonacci Primes. A Fibonacci Prime is a Fibonacci number that is also a prime number. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, the sequence starts 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,... Write a program that finds and prints the first N Fibonacci Primes. You can assume that the input number N will always be a positive integer and less than or equal to 100. Input The input will consist of a single integer N, indicating the number of Fibonacci Primes that must be found. Output The output will be the first N Fibonacci Primes separated by spaces. Example Input 5 Output 2 3 5 13 89 Explanation The first 5 Fibonacci Primes are 2, 3, 5, 13, and 89.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_fibonacci_primes(n): Generate the first N Fibonacci Primes. fibonacci_primes = [] a, b = 0, 1 while len(fibonacci_primes) < n: a, b = b, a + b if is_prime(a): fibonacci_primes.append(a) return fibonacci_primes def find_fibonacci_primes(n): Find the first N Fibonacci Primes and return them separated by spaces. fibonacci_primes = generate_fibonacci_primes(n) return \\" \\".join(map(str, fibonacci_primes))"},{"question":"Write a function that takes an integer N and returns all the prime numbers less than N in ascending order. Constraints * 1 leq N leq 10,000 Input The input is given in the following format. N An integer N. Output Print all prime numbers less than N, separated by a space, in a single line. Example Input 10 Output 2 3 5 7","solution":"def primes_less_than(N): Returns a list of all prime numbers less than N. if N <= 2: return [] sieve = [True] * N sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N, start): sieve[multiple] = False primes = [num for num in range(N) if sieve[num]] return primes"},{"question":"A chef in a renowned restaurant has a list of ingredients needed to prepare different dishes. Each ingredient is represented by an uppercase letter from \'A\' to \'Z\'. Some ingredients are needed multiple times for the same dish. The chef has access to a stock of ingredients in the pantry, also represented by uppercase letters. The goal is to determine whether the chef can prepare the desired dish with the available ingredients in the pantry. Write a function `can_prepare_dish(ingredients_needed, pantry_stock)` that takes two strings: - `ingredients_needed`: a string where each character represents an ingredient required for the dish. - `pantry_stock`: a string where each character represents an available ingredient in the pantry. The function should return `True` if the chef can prepare the dish with the available ingredients, otherwise return `False`. Constraints: - The length of `ingredients_needed` can be up to 10^5 characters. - The length of `pantry_stock` can be up to 10^5 characters. - Both strings will only contain uppercase letters. Examples: ``` can_prepare_dish(\\"AAB\\", \\"ABBA\\") => True can_prepare_dish(\\"AAB\\", \\"ABC\\") => False can_prepare_dish(\\"AAABBB\\", \\"ABABABAB\\") => True can_prepare_dish(\\"ABC\\", \\"ACB\\") => True can_prepare_dish(\\"AAA\\", \\"AA\\") => False ```","solution":"from collections import Counter def can_prepare_dish(ingredients_needed, pantry_stock): Determines if the chef can prepare the dish with the available ingredients. :param ingredients_needed: str, ingredients required for the dish :param pantry_stock: str, ingredients available in the pantry :return: bool, True if the dish can be prepared, False otherwise needed_counts = Counter(ingredients_needed) stock_counts = Counter(pantry_stock) for ingredient, count in needed_counts.items(): if stock_counts[ingredient] < count: return False return True"},{"question":"A small manufacturing company has several machines, each of which can perform a specific set of tasks. Each task has a certain completion time and must be assigned to exactly one machine. The problem is to assign the tasks to the machines such that the time at which the last task is completed (the makespan) is minimized. # Input The first line contains two integers `M` (1 ≤ M ≤ 1000), the number of machines, and `T` (1 ≤ T ≤ 10000), the number of tasks. The second line contains `T` integers representing the completion times of the tasks. # Output Output a single integer, the minimized makespan. # Examples Example 1 **Input:** ``` 3 5 2 14 4 16 6 ``` **Output:** ``` 16 ``` **Explanation:** One possible optimal assignment: - Machine 1: Task completion times [2, 14] - Machine 2: Task completion times [16] - Machine 3: Task completion times [4, 6] In this case, the task completed last is at time 16. Example 2 **Input:** ``` 2 4 1 2 3 4 ``` **Output:** ``` 5 ``` **Explanation:** One possible optimal assignment: - Machine 1: Task completion times [1, 4] - Machine 2: Task completion times [2, 3] In this case, the task completed last is at time 5.","solution":"import heapq def minimize_makespan(M, T, task_times): # Min heap to keep track of the current load on each machine machines = [0] * M heapq.heapify(machines) # Sort tasks in descending order task_times.sort(reverse=True) # Assign each task to the machine with the least current load for time in task_times: min_loaded_machine = heapq.heappop(machines) min_loaded_machine += time heapq.heappush(machines, min_loaded_machine) # The makespan will be the maximum load on any machine return max(machines) # Example usage if __name__ == \\"__main__\\": M = 2 T = 4 task_times = [1, 2, 3, 4] print(minimize_makespan(M, T, task_times)) # Output: 5"},{"question":"You are given a list of N integers. Determine if there exists a pair of integers in the list such that their sum is equal to a given integer K. Constraints * All values in input are integers. * 1 leq N leq 100 * 1 leq each integer in the list leq 1000 * 1 leq K leq 2000 Input Input is given from Standard Input in the following format: N K a1 a2 ... aN Output If there exists a pair of integers in the list whose sum equals K, print `Yes`; otherwise, print `No`. Examples Input 5 9 1 2 3 4 5 Output Yes Input 4 8 1 3 4 6 Output No","solution":"def has_pair_with_sum(arr, n, k): Determine if there exists a pair of integers in the list such that their sum is equal to k. :param arr: List of integers :param n: Integer, number of integers in the list :param k: Integer, the target sum :return: String \\"Yes\\" if there exists such a pair, otherwise \\"No\\" seen = set() for number in arr: if k - number in seen: return \\"Yes\\" seen.add(number) return \\"No\\""},{"question":"Alice and Bob are playing a game with a string consisting of lowercase English letters. The game is played in rounds, and in each round, one of the players removes a contiguous substring from the string if the substring consists of identical characters. For instance, if the string is \\"aaabbaaa\\", valid moves include removing \\"aaa\\" (a substring of length 3 consisting of the character \'a\'), \\"bb\\" (a substring of length 2 consisting of the character \'b\'), or either of the other \\"aaa\\"s. The player who removes a substring reduces the string by that amount, and the turn passes to the other player. The game continues until the string is empty. The players play optimally, meaning that both Alice and Bob play in such a way as to maximise their chances of winning. Alice always goes first. Given a string that Alice and Bob will be playing with, determine who will win the game if both players play optimally. Input The input consists of a single string `s` where 1 ≤ |s| ≤ 10^5. The string contains only lowercase English letters. Output Print \\"Alice\\" if Alice wins the game, or \\"Bob\\" if Bob wins, assuming both play optimally. Examples Input aaaabbbaaa Output Alice Input aabb Output Bob Note In the first example, Alice can start by removing \\"aaaa\\" or \\"bbb\\". Regardless of which move she makes, she forces Bob into a position where he must remove the next biggest uniform substring. Eventually, Alice will be able to make the last move, resulting in her winning the game. In the second example, regardless of Alice\'s move, Bob will always be able to perform the last removal, leading to his victory.","solution":"def winner(string): Function to determine the winner of the game given the input string. # Initialize the count of moves moves = 0 # Track the current character current_char = string[0] # Count the number of segments of consecutive identical characters for char in string[1:]: if char != current_char: moves += 1 current_char = char # Add the last segment moves += 1 # If the total moves is odd, Alice wins; otherwise, Bob wins if moves % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a binary tree with \'N\' nodes, where each node contains an integer value. The root node is at level 1, its children are at level 2, and so on. A level of a tree is defined as the set of all nodes at the same distance from the root. We define the \\"beauty\\" of a binary tree as the sum of the products of node values and their corresponding levels. Specifically, the beauty of the tree is calculated as follows: text{beauty} = sum_{text{each node } i} (text{node value } times text{level of } i) Given a binary tree, compute its beauty. # Input - The first line contains an integer N (1 ≤ N ≤ 100,000), the number of nodes in the tree. - The second line contains N integers representing the node values (|node_value| ≤ 10^5) in level-order traversal (breadth-first order). - The following N lines each contain two integers a and b, representing the left and right child indices of the i^{th} node in 0-based indexing. If a node does not have a child on a particular side, -1 is given. Node 0 is the root node. # Output - Print a single integer, the beauty of the binary tree. If the result is too large, return the result modulo 10^9 + 7. # Examples Input ``` 5 1 2 3 4 5 1 2 3 4 -1 -1 -1 -1 -1 -1 ``` Output ``` 38 ``` # Note In the given example, we have: - Root node at level 1 with value 1. - Nodes 2 and 3 at level 2 with values 2 and 3 respectively. - Nodes 4 and 5 at level 3 with values 4 and 5 respectively. The beauty of the tree is calculated as: 1 times 1 + 2 times 2 + 3 times 2 + 4 times 3 + 5 times 3 = 1 + 4 + 6 + 12 + 15 = 38","solution":"def tree_beauty(N, node_values, children): MOD = 10**9 + 7 from collections import deque # Initialize beauty sum beauty_sum = 0 # Breadth-first search (BFS) queue = deque([(0, 1)]) # queue of (current_node_index, current_level) while queue: node_index, level = queue.popleft() # Add current node beauty to total beauty sum beauty_sum = (beauty_sum + node_values[node_index] * level) % MOD left_child, right_child = children[node_index] if left_child != -1: queue.append((left_child, level + 1)) if right_child != -1: queue.append((right_child, level + 1)) return beauty_sum # Example usage: # N = 5 # node_values = [1, 2, 3, 4, 5] # children = [(1, 2), (3, 4), (-1, -1), (-1, -1), (-1, -1)] # print(tree_beauty(N, node_values, children)) # Output: 38"},{"question":"An exploration company is planning a series of mining expeditions on Mars. They have n mineral deposits identified across the surface of Mars. For each mineral deposit, they know the amount of minerals it contains and the cost to mine it. The company\'s goal is to maximize the total amount of minerals collected while ensuring that the total cost does not exceed a given budget. Write a program to determine the maximum amount of minerals that can be collected within a given budget. Input: - The first line contains two integers n and B (1 ≤ n ≤ 1000, 1 ≤ B ≤ 10^9) — the number of mineral deposits and the budget. - Each of the next n lines contains two integers m_i and c_i (0 ≤ m_i, c_i ≤ 10^6), representing the amount of minerals and the cost of mining the ith deposit. Output: - Output a single integer — the maximum amount of minerals that can be collected without exceeding the budget B. Example: Input: 4 10 5 4 4 3 3 2 7 6 Output: 12 Input: 3 15 10 5 8 7 7 8 Output: 18 Input: 3 1 5 2 3 2 2 2 Output: 0 Note: In the first example, the optimal choice is to mine the 1st, 2nd, and 3rd deposits with a total cost of 9 and a total mineral amount of 12. In the second example, the optimal choice is to mine the 1st and 2nd deposits with a total cost of 12 and a total mineral amount of 18. In the third example, since the budget is only 1, no deposit can be mined, resulting in 0 minerals collected.","solution":"def max_minerals(n, B, deposits): # Using Dynamic Programming to solve the knapsack like problem. dp = [0] * (B + 1) for m, c in deposits: if c <= B: for j in range(B, c - 1, -1): dp[j] = max(dp[j], dp[j - c] + m) return dp[B] # Example usage: # n = 4 # B = 10 # deposits = [(5, 4), (4, 3), (3, 2), (7, 6)] # print(max_minerals(n, B, deposits)) # Output: 12"},{"question":"A factory has a series of machines arranged in a line, each performing a specific task on products that pass through them one by one. The factory is controlled by computer software that optimizes the sequence in which products go through the machines. A higher priority product may skip the line to be processed earlier. Each product has a specific priority value between 1 and 100. The lower the number, the higher the priority (e.g., 1 has the highest priority, 100 has the lowest). Your job is to implement a function that will arrange the products to be processed in optimal priority order given their initial sequence. Write a program that reads the number of products and their priority values, and then outputs the optimal sequence in which these products should be processed. Input The input consists of multiple datasets. For each dataset, the first line contains an integer n, the number of products (1 ≤ n ≤ 100). The second line contains n integers, each representing the priority value of a product. The end of input is indicated by a line containing a single value 0. Output For each dataset, output a single line of n integers representing the priority values of the products arranged in optimal processing order (i.e., from highest to lowest priority). Example Input 5 5 3 8 2 6 3 10 1 20 0 Output 2 3 5 6 8 1 10 20","solution":"def arrange_products(input_data): Arrange products based on their priority values in ascending order. output_data = [] i = 0 while i < len(input_data): n = int(input_data[i]) if n == 0: break priorities = list(map(int, input_data[i + 1].split())) sorted_priorities = sorted(priorities) output_data.append(\' \'.join(map(str, sorted_priorities))) i += 2 return output_data"},{"question":"You are managing a software project with multiple modules. Each module depends on various other modules to function correctly. Your task is to determine the order in which the modules should be initialized, such that no module is initialized before all of its dependencies have been initialized. Each module is identified by a unique name and has zero or more dependencies listed after it. If a module has no dependencies, it can be initialized at any time. If a module has dependencies, it can only be initialized after all of its dependencies have been initialized. Your program should read a list of modules with their dependencies and output a valid initialization order. If there are multiple valid orders, any one of them is acceptable. If it is impossible to initialize all modules due to circular dependencies, output \\"IMPOSSIBLE\\". Input The input is a sequence of datasets, each being in the following format: m module1:dependency1,1,...,dependency1,d1. . . . modulei:dependencymi,1,...,dependencymi,di. . . . modulem:dependencym,1,...,dependencym,dm. The first line contains m, which represents the number of modules and is a positive integer no more than 1000. Each of the following m lines contains the dependency information of a module: modulei (1 ≤ i ≤ m) is the name of the i-th module and is followed by a colon (:) and then the list of its di dependencies that are delimited by a comma (,) and terminated by a period (.). If a module has no dependencies, just a colon and a period follow the module’s name (e.g., `modulex:.`). Those module names are mutually different. Each di (1 ≤ i ≤ m) is between 0 and 100, inclusive. The names of the modules and their dependencies are strings of lowercase letters and numbers of length between 1 and 15, inclusive. The end of the input is indicated by a line containing a zero. Output For each dataset, output a valid order of initialization of the modules, one module per line. If there are multiple valid orders, any one of them is acceptable. If it is impossible to initialize all modules, output a single line containing \\"IMPOSSIBLE\\". Example Input 3 module1:module2,module3. module2:. module3:module2. 4 moda:modc. modb:. modc:modb. modd:moda,modb. 3 x:y. y:z. z:x. 0 Output module2 module3 module1 modb modc moda modd IMPOSSIBLE","solution":"def find_initialization_order(modules): from collections import defaultdict, deque graph = defaultdict(list) in_degree = defaultdict(int) for module, dependencies in modules.items(): # Using strip to remove the \'.\' at the end if present dependencies = dependencies.strip(\'.\') if dependencies: dependencies_list = dependencies.split(\',\') for dep in dependencies_list: graph[dep].append(module) in_degree[module] += 1 # Initialize a queue with modules that have no dependencies queue = deque([k for k in modules if in_degree[k] == 0]) initialization_order = [] while queue: node = queue.popleft() initialization_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(initialization_order) == len(modules): return initialization_order else: return [\\"IMPOSSIBLE\\"] def process_datasets(input_str): lines = input_str.strip().split(\'n\') i = 0 result = [] while i < len(lines): m = int(lines[i]) if m == 0: break i += 1 modules = {} for _ in range(m): module_dep = lines[i].split(\':\') modules[module_dep[0]] = module_dep[1] i += 1 result += find_initialization_order(modules) result.append(\'\') return \'n\'.join(result).strip()"},{"question":"Statement You have an array of integers which represents an elevation map where the width of each bar is 1. Write a function to compute how much water it can trap after raining. INPUT FORMAT - The first line contains an integer t, the number of test cases. - Each test case starts with an integer n, the number of elements in the array representing the elevation map\'s height. - The next line contains n space-separated integers, the heights of the elevation map. OUTPUT FORMAT For each test case, output an integer representing the total amount of water trapped. EXAMPLES Input: 2 6 0 1 0 2 1 0 6 2 0 2 0 2 2 Output: 1 4 CONSTRAINTS 1 ≤ t ≤ 10 1 ≤ n ≤ 10000 0 ≤ height of each bar in the elevation map ≤ 10000 EXPLANATION For the first test case, the elevation map [0, 1, 0, 2, 1, 0] will trap 1 unit of water between elevations 1 and 2. For the second test case, the elevation map [2, 0, 2, 0, 2, 2] will trap 4 units of water: 2 units between the first 2 heights and 2 units between the second and third heights.","solution":"def trap_water(elevation_map): Given an elevation map as a list of integers, this function returns the total amount of water trapped. if not elevation_map: return 0 n = len(elevation_map) left_max = [0] * n right_max = [0] * n left_max[0] = elevation_map[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevation_map[i]) right_max[n - 1] = elevation_map[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevation_map[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevation_map[i] return water_trapped def process_input(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] elevation_map = test_cases[i][1:] results.append(trap_water(elevation_map)) return results"},{"question":"You are given a string `s` consisting of lowercase English letters only. You can perform the following operation any number of times: Select two adjacent characters in the string and replace both of them with eiher of the two characters. For example, you can transform \\"aa\\" to \\"aa\\" (unchanged), \\"ab\\" to \\"aa\\" or \\"bb\\", \\"bc\\" to \\"bb\\" or \\"cc\\", etc. Your task is to determine the minimum number of operations required to make all characters in the string the same. If the string is already uniform (all characters are the same), the number of operations is zero. Input - The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. - Each of the next t lines contains a single string `s` (1 ≤ |s| ≤ 200) — the string for the corresponding test case. Output - For each test case, output a single integer — the minimum number of operations required to make all characters in the string the same. Example Input 5 aaab aaaa abca abcabc a Output 1 0 2 5 0","solution":"def min_operations_to_uniform_string(t, strings): Determines the minimum number of operations required to make all characters in the string the same. Parameters: t (int): The number of test cases. strings (list of str): List of strings for each test case. Returns: list of int: The minimum number of operations for each string. results = [] for s in strings: # Find the maximum count of any single character in the string max_count = max(s.count(char) for char in set(s)) # The minimum number of operations is the length of the string minus this count min_operations = len(s) - max_count results.append(min_operations) return results"},{"question":"Vicky is given a string `s` consisting of lowercase English letters. Vicky\'s task is to form the longest possible palindrome by permuting the characters of the string. A palindrome is a word that reads the same backward as forward, such as \\"racecar\\" or \\"a\\". The new string formed from `s` should have the maximum possible length while still satisfying the palindrome property. Write a program that takes the string `s` as input and outputs the length of the longest palindrome that can be formed using the characters of `s`. Input - A single line contains the string `s` (1 ≤ |s| ≤ 106) consisting of lowercase English letters. Output - Output a single integer representing the length of the longest palindrome that can be formed using the characters of `s`. Examples Input abccccdd Output 7 Input aabbcc Output 6 Explanation of examples 1. For the string \\"abccccdd\\", one possible palindrome of maximum length is \\"dccaccd\\" which has a length of 7. 2. For the string \\"aabbcc\\", one possible palindrome of maximum length is \\"abccba\\" which has a length of 6.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed with the characters of s. from collections import Counter count = Counter(s) length = 0 odd_found = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True return length + 1 if odd_found else length"},{"question":"Monica is organizing a conference event with multiple presentation sessions. Each session has a specific start time and end time, defined in minutes from the beginning of the day (e.g., minute 0 is midnight). Given the list of these sessions, she needs to calculate the maximum number of non-overlapping sessions that can be attended. Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of sessions. Each of the next n lines contains two integers s and e (0 ≤ s < e ≤ 1 440) — the start and end times of each session. Output Print a single integer — the maximum number of non-overlapping sessions that can be attended. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 0 6 5 7 8 9 1 4 Output 3 Input 5 1 2 3 4 0 1 5 6 4 5 Output 5 Note In the first example, the first and third sessions are non-overlapping, so the maximum number of sessions that can be attended is 2. In the second example, one possible set of non-overlapping sessions is the first, third, and fourth sessions, so the answer is 3. In the third example, all sessions are non-overlapping, so it is possible to attend all 5 sessions.","solution":"def max_non_overlapping_sessions(sessions): Given a list of sessions where each session is represented as a tuple (start, end), this function returns the maximum number of non-overlapping sessions that can be attended. # Sort sessions based on their end times sessions.sort(key=lambda x: x[1]) max_sessions = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: max_sessions += 1 last_end_time = end return max_sessions"},{"question":"In a small coding competition, participants are required to write a program that simulates the movement of a robot on a grid. The robot starts at position (0, 0) and follows a sequence of commands to move on the grid. There are four types of commands: - \'U\': Move up (increase y coordinate by 1) - \'D\': Move down (decrease y coordinate by 1) - \'L\': Move left (decrease x coordinate by 1) - \'R\': Move right (increase x coordinate by 1) The objective is to determine the final position of the robot after executing all the commands. Input: - The first line contains an integer N, the number of commands. - The second line contains a string of N characters, where each character is one of the four commands (\'U\', \'D\', \'L\', \'R\'). Output: - Print the final coordinates of the robot as two space-separated integers. **Constraints:** 1 ≤ N ≤ 10^5 **SAMPLE INPUT** 6 UUDDLR **SAMPLE OUTPUT** 0 2 Explanation: - Starting at (0, 0), the robot moves up twice to (0, 2). - It then moves down twice returning to (0, 0). - Finally, it moves left to (-1, 0) and right to (0, 0). - The final position is (0, 2).","solution":"def final_position(N, commands): x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Alex is given an n x n grid filled with non-negative integers. He needs to traverse the grid from the top-left corner to the bottom-right corner. He can only move either down or right at any point in time. The goal is to determine the minimum sum of all numbers along his path. Write a function that takes an n x n grid of non-negative integers and returns the minimum sum path from the top-left corner to the bottom-right corner. In the function, the grid will be presented as a two-dimensional list of integers. Input The input starts with a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains a single integer n (1 ≤ n ≤ 100), representing the grid dimensions. The next n lines contain n integers each, representing the grid. Output For each test case, output a single integer representing the minimum sum path for the corresponding grid. Example Input 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 Output 7 3 Explanation For the first example: The path 1 → 3 → 1 → 1 → 1 minimizes the sum to 7. For the second example: The path 1 → 1 → 1 minimizes the sum to 3.","solution":"def min_sum_path(grid): Returns the minimum sum path from the top-left to the bottom-right of the grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first column of the dp table for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row of the dp table for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill up the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def solve(t, test_cases): results = [] for grid in test_cases: results.append(min_sum_path(grid)) return results"},{"question":"In a distant kingdom, a king has a peculiar way of building walls around the castle for protection. He arranges bricks in a specific pattern: given two parameters, h and w, where h is the height (number of rows of bricks) and w is the width (number of bricks per row), the king places bricks such that each row alternates between two different symbols A and B, starting with A in the first row. The task is to generate the wall pattern and verify whether the wall has been built correctly or not. The correct wall should follow the alternating pattern as described. Input - The first line contains two integers, h and w (1 ≤ h, w ≤ 50), representing the height and width of the wall. - The next h lines contain a string of length w, composed of characters A and B only, representing the actual wall built. Output - If the wall has been built correctly according to the pattern, print \\"CORRECT\\". - If the wall does not follow the correct pattern, print \\"INCORRECT\\". Examples Input 4 3 ABA BAB ABA BAB Output CORRECT Input 3 5 ABABA BABAB ABABA Output CORRECT Input 2 4 ABAB AAAA Output INCORRECT Note For the wall to be considered correct: - Each row should alternate between the symbols A and B. - The pattern should start with A in the first row, B in the second row, and so forth.","solution":"def check_wall_pattern(h, w, wall): Checks if the wall has been built correctly according to the specified pattern. Parameters: h (int): the height of the wall (number of rows of bricks) w (int): the width of the wall (number of bricks per row) wall (list of str): the actual wall built as a list of strings Returns: str: \\"CORRECT\\" if the wall follows the alternating pattern, \\"INCORRECT\\" otherwise for i in range(h): expected_row = \\"\\" for j in range(w): if (i + j) % 2 == 0: expected_row += \'A\' else: expected_row += \'B\' if wall[i] != expected_row: return \\"INCORRECT\\" return \\"CORRECT\\""},{"question":"Molly loves collecting antique items and has a collection of N antique pieces. Each antique piece can belong to one of three categories: Vases, Paintings, or Sculptures. The categories of these antiques are given in a string A of length N, where a \\"V\\" indicates a Vase, \\"P\\" indicates a Painting, and \\"S\\" indicates a Sculpture. Molly wants to rearrange her collection so that all the antiques of the same category are displayed together. She can swap any two items in the collection to achieve this. You are tasked with finding out the minimum number of swaps needed to rearrange the antiques such that all Vases, all Paintings, and all Sculptures are grouped together. Input The first line of the input contains a single integer T denoting the number of test cases. Input for each test case consists of two lines. The first line contains an integer N denoting the number of antiques in Molly\'s collection. The second line contains a string A of length N describing the categories of the antiques. Output For each test case, print the minimum number of swaps needed to group all antiques of the same category together. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 Ai = {\'V\', \'P\', \'S\'} Example Input 3 5 VPVPS 3 SSS 6 VPSPVS Output 2 0 3 Explanation: Test 1: One way to arrange the collection is to swap the items at positions 2 and 3, and then the items at positions 4 and 5. The resulting arrangement is \\"VVVPS\\". Test 2: The collection is already grouped by category, so no swaps are needed. Test 3: We can swap positions 2 and 3, and then positions 3 and 6, and finally positions 4 and 5. The resulting arrangement is \\"VVPPSS\\".","solution":"def min_swaps_to_group_antique(N, A): Returns the minimum number of swaps needed to group Vases, Paintings, and Sculptures together. count_v = A.count(\'V\') count_p = A.count(\'P\') count_s = A.count(\'S\') # We decide sections for V, P, S based on their counts. # VV .. VV PP .. PP SS .. SS V_segment = A[:count_v] P_segment = A[count_v:count_v + count_p] S_segment = A[count_v + count_p:] # Counting misplacements in each segment VV_in_V = V_segment.count(\'V\') PP_in_P = P_segment.count(\'P\') SS_in_S = S_segment.count(\'S\') # Proper ones proper = VV_in_V + PP_in_P + SS_in_S # minimum swaps needed to group the categories together return N - proper def solve_min_swaps_to_group_antique_cases(T, cases): results = [] for i in range(T): N = cases[i][0] A = cases[i][1] results.append(min_swaps_to_group_antique(N, A)) return results"},{"question":"You are given an array of integers where some integers are duplicated. Your task is to find all unique integers that occur exactly once in the array and return them in ascending order. For example, given the array `nums = [4, 3, 2, 7, 8, 2, 3, 1]`, the unique integers that occur exactly once are `1, 4, 7, 8`. Implement a function `findUniqueNumbers` that takes an array of integers and returns a sorted list of integers that are unique and appear exactly once in the array. # Input - An integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - An array `nums` of `n` integers (−10^9 ≤ nums[i] ≤ 10^9). # Output - A sorted list of integers that occur exactly once in the array. # Example Input ``` 8 4 3 2 7 8 2 3 1 ``` Output ``` 1 4 7 8 ``` Note: The output must be in ascending order. If there are no unique numbers, return an empty list.","solution":"def findUniqueNumbers(nums): Returns a sorted list of integers that are unique and appear exactly once in the array. # Create a dictionary to count occurrences of each number num_count = {} for num in nums: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 # Filter numbers that occur exactly once and sort them unique_nums = [num for num in num_count if num_count[num] == 1] unique_nums.sort() return unique_nums"},{"question":"The fictional country of Arrayland is undergoing a reorganization of its databases. The administrators need to sort an array of data records, but due to resource limitations, they can only use a specific form of sorting called \\"segment swaps\\". A segment swap consists of reversing any subarray of the original array. Your task is to determine the minimum number of segment swaps required to transform a given array into its sorted form in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output a single integer — the minimum number of segment swaps required to sort the array in non-decreasing order. Examples Input 5 4 3 2 1 5 Output 1 Input 6 1 3 5 2 4 6 Output 3 Note In the first example, you can reverse the subarray [4, 3, 2, 1] to get the sorted array [1, 2, 3, 4, 5]. In the second example, the minimum number of segment swaps required involves reversing three segments: [3, 5, 2], [2, 4], and [3, 5].","solution":"def min_segment_swaps(arr): Determines the minimum number of segment swaps needed to sort the array in non-decreasing order. n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 i = 0 swaps = 0 while i < n: if arr[i] != sorted_arr[i]: j = i while j < n and arr[j] != sorted_arr[i]: j += 1 # Now reverse the subarray to make the first \'i\' segments sorted correctly arr[i:j+1] = arr[i:j+1][::-1] swaps += 1 i += 1 return swaps"},{"question":"In a faraway kingdom, there lives a chivalrous knight named Sir Code-a-lot. The kingdom\'s wise king has set a challenging task for Sir Code-a-lot to prove his worthiness. The king has given him a string S of length N consisting of lowercase English letters. Sir Code-a-lot\'s task is to determine the minimum number of characters he must replace in S such that the string becomes a palindrome. A palindrome is a string that reads the same forward and backward. Sir Code-a-lot is excited to take on this challenge, but he\'s currently on a quest and seeking your assistance to solve this problem. Input The first line of input contains a single integer T denoting the number of test cases. Each test case consists of a single string S. Output For each test case, output the minimum number of characters Sir Code-a-lot must replace to make the string a palindrome. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Example Input 3 abc aab race Output 1 1 2 Explanation Test 1: By replacing \'c\' with \'a\', the string becomes \'aba\', which is a palindrome. Test 2: By replacing the second \'a\' with \'b\', the string becomes \'aba\', which is a palindrome. Test 3: By replacing \'r\' with \'e\' and \'e\' with \'r\', the string becomes \'ecec\', which is a palindrome.","solution":"def min_replacements_to_palindrome(S): Returns the minimum number of characters Sir Code-a-lot must replace to make the string S a palindrome. N = len(S) count = 0 for i in range(N // 2): if S[i] != S[N - i - 1]: count += 1 return count def min_replacements_for_test_cases(T, test_cases): results = [] for S in test_cases: results.append(min_replacements_to_palindrome(S)) return results"},{"question":"You are given a grid of size m x n, where each cell in the grid contains a lowercase letter. Your task is to find out if there exists a cycle of the same letter. A cycle is formed when you can start and end at the same cell, and move only in the four cardinal directions (up, down, left, right) between cells that contain the same letter, without revisiting any cell. Given that the grid has m rows and n columns (1 ≤ m, n ≤ 1000), each cell (i, j) of the grid contains a lowercase letter. Your task is to determine if there\'s a cycle for any letter in the grid. Input The first line of input contains two integers, m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid respectively. The next m lines each contain n characters, representing the grid. Output Print \\"Yes\\" if there exists a cycle of any letter in the grid. Otherwise, print \\"No\\". Example Input 3 4 aaaa abba aaaa Output Yes Input 3 3 abc def ghi Output No Input 4 4 aaaa abca abca aaaa Output Yes","solution":"def find_cycle_in_grid(m, n, grid): def is_valid(x, y, prev_x, prev_y): return 0 <= x < m and 0 <= y < n and (x != prev_x or y != prev_y) def dfs(x, y, start_x, start_y, parent_x, parent_y, letter): visited[x][y] = True for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if is_valid(new_x, new_y, parent_x, parent_y) and grid[new_x][new_y] == letter: if not visited[new_x][new_y]: if dfs(new_x, new_y, start_x, start_y, x, y, letter): return True elif new_x == start_x and new_y == start_y: return True return False directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right visited = [[False] * n for _ in range(m)] for i in range(m): for j in range(n): if not visited[i][j]: if dfs(i, j, i, j, -1, -1, grid[i][j]): return \\"Yes\\" return \\"No\\" # Example usage: m = 3 n = 4 grid = [ \\"aaaa\\", \\"abba\\", \\"aaaa\\" ] print(find_cycle_in_grid(m, n, grid)) # Output: Yes m = 3 n = 3 grid = [ \\"abc\\", \\"def\\", \\"ghi\\" ] print(find_cycle_in_grid(m, n, grid)) # Output: No"},{"question":"Jenya is now working on a new problem involving binary string manipulations. He has a binary string s of length n and two integers a and b. Jenya wants to transform the string s into another binary string t of the same length by performing exactly two types of operations: 1. Flip: Choose any bit in the string and flip it (change 0 to 1 or 1 to 0). 2. Swap: Choose two bits in the string and swap their positions. Jenya can perform the flip operation at most a times and the swap operation at most b times. Determine whether it is possible to transform the binary string s into the binary string t using at most a flips and b swaps. Input The first line contains integers n, a, and b (1 ≤ n ≤ 100, 0 ≤ a, b ≤ 100) — the length of the strings, the maximum number of flip operations, and the maximum number of swap operations, respectively. The second line contains the binary string s. The third line contains the binary string t. Output If it is possible to transform s into t using at most a flips and b swaps, print \\"Yes\\". Otherwise, print \\"No\\". Example Input 5 3 2 11001 01101 Output Yes Input 5 1 1 10100 01011 Output No Note In the first example, you can flip the bits at positions 1 and 2 in string s to get 01001. Then, swap the bits at positions 4 and 5 to match the string t. In the second example, it is not possible to transform s into t within the given constraints.","solution":"def can_transform(n, a, b, s, t): Determines if it\'s possible to transform binary string s into binary string t using at most a flips and b swaps. :param n: Length of the binary strings :param a: Maximum number of flip operations allowed :param b: Maximum number of swap operations allowed :param s: Original binary string :param t: Target binary string :return: \\"Yes\\" if the transformation is possible, \\"No\\" otherwise # Count the number of bits that are different between s and t diff_count = sum(1 for i in range(n) if s[i] != t[i]) # If the number of differences is more than the sum of flips and twice the swaps, # then it\'s not possible to transform s into t because each flip can fix one bit # and each swap can fix two bits. if diff_count <= a + 2 * b: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subarray which contains distinct values and the sum of elements does not exceed a given threshold k. Input: In the first line of input, there is an integer k (1 ≤ k ≤ 10^5) — the threshold value. In the second line of input, there is an integer n (1 ≤ n ≤ 10^5) — the size of the sequence. In the third line, there are n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of the sequence. Output: Print the length of the longest subarray with distinct values and the sum of elements no greater than k. Examples: Input: 10 6 1 2 3 4 5 5 Output: 4 Input: 8 5 1 3 5 2 1 Output: 3 Note: In the first example, the subarrays [1, 2, 3, 4] and [2, 3, 4, 5] have distinct values but only [1, 2, 3, 4] meets the sum constraint and has length 4. In the second example, the subarray [1, 3, 2] has distinct values with sum equal to 6 which is less than or equal to 8 and has length 3.","solution":"def longest_subarray_with_distinct_values(k, n, array): left = 0 right = 0 current_sum = 0 max_length = 0 elements = set() while right < n: if array[right] not in elements and current_sum + array[right] <= k: elements.add(array[right]) current_sum += array[right] right += 1 max_length = max(max_length, right - left) else: elements.remove(array[left]) current_sum -= array[left] left += 1 return max_length"},{"question":"You are given two strings `s1` and `s2`. You need to determine if `s2` is an anagram of `s1` by deleting exactly one character from `s1`. An anagram of a string `s` is another string that contains the same characters, only the order of characters can be different. Input The input consists of two lines. The first line contains string `s1` and the second line contains string `s2`. Both strings consist of lowercase English letters and have lengths between 1 and 1000. Output Print \\"YES\\" if `s2` can be obtained by deleting exactly one character from `s1` and rearranging the remaining characters, otherwise print \\"NO\\". Examples Input abcde bcdea Output NO Input anagram nagara Output YES","solution":"def is_anagram_by_deleting_one_char(s1, s2): Determines if s2 is an anagram of s1 by deleting exactly one character from s1. # s2 should be one character less than s1 if len(s1) != len(s2) + 1: return \\"NO\\" # Use Counter to count the frequency of characters in both strings from collections import Counter counter_s1 = Counter(s1) counter_s2 = Counter(s2) # Subtract the two Counters diff = counter_s1 - counter_s2 # There should be exactly one character left in diff and its count should be 1 if len(diff) == 1 and list(diff.values())[0] == 1: return \\"YES\\" return \\"NO\\""},{"question":"Imagine an innovative e-commerce company that assigns a unique package tracking number to each of its orders. However, during a recent system upgrade, the sequence of recently assigned tracking numbers got randomized. To restore order, the company wants to assign new, consecutive tracking numbers starting from 1, as per the order\'s original creation dates. Each package is represented by its current tracking number and the date it was created. Write a function that reassigns consecutive tracking numbers to packages based on their creation dates. Input: - An integer `n` (1 ≤ n ≤ 10^5), the number of packages. - An array `tracking_numbers` of `n` unique integers (1 ≤ tracking_numbers[i] ≤ 10^9) representing the original tracking numbers. - An array `creation_dates` of `n` integers (1 ≤ creation_dates[i] ≤ 10^9) representing the dates the packages were created. No two packages have the same creation date. Output: - An array of size `n`, containing the new tracking numbers (from 1 to n) assigned in the order of package creation dates. Examples Input: ``` 5 [12345, 56789, 10112, 98765, 34567] [20210101, 20210103, 20210102, 20210105, 20210104] ``` Output: ``` [1, 3, 2, 5, 4] ``` Input: ``` 3 [9876, 5432, 1098] [20201225, 20210101, 20201220] ``` Output: ``` [2, 3, 1] ``` Note In the first example, the created dates sorted in ascending order are: 20210101, 20210102, 20210103, 20210104, 20210105. Thus, the new tracking numbers will be assigned in this order: Original `tracking_number` 12345 (created on 20210101) gets `1` Original `tracking_number` 10112 (created on 20210102) gets `2` Original `tracking_number` 56789 (created on 20210103) gets `3` Original `tracking_number` 34567 (created on 20210104) gets `4` Original `tracking_number` 98765 (created on 20210105) gets `5`. In the second example, the creation dates sorted in ascending order are: 20201220, 20201225, 20210101. Thus, the new tracking numbers will be assigned as: Original `tracking_number` 1098 (created on 20201220) gets `1` Original `tracking_number` 9876 (created on 20201225) gets `2` Original `tracking_number` 5432 (created on 20210101) gets `3`.","solution":"def reassign_tracking_numbers(n, tracking_numbers, creation_dates): Reassign consecutive tracking numbers to packages based on their creation dates. :param n: int, number of packages :param tracking_numbers: list of int, original tracking numbers :param creation_dates: list of int, creation dates corresponding to tracking numbers :return: list of int, new tracking numbers assigned based on creation dates # Pair the tracking numbers with the creation dates package_info = list(zip(tracking_numbers, creation_dates)) # Sort the packages by their creation dates package_info.sort(key=lambda x: x[1]) # Create a mapping from original tracking number to new tracking number (1 to n) tracking_number_mapping = {} for index, (tracking_number, _) in enumerate(package_info, start=1): tracking_number_mapping[tracking_number] = index # Generate the result list based on the original order of tracking numbers new_tracking_numbers = [tracking_number_mapping[tracking_number] for tracking_number in tracking_numbers] return new_tracking_numbers"},{"question":"Imagine a grid with n rows and m columns. Each cell in the grid can either be empty or contain an obstacle. Your task is to find the number of different paths from the top-left cell to the bottom-right cell, such that the path does not pass through any cells that contain obstacles. You are allowed to move right or down from any cell. You cannot move diagonally or upwards. Write a function to find the number of such valid paths. If there is no valid path, return 0. Function Signature: ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: ``` Input: - A 2D list `grid` with dimensions `n x m`, where `grid[i][j]` is: - `0` if the cell `(i, j)` is empty - `1` if the cell `(i, j)` contains an obstacle Output: - An integer representing the number of different valid paths from the top-left to bottom-right of the grid. Constraints: - 1 ≤ n, m ≤ 100 - The top-left cell (0, 0) and the bottom-right cell (n-1, m-1) are guaranteed to be empty (grid[0][0] == 0 and grid[n-1][m-1] == 0). Example: Input: ```python grid = [ [0,0,0], [0,1,0], [0,0,0] ] ``` Output: ```python 2 ``` Explanation: There are two paths from the top-left to the bottom-right: 1. Right → Right → Down → Down 2. Down → Down → Right → Right Input: ```python grid = [ [0,1], [0,0] ] ``` Output: ```python 1 ``` Explanation: There is only one path from the top-left to the bottom-right: 1. Down → Right","solution":"def unique_paths_with_obstacles(grid): if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given a city represented as a grid of n rows and m columns, where each cell represents a building with a certain height. You are a city planner and need to identify the best location to place a water tower such that the water tower is physically taller than all the buildings in the row or column it\'s placed in (ensuring water pressure reaches all). The height of the water tower must be strictly greater than any building in its row or column. You need to find the minimum height the water tower should have if it were placed in any cell of the city. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the city grid. The next n lines contain m integers each, the j-th integer on the i-th line represents the height h_ij (1 ≤ h_ij ≤ 10^9) of the building in the cell located at the i-th row and j-th column. Output Print the minimum height the water tower must have so that it is taller than any building in its row or column, no matter where it is placed in the city. Examples Input 3 3 4 1 3 2 5 7 9 8 6 Output 10 Input 2 2 1 2 3 4 Output 5 Note In the first example, the minimum height that ensures the water tower is taller than any building in its row or column is 10. In the second example, the water tower must be at least 5 units high to be taller than any building in its row or column.","solution":"def min_water_tower_height(n, m, city_grid): Finds the minimum height the water tower must have such that it is taller than any building in its row or column. Args: n (int): Number of rows in the city grid. m (int): Number of columns in the city grid. city_grid (list of list of int): The grid representing the heights of the buildings. Returns: int: The minimum height of the water tower. max_in_rows = [max(row) for row in city_grid] max_in_cols = [max(city_grid[row][col] for row in range(n)) for col in range(m)] return max(max(max_in_rows), max(max_in_cols)) + 1"},{"question":"Design a program that identifies the largest rectangular block of \'1\'s in a binary matrix. Each cell in the matrix contains either \'0\' or \'1\'. The largest rectangular block is defined by the maximal area rectangle containing only \'1\'s. Input: The first line contains an integer T, the number of test cases. Each test case begins with two integers M and N, representing the number of rows and columns in the matrix, respectively. The next M lines each contain N integers (either \'0\' or \'1\'), representing the matrix. Output: For each test case, output the area of the largest rectangle of \'1\'s. Constraints: 1 ≤ T ≤ 50 1 ≤ M, N ≤ 100 SAMPLE INPUT 2 4 4 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 3 3 1 0 1 1 1 1 0 1 0 SAMPLE OUTPUT 6 3 Explanation: For the first sample, the largest rectangle is formed by the 2nd and 3rd rows and the 2nd and 3rd columns, making an area of 6. For the second sample, the largest rectangle is the submatrix spanning from (2,1) to (2,3), making an area of 3.","solution":"def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(matrix): if not matrix: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for index, value in enumerate(row): if value == \'1\': heights[index] += 1 else: heights[index] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def find_largest_rectangle(t, test_cases): results = [] for case in range(t): m, n = test_cases[case][0] matrix = test_cases[case][1] results.append(max_rectangle_area(matrix)) return results # Input Parsing: def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): m, n = map(int, lines[index].split()) index += 1 matrix = [] for _ in range(m): matrix.append(lines[index].split()) index += 1 test_cases.append(((m, n), matrix)) return t, test_cases input_data = 2 4 4 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 3 3 1 0 1 1 1 1 0 1 0 t, test_cases = parse_input(input_data) result = find_largest_rectangle(t, test_cases) print(result) # Output: [6, 3]"},{"question":"Given a positive integer n, print a right-aligned staircase of height n using the \'#\' character. The staircase should be right-aligned, meaning each line should be right-justified in a field of width n. Constraints * 1 leq n leq 100 Input The input is a single integer n. Output Print the right-aligned staircase of height n. Example Input 4 Output ``` # # ```","solution":"def print_right_aligned_staircase(n): Prints a right-aligned staircase of height n using the \'#\' character. for i in range(1, n + 1): line = \'#\' * i print(line.rjust(n))"},{"question":"Alex is organizing a birthday party and wants to prepare gift bags for the guests. Alex has n types of candies and wants to distribute them into exactly m gift bags. Each of the n candy types must go into the gift bags, but Alex can put multiple candies of the same type into any bag, provided no two bags contain candies of the same type. Alex asks you to determine if it is possible to distribute the candies in such a way. Given n and m, decide if the distribution is feasible. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000). Output Print \\"POSSIBLE\\" (without the quotes) if Alex can distribute the candies as required, otherwise print \\"IMPOSSIBLE\\" (without the quotes). Examples Input 3 2 Output IMPOSSIBLE Input 4 4 Output POSSIBLE Input 5 1 Output POSSIBLE","solution":"def can_distribute_candies(n, m): Determines if it is possible to distribute n types of candies into m gift bags such that no two bags contain the same type of candy. :param n: Number of candy types (1 ≤ n ≤ 1000) :param m: Number of gift bags (1 ≤ m ≤ 1000) :return: \\"POSSIBLE\\" if the distribution can be done, \\"IMPOSSIBLE\\" otherwise if n <= m: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"Dr. Dolittle has observed that while some animals need more frequent checks, others require less. Due to the busyness of his office, he has decided to restructure the way animals are organized based on the number of visits each animal needs. You are asked to help him create a priority queue such that animals needing fewer visits are seen first. If two animals need the same number of visits, the one which appeared earlier in the list should be seen first. Input The first line of input data contains an integer n (1 ≤ n ≤ 105) which represents the number of animals. In the second line are given n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai represents the number of visits needed for the ith animal. Output Print the sequence of numbers representing the animal indices (1-indexed) in the order they should be seen according to the new priority system. Examples Input 5 4 2 5 1 3 Output 4 2 5 1 3 Input 6 3 3 3 2 2 1 Output 6 4 5 1 2 3 Note In the first sample test: * Animal 4 needs 1 visit * Animal 2 needs 2 visits * Animal 1 needs 4 visits * Animal 3 needs 5 visits * Animal 5 needs 3 visits Hence, the priority order after sorting by visits is: 4 2 5 1 3 In the second sample test: * Animal 6 needs 1 visit * Animals 4 and 5 need 2 visits each * Animals 1, 2, and 3 need 3 visits each Hence, the priority order after sorting by visits and maintaining order for same visits is: 6 4 5 1 2 3","solution":"def animal_visit_priority(n, visits): Returns the sequence of animal indices based on the number of visits needed. Animals needing fewer visits come first. # Create a list of tuples (number_of_visits, index) indexed_visits = [(visits[i], i + 1) for i in range(n)] # Sort the indexed visits based on number of visits first, then by original index sorted_visits = sorted(indexed_visits) # Extract the indices from the sorted list result_indices = [index for _, index in sorted_visits] return result_indices"},{"question":"Phoenix loves arranging books on his bookshelf. He has n books (n is always even) and each has a genre denoted by a number g_i (1 ≤ g_i ≤ n). Phoenix wants to organize his bookshelf such that exactly n/2 chunks of books consist of books from the same genre. Each chunk must have an even number of books, and a chunk can contain any number of books as long as all books in that chunk have the same genre. Phoenix can pay one dollar to: * change the genre of a book to any other genre g\' (1 ≤ g\' ≤ n) Given this, determine the minimum cost for Phoenix to organize his bookshelf as required. # Input - The input consists of multiple test cases. - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - The first line of each test case contains an integer n (2 ≤ n ≤ 2 ⋅ 10^5; n is even) — the total number of books. - The next line contains n integers g_i (1 ≤ g_i ≤ n) — genres of the books. It is guaranteed that the sum of n across all the test cases will not exceed 2 ⋅ 10^5. # Output For each test case, print one integer — the minimum cost for Phoenix to organize his bookshelf with n/2 chunks of books of the same genre. # Example Input ``` 3 6 3 3 2 2 1 1 4 1 2 3 4 8 4 4 4 4 2 2 2 2 ``` Output ``` 0 2 0 ``` # Explanation 1. In the first case, Phoenix doesn\'t need to change any genres because he already has 3 chunks with even numbers of books and all books in each chunk are of the same genre (3, 3), (2, 2), (1, 1). 2. In the second case, Phoenix can change book genres as follows: - Change genre of book 2 from 2 to 1: `(1, 1)` - Change genre of book 4 from 4 to 3: `(3, 3)` The total cost is 2 dollars. 3. In the third case, Phoenix already has 4 chunks with even numbers of books where all books in each chunk are of the same genre. No cost is needed.","solution":"def min_cost_to_organize_books(test_cases): Returns the minimum cost for each test case to organize books such that exactly n/2 chunks of books consist of books from the same genre and each chunk has an even number of books. Parameters: - test_cases (list of tuples): Each tuple contains n (number of books) and a list g (genres of the books). Returns: - list of integers: The minimum cost for each test case from collections import Counter results = [] for n, genres in test_cases: genre_count = Counter(genres) # List of counts of each genre counts = list(genre_count.values()) counts.sort(reverse=True) max_possible_chunks = n // 2 cost, chunks_formed = 0, 0 # Try to form chunks without any transformation for count in counts: if count % 2 == 1: count -= 1 formed = count // 2 if chunks_formed + formed > max_possible_chunks: remaining_chunks = max_possible_chunks - chunks_formed cost += (formed - remaining_chunks) // 2 chunks_formed = max_possible_chunks break else: chunks_formed += formed # If we still haven\'t formed enough chunks, calculate the cost if chunks_formed < max_possible_chunks: missing_chunks = max_possible_chunks - chunks_formed cost += missing_chunks results.append(cost) return results"},{"question":"Foxlings love to collect shiny stones. In Foxland, there are n colors of shiny stones, and each stone has a non-negative integer value representing its shininess. Foxlings want to collect exactly m stones such that the total shininess value is maximized and no two stones of the same color can be directly adjacent in the collection. Given the array stones, where stones[i][j] represents the shininess value of the j-th stone of the i-th color, calculate the maximum total shininess value possible for exactly m stones, following the rule that no two stones of the same color should be adjacent in the collection. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) - the number of colors and the number of stones to collect, respectively. Each of the next n lines contains k_i + 1 integers, where the first integer k_i (1 ≤ k_i ≤ 100) is the number of stones of color i, followed by k_i integers representing the shininess values of those stones. Output Output a single integer: the maximum total shininess value possible while satisfying the constraints. Examples Input 3 4 2 1 5 3 3 2 8 2 6 7 Output 26 Input 2 2 3 4 1 2 1 9 Output 13 Explanation In the first example, Foxlings can collect stones with values [5 (color 1), 8 (color 2), 6 and 7 (color 3)] to maximize the total shininess, avoiding any stones of the same color being adjacent. The maximum total shininess value is 26. In the second example, Foxlings can collect stones with values [4 (color 1) and 9 (color 2)] to maximize the total shininess while avoiding adjacency of the same color. The maximum total value is 13.","solution":"def max_shininess(n, m, stones): Calculate the maximum total shininess value possible for exactly m stones, following the rule that no two stones of the same color should be adjacent in the collection. stones_from_all_colors = [] for color_stones in stones: for value in color_stones: stones_from_all_colors.append(value) # Sort stones by their shininess in descending order stones_from_all_colors.sort(reverse=True) # Take the top m stones max_shininess_total = sum(stones_from_all_colors[:m]) return max_shininess_total"},{"question":"A company is planning a team-building exercise where the participants need to solve a puzzle. The puzzle consists of solving a series of tasks that are represented as a list of integers. Each participant has a certain skill level, which determines how many tasks they can solve in a given time frame. The goal is to determine the minimum number of participants needed to solve all tasks. You are given a list of integers representing the tasks and an integer representing the skill level of each participant (i.e., the number of tasks one participant can solve). Write a program to calculate the minimum number of participants required to solve all the tasks. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of tasks. The second line contains n integers separated by spaces, where each integer Ti (1 ≤ Ti ≤ 10^4) represents the length of the i-th task. The third line contains an integer k (1 ≤ k ≤ 10^4) — the skill level of each participant. Output Print a single integer — the minimum number of participants required to solve all the tasks. Examples Input 5 3 2 4 1 2 3 Output 4 Input 6 10 2 3 6 1 1 5 Output 4 Note In the first sample, we need 4 participants because each participant can solve up to 3 tasks. The tasks can be distributed as follows: [3], [2, 1], [4], [2]. In the second sample, we need 4 participants because the first participant can solve tasks [10], the second participant can solve tasks [2, 1], the third participant can solve tasks [3, 1], and the fourth participant can solve task [6].","solution":"import math def min_participants(n, tasks, k): Calculates the minimum number of participants required to solve all tasks. :param n: int, number of tasks, n (1 ≤ n ≤ 10^4) :param tasks: list of int, length n, where each integer Ti (1 ≤ Ti ≤ 10^4) represents the length of the i-th task :param k: int, the skill level of each participant (i.e., the number of tasks one participant can solve), k (1 ≤ k ≤ 10^4) :return: int, minimum number of participants needed return math.ceil(n / k)"},{"question":"The Enchanted Island Puzzle: You and your crew have finally reached the coordinates of the Enchanted Island. The island is said to hold the treasure of the legendary pirate, Captain Silver, but reaching it is no simple task. An ancient guardian protects the island, and to gain access to the treasure, you must solve a puzzle it presents to you. The puzzle involves a grid of integers where you must find the path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. The goal is to maximize the sum of all numbers along your path. Your task is to write a program that, given such a grid, finds the path with the maximum sum of integers from the top-left to the bottom-right corner. Input Format - The first line contains a single integer T, the number of test cases. - Each test case starts with a single integer N, the size of the NxN grid. - The next N lines contain N space-separated integers each, representing the grid. Output Format For each test case, print the maximum sum that can be obtained by any path from the top-left to the bottom-right of the grid. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - -1000 ≤ each grid element ≤ 1000 SAMPLE INPUT 2 2 -5 -9 10 12 3 1 -1 2 0 -2 3 2 -3 4 SAMPLE OUTPUT 17 9 Explanation: For the first test case (2x2 grid): - The possible paths are (starting at top-left): - Move Down, then Right: -5 -> 10 -> 12, sum = -5 + 10 + 12 = 17 - Move Right, then Down: -5 -> -9 -> 12, sum = -5 - 9 + 12 = -2 The maximum sum path is -5 -> 10 -> 12 which results in 17. For the second test case (3x3 grid): - The possible paths include: - 1 -> -1 -> 2 -> 3 -> 4 which results in 1 - 1 + 2 + 3 + 4 = 9 Other paths have smaller sums. Therefore, the maximum sum is 9.","solution":"def max_path_sum(grid): Function to calculate the maximum path sum from the top-left to the bottom-right of the grid. You can only move either down or right at any point in time. n = len(grid) # Create a dp table to store the maximum path sums. dp = [[0] * n for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] def solve(enchanged_island_cases): results = [] for grid in enchanged_island_cases: results.append(max_path_sum(grid)) return results"},{"question":"Lina and Sam love to play strategic card games. Today they are playing a game involving a deck of cards. In this game, the deck consists of `n` cards, which are numbered from 1 to `n`. Lina always begins the game by picking any card from the deck, followed by Sam who does the same. The game continues with each player taking turns picking a card. A player\'s score is the value of the card they picked. The player must pick a card that maximizes the difference between their current score and their opponent\'s score. Determine who will win if both Lina and Sam play optimally well, starting from an empty score. Input The input consists of multiple test cases. Each test case contains: - A single integer `n` (1 ≤ n ≤ 1000) - the number of cards in the deck. The end of input test cases is indicated by `n = 0`. Output For each test case, output the result in the following format: - \\"Lina\\" if Lina will win the game. - \\"Sam\\" if Sam will win the game. - \\"Draw\\" if the game will end in a draw. Examples Input 3 4 0 Output Sam Lina","solution":"def who_wins(n): if n % 2 == 1: return \\"Sam\\" else: return \\"Lina\\" def process_test_cases(input_list): result = [] for n in input_list: if n == 0: break result.append(who_wins(n)) return result"},{"question":"You are given a string consisting of digits (\'0\' to \'9\') and a positive integer k. Your task is to find the minimum possible integer that can be obtained by removing exactly k digits from the given string. The order of the remaining digits cannot be changed. Input The input consists of two lines. The first line contains the string of digits, which may have leading zeros. The second line contains the integer k (1 ≤ k ≤ the length of the string - 1). Output Print a single line containing the minimum possible integer after removing exactly k digits. Examples Input 1432219 3 Output 1219 Input 10200 1 Output 200 Input 10 1 Output 0 Note In the first sample test removing the digits at indices 1, 2, and 4 (considering 0-based index) results in the string \\"1219\\", which is the smallest possible integer. In the second sample test removing the digit at index 0 results in the string \\"0200\\", and when leading zeros are removed, it results in the integer \\"200\\". In the third sample test removing the digit at index 0 results in the string \\"0\\", as removing the only other digit would leave no string.","solution":"def min_number_after_removal(s, k): Returns the minimum number that can be obtained by removing exactly k digits from the string s made of digits. stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, that means we need to remove from the end while k > 0: stack.pop() k -= 1 # Join all elements in the stack to form the resultant number and remove leading zeros return \'\'.join(stack).lstrip(\'0\') or \'0\'"},{"question":"Minimum Effort Path You are given a grid of integers representing the height of each cell in a 2D elevation map. Imagine you are a hiker standing on cell (0, 0) and your goal is to reach cell (n-1, m-1) with the minimum effort. The effort is defined as the maximum absolute difference in height between two consecutive cells in your path. You can move up, down, left, or right. Your task is to determine the minimum effort required to reach the bottom-right corner of the grid. Input The input consists of a single dataset with the following form. > n m > h1 h2 ... hm > h(m+1) h(m+2) ... h(2m) > ... > h((n-1)m+1) h((n-1)m+2) ... h(nm) The first line contains two positive integers n and m, where n (1 ≤ n ≤ 100) is the number of rows and m (1 ≤ m ≤ 100) is the number of columns. The next n lines each contain m integers, representing the elevation of each cell. All elevation values are in the range between 0 and 10^6 inclusive. Output For the provided dataset, print the minimum effort required to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Sample Input 3 3 1 2 2 3 8 2 5 3 5 Output for the Sample Input 2 Explanation For the given input, the minimum effort path from (0, 0) to (2, 2) with the height differences visited is as follows: 1 → 2 → 2 → 2 → 5 The effort is max(1, 6, 0, 3) = 6, which is minimized by the best path: 1 → 2 → 2 → 2 → 5 where the max difference is 2.","solution":"import heapq def minimum_effort_path(n, m, grid): Returns the minimum effort required to travel from the top-left corner to the bottom-right corner of the grid. n: number of rows m: number of columns grid: 2D list representing the elevation map if not grid or not grid[0]: return 0 def neighbors(x, y): for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)): nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: yield (nx, ny) pq = [(0, 0, 0)] # (effort, x, y) efforts = [[float(\'inf\')] * m for _ in range(n)] efforts[0][0] = 0 while pq: effort, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return effort for nx, ny in neighbors(x, y): new_effort = max(effort, abs(grid[nx][ny] - grid[x][y])) if new_effort < efforts[nx][ny]: efforts[nx][ny] = new_effort heapq.heappush(pq, (new_effort, nx, ny)) return efforts[-1][-1] # Example usage n = 3 m = 3 grid = [ [1, 2, 2], [3, 8, 2], [5, 3, 5] ] print(minimum_effort_path(n, m, grid)) # Output: 2"},{"question":"Given two non-empty binary trees `root1` and `root2`, merge them into a single tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the non-null node will be used as the node of the new tree. Write a function `mergeTrees(root1, root2)` that merges two binary trees and returns the resulting merged tree. You can assume that both `root1` and `root2` are valid binary trees, and the structure is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example ```python # Example 1 root1 = TreeNode(1) root1.left = TreeNode(3) root1.left.left = TreeNode(5) root1.right = TreeNode(2) root2 = TreeNode(2) root2.left = TreeNode(1) root2.left.right = TreeNode(4) root2.right = TreeNode(3) root2.right.right = TreeNode(7) merged_tree = mergeTrees(root1, root2) # The merged tree should look like this: # 3 # / # 4 5 # / # 5 4 7 ``` # Input - The function `mergeTrees` accepts two TreeNode inputs, `root1` and `root2`, which are the roots of two binary trees. # Output - The function should return the root of the merged binary tree. # Note - Both `root1` and `root2` may have different structures and tree sizes. - Be sure to handle cases where one subtree is null and the other is not.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mergeTrees(root1, root2): Merges two binary trees into one. if not root1 and not root2: return None if not root1: return root2 if not root2: return root1 merged = TreeNode(root1.val + root2.val) merged.left = mergeTrees(root1.left, root2.left) merged.right = mergeTrees(root1.right, root2.right) return merged"},{"question":"In a programming challenge, you\'ve been tasked with developing a system that sorts and merges multiple lists of integers. Specifically, you need to take several lists of integers, sort each list in ascending order, and then merge them into one final sorted list, ensuring that the final list remains sorted in ascending order. Create a program that accepts multiple datasets. Each dataset consists of several lines of space-separated integers. The end of each dataset is indicated by a line containing a single -1. After the -1, a new dataset begins. The end of the last dataset is indicated by a line containing two consecutive -1s. Your program should output one sorted, merged list of integers for each dataset. Input A sequence of multiple datasets is given as input. Each dataset is delimited by a line containing a single -1. The last dataset is followed by a line containing -1 -1. Each line within a dataset contains space-separated integers. Output For each dataset, output one sorted, merged line of integers. Each result should be on a new line. Example Input 3 5 1 8 7 3 -1 2 4 6 1 3 -1 -1 -1 Output 1 1 3 3 5 7 8 1 2 3 4 6","solution":"def merge_and_sort_datasets(input_str): Accepts a string containing multiple datasets of space-separated integers. Each dataset ends with a line containing a single -1. The final dataset is followed by a line containing -1 -1. Returns a list of sorted and merged lists for each dataset. datasets = input_str.strip().split(\'n\') all_datasets = [] temp_list = [] for line in datasets: if line == \\"-1 -1\\": if temp_list: all_datasets.append(temp_list) break if line == \\"-1\\": if temp_list: all_datasets.append(temp_list) temp_list = [] continue temp_list.extend(map(int, line.split())) sorted_merged_result = [] for dataset in all_datasets: sorted_merged_result.append(sorted(dataset)) return sorted_merged_result"},{"question":"You are provided with a list of integers. Your task is to rearrange this list such that: - All even numbers precede all odd numbers. - Within the even numbers, the order should be ascending. - Within the odd numbers, the order should be descending. Write a function `rearrange_numbers(numbers)` that takes a list of integers as input and returns the rearranged list according to the above rules. # Input Format - A single line containing space-separated integers. # Output Format - A single line containing the rearranged integers, space-separated. # Constraints - The input list can have up to 100,000 integers. - Each integer in the list is between -10^6 and 10^6. # Sample Input ``` 7 2 8 3 5 11 6 14 1 ``` # Sample Output ``` 2 6 8 14 11 7 5 3 1 ``` # Explanation - Even numbers: [2, 8, 6, 14] sorted in ascending order -> [2, 6, 8, 14] - Odd numbers: [7, 3, 5, 11, 1] sorted in descending order -> [11, 7, 5, 3, 1] - Combining both sequences results in: [2, 6, 8, 14, 11, 7, 5, 3, 1]","solution":"def rearrange_numbers(numbers): Rearranges the list such that: - All even numbers precede all odd numbers. - Even numbers are in ascending order. - Odd numbers are in descending order. evens = sorted([num for num in numbers if num % 2 == 0]) odds = sorted([num for num in numbers if num % 2 != 0], reverse=True) return evens + odds"},{"question":"In a small village, there is a rectangular grid of houses arranged in m rows and n columns. Each house is represented by a cell in the grid, and its position can be described by a pair of coordinates (row, col). The village council wants to plant a tree in such a way that it is located at a central house in the village. A house is considered central if the sum of the Manhattan distances from this house to all other houses is minimized. The Manhattan distance between two houses located at (r1, c1) and (r2, c2) is defined as |r1 - r2| + |c1 - c2|. Given the dimensions of the grid, you need to determine the coordinates of the house where the tree should be planted. Input The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 10^5) — the number of rows and columns in the grid respectively. Output Output two space-separated integers r and c — the coordinates of the house where the tree should be planted such that the sum of Manhattan distances from this house to all other houses is minimized. If there are multiple valid houses, output the one with the smallest row number, and if there is still a tie, select the one with the smallest column number. Examples Input 3 3 Output 2 2 Input 2 4 Output 1 2 Input 5 1 Output 3 1 Note In the first example, house (2, 2) is the central house in a 3x3 grid. In the second example with a 2x4 grid, house (1, 2) is one of the optimal locations since it minimizes the sum of Manhattan distances to all other houses. In the third example with a 5x1 grid, house (3, 1) is the central house as it evenly balances distances to houses both above and below it.","solution":"def central_house(m: int, n: int): Returns the coordinates of the house where the tree should be planted such that the sum of Manhattan distances from this house to all other houses is minimized. # The central house will be at the median of the rows and columns r = (m + 1) // 2 c = (n + 1) // 2 return r, c"},{"question":"A group of friends decided to play a game where they take turns to add stones into a bowl. Each friend has to follow a specific rule: on their turn, they can add exactly one stone or exactly two stones into the bowl. The game starts with an empty bowl, and it ends when the bowl contains exactly `n` stones. Write a function `ways_to_fill_bowl(n: int) -> int` that returns the number of distinct ways to reach exactly `n` stones in the bowl by following the rule. For instance: - If `n` is 4, there are exactly 5 distinct ways to have exactly 4 stones in the bowl: - Add 1, 1, 1, 1 - Add 1, 1, 2 - Add 1, 2, 1 - Add 2, 1, 1 - Add 2, 2 # Input - A single integer `n` (1 ≤ n ≤ 100) representing the number of stones to be in the bowl. # Output - A single integer, the number of distinct ways to reach exactly `n` stones. # Example Input 4 Output 5 Note In the example, the distinct ways to get 4 stones as described above are precisely those that follow the rule, thus there are 5 ways.","solution":"def ways_to_fill_bowl(n): Returns the number of distinct ways to reach exactly n stones in the bowl by adding either 1 or 2 stones at each step. # Edge case if n == 0: return 1 # Create a list to store the number of ways to fill the bowl for 0 to n stones dp = [0] * (n + 1) # There\'s one way to reach 0 stones: doing nothing dp[0] = 1 for i in range(1, n + 1): dp[i] += dp[i - 1] # Ways to fill i stones by adding 1 stone to (i-1) stones if i >= 2: dp[i] += dp[i - 2] # Ways to fill i stones by adding 2 stones to (i-2) stones return dp[n]"},{"question":"You are given an n × m grid filled with nonnegative integers. The grid represents a maze and each cell contains a number representing the energy cost for a player to move into that cell. The player can move from one cell to any of its four neighboring cells (top, bottom, left, right) unless restricted by the edges of the grid. The goal is to reach the bottom-right cell (n-1, m-1) from the top-left cell (0, 0) with the minimum possible total energy cost. Help the player determine the minimum energy cost required to reach the bottom-right cell from the top-left cell. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers (0 ≤ cost ≤ 1000) representing the energy cost for each cell in the grid. Output You should print one integer — the minimum energy cost required to reach the bottom-right cell from the top-left cell. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 1 1 1 Output 3 Note In the first test case, the optimal path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with the total cost being 1 + 3 + 1 + 1 + 1 = 7. In the second test case, the optimal path is (0,0) -> (0,1) -> (1,1) with the total cost being 1 + 1 + 1 = 3.","solution":"import heapq def min_energy_cost(n, m, grid): Returns the minimum energy cost required to reach the bottom-right cell from the top-left cell of the grid. # Initialize the min-heap min_heap = [(grid[0][0], 0, 0)] # (cost, row, col) # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Cost matrix to keep track of the minimum cost to reach each cell costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n-1 and y == m-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return costs[-1][-1]"},{"question":"Alice is an avid gardener who loves growing different species of plants in her garden. She is particularly fond of observing the growth patterns of different shrubs and recording their heights over a fixed period. Every year, Alice plants N (1 ≤ N ≤ 100) shrubs of a specific species in a row and records their heights daily for a period of T (1 ≤ T ≤ 365) days. This year, Alice noticed a peculiar growth pattern in her shrubs. She observed that the growth rate of each shrub varies, but each shrub follows a consistent daily growth pattern either increasing or decreasing. Specifically, each shrub either grows by exactly g cm per day or shrinks by exactly s cm per day, with g and s being positive integers. Alice wants to identify whether each shrub is growing or shrinking over time based on her daily height measurements. Your task is to help Alice determine the daily growth pattern (growing or shrinking) of each shrub by analyzing the measurements she recorded. Input The first line of input will contain the number of shrubs N (1 ≤ N ≤ 100). The following N lines each describe one shrub\'s height measurements over T days. Each line consists of T space-separated integers, representing the height of the shrub in cm on each day. Output Output one line per shrub, in the same order as provided in the input. Each line shall state growing if the shrub\'s height increases consistently, or shrinking if the shrub\'s height decreases consistently. Example Input 3 30 32 34 36 38 40 50 48 46 44 42 40 10 15 20 25 30 35 Output growing shrinking growing Note In the first shrub, the height increases by 2 cm each day, indicating a growing pattern. In the second shrub, the height decreases by 2 cm each day, indicating a shrinking pattern. In the third shrub, the height increases by 5 cm each day, indicating a growing pattern.","solution":"def analyze_shrubs(N, shrubs): results = [] for shrub in shrubs: if all(shrub[i] < shrub[i+1] for i in range(len(shrub)-1)): results.append(\\"growing\\") elif all(shrub[i] > shrub[i+1] for i in range(len(shrub)-1)): results.append(\\"shrinking\\") else: # This case should not happen as given in the problem statement # Since each shrub either consistently grows or shrinks results.append(\\"unknown\\") return results # Example usage: N = 3 shrubs = [ [30, 32, 34, 36, 38, 40], [50, 48, 46, 44, 42, 40], [10, 15, 20, 25, 30, 35] ] print(analyze_shrubs(N, shrubs)) # Output: [\'growing\', \'shrinking\', \'growing\']"},{"question":"In a galaxy far away, a highly advanced civilization communicates using a special numeric language. Each message in this language is an integer sequence that, when translated, creates a sound wave. However, in order to amplify the signal, they need to detect the maximum contiguous subarray (a subarray is a subsequence of n elements of the array taken in order) that translates into the highest possible sum. You are to help them by finding this maximum such sum. Write a function that takes an array of integers and returns the sum of its longest contiguous subarray with the maximum sum. # Input The input consists of: - An integer `n` (1 ≤ n ≤ 1000) — the length of the array. - An array of `n` integers (−10^4 ≤ array[i] ≤ 10^4). # Output Print a single integer — the sum of the subarray with the maximum sum. # Example Input ``` 5 -1 2 3 -2 5 ``` Output ``` 8 ``` # Note In the given example, the subarray with the maximum sum is [2, 3, -2, 5], which sums to 8. Though the initial part [2, 3] has a sum of 5, extending it with the remaining positive numbers gives a higher sum. The function should efficiently handle arrays containing both positive and negative integers.","solution":"def max_subarray_sum(n, array): Returns the sum of the longest contiguous subarray with the maximum sum. Parameters: n (int): The length of the array array (list of int): The array of integers Returns: int: The sum of the maximum subarray if n == 0: return 0 max_current = max_global = array[0] for i in range(1, n): max_current = max(array[i], max_current + array[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a tree consisting of n nodes and n-1 edges, root this tree at node 1. Each node has an initial value assigned to it. Let\'s denote the initial value of the i-th node as vi. Each node i also contains mi chocolates as gifts initially. You can perform the following operation any number of times: select an edge (u, v) connecting nodes u and v and move all chocolates from u to v. This operation can be performed if and only if node u is a parent of node v. Help the Chocolate Distributor find the maximum number of chocolates that can be collected at the root node (node 1). Input - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The next line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9) — the initial values of the nodes. - The third line contains n integers m1, m2, ..., mn (0 ≤ mi ≤ 10^9) — the initial number of chocolates in each node. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), which denotes an edge between nodes u and v. Output - Output a single integer — the maximum number of chocolates that can be collected at the root node. Examples Input 5 1 2 3 4 5 10 20 30 40 50 1 2 1 3 2 4 2 5 Output 150 Input 3 1 2 3 100 200 300 1 2 1 3 Output 600 Note In the first sample, the best way is to move all chocolates from nodes 2, 3, 4, and 5 to node 1, resulting in 150 chocolates at the root node. In the second sample, the best way is to move all chocolates from nodes 2 and 3 to node 1, resulting in 600 chocolates at the root node.","solution":"def max_chocolates_at_root(n, values, chocolates, edges): from collections import defaultdict # Create an adjacency list to represent the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform DFS and collect chocolates def dfs(node, parent): total_chocolates = chocolates[node - 1] for neighbor in tree[node]: if neighbor != parent: total_chocolates += dfs(neighbor, node) chocolates[node - 1] = total_chocolates return total_chocolates # Start DFS from the root (node 1) dfs(1, -1) # Return the chocolate count at the root return chocolates[0] # Example usage: # n = 5 # values = [1, 2, 3, 4, 5] # chocolates = [10, 20, 30, 40, 50] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(max_chocolates_at_root(n, values, chocolates, edges)) # Output: 150"},{"question":"There is a channeling contest organized by the Magical Council. Each wizard participating in the contest has a unique magical staff emitting magical aura of different strengths. The contest organizer needs to select a group of wizards standing in a contiguous interval so that the sum of the strength of their auras is closest to a given target strength. Master Elena is in charge of this selection process. You are tasked with helping Master Elena find the optimal group of wizards whose combined aura strength is the closest to the target strength. Input The first line of the input contains two integers n (1 ≤ n ≤ 100) and target (1 ≤ target ≤ 10,000), where n is the number of wizards and target is the target aura strength. The second line contains n integers representing the strength of auras of the wizards. Output Output the smallest absolute difference between the closest possible sum of aura strengths of any contiguous interval of wizards and the target strength. Example Input 5 12 3 5 2 7 4 Output 1 Explanation The possible contiguous intervals are: - [3] with sum 3 - [5] with sum 5 - [2] with sum 2 - [7] with sum 7 - [4] with sum 4 - [3, 5] with sum 8 - [5, 2] with sum 7 - [2, 7] with sum 9 - [7, 4] with sum 11 - [3, 5, 2] with sum 10 - and so forth Among these, the interval [7, 4] has the sum closest to 12, which is 11, and the absolute difference is 1. Hence the output is 1.","solution":"def closest_sum(n, target, strengths): Returns the smallest absolute difference between the closest possible sum of aura strengths of any contiguous interval of wizards and the target strength. closest_diff = float(\'inf\') for i in range(n): current_sum = 0 for j in range(i, n): current_sum += strengths[j] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff return closest_diff"},{"question":"You are given a string s consisting of uppercase English letters only. A substring of s is called a \\"nice\\" substring if it\'s the same both forwards and backwards (i.e., it is a palindrome) and its length is at least k. Your task is to find the largest length of a nice substring in s. If there are no nice substrings of length at least k, print -1. Input The first line contains an integer k (1 ≤ k ≤ 100). The second line contains a string s, consisting of uppercase English letters only (1 ≤ |s| ≤ 10^4). Output Output a single integer, representing the largest length of a nice substring in s. If there are no nice substrings of length at least k, print -1. Example Input 3 MADAMRACECAR Output 7 Explanation: The longest nice substring of length at least 3 in \\"MADAMRACECAR\\" is \\"RACECAR\\" which has a length of 7.","solution":"def longest_nice_substring(k, s): Returns the length of the longest \\"nice\\" substring (palindromic) in s with a minimum length of k. If no such substring exists, returns -1. def is_palindrome(sub): return sub == sub[::-1] max_len = -1 n = len(s) for start in range(n): for end in range(start + k, n + 1): if is_palindrome(s[start:end]): max_len = max(max_len, end - start) return max_len"},{"question":"A company wants to design a new software that processes customer orders. Each customer can place multiple orders, and each order can have multiple items. You are given a list of customer orders where each order includes the customer ID and a list of item quantities. Your task is to write a function to compute the total number of items ordered by each customer. Each customer ID is a unique positive integer. Input - The input consists of several lines. - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of orders. - Each of the next n lines represents an order and contains the customer ID (1 ≤ customer_ID ≤ 10^9) followed by a list of integers representing the quantities of items ordered in this order. - The list of item quantities is non-empty, and each quantity is a positive integer no greater than 100. Output - For each unique customer ID, output the total number of items they have ordered. - Each line of the output should contain the customer ID followed by their total ordered items. - The output should be sorted by customer ID in ascending order. Example Input 4 123 2 3 5 456 1 2 123 1 2 789 4 4 4 Output 123 13 456 3 789 12 Note In the example, customer 123 placed two orders with quantities [2, 3, 5] and [1, 2], resulting in a total of 13 items ordered. Customer 456 placed one order with quantities [1, 2], resulting in 3 items. Customer 789 placed one order with quantities [4, 4, 4], resulting in 12 items. Please write efficient code to handle large input sizes.","solution":"def compute_total_items(orders): Computes the total number of items ordered by each customer. Args: orders (list): List of strings, each representing an order. The first element is the customer ID and the rest are item quantities. Returns: dict: A dictionary where keys are customer IDs and values are total items ordered. customer_orders = {} for order in orders: order_details = list(map(int, order.split())) customer_id = order_details[0] item_quantities = order_details[1:] total_items = sum(item_quantities) if customer_id in customer_orders: customer_orders[customer_id] += total_items else: customer_orders[customer_id] = total_items return dict(sorted(customer_orders.items(), key=lambda item: item[0]))"},{"question":"A warehouse is organizing its products and needs to categorize them based on weight. The products are given weight tags and need to be placed on the correct shelves according to a set of predefined weight ranges for each shelf. Your task is to write a program to assist in this categorization. You are given the weight ranges for the shelves and a list of product weights. Your program should determine which shelf each product should go on. Each product can go on only one shelf, and you should choose the lowest possible shelf that can accommodate the product\'s weight. Each shelf is defined by a minimum and maximum weight it can hold. Multiple ranges can be assigned to a single shelf identifier. You will be given the range definitions first, followed by the product\'s weights for categorization. Input The input consists of multiple datasets. Each dataset starts with the number of shelves ( S ) (1 ≤ S ≤ 10). The next ( S ) lines each contain the shelf identifier ( I ) (string), and followed by one or more weight ranges (integer pairs). The ranges are inclusive and represented as: [I_{text{min}}-I_{text{max}}] After the shelves are defined, the next line contains the number of products ( P ) (1 ≤ P ≤ 100). Each of the following ( P ) lines contains a single product weight (integer). Output For each product, print the identifier of the shelf it should be placed on. If a weight cannot be accommodated by any shelf, print \\"None\\". Example Input 3 Light 0-20 Medium 21-50 55-75 Heavy 51-54 76-100 5 10 23 55 60 80 Output Light Medium Medium Medium Heavy","solution":"def categorize_products(shelves, products): Categorizes products based on the given shelves and their weight ranges. :param shelves: List of tuples, where each tuple contains a shelf identifier and a list of weight ranges. :param products: List of product weights. :return: List of shelf identifiers for each product. product_categories = [] for weight in products: placed = False for shelf in shelves: identifier, ranges = shelf for weight_range in ranges: min_weight, max_weight = weight_range if min_weight <= weight <= max_weight: product_categories.append(identifier) placed = True break if placed: break if not placed: product_categories.append(\\"None\\") return product_categories # Helper function to parse input and execute the categorization def run_categorization(input_text): lines = input_text.strip().split(\'n\') S = int(lines[0]) shelves = [] for i in range(1, S + 1): parts = lines[i].split() identifier = parts[0] ranges = [] for r in parts[1:]: min_weight, max_weight = map(int, r.split(\'-\')) ranges.append((min_weight, max_weight)) shelves.append((identifier, ranges)) P = int(lines[S + 1]) products = [int(lines[i]) for i in range(S + 2, S + 2 + P)] return categorize_products(shelves, products) input_text = 3 Light 0-20 Medium 21-50 55-75 Heavy 51-54 76-100 5 10 23 55 60 80 print(run_categorization(input_text))"},{"question":"In the Kingdom of Quaria, there are n cities connected by m bidirectional roads. Each road connects two different cities and has an associated travel cost. The king of Quaria is concerned about the road network\'s robustness and the ability to traverse between cities under budget constraints. He decided to consult with you to find the most cost-effective way to travel between cities, given a budget limit. Given n cities, m roads, and q queries, your task is to determine for each query if it\'s possible to travel from city a to city b within a given budget c. The queries are independent of each other. Input The first line of input contains three integers n, m, and q (1 ≤ n, m, q ≤ 105). The next m lines describe the roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 109) where u and v represent the cities connected by a road and w represents the travel cost. The next q lines contain the queries. Each of them contains three integers a, b, and c (1 ≤ a, b ≤ n and 1 ≤ c ≤ 109) representing the start city, the destination city, and the budget constraint for that query. Output For each query, output \\"YES\\" if it is possible to travel from city a to city b within the given budget, otherwise output \\"NO\\". Examples Input 4 4 3 1 2 5 2 3 2 3 4 8 1 3 10 1 4 10 2 4 4 Output YES YES NO Note In the sample case: - The travel from city 1 to city 2 costs 5, which is within the budget. - The travel from city 1 to city 4 can be done via the path 1-2-3-4 with a total cost of 5 + 2 + 8 = 15, which exceeds the budget. - The travel from city 2 to city 4 can be done via the path 2-3-4 with a total cost of 2 + 8 = 10, which is within the budget.","solution":"import heapq def dijkstra(graph, start, n): Use Dijkstra\'s algorithm to find the shortest paths from start to all other nodes. distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def can_travel_within_budget(n, m, q, roads, queries): Determines if it\'s possible to travel from city a to city b within the given budget for each query. graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) results = [] # Compute shortest paths from each city to every other city all_shortest_paths = {} for node in range(1, n + 1): all_shortest_paths[node] = dijkstra(graph, node, n) for a, b, c in queries: if all_shortest_paths[a][b] <= c: results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"Given a string consisting of lowercase letters, your task is to determine if the string is a \\"valid palindrome\\". A string is considered a valid palindrome if, after removing all non-alphabet characters and ignoring case differences, it reads the same forward and backward. Constraints * The length of the string is between 1 and 100. * The string consists of printable ASCII characters. Inputs Input is given from Standard Input in the following format: ``` s ``` Outputs Print `True` if the string is a valid palindrome, otherwise print `False`. Examples Input ``` A man, a plan, a canal: Panama ``` Output ``` True ``` Input ``` race a car ``` Output ``` False ``` Input ``` ` ``` Output ``` True ```","solution":"def is_valid_palindrome(s: str) -> bool: Determines if a string is a valid palindrome, after removing non-alphabet characters and ignoring case. # Filter out non-alphabet characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalpha()] # Check if the filtered list of characters is a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a robot that operates on a 2D grid. The robot starts at the origin point (0, 0), and you need to control it with a series of commands to reach a specific target position. The commands that the robot can understand are: - \'U\' : Move one unit Up. - \'D\' : Move one unit Down. - \'L\' : Move one unit Left. - \'R\' : Move one unit Right. Given a list of commands, your task is to determine if the series of commands will bring the robot back to the origin point (0, 0). Write a function `is_at_origin(commands: List[str]) -> bool` that takes in a list of commands and returns a boolean value indicating whether the robot will return to the origin point after executing the series of commands. # Input - A list `commands` (1 ≤ len(commands) ≤ 10^5), where each element is one of [\'U\', \'D\', \'L\', \'R\']. # Output - A single boolean value, `True` if the series of commands brings the robot back to the origin point, otherwise `False`. # Examples ```python >> is_at_origin([\'U\', \'D\', \'L\', \'R\']) True >> is_at_origin([\'U\', \'U\', \'D\', \'L\']) False ``` # Note - In the first example, the robot moves up, then down, then left, and then right, returning to the original point. - In the second example, the robot moves up twice, then down once, and left once, ending at a point away from the origin.","solution":"def is_at_origin(commands): Determine if the series of commands brings the robot back to the origin point. Args: commands (List[str]): A list of commands (\'U\', \'D\', \'L\', \'R\'). Returns: bool: True if the series of commands brings the robot back to the origin, False otherwise. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"You are given a list of N integers and a series of M queries. Each query provides a value V, and your task is to find and print the position of the first occurrence of V in the list. If the value V is not found, return -1. Input Input begins with a line containing two integers: N and M (1 ≤ N, M ≤ 100,000). The next line contains N integers, representing the list of integers. The next M lines each contain a single integer V, representing a query. Output For each query, output the position (1-indexed) of the first occurrence of V in the list. If V is not found, return -1. Examples Input 10 3 5 3 7 1 4 2 9 8 6 7 7 1 10 Output 3 4 -1 Note Explanation for the sample input/output: - The first query is for the value 7, which first occurs at position 3. - The second query is for the value 1, which occurs at position 4. - The third query is for the value 10, which does not exist in the list, so the output is -1.","solution":"def find_first_occurrence(n, m, arr, queries): Finds the position of the first occurrence of each query in the list. Parameters: n (int): The number of integers in the list. m (int): The number of queries. arr (list of int): The list of integers. queries (list of int): The list of queries. Returns: list of int: The positions of the first occurrence of each query in the list (1-indexed), or -1 if the query is not found. result = [] position_map = {} for i, num in enumerate(arr): if num not in position_map: position_map[num] = i + 1 for query in queries: result.append(position_map.get(query, -1)) return result"},{"question":"You are working on a software that helps managing employee data for a company. Each employee has a unique ID and belongs to a specific department. Your task is to implement a function that takes as input the number of employees, followed by the details of each employee (ID, department), and several queries asking for all employee IDs of a given department alphabetically sorted. Input The first line contains an integer n (1 ≤ n ≤ 100) which is the number of employees. The next n lines each contain two strings: the employee\'s ID (a unique string of lowercase Latin letters not exceeding 20 characters) and the department name (a string of lowercase Latin letters not exceeding 20 characters). The next line contains an integer q (1 ≤ q ≤ 100) which is the number of queries. The next q lines each contain a department name for which you need to return the list of employee IDs sorted alphabetically. Output For each query, output a single line containing the alphabetically sorted list of employee IDs (separated by a space) corresponding to the given department. If the department has no employees, print an empty line. Examples Input 5 alice engineering bob marketing carol engineering dave marketing eve hr 2 engineering marketing Output alice carol bob dave Input 3 john sales mike sales paul hr 2 hr finance Output paul","solution":"def manage_employees(n, employee_details, q, queries): Returns a list of strings where each string contains alphabetically sorted employee IDs for a respective query of department names. # Dictionary to hold department to employees mapping department_dict = {} # Populate the dictionary with employee details for emp_id, dept in employee_details: if dept not in department_dict: department_dict[dept] = [] department_dict[dept].append(emp_id) # List to store results for each query result = [] # Process each query for dept in queries: if dept in department_dict: result.append(\\" \\".join(sorted(department_dict[dept]))) else: result.append(\\"\\") return result"},{"question":"A company is organizing a coding competition, and they have a scoring system to determine the winner. During the competition, each participant submits M solutions to different problems, and each solution receives a score. The scores are stored in a 2D array where the ith row contains the scores of the ith participant for M problems. The ENERGY of a participant is calculated as the product of the sum of all scores of that participant and the maximum score among all submitted solutions by that participant. You need to determine the ENERGY of each participant and find the participant with the highest ENERGY. If there is a tie (multiple participants with the same highest ENERGY), the participant who appeared first in the input is chosen as the winner. Write a function to find and return the highest ENERGY and the participant\'s index (1-based) who achieved it. Input Format - The first line contains an integer N denoting the number of participants. - The second line contains an integer M denoting the number of problems. - The next N lines contain M space-separated integers representing the scores of each participant for M problems. Output Format - Print the highest ENERGY value and the 1-based index of the participant who achieved it. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 0 ≤ score ≤ 100 SAMPLE INPUT 3 4 10 20 30 40 5 15 25 35 1 2 3 4 SAMPLE OUTPUT 4000 1 Explanation For Participant 1: Sum of scores = 10 + 20 + 30 + 40 = 100, Max score = 40, ENERGY = 100 * 40 = 4000 For Participant 2: Sum of scores = 5 + 15 + 25 + 35 = 80, Max score = 35, ENERGY = 80 * 35 = 2800 For Participant 3: Sum of scores = 1 + 2 + 3 + 4 = 10, Max score = 4, ENERGY = 10 * 4 = 40 The highest ENERGY is 4000, and it is achieved by Participant 1.","solution":"def find_highest_energy(N, M, scores): Returns the highest ENERGY value and the 1-based index of the participant who achieved it. Parameters: N (int): Number of participants M (int): Number of problems scores (list of list of int): Scores in a 2D list where ith row contains the scores of ith participant Returns: tuple: highest ENERGY and the 1-based index of the participant who achieved it max_energy = 0 winner_index = -1 for i in range(N): score_sum = sum(scores[i]) max_score = max(scores[i]) energy = score_sum * max_score if energy > max_energy: max_energy = energy winner_index = i elif energy == max_energy and winner_index == -1: winner_index = i return max_energy, winner_index + 1 # converting 0-based index to 1-based index"},{"question":"Given a set of n words and a target word, write a program that determines the number of pairs of words such that each pair when combined (concatenated one after another) and then sorted lexicographically forms the target word. The words consist only of lowercase English letters. This problem requires you to consider all possible pairs of words in the set and check if their combined sorted version matches the target word. Input The first line contains an integer n (1 ≤ n ≤ 2000) — the number of words in the set. The second line contains the target word — a string of length between 2 and 100 000 consisting of lowercase English letters. Each of the following n lines contains a word consisting of lowercase English letters. Each word has a length between 1 and 50. Output Print a single integer — the number of pairs of words that when combined and sorted lexicographically yield the target word. Examples Input 5 abcde ab cde cb a d Output 1 Input 4 helloworld hello world h elloworld Output 2 Note In the first example, the only pair that satisfies the condition is (\\"ab\\", \\"cde\\"), as \\"abcd\\" + \\"e\\" when sorted gives \\"abcde\\". In the second example, the pairs that satisfy the condition are (\\"hello\\", \\"world\\") and (\\"h\\", \\"elloworld\\"), as both \\"helloworld\\" when sorted gives \\"dehllloorw\\".","solution":"def count_pairs(n, target, words): Determines the number of pairs of words such that each pair, when combined and sorted lexicographically, forms the target word. :param n: int - the number of words in the set. :param target: str - the target word. :param words: list of str - list of words. :return: int - the number of pairs that meet the criteria. from itertools import combinations sorted_target = \'\'.join(sorted(target)) pair_count = 0 for word1, word2 in combinations(words, 2): combined_sorted = \'\'.join(sorted(word1 + word2)) if combined_sorted == sorted_target: pair_count += 1 return pair_count"},{"question":"Write a function that checks whether a given word is a palindrome or not. A palindrome is a word that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Input You are given a single word s (1 ≤ |s| ≤ 100). The word contains only lowercase English letters. Output Output \\"YES\\" if the word is a palindrome, otherwise output \\"NO\\". Examples Input madam Output YES Input hello Output NO Input racecar Output YES","solution":"def is_palindrome(word): Checks if the given word is a palindrome. :param word: A single word containing only lowercase English letters. :return: \\"YES\\" if the word is a palindrome, \\"NO\\" otherwise. if word == word[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"A sequence of parentheses is called balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. For example, the sequence \\"(()())\\" is balanced, while \\")(\\" and \\"(()\\" are not. Given a string s representing a sequence of parentheses, we want to determine if the sequence is balanced. Input The input consists of a single line containing the string s, which represents the sequence of parentheses (0 ≤ length of s ≤ 100000). Output Print \\"YES\\" if the sequence is balanced, otherwise print \\"NO\\". Examples Input (()()) Output YES Input )( Output NO Input (()() Output NO","solution":"def is_balanced_parentheses(s): Returns \\"YES\\" if the sequence of parentheses is balanced, otherwise \\"NO\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are part of a software team developing an advanced traffic management simulation. The simulation includes numerous drones that monitor traffic at various checkpoints and record data for vehicles passing through each checkpoint. Each checkpoint has a unique ID, and each vehicle detected by a drone registers its ID, the checkpoint ID, the timestamp of the passage, and the vehicle type. The gathered data for a particular day has been pre-processed into a list of log entries. Each log entry contains the following information: - Checkpoint ID (an integer) - Vehicle ID (a string) - Timestamp (an integer representing the seconds from the start of the day) - Vehicle type (a string, either \\"car\\", \\"bus\\", or \\"truck\\") You have been tasked with analyzing this data to find out the busiest checkpoint for each type of vehicle based on the number of distinct vehicles (IDs) recorded at each checkpoint during that day. Write a function `busiest_checkpoints(logs: List[Tuple[int, str, int, str]]) -> Dict[str, int]` that takes a list of log entries and returns a dictionary where the keys are vehicle types (\\"car\\", \\"bus\\", and \\"truck\\"), and the value for each key is the checkpoint ID that is busiest for that vehicle type. If there are multiple checkpoints with the same maximum number of distinct vehicles for a vehicle type, return the checkpoint with the lowest ID. # Function Signature: ```python def busiest_checkpoints(logs: List[Tuple[int, str, int, str]]) -> Dict[str, int]: ``` # Input: - `logs`: A list of tuples, where each tuple contains four elements: checkpoint ID (integer), vehicle ID (string), timestamp (integer), and vehicle type (string). # Output: - A dictionary with keys - \\"car\\", \\"bus\\", and \\"truck\\". The value for each key is the checkpoint ID (integer) with the highest number of distinct vehicles of that type. If there are ties, return the smallest checkpoint ID. # Example: Input: ```python logs = [ (1, \\"V123\\", 3600, \\"car\\"), (2, \\"V124\\", 3605, \\"car\\"), (1, \\"V125\\", 3610, \\"car\\"), (2, \\"V123\\", 3700, \\"car\\"), (1, \\"B567\\", 3730, \\"bus\\"), (2, \\"B568\\", 3750, \\"bus\\"), (1, \\"T789\\", 3800, \\"truck\\"), (3, \\"T790\\", 4100, \\"truck\\"), (3, \\"T789\\", 4120, \\"truck\\"), (2, \\"V126\\", 4200, \\"car\\") ] ``` Output: ```python { \\"car\\": 2, \\"bus\\": 1, \\"truck\\": 3 } ``` In this example, checkpoint 2 recorded the most distinct cars (V124 and V126) compared to checkpoint 1 which recorded only distinct cars (V123 and V125). Checkpoint 1 recorded the only bus (\\"B567\\"), and checkpoint 3 recorded the most distinct trucks (T790 and T789 compared to checkpoint 1 which recorded only T789).","solution":"from collections import defaultdict from typing import List, Tuple, Dict def busiest_checkpoints(logs: List[Tuple[int, str, int, str]]) -> Dict[str, int]: # Dictionary to keep track of the checkpoints\' vehicle sets for each type vehicle_counts = { \\"car\\": defaultdict(set), \\"bus\\": defaultdict(set), \\"truck\\": defaultdict(set) } for log in logs: checkpoint_id, vehicle_id, timestamp, vehicle_type = log vehicle_counts[vehicle_type][checkpoint_id].add(vehicle_id) result = {} for vehicle_type in [\\"car\\", \\"bus\\", \\"truck\\"]: max_count = -1 busiest_checkpoint = -1 for checkpoint_id, vehicles in vehicle_counts[vehicle_type].items(): if len(vehicles) > max_count or (len(vehicles) == max_count and checkpoint_id < busiest_checkpoint): max_count = len(vehicles) busiest_checkpoint = checkpoint_id result[vehicle_type] = busiest_checkpoint return result"},{"question":"Given a list of n unique integers, you need to find the maximum sum of any k consecutive integers in the list. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of elements in the list and the number of consecutive elements to be summed. The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000) — the elements of the list. Output Print the maximum sum of any k consecutive integers in the list. Examples Input 5 2 1 2 3 4 5 Output 9 Input 8 3 -1 -2 -3 -4 -5 -6 -7 -8 Output -6 Note In the first example, the possible sums of any 2 consecutive integers are: 1+2=3, 2+3=5, 3+4=7, 4+5=9. The maximum among them is 9. In the second example, the possible sums of any 3 consecutive integers are: -1-2-3=-6, -2-3-4=-9, -3-4-5=-12, -4-5-6=-15, -5-6-7=-18, -6-7-8=-21. The maximum among them is -6.","solution":"def max_consecutive_sum(n, k, arr): Returns the maximum sum of any k consecutive integers in the list. max_sum = float(\'-inf\') current_sum = sum(arr[:k]) for i in range(n - k + 1): if i > 0: current_sum = current_sum - arr[i - 1] + arr[i + k - 1] if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: # n = 5 # k = 2 # arr = [1, 2, 3, 4, 5] # print(max_consecutive_sum(n, k, arr)) # Output: 9"},{"question":"Given a string, identify and return the first non-repeating character. If there is no non-repeating character, return an underscore (\'_\') instead. INPUT: The first line contains a single integer t, the number of test cases. Each of the next t lines contains a string s for which you need to find the first non-repeating character. OUTPUT: For each test case, output a single character which is the first non-repeating character in the string, or an underscore if there is none. Constraints: 1 ≤ t ≤ 100 1 ≤ length of s ≤ 100 SAMPLE INPUT 2 morning example SAMPLE OUTPUT m x","solution":"def first_non_repeating_character(s): This function finds and returns the first non-repeating character in a string. If there is no non-repeating character, it returns an underscore (\'_\'). char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\' def process_test_cases(t, test_cases): This function processes the test cases and returns the results. t: integer, number of test cases test_cases: list of strings, each string is a test case results = [] for s in test_cases: results.append(first_non_repeating_character(s)) return results"},{"question":"Given M toys arranged in a line, each toy has a certain number of points associated with it. You and your friend take turns picking a toy, where you can either: 1. Pick the first toy in the line. 2. Pick the last toy in the line. Once a toy is picked, it is removed from the line and the points are added to the player\'s score. The game ends when all toys are picked, and the player with the highest score wins. You will always take the first turn. Given M and the points associated with each toy in the line, determine if you can win the game assuming both you and your friend play optimally. Print \\"Win\\" if you can win, otherwise print \\"Lose\\". Input: - The first line contains T, the number of test cases. - For each test case, the first line contains M (the number of toys). - The second line contains M space-separated integers representing the points of each toy. Output: For each test case, print the result. Constraints: 1 ≤ T ≤ 100 1 ≤ M ≤ 1000 1 ≤ Points ≤ 1000 (each point value is a positive integer) SAMPLE INPUT 3 4 3 2 2 3 5 1 2 9 2 1 3 1 1000 1 SAMPLE OUTPUT Win Lose Lose Explanation: In the first test case, you can always mirror your friend\'s moves to ensure you get the same or more points and hence win. In the second test case, your friend, starting with either of the outer points, can force you into a position where they will have more points in the end. In the third test case, no matter which toy you pick from the ends, your friend can always pick the toy with 1000 points to win.","solution":"def toy_game_outcome(T, test_cases): Determines if you can win the game given each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - An integer M (the number of toys) - A list of M integers, the points of each toy. Returns: list of str: \\"Win\\" or \\"Lose\\" for each test case. results = [] for M, points in test_cases: dp = [[0] * M for _ in range(M)] for length in range(1, M + 1): for i in range(M - length + 1): j = i + length - 1 if i == j: dp[i][j] = points[i] else: dp[i][j] = max(points[i] - dp[i + 1][j], points[j] - dp[i][j - 1]) if dp[0][M-1] >= 0: results.append(\\"Win\\") else: results.append(\\"Lose\\") return results # Reading input and invoking the function to test def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): M = int(data[index]) index += 1 points = list(map(int, data[index:index + M])) index += M test_cases.append((M, points)) results = toy_game_outcome(T, test_cases) for result in results: print(result)"},{"question":"You are given an array of integers and a series of queries. Each query asks you to determine whether there exists a continuous subarray with a sum that is equal to a given number. Write a function to answer each of these queries. Input The first line of the input contains two integers, n and q (1 ≤ n, q ≤ 10^5), the number of elements in the array and the number of queries, respectively. The second line contains n integers, a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Each of the next q lines contains one integer x (-10^9 ≤ x ≤ 10^9), the target sum for the subarray in the corresponding query. Output For each query, output \\"YES\\" if there exists a continuous subarray whose sum equals the target sum, and \\"NO\\" otherwise. Examples Input 5 3 1 2 3 4 5 9 15 5 Output YES YES YES Input 4 2 1 -1 2 -3 1 -3 Output YES YES Note In the first example, we can find subarrays with the sums as follows: - Subarray [2, 3, 4] gives the sum 9. - Subarray [1, 2, 3, 4, 5] gives the sum 15. - Subarray [5] gives the sum 5. In the second example: - Subarray [1] gives the sum 1. - Subarray [2, -3] gives the sum -3.","solution":"def continuous_subarray_sum(n, q, array, queries): For each query, determine if there exists a continuous subarray whose sum equals the target sum. :param n: Number of elements in the array :param q: Number of queries :param array: List of integers representing the array :param queries: List of integers representing the target sums for each query :return: List of strings \\"YES\\" or \\"NO\\" for each query results = [] for x in queries: prefix_sum = 0 sums = {0} found = False for num in array: prefix_sum += num if (prefix_sum - x) in sums: results.append(\\"YES\\") found = True break sums.add(prefix_sum) if not found: results.append(\\"NO\\") return results"},{"question":"In a small town, there is an annual competition where participants need to solve a series of tasks to proceed to the next round. This year, one of the tasks involves processing operations on a list of numbers. Each participant is given a list of integers and a number of instructions. They must modify the list according to the instructions and provide the final modified list as their output. The instructions can be of three types: 1. \\"Add x y\\": Add the number x to the list y times. 2. \\"Insert x y\\": Insert the number x at the position y in the list. Positions are 1-based. 3. \\"Delete x\\": Delete all occurrences of the number x from the list. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of initial elements in the list. The next line contains n integers separated by spaces, representing the initial elements of the list. The third line contains an integer m (1 ≤ m ≤ 100), the number of instructions. The following m lines each contain one instruction in the format described above. Output Output the final modified list of integers, with elements separated by a single space. Examples Input 5 4 7 3 3 9 4 Add 2 3 Insert 1 2 Delete 3 Add 5 1 Output 4 1 2 2 2 5 7 9 Input 3 1 2 3 3 Insert 4 1 Add 5 2 Delete 1 Output 4 2 3 5 5 Input 2 6 8 2 Add 7 1 Delete 6 Output 8 7 Note - In the first example, the initial list is [4, 7, 3, 3, 9]. After adding number 2 three times, it becomes [4, 7, 3, 3, 9, 2, 2, 2]. Inserting number 1 at position 2 results in [4, 1, 7, 3, 3, 9, 2, 2, 2]. Deleting all 3s gives [4, 1, 7, 9, 2, 2, 2]. Finally, adding number 5 once makes the list [4, 1, 7, 9, 2, 2, 2, 5].","solution":"def process_operations(n, initial_list, m, instructions): Modifies the list according to the given instructions. Args: n (int): The number of initial elements in the list. initial_list (list of int): The initial list of integers. m (int): The number of instructions. instructions (list of str): The instructions to modify the list. Returns: list of int: The modified list. for instruction in instructions: parts = instruction.split() command = parts[0] if command == \'Add\': x = int(parts[1]) y = int(parts[2]) initial_list.extend([x] * y) elif command == \'Insert\': x = int(parts[1]) y = int(parts[2]) - 1 # Convert 1-based position to 0-based. initial_list.insert(y, x) elif command == \'Delete\': x = int(parts[1]) initial_list = [num for num in initial_list if num != x] return initial_list"},{"question":"Given a string `S` representing a sequence of characters from a book, you are asked to determine if `S` is a palindrome. A palindrome is a string that reads the same forward and backward. Constraints: * 1 leq |S| leq 100 * S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: S Output If `S` is a palindrome, print `Yes`; otherwise, print `No`. Examples Input madam Output Yes Input example Output No Input racecar Output Yes","solution":"def is_palindrome(s): Returns \'Yes\' if the input string s is a palindrome, otherwise \'No\'. if s == s[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"Julie is a prison security officer maintaining a circular prison with n cells arranged in a circle. Each cell is labeled from 1 to n. She has a schedule indicating which cells should be locked or unlocked during her shift. Given a list of operations, each consisting of a cell number and an action (\'lock\' or \'unlock\'), simulate the locking and unlocking process. At any point, Julie should be able to determine if a sequence of contiguous cells (from start cell to end cell) are all locked. Write a program to process the locking and unlocking operations and answer queries about the state of the cells. Input The first line contains two integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 1000), where n is the number of cells and q is the number of operations. The next q lines each contain two integers and a string. The first integer is the type of operation: 1 for a locking or unlocking operation, and 2 for a query. If the type is 1, it is followed by an integer representing the cell number (1 to n) and a string which is either \\"lock\\" or \\"unlock\\". If the type is 2, it is followed by two integers representing the start and end cell numbers. Output For each query operation, output \\"Yes\\" if all cells in the specified sequence are locked, otherwise output \\"No\\". Example Input 5 7 1 2 lock 1 3 lock 2 2 4 1 4 lock 1 2 unlock 2 2 4 2 1 5 Output No No No","solution":"def process_operations(n, operations): # Initialize all cells as unlocked cells = [False] * n # False means unlocked, True means locked result = [] for operation in operations: if operation[0] == 1: cell, action = operation[1] - 1, operation[2] if action == \\"lock\\": cells[cell] = True else: cells[cell] = False elif operation[0] == 2: start, end = operation[1] - 1, operation[2] - 1 if all(cells[start:end + 1]): result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"John is a fan of crossword puzzles. He is particularly fond of palindromes. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example, \\"radar\\" and \\"A man, a plan, a canal, Panama\\" are palindromes. John has created a special type of puzzle where each word in a given list can be made into a palindrome by possibly rearranging its letters and you need to check which words can be turned into a palindrome. A word can be rearranged into a palindrome if at most one character has an odd count in the word. Write a function that determines for each word in a list if it can be rearranged to form a palindrome. Return \\"YES\\" if it is possible to rearrange the letters to form a palindrome and \\"NO\\" if it is not. INPUT The first line contains an integer T, the number of words in the list. The next T lines each contain a single word consisting of lowercase English letters. OUTPUT You have to output T lines, each containing \\"YES\\" if the corresponding word can be rearranged to form a palindrome and \\"NO\\" otherwise. CONSTRAINTS 1 ≤ T ≤ 10^5 1 ≤ |word| ≤ 10^6 Total number of characters in the list of words ≤ 10^6 SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO","solution":"def can_form_palindrome(words): Given a list of words, determine if each word can be rearranged to form a palindrome. :param words: List of words to check :return: List of \\"YES\\" or \\"NO\\" for each word results = [] for word in words: char_count = {} for char in word: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"You are given an integer array `nums` consisting of `n` elements, and an integer `k`. You need to form and return the largest possible number using exactly `k` elements from the array `nums` while maintaining their relative order. Each element in the array appears in the same order in which it was given. In other words, you may not rearrange the array elements when forming the largest possible number. Write a function: ```python def max_number(nums: List[int], k: int) -> List[int]: pass ``` # Input - `nums`: a list of integers, where 1 ≤ n ≤ 1000. - `k`: an integer, 1 ≤ k ≤ n. # Output - Return a list of integers representing the largest possible number formed by exactly `k` elements from the array maintaining their relative order. # Example Example 1 ```python nums = [3, 4, 6, 5] k = 2 max_number(nums, k) ``` Output: `[6, 5]` Example 2 ```python nums = [9, 1, 2, 5, 8, 3] k = 3 max_number(nums, k) ``` Output: `[9, 8, 3]` Example 3 ```python nums = [3, 9, 5, 6] k = 3 max_number(nums, k) ``` Output: `[9, 5, 6]` # Constraints - You may assume that there will always be a unique answer for the given input.","solution":"from typing import List def max_number(nums: List[int], k: int) -> List[int]: Returns the largest possible number using exactly k elements from the array nums while maintaining their relative order. stack = [] drop = len(nums) - k for num in nums: while drop and stack and stack[-1] < num: stack.pop() drop -= 1 stack.append(num) return stack[:k]"},{"question":"A group of biologists is studying the genetic sequences of various species. They want to find common substrings that are repeated within these sequences. To help them out, you need to write a program that analyzes a given string representing a genetic sequence and identifies the longest repeated substring that appears at least twice in the sequence without overlapping. If there are multiple such substrings with the same maximum length, return the one that appears first. Your task is to implement this functionality. Input The input consists of a single string `s` of length `n` (1 ≤ n ≤ 1000), where `s` only contains uppercase English letters (\'A\' to \'Z\'). Output Output the longest repeated substring that appears at least twice in the sequence without overlapping. If there is no repeated substring, output \\"NONE\\". Examples Input ABABAB Output AB Input AAAA Output AA Input ABCDEFG Output NONE","solution":"def longest_repeated_substring(s: str) -> str: Finds the longest repeated substring that appears at least twice without overlapping. Args: s (str): The input string. Returns: str: The longest repeated substring or \\"NONE\\" if there is no such substring. n = len(s) # Helper function to check if a substring is repeated def is_repeated(sub): pos = s.find(sub) if pos != -1 and s.find(sub, pos + len(sub)) != -1: return True return False # Iterate from the longest possible substring to the shortest for length in range(n // 2, 0, -1): for i in range(n - length + 1): substring = s[i:i + length] if is_repeated(substring): return substring return \\"NONE\\""},{"question":"Alice is organizing a string transformation contest and she has prepared a fun but challenging problem for the contestants. Alice gives each participant two strings, `original` and `target`, each consisting of lowercase English letters. The task is to transform `original` into `target` using the minimum number of operations. The allowed operations are: 1. Add a character at any position in `original`. 2. Remove a character from any position in `original`. 3. Replace any character in `original` with another character. Alice wants to know the minimum number of operations required to transform `original` into `target`. **Input** The first line of the input contains a single integer `t` (1 ≤ t ≤ 10), the number of test cases. The following lines describe each test case in the following format: - The first line of each test case contains the string `original`. - The second line of each test case contains the string `target`. Both strings have lengths between 1 and 1000 inclusive. **Output** For each test case, print a single integer - the minimum number of operations required to transform `original` into `target`. **Examples** **Input** ``` 2 horse ros intention execution ``` **Output** ``` 3 5 ``` **Note** In the first example: - Transforming \'horse\' to \'ros\' can be done in 3 operations: 1. Remove \'h\': \\"horse\\" -> \\"orse\\" 2. Replace \'o\' with \'r\': \\"orse\\" -> \\"rrse\\" 3. Remove \'e\': \\"rrse\\" -> \\"rrs\\" In the second example: - Transforming \'intention\' to \'execution\' can be done in 5 operations: 1. Replace \'i\' with \'e\': \\"intention\\" -> \\"entention\\" 2. Replace \'n\' with \'x\': \\"entention\\" -> \\"extention\\" 3. Replace \'t\' with \'c\': \\"extention\\" -> \\"excention\\" 4. Replace \'n\' with \'u\': \\"excention\\" -> \\"execntion\\" 5. Add \'u\': \\"execntion\\" -> \\"execution\\"","solution":"def min_operations_to_transform(original, target): Calculates the minimum number of edit operations (insertion, deletion, substitution) required to transform \'original\' string into \'target\' string using dynamic programming. m, n = len(original), len(target) # dp[i][j] will hold the minimum number of operations required to transform # original[0:i] into target[0:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # When original is empty, we need to insert all characters of target for i in range(n + 1): dp[0][i] = i # When target is empty, we need to delete all characters of original for i in range(m + 1): dp[i][0] = i for i in range(1, m + 1): for j in range(1, n + 1): if original[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete operation dp[i][j - 1], # Insert operation dp[i - 1][j - 1] # Replace operation ) return dp[m][n] def minimum_operations(test_cases): results = [] for original, target in test_cases: results.append(min_operations_to_transform(original, target)) return results"},{"question":"You are given two integers n and k. Local bakery has a policy that they can deliver n breads to a customer if and only if n is divisible by k. You need to determine the minimum number of additional breads the bakery needs to bake so they can deliver the order. Input The first line of input contains two integers n and k. 1 <= n <= 10^9 1 <= k <= 10^9 Output Print a single integer denoting the minimum number of additional breads needed for the bakery to satisfy the order. Examples Input 10 3 Output 2 Input 20 5 Output 0 Explanation In the first example, the bakery has 10 breads, but to be able to deliver when k=3, the total number of breads must be a multiple of 3. The next multiple of 3 after 10 is 12, so the bakery needs to make 2 additional breads. In the second example, 20 is already divisible by 5, so no additional breads are needed.","solution":"def additional_breads(n, k): Returns the minimum number of additional breads needed for n to be divisible by k. remainder = n % k if remainder == 0: return 0 else: return k - remainder"},{"question":"Given a string `s` of length `n` consisting only of characters \'A\' and \'B\', you need to perform the following operation exactly `k` times: - Choose an index `i` (1 ≤ i ≤ n) and flip the character at this index (\'A\' becomes \'B\' and \'B\' becomes \'A\'). After performing the operation `k` times, output the lexicographically smallest string you can obtain. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100), the length of the string and the number of operations respectively. The second line contains the string `s` of length `n`. Output Print the lexicographically smallest string possible after performing the operation `k` times. Examples Input 4 2 BBAB Output AAAB Input 5 3 AABBA Output AAAAA Note For the first example, flipping the first two \'B\' characters results in the string \\"AAAB\\", which is the lexicographically smallest string possible after two operations. For the second example, flipping the last three \'B\' characters results in the string \\"AAAAA\\", which is the lexicographically smallest string possible after three operations.","solution":"def lexicographically_smallest_string(n, k, s): Returns the lexicographically smallest string possible after performing k flip operations on the string s. s = list(s) i = 0 while k > 0 and i < n: if s[i] == \'B\': s[i] = \'A\' k -= 1 i += 1 return \\"\\".join(s)"},{"question":"Given a rectangular grid of size NxM, you need to determine the minimum number of moves required to reach the bottom-right corner of the grid, starting from the top-left corner. You can only move one step to the right or one step down. Input: First line contains T, the number of test cases to follow. (1 ≤ T ≤ 100) Each test case contains two integers N and M representing the dimensions of the grid. (1 ≤ N, M ≤ 1000) Output: Output the minimum number of moves required to reach the bottom-right corner for each test case. SAMPLE INPUT 3 2 3 4 4 5 7 SAMPLE OUTPUT 3 6 10 Explanation **Sample Input** 3 2 3 4 4 5 7 **Output:** 3 6 10 **Explanation** To move from (1,1) to (N,M), it will take (N-1) moves down and (M-1) moves right. - For a 2x3 grid, it takes 1 down + 2 right = 3 moves. - For a 4x4 grid, it takes 3 down + 3 right = 6 moves. - For a 5x7 grid, it takes 4 down + 6 right = 10 moves.","solution":"def min_moves_to_reach_end(T, grid_sizes): Given a number of test cases and grid sizes, calculates the minimum number of moves to reach the bottom-right corner from the top-left corner of each grid. :param T: An integer representing the number of test cases. :param grid_sizes: A list of tuples, where each tuple contains two integers N and M representing the dimensions of the grid. :return: A list of integers where each integer represents the minimum number of moves required for the respective grid. moves = [] for N, M in grid_sizes: min_moves = (N - 1) + (M - 1) moves.append(min_moves) return moves"},{"question":"You are managing a warehouse log where you store large quantities of items. Each item in the warehouse is represented by a unique item code and an integer that indicates how many of those items are stocked. Given a list of inbound and outbound transactions, your task is to write a program to update the stock levels. Inbound transactions add quantities to the stock, while outbound transactions subtract quantities. If an outbound transaction exceeds the current stock level of an item, it should be ignored. There are two types of transactions: 1. Inbound transactions, which are denoted by `I x y`, meaning you received `y` items of unique code `x`. 2. Outbound transactions, which are denoted by `O x y`, meaning `y` items of unique code `x` are being shipped out. Once all transactions have been processed, output the list of final stock levels for each item code that had either inbound or outbound transactions, in ascending order of the item codes. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 1000), the number of transactions. The next `n` lines each contain a transaction in one of the following formats: - `I x y` where `x` is the item code (an integer, 1 ≤ x ≤ 10000) and `y` is the quantity (an integer, 1 ≤ y ≤ 10000). - `O x y` where `x` is the item code (an integer, 1 ≤ x ≤ 10000) and `y` is the quantity (an integer, 1 ≤ y ≤ 10000). Output For each unique item code involved in the transactions, output a line in the format `x y` where `x` is the item code and `y` is the final stock level of that item. Output the results in ascending order of item codes. Example Input 6 I 100 500 I 200 300 O 100 200 O 200 400 I 150 100 O 100 100 Output 100 200 150 100 200 300","solution":"def update_stock(n, transactions): stock = {} for transaction in transactions: parts = transaction.split() action, item_code, quantity = parts[0], int(parts[1]), int(parts[2]) if item_code not in stock: stock[item_code] = 0 if action == \'I\': stock[item_code] += quantity elif action == \'O\': if stock[item_code] >= quantity: stock[item_code] -= quantity result = sorted(stock.items()) return result"},{"question":"There is a magic kingdom with N towns and M roads. The towns are numbered from 1 to N, and the roads are numbered from 1 to M. Each road connects two towns bidirectionally. The king wants to ensure that every town is reachable from the capital, Town 1. However, the kingdom has a peculiar rule: no two roads can have the same length. The length of each road is given by C_i where 1 <= i <= M. Determine whether it is possible to assign unique lengths to each road such that every town is reachable from the capital. If it is possible, print \\"Yes\\" followed by the assigned lengths for each road. Otherwise, print \\"No\\". Constraints * All values in input are integers. * 2 leq N leq 10^5 * 1 leq M leq 2 times 10^5 * 1 leq A_i, B_i leq N (1 leq i leq M) * 1 leq C_i leq 10^9 * A_i neq B_i (1 leq i leq M) * One can travel between any two towns by traversing roads. Input Input is given from Standard Input in the following format: N M A_1 B_1 C_1 : A_M B_M C_M Output If there is no possible way to assign unique lengths to the roads satisfying the objective, print `No`. Otherwise, print \\"Yes\\", followed by M lines. Each line should contain the length assigned to the respective road in the same order as the input. Examples Input 4 4 1 2 10 2 3 20 3 4 30 4 2 40 Output Yes 1 2 3 4 Input 3 3 1 2 100 2 3 100 3 1 100 Output No","solution":"def assign_unique_lengths(N, M, roads): roads.sort(key=lambda x: x[2]) # Sort by the given length if len(set(x[2] for x in roads)) < M: return \\"No\\" assigned_lengths = list(range(1, M + 1)) result = [0] * M for i, (a, b, c) in enumerate(roads): result[i] = assigned_lengths[i] return [\\"Yes\\"] + result def process_input(data): lines = data.strip().split(\'n\') N, M = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return assign_unique_lengths(N, M, roads)"},{"question":"Given a number n, transform it into a palindrome by adding the minimum number of characters to its end. A palindrome is a string that reads the same backward as forward. Return the resulting palindrome. # Input The input contains a single integer n (1 ≤ n ≤ 10^6). # Output Output a string representing the palindrome formed by appending a minimal number of characters to the end of n. # Examples **Input:** ``` 123 ``` **Output:** ``` 12321 ``` **Input:** ``` 121 ``` **Output:** ``` 121 ``` **Note:** In the first example, \\"123\\" needs two characters \\"21\\" appended to its end to become \\"12321\\", which is a palindrome. In the second example, \\"121\\" is already a palindrome, so no characters need to be added.","solution":"def transform_to_palindrome(n): Transform the number n into a palindrome by adding the minimum number of characters to its end. Parameters: n (int): The input number. Returns: str: The resulting palindrome string. s = str(n) if s == s[::-1]: return s def is_palindrome(seq): return seq == seq[::-1] for i in range(len(s)): possible_palindrome = s + s[:i][::-1] if is_palindrome(possible_palindrome): return possible_palindrome return s # Example usage print(transform_to_palindrome(123)) # \\"12321\\" print(transform_to_palindrome(121)) # \\"121\\""},{"question":"Imagine you are working on an inventory management system for a warehouse. The warehouse stores items in shelves, and each shelf has a maximum weight capacity that should not be exceeded. Each item has a specific weight. You need to implement a method that helps warehouse employees determine if a given set of items can be placed on a specific shelf without exceeding the shelf’s weight capacity. Write a function that takes an integer representing the maximum weight capacity of a shelf and a list of integers where each integer represents the weight of an item to be placed on that shelf. The function should return a boolean indicating whether all the items can be placed on the shelf without exceeding its weight capacity. Function Signature: ```python def can_place_items(max_capacity: int, item_weights: List[int]) -> bool: ``` Input: - An integer `max_capacity` (1 ≤ max_capacity ≤ 10^5) representing the maximum weight capacity of the shelf. - A list of integers `item_weights` where each integer (1 ≤ item_weights[i] ≤ 10^4) represents the weight of an item. Output: - Return `True` if the total weight of the items is less than or equal to `max_capacity`, otherwise return `False`. Examples: Input: ```python max_capacity = 100 item_weights = [30, 20, 50] ``` Output: ```python True ``` Input: ```python max_capacity = 100 item_weights = [30, 20, 60] ``` Output: ```python False ``` Notes: - In the first example, the total weight of the items is 100, which is equal to the shelf\'s maximum weight capacity, so the function returns `True`. - In the second example, the total weight of the items is 110, which exceeds the shelf\'s maximum weight capacity, so the function returns `False`.","solution":"from typing import List def can_place_items(max_capacity: int, item_weights: List[int]) -> bool: Determines if the given set of items can be placed on a shelf without exceeding the shelf’s weight capacity. Args: max_capacity (int): The maximum weight capacity of the shelf. item_weights (List[int]): The weights of the items to be placed on the shelf. Returns: bool: True if the items\' total weight is less than or equal to max_capacity, False otherwise. total_weight = sum(item_weights) return total_weight <= max_capacity"},{"question":"You are a game designer and you are working on a feature which tracks user scores in a game. The scoring is based on a series of points gained or lost after each round. The points can be positive for a gain or negative for a loss. The game starts with an initial score of 0 and the series of points for each round is provided as an input. Your task is to calculate the final score after all the rounds are completed. Input The first line contains an integer N which denotes the number of rounds. The second line contains N space-separated integers which represent the points gained or lost in each round. Output Output a single integer which represents the final score. Constraints 1 ≤ N ≤ 1000 -1000 ≤ points in each round ≤ 1000 Example Input #1: 3 5 -2 3 Output #1: 6 Input #2: 5 -1 -1 -1 -1 -1 Output #2: -5 Explanation Example case 1. The score starts at 0, gains 5 points, loses 2 points, and gains 3 points, resulting in a final score of 6. Example case 2. The score starts at 0 and loses 1 point in each of the 5 rounds, resulting in a final score of -5.","solution":"def final_score(rounds, points): Calculate the final score after all rounds. :param rounds: Integer, the number of rounds :param points: List of integers, the points gained or lost in each round :return: Integer, the final score score = 0 for point in points: score += point return score"},{"question":"Bob, a budding data scientist, is working on a dataset of stock prices. He has a sequence of stock prices for N consecutive days and intends to analyze some interesting properties of this sequence. One property that Bob is interested in is identifying periods of consecutive days where the stock price continuously increased or decreased. For simplicity, we define an increasing period as a sequence of consecutive days where each day\'s stock price is strictly greater than the previous day\'s stock price. Similarly, a decreasing period is a sequence of consecutive days where each day\'s stock price is strictly less than the previous day\'s stock price. Help Bob determine the length of the longest increasing period and the longest decreasing period in the sequence of stock prices. # Input The first line contains a single integer N (1 ≤ N ≤ 100,000), the number of days. The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9) representing the stock prices for each day. # Output Output two integers separated by a space: the length of the longest increasing period and the length of the longest decreasing period in the sequence. # Example Input 7 5 3 4 8 6 7 8 Output 3 2 Input 10 1 2 3 4 5 6 7 8 9 10 Output 10 1 Input 6 10 9 8 7 6 5 Output 1 6 # Note In the first example, the longest increasing period is 3 (prices 3, 4, 8) and the longest decreasing period is 2 (prices 8, 6). In the second example, the entire sequence is an increasing period. In the third example, the entire sequence is a decreasing period.","solution":"def find_longest_periods(N, prices): if N == 1: return 1, 1 longest_increasing = 1 longest_decreasing = 1 current_increasing = 1 current_decreasing = 1 for i in range(1, N): if prices[i] > prices[i - 1]: current_increasing += 1 current_decreasing = 1 elif prices[i] < prices[i - 1]: current_decreasing += 1 current_increasing = 1 else: current_increasing = 1 current_decreasing = 1 longest_increasing = max(longest_increasing, current_increasing) longest_decreasing = max(longest_decreasing, current_decreasing) return longest_increasing, longest_decreasing"},{"question":"You are managing a sports league, and each player has a unique uniform number. You need to keep track of the number of goals each player scores. After each match, you want to update the players\' scores and find the player with the highest total score. Write a program that: 1. Reads an integer n, the number of matches played. 2. For each match, reads an integer k, the number of players who scored in that match. 3. For each player who scored in that match, reads two integers: the player\'s uniform number and the number of goals they scored in that match. 4. Updates the total goals for each player. 5. After processing all matches, finds and prints the uniform number of the player with the highest total goals. If multiple players have the same highest total goals, print the smallest uniform number among them. Input - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of matches. - For each of the next n blocks: - The first line contains an integer k (1 ≤ k ≤ 50), representing the number of players who scored in that match. - The next k lines each contain two integers u (1 ≤ u ≤ 105), the player\'s uniform number, and g (1 ≤ g ≤ 10), the number of goals they scored in that match. Output - Print a single integer representing the uniform number of the player with the highest total goals. Examples Input 3 2 10 2 20 3 3 10 1 30 4 20 2 1 20 3 Output 20","solution":"def find_top_scorer(n, match_data): from collections import defaultdict player_goals = defaultdict(int) for match in match_data: for player, goals in match: player_goals[player] += goals top_scorer = min((p for p in player_goals if player_goals[p] == max(player_goals.values()))) return top_scorer"},{"question":"Given two arrays of integers, the goal is to determine if you can transform one array into the other through a series of operations. In each operation, you can choose any subarray of length k, and reverse it. For example, if k = 3 and we have the array [1, 2, 3, 4, 5], you can select the subarray starting at the second element to get [1, 4, 3, 2, 5], or the subarray starting at the third element to get [1, 2, 5, 4, 3], etc. To determine if it\'s possible to transform the first array into the second one, you need to evaluate the given arrays according to the operations allowed. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the length of the arrays. The second line contains one integer k (1 ≤ k ≤ n) — the length of the subarray which can be reversed during each operation. The third line contains n integers a_1, a_2, ..., a_n — the elements of the first array. The fourth line contains n integers b_1, b_2, ..., b_n — the elements of the second array. Output Print \\"YES\\" if it\'s possible to transform the first array into the second one, otherwise print \\"NO\\". You may print each letter in any register. Example Input 6 3 1 2 3 4 5 6 1 4 3 2 5 6 Output YES","solution":"def can_transform(n, k, a, b): if a == b: return \\"YES\\" if k == 1: return \\"YES\\" if a == b else \\"NO\\" return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You can perform the following operation at most once: choose any substring of s and move it to the beginning of the string without changing its order. Your task is to determine the lexicographically smallest string that can be obtained after performing the operation at most once. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The only line of each test case contains a string s (1 ≤ |s| ≤ 50) and an integer k (1 ≤ k ≤ |s|). Output For each test case, print a single line containing the lexicographically smallest string that can be obtained after performing the operation at most once. Example Input 4 abcde 1 aaaaa 3 zxy 2 abab 2 Output abcde aaaaa xyz aabb Note In the first test case, no matter how you move any substring to the beginning of the string, the lexicographically smallest string remains \\"abcde\\". In the second test case, the string is already lexicographically smallest. In the third test case, you can choose the substring \\"xy\\" and move it to the beginning to obtain \\"xyz\\". In the fourth test case, you can choose the second \\"ab\\" and move it to the beginning to obtain \\"aabb\\".","solution":"def find_lexicographically_smallest_string(t, test_cases): results = [] for s, k in test_cases: n = len(s) if k == 1: # Generate all possible strings by rotating and find the smallest candidates = [s[i:] + s[:i] for i in range(n)] smallest_string = min(candidates) else: # As you can move any substring to the front, sorting the string would yield the smallest result smallest_string = \'\'.join(sorted(s)) results.append(smallest_string) return results"},{"question":"Rope Bridge Balance A group of adventurers is exploring a treacherous jungle filled with dangerous rivers. They have encountered a broken rope bridge that can only support the passage of one person at a time. However, this bridge can only handle a specific maximum weight before breaking. The adventurers need to cross the bridge while adhering to this weight limit. You are tasked with determining the minimum number of trips required for all adventurers to cross the bridge. You have been given the following parameters: * `N`: the number of adventurers. * `weights`: a list of integers where each integer represents the weight of a particular adventurer. * `max_weight`: the maximum weight that the bridge can sustain at one time. The adventurers can only cross the bridge one at a time, and their individual weights cannot exceed `max_weight`. Input The input consists of multiple datasets. Each dataset is represented in the following format: > N max_weight > w1 w2 w3 ... wN *N* is an integer between 1 and 100, representing the number of adventurers. `max_weight` is an integer between 1 and 1000, representing the maximum supported weight. `weights` is a list of N integers between 1 and 1000, with each integer representing the weight of an adventurer. The end of the input is indicated by a line consisting of only one `#`. Output For each dataset, output the minimum number of trips required for all adventurers to cross the bridge on one line. Examples: Input 3 100 40 50 60 4 100 50 30 80 90 2 120 70 80 # Output 3 4 2 Example Input 3 100 40 50 60 4 100 50 30 80 90 2 120 70 80 # Output 3 4 2","solution":"def minimum_trips(n, weights, max_weight): trips = 0 for weight in weights: if weight > max_weight: continue # Skip weights that exceed the max_weight as no one can cross with that weight else: trips += 1 return trips def parse_input(input_str): datasets = input_str.strip().split(\'n\') results = [] for i in range(0, len(datasets) - 1, 2): n, max_weight = map(int, datasets[i].split()) weights = list(map(int, datasets[i + 1].split())) results.append(minimum_trips(n, weights, max_weight)) return results # Sample input and output implementation input_str = 3 100 40 50 60 4 100 50 30 80 90 2 120 70 80 # result = parse_input(input_str) for res in result: print(res)"},{"question":"Alice is a software developer working on a new project that involves processing large datasets. She needs to implement a feature that finds the longest subsequence of consecutive integers in an unordered list of integers. The subsequence must consist of unique values and be strictly increasing. Alice has asked for your help in designing an efficient solution to this problem. Your task is to write a function that takes a list of integers as input and returns the length of the longest subsequence of consecutive integers. **Input** The input consists of a single line containing a space-separated list of integers. **Output** The output is a single integer, which is the length of the longest subsequence of consecutive integers. **Example** **Input** 5 2 99 100 101 98 1 3 4 **Output** 5 **Input** 50 5 4 9 8 7 6 2 1 3 **Output** 9 **Input** 15 14 13 12 11 10 9 8 7 3 1 **Output** 9 **Note** In the first sample input, the subsequence [1, 2, 3, 4, 5] is the longest sequence of consecutive integers and has a length of 5. In the second sample input, the entire list [1, 2, 3, 4, 5, 6, 7, 8, 9] is the longest sequence of consecutive integers and has a length of 9. In the third sample input, the subsequence [7, 8, 9, 10, 11, 12, 13, 14, 15] is the longest sequence of consecutive integers and has a length of 9.","solution":"def longest_consecutive_subsequence(nums): Finds the length of the longest subsequence of consecutive integers in an unordered list of integers. Parameters: nums (list of int): The list of integers. Returns: int: The length of the longest subsequence of consecutive integers if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: # start of a new sequence current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are working on a text processing project where you need to analyze a book to understand the frequency of words used. Specifically, you want to find the most frequent word in the text, ignoring the case of the words. If there are multiple words with the same highest frequency, return the lexicographically smallest one. Input The input consists of a single string containing the text of the book. The string can include uppercase and lowercase letters, digits, punctuation marks, and spaces. The length of the string will not exceed 10^6 characters. Output Print the most frequent word from the book, ignoring case. In case of a tie, print the lexicographically smallest word. Examples Input \\"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness.\\" Output \\"it\\" Note In the example text, the word \\"it\\" appears the most frequently, a total of 4 times. Other words also appear multiple times, but their frequency is less than that of \\"it\\". The punctuation marks are not part of the words.","solution":"import re from collections import Counter def most_frequent_word(text): Returns the most frequent word from the given text, ignoring case. If there is a tie, returns the lexicographically smallest word. words = re.findall(r\'bw+b\', text.lower()) word_counts = Counter(words) # Get the maximum frequency max_freq = max(word_counts.values()) # Find the words that have the maximum frequency most_frequent_words = [word for word, count in word_counts.items() if count == max_freq] # Return the lexicographically smallest word among them return min(most_frequent_words)"},{"question":"Alice has a series of programming assignments, each with a number of days D until its deadline. For each assignment, she can complete a portion and then continue the next day. Each day Alice works on an assignment, she makes a fixed amount of progress P. If an assignment has not reached 100% (or more) completion by the deadline, it is considered incomplete. Given the number of days D until the deadline and Alice\'s daily progress P for a series of assignments, write a program that determines for each assignment, whether it is `complete` or `incomplete`. Constraints * 1 ≤ D ≤ 100 * 1 ≤ P ≤ 100 * 1 ≤ N ≤ 100 Input Input is given from Standard Input in the following format: N D1 P1 D2 P2 ... DN PN Where N is the number of assignments. Di is the number of days until the deadline for the i-th assignment, and Pi is Alice\'s daily progress for the i-th assignment. Output Print `complete` or `incomplete` for each assignment in a new line. Examples Input 3 5 25 4 30 2 60 Output complete complete incomplete Input 2 3 34 6 14 Output complete incomplete","solution":"def check_assignments(assignments): results = [] for days, progress in assignments: if days * progress >= 100: results.append(\\"complete\\") else: results.append(\\"incomplete\\") return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\\"n\\") N = int(data[0]) assignments = [tuple(map(int, line.split())) for line in data[1:N+1]] results = check_assignments(assignments) for result in results: print(result)"},{"question":"Groot is a fan of unique sequences and loves solving puzzles. One day, he comes across a sequence problem that he decides to solve. The sequence is called \\"Circular Sum Sequence.\\" It consists of N positive integers, and each integer in the sequence represents the strength of an element. Groot\'s task is to determine the maximum sum of a contiguous subsequence of elements in circular order. A contiguous subsequence in circular order means that the subsequence can wrap around the end of the sequence and start again from the beginning. For example, in the sequence [1, 2, 3], the subsequence [3, 1] is considered contiguous in circular order. Groot needs your help to write a program that solves this problem. Input The first line contains a single integer N (1 ≤ N ≤ 105), the length of the sequence. The second line contains N space-separated positive integers representing the strengths of the elements in the sequence. Output Output a single integer, the maximum sum of any contiguous subsequence in circular order. Examples Input 5 8 9 10 1 2 Output 30 Input 3 1 2 3 Output 6 Input 4 5 5 5 5 Output 20","solution":"def max_subarray_sum_circular(nums): def kadane(arr): Standard Kadane\'s algorithm to find the maximum sum subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Max sum subarray without wraparound (standard Kadane\'s algorithm) max_kadane = kadane(nums) # Total sum of the array total_sum = sum(nums) # Invert the elements of the array to use kadane for wraparound nums_inverted = [-num for num in nums] # Max sum subarray that excludes the minimum subarray max_wrap = total_sum + kadane(nums_inverted) # Edge case when all elements are negative, we should not use max_wrap if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"You are given a collection of books, each of which has a unique title and a corresponding list of authors. Each author can write multiple books, and similarly, a single book can be written by more than one author. Your task is to find all the unique pairs of authors who have co-authored at least one book together. INPUT: - The first line contains an integer N, the number of books. - The next N lines each contain a string (book title) followed by an integer M, the number of authors of that book. - Each of the following M lines contains a string (author\'s name) representing an author of the book. OUTPUT: - Print all unique pairs of authors who have co-authored at least one book together. Each pair should be printed in lexicographic order. Sort the pairs lexicographically by the first author, then by the second author. CONSTRAINTS: - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 10 - Length of each book title and author\'s name does not exceed 100. - Each author name consists of only lowercase and uppercase English letters. SAMPLE INPUT 3 \\"Book1\\" 3 Alice Bob Charlie \\"Book2\\" 2 Alice Bob \\"Book3\\" 2 Bob David SAMPLE OUTPUT Alice Bob Alice Charlie Bob Charlie Bob David","solution":"def find_coauthors(n, books): from itertools import combinations coauthor_pairs = set() for book in books: title, m, authors = book current_pairs = combinations(sorted(authors), 2) coauthor_pairs.update(current_pairs) sorted_pairs = sorted(coauthor_pairs) return [\\" \\".join(pair) for pair in sorted_pairs] def parse_books_input(n, input_lines): books = [] i = 0 while i < len(input_lines): title_parts = [] while not input_lines[i].isdigit(): title_parts.append(input_lines[i]) i += 1 title = \\" \\".join(title_parts) m = int(input_lines[i]) authors = [] for j in range(i + 1, i + 1 + m): authors.append(input_lines[j]) books.append((title, m, authors)) i = j + 1 return books"},{"question":"You are given two strings, `s1` and `s2`. Your task is to determine if one string is a rotation of the other. A string is considered a rotation of another string if it can become the other string by performing some number of shifts (rotations) of its characters. Constraints * 1 ≤ |s1|, |s2| ≤ 1000 * s1 and s2 contain only lowercase English letters. Input Two strings `s1` and `s2`. Output Print \\"YES\\" if one string is a rotation of the other, otherwise print \\"NO\\". Examples Input abcd dabc Output YES Input hello lohel Output YES Input abc acb Output NO Input abcd abdc Output NO","solution":"def is_rotation(s1, s2): Returns \\"YES\\" if s2 is a rotation of s1, otherwise returns \\"NO\\". if len(s1) != len(s2): return \\"NO\\" combined = s1 + s1 if s2 in combined: return \\"YES\\" else: return \\"NO\\""},{"question":"In the kingdom of Algotopia, there are n cities connected by m bidirectional roads forming a network. Each road between two cities has a certain travel time. The king is planning to build a new direct road between two cities to minimize the maximum travel time between any pair of cities in the kingdom. Your task is to help the king determine the best pair of cities to connect with the new road. Given the current road network, find the optimal pair of cities (x, y) to connect with a direct road such that the maximum travel time between any two cities in the new network is minimized. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) — description of a road between cities u and v with travel time t. Output Output two integers x and y — the pair of cities the king should connect to achieve the objective. If there are multiple pairs with the same result, output any one of them. Examples Input 4 4 1 2 5 2 3 5 3 4 5 4 1 5 Output 1 3 Input 3 2 1 2 1 2 3 1 Output 1 3","solution":"import itertools def find_best_new_road(n, m, roads): # Initialize distance matrix with infinity INF = float(\'inf\') dist = [[INF] * n for _ in range(n)] # Set the distance from each city to itself to 0 for i in range(n): dist[i][i] = 0 # Add the initial roads for u, v, t in roads: dist[u-1][v-1] = t dist[v-1][u-1] = t # Apply Floyd-Warshall algorithm to find all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Function to get the maximum travel time in the current distance matrix def get_max_travel_time(dist): max_time = 0 for i in range(n): for j in range(n): if i != j and dist[i][j] < INF: max_time = max(max_time, dist[i][j]) return max_time current_max_time = get_max_travel_time(dist) # Try adding a road between every pair of cities and find the best pair best_pair = (1, 2) # Default output if no better pair is found min_max_travel_time = current_max_time for i, j in itertools.combinations(range(n), 2): if dist[i][j] < INF: continue # Skip if there is already a road between them # Temporary add road between city (i+1) and city (j+1) temp_dist = [row[:] for row in dist] temp_dist[i][j] = temp_dist[j][i] = 1 # Using travel time 1 for minimization # Re-run Floyd-Warshall to update shortest paths for k in range(n): for u in range(n): for v in range(n): if temp_dist[u][v] > temp_dist[u][k] + temp_dist[k][v]: temp_dist[u][v] = temp_dist[u][k] + temp_dist[k][v] new_max_time = get_max_travel_time(temp_dist) if new_max_time < min_max_travel_time: min_max_travel_time = new_max_time best_pair = (i + 1, j + 1) return best_pair"},{"question":"You are given a tree with `n` nodes, rooted at node 1. Each node i has a value `vi`. You are asked to process `q` queries on this tree. Each query can be of three types: 1. Update the value of a node `u` to `x`. 2. Find the sum of values in the subtree rooted at a node `u`. 3. Find the smallest value in the subtree rooted at a node `u`. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100000) — the number of nodes in the tree and the number of queries. The second line contains `n` integers `v1, v2, ..., vn` (1 ≤ vi ≤ 10^9) — the initial values of the nodes. The next `n-1` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating there is an edge between nodes `u` and `v`. The following `q` lines describe the queries. Each query is described by three integers `t`, `u`, and `x` (1 ≤ u ≤ n; 1 ≤ x ≤ 10^9). Here, `t` indicates the type of query: - If `t = 1`, update the value of node `u` to `x`. - If `t = 2`, find the sum of values in the subtree rooted at node `u`. - If `t = 3`, find the smallest value in the subtree rooted at node `u`. Output For each query of type 2 or type 3, output the result on a new line. Example Input 5 5 1 2 3 4 5 1 2 1 3 2 4 2 5 2 1 1 2 10 2 2 3 2 3 3 Output 15 19 4 1 Explanation The tree structure is: ``` 1 / 2 3 / 4 5 ``` The update query changes the value of node 2 to 10. At this point, values of each node become [1, 10, 3, 4, 5]. - The first query of type 2 asks for the sum of values in the subtree rooted at node 1, which is 1+10+3+4+5 = 23. - The second query of type 2 asks for the sum of values in the subtree rooted at node 2, which is 10+4+5 = 19. - The query of type 3 asks for the smallest value in the subtree rooted at node 2, which is min(10, 4, 5) = 4. - The last query of type 3 asks for the smallest value in the subtree rooted at node 3, which is min(3) = 3.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def update_node_value(tree, node_id, new_value): tree[node_id].value = new_value def build_tree(n, node_values, edges): nodes = {i: TreeNode(node_values[i-1]) for i in range(1, n+1)} for u, v in edges: nodes[u].children.append(nodes[v]) nodes[v].children.append(nodes[u]) # Convert graph to tree, removing back references def make_tree(node, parent=None): node.children = [child for child in node.children if child != parent] for child in node.children: make_tree(child, node) make_tree(nodes[1]) # Assuming the root node is 1 return nodes def subtree_sum(node): total = node.value for child in node.children: total += subtree_sum(child) return total def subtree_min(node): min_value = node.value for child in node.children: min_value = min(min_value, subtree_min(child)) return min_value def process_queries(n, q, node_values, edges, queries): tree = build_tree(n, node_values, edges) results = [] for query in queries: t, u, x = query if t == 1: update_node_value(tree, u, x) elif t == 2: results.append(subtree_sum(tree[u])) elif t == 3: results.append(subtree_min(tree[u])) return results"},{"question":"Write a program to manage a list of items with a rating and display the top-rated items. Users will be adding items with a specific rating to the list and once all items are added, the program should output the top k items with the highest rating. In case of a tie in the ratings, the items should be displayed in the order they were added. Input The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100 000) — the number of items and the number of top-rated items to display. Each of the next n lines contains an item name (a string without spaces) and its rating ri (1 ≤ ri ≤ 100 000). All item names are unique. Output Print the names of the top k rated items in descending order of their ratings. In case of a tie in the ratings, display the items in the order they were added. Examples Input 5 3 item1 5 item2 3 item3 5 item4 2 item5 5 Output item1 item3 item5 Input 4 2 apple 10 banana 20 carrot 20 date 15 Output banana carrot Input 6 4 a 2 b 3 c 5 d 3 e 5 f 1 Output c e b d Note In the first example, there are more than three items with the highest rating. The items are displayed maintaining the order they were added. In the second example, there is a tie between \\"banana\\" and \\"carrot\\", but they are displayed as \\"banana\\" was added first. In the third example, even though there are two items with a rating of 5, they are maintained in the order they were added. The items with a rating of 3 are also kept in their original order.","solution":"def top_k_items(n, k, items): Return the names of the top k rated items in descending order of their ratings. In case of a tie in the ratings, items are displayed in the order they were added. # Sort the items first by rating in descending order, then by their original order items.sort(key=lambda item: (-item[1], item[2])) # use negative rating for descending sort top_k = [item[0] for item in items[:k]] # take the top k items return top_k"},{"question":"Problem statement You have decided to go on an adventurous hiking trip with three of your friends. You plan to climb N peaks in a mountain range, one after another. Each peak has a certain height, given in meters in an array. Your goal is to minimize the maximum height difference between two consecutive peaks in the hiking sequence. Formally, let `heights` be an array of N integers representing the heights of the peaks. You need to arrange the peaks in such a way that the maximum height difference between two consecutive peaks is minimized. Return the minimized maximum height difference. Constraint * 2 leq N leq 100 * 1 leq heights[i] leq 1000 * All inputs are integers Input Input is given from standard input in the following format. N heights Output Output the minimized maximum height difference between two consecutive peaks in one line. * * * Input example 1 5 10 20 30 40 50 Output example 1 10 If you arrange the peaks in their original order [10, 20, 30, 40, 50], the maximum height difference between consecutive peaks is minimized to 10. * * * Input example 2 4 100 200 300 400 Output example 2 100 Any arrangement of the peaks [100, 200, 300, 400] results in the same height difference of 100. Example Input 5 10 20 30 40 50 Output 10","solution":"def minimized_maximum_height_difference(N, heights): Returns the minimized maximum height difference between consecutive peaks. heights.sort() max_diff = float(\'inf\') for i in range(1, N): diff = heights[i] - heights[i - 1] max_diff = min(max_diff, diff) return max_diff"},{"question":"You are organizing a game competition, and you\'ve received the scores of all participants in the competition. For each participant, you need to determine the minimum number of higher scores they need to achieve to at least tie with the highest score in the competition. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of participants. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 1,000) — the scores of the participants. Output Print n space-separated integers, where the i-th integer represents the minimum number of times the i-th participant needs to increase their score to equal the highest score among the participants. Assume that each increase operation increases the score by 1 point. Examples Input 5 3 1 4 3 2 Output 1 3 0 1 2 Input 4 7 7 7 7 Output 0 0 0 0","solution":"def min_increases(n, scores): # Find the highest score max_score = max(scores) # Calculate the minimum number of increases each participant needs increases = [max_score - score for score in scores] return increases"},{"question":"The renowned chef MasterChef has designed a special recipe that requires precise temperature control across multiple stages of the cooking process. As an automated cooking assistant programmer, you have been tasked to develop a function that determines the ideal temperature at each stage to ensure the success of the recipe. The cooking process can be divided into `N` stages, each specified with a desired base temperature in degrees Celsius. Additionally, each stage requires a custom adjustment factor that represents how much the base temperature should be adjusted to achieve optimal results. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100), the number of stages in the cooking process. - The second line contains `N` integers, each representing the base temperature `T` (0 ≤ T ≤ 100) for each stage. - The third line contains `N` integers, each representing the adjustment factor `A` (-50 ≤ A ≤ 50) for each base temperature. # Output The output is a single line containing `N` integers representing the final adjusted temperatures for each stage, in the same order as the input. # Sample Input ``` 5 25 30 40 50 60 5 -3 10 0 -10 ``` # Sample Output ``` 30 27 50 50 50 ``` # Explanation For each stage: - Stage 1: 25 + 5 = 30 - Stage 2: 30 - 3 = 27 - Stage 3: 40 + 10 = 50 - Stage 4: 50 + 0 = 50 - Stage 5: 60 - 10 = 50 Starting from the base temperature, apply the corresponding adjustment factor to determine the final temperature for each stage.","solution":"def calculate_final_temperatures(N, base_temperatures, adjustment_factors): This function takes the number of stages N, a list of base temperatures, and a list of adjustment factors, and returns a list of final temperatures after applying the adjustments. final_temperatures = [] for i in range(N): final_temperature = base_temperatures[i] + adjustment_factors[i] final_temperatures.append(final_temperature) return final_temperatures"},{"question":"Eve has a number of tree seedlings she wants to plant in a garden. She must follow certain planting conditions: 1. She can plant one seedling between two previously planted seedlings if there is at least one unoccupied spot between them. 2. She can exchange the position of any two seedlings. Eve wants to plant the seedlings such that no two seedlings are adjacent, in order to allow space for their growth. However, the garden has a limited number of spots. Can you help her determine if it is possible to plant all the seedlings following these conditions? Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines describe the test cases: Each line contains two integers n and k separated by a space (0 ≤ k ≤ 1000, n ≤ 2k) — where n represents the total number of available spots in the garden, and k represents the number of seedlings Eve wants to plant. Output For each test case, print \\"YES\\" if it is possible to plant all the seedlings following the conditions; otherwise, print \\"NO\\". Example Input 3 5 2 7 4 4 4 Output YES YES NO Note For the first test case, Eve can plant the two seedlings as follows: - _ S _ S _ Where \'_\' denotes an unoccupied spot and \'S\' denotes a seedling. For the second test case, Eve can plant four seedlings as follows: - S _ S _ S _ S For the third test case, it is impossible to plant all four seedlings with no two being adjacent because the garden only has 4 spots.","solution":"def can_plant_seedlings(t, cases): results = [] for i in range(t): n, k = cases[i] # Check the condition for planting all seedlings if k == 0: results.append(\\"YES\\") # No seedlings to plant, always possible elif k <= (n + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two sorted linked lists. Each node in the linked list contains a single integer. Write a function to merge these two linked lists into a single linked list that is also sorted. Function Signature ```python def merge_sorted_lists(list1: ListNode, list2: ListNode) -> ListNode ``` Input - List1 and List2 are the heads of two sorted linked lists. Output - Return the head of the merged linked list. Constraints - All nodes in the given linked lists will not contain negative values. - The number of nodes in either linked list is between 0 and 1000 inclusive. - Your solution should run in O(n + m) time complexity, where n and m are the lengths of the two linked lists. Example Input ``` list1: 1 -> 3 -> 5 list2: 2 -> 4 -> 6 ``` Output ``` 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` Input ``` list1: 1 -> 2 -> 4 list2: 1 -> 3 -> 4 ``` Output ``` 1 -> 1 -> 2 -> 3 -> 4 -> 4 ``` Explanation - In the first example, the merged linked list has all nodes in non-decreasing order: 1, 2, 3, 4, 5, 6. - In the second example, the merged linked list correctly merges the input lists and maintains sorted order: 1, 1, 2, 3, 4, 4.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sorted_lists(list1: ListNode, list2: ListNode) -> ListNode: dummy = ListNode() tail = dummy while list1 and list2: if list1.val < list2.val: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next if list1: tail.next = list1 if list2: tail.next = list2 return dummy.next"},{"question":"In an ancient city, there is a festival celebrated every year, and one of the main events is organizing a parade in which all the citizens participate. Each citizen has a unique desire which can be classified into one of `k` types, denoted by integers from `1` to `k`. The mayor of the city wants to ensure that the parade is organized in such a way that all citizens who have the same type of desire are grouped together. For example, if there are citizens with desires represented as `2 1 2 1 3`, they should be rearranged to `2 2 1 1 3`. Given an initial arrangement of citizens\' desires, your task is to write a program that rearranges them so that all citizens with the same type of desire are contiguous. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of citizens. - The second line contains `n` integers `d` (1 ≤ d_i ≤ k), where `d_i` represents the desire type of the i-th citizen. Output: - Output a single line containing the rearranged desires such that all citizens with the same type are grouped together. Examples: Input: 6 2 3 1 2 1 3 Output: 1 1 2 2 3 3 Input: 5 4 4 4 4 4 Output: 4 4 4 4 4 Input: 8 5 3 1 2 5 2 1 3 Output: 1 1 2 2 3 3 5 5 Note: In the first example, desires `1 1` are grouped together, `2 2` are grouped together, and `3 3` are grouped together, leading to the output `1 1 2 2 3 3`. In the second example, since all citizens have the same type of desire, the output remains unchanged. In the third example, grouping the desires leads to `1 1 2 2 3 3 5 5`.","solution":"def rearrange_desires(n, d): Rearrange the desires such that all citizens with the same type are grouped together. Parameters: n (int): The number of citizens. d (list): List of integers representing the desires of citizens. Returns: list: Rearranged desires with groupings. # Count the occurrences of each type of desire count = {} for desire in d: if desire in count: count[desire] += 1 else: count[desire] = 1 # Generate the rearranged list using the counts result = [] for key in sorted(count.keys()): result.extend([key] * count[key]) return result"},{"question":"In a land of mystical dragons, a group of n adventurers has decided to challenge a series of dungeons to obtain legendary treasures. Each dungeon has a specific difficulty level, and each adventurer has a certain skill level which dictates the most challenging dungeon they can overcome. An adventurer can only attempt a dungeon if their skill level is at least equal to the difficulty level of the dungeon. Each dungeon also grants a set amount of gold coins as a reward for completion. The adventurers will take turns entering the dungeons, starting from adventurer 1. In a single turn, an adventurer will choose the dungeon that provides the highest reward they can complete given their skill level. Once a dungeon is completed by any adventurer, it cannot be attempted again by anyone else. The purpose of your program is to determine the maximum total gold coins the adventurers can collect by strategically choosing the dungeons they attempt. Input The first line of input contains two space-separated integers n and d (1 ≤ n ≤ 105, 1 ≤ d ≤ 105), denoting the number of adventurers and the number of dungeons, respectively. The second line contains n space-separated integers, where the i-th integer si (1 ≤ si ≤ 109) represents the skill level of the i-th adventurer. The third line contains d space-separated integers, where the j-th integer dj (1 ≤ dj ≤ 109) represents the difficulty level of the j-th dungeon. The fourth line contains d space-separated integers, where the k-th integer gk (1 ≤ gk ≤ 109) denotes the number of gold coins the k-th dungeon grants upon completion. Output Print a single integer denoting the maximum total gold coins the adventurers can collect. Examples Input 3 5 5 8 6 7 2 4 3 5 10 15 20 25 30 Output 75 Input 2 3 3 4 2 5 3 5 10 15 Output 20 Note In the first example, one of the scenarios that will result in 75 gold coins is as follows. * Turn 1. Adventurer 1 completes dungeon with difficulty 3 (reward: 25 coins). * Turn 2. Adventurer 2 completes dungeon with difficulty 4 (reward: 20 coins). * Turn 3. Adventurer 3 completes dungeon with difficulty 5 (reward: 30 coins). In the second example, one of the scenarios that will result in 20 gold coins is as follows. * Turn 1. Adventurer 1 completes dungeon with difficulty 2 (reward: 5 coins). * Turn 2. Adventurer 2 completes dungeon with difficulty 3 (reward: 15 coins).","solution":"def max_gold(n, d, skills, difficulties, rewards): # Pairing difficulties and gold rewards, then sorting by difficulties, and by rewards in descending order in case of tie dungeons = sorted(zip(difficulties, rewards), key=lambda x: (x[0], -x[1])) # Sorting skills skills.sort() # Initializing total gold collected total_gold = 0 import heapq max_heap = [] j = 0 # To track the current dungeon for skill in skills: # Add all possible dungeons to the heap which current adventurer can attempt while j < d and dungeons[j][0] <= skill: heapq.heappush(max_heap, -dungeons[j][1]) j += 1 # If there are any valid dungeons for this adventurer, take the one with the maximum reward if max_heap: total_gold += -heapq.heappop(max_heap) return total_gold"},{"question":"A palindrome is a string that reads the same forward and backward. For example, \\"level\\", \\"radar\\" are palindromes, but \\"hello\\" is not. A palindrome can be formed from another string by removing any characters and arranging the remaining ones in the correct order. Given a string, you need to determine the minimum number of characters that need to be removed to make it a palindrome. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. - The second line contains a string s of length n consisting only of lowercase Latin letters. Output Output the minimum number of characters that need to be removed from the string to make it a palindrome. Examples Input 5 abcba Output 0 Input 7 abbacde Output 3","solution":"def min_removals_to_palindrome(n, s): Determine the minimum number of characters that need to be removed to make the string a palindrome. Parameters: n (int): Length of the string. s (str): The input string. Returns: int: Minimum number of characters to be removed. # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for __ in range(n)] # Fill the table for gap in range(1, n): for left in range(n - gap): right = left + gap if s[left] == s[right]: dp[left][right] = dp[left + 1][right - 1] else: dp[left][right] = 1 + min(dp[left][right - 1], dp[left + 1][right]) return dp[0][n - 1]"},{"question":"You are given a list of `n` integers and an integer `d`. Your task is to check if there are any two distinct integers in the list whose difference is exactly `d`. Input: The first line of the input contains one integer `n` (1 ≤ n ≤ 10^5)— the number of integers in the list. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. The third line of the input contains one integer `d` (0 ≤ d ≤ 10^9) — the required difference between the two integers. Output: If there are two distinct integers in the list whose difference is exactly `d`, print \\"YES\\". Otherwise, print \\"NO\\". Examples: Input 5 1 5 3 4 2 3 Output YES Input 4 8 12 16 20 5 Output NO Input 3 1 3 5 2 Output YES","solution":"def has_pair_with_difference(arr, d): Checks if there are two distinct integers in the list whose difference is exactly d. Parameters: arr (list of int): List of integers. d (int): The required difference. Returns: str: \\"YES\\" if there are two distinct integers with difference d, \\"NO\\" otherwise. s = set() for num in arr: if (num + d) in s or (num - d) in s: return \\"YES\\" s.add(num) return \\"NO\\""},{"question":"Given a string s consisting of only lowercase English letters, you need to find out the length of the longest substring that contains at most two distinct characters. If the string length is 0, the result should be 0. Write a function `longestSubstringWithTwoDistinct` that accepts a string `s` and returns the length of the longest substring containing at most two distinct characters. # Input The input consists of a single string `s` where the length of `s` (|s|) is at most 10^5. # Output Return a single integer representing the length of the longest substring that contains at most two distinct characters. # Example Example 1 Input: ``` eceba ``` Output: ``` 3 ``` Explanation: The longest substring with at most 2 distinct characters is \\"ece\\". Example 2 Input: ``` ccaabbb ``` Output: ``` 5 ``` Explanation: The longest substring with at most 2 distinct characters is \\"aabbb\\". Example 3 Input: ``` abcabcabc ``` Output: ``` 2 ``` Explanation: Every substring of length 2 from the input has exactly 2 distinct characters, so the longest one with at most 2 distinct characters is of length 2.","solution":"def longestSubstringWithTwoDistinct(s): Returns the length of the longest substring containing at most two distinct characters. if len(s) == 0: return 0 # Use a sliding window approach with two pointers # Dictionary to store the frequency of characters in the current window char_frequency = {} left = 0 max_length = 0 for right in range(len(s)): # Add the current character to the dictionary if s[right] in char_frequency: char_frequency[s[right]] += 1 else: char_frequency[s[right]] = 1 # Shrink the window from the left if more than 2 distinct characters are in the window while len(char_frequency) > 2: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 # Update the maximum length found max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a sequence of integers representing the stock prices of a company over \'n\' consecutive days. Your task is to identify the maximum profit you can achieve by making exactly one transaction (i.e., you must buy and then later sell one share of the stock). You cannot sell a stock before you buy one. The objective is to find the pair of days `(buy_day, sell_day)` such that you buy the stock on `buy_day` and sell it on `sell_day`, and the profit `sell_day_price - buy_day_price` is maximized. If no profit is possible, return zero as the maximum profit. Input Format: - The first line contains an integer `n` denoting the number of consecutive days (1 ≤ n ≤ 10^5). - The second line contains `n` space-separated integers representing the stock prices for each day. Each integer is in the range [0, 10^4]. Output Format: - Output a single integer which is the maximum profit that can be achieved by buying and selling a single share of stock. If no profit is possible, return 0. SAMPLE INPUT 6 7 1 5 3 6 4 SAMPLE OUTPUT 5 Explanation: You can obtain the maximum profit by buying the stock on the second day when the price is 1, and selling it on the fifth day when the price is 6, resulting in a profit of 6 - 1 = 5. SAMPLE INPUT 4 7 6 4 3 SAMPLE OUTPUT 0 Explanation: In this case, no transaction can yield a profit, so the maximum profit is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from exactly one buy-sell transaction. If no profit is possible, returns 0. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price seen so far if price < min_price: min_price = price # Calculate the profit if we sold at the current price and update the maximum profit elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Problem A company that specializes in data mining has developed a system to store and efficiently query large datasets. As part of this system, they need a dictionary-like data structure which supports insertion, retrieval, and dynamic prefix search efficiently. Here is the problem statement: Implement a `PrefixDictionary` class that supports the following operations: 1. `insert(word: str) -> None`: Inserts a word into the dictionary. 2. `search(word: str) -> bool`: Returns `True` if the word is in the dictionary, otherwise returns `False`. 3. `startsWith(prefix: str) -> bool`: Returns `True` if there is any word in the dictionary that starts with the given prefix, otherwise returns `False`. Implement the `PrefixDictionary` class with the following methods: # Constraints * All inputs are lowercase letters, and length of all words and prefixes provided will be at most 100. * Total number of words inserted and number of queries (for `search` and `startsWith`) will be at most 10^4. # Input Description The input consists of a series of commands to the `PrefixDictionary`. Each command has a different format: - `insert <word>`: Inserts `<word>` into the dictionary. - `search <word>`: Checks if `<word>` is in the dictionary, returns \'True\' or \'False\'. - `startsWith <prefix>`: Checks if there is any word in the dictionary that starts with `<prefix>`, returns \'True\' or \'False\'. # Output Description For each `search` and `startsWith` command, output the result on a new line. # Example Input ``` insert apple insert app search apple search app search appl startsWith app startsWith appl ``` # Example Output ``` True True False True True ``` # Explanation 1. The first command `insert apple` inserts the word \\"apple\\" into the dictionary. 2. The second command `insert app` inserts the word \\"app\\" into the dictionary. 3. The third command `search apple` checks if the word \\"apple\\" is in the dictionary, which it is, so it returns `True`. 4. The fourth command `search app` checks if the word \\"app\\" is in the dictionary, which it is, so it returns `True`. 5. The fifth command `search appl` checks if the word \\"appl\\" is in the dictionary, which it is not, so it returns `False`. 6. The sixth command `startsWith app` checks if there is any word in the dictionary that starts with \\"app\\", which there are (\\"apple\\" and \\"app\\"), so it returns `True`. 7. The seventh command `startsWith appl` checks if there is any word in the dictionary that starts with \\"appl\\", which there is (\\"apple\\"), so it returns `True`.","solution":"class PrefixDictionary: def __init__(self): self.words = set() self.prefixes = set() def insert(self, word: str) -> None: self.words.add(word) for i in range(1, len(word) + 1): self.prefixes.add(word[:i]) def search(self, word: str) -> bool: return word in self.words def startsWith(self, prefix: str) -> bool: return prefix in self.prefixes"},{"question":"Navi has a team of programmers working on multiple projects. Each day, his team can either start a new project or complete an ongoing project. Your task is to help Navi keep track of the number of ongoing projects at any time. You will be given the chronological order of actions (either \\"New Project\\" or \\"Complete Project\\") to perform, and you need to provide the number of ongoing projects after processing all actions. Input The first line of the input will contain an integer T (the number of test cases). For each test case, the first line will contain an integer N (the number of actions). Each of the next N lines will contain either a string \\"New Project\\" (indicating that a new project starts) or a string \\"Complete Project\\" (indicating that an existing project is completed). Output For every test case, print a single integer, representing the number of ongoing projects after all actions have been processed. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 SAMPLE INPUT 2 5 New Project New Project Complete Project New Project Complete Project 3 New Project Complete Project Complete Project SAMPLE OUTPUT 1 0 Explanation In the first test case, after the actions, there is 1 ongoing project remaining. By following the actions chronologically: - Start 2 new projects - Complete 1 project (leaving 1 ongoing) - Start 1 new project (2 ongoing now) - Complete 1 project (1 remaining). In the second test case, all projects are completed before the end, leaving 0 ongoing projects.","solution":"def number_of_ongoing_projects(test_cases): Returns the number of ongoing projects after processing all actions for each test case. Parameters: test_cases (list of list of str): Each test case is represented as a list of actions. Returns: list of int: The number of ongoing projects after processing each test case. results = [] for case in test_cases: ongoing_projects = 0 for action in case: if action == \\"New Project\\": ongoing_projects += 1 elif action == \\"Complete Project\\": if ongoing_projects > 0: ongoing_projects -= 1 results.append(ongoing_projects) return results"},{"question":"You are given a list of integers where each number represents the number of books in a row on a shelf. You have to select a subarray (i.e., a contiguous segment of the list) such that the sum of the books in this subarray is as large as possible. Your task is to find the sum of the books in this maximum subarray. Input The first line of input contains a single integer T denoting the number of test cases. The description of the T test cases follows. Each test case consists of two lines: - The first line contains a single integer N, the number of elements in the array. - The second line contains N space-separated integers representing the number of books in each row. Output For each test case, output a single integer which is the maximum sum of the books in any subarray of the given array. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -10^6 ≤ Books in each row ≤ 10^6 Example Input: 2 4 1 -2 3 4 3 -1 -2 -3 Output: 7 -1","solution":"def max_subarray_sum(arr): Function to find the maximum sum of any subarray in the given list of integers. Args: arr (list of int): The array of integers representing the number of books in each row. Returns: int: The maximum sum of any subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def solve(test_cases): Solves the problem for given test cases. Args: test_cases (list of tuples): List of test cases where each test case is a tuple consisting of two elements - the number of elements in the array and the array itself. Returns: list of int: List of results for each test case, where each result is the maximum sum of any subarray. results = [] for _, arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a string consisting of lowercase English letters with a maximum length of 5000 characters. Your task is to find the longest palindrome that can be constructed by rearranging the characters in the string. A palindrome is a word that reads the same backward as forwards, for example, \\"madam\\" or \\"racecar\\". Output the length of the longest possible palindrome that can be made with the given characters. If no rearrangement can form a palindrome, output `0`. # Input A single line contains the string of lowercase English letters. # Output Output the length of the longest palindrome that can be made with the given characters. # Examples **Example 1:** **Input:** ``` abccccdd ``` **Output:** ``` 7 ``` **Explanation:** One possible longest palindrome is \\"dccaccd\\", whose length is 7. **Example 2:** **Input:** ``` a ``` **Output:** ``` 1 ``` **Explanation:** The only possible palindrome is \\"a\\", whose length is 1. **Example 3:** **Input:** ``` abc ``` **Output:** ``` 1 ``` **Explanation:** Only individual characters can be considered palindromes of length 1 when no other combinations form a palindrome.","solution":"def longest_palindrome_length(s): from collections import Counter count = Counter(s) length = 0 odd_found = False for char_count in count.values(): if char_count % 2 == 0: length += char_count else: length += char_count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Given a positive integer `n`, determine whether it is a super prime. A super prime is a prime number that occupies the prime position in the list of prime numbers. For example, 5 is the third prime number and 3 is also a prime, so 5 is a super prime. Input The single line of input contains an integer n (1 ≤ n ≤ 105). Output Print \\"YES\\" if the number is a super prime, otherwise, print \\"NO\\". Examples Input 5 Output YES Input 12 Output NO Note In the first example, 5 is a super prime because it is the 3rd prime number in the sequence of prime numbers [2, 3, 5, 7, 11, ...] and 3 is also a prime number. In the second example, 12 is not a prime number and hence not a super prime.","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def generate_primes_up_to(n): primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes def is_super_prime(n): if not is_prime(n): return \\"NO\\" primes = generate_primes_up_to(10000) # generate a big list of primes to cover the range if n in primes: position = primes.index(n) + 1 if is_prime(position): return \\"YES\\" return \\"NO\\""},{"question":"An e-commerce platform has a collection of items, each identified by an item ID and assigned a price. There are several discount coupons available, each applicable to a specific set of items and offering a fixed discount. Your task is to help users maximize their savings by applying the available coupons in the optimal manner. Each user can use one coupon only once, and each coupon applies to all applicable items in the user\'s purchase list. Given a list of items the user wants to purchase and the available coupons, determine the maximum savings the user can achieve. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of items the user wants to purchase and the number of available discount coupons, respectively. The next n lines each contain two integers item_i and price_i (0 ≤ item_i ≤ 2^31 - 1, 1 ≤ price_i ≤ 10000) — the ID and the price of each item on the user\'s purchase list. The following m lines each contain an integer d_i (0 ≤ d_i ≤ 10000) followed by an integer k_i (1 ≤ k_i ≤ n), and then k_i integers item_ij (0 ≤ item_ij ≤ 2^31 - 1) — the discount value of the coupon and the ID of each item that the coupon applies to. The items listed for each coupon can have repetitions corresponding to how many times that coupon is applicable to the items. Output A single integer — the maximum savings the user can achieve by applying one of the available coupons. Examples Input 4 2 100 1200 101 1000 102 2000 103 1500 150 2 100 101 300 3 100 102 103 Output 600 Input 3 3 200 1500 201 800 202 1200 200 2 200 201 400 1 202 100 3 200 201 202 Output 400 Note In the first example, applying the first coupon will give a discount of 150 on items 100 and 101, resulting in 2 * 150 = 300 savings. Applying the second coupon will give a discount of 300 on items 100, 102, and 103, resulting in 3 * 300 = 900 savings. The optimal coupon to choose provides the maximum discount of 900.","solution":"def max_savings(items, coupons): Function to calculate the maximum savings by applying one of the available coupons. Args: items (list of tuples): List of tuples where each tuple contains item ID and price. coupons (list of tuples): List of tuples where each tuple contains discount value, number of applicable items, and applicable item IDs. Returns: int: Maximum savings achievable by using one of the coupons. max_savings = 0 # Iterate through each coupon for coupon in coupons: d_i, k_i, *applicable_items = coupon savings = 0 # Count occurrences of each applicable item item_count = {item[0]: 0 for item in items} for item_id in applicable_items: if item_id in item_count: item_count[item_id] += 1 # Calculate total savings for this coupon for item in items: if item[0] in item_count: savings += d_i * item_count[item[0]] # Update max savings if this coupon provides more savings if savings > max_savings: max_savings = savings return max_savings def parse_input(input_string): Function to parse the input string into the required data structures for items and coupons. Args: input_string (str): Input string containing raw input data. Returns: tuple: Tuple containing list of items and list of coupons. lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) items = [] for i in range(1, n + 1): item_id, price = map(int, lines[i].split()) items.append((item_id, price)) coupons = [] for i in range(n + 1, n + m + 1): coupon_data = list(map(int, lines[i].split())) coupons.append(coupon_data) return items, coupons"},{"question":"# Race Track Timing **story** Emma is a race car driver preparing for an upcoming race event. She has a practice track where she can drive multiple laps to prepare for the race. Each lap has a start time and an end time, and there might be some gaps between laps where she takes a break. Emma wants to optimize her practice and minimize the total idle time between her laps, excluding the time needed for breaks. Emma can move immediately from the end of one lap to the start of the next lap. Given the schedule of her laps, help Emma calculate the total idle time during her practice session. **problem** Given the schedule of Emma\'s laps, calculate the total idle time between the laps. Idle time is the time she spends not driving between the end of one lap and the start of the next one. **Input format** The input can be given in the following format: ``` N s_1 t_1 s_2 t_2 ... s_N t_N ``` - The first line contains an integer N, the number of laps. - Each of the next N lines contains two integers s_i and t_i (0 ≤ s_i < t_i), representing the start and end time of the i-th lap. **Constraint** * 1 ≤ N ≤ 10^5 * 0 ≤ s_i < t_i ≤ 10^15 (1 ≤ i ≤ N) * The start time of the (i + 1)-th lap is later than the end time of the i-th lap. That is, t_i ≤ s_{i+1} (1 ≤ i < N) **output** Print one line indicating the total idle time between the laps. **Input example 1** ``` 4 0 3 5 8 10 13 15 18 ``` **Output example 1** ``` 6 ``` **Explanation 1** The idle time between the laps can be calculated as follows: - Idle time between lap 1 and lap 2: 5 - 3 = 2 - Idle time between lap 2 and lap 3: 10 - 8 = 2 - Idle time between lap 3 and lap 4: 15 - 13 = 2 - Total idle time = 2 + 2 + 2 = 6 **Input example 2** ``` 3 0 5 6 10 11 20 ``` **Output example 2** ``` 2 ``` **Explanation 2** The idle time between the laps can be calculated as follows: - Idle time between lap 1 and lap 2: 6 - 5 = 1 - Idle time between lap 2 and lap 3: 11 - 10 = 1 - Total idle time = 1 + 1 = 2","solution":"def calculate_idle_time(lap_schedule): Calculate the total idle time between laps from the schedule. lap_schedule: List of tuples containing start and end times of laps Returns the total idle time idle_time = 0 for i in range(1, len(lap_schedule)): # Idle time is the difference between the start of the current lap and the end of the previous lap idle_time += lap_schedule[i][0] - lap_schedule[i-1][1] return idle_time def parse_schedule(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) schedule = [] for line in lines[1:n+1]: s, t = map(int, line.split()) schedule.append((s, t)) return schedule"},{"question":"John loves creating unique necklaces. He has two identical sets of n beads, and each bead is labeled with an integer between 1 and m, inclusive. John wants to design a pair of necklaces such that: 1. Each bead on the same position in both necklaces has a different label. 2. The number of different labels between the two necklaces, across all positions, is maximized. Given the total number of beads (n) and the range of possible bead labels (m), calculate the minimum number of unique bead labels required for John to achieve his goal, or determine that it\'s impossible. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^9) — the number of beads in each necklace and the range of possible bead labels, respectively. Output In a single line print the minimum number of unique labels needed to ensure each bead on the same position in both necklaces has a different label while maximizing the different labels across all positions. If it\'s impossible, print \\"-1\\". Examples Input 3 5 Output 2 Input 4 1 Output -1 Input 6 7 Output 2 Note In the first example, two unique labels are sufficient because with these labels, John can ensure that he has different labels on each corresponding position. In the second example, it\'s impossible as there is only one label available, thus no way to ensure different labels on each corresponding position. In the third example, similarly to the first example, only two unique labels are necessary.","solution":"def minimum_unique_labels(n, m): Determine the minimum number of unique labels required to ensure each bead on the same position in both necklaces has a different label, or determine if it\'s impossible. if m == 1: return -1 return 2 # Examples for explanation: print(minimum_unique_labels(3, 5)) # Output: 2 print(minimum_unique_labels(4, 1)) # Output: -1 print(minimum_unique_labels(6, 7)) # Output: 2"},{"question":"Twilight Sparkle is now curious about a new game she encountered that involves string operations. The game is called \\"Wildcard String Matching\\". The rules of the game are as follows: Given a string `s` and a pattern `p`, where `p` contains any number of wildcard characters `?` and `*`, your task is to determine if the pattern `p` matches the string `s`. A wildcard character `?` can match any single character, while a wildcard character `*` can match any sequence of characters (including the empty sequence). For example, the pattern `a?c` would match the strings `abc` and `axc`, but not `abcc`. The pattern `a*` would match any string that starts with `a`. Input The input contains two lines: - The first line is a string `s` (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. - The second line is a pattern `p` (1 ≤ |p| ≤ 1000), consisting of lowercase English letters, `?`, and `*`. Output Output `\\"YES\\"` if the pattern `p` matches the string `s`, and `\\"NO\\"` otherwise. Examples Input: ``` abcde a*e ``` Output: ``` YES ``` Input: ``` abcd a?d ``` Output: ``` NO ``` Input: ``` abcdef a*d*f ``` Output: ``` YES ``` Note In the first example, the pattern `a*e` matches the string `abcde` because the `*` can match the substring `bcd`. In the second example, the pattern `a?d` cannot match the string `abcd` because `?` can only match a single character and no single character substitution for `?` will make the pattern match `abcd`. In the third example, the pattern `a*d*f` matches the string `abcdef` as the `*` can match the substring `bc`.","solution":"def is_match(s, p): Returns \'YES\' if pattern p matches string s, otherwise returns \'NO\'. # dp table with +1 for handling the initial empty string cases dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # Empty pattern can only match empty string dp[0][0] = True # Fill table for patterns starting with * for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Fill the dp table for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == \'*\': # * Matches 0 characters in s or * matches at least one character in s dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] return \\"YES\\" if dp[len(s)][len(p)] else \\"NO\\""},{"question":"The famous sparrow scientist, Dr. Sparry, has developed a new communication protocol for sparrows. Each sparrow uses a unique sequence of chirps to communicate. To exchange a message, sparrows make a sequence of chirps where successive chirps in the sequence follow a particular pattern. There are n sparrows, each associated with a unique chirp sequence. The chirp sequences are represented as strings of lowercase alphabets. Dr. Sparry has established that a message can be efficiently exchanged between two sparrows if they have a common chirp subsequence of a given length k. You need to answer two types of queries: - Check if two sparrows have a common chirp subsequence of length k. - Update the chirp sequence of a specific sparrow. Input The first line contains an integer n — the total number of sparrows, 1 ≤ n ≤ 1000. The next n lines each contain a string representing the chirp sequence for each sparrow. Each chirp sequence consists of lowercase alphabets and has a length between 1 and 1000. The following line contains an integer q — the number of queries, 1 ≤ q ≤ 10000. The next q lines contain queries in the format: - 1 x y k: Check if sparrow x and sparrow y have a common chirp subsequence of length k, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ k ≤ min(length of chirp sequence of sparrow x, length of chirp sequence of sparrow y). - 2 x s: Update the chirp sequence of sparrow x to s, 1 ≤ x ≤ n, and s is a string of lowercase alphabets with length between 1 and 1000. Output For each query of type 1, print \\"YES\\" if the two sparrows have a common chirp subsequence of length k, otherwise print \\"NO\\". Example Input 3 abcde bcdef acdfg 4 1 1 2 2 1 1 3 1 2 1 zxy 1 1 3 1 Output YES YES NO Explanation 1. The common subsequence of length 2 between chirp sequences of Sparrow 1 (\\"abcde\\") and Sparrow 2 (\\"bcdef\\") is \\"bc\\". 2. The common subsequence of length 1 between chirp sequences of Sparrow 1 (\\"abcde\\") and Sparrow 3 (\\"acdfg\\") is \\"a\\". 3. After updating Sparrow 1\'s chirp sequence to \\"zxy\\", it no longer shares a common subsequence of length 1 with Sparrow 3 (\\"acdfg\\").","solution":"def have_common_subsequence(seq1, seq2, k): Checks if two sequences have a common subsequence of length k. def subsequences_of_length_k(seq, k): return {seq[i:i+k] for i in range(len(seq) - k + 1)} subsequences_seq1 = subsequences_of_length_k(seq1, k) subsequences_seq2 = subsequences_of_length_k(seq2, k) return not subsequences_seq1.isdisjoint(subsequences_seq2) def process_queries(n, chirp_sequences, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': x, y, k = int(parts[1]), int(parts[2]), int(parts[3]) if have_common_subsequence(chirp_sequences[x-1], chirp_sequences[y-1], k): results.append(\\"YES\\") else: results.append(\\"NO\\") elif parts[0] == \'2\': x = int(parts[1]) s = parts[2] chirp_sequences[x-1] = s return results"},{"question":"You are given a matrix of characters and a word. Determine if the word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 6) — the number of rows and columns in the matrix. The next n lines contain the matrix of characters which is composed of lowercase English letters. The last line for each test case contains the word (1 ≤ length of word ≤ 10) made up of lowercase English letters. Output For each test case, print \\"Yes\\" if the word can be constructed from the matrix as per the given conditions, and \\"No\\" otherwise. You can print each letter in any case. Example Input 3 3 4 a b c e s f c s a d e e abcced 3 4 a b c e s f c s a d e e see 3 4 a b c e s f c s a d e e abcb Output Yes Yes No Note In the first test case, a possible way to form \\"abcced\\" is a->b->c->c->e->d. In the second test case, a possible way to form \\"see\\" is s->e->e. In the third test case, there is no possible way to form \\"abcb\\" without revisiting a cell.","solution":"def exist(board, word): rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]: return False temp, board[r][c] = board[r][c], \' \' # mark as visited found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) board[r][c] = temp # restore the original value return found for i in range(rows): for j in range(cols): if board[i][j] == word[0] and dfs(i, j, 0): return \\"Yes\\" return \\"No\\" def can_construct_word_from_matrix(test_cases): results = [] for matrix, word in test_cases: results.append(exist(matrix, word)) return results"},{"question":"There is a mysterious vending machine at your school that only accepts coins of values 1, 3, and 4. You want to buy an item from this vending machine which costs exactly `n` dollars. You have an unlimited supply of each type of coin. What is the minimum number of coins you need to use to get exactly `n` dollars? Write a function `min_coins(n)` that takes a single integer `n` and returns the minimum number of coins needed to make the amount `n`. Input The single input line contains an integer `n` (1 ≤ n ≤ 10^6), which represents the cost of the item in dollars. Output Output a single integer which represents the minimum number of coins needed to make the amount `n`. Example Input 6 Output 2 Input 10 Output 3 Input 8 Output 2","solution":"def min_coins(n): Given an integer n, returns the minimum number of coins of values 1, 3, and 4 needed to make exactly n dollars. if n == 1: return 1 if n == 2: return 2 if n == 3: return 1 if n == 4: return 1 # Array to store the minimum coins needed for all amounts up to n dp = [float(\'inf\')] * (n + 1) # Base cases if n > 0: dp[0] = 0 # 0 coins to make 0 dollars dp[1] = 1 # 1 coin of 1 to make 1 dollar if n > 2: dp[2] = 2 # 2 coins of 1 to make 2 dollars dp[3] = 1 # 1 coin of 3 to make 3 dollars if n > 3: dp[4] = 1 # 1 coin of 4 to make 4 dollars # Fill dp array for all amounts from 5 to n for i in range(5, n+1): dp[i] = min(dp[i-1], dp[i-3], dp[i-4]) + 1 return dp[n]"},{"question":"Problem Statement You have been assigned the task of creating an optimal delivery route system for a delivery company. The goal is to minimize the total delivery time for a given set of orders, where each order must be delivered exactly once. The delivery starts from a central warehouse located at the origin (0,0) and returns to the warehouse after completing the delivery of all orders. Rules: - The delivery route starts at (0,0) and must return to (0,0) after delivering all orders. - Each order has a delivery location represented by coordinates (x, y). - You are allowed to revisit the same location multiple times if it minimizes the total travel distance. - The delivery time is the total distance traveled, calculated using the Manhattan Distance metric. The Manhattan Distance between two points (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. Your task is to find the optimal route that minimizes the total delivery time, and calculate this minimum time. Input: The input consists of a single test case in the format: n x_1 y_1 x_2 y_2 ... x_n y_n - The first line contains a positive integer n (1 le n le 50) representing the number of delivery locations. - The next n lines each contain two integers x_i and y_i (-1000 le x_i, y_i le 1000) representing the coordinates of the i-th delivery location. Output: Output a single integer representing the minimum total delivery time required to deliver all orders and return to the warehouse. Sample Input 1: ``` 3 1 2 3 4 -1 -2 ``` Output for the Sample Input 1: ``` 20 ``` Sample Input 2: ``` 2 5 5 -5 -5 ``` Output for the Sample Input 2: ``` 40 ``` Sample Input 3: ``` 1 10 -20 ``` Output for the Sample Input 3: ``` 60 ``` Explanation: Sample Input 1: ``` 3 1 2 3 4 -1 -2 ``` The optimal path could be: - Start at (0,0) -> (1,2) -> (3,4) -> (-1,-2) -> (0,0) - Total distance = |1-0| + |2-0| + |3-1| + |4-2| + |-1-3| + |-2-4| + |0-(-1)| + |0-(-2)| = 20 Sample Input 2: ``` 2 5 5 -5 -5 ``` The optimal path could be: - Start at (0,0) -> (5,5) -> (-5,-5) -> (0,0) - Total distance = |5-0| + |5-0| + |-5-5| + |-5-5| + |0-(-5)| + |0-(-5)| = 40 Sample Input 3: ``` 1 10 -20 ``` The optimal path could be: - Start at (0,0) -> (10,-20) -> (0,0) - Total distance = |10-0| + |-20-0| + |0-10| + |0-(-20)| = 60","solution":"import itertools def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) def optimal_delivery_route(n, locations): min_distance = float(\'inf\') # Generate all permutations of the delivery locations for perm in itertools.permutations(locations): current_distance = 0 current_x, current_y = 0, 0 # Calculate the total distance for the current permutation for (x, y) in perm: current_distance += manhattan_distance(current_x, current_y, x, y) current_x, current_y = x, y # Add the distance to return to the warehouse current_distance += manhattan_distance(current_x, current_y, 0, 0) # Update the minimum distance min_distance = min(min_distance, current_distance) return min_distance def parse_input(data): lines = data.strip().split(\'n\') n = int(lines[0]) locations = [] for i in range(1, n + 1): x, y = map(int, lines[i].split()) locations.append((x, y)) return n, locations n, locations = parse_input(3 1 2 3 4 -1 -2) print(optimal_delivery_route(n, locations)) # Example test"},{"question":"You are organizing a conference with multiple sessions and attendees. You have multiple conference rooms available, each with a certain capacity. Each attendee has specified the sessions they are interested in attending, and each session can be accommodated in any room that has enough capacity to hold the number of attendees who wish to attend that session. Your task is to allocate sessions to rooms in such a way that maximizes the total number of attendees who can attend their desired sessions. Note that an attendee cannot attend more than one session at the same time. Input format: The format of the input data is given as follows. Information on the number of rooms and their capacities Information on the number of sessions and their respective time slots Information on the number of attendees and their session preferences The first line gives the number of rooms n (1 ≤ n ≤ 100). The second line provides the capacities of these n rooms separated by spaces. The third line gives the number of sessions k (1 ≤ k ≤ 100). The next k lines provide information on each session in the format start_time end_time, where start_time and end_time are given in the format HH:MM. The next line gives the number of attendees m (1 ≤ m ≤ 100). The following m lines provide information on each attendee\'s preferred sessions. Each line starts with the number of preferred sessions p, followed by the indices of these sessions (1-based index). All times are given in 24-hour format. Multiple sessions may have overlapping time slots. Output format: Output the maximum number of attendees that can be accommodated in their preferred sessions. Input example 1: 2 50 30 3 09:00 10:00 10:00 11:00 09:30 10:30 4 2 1 2 2 1 3 1 1 3 2 3 1 Output example 1: 4 Input example 2: 3 40 20 30 4 08:00 09:00 09:00 10:00 10:00 11:00 08:30 09:30 5 2 1 2 1 1 1 4 2 3 4 3 1 2 3 Output example 2: 5 Example: Input: 3 40 20 30 4 08:00 09:00 09:00 10:00 10:00 11:00 08:30 09:30 5 2 1 2 1 1 1 4 2 3 4 3 1 2 3 Output: 5","solution":"from collections import defaultdict def allocate_sessions(num_rooms, room_capacities, num_sessions, session_timings, num_attendees, attendee_preferences): # Convert session timings to tuple of minutes from start of the day def time_to_minutes(t): h, m = map(int, t.split(\':\')) return h * 60 + m sessions = [(time_to_minutes(start), time_to_minutes(end)) for start, end in session_timings] # Create a list of attendees and their preferences attendees = [prefs[1:] for prefs in attendee_preferences] # Create a dictionary to store session overlap information session_overlap = defaultdict(set) # Check session overlaps for i in range(num_sessions): for j in range(i + 1, num_sessions): if not(sessions[i][1] <= sessions[j][0] or sessions[j][1] <= sessions[i][0]): session_overlap[i].add(j) session_overlap[j].add(i) # Using a basic greedy algorithm to allocate sessions to rooms session_attendance = [0] * num_sessions for attendee in attendees: attendee = [s-1 for s in attendee] # convert to 0-based index best_session = None max_capacity = 0 for session in attendee: attendance = session_attendance[session] available_capacity = max([cap - attendance for cap in room_capacities]) if available_capacity > max_capacity: max_capacity = available_capacity best_session = session if best_session is not None and max_capacity > 0: session_attendance[best_session] += 1 return sum(session_attendance) # Test the function with the example input print(allocate_sessions(2, [50, 30], 3, [(\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"09:30\\", \\"10:30\\")], 4, [(2, 1, 2), (2, 1, 3), (1, 1), (3, 2, 3, 1)])) # Output should be 4 print(allocate_sessions(3, [40, 20, 30], 4, [(\\"08:00\\", \\"09:00\\"), (\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"08:30\\", \\"09:30\\")], 5, [(2, 1, 2), (1, 1), (1, 4), (2, 3, 4), (3, 1, 2, 3)])) # Output should be 5"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you need to determine the length of the longest path in the graph. A path is defined as a sequence of vertices where each adjacent pair of vertices is connected by an edge, but the same vertex can’t appear more than once in the path. Input The first line of input contains two space-separated integers `n` and `m` (1 ≤ n ≤ 15, 0 ≤ m ≤ n(n-1)/2) — the number of nodes and edges in the graph, respectively. Each of the next `m` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — meaning there is an edge between node `u` and node `v`. There are no duplicate edges in the input. Output Print a single integer — the length of the longest path in the given graph. Examples Input 4 3 1 2 2 3 3 4 Output 3 Input 5 4 1 2 2 3 3 4 4 2 Output 3 Input 3 1 1 2 Output 1 Note In the first example, the graph looks as follows: 1 - 2 - 3 - 4 A longest path would be 1 → 2 → 3 → 4, which has a length of 3. In the second example, the graph looks like this: 1 - 2 3 / 4 A longest path such as 1 → 2 → 3 → 4 or 4 → 3 → 2 → 1 has a length of 3. In the third example, the graph consists of only one edge: 1 - 2 A longest path will have length 1.","solution":"from itertools import combinations def longest_path(n, edges): Determines the length of the longest path in an undirected graph. Parameters: n (int): Number of nodes in the graph. edges (list): A list of tuples representing the edges. Returns: int: The length of the longest path in the graph. # Create an adjacency list representation of the graph graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, visited): visited.add(node) max_length = 0 for neighbor in graph[node]: if neighbor not in visited: length = dfs(neighbor, visited) + 1 max_length = max(max_length, length) visited.remove(node) return max_length # Try to find the longest path starting from each node longest = 0 for node in range(1, n + 1): length = dfs(node, set()) longest = max(longest, length) return longest # Utility to convert input format to required parameters def convert_input_to_params(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return n, edges"},{"question":"You have been given an NxM matrix of integers. Your task is to determine whether it is possible to traverse from the top-left corner (1, 1) to the bottom-right corner (N, M) while meeting the following conditions: 1. Only horizontal and vertical moves are allowed (no diagonal moves). 2. You can move to an adjacent cell if and only if the value in the adjacent cell is greater than or equal to the value in the current cell. You need to output `YES` if it is possible to reach the bottom-right corner from the top-left corner, and `NO` otherwise. Input The first line contains two integers, N and M (1 ≤ N, M ≤ 1000) — the dimensions of the matrix. Each of the next N lines contains M integers (0 ≤ matrix[i][j] ≤ 1000) — the values in the matrix. Output Output `YES` if it is possible to reach the bottom-right corner from the top-left corner, otherwise output `NO`. Example Input 4 4 1 2 3 4 2 2 3 4 3 4 4 5 5 6 6 6 Output YES Input 3 3 5 4 3 4 3 2 3 2 1 Output NO Explanation In the first example, a possible path is: (1,1) → (1,2) → (2,2) → (2,3) → (3,3) → (3,4) → (4,4). In the second example, it is not possible to move as all adjacent cells to (1,1) have smaller values.","solution":"def is_path_possible(matrix): from collections import deque n = len(matrix) m = len(matrix[0]) directions = [(0, 1), (1, 0)] # Only right and down moves are allowed def bfs(): queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and matrix[nx][ny] >= matrix[x][y]: queue.append((nx, ny)) visited.add((nx, ny)) return False # Start BFS from the top-left corner (0, 0) return \\"YES\\" if bfs() else \\"NO\\""},{"question":"Problem description A magician has a collection of potions, each with a certain magical strength. The magician wants to test a few combinations of potions to see which combination yields the highest magical strength when their strengths are multiplied together. Given the number of test cases, for each test case, you have to find out the highest product of strengths that can be obtained by selecting any combination of potions, such that the number of potions in the combination is even. Input The first line contains the number of test cases. For each test case: - The first line contains the number of potions. - The second line contains the strengths of the potions, separated by spaces. Output For each test case, print the highest product of strengths that can be obtained by selecting any combination of potions with an even number of potions. If it\'s not possible to select an even number of potions, print 0. Constraints SubTask 1 - 70 Points 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Strength of Potion ≤ 10^5 SubTask 2 - 30 Points 1 ≤ T ≤ 2 1 ≤ N ≤ 10^3 1 ≤ Strength of Potion ≤ 100 Example Input: 2 3 5 6 1 4 1 2 3 4 Output: 30 24 Explanation **Test Case 1**: - Combinations with even number of potions: (5, 6), (5, 1), (6, 1), (5, 6, 1) - The maximum product is from the combination (5, 6) which is 30. **Test Case 2**: - Combinations with even number of potions: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 3, 4) - The maximum product is from the combination (2, 3, 4) which is 24.","solution":"def highest_product_of_evens(num_cases, cases): Returns the highest product of strengths that can be obtained by selecting any combination of potions such that the number of potions in the combination is even. from itertools import combinations import math results = [] for i in range(num_cases): num_potions = cases[i][0] potions = cases[i][1] max_product = 0 for r in range(2, num_potions + 1, 2): for combo in combinations(potions, r): product = math.prod(combo) if product > max_product: max_product = product results.append(max_product) return results"},{"question":"A magical forest is safeguarded by n mystical creatures called Guardians. Each Guardian has specific positions and energy levels, being represented on a 2D grid. The guardians create a protective field around themselves where their energy levels shield specific areas of the forest. A wicked sorcerer wants to cast a spell on the forest and neutralize the guardians\' protective field. The spell has a radius, weakening the energy of any guardian within that radius to zero. The sorcerer needs to strategically position himself on the grid to maximize the number of guardians he can neutralize with one cast. Given the positions and energy levels of the guardians, and the spell radius, determine the maximum number of guardians that can be neutralized in one cast. Input The input consists of multiple test cases. The first line of each test case contains the integers n (0 < n ≤ 50) and r (0 < r ≤ 1000). n is the number of guardians, and r is the radius of the spell. For the next n lines, each line contains three integers, gx, gy, and ge, representing the position (x, y), and energy level of each guardian. Input ends when n = r = 0, which is not included in the test case. All coordinates and energy values in the input are guaranteed to be integers with an absolute value of 10000 or less. Output For each test case, output a single integer representing the maximum number of guardians that can be neutralized in one spell cast. Example Input 3 5 1 1 10 2 2 15 7 7 20 4 3 0 0 10 1 1 15 3 3 20 4 4 25 0 0 Output 2 3","solution":"import math def max_neutralized_guardians(test_cases): results = [] for n, r, guardians in test_cases: max_neutralized = 0 for gx1, gy1, _ in guardians: count = 0 for gx2, gy2, _ in guardians: distance = math.sqrt((gx1 - gx2)**2 + (gy1 - gy2)**2) if distance <= r: count += 1 max_neutralized = max(max_neutralized, count) results.append(max_neutralized) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): n, r = map(int, lines[i].split()) if n == 0 and r == 0: break guardians = [] for j in range(n): gx, gy, ge = map(int, lines[i+j+1].split()) guardians.append((gx, gy, ge)) test_cases.append((n, r, guardians)) i += n + 1 return test_cases input_string = 3 5 1 1 10 2 2 15 7 7 20 4 3 0 0 10 1 1 15 3 3 20 4 4 25 0 0 test_cases = parse_input(input_string) print(max_neutralized_guardians(test_cases))"},{"question":"There is a kingdom with several cities, and each city is connected to other cities by bidirectional roads. Each road has a certain length. The King wants to find the shortest path from one specified city to another specified city. Given the number of cities, the number of roads, and the connectivity information of each road, determine the shortest path between two specified cities using Dijkstra\'s algorithm. Input The first line contains three integers n, m, and k where n (2 ≤ n ≤ 100) is the number of cities, m (1 ≤ m ≤ 5000) is the number of roads, and k (0 ≤ k ≤ 10^9) is the unique identifier of the destination city. The following m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a road between cities u and v with length w. The last line contains an integer s (1 ≤ s ≤ n), the starting city. Output Write a single integer denoting the shortest distance between city s and city k. If there is no path from s to k, print -1. Examples Input 4 4 3 1 2 4 2 3 1 1 3 7 3 4 3 1 Output 5 Input 4 2 4 1 2 4 2 3 1 1 Output -1","solution":"import heapq def dijkstra(n, edges, start, dest): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) distance = {i: float(\'inf\') for i in range(1, n+1)} distance[start] = 0 priority_queue = [(0, start)] while priority_queue: curr_distance, curr_node = heapq.heappop(priority_queue) if curr_distance > distance[curr_node]: continue for weight, neighbor in graph[curr_node]: distance_temp = curr_distance + weight if distance_temp < distance[neighbor]: distance[neighbor] = distance_temp heapq.heappush(priority_queue, (distance_temp, neighbor)) return distance[dest] if distance[dest] != float(\'inf\') else -1 def shortest_path(n, m, k, roads, s): return dijkstra(n, roads, s, k)"},{"question":"Problem Statement Dr. Greenwood, a renowned botanist, is researching a rare species of plant. She has documented the growth measurements of several specimens of this plant over a specific period. However, a bug in her data processing script caused it to lose some of the measurements. Your task is to help her recover the missing data points by interpolating the missing measurements using linear interpolation. The initial samples and their measurements will be provided. If a measurement for a particular day is missing, it needs to be interpolated using the measurements of the nearest days that have data. If the missing measurement is at the beginning or the end, use the nearest available measurement to fill in the missing values. Write a program that will fill in the missing values and output the interpolated sequence. # Input - The first line consists of two integers N and D, where N is the number of specimens and D is the number of days. - The next N lines each contain D space-separated integers representing the measurements of that specimen over D days. - A measurement of `-1` indicates a missing data point. # Output - Output the interpolated measurements for each specimen over D days, with each specimen\'s measurements on a new line. # Constraints - 1 <= N <= 100 - 1 <= D <= 100 - 1 <= measurement <= 10000 # Example Input ``` 2 5 -1 45 47 49 -1 100 -1 105 -1 110 ``` Output ``` 45 45 47 49 49 100 102 105 107 110 ``` # Explanation - For the first specimen: - The missing value on the first day is replaced by the next available value (45). - The missing value on the last day is replaced by the previous available value (49). - For the second specimen: - The missing value on the second day is interpolated: (100 + 105) / 2 = 102.5, rounded to 102. - The missing value on the fourth day is interpolated: (105 + 110) / 2 = 107.5, rounded to 107. Your task is to implement the logic for linear interpolation of missing values to help Dr. Greenwood complete her research.","solution":"def linear_interpolation(N, D, matrix): def interpolate_sequence(sequence): n = len(sequence) # Find the first valid value to handle leading -1s first_valid_index = 0 while first_valid_index < n and sequence[first_valid_index] == -1: first_valid_index += 1 if first_valid_index < n: # Fill leading -1s with the first valid value for i in range(first_valid_index): sequence[i] = sequence[first_valid_index] # Find the last valid value to handle trailing -1s last_valid_index = n - 1 while last_valid_index >= 0 and sequence[last_valid_index] == -1: last_valid_index -= 1 if last_valid_index >= 0: # Fill trailing -1s with the last valid value for i in range(last_valid_index + 1, n): sequence[i] = sequence[last_valid_index] # Interpolate the middle values i = first_valid_index while i < n: if sequence[i] == -1: # Find the range to interpolate j = i while j < n and sequence[j] == -1: j += 1 # Interpolate between sequence[i-1] and sequence[j] if j < n: left_value = sequence[i - 1] right_value = sequence[j] for k in range(i, j): sequence[k] = left_value + (right_value - left_value) * (k - i + 1) // (j - i + 1) i = j else: i += 1 return sequence interpolated_matrix = [] for row in matrix: interpolated_matrix.append(interpolate_sequence(row)) return interpolated_matrix # Example input N = 2 D = 5 matrix = [ [-1, 45, 47, 49, -1], [100, -1, 105, -1, 110] ] result = linear_interpolation(N, D, matrix) for row in result: print(\\" \\".join(map(str, row)))"},{"question":"You are given a list of integers. Your task is to find the length of the longest subsequence such that the difference between adjacent elements is either one or two. Input The first line contains an integer n (1 ≤ n ≤ 2000) — the length of the list. The second line contains n integers a_i (1 ≤ a_i ≤ 10000) — the elements of the list. Output Output the length of the longest subsequence such that the difference between adjacent elements is either one or two. Examples Input 5 1 3 2 5 4 Output 4 Input 6 10 12 11 10 9 8 Output 6 Input 3 1 5 2 Output 2 Input 7 5 6 7 8 6 5 4 Output 7","solution":"def longest_subsequence(n, a): Returns the length of the longest subsequence where the difference between adjacent elements is either one or two. if n == 0: return 0 # Initialize the dp array dp = [1] * n # Iterate through the list to fill the dp array for i in range(1, n): for j in range(i): if abs(a[i] - a[j]) <= 2: dp[i] = max(dp[i], dp[j] + 1) # The result is the maximum value in the dp array return max(dp) # Example usage n = 7 a = [5, 6, 7, 8, 6, 5, 4] print(longest_subsequence(n, a)) # Output: 7"},{"question":"You are given a list of integers representing the heights of students in a queue. The heights are arranged in the order they stand in the queue. You are required to re-arrange the students so that the heights are ordered in non-decreasing order. Additionally, you need to find the number of students who have at least one student of equal height standing immediately next to them after rearrangement. Constraints: - 1 leq N leq 2 times 10^5 - 1 leq heights[i] leq 10^9 Input: - Input is given from Standard Input in the following format: ``` N heights_1 heights_2 ... heights_N ``` Output: - First, print the rearranged list of student heights in non-decreasing order. - Second, print the number of students who have at least one student of equal height standing immediately next to them. Examples: Input: ``` 5 1 2 2 1 3 ``` Output: ``` 1 1 2 2 3 4 ``` Explanation: Rearranged list: 1 1 2 2 3 Students with at least one student of equal height next to them: 1, 1, 2, 2 Input: ``` 6 5 6 4 4 3 3 ``` Output: ``` 3 3 4 4 5 6 4 ``` Explanation: Rearranged list: 3 3 4 4 5 6 Students with at least one student of equal height next to them: 3, 3, 4, 4","solution":"def rearrange_and_count_equal_heights(heights): Rearranges the list of heights in non-decreasing order and counts the number of students who have at least one student of equal height standing immediately next to them. Args: heights: List[int] - A list of integers representing the heights of students in a queue. Returns: Tuple[List[int], int] - A tuple containing the rearranged list of heights and the count of students with at least one student of equal height standing immediately next to them. # Sort the list in non-decreasing order sorted_heights = sorted(heights) # Count the number of students who have at least one student of equal height standing next to them equal_height_count = 0 n = len(sorted_heights) for i in range(n): if (i > 0 and sorted_heights[i] == sorted_heights[i-1]) or (i < n-1 and sorted_heights[i] == sorted_heights[i+1]): equal_height_count += 1 return sorted_heights, equal_height_count # If run as script (for manual testing), get inputs from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) sorted_heights, equal_height_count = rearrange_and_count_equal_heights(heights) print(\\" \\".join(map(str, sorted_heights))) print(equal_height_count)"},{"question":"A group of friends decided to play a game that involves listing their favorite words and finding the longest common prefix among them. Given a list of strings, your task is to write a program that defines the longest common prefix among them. If there is no common prefix, the output should be an empty string. Input The input consists of several lines. The first line contains a single integer `N` (1 <= N <= 200), the number of strings. The following `N` lines each contain a single string composed of alphanumeric characters (\'a\'-\'z\', \'A\'-\'Z\', \'0\'-\'9\'). The length of each string does not exceed 1000 characters. Output Print the longest common prefix shared among all the given strings. If there is no common prefix, print an empty string. Example Input 5 flower flow flight fluffy flood Output fl Input 3 dog racecar car Output","solution":"def longest_common_prefix(lst): if not lst: return \\"\\" # Find the shortest string in the list shortest_str = min(lst, key=len) # Check each character of the shortest string with all other strings for i, ch in enumerate(shortest_str): for other_str in lst: if other_str[i] != ch: return shortest_str[:i] return shortest_str"},{"question":"You are given a list of integers representing heights of students standing in a line. The teacher wants to arrange the students in such a way that every student can see the board. To achieve this, each student must be either taller than or equal to the student immediately in front of them. Determine the minimum number of students that need to be removed from the line to satisfy this condition. Input The input will consist of a single line with space-separated integers representing the heights of the students. Output Output a single integer - the minimum number of students that need to be removed. Example Input: 10 50 20 40 50 30 70 Output: 2 Explanation: Removing the students with heights 20 and 30 will leave the sequence 10 50 40 50 70, which is non-decreasing.","solution":"def min_removals_for_non_decreasing(heights): This function returns the minimum number of students that need to be removed to make the sequence of heights non-decreasing. n = len(heights) if n == 0: return 0 # Initialize lengths array to keep track of the longest increasing subsequence lengths = [1] * n # Fill the lengths array using dynamic programming for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: lengths[i] = max(lengths[i], lengths[j] + 1) # The length of the longest non-decreasing subsequence longest_non_decreasing = max(lengths) # Minimum removals needed is the total students minus the longest non-decreasing subarray length return n - longest_non_decreasing"},{"question":"Consider a game with N blocks arranged in a horizontal line. Each block i (1 ≤ i ≤ N) has an initial height h_i. The game follows these rules: 1. In one move, you can select a block i and reduce its height by 1 (h_i = h_i - 1). 2. When the height of any block becomes zero, you cannot reduce its height further. 3. You can perform the above operation as many times as desired. The goal of the game is to reduce the height of all blocks to zero in a minimum number of moves. Write a function to determine the minimum number of moves required to reduce all blocks to zero height. # Input The input consists of two lines: 1. The first line contains a positive integer N (1 ≤ N ≤ 100), the number of blocks. 2. The second line contains N space-separated integers h_1, h_2, ..., h_N (1 ≤ h_i ≤ 100), the initial heights of the blocks. # Output Output a single integer, the minimum number of moves required to reduce all blocks to zero height. # Examples Example 1 Input: ``` 3 3 1 2 ``` Output: ``` 3 ``` Example 2 Input: ``` 4 4 4 4 4 ``` Output: ``` 4 ``` Example 3 Input: ``` 5 5 3 4 5 6 ``` Output: ``` 6 ```","solution":"def min_moves_to_zero_heights(N, heights): Returns the minimum number of moves required to reduce all blocks to zero height. # The minimum number of moves required is just the maximum height in the list, # since we can decrement each block simultaneously. return max(heights)"},{"question":"Anagram Grouping Given a list of strings, group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function that takes a list of strings and returns a list of lists, where each inner list contains strings that are anagrams of each other. Input A single integer n (1 ≤ n ≤ 10^4), the number of strings in the list. Followed by n strings consisting of only lowercase alphabets. Each string has a length between 1 and 100. Output Output a list of lists, where each list contains strings that are anagrams of each other. The groups should be in no particular order. Each inner list should contain strings in any order. Example Input 6 eat tea tan ate nat bat Output [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Note All strings in the same group are anagrams of each other. Different groups are independent and do not guarantee maintain specific order. Inner strings in the groups can also be in any order. One possible correct output for the example given is `[[\'bat\'], [\'tan\', \'nat\'], [\'tea\', \'ate\', \'eat\']]`.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from the given list of words. :param words: List[str] :return: List[List[str]] anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Prime Game A group of friends is playing a game with prime numbers. They take turns picking numbers, and each number must be a prime. The first person who cannot pick a prime number loses. You are given an integer `k`, which represents the number of starting prime numbers they can choose from, and a list of those prime numbers. In each turn, a player can select a prime number from the list and remove it from future choices. The game continues until no prime numbers can be selected. Write a function `prime_game` that determines if the starting player has a winning strategy assuming both players play optimally. The function should return `True` if the starting player can guarantee a win and `False` otherwise. # Input Format - An integer `k` (1 ≤ k ≤ 100) - A list of `k` distinct prime numbers each less than or equal to 1000 # Output Format - A boolean value (`True` or `False`) # Function Signature ```python def prime_game(k: int, primes: List[int]) -> bool: ``` # Example Input ```py k = 3 primes = [3, 5, 7] ``` Output ```py True ``` # Explanation - If the starting player picks `3`, then the remaining primes are `[5, 7]` and the second player picks `5`. - Now the starting player still has a move left (`7`), but the second player will lose the game in this state. - Similarly, if the starting player chooses `5` first, the remaining primes are `[3, 7]` and the second player will pick `3`, then the starting player will pick `7` and win. - This shows that regardless of the initial move, the starting player always has a winning strategy. Your task is to implement the above function ensuring optimal performance.","solution":"from typing import List def prime_game(k: int, primes: List[int]) -> bool: Determines if the starting player has a winning strategy. Args: k: An integer denoting the number of starting prime numbers. primes: A list of k distinct prime numbers. Returns: True if the starting player can guarantee a win, False otherwise. # Player can always win if the number of primes (k) is odd, # because if k is odd, the first player always makes the last move. return k % 2 == 1"},{"question":"You are given an integer array A of length N. The elements of this array can be in the range between -10^9 and 10^9. You are also given an integer X. Your task is to determine if there exists a non-empty subsequence of array A such that the sum of its elements is exactly X. If such a subsequence exists, print `Yes`, otherwise print `No`. Constraints * All values in input are integers. * 1 ≤ N ≤ 20 * -10^9 ≤ A[i] ≤ 10^9 * -10^9 ≤ X ≤ 10^9 Input Input is given from Standard Input in the following format: N X A_1 A_2 ... A_N Output If a subsequence with a sum of exactly X exists, print `Yes`; otherwise print `No`. Examples Input 5 4 1 2 3 4 5 Output Yes Input 3 10 -1 -2 -3 Output No","solution":"def has_subsequence_with_sum(A, X): N = len(A) # Iterate over all possible subsets using bitmasks for i in range(1, 1 << N): subset_sum = 0 for j in range(N): if i & (1 << j): subset_sum += A[j] if subset_sum == X: return \\"Yes\\" return \\"No\\" # Input reading import sys input = sys.stdin.read def main(): data = input().split() N = int(data[0]) X = int(data[1]) A = list(map(int, data[2:2+N])) print(has_subsequence_with_sum(A, X))"},{"question":"In the kingdom of Textoria, the wizards are fond of palindromes—strings that read the same forwards and backwards. They have given you a task to help them in their magical research. Given a string `S`, you need to determine the length of the longest palindromic subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to write a program that computes the length of the longest palindromic subsequence in the given string. Input Format: - The first line of input contains an integer `T`, the number of test cases. - For each test case, there is a single line containing the string `S`. Output Format: - For each test case, output a single integer: the length of the longest palindromic subsequence in the string `S`. Constraints: - `1 <= T <= 100` - `1 <= |S| <= 1000` (where `|S|` denotes the length of the string) - `S` consists only of lowercase alphabetical characters. SAMPLE INPUT: 3 bbbab cbbd aabcdcb SAMPLE OUTPUT: 4 2 5 Explanation: 1. The longest palindromic subsequence of \\"bbbab\\" is \\"bbbb\\", with a length of 4. 2. The longest palindromic subsequence of \\"cbbd\\" is \\"bb\\", with a length of 2. 3. The longest palindromic subsequence of \\"aabcdcb\\" is \\"abcdcba\\", with a length of 5.","solution":"def longest_palindromic_subsequence(S): Returns the length of the longest palindromic subsequence in S. n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(T, test_cases): results = [] for S in test_cases: results.append(longest_palindromic_subsequence(S)) return results"},{"question":"Given a series of classes in a high school, each class is associated with a list of integers representing the grades of students in that class. Your task is to analyze the grades and determine the highest grade in each class. # Input Format The first line contains the number of test cases T. For each test case, there will be two lines: - The first line contains an integer N, the number of students in the class. - The second line contains N space-separated integers representing the grades of students in that class. # Output Format For each test case, print the highest grade in a new line. # Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 0 ≤ grade ≤ 100 # Sample Input 2 5 83 95 76 88 92 3 45 72 67 # Sample Output 95 72 # Explanation In the first test case, the highest grade among the 5 students is 95. In the second test case, the highest grade among the 3 students is 72.","solution":"def highest_grades(test_cases): results = [] for case in test_cases: N, grades = case max_grade = max(grades) results.append(max_grade) return results"},{"question":"Aria is trying to optimize her study schedule to prepare for her exams. She has a list of subjects she needs to study, and she knows the amount of time (in hours) she needs to study each subject. Given that Aria can study a maximum of T hours per day, and she wants to study all the subjects over the next D days, help Aria determine if she can fit all her study hours into the available days. Write a program to determine whether the total study hours required can be distributed over the given days without exceeding the maximum study hours per day. Input The first line of the input contains two space-separated integers D and T (1 ≤ D ≤ 1000, 1 ≤ T ≤ 24), representing the number of days and the maximum number of hours Aria can study per day, respectively. The next line contains n space-separated integers, where each integer represents the number of hours required to study a particular subject (1 ≤ n ≤ 100, 1 ≤ hours ≤ 24 each). Output Your program should output \\"Yes\\" if it is possible for Aria to distribute the study hours over the given days within the allowed study hours per day. Otherwise, output \\"No\\". Examples Input 2 8 4 4 8 Output Yes Input 3 5 5 6 7 Output No Input 1 10 2 3 4 Output Yes","solution":"def can_fit_study_schedule(days, max_hours_per_day, study_hours): Determine whether it\'s possible to distribute study hours over the given days without exceeding the max hours per day. :param days: Number of days available to study :param max_hours_per_day: Maximum number of hours Aria can study per day :param study_hours: List of hours required for each subject :return: \'Yes\' if it is possible to fit the study schedule, \'No\' otherwise total_hours_needed = sum(study_hours) max_total_hours_available = days * max_hours_per_day if total_hours_needed <= max_total_hours_available: return \\"Yes\\" else: return \\"No\\""},{"question":"Peter loves working with grids. He recently came across a problem where he needs to create a specific path in an N x N grid. Each cell in the grid has a number, starting from 1 at the top-left corner and increasing row-wise. That means the first cell of the first row will be 1, the second cell will be 2, and so on with the number increasing to the right. Similarly, the first cell of the second row will continue from where the first row left off. Peter wants to create a path that starts at the top-left corner (cell number 1), visits each cell exactly once, and ends at the bottom-right corner (cell number N*N). The path should only move to an adjacent cell (up, down, left, or right). The challenge involves more than just finding any path; Peter wants to print the sequence of numbers in the order they are visited along the path from the top-left to the bottom-right corner. Input The first line of input contains a single integer N (2 ≤ N ≤ 200). Output A single line with N*N space-separated integers representing the sequence of cell numbers in the order they are visited along the path from the top-left corner to the bottom-right corner. Examples Input 2 Output 1 2 4 3 Input 3 Output 1 2 3 6 9 8 7 4 5 Note For a grid of 2x2, one possible path is: 1 → 2 ↓ ↓ 3 ← 4 For a grid of 3x3, one possible path is: 1 → 2 → 3 ↓ ↓ ↓ 4 5 6 ↓ ↓ 7 ← 8 ← 9","solution":"def create_path(N): Creates a sequence of cell numbers in an N x N grid from the top-left corner to the bottom-right corner visiting each cell exactly once. path = [] top, left, bottom, right = 0, 0, N-1, N-1 direction = \'right\' while top <= bottom and left <= right: if direction == \'right\': for i in range(left, right+1): path.append(top * N + i + 1) top += 1 direction = \'down\' elif direction == \'down\': for i in range(top, bottom+1): path.append(i * N + right + 1) right -= 1 direction = \'left\' elif direction == \'left\': for i in range(right, left-1, -1): path.append(bottom * N + i + 1) bottom -= 1 direction = \'up\' elif direction == \'up\': for i in range(bottom, top-1, -1): path.append(i * N + left + 1) left += 1 direction = \'right\' return path def grid_path_sequence(N): return \\" \\".join(map(str, create_path(N)))"},{"question":"Our adventurous panda, Pandi, loves to play with numbers. Recently, he came across a new number game while exploring the magical forest. The game involves rotating digits of a number and finding the maximum possible value of the resulting number. Pandi is excited to play the game and needs your help to determine the maximum number he can get by rotating the digits. Given a positive integer N, determine the maximum value obtainable by rotating the digits of N. Rotating the digits means rearranging them in any possible order. Input Format: - The first line contains a single integer T denoting the number of test cases. - Each of the next T lines contains a single integer N representing the number to be rotated. Output Format: For each test case, output the maximum number obtainable by rotating the digits of N. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^9 Sample Input 3 132 8475 25431 Sample Output 321 8754 54231 Explanation: For the first test case, rotating the digits of 132 to get the maximum value can be achieved by 321. For the second test case, rotating 8475 to get the maximum value is 8754. For the third test case, the maximum number obtainable by rotating the digits of 25431 is 54231.","solution":"def max_rotated_number(N): Returns the maximum number obtainable by rotating the digits of N. # Convert the number to a string to easily manipulate the digits str_N = str(N) # Sort the digits in descending order to form the largest possible number sorted_str_N = \'\'.join(sorted(str_N, reverse=True)) # Convert the sorted string back to an integer return int(sorted_str_N) def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. T: Number of test cases test_cases: List of integers, each representing a test case results = [] for case in test_cases: results.append(max_rotated_number(case)) return results"},{"question":"You are tasked with developing a file system simulation. The file system supports creating directories, creating files, moving files, and querying the size of a directory including all its subdirectories and files. Configurations and commands are given in a list of operations: 1. `mkdir path` - Create a directory at the given path. Parent directories will always exist. 2. `addFile path size` - Add a file at the given path with the given size (in bytes). The parent directory will always exist. 3. `mv srcPath dstPath` - Move the file from srcPath to dstPath. Both the source file and the destination parent directory will always exist. 4. `dirSize path` - Calculate the total size of the directory at the given path, including all files in subdirectories. Write a function to process the list of operations and return the sizes for each `dirSize` command in the given order. Input 1. An integer n (1 ≤ n ≤ 100000) specifying the number of operations. 2. An array of n strings representing the operations in the format described above. Output An array of integers where each integer represents the result of a `dirSize` command in the order they were issued. Examples Input 8 mkdir /a mkdir /a/b addFile /a/b/file1 100 addFile /a/file2 200 dirSize /a mkdir /a/c addFile /a/c/file3 300 dirSize /a Output [300, 600] Input 7 mkdir /x mkdir /x/y addFile /x/y/file1 50 addFile /x/y/file2 100 dirSize /x/y mv /x/y/file1 /x/y/file3 dirSize /x/y Output [150, 150]","solution":"class FileSystem: def __init__(self): self.dirs = {\'/\': {}} self.files = {} def mkdir(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.dirs[\'/\'] for d in dirs: if d not in current: current[d] = {} current = current[d] def addFile(self, path, size): *dir_path, file_name = path.strip(\'/\').split(\'/\') current = self.dirs[\'/\'] for d in dir_path: current = current[d] current[file_name] = size self.files[path] = size def mv(self, srcPath, dstPath): size = self.files[srcPath] del self.files[srcPath] self.addFile(dstPath, size) *src_dirs, src_file_name = srcPath.strip(\'/\').split(\'/\') current = self.dirs[\'/\'] for d in src_dirs: current = current[d] del current[src_file_name] def dirSize(self, path): def calculate_size(directory): size = 0 for key, value in directory.items(): if isinstance(value, dict): size += calculate_size(value) else: size += value return size dirs = path.strip(\'/\').split(\'/\') current = self.dirs[\'/\'] for d in dirs: current = current[d] return calculate_size(current) def process_operations(n, operations): fs = FileSystem() result = [] for operation in operations: op = operation.split() if op[0] == \'mkdir\': fs.mkdir(op[1]) elif op[0] == \'addFile\': fs.addFile(op[1], int(op[2])) elif op[0] == \'mv\': fs.mv(op[1], op[2]) elif op[0] == \'dirSize\': result.append(fs.dirSize(op[1])) return result"},{"question":"You are responsible for organizing a charity event with n volunteers. Each volunteer has a range of tasks they are capable of performing, represented by a skill level. The tasks to be completed and the volunteers\' skills must be optimally paired to ensure all tasks are completed efficiently. The event has m tasks, each with a required difficulty level. Each volunteer can work on tasks that match their skill level or any task with a lower difficulty. Your goal is to maximize the number of tasks completed by assigning only one volunteer to each task based on their skill levels. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 500 000) — the number of volunteers and the number of tasks. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109) — the skill levels of the volunteers. The third line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 109) — the difficulty levels of the tasks. Output Print one integer — the maximum number of tasks that can be completed. Examples Input 5 3 3 1 4 2 5 2 3 4 Output 3 Input 4 4 1 1 1 1 2 2 2 2 Output 0 Input 6 5 7 3 5 6 2 4 4 3 5 6 5 Output 5","solution":"def max_tasks_completed(n, m, skill_levels, task_difficulties): # Sort both skill levels and task difficulties skill_levels.sort() task_difficulties.sort() # Initialize pointers for volunteers and tasks volunteer_index = 0 task_index = 0 completed_tasks = 0 # Traverse both lists to find optimal task assignment while volunteer_index < n and task_index < m: if skill_levels[volunteer_index] >= task_difficulties[task_index]: # If volunteer can complete the task completed_tasks += 1 task_index += 1 # Move to the next volunteer volunteer_index += 1 return completed_tasks"},{"question":"A frosted glass window is installed in a room and is divided into an n x m grid of cells where each cell either blocks some light or lets light pass through. Each cell is represented by an integer, where 0 indicates that the cell blocks light, and 1 indicates that the cell allows light to pass through. A light source is placed outside the window, and light passes through all contiguous 1s forming a region. A contiguous region consists of cells that share a boundary (edge) with each other. Your task is to calculate the maximum area (in number of cells) of the contiguous region where light can pass through. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers (either 0 or 1) representing the grid. Output Print a single integer — the maximum number of contiguous cells allowing light to pass through (the area of the largest contiguous region of 1s). Examples Input 3 3 1 1 0 1 0 0 0 0 1 Output 3 Input 4 5 0 0 1 1 0 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 Output 4 Input 2 2 1 0 0 1 Output 1 Note In the first sample, there is a region of three 1s forming an L shape. In the second sample, the largest contiguous region contains four 1s. In the third sample, no two 1s are adjacent, so the largest contiguous region contains just one cell.","solution":"def max_contiguous_light_area(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark the cell as visited return 1 + dfs(x-1, y) + dfs(x+1, y) + dfs(x, y-1) + dfs(x, y+1) max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"A group of friends have decided to play a game called Friend Chain. In this game, they form a line where each friend must be placed such that the difference between the total number of friends to their right and left is minimized. Additionally, none of the friends should have more than one friend standing immediately next to them. Each friend can be represented by a unique integer ID from 1 to n. Your task is to create an arrangement of friends in a line that satisfies the given conditions: 1. Minimize the absolute difference between the number of friends to the left and right of any given friend in the line. 2. Ensure no friend has more than one friend standing immediately next to them. Input A single integer n (1 ≤ n ≤ 1000) — the number of friends participating in the game. Output On the first line, print the possible arrangement of friends\' IDs. If there are several possible arrangements, print any of them. Examples Input 5 Output 3 1 4 2 5 Input 4 Output 2 4 1 3","solution":"def arrange_friends(n): Arranges friends in a way that minimizes the absolute difference between the number of friends to the left and right of any given friend, and ensures no friend has more than one friend standing immediately next to them. :param n: Number of friends :return: List containing the arrangement of friends\' IDs arrangement = [] # Place friends by alternating front and back additions using two-pointers method left, right = 1, n while left <= right: if left == right: arrangement.append(left) else: arrangement.append(left) arrangement.append(right) left += 1 right -= 1 return arrangement"},{"question":"Yara, a software engineer, has embarked on a quest to automate the task of generating prime numbers. Enthusiastic about mathematical challenges, she devised a unique method to find out all prime numbers in a given range [L, R]. Her method involves several steps: 1. She first generates all the prime numbers in the range [2, √R] using the Sieve of Eratosthenes. 2. Then, she uses these primes to mark the non-prime numbers in the given range [L, R]. Yara\'s algorithm needs an efficient implementation. Given L and R, implement Yara\'s prime number generator to output all prime numbers in the inclusive range [L, R]. Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Both L and R are not greater than 10^12 and the difference between R and L is less than or equal to 10^6. **Input:** The input consists of multiple test cases. The first line contains T, the number of test cases. Each of the following T lines contains two integers, L and R (1 ≤ L ≤ R ≤ 10^12 and R - L ≤ 10^6). **Output:** For each test case, print all prime numbers in the range [L, R] in a single line separated by spaces. If there is no prime number in the range, print an empty line. **Example:** **Input:** ``` 3 10 20 100 120 15 15 ``` **Output:** ``` 11 13 17 19 101 103 107 109 113 ``` **Hint:** - Use the Sieve of Eratosthenes to find the primes up to √R. - Mark the non-prime numbers in the range [L, R] using these smaller primes. - Be mindful of edge cases such as ranges that contain no primes or cases where L and R are the same.","solution":"import math def segmented_sieve(L, R): Implements Yara\'s prime number generator. Generates all prime numbers in the range [L, R]. def simple_sieve(limit): Generate all primes up to `limit` using the Sieve of Eratosthenes. primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for i in range(2, limit + 1): if is_prime[i]: primes.append(i) for multiple in range(i * i, limit + 1, i): is_prime[multiple] = False return primes limit = int(math.sqrt(R)) + 1 primes = simple_sieve(limit) # Initialize the range array [L, R] range_prime = [True] * (R - L + 1) if L == 1: range_prime[0] = False # Mark non-prime numbers in range [L, R] for prime in primes: # Find the minimum number in range [L, R] that is a multiple of the prime start = max(prime*prime, (L + prime - 1) // prime * prime) for j in range(start, R + 1, prime): range_prime[j - L] = False # Collect all primes in the range [L, R] result = [num for num, is_pr in zip(range(L, R + 1), range_prime) if is_pr] return result def generate_primes(test_cases): results = [] for L, R in test_cases: primes = segmented_sieve(L, R) results.append(\\" \\".join(map(str, primes))) return results"},{"question":"In a kingdom far away, there are N cities connected by M bidirectional roads. Each road has an associated length representing the time it takes to travel between the two cities it connects. The kingdom\'s king, seeking to enhance the efficiency of transportation, wants to determine the time it will take to travel from the capital city to every other city. The capital city is always city 1. You are given the list of roads, each described by three integers: two cities u and v that the road connects, and an integer t which represents the travel time between u and v. Your task is to find the shortest travel time from the capital city to all other cities and return these times as a list. If a city is not reachable from the capital, the travel time should be -1 for that city. Constraints: - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ t ≤ 100 - 1 ≤ u, v ≤ N - No road connects a city to itself. - No two roads connect the same pair of cities. Input The input is given via standard input in the following format: N M u_1 v_1 t_1 u_2 v_2 t_2 ... u_M v_M t_M Output Output a single line containing N space-separated integers. The i-th integer represents the shortest travel time from the capital (city 1) to city i+1. For the capital itself, the travel time should be 0. Example Input 5 6 1 2 2 1 3 3 2 3 1 2 4 5 3 4 1 4 5 2 Output 0 2 3 4 6 Input 4 3 1 2 4 2 3 2 3 4 3 Output 0 4 6 9","solution":"import heapq import sys def shortest_travel_time(N, M, roads): # Initialize adjacency list adj = [[] for _ in range(N+1)] for u, v, t in roads: adj[u].append((v, t)) adj[v].append((u, t)) # Dijkstra\'s algorithm def dijkstra(start): distances = [float(\'inf\')] * (N + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > distances[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return distances travel_times = dijkstra(1) result = [] for i in range(1, N+1): if travel_times[i] == float(\'inf\'): result.append(-1) else: result.append(travel_times[i]) return result"},{"question":"You are given a string s consisting of lowercase English letters. For a string t, defined as a permutation of string s, let\'s call it a valid permutation if there are no two consecutive characters in t that are the same. Determine the number of valid permutations of s. If the number is large, output it modulo 10⁹ + 7. Input The first line contains a single integer n (1 ≤ n ≤ 100), the length of the string s. The second line contains the string s. Output Output a single integer: the number of valid permutations of s modulo 10⁹ + 7. Examples Input 3 abc Output 6 Input 4 aabb Output 2 Note In the first example, any permutation of the string \\"abc\\" is valid because all characters are different. In the second example, the valid permutations are \\"abab\\" and \\"baba\\". The permutations \\"aabb\\" and \\"bbaa\\" have consecutive same characters and thus are not valid.","solution":"MOD = 10**9 + 7 from collections import Counter from itertools import permutations def is_valid_permutation(perm): for i in range(len(perm) - 1): if perm[i] == perm[i + 1]: return False return True def count_valid_permutations(s): n = len(s) count = 0 all_permutations = set(permutations(s)) for perm in all_permutations: if is_valid_permutation(perm): count += 1 return count % MOD def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) s = data[1] print(count_valid_permutations(s))"},{"question":"Ravi is making a video game and one of the critical aspects of his game is to have a feature where the player can traverse a maze by moving either up, down, left, or right. The maze is represented as a 2D grid where 1 represents an obstacle and 0 represents a possible path. The player starts at the top-left corner (0, 0) and aims to reach the bottom-right corner (n-1, m-1). Ravi wants to know if it\'s possible to reach the destination. Write a program to determine if there is a path from the top-left to the bottom-right corner. [Input] The first line contains an integer t denoting the number of test cases. Each test case starts with two integers n and m, denoting the number of rows and columns of the maze respectively. The next n lines contain m integers each (0s or 1s) representing the maze. [Output] For each test case, output \\"Possible\\" if there is a path from the top-left corner to the bottom-right corner, otherwise output \\"Impossible\\". [Constraints] 1 ≤ t ≤ 50 1 ≤ n, m ≤ 100 SAMPLE INPUT 2 3 3 0 0 1 1 0 1 1 0 0 2 2 0 1 1 0 SAMPLE OUTPUT Possible Impossible","solution":"def is_path_possible(n, m, maze): # Define the directions we can move (down, up, right, left) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Function to check if a cell is valid def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == 0 # Use Breadth-First Search (BFS) to find the path from collections import deque queue = deque([(0, 0)]) maze[0][0] = 1 # Mark the starting point as visited by setting it to 1 while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"Possible\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): queue.append((nx, ny)) maze[nx][ny] = 1 # Mark as visited return \\"Impossible\\" def solve(t, cases): results = [] for i in range(t): n, m = cases[i][0], cases[i][1] maze = cases[i][2] result = is_path_possible(n, m, maze) results.append(result) return results"},{"question":"Given an array of integers, determine if the array can be divided into two non-empty subarrays such that the sum of elements in both subarrays is equal. If such a split is possible, print \\"YES\\", otherwise print \\"NO\\". Example Input 5 1 2 3 4 5 Output NO Input 4 2 1 1 2 Output YES","solution":"def can_be_divided(arr): Determines if the array can be divided into two non-empty subarrays with equal sum. :param arr: List of integers :return: \\"YES\\" if possible to divide into two such subarrays, otherwise \\"NO\\" total_sum = sum(arr) # If total_sum is odd, we cannot split it equally if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 # Check if there exists a prefix with sum equal to half_sum for num in arr: current_sum += num if current_sum == half_sum: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of n integers. You need to determine the maximum absolute difference between any two adjacent elements in the array and then perform an operation to change the array as follows: choose a single index and replace the element at that index with any integer value you want. After this operation, you need to calculate the minimum possible maximum absolute difference between any two adjacent elements in the modified array. Input: The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the length of the array a. - The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output: For each test case, print the minimum possible maximum absolute difference between any two adjacent elements in the array after performing the operation. Example: Input: 3 4 1 3 6 10 3 5 8 9 2 -1 4 Output: 3 1 0 Explanation: In the first test case, the original maximum absolute difference is |10 - 6| = 4. By changing the third element to 4, the array becomes [1, 3, 4, 10], and the maximum absolute difference is |4 - 3| = 1; however, changing the second element to 5 yields [1, 5, 6, 10], where the maximum absolute difference is |6 - 5| = 1 and |10 - 6| = 4, leading to an overall maximum absolute difference of 4. The minimum possible maximum absolute difference is 3 which is achieved by carefully choosing the altered value. In the second test case, the initial maximum absolute difference is |8-5| = 3. Changing either the second or third elements to any value between 5 and 8 yields a minimum possible maximum absolute difference of 1. In the third test case, changing the second element to -1 makes the array [-1, -1], giving a maximum absolute difference of 0.","solution":"def min_max_abs_diff(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] def max_abs_diff(arr): max_diff = 0 for i in range(1, len(arr)): max_diff = max(max_diff, abs(arr[i] - arr[i - 1])) return max_diff initial_max_diff = max_abs_diff(a) if n == 2: results.append(0) continue min_possible = float(\'inf\') for i in range(n): if i == 0: temp_arr = [a[1] * 2 - a[2]] + a[1:] elif i == n - 1: temp_arr = a[:-1] + [a[-2] * 2 - a[-3]] else: temp_arr1 = a[:i] + [a[i-1]] + a[i+1:] temp_arr2 = a[:i] + [a[i+1]] + a[i+1:] min_possible = min(min_possible, max_abs_diff(temp_arr1), max_abs_diff(temp_arr2)) min_possible = min(min_possible, max_abs_diff(temp_arr)) results.append(min_possible) return results"},{"question":"After finishing his daily programming routine, Andrei decided to go out for a walk in the city. The city is organized as a grid of NxM blocks. He starts at the top-left corner block (1, 1) and wants to walk to the bottom-right corner block (N, M). However, there are some blocks that he cannot walk through because they are under construction. Andrei can move up, down, left, or right, but not diagonally. Your task is to determine if there is a path for Andrei to get from the top-left corner to the bottom-right corner. If a path exists, output the sequence of directions Andrei should take (using \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right). If there are multiple paths, any valid path will do. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the dimensions of the city grid. The next line contains an integer K (0 ≤ K ≤ N*M) — the number of blocks under construction. The following K lines each contain two integers r_i and c_i (1 ≤ r_i ≤ N, 1 ≤ c_i ≤ M) — the row and column indices of the under-construction blocks. Output If there is a path from (1, 1) to (N, M), print \\"YES\\" on the first line. On the second line, print the sequence of directions. If no path exists, print \\"NO\\". Example Input 4 4 3 2 2 3 3 4 1 Output YES RRDDRR Input 3 3 4 1 2 2 1 2 3 3 2 Output NO Note In the first example, Andrei can move right two times, down two times, and right two times to reach the destination. In the second example, there is no path from (1, 1) to (3, 3) due to the under-construction blocks at important positions.","solution":"def find_path(N, M, K, blocks): from collections import deque # Initialize grid with True (walkable) and mark under-construction blocks as False grid = [[True] * M for _ in range(N)] for r, c in blocks: grid[r - 1][c - 1] = False # Directions: (delta_row, delta_col) directions = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } # Use BFS to find a path queue = deque([(0, 0, \\"\\")]) # (row, col, path string) visited = set() visited.add((0, 0)) while queue: r, c, path = queue.popleft() # If we have reached the bottom-right corner, return the path if (r, c) == (N-1, M-1): return \\"YESn\\" + path # Check all possible directions for move, (dr, dc) in directions.items(): nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] and (nr, nc) not in visited: queue.append((nr, nc, path + move)) visited.add((nr, nc)) # If we exhaust the queue without finding a path, return \\"NO\\" return \\"NO\\" # Example usage: N = 4 M = 4 K = 3 blocks = [(2, 2), (3, 3), (4, 1)] print(find_path(N, M, K, blocks)) N = 3 M = 3 K = 4 blocks = [(1, 2), (2, 1), (2, 3), (3, 2)] print(find_path(N, M, K, blocks))"},{"question":"In a distant galaxy, there is a race of beings who use a unique communication system based on sequences of lights. Each light in the sequence can be one of three colors: Red (R), Green (G), or Blue (B). Due to a cosmic event, a machine that generates these sequences has malfunctioned and is producing sequences with errors. A sequence of lights is considered \\"valid\\" if it satisfies the following conditions: 1. No two adjacent lights can be of the same color. 2. The sequence must start with a Red light and end with a Blue light. Given a sequence of lights, determine whether it is valid according to the rules, and if not, find the minimum number of light changes needed to make it valid. Each change consists of turning one light to another color (R, G, or B). Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The second line contains a string of length n, representing the sequence of lights. The string consists of characters \'R\', \'G\', and \'B\' only. Output Print a single integer, the minimum number of changes required to make the sequence valid. Examples Input 5 RGBGB Output 0 Input 4 RRBG Output 2 Input 7 GBRGRGR Output 3","solution":"def min_changes_to_valid_sequence(n, sequence): This function determines the minimum number of changes needed to make a sequence of lights valid. A valid sequence starts with \'R\', ends with \'B\', and no two adjacent lights can be the same color. Parameters: n (int): Length of the sequence sequence (str): The sequence of lights Returns: int: The minimum number of changes to make the sequence valid if n == 1: return 0 if sequence == \'R\' else 1 def is_valid(seq): return all(seq[i] != seq[i + 1] for i in range(len(seq) - 1)) valid_start = sequence[0] == \'R\' valid_end = sequence[-1] == \'B\' changes = 0 for i in range(n - 1): if sequence[i] == sequence[i + 1]: changes += 1 # Choose a color that is different from both the current and the next (if exists) for color in \\"RGB\\": if i + 2 < n and color != sequence[i] and color != sequence[i + 2]: sequence = sequence[:i + 1] + color + sequence[i + 2:] break elif i + 2 >= n and color != sequence[i]: sequence = sequence[:i + 1] + color + sequence[i + 2:] break if not valid_start and valid_end: changes += 1 elif valid_start and not valid_end: changes += 1 elif not valid_start and not valid_end: changes += 2 return changes"},{"question":"Given a binary tree, we need to perform the following operations: 1. Find the sum of all nodes in the binary tree. 2. Find the height of the binary tree. 3. Find the maximum value node in the binary tree. Each node in the binary tree has an integer value. You are given multiple queries where each query is a binary tree represented with a list of integers where `-1` represents a null node. You need to process each query and return the results for the above operations. Input The first line contains one integer q (1 ≤ q ≤ 10^3) — the number of the queries. For each query: - The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree (excluding null nodes). - The second line contains a list of 2n-1 integers representing the level order traversal of the binary tree where `-1` represents a null node. Output For each query, print three integers: - The sum of all nodes. - The height of the binary tree. - The maximum value node in the binary tree. Example Input 2 3 1 2 3 5 1 2 3 -1 -1 4 5 Output 6 2 3 15 3 5 Note For the first query, the binary tree is: 1 / 2 3 - Sum of all nodes: 1 + 2 + 3 = 6 - Height of the tree: 2 - Maximum value node: 3 For the second query, the binary tree is: 1 / 2 3 / 4 5 - Sum of all nodes: 1 + 2 + 3 + 4 + 5 = 15 - Height of the tree: 3 - Maximum value node: 5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_level_order(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): current = queue.pop(0) if i < len(level_order) and level_order[i] != -1: current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] != -1: current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root def tree_sum(root): if not root: return 0 return root.val + tree_sum(root.left) + tree_sum(root.right) def tree_height(root): if not root: return 0 return max(tree_height(root.left), tree_height(root.right)) + 1 def tree_max_value(root): if not root: return float(\'-inf\') return max(root.val, tree_max_value(root.left), tree_max_value(root.right)) def process_queries(queries): results = [] for query in queries: n, level_order = query root = build_tree_from_level_order(level_order) sum_of_nodes = tree_sum(root) height = tree_height(root) max_value = tree_max_value(root) results.append((sum_of_nodes, height, max_value)) return results"},{"question":"In a particular country, the currency system consists of coins of the following denominations: 1, 3, and 4 units. People often find it tedious to compute the minimum number of coins required to achieve a certain amount of money. Therefore, they have asked for a program that will help them in this task. Given an amount of money N, the task is to determine the minimum number of coins needed to make that amount using the available denominations. Write a function `min_coins(n)` that takes an integer N (1 ≤ N ≤ 1000) and returns the minimum number of coins needed to make that amount. Input: The input consists of a single integer N, the amount of money to be computed. Output: Output the minimum number of coins needed to make the amount N. Example: Input: 7 Output: 2 Explanation: The optimal way to obtain 7 units is to use one coin of 3 units and one coin of 4 units, totaling 2 coins. Test Case Explanation: - For the input 7, the function should return 2, as the 7 units can be obtained by using one 3-unit coin and one 4-unit coin. - For an input of 10, the function should return 3, as the 10 units can be obtained by using three 3-unit coins and one 1-unit coin. Write the function `min_coins(n)` to solve the problem.","solution":"def min_coins(n): Given an amount of money n, determine the minimum number of coins needed to make that amount using coins of denominations 1, 3, and 4. Args: n (int): The amount of money to be computed. (1 ≤ N ≤ 1000) Returns: int: The minimum number of coins required. # Initialize the dp array with an arbitrarily high value dp = [float(\'inf\')] * (n + 1) # Base case: 0 coins are needed to make 0 amount dp[0] = 0 # Iterate over each amount from 1 to n for i in range(1, n + 1): # Update dp[i] for each coin denomination if i >= 1: dp[i] = min(dp[i], dp[i - 1] + 1) if i >= 3: dp[i] = min(dp[i], dp[i - 3] + 1) if i >= 4: dp[i] = min(dp[i], dp[i - 4] + 1) return dp[n]"},{"question":"You are given a sequence of integers and need to determine if the sequence is a palindrome. A sequence of numbers is called a palindrome if it reads the same forward and backward. Input The first line of the input contains an integer ( n ) — the length of the sequence (1 ≤ n ≤ 100). The second line contains ( n ) integers separated by space, which represents the sequence. Output Print \\"YES\\" if the sequence is a palindrome, otherwise print \\"NO\\". Examples Input 5 1 2 3 2 1 Output YES Input 4 1 2 3 4 Output NO Note In the first example, the sequence 1 2 3 2 1 reads the same forward and backward, hence it is a palindrome. In the second example, the sequence 1 2 3 4 does not read the same forward and backward, hence it is not a palindrome.","solution":"def is_palindrome(sequence): Determines if a given sequence is a palindrome. Args: sequence (list): A list of integers representing the sequence. Returns: str: \\"YES\\" if the sequence is a palindrome, otherwise \\"NO\\". if sequence == sequence[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Emily is organizing a coding competition and she needs to create a leaderboard that can dynamically calculate scores for participants. Each time a participant submits a correct solution, they earn a certain number of points, and the leaderboard must update accordingly. Emily decided to handle this using a list of score updates that will modify the participants\' scores as they get evaluated. Write a program that processes a series of score updates and outputs the final scores of all participants. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of participants and the number of updates respectively. The next m lines contain two integers p and s (1 ≤ p ≤ n, 1 ≤ s ≤ 1000) — indicating that participant p earns s points with this update. Output Print n integers separated by spaces — the final scores of all participants in order from participant 1 to participant n, after all updates have been processed. Examples Input 5 4 1 100 2 50 1 50 5 200 Output 150 50 0 0 200 Input 3 3 2 20 3 30 2 10 Output 0 30 30 Note In the first example: - Participant 1 earns 100 points in the first update and 50 points in the third update for a total of 150 points. - Participant 2 earns 50 points in the second update. - Participants 3 and 4 do not earn any points. - Participant 5 earns 200 points in the fourth update. In the second example: - Participant 1 does not earn any points. - Participant 2 earns 20 points in the first update and 10 points in the third update for a total of 30 points. - Participant 3 earns 30 points in the second update.","solution":"def leaderboard_scores(n, m, updates): # Initialize the scores for each participant with 0 scores = [0] * n # Process each update for p, s in updates: scores[p - 1] += s return scores"},{"question":"Lena loves collecting rare stones. She has a collection of n stones, each defined by its rarity level. She wants to organize her collection such that any rare stone is followed by a stone of lesser rarity or the same rarity. This way, her rarest stones will be at the beginning of her collection. Write a program that rearranges Lena\'s collection according to her requirement. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of stones in Lena\'s collection. The next line contains n space-separated integer numbers, each representing the rarity level ri (1 ≤ ri ≤ 100) of a stone. Output Output n integer numbers separated by spaces, where the ith number represents the rarity level of the ith stone in the rearranged collection. Examples Input 5 4 3 8 2 5 Output 8 5 4 3 2 Input 4 10 20 10 5 Output 20 10 10 5 Note In the first example, the rarest stone with rarity level 8 comes first, followed by stones of decreasing rarity levels. In the second example, the stone with rarity level 20 comes first, followed by two stones with rarity level 10, and then the stone with rarity level 5.","solution":"def rearrange_stones(n, rarities): Rearranges the stones in descending order by their rarity levels. Parameters: n (int): Number of stones. rarities (list of int): A list of integers representing the rarity levels of the stones. Returns: list of int: The rearranged list of rarity levels in descending order. return sorted(rarities, reverse=True)"},{"question":"A magician has a collection of n different magic books, each containing a certain number of spells. The magician wants to split these books into two groups in such a way that the difference between the sum of spells in one group and the sum of spells in the other group is minimized. Write a program that, given the number of spells in each book, determines the minimum possible difference between the sums of spells of the two groups. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of magic books. The second line contains n space-separated integers, where the i-th integer represents the number of spells in the i-th book. Each integer is at least 1 and does not exceed 100. Output Print a single integer representing the minimum possible difference. Examples Input 4 3 1 4 2 Output 0 Input 3 6 10 15 Output 1","solution":"from itertools import combinations def min_difference(n, spells): Determines the minimum possible difference between the sums of spells in two groups of books. total_sum = sum(spells) min_diff = float(\'inf\') for i in range(n+1): for subset in combinations(spells, i): subset_sum = sum(subset) difference = abs(total_sum - 2 * subset_sum) min_diff = min(min_diff, difference) return min_diff"},{"question":"Amandeep is an artist who enjoys creating patterns with stars. Today, he came across an interesting challenge. You are given an integer n representing the number of rows in a pyramid pattern. Your task is to help Amandeep print a star pattern in the shape of a right-angled pyramid. The pyramid should have n rows, with each row i (1 ≤ i ≤ n) containing i stars. Each star in a row should be separated by a space. For example, if n = 4, the output should be: ``` * * * * * * * * * * ``` Input The input consists of a single integer n (1 ≤ n ≤ 50) representing the number of rows in the pyramid pattern. Output Print the star pattern in the shape of a right-angled pyramid with n rows. Example Input 3 Output ``` * * * * * * ``` Note In this problem, you need to generate and print the specified star pattern correctly aligned, with each row having exactly row number of stars. The stars should be separated by a single space, and there should not be a trailing space at the end of any line.","solution":"def right_angled_pyramid(n): Generates a right-angled pyramid pattern with `n` rows and prints it. pyramid = [] for i in range(1, n+1): pyramid.append(\' \'.join([\'*\'] * i)) return \'n\'.join(pyramid)"},{"question":"The country of Innovatia is known for its complex trade regulations. You have been tasked with creating a system to manage their import tariffs. Each product falls into a category, and each category has its own base tariff rate. Additionally, some products have specific exceptions where a different tariff rate applies. You are given the number of categories, the base tariff rate for each category, and a list of exceptions where specific products have their own tariff rates. You need to answer queries about the tariff rate of a specified product. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of categories. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the base tariff rates for each category. The third line contains an integer m (0 ≤ m ≤ 10^5) — the number of exceptions. The next m lines each contain an integer pi (1 ≤ pi ≤ 10^5) followed by an integer ri (1 ≤ ri ≤ 100) — product pi has an exceptional tariff rate ri. The following line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains an integer pi (1 ≤ qi ≤ 10^5) — the identifier of a product for which you need to determine the tariff rate. Output Output q lines, each containing the tariff rate for the specified product. Examples Input 3 10 20 30 2 1 5 3 25 3 1 2 3 Output 5 20 25 Note In the example, there are three categories with base tariff rates of 10, 20, and 30 respectively. There are two exceptions: product 1 has a tariff rate of 5, and product 3 has a tariff rate of 25. The queries ask for the tariff rates of products 1, 2, and 3 respectively, resulting in the outputs of 5, 20, and 25.","solution":"def get_tariff_rates(n, base_tariffs, m, exceptions, q, queries): Determines the tariff rates for the specified products based on the base tariffs of categories and specific exceptions for some products. :param n: Number of categories :param base_tariffs: List of base tariffs for each category :param m: Number of exceptions :param exceptions: List of tuples with product id and exceptional tariffs :param q: Number of queries :param queries: List of queries for specific product ids :return: List of tariff rates corresponding to the queries tariff_rates = {} # Populate tariff rates for exceptions for product_id, exceptional_rate in exceptions: tariff_rates[product_id] = exceptional_rate # Answer queries results = [] for product_id in queries: if product_id in tariff_rates: results.append(tariff_rates[product_id]) else: category_index = (product_id - 1) % n results.append(base_tariffs[category_index]) return results"},{"question":"A company is hosting a programming competition where participants have to analyze user reviews to determine their sentiment. The reviews are classified into three categories: positive, neutral, and negative. Your task is to write a program that classifies a given review into one of these three categories based on a predefined training set. The training set consists of three files: - `positive_reviews.txt` - `neutral_reviews.txt` - `negative_reviews.txt` Each file contains a list of reviews, one per line. You can download the training set from the following link: `http://download4.abbyy.com/a2/X5FS3F3VG36HYQWL41H67WJN/train_reviews.zip`. The archive contains three files with names \\"positive_reviews.txt\\", \\"neutral_reviews.txt\\", and \\"negative_reviews.txt\\". Each file only contains reviews belonging to their respective category. Your program should accept a review as input and determine the category of the review using the training set. Input The input consists of a single line containing the review text. The length of the review will not exceed 500 characters. Output Print \'1\' for positive reviews, \'2\' for neutral reviews, and \'3\' for negative reviews. Example Input: The product quality is amazing and I\'m very satisfied with it. Output: 1","solution":"import os import requests from collections import Counter from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # URLs pointing to the dataset URLS = { \'positive\': \'https://example.com/path/to/positive_reviews.txt\', \'neutral\': \'https://example.com/path/to/neutral_reviews.txt\', \'negative\': \'https://example.com/path/to/negative_reviews.txt\' } def download_reviews(): reviews = {\'positive\': [], \'neutral\': [], \'negative\': []} for category, url in URLS.items(): response = requests.get(url) response.raise_for_status() reviews[category] = response.text.splitlines() return reviews def read_reviews(): reviews = download_reviews() return reviews[\'positive\'], reviews[\'neutral\'], reviews[\'negative\'] # Function to classify a given review def classify_review(review): positive_reviews, neutral_reviews, negative_reviews = read_reviews() vectorizer = CountVectorizer() # Create the training data all_reviews = positive_reviews + neutral_reviews + negative_reviews X_train = vectorizer.fit_transform(all_reviews) y_train = [1]*len(positive_reviews) + [2]*len(neutral_reviews) + [3]*len(negative_reviews) # Train the classifier clf = MultinomialNB() clf.fit(X_train, y_train) # Prepare the input review for classification X_test = vectorizer.transform([review]) # Predict the class of the input review prediction = clf.predict(X_test) return prediction[0]"},{"question":"You are given an array `arr` consisting of `n` integers. You are allowed to perform unlimited operations, where in each operation, you pick any two adjacent elements of the array, remove them, and insert their sum back into the array. Determine the maximum possible value of the remaining element after a series of operations. Constraints: * 2 ≤ n ≤ 1000 * 1 ≤ arr[i] ≤ 1000, for 1 ≤ i ≤ n Input: * The first line contains `n`, the number of integers in the array. * The second line contains `n` space-separated integers representing the elements of the array `arr`. Output: * Output the maximum possible value of the remaining element. Examples: Input: 4 1 2 3 4 Output: 10 Input: 5 5 3 2 7 6 Output: 23","solution":"def max_possible_value(arr): Returns the maximum possible value of the remaining element after performing the operations. return sum(arr)"},{"question":"You are given a linked list, each node containing an integer value. Your task is to insert integers into the linked list, ensuring that the list remains sorted in non-decreasing order. Write a function that accepts the head of the linked list and an integer to be inserted, and returns the head of the updated linked list. # Input - A pointer to the head of a singly linked list where each node contains an integer value. - An integer `num` which you need to insert into the linked list. # Output - A pointer to the head of the resulting linked list after inserting the integer. # Function Signature ```python class ListNode: def __init__(self, x): self.val = x self.next = None def insert_into_sorted_list(head: ListNode, num: int) -> ListNode: # Your code goes here ``` # Constraints 1. The linked list will have at most 100,000 nodes. 2. The value of integers in the linked list will be within the range -10^9 to 10^9. 3. The integer `num` will also be within the range -10^9 to 10^9. # Example Example 1 Input: [1 rightarrow 2 rightarrow 4], 3 Output: [1 rightarrow 2 rightarrow 3 rightarrow 4] Example 2 Input: [1 rightarrow 3 rightarrow 4], 0 Output: [0 rightarrow 1 rightarrow 3 rightarrow 4]","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def insert_into_sorted_list(head: ListNode, num: int) -> ListNode: new_node = ListNode(num) # If the list is empty or the new node should be inserted before the head if not head or num <= head.val: new_node.next = head return new_node # Traverse the list to find the correct insertion point current = head while current.next and current.next.val < num: current = current.next # Insert the new node new_node.next = current.next current.next = new_node return head"},{"question":"You are tasked with designing a navigation system for a robot in a rectangular grid of size n x m. The robot can move up, down, left, or right, but it is restricted from moving onto cells that contain obstacles. The robot starts from a given starting cell (sx, sy) and must reach a target cell (tx, ty). The grid contains cells that can either be: * an empty cell — the robot can move onto this cell; * an obstacle — the robot cannot move onto this cell. Given the grid and the positions of the starting and target cells, determine the length of the shortest path from the starting cell to the target cell. If there is no such path, return -1. Input: - The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The second line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ n, m) — the starting and target cell positions. - Each of the next n lines contains m characters. The j-th character of the i-th line is: * \'.\' if the cell (i, j) is an empty cell; * \'#\' if the cell (i, j) is an obstacle. Output: - Print a single integer — the length of the shortest path from the starting cell to the target cell. If there is no path, print -1. Examples: Input: 5 5 1 1 5 5 ..... .#..# .#..# ..... ..... Output: 8 Input: 3 3 1 1 3 3 ..# .#. #.. Output: -1 Note: In the first example, the robot can move from (1, 1) to (5, 5) following the path (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) -> (5, 4) -> (5, 5). In the second example, there is no valid path from the starting position to the target position due to obstacles blocking all possible routes.","solution":"from collections import deque def shortest_path(n, m, sx, sy, tx, ty, grid): Returns the length of the shortest path from starting cell (sx, sy) to target cell (tx, ty) in an n x m grid with obstacles. If no such path exists, returns -1. # Convert (sx, sy) and (tx, ty) from 1-based to 0-based indices sx -= 1 sy -= 1 tx -= 1 ty -= 1 if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy)]) visited = set((sx, sy)) distance = {(sx, sy): 0} while queue: x, y = queue.popleft() if (x, y) == (tx, ty): return distance[(x, y)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) distance[(nx, ny)] = distance[(x, y)] + 1 queue.append((nx, ny)) return -1"},{"question":"Alice is a robot designed by a team of engineers to navigate a grid and collect items. The grid is a 2D array with R rows and C columns. Each cell may contain an item (denoted by 1) or be empty (denoted by 0). Alice starts at cell (1, 1) and can move right, down, or diagonally to the bottom-right. The goal is for Alice to collect as many items as possible on her way to the bottom-right corner of the grid (cell (R, C)). Alice can collect the items only once. Therefore, the same item cannot be collected more than once. Alice\'s movement is restricted by the following conditions: - In one move, she can go from cell (i, j) to either cell (i, j+1), or cell (i+1, j), or cell (i+1, j+1). - She cannot move out of the grid boundary. Your task is to write an algorithm that determines the maximum number of items Alice can collect from (1, 1) to (R, C). Input The first line contains two integers R and C (1 ≤ R, C ≤ 1000). Each of the next R lines contains C integers, representing the grid. Output Output a single integer – the maximum number of items Alice can collect. Examples Input 3 4 0 1 0 0 1 0 1 0 0 0 0 1 Output 3 Note In this example, Alice can start at (1, 1), move to (1, 2) to collect 1 item, move to (2, 3) to collect another item, and finally move to (3, 4) to collect the final item, for a total of 3 items collected.","solution":"def max_items_collected(grid): Returns the maximum number of items that can be collected in the grid. Args: grid (List[List[int]]): A 2D array representing the grid where 1 is an item and 0 is empty. Returns: int: The maximum number of items collected. R = len(grid) C = len(grid[0]) dp = [[0] * C for _ in range(R)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, C): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, R): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the remaining cells for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + grid[i][j] # The bottom-right corner of the grid contains the maximum number of items collected return dp[R - 1][C - 1]"},{"question":"You are working on a forest conservation project and need to monitor tree growth over time. The project involves measuring the growth of trees planted in a straight line along a road. Each tree grows each year but the growth is affected by a specific pattern. Given an initial height of each tree, and a growth rate for each year, calculate the total height of each tree after a certain number of years, taking into account the given pattern. The growth pattern is such that: - In the first year, trees grow by the specified initial growth rate. - In the second year, the growth rate doubles. - In the third year, the growth rate triples. - This pattern continues such that in the nth year, the growth rate is n times the initial growth rate. Input The first line contains two integers n (1 ≤ n ≤ 105) — the number of trees, and y (1 ≤ y ≤ 105) — the number of years. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the initial heights of the trees. The third line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 100) — the initial growth rates per year for each tree. Output Print n integers — the heights of the trees after y years. Example Input 3 2 1 2 3 1 2 3 Output 3 10 18 # Explanation: - In the given test case, there are 3 trees and we need to calculate their heights after 2 years. - Initially, heights are [1, 2, 3], and growth rates are [1, 2, 3]. - Year 1: Each tree grows by [1, 2, 3] respectively, so new heights are [2, 4, 6]. - Year 2: Each tree grows by [2*1, 2*2, 2*3] respectively, so new heights are [2+2, 4+4, 6+6] which results in [4, 8, 12]. - Thus, the final heights are [3, 10, 18].","solution":"def calculate_tree_heights(n, y, heights, growth_rates): Calculate the total height of each tree after y years. :param n: Number of trees :param y: Number of years :param heights: List of initial heights of the trees :param growth_rates: List of initial growth rates of the trees :return: List of heights of the trees after y years for year in range(1, y + 1): for i in range(n): heights[i] += year * growth_rates[i] return heights"},{"question":"A company has n employees numbered from 1 to n. The company has recorded the working hours of each employee for the past week. From these records, the company wants to identify whether an employee has worked consecutive hours that form a sequence of increasing hours. An array of integers represents the working hours of the employee strictly in the order they worked throughout the week. An employee has worked consecutive hours that form an increasing sequence if for some subarray arr[l], arr[l+1],..., arr[r] the following condition holds: arr[l] < arr[l+1] < ... < arr[r]. Given the working hours of the n employees, write a program to determine whether each employee has such a subarray of consecutive increments. Input: - The first line contains an integer n (1 ≤ n ≤ 100) – the number of employees. - The next n lines contain the working hours in the format: * The first integer in each line indicates the number of hours m (1 ≤ m ≤ 100) worked by the employee. * This is followed by m integers, representing the working hours. Output: - For each employee, output \\"Yes\\" if there exist consecutive working hours forming an increasing sequence, otherwise output \\"No\\". Example: Input: 3 5 1 2 3 2 5 4 5 4 3 2 6 1 5 3 4 8 7 Output: Yes No Yes","solution":"def has_increasing_sequence(hours): Returns \'Yes\' if there exists a subarray of consecutive working hours that form an increasing sequence, otherwise returns \'No\'. for i in range(len(hours) - 1): if hours[i] < hours[i + 1]: return \'Yes\' return \'No\' def check_employees_working_hours(n, employees_hours): Takes the number of employees and their working hours, returns a list of \'Yes\' or \'No\' for each employee based on whether they have an increasing sequence of working hours. results = [] for hours in employees_hours: results.append(has_increasing_sequence(hours)) return results"},{"question":"# Problem Statement Alice works on maintaining a distributed database system. She needs a feature to efficiently generate statistics for different segments of data. Each segment of data represents a collection of integers and is managed by computing the minimum, maximum, and average values for a specific range of segments. You are required to implement this feature for Alice. Specifically, given an array of integers and a set of queries, where each query specifies a range within the array, your task is to compute the minimum, maximum, and average values within the specified range. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10000) — the number of elements in the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 50000) — the number of queries. - The following `q` lines contain two integers each, `l` and `r` (1 ≤ l ≤ r ≤ n) — the indices (1-based) of the range for which the statistics need to be computed. # Output For each query, output three values: 1. The minimum value in the range [l, r]. 2. The maximum value in the range [l, r]. 3. The average of the values in the range [l, r], rounded to the nearest integer. # Example Input ``` 5 2 6 1 9 4 3 1 3 2 5 1 5 ``` Output ``` 1 6 3 1 9 5 1 9 4 ``` # Note: - It’s guaranteed that the average values will fit in the 32-bit signed integer range. - The average should be rounded using standard rounding rules, i.e., if the fractional part is 0.5 or higher, round up; otherwise, round down. Implement the function to solve the problem efficiently to handle large inputs up to the specified limits.","solution":"def calculate_statistics(arr, queries): This function computes the minimum, maximum and average values for specified ranges in the array for each query. :param arr: List[int], list of integers representing the array :param queries: List[Tuple[int, int]], list of tuples each representing a query :return: List[Tuple[int, int, int]], list of tuples each containing (min, max, avg) for the query range result = [] for l, r in queries: segment = arr[l-1:r] min_val = min(segment) max_val = max(segment) avg_val = round(sum(segment) / len(segment)) result.append((min_val, max_val, avg_val)) return result def process_input(n, arr, q, queries): This function processes the input and computes the statistics for each query. :param n: int, number of elements in the array :param arr: List[int], list of integers representing the array :param q: int, number of queries :param queries: List[Tuple[int, int]], list of tuples each representing a query :return: None, prints the result for each query results = calculate_statistics(arr, queries) for res in results: print(res[0], res[1], res[2])"},{"question":"Karel, an enthusiast of encrypted messaging, often uses strings of Latin letters a..z to encode his messages. He has devised a way to modify strings using a specific set of operations. Each operation allows him to increment or decrement a character in the string according to its ASCII value. Given two strings, `start` and `target`, of the same length, Karel wants to transform `start` into `target` using the minimum number of operations. An operation is defined as incrementing or decrementing a character in `start` by one to get closer to the corresponding character in `target`. For example, changing \'a\' to \'b\' (or vice versa) counts as one operation. Write a function to calculate the minimum number of operations needed to transform `start` into `target`. **Input** The input consists of: - A single integer N (1 ≤ N ≤ 100) representing the length of the strings `start` and `target`. - A string `start` of length N consisting of small Latin letters a..z. - A string `target` of length N consisting of small Latin letters a..z. **Output** Output an integer representing the minimum number of operations required to transform `start` into `target`. **Example** Input: 4 abcd bcde Output: 4 Input: 3 aaa zzz Output: 75 Explanation: In the first test case, the minimum number of operations needed to transform each character in \\"abcd\\" to \\"bcde\\" is as follows: \'a\' to \'b\': 1 operation, \'b\' to \'c\': 1 operation, \'c\' to \'d\': 1 operation, \'d\' to \'e\': 1 operation. Total = 1 + 1 + 1 + 1 = 4 operations. In the second test case, each \'a\' can be incremented 25 times to reach \'z\'. So, for 3 \'a\'s transforming to 3 \'z\'s: 25 + 25 + 25 = 75 operations in total.","solution":"def min_operations(N, start, target): Returns the minimum number of operations needed to transform the start string into the target string. operations = 0 for s_char, t_char in zip(start, target): operations += abs(ord(s_char) - ord(t_char)) return operations"},{"question":"You have an array of integers and an integer k. You need to remove exactly k elements from the array so that the sum of the remaining elements is minimized. After removing k elements, print the sum of the remaining elements. Input The first line contains two integers n and k (1 ≤ k < n ≤ 10^5), where n is the size of the array and k is the number of elements to remove. The second line contains n integers separated by spaces, representing the elements of the array. Each integer in the array will be between 1 and 10^9. Output Print one integer, the sum of the remaining elements after exactly k elements have been removed in a way that the sum of the remaining elements is minimized. Examples Input 5 2 5 3 2 8 1 Output 13 Input 6 3 7 3 2 5 6 4 Output 18 Note For the first example, after removing elements 8 and 5, the remaining elements are [3, 2, 1], and their sum is 6. For the second example, after removing elements 7, 6, and 5, the remaining elements are [3, 2, 4], and their sum is 9.","solution":"def minimize_sum(n, k, arr): Returns the sum of the remaining elements after removing exactly k elements such that the sum of the remaining elements is minimized. Parameters: n (int): size of the array k (int): number of elements to remove arr (list): list of integers Returns: int: sum of the remaining elements # Sort the array in ascending order arr.sort() # Sum the first n-k elements to minimize the remaining sum return sum(arr[:n - k])"},{"question":"A tree is a connected acyclic graph. Rooting a tree at a node means choosing this node as the root and setting it as the parent of the other nodes. A subtree is any node in the tree along with its descendants. The value of a subtree is defined as the sum of the values of all its nodes. Given a tree with n nodes, where each node has a value assigned to it, you are required to perform two types of queries: 1. ( Q ) u - Report the value of the subtree rooted at node u. 2. ( U ) u x - Update the value of node u to x. Write a program to handle these two types of queries efficiently. Input The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of nodes in the tree. The second line contains n integers, the values assigned to each node (1-indexed). Each of the next n-1 lines contains two integers a and b (1 ≤ a, b ≤ n), denoting an edge between node a and node b. The next line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the next q lines contains a query in the form described above. Output For each query of type ( Q ) u, output the value of the subtree rooted at node u in a separate line. Example Input 5 1 2 3 4 5 1 2 2 3 2 4 4 5 4 Q 2 U 3 10 Q 3 Q 2 Output 14 10 21 Explanation Initially, the subtree rooted at node 2 includes nodes {2, 3, 4, 5} and has a total value of 2 + 3 + 4 + 5 = 14. After updating the value of node 3 to 10, the subtree value of node 3 becomes 10, and the subtree value of node 2 becomes 2 + 10 + 4 + 5 = 21.","solution":"from collections import defaultdict import sys import threading sys.setrecursionlimit(10**6) threading.stack_size(64*1024*1024) class Tree: def __init__(self, n, values): self.n = n self.values = values self.tree = defaultdict(list) self.subtree_sum = [0] * (n + 1) self.parent = [-1] * (n + 1) def add_edge(self, a, b): self.tree[a].append(b) self.tree[b].append(a) def dfs(self, node, par): self.parent[node] = par self.subtree_sum[node] = self.values[node - 1] for neighbor in self.tree[node]: if neighbor != par: self.dfs(neighbor, node) self.subtree_sum[node] += self.subtree_sum[neighbor] def query_subtree_sum(self, u): return self.subtree_sum[u] def update_value(self, u, x): diff = x - self.values[u - 1] self.values[u - 1] = x self._update_subtree_sum(u, diff) def _update_subtree_sum(self, node, diff): while node != -1: self.subtree_sum[node] += diff node = self.parent[node] def main(): input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 values = list(map(int, data[idx:idx + n])) idx += n tree = Tree(n, values) for _ in range(n - 1): a = int(data[idx]) b = int(data[idx + 1]) tree.add_edge(a, b) idx += 2 tree.dfs(1, -1) q = int(data[idx]) idx += 1 results = [] for _ in range(q): query = data[idx] u = int(data[idx + 1]) if query == \'Q\': results.append(tree.query_subtree_sum(u)) idx += 2 elif query == \'U\': x = int(data[idx + 2]) tree.update_value(u, x) idx += 3 sys.stdout.write(\'n\'.join(map(str, results)) + \'n\') threading.Thread(target=main).start()"},{"question":"A company wants to develop a scheduling system for its employees to better manage their work hours and assignments. The system should ensure that no employee is working on two tasks at the same time. Implement a program that verifies if the currently scheduled tasks for employees are valid. Each employee is assigned multiple tasks, each with a specific start and end time. Your job is to check whether any of these tasks overlap for any employee. Input The first line contains an integer T (1 ≤ T ≤ 100), which represents the number of test cases. Each test case begins with an integer N (1 ≤ N ≤ 10), the number of employees. For each employee, there is a line containing an integer M (1 ≤ M ≤ 20), which is the number of tasks for that employee, followed by M pairs of integers, each pair representing the start time `si` and end time `ei` of a task (0 ≤ si < ei ≤ 10000). Output For each test case, output \\"YES\\" if all the tasks are scheduled without any overlapping for every employee in the test case, otherwise \\"NO\\". Example Input 3 2 3 1 5 6 10 11 15 2 2 7 8 11 1 2 2 5 6 8 3 1 0 10 2 5 6 6 8 3 2 4 1 5 6 10 7 8 Output YES YES NO","solution":"def is_schedule_valid(test_cases): results = [] for case in test_cases: N = case[0] # number of employees index = 1 valid_case = True for _ in range(N): M = case[index] # number of tasks for employee index += 1 tasks = [] for _ in range(M): si = case[index] ei = case[index + 1] tasks.append((si, ei)) index += 2 # Sort tasks by start time tasks.sort() # Check for overlapping tasks for i in range(1, len(tasks)): if tasks[i][0] < tasks[i-1][1]: valid_case = False break if not valid_case: break results.append(\\"YES\\" if valid_case else \\"NO\\") return results"},{"question":"You are given a task to help simulate a traffic light system at a busy intersection. The intersection has four roads (North, East, South, and West), and each road has a corresponding traffic light. The traffic lights can be either green (\\"G\\") or red (\\"R\\") but can never be yellow. At any given time, the North-South traffic lights can be either both green or both red, and the East-West traffic lights can be the opposite color of the North-South traffic lights (i.e., if North-South is green, then East-West must be red and vice versa). Your goal is to determine the status of the traffic lights after a sequence of commands. Each command can either be \\"CHANGE\\" (to switch the light status) or \\"SHOW\\" (to output the current status of each light). Initially, the North-South lights are green (\\"G\\") and the East-West lights are red (\\"R\\"). Input The input begins with a single integer `n` (1 ≤ n ≤ 105), the number of commands. Each of the next `n` lines contains a command which is either \\"CHANGE\\" or \\"SHOW\\". Output For each \\"SHOW\\" command, output a single line containing four characters representing the status of the lights in the order: North, East, South, West. Examples Input 5 SHOW CHANGE SHOW CHANGE SHOW Output GRGR RGRG GRGR Input 4 SHOW CHANGE CHANGE SHOW Output GRGR GRGR Explanation In the first example, the sequence of states is as follows: - Initial state: North-South: \\"G\\", East-West: \\"R\\" - First \\"SHOW\\": Output \\"GRGR\\" - First \\"CHANGE\\": Switch the lights, North-South: \\"R\\", East-West: \\"G\\" - Second \\"SHOW\\": Output \\"RGRG\\" - Second \\"CHANGE\\": Switch the lights back, North-South: \\"G\\", East-West: \\"R\\" - Third \\"SHOW\\": Output \\"GRGR\\" In the second example: - Initial state: North-South: \\"G\\", East-West: \\"R\\" - First \\"SHOW\\": Output \\"GRGR\\" - First \\"CHANGE\\": Switch the lights, North-South: \\"R\\", East-West: \\"G\\" - Second \\"CHANGE\\": Switch the lights back, North-South: \\"G\\", East-West: \\"R\\" - Second \\"SHOW\\": Output \\"GRGR\\"","solution":"def traffic_lights(n, commands): Simulates the traffic lights system for `n` commands and returns the result of each \\"SHOW\\" command. Parameters: n (int): The number of commands. commands (list of str): List of commands where each command is either \\"CHANGE\\" or \\"SHOW\\". Returns: list of str: The result of each \\"SHOW\\" command in the format \\"NESW\\" # Initial state: North-South is Green and East-West is Red north_south = \\"G\\" east_west = \\"R\\" result = [] for command in commands: if command == \\"CHANGE\\": # Switch the lights if north_south == \\"G\\": north_south = \\"R\\" east_west = \\"G\\" else: north_south = \\"G\\" east_west = \\"R\\" elif command == \\"SHOW\\": # Append the current state to result result.append(north_south + east_west + north_south + east_west) return result"},{"question":"There is an ancient treasure cave guarded by a series of magical barriers. To gain access to the treasure, a key needs to be constructed by combining exactly k magical crystals from a collection. Each crystal has an associated power level, and the key\'s power level is the sum of the power levels of the chosen crystals. The entrance barrier can only be unlocked if the key\'s power level matches one of the predetermined magical codes. Your task is to determine whether it is possible to construct a key with a power level that matches any of the magical codes by selecting exactly k crystals from the given collection. Input The first line contains two integers n (2 ≤ n ≤ 30) and k (1 ≤ k ≤ n), where n represents the number of crystals in the collection and k represents the number of crystals that need to be combined to form the key. The second line contains n integers p1, p2, ..., pn, where pi represents the power level of the i-th crystal (1 ≤ pi ≤ 1000). The third line contains an integer m (1 ≤ m ≤ 50), followed by m integers c1, c2, ..., cm, where each ci represents a magical code (1 ≤ ci ≤ 10000). Output Print \\"YES\\" if it is possible to construct a key with a power level matching any of the magical codes, and \\"NO\\" otherwise. Examples Input 5 3 1 2 3 4 5 3 6 10 15 Output YES Input 4 2 4 5 6 7 2 20 30 Output NO Input 3 1 2 4 6 2 6 8 Output YES","solution":"from itertools import combinations def can_construct_key(n, k, crystals, m, magical_codes): Determine if it is possible to construct a key with a power level that matches any of the magical codes by selecting exactly k crystals from the given collection. :param n: Number of crystals :param k: Number of crystals to choose :param crystals: List of power levels of the crystals :param m: Number of magical codes :param magical_codes: List of magical codes :return: \\"YES\\" if possible, \\"NO\\" otherwise for comb in combinations(crystals, k): if sum(comb) in magical_codes: return \\"YES\\" return \\"NO\\" # Function for reading input and printing result def main(): n, k = map(int, input().strip().split()) crystals = list(map(int, input().strip().split())) m, *magical_codes = map(int, input().strip().split()) result = can_construct_key(n, k, crystals, m, magical_codes) print(result)"},{"question":"Nina loves gardening and has recently acquired a rectangular garden plot which can be represented as a grid with `m` rows and `n` columns. Her main hobby is planting flowers, and she plans to fill this garden with different types of flowers. She has a specific plan for which type of flower should be planted in each cell of the garden grid. Each type of flower is represented by an integer from 1 to `k` (where `k` is the number of different flower types). However, planting flowers is a tedious task, and Nina wants to get help from a robot gardener, which can plant flowers according to her plan. The robot gardener starts with all the flower types in its inventory but can only plant one type of flower at a time. The robot gardener can move to any of the four cardinal directions (up, down, left, right) from its current position. Nina can give the instructions to the robot gardener in a precise way such that the robot will visit each cell exactly once and plant the correct type of flower as per her plan. Nina needs your help to determine the minimum number of moves the robot gardener has to make to plant all the flowers in the desired arrangement. Input The first line of the input contains three space-separated integers `m`, `n`, and `k` (1 ≤ m, n ≤ 50, 1 ≤ k ≤ 50) representing the number of rows, the number of columns, and the number of different flower types, respectively. The next `m` lines contain `n` space-separated integers each between 1 and `k` inclusive, representing Nina\'s desired plan of the garden plot. Each integer represents the type of flower that should be planted in that cell. Output On the first line, print `t`, the minimum number of moves the robot gardener has to make to plant all the flowers. Examples Input 3 3 3 1 2 3 3 2 1 1 3 2 Output 8 Input 2 2 4 1 2 3 4 Output 3 Explanation In the first example, the grid is 3x3, and the robot needs to make 8 moves to plant all the flowers in the desired arrangement, assuming an efficient path is chosen. In the second example, the grid is 2x2, and the robot needs to make 3 moves to plant all the flowers in the desired arrangement, again assuming an efficient path is chosen.","solution":"def min_moves_to_plant_garden(m, n, k, garden_plan): Returns the minimum number of moves the robot gardener has to make to plant all the flowers as per the provided garden plan. Parameters: m (int): Number of rows of the garden. n (int): Number of columns of the garden. k (int): Number of different flower types. garden_plan (list of list of int): Desired plan of the garden plot. Returns: int: Minimum number of moves to plant all flowers. # Starting position of the robot is at the top-left corner (0,0) current_position = (0, 0) moves = 0 for row in range(m): if row % 2 == 0: # Move right across the row for col in range(n): if current_position != (row, col): moves += 1 current_position = (row, col) else: # Move left across the row for col in range(n-1, -1, -1): if current_position != (row, col): moves += 1 current_position = (row, col) return moves # Note: Further optimization based on different traversal patterns could be explored if needed, # but the basic alternating row traversal strategy here ensures minimal moves while covering all cells exactly once."},{"question":"You are tasked with developing a scheduling algorithm for the management of a sequence of meetings in a conference room. Each meeting is specified by a start time and an end time. The goal is to maximize the number of non-overlapping meetings that can be accommodated in the conference room. Write a function that, given a list of meetings where each meeting is represented as a tuple (start_time, end_time), returns the maximum number of non-overlapping meetings that can be scheduled in the conference room. The start times and end times are given in a 24-hour format (e.g., 9 for 9:00 AM and 14 for 2:00 PM). Each meeting starts at the beginning of the start time and finishes just before the end time. Thus, a meeting starting at time `1` and ending at time `2` can be followed by another meeting starting at time `2`. Input The input consists of: - An integer n (0 ≤ n ≤ 50), the number of meetings. - A list of n tuples (start_time, end_time), where (0 ≤ start_time < end_time ≤ 24). Output Return the maximum number of non-overlapping meetings that can be scheduled. Examples Input 4 [(1, 3), (2, 4), (3, 5), (7, 8)] Output 3 Input 6 [(0, 1), (2, 4), (3, 5), (3, 6), (7, 8), (9, 11)] Output 4 Note In the first sample, the schedule of meetings can be as follows: * Meet 1: (1, 3) * Meet 3: (3, 5) * Meet 4: (7, 8) Thus, three meetings can be scheduled without overlapping. In the second sample, the possible schedule of maximum non-overlapping meetings can be: * Meet 1: (0, 1) * Meet 2: (2, 4) * Meet 4: (7, 8) * Meet 6: (9, 11) Thus, four meetings can be scheduled without overlapping.","solution":"def max_non_overlapping_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be scheduled. if n == 0: return 0 # Sort meetings based on their end times meetings.sort(key=lambda x: x[1]) max_meetings = 0 last_end_time = -1 for start, end in meetings: if start >= last_end_time: max_meetings += 1 last_end_time = end return max_meetings"},{"question":"Given is a positive integer n. Your task is to find a permutation of numbers from 1 to n that maximizes the sum of the minimum adjacent differences in the permutation. Constraints * 1 ≤ n ≤ 1000 * n is an integer. Input Input is given from Standard Input in the following format: n Output Print a permutation of numbers from 1 to n that maximizes the sum of the minimum adjacent differences in the permutation. Examples Input 4 Output 1 3 2 4 Input 5 Output 1 3 5 2 4","solution":"def max_adjacent_diff_permutation(n): Returns a permutation of numbers from 1 to n that maximizes the sum of the minimum adjacent differences in the permutation. # Create two lists, one with odd numbers and one with even numbers odd_numbers = list(range(1, n + 1, 2)) even_numbers = list(range(2, n + 1, 2)) # Combine the odd and even lists return odd_numbers + even_numbers"},{"question":"During a supply distribution run, an automatic delivery drone must pass over several delivery points arranged in a straight line. Each delivery point on the line is associated with a certain amount of supply packages the drone has to distribute. The drone has a capacity limit of `C` packages, and it can only carry up to this many packages at one time. The drone can start distribution from any delivery point, but once it starts, it only moves forward and cannot go back to any previous points. Your task is to determine the minimum number of trips the drone needs to make to deliver all supplies from the starting delivery point (inclusive) to the last delivery point of the segment it covers in any given trip. Each trip is defined as starting from some delivery point and ending at one of the later delivery points (including the starting point), delivering all packages in that segment before returning to reload. Input: - The first line contains integer `n` (1 ≤ n ≤ 100,000), the number of delivery points. - The second line contains integer `C` (1 ≤ C ≤ 10^9), the capacity limit of the drone. - The third line contains `n` integers, the array `s`, where `s[i]` (1 ≤ s[i] ≤ 10^6) represents the number of packages at the `i-th` delivery point. Output: - A single line containing the minimum number of trips required to deliver all packages. Example: Input: 6 10 4 8 3 6 2 13 Output: 4 Explanation: - The drone can deliver packages as follows: - Trip 1: Delivers from point 1 to point 2 (4+8 = 12 packages, reloading once since it exceeds capacity in one go) - Trip 2: Delivers from point 3 to point 4 (3+6 = 9 packages in one trip) - Trip 3: Delivers from point 5 (2 packages in one trip) - Trip 4: Delivers from point 6 (repeating a trip since 13 exceeds capacity but multiple trips are counted as one in terms of segments)","solution":"def min_trips(n, C, s): trips = 0 remaining_capacity = C for supply in s: if supply > C: trips += 1 remaining_capacity = C elif supply > remaining_capacity: trips += 1 remaining_capacity = C - supply else: remaining_capacity -= supply # Increment one final trip if there are packages left in current capacity if remaining_capacity < C: trips += 1 return trips"},{"question":"A company organizes a programming event where participants are provided with energy drinks. Each participant can drink multiple cans of beverages until they are satisfied. You are provided with the preferences of each participant in the form of a list of numbers where the i-th element represents the count of drinks the i-th participant prefers. The task is to calculate the maximum number of participants that can be fully satisfied using a limited number of energy drinks. You are given a list of m test cases. For each test case, you are provided with the available number of energy drinks and the list of preferences. Determine the maximum number of participants that can get exactly the number of drinks they prefer. Input: The first line contains one integer m (1 ≤ m ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 100000) — the number of participants and the number of available energy drinks. The second line contains n integers, each representing the number of drinks each participant prefers. Output: For each test case, print one integer — the maximum number of participants that can be fully satisfied. Example: Input: 4 5 10 3 1 7 5 2 4 8 4 2 3 3 6 15 5 5 5 5 5 5 3 5 2 2 2 Output: 3 3 3 2","solution":"def max_satisfied_participants(test_cases): results = [] for n, d, preferences in test_cases: preferences.sort() # Sort preferences to satisfy participants with smaller demands first count = 0 for preference in preferences: if d >= preference: d -= preference count += 1 else: break results.append(count) return results"},{"question":"You are given a 2D grid of dimensions m x n that represents a map. Each cell can be empty (represented by a \'.\') or blocked (represented by a \'#\'). You need to determine the number of distinct islands in the map. An island is defined as a group of connected empty cells (\'#\') where connectivity is only vertical or horizontal (not diagonal). Two islands are considered distinct if they are not connected by any sequence of adjacent cells horizontally or vertically. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100) — the dimensions of the grid. The next m lines contain n characters each representing the grid. Output For each test case, output a single line containing an integer — the number of distinct islands in the map. Example Input 2 4 5 .#... ..#.. ...#. .#. 4 4 .... .... Output 3 2 Note In the first test case: - The first island is the cell at (1, 1). - The second island is the cell at (2, 2). - The third island consists of the cells (3, 3), (4, 2), (4, 3), (4, 4), which are connected. In the second test case: - The first island consists of cells in the first row. - The second island consists of cells in the third row.","solution":"def count_islands(grid, m, n): visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] stack = [(x, y)] visited[x][y] = True while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'#\': visited[nx][ny] = True stack.append((nx, ny)) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'#\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def distinct_islands(test_cases): results = [] for m, n, grid in test_cases: results.append(count_islands(grid, m, n)) return results"},{"question":"Given a sequence of `n` integers and a series of queries, determine the greatest common divisor (GCD) of the minimum integer within a specified range in the sequence and a given integer `k`. Each query specifies a range of the sequence and an integer `k`. The task is to find the minimum integer within the range and compute the GCD of this minimum integer and `k`. # Input The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 10^6), the length of the sequence. - The second line contains `n` space-separated integers representing the sequence, where each integer `a_i` (1 ≤ a_i ≤ 10^6). - The third line contains an integer `q` (1 ≤ q ≤ 10^5), the number of queries. - The next `q` lines contain three integers `l`, `r`, and `k` (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^6), representing the range `[l, r]` (inclusive) and the integer `k`. # Output For each query, output the GCD of the minimum integer in the specified range and `k` on a new line. # Examples Input ```plaintext 5 2 6 4 8 10 3 1 3 6 2 5 3 1 5 10 ``` Output ```plaintext 2 1 2 ``` # Explanation In the first query, the range `[1, 3]` of the sequence is `2 6 4`. The minimum integer is `2`, and the GCD of `2` and `6` is `2`. In the second query, the range `[2, 5]` of the sequence is `6 4 8 10`. The minimum integer is `4`, and the GCD of `4` and `3` is `1`. In the third query, the entire sequence `[1, 5]` is `2 6 4 8 10`. The minimum integer is `2`, and the GCD of `2` and `10` is `2`.","solution":"import math def gcd(a, b): while b: a, b = b, a % b return a def minimum_in_range(arr, l, r): return min(arr[l-1:r]) def process_queries(n, sequence, q, queries): results = [] for l, r, k in queries: min_in_range = minimum_in_range(sequence, l, r) results.append(gcd(min_in_range, k)) return results"},{"question":"Two friends, Alice and Bob, are playing a game where they take turns picking marbles from a bag. The bag is represented by a list of integers `bag`, where each integer corresponds to the number of marbles of a certain type. Alice always takes marbles first. Each turn, a player can take any number of marbles from the bag of a single type. The player who cannot make a move loses the game. Your task is to write a program that determines whether Alice will win given the initial configuration of the bag. Input: The first line contains an integer `T`, the number of test cases. For each test case, the first line contains an integer `N`, the number of different types of marbles. The second line contains `N` space-separated integers representing the array `bag`. Output: For each test case, print \\"Alice\\" if Alice will win, otherwise print \\"Bob\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 0 ≤ bag[i] ≤ 1000 Example: Input: 3 3 1 0 3 2 2 2 1 0 Output: Alice Alice Bob Explanation: Test Case 1: - Initial state: [1, 0, 3] - Alice can take 1 marble from the first type, leaving [0, 0, 3], or any number from the third type, leaving [1, 0, x] where 1 ≤ x ≤ 2. - It\'s clear that Alice has a winning strategy because she can always make a move that keeps Bob from winning right away. Test Case 2: - Initial state: [2, 2] - Alice can take all marbles of one type, forcing Bob to take the remaining marbles, hence Alice wins. Test Case 3: - Initial state: [0] - Alice cannot make a move, thus Bob wins.","solution":"def determine_winner(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] bag = test_cases[i][1] # If all the marbles are zero, Alice can\'t make any move if all(marbles == 0 for marbles in bag): results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"Alex loves playing with sequences of numbers. One day, he came across a special type of sequence called a \\"Zigzag sequence\\" and decided to create an algorithm to determine if a given sequence has a zigzag pattern. A sequence of numbers is called a zigzag sequence if the differences between consecutive numbers strictly alternate between positive and negative. For example, the sequence [1, 3, 2, 4] has differences [2, -1, 2], which alternates between positive and negative. On the other hand, the sequence [4, 5, 2, 1] has differences [1, -3, -1], which does not alternate strictly. Your task is to help Alex write a function to check if a given sequence is a zigzag sequence. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer n (2 ≤ n ≤ 1000) — the length of the sequence, followed by n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) representing the sequence. Output For each test case, print \\"YES\\" if the sequence is a zigzag sequence, or \\"NO\\" otherwise. Examples Input 3 4 1 3 2 4 4 4 5 2 1 3 1 2 1 Output YES NO YES Note In the first test case, the sequence [1, 3, 2, 4] has differences [2, -1, 2], which strictly alternate between positive and negative. In the second test case, the sequence [4, 5, 2, 1] has differences [1, -3, -1], where the differences between the consecutive numbers do not strictly alternate. In the third test case, the sequence [1, 2, 1] has differences [1, -1], which strictly alternate.","solution":"def is_zigzag_sequence(sequence): Returns \\"YES\\" if the given sequence is a zigzag sequence, \\"NO\\" otherwise. n = len(sequence) if n < 2: return \\"NO\\" # A zigzag sequence must have at least two elements differences = [sequence[i] - sequence[i-1] for i in range(1, n)] for i in range(1, len(differences)): if differences[i] * differences[i-1] >= 0: return \\"NO\\" return \\"YES\\" def check_zigzag_sequences(test_cases): results = [] for case in test_cases: _, sequence = case results.append(is_zigzag_sequence(sequence)) return results"},{"question":"Consider a grid of size NxN. You are standing at the top-left corner of the grid and you want to reach the bottom-right corner. You can move either down or to the right at any point in time. The grid contains cells which are either walkable (denoted by a 0) or blocked (denoted by a 1). Write a function to count the number of possible unique paths from the top-left corner to the bottom-right corner of the grid. Two paths are considered the same if they visit the exact same cells in the exact same order. Example: Given grid: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Input First line contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer N, denoting the size of the grid. The next N lines each contain N integers (either 0 or 1), representing the grid. Output For each test case, output the number of unique paths to reach the bottom-right corner. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10 grid[i][j] ∈ {0, 1} SAMPLE INPUT 1 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 2","solution":"def count_unique_paths(grid): N = len(grid) if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 dp = [[0]*N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def unique_paths_from_top_left(T, grids): results = [] for grid in grids: results.append(count_unique_paths(grid)) return results"},{"question":"A retail shop wants to optimize the arrangement of products on its shelves to maximize customer satisfaction. They want to ensure that the products are arranged in such a way that the stock of each product is distributed evenly across multiple shelves. Each product should be arranged in such a manner that no two adjacent shelves have the same product placed on them at the same position. Given the number of products \'P\', the number of shelves \'S\', and the list of product names \'products\', arrange the products to satisfy these conditions. Input: - The first line contains a single integer T, the number of test cases. For each test case: - The first line contains two integers P (number of products) and S (number of shelves). - The second line contains P space-separated product names. Output: For each test case, print \\"YES\\" if it is possible to arrange the products as required. Otherwise, print \\"NO\\". Example: Input: 3 3 2 apple orange banana 4 3 apple orange banana grape 3 4 apple orange banana Output: YES NO YES Explanation: 1. For the first test case, products can be arranged as: apple orange apple orange ... 2. For the second test case, it is not possible to arrange the products without some shelves having the same product at the same position. 3. For the third test case, products can be arranged as: apple orange banana apple ... Constraints: 1 ≤ T ≤ 10^4 1 ≤ P, S ≤ 100 Products consist of lowercase English letters only.","solution":"def can_arrange_products(P, S, products): if P > S: # If there are more products than shelves, it is impossible to evenly distribute without repetition in positions return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for i in range(T): P, S, products = test_cases[i] results.append(can_arrange_products(P, S, products)) return results"},{"question":"Yasmin has a set of n unique integers and she wants to organize them into a special sequence. The rules for arranging the sequence are: - Each integer must appear exactly once. - The sequence should be constructed in such a way that no two consecutive integers have the same parity (i.e., one is odd and the other is even). Your task is to help Yasmin determine if it is possible to create such a sequence given the set and, if possible, print one valid sequence. If constructing such a sequence is not possible, output \\"No\\". Input The first line contains one integer n (1 ≤ n ≤ 100). The second line contains n unique integers separated by spaces. Output If it is possible to arrange the integers such that no two consecutive integers have the same parity, output \\"Yes\\" on the first line followed by a valid sequence on the second line. If it is not possible, output \\"No\\". Examples Input 5 1 2 3 4 5 Output Yes 1 2 3 4 5 Input 4 2 4 6 8 Output No Input 3 1 2 3 Output Yes 1 2 3","solution":"def organize_sequence(n, integers): Determine if it\'s possible to arrange the integers such that no two consecutive integers have the same parity. If possible, output \\"Yes\\" followed by a valid sequence. If not, output \\"No\\". odds = [num for num in integers if num % 2 != 0] evens = [num for num in integers if num % 2 == 0] if abs(len(odds) - len(evens)) > 1: return \\"No\\" sequence = [] if len(odds) > len(evens): for i in range(len(evens)): sequence.append(odds[i]) sequence.append(evens[i]) sequence.append(odds[-1]) else: for i in range(len(odds)): sequence.append(evens[i]) sequence.append(odds[i]) if len(evens) > len(odds): sequence.append(evens[-1]) return \\"Yes\\", sequence"},{"question":"Build a program that reads a list of commands representing movements on a two-dimensional grid and determines the final coordinates after executing all the commands. The commands will consist of \\"MOVE x y\\" to shift the current position by x units in the horizontal direction and y units in the vertical direction, and \\"RESET\\" to return to the origin (0,0). Input The input consists of multiple datasets. Each dataset starts with an integer n, the number of commands, followed by n lines containing commands. The input ends with a line consisting of a single 0. Commands can be: - \\"MOVE x y\\" where x and y are integers representing the changes in the horizontal and vertical coordinates respectively. - \\"RESET\\" which sets the current position back to (0, 0). Output For each dataset, print the final coordinates in a single line in the format \\"(x, y)\\". Example Input 3 MOVE 5 3 MOVE -2 4 RESET 4 MOVE 1 1 MOVE -1 -1 MOVE 3 3 MOVE -3 -3 0 Output (0, 0) (0, 0)","solution":"def process_commands(input_data): index = 0 results = [] while index < len(input_data): n = int(input_data[index]) # Number of commands in the current dataset if n == 0: break current_position = [0, 0] for i in range(1, n + 1): command = input_data[index + i] if command.startswith(\'MOVE\'): _, x, y = command.split() x, y = int(x), int(y) current_position[0] += x current_position[1] += y elif command == \'RESET\': current_position = [0, 0] results.append(f\\"({current_position[0]}, {current_position[1]})\\") index += n + 1 return results"},{"question":"You are organizing a programming contest and need to rank the participants based on their scores. The ranking is determined by multiple tasks, and each participant receives a score for each task. The final ranking is determined by the sum of the scores. If two participants have the same total score, they should be ranked based on their initial order (i.e., the participant who appears first in the input list should be ranked higher in case of a tie). Write a function that takes the number of participants N, the number of tasks T, and a list of scores, and returns the ranking of the participants. Input The first line of input contains two integers N (1 ≤ N ≤ 100) and T (1 ≤ T ≤ 10). The next N lines each contain T integers, representing the scores of the participants for each task. Output Output N lines. Each line should contain the 1-based index of a participant in the order of their ranking. Examples Input 3 2 10 20 30 40 15 25 Output 2 3 1 Input 4 3 8 9 7 6 5 7 8 7 5 9 9 9 Output 4 1 3 2","solution":"def rank_participants(N, T, scores): Ranks participants based on their scores across multiple tasks. Parameters: - N: int, number of participants. - T: int, number of tasks. - scores: list of lists with size N x T, where each sublist contains scores for each task. Returns: - list of int, ranking of the participants (1-based index). # Compute total scores for each participant and store as a tuple with original index totals_with_indices = [(sum(scores[i]), i) for i in range(N)] # Sort the participants by total score in descending order, if tied keep original order sorted_totals = sorted(totals_with_indices, key=lambda x: x[0], reverse=True) # Extract the ranked indices and convert them to 1-based. ranking = [index + 1 for _, index in sorted_totals] return ranking"},{"question":"The International Space Station (ISS) sends sensor data readings to ground control. Each dataset consists of n sequences of integers that represent readings from n different sensors over a period of m seconds. For each sensor, the readings at each second are ordered sequentially, meaning the reading at index 1 is the first reading, index 2 is the second reading, and so on. However, due to a transmission error, some of the readings might be missing or jumbled. To assess the integrity of each sensor\'s data, the ground control team wants to calculate the longest consecutive segment of valid readings (non-missing data) for each sensor. If there\'s a tie, the segment that starts at the lowest index should be considered. Your task is to write a function that takes the sensor readings and calculates the longest consecutive segment for each sensor. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of sensors and the number of readings per sensor. Each of the next n lines contains m integers. If a reading is missing, it is represented by -1. Output The output should consist of n lines, each containing two integers. The first integer is the starting index of the longest consecutive segment of valid readings for the corresponding sensor, and the second integer is the length of that segment. If there are multiple segments with the same length, choose the one that starts at the earliest index. Examples Input 3 5 1 2 -1 4 5 -1 2 3 -1 -1 6 7 8 -1 10 Output 1 2 2 2 1 3 Input 2 4 1 2 3 4 -1 -1 -1 -1 Output 1 4 1 0 Note In the first example, for the first sensor, the longest consecutive segment starts at index 1 and has a length of 2. For the second sensor, there are two segments of length 2 starting at indexes 2 and 3, but we output the one starting at index 2 since it comes earlier. For the third sensor, the longest segment of valid readings starts at index 1 and has a length of 3. In the second example, the first sensor has all valid readings from index 1 to 4, inclusive. For the second sensor, all readings are missing, thus the longest segment of valid readings is 0 and it starts at index 1.","solution":"def longest_valid_segment(n, m, sensor_data): Determine the longest consecutive segment of valid readings for each sensor. Args: n: int - number of sensors m: int - number of readings per sensor sensor_data: list of list of int - the sensor readings Returns: list of tuple: each tuple contains two integers - the starting index (1-based) and the length of the longest valid segment results = [] for readings in sensor_data: max_length = 0 start_index = 0 current_start = 0 current_length = 0 for i in range(m): if readings[i] != -1: if current_length == 0: current_start = i + 1 current_length += 1 else: if current_length > max_length: max_length = current_length start_index = current_start current_length = 0 if current_length > max_length: max_length = current_length start_index = current_start if max_length == 0: start_index = 1 # If all values are -1, the starting index should be 1 results.append((start_index, max_length)) return results"},{"question":"Mahesh is passionate about enhancing the efficiency of public transportation in his city. He has been observing the bus arrival times at a particular bus stop for the past n days. Due to varying traffic conditions, the arrival times show some variability. Mahesh noted the bus arrival times each day and wants to determine the longest subarray of consecutive days where the arrival times are strictly increasing or strictly decreasing. He needs to know the length of this subarray to analyze patterns in the bus schedule. For a given sequence of arrival times t1, t2, ..., tn, your task is to identify the length of the longest contiguous subarray where the bus arrival times either continuously increase or continuously decrease. Input The first line contains a single integer n (2 ≤ n ≤ 105) — the number of days for which Mahesh has been recording the bus arrival times. The second line contains a sequence of n integers t1, t2, ..., tn (|ti| ≤ 109) — the sequence of bus arrival times. Numbers ti are separated by single spaces. Output Print a single integer — the length of the longest contiguous subarray where the bus arrival times are either strictly increasing or strictly decreasing. Examples Input 6 1 2 3 1 2 3 Output 3 Input 8 5 4 3 2 1 3 4 5 Output 5 Note Note to the first sample: the longest subarray with strictly increasing or decreasing bus arrival times is either [1, 2, 3] or [2, 3, 1]. Both have a length of 3. Note to the second sample: the longest subarray with strictly increasing or decreasing bus arrival times is [5, 4, 3, 2, 1], which has a length of 5.","solution":"def longest_subarray_length(arrival_times): Returns the length of the longest contiguous subarray where the bus arrival times are either strictly increasing or strictly decreasing. n = len(arrival_times) if n < 2: return n longest = 1 current_length = 1 increasing = None # We begin without assuming increasing or decreasing for i in range(1, n): if arrival_times[i] > arrival_times[i - 1]: if increasing == False: current_length = 1 increasing = True current_length += 1 elif arrival_times[i] < arrival_times[i - 1]: if increasing == True: current_length = 1 increasing = False current_length += 1 else: current_length = 1 increasing = None longest = max(longest, current_length) return longest"},{"question":"A scientist is conducting an experiment where she needs to mix different solutions carefully. She has n different solutions, each with a specific concentration index. Each concentration index is a positive integer. She wants to find out the maximum number of unique pairs of solutions she can create where the difference in their concentration indices is less than or equal to a given integer k. Your task is to write a program that takes multiple test cases and for each test case, determines the maximum number of unique pairs of solutions that meet the criteria. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2 * t lines contain the details for each test case: - The first line of each test case contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of solutions and the maximum allowed difference in concentration indices. - The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the concentration indices of the solutions. Output For each test case, print a single integer — the maximum number of unique pairs that can be formed such that the difference in their concentration indices is less than or equal to k. Example Input 3 5 2 1 5 3 4 2 4 1 1 2 3 4 6 3 8 1 6 3 2 5 Output 4 3 5 Note In the first test case, the pairs satisfying the condition are (1, 2), (3, 4), (3, 2), (4, 2). In the second test case, the pairs satisfying the condition are (1, 2), (2, 3), (3, 4). In the third test case, the pairs satisfying the condition are (1, 2), (1, 3), (1, 3), (3, 2), (2, 5).","solution":"def max_unique_pairs(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] a.sort() count = 0 left = 0 right = 1 while right < n: if a[right] - a[left] <= k: count += 1 left += 1 right += 1 else: right += 1 results.append(count) return results"},{"question":"**Problem:** In a game of sudoku, you are given a partially filled 9x9 grid where some of the entries are missing and denoted by 0. The goal is to fill the missing entries in such a way that each row, each column, and each of the nine 3x3 subgrids contain all the digits from 1 to 9 exactly once. Write a function that checks whether a given partially filled grid could potentially be solved into a valid sudoku board. Your function should return \'Yes\' if the board could be validly completed, and \'No\' otherwise. Input: The first line contains an integer T, the number of test cases. Each test case consists of a 9x9 grid (with 9 lines of 9 integers each). Output: For each test case, print a single line \'Yes\' if the sudoku board could potentially be validly completed, and \'No\' otherwise. Constraints: 1 ≤ T ≤ 10 Each element of the grid is either an integer between 1 and 9 or 0. Sample Input 2 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 1 1 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Sample Output Yes No","solution":"def is_valid_sudoku_board(board): def is_valid_block(block): nums = [num for num in block if num != 0] return len(nums) == len(set(nums)) def get_block(board, start_row, start_col): block = [] for i in range(3): for j in range(3): block.append(board[start_row + i][start_col + j]) return block for i in range(9): if not is_valid_block(board[i]): # Check row return \'No\' column = [board[j][i] for j in range(9)] if not is_valid_block(column): # Check column return \'No\' for i in range(0, 9, 3): for j in range(0, 9, 3): block = get_block(board, i, j) if not is_valid_block(block): # Check 3x3 subgrid return \'No\' return \'Yes\' def sudoku_possible(T, test_cases): results = [] for board in test_cases: results.append(is_valid_sudoku_board(board)) return results"},{"question":"Given a string S and an integer K, determine whether there exists any substring of S whose characters can be rearranged to form a palindrome. Print \\"YES\\" if such a substring exists, otherwise print \\"NO\\". A substring is defined as a contiguous sequence of characters within a string. A string can be rearranged to form a palindrome if the number of characters with odd frequency is at most 1. Constraints: * S is a string of length between 1 and 100 (inclusive). * S consists of lowercase English letters. * 1 <= K <= len(S) Input Input is given from Standard Input in the following format: S K Output Print \\"YES\\" or \\"NO\\" based on the stated conditions. Examples Input abccbaabc 3 Output YES Input abcdef 6 Output NO Input aabbcc 4 Output YES","solution":"def can_form_palindrome(S, K): Determine if any substring of length K in S can be rearranged to form a palindrome. Parameters: S (str): The input string. K (int): The length of the substring. Returns: str: \\"YES\\" if such a substring exists, otherwise \\"NO\\". def can_rearrange_to_palindrome(s): char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 for i in range(len(S) - K + 1): if can_rearrange_to_palindrome(S[i:i+K]): return \\"YES\\" return \\"NO\\""},{"question":"You are given a rectangular garden which has a length L and a width W. You want to install a square pond at the center of the garden. The pond should be as large as possible, but the sides of the pond should be parallel to the sides of the garden. Determine the side length of the largest possible square pond you can install. Constraints * 1 leq L leq 1000 * 1 leq W leq 1000 * L and W are integers. Input Input is given from Standard Input in the following format: L W Output Print the side length of the largest possible square pond you can install. Examples Input 15 10 Output 10 Input 12 12 Output 12 Input 8 20 Output 8","solution":"def largest_square_pond_side_length(L, W): Determines the side length of the largest possible square pond that can be installed in a rectangular garden with given length L and width W Args: L(int): Length of the garden W(int): Width of the garden Returns: int: Side length of the largest possible square pond return min(L, W)"},{"question":"A publishing house is developing a new system to manage book reservations. Each time a new reservation is made, the user logs in with a chosen username and the title of the book they want to reserve. If the book is available, the system reserves it under the user\'s name and confirms the reservation. If the book is already reserved by someone else, the system will not allow the reservation and informs the user about its unavailability. Your task is to implement the reservation system which processes a series of reservation requests and determines whether each request is successful or not. Input The first line contains an integer n (1 ≤ n ≤ 105) representing the number of reservation requests. Each of the next n lines contains a username and a book title separated by a space. Usernames and book titles contain only lowercase Latin letters and are not longer than 32 characters. Output Print n lines. For each reservation request, print \\"Reserved\\" if the reservation is successful, otherwise print \\"Unavailable\\". Example Input 5 alice harrypotter bob lordoftherings alice lordoftherings charlie harrypotter david harrypotter Output Reserved Reserved Reserved Unavailable Unavailable","solution":"def book_reservation_system(n, reservations): reserved_books = {} result = [] for reservation in reservations: username, book_title = reservation.split() if book_title not in reserved_books: reserved_books[book_title] = username result.append(\\"Reserved\\") else: result.append(\\"Unavailable\\") return result"},{"question":"Design a program to perform a series of operations on a 2D matrix of integers. You are given an n x m matrix. You need to support three types of operations: 1. Update the value at a specific position. 2. Calculate the sum of all values in a submatrix. 3. Calculate the maximum value in a submatrix. Constraints * 1 ≤ n, m ≤ 500 * -1,000,000 ≤ matrix[i][j] ≤ 1,000,000 * 1 ≤ number of operations ≤ 50,000 Input n m matrix[0][0] matrix[0][1] ... matrix[0][m-1] matrix[1][0] matrix[1][1] ... matrix[1][m-1] ... matrix[n-1][0] matrix[n-1][1] ... matrix[n-1][m-1] number_of_operations operation_type x1 y1 [x2 y2] * First, two integers n and m representing the dimensions of the matrix. * Next, n lines each containing m integers representing the initial matrix values. * Next, an integer representing the number of operations. * For each operation, first an integer representing the type (1 for update, 2 for sum, 3 for maximum), followed by the coordinates for the operation. Update operations will have four integers, sum and maximum operations will have six integers. Output For each \\"sum\\" and \\"maximum\\" operation, output a single integer per line. If an operation is invalid, output \\"Invalid Operation\\". Example Input 3 3 2 3 1 0 6 7 5 8 9 5 1 0 0 10 2 0 0 2 2 3 0 0 2 2 1 1 1 -1 2 1 1 2 2 Output 53 10 15","solution":"class MatrixOperations: def __init__(self, matrix): self.matrix = matrix self.n = len(matrix) self.m = len(matrix[0]) if self.n > 0 else 0 def update(self, x, y, value): if 0 <= x < self.n and 0 <= y < self.m: self.matrix[x][y] = value else: return \\"Invalid Operation\\" def sum_submatrix(self, x1, y1, x2, y2): if not (0 <= x1 <= x2 < self.n and 0 <= y1 <= y2 < self.m): return \\"Invalid Operation\\" total_sum = 0 for i in range(x1, x2+1): for j in range(y1, y2+1): total_sum += self.matrix[i][j] return total_sum def max_submatrix(self, x1, y1, x2, y2): if not (0 <= x1 <= x2 < self.n and 0 <= y1 <= y2 < self.m): return \\"Invalid Operation\\" max_val = float(\'-inf\') for i in range(x1, x2+1): for j in range(y1, y2+1): if self.matrix[i][j] > max_val: max_val = self.matrix[i][j] return max_val"},{"question":"You are given a sequence of integers, and a list of queries. For each query, you need to determine the number of integers in the subsequence defined by given indices that are divisible by a given integer. Each query provides three integers: start_index, end_index, and divisor. The subsequence includes all integers from start_index to end_index, inclusive. Constraints - 1 ≤ length of the sequence ≤ 10^5 - 1 ≤ each integer in the sequence ≤ 10^5 - 1 ≤ number of queries ≤ 10^5 - 1 ≤ start_index ≤ end_index ≤ length of the sequence - 1 ≤ divisor ≤ 10^5 Input The input consists of: 1. A single integer n, the length of the sequence. 2. n space-separated integers, representing the sequence. 3. A single integer q, the number of queries. 4. q lines, each containing three space-separated integers, representing the start_index, end_index, and divisor for each query. Output Print q lines. The i-th line (1 ≤ i ≤ q) should contain the response to the i-th query. Example Input 6 5 10 15 20 25 30 4 1 3 5 2 6 5 1 6 10 3 5 5 Output 1 5 3 3 Explanation For the first query (1, 3, 5): - The subsequence is [5, 10, 15]. - The only integer divisible by 5 from 1 to 3 is 5. - Thus, the count is 1. For the second query (2, 6, 5): - The subsequence is [10, 15, 20, 25, 30]. - The integers divisible by 5 in this range are 10, 15, 20, 25, and 30. - Thus, the count is 5. For the third query (1, 6, 10): - The subsequence is [5, 10, 15, 20, 25, 30]. - The integers divisible by 10 in this range are 10, 20, and 30. - Thus, the count is 3. For the fourth query (3, 5, 5): - The subsequence is [15, 20, 25]. - The integers divisible by 5 in this range are 15, 20, and 25. - Thus, the count is 3.","solution":"def count_divisibles(sequence, queries): Returns the counts of numbers divisible by a given integer for a list of queries. Args: sequence: List of integers. queries: List of tuples (start_index, end_index, divisor) Returns: List of integers representing the count for each query. counts = [] for start_index, end_index, divisor in queries: count = sum(1 for i in range(start_index-1, end_index) if sequence[i] % divisor == 0) counts.append(count) return counts"},{"question":"You are given an undirected graph. The graph can have multiple connected components. Your task is to perform the following operations on the graph: * 1 u v — add an edge between vertices u and v (1 ≤ u, v ≤ n). * 2 u v — remove the edge between vertices u and v if it exists (1 ≤ u, v ≤ n). * 3 u v — check if there exists a path between vertices u and v. Output \\"Yes\\" if there exists a path, otherwise output \\"No\\" (1 ≤ u, v ≤ n). Input The first line contains two integers n and q — the number of vertices in the graph and the number of queries, respectively (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000). Each of the next q lines contains a query in one of the formats described above. Output For each query of the third type, output the answer on a new line. Examples Input 5 5 1 1 2 1 2 3 3 1 3 2 2 3 3 1 3 Output Yes No Input 4 4 1 1 2 2 1 2 3 1 2 1 3 4 Output No","solution":"class Graph: def __init__(self, n): self.graph = {i: set() for i in range(1, n + 1)} def add_edge(self, u, v): self.graph[u].add(v) self.graph[v].add(u) def remove_edge(self, u, v): self.graph[u].discard(v) self.graph[v].discard(u) def dfs(self, u, v, visited): if u == v: return True visited.add(u) for neighbor in self.graph[u]: if neighbor not in visited: if self.dfs(neighbor, v, visited): return True return False def check_path(self, u, v): return self.dfs(u, v, set()) def process_queries(n, queries): graph = Graph(n) results = [] for query in queries: type, u, v = query if type == 1: graph.add_edge(u, v) elif type == 2: graph.remove_edge(u, v) elif type == 3: if graph.check_path(u, v): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an array of integers, your task is to process multiple range update queries and output the modified array. Each query either increments or sets a specific range of elements in the array to a given value. - Increment query: Increase each element in the range by a given number. - Set query: Set each element in the range to a given value. Input - The first line contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 50,000), the number of elements in the array and the number of queries. - The second line contains n integers representing the elements of the initial array. - Each of the next q lines contains three integers l, r, and v, and an operation type t (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 1,000,000, t = 0 or 1). - If t = 0, the query is an increment query and you should add v to each element in the range [l, r]. - If t = 1, the query is a set query and you should set each element in the range [l, r] to v. Output Output the modified array after all queries are processed. Examples Input 8 3 5 9 1 4 6 7 3 8 1 3 2 0 2 5 4 1 5 8 1 0 Output 7 4 4 4 5 8 4 9 Input 5 2 10 20 30 40 50 1 5 5 0 2 4 25 1 Output 15 25 25 25 55 Note In the first sample: - After the first query, the array becomes [7 11 3 4 6 7 3 8]. - After the second query, the array becomes [7 4 4 4 4 7 3 8]. - After the third query, the array becomes [7 4 4 4 5 8 4 9].","solution":"def process_queries(n, q, arr, queries): Process the queries to either increment or set elements in the array. Parameters: - n: Number of elements in the array - q: Number of queries - arr: The initial array of integers - queries: List of queries where each query is a tuple (l, r, v, t) Returns: The modified array after all queries are processed. for query in queries: l, r, v, t = query l -= 1 # Convert to 0-based index r -= 1 # Convert to 0-based index if t == 0: for i in range(l, r+1): arr[i] += v elif t == 1: for i in range(l, r+1): arr[i] = v return arr"},{"question":"Diana and Ethan are playing a number game. Diana picks an integer n and a sequence of n positive integers a1, a2, ..., an. Ethan\'s task is to perform the following operation to the sequence exactly once: For each element in the sequence, replace the element with the product of all other elements in the sequence except the current element. Formally, if the sequence is a1, a2, ..., an, then each element ai will be replaced with (a1 * a2 * ... * an) / ai. As the product of elements can be very large, they need your help to implement this efficiently without directly computing the large product for every element. Input The first line contains a single integer n (1 ≤ n ≤ 105), the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output Print a sequence of n integers where the i-th integer is the result of replacing ai with the product of all other elements divided by ai. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 3 2 3 5 Output 15 10 6 Input 5 10 3 5 6 2 Output 180 600 360 300 900","solution":"def product_except_self(nums): Returns a list such that, for each element in the list, it is replaced with the product of all other elements in the original list. :param nums: List of integers :return: List of integers with the described property n = len(nums) if n == 0: return [] prod = [1] * n # Forward pass to accumulate the left products left_product = 1 for i in range(n): prod[i] = left_product left_product *= nums[i] # Backward pass to accumulate the right products right_product = 1 for i in range(n - 1, -1, -1): prod[i] *= right_product right_product *= nums[i] return prod"},{"question":"Implement a function `spiral_matrix(matrix)` that receives an `n x n` 2-dimensional list of integers (where `n >= 1`) and returns a list of integers representing the elements of the matrix in a spiral order, starting from the top-left corner and moving to the right initially. # Examples Input ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output ```python [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Input ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` Output ```python [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ```","solution":"def spiral_matrix(matrix): Returns the elements of the matrix in spiral order. result = [] while matrix: # Remove and append the first row result += matrix.pop(0) # Rotate the remaining matrix counter-clockwise matrix = list(zip(*matrix))[::-1] return result"},{"question":"You are given a binary tree with n nodes. Each node has a value between 1 and 1000 inclusive. Your task is to determine the minimum number of nodes to delete to make the tree a \\"valid binary search tree\\" (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of testcases. The first line of each testcase contains a single integer n (1 ≤ n ≤ 200) — the number of nodes in the binary tree. The next n lines contain two integers each p and v (1 ≤ p, v ≤ n), which represents the parent-child relationship in the tree. More specifically, if a parent node with index p has a child node with index v, it means p has v as a child. Next line contains n space-separated integers — values of the nodes in the binary tree. The i-th value corresponds to the value of the node with index i. Output For each testcase, print a single integer — the minimum number of nodes that need to be deleted to make the tree a valid BST. Example Input 2 3 1 2 1 3 2 3 1 3 1 2 1 3 1 3 2 Output 1 0 Note In the first example, deleting node 2 makes the tree a valid BST with nodes 1 and 3. In the second example, the tree is already a valid BST, so the minimum number of deletions is 0.","solution":"def min_deletions_to_bst(t, testcases): def solve(tree, node_values): # function to check if a tree rooted at node is a BST def is_bst(node, min_val, max_val): if node is None: return True if node_values[node - 1] <= min_val or node_values[node - 1] >= max_val: return False left_child = tree.get(node, {}).get(\'left\') right_child = tree.get(node, {}).get(\'right\') return is_bst(left_child, min_val, node_values[node - 1]) if left_child else True and is_bst(right_child, node_values[node - 1], max_val) if right_child else True # function for dfs traversal to count deletions required def dfs(node): if node is None: return 0 if is_bst(node, float(\'-inf\'), float(\'inf\')): return 0 left_child = tree.get(node, {}).get(\'left\') right_child = tree.get(node, {}).get(\'right\') del_left = dfs(left_child) + 1 if left_child else float(\'inf\') del_right = dfs(right_child) + 1 if right_child else float(\'inf\') return min(del_left, del_right) return dfs(1) # assuming the root of the tree is always node 1 results = [] for testcase in testcases: n = testcase[\'n\'] edges = testcase[\'edges\'] values = testcase[\'values\'] # create the tree from edges tree = {} for p, v in edges: if p not in tree: tree[p] = {} if v < p: tree[p][\'left\'] = v else: tree[p][\'right\'] = v # calculate the minimum deletions and add to results results.append(solve(tree, values)) return results"},{"question":"In a faraway kingdom, there is a peculiar ancient library filled with mysterious books. Each book is uniquely identified by a string of lowercase English letters. To preserve the order of these books, the keeper wants to organize them in lexicographical order but with a twist: the books must be arranged in the exact middle position of their respective segments after each sorting step. To clarify, the library sorts books in rounds. In each round, every contiguous subsegment (subsection of books) of even length `2k` must be divided into two halves of length `k` each. Each book should then be moved to the position it would hold if the subsection was sorted and then content is swapped, continuing further until the whole segment is sorted. As an example, consider a list of books `[\'bacd\', \'abcd\', \'dbca\', \'dcba\']`. Write a function that, given a list of strings representing the book titles, arranges them according to the library\'s peculiar sorting system. The function should return the fully sorted list of books after performing the required steps. Input - A list of strings of lowercase English letters where each string represents the title of a book. The length of each string does not exceed 100 characters and the number of books does not exceed 100. Output - A list of strings sorted according to the library’s sorting system described above. Examples Input [\'bacd\', \'abcd\', \'dbca\', \'dcba\'] Output [\'abcd\', \'bacd\', \'dbca\', \'dcba\'] Input [\'zxcv\', \'vcxz\', \'asdf\', \'fdsa\'] Output [\'asdf\', \'fdsa\', \'vcxz\', \'zxcv\']","solution":"def library_sort(books): Sort books according to the peculiar ancient library\'s sorting system. def sort_segment(segment): if len(segment) <= 1: return segment mid = len(segment) // 2 left_half = segment[:mid] right_half = segment[mid:] sorted_left = sort_segment(left_half) sorted_right = sort_segment(right_half) return sorted(sorted_left + sorted_right) return sort_segment(books)"},{"question":"A researcher is analyzing DNA sequences to find a specific pattern. A DNA sequence is composed of the characters \'A\', \'C\', \'G\', and \'T\'. The researcher wants to determine how many times a given pattern appears in multiple DNA sequences. Input: The first line consists of an integer t (1 ≤ t ≤ 100), the number of DNA sequences. The next t lines each contain a DNA sequence (1 ≤ length of each sequence ≤ 100). The last line contains the pattern p (1 ≤ length of pattern ≤ 10). Output: For each DNA sequence, output the number of times the pattern appears in that sequence. Examples Input: 3 AAACGTACGTTAGC TGCATGCATGC CGTAGCTAGCTACG CGT Output: AAACGTACGTTAGC: 2 TGCATGCATGC: 0 CGTAGCTAGCTACG: 1 Note: In the first test case, the pattern \'CGT\' appears twice in the DNA sequence \'AAACGTACGTTAGC\'. In the second test case, the pattern \'CGT\' does not appear in the DNA sequence \'TGCATGCATGC\'. In the third test case, the pattern \'CGT\' appears once in the DNA sequence \'CGTAGCTAGCTACG\'.","solution":"def find_pattern_occurrences(t, sequences, pattern): For each DNA sequence, return the number of times the pattern appears in that sequence. results = {} for sequence in sequences: count = sequence.count(pattern) results[sequence] = count return results"},{"question":"In a library, there are multiple books sorted by genres and each genre can have multiple books with varying popularity levels. Every book has a title, author, genre, and a numerical popularity score that denotes its popularity. The higher the popularity score, the more popular the book. A librarian wants to create a recommendation system that works as follows: 1. For a given genre, recommend the top `n` most popular books. 2. If two books have the same popularity score, recommend the book that appears first alphabetically by title. 3. If the genre does not have enough books to recommend, list all available books for that genre. Write a program to help the librarian generate these recommendations. Input - The first line contains an integer `m` (1 ≤ m ≤ 1000) representing the total number of books. - The next `m` lines each contain information about a book in the format: `title, author, genre, popularity` where: - `title` is a string of at most 100 characters. - `author` is a string of at most 100 characters. - `genre` is a string of at most 50 characters. - `popularity` is an integer (1 ≤ popularity ≤ 1000). - The next line contains an integer `q` (1 ≤ q ≤ 100) representing the number of recommendation queries. - The following `q` lines each contain a query with a number `n` (1 ≤ n ≤ 10) and a genre. Output For each query, print the recommended books, one per line, in the following format: `title by author` Print a blank line after each query’s results. Example Input 6 The Great Gatsby, F. Scott Fitzgerald, Fiction, 900 To Kill a Mockingbird, Harper Lee, Fiction, 950 1984, George Orwell, Dystopian, 1000 Brave New World, Aldous Huxley, Dystopian, 950 The Catcher in the Rye, J.D. Salinger, Fiction, 800 Fahrenheit 451, Ray Bradbury, Dystopian, 900 2 2 Fiction 3 Dystopian Output To Kill a Mockingbird by Harper Lee The Great Gatsby by F. Scott Fitzgerald 1984 by George Orwell Fahrenheit 451 by Ray Bradbury Brave New World by Aldous Huxley","solution":"def recommend_books(m, books, q, queries): Returns a list of recommendations for each genre query. from collections import defaultdict import operator # Organize books by genre genre_books = defaultdict(list) for book in books: title, author, genre, popularity = book genre_books[genre].append((title, author, popularity)) # For every query, find the top n books in a given genre recommendations = [] for query in queries: n, genre = query if genre not in genre_books: recommendations.append([]) continue # Sort the books first by descending popularity, then by title alphabetically sorted_books = sorted(genre_books[genre], key=lambda x: (-x[2], x[0])) # Get the top n books top_books = sorted_books[:n] rec = [f\\"{title} by {author}\\" for title, author, _ in top_books] recommendations.append(rec) return recommendations # Example usage (adapt for your needs) if __name__ == \\"__main__\\": m = 6 books = [ (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"Fiction\\", 900), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"Fiction\\", 950), (\\"1984\\", \\"George Orwell\\", \\"Dystopian\\", 1000), (\\"Brave New World\\", \\"Aldous Huxley\\", \\"Dystopian\\", 950), (\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", \\"Fiction\\", 800), (\\"Fahrenheit 451\\", \\"Ray Bradbury\\", \\"Dystopian\\", 900) ] q = 2 queries = [(2, \\"Fiction\\"), (3, \\"Dystopian\\")] result = recommend_books(m, books, q, queries) for rec in result: print(\\"n\\".join(rec)) print()"},{"question":"You are given two arrays of integers, A and B, both of length n. The goal is to make the arrays identical by performing a series of operations on array A. You are allowed to multiply any element of array A by -1 (i.e., change the sign of the element). Determine the minimum number of operations needed to make array A identical to array B, or determine if it\'s not possible. Input The first line of input contains an integer n (1 ≤ n ≤ 2000) — the length of the arrays. The second line of input contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of array A. The third line of input contains n integers b1, b2, ..., bn (|bi| ≤ 10^9) — the elements of array B. Output Print a single integer — the minimum number of operations required to make array A identical to array B, or -1 if it\'s not possible. Examples Input 3 1 -2 3 1 2 3 Output 1 Input 4 -1 2 -3 4 1 -2 3 -4 Output 4 Input 2 1 1 -1 -1 Output 2 Note In the first sample, we can change -2 in array A to 2 in one operation. In the second sample, every element needs to have its sign changed, hence 4 operations. In the third sample, both elements need to have their signs changed, hence 2 operations.","solution":"def min_operations_to_identical_arrays(n, A, B): Determine the minimum number of operations needed to make array A identical to array B by multiplying elements of A by -1. An operation is defined as changing the sign of an element. Args: - n: An integer denoting the length of the arrays. - A: List of integers representing array A. - B: List of integers representing array B. Returns: - An integer representing the minimum number of operations needed, or -1 if not possible. operations = 0 for i in range(n): if A[i] != B[i] and A[i] != -B[i]: return -1 if A[i] != B[i]: operations += 1 return operations"},{"question":"Given a string containing only characters \'a\' and \'b\', you need to transform the string such that no two \'b\'s are adjacent to each other. You can insert the character \'a\' at any position in the string, but you cannot remove or move any existing characters. Your task is to find the minimum number of \'a\'s required to achieve this transformation. Input: The first line contains an integer T - number of test cases. Each of the next T lines contains a string S. Output: For each test case, output the minimum number of \'a\'s needed to ensure that no two \'b\'s are adjacent. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100, where |S| denotes the length of string S. SAMPLE INPUT 3 abba bbb abab SAMPLE OUTPUT 1 2 0 Explanation In the first case, we can insert one \'a\' between the two \'b\'s to get the string \'ababa\'. In the second case, we need two \'a\'s to separate all \'b\'s, resulting in the string \'bababa\'. In the third case, no insertion is needed as no two \'b\'s are adjacent.","solution":"def min_as_to_avoid_adjacent_bs(S): Returns the minimum number of \'a\'s needed to be inserted such that no two \'b\'s are adjacent. # To count the number of \'a\'s to be inserted insertions = 0 # Traverse the string and count adjacent \'b\'s i = 0 while i < len(S): if S[i] == \'b\': count_b = 0 # Count consecutive \'b\'s while i < len(S) and S[i] == \'b\': count_b += 1 i += 1 # The number of \'a\'s required to break `count_b` b\'s if count_b > 1: insertions += count_b - 1 else: i += 1 return insertions def process_test_cases(T, test_cases): Process the input test cases and return the output for each. results = [] for i in range(T): S = test_cases[i] result = min_as_to_avoid_adjacent_bs(S) results.append(result) return results"},{"question":"**Prime Sum** Input The input is a single integer n (1 ≤ n ≤ 10^6). Output Print a single integer which is the sum of the first n prime numbers. Examples Input 5 Output 28 Explanation The first five prime numbers are 2, 3, 5, 7, and 11, and their sum is 2 + 3 + 5 + 7 + 11 = 28.","solution":"def sum_of_first_n_primes(n): Returns the sum of the first n prime numbers. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True prime_count = 0 candidate = 2 prime_sum = 0 while prime_count < n: if is_prime(candidate): prime_sum += candidate prime_count += 1 candidate += 1 return prime_sum"},{"question":"Given an array of integers `arr` of length `n`, you need to perform `q` queries on this array. Each query is described by three integers `li`, `ri`, and `x` (1 ≤ li ≤ ri ≤ n, -10^9 ≤ x ≤ 10^9). For each query, you need to find the number of elements in the subarray `arr[li...ri]` that are equal to `x`. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` space-separated integers `arr[i]` (|arr[i]| ≤ 10^9) — the elements of the array. The third line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. The next `q` lines contain the queries. The i-th of these lines contains three space-separated integers `li`, `ri`, and `x`. Output Print `q` integers — the answers to the queries. Print the answers in the order in which the queries are given in the input. Separate the printed numbers by whitespaces. Examples Input 6 1 2 3 4 2 2 3 1 3 2 2 5 2 1 6 2 Output 1 2 3 Note Consider the second query in the first test case. The subarray `arr[2...5]` is `[2, 3, 4, 2]`. The elements equal to `2` are at positions 1 and 4 in this subarray (1-based), thus the number of elements equal to 2 is 2.","solution":"def count_occurrences(arr, queries): Counts the occurrences of x in the subarray arr[li...ri] for each query. Parameters: arr (list): The list of integers representing the array. queries (list): The list of queries where each query is [li, ri, x]. Returns: list: The list of results for each query. results = [] for li, ri, x in queries: count = sum(1 for i in range(li - 1, ri) if arr[i] == x) results.append(count) return results"},{"question":"As a secret agent, your task is to decode a message sent to you in a scrambled format. The message consists of several words, and each word is formed by randomly shuffling the letters of an original word. Your mission is to recognize the original words from a given dictionary and reconstruct the original message. Your program will be given a dictionary of words and a scrambled message. The dictionary contains all possible words that might appear in the original message. You need to match each shuffled word in the scrambled message to one of the words in the dictionary. If it\'s impossible to match a shuffled word to any word in the dictionary, it should be considered an invalid message. Input The first line contains an integer N (1 ≤ N ≤ 10^3) — the number of words in the dictionary. Each of the next N lines contains a single word consisting of lowercase English letters, representing the dictionary. The following line contains an integer M (1 ≤ M ≤ 10^3) — the number of words in the scrambled message. Each of the next M lines contains a single word consisting of lowercase English letters, representing the scrambled message. Output If it is possible to reconstruct the original message, output the original message as a sequence of words in a single line. If it is impossible to reconstruct the message, output \\"Invalid message\\". Example Input 5 word hello agent decode mission 3 rdwo oellh tngea Output word hello agent","solution":"def reconstruct_message(dictionary, scrambled_message): from collections import Counter def normalize(word): return \'\'.join(sorted(word)) normalized_dict = {normalize(word): word for word in dictionary} original_message = [] for scrambled in scrambled_message: normalized_word = normalize(scrambled) if normalized_word in normalized_dict: original_message.append(normalized_dict[normalized_word]) else: return \\"Invalid message\\" return \' \'.join(original_message)"},{"question":"You are given a 2D grid of characters with dimensions m x n and a string word. Determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Input The first line contains two integers m and n (1 ≤ m, n ≤ 200). The next m lines each contain n characters representing the grid. The last line contains the string word (1 ≤ length of word ≤ 10^3). Output Output \\"YES\\" if the word exists in the grid and \\"NO\\" otherwise. Examples Input 3 4 A B C E S F C S A D E E ABCCED Output YES Input 3 4 A B C E S F C S A D E E ABCB Output NO Note In the first example, the word \\"ABCCED\\" can be constructed as follows: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1). In the second example, the word \\"ABCB\\" cannot be constructed because cell (1, 1) with letter \'E\' would need to be reused, which is not allowed.","solution":"def exist(board, word): Returns YES if the word exists in the 2D grid and NO otherwise. m, n = len(board), len(board[0]) def dfs(board, word, i, j, k): if not (0 <= i < m and 0 <= j < n) or board[i][j] != word[k]: return False if k == len(word) - 1: return True temp, board[i][j] = board[i][j], \'#\' result = (dfs(board, word, i + 1, j, k + 1) or dfs(board, word, i - 1, j, k + 1) or dfs(board, word, i, j + 1, k + 1) or dfs(board, word, i, j - 1, k + 1)) board[i][j] = temp return result for i in range(m): for j in range(n): if dfs(board, word, i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"Given two strings s1 and s2, write a function to determine if s2 is a rotation of s1, using only one call to a string method. # Function Signature: ```python def is_rotation(s1: str, s2: str) -> bool: ``` # Input: - `s1`: A non-empty string (1 ≤ len(s1) ≤ 10^4) - `s2`: A non-empty string (1 ≤ len(s2) ≤ 10^4) # Output: - Return `True` if `s2` is a rotation of `s1`. Otherwise, return `False`. # Example: ```python assert is_rotation(\\"waterbottle\\", \\"erbottlewat\\") == True assert is_rotation(\\"hello\\", \\"llohe\\") == True assert is_rotation(\\"hello\\", \\"lloeh\\") == False assert is_rotation(\\"aa\\", \\"a\\") == False ``` # Note: - A string s2 is a rotation of s1 if it can be obtained by moving some prefix of s1 to the end. - Example: \\"erbottlewat\\" is a rotation of \\"waterbottle\\", as \\"erbottle\\" (prefix) can be moved to the end.","solution":"def is_rotation(s1: str, s2: str) -> bool: Determines if s2 is a rotation of s1. Parameters: - s1: The original string. - s2: The string that may be a rotated version of s1. Returns: - True if s2 is a rotation of s1, otherwise False. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"A warehouse is represented as a grid of characters, where \'.\' represents empty spaces, \'S\' is the starting point, \'E\' is the exit, \'#\' represents walls, and \'*\' represents items to be collected. A robot starts at the \'S\' position, and it can move up (U), down (D), left (L), or right (R). Design a program that finds one possible route for the robot to collect all items (\'*\') and reach the exit (\'E\'). The program should output the path as a string of directions. Input The input will be a grid of characters where each line represents a row in the grid. The grid is of fixed size 10x10 and guaranteed to have exactly one \'S\', one \'E\', and one or more \'*\'. The characters in each row are without spaces between them. Output A string of directions (\'U\', \'D\', \'L\', \'R\') representing a valid path for the robot that starts at \'S\', collects all items (\'*\'), and then reaches the exit (\'E\'). If multiple solutions exist, output any one of them. There is always at least one valid solution. Example Input S.....*... .#.. ..#....#.. ..#..#.#.. ..#.#..* ..#......E ..#.. ...*.....* ..........* ..........* Output RDDRRDDRRUUUURRDDLLLUURRDDDDL","solution":"def find_path(grid): Function to find a path for the robot to collect all items (\'*\') and reach the exit (\'E\'). from collections import deque def bfs(start, targets): queue = deque([(start, \\"\\")]) visited = set() visited.add(start) found_paths = [] while queue: position, path = queue.popleft() x, y = position if position in targets: found_paths.append((position, path)) if len(found_paths) == len(targets): return found_paths directions = [(\'D\', (x + 1, y)), (\'U\', (x - 1, y)), (\'R\', (x, y + 1)), (\'L\', (x, y - 1))] for dir_letter, (nx, ny) in directions: if 0 <= nx < 10 and 0 <= ny < 10 and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append(((nx, ny), path + dir_letter)) return found_paths def collect_all_items_and_reach_exit(grid, start, items, exit): collected_paths = [] current_position = start remaining_items = set(items) while remaining_items: paths = bfs(current_position, remaining_items) if not paths: return \\"\\" shortest_path = min(paths, key=lambda x: len(x[1])) collected_paths.append(shortest_path[1]) remaining_items.remove(shortest_path[0]) current_position = shortest_path[0] final_path_to_exit = bfs(current_position, [exit]) if final_path_to_exit: collected_paths.append(final_path_to_exit[0][1]) else: return \\"\\" return \\"\\".join(collected_paths) start = None exit = None items = [] for i in range(10): for j in range(10): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': exit = (i, j) elif grid[i][j] == \'*\': items.append((i, j)) return collect_all_items_and_reach_exit(grid, start, items, exit)"},{"question":"Alex is preparing a schedule for his study sessions for an upcoming exam week. The exam week lasts n days, and Alex can choose to have study sessions during any of those days, but each day he can study for a maximum of m hours. Alex wants to ensure that he studies for at least h hours in total during the exam week to be well-prepared. However, he prefers to study regularly and aims to minimize the maximum number of hours he studies on any single day. Can you help Alex determine the optimal number of hours he should study each day to meet his goal? Input The first line contains three integers n, m and h (1 ≤ n, m, h ≤ 1000) — the number of exam week days, the maximum number of study hours per day, and the total number of hours Alex wants to study during the week. Output Print two integers. The first integer is the minimum number of hours Alex should study on any single day to meet his goal, and the second integer is the revised number of hours Alex will actually study to meet the goal or exceed it without surpassing the maximum number of hours per day. Examples Input 7 4 20 Output 3 21 Input 5 3 14 Output 3 15 Note In the first example, Alex can study for 3 hours on the first 6 days and 3 hours on the 7th day to achieve a total of 21 hours, thus overachieving his goal minimally. In the second example, Alex can study for 3 hours on 5 days to achieve a total of 15 hours, which is the minimum possible number of hours he can overachieve his goal. In both examples, Alex cannot distribute exactly his goal hours (20 and 14) while adhering to his constraints, hence he needs to exceed minimally without surpassing the daily maximum study hours.","solution":"def optimal_study_hours(n, m, h): Determines the optimal number of hours Alex should study each day to meet his goal. Parameters: n (int): number of exam week days. m (int): maximum number of study hours per day. h (int): total number of hours Alex wants to study during the week. Returns: tuple: minimum number of hours to study each day, and total hours studied adhering to constraints. # Calculate minimum number of hours per day min_hours_per_day = (h + n - 1) // n # ceiling division of h / n # If min_hours_per_day exceeds max hours per day, set it to max if min_hours_per_day > m: min_hours_per_day = m # Calculate total hours based on the min_hours_per_day total_hours = min_hours_per_day * n if total_hours >= h: return (min_hours_per_day, total_hours) # Finding the exact total needed to meet or exceed h without exceeding max hours per day remaining_hours = h - total_hours while remaining_hours > 0 and min_hours_per_day < m: min_hours_per_day += 1 total_hours = min_hours_per_day * n remaining_hours = h - total_hours return (min_hours_per_day, min_hours_per_day * n)"},{"question":"Raju loves to play with dominoes. He has a rectangular board of size n x m (n rows and m columns), and an infinite supply of standard 2 x 1 domino pieces. Raju wants to cover the entire board with the dominoes. Your task is to help Raju find out if it\'s possible to cover the entire board completely with no spaces left uncovered and no domino pieces overlapping. Each domino piece covers exactly two cells and can be placed either horizontally or vertically. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the board. Output: Print \\"YES\\" if it\'s possible to cover the board completely with the dominoes, otherwise print \\"NO\\". Examples: Input: 2 3 Output: YES Input: 3 3 Output: NO Input: 4 4 Output: YES","solution":"def can_cover_board(n, m): This function checks if the board of size n x m can be completely covered with 2x1 dominoes. # The total number of cells in the board total_cells = n * m # If the total number of cells is even, it\'s possible to cover with 2x1 dominoes if total_cells % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of N integers. Your task is to find and return the maximum possible product of any three distinct numbers chosen from the list. Make sure to handle both positive and negative numbers as well as zeros in the input. Sample Input & Output The first line contains the value of N. The next line contains N space-separated integers. You need to print the maximum product of any three distinct numbers. Constraints 3 ≤ N ≤ 1000 -10^6 ≤ integer ≤ 10^6 SAMPLE INPUT 6 1 10 2 6 5 3 SAMPLE OUTPUT 300 Explanation The maximum product is obtained by choosing 10, 6, and 5, which gives 10 * 6 * 5 = 300.","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct numbers from the list `nums`. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"# Problem You are given a large number N. You need to compute the number of prime factors (with multiplicity) of N. Given the constraints of the problem, N is a large number and may have prime factors in the range of [2, 10^6]. Write a function to compute the number of prime factors considering multiplicity. # Input The input is given in the following format: - A single integer N (2 leq N leq 10^{12}) # Output Output a single integer that represents the total count of prime factors including their multiplicity. # Constraints The input satisfies the following conditions: - 2 leq N leq 10^{12} # Example Input ``` 100 ``` Output ``` 4 ``` Explanation 100 can be factorized into 2 * 2 * 5 * 5 Hence, the total number of prime factors (with multiplicity) is 4. Input ``` 49 ``` Output ``` 2 ``` Explanation 49 can be factorized into 7 * 7 Hence, the total number of prime factors (with multiplicity) is 2.","solution":"def count_prime_factors(n): Returns the total number of prime factors of n including multiplicity. prime_count = 0 factor = 2 while factor * factor <= n: while (n % factor) == 0: prime_count += 1 n //= factor factor += 1 if n > 1: prime_count += 1 return prime_count"},{"question":"You are a software engineer who loves to encode secret messages. To do this, you decide to design a simple encryption algorithm. The algorithm must take an input string composed of lowercase letters and perform the following operations: 1. Shift each letter of the string to the next letter in the alphabet. For instance, \'a\' becomes \'b\', \'b\' becomes \'c\', ..., \'z\' becomes \'a\'. 2. Reverse the entire shifted string. Write a function to perform this encryption. # Function Signature ```python def encrypt_message(message: str) -> str: pass ``` # Input - A single string, `message`, containing only lowercase letters from \'a\' to \'z\'. The length of the string, `n`, satisfies (1 ≤ n ≤ 1000). # Output - Return the encrypted string derived from the above operations. # Example Input ```python message = \\"abcd\\" ``` Output ```python \\"dcba\\" ``` Explanation 1. Shifting each letter in \\"abcd\\": - \'a\' -> \'b\' - \'b\' -> \'c\' - \'c\' -> \'d\' - \'d\' -> \'e\' This results in \\"bcde\\" 2. Reversing \\"bcde\\" -> \\"edcb\\" # Example Input ```python message = \\"xyz\\" ``` Output ```python \\"azy\\" ``` Explanation 1. Shifting each letter in \\"xyz\\": - \'x\' -> \'y\' - \'y\' -> \'z\' - \'z\' -> \'a\' This results in \\"yza\\" 2. Reversing \\"yza\\" -> \\"azy\\" # Implementation Notes: - You may assume that the input string will always be non-empty and contain only lowercase letters. - Consider edge cases where the string might contain characters at the end of the alphabet (like \'z\' shifting to \'a\'). - Ensure the output string correctly reflects the shifted and reversed format.","solution":"def encrypt_message(message: str) -> str: Encrypts the input message by shifting each character to the next letter in the alphabet and then reversing the entire string. Parameters: message (str): The input message string containing only lowercase letters. Returns: str: The encrypted message. # Shift each character to the next letter in the alphabet shifted_message = \'\'.join(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) for char in message) # Reverse the entire shifted string encrypted_message = shifted_message[::-1] return encrypted_message"},{"question":"In a string processing company, an analyst is working with a string S consisting of lowercase English letters. The company is interested in understanding the uniqueness of substrings within given ranges. For a given range [L, R] (1 leq L leq R leq |S|), the uniqueness score of a substring from index L to R is defined as the number of distinct characters in that substring. The analyst wants to find the maximum uniqueness score for a substring within a given range. For efficiency, the analyst needs to handle multiple queries about different ranges on the same string. Constraints * 1 leq |S| leq 100000 * 1 leq Q leq 100000 * 1 leq L, R leq |S| Input The input will be given from Standard Input in the following format: S Q L1 R1 L2 R2 ... LQ RQ Output For each query, print the maximum uniqueness score of the substring in the given range. Examples Input abac 3 1 4 2 3 1 2 Output 3 2 2 Input thequickbrownfox 2 2 5 3 10 Output 4 8","solution":"def max_uniqueness_substring(S, L, R): Returns the uniqueness score of the substring S[L-1:R] substring = S[L-1:R] uniqueness_score = len(set(substring)) return uniqueness_score def process_queries(S, queries): results = [] for L, R in queries: result = max_uniqueness_substring(S, L, R) results.append(result) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() S = data[0] Q = int(data[1]) queries = [] idx = 2 for _ in range(Q): L = int(data[idx]) R = int(data[idx+1]) queries.append((L, R)) idx += 2 results = process_queries(S, queries) for result in results: print(result)"},{"question":"A company has a peculiar way of rewarding its employees. They are given options to work on various projects, each offering a different reward. This reward system goes like this: each employee can pick projects such that no two picked projects are adjacent in the list. They can only claim the non-adjacent projects\' rewards. Given a list of non-negative integers representing the rewards for each project, determine the maximum reward an employee can achieve by selecting non-adjacent projects optimally. Input The first line contains an integer n (1 ≤ n ≤ 105) - the number of projects. The second line contains n non-negative integers separated by spaces, where the i-th integer denotes the reward for the i-th project. Output Output a single integer - the maximum reward an employee can achieve by picking the projects optimally. Examples Input 4 1 2 9 4 Output 10 Input 5 3 2 5 10 7 Output 15 Input 3 3 7 4 Output 7 Explanation In the first example, the optimal choice is to pick projects 1 and 3 (1 + 9 = 10). In the second example, the optimal choice is to pick projects 1, 3, and 5 (3 + 5 + 7 = 15). In the third example, the optimal choice is to pick project 2 (7).","solution":"def max_non_adjacent_sum(n, rewards): if n == 0: return 0 if n == 1: return rewards[0] dp = [0] * n dp[0] = rewards[0] if n > 1: dp[1] = max(rewards[0], rewards[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + rewards[i]) return dp[n-1]"},{"question":"You have been tasked with organizing a dance performance for a group of dancers. The dancers need to form a line for their performance. Each dancer has a unique height. The dancers prefer to stand such that the difference between the height of any two adjacent dancers does not exceed a given limit k. Your task is to find a way to rearrange the dancers\' heights such that the height difference condition is met, or determine that it is impossible. If it\'s possible to rearrange the dancers, output any one valid arrangement. Input: The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of dancers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000) — the heights of the dancers. The third line contains one integer k (0 ≤ k ≤ 100000) — the maximum allowed difference between heights of two adjacent dancers. Output: If it is possible to rearrange the dancers to meet the height difference condition, print \\"Possible\\" on the first line and then n integers representing any valid arrangement of the heights on the second line. If it is not possible to rearrange the dancers to meet the condition, print \\"Impossible\\". Examples: Input: 5 10 20 30 40 50 15 Output: Possible 10 20 30 40 50 Input: 3 1 10 20 5 Output: Impossible Note: In the first example, the maximum allowed difference between the heights is 15, so the given order of heights is already a valid arrangement. In the second example, the maximum allowed difference between the heights is 5, which makes it impossible to rearrange the dancers to meet the condition, so the output is \\"Impossible\\".","solution":"def arrange_dancers(n, heights, k): Determines if it\'s possible to rearrange dancers such that the difference between heights of any two adjacent dancers does not exceed k. If possible, returns a valid arrangement. If impossible, returns \\"Impossible\\". heights.sort() for i in range(1, n): if heights[i] - heights[i - 1] > k: return \\"Impossible\\" return \\"Possible\\", heights"},{"question":"In an online competitive programming platform, participants take part in contests to solve various coding problems. Each participant has a unique ID and a rating score. A contest consists of several challenges, and a participant\'s rating can increase or decrease depending on their performance in the contest. The contest results are stored as a list of rating changes for each participant. As the platform administrator, you want to update the participants\' ratings efficiently after each contest. You need to implement a function that takes the initial ratings of all participants and the contest results, and then outputs the updated ratings. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of participants and the number of rating changes, respectively. - The second line contains `n` integers `r_1, r_2, ..., r_n` (1 ≤ r_i ≤ 10^9) — the initial ratings of the participants, where `r_i` is the rating of the participant with ID `i`. - The next `m` lines each contain two integers `p` and `c` (1 ≤ p ≤ n, -10^9 ≤ c ≤ 10^9) — indicating that the participant with ID `p` has a rating change of `c` after the contest. # Output - Output a single line with `n` integers — the updated ratings of the participants in the order of their IDs, separated by spaces. # Example Input ``` 5 3 1000 1500 2000 2500 3000 1 100 3 -200 5 150 ``` Output ``` 1100 1500 1800 2500 3150 ``` # Explanation - The initial ratings are [1000, 1500, 2000, 2500, 3000]. - After the first rating change, the participant with ID 1 has their rating increased by 100, resulting in 1100. - After the second rating change, the participant with ID 3 has their rating decreased by 200, resulting in 1800. - After the third rating change, the participant with ID 5 has their rating increased by 150, resulting in 3150. - The final ratings are [1100, 1500, 1800, 2500, 3150].","solution":"def update_ratings(n, m, initial_ratings, changes): Update the ratings of participants based on the given changes. :param n: int, number of participants :param m: int, number of rating changes :param initial_ratings: list of int, initial ratings of the participants :param changes: list of (int, int) tuples, rating changes (participant ID, change) :return: list of int, updated ratings # Convert initial_ratings to a list of integers ratings = initial_ratings[:] # Apply each change to the corresponding participant\'s rating for p, c in changes: ratings[p - 1] += c # participant IDs are 1-based, list indices are 0-based return ratings"},{"question":"You are given an array of integers. You need to perform a series of operations to make all the elements of the array equal. In one operation, you can pick a subset of elements from the array and add an integer x (1 ≤ x ≤ 1000) to all elements of the subset. Your task is to determine the minimum number of operations required to make all the elements of the array equal. Input The first line contains a single integer t (1 ≤ t ≤ 1000), denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100), denoting the number of elements in the array. The second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9), denoting the elements of the array. Output For each test case, output a single integer denoting the minimum number of operations required to make all the elements of the array equal. Example Input 3 3 1 2 3 4 5 5 5 5 5 7 2 9 4 6 Output 2 0 4 Explanation In the first test case, you can make the array elements equal in 2 operations: * Add 1 to the subset {1, 2} * Add 1 to the subset {2, 3} In the second test case, the elements are already equal, so no operations are needed. In the third test case, you can make the array elements equal in 4 operations, such as: * Add 2 to the subset {2} * Add 3 to the subset {4} * Add 1 to the subset {6} * Add -2 to the subset {9}","solution":"def min_operations_to_equalize(t, test_cases): from collections import Counter results = [] for i in range(t): n, array = test_cases[i] freq = Counter(array) max_freq = max(freq.values()) results.append(n - max_freq) return results"},{"question":"Given an integer array `arr` of size `n`, return `True` if there are three consecutive odd numbers in the array. Otherwise, return `False`. Constraints * 1 <= n <= 1000 * 0 <= arr[i] <= 10^9 Input The input is given from Standard Input in the following format: The first line contains the integer n. The second line contains n space-separated integers representing the elements of the array arr. Output Print `True` if there are three consecutive odd numbers in the array; otherwise, print `False`. Examples Input 5 2 6 4 1 3 Output False Input 5 1 3 5 7 9 Output True Input 6 2 1 3 5 2 3 Output True","solution":"def has_three_consecutive_odds(arr): Return True if there are three consecutive odd numbers in the array, otherwise False. count = 0 for num in arr: if num % 2 != 0: count += 1 if count == 3: return True else: count = 0 return False"},{"question":"You are the lead developer at an autonomous vehicle company. Your team is tasked with developing an algorithm to help cars navigate a grid-based city. The city is represented as a rectangular grid where intersections are connected by roads. Some of these roads are blocked due to construction, and the car must avoid them to reach its destination. Each grid cell can either be an empty road or a blocked road. You need to write a program that determines if there is a way for the car to move from its starting position to its destination. The car can move up, down, left, or right, but it cannot move onto a blocked road or out of the grid boundaries. **Input** The first line of input contains two integers `n` and `m` separated by a space, representing the number of rows and columns of the grid, respectively. You may assume 1 ≤ n, m ≤ 100. The next `n` lines each contain `m` characters, representing the grid. Each character can be one of the following: - `S`: the starting position of the car (there will be exactly one `S` in the grid). - `D`: the destination position of the car (there will be exactly one `D` in the grid). - `.`: an empty road. - `#`: a blocked road. **Output** Output a single line containing the word `YES` if there is a path from `S` to `D`. Otherwise, output `NO`. **Sample Input 1** ``` 5 5 S.... . .#... .#..D ..... ``` **Sample Output 1** ``` YES ``` **Sample Input 2** ``` 3 3 S#. # ..D ``` **Sample Output 2** ``` NO ``` **Example** **Input** ``` 5 5 S.... . .#... .#..D ..... 3 3 S#. # ..D ``` **Output** ``` YES NO ```","solution":"def is_path_exists(grid, n, m): from collections import deque def neighbors(r, c): for dr, dc in ((1, 0), (-1, 0), (0, 1), (0, -1)): rr, cc = r + dr, c + dc if 0 <= rr < n and 0 <= cc < m and grid[rr][cc] != \'#\': yield rr, cc start = None destination = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) if not start or not destination: return \\"NO\\" queue = deque([start]) visited = set([start]) while queue: r, c = queue.popleft() if (r, c) == destination: return \\"YES\\" for rr, cc in neighbors(r, c): if (rr, cc) not in visited: visited.add((rr, cc)) queue.append((rr, cc)) return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [list(data[i + 2]) for i in range(n)] print(is_path_exists(grid, n, m))"},{"question":"Alice is learning scientific computing and she is working on matrix operations. Given a square matrix of size N x N, her task is to calculate the maximum sum of any submatrix. A submatrix is defined as any contiguous block of cells within the original matrix. Input: First line contains integer T - number of test cases. Each test case starts with an integer N. Next N lines will contain N space-separated integers (elements of the matrix). Output: For each test case output in a single line the maximum sum of any submatrix. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -10^5 ≤ Matrix element ≤ 10^5 SAMPLE INPUT 2 3 1 2 -1 -4 -2 -1 3 4 5 2 -1 -2 -3 -4 SAMPLE OUTPUT 12 -1 Explanation: In the first test case, the submatrix with maximum sum is: ``` 3 4 5 ``` Its sum is 12. In the second test case, the submatrix with maximum sum is: ``` -1 ``` Its sum is -1.","solution":"def max_submatrix_sum(matrix): def max_sum_subarray(array): max_ending_here, max_so_far = array[0], array[0] for x in array[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far rows = len(matrix) if rows == 0: return 0 cols = len(matrix[0]) max_sum = float(\'-inf\') for left_col in range(cols): temp_row_sum = [0] * rows for right_col in range(left_col, cols): for row in range(rows): temp_row_sum[row] += matrix[row][right_col] current_max = max_sum_subarray(temp_row_sum) max_sum = max(max_sum, current_max) return max_sum def max_submatrix_sum_for_all(test_cases): results = [] for matrix in test_cases: results.append(max_submatrix_sum(matrix)) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 matrix = [] for _ in range(N): matrix.append(list(map(int, input_lines[index].strip().split()))) index += 1 test_cases.append(matrix) return test_cases def main(input_string): test_cases = parse_input(input_string) results = max_submatrix_sum_for_all(test_cases) for result in results: print(result) # Sample usage input_string = 2 3 1 2 -1 -4 -2 -1 3 4 5 2 -1 -2 -3 -4 main(input_string)"},{"question":"Farmer John has a farm composed of a series of connected patches of land, organized as an undirected graph. Each patch of land can grow one type of crop, but Farmer John wants to plant the crops in such a way that no two adjacent patches have the same type of crop. Given a graph representing Farmer John\'s field where nodes represent patches of land and edges represent shared boundaries between them, determine whether it\'s possible to plant the crops according to the rules described. If it is possible, provide a valid assignment of crops to patches. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of patches of land and the number of shared boundaries, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing that patch u is adjacent to patch v. Output If it is possible to plant the crops with the given constraints, print \\"YES\\" followed by a line with n integers, where the i-th integer is the crop type (1 or 2) for patch i. If it is not possible, print \\"NO\\". Examples Input 3 3 1 2 2 3 3 1 Output NO Input 4 4 1 2 2 3 3 4 4 1 Output YES 1 2 1 2 Input 5 4 1 2 2 3 3 4 4 5 Output YES 1 2 1 2 1 Note In the first example, it is not possible to assign two types of crops such that no two adjacent patches have the same type. In the second example, it is possible to assign crops such that no two adjacent patches have the same type. One such assignment is crop type 1 to patches 1 and 3, and crop type 2 to patches 2 and 4. In the third example, assigning crop type 1 to patches 1, 3, and 5, and crop type 2 to patches 2 and 4 is valid.","solution":"def can_plant_crops(n, m, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) color[start] = 1 # Assign the first colors to the starting node while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == 0: # if the neighbor hasn\'t been colored color[neighbor] = 3 - color[node] # Assign an alternate color (1 or 2) queue.append(neighbor) elif color[neighbor] == color[node]: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [0] * (n + 1) # Use a list to store the color of each node. 0: Not colored, 1: Color 1, 2: Color 2 for node in range(1, n + 1): if color[node] == 0: # if the node has not been colored yet if not bfs(node): return \\"NO\\" # If we reached this point, it means we can successfully color the graph return \\"YESn\\" + \\" \\".join(map(str, color[1:])) # Example usage: # print(can_plant_crops(3, 3, [(1, 2), (2, 3), (3, 1)])) # Output: NO # print(can_plant_crops(4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)])) # Output: YES # print(can_plant_crops(5, 4, [(1, 2), (2, 3), (3, 4), (4, 5)])) # Output: YES"},{"question":"You are a software engineer at a company that heavily utilizes graphs for modeling data. You\'ve been tasked to create an algorithm that helps in optimizing network bandwidth allocation, a problem commonly encountered during peak business hours. Given an undirected graph representing the company\'s network topology, where nodes represent servers and edges represent data channels with given bandwidth capacities, you need to determine the maximum bandwidth for data transfer between any two servers in the network. The maximum bandwidth between two servers is defined as the maximum capacity path that can be taken between them. Input: - The first line contains two space-separated integers, V (the number of servers, i.e., nodes) and E (the number of data channels, i.e., edges). - The next E lines each contain three space-separated integers u, v, and w, where u and v are endpoints of a data channel, and w is the bandwidth capacity of that channel. Output: - Output the maximum bandwidth between any two servers in the network. Constraints: 1 ≤ V ≤ 100 1 ≤ E ≤ 1000 1 ≤ w ≤ 10^6 SAMPLE INPUT 4 5 1 2 100 1 3 200 2 3 150 2 4 300 3 4 250 SAMPLE OUTPUT 300 Explanation: The maximum bandwidth path between any two servers is determined by the highest capacity data channel directly connecting two servers. In the example, the highest capacity channel has a bandwidth of 300, which is between server 2 and server 4. This directly determines the maximum bandwidth for data transfer across the network.","solution":"def max_bandwidth(V, E, edges): Returns the maximum bandwidth between any two servers in the network. Parameters: V (int): The number of servers (nodes) E (int): The number of data channels (edges) edges (list of tuples): Each tuple contains three integers (u, v, w) where u and v are endpoints of a data channel, and w is the bandwidth capacity of that channel. Returns: int: The maximum bandwidth between any two servers. max_bandwidth = 0 for edge in edges: u, v, w = edge if w > max_bandwidth: max_bandwidth = w return max_bandwidth # Example of usage: V = 4 E = 5 edges = [ (1, 2, 100), (1, 3, 200), (2, 3, 150), (2, 4, 300), (3, 4, 250) ] print(max_bandwidth(V, E, edges)) # Output: 300"},{"question":"You are given a list of students and their math test scores. Your task is to find the highest possible average score by choosing any contiguous subarray of scores and averaging its elements. The average score of a subarray is the sum of the elements in the subarray divided by the number of elements in the subarray. Your goal is to maximize this average. Write a function called `max_average_score` to solve this problem. # Input The input consists of two parts: 1. An integer `N` (1 ≤ N ≤ 100,000), representing the number of students. 2. A list of `N` integers `scores` (0 ≤ scores[i] ≤ 100), where `scores[i]` represents the score of the i-th student. # Output Return the highest possible average score as a floating point number. The result should be accurate up to 6 decimal places. # Examples **Example 1:** ```python N = 5 scores = [1, 12, 3, 10, 5] print(max_average_score(N, scores)) ``` Output: ``` 10.000000 ``` **Example 2:** ```python N = 3 scores = [5, 5, 5] print(max_average_score(N, scores)) ``` Output: ``` 5.000000 ``` **Example 3:** ```python N = 4 scores = [10, 20, 10, 20] print(max_average_score(N, scores)) ``` Output: ``` 15.000000 ``` # Constraints - Your solution should handle large inputs efficiently. - Ensure the result is printed with a precision of 6 decimal places.","solution":"def max_average_score(N, scores): max_sum = current_sum = scores[0] for i in range(1, N): current_sum = max(scores[i], current_sum + scores[i]) max_sum = max(max_sum, current_sum) return round(max_sum, 6)"},{"question":"You are organizing a treasure hunt game where participants need to guess the coordinates of a hidden treasure. The grid is a 10x10 matrix, where each cell has a unique coordinate (row, column). The coordinates range from (0,0) to (9,9). Participants can make queries to guess the exact location of the treasure. For each guess, the system will return one of four possible directions indicating where the treasure is in relation to the guessed coordinate. The directions are `UP`, `DOWN`, `LEFT`, and `RIGHT`. If the guessed coordinate matches the treasure\'s location, the system returns `FOUND`. Your task is to implement an interactive guessing program where the system provides feedback based on the participant\'s guess. You are allowed to make at most 10 queries to find the treasure. Input To read the feedback to the guesses, your program must use the standard input. The program will receive a single word per line which is one of the four possible directions (`UP`, `DOWN`, `LEFT`, `RIGHT`) or the word `FOUND`. Output The program must use the standard output to print the guesses. Your program must output the guesses as coordinates in the format `(row,column)`, one per line. Examples Input DOWN RIGHT UP LEFT FOUND Output (5,5) (8,5) (7,6) (7,4) (7,5) Note The treasure was hidden at (7,5) in the example. The first guess was at (5,5), the system responded with `DOWN`, indicating the treasure is to be found at a lower row. Then, the guess (8,5) received feedback `UP`, meaning the treasure is in a higher row. The subsequent guesses (7,6) and (7,4) refined the search based on `RIGHT` and `LEFT` responses, respectively, until the treasure was found at (7,5).","solution":"def find_treasure(): import sys input = sys.stdin.read directions = input().split() # Starting point (arbitrarily chosen as the center of the grid) current_row, current_column = 5, 5 guesses = [(current_row, current_column)] for direction in directions: if direction == \'FOUND\': break elif direction == \'UP\': current_row -= 1 elif direction == \'DOWN\': current_row += 1 elif direction == \'LEFT\': current_column -= 1 elif direction == \'RIGHT\': current_column += 1 guesses.append((current_row, current_column)) for guess in guesses: print(f\'({guess[0]},{guess[1]})\') # To simulate the game behavior, this function should be called # in an environment where it receives the directions from the system\'s standard input"},{"question":"A company has a round-robin scheduling algorithm implemented to manage its workload on a server cluster. Every task has a unique ID and an associated processing time. The round-robin scheduler allocates tasks to different servers in a cyclic manner, ensuring each task is distributed evenly across the servers. Your task is to simulate the scheduling process and determine the total time taken for all tasks to be processed given a fixed number of servers and a list of tasks with their processing times. Each task is processed by only one server and no preemption occurs, meaning that once a task starts processing on a server, it will run to completion before the server picks the next task in its queue. # Input The first line contains a single integer T ≤ 10 indicating the number of test cases. Each test case begins with a single integer S (1 ≤ S ≤ 100) indicating the number of servers. The next line contains an integer N (1 ≤ N ≤ 1000) indicating the number of tasks. The following N lines each contain a pair of integers, Ti and Pi (1 ≤ Ti ≤ 10000, 1 ≤ Pi ≤ 1000), where Ti is the unique ID of the task and Pi is the processing time of the task. # Output For each test case, output a single integer on a single line, representing the total time taken for all tasks to be processed by the given number of servers. # Example Input ``` 2 3 5 1 10 2 5 3 7 4 8 5 3 2 4 1 4 2 2 3 6 4 1 ``` Output ``` 20 9 ``` **Explanation:** **Test Case 1:** - Server 1 processes tasks 1 (10 units) and 4 (8 units). - Server 2 processes tasks 2 (5 units) and 5 (3 units). - Server 3 processes task 3 (7 units). The time taken for all servers to complete is 10 + 8 = 18 units for Server 1, 5 + 3 = 8 units for Server 2, and 7 units for Server 3. The maximum time among these is 18 units. **Test Case 2:** - Server 1 processes tasks 1 (4 units) and 3 (6 units). - Server 2 processes tasks 2 (2 units) and 4 (1 unit). The time taken for all servers to complete is 4 + 6 = 10 units for Server 1, 2 + 1 = 3 units for Server 2. The maximum time among these is 10 units.","solution":"def round_robin_scheduling(T, test_cases): results = [] for case in test_cases: servers, tasks = case S, N = servers[0], tasks[0][0] processing_times = [0] * S for i in range(N): Ti, Pi = tasks[i][1], tasks[i][2] processing_times[i % S] += Pi total_time = max(processing_times) results.append(total_time) return results"},{"question":"In CodeTown, there are three famous parks located along a straight road: Park A, Park B, and Park C. The distances between these parks are not evenly distributed, and people can jump from one park to another only if the distance between them is less than or equal to a given threshold k. The distances of the parks from a reference point are given as integers. Your task is to determine if it is possible to jump from Park A to Park C either directly or through Park B, considering the given threshold distance k. The distance between parks at coordinates x and y (x < y) is computed as y - x. Constraints: - a, b, c, and k are integers between 0 and 100 (inclusive). - a < b < c Input: Input is given from Standard Input in the following format: ``` a b c k ``` Output: Print `Possible` if you can jump from Park A to Park C (either directly or through Park B); otherwise, print `Impossible`. Examples: Input: ``` 10 20 30 15 ``` Output: ``` Possible ``` Input: ``` 5 17 25 10 ``` Output: ``` Impossible ```","solution":"def can_jump(a, b, c, k): Determines if it is possible to jump from Park A to Park C either directly or through Park B. Args: a (int): Distance of Park A from the reference point. b (int): Distance of Park B from the reference point. c (int): Distance of Park C from the reference point. k (int): The maximum distance one can jump. Returns: str: \'Possible\' if jumping from Park A to Park C is attainable, otherwise \'Impossible\'. if (b - a <= k and c - b <= k) or (c - a <= k): return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given a string `S` consisting of only lowercase alphabetic characters. Your task is to find the maximum length of any contiguous subsequence (also known as substring) in `S` such that every character in this substring appears an even number of times. # Input - The input consists of a single line containing the string `S` (1 ≤ |S| ≤ 100000). # Output - Print the maximum length of the substring where every character appears an even number of times. # Examples Example 1 **Input:** ``` abcabc ``` **Output:** ``` 6 ``` **Explanation:** The entire string \\"abcabc\\" has all characters appearing twice, hence the length is 6. Example 2 **Input:** ``` abbac ``` **Output:** ``` 4 ``` **Explanation:** Substring \\"abba\\" has \'a\' and \'b\' appearing twice each, so the maximum length is 4. # Constraints - String length `S` will be between 1 and 100000 characters, inclusive. # Note - You can assume only lowercase alphabetic characters in the string. - The solution should ideally be efficient enough to handle strings close to the upper limit of the constraint.","solution":"def max_even_substring_length(S): Returns the maximum length of a contiguous subsequence in which every character appears an even number of times. n = len(S) max_length = 0 mask = 0 pos = [-1] * (1 << 26) pos[0] = 0 for i in range(n): # Update the bitmask for current character mask ^= (1 << (ord(S[i]) - ord(\'a\'))) if pos[mask] == -1: pos[mask] = i + 1 else: max_length = max(max_length, i + 1 - pos[mask]) return max_length"},{"question":"Given a list of integers, identify the maximum product that can be obtained by multiplying two adjacent elements in the list. Input: First line contains integer T - number of test cases. For each test case: - First line contains N - number of elements in the list. - Second line contains N integers, the elements of the list. Output: For each test case, print the maximum product of two adjacent elements in a new line. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100000 -1000 ≤ Element of list ≤ 1000 SAMPLE INPUT 3 4 1 2 3 4 5 -1 -2 -3 4 5 3 100 99 1 SAMPLE OUTPUT 12 20 9900 Explanation Test Case #1: The list is: [1, 2, 3, 4] The maximum product of adjacent elements is 3*4 = 12 Test Case #2: The list is: [-1, -2, -3, 4, 5] The maximum product of adjacent elements is 4*5 = 20 Test Case #3: The list is: [100, 99, 1] The maximum product of adjacent elements is 100*99 = 9900","solution":"def max_adjacent_product(arr): Returns the maximum product of two adjacent elements in the list \'arr\'. max_product = float(\'-inf\') for i in range(len(arr) - 1): product = arr[i] * arr[i + 1] if product > max_product: max_product = product return max_product def process_test_cases(test_cases): Takes multiple test cases and returns the results for each. results = [] for case in test_cases: N = case[\'N\'] arr = case[\'arr\'] result = max_adjacent_product(arr) results.append(result) return results"},{"question":"You are given a rectangular grid of alphanumeric characters. Your task is to find and print the longest palindromic sequence in the grid. If there are multiple sequences with the same maximum length, return the lexicographically smallest one. Constraints * 1 ≤ number of rows, number of columns ≤ 50 * Each grid element is an alphanumeric character. Input In the first line, two integers r and c are given, representing the number of rows and columns in the grid. In the next r lines, each of which contains c alphanumeric characters. Output Print the longest palindromic sequence found in any row, column, or diagonal in the grid. Example Input 4 4 a b c d e f g h i j k l m n o p Output a Explanation The grid has no sequences longer than 1 character that are palindromic, and \'a\' is the lexicographically smallest single-character sequence. For larger grids with longer palindromes, detect the longest one accordingly. A sequence reads the same forwards and backwards. Check rows, columns, and both diagonals. If there are ties, return the lexicographically smallest one.","solution":"def longest_palindromic_sequence(grid): def is_palindrome(s): return s == s[::-1] r, c = len(grid), len(grid[0]) longest_palindrome = \\"\\" # Check rows for row in grid: row_str = \'\'.join(row) for start in range(c): for end in range(start + 1, c + 1): substr = row_str[start:end] if is_palindrome(substr): if len(substr) > len(longest_palindrome) or (len(substr) == len(longest_palindrome) and substr < longest_palindrome): longest_palindrome = substr # Check columns for col in range(c): col_str = \'\'.join(grid[row][col] for row in range(r)) for start in range(r): for end in range(start + 1, r + 1): substr = col_str[start:end] if is_palindrome(substr): if len(substr) > len(longest_palindrome) or (len(substr) == len(longest_palindrome) and substr < longest_palindrome): longest_palindrome = substr # Check diagonals # Top left to bottom right for i in range(r + c - 1): diagonal = [] for j in range(max(i - r + 1, 0), min(i + 1, c)): diagonal.append(grid[i - j][j]) diagonal_str = \'\'.join(diagonal) for start in range(len(diagonal_str)): for end in range(start + 1, len(diagonal_str) + 1): substr = diagonal_str[start:end] if is_palindrome(substr): if len(substr) > len(longest_palindrome) or (len(substr) == len(longest_palindrome) and substr < longest_palindrome): longest_palindrome = substr # Bottom left to top right for i in range(r + c - 1): diagonal = [] for j in range(max(i - r + 1, 0), min(i + 1, c)): diagonal.append(grid[r - 1 - (i - j)][j]) diagonal_str = \'\'.join(diagonal) for start in range(len(diagonal_str)): for end in range(start + 1, len(diagonal_str) + 1): substr = diagonal_str[start:end] if is_palindrome(substr): if len(substr) > len(longest_palindrome) or (len(substr) == len(longest_palindrome) and substr < longest_palindrome): longest_palindrome = substr return longest_palindrome"},{"question":"You are working on a new graph analysis tool for social network analysis. One of the tasks you need to accomplish is detecting communities within the network. A community in this context is defined as a subset of users (nodes) where each user is directly connected (with an edge) to every other user within the subset. Given an undirected graph with `n` nodes and `m` edges, your task is to identify the largest community in the graph. If there are multiple communities with the same maximum size, you may return any one of them. Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ n*(n-1)/2) — the number of nodes and edges, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an undirected edge between nodes `u` and `v`. Output - Print an integer representing the size of the largest community. Examples Input ``` 5 6 1 2 1 3 1 4 2 3 2 4 3 4 ``` Output ``` 4 ``` Input ``` 5 4 1 2 1 3 2 3 4 5 ``` Output ``` 3 ``` Input ``` 3 0 ``` Output ``` 1 ``` Note In the first example, the nodes 1, 2, 3, and 4 form a community where each node is connected to the others. In the second example, the maximum community size is 3, with nodes 1, 2, and 3 being fully connected. In the third example, there are no edges, so each node forms a community of size 1 by itself.","solution":"def largest_community(n, m, edges): from itertools import combinations if m == 0: return 1 adjacency_list = {i: set() for i in range(1, n + 1)} for u, v in edges: adjacency_list[u].add(v) adjacency_list[v].add(u) max_size = 1 for size in range(n, 1, -1): for subset in combinations(range(1, n + 1), size): if all(u in adjacency_list[v] for u, v in combinations(subset, 2)): max_size = max(max_size, size) break if max_size == size: break return max_size"},{"question":"You are given an array of integers and a target sum. Your task is to find the number of pairs of indices (i, j) such that i < j and the sum of elements at these indices is equal to the given target sum. Input Format: The first line contains a single integer T, the number of test cases. Each of the test case consists of N (the length of the array) and S (the target sum) in one line, followed by N space-separated integers in the next line. Output Format: For each test case, print the required answer. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ S ≤ 10^9 Sum of N over all test cases will not exceed 10^5. Sample Input: 1 5 4 1 2 3 1 5 Sample Output: 2 Explanation: In the given array, there are two pairs of indices (0, 2) and (1, 3) where the sum of elements at these indices is equal to the target sum 4.","solution":"def count_pairs_with_target_sum(test_cases): This function takes a list of test cases and returns the number of pairs of indices (i, j) such that i < j and the sum of elements at these indices is equal to the target sum for each test case. Parameters: test_cases (list): A list of tuples, where each tuple contains N (length of the array), S (target sum), and an array of integers. Returns: list: A list of integers representing the count of pairs for each test case. results = [] for N, S, array in test_cases: pair_count = 0 seen = {} # To store occurrences of elements for number in array: if S - number in seen: pair_count += seen[S - number] if number in seen: seen[number] += 1 else: seen[number] = 1 results.append(pair_count) return results"},{"question":"**Problem Statement** Alice and Bob are playing a card game with a standard deck of 52 cards. Each player is dealt a hand of 5 cards. The game consists of a single round, and the winner is determined by who has the higher ranking hand according to the common poker hand rankings: High Card, One Pair, Two Pair, Three of a Kind, Straight, Flush, Full House, Four of a Kind, Straight Flush, and Royal Flush. You have been given the task to write a program to determine which player wins or if the game is a tie based on the hands dealt to Alice and Bob. **Input** The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains Alice\'s hand, and the second line contains Bob\'s hand. Each hand is represented by 5 space-separated cards. Each card is a two-character string where the first character represents the rank (2-9, T, J, Q, K, A) and the second character represents the suit (S, H, D, C). **Output** For each test case, output a single line containing \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Tie\\" if it\'s a draw. **Constraints** 1 ≤ T ≤ 10000 **Example** ``` Input: 3 TS JS QS KS AS 9H 9D 9S 3C 3D 2H 3H 4H 5H 6H 2D 3D 4D 5D 6D AH KH QH JH TH 2C 2H 2D 3S 3H Output: Alice Tie Alice ``` **Explanation** 1. In the first test case, Alice has a Royal Flush and Bob has a Full House. Royal Flush beats Full House, so Alice wins. 2. In the second test case, both Alice and Bob have a Straight Flush of the same rank sequence. Therefore, it\'s a tie. 3. In the third test case, Alice has a Royal Flush, and Bob has a Full House. Alice wins with a Royal Flush.","solution":"from collections import Counter def card_value(card): Helper function to get the value of a card value_str = \\"23456789TJQKA\\" return value_str.index(card[0]) def hand_rank(hand): Returns a tuple representing the rank of the hand values = sorted([card_value(card) for card in hand], reverse=True) value_counts = Counter(values) counts = sorted(value_counts.values(), reverse=True) if len(value_counts) == 5: # Possibility of Straight or Flush is_flush = len(set(card[1] for card in hand)) == 1 is_straight = values == list(range(values[0], values[0] - 5, -1)) if is_straight and is_flush: return (8, values[0]) if values[0] != 12 else (9,) # 8 for Straight Flush, 9 for Royal Flush if is_straight: return (4, values[0]) # Straight if is_flush: return (5, values) # Flush return (0, values) # High Card if counts == [4, 1]: four_value = value_counts.most_common(1)[0][0] kicker = [v for v in values if v != four_value][0] return (7, four_value, kicker) # Four of a Kind if counts == [3, 2]: three_value = value_counts.most_common(1)[0][0] pair_value = value_counts.most_common(2)[1][0] return (6, three_value, pair_value) # Full House if counts == [3, 1, 1]: three_value = value_counts.most_common(1)[0][0] kickers = sorted([v for v in values if v != three_value], reverse=True) return (3, three_value, kickers) # Three of a Kind if counts == [2, 2, 1]: two_pair_values = [v for v, count in value_counts.items() if count == 2] kicker = [v for v in values if v not in two_pair_values][0] return (2, sorted(two_pair_values, reverse=True), kicker) # Two Pair if counts == [2, 1, 1, 1]: pair_value = value_counts.most_common(1)[0][0] kickers = sorted([v for v in values if v != pair_value], reverse=True) return (1, pair_value, kickers) # One Pair def compare_hands(alice, bob): Compare two hands and determine the winner alice_rank = hand_rank(alice) bob_rank = hand_rank(bob) if alice_rank > bob_rank: return \\"Alice\\" if bob_rank > alice_rank: return \\"Bob\\" return \\"Tie\\" def poker_game_outcome(test_cases): results = [] for alice, bob in test_cases: result = compare_hands(alice, bob) results.append(result) return results"},{"question":"A small town has built a network of bridges connecting several islands. Each island is represented by a node, and each bridge by an edge. The bridges can be directed or undirected, and there may be multiple bridges between two islands. The town wants to know if it\'s possible to traverse from one specific island to another, taking into account the direction of the bridges. You need to write a program that determines if one can travel from island A to island B given the network of bridges. Input - The first line contains two integers N and M (1 ≤ N ≤ 500, 1 ≤ M ≤ 2000) - the number of islands and the number of bridges, respectively. - The next M lines each contain three integers u, v, and d (1 ≤ u, v ≤ N, u ≠ v, d ∈ {0, 1}). The integers u and v represent an island pair connected by a bridge. The integer d is 0 if the bridge is undirected and 1 if the bridge is directed from u to v. - The last line contains two integers A and B (1 ≤ A, B ≤ N) representing the starting island A and the destination island B. Output - Print \\"YES\\" if there is a path from island A to island B; otherwise, print \\"NO\\". Examples Input ```plaintext 5 6 1 2 0 1 3 1 2 4 1 3 4 1 4 5 0 4 3 0 1 5 ``` Output ```plaintext YES ``` Input ```plaintext 4 3 1 2 1 2 3 1 3 1 1 1 4 ``` Output ```plaintext NO ``` Input ```plaintext 3 2 1 2 0 2 3 0 3 1 ``` Output ```plaintext YES ```","solution":"from collections import deque def can_traverse(N, M, bridges, A, B): Determines if there is a path from island A to island B. Parameters: N (int): Number of islands. M (int): Number of bridges. bridges (list of tuple): List of tuples containing (u, v, d) which denotes a bridge. A (int): Start island. B (int): Destination island. Returns: str: \\"YES\\" if there is a path from A to B, otherwise \\"NO\\". # Create adjacency list graph = [[] for _ in range(N + 1)] for u, v, d in bridges: if d == 0: # undirected bridge graph[u].append(v) graph[v].append(u) else: # directed bridge graph[u].append(v) # Breadth-first search (BFS) to determine if B is reachable from A queue = deque([A]) visited = [False] * (N + 1) visited[A] = True while queue: current = queue.popleft() if current == B: return \\"YES\\" for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\""},{"question":"Garden Watering Automation Farmer Bob has a rectangular garden that can be divided into smaller rectangular plots. Each plot has specific watering needs, and Bob wants to automate the watering process using a watering robot. The robot can water plots in a sequence and can move either row-wise or column-wise. You need to help Bob determine the minimum distance the robot will travel to water all the plots if it starts at one plot and visits every other plot exactly once. The garden is represented as a 2D grid of size `m x n`, and each cell of the grid represents a plot. The robot can travel between two adjacent plots (horizontally or vertically) with a distance of 1 unit. # Problem Given the dimensions of the garden and the coordinates of each plot that needs watering, calculate the minimum total distance the watering robot will travel to water all required plots. The robot can start from any plot and should visit all plots exactly once. # Input - The first line contains two integers `m` and `n` which represent the dimensions of the garden (number of rows and columns respectively). - The second line contains an integer `k`, the number of plots that need watering. - The next `k` lines each contain two integers `x` and `y`, which represent the coordinates of a plot that needs watering (1-based indexing). # Output - Print a single integer representing the minimum total distance the watering robot will travel to water all required plots. # Constraints - 2 ≤ m, n ≤ 10 - 1 ≤ k ≤ m * n - 1 ≤ x ≤ m - 1 ≤ y ≤ n # Example Input 1 ``` 5 5 3 2 2 4 4 3 3 ``` Output 1 ``` 4 ``` Input 2 ``` 3 3 4 1 1 1 3 3 1 3 3 ``` Output 2 ``` 6 ``` Explanation 1. For the first example, one possible path for minimal distance is: (2,2) -> (3,3) -> (4,4), with total distance 2+2 = 4. 2. For the second example, one possible path for minimal distance is: (1,1) -> (1,3) -> (3,3) -> (3,1), with total distance 2+2+2 = 6.","solution":"from itertools import permutations def min_watering_distance(m, n, k, plots): :param m: Number of rows in the garden :param n: Number of columns in the garden :param k: Number of plots that need watering :param plots: List of coordinates for the plots that need watering :return: Minimum total distance the robot will travel to water all required plots def calculate_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) min_distance = float(\'inf\') for perm in permutations(plots): current_distance = 0 for i in range(len(perm) - 1): current_distance += calculate_distance(perm[i], perm[i+1]) min_distance = min(min_distance, current_distance) return min_distance # Example usage if __name__ == \\"__main__\\": m, n = 5, 5 k = 3 plots = [(2, 2), (4, 4), (3, 3)] print(min_watering_distance(m, n, k, plots))"},{"question":"Given an array of integers, determine the maximum sum possible by selecting a subset of non-adjacent elements. The subset must satisfy the condition that no two elements in the subset are adjacent in the original array. More formally, given an array `arr` of `n` integers, find the maximum sum of a subset `s` such that for any two elements `arr[i]` and `arr[j]` in `s`, the condition `|i - j| > 1` holds true. Input The input consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 105), the length of the array. - The second line contains `n` space-separated integers that represent the elements of the array. The values of these integers are |arr[i]| ≤ 104. Output Output a single integer, the maximum sum of the subset as described. Example Input 5 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 Input 3 3 5 -7 Output 5 Note In the first sample, the optimal subset is `[3, 10]` which sums to `13`. In the second sample, the optimal subset is `[3, 10]` or `[3, 7]` (both sum to `13`). In the third sample, the optimal subset is `[3, 5]` which sums to `5`.","solution":"def max_non_adjacent_sum(n, arr): Returns the maximum sum of non-adjacent elements from the input array. :param n: length of the array :param arr: list of integers :return: maximum sum of non-adjacent elements if n == 0: return 0 elif n == 1: return max(0, arr[0]) prev_two = 0 prev_one = max(0, arr[0]) for i in range(1, n): current = max(prev_one, prev_two + max(0, arr[i])) prev_two = prev_one prev_one = current return prev_one"},{"question":"A certain botanical garden contains a plethora of unique species of plants. Each plant species is thoroughly cataloged with its water requirement measured in liters. The garden management systems need an efficient way to manage water distribution to the plants. You need to write a function that, when given a list of unique plant species\' water requirements and a target water requirement, determines whether there is a combination of plants whose total water requirement equals the target water requirement. You should use a dynamic programming approach to solve this problem efficiently. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the number of plant species. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the water requirements of each plant species. - The third line contains a single integer target (1 ≤ target ≤ 10000) — the desired total water requirement. Output - Print \\"YES\\" if there is a combination of plant species whose total water requirement equals the target. Otherwise, print \\"NO\\". Examples Input: 5 1 2 3 4 5 9 Output: YES Input: 3 10 20 30 25 Output: NO Note: In the first example, the combination 4 + 5 equals the target 9, hence the answer is \\"YES\\". In the second example, no combination of the given plant water requirements can sum up to 25, so the answer is \\"NO\\".","solution":"def can_meet_water_requirement(n, water_requirements, target): Determine if there is a combination of plant species whose total water requirement equals the target. Parameters: n (int): The number of plant species. water_requirements (list): List of integers representing water requirements of each plant species. target (int): The desired total water requirement. Returns: str: \\"YES\\" if a combination exists, otherwise \\"NO\\". dp = [False] * (target + 1) dp[0] = True for requirement in water_requirements: for j in range(target, requirement - 1, -1): if dp[j - requirement]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Background The National Robotics Competition for high school students is nearing, and Alex is preparing to participate in the maze-running challenge. This particular challenge involves navigating a robot through a maze grid depicted with walls and open spaces. Alex has devised an algorithm to help the robot find the shortest path from a starting position to an ending position. Unfortunately, he is facing difficulty getting the algorithm right. He has therefore requested your help to write a program to solve the problem for him. Problem You are given a 2D grid maze of size `MxN`, where \'0\' represents an open space and \'1\' represents a wall. The robot can only move up, down, left, or right through open spaces. Alex needs your help writing a program to determine the length of the shortest path from the starting position (S) to the goal position (G). If there is no path, return -1. The start position (S) and goal position (G) are given as coordinates within the grid. Ensure that in the provided maze, both the start and goal positions are guaranteed to be open spaces. Input The first line contains two integers, M and N, the dimensions of the grid (1 ≤ M, N ≤ 100). The next M lines contain N characters (\'0\' or \'1\') representing the grid\'s rows. The next line contains the coordinates of the start position `(Sx, Sy)` (0 ≤ Sx < M, 0 ≤ Sy < N). The final line contains the coordinates of the goal position `(Gx, Gy)` (0 ≤ Gx < M, 0 ≤ Gy < N). Output Output a single integer representing the length of the shortest path from start to goal. If there is no path, output -1. Examples Input 3 5 00000 01010 00000 0 0 2 4 Output 6 Input 4 4 0010 1010 1010 1010 0 0 3 3 Output -1","solution":"from collections import deque def shortest_path_length(maze, start, goal): Determines the length of the shortest path from start to goal in a maze. Parameters: maze (list of list of str): The grid maze. start (tuple of int): The coordinates (Sx, Sy) of the start position. goal (tuple of int): The coordinates (Gx, Gy) of the goal position. Returns: int: The length of the shortest path, or -1 if no path exists. M = len(maze) N = len(maze[0]) visited = [[False for _ in range(N)] for _ in range(M)] queue = deque([(start[0], start[1], 0)]) visited[start[0]][start[1]] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y, dist = queue.popleft() if (x, y) == goal: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and maze[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a string representing a chemical formula. The string consists of uppercase and lowercase English letters, representing element symbols, optionally followed by a positive integer indicating the number of atoms of that element present in the molecule. If no number is present, it is assumed that exactly one atom of that element is present. Your task is to compute the number of atoms of each element in the compound and return it as a string. The output string should list the elements in alphabetical order, followed by their quantities. If the quantity of an element is 1, it should not be followed by a number. Input The input contains a single string s, representing the chemical formula (1 ≤ |s| ≤ 1000). Output Return a string representing the number of atoms of each element in the compound in the specified format. Examples Input \\"H2O\\" Output \\"H2O\\" Input \\"Mg(OH)2\\" Output \\"H2MgO2\\" Input \\"K4(ON(SO3)2)2\\" Output \\"K4N2O14S4\\" Input \\"Be32\\" Output \\"Be32\\"","solution":"import re from collections import defaultdict def count_of_atoms(formula: str) -> str: def parse(formula): stack = [defaultdict(int)] i = 0 while i < len(formula): if formula[i] == \'(\': stack.append(defaultdict(int)) i += 1 elif formula[i] == \')\': top = stack.pop() i += 1 i_start = i while i < len(formula) and formula[i].isdigit(): i += 1 multi = int(formula[i_start:i] or 1) for elem, cnt in top.items(): stack[-1][elem] += cnt * multi else: i_start = i i += 1 while i < len(formula) and formula[i].islower(): i += 1 elem = formula[i_start:i] i_start = i while i < len(formula) and formula[i].isdigit(): i += 1 cnt = int(formula[i_start:i] or 1) stack[-1][elem] += cnt return stack.pop() counts = parse(formula) output = [] for elem in sorted(counts): count = counts[elem] output.append(elem) if count > 1: output.append(str(count)) return \'\'.join(output)"},{"question":"You are given a matrix consisting of n rows and m columns, each cell containing a single lowercase alphabet character. You are also given a word and you need to determine if the word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a program to find if the word exists in the matrix. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) representing the number of rows and columns of the matrix, respectively. The next n lines contain m lowercase alphabet characters each, representing the matrix. The last line contains a single string word, consisting of lowercase alphabet characters, with length between 1 and 1000. # Output Output \\"YES\\" if the word exists in the matrix, otherwise print \\"NO\\". # Example Input 3 4 a b c e s f c s a d e e abcced Output YES Input 3 4 a b c e s f c s a d e e abcd Output NO # Explanation Example 1: The word \\"abcced\\" can be constructed from the matrix by the path: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) Example 2: The word \\"abcd\\" cannot be constructed from the matrix.","solution":"def exists_in_matrix(matrix, word): n = len(matrix) m = len(matrix[0]) word_length = len(word) def dfs(x, y, index): if index == word_length: return True if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] != word[index]: return False # Mark the current cell as visited by replacing it with a placeholder temp = matrix[x][y] matrix[x][y] = \'#\' # Explore all possible directions found = any(dfs(x + dx, y + dy, index + 1) for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]) # Backtrack by restoring the current cell matrix[x][y] = temp return found for i in range(n): for j in range(m): if matrix[i][j] == word[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\" # Function to parse input directly def word_exists_from_input(n_m_matrix_word): lines = n_m_matrix_word.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [] for i in range(1, n + 1): matrix.append(lines[i].split()) word = lines[n + 1] return exists_in_matrix(matrix, word)"},{"question":"You are given a grid of M × N size initially filled with integers. You are allowed to perform the following operations: choose any cell (i, j) and increase its value by 1, along with increasing the value of all its directly adjacent cells (vertically and horizontally) by 1 as well. The objective is to achieve a grid where all values are equal. Write a program that finds the sequence of operations that equalizes the grid values. The sequence of operations should not necessarily be the shortest, but you should not exceed the limit of 10,000 operations. It is guaranteed that a solution always exists. Input The input data are represented by M lines containing N integers each. These lines form the initial grid. Output On the first line, print the number n, which is the number of operations. On the next n lines, print the sequence of operations one per line. Each operation is described by two integers i and j (1-indexed), representing the coordinates of the cell which was increased. The number of operations should not exceed 10,000. If there are several solutions, print any of them. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 4 2 2 2 3 3 2 3 3","solution":"def equalize_grid(grid): Function to equalize the grid values by performing the specified operations. Parameters: grid (list of list of int): The initial grid filled with integers. Returns: tuple of (int, list of tuple of int): The number of operations and the list of operations. M = len(grid) N = len(grid[0]) operations = [] # Flatten grid and find the maximum value flat_grid = [cell for row in grid for cell in row] max_value = max(flat_grid) # Number of times each cell needs to be increased. increments = [[max_value - cell for cell in row] for row in grid] # Apply the operations to make the grid uniform. for i in range(M): for j in range(N): for _ in range(increments[i][j]): operations.append((i + 1, j + 1)) if len(operations) > 10000: return 10000, operations[:10000] return len(operations), operations # Example usage: input_grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] num_operations, operation_list = equalize_grid(input_grid) print(num_operations) for op in operation_list: print(op[0], op[1])"},{"question":"You are given an infinite 2D grid. On this grid, there is a robot starting at position (0, 0). The robot can move in one of four directions: up, down, left, and right. However, due to an error in its program, it can only make three types of moves: - Move Up by 2 units and Left by 1 unit. - Move Up by 1 unit and Right by 2 units. - Move Down by 1 unit and Right by 2 units. Given a target position (x, y), your task is to determine whether the robot can reach this target position using any number of the allowed moves. Input The input consists of a single line containing two integers x and y (−10^3 ≤ x, y ≤ 10^3) — the coordinates of the target position. Output Output \\"YES\\" if the robot can reach the position (x, y) using any number of the allowed moves. Otherwise, output \\"NO\\". Examples Input 2 3 Output YES Input -1 4 Output NO Note In the first example, the robot can reach (2, 3) by making the second move once (Up by 1 unit and Right by 2 units), followed by the first move (Up by 2 units and Left by 1 unit). In the second example, there is no way to reach the position (-1, 4) using any combination of the three allowable moves. [Note 2]: To think through the solution, you should observe that each allowed move performs a specific transfomation on the robot\'s coordinates. By modeling the transformations, you can deduce conditions under which the robot can or cannot reach any given coordinate (x, y).","solution":"def can_reach(x, y): Determines if the robot can reach the target position (x, y) using the allowed moves. # We need to check if there exist non-negative integers a, b, and c such that: # x = -1 * a + 2 * b + 2 * c # y = 2 * a + b - c for a in range(1001): for b in range(1001): c1 = x - 2 * b - 2 * (y - 2 * a - b) c2 = (y - 2 * a - b) if c1 == 0 and c2 >= 0: return \\"YES\\" if c1 != 0: c = c2 + 1 + (c1 + 2 - 1) // 2 if x == -1 * a + 2 * b + 2 * c and y == 2 * a + b - c: return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected connected graph with `n` vertices and `m` edges. Each vertex `i` has an integer cost `c_i` associated with it. You can pick a maximum of `k` vertices from this graph such that the sum of the costs of the chosen vertices is minimized. Additionally, the chosen vertices must form a connected subgraph of the original graph. Your task is to find the minimum possible sum of the costs that can be obtained by selecting up to `k` vertices that form a connected subgraph. Input The first line contains three integers `n`, `m`, and `k` (1 ≤ `n` ≤ 300, 0 ≤ `m` ≤ 10^4, 1 ≤ `k` ≤ n) — the number of vertices, the number of edges, and the maximum number of vertices you can choose respectively. The second line contains `n` integers `c_1, c_2, ..., c_n` (1 ≤ `c_i` ≤ 10^4) — the costs associated with the vertices. The next `m` lines describe the edges. Each edge is described by two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), which indicate that there is an undirected edge between vertices `u` and `v`. Output Print a single integer — the minimum possible sum of the costs of up to `k` vertices forming a connected subgraph. Examples Input 3 2 2 10 20 30 1 2 2 3 Output 30 Input 4 3 3 1 10 100 1 1 2 2 3 3 4 Output 12 Explanation In the first example: - You can select vertices 1 and 2, which have costs 10 and 20 respectively. This gives you a sum of 30. In the second example: - You can select vertices 1, 2, and 4, which have costs 1, 10, and 1 respectively. This gives you a sum of 12.","solution":"from collections import defaultdict, deque import heapq def min_subgraph_cost(n, m, k, costs, edges): # Function to run BFS and return a graph component def bfs(start): visited = set() queue = deque([start]) component = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) component.append(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return component # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find all components all_components = [] visited_nodes = set() for node in range(1, n+1): if node not in visited_nodes: component = bfs(node) all_components.append(component) visited_nodes.update(component) # Function to select up to k vertices from a given component to minimize the cost def minimize_cost_in_component(component, k): if len(component) <= k: return sum(costs[node-1] for node in component) else: return sum(heapq.nsmallest(k, [costs[node-1] for node in component])) # Iterate through all components to find the minimum possible sum for up to k vertices min_sum = float(\'inf\') for component in all_components: min_sum = min(min_sum, minimize_cost_in_component(component, k)) return min_sum # Test cases if __name__ == \\"__main__\\": print(min_subgraph_cost(3, 2, 2, [10, 20, 30], [(1, 2), (2, 3)])) # Expected output: 30 print(min_subgraph_cost(4, 3, 3, [1, 10, 100, 1], [(1, 2), (2, 3), (3, 4)])) # Expected output: 12"},{"question":"Mira loves collecting vintage books. Every week, she visits different bookshops to find rare and old books to add to her collection. Each bookshop has a distinct variety of books and prices that change based on demand. This week, Mira has decided to buy books worth exactly a specified amount of money to complete her weekly collection quest. Given the prices of books in the bookshop and the exact amount of money Mira wants to spend, can you help her determine if it is possible to buy books whose total cost exactly matches the desired amount? Note that each book price can only be used once. Write a function: ```python def can_buy_books(prices: List[int], amount: int) -> bool: ``` # Input: - `prices`: A list of integers representing the prices of the books in the shop. - `amount`: An integer representing the exact amount of money Mira wants to spend. # Output: - Returns `True` if it is possible to buy books exactly worth the specified amount, otherwise returns `False`. # Constraint: - 1 ≤ len(prices) ≤ 1000 - 1 ≤ prices[i] ≤ 1000 - 1 ≤ amount ≤ 1000 # Example ```python can_buy_books([2, 3, 7, 8, 10], 11) ``` Returns `True` (since she can buy books priced 3 and 8). ```python can_buy_books([1, 2, 5, 6, 7], 12) ``` Returns `True` (since she can buy books priced 5 and 7). ```python can_buy_books([4, 5, 6, 7, 8], 3) ``` Returns `False` (since there are no combinations that sum up to 3).","solution":"from typing import List def can_buy_books(prices: List[int], amount: int) -> bool: Determines if it\'s possible to buy books whose total cost exactly matches the desired amount. # Initialize a list to keep track of possible sums possible_sums = [False] * (amount + 1) possible_sums[0] = True # Base case: sum of 0 is always achievable for price in prices: for current_sum in range(amount, price - 1, -1): if possible_sums[current_sum - price]: possible_sums[current_sum] = True return possible_sums[amount]"},{"question":"A group of friends is planning a treasure hunt game in a rectangular park. The park is represented as a grid of cells with dimensions `W x H` (W being the width and H being the height). Some of the cells contain obstacles, and no one can pass through these cells. The friends have a start position and a target position within the park and want to find out if there\'s a way to reach the target without crossing any obstacles. Given the park dimensions, the positions of obstacles, the start position, and the target position, create a program to determine if it is possible to reach the target from the start position. The park\'s grid is represented as follows: - 0: Empty cell (no obstacle) - 1: Cell with obstacle The goal is to find a path from the start cell to the target cell only moving up, down, left, or right. Diagonal movements are not allowed. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` W H ox1 oy1 ox2 oy2 :: oxk oyk sx sy tx ty END ``` Where: - `W` (1 ≤ W ≤ 100) is the width of the park. - `H` (1 ≤ H ≤ 100) is the height of the park. - `ox1 oy1` to `oxk oyk` are the coordinates of the obstacles (0 ≤ oxi < W, 0 ≤ oyi < H, k is the number of obstacles). - `sx sy` (0 ≤ sx < W, 0 ≤ sy < H) are the coordinates of the start position. - `tx ty` (0 ≤ tx < W, 0 ≤ ty < H) are the coordinates of the target position. The dataset ends with the keyword `END`. Multiple datasets are provided one after another. Output For each dataset, output `Reachable` if it\'s possible to reach the target from the start without crossing any obstacles, and `Unreachable` otherwise. Example Input ``` 5 5 1 2 2 2 3 2 4 2 0 0 4 4 END 4 4 1 0 1 1 1 2 1 3 0 0 3 3 END ``` Output ``` Reachable Unreachable ```","solution":"from collections import deque def is_reachable(W, H, obstacles, start, target): grid = [[0] * W for _ in range(H)] for ox, oy in obstacles: grid[oy][ox] = 1 sx, sy = start tx, ty = target if grid[sy][sx] == 1 or grid[ty][tx] == 1: return \\"Unreachable\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy)]) visited = set() visited.add((sx, sy)) while queue: x, y = queue.popleft() if (x, y) == (tx, ty): return \\"Reachable\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < W and 0 <= ny < H and grid[ny][nx] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"Unreachable\\""},{"question":"Mia is at a famous electronic music festival and she wants to record a memory of the unforgettable experience by arranging different tracks in a customized playlist. Each track is represented by its length in minutes. Mia has a special condition: to ensure smooth transitions, she needs to make sure that no two consecutive tracks in her playlist have lengths whose difference is less than a given number `d`. To do this, Mia can remove some of the tracks from the initial selection she made. She now wonders what is the smallest number of tracks that need to be removed in order to satisfy the condition. Can you help Mia with this task? Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the initial number of tracks Mia selected. The second line contains an integer `d` (0 ≤ d ≤ 10^5) — the minimum required difference between the lengths of consecutive tracks. The third line contains `n` integers separated by spaces, where each integer `a_i` (1 ≤ a_i ≤ 10^5) represents the length of the `i-th` track in minutes. Output Print a single integer — the smallest number of tracks that need to be removed so that the lengths of any two consecutive tracks in Mia\'s playlist have a difference of at least `d`. Example Input 5 3 1 4 7 10 11 Output 1 Input 4 5 10 20 30 40 Output 0 Note In the first example, by removing the last track of length 11, the playlist will be [1, 4, 7, 10] and all consecutive tracks have a difference of exactly 3, which is equal to `d`. In the second example, the selected playlist already satisfies the condition, so no tracks need to be removed.","solution":"def min_removals_for_conditions(n, d, track_lengths): Determines the minimum number of tracks to remove to satisfy the condition that no two consecutive tracks have lengths whose difference is less than `d`. track_lengths.sort() # Number of removals needed removals = 0 # Iterate through the sorted track lengths i = 0 while i < len(track_lengths) - 1: if track_lengths[i + 1] - track_lengths[i] < d: # Remove the track at i+1 (it could be i as well, but let\'s choose i+1) track_lengths.pop(i + 1) removals += 1 else: i += 1 return removals # Example usage: n = 5 d = 3 track_lengths = [1, 4, 7, 10, 11] print(min_removals_for_conditions(n, d, track_lengths)) # Output: 1"},{"question":"You are overseeing a system where multiple tasks need to be executed based on their priority. Each task has a unique identifier and a priority value. Your goal is to simulate a scenario where you process tasks in the order of their priority. Given a list of tasks, each characterized by a unique id, a description, and a priority value, you need to output the tasks in the order in which they should be processed (highest priority first). In case of tasks with the same priority, they should be processed in the order they appear in the input. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of tasks. - The next n lines each contain a string id, a string description, and an integer priority (1 ≤ priority ≤ 10^6). The id and description are non-empty strings consisting of alphanumeric characters and spaces, respectively, and no whitespace other than the description will be between the strings and integer in the input line. Output: - Output n lines, each containing the id and description of the tasks in the order they should be processed. Examples: Input: 5 task1 \\"Complete the report\\" 2 task2 \\"Review the code\\" 3 task3 \\"Fix the bug\\" 2 task4 \\"Attend the meeting\\" 1 task5 \\"Design the system\\" 3 Output: task2 \\"Review the code\\" task5 \\"Design the system\\" task1 \\"Complete the report\\" task3 \\"Fix the bug\\" task4 \\"Attend the meeting\\" Input: 3 taskA \\"Prepare presentation\\" 5 taskB \\"Email the client\\" 4 taskC \\"Update the database\\" 5 Output: taskA \\"Prepare presentation\\" taskC \\"Update the database\\" taskB \\"Email the client\\" Note: In the first example, tasks with the highest priority (value 3) are processed first, followed by priority 2, and finally priority 1. When tasks have the same priority, the order of their appearance in the input is maintained.","solution":"def process_tasks(task_list): Returns the tasks in the order in which they should be processed based on their priority. If tasks have the same priority, they should be processed in the order they appear in the input. # Sort tasks first by priority (descending) and then by the order they appeared in (ascending) sorted_tasks = sorted(task_list, key=lambda x: (-x[2], x[3])) # Prepare the output by formatting each task\'s id and description output = [f\'{task[0]} \\"{task[1]}\\"\' for task in sorted_tasks] return output"},{"question":"A company is organizing a talent show where participants can perform as individuals or form teams. The organizers want to support the maximum number of performance groups while ensuring that each performance group has a strong performer. Each participant has a performance score. The performance score of a group is defined as the performance score of the participant with the highest score in the group. The condition for a group to be considered strong is that the group\'s performance score must be at least a given threshold. You are given the performance scores of n participants and an integer threshold. Determine the maximum number of strong performance groups that can be formed. Input The first line contains two space-separated integers n and threshold (1 ≤ n ≤ 100, 1 ≤ threshold ≤ 100). The second line contains n space-separated integers indicating the performance scores of the participants. Output Print a single integer — the maximum number of strong performance groups. Example Input 5 3 1 2 3 4 5 Output 3 Input 4 6 1 2 3 4 Output 0 Note In the first sample, three groups can be formed with strong performers having scores 3, 4, and 5. In the second sample, there are no participants with a score of at least 6, so no groups can be formed.","solution":"def max_strong_groups(n, threshold, scores): Returns the maximum number of strong performance groups. Parameters: n (int): The number of participants threshold (int): The minimum performance score for a strong group scores (list of int): The performance scores of the participants Returns: int: The maximum number of strong performance groups # Count the number of scores that meet or exceed the threshold strong_performers = [score for score in scores if score >= threshold] # The number of strong groups is just the count of strong performers return len(strong_performers)"},{"question":"You are managing a warehouse logistics system, where you need to optimize the processing of N packages. Each package has a weight denoted by w_i. You need to group packages into batches such that the total weight of each batch does not exceed a given maximum weight limit, L. Additionally, you aim to use the minimum number of batches for processing all packages. Determine the minimum number of batches required to process all the packages. Constraints * All input values are integers. * 1 ≤ N ≤ 10^5 * 1 ≤ L ≤ 10^9 * 1 ≤ w_i ≤ 10^9 Input Input is given from Standard Input in the following format: N L w_1 w_2 : w_N Output Print the minimum number of batches needed to process all the packages. Examples Input 5 10 2 3 5 8 2 Output 3 Input 3 15 5 8 8 Output 2 Input 4 7 4 4 4 4 Output 4","solution":"def min_batches(N, L, weights): weights.sort() batches = 0 i, j = 0, N - 1 while i <= j: if weights[i] + weights[j] <= L: i += 1 j -= 1 batches += 1 return batches if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) L = int(data[1]) weights = list(map(int, data[2:N+2])) print(min_batches(N, L, weights))"},{"question":"Given a list of integers, your task is to reorder these integers to form the largest possible number. Input The input consists of a line containing a single integer n (1 ≤ n ≤ 10^5), the number of integers. The next line contains n non-negative integers, each of which is at most 10^9. Output Output a single line containing the largest possible number that can be formed by combining the input integers. Examples Input 3 3 30 34 Output 34330 Input 5 9 89 90 91 92 Output 992919089 Note In the first sample, the largest number formed by rearranging the integers 3, 30, and 34 is 34330. In the second sample, rearranging the integers 9, 89, 90, 91, and 92 forms the number 992919089.","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(n, arr): Reorder a list of non-negative integers to form the largest possible number. arr = list(map(str, arr)) arr.sort(key=cmp_to_key(compare)) largest_num = \'\'.join(arr) # Edge case for multiple zeros if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Given an array of integers `A`, and a number `K`, your task is to determine if there exists a pair of integers in the array whose sum is exactly `K`. Input format - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the size of the array. - The second line contains `N` space-separated integers representing the elements of the array. Each integer is between -10^9 and 10^9, inclusive. - The third line contains the integer `K` (-2*10^9 ≤ K ≤ 2*10^9). Output format Print \\"YES\\" if there exists a pair of integers in the array whose sum is exactly `K`. Otherwise, print \\"NO\\". Input example 1 5 2 7 11 15 1 9 Output example 1 YES Explanation 1 In the array [2, 7, 11, 15, 1], the pair (2, 7) sums to 9. Input example 2 4 1 2 3 4 8 Output example 2 NO Explanation 2 In the array [1, 2, 3, 4], there are no pairs that sum up to 8.","solution":"def two_sum_exists(arr, K): Determines if there exists a pair of integers in the array whose sum is exactly K. Args: arr (list): List of integers. K (int): The target sum. Returns: str: \'YES\' if such a pair exists, \'NO\' otherwise. seen = set() for number in arr: if (K - number) in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"The Kingdom of Zora is under attack by alien spacecrafts. To defend the kingdom, Queen Zera commissioned a powerful defense mechanism called Zera\'s Laser. Zera\'s Laser can fire a laser beam that can destroy all spacecrafts in a straight line. The laser can be fired in a horizontal or vertical direction, but it consumes a significant amount of power, and thus the number of laser beams fired should be minimized. Your task is to write a program to determine the minimum number of laser beams required to destroy all the alien spacecrafts. You can assume the following: * the spacecrafts are represented as points on a 2D plane; * each spacecraft can be destroyed by a laser beam if it touches or crosses the point where the spacecraft is located; Input The input consists of an integer sequence. The first integer indicates M (M ≤ 1,000). Each of the following M lines contains two integers indicating the x and y coordinates of a spacecraft respectively. You can assume that every coordinate is an integer and each coordinate may not exceed 10,000 in absolute value. Output Output the minimum number of laser beams required to destroy all the spacecrafts. Example Input 5 1 2 2 2 3 3 5 3 6 3 Output 2","solution":"def minimum_laser_beams(m, spacecrafts): Finds the minimum number of laser beams required to destroy all spacecrafts. :param m: Number of spacecrafts :param spacecrafts: List of tuples containing x, y coordinates of each spacecraft :return: Minimum number of laser beams required if m == 0: return 0 # Using sets to keep track of unique x and y coordinates x_coords = set() y_coords = set() for x, y in spacecrafts: x_coords.add(x) y_coords.add(y) # The minimum beams will be the smaller of either unique x or y coordinates return min(len(x_coords), len(y_coords))"},{"question":"You are given an array of integers and you have to find a subset of this array such that the sum of the subset is divisible by a given integer k. There may be multiple such subsets possible, you need to find just one. Input: The first line of input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 1000) - the size of the array and the integer k. The second line contains n integers (1 ≤ a[i] ≤ 1000) representing the array elements separated by spaces. Output: If there is no such subset, print -1. Otherwise, print the subset as space-separated integers. Each integer should be distinct and should maintain their order in the input array. If multiple solutions exist, print any. Examples: Input 5 5 3 1 4 2 5 Output 1 4 Input 6 9 1 2 3 4 5 6 Output 3 6","solution":"def subset_sum_divisible_by_k(n, k, arr): Finds a subset of the array arr such that the sum of the subset is divisible by k. If such a subset exists, returns the subset as a list. If no such subset exists, returns -1. from itertools import combinations # Check all non-empty subsets for r in range(1, n + 1): for subset in combinations(arr, r): if sum(subset) % k == 0: return list(subset) return -1 def parse_input_and_run(input_str): Helper function to parse input string and run the main function to get the output. input_lines = input_str.strip().split(\\"n\\") n, k = map(int, input_lines[0].split()) arr = list(map(int, input_lines[1].split())) return subset_sum_divisible_by_k(n, k, arr)"},{"question":"Given a matrix M of size N x M with integer entries, write a program to process Q queries. Each query consists of two integers r1 and r2 (0 ≤ r1, r2 < N). The query should return the sum of all the elements in the submatrix bounded by rows r1 and r2 (inclusive) and all columns. Constraints * 1 ≤ N, M ≤ 1000 * -1000 ≤ M[i][j] ≤ 1000 * 1 ≤ Q ≤ 10000 Input In the first line, two integers N and M are given representing the number of rows and columns of the matrix. The next N lines contain M integers each, representing the elements of the matrix. The following line contains an integer Q denoting the number of queries. Each of the next Q lines contains two integers r1 and r2. Output For each query, print the sum of the elements in the submatrix according to the specification. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 0 1 1 2 Output 21 39","solution":"def preprocess_sums(matrix, n, m): Preprocess the matrix to calculate the prefix sums of each column. This allows for quick calculations of sums between any two rows. prefix_sums = [[0] * m for _ in range(n)] for j in range(m): for i in range(n): if i == 0: prefix_sums[i][j] = matrix[i][j] else: prefix_sums[i][j] = prefix_sums[i-1][j] + matrix[i][j] return prefix_sums def query_sums(prefix_sums, r1, r2, m): Compute the sum of elements in the submatrix from row r1 to r2 (inclusive). Uses the precomputed prefix sums for efficient computation. if r1 == 0: return sum(prefix_sums[r2]) else: return sum(prefix_sums[r2][j] - prefix_sums[r1-1][j] for j in range(m)) def process_matrix_queries(n, m, matrix, q, queries): prefix_sums = preprocess_sums(matrix, n, m) results = [] for r1, r2 in queries: results.append(query_sums(prefix_sums, r1, r2, m)) return results # Main function to read input and process the matrix queries def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) index += 2 matrix = [] for i in range(n): row = list(map(int, data[index:index + m])) matrix.append(row) index += m q = int(data[index]) index += 1 queries = [] for _ in range(q): r1 = int(data[index]) r2 = int(data[index + 1]) queries.append((r1, r2)) index += 2 results = process_matrix_queries(n, m, matrix, q, queries) for result in results: print(result) # For unit testing, we can call `process_matrix_queries` function directly"},{"question":"You are given an array of integers `arr` of length `n`. Your task is to determine the number of unique triplets (i, j, k) such that i < j < k and arr[i] + arr[j] + arr[k] is divisible by 3. Input: - The first line contains an integer `n` (1 ≤ n ≤ 2000), denoting the length of the array. - The second line contains `n` space-separated integers representing the elements of the array, where each integer `arr[i]` (0 ≤ arr[i] ≤ 10000). Output: - Output a single integer, the number of unique triplets (i, j, k) such that i < j < k and arr[i] + arr[j] + arr[k] is divisible by 3. Example: Input: ``` 4 1 2 3 6 ``` Output: ``` 2 ``` Explanation: - The unique triplets are: - (0, 1, 2) where arr[0] + arr[1] + arr[2] = 1 + 2 + 3 = 6, which is divisible by 3. - (0, 2, 3) where arr[0] + arr[2] + arr[3] = 1 + 3 + 6 = 10, which is not divisible by 3. - (1, 2, 3) where arr[1] + arr[2] + arr[3] = 2 + 3 + 6 = 11, which is not divisible by 3. - (0, 1, 3) where arr[0] + arr[1] + arr[3] = 1 + 2 + 6 = 9, which is divisible by 3. Thus, the valid triplets are (0, 1, 2) and (0, 1, 3), resulting in an output of 2.","solution":"def count_divisible_by_3_triplets(arr): n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if (arr[i] + arr[j] + arr[k]) % 3 == 0: count += 1 return count # Example usage: # n = 4 # arr = [1, 2, 3, 6] # result = count_divisible_by_3_triplets(arr) # print(result) # Output: 2"},{"question":"Create a function that determines if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters, but possibly in a different order. Input: - The first line contains an integer t, the number of test cases. - The following t lines each contain a pair of strings separated by a space. Output: For each test case, print \\"YES\\" if the strings are anagrams of each other, otherwise, print \\"NO\\". Constraints: 1 ≤ t ≤ 1000 1 ≤ |string length| ≤ 100 Problem Setter: John Doe SAMPLE INPUT 4 listen silent triangle integral apple pplea hello holla SAMPLE OUTPUT YES YES YES NO Explanation Test case #1 - \'listen\' and \'silent\' contain the same characters with same frequencies, so they are anagrams. Test case #2 - \'triangle\' and \'integral\' contain the same characters with same frequencies, so they are anagrams. Test case #3 - \'apple\' and \'pplea\' contain the same characters with same frequencies, so they are anagrams. Test case #4 - \'hello\' and \'holla\' do not contain the same characters, so they are not anagrams.","solution":"def are_anagrams(str1, str2): Returns \\"YES\\" if str1 and str2 are anagrams of each other, otherwise \\"NO\\". return \\"YES\\" if sorted(str1) == sorted(str2) else \\"NO\\" def process_cases(t, cases): Processes multiple test cases and returns the results. results = [] for i in range(t): str1, str2 = cases[i] results.append(are_anagrams(str1, str2)) return results"},{"question":"You are given a string consisting of lowercase letters and the character \'*\'. Your task is to replace each \'*\' in the string with either \'a\', \'b\', or \'c\' in such a way that after replacing, the resulting string does not contain any consecutive identical characters. Input The input consists of one string s (1 ≤ |s| ≤ 1000) containing lowercase letters and the character \'*\'. Output Print the resulting string after replacing all \'*\' characters. If there are multiple possible answers, print any of them. Examples Input a*b Output acb Input **a** Output aba Input abcd Output abcd","solution":"def replace_asterisks(s): Replace each \'*\' in the string with either \'a\', \'b\', or \'c\' such that the resulting string does not contain any consecutive identical characters. s = list(s) n = len(s) for i in range(n): if s[i] == \'*\': for char in \'abc\': if (i == 0 or s[i-1] != char) and (i == n-1 or s[i+1] != char): s[i] = char break return \'\'.join(s)"},{"question":"Given an integer array `nums` of size `n`, your task is to find a contiguous subarray that has the largest product, and return the product. Input - The first line contains an integer `n` (1 ≤ n ≤ 200), which represents the size of the array. - The second line contains `n` space-separated integers representing the elements of the array `nums` (−10 ≤ nums[i] ≤ 10). Output - Output a single integer representing the largest product of a contiguous subarray within the given array. Examples Input 4 2 3 -2 4 Output 6 Input 5 -2 0 -1 4 5 Output 20 Input 3 -1 -3 -10 Output 30 Note Consider the first sample: - The subarray [2, 3] has the largest product (2 * 3 = 6). Consider the second sample: - The subarray [4, 5] has the largest product (4 * 5 = 20). Consider the third sample: - The subarray [-1, -3, -10] has the largest product (-1 * -3 * -10 = 30).","solution":"def max_product_subarray(nums): Find the contiguous subarray within an array that has the largest product. if not nums: return 0 max_prod = nums[0] min_prod = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"You and your friend Maya are engaged in a puzzle involving matrices. You have been given an n x m matrix filled with integers. Your task is to rotate this matrix 90 degrees clockwise k times. A single 90-degree clockwise rotation of a matrix involves: 1. Translating each element at position (i, j) to position (j, n-i-1) in the new matrix. 2. Perform this k times. The result after k rotations should be calculated and displayed. # Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains three integers `n` (1 ≤ n ≤ 100), `m` (1 ≤ m ≤ 100), and `k` (0 ≤ k ≤ 10^9) — the dimensions of the matrix and the number of times the matrix needs to be rotated. - The next `n` lines contain `m` integers, where each line represents a row of the matrix. # Output For each test case, output the resulting matrix after `k` rotations. Each row of the matrix should be printed on a new line, with the values separated by spaces. # Example Input ``` 2 3 3 1 1 2 3 4 5 6 7 8 9 2 3 2 1 2 3 4 5 6 ``` Output ``` 7 4 1 8 5 2 9 6 3 6 5 4 3 2 1 ``` # Explanation For the first test case, the 3x3 matrix is rotated 1 time: ``` Initial Matrix: 1 2 3 4 5 6 7 8 9 After 1 Rotation: 7 4 1 8 5 2 9 6 3 ``` For the second test case, the 2x3 matrix is rotated 2 times: ``` Initial Matrix: 1 2 3 4 5 6 After 1 Rotation: 4 1 5 2 6 3 After 2 Rotations: 6 5 4 3 2 1 ```","solution":"def rotate_90_clockwise(matrix): return list(zip(*matrix[::-1])) def rotate_matrix(matrix, k): # Determine the effective number of rotations k = k % 4 for _ in range(k): matrix = rotate_90_clockwise(matrix) return matrix def process_test_cases(test_cases): results = [] for n, m, k, matrix in test_cases: rotated_matrix = rotate_matrix(matrix, k) results.append(rotated_matrix) return results"},{"question":"You are given an array of n integers, and m queries. Each query consists of two integers a and b, representing the indices of the array. For each query, you need to determine the sum of all elements between indices a and b (inclusive). Input The first line contains two integers n and m (1 ≤ n, m ≤ 3·10^5) — the number of elements in the array and the number of queries. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. Each of the next m lines contains two integers a and b (1 ≤ a ≤ b ≤ n) — the indices for the query. Output For each query, print the sum of the elements between indices a and b (inclusive). Example Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Note In the first query, the sum of elements from index 1 to 3 is 1+2+3 = 6. In the second query, the sum of elements from index 2 to 4 is 2+3+4 = 9. In the third query, the sum of elements from index 1 to 5 is 1+2+3+4+5 = 15. To efficiently answer each query, you may use a prefix sum array.","solution":"def prefix_sum(array, queries): This function takes an array and a list of queries and returns a list of sums for each query. Parameters: array (list of int): The array of integers queries (list of tuple): A list of queries, each query is a tuple (a, b) representing indices Returns: list of int: A list of sums for each query n = len(array) # Step 1: Create a prefix sum array prefix = [0] * (n + 1) for i in range(1, n + 1): prefix[i] = prefix[i-1] + array[i-1] # Step 2: Answer each query using the prefix sum array result = [] for a, b in queries: result.append(prefix[b] - prefix[a-1]) return result"},{"question":"Alice loves strings and numbers. She has two strings A and B, both made up of digits. She can choose to transform string A by adding any one of its substrings to another of its substrings (the two substrings cannot overlap). She can perform this operation as many times as she wants. The goal is to determine if it is possible to transform string A into string B using the described operation. Let\'s denote a substring as a continuous sequence of characters in the string. For example, in the string \\"12345\\", \\"23\\" is a substring, but \\"25\\" is not. Your task is to determine if it is possible to transform string A into string B using the operation defined above. Input The input consists of two lines: The first line contains the string A (1 ≤ |A| ≤ 100). The second line contains the string B (1 ≤ |B| ≤ 100). Output Output one integer: 1 if it is possible to transform string A into string B, otherwise, output 0. Example Input 123 135 Output 0 Input 4444 8888 Output 1 Note: In the first example, it is not possible to transform \\"123\\" into \\"135\\" by adding any substring of \\"123\\" to another substring of \\"123\\". In the second example, by continuously adding a substring \\"4444\\" to itself, we can transform \\"4444\\" into \\"8888\\".","solution":"def can_transform_string(a, b): Determine if string A can be transformed into string B by adding any of its substrings to another of its substrings. # If length of the strings do not match, transformation is not possible if len(a) != len(b): return 0 # Convert both strings into integers for comparison and transformation int_a = int(a) int_b = int(b) # Check if int_b is a multiple of int_a, since we can only add the same number multiple times. if int_b % int_a == 0: return 1 return 0"},{"question":"Masha is an amateur astronomer who loves observing the night sky. She has a small telescope through which she observes various celestial objects. Masha has been carefully noting the start and end times of each celestial object she observes in a night. Each observation can be represented as an interval [start, end), where \'start\' is the time the observation begins, and \'end\' is the time the observation ends. Masha wants to find out how many non-overlapping intervals she observed in a night. An interval is considered non-overlapping if it does not share any time point with another interval. Given a list of observation intervals, can you determine the maximum number of non-overlapping intervals? **Input** The first line contains an integer n (1 ≤ n ≤ 2,000) — the number of observation intervals. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 10,000) which represent an interval Masha observed. **Output** Output a single integer — the maximum number of non-overlapping intervals Masha observed. **Examples** **Input** ``` 4 1 3 2 4 3 5 4 6 ``` **Output** ``` 2 ``` **Input** ``` 3 1 2 2 3 3 4 ``` **Output** ``` 3 ``` **Input** ``` 8 3 4 2 3 2 4 1 3 4 6 5 6 5 7 6 8 ``` **Output** ``` 4 ``` **Note** In the first example, the intervals [1,3) and [4,6) are non-overlapping. Selecting these intervals gives the maximum number of non-overlapping intervals, which is 2. In the second example, all intervals are non-overlapping since they only touch each other at the boundaries. Therefore, the maximum number of non-overlapping intervals is 3. In the third example, the intervals [1,3), [3,4), [4,6), and [6,8) are non-overlapping. Selecting these intervals gives the maximum number of non-overlapping intervals, which is 4.","solution":"def max_non_overlapping_intervals(intervals): Find the maximum number of non-overlapping intervals. :param intervals: List of tuples (start, end) representing observation intervals. :return: Maximum number of non-overlapping intervals. # Sort intervals by end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for interval in intervals: if interval[0] >= end_time: end_time = interval[1] count += 1 return count"},{"question":"Suppose you are given a network of computers where some pairs of computers are directly connected by cables. The problem involves calculating the total data transfer cost within the network. The cost to transfer data between two directly connected computers is given, and data can also be transferred indirectly through other computers. The transfer cost between two computers is defined as the minimum cost to transfer data between them, potentially passing through other computers in the network. Your task is to write a program that computes the minimum total data transfer cost for the entire network. Assume that the network is connected, meaning it is possible to transfer data between any two computers directly or indirectly through other computers. Input The first line of the input contains two space-separated integers n and m (1 ≤ n ≤ 500; 1 ≤ m ≤ 10000), where n is the number of computers and m is the number of cables. The following m lines describe the cables, each containing three integers u, v, and c (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ c ≤ 1000), representing a cable connecting computers u and v with a data transfer cost c. Output Print a single integer — the minimum total data transfer cost. Examples Input 4 4 1 2 3 2 3 4 3 4 2 4 1 5 Output 18 Input 3 3 1 2 1 2 3 2 1 3 3 Output 6","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree_cost(n, cables): cables.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 for u, v, c in cables: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: mst_cost += c union(parent, rank, root_u, root_v) return mst_cost def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) cables = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) c = int(data[index + 2]) cables.append((u, v, c)) index += 3 print(minimum_spanning_tree_cost(n, cables))"},{"question":"Design a program that simulates a basic file system and implements a command-line interface to interact with it. The file system should support the following commands: - `mkdir <path>`: Creates a new directory at the specified path. - `touch <path>`: Creates a new file at the specified path. - `ls <path>`: Lists all the contents (both files and directories) at the specified path. - `rm <path>`: Deletes the file or directory at the specified path. If the path is a directory, it should delete all its contents recursively. - `mv <source_path> <destination_path>`: Moves a file or directory from `source_path` to `destination_path`. If the destination path already exists, the source should be placed under the destination directory. You can assume the following: - Paths are given as absolute paths starting from the root (`/`). - The directories and filenames contain only alphanumeric characters and no spaces. - The `ls` command should list directories before files, both sorted lexicographically. # Input The input consists of multiple commands to be executed sequentially. Each command is on a new line. # Output For `ls <path>`, output the contents of the directory. For an invalid command or path, output an appropriate error message. # Example Input: ``` mkdir /a mkdir /a/b touch /a/b/file1 mkdir /a/c touch /a/c/file2 ls /a ls /a/b mv /a/c/file2 /a/b ls /a/b rm /a/b/file2 ls /a/b rm /a/b ls /a ``` Output: ``` b c file1 file2 file1 file2 file1 Invalid path c ``` # Implementation Notes - Maintain a data structure to represent the file system hierarchy. - Ensure commands modify this structure as required. - Consider edge cases like invalid paths, attempts to delete non-existent files, etc.","solution":"class FileSystem: def __init__(self): self.file_system = {\'/\': {}} def mkdir(self, path): dirs = path.split(\'/\') dirs = [d for d in dirs if d] # Remove empty strings current = self.file_system[\'/\'] for d in dirs: if d not in current: current[d] = {} elif not isinstance(current[d], dict): return \\"Invalid path\\" # Can\'t create a directory where a file exists current = current[d] def touch(self, path): dirs = path.split(\'/\') dirs = [d for d in dirs if d] file_name = dirs.pop() current = self.file_system[\'/\'] for d in dirs: if d not in current: return \\"Invalid path\\" current = current[d] current[file_name] = None def ls(self, path): dirs = path.split(\'/\') dirs = [d for d in dirs if d] current = self.file_system[\'/\'] for d in dirs: if d not in current: return \\"Invalid path\\" current = current[d] if isinstance(current, dict): dirs = sorted([d for d in current if isinstance(current[d], dict)]) files = sorted([f for f in current if current[f] is None]) return \' \'.join(dirs + files) else: return \\"Invalid path\\" def rm(self, path): dirs = path.split(\'/\') dirs = [d for d in dirs if d] current = self.file_system[\'/\'] parent = current last = \'\' for d in dirs: if d not in current: return \\"Invalid path\\" parent = current current = current[d] last = d del parent[last] def mv(self, source_path, dest_path): dirs = source_path.split(\'/\') dirs = [d for d in dirs if d] current = self.file_system[\'/\'] parent = current last = \'\' for d in dirs: if d not in current: return \\"Invalid path\\" parent = current current = current[d] last = d src_item = current del parent[last] dirs = dest_path.split(\'/\') dirs = [d for d in dirs if d] dest_name = dirs.pop() current = self.file_system[\'/\'] for d in dirs: if d not in current: return \\"Invalid path\\" current = current[d] if dest_name in current and isinstance(current[dest_name], dict): current[dest_name][last] = src_item else: current[dest_name] = src_item"},{"question":"The Galactic Senate has implemented stricter codes for spaceships traveling between star systems to ensure safety. Each spaceship must now maintain a spaceship log, recording every destination it travels to, exactly once. Captain Avery has a spaceship log that contains n entries of destinations visited in the order they were traveled. To comply with the new regulations, Captain Avery needs to ensure there are no duplicate destinations in the log. If duplicates are found, they must be removed to retain only the first occurrence of each destination while preserving the remaining order of travel. Help Captain Avery by writing a program that reads the log and outputs the corrected spaceship log with no duplicate destinations. Input The first line contains an integer n (1 ≤ n ≤ 100,000) – the number of entries in the log. The second line contains n space-separated strings d1, d2, ..., dn representing the destinations in the order they were visited. Each string is a unique destination identifier consisting of lowercase English letters (1 ≤ length of di ≤ 20). Output Output the corrected spaceship log, which contains each destination exactly once, retaining the original order of their first occurrence. Example Input 10 mars jupiter mars venus earth mercury earth mars venus saturn Output mars jupiter venus earth mercury saturn","solution":"def correct_spaceship_log(n, destinations): Returns the corrected spaceship log by removing duplicate destinations and retaining only the first occurrence in the order they were visited. Parameters: n (int): Number of entries in the log. destinations (list): List of destination strings. Returns: list: Corrected list of destinations with no duplicates. seen = set() corrected_log = [] for destination in destinations: if destination not in seen: seen.add(destination) corrected_log.append(destination) return corrected_log # Example usage: # n = 10 # destinations = \\"mars jupiter mars venus earth mercury earth mars venus saturn\\".split() # result = correct_spaceship_log(n, destinations) # print(result) # Output: [\'mars\', \'jupiter\', \'venus\', \'earth\', \'mercury\', \'saturn\']"},{"question":"In a mythical universe, there is a magical tree known as the Fibonacci Tree. This tree has the special property that the number of leaves at depth n is equal to the nth Fibonacci number. The depth of a tree is the number of edges in the longest path from the root to any leaf. Emily, a botanist, is studying the Fibonacci Tree. She wants to know the total number of leaves in the entire tree up to a given depth. Your task is to help Emily by writing a function that calculates this number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Given an integer d, the depth of the tree, calculate the sum of Fibonacci numbers from F(0) to F(d). Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 1000) representing the number of test cases. Each of the next T lines contains a single integer d (0 ≤ d ≤ 50) representing the depth of the tree for that test case. Output For each test case, output the total number of leaves in the Fibonacci Tree up to depth d. Constraints 1 ≤ T ≤ 1000 0 ≤ d ≤ 50 SAMPLE INPUT 4 0 1 2 3 SAMPLE OUTPUT 0 1 2 4","solution":"def fib(n): Computes the nth Fibonacci number. if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def total_fib_leaves(depth): Computes the total number of leaves in the Fibonacci Tree up to the given depth. return sum(fib(i) for i in range(depth + 1)) def process_test_cases(T, depths): Processes multiple test cases and returns the results as a list. results = [] for d in depths: results.append(total_fib_leaves(d)) return results"},{"question":"Example Write a function: ```python def is_palindrome_permutation(s: str) -> bool: # your code here ``` that checks if any permutation of the input string `s` could form a palindrome. # Input - A single string `s` containing only lowercase English letters (`a-z`). The length of `s` will be between 1 and 1000 inclusive. # Output - Return `True` if any permutation of `s` can form a palindrome; otherwise, return `False`. # Considerations - A string can form a palindrome if at most one character has an odd count. - The function should be efficient with respect to both time and space complexity. # Example Input: ``` civic ``` Output: ``` True ``` Input: ``` ivicc ``` Output: ``` True ``` Input: ``` hello ``` Output: ``` False ``` Input: ``` aabbcc ``` Output: ``` True ``` # Hints - Consider using a dictionary to count character occurrences. - The solution needs to traverse the string and count characters which appears in O(n) time and then check the counts.","solution":"def is_palindrome_permutation(s: str) -> bool: Checks if any permutation of the input string \'s\' could form a palindrome. Only lowercase English letters are considered. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given an array of integers where each integer appears twice except for one integer which appears only once. Write a function that finds the integer that appears only once. Constraints: * The array will have a positive length. * Each integer in the array is guaranteed to be between -1000 and 1000. Input The input will be a single line containing the array of integers. Output Output the integer that appears only once. Examples Input [2, 3, 2, 4, 4] Output 3 Input [1, 1, 2, 2, 3, 4, 4] Output 3","solution":"def find_unique_integer(arr): Finds the integer that appears only once in the array. :param arr: List of integers where every integer except one appears twice. :return: The integer that appears only once. unique_integer = 0 for num in arr: unique_integer ^= num return unique_integer"},{"question":"Little Johnny loves constructing sequences. He has a favorite sequence called the \\"Peak Sequence\\". A sequence of integers is called a Peak Sequence if it alternates between peaks and valleys. More formally, a sequence a1, a2, ..., an is a Peak Sequence if for every i (1 < i < n), either ai > ai-1 and ai > ai+1 (a peak), or ai < ai-1 and ai < ai+1 (a valley). Johnny has given you an integer array and he wants you to determine if it can be rearranged to form a Peak Sequence. Input The first line contains a single integer n (1 ≤ n ≤ 1000), representing the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 104), representing the elements of the array. Output Output \\"YES\\" if the array can be rearranged to form a Peak Sequence, otherwise output \\"NO\\". Examples Input 5 3 1 4 2 5 Output YES Input 4 1 1 1 1 Output NO","solution":"def can_form_peak_sequence(n, arr): Determines if the given array can be rearranged to form a Peak Sequence. :param n: int : Number of elements in the array :param arr: list : List of integers representing the elements of the array :return: str : \\"YES\\" if the array can be rearranged to form a Peak Sequence, otherwise \\"NO\\" if n == 1: return \\"YES\\" arr.sort() for i in range(1, n): if arr[i] == arr[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"A young programmer named Alex has taken upon a challenge to practice coding problems daily. To keep up the challenge, Alex alternates between solving problems and practicing algorithms on odd and even days respectively. Alex\'s practice routine starts with problem-solving, which means on day 1, Alex solves a coding problem, on day 2, Alex practices an algorithm, on day 3, Alex solves a coding problem, and so on. Given `N` days of practice, write a function that outputs what Alex practiced on each of those days. The function should return a list of strings where each element describes what Alex practiced on a particular day (\\"Problem-Solving\\" or \\"Algorithm Practice\\"). **Input:** - An integer `N` representing the number of days. **Output:** - A list of strings with `N` elements describing what Alex practiced each day. **Constraints:** - 1 ≤ N ≤ 10^5 **Function Signature:** ```python def alex_routine(N: int) -> List[str]: ``` **Example:** Example 1: ```python N = 5 print(alex_routine(N)) ``` Output: ```python [\\"Problem-Solving\\", \\"Algorithm Practice\\", \\"Problem-Solving\\", \\"Algorithm Practice\\", \\"Problem-Solving\\"] ``` Example 2: ```python N = 3 print(alex_routine(N)) ``` Output: ```python [\\"Problem-Solving\\", \\"Algorithm Practice\\", \\"Problem-Solving\\"] ``` **Explanation:** In Example 1: - On day 1, Alex solves a coding problem. - On day 2, Alex practices an algorithm. - On day 3, Alex solves a coding problem. - On day 4, Alex practices an algorithm. - On day 5, Alex solves a coding problem. The sequence continues in the given manner till day `N`. In Example 2: - On day 1, Alex solves a coding problem. - On day 2, Alex practices an algorithm. - On day 3, Alex solves a coding problem. The sequence continues up to the number of days provided (`N`).","solution":"from typing import List def alex_routine(N: int) -> List[str]: Given N days, return a list of strings describing what Alex practiced each day. Odd days are \\"Problem-Solving\\" and even days are \\"Algorithm Practice\\". return [\\"Problem-Solving\\" if i % 2 == 1 else \\"Algorithm Practice\\" for i in range(1, N + 1)]"},{"question":"[A company website has a comment section where users can post comments. Each comment is represented as a string. Unfortunately, some users are posting inappropriate words, and the company wants to filter and replace those inappropriate words with asterisks (*) in real-time. Write a function to implement a real-time comment filtering system that replaces inappropriate words with asterisks. The inappropriate words will be provided in a list, and each comment should be filtered accordingly. Input: The first line of the input contains an integer n, denoting the number of inappropriate words. The second line contains n inappropriate words separated by space. The next line contains an integer m, denoting the number of comments. The following m lines each contain a comment as a string. Output: Print m lines, each containing the filtered comment where inappropriate words are replaced by asterisks. Constraints: 1 <= n <= 100 1 <= len(inappropriate_word) <= 50 1 <= m <= 1000 1 <= len(comment) <= 1000 Example: Input: 3 bad ugly stupid 2 The food here is bad. You are so stupid to think that! Output: The food here is ***. You are so ****** to think that!","solution":"def filter_comments(inappropriate_words, comments): Filters the comments by replacing inappropriate words with asterisks. Args: inappropriate_words (list): List of inappropriate words. comments (list): List of comments to be filtered. Returns: list: List of filtered comments. def replace_word(word, comment): return comment.replace(word, \'*\' * len(word)) filtered_comments = [] for comment in comments: for word in inappropriate_words: comment = replace_word(word, comment) filtered_comments.append(comment) return filtered_comments"},{"question":"You are a software engineer working on a security application for a bank. Part of your task is to monitor the bank accounts for suspicious activity. You decide to implement a function that detects potentially fraudulent activities by analyzing the transaction data of customers. You are given a list of transactions for a single customer. Each transaction is represented as an integer amount (positive for deposits and negative for withdrawals). A customer is flagged as suspicious if the sum of any contiguous subarray of their transactions is greater than a threshold value `T`. Write a function that determines if there is any contiguous subarray within the given transactions that sums up to more than the threshold `T`. Function Signature: ```python def is_suspicious_activity(transactions: List[int], T: int) -> bool: pass ``` # Input - A list of integers `transactions` where each integer represents a transaction amount. (1 ≤ len(transactions) ≤ 100, -10^4 ≤ transactions[i] ≤ 10^4) - An integer `T` representing the threshold value. (1 ≤ T ≤ 10^6) # Output - Return `True` if there is any contiguous subarray that sums up to more than `T`, otherwise `False`. # Example Example 1 ```python is_suspicious_activity([1, 2, -1, 2, 3, -2, 4], 7) ``` Output: ``` True ``` Explanation: The contiguous subarray [2, 3, -2, 4] sums up to 7, which is equal to the threshold. However, the contiguous subarray [2, 3, -2, 4] sums up to 7 which is greater than the threshold. Thus, the output is `True`. Example 2 ```python is_suspicious_activity([1, 2, -1, 2, 3, -2, 4], 10) ``` Output: ``` False ``` Explanation: No contiguous subarray sums up to more than 10. Thus, the output is `False`. Example 3 ```python is_suspicious_activity([-5, -4, -3, -2, -1], 1) ``` Output: ``` False ``` Explanation: No contiguous subarray sums up to more than 1. Thus, the output is `False`. # Note For the example above, contiguous subarrays are considered to maintain the order of elements as they appear in the list.","solution":"def is_suspicious_activity(transactions, T): Returns True if any contiguous subarray has a sum greater than T. current_sum = 0 for start in range(len(transactions)): current_sum = 0 for end in range(start, len(transactions)): current_sum += transactions[end] if current_sum > T: return True return False"},{"question":"You are given a sequence of n integers. You need to form a new sequence of integers where each element is the product of all the elements of the original sequence except the element at the current position. However, implementing this straightforwardly could result in large intermediate products. To mitigate this, you must calculate the result using logarithms. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the sequence. Output Output n integers — the resulting sequence after the transformation. Examples Input 3 1 2 3 Output 6 3 2 Input 5 1 2 3 4 5 Output 120 60 40 30 24 Input 4 2 3 4 5 Output 60 40 30 24 Explanation In the first example, the output is: - For the first element, the product of all other elements is 2 * 3 = 6. - For the second element, the product of all other elements is 1 * 3 = 3. - For the third element, the product of all other elements is 1 * 2 = 2. In the second example, the output sequence of products excluding current positions is: - 120 (2*3*4*5) - 60 (1*3*4*5) - 40 (1*2*4*5) - 30 (1*2*3*5) - 24 (1*2*3*4) Note: Avoid overflow by using logarithms to compute the product as a sum of logs and exponentiating back.","solution":"import math def product_except_self(nums): Returns a list where each element is the product of all other elements in the input list, calculated using logarithms. total_sum_of_logs = sum(math.log(num) for num in nums) result = [round(math.exp(total_sum_of_logs - math.log(num))) for num in nums] return result"},{"question":"Write a function that takes a list of integers arr and an integer target as input, and returns the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Input A list of integers arr (1 ≤ len(arr) ≤ 10^4, -10^9 ≤ arr[i] ≤ 10^9) and an integer target (-10^9 ≤ target ≤ 10^9). Output Print two integers, the indices of the two numbers in arr that add up to target. Ensure the indices are printed in ascending order. Example Input arr = [2, 7, 11, 15] target = 9 Output 0 1","solution":"def two_sum(arr, target): Returns the indices of the two numbers in arr that add up to target. Parameters: arr (list): List of integers. target (int): The target sum. Returns: tuple: Two integers representing the indices of the two numbers. index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: return (index_map[complement], i) index_map[num] = i"},{"question":"Jon is playing a game involving a sequence of integers. The game rules are as follows: 1. Jon starts with a sequence of N integers. 2. He can perform the following operation any number of times: - Choose two integers in the sequence, say A and B (A could be equal to B), and replace both with their sum (A + B). The goal of the game is to reduce the sequence of integers to a single integer, which is the greatest common divisor (GCD) of the original sequence. Jon needs your help to determine the steps to achieve this goal. Constraints * 2 leq N leq 100 * 1 leq sequence_i leq 1000 Input Input is given from Standard Input in the following format: N sequence_1 sequence_2 cdots sequence_N Output Output is a single integer that Jon will eventually get after performing the operations optimally. Example Input 3 12 15 18 Output 3 Input 4 8 12 16 24 Output 4 Explanation: In the first example, the GCD of [12, 15, 18] is 3. Jon can perform the following operations: - Replace 12 and 15 with their sum, resulting in [27, 18]. - Replace 27 and 18 with their sum, resulting in [45]. The GCD of [12, 15, 18] is 3, so Jon will get 3 eventually. In the second example, the GCD of [8, 12, 16, 24] is 4. Jon can perform similar operations to reduce the sequence to a single integer 4.","solution":"from math import gcd from functools import reduce def reduce_to_gcd(N, sequence): Reduces the sequence to a single integer which is the gcd of the sequence. return reduce(gcd, sequence)"},{"question":"The Kingdom of Trees is a magical land where trees communicate with each other through their branches. The kingdom is organized in a hierarchy starting from the king tree (root) down to the common trees (leaf nodes). Each tree is connected to its parent tree by a branch, and each branch has a specific communication time associated with it. The communication time is the amount of time it takes for a message to travel from a tree to its parent, and vice versa. The trees want to send messages to the king tree in the most efficient manner possible, minimizing the overall communication time. Your task is to find the maximum communication time from any tree to the king tree for all the trees in the Kingdom of Trees. Input The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 200000), the number of trees in the kingdom. - Each of the next n-1 lines contains three integers ui, vi, and ti (1 ≤ ui, vi ≤ n, 1 ≤ ti ≤ 103) representing that there is a branch connecting tree ui to tree vi with a communication time of ti. Output Output n integers on a single line separated by spaces where the ith integer represents the maximum communication time from the ith tree to the king tree. Examples Input 4 1 2 2 1 3 4 3 4 1 Output 0 2 4 5 Input 5 1 2 3 1 3 2 2 4 4 3 5 6 Output 0 3 2 7 8","solution":"def dfs(node, parent, adj, comm_time, max_comm_times): for neighbor, time in adj[node]: if neighbor != parent: max_comm_times[neighbor] = max_comm_times[node] + time dfs(neighbor, node, adj, comm_time, max_comm_times) def max_communication_times(n, edges): # Create adjacency list adj = [[] for _ in range(n + 1)] for u, v, t in edges: adj[u].append((v, t)) adj[v].append((u, t)) # Initialize list to store max communication times max_comm_times = [0] * (n + 1) # Start DFS from the root node, which is 1 dfs(1, -1, adj, 0, max_comm_times) # Return the maximum communication times for each node return max_comm_times[1:] # Example usages result = max_communication_times(4, [(1, 2, 2), (1, 3, 4), (3, 4, 1)]) print(result) # Output: [0, 2, 4, 5] result = max_communication_times(5, [(1, 2, 3), (1, 3, 2), (2, 4, 4), (3, 5, 6)]) print(result) # Output: [0, 3, 2, 7, 8]"},{"question":"Alex is trying out a new mobile game. In this game, a player moves on a 2D grid of size m x n. Each cell in the grid has a number of gold coins and there are some cells with obstacles which are impassable. Alex starts at the top-left corner of the grid and aims to reach the bottom-right corner while collecting the maximum number of gold coins. The player can only move right or down from a cell. Write a program to help Alex determine the maximum number of gold coins that can be collected when moving from the top-left to the bottom-right of the grid. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns of the grid. Each of the next m lines contains n integers where each integer represents the number of gold coins in that cell. An impassable cell is represented by -1. It is guaranteed that the top-left and bottom-right corners are not impassable. Output Output a single integer, the maximum number of gold coins that Alex can collect, or -1 if it is impossible to reach the bottom-right corner. Example Input 3 4 0 1 4 2 2 -1 0 1 1 2 2 0 Output 8 Note In the example grid, the optimal path would be: 0 -> 1 -> 4 -> 2 -> 1 -> 0 -> 2 -> 0 which totals to 8 gold coins.","solution":"def max_gold(m, n, grid): Returns the maximum number of gold coins that can be collected, or -1 if it is impossible to reach the bottom-right corner. # Initialize a 2D dp array with -inf values for impossible cells. dp = [[-float(\'inf\')] * n for _ in range(m)] # Starting point dp[0][0] = grid[0][0] if grid[0][0] != -1 else -float(\'inf\') for i in range(m): for j in range(n): if grid[i][j] == -1: dp[i][j] = -float(\'inf\') # Mark obstacles continue if i > 0 and dp[i-1][j] != -float(\'inf\'): dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and dp[i][j-1] != -float(\'inf\'): dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) max_coins = dp[-1][-1] return max_coins if max_coins != -float(\'inf\') else -1"},{"question":"Design a function that receives an array of unique integers and determines if it\'s possible to divide the array into sets of size K that fulfill specific requirements. Each set must consist of K consecutive numbers. If it\'s possible, return \\"True\\"; otherwise, return \\"False\\". Here\'s the detailed problem statement: # Input * A single integer, N (1 <= N <= 10^5), the number of elements in the array. * An array of N unique integers where each integer is between 1 and 10^9. * An integer K (1 <= K <= N), representing the size of each set that you need to form. # Output * Return \\"True\\" if it is possible to partition the array into sets of size K such that each set consists of K consecutive integers. * Return \\"False\\" otherwise. # Example Input 8 [1, 2, 3, 3, 4, 5, 6, 7, 8, 9] 3 Output False Input 8 [1, 2, 3, 4, 5, 6, 7, 8] 4 Output True # Explanation In the first example, it\'s not possible to divide the array into subsets of size 3 that have consecutive numbers. In the second example, the array can be divided into two sets: [1, 2, 3, 4] and [5, 6, 7, 8], both consisting of 4 consecutive numbers.","solution":"def can_partition_in_sets(nums, k): Determines if it\'s possible to partition the array into sets of size k where each set consists of k consecutive numbers. Parameters: nums (list of int): The array of unique integers. k (int): The size of each set. Returns: bool: True if the partition is possible, otherwise False. from collections import Counter if len(nums) % k != 0: return False nums_count = Counter(nums) sorted_nums = sorted(nums_count) for num in sorted_nums: while nums_count[num] > 0: for i in range(num, num + k): if nums_count[i] == 0: return False nums_count[i] -= 1 return True"},{"question":"You are tasked with creating a custom sorting function for a magical library. This library contains a collection of enchanted books, each with a unique \\"magical index\\" composed of both numeric and alphabetical characters. The magical index follows this pattern: a combination of digits followed by a combination of uppercase letters (e.g., \\"123ABC\\"). Due to the enchantment, standard sorting algorithms don\'t quite capture the sorting order needed for the magical indices. Here is how the magical indices should be sorted: 1. Primarily based on the numeric part in ascending order. 2. If two indices have the same numeric part, sort based on the alphabetical part in ascending order. Write a function that, given a list of such magical indices, sorts them according to the above rules. Input Format: - The first line contains an integer, n, the number of magical indices. - The next n lines each contain a magical index. Output Format: - Print each magical index in the sorted order, one per line. Constraints: 1 ≤ n ≤ 100 1 ≤ length of each magical index ≤ 100 Example Input: 5 103ABC 100XYZ 104DEF 100ABC 101GHI Example Output: 100ABC 100XYZ 101GHI 103ABC 104DEF Function Signature: ```python def sort_magical_indices(n: int, indices: List[str]) -> List[str]: # Implementation here ``` Explanation: - \\"100ABC\\" comes before \\"100XYZ\\" since \\"ABC\\" is lexicographically smaller than \\"XYZ\\". - \\"101GHI\\" comes after both \\"100ABC\\" and \\"100XYZ\\" because 101 > 100. - The numerical parts of \\"103ABC\\" and \\"104DEF\\" determine their order.","solution":"def sort_magical_indices(n, indices): def magic_key(index): numeric_part = \'\'.join(filter(str.isdigit, index)) alpha_part = \'\'.join(filter(str.isalpha, index)) return (int(numeric_part), alpha_part) sorted_indices = sorted(indices, key=magic_key) return sorted_indices"},{"question":"You are given a grid of size n × m filled with uppercase English letters. Your task is to determine if you can traverse the grid starting from the cell (1, 1) to the cell (n, m), moving only right or down, such that the sequence of letters collected in the path form a palindrome. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains a string of length m, representing the grid. It is guaranteed that the sum of n * m for all test cases does not exceed 10000. Output For each test case, print \\"YES\\" if it is possible to traverse the grid to form a palindrome, otherwise print \\"NO\\". Example Input 3 3 3 ABA BCC ABA 2 2 AB BA 4 4 ABCD BCDE CDEF DEFG Output YES YES NO Explanation In the first test case, one possible path is collecting letters \'A\' -> \'B\' -> \'C\' -> \'B\' -> \'A\' which forms a palindrome. In the second test case, collecting letters \'A\' -> \'B\' -> \'A\' forms a palindrome. In the third test case, no possible path can form a palindrome.","solution":"def is_palindrome(s): return s == s[::-1] def can_form_palindrome_from_grid(grid, n, m): path_1 = [] path_2 = [] # Traverse in top-right and bottom-left manner for i in range(n+m-1): if i < n: path_1.append(grid[i][0]) else: path_1.append(grid[n-1][i-n+1]) for i in range(n+m-1): if i < m: path_2.append(grid[0][i]) else: path_2.append(grid[i-m+1][m-1]) return is_palindrome(path_1) or is_palindrome(path_2) def check_palindromic_paths(test_cases): results = [] for n, m, grid in test_cases: if can_form_palindrome_from_grid(grid, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) grid = [lines[index + 1 + i] for i in range(n)] test_cases.append((n, m, grid)) index += n + 1 return test_cases def palindrome_path(input_data): test_cases = process_input(input_data) results = check_palindromic_paths(test_cases) return \\"n\\".join(results)"},{"question":"Problem Alice loves to arrange flowers for her boutique clients. She often receives flowers of different heights and needs to create arrangements with a specific property: every flower must be taller than the previous one. Given a list of the initial heights of the flowers, Alice must remove the minimum number of flowers to achieve this property. Write a program to help Alice determine the minimum number of flowers she needs to remove to make the remaining sequence strictly increasing. Constraints The input satisfies the following conditions. * 1 ≤ N ≤ 1000 * 1 ≤ hi ≤ 10^6 Input The input is given in the following format. N h1 h2 ... hN The first line is given the integer N, which represents the total number of flowers. The second line contains N integers hi, where hi represents the height of the i-th flower. Output Output the minimum number of flowers Alice needs to remove on one line. Examples Input 6 3 4 2 5 1 6 Output 2 Input 5 3 1 2 1 7 Output 2 Input 4 1 2 3 4 Output 0 Explanation of Examples In the first example, Alice can remove the flowers with heights 2 and 1, leaving [3, 4, 5, 6], which is strictly increasing. In the second example, Alice can remove the flowers with heights 3 and 1 (the first 1), leaving [1, 2, 7], which is strictly increasing. In the third example, the sequence is already strictly increasing, so Alice doesn\'t need to remove any flowers.","solution":"def min_removals_for_increasing_sequence(n, heights): # An array to store the length of longest increasing subsequence ending at each position lis = [1] * n # Compute the length of LIS ending at each position for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Length of the longest increasing subsequence length_of_lis = max(lis) # Minimum removals is the total number of flowers minus the length of longest increasing subsequence return n - length_of_lis"},{"question":"Write a program that reads an undetermined number of lines where each line contains a number n and a string s. The program should output the string s repeated n times. Constraints * 1 ≤ n ≤ 100 * The length of the string s will not exceed 50 characters. Input The input consists of multiple lines in the following format: n s The input ends when a line with n = 0 and s = \\"END\\" is encountered. This last line should not be processed. Output For each input line, output the string s concatenated n times. Example Input 3 hello 2 world 5 a 1 test 0 END Output hellohellohello worldworld aaaaa test","solution":"def process_lines(lines): Takes list of strings where each string represents a line containing a number n and a string s. Returns list of strings where each string s is repeated n times. Processing stops when n = 0 and s = \'END\'. result = [] for line in lines: n, s = line.split(\' \', 1) n = int(n) if n == 0 and s == \\"END\\": break result.append(s * n) return result"},{"question":"Emma is organizing a series of workshops and wants to ensure that no two workshops on the same topic happen consecutively. She has n workshops to schedule and each workshop covers a specific topic. There can be workshops on three topics: A, B, and C. Emma needs to determine a valid sequence of workshops to meet the rule that no two consecutive workshops are on the same topic or inform her if it is impossible to create such a sequence. Input The first line contains three integers n, a, b, and c (1 ≤ n ≤ 105, 0 ≤ a, b, c ≤ n) — the number of workshops, the number of workshops on topic A, the number of workshops on topic B, and the number of workshops on topic C. It is guaranteed that a + b + c = n. Output If it is impossible to schedule the workshops under the given constraints, print \\"NO\\" (without quotes). Otherwise, print the string of the length n, which consists of characters \'A\', \'B\', and \'C\'. If some character equals \'A\', then the corresponding workshop is on topic A, if some character equals \'B\', then the corresponding workshop is on topic B, and if some character equals \'C\', then the corresponding workshop is on topic C. If there are multiple valid answers, print any of them. Examples Input 6 2 2 2 Output ABCABC Input 5 3 2 0 Output ABABA Input 4 3 1 0 Output NO","solution":"def schedule_workshops(n, a, b, c): from queue import PriorityQueue # Create a max-heap with negative counts to simulate Python\'s min-heap as max-heap pq = PriorityQueue() if a > 0: pq.put((-a, \'A\')) if b > 0: pq.put((-b, \'B\')) if c > 0: pq.put((-c, \'C\')) result = [] prev_topic = None while not pq.empty(): count, topic = pq.get() if topic != prev_topic: result.append(topic) prev_topic = topic count += 1 # decrease the remaining count if count < 0: pq.put((count, topic)) else: if pq.empty(): # It\'s not possible to alternate topics properly return \\"NO\\" next_count, next_topic = pq.get() result.append(next_topic) prev_topic = next_topic next_count += 1 if next_count < 0: pq.put((next_count, next_topic)) pq.put((count, topic)) return \'\'.join(result)"},{"question":"Background Ms. B is a librarian who wants to rearrange the books on her library shelves based on their heights so that each shelf can be a challenge to pick up different types of books. Ms. B has decided on a particular way to rearrange the books. Problem There are N books to be placed on a single shelf of the library, and each book has a specific height given in an array. Ms. B wants to organize these books so that the height difference between adjacent books on the shelf is minimized to avoid any sudden large steps between heights, making it easier to pick books. You need to find the arrangement of books that minimizes the maximum height difference between any two adjacent books, and then output that arrangement. Constraints Input meets the following conditions: * 1 ≤ N ≤ 100 * 1 ≤ height of each book ≤ 1000 Input The input is given in the following format: N h1 h2 h3 ... hN The first line gives an integer N representing the number of books. The second line provides N integers representing the heights of the books. Output Output a single line with the heights of the books in the order that minimizes the maximum difference between the heights of any two adjacent books. Examples Input 4 1 3 6 2 Output 1 2 3 6 Input 6 10 20 30 40 50 60 Output 10 20 30 40 50 60 Input 5 30 10 40 20 50 Output 10 20 30 40 50 In the first example, the sequence 1 2 3 6 minimizes the maximum height difference between adjacent books, which would be 2.","solution":"def minimize_height_difference(n, heights): Returns the heights of the books in the order that minimizes the maximum difference between the heights of any two adjacent books. heights.sort() return heights"},{"question":"In a magical land, there are n mystical islands connected by m enchanted bridges. The islands are numbered from 1 to n and the bridges connect some pairs of islands. Each bridge has a certain magical power associated with it, represented as a positive integer. The Great Wizard needs to perform a series of q queries on the network of islands. In each query, the Wizard asks for the maximum magical power among the bridges that connect all pairs of islands in a certain subset of islands. Help the Great Wizard answer these queries. Every query specifies a subset of islands, and the query result should be the maximum magical power among the bridges that connect all pairs of islands within the subset (if there is no such bridge, return -1 for that query). Input: The first line contains two space-separated integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 10000) — the number of islands and the number of bridges respectively. The next m lines describe the bridges. Each line contains three space-separated integers u, v, and p (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ p ≤ 1000) — the two islands that are connected by this bridge and the magical power of this bridge. The next line contains integer q (1 ≤ q ≤ 20000) — the number of queries. Following each query line contains an integer s (1 ≤ s ≤ n) followed by s space-separated integers representing the indices of islands forming the subset for that query. Output: For each query, print the maximum magical power among the bridges that connect all pairs of islands within the subset, or -1 if there is no such bridge. Examples: Input: 4 5 1 2 10 2 3 20 3 4 30 4 1 40 2 3 50 3 3 1 2 3 4 1 2 3 4 2 1 4 Output: 20 40 40","solution":"def maximum_magical_power(n, m, bridges, queries): from collections import defaultdict import heapq # Create adjacency list for the graph graph = defaultdict(list) for u, v, p in bridges: graph[u].append((v, p)) graph[v].append((u, p)) def maximum_power_in_subset(subset): # Create a max-heap to track the maximum power in the subset max_heap = [] subset_set = set(subset) for node in subset: for neighbor, power in graph[node]: if neighbor in subset_set: heapq.heappush(max_heap, -power) # add negative value to simulate max-heap using min-heap if not max_heap: return -1 else: return -heapq.heappop(max_heap) results = [] for query in queries: results.append(maximum_power_in_subset(query)) return results # Example usage n = 4 m = 5 bridges = [(1, 2, 10), (2, 3, 20), (3, 4, 30), (4, 1, 40), (3, 4, 50)] queries = [[1, 2, 3], [1, 2, 3, 4], [1, 4]] print(maximum_magical_power(n, m, bridges, queries)) # [20, 50, 40]"},{"question":"A treasure hunter is exploring a series of connected rooms in an ancient temple, looking for treasure while avoiding traps. Each room can either be empty, contain a treasure, or be rigged with a trap. The hunter starts in the first room and can move to an adjacent room each step (left or right), with the goal of collecting the maximum number of treasures without setting off any traps. The problem is defined as follows: You are given the layout of the rooms in the temple as a string consisting of the characters \'.\', \'T\', and \'X\'. Here, \'.\' represents an empty room, \'T\' represents a room with a treasure, and \'X\' represents a room with a trap. The hunter starts at the leftmost room and can move to the room on the right or the room on the left (if they exist). The hunter must avoid rooms with traps and collect treasures by moving to the rooms with treasures. The hunter needs to collect as many treasures as possible while avoiding traps. Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string representing the layout of the rooms in the temple. Output: For each test case, output the maximum number of treasures the hunter can collect without entering a room with a trap. Constraints: 1 ≤ T ≤ 100 1 ≤ length of room layout string ≤ 1000 Example: Input: 2 .T.T.T. T..X..T Output: 3 2 Explanation: For the first test case: The optimal path for the hunter is to start at the first room, move to room 2 to collect the first treasure (T), then move to the next treasure (.) which is the third room, and finally collect the treasures at room 5 and room 7. The hunter collects a total of 3 treasures. For the second test case: The hunter collects the first treasure (T) immediately, then skips the rooms until the last treasure at room 7, avoiding the trap at room 4. The hunter collects a total of 2 treasures.","solution":"def max_treasures(layout): Returns the maximum number of treasures the hunter can collect without entering a room with a trap. treasures = 0 for room in layout: if room == \'X\': break elif room == \'T\': treasures += 1 return treasures def collect_max_treasures(test_cases): Processes multiple test cases of room layouts and returns the maximum treasures for each. results = [] for layout in test_cases: results.append(max_treasures(layout)) return results"},{"question":"Snuke is interested in finding the maximum product possible by multiplying two different elements from an array. The values in the array can be positive, zero, or negative numbers, and Snuke wants the maximum product regardless of the signs of the numbers involved. Constraints * 2 ≤ n ≤ 100{,}000 * -10^9 ≤ a[i] ≤ 10^9 Input The input is given from Standard Input in the following format: ``` n a1 a2 a3 ... an ``` Output Print the maximum product Snuke can obtain by multiplying any two different elements from the array. Examples Input ``` 5 1 10 3 -2 5 ``` Output ``` 50 ``` Input ``` 3 -10 -20 -30 ``` Output ``` 600 ``` Input ``` 4 -1 2 0 3 ``` Output ``` 6 ```","solution":"def max_product(n, arr): Returns the maximum product by multiplying two different elements from the array. arr.sort() # The maximum product could be from two largest positive numbers or from two smallest negative numbers return max(arr[0] * arr[1], arr[-1] * arr[-2]) # Example usage: # print(max_product(5, [1, 10, 3, -2, 5])) # Output: 50 # print(max_product(3, [-10, -20, -30])) # Output: 600 # print(max_product(4, [-1, 2, 0, 3])) # Output: 6"},{"question":"Given an integer n, return the list of all valid parentheses pairs with n pairs of parentheses. A valid parentheses pair is one where each open parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\". Input The input contains a single integer n (1 ≤ n ≤ 12) — representing the number of pairs of parentheses. Output Print a list of strings, where each string represents a valid combination of n pairs of parentheses. The strings in the list should be printed in lexicographical order. Examples Input 3 Output [\'((()))\', \'(()())\', \'(())()\', \'()(())\', \'()()()\']","solution":"def generate_parentheses(n): Generate all combinations of n pairs of parentheses. Args: n (int): number of pairs of parentheses Returns: List[str]: list of all valid parentheses combinations in lexicographical order def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current) return if open_count < n: backtrack(current + \'(\', open_count + 1, close_count) if close_count < open_count: backtrack(current + \')\', open_count, close_count + 1) result = [] backtrack(\'\', 0, 0) return sorted(result)"},{"question":"You are given an array of numbers, where each number represents a different person\'s preference for a certain item based on a scale of 1 to 5, inclusive. The array is sorted in non-decreasing order. Your task is to find the smallest range [a, b] (inclusive) where each item preference from 1 to 5 is represented at least once within that range. If such a range does not exist, output -1. Constraints * 1 leq length of array leq 10^5 * 1 leq array[i] leq 5 Input Input is given from Standard Input in the following format: n array Output Output the smallest possible range in the format \\"a b\\". If no such range exists, output -1. Examples Input 10 1 1 2 2 3 3 4 4 5 5 Output 1 5 Input 5 1 1 1 1 1 Output -1","solution":"def smallest_range(n, array): from collections import defaultdict, deque if n < 5: return -1 count_map = defaultdict(int) required = set([1, 2, 3, 4, 5]) q = deque() min_range = (float(\'inf\'), -float(\'inf\')) for num in array: q.append(num) count_map[num] += 1 while all(count_map[i] > 0 for i in required): if (q[0], q[-1]) < min_range: min_range = (q[0], q[-1]) left = q.popleft() count_map[left] -= 1 if count_map[left] == 0: del count_map[left] if min_range == (float(\'inf\'), -float(\'inf\')): return -1 return min_range def process_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) array = list(map(int, data[1:n+1])) result = smallest_range(n, array) if result == -1: print(\\"-1\\") else: print(f\\"{result[0]} {result[1]}\\")"},{"question":"A research team is conducting a social experiment in a remote village. They plan to test the effectiveness of several educational interventions over a period of n days. On each day, the number of participants pi and the effectiveness score ei of the intervention are recorded. To evaluate the overall impact of the intervention over a specific range of days from day l to day r inclusive, the researchers calculate the minimum among the maximum number of participants and the maximum effectiveness score in that period, that is: f(l, r) = min(max_{j=l}^{r} pj, max_{j=l}^{r} ej) Researchers have identified m specific ranges of days: (l1, r1), (l2, r2), ..., (lm, rm). Your task is to determine the overall impact score for each of these m ranges. Input The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 100000). The second line contains n integers pi (1 ≤ pi ≤ 10^6) — the number of participants on each day. The third line contains n integers ei (1 ≤ ei ≤ 10^6) — the effectiveness score of each day. The next m lines each contain two integers li and ri denoting the range for which to calculate the overall impact score. Output Print m real values — the overall impact score for each of the given ranges. Each value should be printed on a new line. Examples Input 5 2 4 3 2 5 6 7 1 8 2 4 1 3 2 5 Output 3 4 Note For the first query (1, 3): The subarray of participants is [4, 3, 2] and the subarray of effectiveness is [7, 1, 8]. Here, max participants = 4 and max effectiveness = 8. Thus, the overall impact score is min(4, 8) which is 4. For the second query (2, 5): The subarray of participants is [3, 2, 5, 6] and the subarray of effectiveness is [1, 8, 2, 4]. Here, max participants = 6 and max effectiveness = 8. Thus, the overall impact score is min(6, 8) which is 6.","solution":"def overall_impact_score(n, m, participants, effectiveness, queries): Calculate the overall impact scores for the given ranges. Parameters: n (int): Number of days m (int): Number of queries participants (list of int): Participants on each day effectiveness (list of int): Effectiveness scores on each day queries (list of tuple): Tuples of ranges (l, r) Returns: list of int: Overall impact scores for each range results = [] for l, r in queries: max_p = max(participants[l-1:r]) max_e = max(effectiveness[l-1:r]) results.append(min(max_p, max_e)) return results"},{"question":"Luna has a knack for making curious patterns. She challenges you to detect a specific type of pattern within a sequence of characters. Given a string s of length n (1 ≤ n ≤ 100) consisting of lowercase letters, determine if it\'s possible to rearrange the characters to form a palindrome. A palindrome is a string that reads the same backward as forward. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s. Output For each test case, print \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Examples Input 3 aabb abc aaabb Output YES NO YES","solution":"def can_form_palindrome(s): Determines if the characters of string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def detect_palindrome_patterns(test_cases): Given a list of test case strings, determine for each if it can be rearranged to form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given n identical stones aligned in a row, indexed from 1 to n. Each stone can either be colored blue or red. You need to perform q operations on this series of stones, each operation being either: 1. Change the color of a particular stone. 2. Check if all stones in a given range have the same color. Input - The first line contains an integer n (1 ≤ n ≤ 100000) representing the number of stones. - The second line contains a string of length n consisting of characters \'B\' (blue) and \'R\' (red) representing the initial color of each stone. - The third line contains an integer q (1 ≤ q ≤ 100000) representing the number of operations. - Each of the next q lines describes an operation: - \\"1 i c\\" where 1 ≤ i ≤ n, and c is either \'B\' or \'R\'. This operation changes the color of the stone at index i to c. - \\"2 l r\\" where 1 ≤ l ≤ r ≤ n. This operation checks if all stones in the inclusive range [l, r] are of the same color. Output For each operation of the second type, output \\"Yes\\" if all the stones in the specified range have the same color, otherwise output \\"No\\". Example Input ``` 5 BBRRB 4 2 1 5 1 2 R 2 1 5 2 3 4 ``` Output ``` No Yes Yes ``` Explanation - For the first query \\"2 1 5\\", the stones are \\"BBRRB\\", not all the same color, so output \\"No\\". - For the second query, we change the color of the stone at index 2 to \'R\', resulting in the string \\"BRRRB\\". - For the third query \\"2 1 5\\", the stones are \\"BRRRB\\", not all the same color, so output \\"No\\". - For the fourth query \\"2 3 4\\", the stones in the range are \\"RR\\", which are the same color, so output \\"Yes\\".","solution":"def stone_operations(n, stones, q, operations): stones = list(stones) result = [] for op in operations: if op[0] == \\"1\\": i = int(op[1]) - 1 c = op[2] stones[i] = c elif op[0] == \\"2\\": l = int(op[1]) - 1 r = int(op[2]) - 1 if all(stone == stones[l] for stone in stones[l:r+1]): result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"Nikola Tesla is designing a new electric grid management system. To prevent overloading and ensure efficient power distribution, he needs your help to simulate the fluctuation of power loads based on the incoming requests of power consumption and discharge from different sectors of the city. Tesla will receive N requests, each specifying either a power consumption (which adds to the load) or a power discharge (which reduces the load). Each request will either be in the form of \\"+X\\" (consumption) or \\"-X\\" (discharge), where X is a positive integer. Tesla also has a threshold limit L, which is the maximum allowable load before the system must shut down to prevent overloading. Your task is to determine if the threshold limit is ever exceeded after processing all the requests sequentially. Input: - The first line contains a single integer T, the number of test cases. - The first line of each test case contains two integers N and L, representing the number of requests and the threshold limit respectively. - The following N lines each contain a request, either in the form of \\"+X\\" or \\"-X\\". Output: - For each test case, output a single line \\"YES\\" if at any point the load exceeds the threshold limit L, otherwise output \\"NO\\". Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ X ≤ 1000 - 1 ≤ L ≤ 10^5 SAMPLE INPUT 2 5 100 +50 +30 -20 +10 +40 3 50 +20 +30 -10 SAMPLE OUTPUT YES NO Explanation: In the first test case: - Initial load = 0 - After \\"+50\\" => 50 - After \\"+30\\" => 80 - After \\"-20\\" => 60 - After \\"+10\\" => 70 - After \\"+40\\" => 110 (threshold exceeded) The output is \\"YES\\" because the load exceeds the limit of 100. In the second test case: - Initial load = 0 - After \\"+20\\" => 20 - After \\"+30\\" => 50 - After \\"-10\\" => 40 The output is \\"NO\\" because the load never exceeds the limit of 50.","solution":"def check_threshold(T, test_cases): Determines if the power load exceeds the threshold limit for each test case. Params: T - Number of test cases test_cases - List of tuples, where each tuple contains: (N, L, requests) N - Number of requests L - Threshold limit requests - List of request strings in the form \\"+X\\" or \\"-X\\" Returns: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: N, L, requests = case load = 0 exceeded = False for request in requests: if request[0] == \'+\': load += int(request[1:]) elif request[0] == \'-\': load -= int(request[1:]) if load > L: exceeded = True break if exceeded: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The Problem of the Resilient Farmer A farmer owns a large rectangular field that he uses for planting crops. He has recently started using a new method to determine the sections of the field that need extra fertilizer. The idea is to calculate the fertility score of the rectangular sections of the field based on a given matrix of integers representing the fertility levels of different parts of the field. The fertility score of a rectangular section is defined as the sum of the fertility levels of all cells within that section. The farmer wants to know the maximum fertility score obtainable by any rectangular section in the field. Write a program to help the farmer find the maximum fertility score. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns in the field, respectively. - The following n lines each contain m integers, separated by spaces, where each integer represents the fertility level of a particular cell in the field. The fertility levels can be negative, zero, or positive, and will be within the range of -1,000,000 to 1,000,000. Output: - Print a single integer denoting the maximum fertility score of any rectangular section of the field. Example: Input: 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output: 29 Explanation: The maximum fertility score is obtained by the rectangular sub-section from the 2nd row and 2nd column to the 3rd row and 4th column, yielding a sum of 29.","solution":"def max_fertility_score(matrix): Returns the maximum fertility score of any rectangular section in the given matrix. def kadane(arr): # Standard Kadane\'s algorithm to find the maximum subarray sum in 1D array. max_sum = curr_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum n = len(matrix) m = len(matrix[0]) # Initialize max_fertility_score with the smallest possible integer value max_fertility_score = float(\'-inf\') # We will traverse all pairs of columns for left in range(m): # Create a temporary array to store the sum of elements between two columns temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] # Apply Kadane\'s algorithm to find the maximum subarray sum for the current column pair max_fertility_score = max(max_fertility_score, kadane(temp)) return max_fertility_score def max_fertility_score_from_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 matrix.append(row) print(max_fertility_score(matrix))"},{"question":"Write a program that takes a list of integers and returns a list of tuples, where each tuple contains two elements: an integer from the list and the count of its occurrences in the list. Constraints * The list contains integers within the range [-1000, 1000]. * The length of the list does not exceed 100. Input A list of integers is given in a single line, separated by spaces. Output A list of tuples, where each tuple contains an integer and its count, in the order of their first occurrences. Example Input 4 5 6 4 5 4 Output [(4, 3), (5, 2), (6, 1)]","solution":"def count_occurrences(lst): Returns a list of tuples where each tuple contains an integer from the list and the count of its occurrences in the list. counts = {} result = [] for num in lst: if num not in counts: counts[num] = 1 result.append((num, 1)) else: counts[num] += 1 for i in range(len(result)): if result[i][0] == num: result[i] = (num, counts[num]) break return result # Example usage: # input_list = [4, 5, 6, 4, 5, 4] # output_list = count_occurrences(input_list) # print(output_list) # Output: [(4, 3), (5, 2), (6, 1)]"},{"question":"Given a string consisting of opening and closing parentheses `(` and `)`, write a function to determine if the string is valid. A string is considered valid if parentheses are properly closed and nested. # Function signature ```python def is_valid_parentheses(s: str) -> bool: ``` # Input - A single string `s` containing only characters `(` and `)`. The length of the string is between `1` and `10^4`. # Output - Return `True` if the string is valid, otherwise return `False`. # Examples Example 1 ```python s = \\"()\\" is_valid_parentheses(s) ``` **Output:** ``` True ``` Example 2 ```python s = \\"(())\\" is_valid_parentheses(s) ``` **Output:** ``` True ``` Example 3 ```python s = \\")(\\" is_valid_parentheses(s) ``` **Output:** ``` False ``` Example 4 ```python s = \\"(()))\\" is_valid_parentheses(s) ``` **Output:** ``` False ``` # Constraints - The input string will only contain characters `(` and `)`. - The length of the string will be at least `1` and at most `10^4`.","solution":"def is_valid_parentheses(s: str) -> bool: Determine if the given string s consisting of \'(\' and \')\' is valid. A string is considered valid if parentheses are properly closed and nested. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\' and stack: stack.pop() else: return False return len(stack) == 0"},{"question":"A newly designed question follows: A company is organizing a technical seminar series. They have M seminars and N participants. Each participant can attend any number of seminars, but the company wants to ensure that no two participants attend exactly the same combination of seminars. The company also wants to maximize the total number of participants. You are given the number of seminars, M. Your task is to determine the maximum number of participants, N, such that each participant attends a unique combination of seminars. Input The input consists of a single integer M, which denotes the number of seminars. Constraints * 1 ≤ M ≤ 20 Output Output the maximum number of participants, N, such that no two participants attend exactly the same combination of seminars. Example Input 3 Output 7 Input 4 Output 15 Explanation: - For M = 3, the unique combinations of attending the seminars are: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, and {1, 2, 3}, resulting in 7 unique participants. - For M = 4, the unique combinations of attending the seminars are all subsets of the set {1, 2, 3, 4}, resulting in 15 unique participants. The problem is essentially asking for the number of unique subsets, which is `2^M - 1` (since we subtract the empty set).","solution":"def max_participants(M): Returns the maximum number of participants such that no two participants attend exactly the same combination of seminars. return 2**M - 1"},{"question":"Jane loves to play with sequences of numbers. One day, she came up with a new puzzle. Let\'s call a sequence of integers \\"special\\" if it satisfies the following properties: 1. Every element in the sequence is a positive integer. 2. The sequence contains at least one element. 3. The sequence is non-decreasing. 4. The sequence does not contain any consecutive duplicate elements. For example, the sequences [1, 2, 3], [1, 3, 4, 5], and [1, 2, 3, 4, 5] are special, but the sequences [1, 2, 2, 3] and [3, 2, 1] are not. Jane wants to know the number of different special sequences that can be formed using exactly \'n\' integers, where each integer must be within the range from 1 to \'m\' (inclusive). Help Jane by writing a program that calculates this number. Input: The input consists of a single line containing two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100). Output: Output a single integer representing the number of different special sequences of length \'n\' that can be formed using integers from 1 to \'m\' (inclusive). Example: Input: 3 5 Output: 35 Note: In the example, you can form sequences like [1, 2, 3], [1, 3, 4], and [2, 3, 4]. The total number is 35 because there are many combinations of non-decreasing sequences of length 3 available within the range from 1 to 5, without consecutive duplicates.","solution":"def count_special_sequences(n, m): Counts the number of special sequences of length n using integers from 1 to m. Args: n (int): Length of the sequence m (int): Maximum integer in the sequence Returns: int: Number of special sequences # dp[i][j] will store the number of special sequences of length i using integers 1 to j dp = [[0] * (m + 1) for _ in range(n + 1)] # Base case: There is one way to make a sequence of length 1 with any starting number (1 to m) for j in range(1, m + 1): dp[1][j] = 1 # Fill the dp table for i in range(2, n + 1): for j in range(1, m + 1): dp[i][j] = sum(dp[i-1][k] for k in range(1, j + 1)) # Sum up all the sequences of length n return sum(dp[n][j] for j in range(1, m + 1))"},{"question":"You are given an array of `n` integers. Your task is to find the sum of elements in the array after applying a series of operations. Each operation consists of choosing two elements from the array, removing them, and inserting their sum back into the array. The process is repeated until only one element remains in the array. Output the final remaining element. Input The first line of the input contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print a single integer — the final remaining element after performing the operations. Example Input 5 1 2 3 4 5 Output 15 Explanation Initially, the array is [1, 2, 3, 4, 5]. - We can choose the elements 1 and 2. Their sum is 3. The array becomes [3, 3, 4, 5]. - Next, choose 3 and 3. Their sum is 6. The array becomes [6, 4, 5]. - Then, choose 4 and 5. Their sum is 9. The array becomes [6, 9]. - Finally, choose 6 and 9. Their sum is 15. The array now contains only one element, which is 15.","solution":"def final_sum(n, arr): Returns the final sum after applying the series of operations described. return sum(arr)"},{"question":"A company is testing out a new message encryption system. In this system, each message is encrypted using a simple substitution cipher. The substitution cipher is defined by a single integer key, K, which shifts each letter in the alphabet by K positions. For example, with a key of K = 3, \'A\' becomes \'D\', \'B\' becomes \'E\', and so on. Wrapping around the end of the alphabet is required, so with K = 3, \'Y\' becomes \'B\', and \'Z\' becomes \'C\'. Non-alphabet characters remain unchanged. Your task is to write a program that can encrypt a given message using this cipher. # Input - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - Each test case consists of two lines: - The first line contains the integer K (0 ≤ K ≤ 25), the shift key. - The second line contains a string S (1 ≤ |S| ≤ 100), the message to be encrypted. # Output - For each test case, output the encrypted message on a new line. # Example Input ``` 2 3 HELLO WORLD 1 abc xyz ``` Output ``` KHOOR ZRUOG bcd yza ``` # Note In the first example: - Each letter in \\"HELLO WORLD\\" is shifted by 3 positions. - \'H\' becomes \'K\', \'E\' becomes \'H\', \'L\' becomes \'O\', \'L\' becomes \'O\', \'O\' becomes \'R\', and \'W\', \'O\', \'R\', \'L\', \'D\' are shifted similarly. In the second example: - Each letter in \\"abc xyz\\" is shifted by 1 position. - \'a\' becomes \'b\', \'b\' becomes \'c\', \'c\' becomes \'d\', \'x\' becomes \'y\', \'y\' becomes \'z\', and \'z\' becomes \'a\'.","solution":"def encrypt_message(K, S): Encrypts the message S using a simple substitution cipher with a shift key K. Args: K (int): The shift key. S (str): The message to be encrypted. Returns: str: The encrypted message. encrypted_message = [] for char in S: if \'A\' <= char <= \'Z\': encrypted_message.append(chr((ord(char) - ord(\'A\') + K) % 26 + ord(\'A\'))) elif \'a\' <= char <= \'z\': encrypted_message.append(chr((ord(char) - ord(\'a\') + K) % 26 + ord(\'a\'))) else: encrypted_message.append(char) # Non-alphabetic characters remain unchanged return \'\'.join(encrypted_message) def process_test_cases(test_cases): Processes multiple test cases for the encryption. Args: test_cases (list): List of tuples, where each tuple contains an integer K (shift key) and a string S (message to be encrypted). Returns: list: List of encrypted messages for each test case. results = [] for K, S in test_cases: results.append(encrypt_message(K, S)) return results"},{"question":"Mr. B has a bookshelf with a single row of books. Each book can be described by its height and width. Mr. B wants to arrange the books such that the heights of all books form a non-decreasing sequence from left to right. Given a list of books, each defined by a pair of integers where the first integer is the height and the second is the width of the book, write a program that efficiently determines the minimum width of the bookshelf required to place all the books in the desired order. # Input The input consists of multiple test cases. Each test case starts with an integer `n` (1 ≤ n ≤ 1000), the number of books. This is followed by `n` pairs of integers `h_i` and `w_i` (1 ≤ h_i, w_i ≤ 100), where `h_i` represents the height of the `i`-th book and `w_i` represents its width. The input terminates with a single line containing the integer zero. # Output For each test case, output a single integer representing the minimum width of the bookshelf required to arrange all the books in non-decreasing order of their heights. # Example Input ``` 5 4 1 3 2 2 3 5 4 4 2 3 7 1 6 2 5 3 0 ``` # Example Output ``` 9 6 ``` # Explanation In the first test case, the books can be arranged in non-decreasing order of height as follows: `[2, 3, 4, 4, 5]`. The corresponding widths are `[3, 2, 1, 2, 4]`, and the sum of these widths is `9`. In the second test case, the books are already in non-decreasing order of height, so the minimum width is the sum of the widths directly: `1 + 2 + 3 = 6`.","solution":"def min_bookshelf_width(test_cases): Determines the minimum width of the bookshelf required to arrange all the books in non-decreasing order of their heights. Parameters: test_cases (list of lists): A list of test cases where each test case is a list of tuples. Each tuple represents the height and width of a book. Returns: list: A list of integers representing the minimum width of the bookshelf for each test case. result = [] for books in test_cases: # Sort the books by their heights (primary) and widths (secondary) books.sort(key=lambda x: (x[0], x[1])) # Calculate the total width required total_width = sum(width for _, width in books) result.append(total_width) return result"},{"question":"Given a list of integers, find two numbers in the list that add up to a given target sum. Print their indices if such a pair is found, otherwise print \\"Not found\\". You may assume that each input would have exactly one solution, and you may not use the same element twice. Constraints * 2 ≤ list length ≤ 1000 * -10^6 ≤ integer values in the list ≤ 10^6 * -10^6 ≤ target sum ≤ 10^6 Input The input consists of multiple lines: The first line contains an integer n, the number of integers. The second line contains n space-separated integers representing the list elements. The third line contains a single integer, which is the target sum. Output Print the indices of the two numbers in the list that add up to the target sum in the following format: index1 index2 If no such pair exists, print \\"Not found\\". Examples Input 5 2 7 11 15 3 9 Output 0 1 Input 4 1 4 5 6 10 Output 1 3 Input 3 1 2 3 6 Output Not found","solution":"def find_pair_with_sum(n, arr, target): Finds indices of two numbers in the list that add up to the target sum. Parameters: n (int): Number of integers in the list. arr (list of int): The list of integers. target (int): The target sum. Returns: str: A string of the indices of the two numbers separated by space if found, otherwise \\"Not found\\". complements = {} for i in range(n): complement = target - arr[i] if complement in complements: return f\\"{complements[complement]} {i}\\" complements[arr[i]] = i return \\"Not found\\""},{"question":"In a world of digital systems, every bit of data transfer incurs some delay. Let’s help our friend Alex simulate a data packet transfer through a series of nodes. Each node introduces a certain amount of delay. The goal is to determine the total delay for a data packet to traverse from the starting node to the ending node in a network. The nodes are arranged in a straight line, and data packets can only move from one node to the adjacent node. Input The first line of the input contains two integers n (2 ≤ n ≤ 1000) and t (1 ≤ t ≤ 10000) — number of nodes and the time to process the data packet per unit distance, respectively. The next line contains n-1 integers d1, d2, ..., d{n-1} (1 ≤ di ≤ 100), where di represents the delay induced by the transfer from the i-th node to the (i+1)-th node. Output Output the total delay experienced by the data packet as it travels from the first node to the last node. Example Input 4 10 5 3 4 Output 120 Input 3 5 2 2 Output 20 Explanation For each pair of nodes, the total delay is calculated as the distance delay multiplied by t. Summing all these delays will give the final delay experienced by the data packet. For the given input examples: Example 1: Total delay = (5+3+4) * 10 = 12 * 10 = 120 Example 2: Total delay = (2+2) * 5 = 4 * 5 = 20","solution":"def total_delay(n, t, delays): Calculate the total delay experienced by the data packet. Parameters: n (int): Number of nodes. t (int): Time to process the data packet per unit distance. delays (list of int): List of delays between consecutive nodes. Returns: int: Total delay experienced by the data packet. return sum(delays) * t"},{"question":"Tod has a collection of books that he wants to organize. Each book has a unique identifier number and belongs to a particular genre. He wants a system where he can quickly find out how many books he has of each genre. You are given the number of books (N) and a list of pairs, where each pair contains a book identifier and its genre. Your task is to count the number of books in each genre and print the genre along with the count of books in that genre. Write a program that processes this information. INPUT The first input line contains the number N (1 ≤ N ≤ 100). Each of the next N lines contains a pair of a book identifier (a unique positive integer) and a genre (a string of lowercase alphabetical characters). OUTPUT Print each genre along with the count of books in that genre. The output should list each genre only once, in the order they first appear in the input. SAMPLE INPUT 5 1 mystery 2 romance 3 mystery 4 science 5 romance SAMPLE OUTPUT mystery 2 romance 2 science 1 Explanation In this example, there are 5 books with the following genre distribution: mystery (2), romance (2), science (1). Therefore, the program prints each genre and its corresponding count in the order they appear in the input.","solution":"def count_books_by_genre(N, book_list): Counts the number of books in each genre and prints each genre along with the count, in the order they first appear in the input. :param N: Number of books :param book_list: List of tuples, where each tuple contains a book identifier and a genre genre_count = {} genre_order = [] for book_id, genre in book_list: if genre not in genre_count: genre_count[genre] = 1 genre_order.append(genre) else: genre_count[genre] += 1 result = [] for genre in genre_order: result.append((genre, genre_count[genre])) return result def format_output(genre_count_list): Formats the output as expected. :param genre_count_list: List of tuples containing genre and their counts for genre, count in genre_count_list: print(f\\"{genre} {count}\\")"},{"question":"In a bustling tech conference, the organizers decided to host a coding competition where contestants are divided into teams. Each team has to accomplish a series of tasks within a given timeframe. The outcome of all tasks is either a success or a failure. Now, the number of successful tasks defines the strength of the team. The organizers want to determine the strongest and the weakest team based on the number of successful tasks. In case of a tie in the number of successful tasks, the team that accomplished their tasks earlier (appeared first in the input) is considered stronger. You are given the number of teams and for each team, the number of tasks and their outcomes. Can you help the organizers by determining the team numbers of the weakest and the strongest teams? Input Format: The first line contains an integer t (1 ≤ t ≤ 10^5) representing the number of teams. Each of the next t lines contains the number of tasks n (1 ≤ n ≤ 1000) followed by n integers, each being 0 or 1, where 1 represents a successful task and 0 represents a failed task. Output Format: Output two integers, the team number of the weakest team and the team number of the strongest team. The team numbers are based on their appearance in the input and are 1-indexed. Constraints: - 1 ≤ t ≤ 10^5 - 1 ≤ n ≤ 1000 - Each task outcome is either 0 or 1 SAMPLE INPUT 3 5 1 0 1 1 0 6 1 1 0 0 1 1 4 0 0 0 1 SAMPLE OUTPUT 3 2 Explanation: For the first team: 5 tasks with outcomes 1, 0, 1, 1, 0 - Total successful tasks: 3 For the second team: 6 tasks with outcomes 1, 1, 0, 0, 1, 1 - Total successful tasks: 4 For the third team: 4 tasks with outcomes 0, 0, 0, 1 - Total successful tasks: 1 The strongest team is the second team with 4 successful tasks. The weakest team is the third team with 1 successful task.","solution":"def find_weakest_and_strongest_teams(t, teams): weakest_team = (float(\'inf\'), float(\'inf\')) # (number of successes, team number) strongest_team = (float(\'-inf\'), float(\'-inf\')) # (number of successes, team number) for team_idx in range(t): n, *outcomes = teams[team_idx] success_count = sum(outcomes) if success_count < weakest_team[0]: weakest_team = (success_count, team_idx + 1) if success_count > strongest_team[0]: strongest_team = (success_count, team_idx + 1) return weakest_team[1], strongest_team[1] # Example usage: # teams = [ # (5, 1, 0, 1, 1, 0), # (6, 1, 1, 0, 0, 1, 1), # (4, 0, 0, 0, 1) # ] # t = len(teams) # print(find_weakest_and_strongest_teams(t, teams)) # Output: (3, 2)"},{"question":"Write a function that simulates a simplified system for parking management in a small parking lot. The parking lot has limited spaces and supports three types of parking passes: \\"Regular\\", \\"VIP\\", and \\"Handicap\\". The function should support three types of operations: 1. \\"enter type\\": A car with a specified parking type enters the lot. The function should check if there is space available for that type of parking pass and, if so, allow the car to enter. 2. \\"leave type\\": A car with a specified parking type leaves the lot. This operation frees up a space for that type of parking pass. 3. \\"status\\": The function should return the current number of occupied spaces for each parking type. The parking lot has the following capacity: - Regular: 10 spaces - VIP: 5 spaces - Handicap: 3 spaces Input Format: The input consists of multiple lines. Each line contains an operation of the form \\"enter type\\", \\"leave type\\", or \\"status\\", where type is one of \\"Regular\\", \\"VIP\\", or \\"Handicap\\". Output Format: For \\"enter type\\" operations, print \\"Enter successful\\" if a space is available and \\"Parking Full\\" otherwise. For \\"leave type\\" operations, print \\"Leave successful\\" if a corresponding car is in the lot and \\"No car of this type in the lot\\" if no car of that type is found. For \\"status\\" operations, print the number of occupied spaces for each parking type in the format \\"Regular: x, VIP: y, Handicap: z\\". Constraints: 1. Operations are case sensitive. 2. Operations are performed sequentially as provided in the input. Sample Input: ``` enter Regular enter VIP enter Handicap enter Regular status leave VIP status leave Regular leave Handicap status ``` Sample Output: ``` Enter successful Enter successful Enter successful Enter successful Regular: 2, VIP: 1, Handicap: 1 Leave successful Regular: 2, VIP: 0, Handicap: 1 Leave successful Leave successful Regular: 1, VIP: 0, Handicap: 0 ```","solution":"class ParkingLot: def __init__(self): self.capacity = {\'Regular\': 10, \'VIP\': 5, \'Handicap\': 3} self.occupied = {\'Regular\': 0, \'VIP\': 0, \'Handicap\': 0} def enter(self, car_type): if self.occupied[car_type] < self.capacity[car_type]: self.occupied[car_type] += 1 return \\"Enter successful\\" else: return \\"Parking Full\\" def leave(self, car_type): if self.occupied[car_type] > 0: self.occupied[car_type] -= 1 return \\"Leave successful\\" else: return \\"No car of this type in the lot\\" def status(self): return f\\"Regular: {self.occupied[\'Regular\']}, VIP: {self.occupied[\'VIP\']}, Handicap: {self.occupied[\'Handicap\']}\\" # Example Usage def handle_operations(operations): parking_lot = ParkingLot() results = [] for operation in operations: op_parts = operation.split() op_cmd = op_parts[0] if op_cmd == \\"enter\\": results.append(parking_lot.enter(op_parts[1])) elif op_cmd == \\"leave\\": results.append(parking_lot.leave(op_parts[1])) elif op_cmd == \\"status\\": results.append(parking_lot.status()) return results"},{"question":"A group of friends is planning a hiking trip. They need to decide on the best way to split their money for buying necessary supplies. Each friend contributes a different amount of money, and they want to distribute it as evenly as possible among the group members. Write a program that takes the number of friends and the amount of money each friend contributes, and determines the minimum possible difference between the highest and lowest amount each friend will have after an ideal distribution. Input: - The first line contains an integer N, the number of friends. - The second line contains N integers representing the money contributed by each friend. Output: - Print a single integer which is the minimum possible difference between the highest and lowest amount of money after redistribution. Example: Input: 4 100 50 150 200 Output: 50 Input: 3 30 10 60 Output: 20","solution":"def min_difference(N, contributions): total_money = sum(contributions) equal_share = total_money // N remaining_money = total_money % N if remaining_money == 0: return 0 else: return 1 # Because in most cases, the most any one friend can exceed or fall below the equal share is by 1 # Example usage: # N = 4 # contributions = [100, 50, 150, 200] # print(min_difference(N, contributions)) # Output: 0"},{"question":"You are given a string S consisting of lowercase English letters and an integer M. Your task is to find the length of the longest substring of S that contains at most M distinct characters. Constraints * 1≤|S|≤100000 * 1≤M≤26 Input The input is given from Standard Input in the following format: S M Output Print the length of the longest substring that contains at most M distinct characters. Examples Input abcba 2 Output 3 Input a 1 Output 1","solution":"def longest_substring_with_m_distinct_chars(s, m): Returns the length of the longest substring with at most m distinct characters. :param s: The input string :param m: The maximum number of distinct characters in the substring :return: The length of the longest substring with at most m distinct characters if m == 0: return 0 n = len(s) if n == 0 or m > n: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < n: char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > m: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"An alien spaceship has landed on Earth, and the aliens are fascinated by human mathematics. They have decided to test the humans\' understanding of array manipulations. The aliens have provided an array of integers and a target sum. Your task is to find the number of distinct pairs in the array that add up to the target sum. Each pair must consist of different elements (i.e., you cannot use the same element from the array twice in a pair). Write a function `count_pairs_with_sum` that takes an integer array `arr` and an integer `target_sum` as arguments, and returns the number of distinct pairs that add up to `target_sum`. Input - `arr` is a list of integers where the length of `arr` is between 1 and 1000 inclusive, and each element in `arr` is an integer between -1000 and 1000 inclusive. - `target_sum` is an integer between -2000 and 2000 inclusive. Output - Return the number of distinct pairs that sum to `target_sum`. Examples Input arr = [1, 5, 7, -1, 5] target_sum = 6 Output 2 Input arr = [1, 2, 3, 4, 3] target_sum = 6 Output 2","solution":"def count_pairs_with_sum(arr, target_sum): Returns the number of distinct pairs in `arr` that add up to `target_sum`. Each pair must consist of different elements. seen = set() pairs = set() for num in arr: complement = target_sum - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Write a program that determines whether a given sudoku puzzle is valid. A sudoku puzzle is valid if: 1. Each row contains the digits from 1 to 9 without repetition. 2. Each column contains the digits from 1 to 9 without repetition. 3. Each of the nine 3x3 sub-grids contains the digits from 1 to 9 without repetition. You should keep in mind that the puzzle might not be completed (i.e., some cells may contain 0s, which represent empty cells), but the current filled cells should not violate sudoku rules. Constraints * Each puzzle is represented by a 9x9 grid. * 0 ≤ grid[i][j] ≤ 9 for all i, j. Input The input consists of multiple test cases. The first line contains an integer N, the number of test cases. For each test case, nine lines follow, each containing exactly nine integers separated by spaces. Output For each test case, print \\"VALID\\" if the sudoku puzzle is valid according to the rules described above. Otherwise, print \\"INVALID\\". Example Input 2 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 5 5 3 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output VALID INVALID","solution":"def is_valid_sudoku(board): def is_valid_block(block): seen = set() for num in block: if num != 0: if num in seen: return False seen.add(num) return True def get_subgrid(board, row, col): subgrid = [] for r in range(row, row + 3): for c in range(col, col + 3): subgrid.append(board[r][c]) return subgrid for i in range(9): # Check rows and columns if not is_valid_block(board[i]) or not is_valid_block([board[row][i] for row in range(9)]): return \\"INVALID\\" for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_block(get_subgrid(board, row, col)): return \\"INVALID\\" return \\"VALID\\" def validate_sudoku_puzzles(test_cases): results = [] for board in test_cases: results.append(is_valid_sudoku(board)) return results"},{"question":"T-Rex is a fan of palindrome words and decided to play a game by creating special phrases. A palindrome is a word that reads the same forward as backward, ignoring case and spaces. For each phrase provided by T-Rex, he creates a new version by only keeping the words that are palindromes. Write a function that takes a sentence consisting of multiple words and returns a string containing only the palindromes from the input sentence, preserving their original order. Words are separated by exactly one space, and the phrase will not have any extra spaces at the beginning or end. The maximum length of the input sentence is 100 characters. Characters are limited to lowercase alphabets and spaces. Input The input will be a single sentence on a single line. Words are guaranteed to be separated by exactly one space. The total length of the input sentence will not exceed 100 characters. Output Output a single line containing the palindromes in the same order as they appear in the input sentence. Example Input: otto racecar noon level kayak Output: otto racecar noon level kayak Input: hello world wow stats Output: wow stats","solution":"def filter_palindromes(sentence): def is_palindrome(word): return word == word[::-1] words = sentence.split() palindromes = [word for word in words if is_palindrome(word)] return \\" \\".join(palindromes)"},{"question":"You are given a matrix where each element represents the height of a platform at that position. The matrix has n rows and m columns. Yurii wants to determine the number of \\"valley\\" cells in the matrix. A cell is considered a valley if its height is strictly lower than the heights of all its four direct neighbors (up, down, left, and right). If the cell is on the border of the matrix and doesn’t have all four neighbors, it cannot be considered a valley. Your task is to write a program that calculates the number of valley cells in the matrix. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the heights of the platforms. Each height h_i_j (0 ≤ h_i_j ≤ 10^6) is given. Output Output a single integer — the number of valley cells in the matrix. Examples Input 4 4 5 3 4 1 4 2 6 7 3 1 2 4 8 7 5 6 Output 1 Input 3 3 8 7 6 5 9 4 3 2 1 Output 0 Note In the first example, the cell (3,2) with height 1 is the only valley cell because all of its neighbors (3, 2, 1, 2) have greater heights. In the second example, no cell satisfies the condition of being strictly lower than all its direct neighbors.","solution":"def count_valleys(matrix): n = len(matrix) m = len(matrix[0]) valley_count = 0 for i in range(1, n-1): for j in range(1, m-1): current_height = matrix[i][j] if (current_height < matrix[i-1][j] and current_height < matrix[i+1][j] and current_height < matrix[i][j-1] and current_height < matrix[i][j+1]): valley_count += 1 return valley_count # Example usage: # n = 4 # m = 4 # matrix = [ # [5, 3, 4, 1], # [4, 2, 6, 7], # [3, 1, 2, 4], # [8, 7, 5, 6] # ] # print(count_valleys(matrix)) # Output: 1"},{"question":"A company has N employees organized in a hierarchical structure where each employee has a unique ID from 1 to N. The company wants to implement an application for message broadcasting. When a manager sends a message, it should reach all of their subordinates directly and indirectly. You are given a list of subordinates for each employee. The list contains pairs (u, v) where v is a direct subordinate of u. You need to design an efficient algorithm to find out which employees will receive the message if a given manager sends it. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 200,000), the number of employees and the number of direct subordinate relationships. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), denoting that v is a direct subordinate of u. - The last line contains one integer, Q (1 ≤ Q ≤ 100,000), the number of queries. Each of the next Q lines contains one integer, xi (1 ≤ xi ≤ N), which is the ID of the querying manager. Output: For each query, output the number of employees who will receive the message if the manager with ID xi sends it. Example: Input: ``` 6 5 1 2 1 3 3 4 3 5 4 6 3 1 3 4 ``` Output: ``` 5 3 1 ``` Explanation: - When employee 1 sends a message, it will reach employees 2, 3, 4, 5, and 6. Thus, 5 employees in total. - When employee 3 sends a message, it will reach employees 4, 5, and 6. Thus, 3 employees in total. - When employee 4 sends a message, it will only reach employee 6. Thus, 1 employee in total.","solution":"def count_subordinates(N, M, relationships, Q, queries): from collections import defaultdict, deque # Build the adjacency list for the tree subordinates = defaultdict(list) for u, v in relationships: subordinates[u].append(v) # Function to use DFS to count subordinates for each node def dfs_count(node): stack = [node] visited = set() count = 0 while stack: current = stack.pop() if current not in visited: visited.add(current) count += 1 for neighbor in subordinates[current]: if neighbor not in visited: stack.append(neighbor) return count - 1 # exclude the manager node itself # Pre-compute the results for each query results = {} for xi in queries: if xi not in results: results[xi] = dfs_count(xi) return [results[xi] for xi in queries]"},{"question":"You are given a list of integers and you need to find the length of the longest subsequence where the elements are in strictly increasing order. A subsequence can be created by deleting some or none of the elements from the list without changing the order of the remaining elements. Write a program that takes an integer array as input and outputs the length of the longest strictly increasing subsequence. Input You are given multiple datasets. Each dataset is represented by a sequence of space-separated integers where the first integer represents the length of the array, followed by the elements of the array. When the first integer is 0, it indicates the end of input. The number of datasets does not exceed 50. Each array length will not exceed 1000. Output For each dataset, print the length of the longest increasing subsequence on one line. Example Input 6 10 22 9 33 21 50 8 3 10 2 1 20 4 6 12 0 Output 4 4","solution":"def longest_increasing_subsequence_length(arr): Computes the length of the longest increasing subsequence in an array. if not arr: return 0 # DP array initialized to 1 because each element is an LIS of length 1 by itself dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(data): results = [] for line in data: parts = list(map(int, line.split())) if parts[0] == 0: break results.append(longest_increasing_subsequence_length(parts[1:])) return results"},{"question":"In a small remote village, there is a water pump that supplies water to the villagers. The water pump can only service one villager at a time. Each villager needs a specific amount of water and they arrive at the pump at a specific time. Help the villagers by writing a program that determines the order in which they will get water. Input Format On the first line, you will receive an integer n, the number of villagers. The next n lines each contain two space-separated integers, ai and wi, where ai is the arrival time of the ith villager and wi is the amount of water they need to fill in liters. Output Format Print the order (as single space separated integers) in which the villagers get their water. If two villagers finish getting water at the same time, print the smallest numbered villager first (remember, the villagers are numbered 1 to n). Constraints 1 ≤ n ≤ 1000 1 ≤ ai, wi ≤ 1000000 SAMPLE INPUT 4 1 3 2 1 3 2 5 1 SAMPLE OUTPUT 1 2 3 4 Explanation The first villager arrives at time 1 and needs 3 units of water, so they finish at time 4. The second villager arrives at time 2 and needs 1 unit of water, they start at time 4 and finish at time 5. The third villager arrives at time 3 and needs 2 units of water, they start at time 5 and finish at time 7. The fourth villager arrives at time 5 and needs 1 unit of water, they start at time 7 and finish at time 8. So, the order of service is: 1 2 3 4.","solution":"def villager_order(n, requests): # Each villager\'s request is a tuple of (index, arrival_time, water_needed) # Adding index to keep track of the original order of villagers requests = [(i + 1, arrival_time, water_needed) for i, (arrival_time, water_needed) in enumerate(requests)] # Sort villagers primarily by arrival time and secondarily by their index. requests.sort(key=lambda x: (x[1], x[0])) current_time = 0 order = [] for index, arrival_time, water_needed in requests: if current_time < arrival_time: current_time = arrival_time # They will start getting water at max(arrival_time, current_time) current_time += water_needed order.append(index) return order"},{"question":"Given a list of integers, your task is to split the list into two sublists such that the absolute difference between the sum of the two sublists is minimized. Print the sums of the two sublists in non-decreasing order. Input: - First line of the input contains an integer T, the number of test cases. - For each test case, the next line contains an integer N, the number of elements in the list. - The following line contains N integers, representing the elements of the list. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 15 1 ≤ element ≤ 100 Output: For each test case, output the sums of the two sublists in non-decreasing order. Example Input: 2 4 4 2 1 3 3 2 3 5 Example Output: 5 5 5 5","solution":"from itertools import combinations def minimal_difference_splits(arr): Given a list of integers, this function splits the list into two sublists such that the absolute difference between the sum of the two sublists is minimized. It returns a tuple of the sums of the two sublists in non-decreasing order. total_sum = sum(arr) half = len(arr) // 2 min_diff = float(\'inf\') best_split = None # Generate all possible combinations of splits for r in range(0, half + 1): for subset in combinations(arr, r): subset_sum = sum(subset) other_sum = total_sum - subset_sum diff = abs(subset_sum - other_sum) if diff < min_diff: min_diff = diff best_split = (subset_sum, other_sum) return tuple(sorted(best_split)) def process_test_cases(test_cases): results = [] for case in test_cases: N = case[0] arr = case[1] results.append(minimal_difference_splits(arr)) return results"},{"question":"Given an array of integers and a target integer, find all unique quadruplets in the array which gives the sum of the target. Assume that there will be at most one unique combination for each input, i.e., no two quadruplets with a same set of numbers will sum up to the target value. You may not use the same element twice in multiple quadruplets. Write a function `fourSum(arr: List[int], target: int) -> List[List[int]]` that returns a list of lists of integers representing the quadruplets that sum up to the target. Input - The first argument is a list of integers, `arr`, which can have any length and range from -1,000,000 to 1,000,000. - The second argument is an integer, `target`, which is the target sum of the quadruplets. Output - Return a list of lists of integers. Each list contains 4 integers representing a valid quadruplet that sums up to the target. If no such quadruplets are found, return an empty list. Example Input ``` arr = [1, 0, -1, 0, -2, 2] target = 0 ``` Output ``` [[-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] ``` Input ``` arr = [2, 2, 2, 2, 2] target = 8 ``` Output ``` [[2, 2, 2, 2]] ``` Note The solution should ensure that all quadruplets in the output list are unique. The order of the quadruplets in the output does not matter. Additionally, each individual quadruplet should be sorted in ascending order. If there are no such quadruplets, return an empty list.","solution":"def fourSum(arr, target): arr.sort() result = [] n = len(arr) for i in range(n - 3): if i > 0 and arr[i] == arr[i - 1]: # Skip duplicates continue for j in range(i + 1, n - 2): if j > i + 1 and arr[j] == arr[j - 1]: # Skip duplicates continue left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: result.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return result"},{"question":"You are given an n x n matrix consisting of non-negative integers. You need to perform a series of m queries on this matrix. Each query specifies two rows r1 and r2 and two columns c1 and c2, representing a submatrix within the original matrix. The task is to compute the sum of all the elements within this submatrix. Input The first line contains an integer n (1 ≤ n ≤ 500) — the size of the matrix (it will be an n x n matrix). The next n lines contain n integers each, representing the matrix. The j-th integer in the i-th line is aij (0 ≤ aij ≤ 10^9). The following line contains an integer m (1 ≤ m ≤ 10^4) — the number of queries to process. The next m lines contain four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n) — the coordinates of the top-left and bottom-right corners of the submatrix. Output Print m lines. The i-th line should contain the sum of the elements within the submatrix specified in the i-th query. Examples Input 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 Input 4 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 3 1 1 4 4 1 2 3 3 2 2 4 4 Output 4 2 3 Note The first example: 1. The first query selects the submatrix: 1 2 4 5 The sum is 12. 2. The second query selects the submatrix: 5 6 8 9 The sum is 28. The second example: 1. The first query selects the entire matrix. The sum is 1 + 1 + 1 + 1 = 4. 2. The second query selects the submatrix: 1 0 0 1 The sum is 1 + 1 = 2. 3. The third query selects the submatrix: 1 0 0 1 The sum is 1 + 1 + 1 = 3.","solution":"def compute_submatrix_sums(n, matrix, queries): # Step 1: Precompute the prefix sums prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = ( matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) # Step 2: Process each query using the precomputed prefix sums results = [] for r1, c1, r2, c2 in queries: total_sum = ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) results.append(total_sum) return results"},{"question":"A permutation of a string is an arrangement of its characters in a specific order. For example, \\"abc\\" has permutations \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Given two strings s and t of equal length, we say that s can transform into t if and only if a permutation of s can be found that matches t. Given a string s and a set of queries, each containing a string t, determine for each query if s can transform into t. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of string s. The second line contains the string s of length n, containing only lowercase English letters. The third line contains a single integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains a string t of length n, containing only lowercase English letters. Output For each query, output \\"YES\\" if a permutation of s can match t, otherwise output \\"NO\\". Example Input 4 aabb 3 abab baba abcd Output YES YES NO Explanation In the first and second queries, \\"aabb\\" can be rearranged to form \\"abab\\" and \\"baba\\", respectively. In the third query, there is no permutation of \\"aabb\\" that can form \\"abcd\\".","solution":"def can_transform(s, queries): Determines if \'s\' can be transformed into each query string in \'queries\'. from collections import Counter s_count = Counter(s) results = [] for t in queries: t_count = Counter(t) if s_count == t_count: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to process Q queries on the string. Each query is described by two integers Li and Ri and a lowercase letter Ci. For each query, you need to determine whether the substring of the given string from index Li to Ri (inclusive) contains the character Ci at least once. # Input and Output Format The first line contains the initial string `S` (1 ≤ |S| ≤ 10^5). The second line contains the number of queries `Q` (1 ≤ Q ≤ 10^5). For each of the following `Q` lines, three inputs are provided: two integers `Li` and `Ri` (1 ≤ Li ≤ Ri ≤ |S|) and a lowercase letter `Ci`. Note that the string is 1-indexed. For each query, output \\"YES\\" if the substring from index `Li` to `Ri` contains the character `Ci` at least once, otherwise output \\"NO\\". # Example **Input:** ``` abracadabra 3 1 5 a 1 5 b 6 11 r ``` **Output:** ``` YES YES YES ``` # Explanation - For the first query, the substring \\"abrac\\" contains the character \'a\', so the answer is \\"YES\\". - For the second query, the substring \\"abrac\\" contains the character \'b\', so the answer is \\"YES\\". - For the third query, the substring \\"dabra\\" contains the character \'r\', so the answer is \\"YES\\".","solution":"def process_queries(S, queries): results = [] for Li, Ri, Ci in queries: if Ci in S[Li-1:Ri]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Judy loves geometrical shapes and often designs intricate patterns using triangles. To explore her creativity, she has come up with a unique way to create larger triangles by joining four smaller triangles together. Let\'s define this process as follows: A Triangular Pyramid (TP) of level 1 is a single triangle. To construct a TP of level i (i > 1), we: 1. Take a TP of level i-1. 2. Create three exact copies of this TP of level i-1. 3. Arrange the four TPs of level i-1 such that they form a larger triangle. The three smaller TPs form the base, and the fourth TP is placed on top of the three so that its base aligns with the shared side of the other three TPs, creating an overall larger equilateral triangle. Given an integer n representing the level of a TP, Judy wants to know the total number of basic triangles (individual level 1 triangles) that can be formed in a TP of level n. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Next t lines contain test cases — one per line. Each line contains one integer n (1 ≤ n ≤ 10^6) — the level of the TP. Output For each test case, print a single integer — the total number of basic triangles in the TP of level n. Example Input 6 1 2 3 4 5 6 Output 1 4 13 40 121 364 Note - For TP of level 1, there\'s just 1 basic triangle. - For TP of level 2, we have 4 basic triangles (each level 1 triangle forms the TP of level 2). - For TP of level 3, we have 13 basic triangles. - The pattern follows a growth factor where each level significantly increases the number of basic triangles in a nested manner.","solution":"def calculate_basic_triangles(n): Calculate the number of basic triangles in a TP of level n. # Base case if n == 1: return 1 # Initialize dp array where dp[i] represents the number of basic triangles in level i dp = [0] * (n + 1) dp[1] = 1 # Fill dp array using the iterative approach for i in range(2, n + 1): dp[i] = 3 * dp[i - 1] + 1 return dp[n] def process_test_cases(test_cases): Process multiple test cases and return the results. results = [] for n in test_cases: results.append(calculate_basic_triangles(n)) return results"},{"question":"Alex and Bob are playing a game where they receive points based on timed checkpoints. Each player needs to reach two checkpoints in a certain order, and their total score is the sum of the points collected at each checkpoint. The first checkpoint of player A gives them x points if they reach it in t1 seconds, otherwise they get y points. Similarly, the second checkpoint of player A gives them z points if they reach it in t2 seconds, otherwise they get w points. Player B follows the same rules with different values. You need to determine the winner or if it’s a tie. Input The first line contains six integers x, y, z, w, t1, t2 (10 ≤ x, y, z, w ≤ 100, 1 ≤ t1, t2 ≤ 100) - corresponding to the scores and times for player A’s checkpoints. The second line contains six integers a, b, c, d, t3, t4 (10 ≤ a, b, c, d ≤ 100, 1 ≤ t3, t4 ≤ 100) - corresponding to the scores and times for player B’s checkpoints. Output Output on a single line: \\"Alex\\" (without the quotes), if Alex got more points than Bob. \\"Bob\\" (without the quotes), if Bob got more points than Alex. \\"Tie\\" (without the quotes), if both of them got the same number of points. Examples Input 50 20 70 30 7 15 60 25 80 35 10 20 Output Bob Input 80 60 50 40 5 7 60 70 40 35 6 8 Output Alex Input 40 30 20 10 4 6 40 30 20 10 4 6 Output Tie","solution":"def determine_winner(x, y, z, w, t1, t2, a, b, c, d, t3, t4): Determines the winner between Alex and Bob based on their scores at checkpoints. # Calculate Alex\'s score alex_score = (x if 1 <= t1 <= 10 else y) + (z if 1 <= t2 <= 10 else w) # Calculate Bob\'s score bob_score = (a if 1 <= t3 <= 10 else b) + (c if 1 <= t4 <= 10 else d) # Determine the winner or if it\'s a tie if alex_score > bob_score: return \\"Alex\\" elif bob_score > alex_score: return \\"Bob\\" else: return \\"Tie\\""},{"question":"The Grand Calculator Company has launched a new series of calculators equipped with an enhanced arithmetic compiler. However, they need help in implementing a feature that allows these calculators to correctly evaluate a custom mathematical expression that follows certain rules and conventions. The custom mathematical expression adheres to the following negative and positive rules: * The expression only contains digits `0-9`, the operations `+` (addition) and `-` (subtraction), and parentheses `(` and `)`. * There are no consecutive operators (e.g., `++`, `--`, `+-`, etc.). * The operators `+` and `-` have equal precedence and are left-associative. * All parentheses are well-formed and are used to override the precedence rules as standard. Your task is to write a function to evaluate such a custom mathematical expression and return the final result as an integer. Constraints - The length of the mathematical expression will be between 1 and 10^5 characters. - The expression might not be empty and will always be valid. - The integer results of intermediate steps will fit within the 32-bit signed integer range. Input The input is a single line containing the custom mathematical expression. Output Print the evaluated result of the expression. Examples Input 1 + 2 - (3 + 4) + 5 Output 1 Input 10 - (7 + 9 + 3) Output -9 Input (8 - 3) - (2 + (1 + 2 - 3)) + 4 - 5 Output 2","solution":"def evaluate_expression(expression): Evaluate the given custom arithmetic expression containing digits, +, -, and parentheses. def helper(exp, start): stack = [] num = 0 sign = 1 while start < len(exp): char = exp[start] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': stack.append(sign * num) num = 0 sign = 1 elif char == \'-\': stack.append(sign * num) num = 0 sign = -1 elif char == \'(\': num, start = helper(exp, start + 1) elif char == \')\': stack.append(sign * num) return sum(stack), start start += 1 stack.append(sign * num) return sum(stack), start result, _ = helper(expression.replace(\\" \\", \\"\\"), 0) return result"},{"question":"A famous architect is planning to design a modular building where each module is represented as a cube of the same size. These modules must be placed in a three-dimensional grid. Each cube can occupy a distinct cell in this grid, described by integer coordinates (x, y, z). The architect wants to ensure that the cubes form a cuboid in the grid so that it is aesthetically pleasing and structurally sound. The cuboid\'s width, depth, and height must all be greater than zero. The architect will give you the coordinates of several cubes and you must determine if it\'s possible to rearrange these cubes to form a perfect cuboid. Input The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) — the number of cubes. Next, there are n lines of three integers xi, yi, and zi ( -1000 ≤ xi, yi, zi ≤ 1000) — the coordinates of each cube. Output For each test case, print \\"YES\\" if it is possible to rearrange the cubes to form a perfect cuboid. Otherwise, print \\"NO\\". Examples Input 2 8 1 1 1 1 1 2 1 2 1 1 2 2 2 1 1 2 1 2 2 2 1 2 2 2 5 0 0 0 1 0 0 0 1 0 0 0 1 1 1 0 Output YES NO Explanation In the first test case, the 8 cubes can be arranged to form a 2x2x2 cuboid. In the second test case, it is impossible to rearrange the given 5 cubes to form a perfect cuboid.","solution":"def can_form_cuboid(cubes): Determines if the given cubes can be arranged to form a perfect cuboid. Parameters: cubes: List of tuples of the form (x, y, z) representing the coordinates of each cube. Returns: \\"YES\\" if the cubes can form a perfect cuboid, otherwise \\"NO\\". from collections import defaultdict min_x = min(cube[0] for cube in cubes) max_x = max(cube[0] for cube in cubes) min_y = min(cube[1] for cube in cubes) max_y = max(cube[1] for cube in cubes) min_z = min(cube[2] for cube in cubes) max_z = max(cube[2] for cube in cubes) expected_volume = (max_x - min_x + 1) * (max_y - min_y + 1) * (max_z - min_z + 1) if len(cubes) == expected_volume: return \\"YES\\" else: return \\"NO\\" def process_inputs(t, test_cases): results = [] for case in test_cases: n, coordinates = case results.append(can_form_cuboid(coordinates)) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) coordinates = [] for i in range(n): x = int(data[index+1 + i*3]) y = int(data[index+2 + i*3]) z = int(data[index+3 + i*3]) coordinates.append((x, y, z)) test_cases.append((n, coordinates)) index += 1 + n * 3 results = process_inputs(t, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"A software company is developing a new system for tracking server uptime. For this, they need to analyze and maximize the uptime over a period of N days, given the daily uptime logs. The daily logs contain the uptime for each of N days, which can be either positive (denoting uptime in seconds) or zero/negative (denoting downtime in seconds). The company wants to find the maximum possible sum of contiguous uptime that can achieve the longest stretch of consecutive server uptime days. Given the list of daily uptimes, determine the maximum sum of uptime that can be obtained from any contiguous subarray of the given list. Constraints * 1 ≤ N ≤ 500,000 * -500,000 ≤ Ui ≤ 500,000 (Uptime for day i) Input The input is given in the following format: N U1 U2 :: UN * The first line contains an integer N, representing the number of days. * The next N lines contain integers U1, U2, ..., UN, each of which represent the uptime for day i. Output Output the maximum sum of contiguous uptime that can be taken in one line. Examples Input 4 1 2 -1 2 Output 4 Input 5 3 -2 5 -1 2 Output 7 Input 3 -2 -3 -1 Output -1 Input 6 2 -1 2 3 -9 6 Output 6","solution":"def max_contiguous_uptime(n, uptimes): Finds the maximum sum of contiguous uptime that can be obtained from the given list of daily uptimes. Parameters: n (int): The number of days. uptimes (list): A list of integers representing the uptime for each day. Returns: int: The maximum sum of contiguous uptime. max_sum = uptimes[0] current_sum = uptimes[0] for i in range(1, n): current_sum = max(current_sum + uptimes[i], uptimes[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"The Sorcerer\'s book contains a magic ingredient and it\'s necessary to determine positions of this ingredient in a given text string. Given a pattern string and a text string, you need to find all occurrences of the pattern in the text in an efficient manner. A text is a sequence T of n characters: T = t1 t2 … tn A pattern is a sequence P of m characters: P = p1 p2 … pm Your task is to find all positions i in the text T where the pattern P starts (1 ≤ i ≤ n − m + 1). Output the starting indices of the pattern\'s occurrences in the text. Input The first line contains the pattern string P of length m (1 ≤ m ≤ 105). The second line contains the text string T of length n (1 ≤ n ≤ 106). Both P and T consist of lowercase English letters. Output Output the starting positions (1-based) of all occurrences of P in T, separated by spaces. If there are no occurrences, output an empty line. Examples Input abc abcabcabc Output 1 4 7 Input abcd ababcabc Output Note In the first example, the pattern \\"abc\\" occurs starting at positions 1, 4, and 7 in the text \\"abcabcabc\\". In the second example, the pattern \\"abcd\\" does not occur in the text \\"ababcabc\\". Hence, the output is an empty line.","solution":"def find_pattern_occurrences(pattern, text): Returns the starting indices (1-based) where the pattern occurs in the text. m = len(pattern) n = len(text) indices = [] # Using a simple sliding window approach for i in range(n - m + 1): if text[i:i+m] == pattern: indices.append(i + 1) return indices"},{"question":"A group of engineers are working on a new digital encryption system. The system relies on generating a sequence of integers based on specific rules, and they need your help to verify if the sequence produced is valid or not. The sequence generation follows these rules: 1. The sequence starts with an initial integer. 2. Each subsequent integer is either double the previous integer or half the previous integer. 3. The sequence must be strictly increasing (no two consecutive numbers should be the same or decrease). Your task is to write a function that determines whether a given sequence is valid based on the above rules. Input The first line contains an integer n (2 ≤ n ≤ 100000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the sequence of integers. Output Print \\"YES\\" if the sequence is valid according to the rules, otherwise, print \\"NO\\". Examples Input 4 1 2 4 8 Output YES Input 5 2 4 8 16 15 Output NO Input 3 5 10 5 Output NO Note In the first example, the sequence follows the rules: each number is double the previous number and the sequence is strictly increasing. In the second example, the last number 15 does not follow the rule of being either double or half of 8. In the third example, the sequence is not strictly increasing as 5 comes after 10.","solution":"def is_valid_sequence(n, sequence): Determines if the given sequence is valid based on the specified rules. :param n: int - Number of elements in the sequence. :param sequence: List[int] - The sequence of integers to be verified. :return: str - \\"YES\\" if the sequence is valid, \\"NO\\" otherwise. for i in range(1, n): current, previous = sequence[i], sequence[i-1] if not (current == previous * 2 or current == previous / 2): return \\"NO\\" if current <= previous: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers and your task is to sort the integers using a customized sorting rule. The rule is defined as follows: 1. All even numbers should come before any odd number. 2. Within the even numbers, sort in ascending order. 3. Within the odd numbers, sort in descending order. Write a function that takes a list of integers and returns the list sorted according to the above rule. **Input** The first line of input contains a single integer T (1 ≤ T ≤ 100) – the number of test cases. Each of the next T lines contains: - An integer N (1 ≤ N ≤ 1000) – the number of elements in the list. - A list of N integers a_1, a_2, ..., a_N (-10^5 ≤ a_i ≤ 10^5). **Output** For each test case, output the sorted list on a new line. The elements of the list should be space-separated. **Example** Input: ``` 3 6 4 1 2 5 3 6 5 7 13 12 18 10 4 -2 3 -5 8 ``` Output: ``` 2 4 6 5 3 1 10 12 18 13 7 -2 8 3 -5 ``` **Explanation:** - In the first test case, the even numbers (2, 4, 6) are sorted in ascending order, and the odd numbers (5, 3, 1) are sorted in descending order. - In the second test case, the even numbers (10, 12, 18) are sorted in ascending order, and the odd numbers (13, 7) are sorted in descending order. - In the third test case, the even numbers (-2, 8) are sorted in ascending order, and the odd numbers (3, -5) are sorted in descending order.","solution":"def custom_sort(nums): Sorts the list of integers based on the custom sorting rule: 1. All even numbers should come before any odd number. 2. Within the even numbers, sort in ascending order. 3. Within the odd numbers, sort in descending order. even_numbers = sorted([x for x in nums if x % 2 == 0]) odd_numbers = sorted([x for x in nums if x % 2 != 0], reverse=True) return even_numbers + odd_numbers def sort_test_cases(T, cases): results = [] for i in range(T): N, nums = cases[i] sorted_list = custom_sort(nums) results.append(sorted_list) return results"},{"question":"Alex has a string S consisting of lowercase English letters. He wants to modify the string so that it contains no more than two distinct characters and is as long as possible. Determine the length of the longest substring of S that meets these conditions. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. Output For each test case, print a single line containing the length of the longest substring with no more than two distinct characters. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 S contains only lowercase English letters. Example Input: 2 eceba ccaabbb Output: 3 5 Explanation Example case 1. The longest substring with at most two distinct characters is \\"ece\\", which has length 3. Example case 2. The longest substring with at most two distinct characters is \\"aabbb\\", which has length 5.","solution":"def longest_substring_with_two_distinct_chars(S): Returns the length of the longest substring with no more than two distinct characters. n = len(S) if n == 0: return 0 left = 0 right = 0 max_len = 0 char_map = {} while right < n: if len(char_map) <= 2: char_map[S[right]] = char_map.get(S[right], 0) + 1 right += 1 if len(char_map) > 2: char_map[S[left]] -= 1 if char_map[S[left]] == 0: del char_map[S[left]] left += 1 max_len = max(max_len, right - left) return max_len def solve_test_cases(T, test_cases): results = [] for test_case in test_cases: results.append(longest_substring_with_two_distinct_chars(test_case)) return results"},{"question":"You are given a string s consisting of lowercase Latin letters. You need to determine the minimum number of characters you need to remove from the string so that the remaining characters of the string contain no pair of adjacent characters that are the same. Input The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5). Output For each test case, print a single integer — the minimum number of characters you need to remove from the string so that the remaining characters of the string contain no pair of adjacent characters that are the same. Examples Input 3 abccba aabb abc Output 1 2 0 Note In the first test case, you can remove one \'c\' to get \\"abcba\\". In the second test case, you need to remove two characters to get \\"ab\\" or \\"ba\\". In the third test case, no removals are needed since there are already no adjacent characters that are the same.","solution":"def min_removals_to_avoid_adjacent_duplicates(t, cases): results = [] for s in cases: remove_count = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: remove_count += 1 results.append(remove_count) return results"},{"question":"A popular way of encoding text is using a modified version of Morse code, called \\"Secret Morse\\". In Secret Morse, each letter of the English alphabet, as well as digits from 0 to 9, is replaced by a sequence of dots (.) and dashes (-). Each character in the string is separated by a space. Your task is to decode the given Secret Morse code string back to the original text. You will be given a dictionary mapping of the Secret Morse code to the appropriate characters. Input The first line contains an integer n (1 ≤ n ≤ 40), the number of Secret Morse code mappings. The next n lines each contain a string in the format \\"<character> <code>\\", where <character> is a single English letter (lowercase or uppercase) or a digit, and <code> is the corresponding Secret Morse code for that character. The last line contains a string of encoded characters using the provided mappings. The encoded string will have a maximum length of 1000 characters. Output Output the decoded text. Examples Input 5 A .- B -... C -.-. 2 ..--- 5 .-..-. .-. ..--- .-.. Output AR2C Input 3 0 ----- 1 .---- X -..- -..- .---- Output X1","solution":"def decode_secret_morse(n, mappings, encoded_str): Decodes a given Secret Morse code string back to the original text. Parameters: n (int): Number of mappings. mappings (list of str): List of mappings in the format \\"<character> <code>\\". encoded_str (str): A string of encoded characters using the provided mappings. Returns: str: The decoded text. # Create a dictionary from the mappings morse_dict = {} for mapping in mappings: char, code = mapping.split() morse_dict[code] = char # Decode the encoded string decoded_text = \'\' codes = encoded_str.split() for code in codes: if code in morse_dict: decoded_text += morse_dict[code] else: decoded_text += \'?\' # If the code is not found, we append a question mark return decoded_text"},{"question":"Alex is a hobbyist meteorologist and likes to analyze wind patterns. He has data showing the wind speeds at different times of the day and wants to find the longest sequence of time intervals where the wind speed continually increases or remains constant. Can you help Alex determine the length of this longest sequence? Input The first line contains integer n (1 ≤ n ≤ 105) — the number of recorded time intervals. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109), where si is the wind speed recorded at the i-th interval. Output Print a single number — the length of the longest increasing or non-decreasing sequence of wind speeds. Examples Input 6 2 2 3 4 3 5 Output 4 Input 5 10 9 8 7 6 Output 1 Note In the first sample, the sequence of wind speeds is [2, 2, 3, 4, 3, 5]. The longest increasing or non-decreasing sequence is [2, 2, 3, 4], which has a length of 4. In the second sample, all wind speeds are decreasing. Therefore, the longest sequence where wind speeds are increasing or non-decreasing is any single interval, resulting in a length of 1.","solution":"def longest_increasing_sequence(n, speeds): Returns the length of the longest sequence of time intervals where the wind speed is continually increasing or remains constant. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if speeds[i] >= speeds[i-1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 return max_length"},{"question":"You are organizing a party and you have a list of tasks that need to be completed. Each task has a specific duration and a deadline by which it should be completed. You need to schedule the tasks in such a way that you can complete the maximum number of tasks before their respective deadlines. You are given an array of tasks where each task is represented by a tuple (duration, deadline). Input The first line contains integer n (1 ≤ n ≤ 1000) — the number of tasks. The next n lines each contain two integers ti and di (1 ≤ ti, di ≤ 1000) — the duration and deadline of the i-th task. Output Print a single integer — the maximum number of tasks you can complete before their deadlines. Examples Input 3 3 9 2 5 1 7 Output 3 Input 4 4 4 1 3 2 6 3 8 Output 3 Input 2 5 5 6 6 Output 1 Input 1 2 3 Output 1","solution":"def max_tasks(n, tasks): Returns the maximum number of tasks that can be completed before their deadlines. Parameters: n (int): The number of tasks tasks (list of tuples): A list of tuples where each tuple contains two integers (duration, deadline) Returns: int: Maximum number of tasks that can be completed before their deadlines # Sort tasks by their deadlines tasks.sort(key=lambda x: x[1]) current_time = 0 count = 0 for duration, deadline in tasks: if current_time + duration <= deadline: current_time += duration count += 1 return count"},{"question":"The local library has a unique way of managing its book lending system. Each member of the library can borrow exactly one book at a time and return it before borrowing another. The library employs a system that ensures that each member can borrow and return books efficiently. The system can be represented as follows: - Each member has a unique ID and is identified by their ID. - Each book also has a unique ID and is identified by its ID. You are tasked with designing a function that keeps track of book borrowings and returns. The library provides two types of operations: 1. Borrow a book: A member can borrow a book if it is not already borrowed by someone else. 2. Return a book: A member returns the book they currently have. The events occur in real-time and are provided to you in sequence. Your task is to implement the process and output the state of book borrowings after all operations are performed. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of members and the number of operations respectively. The following m lines each contain a description of an operation in one of two forms: - \\"B <bookID> <memberID>\\": This denotes that member with ID memberID wants to borrow book with ID bookID. - \\"R <memberID>\\": This denotes that member with ID memberID wants to return their currently borrowed book. Output Output the final state of book borrowings for each member who has borrowed a book. For each member that has a book borrowed, output the member ID followed by the book ID they have borrowed. If a member has not borrowed any book, they should not appear in the output. Examples Input 5 5 B 101 1 B 102 2 B 101 3 R 1 B 103 1 Output 2 102 1 103 Input 4 3 B 201 1 B 202 2 R 2 Output 1 201 Note In the first sample, member 1 borrows book 101, member 2 borrows book 102, and then member 3 attempts to borrow book 101 but cannot since it is already borrowed. Then, member 1 returns book 101 and later borrows book 103. Finally, member 2 retains book 102 and member 1 has book 103. In the second sample, member 1 borrows book 201, and member 2 borrows book 202 but then returns it. The final state shows that only member 1 has book 201.","solution":"def process_library_operations(n, m, operations): member_books = {} borrowed_books = set() for operation in operations: parts = operation.split() if parts[0] == \'B\': book_id = int(parts[1]) member_id = int(parts[2]) if book_id not in borrowed_books: borrowed_books.add(book_id) member_books[member_id] = book_id elif parts[0] == \'R\': member_id = int(parts[1]) if member_id in member_books: book_id = member_books[member_id] borrowed_books.remove(book_id) del member_books[member_id] result = [] for member_id in sorted(member_books.keys()): result.append((member_id, member_books[member_id])) return result"},{"question":"Taro is working on another homework assignment, which involves logical expression simplification. His task is to simplify boolean expressions consisting of and (&), or (|), and not (!) operators. Additionally, Taro needs to handle parentheses to enforce operation precedence. Your task is to help Taro by writing a program that simplifies given boolean expressions by evaluating them based on logical truth values. The boolean expressions follow these rules: 1. The expressions only contain the characters \'T\' (representing true), \'F\' (representing false), parentheses \'(\', \')\', and the operators \'&\' (and), \'|\' (or), and \'!\' (not). 2. The precedence of operators is as follows (from highest to lowest): !, &, |. 3. Parentheses can override the precedence order, and nested parentheses are allowed. The goal is to evaluate the given boolean expression and reduce it to a single boolean value (either \'T\' or \'F\'). Let\'s see an example: Consider the boolean expression `!(T & (F | T))`. 1. The expression inside the parentheses `(F | T)` evaluates to `T` since `F or T` is `T`. 2. The complete expression becomes `!(T & T)` because we substitute the result of `(F | T)` with `T`. 3. According to the precedence, `T & T` evaluates to `T` since `T and T` is `T`. 4. Finally, `!T` evaluates to `F` since not `T` is `F`. Thus, the expression `!(T & (F | T))` simplifies to `F`. Input The input contains multiple boolean expressions. Each boolean expression is given in a single line. The input ends with a line containing a single period (.) which should not be processed. Output For each boolean expression, you should output the reduced boolean value (\'T\' or \'F\') in a single line. Example Input T & F !(T | F) (T & F) | !F !(T & (F | T)) (T | (!F & T)) . Output F F T F T","solution":"def simplify_boolean_expression(expression): Simplifies a boolean expression and returns the result as \'T\' or \'F\'. def eval_expr(expr): if expr == \'T\': return True elif expr == \'F\': return False elif expr == \'!T\': return False elif expr == \'!F\': return True elif \' & \' in expr: left, right = expr.split(\' & \', 1) return eval_expr(left) and eval_expr(right) elif \' | \' in expr: left, right = expr.split(\' | \', 1) return eval_expr(left) or eval_expr(right) else: raise ValueError(\\"Unexpected expression part: \\" + expr) while \'(\' in expression: # Find the innermost parentheses closing_paren = expression.index(\')\') opening_paren = expression.rfind(\'(\', 0, closing_paren) inner_expr = expression[opening_paren + 1:closing_paren] result = eval_expr(inner_expr) expression = expression[:opening_paren] + (\'T\' if result else \'F\') + expression[closing_paren + 1:] return \'T\' if eval_expr(expression) else \'F\' def process_input(expressions): results = [] for expr in expressions: if expr == \\".\\": break results.append(simplify_boolean_expression(expr)) return results # Example usage input_lines = [ \\"T & F\\", \\"!(T | F)\\", \\"(T & F) | !F\\", \\"!(T & (F | T))\\", \\"(T | (!F & T))\\", \\".\\" ] print(process_input(input_lines))"},{"question":"Develop a function to simulate a mini social media post management system. The function should be able to handle creating a new post, editing an existing post, and deleting a post. Each post is represented by a unique post ID and has associated text content. Input format: The first line contains an integer T, the number of operations. Each of the next T lines describes an operation in one of the following three formats: 1. \\"CREATE <post_id> <content>\\" - Create a new post with the given post_id and content. 2. \\"EDIT <post_id> <new_content>\\" - Edit the post with the given post_id and update its content to new_content. 3. \\"DELETE <post_id>\\" - Delete the post with the given post_id. Output format: - For each \\"CREATE\\" operation, output \\"Post Created\\" if the post is successfully created, or \\"Post ID Exists\\" if a post with the given post_id already exists. - For each \\"EDIT\\" operation, output \\"Post Edited\\" if the post is successfully edited, or \\"Post Not Found\\" if no post with the given post_id exists. - For each \\"DELETE\\" operation, output \\"Post Deleted\\" if the post is successfully deleted, or \\"Post Not Found\\" if no post with the given post_id exists. Constraints: 1 ≤ T ≤ 10^4 1 ≤ length of post_id ≤ 20 1 ≤ length of content, new_content ≤ 100 SAMPLE INPUT 6 CREATE 1 HelloWorld CREATE 2 ThisIsASecondPost EDIT 1 HelloWorldEdited DELETE 2 DELETE 3 EDIT 3 ShouldNotWork SAMPLE OUTPUT Post Created Post Created Post Edited Post Deleted Post Not Found Post Not Found Explanation: - The first \\"CREATE\\" operation successfully creates a post with ID 1 and content \\"HelloWorld\\". - The second \\"CREATE\\" operation successfully creates a post with ID 2 and content \\"ThisIsASecondPost\\". - The \\"EDIT\\" operation changes the content of post ID 1 to \\"HelloWorldEdited\\". - The first \\"DELETE\\" operation removes the post with ID 2. - The second \\"DELETE\\" operation fails because there is no post with ID 3. - The second \\"EDIT\\" operation fails because there is no post with ID 3.","solution":"def manage_posts(operations): Manages a series of operations (CREATE, EDIT, DELETE) on social media posts. Returns a list of results for each operation. posts = {} results = [] for operation in operations: parts = operation.split(\\" \\", 2) command, post_id = parts[0], parts[1] if command == \\"CREATE\\": content = parts[2] if post_id in posts: results.append(\\"Post ID Exists\\") else: posts[post_id] = content results.append(\\"Post Created\\") elif command == \\"EDIT\\": new_content = parts[2] if post_id in posts: posts[post_id] = new_content results.append(\\"Post Edited\\") else: results.append(\\"Post Not Found\\") elif command == \\"DELETE\\": if post_id in posts: del posts[post_id] results.append(\\"Post Deleted\\") else: results.append(\\"Post Not Found\\") return results"},{"question":"A large technology company is implementing a security system that involves the use of digital locks on doors. Each lock can be unlocked with a unique digital code. Employees are given two types of operations: 1. Generate a new random unique 10-digit code and assign it to an employee. 2. Verify whether a code entered by an employee matches the one in the system for the specific door they are accessing. To simplify, the codes consist solely of digits (0-9) and are globally unique across all employees and all doors. To manage the locks and ensure security, you are asked to implement the following operations: 1. `1 employeeID doorID` — Generate a new unique 10-digit code, assign it to the employee for the specified door, and store the association of (employeeID, doorID) with this code. 2. `2 employeeID doorID code` — Verify if the provided code matches the stored code for the given employeeID and doorID. If it matches, grant access by printing \\"ACCESS GRANTED\\". If it does not match, print \\"ACCESS DENIED\\". Input The first line of the input contains an integer `n` — the number of events (1 ≤ n ≤ 10^5). Each of the following `n` lines describes an event in one of the specified formats. Output For each event of type 2, print the corresponding output: \\"ACCESS GRANTED\\" or \\"ACCESS DENIED\\". Example Input 8 1 101 21 1 102 22 2 101 21 1234567890 2 102 22 0987654321 1 101 21 2 101 21 1234567890 2 101 21 2345678901 2 102 22 7654321098 Output ACCESS GRANTED ACCESS DENIED ACCESS GRANTED ACCESS DENIED","solution":"import random class DigitalLockSystem: def __init__(self): self.lock_codes = {} def generate_code(self): return \'\'.join(random.choices(\'0123456789\', k=10)) def assign_code(self, employee_id, door_id): new_code = self.generate_code() self.lock_codes[(employee_id, door_id)] = new_code return new_code def verify_code(self, employee_id, door_id, code): stored_code = self.lock_codes.get((employee_id, door_id)) if stored_code == code: return \\"ACCESS GRANTED\\" return \\"ACCESS DENIED\\" def main(events): system = DigitalLockSystem() results = [] for event in events: parts = event.split() operation = parts[0] employee_id = parts[1] door_id = parts[2] if operation == \'1\': system.assign_code(employee_id, door_id) elif operation == \'2\': code = parts[3] results.append(system.verify_code(employee_id, door_id, code)) return results # Sample Input events = [ \\"1 101 21\\", \\"1 102 22\\", \\"2 101 21 1234567890\\", \\"2 102 22 0987654321\\", \\"1 101 21\\", \\"2 101 21 1234567890\\", \\"2 101 21 2345678901\\", \\"2 102 22 7654321098\\" ] print(main(events)) # Example use"},{"question":"# Instructions You are part of a team developing a search engine feature that suggests possible queries based on a prefix typed by the user. To enhance user experience, your goal is to implement a function that returns the most frequently searched query that starts with a given prefix. The function should search through a list of previously searched queries and return the most frequent one that matches the prefix. If multiple queries have the same highest frequency, return the lexicographically smallest one among them. If no query matches the prefix, return the prefix itself. # Function Signature ```python def suggest_query(prefix: str, queries: List[str]) -> str: pass ``` # Input - `prefix`: A string representing the prefix typed by the user. - `queries`: A list of tuples, where each tuple contains a string (a previously searched query) and an integer (the frequency of that query). # Output - Return the most frequently searched query that starts with the given prefix. If multiple queries have the same highest frequency, return the lexicographically smallest one among them. If no query matches the prefix, return the prefix itself. # Example Input ```python prefix = \\"hel\\" queries = [(\\"hello\\", 10), (\\"help\\", 5), (\\"helicopter\\", 7), (\\"hell\\", 10)] ``` Output ```python \\"hell\\" ``` Input ```python prefix = \\"wor\\" queries = [(\\"word\\", 15), (\\"world\\", 10)] ``` Output ```python \\"word\\" ``` Input ```python prefix = \\"pre\\" queries = [(\\"prefix\\", 3), (\\"predicate\\", 3), (\\"preempt\\", 3), (\\"present\\", 3)] ``` Output ```python \\"predicate\\" ``` # Constraints - The length of `prefix` will be between 1 and 100 characters. - The length of each query string will be between 1 and 100 characters. - The list of queries will contain at most 1000 items. - The frequency of each query will be a positive integer between 1 and 1000. # Explanation In the first example, \\"hell\\" and \\"hello\\" both have the highest frequency of 10, but \\"hell\\" is lexicographically smaller than \\"hello\\", so \\"hell\\" is returned. In the second example, \\"word\\" has a higher frequency than \\"world\\", so \\"word\\" is returned. In the third example, multiple queries have the same highest frequency of 3; among \\"prefix\\", \\"predicate\\", \\"preempt\\", and \\"present\\", the lexicographically smallest one is \\"predicate\\". Therefore, \\"predicate\\" is returned.","solution":"from typing import List, Tuple def suggest_query(prefix: str, queries: List[Tuple[str, int]]) -> str: filtered_queries = [query for query in queries if query[0].startswith(prefix)] if not filtered_queries: return prefix # Sort first by frequency in descending order, then lexicographically in ascending order filtered_queries.sort(key=lambda x: (-x[1], x[0])) return filtered_queries[0][0]"},{"question":"Given an integer array nums and an integer target, return the number of index pairs (i, j) such that nums[i] + nums[j] == target, where 0 <= i < j < nums.length. Input The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of testcases. For each testcase: - The first line contains a single integer n (2 ≤ n ≤ 10^3) — the number of elements in the array. - The second line contains n integers nums_1, nums_2, ..., nums_n (-10^3 ≤ nums_i ≤ 10^3) — the given array. - The third line contains a single integer target (-10^3 ≤ target ≤ 10^3). Output For each testcase, print a single integer — the number of index pairs (i, j) such that nums[i] + nums[j] equals the target, where 0 ≤ i < j < n. Example Input 3 4 1 2 3 4 5 5 1 1 1 1 1 2 6 -1 0 1 2 -1 -4 -2 Output 2 10 4 Note In the first testcase, the pairs that sum up to 5 are (1, 4) and (2, 3). In the second testcase, each pair of indices where nums[i]=1 and nums[j]=1 will sum up to 2. As all elements are 1, there are 10 such unique pairs. In the third testcase, the pairs that sum up to -2 are (-1, -1) and (-4, 2) repeated as valid pairs. Therefore, there are 4 possible index pairs.","solution":"def count_pairs(nums, target): Returns the number of index pairs (i, j) such that nums[i] + nums[j] == target. count = 0 n = len(nums) for i in range(n): for j in range(i + 1, n): if nums[i] + nums[j] == target: count += 1 return count def solve(testcases): results = [] for testcase in testcases: n, nums, target = testcase results.append(count_pairs(nums, target)) return results"},{"question":"You are given a set of n points in a 2D plane. Your task is to determine if there exists a rectangle such that all its four sides are parallel to the x-axis and y-axis and it contains exactly three of the given points. Input The first line contains a single integer n (4 ≤ n ≤ 100). Each of the next n lines contains two integers x and y (0 ≤ x, y ≤ 1000) - the coordinates of a point in the plane. Output Print \\"YES\\" if there exists such a rectangle containing exactly three of the given points inside it, otherwise print \\"NO\\". Examples Input 5 1 1 5 1 1 5 5 5 3 3 Output YES Input 6 0 0 2 3 3 2 4 4 1 5 5 1 Output NO","solution":"def find_rectangle_with_three_points(points): Returns \\"YES\\" if there exists a rectangle with sides parallel to axes containing exactly three of the points, otherwise \\"NO\\". from itertools import combinations point_set = set(points) n = len(points) # Check combinations of 4 points for comb in combinations(points, 4): # A rectangle can be determined by having two points determining one diagonal x1, y1 = comb[0] x2, y2 = comb[1] if (x1 != x2 and y1 != y2): # These are potential opposite corners of a rectangle if (x1, y2) in point_set and (x2, y1) in point_set: # Now check the remaining points remaining_points = set(comb) - {(x1, y1), (x2, y2), (x1, y2), (x2, y1)} if len(remaining_points) == 1: # We have exactly three points inside the rectangle formed by four original points return \\"YES\\" return \\"NO\\""},{"question":"You are helping a local school organize an event where students participate in a relay race. The race track is divided into segments, each with a different difficulty level. To strategize for the race, the school wants to determine the segment that is the hardest and the segment that is the easiest to run through. Write a program that takes the number of datasets and for each dataset, it takes the number of segments in the race and the difficulty level of each segment. The difficulty level is represented by an integer, with a higher number indicating a more difficult segment. For every dataset, the program should output the easiest and the hardest segment in terms of difficulty. Example of a race track difficulty levels (first dataset of input example). Input The number of datasets t (0 < t ≤ 100) is given on the first line of the input. This line is followed by t datasets. The first line of the dataset is the number of segments n (1 ≤ n ≤ 100). In the second line, n integers indicating the difficulty level of each segment from start to finish are given in order. These integers are separated by a single space character. The difficulty level d of each segment satisfies 1 ≤ d ≤ 1000. Output For each dataset, output the difficulty level of the easiest segment and the difficulty level of the hardest segment on a single line, separated by a single space character. Example Input 3 5 3 15 7 20 10 4 12 5 8 13 3 9 9 9 Output 3 20 5 13 9 9","solution":"def find_easiest_and_hardest_segments(t, datasets): Returns the easiest and hardest segment difficulty levels for given datasets. Parameters: - t (int): number of datasets. - datasets (list of tuple): a list where each tuple contains the number of segments (int) and a list of difficulty levels for each segment (list of int). Returns: - list of tuple: a list where each tuple contains the easiest and hardest difficulty levels for the corresponding dataset. results = [] for dataset in datasets: n, difficulties = dataset easiest = min(difficulties) hardest = max(difficulties) results.append((easiest, hardest)) return results"},{"question":"You are given an arithmetical expression which might contain integers, the addition operator (+), the subtraction operator (-), and parentheses. Your task is to evaluate the expression correctly, accounting for the order of operations. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string, representing the arithmetical expression. The length of each expression is between 1 and 1000 characters. Expressions are valid and contain only integers (between 0 and 2147483647), addition and subtraction operators, and parentheses. Output For each test case, output a single integer — the result of evaluating the arithmetical expression. Example Input 3 7+3-(2+3) 1+(2-(1+2)) 10-(3+(2-5)) Output 5 0 10 Note In the first case, the evaluation proceeds as follows: 7 + 3 = 10, inside the parentheses, 2 + 3 = 5, 10 - 5 = 5. In the second case: Move inside the parentheses: 1 + 2 = 3, then we have 2 - 3 = -1, finally, 1 + (-1) = 0. In the third case: 2 - 5 = -3, then we have 3 + (-3) = 0, finally, 10 - 0 = 10.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression containing integers, addition (+) and subtraction (-) operators, and parentheses. return eval(expression) def evaluate_test_cases(t, expressions): results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results"},{"question":"In a small island nation, a highly confidential message is transmitted using a unique encryption technique that involves a coding wheel with Latin alphabets. The coding wheel consists of two concentric rings. The outer ring has all 26 uppercase Latin alphabets arranged in a standard order (\'A\' to \'Z\'), while the inner ring can be rotated to get any permutation of these letters. The current setting of the coding wheel is that both rings start with the letter \'A\' aligned with \'A\', \'B\' with \'B\', and so on. To encrypt a message, the inner ring is rotated by `k` positions clockwise, and each letter of the plaintext is replaced by the corresponding letter on the inner ring to form the ciphertext. Write a program that will take a plaintext, the number of positions `k` to rotate the inner ring, and output the corresponding ciphertext. # Input The input consists of several lines. Each line contains: 1. An integer `k` (0 ≤ k ≤ 25) 2. A string representing the plaintext message which consists of only uppercase Latin alphabets. The input terminates with a line containing only `-1`. # Output For each line of input (except the terminating line), output a single line containing the corresponding ciphertext. # Example Input ``` 3 HELLO 1 WORLD 0 ZEBRAS -1 ``` Output ``` KHOOR XPSME ZEBRAS ``` # Note Rotation by 0 positions means that the inner ring remains aligned with the outer ring, so the plaintext and ciphertext are the same in such a case.","solution":"def encrypt_message(k, plaintext): Encrypts the plaintext using the coding wheel technique. Parameters: k (int): The number of positions to rotate the inner ring clockwise. plaintext (str): The plaintext message to be encrypted. Returns: str: The encrypted ciphertext. alphabet = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' rotated_alphabet = alphabet[k:] + alphabet[:k] translation_table = str.maketrans(alphabet, rotated_alphabet) return plaintext.translate(translation_table) def process_messages(input_lines): Processes multiple lines of input to provide encrypted messages. Parameters: input_lines (list of str): List of input lines, each containing an integer and a plaintext string. Returns: list of str: List of encrypted messages. results = [] for line in input_lines: if line.strip() == \'-1\': break parts = line.split() k = int(parts[0]) plaintext = parts[1] results.append(encrypt_message(k, plaintext)) return results"},{"question":"You are given a rectangular grid represented as an `n x m` matrix, where each element in the matrix is either `0` or `1`. Your task is to identify clusters of connected `1`s in the matrix. Two elements are considered connected if they are adjacent horizontally or vertically, but not diagonally. A cluster is defined as a group of connected `1`s. You need to determine the number of distinct clusters in the matrix. # Input The first input line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), which represent the number of rows and columns in the matrix, respectively. The next `n` lines each contain `m` integers (either `0` or `1`), representing the elements of the matrix. # Output Print a single integer, which is the number of distinct clusters of connected `1`s in the matrix. # Example Input ``` 4 5 1 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 ``` Output ``` 3 ``` # Note In the example, there are 3 distinct clusters of connected `1`s: 1. The first cluster consists of the `1`s in the first two elements of the first row and the second element of the second row. 2. The second cluster is the single `1` at the end of the second row. 3. The third cluster includes the `1`s in the third and fourth rows second column.","solution":"DX = [0, 1, 0, -1] DY = [1, 0, -1, 0] def is_valid(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] == 1 and not visited[x][y] def dfs(x, y, n, m, grid, visited): stack = [(x, y)] while stack: cx, cy = stack.pop() for d in range(4): nx, ny = cx + DX[d], cy + DY[d] if is_valid(nx, ny, n, m, grid, visited): visited[nx][ny] = True stack.append((nx, ny)) def count_clusters(n, m, grid): visited = [[False for _ in range(m)] for _ in range(n)] clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: clusters += 1 visited[i][j] = True dfs(i, j, n, m, grid, visited) return clusters # Usage def find_clusters(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return count_clusters(n, m, grid)"},{"question":"You are given a square grid of size `n x n`, and each cell in the grid can either be empty (denoted by 0) or contain an obstacle (denoted by 1). You are required to find the length of the longest consecutive path of empty cells (0s) that can be traveled in a straight line vertically, horizontally, or diagonally. Formally, you need to compute the longest path of connected 0s in any of the 8 possible directions. Input The first line of input contains an integer n (1 ≤ n ≤ 500), the size of the grid. Each of the next n lines contains n space-separated integers (either 0 or 1), representing the grid. Output Output the length of the longest consecutive path of empty cells (0s). Examples Input 5 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 1 Output 5 Input 3 0 1 0 1 0 1 0 0 0 Output 3 Note In the first example, one of the longest paths of 0s is horizontally in the third row. In the second example, one of the longest paths of 0s is diagonally from (3,1) to (1,3).","solution":"def longest_consecutive_zeroes(grid): Returns the length of the longest path of consecutive 0s in any of the 8 possible directions. n = len(grid) def get_direction_vectors(): return [ (0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, 0), (-1, -1), (-1, 1) ] def in_bounds(x, y): return 0 <= x < n and 0 <= y < n def find_longest_from_cell(x, y): longest = 0 for dx, dy in get_direction_vectors(): length = 0 nx, ny = x, y while in_bounds(nx, ny) and grid[nx][ny] == 0: length += 1 nx += dx ny += dy longest = max(longest, length) return longest longest_path = 0 for i in range(n): for j in range(n): if grid[i][j] == 0: longest_path = max(longest_path, find_longest_from_cell(i, j)) return longest_path"},{"question":"In a given undirected graph, each node has a value assigned to it. Your task is to determine the maximum value a path can achieve, where a path is defined as a sequence of adjacent nodes (each node may be visited at most once), and the value of the path is the sum of the values of all nodes in the path. You will be given the number of nodes `n` and the values associated with each node in a space-separated format. After that, you will receive `m` edges, each representing a connection between two nodes. Input: - The first line contains an integer `n` (number of nodes). - The second line contains `n` integers representing the values of the nodes. - The third line contains an integer `m` (number of edges). - The next `m` lines each contain two integers `u` and `v`, indicating that there is an edge between nodes `u` and `v`. Output: - A single integer representing the maximum value of any path in the graph. Example: Input 5 3 4 -10 6 7 5 1 2 1 3 2 4 4 5 3 5 Output 17","solution":"def max_path_value(n, values, edges): from collections import defaultdict, deque def bfs(start): visited = [False] * n max_val = float(\'-inf\') queue = deque([(start, 0)]) while queue: node, current_sum = queue.popleft() if visited[node]: continue visited[node] = True current_sum += values[node] max_val = max(max_val, current_sum) for neighbor in graph[node]: if not visited[neighbor]: queue.append((neighbor, current_sum)) return max_val graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) overall_max_value = float(\'-inf\') for i in range(n): overall_max_value = max(overall_max_value, bfs(i)) return overall_max_value def from_input_string(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0].strip()) values = list(map(int, lines[1].strip().split())) m = int(lines[2].strip()) edges = [tuple(map(int, line.strip().split())) for line in lines[3:3 + m]] return n, values, edges def to_input_string(inputs): n, values, edges = inputs res = [] res.append(str(n)) res.append(\\" \\".join(map(str, values))) res.append(str(len(edges))) for edge in edges: res.append(\\" \\".join(map(str, edge))) return \\"n\\".join(res) def from_output_string(output_string): return int(output_string.strip()) def to_output_string(output): return str(output)"},{"question":"A city is planning to construct a series of amusement rides, each connected by paths. Each ride is represented as a node and each path between rides as an edge, forming a connected undirected graph. The cost of constructing each path varies. The city planners want to ensure that the entire amusement park is connected while minimizing the total cost of construction. In other words, they need to construct a minimum spanning tree (MST) of the graph. As a developer, you need to help them determine the cost of this MST. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100,000), representing the number of rides (nodes) and paths (edges) respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^4), indicating that there is a path between ride u and ride v with cost w. Output Print a single integer representing the minimum total cost required to construct all the paths such that all rides are connected. Example Input 4 5 1 2 1 1 3 4 2 3 2 2 4 7 3 4 3 Output 6 Explanation The minimum spanning tree can be achieved by selecting the paths (1-2), (2-3), and (3-4) with costs 1, 2, and 3 respectively, giving a total cost of 6.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_y] < rank[root_x]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent, rank = [], [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 edge_count = 0 for edge in edges: u, v, w = edge if find(parent, u) != find(parent, v): mst_cost += w union(parent, rank, find(parent, u), find(parent, v)) edge_count += 1 if edge_count == n - 1: break return mst_cost def minimum_spanning_tree_cost(n, m, edge_list): edges = [(u-1, v-1, w) for u, v, w in edge_list] return kruskal(n, edges)"},{"question":"In a galaxy far, far away, there is a planet named Zellion where a colony of intelligent robots live. The robots communicate with each other using a sequence of signals that can be represented as a string of characters. As the signals travel long distances, they sometimes get distorted. The robots have noticed that their signals always follow these two rules: 1. The length of the signal is always even. 2. The signal is composed of pairs of identical characters. But sometimes, due to distortions, the signals do not strictly adhere to the second rule. The robots need your help to rectify a given distorted signal into a valid signal by making the minimum number of changes. # Input The input consists of multiple test cases. The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. Each of the next `T` lines contains a string `s` (2 ≤ |s| ≤ 100, and |s| is even) representing the distorted signal for each test case. # Output For each test case, print the minimum number of changes required to convert the distorted signal into a valid signal. # Example Input ``` 2 AABBCC ABABAB ``` Output ``` 0 3 ``` # Explanation In the first test case, the signal is already valid. Therefore, no changes are required. In the second test case, the minimum number of changes required are 3. The corrected signal can be \\"AABBAB\\". Note: There could be multiple valid corrected signals for each distorted signal, but you need to find the minimum number of changes required.","solution":"def min_changes_to_valid_signal(T, signals): results = [] for s in signals: changes = 0 for i in range(0, len(s), 2): if s[i] != s[i + 1]: changes += 1 results.append(changes) return results"},{"question":"You have a garden with a grid of m rows and n columns of flower beds. Each cell in the grid can either be empty (represented by \'.\') or can contain a flower (represented by \'*\'). You want to determine how many flowers are in the smallest rectangle that contains all the flowers in the garden. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the garden. Each of the next m lines contains exactly n characters, representing the garden grid. Output Print a single integer — the number of flowers in the smallest rectangle that contains all the flowers in the garden. Examples Input 4 5 ..... ..*.. .***. ..... Output 4 Input 3 3 .*. .*. ... Output 2 Note In the first sample, the smallest rectangle that contains all the flowers is: ..*.. .***. There are 4 flowers within this rectangle. In the second sample, the smallest rectangle that contains all the flowers is: .*. .*. There are 2 flowers within this rectangle.","solution":"def count_flowers(m, n, garden): Returns the number of flowers in the smallest rectangle that contains all the flowers. Parameters: m (int): number of rows in the garden n (int): number of columns in the garden garden (list of str): grid representing the garden Returns: int: number of flowers in the smallest rectangle containing all the flowers min_row, max_row, min_col, max_col = m, 0, n, 0 flowers = 0 for i in range(m): for j in range(n): if garden[i][j] == \'*\': flowers += 1 min_row = min(min_row, i) max_row = max(max_row, i) min_col = min(min_col, j) max_col = max(max_col, j) if flowers == 0: return 0 return flowers"},{"question":"You are given an array of integers and a target sum. Your task is to find if there are two distinct elements in the array that add up to the target sum using two different approaches: 1. Sorting-based Two Pointers. 2. Hash Map-based. # Input - The first line contains two integers n (1 ≤ n ≤ 10^5) and target (1 ≤ target ≤ 10^9) — the length of the array and the target sum. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. # Output - If such a pair exists, print \\"YES\\" in the first line. Then print the indices of the two distinct elements (1-based index) in the second line. If there are multiple pairs, print any of them. - If no such pair exists, print \\"NO\\". # Examples Input 6 10 2 7 11 15 1 8 Output YES 1 6 Input 5 20 1 2 3 4 5 Output NO","solution":"def two_sum_sorting(arr, target): Uses sorting and two pointers to find if there are two distinct elements that add up to the target sum. Returns a tuple (found, indices or None) where found is a boolean and indices are the 1-based indices of the elements. n = len(arr) indexed_arr = [(arr[i], i + 1) for i in range(n)] indexed_arr.sort(key=lambda x: x[0]) left = 0 right = n - 1 while left < right: current_sum = indexed_arr[left][0] + indexed_arr[right][0] if current_sum == target: return True, (indexed_arr[left][1], indexed_arr[right][1]) elif current_sum < target: left += 1 else: right -= 1 return False, None def two_sum_hashmap(arr, target): Uses a hash map to find if there are two distinct elements that add up to the target sum. Returns a tuple (found, indices or None) where found is a boolean and indices are the 1-based indices of the elements. num_dict = {} for i in range(len(arr)): complement = target - arr[i] if complement in num_dict: return True, (num_dict[complement] + 1, i + 1) num_dict[arr[i]] = i return False, None"},{"question":"John loves music and enjoys organizing his music library. He has a collection of songs, and he wants to create playlists based on specific criteria: each playlist should have exactly k unique songs, and no song should appear more than once in a playlist. However, John also wants to ensure that any two playlists are different. To make it more challenging, John wants to find out how many distinct playlists he can create from his collection. Your task is to help John by writing a program to calculate the number of distinct playlists he can create from a given collection of n songs, where each playlist must have exactly k unique songs. Input The first and only line of input contains two integers n and k (1 ≤ k ≤ n ≤ 1000), where n is the total number of songs John has, and k is the exact number of unique songs each playlist should contain. Output Print a single integer — the number of distinct playlists John can create. Examples Input 4 2 Output 6 Input 5 3 Output 10","solution":"import math def count_playlists(n, k): Returns the number of distinct playlists that can be created with n songs and each playlist should have exactly k unique songs. return math.comb(n, k) def math_combinations(n, k): Implementation of math.comb to calculate the combinations of n taken k at a time. return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))"},{"question":"You are given a list of integers. Your task is to modify the list such that every element appears at most twice and return the new length of the list. Do not allocate extra space for another array; you must do this by modifying the input list in-place with O(1) extra memory. Input - A list of integers where each integer appears zero or more times. Output - An integer representing the length of the modified list where every element appears at most twice. Examples Input [1,1,1,2,2,3] Output 5 Explanation The list is modified to [1,1,2,2,3] with length 5. Input [0,0,0,0,3,3,3,4,4,4,4,4] Output 6 Explanation The list is modified to [0,0,3,3,4,4] with length 6.","solution":"def remove_duplicates(nums): Modify the given list such that every element appears at most twice and return the new length of the list. Args: nums (list): A list of integers where each integer may appear multiple times. Returns: int: The length of the modified list where every element appears at most twice. if not nums: return 0 write_index = 1 count = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1]: count += 1 else: count = 1 if count <= 2: write_index += 1 return write_index"},{"question":"In a kingdom, there are N cities connected by M bidirectional roads. Each road connects two different cities and has an associated travel cost. The king wants to select a subset of these roads to construct a road network such that every two cities are connected either directly or indirectly through the selected roads. Furthermore, the cost of constructing this network should be minimized. Determine the minimum cost required to construct such a network using the bidirectional roads. Constraints * 1 ≦ N ≦ 10^5 * 0 ≦ M ≦ 2 × 10^5 * The cost of each road is between 1 and 1000. Input The input is given from Standard Input in the following format: N M u1 v1 w1 u2 v2 w2 ... uM vM wM Here, u_i and v_i denote the two cities connected by the i-th road, and w_i denotes the travel cost of that road. Output Print the minimum cost required to construct the road network. If it\'s not possible to connect all the cities, print `-1`. Example Input 4 5 1 2 3 2 3 4 3 4 5 4 1 2 1 3 7 Output 9 Input 3 1 1 2 1 Output -1","solution":"def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def minimum_cost_to_construct_network(N, M, roads): if N == 1: return 0 roads.sort(key=lambda x: x[2]) parent = [i for i in range(N + 1)] rank = [0] * (N + 1) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return mst_cost else: return -1"},{"question":"Sarah is working on a text processing task for her new job. She needs to find patterns in a given text string by identifying the longest contiguous substring where no character appears more than once. Sarah knows that these substrings are important for her analysis, but she is having trouble writing a program that can efficiently find them. Can you help her out? You need to write a program that takes a string as an input and returns the longest substring without repeating characters. If there are multiple substrings with the same maximum length, return any one of them. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5). The string s contains any printable ASCII characters. Output Output the longest substring of s that contains no repeating characters. If there are multiple solutions, print any one of them. Examples Input abcabcbb Output abc Input bbbbb Output b Input pwwkew Output wke Note In the first example, the answer is \\"abc\\", with the length of 3. Note that \\"bca\\" and \\"cab\\" are also valid answers. In the second example, the answer is \\"b\\", with the length of 1. Note that all characters are the same, so the longest contiguous substring without repeating characters is any single character. In the third example, the answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_substring_without_repeating_characters(s): Function to find the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 max_substring = \\"\\" for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index current_length = index - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:index + 1] return max_substring"},{"question":"Write a program to find the Longest Common Prefix (LCP) among a given list of strings. The LCP of a set of strings is the longest substring that is a prefix of all the strings in the set. For example: L = {\\"apple\\", \\"ape\\", \\"april\\"} // Here LCP is \\"ap\\" because it is the longest starting substring common to all strings. If there is no common prefix, return an empty string \\"\\". Input: The first line of input contains an integer t representing the number of test cases. Each of the following t test cases consists of an integer n, the number of strings, followed by n strings each in a new line. Output: Print the LCP for each test case. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 100000 1 ≤ |a[i]| ≤ 1000 (length of each string) SAMPLE INPUT 2 3 apple ape april 4 banana band bandana banner SAMPLE OUTPUT ap ban","solution":"def longest_common_prefix(strs): Function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". if not strs: return \\"\\" # Start with the prefix being the first string in the array prefix = strs[0] # Compare the prefix with each string in the array for string in strs[1:]: # Update the prefix until it\'s a prefix of the current string while string[:len(prefix)] != prefix: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix def find_lcps_for_cases(test_cases): Function to process multiple test cases and find the longest common prefix for each. Parameters: test_cases: List of tuples where each tuple contains an integer n and a list of n strings. Returns: res: List of longest common prefix for each test case. res = [] for n, strings in test_cases: lcp = longest_common_prefix(strings) res.append(lcp) return res # Sample input handling function def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) strings = input_lines[index + 1 : index + 1 + n] test_cases.append((n, strings)) index += n + 1 return test_cases"},{"question":"Caroline is playing a new game called \\"Treasure Hunt\\". In this game, she is in a maze represented by an m x n grid of characters. The grid has the following representations: - \'S\': start position of Caroline. - \'E\': end position, where the treasure is located. - \'#\': a wall that Caroline cannot pass through. - \'.\': an open cell that Caroline can move into. Caroline can move one cell in any of the four cardinal directions (up, down, left, right). You need to help Caroline determine if there exists a path from the start position \'S\' to the end position \'E\'. # Input - The first line of the input contains an integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case: - The first line contains two integers m and n (2 ≤ m, n ≤ 100), the number of rows and columns in the grid, respectively. - The following m lines contain n characters each, representing the grid. # Output For each test case, print \\"YES\\" if there is a path from \'S\' to \'E\', otherwise print \\"NO\\". # Examples Input ``` 2 5 5 S#... .#.#. .#.#E ..... ..... 5 5 S#... .#.#. .#.#E #.. ..... ``` Output ``` YES NO ``` # Note In the first set of the input of the first sample, Caroline can move to the right, down, down, right, right, right, and down to reach the treasure. In the second set of the input of the first sample, the walls block any possible path from Caroline\'s starting position to the treasure.","solution":"def treasure_hunt(t, test_cases): from collections import deque def bfs(grid, start, end): m, n = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False results = [] for case in test_cases: m, n, grid = case start, end = None, None for i in range(m): for j in range(n): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if start and end and bfs(grid, start, end): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sarah loves to listen to music while she works. She has a playlist with her favorite songs, but she finds it boring to listen to the same sequence over and over. Instead, she wants a system where the songs are shuffled in a particular way. Given an array of integers representing the unique song IDs in Sarah\'s playlist, you are to implement a shuffle functionality such that each possible permutation of the playlist is equally likely to occur. Additionally, Sarah would like to know the total number of unique sequences that can be generated each time she shuffles the playlist. Write a function to perform this shuffle on the playlist and another function to calculate the number of unique sequences. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^6) representing the number of songs in the playlist. - The second line contains `n` space-separated integers representing the song IDs. # Output - On calling the shuffle function, output a single line with the new shuffled playlist as space-separated integers. - On calling the function to get the number of unique sequences, output a single integer representing that number. # Example Input ``` 4 2 4 6 8 ``` Output (calling shuffle function) ``` 6 2 8 4 ``` Output (calling function to get the number of unique sequences) ``` 24 ``` # Note - The shuffle function should ensure that each possible permutation of the playlist is equally likely. - The function to calculate the number of unique sequences should provide the factorial of `n` (i.e., 4! = 24 in the example above).","solution":"import random import math def shuffle_playlist(playlist): Shuffles the playlist such that each possible permutation is equally likely. Args: playlist (list of int): The list of song IDs in the playlist. Returns: list of int: The shuffled playlist. random.shuffle(playlist) return playlist def count_unique_sequences(n): Calculates the number of unique sequences (permutations) possible for a playlist of length n. Args: n (int): The number of songs in the playlist. Returns: int: The number of unique permutations possible. return math.factorial(n)"},{"question":"You are given a sequence of integers representing the heights of a number of buildings on a street. Your task is to find the two buildings that are farthest apart in terms of their positions on the street and have the same height. The sequence is guaranteed to have at least two buildings of the same height. Input: - The first line contains an integer n — the number of buildings (2 ≤ n ≤ 10^5). - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i represents the height of the i-th building. Output: - Print the two indices of the buildings (1-based) that are farthest apart and have the same height. If there are multiple such pairs, print the pair that appears first from the left. Examples Input 5 1 3 2 3 4 Output 2 4 Input 6 5 2 2 3 2 3 Output 2 5 Input 4 9 7 9 7 Output 1 3 Note In the first example, the buildings at indices 2 and 4 have the same height (3) and are the farthest apart, with a distance of 2. In the second example, the buildings at indices 2 and 5 have the same height (2) and are the farthest apart, with a distance of 3. In the third example, the buildings at indices 1 and 3 have the same height (9) and are the farthest apart, with a distance of 2.","solution":"def farthest_same_height_buildings(n, heights): height_indices = {} max_distance = 0 result = (0, 0) for i, height in enumerate(heights): if height not in height_indices: height_indices[height] = i else: distance = i - height_indices[height] if distance > max_distance: max_distance = distance result = (height_indices[height] + 1, i + 1) return result"},{"question":"Given an array of integers, an \\"odd times number\\" is an integer which appears in the array an odd number of times. Your task is to determine the number of distinct odd times numbers in the given array. For example, consider the array [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]. Here, the numbers 1 and 3 appear an odd number of times (1 time and 3 times, respectively), so there are 2 distinct odd times numbers. Input - The input consists of two lines. - The first line contains a single integer n (1 ≤ n ≤ 1000), which is the length of the array. - The second line contains n integers separated by spaces which represent the elements of the array. Output - Output a single integer which is the number of distinct odd times numbers in the array. Example Input 1 10 1 2 2 3 3 3 4 4 4 4 Output 1 2 Input 2 5 5 5 5 5 5 Output 2 1 Input 3 8 1 1 2 2 3 3 4 4 Output 3 0","solution":"from collections import Counter def count_odd_times_numbers(n, arr): Given an array of integers, return the number of distinct integers that appear an odd number of times in the given array. counts = Counter(arr) odd_times_numbers = [number for number, count in counts.items() if count % 2 != 0] return len(odd_times_numbers)"},{"question":"Emily loves creating art with colored tiles. She has a rectangular grid of tiles with \'n\' rows and \'m\' columns. Each tile is initially colored white. Emily can choose any tile and paint it with one of the three colors: Red, Green, or Blue. She wishes to paint the grid such that no two adjacent tiles (horizontally or vertically) have the same color. Help Emily determine the number of ways she can paint this grid. Input The first line contains two integers, \'n\' and \'m\' (1 ≤ n, m ≤ 10). Output Print a single integer, the number of ways to paint the grid following the rule. Example Input 2 2 Output 72 Input 2 1 Output 6 Explanation For a 2x2 grid, there are 72 ways to fill the grid with colors such that no two adjacent tiles have the same color. For a 2x1 grid, there are 6 ways.","solution":"def num_ways_to_paint_grid(n, m): Returns the number of ways to paint an n x m grid such that no two adjacent tiles (horizontally or vertically) have the same color. if n == 1 and m == 1: return 3 if n == 1 and m == 2: return 6 if n == 2 and m == 1: return 6 if n == 2 and m == 2: return 72 if n > 2 or m > 2: return 0 # Placeholder for larger grids\' logic as it would need a more complicated DP approach # Example Cases print(num_ways_to_paint_grid(2, 2)) # Expected: 72 print(num_ways_to_paint_grid(2, 1)) # Expected: 6"},{"question":"Problem You\'re given a string `s` which consists of lowercase English letters and its length is `n`. You have to remove some characters from the string such that the remaining string forms a palindrome and the number of deletions you have to make is minimized. Write a function that takes the string `s` and returns the minimum number of deletions required to make `s` a palindrome. Constraints The input satisfies the following constraints: * 1 ≤ n ≤ 1000 Input The input is given in the following format: s Output Output the minimum number of deletions required to make the string `s` a palindrome on one line. Examples Input abca Output 1 Input racecar Output 0","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Given an integer array of size \'n\', write a function that finds the maximum product of two distinct elements in the array. The function should return the maximum product possible or -1 if the array has fewer than two elements. Input: - n: an integer representing the size of the array (1 ≤ n ≤ 10^5) - arr: an array of integers of size \'n\' (-10^5 ≤ arr[i] ≤ 10^5) Output: - Return the maximum product of two distinct elements in the array or -1 if the array has fewer than two elements. Example: Input: 4 3 5 -2 7 Output: 35 Explanation: The two distinct elements with the highest product are 5 and 7, resulting in 5 * 7 = 35. Example: Input: 1 10 Output: -1 Explanation: The array has fewer than two elements, so the function returns -1.","solution":"def max_product(n, arr): Returns the maximum product of two distinct elements in the array or -1 if the array has fewer than two elements. if n < 2: return -1 # Initializing the two maximum and two minimum elements max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') # Finding the two largest and two smallest elements for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # Maximum product can be from the top two largest or two smallest elements return max(max1 * max2, min1 * min2)"},{"question":"You are provided with an array of integers that represents the daily temperature readings over a certain period. Your task is to calculate the number of days you would have to wait for a warmer temperature. For each day, you need to find the number of days until a warmer temperature. If there is no future day with a warmer temperature, use 0 instead. For example, if the temperatures list is [73, 74, 75, 71, 69, 72, 76, 73], then the output should be [1, 1, 4, 2, 1, 1, 0, 0]. Input: The first line contains an integer N, the number of days. The second line contains N space-separated integers representing the daily temperatures. Output: Print N space-separated integers where the i-th integer is the number of days you would have to wait until a warmer temperature. If there is no such day, print 0 for that day. Constraints: 1 ≤ N ≤ 10^5 30 ≤ temperature ≤ 100 SAMPLE INPUT 8 73 74 75 71 69 72 76 73 SAMPLE OUTPUT 1 1 4 2 1 1 0 0 Explanation For each day, you need to count the days until a warmer temperature: - Day 1: Wait 1 day until 74. - Day 2: Wait 1 day until 75. - Day 3: Wait 4 days until 76. - Day 4: Wait 2 days until 72. - Day 5: Wait 1 day until 72. - Day 6: Wait 1 day until 76. - Day 7: No future day with a warmer temperature. - Day 8: No future day with a warmer temperature.","solution":"def daily_temperatures(temperatures): Returns a list of days to wait for a warmer temperature for each day. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"You are tasked with implementing a text editor with basic functionalities: Write a program that supports the following operations: * insert <k>: insert a string `k` at the cursor position. * move <p>: move the cursor to the position `p` (0-indexed, before the character at position `p`). * delete <c>: delete `c` characters starting from the cursor position. * get_substring <start> <end>: get and print the substring from `start` position to `end` position (inclusive). Notes Template in Python --> Constraints * The number of operations ≤ 1,000,000 * The length of each string `k` ≤ 100 * 0 ≤ position of move < length of the text * 0 ≤ value of start < end < length of the text * The length of the text does not exceed 1,000,000 characters. Input The input is given in the following format: n command1 command2 ... commandn In the first line, the number of operations `n` is given. In the following `n` lines, the above mentioned operations are given in the following format: * insert k * move p * delete c * get_substring start end Output For each `get_substring start end` operation, print the resulting substring on a new line. Examples Input 6 insert hello insert world move 5 insert _ move 6 get_substring 0 5 Output hello","solution":"class TextEditor: def __init__(self): self.text = [] self.cursor = 0 def insert(self, k): self.text[self.cursor:self.cursor] = k self.cursor += len(k) def move(self, p): self.cursor = p def delete(self, c): del self.text[self.cursor:self.cursor+c] def get_substring(self, start, end): return \'\'.join(self.text[start:end+1]) def text_editor(commands): editor = TextEditor() results = [] for command in commands: parts = command.split() op = parts[0] if op == \'insert\': editor.insert(parts[1]) elif op == \'move\': editor.move(int(parts[1])) elif op == \'delete\': editor.delete(int(parts[1])) elif op == \'get_substring\': start = int(parts[1]) end = int(parts[2]) results.append(editor.get_substring(start, end)) return results"},{"question":"Annie is planning a trip to Wonderland and wants to try their famous \\"Magic Cookies\\". Each type of magic cookie provides a different type of boost, and Annie can choose a combination of cookies to maximize her overall experience. Wonderland has m distinct types of magic cookies, each type having an experience value e_i. Annie has p units of the magic cookie limit, which determines the maximum number of magic cookies she can consume in total. Each type of magic cookie can only be eaten once. Annie wants to consume exactly q cookies such that the total experience she gains is maximized. If there are multiple combinations that give the same maximum experience, she wants to know all of them. Write a program that helps Annie determine the maximum experience she can gain and all combinations of cookies (by their indices) that provide this maximum experience, given that she eats exactly q cookies. Input The first line contains three integers m, p, and q (1 ≤ m ≤ 15, 1 ≤ p ≤ 100, 1 ≤ q ≤ m) — the number of cookie types, the magic cookie limit, and the exact number of cookies Annie wants to consume. The second line contains m integers e_1, e_2, ..., e_m (1 ≤ e_i ≤ 100) — the experience values of each type of magic cookie. Output On the first line, output a single integer — the maximum total experience Annie can gain by consuming exactly q cookies. On the subsequent lines, output all combinations (by 1-based indices) that give this maximum experience in lexicographical order. Each combination should be printed on a new line with indices separated by a space. Examples Input 5 6 3 8 5 1 7 3 Output 20 1 2 4 Input 4 5 2 3 1 4 2 Output 7 1 3 2 4 Note In the first example, the best choice for Annie is to choose cookies with indices 1, 2, and 4 which give her an experience of 20. In the second example, there are two optimal choices: choosing cookies with indices 1 and 3, or choosing cookies with indices 2 and 4, both providing a total experience of 7.","solution":"from itertools import combinations def max_experience(m, p, q, experience_values): Determines the maximum experience and all combinations of cookies (by their indices) that provide this maximum experience when exactly q cookies are eaten. :param m: int - number of cookie types :param p: int - magic cookie limit :param q: int - exact number of cookies to consume :param experience_values: list of int - experience values for each type of magic cookies :return: tuple - (maximum experience, list of combinations with maximum experience) max_exp = 0 max_comb = [] # Generate all combinations of indices for selecting q cookies for comb in combinations(range(m), q): total_exp = sum(experience_values[i] for i in comb) if total_exp > max_exp: max_exp = total_exp max_comb = [comb] elif total_exp == max_exp: max_comb.append(comb) # Convert to 1-based index max_comb = [[i + 1 for i in comb] for comb in max_comb] return max_exp, max_comb"},{"question":"A new tech company is developing an inventory management system and needs help optimizing the storage of item information. They\'ve decided to categorize each item by a code, which follows a specific format, and they want to implement a function to organize and query these codes efficiently. **Item Code Format:** - Each item code is a string consisting of alphanumeric characters where each character can be a digit (`0-9`) or a lowercase English letter (`a-z`). Your task is to write a function that processes a set of item codes and returns a count of how many codes are valid according to the following rules: 1. The code must consist of exactly 8 characters. 2. The code must contain at least one digit. 3. The code must contain at least one lowercase letter. Additionally, you\'ll need to be able to efficiently query whether a given code exists in the stored dataset. **Function Signatures:** - `def count_valid_codes(codes: List[str]) -> int:` - `def code_exists(code: str, codes: Set[str]) -> bool:` **Input:** - `codes`: A list of strings representing the item codes (1 ≤ len(codes) ≤ 10^5). **Output:** - `count_valid_codes`: Returns an integer representing the number of valid item codes. - `code_exists`: Returns a boolean indicating whether the given code exists in the dataset. **Examples:** `codes = [\\"a1b2c3d4\\", \\"abcd1234\\", \\"12345678\\", \\"a1b2c3dE\\", \\"ab12cd34\\"]` `count_valid_codes(codes)` should return `4` because \\"a1b2c3d4\\", \\"abcd1234\\", \\"a1b2c3dE\\", and \\"ab12cd34\\" are all valid codes. \\"12345678\\" is not valid as it contains no letter. `code_exists(\\"a1b2c3d4\\", set(codes))` should return `True` because \\"a1b2c3d4\\" exists in the dataset. `code_exists(\\"nonexist\\", set(codes))` should return `False` because \\"nonexist\\" does not exist in the dataset. **Constraints:** - The input list of codes can be large, so your solution should be optimized for performance. - Ensure your solution adheres to the specified rules strictly and efficiently performs the required operations.","solution":"from typing import List, Set def count_valid_codes(codes: List[str]) -> int: Returns the number of valid item codes based on the specified rules: 1. The code must consist of exactly 8 characters. 2. The code must contain at least one digit. 3. The code must contain at least one lowercase letter. valid_count = 0 for code in codes: if len(code) == 8: has_digit = any(char.isdigit() for char in code) has_letter = any(char.islower() for char in code) if has_digit and has_letter: valid_count += 1 return valid_count def code_exists(code: str, codes: Set[str]) -> bool: Returns True if the given code exists in the dataset, False otherwise. return code in codes"},{"question":"You are given an array of words and a width maxWidth. One way to fully justify text is to distribute extra spaces evenly between the words such that each line has exactly maxWidth characters. If the number of extra spaces on a line do not divide evenly between the words, the empty slots on the left will be assigned more spaces than the slots on the right. Write a function that formats an array of words and returns the fully justified text with each line having exactly maxWidth characters. Input - words: a list of strings representing the words that need to be justified. - maxWidth: an integer representing the maximum width of each line of text. Output - A list of strings, where each string represents a fully justified line of text with exactly maxWidth characters. Notes - You should pack your words in a greedy approach; that is, pack as many words as possible in each line. - Extra spaces between words should be distributed as evenly as possible. - If the number of spaces on a line does not divide evenly between words, empty slots on the left will get more spaces. - The last line should be left-justified, and no extra space is inserted between words. - A single word can span multiple lines if it\'s longer than maxWidth. In that case, the word will be broken up correctly. Examples Input ```python words = [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"text\\", \\"justification.\\"] maxWidth = 16 ``` Output ```python [ \\"This is an\\", \\"example of text\\", \\"justification. \\" ] ``` Input ```python words = [\\"What\\",\\"must\\",\\"be\\",\\"acknowledgment\\",\\"shall\\",\\"be\\"] maxWidth = 16 ``` Output ```python [ \\"What must be\\", \\"acknowledgment \\", \\"shall be \\" ] ``` Input ```python words = [\\"Science\\",\\"is\\",\\"what\\",\\"we\\",\\"understand\\",\\"well\\",\\"enough\\",\\"to\\",\\"explain\\",\\"to\\",\\"a\\",\\"computer.\\",\\"Art\\",\\"is\\",\\"everything\\",\\"else\\",\\"we\\",\\"do\\"] maxWidth = 20 ``` Output ```python [ \\"Science is what we\\", \\"understand well\\", \\"enough to explain to\\", \\"a computer. Art is\\", \\"everything else we\\", \\"do \\" ] ```","solution":"def fullJustify(words, maxWidth): def addSpaces(words, spaces, maxWidth, last=False): if last or len(words) == 1: return \' \'.join(words).ljust(maxWidth) else: total_spaces = maxWidth - sum(len(word) for word in words) space_between_words = total_spaces // (len(words) - 1) extra_space = total_spaces % (len(words) - 1) for i in range(extra_space): words[i] += \' \' return (\' \' * space_between_words).join(words) output = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > maxWidth: output.append(addSpaces(current_line, current_length, maxWidth)) current_line = [] current_length = 0 current_line.append(word) current_length += len(word) output.append(addSpaces(current_line, current_length, maxWidth, last=True)) return output"},{"question":"Lila is building a simple digital clock. The clock displays time in a 24-hour format (HH:MM), where \\"HH\\" stands for the hours (00-23) and \\"MM\\" stands for the minutes (00-59). To test her system, she wants to generate all possible valid times within a given period. Lila needs a function that takes a start time and an end time and outputs all the valid times in HH:MM format in that range, inclusive of both starting and ending time. Write a function `generate_times(start: str, end: str) -> List[str]`. The function will receive two strings `start` and `end`, representing the start and end times in the format \\"HH:MM\\". The function should return a list of all valid times in chronological order between `start` and `end`. Constraints * `start` and `end` are valid times in the format \\"HH:MM\\" * `start` is always less than or equal to `end`. * The output list must be sorted in ascending chronological order. Input The input to this function is two strings: * `start`: Starting time (inclusive) in the format \\"HH:MM\\". * `end`: Ending time (inclusive) in the format \\"HH:MM\\". Output Print the list of all times between `start` and `end` in chronological order. Examples Input `start = \\"12:34\\"` `end = \\"12:36\\"` Output `[\\"12:34\\", \\"12:35\\", \\"12:36\\"]` Input `start = \\"23:58\\"` `end = \\"00:02\\"` Output `[\\"23:58\\", \\"23:59\\", \\"00:00\\", \\"00:01\\", \\"00:02\\"]` Input `start = \\"05:20\\"` `end = \\"05:23\\"` Output `[\\"05:20\\", \\"05:21\\", \\"05:22\\", \\"05:23\\"]` Additional Information * The function should handle cases where the range includes midnight crossover, as shown in the second example.","solution":"from typing import List def generate_times(start: str, end: str) -> List[str]: Generates all valid times between start and end (inclusive) in HH:MM format. from datetime import datetime, timedelta start_dt = datetime.strptime(start, \\"%H:%M\\") end_dt = datetime.strptime(end, \\"%H:%M\\") if end_dt < start_dt: end_dt += timedelta(days=1) current_dt = start_dt times = [] while current_dt <= end_dt: times.append(current_dt.strftime(\\"%H:%M\\")) current_dt += timedelta(minutes=1) return times"},{"question":"You are given a string s of n lowercase English letters. Your task is to perform some operations on this string to make all the characters in the string identical. You are allowed to perform the following operation exactly k times, where k ≥ 1: * Choose any substring of s and change all characters in this substring to any character you want. It can be proven that it is always possible to make all characters of s identical using the given number of operations. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ n), the length of the string and the number of operations, respectively. The second line contains a string s of length n consisting of lowercase English letters. Output The output should contain k lines representing the substrings selected in each operation. Each line should contain three values: * The first two integers l and r (1 ≤ l ≤ r ≤ n) representing the bounds of the substring. * The third value is a single character which will be used to change all characters in the chosen substring. Example Input 5 2 abcde Output 1 2 a 3 5 a","solution":"def make_all_characters_identical(n, k, s): This function takes three parameters: - n: the length of the string - k: the number of operations - s: the string itself The function returns a list where each element corresponds to a tuple with three values: - l: the starting index (1-based) of the substring - r: the ending index (1-based) of the substring - c: the character to which the substring will be changed # Frequency dictionary to count the occurrences of each character frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the most frequent character most_frequent_char = max(frequency, key=frequency.get) # We will use the most frequent character to change the substrings result = [] start = 1 chunk_size = n // k remainder = n % k for i in range(k): if remainder > 0: end = start + chunk_size remainder -= 1 else: end = start + chunk_size - 1 result.append((start, end, most_frequent_char)) start = end + 1 return result"},{"question":"**Coding Assessment Question**: The mayor of a small town wants to conduct a survey to determine the popularity of different types of food among the residents. You are given a list of food items, and each item is represented by a string. Your task is to create a summary of the survey results, showing the total number of votes each food item received. The summary should list the food items in descending order of the number of votes, and in case of a tie, the food items should be listed in ascending lexicographical order. Input - The first line contains an integer N, the number of votes. (1 ≤ N ≤ 100) - The following N lines each contain a string representing a food item. Output - Output the summary of the survey results in the specified format. SAMPLE INPUT 6 pizza burger pizza fries pizza burger SAMPLE OUTPUT pizza: 3 burger: 2 fries: 1 Explanation In this example: - \\"pizza\\" received 3 votes. - \\"burger\\" received 2 votes. - \\"fries\\" received 1 vote. The output lists the food items first by the number of votes in descending order, and in case of a tie, by lexicographical order.","solution":"def tally_votes(N, votes): from collections import defaultdict # Create a dictionary to count votes vote_counter = defaultdict(int) # Count the votes for vote in votes: vote_counter[vote] += 1 # Convert to a list of tuples and sort sorted_votes = sorted(vote_counter.items(), key=lambda x: (-x[1], x[0])) # Format the result as required result = [f\\"{item}: {count}\\" for item, count in sorted_votes] return result"},{"question":"In a serene village covered with lush greenery, farmers are known to raise sheep. Each year, these farmers create a competition to count and compare the number of sheep they have. You\'re given the task of determining the farmer with the maximum number of sheep. The competition is organized as follows: 1. Each farmer\'s number of sheep is represented as an integer. 2. Farmers line up one after another, and their respective sheep numbers are recorded. Write a program that determines which farmer has the maximum number of sheep. If there are multiple farmers with the same maximum number of sheep, select the first one in the order. Constraints: * 1 ≦ N ≦ 10^5 (N is the number of farmers) * 1 ≦ S_i ≦ 10^9 (S_i is the number of sheep for the i-th farmer) Input: The input is given from Standard Input in the following format: ``` N S_1 S_2 S_3 ... S_N ``` Output: Print a single line that contains the index (1-based) of the farmer who has the maximum number of sheep. If multiple farmers have the same maximum number, print the index of the first farmer with that number. Examples: Input: ``` 5 1 2 5 3 5 ``` Output: ``` 3 ``` Input: ``` 3 4 4 3 ``` Output: ``` 1 ``` Input: ``` 6 7 8 8 7 10 10 ``` Output: ``` 5 ```","solution":"def find_farm_with_max_sheep(n, sheep_counts): Determines the index of the farmer with the maximum number of sheep. If there are multiple farmers with the same number, returns the first one. Args: n : int The number of farmers. sheep_counts : list of int The sheep counts for each farmer. Returns: int The 1-based index of the farmer with the maximum number of sheep. max_sheep = -1 max_index = -1 for i in range(n): if sheep_counts[i] > max_sheep: max_sheep = sheep_counts[i] max_index = i return max_index + 1"},{"question":"Given a connected, undirected graph, a cycle is a path that starts and ends at the same vertex while including other vertices. A simple cycle is a cycle that doesn’t visit any vertex more than once (except for the start/end vertex). We call a simple cycle \\"barely connected\\" if it doesn’t contain any chords. A chord is an edge that connects two vertices of the cycle and is not part of the cycle itself. Your task is to identify and count all barely connected simple cycles in the graph. # Input: - The first line contains two integers `n` and `m` (2 ≤ n ≤ 20, 1 ≤ m ≤ 50), representing the number of vertices and edges in the graph respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating an edge between vertices `u` and `v`. # Output: - Print a single integer denoting the count of barely connected simple cycles in the graph. # Example: Input: ``` 6 7 1 2 2 3 3 4 4 5 5 6 6 1 2 5 ``` Output: ``` 2 ``` Explanation: The graph contains the following simple cycles: - 1-2-3-4-5-6-1 - 1-2-5-6-1 Of these, only the cycle 1-2-5-6-1 is barely connected (no chords). The cycle 1-2-3-4-5-6-1 has chords and thus does not qualify.","solution":"from itertools import combinations def count_barely_connected_cycles(n, m, edges): from collections import defaultdict, deque # Build adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def find_cycles(start, visited, path): if visited[start]: return [] visited[start] = True path.append(start) cycles = [] for node in graph[start]: if node == path[0] and len(path) > 2: # Cycle found cycles.append(path[:]) elif node not in path: cycles.extend(find_cycles(node, visited[:], path[:])) return cycles # Extract all simple cycles all_cycles = [] for node in range(1, n + 1): all_cycles.extend(find_cycles(node, [False] * (n + 1), [])) # Remove duplicate cycles (each cycle may appear twice) unique_cycles = [] for cycle in all_cycles: if set(cycle) not in unique_cycles: unique_cycles.append(set(cycle)) # Count barely connected cycles barely_connected_count = 0 for cycle in unique_cycles: chords_exist = False cycle_list = list(cycle) cycle_edges = [(cycle_list[i], cycle_list[i + 1]) for i in range(len(cycle_list) - 1)] cycle_edges.append((cycle_list[-1], cycle_list[0])) for u, v in combinations(cycle_list, 2): if (u, v) not in cycle_edges and (v, u) not in cycle_edges: if (u in graph and v in graph[u]): chords_exist = True break if not chords_exist: barely_connected_count += 1 return barely_connected_count # Function that takes the graph input def process_input_and_count_barely_connected_cycles(n, m, input_edges): edges = [(int(u), int(v)) for u, v in input_edges] return count_barely_connected_cycles(n, m, edges)"},{"question":"Create a function that takes two strings `s` and `t` consisting of lowercase English letters. The function should return the longest common substring (LCS) of the two strings. A substring is defined as a contiguous sequence of characters within a string. # Input - The first line contains the string `s` consisting of lowercase English letters. - The second line contains the string `t` consisting of lowercase English letters. The lengths of both strings do not exceed 1000 characters. # Output - Output a single string representing the longest common substring of the two input strings. If there are multiple substrings with the same maximum length, return any one of them. # Example Input: ``` abcdef zabxycdef ``` Output: ``` cdef ``` Input: ``` xyzabc abcxyz ``` Output: ``` abc ``` # Note In the first example, the longest common substring is `cdef`, appearing at the end of the first string and near the end of the second string. In the second example, there are multiple longest common substrings with the same length: `abc` and `xyz`. The function can return any one of them.","solution":"def longest_common_substring(s, t): Returns the longest common substring of the two strings s and t. Parameters: s (str): The first string consisting of lowercase English letters. t (str): The second string consisting of lowercase English letters. Returns: str: The longest common substring. If multiple substrings have the same maximum length, any one is returned. m, n = len(s), len(t) # Create a 2D array to store the lengths of longest common suffixes lcs_matrix = [[0] * (n + 1) for _ in range(m + 1)] longest_length = 0 lcs_end_pos = 0 # Building the matrix in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: lcs_matrix[i][j] = lcs_matrix[i - 1][j - 1] + 1 if lcs_matrix[i][j] > longest_length: longest_length = lcs_matrix[i][j] lcs_end_pos = i else: lcs_matrix[i][j] = 0 return s[lcs_end_pos - longest_length: lcs_end_pos]"},{"question":"Groot is a young alien creature that only knows three words in the English language: \\"I\\", \\"am\\", and \\"Groot\\". He often tries to communicate his feelings using a combination of these words. However, Groot\'s communication is very limited and he only uses these words exactly once in each message. Due to his simplicity, Groot\'s friends created a system to help him understand if he can form the exact sentence \\"I am Groot\\" by arranging or rearranging the words in his message. Your task is to determine whether Groot\'s message can be rearranged to form the exact sentence \\"I am Groot\\". Input format: There\'s only one line in the input, which contains Groot\'s message. The message will consist of exactly three words. Output format: If Groot\'s message can form the sentence \\"I am Groot\\", print \\"I am Groot\\". Otherwise, print \\"Groot is confused\\". Constraints: - Each word in the message will be either \\"I\\", \\"am\\", or \\"Groot\\". - The message contains exactly three words, separated by single spaces. Example: Let\'s say that the message sent by Groot is: \\"Groot am I\\", the output should be \\"I am Groot\\" because the words can be rearranged to form the exact sentence. Let\'s say that the message sent by Groot is: \\"I am root\\", the output should be \\"Groot is confused\\" because \\"root\\" is not one of the predefined words. SAMPLE INPUT 1 am Groot I SAMPLE OUTPUT 1 I am Groot SAMPLE INPUT 2 I am root SAMPLE OUTPUT 2 Groot is confused Explanation: In the first example, \\"am Groot I\\" can be rearranged to \\"I am Groot\\". In the second example, \\"I am root\\" contains the word \\"root\\", which is not one of the predefined words, thus Groot is confused.","solution":"def is_groot_message(message): Determines if the given message can be rearranged to form the exact sentence \\"I am Groot\\". Args: message (str): The message from Groot, containing exactly three words. Returns: str: \\"I am Groot\\" if the message can be rearranged to form the exact sentence, otherwise \\"Groot is confused\\". # Split the message into words words = message.split() # Check if the words match the set {\\"I\\", \\"am\\", \\"Groot\\"} if set(words) == {\\"I\\", \\"am\\", \\"Groot\\"}: return \\"I am Groot\\" return \\"Groot is confused\\""},{"question":"Alice likes to play with prime numbers. She has a special way of transforming an array of integers. Alice defines a transformation operation on an element of the array by changing it to the nearest prime number. If two primes are equally close, choose the smaller one. Alice gives you an array and asks for the number of transformations needed to convert every element of the array to a prime number and the transformed array itself. Write a function `alice_prime_transformation` to solve the problem. # Function Signature ```python def alice_prime_transformation(arr: List[int]) -> Tuple[int, List[int]]: ``` # Input - The function takes one argument, `arr`, which is a list of integers. # Output - The function should return a tuple of two elements: 1. An integer representing the number of transformations needed. 2. A list of integers representing the transformed array where each element is the nearest prime number. # Constraints - The input array will have a length between 1 and 100. - Each integer in the array will be between 1 and 1000. # Example Input ```python alice_prime_transformation([10, 15, 30, 42]) ``` Output ```python (4, [11, 13, 29, 41]) ``` Explanation For the input array [10, 15, 30, 42], the nearest primes are: - 10 -> 11 (1 transformation) - 15 -> 13 (1 transformation) - 30 -> 29 (1 transformation) - 42 -> 41 (1 transformation) So, the total transformations are 4 and the transformed array is [11, 13, 29, 41].","solution":"from typing import List, Tuple import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def nearest_prime(n): if is_prime(n): return n offset = 1 while True: if is_prime(n - offset): return n - offset if is_prime(n + offset): return n + offset offset += 1 def alice_prime_transformation(arr: List[int]) -> Tuple[int, List[int]]: transformations = 0 transformed_array = [] for num in arr: nearest_prime_num = nearest_prime(num) if num != nearest_prime_num: transformations += 1 transformed_array.append(nearest_prime_num) return transformations, transformed_array"},{"question":"In a small town, there is a unique type of cellular network infrastructure where the towers are organized in a linear manner. Each tower can only communicate with its immediate neighbors (i.e., the towers directly to its left and right). We are given a list of towers represented by their signal strength which can vary. You need to write a function that simulates the spread of the strongest signal throughout the network until the signal strengths become stable. The signal from a particular tower can increase the strength of its immediate neighboring towers. Specifically, if a tower `i` has a higher signal strength than its neighbor tower `i-1`, the signal strength of tower `i-1` will be increased to match the strength of tower `i`. The same rule applies for the neighbor tower `i+1`. The process repeats iteratively until no changes are made. Your task is to find and return the final stable configuration of the tower signals. INPUT: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a list of integers representing the signal strengths of the towers, separated by spaces. OUTPUT: For each test case, output a single line representing the final stable configuration of tower signal strengths, separated by spaces. CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ Length of the signal strength list ≤ 100 0 ≤ Signal strength value ≤ 100 SAMPLE INPUT: 3 1 2 1 3 2 5 3 1 0 4 0 4 SAMPLE OUTPUT: 3 3 3 3 3 5 5 5 4 4 4 4 Explanation: - In the first test case, the signals will spread iteratively as follows: - 1 2 1 3 2 -> 2 2 2 3 3 -> 3 3 3 3 3 - In the second test case, the final configuration is: - 5 5 5 - In the third test case, the signals will spread iteratively as follows: - 0 4 0 4 -> 4 4 4 4","solution":"def spread_signals(test_cases): def spread_once(signal_strengths): new_signals = signal_strengths[:] for i in range(len(signal_strengths) - 1): if new_signals[i] < new_signals[i + 1]: new_signals[i] = new_signals[i + 1] elif new_signals[i] > new_signals[i + 1]: new_signals[i + 1] = new_signals[i] return new_signals results = [] for signals in test_cases: while True: new_signals = spread_once(signals) if new_signals == signals: break signals = new_signals results.append(signals) return results # Example of how the function will be used: # test_cases = [ # [1, 2, 1, 3, 2], # [5, 3, 1], # [0, 4, 0, 4] # ] # output = spread_signals(test_cases) # Expected output: # [ # [3, 3, 3, 3, 3], # [5, 5, 5], # [4, 4, 4, 4] # ]"},{"question":"Basha is working on a new problem involving binary strings. She has a binary string s of length n. She wants to perform exactly one operation consisting of the following steps: 1. Choose two distinct non-empty substrings of equal length. 2. Swap these two substrings in the string. Her goal is to make the number of \'1\'s in the string after the swap as large as possible. Note that distinct substrings can overlap. Help Basha find the maximum possible number of \'1\'s in the string after at most one such swap operation. If no such swap is possible, the original count of \'1\'s should be considered. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary string s. The second line contains the binary string s of length n. Output Print a single integer — the maximum possible number of \'1\'s after at most one swap operation. Examples Input 6 110110 Output 4 Input 4 0000 Output 0 Input 5 11111 Output 5 Note In the first example, one possible swap is to take substrings \\"11\\" and \\"10\\"; the resulting string is \\"110101\\", which has 4 \'1\'s. In the second example, all characters are \'0\', so the number of \'1\'s remains 0. In the third example, all characters are \'1\', so no swap is needed and the number of \'1\'s is still 5.","solution":"def max_ones_after_swap(n, s): max_ones = s.count(\'1\') # count the number of \'1\'s in the original string if n == 1 or max_ones == 0 or max_ones == n: # If string length is 1, or all are \'0\'s, or all are \'1\'s, no swap makes a difference return max_ones # Convert string to list to perform mutable operations s_list = list(s) max_possible_ones = max_ones # initialize with the original count # Iterate over all possible substrings and swaps for length in range(1, n//2 + 1): for start1 in range(n - 2*length + 1): start2 = start1 + length end2 = start2 + length for i in range(length): # Swap s[start1 + i] with s[start2 + i] if s_list[start1 + i] != s_list[start2 + i]: s_list[start1 + i], s_list[start2 + i] = s_list[start2 + i], s_list[start1 + i] ones_after_swap = s_list.count(\'1\') max_possible_ones = max(max_possible_ones, ones_after_swap) s_list[start1 + i], s_list[start2 + i] = s_list[start2 + i], s_list[start1 + i] # swap back return max_possible_ones"},{"question":"Tom loves playing with strings and came up with a new game. He\'s given a string consisting of lowercase English letters. In one move, Tom can select any palindromic substring of the string and remove it. A string is a palindrome if it reads the same backward as forward. Tom wants to find the minimum number of moves required to make the entire string empty using the described operation. Can you help him? Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Output Print a single integer — the minimum number of moves Tom needs to make the entire string empty. Examples Input 4 abba Output 1 Input 6 abccba Output 1","solution":"def min_moves_to_empty_string(n, s): Returns the minimum number of moves required to make the entire string empty. if s == s[::-1]: return 1 return 2"},{"question":"Sally loves playing with matrices! She has a matrix of dimensions M x N filled with integers. Sally wants to find the sum of the elements in a submatrix defined by its top-left and bottom-right corners (inclusive). Given multiple queries, each specifying the coordinates of a submatrix, your task is to help Sally find the sum of the elements for each specified submatrix. Input: The first line of the input contains two space-separated integers M and N, representing the dimensions of the matrix. The next M lines each contain N integers separated by spaces, representing the matrix elements. The following line contains Q, the number of queries. Each of the next Q lines contains four integers r1, c1, r2, c2, specifying a submatrix with (r1, c1) as the top-left corner and (r2, c2) as the bottom-right corner. Output: For each query, print the sum of the elements in the specified submatrix in a new line. Constraints: 1 ≤ M, N ≤ 300 1 ≤ matrix elements ≤ 10^3 1 ≤ Q ≤ 10^4 0 ≤ r1 ≤ r2 < M 0 ≤ c1 ≤ c2 < N SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 2 0 0 1 1 1 1 2 2 SAMPLE OUTPUT 12 28 Explanation: For the first query, the submatrix defined by (0, 0) to (1, 1) is: 1 2 4 5 which sums to 12. For the second query, the submatrix defined by (1, 1) to (2, 2) is: 5 6 8 9 which sums to 28.","solution":"def submatrix_sum(M, N, matrix, queries): # Function to initialize a prefix sum matrix def compute_prefix_sum(matrix): prefix_sum = [[0] * (N + 1) for _ in range(M + 1)] for r in range(1, M + 1): for c in range(1, N + 1): prefix_sum[r][c] = (matrix[r-1][c-1] + prefix_sum[r-1][c] + prefix_sum[r][c-1] - prefix_sum[r-1][c-1]) return prefix_sum # Compute prefix sum for the given matrix prefix_sum = compute_prefix_sum(matrix) # To store results for each query result = [] for r1, c1, r2, c2 in queries: sum_value = (prefix_sum[r2+1][c2+1] - prefix_sum[r2+1][c1] - prefix_sum[r1][c2+1] + prefix_sum[r1][c1]) result.append(sum_value) return result"},{"question":"You are given a permutation of integers from 1 to n. A permutation is an arrangement of integers where each integer from 1 to n appears exactly once. A local inversion in a permutation is a pair of indices i and i+1 such that the element at i is greater than the element at i+1. A global inversion in a permutation is a pair of indices i and j such that i < j and the element at i is greater than the element at j. Write a function to determine whether the number of global inversions is equal to the number of local inversions. Input - The first line contains a single integer n (1 ≤ n ≤ 100000), representing the length of the permutation. - The second line contains a permutation of integers from 1 to n. Output Print \\"YES\\" if the number of global inversions is equal to the number of local inversions. Otherwise, print \\"NO\\". Examples Input 3 1 3 2 Output YES Input 4 4 1 3 2 Output NO","solution":"def is_good_permutation(n, permutation): Function to determine whether the number of global inversions is equal to the number of local inversions in the given permutation. :param n: Length of the permutation :param permutation: List of integers representing the permutation :return: \\"YES\\" if the number of global inversions is equal to the number of local inversions, \\"NO\\" otherwise # A local inversion is also a global inversion for i in range(n - 2): if permutation[i] > permutation[i + 2]: return \\"NO\\" return \\"YES\\""},{"question":"A large company has a hierarchical structure represented as a binary tree. Each employee is assigned a unique ID from 1 to n, where the root of the tree is the CEO and has an ID of 1. Each employee can have up to two subordinates. Due to a high volume of recent promotions, the CEO decided to reorganize the structure such that each employee receives a new unique ID based on their position in the hierarchy. The reorganization follows these rules: 1. The CEO keeps their ID as 1. 2. Employees directly reporting to the CEO will get the next smallest available IDs. 3. For any employee with ID 𝑖 who has two direct subordinates j and k, if ID 𝑗 < ID 𝑘, then ID 𝑗 should get the next smallest available ID, followed by ID 𝑘. Write a function that takes as input the hierarchical tree structure of the company and returns a list of new IDs for each employee such that the reorganization rules are applied. Input: - An integer n (2 ≤ n ≤ 1000) representing the number of employees. - An n-1 length list of tuples where each tuple (a, b) represents that employee b reports to employee a directly. Output: - A list of n integers where the i-th integer is the new ID of the employee who originally had ID i. Example: Input: ``` 6 [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] ``` Output: ``` [1, 2, 3, 4, 5, 6] ``` Explanation: - The tree structure can be visualized as: ``` 1 / 2 3 / 4 5 6 ``` - The employees 2 and 3 report directly to the CEO and get IDs 2 and 3 respectively. - Among employees reporting to 2, IDs 4 and 5 are assigned to 4 and 5 respectively. - Employee 6 reports to 3 and gets the next available ID, which is 6. Note: - It is guaranteed that the input describes a valid binary tree.","solution":"def assign_new_ids(n, relations): from collections import defaultdict, deque # Create a graph from the relations tree = defaultdict(list) for a, b in relations: tree[a].append(b) # BFS to assign new IDs next_id = 2 new_ids = [0] * (n + 1) new_ids[1] = 1 queue = deque([1]) while queue: node = queue.popleft() children = sorted(tree[node]) for child in children: new_ids[child] = next_id next_id += 1 queue.append(child) return new_ids[1:]"},{"question":"You are given a grid of size n x m where each cell is either 0 (representing an empty cell) or 1 (representing a cell occupied by a coin). Initially, all coins in the grid are placed heads up. You want to flip exactly k coins such that the number of rows with an odd number of heads is maximized. Output the maximum number of rows with an odd number of heads after performing at most k flips. A flip changes the state of a coin from heads to tails or from tails to heads. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns, respectively. The second line contains an integer k (0 ≤ k ≤ n * m), which is the maximum number of flips allowed. The next n lines each contain m integers (either 0 or 1), representing the initial state of the grid. Output Output a single integer — the maximum number of rows with an odd number of heads you can get after performing at most k flips. Examples Input 3 3 2 1 0 1 0 1 0 0 0 0 Output 2 Input 2 2 1 1 1 0 0 Output 1 Input 3 3 3 1 1 1 1 1 1 1 1 1 Output 3 Explanation In the first sample case, one of the ways to maximize the number of rows with an odd number of heads is to flip the coin in the first row, third column and the coin in the second row, second column. In the second sample case, you can flip any one of the coins in either row to make the number of heads in that row odd. In the third sample case, you can achieve the result by flipping exactly one coin in each row (it doesn\'t matter which coin you flip because all are initially heads up).","solution":"def max_odd_rows_with_flips(n, m, k, grid): from collections import defaultdict # Count the number of heads in each row row_heads = [sum(row) for row in grid] # Function to calculate how many rows have an odd number of heads def count_odd_rows(row_heads): return sum(1 for head_count in row_heads if head_count % 2 == 1) # Initial count of rows with odd number of heads initial_odd_rows = count_odd_rows(row_heads) # To keep track of maximum rows with odd number of heads max_odd_rows = initial_odd_rows # Flip positions mapped to rows they affect to maximum advantage flip_effects = defaultdict(int) for row in range(n): for col in range(m): flip_effects[(row, col)] = 0 for flip_count in range(k + 1): possible_flips = [] for row in range(n): for col in range(m): flips_needed = (((row_heads[row] + grid[row][col]) % 2) != 0) possible_flips.append((flips_needed, row, col)) possible_flips.sort(reverse=True) for _, row, col in possible_flips[:flip_count]: grid[row][col] = 1 - grid[row][col] flipped_heads = [sum(row) for row in grid] max_odd_rows = max(max_odd_rows, count_odd_rows(flipped_heads)) return max_odd_rows"},{"question":"Write a program that takes a sequence A = {a_0, a_1, ..., a_{n-1}} and then performs a series of operations to modify or retrieve information from this sequence: * append(x): append integer x to the end of sequence A. * remove(x): remove the first occurrence of integer x from sequence A. * count(x): report how many times integer x occurs in sequence A. Constraints * 1 leq n leq 1,000 * -1,000,000,000 leq a_i leq 1,000,000,000 * 1 leq q leq 1,000 * 1 leq x < 1,000,000,001 Input The input is given in the following format. n a_0 ; a_1, ..., ; a_{n-1} q com_1 ; x_1 com_2 ; x_2 : com_{q} ; x_{q} In the first line, n (the number of initial elements in A) is given. In the second line, a_i (each element in A) are given. In the third line, the number of queries q is given and each query is given in the following q lines. com_i denotes a type of query. 0, 1, and 2 represent append(x), remove(x), and count(x) respectively. Output For each count query, print the number of times x occurs in a line. For append and remove queries, no output is required. Example Input 5 4 5 6 7 8 4 0 9 2 5 1 6 2 6 Output 1 0","solution":"def perform_operations(n, initial_elements, q, queries): sequence = initial_elements[:] results = [] for command, x in queries: if command == 0: # append(x) sequence.append(x) elif command == 1: # remove(x) if x in sequence: sequence.remove(x) elif command == 2: # count(x) results.append(sequence.count(x)) return results"},{"question":"The citizens of Numberland are fascinated by prime numbers and their properties. One day, they discovered a new game involving prime numbers which goes as follows: Given an integer n, partition the number into a non-empty sequence of positive integers such that: 1. The sum of these integers is equal to n. 2. Each integer in the sequence is a prime number. Determine the number of distinct partitions possible. Since the result can be large, return the answer modulo 1000000007 (10^9 + 7). Input The first line contains a single integer n (1 ≤ n ≤ 100) — the integer to be partitioned. Output Output a single integer — the number of distinct partitions possible modulo 1000000007. Examples Input 5 Output 2 Input 10 Output 5 Explanation For the first example, the two partitions are [2, 3] and [5]. For the second example, the five partitions are [2, 2, 2, 2, 2], [2, 2, 2, 3], [2, 2, 3, 3], [2, 3, 5], and [5, 5].","solution":"MOD = 1000000007 def sieve(n): Returns a list of all prime numbers up to n using the Sieve of Eratosthenes is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def count_partitions(n): primes = sieve(n) dp = [0] * (n + 1) dp[0] = 1 for prime in primes: for j in range(prime, n + 1): dp[j] = (dp[j] + dp[j - prime]) % MOD return dp[n] # Example Usage if __name__ == \\"__main__\\": n = int(input().strip()) print(count_partitions(n))"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to find the number of pairs of indices (i, j) such that the substring from index i to j (inclusive) is a palindrome. A palindrome is a string that reads the same forward and backward. Input format: The only line of input consists of a string S. Output format: Output the total number of palindromic substrings in S. Constraints: 1 ≤ |S| ≤ 1000 SAMPLE INPUT abccba SAMPLE OUTPUT 9 Explanation: The palindromic substrings are: \\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\", \\"a\\", \\"bccb\\", \\"cc\\", \\"abccba\\" Thus, there are 9 palindromic substrings in total.","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 def is_palindrome(i, j): while i < j: if S[i] != S[j]: return False i += 1 j -= 1 return True for i in range(n): for j in range(i, n): if is_palindrome(i, j): count += 1 return count"},{"question":"You are managing a system that tracks the usage of server resources in a data center. The system keeps logs of events where each event corresponds to either the allocation or deallocation of resources such as CPU or memory. Each event is represented as a tuple (timestamp, resource_id, action), where `action` is either \\"allocate\\" or \\"deallocate\\". The `resource_id` is unique to each resource. Your task is to determine whether at any point in time a resource was deallocated without being allocated first, or if a resource was allocated multiple times without being deallocated in between. Write a function `check_consistency(logs)` that takes in a list of event logs and returns `True` if all events are consistent, and `False` if there is any inconsistency. # Function Signature ```python def check_consistency(logs: List[Tuple[int, int, str]]) -> bool: ``` # Input - `logs`: List of tuples, where each tuple contains: - `timestamp` (int): The time at which the event occurred. - `resource_id` (int): The ID of the resource. - `action` (str): Either \\"allocate\\" or \\"deallocate\\". # Output - Return `True` if all events are consistent, otherwise `False`. # Example ```python logs = [ (1, 101, \\"allocate\\"), (2, 102, \\"allocate\\"), (3, 101, \\"deallocate\\"), (4, 101, \\"allocate\\"), (5, 102, \\"deallocate\\") ] print(check_consistency(logs)) # Expected output: True ``` ```python logs = [ (1, 101, \\"allocate\\"), (2, 101, \\"allocate\\"), (3, 102, \\"deallocate\\") ] print(check_consistency(logs)) # Expected output: False ``` # Constraints - The `timestamp` of events will be unique and in increasing order. - 1 ≤ len(logs) ≤ 10^5 - 1 ≤ `resource_id` ≤ 10^5","solution":"from typing import List, Tuple def check_consistency(logs: List[Tuple[int, int, str]]) -> bool: resource_status = {} for timestamp, resource_id, action in logs: if action == \\"allocate\\": if resource_id in resource_status and resource_status[resource_id] == \\"allocated\\": return False resource_status[resource_id] = \\"allocated\\" elif action == \\"deallocate\\": if resource_id not in resource_status or resource_status[resource_id] != \\"allocated\\": return False resource_status[resource_id] = \\"deallocated\\" return True"},{"question":"A warehouse has n sections arranged in a straight line, where each section can be either \'full\' or \'empty\'. You are responsible for managing the warehouse and need to ensure that no two \'full\' sections are adjacent because it creates a safety hazard. You can perform a single operation of clearing out one \'full\' section to make it \'empty\'. Your goal is to minimize the number of such operations to ensure that there are no two \'full\' sections next to each other. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of sections in the warehouse. The second line contains a binary string s of length n, where s_i is \'1\' if the i-th section is full, and \'0\' otherwise. Output Print a single integer — the minimal number of operations required to ensure that no two \'full\' sections are adjacent. Examples Input 6 100110 Output 1 Input 8 11101011 Output 3 Note In the first example, only one operation is needed to clear one of the \'1\'s from the substring \\"11\\". Possible resulting strings could be \\"100010\\" or \\"100100\\". In the second example, three operations are required to ensure no two \'1\'s are next to each other. Possible resulting strings could be \\"10101010\\".","solution":"def minimize_operations(n, s): Returns the minimal number of operations required to ensure that no two \'full\' sections are adjacent. Parameters: - n (int): The number of sections in the warehouse. - s (str): A binary string of length n where \'1\' indicates full and \'0\' indicates empty. Returns: - int: The minimal number of operations required. operations = 0 i = 0 while i < n: if s[i] == \'1\': # count consecutive \'1\'s count = 0 while i < n and s[i] == \'1\': count += 1 i += 1 # for each pair of consecutive \'1\'s, one operation is needed operations += (count - 1) else: i += 1 return operations"},{"question":"Given a list of integers representing the ages of people in a group, you are to determine the maximum number of pairs (i, j) such that age_i + age_j is a prime number. Each person can participate in at most one such pair. Input format: - The first line contains an integer N, the number of people in the group (1 ≤ N ≤ 10^5). - The second line contains N integers, the ages of the people in the group (1 ≤ age ≤ 100). Output format: - Output a single integer, the maximum number of prime pairs. Constraints: 1 ≤ N ≤ 10^5 1 ≤ age ≤ 100 SAMPLE INPUT 6 3 7 1 12 6 9 SAMPLE OUTPUT 2 Explanation For the given group, the pairs that sum up to a prime number are: (3, 7) and (1, 6). Note that multiple pairs with the same people are not allowed, and for every person, you can create at most one pair. Therefore, the maximum number of pairs is 2.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_prime_pairs(ages): Determine the maximum number of pairs (i, j) such that ages[i] + ages[j] is a prime number. Each person can participate in at most one such pair. from collections import Counter from itertools import combinations # Count the occurrences of each age age_counts = Counter(ages) # List of all unique ages unique_ages = list(age_counts.keys()) # All pair sum check and collect qualifying pairs pairs = [] for i, j in combinations(unique_ages, 2): if is_prime(i + j): pairs.extend([(i, j)] * min(age_counts[i], age_counts[j])) # Sorting pairs for optimal pairing pairs.sort(key=lambda x: (min(age_counts[x[0]], age_counts[x[1]]), x)) # Perform pairing matched_pairs = 0 for a, b in pairs: if age_counts[a] > 0 and age_counts[b] > 0: matched_pairs += 1 age_counts[a] -= 1 age_counts[b] -= 1 return matched_pairs"},{"question":"Motivated by recent developments in astronomy, you have decided to tackle the problem of identifying the brightest star in a constellation observed from Earth. You have a list of stars, each with a unique brightness level, and you need to identify the brightest one. Unfortunately, the list of stars is too long, and checking each star one-by-one would take too much time. To speed things up, you can compare the brightness of two stars at a time. # Task Design a function to figure out the brightest star in the constellation by asking minimum number of questions. # Input A single integer `n` (2 ≤ n ≤ 1024) — the number of stars. Interaction To compare the brightness of two stars, print \\"compare i j\\" (without quotes, 1 ≤ i, j ≤ n, i ≠ j). You will then receive a response \\"i wins\\" if the brightness of star `i` is greater, otherwise, you\'ll receive \\"j wins\\". Once you have determined the brightest star, print \\"answer k\\" (without quotes) where `k` is the index of the brightest star. # Rules 1. Do not exceed more than 2 * (n - 1) comparisons. 2. Ensure each index is used only once in the final answer. 3. To succeed, identify the brightest star correctly, immediately after making the final comparison. # Example Input ```plaintext 5 ``` Output ```plaintext compare 1 2 i wins compare 1 3 i wins compare 1 4 4 wins compare 4 5 4 wins answer 4 ``` # Explanation You start by comparing star 1 and star 2. If star 1 wins, you continue comparing star 1 with the next star (star 3). If star 1 keeps winning, you use it in the next comparison. At some point, if star 1 loses, you drop it and continue with the winner (in this case, star 4) until you identify the brightest star in the constellation. By carefully choosing which stars to compare based on the outcomes, you can minimize the number of comparisons needed to identify the brightest star.","solution":"def find_brightest_star(n, compare_fn): This function finds the brightest star in the constellation. Parameters: n (int): The number of stars. compare_fn (function): A function to compare the brightness of two stars. It takes two arguments i and j (star indices) and returns the index of the brighter star. Returns: int: The index of the brightest star. brightest_star = 1 for i in range(2, n + 1): brightest_star = compare_fn(brightest_star, i) return brightest_star # Example usage: # Define the compare function # In real usage, this function would interact with some external system to get the comparison results. def example_compare_fn(i, j): print(f\\"compare {i} {j}\\") # Replace the following lines with actual interaction code to get a real result. # For this example, let\'s assume we have a pre-defined set of results. results = { (1, 2): 1, (1, 3): 1, (1, 4): 4, (4, 5): 4, } return results[(i, j)] # Find the brightest star brightest_star = find_brightest_star(5, example_compare_fn) print(f\\"answer {brightest_star}\\")"},{"question":"A company has n service centers, and each center can handle a limited number of service requests per day. The company wants to evenly distribute the incoming service requests among all centers. Each service request is represented by its integer id. You are tasked with implementing a fair and efficient way to distribute the service requests among service centers such that the number of requests assigned to each center is as balanced as possible. Input The first line contains an integer n (1 ≤ n ≤ 105) which represents the number of service centers. The second line contains the capacities of the service centers in the sequence c1, c2, ..., cn (1 ≤ ci ≤ 105). The third line contains an integer m (1 ≤ m ≤ 106) which represents the number of service requests. The fourth line contains the list of service request ids in the sequence r1, r2, ..., rm (1 ≤ ri ≤ 109). Output Print the id of the assigned service center for each request in the order they are input. If there are multiple equally optimal ways to distribute, any valid distribution is acceptable. Example Input 3 5 3 7 10 101 102 103 104 105 106 107 108 109 110 Output 1 2 3 1 2 3 1 2 3 1","solution":"def distribute_requests(n, capacities, m, requests): Distributes the incoming requests among service centers. Parameters: n (int) : Number of service centers capacities (list) : List of capacities for each service center m (int) : Number of service requests requests (list) : List of service request ids Returns: list : List of assigned service center ids for each request # Initialize a list to keep track of the number of requests allocated to each center allocated_requests = [0] * n # Initialize a list to store the resulting assignments assignments = [] for request in requests: # Find the service center with the minimum number of assigned requests min_index = allocated_requests.index(min(allocated_requests)) # Assign this request to the selected service center assignments.append(min_index + 1) # Increase the count of requests assigned to this service center allocated_requests[min_index] += 1 # Ensure the allocation doesn\'t exceed the capacity if allocated_requests[min_index] > capacities[min_index]: raise ValueError(\\"Service center capacity exceeded\\") return assignments"},{"question":"Given a string S consisting only of lowercase English letters and characters \'*\', you need to determine the length of the longest substring that has no \'*\' characters. # Constraints: - 1 <= |S| <= 10^5 - S contains only lowercase English letters and the \'*\' character. # Input: A single string S, given from Standard Input in the following format: `S` # Output: Print the length of the longest substring that contains no \'*\' characters. # Examples: Input: `a*bc*de` Output: 2 Input: `aabc**de*f` Output: 4 Input: `****` Output: 0","solution":"def longest_substring_without_asterisk(S): Given a string S consisting only of lowercase English letters and characters \'*\', determines the length of the longest substring that has no \'*\' characters. max_length = 0 current_length = 0 for char in S: if char == \'*\': max_length = max(max_length, current_length) current_length = 0 else: current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are a software engineer tasked with developing a system to manage a simple banking ledger. The ledger consists of a list of transactions, where each transaction can be a deposit or a withdrawal. Each transaction also has a timestamp indicating when it occurred. You need to implement a function that processes these transactions and computes the balance after a given set of transactions. Each transaction will be represented as a string in the format \\"timestamp:type:amount\\", where: - `timestamp` is an integer representing the time the transaction occurred. - `type` is a single character, either \'D\' for deposit or \'W\' for withdrawal. - `amount` is a positive integer indicating the amount of money involved in the transaction. Write a function `process_transactions(transactions)` that takes a list of transactions and returns the final balance. Assume the initial balance is zero. Input - transactions: a list of strings, where each string represents a transaction in the format \\"timestamp:type:amount\\". Output - The final balance as an integer. Example Input ``` transactions = [\\"1618896200:D:300\\", \\"1618896210:W:100\\", \\"1618896220:D:200\\"] ``` Output ``` 400 ``` Explanation - The initial balance is 0. - The first transaction is a deposit of 300. Balance becomes 300. - The second transaction is a withdrawal of 100. Balance becomes 200. - The third transaction is a deposit of 200. Balance becomes 400.","solution":"def process_transactions(transactions): Processes a list of transactions and calculates the final balance. Parameters: transactions (list of str): List of transactions in the format \\"timestamp:type:amount\\". Returns: int: The final balance after processing all transactions. balance = 0 for transaction in transactions: parts = transaction.split(\':\') timestamp, trans_type, amount = parts[0], parts[1], int(parts[2]) if trans_type == \'D\': balance += amount elif trans_type == \'W\': balance -= amount return balance"},{"question":"There is a sequence of n integers. The sequence can be rotated any number of times. You are to determine the maximum sum of any contiguous subarray within the sequence after you select the most optimal rotation. The rotation can be done in either direction. Constraints * All inputs are integers * 1 ≤ n ≤ 10,000 * -10^5 ≤ arr[i] ≤ 10^5 Input The input consists of multiple test cases. Each test case follows the format below: n arr1 arr2 ... arrn The sequence of numbers ends with a line containing a single 0. Output Output a single integer representing the maximum sum of any contiguous subarray after the most optimal rotation for each test case. Example Input 6 4 -1 2 1 -5 4 5 1 2 3 4 5 0 Output 10 15","solution":"def max_subarray_sum_circular(nums): Find the maximum sum of a subarray in a circular array. This uses Kadane’s algorithm for regular subarrays and a modification for circular subarrays. def kadane(nums): current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Non-circular case max_kadane = kadane(nums) # Circular case max_wrap = 0 for i in range(len(nums)): max_wrap += nums[i] nums[i] = -nums[i] # Finding max sum subarray of inverted array max_wrap = max_wrap + kadane(nums) # The max_wrap calculation will include cases where all elements are negated, compare with non-circular case to figure out the true max. if max_wrap == 0: return max_kadane else: return max(max_kadane, max_wrap) def find_max_sum_of_contiguous_subarray(test_cases): outputs = [] for n, arr in test_cases: if n == 0: continue outputs.append(max_subarray_sum_circular(arr)) return outputs def parse_input(input_str): lines = input_str.strip().split(\\"n\\") test_cases = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break arr = list(map(int, lines[i + 1].strip().split())) test_cases.append((n, arr)) i += 2 return test_cases # Example functionality def max_sum_of_contiguous_subarray(input_str): test_cases = parse_input(input_str) results = find_max_sum_of_contiguous_subarray(test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are helping to develop a new multiplayer online game. In this game, players can form teams and compete in various challenges. The game tracks the score of each team member, and the team\'s overall score is calculated based on the individual scores of its members. Write a program that calculates the overall score of each team based on the scores of its members. The overall score of a team is the sum of the scores of all its members divided by the number of team members, rounded down to the nearest integer. Input The input consists of several datasets. In the first line, the number of datasets n is given. Each dataset starts with a number t, the number of teams in that dataset. For each team, a line is provided, beginning with the number of team members m, followed by m integers representing the scores of the team members. Output For each dataset, print the overall scores of all teams in the dataset, one team score per line. Example Input 2 2 3 10 20 30 2 15 25 3 4 10 20 30 40 3 15 25 35 2 5 15 3 2 50 50 3 100 100 100 4 1 1 1 1 Output 20 20 25 25 10 50 100","solution":"def calculate_team_scores(input_data): Computes the overall score of each team based on members\' scores. Parameters: input_data: str : The input string containing multiple datasets Returns: list : A list of strings with overall scores for each team per dataset from math import floor lines = input_data.strip().split(\\"n\\") n = int(lines[0]) idx = 1 results = [] for _ in range(n): t = int(lines[idx]) idx += 1 for _ in range(t): data = list(map(int, lines[idx].split())) m = data[0] scores = data[1:] overall_score = sum(scores) // m results.append(str(overall_score)) idx += 1 return results"},{"question":"Tom is passionate about programming and loves to solve puzzles with strings. Recently, he came across a problem related to permutations of strings and wants to write a program for it. Given a string consisting of lowercase alphabets, he is interested in finding all the permutations of this string and arranging them in lexicographical order. Your task is to help Tom by writing a program that takes a string as input and outputs all its permutations in lexicographical order. Input: The input consists of a single string s (1 ≤ |s| ≤ 8), where |s| is the length of the string. Output: Output all the permutations of the string in lexicographical order. Each permutation should be printed on a new line. Note: - The string will contain only lowercase alphabets. SAMPLE INPUT abc SAMPLE OUTPUT abc acb bac bca cab cba Explanation All possible permutations of the string \\"abc\\" are: abc acb bac bca cab cba So, the permutations in lexicographical order are: abc acb bac bca cab cba","solution":"from itertools import permutations def get_lexicographical_permutations(s): Returns all permutations of the string `s` in lexicographical order. perms = permutations(s) unique_perms = sorted(set(\'\'.join(p) for p in perms)) return unique_perms def print_lexicographical_permutations(s): Prints all permutations of the string `s` in lexicographical order, each on a new line. perms = get_lexicographical_permutations(s) for perm in perms: print(perm)"},{"question":"You are given an integer n. Find two positive integers a and b (a > 0, b > 0) such that: * the decimal representation of a without leading zeroes consists of exactly n digits; * the decimal representation of b without leading zeroes consists of exactly n digits; * the product of the two integers a and b is equal to a palindrome number. Output a and b. If there are multiple answers, output any of them. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of testcases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 3) — the required length of the numbers. It can be shown that the answer exists for all testcases under the given constraints. Output For each testcase, print two positive integers — a and b (a > 0, b > 0) such that: * the decimal representation of a without leading zeroes consists of exactly n digits; * the decimal representation of b without leading zeroes consists of exactly n digits; * the product of the two integers a and b is equal to a palindrome number. Example Input 4 1 2 2 3 Output 1 1 11 11 22 22 121 121 Note In the example: 1. 1 * 1 = 1 2. 11 * 11 = 121 3. 22 * 22 = 484 4. 121 * 121 = 14641","solution":"def find_a_b_for_palindrome_product(n): Returns a and b such that the product of a and b is a palindrome and each has exactly n digits. if n == 1: return 1, 1 elif n == 2: return 11, 11 elif n == 3: return 101, 101 else: raise ValueError(\\"Invalid value of n. Only values 1, 2, and 3 are supported.\\") def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each test case. results = [] for n in test_cases: results.append(find_a_b_for_palindrome_product(n)) return results"},{"question":"In a faraway kingdom, there exists a long, straight road that connects n towns in a sequential order. Each town has a certain number of coins, and a traveler can start from any town and travel to any other town, collecting coins along the way. However, the traveler can only move forward (i.e., from a town with lower index to a town with higher index). You are tasked with finding the maximum number of coins a traveler can collect if they start from any given town and can travel to any town ahead of it, without skipping towns in between. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of towns. The second line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 109) — the number of coins in each town. Output Output n integers separated by spaces. The i-th integer should represent the maximum number of coins that can be collected if the traveler starts from the i-th town and travels to any town with a higher index. Examples Input 5 1 2 10 3 6 Output 22 21 19 9 6 Input 4 5 1 3 7 Output 16 8 10 7 Note In the first sample testcase, if the traveler starts from the first town, they can collect coins from towns 1 to 5 (1 + 2 + 10 + 3 + 6 = 22). If the traveler starts from the second town, they can collect coins from towns 2 to 5 (2 + 10 + 3 + 6 = 21), and so on. In the second sample testcase, if the traveler starts from the first town, they can collect coins from towns 1 to 4 (5 + 1 + 3 + 7 = 16). If the traveler starts from the second town, they can collect coins from towns 2 to 4 (1 + 3 + 7 = 11), and so on.","solution":"def max_coins(n, coins): Returns a list of maximum number of coins a traveler can collect starting from each town. Parameters: n (int): The number of towns. coins (List[int]): The number of coins in each town. Returns: List[int]: The maximum number of coins collectable from each starting town. result = [0] * n result[-1] = coins[-1] # Start with the last town for i in range(n-2, -1, -1): result[i] = coins[i] + result[i+1] # Accumulate coins from right to left return result"},{"question":"John is participating in a coding contest. There are n problems in the contest and John wants to solve as many of them as possible. However, he can only spend a limited amount of time m on solving problems. Each problem has a certain difficulty level, and it takes a specific amount of time to solve it. John prefers to solve easier problems first to maximize the number of problems he can solve within the given time limit. Write a program to determine the maximum number of problems John can solve within the time limit m. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of problems and the maximum time John can spend. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 100), where ti is the time required to solve the i-th problem. Output Print a single integer — the maximum number of problems John can solve within the given time limit. Examples Input 5 10 2 3 1 5 4 Output 4 Input 3 5 4 3 2 Output 2 Note In the first test sample, John can solve the problems with times 2, 3, 1, and 4 within the given time limit of 10. That means he can solve a maximum of 4 problems. In the second test sample, John can solve the problems with times 3 and 2 within the given time limit of 5. That means he can solve a maximum of 2 problems.","solution":"def max_problems_solved(n, m, times): Determines the maximum number of problems John can solve within the given time limit. Arguments: n : int : number of problems m : int : maximum time available times : list of ints : the time required to solve each problem Returns: int : the maximum number of problems solved times.sort() total_time = 0 problems_solved = 0 for time in times: if total_time + time > m: break total_time += time problems_solved += 1 return problems_solved"},{"question":"You are a software developer working on a system that processes lists of names and heights of individuals. Each individual entry consists of a name (a string) followed by height (an integer in centimeters). Your task is to write a program that receives multiple entries of individuals and outputs the name of the tallest individual. # Constraints * You can assume that there will always be at least one entry. * The name will be an alphabetic string of length between 1 and 100 (inclusive). * The height will be an integer between 50 and 300 (inclusive). * In case of a tie, where more than one individual is the tallest, output the name that appears first in the list. # Input Input is given from Standard Input in the following format: The first line contains an integer N (1 ≤ N ≤ 100), the number of individuals. Each of the next N lines contains a string followed by an integer, separated by a space. # Output Output the name of the tallest individual. # Examples Input ``` 3 Alice 170 Bob 182 Charlie 180 ``` Output ``` Bob ``` Input ``` 2 John 175 Doe 175 ``` Output ``` John ```","solution":"def find_tallest_individual(input_data): Receives a list of strings with names and heights, returns the name of the tallest individual. lines = input_data.strip().split(\'n\') N = int(lines[0]) tallest_name = \\"\\" tallest_height = 0 for i in range(1, N + 1): name, height = lines[i].split() height = int(height) if height > tallest_height: tallest_height = height tallest_name = name return tallest_name # Example usage: # input_data = \\"3nAlice 170nBob 182nCharlie 180\\" # print(find_tallest_individual(input_data)) # Output: \\"Bob\\""},{"question":"Professor McGonagall has recently developed a new spell that can manipulate and reshape magical energy grids. Each grid is a two-dimensional array of energy cells, with each cell containing an integer that represents the energy level at that point. McGonagall needs your help to harness this spell to perform specific operations on the grid. The operations are: 1. Rotate Right: This operation rotates the grid 90 degrees to the right. 2. Rotate Left: This operation rotates the grid 90 degrees to the left. 3. Reflect: This operation reflects the grid over its main diagonal (top-left to bottom-right). You are given a grid and a sequence of operations to perform. Your task is to apply these operations in the given order and return the modified grid. Input The first line contains two integers N and M, the dimensions of the grid (number of rows and columns). The next N lines contain M integers each, representing the energy levels of the grid. The line after the grid contains a string of operations, where each character in the string represents an operation (\'R\' for Rotate Right, \'L\' for Rotate Left, and \'D\' for Reflect). Output Output the final state of the grid after all operations have been applied. Each line should contain M integers separated by spaces. Constraints 1 ≤ N, M ≤ 100 -1000 ≤ energy levels ≤ 1000 At most 100 operations in the operation string. Example Input: 3 3 1 2 3 4 5 6 7 8 9 RRLLD Output: 1 4 7 2 5 8 3 6 9 Note: The operations are applied as follows: 1. Rotate Right: 7 4 1 8 5 2 9 6 3 2. Rotate Right: 9 8 7 6 5 4 3 2 1 3. Rotate Left: 7 4 1 8 5 2 9 6 3 4. Rotate Left: 1 2 3 4 5 6 7 8 9 5. Reflect: 1 4 7 2 5 8 3 6 9","solution":"def rotate_right(grid): return [list(row) for row in zip(*grid[::-1])] def rotate_left(grid): return [list(row) for row in zip(*grid)][::-1] def reflect(grid): return [list(row) for row in zip(*grid)] def apply_operations(grid, operations): for op in operations: if op == \'R\': grid = rotate_right(grid) elif op == \'L\': grid = rotate_left(grid) elif op == \'D\': grid = reflect(grid) return grid def reshape_grid(n, m, grid_str, operations): grid = [list(map(int, row.strip().split())) for row in grid_str.strip().split(\'n\')] result = apply_operations(grid, operations) return result"},{"question":"You are organizing a coding competition and need to create a unique identifier for each participant. The identifier should be a string that follows these rules: - The identifier must be exactly \'M\' characters long. - The identifier must contain only lowercase English letters (\'a\' to \'z\'). - No subsequence of length \'K\' or more should repeat in the identifier. Given these constraints, write a function to generate one such identifier or determine that it is not possible to do so. Input The first line of the input contains two integers \'M\' and \'K\' (1 ≤ K ≤ M ≤ 20) separated by a single space. Output Output the identifier string if it is possible to generate such a string. If not, output \\"Not possible\\". Example Input: 4 2 Output: abcd Input: 3 2 Output: abc Input: 5 3 Output: abcde Explanation: In the first test case, any string of length 4 where no two contiguous characters form a repeating substring of length 2 or more is valid. In the second test case, \\"abc\\" is a valid identifier because no substring of length 2 repeats. For instance, \\"aabb\\" is invalid as \\"aa\\" repeats. In the third test case, the string \\"abcde\\" is valid because it has unique characters and does not repeat any substring of length 3 or more.","solution":"def generate_identifier(M, K): import itertools # If K equals 1, it\'s trivially possible by repeating the same letter. if K == 1: return \'a\' * M # There are not enough unique letters if M > 26 since there are only 26 lowercase letters. if M > 26: return \\"Not possible\\" letters = \'abcdefghijklmnopqrstuvwxyz\' # Generate all possible substrings of length K. substrings = set() for combo in itertools.product(letters, repeat=K): substrings.add(\'\'.join(combo)) # Generate identifier by ensuring no K length subsequences repeat. identifier = \\"\\" used_substrings = set() i = 0 while len(identifier) < M: candidate = letters[i % 26] extended_identifier = identifier + candidate # Get the last K-length substring in the extended identifier last_k_substr = extended_identifier[-K:] if last_k_substr not in used_substrings: identifier = extended_identifier used_substrings.add(last_k_substr) if len(used_substrings) >= len(substrings): break i += 1 if i > 26: return \\"Not possible\\" return identifier if len(identifier) == M else \\"Not possible\\""},{"question":"Given a string containing only digits, determine if the digits form an Arithmetic Progression (AP). An AP is a sequence of numbers in which the difference between consecutive terms is constant. Print \\"Yes\\" if the digits form an AP, otherwise print \\"No\\". Constraints * The string will contain at most 100 digits. Input The input is given as a single string of digits. Example Input 579 Output Yes Input 12468 Output No Input 8642 Output Yes","solution":"def is_arithmetic_progression(s): Determines if the digits form an Arithmetic Progression (AP). Parameters: s (str): A string containing only digits. Returns: str: \\"Yes\\" if the digits form an AP, otherwise \\"No\\". if len(s) < 2: return \\"Yes\\" # Convert the string to a list of integers digits = list(map(int, s)) # Calculate the common difference common_diff = digits[1] - digits[0] # Check if the difference between all consecutive terms is equal to the common_diff for i in range(1, len(digits)): if digits[i] - digits[i - 1] != common_diff: return \\"No\\" return \\"Yes\\""},{"question":"problem Given a binary array (array containing only 0s and 1s), your task is to find the total number of subarrays that have an equal number of 0s and 1s. A subarray is a contiguous part of an array. For example, if the array is [1,0,1,0,1], the subarray [0,1,0] contains equal numbers of 0s and 1s. # Input 1. The first line contains an integer T, the number of test cases (1 ≤ T ≤ 10). 2. Each of the next T test cases starts with an integer n, the length of the binary array (1 ≤ n ≤ 10^5). 3. The following line contains n integers (either 0 or 1) separated by spaces, representing the binary array. # Output For each test case, output a single integer, the total number of subarrays with equal number of 0s and 1s. # Example Input: 2 4 0 1 0 1 5 1 0 1 0 1 Output: 4 6 # Explanation: **Example 1:** - There are 4 subarrays with equal numbers of 0s and 1s: [0, 1], [1, 0], [0, 1], [0, 1, 0, 1]. **Example 2:** - There are 6 subarrays with equal numbers of 0s and 1s: [1, 0], [0, 1], [1, 0], [0, 1], [1, 0, 1, 0], [0, 1, 0, 1].","solution":"def count_equal_subarrays(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] # Replace all 0s with -1 for j in range(n): if arr[j] == 0: arr[j] = -1 # Calculate the prefix sum and use a dictionary to count the occurrences prefix_sum = 0 prefix_sums = {0: 1} count = 0 for number in arr: prefix_sum += number if prefix_sum in prefix_sums: count += prefix_sums[prefix_sum] prefix_sums[prefix_sum] += 1 else: prefix_sums[prefix_sum] = 1 results.append(count) return results"},{"question":"Implement a function that performs run-length encoding (RLE) on a given string. Run-length encoding is a form of lossless data compression in which runs of data (sequences in which the same data value occurs in many consecutive elements) are stored as a single data value and count. For example, the string \\"wwwwaaadexxxxxxywww\\" would be encoded as \\"w4a3d1e1x6y1w3\\". You need to write a function `rle_encode(s: str) -> str` which takes a string `s` (1 ≤ |s| ≤ 10^5, where |s| is the length of the string) and returns its run-length encoded string. If the run-length encoded string is not shorter than the original string, return the original string instead. Input - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - The next t lines each contain a string `s` to be encoded. Output - Print the run-length encoded version of the string for each test case on a new line. Example Input 5 wwwwaaadexxxxxxywww aabcccccaaa abc aaaabbbbccccc a Output w4a3d1e1x6y1w3 a2b1c5a3 abc a4b4c5 a Note For the first test case, the string \\"wwwwaaadexxxxxxywww\\" is transformed into \\"w4a3d1e1x6y1w3\\", which is shorter than the original string, so the encoded string is returned. For the second test case, the string \\"aabcccccaaa\\" is transformed into \\"a2b1c5a3\\", which is also shorter than the original, so it is returned. For the third test case, the string \\"abc\\" does not benefit from run-length encoding as its encoded length would be \\"a1b1c1\\", which is longer. Hence, the original string is returned. For the fourth test case, the string \\"aaaabbbbccccc\\" is transformed into \\"a4b4c5\\", which is shorter than the original string, so it is returned. For the fifth test case, the string \\"a\\" does not benefit from run-length encoding since it is already of length 1, so it is returned as-is.","solution":"def rle_encode(s: str) -> str: Returns the run-length encoded string of s if it\'s shorter, otherwise returns s. encoded = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded.append(s[i - 1] + str(count)) count = 1 encoded.append(s[-1] + str(count)) encoded_string = \'\'.join(encoded) return encoded_string if len(encoded_string) < len(s) else s def process_test_cases(test_cases): results = [] for case in test_cases: results.append(rle_encode(case)) return results"},{"question":"You are given an integer array A of length N. Your task is to modify the array by performing a series of operations and then determine the maximum possible sum of the array. The allowed operation is as follows: * Select an index i (0 ≦ i < N), such that A[i] ≠ 0. Add the value of A[i] to one of its neighboring elements A[i-1] or A[i+1] (if it exists and is within boundaries of the array), and then set A[i] to 0. You can perform this operation any number of times (possibly zero). Constraints * 1 ≦ N ≦ 100,000 * -10^9 ≦ A[i] ≦ 10^9 Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print a single integer representing the maximum possible sum of the array after performing the operations. Examples Input 5 1 2 -3 4 5 Output 9 Input 3 -1 10 -1 Output 10 Input 4 -1 -2 -3 -4 Output 0","solution":"def max_possible_sum(N, A): Given an array of integers A of length N, modifies the array by performing certain operations to maximize the possible sum of the array. # Step 1: Initialize the result with the sum of non-negative numbers result = sum(x for x in A if x > 0) return result"},{"question":"Andrew recently moved to a new city and decided to explore the urban transportation systems. The city\'s public bus routes are represented as a directed graph, where each bus stop is a node, and each directed edge between nodes signifies a bus route from one stop to another. Each bus route has a specified travel time in minutes. Andrew\'s day often starts at the same bus stop, and he wishes to visit all the other bus stops in the shortest total travel time before returning to his starting stop. Your task is to help Andrew determine the minimum total travel time required to complete his trip and return to the starting stop by analyzing the city\'s bus route system. Input The input consists of multiple test cases. Each test case starts with an integer N (2 ≤ N ≤ 20), representing the number of bus stops. The next N lines contain N integers each, where the j-th integer in the i-th line denotes the travel time from bus stop i to bus stop j. Travel times are given in minutes and are non-negative integers. A travel time of 0 indicates that there is no direct bus route between the two stops, except for the main diagonal (i.e., travel time from a bus stop to itself will always be 0). The input terminates with a line containing a single zero. Output For each test case, output the minimum total travel time required for Andrew to visit all the bus stops starting and ending at bus stop 1. If there is no valid route to visit all bus stops and return to the starting stop, output \\"Impossible\\". Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 5 10 5 0 15 10 15 0 0 Output 80 30","solution":"def tsp(graph, N): dp = [[float(\'inf\')] * N for _ in range(1 << N)] dp[1][0] = 0 for mask in range(1 << N): for u in range(N): if mask & (1 << u): for v in range(N): if mask & (1 << v) == 0 and graph[u][v] > 0: dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + graph[u][v]) res = float(\'inf\') for v in range(1, N): if graph[v][0] > 0: res = min(res, dp[(1 << N) - 1][v] + graph[v][0]) return res if res < float(\'inf\') else \\"Impossible\\" def minimum_travel_time(test_cases): results = [] for graph in test_cases: N = len(graph) result = tsp(graph, N) results.append(result) return results"},{"question":"Shipping Packages Sarah likes to ship packages with her new drone service. She has multiple package orders each with a specific weight. The drone can carry a maximum total weight of W pounds at once. Sarah wants to optimize her shipping and make the fewest number of trips to deliver all the packages. Help Sarah determine the minimum number of trips required to ship all the packages given the weight limit of the drone and the weights of the packages. Input - The first line contains T, the number of test cases. - Each test case begins with an integer N, the number of packages. - The next line contains N integers representing the weights of the packages. - The next line contains an integer W, the maximum weight the drone can carry in one trip. Output For each test case, output a single line containing the minimum number of trips required to ship all the packages. Constraints 1 <= T <= 10 1 <= N <= 10^4 1 <= Weight of each package <= 10^4 1 <= W <= 10^5 Time limit: 1s Sample Input 2 3 1 2 3 5 4 2 2 2 2 4 Sample Output 2 2 Explanation In the first test case, you can ship packages with weights [1, 2] in the first trip and [3] in the second trip. In the second test case, you can ship the packages in pairs: [2, 2] in the first trip and another [2, 2] in the second trip.","solution":"def min_trips(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] weights = case[\'weights\'] W = case[\'W\'] weights.sort(reverse=True) # Sort weights in descending order trips = 0 while weights: current_trip_weight = 0 # Initialize current trip weight i = 0 # Try to fill the current trip to at least the max capacity while i < len(weights): if current_trip_weight + weights[i] <= W: current_trip_weight += weights.pop(i) else: i += 1 trips += 1 results.append(trips) return results # Example usage: T = 2 test_cases = [ {\\"N\\": 3, \\"weights\\": [1, 2, 3], \\"W\\": 5}, {\\"N\\": 4, \\"weights\\": [2, 2, 2, 2], \\"W\\": 4} ] result = min_trips(T, test_cases) print(result) # Output: [2, 2]"},{"question":"A mysterious island is populated by a rare species of birds. Each bird on the island enjoys perching on specially designed birdhouses. The island has several distinct birdhouses, each uniquely numbered from 1 to m. Throughout the day, birds randomly fly to different birdhouses, but each bird has its own preference and always returns to its chosen favorite birdhouse when not in flight. You have data on n birds, each characterized by their favorite birdhouse and the total number of times they visit that birdhouse within a day. The island\'s ornithologist wants to analyze this data to understand which birdhouses are most popular. You need to help by determining the birdhouse that has the maximum number of visits in a day. Input - The first line contains two space-separated integers, n and m (1 ≤ n, m ≤ 10^5) — the number of birds and the number of birdhouses, respectively. - The next n lines each contain two space-separated integers, d and v (1 ≤ d ≤ m, 1 ≤ v ≤ 10^4) — the favorite birdhouse of the ith bird and the number of times the ith bird visits that birdhouse. Output - Print a single integer — the birdhouse number with the maximum total visits in a day. If there are multiple birdhouses with the same number of visits, print the smallest birdhouse number. Examples Input 5 3 1 4 2 2 1 3 3 6 2 1 Output 1 Input 4 4 2 5 4 2 3 5 3 5 Output 3 Note In the first sample, birdhouse 1 is visited 7 times (4 + 3), birdhouse 2 is visited 3 times (2 + 1), and birdhouse 3 is visited 6 times. Thus, birdhouse 1 has the maximum number of visits. In the second sample, birdhouse 3 is visited 10 times (5 + 5), birdhouse 2 is visited 5 times, and birdhouse 4 is visited 2 times. Thus, birdhouse 3 has the maximum number of visits.","solution":"def most_popular_birdhouse(n, m, visits): birdhouse_visits = [0] * (m + 1) for d, v in visits: birdhouse_visits[d] += v max_visits = max(birdhouse_visits) for i in range(1, m + 1): if birdhouse_visits[i] == max_visits: return i"},{"question":"Write a program to determine the largest sum of contiguous subarray within a one-dimensional numeric array `A`. # Problem Statement Given an integer array `A` of size `N`, find the largest sum of contiguous subarray. # Input - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of elements in the array. - The second line contains `N` integers separated by spaces representing the elements of the array `A` (-10^4 ≤ A[i] ≤ 10^4). # Output - Output a single integer, the maximum sum of the contiguous subarray. # Example Input ``` 9 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` # Explanation In the example above, the contiguous subarray [4, -1, 2, 1] has the largest sum 6. # Note - A single-element array is also considered as a subarray. - The array contains at least one number. You may assume that the sum will always fit in a 64-bit signed integer.","solution":"def max_subarray_sum(A): Function to find the largest sum of contiguous subarray. Parameters: A (list): List of integers Returns: int: Maximum sum of contiguous subarray if not A: return 0 current_max = A[0] global_max = A[0] for num in A[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"A city is represented as a grid of n rows and m columns, where each cell contains either a `.` (empty space) or a `#` (building). Your job is to determine the number of distinct buildings in the city. A building is a connected component of `#` characters, where two `#` characters are part of the same building if they are adjacent horizontally or vertically (but not diagonally). Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid, respectively. The next n lines describe the city grid, each containing m characters which are either `.` or `#`. Output Print a single integer, which is the number of distinct buildings in the city. Examples Input 4 5 .#... ..# .#..# .#.#. Output 3 Input 3 3 # .#. # Output 3","solution":"def num_distinct_buildings(n, m, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'#\': return # Mark the cell as visited by replacing \'#\' with \'.\' grid[x][y] = \'.\' # Explore the neighbors (up, down, left, right) dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) building_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\': # We\'ve found an unvisited building part dfs(i, j) building_count += 1 return building_count # Read input # n, m = map(int, input().strip().split()) # grid = [list(input().strip()) for _ in range(n)] # print(num_distinct_buildings(n, m, grid))"},{"question":"In a distant land, there is a unique village with n beautiful gardens arranged in a circle. Each garden has a gate with a certain width, w_i, through which only a specified number of guests, g_i, can pass at once. The village is about to host its grand annual festival, and n guests will arrive at the same time, each assigned an integer id from 0 to n-1. The guest with id i will initially arrive at garden i and attempt to pass through a gate characterized by width w_i and limit g_i, one-time only before moving to the next garden. However, the arrangement of the gardens forms a circle, so after the last garden, the guest returns to the first garden again. Now, to ensure that the festival proceeds smoothly, it\'s crucial to find out the time at which all guests can pass through all gates without collision and in such a way that no garden gate exceeds its capacity at any moment. Input: The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of gardens and guests. The second line contains n integers w_0, w_1, ..., w_{n-1} (1 ≤ w_i ≤ 10^9) — the width of each garden gate. The third line contains n integers g_0, g_1, ..., g_{n-1} (1 ≤ g_i ≤ 10^5) — the maximum number of guests that can pass through each gate at a given time. Output: Print a single integer — the minimum time required for all guests to successfully pass through all the gates without collision following the rules given. Example: Input: 4 3 2 1 4 5 2 1 3 Output: 5 Explanation: - In this example, garden 0 can accommodate up to 5 guests at once, but only 3 guests can pass through its gate at a time. - At the first instance, guests 0, 1, 2, and 3 will attempt to pass through their respective gates. - As the guests attempt to move to the next garden, the constraints on each gate limit the steps they can take. The answer 5 represents the minimum time required for the festival to proceed without violations of any gate’s width and limit constraints.","solution":"def calculate_minimum_time(n, w, g): Calculate the minimum time required for all guests to successfully pass through all gates. Args: n: int - number of gardens and guests w: List[int] - widths of each garden gate g: List[int] - maximum number of guests that can pass through each gate at a given time Returns: int - minimum time required max_width_time = max(w) max_guests_time = max(g) return max(max_width_time, max_guests_time) # Example usage: n = 4 w = [3, 2, 1, 4] g = [5, 2, 1, 3] print(calculate_minimum_time(n, w, g)) # Output: 5"},{"question":"You are given a list of integers. Your task is to find the smallest integer that appears more than once in the list and output it. If no such integer exists, print -1. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers separated by space. Output Output a single integer — the smallest integer that appears more than once in the list, or -1 if no such integer exists. Examples Input 7 4 2 3 4 1 6 2 Output 2 Input 5 5 1 2 6 4 Output -1 Input 8 8 7 7 5 4 1 2 8 Output 7 Note In the first example, the integers 2 and 4 both appear more than once. Among them, 2 is the smallest one, so the output is 2. In the second example, no integer appears more than once. So the output is -1. In the third example, the integers 7 and 8 both appear more than once. Among them, 7 is the smallest one, so the output is 7.","solution":"def smallest_repeated_integer(n, arr): This function takes a list of integers and returns the smallest integer that appears more than once in the list, or -1 if no such integer exists. :param n: int - Number of integers in the list. :param arr: list of int - The list of integers. :return: int - The smallest repeated integer or -1. from collections import Counter count = Counter(arr) repeated_numbers = [num for num, cnt in count.items() if cnt > 1] if not repeated_numbers: return -1 return min(repeated_numbers)"},{"question":"An ancient civilization has handed down a tradition where they construct mystical structures called Palindromic Towers. A Palindromic Tower is a sequence of blocks, where each block carries a symbol, and forms a palindromic string when read from top to bottom or bottom to top. To keep the tradition alive, the people follow certain rules while building these towers: 1. Each block is represented by a lowercase English letter. 2. The sequence of symbols in the blocks must form a palindrome in order to complete the tower. A corrupted builder has invariably messed up the symbol sequence in the Palindromic Tower. Your task is to help restore the palindromic nature of the tower by determining the minimum number of block placements needed - replacing any symbol in a block with another symbol from \'a\' to \'z\'. You are given the current sequence of symbols in the Palindromic Tower. Determine the minimum number of changes needed to make the sequence a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence of blocks in the Palindromic Tower. The second line contains a string of n lowercase English letters — the current sequence of symbols in the Palindromic Tower. Output Print a single integer — the minimum number of block placements needed to make the sequence a palindrome. Examples Input 7 abccbaa Output 2 Input 5 abcdz Output 2 Note In the first example, the sequence `abccbaa` isn\'t a palindrome as is. Two placements will correct the sequence: changing the first \'b\' to \'a\' and the last \'a\' to \'b\' will make it `abccba`. In the second example, we change \'c\' to \'d\' and \'d\' to \'c\' making the sequence `abcba` with two placements. Solution: To solve this problem, we need to count the number of positions where the characters differ when compared to their mirrored position, then calculate the minimum changes required to match each pair correctly in a way that the entire sequence forms a palindrome.","solution":"def min_palindrome_changes(n, sequence): This function returns the minimum number of changes needed to transform the sequence into a palindrome. :param n: Length of the sequence (integer) :param sequence: String containing the current sequence of symbols :return: Minimum number of changes needed (integer) left = 0 right = n - 1 changes = 0 while left < right: if sequence[left] != sequence[right]: changes += 1 left += 1 right -= 1 return changes"},{"question":"Rewrite the following code so that it uses a function which takes necessary inputs and returns the required output. Refrain from using any built-in Python method for reversing a string. ```python s = \\"hello\\" reversed_string = \\"\\" for char in s: reversed_string = char + reversed_string print(reversed_string) ``` The function should follow the below signature: ```python def reverse_string(s: str) -> str: # your code here ``` Input The input will be a string s (1 ≤ |s| ≤ 10^5). Output Return the reversed string. Examples Input hello Output olleh Input world Output dlrow Input Python Output nohtyP Note In the first example, reversing the string \\"hello\\" results in \\"olleh\\". In the second example, reversing the string \\"world\\" results in \\"dlrow\\". In the third example, reversing the string \\"Python\\" results in \\"nohtyP\\".","solution":"def reverse_string(s: str) -> str: Return the reversed string. reversed_string = \\"\\" for char in s: reversed_string = char + reversed_string return reversed_string"},{"question":"You are given a string s consisting of lowercase letters. You can perform the following operation on the string at most once: Choose any two adjacent characters and swap them. Determine the lexicographically smallest string you can obtain by performing this operation at most once. Input The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the length of the string s. The second line contains the string s. Output Print the lexicographically smallest string you can obtain by performing the operation at most once. Examples Input 4 dcba Output cdba Input 3 abc Output abc Input 5 bxbca Output bbxca Note In the first example, you can swap \'b\' and \'c\' to get the string \\"cdba\\", which is the lexicographically smallest possible. In the second example, the given string is already the lexicographically smallest possible. In the third example, you can swap \'x\' and \'b\' to get the string \\"bbxca\\", which is the lexicographically smallest possible.","solution":"def lex_smaller_string(n, s): Returns the lexicographically smallest string that can be obtained by swapping any two adjacent characters at most once. for i in range(n - 1): if s[i] > s[i + 1]: # Swap characters at index i and i+1 s = s[:i] + s[i+1] + s[i] + s[i+2:] return s return s"},{"question":"Given n cities and m bidirectional roads connecting these cities, determine the minimum cost to build new roads to make all cities reachable from any other city. For simplicity, assume building a new road between any two cities has a fixed cost of 1. You need to determine this cost. If the cities are already fully connected, the cost should be 0. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of cities and roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is a road connecting city u and city v. It is guaranteed that there are no multiple roads between the same pair of cities. Output Output a single integer — the minimum cost to build new roads to ensure all cities are reachable from any other city. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 4 0 Output 3 Input 6 4 1 2 2 3 4 5 5 6 Output 1 Note In the first example: - Cities 1, 2, and 3 are connected. - Cities 4 and 5 are connected. - To make all cities reachable from any other city, we need to connect either city 1 (or 2 or 3) to city 4 (or 5). - We need 1 new road, so the minimum cost is 1. In the second example: - There are no roads. - We need to connect all cities to make them reachable from any other city. - We need 3 new roads to connect them all, so the minimum cost is 3. In the third example: - Cities 1, 2, and 3 are connected. - Cities 4, 5, and 6 are connected. - To make all cities reachable from any other city, we can connect either city 1 (or 2 or 3) to city 4 (or 5 or 6). - We need 1 new road, so the minimum cost is 1.","solution":"def find_min_new_roads(n, m, connections): Determines the minimum cost to build new roads to make all cities reachable from any other city. Parameters: n (int): Number of cities. m (int): Number of existing bidirectional roads. connections (list of tuples): List of tuples where each tuple (u, v) represents a road connecting city u and city v. Returns: int: Minimum cost to build new roads to ensure all cities are reachable from any other city. from collections import defaultdict, deque # If there are no cities or already fully connected return 0 cost if n == 1 or n == 0: return 0 if m >= n - 1: return 0 adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) def bfs(city, visited): queue = deque([city]) visited.add(city) while queue: current = queue.popleft() for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) visited = set() components = 0 for city in range(1, n + 1): if city not in visited: bfs(city, visited) components += 1 # We need (components - 1) new roads to connect all components return components - 1"},{"question":"You are given a string `s` consisting of the characters \'a\' and \'b\' only. Your task is to determine if the string can be rearranged such that no two adjacent characters are the same. Constraints * 1 leq |s| leq 100 * s consists of only characters \'a\' and \'b\'. Input Input is given from Standard Input in the following format: s Output Print \\"YES\\" if the string can be rearranged such that no two adjacent characters are the same. Otherwise, print \\"NO\\". Examples Input aab Output YES Input aaab Output NO","solution":"def can_rearrange_no_adjacent_same(s): Check if the string can be rearranged so that no two adjacent characters are the same. count_a = s.count(\'a\') count_b = s.count(\'b\') # If the difference between the counts of \'a\' and \'b\' is more than 1, # it\'s impossible to rearrange them to avoid adjacent characters being the same if abs(count_a - count_b) > 1: return \\"NO\\" return \\"YES\\""},{"question":"Given an array `arr` of N distinct integers, find and print all quadruplets (four elements) that sum up to 0. Constraints * 4 leq N leq 200 * -10^6 leq arr[i] leq 10^6 * All integers in the input array are distinct. Input Input is given from Standard Input in the following format: ``` N arr_1 arr_2 ... arr_N ``` Output Print multiple lines, each containing four integers representing one quadruplet. Each quadruplet should be printed in non-descending order and the quadruplets themselves should be printed in sorted order, with the first element used for sorting being the smallest element of the quadruplet. If there are no such quadruplets, print an empty line. Examples Input ``` 5 -2 -1 0 2 3 ``` Output ``` -2 -1 0 3 ``` Input ``` 6 -3 -1 0 1 2 3 ``` Output ``` -3 -1 1 3 -3 0 1 2 ```","solution":"def find_quadruplets(arr): N = len(arr) quadruplet_set = set() arr.sort() for i in range(N - 3): for j in range(i + 1, N - 2): left = j + 1 right = N - 1 while left < right: current_sum = arr[i] + arr[j] + arr[left] + arr[right] if current_sum == 0: quadruplet = (arr[i], arr[j], arr[left], arr[right]) quadruplet_set.add(quadruplet) left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return sorted(list(quadruplet_set)) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:1+N])) quadruplets = find_quadruplets(arr) for quad in quadruplets: print(\' \'.join(map(str, quad)))"},{"question":"Problem description. Dana is an enthusiastic gardener, but lately, she has encountered a problem while watering her plants. Each plant requires a specific amount of water, and her watering can holds a limited volume of water. Dana wants to ensure she waters as many plants as possible before running out of water or needing to refill her can. Each plant in her garden has a unique water requirement. Given the available volume in her watering can and the array of water requirements for each plant, determine the maximum number of plants she can water. Note: Dana can only refill her watering can when it is empty, and she wants to minimize the number of refills. Input The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers V and P denoting the volume of the watering can and the number of plants in the garden. The next line of each test case contains P integers Wi denoting the water requirement of each plant. Output For each test case output a single line containing the maximum number of plants Dana can water. Constraints 1<=T<=10 1<=V<=1000 1<=P<=100 1<=Wi<=100 Example Input: 2 10 5 4 3 5 2 1 15 3 10 5 8 Output: 4 2","solution":"def max_plants_watered(test_cases): results = [] for test_case in test_cases: V, P, water_reqs = test_case water_reqs.sort() watered_count = 0 current_volume = V for requirement in water_reqs: if requirement <= current_volume: watered_count += 1 current_volume -= requirement else: break results.append(watered_count) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): V, P = map(int, lines[index].split()) water_reqs = list(map(int, lines[index + 1].split())) test_cases.append((V, P, water_reqs)) index += 2 return test_cases def main(input_data): test_cases = parse_input(input_data) return max_plants_watered(test_cases)"},{"question":"Jacob is a budding geneticist who is interested in analyzing DNA sequences. He has two DNA strings `a` and `b` of equal length. A DNA string consists of characters \'A\', \'C\', \'G\', and \'T\', which represent the nucleotides Adenine, Cytosine, Guanine, and Thymine respectively. Jacob wants to determine the minimum number of nucleotide substitutions required to change DNA string `a` into DNA string `b`. Each substitution consists of changing one nucleotide at a given position in `a` into another nucleotide to match the corresponding position in `b`. Input Two lines, each containing a string of equal length and consisting only of characters \'A\', \'C\', \'G\', and \'T\'. The length of each string does not exceed 10^5 characters. Output A single integer, which is the minimum number of substitutions required. Examples Input ACGT TGCA Output 4 Input AAGTCC CAGTCC Output 1 Input ATCGATCG ATCGATCG Output 0 Note In the first example, each character in `a` needs to be substituted to match `b`: \'A\' to \'T\', \'C\' to \'G\', \'G\' to \'C\', and \'T\' to \'A\', resulting in 4 substitutions. In the second example, only the first character \'A\' in `a` needs to be changed to \'C\'. In the third example, the strings are already identical, so no substitutions are needed.","solution":"def min_substitutions(a, b): Calculate the minimum number of nucleotide substitutions required to change DNA string `a` into DNA string `b`. :param a: str, initial DNA string :param b: str, target DNA string to be transformed to :return: int, minimum number of substitutions required return sum(1 for x, y in zip(a, b) if x != y)"},{"question":"A large distribution company has several warehouses located on a two-dimensional plane. Each warehouse is represented as a point on the plane with x and y coordinates. To optimize their delivery routes, the company wants to divide the warehouses into k clusters. You are tasked with determining the optimal cluster centers such that the sum of the squared distances from each warehouse to its nearest cluster center is minimized. Input The first line contains integer n (1 ≤ n ≤ 105) — the number of warehouses. Next n lines each contain two space-separated integers: xi, yi ( - 109 ≤ xi, yi ≤ 109) — the coordinates of the i-th warehouse. The following line contains an integer k (1 ≤ k ≤ min(10, n)) — the number of clusters, followed by an integer t denoting the maximum number of iterations for the clustering process (1 ≤ t ≤ 10000). Output Print k lines, each containing two space-separated real numbers representing the coordinates of the cluster centers. If there are multiple solutions, print any of them. Examples Input 5 1 2 3 4 5 6 8 8 9 9 2 1000 Output 2.0000000000 3.0000000000 7.0000000000 7.6666666667 Input 6 0 0 0 1 1 0 1 1 10 10 10 11 2 10000 Output 0.5000000000 0.5000000000 10.0000000000 10.5000000000","solution":"import random import math def k_means_clustering(n, coordinates, k, t): # Initialize k centroids randomly from the coordinates centroids = random.sample(coordinates, k) for _ in range(t): clusters = [[] for _ in range(k)] # Assign each point to the nearest centroid for (x, y) in coordinates: distances = [math.dist((x, y), centroid) for centroid in centroids] closest_centroid = distances.index(min(distances)) clusters[closest_centroid].append((x, y)) # Update centroids new_centroids = [] for cluster in clusters: if cluster: cx = sum(point[0] for point in cluster) / len(cluster) cy = sum(point[1] for point in cluster) / len(cluster) new_centroids.append((cx, cy)) else: new_centroids.append(centroids[len(new_centroids)]) # In case of empty cluster, retain old centroid if centroids == new_centroids: break centroids = new_centroids return centroids # Example usage n = 5 coordinates = [(1, 2), (3, 4), (5, 6), (8, 8), (9, 9)] k = 2 t = 1000 result = k_means_clustering(n, coordinates, k, t) for centroid in result: print(f\\"{centroid[0]:.10f} {centroid[1]:.10f}\\")"},{"question":"A road network on an xy-plane is represented as a graph with intersections as vertices and roads as straight-line edges between the intersections. Intersections and roads are specified by their coordinates. A route from a starting intersection to a destination intersection is defined as a sequence of intersections connected by roads, and a valid route does not revisit the same intersection twice. Given a list of routes, you are to determine which routes pass through a specified midpoint intersection. An intersection is represented by its xy-coordinates, and a road is a direct line segment between two intersections. The list of intersections and roads forms a connected graph. Write a program that outputs the indices of routes that pass through the given midpoint intersection. Input The input consists of multiple datasets. Each dataset is formatted as follows. > t > Intersections > Roads > m > Routes > Midpoint Where: - `t` is the total number of intersections (2 <= t <= 100). - `Intersections` is a list of `t` lines, each containing two space-separated integers `xi` and `yi` representing the coordinates of an intersection (-10000 <= xi, yi <= 10000). - `Roads` is a list of pairs of integers, each pair specifying two intersections connected by a road. The number of roads is denoted by variable `r` on the first line, followed by `r` lines, where each line contains two integers `ai` and `bi` which are the indices of the intersections connected by that road (0 <= ai, bi < t). - `m` is the total number of routes, followed by `m` lines, each describing a route with a sequence of intersection indices. Each route is written in a single line with space-separated integers representing the sequence of intersection indices. - `Midpoint` is a single line containing two integers `mx` and `my` representing the coordinates of the midpoint intersection to check routes against (-10000 <= mx, my <= 10000). The dataset block ends when the next `t` is encountered or the input ends. Output For each dataset, your program should report the indices of routes that pass through the given midpoint intersection, in ascending order. Each number must be written in a separate line without any other characters such as leading or trailing spaces. If no routes pass through the midpoint, output \\"NONE\\". A series of five hyphens \\"-----\\" must be placed in a line at the end of each dataset. Example Input 5 0 0 2 0 4 0 2 2 4 2 4 0 1 1 2 1 3 2 4 3 0 1 2 0 3 4 4 3 0 2 0 5 0 0 2 2 4 4 6 6 8 8 4 0 2 2 4 4 6 6 8 2 0 2 4 6 8 8 6 4 2 0 6 6 0 Output 1 2 ----- NONE ----- Note: Multiple datasets are separated by new lines in the input, and the end of all inputs is denoted by a zero or reaching the end of the input. Adjust the parsing logic accordingly depending on the language used.","solution":"def find_routes_through_midpoint(intersections, roads, routes, midpoint): Determines which routes pass through the given midpoint intersection. Parameters: intersections (list of tuples): List of intersection coordinates. roads (list of tuples): List of roads represented by pairs of intersection indices. routes (list of list of int): List of routes, each route represented by a list of intersection indices. midpoint (tuple): Coordinates of the midpoint intersection to check routes against. Returns: list of int: Indices of routes that pass through the midpoint. If no routes pass through, returns [\\"NONE\\"]. mid_x, mid_y = midpoint midpoint_index = None # Find the index of the midpoint intersection for i, (x, y) in enumerate(intersections): if x == mid_x and y == mid_y: midpoint_index = i break if midpoint_index is None: return [\\"NONE\\"] passing_route_indices = [] for i, route in enumerate(routes): if midpoint_index in route: passing_route_indices.append(i) if not passing_route_indices: return [\\"NONE\\"] return passing_route_indices"},{"question":"A programmer named Alice loves solving puzzles. Recently, she encountered a challenge involving two arrays. She has two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, where `nums1` has a buffer at the end to hold additional elements (with `m+n` total elements). Alice needs to merge the two arrays into a single sorted array. She wants to do it in-place, meaning she wants to avoid using extra space for another array. Help Alice write a function to achieve this. Input The function will receive three parameters: `nums1`, `m`, and `nums2`, `n`. - `nums1`: a list of integers of size `m + n` with the first `m` elements being the elements of the array to be merged and the rest set to zero. - `m`: the number of initial elements in `nums1`. - `nums2`: a list of integers of size `n`. - `n`: the number of elements in `nums2`. Output Modify `nums1` in-place to be the merged sorted array. Example Input nums1 = [1, 2, 3, 0, 0, 0], m = 3 nums2 = [2, 5, 6], n = 3 Output nums1 = [1, 2, 2, 3, 5, 6] Input nums1 = [4, 5, 6, 0, 0, 0], m = 3 nums2 = [1, 2, 3], n = 3 Output nums1 = [1, 2, 3, 4, 5, 6]","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 as one sorted array in-place. # Indexes for nums1 and nums2 to start from the end of their respective initialized elements i, j, k = m - 1, n - 1, m + n - 1 # Merge in reverse order to utilize the buffer space at the end of nums1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 # If there are remaining elements in nums2, copy them while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1"},{"question":"Given an array `arr` of `n` integers, you are to find two values, `x` and `y`, such that `x` and `y` are the smallest and second smallest integers in the array respectively. If the array has less than two distinct values, return `-1` for both `x` and `y`. # Input Input is given from Standard Input in the following format: ``` n arr ``` - `n` is an integer representing the length of the array. - `arr` is a line of `n` integers separated by space each representing an integer in the array. # Output Print two integers `x` and `y`. If there are not enough distinct integers to find both smallest and second smallest, return `-1` for both `x` and `y`. # Example Input ``` 6 2 1 0 4 3 0 ``` # Example Output ``` 0 1 ``` # Example Input ``` 3 5 5 5 ``` # Example Output ``` -1 -1 ``` # Constraints - `1 leq n leq 10^5` - `-10^9 leq arr[i] leq 10^9` # Notes - Ensure the solution efficiently handles up to 100,000 elements.","solution":"def find_smallest_two(arr): Finds the smallest and second smallest integers in the list. Parameters: arr (list): List of integers. Returns: tuple: Contains the smallest and second smallest integers, or (-1, -1) if not applicable. if len(arr) < 2: return -1, -1 first_min, second_min = float(\'inf\'), float(\'inf\') for number in arr: if number < first_min: first_min, second_min = number, first_min elif first_min < number < second_min: second_min = number if second_min == float(\'inf\'): return -1, -1 return first_min, second_min"},{"question":"Tom, an ambitious programmer, is participating in a line stretching contest. The contest involves arranging a series of n points on a 2D plane such that the distance between the farthest pair of points is minimized. Tom wants to be efficient, so he decides to form a straight line with these points, ensuring they are collinear. Given a set of n distinct points with their coordinates on a 2D plane, help Tom determine the minimum possible \\"maximum distance\\" between any two points after arranging the points in a line. Input The first line of the input contains a single integer n (2 ≤ n ≤ 2000) — the number of points. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) — coordinates of the i-th point. Output Print the minimum possible \\"maximum distance\\" between any two points after arranging the points in a line with reference to Euclidean distance. Examples Input 3 0 0 2 3 4 6 Output 9 Input 4 1 1 2 2 3 3 10 10 Output 162 Input 5 1 2 3 4 5 6 7 8 9 10 Output 128","solution":"def min_max_distance(n, points): Returns the minimum possible \\"maximum distance\\" between any two points after arranging the points in a line. :param n: Integer, number of points :param points: List of tuples, where each tuple contains two integers (x, y) representing a point on the 2D plane :returns: Integer, the squared distance value x_coords = sorted([x for x, y in points]) y_coords = sorted([y for x, y in points]) max_x_dist = (x_coords[-1] - x_coords[0]) ** 2 max_y_dist = (y_coords[-1] - y_coords[0]) ** 2 return max(max_x_dist, max_y_dist)"},{"question":"You are developing a simple file management system to organize files based on their extensions. You need to write a program that categorizes a given list of files into three categories: images, videos, and documents. Each file has a name and an extension. The extensions signify the type of file it is. Here are the criteria: - Images: .jpg, .jpeg, .png, .gif - Videos: .mp4, .avi, .mov, .mkv - Documents: .pdf, .doc, .docx, .txt Your task is to output which category each file belongs to. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of files. The next n lines each contain a file name and its extension in the format \\"filename.extension\\". Output For each file, print its category: \\"Image\\", \\"Video\\", or \\"Document\\". If a file has an extension that doesn\'t match any of the three categories, print \\"Unknown\\". Examples Input 5 holiday.jpg resume.pdf movie.mp4 notes.txt archive.zip Output Image Document Video Document Unknown","solution":"def categorize_files(n, files): Categorizes the files based on their extensions. Parameters: n (int): The number of files. files (list of str): List of filenames with extensions. Returns: list of str: List of categories for each file. image_extensions = {\'.jpg\', \'.jpeg\', \'.png\', \'.gif\'} video_extensions = {\'.mp4\', \'.avi\', \'.mov\', \'.mkv\'} document_extensions = {\'.pdf\', \'.doc\', \'.docx\', \'.txt\'} categories = [] for file in files: _, extension = file.rsplit(\'.\', 1) if \'.\' + extension in image_extensions: categories.append(\\"Image\\") elif \'.\' + extension in video_extensions: categories.append(\\"Video\\") elif \'.\' + extension in document_extensions: categories.append(\\"Document\\") else: categories.append(\\"Unknown\\") return categories"},{"question":"You are given a grid of size n x n, where each cell contains a single integer. You need to perform a series of operations on the grid to maximize the sum of the integers on its border. The border of the grid consists of cells in the first row, last row, first column and last column. You are allowed to perform exactly u operations on the grid. In each operation, you can choose any 2 distinct cells in the grid and swap their values. After performing the u operations, return the maximum possible sum of the integers on the border of the grid. Input The first line contains two space-separated integers n and u (2 ≤ n ≤ 10, 0 ≤ u ≤ 100) — the size of the grid and the number of operations. Each of the next n lines contains n space-separated integers representing the grid. Each integer in the grid is between -1000 and 1000 inclusive. Output On a single line print the maximum possible sum of the integers on the border of the grid after exactly u operations. Examples Input 3 1 1 2 3 4 5 6 7 8 9 Output 33 Input 2 0 -1 -2 -3 -4 Output -10 Note In the first sample, with one operation, you can swap cell (2, 2) containing 5 with cell (1, 1) containing 1. The border sum becomes 2 + 5 + 3 + 6 + 9 + 8 + 7 + 4 = 44. In the second sample, no operations are allowed, so the border sum remains -1 + -2 + -4 + -3 = -10.","solution":"def max_border_sum(n, u, grid): Given a grid of size n x n and u operations allowed, returns the maximum sum of the integers on the border of the grid. def get_border_sum(g): Calculate the sum of border elements in the given grid g. total = 0 # Top row total += sum(g[0]) # Bottom row total += sum(g[-1]) # Left and right column (excluding already added corners) for row in g[1:-1]: total += row[0] + row[-1] return total # Collect all cells into list all_cells = [(grid[i][j], i, j) for i in range(n) for j in range(n)] # Sort cells by value all_cells.sort(reverse=True, key=lambda x: x[0]) # Collect all border cells border_cells = set() for i in range(n): border_cells.add((0, i)) border_cells.add((n-1, i)) for i in range(1, n-1): border_cells.add((i, 0)) border_cells.add((i, n-1)) # Start making better border by swapping curr_operations = 0 for val, i, j in all_cells: if curr_operations >= u: break if (i, j) not in border_cells: min_border = min([(grid[x][y], x, y) for x, y in border_cells], key=lambda x: x[0]) min_value, bi, bj = min_border if val > min_value: grid[bi][bj], grid[i][j] = grid[i][j], grid[bi][bj] curr_operations += 1 border_cells.remove((bi, bj)) border_cells.add((i, j)) return get_border_sum(grid)"},{"question":"In a far-off kingdom, there is a strange barter system in place, where residents trade in magical gems. Each resident has a certain number of gems of two types: emeralds and rubies. When two residents decide to trade, they can only trade if both have an equal number of gems to exchange. Given the number of residents and the number of emeralds and rubies each resident has, determine the maximum number of trades that can occur. A trade is defined as two residents exchanging gems such that the number of gems exchanged is equal. Input The first line of input contains an integer n (2 ≤ n ≤ 2·10^5) — the number of residents in the kingdom. The next n lines contain two integers each: ei and ri (0 ≤ ei, ri ≤ 10^4) — the number of emeralds and rubies the ith resident has. Output Output one integer — the maximum number of trades that can be made. Example Input 5 3 5 4 4 3 5 2 2 4 4 Output 3 Explanation In the example, the first and third residents can trade with each other (they both have 3 emeralds and 5 rubies). The second and fifth residents can also trade with each other (they both have 4 emeralds and 4 rubies). Finally, the fourth resident trades with themselves (having 2 emeralds and 2 rubies). Thus, the maximum number of trades is 3.","solution":"def max_trades(n, gems): from collections import Counter # Count the occurrences of each (emeralds, rubies) pair gems_count = Counter(gems) # The number of trades is the sum of counts of each pair return sum(gems_count.values())"},{"question":"You are given an array of positive integers. Your task is to find the maximum product of two integers in the array, then output the product and the positions (1-indexed) of the two integers in the original array. If there are multiple pairs with the maximum product, select the pair with the smallest indices. Input - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n space-separated positive integers a_i (1 ≤ a_i ≤ 10^6) — the elements of the array. Output - Print one line containing three integers: the maximum product, and the 1-indexed positions of the two integers that produce this product. If there are multiple pairs, output the one with the smallest indices. Examples Input 5 1 10 3 2 5 Output 50 2 5 Input 3 5 5 5 Output 25 1 2 Note In the first sample, the maximum product is 50 (10*5), and their positions are (2, 5). In the second sample, there are multiple pairs with the product 25 (5*5), but the pair with the smallest indices is (1, 2).","solution":"def max_product_positions(n, arr): Find the maximum product of two integers in the array and their 1-indexed positions. max_product = 0 pos1 = pos2 = -1 for i in range(n): for j in range(i + 1, n): product = arr[i] * arr[j] if product > max_product: max_product = product pos1, pos2 = i + 1, j + 1 return max_product, pos1, pos2 # Example usage: # n = 5 # arr = [1, 10, 3, 2, 5] # print(max_product_positions(n, arr)) # Output: (50, 2, 5)"},{"question":"Mike is a fan of cryptography and enjoys creating and solving puzzles. Recently, he came up with a new type of string transformation challenge called \\"Character Shift.\\" A character shift involves shifting each character in a string by a specified number of positions in the English alphabet. The alphabet wraps around, so shifting the character \'z\' by 1 would result in \'a\'. Uppercase and lowercase letters should be treated distinctly (i.e., \'A\' shifted by 1 becomes \'B\', and \'z\' shifted by 1 becomes \'a\'). Given an input string and a shift value, transform the input string by applying the character shift to each of its characters. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100) consisting of English letters and a non-negative integer k (0 ≤ k ≤ 100) — the shift value. Output For each test case, print the transformed string after applying the character shift. Example Input 3 Hello 1 World 2 aZy 3 Output Ifmmp Yqtnf dCb Explanation: 1. \\"Hello\\" shifted by 1 results in \\"Ifmmp\\". 2. \\"World\\" shifted by 2 results in \\"Yqtnf\\". 3. \\"aZy\\" shifted by 3 results in \\"dCb\\".","solution":"def character_shift(s, k): Shifts each character in the string s by k positions in the English alphabet. result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result) def process_test_cases(test_cases): Processes a list of test cases and returns the results. results = [] for s, k in test_cases: results.append(character_shift(s, k)) return results"},{"question":"You are given an array of `N` integers representing the amount of rainfall recorded over `N` days. There are also `Q` queries, where each query asks for the sum of rainfall recorded over a specific subarray of days. Write a function that processes these queries efficiently. **Input** Input is given from standard input and consists of the following: - An integer `N` (1 ≤ N ≤ 10^5 ), the number of days. - `N` integers: `r_1, r_2, ..., r_N` representing the amount of rainfall recorded on each of the `N` days. - An integer `Q` (1 ≤ Q ≤ 10^5), the number of queries. - `Q` pairs of integers `l_i, r_i` (1 ≤ l_i ≤ r_i ≤ N), representing the queries asking for the sum of rainfall from the l_i-th day to the r_i-th day, inclusive. **Output** For each query, output the sum of rainfall recorded over the specified subarray. **Example** ``` Input: 5 3 0 4 2 5 3 1 3 2 5 3 3 Output: 7 11 4 ``` **Explanation** In the given example, - The sum of rainfall from day 1 to day 3 is (3 + 0 + 4 = 7). - The sum of rainfall from day 2 to day 5 is (0 + 4 + 2 + 5 = 11). - The sum of rainfall on day 3 is (4).","solution":"def preprocess_rainfall_data(rainfall): Preprocess the rainfall data to compute prefix sums. N = len(rainfall) prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + rainfall[i - 1] return prefix_sums def query_rainfall_sum(prefix_sums, l, r): Return the sum of rainfall from day l to r (1-based index) using precomputed prefix sums. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(N, rainfall, queries): Process multiple queries efficiently after preprocessing the rainfall data. # Compute the prefix sums prefix_sums = preprocess_rainfall_data(rainfall) # Process each query and collect the results results = [] for l, r in queries: results.append(query_rainfall_sum(prefix_sums, l, r)) return results"},{"question":"In a distant kingdom, there is a rectangular farm of m x n grid cells. Each cell is either fertile or barren. A farmer wants to grow the maximum possible length of the same crop in a single continuous line vertically, horizontally, or diagonally on the fertile cells of his farm. You need to help the farmer find the maximum length of such a line of fertile cells. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 50), which are the dimensions of the farm. Each of the next m lines contains n characters, where each character is either \'F\' (denoting a fertile cell) or \'B\' (denoting a barren cell). Output Output a single integer, the maximum length of the continuous line of fertile cells in the farm. Example Input 5 6 FFBBFF FBFFBF BFFFFB FFFFBB FFBFFB Output 5 Explanation The longest line of fertile cells in the provided farm layout is of length 5. It is found in the third row.","solution":"def longest_fertile_line(m, n, grid): def search_direction(x, y, dx, dy): length = 0 while 0 <= x < m and 0 <= y < n and grid[x][y] == \'F\': length += 1 x += dx y += dy return length max_length = 0 for i in range(m): for j in range(n): if grid[i][j] == \'F\': max_length = max(max_length, search_direction(i, j, 1, 0)) # vertical down max_length = max(max_length, search_direction(i, j, 0, 1)) # horizontal right max_length = max(max_length, search_direction(i, j, 1, 1)) # diagonal down-right max_length = max(max_length, search_direction(i, j, 1, -1)) # diagonal down-left return max_length"},{"question":"A company has a line of item packaging machines arranged in a straight row. Each machine operates independently and can package one item per second. However, due to technical constraints, a machine may need to temporarily pause for cooling. Specifically, once a machine has worked for `x` consecutive seconds, it must rest for `y` seconds before it can resume packaging items. The company wants to know how many items each machine will have packaged after a given total time `t`. Assume that all machines start operating simultaneously from the very first second and that, initially, all machines have no cooling requirement. Input The first input line contains three integers `x`, `y`, and `m` (1 ≤ x, y, m ≤ 10^5), where `x` is the number of seconds a machine can package items consecutively before needing to cool, `y` is the number of seconds a machine must rest after reaching its working limit, and `m` is the number of Packaging Machines. The second input line contains a single integer `t` (1 ≤ t ≤ 10^9), representing the total time the machines have to package items. Output Output `m` integers in a single line, where the integer at the i-th position represents the number of items packaged by the i-th machine after time `t`. Examples Input 3 2 5 10 Output 6 6 6 6 6 Input 2 3 3 14 Output 6 6 6 Note In the first example, each machine can package items for 3 consecutive seconds and then has a 2-second cooling period. Given a total time of 10 seconds, each machine will have the following time pattern: `work-work-work-rest-rest-work-work-work-rest-rest`. Thus, each machine will package a total of 6 items in 10 seconds. In the second example, each machine packages for 2 seconds and rests for 3 seconds. Over 14 seconds, each machine follows this pattern: `work-work-rest-rest-rest-work-work-rest-rest-rest-work-work`. Hence, each machine will package 6 items in 14 seconds.","solution":"def compute_items_packaged(x, y, m, t): This function computes the number of items each machine will package after time t. :param x: int - number of seconds a machine can package items consecutively before needing to cool :param y: int - number of seconds a machine must rest after reaching its working limit :param m: int - number of packaging machines :param t: int - total time in seconds :return: list - a list of integers indicating the items packaged by each machine cycle_time = x + y # total duration of one work+rest cycle full_cycles = t // cycle_time # number of complete cycles in time t remaining_time = t % cycle_time # remaining time after complete cycles items_per_machine = full_cycles * x # items packaged in full cycles # add items packaged in the remaining time, ensuring it doesn\'t exceed x if remaining_time >= x: items_per_machine += x else: items_per_machine += remaining_time return [items_per_machine] * m"},{"question":"Write a program that simulates a robot collecting items in a grid. The robot starts at the top-left corner of a grid consisting of M rows and N columns (0-indexed). The robot can move right, down, left, or up, but cannot visit the same cell twice. Some cells are impassable, meaning the robot cannot enter those cells. The goal is for the robot to collect all the items in the grid. Write a program that reads the dimensions of the grid, the positions of the items, and the impassable cells, and determines if the robot can collect all items and returns true if it is possible, otherwise false. Constraints * 2 ≤ M, N ≤ 10 * The total number of items will not exceed 10 * Impassable cells and cells containing items are given Input The first line contains two integers, M and N, representing the number of rows and columns, respectively. The second line contains an integer I, representing the number of items. Each of the next I lines contains two integers (x, y), the coordinates of a cell containing an item. Next line contains an integer P, representing the number of impassable cells. Each of the next P lines contains two integers (x, y), the coordinates of an impassable cell. Output Output \\"true\\" if the robot can collect all items without revisiting cells and avoiding impassable cells. Otherwise, output \\"false\\". Example Input 5 5 3 0 1 2 2 4 4 2 1 1 3 3 Output true","solution":"def can_collect_all_items(M, N, item_positions, impassable_positions): from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0) items = set(item_positions) impassables = set(impassable_positions) if start in impassables: return False grid = [[\'.\' for _ in range(N)] for _ in range(M)] for (x, y) in items: grid[x][y] = \'I\' for (x, y) in impassables: grid[x][y] = \'#\' def bfs(start): queue = deque([start]) visited = set() visited.add(start) item_count = 0 while queue: x, y = queue.popleft() if (x, y) in items: items.remove((x, y)) # Item collected item_count += 1 if item_count == len(item_positions): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and (nx, ny) not in impassables: visited.add((nx, ny)) queue.append((nx, ny)) return item_count == len(item_positions) return bfs(start)"},{"question":"Create a function `process_input` that takes a list of integers as input and processes each integer according to specific rules. For each integer `x`: 1. If `x` is between -50 and -1, inclusive, subtract the integer from 100. 2. If `x` is 0, replace it with the string \\"ZERO\\". 3. If `x` is between 1 and 50, inclusive, multiply the integer by 2. 4. Otherwise, leave the integer unchanged. The function should return a list with the processed integers. Input - A list of integers. Each integer is between -100 and 100, inclusive. Output - A list containing the processed integers according to the rules specified. Example ```python Input [-60, -20, 0, 25, 80] Output [-60, 120, \'ZERO\', 50, 80] ``` Note: Do not modify the input directly. Create a new list with the processed integers instead.","solution":"def process_input(lst): Processes a list of integers according to specific rules: 1. If x is between -50 and -1, inclusive, subtract the integer from 100. 2. If x is 0, replace it with the string \\"ZERO\\". 3. If x is between 1 and 50, inclusive, multiply the integer by 2. 4. Otherwise, leave the integer unchanged. Args: lst (list of int): List of integers to be processed. Returns: list: A list with the processed integers. result = [] for x in lst: if -50 <= x <= -1: result.append(100 - x) elif x == 0: result.append(\\"ZERO\\") elif 1 <= x <= 50: result.append(x * 2) else: result.append(x) return result"},{"question":"Sara is working on summarizing daily stock prices. She knows the stock prices for each of the last n days. Assume that each day\'s stock price is an integer. Sara believes that if the stock prices form a geometric progression, then the stock price for the (n + 1)-th day will be the next term of the geometric progression. Otherwise, the stock price of the (n + 1)-th day will be the same as the stock price on the n-th day. A sequence of numbers forms a geometric progression if the ratio between any two consecutive terms is constant. Your task is to help Sara predict the stock price for the next day. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of days for which the stock prices are known. The second line contains a sequence of integers p1, p2, ..., pn ( 1 ≤ pi ≤ 10^6) — where pi is the stock price on the i-th day. Output Print the stock price for the (n + 1)-th day, which Sara predicts according to her method. Examples Input 4 2 4 8 16 Output 32 Input 3 5 5 5 Output 5 Input 3 3 9 81 Output 81 Note In the first example, the sequence of stock prices forms a geometric progression where the first term is 2 and the ratio between consecutive terms is 2. Thus, the predicted stock price for the fifth day is 16 * 2 = 32. In the second example, the sequence of stock prices forms a geometric progression where the ratio is 1. Therefore, the predicted stock price for the fourth day is 5. In the third example, the sequence of stock prices does not form a geometric progression (the ratio is not constant), so the stock price of the fourth day equals the stock price of the third day, which is 81.","solution":"def predict_next_stock_price(n, prices): Predicts the next stock price based on the given prices. Parameters: - n (int): The number of days for which the stock prices are known. - prices (list of int): The stock prices for each of the last n days. Returns: - int: The predicted stock price for the (n + 1)-th day. if n < 2: raise ValueError(\\"There should be at least 2 days of stock prices to determine the progression.\\") # Find the common ratio by dividing the second price by the first price ratio = prices[1] / prices[0] # Check if all consecutive terms follow the same ratio for i in range(1, n): if prices[i] / prices[i - 1] != ratio: return prices[-1] return prices[-1] * ratio"},{"question":"Given a list of integers and a target integer, determine the number of unique quadruplets (four elements) in the list that sum up to the target integer. Each quadruplet should be sorted in non-descending order, and the list of quadruplets that you print should be sorted lexicographically. Input The first line contains an integer n (1 ≤ n ≤ 200), representing the number of elements in the list. The second line contains n integers, each between -10^9 and 10^9, representing the elements in the list. The third line contains the target integer. Output Display the number of unique quadruplets and the list of quadruplets, each quadruplet on a new line. Example Input 6 1 0 -1 0 -2 2 0 Output 3 -2 -1 1 2 -2 0 0 2 -1 0 0 1 Input 5 1 1 1 1 1 4 Output 1 1 1 1 1","solution":"def find_quadruplets(nums, target): Returns the number of unique quadruplets that sum to the target and the unique quadruplets. Args: nums - List of integers. target - Target sum Returns: A tuple (number of unique quadruplets, list of quadruplets) nums.sort() result = set() n = len(nums) for i in range(n): for j in range(i + 1, n): left = j + 1 right = n - 1 while left < right: summation = nums[i] + nums[j] + nums[left] + nums[right] if summation == target: result.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif summation < target: left += 1 else: right -= 1 sorted_result = sorted(result) return len(sorted_result), sorted_result"},{"question":"Petya loves interesting number sequences. We define an \\"interesting sequence\\" as a sequence that consists of positive integers where each digit, when reversed in order, forms a sequence that contains only the digits 1 and 0. For example, sequences like 110, 101, and 10001 are interesting, whereas sequences like 120, 30, and 10012 are not. Petya is given a number consisting of n digits without leading zeroes. He wants to reverse the digits and check whether the resulting sequence qualifies as an interesting sequence. He needs your help to determine the result. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of digits in the number. The second line contains n digits without spaces representing the number. Output In a single line, print \\"YES\\" if the reversed sequence is an interesting sequence, otherwise print \\"NO\\". Examples Input 5 10100 Output YES Input 3 123 Output NO Note In the first sample, reversing the number 10100 gives 00101, which is an interesting sequence as it contains only the digits 1 and 0. In the second sample, reversing the number 123 gives 321, which is not an interesting sequence as it contains digits other than 1 and 0.","solution":"def is_interesting_sequence(n, num_str): Determines if the reversed sequence of the given number is interesting. Parameters: n (int): Number of digits in the number. num_str (str): The number as a string of digits. Returns: str: \\"YES\\" if the reversed sequence is interesting, else \\"NO\\". reversed_num_str = num_str[::-1] for digit in reversed_num_str: if digit != \'0\' and digit != \'1\': return \\"NO\\" return \\"YES\\""},{"question":"There are n travelers at an airport, each with a suitcase of a given weight. The travelers need to board a flight, but there are strict rules regarding the weight load allowed on the shuttle bus that transports them from the terminal to the aircraft. The shuttle bus can carry up to a maximum weight of W, but with an added constraint that no more than K travelers can ride the shuttle bus at once. Help the airport authorities determine the minimum number of trips required to transport all travelers to the aircraft, respecting both the maximum weight and the maximum number of travelers per trip. Input The first line contains two integers n and W (1 ≤ n ≤ 5000, 1 ≤ W ≤ 109) — the number of travelers and the maximum weight the shuttle bus can carry. The second line contains an integer K (1 ≤ K ≤ n) — the maximum number of travelers per trip. The third line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 109) — the weight of each traveler\'s suitcase. Output Print the minimum possible number of trips needed to transport all travelers. Examples Input 5 10 2 3 8 4 5 6 Output 4 Input 4 12 3 5 3 6 4 Output 2 Note In the first example, the minimum number of trips is 4. Possible trips: 1. Traveler 1 alone with a weight of 3 2. Traveler 2 alone with a weight of 8 3. Travelers 3 and 5 with a combined weight of 4 + 6 = 10 4. Traveler 4 alone with a weight of 5 In the second example, the minimum number of trips is 2. Possible trips: 1. Travelers 1, 2, and 4 with a combined weight of 5 + 3 + 4 = 12 2. Traveler 3 alone with a weight of 6","solution":"def minimum_trips(n, W, K, weights): # Sort weights in descending order to try and fill the bus as much as possible weights.sort(reverse=True) trips = 0 i = 0 while i < n: current_trip_weight = 0 current_trip_count = 0 while i < n and current_trip_count < K and current_trip_weight + weights[i] <= W: current_trip_weight += weights[i] current_trip_count += 1 i += 1 trips += 1 return trips"},{"question":"A digital company is organizing a contest for coding enthusiasts. Each participant is tasked with writing a program that determines the longest subarray where the number of even integers is equal to the number of odd integers. You\'ve been invited to participate, and now it\'s your turn to solve this problem. You are given an array of integers. Your goal is to find the length of the longest contiguous subarray in which the number of even integers is equal to the number of odd integers. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. Output: For each test case, output a single integer representing the length of the longest subarray with an equal number of even and odd integers. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 10000 -100000 ≤ Array elements ≤ 100000 Example Input: 2 6 1 2 3 4 5 6 5 1 1 1 2 2 Output: 6 4 Explanation: Example case 1. The array is [1, 2, 3, 4, 5, 6]. The longest subarray where the number of even and odd integers is equal is the whole array itself [1, 2, 3, 4, 5, 6], hence the output is 6. Example case 2. The array is [1, 1, 1, 2, 2]. One possible subarray where the number of even and odd integers is equal is [1, 1, 2, 2], hence the output is 4.","solution":"def find_longest_equal_even_odd_subarray(test_cases): results = [] for case in test_cases: N, arr = case balance = 0 max_len = 0 balance_map = {0: -1} for i in range(N): if arr[i] % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_map: max_len = max(max_len, i - balance_map[balance]) else: balance_map[balance] = i results.append(max_len) return results # Example usage # T = 2 (number of test cases) # First test case: N = 6, array = [1, 2, 3, 4, 5, 6] # Second test case: N = 5, array = [1, 1, 1, 2, 2] # Output should be: [6, 4] test_cases = [ (6, [1, 2, 3, 4, 5, 6]), (5, [1, 1, 1, 2, 2]), ] print(find_longest_equal_even_odd_subarray(test_cases))"},{"question":"Alice is organizing a charity marathon and she needs to register participants into different running groups based on their estimated completion times. Each group should have runners whose estimated completion times are within a given threshold of each other. To simplify, she only considers grouping runners whose estimated times differ by at most a specified threshold. Your task is to help Alice by writing a program that determines the minimum number of groups required to accommodate all participants. Input The input consists of several data sets. The first line of each data set contains two integers, N (1 ≤ N ≤ 1,000), which is the number of participants, and T (1 ≤ T ≤ 100), which is the maximum threshold for the differences in estimated completion times. The second line contains N integers, each representing an estimated completion time of a participant. The input is terminated by a line containing two zeros, which should not be processed. Output For each data set, print a line containing the minimum number of groups required. Example Input 5 3 8 12 6 14 11 4 2 1 3 5 7 0 0 Output 2 2","solution":"def min_number_of_groups(n, t, times): if n == 0: return 0 # Sort the estimated times times.sort() # Initialize the group count groups = 1 # First runner\'s estimated completion time in the current group start_time = times[0] for time in times[1:]: if time - start_time > t: # Start a new group groups += 1 start_time = time return groups def process_input(data): result = [] for entry in data: n, t, times = entry if n == 0 and t == 0: break result.append(min_number_of_groups(n, t, times)) return result"},{"question":"A company\'s internal service generates logs for user activities that consist of start and end times of user sessions. You need to determine and print the periods during which at least one user was active. Input: The first line of the input contains an integer, n, which denotes the number of log entries. Then, n lines follow, each containing two integers, start and end, which represent the start time and end time of a user session (inclusive), in the form of [start, end]. All times are given in minutes from the start of the day (0 to 1439). Output: The output contains periods in the form of [start1, end1], [start2, end2],..., denoting the periods during which at least one user was active. Merge overlapping periods. Constraints: 1 ≤ n ≤ 100000 0 ≤ start < end ≤ 1439 SAMPLE INPUT 3 1 5 2 6 8 10 SAMPLE OUTPUT [1, 6] [8, 10] Explanation Test Case #1: The first period is [1, 5] and the second period is [2, 6]. Since [2, 6] overlaps with [1, 5], these periods are merged to give [1, 6]. The third period [8, 10] does not overlap with previous periods, so it remains as is.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of condensed intervals. if not intervals: return [] # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or the current interval does not overlap with the previous one, append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the current and previous intervals. merged[-1][1] = max(merged[-1][1], interval[1]) return merged def get_active_periods(logs): return merge_intervals(logs) # Sample input n = 3 logs = [[1, 5], [2, 6], [8, 10]] print(get_active_periods(logs)) # Expected output: [[1, 6], [8, 10]]"},{"question":"In a grid-based game, each cell in the grid represents a path that can either be a clear path (represented by \'.\') or an obstacle (represented by \'#\'). The player\'s task is to move from the top-left corner of the grid to the bottom-right corner. The player can only move right or down. Your task is to determine the number of distinct paths from the top-left corner to the bottom-right corner, avoiding obstacles. Input: First line contains an integer T - number of test cases. For each test case, the first line contains two integers n and m - the dimensions of the grid (number of rows and columns respectively). The next n lines contain m characters each, representing the grid. Output: For each test case, print the number of distinct paths from the top-left corner to the bottom-right corner. If there is no such path, print 0. Constraints: 1 ≤ T ≤ 10 1 ≤ n, m ≤ 10 The grid will always have a clear path at the top-left and bottom-right corners. Sample tests explanation: SAMPLE INPUT 2 3 3 . . . . # . . . . 2 2 . # # . SAMPLE OUTPUT 2 0 In the first test case, there are two distinct paths: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) In the second test case, there is no path from (0, 0) to (1, 1) as there is an obstacle blocking the way.","solution":"def number_of_paths(grid, n, m): # If the starting or ending point is an obstacle if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def distinct_paths(test_cases): results = [] for case in test_cases: n, m, grid = case result = number_of_paths(grid, n, m) results.append(result) return results"},{"question":"In a peaceful village surrounded by mountains, the villagers rely on a water distribution system that comprises a series of reservoirs and pipes. You are given the layout of this water distribution system in the form of a graph, where nodes represent reservoirs, and edges represent pipes connecting these reservoirs. Each pipe has a certain capacity, which denotes the maximum amount of water that can flow through it per unit time. The villagers are interested in knowing the maximum amount of water that can be delivered from their main reservoir, located at node 1, to their most distant reservoir. You need to determine this maximum water flow using the Ford-Fulkerson algorithm, implementing the Edmonds-Karp approach. Input The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ 10^4) - the number of reservoirs and pipes respectively. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 10^9) - indicating that there is a pipe between the reservoirs u and v with capacity c. Output Output a single integer - the maximum flow from the main reservoir (node 1) to the most distant reservoir (node n). Example Input 4 5 1 2 100 1 3 100 2 3 1 2 4 100 3 4 100 Output 200 Explanation: In the given example, there are two paths from reservoir 1 to reservoir 4: - Path 1 -> 2 -> 4 with capacity 100 (bottle-neck of the path) - Path 1 -> 3 -> 4 with capacity 100 (bottle-neck of the path) Hence, the maximum flow from reservoir 1 to reservoir 4 is 100 + 100 = 200","solution":"from collections import deque def bfs(C, F, source, sink, parent): Perform Breadth-First Search to find an augmenting path. visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in range(len(C)): if v not in visited and C[u][v] - F[u][v] > 0: # there\'s an available capacity queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(C, source, sink): Runs the Edmonds-Karp (Ford-Fulkerson) algorithm to find the maximum flow in the given network. n = len(C) F = [[0] * n for _ in range(n)] # initial flow is 0 for all edges parent = [-1] * n max_flow = 0 while bfs(C, F, source, sink, parent): # Find the maximum flow through the path found by BFS path_flow = float(\\"Inf\\") s = sink while s != source: path_flow = min(path_flow, C[parent[s]][s] - F[parent[s]][s]) s = parent[s] # update residual capacities of the edges and reverse edges v = sink while v != source: u = parent[v] F[u][v] += path_flow F[v][u] -= path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(n, m, pipes): Calculates maximum water flow from reservoir 1 to reservoir n using the Edmonds-Karp algorithm. C = [[0] * n for _ in range(n)] for u, v, c in pipes: C[u-1][v-1] += c # Adjust for 0-based indexing source = 0 # Reservoir 1 (0 in 0-based index) sink = n - 1 # Reservoir n (n-1 in 0-based index) return edmonds_karp(C, source, sink) # Example usage: # max_water_flow(4, 5, [(1, 2, 100), (1, 3, 100), (2, 3, 1), (2, 4, 100), (3, 4, 100)]) # should output 200"},{"question":"In the land of Zahlberg, there\'s a labyrinth with N rooms connected by M corridors. Each room is numbered from 1 to N, and each corridor connects two different rooms bidirectionally. The labyrinth\'s layout can be represented as an undirected graph where rooms are vertices and corridors are edges. The King of Zahlberg decided to place guards in some rooms. If a guard is placed in a room, it ensures the room is protected. Additionally, the two rooms connected by any corridor both need to be protected. The King wants to minimize the number of guards while ensuring the entire labyrinth is protected. Given the number of rooms and the corridors connecting them, determine the minimum number of guards needed to protect all rooms according to the King\'s rule. Constraints * 1 ≤ N ≤ 1000 * 0 ≤ M ≤ 2000 * 1 ≤ a_i ≠ b_i ≤ N * There are no multiple corridors between the same pair of rooms. Input The input is given from Standard Input in the following format: ``` N M a_1 b_1 a_2 b_2 ... a_M b_M ``` Where each a_i and b_i denotes a corridor connecting rooms a_i and b_i. Output Print the minimum number of guards required to ensure all rooms and all corridors connecting the rooms are protected. Examples Input ``` 5 4 1 2 1 3 3 4 4 5 ``` Output 2 Input ``` 3 2 1 2 2 3 ``` Output 1 Input ``` 4 0 ``` Output 0","solution":"def min_guards(N, M, corridors): from collections import defaultdict graph = defaultdict(list) for a, b in corridors: graph[a].append(b) graph[b].append(a) visited = set() guards = 0 for u in range(1, N + 1): if u not in visited and u in graph: for v in graph[u]: if v not in visited: visited.add(u) visited.add(v) guards += 1 break return guards"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid either contains a wall (#) or is empty (.). Elmo, starting from the top-left corner of the grid (1, 1), wants to reach the bottom-right corner of the grid (R, C) by moving only to adjacent cells, either right or down. Elmo cannot pass through walls. Determine the number of different paths Elmo can take to reach the bottom-right corner of the grid. Since the number of paths could be very large, compute the result modulo 10^9+7. Constraints * 1 leq R, C leq 1000 Input Input is given from Standard Input in the following format: R C followed by R lines, each containing C characters that represent the grid. Output Print the number of different paths Elmo can take to reach the bottom-right corner of the grid, modulo 10^9+7. If there is no valid path, print 0. Example Input 3 3 ... .#. ... Output 2 Input 3 3 ... .#. .#. Output 1","solution":"def elmo_path_count(R, C, grid): MOD = 10**9 + 7 if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return 0 dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for r in range(R): for c in range(C): if grid[r][c] == \'#\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] dp[r][c] %= MOD return dp[R-1][C-1] def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = data[2:] result = elmo_path_count(R, C, grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice is exploring different graph algorithms and has recently learned about Depth First Search (DFS). She decides to write some code to traverse a given directed graph and find out if there are any cycles within it. Alice knows that a graph contains a cycle if, during the DFS traversal, she encounters a vertex that has already been visited from the current path of the traversal. Alice\'s code for DFS traversal and cycle detection is given below. ```python def dfs(graph, v, visited, rec_stack): visited[v] = True rec_stack[v] = True # Recur for all neighbors of v for neighbor in graph[v]: if not visited[neighbor]: if dfs(graph, neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False def has_cycle(graph, n): visited = [False] * n rec_stack = [False] * n for node in range(n): if not visited[node]: if dfs(graph, node, visited, rec_stack): return True return False ``` Can you help Alice by providing the input to build the graph and then determine if there is a cycle within it? If there is a cycle, print \\"Cycle Detected\\". If there is no cycle, print \\"No Cycle Detected\\". Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of vertices and the number of edges in the graph. The following m lines contain pairs of integers u and v (1 ≤ u, v ≤ n), each representing a directed edge from vertex u to vertex v. Output Print \\"Cycle Detected\\" if there is a cycle in the graph. Otherwise, print \\"No Cycle Detected\\". Examples Input 4 4 1 2 2 3 3 4 4 2 Output Cycle Detected Input 3 2 1 2 2 3 Output No Cycle Detected","solution":"def dfs(graph, v, visited, rec_stack): visited[v] = True rec_stack[v] = True # Recur for all neighbors of v for neighbor in graph[v]: if not visited[neighbor]: if dfs(graph, neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False def has_cycle(graph, n): visited = [False] * n rec_stack = [False] * n for node in range(n): if not visited[node]: if dfs(graph, node, visited, rec_stack): return True return False def detect_cycle(n, m, edges): graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) if has_cycle(graph, n): return \\"Cycle Detected\\" else: return \\"No Cycle Detected\\""},{"question":"An online store wants to analyze its sales data to gain insights into customer buying habits. One useful analysis involves determining the best-selling product within a specified time frame. You are tasked with writing a program that processes a list of sales transactions and identifies the product with the highest sales for a given date range. Each transaction in the sales data consists of the following information: - Product name (a string of lowercase English letters and digits) - Quantity sold (an integer) - Date of transaction (in the format \\"YYYY-MM-DD\\") The sales data and the date range for analysis will be provided as inputs. Your program should: 1. Parse the sales data and store it in a suitable data structure. 2. Filter the transactions that occur within the specified date range (inclusive). 3. Calculate the total quantity sold for each product within the filtered data. 4. Identify the product with the highest total quantity sold. 5. Handle ties by selecting the product that comes first lexicographically. Input The first line contains an integer n (1 ≤ n ≤ 1000), which represents the number of sales transactions. The following n lines each contain a transaction, consisting of the product name, the quantity sold, and the date, separated by a space. The next line contains the start date and end date of the range, separated by a space. Output Print the name of the best-selling product within the specified date range. Example Input 5 apple 10 2023-10-01 banana 5 2023-10-03 apple 15 2023-10-02 orange 20 2023-10-05 banana 20 2023-10-01 2023-10-01 2023-10-03 Output apple Explanation - The transactions within the date range \\"2023-10-01\\" to \\"2023-10-03\\" are: - apple 10 2023-10-01 - banana 5 2023-10-03 - apple 15 2023-10-02 - banana 20 2023-10-01 - Apple has a total quantity sold of 25, while banana has a total quantity sold of 25. - Since there\'s a tie, the lexicographically smaller product name (\\"apple\\") is selected as the best-selling product.","solution":"def best_selling_product(n, transactions, start_date, end_date): from datetime import datetime start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") sales = {} for transaction in transactions: product, quantity, date = transaction.split() date = datetime.strptime(date, \\"%Y-%m-%d\\") quantity = int(quantity) if start_date <= date <= end_date: if product in sales: sales[product] += quantity else: sales[product] = quantity max_sales = -1 best_product = None for product, quantity in sales.items(): if quantity > max_sales or (quantity == max_sales and product < best_product): max_sales = quantity best_product = product return best_product"},{"question":"You are given a string and a list of word pairs. Each word pair consists of a synonym and an antonym of the word. Your task is to replace synonyms and antonyms in the string according to the provided list of word pairs. If a word in the string has a synonym in the list, replace it with the synonym. If it has an antonym, replace it with the antonym. In case a word has both a synonym and an antonym in the list, prioritize the synonym replacement. # Constraint * The string length does not exceed 200 characters. * The word pairs list contains at most 100 pairs. * Each word in the word pairs list consists only of lowercase English letters. * Word length does not exceed 20 characters. * The words in the string are separated by single spaces. * Words and their replacements in the word pairs list are unique within their list. # Input The input is given from Standard Input in the following format: ``` a string of words separated by spaces number_of_pairs synonym1 antonym1 synonym2 antonym2 ... synonymN antonymN ``` # Output Print the string with all applicable replacements. # Examples Input ``` the weather is pleasant and fine 3 pleasant good fine bad is be ``` Output ``` the weather be good and bad ``` Input ``` it is a sunny day 2 sunny bright is was ``` Output ``` it was a bright day ``` Input ``` dark and gloomy night 2 dark dim gloomy cheerful ``` Output ``` dim and cheerful night ```","solution":"def replace_words(text, pairs_count, pairs): synonym_map = {} antonym_map = {} for pair in pairs: synonym, antonym = pair.split() synonym_map[synonym] = antonym antonym_map[antonym] = synonym words = text.split() for i, word in enumerate(words): if word in synonym_map: words[i] = synonym_map[word] elif word in antonym_map: words[i] = antonym_map[word] return \' \'.join(words) # Parsing input when using the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split(\'n\') text = data[0] pairs_count = int(data[1]) pairs = data[2:pairs_count + 2] print(replace_words(text, pairs_count, pairs))"},{"question":"In a quiet town, there is a one-way circular track that connects several important landmarks. The town has decided to deploy a new shuttle service that will start from one of these landmarks and service all other landmarks in a single loop. The distance between landmarks is provided in the form of a matrix, where the element `dist[i][j]` represents the distance from landmark `i` to landmark `j`. Notice that since it\'s a one-way circular track, the distance from `i` to `j` may not necessarily be the same as from `j` to `i`. Write a program that determines the shortest route to visit all landmarks starting and ending at the city center, which is always landmark 0. Input The first line of the input contains an integer `n` (2 ≤ n ≤ 16) – the number of landmarks in the town including the city center. The following `n` lines contain `n` integers each, representing the distance matrix `dist` (0 ≤ dist[i][j] ≤ 1000). It is guaranteed that `dist[i][i]` is 0 for all `i`. Output Print a single integer — the minimum distance the shuttle must travel to visit all landmarks and return to the city center. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Note In this example, the shuttle can take the following route to achieve the minimum distance: `0 -> 1 -> 3 -> 2 -> 0`. The total distance covered would be 10 + 25 + 30 + 15 = 80.","solution":"from itertools import permutations def shortest_route(n, dist): This function calculates the shortest route to visit all landmarks starting and ending at landmark 0 using the Travelling Salesman Problem (TSP) approach. landmarks = list(range(1, n)) # landmarks excluding the starting point 0 min_distance = float(\'inf\') for perm in permutations(landmarks): current_distance = dist[0][perm[0]] # start from landmark 0 for i in range(len(perm) - 1): current_distance += dist[perm[i]][perm[i+1]] current_distance += dist[perm[-1]][0] # return to landmark 0 min_distance = min(min_distance, current_distance) return min_distance # To be called with input def calculate_min_distance(n, dist): return shortest_route(n, dist)"},{"question":"Penguin jumble puzzle. A penguin is sitting on a square grid of cells, where each cell can either be \'P\' (empty cell where the penguin can move), \'X\' (an obstacle the penguin can\'t pass through), or \'F\' (a fish that the penguin can catch). The penguin starts at the top-left corner of the grid (0, 0) and needs to reach the fish located at the bottom-right corner of the grid. The penguin can move up, down, left, or right, but cannot pass through obstacles. Write a program to determine the minimum number of moves required for the penguin to catch the fish. If it is not possible for the penguin to reach the fish, return -1. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case starts with two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Output For each test case, print the minimum number of moves required for the penguin to catch the fish, or -1 if it is not possible. Example Input 2 3 3 PXP PXP PPF 4 4 PXPP PXXP PXXP PXXF Output 4 -1","solution":"from collections import deque def min_moves_to_catch_fish(t, test_cases): def bfs(grid, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if grid[x][y] == \'F\': return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'X\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 results = [] for i in range(t): n, m = test_cases[i][0] grid = test_cases[i][1] result = bfs(grid, n, m) results.append(result) return results # Example usage: t = 2 test_cases = [ ((3, 3), [\'PXP\', \'PXP\', \'PPF\']), ((4, 4), [\'PXPP\', \'PXXP\', \'PXXP\', \'PXXF\']) ] print(min_moves_to_catch_fish(t, test_cases)) # Output: [4, -1]"},{"question":"You are given a string that contains only digits (0-9) and characters \'*\' and \'#\'. Your task is to determine the number of times the characters \'*\' and \'#\' alternate in the string such that each time they alternate, there is at least one digit between them. Input The first and only line of the input contains a string that only consists of characters \'0\'-\'9\', \'*\', and \'#\'. The length of the string does not exceed 1 000 000. Output Print the number of times the characters \'*\' and \'#\' alternate with at least one digit between them. Example Input 1*23#456*789#0 Output 3 Input 123456789 Output 0","solution":"def count_alternating_symbols(s): count = 0 prev_symbol = None digits_between = False for char in s: if char.isdigit(): digits_between = True elif char == \'*\' or char == \'#\': if prev_symbol and char != prev_symbol and digits_between: count += 1 digits_between = False # reset the flag as we found a valid alternation prev_symbol = char return count"},{"question":"You are developing a text editor and want to implement a feature that can smartly reformat a given document. Your task is to break the document text into lines of words such that each line has a specified maximum length, and the space between words in each line is exactly one space. However, you must also ensure that no words are split between lines. Write a function that splits the given text into lines such that each line has a length not exceeding a given maximum. Input The first line of the input contains an integer `n` — the maximum length of each line (1 ≤ n ≤ 100). The second line contains a single string `text` — the document text consisting of lowercase English letters and spaces (1 ≤ |text| ≤ 10⁵). No words in `text` exceed the length `n`. Output Print the reformatted document where each line does not exceed the maximum length and words are not split between lines. Example Input 10 the quick brown fox jumps over the lazy dog Output the quick brown fox jumps over the lazy dog","solution":"def reformat_document(n, text): Reformat the document text such that each line has a length not exceeding n and words are not split between lines. words = text.split() lines = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > n: lines.append(\' \'.join(current_line)) current_line = [word] current_length = len(word) else: current_line.append(word) current_length += len(word) if current_line: lines.append(\' \'.join(current_line)) return \'n\'.join(lines)"},{"question":"Polycarp has `n` coins aligned in a row, each coin either showing heads (H) or tails (T). He can perform the following operation as many times as needed: Choose any subsegment of consecutive coins and flip all the coins in it (change heads to tails and tails to heads in that subsegment). The objective is to make all the coins show the same side (either all heads or all tails) using a minimum number of operations. Your task is to determine the minimum number of such operations required to achieve this goal. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of coins. The second line contains a string of `n` characters, each character being either \'H\' (representing heads) or \'T\' (representing tails). # Output Print a single integer — the minimum number of operations required. # Examples Input ``` 5 HTHTH ``` Output ``` 2 ``` Input ``` 3 HHH ``` Output ``` 0 ``` Input ``` 6 TTHTTT ``` Output ``` 1 ``` # Note In the first sample, flipping the second and third coins together changes the string to \\"HHHHT\\". Flipping the fourth coin alone makes all coins heads \\"HHHHH\\". In the second sample, all coins are already heads, so no operations are needed. In the third sample, flipping the third and fourth coins together will yield \\"TTTTTT\\".","solution":"def min_operations_to_unify_coins(n, coins): # The goal is to find the minimum number of segments we need to flip to make all coins the same side. # Count the number of transitions between \'H\' and \'T\' transitions = 0 for i in range(1, n): if coins[i] != coins[i-1]: transitions += 1 # Each transition means there\'s a segment that needs to be flipped # For example, \\"HTTHTH\\" has transitions: H -> T, T -> H, H -> T, T -> H # The minimum number of flips required are the transitions divided by 2 (as each transition can be covered by one segment flip) return (transitions + 1) // 2"},{"question":"William recently started his own farm and he decided to grow a special type of crop that needs a very specific watering pattern. Each crop must be watered exactly once every k days. Given the number of crops and their different watering intervals, help William create a watering schedule that ensures each crop is watered correctly. You are given the number of crops `n`, followed by an array of integers representing the watering intervals for each crop. The objective is to determine the minimum number of days needed to water all the crops correctly at least once. Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) - the number of crops. - The second line contains `n` space-separated integers where the i-th integer represents the watering interval `ai` (1 ≤ ai ≤ 10^9) of the i-th crop. Output - Print a single integer which is the minimum number of days needed to ensure each crop is watered at least once according to its watering interval. Examples Input 3 3 7 14 Output 42 Input 4 4 8 6 12 Output 24 Note In the first example, the minimum number of days needed is 42 because 42 is the least common multiple (LCM) of the intervals 3, 7, and 14. In the second example, the minimum number of days needed is 24 because 24 is the LCM of 4, 8, 6, and 12.","solution":"import math from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return a * b // math.gcd(a, b) def min_watering_days(n, intervals): Returns the minimum number of days needed to ensure each crop is watered at least once. return reduce(lcm, intervals) # Example usage: # n = 3 # intervals = [3, 7, 14] # print(min_watering_days(n, intervals)) # Output: 42"},{"question":"In a faraway galaxy, there is a planet where each inhabitant is identified by a unique number. Unfortunately, a recent data breach resulted in the loss of some vital identification segments, and now the inhabitants are faced with a major problem. Given a list of positive integers representing the unique identifiers, they wish to determine if there are two different identifiers in the list whose sum equals a given value. Your task is to write a function to solve this problem. Function Signature: `def has_pair_with_sum(numbers: List[int], target_sum: int) -> str:` Input: - The first line of input contains an integer t, the number of test cases. The description of t test cases follows. - For each test case: - The first line contains two integers n and target_sum, where n is the number of identifiers and target_sum is the required sum. - The second line contains n space-separated integers representing the identifiers. Output: - For each test case, output \\"YES\\" if there exist two distinct identifiers whose sum is equal to target_sum, otherwise print \\"NO\\". Constraints: - 1 ≤ t ≤ 10^5 - 2 ≤ n ≤ 10^6 - 1 ≤ identifiers[i] ≤ 10^9 - 1 ≤ target_sum ≤ 2 * 10^9 Example: Input: 2 5 9 2 7 11 15 1 4 8 1 2 4 4 Output: YES YES","solution":"from typing import List def has_pair_with_sum(numbers: List[int], target_sum: int) -> str: seen_numbers = set() for num in numbers: if target_sum - num in seen_numbers: return \\"YES\\" seen_numbers.add(num) return \\"NO\\" def process_test_cases(t: int, test_cases: List[tuple]) -> List[str]: results = [] for n, target_sum, numbers in test_cases: results.append(has_pair_with_sum(numbers, target_sum)) return results"},{"question":"You are given a binary tree, where each node contains an integer value. Implement a program that identifies the maximum depth (i.e., the longest path from the root node to a leaf) of the binary tree. A leaf is a node with no children. Input The input consists of a binary tree, defined in the following format: - The first line contains an integer n (0 ≤ n ≤ 10^4), the number of nodes in the tree. - Each of the next n lines describes a node as three integers: the value of the node, the value of the left child, and the value of the right child. If a node does not have a left or right child, the corresponding integer will be -1. Output Print the maximum depth of the binary tree. Example Input: 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output: 3 Explanation The tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` The maximum depth is 3, corresponding to the path 1 → 3 → 4 or 1 → 3 → 5.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_descriptions): if not node_descriptions: return None nodes = {} for value, left, right in node_descriptions: if value not in nodes: nodes[value] = TreeNode(value) if left != -1 and left not in nodes: nodes[left] = TreeNode(left) if right != -1 and right not in nodes: nodes[right] = TreeNode(right) nodes[value].left = nodes.get(left, None) nodes[value].right = nodes.get(right, None) return nodes[node_descriptions[0][0]] # Return the root node def max_depth(root): if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def process_tree_input(n, input_list): if n == 0: return 0 node_descriptions = [tuple(map(int, line.split())) for line in input_list] root = build_tree(node_descriptions) return max_depth(root)"},{"question":"You are given an array of integers `a`, and a number of operations `k`. There are two types of operations: 1. **Update Operation**: Replace the element at index `i` with value `x` (i.e., `a[i] = x`). 2. **Query Operation**: Compute the sum of all elements in the subarray from index `l` to `r` inclusive. Write a function to perform these operations efficiently. Input The first line contains two integers `n` and `k`. - `n` (1 ≤ n ≤ 10^5) is the length of the array `a`. - `k` (1 ≤ k ≤ 10^5) is the number of operations. The second line contains `n` integers, the elements of the array `a` (1 ≤ a_i ≤ 10^9). Each of the next `k` lines describes an operation. The format of each line is: - `1 i x` for an Update Operation, where 1 ≤ `i` ≤ n and 1 ≤ `x` ≤ 10^9. - `2 l r` for a Query Operation, where 1 ≤ `l` ≤ `r` ≤ n. Output For each Query Operation, output the sum of all elements in the corresponding subarray. Example Input 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 Output 6 13 Explanation - Initially, the array is [1, 2, 3, 4, 5]. - The first query asks for the sum of elements from index 1 to 3: 1 + 2 + 3 = 6. - The update operation sets `a[3]` to 10. The array becomes [1, 2, 10, 4, 5]. - The second query asks for the sum of elements from index 1 to 3: 1 + 2 + 10 = 13.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree in a bottom-up approach for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): # Set value at the position `index` pos = index + self.n self.tree[pos] = value # Move upward and update parents while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Sum on the range [left, right) result = 0 left += self.n right += self.n while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_operations(n, k, array, operations): seg_tree = SegmentTree(array) results = [] for operation in operations: op_type = operation[0] if op_type == 1: _, i, x = operation seg_tree.update(i - 1, x) # Convert 1-based index to 0-based elif op_type == 2: _, l, r = operation result = seg_tree.query(l - 1, r) # Convert 1-based index to 0-based, right is exclusive results.append(result) return results"},{"question":"In this problem, you are given an infinite chessboard. The position of a piece on this board is represented using Cartesian coordinates (x, y) as integers. Your task is to check if the piece can be moved from the starting position (x1, y1) to the ending position (x2, y2) following the rules of a knight in chess. A knight moves in an \\"L\\" shape: it can move two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Formally, from any position (x, y), the knight can move to: - (x + 2, y + 1) - (x + 2, y - 1) - (x - 2, y + 1) - (x - 2, y - 1) - (x + 1, y + 2) - (x + 1, y - 2) - (x - 1, y + 2) - (x - 1, y - 2) Input The first and only line contains four integers x1, y1, x2, y2 (-10^9 ≤ x1, y1, x2, y2 ≤ 10^9), which are the coordinates of the starting and ending positions respectively. Output Print \\"YES\\" if the knight can reach the end position from the start position and \\"NO\\" otherwise. Examples Input 0 0 1 2 Output YES Input 0 0 2 2 Output NO Note In the first example, the knight can move from (0, 0) to (2, 1) and then to (1, 2), which means it can reach the position in two valid moves. In the second example, there is no valid sequence of moves that would allow the knight to move from (0, 0) to (2, 2).","solution":"def can_knight_move(x1, y1, x2, y2): Determine if a knight can move from (x1, y1) to (x2, y2) in one move possible_moves = [ (x1 + 2, y1 + 1), (x1 + 2, y1 - 1), (x1 - 2, y1 + 1), (x1 - 2, y1 - 1), (x1 + 1, y1 + 2), (x1 + 1, y1 - 2), (x1 - 1, y1 + 2), (x1 - 1, y1 - 2) ] return \\"YES\\" if (x2, y2) in possible_moves else \\"NO\\""},{"question":"A local charity is organizing a fair where n children will participate in various activities. Each child is required to participate in exactly one activity, and the charity wants to ensure that no two children who are friends end up in the same activity. You are given a list of m pairs, where each pair represents two children who are friends. Your task is to determine whether it is possible to assign the children to the activities in such a way that no two friends are in the same activity. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n·(n-1)/2) — the number of children and the number of pairs of friends. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that child u and child v are friends. Output If it\'s possible to assign the children to two different activities so that no two friends are in the same activity, print \\"YES\\". If it is not possible, print \\"NO\\". Examples Input 4 3 1 2 2 3 3 4 Output YES Input 3 3 1 2 2 3 3 1 Output NO Note: In the second example, child 1, 2, and 3 form a cycle of friendship, making it impossible to split them into two different activities.","solution":"from collections import deque def is_bipartite(n, friendships): # Graph adjacency list graph = [[] for _ in range(n + 1)] for u, v in friendships: graph[u].append(v) graph[v].append(u) # Colors array to store colors of nodes color = [-1] * (n + 1) for i in range(1, n + 1): if color[i] == -1: # Node has not been colored yet # Start a BFS from this node queue = deque([i]) color[i] = 0 # Color the starting node with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # If the neighbor has not been colored color[neighbor] = 1 - color[node] # Color with opposite color queue.append(neighbor) elif color[neighbor] == color[node]: # If neighbor is colored with the same color return False return True def can_assign_activities(n, m, pairs): friendships = [tuple(pair) for pair in pairs] if is_bipartite(n, friendships): return \\"YES\\" else: return \\"NO\\""},{"question":"In an online game, there are N players forming a chain. Each player is represented by a node in a linked list, and each node contains an integer value representing the player\'s skill level. Additionally, each node has a pointer to the next node in the chain. Players can leave the game if their skill level is below a given threshold K. Write a function `remove_low_skill_players` that takes the head of the linked list of players and the threshold K, and removes all players whose skill level is below K. The function should return the head of the modified linked list and the count of removed players. Input - A function `ListNode remove_low_skill_players(ListNode head, int K)` - `head`: the head node of a singly linked list representing players. - `K`: an integer representing the skill threshold. Output - The function should return a tuple: - The head node of the modified linked list. - An integer count of the removed players. Constraints - The length of the linked list will not exceed 10^5. - The skill level of each player can be between 1 and 10^9. - The threshold K can be between 1 and 10^9. Class Definition ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Example ```python # Input # List: 1 -> 4 -> 5 -> 2 -> 6 # Threshold: 3 # # Output # List: 4 -> 5 -> 6 # Count of removed players: 2 # # Explanation # Players with skill levels 1 and 2 are removed because their skill levels are below the threshold of 3. ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_low_skill_players(head, K): Removes all players from the linked list whose skill level is below K. Parameters: head (ListNode): The head of the linked list of players. K (int): The skill threshold. Returns: tuple: (new head of the linked list, count of removed players) dummy = ListNode(-1) dummy.next = head current = dummy removed_count = 0 while current.next: if current.next.val < K: current.next = current.next.next removed_count += 1 else: current = current.next return dummy.next, removed_count"},{"question":"In the enchanted forest of Rivendale, there lived a wise owl named Oliver. Oliver spent his time collecting rare magical berries which he stored in enchanted jars. One sunny day, Oliver received a special request from the forest council: they needed exactly T jars, each containing M berries, to craft a powerful potion. Unfortunately, Oliver only had a total of N berries and some empty jars. The forest council sent a note that provided a secret formula to fill the jars in a particular way. Oliver discovered that he could use the N berries to form jars containing the magical berries, but it must be done optimally to match the council\'s request. A jar can only be filled if it contains exactly M berries. Additionally, any berries left over from the formation process would be considered waste. Your task is to determine whether Oliver can produce exactly T jars with M berries each from the total of N berries without leaving any berries as waste. If it\'s possible, output \\"YES\\". Otherwise, output \\"NO\\". Input The input consists of a single line containing three integers N, M, and T (1 ≤ N, M, T ≤ 10^9). Output The output consists of a single line. Print \\"YES\\" if it\'s possible for Oliver to produce exactly T jars with M berries each, otherwise, print \\"NO\\". Examples Input 18 3 6 Output YES Input 10 2 6 Output NO Input 20 5 4 Output YES Note In the first example, Oliver has 18 berries and needs to fill 6 jars with 3 berries each. Since 18 can be perfectly divided into 6 jars of 3 berries, the answer is \\"YES\\". In the second example, Oliver has 10 berries and needs to fill 6 jars with 2 berries each. To fill 6 jars, he needs 12 berries, but he only has 10, so the answer is \\"NO\\". In the third example, Oliver has 20 berries and needs to fill 4 jars with 5 berries each. Since 20 can be perfectly divided into 4 jars of 5 berries, the answer is \\"YES\\".","solution":"def can_produce_jars(N, M, T): Determines if it is possible to fill exactly T jars with M berries each from a total of N berries. Args: N (int): The total number of berries. M (int): The number of berries each jar should contain. T (int): The number of jars needed. Returns: str: \\"YES\\" if it\'s possible to fill exactly T jars with M berries each, otherwise \\"NO\\". total_required_berries = M * T if N >= total_required_berries and N % M == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a program that reads a series of commands to manipulate a list of integers. The list starts empty and can be modified by executing the following commands: - \\"append x\\": Append the integer x to the end of the list. - \\"pop\\": Remove the last element from the list. If the list is empty, do nothing. - \\"print\\": Print the entire list in its current state. The commands are given one per line and the input ends with the command \\"end\\". Constraints * x is an integer (0 ≤ x ≤ 10000) Input The input consists of multiple commands, one per line. command Output For each \\"print\\" command, print the current state of the list in a new line. Example Input append 5 append 10 print pop print end Output [5, 10] [5]","solution":"def process_commands(commands): result = [] output = [] for command in commands: parts = command.split() if parts[0] == \\"append\\": result.append(int(parts[1])) elif parts[0] == \\"pop\\": if result: result.pop() elif parts[0] == \\"print\\": output.append(result.copy()) elif parts[0] == \\"end\\": break return output # Example usage: commands = [ \\"append 5\\", \\"append 10\\", \\"print\\", \\"pop\\", \\"print\\", \\"end\\", ] for line in process_commands(commands): print(line)"},{"question":"Given a matrix of integers and a list of queries, your task is to return the sum of elements within the specified submatrix for each query. The matrix is of size M times N and you will be given Q queries. Each query contains four integers: the row and column indices of the top-left and bottom-right corners of the submatrix. You need to pre-process the matrix to answer the queries efficiently. Input: - The first line contains two integers M and N (1 leq M, N leq 300), the dimensions of the matrix. - The next M lines each contain N integers representing the matrix elements. - The following line contains an integer Q (1 leq Q leq 10^4), the number of queries. - The next Q lines each contain four integers r1, c1, r2, c2 (0 leq r1 leq r2 < M, 0 leq c1 leq c2 < N), representing the top-left and bottom-right corners of the submatrix. Output: - For each query, output the sum of elements within the specified submatrix. Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 0 0 1 1 1 1 2 2 ``` Output: ``` 12 28 ``` Explanation: - For the first query, the submatrix is: ``` 1 2 4 5 ``` Sum = 1 + 2 + 4 + 5 = 12 - For the second query, the submatrix is: ``` 5 6 8 9 ``` Sum = 5 + 6 + 8 + 9 = 28 To achieve efficient query processing, consider constructing a prefix sum matrix.","solution":"def preprocess_matrix(matrix): Constructs the prefix sum matrix for the given matrix. M = len(matrix) N = len(matrix[0]) prefix_sum = [[0] * (N + 1) for _ in range(M + 1)] for i in range(1, M + 1): for j in range(1, N + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): Given the prefix sum matrix, returns the sum of elements within the specified submatrix. return (prefix_sum[r2+1][c2+1] - prefix_sum[r1][c2+1] - prefix_sum[r2+1][c1] + prefix_sum[r1][c1]) def matrix_query(matrix, queries): Processes multiple submatrix sum queries. prefix_sum = preprocess_matrix(matrix) results = [] for query in queries: r1, c1, r2, c2 = query results.append(query_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"You are given a list of integers. Your goal is to partition the list into two non-empty sublists such that the absolute difference between the sum of the elements in the two sublists is minimized. Write a function that computes the minimum absolute difference. Constraints: * The length of the list is between 2 and 100. * Each element in the list is an integer between -1000 and 1000. Input: The input contains a single line, consisting of space-separated integers representing the elements of the list. Output: Output a single integer, representing the minimum absolute difference between the sums of the elements in the two sublists. Example: Input: 3 -7 2 10 1 Output: 1 Explanation: One possible partition is [3, 2, 1] and [-7, 10]. The sum of [3, 2, 1] is 6 and the sum of [-7, 10] is 3. Therefore, the absolute difference is |6 - 3| = 3. However, another partition, [3, 1] and [-7, 2, 10], has a sum of 4 for [3, 1] and a sum of 5 for [-7, 2, 10], resulting in an absolute difference of |4 - 5| = 1, which is less than 3.","solution":"def min_abs_difference_partition(arr): Returns the minimum absolute difference between the sums of two non-empty sublists. n = len(arr) total_sum = sum(arr) half_sum = total_sum // 2 # Initialize DP set to store possible sums dp = {0} for num in arr: new_dp = dp.copy() for partial_sum in dp: new_dp.add(partial_sum + num) dp = new_dp best_difference = float(\'inf\') for partial_sum in dp: current_difference = abs((total_sum - partial_sum) - partial_sum) if current_difference < best_difference: best_difference = current_difference return best_difference"},{"question":"You are given a string S consisting of alphabetic characters. Determine if the string is a palindrome, ignoring case and non-alphabetic characters. Constraints * The length of S will be at most 1000. Input Input is given from Standard Input in the following format: S Output If the string S is a palindrome, ignoring case and non-alphabetic characters, print `YES`; otherwise, print `NO`. Examples Input A man, a plan, a canal, Panama Output YES Input race a car Output NO Input No lemon, no melon Output YES Input Hello World Output NO","solution":"def is_palindrome(s): Determine if the string is a palindrome, ignoring case and non-alphabetic characters. Args: s (str): Input string. Returns: str: \'YES\' if the string is a palindrome, \'NO\' otherwise. # Filter non-alphabetic characters and convert to lowercase filtered_s = \'\'.join(filter(str.isalpha, s)).lower() # Check if the filtered string is a palindrome if filtered_s == filtered_s[::-1]: return \'YES\' else: return \'NO\'"},{"question":"In a faraway land, there exists a kingdom with n cities connected by m bidirectional roads. Each road has a certain length. The king of this land wants to build a special road network that connects all the cities in such a way that the total length of the roads is minimized, and there exists exactly one unique path between any two cities. This problem requires constructing such a road network, which is essentially a Minimum Spanning Tree (MST). Input: - The first line contains two integers n and m (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000) representing the number of cities and the number of roads respectively. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000,000) representing a road between cities u and v with length w. Output: - The first line should contain the total length of the roads in the MST. - Each of the next n-1 lines should contain two integers u and v representing a road in the MST. Examples: Input: 4 5 1 2 3 1 3 4 4 2 2 4 3 1 2 3 5 Output: 6 4 3 4 2 1 2 Input: 3 3 1 2 1 2 3 4 1 3 3 Output: 4 1 2 1 3","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst = [] total_cost = 0 for u, v, w in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: total_cost += w mst.append((u + 1, v + 1)) union(parent, rank, root_u, root_v) if len(mst) == n - 1: break return total_cost, mst def solve_road_network(n, m, roads): edges = [(u-1, v-1, w) for u, v, w in roads] total_cost, mst = kruskal(n, edges) return total_cost, mst"},{"question":"**Problem Statement:** A telecommunications company is planning to install new antennas on N buildings in a city. Each building i has a certain height Hi and can accommodate exactly one antenna. The company has a budget B, and each antenna has a cost associated with it, denoted by Ci. Additionally, each antenna provides a range of Ri meters. The objective is to place as many antennas as possible such that the total cost does not exceed the budget B, and no two antennas provide overlapping ranges. Given the heights of the buildings, the antenna costs, and ranges, determine the maximum number of antennas that can be installed within the given constraints. # Input: - The first line consists of a single integer N, the number of buildings. - The second line contains the integer B, the budget. - The following N lines each contain three space-separated integers Hi, Ci, and Ri, representing the height of the building, the cost of the antenna, and the range of the antenna, respectively. # Output: - Output a single integer, the maximum number of antennas that can be installed without exceeding the budget and ensuring no overlapping ranges. # Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ B ≤ 10^18 - 1 ≤ Hi, Ci, Ri ≤ 10^9 # Example: **Input:** ``` 5 100 10 20 5 15 50 7 20 30 3 25 60 4 30 25 6 ``` **Output:** ``` 3 ``` **Explanation:** - The company has a budget of 100 units. - Possible antennas are 1, 3, and 5 with respective ranges (5, 3, and 6) and heights (10, 20, and 30). - The total cost is 20 + 30 + 25 = 75, which is within the budget. In this case, the antennas on buildings 10, 20, and 30 could be installed, and there are no overlapping ranges.","solution":"def max_antennas(N, B, data): # Sort the data based on height to ensure we consider buildings in ascending order. data.sort() antennas = [] for i in range(N): Hi, Ci, Ri = data[i] antennas.append((Hi, Ci, Ri)) # Use a dynamic programming approach with greedy method to maximize the antennas number dp = [[0, 0]] # (total_cost, total_antennas) for antenna in antennas: new_dp = list(dp) Hi, Ci, Ri = antenna for total_cost, total_antennas in dp: new_cost = total_cost + Ci # Check if the new total cost is within budget if new_cost <= B: # Check for overlap overlapped = False for prev_Hi, prev_Ci, prev_Ri in antennas[:total_antennas]: if not (Hi - Ri > prev_Hi + prev_Ri or Hi + Ri < prev_Hi - prev_Ri): overlapped = True break if not overlapped: new_dp.append((new_cost, total_antennas + 1)) dp = new_dp max_antennas = max(dp, key=lambda x: x[1])[1] return max_antennas"},{"question":"A group of friends are playing a game where each friend thinks of a number between 1 and N (inclusive). Each friend either tells the truth or lies about their number. You need to implement a function that determines if it\'s possible that all friends could be telling the truth, given their answers and comparisons among their numbers. Each friend describes their number and compares it to the numbers thought of by other friends. Your task is to verify if the given relations between the numbers hold true if everyone is telling the truth. Constraints - Number of friends, K: 2 <= K <= 20 - Each number is between 1 and N: 1 <= N <= 100 - Each friend gives a statement of the form \\"X_i < Y_i\\" or \\"X_i = Y_i\\" or \\"X_i <= Y_i\\". Input - The first line contains integers N and K, separated by a space. - The next K lines each contain a statement describing the relationships between the numbers thought of by the friends. Output - Print \\"Possible\\" if the statements provided by all friends can be true simultaneously. - Print \\"Impossible\\" if there is no way all the statements can hold true at the same time. Examples Input 5 3 1 < 2 2 = 3 1 <= 3 Output Possible Input 3 3 1 < 2 2 < 3 3 < 1 Output Impossible Input 10 4 2 <= 4 5 = 7 8 < 3 6 <= 9 Output Possible","solution":"def validate_statements(N, K, statements): from collections import defaultdict graph = defaultdict(list) equal_pairs = [] for statement in statements: parts = statement.split() X_i, relation, Y_i = int(parts[0]), parts[1], int(parts[2]) if relation == \'<\': graph[X_i].append((Y_i, \'<\')) graph[Y_i].append((X_i, \'>\')) elif relation == \'=\': equal_pairs.append((X_i, Y_i)) elif relation == \'<=\': graph[X_i].append((Y_i, \'<=\')) graph[Y_i].append((X_i, \'>=\')) def dfs(node, value): if node in values: return values[node] == value values[node] = value for neighbor, rel in graph[node]: if rel == \'<\': if not dfs(neighbor, value + 1): return False elif rel == \'>\': if not dfs(neighbor, value - 1): return False elif rel == \'<=\': if not dfs(neighbor, value): if not dfs(neighbor, value + 1): return False elif rel == \'>=\': if not dfs(neighbor, value): if not dfs(neighbor, value - 1): return False return True for X_i, Y_i in equal_pairs: graph[X_i].append((Y_i, \'=\')) graph[Y_i].append((X_i, \'=\')) values = {} for friend in range(1, K + 1): if friend not in values: if not dfs(friend, 0): return \\"Impossible\\" return \\"Possible\\" # Function to capture input and call the main function def is_possible(N, K, relations): return validate_statements(N, K, relations)"},{"question":"You are given a series of operations to perform on a list of integers. Each operation can either add an integer to the list or remove an integer from the list. After performing all operations, you must determine the maximum integer in the list. INPUT: The first line contains the total number of operations N. Each of the next N lines contains an operation in the form either \\"add X\\" or \\"remove X\\", where X is an integer. OUTPUT: Print the maximum integer in the list after all operations have been performed. If the list is empty after all operations, print \\"EMPTY\\". Constraints: 1 ≤ N ≤ 100000 -1000000 ≤ X ≤ 1000000 SAMPLE INPUT 5 add 1 add 2 remove 1 add 5 remove 2 SAMPLE OUTPUT 5 SAMPLE INPUT 3 add 1 remove 1 remove 2 SAMPLE OUTPUT EMPTY","solution":"def max_in_list_after_operations(operations): Returns the maximum integer in the list after performing all operations. If the list is empty, returns \\"EMPTY\\". current_list = [] for operation in operations: op, num = operation.split() num = int(num) if op == \\"add\\": current_list.append(num) elif op == \\"remove\\": if num in current_list: current_list.remove(num) if current_list: return max(current_list) else: return \\"EMPTY\\""},{"question":"In a remote coastal city, there is a network of cycling tracks connecting various shops. The city administration wants to make sure that every shop is connected to each other either directly or indirectly through these tracks. However, due to a recent storm, some tracks have been washed away. The administration now needs to repair some tracks to ensure the entire network remains connected. You are given a list of existing and washed away tracks, represented as pairs of shop numbers they connect. Your task is to determine the minimum number of tracks that need to be repaired to make the network fully connected again. Input The first line of the input contains two integers, n (1 ≤ n ≤ 1000) — the number of shops, and m (0 ≤ m ≤ 2000) — the number of cycling tracks. The next m lines describe the tracks: the i-th line contains three integers xi, yi, and zi (1 ≤ xi, yi ≤ n and yi ≠ xi and zi ∈ {0, 1}) — indicating that there is a track between shop xi and shop yi, and zi equals 1 if the track is currently in place and 0 if the track is washed away. Output In a single line, print a single integer — the minimum number of tracks that need to be repaired to ensure that every shop is connected directly or indirectly through the remaining and repaired tracks. If it is not possible to connect all shops, print -1. Examples Input 5 6 1 2 1 2 3 0 3 4 1 4 5 0 1 5 1 2 4 0 Output 1 Input 4 2 1 2 0 3 4 0 Output -1 Note In the first example, one possible solution is to repair the track between shops 2 and 3 or between shops 4 and 5, and the network will be fully connected. In the second example, repairing the tracks between 1-2 and 3-4 will still leave the network disconnected, hence the answer is -1.","solution":"def min_tracks_to_repair(n, m, tracks): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False in_place_tracks = [] washed_tracks = [] for xi, yi, zi in tracks: if zi == 1: in_place_tracks.append((xi, yi)) else: washed_tracks.append((xi, yi)) # Connect all the in-place tracks first for xi, yi in in_place_tracks: union(xi, yi) repairs_needed = 0 for xi, yi in washed_tracks: if union(xi, yi): repairs_needed += 1 # Check if all shops are connected root_set = set(find(i) for i in range(1, n + 1)) if len(root_set) == 1: return repairs_needed else: return -1"},{"question":"In a small village, there are n houses aligned in a straight line. Each house has a certain amount of gold coins hidden inside it. A thief plans to rob the houses, but he cannot rob two adjacent houses because the security alarms will go off and he will get caught. You are tasked to help the thief determine the maximum amount of gold coins he can steal without alerting the alarms. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of houses. The second line contains n space-separated integers, where the i-th integer represents the amount of gold coins in the i-th house (0 ≤ amount of gold coins ≤ 1000). Output Print a single integer — the maximum amount of gold coins the thief can steal without triggering the alarm. Examples Input 4 100 1 99 100 Output 200 Input 5 2 7 9 3 1 Output 12 Note In the first example, the optimal strategy for the thief is to rob the 1st and the 4th house, accumulating 200 gold coins. In the second example, the thief should rob the 2nd and 4th houses, accumulating 12 gold coins.","solution":"def max_gold_robbed(n, coins): if n == 0: return 0 if n == 1: return coins[0] # dp[i] will be the max amount of gold that can be robbed from the first i houses dp = [0] * n dp[0] = coins[0] if n > 1: dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[n-1]"},{"question":"You are designing a parking system for a parking lot. The parking lot has three different types of parking spaces: regular, compact, and large. Each type of vehicle (regular car, compact car, and large car) can park in its respective space: - A regular car can park in a regular space. - A compact car can park in a compact space or a regular space. - A large car can park in a large space. Your task is to implement the `ParkingSystem` class: - `ParkingSystem(int regular, int compact, int large)` initializes the object of the `ParkingSystem` class with the number of regular, compact, and large spaces available. - `bool addCar(int carType)` checks whether there is a parking space available for the car of the given type. `carType` can be of three values: - 1 if it is a regular car. - 2 if it is a compact car. - 3 if it is a large car. The method should return `true` if the car can be parked in the respective space, else `false` if there is no available space. **Input/Output Format and Constraints:** - The `ParkingSystem` object will be instantiated as follows: ``` ParkingSystem obj = new ParkingSystem(int regular, int compact, int large); bool result = obj.addCar(int carType); ``` - The number of spaces for each type of parking (regular, compact, large) will be in the range of `[0, 1000]`. **Sample Input and Output:** ``` // Instantiate the ParkingSystem with 1 regular, 1 compact, and 0 large spaces. ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0); System.out.println(parkingSystem.addCar(1)); // return true, as 1 regular space is available. System.out.println(parkingSystem.addCar(2)); // return true, as 1 compact space is available. System.out.println(parkingSystem.addCar(3)); // return false, as no large spaces are available. System.out.println(parkingSystem.addCar(1)); // return false, as no regular spaces are available anymore. ```","solution":"class ParkingSystem: def __init__(self, regular: int, compact: int, large: int): self.regular_spaces = regular self.compact_spaces = compact self.large_spaces = large def addCar(self, carType: int) -> bool: if carType == 1: if self.regular_spaces > 0: self.regular_spaces -= 1 return True return False elif carType == 2: if self.compact_spaces > 0: self.compact_spaces -= 1 return True elif self.regular_spaces > 0: self.regular_spaces -= 1 return True return False elif carType == 3: if self.large_spaces > 0: self.large_spaces -= 1 return True return False return False"},{"question":"Davian loves playing with binary strings. Recently, he came up with a puzzle where he wants to determine the maximum length of a contiguous substring that consists of only one type of character (either all \'0\'s or all \'1\'s) in a given binary string. INPUT The input consists of a single binary string S. OUTPUT You have to print the maximum length of a contiguous substring in S that has the same character. CONSTRAINTS 1 ≤ len(S) ≤ 10^6 The string S will consist of only \'0\'s and \'1\'s. SAMPLE INPUT 110001111000000 SAMPLE OUTPUT 6","solution":"def max_contiguous_substring_length(S): Returns the maximum length of a contiguous substring in S that has the same character. max_length = 0 current_length = 1 for i in range(1, len(S)): if S[i] == S[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # To catch the case where the longest substring is at the end max_length = max(max_length, current_length) return max_length"},{"question":"Tina works at a fireworks company and has been asked to design a special lighting sequence for a presentation. Each firework can be represented as a node in a graph, where directed edges indicate which fireworks will trigger other fireworks. Each node has an integer value indicating its lighting time in seconds. Tina wants to start the show by lighting some fireworks initially and letting the sequence unfold automatically. However, she needs to know the minimum amount of time required for all fireworks to light up if possible. Write a function to determine the minimum time required to light all fireworks given the constraints below. If it is not possible to light all fireworks, return -1. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of fireworks (nodes) and the number of edges (connections) respectively. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the lighting times for each firework. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating that lighting firework u will trigger firework v. Output Output a single integer — the minimum time required to light all fireworks or -1 if it is not possible. Example Input 5 4 2 1 3 2 4 1 2 2 3 3 4 4 5 Output 9 Explanation In the example, if Tina starts by lighting firework 1: - Firework 1 will light in 2 seconds. - It will trigger firework 2, which lights in 1 second (total 3 seconds). - Firework 2 triggers firework 3, requiring another 3 seconds (total 6 seconds). - Firework 3 triggers firework 4, requiring another 2 seconds (total 8 seconds). - Finally, firework 4 triggers firework 5, which lights in 4 seconds (total 12 seconds). The longest path from the start firework to the last firework gives the minimum time required to light all fireworks, which is the sum of all lighting times along the longest path.","solution":"from collections import defaultdict, deque def min_time_to_light_all_fireworks(n, m, times, edges): # Create adjacency list and in-degree list adj = defaultdict(list) in_degree = [0] * n for u, v in edges: adj[u-1].append(v-1) in_degree[v-1] += 1 # Topological Sort using Kahn\'s Algorithm queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in adj[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) != n: return -1 # cycle detected # Dynamic programming to find the longest time to reach each node dp = [0] * n for node in topo_order: dp[node] = max(dp[node], times[node]) for neighbor in adj[node]: dp[neighbor] = max(dp[neighbor], dp[node] + times[neighbor]) # The minimum time required to light all fireworks is the maximum value in dp array return max(dp)"},{"question":"Given an array of integers, find the length of the shortest subarray that needs to be removed to make the remaining array sorted in non-decreasing order. Input The first line contains an integer n, the length of the array (1 ≤ n ≤ 100,000). The second line contains n integers a_i (1 ≤ a_i ≤ 1,000,000), representing the elements of the array. Output Print a single integer — the length of the shortest subarray that needs to be removed to make the remaining array sorted in non-decreasing order. Examples Input 7 1 3 5 2 6 4 7 Output 3 Input 5 1 2 3 4 5 Output 0 Input 3 3 2 1 Output 2 Explanation In the first example, you can remove the subarray [3, 5, 2], resulting in the array [1, 6, 4, 7] which is sorted in non-decreasing order. In the second example, the array is already sorted, so no elements need to be removed, hence the output is 0. In the third example, you need to remove any two of the three elements to make the array sorted.","solution":"def shortest_subarray_to_remove(arr): n = len(arr) left = 0 right = n - 1 # Find the first unsorted element from the start while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the entire array is sorted, return 0 if left == n - 1: return 0 # Find the first unsorted element from the end while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # The array might only need to remove elements from either end res = min(n - left - 1, right) # Try to merge the sorted subarrays from both ends i = 0 j = right while i <= left and j < n: if arr[i] <= arr[j]: res = min(res, j - i - 1) i += 1 else: j += 1 return res"},{"question":"Create a program that simulates the movement of a drone in a three-dimensional space. The drone executes a series of commands given as input and its initial position is at the origin (0, 0, 0). The commands are as follows: - `UP x` — move upward by x units. - `DOWN x` — move downward by x units. - `LEFT x` — move left by x units. - `RIGHT x` — move right by x units. - `FORWARD x` — move forward by x units. - `BACKWARD x` — move backward by x units. Where x is a positive integer. After processing all commands, output the final coordinates of the drone in the form (x, y, z), where x, y, and z represent the drone\'s final position along the X, Y, and Z axes respectively. Input A sequence of multiple commands is given as input. The end of the input is indicated by the command `STOP`. Output The final coordinates of the drone as an ordered triple in the format `(x, y, z)`. Example Input UP 10 FORWARD 5 LEFT 3 DOWN 2 RIGHT 4 BACKWARD 3 STOP Output (1, 8, 2)","solution":"def simulate_drone_movements(commands): Simulates the movement of a drone in a three-dimensional space. :param commands: List of commands to execute :return: The final coordinates of the drone as a tuple (x, y, z) x, y, z = 0, 0, 0 for command in commands: if command == \\"STOP\\": break direction, value = command.split() value = int(value) if direction == \\"UP\\": y += value elif direction == \\"DOWN\\": y -= value elif direction == \\"LEFT\\": x -= value elif direction == \\"RIGHT\\": x += value elif direction == \\"FORWARD\\": z += value elif direction == \\"BACKWARD\\": z -= value return (x, y, z)"},{"question":"Given an array of integers, implement a function that returns the sum of all elements that are prime numbers. Write a function `sumOfPrimes(arr: List[int]) -> int` that takes in a list of integers and returns the sum of all prime numbers in the array. # Example Input: ```python arr = [10, 15, 3, 7, 11] ``` Output: ```python 21 # Since 3, 7 and 11 are prime numbers ``` # Constraints * Each element of the array is a non-negative integer and less than or equal to 1000. * An integer n is considered a prime number if it is greater than 1 and has no divisors other than 1 and itself. # Note Write an efficient algorithm to determine if a number is prime. Avoid recomputation by using a helper function to specifically check the primality of a number.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sumOfPrimes(arr: List[int]) -> int: Returns the sum of all prime numbers in the given list of integers. return sum(x for x in arr if is_prime(x))"},{"question":"**Problem Statement** Given an array of integers, write a function to determine if there are three elements in the array that sum up to a given target value. # Input The first line contains two integers, N (the size of the array) and T (the target sum). The second line contains N space-separated integers representing the elements of the array. # Output Output \\"YES\\" if there are three distinct elements in the array that sum up to the target value, otherwise output \\"NO\\". # Example **Input:** ``` 6 10 3 7 1 2 8 4 ``` **Output:** ``` YES ``` **Input:** ``` 5 15 1 2 3 4 5 ``` **Output:** ``` NO ``` # Note You can assume that the array contains at least three elements and that there are no duplicate values in the array. The function should work efficiently even with the maximum constraints.","solution":"def three_sum_exists(arr, target): Returns \\"YES\\" if there are three distinct elements in the array that sum up to the target value, otherwise returns \\"NO\\". arr.sort() n = len(arr) for i in range(n-2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an unweighted, undirected graph with N vertices and M edges. Each edge connects two different vertices and no two edges connect the same pair of vertices. You need to find the shortest paths from a given source vertex S to all other vertices in the graph. If a vertex is not reachable from S, the distance to that vertex should be considered as -1. Your task is to implement this as a function: ```python def shortest_paths_from_source(N, M, edges, S): # Your implementation here pass ``` # Input * An integer N (1 ≤ N ≤ 10^5) - the number of vertices. * An integer M (0 ≤ M ≤ 2 × 10^5) - the number of edges. * An array edges of tuples (u, v) of length M - each tuple represents an edge between vertex u and v (1 ≤ u, v ≤ N). * An integer S (1 ≤ S ≤ N) - the source vertex. # Output Return an array of length N where the ith element is the shortest distance from S to vertex i+1. If vertex i+1 is not reachable from S, the distance should be -1. # Example ```python print(shortest_paths_from_source(4, 4, [(1, 2), (1, 3), (3, 4), (2, 4)], 1)) # Output: [0, 1, 1, 2] print(shortest_paths_from_source(6, 3, [(1, 2), (2, 3), (4, 5)], 1)) # Output: [0, 1, 2, -1, -1, -1] print(shortest_paths_from_source(5, 0, [], 2)) # Output: [-1, 0, -1, -1, -1] ```","solution":"from collections import deque def shortest_paths_from_source(N, M, edges, S): # Initialize the graph as an adjacency list graph = [[] for _ in range(N)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Initialize distances with -1 distances = [-1] * N distances[S-1] = 0 # BFS to find shortest paths queue = deque([S-1]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances"},{"question":"You are given an array a consisting of n integers. You can perform the following operation any number of times: - Choose any two elements in the array, and swap them. Your task is to determine the minimum number of swap operations required to make all the even-indexed elements equal to each other, and all the odd-indexed elements equal to each other. For example, if a = [4, 3, 4, 3, 4, 3], the array is already in the required form where all even-indexed elements (0, 2, 4) are 4 and all odd-indexed elements (1, 3, 5) are 3. So, the number of operations required is zero. Input The first line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries. Each query is represented by two consecutive lines. The first line of each query contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line of each query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. It is guaranteed that the sum of all n in the input does not exceed 10^6. Output For each query, print one integer — the minimum number of swap operations to make all even-indexed elements equal, and all odd-indexed elements equal. Example Input 3 6 4 3 4 3 4 3 4 1 2 2 1 8 5 6 7 8 5 6 7 8 Output 0 2 4 Note In the first query, the array is already in the required form, so the answer is zero. In the second query, you can swap elements to get the array [1, 1, 2, 2], which requires two operations. In the third query, you need to swap elements to make the even indices [5, 5, 5, 5] and the odd indices [6, 6, 6, 6], requiring four operations.","solution":"from collections import Counter def min_swaps_to_uniform_array(q, queries): results = [] for i in range(q): n = queries[i][0] a = queries[i][1] if n == 1: results.append(0) continue even_count = Counter(a[j] for j in range(0, n, 2)) odd_count = Counter(a[j] for j in range(1, n, 2)) if not even_count and not odd_count: results.append(0) continue max_even = max(even_count.values()) max_odd = max(odd_count.values()) min_swaps = ((n // 2) - max_even) + ((n + 1) // 2 - max_odd) results.append(min_swaps) return results"},{"question":"Given a set of integers, your task is to divide this set into two subsets such that the absolute difference of the sums of the subsets is minimized. If there are multiple ways to achieve this, any valid solution is acceptable. You need to implement a function that takes a list of integers and returns two lists of integers representing the two subsets with the minimized absolute difference of sums. # Input A single integer `n` (1 ≤ n ≤ 100) representing the number of integers in the set, followed by a list of `n` integers. The integers may be positive, negative or zero. # Output Output the two subsets on separate lines. Each subset should be represented as a space-separated list of integers. If there are multiple valid solutions, any correct solution will be accepted. # Example Input ``` 4 1 2 3 4 ``` Output ``` 1 4 2 3 ``` Explanation: The absolute difference of the sums of the subsets {1, 4} and {2, 3} is |(1+4) - (2+3)| = 0, which is the minimum possible. # Note - You do not need to find the globally optimal solution, but rather a correct and valid solution to pass the constraints. - Edge cases like an empty subset should be handled gracefully, considering all integers must be assigned to one of the two subsets. # Function Signature ``` def divide_set(n: int, integers: list) -> (list, list): pass ```","solution":"def divide_set(n: int, integers: list) -> (list, list): from itertools import combinations total_sum = sum(integers) half_sum = total_sum // 2 # Initialize the variables to store the best division found best_combination = [] min_difference = float(\'inf\') # Explore all combinations of subsets for r in range(n // 2 + 1): for subset in combinations(integers, r): subset_sum = sum(subset) difference = abs(total_sum - 2 * subset_sum) if difference < min_difference: min_difference = difference best_combination = subset subset1 = list(best_combination) subset2 = integers.copy() for item in subset1: subset2.remove(item) return subset1, subset2"},{"question":"There are N students in a row, each having a unique reputation score. The scores are represented by an array of integers `scores` of length N, where `scores[i]` denotes the reputation score of the i-th student. You have to assign a reward to each student based on the following criteria: 1. Each student must receive at least one reward. 2. If a student\'s reputation score is higher than the adjacent student(s), they must receive more rewards than the adjacent student(s). Your task is to calculate the minimum total number of rewards required. For example, given the reputation scores of students as [4, 6, 4, 5, 6, 2]: - The student with score 4 gets 1 reward. - The student with score 6 gets 2 rewards (since 6 > 4). - The student with score 4 gets 1 reward (since 4 < 6). - The student with score 5 gets 2 rewards (since 5 > 4). - The student with score 6 gets 3 rewards (since 6 > 5). - The student with score 2 gets 1 reward. Therefore, the minimum total number of rewards required is 1 + 2 + 1 + 2 + 3 + 1 = 10. Constraints: * 1 ≤ N ≤ 100,000 * 1 ≤ scores[i] ≤ 10,000 Input The input is given from Standard Input in the following format: ``` N scores[0] scores[1] ... scores[N-1] ``` Output Print a single integer representing the minimum total number of rewards required. Examples Input ``` 6 4 6 4 5 6 2 ``` Output ``` 10 ``` Input ``` 3 1 2 2 ``` Output ``` 4 ```","solution":"def minimum_rewards(N, scores): if N == 0: return 0 rewards = [1] * N for i in range(1, N): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 for i in range(N - 2, -1, -1): if scores[i] > scores[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"Given a rectangular grid of size N x M where some cells are blocked and cannot be stepped on, write a program to find the number of different paths from the top-left corner to the bottom-right corner of the grid. You can only move either right or down at any point in time. Each path should not step on any blocked cells. You will be given N and M representing the number of rows and columns of the grid. Then, you will be given K representing the number of blocked cells. Each of the next K lines contains two integers r_i and c_i (1-indexed) which indicate that the cell at row r_i and column c_i is blocked. Write a function `find_paths(N, M, K, blocked_cells)` that returns the number of different paths from the top-left corner to the bottom-right corner of the grid. If no such path exists, return 0. # Input - An integer N (1 leq N leq 50) representing the number of rows in the grid. - An integer M (1 leq M leq 50) representing the number of columns in the grid. - An integer K (0 leq K leq N times M) representing the number of blocked cells. - A list of K tuples where each tuple (r_i, c_i) represents the position of a blocked cell. # Output - An integer representing the number of different paths from the top-left corner to the bottom-right corner of the grid. # Example Input: ``` 3 3 2 2 2 3 1 ``` Output: ``` 1 ``` Explanation: The grid is as follows: ``` [0, 0, 0] [0, X, 0] [X, 0, 0] ``` There is only one path from the top-left to the bottom-right corner, which is: right -> right -> down -> down. # Notes - You can assume that the top-left cell (1,1) and the bottom-right cell (N,M) are never blocked. - Make sure to handle edge cases such as grids with no blocked cells and grids where the path is completely blocked.","solution":"def find_paths(N, M, K, blocked_cells): Returns the number of distinct paths from the top-left to the bottom-right corner of an N x M grid with some blocked cells. # Initialize the DP table dp = [[0] * M for _ in range(N)] # Create a set of blocked cells for faster lookup blocked_set = {(r-1, c-1) for r, c in blocked_cells} # Start point if (0, 0) not in blocked_set: dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(M): if (i, j) in blocked_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"**Problem Statement:** Vlad has an array of integers of length n. He wants to perform q operations on this array. Each operation is described with three integers l, r, and x: Vlad adds the value x to all elements of the array between indices l and r, inclusive. Determine what the array will look like after Vlad performs all q operations. **Input:** The first line contains two integers n and q (1 ≤ n, q ≤ 2·10^5) — the length of the array and the number of operations. The second line contains n integers — the elements of the array. Each of the next q lines contains three integers l, r, and x (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9) — the indices and the value to be added. **Output:** Print the resulting array after Vlad performs all q operations. **Examples:** **Input:** ``` 5 3 1 2 3 4 5 1 3 2 2 5 3 1 5 -1 ``` **Output:** ``` 2 6 7 6 7 ``` **Input:** ``` 4 2 4 3 2 1 1 2 1 3 4 -2 ``` **Output:** ``` 5 4 0 -1 ``` **Note:** In the first example, after the first operation, the array becomes [3, 4, 5, 4, 5]. After the second operation, it becomes [3, 7, 8, 7, 8]. Finally, after the third operation, the array becomes [2, 6, 7, 6, 7]. In the second example, after the first operation, the array becomes [5, 4, 2, 1]. After the second operation, it becomes [5, 4, 0, -1].","solution":"def vlad_operations(n, q, array, operations): Perform all operations on the array and return the resulting array. Parameters: n (int): The length of the array. q (int): The number of operations. array (list of int): The initial array. operations (list of tuples): Each tuple contains three integers l, r, and x. Returns: list of int: The resulting array after performing all operations. # Initialize a difference array diff = [0] * (n + 1) # Apply the operations on the difference array for l, r, x in operations: diff[l - 1] += x if r < n: diff[r] -= x # Build the resulting array using the difference array for i in range(1, n): diff[i] += diff[i - 1] # Add the differences to the original array for i in range(n): array[i] += diff[i] return array"},{"question":"There is a special robot, called RoboClean, that has to clean a rectangular grid of houses. Each cell in the grid is either a house that can be cleaned, or an obstacle, which the robot can\'t pass or clean. The robot always starts at the top-left corner of the grid and must reach the bottom-right corner of the grid to clean that house as well. The robot can only move in two directions: - Right (R) - Down (D) However, to make its job easier, the grid is programmed in such a way that there are exactly n obstacles placed in specific cells, and it must find a path that visits all cleanable houses exactly once, then stops at the bottom-right corner. You need to help RoboClean find the number of distinct paths that it can take from the top-left corner to the bottom-right corner, without passing through any obstacles. Input The first line contains two integers, r and c (1 ≤ r, c ≤ 1000), representing the number of rows and columns of the grid, respectively. The second line contains an integer, n (0 ≤ n ≤ 1000), representing the number of obstacles. Each of the next n lines contains two integers, ri and ci (1 ≤ ri ≤ r, 1 ≤ ci ≤ c), representing the row and column coordinates of an obstacle cell in the grid. Output Print the number of distinct paths RoboClean can take to reach the bottom-right corner. Examples Input 3 3 1 2 2 Output 2 Input 3 3 2 1 2 2 1 Output 0 Note In the first example: The robot has two distinct paths: 1. Right, Right, Down, Down 2. Down, Down, Right, Right In the second example: Obstacles block all possible paths. So, there are no distinct paths for RoboClean to reach the bottom-right corner.","solution":"def num_of_paths(r, c, n, obstacles): # Create a grid to store the number of ways to reach each cell grid = [[0] * c for _ in range(r)] # Mark obstacles in the grid for (ri, ci) in obstacles: grid[ri-1][ci-1] = -1 # If the starting or ending cell has an obstacle, return 0 if grid[0][0] == -1 or grid[r-1][c-1] == -1: return 0 # Initialize the starting point grid[0][0] = 1 # Fill the grid with the number of ways to reach each cell for i in range(r): for j in range(c): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[r-1][c-1] # Sample main function to read input and output result def main(): import sys input = sys.stdin.read data = input().split() r = int(data[0]) c = int(data[1]) n = int(data[2]) obstacles = [(int(data[3 + 2*i]), int(data[4 + 2*i])) for i in range(n)] print(num_of_paths(r, c, n, obstacles))"},{"question":"Alex is learning about sorting algorithms. To test his understanding, he has been given an array of integers. His task is to sort the array in such a way that the odd numbers appear in ascending order first, followed by the even numbers in descending order. Help Alex sort the array according to this rule. Input The first line contains an integer n (1 ≤ n ≤ 105), denoting the size of the array. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), representing the elements of the array. Output Print the sorted array according to the described rule. Examples Input 6 4 3 1 2 5 8 Output 1 3 5 8 4 2 Input 4 10 15 7 9 Output 7 9 15 10 Input 5 1 2 3 4 5 Output 1 3 5 4 2","solution":"def custom_sort(n, arr): Sorts the array such that odd numbers are in ascending order first, followed by even numbers in descending order. :param n: Integer, size of the array. :param arr: List of integers, the array to be sorted. :return: List of integers, sorted according to the described rule. odds = sorted([x for x in arr if x % 2 != 0]) evens = sorted([x for x in arr if x % 2 == 0], reverse=True) return odds + evens"},{"question":"You are given a positive integer N. Determine whether N is a perfect square. Here, a perfect square is an integer that is the square of an integer. Constraints * 1≤N≤10000 * N is an integer. Input Input is given from Standard Input in the following format: N Output If N is a perfect square, print `Yes`; otherwise, print `No`. Examples Input 16 Output Yes Input 20 Output No Input 1 Output Yes","solution":"def is_perfect_square(N): Determines whether a given integer N is a perfect square. Parameters: N (int): The integer to be checked. Returns: str: \'Yes\' if N is a perfect square, \'No\' otherwise. if int(N ** 0.5) ** 2 == N: return \'Yes\' else: return \'No\'"},{"question":"In a faraway kingdom, the king has assigned a task to his knight: protecting the land by defeating a certain number of dragons. Each dragon has a different strength, and the knight has a certain power level. The knight can defeat a dragon if his power level is greater than or equal to the dragon\'s strength. Each time the knight defeats a dragon, his power level increases by the dragon\'s strength. However, the knight can choose the order in which he defeats the dragons. Given the knight\'s initial power level and the strengths of the dragons, determine if the knight can defeat all the dragons. If he can, find out the minimum power level the knight will have at the end. For example, if the initial power level of the knight is 3 and the strengths of the dragons are [1, 2, 3], the knight can defeat all dragons by following this strategy: * Defeat the first dragon (strength 1), knight\'s power becomes 3 + 1 = 4 * Defeat the second dragon (strength 2), knight\'s power becomes 4 + 2 = 6 * Defeat the third dragon (strength 3), knight\'s power becomes 6 + 3 = 9 The knight can defeat all dragons, and the minimum power level at the end is 9. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains an integer p (1 ≤ p ≤ 100) — the initial power level of the knight, and an integer n (1 ≤ n ≤ 100) — the number of dragons. The second line contains n integers a_i (1 ≤ a_i ≤ 100) — the strengths of the dragons. Output For each test case, output \\"YES\\" if the knight can defeat all the dragons, followed by the minimum power level the knight will have at the end. If the knight cannot defeat all the dragons, output \\"NO\\". Example Input 3 3 3 1 2 3 1 4 4 2 2 3 5 2 3 5 Output YES 9 NO YES 13","solution":"def knight_vs_dragons(num_cases, cases): results = [] for case in cases: p = case[\'initial_power\'] n = case[\'num_dragons\'] dragon_strengths = sorted(case[\'dragon_strengths\']) can_defeat_all = True for strength in dragon_strengths: if p >= strength: p += strength else: can_defeat_all = False break if can_defeat_all: results.append(f\\"YES {p}\\") else: results.append(\\"NO\\") return results"},{"question":"Alice and Bob are playing a game with integers. They have an array consisting of n integers and want to split the array into two non-empty contiguous subarrays such that the sums of the elements in the two subarrays are equal. However, because they don\'t want the sums to be too small, let\'s define the sum of the subarray as the product of its length and the average of its elements (i.e., the sum divided by its length). They need you to determine if it\'s possible to split the array into two non-empty contiguous subarrays with this condition. Input The first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), which are the elements of the array. Output Output \\"YES\\" if it\'s possible to split the array into two non-empty contiguous subarrays that have the same sum under the given condition, otherwise output \\"NO\\". Examples Input 4 1 2 1 2 Output YES Input 5 1 2 3 4 10 Output NO Input 6 1 1 1 1 1 1 Output YES Note In the first example, we can split the array as [1, 2] and [1, 2]. Both subarrays have the same sum of 3. In the second example, no such split will result in both subarrays having the same sum. In the third example, we can split the array as [1, 1, 1] and [1, 1, 1], both subarrays have the same sum of 3.","solution":"def can_split_array(n, arr): Determines if it\'s possible to split the array into two non-empty continuous subarrays such that their sums (defined as product of its length and its average) are equal. total_sum = sum(arr) # Using prefix sums to efficiently calculate subarray sums prefix_sum = 0 for i in range(n - 1): prefix_sum += arr[i] if prefix_sum * (n - (i + 1)) == (total_sum - prefix_sum) * (i + 1): return \\"YES\\" return \\"NO\\""},{"question":"Alice and Bob are playing a game with an array of integers. Both players take turns and each turn consists of choosing a non-empty subarray and decreasing all its elements by 1. The game ends when all elements of the array become zero. The person who makes the last move wins the game. Alice always plays first. Your task is to determine the winner of the game assuming both players play optimally. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Examples Input 4 3 1 2 1 Output Alice Input 2 1 1 Output Bob Note In the first sample, Alice can decrease the entire array by 1 on her first turn. This will make the array [2, 0, 1, 0]. On Bob\'s turn, he will have no choice but to decrease the subarray [2] or [1] by 1, leading to another move by Alice which will eventually lead her to win. Therefore, Alice wins. In the second sample, whatever Alice does on her first move, Bob can always decrease the remaining part to zero on his turn. Therefore, Bob wins.","solution":"def determine_winner(n, arr): # The player who starts will lose if the sum of the array is even. total = sum(arr) if total % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a grid with R rows and C columns. Initially, each cell in the grid contains a value of 0. You will be given Q queries to perform on the grid, each query updating all values within a sub-grid. Each query is defined by four integers (x1, y1, x2, y2) which represent the top-left and bottom-right coordinates of the sub-grid. For every cell in the sub-grid including the boundary cells, increase the value by 1. After all queries are performed, your task is to find the final value in each cell of the grid. Input: The first line contains three integers R, C, and Q, the number of rows, columns, and queries respectively. Each of the next Q lines contains four integers x1, y1, x2, y2 representing a query. Output: Output the final grid. Constraints: 1 ≤ R, C ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ x1 ≤ x2 ≤ R 1 ≤ y1 ≤ y2 ≤ C SAMPLE INPUT 3 3 2 1 1 2 2 1 1 3 3 SAMPLE OUTPUT 2 2 1 2 2 1 1 1 1 Explanation In the first query (1,1) to (2,2), the sub-grid is: 1 1 0 1 1 0 0 0 0 In the second query (1,1) to (3,3), the updated grid becomes: 2 2 1 2 2 1 1 1 1","solution":"def perform_queries(R, C, queries): Perform the queries to update the grid and return the final grid. Parameters: R (int): Number of rows in the grid. C (int): Number of columns in the grid. queries (list of tuples): List of queries, each defined by four integers (x1, y1, x2, y2) Returns: list of list of int: The final updated grid after performing all queries. grid = [[0] * C for _ in range(R)] for x1, y1, x2, y2 in queries: for i in range(x1-1, x2): # -1 to adjust index from 1-based to 0-based for j in range(y1-1, y2): grid[i][j] += 1 return grid # Example usage: R, C, Q = 3, 3, 2 queries = [(1, 1, 2, 2), (1, 1, 3, 3)] result = perform_queries(R, C, queries) for row in result: print(\\" \\".join(map(str, row)))"},{"question":"You are working with strings in a text editor and one of the tasks you need to perform frequently is balancing parentheses. Given a string consisting of only the characters \'(\' and \')\', you need to determine the length of the longest valid (well-formed) parentheses substring. A substring is valid if it can be fully matched with opening and closing parentheses. Input - A single string s composed entirely of \'(\' and \')\'. The length of the string can be up to 10^6. Output - A single integer representing the length of the longest valid parentheses substring. Examples Input \\"(()\\" Output 2 Input \\")()())\\" Output 4 Input \\"\\" Output 0 Explanation In the first example, the longest valid parentheses substring is \\"()\\", which has length 2. In the second example, the longest valid parentheses substring is \\"()()\\", which has length 4. In the third example, the input string is empty, so the longest valid parentheses substring has a length of 0.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid parentheses substring. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len"},{"question":"An amusement park decided to host a treasure hunt event. There are 8 treasure chests placed at different locations in the park, each containing a unique number of points. Participants need to find all the chests and report the total number of points collected. Your task is to write a program that reads the number of points in each chest and calculates the total points gathered by a participant who finds all chests. input The input is given in the following format. p1 p2 .. .. p8 The input consists of 8 lines, and the i-th line contains an integer pi (0 ≤ pi ≤ 150) representing the points in the i-th chest. output Output the total points collected on one line. Example Input 10 15 30 5 25 40 20 50 Output 195","solution":"def total_points_collected(points): Calculates the total points from a list of points in 8 treasure chests. Parameters: points (list): List of 8 integers representing points in each treasure chest. Returns: int: Total points collected from all treasure chests. if len(points) != 8: raise ValueError(\\"There must be exactly 8 points.\\") return sum(points)"},{"question":"A group of friends decided to play a game involving numbers. The rules are simple: each player picks a unique number from a given list, and the player who picks the highest number wins. However, there is a twist: no two players can pick the same number and they can only pick a number from the list if that number is greater than any number they previously picked (if any). You are given a list of numbers and the task is to determine the list of numbers each player can pick. The player who picks first starts from the largest number and alternates picking the next largest and smallest available numbers. Write a program to determine the sequence in which numbers are picked by the players. Input First line contains an integer T denoting number of test cases. Each test case contains: - An integer N (number of players). - An integer M (number of available numbers). - A line with M integers separated by space (the list of numbers). Output For each test case print the sequence of numbers picked by the players separated by a space. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10^5 1 ≤ list of numbers[i] ≤ 10^6 SAMPLE INPUT 2 3 6 9 3 5 6 7 2 2 4 1 4 2 3 SAMPLE OUTPUT 9 7 3 4 1 Explanation In the first test case, players pick the numbers in the following order: - Player 1 picks the largest number 9 - Player 2 picks the next smallest number which is 7 - Player 3 picks the next largest number which is 3 In the second test case: - Player 1 picks the largest number 4 - Player 2 picks the next smallest number which is 1","solution":"def number_picking_game(T, test_cases): results = [] for case in test_cases: N, M, numbers = case numbers.sort() left, right = 0, M - 1 result = [] for i in range(N): if i % 2 == 0: result.append(numbers[right]) right -= 1 else: result.append(numbers[left]) left += 1 results.append(result) return results # For direct use: def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) numbers = list(map(int, data[index + 2: index + 2 + M])) test_cases.append((N, M, numbers)) index += 2 + M results = number_picking_game(T, test_cases) for result in results: print(\\" \\".join(map(str, result))) # Sample code to execute main when run directly if __name__ == \\"__main__\\": main()"},{"question":"Deep in the Abstraction Woods, there lives an old wizard. This wizard has a magical tree with nodes connected by edges. The tree is rooted at node 1, and each node has a unique non-negative integer value. The wizard wants to perform a specific branch-summing spell on this tree. To cast the spell, the wizard needs to consider all paths from the root node to the leaf nodes. For each such path, he calculates the sum of the node values along the path, starting from the root to the leaf. The wizard wants to know the maximum sum among these paths. Help the wizard by writing a function that takes two inputs: the number of nodes in the tree (n), and a list of tuples representing the tree\'s edges (u, v) and the non-negative integer values associated with each node. Input The first line contains the single integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. The second line contains n non-negative integers ai (0 ≤ ai ≤ 104) — the value of each node from 1 to n. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — the edges of the tree. Output In the only line, print a single integer — the maximum sum of values along any path from the root to any leaf in the tree. Examples Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 12 Input 3 10 20 30 1 2 1 3 Output 40 Note In the first example, the tree structure and node values are: ``` 1(1) / 2(2) 3(3) / 4(4) 5(5) ``` Possible paths and their sums are: - 1 → 2: 1+2 = 3 - 1 → 3 → 4: 1+3+4 = 8 - 1 → 3 → 5: 1+3+5 = 9 The maximum sum is 9, but in the problem, the target maximum sum path is 1 → 3 → 5, summing to 12.","solution":"from collections import defaultdict, deque def max_path_sum(n, values, edges): Calculate the maximum sum of values along any path from the root to any leaf in the tree. Parameters: n (int): number of nodes in the tree values (list of int): the values of each node edges (list of tuples): the edges of the tree Returns: int: the maximum path sum if n == 1: return values[0] # Directly return the value of the root if there\'s only one node # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # A function to perform DFS and calculate the maximum path sum def dfs(node, parent): max_sum = 0 for neighbor in tree[node]: if neighbor != parent: neighbor_sum = dfs(neighbor, node) max_sum = max(max_sum, neighbor_sum) return values[node - 1] + max_sum # Start DFS from the root (node 1) return dfs(1, -1)"},{"question":"In this task, you are provided with two strings and you need to determine the longest common prefix that occurs at the end of the first string and the start of the second string. Then, you will combine these two strings in such a way that this common prefix is not duplicated. If there is no common prefix, simply concatenate the two strings. INPUT: The first line contains an integer T, the number of test cases. Each test case comprises two strings s1 and s2 in two separate lines. OUTPUT: For each test case, print the concatenated string as described. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ length of strings ≤ 10^6 SAMPLE INPUT: 2 abcdef defxyz hello world SAMPLE OUTPUT: abcdefxyz helloworld","solution":"def find_longest_common_prefix_suffix(s1, s2): Finds the longest common prefix that occurs at the end of s1 and the start of s2. Combines the strings such that the common prefix does not duplicate. max_len = min(len(s1), len(s2)) for i in range(max_len, 0, -1): if s1[-i:] == s2[:i]: return s1 + s2[i:] return s1 + s2 def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: result = find_longest_common_prefix_suffix(s1, s2) results.append(result) return results"},{"question":"You are given an integer array `nums` and an integer `target`. Write a program that finds the indices of two numbers in the array that add up to the target. Assume that there is exactly one solution, and you may not use the same element twice. Constraints * The length of `nums` will be at least 2 and at most 10^4. * Each element of `nums` will be an integer between -10^9 and 10^9. * `target` will be an integer between -10^9 and 10^9. Input Input is given from Standard Input in the following format: n (length of nums) nums (space-separated integers) target Output Output the indices of the two numbers (0-based) in a space-separated format. Examples Input 4 2 7 11 15 9 Output 0 1 Input 3 3 2 4 6 Output 1 2","solution":"def two_sum(nums, target): Returns the indices of two numbers in the array that add up to the target. :param nums: List[int] - The list of integers. :param target: int - The target sum. :return: Tuple[int, int] - A tuple of indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return num_to_index[complement], index num_to_index[num] = index return None"},{"question":"A software company is designing a system to track the progress of its various projects. Each project has a series of tasks, and each task has a specific duration in days. The system should be able to determine the completion date of each task based on its start date and duration. Your task is to create a program that takes as input the project\'s start date, the number of tasks, and the durations of these tasks in days. The program should then output the completion date of each task. Input The first input line contains the project\'s start date in the format YYYY-MM-DD. The second input line contains an integer n (1 ≤ n ≤ 100), representing the number of tasks. The next n lines each contain an integer di (1 ≤ di ≤ 365), representing the duration in days of each task. Output Print n lines, each line containing the completion date of the corresponding task in the format YYYY-MM-DD. The completion dates should be calculated sequentially: the first task starts on the project\'s start date, the second task starts the day after the first task is completed, and so on. Examples Input 2023-05-14 3 10 5 8 Output 2023-05-23 2023-05-28 2023-06-05 Input 2021-12-29 2 5 3 Output 2022-01-03 2022-01-06","solution":"from datetime import datetime, timedelta def calculate_completion_dates(start_date_str, num_tasks, task_durations): start_date = datetime.strptime(start_date_str, \\"%Y-%m-%d\\") completion_dates = [] for duration in task_durations: completion_date = start_date + timedelta(days=duration - 1) # Subtract 1 to include start date completion_dates.append(completion_date.strftime(\\"%Y-%m-%d\\")) start_date = completion_date + timedelta(days=1) # Next task starts the day after current task completes return completion_dates"},{"question":"Alice has recently become interested in growing plants. She has a collection of n different plant species, each with a specific growth rate. Alice wants to arrange these plants in a single row in such a way that the sequence follows a specific pattern to create a visually pleasing garden. The pattern Alice desires is that for any three consecutive plants in the row, the growth rate of the middle plant must be strictly between the growth rates of the first and third plants. Formally, for any three consecutive plants with growth rates a, b, and c (from left to right), it must hold that either `a < b < c` or `a > b > c`. Alice needs help to determine if it is possible to arrange her plants in such a manner. If it is possible, provide one such arrangement. Input The first line of the input contains an integer n (3 ≤ n ≤ 10^5) — the number of different plant species. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the growth rates of each plant species. Output If it is possible to arrange the plants following the desired pattern, print \\"Yes\\" on the first line and one possible sequence of the growth rates on the second line. If it is not possible, print \\"No\\". Examples Input 5 4 2 3 1 5 Output Yes 1 3 4 2 5 Input 4 10 20 10 40 Output Yes 10 20 10 40 Input 3 1 1 1 Output No Note In the first example, one possible arrangement that satisfies the condition is {1, 3, 4, 2, 5}. Here, for every three consecutive plants in the sequence, the middle plant\'s growth rate is between the growth rates of its neighbors. In the second example, the sequence {10, 20, 10, 40} directly satisfies Alice\'s pattern requirement. In the third example, it\'s not possible to arrange the plants to meet the condition since all growth rates are identical, thereby failing to create the necessary pattern.","solution":"def arrange_plants_growth_rates(n, growth_rates): Determines if it is possible to arrange the plants in a desired pattern. If possible, returns \\"Yes\\" followed by the sequence. Otherwise, returns \\"No\\". :param n: int, number of plant species :param growth_rates: list of int, growth rates of each plant species :return: str, \\"Yes\\" or \\"No\\" followed by the sequence if possible growth_rates.sort() # Check for all identical growth rates if growth_rates[0] == growth_rates[-1]: return \\"No\\" # Arrange growth rates to meet the condition # Split the sorted list into two halves and interleave them mid = (n + 1) // 2 left = growth_rates[:mid] right = growth_rates[mid:] result = [] for l, r in zip(left, right): result.append(l) result.append(r) if n % 2 != 0: result.append(left[-1]) # If the length of the list has even number of elements # The all the elements are already correctly arranged # Otherwise, we need to check if the last element is correct return \\"Yes\\", result"},{"question":"A company offers a salary increment based on the number of projects an employee completes in a year. There are `n` employees in the company, and each employee must complete a certain number of projects to get their corresponding salary increments. The company follows these rules: - Each employee\'s salary increment is proportional to the number of projects they complete. - There are a total of `p` projects available in a year. - No two employees can work on the same project. You are tasked with determining the maximum total salary increment for all employees when the projects are optimally distributed. Each employee `i` requires `ai` projects to achieve their respective maximum possible increment. Input The first line of input contains two integers `n` and `p` (1 ≤ n ≤ 100, 1 ≤ p ≤ 10^4). The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^3) where `ai` is the number of projects employee `i` needs. Output Print the maximum total salary increment that the company can achieve. Example Input 3 10 3 4 5 Output 12 Explanation In the sample test, the company has 10 projects. The first employee needs 3 projects, the second one needs 4, and the third one needs 5. The optimal way to distribute the projects is to assign 3 projects to the first employee, 4 projects to the second one, and 3 projects to the third one. So, the maximum total salary increment is `3 + 4 + 5 = 12`.","solution":"def max_salary_increment(n, p, project_requirements): Function to determine the maximum total salary increment given the project requirements for each employee and total projects available. # Sort the project requirements in ascending order project_requirements.sort() total_projects_assigned = 0 total_increment = 0 for project_count in project_requirements: if total_projects_assigned + project_count <= p: total_projects_assigned += project_count total_increment += project_count else: remaining_projects = p - total_projects_assigned total_increment += remaining_projects break return total_increment"},{"question":"A forest consists of several trees. Each tree has a certain height, given by an array of integers where each element represents the height of a tree. A towering tree is defined as a tree that is taller than the immediate next tree in the array. You are given an array of integers `A` representing the heights of trees in a forest. Determine how many towering trees are in the given array. Constraints * The length of the array `A` is between 2 and 10^5. * Each element in `A` is an integer between 1 and 10^9. Inputs Input is given from Standard Input in the following format: n A Where `n` is the number of elements in the array, and `A` is the array of tree heights separated by spaces. Outputs Print the number of towering trees in the forest. Examples Input 5 10 20 15 30 25 Output 2 Input 3 5 5 5 Output 0 Input 4 1 2 3 4 Output 0","solution":"def count_towering_trees(n: int, A: list) -> int: Returns the number of towering trees. towering_count = 0 for i in range(n - 1): if A[i] > A[i + 1]: towering_count += 1 return towering_count"},{"question":"Prime Sum Partition You are asked to find the number of ways to partition a given integer `N` into a sum of exactly two prime numbers. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example, the first five prime numbers are 2, 3, 5, 7, and 11. Write a function that returns the count of distinct pairs of prime numbers that sum up to `N`. Each pair should be counted only once, meaning the pair (p1, p2) should be considered the same as the pair (p2, p1). For example, if `N` is 10, the pairs of prime numbers that sum up to 10 are (3, 7) and (5, 5). Therefore, the function should return 2. Input The input consists of a single integer: - N (4 ≤ N ≤ 10^6): the integer to be partitioned. Output The output consists of a single integer, the number of ways to partition `N` into a sum of two prime numbers. Example Input 10 Output 2 Explanation The pairs are (3, 7) and (5, 5).","solution":"def prime_sum_partition(N): Returns the number of ways to partition the given integer N into the sum of exactly two prime numbers. # Sieve of Eratosthenes to find all primes up to N def sieve(n): is_prime = [True] * (n+1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n+1, i): is_prime[j] = False return [x for x in range(n+1) if is_prime[x]] primes = sieve(N) primes_set = set(primes) count = 0 for prime in primes: if prime > N // 2: break if (N - prime) in primes_set: count += 1 return count"},{"question":"You are organizing a wedding and need to create a guest seating chart. Each guest has specified which other guests they want to sit next to. Based on the preferences, determine if it\'s possible to create a seating arrangement where every guest is happy. Input In the first line of input, there is one integer n (1 ≤ n ≤ 100) — the number of guests. In the next n lines, each line contains a guest name and the names of the other guests they want to sit next to, separated by spaces. Guest names are unique and consist of lowercase English letters. Output Output \\"Yes\\" if it\'s possible to arrange the guests based on their preferences. Otherwise, output \\"No\\". Example Input 3 alice bob bob alice carol carol bob Output Yes Input 3 alice bob bob carol carol alice Output No Note In the first example, \\"alice\\" wants to sit next to \\"bob\\", \\"bob\\" wants to sit next to both \\"alice\\" and \\"carol\\", and \\"carol\\" wants to sit next to \\"bob\\". This can be arranged as: alice - bob - carol. In the second example, \\"alice\\" wants to sit next to \\"bob\\", \\"bob\\" wants to sit next to \\"carol\\", and \\"carol\\" wants to sit next to \\"alice\\". It is not possible to create a seating arrangement where all these preferences are satisfied.","solution":"def can_arrange_seating(n, preferences): from collections import defaultdict, deque graph = defaultdict(list) for preference in preferences: parts = preference.split() guest = parts[0] for friend in parts[1:]: graph[guest].append(friend) graph[friend].append(guest) colors = {} for guest in graph: if guest not in colors: queue = deque([guest]) colors[guest] = 0 while queue: current = queue.popleft() current_color = colors[current] for neighbor in graph[current]: if neighbor not in colors: colors[neighbor] = 1 - current_color queue.append(neighbor) elif colors[neighbor] == current_color: return \\"No\\" return \\"Yes\\""},{"question":"A warehouse optimization problem requires you to manage the distribution of packages in an efficient way. Each package can be represented by a positive integer indicating its volume. You are given a list of N packages and your task is to distribute them into M bins such that the sum of volumes in each bin is as equal as possible. Considerations: 1. Each bin can hold any number of packages. 2. The number of bins M is guaranteed to be less than or equal to N. Input: - The first line contains two integers, N and M (1 ≤ M ≤ N ≤ 1000) - the number of packages and the number of bins. - The second line contains N integers where the i-th integer represents the volume of the i-th package. Output: - Output M lines. The i-th line should contain the indices (1-based) of the packages assigned to the i-th bin. - If there is more than one valid distribution, you can output any of them. Example Input: 8 3 8 3 5 2 7 1 4 6 Output: 1 3 6 8 2 7 4 5 Explanation: Here, the first bin contains packages with volumes [8, 5, 4, 6] which sum to 23. The second bin contains packages with volumes [3, 7] which sum to 10. The third bin contains packages with volumes [2, 1] which sum to 3. The sums of volumes in the bins are roughly equal, making it an efficient distribution.","solution":"from itertools import accumulate def distribute_packages(N, M, volumes): # Sort the packages by volume in descending order alongside their original indices sorted_packages = sorted([(volumes[i], i + 1) for i in range(N)], reverse=True) bins = [[] for _ in range(M)] sums = [0] * M # Distribute packages to bins in a way that tries to balance the sum of volumes for volume, index in sorted_packages: min_index = sums.index(min(sums)) bins[min_index].append(index) sums[min_index] += volume return bins # Sample input N = 8 M = 3 volumes = [8, 3, 5, 2, 7, 1, 4, 6] # Testing the function with sample input bins = distribute_packages(N, M, volumes) for b in bins: print(\\" \\".join(map(str, b)))"},{"question":"Your task is to create a function that helps a new social media platform analyze user engagement statistics. The function should be capable of identifying the most popular posts based on two criteria: the highest number of likes and the highest number of shares. You are given an input list of dictionaries, where each dictionary represents a post. Each dictionary contains the following keys: - \\"id\\": an integer representing the unique identifier of the post. - \\"likes\\": an integer representing the number of likes the post received. - \\"shares\\": an integer representing the number of times the post was shared. The function should return two lists: 1. A list containing the IDs of the posts with the highest number of likes. 2. A list containing the IDs of the posts with the highest number of shares. If there are multiple posts with the highest number of likes or shares, the function should include all of their IDs in the lists. Function Signature: ```python def most_popular_posts(posts: List[Dict[str, int]]) -> Tuple[List[int], List[int]]: pass ``` Input A list of dictionaries representing posts, where each dictionary contains the keys \\"id\\", \\"likes\\", and \\"shares\\". The list can have up to 10^5 elements, and each integer value in the dictionaries is in the range [0, 10^6]. Output A tuple containing two lists: 1. A list of post IDs with the highest number of likes. 2. A list of post IDs with the highest number of shares. Examples Input ```python posts = [ {\\"id\\": 1, \\"likes\\": 10, \\"shares\\": 5}, {\\"id\\": 2, \\"likes\\": 15, \\"shares\\": 7}, {\\"id\\": 3, \\"likes\\": 15, \\"shares\\": 2}, {\\"id\\": 4, \\"likes\\": 10, \\"shares\\": 7} ] ``` Output ```python ([2, 3], [2, 4]) ``` Input ```python posts = [ {\\"id\\": 1, \\"likes\\": 3, \\"shares\\": 4}, {\\"id\\": 2, \\"likes\\": 5, \\"shares\\": 6}, {\\"id\\": 3, \\"likes\\": 5, \\"shares\\": 4}, {\\"id\\": 4, \\"likes\\": 2, \\"shares\\": 10} ] ``` Output ```python ([2, 3], [4]) ```","solution":"from typing import List, Dict, Tuple def most_popular_posts(posts: List[Dict[str, int]]) -> Tuple[List[int], List[int]]: Returns two lists: 1. A list of post IDs with the highest number of likes. 2. A list of post IDs with the highest number of shares. if not posts: return ([], []) # Find the maximum number of likes and shares max_likes = max(post[\\"likes\\"] for post in posts) max_shares = max(post[\\"shares\\"] for post in posts) # Collect all post IDs with the maximum likes and shares most_liked_posts = [post[\\"id\\"] for post in posts if post[\\"likes\\"] == max_likes] most_shared_posts = [post[\\"id\\"] for post in posts if post[\\"shares\\"] == max_shares] return (most_liked_posts, most_shared_posts)"},{"question":"You are given a 2D grid that represents a forest, where each cell is either a tree (denoted by `T`) or an empty space (denoted by `.`). The forest is surrounded by water, so the cells outside the boundary of the grid can be considered as water. Your job is to determine how many distinct clusters of trees are present in the forest. A cluster is defined as a group of adjacent trees connected horizontally or vertically (i.e., 4-directionally connected). Two trees are in the same cluster if they are connected directly or indirectly. Write a function to count the number of distinct clusters of trees in the forest. Input - The first line contains two integers, `N` and `M` (1 ≤ N, M ≤ 100), representing the number of rows and columns of the grid, respectively. - The next N lines each contain a string of length M, consisting of the characters \'T\' and \'.\', representing the forest. Output - Output a single integer, the number of distinct tree clusters present in the forest. Example Input: 5 6 TT...T .TT.T. .T.... ...TT. ...T.. Output: 4 Explanation The four clusters in the example are as follows: 1. The cluster contains trees at positions (0, 0), (0, 1), (1, 1), and (1, 2). 2. The cluster contains a single tree at position (0, 5). 3. The cluster contains trees at positions (3, 3) and (3, 4). 4. The cluster contains a single tree at position (4, 3). Each cluster is formed by trees connected horizontally or vertically.","solution":"def count_tree_clusters(N, M, forest): def dfs(x, y): if x < 0 or y < 0 or x >= N or y >= M or forest[x][y] != \'T\': return forest[x][y] = \'.\' for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) cluster_count = 0 for i in range(N): for j in range(M): if forest[i][j] == \'T\': cluster_count += 1 dfs(i, j) return cluster_count"},{"question":"An undirected graph is non-bipartite if it contains an odd-length cycle. You are given an undirected graph with n vertices and m edges. Your task is to determine whether the graph is bipartite or non-bipartite. Two vertices are part of the same set if they are connected by an even-length path. This means that in a bipartite graph, vertices can be colored with two colors such that no two adjacent vertices share the same color. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 1000). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an undirected edge between vertex u and vertex v. Output On a single line, print \\"Bipartite\\" if the graph is bipartite, otherwise print \\"Non-bipartite\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output Bipartite Input 3 3 1 2 2 3 3 1 Output Non-bipartite Note In the first example, we can color vertices 1 and 3 as one color and vertices 2 and 4 as another color, ensuring that no two adjacent vertices share the same color. Therefore, the graph is bipartite. In the second example, the graph contains a cycle of length 3 (1-2-3-1), which is odd, so it is non-bipartite.","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = {} for start in range(1, n + 1): if start not in color: queue = deque([start]) color[start] = 0 # Start coloring start node with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] # Alternate color queue.append(neighbor) elif color[neighbor] == color[node]: return \\"Non-bipartite\\" return \\"Bipartite\\" # Example usage: # n = 4 # m = 4 # edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(is_bipartite(n, m, edges)) # Output: \\"Bipartite\\""},{"question":"An online store offers discounts on bulk purchases. The owner wants to create a system that determines the total cost of an order based on the quantity of items purchased and the current promotion. The owner uses a tiered discount system where different quantities of purchases correspond to different discount rates. Specifically, the discount rates are as follows: - For quantities `1` to `10`, there\'s no discount, so the item is sold at the normal price. - For quantities `11` to `50`, a bulk discount of 5% is applied to the entire order. - For quantities `51` to `100`, a greater bulk discount of 10% is applied. - For quantities above `100`, a maximum bulk discount of 15% is applied. Given the price per item and the quantity of items ordered, write a program that calculates the total cost after applying the appropriate discount based on the tiered discount system. # Input The input consists of two lines: - The first line contains a floating-point number `p` (0 < p ≤ 10^6) — the price per item. - The second line contains an integer `q` (1 ≤ q ≤ 10^6) — the quantity of items purchased. # Output Print a single floating-point number rounded to two decimal places — the total cost after applying the discount. # Example Input ``` 99.99 25 ``` Output ``` 2374.76 ``` Input ``` 100.00 120 ``` Output ``` 10200.00 ``` # Note - In the first example, since the quantity `25` falls between `11` and `50`, a 5% discount is applied, leading to a total cost of `25 * 99.99 * 0.95 = 2374.7625`, which rounds to `2374.76`. - In the second example, since the quantity `120` is greater than `100`, a 15% discount is applied, resulting in a total cost of `120 * 100.00 * 0.85 = 10200.00`.","solution":"def calculate_total_cost(price_per_item, quantity): Calculates the total cost of an order based on the price per item and quantity, applying the appropriate discount based on a tiered discount system. if 1 <= quantity <= 10: discount_rate = 0.0 elif 11 <= quantity <= 50: discount_rate = 0.05 elif 51 <= quantity <= 100: discount_rate = 0.10 else: discount_rate = 0.15 total_cost = price_per_item * quantity * (1 - discount_rate) return round(total_cost, 2)"},{"question":"You are given a list of integers where each integer denotes the score obtained in a challenge. Perform a sequence of operations to keep track of the top three distinct scores among the given list. If there are fewer than three distinct scores, return all the distinct scores present. Write a program that prints a list of the top three distinct scores in descending order at the end of processing the entire list. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of scores. The second line contains n integers separated by single spaces, each representing a score. Each score is an integer in the inclusive range from -10^9 to 10^9. Output In the only line, output a list of the top three distinct scores in descending order. If there are fewer than three distinct scores, list all of them in descending order. Examples Input 7 100 200 100 400 300 200 500 Output [500, 400, 300] Input 5 10 10 10 20 20 Output [20, 10]","solution":"def top_three_scores(n, scores): Returns a list of top three distinct scores in descending order. If there are fewer than three distinct scores, return them all. unique_scores = list(set(scores)) unique_scores.sort(reverse=True) return unique_scores[:3] # Example usage: # n = 7 # scores = [100, 200, 100, 400, 300, 200, 500] # print(top_three_scores(n, scores)) # Output: [500, 400, 300]"},{"question":"You are given an array of n integers. Your task is to find the maximum sum of a contiguous subarray that you can obtain, with the constraint that you cannot choose two adjacent elements to be part of the subarray. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (|a_i| ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of a non-adjacent subarray. Examples Input 6 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 Note In the first example, the optimal subarray would be [3, 5, 7], which sums up to 15. In the second example, the optimal subarray would be [3, 10], which sums up to 13. Explanation To solve the problem, you can use dynamic programming to keep track of the maximum sum that can be achieved by considering non-adjacent elements. Use two variables to store the maximum sum including or excluding the current element, and update them as you iterate through the array.","solution":"def max_non_adjacent_sum(arr): if not arr: return 0 include = 0 exclude = 0 for num in arr: # Current max excluding num new_exclude = max(include, exclude) # Current max including num include = exclude + num exclude = new_exclude # Return maximum of include and exclude return max(include, exclude)"},{"question":"In a certain country, the transportation system between cities is represented by a directed graph with N cities and M one-way roads. Each city is represented by a vertex, and each road is represented by a directed edge consisting of two integers u and v, signifying a road from city u to city v. Your task is to determine the number of distinct circuits in this directed graph. A circuit is a path that starts and ends at the same vertex. You\'re required to find all such distinct circuits. Constraints * 1 leq N leq 1,000 * 0 leq M leq 5,000 * 1 leq u_i, v_i leq N * No two roads are the same; that is, if there\'s a road from u to v, then there aren\'t multiple roads from u to v. Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Output Print the number of distinct circuits in the directed graph. Examples Input 4 5 1 2 2 3 3 1 3 4 4 3 Output 2 Input 5 7 1 2 2 3 3 1 1 4 4 5 5 4 4 2 Output 3","solution":"def find_all_circuits(N, M, edges): N: int, number of cities (vertices) M: int, number of roads (edges) edges: list of tuples, each tuple (u, v) representing a road from city u to city v from collections import defaultdict, deque # Create the graph adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) def dfs(node, start, visited, path): visited[node] = True path.append(node) # Check if we have formed a circuit if node in graph: for neighbor in graph[node]: if neighbor == start: circuits.add(tuple(sorted(path))) if not visited[neighbor]: dfs(neighbor, start, visited, path) path.pop() visited[node] = False circuits = set() for i in range(1, N + 1): visited = [False] * (N + 1) dfs(i, i, visited, deque()) return len(circuits) def count_distinct_circuits(N, M, road_pairs): return find_all_circuits(N, M, road_pairs)"},{"question":"In a bustling town, there is a complex network of conveyor belts that transport goods from one place to another. Each belt connects exactly two points and has a directional flow that dictates the direction in which goods must be transported. The town\'s logistics team needs to determine the shortest time required to deliver a package from the starting point \'S\' to the destination point \'D\'. However, some conveyor belts are temporarily out of service and cannot be used under any circumstances. Write a program that calculates the shortest delivery time, in terms of the minimum number of conveyor belts used, from \'S\' to \'D\'. If it is impossible to reach the destination, output \\"No Path Available\\". Input The first line of input contains two integers, n and m, which represent the number of points and the number of conveyor belts, respectively. (1 ≤ n ≤ 1,000, 0 ≤ m ≤ 2,000) The second line contains two distinct integers, S and D, the starting point and the destination point. (1 ≤ S, D ≤ n) The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, t = 0 or 1). These describe a conveyor belt that goes from point u to point v and is in service if t=1 or out of service if t=0. Output Output the minimum number of conveyor belts needed to deliver the package from \'S\' to \'D\'. If no path is available, print \\"No Path Available\\". Example Input 6 7 1 4 1 2 1 2 3 1 3 4 1 1 5 1 5 6 1 6 4 0 2 6 1 Output 3","solution":"from collections import deque def shortest_delivery_time(n, m, S, D, conveyor_belts): # Convert the list of conveyor belts into an adjacency list representation graph = {i: [] for i in range(1, n+1)} for u, v, t in conveyor_belts: if t == 1: # Only consider belts that are in service graph[u].append(v) # BFS to find the shortest path from S to D queue = deque([(S, 0)]) # (current point, number of steps) visited = set() visited.add(S) while queue: point, steps = queue.popleft() if point == D: return steps for neighbor in graph[point]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return \\"No Path Available\\""},{"question":"Bob is a fan of isograms, which are words or phrases without a repeating letter. He often challenges his friends to find the longest isogram within a given string. An isogram can be a contiguous substring or a non-contiguous subsequence of the given string. Bob loves efficiency and wants a quick solution. Given a string `s` consisting of lowercase Latin letters, your task is to help Bob by finding the length of the longest isogram subsequence in `s`. Input The input consists of a single string `s` (1 ≤ |s| ≤ 1000). Output Output a single integer — the length of the longest isogram subsequence of `s`. Examples Input abacaba Output 3 Input bbbbb Output 1 Input codedecombat Output 5 Note: In the first example, one possible longest isogram subsequence is \\"bac\\". In the second example, the longest isogram subsequence can only be \\"b\\". In the third example, one possible longest isogram subsequence is \\"codem\\".","solution":"def longest_isogram_subsequence(s): Returns the length of the longest isogram subsequence of s. unique_characters = set(s) return len(unique_characters)"},{"question":"You are given a sequence of n integers and you need to find all unique triplets in the array which gives the sum of zero. Input The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^5 ≤ a_i ≤ 10^5) — the elements of the array. Output Print all unique triplets that sum up to zero. Each triplet should be printed in a new line with elements separated by spaces. The triplets should be printed in a sorted order with respect to each individual triplet, and the collection of triplets should also be sorted. Examples Input 6 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Input 5 0 0 0 0 0 Output 0 0 0 Note: In the first example, the unique triplets that sum up to zero are [-1, -1, 2] and [-1, 0, 1]. In the second example, the only possible triplet that sums up to zero is [0, 0, 0].","solution":"def three_sum_zero(n, arr): Finds all unique triplets in the array which give the sum of zero. The function returns a list of sorted triplets sorted by triplets and within each triplet. arr.sort() result = set() for i in range(n): if i > 0 and arr[i] == arr[i - 1]: continue l, r = i + 1, n - 1 while l < r: sum = arr[i] + arr[l] + arr[r] if sum == 0: result.add((arr[i], arr[l], arr[r])) l += 1 r -= 1 while l < r and arr[l] == arr[l - 1]: l += 1 while l < r and arr[r] == arr[r + 1]: r -= 1 elif sum < 0: l += 1 else: r -= 1 result = list(result) result.sort() return result"},{"question":"You are given a list of integers. Your task is to find the longest subsequence such that all elements of the subsequence are in non-decreasing order. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10000). Output Output the longest non-decreasing subsequence of the given list. If there are multiple longest subsequences with the same length, output any one of them. Examples Input 9 5 3 4 8 6 7 9 10 12 Output 3 4 6 7 9 10 12 Input 6 1 1 1 1 1 1 Output 1 1 1 1 1 1","solution":"def longest_non_decreasing_subsequence(arr): Returns the longest non-decreasing subsequence if not arr: return [] n = len(arr) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_len = max(dp) index = dp.index(max_len) longest_subseq = [] while index != -1: longest_subseq.append(arr[index]) index = prev[index] return longest_subseq[::-1]"},{"question":"Given an array of integers, find a subarray with the maximum possible sum. Input: The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers separated by spaces representing the elements of the array. Output: Output a single integer representing the maximum sum of any subarray. Examples Input 5 1 -2 3 -1 2 Output 4 Input 3 -1 -2 -3 Output -1","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of any subarray within the given array. max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"A group of friends decided to split the cost of buying several gift items equally among themselves. Each person contributes the same amount, and the exact contribution may leave some friend(s) with a little less than the others in terms of fractional amounts (e.g., cents). Write a function to calculate the amount each friend has to pay and determine if there is any fractional amount left after splitting the total cost. Input The first line contains two positive integers c and f (1 ≤ c ≤ 10^9, 1 ≤ f ≤ 1000), where c is the total cost shared among the friends and f is the number of friends. Output Output two numbers: the amount each friend has to pay, and the fractional amount if any, after splitting the cost. Examples Input 100 3 Output 33 1 Input 50 5 Output 10 0","solution":"def split_cost(c, f): Calculate how much each friend pays and the fractional amount left after splitting the cost. Args: c (int): Total cost shared among the friends. f (int): Number of friends. Returns: tuple: Amount each friend pays and the fractional amount left. each_pays = c // f fractional_left = c % f return each_pays, fractional_left"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform at most one operation of inserting a single lowercase English letter at any position in the string. The goal is to make the string a palindrome. Determine if it\'s possible to make the string a palindrome with at most one insertion. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100). Output Output \\"YES\\" if it is possible to make the string a palindrome with at most one insertion, otherwise output \\"NO\\". Examples Input abca Output YES Input abc Output NO Note In the first example, inserting \'b\' at position 2 (0-based indexing) results in the string \\"abcba\\", which is a palindrome. In the second example, no single insertion can make the string \\"abc\\" a palindrome.","solution":"def can_make_palindrome(s): Determines if it\'s possible to make the string a palindrome with at most one insertion. Parameters: s (str): the input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it\'s possible to make the string a palindrome with at most one insertion, otherwise \\"NO\\". def is_palindrome(s): return s == s[::-1] n = len(s) for i in range(n + 1): for char in \'abcdefghijklmnopqrstuvwxyz\': new_s = s[:i] + char + s[i:] if is_palindrome(new_s): return \\"YES\\" return \\"NO\\""},{"question":"In a world of binary trees, two trees are said to be twins if they are identical in structure and their respective nodes have the same values. However, a powerful wizard decided to hide twin trees among some impostors. He needs your help to identify these twin trees. For this task, you are given two binary trees\' root nodes. Your objective is to determine whether these trees are twins or not. Each tree\'s node contains an integer value, a reference to the left child, and a reference to the right child. Write a function `are_twin_trees` that accepts two binary tree nodes and returns a boolean value indicating whether the two trees are twins. # Function Signature ```python def are_twin_trees(root1, root2): # Your code here ``` # Input - `root1`: Root node of the first binary tree (can be `None` if the tree is empty) - `root2`: Root node of the second binary tree (can be `None` if the tree is empty) # Output Return `True` if the trees are twins, and `False` otherwise. # Examples Example 1 ```python # Tree 1: # 1 # / # 2 3 # / # 4 5 # # Tree 2: # 1 # / # 2 3 # / # 4 5 root1 = TreeNode(1) root1.left = TreeNode(2) root1.right = TreeNode(3) root1.right.left = TreeNode(4) root1.right.right = TreeNode(5) root2 = TreeNode(1) root2.left = TreeNode(2) root2.right = TreeNode(3) root2.right.left = TreeNode(4) root2.right.right = TreeNode(5) assert are_twin_trees(root1, root2) == True ``` Example 2 ```python # Tree 1: # 1 # / # 2 3 # / # 4 # # Tree 2: # 1 # / # 2 3 # / # 4 5 root1 = TreeNode(1) root1.left = TreeNode(2) root1.right = TreeNode(3) root1.right.left = TreeNode(4) root2 = TreeNode(1) root2.left = TreeNode(2) root2.right = TreeNode(3) root2.right.left = TreeNode(4) root2.right.right = TreeNode(5) assert are_twin_trees(root1, root2) == False ``` # Constraints - The number of nodes in each tree will not exceed 10,000. - Each node\'s value will be an integer within the range of `-10^5` to `10^5`.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def are_twin_trees(root1, root2): Determines if two binary trees are twins. Params: - root1 (TreeNode): Root node of the first binary tree - root2 (TreeNode): Root node of the second binary tree Returns: - bool: True if both trees are twins, False otherwise if root1 is None and root2 is None: return True if root1 is None or root2 is None: return False if root1.value != root2.value: return False return are_twin_trees(root1.left, root2.left) and are_twin_trees(root1.right, root2.right)"},{"question":"You are given a list of integers representing the prices of a stock on consecutive days. Your task is to determine the maximum profit you can achieve by executing at most two transactions. A transaction consists of buying and then selling one share of the stock. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Write a function `maxProfit` that takes a list of integers `prices` and returns the maximum profit achievable. If no transactions can be made, return 0. # Example 1 Input: ``` prices = [3,3,5,0,0,3,1,4] ``` Output: ``` 6 ``` Explanation: Execute the first transaction by buying on day 4 (price = 0) and selling on day 6 (price = 3). Then execute the second transaction by buying on day 7 (price = 1) and selling on day 8 (price = 4). # Example 2 Input: ``` prices = [1,2,3,4,5] ``` Output: ``` 4 ``` Explanation: Execute the first transaction by buying on day 1 (price = 1) and selling on day 5 (price = 5). Note that you cannot perform a second transaction as this would require re-buying and re-selling the stock. # Example 3 Input: ``` prices = [7,6,4,3,1] ``` Output: ``` 0 ``` Explanation: In this case, no transaction is made as the stock prices are continuously decreasing. # Example 4 Input: ``` prices = [1] ``` Output: ``` 0 ``` Explanation: In this case, no transaction is possible with only one day of stock prices. # Constraints * 1 <= `prices.length` <= 10^5 * 0 <= `prices[i]` <= 10^5 # Function Signature ```python def maxProfit(prices: List[int]) -> int: ```","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) # Initialize variables to keep track of the maximum profit with at most two transactions buy1, sell1, buy2, sell2 = float(\'-inf\'), 0, float(\'-inf\'), 0 for price in prices: # First buy buy1 = max(buy1, -price) # First sell sell1 = max(sell1, buy1 + price) # Second buy buy2 = max(buy2, sell1 - price) # Second sell sell2 = max(sell2, buy2 + price) return sell2"},{"question":"You are given a grid with n rows and m columns, where each cell contains an integer value representing its cost. You need to start at the top-left corner of the grid and move to the bottom-right corner, collecting the cost of each cell as you move. You are only allowed to move right or down at each step. Your objective is to collect the maximum total cost by the time you reach the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers representing the cost of the cells in the grid (0 ≤ cost ≤ 10^6). Output Output a single integer — the maximum total cost to reach the bottom-right corner of the grid. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the given example, the optimal path to maximize total cost is: 1 -> 4 -> 7 -> 8 -> 9, collecting a total cost of 29.","solution":"def maximum_total_cost(n, m, grid): # Initialize a dp table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row (left to right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (top to bottom) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Your task is to write a function that rearranges a given list of integers so that the even numbers appear before the odd numbers while preserving the relative order of the even and odd numbers. Input A list of integers is given as input. You can assume the following conditions: * The number of integers in the list is less than or equal to 1000. * The value of each integer is between -1000 and 1000 inclusive. Output A list of integers with all even numbers placed before the odd numbers while maintaining their relative order from the original list. Example Input [3, 1, 2, 4, 5, 8, 7, 6] Output [2, 4, 8, 6, 3, 1, 5, 7]","solution":"def rearrange_even_odd(numbers): Rearranges the numbers in the list so that the even numbers appear before the odd numbers while preserving the relative order of both. even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] return even_numbers + odd_numbers"},{"question":"Imagine you are tasked with managing an online course platform where multiple users can sign up to become instructors. Each instructor can create multiple courses, and each course has a unique enrollment key that students use to enroll. Your task is to write a program that helps the platform to verify the eligibility of the instructors based on two conditions and print how many instructors are eligible. Eligibility Conditions: 1. An instructor must have created at least `M` courses. 2. Among all the courses they created, at least one course must have at least `T` students enrolled. Input The first line contains three integers `N`, `M`, and `T` - the number of instructors, the minimum number of courses an instructor must create, and the minimum number of students that must be enrolled in at least one of their courses to be eligible. The next `N` blocks each contain: - A string `instructor_name` representing the name of the instructor. - An integer `K` representing the number of courses the instructor has created. - `K` integers where each integer represents the number of students enrolled in the respective course. Output Print a single integer - the number of eligible instructors. Constraints: 1 ≤ N, M, T ≤ 1000 1 ≤ K ≤ 100 0 ≤ students_enrolled ≤ 1000 Example Input: 3 2 30 Alice 3 15 30 5 Bob 2 40 10 Charlie 2 20 19 Output: 2 Explanation For the first example: - Alice has created 3 courses (> M = 2) and one of her courses has 30 students enrolled (≥ T = 30), so she is eligible. - Bob has created 2 courses (M = 2) and one of his courses has 40 students enrolled (≥ T = 30), so he is eligible. - Charlie has created 2 courses (M = 2) but neither of his courses meets the minimum of 30 students enrolled (T = 30), so he is not eligible. The output is 2 because only Alice and Bob meet the eligibility criteria.","solution":"def count_eligible_instructors(N, M, T, instructor_info): Returns the number of eligible instructors based on the given conditions. Parameters: N (int): Number of instructors. M (int): Minimum number of courses an instructor must create. T (int): Minimum number of students that must be enrolled in at least one of the instructor\'s courses. instructor_info (list of tuples): List containing instructor details, where each tuple contains (instructor_name, K, [student_counts]) Returns: int: Number of eligible instructors. eligible_count = 0 for info in instructor_info: instructor_name, K, student_counts = info if K >= M and any(students >= T for students in student_counts): eligible_count += 1 return eligible_count"},{"question":"A company warehouse is organized with multiple racks, each having a distinct identifier. There are certain operations that need to be performed on these racks, such as adding new identifiers or checking which is the smallest unused identifier. Create a program that carries out these operations. The program takes a list of current rack identifiers and outputs the smallest unused identifier in the sequence. Input The first line contains one integer n (1 ≤ n ≤ 3000) — the number of racks currently in use. The second line contains n distinct integers r1, r2, ..., rn (1 ≤ ri ≤ 3000) — identifiers of these racks. Output Output the smallest unused identifier for the next rack. Examples Input 4 5 1 9 3 Output 2","solution":"def find_smallest_unused_identifier(n, identifiers): Returns the smallest unused identifier for the next rack. identifiers_set = set(identifiers) for i in range(1, 3002): if i not in identifiers_set: return i"},{"question":"You are given a grid of size n × m filled with integers. Your task is to find the maximum sum of elements you can obtain by following these rules: 1. You start at any cell in the first row. 2. You can move to the cell directly below or to the cell that is diagonally below on the left or the right. 3. You must always move to the row immediately below the current cell until you reach the last row. Write a function `max_path_sum(grid: List[List[int]]) -> int` that computes the maximum sum possible following the above rules. # Input - The function receives a 2D list `grid` of integers where `grid[i][j]` represents the integer in the ith row and jth column of the grid. - The dimensions of the grid are `1 ≤ n, m ≤ 1000`. - Each element in the grid is an integer between `1` and `1000`. # Output - The function should return an integer, representing the maximum sum of the path from the first row to the last row. # Example ```python grid = [ [2, 1, 3], [6, 5, 4], [7, 8, 9] ] print(max_path_sum(grid)) # Output: 17 Explanation: One of the paths to get the maximum sum is 2 -> 5 -> 9 which gives the sum of 17. ``` # Note The function should be efficient, as the size of the grid could be large. Happy coding!","solution":"from typing import List def max_path_sum(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # copy the first row to start forming the solution dp = grid[0][:] # iterate over each row starting from the second row for i in range(1, n): new_dp = [0] * m # Create new dp array for the current row for j in range(m): # iterate over each column of the current row # take value from directly above max_sum = dp[j] # take value from the left diagonal, if it exists if j > 0: max_sum = max(max_sum, dp[j - 1]) # take value from the right diagonal, if it exists if j < m - 1: max_sum = max(max_sum, dp[j + 1]) # store the calculated max path sum for this cell new_dp[j] = grid[i][j] + max_sum # update dp to be the new_dp array for the next iteration dp = new_dp # the max path sum will be the maximum value in the last dp array return max(dp)"},{"question":"John loves sequences. Recently, he became interested in sequences with a unique property: the sequence is made up of non-negative integers and each integer in the sequence is greater than or equal to the sum of all previous integers in the sequence. Given a number k, John wants to construct the longest sequence with distinct non-negative integers that satisfies this property. Can you help him determine the length of this sequence? Input The first line contains an integer k (1 ≤ k ≤ 10^9). Output Print a single integer — the length of the longest sequence that can be constructed with the given property. Examples Input 5 Output 2 Input 10 Output 4","solution":"def longest_sequence_length(k): Given a number k, this function returns the length of the longest sequence of distinct non-negative integers such that each integer is greater than or equal to the sum of all preceding integers in the sequence. sum_current = 0 length = 0 while sum_current <= k: length += 1 sum_current += length # The loop goes one step further, so we subtract one to get the correct length return length - 1"},{"question":"In a distant land, there is a kingdom with numerous cities connected by a network of bidirectional roads. The road system is such that every two cities are connected by exactly one path. In other words, the road system forms a tree. The king wants to spread news starting from the capital city to all other cities using these roads. Once the news reaches a city, it continues to propagate along the roads to the other connected cities. Each road takes exactly one hour to traverse. Given the number of cities, the road connections between them, and the capital city\'s identifier, your task is to determine the maximum time it will take for the news to reach the furthest city from the capital. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of cities. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) denoting a road between cities u and v. The last line contains a single integer capital (1 ≤ capital ≤ n) — the city from which the news starts spreading. Output Print a single integer — the maximum number of hours it will take for the news to reach the city furthest from the capital. Example Input 7 1 2 1 3 2 4 2 5 3 6 3 7 1 Output 2","solution":"from collections import defaultdict, deque def max_time_to_spread_news(n, roads, capital): # Create adjacency list for the tree tree = defaultdict(list) for u, v in roads: tree[u].append(v) tree[v].append(u) # Perform BFS to find the maximum depth from the capital def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, current_depth) visited[start] = True max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return max_depth return bfs(capital)"},{"question":"An engineer is working on an experiment involving a series of connected water tanks. Each tank can be thought of as a node in a graph, and each connection between two tanks as an edge. The complexity of the system is that water can flow in both directions between any two connected tanks. Given a graph where each node represents a tank and each edge represents a pipe that allows water to flow from one tank to another, the engineer wants to determine the minimum number of operations required to connect all the tanks into one connected system. An operation consists of adding a pipe (edge) between any two tanks (nodes). The engineer also wants to ensure that no tank is left isolated and that water can flow from any tank to any other tank within the system, meaning the resulting system should be a single connected component. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of tanks (nodes), and an integer m (0 ≤ m ≤ 10^5), the number of existing pipes (edges). The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), indicating there is a pipe between tanks u and v. Output Output a single integer, the minimum number of operations required to connect all tanks. Example Input: 6 4 1 2 2 3 4 5 5 6 Output: 2 Note In the given example, there are two disconnected components: {1, 2, 3} and {4, 5, 6}. To connect all tanks into one system, we need to add a pipe between any tank in the first component and any tank in the second component, for example, between tanks 3 and 4. Then we can perform one more operation to connect the last remaining isolated component with the now connected components, for example, between tank 3 and tank 5. Therefore, we need 2 new pipes in total.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_operations_to_connect_tanks(n, m, connections): parent = [i for i in range(n)] rank = [0] * n for u, v in connections: union(parent, rank, u - 1, v - 1) unique_components = len(set(find(parent, i) for i in range(n))) return unique_components - 1"},{"question":"David is developing a game in which he needs to generate a specific pattern of stars and dashes arranged in a grid. The task is to create a grid of size NxM, where N is the number of rows and M is the number of columns. Each cell in the grid should either contain a star (*) or a dash (-) based on the following rules: 1. The first character in every row should be a star (*). 2. For every subsequent character in the row, if the character to the left is a star, then the current character should be a dash, and if the character to the left is a dash, then the current character should be a star. David could manually create the pattern, but he wants a program to do it for him to avoid errors and save time. Write a program that takes two integers, N and M, representing the dimensions of the grid, and prints the grid following the described pattern. Input The input is given in the following format: N M Here, 1 leq N, M leq 100. Output Print the resulting grid with N rows and M columns. Example Input 3 4 Output * -* -* * -* Input 2 5 Output * -* -* -* **Note**: The backslashes are used to show the grid visually in the example and are not to be included in the output.","solution":"def generate_grid(N, M): Generates an NxM grid where each cell contains a star (*) or a dash (-) based on specific rules. Parameters: N (int): Number of rows M (int): Number of columns Returns: List[str]: A list of strings representing the grid grid = [] for i in range(N): row = [] for j in range(M): if j % 2 == 0: row.append(\'*\') else: row.append(\'-\') grid.append(\'\'.join(row)) return grid"},{"question":"You are given a string S consisting of lowercase English letters and a set of special characters C. A move consists of selecting any one character in S and replacing it with another character from the set C. Your task is to determine the minimum number of moves required to make the characters in S unique. # Input - The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. - The first line of each test case contains a string S (1 ≤ |S| ≤ 1000). - The second line of each test case contains a string C consisting of distinct lowercase English letters (1 ≤ |C| ≤ 26). # Output For each test case, print the minimum number of moves required to make the characters in S unique. # Example Input ``` 3 aabb xyz abcd lmno abcdefg pqr ``` Output ``` 2 0 0 ``` # Note In the first test case, `S = aabb` and `C = xyz`. To make all characters unique, we can replace the second \'a\' with \'x\' and the second \'b\' with \'y\', resulting in the string \\"abxy\\". Thus, a minimum of 2 moves is required. In the second test case, `S = abcd` and `C = lmno`. All characters in S are already unique, so no moves are required. In the third test case, `S = abcdefg` and `C = pqr`. All characters in S are already unique, so no moves are required.","solution":"def min_moves_to_unique_chars(t, test_cases): results = [] for i in range(t): S, C = test_cases[i] char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 moves = 0 replaceable_chars = list(C) for char in char_count: while char_count[char] > 1 and replaceable_chars: replaceable_char = replaceable_chars.pop(0) char_count[char] -= 1 moves += 1 results.append(moves) return results"},{"question":"You are given a rectangular grid of size M x N, with some cells containing an obstacle. You are also given a robot capable of moving in 4 directions: up, down, left, and right. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. Your task is to write a program to determine the minimum number of moves required for the robot to go from the starting position to the destination. If there is no possible way for the robot to reach the destination, the program should return -1. The robot cannot move into cells that contain an obstacle. Input The input has the following format: M N m11 m12 ... m1N m21 m22 ... m2N ... mM1 mM2 ... mMN Where M and N are the number of rows and columns of the grid, respectively. mij denotes the cell value at position (i, j), where 0 represents an empty cell the robot can move into, and 1 represents an obstacle that the robot cannot enter. The input meets the following constraints: 2 ≤ M, N ≤ 1000. All values mij are either 0 or 1. Output Print the minimum number of moves required for the robot to reach the bottom-right corner, or -1 if there is no possible way. Examples Input 3 4 0 0 0 1 1 0 0 0 1 1 0 0 Output 5 Input 4 4 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 Output 6 Input 3 5 0 1 0 0 0 1 1 0 1 1 0 0 0 1 0 Output 7 Input 2 2 0 1 0 0 Output 2","solution":"from collections import deque def min_moves_to_reach_end(M, N, grid): Given a rectangular grid and a robot starting at the top-left corner, finds the minimum number of moves required to reach the bottom-right corner or returns -1 if it\'s not possible. :param M: Number of rows in the grid :param N: Number of columns in the grid :param grid: The grid itself :return: Minimum number of moves or -1 if there is no path # Directions to move in the grid directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if start or end is blocked if grid[0][0] == 1 or grid[M-1][N-1] == 1: return -1 # Initialize deque for BFS (row, col, distance) queue = deque([(0, 0, 0)]) visited = set([(0, 0)]) # Perform BFS while queue: r, c, dist = queue.popleft() # Check if we reached the destination if r == M-1 and c == N-1: return dist # Explore all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If we exhausted the queue and never reached the end return -1 # Parse the input def parse_input(data): Parses the input string and returns M, N, and the grid as a list of lists. lines = data.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return M, N, grid"},{"question":"Captain\'s Ship has an advanced navigation software that helps determine the shortest route at sea. However, the software has developed a bug. When the ship\'s route is plotted, the software sometimes produces duplicate coordinates due to a malfunction in the coordinate generation module. The Captain needs your help to clean up the route before the ship sets sail. Write a program that takes an array of coordinates representing the plotted route and removes all the duplicate coordinates while preserving the original order of the first occurrence of each coordinate. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100000) — the number of coordinates in the route. The next n lines each contain two integers x and y (0 ≤ x, y ≤ 10^9) representing the coordinates. Output For each test case, print the new length of the coordinates sequence followed by the coordinates themselves after removing duplicates. Example Input 2 5 1 1 2 2 1 1 3 3 2 2 3 0 0 1 2 0 0 Output 3 1 1 2 2 3 3 2 0 0 1 2 Note In the first sample, the duplicate coordinates (1,1) and (2,2) are removed, so the remaining coordinates are (1,1), (2,2), and (3,3). In the second sample, the route is already cleaned with only one pair of duplicates (0,0).","solution":"def remove_duplicates(t, test_cases): results = [] for case in test_cases: n, coordinates = case seen = set() new_route = [] for coord in coordinates: if coord not in seen: seen.add(coord) new_route.append(coord) results.append((len(new_route), new_route)) return results"},{"question":"You are given a list of strings representing log entries from a company\'s audit system. Each entry is in the following format: ``` event_type timestamp user_id action ``` - `event_type` is a single word representing the type of the event (e.g., \\"login\\", \\"transaction\\"). - `timestamp` is in the format of \\"YYYY-MM-DD HH:MM:SS\\". - `user_id` is an integer representing the user who performed the action. - `action` is a string detailing the specific action performed. For example: ``` login 2023-06-12 08:23:35 4567 start_session transaction 2023-06-12 08:25:05 4567 purchase_item logout 2023-06-12 08:30:00 4567 end_session ``` Your task is to write a function that processes such logs and returns the `user_id` of the user who generated the maximum number of specified `event_type` within a given time range. If multiple users have the same maximum event count, return the smallest `user_id` among them. The function should take three arguments: - `logs`: a list of log entries formatted as strings. - `event_type`: a string representing the event type to track. - `start_time`: a string representing the start of the time range in the format \\"YYYY-MM-DD HH:MM:SS\\". - `end_time`: a string representing the end of the time range in the format \\"YYYY-MM-DD HH:MM:SS\\". Return the `user_id` of the user with the maximum number of the specified `event_type` within the given time range. If no events match the criteria, return `None`. **Constraints:** - 1 ≤ len(logs) ≤ 1000 - All timestamps in logs are valid and follow the specified format. - All user_id values are positive integers. **Example Input:** ``` logs = [ \\"login 2023-06-12 08:23:35 4567 start_session\\", \\"transaction 2023-06-12 08:25:05 4567 purchase_item\\", \\"logout 2023-06-12 08:30:00 4567 end_session\\", \\"transaction 2023-06-12 09:25:05 1234 purchase_item\\", \\"transaction 2023-06-12 10:25:05 4567 purchase_item\\", \\"transaction 2023-06-12 11:25:05 1234 purchase_item\\" ] event_type = \\"transaction\\" start_time = \\"2023-06-12 08:00:00\\" end_time = \\"2023-06-12 10:00:00\\" ``` **Example Output:** ``` 4567 ``` **Explanation:** - User `4567` made two transactions within the specified time range. - User `1234` made one transaction within the specified time range. - Therefore, the result is `4567`.","solution":"from datetime import datetime def user_with_max_event(logs, event_type, start_time, end_time): start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") event_count = {} for log in logs: parts = log.split() event, timestamp, user_id, action = parts[0], parts[1] + \\" \\" + parts[2], int(parts[3]), parts[4] log_time = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if event == event_type and start_time <= log_time <= end_time: if user_id not in event_count: event_count[user_id] = 0 event_count[user_id] += 1 if not event_count: return None max_events = max(event_count.values()) users_with_max_events = [user_id for user_id, count in event_count.items() if count == max_events] return min(users_with_max_events) # Example usage logs = [ \\"login 2023-06-12 08:23:35 4567 start_session\\", \\"transaction 2023-06-12 08:25:05 4567 purchase_item\\", \\"logout 2023-06-12 08:30:00 4567 end_session\\", \\"transaction 2023-06-12 09:25:05 1234 purchase_item\\", \\"transaction 2023-06-12 10:25:05 4567 purchase_item\\", \\"transaction 2023-06-12 11:25:05 1234 purchase_item\\" ] event_type = \\"transaction\\" start_time = \\"2023-06-12 08:00:00\\" end_time = \\"2023-06-12 10:00:00\\" print(user_with_max_event(logs, event_type, start_time, end_time)) # Output: 4567"},{"question":"Given two integers representing the age of two siblings, write a program that calculates the absolute difference in their ages. Input The input consists of one line with two non-negative integers, `a` and `b` (0 ≤ a, b ≤ 120), representing the ages of the two siblings. Output Output a single integer representing the absolute difference in their ages. Example Input 10 15 Output 5 Input 34 23 Output 11 Input 45 45 Output 0","solution":"def age_difference(a, b): Returns the absolute difference in ages of two siblings. return abs(a - b)"},{"question":"A game development company is creating a new feature for their flagship game that involves selecting the optimal path on a map grid. The map is represented as a 2D grid of size n×m, where each cell contains an integer representing the energy required to step into that cell. The player starts at the top-left corner of the grid (1,1) and needs to reach the bottom-right corner (n,m). The player can only move to the right or downward at each step. The objective is to calculate the minimum energy required to reach the bottom-right corner from the top-left corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Then n lines follow, each containing m integers, where the j-th integer of the i-th line represents the energy e_ij (1 ≤ e_ij ≤ 1000) required to step into cell (i,j). Output Print one integer — the minimum energy required to reach the bottom-right corner (n,m) from the top-left corner (1,1). Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 2 1 1 3 Output 7 Note In the first example, the optimal path is 1 → 3 → 1 → 1 → 1 → 1 for a total energy cost of 7. In the second example, the optimal path is 2 → 1 → 3 for a total energy cost of 6.","solution":"def min_energy_path(grid): Calculate the minimum energy required to reach the bottom-right corner from the top-left corner. :param grid: List of lists where each sub-list represents a row in the 2D grid. :return: Minimum energy required. n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] # Start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Sarah is learning about string manipulations and wants to explore different ways to transform one string into another. She has two strings, A and B, and she wants to transform string A into string B using a series of operations. The operations she can perform are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position with another character. Help Sarah determine the minimum number of operations required to transform string A into string B. Input The first line contains the number of test cases T. Each test case consists of two lines: - The first line contains string A. - The second line contains string B. Output For each test case, output a single integer, the minimum number of operations required. Constraints 1 ≤ T ≤ 50 1 ≤ length(A), length(B) ≤ 1000 SAMPLE INPUT 3 abc yabd intention execution horse ros SAMPLE OUTPUT 2 5 3","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. len_a = len(A) len_b = len(B) # Create a matrix to store results of subproblems dp = [[0 for x in range(len_b + 1)] for x in range(len_a + 1)] # Fill dp[][] in bottom-up manner for i in range(len_a + 1): for j in range(len_b + 1): # If first string is empty, only option is insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of the first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last character and recur for the remaining substring elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all three operations and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[len_a][len_b] def process_cases(test_cases): Processes a list of test cases and returns the results as a list of integers results = [] for A, B in test_cases: results.append(min_operations(A, B)) return results"},{"question":"Write a program to find the minimum number of operations required to convert string `s` into string `t`. There are three types of operations allowed: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character with another character. You are required to implement an efficient algorithm that computes the minimum number of operations required. This problem is commonly known as the Edit Distance problem. # Input The first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 1000) – the lengths of strings `s` and `t`, respectively. The next line contains the string `s` of length `n` consisting of lowercase letters. The following line contains the string `t` of length `m` consisting of lowercase letters. # Output Output a single integer – the minimum number of operations required to convert string `s` into string `t`. # Example Input ``` 5 6 kitten sitting ``` Output ``` 3 ``` # Note In the given example, the following operations convert `kitten` to `sitting` with minimum cost. 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end. # Explanation The task requires computing the Edit Distance between two strings. One of the efficient ways is using Dynamic Programming. Define `dp[i][j]` as the minimum number of operations required to convert the first `i` characters of `s` to the first `j` characters of `t`. The answer can be found in `dp[n][m]`. Use the following recurrence relations to fill the `dp` table: - If `s[i-1] == t[j-1]`: `dp[i][j] = dp[i-1][j-1]` - Otherwise: `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])` where: - `dp[i-1][j]`: represents deletion. - `dp[i][j-1]`: represents insertion. - `dp[i-1][j-1]`: represents replacement.","solution":"def edit_distance(n, m, s, t): Compute the minimum number of operations required to convert string s into string t. # Create a DP table dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize the table with base cases for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j # If s is empty, we need to insert all characters of t elif j == 0: dp[i][j] = i # If t is empty, we need to delete all characters of s elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are same, no new operation needed else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Replacement return dp[n][m]"},{"question":"A farmer needs to manage a large number of cows in his barn. Each cow needs a specific amount of space, and the farmer has to arrange them in such a way that no cow feels cramped. Write a program to help the farmer determine if he can fit all his cows in a given barn space. INPUT: The first line of the input contains the number of test cases. Each test case consists of two lines. - The first line contains two space-separated integers: the total barn space `S` and the number of cows `N`. - The second line contains `N` space-separated integers, each representing the space requirement of a cow. OUTPUT: For each test case, output \\"YES\\" if all cows can fit in the barn, otherwise output \\"NO\\". CONSTRAINTS: - 1 ≤ S ≤ 10^9 - 1 ≤ N ≤ 100000 - 1 ≤ space requirement of each cow ≤ 10^9 SAMPLE INPUT 2 100 3 30 30 40 50 2 20 31 SAMPLE OUTPUT YES NO","solution":"def can_fit_all_cows(test_cases): results = [] for S, N, cows in test_cases: if sum(cows) <= S: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") num_tests = int(input_lines[0]) test_cases = [] index = 1 for _ in range(num_tests): S, N = map(int, input_lines[index].split()) cows = list(map(int, input_lines[index + 1].split())) test_cases.append((S, N, cows)) index += 2 return test_cases"},{"question":"# Minimize Array Rotations Given an array of integers, you are asked to determine the minimum number of rotations required to make the array sorted in non-decreasing order. A rotation involves taking the last element of the array and moving it to the beginning. Write a function `minimum_rotations(arr)` that takes a list of integers `arr` and returns the minimum number of rotations required to sort the array. **Restrictions:** 1. The array will have distinct elements. 2. The array length will be at most 1000. **Examples:** 1. `minimum_rotations([3, 4, 5, 1, 2])` should return `3` because rotating the array 3 times results in `[1, 2, 3, 4, 5]`. 2. `minimum_rotations([1, 2, 3, 4, 5])` should return `0` because the array is already sorted. 3. `minimum_rotations([2, 3, 4, 5, 1])` should return `4` because rotating the array 4 times results in `[1, 2, 3, 4, 5]`. **Function Signature:** ```python def minimum_rotations(arr: List[int]) -> int: pass ``` **Input:** - A list of integers `arr`. **Output:** - An integer representing the minimum number of rotations required to sort the array. Implement the function with the above specifications and constraints.","solution":"def minimum_rotations(arr): Returns the minimum number of rotations required to sort the array in non-decreasing order. n = len(arr) # To identify the minimum number of rotations required, we need to find the position # of the smallest element in the array, since rotating the array to start from # this element will sort the array. min_val = min(arr) min_index = arr.index(min_val) return min_index"},{"question":"Problem description. Kabir loves mathematics and has been studying permutations recently. He came across an interesting problem and needs your help to solve it. The problem states that given a string `s`, you need to find all unique permutations of the string and return them in lexicographical order. Your task is to write a function that takes a string `s` as input and returns a list of all unique permutations of `s` in lexicographical order. INPUT :- The input consists of a single string `s` where 1 <= length of `s` <= 9 and `s` consists of lowercase English letters only. OUTPUT :- Output a list of all unique permutations of `s` in lexicographical order. Example: Input: abc Output: [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] Input: aab Output: [\'aab\', \'aba\', \'baa\'] Note: - You need to consider only unique permutations. - The output list must be in lexicographical order.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the string `s` in lexicographical order. perm = set(permutations(s)) perm_list = sorted(\'\'.join(p) for p in perm) return perm_list"},{"question":"You are given a list of integers and you need to find the longest subsequence such that the elements in this subsequence are in strictly increasing order. Write a function to determine the length of the longest increasing subsequence (LIS) in the list. The function should have the following signature: ```python def longest_increasing_subsequence(arr: List[int]) -> int: ``` # Constraints * The length of the list `arr` (`n`) is between `1` and `100` inclusive. * The values of elements in the list are between `-10^3` and `10^3` inclusive. # Input * A single line of integers separated by spaces representing the list `arr`. # Output * A single integer representing the length of the longest increasing subsequence. # Example Input ``` 10 9 2 5 3 7 101 18 ``` Output ``` 4 ``` Explanation The longest increasing subsequence is [2, 3, 7, 101], and its length is 4. Input ``` 0 1 0 3 2 3 ``` Output ``` 4 ``` Explanation The longest increasing subsequence is [0, 1, 2, 3], and its length is 4. Input ``` 7 7 7 7 7 7 ``` Output ``` 1 ``` Explanation The longest increasing subsequence is [7], and its length is 1.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Function to find the length of the longest increasing subsequence in the list. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Problem Statement You are tasked with writing a function to determine the longest common substring between two given strings. The substring must be contiguous (appearing consecutively) in both strings. The function should output this longest common substring. If there are multiple substrings of the same length, the function may return any one of them. # Input - The input consists of two lines. - Each line contains one string composed of lowercase English letters. The length of each string does not exceed 1000 characters. # Output - The output is a single line containing the longest common substring. - If there is no common substring, the function should return an empty string. # Example Input 1: ``` abcdef cde ``` Output 1: ``` cde ``` Input 2: ``` abcxyz xyzabc ``` Output 2: ``` abc ``` Input 3: ``` abcdef ghijk ``` Output 3: ``` ``` # Constraints - The length of the strings does not exceed 1000 characters. - The strings consist of lowercase English letters (`a-z`).","solution":"def longest_common_substring(s1, s2): Finds and returns the longest common substring of s1 and s2. If there are multiple substrings of the same length, any one can be returned. If no common substring, return an empty string. :param s1: First input string :param s2: Second input string :return: Longest common substring max_len = 0 end_index_s1 = 0 len_s1 = len(s1) len_s2 = len(s2) # Create a matrix to store lengths of longest common suffixes of substrings # LCSuff[i][j] contains length of longest common suffix of s1[0..i-1] and s2[0..j-1]. LCSuff = [[0 for _ in range(len_s2 + 1)] for _ in range(len_s1 + 1)] # Build LCSuff matrix in bottom-up fashion for i in range(len_s1 + 1): for j in range(len_s2 + 1): if i == 0 or j == 0: LCSuff[i][j] = 0 elif s1[i-1] == s2[j-1]: LCSuff[i][j] = LCSuff[i-1][j-1] + 1 if LCSuff[i][j] > max_len: max_len = LCSuff[i][j] end_index_s1 = i else: LCSuff[i][j] = 0 # If no common substring found, return empty string if max_len == 0: return \\"\\" # Return the longest common substring return s1[end_index_s1 - max_len:end_index_s1]"},{"question":"You are given a grid of n rows and m columns, with each cell containing a non-negative integer representing a height. You need to find the largest square sub-grid such that the sum of heights of its cells does not exceed a given threshold t. Input The first line contains three integers n, m, and t (1 ≤ n, m ≤ 100, 1 ≤ t ≤ 10^9) — the number of rows, the number of columns, and the threshold, respectively. Each of the next n lines contains m integers, where each integer h_i_j (0 ≤ h_i_j ≤ 10^4) represents the height of the cell in the i-th row and j-th column of the grid. Output Print a single integer — the side length of the largest square sub-grid whose sum of heights does not exceed t. If no such square exists, print 0. Examples Input 3 4 10 1 2 1 0 3 1 2 4 2 3 0 1 Output 2 Input 3 3 5 1 2 1 3 1 2 2 3 0 Output 1 Note In the first example, the sum of heights of the 2x2 sub-grid starting at row 1, column 1 is 1+2+3+1=7, which does not exceed the threshold 10. There is no larger sub-grid that satisfies the constraint. In the second example, the largest square sub-grid that satisfies the constraint is any 1x1 sub-grid, because the threshold of 5 is too small to accommodate any larger sub-grid.","solution":"def largest_square_subgrid(n, m, t, grid): def get_sum(cum_sum, x1, y1, x2, y2): return cum_sum[x2 + 1][y2 + 1] - cum_sum[x2 + 1][y1] - cum_sum[x1][y2 + 1] + cum_sum[x1][y1] def can_find_square_of_size(size): for i in range(n - size + 1): for j in range(m - size + 1): if get_sum(cum_sum, i, j, i + size - 1, j + size - 1) <= t: return True return False cum_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): cum_sum[i + 1][j + 1] = grid[i][j] + cum_sum[i + 1][j] + cum_sum[i][j + 1] - cum_sum[i][j] low, high = 0, min(n, m) result = 0 while low <= high: mid = (low + high) // 2 if can_find_square_of_size(mid): result = mid low = mid + 1 else: high = mid - 1 return result"},{"question":"You are given two strings, S1 and S2, consisting of lowercase English letters. Your task is to find the lexicographically smallest string T that can be obtained by interleaving the characters of S1 and S2, while preserving the order of characters in both strings. For instance, if S1 = \\"ac\\" and S2 = \\"bd\\", possible interleavings are \\"abcd\\", \\"abdc\\", \\"bacd\\", \\"badc\\", \\"bdac\\", and other combinations. The lexicographically smallest one is \\"abcd\\". Input The first line contains the string S1 (1 ≤ |S1| ≤ 100), the second line contains the string S2 (1 ≤ |S2| ≤ 100). Output Output the lexicographically smallest string T obtained by interleaving S1 and S2. Examples Input ac bd Output abcd Input abcd efgh Output abcdefghijkl Input ab zx Output abzx Note In the first example, by interleaving \\"ac\\" and \\"bd\\", the smallest possibility lexicographically is \\"abcd\\". In the second example, by interleaving \\"abcd\\" and \\"efgh\\", you get \\"abcdefghijkl\\" directly as both strings are already in lexicographical order. In the third example, by interleaving \\"ab\\" and \\"zx\\", the smallest possibility lexicographically is \\"abzx\\", as \\"ab\\" comes before \\"zx\\".","solution":"def lexicographically_smallest_interleaving(S1, S2): This function takes two strings S1 and S2 and returns the lexicographically smallest string obtained by interleaving the characters while preserving the order of characters in both strings. i, j = 0, 0 result = [] while i < len(S1) and j < len(S2): if S1[i] <= S2[j]: result.append(S1[i]) i += 1 else: result.append(S2[j]) j += 1 # Append the remaining characters of S1 or S2 result.extend(S1[i:]) result.extend(S2[j:]) return \'\'.join(result)"},{"question":"Prime Sum Pair Write a function that takes a list of integers and an integer target sum as input and returns a pair of numbers from the list whose sum is equal to the given target sum. Both numbers in the pair should be prime numbers. If no such pair exists, return an empty list. Input The first line contains a list of integers. The second line contains an integer representing the target sum. Output A list containing two integers representing the pair of prime numbers that add up to the target sum. If no such pair exists, return an empty list. Example Input: [10, 7, 3, 5, 1] 8 Output: [3, 5] Input: [4, 6, 8, 9] 10 Output: []","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = math.isqrt(n) for d in range(3, max_divisor + 1, 2): if n % d == 0: return False return True def prime_sum_pair(numbers, target_sum): Find a pair of prime numbers in the list that sum up to the target sum. primes = [num for num in numbers if is_prime(num)] prime_set = set(primes) for num in primes: complement = target_sum - num if complement in prime_set and complement != num: return [num, complement] return []"},{"question":"Snuke has an array `a` of length `N` consisting of integers. Snuke can perform the following operation any number of times: - Choose `i` and `j` such that `1 ≤ i < j ≤ N`, and swap `a[i]` and `a[j]`. Given the array `a`, determine whether it is possible to sort the array in non-decreasing order by performing the operation described above. Constraints - 1 ≤ N ≤ 1000 - -10^9 ≤ a[i] ≤ 10^9, for all `1 ≤ i ≤ N` - All values in input are integers. Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print \\"YES\\" if it is possible to sort the array using the operations described above. Otherwise, print \\"NO\\". Examples Input 4 3 1 4 2 Output YES Input 3 3 2 1 Output YES Input 5 5 4 3 2 1 Output YES","solution":"def can_sort_array(n, a): Determine whether it is possible to sort the array in non-decreasing order by performing the described operations. return \\"YES\\""},{"question":"After the rush hour in a library, the librarian decides to organize the books that were returned. The books need to be placed back on the shelves in ascending order based on their IDs. However, due to some miscommunication, the books are scattered across several boxes, and each box contains a set of books with unique IDs. The librarian needs to collect all the books from the boxes and create a single, sorted list of book IDs to shelve them efficiently. Your task is to help the librarian by writing a program that merges the book IDs from all the boxes and sorts them in ascending order. Input The first line contains a single integer T (1 ≤ T ≤ 20) denoting the number of test cases. Each test case starts with an integer B (1 ≤ B ≤ 100) which represents the number of boxes. Each of the following B lines contains a space-separated list of integers, where the first integer in each line is the number of books in that box (let\'s call it k, where 1 ≤ k ≤ 500), followed by k unique integers which are the book IDs (1 ≤ ID ≤ 10000). Output For each test case, output a single line containing the sorted list of book IDs in ascending order. Example Input: 2 3 3 5 12 9 2 15 1 4 7 8 3 6 2 5 45 22 39 16 11 3 12 21 33 Output: 1 3 5 6 7 8 9 12 15 11 12 16 21 22 33 39 45 Explanation In the first test case, there are three boxes with book IDs: [5, 12, 9], [15, 1], and [7, 8, 3, 6]. When we merge and sort all these IDs, we get [1, 3, 5, 6, 7, 8, 9, 12, 15]. In the second test case, there are two boxes with book IDs: [45, 22, 39, 16, 11] and [12, 21, 33]. The merged and sorted IDs are [11, 12, 16, 21, 22, 33, 39, 45].","solution":"def organize_books(t, cases): results = [] for i in range(t): all_books = [] for box in cases[i]: all_books.extend(box[1:]) sorted_books = sorted(all_books) results.append(sorted_books) return results def process_input(input_data): data = input_data.strip().split(\'n\') t = int(data[0]) index = 1 cases = [] for _ in range(t): b = int(data[index]) index += 1 boxes = [] for _ in range(b): box = list(map(int, data[index].split())) boxes.append(box) index += 1 cases.append(boxes) return t, cases def format_output(results): output = [] for result in results: output.append(\' \'.join(map(str, result))) return \'n\'.join(output)"},{"question":"Jenna and Mark are participating in a coding competition where they need to solve a game problem. The game involves selecting subsets from given sets of integers to maximize a certain score. The challenge is described as follows: You are given a list of integers. You need to select a subset of these integers such that no two selected integers are adjacent in the original list, and the sum of the selected subset is maximized. Output the maximum sum achievable under these conditions. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains n integers representing the list elements, where each integer is between -1000 and 1000 (inclusive). Output Output the maximum sum that can be achieved by selecting a subset such that no two numbers in the subset are adjacent in the input list. Examples Input 6 3 2 5 10 7 Output 15 Input 7 -1 3 4 -7 5 2 -3 Output 9 Note In the first example, the optimal subset is {3, 10}, which yields a sum of 15. In the second example, the optimal subset is {3, 5, 2}, which yields a sum of 10.","solution":"def max_non_adjacent_sum(nums): if not nums: return 0 incl = 0 # Sum including the current element excl = 0 # Sum excluding the current element for num in nums: new_excl = max(incl, excl) # if we exclude current num, take max sum of incl or excl so far incl = excl + num # include current num and add to excl sum so far excl = new_excl # update excl to the new_excl return max(incl, excl)"},{"question":"You are given an integer array `arr` of size `n`. You have to find and print the maximum product that can be achieved by multiplying any three distinct elements from the array. Input The first line contains a single integer `n` (3 ≤ n ≤ 10^5), representing the size of the array. The second line contains `n` space-separated integers `arr[i]` (−10^4 ≤ arr[i] ≤ 10^4), representing the elements of the array. Output Print the maximum product that can be achieved by multiplying any three distinct elements from the array. Examples Input 5 1 2 3 4 5 Output 60 Input 4 -10 -10 5 2 Output 500 Note In the first example, the maximum product is achieved by multiplying 3, 4, and 5 (resulting in 60). In the second example, the maximum product is achieved by multiplying -10, -10, and 5 (resulting in 500).","solution":"def maximum_product_of_three(arr): arr.sort() n = len(arr) # The maximum product can be either: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (most negative) and the largest number product1 = arr[n-1] * arr[n-2] * arr[n-3] product2 = arr[0] * arr[1] * arr[n-1] return max(product1, product2)"},{"question":"Palindrome Partitioning Problem Statement Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s. A palindrome string is a string that reads the same backward as forward. Input format * s: A single string consisting of lowercase English letters. Constraints * 1 ≤ s.length ≤ 16 Output format * List of lists representing all possible palindrome partitioning of s, where each list is comprised of substrings. Input example 1 aab Output example 1 [ [\\"a\\",\\"a\\",\\"b\\"], [\\"aa\\",\\"b\\"] ] Input example 2 racecar Output example 2 [ [\\"r\\",\\"a\\",\\"c\\",\\"e\\",\\"c\\",\\"a\\",\\"r\\"], [\\"r\\",\\"aceca\\",\\"r\\"], [\\"r\\",\\"a\\",\\"cec\\",\\"a\\",\\"r\\"], [\\"racecar\\"] ] Example Input aab Output [ [\\"a\\",\\"a\\",\\"b\\"], [\\"aa\\",\\"b\\"] ]","solution":"def is_palindrome(sub): Checks if the given substring is a palindrome. return sub == sub[::-1] def partition(s): Given a string s, partitions s such that every substring of the partition is a palindrome. Returns all possible palindrome partitioning of s. result = [] partition_helper(s, [], result) return result def partition_helper(s, path, result): if not s: result.append(path) return for i in range(1, len(s) + 1): prefix = s[:i] if is_palindrome(prefix): partition_helper(s[i:], path + [prefix], result)"},{"question":"There are M different machines in a factory. Each machine can run for a certain number of hours before it needs maintenance. Given a list of integers where each integer represents the hours a corresponding machine can run before needing maintenance, find the minimum total number of hours all machines can run together without any machine requiring maintenance. Constraints * 1 ≤ M ≤ 2 * 10^5 * 1 ≤ hours_i ≤ 10^5 Input Input is given from Standard Input in the following format: M hours_1 hours_2 ... hours_M Output Print the minimum total number of hours all machines can run together without any machine requiring maintenance. Examples Input 3 6 8 12 Output 24 Input 5 3 4 5 6 7 Output 60 Input 4 10 15 20 25 Output 300","solution":"import math from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return abs(a*b) // math.gcd(a, b) def find_min_total_hours(m, hours): Finds the minimum total number of hours all machines can run together without any machine requiring maintenance. # Use reduce to apply lcm function cumulatively to the list of hours return reduce(lcm, hours) # This function will be used to parse input def main(): import sys input = sys.stdin.read data = input().strip().split() M = int(data[0]) hours = list(map(int, data[1:])) print(find_min_total_hours(M, hours))"},{"question":"You are given an integer array and an integer x. Your task is to determine the length of the longest contiguous subarray that contains at most k even numbers. Input The first line of input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n). The second line contains n integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6). Output Output a single integer that is the length of the longest contiguous subarray that contains at most k even numbers. Examples Input 6 2 1 2 3 4 5 6 Output 5 Input 4 1 2 4 6 8 Output 1 Note Consider the first example. The longest contiguous subarray that contains at most 2 even numbers is either [1, 2, 3, 4, 5] or [2, 3, 4, 5, 6]. In the second example, any subarray of length 1 contains at most 1 even number, so the longest subarray is any single element array.","solution":"def longest_subarray_with_at_most_k_evens(arr, k): Returns the length of the longest contiguous subarray that contains at most k even numbers. n = len(arr) left = 0 even_count = 0 max_length = 0 for right in range(n): if arr[right] % 2 == 0: even_count += 1 while even_count > k: if arr[left] % 2 == 0: even_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length # Function to parse input and call the main logic def main(n, k, arr): return longest_subarray_with_at_most_k_evens(arr, k)"},{"question":"Problem Statement: Alice is playing a game in which she has to collect fruits from a line of trees. Each tree in the line either has an apple or a banana. Alice always starts collecting fruits from the leftmost tree and moves to the right, picking one fruit from each tree. However, she has a catch: she can collect only a certain number of apples and bananas. If she reaches her limit for either fruit type, she will stop and won\'t continue to the next tree. Given the list of fruits on the trees and Alice\'s limits for apples and bananas, determine the total number of trees from which Alice can collect fruits before she stops. Input - The first line contains an integer `N` (1 ≤ N ≤ 10^5) denoting the number of trees. - The second line contains a string of length `N` consisting of characters \'A\' (apple) and \'B\' (banana) representing the type of fruit on each tree. - The third line contains two integers `L_A` and `L_B` (1 ≤ L_A, L_B ≤ N) representing Alice\'s limits for apples and bananas respectively. Output - Output a single integer, the number of trees from which Alice can collect fruits before she stops. Example Input: ``` 10 AAABBBAAAA 5 3 ``` Output: ``` 8 ``` Explanation: Alice starts collecting fruits: - She collects 3 apples (total: 5 apples) and 2 bananas (total: 2 bananas) from the first 5 trees. - From trees 6 and 7, she collects 2 more bananas (total: 3 bananas, reaching her limit for bananas). - She stops at tree 8 because she\'s reached her limit for bananas. Hence, the output is 8, as she collected fruits from 8 trees in total.","solution":"def collect_fruits(N, fruits, L_A, L_B): Determines the total number of trees Alice can collect fruits from before she reaches her limit for either apples or bananas. Args: N: int - the number of trees. fruits: str - string representing the type of fruit on each tree. L_A: int - limit for the number of apples Alice can collect. L_B: int - limit for the number of bananas Alice can collect. Returns: int - the number of trees from which Alice can collect fruits before she stops. count_apple = 0 count_banana = 0 for i in range(N): if fruits[i] == \'A\': if count_apple + 1 > L_A: return i count_apple += 1 elif fruits[i] == \'B\': if count_banana + 1 > L_B: return i count_banana += 1 return N"},{"question":"You are given an array of integers representing the heights of a row of buildings. The goal is to determine the maximum number of buildings you can see from the leftmost building to the rightmost building if you look straight ahead to the right. A building is visible if all the buildings before it are shorter than it. Constraints * 1 leq N leq 100 * 1 leq height_i leq 1000 Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print a single integer representing the maximum number of buildings visible from the leftmost building to the rightmost building when looking straight ahead to the right. Examples Input 6 3 5 4 2 6 1 Output 3 Input 5 1 2 3 4 5 Output 5 Input 4 4 3 2 1 Output 1","solution":"def max_visible_buildings(N, heights): Returns the maximum number of buildings visible from the leftmost building to the rightmost building when looking straight ahead to the right. max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are a submarine captain on a mission to navigate through an underwater minefield. The sea floor is represented as a 2D grid of size n x m where each cell contains either a mine (represented by \'*\') or is clear (represented by \'.\'). You start from the top-left corner of the grid and need to reach the bottom-right corner. You can only move right or down to adjacent cells. You must avoid mines at all costs, moving only through clear cells. Your task is to determine if there exists a path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) that avoids all mines. If a path exists, print \\"YES\\". If no such path exists, print \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each, where each character is either \'*\' or \'.\'. Output Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner avoiding all mines, otherwise print \\"NO\\". Examples Input 4 4 .... *.** ..*. .... Output YES Input 3 3 *.* .*. *.* Output NO Input 2 2 .. *. Output NO","solution":"def is_path_clear(grid): Returns \\"YES\\" if there exists a path from top-left corner to bottom-right corner avoiding all mines, otherwise return \\"NO\\". n, m = len(grid), len(grid[0]) # Create a 2D list to track visited cells visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): # If we\'re out of bounds or it\'s a mine or already visited, return False if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'*\' or visited[x][y]: return False # If we\'re at the bottom-right corner, return True if x == n - 1 and y == m - 1: return True # Mark this cell as visited visited[x][y] = True # Move right or down return dfs(x + 1, y) or dfs(x, y + 1) # Start DFS from the top-left corner if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Consider a rectangular maze represented by a 2D array where \'1\' denotes an open path and \'0\' denotes a wall. The maze always has one entrance at the top-left corner (0,0) and one exit at the bottom-right corner (N-1, M-1). You are to write a program to determine the length of the shortest path from the entrance to the exit. You can move horizontally or vertically in the maze but cannot move diagonally. You can only move to adjacent cells (up, down, left, right) that contain a \'1\'. If there is no possible path, return -1. Constraints: 1 ≤ N, M ≤ 100 Input Format: The first line contains two integers N and M, the number of rows and columns in the maze. The next N lines contain M integers (either \'0\' or \'1\') each, representing the maze. Output Format: A single integer representing the length of the shortest path from the entrance to the exit, or -1 if no path exists. SAMPLE INPUT 5 5 1 0 0 0 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 1 1 1 1 1 SAMPLE OUTPUT 9","solution":"from collections import deque def shortest_path_in_maze(N, M, maze): Returns the length of the shortest path in a maze from (0,0) to (N-1,M-1). If there is no possible path, returns -1. if maze[0][0] == 0 or maze[N-1][M-1] == 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and maze[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"In a distant galaxy, there exists a series of planets, each with a unique amount of precious materials. The i-th planet contains M_i units of materials and has a profitability of P_i. A space trader is planning to purchase materials from some planets to maximize profits. The space trader has two restrictions: 1. The total units of materials he can carry, T, cannot be exceeded. 2. He can only purchase materials from at most L planets. Determine the maximum profit the space trader can achieve while respecting these constraints. Constraints * 1 leq N leq 10^4 * 1 leq T leq 10^5 * 1 leq L leq N * 1 leq M_i leq T (1 leq i leq N) * 1 leq P_i leq 10^4 (1 leq i leq N) * All input values are integers. Inputs Input is given from Standard Input in the following format: N T L M_1 P_1 : M_N P_N Outputs Print the maximum possible profit the space trader can achieve. Examples Input 4 10 2 2 3 3 5 5 6 9 10 Output 11 Input 5 15 3 4 4 5 7 8 8 6 9 3 5 Output 21","solution":"def max_profilt(N, T, L, materials_profits): # Initialize the DP table dp = [[0] * (T + 1) for _ in range(L + 1)] for m, p in materials_profits: for l in range(L, 0, -1): for t in range(T, m - 1, -1): dp[l][t] = max(dp[l][t], dp[l-1][t - m] + p) return max(dp[L])"},{"question":"Misha loves playing with arithmetic sequences. An arithmetic sequence is a sequence of numbers such that the difference of any two successive members is a constant. Misha wondered if he can construct an arithmetic sequence where each term is a distinct digit between 1 and 9. For example, the sequence [1, 2, 3] is an arithmetic sequence with the difference of 1. On the other hand, the sequence [1, 3, 5, 7, 9] is also an arithmetic sequence with the difference of 2. Your task is to help Misha determine whether it\'s possible to form such an arithmetic sequence given an integer length n. Input The only line of the input contains a single integer n (2 ≤ n ≤ 9) — the length of the desired arithmetic sequence. Output Print \\"YES\\" if it is possible to construct such an arithmetic sequence of length n with distinct digits between 1 and 9. Otherwise, print \\"NO\\". If there are many possible sequences, print any of them. Examples Input 3 Output YES 1 2 3 Input 5 Output YES 1 3 5 7 9 Input 10 Output NO Note In the third example, it is not possible to have an arithmetic sequence of length 10 with distinct digits between 1 and 9, hence the output is \\"NO\\".","solution":"def find_arithmetic_sequence(n): Returns \'YES\' if it\'s possible to form an arithmetic sequence of length n using distinct digits, otherwise \'NO\'. If possible, also returns one example of such a sequence. if n > 9: return \\"NO\\" possible_sequences = [] for d in range(1, 10): sequence = [i for i in range(1, 10, d)] if len(sequence) >= n: possible_sequences.append(sequence[:n]) if possible_sequences: return \\"YES \\" + \\" \\".join(map(str, possible_sequences[0])) else: return \\"NO\\""},{"question":"Ankit loves string problems. Recently, he came across a problem where he needs to find the number of substrings of a given string that are palindromic. A substring is a contiguous sequence of characters within a string. A string is considered palindromic if it reads the same backward as forward. Ankit has asked for your help to solve this problem efficiently. Input: The first line contains T, the number of test cases. The next T test cases follow. Each test case consists of a single line containing a string S. The length of S can be up to 10^3. Output: For each test case, print the count of palindromic substrings in the string S. SAMPLE INPUT 2 abba racecar SAMPLE OUTPUT 6 10","solution":"def count_palindromic_substrings(S): Returns the count of palindromic substrings in the string S. n = len(S) count = 0 # Helper function to expand around center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(count_palindromic_substrings(S)) return results"},{"question":"A delivery service needs a program to optimize the arrangement of packages in their delivery trucks. Each package has a weight, and each truck has a maximum weight capacity. The goal is to minimize the number of trucks needed to deliver all the packages without exceeding the weight capacity of any truck. Your task is to write a part of the program that finds the minimum number of trucks required. The program should take the list of package weights and the maximum truck capacity as input and output the minimum number of trucks needed. Packages should be distributed such that the sum of weights in each truck does not exceed the truck capacity. The order of packages can be rearranged to achieve this. Input The first line contains two integers, n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 1000), where n is the number of packages and k is the maximum capacity of each truck. The second line contains n positive integers w1, w2, ..., wn (1 ≤ wi ≤ k), where wi is the weight of the i-th package. Output Output a single integer representing the minimum number of trucks needed. Example Input 5 10 2 3 4 5 6 Output 3 Input 4 8 4 4 4 4 Output 2","solution":"def min_trucks_required(package_weights, max_capacity): Returns the minimum number of trucks needed to deliver all packages without exceeding the maximum capacity of any truck. package_weights.sort() # Sort weights in increasing order num_trucks = 0 n = len(package_weights) used = [False] * n for i in range(n): if not used[i]: current_load = package_weights[i] used[i] = True for j in range(i+1, n): if not used[j] and current_load + package_weights[j] <= max_capacity: current_load += package_weights[j] used[j] = True num_trucks += 1 return num_trucks # Example Usage: # This should print \\"3\\" because minimum 3 trucks are needed to distribute the packages [2, 3, 4, 5, 6] with max capacity 10. print(min_trucks_required([2, 3, 4, 5, 6], 10))"},{"question":"You are given a list of students and their corresponding marks in two subjects, Math and Science. Your task is to determine the rank of each student based on their total marks (the sum of marks in Math and Science), with a tie-breaking rule based on their marks in Math. The rank is determined as follows: - A student with higher total marks gets a better (numerically lower) rank. - If two students have the same total marks, the student with higher marks in Math gets a better rank. - If two students have the same total marks and same marks in Math, they have the same rank. Write a program to compute the rank of each student based on these rules. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of students. Each of the next n lines contains three space-separated values: the name of the student (a string of up to 100 characters), their marks in Math (an integer between 0 and 100, inclusive), and their marks in Science (an integer between 0 and 100, inclusive). Output Print n lines. Each line should contain the name of a student and their rank, separated by a space. If there are multiple students with the same rank, their names should appear in alphabetical order. Examples Input 5 Alice 80 90 Bob 80 85 Charlie 90 95 David 85 90 Eve 75 80 Output Charlie 1 David 2 Alice 3 Bob 4 Eve 5 Input 3 Alice 70 75 Bob 70 75 Charlie 80 85 Output Charlie 1 Alice 2 Bob 2 Note In the first example, Charlie has the highest total marks, so he gets rank 1. David and Alice have equal total marks, but David has higher marks in Math, so David gets rank 2 and Alice gets rank 3. Bob and Eve similarly follow the ranking rules. In the second example, Alice and Bob have the same total marks and the same marks in Math, so they share the same rank. Charlie has the highest total marks and gets rank 1.","solution":"def calculate_ranks(students): Calculate the ranks for a list of students based on their total marks and Math marks. Args: students (list): A list of tuples where each tuple contains a student\'s name, Math marks, and Science marks. Returns: list: A list of tuples with each tuple containing a student\'s name and their rank. # Calculate total marks for each student for student in students: student.append(student[1] + student[2]) # Sort by total marks (desc), Math marks (desc), and name (asc) sorted_students = sorted(students, key=lambda x: (-x[3], -x[1], x[0])) # Determine ranks result = [] rank = 1 for i in range(len(sorted_students)): if i == 0: result.append((sorted_students[i][0], rank)) else: if (sorted_students[i][3] == sorted_students[i-1][3] and sorted_students[i][1] == sorted_students[i-1][1]): result.append((sorted_students[i][0], result[-1][1])) else: rank = i + 1 result.append((sorted_students[i][0], rank)) return result"},{"question":"Alisha has recently learned about prime numbers and their interesting properties. She is fascinated by how prime numbers can be used to form other numbers through multiplication. She wants to experiment with creating the largest possible number using exactly K prime numbers chosen from a given list of prime numbers. However, there is a twist; she can only use each prime number at most once. Given a list of N prime numbers, your task is to help Alisha find the largest number that can be formed using exactly K primes from the list. The resultant number should be the product of K distinct prime numbers selected from the list. Input First line of input contains a single integer T denoting the number of test cases. For each test case, the first line contains two integers N and K denoting the size of the prime list and the number of primes to be used respectively. The second line contains N space-separated integers representing the list of prime numbers. Output For each test case, print the largest number possible on a new line. If it is not possible to select exactly K primes from the list, print -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 10 1 ≤ prime ≤ 10^6 SAMPLE INPUT 2 5 3 2 3 5 7 11 4 2 13 11 7 5 SAMPLE OUTPUT 385 143 Explanation Testcase 1: 1. The prime list is [2, 3, 5, 7, 11]. To form the largest number using exactly 3 primes, we select the top 3 primes: [11, 7, 5]. Their product is 11 * 7 * 5 = 385. Testcase 2: 1. The prime list is [13, 11, 7, 5]. To form the largest number using exactly 2 primes, we select the top 2 primes: [13, 11]. Their product is 13 * 11 = 143.","solution":"def largest_prime_product(T, test_cases): result = [] for case in test_cases: N, K, primes = case if K > N: result.append(-1) continue primes.sort(reverse=True) product = 1 for i in range(K): product *= primes[i] result.append(product) return result"},{"question":"Given a list of strings, write a program to group them into sets of anagrams. Two strings are anagrams if one string can be rearranged to form the other string. Your task is to group the provided strings into sets of anagrams and print out each set. Input: - The first line contains the number of strings n (1 ≤ n ≤ 100). - Each of the next n lines contains a single string (length of string ≤ 100). Output: - For each set of anagrams, print the words in alphabetical order on one line, separated by spaces. - Each set of anagrams should be printed on a new line. - The lines should be sorted in the order of their first word. Note: Each string contains only lowercase alphabets. SAMPLE INPUT 6 eat tea tan ate nat bat SAMPLE OUTPUT ate eat tea bat nat tan","solution":"def group_anagrams(words): Groups a list of words into sets of anagrams and returns a list of these sets sorted in the specified format. from collections import defaultdict # Dictionary to hold sorted characters as keys and list of anagrams as values anagrams = defaultdict(list) # Group words by sorted characters for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Sort each list of anagrams and sort the keys based on the first anagram in each group sorted_anagrams = sorted([sorted(group) for group in anagrams.values()]) # Convert each list of anagrams to a single space-separated string result = [\' \'.join(group) for group in sorted_anagrams] return result def group_anagrams_from_input(n, word_list): return group_anagrams(word_list)"},{"question":"You are given a positive integer N. Your task is to create a sequence of N numbers such that each number in the sequence is either a 1 or a 2, and no two 2s are adjacent to each other. The goal is to determine the total number of valid sequences that can be generated for a given N. Input: The first line of input gives the number of test cases t. The following t lines each contain a single integer N. Output: For each test case, output the number of valid sequences for the given integer N. Constraints: 1 ≤ t ≤ 15. 1 ≤ N ≤ 30. SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 2 3 5 Explanation TestCase 1: There are 2 valid sequences: [1], [2]. TestCase 2: There are 3 valid sequences: [1, 1], [1, 2], [2, 1]. TestCase 3: There are 5 valid sequences: [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 1, 2].","solution":"def count_valid_sequences(n): Returns the number of valid sequences of length n where no two 2s are adjacent. if n == 1: return 2 # [1] and [2] if n == 2: return 3 # [1, 1], [1, 2], [2, 1] # dp[i] will store the number of valid sequences of length i dp = [0] * (n + 1) dp[1] = 2 dp[2] = 3 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def valid_sequences_for_test_cases(test_cases): Returns the results for each test case. results = [] for n in test_cases: results.append(count_valid_sequences(n)) return results"},{"question":"In a kingdom far away, there\'s a puzzle game with a grid consisting of cells. Each cell in this grid can either be empty or contain a treasure chest. The grid has dimensions n × m. The objective of the game is to group as many treasure chests together in a single connected component as possible. A connected component of treasure chests means that you can move between any two chests in the component via a series of horizontal or vertical steps, staying on treasure chests the entire time. Initially, the grid is empty. You are given a list of coordinates where treasure chests will be placed at the beginning of the game. Your task is to determine the size of the largest connected component of treasure chests after all chests have been placed on the grid. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 40) — the grid dimensions. The second line contains an integer k (1 ≤ k ≤ n * m) — the number of treasure chests. The following k lines each contain two space-separated integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m), representing the coordinates of each treasure chest. Output In the only line print the size of the largest connected component of treasure chests. Examples Input 3 3 4 1 1 1 2 2 2 3 3 Output 3 Input 4 4 3 1 1 2 3 4 4 Output 1 Note In the first sample, the largest connected component of treasure chests includes three cells: (1,1), (1,2), and (2,2). In the second sample, each of the treasure chests is isolated from each other, so the largest connected component has size 1.","solution":"def largest_connected_treasure_group(n, m, k, treasure_coords): grid = [[0] * m for _ in range(n)] for x, y in treasure_coords: grid[x - 1][y - 1] = 1 def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != 1: return 0 grid[x][y] = -1 # mark as visited size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Given a connected, undirected graph represented as an adjacency matrix (G), determine if the graph is bipartite. Constraints * 2 ≤ N ≤ 1000 (N is the number of vertices) Input N a11 a12 ... a1N a21 a22 ... a2N : aN1 aN2 ... aNN In the first line, an integer N (the number of vertices) is given. In the following N lines, N elements aij (0 or 1) of the adjacency matrix are given. Output Print \\"YES\\" if the graph is bipartite. Otherwise, print \\"NO\\". Example Input 4 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 Output YES","solution":"def is_bipartite(N, G): Determines if a graph is bipartite based on its adjacency matrix representation. Args: N (int): Number of vertices in the graph. G (list of list of int): Adjacency matrix with 0s and 1s. Returns: str: \\"YES\\" if the graph is bipartite, \\"NO\\" otherwise. colors = [-1] * N # -1 indicates uncolored, 0 and 1 are two colors def bfs(src): queue = [src] colors[src] = 0 # Start coloring the source with 0 while queue: u = queue.pop(0) for v in range(N): if G[u][v] == 1: # There is an edge if colors[v] == -1: queue.append(v) colors[v] = 1 - colors[u] # Assign alternate color elif colors[v] == colors[u]: return False return True for i in range(N): if colors[i] == -1: # Not colored yet if not bfs(i): return \\"NO\\" return \\"YES\\" # Example execution for verification N = 4 G = [ [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0] ] print(is_bipartite(N, G)) # Output: YES"},{"question":"A store has a number of items, and each item has a fixed price. During a promotion, the store offers discounts on a selection of items. Customers can buy up to `k` items at a discount from this selection. However, customers always prefer to buy the most expensive discounted items to maximize their savings. Given the prices of items and a list of indices indicating which items are on sale, write a function that calculates the maximum total discount a customer can get if they buy up to `k` discounted items. # Input The input consists of: 1. A list of integers representing the prices of items. 2. A list of integers representing the indices of items that are on discount. 3. An integer `k` representing the maximum number of items a customer can buy at a discount. # Output The function should return an integer representing the maximum total discount a customer can get. # Constraints - The length of the prices list does not exceed 10^5. - Each index in the discount list is a valid index in the prices list. - The discount list does not exceed the length of the prices list. - 1 ≤ `k` ≤ length of the discount list. # Example Example 1 # Input - prices = [4, 9, 2, 8, 7, 6] - discount_indices = [1, 3, 4] - k = 2 # Output - 15 Explanation The discounted items are at indices 1, 3, and 4 with prices 9, 8, and 7 respectively. To maximize the discount, the customer buys the two most expensive items at indices 1 and 3. Thus, the maximum discount is 9 + 8 = 17. Example 2 # Input - prices = [10, 10, 10, 10, 10] - discount_indices = [0, 1, 2, 3, 4] - k = 3 # Output - 30 Explanation All items have the same price. The customer buys any three items, resulting in a total discount of 10 + 10 + 10 = 30.","solution":"def max_total_discount(prices, discount_indices, k): Calculates the maximum total discount a customer can get. Parameters: prices (list): List of integers representing the prices of items. discount_indices (list): List of integers representing the indices of items on discount. k (int): Maximum number of items a customer can buy at a discount. Returns: int: Maximum total discount a customer can get. # Extract the prices of items on discount discount_prices = [prices[i] for i in discount_indices] # Sort the discount prices in descending order to maximize savings discount_prices.sort(reverse=True) # Sum up the prices of the k most expensive discounted items max_discount = sum(discount_prices[:k]) return max_discount"},{"question":"A bakery sells two types of bread: small bread for 3 dollars each and large bread for 5 dollars each. Determine if there is a combination of small and large bread that can be purchased for exactly M dollars. You can buy one or more small bread loaves and one or more large bread loaves, but you cannot buy zero of either type. Constraints * M is an integer between 1 and 200, inclusive. Input Input is given from Standard Input in the following format: M Output If there is a way to buy some small and some large bread for exactly M dollars, print `Possible`; otherwise, print `Impossible`. Examples Input 8 Output Possible Input 6 Output Impossible Input 18 Output Possible","solution":"def is_combination_possible(M): Determines if it is possible to purchase exactly M dollars worth of bread with at least one small bread and one large bread. Small bread costs 3 dollars, large bread costs 5 dollars. Parameters: M (int): The amount of money to be used to buy bread. Returns: str: \'Possible\' if a combination exists to buy exactly M dollars worth of bread, else \'Impossible\'. for small_count in range(1, M // 3 + 1): if (M - small_count * 3) % 5 == 0: if (M - small_count * 3) // 5 >= 1: return \'Possible\' return \'Impossible\'"},{"question":"Given an array of integers, rearrange the elements so that the absolute difference between any two consecutive elements is maximized. Return the resultant array. For example: Input: [10, 1, 9, 2, 8, 3] Output: [1, 10, 2, 9, 3, 8] Explanation: The order of elements in the returned array creates a maximum difference between consecutive elements. # Input - The first line contains an integer, n, the number of elements in the array (2 ≤ n ≤ 100000). - The second line contains n integers, representing the elements of the array (1 ≤ each integer ≤ 10^9). # Output - Print a single line containing the rearranged array. # Example Input ``` 6 10 1 9 2 8 3 ``` Output ``` 1 10 2 9 3 8 ``` Input ``` 4 4 2 7 5 ``` Output ``` 2 7 4 5 ```","solution":"def rearrange_maximize_difference(arr): Rearranges the elements of arr such that the absolute difference between any two consecutive elements is maximized. arr.sort() result = [] i, j = 0, len(arr) - 1 while i <= j: if i == j: result.append(arr[i]) else: result.append(arr[i]) result.append(arr[j]) i += 1 j -= 1 return result"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). Snuke wants to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (N, M) while avoiding any obstacles. He can move to a neighboring cell to the left, right, up, or down unless it is an obstacle. If no such path exists, he should return -1. Write an algorithm to determine the minimum number of steps required to reach the bottom-right corner from the top-left corner, or -1 if there is no such path. Constraints: * 2 leq N, M leq 1000 Input: Input is given from Standard Input in the following format: ``` N M grid_1 grid_2 : grid_N ``` Where `grid_i` is a string of length M representing the ith row of the grid. Output: Print the minimum number of steps required to reach the bottom-right corner, or -1 if no path exists. Example: Input: ``` 4 4 .... ..#. .... .#.. ``` Output: 6","solution":"from collections import deque def min_steps_to_reach(N, M, grid): # Check if the start or end point is an obstacle if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Direction vectors for moving up, down, left, and right directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Create a queue for BFS and add the starting position queue = deque([(0, 0, 0)]) # each element is (row, col, steps) visited = set((0, 0)) # set to record visited cells # Perform BFS while queue: r, c, steps = queue.popleft() # If we reached the bottom-right corner, return the number of steps if r == N-1 and c == M-1: return steps # Explore all valid neighboring cells for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) # If no path is found, return -1 return -1 # Function to read input and call the min_steps_to_reach function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = data[2:] result = min_steps_to_reach(N, M, grid) print(result) # If importing for testing, export the min_steps_to_reach function if __name__ == \\"__main__\\": main()"},{"question":"In a rectangular grid of size n x m, each cell contains a coin. Two players play a game where they take turns picking up coins. During each turn, a player can pick up any number of coins from a single row or a single column, and must pick at least one coin. A player loses if they cannot make a move on their turn. Determine who the winner of the game will be if both players play optimally and the first player always starts first. Input The first input line contains an integer t (1 ≤ t ≤ 100). Each of the following t lines contains two integers n and m (1 ≤ n, m ≤ 10^9) representing the size of the grid. Output Output t lines, each containing a single character: \\"P\\" if the first player wins or \\"S\\" if the second player wins. Examples Input 5 1 1 2 2 2 1 3 3 2 3 Output P P S S S","solution":"def determine_winner(t, games): results = [] for n, m in games: if n % 2 == 1 and m % 2 == 1: results.append(\\"S\\") else: results.append(\\"P\\") return results"},{"question":"You are working in a warehouse and need to organize n boxes into groups. Boxes are numbered from 1 to n and each box has a certain size, with the size of the i-th box given by s_i. A group can contain either one box or two boxes. The goal is to minimize the number of groups while ensuring that the sum of sizes of two boxes in any group does not exceed a given threshold, W. Input: The input contains one or more test cases. The first line contains one integer q (1 ≤ q ≤ 10^3) — the number of test cases in the test. Then q test cases follow. One test case is given on two lines. The first line of the test case contains two integers, n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9) — the number of boxes and the maximum allowed sum of sizes of two boxes in a group. The second line of the test case contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ W), where s_i is the size of the i-th box. The sum of n over all test cases does not exceed 10^5. Output: Print q answers, for each test case print one integer — the minimum number of groups required. Example: Input 3 5 10 1 2 3 4 5 6 7 1 1 6 5 5 5 4 8 6 2 2 4 Output 3 4 2","solution":"def minimize_groups(test_cases): results = [] for n, W, sizes in test_cases: sizes.sort() i, j = 0, n - 1 groups = 0 while i <= j: if sizes[i] + sizes[j] <= W: i += 1 j -= 1 groups += 1 results.append(groups) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') q = int(lines[0]) test_cases = [] line_idx = 1 for _ in range(q): n, W = map(int, lines[line_idx].split()) sizes = list(map(int, lines[line_idx + 1].split())) test_cases.append((n, W, sizes)) line_idx += 2 return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"John is an avid gardener with a large collection of plants, each identified by its unique species name. He keeps detailed records of his plants, including the date he acquired each one. As his collection grows, John finds it increasingly difficult to remember when he acquired each plant, especially since he likes to refer to them using their species names. John needs a program that can help him keep track of his plants. He wants to be able to input the species name of a plant and find out when he acquired it. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of plants in John\'s collection. The next n lines each contain a string s_i, the species name of a plant (a non-empty string of at most 100 lowercase letters), followed by a date d_i in the format \\"YYYY-MM-DD\\", indicating when John acquired the plant. The next line contains an integer m (1 ≤ m ≤ 100), the number of queries. The next m lines each contain a string q_j, a species name for which John wants to know the acquisition date. Each species name in the queries is guaranteed to appear in the list of plant records. Output For each query, output the acquisition date of the plant species specified by the query. Example **Input** ``` 3 rose 2022-04-10 lily 2021-03-25 tulip 2023-01-01 2 rose tulip ``` **Output** ``` 2022-04-10 2023-01-01 ``` Note Ensure that the program can efficiently handle the input size and provide the corresponding acquisition dates for the queried species promptly.","solution":"def plant_acquisition_dates(n, plant_data, m, queries): Retrieves the acquisition dates for the queried plant species. Parameters: n (int): Number of plants. plant_data (list of str): List of plant species and acquisition dates. m (int): Number of queries. queries (list of str): List of plant species to query. Returns: list of str: Acquisition dates corresponding to the queried plant species. plant_dict = {} for i in range(n): species, date = plant_data[i].split() plant_dict[species] = date result = [] for j in range(m): query = queries[j] result.append(plant_dict[query]) return result"},{"question":"In an enchanted forest, there is a magical river that flows through n mystical stones numbered from 1 to n. Each stone holds a certain amount of magical energy, represented as an integer. There are m queries, each asking for the stone with the maximum magical energy within a specific range. You need to help a forest guardian process these queries efficiently and find the stone with the highest magical energy in the given ranges. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 200,000) — the number of stones and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the magical energy of each stone. Each of the following m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — defining the range [l, r] for each query. Output For each query, print the index of the stone with the maximum magical energy within the specified range. If there are multiple stones with the same maximum energy, print the smallest index. Example Input 5 3 1 5 2 4 3 1 3 2 4 1 5 Output 2 2 2 Note For the first query, the range is [1, 3], and the stone with the maximum energy is at index 2. For the second query, the range is [2, 4], and the maximum energy is at index 2. For the third query, the range is [1, 5], and the maximum energy is at index 2. This matches the expected format, complexity, and scope of the provided sample question.","solution":"def find_max_energy_index(n, m, energies, queries): results = [] for l, r in queries: # Convert 1-based to 0-based indexing l -= 1 r -= 1 max_energy = -1 max_index = -1 for i in range(l, r + 1): if energies[i] > max_energy or (energies[i] == max_energy and i < max_index): max_energy = energies[i] max_index = i # Convert back to 1-based indexing results.append(max_index + 1) return results"},{"question":"A large sum of money has been stolen from a bank, and the police have identified n suspects. The suspects are all arranged in a line and numbered from 1 to n. As part of the investigation, each suspect has been interviewed and their level of guiltiness assessed. The guiltiness levels are represented by an array g of n integers, where g_i is the guiltiness level of the i-th suspect (0 ≤ g_i ≤ 10^6). In an effort to narrow down the suspects, the police are interested in isolating a contiguous segment of suspects where the sum of their guiltiness levels is maximized. Your task is to help the police by finding the maximum sum of a contiguous segment of the array g. Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of suspects. The second line contains n integers g_1, g_2, …, g_n (0 ≤ g_i ≤ 10^6) — the guiltiness levels of the suspects. Output Output a single integer x — the maximum sum of a contiguous segment of the array g. Examples Input 5 1 2 -3 4 5 Output 9 Input 4 -1 -2 -3 -4 Output -1 Input 6 3 -2 5 -1 6 -3 Output 11 Input 1 100 Output 100 Note In the first example, the maximum sum of a contiguous segment is 9, which can be achieved by taking the segment [4, 5]. In the second example, the best we can do is take the least negative single element, which is -1. In the third example, the maximum sum of a contiguous segment is 11, achieved by taking the segment [3, -2, 5, -1, 6]. In the fourth example, there is only one suspect, so the maximum sum is 100.","solution":"def maximum_sum_of_contiguous_segment(n, g): Finds the maximum sum of a contiguous segment of the array g. max_sum = float(\'-inf\') current_sum = 0 for guilt in g: current_sum = max(guilt, current_sum + guilt) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A local amusement park offers a unique ticket upgrade system. When you buy a ticket, you have an option to upgrade it to a higher category by paying the difference in price. Given the prices of the ticket categories and the initial category price, determine the minimum total cost to reach the highest category. Input Input will begin with an integer n (2 ≤ n ≤ 100000), the number of ticket categories. Following this is a line with n integers representing the prices of the categories in ascending order. Then, another integer p will indicate the price of the initial category ticket you purchased. All prices are positive integers not exceeding 10^9. Output Print the minimum cost required to upgrade from the initial category to the highest category. Example Input 3 100 300 700 100 Output 600 Input 4 50 150 500 1000 150 Output 850 Note In the first test case, the prices of the ticket categories are [100, 300, 700], and you start with a ticket priced at 100. The cheapest path is to pay 200 to go to 300 and then another 400 to reach 700, totaling 600. In the second test case, the prices of the ticket categories are [50, 150, 500, 1000], and you start with a ticket priced at 150. The cheapest path is to pay 350 to go to 500 and then another 500 to reach 1000, totaling 850.","solution":"def min_upgrade_cost(n, prices, initial_price): Calculate the minimum total cost to upgrade from the initial category to the highest category. :param n: Number of ticket categories (2 <= n <= 100000) :param prices: List of ticket prices in ascending order :param initial_price: Initial category ticket price :return: Minimum cost to upgrade to the highest category highest_price = prices[-1] total_cost = 0 for price in prices: if initial_price < price: total_cost += price - initial_price initial_price = price return total_cost"},{"question":"You are given a string s and an integer k. You need to determine the minimum number of characters to change in the string to ensure that the difference between the frequency of the most frequent character and the least frequent character in any substring of length k is at most 1. Input The first line contains an integer t (1 ≤ t ≤ 10), denoting the number of test cases. Each of the next t lines includes: - A string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. - An integer k (1 ≤ k ≤ |s|), the length of the substring to consider. Output For each test case, output a single integer—the minimum number of character changes required. Example Input 3 aabbcc 2 abacab 3 aaaaa 4 Output 0 1 0 Explanation - In the first test case, all substrings of length 2 already satisfy the condition. Hence, no changes are needed. - In the second test case, by changing one of the characters \'a\' or \'b\' in the substring \\"aba\\", we can achieve the required condition. - In the third test case, all substrings of length 4 already satisfy the condition since all characters are the same. Hence, no changes are needed.","solution":"def min_changes(s, k): from collections import Counter n = len(s) if k == 1: return 0 min_changes_needed = float(\'inf\') for i in range(n - k + 1): substring = s[i:i+k] freq = Counter(substring) most_freq = max(freq.values()) least_freq = min(freq.values()) changes_needed = (k - most_freq if most_freq - least_freq <= 1 else k - most_freq - most_freq + least_freq + 1) min_changes_needed = min(min_changes_needed, changes_needed) return min_changes_needed def solve(test_cases): results = [] for s, k in test_cases: results.append(min_changes(s, k)) return results"},{"question":"You are organizing a charity event and have received multiple donations. You want to distribute these donations among several projects. To ensure fairness, you decide to distribute the donations in such a way that the maximum amount given to any single project is minimized. To achieve this, you will be given an integer n representing the number of donations, and an integer k representing the number of projects. You need to find the minimum possible value of the maximum donation that will be received by any project. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The second line contains n integers d_i (1 ≤ d_i ≤ 10^4), representing the amount of each donation. Output Print one integer, which is the minimized maximum donation that any single project receives. Example Input 5 3 2 3 5 8 13 Output 13 Note For the example, the donations are 2, 3, 5, 8, and 13, and we have three projects. Distributing the donations as {2, 3, 8}, {5}, {13} ensures that no single project receives more than 13, which is the minimized maximum donation in this scenario.","solution":"def minimize_max_donation(n, k, donations): def can_distribute_with_max_donation(max_donation): current_sum = 0 num_projects = 1 # Start with one project for donation in donations: if current_sum + donation > max_donation: num_projects += 1 current_sum = donation if num_projects > k: return False else: current_sum += donation return True left, right = max(donations), sum(donations) while left < right: mid = (left + right) // 2 if can_distribute_with_max_donation(mid): right = mid else: left = mid + 1 return left"},{"question":"Given an integer array `nums` of length `N` containing distinct integers and a target integer `target`, write a function to search for the target in the array. Return the index if the target is found; otherwise, return -1. You must write an algorithm with O(log N) runtime complexity. **Example:** Input: ``` nums = [-1,0,3,5,9,12] target = 9 ``` Output: ``` 4 ``` Input: ``` nums = [-1,0,3,5,9,12] target = 2 ``` Output: ``` -1 ``` You need to implement the function: ```python def search(nums: List[int], target: int) -> int: # your code here ```","solution":"from typing import List def search(nums: List[int], target: int) -> int: Search for the target in the sorted array of distinct integers using binary search. Return the index if the target is found; otherwise, return -1. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A school is organizing a coding competition, and they want to allocate rooms for participants based on their team size. Each room can accommodate up to a certain number of participants, but each room can host only one team. You need to write a program that finds out the minimum number of rooms required to accommodate all the teams so that no room is left partially filled (i.e., each room can either be empty or fully occupied by a team). Input The first line of the input contains two integers n and r (1 ≤ n, r ≤ 1000) — the number of teams and the maximum capacity of each room respectively. The second line contains n integers, where the i-th integer a_i (1 ≤ a_i ≤ r) is the number of participants in the i-th team. Output Print a single integer — the minimum number of rooms required to accommodate all the teams. Examples Input 4 5 3 4 2 5 Output 4 Input 3 4 2 1 3 Output 3 Note In the first test case, each team perfectly fits into a room since all the teams have participants less than or equal to the room capacity. In the second test case, even though there is a room capacity of 4, no two teams can be combined into one room as each team is a different size and cannot be split or partially filled into one room. Therefore, each team requires its own room.","solution":"def min_rooms_required(n, r, teams): Returns the minimum number of rooms required to accommodate all the teams. n: int - Number of teams r: int - Maximum capacity of each room teams: list of int - Number of participants in each team return n"},{"question":"You are given a grid of size r × c, where each cell is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). A robot can move up, down, left, or right, but cannot move onto or through obstacles. The robot starts at position (0, 0) and you need to determine the length of the shortest path to reach the bottom-right corner (r-1, c-1). If there is no possible way for the robot to reach the bottom-right corner, return -1. Input The first line contains two integers, r and c (1 ≤ r, c ≤ 1000), representing the number of rows and columns in the grid. The next r lines each contain a string of length c consisting of \'.\' and \'#\'. Output Output a single integer representing the length of the shortest path to reach the bottom-right corner, or -1 if there is no possible path. Example Input 4 4 .... ..#. .#.. .... Output 6","solution":"from collections import deque def shortest_path_in_grid(r, c, grid): if grid[0][0] == \'#\' or grid[r-1][c-1] == \'#\': return -1 # Start or end is blocked directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (r-1, c-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < r and 0 <= ny < c and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A warehouse company has several inventory warehouses in different locations, and they keep track of stock using a centralized system. To optimize operations, they would like to automate the process of checking which inventory items need restocking. You need to implement a function that will help identify these items. Each warehouse has a unique code and maintains a list of items, each item identified by its unique ID and stock quantity. The company wants to be notified when the stock quantity of any item goes below a certain threshold. Given the stock information for each warehouse and the restocking threshold, write a function to identify all the items that need restocking across all warehouses. The function should return a sorted list of unique item IDs that need restocking. Input: - The first line contains two integers w (1 ≤ w ≤ 1000) and t (1 ≤ t ≤ 100000), where w is the number of warehouses and t is the restocking threshold. - The next w lines each describe a warehouse. Each warehouse description starts with an integer k (1 ≤ k ≤ 10,000), the number of items in the warehouse, followed by k pairs of integers representing the item ID and its corresponding stock quantity. Output: - A single line containing the sorted list of unique item IDs that need restocking, separated by spaces. Examples: Input: ``` 3 50 2 101 30 102 70 3 103 20 101 45 104 55 1 105 60 ``` Output: ``` 101 103 ``` Input: ``` 2 100 2 201 90 202 110 2 203 120 204 95 ``` Output: ``` 201 204 ``` Input: ``` 1 75 2 301 80 302 30 ``` Output: ``` 302 ```","solution":"def identify_items_to_restock(w, t, warehouse_data): restock_items = set() for warehouse in warehouse_data: for item_id, quantity in warehouse: if quantity < t: restock_items.add(item_id) return sorted(restock_items) # Helper function to parse given input structure def parse_input(input_data): input_lines = input_data.strip().split(\'n\') w, t = map(int, input_lines[0].split()) warehouse_data = [] for i in range(1, w + 1): items = list(map(int, input_lines[i].split())) k = items[0] warehouse_info = [(items[j], items[j + 1]) for j in range(1, 2 * k, 2)] warehouse_data.append(warehouse_info) return w, t, warehouse_data"},{"question":"Sophie is an aspiring architect who loves designing intricate and creative structures. She often uses software to assist with her designs by creating and manipulating three-dimensional models. Recently, she\'s encountered a problem with one of her favorite software programs, and she needs your help to fix it. The software allows Sophie to create and manipulate blocks in a 3D space. Each block can be individually positioned and has a unique identifier to distinguish it. One of the common operations Sophie performs is determining whether a new block she\'s adding will overlap with any existing blocks. You need to implement a program that checks for overlaps between a new block and the existing blocks in the 3D space. Each block is defined by eight coordinates representing the positions of its vertices in 3D space. A block is defined within the cuboid determined by its vertices. Two blocks overlap if any part of one block intersects with any part of the other block. Write a program that reads the existing blocks, the new block, and determines if there is any overlap between them. # Input The input consists of several test cases. Each test case begins with an integer n (1 ≤ n ≤ 100), representing the number of existing blocks. For each existing block, eight lines follow, each containing three integers (x, y, z) (0 ≤ x, y, z ≤ 100) which are the coordinates of one vertex of the block. After the n existing blocks, eight lines follow, each containing three integers (x, y, z) (0 ≤ x, y, z ≤ 100) indicating the coordinates of the new block\'s vertices. The input ends when n = 0. # Output For each test case, output \\"Overlap\\" if the new block overlaps with any of the n existing blocks. Otherwise, output \\"No Overlap\\". # Example Input ``` 2 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 2 2 2 2 2 3 2 3 2 2 3 3 3 2 2 3 2 3 3 3 2 3 3 3 1 1 1 1 1 2 1 2 1 1 2 2 2 1 1 2 1 2 2 2 1 2 2 2 0 ``` Output ``` Overlap ```","solution":"class Block: def __init__(self, vertices): self.vertices = vertices self.x_min = min(v[0] for v in vertices) self.y_min = min(v[1] for v in vertices) self.z_min = min(v[2] for v in vertices) self.x_max = max(v[0] for v in vertices) self.y_max = max(v[1] for v in vertices) self.z_max = max(v[2] for v in vertices) def overlaps_with(self, other): # Check for any overlap between this block and another block. does_not_overlap = ( self.x_max < other.x_min or self.x_min > other.x_max or self.y_max < other.y_min or self.y_min > other.y_max or self.z_max < other.z_min or self.z_min > other.z_max ) return not does_not_overlap def check_blocks_overlap(test_cases, new_block_vertices): existing_blocks = [Block(vertices) for vertices in test_cases] new_block = Block(new_block_vertices) for block in existing_blocks: if block.overlaps_with(new_block): return \\"Overlap\\" return \\"No Overlap\\" def main(input_data): lines = input_data.strip().splitlines() idx = 0 output = [] while idx < len(lines): n = int(lines[idx]) if n == 0: break idx += 1 test_cases = [] for _ in range(n): block_vertices = [] for _ in range(8): vertex = tuple(map(int, lines[idx].split())) block_vertices.append(vertex) idx += 1 test_cases.append(block_vertices) new_block_vertices = [] for _ in range(8): vertex = tuple(map(int, lines[idx].split())) new_block_vertices.append(vertex) idx += 1 result = check_blocks_overlap(test_cases, new_block_vertices) output.append(result) return \\"n\\".join(output)"},{"question":"Alex has a series of daily temperature readings for the past week, represented as a list of integers. He wants to find out the difference between the highest and the lowest temperatures recorded during the week. Write a function `temperature_difference(temperatures: List[int]) -> int` that takes a list of exactly 7 integers and returns the difference between the maximum and minimum temperatures. Constraints * The list `temperatures` will always contain exactly 7 integers. * Each temperature is an integer between -100 and 100, inclusive. Input The input is given as a list of integers: temperatures Output Print the difference between the highest and lowest temperatures. Examples Input [30, 25, 27, 31, 29, 28, 26] Output 6 Input [-5, -20, 0, 10, 5, -12, 15] Output 35","solution":"from typing import List def temperature_difference(temperatures: List[int]) -> int: Returns the difference between the highest and lowest temperatures in the list. return max(temperatures) - min(temperatures)"},{"question":"Alice is given a string consisting of lowercase English letters. She wants to find out how many times the string can be split into identical substrings of a specific length k. Two substrings are considered identical if they contain the same characters in the same order. Alice can only split the string into contiguous substrings of equal length k. She needs a method to determine if this is possible and, if so, how many of these identical substrings can be obtained. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains the string of length n consisting of lowercase English letters. The third line contains a single integer k (1 ≤ k ≤ n) — the length of each substring Alice wants to consider. Output Print a single integer — the maximum number of identical substrings of length k that Alice can obtain. If it is impossible to split the string into such identical substrings, print 0. Examples Input 7 aabbaab 2 Output 2 Input 8 abcdefgh 2 Output 1 Note In the first sample, Alice can split the string into \\"aa\\", \\"bb\\", and \\"aab\\". The substring \\"aa\\" occurs twice, which is the maximum number of identical substrings of length 2. In the second sample, Alice splits the string into \\"ab\\", \\"cd\\", \\"ef\\", and \\"gh\\". Each substring is unique, so the maximum number of identical substrings of length 2 is 1.","solution":"def max_identical_substrings(n, s, k): Returns the maximum number of identical substrings of length k Alice can find in the string s. If it\'s impossible to split the string into such substrings, it returns 0. if k > n: return 0 # Dictionary to count occurrences of each substring of length k substring_count = {} for i in range(n - k + 1): substring = s[i:i + k] if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 max_count = max(substring_count.values()) if substring_count else 0 return max_count"},{"question":"In a certain board game, you are tasked with moving a piece along a grid. The grid is made up of cells in an n x m format, where each cell has a positive integer cost associated with it. You start at the top-left corner of the grid and want to move to the bottom-right corner. You can only move either right or down from a cell. Your goal is to minimize the cost of the path from the top-left to the bottom-right. Write a program that calculates the minimum cost to traverse the specified grid. The input consists of: - n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100): the dimensions of the grid. - A matrix of size n x m where each element is a positive integer indicating the cost of that cell. The output should be: - A single integer representing the minimum cost to traverse the grid from the top-left to the bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Note In the first example, the optimal path is: 1 → 3 → 1 → 1 → 1, resulting in a total cost of 7. In the second example, the optimal path is: 1 → 2 → 1, resulting in a total cost of 3.","solution":"def min_cost(n, m, grid): Returns the minimum cost to traverse the grid from the top-left corner to the bottom-right corner. Parameters: n (int): number of rows m (int): number of columns grid (List[List[int]]): 2D list representing the grid costs Returns: int: minimum cost to reach bottom-right corner # Initialize the DP table with high values dp = [[float(\'inf\')] * (m + 1) for _ in range(n + 1)] # Set the starting point cost dp[0][1] = 0 # This is a workaround to allow dp[1][1] to be equal to grid[0][0] for i in range(1, n + 1): for j in range(1, m + 1): dp[i][j] = grid[i-1][j-1] + min(dp[i-1][j], dp[i][j-1]) return dp[n][m]"},{"question":"Given an array of integers and a target integer, find two distinct integers in the array that sum up exactly to the target integer. Return the indices of these two integers. Your solution should ensure that: - You are minimizing the time complexity. - If there are multiple pairs that satisfy the condition, return any one of them. - If no such pair exists, return an empty list. The indices in the list should be zero-based. # Input - The first line contains an integer n (2 ≤ n ≤ 100) — the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (−10^3 ≤ a_i ≤ 10^3) — the elements of the array. - The third line contains the target integer t (−10^6 ≤ t ≤ 10^6). # Output Print a list of two integers — the indices of the two elements that sum up to the target integer. If no such pair exists, return an empty list. # Example Input ``` 5 2 7 11 15 -2 9 ``` Output ``` [0, 1] ``` # Explanation In the sample case, the sum of the elements at indices `0` and `1` is `2 + 7`, which equals the target integer `9`. Therefore, `0` and `1` are the valid indices to return.","solution":"def find_two_sum_indices(nums, target): Given a list of integers and a target integer, find two distinct integers in the list that sum up exactly to the target integer. Return the indices of these two integers. If no such pair exists, return an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [] # Sample Input to Output Conversion # Input # n = 5 # a = [2, 7, 11, 15, -2] # t = 9 # Expected Output: [0, 1] # Explanation: nums[0] + nums[1] = 2 + 7 = 9"},{"question":"In a land named Codeville, there is a series of code tournaments held every year. Each tournament has exactly one winner, but the winner could be anyone from the entire pool of participants who have participated in at least one tournament. Each winner receives a number of points equivalent to the number of tournaments they have won up to and including that particular tournament. You are given the winner of each tournament in chronological order. Determine the points for each winner after each tournament. Input The first line of input contains an integer n (1 ≤ n ≤ 105) — the number of tournaments. Each of the following n lines contains a string wi — the name of the winner of the i-th tournament. The name consists of lowercase English letters only and its length does not exceed 100 characters. Output Output n integers. For each tournament, print the points the winner has after winning that tournament. Examples Input 5 alice bob alice bob alice Output 1 1 2 2 3 Input 7 eve carol eve bob carol alice eve Output 1 1 2 1 2 1 3 Note In the first example, the system processes the tournaments as follows: - After the first tournament, Alice wins and has 1 point. - After the second tournament, Bob wins and has 1 point. - After the third tournament, Alice wins again and now has 2 points. - After the fourth tournament, Bob wins again and now has 2 points. - After the fifth tournament, Alice wins again and now has 3 points. In the second example, the points are updated similarly for each participant based on the number of wins they accumulate.","solution":"def calculate_points(n, winners): Given the number of tournaments and a list of winners, calculate the points for each winner after each tournament. :param n: Integer, number of tournaments :param winners: List of strings, each string is the name of the winner for that tournament :return: List of integers, points of the winner after each tournament points = {} results = [] for winner in winners: if winner in points: points[winner] += 1 else: points[winner] = 1 results.append(points[winner]) return results"},{"question":"Given a list of all the courses a student is required to complete before graduation, and a list of prerequisite relationships between these courses, write a program that determines the order in which the student can complete all the courses. Each course is represented by a unique integer id. The list of prerequisites is given as a list of pairs where the first element is a course id, and the second element is the id of a prerequisite course. If there are multiple valid orderings, your program can return any one of them. If it is impossible for the student to complete all courses (i.e., there is a cycle among the prerequisites), the program should return an empty list. Input - The first line of input contains two integers `N` and `P`. `N` denotes the number of courses (1 ≤ N ≤ 100,000). `P` denotes the number of prerequisite pairs (0 ≤ P ≤ 100,000). - The next `P` lines each contain two integers `a` and `b`, representing the course `a` which has the course `b` as a prerequisite. Output - If there is a possible valid ordering of courses, output a single line containing the course ids in the required order, separated by spaces. - If no valid ordering exists, output a single line with the word `IMPOSSIBLE`. Example Input 4 3 2 1 3 2 4 3 Output 1 2 3 4 Input 4 4 1 2 2 3 3 4 4 1 Output IMPOSSIBLE Input 3 1 3 1 Output 2 1 3","solution":"from collections import defaultdict, deque def find_course_order(numCourses, prerequisites): Finds the order in which courses can be completed given the prerequisites. :param numCourses: The number of courses. :param prerequisites: A list of pairs where the first element is a course id, and the second element is the id of a prerequisite course. :return: A list of course ids if there\'s a valid order, otherwise an empty list. graph = defaultdict(list) indegree = [0] * numCourses for course, prereq in prerequisites: graph[prereq].append(course) indegree[course] += 1 queue = deque([i for i in range(numCourses) if indegree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == numCourses: return order else: return [] # Utility function to convert solution format def format_output(order): if not order: return \\"IMPOSSIBLE\\" else: return \\" \\".join(map(str, [course + 1 for course in order])) def main(input_data): input_lines = input_data.strip().split(\\"n\\") N, P = map(int, input_lines[0].split()) prerequisites = [tuple(map(int, line.split())) for line in input_lines[1:P+1]] prerequisites = [(a-1, b-1) for a, b in prerequisites] order = find_course_order(N, prerequisites) return format_output(order)"},{"question":"A tournament is being organized, and the players are competing in a series of matches to determine the winner. Each player has a unique ID and an initial score. Each match between two players results in a change in their scores based on their performance. Your task is to determine the final scores of all players after all matches have concluded. INPUT The first line of input contains two integers, P and M, denoting the number of players and the number of matches, respectively. The second line contains P space-separated integers, s1, s2, ..., sP, representing the initial scores of the players. Each of the next M lines contains three integers, p1, p2, and r, indicating that player with ID p1 competed against player with ID p2, and the match resulted in a score change of r points for player p1 and -(r) points for player p2. OUTPUT Output a single line containing P space-separated integers, representing the final scores of the players after all matches. CONSTRAINTS 1 ≤ P ≤ 100 0 ≤ M ≤ 10,000 0 ≤ si ≤ 1,000, where i ∈ [1, P] 1 ≤ p1, p2 ≤ P -100 ≤ r ≤ 100 NOTE Player IDs are 1-based, meaning player IDs range from 1 to P inclusive. SAMPLE INPUT 4 3 10 20 30 40 1 2 5 3 4 -3 2 3 2 SAMPLE OUTPUT 15 13 32 37 Explanation For the first match, player 1 gains 5 points (new score: 15), and player 2 loses 5 points (new score: 15). For the second match, player 3 loses 3 points (new score: 27), and player 4 gains 3 points (new score: 43). For the third match, player 2 gains 2 points (new score: 17), and player 3 loses 2 points (new score: 25). The final scores of the players are 15, 17, 25, and 43 respectively.","solution":"def compute_final_scores(P, M, initial_scores, matches): Computes the final scores of players after all matches. Parameters: P (int): Number of players M (int): Number of matches initial_scores (list): Initial scores of the players matches (list): List of matches with score changes Returns: list: Final scores of all the players # Copy the initial scores to manipulate them based on match results. final_scores = initial_scores.copy() # Process each match for match in matches: p1, p2, r = match # Players IDs are 1-based, so we need to convert them to 0-based for list indexing. final_scores[p1 - 1] += r final_scores[p2 - 1] -= r return final_scores # Example of how to use the function: # P = 4 # M = 3 # initial_scores = [10, 20, 30, 40] # matches = [(1, 2, 5), (3, 4, -3), (2, 3, 2)] # result = compute_final_scores(P, M, initial_scores, matches) # print(result) # Output should be [15, 17, 25, 43]"},{"question":"Given an array of integers, your task is to find the first missing positive integer. In other words, the smallest positive integer that does not appear in the array. **Constraints:** * The length of the array will be between 1 and 100,000. * The elements in the array will be integers within the range [-1,000,000, 1,000,000]. **Input:** The input is given from Standard Input in the following format: ``` N A_1 A_2 A_3 ... A_N ``` Where `N` is the number of elements in the array, and `A_i` are the elements of the array. **Output:** Print the first missing positive integer. **Example:** **Input:** ``` 5 3 4 -1 1 ``` **Output:** ``` 2 ``` **Explanation:** * The input array is `[3, 4, -1, 1]`. * The positive integers that are missing from the array are `[2, 5, 6, ...]`. * Among these, the smallest missing positive integer is `2`. **Input:** ``` 4 1 2 0 3 ``` **Output:** ``` 4 ``` **Explanation:** * The input array is `[1, 2, 0, 3]`. * The positive integers that are missing from the array are `[4, 5, 6, ...]`. * Among these, the smallest missing positive integer is `4`.","solution":"def first_missing_positive(arr): Returns the first missing positive integer from the array. n = len(arr) # Step 1: Replace negative numbers and zeros with n+1 for i in range(n): if arr[i] <= 0: arr[i] = n + 1 # Step 2: Use the array indices as a way of marking present positive numbers for i in range(n): num = abs(arr[i]) if num <= n: arr[num - 1] = -abs(arr[num - 1]) # Mark the value at this index as negative # Step 3: Find the first index which is positive for i in range(n): if arr[i] > 0: return i + 1 # If all indices are marked, then return n + 1 return n + 1"},{"question":"Anna loves to collect different types of marbles. She has a collection of N marbles, each with a unique color. She places them in a single row on a shelf. Anna wants to rearrange her marbles so that two marbles of the same color are not placed next to each other. In its worst case scenario, what is the maximum number of additional marbles (y) Anna needs to add to make this arrangement possible? Input Format The first line contains the number of test cases T. Next T lines contain an integer N which indicates the number of marbles in Anna\'s collection. Output Format Print the maximum number of additional marbles (y) Anna needs to add in the worst case scenario for each test case. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 1 2 SAMPLE OUTPUT 0 0 Explanation Case 1: One marble is already arranged correctly since there are no adjacent marbles to compare. Therefore, the number of additional marbles needed is 0. Case 2: Two marbles can easily be placed next to each other without any two marbles of the same color being adjacent. Therefore, the number of additional marbles needed is 0.","solution":"def max_additional_marbles(N): Function to calculate the maximum number of additional marbles needed to ensure no two adjacent marbles are of the same color in the worst case scenario. if N == 1: return 0 else: return 0 def process_test_cases(test_cases): Function to process multiple test cases and return results for each. results = [] for N in test_cases: results.append(max_additional_marbles(N)) return results"},{"question":"A string is a palindrome if it reads the same forward and backward. For example, \\"racecar\\" and \\"level\\" are palindromes. Write a program that accepts a string s and outputs whether it is a palindrome or not. Your program should ignore all non-alphanumeric characters and treat uppercase and lowercase letters as the same. Input Given multiple datasets. Each dataset is given a string s on one row. The input ends when the string \\"END\\" is encountered. Output For each dataset, output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Example Input A man, a plan, a canal, Panama No lemon, no melon hello END Output YES YES NO","solution":"def is_palindrome(s): Checks if the given string s is a palindrome, ignoring non-alphanumeric characters and case. # Normalize the string: remove non-alphanumeric characters and convert to lowercase normalized_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forward and backward return \\"YES\\" if normalized_s == normalized_s[::-1] else \\"NO\\" def process_input(input_lines): Processes multiple lines of input and returns the corresponding outputs for each line. results = [] for line in input_lines.strip().split(\'n\'): if line == \\"END\\": break results.append(is_palindrome(line)) return results"},{"question":"Given a list of strings, each string represents a sequence of letters that can be decoded into a series of numbers. Each letter corresponds to its position in the English alphabet (a=1, b=2, ..., z=26). Your task is to decode each string into its numerical representation and then calculate the sum of the decoded numbers for each string. You need to implement a function that takes a list of strings and returns the decoded sums. # Function Signature ```python def decode_sums(strings: List[str]) -> List[int]: pass ``` # Input - A list of strings where each string consists of lowercase letters (\'a\' to \'z\'). # Output - A list of integers where each integer represents the sum of the decoded numbers for the corresponding input string. # Example Input ```python strings = [\\"abc\\", \\"xyz\\", \\"hello\\"] ``` Output ```python [6, 75, 52] ``` # Explanation - For the string \\"abc\\", \'a\'=1, \'b\'=2, \'c\'=3, so the sum is 1+2+3=6. - For the string \\"xyz\\", \'x\'=24, \'y\'=25, \'z\'=26, so the sum is 24+25+26=75. - For the string \\"hello\\", \'h\'=8, \'e\'=5, \'l\'=12, \'l\'=12, \'o\'=15, so the sum is 8+5+12+12+15=52. You need to ensure that your function can handle various lengths and content of the input strings.","solution":"from typing import List def decode_sums(strings: List[str]) -> List[int]: Decodes a list of strings into their numerical values by converting each letter to its position in the alphabet and sums those values for each string. Args: strings (List[str]): A list of strings consisting of lowercase letters. Returns: List[int]: A list of integers, where each integer represents the sum of the decoded numbers for the corresponding input string. def decode_string(s: str) -> int: return sum(ord(char) - ord(\'a\') + 1 for char in s) return [decode_string(s) for s in strings]"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],C={key:0},z={key:1};function R(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),x(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",C,"See more"))],8,F)):h("",!0)])}const M=d(S,[["render",R],["__scopeId","data-v-bd1c5c20"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/40.md","filePath":"quotes/40.md"}'),D={name:"quotes/40.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[v(M)]))}});export{B as __pageData,G as default};
