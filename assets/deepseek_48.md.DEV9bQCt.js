import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(q,[["render",E],["__scopeId","data-v-8345c294"]]),A=JSON.parse('[{"question":"You are given an array of integers and a target sum. Your task is to determine if there exist two distinct elements in the array such that their sum is equal to the target sum. If such a pair exists, return the indices of the two elements in the form of a list. Otherwise, return an empty list. However, there\'s a twist: 1. You must find the first pair (if multiple pairs exist) that appears in the array. 2. The output list must have the smallest index first. INPUT The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N integers, representing the elements of the array. - The third line contains an integer K, the target sum. OUTPUT For each test case, output a list containing the indices of the two elements that sum up to the target, or an empty list if no such pair exists. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 100 -10^5 ≤ array elements ≤ 10^5 -10^5 ≤ K ≤ 10^5 SAMPLE INPUT 2 5 1 2 3 4 5 9 4 1 0 -1 2 6 SAMPLE OUTPUT [3, 4] [] Explanation In the first test case, the array is [1, 2, 3, 4, 5]. The only pair whose sum is 9 is (4, 5) at indices 3 and 4. In the second test case, the array is [1, 0, -1, 2]. There is no pair whose sum is 6. Hence, the output is an empty list.","solution":"def find_indices_of_two_sum(arr, target): Returns the indices of the first pair of elements in the array that sum up to the target. index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return [] def process_test_cases(test_cases): Processes multiple test cases. results = [] for case in test_cases: N, arr, K = case[\'N\'], case[\'arr\'], case[\'K\'] result = find_indices_of_two_sum(arr, K) results.append(result) return results"},{"question":"Santa is trying to decorate a Christmas tree using colored balls. He wants to hang the balls in such an order that the color of adjacent balls is always different. Santa has n balls and each ball has a particular color. He wants to know whether it is possible to arrange the balls in the required order and if possible, give such an arrangement. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of balls. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the colors of the balls in the initial order. Output If it is possible to arrange the balls as required, print \\"YES\\" on the first line and then print the arrangement on the second line. If it is not possible, print \\"NO\\". Examples Input 3 1 2 1 Output YES 1 2 1 Input 4 1 1 1 1 Output NO Input 6 1 2 3 4 5 1 Output YES 1 2 3 4 1 5 Note In the first example, the initial order of the balls already satisfies the requirement, so it is printed as it is. In the second example, since all balls have the same color, it is impossible to rearrange them such that no two adjacent balls have the same color. In the third example, one possible valid rearrangement is shown, but other valid rearrangements are also possible.","solution":"def can_arrange_balls(n, colors): from collections import Counter color_count = Counter(colors) if any(count > (n + 1) // 2 for count in color_count.values()): return \\"NO\\" sorted_colors = sorted(color_count.items(), key=lambda x: -x[1]) result = [0] * n index = 0 for color, count in sorted_colors: for _ in range(count): result[index] = color index += 2 if index >= n: index = 1 return \\"YES\\", result"},{"question":"You are given a string consisting of lowercase Latin letters. Let\'s call a string beautiful if no two adjacent characters are the same. Your task is to find the minimum number of characters needed to be removed to make the string beautiful. If the given string is already beautiful, output 0. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of length n consisting of lowercase Latin letters. Output Return the minimum number of characters needed to be removed to make the string beautiful. Examples Input 5 abaaa Output 2 Input 8 aabbccdd Output 4 Input 6 abcdef Output 0","solution":"def min_removals_to_beautiful(n, s): Returns the minimum number of characters needed to be removed to make the string beautiful (no two adjacent characters are the same). removals = 0 for i in range(1, n): if s[i] == s[i - 1]: removals += 1 return removals"},{"question":"Write a program that determines if a given maze is solvable. The maze is represented by a grid of characters, where an \'S\' denotes the starting point, an \'E\' denotes the ending point, \'.\' denotes an open path, and \'#\' denotes a wall. You may move up, down, left, or right, but you cannot move diagonally. Your task is to determine whether there is a path from \'S\' to \'E\'. Input The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. Each test case starts with two integers N and M (1 ≤ N, M ≤ 100), the dimensions of the maze grid. The next N lines each contain a string of length M, representing the maze grid. Each string may contain \'S\', \'E\', \'.\', or \'#\'. There will always be exactly one \'S\' and one \'E\' in each grid. Output For each test case, print a single line containing \\"YES\\" if there is a path from \'S\' to \'E\', otherwise print \\"NO\\". Example Input 2 5 5 S.... .#. .#..E .#. ..... 3 3 S#E # #.# Output YES NO","solution":"def is_solvable(T, tests): def dfs(x, y, visited): if not (0 <= x < N and 0 <= y < M) or (x, y) in visited or grid[x][y] == \'#\': return False if grid[x][y] == \'E\': return True visited.add((x, y)) return ( dfs(x + 1, y, visited) or dfs(x - 1, y, visited) or dfs(x, y + 1, visited) or dfs(x, y - 1, visited) ) results = [] for test in tests: N, M, grid_data = test grid = [list(line) for line in grid_data] start = end = None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: results.append(\\"NO\\") continue visited = set() result = dfs(start[0], start[1], visited) results.append(\\"YES\\" if result else \\"NO\\") return results T = 2 tests = [ (5, 5, [ \\"S....\\", \\".#.\\", \\".#..E\\", \\".#.\\", \\".....\\" ]), (3, 3, [ \\"S#E\\", \\"#\\", \\"#.#\\" ]) ] print(is_solvable(T, tests))"},{"question":"In a magical land, there is a row of n houses, each having a certain amount of gold coins. A thief plans to rob these houses but has a peculiar rule: he cannot rob two consecutive houses, as it sets off an alarm. The thief wants to maximize the total amount of gold coins he can rob, while adhering to this rule. Write a function that determines the maximum amount of gold coins the thief can steal given the constraints. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers g1, g2, ..., gn (0 ≤ gi ≤ 10^9) — the amount of gold coins in each house, separated by single spaces. Output Print a single integer — the maximum amount of gold coins the thief can steal. Example Input 5 2 7 9 3 1 Output 12 Input 4 1 2 3 1 Output 4","solution":"def max_gold_coins(n, gold): if n == 0: return 0 if n == 1: return gold[0] dp = [0] * n dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + gold[i]) return dp[-1]"},{"question":"Given a list of strings, your task is to determine the longest common prefix that is shared among all the strings in the list. If there is no common prefix, return an empty string. Input n – the number of strings in the list [1 <= n <= 10^5]. Each line contains one string: Si [1 <= |Si| <= 100]. Output Output the longest common prefix among the given strings. If no such prefix exists, output an empty string. Example Input: 4 flower flow flight flee Output: fl","solution":"def longest_common_prefix(strings): Finds the longest common prefix among a list of strings. :param strings: List of strings :return: Longest common prefix or an empty string if no common prefix exists if not strings: return \\"\\" # Start by assuming that the whole first string is a common prefix prefix = strings[0] for s in strings[1:]: # Update the prefix until it matches the beginning of each string while not s.startswith(prefix): prefix = prefix[:-1] if prefix == \\"\\": return \\"\\" return prefix"},{"question":"Palindrome Substring Indices Problem Statement Given a string S, find all the distinct pairs of indices (i, j) such that the substring S[i:j+1] is a palindrome. A string is a palindrome if it reads the same backward as forward. For example, the string \\"aba\\" is a palindrome, while the string \\"abc\\" is not. Input S Input consists of one line containing the string S, which may contain lowercase English letters only. Constraint * The length of S is an integer that satisfies 1 ≤ |S| ≤ 1000. Output Output all distinct pairs of indices (i, j) such that the substring S[i:j+1] is a palindrome. Each pair should be output on a new line, listed in lexicographical order. The pairs should be formatted as (i, j). If there are no palindromic substrings, output \\"No palindromic substrings\\". Sample Input 1 ababa Output for Sample Input 1 (0, 0) (0, 2) (0, 4) (1, 1) (1, 3) (2, 2) (2, 4) (3, 3) (4, 4) Sample Input 2 abcd Output for Sample Input 2 (0, 0) (1, 1) (2, 2) (3, 3) Example Input racecar Output (0, 0) (0, 6) (1, 1) (1, 5) (2, 2) (2, 4) (3, 3) (4, 4) (5, 5) (6, 6)","solution":"def is_palindrome(s): return s == s[::-1] def find_palindromic_substrings(S): result = [] for i in range(len(S)): for j in range(i, len(S)): if is_palindrome(S[i:j+1]): result.append((i, j)) return result if result else \\"No palindromic substrings\\""},{"question":"You are given a series of shops in a straight line. Each shop sells exactly one type of product at a fixed price and there\'s a specific budget you have to spend in these shops. The goal is to maximize how much you spend without exceeding the budget. Each shop can be visited at most once and in any order. You are required to find the maximum number of shops you can visit and the maximum total amount of money you can spend without exceeding your budget. Input The first line of input contains two integers n and b (1 ≤ n ≤ 10^5, 1 ≤ b ≤ 10^9) — the number of shops and the budget. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^6) — the price of the product in each shop. Output Print two integers: the maximum number of shops you can visit and the maximum total amount of money you can spend without exceeding the budget. Examples Input 5 50 20 10 30 50 40 Output 2 30 Input 3 100 60 70 80 Output 1 60","solution":"def max_shops_and_spending(n, b, prices): prices.sort() visited_shops = 0 total_spent = 0 for price in prices: if total_spent + price <= b: total_spent += price visited_shops += 1 else: break return visited_shops, total_spent"},{"question":"Mario is playing a game with an array of integers. The array has n elements, and Mario can perform a jump operation at most once. A jump operation consists of choosing an index i (1 ≤ i ≤ n) and increasing exactly one of the array elements at that index by 1. The goal of the game is to maximize the sum of the array elements after performing the jump operation (or not performing it at all). Write a program to solve Mario\'s game. Input The first line of the input contains an integer n (1 ≤ n ≤ 100). In the second line of the input, there are n integers: a1, a2, ..., an. It is guaranteed that each of those n values is between 1 and 100 inclusive. Output Print an integer—the maximum possible sum of the array elements after Mario performs the jump operation (if he chooses to do so). Examples Input 5 1 2 3 4 5 Output 16 Input 4 7 4 2 8 Output 22 Note In the first case, increasing the last element by 1 makes the array [1, 2, 3, 4, 6] and its sum is 16. The optimal move yields a maximum sum of 16. In the second case, increasing the last element by 1 makes the array [7, 4, 2, 9] and its sum is 22. Although Mario could increase any element by 1, increasing the largest available element yields the maximum sum of 22.","solution":"def maximize_sum(n, arr): Given the number of elements n and the array arr, this function maximizes the sum of the array when Mario can perform a jump operation at most once. # find the current sum of the array current_sum = sum(arr) # find the maximum element in the array max_element = max(arr) # by increasing the maximum element by 1, we get the new maximum possible sum maximum_possible_sum = current_sum + 1 return maximum_possible_sum"},{"question":"In a forest, there are several different types of trees, denoted by different integers. For a given analysis, a botanist is interested in determining the maximum number of contiguous trees of the same type. Your task is to write a program that finds the length of the longest contiguous subsequence of trees of the same type. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of trees. - The second line contains `n` integers separated by spaces, where each integer `a_i` (1 ≤ a_i ≤ 10^9) represents the type of the i-th tree. # Output - Output a single integer, the length of the longest contiguous subsequence of trees of the same type. # Example Input 1 ``` 7 1 1 2 2 2 3 3 ``` Output 1 ``` 3 ``` Input 2 ``` 5 4 4 4 4 4 ``` Output 2 ``` 5 ``` Input 3 ``` 10 1 2 2 3 3 3 4 4 4 4 ``` Output 3 ``` 4 ``` # Explanation In the first example, the longest contiguous subsequence is of type `2` with a length of 3. In the second example, the entire sequence is of the same type (`4`), so the longest contiguous subsequence has a length of 5. In the third example, the longest contiguous subsequence is of type `4` with a length of 4.","solution":"def longest_contiguous_subsequence_of_same_type(n, trees): Returns the length of the longest contiguous subsequence of trees of the same type. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if trees[i] == trees[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"James is training for a marathon and follows a strict running schedule to improve his stamina and speed. To track his progress, he keeps a record of his running distance for N consecutive days. However, James has a strict condition: he will only continue his training schedule on days where he improves or maintains his previous day\'s running distance compared to the first day of this time period. Help James find the longest period of consecutive days where he either improves or maintains his running distance without any decrease compared to the first day of this period. If there are multiple such periods of the same length, return the earliest period. Input: The first line contains T, the number of test cases. Each test case contains two lines. The first line of each test case contains an integer N, the number of days. The second line of each test case contains N integers representing the running distance for each day. Output: For each test case, output a line containing 2 integers indicating the starting and ending day numbers of the longest period where each day\'s running distance is at least as much as the distance on the first day of this period. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ distance ≤ 10^9 Scoring: 1 ≤ N ≤ 10 : (30 pts) 1 ≤ N ≤ 10^3 : (30 pts) Original Constraints : (40 pts) SAMPLE INPUT 2 5 5 6 7 6 7 6 10 8 9 10 11 12 SAMPLE OUTPUT 1 5 2 6 Explanation Case 1: James runs 5 on the first day, and never runs less than 5 on subsequent days during this period. The longest period is from day 1 to day 5. Case 2: The longest period starts at day 2 with distance 8, and the distance keeps increasing till he reaches day 6. There is no longer period, so the answer is from day 2 to day 6.","solution":"def find_longest_consistent_period(num_days, distances): This function returns the starting and ending day numbers of the longest period where each day\'s running distance is at least as much as the distance on the first day of this period. if num_days == 0: return (0, 0) max_len = 1 start_day = 1 end_day = 1 current_len = 1 current_start = 1 for i in range(1, num_days): if distances[i] >= distances[current_start - 1]: current_len += 1 else: current_len = 1 current_start = i + 1 if current_len > max_len: max_len = current_len start_day = current_start end_day = i + 1 return (start_day, end_day) def process_input_output(test_cases): This function processes multiple test cases and returns the results. results = [] for test_case in test_cases: num_days, distances = test_case result = find_longest_consistent_period(num_days, distances) results.append(result) return results"},{"question":"You are given a city map represented by an `N x N` grid, organized in a row and column layout where each cell can either be an empty plot or a building. The goal is to determine if there is a valid path from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) of the city grid. A path can only be formed by moving horizontally or vertically between empty plots (cells containing `0`). The buildings are represented by cells containing `1` and cannot be traversed. Write a program that reads the grid and determines whether there is a path from the top-left to the bottom-right corner. If a path exists, print \\"YES\\". If no path exists, print \\"NO\\". Constraints: - 2 leq N leq 500 - The integer values in the grid are `0` (empty plot) or `1` (building). Input: - An integer `N` representing the size of the grid. - The next `N` lines each contain `N` integers, representing the grid. Output: - A single string: \\"YES\\" if there is a valid path, otherwise \\"NO\\". Example: Input: 4 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 Output: YES Input: 3 0 1 0 1 1 1 0 0 0 Output: NO","solution":"def is_path_exists(grid): Determine if there is a valid path from the top-left to the bottom-right corner in the grid. N = len(grid) if grid[0][0] == 1 or grid[N - 1][N - 1] == 1: return \\"NO\\" from collections import deque # Define directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) # Start from the top-left corner visited = set((0, 0)) # Keep track of visited cells while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == N - 1 and y == N - 1: return \\"YES\\" # Explore neighboring cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A travel agency offers a promotional package that includes a tour to multiple cities. They want to create an itinerary that minimizes the travel cost for their customers. The travel cost between cities is given as a matrix where the element at row i and column j represents the cost to travel from city i to city j. You need to help the travel agency find the minimum cost to visit all the cities starting from a specified city and returning to the same city, covering each city exactly once (known as the Traveling Salesman Problem). Input: - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - The first line of each test case contains an integer n (1 ≤ n ≤ 20), the number of cities. - The next n lines contain n integers each, where the j-th integer in the i-th line represents the travel cost from city i to city j. Output: - For each test case, print the minimum travel cost in a new line. Example: Input: ``` 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 ``` Output: ``` 80 64 ``` Explanation: In the first test case, the optimal path is 0 -> 1 -> 3 -> 2 -> 0 with a cost of 10 + 25 + 30 + 15 = 80. In the second test case, the optimal path is 0 -> 2 -> 1 -> 0 with a cost of 20 + 15 + 29 = 64.","solution":"import sys def tsp(cost, n): # memoization table where dp[mask][i] represents the minimum cost to visit # all the cities in mask ending at city i dp = [[None] * n for _ in range(1 << n)] def visit(mask, i): if dp[mask][i] is not None: return dp[mask][i] if mask == (1 << i): return cost[0][i] res = sys.maxsize prev_mask = mask & ~(1 << i) for j in range(n): if prev_mask & (1 << j): res = min(res, visit(prev_mask, j) + cost[j][i]) dp[mask][i] = res return res return min(visit((1 << n) - 1, i) + cost[i][0] for i in range(1, n)) def solve_tsp(test_cases): results = [] for cost_matrix in test_cases: n = len(cost_matrix) results.append(tsp(cost_matrix, n)) return results"},{"question":"Given a list of integers, write a function that partitions the list into three categories: numbers less than 0, numbers equal to 0, and numbers greater than 0. The output should be a list of three lists: the first list contains all numbers less than 0, the second list contains all numbers equal to 0, and the third list contains all numbers greater than 0. The order of the numbers in each list should be preserved from the original list. # Function Signature ```python def partition_numbers(nums: List[int]) -> List[List[int]]: ``` # Input - `nums`: A list of integers. # Output - A list of three lists: - The first list contains all numbers from `nums` that are less than 0. - The second list contains all numbers from `nums` that are equal to 0. - The third list contains all numbers from `nums` that are greater than 0. # Example ```python nums = [3, -1, 0, -2, 4, 0, -5] partition_numbers(nums) ``` Output ```python [[-1, -2, -5], [0, 0], [3, 4]] ``` # Note - The order of numbers within each partition must follow their original order in the input list.","solution":"from typing import List def partition_numbers(nums: List[int]) -> List[List[int]]: less_than_zero = [] equal_to_zero = [] greater_than_zero = [] for num in nums: if num < 0: less_than_zero.append(num) elif num == 0: equal_to_zero.append(num) else: greater_than_zero.append(num) return [less_than_zero, equal_to_zero, greater_than_zero]"},{"question":"Alice enjoys solving puzzles, especially those involving strings and integer sequences. One day, she comes across a unique problem. Given a string and an integer sequence of the same length, she wants to create a new string by reordering the characters in the original string according to the positions given in the sequence. Each position in the sequence corresponds to an index (1-based) in the original string, where the character at that index should be placed in the corresponding position of the new string. Your task is to help Alice by writing a program to generate the new string based on the reordering positions provided. Constraints * The length of the string and the sequence will be between 1 and 1000. * The sequence will be a permutation of integers from 1 to the length of the string. Input Input is given from Standard Input in the following format: ``` s seq_1 seq_2 ... seq_N ``` Where `s` is the original string, and `seq` is the sequence of positions. Output Print the newly reordered string. Examples Input ``` abcdef 6 5 4 3 2 1 ``` Output ``` fedcba ``` Input ``` hello 1 2 3 4 5 ``` Output ``` hello ``` Input ``` programming 11 10 9 8 7 6 5 4 3 2 1 ``` Output ``` gnimmargorp ```","solution":"def reorder_string(s, seq): Reorders the characters in the original string `s` according to the positions given in `seq`. :param s: Original string :param seq: List of positions in which to reorder characters :return: Reordered string reordered = [\'\'] * len(s) for idx, position in enumerate(seq): reordered[position - 1] = s[idx] return \'\'.join(reordered) def parse_input(input_str): Parses the standard input to extract the string and the sequence. :param input_str: Input string containing the original string and sequence. :return: Tuple containing the original string and the sequence list lines = input_str.strip().split(\'n\') s = lines[0] seq = list(map(int, lines[1].split())) return s, seq"},{"question":"In the kingdom of Zed, there are n villages connected by m bidirectional roads. Each village has a unique cultural site worth visiting. The kingdom has recently launched a new tourism initiative that allows tourists to collect souvenirs from these cultural sites. However, tourists must start their journey from a specific village (village number 1) and must return to this village after visiting other villages to collect souvenirs. A tourist can visit any village multiple times during their journey, but they should aim to collect distinct souvenirs for maximum satisfaction. As all roads in Zed are bidirectional, traveling between two connected villages always takes one time unit. There is no fixed travel window; tourists can travel day and night without any breaks. Your task is to find the maximum number of distinct souvenirs a tourist can collect if they start and end their journey in village 1. Input The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 1000), the number of villages and the number of roads. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting a bidirectional road between village u_i and village v_i. Output Print a single integer — the maximum number of distinct souvenirs a tourist can collect, starting from village 1 and returning to village 1 at the end of their journey. Examples Input 4 4 1 2 2 3 3 4 4 1 Output 4 Input 5 6 1 2 1 3 2 4 3 5 4 5 5 2 Output 5 Note Explanation of the first example: - The tourist starts in village 1 and can create a route that visits all villages at least once and returns to village 1. For example, the tourist can follow the path 1 -> 2 -> 3 -> 4 -> 1, collecting souvenirs from all 4 unique villages. Explanation of the second example: - The tourist starts in village 1 and can create a route that visits all villages at least once and returns to village 1. For instance, the tourist can follow the path 1 -> 2 -> 4 -> 5 -> 3 -> 1, collecting souvenirs from all 5 unique villages.","solution":"def max_distinct_souvenirs(n, m, roads): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): queue = deque([(start, 0)]) visited = set() count = 0 while queue: village, dist = queue.popleft() if village not in visited: visited.add(village) count += 1 for neighbor in graph[village]: if neighbor not in visited: queue.append((neighbor, dist + 1)) return count # As we start from village 1 and aim for collecting max distinct souvenirs. return bfs(1)"},{"question":"A group of friends is planning to attend a concert together. To make the trip, they need to rent one or more cars. Given the number of friends and the capacity of each car, determine the minimum number of cars required to transport all the friends. Constraints * 1 ≤ number of friends ≤ 100 * 1 ≤ car capacity ≤ 50 Input Input is given from Standard Input in the following format: ``` number_of_friends car_capacity ``` Output Print the minimum number of cars required. Examples Input ``` 20 4 ``` Output ``` 5 ``` Input ``` 35 10 ``` Output ``` 4 ``` Input ``` 40 8 ``` Output ``` 5 ``` Note: * In the first example, each car can carry 4 friends, so 20/4 = 5 cars are required. * In the second example, each car can carry 10 friends. Therefore, to carry 35 friends, you would need 4 cars (since 35 divided by 10 is 3.5, and you can’t have half a car, so you need to round up to the next whole car). * In the third example, you have 40 friends and each car can carry 8 friends, resulting in 5 cars (40 divided by 8 is exactly 5).","solution":"import math def min_number_of_cars(number_of_friends, car_capacity): Returns the minimum number of cars required to transport all friends. Args: number_of_friends (int): the number of friends car_capacity (int): the seating capacity of each car Returns: int: the minimum number of cars required return math.ceil(number_of_friends / car_capacity)"},{"question":"You are given an array of N integers, which may contain both positive and negative numbers. You need to perform a series of operations on the array until only one element remains. Each operation involves selecting any two elements from the array, summing them up, and storing the result back into the array while removing the selected elements. Your task is to determine the maximum possible value of the last remaining element. Constraints * 2 ≤ N ≤ 20 * -10^9 ≤ A_i ≤ 10^9 (1 ≤ i ≤ N) * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the maximum possible value of the last remaining element. Examples Input 4 1 -3 4 2 Output 10 Input 3 -1 -5 3 Output 7 Input 5 4 0 1 -2 7 Output 20","solution":"def max_remaining_element(n, arr): Returns the maximum possible value of the last remaining element in the array. The idea is to sum all positive numbers and all negative numbers separately and then add their absolute sums of the entire array to get the maximum possible sum. max_sum = sum(arr) return max_sum"},{"question":"A company needs to manage and analyze the performance of multiple industrial machines. Each machine is characterized by a unique serial number and a log of recorded operations. The company wants to determine the most frequently occurring operation type in the logs of each machine and identify the earliest timestamp of that operation type. Each operation log entry consists of a timestamp (in HH:MM format, 24-hour clock format), an operation type (represented as a string), and an operation value (integer). The timestamps within a single machine log are provided in chronological order. Write a program that processes an input list of machines and their respective operation logs, and outputs the most frequent operation type along with the earliest timestamp of that operation for each machine. input The input consists of multiple machine data sets. The end of the input is indicated by a line containing \\"END\\". Each machine data set starts with a line containing the unique serial number of the machine. This is followed by an integer n (1 ≤ n ≤ 100), representing the number of log entries for that machine. The next n lines each represent a log entry in the format: HH:MM operation_type operation_value Output For each machine, output the serial number, most frequent operation type, and the earliest timestamp of that operation type. If there are multiple operations with the same highest frequency, select the one with the earliest timestamp. Example Input ``` MACHINE-001 5 08:00 START 5 09:30 STOP 1 10:00 START 5 10:30 START 4 11:00 MAINTENANCE 2 MACHINE-002 3 09:00 CHECK 3 09:30 CHECK 2 10:00 RESET 1 END ``` Output ``` MACHINE-001 START 08:00 MACHINE-002 CHECK 09:00 ``` Explanation For MACHINE-001, the operation type \\"START\\" appears the most frequently (3 times), and the earliest timestamp of \\"START\\" is 08:00. For MACHINE-002, the operation type \\"CHECK\\" is the most frequent (2 times), with the earliest occurrence at 09:00.","solution":"def process_machine_logs(logs): from collections import defaultdict, Counter results = [] log_iter = iter(logs) while True: serial_number = next(log_iter, \\"END\\") if serial_number == \\"END\\": break n = int(next(log_iter)) operation_logs = [next(log_iter) for _ in range(n)] operations = [] for log_entry in operation_logs: timestamp, operation_type, _ = log_entry.split() operations.append((timestamp, operation_type)) freq_counter = Counter(op_type for _, op_type in operations) max_frequency = max(freq_counter.values()) most_frequent_operations = [op for op in operations if freq_counter[op[1]] == max_frequency] earliest_operation = min(most_frequent_operations, key=lambda x: x[0]) results.append(f\\"{serial_number} {earliest_operation[1]} {earliest_operation[0]}\\") return results"},{"question":"There is a sequence of events happening in a city, and you need to keep track of the population changes. You will have two types of queries: 1. 1 d p — Add p people to day d. 2. 2 s e — Calculate the total population change from day s to day e. Write a program that processes these queries efficiently. # Input The first line contains an integer n (1 ≤ n ≤ 200,000), which is the number of days you need to track. The second line contains an integer q (1 ≤ q ≤ 200,000), which is the number of queries to process. Next, q lines follow, each representing a query. The first integer in the query is t (1 ≤ t ≤ 2), indicating the type of the query. If t = 1, two additional integers, d (1 ≤ d ≤ n) and p (|p| ≤ 1,000), follow — these specify that you should add p people to day d. If t = 2, two additional integers, s (1 ≤ s ≤ n) and e (1 ≤ e ≤ n, s ≤ e) follow — these specify that you should calculate the total population change from day s to day e. # Output For each query of the second type, output the total population change for the specified range of days. Each result should be printed on a new line. # Example Input ``` 5 5 1 2 100 1 3 -50 2 1 5 1 4 30 2 2 4 ``` Output ``` 50 80 ``` Explanation - The first query adds 100 people to day 2. - The second query removes 50 people from day 3. - The third query asks for the total population change from day 1 to day 5, which is 0 + 100 - 50 + 0 + 0 = 50. - The fourth query adds 30 people to day 4. - The fifth query asks for the total population change from day 2 to day 4, which is 100 - 50 + 30 = 80.","solution":"def process_population_queries(n, q, queries): days = [0] * (n + 1) results = [] for query in queries: t = query[0] if t == 1: d, p = query[1], query[2] days[d] += p elif t == 2: s, e = query[1], query[2] results.append(sum(days[s:e + 1])) return results"},{"question":"You are given a robot with an initial position on an infinite 2D grid at coordinate (0, 0). The robot can move in 4 directions: up, down, left, or right. Each command the robot receives is a string containing a sequence of these moves denoted by U (up), D (down), L (left), and R (right). The robot executes each move in the command string one by one. Your task is to determine the final position of the robot after executing all the commands. Input Format: The first line contains T, the number of test cases. Each of the following T lines contains a command string, which is a sequence of characters \'U\', \'D\', \'L\', \'R\'. Output Format: Output T lines, each containing two integers, the final x and y coordinates of the robot for each test case. Constraints: 1 ≤ T ≤ 100 1 ≤ length of each command string ≤ 1000 SAMPLE INPUT: 2 UDLR UUDDLRLR SAMPLE OUTPUT: 0 0 0 0 Explanation: In the first test case, the robot\'s movements will cancel out each other (up followed by down, left followed by right), hence it will end up at the initial position (0, 0). In the second test case, there are an equal number of up and down moves, and an equal number of left and right moves, so the final position is also (0, 0).","solution":"def final_position(commands): Returns the final x, y position of the robot after executing the given sequence of commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) def robot_positions(test_cases): Returns a list of final positions for each test case in the form (x, y). results = [] for commands in test_cases: results.append(final_position(commands)) return results"},{"question":"You are given a sequence of integers, and you need to determine if it is possible to rearrange these integers such that the sequence becomes a strictly increasing sequence. A sequence is strictly increasing if each element is strictly larger than the preceding one. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of integers in the sequence. The second line contains n integers a_i (1 ≤ a_i ≤ 100) — the elements of the sequence. Output Print \\"YES\\" if it\'s possible to rearrange the sequence to get a strictly increasing sequence, and \\"NO\\" otherwise. Examples Input 5 4 5 1 3 2 Output YES Input 3 1 1 1 Output NO Note In the first example, one valid strictly increasing sequence is [1, 2, 3, 4, 5]. In the second example, it\'s impossible to rearrange the sequence to form a strictly increasing sequence since all elements are the same.","solution":"def can_form_strictly_increasing_sequence(n, sequence): Determines if it is possible to rearrange the sequence such that it becomes a strictly increasing sequence. Args: n (int): The number of integers in the sequence. sequence (list of int): The elements of the sequence. Returns: str: \\"YES\\" if it\'s possible to rearrange to get a strictly increasing sequence, \\"NO\\" otherwise. sequence.sort() for i in range(1, n): if sequence[i] <= sequence[i - 1]: return \\"NO\\" return \\"YES\\" # Example usage: # print(can_form_strictly_increasing_sequence(5, [4, 5, 1, 3, 2])) # Output: \\"YES\\" # print(can_form_strictly_increasing_sequence(3, [1, 1, 1])) # Output: \\"NO\\""},{"question":"You are given a list of integers representing the scores achieved by students in a test. The scores are sorted in strictly increasing order. The task is to remove exactly one score from the list in such a way that the mean (average) of the remaining scores is maximized. Input: - The first line contains a single integer n (3 ≤ n ≤ 100) — the number of students. - The next line contains n space-separated integers si (1 ≤ si ≤ 1000), where si is the score of the i-th student. The sequence si is increasing (i.e. each element except for the first one is strictly larger than the previous one). Output: - Print a single floating-point number — the maximum mean of the scores of the remaining students after removing exactly one score. Your answer will be considered correct if its absolute or relative error does not exceed 10^-6. Examples: Input: 4 10 20 30 40 Output: 30.0 Input: 5 1 5 6 7 10 Output: 7.0 Input: 3 100 200 300 Output: 250.0 Note: In the first sample, you achieve the maximum mean 30.0 by removing the first or last score. In the second sample, you achieve the maximum mean 7.0 by removing the first score. In the third sample, you achieve the maximum mean 250.0 by removing the first or last score.","solution":"def max_mean_after_removal(n, scores): Given a list of scores, return the maximum mean of the scores after removing exactly one score. # Sum of the entire list total_sum = sum(scores) # Initialize max_mean to a very small number max_mean = -float(\'inf\') # Check the mean after removing each score for i in range(n): current_sum = total_sum - scores[i] current_mean = current_sum / (n - 1) max_mean = max(max_mean, current_mean) return round(max_mean, 6)"},{"question":"A chatbot needs to be developed that can understand basic mathematical expressions and provide their solutions. The chatbot will receive a sequence of expressions, and it must output the result for each one. Input Format: The first line contains an integer T, the number of test cases. Each test case consists of a string, representing a valid mathematical expression. The expressions will contain only non-negative integers and the operators +, -, *, and /, without any spaces. Output Format: For each expression, output the result on a new line. The result should be an integer if the result of the expression is an integer, otherwise output the result as a floating-point number rounded to two decimal places. Constraints: 1 ≤ T ≤ 100 The length of each expression will not exceed 100 characters. All operations will be such that no division by zero or overflow occurs. SAMPLE INPUT 3 3+5*2 10/3 8-4/2 SAMPLE OUTPUT 13 3.33 6 Explanation: The provided expressions are evaluated as follows: 1. \\"3+5*2\\" is evaluated as 3 + (5 * 2) = 13 2. \\"10/3\\" is evaluated as 10 / 3 = 3.3333..., rounded to 3.33 3. \\"8-4/2\\" is evaluated as 8 - (4 / 2) = 8 - 2 = 6","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result. If the result is an integer, it returns an integer. If the result is a float, it returns the result rounded to 2 decimal places. result = eval(expression) if isinstance(result, int): return result else: return round(result, 2) def process_expressions(expressions): Takes a list of mathematical expressions and returns a list of their evaluated results. results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results"},{"question":"You are managing a library system and are tasked with developing a feature to manage book reservations. Users can place reservations on books, and your system must keep track of the reservations to fulfill them in the correct order. The feature should handle adding reservations, processing the next reservation in line, and querying the current state of the reservation list. You are given the following operations to implement: 1. **reserve book_name**: Adds a reservation for the book named `book_name` to the end of the reservation queue. 2. **process**: Processes the next reservation in line, meaning the first reservation is removed from the queue. If the reservation queue is empty, this operation should return \\"No reservations\\" instead of processing a reservation. 3. **query**: Returns the current state of the reservation queue as a list of book names in the order they were reserved. Input The input consists of multiple lines, each containing one of the above operations. Output For each `process` and `query` operation, output the result accordingly. Example Input ``` reserve \\"Moby Dick\\" reserve \\"War and Peace\\" query process query process process ``` Output ``` [\\"Moby Dick\\", \\"War and Peace\\"] [\\"War and Peace\\"] No reservations ``` Explanation 1. The command `reserve \\"Moby Dick\\"` adds \\"Moby Dick\\" to the reservation queue. 2. The command `reserve \\"War and Peace\\"` adds \\"War and Peace\\" to the reservation queue. 3. The `query` command prints the current state of the queue, which is [\\"Moby Dick\\", \\"War and Peace\\"]. 4. The `process` command processes the next reservation, removing \\"Moby Dick\\" from the queue. 5. The next `query` command prints the current state of the queue, which is now [\\"War and Peace\\"]. 6. The subsequent `process` command processes the next reservation, removing \\"War and Peace\\" from the queue. 7. The final `process` command finds that the reservation queue is empty, so it prints \\"No reservations\\".","solution":"class LibraryReservationSystem: def __init__(self): self.queue = [] def reserve(self, book_name): Adds a reservation for the book named `book_name` to the end of the reservation queue. self.queue.append(book_name) def process(self): Processes the next reservation in line, meaning the first reservation is removed from the queue. If the reservation queue is empty, this operation returns \\"No reservations\\" instead. if self.queue: self.queue.pop(0) else: return \\"No reservations\\" def query(self): Returns the current state of the reservation queue as a list of book names in the order they were reserved. return self.queue"},{"question":"Write a program to handle a collection of bank accounts with the following operations: * deposit(accountId, amount): deposit a given amount to the specified account. * withdraw(accountId, amount): withdraw a given amount from the specified account. * balance(accountId): report the current balance of the specified account. The system should maintain the balance for each account, where an account is identified by a unique integer ID. Constraints: * All inputs are given as integers. * 1 leq n leq 100000 (number of accounts) * 1 leq q leq 200000 (number of queries) * 1 leq accountId leq n * 1 leq amount leq 10000 Input The input is given in the following format: n q query_1 query_2 ... query_q The first line contains an integer n, the number of bank accounts. The second line contains an integer q, the number of queries. Each of the following q lines represents a query in the format: * 0 accountId amount (for deposit operation) * 1 accountId amount (for withdraw operation) * 2 accountId (for balance operation) Output For each balance query, print the balance in a line. Examples Input 3 7 0 1 500 0 2 300 2 1 1 1 200 2 1 2 2 1 3 400 Output 500 300 300","solution":"class BankSystem: def __init__(self, n): Initializes the BankSystem with n accounts, all with a starting balance of 0. :param n: Number of bank accounts self.balances = [0] * (n + 1) # +1 because account IDs are 1-based def deposit(self, accountId, amount): Deposits the specified amount into the given account. :param accountId: ID of the account :param amount: Amount to be deposited self.balances[accountId] += amount def withdraw(self, accountId, amount): Withdraws the specified amount from the given account. :param accountId: ID of the account :param amount: Amount to be withdrawn self.balances[accountId] -= amount def balance(self, accountId): Returns the current balance of the given account. :param accountId: ID of the account :return: Balance of the account return self.balances[accountId] def process_queries(n, queries): Processes the given queries on the bank system and returns the result of balance queries. :param n: Number of bank accounts :param queries: List of queries to be processed :return: List of balance results bank_system = BankSystem(n) results = [] for query in queries: if query[0] == 0: bank_system.deposit(query[1], query[2]) elif query[0] == 1: bank_system.withdraw(query[1], query[2]) elif query[0] == 2: results.append(bank_system.balance(query[1])) return results"},{"question":"You are given a string s and an integer k. You can perform the following operation any number of times: Choose any substring of s of length k and reverse it. What is the lexicographically smallest string you can obtain? Input The input consists of a single string s (1 ≤ |s| ≤ 100 000) and an integer k (1 ≤ k ≤ |s|), separated by a single space. Output Output the lexicographically smallest string possible after any number of substring reversals. Examples Input dcba 4 Output abcd Input zxy 2 Output xzzy","solution":"def smallest_lexicographical_string(s, k): Returns the lexicographically smallest string possible after any number of k-length substring reversals. if k == 1: return \'\'.join(sorted(s)) else: return \'\'.join(sorted(s))"},{"question":"Design a program that takes as input a non-negative integer n (1 ≤ n ≤ 10^5) and outputs an n × n matrix with the following properties: 1. The matrix should contain exactly n distinct numbers from the range of 1 to n inclusive. 2. Each number from the range 1 to n should appear exactly once across the whole matrix. 3. The matrix should satisfy the property that the sum of each row is equal to the sum of each column. If no such matrix exists, output -1. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the matrix. Output If a valid matrix exists, output n lines, each containing n space-separated integers, representing the matrix. If no such matrix exists, output -1. Examples Input 3 Output 1 2 3 3 1 2 2 3 1 Input 4 Output -1 Note For n = 4, it is not possible to construct a 4x4 matrix that satisfies the given properties.","solution":"def construct_matrix(n): if n % 2 == 0: return -1 matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): matrix[i][j] = (i + j) % n + 1 return matrix"},{"question":"Dr. Smith is working on a new artificially intelligent system designed to recognize patterns in a sequence of integer numbers. He wants to test the ability of the system to detect peaks in the sequence. An integer x in a sequence is considered a peak if it satisfies the following conditions: 1. The element is greater than its neighbors, that is, for element `seq[i]`, it must hold that `seq[i] > seq[i-1]` and `seq[i] > seq[i+1]`. 2. The first and last elements of the sequence cannot be peaks because they do not have two neighbors. Dr. Smith needs your help to write a program that will count the number of peaks in a given sequence. # Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. The next line contains n space-separated integers representing the sequence `seq[0], seq[1], ..., seq[n-1]` (-10^6 ≤ seq[i] ≤ 10^6). # Output Print a single integer representing the number of peaks in the sequence. # Examples Input 5 1 3 2 4 3 Output 2 Input 7 4 2 3 5 1 6 3 Output 2 Input 3 1 2 1 Output 1 Note In the first example, the peaks are `3` (index 1) and `4` (index 3). In the second example, the peaks are `5` (index 3) and `6` (index 5). In the third example, the peak is `2` (index 1).","solution":"def count_peaks(n, seq): This function counts the number of peaks in the given sequence. :param n: The length of the sequence (integer) :param seq: A list of integers representing the sequence :return: The number of peaks in the sequence (integer) if n < 3: return 0 # There can be no peaks if the sequence length is less than 3 peak_count = 0 for i in range(1, n - 1): if seq[i] > seq[i - 1] and seq[i] > seq[i + 1]: peak_count += 1 return peak_count"},{"question":"Given an undirected graph with `N` nodes and `M` edges, determine if the graph is a tree. A tree is a connected graph with `N` nodes and `N-1` edges that has no cycles. Constraints * `2 ≤ N ≤ 10^5` * `1 ≤ M ≤ 2 × 10^5` * The given graph contains no self-loops and no multiple edges. Input The input is given in the following format. N M a_1 b_1 a_2 b_2 ... a_M b_M Output Print `YES` if the given graph is a tree, otherwise print `NO`. Example Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 5 5 1 2 2 3 3 4 4 5 1 5 Output NO","solution":"def is_tree(n, m, edges): if m != n - 1: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\" # Function to parse input def parse_input(input_lines): lines = input_lines.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, edges"},{"question":"Maria works at a manufacturing company where they produce customized gadgets. Each gadget goes through a specific assembly line with k different stations. Each station can perform one type of task that may increase, decrease, or leave the gadget\'s quality score unchanged. Maria has the task of monitoring the overall effectiveness of each station in terms of quality adjustment. The assembly line processes exactly m gadgets in a day. For each gadget, Maria records the adjustments made by each station on that gadget’s quality score. She needs to determine which station is the most effective by computing the total adjustment caused by each station and identifying the one with the maximum aggregate adjustment. Input The first line contains two integers m (1 ≤ m ≤ 100) and k (1 ≤ k ≤ 10) — the number of gadgets and the number of stations, respectively. The next m lines each contain k integers, where the j-th integer on the i-th line represents the adjustment made by the j-th station on the i-th gadget\'s quality score. The adjustments can range from -10 to 10. Output Print a single integer representing the 1-based index of the station with the highest total adjustment. If multiple stations have the same highest total adjustment, print the smallest index among them. Examples Input 3 4 2 3 -1 0 4 -2 2 1 -1 5 0 2 Output 2 Input 2 3 1 2 3 -3 4 -2 Output 2 Input 4 2 10 5 -5 2 0 3 7 -10 Output 1 Note In the first example, the total adjustments made by the stations are: - Station 1: 2 + 4 - 1 = 5 - Station 2: 3 - 2 + 5 = 6 - Station 3: -1 + 2 + 0 = 1 - Station 4: 0 + 1 + 2 = 3 Station 2 has the highest total adjustment. In the second example, - Station 1: 1 - 3 = -2 - Station 2: 2 + 4 = 6 - Station 3: 3 - 2 = 1 Station 2 has the highest total adjustment.","solution":"def most_effective_station(m, k, adjustments): Determines the most effective station in terms of the highest total adjustment. Returns the 1-based index of the station with the highest total adjustment. # Initialize total adjustments for each station total_adjustments = [0] * k # Accumulate adjustments for each station for gadget in adjustments: for j in range(k): total_adjustments[j] += gadget[j] # Find the station with the maximum total adjustment max_adjustment = total_adjustments[0] max_index = 0 for i in range(1, k): if total_adjustments[i] > max_adjustment: max_adjustment = total_adjustments[i] max_index = i # Return the 1-based index of the station return max_index + 1"},{"question":"A city is expanding its subway network and wants to ensure optimal connectivity between its stations. Each station is identified by a unique number from 1 to n. Subway tunnels connect these stations, and each tunnel has a specific maximum capacity (which characterizes the maximal number of passengers it can handle at any given time). Given the constraints of the city\'s expansion project, there is at most one tunnel going into each station and at most one tunnel going out of each station. The city\'s mayor, Alex, wants to install additional facilities in the stations as follows: - For every station with an outgoing tunnel and without an incoming tunnel, Alex should install an entrance gate. - For every station with an incoming tunnel and without an outgoing tunnel, Alex should install an exit gate. Each entrance gate station will convey traffic to all subsequent stations connected via the tunnels. Similarly, each exit gate station will receive traffic originating from some entrance gate station. Additionally, Alex wants to ensure that the traffic through the network does not exceed the capacity of the tunnels. Therefore, the mayor aims to find the maximum number of passengers that can be safely conveyed from each entrance station to its corresponding exit station. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n) — the number of stations and the number of tunnels correspondingly. Then m lines follow — each line describing one tunnel with three integers ai, bi, ci, indicating a tunnel with capacity ci going from station ai to station bi (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 10^6). It is guaranteed that for each station there is at most one tunnel going into it and at most one tunnel going out of it. Output Print integer e in the first line — the number of entrance-exit station pairs. For the next e lines, print 3 integers per line, separated by spaces: entri, exiti, and capacityi, where entri ≠ exiti (1 ≤ i ≤ e). Here entri and exiti are indexes of entrance and exit stations respectively, and capacityi is the maximum capacity of traffic that can be conveyed. All the e lines should be ordered (increasingly) by entri. Examples Input 4 2 1 2 15 2 3 10 Output 1 1 3 10 Input 5 3 1 2 20 3 4 25 2 5 10 Output 2 1 5 10 3 4 25 Input 6 4 1 2 30 2 3 20 4 5 15 5 6 10 Output 2 1 3 20 4 6 10","solution":"def find_station_pairs(n, m, tunnels): from collections import defaultdict, deque if m == 0: return (0, []) out_tunnel = {} in_tunnel = {} capacity = {} for ai, bi, ci in tunnels: out_tunnel[ai] = bi in_tunnel[bi] = ai capacity[(ai, bi)] = ci entrance_gates = set(out_tunnel.keys()) - set(in_tunnel.keys()) exit_gates = set(in_tunnel.keys()) - set(out_tunnel.keys()) station_pairs = [] for entrance in sorted(entrance_gates): current_station = entrance min_capacity = float(\'inf\') while current_station in out_tunnel: next_station = out_tunnel[current_station] min_capacity = min(min_capacity, capacity[(current_station, next_station)]) current_station = next_station exit_station = current_station station_pairs.append((entrance, exit_station, min_capacity)) station_pairs.sort() return (len(station_pairs), station_pairs) # Example usage: tunnels = [ (1, 2, 30), (2, 3, 20), (4, 5, 15), (5, 6, 10) ] n, m = 6, 4 print(find_station_pairs(n, m, tunnels))"},{"question":"A digital display screen prompts the visitor of a museum with the current temperature in Celsius and asks them to select the corresponding category: \\"Freezing\\", \\"Cold\\", \\"Moderate\\", \\"Hot\\", and \\"Scorching\\". The temperature ranges for these categories are: - Freezing: Below 0°C - Cold: 0°C to 15°C (inclusive) - Moderate: 16°C to 25°C (inclusive) - Hot: 26°C to 35°C (inclusive) - Scorching: Above 35°C Write a program that reads the current temperature in Celsius and outputs the category of the temperature, as defined above. Input: A single integer T (-50 ≤ T ≤ 50) — the current temperature in Celsius. Output: Print a single string — the category corresponding to the given temperature. Examples: Input 14 Output Cold Input 30 Output Hot","solution":"def categorize_temperature(T): Returns the category of the temperature based on the given ranges. Parameters: T (int): The current temperature in Celsius. Returns: str: The category of the temperature. if T < 0: return \\"Freezing\\" elif 0 <= T <= 15: return \\"Cold\\" elif 16 <= T <= 25: return \\"Moderate\\" elif 26 <= T <= 35: return \\"Hot\\" else: # T > 35 return \\"Scorching\\""},{"question":"A software company wants to create a new search feature for its document processing tool. The feature is designed to find the longest common prefix shared by a list of document titles. Your task is to implement this feature given a list of document titles. Given a list of strings, return the longest common prefix among them. If there is no common prefix, return an empty string. Constraints: * 1 leq n leq 200 * 1 leq |title_i| leq 200 for every i (The length of any given title) * title_i consists of lowercase English letters (`a` - `z`) for every i. Input Input is given from Standard Input in the following format: n title_1 title_2 ... title_n Output Output the longest common prefix. If there is no common prefix, print an empty string. Examples Input 4 documentary docile doctor dock Output doc Input 3 archive art arrow Output","solution":"def longest_common_prefix(titles): Finds the longest common prefix string among an array of strings. if not titles: return \\"\\" # Sort the array to minimize comparisons titles.sort() # Take the shortest and the longest strings first = titles[0] last = titles[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 # The longest common prefix is the portion of the first string up to index i return first[:i]"},{"question":"A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\". A string is nearly a palindrome if you can make it a palindrome by removing exactly one character. For example, \\"racecar\\" and \\"radar\\" are palindromes, and \\"raceca\\" and \\"radarx\\" are nearly palindromes. Write a function that determines whether the input string is a palindrome or nearly a palindrome. Function Signature: ```python def is_nearly_palindrome(s: str) -> bool: pass ``` Input: - A single string `s` (1 ≤ |s| ≤ 10^5), which consists of lower case alphabetic characters only. Output: - Return `True` if the string `s` is a palindrome or nearly a palindrome. Otherwise, return `False`. Example: Input ``` racecar ``` Output ``` True ``` Input ``` radarx ``` Output ``` True ``` Input ``` hello ``` Output ``` False ``` Note: - For the string \\"racecar\\", it is already a palindrome. - For the string \\"radarx\\", removing \'x\' would make it \\"radar\\", which is a palindrome. - For the string \\"hello\\", no single character removal can make it a palindrome, so it returns \\"False\\".","solution":"def is_nearly_palindrome(s: str) -> bool: Determines if the input string \'s\' is a palindrome or nearly a palindrome. A nearly palindrome is a string that can become a palindrome by removing one character. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check if removing s[left] or s[right] makes the string a palindrome return is_palindrome(s[left+1:right+1]) or is_palindrome(s[left:right]) left += 1 right -= 1 return True"},{"question":"Pharmaceutical Informatics is a new software system designed to manage the inventory of medications in a hospital. The system tracks medications, their quantities, and expiry dates. Hospital staff can query the current stock of any medication at any given time to ensure they always have sufficient inventory. You are tasked with implementing a feature to support the following operations: 1. `add_medication` - This operation adds a specified quantity of medication to the inventory with a specific expiry date. 2. `remove_medication` - This operation removes a specified quantity of medication from the inventory. The earliest expiring medication should be removed first. 3. `query_stock` - This operation returns the current quantity of a specific medication available in the inventory. You need to design and implement a function or set of functions in Python to manage these operations. Your solution should ensure that the earliest expiring medications are removed first when processing a `remove_medication` request. # Input 1. The first line of input contains an integer `Q`, the number of operations. 2. Each of the following `Q` lines contains an operation in one of the following formats: - `add_medication <medication_name> <quantity> <expiry_date>`: Add the specified quantity of medication with the given expiry date. - `remove_medication <medication_name> <quantity>`: Remove the specified quantity of medication. - `query_stock <medication_name>`: Return the current quantity of the specified medication. # Output For each `query_stock` operation, output the current quantity of the specified medication in the inventory. # Constraints - `1 <= Q <= 10^4` - `1 <= medication_name` and `expiry_date` are strings of length at most 20. - `1 <= quantity <= 10^9` - The expiry date is in the format `YYYY-MM-DD`. # Example Input ``` 6 add_medication aspirin 100 2023-12-31 add_medication aspirin 50 2023-06-30 query_stock aspirin remove_medication aspirin 70 query_stock aspirin remove_medication aspirin 40 ``` Output ``` 150 80 ``` # Explanation 1. After two `add_medication` operations, the inventory for aspirin has 100 units expiring on `2023-12-31` and 50 units expiring on `2023-06-30`. 2. The first `query_stock` returns 150 (100 + 50). 3. The `remove_medication` operation removes 50 of the earliest expiring batch (`2023-06-30`), then removes 20 from the next batch (`2023-12-31`). 4. The second `query_stock` returns 80. 5. The final `remove_medication` operation removes the remaining 80 from the batch expiring on `2023-12-31`, leaving 0 units.","solution":"from collections import defaultdict, deque from datetime import datetime class PharmaceuticalInformatics: def __init__(self): self.inventory = defaultdict(deque) def add_medication(self, medication_name, quantity, expiry_date): expiry_date_obj = datetime.strptime(expiry_date, \\"%Y-%m-%d\\") self.inventory[medication_name].append((expiry_date_obj, quantity)) def remove_medication(self, medication_name, quantity): inventory_deque = self.inventory[medication_name] remaining_quantity = quantity while remaining_quantity > 0 and inventory_deque: current_expiry, current_quantity = inventory_deque.popleft() if current_quantity > remaining_quantity: inventory_deque.appendleft((current_expiry, current_quantity - remaining_quantity)) remaining_quantity = 0 else: remaining_quantity -= current_quantity def query_stock(self, medication_name): total_quantity = sum(qty for _, qty in self.inventory[medication_name]) return total_quantity def main(operations): system = PharmaceuticalInformatics() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add_medication\\": _, medication_name, quantity, expiry_date = parts system.add_medication(medication_name, int(quantity), expiry_date) elif command == \\"remove_medication\\": _, medication_name, quantity = parts system.remove_medication(medication_name, int(quantity)) elif command == \\"query_stock\\": _, medication_name = parts results.append(system.query_stock(medication_name)) return results"},{"question":"Suppose you have a list of n integers, each representing the height of a building. You want to determine the number of pairs of buildings (i, j) such that the second building is taller than the first and comes after the first building in the list. In other words, find the number of pairs (i, j) where 1 ≤ i < j ≤ n and height[i] < height[j]. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n integers h1, h2, …, hn (1 ≤ hi ≤ 10^6) — the heights of the buildings. Output Print the number of such pairs. Examples Input 5 2 1 5 3 4 Output 7 Input 4 4 3 2 1 Output 0 Input 6 1 2 3 4 5 6 Output 15 Note In the first example, the 7 pairs are: (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), and (3, 5). In the second example, there are no pairs where a building is followed by a taller building. In the third example, all possible pairs (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), and (5, 6) satisfy the condition.","solution":"def find_taller_building_pairs(n, heights): Find the number of pairs of buildings (i, j) such that the second building (j) is taller than the first building (i) and comes after it in the list. Parameters: n (int): Number of buildings. heights (list): List of integers representing the heights of the buildings. Returns: int: The number of valid pairs (i, j). count = 0 for i in range(n): for j in range(i + 1, n): if heights[i] < heights[j]: count += 1 return count"},{"question":"A university is conducting online exams and has a system in place to ensure that students do not cheat by having multiple accounts. Each student is associated with a unique combination of first name and last name. Professors have provided the list of the student names, and the system needs to quickly check whether any duplicate names exist. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of students. The next n lines contain two strings, first_name and last_name, each containing only lowercase Latin letters and having lengths between 1 and 100 inclusive. Output Print \\"YES\\" if any student names (combination of first name and last name) repeat, otherwise print \\"NO\\". Example Input 5 john doe jane smith john doe alex doe alex smith Output YES 5 john doe jane smith john snow alex doe alex smith Output NO","solution":"def has_duplicate_students(n, students): Given the number of students and a list of student names (first name and last name), this function returns \'YES\' if there are duplicate student names and \'NO\' otherwise. student_set = set() for student in students: if student in student_set: return \\"YES\\" student_set.add(student) return \\"NO\\""},{"question":"Write a function that simulates a simple game of Snake on a 2D grid. The grid is represented by a 2-dimensional list, where `0` represents empty cells and `1` represents the snake\'s body cells. The snake starts at the top-left corner, occupies `_k_` length of cells, and is initially moving to the right. Given a series of moves, update the position of the snake and report the state of the grid after each move. The snake can move up (`\'U\'`), down (`\'D\'`), left (`\'L\'`), and right (`\'R\'`). The snake\'s head moves first, followed by the rest of its body. If the snake runs into the wall or into itself, the game ends immediately. Input Format - An integer `k` representing the initial length of the snake. - A 2-dimensional list `grid` representing the initial state of the grid. - A list `moves` containing a sequence of moves the snake should make. Output Format Print the state of the grid after each move as space-separated values. If the game ends due to collision, print \\"Game Over\\" and exit. Constraints - `2 ≤ k ≤ 100` - The grid will be of size 10x10. - The initial direction is always right, the snake will only move within the confines of the grid. SAMPLE INPUT 2 [ [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ] [\'R\', \'R\', \'D\', \'L\', \'U\'] SAMPLE OUTPUT 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Game Over","solution":"def simulate_snake_game(k, grid, moves): n = 10 directions = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} def print_grid(): for row in grid: print(\' \'.join(map(str, row))) print() # Initialize the snake position snake = [(0, i) for i in range(k)] for move in moves: head = snake[-1] move_dir = directions[move] new_head = (head[0] + move_dir[0], head[1] + move_dir[1]) if (new_head[0] < 0 or new_head[0] >= n or new_head[1] < 0 or new_head[1] >= n or (new_head in snake)): print(\\"Game Over\\") return snake.append(new_head) tail = snake.pop(0) grid[tail[0]][tail[1]] = 0 grid[new_head[0]][new_head[1]] = 1 print_grid()"},{"question":"You are given an array of positive integers representing the heights of a series of containers lined up in a row. The width of each container is 1 unit. A container can hold water if there are taller containers on both the left and right side of it. Determine the maximum amount of water that can be trapped within these containers after a heavy rainfall. The water should be only calculated for the containers that can actually trap some water (i.e., not for the edges). Input The input consists of a single line containing a list of positive integers separated by spaces, where each integer represents the height of a container (1 ≤ |heights| ≤ 100 and 1 ≤ heights[i] ≤ 1000). Output Print the maximum units of water trapped within the containers. Examples Input 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 4 2 0 3 2 5 Output 9","solution":"def max_water_trapped(heights): Calculate the maximum amount of water trapped within these containers after rainfall. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water trapped water_trapped = 0 for i in range(n): water_trapped += max(0, min(left_max[i], right_max[i]) - heights[i]) return water_trapped"},{"question":"Bob is tasked with managing the inventory of a large warehouse that stores various items. Each day, items may be added to or removed from the inventory, and Bob needs to keep track of the current inventory counts. He wants to implement a system that efficiently updates and queries the inventory. The system must support the following operations: * **Add x y**: Add y units of item x to the inventory. If item x is not already in the inventory, it is added. * **Remove x y**: Remove y units of item x from the inventory. It is guaranteed that there will be at least y units of item x available when this operation is performed. * **Query x**: Print the current count of item x in the inventory. If item x is not in the inventory, print 0. Your task is to write a program that processes a sequence of inventory operations and maintains the inventory accordingly. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. The following n lines each contain one operation in one of the formats described above. Item x is identified by a string (1 ≤ |x| ≤ 100), which consists of lowercase and uppercase English letters. Output For each \\"Query x\\" operation, output the current count of item x in the inventory. Each output should be on a new line. Example Input 8 Add apple 10 Add orange 5 Query apple Remove apple 3 Query apple Query orange Add apple 7 Query apple Output 10 7 5 14 Note The \\"Add\\" and \\"Remove\\" operations modify the inventory count of a specific item, while the \\"Query\\" operation retrieves the current count of the specified item. In the example, the initial count of \\"apple\\" is increased to 10, then decreased to 7, and then increased to 14. The counts of \\"orange\\" are also queried and updated similarly.","solution":"def manage_inventory(operations): Manages a warehouse inventory based on a list of operations. :param operations: List of operations in the format [\\"Add x y\\", \\"Remove x y\\", \\"Query x\\"]. :return: List of results for each Query operation. inventory = {} results = [] for operation in operations: parts = operation.split() command = parts[0] item = parts[1] if command == \\"Add\\": quantity = int(parts[2]) if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif command == \\"Remove\\": quantity = int(parts[2]) if item in inventory: inventory[item] -= quantity elif command == \\"Query\\": results.append(inventory.get(item, 0)) return results # Example usage: # operations = [ # \\"Add apple 10\\", # \\"Add orange 5\\", # \\"Query apple\\", # \\"Remove apple 3\\", # \\"Query apple\\", # \\"Query orange\\", # \\"Add apple 7\\", # \\"Query apple\\" # ] # print(manage_inventory(operations)) # Output: [10, 7, 5, 14]"},{"question":"Given an array `arr` of integers, you are tasked with developing a system that supports the following operations: 1. **Add an element** `x` to the array `arr`. 2. **Remove an element** `x` from the array `arr`. If multiple instances of `x` exist, remove only one instance. 3. **Find median** of the current array `arr`. The median is the middle element in an ordered list of numbers. If there is an even number of elements, the median is the average of the two middle elements. Your task is to process a sequence of operations and return the result of each \\"find median\\" operation. **Input** The first line contains an integer `q` (1 ≤ q ≤ 100,000) — number of queries. Each of the following `q` lines contains a query in one of the following forms: - \\"1 x\\" (1 ≤ x ≤ 10^6) : Add an element `x` to the array. - \\"2 x\\" (1 ≤ x ≤ 10^6) : Remove an element `x` from the array. - \\"3\\" : Find and print the median of the current array. **Output** For each \\"find median\\" query, print the median of the array on a new line. **Examples** Input: ``` 6 1 1 1 3 1 2 3 2 1 3 ``` Output: ``` 2 2.5 ``` Input: ``` 5 1 5 1 3 3 2 3 3 ``` Output: ``` 4 5 ``` **Explanation** In the first example: - The array starts empty. - After the first query, the array becomes [1]. - After the second query, the array becomes [1, 3]. - After the third query, the array becomes [1, 2, 3]. - The median after the third query is 2. - After the fourth query, we remove one instance of 1, so the array becomes [2, 3]. - The median after the fifth query is the average of 2 and 3, which is 2.5. In the second example: - The array starts empty. - After the first query, the array becomes [5]. - After the second query, the array becomes [3, 5]. - The median after the second query is the average of 3 and 5, which is 4. - After the fourth query, the array becomes [5]. - The median after the fifth query is 5.","solution":"import bisect class MedianFinder: def __init__(self): self.arr = [] def add_element(self, x): bisect.insort(self.arr, x) def remove_element(self, x): if x in self.arr: self.arr.remove(x) def find_median(self): n = len(self.arr) if n == 0: return None if n % 2 == 1: return self.arr[n // 2] else: return (self.arr[n // 2 - 1] + self.arr[n // 2]) / 2 def process_queries(queries): mf = MedianFinder() results = [] for query in queries: if query[0] == 1: mf.add_element(query[1]) elif query[0] == 2: mf.remove_element(query[1]) elif query[0] == 3: med = mf.find_median() results.append(med) return results"},{"question":"A permutation of an array is a rearrangement of its elements. For example, the array `[1,2,3]` has the following permutations: `[1,2,3]`, `[1,3,2]`, `[2,1,3]`, `[2,3,1]`, `[3,1,2]` and `[3,2,1]`. You are given a string consisting of the characters \'0\' and \'1\'. Consider all the permutations of this string\'s characters and determine which permutation is lexicographically largest. A permutation `p` is considered lexicographically larger than permutation `q` if at the first position where `p` and `q` differ, the character in `p` is larger than the character in `q`. Input The first line contains an integer `n` (1 ≤ n ≤ 105), the length of the binary string. The second line contains a binary string `s` of length `n`. Output Output the lexicographically largest permutation of the given string. Examples Input 3 101 Output 110 Input 4 0001 Output 1000 Input 5 11111 Output 11111","solution":"def largest_lexicographical_permutation(n, s): Return the lexicographically largest permutation of the binary string s. :param n: int - length of the binary string :param s: str - a binary string of length n :return: str - lexicographically largest permutation of s # Count the number of \'0\'s and \'1\'s in the string count_0 = s.count(\'0\') count_1 = s.count(\'1\') # The largest lexicographically permutation will have all \'1\'s followed by all \'0\'s largest_permutation = \'1\' * count_1 + \'0\' * count_0 return largest_permutation"},{"question":"You have been given a string consisting of lowercase alphabets. Your task is to perform the following operations optimally: - Reverse a substring of the string exactly once. You can choose any substring of the input string. - After reversing the substring, check if the resulting string can be rearranged to form a palindrome. Recall that a string is a palindrome if it reads the same backward as forward. For example, \\"abccba\\" and \\"aabb\\" are palindromes, but \\"abc\\" and \\"abcd\\" are not. Input The first line contains a non-empty string s consisting of lowercase alphabets (\'a\'-\'z\'). The length of the string doesn\'t exceed 5 * 104. Output Print \\"YES\\" if you can rearrange the string to form a palindrome after reversing exactly one substring. Otherwise, print \\"NO\\". Examples Input aabb Output YES Input abcde Output NO","solution":"def can_form_palindrome_after_reversing_substring(s): Returns \'YES\' if the string can be rearranged to form a palindrome after reversing exactly one substring, otherwise returns \'NO\'. from collections import Counter # Function to check if we can rearrange the characters to form a palindrome def can_form_palindrome(char_count): odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 # Count the frequency of each character char_count = Counter(s) if can_form_palindrome(char_count): return \\"YES\\" return \\"NO\\""},{"question":"You are given a string containing only lowercase English letters. You need to check if it is possible to make all characters in the string distinct by rearranging them. In other words, you need to determine if it is possible to rearrange the string in such a way that no two adjacent characters are the same. Input The input consists of a single string s with length between 1 and 1000, inclusive. The string s is guaranteed to consist of lowercase English letters only. Output Output \\"Yes\\" (without quotes) if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, output \\"No\\". Examples Input aabb Output Yes Input aaab Output No Input abc Output Yes Note In the first sample, one possible rearrangement is \\"abab\\", where no two adjacent characters are the same. In the second sample, it is not possible to rearrange the characters to avoid having two adjacent \'a\' characters. In the third sample, the string is already arranged such that no two adjacent characters are the same.","solution":"from collections import Counter def can_rearrange_distinct_adjacent(s): Given a string s, check if it is possible to rearrange the string such that no two adjacent characters are the same. count = Counter(s) max_count = max(count.values()) return max_count <= (len(s) + 1) // 2 # To verify the output # print(can_rearrange_distinct_adjacent(\\"aabb\\")) # Yes # print(can_rearrange_distinct_adjacent(\\"aaab\\")) # No # print(can_rearrange_distinct_adjacent(\\"abc\\")) # Yes"},{"question":"You are given a 2D grid representing a city with m rows and n columns where some cells contain a building (\'B\'), and some are empty (\'.\'). Each building needs to be guarded by placing watchmen in strategic positions such that each building is visible by at least one watchman. A watchman can see all buildings in the same row and column. Your task is to calculate the minimum number of watchmen needed to watch all the buildings in the city. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Next m lines contain n characters each, representing the grid with \'B\' and \'.\'. Output Output a single integer — the minimum number of watchmen required. Example Input 3 4 ..B. B... ..B. Output 2 Input 4 4 B... .... ...B B.B. Output 3 Note In the first example, placing one watchman at cell (1,3) will cover both building cells at (1,3) and (3,3). Placing another watchman at cell (2,1) will cover the remaining building at (2,1). In the second example, placing watchmen at cells (1,1), (3,4), and (4,2) will cover all buildings.","solution":"def min_watchmen(m, n, grid): Determines the minimum number of watchmen needed to monitor all buildings (\'B\') in the grid. Args: - m (int): number of rows in the grid. - n (int): number of columns in the grid. - grid (list of strings): the grid representation with \'B\' for buildings and \'.\' for empty spaces. Returns: - int: the minimum number of watchmen needed. rows_with_buildings = [any(cell == \'B\' for cell in row) for row in grid] cols_with_buildings = [any(grid[i][j] == \'B\' for i in range(m)) for j in range(n)] row_watchmen = sum(rows_with_buildings) col_watchmen = sum(cols_with_buildings) return min(row_watchmen, col_watchmen)"},{"question":"Amrita loves collecting rare stamps from various countries. She wants to arrange her stamp collection in such a way that each row contains stamps from a single country only. However, there\'s a twist - she wants each row to have precisely the same number of stamps. Given an array representing the number of stamps from various countries, help Amrita determine if she can arrange her stamp collection in the desired manner, where each row contains stamps from only one country and all rows have the same length. Input - The first line contains an integer N - the number of countries. - The second line contains N integers, where the i-th integer represents the number of stamps from the i-th country. Output - Print \\"YES\\" if it is possible to arrange the stamps according to the given conditions or \\"NO\\" otherwise (quotes only for clarity). Constraints - 1 ≤ N ≤ 100 - 1 ≤ Number of stamps from each country ≤ 1,000,000,000 SAMPLE INPUT 3 6 9 15 SAMPLE OUTPUT YES Explanation: Amrita can arrange 5 rows with 3 stamps each: - Row 1: 3 stamps from Country 1 - Row 2: 3 stamps from Country 1 - Row 3: 3 stamps from Country 2 - Row 4: 3 stamps from Country 2 - Row 5: 3 stamps from Country 3 - Row 6: 3 stamps from Country 3","solution":"import math from functools import reduce from math import gcd def can_arrange_stamps(n, stamps): Determines if stamps can be arranged such that each row contains stamps from only one country and all rows have the same number of stamps. Args: n (int): number of countries stamps (list of int): list representing the number of stamps from each country Returns: str: \\"YES\\" if arrangement is possible, otherwise \\"NO\\" def gcd_multiple(numbers): return reduce(gcd, numbers) gcd_of_stamps = gcd_multiple(stamps) return \\"YES\\" if gcd_of_stamps > 1 else \\"NO\\""},{"question":"In a server farm, you have a set of `n` servers denoted by `S_1, S_2, ..., S_n`. Each server `S_i` has a maximum processing capacity of `C_i` units (1 ≤ C_i ≤ 10^5). There is a queue of `m` tasks, and each task `T_j` (1 ≤ T_j ≤ 10^5) requires a certain amount of processing power to complete. You want to distribute the tasks such that the total load on each server does not exceed its capacity, and ultimately all tasks are processed. You need to determine whether it is possible to distribute the tasks among the servers without exceeding any server\'s capacity. If it is possible, provide a valid distribution. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of servers and the number of tasks respectively. The second line contains `n` integers, where the `i-th` integer `C_i` denotes the capacity of the i-th server. The third line contains `m` integers, where the `j-th` integer `T_j` denotes the processing power required for the j-th task. Output If it is not possible to distribute the tasks without exceeding server capacities, print a single line with \\"NO\\". Otherwise, print \\"YES\\" followed by `m` integers, where the `j-th` integer `k` (1 ≤ k ≤ n) is the index of the server to which the j-th task should be assigned. Note: If there are multiple valid distributions, any one of them will be accepted. Example Input 3 5 10 20 15 12 5 7 8 5 Output YES 2 1 3 2 3 Input 2 4 8 10 9 5 4 6 Output NO","solution":"def distribute_tasks(n, m, capacities, tasks): Determines if it\'s possible to distribute tasks among the servers without exceeding their capacities and provides one such distribution if possible. Args: n (int): Number of servers. m (int): Number of tasks. capacities (list of int): List of capacities of servers. tasks (list of int): List of tasks requirements. Returns: tuple: - str: \\"YES\\" if the distribution is possible, otherwise \\"NO\\". - list of int: List of server indices for each task if distribution is possible, otherwise empty list. from heapq import heappush, heappop heap = [] for i, capacity in enumerate(capacities): heappush(heap, (capacity, i + 1)) task_assignment = [-1] * m for j, task in enumerate(tasks): temp_heap = [] assigned = False while heap: capacity, idx = heappop(heap) if capacity >= task: task_assignment[j] = idx heappush(heap, (capacity - task, idx)) assigned = True break else: temp_heap.append((capacity, idx)) # push back remaining items to heap while temp_heap: heappush(heap, temp_heap.pop()) if not assigned: return \\"NO\\", [] return \\"YES\\", task_assignment"},{"question":"Points on straight lines are represented by their x-coordinates in an array `x`, and their y-coordinates in another array `y`. A straight line passing through two points `(x_1, y_1)` and `(x_2, y_2)` can be uniquely identified by the slope `(y_2 - y_1) / (x_2 - x_1)` and the y-intercept. A set of points is considered collinear if they all lie on the same straight line. Your task is to check if all given points are collinear. Write a function `are_collinear(x, y)` that returns `Yes` if all the points are collinear, otherwise returns `No`. Constraints: * The lengths of `x` and `y` are equal and between 2 and 100 inclusive. * Each value in `x` and `y` is an integer between -1000 and 1000 inclusive. * There are no duplicate points in the input. Input * Two lines of input: 1. The first line contains the array `x` of the x-coordinates. 2. The second line contains the array `y` of the y-coordinates. Output * Output a single line containing `Yes` if all points are collinear, otherwise `No`. Examples Input 1 2 3 2 4 6 Output Yes Input 1 2 3 4 1 2 3 5 Output No Input -1 0 1 2 2 2 Output Yes Input 1 4 5 1 3 7 Output No","solution":"def are_collinear(x, y): Determines if all points represented by arrays of x and y coordinates are collinear. Args: x (list of int): x-coordinates of points. y (list of int): y-coordinates of points. Returns: str: \'Yes\' if all points are collinear, otherwise \'No\'. n = len(x) if n <= 2: return \'Yes\' for i in range(2, n): # Calculate the area of the triangle formed by (x[0], y[0]), (x[1], y[1]), and (x[i], y[i]). # If the area is zero, then the points are collinear. if (y[1] - y[0]) * (x[i] - x[0]) != (y[i] - y[0]) * (x[1] - x[0]): return \'No\' return \'Yes\'"},{"question":"In a distant land called Arithmeticia, a tournament is held every year where contestants solve intricate number sequences. This year, the sequence game involves a special number called the \\"Perfect Number.\\" A Perfect Number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, the number 28 is a perfect number because its divisors are 1, 2, 4, 7, and 14, and 1 + 2 + 4 + 7 + 14 = 28. The objective of the game is to determine whether a given large number is a Perfect Number or not. Input The first line contains an integer T (1 ≤ T ≤ 100), representing the number of test cases. Each of the following T lines contains one integer N (1 ≤ N ≤ 10^18), representing the number to be checked. Output For each test case, print \\"YES\\" if the given number is a Perfect Number, otherwise print \\"NO\\". Example Input 3 28 6 12 Output YES YES NO","solution":"def is_perfect_number(n): Returns True if n is a perfect number, else False. A perfect number is equal to the sum of its proper divisors excluding itself. if n <= 1: return False sum_divisors = 1 # Start with 1 because 1 is a proper divisor of any number # Iterate over possible divisors up to the square root of n divisor = 2 while divisor * divisor <= n: if n % divisor == 0: sum_divisors += divisor if divisor != n // divisor: sum_divisors += n // divisor divisor += 1 return sum_divisors == n def perfect_number_tournament(T, numbers): Determines if each number in the list is a perfect number. :param T: The number of test cases (integer). :param numbers: A list of integers of length T. :return: A list of strings \\"YES\\" or \\"NO\\" for each number. results = [] for number in numbers: results.append(\\"YES\\" if is_perfect_number(number) else \\"NO\\") return results"},{"question":"Clara loves exploring different arrangements of words. She is particularly interested in finding all permutations of a given word, but with a twist – the permutations must be unique and sorted in lexicographical order. She knows the word might contain repeated characters, and she wants to ensure no permutation is repeated in her results. Given a word, generate all unique permutations in lexicographical order and display them. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a word. Output For each word, output all unique permutations in lexicographical order on separate lines. Leave a blank line between outputs of different test cases. Constraints 1 ≤ T ≤ 10 1 ≤ |word| ≤ 8 (|word| denotes the length of the word.) All words consist of lowercase English letters only. Example Input: 2 aab abc Output: aab aba baa abc acb bac bca cab cba","solution":"from itertools import permutations def generate_permutations(word): Generate all unique permutations of the given word in lexicographical order. unique_permutations = sorted(set(\'\'.join(p) for p in permutations(word))) return unique_permutations def main(T, words): Handle multiple test cases and generate permutations for each word. results = [] for word in words: results.append(generate_permutations(word)) return results"},{"question":"You are given an array of integers where each number occurs an even number of times except for one integer that occurs an odd number of times. Your task is to find the integer that occurs an odd number of times. Write a function to identify the odd occurring integer. Function Signature: `def find_odd_occurrence(arr: List[int]) -> int:` Input: - arr: List[int] - A list of integers (1 ≤ len(arr) ≤ 10^6, -10^9 ≤ arr[i] ≤ 10^9) Output: - int - The integer that occurs an odd number of times. Examples: Input: [1, 2, 3, 2, 3, 1, 3] Output: 3 Input: [4, 4, 4, 5, 5] Output: 4 Input: [10] Output: 10 Note: - The function should have an optimal time complexity to handle large input sizes. - Multiple test cases may be provided where each test consists of a single list of integers.","solution":"from typing import List def find_odd_occurrence(arr: List[int]) -> int: Returns the integer that occurs an odd number of times in the given array. result = 0 for number in arr: result ^= number return result"},{"question":"You are given two strings A = {a_0, a_1, ..., a_{n-1}} and B = {b_0, b_1, ..., b_{m-1}} consisting of lowercase alphabets. Your task is to find the common characters between these two strings. Constraints * 1 leq n, m leq 200,000 Input The input is given in the following format: A B The strings A and B can have duplicate characters. Output Print the common characters in alphabetical order, each on a new line. If there are no common characters, print \\"No common characters\\". Example Input bananas cabana Output a b n","solution":"from collections import Counter def common_characters(A, B): This function receives two strings A and B, and returns a list of common characters in alphabetical order, each on a new line. If there are no common characters, it returns a list with \\"No common characters\\". count_A = Counter(A) count_B = Counter(B) common_set = set(A) & set(B) common_list = sorted(common_set) if not common_list: return [\\"No common characters\\"] return common_list # To print the result def print_common_characters(A, B): result = common_characters(A, B) for char in result: print(char) # Example input A = \\"bananas\\" B = \\"cabana\\" # To run the function print_common_characters(A, B)"},{"question":"You are given an integer array `arr` of size `n`. You need to define a new array `result` where each `result[i]` is equal to the product of all the elements of `arr` except `arr[i]`. Your task is to find the array `result`. Note: Solve this problem without using division and in O(n) time complexity. Input The first line contains an integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. Each test case consists of two lines. The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the size of the array. The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (|arr_i| ≤ 10^4) — the elements of the array. Output For each test case, print the array `result` of size `n`. Example Input 2 4 1 2 3 4 3 3 2 1 Output 24 12 8 6 2 3 6 Explanation In the first sample, the array `result` is computed as follows: - result[0] = 2 * 3 * 4 = 24 - result[1] = 1 * 3 * 4 = 12 - result[2] = 1 * 2 * 4 = 8 - result[3] = 1 * 2 * 3 = 6 In the second sample, the array `result` is computed as follows: - result[0] = 2 * 1 = 2 - result[1] = 3 * 1 = 3 - result[2] = 3 * 2 = 6","solution":"def product_except_self(arr): Given an array arr, return an array result where result[i] is equal to the product of all the elements of arr except arr[i]. The solution should be in O(n) time complexity and not use division. n = len(arr) if n == 0: return [] result = [1] * n # Calculate products of elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] # Calculate products of elements to the right of each element right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= arr[i] return result def solve(test_cases): results = [] for arr in test_cases: results.append(product_except_self(arr)) return results"},{"question":"A company is organizing an online event where participants compete in various challenges, and each participant\'s performance is graded. The organizers want to determine the top k participants based on their grades. However, if two participants have the same grade, they want to rank participants with the same grade based on their order of appearance in the input list. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the total number of participants and the number of top participants to list. The next n lines contain two space-separated values for each participant: a string representing the participant\'s name (which consists of lowercase and uppercase English letters, and its length does not exceed 50 characters) and an integer representing the participant\'s grade (0 ≤ grade ≤ 100). Output Print k lines. Each line should contain the name of the participant and their grade, sorted first by grade in descending order, and then by their order of appearance in the input in case of ties. If there are fewer than k participants, print all of them. Examples Input 5 3 Alice 90 Bob 85 Charlie 90 David 85 Eve 95 Output Eve 95 Alice 90 Charlie 90 Input 4 2 Sam 80 Tom 70 Jerry 85 Molly 80 Output Jerry 85 Sam 80 Note In the first sample, the top 3 participants are Eve with grade 95, Alice with grade 90, and Charlie with grade 90. Although Bob and David also have grades that might rank them high, only the top 3 are needed, so they are not listed. In the second sample, the top 2 participants are Jerry with grade 85 and Sam with grade 80. Although Molly also has grade 80, Sam appears earlier in the input, so Sam is ranked higher.","solution":"def top_k_participants(n, k, participants): # Sort participants first by grade in descending order, then by their order of appearance sorted_participants = sorted(participants, key=lambda x: (-x[1], participants.index(x))) # Extract the top k participants top_k = sorted_participants[:k] return top_k"},{"question":"You are tasked with creating a word prediction model based on historical text data. This predictive model should suggest the most probable next word given a sequence of words. To facilitate this, you are provided with a training dataset of sentences. Each sentence contains a sequence of words, and sentences are separated by newlines. Your goal is to write a program that, given an initial sequence of words, predicts the next word using the training dataset. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of sentences in the training dataset. - The following n lines each contain a sentence, with words separated by spaces. - The next line contains an integer m (1 ≤ m ≤ 100) — number of test cases. - The following m lines each contain a sequence of words for which the next word is to be predicted. Output: For each test case, output the most probable next word. If there are multiple words with the same highest probability, output the lexicographically smallest one. If there is no sufficient data to predict the next word, output \\"unknown\\". Example: Input: 4 the quick brown fox the quick brown lazy dog sleeps quick brown dog 3 the quick brown dog lazy Output: brown dog unknown","solution":"from collections import defaultdict, Counter class WordPredictor: def __init__(self): self.ngrams = defaultdict(Counter) def train(self, sentences): for sentence in sentences: words = sentence.split() for i in range(len(words) - 1): self.ngrams[tuple(words[:i+1])][words[i+1]] += 1 def predict(self, sequence): words = sequence.split() key = tuple(words) if key not in self.ngrams: return \\"unknown\\" possible_next_words = self.ngrams[key] if not possible_next_words: return \\"unknown\\" max_count = max(possible_next_words.values()) candidates = [word for word, count in possible_next_words.items() if count == max_count] return min(candidates) def main(): import sys input = sys.stdin.read data = input().split(\\"n\\") n = int(data[0]) sentences = data[1:n+1] m = int(data[n+1]) test_cases = data[n+2:n+2+m] predictor = WordPredictor() predictor.train(sentences) results = [] for test in test_cases: results.append(predictor.predict(test)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"While traversing a dense forest, you come across an ancient temple with a large stone door. The door has a peculiar lock mechanism consisting of rows of numeral tiles. Each row is an arithmetic progression (AP) with both positive and negative integers. The lock opens only if each tile in every row forms a valid AP sequence. However, some tiles are damaged, and you need to identify these rows to be fixed. **Task**: Write a function `find_invalid_AP_rows` that identifies rows that do not form valid arithmetic progressions. **Input**: - The first line contains an integer `m` (1 ≤ m ≤ 500), the number of rows. - Each of the next `m` lines contains a list of integers separated by spaces, representing the tiles in each row. The length of each row is between 1 and 100. **Output**: Print the indices (0-based) of the rows that do not form a valid AP sequence, each on a new line in ascending order. If all rows are valid, print `ALL VALID`. **Examples**: **Input**: ``` 5 2 4 6 8 10 -3 -1 1 3 5 1 3 5 9 -1 0 1 2 3 10 7 4 1 -2 ``` **Output**: ``` 2 4 ``` **Input**: ``` 3 5 10 15 20 25 -6 -3 0 3 6 100 95 90 85 80 ``` **Output**: ``` ALL VALID ``` **Explanation**: - The first example has five rows. Row 2 and row 4 do not form AP sequences due to the missing uniform difference. - In the second example, all rows are valid AP sequences.","solution":"def find_invalid_AP_rows(m, rows): def is_arithmetic_progression(row): if len(row) < 2: return True diff = row[1] - row[0] for i in range(2, len(row)): if row[i] - row[i - 1] != diff: return False return True invalid_rows = [] for i in range(m): if not is_arithmetic_progression(rows[i]): invalid_rows.append(i) if not invalid_rows: return \'ALL VALID\' else: return \\"n\\".join(map(str, invalid_rows))"},{"question":"A company has a network of n offices, connected by bidirectional roads of varying lengths. The CEO wants to implement a new communication system that connects every office directly or indirectly. The system should be installed in such a way that the total length of roads used is minimized. You need to design a program that finds the minimum total length of roads required to connect all the offices. Each road has a unique length. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, n-1 ≤ m ≤ min(2*10^5, n(n-1)/2)) — the number of offices and the number of roads respectively. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6, u ≠ v) indicating there is a road with length w connecting office u and office v. Output Print the minimum total length of roads required to connect all offices. If it is impossible to connect all offices, print -1. Examples Input 4 5 1 2 3 1 3 1 2 3 2 2 4 4 3 4 5 Output 7 Input 5 3 1 2 1 2 3 2 4 5 3 Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_total_length(n, m, roads): if n == 1: return 0 # Sort roads based on weight roads.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) mst_edges = 0 mst_weight = 0 for u, v, w in roads: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_edges += 1 mst_weight += w if mst_edges == n - 1: return mst_weight return -1 def solve(input_data): input_lines = input_data.strip().split(\\"n\\") n, m = map(int, input_lines[0].split()) roads = [tuple(map(int, line.split())) for line in input_lines[1:]] return minimum_total_length(n, m, roads) # Example usage: # input_data = \\"4 5n1 2 3n1 3 1n2 3 2n2 4 4n3 4 5\\" # print(solve(input_data))"},{"question":"Lara has recently come across a new puzzle game that she enjoys playing. The game consists of a grid with numbers, and the objective is to find the largest sum possible by only moving from the top-left to the bottom-right corner of the grid. You can only move either right or down at any point in time. Given a grid `G` with `n` rows and `m` columns filled with non-negative integers, help Lara find the largest sum she can achieve by following the rules of the game. INPUT The first line contains two integers `n` and `m` indicating the number of rows and columns in the grid respectively. The next `n` lines contain `m` space-separated integers each, representing the grid `G`. OUTPUT Print the maximum sum that can be obtained by traversing from the top-left to the bottom-right corner of the grid. Constraints 1 ≤ n, m ≤ 1000 0 ≤ G[i][j] ≤ 1000 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation Starting from the top-left corner, one of the paths which provide the maximum sum is: 1 → 3 → 5 → 2 → 1. The total sum is 12, which is the maximum possible sum in this grid configuration.","solution":"def max_path_sum(grid): Finds the maximum path sum from top-left to bottom-right of the grid by moving only right or down. n = len(grid) m = len(grid[0]) # Create dp table to store the maximum path sum up to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Design an algorithm to help a statistician analyze survey responses. The statistician has a set of survey responses where each response contains multiple words. The words in each survey response are separated by spaces and are case-insensitive (e.g., \\"Hello\\" and \\"hello\\" are considered the same word). The statistician\'s task is to find the number of unique words across all the survey responses, transform each word to lowercase, and output the count. Write a function to perform this task. Input The input consists of the following: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of survey responses. - The next n lines each contain a survey response. Each response is a string of length not exceeding 1000 characters, consisting of uppercase and lowercase letters and spaces. Output Output a single integer — the number of unique words across all survey responses after converting all words to lowercase. Examples Input 3 Hello World HELLO there World of HELLO Output 4 Explanation In the given example, the unique words after converting to lowercase are: \\"hello\\", \\"world\\", \\"there\\", and \\"of\\". The count of unique words is 4.","solution":"def count_unique_words(n, responses): Counts the number of unique words across all survey responses after converting all words to lowercase. Args: n (int): The number of survey responses. responses (list of str): List of survey responses. Returns: int: The number of unique words. unique_words = set() for response in responses: words = response.lower().split() unique_words.update(words) return len(unique_words) # Example usage: # n = 3 # responses = [\\"Hello World\\", \\"HELLO there\\", \\"World of HELLO\\"] # print(count_unique_words(n, responses)) # Output: 4"},{"question":"You are given an array of n integers. You need to group the numbers into pairs such that each number in the array is used exactly once in one of the pairs. However, if there are an odd number of elements, the last one should not be paired. After grouping, you aim to minimize the highest possible pair sum. For example, given the array [1, 2, 3, 4], possible pairs are (1, 4) and (2, 3) with sums 5 and 5 respectively, where the highest pair sum is minimized to 5. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer — the minimized highest possible pair sum. Examples Input 4 1 2 3 4 Output 5 Input 5 7 3 5 1 9 Output 10 Input 6 1 6 6 5 3 4 Output 9 Note In the first example, the optimal grouping is (1, 4) and (2, 3), resulting in pair sums of 5 and 5. In the second example, the optimal grouping is (1, 9), (3, 7), and (5), resulting in pair sums of 10, 10, and 5. In the third example, the optimal grouping is (1, 6), (3, 5), and (4, 6), resulting in pair sums of 7, 8, and 10.","solution":"def minimize_highest_pair_sum(arr): Returns the minimal possible highest pair sum given an array of integers. If there are an odd number of elements, the last one is not paired. arr.sort() max_pair_sum = 0 n = len(arr) for i in range(n // 2): pair_sum = arr[i] + arr[n - 1 - i] max_pair_sum = max(max_pair_sum, pair_sum) return max_pair_sum"},{"question":"You are a member of a team responsible for the surveillance of a high-security facility. The facility is represented as a 2D plane, and its perimeter is defined by a convex polygon with n vertices. Your task is to place security cameras on some vertices of the polygon such that each side of the polygon is monitored by at least one camera. A camera placed on a vertex can monitor its adjacent edges. Each camera has a unique id from 1 to n. You need to output all sets of vertices where cameras should be placed so that every side of the polygon is monitored. Input The first line of the input contains a single integer n (3 ≤ n ≤ 100), the number of vertices in the polygon. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 1000), the coordinates of the i-th vertex. Output Output all sets of cameras placements (vertices) sorted in lexicographical order. Each placement should be a distinct combination. If there are multiple distinct sets, each set should be printed on a new line, with the vertex indices sorted in ascending order within each set. Example Input 4 0 0 0 1 1 1 1 0 Output 1 2 3 1 2 4 1 3 4 2 3 4 Input 5 0 0 0 1 1 2 2 1 1 0 Output 1 2 3 4 1 2 3 5 1 2 4 5 1 3 4 5 2 3 4 5 Note In the first example, the polygon is a square. Placing cameras on any three corners will always cover all four sides, leading to four possible combinations: {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}. In the second example, the polygon is a pentagon, and placing cameras on any four corners will cover all five sides, leading to five possible combinations.","solution":"from itertools import combinations def find_camera_placements(n, vertices): Find all sets of camera placements where each side of the polygon is monitored. Args: n : int : the number of vertices vertices : list of tuple : each tuple represents the (x, y) coordinates of a vertex Returns: list of list of int : each sublist is a set of vertices indices where cameras should be placed placements = [] # Get all combinations of n-1 vertices for combination in combinations(range(1, n+1), n-1): placements.append(combination) # Sort placements lexicographically placements.sort() return placements"},{"question":"Tom and Jerry are playing a game with an array of numbers. They take turns removing elements from the array, where a turn consists of removing one element and splitting it into two new elements such that their sum equals the value of the removed element and their product is maximized. These new elements are then reinserted into the array. The game starts with Tom taking the first move. A player loses if they are unable to make a move on their turn (i.e., all elements in the array are prime numbers and cannot be split further). Your task is to determine the winner, assuming both players play optimally. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of integers in the array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array. Output: For each test case, output a single line containing either “Tom” or “Jerry” (without quotes), denoting the winner of the game. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ Ai ≤ 10^6 Example: Input: 2 2 6 10 3 7 8 9 Output: Tom Jerry Explanation: Example case 1. The numbers on the board are [6,10]. Tom can start by removing 10, which can be split into [5, 5] (as 5*5=25 is the maximum product). The array becomes [6,5,5]. Jerry then has to move. He could take 6 and split it into [3,3] making the array [3,3,5,5]. Tom now starts his turn and he can split either of the 5s, but since they maximize the product, he continues until Jerry is left in a position where he cannot move, causing Tom to win. Example case 2. The array consists of [7,8,9]. Tom could start by splitting 8 into [4,4], making the array [7,4,4,9]. Jerry now can take 9 and split it into [3,3,3], making the array [7,4,4,3,3,3]. Tom now has to take one of the larger ones and split it, reducing the choices until Jerry finally is in a position where he cannot move, rendering Tom the winner.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_split(n): Function to check if a number can be split into two parts such that both parts are integers. if n <= 3: return False if is_prime(n): return False return True def game_winner(num_cases, cases): results = [] for i in range(num_cases): N = cases[i][0] A = cases[i][1] split_possible = any(can_split(a) for a in A) if split_possible: results.append(\\"Tom\\") else: results.append(\\"Jerry\\") return results"},{"question":"A binary search tree (BST) is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node\'s left subtree and less than those in its right subtree. Given a sequence of n keys, we can construct a BST by inserting the keys one at a time in the given order. Write a program that reads a sequence of n distinct integer keys, constructs a BST by inserting the keys in the given order, and then prints the preorder traversal of the BST. Preorder traversal of a tree is defined as follows: 1. Visit the root. 2. Traverse the left subtree in preorder. 3. Traverse the right subtree in preorder. Constraints * 1 leq n leq 100 * Each key is a distinct integer and within the range [-10^3, 10^3]. Input The first line contains an integer n, representing the number of keys in the sequence. The second line contains n distinct integers, representing the keys. Output Print the preorder traversal of the constructed BST. Each key in the traversal should be separated by a single space. Example Input 7 50 30 70 20 40 60 80 Output 50 30 20 40 70 60 80","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def preorder_traversal(self): result = [] self._preorder(self.root, result) return result def _preorder(self, node, result): if node is not None: result.append(node.val) self._preorder(node.left, result) self._preorder(node.right, result) def build_bst_and_preorder_traversal(keys): bst = BST() for key in keys: bst.insert(key) return bst.preorder_traversal() # Reading input and printing output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) keys = list(map(int, data[1:])) result = build_bst_and_preorder_traversal(keys) print(\\" \\".join(map(str, result)))"},{"question":"John loves solving puzzles, and his latest challenge involves finding the most common prefix among a list of words. A prefix of a string is defined as a substring that appears at the beginning of the string. For example, the prefixes of the string \\"apple\\" are \\"\\", \\"a\\", \\"ap\\", \\"app\\", \\"appl\\", and \\"apple\\". John has received a list of words and wants to find the longest prefix that appears in at least half of the given words. If there is more than one such prefix, John wants the lexicographically smallest one. Your task is to help John with this problem. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of words in the list. The next n lines contain n words, one per line. Each word consists of uppercase and lowercase Latin letters and has a length between 1 and 100, inclusive. Output Print the longest prefix that appears in at least half of the given words. If there are multiple results, print the lexicographically smallest one. Examples Input 5 flower flow flight flock flood Output fl Input 6 dog doll dolphin dome door dove Output do Input 4 cat cap car can Output ca Input 3 apple apply application Output appl Note In the first example, the prefix \\"fl\\" is the longest common prefix that appears in at least half of the words in the list. In the second example, \\"do\\" is the longest common prefix appearing in at least half of the words. In the third example, \\"ca\\" appears in all four words. In the fourth example, \\"appl\\" appears in at least two out of three words, making it the longest common prefix.","solution":"def longest_common_prefix(words): def is_common_prefix(prefix, words, threshold): count = sum(word.startswith(prefix) for word in words) return count >= threshold n = len(words) threshold = (n + 1) // 2 # At least half of the words # Start with the shortest word as prefix candidate base words.sort() shortest_word = words[0] end = len(shortest_word) low, high = 0, end + 1 longest_prefix = \\"\\" while low < high: mid = (low + high) // 2 prefix = shortest_word[:mid] if is_common_prefix(prefix, words, threshold): longest_prefix = prefix low = mid + 1 else: high = mid return longest_prefix"},{"question":"Ram is learning about different data structures and their operations. As a part of his learning, he is interested in implementing a priority queue where elements are inserted based on their priorities, and the element with the highest priority is removed first. The priority queue also allows changing the priority of an element. Your task is to help Ram by creating a program that simulates the priority queue operations. The operations include insertion, deletion, and changing priority. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of operations. N lines follow, each specifying an operation, which can be: 1. \\"INSERT x p\\" - Insert an element \\"x\\" with priority \\"p\\" into the queue. 2. \\"REMOVE\\" - Remove the element with the highest priority. If there are multiple elements with the same priority, remove any of them. 3. \\"CHANGE x p\\" - Change the priority of element \\"x\\" to \\"p\\". Output: For each test case, output each removal operation on a new line. If the queue is empty and a \\"REMOVE\\" operation is encountered, output \\"EMPTY\\" on that line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ p ≤ 1000 The elements \\"x\\" are strings consisting of lowercase Latin characters, with a maximum length of 50. Example: Input: 2 5 INSERT apple 5 INSERT banana 10 REMOVE INSERT cherry 7 REMOVE 4 INSERT apple 5 REMOVE REMOVE REMOVE Output: banana cherry apple EMPTY EMPTY","solution":"import heapq class PriorityQueue: def __init__(self): self.pq = [] # list of entries arranged in a heap self.entry_finder = {} # mapping of elements to entries self.REMOVED = \'<removed-element>\' # placeholder for a removed item self.counter = 0 def insert(self, element, priority): Add a new task or update the priority of an existing task. if element in self.entry_finder: self.remove_element(element) count = self.counter entry = [-priority, count, element] self.entry_finder[element] = entry heapq.heappush(self.pq, entry) self.counter += 1 def remove_element(self, element): Mark an existing task as REMOVED. Raise KeyError if not found. entry = self.entry_finder.pop(element) entry[-1] = self.REMOVED def remove(self): Remove and return the highest priority task. Raise KeyError if empty. while self.pq: priority, count, element = heapq.heappop(self.pq) if element is not self.REMOVED: del self.entry_finder[element] return element return \\"EMPTY\\" def change_priority(self, element, priority): Change the priority of an existing task. self.insert(element, priority) def process_operations(operations): pq = PriorityQueue() result = [] for operation in operations: if operation.startswith(\\"INSERT\\"): _, element, priority = operation.split() pq.insert(element, int(priority)) elif operation.startswith(\\"REMOVE\\"): result.append(pq.remove()) elif operation.startswith(\\"CHANGE\\"): _, element, priority = operation.split() pq.change_priority(element, int(priority)) return result def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] operations = test_cases[i][1] results.append(process_operations(operations)) return results"},{"question":"Daisy has a library of books that she likes to organize based on different criteria. Her library has grown large, and now she wants to find an efficient way to group books based on their genres while also keeping track of the number of books in each genre. She would like you to write a program that can take a list of books with their genres and return the number of books in each genre in alphabetical order of genres. Input The first line contains T, the number of test cases. For each test case, the first line contains an integer N, the number of books in the library. Each of the next N lines contains a book title (a string with spaces) and its genre (a single word) separated by a comma. Output For each test case, output the genres in alphabetical order, each followed by a colon and the number of books in that genre. Each genre should be output on a new line. Note: Titles might have spaces, but genres will always be a single word without spaces. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ length of book title ≤ 100 1 ≤ length of genre ≤ 20 Example Input: 2 5 Harry Potter and the Sorcerer\'s Stone,Fantasy The Great Gatsby,Fiction To Kill a Mockingbird,Fiction 1984,Science-Fiction Pride and Prejudice,Romance 3 The Hobbit,Fantasy A Brief History of Time,Science The Da Vinci Code,Thriller Output: Fantasy: 1 Fiction: 2 Romance: 1 Science-Fiction: 1 Fantasy: 1 Science: 1 Thriller: 1 Explanation Test Case 1: The first test case contains 5 books with their genres. The output lists genres alphabetically and the count of books in each genre. Test Case 2: The second test case contains 3 books. Again, the genres are listed alphabetically with the corresponding number of books in those genres.","solution":"def count_books_by_genre(test_cases): results = [] for books in test_cases: genre_count = {} for title, genre in books: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 sorted_genres = sorted(genre_count.items()) results.append(\\"n\\".join(f\\"{genre}: {count}\\" for genre, count in sorted_genres)) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) books = [] for i in range(index + 1, index + 1 + N): title_genre = lines[i].rsplit(\',\', 1) title = title_genre[0] genre = title_genre[1] books.append((title, genre)) test_cases.append(books) index += 1 + N return test_cases"},{"question":"You are given an array of integers representing the scores of participants in a competition. The task is to determine the k-th highest score in the list. If there are fewer than k distinct scores, return \\"Not enough participants\\". Input First line contains an integer n, the number of scores and second line contains the array of scores. Third line contains the integer k. Output Print the k-th highest score if k distinct scores are present, else print \\"Not enough participants\\". Constraints 1 <= n <= 100 1 <= scores[i] <= 100 1 <= k <= n SAMPLE INPUT 8 45 67 89 23 67 89 23 45 3 SAMPLE OUTPUT 45 Explanation The distinct scores in descending order are [89, 67, 45, 23]. The 3rd highest score is 45.","solution":"def kth_highest_score(n, scores, k): Returns the k-th highest distinct score from the given scores. If there are fewer than k distinct scores, returns \\"Not enough participants\\". distinct_scores = list(set(scores)) # Remove duplicates distinct_scores.sort(reverse=True) # Sort in descending order if len(distinct_scores) < k: return \\"Not enough participants\\" else: return distinct_scores[k-1]"},{"question":"Fedor has been enjoying a new game where you navigate through a grid while collecting tokens. The grid is represented as a 2D array of characters where \'E\' marks empty cells and \'T\' marks cells containing tokens. Starting from the top-left corner, Fedor can move right or down through empty cells to reach the bottom-right corner. To make things more challenging, Fedor wants to collect as many tokens as he can on his way to the destination. Task: Write a program to determine the maximum number of tokens Fedor can collect while moving from the top-left corner to the bottom-right corner of the grid. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the size of the grid (the grid is always square). - Each of the next n lines contains n characters either \'E\' or \'T\' representing the grid. Output - Print a single integer — the maximum number of tokens Fedor can collect on a valid path from the top-left corner to the bottom-right corner. Constraints - Fedor can only move right or down. - The top-left and bottom-right corners are guaranteed to be empty (\'E\'). Examples Input 3 ETE ETE EEE Output 2 Explanation Fedor moves right, collects 1 token, moves down twice, and collects 1 more token, making the total 2 tokens. Input 4 ETEE TETE EEEE TETE Output 3 Explanation Fedor collects 1 token as he moves right, 1 token as he moves down, and 1 more token as he moves right again, making the total 3 tokens.","solution":"def max_tokens(grid): n = len(grid) dp = [[0]*n for _ in range(n)] # Initialize dp table if grid[0][0] == \'E\': dp[0][0] = 0 else: dp[0][0] = 1 # Fill dp table for the first row for j in range(1, n): if grid[0][j] == \'T\': dp[0][j] = dp[0][j - 1] + 1 else: dp[0][j] = dp[0][j - 1] # Fill dp table for the first column for i in range(1, n): if grid[i][0] == \'T\': dp[i][0] = dp[i - 1][0] + 1 else: dp[i][0] = dp[i - 1][0] # Fill the rest of dp table for i in range(1, n): for j in range(1, n): if grid[i][j] == \'T\': dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n - 1][n - 1]"},{"question":"You are given an array of n integers. Your task is to find the minimum number of elements you need to remove such that the remaining array is strictly increasing and all the remaining elements are distinct. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), the elements of the array. Output Print one integer — the minimum number of elements you need to remove to make the remaining array strictly increasing with distinct elements. Example Input 6 4 3 6 2 1 7 Output 3 Note In the given example, you can remove elements 4, 3, and 2 to form the array [1, 6, 7], which is strictly increasing and contains distinct elements.","solution":"def min_removals_to_strictly_increasing(arr): n = len(arr) # Initialize LIS array lis = [1] * n # Calculate LIS values for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Length of longest increasing subsequence lis_length = max(lis) if n != 0 else 0 # Minimum number of elements to remove return n - lis_length"},{"question":"You are given a string consisting of lowercase letters and an integer k. In one operation, you can choose any character from the string and delete it. The goal is to perform exactly k operations in such a way that the resulting string is lexicographically smallest. For instance, if the string is \\"abca\\" and k = 1, we can get minimal strings such as \\"aba\\", \\"abc\\", \\"aca\\", \\"bca\\". The lexicographically smallest among them is \\"aba\\". If the string is \\"abcd\\" and k = 2, we can delete any two characters. The lexicographically smallest result will be \\"ab\\". Write a function that takes the string and the integer k, and returns the lexicographically smallest string possible after exactly k deletions. Input The input consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 100000) consisting of lowercase letters. The second line contains an integer k (0 ≤ k ≤ |s|), the number of deletions. Output Output one line — the lexicographically smallest string possible after exactly k deletions. Example Input abca 1 Output aba Input abcd 2 Output ab","solution":"def smallest_lexicographical_string(s, k): Function to return the lexicographically smallest string possible after exactly k deletions. stack = [] for i, ch in enumerate(s): # Remove characters from stack if they make the string lexicographically larger and we still have deletions left while k > 0 and stack and stack[-1] > ch: stack.pop() k -= 1 stack.append(ch) # if k is still greater than 0 after the main loop, it means we need to remove remaining elements from the end while k > 0: stack.pop() k -= 1 return \'\'.join(stack)"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence that can be rearranged to form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between any two consecutive terms is the same. Write a program that reads a sequence of integers and prints the length of the longest subsequence that forms an arithmetic progression. Constraints * The length of the sequence is at most 10^5. * Each integer in the sequence is between -10^9 to 10^9. Input The sequence of integers separated by spaces. Output Print the length of the longest subsequence that can be rearranged to form an arithmetic progression. Example Input 3 7 5 2 4 Output 4 Explanation One possible longest subsequence that forms an arithmetic progression is [2, 3, 4, 5].","solution":"def length_of_longest_ap_subsequence(arr): if len(arr) <= 1: return len(arr) arr.sort() n = len(arr) longest = 2 dp = {} for i in range(n): for j in range(i + 1, n): diff = arr[j] - arr[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 longest = max(longest, dp[(j, diff)]) return longest"},{"question":"Steven\'s company hosts an annual team-building event where all employees participate in a relay race. The relay race consists of n legs, and for each leg, there\'s a specific distance that needs to be covered. Each employee has a maximum distance they can cover without getting too tired. Given the distances for each leg and the maximum distance each employee can cover, Steven needs to determine if it is possible to assign employees to each leg of the relay race such that no employee is assigned a leg that exceeds their maximum capacity. Each employee can only be assigned to one leg of the relay race. Input: The first line contains a single integer n (1 ≤ n ≤ 100), which represents the number of legs in the relay race. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 100), where d_i represents the distance for the i-th leg of the race. The third line contains a single integer m (1 ≤ m ≤ 100), which represents the number of employees. The fourth line contains m integers c_1, c_2, ..., c_m (1 ≤ c_i ≤ 100), where c_i represents the maximum distance the i-th employee can cover. Output: Print \\"YES\\" if it is possible to assign the employees to the relay race legs such that each leg is covered by an employee who can handle its distance. Otherwise, print \\"NO\\". Examples: Input: 4 10 15 20 25 5 18 10 25 30 15 Output: YES Input: 3 5 10 15 2 10 20 Output: NO","solution":"def can_assign_legs(n, distances, m, capacities): # Sort distances and capacities to try and match the smallest distances with the smallest capacities distances.sort() capacities.sort() # Try to assign each leg in distances to someone who can handle it j = 0 # Index for capacities for i in range(n): while j < m and capacities[j] < distances[i]: j += 1 if j == m: # No employee left who can handle the current distance return \\"NO\\" j += 1 # Move to the next employee for the next distance return \\"YES\\" # Example usage: # n = 4 # distances = [10, 15, 20, 25] # m = 5 # capacities = [18, 10, 25, 30, 15] # print(can_assign_legs(n, distances, m, capacities)) # Output: YES"},{"question":"In a distant land called Algorithmia, there exists a magical forest with n enchanted trees. This forest is represented as a grid of size n x n, where each cell contains an enchanted tree with a certain type of magic fruit. The fruit types are represented by integers from 1 to k. The forest keeper, a wise wizard named Eldor, has a special ritual to collect the fruits. The ritual consists of moving a magical basket starting from the top-left corner of the grid (position (1,1)) to the bottom-right corner (position (n,n)). The basket can only move right or down at each step. As Eldor moves the basket, he collects the fruits from each tree he passes. Eldor wishes to maximize the number of distinct types of magic fruits he collects during his journey. Given the forest grid, help Eldor determine the maximum number of distinct types of magic fruits he can collect. Input The first line of the input contains two positive integers n and k (1 ≤ n ≤ 50, 1 ≤ k ≤ 100) — the size of the grid and the number of distinct types of magic fruits. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the type of magic fruit at position (i, j) in the grid. Output Print a single integer — the maximum number of distinct types of magic fruits Eldor can collect. Examples Input 3 3 1 2 3 2 2 2 3 2 1 Output 3 Input 4 4 1 1 2 3 2 3 4 1 2 2 3 4 4 1 1 3 Output 4 Input 2 2 1 2 2 2 Output 2 Note In the first example, Eldor can move along the path (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), collecting fruits of types {1, 2, 3}, resulting in 3 distinct types of fruits. In the second example, Eldor can move along the path (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4), collecting fruits of types {1, 2, 3, 4}, resulting in 4 distinct types of fruits.","solution":"def max_distinct_fruits(n, k, forest): Determines the maximum number of distinct types of magic fruits collected during the journey in the forest. Parameters: n (int): The size of the grid. k (int): The number of distinct types of magic fruits. forest (List[List[int]]): The grid representation of the forest. Returns: int: The maximum number of distinct types of fruits collected. from collections import defaultdict # Initialize a 3D array to store distinct fruits sets for each cell path dp = [[set() for _ in range(n)] for _ in range(n)] # Starting point dp[0][0].add(forest[0][0]) # Fill the DP table for i in range(n): for j in range(n): if i == 0 and j == 0: continue current_fruits = set() # Coming from the left if j > 0: current_fruits |= dp[i][j-1] # Coming from the top if i > 0: current_fruits |= dp[i-1][j] current_fruits.add(forest[i][j]) dp[i][j] = current_fruits # The answer will be the size of the set at the bottom-right corner return len(dp[n-1][n-1]) # Example usage: n = 3 k = 3 forest = [ [1, 2, 3], [2, 2, 2], [3, 2, 1] ] print(max_distinct_fruits(n, k, forest)) # Output: 3"},{"question":"A company is organizing a team-building activity, where employees need to be divided into groups. Each group should have the same number of employees. The company has found that dividing the total employees into groups can sometimes leave a few employees ungrouped. To ensure fairness, they have decided to split the employees such that no one is left ungrouped and each group should have the highest possible number of employees. Given the total number of employees, calculate the size of the largest possible groups such that no employee is left out. If only one group is possible, then return the number of employees in that group. Input The first line contains an integer T, the number of test cases. 1 ≤ T ≤ 1000 For each test case, there is a single integer N, the number of employees. 2 ≤ N ≤ 10^6 Output For each test case, output the size of the largest possible groups such that no employee is left ungrouped. SAMPLE INPUT 3 10 15 25 SAMPLE OUTPUT 5 5 5 Explanation For 10 employees, the largest group size without leaving any employee out is 5 (2 groups of 5). For 15 employees, the largest group size without leaving any employee out is also 5 (3 groups of 5). For 25 employees, the largest group size without leaving any employee out is again 5 (5 groups of 5).","solution":"def largest_group_size(employees): Returns the size of the largest possible groups such that no employee is left ungrouped. Parameters: employees (int): The total number of employees Returns: int: The size of the largest possible groups # We start checking from the half of the total employees downwards for size in range(employees // 2, 0, -1): if employees % size == 0: return size"},{"question":"You are given a list of integers where each integer represents the number of times a specific type of item appears in a warehouse. You need to redistribute these items into two sets such that the maximum difference between the sums of the two sets is minimized. More formally, given an array of integers `a` of length `n`, partition them into two sets `S1` and `S2` such that the absolute difference between the sums of the sets, `|sum(S1) - sum(S2)|`, is minimized. Implement a function to find this minimum difference. Input The first line contains an integer `n` (1 ≤ n ≤ 15), the number of distinct item types. The second line contains `n` positive integers a_1, ..., a_n (each a_i ≤ 1000), where `a_i` represents the number of times the i-th type appears. Output Print a single integer, the minimum possible absolute difference between the sums of the two sets. Examples Input 4 1 6 11 5 Output 1 Input 3 3 1 4 Output 0 Note In the first example, we can partition the items into two sets with sums 12 (1 + 11) and 11 (6 + 5). The absolute difference between these sums is 1. In the second example, we can partition the items into two sets with sums 4 (3 + 1) and 4. The absolute difference between these sums is 0.","solution":"def find_min_difference(items): from itertools import combinations total_sum = sum(items) n = len(items) min_diff = float(\'inf\') # Using combinations to find all subsets for i in range(n + 1): for subset in combinations(items, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum min_diff = min(min_diff, abs(subset_sum - other_sum)) return min_diff"},{"question":"The population of Gameston is engaged in a new tradition involving lantern patterns during their annual festival. They hang lanterns in a specific pattern defined by two integers: h (height) and w (width). The town\'s folk want to understand the lantern patterns by generating and analyzing rectangles that fit these specifications, filled with stars (*). Your task is to generate the pattern of lanterns based on the given dimensions h and w. Input The input consists of multiple datasets. Each dataset is a line containing two integers h and w separated by a single space. The integer h is the height of the rectangle and the integer w is the width of the rectangle. You may assume 1 ≤ h, w ≤ 100. The end of the input is indicated by a line containing two zeros separated by a single space. Output For each dataset, output the corresponding rectangle pattern where the character at each position is \'*\'. Each rectangle must be followed by a blank line. Example Input 3 4 5 2 2 2 0 0 Output **** **** **** ** ** ** ** ** ** **","solution":"def generate_lantern_patterns(input_data): Generates lantern patterns based on the given dimensions. Parameters: input_data (str): Multiline string where each line contains two integers h and w separated by a space. Returns: str: Output the corresponding rectangle pattern where the character at each position is \'*\'. Each rectangle is followed by a blank line. lines = input_data.strip().split(\'n\') result = [] for line in lines: h, w = map(int, line.split()) if h == 0 and w == 0: break rectangle = \'n\'.join([\'*\' * w] * h) result.append(rectangle) return \'nn\'.join(result) + \'n\'"},{"question":"You are given five unique integers A, B, C, D, and E. Determine if these numbers can form an arithmetic progression when sorted in ascending order. Constraints * -1000 ≤ A, B, C, D, E ≤ 1000 * A, B, C, D, and E are unique integers. Input Input is given from Standard Input in the following format: A B C D E Output If A, B, C, D, and E can form an arithmetic progression when sorted, print `YES`; otherwise, print `NO`. Examples Input 1 7 13 10 4 Output YES Input 3 6 9 11 14 Output NO Input 15 5 10 20 0 Output YES Input 8 2 -2 4 5 Output NO","solution":"def can_form_arithmetic_progression(A, B, C, D, E): Determines if the five unique integers can form an arithmetic progression when sorted in ascending order. Args: A, B, C, D, E (int): Five unique integers. Returns: str: \\"YES\\" if they can form an arithmetic progression, otherwise \\"NO\\". numbers = [A, B, C, D, E] numbers.sort() # Check if differences between consecutive elements are the same diff = numbers[1] - numbers[0] for i in range(2, len(numbers)): if numbers[i] - numbers[i-1] != diff: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string s containing lowercase, uppercase English letters and digits. Your task is to check whether the given string satisfies the following properties: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must be at least 6 characters long. 5. It must contain the character \'@\'. If the string satisfies all the above properties, print \\"VALID\\" without quotes. Otherwise, print \\"INVALID\\" without quotes. Input The input consists of a single string s (1 ≤ |s| ≤ 100). Output Print \\"VALID\\" if the string satisfies all the given properties, otherwise print \\"INVALID\\". Examples Input abcdE1@ Output VALID Input abcdE@ Output INVALID Input ABC123@ Output INVALID Input abcdEf Output INVALID Input abcd1234E@ Output VALID","solution":"def check_string(s): Checks if the given string s satisfies: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must be at least 6 characters long. 5. It must contain the character \'@\'. has_lowercase = any(c.islower() for c in s) has_uppercase = any(c.isupper() for c in s) has_digit = any(c.isdigit() for c in s) has_at_symbol = \'@\' in s is_long_enough = len(s) >= 6 if has_lowercase and has_uppercase and has_digit and has_at_symbol and is_long_enough: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"You are given an application that displays a credit card transaction log. Each transaction is recorded as a string in the format: \\"TransactionID merchantID customerID timestamp transactionAmount\\". For example: \\"txn123 mer456 cust789 2023-03-15T13:45:30 53.75\\". Your task is to generate a summary of the total transaction amounts per customer for a given day in the format: \\"customerID totalAmount\\". Each transaction is only considered if it falls within the specified day (inclusive of all times on that day from \\"YYYY-MM-DDT00:00:00\\" to \\"YYYY-MM-DDT23:59:59\\"). Input The first line of the input contains an integer n, representing the number of transactions. The next n lines each contain a transaction record as described above. Following that, there is a line containing a string recDate representing the date for which the summary needs to be generated, in the format \\"YYYY-MM-DD\\". Output For each customer that has transactions on the specified date, print the customer ID and their total transaction amount in the format \\"customerID totalAmount\\". The output should be sorted by the customerIDs lexicographically. If no transactions are found for the given date, the output should be an empty string. Note: You should handle the transactions in such a way that each customer’s ID and their total amount are displayed in lexicographical order of customer IDs. Examples Input 5 txn1 mer1 cust1 2023-03-15T12:34:56 25.00 txn2 mer2 cust2 2023-03-15T13:45:30 40.00 txn3 mer3 cust1 2023-03-16T14:45:50 100.00 txn4 mer4 cust2 2023-03-15T10:10:10 15.00 txn5 mer5 cust3 2023-03-15T18:20:00 75.00 2023-03-15 Output cust1 25.00 cust2 55.00 cust3 75.00 Note Transactions considered: txn1 and txn2 for cust1 and cust2 respectively on 2023-03-15, also txn4 for cust2 again. Transaction txn5 for cust3 is included for the specified date. Transaction txn3 is not included because it\'s on a different date.","solution":"def summarize_transactions(n, transactions, recDate): from collections import defaultdict customer_totals = defaultdict(float) # Iterate through the transactions and sum amounts per customer for the given date for transaction in transactions: parts = transaction.split() transaction_id, merchant_id, customer_id, timestamp, amount = parts[0], parts[1], parts[2], parts[3], float(parts[4]) transaction_date = timestamp.split(\'T\')[0] if transaction_date == recDate: customer_totals[customer_id] += amount # Sort the dictionary by customerID lexicographically and format the result sorted_totals = sorted(customer_totals.items()) result = [] for customer_id, total in sorted_totals: result.append(f\\"{customer_id} {total:.2f}\\") return \\"n\\".join(result)"},{"question":"You are organizing a marathon which has n participants. You have recorded the time it took each participant to complete the marathon in an array. However, due to an error during the recording process, exactly one participant\'s time is missing and is recorded as -1. You need to find out the value of the missing time such that the average marathon time (including the missing one) becomes closest to the actual average of the provided times. Your task is to write a program that calculates the missing time such that the average marathon time is as close as possible to the actual average excluding the missing time. Input - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of participants. - The second line contains n integers t_1, t_2,..., t_n (1 ≤ t_i ≤ 10^9 or t_i = -1), where t_i represents the time recorded for the i-th participant. Only one t_i will be -1. Output - Output the integer value of the missing time that makes the average marathon time closest to the actual average of the provided times. Example Input 4 3 6 -1 5 Output 4","solution":"def find_missing_time(n, times): total_time = 0 count = 0 for time in times: if time != -1: total_time += time count += 1 average_time = total_time // count return average_time"},{"question":"Sarah is an avid collector of rare books and maintains an inventory list of her collection. Each book in her collection has a unique identification code that consists of lowercase letters only. She wants to keep track of the frequency of each book in her collection. On a given day, Sarah may add several new books to her collection and query the frequency of a specific book. Your task is to design a program that will help Sarah manage her inventory efficiently. Input The first line contains an integer N (1 ≤ N ≤ 10^5), the number of operations. The next N lines describe the operations. Each operation can be one of the following: 1. \\"ADD book_code\\" - Add a book with the given identification code to the collection. (1 ≤ |book_code| ≤ 100) 2. \\"QUERY book_code\\" - Query the number of times a book with the given identification code appears in the collection. Output For each query operation, output the frequency of the queried book code. Examples Input 6 ADD harrypotter ADD hobbit ADD harrypotter QUERY harrypotter ADD lotr QUERY hobbit Output 2 1 Note For the example provided: - The first operation adds a book with the code \\"harrypotter\\". - The second operation adds a book with the code \\"hobbit\\". - The third operation adds another book with the code \\"harrypotter\\". - The fourth operation queries the frequency of \\"harrypotter\\", which should be 2. - The fifth operation adds a book with the code \\"lotr\\". - The sixth operation queries the frequency of \\"hobbit\\", which should be 1.","solution":"def manage_inventory(operations): Manages the inventory of books and returns frequency for QUERY operations. :param operations: List of strings specifying the operations. :return: List of integers representing the results of QUERY operations. from collections import defaultdict inventory = defaultdict(int) results = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, book_code = operation.split() inventory[book_code] += 1 elif operation.startswith(\\"QUERY\\"): _, book_code = operation.split() results.append(inventory[book_code]) return results"},{"question":"Given a string that contains a list of numbers separated by commas, write a program to identify and output the highest prime number in the list. If there are no prime numbers in the list, return -1. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Input A single string containing numbers separated by commas. The string is not empty and contains at least one number. Output Output the highest prime number in the list. If there are no prime numbers, output -1. Example Input \\"3,5,8,13,23,4,6\\" Output 23","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def highest_prime_in_list(numbers): Returns the highest prime number in the list or -1 if there are no prime numbers. num_list = map(int, numbers.split(\',\')) primes = [num for num in num_list if is_prime(num)] return max(primes) if primes else -1"},{"question":"Maya loves playing with strings. She\'s come up with an interesting problem which she asks her friend Ravi to solve. The problem is as follows: Given a string S of length N, consisting of lowercase English alphabet characters, determine the number of substrings that are palindromes. A palindrome is a string that reads the same backward as forward. A substring is defined as some sequence of consecutive characters of S. Input The first line contains an integer N (1 ≤ N ≤ 1,000). The second line contains a string S of length N. Output Output the total number of palindromic substrings in the given string S. SAMPLE INPUT 5 ababa SAMPLE OUTPUT 9 Explanation The following 9 substrings are palindromic in the string \\"ababa\\": 1 : \\"a\\" 2 : \\"b\\" 3 : \\"a\\" 4 : \\"b\\" 5 : \\"a\\" 6 : \\"aba\\" 7 : \\"bab\\" 8 : \\"aba\\" 9 : \\"ababa\\" Each of these reads the same backward as forward.","solution":"def count_palindromic_substrings(s: str) -> int: Counts the number of palindromic substrings in the given string. Parameters: s (str): The input string. Returns: int: The number of palindromic substrings. n = len(s) count = 0 # Helper function to expand around center def expand_around_center(left: int, right: int) -> int: l, r = left, right palin_count = 0 while l >= 0 and r < n and s[l] == s[r]: palin_count += 1 l -= 1 r += 1 return palin_count # Iterate over each character and treat it as center of palindrome for i in range(n): # Odd length palindromes (center is one character) count += expand_around_center(i, i) # Even length palindromes (center is between two characters) count += expand_around_center(i, i + 1) return count"},{"question":"You are a developer at a software company that deals with a lot of data processing and analysis. Your current task is to develop a program that will process a list of stock prices and determine the maximum profit that can be achieved by buying and selling the stock. However, you can only complete one transaction, meaning you must buy and then sell the stock later. Given a list of daily stock prices (represented as integers), write a function to find and return the maximum profit you can achieve from this single buy-sell transaction. If no profit is possible, return 0. Input: - A list of integers where each integer represents the stock price on a given day. The length of the list will be between 2 and 10^5, and the prices will be non-negative integers less than or equal to 10^4. Output: - An integer representing the maximum profit from the single buy-sell transaction or 0 if no profit is possible. Function Signature: ```python def max_profit(prices: List[int]) -> int: ``` Examples: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on the second day (price = 1) and sell on the fifth day (price = 6), profit = 6-1 = 5. Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, and the maximum profit = 0. Input: [2, 4, 1] Output: 2 Explanation: Buy on the first day (price = 2) and sell on the second day (price = 4), profit = 4-2 = 2.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Avery the detective works in a city with a number of crime zones numbered from 1 to n. The city security system provides a list of crimes that occurred, and each crime specifies the zone where it took place. Avery suspects that certain crime zones might be more dangerous than others if they appear more frequently in the list. To help her analysis, she wants to know the frequency of each zone\'s appearance in the sorted order of zones. Given the list of crime occurrences, write a program to determine and print the frequency of each zone. Input The first line contains an integer n (1 ≤ n ≤ 10^5) representing the total number of crime zones. The second line contains an integer m (1 ≤ m ≤ 10^5) representing the total number of recorded crimes. The third line contains m integers, each representing the crime zone where a crime took place (1 ≤ zone ≤ n). Output The output should consist of n lines. Each line i represents the frequency of crimes in zone i (1 ≤ i ≤ n). If a zone does not appear in the crime list, print 0 for that zone. Examples Input 5 6 1 2 2 3 3 3 Output 1 2 3 0 0 Input 4 4 4 4 4 4 Output 0 0 0 4","solution":"def crime_zone_frequency(n, m, zones): This function returns the frequency of crimes in each zone from 1 to n. Parameters: n (int): The total number of crime zones. m (int): The total number of recorded crimes. zones (list of int): A list containing the zones where crimes occurred. Returns: list of int: A list containing the frequency of crimes in each zone. # Initialize a list to store the frequency of each zone frequency = [0] * n # Populate the frequency list for zone in zones: frequency[zone - 1] += 1 return frequency"},{"question":"A factory produces rectangular metal plates of various sizes and needs to cut a number of identical square pieces from a given metal plate. The goal is to maximize the size of these square pieces while making sure that the entire area of the given rectangular plate is used. You need to determine the side length of the largest possible square pieces that can be cut from the rectangular plate such that no leftover areas are left. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10^9) — the dimensions of the rectangular metal plate. Output Print a single integer — the side length of the largest possible square pieces which can be obtained from the rectangular plate. Examples Input 6 9 Output 3 Input 20 15 Output 5 Note In the first example, the largest squares that can be cut from the 6x9 metal plate measure 3x3 units each. Six of these squares can fully cover the original area (two rows and three columns). In the second example, the largest squares that can be cut from the 20x15 metal plate measure 5x5 units each. A total of twelve such squares (four columns and three rows) can fully cover the original area.","solution":"def largest_square_side(n, m): Returns the side length of the largest possible square pieces that can be cut from the rectangular plate with dimensions n and m, such that the entire area is used with no leftover. def gcd(x, y): while y: x, y = y, x % y return x return gcd(n, m)"},{"question":"You are given n strings. For each string, find the length of the longest substring that contains no repeating characters. Input The first line contains an integer n (1 ≤ n ≤ 10^5). Each of the following n lines contains a single string of lowercase English letters (1 ≤ length of string ≤ 10^5). Output For each string, print the length of the longest substring that contains no repeating characters on a new line. Examples Input 3 abcabcbb bbbbb pwwkew Output 3 1 3 Note In the first example, the answer is \\"abc\\", with the length of 3. In the second example, the answer is \\"b\\", with the length of 1. In the third example, the answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length def lengths_of_longest_substrings(n, strings): Returns the lengths of the longest substrings without repetitive characters for each string. results = [] for string in strings: results.append(length_of_longest_substring(string)) return results"},{"question":"Alice has discovered an old library of books filled with ancient knowledge. She is tasked with categorizing each book according to its genre. Each book belongs to a single genre, but the library\'s cataloging system is in disarray with books listed out of order. Alice decides to implement a more efficient system to help her keep track of the books by sorting them based on their genres. You need to help Alice by writing a program that will sort the books by genre and list them in ascending order. Input The first line contains an integer n – the number of books (1 ≤ n ≤ 10000). The second line contains n space-separated strings representing the genres of each book. Each genre is a string of lowercase English letters and has a length of at most 100 characters. Output Print the genres of the books sorted in ascending order, each genre separated by a space. Examples Input 5 history fiction fantasy romance non-fiction Output fantasy fiction history non-fiction romance Input 7 science fiction adventure horror biography drama mystery comedy Output adventure biography comedy drama fiction horror mystery science Note In the second sample, the genres are sorted alphabetically from \'adventure\' to \'science.\'","solution":"def sort_genres(n, genres): Sort the genres of books in ascending order and return them as a single space-separated string. Args: n (int): The number of books. genres (list of str): A list containing the genres of the books. Returns: str: A space-separated string of genres sorted in ascending order. return \\" \\".join(sorted(genres))"},{"question":"You are given an array of n integers and asked to perform a series of operations on this array. The operations include updating an element to a new value and retrieving the sum of elements in a given range modulo a given number. # Detailed Description: You are given an array a of n integers, and q operations to perform on the array. Each operation can be one of the following types: 1. Update the value of element at index i to a new value v. 2. Calculate the sum of elements between indices l and r, inclusive, and return the sum modulo m. Write a program to process these operations efficiently. # Input: - The first line contains three integers n, q, and m (1 <= n, q, m <= 100000), representing the number of elements in the array, the number of operations, and the modulo number. - The second line contains n integers a1, a2, ..., an representing the initial values of the array. - The next q lines describe the operations, each in one of the following formats: - `1 i v` to update the element at index i (1-based) to the value v (0 <= v <= 10^9) - `2 l r` to return the sum of elements from index l to r (1-based) inclusive, modulo m # Output: For each sum operation, output the result on a new line. # Example: Input: ``` 5 4 1000 5 3 8 6 2 2 1 3 1 2 10 2 1 3 2 3 5 ``` Output: ``` 16 23 16 ``` # Explanation: - Initially, the array is [5, 3, 8, 6, 2]. - The first operation is \\"2 1 3\\", summing the elements from index 1 to 3: 5 + 3 + 8 = 16. - The second operation is \\"1 2 10\\", updating the element at index 2 to 10. The array becomes [5, 10, 8, 6, 2]. - The third operation is \\"2 1 3\\", summing the elements from index 1 to 3: 5 + 10 + 8 = 23. - The fourth operation is \\"2 3 5\\", summing the elements from index 3 to 5: 8 + 6 + 2 = 16. Write your solution in a way that handles updates and queries efficiently.","solution":"class RangeUpdateQuery: def __init__(self, n, a, m): self.n = n self.a = a self.m = m def update(self, i, v): self.a[i] = v def range_query(self, l, r): return sum(self.a[l:r+1]) % self.m def process_operations(n, q, m, a, operations): ruq = RangeUpdateQuery(n, a, m) results = [] for op in operations: if op[0] == 1: _, i, v = op ruq.update(i-1, v) # Convert 1-based to 0-based elif op[0] == 2: _, l, r = op result = ruq.range_query(l-1, r-1) # Convert 1-based to 0-based results.append(result) return results"},{"question":"Write a Python function called `find_k_smallest_pairs` that takes two input lists of integers and an integer k and returns a list of k smallest sum pairs (us.pi, vj). Each pair should be represented as a tuple (us.pi, vj) where us.pi belongs to the first list and vj to the second list. The pairs should be sorted firstly by the sum of the pair in ascending order and then by the first element of the pair if the sums are equal. Input: - A list `nums1` of length n, where 1 ≤ n ≤ 1000, representing the first list of integers. - A list `nums2` of length m, where 1 ≤ m ≤ 1000, representing the second list of integers. - An integer k, where 1 ≤ k ≤ min(n * m, 10^4), representing the number of pairs to return. Output: - A list of k tuples representing the k smallest sum pairs. Example: Input: ```python nums1 = [1, 7, 11] nums2 = [2, 4, 6] k = 3 ``` Output: ```python [(1, 2), (1, 4), (1, 6)] ``` Explanation: The sums of pairs are: - (1, 2) = 3 - (1, 4) = 5 - (1, 6) = 7 - (7, 2) = 9 - (7, 4) = 11 - (7, 6) = 13 - (11, 2) = 13 - (11, 4) = 15 - (11, 6) = 17 The smallest sums are (1, 2), (1, 4), and (1, 6). Additional Example: Input: ```python nums1 = [1, 1, 2] nums2 = [1, 2, 3] k = 2 ``` Output: ```python [(1, 1), (1, 1)] ``` Explanation: The sums of pairs are: - (1, 1) = 2 - (1, 1) = 2 - (1, 2) = 3 - (1, 3) = 4 - (2, 1) = 3 - (2, 2) = 4 - (2, 3) = 5 The smallest sums are (1, 1) and (1, 1). Note: - You can assume arrays are sorted in non-descending order. - The solution should aim for optimal performance.","solution":"import heapq def find_k_smallest_pairs(nums1, nums2, k): Returns the list of k pairs with the smallest sums. Pairs are formed by taking one element from nums1 and one element from nums2. if not nums1 or not nums2 or k == 0: return [] min_heap = [] result = [] # Initial population of the heap for i in range(min(k, len(nums1))): heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0)) # Extract the k smallest pairs while k > 0 and min_heap: sum_val, i, j = heapq.heappop(min_heap) result.append((nums1[i], nums2[j])) if j + 1 < len(nums2): heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1)) k -= 1 return result"},{"question":"A transportation company wants to optimize their fleet usage. They have a number of vehicles, each identified by a unique ID from 1 to n. Over the course of a day, each vehicle can be booked for a trip with a specific start and end time. However, a vehicle cannot be booked if it overlaps with another booking for the same vehicle. You need to write a program that handles the booking of vehicles and returns appropriate responses based on the status of the booking request. For each booking request, return \\"Booking successful\\" if the vehicle can be booked for the specified time without conflicts, otherwise return \\"Conflict\\". To be precise, your program should accept the following types of requests: - \\"book i start end\\" - where i is the vehicle ID, and start and end are the booking start and end times (1 ≤ start < end ≤ 10^9). If the booking request can be accommodated for the given vehicle without any time conflicts with existing bookings, it should be booked and return \\"Booking successful\\". If there is a conflict with an existing booking, return \\"Conflict\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of vehicles. The second line contains an integer m (1 ≤ m ≤ 10^5) — the number of booking requests. Next m lines contain booking requests, one per line, in the form of \\"book i start end\\" (1 ≤ i ≤ n). Output Print m lines — the result of each booking request processed in the order they are provided in the input. Example Input 3 5 book 1 1 5 book 2 3 8 book 1 2 6 book 1 5 10 book 3 7 10 Output Booking successful Booking successful Conflict Booking successful Booking successful Note In the example, the third booking request (\\"book 1 2 6\\") conflicts with the first request (\\"book 1 1 5\\"), hence it returns \\"Conflict\\". The rest of the bookings are successful as they either do not overlap or involve different vehicles.","solution":"def process_bookings(n, m, booking_requests): vehicle_bookings = {i: [] for i in range(1, n+1)} results = [] for request in booking_requests: _, vehicle_id, start, end = request.split() vehicle_id, start, end = int(vehicle_id), int(start), int(end) conflict = False for existing_start, existing_end in vehicle_bookings[vehicle_id]: if start < existing_end and end > existing_start: conflict = True break if conflict: results.append(\\"Conflict\\") else: vehicle_bookings[vehicle_id].append((start, end)) results.append(\\"Booking successful\\") return results"},{"question":"You are given a list of non-negative integers, and you need to find the largest number that can be formed by concatenating these numbers together. Write a program that computes and prints this largest number. Input The input is given in the following format: n a1 a2 a3 ... an The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n non-negative integers (0 ≤ ai ≤ 10^9). Output Output the largest concatenated number. Examples Input 3 50 2 1 Output 5021 Input 4 3 30 34 5 Output 534330","solution":"from functools import cmp_to_key def largest_number(nums): Function to arrange a list of non-negative integers to form the largest concatenated number. Parameters: nums (list): List of non-negative integers Returns: str: The largest concatenated number as a string def compare(x, y): # custom comparator function if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all integers in the list to strings nums = list(map(str, nums)) # Use the custom comparator to sort the array nums.sort(key=cmp_to_key(compare)) # If the highest number is \'0\', the max number is also \'0\' if nums[0] == \'0\': return \'0\' # Join the numbers to form the largest number return \'\'.join(nums) # Sample Inputs print(largest_number([50, 2, 1])) # Output: 5021 print(largest_number([3, 30, 34, 5])) # Output: 534330"},{"question":"Write a program to simulate a simple compression and decompression mechanism using a form of run-length encoding for strings composed of uppercase letters only. * encode s: Compress the string s using run-length encoding. * decode s: Decompress the run-length encoded string s back to its original form. * check s: Check if the string s is valid for encoding (it should contain only uppercase letters without any other characters). Constraints: * The number of operations leq 100,000 * The length of any single input string s does not exceed 1,000 characters. * The total length of all input strings across all operations combined does not exceed 1,000,000 characters. Input In the first line, the number of operations n is given. In the following n lines, operations represented by encode s, decode s, or check s are given. Output For each encode s operation, print the run-length encoded string. For each decode s operation, print the original string after decompression. For each check s operation, print \\"valid\\" if the string s contains only uppercase letters, and \\"invalid\\" otherwise. Example Input 6 encode AAAABBBCCDA decode 4A3B2C1D1A check HELLO encode CCCCDDD check 123ABC decode 2C2D Output 4A3B2C1D1A AAAABBBCCDA valid 4C3D invalid CCDD","solution":"def encode(s): if not s: return \\"\\" n = len(s) encoded_str = [] count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: encoded_str.append(f\\"{count}{s[i - 1]}\\") count = 1 encoded_str.append(f\\"{count}{s[-1]}\\") return \'\'.join(encoded_str) def decode(s): decoded_str = [] count = 0 for char in s: if char.isdigit(): count = count * 10 + int(char) else: decoded_str.append(char * count) count = 0 return \'\'.join(decoded_str) def check(s): if all(\'A\' <= char <= \'Z\' for char in s): return \\"valid\\" else: return \\"invalid\\" def process_operations(operations): result = [] for op in operations: command, s = op.split(\' \', 1) if command == \\"encode\\": result.append(encode(s)) elif command == \\"decode\\": result.append(decode(s)) elif command == \\"check\\": result.append(check(s)) return result"},{"question":"Alice and Bob are playing a game with strings. Initially, Alice writes down a string `s` consisting of lowercase English letters. Bob then performs a series of operations on the string, and Alice has to determine the state of the string after those operations. The operations are as follows: 1. **Insert Character**: Bob can insert a character at any position in the string. 2. **Delete Character**: Bob can delete a character from the string. 3. **Replace Character**: Bob can replace a character in the string with another character. Alice has to guess the state of the string after Bob finishes the operations, and Bob will provide the operations to be performed. Write a function that simulates this process. # Input - The first line contains the initial string `s` (1 ≤ |s| ≤ 100). - The second line contains an integer `q` (1 ≤ q ≤ 100), the number of operations. - The next `q` lines describe the operations in one of the following formats: - `Insert p c`: Insert character `c` at position `p` (1 ≤ p ≤ |s| + 1). - `Delete p`: Delete the character at position `p` (1 ≤ p ≤ |s|). - `Replace p c`: Replace the character at position `p` with character `c` (1 ≤ p ≤ |s|). # Output - Print the final state of the string after all operations are applied. # Examples **Example 1:** ``` Input: abc 3 Insert 2 d Delete 1 Replace 2 x Output: dxc ``` **Example 2:** ``` Input: hello 2 Replace 1 y Delete 5 Output: yello ``` # Note In the first example: 1. Insert \'d\' at position 2: \\"adbc\\". 2. Delete character at position 1: \\"dbc\\". 3. Replace character at position 2 with \'x\': \\"dxc\\". In the second example: 1. Replace character at position 1 with \'y\': \\"yello\\". 2. Delete character at position 5: \\"yell\\".","solution":"def process_string_operations(s, q, operations): Simulates the process where Bob applies a series of string operations. Parameters: s (str): Initial string. q (int): Number of operations. operations (list of str): List of operations to be performed. Returns: str: Final state of the string after all operations. s = list(s) # Convert string to list for easier manipulation for operation in operations: parts = operation.split() if parts[0] == \'Insert\': position = int(parts[1]) - 1 character = parts[2] s.insert(position, character) elif parts[0] == \'Delete\': position = int(parts[1]) - 1 s.pop(position) elif parts[0] == \'Replace\': position = int(parts[1]) - 1 character = parts[2] s[position] = character return \'\'.join(s)"},{"question":"Rita likes problem solving and has just started learning the basics of programming. She came across a problem which she found particularly interesting. In this problem, she needs to find the sum of all integers that appear an odd number of times in an array. Given an integer array consisting of n elements, her goal is to calculate the sum of these integers. Could you help Rita solve this problem by writing an efficient function? Input The first line contains an integer n (1 ≤ n ≤ 10^5) denoting the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) denoting the elements of the array. Output Print a single integer — the sum of all integers that appear an odd number of times in the array. Examples Input 5 1 2 2 3 3 Output 1 Input 6 4 4 5 5 5 6 Output 11 Note In the first example, the integers and their frequencies in the array are: 1 (once), 2 (twice), 3 (twice). Only the integer 1 appears an odd number of times, so the answer is 1. In the second example, the integers and their frequencies in the array are: 4 (twice), 5 (three times), 6 (once). The integers 5 and 6 appear an odd number of times, so the answer is 5 + 6 = 11.","solution":"from collections import Counter def sum_of_odd_frequencies(n, arr): Given a list of integers, returns the sum of integers that appear an odd number of times in the list. :param n: Number of elements in the array :param arr: List of integers :return: Sum of all integers that appear an odd number of times frequency = Counter(arr) result_sum = 0 for num, count in frequency.items(): if count % 2 != 0: result_sum += num return result_sum # Example usage: # n = 5 # arr = [1, 2, 2, 3, 3] # print(sum_of_odd_frequencies(n, arr)) # Output: 1"},{"question":"You are organizing a marathon event where each participant must be assigned a unique bib number. However, the bib numbers should be assigned based on the participant\'s finish time; the fastest runner gets the smallest bib number, and so on. You have the finish times of the participants. Your task is to assign the bib numbers accordingly and calculate the total sum of all bib numbers assigned. Input The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of participants. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the finish time of the ith participant in milliseconds. Output Print a single integer representing the total sum of all bib numbers assigned to the participants based on their finish times. Examples Input 5 300 150 600 200 450 Output 15 Input 4 10 20 30 40 Output 10 Note In the first example, the finish times sorted in ascending order are [150, 200, 300, 450, 600]. The bib numbers assigned are [1, 2, 3, 4, 5], and the total sum is 1 + 2 + 3 + 4 + 5 = 15. In the second example, the finish times sorted in ascending order are [10, 20, 30, 40]. The bib numbers assigned are [1, 2, 3, 4], and the total sum is 1 + 2 + 3 + 4 = 10.","solution":"def calculate_bib_sum(n, finish_times): Given the number of participants and their finish times, calculate the total sum of the bib numbers assigned based on finish times. # Sort the finish times (the actual order of finish times does not matter for sum calculation of bib numbers) finish_times_sorted = sorted(finish_times) # Calculate the sum of bib numbers bib_sum = sum(range(1, n + 1)) return bib_sum"},{"question":"In a small software development company, the developers are working to build a feature that tracks the usage of a specific application over time. They have collected data on user sessions, including the start and end times of each session. Your task is to analyze this session data and determine the maximum number of concurrent users for any given time interval. A given session consists of a userId, a start time, and an end time (inclusive). Two sessions are considered to be concurrent if there is any overlap in their time intervals. Write a program that calculates the maximum number of concurrent users based on the given session data. INPUT: The first line contains an integer n, the number of user sessions. The following n lines each contain three elements: an integer userId, an integer startTime, and an integer endTime. OUTPUT: Print a single integer representing the maximum number of concurrent users. SAMPLE INPUT 5 1 1 4 2 2 5 3 8 10 4 3 7 5 6 9 SAMPLE OUTPUT 3 Explanation: The maximum number of concurrent users is 3 during the interval from 2 to 4, where the sessions of users 1, 2, and 4 overlap.","solution":"def max_concurrent_users(n, sessions): Calculate the maximum number of concurrent users. Args: n (int): number of user sessions sessions (list of tuples): list of (userId, startTime, endTime) Returns: int: maximum number of concurrent users events = [] for session in sessions: userId, startTime, endTime = session events.append((startTime, \'start\')) events.append((endTime + 1, \'end\')) events.sort() max_concurrent = 0 concurrent = 0 for event in events: if event[1] == \'start\': concurrent += 1 if concurrent > max_concurrent: max_concurrent = concurrent else: concurrent -= 1 return max_concurrent # Sample Input and Output n = 5 sessions = [ (1, 1, 4), (2, 2, 5), (3, 8, 10), (4, 3, 7), (5, 6, 9) ] print(max_concurrent_users(n, sessions)) # Expected output: 3"},{"question":"Problem B: Longest Palindromic Substring A palindrome is a string that reads the same backward as forward. Given a string s, find the longest palindromic substring in s. Input The input starts with a line containing the integer t (1 <= t <= 10), representing the number of test cases. For each test case, one line contains a string s (1 <= |s| <= 2000), consisting of lowercase English letters. Output For each test case, print the longest palindromic substring of s. If there are multiple substring with the same length, print the one which appears first. Examples Input 2 babad cbbd Output bab bb Input 1 abcdefg Output a","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes temp = expand_around_center(s, i, i) if len(temp) > len(longest): longest = temp # Even length palindromes temp = expand_around_center(s, i, i + 1) if len(temp) > len(longest): longest = temp return longest def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"A palindrome is a sequence of characters that reads the same backward as forward, ignoring spaces and punctuations and considering all letters in lowercase. For instance, \\"A man, a plan, a canal, Panama\\" is a palindrome because when we ignore the spaces and punctuations it reads the same backward and forward. Create a program that checks if a given sentence is a palindrome. Input: The input consists of multiple lines, each line containing a single sentence. The end of the input is indicated by a single line containing the word END. Output: For each input sentence, output \\"YES\\" if the sentence is a palindrome and \\"NO\\" if it is not. Example Input: A man, a plan, a canal, Panama This is not a palindrome No lemon, no melon END Output: YES NO YES","solution":"import re def is_palindrome(sentence): Checks if a given sentence is a palindrome. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', sentence).lower() # Check if the cleaned sentence reads the same forwards and backwards return cleaned == cleaned[::-1] def process_input(): Reads input lines and checks if each sentence is a palindrome. Stops processing when encountering \\"END\\". results = [] while True: sentence = input().strip() if sentence == \\"END\\": break if is_palindrome(sentence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with developing a fundraising application that computes the maximum amount of funds that can be raised by selecting from a list of potential donors. Each donor has a specific donation amount they are willing to contribute. Unfortunately, due to time constraints, you may only reach out to a limited number of donors. Additionally, you need to ensure that each donor is contacted at most once. Given the number of donors and the maximum number of donors you are allowed to contact, determine the maximum funds that can be raised. Constraints: T ≤ 10 (number of test cases) N ≤ 10^5 (number of donors) K ≤ 10^5 (maximum number of donors that can be contacted) donation[i] ≤ 10^6 (donation amount from each donor) Input: The first line contains the number of test cases T. Each test case contains two lines: - The first line contains two integers, N and K. - The second line contains N space-separated integers representing the donation amounts from each donor. Output: For each test case, output a single line containing the maximum funds that can be raised by contacting up to K donors. Example Input: 3 6 3 5 10 7 3 8 9 4 2 1 2 3 4 5 0 2 4 6 8 10 Example Output: 27 7 0 Explanation: In the first test case, the maximum funds can be obtained by contacting donors with amounts 10, 9, and 8, yielding a total of 27. In the second test case, the maximum funds can be obtained by contacting donors with donations 4 and 3, yielding a total of 7. In the third test case, you cannot contact any donors, so the maximum funds raised is 0.","solution":"def max_funds_raised(test_cases): This function takes the test cases details and returns a list of maximum funds that can be raised for each test case. results = [] for N, K, donations in test_cases: if K == 0: results.append(0) continue sorted_donations = sorted(donations, reverse=True) max_funds = sum(sorted_donations[:K]) results.append(max_funds) return results"},{"question":"A company is holding a network configuration competition. You are given a blueprint of their network in the form of a 2D grid, where \'1\' represents a computer, and \'0\' represents an empty spot. Your task is to determine the number of isolated networks (groups of connected computers). Computers are only considered connected if they are adjacent vertically or horizontally (not diagonally). Input The input consists of a 2D grid of dimensions n x m, where 1 ≤ n, m ≤ 50. Output Output the number of isolated networks in the given grid. Examples Input 11100 11000 00100 00011 Output 3 Input 11000 11000 00100 00001 Output 2","solution":"def num_isolated_networks(grid): def dfs(grid, x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < len(grid) and 0 <= cy < len(grid[0]) and grid[cx][cy] == \'1\': grid[cx][cy] = \'0\' stack.extend([(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]) if not grid or not grid[0]: return 0 count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(grid, i, j) count += 1 return count"},{"question":"You are given a rectangular matrix consisting of positive integers. The task is to find if there exists a submatrix of size `2 x 2` such that all its elements are equal. Input The first line of the input contains two integers `n` and `m` (2 ≤ n, m ≤ 100) — the number of rows and columns in the matrix. Each of the next `n` lines contains `m` integers — the elements of the matrix. Output Print \\"YES\\" if there is a `2 x 2` submatrix with all equal elements; otherwise, print \\"NO\\". Examples Input 3 4 1 2 3 4 5 5 2 2 3 3 3 3 Output YES Input 2 3 1 2 3 4 5 6 Output NO Note In the first example, a possible `2 x 2` submatrix with equal elements is: ``` 3 3 3 3 ``` In the second example, no such submatrix exists.","solution":"def has_equal_2x2_submatrix(matrix): Given a rectangular matrix consisting of positive integers, finds if there exists a submatrix of size 2x2 such that all its elements are equal. :param matrix: List[List[int]] - a 2D list representing the matrix :return: str - \\"YES\\" if a 2x2 submatrix with equal elements exists, otherwise \\"NO\\" n = len(matrix) m = len(matrix[0]) for i in range(n - 1): for j in range(m - 1): if (matrix[i][j] == matrix[i+1][j] == matrix[i][j+1] == matrix[i+1][j+1]): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers and a set of update operations, you need to efficiently answer the sum of a subarray after performing all the updates. Each update operation consists of setting a specific index in the array to a new value. After applying all updates, you will receive multiple queries asking for the sum of the elements between two given indices in the array. You need to implement a process that can handle both the updates and the subsequent queries efficiently. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10^5) – the number of elements in the array and the number of operations (updates + queries). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) – the initial elements of the array. The following m lines describe the operations. Each operation is either an update or a query and is represented by three integers t, x, y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9 for updates, 1 ≤ y ≤ n for queries): - If t = 1, it represents an update operation, and you need to set a_x to y. - If t = 2, it represents a query, and you need to return the sum of the elements from index x to y (inclusive). Output For each query operation, print the result on a new line. Example Input 5 6 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 2 4 1 5 15 2 1 5 Output 6 13 16 32","solution":"class ArrayHandler: def __init__(self, array): self.array = array self.prefix_sums = self._calculate_prefix_sums() def _calculate_prefix_sums(self): n = len(self.array) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + self.array[i] return prefix_sums def update(self, index, value): old_value = self.array[index - 1] diff = value - old_value self.array[index - 1] = value for i in range(index, len(self.prefix_sums)): self.prefix_sums[i] += diff def query(self, left, right): return self.prefix_sums[right] - self.prefix_sums[left - 1] def process_operations(n, m, initial_array, operations): array_handler = ArrayHandler(initial_array) results = [] for operation in operations: t, x, y = operation if t == 1: array_handler.update(x, y) else: results.append(array_handler.query(x, y)) return results"},{"question":"Given N students sitting in a line with a height h[i] for the i-th student, you are asked to perform the following operations: 1. Rearrange the students such that no two students of the same height are adjacent. 2. If it is impossible to do so, return \\"Impossible\\". Write a function that takes in a list of integers representing students\' heights and returns a list with heights rearranged according to the criteria, or the string \\"Impossible\\" if no such arrangement is possible. Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of students. - The second line of each test case contains N space-separated integers h[i], representing the height of each student. Output: - For each test case, output a single line with the rearranged list of heights or the string \\"Impossible\\". # Example Input: 2 5 1 1 2 2 3 4 1 1 1 3 Output: 1 2 1 3 2 Impossible # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ h[i] ≤ 100 Note: - Each test case should be handled independently. - The re-arranged list should maintain the original order of first appearance in case of multiple valid answers.","solution":"from collections import Counter from heapq import heappush, heappop def rearrange_heights(num_cases, cases): results = [] for case in cases: N, heights = case if N == 1: results.append(\\"Impossible\\" if len(set(heights)) == 1 else heights) continue counter = Counter(heights) max_freq = counter.most_common(1)[0][1] if max_freq > (N + 1) // 2: results.append(\\"Impossible\\") continue heap = [] for height, count in counter.items(): heappush(heap, (-count, height)) result = [0] * N idx = 0 while heap: count, height = heappop(heap) count = -count for _ in range(count): result[idx] = height idx += 2 if idx >= N: idx = 1 results.append(result) return results"},{"question":"You are given an integer n and a sequence a_1, a_2, ..., a_n and b_1, b_2, ..., b_m. The sequence of b has been permuted randomly and you are to find the minimum sum of absolute differences between pairs formed by a and b. In other words, you want to pair each a_i with some b_j such that the sum of |a_i - b_j| is minimized. Each element in the sequences a and b must be used exactly once. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the length of sequences a and b. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000). - The third line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 1000). Output: - Print one integer — the minimum sum of absolute differences between pairs. Examples Input: 3 1 3 5 4 2 8 Output: 5 Input: 5 1 2 3 4 5 5 4 3 2 1 Output: 0 Explanation: In the first example, the optimal pairings are (1,2), (3,4) and (5,8), giving us the total difference 1+1+3=5. In the second example, each element pairs perfectly with no difference, resulting in an overall sum of 0.","solution":"def min_sum_of_absolute_differences(n, a, b): a.sort() b.sort() return sum(abs(a[i] - b[i]) for i in range(n))"},{"question":"You are given a list of integers and a single integer k. The task is to determine whether there is a pair of distinct integers in the list whose sum is exactly k. Write a function `find_pair_with_sum(arr, k)` that takes a list of integers `arr` and an integer `k` as inputs and returns a boolean value `True` if there exists a pair of distinct integers in the list such that their sum is equal to `k`, and `False` otherwise. # Input - First line contains an integer t, the number of test cases. (1 ≤ t ≤ 100) - For each test case, the first line contains an integer n, the number of elements in the list. (2 ≤ n ≤ 10^5) - The second line contains n space-separated integers representing the elements of the list. Each integer is between -10^6 and 10^6 (inclusive). - The third line contains the integer k. # Output - For each test case, print \\"Case#x: y\\" where x is the test case number starting from 1 and y is `True` if there exists a pair whose sum is k, otherwise `False`. # Example Input: ``` 3 5 1 2 3 9 14 17 4 1 2 3 4 8 3 1 2 3 4 ``` Output: ``` Case#1: True Case#2: False Case#3: True ``` # Notes: - For the first test case, the pair (3, 14) sums up to 17. - For the second test case, there is no pair of distinct integers that sums up to 8. - For the third test case, the pair (1, 3) sums up to 4.","solution":"def find_pair_with_sum(arr, k): Returns True if there exists a pair of distinct integers in the list arr whose sum is equal to k, otherwise returns False. seen = set() for number in arr: if (k - number) in seen: return True seen.add(number) return False def process_test_cases(test_cases): results = [] for i, (n, arr, k) in enumerate(test_cases): result = find_pair_with_sum(arr, k) results.append(f\\"Case#{i+1}: {result}\\") return results"},{"question":"A group of friends is organizing a relay race in a park. The race track is circular, and there are different checkpoints placed around the track. Each checkpoint has a unique integer identifier. To start the race, the organizers need to determine the starting checkpoint from which the relay race will begin. Each friend is given a different task to perform at each checkpoint, and they need to cover all checkpoints in such a way that they can come back to the starting checkpoint in minimal time while ensuring that each checkpoint is visited exactly once. Given a list of travel times between pairs of checkpoints, the goal is to find the starting checkpoint such that the total travel time of visiting all checkpoints and returning to the start is minimized. Assume the travel times between the checkpoints are symmetric. Input The first line contains an integer n — the number of checkpoints (1 ≤ n ≤ 100). The next n lines each contain n integers. The j-th integer in the i-th row represents the travel time from checkpoint i to checkpoint j (0 ≤ travel time ≤ 100). The travel time from a checkpoint to itself is always 0. Output Print the identifier of the checkpoint from which the relay race should start to minimize the total travel time. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 1 Note In the given example, if starting from checkpoint 1, the minimal route could be: 1 -> 2 -> 4 -> 3 -> 1 with the total travel time being 10 + 25 + 30 + 15 = 80. Thus, checkpoint 1 is the best starting point due to the minimal total travel time for completing the relay race and returning to the start.","solution":"from itertools import permutations def travel_time(travel_times, route): time = 0 for i in range(len(route)-1): time += travel_times[route[i]][route[i+1]] time += travel_times[route[-1]][route[0]] # return to start return time def find_best_starting_checkpoint(n, travel_times): best_time = float(\'inf\') best_checkpoint = -1 for i in range(n): checkpoints = list(range(n)) checkpoints.remove(i) all_permutations = permutations(checkpoints) for perm in all_permutations: route = [i] + list(perm) + [i] current_time = travel_time(travel_times, route) if current_time < best_time: best_time = current_time best_checkpoint = i return best_checkpoint + 1 # because checkpoint indices are 1-based # Example usage n = 4 travel_times = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(find_best_starting_checkpoint(n, travel_times)) # Output should be 1"},{"question":"You are a member of a programming club in your college. The club organizes a series of coding contests, and each contest has some specific winning criteria to determine its scores. In the latest contest, the club brought a set of \\"weighted problems\\". Each problem has a specified weight, and each participant\'s score is determined by the sum of the weights of the problems they have solved. However, in order to balance the contest, the club decided that each participant cannot solve more than a maximum number of problems. Given the list of problem weights and the number of problems each participant can solve, write a program to calculate the maximum score a participant can achieve. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of problems and the maximum number of problems a participant can solve, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the problems. Output Print a single integer — the maximum score a participant can achieve. Examples Input 5 2 10 6 7 15 3 Output 25 Input 4 3 5 8 3 2 Output 16 Explanation: In the first example, a participant can solve at most 2 problems. To achieve the maximum score, they should solve the problems with weights 15 and 10, resulting in a score of 25. In the second example, the participant can solve at most 3 problems, and solving the problems with weights 8, 5 and 3 will result in the maximum score of 16.","solution":"def max_score(n, m, weights): Returns the maximum score a participant can achieve given a limit on the number of problems they can solve. Args: n (int): The number of problems. m (int): The maximum number of problems a participant can solve. weights (list of int): The weights of the problems. Returns: int: The maximum score. # Sort weights in descending order to get the \'m\' largest weights sorted_weights = sorted(weights, reverse=True) # Sum the top \'m\' weights return sum(sorted_weights[:m])"},{"question":"# Problem You are given an integer array and a target sum. You need to find the number of unique pairs of integers in the array that add up exactly to the target sum. Note that each pair should be counted only once, and the pairs (a, b) and (b, a) are considered the same. # Input Format The input consists of: - A single integer n, where 1 le n le 10^5, representing the number of elements in the array. - A single integer target, where -10^9 le target le 10^9, representing the target sum. - An array of n integers, where each integer is -10^9 le a_i le 10^9. # Output Format Output a single integer representing the number of unique pairs that add up to the target sum. # Constraints - Each element in the array can be used only once in a pair. # Example Input ``` 6 10 1 3 2 5 7 8 ``` Output ``` 2 ``` Explanation The pairs (3, 7) and (2, 8) add up to 10. No other pairs meet the target sum. # Solution Approaches The question can be solved using a hash set to track the elements and find pairs in linear time by iterating through the array and checking for the complement of each element (i.e., target - a_i). This allows us to efficiently find unique pairs without using nested loops.","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs in the array that add up to the target sum. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs)"},{"question":"You are in charge of developing a new traffic light system for an intersection. The system controls the traffic lights in four directions (north, south, east, and west). Each direction has its own light which can be either green or red. The directions are grouped in pairs such that north and south directions are one pair and east and west directions are another pair. Only one pair can have green lights at any time, while the other pair must have red lights. The lights must switch between states in a regular cycle: they start with north-south green and east-west red, then switch to east-west green and north-south red, and cycle back. Write a function to simulate the traffic light changes for n cycles. Each cycle consists of the north-south pair being green while the east-west pair is red for a certain period, followed by the east-west pair being green while the north-south pair is red for the same period. # Input - An integer n (1 ≤ n ≤ 100) representing the number of cycles to simulate. - An integer t (1 ≤ t ≤ 100) representing the duration of each green light period in seconds. # Output - Print the state of the lights at each second for the entire duration of n cycles. Use the strings \\"NS green, EW red\\" to indicate the north-south pair is green and the east-west pair is red, and \\"NS red, EW green\\" to indicate the opposite. # Example Input ``` 2 3 ``` Output ``` Second 1: NS green, EW red Second 2: NS green, EW red Second 3: NS green, EW red Second 4: NS red, EW green Second 5: NS red, EW green Second 6: NS red, EW green Second 7: NS green, EW red Second 8: NS green, EW red Second 9: NS green, EW red Second 10: NS red, EW green Second 11: NS red, EW green Second 12: NS red, EW green ``` # Explanation During the first cycle (3 seconds long), north-south lights are green and east-west lights are red. During the second 3 seconds, north-south lights are red and east-west lights are green. This pattern repeats for the number of cycles specified.","solution":"def simulate_traffic_lights(n, t): Simulate the traffic light changes for n cycles. Parameters: n (int): Number of cycles t (int): Duration of each green light period in seconds Returns: List[str]: A list of strings representing the state of the lights at each second states = [] for cycle in range(n): for second in range(1, t + 1): states.append(f\\"Second {len(states) + 1}: NS green, EW red\\") for second in range(1, t + 1): states.append(f\\"Second {len(states) + 1}: NS red, EW green\\") return states # Example usage: # result = simulate_traffic_lights(2, 3) # print(\\"n\\".join(result))"},{"question":"You are given a grid of size M x N. Each cell of the grid either contains a 0 or a 1. Your task is to determine the length of the largest rectangle containing all 1\'s in this binary matrix. Constraints * 1 ≤ M, N ≤ 100 * Each cell of the matrix will be either 0 or 1. Input The first line contains two integers M and N separated by a space, representing the number of rows and columns, respectively. The next M lines each contain N integers separated by spaces, representing the grid. Output Print the length of the largest rectangle containing all 1\'s. Examples Input 4 4 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 Output 4 Input 3 3 1 1 1 1 1 1 1 1 1 Output 9","solution":"def maximal_rectangle(matrix): Returns the area of the largest rectangle containing all 1\'s in a binary matrix. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * (N + 1) for i in range(M): for j in range(N): heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 stack = [-1] for k in range(N + 1): while heights[k] < heights[stack[-1]]: h = heights[stack.pop()] w = k - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(k) return max_area"},{"question":"One day, a software developer decides to treat codeblocks as nested directories and wants to flatten this nested structure into a single list of code blocks. Each code block can either be an individual code line or another nested list of code blocks. Please help the developer write a function that takes a nested list of code blocks and flattens it into a single list of code blocks. The function should preserve the order of the code blocks as they appear in the original nested structure. Write a function `flatten_code_blocks` that takes a nested list `code_blocks` and returns a flattened list containing all code blocks in the order they appeared. Input * A nested list `code_blocks` which contains nested lists or code lines (strings). Output * A single list of all code lines with nested structure flattened keeping the order intact. Examples Input code_blocks = [ \\"def function1():\\", [ \\" print(\'Hello World\')\\", \\" return True\\" ], \\"def function2():\\", [ \\" for i in range(10):\\", [ \\" print(i)\\", \\" # loop end\\", ], \\" return None\\" ] ] Output [ \\"def function1():\\", \\" print(\'Hello World\')\\", \\" return True\\", \\"def function2():\\", \\" for i in range(10):\\", \\" print(i)\\", \\" # loop end\\", \\" return None\\" ] Input code_blocks = [ \\"if condition:\\", [ \\" do_something()\\", \\" if another_condition:\\", [ \\" do_more()\\", \\" else:\\", [ \\" handle_else()\\" ] ] ], \\"final_statement()\\" ] Output [ \\"if condition:\\", \\" do_something()\\", \\" if another_condition:\\", \\" do_more()\\", \\" else:\\", \\" handle_else()\\", \\"final_statement()\\" ] Note In Example 1, the nested code blocks are flattened in the order they appeared without altering their sequence, based on the requirement of the function.","solution":"def flatten_code_blocks(code_blocks): def flatten(code_blocks, result=[]): for block in code_blocks: if isinstance(block, list): flatten(block, result) else: result.append(block) return result return flatten(code_blocks, result=[])"},{"question":"You are given an array of integers and a number of operations to perform on that array. In each operation, you do the following: - Remove all occurrences of the largest number in the array. - Collect these removed largest numbers into a separate list corresponding to that operation. You need to determine the final state of the array after all operations are performed and produce the list of removed numbers for each operation. Input: The first line contains one integer T (1 ≤ T ≤ 100) — the number of test cases. The subsequent lines describe the test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) — the size of the array, followed by the array elements which are n space-separated integers (1 ≤ array[i] ≤ 10^5). Output: For each test case output: - The final state of the array (which may be empty). - A series of lines where each line contains the list of removed numbers in an operation in the order they were removed. Example: Input: 2 5 1 2 3 2 1 6 4 5 6 6 5 4 Output: [] 2 3 2 2 1 1 [4 4] 1 6 6 5 5 4 4","solution":"def process_operations(num_cases, cases): results = [] for i in range(num_cases): n, array = cases[i] removed_collections = [] while array: max_num = max(array) max_count = array.count(max_num) removed_collections.append([max_num] * max_count) array = [num for num in array if num != max_num] results.append((array, removed_collections)) return results"},{"question":"You are given an array of integers. Write a function to remove all occurrences of a specific element from the array in-place. Return the new length of the array after removal. Note that the order of elements can be changed and it doesn\'t matter what you leave beyond the new length. Input The first line contains two integers `n` and `val` separated by space, representing the number of elements in the array and the value to be removed respectively. The second line contains `n` integers separated by spaces, representing the elements of the array. Output Output the new length of the array after removal of specified element. Examples Input 7 3 1 2 3 4 3 2 1 Output 5 Input 5 2 2 2 2 2 2 Output 0","solution":"def remove_element(arr, val): Removes all occurrences of val in arr in-place and returns the new length of the array. # Initialize the index for the position to override new_len = 0 # Iterate through the array for elem in arr: # If the element is not the one to remove, place it at the new_len index if elem != val: arr[new_len] = elem new_len += 1 return new_len def process_input(n, val, arr): Processes the input and returns the new length of the array after removal of specified element. return remove_element(arr, val)"},{"question":"Alice enjoys solving numerical puzzles and has found a new interest in special numbers. She defines a special number as a number that becomes 1 after repeatedly replacing it with the sum of the squares of its digits. For example, 19 is a special number because: - 1² + 9² = 82 - 8² + 2² = 68 - 6² + 8² = 100 - 1² + 0² + 0² = 1 Quite a few numbers aren\'t special. For instance, 4 leads to an endless cycle: - 4² = 16 - 1² + 6² = 37 - 3² + 7² = 58 - 5² + 8² = 89 - 8² + 9² = 145 - 1² + 4² + 5² = 42 - 4² + 2² = 20 - 2² + 0² = 4 Given a list of integers, she wants to identify which ones are special numbers. Input - The input consists of multiple lines. - Each line contains one positive integer (1 ≤ integer ≤ 10^9). - The input is terminated by EOF. Output - For each line of input, output \\"Special\\" if the number is a special number and \\"Not Special\\" if it is not. Example Input 19 4 1 10 Output Special Not Special Special Special","solution":"def is_special_number(n): Function to determine if a number is a special number. Returns True if the number is a special number, otherwise False. def sum_of_squares_of_digits(x): return sum(int(digit) ** 2 for digit in str(x)) seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares_of_digits(n) return n == 1 def special_numbers(eof_input): # Process the input, strip and split by lines numbers = eof_input.strip().split() results = [] for num in numbers: number = int(num) if is_special_number(number): results.append(\\"Special\\") else: results.append(\\"Not Special\\") return results"},{"question":"Tommy loves playing with strings, especially with palindromes. A palindrome is a string that reads the same backward as forward. Given a string s consisting only of lowercase Latin letters, Tommy wants to determine the minimum number of modifications needed to make the string a palindrome. A modification is defined as changing one character to any other lowercase Latin letter. Write a program that will determine the minimum number of modifications required to turn the given string into a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains a string s consisting of lowercase Latin letters. Output Print the minimum number of modifications to transform the string into a palindrome. Examples Input 5 abcca Output 1 Input 4 abcd Output 2 Input 6 aaaaaa Output 0 Note In the first example, the string \'abcca\' can be modified to \'ababa\' with one modification (changing the last character \'c\' to \'a\'). In the second example, the string \'abcd\' can be modified to \'abba\' with two modifications (changing \'c\' to \'b\' and \'d\' to \'a\'). In the third example, the given string \'aaaaaa\' is already a palindrome, so no modifications are needed.","solution":"def min_modifications_to_palindrome(n, s): Returns the minimum number of modifications needed to turn the string s into a palindrome. Parameters: - n: int, the length of the string s - s: str, the input string consisting of lowercase Latin letters Returns: - int, minimum number of modifications modifications = 0 # Compare each character with its corresponding character from the end. for i in range(n // 2): if s[i] != s[n - i - 1]: modifications += 1 return modifications"},{"question":"Problem Statement Consider a list of N integers. You are asked to perform M operations of adding or removing a number from the list. After performing all operations, you need to quickly answer Q queries that ask for the K-th smallest number in the current list. Constraints - 1 ≤ N, M, Q ≤ 10^5 - 1 ≤ K ≤ current size of the list - 1 ≤ value of any number in the list ≤ 10^9 - The operations will be given in sequence and are either addition or removal of numbers present in the initial list. - If an operation tries to remove a number that doesn\'t exist, skip that operation. - Each query will ask for the K-th smallest number in the list after all operations are performed. Input Input follows the following format. All given numbers are integers. N M Q initial_list operation_1 ... operation_M query_1 ... query_Q Here, `initial_list` is a space-separated list of N integers. Each operation_i is either \\"ADD x\\" or \\"REMOVE x\\" with integer x. Each query_i is a single integer K. Output For each query, output the K-th smallest number in the list after all operations have been executed. Examples Input 5 3 2 1 5 3 3 2 ADD 4 REMOVE 3 ADD 6 1 3 Output 1 3 Input 4 2 1 7 10 15 20 ADD 8 REMOVE 20 2 Output 8 Input 3 4 3 1 2 3 REMOVE 4 ADD 5 ADD 7 REMOVE 3 1 2 3 Output 1 2 5","solution":"def kth_smallest_after_operations(initial_list, operations, queries): # Perform operations for op in operations: command, num = op.split() num = int(num) if command == \\"ADD\\": initial_list.append(num) elif command == \\"REMOVE\\" and num in initial_list: initial_list.remove(num) # Sorting the list after all operations are done initial_list.sort() # Answering queries result = [] for k in queries: result.append(initial_list[k-1]) return result"},{"question":"Given an array of integers, determine whether the array is monotonic or not. An array is considered monotonic if it is either entirely non-increasing or entirely non-decreasing. Write a function `is_monotonic` that takes a list of integers as input and returns `True` if the array is monotonic, and `False` otherwise. Constraints * 1 ≤ length of the array ≤ 1000 * -10^5 ≤ array elements ≤ 10^5 Input A list of integers. Output A boolean value `True` or `False`. Function Signature ```python def is_monotonic(arr: List[int]) -> bool: ``` Examples Input [1, 2, 2, 3] Output True Input [6, 5, 4, 4] Output True Input [1, 3, 2] Output False Input [1, 1, 1] Output True","solution":"from typing import List def is_monotonic(arr: List[int]) -> bool: Returns True if the array is monotonic (either non-increasing or non-decreasing), False otherwise. if not arr or len(arr) == 1: return True increasing = decreasing = True for i in range(1, len(arr)): if arr[i] > arr[i - 1]: decreasing = False if arr[i] < arr[i - 1]: increasing = False if not increasing and not decreasing: return False return True"},{"question":"You are given a string and a pattern. You need to write a function that finds all occurrences of anagrams of the pattern within the given string and returns their starting indices. An anagram is a rearrangement of the characters in the pattern. For example, \\"abc\\" is an anagram of \\"bca\\" and \\"cab\\". Input: - `s`: The input string (1 ≤ |s| ≤ 10^5) - `p`: The pattern (1 ≤ |p| ≤ 10^4) Output: - A list of starting indices of the anagrams of `p` in `s`. Example 1: Input: ``` s: \\"cbaebabacd\\" p: \\"abc\\" ``` Output: ``` [0, 6] ``` Example 2: Input: ``` s: \\"abab\\" p: \\"ab\\" ``` Output: ``` [0, 1, 2] ``` Explanation: - In Example 1, the substring with starting index 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring with starting index 6 is \\"bac\\", which is also an anagram of \\"abc\\". - In Example 2, the substrings with starting indices 0, 1, and 2 are \\"ab\\", \\"ba\\", and \\"ab\\", which are all anagrams of \\"ab\\".","solution":"def find_anagrams(s, p): from collections import Counter len_s = len(s) len_p = len(p) if len_p > len_s: return [] p_count = Counter(p) s_count = Counter(s[:len_p]) result = [] for i in range(len_s - len_p + 1): if i > 0: s_count[s[i - 1]] -= 1 if s_count[s[i - 1]] == 0: del s_count[s[i - 1]] s_count[s[i + len_p - 1]] += 1 if s_count == p_count: result.append(i) return result"},{"question":"Problem Alice is participating in a coding competition where she has to solve multiple problems. Each problem has a certain difficulty level represented by an integer. Alice decides to solve only the problems that have a difficulty level strictly higher than a given threshold. You need to help Alice by determining how many problems she will solve. Constraints The input satisfies the following conditions. * 1 leq n leq 1000 (the number of problems) * 1 leq difficulty_i leq 10000 (difficulty level of each problem) * 1 leq threshold leq 10000 (the threshold difficulty level) Input The input is given in the following format: n threshold problem_1 problem_2 ... problem_n The first line contains two integers n (the number of problems) and threshold (the threshold difficulty level), separated by a space. The next line contains n integers, where each integer represents the difficulty level of one problem. Output Output the number of problems Alice will decide to solve on one line. Examples Input 5 3000 2500 3200 1500 5000 4000 Output 3 Explanation Alice decides to solve the problems with difficulty levels 3200, 5000, and 4000, which are all strictly higher than the given threshold 3000. Thus, the output is 3.","solution":"def count_problems_to_solve(n, threshold, problems): Returns the count of problems with difficulty greater than the threshold. :param n: Number of problems :param threshold: Difficulty threshold :param problems: List of problem difficulty levels :return: Count of problems greater than the threshold return sum(1 for problem in problems if problem > threshold)"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains an integer value representing the energy in that cell. Your task is to find the optimal path from the top-left corner of the grid to the bottom-right corner, such that the sum of the energy values of the visited cells is maximized. You can only move either right or down from a cell, at each step. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, where the j-th integer in the i-th line represents the energy value of cell (i, j) (-1000 ≤ energy ≤ 1000). Output: Print a single integer — the maximum sum of the energy values along the optimal path from the top-left to the bottom-right corner. Examples: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Input: 2 3 -1 -2 -3 -4 -5 -6 Output: -12 Note: In the first example, the optimal path is 1→4→7→8→9, and the sum is 29. In the second example, the optimal path is -1→-2→-3→-6, and the sum is -12.","solution":"def max_energy_path(n, m, grid): Finds the maximum sum of the energy values along the optimal path from the top-left to the bottom-right corner of a grid. # Create a 2D dp array to store the maximum energy up to each cell dp = [[0] * m for _ in range(n)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the maximum energy path sum return dp[n - 1][m - 1]"},{"question":"You are developing a game called \\"Robo Races\\" where players need to construct racing robots from various components. Each robot is built using a combination of a body, a motor, and a sensor. Each component has a performance score which collectively determines the overall performance score of the robot. The body provides durability, the motor provides speed, and the sensor provides agility. The total performance score of a robot is the sum of the scores of its body, motor, and sensor components. Your task is to determine which combination of components yields the highest performance score, and output the names of the components in that combination. Input The input is a sequence of datasets, and each dataset is given in the following format: ``` N M P B1 BD1 B2 BD2 ... BN BDN M1 MS1 M2 MS2 ... MM MSM S1 SA1 S2 SA2 ... SP SAP ``` The first line contains three integers N, M, and P where N is the number of body components, M is the number of motor components, and P is the number of sensor components (1 ≤ N, M, P ≤ 50). The following N lines describe the body components available, each line contains the body name as a string of up to 20 characters and its durability score as an integer (1 ≤ BD ≤ 100). The next M lines describe the motor components available, each line contains the motor name as a string of up to 20 characters and its speed score as an integer (1 ≤ MS ≤ 100). The next P lines describe the sensor components available, each line contains the sensor name as a string of up to 20 characters and its agility score as an integer (1 ≤ SA ≤ 100). The end of the input is represented by a line containing only three zeros. Output For each dataset, output the names of the body, motor, and sensor components which together yield the highest performance score. If there are multiple combinations with the same highest performance score, output any one of them. After the output of each dataset, output one line consisting of only \\"#\\". Example Input ``` 3 2 3 body1 80 body2 60 body3 70 motor1 50 motor2 60 sensor1 40 sensor2 45 sensor3 55 2 3 2 frame1 75 frame2 85 engine1 45 engine2 50 engine3 55 eye1 35 eye2 40 3 3 3 shell1 90 shell2 85 shell3 80 turbo1 60 turbo2 50 turbo3 70 vision1 50 vision2 45 vision3 55 0 0 0 ``` Output ``` body1 motor2 sensor3 # frame2 engine3 eye2 # shell1 turbo3 vision3 #","solution":"def find_best_combination(datasets): results = [] for dataset in datasets: N, M, P, bodies, motors, sensors = dataset max_score = 0 best_combination = () for body in bodies: for motor in motors: for sensor in sensors: body_name, body_score = body motor_name, motor_score = motor sensor_name, sensor_score = sensor total_score = body_score + motor_score + sensor_score if total_score > max_score: max_score = total_score best_combination = (body_name, motor_name, sensor_name) results.append(\\" \\".join(best_combination)) results.append(\\"#\\") return results def parse_input(input_lines): datasets = [] while input_lines: header = list(map(int, input_lines.pop(0).split())) if header == [0, 0, 0]: break N, M, P = header bodies = [input_lines.pop(0).split() for _ in range(N)] motors = [input_lines.pop(0).split() for _ in range(M)] sensors = [input_lines.pop(0).split() for _ in range(P)] bodies = [(body[0], int(body[1])) for body in bodies] motors = [(motor[0], int(motor[1])) for motor in motors] sensors = [(sensor[0], int(sensor[1])) for sensor in sensors] datasets.append((N, M, P, bodies, motors, sensors)) return datasets def robo_races(input_lines): datasets = parse_input(input_lines) results = find_best_combination(datasets) return results"},{"question":"Ram loves to play with numbers. He recently learned about prime numbers and their interesting properties. Ram wants to test his understanding by solving a challenge. Rani, his friend, decided to help him by giving him an interesting problem to solve. Input: First line contains N and K, where N denotes the number of prime numbers that Ram knows and K denotes the number of queries Rani wants to ask Ram. The next line contains N space-separated prime numbers known to Ram. The next K lines contain two space-separated integers, L and R, denoting the range within which Rani wants Ram to count how many primes he knows. Output: For each query, output a single integer - the count of primes Ram knows that lies within the range [L, R] inclusive. Constraints: 1 ≤ N, K ≤ 100 1 ≤ All prime numbers ≤ 1000 1 ≤ L ≤ R ≤ 1000 SAMPLE INPUT 5 3 2 3 5 7 11 1 10 4 6 10 20 SAMPLE OUTPUT 4 1 1 Explanation For the query (1, 10), primes in the range are 2, 3, 5, 7. For the query (4, 6), the prime in the range is 5. For the query (10, 20), the prime in the range is 11.","solution":"def count_primes_in_range(prime_numbers, queries): This function takes a list of prime numbers and a list of queries. Each query contains a range [L, R], and the function returns a list of the counts of prime numbers within those ranges. results = [] for L, R in queries: count = sum(1 for prime in prime_numbers if L <= prime <= R) results.append(count) return results def parse_input(input_data): This function parses the input data into appropriate components. input_lines = input_data.strip().split(\'n\') N, K = map(int, input_lines[0].split()) prime_numbers = list(map(int, input_lines[1].split())) queries = [tuple(map(int, line.split())) for line in input_lines[2:]] return prime_numbers, queries def prime_count_problem(input_data): This function solves the prime count problem from the given input data. prime_numbers, queries = parse_input(input_data) return count_primes_in_range(prime_numbers, queries)"},{"question":"James is fascinated by a unique sorting algorithm called Void Sort, which sorts an array of integers. The algorithm operates by repeatedly erasing a sub-segment of the array. In each step, James can select a contiguous sub-segment of the array and remove it if and only if the sum of the sub-segment is zero. After the removal, the remaining parts of the array are concatenated. James wants to know if it is possible to use this algorithm to completely erase the array, leaving nothing behind. Your task is to determine if it is possible to completely erase the array using the Void Sort algorithm. # Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the array. - The second line contains n integers a_1, a_2, ..., a_n (-100 ≤ a_i ≤ 100), representing the elements of the array. # Output Output \\"YES\\" if it is possible to erase the array completely using the Void Sort algorithm, otherwise output \\"NO\\". # Sample Input 1 ``` 5 1 2 -3 3 -3 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 4 1 2 3 4 ``` # Sample Output 2 ``` NO ``` # Explanation In the first sample, it is possible to remove the segments [1, 2, -3] and [3, -3], resulting in an empty array. Therefore, the output is \\"YES\\". In the second sample, there is no segment whose sum is zero, so it is impossible to use the Void Sort algorithm to completely erase the array. Therefore, the output is \\"NO\\".","solution":"def is_completely_erasable(n, arr): Determine if it is possible to completely erase the array using the Void Sort algorithm. prefix_sum = {0} current_sum = 0 for num in arr: current_sum += num if current_sum in prefix_sum: current_sum = 0 prefix_sum = {0} else: prefix_sum.add(current_sum) return current_sum == 0"},{"question":"You are organizing a multi-level tournament with n participants. Each participant has a unique skill level represented by an integer. The tournament follows these rules: 1. Each round, you pair participants and they compete against each other. 2. If the number of participants in a round is odd, one participant advances to the next round without competing. 3. A participant can only advance to the next round if their skill level is strictly greater than the participant they competed against. 4. The goal is to determine the maximum number of rounds that the tournament can have before there is a winner. Given the list of participants\' skill levels, calculate the maximum number of rounds possible. Input The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5), denoting the number of participants. The next line contains n integers s_i (1 ≤ s_i ≤ 10^9), denoting the skill levels of each participant. Output Print the maximum number of rounds the tournament can have. Examples Input 5 3 5 2 4 1 Output 2 Input 4 10 20 30 40 Output 2 Input 3 8 3 5 Output 1 Note In the first example, after the first round, participants with skills [5, 4] advance. After the second round, participants with skill [5] advances, so the maximum rounds are 2. In the second example, after the first round, participants with skills [20, 30] advance. After the second round, participants with skill [30] advances, so the maximum rounds are 2. In the third example, after the first round, participants with skill [8] advances, so the maximum rounds are 1.","solution":"def max_tournament_rounds(n, skill_levels): Function to calculate the maximum number of rounds in a tournament. Parameters: n (int): Number of participants skill_levels (list): List of skill levels of participants Returns: int: Maximum number of rounds possible skill_levels.sort(reverse=True) rounds = 0 while len(skill_levels) > 1: skill_levels = skill_levels[:len(skill_levels)//2] rounds += 1 return rounds"},{"question":"You are given a circular array C of length n. You need to find the length of the longest subarray (of consecutive elements) which contains exactly k distinct integers. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 10^5) — the length of the array and the number of distinct integers, respectively. The second line contains n integers C1, C2, ..., Cn (1 ≤ Ci ≤ 10^9) — the elements of the array. Output Print a single integer — the length of the longest subarray with exactly k distinct integers. Examples Input 6 2 1 2 1 2 3 4 Output 4 Input 5 3 1 2 1 2 3 Output 5 Note A circular array means that the array wraps around. Hence, if you consider the array to be [1, 2, 3, 4] and n = 4, the element next to 4 would be 1.","solution":"from collections import defaultdict def longest_subarray_with_k_distinct(arr, n, k): This function returns the length of the longest subarray with exactly k distinct integers in a circular array of length n. :param arr: List[int], the elements of the array. :param n: int, length of the array. :param k: int, the number of distinct integers required in the subarray. :return: int, the length of the longest subarray with exactly k distinct integers. def count_distinct_window(arr, left, right): count_map = defaultdict(int) for i in range(left, right + 1): count_map[arr[i]] += 1 return len(count_map) max_len = 0 for i in range(n): count_map = defaultdict(int) distinct_count = 0 current_len = 0 j = i while current_len < n: if count_map[arr[j]] == 0: distinct_count += 1 count_map[arr[j]] += 1 if distinct_count == k: max_len = max(max_len, current_len + 1) if distinct_count > k: break j = (j + 1) % n current_len += 1 return max_len # Example Inputs print(longest_subarray_with_k_distinct([1, 2, 1, 2, 3, 4], 6, 2)) # Output: 4 print(longest_subarray_with_k_distinct([1, 2, 1, 2, 3], 5, 3)) # Output: 5"},{"question":"Given a string of parentheses, Chef wants to find the minimum number of parentheses to add to make the string valid. A string is considered valid if it is an empty string, contains a valid substring, or can be written as (A) or AB, where A and B are also valid strings. Input The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains a string S of parentheses for that test case. Output For each test case, output a single line containing the minimum number of parentheses required to make the string valid. Constraints 1 ≤ T ≤ 5000 1 ≤ |S| ≤ 1000 Example Input: 2 ()) (( Output: 1 2 Explanation First Example: Adding one \'(\' at the beginning makes the string valid: \'(())\'. Second Example: Adding two \')\' at the end makes the string valid: \'(())\'.","solution":"def min_parentheses_to_add(T, cases): Return the minimum number of parentheses to add to make each given string valid. T : int : the number of test cases cases : list : list of strings containing parentheses returns : list : list of integers with the minimum number of parentheses to add for each case results = [] for S in cases: balance = 0 additions = 0 for char in S: if char == \'(\': balance += 1 else: balance -= 1 # If balance is negative, we need an extra \'(\' if balance < 0: additions += 1 balance = 0 # balance now tells us how many more \')\' we need results.append(additions + balance) return results"},{"question":"A biologist is studying the migration patterns of a certain species of birds. The migration can be described using a string where each character represents the direction of a flight on a particular day. The biologist has observed that the birds either fly \'N\'orth, \'S\'outh, \'E\'ast, or \'W\'est. The biologist wants to know if the migration pattern forms a loop. A loop is formed if at the end of the migration, the bird ends up back at its starting point. Write a function that determines if the given migration pattern forms a loop. # Input The input consists of a single string s (1 ≤ |s| ≤ 10^5), where each character in the string is either \'N\', \'S\', \'E\', or \'W\'. # Output Output \\"YES\\" if the migration pattern forms a loop, otherwise output \\"NO\\". # Examples Input ``` NSEW ``` Output ``` YES ``` Input ``` NNSS ``` Output ``` YES ``` Input ``` NNEESS ``` Output ``` NO ``` # Note In the first example, the bird flies North, then South, East, and finally West, returning to the original point. In the second example, the bird flies North twice, then South twice, returning to the original point. In the third example, the bird does not return to the original point at the end of the migration.","solution":"def is_migration_loop(s): Determines if the migration pattern forms a loop. :param s: string representing migration pattern :return: \\"YES\\" if the migration pattern forms a loop, otherwise \\"NO\\" north_south_count = s.count(\'N\') - s.count(\'S\') east_west_count = s.count(\'E\') - s.count(\'W\') if north_south_count == 0 and east_west_count == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers A = {a_0, a_1, ..., a_{n-1}} and a single integer x, find the number of subarrays whose sum is exactly x. A subarray is defined as a continuous segment of the array. Constraints * 1 leq n leq 200,000 * -10^9 leq a_i leq 10^9 * -10^9 leq x leq 10^9 Input The input is given in the following format. n ; x a_0 ; a_1 ; ... ; a_{n-1} The first line contains two integers n and x, the size of the array and the target sum respectively. The second line contains n integers representing the elements of the array. Output Print the number of subarrays whose sum is exactly x. Example Input 5 5 1 2 3 4 5 Output 2 Explanation: The subarrays with sum equal to 5 are: - [2, 3] - [5]","solution":"from collections import defaultdict def count_subarrays_with_sum_x(n, x, a): Counts the number of subarrays whose sum is exactly x. Parameters: n (int): The number of elements in the array. x (int): The target sum for the subarrays. a (list of int): The list of integers representing the array. Returns: int: Number of subarrays with sum exactly x. prefix_sum_count = defaultdict(int) prefix_sum = 0 count = 0 for num in a: prefix_sum += num # If the current prefix sum is equal to x if prefix_sum == x: count += 1 # If there is a prefix sum that is `prefix_sum - x`, then there exist some subarrays ending at current index with sum x if (prefix_sum - x) in prefix_sum_count: count += prefix_sum_count[prefix_sum - x] # Increase the count of the prefix sum prefix_sum_count[prefix_sum] += 1 return count"},{"question":"You are given an array of integers that is almost sorted in non-decreasing order. An array is considered almost sorted if it is possible to make the array sorted by changing at most one element to any value. Write a function that takes an array of integers and returns `True` if it is almost sorted, otherwise returns `False`. # Function Signature ```python def is_almost_sorted(arr: List[int]) -> bool: ``` # Input - A list of integers `arr` (1 ≤ len(arr) ≤ 1000, -10⁵ ≤ arr[i] ≤ 10⁵). # Output - Return `True` if the array can be made non-decreasing by changing at most one element, otherwise return `False`. # Examples ```python assert is_almost_sorted([10, 5, 7]) == True assert is_almost_sorted([10, 5, 1]) == False assert is_almost_sorted([1, 3, 5, 3, 4]) == True assert is_almost_sorted([1, 3, 5, 2, 6, 7]) == True assert is_almost_sorted([1, 3, 5, 7, 9]) == True ``` # Explanation - In the first example, you can change 10 to 6 to make it sorted as [6, 5, 7]. - In the second example, you can\'t change only one number to make it sorted. - In the third example, you can change the last 5 to 4 to make it sorted as [1, 3, 4, 3, 4]. - In the fourth example, you can change the 2 to 4 to make it sorted as [1, 3, 4, 4, 6, 7]. # Notes - An empty array or an array with one element is considered to be sorted. - This function should efficiently handle input size up to 1000.","solution":"def is_almost_sorted(arr): Determines whether the array is almost sorted. def can_be_sorted_with_one_change(arr): Checks if the array can be made non-decreasing by modifying one element. count = 0 # Count of elements to be adjusted for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: count += 1 if count > 1: return False # We try to correct the anomaly by changing arr[i] or arr[i + 1] if i > 0 and arr[i - 1] > arr[i + 1]: arr[i + 1] = arr[i] else: arr[i] = arr[i + 1] return True if can_be_sorted_with_one_change(arr[:]): return True return False"},{"question":"You are given a grid with M rows and N columns. Each cell in the grid contains an integer value. You need to check if it\'s possible to traverse from the top left corner of the grid (cell (1, 1)) to the bottom right corner (cell (M, N)) by only moving right or down, such that the sum of the values of the cells you visit is even. Input The input is given in the following format: M N r1,1 r1,2 ... r1,N r2,1 r2,2 ... r2,N : rM,1 rM,2 ... rM,N The first line provides the number of rows (M) and columns (N) of the grid (2 ≤ M, N ≤ 1000). Each of the subsequent M lines provides an array of N integers ri,j corresponding to the value in the cell at the i-th row and j-th column (0 ≤ ri,j ≤ 10000). Output Output \\"possible\\" if the goal is achievable and \\"impossible\\" otherwise. Examples Input 3 3 1 2 1 1 2 1 1 1 2 Output possible Input 2 2 1 1 1 1 Output impossible","solution":"def is_traversable_with_even_sum(M, N, grid): Determines if there is a path from the top left to bottom right of the grid with only right and down moves such that the sum of the values along the path is even. Parameters: M (int): Number of rows. N (int): Number of columns. grid (list of list of int): 2D list representing the grid\'s cell values. Returns: str: \\"possible\\" if such a path exists, \\"impossible\\" otherwise. from collections import deque # Direction vectors for moving right and down direction = [(0, 1), (1, 0)] # Queue to hold the current position and accumulated sum q = deque([(0, 0, grid[0][0])]) # Set to keep track of visited positions and their corresponding even/odd sums visited = set() visited.add((0, 0, grid[0][0] % 2)) while q: x, y, curr_sum = q.popleft() # Check if we\'ve reached the bottom right corner if x == M - 1 and y == N - 1: if curr_sum % 2 == 0: return \\"possible\\" # Explore the possible moves (right and down) for dx, dy in direction: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N: new_sum = curr_sum + grid[nx][ny] if (nx, ny, new_sum % 2) not in visited: visited.add((nx, ny, new_sum % 2)) q.append((nx, ny, new_sum)) return \\"impossible\\" # Read input def process_input(): import sys input = sys.stdin.read data = input().strip().split() M = int(data[0]) N = int(data[1]) grid = [] index = 2 for i in range(M): row = list(map(int, data[index:index + N])) grid.append(row) index += N return M, N, grid # Main Execution if __name__ == \\"__main__\\": M, N, grid = process_input() print(is_traversable_with_even_sum(M, N, grid))"},{"question":"Sarah is a data management expert and works with large datasets regularly. She often encounters datasets that contain repeated patterns and she needs to compress them efficiently. One popular method she uses is Run-Length Encoding (RLE). RLE encodes a sequence of repeated elements by storing the element and its count of consecutive occurrences. For example, the sequence `aaabbccccd` would be encoded as `a3b2c4d1`. However, Sarah often gets very large strings and needs to write a program to help her compress these strings using RLE. Write a function that receives a string and returns its Run-Length Encoding. # Function Signature ```python def run_length_encoding(s: str) -> str: ``` # Input - `s` (1 ≤ |s| ≤ 10^6): A string consisting of lowercase Latin letters. # Output - Return the RLE of the string `s`. # Examples Example 1 ```python run_length_encoding(\\"aaabbccccd\\") ``` **Output:** ``` \\"a3b2c4d1\\" ``` Example 2 ```python run_length_encoding(\\"abcd\\") ``` **Output:** ``` \\"a1b1c1d1\\" ``` Example 3 ```python run_length_encoding(\\"aabaaaa\\") ``` **Output:** ``` \\"a2b1a4\\" ``` Note: 1. The input string can have diverse patterns, ranging from no repeats (e.g., `abcd`) to strings where an entire sequence is repeated (e.g., `aaaaa`). 2. Ensure your implementation handles large input sizes efficiently.","solution":"def run_length_encoding(s: str) -> str: Returns the Run-Length Encoding (RLE) of the input string s. if not s: return \\"\\" encoded_string = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded_string.append(f\\"{current_char}{count}\\") current_char = char count = 1 encoded_string.append(f\\"{current_char}{count}\\") return \\"\\".join(encoded_string) # Example usage print(run_length_encoding(\\"aaabbccccd\\")) # Expected output: \\"a3b2c4d1\\""},{"question":"You are given a string s consisting of lowercase English letters. You want to know the length of the longest palindrome that can be generated by reordering the characters in the string. Input The input contains a single line containing a string s (1 ≤ |s| ≤ 10^5). Output Print a single integer indicating the length of the longest palindrome that can be formed with the characters in the given string. Example Input abccccdd Output 7 Explanation One possible palindrome is \'dccaccd\', which has a length of 7.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed with the characters in the string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are given a list of N integers and a target integer T. Your goal is to determine whether any combination of the numbers in the list can be summed to exactly equal T. You may use each number in the list multiple times if necessary. If it is possible to achieve the target sum T, print \\"Yes\\". Otherwise, print \\"No\\". Input format: The first line contains two space-separated integers N and T. The second line contains N space-separated integers representing the numbers in the list. Output format: Output a single string, either \\"Yes\\" or \\"No\\". Constraints: 1 ≤ N ≤ 100 1 ≤ T ≤ 1000 0 ≤ list[i] ≤ 100 SAMPLE INPUT 4 7 2 3 5 10 SAMPLE OUTPUT Yes","solution":"def can_sum_to_target(n, t, nums): dp = [False] * (t + 1) dp[0] = True for i in range(1, t + 1): for num in nums: if i - num >= 0 and dp[i - num]: dp[i] = True break return \\"Yes\\" if dp[t] else \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) t = int(data[1]) nums = list(map(int, data[2:n+2])) print(can_sum_to_target(n, t, nums))"},{"question":"A large company wants to optimize its operations by utilizing a company-wide event management system. The system should be capable of managing a wide variety of events, including meetings, product launches, team-building activities, and remote work sessions. Each event has a specified start and end time, and no two events should overlap for a given department. Your job is to help the company figure out the maximum number of non-overlapping events that can be held for a specific department in a single day. Given a list of events with their start and end times, you need to determine this maximum number. For example, given the following events for a particular department: - Event A: (9:00, 10:30) - Event B: (10:00, 11:00) - Event C: (10:30, 12:00) - Event D: (13:00, 14:00) - Event E: (11:30, 12:30) The events that can be scheduled without any overlap are: - Event A (9:00, 10:30) - Event C (10:30, 12:00) - Event D (13:00, 14:00) Thus, the maximum number of non-overlapping events is 3. Input The input consists of a number of datasets. Each dataset consists of multiple lines. The first line of the dataset contains an integer n, which represents the number of events (1 ≤ n ≤ 1000). The following n lines describe each event with its start and end time in 24-hour format (HH:MM HH:MM). The end of the input is indicated by a line containing a single zero. Output For each dataset, output a single integer: the maximum number of non-overlapping events that can be scheduled. Example Input 5 09:00 10:30 10:00 11:00 10:30 12:00 13:00 14:00 11:30 12:30 4 09:00 11:00 11:00 12:00 09:30 10:30 10:30 13:00 6 09:00 09:30 09:15 10:00 09:30 10:30 10:00 11:00 10:00 11:30 11:00 12:30 0 Output 3 2 3","solution":"def parse_time(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def max_non_overlapping_events(events): # Sort events by their end times events.sort(key=lambda x: x[1]) end_time = 0 count = 0 for start, end in events: if start >= end_time: end_time = end count += 1 return count def process_input(input_data): input_lines = input_data.strip().split(\'n\') idx = 0 results = [] while idx < len(input_lines): n = int(input_lines[idx]) if n == 0: break idx += 1 events = [] for _ in range(n): start_time, end_time = input_lines[idx].split() events.append((parse_time(start_time), parse_time(end_time))) idx += 1 results.append(max_non_overlapping_events(events)) return results"},{"question":"You are working for Fireworks Organization Inc., which is planning a massive fireworks display on New Year\'s Eve. The fireworks will be launched from platforms arranged in a large grid. Each platform will launch a firework that explodes at a certain height and is visible from afar. Your task is to determine the maximum number of fireworks visible when there is no view obstruction from one firework to another. In the grid of platforms, each firework has a height, and you need to make sure no two fireworks obstruct each other\'s view if they are aligned vertically, horizontally, or diagonally. Specifically, if one firework is of greater or equal height compared to another firework in those directions, it will obstruct the view. Write a program to find the maximum number of non-obstructed fireworks visible from an aerial view. Input The input consists of multiple datasets. Each dataset is formatted as follows: N H11 H12 H13 ... H1N H21 H22 H23 ... H2N ... HN1 HN2 HN3 ... HNN Here, N is a positive integer that indicates the size of the grid (N ≤ 15), and Hxy represents the height of the firework located at grid position (x, y) (1 ≤ Hxy ≤ 100). The input is terminated by a dataset of N = 0 and should not be processed. Output For each dataset, output the maximum number of non-obstructed fireworks visible. Example Input 3 3 1 4 1 5 9 2 6 5 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 0 Output 5 16","solution":"def max_visible_fireworks(grid): N = len(grid) directions = [(1, 0), (0, 1), (1, 1), (-1, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < N def dfs(x, y, visited): if (x, y) in visited: return visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy while is_valid(nx, ny) and grid[nx][ny] < grid[x][y]: dfs(nx, ny, visited) nx, ny = nx + dx, ny + dy visited = set() max_fireworks = 0 for i in range(N): for j in range(N): if (i, j) not in visited: dfs(i, j, visited) max_fireworks += 1 return max_fireworks def process_input(input_data): results = [] i = 0 while i < len(input_data): N = int(input_data[i]) if N == 0: break grid = [] for j in range(1, N+1): row = list(map(int, input_data[i+j].split())) grid.append(row) results.append(max_visible_fireworks(grid)) i += N + 1 return results # Reading multiple datasets from input def fireworks_organization(input_data): input_data = input_data.strip().split(\'n\') results = process_input(input_data) for result in results: print(result)"},{"question":"Write a Python script that accepts a directory path as an argument and generates a JSON file containing the following information for each file in the directory: 1. The file name 2. The size of the file in bytes 3. The creation time of the file in UNIX timestamp format 4. The last access time of the file in UNIX timestamp format 5. The last modification time of the file in UNIX timestamp format The script should save the JSON file in the given directory with the name `directory_summary.json`. Input constraint: The directory will contain less than 1000 files. Output: Save the output JSON file inside the given directory. Explanation: In the given sample input/output: Sample directory: `/home/dir1` Assume `/home/dir1` contains the following two files: - file1.txt (size: 100 bytes, created: 1609459200, accessed: 1609459201, modified: 1609459202) - file2.txt (size: 200 bytes, created: 1609459203, accessed: 1609459204, modified: 1609459205) Sample JSON output inside `/home/dir1/directory_summary.json`: ```json { \\"files\\": [ { \\"name\\": \\"file1.txt\\", \\"size\\": 100, \\"creation_time\\": 1609459200, \\"last_access_time\\": 1609459201, \\"last_modification_time\\": 1609459202 }, { \\"name\\": \\"file2.txt\\", \\"size\\": 200, \\"creation_time\\": 1609459203, \\"last_access_time\\": 1609459204, \\"last_modification_time\\": 1609459205 } ] } ```","solution":"import os import json import time from typing import List, Dict def get_file_info(directory: str) -> List[Dict]: file_info_list = [] for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): file_stats = os.stat(file_path) file_info = { \\"name\\": filename, \\"size\\": file_stats.st_size, \\"creation_time\\": file_stats.st_ctime, \\"last_access_time\\": file_stats.st_atime, \\"last_modification_time\\": file_stats.st_mtime, } file_info_list.append(file_info) return file_info_list def generate_directory_summary(directory: str): file_info_list = get_file_info(directory) summary = {\\"files\\": file_info_list} summary_path = os.path.join(directory, \\"directory_summary.json\\") with open(summary_path, \'w\') as summary_file: json.dump(summary, summary_file, indent=4) # Example Usage: # generate_directory_summary(\'/path/to/your/directory\')"},{"question":"Robert enjoys collecting unique stamps and wants to organize them. Each stamp has a unique serial number and color. Robert wants to color-sort his stamps in such a way that all stamps of the same color come together. Stamps of the same color should be in ascending order of their serial numbers. Write a function that takes a list of stamps where each stamp is represented as a tuple containing a serial number and a color, and returns the list of stamps sorted by color first and then by serial number. For example, if Robert\'s collection is [(5, \'red\'), (3, \'blue\'), (1, \'red\'), (4, \'blue\'), (2, \'red\')], after sorting, it should be [(3, \'blue\'), (4, \'blue\'), (1, \'red\'), (2, \'red\'), (5, \'red\')]. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the number of stamps. - Each of the following n lines contains a serial number and a color separated by a space. Output - Output the sorted list of stamps by color and serial number. Example Input 5 5 red 3 blue 1 red 4 blue 2 red Output 3 blue 4 blue 1 red 2 red 5 red Note In the first example, we first sort by color where \'blue\' comes before \'red\', and within each color group we sort by serial number to get the final sorted list.","solution":"def sort_stamps_by_color_and_serial(stamps): Sorts a list of stamps by color and then by serial number. Parameters: stamps (list of tuple): A list of tuples where each tuple contains a serial number and a color. Returns: list of tuple: Sorted list of stamps by color and serial number. stamps.sort(key=lambda stamp: (stamp[1], stamp[0])) return stamps"},{"question":"In a dense forest, there lives a species of birds that are known for their unique chirping patterns. Each bird can sing a sequence of chirps represented as a string of characters, consisting of lowercase English letters. To understand the communication between these birds, ornithologist Dr. Foster needs to find out the length of the longest common subsequence (LCS) between the chirping patterns of two specific birds. Input The input consists of two lines: - The first line contains a string a (1 ≤ |a| ≤ 2000), representing the chirping pattern of the first bird. - The second line contains a string b (1 ≤ |b| ≤ 2000), representing the chirping pattern of the second bird. Output Print a single integer — the length of the longest common subsequence of strings a and b. Example Input abcde ace Output 3 Note In the sample testcase, the longest common subsequence of \\"abcde\\" and \\"ace\\" is \\"ace\\", which has a length of 3. Explanation A common subsequence is a sequence that appears in both strings in the same order, but not necessarily consecutively. Here, \\"ace\\" is a subsequence of both \\"abcde\\" and \\"ace\\", and it is the longest one possible.","solution":"def longest_common_subsequence(a, b): Returns the length of the longest common subsequence between strings a and b. n, m = len(a), len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"In a faraway land, there is a kingdom with a city represented as a grid with `N` rows and `M` columns. Each cell in the grid is an intersection, at some intersections, there are obstacles that block movement. You are positioned at the top-left corner of the grid and want to reach the bottom-right corner. You can only move to the right or down from your current position. Your task is to determine the number of unique paths from the top-left to the bottom-right of the grid, avoiding obstacles. If there is no valid path, return `0`. Input Format - First line contains two integers `N` and `M` denoting the number of rows and columns in the grid. - Next `N` lines contain `M` space-separated integers each (0 or 1), representing the grid. A `0` indicates an open cell, and a `1` indicates an obstacle. Output Format - Output a single integer representing the number of unique paths from the top-left to the bottom-right of the grid. Constraints - 1 ≤ N, M ≤ 100 - The values in the grid will be either `0` or `1`. Sample Input ``` 3 4 0 0 0 0 0 1 0 0 0 0 0 0 ``` Sample Output ``` 4 ``` Explanation The grid looks like this: ``` 0 0 0 0 0 1 0 0 0 0 0 0 ``` There are four unique paths: 1. Right, Right, Right, Down, Down 2. Right, Right, Down, Right, Down 3. Right, Down, Right, Right, Down 4. Down, Right, Right, Down, Right Note that paths cannot pass through the obstacle located at position (1, 1).","solution":"def unique_paths_with_obstacles(grid): Given a grid with obstacles, return the number of unique paths from top-left to bottom-right. :param grid: List[List[int]]: The grid with 0 as open cell and 1 as an obstacle. :return: int: Number of unique paths. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = 1 - grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] * (1 - grid[i][0]) for j in range(1, M): dp[0][j] = dp[0][j-1] * (1 - grid[0][j]) for i in range(1, N): for j in range(1, M): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[-1][-1]"},{"question":"You are a server administrator tasked with managing a single server that processes API requests. Each request has a start time, a duration, and consumes a certain number of resources. The server can handle up to a certain number of resources simultaneously. If a request starts at a time when the server does not have enough available resources to handle it, that request is denied. You need to process a series of API requests and determine how many of them are successfully completed and how many are denied. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. For each test case, the first line contains two integers n (1 ≤ n ≤ 10000) — the number of requests and maxResources (1 ≤ maxResources ≤ 10000) — the maximum number of resources the server can handle at any given time. The next n lines describe the requests. Each line contains three integers start_i (1 ≤ start_i ≤ 10^9), duration_i (1 ≤ duration_i ≤ 10^9) and resources_i (1 ≤ resources_i ≤ maxResources) — the start time, duration, and resource consumption of the i-th request. The requests are ordered by their start time, that is, start_i < start_{i + 1} for all 1 ≤ i < n. Output For each test case, output two integers: the number of successfully completed requests and the number of denied requests. Example Input 2 3 10 1 5 4 2 2 6 6 3 5 2 8 1 4 5 5 6 6 Output 2 1 1 1 Note In the first test case, the first request is successfully completed because there are enough available resources (0 at the start, and goes up to 4 during its processing). The second request overlaps with the first one and tries to use 6 resources, which would require 10 total resources and is also successfully completed because it doesn’t exceed the limit. The third request starts when the first request is finished, but there are only 4 resources left due to overlap with the second request so it is denied. In the second test case, the first request is successfully completed because there are enough resources. The second request tries to start while the first one is still processing thus it is denied due to inadequate resources.","solution":"def process_requests(t, test_cases): results = [] for case in test_cases: n, max_resources = case[\'server_info\'] requests = case[\'requests\'] successful_requests = 0 denied_requests = 0 current_resources = [0] * (max_resources + 1) for start, duration, resources in requests: end = start + duration available_resources = max_resources for time in range(start, end): available_resources -= current_resources[time % len(current_resources)] if available_resources >= resources: successful_requests += 1 for time in range(start, end): current_resources[time % len(current_resources)] += resources else: denied_requests += 1 results.append((successful_requests, denied_requests)) return results"},{"question":"The \\"Railway Department\\" has a network of n cities connected by m railway tracks. Each railway track connects two distinct cities and has a certain travel cost. The travel cost between cities can vary depending on the railway track. The Railway Department is planning to hold a major event in one of the cities, and they want to ensure that it is accessible from every other city with minimal travel costs. Thus, they need to determine the city that should host the event, which will have the minimum maximum travel cost from all other cities. Given the cities and the railway tracks, determine the optimal city to host the event. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ n*(n-1)/2) — the number of cities and the number of railway tracks. The following m lines each contain three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000) — representing a railway track connecting city u and city v with a travel cost c. It is guaranteed that there will be at most one railway track between any pair of cities. Output Print a single integer — the number of the city that should host the event. If there are multiple cities with the same minimum maximum travel cost, print the smallest-numbered city. Examples Input 4 4 1 2 4 2 3 1 3 4 2 4 1 5 Output 2 Input 3 3 1 2 3 2 3 1 1 3 2 Output 3 Note In the first sample, cities 1, 2, 3, and 4 are connected. Hosting the event in city 2 minimizes the maximum travel cost to any other city, which is 4. In the second sample, hosting the event in city 3 ensures the minimum maximum travel cost of 2 is from city 1.","solution":"import heapq import sys def dijkstra(graph, start, n): Performs Dijkstra\'s algorithm to find the shortest paths from start to all other nodes. distances = [sys.maxsize] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_optimal_city(n, m, tracks): # Create the graph graph = [[] for _ in range(n + 1)] for u, v, c in tracks: graph[u].append((v, c)) graph[v].append((u, c)) min_max_distance = sys.maxsize optimal_city = -1 # Find the city with the minimum maximum travel cost to any other city using Dijkstra for each city for i in range(1, n + 1): distances = dijkstra(graph, i, n) max_distance = max(distances[1:]) if max_distance < min_max_distance: min_max_distance = max_distance optimal_city = i elif max_distance == min_max_distance and i < optimal_city: optimal_city = i return int(optimal_city) # Sample usage of the function (you can comment out or remove this for unit test purposes) if __name__ == \\"__main__\\": n = 4 m = 4 tracks = [ (1, 2, 4), (2, 3, 1), (3, 4, 2), (4, 1, 5) ] print(find_optimal_city(n, m, tracks)) # Output should be 2"},{"question":"A software company wants to design a new type of lock system for their office doors. The lock system relies on a combination entered on a keypad. The combination consists of n digits, where each digit is between 1 and 9 inclusive. For added security, each digit can only appear once in the combination. To generate a valid combination, follow these rules: 1. The combination should have exactly n digits. 2. Each digit from 1 to n must appear exactly once. 3. The combination should be lexicographically smallest. Write a function that generates the lexicographically smallest valid combination given n. Input: A single integer n (1 ≤ n ≤ 9) denoting the length of the combination. Output: A single line containing the lexicographically smallest valid combination as a string of n digits. Example 1: Input: 3 Output: 123 Example 2: Input: 5 Output: 12345 Note: In the first example, the lexicographically smallest combination of 3 digits is \\"123\\". In the second example, the lexicographically smallest combination of 5 digits is \\"12345\\". Function Signature: ```python def smallest_combination(n: int) -> str: pass ```","solution":"def smallest_combination(n: int) -> str: Returns the lexicographically smallest combination of n digits where each digit from 1 to n appears exactly once. return \'\'.join(str(i) for i in range(1, n+1))"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has an initial integer value. Your task is to answer `q` queries. Each query can be one of the following two types: 1. Update the value of node `u` to a new value `x`. 2. Calculate the sum of values of all nodes in the connected component containing node `v`. # Input - The first line of input contains three integers `n`, `m`, and `q` (1 ≤ n, m, q ≤ 100,000) — the number of nodes, the number of edges, and the number of queries, respectively. - The second line contains `n` integers, where the i-th integer is the initial value of the i-th node. - The following `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is an edge between node `u` and node `v`. - The next `q` lines describe the queries. Each query is in one of the two following formats: - `1 u x` (1 ≤ u ≤ n, -10^9 ≤ x ≤ 10^9): Update the value of node `u` to `x`. - `2 v` (1 ≤ v ≤ n): Output the sum of the values of all nodes in the connected component containing node `v`. # Output For each query of the second type, output a single integer: the sum of the values of all nodes in the connected component containing the specified node. # Example Input ``` 5 3 5 1 2 3 4 5 1 2 1 3 4 5 2 1 1 1 10 2 1 1 5 6 2 4 2 5 ``` Output ``` 6 14 6 6 ``` - **Explanation:** - Initially, the nodes have values `[1, 2, 3, 4, 5]`. There are edges between nodes `1-2`, `1-3`, and `4-5`. - The connected components are `{1, 2, 3}` and `{4, 5}`. - The first query asks for the sum in the component containing node 1, which is `1 + 2 + 3 = 6`. - The second query updates the value of node 1 to 10. - The third query again queries the sum in the component containing node 1, now `10 + 2 + 3 = 15`. - The fourth query updates the value of node 5 to 6. - The fifth query asks for the sum in the component containing node 4, which is `4 + 6 = 10`. - The sixth query again asks for the sum in the component containing node 5, which is still `4 + 6 = 10`. # Note - Ensure that your solution efficiently handles the large input sizes. - Consider using disjoint-set (union-find) structure to manage connected components dynamically.","solution":"class DisjointSet: def __init__(self, n, values): self.parent = list(range(n)) self.rank = [0] * n self.values = values self.component_sum = values[:] # Store the sum of each component def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u self.component_sum[root_u] += self.component_sum[root_v] elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v self.component_sum[root_v] += self.component_sum[root_u] else: self.parent[root_v] = root_u self.component_sum[root_u] += self.component_sum[root_v] self.rank[root_u] += 1 def update_value(self, u, x): root_u = self.find(u) self.component_sum[root_u] += x - self.values[u] self.values[u] = x def get_component_sum(self, u): return self.component_sum[self.find(u)] def process_graph(n, m, q, node_values, edges, queries): ds = DisjointSet(n, node_values) for u, v in edges: ds.union(u - 1, v - 1) results = [] for query in queries: if query[0] == 1: _, u, x = query ds.update_value(u - 1, x) elif query[0] == 2: _, v = query results.append(ds.get_component_sum(v - 1)) return results"},{"question":"Write a program which reads a string and checks if it is a palindrome. Input The input consists of multiple datasets. For each dataset, a single string s is given in a line. The length of s does not exceed 500 characters. The input ends with a line including a single word \\"END\\". Your program should not process this terminal symbol. Output For each dataset, print \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. A string is considered a palindrome if it reads the same forward and backward, ignoring case, spaces, and punctuation. Example Input A man, a plan, a canal, Panama Hello, World! 12321 END Output YES NO YES","solution":"def is_palindrome(s): Check if the string s is a palindrome, ignoring case, spaces, and punctuation. # Filter out non-alphanumeric characters and convert to lowercase. filtered_chars = \'\'.join(c for c in s if c.isalnum()).lower() # Check if the string reads the same forward and backward. return filtered_chars == filtered_chars[::-1] def process_input(lines): results = [] for line in lines: if line == \\"END\\": break if is_palindrome(line): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a collection of text strings. For each text string, determine whether it is a palindrome or not. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward, ignoring case, spaces, and punctuation. Input The first line contains a single positive integer, n (1 ≤ n ≤ 105), showing how many text strings are in the collection. Each of the next n lines contains one text string, where each string consists of at most 100 characters and may include alphabetic characters, numbers, spaces, and punctuation. Output Print n lines: the i-th line should contain \\"YES\\" (without the quotes) if the i-th text string is a palindrome, and \\"NO\\" (without the quotes) if it is not. Examples Input 3 A man a plan a canal Panama Hello, World! Was it a car or a cat I saw? Output YES NO YES Note The first string \\"A man a plan a canal Panama\\" is a palindrome when ignoring spaces and punctuation and considering case insensitivity. The second string \\"Hello, World!\\" is not a palindrome. The third string \\"Was it a car or a cat I saw?\\" is a palindrome under the same criteria.","solution":"import re def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, otherwise returns \'NO\'. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome return \\"YES\\" if cleaned == cleaned[::-1] else \\"NO\\" def check_palindromes(n, strings): Check each of the n strings to determine if they are palindromes. results = [] for string in strings: results.append(is_palindrome(string)) return results"},{"question":"You are given a sequence of parentheses. Your task is to determine the minimum number of parentheses you need to add to make the sequence valid. A sequence of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and the pairs are properly nested. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a sequence of parentheses. Output For each test case, output a single line containing the minimal number of parentheses required to make the sequence valid. Constraints 1 ≤ T ≤ 10^3 1 ≤ Length of each sequence ≤ 10^4 Example Input: 3 ()) ((( ))) Output: 1 3 0 Explanation Example case 1. We need one more opening parenthesis to make the sequence valid: \\"()()\\". Example case 2. We need three more closing parentheses to make the sequence valid: \\"((()))\\". Example case 3. The sequence is already valid.","solution":"def min_parentheses_to_add(sequences): Returns a list of the minimum number of parentheses required to make each sequence valid. Args: sequences (list of str): List of sequences of parentheses. Returns: list of int: A list of integers where each integer represents the minimum number of parentheses needed to make the corresponding sequence valid. results = [] for seq in sequences: open_needed = 0 close_needed = 0 for char in seq: if char == \'(\': open_needed += 1 elif char == \')\': if open_needed > 0: open_needed -= 1 else: close_needed += 1 results.append(open_needed + close_needed) return results"},{"question":"In a distant galaxy, there is a planet called Aryth. On Aryth, the dominant life forms are great mathematicians known as Arythians. They have an intriguing way of expressing their happiness using magical sequences called Aryth-sequences. An Aryth-sequence is defined as a sequence of integers where the absolute difference between any two consecutive elements is either 1 or 3. For example, [2, 1, 2, 5, 2] is an Aryth-sequence, while [1, 4, 6] is not. Given an integer n, your task is to determine the number of distinct Aryth-sequences of length n, modulo 1,000,000,007. Input The input consists of an integer t (1 ≤ t ≤ 10,000), the number of test cases. Then, t test cases follow. Each test case contains a single integer n (1 ≤ n ≤ 10,000), the length of the Aryth-sequence. Output For each test case, output the number of distinct Aryth-sequences of length n modulo 1,000,000,007. Example Input 3 1 2 3 Output 10 60 340 Note In the first example, there are 10 distinct sequences of length 1, corresponding to the integers from 0 to 9 as each element in the sequence can independently take any value from 0 to 9. In the second example case, with length 2: Valid sequences include possibilities like [0, 1], [0, -1], [1, 2], [-1, -2], [3, 2], [4, 1], etc. Sequences like [0, -2] or [1, 4] would not be considered valid as the difference between 0 and -2 is 2 and between 1 and 4 is 3, which is valid. Special care must be taken to ensure results are calculated efficiently using modular arithmetic to handle the large input sizes and results.","solution":"MOD = 1000000007 def count_aryth_sequences(n): if n == 1: return 10 prev_count = 10 for i in range(2, n + 1): current_count = (prev_count * 6) % MOD prev_count = current_count return prev_count def solve_aryth_sequences(test_cases): results = [] for n in test_cases: results.append(count_aryth_sequences(n)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [int(data[i]) for i in range(1, t+1)] results = solve_aryth_sequences(test_cases) for result in results: print(result)"},{"question":"You are given a list of `n` unique integers and your task is to find the smallest possible sum of any two distinct numbers in the list. Input The first line contains a single integer `n` (2 ≤ n ≤ 100,000) – the number of integers in the list. The second line contains `n` unique integers (a_1, a_2, dots, a_n) (−10^9 ≤ a_i ≤ 10^9). Output Print a single integer – the smallest possible sum of any two distinct numbers in the list. Examples Input 4 1 3 5 7 Output 4 Input 5 -1 2 4 -3 10 Output -4 Note In the first example, the sums of all pairs are: 4 (1+3), 6 (1+5), 8 (1+7), 8 (3+5), 10 (3+7), and 12 (5+7). The smallest sum is 4. In the second example, the possible sums are: -4 (-1-3), 1 (-1+2), 3 (-1+4), 9 (-1+10), -1 (-3+2), 1 (-3+4), 7 (-3+10), 6 (2+4), 12 (2+10) and 14 (4+10). The smallest sum is -4.","solution":"def smallest_sum_of_two(numbers): Finds the smallest possible sum of any two distinct numbers in the list. The function assumes that the input list contains at least two elements. # Sort the list to get the smallest numbers numbers.sort() # The smallest sum of any two distinct numbers will be the sum # of the two smallest numbers in the sorted list return numbers[0] + numbers[1]"},{"question":"You are given a list of N integers and a target integer T. You need to determine whether there exists a pair of distinct elements in the list that sums up to the target value T. Input The first line of the input contains an integer N denoting the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. The third line contains the integer T, the target sum. Output Output \\"YES\\" if there exists a pair of distinct elements in the list that sums up to T. Otherwise, output \\"NO\\". Constraints 1 ≤ N ≤ 10^5 -10^9 ≤ Element of the list ≤ 10^9 -10^9 ≤ T ≤ 10^9 Example Input: 5 2 7 11 15 1 9 Output: YES Explanation Example case 1: The pair (2, 7) sums up to the target value 9.","solution":"def has_pair_with_sum(arr, target): Determines if there exists a pair of distinct elements in the list that sums up to the target value. Parameters: arr (list of int): The list of integers. target (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Lucas is tasked with developing a new scheduling system for his company\'s servers. Each server processes requests in a round-robin fashion, but if two identical requests are processed consecutively, they create an error. Lucas needs to simulate the server\'s request processing to ensure no two identical requests are served back-to-back. The servers will handle the requests in a sequence, one by one. If introducing the next request from the sequence will cause an error, Lucas should skip that request. Lucas wants to know the final sequence of requests processed by the server and the number of requests that were skipped due to potential errors. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of requests. The second line contains n space-separated integers representing the sequence of requests. Each request is an integer, where 1 ≤ request ≤ 10^9. Output Print two lines. The first line should contain the sequence of requests that were processed by the server (space-separated integers). The second line should contain the number of requests that were skipped. Examples Input 8 1 2 2 3 4 4 5 5 Output 1 2 3 4 5 3 Input 5 1 1 1 1 1 Output 1 4 Input 6 1 2 3 4 5 6 Output 1 2 3 4 5 6 0 Note In the first example, the server starts by processing request 1, followed by 2. The next request is also 2, which would cause an error, so it’s skipped. The server then processes 3, followed by 4. The next request is also 4, which would cause an error, so it’s skipped. The final processed request is 5, where the next request is also 5, which would cause an error, so it’s skipped. In the second example, only one request can be processed since all consecutive requests are identical and would cause errors. In the third example, all requests are distinct, so no requests are skipped.","solution":"def process_requests(n, requests): Processes the requests in such a way that no two consecutive requests are identical. Parameters: n (int): The number of requests. requests (list of int): The list of requests. Returns: tuple: A tuple containing the processed request list and the number of requests that were skipped. processed = [] skipped_count = 0 for i in range(n): if not processed or processed[-1] != requests[i]: processed.append(requests[i]) else: skipped_count += 1 return processed, skipped_count"},{"question":"You are given an array A of length N consisting of integers and an integer X. Print the array obtained by replacing every element in A that is not divisible by X with zero. Constraints - 1 leq N leq 20 - 1 leq A[i] leq 100 for all 1 leq i leq N - 1 leq X leq 10 Input Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N X ``` Output Print the array obtained by replacing every element in A that is not divisible by X with zero. Examples Input ``` 5 12 7 6 5 8 2 ``` Output ``` 12 0 6 0 8 ``` Input ``` 6 21 3 9 18 25 30 3 ``` Output ``` 21 3 9 18 0 30 ``` Input ``` 4 10 15 20 25 5 ``` Output ``` 10 15 20 25 ```","solution":"def replace_elements_not_divisible_by_x(array, x): Replaces every element in the array that is not divisible by x with zero. Parameters: array (list of int): The input array. x (int): The integer to divide by. Returns: list of int: The array with elements not divisible by x replaced by zero. return [elem if elem % x == 0 else 0 for elem in array] # Input handling and main execution def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) array = list(map(int, data[1:N+1])) X = int(data[N+1]) result = replace_elements_not_divisible_by_x(array, X) print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Write a program that reads an undirected graph G = (V, E) and determines whether the graph is bipartite. A graph is bipartite if the set of vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. Constraints * 1 leq n leq 100 Input In the first line, two integers n and m denoting the number of vertices and edges respectively are given. In the next m lines, each line contains two integers u and v denoting an edge between vertices u and v. Vertices are identified by IDs 1, 2,..., n. Output Print \\"Yes\\" if the graph is bipartite. Otherwise, print \\"No\\". Example Input 5 5 1 2 2 3 3 4 4 5 5 1 Output No Input 4 4 1 2 2 3 3 4 4 1 Output Yes","solution":"def is_bipartite(n, m, edges): Determines if the graph is bipartite. :param n: Number of vertices :param m: Number of edges :param edges: List of edges represented as tuples (u, v) :return: \'Yes\' if the graph is bipartite, \'No\' otherwise from collections import deque # Create the adjacency list adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Colors array to store colors assigned to all vertices. colors = [-1] * (n + 1) def bfs_check(start): queue = deque([start]) colors[start] = 0 while queue: u = queue.popleft() for v in adj[u]: if colors[v] == -1: # Assign alternate color to this adjacent vertex colors[v] = 1 - colors[u] queue.append(v) elif colors[v] == colors[u]: # An adjacent vertex has the same color, not bipartite return False return True # Check using BFS for each component for i in range(1, n + 1): if colors[i] == -1: # Not colored yet if not bfs_check(i): return \\"No\\" return \\"Yes\\""},{"question":"Oliver is a computer science enthusiast and loves exploring different data structures. Recently, he has been learning about Fenwick Trees (Binary Indexed Trees) and their applications. He has come up with an interesting problem and would like your help to solve it. A Fenwick Tree is a data structure that provides efficient methods for performing both point updates and prefix sum queries. To refresh, here are the basic operations we can perform on a Fenwick Tree: - `update(index, value)`: Increment the element at the specified index by the given value. - `query(index)`: Compute the prefix sum up to and including the specified index. Oliver has an array of length n initialized with zeros. He will then perform m operations of two types: 1. `+ x y`: Add y to the element at index x. 2. `? x`: Query the prefix sum up to and including index x. Your task is to implement a solution to process these operations efficiently. Input The first line contains two space-separated integers n (1 ≤ n ≤ 100000) and m (1 ≤ m ≤ 100000), denoting the length of the array and the number of operations, respectively. The next m lines contain an operation of one of the two types: - `+ x y` (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9): Increment the element at index x by y. - `? x` (1 ≤ x ≤ n): Output the prefix sum of the array elements up to and including index x. Output For each query operation `? x`, print the result on a new line. Examples Input ``` 5 5 + 1 4 + 2 5 ? 2 + 3 6 ? 3 ``` Output ``` 9 15 ``` Notes Initial array: [0, 0, 0, 0, 0] 1. `+ 1 4`: [4, 0, 0, 0, 0] 2. `+ 2 5`: [4, 5, 0, 0, 0] 3. `? 2`: Sum up to index 2 is 4 + 5 = 9 4. `+ 3 6`: [4, 5, 6, 0, 0] 5. `? 3`: Sum up to index 3 is 4 + 5 + 6 = 15","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def process_operations(n, operations): fenwick_tree = FenwickTree(n) results = [] for op in operations: if op[0] == \'+\': fenwick_tree.update(op[1], op[2]) elif op[0] == \'?\': results.append(fenwick_tree.query(op[1])) return results # Example usage: # n = 5 # operations = [ # (\'+\', 1, 4), # (\'+\', 2, 5), # (\'?\', 2), # (\'+\', 3, 6), # (\'?\', 3) # ] # print(process_operations(n, operations)) # [9, 15]"},{"question":"You are given a text document containing multiple authors\' names along with the number of pages they have written. Each entry in the document is formatted as follows: \\"AuthorName: PageNumber\\", where AuthorName is a string without any spaces, and PageNumber is an integer. Your task is to calculate the total number of pages written by each author and print the results. Write a program that processes the text document and outputs the names of the authors along with the total pages they have written in alphabetical order of their names. Input: - The first line contains an integer N, the number of entries in the text document. - The next N lines each contain a string in the format \\"AuthorName: PageNumber\\". Output: - For each author, output the author\'s name followed by the total number of pages they have written, each on a new line. - The output should be in alphabetical order of author names. Constraints: 1 ≤ N ≤ 10^5 1 ≤ len(AuthorName) ≤ 100 1 ≤ PageNumber ≤ 1000 SAMPLE INPUT 4 Alice: 50 Bob: 30 Alice: 20 Charlie: 40 SAMPLE OUTPUT Alice: 70 Bob: 30 Charlie: 40 Explanation: Alice has two entries, \\"Alice: 50\\" and \\"Alice: 20\\", so the total number of pages written by Alice is 50 + 20 = 70. Bob has one entry \\"Bob: 30\\" and Charlie has one entry \\"Charlie: 40\\". The output is sorted alphabetically by author name.","solution":"def calculate_total_pages(n, entries): Returns the total number of pages written by each author in alphabetical order of their names. :param n: Number of entries (integer) :param entries: List of strings, each in the format \\"AuthorName: PageNumber\\" :return: Dictionary with author names as keys and total pages as values author_pages = {} for entry in entries: author, pages = entry.split(\': \') pages = int(pages) if author in author_pages: author_pages[author] += pages else: author_pages[author] = pages sorted_author_pages = dict(sorted(author_pages.items())) return sorted_author_pages def format_output(results): Formats the result dictionary into a list of strings for output. :param results: Dictionary with author names as keys and total pages as values :return: List of formatted strings return [f\\"{author}: {pages}\\" for author, pages in results.items()]"},{"question":"You are given an array of integers, and you need to determine the number of contiguous subarrays where the sum of the elements is equal to a given target value. Input Format The first line contains an integer N, the number of elements in the array. The second line contains N integers separated by spaces, representing the elements of the array. The third line contains an integer T, the target sum. Output Format Output a single integer, the number of contiguous subarrays that sum up to the target value T. Constraints 1 ≤ N ≤ 100,000 -10^7 ≤ elements of the array ≤ 10^7 -10^7 ≤ T ≤ 10^7 SAMPLE INPUT 5 1 -1 2 3 -2 3 SAMPLE OUTPUT 3 Explanation The subarrays that sum to 3 are: [1, -1, 2, 3, -2] -> [2, 3] [2, 3, -2] -> [1, -1, 2, 3, -2] The total number of contiguous subarrays that sum up to the target value 3 is 3.","solution":"def count_subarrays_with_target_sum(arr, target): Returns the number of contiguous subarrays where the sum of the elements is equal to the target value. from collections import defaultdict prefix_sum_counts = defaultdict(int) current_sum = 0 count = 0 for num in arr: current_sum += num if current_sum == target: count += 1 if (current_sum - target) in prefix_sum_counts: count += prefix_sum_counts[current_sum - target] prefix_sum_counts[current_sum] += 1 return count # Example usage: # N = 5 # arr = [1, -1, 2, 3, -2] # T = 3 # print(count_subarrays_with_target_sum(arr, T)) # Output: 3"},{"question":"**Question: Trains Scheduling** # Problem Statement You are in charge of scheduling trains for a railway network. Each train travels from one station to another station along a single line of tracks. However, you need to optimize the scheduling to avoid collisions, where two trains could occupy the same section of the track at the same time. Each train\'s schedule is defined by its start time and end time, both inclusive. Two trains conflict if their travel times overlap. You need to determine the minimum number of platforms required at the central station to ensure none of the trains conflict. # Input Format The input will be given in the following format: - The first line contains the integer ( N ), the number of trains. - The next ( N ) lines each contain two integers ( S_i ) and ( E_i ), representing the start time and end time of the ( i )-th train. # Constraints - ( 1 leq N leq 100,000 ) - ( 1 leq S_i < E_i leq 10^6 ) # Output Format Output a single integer: the minimum number of platforms required. # Example Input ``` 3 900 940 950 1100 930 1000 ``` Output ``` 2 ``` Explanation - Train 1: 900 to 940 - Train 2: 950 to 1100 - Train 3: 930 to 1000 Train 1 and Train 3 overlap in time, while Train 2 does not overlap with either. Therefore, two platforms are required. Train 3 uses one platform, leaving Train 1 to start using another. Train 2 uses the first platform after Train 1 leaves. Input ``` 6 900 910 940 1200 950 1100 1500 1900 1800 2000 1830 1930 ``` Output ``` 3 ``` Explanation - Train 1: 900 to 910 - Train 2: 940 to 1200 - Train 3: 950 to 1100 - Train 4: 1500 to 1900 - Train 5: 1800 to 2000 - Train 6: 1830 to 1930 Trains 2 and 3 overlap, Trains 4, 5, and 6 overlap, forming two separate blocks of overlapping trains. The second block requires three platforms due to the overlap of Trains 4, 5, and 6. Therefore, three platforms are required at a minimum.","solution":"def min_platforms(trains): Determines the minimum number of platforms required for the given train schedules. :param trains: List of tuples, where each tuple consists of start and end times of a train :return: Minimum number of platforms required if not trains: return 0 # Extract start and end times start_times = sorted([train[0] for train in trains]) end_times = sorted([train[1] for train in trains]) n = len(trains) platforms_needed = 0 max_platforms = 0 i, j = 0, 0 # Traverse arrival and departure arrays while (i < n and j < n): if start_times[i] <= end_times[j]: platforms_needed += 1 i += 1 if platforms_needed > max_platforms: max_platforms = platforms_needed else: platforms_needed -= 1 j += 1 return max_platforms # Example usage trains = [(900, 940), (950, 1100), (930, 1000)] print(min_platforms(trains)) # Output should be 2"},{"question":"You are given a list of integers representing the cost of items in a store. You have a fixed amount of money budget M. Your goal is to determine the maximum number of items you can buy without exceeding your budget. Constraints * 1 ≤ N ≤ 100 (where N is the number of items) * 1 ≤ cost_i ≤ 100 (cost of each item) * 1 ≤ M ≤ 10000 (your budget) * All values in the input are integers. Input Input is given from Standard Input in the following format: N M cost_1 cost_2 ... cost_{N} Output Print the maximum number of items you can buy without exceeding your budget. Examples Input 5 20 6 4 8 3 7 Output 4 Input 4 10 10 9 8 7 Output 1","solution":"def max_items_within_budget(N, M, costs): Given a list of item costs and a budget, this function returns the maximum number of items you can buy without exceeding the budget. :param N: Integer, number of items :param M: Integer, budget :param costs: List of integers representing item costs :return: Integer, maximum number of items that can be bought without exceeding the budget costs.sort() count = 0 total_cost = 0 for cost in costs: if total_cost + cost <= M: total_cost += cost count += 1 else: break return count # Example usage: # N = 5, M = 20, costs = [6, 4, 8, 3, 7] # Output should be 4 print(max_items_within_budget(5, 20, [6, 4, 8, 3, 7])) # 4 # N = 4, M = 10, costs = [10, 9, 8, 7] # Output should be 1 print(max_items_within_budget(4, 10, [10, 9, 8, 7])) # 1"},{"question":"Sarah has a unique way of organizing her books in a shelf. Each book has a unique ID and a specific position on the shelf. However, she has misplaced some books recently, and the IDs might not be in their actual positions. Sarah wants to fix this by swapping the least number of books so that each book\'s ID matches its position on the shelf. Given the initial arrangement of books, output the minimum number of swaps necessary to reorder the books correctly. Input The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of books on the shelf. The second line contains n unique integers – where the i-th integer represents the book ID currently at the i-th position on the shelf (1 ≤ ID ≤ n). Output Print a single integer – the minimum number of swaps needed to reorder the books so that the ID of the book at each position i is (i+1). Examples Input 5 4 3 2 1 5 Output 2 Input 4 1 3 4 2 Output 2 Note In the first example, the initial array is [4, 3, 2, 1, 5]. Swapping book IDs at positions 1 and 4 [positions are 0-based] (i.e., swapping 4 and 1) followed by swapping IDs at positions 2 and 3 (i.e., swapping 3 and 2) will correct the shelf, which results in two swaps in total. Hence, the output is 2. In the second example, the initial array is [1, 3, 4, 2]. To correct the shelf, swap book IDs at positions 1 and 3 (i.e., swapping 3 and 4) followed by swapping IDs at positions 2 and 3 (i.e., swapping 4 and 2). Hence, the output is also 2.","solution":"def minimum_swaps(arr): Returns the minimum number of swaps needed to reorder the books so that the ID of the book at each position i is (i+1). n = len(arr) visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr[i] == i + 1: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr[x] - 1 cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"A new startup company has a set of software projects that need to be completed sequentially. Each project has a specific duration and must be started on or after a given start time. The company wants to maximize the number of projects completed within a certain total time limit T. Can you help the company find the maximum number of projects that can be completed within the total time limit? Input: - The first line contains an integer N denoting the number of projects. - The second line contains N integers, where each integer denotes the duration of the corresponding project. - The third line contains N integers, where each integer denotes the start time of the corresponding project. - The fourth line contains a single integer T, which is the total time limit. Output: A single integer denoting the maximum number of projects that can be completed within the total time limit T. Constraints: 1 ≤ N ≤ 100000 1 ≤ Duration ≤ 1000 ; Duration := duration of each project 1 ≤ Start Time ≤ 1000000; Start Time := start time of each project 1 ≤ T ≤ 1000000 Example: Input: 5 2 1 3 2 2 1 2 1 3 0 5 Output: 3 Input: 3 4 2 1 1 2 0 4 Output: 2 Explanation: In the first example, the company can complete the projects with durations 1, 2, and 2 within the time limit of 5 units. In the second example, the company can complete the projects with durations 2 and 1 within the time limit of 4 units.","solution":"def max_projects_completed(N, durations, start_times, T): projects = list(zip(durations, start_times)) # Sort projects based on end time (start_time + duration) projects.sort(key=lambda x: x[1] + x[0]) total_time = 0 completed_projects = 0 for duration, start_time in projects: if total_time + duration <= T and total_time >= start_time: total_time += duration completed_projects += 1 elif total_time < start_time: # wait for this project\'s start time total_time = start_time + duration if total_time <= T: completed_projects += 1 return completed_projects"},{"question":"Problem Statement: Write a function that accepts a list of integers and returns the second maximum number in the list. If the list is empty or contains only one unique integer, return `None`. Sample Input 1: [4, 3, 9, 1, 6, 9] Sample Output 1: 6 Sample Input 2: [7, 7, 7] Sample Output 2: None Sample Input 3: [] Sample Output 3: None","solution":"def second_max(nums): Returns the second maximum number in the list. If the list is empty or contains only one unique integer, return None. if len(nums) < 2: return None unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Aman is a manager of a warehouse, and he faces frequent issues with misplaced items. To improve the efficiency of locating misplaced items, he decides to log each item’s position on a daily basis. Each item has a unique ID and a corresponding position, both of which are integers. The position is a 2D coordinate represented by (x, y). Aman needs your help to find the farthest distance of any item from the origin (0, 0) on a given day. He also wants to know the average position of all items on that day to keep track of item distribution. Given the coordinates of each item, calculate the maximum Euclidean distance from the origin as well as the average x and y coordinates. The Euclidean distance for a point (x, y) from the origin is given by the formula: distance = sqrt(x^2 + y^2) Input format: The first line contains an integer, T, denoting the number of test cases. For each test case, the first line contains an integer, N, denoting the number of items. The next N lines contain two integers each, x and y, representing the coordinates of each item. Output format: For each test case, print the maximum distance followed by the average x and y coordinates, rounded to two decimal places. Answer to each test case is on a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 -1000 ≤ x, y ≤ 1000 SAMPLE INPUT: 2 4 3 4 1 1 -1 -1 2 2 3 -3 4 1 -1 5 6 SAMPLE OUTPUT: 5.00 1.25 1.50 7.81 1.00 3.00 Explanation: In the first test case, the maximum distance from the origin is sqrt(3^2 + 4^2) = 5.00 and the average coordinates are (1.25, 1.50). In the second test case, the maximum distance is sqrt(5^2 + 6^2) = 7.81 and the average coordinates are (1.00, 3.00).","solution":"import math def find_farthest_and_average_position(test_cases): results = [] for case in test_cases: N = case[0] coordinates = case[1] max_distance = 0 sum_x = 0 sum_y = 0 for x, y in coordinates: distance = math.sqrt(x**2 + y**2) if distance > max_distance: max_distance = distance sum_x += x sum_y += y average_x = sum_x / N average_y = sum_y / N results.append(f\\"{max_distance:.2f} {average_x:.2f} {average_y:.2f}\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) coordinates = [] for i in range(N): x, y = map(int, lines[index+1+i].split()) coordinates.append((x, y)) test_cases.append((N, coordinates)) index += N + 1 return test_cases def format_output(results): return \\"n\\".join(results)"},{"question":"Alice and Bob are playing a game with a sequence of numbers. They take turns picking numbers from either end of the sequence, and Alice always goes first. Their goal is to maximize the sum of the numbers they pick. Assuming both play optimally, determine the difference between Alice\'s total and Bob\'s total. Input The first line of the input contains an integer n (1 ≤ n ≤ 1,000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000) — the sequence of numbers in the game. Output Print a single integer — the difference between the sum of numbers picked by Alice and Bob if both play optimally. Examples Input 4 4 1 2 10 Output 7 Input 3 9 7 3 Output 5 Note In the first example, Alice can pick the 10 from the end of the sequence. Then Bob can only pick either 4 or 2. Optimal play for Bob would be to pick 4. Alice would then pick 2. Finally, Bob picks the last remaining 1. Alice\'s total is 10 + 2 = 12, Bob\'s total is 4 + 1 = 5, and the difference is 12 - 5 = 7. In the second example, Alice picks 9, Bob picks 7, and Alice picks 3. The difference is (9 + 3) - 7 = 5.","solution":"def optimal_difference(sequence): n = len(sequence) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = sequence[i] # Consider all lengths from 2 to n for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(sequence[i] - dp[i + 1][j], sequence[j] - dp[i][j - 1]) return dp[0][n - 1] # Input processing and output sequence = [4, 1, 2, 10] print(optimal_difference(sequence)) # Output: 7"},{"question":"A local zoo is digitizing their animal record system. Every animal at the zoo has some properties such as height, weight, and age. Different species of animals possess distinct characteristics in terms of these properties. They are creating a program that updates the records whenever a new animal is added or removed from the zoo. You are tasked with writing a program which helps in managing the records by supporting the following operations: 1. Adding a new animal of a specific species. When an animal is added, its data including species name, height, weight, and age will be recorded. 2. Removing the latest animal added from a specific species. 3. Querying the average height, weight, and age of all animals of a specific species currently in the zoo. Input: The first line will contain a single integer `q` (1 ≤ q ≤ 1000) which indicates the number of operations. Each of the next `q` lines will describe an operation of one of the following three types: - `add species name height weight age` — where `species name` is a string representing the species, and `height`, `weight`, `age` are positive integers representing the height, weight, and age of the animal respectively. - `remove species name` — where `species name` is a string representing the species of the animal to remove. You should remove the most recently added animal of that species. - `query species name` — where `species name` is a string representing the species of animals to query. For this operation, you should print the average height, average weight, and average age of the animals of this species, in that order, rounded to two decimal places. If there are no animals of this species, print `No animals`. Output: For each `query` operation, print the average height, weight, and age of the animals of that species currently in the zoo, rounded to two decimal places, or `No animals` if no animals of that species are recorded. Examples: Input: ``` 8 add lion 120 190 5 add tiger 110 220 4 query lion add lion 130 200 6 remove lion query lion query tiger remove tiger query tiger ``` Output: ``` 120.00 190.00 5.00 120.00 190.00 5.00 110.00 220.00 4.00 No animals ```","solution":"class Zoo: def __init__(self): self.records = {} def add(self, species, height, weight, age): if species not in self.records: self.records[species] = [] self.records[species].append((height, weight, age)) def remove(self, species): if species in self.records and self.records[species]: self.records[species].pop() def query(self, species): if species not in self.records or not self.records[species]: return \\"No animals\\" total_height = total_weight = total_age = 0 count = len(self.records[species]) for height, weight, age in self.records[species]: total_height += height total_weight += weight total_age += age avg_height = total_height / count avg_weight = total_weight / count avg_age = total_age / count return f\\"{avg_height:.2f} {avg_weight:.2f} {avg_age:.2f}\\" def manage_zoo(operations): zoo = Zoo() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": zoo.add(parts[1], int(parts[2]), int(parts[3]), int(parts[4])) elif parts[0] == \\"remove\\": zoo.remove(parts[1]) elif parts[0] == \\"query\\": results.append(zoo.query(parts[1])) return results"},{"question":"Alice recently learnt about digital clocks and decided to experiment with them. She noticed that at any given instant, the time on a 12-hour digital clock can be represented by a 4-digit sequence (for example, \\"0530\\" for 5:30 AM or \\"1230\\" for 12:30 PM). She also realized that some sequences form a palindrome (i.e., they read the same forward and backward). For instance, \\"1221\\" is a palindromic sequence. You need to help Alice by writing a program that finds the number of distinct palindromic times between two given times on a 12-hour clock. Times are given in the format \\"HHMM\\". Input The only line consists of the two times t1 and t2 in the 4-digit \\"HHMM\\" format, separated by a single space. The first time t1 is always strictly earlier than the second time t2 on the same day. Output Print the number of distinct palindromic times between t1 and t2, inclusive of t1 and t2. Examples Input 0100 0400 Output 3 Input 0959 1010 Output 1 Explanation In the first example, the valid palindromic times between 0100 and 0400 are: - 0110 - 0220 - 0330 In the second example, the only valid palindromic time between 0959 and 1010 is: - 1001","solution":"def count_palindromic_times(t1: str, t2: str) -> int: def is_palindrome(s): return s == s[::-1] def increment_time(hhmm): hh, mm = int(hhmm[:2]), int(hhmm[2:]) mm += 1 if mm == 60: mm = 0 hh += 1 if hh == 13: hh = 1 return f\\"{hh:02}{mm:02}\\" count = 0 current_time = t1 while current_time <= t2: if is_palindrome(current_time): count += 1 current_time = increment_time(current_time) return count"},{"question":"A cartographer is plotting points on a 2D cartesian coordinate system. Each point plotted has coordinates (x, y) where both x and y are integers. The cartographer has a special tool that, given two points (a, b) and (c, d), can be used to quickly calculate the distance between them using the formula: Distance = |a - c| + |b - d| However, due to a malfunction in the tool, it now incorrectly computes the distance using a different formula: Incorrect Distance = max(|a - c|, |b - d|) Your task is to help the cartographer by writing a function that takes in a list of points and returns the two points that, according to the incorrect formula, have the maximum incorrect distance between them. If there are multiple pairs with the same maximum incorrect distance, return any one of them. Constraints * The number of points n: 2 ≤ n ≤ 10^5 * The coordinates of each point: -10^9 ≤ x, y ≤ 10^9 Input Input is given from Standard Input in the following format: n x1 y1 x2 y2 . . . xn yn Output Print the coordinates of the two points that have the maximum incorrect distance between them. Examples Input 3 0 0 1 2 4 0 Output 0 0 4 0 Input 4 -1 -1 -2 -2 3 3 4 4 Output -2 -2 4 4 Input 2 1000000000 1000000000 -1000000000 -1000000000 Output 1000000000 1000000000 -1000000000 -1000000000","solution":"def max_incorrect_distance(points): Returns the two points with the maximum incorrect distance between them. :param points: List of tuples representing the points (x, y) :return: A tuple containing the two points with the maximum incorrect distance max_distance = 0 point_pair = None for i in range(len(points)): for j in range(i + 1, len(points)): a, b = points[i] c, d = points[j] incorrect_distance = max(abs(a - c), abs(b - d)) if incorrect_distance > max_distance: max_distance = incorrect_distance point_pair = (points[i], points[j]) return point_pair # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(n)] result = max_incorrect_distance(points) print(result[0][0], result[0][1]) print(result[1][0], result[1][1])"},{"question":"You lead a research team developing new algorithms for social networks. One of the tasks is to analyze the stability of different networks by examining their structure. The stability of a network is determined by finding the number of connected components. Write a program that will determine the number of connected components in an undirected graph. Each connected component is a set of nodes in which any two nodes are connected to each other by paths, and which are connected to no additional nodes in the rest of the graph. Input The input consists of multiple lines. The first line contains two integers, n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 124750), where n is the number of nodes and m is the number of edges. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output Print one integer — the number of connected components. Example Input 6 3 1 2 2 3 4 5 Output 3 Input 5 0 Output 5 Note In the first example, there are three connected components: {1, 2, 3}, {4, 5}, and {6}. In the second example, since there are no edges, each of the 5 nodes forms its own connected component, resulting in 5 connected components.","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components = 0 def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) for node in range(1, n + 1): if node not in visited: visited.add(node) bfs(node) components += 1 return components # Example usage: # n, m = 6, 3 # edges = [(1, 2), (2, 3), (4, 5)] # print(count_connected_components(n, m, edges)) # Output: 3"},{"question":"The Lonely Mountain is preparing for the upcoming Dwarven Games, and they need your help with logistics. The stadium\'s seating arrangement should follow a specific rule: Each row must have a unique XOR combination of seat numbers. Given an integer n (1 ≤ n ≤ 1000) representing the number of seats in a single row, you need to determine if it is possible to arrange the seating such that each row has a unique XOR value of all its seat numbers. The seat numbers must be distinct integers ranging from 1 to n inclusive. Write a program that: 1. Takes an integer t (1 ≤ t ≤ 1000), the number of test cases. 2. For each test case, takes an integer n. For each test case, output \\"YES\\" if it is possible to arrange the seats as required, otherwise output \\"NO\\". Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 1000). Output For each test case, output one line containing \\"YES\\" if it is possible to arrange the seats as per the rule, and \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 Output YES YES YES NO NO Note In each of the test cases: - For n = 1, the XOR of the single seat number (1) is unique. - For n = 2, the XOR of {1, 2} is unique (3). - For n = 3, the XOR combinations of {1}, {2}, {3}, {1, 2, 3} all have unique XOR values. - For n = 4, it\'s impossible because the XOR values can\'t be unique for {1, 2, 3, 4}. - For n = 5, it is also impossible because not all XOR values are unique. The solution requires analysis of possible XOR values for sets up to 1000 and determining if they can be unique for each row.","solution":"def is_unique_xor_possible(n): Determines if it is possible to arrange the seats such that each row has a unique XOR combination of seat numbers for n seats. # If n is 1 or 2, XOR values will definitely be unique if n == 1 or n == 2: return \\"YES\\" # XOR combinations start repeating for n > 3 (explained in the problem description). # Hence, impossible for n >= 4 to have unique XOR values return \\"NO\\" if n >= 4 else \\"YES\\" def dwarven_games(t, test_cases): results = [] for n in test_cases: results.append(is_unique_xor_possible(n)) return results"},{"question":"A company wants to analyze its customer support ticket data. Each support ticket contains a string of operations that describes the actions taken by the customer and the support team. The operations string contains the characters \'U\' (for \\"Upgrade\\"), \'D\' (for \\"Downgrade\\"), and \'R\' (for \\"Resolve\\"). A ticket is considered resolved if there is at least one \'R\' in the operations string. The effectiveness of the support team can be measured by counting how many tickets are resolved. Given a list of support ticket operations strings, determine the number of resolved tickets. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of support tickets. - The next `n` lines each contain a non-empty string `s` (1 ≤ |s| ≤ 100), representing the operations of a support ticket. Each character in the string is either \'U\', \'D\', or \'R\'. # Output - Print a single integer, the number of resolved tickets. # Example Input ``` 3 UURD DDUURR UUUU ``` Output ``` 2 ``` # Explanation In the given example: - The first ticket operations string is \\"UURD\\", which contains an \'R\', so it is resolved. - The second ticket operations string is \\"DDUURR\\", which contains an \'R\', so it is resolved. - The third ticket operations string is \\"UUUU\\", which does not contain any \'R\', so it is not resolved. Thus, the number of resolved tickets is 2.","solution":"def count_resolved_tickets(tickets): Returns the number of resolved tickets. tickets (list of str): List of support ticket operations strings. A ticket is resolved if it contains at least one \'R\'. resolved_count = 0 for ticket in tickets: if \'R\' in ticket: resolved_count += 1 return resolved_count # Example usage: # tickets = [\\"UURD\\", \\"DDUURR\\", \\"UUUU\\"] # print(count_resolved_tickets(tickets)) # Output: 2"},{"question":"Write a function called `balance_string` that takes a string `s` consisting of characters \'L\' and \'R\'. This string is considered balanced if it can be split into multiple substrings, where each substring contains the same number of \'L\'s and \'R\'s. Your task is to count the maximum number of balanced substrings that can be obtained from the input string. # Function Signature ```python def balance_string(s: str) -> int: pass ``` # Input - A single string `s` consisting only of the characters \'L\' and \'R\'. (1 ≤ len(s) ≤ 1000) # Output - An integer representing the maximum number of balanced substrings. # Example Example 1: ```python s = \\"RLRRLLRLRL\\" balance_string(s) # Output: 4 ``` Example 2: ```python s = \\"RLLLLRRRLR\\" balance_string(s) # Output: 3 ``` Example 3: ```python s = \\"LLLLRRRR\\" balance_string(s) # Output: 1 ``` # Explanation - In the first example, the string can be split into \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\", each of which is balanced. - In the second example, the string can be split into \\"RL\\", \\"LLLRRR\\", \\"LR\\", each of which is balanced. - In the third example, the string can be split into \\"LLLLRRRR\\", which is balanced.","solution":"def balance_string(s: str) -> int: Counts the maximum number of balanced substrings that can be obtained from the input string. balance = 0 balanced_count = 0 for char in s: if char == \'L\': balance += 1 else: balance -= 1 if balance == 0: balanced_count += 1 return balanced_count"},{"question":"You are given a 2D grid of size N x M where each cell in the grid contains either a 0 (representing water) or a 1 (representing land). The grid represents a map of an island(s). An island is a group of 1s connected 4-directionally (horizontal or vertical). You need to determine the number of distinct islands in the grid. Constraints * 1 leq N, M leq 1000 * Each cell contains either a 0 or a 1. Input Input is given from Standard Input in the following format: N M grid row 1 grid row 2 : grid row N Output Print the number of distinct islands in the grid. Examples Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1","solution":"def num_islands(grid): Given a 2D grid of 0s and 1s, returns the number of distinct islands. if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(grid, x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the land as visited by setting it to \'0\' # Visit all 4-directionally connected neighbors dfs(grid, x + 1, y) dfs(grid, x - 1, y) dfs(grid, x, y + 1) dfs(grid, x, y - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dfs(grid, i, j) island_count += 1 return island_count def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [list(data[i + 2]) for i in range(n)] print(num_islands(grid))"},{"question":"Alice is organizing a party and wants to form teams for a game. Each team must consist of exactly 5 people. However, she has a limited number of guests, and she wonders if it\'s possible to form at least one complete team. Write a program that determines if Alice can form at least one team of 5 people. Constraints 1 ≤ M ≤ 10^(10^5) Input The first line of input contains M Output Output a single line containing \\"YES\\" or \\"NO\\" Example Input: 23 Output: YES Explanation Alice has 23 guests, and she can form 4 complete teams of 5 people (remaining 3 guests will not form a complete team). Thus, the output is \\"YES\\".","solution":"def can_form_team(M): Determines if at least one team of 5 people can be formed. Parameters: M (int): Number of guests. Returns: str: \\"YES\\" if at least one team of 5 can be formed, otherwise \\"NO\\". if M >= 5: return \\"YES\\" else: return \\"NO\\""},{"question":"Auto the Mechanic has multiple cars to repair in a day. Each car requires a specific number of hours to repair, and Auto wants to complete as many car repairs as possible in his workday. However, he has a finite amount of working hours before he needs to close the shop. Your task is to help Auto maximize the number of car repairs he can complete in a day, given the individual repair times of each car and his total working hours available. Constraints - 1 ≤ number of cars (n) ≤ 1000 - 1 ≤ repair time per car (t_i) ≤ 1000 - 1 ≤ total working hours (W) ≤ 10000 Input Input is given from Standard Input in the following format: n W t_1 t_2 t_3 ... t_n Output Print the maximum number of car repairs that Auto can complete in his working day. Example Input 5 10 2 3 7 4 5 Output 3","solution":"def max_car_repairs(n, W, times): Returns the maximum number of car repairs that can be completed in a given workday. :param n: Number of cars :param W: Total working hours available :param times: List containing repair times for each car :return: Maximum number of repairs that can be completed times.sort() total_time = 0 count = 0 for time in times: if total_time + time <= W: total_time += time count += 1 else: break return count"},{"question":"You are given a matrix filled with integers where each row and each column is sorted in non-decreasing order. Your task is to write a function that searches for an integer target in the matrix. The function should return the position of the target value if it exists in the matrix, or (-1, -1) if it does not exist. Constraints: - The number of rows and columns in the matrix are at most 300. - -10^9 <= matrix[i][j], target <= 10^9 Input: - The first line contains two integers, `m` and `n`, representing the number of rows and columns of the matrix. - The next `m` lines each contain `n` integers, representing the matrix. - The last line contains an integer, `target`, which you need to search in the matrix. Output: - If the target is found, print the row and column index (both 0-based) where the target is located. - If the target is not found, print \\"-1 -1\\". Examples: Input: 3 3 1 4 7 2 5 8 3 6 9 5 Output: 1 1 Input: 2 3 1 2 3 4 5 6 10 Output: -1 -1","solution":"def search_matrix(matrix, target): Searches for the target in a matrix, where each row and each column is sorted in non-decreasing order. Returns the position of the target value if it exists in the matrix, or (-1, -1) if it does not exist. if not matrix or not matrix[0]: return (-1, -1) rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 # start from top-right corner while row < rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] > target: col -= 1 else: row += 1 return (-1, -1)"},{"question":"Bob is a software engineer and loves solving puzzles. One day, he received a puzzle consisting of lists of integers. The task is to find the longest increasing subsequence in each list. An increasing subsequence is a sequence of numbers picked from the list such that each successive number in the sequence is larger than the previous one. Help Bob solve this puzzle by finding the length of the longest increasing subsequence for each list. Input: First line contains T, the number of test cases. T test cases follow. Each test case starts with an integer N, the length of the list, followed by N space-separated integers representing the list. Output: For each test case, print the length of the longest increasing subsequence in the list. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ list[i] ≤ 10^6 SAMPLE INPUT 3 6 5 8 7 1 9 2 5 3 4 6 5 7 4 2 2 2 2 SAMPLE OUTPUT 3 4 1 Explanation For the first list, the longest increasing subsequence is [5, 8, 9]. For the second list, the longest increasing subsequence is [3, 4, 5, 7]. For the third list, the longest increasing subsequence is [2].","solution":"def find_longest_increasing_subsequence_length(lists): def length_of_lis(seq): if not seq: return 0 lis = [1] * len(seq) for i in range(1, len(seq)): for j in range(0, i): if seq[i] > seq[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) results = [] for lst in lists: results.append(length_of_lis(lst)) return results"},{"question":"You have been tasked with developing a new software component for a telecommunications company. The software requires the creation of a network map based on initial data about connections between different nodes. Your task is to identify and report the size of the largest connected network of nodes. The network is represented as an undirected graph where each node is connected to one or more other nodes. Nodes are identified by integers ranging from 0 to N-1. A connected component is a set of nodes that are all reachable from each other. The size of a connected component is the number of nodes it contains. Input The first line contains two space-separated integers, N and M, where 1 ≤ N ≤ 100 and 0 ≤ M ≤ N*(N-1)/2. N represents the number of nodes, and M represents the number of edges. Each of the following M lines contains two space-separated integers, u and v, indicating that there is an edge between node u and node v (0 ≤ u, v ≤ N-1). Output The size of the largest connected component in the network. Examples Input 5 4 0 1 0 2 1 2 3 4 Output 3 Input 6 3 0 1 0 2 3 4 Output 3 Input 4 0 Output 1 Input 7 6 0 1 1 2 2 3 3 4 4 5 5 6 Output 7 Note In the first example, there are three connected components: {0,1,2}, {3,4}, and {5}. The largest connected component has 3 nodes. In the second example, we again have three connected components: {0,1,2}, {3,4}, and {5,6}. The largest connected component has 3 nodes. In the third example, there are 4 nodes with no edges, so each node is its own connected component and the largest has size 1. In the fourth example, all nodes are connected in a single component, making its size 7.","solution":"def largest_connected_component_size(N, M, edges): def dfs(node): stack = [node] size = 0 while stack: u = stack.pop() if not visited[u]: visited[u] = True size += 1 for v in graph[u]: if not visited[v]: stack.append(v) return size # Initialize the graph graph = {i: [] for i in range(N)} # Add the edges for u, v in edges: graph[u].append(v) graph[v].append(u) # Track visited nodes visited = [False] * N largest_size = 0 # Iterate over all nodes for i in range(N): if not visited[i]: component_size = dfs(i) largest_size = max(largest_size, component_size) return largest_size"},{"question":"Mikan is playing a game on a grid. The grid has R rows and C columns, and each cell contains a positive integer representing a certain number of points. Mikan can only move right or down from the top-left corner (1,1) to the bottom-right corner (R,C). Along the way, Mikan collects the points contained in each cell she visits. Mikan wants to maximize the total points collected by the time she reaches the bottom-right corner. Determine the maximum points Mikan can collect. Constraints: * 1 ≤ R, C ≤ 100 * 1 ≤ points in each cell ≤ 100 Input: Input is given from Standard Input in the following format: R C grid[1][1] grid[1][2] ... grid[1][C] grid[2][1] grid[2][2] ... grid[2][C] ... grid[R][1] grid[R][2] ... grid[R][C] Output: Print the maximum points Mikan can collect. Examples: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Input: 4 4 1 3 1 5 1 5 1 2 4 2 1 3 2 1 1 1 Output: 16","solution":"def max_points(R, C, grid): # Create a DP table with the same dimensions as the grid dp = [[0] * C for _ in range(R)] # Initialize the top-left corner with the first cell value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from the top) for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is in the bottom-right corner of the DP table return dp[R-1][C-1] # Sample code to take inputs and return output def main(): import sys input = sys.stdin.read data = input().strip().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for i in range(R): row = list(map(int, data[index:index+C])) grid.append(row) index += C print(max_points(R, C, grid)) if __name__ == \\"__main__\\": main()"},{"question":"**Problem Statement** You are designing an algorithm to play a strategic game called \\"Coin Collector.\\" The game involves collecting coins from a grid, where each cell of the grid may contain a positive amount of coins or be empty. Both players start at opposite corners of the grid and take turns moving east or south until one reaches the other player\'s starting position. Each player collects the coins present in the cells they visit. The goal is to maximize the difference in coins collected between the two players. * The game is played on an `n x n` grid. * Player 1 starts at the top-left corner of the grid (`0,0`). * Player 2 starts at the bottom-right corner of the grid (`n-1,n-1`). * Players take turns moving either east (`+1` on the x-axis) or south (`+1` on the y-axis`) along the grid. * The moves are made alternately, starting with Player 1. * Players cannot move beyond the borders of the grid. * If both players reach the other\'s starting position, the game ends and the player with the maximum number of coins wins. Given the grid and the number of coins in each cell, output the difference in the total number of coins collected between Player 1 and Player 2 when both players play optimally. # Input The input consists of a single test case in the following format: ``` n grid ``` * `n` (1 ≤ n ≤ 50): the size of the grid (n x n). * `grid`: an `n x n` grid of integers, where each integer represents the number of coins in that cell (0 ≤ coins ≤ 100). # Output Output the difference in the total number of coins collected between Player 1 and Player 2 when both players play optimally. # Sample Input 1 ``` 3 1 2 3 4 5 6 7 8 9 ``` # Output for Sample Input 1 ``` 0 ``` # Explanation for Sample Input 1 - Both players will move east or south collecting coins optimally. - If both play optimally, they will balance each other out, leading to no advantage for either player. # Sample Input 2 ``` 2 1 2 3 4 ``` # Output for Sample Input 2 ``` 0 ``` # Explanation for Sample Input 2 - As both players start at the corners and move optimally, their total amounts of collected coins would be equal. # Sample Input 3 ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` # Output for Sample Input 3 ``` 0 ``` # Explanation for Sample Input 3 - Again, both players will reach an equal amount of coins when moving optimally. **Note:** The players will try to maximize their coin collection while minimizing the coins collected by the opponent, leading to a balance in optimal scenarios.","solution":"def coin_collector_difference(n, grid): # Dynamic programming approach to calculate the max coins can be collected dp1 = [[0] * n for _ in range(n)] dp2 = [[0] * n for _ in range(n)] # dp1 for Player 1 moving from (0,0) to (n-1,n-1) dp1[0][0] = grid[0][0] for i in range(1, n): dp1[i][0] = dp1[i-1][0] + grid[i][0] dp1[0][i] = dp1[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp1[i][j] = grid[i][j] + max(dp1[i-1][j], dp1[i][j-1]) # dp2 for Player 2 moving from (n-1,n-1) to (0,0) dp2[n-1][n-1] = grid[n-1][n-1] for i in range(n-2, -1, -1): dp2[i][n-1] = dp2[i+1][n-1] + grid[i][n-1] dp2[n-1][i] = dp2[n-1][i+1] + grid[n-1][i] for i in range(n-2, -1, -1): for j in range(n-2, -1, -1): dp2[i][j] = grid[i][j] + max(dp2[i+1][j], dp2[i][j+1]) # The difference between the coins collected by Player 1 and Player 2 player1_coins = dp1[n-1][n-1] player2_coins = dp2[0][0] return player1_coins - player2_coins"},{"question":"In a game development process, you are asked to design a grid-based map for a dungeon crawler game. The game map is represented as a 2D grid of size n x m where each cell can either be an open space (\'.\') or a wall (\'#\'). The player starts at the top-left corner of the map (0, 0) and the goal is to reach the bottom-right corner (n-1, m-1). The player can only move right or down at each step. Your task is to write a function that determines the number of different paths the player can take to reach the goal. Since the number of paths can be very large, return the result modulo (10^9 + 7). Input Two integers n and m (1 <= n, m <= 500) and a list of n strings of length m representing the grid. Output Output the number of different paths from the top-left corner to the bottom-right corner, modulo (10^9 + 7). Example Input 1: 3 3 ... .#. ... Output 1: 2 Input 2: 2 2 .. .. Output 2: 2 Input 3: 2 2 .# .. Output 3: 1 Explanation: For Input 1, there are two paths: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) and (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). For Input 2, there are two paths: (0,0) -> (0,1) -> (1,1) and (0,0) -> (1,0) -> (1,1). For Input 3, there is one path: (0,0) -> (1,0) -> (1,1).","solution":"def num_paths(n, m, grid): MOD = 10**9 + 7 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 if grid[0][0] == \\".\\" else 0 for i in range(n): for j in range(m): if grid[i][j] == \\".\\": if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1] # Example usage (not part of the solution function): # n = 3 # m = 3 # grid = [ # \\"...\\", # \\".#.\\", # \\"...\\" # ] # print(num_paths(n, m, grid)) # Output: 2"},{"question":"Write a program that reads an integer N and prints \\"Prime\\" if N is a prime number and \\"Not Prime\\" otherwise. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Input The first line of the input contains a single integer T, the number of test cases. Each of the following T lines contains a single integer N. Output For each test case, output either \\"Prime\\" or \\"Not Prime\\" on a new line. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^18 Examples Input: 4 2 4 17 21 Output: Prime Not Prime Prime Not Prime Explanation For each given integer N, determine if it is a prime number: - 2 is a prime number. - 4 is not a prime number (divisible by 2). - 17 is a prime number. - 21 is not a prime number (divisible by 3).","solution":"def is_prime(n): Returns \\"Prime\\" if n is a prime number and \\"Not Prime\\" otherwise. if n <= 1: return \\"Not Prime\\" if n <= 3: return \\"Prime\\" if n % 2 == 0 or n % 3 == 0: return \\"Not Prime\\" i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return \\"Not Prime\\" i += 6 return \\"Prime\\" def check_primes(test_cases): Returns a list of results for each test case. results = [] for n in test_cases: results.append(is_prime(n)) return results"},{"question":"story Lila is a passionate botanist and has recently started her own garden. She is very meticulous about the watering schedule of her plants. Lila wants to ensure that every plant in her garden gets watered exactly once within a fixed schedule to minimize water usage and maximize plant health. She has devised a schedule that repeats every N days. Each day, a certain number of plants (which may not be the same every day) are marked to be watered. Lila can only water a plant on the days it is marked. She needs to create a watering plan that ensures all plants are watered exactly once over the N days. Since Lila has a large variety of plants, she wants to know in how many different ways she can create such a watering schedule for her garden. problem Given two integers N and P, where N represents the number of days and P represents the number of plants, determine the number of ways to assign watering days to all P plants such that each plant is watered exactly once within the N-day schedule. The answer can be very large, so return the result modulo a prime number M. Input format N P M Constraint * 3 leq N leq 1,000 * 1 leq P leq N * 10 ^ 8 leq M leq 10 ^ 9 + 7 * M is guaranteed to be prime Output format Output the remainder of dividing the number of valid watering schedules by M. Input example 1 5 3 1000000007 Output example 1 60 For N = 5 and P = 3, there are several ways to distribute the watering schedule over 5 days. One such valid way is: - Plant 1: Day 1 - Plant 2: Day 3 - Plant 3: Day 5 Input example 2 7 4 998244353 Output example 2 840 Note that the remainder after dividing by M is output. Example Input 5 3 1000000007 Output 60","solution":"from math import comb def watering_schedule(N, P, M): Returns the number of ways to assign watering days to P plants in an N-day schedule modulo M. Parameters: N (int): Number of days in the schedule. P (int): Number of plants to be watered. M (int): Prime number to modulo the result with. Returns: int: The number of valid watering schedules modulo M. # Number of ways to choose P days out of N days result = comb(N, P) % M # Each plant can be assigned to any of the chosen days in P! ways # So we compute P! % M factorial = 1 for i in range(2, P + 1): factorial = (factorial * i) % M result = (result * factorial) % M return result"},{"question":"A social network site allows users to register an account and connect with each other by sending and accepting friend requests. Each user can send a friend request to another user. To simplify the system, consider each user as a node in a graph and every friendship as an undirected edge between two nodes. You are tasked with implementing a feature to display the shortest connection path between two users. If there is no path connecting the two users, the system should indicate that as well. Input format: - The first line contains a single integer T, denoting the number of test cases. - For each test case: - The first line contains two integers N and M, denoting the number of users and the number of friendships respectively. - Each of the next M lines contains two integers u and v, indicating that user u and user v are friends. - The next line contains two integers A and B, denoting the users for whom the shortest connection path needs to be found. Output format: For each test case, output the shortest connection path as a sequence of user IDs. If there is no path, output \\"NO CONNECTION\\". Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ M ≤ 5000 1 ≤ u, v, A, B ≤ N SAMPLE INPUT: 2 5 4 1 2 2 3 3 4 4 5 1 5 3 2 1 2 2 3 1 3 SAMPLE OUTPUT: 1 2 3 4 5 1 2 3 Explanation: In the first test case, the shortest path from user 1 to user 5 is 1 -> 2 -> 3 -> 4 -> 5. In the second test case, the shortest path from user 1 to user 3 is 1 -> 2 -> 3.","solution":"from collections import deque, defaultdict def find_shortest_path(N, M, friendships, A, B): # Create the graph as an adjacency list graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) # Use Breadth-First Search (BFS) to find the shortest path from A to B queue = deque([(A, [A])]) visited = set() while queue: current, path = queue.popleft() if current == B: return path if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return \\"NO CONNECTION\\" def process_test_cases(test_cases): results = [] for N, M, friendships, A, B in test_cases: result = find_shortest_path(N, M, friendships, A, B) if result == \\"NO CONNECTION\\": results.append(result) else: results.append(\' \'.join(map(str, result))) return results"},{"question":"Arkham Traffic Lights The metropolis of Arkham is known for its peculiar traffic light system. The city is laid out as an NxM grid with intersections at each cell. The traffic lights at these intersections can be either green or red. Each traffic light changes its status every T seconds. If a traffic light switches from green to red or vice versa, it remains in that state for exactly T seconds until it switches back. When Mayor Gordon plans the city’s road systems, he often needs to compute the number of green traffic lights at specific times. As a city planner, can you help him? Given an initial configuration of the NxM grid where each cell is either green (G) or red (R), compute the number of green traffic lights after K seconds. # Input The first line of the input contains three integers, N, M, and T (1 ≤ N, M ≤ 100, 1 ≤ T ≤ 100), separated by a space. The next N lines describe the initial configuration of the grid with M characters each, where \'G\' represents a green light and \'R\' represents a red light. The last line contains an integer K (1 ≤ K ≤ 10^6), which is the number of seconds after the initial configuration you have to compute the number of green lights. # Output Output a single integer, the number of green traffic lights after K seconds. # Example Input ``` 3 4 2 GRRG RGRG GRGR 6 ``` Output ``` 6 ``` # Explanation - Initially: ``` GRRG RGRG GRGR ``` - After 2 seconds: ``` RRGG GRGR RGRG ``` - After 4 seconds: ``` GRRG RGRG GRGR ``` - After 6 seconds: ``` RRGG GRGR RGRG ``` 6 cells are green after 6 seconds. **Note:** Each light will continue toggling every T seconds, so after a full cycle of 2T seconds, the grid will revert to its initial configuration. Therefore, calculating K modulo 2T helps determine the grid state at time K efficiently.","solution":"def count_green_lights(N, M, T, grid, K): Returns the number of green lights after K seconds. :param N: Number of rows in the grid :param M: Number of columns in the grid :param T: Time interval at which traffic lights change state :param grid: Initial configuration of the grid :param K: Number of seconds after the initial configuration :return: Number of green lights after K seconds # Calculate the effective time after considering full cycles (2T) effective_time = K % (2 * T) if effective_time < T: # Grid remains the same as initial or toggled once if within the first cycle final_grid = grid else: # Grid toggled once if within the second cycle final_grid = [[\\"R\\" if cell == \\"G\\" else \\"G\\" for cell in row] for row in grid] # Count the number of green lights in the final grid configuration green_count = sum(row.count(\'G\') for row in final_grid) return green_count # Example usage: # N, M, T = 3, 4, 2 # grid = [ # \\"GRRG\\", # \\"RGRG\\", # \\"GRGR\\" # ] # K = 6 # print(count_green_lights(N, M, T, grid, K)) # Output: 6"},{"question":"In a galaxy far, far away, a space research organization is monitoring signals from an unknown alien civilization. The signals are received in a sequence of numbers that follow a certain pattern, which represents the sum of the first N positive even numbers. The organization needs your help to decode the signals and decipher the actual sum for various given values of N. The sum of the first N positive even numbers can be calculated using the formula: ( S = N times (N + 1) ) Given a list of values for N, write a program that calculates the sum of the first N positive even numbers for each of these values. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single integer N. Output: Output contains T lines, each line containing the sum of the first N positive even numbers for the corresponding value of N. Constraints: 1 ≤ T ≤ 10^6 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 1 2 10 SAMPLE OUTPUT 2 6 110","solution":"def sum_of_first_n_even_numbers(N): Returns the sum of the first N positive even numbers. The formula to calculate the sum is: S = N * (N + 1) return N * (N + 1) def process_test_cases(T, test_cases): Processes multiple test cases and returns the sums of the first N positive even numbers. Parameters: T (int): Number of test cases. test_cases (list): List of integers where each integer represents a value of N. Returns: list: List of sums for the given test cases. results = [] for N in test_cases: results.append(sum_of_first_n_even_numbers(N)) return results"},{"question":"In a city, people can travel using a public bike-sharing system that has various stations spread throughout. Each station `i` has a certain number of available bikes `bi`, and the system operates in a cyclic manner such that after the last station, it loops back to the first station. You are given a list of bike requests, where each request is represented by a tuple `(si, ti, d)`. Here, `si` is the starting station, `ti` is the target station, and `d` is the number of bikes required to fulfill the request. Bikes can be picked up at the starting station `si` and must be dropped off at the target station `ti`. Your task is to determine whether it is possible to fulfill all given requests simultaneously such that no station has a negative number of bikes at any point in the cycle. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The first line contains an integer `m` (1 ≤ m ≤ 100), the number of stations. The second line contains `m` integers `b1, b2, ..., bm` (0 ≤ bi ≤ 1000), representing the number of bikes available at each station initially. The third line contains an integer `n` (1 ≤ n ≤ 100), the number of bike requests. The next `n` lines each contain three integers `si, ti, d` (1 ≤ si, ti ≤ m and 1 ≤ d ≤ 100), representing the bike requests. Output Print \\"YES\\" if all requests can be fulfilled simultaneously without any station\'s bike count dropping below zero, otherwise print \\"NO\\". Examples Input 5 3 2 1 5 4 3 1 3 2 4 2 3 5 1 1 Output YES Input 4 2 3 4 1 2 3 1 5 2 4 2 Output NO Note In the first example, the requests can be fulfilled by taking 2 bikes from station 1 (leaving 1 bike), 3 bikes from station 4 (leaving 2 bikes), and 1 bike from station 5 (leaving 3 bikes), without any station running out of bikes. In the second example, fulfilling the first request alone results in station 3 having a negative number of bikes, hence it is not possible to fulfill all requests simultaneously.","solution":"def can_fulfill_requests(m, bikes, n, requests): bike_count = bikes[:] # create a copy to avoid modifying the original list for si, ti, d in requests: if bike_count[si - 1] < d: return \\"NO\\" bike_count[si - 1] -= d bike_count[ti - 1] += d return \\"YES\\" # Example Inputs for direct function call testing, remove this on actual unit tests m = 5 bikes = [3, 2, 1, 5, 4] n = 3 requests = [(1, 3, 2), (4, 2, 3), (5, 1, 1)] print(can_fulfill_requests(m, bikes, n, requests)) # Outputs: YES m = 4 bikes = [2, 3, 4, 1] n = 2 requests = [(3, 1, 5), (2, 4, 2)] print(can_fulfill_requests(m, bikes, n, requests)) # Outputs: NO"},{"question":"In a remote village, there is a popular tradition of making patterns using colored stones. Each stone has a unique color represented by a number. The villagers create a straight line of stones and adjust them until they form a beautiful pattern. You\'ve been asked to make the patterns more interesting through programming. You are given a sequence of stones with their respective colors and need to determine the longest subsequence of stones that can be rearranged to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of stones in the sequence. The second line contains n integers where the i-th integer represents the color c_i (1 ≤ c_i ≤ 100,000) of the i-th stone. Output Output a single integer, the length of the longest palindromic subsequence of stones. Example Input 7 1 2 3 4 3 2 1 Output 7 Input 5 4 1 2 1 4 Output 5 Input 6 1 2 3 4 5 6 Output 1 Note In the first sample, the entire sequence 1 2 3 4 3 2 1 is a palindrome. In the second sample, the sequence 4 1 2 1 4 can be rearranged to form a palindrome. In the third sample, no stones can be rearranged into a longer palindrome than a single stone itself.","solution":"from collections import Counter def longest_palindromic_subsequence_length(n, stones): count = Counter(stones) length = 0 odd_count = 0 for c in count.values(): if c % 2 == 0: length += c else: length += c - 1 odd_count += 1 if odd_count > 0: length += 1 return length"},{"question":"A company is developing a platform to manage its employees\' tasks. Each employee can have multiple tasks assigned to them. When a new task is assigned to an employee, it is appended to their list of tasks. The company wants to implement a feature where an employee can reassign a specific task to another employee, while maintaining the order of the other tasks. Your task is to simulate the reassignment process and produce the final list of tasks for each employee after all assignments and reassignments. Input The first line contains an integer t (1 ≤ t ≤ 100 000) — the total number of commands. The next t lines describe the commands. Each command follows one of the two formats: - \\"assign <employee_name> <task>\\" — Assign a new task to the specified employee. - \\"reassign <old_employee_name> <task> <new_employee_name>\\" — Reassign the specified task from the old employee to the new employee. It is guaranteed that each task and employee name is a non-empty sequence of lowercase English letters of length at most 10. Output For each employee who has at least one task assigned by the end of all commands, output their name followed by their list of tasks in the order they were assigned or reassigned. Employees with no tasks at the end should not be included in the output. Print employees in the order of their first appearance in the input. Examples Input 8 assign alice task1 assign bob task2 assign alice task3 reassign alice task1 bob assign chuck task4 assign alice task5 reassign bob task1 chuck assign bob task6 Output alice task3 task5 bob task2 task6 chuck task4 task1 Note In the first test case: - \\"alice\\" is first assigned \\"task1\\" and then \\"task3\\", the list looks as follows: [task1, task3] - \\"bob\\" is assigned \\"task2\\", the list looks as follows: [task2] - Then, \\"task1\\" is reassigned from \\"alice\\" to \\"bob\\". Now \\"alice\\" has [task3] and \\"bob\\" has [task2, task1]. - \\"chuck\\" is assigned \\"task4\\". - \\"alice\\" is assigned \\"task5\\", so she now has [task3, task5]. - Then, \\"task1\\" is reassigned from \\"bob\\" to \\"chuck\\". Now \\"bob\\" has [task2] and \\"chuck\\" has [task4, task1]. - Finally, \\"bob\\" is assigned \\"task6\\", so he now has [task2, task6].","solution":"def manage_tasks(t, commands): employee_tasks = {} employee_order = [] for command in commands: parts = command.split() if parts[0] == \'assign\': employee_name = parts[1] task = parts[2] if employee_name not in employee_tasks: employee_tasks[employee_name] = [] employee_order.append(employee_name) employee_tasks[employee_name].append(task) elif parts[0] == \'reassign\': old_employee_name = parts[1] task = parts[2] new_employee_name = parts[3] if old_employee_name in employee_tasks and task in employee_tasks[old_employee_name]: if new_employee_name not in employee_tasks: employee_tasks[new_employee_name] = [] employee_order.append(new_employee_name) employee_tasks[old_employee_name].remove(task) employee_tasks[new_employee_name].append(task) result = [] for employee in employee_order: if employee_tasks[employee]: result.append(f\\"{employee} {\' \'.join(employee_tasks[employee])}\\") return result"},{"question":"Given a list of integers, perform a \\"Chunk Reverse\\" operation. In a Chunk Reverse, you need to reverse the order of every k elements in the list. If there are fewer than k elements remaining towards the end, reverse all of them. INPUT The first line of the input contains an integer T, the number of test cases. For each test case: - A line with two integers n and k, where n is the number of elements in the list and k is the chunk size. - A subsequent line with n integers describing the list. OUTPUT For each test case, output the chunk-reversed list as a space-separated string of integers. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ k ≤ n -10000 ≤ Each integer in the list ≤ 10000 SAMPLE INPUT 2 6 2 1 2 3 4 5 6 5 3 9 8 7 6 5 SAMPLE OUTPUT 2 1 4 3 6 5 7 8 9 5 6 Explanation CASE 1: The list is split into chunks [1, 2], [3, 4], [5, 6]. Each chunk is reversed to get [2, 1], [4, 3], [6, 5]. Concatenating them gives the result. CASE 2: The list is split into chunks [9, 8, 7], [6, 5]. Reversing each chunk yields [7, 8, 9], [5, 6]. The final list concatenation results in 7 8 9 5 6.","solution":"def chunk_reverse(T, test_cases): results = [] for i in range(T): n, k = test_cases[i][0] arr = test_cases[i][1] result = [] for j in range(0, n, k): chunk = arr[j:j+k] result.extend(chunk[::-1]) results.append(\' \'.join(map(str, result))) return results"},{"question":"Laura is participating in a string transformation challenge. She needs to transform a given string into another string using a specific set of operations. The operations allowed are as follows: 1. Insert a character at any position in the string. 2. Remove a character from any position in the string. 3. Replace a character at any position in the string with another character. Given two strings `start` and `target`, your task is to find the minimum number of operations required to transform the string `start` into the string `target`. Input The first line of input contains a string `start` (1 ≤ length of start ≤ 105). The second line of input contains a string `target` (1 ≤ length of target ≤ 105). Output Output a single integer, the minimum number of operations required to transform the string `start` into the string `target`. Examples Input horse ros Output 3 Explanation One possible sequence of operations to transform \\"horse\\" to \\"ros\\": 1. Replace \'h\' with \'r\': \\"rorse\\" 2. Remove \'r\': \\"rose\\" 3. Remove \'e\': \\"ros\\" Input intention execution Output 5 Explanation One possible sequence of operations to transform \\"intention\\" to \\"execution\\": 1. Replace \'i\' with \'e\': \\"entention\\" 2. Replace \'n\' with \'x\': \\"extention\\" 3. Replace \'t\' with \'e\': \\"execution\\" 4. Remove \'n\': \\"execution\\" 5. Insert \'u\' after \'c\': \\"execution\\"","solution":"def min_operations(start, target): Returns the minimum number of operations required to transform the start string into the target string. m, n = len(start), len(target) # Create a DP table to store the edit distance dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): # If the characters are the same, no operation is required if start[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: # If characters are different, consider all operations (insert, remove, replace) dp[i][j] = min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) + 1 return dp[m][n]"},{"question":"Mary is playing a game with a sequence of numbers. She starts with a sequence consisting of N integers: a_1, a_2, ..., a_N. Her goal is to make all elements of the sequence equal by performing a specific operation any number of times. The operation is defined as follows: * Choose any two distinct elements from the sequence, subtract the smaller element from the larger element, and replace the larger element with the result. Determine the minimum number of operations required to make all elements of the sequence equal. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ a_i ≤ 10^9 (1 ≤ i ≤ N) Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the minimum number of operations required to make all elements of the sequence equal. Examples Input 3 2 4 6 Output 3 Input 5 10 15 20 25 30 Output 5 Input 4 1 1000000000 500000000 1000000000 Output 999999999","solution":"from math import gcd from functools import reduce def minimum_operations_to_equalize_sequence(n, sequence): def find_gcd_of_list(nums): return reduce(gcd, nums) result_gcd = find_gcd_of_list(sequence) return n"},{"question":"On a distant planet called Xanobos, a special festival is celebrated every year where they construct a massive rectangular grid of colorful tiles. Each tile is either red or blue. Festival rules dictate that no row or column should have more than one red tile. The festival organizers aim to construct the grid in such a way that it is both visually appealing and adheres to the festival rules. Given the dimensions of the grid, your task is to determine the maximum number of red tiles that can be placed on the grid while still adhering to the rule that no row or column can have more than one red tile. Input Format: The first line contains an integer t, denoting the number of test cases. For each test case, there is one line containing two integers n and m, representing the number of rows and columns in the grid. Output Format: For each test case, output a single integer - the maximum number of red tiles that can be placed on the grid according to the festival rules. Constraints: 1 ≤ t ≤ 100 1 ≤ n, m ≤ 1000 SAMPLE INPUT 3 4 5 6 6 3 2 SAMPLE OUTPUT 4 6 2 Explanation: In the first test case, the grid has 4 rows and 5 columns. The maximum number of red tiles can be 4, since each red tile can occupy one row and one column without violating the rule. In the second test case, 6 red tiles can be placed as it\'s a 6x6 grid. In the third test case, the grid has 3 rows and 2 columns, so only 2 red tiles can be placed, one in each row or one in each column.","solution":"def max_red_tiles(t, test_cases): Determines the maximum number of red tiles that can be placed in each grid while adhering to the festival rules. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers representing the number of rows and columns. Returns: list of int: A list of integers where each integer is the answer for the corresponding test case. results = [] for n, m in test_cases: results.append(min(n, m)) return results"},{"question":"An amusement park has n rides, and each ride has a certain height requirement. Ethan wants to determine which rides he can go on based on his age and height. Additionally, he wants to avoid any ride that has a risk factor higher than a threshold value. You are given information about each ride, which includes the height requirement, risk factor, and an age restriction. Given Ethan\'s height and age, determine how many rides he is eligible to go on, considering his height, age, and the risk factor threshold. Write a function `calculateEligibleRides(height, age, risk_threshold, rides)` that takes the following parameters: - `height`: Ethan\'s height (an integer) - `age`: Ethan\'s age (an integer) - `risk_threshold`: the maximum risk factor Ethan can tolerate (an integer) - `rides`: a list of tuples where each tuple contains three integers representing the height requirement, risk factor, and age restriction of a ride respectively The function should return the number of rides Ethan is eligible for. # Input - `height` (1 ≤ height ≤ 250) - `age` (1 ≤ age ≤ 100) - `risk_threshold` (1 ≤ risk_threshold ≤ 100) - `rides`: A list of tuples where each tuple is of the form (height_requirement, risk_factor, age_restriction). - `height_requirement` (1 ≤ height_requirement ≤ 250) - `risk_factor` (1 ≤ risk_factor ≤ 100) - `age_restriction` (1 ≤ age_restriction ≤ 100) # Output - Return an integer representing the number of rides Ethan can go on. # Examples Example 1: Input: ``` height = 120 age = 10 risk_threshold = 5 rides = [(110, 3, 8), (130, 6, 12), (100, 4, 10)] ``` Output: ``` 2 ``` Explanation: Ethan is 120 cm tall and 10 years old, and he can handle a risk factor of up to 5. - The first ride has a height requirement of 110 cm, a risk factor of 3, and an age restriction of 8. Ethan meets all the requirements, so he can go on this ride. - The second ride has a height requirement of 130 cm (too high for Ethan) and a risk factor of 6 (too high for Ethan), so he can\'t go on this ride. - The third ride has a height requirement of 100 cm, a risk factor of 4, and an age restriction of 10. Ethan meets all the requirements, so he can go on this ride. Thus, Ethan can go on 2 rides. Example 2: Input: ``` height = 140 age = 20 risk_threshold = 7 rides = [(150, 5, 18), (140, 2, 19), (130, 8, 17), (140, 7, 20)] ``` Output: ``` 2 ``` Explanation: - The first ride\'s height requirement is too high for Ethan. - The second ride meets all requirements, so Ethan can go on it. - The third ride\'s risk factor is too high for Ethan. - The fourth ride meets all requirements, so Ethan can go on it. Thus, Ethan can go on 2 rides.","solution":"def calculateEligibleRides(height, age, risk_threshold, rides): Determine the number of rides Ethan is eligible to go on based on his height, age, and the maximum risk factor he can tolerate. Parameters: height (int): Ethan\'s height. age (int): Ethan\'s age. risk_threshold (int): The maximum risk factor Ethan can tolerate. rides (list of tuples): A list of tuples, each containing three integers representing the height requirement, risk factor, and age restriction of a ride respectively. Returns: int: The number of rides Ethan is eligible to go on. eligible_rides = 0 for ride in rides: ride_height, ride_risk, ride_age = ride if height >= ride_height and age >= ride_age and ride_risk <= risk_threshold: eligible_rides += 1 return eligible_rides"},{"question":"Problem You are given an array A of length N where the elements are the first N natural numbers in increasing order. You will be handling two types of operations: 1. Rotate the array by k positions to the right. 2. Find the sum of the elements from index l to index r in the array after any rotations. For example, rotating {1, 2, 3, 4, 5} by 2 positions to the right yields {4, 5, 1, 2, 3}. # Input - The first line contains integers N and Q (1 ≤ N ≤ 10^5, 1 ≤ Q ≤ 2 times 10^5) which denote the length of the array and the number of operations. - The next Q lines describe the operations. Each operation is described in one of the following two ways: - `1 k` (1 ≤ k ≤ N) : Rotate the array k positions to the right. - `2 l r` (1 ≤ l ≤ r ≤ N) : Find the sum of the elements from index l to r in the array (1-based index) after any rotations. # Output For each operation of type 2, output the sum of the specified range. Each result should be printed on a new line. # Example Input ``` 5 5 1 2 2 1 3 1 1 2 2 5 2 1 5 ``` Output ``` 8 14 15 ``` Explanation: Initial array: {1, 2, 3, 4, 5} 1. After `1 2`, array becomes {4, 5, 1, 2, 3}. 2. For `2 1 3`, sum of elements from index 1 to 3 is 4 + 5 + 1 = 10 (0-indexed indices: 0, 1, 2). 3. After `1 1`, array becomes {3, 4, 5, 1, 2}. 4. For `2 2 5`, sum of elements from index 2 to 5 is 4 + 5 + 1 + 2 = 12. 5. For `2 1 5`, sum of elements from index 1 to 5 is 3 + 4 + 5 + 1 + 2 = 15.","solution":"def process_operations(N, Q, operations): arr = list(range(1, N+1)) offset = 0 result = [] for operation in operations: op = operation[0] if op == 1: # Rotation operation k = operation[1] offset = (offset + k) % N elif op == 2: # Sum query operation l = operation[1] - 1 # convert to 0-based index r = operation[2] - 1 # convert to 0-based index start = (l - offset + N) % N end = (r - offset + N) % N if start <= end: result.append(sum(arr[start:end+1])) else: result.append(sum(arr[start:] + arr[:end+1])) return result"},{"question":"In a large natural park, there is a team of rangers responsible for monitoring the park\'s biodiversity. The park is divided into several zones and each zone is interconnected with several other zones. Rangers have set up observation points in some zones to observe the wildlife and track the population of various species of animals. However, due to limited resources, they can only set up a maximum of K observation points. The rangers want to maximize the number of zones that can be monitored directly or indirectly (i.e., if a ranger is in a zone, they can monitor all zones directly connected to it). You are provided with the park\'s map in the form of an undirected graph, where nodes represent zones and edges represent direct paths between zones. Can you determine the maximum number of zones that can be monitored by setting up at most K observation points? **Input** 1. The first line contains two integers, N and E, where N is the number of zones and E is the number of direct paths between zones. 2. Each of the next E lines contains two integers u and v, which indicates that zone u and zone v are directly connected by a path. 3. The last line contains the integer K, the maximum number of observation points that can be set up. **Output** Output the maximum number of zones that can be monitored by setting up at most K observation points. **Constraints** - 1 <= N <= 300 - 0 <= E <= 1000 - 0 <= K <= N - 1 <= u, v <= N - Each pair of zones will appear at most once in the input. **Examples** **Input 1:** ``` 5 4 1 2 2 3 3 4 4 5 2 ``` **Output 1:** ``` 5 ``` **Input 2:** ``` 7 5 1 2 1 3 2 4 3 5 4 6 3 ``` **Output 2:** ``` 7 ``` **Input 3:** ``` 6 3 1 2 2 3 4 5 1 ``` **Output 3:** ``` 3 ``` Explanation of Examples: 1. In the first example, no matter where you place the two observation points, all five zones can be monitored. 2. In the second example, placing observation points in zone 1 and zone 6 covers all 7 zones. 3. In the third example, you can monitor only three zones by placing a single observation point optimally (either covering zones 1, 2, 3 or zones 4, 5).","solution":"from collections import defaultdict, deque def max_zones_monitored(N, E, paths, K): def bfs(zone, visited): queue = deque([zone]) size = 0 while queue: current = queue.popleft() if not visited[current]: visited[current] = True size += 1 for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) return size if K >= N: return N graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) components = [] visited = [False] * (N + 1) for i in range(1, N + 1): if not visited[i]: size = bfs(i, visited) components.append(size) components.sort(reverse=True) return sum(components[:K]) # Example usage: N = 5 E = 4 paths = [(1, 2), (2, 3), (3, 4), (4, 5)] K = 2 print(max_zones_monitored(N, E, paths, K)) # Output: 5"},{"question":"Write a program that determines whether a given number is an Armstrong number. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 153 is an Armstrong number, because 1^3 + 5^3 + 3^3 = 153. Input n - a three-digit integer. Output Print \\"True\\" if the number is an Armstrong number, otherwise print \\"False\\". Example Input: 153 Output: True","solution":"def is_armstrong_number(n): Determines whether a given three-digit number is an Armstrong number. Args: n (int): A three-digit integer. Returns: bool: True if n is an Armstrong number, False otherwise. # Convert the number to a string to access each digit str_n = str(n) # Check if the number is three digits if len(str_n) != 3: return False # Calculate the sum of the cubes of its digits sum_of_cubes = sum(int(digit) ** 3 for digit in str_n) # Check if the sum of cubes is equal to the number itself return sum_of_cubes == n"},{"question":"Obi, a professional snowplow operator, is working tirelessly to clear the streets after a recent snowstorm. Each of the n streets he needs to clear is represented as a line segment on a 2D Cartesian plane, and each street can be described by its endpoints (x1, y1) and (x2, y2). Obi wants to know the total length of all streets he has to clear. Since some streets might overlap partially or entirely, the total length to be cleared should not count any overlapping parts more than once. Your task is to write a program that calculates the total length of the streets that need to be cleared, considering the mentioned overlap. # Input The first line contains the integer n (1 ≤ n ≤ 1000) — the number of streets. Each of the next n lines contains four integers x1, y1, x2, y2 (-1000 ≤ x1, y1, x2, y2 ≤ 1000) — the coordinates of the endpoints of a street. # Output Output a single number — the total length of the streets that need to be cleared. # Examples Example 1 ``` Input 3 0 0 3 0 1 0 4 0 2 0 5 0 Output 5.0 ``` Example 2 ``` Input 1 0 0 4 3 Output 5.0 ``` # Notes In the first example, the streets are provided in the form of line segments on the x-axis. The first street goes from (0, 0) to (3, 0), the second street from (1, 0) to (4, 0), and the third street from (2, 0) to (5, 0). The total length calculated should account for the overlapping parts and sum up to a length of 5.0 units. In the second example, there is a single street from (0, 0) to (4, 3), whose length can be calculated using the Euclidean distance formula resulting in a length of 5.0 units.","solution":"from math import sqrt def calculate_distance(x1, y1, x2, y2): Calculates the Euclidean distance between two points (x1, y1) and (x2, y2) return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def union_line_segments(segments): Function to calculate the union of 2D line segments and return the total length without counting overlaps multiple times. def lee(x0, y0, x1, y1): \\"Return segment sorted, to ease further sorting\\" return ((x0, y0, x1, y1) if (x0, y0) <= (x1, y1) else (x1, y1, x0, y0)) segments = [lee(x0, y0, x1, y1) for x0, y0, x1, y1 in segments] segments.sort() merged_segments = [] last_p = segments[0] for p in segments[1:]: if (p[0], p[1]) <= (last_p[2], last_p[3]): if (p[2], p[3]) > (last_p[2], last_p[3]): last_p = last_p[:2] + p[2:] else: merged_segments.append(last_p) last_p = p merged_segments.append(last_p) def length_segments(segments): length = 0 for x0, y0, x1, y1 in segments: length += calculate_distance(x0, y0, x1, y1) return length return length_segments(merged_segments) def total_street_length(n, street_segments): Given number of street segments and respective endpoints, return the total length after merging overlaps. return union_line_segments(street_segments)"},{"question":"Weighted undirected Graph Traversal Consider a weighted undirected graph with n vertices and m edges. You are given a special node called the \\"starting node\\". Your task is to find the shortest path from the starting node to every other node in the graph using Dijkstra’s algorithm. Each node is uniquely identified by an integer from 1 to n. The starting node is given as an input, along with an adjacency list where each pair of integers (u, v, w) denotes an edge between node u and node v with weight w. Write a program that outputs the shortest distance from the starting node to every other node. If a node is unreachable from the starting node, output -1 for that node. Input - The first line contains two integers n and m (1 ≤ n ≤ 200, 1 ≤ m ≤ 1000) — the number of vertices and edges. - The second line contains a single integer, the index of the starting node. - The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — representing an edge between nodes u and v with weight w. Output - Print n integers, where the i-th integer represents the shortest distance from the starting node to the i-th node. If a node is unreachable, print -1 instead. The distance to the starting node itself should be 0. Examples Input 4 4 1 1 2 1 1 3 4 2 3 2 3 4 1 Output 0 1 3 4 Input 3 1 1 2 3 1 Output 0 -1 -1","solution":"import heapq def dijkstra(n, m, starting_node, edges): adjacency_list = {i: [] for i in range(1, n+1)} for u, v, w in edges: adjacency_list[u].append((v, w)) adjacency_list[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[starting_node] = 0 min_heap = [(0, starting_node)] while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > distances[current_node]: continue for neighbor, weight in adjacency_list[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) result = [] for i in range(1, n+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Given a positive integer `n`, write a function that generates all possible strings of length `n` that can be formed from the characters \'a\', \'b\', and \'c\'. Each character can be used any number of times in any position. Input An integer `n` (0 <= n <= 10). Output A list of strings that contains all possible strings of length `n` formed from \'a\', \'b\', and \'c\'. The list should be displayed in lexicographically sorted order. Example Input 1: 2 Output 1: [\'aa\', \'ab\', \'ac\', \'ba\', \'bb\', \'bc\', \'ca\', \'cb\', \'cc\'] Input 2: 3 Output 2: [\'aaa\', \'aab\', \'aac\', \'aba\', \'abb\', \'abc\', \'aca\', \'acb\', \'acc\', \'baa\', \'bab\', \'bac\', \'bba\', \'bbb\', \'bbc\', \'bca\', \'bcb\', \'bcc\', \'caa\', \'cab\', \'cac\', \'cba\', \'cbb\', \'cbc\', \'cca\', \'ccb\', \'ccc\']","solution":"from itertools import product def generate_strings(n): Generates all possible strings of length n using the characters \'a\', \'b\', and \'c\'. if n == 0: return [\\"\\"] return [\'\'.join(p) for p in product(\'abc\', repeat=n)]"},{"question":"The Christmas lights project requires a specified number of lights of different colors to be strung along a fence. You have an array representing the number of lights required for each color. We need to ensure that each color is distributed as evenly as possible across the length of the fence, but exact equal distribution may not always be possible. Your task is to determine the minimum length of the fence required such that all of the lights fit and each segment of the fence contains one or more lights of each color, while minimizing the number of segments. Input: First line contains a single integer T denoting the number of test cases. First line of each test case contains a single integer N denoting the number of different colors. Second line of each test case contains N space-separated integers denoting the number of lights required for each color. Output: For each test case, output a single integer denoting the minimum length of the fence required. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Li ≤ 10000 (where Li is the number of lights of the i-th color) SAMPLE INPUT 2 3 8 6 9 4 5 2 3 7 SAMPLE OUTPUT 23 17","solution":"import math def minimum_fence_length(num_cases, cases): results = [] for case in cases: num_colors, lights = case length = sum(lights) results.append(length) return results def process_input(input_data): lines = input_data.strip().split(\'n\') num_cases = int(lines[0]) cases = [] index = 1 for _ in range(num_cases): num_colors = int(lines[index]) lights = list(map(int, lines[index+1].strip().split())) cases.append((num_colors, lights)) index += 2 return num_cases, cases # Sample inputs input_data = 2 3 8 6 9 4 5 2 3 7 num_cases, cases = process_input(input_data) results = minimum_fence_length(num_cases, cases) for result in results: print(result)"},{"question":"The town of Algoraville is organizing a festival and they want to put up different decorations along the main road. To make it more interesting, they’ve decided to use colorful lights. Each light has a specific color and each color has a specific value assigned to it. They want to arrange the lights along the road in such a way that no two adjacent lights have the same color. Given an array of integers where each integer represents the color of a light and its value, determine the maximum possible sum of values for the decorations while ensuring no two adjacent lights have the same color. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai represents the value of the i-th light. Output The first line must contain a single integer, the maximum possible sum of values for the decorations. Examples Input 5 3 2 3 2 3 Output 9 Input 4 1 100 1 100 Output 200","solution":"def max_decorations_sum(n, arr): # Initialize DP table to store maximum sums if n == 0: return 0 if n == 1: return arr[0] dp = [0] * n dp[0] = arr[0] dp[1] = max(arr[0], arr[1]) for i in range(2, n): # Either pick the current element and the best up to i-2 # or skip the current element and take the best up to i-1 dp[i] = max(arr[i] + dp[i - 2], dp[i - 1]) return dp[-1]"},{"question":"Olivia and Ivan are working on a project together. To complete the project, they need to divide the tasks between them. There are n tasks labeled from 1 to n. Each task i has a difficulty level di which is an integer. Olivia prefers taking tasks with lower difficulty, while Ivan prefers taking tasks with higher difficulty. They take turns to select tasks. Olivia goes first. Each turn, a player chooses one task from the remaining tasks. Olivia always chooses the task with the lowest difficulty available, while Ivan always chooses the task with the highest difficulty available. The process continues until all the tasks are assigned. Given the list of task difficulties, determine the tasks that Olivia and Ivan will end up with after all tasks have been assigned optimally. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of tasks. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 109), representing the difficulty levels of the tasks. Output Print two lines. The first line contains the difficulties of the tasks that Olivia ends up with, sorted in increasing order. The second line contains the difficulties of the tasks that Ivan ends up with, sorted in decreasing order. Examples Input 6 6 4 3 7 8 2 Output 2 3 4 8 7 6 Input 5 5 2 9 1 3 Output 1 2 3 9 5 Note In the first example, Olivia would first take the task with difficulty 2, Ivan would take the task with difficulty 8, Olivia would take 3, Ivan would take 7, Olivia would take 4, and Ivan would take 6. Thus, Olivia ends up with 2, 3, and 4, while Ivan ends up with 8, 7, and 6. In the second example, Olivia would first take the task with difficulty 1, Ivan would take the task with difficulty 9, Olivia would take 2, Ivan would take 5, and Olivia would take 3. Thus, Olivia ends up with 1, 2, and 3, while Ivan ends up with 9 and 5.","solution":"def distribute_tasks(n, tasks): Distribute tasks between Olivia and Ivan. Parameters: n (int): Number of tasks. tasks (list): List containing the difficulty levels of tasks. Returns: tuple: Two lists representing the tasks for Olivia and Ivan. # Sort the tasks tasks.sort() # Olivia prefers the lowest, Ivan prefers the highest olivia_tasks = [] ivan_tasks = [] for i in range(n): if i % 2 == 0: olivia_tasks.append(tasks[i // 2]) else: ivan_tasks.append(tasks[-(i // 2 + 1)]) return olivia_tasks, ivan_tasks"},{"question":"Alice is practicing subtraction to prepare for her math exam. She has written down a sequence of `n` positive integers on a piece of paper. She wants to perform a series of operations on this sequence until all the numbers in the sequence are equal. In each operation, Alice will choose two distinct integers from the sequence and subtract the smaller integer from the larger integer, replacing the larger integer with the result of the subtraction. She continues this process until all numbers in the sequence are the same. Alice is curious to know what the final value of the numbers will be after all possible operations have been performed. Could you help Alice find out the final value of the integers in the sequence? Input The first line of input contains an integer `n` (2 ≤ n ≤ 1000) — the number of integers in the sequence. The second line of input contains `n` positive integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the integers in the sequence. Output Print the final value of the integers in the sequence after performing all possible operations. Example Input 4 6 9 15 21 Output 3 Explanation Initial sequence: 6 9 15 21 1. Subtract 6 from 9: sequence becomes 6 3 15 21 2. Subtract 3 from 6: sequence becomes 3 3 15 21 3. Subtract 3 from 15: sequence becomes 3 3 12 21 4. Subtract 3 from 12: sequence becomes 3 3 9 21 5. Subtract 3 from 9: sequence becomes 3 3 3 21 6. Subtract 3 from 21: sequence becomes 3 3 3 18 7. Subtract 3 from 18: sequence becomes 3 3 3 15 8. Subtract 3 from 15: sequence becomes 3 3 3 12 9. Subtract 3 from 12: sequence becomes 3 3 3 9 10. Subtract 3 from 9: sequence becomes 3 3 3 6 11. Subtract 3 from 6: sequence becomes 3 3 3 3 All numbers become equal to 3.","solution":"from math import gcd from functools import reduce def final_equal_value(n, sequence): Return the final value of the integers in the sequence after performing all the operations. The final value is the greatest common divisor (GCD) of all the integers in the sequence. return reduce(gcd, sequence)"},{"question":"A restaurant chain is expanding its branches and wants to optimize the delivery routes to serve the maximum number of customers efficiently. Each branch can only serve customers within a specific time range based on the start of the delivery. The restaurant wants to know which branch can serve the most customers. The city has `n` branches, and each branch i can start serving customers at time `si` and will be able to continue serving for `D` seconds. Additionally, each customer j places their order at time `tj`. Determine the maximum number of customers that can be served if the deliveries are optimized for the most advantageous branch. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), where `n` is the number of branches and `m` is the number of customers. The second line contains n positive integers si (1 ≤ si ≤ 1000), where `si` is the start time of delivery for branch `i`. The third line contains m positive integers tj (1 ≤ tj ≤ 1000), where `tj` is the time when customer `j` places their order. The last line contains integer D (1 ≤ D ≤ 1000) — the time interval during which the deliveries can be made by each branch. Output Print a single integer — the maximum number of customers that can be served by the most optimized branch. Examples Input 3 5 2 6 8 1 3 5 7 9 3 Output 2","solution":"def max_customers_served(n, m, si, tj, D): max_served = 0 for start_time in si: count = 0 for order_time in tj: if start_time <= order_time <= start_time + D: count += 1 if count > max_served: max_served = count return max_served # Example usage: n, m = 3, 5 si = [2, 6, 8] tj = [1, 3, 5, 7, 9] D = 3 print(max_customers_served(n, m, si, tj, D)) # Output: 2"},{"question":"Harman works as a software developer and is often required to manipulate sequences of numbers. One day, he encountered a challenge that involves finding the maximum sum of non-adjacent elements in a sequence. Harman wants to automate this task but isn\'t sure how to code it. Can you help him by writing a function that solves this problem? You need to write a function that finds the maximum sum of non-adjacent elements in a sequence of numbers. INPUT: The first line of input contains a single integer n denoting the number of elements in the sequence. The second line contains n integers denoting the elements of the sequence. OUTPUT: Output a single integer which is the maximum sum of non-adjacent elements from the given sequence. CONSTRAINTS: 1 ≤ n ≤ 1000 -10^4 ≤ element ≤ 10^4 SAMPLE INPUT 6 3 2 5 10 7 SAMPLE OUTPUT 15 EXPLANATION: In the provided sample input, the optimal solution is to pick the elements 3, 5, and 7, which yields a sum of 15.","solution":"def max_non_adjacent_sum(nums): Finds the maximum sum of non-adjacent elements in a list of integers. if not nums: return 0 if len(nums) == 1: return nums[0] include = 0 exclude = 0 for num in nums: # Current max excluding i new_exclude = max(include, exclude) # Current max including i include = exclude + num exclude = new_exclude return max(include, exclude) # Example usage: # n = 6 # nums = [3, 2, 5, 10, 7] # print(max_non_adjacent_sum(nums)) # Output: 15"},{"question":"A museum has N exhibits, and each exhibit i has a cultural value v_i and a monetary value m_i. You are given a budget B and a threshold T for the cultural value. Your task is to maximize the total cultural value of the exhibits you can afford without exceeding the budget B and making sure the total cultural value is at least T. Given that all exhibits have distinct cultural values and monetary values, output the maximum possible cultural value you can achieve within the given constraints. If it\'s impossible to achieve a total cultural value of at least T within the budget B, output \\"Not possible\\". Constraints: * 1 leq N leq 10^4 * 1 leq v_i leq 10^6 * 1 leq m_i leq 10^6 * 1 leq B leq 10^9 * 1 leq T leq 10^7 Input: The input is given in the following format: ``` N B T v_1 m_1 v_2 m_2 : v_N m_N ``` Output: Output the maximum possible cultural value or \\"Not possible\\" if it cannot be achieved. Examples: Input: ``` 3 50 30 20 25 10 20 15 10 ``` Output: ``` 35 ``` Input: ``` 4 100 200 50 70 30 60 70 90 20 40 ``` Output: ``` Not possible ```","solution":"def maximize_cultural_value(N, B, T, exhibits): N : int : Number of exhibits B : int : Budget T : int : Threshold for cultural value exhibits : list of tuples : Each tuple contains (cultural value, monetary value) of an exhibit # Try to find all combinations of exhibits from itertools import combinations max_cultural_value = float(\'-inf\') possible = False for r in range(1, N+1): for comb in combinations(exhibits, r): total_monetary_value = sum(exhibit[1] for exhibit in comb) total_cultural_value = sum(exhibit[0] for exhibit in comb) if total_monetary_value <= B and total_cultural_value >= T: possible = True if total_cultural_value > max_cultural_value: max_cultural_value = total_cultural_value if possible: return max_cultural_value else: return \\"Not possible\\" # Test example case: # print(maximize_cultural_value(3, 50, 30, [(20, 25), (10, 20), (15, 10)])) # should return 35 # print(maximize_cultural_value(4, 100, 200, [(50, 70), (30, 60), (70, 90), (20, 40)])) # should return \\"Not possible\\""},{"question":"Input 7 9 1 2 1 3 2 4 2 5 3 6 3 7 4 5 5 6 6 7 200 300 400 100 500 150 600 2 4 5 6 1 3 2 7 2 4 5 1 3 6 7 Output 300 500 100","solution":"def compute_sums_for_queries(n, m, edges, weights, queries): # Convert weights input into a list of integers weights = [int(weight) for weight in weights] results = [] for query in queries: # Parse query into node indices and convert indexing to zero-based node_indices = list(map(lambda x: int(x) - 1, query)) # Compute the sum of weights for the specified nodes sum_weights = sum(weights[node_idx] for node_idx in node_indices) results.append(sum_weights) return results"},{"question":"You are given a grid of size N x M, filled with non-negative integers. Your task is to find the maximum sum of a rectangular sub-grid with at least one element. The grid is formed as follows: * n_1, n_2, ..., n_M * n_(M+1), n_(M+2), ..., n_(2M) * ..., * n_(M*(N-1)+1), n_(M*(N-1)+2), ..., n_(N*M) Constraints * 1 leq N, M leq 300 * 0 leq n_i leq 1000 for all i Input The input is given from Standard Input in the following format: N M n_1 n_2 ... n_M n_(M+1) n_(M+2) ... n_(2M) : n_(M*(N-1)+1) n_(M*(N-1)+2) ... n_(NM) Output Print the maximum sum of a rectangular sub-grid. Examples Input 2 3 1 2 3 4 5 6 Output 21 Input 4 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 Output 1","solution":"def max_sum_subgrid(N, M, grid): Finds the maximum sum of a rectangular sub-grid with at least one element. :param N: Number of rows in the grid. :param M: Number of columns in the grid. :param grid: 2D list representing the grid. :return: Maximum sum of a rectangular sub-grid. max_sum = float(\'-inf\') # Applying Kadane\'s algorithm on 2D array for left in range(M): temp = [0] * N for right in range(left, M): # Calculating sum of elements between left and right columns for each row for i in range(N): temp[i] += grid[i][right] # Apply Kadane\'s algorithm on temp array to find maximum subarray sum current_sum = 0 current_max = float(\'-inf\') for val in temp: current_sum = max(val, current_sum + val) current_max = max(current_max, current_sum) max_sum = max(max_sum, current_max) return max_sum def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(map(int, lines[i].split())) for i in range(1, N+1)] return N, M, grid def main(input_str): N, M, grid = parse_input(input_str) return max_sum_subgrid(N, M, grid)"},{"question":"A village is represented by a linear path of houses (similar to a street), and each house can be either lit up or dark. The villagers want to optimize the lighting over `m` cycles based on the following pattern: a house will light up if at least one of its neighbors is lit up in the previous cycle and will stay lit; it won\'t light up if both its neighbors were dark. For houses at the two endpoints with only one neighbor, they will light up if that neighbor is lit up. Given the initial states of the houses, determine the states after `m` cycles. [Input] - The first line contains an integer `t` denoting the number of test cases. - For each test case: - The first line contains two integers `n` (number of houses) and `m` (number of cycles). - The second line contains `n` space-separated integers either 0 or 1, denoting the initial state of each house (0 if dark, 1 if lit). [Output] For each test case, output `n` space-separated integers denoting the state of the houses after `m` cycles. [Constraints] - 1 ≤ t ≤ 1000 - 2 ≤ n ≤ 100 - 0 ≤ m ≤ 10000 SAMPLE INPUT 2 5 3 1 0 0 1 0 4 2 0 1 0 0 SAMPLE OUTPUT 1 1 1 1 1 1 1 1 1 Explanation: For the first test case: - After the first cycle: 1 1 1 1 1 (because each has at least one lit neighbor). - Subsequent cycles don’t change the configuration as they are already all lit. For the second test case: - After the first cycle: 1 1 1 0 - After the second cycle: 1 1 1 1 (the last house will light up because its left neighbor is lit).","solution":"def optimize_lighting(t, test_cases): results = [] for case in test_cases: n, m, houses = case for _ in range(m): new_houses = houses[:] for i in range(n): if i == 0: # first house if new_houses[i+1] == 1: houses[i] = 1 elif i == n-1: # last house if new_houses[i-1] == 1: houses[i] = 1 else: # middle houses if new_houses[i-1] == 1 or new_houses[i+1] == 1: houses[i] = 1 if houses == new_houses: break # no more changes results.append(houses) return results"},{"question":"The editor of the university\'s magazine is working on a new classifieds section. They have noticed that many people post similar advertisements multiple times, which overcrowds the section. To prevent this, the editor needs a tool that checks for duplicate advertisements. Your task is to implement a function that will help the editor detect duplicate advertisements. The editor defines two advertisements as a duplicate if one is a rearrangement of the words in the other (not necessarily the same order). For simplicity, assume that the words are separated by a single space and case matters (i.e., \\"Word\\" and \\"word\\" are different). Write a function `detect_duplicates(ads: List[str]) -> List[int]` that takes a list of ads as input and returns a list of integers, where each integer is the smallest index of the ad in the input list that is a duplicate of the corresponding ad. If an ad is not a duplicate of any previous ad, return -1 for that ad. The index should be zero-based. # Input - A list of strings, `ads` (1 ≤ len(ads) ≤ 10^3, 1 ≤ len(ad) ≤ 10^3 for each ad) — the advertisements posted in the magazine. # Output - A list of integers of the same length as `ads`. Each integer represents the index of the first duplicate ad or -1 if there is no duplicate. # Example Input `[\\"Buy milk\\", \\"milk Buy\\", \\"Sell car\\", \\"car Sell\\", \\"sell CAR\\"]` Output `[-1, 0, -1, 2, -1]` # Explanation - \\"Buy milk\\" and \\"milk Buy\\" are duplicates, so the second ad (index 1) is a duplicate of the first (index 0). - \\"Sell car\\" and \\"car Sell\\" are duplicates, so the fourth ad (index 3) is a duplicate of the third (index 2). - \\"sell CAR\\" is different from all others due to case sensitivity, resulting in -1. **Note:** Multiple input and output formats may exist but match the style of the examples provided.","solution":"from typing import List def normalize_ad(ad: str) -> str: # Normalize by sorting words words = ad.split() words.sort() return \\" \\".join(words) def detect_duplicates(ads: List[str]) -> List[int]: seen_ads = {} duplicates = [-1] * len(ads) for i, ad in enumerate(ads): normalized_ad = normalize_ad(ad) if normalized_ad in seen_ads: duplicates[i] = seen_ads[normalized_ad] else: seen_ads[normalized_ad] = i return duplicates"},{"question":"Lena is organizing a treasure hunt game for her friends. Each friend will start at a different position in a circular field with \'n\' positions. The positions in the field are numbered from 1 to n in a clockwise direction. Each position has a certain number of coins. Lena wants each of her friends to collect the maximum number of coins possible, but each friend can only move to an adjacent position (either clockwise or counterclockwise) and can only collect coins from positions they visit. Once a friend collects coins from a position, that position no longer has coins (its coin count becomes zero). Help Lena determine the maximum number of coins a friend can collect if they start at any given position and move optimally. Input The first line contains a single integer n (1 ≤ n ≤ 2·105) — the number of positions in the circular field. The next line contains n integers ci (1 ≤ ci ≤ 103) — the number of coins at each position. Output A single integer — the maximum number of coins a friend can collect. Examples Input 6 2 3 4 5 6 7 Output 21 Input 4 10 20 30 40 Output 60 Input 5 1 2 3 4 5 Output 15","solution":"def max_coins(n, coins): Returns the maximum number of coins a friend can collect starting from any position. :param n: Integer, number of positions in the circular field :param coins: List of integers, the number of coins at each position :return: Integer, the maximum number of coins collectable if n == 1: return coins[0] # Calculating max coins collected in clockwise direction max_coins_clockwise = max(coins) # Find the maximum sum of coins either starting from the beginning to any end in clockwise direction for i in range(n): sum_coins = 0 for j in range(n): sum_coins += coins[(i + j) % n] max_coins_clockwise = max(max_coins_clockwise, sum_coins) return max_coins_clockwise"},{"question":"In a small town, there is a straight road with **N** houses on it. Some of these houses have a tree planted in front of them. You are tasked with designing a system that will help identify whether there is a tree in front of each house along the road. - Each house is represented by its position on the road, which is indexed from 1 to N. - The presence or absence of a tree in front of a house is represented by an array **trees** of length N, where **trees[i]** is 1 if there is a tree in front of the house at position **i+1** and 0 otherwise. # Problem Statement Write a function **check_trees(N, trees, queries)** that takes the following parameters: - **N** (integer): the number of houses. - **trees** (list of integers): an array of length **N**, where **trees[i]** is either 1 or 0. - **queries** (list of integers): a list of positions on the road where you need to check for trees. The function should return a list of results for each query, where each result is \\"Yes\\" if there is a tree in front of the queried house and \\"No\\" otherwise. # Input 1. The first line contains an integer **N** (1 ≤ N ≤ 1000) — the number of houses. 2. The second line contains **N** integers separated by spaces, representing the **trees** array. 3. The third line contains an integer **Q** (1 ≤ Q ≤ 100), the number of queries. 4. Each of the next **Q** lines contains an integer representing a position on the road to check for the presence of a tree. # Output Output **Q** lines, each containing either \\"Yes\\" or \\"No\\" for each query, indicating whether there is a tree in front of the house at the given position. # Examples Example 1 Input: ``` 5 1 0 1 0 1 3 1 2 5 ``` Output: ``` Yes No Yes ``` Example 2 Input: ``` 4 0 0 1 0 2 3 4 ``` Output: ``` Yes No ``` # Note: - The first example indicates there are 5 houses, and trees are located in front of houses 1, 3, and 5. There are 3 queries for positions 1, 2, and 5, respectively. - The second example has 4 houses with a tree only in front of the third house. There are 2 queries for positions 3 and 4, respectively.","solution":"def check_trees(N, trees, queries): Checks if there is a tree in front of the queried houses. :param N: int, the number of houses :param trees: list of int, 1 if there\'s a tree, 0 otherwise :param queries: list of int, positions to check for trees :return: list of str, \\"Yes\\" if there\'s a tree, \\"No\\" otherwise results = [] for query in queries: if trees[query - 1] == 1: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a list of integers. Your task is to determine the length of the longest arithmetic sequence that can be formed using elements from this list. An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is constant. Input The first line contains a single integer n (1 ≤ n ≤ 1000), representing the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the list. Output Print a single integer representing the length of the longest arithmetic sequence that can be formed from the given list of integers. Examples Input 5 3 6 9 12 15 Output 5 Input 7 1 7 3 5 9 11 13 Output 4 Input 4 1 2 2 2 Output 3","solution":"def longest_arithmetic_subsequence(n, arr): if n <= 2: return n dp = {} max_length = 0 for i in range(n): for j in range(i + 1, n): diff = arr[j] - arr[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_length = max(max_length, dp[(j, diff)]) return max_length"},{"question":"Jane has a string s consisting of lowercase English letters. She wants to reorder the characters of the string so that no two adjacent characters are the same. Your task is to help Jane find any such reordering of the string, or determine that it is impossible to achieve. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains a string s of length n consisting of lowercase English letters. Output If it is impossible to reorder the string so that no two adjacent characters are the same, print \\"IMPOSSIBLE\\". Otherwise, print any such reordering of the string. Examples Input 4 aabb Output abab Input 2 aa Output IMPOSSIBLE Note In the first test case, there are several valid reorderings, such as \\"abab\\" and \\"baba\\". In the second test case, it is impossible to reorder the string to meet the requirement.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If it\'s not possible, returns \\"IMPOSSIBLE\\". # Count the frequencies of each character freq = Counter(s) # Create a max heap based on frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # This will store the result of the rearranged string result = [] # Placeholder for the previous character and its frequency prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) # Append the current character to the result result.append(char) # If there\'s a previous character, push it back now that the current character is used if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous count and char (decrement the count since it\'s used once) prev_count, prev_char = count + 1, char # If rearranged string length is not the same as original, return IMPOSSIBLE if len(result) != len(s): return \\"IMPOSSIBLE\\" return \'\'.join(result) def jane_reorder_string(n, s): return rearrange_string(s)"},{"question":"In a far away galaxy, there is a planet called XYZ. On this planet, there are several cities connected by bidirectional roads in such a way that there is exactly one unique path between any two cities (i.e., the cities and roads form a tree). Each city is represented as a node, and each road between two cities is represented as an edge. The residents of XYZ are admirers of symmetry. They decide to paint the roads such that for any two roads at the same depth from the root city, the path from the root to these roads involves the same sequence of colors. Given the number of cities `n` (numbered from 1 to n) and the connections between them in the form of pairs of cities, determine the minimum number of colors required to paint the roads following the given symmetry rule. Input The input consists of: - An integer `n` (1 ≤ n ≤ 1000) — the number of cities. - `n-1` lines, each containing two space-separated integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — representing a road between city `u` and city `v`. Output Output a single integer — the minimum number of colors required. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Input 3 1 2 1 3 Output 2","solution":"def min_colors_to_paint_roads(n, connections): if n == 1: return 1 # only one city means no roads, hence no colors needed from collections import defaultdict # Create adjacency list adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) # Finding the node with the maximum degree max_degree = 0 for node in adj_list: max_degree = max(max_degree, len(adj_list[node])) # Minimum number of colors required is the max degree of the nodes return max_degree"},{"question":"A company has a series of meetings scheduled in a day. Each meeting has a start time and an end time. You are given a list of these meetings and you need to find the maximum number of meetings that can take place without overlap. Input The first line contains an integer N - number of meetings. Next N lines contain 2 space-separated integers each, the start and end times of the meetings. Output Output one integer - the maximum number of non-overlapping meetings. Constraints 1 ≤ N ≤ 1000 0 ≤ start, end ≤ 10^6 For each meeting, start < end. SAMPLE INPUT 3 1 2 3 4 0 6 5 7 8 9 5 9 SAMPLE OUTPUT 4","solution":"def max_non_overlapping_meetings(meetings): Function to find the maximum number of non-overlapping meetings. Parameters: meetings (list of tuple): List of tuples where each tuple contains start and end times of the meetings. Returns: int: The maximum number of non-overlapping meetings. # Sort the meetings based on their end times meetings.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = -1 # Iterate over the sorted meetings for meeting in meetings: if meeting[0] >= last_end_time: count += 1 last_end_time = meeting[1] return count def parse_input(input_string): Parse the input string to extract the list of meetings. Parameters: input_string (str): Input string containing number of meetings and their start and end times. Returns: list of tuple: List of tuples where each tuple contains start and end times of the meetings. lines = input_string.strip().split(\'n\') N = int(lines[0]) meetings = [tuple(map(int, line.split())) for line in lines[1:N+1]] return meetings"},{"question":"Given an integer array `nums` of length `n`, you need to find if it is possible to partition the array into two non-empty subsets A and B such that the sum of elements in A is equal to the sum of elements in B. The subsets should be disjoint, meaning every element in `nums` should be included in exactly one subset. Write a function `canPartition` which takes in the array `nums` and returns a boolean value `True` if such a partition is possible or `False` otherwise. Constraints: - The length of the array `n` is between 2 and 200 inclusive. - Each element in the array `nums` is a positive integer and does not exceed 1000. Input - One line containing space-separated integers representing the array `nums`. Output - A single line containing `True` or `False`. Examples Input ``` 1 5 11 5 ``` Output ``` True ``` Input ``` 1 2 3 5 ``` Output ``` False ``` Input ``` 2 4 5 6 ``` Output ``` False ``` Input ``` 2 2 1 1 ``` Output ``` True ```","solution":"def canPartition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s impossible to partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # We use a boolean DP array to keep track of possible sums dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"A king needs to find a way to equally distribute gold coins kept in a stack of boxes among his four daughters. His daughters will only accept the coins if they are distributed such that each daughter gets the same number of interesting gold coins. A gold coin is considered interesting if its value is a prime number. Each box contains a certain number of gold coins of varying values. The task is to determine if it is possible to distribute the interesting gold coins equally among the four daughters. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input Format: - The first line of the input contains a single integer `t` (1 <= t <= 10), the number of test cases. - For each test case: - The first line contains the single integer `b` (1 <= b <= 100,000), the number of boxes. - The second line contains `b` space-separated integers where each integer represents the number of gold coins in a box. Output Format: - For each test case, output a single line containing \\"YES\\" or \\"NO\\" depending on whether the interesting gold coins can be equally distributed among the four daughters. SAMPLE INPUT 2 3 2 3 4 4 6 5 7 10 SAMPLE OUTPUT NO YES","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_distribute_gold_coins_equally(t, test_cases): results = [] for i in range(t): b = test_cases[i][0] coins = test_cases[i][1] interesting_coins_count = sum(1 for coin in coins if is_prime(coin)) if interesting_coins_count % 4 == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Anastasia is organizing a meeting and she wants to provide refreshments to her participants. She has p pizzas, s sandwiches, and d drinks. According to her plan, each participant must receive exactly 1 pizza, 2 sandwiches, and 3 drinks. Help Anastasia determine the maximum number of participants she can cater to with the resources she has. Input The first line contains the positive integer p (1 ≤ p ≤ 1000) — the number of pizzas Anastasia has. The second line contains the positive integer s (1 ≤ s ≤ 1000) — the number of sandwiches Anastasia has. The third line contains the positive integer d (1 ≤ d ≤ 1000) — the number of drinks Anastasia has. Output Print the maximum number of participants Anastasia can cater to. Examples Input 3 5 10 Output 2 Input 2 4 5 Output 1 Input 1 3 4 Output 1 Note In the first example, Anastasia can cater to 2 participants, since each participant requires 1 pizza, 2 sandwiches, and 3 drinks. With 3 pizzas, 5 sandwiches, and 10 drinks, she can cater to 2 participants and will have 1 pizza, 1 sandwich, and 4 drinks left over. In the second example, Anastasia can cater to 1 participant, using 1 pizza, 2 sandwiches, and 3 drinks. She will then have 1 pizza, 2 sandwiches, and 2 drinks left over. In the third example, Anastasia can only cater to 1 participant with 1 pizza, 2 sandwiches, and 3 drinks. She will have 0 pizzas, 1 sandwich, and 1 drink left over. She doesn\'t have enough sandwiches to cater to another participant.","solution":"def max_participants(p, s, d): Determines the maximum number of participants Anastasia can cater to with the given resources. Args: p (int): Number of pizzas (1 pizza per participant). s (int): Number of sandwiches (2 sandwiches per participant). d (int): Number of drinks (3 drinks per participant). Returns: int: The maximum number of participants. participants_by_pizza = p participants_by_sandwiches = s // 2 participants_by_drinks = d // 3 return min(participants_by_pizza, participants_by_sandwiches, participants_by_drinks)"},{"question":"The city of Codeville is preparing for its annual marathon event. Each runner in the marathon has a unique bib number and a completion time. The marathon organizers need to efficiently manage the results and answer certain queries about the event. You have been tasked to write a program that can handle three types of events: registering a runner\'s completion time, removing a specific runner\'s result, and querying the fastest completion time among the current results. Input The first line of the input contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of events. An event can be of three types: - Register \\"R bib time\\" (1 ≤ bib ≤ 10^6, 1 ≤ time ≤ 10^6) — a runner completes the marathon, where bib is the unique bib number of the runner and time is the completion time in minutes. - Remove \\"D bib\\" (1 ≤ bib ≤ 10^6) — removes the result of the runner with the given bib number. - Query \\"Q\\" — asks for the fastest (minimum) completion time among the current results. It is guaranteed that: - A runner’s result will not be registered more than once. - Remove events refer to registered runners. Output For each query, write a separate line with the fastest completion time among the current results. If there are no registered results at the time of the query, output -1. Example Input 10 Q R 101 240 Q R 102 230 Q D 101 Q R 103 250 R 104 220 Q Output -1 240 230 230 220","solution":"import heapq def marathon_results(events): results = {} min_heap = [] deleted = set() output = [] for event in events: parts = event.split() if parts[0] == \'R\': # Register event bib = int(parts[1]) time = int(parts[2]) results[bib] = time heapq.heappush(min_heap, (time, bib)) elif parts[0] == \'D\': # Delete event bib = int(parts[1]) if bib in results: deleted.add(bib) del results[bib] elif parts[0] == \'Q\': # Query event while min_heap and min_heap[0][1] in deleted: heapq.heappop(min_heap) if min_heap: output.append(min_heap[0][0]) else: output.append(-1) return output"},{"question":"You are given a list of integers. For each integer in the list, determine the count of its prime divisors. Input First line contains T, number of testcases. Each testcase is a positive integer in a single line. Output For each testcase, print the count of prime divisors. Constraints 1 ≤ T ≤ 10 1 ≤ Integer Value ≤ 10^6 Example Input: 2 10 15 Output: 2 2 Explanation For the first testcase, the prime divisors of 10 are 2 and 5. For the second testcase, the prime divisors of 15 are 3 and 5.","solution":"def count_prime_divisors(n): Returns the count of prime divisors of n. if n < 2: return 0 count = 0 divisor = 2 while divisor * divisor <= n: if n % divisor == 0: count += 1 while n % divisor == 0: n //= divisor divisor += 1 if n > 1: # n is prime count += 1 return count def get_prime_divisors_count_list(testcases): Takes a list of testcases and returns a list of prime divisor counts for each testcase. return [count_prime_divisors(tc) for tc in testcases]"},{"question":"You are asked to develop a software application that analyzes user reviews for a product and generates a summary of the overall sentiment. The task involves parsing textual data and determining the sentiment for each review as positive, negative, or neutral. Additionally, you must compute the percentage of positive, negative, and neutral reviews. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of reviews to be processed. Each of the next n lines contains a string that represents a user review. Each review contains only lowercase alphabets and spaces, and the length of each review does not exceed 1000 characters. Output Print three lines: 1. The percentage of positive reviews rounded to the nearest integer. 2. The percentage of negative reviews rounded to the nearest integer. 3. The percentage of neutral reviews rounded to the nearest integer. You can assume: - A positive review contains the word \\"good\\" or \\"excellent\\". - A negative review contains the word \\"bad\\" or \\"poor\\". - Reviews that contain both positive and negative words are considered neutral. - Reviews that contain none of the keywords are neutral. Examples Input 5 the product is good and useful this product is bad excellent quality poor experience with this purchase satisfactory performance Output 40 40 20 Input 3 good but poor design bad and excellent at the same time just okay Output 0 0 100","solution":"def analyze_reviews(n, reviews): positive_keywords = {\'good\', \'excellent\'} negative_keywords = {\'bad\', \'poor\'} positive_count = 0 negative_count = 0 neutral_count = 0 for review in reviews: review_words = set(review.split()) positive_detected = any(word in positive_keywords for word in review_words) negative_detected = any(word in negative_keywords for word in review_words) if positive_detected and negative_detected: neutral_count += 1 elif positive_detected: positive_count += 1 elif negative_detected: negative_count += 1 else: neutral_count += 1 total_reviews = n positive_percentage = round((positive_count / total_reviews) * 100) negative_percentage = round((negative_count / total_reviews) * 100) neutral_percentage = round((neutral_count / total_reviews) * 100) return positive_percentage, negative_percentage, neutral_percentage"},{"question":"In a small town, there is a very popular bakery famous for its delicious cakes. The bakery has n different types of cakes, each with a certain number of calories. Anna, a regular customer, wants to buy some cakes from the bakery, but she\'s also mindful of her calorie intake. She decides that she will buy exactly k cakes such that the total number of calories of the selected cakes is minimized. You are to help Anna determine the minimum possible total number of calories for exactly k cakes she can buy from the n available types. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100 000) separated by a space, which denote the number of different types of cakes and the number of cakes Anna wants to buy, respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1 000 000) separated by spaces, where ci denotes the number of calories in the i-th type of cake. Output Output a single integer which is the minimum possible total number of calories for exactly k cakes. Examples Input 5 3 100 300 500 200 400 Output 600 Input 4 2 5 9 2 6 Output 7","solution":"def minimum_calories(n, k, calories): Returns the minimum possible total number of calories for exactly k cakes. Parameters: - n: int, number of different types of cakes - k: int, number of cakes to buy - calories: list of int, calories of each cake type Returns: - int, minimum total number of calories # Sort the list of calories to get the smallest possible sum calories.sort() # Sum up the first k elements for the minimum possible total calories return sum(calories[:k])"},{"question":"Sarah has a collection of n toy blocks, each block has a distinct weight. She wants to arrange the blocks in a row and assign a number to each of them such that the following conditions are met: 1. Each block gets a distinct number from 1 to n. 2. Each block\'s number should be proportional to its weight in the following sense: if a block\'s weight is at least twice the weight of another block, then its assigned number should be at least twice the number of the other block. Help Sarah find out if there is a way to assign the numbers that meets the conditions. If there are multiple valid assignments, any one of them will be accepted. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case consists of two lines: - The first line contains one integer n (1 ≤ n ≤ 100) — the number of toy blocks. - The second line contains n distinct integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the blocks. Output For each test case, if there exists an assignment that meets the conditions, output \\"YES\\" on one line and on the next line output n distinct integers that are the numbers assigned to blocks in the same order as the weights. Otherwise, output \\"NO\\". Example Input 3 3 1 2 4 4 3 6 2 8 2 5 10 Output YES 1 2 4 YES 1 2 4 8 YES 1 2 Note In the first test case, the assigned numbers 1, 2, 4 meet the conditions as 2 is at least twice 1 and 4 is at least twice 2. In the second test case, one possible valid assignment is 1, 2, 4, 8 which meets the conditions. For instance, the weights 6 and 3 can be assigned numbers 2 and 1 respectively, and 8 can be assigned 4, maintaining the proportional condition. In the third test case, the weights 5 and 10 can be assigned numbers 1 and 2 respectively, meeting the condition since 10 is twice 5.","solution":"def can_assign_numbers(t, cases): results = [] for i in range(t): n, weights = cases[i] sorted_weights = sorted(weights) assigned_numbers = list(range(1, n+1)) valid = True for j in range(1, n): if sorted_weights[j] >= 2 * sorted_weights[j-1]: continue # This pair of blocks is already fulfilling the condition else: valid = False break if valid: result = \\"YESn\\" + \\" \\".join(map(str, assigned_numbers)) else: result = \\"NO\\" results.append(result) return results # Helper function to lead input and call the can_assign_numbers function def process_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) weights = list(map(int, input_lines[index+1].split())) cases.append((n, weights)) index += 2 return can_assign_numbers(t, cases) # Example usage: # input_str = \\"3n3n1 2 4n4n3 6 2 8n2n5 10n\\" # print(\\"n\\".join(process_input(input_str)))"},{"question":"Alex is working on an image manipulation application and needs to implement a specific feature for adjusting the brightness of a portion of the image. The image can be represented as a 2D grid with m rows and n columns, where each cell contains a value representing the brightness of that pixel. Brightness values range from 0 (completely dark) to 255 (completely bright). Alex wants to increase the brightness of all pixels in a specific sub-rectangle of the image by a certain amount. The adjustment should not increase any pixel’s brightness above 255. Write a function that, given the image grid, the top-left and bottom-right coordinates of the sub-rectangle, and the brightness increase amount, adjusts the brightness of the specified sub-rectangle. Input - The first line contains three integers m, n, and k (1 ≤ m, n ≤ 1000, 0 ≤ k ≤ 100) — the number of rows, the number of columns, and the brightness increase amount. - The next m lines each contain n integers representing the brightness values of the pixels. - The following line contains four integers r1, c1, r2, c2 (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n) — the coordinates of the top-left and bottom-right corners of the sub-rectangle, respectively. Output - Output the modified image grid. Example Input 6 6 20 50 60 70 80 90 100 60 70 80 90 100 110 70 80 90 100 110 120 80 90 100 110 120 130 90 100 110 120 130 140 100 110 120 130 140 150 1 1 3 3 Output 50 60 70 80 90 100 60 90 100 110 100 110 70 100 110 120 110 120 80 110 120 130 120 130 90 100 110 120 130 140 100 110 120 130 140 150 Explanation In the example, the sub-rectangle from (1, 1) to (3, 3) is adjusted. The brightness of each pixel in that sub-rectangle is increased by 20. If a pixel’s brightness exceeds 255, it is capped at 255. Note that the brightness values of the specified sub-rectangle are: ``` 70 80 90 80 90 100 90 100 110 ``` The new values after increasing by 20 are: ``` 90 100 110 100 110 120 110 120 130 ``` These values are reflected in the output grid.","solution":"def adjust_brightness(m, n, k, grid, r1, c1, r2, c2): Adjust the brightness of a sub-rectangle of the image grid by a given amount, ensuring that no pixel exceeds a brightness value of 255. for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] = min(255, grid[i][j] + k) return grid # Example Input: m, n, k = 6, 6, 20 grid = [ [50, 60, 70, 80, 90, 100], [60, 70, 80, 90, 100, 110], [70, 80, 90, 100, 110, 120], [80, 90, 100, 110, 120, 130], [90, 100, 110, 120, 130, 140], [100, 110, 120, 130, 140, 150] ] r1, c1, r2, c2 = 1, 1, 3, 3 adjusted_grid = adjust_brightness(m, n, k, grid, r1, c1, r2, c2) for row in adjusted_grid: print(\\" \\".join(map(str, row)))"},{"question":"Your friend is organizing a hiking adventure along a series of trails in the mountains. The hiking trails are connected and form a graph that is a tree. A tree is a connected, undirected graph with no cycles. There are n junctions (numbered from 1 to n) connected by n-1 trails. Each trail connects two junctions, and each junction can only be traversed once. For the hiking adventure, your friend wants to decide on a \\"special\\" junction, which is defined as follows: * If the junction is selected, the maximum depth of the resulting forest (i.e., the maximum depth of any tree in the forest) is minimized. Here, removing a junction means removing it and all trails connected to it. The depth of a tree is the longest path from the root junction to any other junction in the tree. Your task is to find the junction that, when removed, results in the smallest possible maximum depth of the resulting forest. Constraints * 2 ≤ n ≤ 100,000 * 1 ≤ u_i, v_i ≤ n * All trails are unique and connect a pair of distinct junctions. Input Input follows the following format. All given numbers are integers. ``` n u_1 v_1 u_2 v_2 ... u_(n-1) v_(n-1) ``` Output Output the number of the junction that should be removed to achieve the smallest possible maximum depth of the resulting forest. If there are multiple such junctions, print the smallest numbered one. Example Input ``` 7 1 2 2 3 2 4 4 5 5 6 5 7 ``` Output ``` 4 ```","solution":"from collections import deque, defaultdict def find_furthest_node(n, start_node, graph): Performs BFS to find the furthest node from the start_node. max_dist = 0 furthest_node = start_node queue = deque([(start_node, 0)]) visited = set([start_node]) while queue: node, dist = queue.popleft() if dist > max_dist: max_dist = dist furthest_node = node for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return furthest_node, max_dist def bfs_to_get_distances(n, start_node, graph): BFS starting from start_node to get distances of all nodes from start_node. distances = [float(\'inf\')] * (n + 1) queue = deque([(start_node, 0)]) distances[start_node] = 0 while queue: node, dist = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return distances def find_special_junction(n, edges): if n == 2: return min(edges[0]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) node_a, _ = find_furthest_node(n, 1, graph) node_b, _ = find_furthest_node(n, node_a, graph) distances_from_a = bfs_to_get_distances(n, node_a, graph) distances_from_b = bfs_to_get_distances(n, node_b, graph) min_max_depth = float(\'inf\') special_node = -1 for node in range(1, n + 1): max_depth = max(distances_from_a[node], distances_from_b[node]) if max_depth < min_max_depth or (max_depth == min_max_depth and node < special_node): min_max_depth = max_depth special_node = node return special_node def hiking_adventure(input_string): inputs = input_string.strip().split(\'n\') n = int(inputs[0]) edges = [tuple(map(int, line.split())) for line in inputs[1:]] return find_special_junction(n, edges)"},{"question":"A scientist has developed a method to synthesize a new type of crystal with enhanced properties. The synthesis process involves two main steps - heating and cooling. The scientist can use these steps repeatedly to achieve the desired crystalline structure, which requires a specific sequence of temperature changes. Each temperature change is defined by an integer value, either positive (heating) or negative (cooling). To achieve the desired structure, a cumulative temperature change of exactly zero is needed at the end of the sequence. The scientist wants to test different sequences and monitor the resultant structure. Your task is to help automate this process by generating all distinct sequences of temperature changes (of length N) that result in a net cumulative change of zero. # Input - A single integer N (2 ≤ N ≤ 18), which is the length of the desired sequences. # Output - Print all distinct valid sequences, each on a new line. A valid sequence is a list of integers—representing temperature changes—such that the sum of its elements equals zero. # Note - Each integer in the sequence should be within the range -10 ≤ x ≤ 10. - Sequences should be printed in lexicographical order. # Example Input: ``` 4 ``` Output: ``` -1 -1 1 1 -2 0 0 2 -2 1 1 0 -2 2 0 0 -3 1 2 0 ... ``` (Note: This is a partial example output. The actual number of valid sequences will depend on the value of N, and all sequences for N=4 should be listed in lexicographical order.) # Constraints 1. Ensure that your program runs efficiently given the constraints. 2. Avoid generating duplicate sequences.","solution":"from itertools import product def generate_sequences(N): # Temp changes range from -10 to 10 temperatures = range(-10, 11) all_combinations = product(temperatures, repeat=N) valid_sequences = [seq for seq in all_combinations if sum(seq) == 0] valid_sequences.sort() return valid_sequences"},{"question":"In a country far, far away, there exists a peculiar kingdom where an ancient custom involves the king distributing candies to children in the kingdom on every New Year\'s Eve. The candies are distributed in such a way that every child should receive the same amount, and no candy should be left over. Due to the rising number of children, the king has decided to automate the process and has asked you to help determine the maximum number of candies each child can get. Given the number of candies ( C ) and the number of children ( K ), your task is to compute the maximum number of candies each child can receive. Input The first line contains an integer ( T ) (1 ≤ ( T ) ≤ 500), representing the number of test cases. Each of the next ( T ) lines contains two integers ( C ) and ( K ) (1 ≤ ( K ) ≤ ( 10^9 ) and 1 ≤ ( C ) ≤ ( 10^{18} )) representing the total number of candies and the number of children respectively. Output For each test case, output a single line containing an integer representing the maximum number of candies each child can receive without any candy left over. SAMPLE INPUT 3 100 10 95 13 1000000000000 7 SAMPLE OUTPUT 10 7 142857142857 Explanation For the first test case, if there are 100 candies and 10 children, each child can receive a maximum of 10 candies (100 divided by 10). For the second test case, with 95 candies and 13 children, each child can receive a maximum of 7 candies (95 divided by 13). For the third test case, with 1000000000000 candies and 7 children, each child can receive a maximum of 142857142857 candies (1000000000000 divided by 7).","solution":"def max_candies_per_child(C, K): Returns the maximum number of candies each child can receive without any candy left over. return C // K def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. T: int - number of test cases test_cases: list of tuples - each tuple contains (C, K) Returns a list of integers representing the maximum number of candies per child for each test case. results = [] for C, K in test_cases: results.append(max_candies_per_child(C, K)) return results"},{"question":"ZS the Coder is enjoying a walk on a park and counting flowers he encounters along the way. He wants to note down the types of flowers he sees but, after walking a certain distance, he only wants to record the flowers of a different type if the next flower in the sequence is of the same type as the previous one. ZS starts his walk at the beginning of a flower path. He is given the types of flowers he encounters, but only flowers of the same type that appear consecutively will be counted. For example, if he encounters flower types in the order: A, A, B, C, C, C, A, then ZS will record and count the flowers as follows: A (two occurrences), B (one occurrence), C (three occurrences), and A (one occurrence). Given the sequence of flower types ZS encounters, determine the number of consecutive unique flower types he will record. Input The first line contains an integer n, the number of flowers encountered (1 ≤ n ≤ 100 000). The next line contains a string of length n, consisting of uppercase English letters where each letter represents a type of flower. Output Print a single positive integer, the number of consecutive unique flower types ZS will record. Examples Input 7 AABCCCA Output 4 Input 10 AAABBBCCCZ Output 4 Note In the first example, ZS will record: A, A, B, C, C, C, A — which gives 4 unique consecutive flower groups. In the second example, ZS will record: A, A, A, B, B, B, C, C, C, Z — which also gives 4 unique consecutive flower groups, specifically: A, B, C, Z.","solution":"def count_consecutive_unique_flowers(n, flower_sequence): if n == 0: return 0 count = 1 for i in range(1, n): if flower_sequence[i] != flower_sequence[i - 1]: count += 1 return count"},{"question":"A string S of length N consisting of lowercase English letters is given. Takahashi can perform the following operation any number of times: * Select any character in the string and replace it with any other lowercase English character from \'a\' to \'z\'. The goal is to transform the string S into any palindrome string. A palindrome is a string that reads the same backward as forward. Determine the minimum number of operations required to make S a palindrome. Constraints * 1 ≤ N ≤ 10^5 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: ``` N S ``` Output Print the minimum number of operations needed to make S a palindrome. Examples Input ``` 3 abc ``` Output ``` 1 ``` Input ``` 4 abca ``` Output ``` 1 ``` Input ``` 5 abcde ``` Output ``` 2 ```","solution":"def min_operations_to_palindrome(n, s): Determines the minimum number of operations required to transform the string S into a palindrome. :param n: Length of the string :param s: The string S :return: Minimum number of operations required operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"In the enchanting world of Thaumaturgy, the sorcerers frequently need to summon magical creatures from other dimensions. A critical part of the summoning ritual involves arranging enchanted stones in a specific pattern on a 2D plane. The stones must be placed such that they are equidistant from each other to form a perfect circle. However, as the number of stones varies, calculating their exact positions to maintain the equidistance becomes challenging. You, as a senior Thaumaturgist, must write a program to help the sorcerers determine the coordinates of each stone for a given number of stones and the radius of the circle. **Input** The input consists of a single test case. The first line of input contains a single integer N (3 <= N <= 100), representing the number of stones. The second line contains a single integer R (1 <= R <= 1000), the radius of the circle. **Output** The output should contain N lines with two floating-point numbers x and y (with precision up to three decimal places) representing the coordinates of each stone. The stones should be placed such that the first stone is always at coordinates (R, 0), with subsequent stones positioned in a counter-clockwise manner. **Examples** _Input_ 4 2 _Output_ 2.000 0.000 0.000 2.000 -2.000 0.000 0.000 -2.000 _Input_ 6 3 _Output_ 3.000 0.000 1.500 2.598 -1.500 2.598 -3.000 0.000 -1.500 -2.598 1.500 -2.598","solution":"import math def calculate_stone_positions(N, R): Calculates the positions of N stones to be placed on a circle with radius R. Args: N (int): Number of stones. R (int): Radius of the circle. Returns: list of tuples: List of coordinates (x, y) for each stone. positions = [] angle_increment = 2 * math.pi / N for i in range(N): angle = angle_increment * i x = R * math.cos(angle) y = R * math.sin(angle) positions.append((round(x, 3), round(y, 3))) return positions"},{"question":"In the land of ByteLand, there are N castles connected by M roads. Each road connects exactly two castles and can be traveled in both directions. Each castle has a defensive value, which is represented as an integer. A group of siege engineers want to attack ByteLand and want to weaken its defenses as much as possible. The engineers can choose any one castle and initiate their attack from that castle. After attacking a castle, they will continue to attack all castles directly connected to the castle they just attacked via roads, and so on until they have attacked all reachable castles starting from the initial castle. The attack on a castle reduces its defense value to zero. However, each castle can only be attacked once in this manner. The engineers want to maximize the total reduction of defense values in ByteLand through this single continuous attack starting from the most strategic castle. Your task is to determine the maximum possible total reduction of defense values. Input The first line contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains two space-separated integers N and M, the number of castles and roads in ByteLand respectively. The next line contains N space-separated integers, where the i-th integer represents the defense value of the i-th castle. Each of the following M lines contains two space-separated integers u and v, representing a road connecting the u-th and v-th castles. Output For each test case, output a single integer representing the maximum possible total reduction of defense values. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ M ≤ 4950 1 ≤ Defense value of each castle ≤ 100 Example Input: 2 4 4 10 20 30 40 1 2 2 3 3 4 4 1 5 5 15 10 25 20 35 1 2 2 3 3 4 4 5 5 1 Output: 100 105 Explanation Case 1: The castles are connected in a cycle, and their defense values are [10, 20, 30, 40]. Starting from any castle will reach all the other castles in a continuous attack. Hence, the total reduction of defense values will be the sum of all defense values: 10 + 20 + 30 + 40 = 100. Case 2: The castles are connected in a cycle, and their defense values are [15, 10, 25, 20, 35]. Similarly, attacking from any castle will eventually lead to all castles being attacked. The total reduction of defense values will be 15 + 10 + 25 + 20 + 35 = 105.","solution":"def max_reduction(test_cases): from collections import defaultdict def dfs(castle, visited, graph, defense_values): stack = [castle] total_defense = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True total_defense += defense_values[current] for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return total_defense results = [] for case in test_cases: N, M, defense_values, edges = case # Adjust for 0-indexed defense values defense_values = [0] + defense_values # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_defense_reduction = 0 visited = [False] * (N + 1) # Apply DFS to each component for castle in range(1, N + 1): if not visited[castle]: current_defense_reduction = dfs(castle, visited, graph, defense_values) max_defense_reduction = max(max_defense_reduction, current_defense_reduction) results.append(max_defense_reduction) return results"},{"question":"Given two strings, determine if one string is a subsequence of the other. A subsequence is a sequence derived from another sequence by deleting some or no elements, without changing the order of the remaining elements. Input The input consists of two lines. Each line contains a string of characters \'A\'-\'Z\' between 1 and 100 characters, inclusive. Output Output \\"Yes\\" if the first string is a subsequence of the second string. Otherwise, output \\"No\\". Examples Input ABCDE ACE Output Yes Input HELLO WORLD Output No","solution":"def is_subsequence(s1, s2): Determine if s1 is a subsequence of s2. it = iter(s2) return all(char in it for char in s1) def check_subsequence(str1, str2): Returns \\"Yes\\" if str1 is a subsequence of str2, otherwise \\"No\\". if is_subsequence(str1, str2): return \\"Yes\\" else: return \\"No\\""},{"question":"Alice is trying to create a perfect schedule for a busy yet balanced day. She has n activities she needs to complete during the day, each characterized by a start time and an end time. Alice wants to ensure that no two activities overlap and that she maximizes the total number of activities she can complete. Can you help her determine the maximum number of non-overlapping activities she can schedule in a day? Your task is to write a program that will take the list of activities and return the maximum number of non-overlapping activities Alice can schedule. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of activities. - The next n lines each contain two integers `s` and `e` (0 ≤ s < e ≤ 10^9), representing the start and end times of each activity. # Output - Print a single integer, the maximum number of non-overlapping activities Alice can complete. # Examples Example 1 # Input ``` 3 1 2 2 5 3 4 ``` # Output ``` 2 ``` Example 2 # Input ``` 5 1 2 3 4 0 6 5 7 8 9 ``` # Output ``` 4 ``` # Note In the first example, Alice can attend the activities (1,2) and (3,4), successfully completing 2 activities without any overlap. In the second example, Alice can attend the activities (1,2), (3,4), (5,7), and (8,9), successfully completing 4 activities without any overlap. Consider sorting the activities based on their end times to facilitate the selection of the maximum number of non-overlapping activities.","solution":"def max_non_overlapping_activities(n, activities): Determines the maximum number of non-overlapping activities. :param n: int, number of activities :param activities: list of tuples, each tuple contains two integers (start, end) :return: int, maximum number of non-overlapping activities # Sort activities based on their end time activities.sort(key=lambda x: x[1]) max_activities = 0 last_end_time = 0 for activity in activities: start, end = activity if start >= last_end_time: max_activities += 1 last_end_time = end return max_activities"},{"question":"Write a program that reads a list of integers and determines whether they form an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. For example, the sequence [5, 7, 9, 11] is an arithmetic sequence because the difference between consecutive terms is 2. If the list forms an arithmetic sequence, the program should print \\"YES\\" and the common difference. If not, the program should print \\"NO\\". Constraints * 2 leq n leq 100 * -1000 leq a_i leq 1000 Input In the first line, an integer n (the length of the list) is given. In the second line, the list of n integers is given separated by a single space character. Output Print a single line containing \\"YES\\" followed by the common difference if the list is an arithmetic sequence; otherwise, print \\"NO\\". Examples Input 4 3 6 9 12 Output YES 3 Input 5 5 10 15 23 25 Output NO","solution":"def is_arithmetic_sequence(n, arr): Determines whether a list of integers forms an arithmetic sequence. Returns \\"YES\\" followed by the common difference if it is an arithmetic sequence. Otherwise, returns \\"NO\\". if n < 2: return \\"NO\\" common_diff = arr[1] - arr[0] for i in range(1, n - 1): if arr[i + 1] - arr[i] != common_diff: return \\"NO\\" return f\\"YES {common_diff}\\" # Input example n = 4 arr = [3, 6, 9, 12] print(is_arithmetic_sequence(n, arr))"},{"question":"Write a program to find the smallest unique number in a list. A number is unique if it appears exactly once in the list. If there are no unique numbers, the program should return \\"None\\". Input The input consists of multiple datasets. Each dataset is given in the following format: n a1 a2 a3 ... an Where n (1 ≤ n ≤ 10000) denotes the number of integers in the list, and a1, a2, a3, ..., an are the integers (−1000000 ≤ ai ≤ 1000000). The last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed. Output For each dataset, output the smallest unique number. If there are no unique numbers in the given dataset, print \\"None\\" (without quotes). Example Input 5 1 2 2 3 3 6 4 5 6 7 8 8 8 5 5 4 4 3 3 2 2 9 -1 -2 -3 -4 -5 -6 -6 -5 -4 0 Output 1 4 None -3","solution":"def find_smallest_unique(numbers): from collections import Counter # Count frequency of each number freq = Counter(numbers) # Filter out the numbers that appear exactly once and find the minimum unique_numbers = [num for num, count in freq.items() if count == 1] if unique_numbers: return min(unique_numbers) else: return \\"None\\" def process_datasets(input_data): results = [] index = 0 while index < len(input_data): # Read the size of the dataset n = int(input_data[index]) if n == 0: break # Read the dataset numbers index += 1 dataset = list(map(int, input_data[index].split())) # Find the smallest unique number result = find_smallest_unique(dataset) results.append(result) index += 1 return results"},{"question":"Asha is a popular baker in her town. She is known for making cupcakes with beautiful frosting designs. On a particular busy day, she has received n orders for her special cupcakes. Each cupcake has a specific preparation time, a waiting time before the frosting can be applied, and a final baking time. Given n orders, help Asha determine the finishing times for each cupcake. The finishing time for a cupcake is the time it takes from when Asha starts preparing it until it is fully baked and frosted. Once Asha starts an order, she must complete it before starting the next one. Input The first line of the input contains a positive integer n (1 ≤ n ≤ 5000) — the number of cupcake orders. Next n lines contain three integers each ti, wi, bi (1 ≤ ti, wi, bi ≤ 100000) — the preparation time, waiting time before frosting, and baking time for the i-th cupcake, respectively. Asha works on the orders in the sequence they are given. Output Print n integers each on a new line — the completion time of each cupcake in the order they were given. Examples Input 3 1 2 3 2 1 2 3 1 1 Output 6 10 15 Input 4 2 3 1 3 2 2 1 1 4 2 2 1 Output 8 15 21 28 Note In the first example, the calculation for each cupcake completion time is as follows: 1. First cupcake starts at time 0, preparation takes 1 unit of time, waiting before frosting is 2 units of time and baking takes 3 units of time. Thus the completion time is 1 + 2 + 3 = 6. 2. Second cupcake starts when the first one is completed at time 6, preparation takes 2 units of time, waiting before frosting is 1 unit of time and baking takes 2 units of time. Thus the completion time is 6 + 2 + 1 + 2 = 11. 3. Third cupcake starts when the second one is completed at time 11, preparation takes 3 units of time, waiting before frosting is 1 unit of time and baking takes 1 unit of time. Thus the completion time is 11 + 3 + 1 + 1 = 16.","solution":"def cupcake_completion_times(n, orders): Calculate the completion times for each cupcake order. :param n: int - number of cupcake orders :param orders: list of tuples - each tuple contains (ti, wi, bi) where ti is preparation time, wi is waiting time, bi is baking time :return: list of int - completion times for each cupcake completion_times = [] current_time = 0 for order in orders: ti, wi, bi = order current_time += ti + wi + bi completion_times.append(current_time) return completion_times"},{"question":"In a small kingdom, there is a magical forest inhabited by n fairies. Each fairy has a unique identifier ranging from 1 to n and can travel between different locations in the forest. However, the forest is represented as a weighted undirected graph with V vertices and E edges. The vertices represent distinct locations in the forest, and the edges represent pathways between those locations with specific travel times. The king wishes to know the shortest travel time for each fairy to travel from their starting location to a specific destination vertex, D, where the grand festival will be held. Since the fairies are magical creatures, they can use their magical powers to teleport back and forth along the pathways much quicker than normal beings could travel. Your task is to write a program that helps the king determine the shortest travel time for each fairy from their respective starting vertex to the destination vertex D. Input The input consists of multiple datasets, and the end of input is indicated by a line containing a single zero. Each dataset is given in the following format: n V E D u1 v1 w1 u2 v2 w2 :: uE vE wE fairy1_location fairy2_location :: fairyn_location - The first line gives the number of fairies n (1 ≤ n ≤ 100), the number of vertices V (1 ≤ V ≤ 100), the number of edges E (1 ≤ E ≤ 1,000), and the destination vertex D (1 ≤ D ≤ V). - The next E lines describe the pathways in the forest. Each pathway is defined by three integers, ui, vi (1 ≤ ui, vi ≤ V), which denote the two endpoints of the pathway, and wi (1 ≤ wi ≤ 1,000), which is the travel time between ui and vi. - The final n lines denote the initial location of each fairy, where fairy_i_location denotes the initial vertex of the i-th fairy (1 ≤ fairy_i_location ≤ V). Output For each dataset, output n lines. Each line should contain the shortest travel time for the i-th fairy to travel from their initial location to the destination vertex D. If a fairy cannot reach the destination vertex, output \\"INFINITY\\". Example Input 2 4 4 3 1 2 5 1 3 10 2 3 2 3 4 1 1 4 2 3 3 1 1 2 2 2 3 3 3 1 4 3 2 0 Output 7 2 4 2","solution":"import heapq import sys def dijkstra(start, v, graph): Implementation of Dijkstra\'s algorithm to find the shortest path in a graph. dist = [float(\'inf\')] * (v + 1) dist[start] = 0 priority_queue = [(0, start)] heapq.heapify(priority_queue) while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > dist[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist def find_travel_times(num_fairies, num_vertices, num_edges, destination, edges, fairy_locations): Find the shortest travel times for each fairy from their respective starting vertex to destination vertex D. # Create a graph representation graph = [[] for _ in range(num_vertices + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Run Dijkstra\'s algorithm from the destination vertex shortest_paths_from_dest = dijkstra(destination, num_vertices, graph) # Collect the results for each fairy results = [] for location in fairy_locations: time_to_dest = shortest_paths_from_dest[location] if time_to_dest == float(\'inf\'): results.append(\\"INFINITY\\") else: results.append(str(time_to_dest)) return results def process_input(data): index = 0 results = [] while data[index] != \'0\': n, V, E, D = map(int, data[index].split()) index += 1 edges = [] for _ in range(E): u, v, w = map(int, data[index].split()) edges.append((u, v, w)) index += 1 fairy_locations = [] for _ in range(n): location = int(data[index]) fairy_locations.append(location) index += 1 result = find_travel_times(n, V, E, D, edges, fairy_locations) results.extend(result) results.append(\\"\\") return results if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split(\'n\') output = process_input(input_data) for line in output: if line: print(line)"},{"question":"# Title: Evaluate Mathematical Expression Trees Given is a tree that represents a mathematical expression. Each node of the tree either contains an operator (`+`, `-`, `*`, `/`) or an integer. Leaf nodes contain integers, and non-leaf nodes contain operators. Write a function to evaluate the expression represented by the tree and return the result. The tree is represented using a nested dictionary where every node is represented by a dictionary itself containing `value`, `left`, and `right` keys. If a node is a leaf, its `left` and `right` values will be `None`. Constraints: * The given expression tree is valid and does not cause any division by zero. * The values in the tree will be within the range of a signed 32-bit integer. * The operators will be one of `+`, `-`, `*`, `/`. Input Description: * The tree is provided as a dictionary in the following format: { \\"value\\": value, \\"left\\": left_subtree, \\"right\\": right_subtree } Output Description: * Print the result of the evaluated expression as an integer, disregarding any fractional part during division operations. Examples: Input: { \\"value\\": \\"+\\", \\"left\\": { \\"value\\": 3, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": \\"*\\", \\"left\\": { \\"value\\": 2, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 5, \\"left\\": None, \\"right\\": None } } } Output: 13 Explanation: The expression tree represents the expression `(3) + (2 * 5)`, which evaluates to `3 + 10 = 13`.","solution":"def evaluate_expression_tree(tree): if tree[\\"left\\"] is None and tree[\\"right\\"] is None: return tree[\\"value\\"] left_value = evaluate_expression_tree(tree[\\"left\\"]) right_value = evaluate_expression_tree(tree[\\"right\\"]) if tree[\\"value\\"] == \\"+\\": return left_value + right_value elif tree[\\"value\\"] == \\"-\\": return left_value - right_value elif tree[\\"value\\"] == \\"*\\": return left_value * right_value elif tree[\\"value\\"] == \\"/\\": return left_value // right_value"},{"question":"You are given a non-empty string containing only digits and lowercase Latin letters. Weight of the string is defined as the sum of all digits in the string. Calculate the weight of the given string. Input The first line contains a non-empty string s (1 ≤ |s| ≤ 1000) — the string consisting of digits and lowercase Latin letters. Output Print one integer number — the weight of the string. Examples Input a1b2c3 Output 6 Input abcd1234 Output 10 Note In the first example, the digits in the string are 1, 2, and 3, summing up to 6. In the second example, the digits in the string are 1, 2, 3, and 4, summing up to 10.","solution":"def calculate_string_weight(s): Calculate the weight of the string, where weight is defined as the sum of all digits in the string. Args: s (str): The input string containing digits and lowercase Latin letters. Returns: int: The weight of the string. return sum(int(char) for char in s if char.isdigit())"},{"question":"Mia is participating in a treasure hunt where she has to find the shortest path through a grid. The grid is represented as an `n` x `m` matrix of characters. Each cell in the grid contains one of the following characters: - \'.\' (dot): An empty cell that Mia can walk through. - \'#\' (hash): A wall that Mia cannot pass through. - \'S\': The starting position of Mia. - \'T\': The treasure that Mia needs to reach. Mia can move up, down, left, or right to an adjacent cell, but she cannot move diagonally. Help Mia find the minimum number of steps required to reach the treasure from the starting position. If there is no path from the starting position to the treasure, output -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the grid. The following n lines contain m characters each, representing the grid. Output Print a single integer representing the minimum number of steps required to reach the treasure. If there is no valid path, output -1. Examples Input 3 3 S.. .#. ..T Output 4 Input 3 4 S# #..# #..T Output -1 Note In the first example, Mia follows the path `S → right → right → down → down` to reach the treasure in 4 steps. In the second example, Mia cannot reach the treasure due to the walls blocking the path. Therefore, the output is -1.","solution":"from collections import deque def min_steps_to_treasure(n, m, grid): # directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m # Find the starting position \'S\' and treasure \'T\' start = None end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': end = (i, j) if not start or not end: return -1 # BFS to find the minimum steps queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() # If reached the treasure if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Monica has a collection of N toys each with a toy ID ranging from 1 to N. She gives Ross a list of Q queries, where each query contains two integers L and R. For each query, Ross needs to determine the maximum toy ID in the range [L, R]. Monica assures that 1 ≤ L ≤ R ≤ N for each query. Input The first line contains two integers N and Q. The second line contains the N space-separated integers representing the toy IDs in the collection. The next Q lines contain two integers L and R for each query. Output For each query, print the maximum toy ID in the range [L, R]. Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ Toy ID ≤ 10^9 Note: Large input files. Use scanf instead of cin. SAMPLE INPUT 5 3 7 2 5 3 1 1 3 2 4 1 5 SAMPLE OUTPUT 7 5 7 Explanation Query 1: The toy IDs in the range [1, 3] are [7, 2, 5]. The maximum toy ID is 7. Query 2: The toy IDs in the range [2, 4] are [2, 5, 3]. The maximum toy ID is 5. Query 3: The toy IDs in the range [1, 5] are [7, 2, 5, 3, 1]. The maximum toy ID is 7.","solution":"def find_max_toy_ids(n, q, toys, queries): Returns the maximum toy ID for each query. n: int, number of toy IDs q: int, number of queries toys: list of int, list of toy IDs queries: list of tuple, each tuple contains two integers L and R Returns: list of int, maximum toy ID for each query results = [] for L, R in queries: results.append(max(toys[L-1:R])) return results"},{"question":"A group of research scientists are working on a project to study the migration patterns of a certain species of birds. They have installed several tracking devices that record the birds\' movement data every second. The data consists of a series of positions (x, y) in a 2D plane. The scientists observed that the birds follow a special route where they visit each position exactly once without revisiting any of them. They want to develop a program that can help them determine if the recorded data indeed represents such a unique path. The recorded data can either be a special route or not, and your task is to check if the given set of positions forms a unique path where each position is visited exactly once. Input: The input contains multiple test cases. The first line of the input contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000), the number of positions recorded. Followed by N pairs of integers representing the positions (x_i, y_i) (-1000 ≤ x_i, y_i ≤ 1000). Output: For each test case, output \\"YES\\" if the positions form a unique path, \\"NO\\" otherwise. Examples: Input: 3 5 1 2 2 3 3 4 4 5 5 6 4 1 1 2 2 1 1 3 3 6 1 0 0 1 -1 0 0 -1 1 1 -1 -1 Output: YES NO YES","solution":"def is_unique_path(test_cases): results = [] for case in test_cases: positions = set() unique = True for pos in case[\'positions\']: if pos in positions: unique = False break positions.add(pos) results.append(\\"YES\\" if unique else \\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) positions = [tuple(map(int, lines[i].split())) for i in range(index+1, index+1+N)] test_cases.append({\'N\': N, \'positions\': positions}) index += N + 1 return test_cases def main(input_data): test_cases = process_input(input_data) results = is_unique_path(test_cases) return \'n\'.join(results)"},{"question":"You are given an array of n elements with distinct integers. Your task is to sort the array such that at no point any number in the resultant sorted array appears at its original position in the given array. If there are multiple solutions, you can print any of them. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers indicating the elements of the array. It is guaranteed that all the given numbers are distinct and within the range from 1 to 1000 (inclusive). Output Print a single line with n space-separated integers, representing the array such that no integer appears at its original position. Examples Input 5 4 3 2 5 1 Output 2 5 4 1 3 Input 4 1 2 3 4 Output 2 1 4 3","solution":"def sort_with_no_fixed_points(n, arr): Sorts the array such that no integer appears at its original position. Parameters: n (int): The number of elements in the array. arr (list of int): The array of distinct integers. Returns: list of int: The sorted array where no integer is at its original position. if n == 1: return arr # Single element cannot be disarranged sorted_arr = sorted(arr) # To ensure no element is in its original position for i in range(n-1): if sorted_arr[i] == arr[i]: sorted_arr[i], sorted_arr[i + 1] = sorted_arr[i + 1], sorted_arr[i] # Edge case where the last element might still be at its original position if sorted_arr[-1] == arr[-1]: sorted_arr[-1], sorted_arr[-2] = sorted_arr[-2], sorted_arr[-1] return sorted_arr # Example usage: n = 5 arr = [4, 3, 2, 5, 1] print(sort_with_no_fixed_points(n, arr)) # Output: [2, 5, 4, 1, 3]"},{"question":"Sudha has recently started a book reading club, and she needs to distribute a set of books among the club members. Given that there are M members in the club and B books to be distributed, each book can be provided to exactly one member. Sudha wants to ensure that the distribution is as fair as possible, meaning the difference between the highest number of books received by any member and the lowest number of books received by any member is minimized. You are required to help Sudha distribute the books as fairly as possible and find out this minimum difference. Input Format The first line contains two integers, M and B. Output Format An integer that denotes the minimum difference in the number of books received by any two members. Constraints 1 ≤ M ≤ 10^6 1 ≤ B ≤ 10^9 SAMPLE INPUT 3 8 SAMPLE OUTPUT 1 Explanation One optimal way to distribute the books is: - Member 1 receives 3 books - Member 2 receives 3 books - Member 3 receives 2 books The difference between the highest and lowest number of books received is 1, which is the minimum possible difference.","solution":"def min_diff_books(M, B): Compute the minimum difference between the highest number of books received by any member and the lowest number of books received by any member. Parameters: M (int): Number of members B (int): Number of books Returns: int: The minimum difference between the highest and lowest number of books received by any two members. # Each member gets at least this many books books_per_member = B // M # Calculate the remainder of books after evenly distributing remainder_books = B % M # If there is no remainder, every member gets the same number of books if remainder_books == 0: return 0 else: return 1"},{"question":"You are given a string `S` consisting of lower case alphabets and an integer `K`. You need to determine the minimum possible number of characters that need to be removed from `S` so that the final string contains exactly `K` distinct characters. If it is not possible to form such a string, return -1. Constraints: - 1 leq |S| leq 1000 - 1 leq K leq 26 - S contains only lowercase English letters Input: Input is given from Standard Input in the following format: ``` S K ``` Output: Print the minimum number of characters that must be removed to form a string with exactly `K` distinct characters, or -1 if it is not possible. Examples: Input: ``` abcabc 2 ``` Output: ``` 2 ``` Input: ``` aaaaaaa 1 ``` Output: ``` 0 ``` Input: ``` abcabc 4 ``` Output: ``` -1 ```","solution":"def min_removals_to_k_distinct(S, K): Returns the minimum number of characters that need to be removed from S to contain exactly K distinct characters. If it is not possible, returns -1. from collections import Counter # Count the frequency of each character in S char_count = Counter(S) # If K is greater than the number of unique characters, return -1 if K > len(char_count): return -1 # If the number of unique characters is already K, no removal needed if len(char_count) == K: return 0 # Get the frequency of each character and sort them in non-decreasing order freq_list = sorted(char_count.values()) # Calculate minimal removals to have exactly K distinct characters removals = 0 current_distinct = len(char_count) # Remove the least frequent characters until we have exactly K distinct characters for freq in freq_list: if current_distinct <= K: break removals += freq current_distinct -= 1 return removals"},{"question":"Wanda is fascinated by prime numbers and enjoys finding them in various ranges. She has invented a new challenge for herself: finding sums of prime numbers in dynamic ranges. Given a large array `arr` of length `N` filled with integers, you will need to handle multiple queries. Each query is defined by two integers, `L` and `R`, which represent the indices of the subarray from `L` to `R` (inclusive). For each query, return the sum of all prime numbers within the specified subarray. To determine if a number is a prime, recall that a prime number is greater than 1 and has no positive divisors other than 1 and itself. Input The first line of the input contains two integers `N` and `Q`, representing the length of the array and the number of queries, respectively. The second line contains `N` integers, representing the elements of the array `arr`. Each of the next `Q` lines contains two integers, `L` and `R`, defining a query as described above. Note: Array indices are from 1 to N. Output For each query, output a single line containing the sum of the prime numbers in the subarray from `L` to `R`. Constraints 1 ≤ N ≤ 10^6 1 ≤ Q ≤ 10^5 1 ≤ arr[i] ≤ 10^7 1 ≤ L, R ≤ N Example Input: 10 3 2 3 4 5 6 7 8 9 10 11 1 4 2 6 7 10 Output: 10 15 11 Explanation Example case 1. The subarray from index 1 to 4 is [2, 3, 4, 5]. Primes are 2, 3, 5, with a sum of 10. Example case 2. The subarray from index 2 to 6 is [3, 4, 5, 6, 7]. Primes are 3, 5, 7, with a sum of 15. Example case 3. The subarray from index 7 to 10 is [8, 9, 10, 11]. Only 11 is prime, with a sum of 11.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def preprocess_primes(arr): Preprocess primes in the array and their prefix sums. N = len(arr) prime_sum_prefix = [0] * (N + 1) for i in range(N): if is_prime(arr[i]): prime_sum_prefix[i + 1] = prime_sum_prefix[i] + arr[i] else: prime_sum_prefix[i + 1] = prime_sum_prefix[i] return prime_sum_prefix def query_prime_sum(prime_sum_prefix, L, R): Get the sum of primes in the subarray from L to R using the precomputed prime sums. return prime_sum_prefix[R] - prime_sum_prefix[L - 1] def prime_sum_in_ranges(N, Q, arr, queries): Main function to handle multiple queries for prime sums in given ranges. prime_sum_prefix = preprocess_primes(arr) results = [] for L, R in queries: results.append(query_prime_sum(prime_sum_prefix, L, R)) return results"},{"question":"In a peaceful kingdom, there are N knights standing in a line, each with a unique strength value. The king wants to select a group of knights such that the sum of their strengths is as close to a given number S as possible. The group of selected knights must be standing next to each other in the line. Your task is to write a program that determines the sum of strengths of the group of knights whose strength sum is closest to S. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of knights. The second line contains N space-separated integers S1, S2, ..., SN denoting the strength of each knight. The third line contains a single integer S which is the target strength sum. Output For each test case, output a single line containing the sum of strengths of the group of knights closest to S. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 -1000 ≤ Si ≤ 1000 -10^9 ≤ S ≤ 10^9 Example Input: 2 5 1 2 3 4 5 11 3 -1 -2 -3 -4 Output: 10 -3 Explanation Example case 1: The closest sum to 11 is the sum of the group {2, 3, 4, 5} which is 10. Example case 2: The closest sum to -4 is the sum of the group {-1, -2, -3} which is -6. However, the sum {-2, -3} which is -5 is also close, and the sum {-3} is -3. Since -3 is closer to -4 than -5 or -6, the output is -3.","solution":"def closest_sum(T, test_cases): results = [] for i in range(T): N, strengths, S = test_cases[i] prefix_sums = [0] * (N + 1) for j in range(N): prefix_sums[j + 1] = prefix_sums[j] + strengths[j] closest_sum = float(\'inf\') for start in range(N): for end in range(start + 1, N + 1): current_sum = prefix_sums[end] - prefix_sums[start] if abs(current_sum - S) < abs(closest_sum - S): closest_sum = current_sum if closest_sum == S: break if closest_sum == S: break results.append(closest_sum) return results # Transform input and output input_data = [ (5, [1, 2, 3, 4, 5], 11), (3, [-1, -2, -3], -4) ] print(closest_sum(2, input_data))"},{"question":"Design a Ticket Reservation System: You have been tasked with designing a ticket reservation system for a small theater. The theater consists of rows of seats, identified by row numbers, and each row has a fixed number of seats identified by seat numbers. There are several shows scheduled, and each show can have different seating arrangements. You need to write a program that allows users to reserve tickets, cancel reservations, and check the status of seats for a given show. Input: The first line contains an integer n, the number of shows. The next n blocks of input describe each show as follows: - The first line of each block contains an identifier for the show (a string), the number of rows (r), and the number of seats per row (s). - The next m lines contain the types of operations, where m is the number of operations for that show. Each operation is one of the following: - \\"reserve row seat\\": Reserves the specified seat in the specified row. - \\"cancel row seat\\": Cancels the reservation for the specified seat in the specified row. - \\"status row seat\\": Checks if the specified seat in the specified row is reserved or not. Output: For each operation that checks the status of a seat, output either \\"Reserved\\" or \\"Available\\". Constraints: 1 ≤ n ≤ 100 1 ≤ r, s ≤ 100 1 ≤ m ≤ 1000 Example Input: 1 ShowA 3 4 reserve 1 1 status 1 1 reserve 1 2 status 1 2 cancel 1 1 status 1 1 Example Output: Reserved Reserved Available Explanation: The theater has one show \\"ShowA\\" with 3 rows and 4 seats per row. The operations are described as follows: 1. Reserve seat 1 in row 1. 2. Check status of seat 1 in row 1 (Should output \\"Reserved\\"). 3. Reserve seat 2 in row 1. 4. Check status of seat 2 in row 1 (Should output \\"Reserved\\"). 5. Cancel reservation for seat 1 in row 1. 6. Check status of seat 1 in row 1 (Should output \\"Available\\").","solution":"class Theater: def __init__(self, rows, seats_per_row): self.seats = [[False] * seats_per_row for _ in range(rows)] def reserve(self, row, seat): if not self.seats[row-1][seat-1]: self.seats[row-1][seat-1] = True return \\"Reserved\\" return \\"Already Reserved\\" def cancel(self, row, seat): if self.seats[row-1][seat-1]: self.seats[row-1][seat-1] = False return \\"Cancellation Successful\\" return \\"Already Available\\" def status(self, row, seat): return \\"Reserved\\" if self.seats[row-1][seat-1] else \\"Available\\" def process_commands(shows): results = [] for show in shows: identifier, rows, seats_per_row = show[\'details\'] theater = Theater(rows, seats_per_row) for command in show[\'commands\']: action, row, seat = command.split() row, seat = int(row), int(seat) if action == \\"reserve\\": theater.reserve(row, seat) elif action == \\"cancel\\": theater.cancel(row, seat) elif action == \\"status\\": results.append(theater.status(row, seat)) return results def main(n, show_details): shows = [] for i in range(n): details = show_details[i][\'details\'] commands = show_details[i][\'commands\'] shows.append({\'details\': details, \'commands\': commands}) return process_commands(shows)"},{"question":"You\'re designing a data structure for a new social media platform. The platform needs to efficiently manage and process user connections and interactions. Each user on the platform can follow any other user. You are required to implement two functionalities: 1. Follow: One user follows another user. 2. Find common followers: Given two users, find the common followers they both have. You need to implement the following methods in a class `SocialNetwork`: - `follow(follower_id: int, followee_id: int) -> None`: This method registers that the user with `follower_id` has followed the user with `followee_id`. - `commonFollowers(user1_id: int, user2_id: int) -> List[int]`: This method returns a list of user IDs who are common followers of both `user1_id` and `user2_id`. The result should be sorted in ascending order. Note: User IDs are positive integers. Assume the following and follow requests are valid and the users exist. # Example ```python # Initialize the social network network = SocialNetwork() # User 1 follows User 2 network.follow(1, 2) # User 1 follows User 3 network.follow(1, 3) # User 2 follows User 3 network.follow(2, 3) # User 2 follows User 4 network.follow(2, 4) # User 3 follows User 4 network.follow(3, 4) # Find common followers of user 2 and 3 common = network.commonFollowers(2, 3) # Output should be [1] print(common) # Find common followers of user 3 and 4 common = network.commonFollowers(3, 4) # Output should be [2] print(common) ``` In this example, User 1 follows User 2 and User 3. User 2 follows User 3 and User 4. User 3 follows User 4. User 1 is the common follower of User 2 and User 3. User 2 is the common follower of User 3 and User 4. # Constraints - Your solution should handle up to 10^5 follow operations efficiently. - Each user can follow up to 10^5 users. # Input & Output Your class will be tested with multiple method calls: - The `follow` method will be called with two integers, representing the ID of a follower and a followee. - The `commonFollowers` method will be called with two integers, representing the IDs of two users, and your program should return a list of integers. Implement the class `SocialNetwork` with the required methods.","solution":"from collections import defaultdict from typing import List class SocialNetwork: def __init__(self): self.followees = defaultdict(set) def follow(self, follower_id: int, followee_id: int) -> None: self.followees[followee_id].add(follower_id) def commonFollowers(self, user1_id: int, user2_id: int) -> List[int]: followers_user1 = self.followees[user1_id] followers_user2 = self.followees[user2_id] common = followers_user1.intersection(followers_user2) return sorted(common)"},{"question":"The \\"Title Case\\" Problem Title case is a format typically used for headings and titles where the first and significant words of a phrase are capitalized and the rest are in lowercase. In this problem, you\'ll need to convert a given sentence into title case. Rules for title casing are as follows: - Capitalize the first letter of each word. - Convert all other letters to lowercase. Write a program that converts the input sentence to title case. Input The first line of the input consists of a sentence containing both uppercase and lowercase Latin letters and spaces. The length of the sentence is from 1 to 1000 characters, inclusive. Output Print the sentence converted to title case. Examples Input this is a title Output This Is A Title Input ALL CAPS Output All Caps","solution":"def title_case(sentence): Converts the input sentence to title case. Parameters: sentence (str): The input sentence to be converted. Returns: str: The sentence converted to title case. return \' \'.join(word.capitalize() for word in sentence.split())"},{"question":"You are given a list of integers representing the rankings of participants in a competition. Any integer can appear multiple times in the list, meaning multiple participants can have the same ranking. Your task is to determine the total number of unique rankings in the list. Constraints: - 1 leq N leq 10^6, where N is the number of participants - 1 leq ranking_i leq 10^9, where ranking_i is the ranking of the i-th participant Input The input is given from Standard Input in the following format: N ranking_1 ranking_2 ranking_3 ... ranking_N Output Print the total number of unique rankings. Examples Input 5 2 3 2 5 1 Output 4 Input 8 1 1 1 1 1 1 1 1 Output 1 Input 4 10 20 10 30 Output 3","solution":"def count_unique_rankings(n, rankings): Returns the total number of unique rankings in the list. :param n: Number of participants :param rankings: List of rankings :return: Number of unique rankings # Convert list to a set to remove duplicates and then get the length of the set unique_rankings = set(rankings) return len(unique_rankings) # Example Usage: # n = 5 # rankings = [2, 3, 2, 5, 1] # print(count_unique_rankings(n, rankings)) # Output: 4"},{"question":"Given a string of lowercase English letters, you need to determine the number of vowels and consonants in the string. The vowels are \'a\', \'e\', \'i\', \'o\', and \'u\'. All other letters are considered consonants. Constraints: * The input string will contain only lowercase English letters. * The length of the string will be at least 1 and not exceed 10,000. Input: The input is provided from Standard Input in the following format: A single line containing the input string. Output: Print two integers separated by a space representing the number of vowels and consonants in the string respectively. Example: Input: hello Output: 2 3 Input: programming Output: 3 8","solution":"def count_vowels_and_consonants(s): Given a string of lowercase English letters, returns the number of vowels and consonants in the string. vowels = set(\\"aeiou\\") num_vowels = sum(1 for char in s if char in vowels) num_consonants = len(s) - num_vowels return num_vowels, num_consonants"},{"question":"You are given a string s consisting of only ‘(’ and ‘)’. You need to balance the parentheses by inserting the fewest number of parenthesis characters. A balanced string has the following properties: - An empty string is balanced. - If S is balanced, then (S) is balanced. - If S and T are balanced, then ST (concatenation of S and T) is balanced. Write a function to return the minimum number of parenthesis characters that need to be inserted to make the string balanced. Input The input contains a single line, the string s (1 ≤ |s| ≤ 100,000), consisting of only \'(\' and \')\'. Output Output a single integer, the minimum number of parenthesis characters needed to make the string balanced. Function Signature ```python def min_insertions_to_balance(s: str) -> int: pass ``` Examples Input ``` ())) ``` Output ``` 2 ``` Explanation: One way to balance the string is to insert two \'(\' characters at the beginning: \\"(()))\\". Input ``` ((( ``` Output ``` 3 ``` Explanation: One way to balance the string is to insert three \')\' characters at the end: \\"((()))\\".","solution":"def min_insertions_to_balance(s: str) -> int: Returns the minimum number of parenthesis characters that need to be inserted to make the string balanced. open_count = 0 insertions_needed = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: insertions_needed += 1 return insertions_needed + open_count"},{"question":"Given the cities, roads, and distance between them, your task is to find the shortest path between two cities. You will be provided with a list of cities connected by roads and distances, followed by several queries to determine the shortest distance between two specific cities. Each road has a positive distance, and there may be multiple roads connecting the same pair of cities. The provided map guarantees that there is at least one path between any two cities. Write a program to process these queries and output the shortest distance for each pair of cities. # Input The input consists of multiple datasets. Each dataset starts with an integer `n` (1 ≤ n ≤ 1000), indicating the number of cities, followed by an integer `m` (0 ≤ m ≤ 10000), indicating the number of roads. Each of the next `m` lines contains three elements: `city1`, `city2`, and `distance` (1 ≤ distance ≤ 100), specifying a one-way road from `city1` to `city2` with the given distance. Cities are indexed starting from 1. Following the roads, an integer `q` (1 ≤ q ≤ 500) specifies the number of queries. Each of the next `q` lines contains two integers: `start` and `end`, which denote the cities to query the shortest path between. The input ends with a single `#` (pound) line. # Output For each query, print the shortest distance between the start and end cities on a separate line. If there is no path between the two cities, print `-1`. # Example Input ``` 4 5 1 2 10 1 3 10 2 4 10 3 4 10 2 3 2 3 1 4 1 3 2 3 # ``` Output ``` 20 10 2 ``` # Notes - You may use any pathfinding algorithm such as Dijkstra\'s or Floyd-Warshall to solve the problem. - Ensure your solution efficiently handles the upper limits of input constraints.","solution":"import heapq def dijkstra(graph, n, start, end): distances = {city: float(\'inf\') for city in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def find_shortest_paths(n, m, roads, q, queries): graph = {city: [] for city in range(1, n + 1)} for city1, city2, distance in roads: graph[city1].append((city2, distance)) results = [] for start, end in queries: results.append(dijkstra(graph, n, start, end)) return results"},{"question":"You are given an array representing a sequence of daily temperatures, and your task is to compute the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, output 0 for that day. For example, given a list of daily temperatures `T`, your output should be an array `D` such that `D[i]` indicates the number of days you would need to wait after the `i`-th day to experience a warmer temperature. If there is no such day, `D[i]` should be 0. # Input - The input consists of a single line containing integers `T1, T2, ..., Tn` where `1 ≤ n ≤ 100000` and `-100 ≤ Ti ≤ 100`, representing temperatures. # Output - Output a single line containing integers `D1, D2, ..., Dn` where `Di` represents the number of days you would need to wait after day `i` to experience a warmer temperature. # Example Input ``` 73 74 75 71 69 72 76 73 ``` Output ``` 1 1 4 2 1 1 0 0 ``` # Explanation For the temperature list `[73, 74, 75, 71, 69, 72, 76, 73]`, you would process each day as follows: - For day 0: The next warmer day is day 1 (74º), so `D[0] = 1`. - For day 1: The next warmer day is day 2 (75º), so `D[1] = 1`. - For day 2: The next warmer day is day 6 (76º), so `D[2] = 4`. - For day 3: The next warmer day is day 5 (72º), so `D[3] = 2`. - For day 4: The next warmer day is day 5 (72º), so `D[4] = 1`. - For day 5: The next warmer day is day 6 (76º), so `D[5] = 1`. - For day 6: There is no warmer day, so `D[6] = 0`. - For day 7: There is no warmer day, so `D[7] = 0`.","solution":"def daily_temperatures(T): Computes the number of days until a warmer temperature for each day. Parameters: T (list of int): A list of daily temperatures. Returns: list of int: A list where the value at each index i is the number of days until a warmer temperature. If no warmer temperature, the value is 0. n = len(T) answer = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"**Input Format** M b_1 b_2 b_3 ... b_M Output Format Print the length of the longest subsequence in one line. In the end put a line break. Constraints * 1 ≤ M ≤ 20 * 1 ≤ b_i ≤ 10^6 Scoring Subtask 1 [180 points] * b_i are all distinct Subtask 2 [120 points] * b_i ≤ 10 Subtask 3 [120 points] * There are no additional constraints. Input Format M b_1 b_2 b_3 ... b_M Example Input 6 4 2 5 8 6 3 Output 3","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 # Initialization of dp array dp = [1] * len(arr) # Every element is an LIS of length 1 by itself # Dynamic programming to find length of LIS for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # The maximum value in the dp array is the answer return max(dp)"},{"question":"A string consisting of lowercase characters is given. You need to determine the length of the shortest substring that contains at least one occurrence of each unique character in the given string. Constraints * The string will contain only lowercase alphabetic characters (a-z) and will not exceed a length of 10,000 characters. Input The input is given in the following format. > S Output Output the length of the shortest substring containing all unique characters present in the input string. > L Examples Input abac Output 3 Input aabbc Output 4","solution":"def find_shortest_substring_length(s): from collections import Counter unique_chars = set(s) required_char_count = len(unique_chars) char_counter = Counter() num_unique_chars_in_window = 0 left = 0 shortest_length = float(\'inf\') for right in range(len(s)): char_counter[s[right]] += 1 if char_counter[s[right]] == 1: num_unique_chars_in_window += 1 while num_unique_chars_in_window == required_char_count: current_window_length = right - left + 1 shortest_length = min(shortest_length, current_window_length) char_counter[s[left]] -= 1 if char_counter[s[left]] == 0: num_unique_chars_in_window -= 1 left += 1 return shortest_length"},{"question":"In a small village, there are n houses arranged in a single line (denoted by a 1-D array) where each house has some amount of food stored in it. The village has experienced an increase in thefts, so the villagers have formed a strategy to defend their food. They decided that no two adjacent houses should be monitored by guards on the same night, meaning the guards will never monitor two successive houses. The villagers ask you, as the chief of security, for help in calculating the maximum amount of food that can be safeguarded without monitoring two consecutive houses. Write a function to determine the maximum sum of food that can be safeguarded from the series of houses, where no two adjacent houses are both monitored by guards. Function signature: `int maximizeFood(vector<int>& food)` # Input: - `food`: A list of integers where `food[i]` represents the amount of food stored in the i-th house. (1 ≤ `food.length` ≤ 105, 0 ≤ `food[i]` ≤ 104) # Output: - Return an integer representing the maximum amount of food that can be safeguarded. # Examples: Example 1: Input: ``` food = [1, 2, 3, 1] ``` Output: ``` 4 ``` Explanation: By monitoring houses 1 and 3, we get a maximum of 1 + 3 = 4. Example 2: Input: ``` food = [2, 7, 9, 3, 1] ``` Output: ``` 12 ``` Explanation: By monitoring houses 1, 3, and 5, we get a maximum of 2 + 9 + 1 = 12. # Constraints: - The function must run in O(n) time complexity. - Only one integer should be returned as the output. # Note: Feel free to use dynamic programming techniques to get an optimal solution.","solution":"def maximizeFood(food): Determines the maximum sum of food that can be safeguarded from the series of houses, with the condition that no two adjacent houses are both monitored by guards. if not food: return 0 n = len(food) if n == 1: return food[0] # Dynamic programming array to store the maximum food up to each house dp = [0] * n dp[0] = food[0] dp[1] = max(food[0], food[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + food[i]) return dp[-1]"},{"question":"Emma loves competitive programming and enjoys solving problems that involve finding patterns. She has come across an interesting problem where she needs to find out if it is possible to reorder a given array of integers such that each element in the array is divisible by the previous element. If such a reordering is possible, she is also interested in the lexicographically smallest possible reordering. Help Emma by writing a function that will take an array of integers and determine if such a reordering is possible. If possible, return the lexicographically smallest reordering. Otherwise, return an empty array. Input The input consists of a single list of integers `nums` representing the array of integers. Output Return a list of integers representing the lexicographically smallest reordering if it exists, otherwise return an empty list. Examples Input [4, 6, 8, 12] Output [4, 8, 12, 6] Input [1, 3, 6, 2] Output [] Input [2, 4, 8, 16] Output [2, 4, 8, 16] Input [10, 5, 15, 30] Output [5, 10, 15, 30] Note: - The lexicographical order means that if two sequences are compared, the sequence that is smaller in dictionary order should come first. - If multiple reordering solutions exist, always return the lexicographically smallest one.","solution":"def smallest_divisible_reordering(nums): Returns the lexicographically smallest reordering such that each element in the array is divisible by the previous element if possible. def can_reorder(nums): nums.sort() for i in range(1, len(nums)): if nums[i] % nums[i-1] != 0: return False return True nums.sort() if can_reorder(nums): return nums return [] # Example usage print(smallest_divisible_reordering([4, 6, 8, 12])) # Output: [4, 8, 12, 6] => corrected expected output should be [] print(smallest_divisible_reordering([1, 3, 6, 2])) # Output: [] print(smallest_divisible_reordering([2, 4, 8, 16])) # Output: [2, 4, 8, 16] print(smallest_divisible_reordering([10, 5, 15, 30])) # Output: [5, 10, 15, 30] => corrected expected output should be []"},{"question":"A painter is tasked with painting a large wall using the least number of strokes possible. The wall is represented as a string consisting of lowercase letters, where each letter represents a different color of paint. The painter can paint over a contiguous substring of the wall with a single color in one stroke. Write a program to determine the minimum number of strokes the painter needs to completely paint the wall such that every segment of the wall is painted exactly once. If a segment of the wall is already the desired color, no painting is required for that segment. Input: * A single string `s` (1 ≤ |s| ≤ 500) consisting of lowercase letters `a` to `z` representing the colors of the wall. Output: * An integer representing the minimum number of strokes required to paint the wall. Example: Input: abac Output: 4 Input: aaabbb Output: 2 Note: In the first example, the painter needs to paint each character separately (four strokes) because each character is different. In the second example, the painter can paint the first three characters \'a\' in one stroke and the last three characters \'b\' in another stroke, making two strokes in total.","solution":"def min_strokes(s): Returns the minimum number of strokes required to paint the wall. n = len(s) if n == 0: return 0 strokes = 1 # The first character always needs one initial stroke. for i in range(1, n): if s[i] != s[i-1]: strokes += 1 return strokes"},{"question":"Alex is passionate about hiking and always looking for new trails to explore in different terrains. Inspired by his hiking experiences, he came up with a mathematical problem involving the elevation changes on a trail and wishes to share it with you. A trail can be represented as a series of elevation points at different indices along the path. The elevation at the i-th point is given by an integer `e[i]`. The positive difference between two points on the trail determines how challenging a hike from one point to another is. Alex wonders what is the maximum positive difference you can achieve by hiking from a lower index to a higher index, if hiking multiple times is allowed. Formally, you need to find the maximum value of `e[j] - e[i]` such that 0 ≤ i < j < n. Alex would also like to know the minimum number of intervals needed to achieve this maximum difference, where each interval starts and ends at specific points on the trail. Input The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of elevation points on the trail. The second line contains n integers `e1, e2, ..., en` (0 ≤ ei ≤ 1,000,000) — the elevations at the respective points. Output Output the maximum positive difference followed by the minimum number of intervals needed to achieve this difference. Example Input 6 10 2 5 7 15 1 Output 13 1 Explanation The maximum positive difference is `15 - 2 = 13`, with only one interval needed, starting from index 1 (elevation 2) to index 4 (elevation 15).","solution":"def max_positive_difference_and_intervals(n, elevations): if n < 2: return (0, 0) min_elevation = elevations[0] max_diff = 0 intervals = 0 for i in range(1, n): if elevations[i] > min_elevation: current_diff = elevations[i] - min_elevation if current_diff > max_diff: max_diff = current_diff intervals = 1 elif current_diff == max_diff: intervals += 1 min_elevation = min(min_elevation, elevations[i]) return max_diff, intervals"},{"question":"An online store wants to optimize their delivery service. The store has a list of orders with each order containing a specific number of items. A delivery van can hold a maximum of k items. The objective is to determine the minimum number of trips the van needs to make to deliver all orders. Input The first line of the input contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 1000), where n is the number of orders, and k is the maximum number of items the van can hold in a single trip. The second line contains n integers, where the i-th integer ai (1 ≤ ai ≤ 100) represents the number of items in the i-th order. Output Output a single integer — the minimum number of trips required to deliver all orders. Examples Input 5 10 2 8 3 5 7 Output 3 Input 4 5 1 2 1 3 Output 2","solution":"def min_trips(n, k, orders): Returns the minimum number of trips required to deliver all orders. :param n: Number of orders (integer) :param k: Maximum number of items the van can hold (integer) :param orders: List containing the number of items in each order (list of integers) :return: Minimum number of trips required (integer) from math import ceil total_items = sum(orders) return ceil(total_items / k)"},{"question":"A logistics company needs to distribute loads to a set of delivery trucks lined up in a sequence. Each truck has a maximum weight capacity and current weight already loaded. The company has a new load of items which are also given in sequence, and they need to be distributed to the trucks. Each item can only be loaded onto a truck if it does not exceed the truck\'s remaining capacity. The loading must be done in the order given - you cannot skip an item. You should determine if it\'s possible to load all items into the trucks following these rules and, if so, distribute them. If it is not possible, indicate that it cannot be done. Constraints: * 1 ≤ N ≤ 100 (number of trucks) * 1 ≤ M ≤ 100 (number of items) * 1 ≤ current_weight[i], max_weight[i] ≤ 100 for 1 ≤ i ≤ N * 1 ≤ item_weight[j] ≤ 100 for 1 ≤ j ≤ M * All input values are integers. Input: The input is given from Standard Input in the following format: N M current_weight[1] max_weight[1] current_weight[2] max_weight[2] ... current_weight[N] max_weight[N] item_weight[1] item_weight[2] ... item_weight[M] Output: Print `YES` if all items can be loaded into the trucks without violating the capacity constraints. Otherwise, print `NO`. Examples Input: 3 3 10 15 8 12 5 5 2 3 4 Output: YES Input: 2 2 8 10 10 12 5 3 Output: NO","solution":"def is_loading_possible(N, M, current_weights, max_weights, item_weights): truck_index = 0 for item in item_weights: while truck_index < N and item + current_weights[truck_index] > max_weights[truck_index]: truck_index += 1 if truck_index >= N: return \\"NO\\" current_weights[truck_index] += item return \\"YES\\""},{"question":"You are given a binary tree where each node contains an integer value. We define the width of a level in the tree as the number of nodes present at that level. The task is to find the maximum width among all the levels in the tree. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between node u and node v. - The last line contains n integers, where the i-th integer represents the value of the i-th node. Output - Print a single integer, the maximum width of the tree. Examples Input 6 1 2 1 3 2 4 2 5 3 6 7 2 9 10 15 11 Output 3 Input 4 1 2 1 3 3 4 5 3 8 12 Output 2 Note In the first example, the binary tree looks like below: 1 / 2 3 / / 4 5 6 The widths of the levels are: - Level 1: 1 node (1) - Level 2: 2 nodes (2, 3) - Level 3: 3 nodes (4, 5, 6) The maximum width is 3. In the second example, the binary tree looks like below: 1 / 2 3 4 The widths of the levels are: - Level 1: 1 node (1) - Level 2: 2 nodes (2, 3) - Level 3: 1 node (4) The maximum width is 2.","solution":"from collections import deque, defaultdict def max_width_binary_tree(n, edges, values): if n == 1: return 1 # Construct the adjacency list from the edges adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Perform BFS to determine the width of each level max_width = 0 queue = deque([1]) # Start BFS traversal from the root node (node 1) visited = set() visited.add(1) while queue: level_size = len(queue) max_width = max(max_width, level_size) for _ in range(level_size): node = queue.popleft() for neighbor in adj[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return max_width # Example usage n = 6 edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] values = [7, 2, 9, 10, 15, 11] print(max_width_binary_tree(n, edges, values)) # Should output 3"},{"question":"A company is planning to organize a workshop consisting of multiple sessions. Each session must have a specific starting and ending time. The sessions may overlap with each other. To handle multiple sessions happening at the same time, they need to allocate meeting rooms. Each room can be used by only one session at a time. Given the array of sessions with their start and end times, determine the minimum number of meeting rooms required to conduct all the sessions. Input format The first line contains the number T, the number of test cases. Each of the following test cases includes: - A single integer N, the number of sessions. - N pairs of integers where each pair represents the start time and end time of a session. Output format For each test case, print the minimum number of meeting rooms required. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^2 0 ≤ start time, end time ≤ 10^4 Each session\'s start time is strictly less than its end time. Sample input 3 3 0 30 5 10 15 20 2 2 7 3 10 4 1 8 2 6 3 5 7 10 Sample output 2 2 3 Explanation In the first example, two sessions (0-30 and 15-20) overlap with the second session (5-10), so two rooms are needed. In the second example, both sessions (2-7 and 3-10) overlap, so two rooms are required. In the third example, the maximum overlap is three sessions (1-8, 2-6, and 3-5), so three rooms are necessary.","solution":"import heapq def min_meeting_rooms(sessions): if not sessions: return 0 # Sort the sessions by start time sessions.sort(key=lambda x: x[0]) # Use a min-heap to keep track of the end times of sessions heap = [] # Add the end time of the first session heapq.heappush(heap, sessions[0][1]) for i in range(1, len(sessions)): # If the room due to free the earliest is free, assign that room to the current session. if sessions[i][0] >= heap[0]: heapq.heappop(heap) # If a new room is to be assigned, then also we add to the heap. heapq.heappush(heap, sessions[i][1]) # The size of the heap will tell us the minimum rooms required for all sessions. return len(heap) def process_input(test_cases): results = [] for sessions in test_cases: results.append(min_meeting_rooms(sessions)) return results def parse_input(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) sessions = [] for j in range(index + 1, index + N + 1): start, end = map(int, lines[j].split()) sessions.append((start, end)) test_cases.append(sessions) index += N + 1 return test_cases"},{"question":"Willy is playing a game with numbers. He starts with a permutation of n distinct integers: p1, p2, ..., pn. The absolute difference between two consecutive elements of the permutation is called a \\"jump\\". Willy wants to find the permutation p of integers 1 to n such that the maximum jump in the permutation is minimized. Help Willy to find such a permutation. Input The input consists of a single integer n (1 ≤ n ≤ 10^5), representing the size of the permutation. Output Print the permutation of integers from 1 to n such that the maximum jump between consecutive elements is minimized. Examples Input 4 Output 2 4 3 1 Input 5 Output 3 2 4 5 1","solution":"def minimized_max_jump_permutation(n): Returns the permutation of integers from 1 to n such that the maximum jump between consecutive elements is minimized. result = [] for i in range(1, n + 1, 2): result.append(i) for i in range(2, n + 1, 2): result.append(i) return result"},{"question":"You are given a matrix consisting of m rows and n columns. Each cell contains either a 0 or a 1. Your task is to identify the number of distinct islands in the matrix. An island is defined as a maximal group of connected horizontal or vertical 1s. Diagonal connections are not considered. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the matrix. Each of the next m lines contains n integers either 0 or 1. Output For each test case, print one integer — the number of distinct islands in the matrix. Example Input 2 4 5 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 1 0 0 0 3 3 1 1 0 0 0 0 0 0 1 Output 3 2","solution":"def count_islands(matrix): Counts the number of distinct islands of 1s in the given matrix. if not matrix: return 0 m, n = len(matrix), len(matrix[0]) visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n: return if matrix[x][y] == 0 or visited[x][y]: return visited[x][y] = True # Explore all four possible directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1 and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def find_number_of_islands(test_cases): Processes each test case and returns the number of distinct islands for each matrix. results = [] for case in test_cases: m, n, matrix = case results.append(count_islands(matrix)) return results # Example usage for provided inputs test_cases = [ (4, 5, [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0] ]), (3, 3, [ [1, 1, 0], [0, 0, 0], [0, 0, 1] ]) ] print(find_number_of_islands(test_cases))"},{"question":"A treasure map shows `n` spots on a 2D plane, where a treasure might be buried. It is guaranteed that the exact location of the treasure is at one of these spots. However, the treasure hunters want to maximize their chances of discovering the treasure efficiently. They decide to start digging at the closest spot to a given starting point `(sx, sy)`. Write a program to help them determine the closest spot to the starting point. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of potential spots. The second line contains two integers `(sx, sy)` ( - 10^4 ≤ sx, sy ≤ 10^4) — the coordinates of the starting point. The next `n` lines contain two integers `xi, yi` ( - 10^4 ≤ xi, yi ≤ 10^4) — the coordinates of the potential spots. All given points are distinct. Output Print two integers `xi, yi` — the coordinates of the closest spot to the starting point `(sx, sy)`. If there are multiple spots at the same minimum distance, print the first such spot in the input. Examples Input 3 0 0 1 1 2 2 -1 -1 Output 1 1 Input 5 3 4 1 2 8 8 -1 -1 4 3 5 2 Output 4 3","solution":"def find_closest_spot(n, sx, sy, spots): Returns the coordinates of the spot closest to the starting point (sx, sy). Parameters: n (int): The number of potential spots sx (int): The x-coordinate of the starting point sy (int): The y-coordinate of the starting point spots (List[Tuple[int, int]]): A list of tuples where each tuple contains the x and y coordinates of a potential spot Returns: Tuple[int, int]: The coordinates of the closest spot min_distance = float(\'inf\') closest_spot = None for spot in spots: xi, yi = spot distance = (xi - sx)**2 + (yi - sy)**2 if distance < min_distance: min_distance = distance closest_spot = (xi, yi) return closest_spot"},{"question":"A company offers a subscription service with two types of subscriptions: Basic and Premium. Each subscription type incurs a specific monthly fee. Some users might share their subscription with others, forming groups. If anyone in the group has a Premium subscription, then the entire group will be treated as Premium subscribers. Your task is to calculate the total monthly revenue based on the subscriptions and groupings of users. Each user is part of exactly one group. You are given the number of users, the subscription type of each user, and the group each user belongs to. Constraints * 1 ≤ U ≤ 100,000 * 0 ≤ G ≤ 100,000 * 1 ≤ Basic Fee ≤ 1000 * 1 ≤ Premium Fee ≤ 1000 * The subscription type is either \\"B\\" (Basic) or \\"P\\" (Premium). * Each group identifier is an integer from 1 to G. Input The input is given from Standard Input in the following format: U G Basic Fee Premium Fee s_1 g_1 s_2 g_2 ... s_U g_U Where: - U is the number of users. - G is the number of groups. - Basic Fee is the monthly fee for a Basic subscription. - Premium Fee is the monthly fee for a Premium subscription. - s_i is the subscription type of the i-th user (\\"B\\" for Basic, \\"P\\" for Premium). - g_i is the group identifier of the i-th user. Output Print the total monthly revenue. Examples Input 5 3 10 20 B 1 P 1 B 2 B 3 P 3 Output 50 Input 4 2 15 25 B 1 B 1 P 2 B 2 Output 40 Input 3 1 12 30 B 1 B 1 B 1 Output 12","solution":"def calculate_total_revenue(U, G, basic_fee, premium_fee, users): group_has_premium = set() group_to_users = {} for subscription, group in users: if group not in group_to_users: group_to_users[group] = [] group_to_users[group].append(subscription) if subscription == \'P\': group_has_premium.add(group) total_revenue = 0 for group, subs in group_to_users.items(): if group in group_has_premium: total_revenue += premium_fee else: total_revenue += basic_fee return total_revenue"},{"question":"You are given an array of integers and an integer k. Your task is to find the number of unique k-diff pairs in the array. Here, a k-diff pair is defined as an integer pair (num1, num2), where num1 and num2 are both numbers in the array and their absolute difference is k. Write a function to return the number of unique k-diff pairs in the given array. Constraints * 1 ≤ array length ≤ 10,000 * -10,000 ≤ array elements ≤ 10,000 * 0 ≤ k ≤ 10,000 Input The input consists of two lines: - The first line is the array of integers separated by a space. - The second line is the integer k. Output Output a single integer representing the number of unique k-diff pairs in the array. Examples Input 3 1 4 1 5 2 Output 2 Input 1 2 3 4 5 1 Output 4 Input 1 3 1 5 4 0 Output 1","solution":"def find_k_diff_pairs(nums, k): Finds the number of unique k-diff pairs in the array. if k < 0: return 0 from collections import Counter count = 0 nums_counter = Counter(nums) if k == 0: # For k = 0, we just count the numbers that appear more than once for num, freq in nums_counter.items(): if freq > 1: count += 1 else: # For k > 0, we check for each number if num + k exists for num in nums_counter: if (num + k) in nums_counter: count += 1 return count"},{"question":"Alice loves gardening and has decided to plant n different types of flowers in her garden. Each type of flower requires a specific amount of sunlight per day to grow properly. Alice has limited space, so she can plant exactly m types of flowers, ensuring they receive enough sunlight. She cannot plant the same type of flower more than once. Alice needs your help to determine the maximum total amount of sunlight she can give to her garden if she plants exactly m types of flowers. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 100) — the number of different types of flowers Alice has and the number of types she can plant in her garden, respectively. The second line contains n integers where the i-th integer denotes the amount of sunlight (in hours) required per day by the i-th type of flower. Output Print a single integer — the maximum total amount of sunlight Alice can provide by planting exactly m types of flowers. Examples Input 5 3 4 7 1 3 5 Output 16 Input 4 2 2 2 10 8 Output 18","solution":"def max_sunlight(n, m, sunlight_requirements): Returns the maximum total amount of sunlight Alice can provide by planting exactly m types of flowers from the given n types of flowers. :param n: The number of different types of flowers :param m: The number of types she can plant :param sunlight_requirements: List of sunlight requirements for each type :return: Maximum total amount of sunlight # Sort the sunlight requirements in descending order sorted_requirements = sorted(sunlight_requirements, reverse=True) # Sum the first m elements to get the maximum possible sunlight return sum(sorted_requirements[:m])"},{"question":"A line in a 2D plane is represented by the equation ax + by + c = 0, where a, b, and c are integers. Given N lines, the aim is to determine the number of points (x, y) where at least two lines intersect. The output should be the count of these distinct intersection points. Input The input is given in the following format: N a1 b1 c1 a2 b2 c2 : aN bN cN The first line contains the number of lines N (2 ≤ N ≤ 1000). The next N lines each contain three integers ai, bi, and ci (-1000 ≤ ai, bi, ci ≤ 1000), representing the coefficients of the i-th line. Output The output should be a single integer representing the number of distinct intersection points at which at least two lines intersect. Examples Input 3 1 -1 -1 2 -2 -2 1 0 -1 Output 1 Input 4 1 2 -3 2 -1 4 1 -1 -1 -1 -2 3 Output 3","solution":"def gcd(x, y): while y: x, y = y, x % y return x def intersection_count(N, lines): intersection_points = set() for i in range(N): for j in range(i + 1, N): a1, b1, c1 = lines[i] a2, b2, c2 = lines[j] det = a1 * b2 - a2 * b1 if det == 0: continue x_nom = b1 * c2 - b2 * c1 y_nom = a2 * c1 - a1 * c2 gcd_x = gcd(abs(x_nom), abs(det)) gcd_y = gcd(abs(y_nom), abs(det)) reduced_x = (x_nom // gcd_x, det // gcd_x) reduced_y = (y_nom // gcd_y, det // gcd_y) intersection_points.add((reduced_x, reduced_y)) return len(intersection_points)"},{"question":"Problem Statement: Decode the Message. Input The first line of the input contains an integer N - the length of the encrypted message (1 ≤ N ≤ 1000). The second line contains the encrypted message, which is a string of exactly N uppercase alphabetic characters. Output Output a single string - the decoded message, which is generated by shifting each character in the encrypted message forward by 2 positions in the alphabet. Characters should wrap around, so \'Y\' becomes \'A\' and \'Z\' becomes \'B\'. SAMPLE INPUT 5 ABCDE SAMPLE OUTPUT CDEFG SAMPLE INPUT 6 XYZABC SAMPLE OUTPUT ZABCDE","solution":"def decode_message(N, encrypted_message): Decodes the encrypted_message by shifting each character forward by 2 positions in the alphabet. Parameters: N : int : Length of the encrypted message encrypted_message : str : The encrypted message containing exactly N uppercase alphabetic characters Returns: str : The decoded message decoded_message = \'\' for char in encrypted_message: decoded_char = chr(((ord(char) - ord(\'A\') + 2) % 26) + ord(\'A\')) decoded_message += decoded_char return decoded_message"},{"question":"Vika loves reading books, and she has a huge collection of books at her home. To keep track of the books she has read, Vika maintains a list where each book is represented by a unique integer identifier. Vika wants to know how many distinct books she has read from a list of books over a certain period. Given a list of n book identifiers, your task is to identify the number of distinct book identifiers in the list. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of book identifiers. The second line contains n space-separated integers representing the book identifiers. The identifiers are non-negative integers and can be as large as 10^9. Output Output a single integer — the number of distinct book identifiers Vika has read. Examples Input 6 1 2 1 3 2 4 Output 4 Input 4 5 5 5 5 Output 1 Note In the first example, the distinct book identifiers are {1, 2, 3, 4}, so the output is 4. In the second example, the only distinct book identifier is {5}, so the output is 1.","solution":"def count_distinct_books(n, book_identifiers): Returns the number of distinct book identifiers in the list. Parameters: n (int): Number of book identifiers. book_identifiers (list of int): List of book identifiers. Returns: int: Number of distinct book identifiers. return len(set(book_identifiers))"},{"question":"A robotic lawn mower needs to navigate a rectangular lawn represented as a grid. The mower starts at the top-left corner of the lawn (0, 0) and needs to reach the bottom-right corner (n-1, m-1). The mower can move only right or down at each step. The lawn grid may contain obstacles, represented by a value of 1. A value of 0 represents an open space. The mower cannot pass through obstacles. Determine the total number of unique paths the mower can take to reach the bottom-right corner of the lawn. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100). - The next n lines contain m integers each (0 or 1), representing the lawn grid. Output: - Output one integer, representing the number of unique paths from the top-left to the bottom-right corner of the lawn. Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two paths the mower can take: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Input: 2 2 0 1 0 0 Output: 1 Explanation: There is one path the mower can take: 1. Down -> Right Note: If either the start or the end position is blocked (1), then there are no valid paths, and the output should be 0.","solution":"def unique_paths_with_obstacles(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given an array of integers representing the coordinates of points on a straight line in 1-dimensional space. The points are ordered in ascending order and can represent any valid integer value (positive, negative, or zero). Your task is to find out the minimum number of moves required to make all the points the same. In one move, you can move any point to any other point on the line. Write a function that takes in a list of integers and returns the minimum number of moves required to make all the points identical. Input - A single list of integers, where each integer represents the coordinates of a point on the line. Output - A single integer representing the minimum number of moves required to make all points the same. Constraints - The length of the list will be between 1 and 100,000. - Each integer in the list will be between -1,000,000 and 1,000,000. Example Input: ``` [1, 2, 3] ``` Output: ``` 2 ``` Explanation: To make all points the same, you can move the point at coordinate 1 to coordinate 2 (1 move), and the point at coordinate 3 to coordinate 2 (1 move). Thus, a total of 2 moves are required. Input: ``` [-1, 2, 5] ``` Output: ``` 6 ``` Explanation: To make all points the same, you can either move points to coordinate 2 or to coordinate 5: 1. Move point at -1 to 2 (3 moves) and move point at 5 to 2 (3 moves), total 6 moves. 2. Move point at -1 to 5 (6 moves) and move point at 2 to 5 (3 moves), total 9 moves, which is more. Thus, the total minimum number of moves required is 6. Note: - The problem may have multiple correct outputs. Any answer with the correct minimum number of moves will be accepted.","solution":"def min_moves_to_make_points_same(coords): Returns the minimum number of moves required to make all points the same. if not coords: return 0 # Median minimizes the sum of absolute deviations. coords.sort() median = coords[len(coords) // 2] # Calculate the total number of moves to make all points equal to the median. moves = sum(abs(coord - median) for coord in coords) return moves"},{"question":"A company has a network of n employees. Each employee has a unique identifier from 1 to n. The company\'s organizational hierarchy is a tree, where each employee (except the CEO) has exactly one supervisor. The CEO is the root of the tree and does not have any supervisor. Every employee has certain work hours they need to complete each week, and each supervisor is responsible for ensuring their direct subordinates complete their work hours. The workload of a supervisor can be defined as the sum of their required work hours plus the work hours of all their direct and indirect subordinates. Given the company\'s organizational structure and the required work hours for each employee, determine the workload for every employee in the company. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of employees. The second line contains n integers, where the i-th integer (1 ≤ work_hours[i] ≤ 100) represents the required work hours for the i-th employee. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that employee u is the direct supervisor of employee v. Output Output n integers. The i-th integer should be the workload of the i-th employee. Examples Input 5 40 20 30 10 50 1 2 1 3 3 4 3 5 Output 150 20 90 10 50 Input 3 25 15 10 1 2 1 3 Output 50 15 10 Note In the first example, the company\'s structure can be represented as: ``` 1 / 2 3 / 4 5 ``` - The workload for employee 1 is 40 (own hours) + 20 (employee 2) + 30 (employee 3) + 10 (employee 4) + 50 (employee 5) = 150. - The workload for employee 2 is 20 (own hours). - The workload for employee 3 is 30 (own hours) + 10 (employee 4) + 50 (employee 5) = 90. - The workload for employees 4 and 5 are 10 and 50 respectively (own hours only), as they do not supervise anyone. In the second example, the company\'s structure can be represented as: ``` 1 / 2 3 ``` - The workload for employee 1 is 25 (own hours) + 15 (employee 2) + 10 (employee 3) = 50. - The workload for employee 2 is 15 (own hours). - The workload for employee 3 is 10 (own hours).","solution":"def calculate_workloads(n, work_hours, hierarchy): from collections import defaultdict, deque # Create an adjacency list for the company hierarchy tree = defaultdict(list) for u, v in hierarchy: tree[u].append(v) # Function to calculate workloads using DFS def dfs(employee_id): total_hours = work_hours[employee_id - 1] for subordinate in tree[employee_id]: total_hours += dfs(subordinate) workloads[employee_id] = total_hours return total_hours # Dictionary to store workloads workloads = {} # Find the root (CEO) which is the one who is never a subordinate subordinates = set(v for _, v in hierarchy) ceo = next(i for i in range(1, n+1) if i not in subordinates) # Start DFS from the CEO dfs(ceo) return [workloads[i] for i in range(1, n+1)] # Example of function call # n = 5 # work_hours = [40, 20, 30, 10, 50] # hierarchy = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(calculate_workloads(n, work_hours, hierarchy))"},{"question":"A company uses a security system with password verification. The password must be a string that contains at least one lowercase letter, at least one uppercase letter, and at least one digit. Additionally, the length of the password must be at least 6 characters and at most 12 characters. Your task is to write a program that receives a password as input and checks if it meets all the required criteria. If the password is valid, print `Valid Password`. Otherwise, print `Invalid Password`. Constraints * The password string will contain only alphanumeric characters. Input Input is given from Standard Input in the following format: * A single line containing the password string. Output If the password meets the requirements, print `Valid Password`. Otherwise, print `Invalid Password`. Examples Input Password123 Output Valid Password Input pass Output Invalid Password","solution":"def validate_password(password): Validates if the given password meets the criteria: - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Length is between 6 and 12 characters inclusive if not (6 <= len(password) <= 12): return \\"Invalid Password\\" has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) if has_lower and has_upper and has_digit: return \\"Valid Password\\" return \\"Invalid Password\\""},{"question":"You are given a sequence of integers and you want to form a subsequence such that its elements are in strictly increasing order and the sum of its elements is maximized. A subsequence is derived by deleting zero or more elements from the sequence without changing the order of the remaining elements. Write a program to find the maximum sum of the strictly increasing subsequence that can be obtained from the given sequence. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000), the elements of the sequence. Output: - Print the maximum sum of the strictly increasing subsequence. Examples: Input: 6 1 101 2 3 100 4 Output: 106 Input: 8 1 2 3 4 5 6 7 8 Output: 36 Note: In the first test case, one of the optimal subsequences is [1, 2, 3, 100], which has a sum of 106. In the second test case, the entire sequence is already strictly increasing, so the sum is simply the sum of all its elements.","solution":"def max_sum_increasing_subsequence(n, sequence): Returns the maximum sum of the strictly increasing subsequence that can be obtained from the given sequence. # Array to store the maximum sum of increasing subsequence ending at each index max_sum_at = sequence[:] for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: max_sum_at[i] = max(max_sum_at[i], max_sum_at[j] + sequence[i]) # The required maximum sum will be the maximum value in max_sum_at array return max(max_sum_at) # Example usage: n = 6 sequence = [1, 101, 2, 3, 100, 4] print(max_sum_increasing_subsequence(n, sequence)) # Output: 106"},{"question":"In a city named Gridville, there is a grid of size n x m. Each cell in the grid either contains a 0 or a 1. A person can only walk on cells containing 1s. They start at the top-left corner of the grid and their goal is to reach the bottom-right corner. The person can only move to an adjacent cell (left, right, up, or down) and only if it contains a 1. You need to determine whether there exists a path for the person to reach the destination. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the grid\'s dimensions. The next n lines contain m integers each (either 0 or 1), representing the grid. Output Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. Example Input 5 5 1 0 1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 1 1 Output YES Note In the given example, one possible path is: (1,1) → (2,1) → (2,2) → (3,2) → (3,3) → (3,4) → (3,5) → (4,5) → (5,5).","solution":"def exists_path(n, m, grid): Determines if there\'s a path from the top-left corner to the bottom-right corner of the grid that only passes through cells containing 1s. Returns \\"YES\\" if such a path exists, otherwise \\"NO\\". if grid[0][0] == 0 or grid[n-1][m-1] == 0: return \\"NO\\" visited = [[False] * m for _ in range(n)] def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m: return False if visited[x][y] or grid[x][y] == 0: return False visited[x][y] = True if x == n-1 and y == m-1: return True return (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)) return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Inventory Management System You are tasked with building an inventory management system for a warehouse. The warehouse tracks items by their item IDs, and each item has a certain quantity. The system needs to handle various operations such as adding items, removing items, and querying the quantity of an item. The operations you need to support are: 1. `add item_id quantity` - Adds a specified quantity to the item with the given item_id. If the item does not exist, it creates a new entry with the given quantity. 2. `remove item_id quantity` - Removes a specified quantity from the item with the given item_id. If the operation would result in a negative quantity, the quantity is set to 0 instead. 3. `query item_id` - Returns the current quantity of the item with the given item_id. If the item does not exist, return `0`. The input will be multiple lines of operations, each beginning with one of the keywords `add`, `remove`, or `query`. Input The input consists of multiple lines of operations. Each line represents one of the operations as per the described functionality. The input ends with a line containing the word `end`. Output Output the results of all `query` operations, each on a new line. Sample Input: ``` add 101 5 add 102 10 query 101 remove 101 3 query 101 remove 102 15 query 102 query 103 end ``` Sample Output: ``` 5 2 0 0 ``` Explanation: 1. `add 101 5` - Adds 5 to item 101. Quantity of item 101 is now 5. 2. `add 102 10` - Adds 10 to item 102. Quantity of item 102 is now 10. 3. `query 101` - Queries the quantity of item 101. Output is 5. 4. `remove 101 3` - Removes 3 from item 101. Quantity of item 101 is now 2. 5. `query 101` - Queries the quantity of item 101. Output is 2. 6. `remove 102 15` - Attempts to remove 15 from item 102, but the quantity cannot go below 0. Quantity of item 102 is now 0. 7. `query 102` - Queries the quantity of item 102. Output is 0. 8. `query 103` - Item 103 does not exist, so the output is 0.","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def add(self, item_id, quantity): if item_id in self.inventory: self.inventory[item_id] += quantity else: self.inventory[item_id] = quantity def remove(self, item_id, quantity): if item_id in self.inventory: self.inventory[item_id] = max(self.inventory[item_id] - quantity, 0) def query(self, item_id): return self.inventory.get(item_id, 0) def process_inventory_operations(operations): ims = InventoryManagementSystem() results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"add\\": item_id = int(parts[1]) quantity = int(parts[2]) ims.add(item_id, quantity) elif cmd == \\"remove\\": item_id = int(parts[1]) quantity = int(parts[2]) ims.remove(item_id, quantity) elif cmd == \\"query\\": item_id = int(parts[1]) results.append(str(ims.query(item_id))) elif cmd == \\"end\\": break return results"},{"question":"You are given a grid of size `n` x `m` filled with integers where each cell of the grid can be either occupied (denoted by 1) or free (denoted by 0). Your task is to determine the size of the largest connected region comprising only occupied cells. Two cells are considered connected if they share a border horizontally or vertically. Input - The first line of input contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 1000) representing the number of rows and columns in the grid, respectively. - This is followed by `n` lines, each containing `m` integers (either 0 or 1) which represent the grid. Output - Print a single integer representing the size of the largest connected region of occupied cells. Examples Input 4 5 1 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 Output 5 Input 3 3 1 1 0 0 1 1 1 0 0 Output 4 Input 5 6 0 0 1 0 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 0 0 Output 4 Note In the first example, the largest connected region of occupied cells (denoted by 1s) has a size of 5 and consists of cells at (1,1), (1,2), (2,2), (2,3), and (3,3). In the second example, the largest connected region of occupied cells is 4 and consists of cells at (1,1), (1,2), (2,2), and (2,3). In the third example, there are several connected regions. The largest one has a size of 4 and consists of cells at (4,2), (4,3), (4,4), and (3,4).","solution":"def largest_connected_region(n, m, grid): Returns the size of the largest connected region of 1s in the grid. def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark this cell as visited size = 1 # Initialize region size for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # directions: up, down, left, right size += dfs(x + dx, y + dy) return size max_region = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_region = max(max_region, dfs(i, j)) return max_region"},{"question":"A software company wants to analyze the performance and reliability of their network of servers. They have n servers, labeled from 1 to n, and they log the connections between these servers. Each connection is bi-directional and is represented by a tuple (u, v) indicating a connection between server u and server v. They want to determine the smallest number of connections that need to be added to make every server directly or indirectly connected to every other server (making the network fully connected). Input The first line contains two integers, n (2 ≤ n ≤ 1000) and m (0 ≤ m ≤ n * (n - 1) / 2) – the number of servers and the number of connections already present, respectively. Each of the next m lines contains two space-separated integers, u i and v i (1 ≤ u i, v i ≤ n, u i ≠ v i), representing a connection between server u i and server v i. It’s guaranteed that there are no duplicate connections. Output A single integer, the minimum number of connections that must be added to make the network fully connected. Examples Input 4 2 1 2 3 4 Output 2 Input 5 4 1 2 2 3 3 4 4 5 Output 0 Note In the first example, the servers form two disconnected components {1, 2} and {3, 4}. We need to add at least 2 connections to fully connect the network: one could connect server 1 to server 3, and server 2 to server 4, or any other equivalent pairs. In the second example, the network is already fully connected, so no additional connections are needed.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] > rank[yroot]: parent[yroot] = xroot elif rank[xroot] < rank[yroot]: parent[xroot] = yroot else: parent[yroot] = xroot rank[xroot] += 1 def min_connections_to_fully_connect(n, connections): parent = [i for i in range(n)] rank = [0] * n for u, v in connections: union(parent, rank, u-1, v-1) unique_components = len(set(find(parent, i) for i in range(n))) return unique_components - 1"},{"question":"You are given an array representing the health points of n monsters. Your task is to defeat the monsters using the least number of hits. Each hit reduces a monster\'s health by a fixed amount k. Any monster whose health points go to zero or below is considered defeated. You need to calculate the minimum number of hits required to defeat all the monsters. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next 2 * t lines represents a test case: - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100). - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the initial health points of the monsters. Output For each test case, output a single line with the minimum number of hits required to defeat all the monsters. Example Input 3 3 10 20 30 40 4 25 25 50 75 100 2 15 15 25 Output 9 10 3 Note In the first example, each monster needs the following hits: - First monster: 20/10 = 2 hits - Second monster: 30/10 = 3 hits - Third monster: 40/10 = 4 hits Total hits required = 2 + 3 + 4 = 9 In the second example, the sum of hits for each monster (1, 2, 3, and 4) rounds to a total of 10. In the third example, each monster needs 1 and 2 hits respectively, summing to 3 hits.","solution":"def minimum_hits(t, test_cases): results = [] for i in range(t): n, k = test_cases[i * 2] monsters = test_cases[i * 2 + 1] hits = sum(-(-hp // k) for hp in monsters) # Use ceiling division to count hits results.append(hits) return results"},{"question":"A unique binary string is a string consisting of digits 0 and 1 where no two adjacent digits are the same. For example, \\"10101\\" is a unique binary string, but \\"11010\\" is not because the first and second digits are both 1. Given an integer n, generate a unique binary string of length n. If there are multiple such strings, you can output any one of them. If it\'s not possible to generate such a string, output \\"IMPOSSIBLE\\". Input The input contains a single integer n (1 ≤ n ≤ 1000) — the length of the unique binary string. Output Output a unique binary string of length n, or \\"IMPOSSIBLE\\" if it is not possible to generate such a string. Examples Input 5 Output 10101 Input 2 Output 10 Input 1 Output IMPOSSIBLE","solution":"def generate_unique_binary_string(n): Generate a unique binary string of length n or return \\"IMPOSSIBLE\\" if it\'s not possible. if n < 1: return \\"IMPOSSIBLE\\" if n == 1: return \\"0\\" return \'\'.join(\'01\'[(i % 2)] for i in range(n))"},{"question":"A popular game involves balancing a weighted seesaw on a pivot. The seesaw consists of positions from -X to X (inclusive) where 0 represents the pivot point, negative numbers represent positions to the left of the pivot, and positive numbers represent positions to the right of the pivot. Each position can either be empty or hold a weight. The total torque on the seesaw is the sum of the products of each weight and its position. To balance the seesaw, the total torque must be zero. Given a list of weights placed at specific positions on the seesaw, determine the minimum number of moves required to balance the seesaw, where a move is defined as placing a weight on an empty position or moving a weight from one position to another. If it is not possible to balance the seesaw, return -1. For example, if there is a weight of 3 at position -2 and a weight of 1 at position 1 on a seesaw spanning from -2 to 2, the total torque is ( (3 * -2) + (1 * 1) = -6 + 1 = -5 ). To balance the seesaw, you need to either add a weight of 5 at position 1 or move the weight of 1 to position 5. Input The input is a sequence of test cases. Each test case is formatted as follows: X n p1 w1 p2 w2 . . . pn wn The integers X and n are the extent of the seesaw (from -X to X) and the number of weights, respectively, each separated by a single space, where 1 ≤ X ≤ 100 and 0 ≤ n ≤ 200. Each of the following n lines represents a weight: the integers pi and wi (1 ≤ i ≤ n) are the position and the weight at the position, respectively, each separated by a single space. They satisfy -X ≤ pi ≤ X and 1 ≤ wi ≤ 100. The end of the input is indicated by a line containing two zeros separated by a single space. Output For each test case, output a line containing the minimum number of moves needed to balance the seesaw, or -1 if it is not possible to balance the seesaw. The output should not contain any other extra characters. Example Input 5 2 -1 3 2 2 4 3 -2 7 -1 4 0 0 Output 1 -1 Explanation: In the first test case: - Initial torque is (-1 * 3) + (2 * 2) = -3 + 4 = 1. Adding a weight of 1 at position -1 balances the seesaw. In the second test case: - Initial torque is (-2 * 7) + (-1 * 4) = -14 - 4 = -18. With the given constraints, it is not possible to achieve a torque of 0.","solution":"def balance_seesaw(X, n, weights): Function to determine the minimum number of moves required to balance the seesaw. If it is not possible to balance the seesaw, returns -1. Parameters: - X: int, extent of the seesaw positions from -X to X. - n: int, number of weights. - weights: list of tuples (pi, wi) where pi is the position and wi is the weight. Returns: - int, minimum number of moves to balance the seesaw or -1 if impossible. # Calculate initial torque initial_torque = sum(p * w for p, w in weights) if initial_torque == 0: return 0 # Already balanced # To balance the torque, the required compensation should be an integer if abs(initial_torque) > X * 100: return -1 # Compensation exceeds possible weight limit # Check if it is possible to balance the seesaw with at most one additional move if initial_torque % 2 == 0: # For even torque, look for half of the torque value in either direction compensation = initial_torque // 2 if -X <= compensation <= X: return 1 # One additional move to balance else: for p, w in weights: # Try moving this weight to another position to balance the seesaw move_to_balance = (initial_torque - 2 * (p * w)) // w if -X <= move_to_balance <= X and move_to_balance != p: return 1 return -1 # Not possible to balance with given constraints def main(inputs): Function to process the input and produce the output for balancing seesaw. Parameters: - inputs: list of strings representing the input lines. Returns: - list of strings representing the output for each test case. outputs = [] while inputs: line = inputs.pop(0).strip() if line == \\"0 0\\": break X, n = map(int, line.split()) weights = [] for _ in range(n): p, w = map(int, inputs.pop(0).strip().split()) weights.append((p, w)) result = balance_seesaw(X, n, weights) outputs.append(str(result)) return outputs"},{"question":"John is working on digitizing some old records from his library. He needs to sort a list of books based on their titles in a specific way. Each book title is a string containing words separated by spaces. The goal is to sort these titles lexicographically, but with two twists: The string should be processed as case-insensitive for sorting purposes, and numbers within the titles should be treated as if they are left-padded with zeros to equalize their lengths. For example, \\"book 10\\" should come after \\"book 2\\" but before \\"book 101\\". John has asked for your help to write a function that accepts a list of book titles and returns a new list with the titles sorted according to the rules mentioned. Write a function `custom_sort(titles)` that takes in a list of strings `titles` and returns a new list of strings with the sorted titles. # Function Signature `def custom_sort(titles: List[str]) -> List[str]:` # Input - A list of strings `titles` where each string contains words separated by spaces. (1 ≤ len(titles) ≤ 10^5) - Each string has a length between 1 and 1000 characters. - The words in the titles can contain alphabetic characters and digits. # Output - A list of strings sorted based on the rules described. # Example Input ```python titles = [\\"A Tale of 2 Cities\\", \\"A Tale of 10 Cities\\", \\"a tale of 20 cities\\"] ``` Output ```python [\\"A Tale of 2 Cities\\", \\"A Tale of 10 Cities\\", \\"a tale of 20 cities\\"] ``` # Note - Treat titles as case-insensitive for sorting. - Treat numbers uniformly by their zero-padded counterparts.","solution":"import re from typing import List def custom_sort(titles: List[str]) -> List[str]: def sort_key(title: str): # Function to convert title into a comparable tuple for sorting # Split title by words and replace numerical parts with zero-padded numbers parts = re.split(\'(d+)\', title.lower()) return [int(part) if part.isdigit() else part for part in parts] return sorted(titles, key=sort_key)"},{"question":"You are given a list of integers that represents the arrival time of buses at a station in sorted order and a particular bus you need to catch or miss depending on the given arrival time of the person. The task is to determine the waiting time in minutes for the specified bus if they arrived in time to catch it or the elapsed time since the bus left if they missed it. Input The input consists of three lines: 1. The first line contains an integer n (1 ≤ n ≤ 100) — the number of buses. 2. The second line contains n integers in non-decreasing order (0 ≤ bus_i < 1440) — the arrival times of buses in minutes from 00:00. 3. The third line contains an integer t (0 ≤ t < 1440) — the arrival time of the person in minutes from 00:00. Output Output the waiting time in minutes if the person catches a bus, or the elapsed time in minutes if the bus has already left when the person arrives. If the person arrives exactly when a bus arrives, they catch the bus without any wait. Examples Input 5 15 30 45 60 75 20 Output 10 Input 3 720 960 1140 700 Output 20 Note In the first case, the person arrives at minute 20 and the next bus is at minute 30, so the waiting time is 10 minutes. In the second case, the person arrives at minute 700 and the previous bus left at minute 680 (720-20), so the elapsed time is 20 minutes.","solution":"def bus_wait_time(n, bus_times, t): Determines the waiting time to catch a bus or elapsed time since a bus left. Parameters: n (int): The number of buses bus_times (List[int]): The arrival times of buses in minutes t (int): The arrival time of the person in minutes Returns: int: The waiting time if the person catches a bus, or the elapsed time if they miss it. for bus_time in bus_times: if bus_time >= t: return bus_time - t return t - bus_times[-1]"},{"question":"Echo and Narcissus are both masters of algorithms and they love a good challenge. Today, they are playing a game on a 2D plane with a set of n non-overlapping rectangles. Each rectangle is defined by its bottom-left corner at (xi, yi) and its top-right corner at (xi + wi, yi + hi), where wi and hi are the width and height of the rectangle, respectively. Echo and Narcissus take turns removing one rectangle from the set. Echo always starts first. If a player cannot make a move, they lose the game. Both players play optimally, wishing to prolong the game as much as possible since they both love the game so much. Your task is to determine who will win the game if both play optimally. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of rectangles. Each of the next n lines contains four integers xi, yi, wi, hi (0 ≤ xi, yi ≤ 109, 1 ≤ wi, hi ≤ 109), describing the rectangles. Output Output the name of the winner: \\"Echo\\" or \\"Narcissus\\". Examples Input 3 1 1 2 2 3 3 4 4 5 5 6 6 Output Echo Input 1 0 0 1 1 Output Echo Note In the first sample test, Echo starts and removes one of the rectangles. Regardless of which rectangle Echo removes, there will still be two rectangles left for Narcissus to choose from, ensuring that the next move is always possible for him. This pattern continues until the last rectangle is removed, guaranteeing that Echo is always the one making the final move and winning the game.","solution":"def determine_winner(n, rectangles): Function to determine the winner of the game between Echo and Narcissus. :param n: Number of rectangles :param rectangles: List of tuples containing the coordinates and dimensions of rectangles :return: \\"Echo\\" if Echo wins, \\"Narcissus\\" if Narcissus wins # If the number of rectangles is odd, Echo will win since he plays first. if n % 2 == 1: return \\"Echo\\" else: return \\"Narcissus\\""},{"question":"Natalie has a peculiar fascination with trees. A tree is an undirected graph in which any two vertices are connected by exactly one path. This means there are no cycles in the graph, and there are exactly (n-1) edges for n nodes. Natalie\'s favorite trees are rooted binary trees, where each node can have 0, 1, or 2 children. Natalie wants to construct a complete binary tree of height h. A complete binary tree is a binary tree in which all levels except possibly the last are fully filled, and all nodes are as left as possible. Your task is to determine and construct this binary tree and output the node indices level by level starting from the root, ensuring nodes in each level are printed from left to right. Input The first line contains an integer h (1 ≤ h ≤ 10) – the height of the complete binary tree that Natalie wants to construct. Output For each level of the tree, print node indices from left to right. The root of the tree will have index 1, and the children of the node at index i will have indices 2*i and 2*i + 1 if they exist. Example Input 3 Output 1 2 3 4 5 6 7 Input 2 Output 1 2 3","solution":"def construct_complete_binary_tree(h): if h < 1 or h > 10: raise ValueError(\\"Height of the tree must be between 1 and 10 inclusive.\\") result = [] current_num = 1 for i in range(h): level_size = 2 ** i level = [] for j in range(level_size): level.append(current_num) current_num += 1 result.append(level) return result"},{"question":"You are given an array of integers where each element represents the height of a building in a skyline. Your task is to determine the number of buildings that will receive sunlight. A building receives sunlight if there is no taller building to its left blocking the sunlight. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) indicating the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), where hi is the height of the i-th building. Output Output the number of buildings that receive sunlight. Examples Input 6 3 7 8 3 6 1 Output 3 Input 4 4 4 4 4 Output 1 Note In the first example, the buildings with heights 3, 7, and 8 receive sunlight as there are no taller buildings to their left. The remaining buildings do not receive sunlight as they are blocked by taller buildings to their left. In the second example, the first building receives sunlight while all subsequent buildings do not, as they are all the same height and no taller than the first.","solution":"def count_buildings_with_sunlight(n, heights): Returns the number of buildings that receive sunlight. Parameters: n (int): Number of buildings heights (list of int): List of building heights Returns: int: Number of buildings that receive sunlight if n == 0: return 0 count = 1 # The first building always receives sunlight max_height = heights[0] # Initialize the first building\'s height as the max height for i in range(1, n): if heights[i] > max_height: count += 1 max_height = heights[i] return count"},{"question":"For a given grid of size N times N, you need to perform a sequence of operations to manipulate and query the grid effectively. The grid is initially filled with zeros. Each operation is one of the following: * set(r, c, v): Set the value at row r, column c to v. * query(a, b, x, y): Compute and return the sum of all values in the subgrid that spans from (a, b) to (x, y), inclusive. The grid is indexed from 1 to N for both rows and columns. Constraints * 1 leq N leq 1,000 * 1 leq q leq 200,000 * 1 leq r, c, a, b, x, y leq N * -1,000,000 leq v leq 1,000,000 * It is always true that (a, b) is the top-left corner and (x, y) is the bottom-right corner of the query subgrid. Input The input is given in the following format. N q query_1 query_2 ... query_q Each query query_i is given by 1 r c v or 2 a b x y where the first digits 1 and 2 represent set and query operations respectively. Output For each query operation (2 a b x y), print the result (sum of subgrid) in a new line. Example Input 4 5 1 1 1 5 1 2 2 -3 2 1 1 2 2 1 3 3 10 2 2 2 3 3 Output 2 7","solution":"def grid_operations(N, queries): # Initialize the N x N grid with zeros grid = [[0] * (N + 1) for _ in range(N + 1)] for query in queries: if query[0] == 1: # set(r, c, v) _, r, c, v = query grid[r][c] = v elif query[0] == 2: # query(a, b, x, y) _, a, b, x, y = query total_sum = 0 for i in range(a, x + 1): for j in range(b, y + 1): total_sum += grid[i][j] print(total_sum) # Example usage N = 4 queries = [ (1, 1, 1, 5), (1, 2, 2, -3), (2, 1, 1, 2, 2), (1, 3, 3, 10), (2, 2, 2, 3, 3) ] grid_operations(N, queries)"},{"question":"In a school, each student has a unique identification number and a record of scores for `k` subjects. The school wants to identify the top-performing students based on their total scores across all subjects. The top-performing students are those who have scores within the top 10 percent of the total scores obtained by all students. Write a program that: 1. Reads the number of students `n` and the number of subjects `k`. 2. Reads the scores of each student in each subject. 3. Calculates the total score for each student. 4. Determines the minimum total score required to be in the top 10 percent. 5. Identifies and lists the identification numbers of the top-performing students whose total scores are within the top 10 percent. The input consists of: - An integer `n` (1 ≤ n ≤ 10000), the number of students. - An integer `k` (1 ≤ k ≤ 100), the number of subjects. - `n` lines each containing an integer `ID` (1 ≤ ID ≤ 100000) followed by `k` integers representing the scores of that student in the `k` subjects. The output should be: - An integer `m`, the number of top-performing students. - `m` lines containing the identification numbers of the top-performing students in ascending order. Example Input 6 3 102 78 89 94 103 88 76 85 101 95 92 90 104 64 70 60 105 71 80 79 106 77 85 88 Output 1 101 Explanation: In this example, there are 6 students and 3 subjects. The total scores are: - Student 102: 78 + 89 + 94 = 261 - Student 103: 88 + 76 + 85 = 249 - Student 101: 95 + 92 + 90 = 277 - Student 104: 64 + 70 + 60 = 194 - Student 105: 71 + 80 + 79 = 230 - Student 106: 77 + 85 + 88 = 250 Top 10 percent of 6 students is 0.6, which rounds to 1 student. The minimum total score required to be in the top 10 percent is 277. Only student 101 meets this criterion.","solution":"def find_top_students(n, k, scores_data): Finds the top-performing students based on their total scores. The top-performing students are within the top 10% of the total scores. students = [] for i in range(n): data = scores_data[i] ID = data[0] scores = data[1:] total_score = sum(scores) students.append((ID, total_score)) # Sort students by their total scores in descending order students.sort(key=lambda x: x[1], reverse=True) # Find the top 10 percent index (rounded up) top_10_percent_index = max(1, int(n * 0.1)) # Get the minimum total score to be in the top 10 percent min_top_score = students[top_10_percent_index - 1][1] # Filter students who have scores within the top 10 percent top_students = [student[0] for student in students if student[1] >= min_top_score] # Sort top students by their ID in ascending order top_students.sort() return (len(top_students), top_students)"},{"question":"Given a list of integers and a target sum, write a function to determine if any two numbers in the list add up to the target sum. Function signature: `def has_pair_with_sum(nums: List[int], target: int) -> bool:` # Input - `nums`: A list of integers. - `target`: An integer representing the target sum. # Output - Return `True` if there are two distinct numbers in the list that add up to the target sum. Otherwise, return `False`. # Example Input ```python nums = [10, 15, 3, 7] target = 17 ``` Output ```python True ``` Explanation - In this example, `10` and `7` add up to `17`, so the function returns `True`. # Constraints - All integers in `nums` are unique. - The size of `nums` will be at most 10^4. - Each integer in `nums` will be in the range [-10^6, 10^6]. - The target integer will be within the same range. # Note - You may not use the same element twice. - Optimize the function to have a time complexity of O(n).","solution":"from typing import List def has_pair_with_sum(nums: List[int], target: int) -> bool: Determines if any two numbers in the list add up to the target sum. Parameters: nums (List[int]): A list of integers. target (int): An integer representing the target sum. Returns: bool: True if there are two distinct numbers in the list that add up to the target sum, False otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"You are given two strings, s and t. The string t is a randomly shuffled string with an extra character added to it. Your task is to find the extra character that was added to t. Constraints * 1 ≤ |s| ≤ 1000 * t is a permutation of s with one additional character Input The input is given from Standard Input in the following format: s t Output Print the extra character in t. Examples Input abcd abcde Output e Input x xk Output k Input hello lhleoZ Output Z","solution":"def find_the_difference(s, t): Returns the extra character in t that was not present in s. s_sum = sum(ord(char) for char in s) t_sum = sum(ord(char) for char in t) return chr(t_sum - s_sum)"},{"question":"Marie is a botanist who wants to maximize the number of different types of flowers she can plant in her garden. She has a limited number of pots and each flower type requires a different number of pots to be planted. Marie asks for your help to distribute her pots between different types of flowers to maximize the number of flower types planted. Input The first line contains two numbers n, p (1 ≤ n ≤ 100, 0 ≤ p ≤ 10 000), the number of flower types and the number of pots respectively. The second line contains n integers bi (1 ≤ bi ≤ 100), representing the number of pots required to plant the i-th type of flower. Output In the first line, output one integer m representing the maximum number of flower types Marie can plant. In the second line, output m space-separated integers: the indices of the flower types to be planted. You may output indices in any order. If there are multiple optimal solutions, output any. It is not necessary to use all pots for planting. Examples Input 4 10 4 3 1 2 Output 4 1 2 3 4 Input 5 6 4 3 1 1 2 Output 3 2 3 5 Input 1 3 4 Output 0 Note In the first test case, Marie can plant all 4 types of flowers. In the second test case, other possible solutions are: {1, 3, 5} or {2, 4, 5}. In the third test case, Marie doesn\'t have enough pots to plant the only presented flower type.","solution":"def maximize_flower_types(n, p, pot_requirements): This function returns the maximum number of flower types that can be planted given the number of pots available and the pots required by each type. # Combine the pot requirements with their indices indexed_pots = list(enumerate(pot_requirements, start=1)) # Sort based on the number of pots required indexed_pots.sort(key=lambda x: x[1]) # Initialize counters and result list current_pots = 0 result_indices = [] for idx, pots in indexed_pots: if current_pots + pots <= p: current_pots += pots result_indices.append(idx) else: break return len(result_indices), result_indices"},{"question":"You are given a list of integers representing the heights of a group of students standing in a line. Your task is to determine the minimum number of pairs of students that need to be swapped so that all students are arranged in non-decreasing order of their heights. Input: - The first line contains an integer `n` (1 ≤ n ≤ 200), the number of students. - The second line contains `n` integers, each representing the height of a student (1 ≤ height ≤ 10^6). Output: - Print a single integer, the minimum number of adjacent swaps required. Example Input 5 2 4 1 3 5 Output 3 Input 4 4 3 2 1 Output 6 Note: - In the first example, it takes at least 3 swaps to arrange all students in ascending order: swap (1,2), swap (2,3), and swap (1,2) again. - In the second example, it takes 6 swaps to arrange students in ascending order by repeatedly swapping adjacent students: (4,3), (3,2), (2,1), then rinse and repeat two more times.","solution":"def min_adjacent_swaps(n, heights): Computes the minimum number of adjacent swaps required to sort a list of student heights in non-decreasing order. Parameters: n (int): The number of students. heights (list): A list of integers representing the heights of the students. Returns: int: The minimum number of adjacent swaps needed to sort the list. # Initialize the number of swaps counter swaps = 0 # Create a copy of the list to avoid modifying the original one heights_copy = heights[:] # Bubble sort adapted to count the number of swaps for i in range(n): for j in range(0, n-i-1): if heights_copy[j] > heights_copy[j+1]: # Swap and count this swap heights_copy[j], heights_copy[j+1] = heights_copy[j+1], heights_copy[j] swaps += 1 return swaps"},{"question":"A group of n people needs to attend a professional seminar, and m seminar sessions are available over several days. Each person has preferences for which sessions they want to attend. Help organize the seminar by placing each seminar session in one of the available days (from 1 to k) such that each person can attend all their preferred sessions, and the sessions do not overlap on the same day. If a suitable arrangement is not possible, determine the minimum number of days required. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 50) — the number of people, the number of seminar sessions, and the maximum number of available days, respectively. The next n lines contain the preferences of each person. Each line starts with an integer pi (1 ≤ pi ≤ m) indicating the number of preferred sessions for the ith person, followed by pi integers representing the seminar session indices (1-based) that the ith person wants to attend. Output If it is possible to arrange all the sessions in no more than k days, print \\"YES\\" followed by the assignment of the days: - The first line should contain \\"YES\\". - The second line should contain m integers, where the ith integer is the day (between 1 and k) assigned to the ith seminar session. If it is not possible, print \\"NO\\" followed by the minimum number of days required: - The first line should contain \\"NO\\". - The second line should contain a single integer indicating the minimum number of days required to organize all the seminar sessions. Examples Input 3 4 2 2 1 2 2 3 4 2 2 3 Output YES 1 1 2 2 Input 3 4 1 2 1 2 2 3 4 2 2 3 Output NO 2 Explanation In the first example, one possible arrangement is to assign sessions 1 and 2 to day 1, and sessions 3 and 4 to day 2. This way, every person can attend all their preferred sessions without any overlap. In the second example, it can be seen that it is impossible to fit all sessions into just one day while satisfying all the preferences. The minimum number of days required in this case is 2.","solution":"from collections import defaultdict from itertools import combinations def seminar_organization(n, m, k, preferences): Organizes seminar sessions into k days based on people\'s preferences. Parameters: - n (int): Number of people - m (int): Number of seminar sessions - k (int): Maximum number of available days - preferences (list of list of int): People\'s session preferences Returns: - (str, list): \\"YES\\" and session-day assignment if possible, otherwise \\"NO\\" and minimum days required def can_assign_sessions(days): # Graph adjacency matrix session_conflict = [[False]*m for _ in range(m)] for pref in preferences: for i in range(len(pref)): for j in range(i+1, len(pref)): session_conflict[pref[i]-1][pref[j]-1] = True session_conflict[pref[j]-1][pref[i]-1] = True for assignment in generate_assignments(days, m): if valid_assignment(assignment, session_conflict): return True, assignment return False, [] def generate_assignments(days, m): def backtrack(curr_session, curr_assignment): if curr_session == m: yield curr_assignment[:] else: for day in range(1, days+1): curr_assignment[curr_session] = day yield from backtrack(curr_session + 1, curr_assignment) return backtrack(0, [0]*m) def valid_assignment(assignment, session_conflict): for i in range(m): for j in range(i + 1, m): if assignment[i] == assignment[j] and session_conflict[i][j]: return False return True # Check if it\'s possible within k days possible, assignment = can_assign_sessions(k) if possible: return \\"YES\\", assignment # Finding minimum days required for days in range(k+1, m+1): possible, assignment = can_assign_sessions(days) if possible: return \\"NO\\", days return \\"NO\\", m # Fallback, should never reach here under the given constraints # Read input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) preferences = [] index = 3 for _ in range(n): pi = int(data[index]) prefs = list(map(int, data[index+1:index+1+pi])) preferences.append(prefs) index += pi + 1 return n, m, k, preferences"},{"question":"Jenna owns a bakery and she wants to create the maximum number of mixed fruit baskets with a given set of fruits. Each basket must contain exactly three different types of fruits, and no two baskets should have the same combination of fruits. Given a list of n fruits, each identified by a unique integer, determine the maximum number of unique fruit baskets Jenna can create. A basket is considered unique if and only if the combination of fruits in it is unique. Input The input consists of two lines: The first line contains an integer n (1 ≤ n ≤ 105), the number of fruits. The second line contains n space-separated integers, where the i-th integer denotes the type of the i-th fruit (1 ≤ type ≤ 105). Output Print a single integer — the maximum number of unique fruit baskets Jenna can create. Examples Input 5 1 2 3 4 5 Output 10 Input 4 1 1 2 2 Output 0 Note In the first example, Jenna can create 10 unique fruit baskets, which are the combinations: {1, 2, 3}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3, 4}, {2, 3, 5}, {2, 4, 5}, and {3, 4, 5}. In the second example, it\'s not possible to create any unique basket as there are not enough different types of fruits.","solution":"from itertools import combinations def max_unique_fruit_baskets(n, fruits): unique_fruits = set(fruits) # Find unique types of fruits k = len(unique_fruits) # Number of unique fruits we have if k < 3: return 0 # Calculate the number of unique combinations of 3 fruits return len(list(combinations(unique_fruits, 3))) # Example usage: # n = 5 # fruits = [1, 2, 3, 4, 5] # print(max_unique_fruit_baskets(n, fruits)) # Output: 10"},{"question":"Serena is trying to fill a 2D grid with integers. The grid has H rows and W columns. Each cell in the grid can be filled with an integer between 1 and K, inclusive. Serena wants to fill the grid in such a way that: 1. Each row contains exactly one cell with the integer X. 2. Each column contains exactly one cell with the integer Y. Determine the number of valid ways to fill such a grid. Note that X and Y might be the same, which means both conditions must be satisfied simultaneously for that integer across the grid. Constraints: * 1 ≤ H, W ≤ 1000 * 1 ≤ K ≤ min(H, W) * 1 ≤ X, Y ≤ K Input: The input is given from Standard Input in the following format: ``` H W K X Y ``` Output: Print a single integer representing the number of valid ways to fill the grid. Examples: Input: ``` 3 3 3 1 2 ``` Output: ``` 0 ``` Input: ``` 3 3 3 2 2 ``` Output: ``` 18 ```","solution":"def count_valid_ways(H, W, K, X, Y): if X != Y: # If X and Y are different, there\'s no valid way since the cell with X and Y can\'t be positioned simultaneously. return 0 ways = 0 # Pick the row and column for number X = Y for r in range(H): for c in range(W): ways += 1 return ways # Example usage: H, W, K, X, Y = 3, 3, 3, 2, 2 print(count_valid_ways(H, W, K, X, Y)) # Output should be 18"},{"question":"A company warehouse has a delivery system that ensures packages are dispatched in a specific order. Each package has a priority level indicated by a number, where higher numbers denote higher priority. Packages with the same priority are dispatched based on their arrival order. The warehouse employees sometimes need to verify if the order of dispatched packages is correct. You are given an array of integers representing the priorities of dispatched packages in the order they were dispatched. Write a function to determine if the packages could have been dispatched correctly according to their priorities and arrival order. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of packages. The second line contains n integers representing the priorities of the dispatched packages. Output Print \\"YES\\" if the given order could represent the correct order of dispatched packages according to their priorities and arrival order; otherwise, print \\"NO\\". Example Input 5 4 5 3 3 2 Output YES Input 4 5 6 6 4 Output NO Note In the first example, the packages with priorities 4, 5, 3, 3, 2 could have been dispatched in that order (higher priority ones first and among equal priorities maintaining the arrival order). In the second example, the presence of 4 after the 6s violates the priority rule, hence the output is \\"NO\\".","solution":"def is_dispatch_correct(n, priorities): Returns \\"YES\\" if the dispatched order of packages could be correct according to their priorities. Otherwise, returns \\"NO\\". for i in range(n - 1): if priorities[i] < priorities[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"James and Lily are constructing a mosaic in their art class out of colored tiles. They set up the tiles in a rectangular grid, where the height is h tiles and the width is w tiles. Unfortunately, due to a miscalculation, they don\'t have enough tiles to cover the entire grid, but they have some special larger tiles in the shape of L x L squares that can cover exactly L x L ordinary tiles. Write a program to calculate how many such special tiles they need to cover the grid completely, assuming that they use the minimum number of these special tiles. Input The input is given in the following format. h w L A line of data is given that contains three integer values: h (1 ≤ h ≤ 1000) representing the height of the grid, w (1 ≤ w ≤ 1000) representing the width of the grid, and L (1 ≤ L ≤ 1000) representing the side length of the square tiles. Output Output the minimum number of special tiles required to cover the grid completely in a single line. Examples Input 6 5 3 Output 4 Input 10 10 4 Output 9 Input 7 7 2 Output 16","solution":"import math def minimum_special_tiles(h, w, L): Calculates the minimum number of special LxL tiles needed to cover a grid of size h x w. Parameters: h (int): height of the grid w (int): width of the grid L (int): side length of the square tiles Returns: int: minimum number of special tiles needed tiles_needed_height = math.ceil(h / L) tiles_needed_width = math.ceil(w / L) return tiles_needed_height * tiles_needed_width"},{"question":"You are given a binary string s consisting of digits \'0\' and \'1\'. Your task is to remove the minimum number of characters from the string to make it alternating. A string is called alternating if no two adjacent characters are the same. In other words, the string should not contain any two consecutive \'0\'s or \'1\'s. Examples of alternating strings: - \\"0101\\" is alternating (1st character is \'0\', 2nd is \'1\', 3rd is \'0\', 4th is \'1\') - \\"1010\\" is alternating (1st character is \'1\', 2nd is \'0\', 3rd is \'1\', 4th is \'0\') - \\"0\\" is alternating (single character) Examples of non-alternating strings: - \\"00\\" is not alternating (two consecutive \'0\'s) - \\"1110\\" is not alternating (two consecutive \'1\'s) - \\"1001\\" is not alternating (two occurrences of \'1\' are together) Input The input consists of one string s (1 ≤ |s| ≤ 10^5) – the binary string. Output Print one integer – the minimum number of characters you need to remove to make the string alternating. Examples Input 01110 Output 2 Input 0001 Output 2 Input 101010 Output 0","solution":"def minimum_removals_to_alternate(s): Returns the minimum number of characters needed to be removed to make the string alternating. count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 return count"},{"question":"Vitaly has a company that manages transportation between different cities. There are n cities connected by an undirected road network with n-1 roads, ensuring that there is exactly one simple path between any pair of different cities. Each road has a certain width, and each city has its own width capacity for the roads leading to it. The transportation services include vehicles of different widths that must travel from one city to another. Vitaly needs to determine if a vehicle of given width can travel from the start city to the destination city by only using roads that can accommodate the vehicle and cities that can accommodate the vehicle as well. Write a program that will help Vitaly determine if the vehicle can complete the journey. Input The first line contains two integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of cities and the number of queries, respectively. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) indicating that there is a road between cities u and v with width w. The next line contains n integers, each representing the width capacity for the corresponding city. The next q lines contain three integers a, b, and w (1 ≤ a, b ≤ n, 1 ≤ w ≤ 10^6), where a is the start city, b is the destination city, and w is the width of the vehicle. Output For each query, print \\"YES\\" if the vehicle can travel from city a to city b under the constraints, otherwise print \\"NO\\". Examples Input 5 3 1 2 3 2 3 5 3 4 4 3 5 2 5 4 3 4 2 1 4 3 3 5 2 4 2 5 Output YES YES NO Input 4 2 1 2 5 2 3 7 3 4 4 4 6 6 3 1 3 5 2 4 6 Output YES NO","solution":"from collections import defaultdict, deque def can_travel(n, roads, city_widths, queries): Determines for each query if a vehicle can travel from the start city to the destination city under the constraints. Args: n: int : number of cities roads: List[Tuple[int, int, int]] : roads between cities with their widths city_widths: List[int] : list of widths capacities for each city queries: List[Tuple[int, int, int]] : queries with start, end cities and vehicle width Returns: List[str] : results for each query (\\"YES\\"/\\"NO\\") graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b, w in queries: if bfs(graph, city_widths, a, b, w): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def bfs(graph, city_widths, start, end, vehicle_width): Performs a BFS to check if there is a valid path for the vehicle. Args: graph: Dict : adjacency list of the graph city_widths: List[int] : list of widths capacities for each city start: int : starting city end: int : destination city vehicle_width: int : vehicle width Returns: bool : True if path exists, else False visited = [False] * (len(city_widths) + 1) queue = deque([(start, city_widths[start - 1])]) while queue: current_city, current_city_width = queue.popleft() if current_city == end: return True if visited[current_city]: continue visited[current_city] = True for neighbor, road_width in graph[current_city]: if not visited[neighbor] and road_width >= vehicle_width and city_widths[neighbor - 1] >= vehicle_width: queue.append((neighbor, city_widths[neighbor - 1])) return False"},{"question":"In a kingdom far away, there lived a ruler who loved playing with numbers. He created a special game called Lexical Addition for his courtiers. In Lexical Addition, two non-negative integers are given as strings, and their sum must be computed as if adding them digit by digit, but the result should also be represented as a string without any leading zeros. The challenge lies in the fact that the given numbers can be extremely large, possibly hundreds or thousands of digits long. Your task is to write a function `lexical_addition(a: str, b: str) -> str` that takes two non-negative integers in string format, adds them, and returns the result as a string. To make it more interesting, the ruler decided on a few rules: - The input strings will contain only digits (0-9) and will not have any leading zeros unless the number itself is zero. - The function should handle the addition without converting the entire string to an integer directly. - You are required to handle the addition digit by digit as if you were doing it manually. Input: - Two non-negative integers in string format. Output: - A single string representing the sum of the input numbers without any leading zeros. Examples: Input: ```python a = \\"123\\" b = \\"957\\" ``` Output: ```python \\"1080\\" ``` Input: ```python a = \\"12345678901234567890\\" b = \\"98765432109876543210\\" ``` Output: ```python \\"111111111011111111100\\" ``` Input: ```python a = \\"0\\" b = \\"0\\" ``` Output: ```python \\"0\\" ``` **Your task is to implement the function `lexical_addition` as described above. Ensure to handle edge cases such as very large numbers and numbers with different lengths efficiently.**","solution":"def lexical_addition(a: str, b: str) -> str: # Make sure a is the longer string if len(a) < len(b): a, b = b, a # Padding b with leading zeros to match the length of a b = b.zfill(len(a)) carry = 0 result = [] for i in range(len(a) - 1, -1, -1): digit_sum = int(a[i]) + int(b[i]) + carry carry = digit_sum // 10 result.append(str(digit_sum % 10)) if carry: result.append(str(carry)) return \'\'.join(result[::-1])"},{"question":"Problem You are asked to implement a new software system for managing the inventory of a colossal library. The library has a hierarchy of categories, subcategories, and books. Each category can have subcategories, and each subcategory can also have more subcategories or books. Every book has a unique ISBN, title, and a number of copies available. Each category and subcategory can be uniquely identified by a unique identifier. The library system needs to support the following operations: 1. **Add a Category**: Adds a new category or subcategory. If adding a subcategory, it must require a parent category identifier. 2. **Add a Book**: Adds a new book to a category or subcategory. Each book must have a unique ISBN. 3. **Update Copies**: Updates the number of copies available for a specific book identified by its ISBN. 4. **Get Book Information**: Retrieves information about a book, including its title and the number of copies available, given its ISBN. 5. **Get Category Information**: Retrieves all the books and subcategories information for a given category id, including the titles of the books and the unique identifiers of the subcategories. Your task is to implement the functions to handle these operations. Constraints: - Each category, subcategory, and book must be uniquely identifiable. - The number of categories/subcategories does not exceed 10,000. - The number of books does not exceed 100,000. - Assume all inputs are valid and there are no duplicate operations. The input starts with an integer `q` representing the number of operations to be performed. Each operation is given on a new line. Input: ``` q operation1 operation2 ... operationq ``` The following formats are used for operations: 1. `add_category id parent_id`: Adds a new category with unique identifier `id`. If `parent_id` is present, the new category is a subcategory under the category with identifier `parent_id`. 2. `add_book category_id isbn title copies`: Adds a new book to the category or subcategory with identifier `category_id`, with a unique ISBN `isbn`, a title `title`, and a number of copies `copies`. 3. `update_copies isbn copies`: Updates the number of copies for the book identified by `isbn`. 4. `get_book isbn`: Retrieves the title and number of copies available for the book identified by `isbn`. The output should be in the format: `Title: title, Copies: copies`. 5. `get_category id`: Retrieves the information for the category or subcategory with identifier `id`. The output should include the titles of the books and the unique identifiers of the subcategories under that category. The output format should be `Books: [title1, title2, ...], Subcategories: [id1, id2, ...]`. Output should be provided for `get_book` and `get_category` commands. Each output should be on a new line. Example Input: ``` 8 add_category 1 add_category 2 1 add_book 2 978-3-16-148410-0 \\"Discrete Mathematics\\" 3 add_book 1 978-0-13-110362-7 \\"The C Programming Language\\" 5 update_copies 978-3-16-148410-0 5 get_book 978-3-16-148410-0 get_category 1 get_category 2 ``` Output: ``` Title: Discrete Mathematics, Copies: 5 Books: [\\"The C Programming Language\\"], Subcategories: [2] Books: [\\"Discrete Mathematics\\"], Subcategories: [] ```","solution":"class LibrarySystem: def __init__(self): self.categories = {} self.books = {} def add_category(self, id, parent_id=None): if parent_id: if parent_id in self.categories: self.categories[id] = {\'parent_id\': parent_id, \'books\': [], \'subcategories\': []} self.categories[parent_id][\'subcategories\'].append(id) else: self.categories[id] = {\'parent_id\': None, \'books\': [], \'subcategories\': []} def add_book(self, category_id, isbn, title, copies): if category_id in self.categories: self.books[isbn] = {\'title\': title, \'copies\': copies, \'category_id\': category_id} self.categories[category_id][\'books\'].append(isbn) def update_copies(self, isbn, copies): if isbn in self.books: self.books[isbn][\'copies\'] = copies def get_book(self, isbn): if isbn in self.books: book = self.books[isbn] return f\'Title: {book[\\"title\\"]}, Copies: {book[\\"copies\\"]}\' return None def get_category(self, id): if id in self.categories: category = self.categories[id] books = [self.books[isbn][\'title\'] for isbn in category[\'books\']] subcategories = category[\'subcategories\'] return f\'Books: {books}, Subcategories: {subcategories}\' return None"},{"question":"A small town is organizing a marathon, and the organizers are determined to keep track of the water distribution for runners along the route. They have several water stations located at various distances from the start of the race. Each station has a certain capacity of water that it can distribute to the runners in bottles. They want to ensure that every station has enough capacity to serve all the runners passing by. The organizers need to ensure that the total capacity from all the stations is enough to serve at least a minimum number of bottles required by the runners, and ideally, they want to distribute the water as evenly as possible to avoid running out at any station. Write a program that calculates the final distribution of water bottles to be delivered to each station. If it’s not possible to meet the minimum requirement of the total number of water bottles required by the runners, the program should output \\"Insufficient Capacity\\". The input for each test case will be: * The number of water stations n * An array representing the capacity of each station capacities[n] * The minimum number of bottles required min_bottles Your task is to calculate the distribution of water bottles in such a way that the maximum number of bottles assigned to any station does not exceed the minimum required bottles by more than 1 bottle. If such distribution is not possible, print \\"Insufficient Capacity\\". The input will consist of multiple datasets. Each dataset will have the following format: * The first line contains two integers n and min_bottles. * The second line contains n integers representing the capacities of each station. The end of the input is indicated by a single line of zeros. For each test case, either print the distribution of bottles across the stations or \\"Insufficient Capacity\\" if it is not possible. The number of datasets does not exceed 50. Input n min_bottles capacities[1] capacities[2] ... capacities[n] Example Input 3 10 4 5 3 2 5 1 3 4 10 3 1 2 1 0 Output 4 3 3 Insufficient Capacity Insufficient Capacity","solution":"def distribute_water_bottles(n, capacities, min_bottles): total_capacity = sum(capacities) if total_capacity < min_bottles: return \\"Insufficient Capacity\\" bottles_per_station = min_bottles // n remaining_bottles = min_bottles % n distribution = [bottles_per_station] * n for i in range(remaining_bottles): distribution[i] += 1 for i in range(n): if distribution[i] > capacities[i]: return \\"Insufficient Capacity\\" return distribution def process_input(data): results = [] for case in data: if case == \\"0\\": break lines = case.split(\\"n\\") n, min_bottles = map(int, lines[0].split()) capacities = list(map(int, lines[1].split())) result = distribute_water_bottles(n, capacities, min_bottles) results.append(result) return results"},{"question":"You are given an array consisting of N integers, representing the height of cylinders lined up in a row. You have a ball of height H which needs to roll through this line of cylinders. The ball is initially placed on top of the first cylinder and can roll to the next cylinder if the height difference between the current cylinder and the next one is no more than the ball\'s height difference D. Once the ball rolls over the last cylinder, it successfully passes the row. Write a function `can_ball_pass(N, heights, H, D)` that returns \\"Yes\\" if the ball can pass the whole line of cylinders, otherwise \\"No\\". Function signature: ```python def can_ball_pass(N: int, heights: List[int], H: int, D: int) -> str: ``` # Input - An integer N, representing the number of cylinders. - An array of integers `heights` of length N, where each element represents the height of a cylinder. - An integer H, representing the initial height of the ball. - An integer D, representing the maximum height difference the ball can handle between two consecutive cylinders. # Output - A string \\"Yes\\" if the ball can pass through the entire row of cylinders, otherwise \\"No\\". # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ heights[i] ≤ 10^5 - 1 ≤ H ≤ 10^5 - 0 ≤ D ≤ 10^5 # Example ```python # Example 1: N = 5 heights = [2, 3, 1, 5, 4] H = 3 D = 1 # The ball starts at height 3. It can roll from heights[0] to heights[1] (difference 1 <= D). # However, it cannot roll from heights[1] to heights[2] (difference 2 > D). # So the output should be \\"No\\". print(can_ball_pass(N, heights, H, D)) # Output: \\"No\\" # Example 2: N = 4 heights = [1, 2, 3, 4] H = 2 D = 1 # The ball starts at height 2. It can roll from heights[0] to heights[1], heights[1] to heights[2], and heights[2] to heights[3] (all differences 1 <= D). # So the output should be \\"Yes\\". print(can_ball_pass(N, heights, H, D)) # Output: \\"Yes\\" ```","solution":"def can_ball_pass(N, heights, H, D): Determine if the ball can pass through the entire row of cylinders. Parameters: N (int): The number of cylinders. heights (List[int]): The heights of the cylinders. H (int): The initial height of the ball. D (int): The maximum height difference the ball can handle between two consecutive cylinders. Returns: str: \\"Yes\\" if the ball can pass through the entire row, otherwise \\"No\\". current_height = H for i in range(1, N): if abs(heights[i] - heights[i - 1]) > D: return \\"No\\" return \\"Yes\\""},{"question":"You are given two integers N and M. Create a 2D array where each element is initialized to zero. Then, write a program to fill this 2D array such that each element in the ith row and jth column is equal to the product of i and j (1-based index). Finally, print the resulting 2D array. Constraints * 1 leq N, M leq 10 * All values in input are integers. Input Input is given from Standard Input in the following format: N M Output Print the resulting 2D array, with each row on a new line and elements separated by spaces. Example Input 3 3 Output 0 0 0 0 1 2 0 2 4","solution":"def create_2D_array(N, M): result = [[0]*M for _ in range(N)] for i in range(1, N): for j in range(1, M): result[i][j] = i * j return result def print_2D_array(arr): for row in arr: print(\' \'.join(map(str, row))) if __name__ == \\"__main__\\": N, M = map(int, input().strip().split()) array = create_2D_array(N, M) print_2D_array(array)"},{"question":"A museum hosts an exhibit of historical artifacts, organized into various exhibition halls. Each hall has a certain attractiveness rating associated with it, and visitors can choose which halls to visit based on their preferences and time constraints. There are N exhibition halls in the museum, each numbered 1 to N. Each exhibition hall has an attractiveness rating Ai and takes Bi units of time to tour. The museum opens at time 0 and closes at time T. Visitors want to maximize their overall museum experience by maximizing the total attractiveness rating of the halls they visit, without exceeding the available time. Visitors can visit any subset of the halls, but once they start touring a hall, they must complete the tour fully before moving to another hall. They cannot tour multiple halls simultaneously. Given the number of halls N, the total available time T, and the data for each hall, determine the maximum total attractiveness rating a visitor can achieve within the given time. Input The first line of input contains two integers N and T, representing the number of exhibition halls and the total time available, respectively. The next N lines each contain two integers Ai and Bi, representing the attractiveness rating and the time required to tour the i-th exhibition hall. Output Output a single integer representing the maximum total attractiveness rating that can be achieved within the given time. Examples Input 5 10 8 3 4 2 7 5 6 6 5 4 Output 19 Input 3 5 10 3 9 2 8 4 Output 19","solution":"def museum_max_attractiveness(N, T, halls): Returns the maximum total attractiveness rating that can be achieved within the given time. Args: N (int): Number of exhibition halls. T (int): Total available time. halls (list of tuple): A list where each element is a tuple containing two integers (attractiveness rating Ai, time required Bi) of the i-th hall. Returns: int: Maximum total attractiveness rating. dp = [0] * (T + 1) for A, B in halls: for t in range(T, B - 1, -1): dp[t] = max(dp[t], dp[t - B] + A) return max(dp)"},{"question":"Danny is planning his summer vacation and he has a list of n destinations he wants to visit, numbered from 1 to n. Each destination i (1 ≤ i ≤ n) is described by two integers a_i (the amount of fun Danny will have at this destination) and c_i (the cost to visit this destination). Danny\'s objective is to maximize his total fun without exceeding his budget B. Danny cannot visit any destination more than once. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. Each test case starts with two integers n and B (1 ≤ n ≤ 100, 1 ≤ B ≤ 10^4). The next n lines each contain two space-separated integers a_i (0 ≤ a_i ≤ 100) and c_i (1 ≤ c_i ≤ 10^4) representing the amount of fun and the cost respectively for visiting destination i. Output For each test case, output a single line containing a single integer denoting the maximum total fun Danny can have without exceeding his budget. Example Input 2 4 10 5 2 6 4 8 6 3 3 3 5 4 8 7 3 9 2 5 5 Output 14 7 Explanation In the first test case, Danny can visit destinations 1, 2, and 4, for a total fun of 5 + 6 + 3 = 14 units of fun, without exceeding his budget of 10. In the second test case, Danny can visit destinations 2 and 3 for a total fun of 4 + 3 = 7 units of fun, without exceeding his budget of 5.","solution":"def max_fun(n, B, destinations): This function computes the maximum total fun that can be achieved given a budget B and a list of destinations. Each destination has an associated fun value and a cost. The problem is a variation of the Knapsack problem. :param n: Number of destinations :param B: Budget :param destinations: List of tuples where each tuple contains (fun, cost) for a destination :return: Maximum total fun without exceeding budget B # Create a DP array where dp[j] represents the maximum fun achievable with budget j dp = [0] * (B + 1) # Iterate over each destination for i in range(n): fun, cost = destinations[i] # Update the dp array from end to start to prevent overwriting for j in range(B, cost - 1, -1): dp[j] = max(dp[j], dp[j - cost] + fun) # The maximum fun achievable with budget B is stored in dp[B] return dp[B] def process_cases(test_cases): Processes multiple test cases for the max_fun problem. :param test_cases: List of test cases where each test case is a tuple (n, B, destinations) as described in the max_fun function. :return: List of results for each test case results = [] for n, B, destinations in test_cases: results.append(max_fun(n, B, destinations)) return results"},{"question":"You are given a sequence of integers representing numbers on a special game board. Your objective is to determine the minimum number of steps required to reach the end of the board from the start, where each number in the sequence represents the maximum number of steps you can take forward from that position. If it is not possible to reach the end of the board, return -1. Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of two lines. The first line contains a single integer N, representing the number of integers on the game board. The second line contains N space-separated integers Ai, which describe the maximum steps you can take forward from the ith position on the game board. Output For each test case, output one line containing \\"Case #x: \\", where x is the case number (starting from 1), followed by the minimum number of steps required to reach the end of the game board. If it is not possible to reach the end, output -1. Constraints 1 ≤ T ≤ 100. 1 ≤ N ≤ 1000. 0 ≤ Ai ≤ 1000. SAMPLE INPUT 2 5 2 3 1 1 4 5 3 2 1 0 4 SAMPLE OUTPUT Case #1: 2 Case #2: -1","solution":"def min_steps_to_end(board): n = len(board) if n == 1: return 0 max_reachable = 0 jumps = 0 step_end = 0 for i in range(n - 1): max_reachable = max(max_reachable, i + board[i]) if i == step_end: jumps += 1 step_end = max_reachable if step_end >= n - 1: return jumps return -1 def game_board_solver(T, test_cases): results = [] for i in range(T): N, board = test_cases[i] result = min_steps_to_end(board) results.append(f\\"Case #{i+1}: {result}\\") return results"},{"question":"Design an optimized system that efficiently processes incoming transactions in real-time for a stock exchange. The system should support the following operations: 1. Place an order. 2. Cancel an order. 3. Query the best bid and ask price. Each order has a unique ID, a type (either \\"buy\\" or \\"sell\\"), a price, and a quantity. The best bid price is defined as the highest price among all \\"buy\\" orders that are currently active, and the best ask price is the lowest price among all \\"sell\\" orders that are active. If there are no buy orders, return -1 as the best bid price. If there are no sell orders, return -1 as the best ask price. The system should handle multiple operations efficiently, taking into consideration that the number of operations can be quite large. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of operations. Each of the next n lines describes an operation and can be of the following types: - \\"PLACE order_id type price quantity\\" where order_id is a unique integer (1 ≤ order_id ≤ 10^5), type is either \\"buy\\" or \\"sell\\", price is an integer (1 ≤ price ≤ 10^9), and quantity is an integer (1 ≤ quantity ≤ 10^9). - \\"CANCEL order_id\\" where order_id is the unique integer of the order to be cancelled. - \\"QUERY\\" which outputs the best bid and ask prices currently in the system. Output: For each \\"QUERY\\" operation, output two integers separated by a single space representing the best bid price and the best ask price respectively. Example: Input: ```text 7 PLACE 1 buy 100 10 PLACE 2 buy 105 5 PLACE 3 sell 110 15 QUERY CANCEL 2 QUERY PLACE 4 sell 100 20 QUERY ``` Output: ```text 105 110 100 110 100 100 ``` Note: - After the first query, the best bid is 105 (order ID 2) and the best ask is 110 (order ID 3). - After cancelling the order with ID 2, the best bid is now 100 (order ID 1). - After placing a new sell order with price 100, the best ask becomes 100.","solution":"import heapq from collections import defaultdict class StockExchange: def __init__(self): self.buy_orders = [] # to implement max-heap use negative prices self.sell_orders = [] # to implement min-heap self.order_map = {} def place_order(self, order_id, order_type, price, quantity): order = (price, quantity) self.order_map[order_id] = order if order_type == \'buy\': heapq.heappush(self.buy_orders, (-price, order_id)) else: # \'sell\' heapq.heappush(self.sell_orders, (price, order_id)) self.order_map[order_id] = (order_type, price, quantity) def cancel_order(self, order_id): if order_id in self.order_map: del self.order_map[order_id] def query(self): # Clean up canceled orders from heaps while self.buy_orders and self.buy_orders[0][1] not in self.order_map: heapq.heappop(self.buy_orders) while self.sell_orders and self.sell_orders[0][1] not in self.order_map: heapq.heappop(self.sell_orders) best_bid = -self.buy_orders[0][0] if self.buy_orders else -1 best_ask = self.sell_orders[0][0] if self.sell_orders else -1 return best_bid, best_ask def process_operations(operations): exchange = StockExchange() result = [] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \'PLACE\': order_id, order_type, price, quantity = int(parts[1]), parts[2], int(parts[3]), int(parts[4]) exchange.place_order(order_id, order_type, price, quantity) elif op_type == \'CANCEL\': order_id = int(parts[1]) exchange.cancel_order(order_id) elif op_type == \'QUERY\': bid, ask = exchange.query() result.append(f\\"{bid} {ask}\\") return result"},{"question":"You are given a string `s` consisting of lowercase English letters. You can perform the following operation any number of times: - Choose any two adjacent characters in the string that are equal and remove them. Your task is to determine the final string that remains after performing the operation as many times as possible. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 2 * 10^5). Output Print the final string that remains after applying the described operation repeatedly. If the final string is empty, print \\"Empty String\\". Examples Input abba Output Empty String Input abbac Output c","solution":"def reduce_string(s): Reduces the string by repeatedly removing adjacent pairs of equal characters. If the final string is empty, returns \\"Empty String\\". stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack) if stack else \'Empty String\'"},{"question":"Given a list of integers, write a function that separates the list into two new lists: one containing all the even numbers and the other containing all the odd numbers. The function should return a tuple containing both lists. The even and odd lists should maintain the original order of the elements as they appeared in the input list. # Function Signature ```python def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: ``` # Input - A list of integers `numbers` with at least one element and at most 100 elements. # Output - A tuple containing two lists: the first list with all even numbers and the second list with all odd numbers. # Examples ```python separate_even_odd([1, 2, 3, 4, 5, 6]) # Output: ([2, 4, 6], [1, 3, 5]) separate_even_odd([7, 8, 9, 10, 11]) # Output: ([8, 10], [7, 9, 11]) separate_even_odd([12, 14, 16]) # Output: ([12, 14, 16], []) separate_even_odd([1, 3, 5]) # Output: ([], [1, 3, 5]) ```","solution":"from typing import List, Tuple def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: Separates the input list into two lists: one with even numbers and one with odd numbers. :param numbers: A list of integers. :return: A tuple containing two lists (even numbers, odd numbers). even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] return (even_numbers, odd_numbers)"},{"question":"Write a program that finds the number of distinct subsequences of a given string `s` that are equal to another given string `t`. Input: - The first line contains the string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of string `s`. The string consists of lowercase English letters. - The second line contains the string `t` (1 ≤ |t| ≤ 1000), where |t| denotes the length of string `t`. The string consists of lowercase English letters. Output: - A single integer which is the number of distinct subsequences of `s` that are equal to `t`. # Examples: Example 1: Input: ``` rabbbit rabbit ``` Output: ``` 3 ``` Explanation: There are 3 distinct subsequences of \\"rabbbit\\" which equal \\"rabbit\\": 1. \\"rabbbit\\" -> \\"ra_bbit\\" 2. \\"rabbbit\\" -> \\"rab_bit\\" 3. \\"rabbbit\\" -> \\"rabb_it\\" Example 2: Input: ``` babgbag bag ``` Output: ``` 5 ``` Explanation: There are 5 distinct subsequences of \\"babgbag\\" which equal \\"bag\\": 1. \\"babgbag\\" -> \\"b__g_ba_g\\" 2. \\"babgbag\\" -> \\"ba__g_bag\\" 3. \\"babgbag\\" -> \\"bab_gba_g\\" 4. \\"babgbag\\" -> \\"bab_g_bag\\" 5. \\"babgbag\\" -> \\"_bag_bag\\" Note: Subsequences don\'t need to be contiguous but maintain the order of characters.","solution":"def numDistinct(s, t): Returns the number of distinct subsequences of s that are equal to t. # Initialize a 2D table with (len(s) + 1) x (len(t) + 1) size with zeros dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)] # Fill the first column with 1, because any string has exactly one subsequence which is the empty string \\"\\" for i in range(len(s) + 1): dp[i][0] = 1 # Fill the dp table for i in range(1, len(s) + 1): for j in range(1, len(t) + 1): if s[i-1] == t[j-1]: # If the characters match, add the count of subsequences both including and excluding the current character dp[i][j] = dp[i-1][j-1] + dp[i-1][j] else: # If the characters don\'t match, carry forward the count from the previous character of s dp[i][j] = dp[i-1][j] # The answer will be in the bottom-right cell of the dp table return dp[len(s)][len(t)]"},{"question":"Given an array of integers, you need to find and return the longest contiguous subarray that forms a palindrome when reversed. If there are multiple such subarrays with the same length, return the one which appears first in the array. A palindromic subarray reads the same backward as forward. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers separated by spaces (1 ≤ a_i ≤ 10^9) — the elements of the array. Output - Print the longest palindromic subarray as space-separated integers. If there are multiple longest palindromic subarrays, print the first one. Examples Input: 7 1 2 3 2 1 5 6 Output: 1 2 3 2 1 Input: 8 1 2 3 4 5 4 3 6 Output: 3 4 5 4 3 Input: 5 9 8 6 8 9 Output: 9 8 6 8 9","solution":"def longest_palindromic_subarray(arr): def is_palindrome(subarr): return subarr == subarr[::-1] n = len(arr) max_len = 0 start_index = 0 for i in range(n): for j in range(i, n): if is_palindrome(arr[i:j+1]): if j - i + 1 > max_len: max_len = j - i + 1 start_index = i return arr[start_index:start_index + max_len]"},{"question":"A scientist is observing the growth patterns of a particular species of bacteria. The scientist has recorded the growth rates of bacteria colonies taken at different times of the day. Each record includes the time (in hours) and the corresponding bacteria count. The scientist wants to find out the maximum difference in the bacteria count between any two time points of the day. Write a program to help the scientist determine this maximum difference. Input: The first line contains an integer T denoting the number of records. The next T lines each contain two integers: the time (in hours) and the bacteria count at that time. Output: A single integer denoting the maximum difference in the bacteria count between any two time points of the day. Constraints: 1 ≤ T ≤ 100000 0 ≤ time ≤ 23 1 ≤ bacteria_count ≤ 1000000 Example: Input: 5 0 100 8 300 3 200 15 250 20 50 Output: 250 Input: 4 1 500 5 1000 10 1500 20 2000 Output: 1500 SAMPLE INPUT 5 0 100 8 300 3 200 15 250 20 50 SAMPLE OUTPUT 250","solution":"def max_bacteria_difference(records): Returns the maximum difference in bacteria count between any two time points of the day. if not records: return 0 min_bacteria_count = float(\'inf\') max_bacteria_count = float(\'-inf\') for _, count in records: if count < min_bacteria_count: min_bacteria_count = count if count > max_bacteria_count: max_bacteria_count = count return max_bacteria_count - min_bacteria_count"},{"question":"You are given an array `arr` consisting of `N` integers. Your task is to find the two distinct maximum numbers in the array and return their sum. If the array contains fewer than two distinct numbers, return `-1`. Constraints * The array contains at least 1 element and at most 100 elements. * The integers in the array range from 1 to 1000 inclusive. Input Input is given from Standard Input in the following format: ``` N arr ``` Where: * `N` is an integer representing the number of elements in the array `arr`. * `arr` is a sequence of `N` integers separated by spaces. Output Print the sum of the two distinct maximum numbers in the array. If there are fewer than two distinct numbers, print `-1`. Examples Input 4 4 2 1 4 Output 6 Input 2 3 3 Output -1 Input 5 1 2 3 4 5 Output 9","solution":"def find_two_distinct_max_sum(N, arr): Finds the two distinct maximum numbers in the array and returns their sum. If fewer than two distinct numbers are found, returns -1. Parameters ---------- N : int The number of elements in the array. arr : list of ints The array of integers. Returns ------- int The sum of the two distinct maximum numbers, or -1 if fewer than two distinct numbers exist. if N < 2: return -1 distinct_numbers = list(set(arr)) if len(distinct_numbers) < 2: return -1 distinct_numbers.sort(reverse=True) return distinct_numbers[0] + distinct_numbers[1]"},{"question":"You are given the coordinates of N points in a 2D plane. Your task is to find the largest area of a right-angled triangle that can be formed using any three of the given points. The sides of the triangle should be parallel to the X-axis or Y-axis. Note that a right-angled triangle with sides parallel to the axes means that one of the sides forms the base along the X-axis and the other forms the height along the Y-axis, forming the right angle at the intersection of these two lines. Input The first line of the input contains an integer N (3 ≤ N ≤ 1000), the number of points. Each of the next N lines contains two integers xi and yi (-10000 ≤ xi, yi ≤ 10000), representing the coordinates of each point. Output Output a single integer, the largest area of any right-angled triangle that can be formed using the given points. If no such triangle can be formed, output 0. Examples Input 5 1 2 3 2 1 4 3 6 5 4 Output 4 Input 4 1 1 2 2 3 3 4 4 Output 0 Input 3 0 0 0 1 1 0 Output 1","solution":"def largest_right_angled_triangle_area(points): Returns the largest area of a right-angled triangle that can be formed using any three given points with sides parallel to the X-axis or Y-axis. from collections import defaultdict x_points = defaultdict(list) y_points = defaultdict(list) for x, y in points: x_points[x].append(y) y_points[y].append(x) max_area = 0 for x_set in x_points.values(): x_set.sort() if len(x_set) >= 2: base_options = [ (x_set[i+1] - x_set[i]) for i in range(len(x_set) - 1) ] max_base = max(base_options) for x_base in base_options: for base_start_y in x_set: grouping_y = [ y - base_start_y for y in y_points[base_start_y] if y != base_start_y ] if grouping_y: max_height = max(grouping_y) max_area = max(max_area, x_base * max_height) return max_area"},{"question":"Write a function `majority_element` that takes a list of integers as input and returns the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times in the list, where n is the length of the list. You can assume that the majority element always exists in the array. The function signature is: ```python def majority_element(nums: List[int]) -> int: ``` Your implementation should have a linear runtime complexity. # Example ```python majority_element([3, 2, 3]) # returns 3 majority_element([2, 2, 1, 1, 1, 2, 2]) # returns 2 ``` # Constraints - The input list will have a length `n` such that `1 ≤ n ≤ 10^5` - The elements in the list will be integers in the range `-10^9` to `10^9`","solution":"from typing import List def majority_element(nums: List[int]) -> int: This function returns the majority element in a list of integers. The majority element is the element that appears more than ⌊ n/2 ⌋ times in the list. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"A city has a system of one-way roads connecting n intersections. These roads are unidirectional and you need to drive from one intersection to another following the road direction. Each road has a unique length represented by a positive integer. The city planner wants to implement a new traffic rule where each intersection is assigned a unique integer acting as a cost. The cost of traveling from intersection u to intersection v should be the sum of the road length and the difference in cost between intersection u and v, i.e., `cost(v) - cost(u) + length(road from u to v)`. A valid configuration requires that the total cost for any road must be positive. If no possible configuration of costs exists, return -1. Otherwise, help the city planner by assigning costs to each intersection such that the given conditions are met and the maximum assigned cost is minimized. Input: The first line contains an integer n (2 ≤ n ≤ 500000) — the number of intersections in the city. The next n - 1 lines describe the roads, each line contains three integers u, v, l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1e9), meaning there is a road from intersection u to intersection v with length l. Output: On the first line, print the maximum assigned cost k. On the next line, print n integers representing the each intersection\'s cost in the order from 1 to n. If it is impossible to assign the costs, print -1. Example: Input: 4 1 2 10 2 3 5 3 4 5 Output: 10 1 11 16 21 Input: 4 1 2 5 2 3 2 1 3 15 Output: -1 In the first example, assigning costs as [1, 11, 16, 21] satisfies the condition for all roads since the difference in costs plus road length is always positive and greater than zero. In the second example, it is not possible to satisfy the conditions as road 1 -> 3 will always have a non-positive cost given any configuration of costs.","solution":"def assign_costs(n, roads): from collections import defaultdict import heapq # Graph representation graph = defaultdict(list) for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) # Here we use an array to store costs; initially infinity costs = [float(\'inf\')] * (n + 1) # Using a priority queue to ensure the smallest cost is processed first heap = [(0, 1)] # (cost, intersection), starting from intersection 1 costs[1] = 0 while heap: current_cost, u = heapq.heappop(heap) # Iterate over all neighbors for v, length in graph[u]: new_cost = current_cost + length if new_cost < costs[v]: heapq.heappush(heap, (new_cost, v)) costs[v] = new_cost # Calculate the max assigned cost necessary if float(\'inf\') in costs[1:]: # This means some intersection is disconnected and unreachable return -1 else: max_cost = max(costs[1:]) return max_cost, costs[1:]"},{"question":"A theme park has robot guards that patrol various sectors. Each robot guard has a specific patrol route they must follow. Due to a recent power failure, the routes have been mixed up, and the robots need to restore their original paths to effectively guard the park again. Can you help the robots by determining the correct patrol sequences? Input The input begins with an integer n (1 ≤ n ≤ 500), the number of different patrol routes. This is followed by n lines, each containing a description of one patrol route. Each route description starts with an integer m (1 ≤ m ≤ 1000), the number of checkpoints in the route, followed by m space-separated integers representing the sequence of checkpoint IDs (1 ≤ ID ≤ 10000) that make up the route. Output For each patrol route, the program should print the restored sequence of checkpoint IDs in the order they must be visited by the robot. The output should consist of n lines, each containing the restored patrol route as a space-separated sequence of integers. Note The routes may have been scrambled due to the power failure, possibly splitting into parts or having their segments shuffled. The original order of checkpoints within each route is crucial for the robots to follow their patrol paths correctly. Example Input: 3 5 101 102 103 104 105 4 200 201 202 203 6 301 302 303 304 305 306 Output: 101 102 103 104 105 200 201 202 203 301 302 303 304 305 306","solution":"def restore_patrol_routes(n, routes): Takes in the number of patrol routes and a list of patrol routes, then returns the restored patrol routes in correct order. :param n: int : number of patrol routes :param routes: list : a list of tuples, where each tuple contains an integer m and a list of m checkpoint IDs. :return: list : a list of lists, where each list contains restored sequence of checkpoint IDs for each route. # Since the routes are just scrambled but within their own individual containership, # we assume the routes are received correctly ordered but just need to be sorted by checkpoints restored_routes = [] for _, checkpoints in routes: restored_routes.append(sorted(checkpoints)) return restored_routes # Example input n = 3 routes = [ (5, [101, 102, 103, 104, 105]), (4, [200, 201, 202, 203]), (6, [301, 302, 303, 304, 305, 306]) ] # Calling the function and printing the result restored = restore_patrol_routes(n, routes) for route in restored: print(\\" \\".join(map(str, route)))"},{"question":"There is a secret underground club that has a very exclusive method for admitting new members. The club has a peculiar rule set: 1. Each member has a unique identifier number. 2. Initially, there is no one in the club. 3. A person can join the club only if their identifier number has at least one common digit with the identifier number of an existing member. 4. Each successful new admission rewards the person who invited them with coins equal to the number of common digits between their identifier and the new member\'s identifier. You are given n people, each with a unique identifier number. Some have already joined the club, and they want to maximize their total coin earnings by inviting others. Your job is to determine the maximum coins they can collectively earn. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of people. - The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the identifier numbers of the people. Output Output a single integer — the maximum possible coins they can collectively earn. Example Input 4 123 456 789 235 Output 2 Note The first person (123) can invite the fourth person (235) as they share the digits \'2\' and \'3\', earning 2 coins. Others cannot be invited as they do not share any digit with people invited.","solution":"def max_coins(n, identifiers): Function to determine the maximum possible coins that can be collectively earned. Args: n (int): Number of people. identifiers (list of int): List of identifier numbers for the people. Returns: int: The maximum coins that can be collectively earned. if n < 2: return 0 # Convert identifiers to set of digits digit_sets = [set(str(identifier)) for identifier in identifiers] max_coins = 0 # Iterate over all pairs of identifiers for i in range(n): for j in range(i+1, n): common_digits = digit_sets[i] & digit_sets[j] max_coins = max(max_coins, len(common_digits)) return max_coins"},{"question":"You are organizing a tournament where players will compete in pairs in multiple rounds until a champion is determined. Each round consists of several games, and the winner of a round is the player who wins the most games in that round. If both players win an equal number of games in a round, a tiebreaker game is played to determine the round winner. Given the results of all games in a round, determine the winner of the round or if a tiebreaker is needed. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of games played in the round. The second line contains n characters, each either \'A\' or \'B\'. The i-th character represents the winner of the i-th game. \'A\' means player A won the game, and \'B\' means player B won the game. Output Print \'A\' if player A is the winner of the round, \'B\' if player B is the winner of the round, or \'T\' if a tiebreaker game is needed. Examples Input 5 AABBA Output A Input 6 ABBBAA Output T Note In the first example, player A wins 3 games, and player B wins 2 games. Hence, player A is the winner of the round. In the second example, player A and player B both win 3 games. A tiebreaker is needed, so the answer is \'T\'.","solution":"def determine_round_winner(n, results): Determines the winner of the round or if a tiebreaker is needed. :param n: Number of games played (int) :param results: Results of the games (str) :return: \'A\' if player A is the winner, \'B\' if player B is the winner, or \'T\' if a tiebreaker is needed. count_A = results.count(\'A\') count_B = results.count(\'B\') if count_A > count_B: return \'A\' elif count_B > count_A: return \'B\' else: return \'T\'"},{"question":"There is a city with N nodes and N-1 bidirectional roads, forming a tree structure where node 1 is the central hub. The citizens of the city decided to celebrate the annual festival by decorating a maximal simple path in the tree with beautiful lights. A simple path is a path without repeated vertices. Your task is to help them determine the longest simple path and the total number of roads (edges) that will be decorated with lights. Input The first line contains an integer N (2 ≤ N ≤ 100,000) — the number of nodes in the tree. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N) indicating that there is a road connecting node u and node v. Output Print a single integer — the length of the longest simple path in the tree. Example Input 5 1 2 1 3 2 4 2 5 Output 3 Note Consider the given tree: ``` 1 / 2 3 / 4 5 ``` The longest simple path is from node 4 to node 5 through node 2, passing through 3 roads (or edges). Hence, the length of the longest simple path is 3.","solution":"from collections import defaultdict, deque def longest_path_length(n, edges): def bfs(farthest_node): visited = [-1] * (n + 1) queue = deque([farthest_node]) visited[farthest_node] = 0 max_distance, max_node = 0, farthest_node while queue: node = queue.popleft() current_distance = visited[node] for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] max_node = neighbor return max_node, max_distance graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # First BFS to find one endpoint of the longest path farthest_node, _ = bfs(1) # Second BFS to find the actual longest path _, longest_path = bfs(farthest_node) return longest_path"},{"question":"You are given a list of n distinct integers representing points on a 1-dimensional number line, and a set of k intervals. Each interval [a, b] represents a segment that can be used to cover any integer within the range [a, b] (inclusive) on the number line. Your goal is to determine the minimum number of intervals needed to cover all the points. If it is impossible to cover all points with the given intervals, print -1. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000), the number of points and the number of intervals respectively. The next line contains n integers representing the points on the number line. The following k lines contain two integers each a and b (1 ≤ a, b ≤ 10^4) describing the intervals [a, b]. Output Print the minimum number of intervals needed to cover all the points. If it is impossible, print -1. Examples Input 5 3 1 2 3 4 5 1 3 2 4 3 5 Output 2 Input 4 2 1 3 5 7 1 2 6 8 Output -1 Input 6 4 1 2 3 4 5 6 1 3 4 6 2 5 5 6 Output 2 Note In the first sample, intervals [1, 3] and [3, 5] can cover all the points. Thus, the minimum number of intervals needed is 2. In the second sample, it\'s impossible to cover points 3 and 5 with the given intervals, hence the output is -1. In the third sample, intervals [2, 5] and [4, 6] can cover all points. Thus, the minimum number of intervals needed is 2.","solution":"def min_intervals_to_cover_points(n, k, points, intervals): Determines the minimum number of intervals needed to cover all given points. If it\'s impossible, returns -1. points.sort() intervals.sort() covered = 0 idx = 0 result = 0 while covered < n: best_covered = covered while idx < k and intervals[idx][0] <= points[covered]: if intervals[idx][1] >= points[covered]: best_covered = max(best_covered, covered + sum(1 for p in points if intervals[idx][0] <= p <= intervals[idx][1])) idx += 1 if best_covered == covered: return -1 covered = best_covered result += 1 return result # Parsing input def min_intervals_to_cover_points_from_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) points = list(map(int, data[2:2+n])) intervals = [(int(data[i]), int(data[i+1])) for i in range(2+n, 2+n + 2*k, 2)] return min_intervals_to_cover_points(n, k, points, intervals)"},{"question":"Given an integer sequence a consisting of n integers, you need to determine the longest increasing subsequence of a with a unique property: if a number appears more than once in the original sequence, it can only appear once in the subsequence. Your task is to find the length of this subsequence. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The input consists of a single test case. The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), representing the sequence. Output Output a single integer - the length of the longest increasing subsequence with the described properties. Example Input 8 10 9 2 5 3 7 101 18 Output 4 Explanation: A valid longest increasing subsequence with no duplicate elements is: [2, 3, 7, 101]","solution":"def length_of_unique_lis(n, a): Function to determine the length of the longest increasing subsequence with unique elements. if n == 0: return 0 import bisect # Use a set to record the elements already in the subsequence unique_elements = set() # This will store our longest increasing subsequence so far lis = [] for value in a: if value in unique_elements: continue pos = bisect.bisect_left(lis, value) if pos == len(lis): lis.append(value) else: lis[pos] = value unique_elements.add(value) return len(lis)"},{"question":"**Problem Statement** You are given a string `S` consisting of lowercase letters and parentheses. Your task is to determine if the parentheses in `S` are balanced. A string has balanced parentheses if: 1. Every opening parenthesis `(` has a corresponding closing parenthesis `)`. 2. Opening parentheses are closed in the correct order. For example, - The string `\\"(()())\\"` is balanced because each opening parenthesis has a corresponding closing parenthesis and they are closed in the correct order. - The string `\\"(())\\"` is also balanced for the same reason. - Conversely, the string `\\"(()\\"` is not balanced because there is an unmatched opening parenthesis. - Similarly, the string `\\"())(\\"` is not balanced because the parentheses are not closed in the correct order. Your task is to write a function to check if the given string `S` has balanced parentheses. # Constraints - The length of string `S` is at most 1000. - The string `S` contains only lowercase English letters and parentheses `(` and `)`. # Input The input contains a single line with a string `S` which needs to be verified for balanced parentheses. # Output Output `true` if the string `S` has balanced parentheses, otherwise output `false`. # Sample Input 1 ``` (()()) ``` # Sample Output 1 ``` true ``` # Sample Input 2 ``` (abc(def)ghi) ``` # Sample Output 2 ``` true ``` # Sample Input 3 ``` (()))( ``` # Sample Output 3 ``` false ``` # Sample Input 4 ``` abcd ``` # Sample Output 4 ``` true ``` # Explanation In the first sample, every opening parenthesis is properly closed and nested, hence it is balanced. In the second sample, amid the lowercase letters, the parentheses are balanced. In the third sample, the string has parentheses that are not correctly balanced. In the fourth sample, there are no parentheses to balance, so the string is considered balanced.","solution":"def is_balanced_parentheses(S): Checks if the given string S has balanced parentheses. Args: S (str): The input string containing lowercase letters and parentheses. Returns: bool: True if the string has balanced parentheses, False otherwise. stack = [] for char in S: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Dan has an array of N integers. Every day he performs select a subarray [L,R] and adds a specific integer \'K\' to each element in that subarray. This process is repeated for M number of days. After M days, Dan has a query: What is the value of some index P in the array. He has Q such queries. Input: First line contains N - number of elements in the array. Second line contains M - number of days. Each of the next M lines consists of three space-separated integers L, R, and K. Followed by integer Q - number of queries. Each of the next Q lines contains a single integer P. Output: For each query output the result in a new line. Constraints: 1 ≤ N ≤ 1000000 1 ≤ M ≤ 100000 1 ≤ L ≤ R ≤ N -1000 ≤ K ≤ 1000 1 ≤ Q ≤ 1000000 1 ≤ P ≤ N SAMPLE INPUT 5 3 1 3 2 2 4 -1 3 5 3 4 1 4 3 5 SAMPLE OUTPUT 4 2 4 6 Explanation: Initially, the array has 5 elements initialized to 0: arr = [0, 0, 0, 0, 0] Day 1: Add 2 to elements from index 1 to 3: arr = [2, 2, 2, 0, 0] Day 2: Subtract 1 from elements from index 2 to 4: arr = [2, 1, 1, -1, 0] Day 3: Add 3 to elements from index 3 to 5: arr = [2, 1, 4, 2, 3] Queries: Query 1: Value at index 1 => 2 Query 2: Value at index 4 => 2 Query 3: Value at index 3 => 4 Query 4: Value at index 5 => 3","solution":"def process_updates_and_queries(N, M, updates, Q, queries): arr = [0] * (N + 1) # modified to N+1 to use 1-based indexing conveniently # Process the updates using a difference array technique delta = [0] * (N + 2) # another extra element to handle right-bound increment easily for L, R, K in updates: delta[L] += K if R + 1 <= N: delta[R + 1] -= K current = 0 for i in range(1, N + 1): current += delta[i] arr[i] = current # Process the queries results = [] for P in queries: results.append(arr[P]) return results"},{"question":"You are given an array of integers representing the monthly temperatures in a year for a particular city. Your task is to rearrange the elements of the array in such a way that the absolute difference between any two consecutive months is minimized. Constraints * The array will contain exactly 12 integers. * Each integer represents the temperature for a particular month. Input The input is given from Standard Input in the following format: ``` t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_{10} t_{11} t_{12} ``` Output Print a single line containing the rearranged temperatures separated by spaces such that the absolute difference between any two consecutive months is minimized. Examples Input ``` 30 10 20 25 15 35 40 45 50 55 5 60 ``` Output ``` 5 10 15 20 25 30 35 40 45 50 55 60 ``` Input ``` 15 14 13 12 11 10 9 8 7 6 5 4 ``` Output ``` 4 5 6 7 8 9 10 11 12 13 14 15 ```","solution":"def rearrange_temperatures(temperatures): Rearranges the temperatures such that the absolute difference between any two consecutive months is minimized. return sorted(temperatures)"},{"question":"Given an integer array `nums` of length `n` and an integer `k`, your task is to determine whether there is a contiguous subarray of length `k` or more that sums to zero. If such a subarray exists, return \\"YES\\", otherwise return \\"NO\\". **Input** - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n). - The second line contains `n` integers representing the elements of `nums` (-10^9 ≤ nums[i] ≤ 10^9). **Output** - Output \\"YES\\" if there exists a contiguous subarray of length `k` or more whose sum is zero, otherwise output \\"NO\\". **SAMPLE INPUT** 5 3 1 -1 3 2 -2 **SAMPLE OUTPUT** YES","solution":"def subarray_sum_zero(nums, k): Determines whether there is a contiguous subarray of length `k` or more that sums to zero. n = len(nums) # Helper function to check for a subarray with sum zero def has_zero_sum(nums): prefix_sum = 0 seen = {0} # Initial prefix sum is zero for num in nums: prefix_sum += num if prefix_sum in seen: return True seen.add(prefix_sum) return False # Sliding window to check subarrays of length k or more for start in range(n - k + 1): for end in range(start + k, n + 1): if has_zero_sum(nums[start:end]): return \\"YES\\" return \\"NO\\""},{"question":"Anastasia is an efficient programmer who loves optimizing her code. Recently, she has encountered a challenge in which she needs to generate a list of prime numbers up to a certain number n. She decides to implement the Sieve of Eratosthenes algorithm to achieve this efficiently. However, she is interested in knowing the sum of all prime numbers less than or equal to n. Anastasia has asked for your help to write a program that calculates this sum. Input The input contains a single integer n (1 ≤ n ≤ 1,000,000), the upper limit up to which prime numbers should be considered. Output Output the sum of all prime numbers less than or equal to n. Examples Input 10 Output 17 Input 20 Output 77 Note In the first example, the prime numbers less than or equal to 10 are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17. In the second example, the prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n using Sieve of Eratosthenes. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for p in range(2, int(n**0.5) + 1): if sieve[p]: for multiple in range(p * p, n + 1, p): sieve[multiple] = False return sum(i for i in range(2, n + 1) if sieve[i])"},{"question":"**Problem Description:** You and your friend Alex are organizing a marathon event. On the marathon route, there are several water stations where volunteers provide water to the runners at specific intervals. You want to determine the least time at which all the water stations will be simultaneously replenished with water again given that they all start replenishing at the same time (time = 0). Suppose there are `n` water stations with each station replenished at its own specific interval time. Your task is to compute the exact moment when all the stations will get replenished together again. **Input:** - The first line contains an integer `T`, the number of test cases. - The next `T` lines contain the description of each test case. - For each test case, the first line contains an integer `n`, denoting the number of water stations. - The second line contains `n` space-separated integers where each integer denotes the time interval at which each station is replenished. **Output:** Output `T` lines, each containing one integer - the least common time at which all water stations will be replenished simultaneously for each test case (modulo 1000000007). **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 500 - 1 ≤ Interval time ≤ 10000 **Sample Input:** ``` 1 3 5 10 15 ``` **Sample Output:** ``` 30 ``` **Explanation:** In the provided sample, there are three water stations with intervals of 5, 10, and 15 minutes respectively. The least common multiple (LCM) of these intervals is 30, so all stations will be replenished together every 30 minutes. --- **Note:** To find the LCM of a set of numbers, you can use the relation: `LCM(a, b) = (a * b) / GCD(a, b)` where `GCD` is the greatest common divisor. For more than two numbers, the LCM can be computed iteratively by updating the LCM with each number in sequence.","solution":"import math from functools import reduce MOD = 1000000007 def lcm(a, b): return (a * b) // math.gcd(a, b) def lcm_multiple(numbers): return reduce(lambda x, y: lcm(x, y) % MOD, numbers, 1) def marathon_event_replenish_times(T, test_cases): results = [] for test_case in test_cases: n = test_case[0] intervals = test_case[1:] result = lcm_multiple(intervals) results.append(result) return results"},{"question":"Given an integer n, find the smallest prime number greater than n. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function `next_prime(n)` that takes an integer n as an input and returns the smallest prime number greater than n. # Input - An integer `n` where (1 ≤ n ≤ 10^6). # Output - An integer representing the smallest prime number greater than n. # Examples Example 1: **Input:** ```plaintext 10 ``` **Output:** ```plaintext 11 ``` Example 2: **Input:** ```plaintext 17 ``` **Output:** ```plaintext 19 ``` Example 3: **Input:** ```plaintext 20 ``` **Output:** ```plaintext 23 ``` # Notes - The solution should efficiently handle the upper limit where n can be as large as 10^6, implying that optimized prime-checking techniques will be necessary.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): candidate = n + 1 while True: if is_prime(candidate): return candidate candidate += 1"},{"question":"Problem Description You have been given a matrix of size N x N. Your task is to find the size of the largest \'X\' that can be formed in the matrix. An \'X\' is formed by connecting four ‘1’s diagonally. Input The first line contains an integer N representing the number of rows and columns. The next N lines contain N integers each (0 or 1), representing the elements of the matrix. Output Print a single integer representing the size of the largest X that can be formed in the matrix. Constraints 1 ≤ N ≤ 500 0 ≤ matrix[i][j] ≤ 1 Example Input: 5 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 Output: 3 Explanation The largest \'X\' is of size 3 and is formed by the elements at positions (2,2), (1,1), (3,3), and (1,3).","solution":"def find_largest_x(matrix): N = len(matrix) # Initialize the auxiliary DP matrices for calculating the size of \'X\' top_left = [[0]*N for _ in range(N)] top_right = [[0]*N for _ in range(N)] bottom_left = [[0]*N for _ in range(N)] bottom_right = [[0]*N for _ in range(N)] # Fill the diagonally aligned matrices for i in range(N): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: top_left[i][j] = 1 else: top_left[i][j] = top_left[i-1][j-1] + 1 if i == 0 or j == N-1: top_right[i][j] = 1 else: top_right[i][j] = top_right[i-1][j+1] + 1 for i in range(N-1, -1, -1): for j in range(N): if matrix[i][j] == 1: if i == N-1 or j == 0: bottom_left[i][j] = 1 else: bottom_left[i][j] = bottom_left[i+1][j-1] + 1 if i == N-1 or j == N-1: bottom_right[i][j] = 1 else: bottom_right[i][j] = bottom_right[i+1][j+1] + 1 # Find the largest \'X\' in the matrix largest_x = 0 for i in range(N): for j in range(N): arm_length = min(top_left[i][j], top_right[i][j], bottom_left[i][j], bottom_right[i][j]) if arm_length > largest_x: largest_x = arm_length return largest_x"},{"question":"Arnold the Engineer is fond of geometrics. He has a list of points in a 2D plane, and he wants to find out if there is any rectangle that can be formed by these points where all sides of the rectangle are parallel to the coordinate axes. Point A with coordinates (x1, y1) and point C with coordinates (x2, y2) are opposite corners of a rectangle, if and only if points B (x1, y2) and D (x2, y1) are also in the list of points. Your task is to help Arnold determine the number of such rectangles. Input The input begins with a single integer n (1 ≤ n ≤ 200 000) — the number of points. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) — the coordinates of the i-th point. Output Print a single integer — the number of rectangles that can be formed. Examples Input 6 1 2 3 2 1 4 3 4 2 3 1 5 Output 1 Input 4 0 0 1 1 1 0 0 1 Output 1 Note In the first sample case, there is 1 rectangle formed by the points (1, 2), (3, 2), (1, 4), and (3, 4). In the second sample case, there is 1 rectangle formed by the points (0, 0), (1, 1), (1, 0), and (0, 1).","solution":"def count_rectangles(points): Given a list of points, calculate the number of rectangles that can be formed where all sides of the rectangles are parallel to the coordinate axes. :param points: List of tuples containing coordinates (xi, yi) :return: The number of rectangles that can be formed point_set = set(points) count = 0 for i in range(len(points)): for j in range(i + 1, len(points)): if points[i][0] != points[j][0] and points[i][1] != points[j][1]: if (points[i][0], points[j][1]) in point_set and (points[j][0], points[i][1]) in point_set: count += 1 return count // 2 # Each rectangle is counted twice"},{"question":"Alice is participating in a coding challenge where she needs to write a function to process and analyze a list of integers. Given a list of integers, she needs to find the length of the longest subarray where the absolute difference between any two elements is at most a given integer k. A subarray is a contiguous part of an array. The absolute difference between two integers x and y is defined as |x - y|, where |.| denotes the absolute value. Write a function that takes an integer array and an integer k, and returns the length of the longest subarray satisfying the above condition. Input The first line contains two integers n (1 ≤ n ≤ 2 * 10^5) and k (0 ≤ k ≤ 10^9), where n is the length of the array and k is the maximum allowed absolute difference. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the length of the longest subarray that meets the condition. Examples Input 6 3 1 3 6 3 8 3 Output 3 Input 5 0 4 4 4 4 4 Output 5 Input 4 2 -1 -3 3 5 Output 2 Note In the first example, the longest subarray that satisfies the condition is [1, 3, 3] or [3, 6, 3]. The length of this subarray is 3. In the second example, since k is 0, the longest subarray that meets the condition includes all identical elements. Here, all elements of the array are the same, so the entire array is a valid subarray. In the third example, the array [-1, -3] satisfies the condition with k = 2, or the subarray [3, 5] also satisfies the condition. The length of either subarray is 2.","solution":"def longest_subarray(arr, k): n = len(arr) left = 0 longest = 0 min_value = max_value = arr[0] for right in range(n): min_value = min(min_value, arr[right]) max_value = max(max_value, arr[right]) while (max_value - min_value) > k: left += 1 min_value = min(arr[left:right+1]) max_value = max(arr[left:right+1]) longest = max(longest, right - left + 1) return longest"},{"question":"Pirate Pete has found a treasure chest containing n different types of jewels. Each jewel has a certain value, with the value of the i-th jewel denoted as vi. Pete wants to distribute the jewels among his crew members over m days. On each day, he must distribute a non-empty subset of the jewels, ensuring that the total value of the jewels distributed each day is unique from the total values of all other days. Help Pete decide the distribution plan for the jewels over m days. If there are multiple valid distribution plans, print any one of them. Input The first line contains two integers n, m (1 ≤ n ≤ 50; 1 ≤ m ≤ min(n, 10)) — the number of jewel types and the number of days Pete will distribute jewels, respectively. The second line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 10^7) — the values of the jewels. It is guaranteed that all jewels have distinct values. Output Print m lines: in the i-th line, print the description of the jewels distributed on the i-th day. The description consists of an integer ci (1 ≤ ci ≤ n) — the number of jewels distributed on that day, followed by ci distinct integers representing the values of the distributed jewels. The values of the jewels can be printed in any order. Examples Input 4 3 5 10 15 20 Output 1 5 1 10 2 15 20 Input 3 2 8 14 21 Output 1 14 2 8 21","solution":"from itertools import combinations def distribute_jewels(n, m, jewel_values): # sort the jewel values from low to high jewel_values.sort() # initialize the plan plan = [] # distribute one jewel each on the first m-1 days to make sure we have unique values for i in range(m-1): plan.append([1, jewel_values[i]]) # distribute the remaining jewels on the last day remaining_jewels = jewel_values[m-1:] final_day_distribution = [len(remaining_jewels)] + remaining_jewels plan.append(final_day_distribution) return plan # Example usage n, m = 4, 3 jewel_values = [5, 10, 15, 20] result = distribute_jewels(n, m, jewel_values) for day in result: print(\' \'.join(map(str, day)))"},{"question":"In a distant land, there exists an enchanted forest populated by magical creatures. Each creature is represented by a unique integer ID. Creatures in this forest have various types of relationships with each other, and these relationships are described as a list of pairs of IDs where each pair signifies that the two creatures in the pair are friends. Unfortunately, due to a recent magical anomaly, a subset of these creatures have forgotten who their friends are, and they need to be reminded. Your task is to determine whether all creatures in the forest belong to a single connected network of friends. Two creatures belong to the same network if they can reach each other through one or more direct or indirect friendships. Input The first line contains two integers n and m — the number of creatures in the forest and the number of relationships between them. Each of the next m lines contains two space-separated integers u and v — indicating that creature u and creature v are friends. Output Print \\"YES\\" if all creatures are part of a single connected network of friends. Otherwise, print \\"NO\\". Examples Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 4 2 1 2 3 4 Output NO","solution":"def are_all_creatures_connected(n, m, relationships): Determines if all creatures in the forest are part of a single connected network. Args: n (int): The number of creatures. m (int): The number of relationships. relationships (list of tuples): Each tuple contains two integers representing a friendship between two creatures. Returns: str: \\"YES\\" if all creatures are part of a single connected network of friends, otherwise \\"NO\\". from collections import defaultdict, deque def bfs(start_node, graph, visited): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 0: # No creatures means there\'s no network return \\"NO\\" # Create adjacency list for graph representation graph = defaultdict(list) for u, v in relationships: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 # Check connectivity using BFS/DFS for creature in range(1, n + 1): if not visited[creature]: if components > 0: return \\"NO\\" bfs(creature, graph, visited) components += 1 return \\"YES\\""},{"question":"You are given an array of integers representing the heights of buildings in a row. Your goal is to determine the maximum number of buildings that can be seen from a vantage point located to the left of the first building. A building can be seen if all the buildings before it are shorter in height. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings. Output Print one integer — the maximum number of buildings that can be seen from the leftmost point. Examples Input 6 1 3 2 5 4 6 Output 4 Input 5 5 4 3 2 1 Output 1 Note In the first sample, the buildings seen from the leftmost point are those with heights 1, 3, 5, and 6. In the second sample, only the first building with height 5 can be seen from the leftmost point.","solution":"def max_visible_buildings(n, heights): Determines the maximum number of buildings that can be seen from a vantage point located to the left of the first building. :param n: Number of buildings :param heights: List of heights of the buildings :return: Maximum number of buildings that can be seen from the leftmost point max_visible = 0 current_max_height = 0 for height in heights: if height > current_max_height: max_visible += 1 current_max_height = height return max_visible"},{"question":"Alice and Bob love playing with strings. They have a game where they are given a string composed of lowercase English letters, and they need to determine various properties of substrings based on the queries they receive. Alice and Bob can receive three types of queries: 1. \\"reverse l r\\", reverse the substring of the string from index l to index r (inclusive). 2. \\"append s\\", append string s to the end of the current string. 3. \\"check_palindrome l r\\", check if the substring of the string from index l to index r (inclusive) is a palindrome. Input The first line contains the initial string s (1 ≤ |s| ≤ 100,000), where |s| is the length of the string. Then follows an integer q (1 ≤ q ≤ 100,000), which is the number of queries. Each of the following q lines contains a query of one of the three types described above. The indices l and r in the queries are 1-based. Output For each query of type \\"check_palindrome l r\\" print \\"Yes\\" if the substring is a palindrome, and \\"No\\" otherwise. Examples Input abcba 5 check_palindrome 1 5 reverse 1 3 check_palindrome 1 3 append def check_palindrome 6 8 Output Yes No No Note In the first example, the initial string is \\"abcba\\". - The substring from index 1 to 5 is \\"abcba\\", which is a palindrome. - After reversing the substring from index 1 to 3, the string becomes \\"cbaba\\". - The substring from index 1 to 3 is \\"cba\\", which is not a palindrome. - After appending \\"def\\", the string becomes \\"cbabadef\\". - The substring from index 6 to 8 is \\"def\\", which is not a palindrome. In the second example, the operations modify the string and determine if specific substrings are palindromes or not. The operations reflect how the string evolves and how checks are made.","solution":"def process_queries(s, queries): result = [] for query in queries: parts = query.split() if parts[0] == \\"reverse\\": l, r = int(parts[1]) - 1, int(parts[2]) - 1 s = s[:l] + s[l:r+1][::-1] + s[r+1:] elif parts[0] == \\"append\\": s += parts[1] elif parts[0] == \\"check_palindrome\\": l, r = int(parts[1]) - 1, int(parts[2]) - 1 if s[l:r+1] == s[l:r+1][::-1]: result.append(\\"Yes\\") else: result.append(\\"No\\") return result # Example usage based on provided example: initial_string = \\"abcba\\" queries = [ \\"check_palindrome 1 5\\", \\"reverse 1 3\\", \\"check_palindrome 1 3\\", \\"append def\\", \\"check_palindrome 6 8\\" ] print(process_queries(initial_string, queries)) # Expected Output: [\\"Yes\\", \\"No\\", \\"No\\"]"},{"question":"Given a non-negative integer `n`, write a function to count the number of digits in `n` that are prime. Prime digits are 2, 3, 5, and 7. Your function should return the count of these prime digits. Input: - A single non-negative integer `n` (0 ≤ n ≤ 10^18) Output: - An integer representing the count of prime digits in `n`. Example: Input: - 2357019 Output: - 4 Explanation: - The prime digits in the number 2357019 are 2, 3, 5, and 7. Therefore, the output is 4. Example: Input: - 1234567890 Output: - 4 Explanation: - The prime digits in the number 1234567890 are 2, 3, 5, and 7. Therefore, the output is 4.","solution":"def count_prime_digits(n): Returns the count of prime digits in the given non-negative integer n. # Convert the number to string to iterate through each digit. n_str = str(n) # Define the set of prime digits. prime_digits = {\'2\', \'3\', \'5\', \'7\'} # Count the prime digits in n. prime_count = sum(1 for digit in n_str if digit in prime_digits) return prime_count"},{"question":"Given an unsorted array of integers, write a function to find the length of the longest increasing subsequence. The longest increasing subsequence is a subsequence of the given array in which the subsequence\'s elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible. This subsequence does not necessarily have to be contiguous or unique. Constraints * 1 ≤ array length ≤ 10,000 * -1,000,000,000 ≤ array element ≤ 1,000,000,000 Input An integer n representing the length of the array, followed by an array of n integers on the next line. Output An integer representing the length of the longest increasing subsequence. Examples Input 8 10 9 2 5 3 7 101 18 Output 4 Explanation The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. Input 6 0 1 0 3 2 3 Output 4 Explanation The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4. Input 1 10 Output 1 Explanation The longest increasing subsequence is [10], which has a length of 1. Input 5 10 20 10 30 10 Output 3 Explanation The longest increasing subsequence is [10, 20, 30], which has a length of 3.","solution":"def length_of_LIS(nums): Given an unsorted array of integers, return the length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Input 4 7 Paris Berlin Rome Madrid 2 London Oslo 200 150 2 London Tokyo 180 220 Output 360 2","solution":"def calculate_travel_cost(initial_cities, cities_names, costs_first_leg, first_leg_cities, second_leg_costs): travel_sum = sum(costs_first_leg) + sum(second_leg_costs) travel_direct_pairs = len(first_leg_cities) if isinstance(first_leg_cities, list) else 1 return travel_sum, travel_direct_pairs"},{"question":"A popular food delivery service collects and stores user ratings for its partner restaurants. The ratings are integers ranging from 1 to 5. The service wants to identify the restaurants that have an average rating greater than or equal to a given threshold and report their names. You are tasked with implementing a function that processes the restaurants and ratings data and provides the desired list of restaurants based on the given threshold. # Input - The first line contains two integers, `n` and `t` (1 ≤ n ≤ 1000, 1 ≤ t ≤ 5), which represent the number of restaurants and the rating threshold, respectively. - The following `n` lines each contain the name of a restaurant (a string of up to 50 characters) followed by a list of space-separated integers representing the ratings for that restaurant. Each list can have up to 100 integers ranging from 1 to 5. # Output - The output should contain the names of the restaurants with average ratings greater than or equal to `t`, one per line. - If no restaurant meets the threshold, output \\"None\\". # Example Input ``` 3 4 Pizzeria 5 4 4 3 5 BurgerKing 3 3 4 SushiPlace 5 5 5 4 4 5 ``` Output ``` Pizzeria SushiPlace ``` Input ``` 2 4 TacoBell 2 3 4 Subway 1 2 3 4 5 ``` Output ``` None ``` Implement this function to solve the problem while adhering to the input and output requirements.","solution":"def filter_restaurants_by_rating(n, t, restaurant_data): Filters restaurants based on average rating threshold. Parameters: n (int): Number of restaurants t (int): Rating threshold restaurant_data (list): List of restaurant data with each item containing restaurant name followed by ratings Returns: list: List of restaurant names having average rating >= t, or [\\"None\\"] if no restaurant meets the threshold result = [] for data in restaurant_data: parts = data.split() name = parts[0] ratings = list(map(int, parts[1:])) average_rating = sum(ratings) / len(ratings) if average_rating >= t: result.append(name) return result if result else [\\"None\\"]"},{"question":"Create a function that simulates the operations of a queue using two stacks. A queue is a data structure that follows the First-In-First-Out (FIFO) principle, whereas a stack follows the Last-In-First-Out (LIFO) principle. The objective is to implement the queue operations using the given two stacks. The function should support the following operations: 1. `enqueue(x)` - adds element `x` to the end of the queue. 2. `dequeue()` - removes the element from the front of the queue and returns it. Your task is to implement these operations using two stacks in such a way that the queue operates as expected. Constraints: - All queue operations are valid and performed in sequence. - The function should be efficient in terms of both time and space complexity. The provided function should also handle edge cases, such as attempting to dequeue from an empty queue, by returning a specific value or raising an appropriate exception. Input: You will receive a series of operations to perform, which are either enqueue operations with an integer or dequeue operations. Output: For each dequeue operation, return the dequeued element. If a dequeue operation is attempted on an empty queue, return \\"Queue is empty\\". Example: ``` Input: 5 enqueue 10 enqueue 20 dequeue enqueue 30 dequeue Output: 10 20 ``` Explanation: - The first operation enqueues the number 10. - The second operation enqueues the number 20. - The third operation dequeues the first element, which is 10. - The fourth operation enqueues the number 30. - The fifth operation dequeues the next element, which is 20. Implement the function and simulate the described operations.","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): self.stack1.append(x) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: return \\"Queue is empty\\" return self.stack2.pop() def simulate_operations(operations): q = QueueUsingStacks() results = [] for operation in operations: if operation.startswith(\\"enqueue\\"): _, x = operation.split() q.enqueue(int(x)) elif operation == \\"dequeue\\": results.append(q.dequeue()) return results"},{"question":"Write a function that simulates a vending machine operation. The function should process a series of commands to dispense products or add items to the machine, track the stock of each item, and maintain a balance of the total revenue generated. The vending machine starts with an initial stock of items and prices as follows: - Soda: 1.50 - Chips: 2.00 - Candy: 1.25 The machine only accepts whole dollar bills (i.e., 1, 2, 5, 10, 20). Commands to the machine will be provided in the following format: 1. \\"ADD item count\\": Adds the specified count of the item to the machine. 2. \\"REMOVE item count\\": Removes the specified count of the item, if available. 3. \\"BUY item amount\\": Dispenses the item to the customer if they provide at least the exact amount (no change provided); otherwise, prints \\"Insufficient funds\\". 4. \\"INVENTORY\\": Prints the current stock of each item. 5. \\"REVENUE\\": Prints the total revenue generated so far. The function should handle these commands interactively. Input The input consists of several lines. Each line contains a command followed by the necessary arguments. The series of commands ends with the line \\"END\\". Output For each command, based on its type, the function should print either: - Confirmation of the \\"ADD\\" or \\"REMOVE\\" operation. - Result of the \\"BUY\\" operation or \\"Insufficient funds\\". - The current inventory of items. - The total revenue generated. Example Input ADD Soda 10 BUY Soda 2 BUY Soda 2 REMOVE Candy 5 INVENTORY REVENUE END Output Added 10 Soda(s) Dispensed 1 Soda Insufficient funds Removed 0 Candy(s) Soda: 9, Chips: 0, Candy: 0 Total revenue: 1.50","solution":"def vending_machine(commands): # Initial stock and prices inventory = { \\"Soda\\": {\\"stock\\": 0, \\"price\\": 1.50}, \\"Chips\\": {\\"stock\\": 0, \\"price\\": 2.00}, \\"Candy\\": {\\"stock\\": 0, \\"price\\": 1.25} } total_revenue = 0.0 for command in commands: parts = command.split() action = parts[0] if action == \\"ADD\\": item = parts[1] count = int(parts[2]) inventory[item][\\"stock\\"] += count print(f\\"Added {count} {item}(s)\\") elif action == \\"REMOVE\\": item = parts[1] count = int(parts[2]) actual_removed = min(count, inventory[item][\\"stock\\"]) inventory[item][\\"stock\\"] -= actual_removed print(f\\"Removed {actual_removed} {item}(s)\\") elif action == \\"BUY\\": item = parts[1] amount = float(parts[2]) if amount >= inventory[item][\\"price\\"] and inventory[item][\\"stock\\"] > 0: inventory[item][\\"stock\\"] -= 1 total_revenue += inventory[item][\\"price\\"] print(\\"Dispensed 1 \\" + item) else: print(\\"Insufficient funds\\") elif action == \\"INVENTORY\\": print(\\", \\".join(f\\"{k}: {v[\'stock\']}\\" for k, v in inventory.items())) elif action == \\"REVENUE\\": print(f\\"Total revenue: {total_revenue:.2f}\\") elif action == \\"END\\": break"},{"question":"Input Format The input consists of two lines. The first line contains two integers: N M Where N is the number of items and M is the number of transactions. The second line contains a list of N integers a_1, a_2, …, a_N: a_1 a_2 ... a_N The next M lines contain one of the following formats: 1 x k (Add value k to element at index x) 2 y k (Subtract value k from element at index y) 3 l r (Calculate the sum of the elements from index l to r inclusive) Output Format For each query of type 3, print the sum in one line. Constraints 1 ≤ N, M ≤ 300000 1 ≤ a_i ≤ 10^9 1 ≤ x, y, l, r ≤ N 1 ≤ k ≤ 1000 Sample Input 5 7 1 2 3 4 5 1 2 1 2 3 2 3 1 5 1 4 3 3 2 4 2 5 1 3 1 5 Sample Output 10 16 14","solution":"def process_queries(n, m, items, queries): Process the given queries on the items list and return results of sum queries. :param n: Number of items :param m: Number of transactions :param items: List of integers representing the items :param queries: List of queries to process :return: List of results for \'sum\' queries results = [] for query in queries: if query[0] == 1: # Add k to element at index x x, k = query[1] - 1, query[2] items[x] += k elif query[0] == 2: # Subtract k from element at index y y, k = query[1] - 1, query[2] items[y] -= k elif query[0] == 3: # Calculate the sum from index l to r inclusive l, r = query[1] - 1, query[2] - 1 results.append(sum(items[l:r+1])) return results"},{"question":"Given a rectangular grid of size m x n where some of the cells are blocked, you are to determine the number of different paths from the top-left corner of the grid to the bottom-right corner. You can only move either right or down from a cell to another cell. Write a function `uniquePaths` that takes in three parameters: - m (integer): the number of rows in the grid. - n (integer): the number of columns in the grid. - obstacles (list of list of integers): each sublist contains two integers [ai, bi] representing a blocked cell at position (ai, bi). Return the number of unique paths from the top-left corner to the bottom-right corner of the grid. Assume that the input parameters satisfy the following constraints: - 1 ≤ m, n ≤ 100 - 0 ≤ number of blocked cells ≤ m * n It is guaranteed that the top-left corner (0, 0) and the bottom-right corner (m-1, n-1) are not blocked. # Example ```python def uniquePaths(m: int, n: int, obstacles: List[List[int]]) -> int: # write your code here ``` **Input** ```python m = 3 n = 3 obstacles = [[1, 1]] ``` **Output** ```python 2 ``` **Explanation** There are two ways to reach (2, 2): 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) **Input** ```python m = 2 n = 2 obstacles = [] ``` **Output** ```python 2 ``` **Explanation** There are two ways to reach (1, 1): 1. (0, 0) -> (0, 1) -> (1, 1) 2. (0, 0) -> (1, 0) -> (1, 1)","solution":"def uniquePaths(m, n, obstacles): Returns the number of unique paths from the top-left corner to the bottom-right corner on an m x n grid with specified obstacles. # Create a grid initialized to 0 grid = [[0] * n for _ in range(m)] # Mark obstacle positions in the grid for obstacle in obstacles: grid[obstacle[0]][obstacle[1]] = -1 # Initialize the start position if grid[0][0] == 0: grid[0][0] = 1 # Fill the grid for i in range(m): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[m-1][n-1]"},{"question":"Flyland is a mysterious island with n cities. Each city is directly connected to every other city by a road. Each road has a certain distance associated with it, representing how long it takes to travel between the two cities. The King of Flyland wants to ensure that the citizens can frequently travel between cities with minimal time. Thus, he desires to find the shortest path that connects all the cities – also known as the Travelling Salesman Problem (TSP). Your task is to calculate the minimum distance required to visit all cities exactly once and return to the starting city. To help the King, you are given the distance matrix of all cities. The distance matrix is an n x n matrix where the entry at row i and column j represents the distance between city i and city j. Return the length of the shortest possible route that visits every city exactly once and returns to the starting city. Input The first line contains an integer n (2 ≤ n ≤ 10), denoting the number of cities. The next n lines each contain n integers. The j-th integer on the i-th line represents the distance between city i and city j (1 ≤ distance[i][j] ≤ 1000). Output Output one integer — the minimum distance required to travel to all cities and return to the start. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 5 6 5 0 4 6 4 0 Output 15 Note In the first sample, the minimum distance required to visit all cities and return to the starting point could be achieved by the path 0 -> 1 -> 3 -> 2 -> 0, which equals 10 + 25 + 30 + 15 = 80. In the second sample, the minimum distance visiting all cities could be achieved by path 0 -> 1 -> 2 -> 0, which equals 5 + 4 + 6 = 15.","solution":"import itertools def tsp(distance_matrix): n = len(distance_matrix) # Generating all possible permutations of cities (excluding the starting city 0) permutations = itertools.permutations(range(1, n)) min_distance = float(\'inf\') for perm in permutations: current_distance = 0 start = 0 for city in perm: current_distance += distance_matrix[start][city] start = city # Returning to starting city current_distance += distance_matrix[start][0] min_distance = min(min_distance, current_distance) return min_distance # Example use case if __name__ == \\"__main__\\": n = int(input()) distance_matrix = [list(map(int, input().split())) for _ in range(n)] result = tsp(distance_matrix) print(result)"},{"question":"Hannah is a software engineer who loves solving coding challenges. One day, she encounters a problem related to string manipulation. The problem involves rearranging the characters in a given string so that no two adjacent characters are the same. If it\'s not possible to rearrange the characters in such a way, she needs to return an empty string. If there are multiple possible answers, she can return any of them. Input A single line containing a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output A single line containing a rearranged string where no two adjacent characters are the same. If it\'s not possible, return an empty string. Examples Input aab Output aba Input aaab Output \\" Explanation In the first example, \\"aba\\" is a valid rearrangement of \\"aab\\" where no two adjacent characters are the same. In the second example, there\'s no way to rearrange \\"aaab\\" to avoid having two adjacent \\"a\\"s, so the output is an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearrange characters of the input string so that no two adjacent characters are the same. If it\'s not possible, return an empty string. :param s: input string consisting of lowercase English letters :return: rearranged string or an empty string if not possible if not s: return \\"\\" char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # incrementing count as it\'s being used rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"Vladimir is working on a large database and he needs to optimize the storage space used by some arrays. For this, he decided to compress the arrays by removing the redundant elements while maintaining their order. An element is considered redundant if it has already appeared earlier in the array. Help Vladimir by writing a program that compresses such arrays. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) representing the original array. Output Print the compressed array. If the array is empty, print an empty line. Examples Input 8 1 3 2 2 3 1 4 2 Output 1 3 2 4 Input 5 5 5 5 5 5 Output 5 Input 3 10 20 30 Output 10 20 30","solution":"def compress_array(n, arr): Removes redundant elements from the array while maintaining their order of appearance. Parameters: n (int): Size of the array. arr (list of int): Original array. Returns: list of int: Compressed array. seen = set() compressed = [] for num in arr: if num not in seen: compressed.append(num) seen.add(num) return compressed # Example usage: # n = 8 # arr = [1, 3, 2, 2, 3, 1, 4, 2] # compress_array(n, arr)"},{"question":"You are given two strings `s` and `t` of the same length, consisting of lowercase letters. You want to transform string `s` into string `t`. The only operation you can do is to choose any character in `s` and change it to any other character. Your task is to calculate the minimum number of operations required to transform `s` into `t`. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 2·10^5), the length of the strings `s` and `t`. The next line contains the string `s`. The third line contains the string `t`. Output Print a single integer — the minimum number of operations required to transform `s` into `t`. Examples Input 5 abcde cdefg Output 5 Input 3 aaa bbb Output 3 Input 4 abcd abcd Output 0","solution":"def min_operations_to_transform(s, t): Returns the minimum number of operations required to transform string s into string t. Parameters: s (str): Source string t (str): Target string Returns: int: Minimum number of operations if len(s) != len(t): raise ValueError(\\"Strings s and t must be of the same length\\") operations = 0 for ch1, ch2 in zip(s, t): if ch1 != ch2: operations += 1 return operations"},{"question":"Given a string s of length N and an integer Q representing the number of queries. Each query consists of two integers l and r (1 leq l leq r leq N). For each query, reverse the substring s[l-1:r] and print the resulting string. Constraints - 1 leq N leq 10^5 - 1 leq Q leq 500 - 1 leq l leq r leq N - The input string s consists of lowercase English letters only. Input The input is given in the following format: N Q s l_1 r_1 l_2 r_2 ... l_Q r_Q Output For each query, print the string obtained after reversing the specified substring. Example Input 7 3 abcdefg 2 5 3 7 1 4 Output aedcbfg abgfedc dcbaefg","solution":"def reverse_substring_queries(n, q, s, queries): result = [] for l, r in queries: # Convert to 0-based indexing l -= 1 r -= 1 # Reverse the slice in place and combine with the rest of the string reversed_substr = s[:l] + s[l:r+1][::-1] + s[r+1:] result.append(reversed_substr) return result"},{"question":"You are given an array of integers representing the heights of several buildings arranged in a row. The goal is to determine the maximum area of a rectangle formed between the buildings, where the rectangle is confined by the height of the shortest building in the chosen range and spans one or more consecutive buildings. Given the array of building heights, find the maximum area of a rectangle that can be formed using consecutive buildings. Constraints * 1 leq length of heights leq 10^5 * 1 leq heights[i] leq 10^9 Input The input is given from Standard Input in the following format: n h_1 h_2 ... h_n Output Output the maximum area of the rectangle. Examples Input 6 2 1 5 6 2 3 Output 10 Input 4 1 2 3 4 Output 6 Input 5 5 4 3 2 1 Output 9","solution":"def max_area_histogram(heights): Returns the maximum area of rectangle formed using consecutive buildings. stack, max_area = [], 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(n, heights): Wrapper function to read input and return the maximum area. return max_area_histogram(heights)"},{"question":"The IT department is auditing access records to identify suspicious activity. They need to analyze a list of n login attempts and filter out invalid ones. A valid login attempt follows these rules: 1. Email addresses must be valid. An email address is considered valid if it contains exactly one \\"@\\" symbol and the domain after the \\"@\\" symbol contains at least one \\".\\" symbol. 2. Login times must be in the format HH:MM where HH is between 00 and 23 and MM is between 00 and 59. Write a function to filter out invalid login attempts and return the list of valid attempts. Input - n: an integer representing the number of login attempts (1 ≤ n ≤ 105). - A list of n strings, where each string represents a login attempt in the format \\"<email> <time>\\". Output A list of strings representing valid login attempts. Examples Input 3 [ \\"user@example.com 12:34\\", \\"invalid-email@domain 12:34\\", \\"user2@domain.c 99:99\\" ] Output [ \\"user@example.com 12:34\\" ] Input 2 [ \\"user@example.com 23:59\\", \\"another@domain.com@23:59\\" ] Output [ \\"user@example.com 23:59\\" ]","solution":"import re def is_valid_email(email): Checks if an email address is valid based on given criteria. if email.count(\\"@\\") != 1: return False local_part, domain = email.split(\\"@\\") if \\".\\" not in domain: return False return True def is_valid_time(time): Checks if a time is in the valid HH:MM format where HH is between 00 and 23 and MM is between 00 and 59. match = re.match(r\\"^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])\\", time) return match is not None def filter_valid_logins(n, attempts): Filters and returns valid login attempts. valid_attempts = [] for attempt in attempts: email, time = attempt.split() if is_valid_email(email) and is_valid_time(time): valid_attempts.append(attempt) return valid_attempts"},{"question":"You are given an array `A` of integers, and your task is to sort it in non-descending order. However, there\'s a twist: you can only move an element to the beginning or to the end of the array. Write a function `special_sort` that takes the array as input and returns a sorted array following the described operations. # Constraints - 1 ≤ |A| ≤ 10^4 - -10^6 ≤ A[i] ≤ 10^6 # Input The input is given from Standard Input in the following format: ``` N A0 A1 A2 ... AN-1 ``` where `N` is the number of elements in the array, and `A0, A1, A2, ..., AN-1` are the elements of the array. # Output Print the sorted array after performing the described operations. # Examples Input ``` 5 3 1 4 1 5 ``` Output ``` 1 1 3 4 5 ``` Input ``` 6 10 5 -2 0 7 1 ``` Output ``` -2 0 1 5 7 10 ``` **Hint:** Consider using a dequeue (double-ended queue) to achieve this efficiently by moving elements to the appropriate end based on the sorting criteria. Aim for an algorithm with O(N log N) complexity, leveraging the properties of the given constraints.","solution":"from collections import deque def special_sort(A): Sorts the array A using a deque where you can only move an element to the beginning or to the end of the deque. Args: A : list of int : List of integers to be sorted. Returns: list of int : Sorted list of integers. # Create a deque to use for our special sorting. d = deque() # Sort the array normally first. sorted_A = sorted(A) # We will fill the deque with elements from the sorted array. for num in sorted_A: d.append(num) # Convert deque back to list return list(d)"},{"question":"You have inherited an outdated instant messaging system that stores all messages in a single string. Each message is encapsulated between the \'#\' characters. This system has an unintended flaw: sometimes, messages get duplicated and appear consecutively multiple times within the storage string. Your task is to write a program that deduplicates consecutive duplicate messages and encodes the result in a new string. An encoded message string consists of all unique consecutive messages, each encapsulated between the \'#\' characters. Input The first line contains the string of messages encapsulated between \'#\' characters. The total length of this string does not exceed 106 characters. Each message can contain any printable ASCII characters except the \'#\' character. Output Output the deduplicated string of messages, with each unique consecutive message encapsulated between \'#\' characters. Examples Input ``` #hellohelloworldworldhello# ``` Output ``` #helloworldhello# ``` Input ``` #testtesttestexampleexample#text# ``` Output ``` #testexample#text# ``` Note In the first example, the input string `#hellohelloworldworldhello#` is processed to remove consecutive duplicate messages resulting in the output `#helloworldhello#`. In the second example, the input string `#testtesttestexampleexample#text#` is processed to remove consecutive duplicate messages resulting in the output `#testexample#text#`.","solution":"def deduplicate_messages(message_str): Removes consecutive duplicate messages encapsulated between \'#\' characters. if not message_str: return \\"\\" # Split messages by \'#\' and filter out empty strings messages = list(filter(bool, message_str.split(\'#\'))) deduplicated_messages = [] # Deduplicate consecutive duplicate messages previous_message = None for message in messages: if message != previous_message: deduplicated_messages.append(message) previous_message = message # Re-assemble the deduplicated messages in the required format return \'#\' + \'\'.join(deduplicated_messages) + \'#\'"},{"question":"Ravi has a string \\"s\\" consisting of lowercase English letters. He wants to find the smallest lexicographical string that can be obtained by removing exactly one character from the original string \\"s\\". Help Ravi determine this string. Input: The input consists of a single line containing the string \\"s\\" (1 ≤ |s| ≤ 10^5). Output: Print the smallest lexicographical string that can be obtained by removing exactly one character from \\"s\\". Examples: Input: abcd Output: abc Input: cbacd Output: bacd Note: In the first example, by removing the \'d\', the smallest lexicographical string \\"abc\\" is obtained. In the second example, by removing the \'c\', the smallest lexicographical string \\"bacd\\" is obtained.","solution":"def smallest_lexicographical_string(s): min_string = s[1:] # Initial smallest string by removing the first character for i in range(len(s)): # Create a new string by skipping the character at index i current_string = s[:i] + s[i+1:] # Update min_string if a smaller string is found if current_string < min_string: min_string = current_string return min_string"},{"question":"You are given a string that represents a mathematical expression involving addition and subtraction (e.g., \\"3+5-2\\"). Your task is to write a program that evaluates this expression and returns the result as an integer. Input A string `expr` that contains a mathematical expression consisting of digits, plus signs (\'+\'), and minus signs (\'-\'). The expression will not contain any spaces, and it will always be a valid expression. Output An integer representing the result of the evaluated expression. Examples Input \\"3+5-2\\" Output 6 Input \\"10-4+2\\" Output 8","solution":"def evaluate_expression(expr): Evaluate a mathematical expression involving addition and subtraction. :param str expr: The mathematical expression to evaluate. :return: The result of the evaluated expression. :rtype: int return eval(expr)"},{"question":"Shopping Spree You are at a shopping mall with N shops arranged in a row, and you want to purchase some items within a given budget. Each shop has a different price for the same item. You have to visit each shop in the order they appear and decide on buying at most one item from one shop using exactly your budget. If you cannot buy an item exactly equal to your budget from any of the shops, you must buy an item with a price closest to your budget, but does not exceed it. You also have an option of not buying anything if none of the prices are within your budget constraints. Write a function that determines the price you end up paying. If no item can be bought without exceeding the budget, the function should return -1. Input The input consists of: - The first line contains an integer N (1 ≤ N ≤ 100), the number of shops. - The second line contains an integer B (1 ≤ B ≤ 1000), the budget you have. - The third line contains N integers P1, P2, ..., PN (1 ≤ Pi ≤ 1000), representing the prices of the items in each shop. Output Output the price of the item you ended up buying. If no item can be bought within the budget constraints, output -1. Sample Input 6 50 30 40 45 60 55 65 Sample Output 45 Explanation In this example, there are 6 shops with item prices 30, 40, 45, 60, 55, and 65, and you have a budget of 50. The highest price that does not exceed the budget is 45, so the output is 45. Example Input 6 50 30 40 45 60 55 65 Output 45","solution":"def shopping_spree(N, B, prices): Determine the price end up paying within the given budget. If no item can be bought without exceeding the budget, return -1. :param N: Number of shops :param B: Budget :param prices: List of prices at each shop :return: Price paid or -1 if no item can be bought within the budget closest_price = -1 for price in prices: if price == B: return B elif price < B and (closest_price == -1 or price > closest_price): closest_price = price return closest_price"},{"question":"You are given a grid of size n × m where each cell contains one of the following characters: \'.\' (empty), \'#\' (blocked), or \'S\' (starting point). Your task is to determine whether there is a path from the starting point to any edge of the grid using only horizontal and vertical movements. A path can only traverse through empty cells (\'.\') and the starting point (\'S\'). The path cannot go through blocked cells (\'#\'). Input The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns of the grid, respectively. Each of the next n lines contains a string of length m consisting of characters \'.\', \'#\', and \'S\'. There will be exactly one \'S\' in the grid. Output Print \\"Yes\\" if there is a path from the starting point \'S\' to any edge of the grid. Otherwise, print \\"No\\". Examples Input 3 3 # #S# # Output No Input 4 5 ..#.. ..#S. ... ..... Output Yes Input 3 3 S.. .#. ..# Output Yes Note In the first example, the \'S\' is completely surrounded by blocked cells (\'#\'), so there is no path to any edge. In the second example, there is a path to the lower edge of the grid by moving down from \'S\'. In the third example, the starting point \'S\' has a direct path to the left edge of the grid.","solution":"def is_path_to_edge(grid, n, m): from collections import deque def get_neighbors(x, y): neighbors = [] if x > 0: neighbors.append((x - 1, y)) if x < n - 1: neighbors.append((x + 1, y)) if y > 0: neighbors.append((x, y - 1)) if y < m - 1: neighbors.append((x, y + 1)) return neighbors # Locate the start point \'S\' start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) break if start: break if not start: return \\"No\\" queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() # Check if we are at the edge if x == 0 or x == n - 1 or y == 0 or y == m - 1: return \\"Yes\\" for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited and (grid[nx][ny] == \'.\' or grid[nx][ny] == \'S\'): visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"In an increasingly connected world, networks are crucial in many systems, including computer science, biology, and social networks. Given an undirected graph, you are to identify cycles within that network. A cycle is a path of edges and vertices that starts and ends at the same vertex with no other repeats of vertices and edges. Input The first line of input contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of vertices, and an integer M, the number of edges. The next M lines contain two integers u and v each, representing an edge between vertex u and vertex v. Output For each test case, output \\"YES\\" if there is at least one cycle in the graph. Otherwise, output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1)/2 1 ≤ u, v ≤ N u ≠ v Example Input: 3 3 3 1 2 2 3 3 1 4 2 1 2 3 4 5 4 1 2 2 3 3 4 4 1 Output: YES NO YES Explanation: Case 1: The graph has a cycle (1-2-3-1). Case 2: The graph is disconnected and has no cycle. Case 3: The graph has a cycle (1-2-3-4-1).","solution":"def has_cycle(n, edges): Detects cycles in an undirected graph using Union-Find (Disjoint Set Union) algorithm. :param n: Number of vertices in the graph. :param edges: List of edges in the graph. :return: Return \\"YES\\" if there\'s at least one cycle, otherwise \\"NO\\". parent = list(range(n)) rank = [0] * n def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 return False return True for u, v in edges: if union(u, v): return \\"YES\\" return \\"NO\\" def detect_cycles_in_graphs(t, test_cases): results = [] for n, m, edges in test_cases: results.append(has_cycle(n, edges)) return results"},{"question":"In a faraway kingdom, there exists a mysterious plant called the FibonacciTree. This tree exhibits an unusual pattern in its growth: starting from the second year, its height follows the Fibonacci sequence. The scientists in the kingdom discovered that the tree\'s height in the nth year grows according to the formula H(n) = H(n-1) + H(n-2), where H(1) = 1 meter and H(2) = 1 meter. However, due to some magical influence, its initial height in the first year, H(0), is also 1 meter. The royal botanist department has been tasked to predict the height of the FibonacciTree in various years. They need your help to compute the height for a given year. Given the year n (0 ≤ n ≤ 1,000,000), output the height of the FibonacciTree in that year. Input The first line contains a single integer t (1 ≤ t ≤ 1,000) — the number of test cases. Each of the following t lines contains a single integer n (0 ≤ n ≤ 1,000,000) — the year for which the FibonacciTree height needs to be computed. Output For each test case, output a single integer — the height of the FibonacciTree in the nth year. Example Input 3 0 5 1000000 Output 1 8 (Height for the 1,000,000th year) Note In the example above: - In the 0th year, the height is 1 meter. - In the 5th year, the height is 8 meters (the sequence is 1, 1, 2, 3, 5, 8). - The height for the 1,000,000th year needs to be computed using efficient algorithms due to its large size. The Fibonacci sequence grows rapidly, so for very large values of n, utilize optimized algorithms such as matrix exponentiation or Fast Doubling to compute the result efficiently.","solution":"def fibonacci_height(n): Compute the height of the FibonacciTree in the nth year using an efficient algorithm to handle large values of n. # Use matrix exponentiation for efficient Fibonacci calculation def matrix_mult(A, B): return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] def matrix_pow(matrix, exp): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while exp > 0: if exp % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) exp //= 2 return result if n == 0: return 1 elif n == 1 or n == 2: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n - 1) return result[0][0] def heights_for_years(t, years): result = [] for year in years: result.append(fibonacci_height(year)) return result"},{"question":"A painter needs to paint a fence with n posts using k colors. He can paint each post with one of the k colors, but he must not paint three consecutive posts with the same color. Given n and k, find the number of ways to paint the fence, modulo 1000000007 (10^9 + 7). Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of fence posts and the number of colors. Output Print a single number — the number of ways to paint the fence modulo 1000000007. Examples Input 3 2 Output 6 Input 4 3 Output 66 Note Consider the first example. Let us number the fence posts from 1 to 3 and the colors from A to B. The valid ways to paint the fence are: * A B A * A B B * B A B * B A A * A A B * B B A Similarly, for the second example, there are 66 ways to paint a fence of 4 posts with 3 colors such that no three consecutive posts are of the same color.","solution":"def num_ways_to_paint_fence(n, k): MOD = 1000000007 if n == 0: return 0 if n == 1: return k same = k diff = k * (k - 1) for i in range(3, n + 1): prev_diff = diff diff = (same + diff) * (k - 1) % MOD same = prev_diff return (same + diff) % MOD"},{"question":"Given an array of N integers, write a function to find a subarray that has the largest sum among all subarrays. A subarray is a contiguous part of an array. Input The first line contains a single integer N, which represents the number of integers. The second line contains N space-separated integers which represent the elements of the array. Output Output the largest sum of the subarray. Constraints 1 ≤ N ≤ 10^5 -10^9 ≤ Ai ≤ 10^9 Example: Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The subarray [4, -1, 2, 1] has the largest sum 6.","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the input array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given two positive integers a and b. Your task is to find the greatest common divisor (GCD) and least common multiple (LCM) of these two numbers. The greatest common divisor of two integers a and b is the largest integer that divides both a and b without leaving a remainder. The least common multiple of two integers a and b is the smallest integer that is a multiple of both a and b. Write a program that computes both the GCD and LCM for multiple pairs of integers. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of test cases. The following n lines contain two integers each: ai and bi (1 ≤ ai, bi ≤ 10^9) describing the i-th test case. Output For each test case, print two integers, the GCD and the LCM of ai and bi. Example Input 3 12 15 7 3 1000000000 999999999 Output 3 60 1 21 1 999999999000000000","solution":"import math def gcd_and_lcm_pairs(n, pairs): results = [] for a, b in pairs: gcd = math.gcd(a, b) lcm = (a * b) // gcd results.append((gcd, lcm)) return results"},{"question":"A programming language has only one type of list structure, a singly linked list, which is characterized by each node pointing to the next node in the list. Write a function that will remove every even-indexed node from a given singly linked list. Your task is to implement the function `remove_even_indexed_nodes(head)`, where `head` is the first node of the singly linked list. The function should return the head of the new list after the removal of all even-indexed nodes. # Input - The function will receive the `head` node of the singly linked list, where each node is an object with a `value` attribute (an integer) and a `next` attribute (pointing to the next node in the list or `None` if it is the last node) - The length of the linked list will be in the range 1 to 10^4 # Output - The function should return the head node of the new list which has all the initial nodes with even indices removed. # Example Given the linked list: ``` head -> 1 -> 2 -> 3 -> 4 -> 5 ``` The function should transform it to: ``` head -> 2 -> 4 ``` Function signature: ```python def remove_even_indexed_nodes(head: ListNode) -> ListNode: ``` Where `ListNode` is defined as: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` # Note - Node indices are zero-based, meaning the first node is at index 0, the second node at index 1, and so on. - Removing nodes does not mean setting their value to `None`; it means the nodes should no longer be part of the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_even_indexed_nodes(head): if not head or not head.next: return None dummy = ListNode(0) # Create a dummy node to manage the head easily dummy.next = head current = dummy index = 0 while current and current.next: if index % 2 == 0 and current.next: current.next = current.next.next else: current = current.next index += 1 return dummy.next"},{"question":"Polycarp wants to paint a segment of his fence. The fence consists of `n` vertical sections, each with a certain height. Each section can be painted with one of `m` colors. A segment of the fence is defined as a consecutive sequence of sections. Polycarp considers a segment beautiful if the number of different colors used in the segment is at most `k`. He wants to know how many beautiful segments of his fence exist. Input - The first line contains three integers `n`, `m`, and `k` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5, 1 ≤ k ≤ m) — the number of sections, the number of available colors, and the maximum number of different colors in a beautiful segment. - The second line contains `n` integers `c_1, c_2, ..., c_n` (1 ≤ c_i ≤ m) — the colors of the sections of the fence. Output - Print one integer — the number of beautiful segments. Examples Input ``` 5 3 2 1 2 1 2 3 ``` Output ``` 12 ``` Input ``` 4 4 1 1 2 3 4 ``` Output ``` 4 ``` Note In the first example, the beautiful segments are: - [1] - [2] - [1] - [2] - [3] - [1, 2] - [2, 1] - [1, 2] - [2, 3] - [1, 2, 1] - [2, 1, 2] - [1, 2] In the second example, the beautiful segments are: - [1] - [2] - [3] - [4]","solution":"def count_beautiful_segments(n, m, k, colors): Counts the number of beautiful segments in the fence. Args: - n (int): Number of sections. - m (int): Number of available colors. - k (int): Maximum number of different colors in a beautiful segment. - colors (list of int): List of colors of the fence sections. Returns: - int: Number of beautiful segments. from collections import defaultdict left = 0 color_count = defaultdict(int) different_colors = 0 beautiful_segments = 0 for right in range(n): if color_count[colors[right]] == 0: different_colors += 1 color_count[colors[right]] += 1 while different_colors > k: color_count[colors[left]] -= 1 if color_count[colors[left]] == 0: different_colors -= 1 left += 1 beautiful_segments += (right - left + 1) return beautiful_segments"},{"question":"Yuri has many books arranged in a single row in his bookshelf, and each book is assigned a numerical rating based on its content. Yuri wants to maximize his learning by reading a contiguous segment of books with the highest sum of ratings. Given the number of books n and their respective ratings in the order they are placed on the shelf, your task is to help Yuri find the maximum sum of ratings he can achieve by reading a contiguous segment of books. Input The first line contains a positive integer n (1 ≤ n ≤ 100), which represents the number of books. The second line contains n integers separated by spaces, representing the ratings of the books, where each rating is an integer between -100 and 100. Output Print a single integer representing the maximum sum of ratings for any contiguous segment of books. Examples Input 5 3 -2 5 -1 2 Output 7 Input 8 -7 2 3 -6 4 5 -1 6 Output 14 Input 3 -1 -2 -3 Output -1 Note In the first example, reading the segment containing the books with ratings [3, -2, 5, -1, 2] provides the maximum sum, which is 7. In the second example, the segment containing the books with ratings [4, 5, -1, 6] provides the maximum sum, which is 14. In the third example, the maximum sum segment is simply the book with the highest rating, which is -1.","solution":"def max_segment_sum(n, ratings): Returns the maximum sum of ratings for any contiguous segment of books. max_sum = ratings[0] current_sum = ratings[0] for r in ratings[1:]: current_sum = max(r, current_sum + r) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You have an array of n integers where each element represents the height of a building. The buildings form a skyline viewed from one side. You are required to find the maximum number of buildings that can be seen from that side. A building can be seen if: 1. It is the first building in the array. 2. It is taller than all the buildings before it. Write a function that takes an integer array representing the heights of buildings and returns the maximum number of buildings that can be seen. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains n space-separated integers, each representing the height of a building. The heights are guaranteed to be positive integers. Output - Print a single integer, the maximum number of buildings that can be seen. Example Input 5 3 1 4 5 2 Output 3 Explanation: The buildings with heights 3, 4 and 5 can be seen.","solution":"def max_visible_buildings(buildings): Returns the maximum number of buildings that can be seen from one side. if not buildings: return 0 max_height = 0 visible_count = 0 for height in buildings: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Alice is training for a marathon and she wants to calculate the maximum distance she can run in a given time interval. She has a list of possible running speeds she might maintain each hour and wants to ensure she does not exceed the total time available. Help Alice determine the maximum distance she can cover within the total time limit. Input The first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 1000), where n is the number of different speeds and t is the total time in hours. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), where si is the ith possible speed in kilometers per hour. Output Output a single integer representing the maximum distance Alice can run in the given time. Examples Input 5 10 5 8 2 6 3 Output 80 Input 3 7 10 15 7 Output 105 Explanation In the first example, the maximum speed is 8 km/h. If Alice runs at this speed for the entire 10 hours, she will cover 8 * 10 = 80 kilometers. In the second example, the maximum speed is 15 km/h. If Alice runs at this speed for the entire 7 hours, she will cover 15 * 7 = 105 kilometers.","solution":"def max_distance(n, t, speeds): Given the number of speeds, total time, and list of speeds, determine the maximum distance Alice can run. max_speed = max(speeds) return max_speed * t"},{"question":"Write a program that reads a single string S from the input, representing a time period in the `HH:MM:SS` format, where `HH` is the hour, `MM` is the minutes, and `SS` is the seconds. Your task is to convert this time period into its equivalent number of seconds and print it. Constraints * The string S is always in the format `HH:MM:SS`. * `HH` is an integer between 00 and 23 inclusive. * `MM` is an integer between 00 and 59 inclusive. * `SS` is an integer between 00 and 59 inclusive. Input Input is given from Standard Input in the following format: S Output Print the number of seconds equivalent to the input time period. Examples Input 01:00:00 Output 3600 Input 00:45:30 Output 2730","solution":"def time_to_seconds(S): Convert a time period given in \'HH:MM:SS\' format to its equivalent number of seconds. hours, minutes, seconds = map(int, S.split(\':\')) total_seconds = hours * 3600 + minutes * 60 + seconds return total_seconds"},{"question":"You are given a reactangular grid with integer coordinates. You start at coordinate (0,0) and any point (x, y) where x and y are positive integers is accessible. You want to find the smallest number of steps required to reach a point (a, b) using only up, right, and diagonal moves. A diagonal move allows you to move from a point (x, y) to (x+1, y+1). Constraints * 0 <= a, b <= 1000 Input a and b Output Print the minimum number of steps required to reach (a, b) from (0, 0). Examples Input 3 3 Output 3 Input 2 5 Output 5","solution":"def min_steps_to_target(a, b): Returns the minimum number of steps required to reach (a, b) from (0, 0) using only up, right, and diagonal moves. return max(a, b)"},{"question":"Alice loves to play with sequences. She has recently come across a sequence defined as follows: - For each positive integer ( n ), the sequence ( S(n) ) is the maximum difference between any two elements of the unopened doors (represented by 1\'s) if we open exactly ( k ) doors (represented by 0\'s). Alice is curious to find out the value of ( S(n) ) for different values of ( n ) when exactly ( k ) doors are opened. Input The first line contains an integer ( t ) ((1 leq t leq 10^5)), the number of test cases. Each of the next ( t ) lines contains two integers ( n ) and ( k ) ((1 leq k leq n leq 10^6)), denoting the number of doors and the number of doors that are opened respectively. Output For each test case, print the value of ( S(n) ) on a separate line. Example Input 5 10 3 5 2 6 1 15 5 7 2 Output 6 3 5 9 4","solution":"def find_max_difference(n, k): Given n doors and k opened doors, computes the maximum difference between any two unopened doors. # If we open k doors, the S(n) will be the difference between the first unopened # door and the last unopened door. return n - k def process_test_cases(test_cases): results = [] for n, k in test_cases: results.append(find_max_difference(n, k)) return results # Example usage: t = 5 test_cases = [ (10, 3), (5, 2), (6, 1), (15, 5), (7, 2), ] output = process_test_cases(test_cases) for result in output: print(result)"},{"question":"Given a series of operations on integers, your task is to calculate the result after performing each operation sequentially. Each operation can be one of the following: 1. Add an integer to an existing integer. 2. Subtract an integer from an existing integer. 3. Multiply an integer with an existing integer. 4. Divide an integer by an existing integer. Divisions should be integer divisions, meaning you should use floor division where the result is truncated to the largest integer less than or equal to the division result. # Input - The first line contains a single integer, `N` (1 ≤ N ≤ 10^5), the total number of operations to be performed. - The following `N` lines each represent an operation in the format: `operation_type operand1 operand2`. Where: - `operation_type` is one of the four operations (\'add\', \'sub\', \'mul\', \'div\'). - `operand1` and `operand2` are the integers on which the operation is performed (−10^9 ≤ operand1, operand2 ≤ 10^9). # Output - Output `N` lines, each containing the result of the corresponding operation after it is performed. # Example Input: ``` 4 add 3 7 sub 10 4 mul 6 5 div 20 3 ``` Output: ``` 10 6 30 6 ``` # Explanation: - The first operation is adding 3 and 7, giving 10. - The second operation is subtracting 4 from 10, giving 6. - The third operation is multiplying 6 by 5, giving 30. - The fourth operation is dividing 20 by 3, giving 6 (integer division).","solution":"def perform_operations(N, operations): Perform a series of operations and return the results. Parameters: N (int): Number of operations. operations (list of tuples): Each tuple contains (\'operation_type\', operand1, operand2). Returns: list: List of results from each operation. results = [] for operation in operations: op_type, operand1, operand2 = operation if op_type == \'add\': results.append(operand1 + operand2) elif op_type == \'sub\': results.append(operand1 - operand2) elif op_type == \'mul\': results.append(operand1 * operand2) elif op_type == \'div\': results.append(operand1 // operand2) return results"},{"question":"problem You are given an n x m grid representing a field. Each cell in the grid contains either a 1 or a 0. A cell with 1 represents an obstacle and a cell with 0 represents an open space. You can move up, down, left, or right from any open cell to another open cell. Your task is to calculate the minimum distance required to get from the top-left corner of the grid to the bottom-right corner of the grid. If it is not possible to reach the bottom-right corner, return -1. # Input Format - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next n lines each contain m integers (either 0 or 1), representing the grid. # Output Format - Print a single integer, the minimum distance from the top-left corner of the grid to the bottom-right corner. If it is not possible to reach the bottom-right corner, print -1. # Examples Example 1 Input: ``` 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 ``` Output: ``` 8 ``` Example 2 Input: ``` 5 5 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 0 ``` Output: ``` -1 ```","solution":"from collections import deque def min_distance(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == 0: queue.append((new_row, new_col, dist + 1)) visited[new_row][new_col] = True return -1"},{"question":"Given a large text field, your task is to identify and count all unique words that appear at least k times, where k is an input value. A word is defined as a sequence of alphabetic characters, and words are case-insensitive (i.e., \\"Hello\\" and \\"hello\\" are considered the same word). Non-alphabetic characters (like numbers, punctuation, etc.) should be ignored. Words are separated by spaces or non-alphabetic characters. Input The first line contains the integer k (1 ≤ k ≤ 1000), which specifies the minimum number of occurrences for a word to be considered. The second line contains the text in which to count the words. The length of the text doesn\'t exceed 10^6 characters. Output Print the count of unique words that appear at least k times in the input text. Example Input 2 Hello, world! Hello... Output 1 Input 3 This is a test. This test is only a test. Output 1","solution":"import re from collections import Counter def count_words_at_least_k_times(k, text): Counts the unique words that appear at least k times in the text. Args: k (int): The minimum number of occurrences for a word to be considered. text (str): The text in which to count the words. Returns: int: The count of unique words that appear at least k times. # Use regex to find all words (case-insensitive) words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) # Count the frequency of each word word_count = Counter(words) # Count words that appear at least k times result = sum(1 for count in word_count.values() if count >= k) return result"},{"question":"Barry is getting into gardening and wants to plant flowers in a row of pots, minimizing the number of pots used while maximizing the beauty of his garden. Each type of flower has a beauty score associated with it. Barry has n different types of flowers, and he wants to plant at least m different types in a row of pots. However, there can only be at most t different types of flowers in a row. Given the beauty scores and the constraints, Barry needs your help to determine the maximum possible beauty score he can achieve for his row. Input The first line of the input contains three space-separated integers n, m, t (1 ≤ m ≤ t ≤ n ≤ 1000). The second line contains n space-separated integers b1, ..., bn (1 ≤ bi ≤ 104), representing the beauty score of each flower type. Output Output the maximum possible beauty score. Examples Input 5 2 3 10 20 30 40 50 Output 120 Input 4 3 4 10 15 10 20 Output 55 Input 6 4 4 5 10 15 20 25 30 Output 90 Input 3 1 2 1 100 1000 Output 1100 Input 8 5 6 3 6 2 8 6 3 4 7 Output 34","solution":"def max_beauty_score(n, m, t, beauties): Returns the maximum possible beauty score. n: int - number of different types of flowers. m: int - minimum number of different types of flowers in a row. t: int - maximum number of different types of flowers in a row. beauties: List[int] - list of beauty scores for each flower type. # Sort the beauty scores in descending order beauties.sort(reverse=True) # Sum up the top \'t\' beauty scores return sum(beauties[:t])"},{"question":"In a faraway land, there is a peculiar kingdom named Arithmopolis where mathematical puzzles are a part of daily life. The kingdom consists of various cities connected in a hierarchical tree structure. Each city is labeled uniquely with integers from 1 to N, and the city 1 is the capital city, i.e., the root of the tree. The King of Arithmopolis wants to build new communication towers in some of the cities. He has already decided which cities will get the towers, but now he needs your help to calculate the total communication cost. The cost is the sum of the shortest paths between every pair of selected cities. You are given the list of cities where the towers will be installed. Your task is to compute the total communication cost based on the shortest paths in the tree. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N (number of cities) and M (number of cities with towers), respectively. The next N-1 lines contain two space-separated integers u and v indicating a direct road between city u and city v. The next line contains M integers representing the cities where the towers will be installed. Output For each test case, output a single line containing the total communication cost between all pairs of cities with towers. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 100,000 2 ≤ M ≤ 100,000 1 ≤ u, v ≤ N Example Input: 1 7 3 1 2 1 3 2 4 2 5 3 6 3 7 4 5 6 Output: 10 Explanation In the given example, the tree structure is: ``` 1 / 2 3 / / 4 5 6 7 ``` The cities with towers are 4, 5, and 6. The total communication cost is: - Distance between 4 and 5 is 2. - Distance between 4 and 6 is 4. - Distance between 5 and 6 is 4. Thus, the output is 2 + 4 + 4 = 10.","solution":"def dfs(node, parent, depth, adj, depth_map, parent_map): depth_map[node] = depth parent_map[node] = parent for neighbor in adj[node]: if neighbor != parent: dfs(neighbor, node, depth + 1, adj, depth_map, parent_map) def calculate_lca(u, v, depth_map, parent_map): if depth_map[u] < depth_map[v]: u, v = v, u while depth_map[u] > depth_map[v]: u = parent_map[u] while u != v: u = parent_map[u] v = parent_map[v] return u def shortest_path(u, v, depth_map, parent_map): lca = calculate_lca(u, v, depth_map, parent_map) return depth_map[u] + depth_map[v] - 2 * depth_map[lca] def total_communication_cost(trees, towers): results = [] for i in range(len(trees)): N, M, edges, tower_cities = trees[i] adj = [[] for _ in range(N + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) depth_map = [0] * (N + 1) parent_map = [0] * (N + 1) dfs(1, -1, 0, adj, depth_map, parent_map) cost = 0 for j in range(M): for k in range(j + 1, M): cost += shortest_path(tower_cities[j], tower_cities[k], depth_map, parent_map) results.append(cost) return results def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 trees = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 edges = [] for _ in range(N - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 tower_cities = [] for _ in range(M): tower_cities.append(int(data[index])) index += 1 trees.append((N, M, edges, tower_cities)) results = total_communication_cost(trees, tower_cities) for result in results: print(result) # Example usage (Uncomment for running the solution through standard input): # if __name__ == \\"__main__\\": # solve()"},{"question":"**Matrix Diagonal Sum** Alex is practicing matrix manipulation and wants to find the sum of the elements of the main diagonal of a square matrix. Write a program that takes a square matrix as input and returns the sum of the elements of its main diagonal (the diagonal that runs from the top-left to the bottom-right). **Input:** - The first line contains a single integer `n` (2 <= n <= 10), the size of the matrix. - The next `n` lines each contain `n` integers, representing the matrix elements. **Output:** - Output a single integer, the sum of the elements of the main diagonal. **Example:** Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 15 ``` Explanation: The main diagonal elements are 1, 5, and 9. The sum is 1 + 5 + 9 = 15.","solution":"def matrix_diagonal_sum(matrix): Returns the sum of the main diagonal elements of a square matrix. Parameters: matrix (list of list of int): The square matrix. Returns: int: The sum of the main diagonal elements. n = len(matrix) diagonal_sum = sum(matrix[i][i] for i in range(n)) return diagonal_sum"},{"question":"You are organizing a secret Santa gift exchange for your office. There are a total of n employees, and each employee is supposed to gift another randomly assigned employee. However, there are a few constraints: 1. No employee can be assigned to gift themselves. 2. Each employee should both give and receive exactly one gift. You need to write a program to simulate this Secret Santa assignment. Input The first line contains an integer n (3 ≤ n ≤ 1000) — the number of employees. Output Print a permutation of numbers from 1 to n representing the assigned Secret Santa such that the i-th employee (1 ≤ i ≤ n) gives a gift to the person represented by the i-th number in the permutation. Ensure that no employee is assigned to themselves. Examples Input 5 Output 2 3 4 5 1 Input 4 Output 2 1 4 3","solution":"import random def generate_secret_santa(n): Generate a secret santa assignment such that no employee is assigned to themselves. if n < 3 or n > 1000: raise ValueError(\\"Number of employees must be between 3 and 1000.\\") employees = list(range(1, n + 1)) while True: random.shuffle(employees) if all(i + 1 != employees[i] for i in range(n)): break return employees"},{"question":"You are given a list of items each with a price and you have a specific budget. The goal is to determine the maximum number of items you can buy without exceeding your budget. However, there\'s a twist: you must purchase exactly one item from each of several provided categories. If it\'s not possible to buy one item from each category without exceeding the budget, you should return \\"Not Possible\\". Input: - First line contains an integer T, the number of test cases. - Each test case starts with an integer B, the budget. - Then a series of lines for each test case follows: - The first integer C, the number of categories. - The next C lines each start with an integer N, the number of items in the category, followed by N integers representing the prices of the items in that category. Output: For each test case, print the maximum number of items you can buy without exceeding the budget or \\"Not Possible\\" if it\'s impossible to buy one item from each category without exceeding the budget. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ B ≤ 10^9 - 1 ≤ C ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Price of each item ≤ 10^6 SAMPLE INPUT 2 50 3 2 10 20 3 5 30 40 2 15 25 80 2 3 30 20 50 2 10 70 SAMPLE OUTPUT 3 2","solution":"def max_items_with_budget(test_cases): results = [] for B, categories in test_cases: min_costs = [] for items in categories: min_cost = min(items) min_costs.append(min_cost) total_min_cost = sum(min_costs) if total_min_cost <= B: results.append(len(categories)) else: results.append(\\"Not Possible\\") return results def process_input(input): lines = input.strip().split(\\"n\\") T = int(lines.pop(0)) test_cases = [] index = 0 for _ in range(T): B = int(lines[index]) C = int(lines[index + 1]) categories = [] index += 2 for _ in range(C): category_data = list(map(int, lines[index].split())) items = category_data[1:] categories.append(items) index += 1 test_cases.append((B, categories)) return test_cases"},{"question":"Recently, Taro has learned about data structures and is intrigued by heaps. He has started to experiment with heaps and wants to solve some problems using heaps. He came up with a simple task and needs your help to implement it. He has an array b of n positive integers. Taro wants to form a max-heap using all the elements of this array and then perform q operations on it. Each operation can be one of the following types: 1. Insert a given integer k into the heap. 2. Remove the maximum element from the heap. Write a program to help Taro manage the heap and perform the given operations efficiently. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the size of the array b and the number of operations, respectively. - The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the elements of the array. - Each of the next q lines contains either: - a single integer query of the form `1 k` (1 ≤ k ≤ 10^9), which represents inserting the integer k into the heap. - the integer `2`, which represents removing the maximum element from the heap. Output: - For each operation of type `2`, output the maximum element that was removed from the heap. If there are no elements in the heap at the time of the removal operation, output `-1`. Example: Input: 6 5 10 20 15 30 40 50 1 35 2 2 1 25 2 Output: 50 40 35 Note: In the given example, initially, the array is `[10, 20, 15, 30, 40, 50]` and the max-heap formed is: ``` 50 / 40 15 / / 10 30 20 ``` The operations are as follows: 1. Insert 35: `[50, 40, 15, 30, 20, 10, 35]` ``` 50 / 40 35 / / 10 30 20 15 ``` 2. Remove max: `50` 3. Remove max: `40` 4. Insert 25: `[35, 30, 25, 15, 10, 20]` ``` 35 / 30 25 / / 15 10 20 ``` 5. Remove max: `35`","solution":"import heapq def manage_heap(n, q, b, operations): # Convert b to a max-heap by negating the elements (heapq in Python is a min-heap by default) max_heap = [-x for x in b] heapq.heapify(max_heap) results = [] for op in operations: if op[0] == 1: # Insert operation, insert the negated k to maintain the max-heap property heapq.heappush(max_heap, -op[1]) elif op[0] == 2: # Remove the maximum element if max_heap: max_element = -heapq.heappop(max_heap) results.append(max_element) else: results.append(-1) return results"},{"question":"A company has a database with a large number of user records. Each record is represented as a dictionary with the keys \\"id\\", \\"name\\", and \\"age\\". The company wants to categorize users based on their age into three groups: \\"Child\\" for ages 0-17, \\"Adult\\" for ages 18-64, and \\"Senior\\" for ages 65 and above. Write a function `categorize_users` that takes a list of user records and returns a dictionary with three keys: \\"Child\\", \\"Adult\\", and \\"Senior\\". Each key should map to a list of user records sorted by their \'id\' in ascending order. Input - A list of dictionaries, where each dictionary represents a user record with the following keys: - \\"id\\": an integer representing the user\'s unique ID. - \\"name\\": a string representing the user\'s name. - \\"age\\": an integer representing the user\'s age. Output - A dictionary with three keys: \\"Child\\", \\"Adult\\", and \\"Senior\\". Each key maps to a list of user records with their \'id\' in ascending order. Example Input [ {\\"id\\": 2, \\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"id\\": 1, \\"name\\": \\"Bob\\", \\"age\\": 12}, {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 65} ] Output { \\"Child\\": [{\\"id\\": 1, \\"name\\": \\"Bob\\", \\"age\\": 12}], \\"Adult\\": [{\\"id\\": 2, \\"name\\": \\"Alice\\", \\"age\\": 30}], \\"Senior\\": [{\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 65}] } Note - The input may contain any number of user records, but each user record will always have an \\"id\\", \\"name\\", and \\"age\\". - Ensure that the output lists for each category are sorted by the \\"id\\" in ascending order.","solution":"def categorize_users(users): Categorizes users based on their age into three groups: \\"Child\\", \\"Adult\\", \\"Senior\\". Args: users (list): A list of dictionaries, where each dictionary represents a user record with keys \\"id\\", \\"name\\", and \\"age\\". Returns: dict: A dictionary with three keys: \\"Child\\", \\"Adult\\", \\"Senior\\". Each key maps to a list of user records sorted by their \'id\' in ascending order. categories = {\\"Child\\": [], \\"Adult\\": [], \\"Senior\\": []} for user in users: if user[\\"age\\"] >= 0 and user[\\"age\\"] <= 17: categories[\\"Child\\"].append(user) elif user[\\"age\\"] >= 18 and user[\\"age\\"] <= 64: categories[\\"Adult\\"].append(user) elif user[\\"age\\"] >= 65: categories[\\"Senior\\"].append(user) for category in categories: categories[category] = sorted(categories[category], key=lambda x: x[\'id\']) return categories"},{"question":"You are given a city with an N x N grid of intersections. Each intersection is represented by a point (x, y). Some intersections are blocked and cannot be traversed. You want to count the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) that do not traverse any of the blocked intersections. You can only move to the right or down at each step. Write a program to determine the number of unique paths from the top-left to the bottom-right, given that certain intersections are blocked. Input The input is given in the following format. N K x1 y1 x2 y2 ... xK yK N (1 ≤ N ≤ 100) is the size of the grid, and K (0 ≤ K ≤ 100) is the number of blocked intersections. Each of the next K lines contains two integers xi yi (0 ≤ xi, yi < N) representing the coordinates of a blocked intersection in the grid. Output Output a single integer representing the number of unique paths from the top-left to the bottom-right corner of the grid, avoiding blocked intersections. If no path exists, output 0. Examples Input 3 1 1 1 Output 2 Input 3 2 1 1 1 0 Output 1 Input 3 0 Output 6","solution":"def unique_paths_blocked(N, K, blocked_points): Determines the number of unique paths from the top-left to the bottom-right corner of an NxN grid, avoiding blocked intersections. N: int - Size of the grid K: int - Number of blocked intersections blocked_points: list of tuples - List of coordinates of blocked intersections Returns: int - Number of unique paths from (0, 0) to (N-1, N-1) if N == 0: return 0 dp = [[0] * N for _ in range(N)] # Convert blocked points to a set for O(1) access blocked_points_set = set(blocked_points) # If start or end is blocked, no paths exist if (0, 0) in blocked_points_set or (N-1, N-1) in blocked_points_set: return 0 # Initialize dp array dp[0][0] = 1 # Fill dp array for i in range(N): for j in range(N): if (i, j) in blocked_points_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[N-1][N-1]"},{"question":"Bob has a list of integers and he loves to play with it by making changes and performing queries on it. He needs your help with two types of operations on his list: 1. Find the sum of all elements in a particular subarray. 2. Update an element in the list at a specific index. Let\'s define the task more precisely: **Input** The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the list and the number of queries, respectively. The second line contains n integers – the initial elements of the list a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). The following q lines contain the queries. Each query is one of the following two types: 1. \\"1 l r\\" (1 ≤ l ≤ r ≤ n) - Find the sum of the elements in the subarray from index l to r (both inclusive). 2. \\"2 x y\\" (1 ≤ x ≤ n and -10^9 ≤ y ≤ 10^9) - Update the element at index x to the value y. **Output** For each query of the first type, print a single integer — the sum of the elements in the corresponding subarray. **Examples** Input 6 5 1 2 3 4 5 6 1 1 3 1 2 4 2 3 10 1 1 3 1 3 6 Output 6 9 13 25 **Explanation** The initial list is [1, 2, 3, 4, 5, 6]. The queries are processed as follows: 1. Find the sum of elements from index 1 to 3: 1 + 2 + 3 = 6 2. Find the sum of elements from index 2 to 4: 2 + 3 + 4 = 9 3. Update element at index 3 to 10: [1, 2, 10, 4, 5, 6] 4. Find the sum of elements from index 1 to 3: 1 + 2 + 10 = 13 5. Find the sum of elements from index 3 to 6: 10 + 4 + 5 + 6 = 25","solution":"def process_queries(n, q, array, queries): Processes the queries on the list. Args: n (int): The number of elements in the list. q (int): The number of queries. array (list of int): The initial list of elements. queries (list of tuples): The list of queries. Returns: list of int: The result of the queries where sum is calculated. result = [] for query in queries: if query[0] == 1: # Query of type 1: sum of subarray from index query[1] to query[2] l, r = query[1] - 1, query[2] - 1 # Convert to 0-based index result.append(sum(array[l:r+1])) elif query[0] == 2: # Query of type 2: update element at index query[1] to query[2] x, y = query[1] - 1, query[2] # Convert to 0-based index array[x] = y return result"},{"question":"In a country, there are n roads and m junctions. Each road connects exactly two junctions, and no two roads connect the same pair of junctions. Unfortunately, the roads are one-way, so it is possible that you can travel from junction A to junction B, but not from junction B to junction A. The government has decided to improve the road system to make navigation easier. They want to install directional signs at some junctions to indicate the direction to every other junction. A directional sign at a junction J shows the direction to travel to reach every other junction from J as efficiently as possible. Your task is to determine the minimum number of directional signs that need to be installed so that from each junction with a sign, it\'s possible to determine the direction to every other junction that is reachable from it. Input The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000). Each of the following n lines contains two integers u and v (1 ≤ u, v ≤ m), meaning that there is a one-way road from junction u to junction v. Output Print a single integer — the minimum number of signs required. Examples Input 5 5 1 2 2 3 3 4 4 5 1 5 Output 1 Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 4 Output 1 Note In the first example, it\'s sufficient to install a sign at junction 1. From junction 1, all other junctions are reachable directly or indirectly: 2 is directly reachable from 1, 3 from 2, 4 from 3, and 5 from either 1 or 4. In the second example, installing a sign at junction 1 suffices since it forms a cycle, making all the junctions reachable from each other.","solution":"from collections import defaultdict def find_scc(graph, n): index = 0 stack = [] low_link = [-1] * (n + 1) index_map = [-1] * (n + 1) on_stack = [False] * (n + 1) sccs = [] def strong_connect(node): nonlocal index index_map[node] = index low_link[node] = index index += 1 stack.append(node) on_stack[node] = True for neighbor in graph[node]: if index_map[neighbor] == -1: strong_connect(neighbor) low_link[node] = min(low_link[node], low_link[neighbor]) elif on_stack[neighbor]: low_link[node] = min(low_link[node], index_map[neighbor]) if low_link[node] == index_map[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break sccs.append(scc) for v in range(1, n + 1): if index_map[v] == -1: strong_connect(v) return sccs def min_signs(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) sccs = find_scc(graph, n) sccgraph = defaultdict(set) scc_map = {} for i, scc in enumerate(sccs): for node in scc: scc_map[node] = i for u in range(1, n + 1): for v in graph[u]: if scc_map[u] != scc_map[v]: sccgraph[scc_map[u]].add(scc_map[v]) in_degree = [0] * len(sccs) for scc in sccgraph: for neighbor in sccgraph[scc]: in_degree[neighbor] += 1 return sum(1 for degree in in_degree if degree == 0) # Example usage: if __name__ == \\"__main__\\": # You can call min_signs and pass road information as follows: n1, edges1 = 5, [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)] print(min_signs(n1, edges1)) # Output: 1 n2, edges2 = 6, [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (1, 4)] print(min_signs(n2, edges2)) # Output: 1"},{"question":"You are tasked with designing a scheduling system for a hotel. The hotel has several rooms, and each room can be booked for multiple days, but only by one guest at a time. Booking conflicts need to be avoided, i.e., two bookings for the same room must not overlap on any day. You are given a list of booking requests, where each request specifies the room number, check-in day, and check-out day (the booking is for all days from the check-in day to the day before the check-out day). Determine if all booking requests can be satisfied without any conflicts. Constraints: * 1 leq n leq 100, where n is the number of booking requests * 1 leq rooms leq 50, where rooms is the number of rooms in the hotel * 1 leq check-in day < check-out day leq 365, representing the days of the year Input: Input is given from Standard Input in the following format: n rooms room_number_1 check_in_1 check_out_1 room_number_2 check_in_2 check_out_2 ... Output: Print `POSSIBLE` if all booking requests can be satisfied, and print `IMPOSSIBLE` otherwise. Examples: Input: 3 2 1 1 3 1 2 5 2 1 4 Output: IMPOSSIBLE Input: 2 2 1 1 3 2 2 5 Output: POSSIBLE","solution":"def can_satisfy_requests(n, rooms, bookings): room_bookings = {i: [] for i in range(1, rooms + 1)} for room, check_in, check_out in bookings: if any((check_in < r_ck_out and check_out > r_ck_in) for r_ck_in, r_ck_out in room_bookings[room]): return \\"IMPOSSIBLE\\" room_bookings[room].append((check_in, check_out)) return \\"POSSIBLE\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) rooms = int(data[1]) bookings = [(int(data[i]), int(data[i + 1]), int(data[i + 2])) for i in range(2, len(data), 3)] print(can_satisfy_requests(n, rooms, bookings))"},{"question":"Vincent is interested in monitoring the water levels of a series of reservoirs. He wants to know the longest period during which the water level has continuously increased day by day. Write a program that takes in a list of integers representing the water levels for each day and prints out the length of the longest continuous increase period. Input A list of integers representing daily water levels. The list ends with -1. Output An integer representing the length of the longest continuous increase period. Example Input: 3 2 5 7 5 6 8 10 -1 Output: 4","solution":"def longest_increasing_water_levels(water_levels): Returns the length of the longest continuous increase period in the water levels list. The list ends with -1 which should not be considered as part of the input. # Remove the ending -1 if water_levels[-1] == -1: water_levels = water_levels[:-1] max_len = 0 current_len = 0 for i in range(1, len(water_levels)): if water_levels[i] > water_levels[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 # Adding 1 because the length of period is counted as the number of elements in it if max_len > 0: max_len += 1 return max_len"},{"question":"Given an array of integers, find the maximum length of any subarray whose sum is equal to `S`. If no such subarray exists, return 0. Input The first line of input contains two space-separated integers N and S, where N is the size of the array and S is the target sum. The next line contains N space-separated integers denoting the elements of the array. Output Output the maximum length of a subarray whose sum equals `S`. If no such subarray exists, return 0. Constraints 1 ≤ N ≤ 10^5 -10^4 ≤ S, array[i] ≤ 10^4 Example Input: 5 7 1 2 3 4 5 Output: 2 Explanation In the given array, there are three subarrays that sum to 7: - [2, 5], which has length 2 - [3, 4], which has length 2 - [1, 2, 3, 1], which has length 4 but its sum is not 7 The maximum length of subarrays which precisely sum up to 7 is 2. Hence, the output is 2.","solution":"def max_length_subarray_with_sum(arr, S): Returns the maximum length of any subarray whose sum is equal to S. If no such subarray exists, return 0. prefix_sum = 0 prefix_sum_indices = {0: -1} max_length = 0 for i, num in enumerate(arr): prefix_sum += num if (prefix_sum - S) in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum - S]) if prefix_sum not in prefix_sum_indices: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"Alice and Bob are playing a game on an infinite sequence of natural numbers starting from 1: `1, 2, 3, 4, ...`. They take turns choosing a number from the sequence (starting with Alice), with the constraint that the chosen number must be strictly greater than the previously chosen number. The person who cannot make a valid move loses the game. However, they\'ve added an additional rule: each player can only pick a number if it is at most twice the number picked by their opponent on the previous turn. Formally, if the last chosen number by the opponent was `k`, the next chosen number must be greater than `k` and at most `2k`. Given the starting number `p` that Alice picks, determine if Bob has a winning strategy assuming both play optimally. Input The input consists of a single integer `p` (1 ≤ p ≤ 10^12), the number that Alice picks as her first choice. Output Print \\"Alice\\" if Alice has a winning strategy starting with `p`, otherwise print \\"Bob\\". Examples Input 1 Output Alice Input 3 Output Bob Note In the first example, Alice wins because the game starts with `1` and the next number picked by Bob has to be in the range `(1, 2]` which is an empty set. Hence, Bob cannot make a move and loses. In the second example, Alice starts with `3`, and Bob picks `4` (which is greater than `3` and at most `6`). Alice then can pick `5` or `6`, but regardless of her choice, Bob can always find a number that fulfills the game constraints, eventually leading to his win.","solution":"def determine_winner(p): Determines if Alice has a winning strategy, starting with the number p. Parameters: p (int): The starting number chosen by Alice. Returns: str: \\"Alice\\" if Alice has a winning strategy, otherwise \\"Bob\\". # Alice wins if p is a power of 2. if (p & (p - 1)) == 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Farmer John has a herd of cows, and he wants to figure out if he has the optimal number of cows based on their milk production. He noticed that the cows\' milk output forms an arithmetic progression over the days. Farmer John will measure the milk produced by each cow over a series of days and determine if the cows need any special attention or adjustment in their feed to improve production. Your task is to write a function that takes in the milk production measurements for a series of days, and verify if those measurements form an arithmetic progression for each cow. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. You will be given an array of milk production measurements for each cow over a series of days. If the measurements form an arithmetic progression, return \\"YES\\", otherwise return \\"NO\\". Function Signature: ```python def is_arithmetic_progression(measurements: List[int]) -> str: pass ``` # Input - The first line contains an integer `t`, the number of test cases (1 <= t <= 500). - Each of the next `t` lines contains a list of integers separated by spaces, representing the milk measurements for each cow over a series of days. The length of each list is between 2 and 10000, and the values in the list (representing milk production) are non-negative integers less than 10^6. # Output For each test case, output \\"YES\\" if the measurements form an arithmetic progression, otherwise output \\"NO\\". # Sample Input ``` 3 2 4 6 8 10 5 7 9 12 0 0 0 0 0 ``` # Sample Output ``` YES NO YES ``` # Explanation - In the first test case, the difference between consecutive measurements is 2, which is constant. - In the second test case, the measurements do not form a sequence with a constant difference. - In the third test case, all the measurements are the same, so the difference between consecutive measurements is 0, which is constant.","solution":"from typing import List def is_arithmetic_progression(measurements: List[int]) -> str: if len(measurements) < 2: return \\"YES\\" diff = measurements[1] - measurements[0] for i in range(2, len(measurements)): if measurements[i] - measurements[i - 1] != diff: return \\"NO\\" return \\"YES\\""},{"question":"Given a grid of dimensions MxN, each cell in the grid contains an integer value representing the cost of entering that cell. Your task is to find the maximum path sum from any cell in the top row to any cell in the bottom row. You can move from a cell to any of the three cells directly below it (left-diagonal, down, right-diagonal) in the next row. Input: The first line contains two integer values M and N, representing the number of rows and columns in the grid, respectively. Each of the next M lines contains N space-separated integers representing the cost values of the cells in the grid. Output: Print a single integer, the maximum path sum from any cell in the top row to any cell in the bottom row. Constraints: 1 ≤ M, N ≤ 1000 1 ≤ Cost of Cells ≤ 10^5 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 18 Explanation One possible path achieving the maximum path sum is: - From (0,2) (top row, third column) with cost 3 - To (1,1) (second row, second column) with cost 5 - To (2,1) (bottom row, second column) with cost 8 The maximum path sum is 3 + 5 + 8 = 16.","solution":"def maximum_path_sum(M, N, grid): Function to find the maximum path sum from any cell in the top row to any cell in the bottom row. Parameters: M (int): the number of rows in the grid. N (int): the number of columns in the grid. grid (list of lists): the grid containing the cell costs. Returns: int: the maximum path sum. # Create a DP array initialized with the same values as the grid dp = [[0] * N for _ in range(M)] # Initialize the first row of dp array with the first row of the grid for j in range(N): dp[0][j] = grid[0][j] # Fill in the dp array from the second row to the last row for i in range(1, M): for j in range(N): # Cost to enter this cell max_from_above = dp[i-1][j] # from directly above if j > 0: max_from_above = max(max_from_above, dp[i-1][j-1]) # from left-diagonal if j < N-1: max_from_above = max(max_from_above, dp[i-1][j+1]) # from right-diagonal dp[i][j] = grid[i][j] + max_from_above # The result is the maximum value in the last row return max(dp[M-1])"},{"question":"Design a function that takes an integer array `arr` consisting of positive and negative integers and an integer `target`, and returns an array of unique pairs of integers from `arr` whose sum is equal to `target`. Each pair should be in the form of `[x, y]` where `x <= y`. The pairs in the output array should be sorted in ascending order (first by the first element, then the second). Constraints: * The array `arr` will have at most `10^5` elements. * Each element of `arr` will be between `-10^6` and `10^6`. * There can be multiple valid pairs in the array summing up to `target`. Input: Two space-separated sections: 1. The integer `target`. 2. The space-separated integers representing the array `arr`. Output: Print the pairs in the format `[x, y]` each on a new line, or print \\"No valid pairs\\" if no such pairs exist. Example Input 5 -2 1 3 0 2 7 5 Output [-2, 7] [0, 5] [2, 3] Input 10 1 2 3 4 5 6 Output [4, 6]","solution":"def find_pairs_with_target(arr, target): Returns an array of unique pairs of integers from arr whose sum is equal to target. Each pair is in the form of [x, y] where x <= y. The pairs in the output array are sorted in ascending order. arr.sort() seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) result = sorted(map(list, pairs)) return result if result else \\"No valid pairs\\""},{"question":"A library catalog system needs to keep track of book circulation. Each book is identified by its unique ID and every borrowing or return transaction updates its current status. Your task is to simulate the book tracking in the library. Implement a function that processes a list of transactions and determines the final state of each book. Each transaction entry is represented as a tuple `(book_id, action)`, where `book_id` is an integer and `action` is a string that can either be `\'borrow\'` or `\'return\'`. If a book that is already borrowed is attempted to be borrowed again, or a book that is already returned is attempted to be returned again, the system should ignore that transaction. Constraints: * Each `book_id` in the transactions is a positive integer. * Actions are either `\'borrow\'` or `\'return\'`. Input: Input is given in the following format: book_transactions (list of tuples): A list of tuples where each tuple contains an integer and a string, representing transactions. Output: Output should be a dictionary with book IDs as keys and their final status (`\'borrowed\'` or `\'returned\'`) as values. Examples: Input: book_transactions = [(1, \'borrow\'), (2, \'borrow\'), (1, \'return\'), (3, \'borrow\'), (2, \'return\'), (3, \'return\')] Output: { 1: \'returned\', 2: \'returned\', 3: \'returned\' } Input: book_transactions = [(1, \'borrow\'), (1, \'borrow\'), (2, \'return\'), (2, \'borrow\'), (2, \'borrow\'), (1, \'return\'), (3, \'borrow\')] Output: { 1: \'returned\', 2: \'borrowed\', 3: \'borrowed\' } Input: book_transactions = [(5, \'borrow\'), (5, \'borrow\'), (5, \'return\'), (5, \'return\')] Output: { 5: \'returned\' }","solution":"def process_transactions(book_transactions): Processes a list of book transactions and determines the final state of each book. Parameters: book_transactions (list of tuples): A list of tuples where each tuple contains an integer (book_id) and a string (action, either \'borrow\' or \'return\'). Returns: dict: A dictionary with book IDs as keys and their final status (\'borrowed\' or \'returned\') as values. final_status = {} for book_id, action in book_transactions: if book_id not in final_status: if action == \'borrow\': final_status[book_id] = \'borrowed\' elif action == \'return\': final_status[book_id] = \'returned\' else: if action == \'borrow\' and final_status[book_id] == \'returned\': final_status[book_id] = \'borrowed\' elif action == \'return\' and final_status[book_id] == \'borrowed\': final_status[book_id] = \'returned\' return final_status"},{"question":"You are developing a new board game involving cards and dice. The game requires a fair and balanced approach to selecting and distributing cards among players. Each player must receive exactly one card from a given deck. The deck contains cards with unique point values. Your objective is to ensure that the total point values for all players, after every player has received one card, is as balanced as possible to maintain fairness. Create a program that selects cards in such a way that the absolute difference between the highest and lowest total point values of any player after distribution is minimized. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1 000) — the number of players and the total number of cards. The second line contains m integers p_1, p_2, ..., p_m (1 ≤ p_i ≤ 10 000) — the point values of the individual cards in the deck. Output If there are multiple valid distributions, output any. If it is not possible to distribute cards to all players with the given deck, output -1. Example Input 4 6 2 7 14 3 5 8 Output 4 1 3 2 (Note: Players 1, 2, 3, and 4 receive cards with point values 3, 2, 14, and 7, respectively in this distribution, which is one possible balanced distribution.) Note In this example, our goal was to distribute the cards in such a way that the sum of points for each player is as close as possible to each other.","solution":"def distribute_cards(n, m, point_values): if n > m: return -1 sorted_points = sorted(point_values) players = [[] for _ in range(n)] player_points = [0] * n for i, point in enumerate(sorted_points): idx = i % n players[idx].append(point) player_points[idx] += point result = [0] * n for idx in range(n): result[idx] = players[idx][0] return result # Example usage n = 4 m = 6 points = [2, 7, 14, 3, 5, 8] print(distribute_cards(n, m, points)) # Example output: [2, 3, 5, 7]"},{"question":"**Problem Description: Achilles\' Journey** Achilles, the great warrior, is on a quest to gather mythic relics scattered throughout a grid. Each cell in the grid either contains a relic or is empty. Achilles starts at the top-left corner of the grid and needs to move to the bottom-right corner. He can only move right or down. In each move, he can collect a relic if it is present in the cell he moves into. The catch is, the path he chooses must maximize the number of relics collected. You need to write a program that determines the maximum number of relics Achilles can collect on his journey from the top-left to the bottom-right of the grid. *Input:* - The first line contains two integers (M) and (N) representing the number of rows and columns in the grid, respectively (( 1 leq M, N leq 1000 )). - The next (M) lines each contain (N) integers, where each integer is either (0) (representing an empty cell) or (1) (representing a cell with a relic). *Output:* - Output a single integer, the maximum number of relics that Achilles can collect. *Example Input:* 5 5 1 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 1 0 1 1 1 1 1 0 *Example Output:* 7 *Explanation:* Achilles can collect 7 relics by following the path: (0,0) → (1,0) → (1,1) → (1,2) → (2,2) → (2,3) → (3,3) → (4,3) → (4,4)","solution":"def max_relics(M, N, grid): Returns the maximum number of relics Achilles can collect. Parameters: M (int): Number of rows. N (int): Number of columns. grid (list of list of int): The grid containing relics (1 for relic, 0 for empty). dp = [[0] * N for _ in range(M)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (only can come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only can come from above) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1] # Example usage (you can remove this for the final submission): if __name__ == \\"__main__\\": M = 5 N = 5 grid = [ [1, 0, 0, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1], [0, 0, 1, 0, 1], [1, 1, 1, 1, 0] ] print(max_relics(M, N, grid)) # Output should be 7"},{"question":"In a particular cipher system, every character in a string is shifted by a fixed number of positions in the alphabet. For example, if the shift is 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. The shift wraps around when it reaches the end of the alphabet. Thus, with a shift of 3, \'x\' becomes \'a\', \'y\' becomes \'b\', and \'z\' becomes \'c\'. Write a program that performs this shifting operation on a given string and shift value. Input The input consists of two lines: 1. An integer S (0 ≤ S ≤ 25), the shift value. 2. A string P of uppercase and lowercase alphabets (1 ≤ length of P ≤ 100). Output Output the encrypted string after shifting. Examples Input 3 abcXYZ Output defABC Input 1 helloWorld Output ifmmpXpsme","solution":"def caesar_cipher(shift, plaintext): Shifts every character in the plaintext by the given shift value. Parameters: shift (int): The shift value (0 ≤ S ≤ 25) plaintext (str): The input string (1 ≤ length of P ≤ 100) Returns: str: The shifted string after applying the cipher shifted_text = [] for char in plaintext: if \'a\' <= char <= \'z\': new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) elif \'A\' <= char <= \'Z\': new_char = chr(((ord(char) - ord(\'A\') + shift) % 26) + ord(\'A\')) else: new_char = char shifted_text.append(new_char) return \'\'.join(shifted_text)"},{"question":"You are given a binary string s of length n, consisting of characters \'0\' and \'1\'. A subsequence of the string is any string that can be derived by deleting some or none of the characters without changing the order of the remaining characters. Define a balanced subsequence as a subsequence that contains an equal number of \'0\'s and \'1\'s. Calculate the length of the longest balanced subsequence in the given string. Input The string s of length n (1 ≤ n ≤ 2 ⋅ 10^5) consisting of characters \'0\' and \'1\'. Output Print one integer — the length of the longest balanced subsequence. Examples Input 00110 Output 4 Input 111000 Output 6 Note In the first example, the longest balanced subsequence is \\"0110\\" or \\"0011\\", both with length 4. In the second example, the entire string \\"111000\\" is a balanced subsequence with length 6.","solution":"def longest_balanced_subsequence(s): Given a binary string s, return the length of the longest balanced subsequence that contains an equal number of \'0\'s and \'1\'s. count_0 = s.count(\'0\') count_1 = s.count(\'1\') return 2 * min(count_0, count_1)"},{"question":"You are given a series of operations that you must perform on an initially empty stack. Your task is to track the maximum element in the stack efficiently after each operation. The stack supports the following operations: * Push x: Push the integer x onto the stack. * Pop: Remove the element on top of the stack. * Max: Print the maximum value currently present in the stack. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. Each of the next n lines contains an operation in one of the following formats: * \\"Push x\\" where x is an integer (-10^9 ≤ x ≤ 10^9), which adds the integer x onto the stack. * \\"Pop\\" which removes the element on the top of the stack. It’s guaranteed that this operation is never called on an empty stack. * \\"Max\\" which prints the maximum element in the stack. It’s guaranteed that this operation is never called on an empty stack. Output For each \\"Max\\" operation, output the maximum value currently in the stack. Examples Input 6 Push 1 Push 2 Max Push 3 Max Pop Output 2 3 Input 5 Push 5 Push 1 Max Pop Max Output 5 5","solution":"class MaxStack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): if self.stack: value = self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() def max(self): if self.max_stack: return self.max_stack[-1] def process_operations(operations): max_stack = MaxStack() results = [] for operation in operations: if operation.startswith(\\"Push\\"): _, value = operation.split() max_stack.push(int(value)) elif operation == \\"Pop\\": max_stack.pop() elif operation == \\"Max\\": results.append(max_stack.max()) return results"},{"question":"We need to implement a system which calculates the special sum of each pair of numbers in the given test cases. Input: The first line of input contains T – the number of test cases. Each of the next T lines contains two integers a and b separated by a space. Output: Output T lines, each containing a single integer that is the sum of the two integers if the first integer is divisible by the second integer. If it is not divisible, output the difference between the two integers. Constraints: 1 ≤ T ≤ 300 1 ≤ a ≤ 1000 1 ≤ b ≤ 20 SAMPLE INPUT 5 10 5 12 4 13 5 15 3 7 2 SAMPLE OUTPUT 15 16 8 18 5 Explanation: In the first case, 10 is divisible by 5, so the output is the sum (10 + 5 = 15). In the second case, 12 is divisible by 4, so the output is the sum (12 + 4 = 16). In the third case, 13 is not divisible by 5, so the output is the difference (13 - 5 = 8). In the fourth case, 15 is divisible by 3, so the output is the sum (15 + 3 = 18). In the fifth case, 7 is not divisible by 2, so the output is the difference (7 - 2 = 5).","solution":"def special_sum(t, test_cases): Calculates the special sum for each pair of numbers in the test cases. Parameters: t (int): Number of test cases. test_cases (list of tuple): List of tuples where each tuple contains two integers (a, b). Returns: list: A list of results for each test case. results = [] for a, b in test_cases: if a % b == 0: results.append(a + b) else: results.append(a - b) return results # Example usage: # t = 5 # test_cases = [(10, 5), (12, 4), (13, 5), (15, 3), (7, 2)] # special_sum(t, test_cases) -> [15, 16, 8, 18, 5]"},{"question":"Given an integer n, write a function to determine if it is a power of three. If n is a power of three, return true, otherwise return false. Example Input 27 Output true Example Input 0 Output false Example Input 9 Output true Example Input 45 Output false Your implementation should consider the following constraints and edge cases. Constraints: - (−2^31) <= n <= (2^31 − 1)","solution":"def is_power_of_three(n): Determine if the given integer n is a power of three. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"A restaurant wants to keep track of the orders received and display a summary of all orders based on their frequency. Each order contains a dish name. You need to process a list of orders and output the dish names along with the number of times each dish was ordered. The list should be sorted in descending order of frequency, and in alphabetical order if two dishes have the same frequency. Input: The first line contains n (1 ≤ n ≤ 100) — the number of orders. Following n lines each contain a dish name, consisting of lowercase Latin letters and spaces. The length of each dish name is between 1 and 50 characters, inclusive. Output: Print the list of dish names along with their orders count, each dish on a new line. The format is \\"dish_name count\\". Examples Input: 7 pasta pizza burger pizza pasta pasta salad Output: pasta 3 pizza 2 burger 1 salad 1 Input: 5 sushi ramen sushi burger ramen Output: ramen 2 sushi 2 burger 1","solution":"def order_summary(n, orders): This function takes the number of orders and a list of dish names, and returns the summary of orders sorted by frequency and then alphabetically. from collections import Counter # Use counter to track frequency of each order order_counts = Counter(orders) # Sort firstly by frequency in descending order, then by dish name sorted_orders = sorted(order_counts.items(), key=lambda x: (-x[1], x[0])) # Formatting the output result = [f\\"{dish} {count}\\" for dish, count in sorted_orders] return result"},{"question":"A warehouse manager manages the inventory of different products in the warehouse. Each product has a name and a quantity available. He wants an automated system to help with various inventory queries and updates. The system needs to support the following operations: 1. Add a new product to the inventory with a specified quantity. If the product already exists, update its quantity by adding the new quantity to the existing quantity. 2. Reduce the quantity of a specific product by a given amount. If the quantity to be reduced is greater than the available quantity, reduce the quantity to zero. 3. Provide the quantity of a specific product in the inventory. 4. List all products in the inventory sorted in lexicographical order (case-sensitive) along with their quantities. Write a code that implements this inventory management system. Input The first line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries to process. The next q lines contain the descriptions of the queries in the format: - \\"ADD product_name quantity\\" to add the product with the given quantity. - \\"REDUCE product_name quantity\\" to reduce the quantity of the specified product. - \\"QUERY product_name\\" to get the quantity available of the specified product. - \\"LIST\\" to list all products with their quantities sorted alphabetically. Output For each \\"QUERY product_name\\" query, print a single integer — the quantity of the specified product. If the product does not exist, print 0. For each \\"LIST\\" query, print the list of products and their quantities in separate lines. Each line should contain the product name and its quantity separated by a space. Example Input 7 ADD apples 100 ADD bananas 150 QUERY apples REDUCE apples 30 QUERY apples ADD apples 20 LIST Output 100 70 apples 90 bananas 150","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def add_product(self, product_name, quantity): if product_name in self.inventory: self.inventory[product_name] += quantity else: self.inventory[product_name] = quantity def reduce_product(self, product_name, quantity): if product_name in self.inventory: self.inventory[product_name] -= quantity if self.inventory[product_name] < 0: self.inventory[product_name] = 0 def query_product(self, product_name): return self.inventory.get(product_name, 0) def list_products(self): return sorted(self.inventory.items()) # Helper function to process operations def process_operations(q, operations): ims = InventoryManagementSystem() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": product_name = parts[1] quantity = int(parts[2]) ims.add_product(product_name, quantity) elif command == \\"REDUCE\\": product_name = parts[1] quantity = int(parts[2]) ims.reduce_product(product_name, quantity) elif command == \\"QUERY\\": product_name = parts[1] results.append(str(ims.query_product(product_name))) elif command == \\"LIST\\": product_list = ims.list_products() for product, qty in product_list: results.append(f\\"{product} {qty}\\") return results"},{"question":"In a certain kingdom, there are n castles arranged in a straight line, numbered from 1 to n from left to right. Each castle has a certain defense level, represented as an integer in the array d of length n, where the i-th element represents the defense level of the i-th castle. The king has decided to redistribute the defenses to make all the castles as equal as possible. The redistribution rule allows decreasing the defense of any castle by 1 unit and distributing that 1 unit of defense equally (fractionally) to all other castles. You need to determine the maximum possible equal defense level that can be achieved for all castles after redistributions. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of castles. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9) — the initial defense levels of the castles. Output Print a single integer — the maximum possible equal defense level of all castles after redistributions. Example Input 5 7 2 5 10 8 Output 6 Note Initially, the defense levels are [7, 2, 5, 10, 8]. It\'s possible to redistribute the defenses as follows such that the maximum possible equal level of defense is 6: 1. Decrease 4 units from castle 4 (defense level 10), redistribute to others. 2. All castles have [7 + 4/4, 2 + 4/4, 5 + 4/4, 10 - 4, 8 + 4/4] = [8, 3, 6, 6, 9]. So, iteratively performing such redistributions until they all achieve a uniform value (in this case 6), is feasible, and 6 is the maximum possible equal defense level. Hint: To solve this, you might consider using a binary search approach to find the highest balanced defense level achievable.","solution":"def max_possible_equal_defense(n, d): def can_achieve(target): surplus = 0 deficit = 0 for defense in d: if defense > target: surplus += (defense - target) else: deficit += (target - defense) return surplus >= deficit left, right = 0, max(d) result = 0 while left <= right: mid = (left + right) // 2 if can_achieve(mid): result = mid left = mid + 1 else: right = mid - 1 return result"},{"question":"A farming simulation game includes a system where crops can be planted and harvested. Each crop takes a certain number of days to grow before it can be harvested. The player\'s farm consists of different plots, and each plot can hold one crop at a time. The player wants to maximize the number of harvests within a given period. Given the number of plots on the farm, the number of days available, and the growth times of different types of crops, determine the maximum number of crops that can be harvested before the given period ends. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains three integers n, d, m (1 ≤ n ≤ 100, 1 ≤ d ≤ 1000, 1 ≤ m ≤ 100) — the number of plots on the farm, the number of days available, and the number of different crop types, respectively. - The second line contains m integers, where each integer represents the number of days required for a type of crop to grow. Output For each test case, print the maximum number of crops that can be harvested within the given number of days. Example Input 3 3 10 2 4 5 1 7 3 2 5 8 5 15 3 3 7 10 Output 6 3 5 Note In the first test case, the optimal sequences are: - Planting crops that take 4 days to grow in plots: 4 days to grow → harvest once → plant again for another 4 days → harvest again, repeat for up to 3 plots within 10 days which gives a total of 6 harvests. - Planting crops that take 5 days to grow in all plots: harvest once in 10 days, so it’s not optimal. In the second test case, the optimal sequences are: - Planting crops that take 2 days to grow in the single plot: 2 days to grow → harvest → plant again for another 2 days → harvest again, repeat until the end of 7 days which gives a total of 3 harvests. In the third test case, the optimal sequences are: - Planting crops that take 3 days to grow in all plots: each plot gets harvested 5 times within 15 days, giving 5 harvests.","solution":"def max_harvests(t, test_cases): Returns the maximum number of crops that can be harvested for each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple consists of: - n (int): Number of plots on the farm - d (int): Number of days available - m (int): Number of different crop types - growth_times (list of int): List of days required for each crop type to grow Returns: list of int: Maximum number of crops that can be harvested for each test case. results = [] for case in test_cases: n, d, m, growth_times = case max_harvest = 0 for grow_time in growth_times: harvests_per_plot = d // grow_time total_harvests = harvests_per_plot * n max_harvest = max(max_harvest, total_harvests) results.append(max_harvest) return results"},{"question":"# String Transformation with Operation Counter You are given a string ( s ) consisting of lowercase English letters. Your task is to transform the given string into a palindrome by performing a series of operations. An operation is defined as choosing a character in the string and replacing it with another character. You need to find the minimum number of such operations required to make the string a palindrome. A string is considered a palindrome if it reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. # Input - The first line contains a single integer ( n ) (1 ≤ ( n ) ≤ 1000), the length of the string ( s ). - The second line contains the string ( s ) consisting of ( n ) lowercase English letters. # Output - Print a single integer — the minimum number of operations needed to transform the string ( s ) into a palindrome. # Examples Example 1: **Input:** ``` 5 abcca ``` **Output:** ``` 1 ``` **Explanation:** To make the string \\"abcca\\" a palindrome, you can change the second character \'b\' to \'c\', resulting in the palindrome \\"accac\\". Example 2: **Input:** ``` 4 abcd ``` **Output:** ``` 2 ``` **Explanation:** To make the string \\"abcd\\" a palindrome, you need to change both the second and third characters: - Change \'b\' to \'c\' resulting in \\"accd\\". - Change \'d\' to \'a\' resulting in the palindrome \\"acca\\". # Note The provided input will always produce a valid output and do not contain any blank or special characters.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the given string \'s\' into a palindrome by performing the minimum number of character replacements. # Initial count of operations operations = 0 # Iterate from the start to the middle of the string for i in range(n // 2): # If characters at symmetrical positions are different if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"You have an array of N integers, and you can perform the following operation on it: 1. Pick any two adjacent integers in the array, remove them, and insert their sum back into the array at the same position. Your task is to determine the minimum possible sum of the final remaining integer after repeatedly applying the above operation until only one integer remains in the array. Input: - The first line contains an integer N (2 leq N leq 10^5) — the number of integers in the array. - The second line contains N integers a_1, a_2, ldots, a_N (1 leq a_i leq 10^9) — the integers in the array. Output: Output the minimum possible sum of the final remaining integer. Example Input 4 4 3 6 2 Output 23 Input 3 1 2 3 Output 9 Input 5 10 20 30 40 50 Output 190","solution":"def min_final_sum(n, arr): Returns the minimum possible sum of the final remaining integer after repeatedly applying the operation until only one integer remains. return sum(arr)"},{"question":"Yash\'s Music Streaming Service has an interesting feature. It allows users to create playlists, and each playlist is a list of songs. Each song can be represented by a unique integer ID. However, Yash noticed that some users try to create very large playlists by adding the same song multiple times. To tackle this, Yash decided to impose a constraint on the playlists: For any given playlist, no song should appear more than once. Given a playlist, Yash has to remove the duplicate songs, keeping only the first occurrence of each song and removing all subsequent duplicates. Write a function to process a playlist described by a list of song IDs and return the processed playlist. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of songs in the playlist. The second line contains n space-separated integers — the IDs of the songs in the playlist. Each ID is a positive integer not exceeding 10^9. Output Output a single line with space-separated integers representing the playlist after removing duplicates. Examples Input 6 1 2 3 2 4 1 Output 1 2 3 4 Input 7 1 1 2 2 3 3 3 Output 1 2 3","solution":"def process_playlist(n, playlist): Processes the playlist to remove duplicate songs, keeping only the first occurrence of each song. seen = set() result = [] for song in playlist: if song not in seen: seen.add(song) result.append(song) return result"},{"question":"Background Alice loves playing with strings. Recently, she has designed a fascinating puzzle involving reversing strings and checking palindromic properties. A string is called a palindrome if it reads the same backward as forward. Alice starts with a string and she can perform the following operation as many times as she wants: - She can reverse any substring (contiguous part of the string). She wonders if it is possible to make the entire string a palindrome by applying the above operation any number of times. Problem Given a string `s` of length `n`, determine if it is possible to make the string a palindrome by reversing some (possibly zero) substrings of it. Input The input consists of a single string `s` with a length `n`. Constraints * 1 ≤ n ≤ 10^5 * The string `s` consists of lowercase English letters only. Output Output \\"YES\\" if it is possible to make the string a palindrome by reversing some substrings, otherwise output \\"NO\\". Examples Input ``` abccbax ``` Output ``` YES ``` Input ``` abcde ``` Output ``` NO ``` Input ``` aabb ``` Output ``` YES ``` Input ``` nursesrun ``` Output ``` YES ``` Input ``` school ``` Output ``` NO ``` Explanation In the first example, we can reverse the substring \\"abccba\\" to make it \\"abccba\\", which is a palindrome. Then by reversing \\"x\\", we get \\"abcdbca\\", which is also a palindrome when read backward. Thus, the answer is \\"YES\\". In the second example, it is not possible to rearrange or reverse any substring to make the string \\"abcde\\" a palindrome, so the answer is \\"NO\\". In the third example, we can reverse \\"aa\\" and \\"bb\\" separately to make \\"abba\\", which is a palindrome. Hence the answer is \\"YES\\". In the fourth example, the string \\"nursesrun\\" is already a palindrome, and hence the answer is \\"YES\\". In the fifth example, there is no way to reverse any substring to make \\"school\\" a palindrome, so the answer is \\"NO\\".","solution":"def can_be_palindrome(s): Determine if a string can be rearranged into a palindrome by reversing some substrings. :param s: Input string :type s: str :return: \\"YES\\" if the string can be rearranged to a palindrome, otherwise \\"NO\\" :rtype: str from collections import Counter # Count frequencies of all characters freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # To form a palindrome, there should be at most one character with an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"There are X planets and Y interplanetary roads in a distant galaxy. Each planet is numbered from 1 to X. Some planets can be connected directly by roads and each road connects two planets bidirectionally, allowing travel in both directions. Scientist Zykor has developed a new algorithm that can identify the minimum number of roads required to ensure that all planets are interconnected, such that from any given planet, it is possible to travel to any other planet either through direct roads or via other connected planets, ensuring the galaxy is unified. Your task is to determine this minimal number of roads, knowing that there might already be some roads present. Input The first line contains two space-separated integers X and Y (2 ≤ X ≤ 10000, 1 ≤ Y ≤ 100000), denoting the number of planets and the number of existing roads in the galaxy, respectively. The next Y lines describe the existing roads. The i-th of these lines contains two space-separated integers pi and qi (1 ≤ pi, qi ≤ X, pi ≠ qi), meaning that there is a direct road between planet pi and planet qi. Output Print the minimum number of additional roads that need to be built to make the galaxy interconnected. Examples Input 6 2 1 2 4 5 Output 3 Input 5 4 1 2 1 3 3 4 4 5 Output 0 Note In the first sample, planets are divided into three disjoint sets: {1, 2}, {3}, {4, 5, 6}, so we need at least two new roads to connect all sets. One possible solution is to add roads: {1, 3} and {3, 4}, making the galaxy interconnected. In the second sample, all planets are already interconnected by the existing roads, so no additional roads are needed.","solution":"def minimum_additional_roads(X, Y, roads): from collections import defaultdict, deque def bfs(start_node, graph, visited): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for (p, q) in roads: graph[p].append(q) graph[q].append(p) visited = [False] * (X + 1) components = 0 for i in range(1, X + 1): if not visited[i]: bfs(i, graph, visited) components += 1 return components - 1"},{"question":"You are given a list of non-negative integers representing the amount of water trapped between some blocks of different heights after the rain. The heights of the blocks are represented by an integer array where the width of each block is 1. Write a function that returns the amount of water trapped between the blocks. The water should be trapped based on the following conditions: - Any water must be above the base level of the blocks and between two blocks. - Water cannot be trapped on the edges of the array. Input The first line of input contains an integer N (0 ≤ N ≤ 10^5) — the number of blocks. The second line contains N integers h_{i} (0 ≤ h_{i} ≤ 10^5) — the heights of the blocks. Output Print one integer — the amount of water trapped between the blocks after the rain. Examples Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 4 4 2 0 3 2 5 Output 9 Input 0 Output 0","solution":"def trap_rain_water(height): Given a list of non-negative integers representing the height of blocks, this function returns the amount of water that can be trapped after a rain. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A large organization is preparing for a charity event where they plan to use a raffle draw to raise funds. Each participant in the raffle gets a ticket with a unique number. At the end of the event, a series of winning tickets are drawn. Throughout the event, the organizers are asked many times about whether a particular ticket number is still eligible (i.e., it hasn\'t been drawn yet). Your task is to write a program that helps the organizers keep track of the drawn tickets and quickly respond to queries about ticket eligibility. The draw process is structured as follows: - At the beginning of the event, the organizers have n unique ticket numbers. - After the initial drawing, the organizers may be queried multiple times to check the eligibility of specific tickets. - For each query, your program should respond with \\"YES\\" if the ticket number is still eligible (i.e., it has not been drawn) and \\"NO\\" if it is not eligible (i.e., it has been drawn or never existed). Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of unique ticket numbers distributed at the beginning of the event. The second line contains n space-separated integers ti (1 ≤ ti ≤ 10^6) — the list of unique ticket numbers initially distributed. The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of events that follow. Then, m lines follow, each containing either: - \\"D x,\\" meaning that the ticket number x (1 ≤ x ≤ 10^6) has been drawn, - or \\"Q x,\\" meaning that there is a query about whether the ticket number x is still eligible. Output For each \\"Q x\\" event, print \\"YES\\" if the ticket number x is still eligible, or \\"NO\\" otherwise. Example Input 5 11 22 33 44 55 7 D 22 Q 22 Q 33 D 44 Q 44 D 33 Q 33 Output NO YES NO NO","solution":"def raffle_draw(n, ticket_numbers, m, events): remaining_tickets = set(ticket_numbers) results = [] for event in events: action, x = event.split() x = int(x) if action == \\"D\\": if x in remaining_tickets: remaining_tickets.remove(x) elif action == \\"Q\\": if x in remaining_tickets: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a matrix of size n x m filled with integers. You need to find the maximum sum of a rectangular submatrix with a constraint that the rectangle\'s area should not exceed a given value MaxArea. Input The first line contains three integers n, m and MaxArea (1 ≤ n, m ≤ 1000, 1 ≤ MaxArea ≤ n*m). The next n lines contain m integers each — the elements of the matrix. Each element of the matrix is between -10^4 and 10^4. Output Output a single integer — the maximum sum of any rectangular submatrix with area not exceeding MaxArea. Examples Input 3 3 4 1 2 3 4 5 6 7 8 9 Output 24 Input 4 4 5 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 Output -1 Note In the first example, the submatrix with the maximum sum which area doesn\'t exceed 4 is: ``` 5 6 8 9 ``` Its sum is 28. In the second example, the submatrix with the maximum sum which area doesn\'t exceed 5 is simply any cell containing -1, which is the largest value in the matrix.","solution":"def max_submatrix_sum(matrix, n, m, MaxArea): def get_prefix_sums(matrix): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def get_sum(x1, y1, x2, y2, prefix_sum): return (prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x1][y2 + 1] - prefix_sum[x2 + 1][y1] + prefix_sum[x1][y1]) prefix_sum = get_prefix_sums(matrix) max_sum = float(\'-inf\') for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): area = (x2 - x1 + 1) * (y2 - y1 + 1) if area <= MaxArea: current_sum = get_sum(x1, y1, x2, y2, prefix_sum) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a list of n integers, find the sum of all unique integers in the list. Input: - The first line contains a single integer n, the number of integers in the list. - The second line contains n space-separated integers representing the list. Output: - A single integer which is the sum of all unique elements in the list. Constraints: - 1 ≤ n ≤ 1000 - -1000 ≤ each integer ≤ 1000 SAMPLE INPUT 5 1 2 2 3 4 SAMPLE OUTPUT 10 Explanation In the given list, 1, 2, 3, and 4 are the unique elements. The sum of these elements is 1+2+3+4 = 10.","solution":"def sum_of_unique_elements(n, elements): Given a list of n integers, return the sum of all unique integers in the list. :param n: int, the number of integers in the list. :param elements: list of int, the integers in the list. :return: int, the sum of all unique integers in the list. unique_elements = set(elements) return sum(unique_elements) # Example usage: # n = 5 # elements = [1, 2, 2, 3, 4] # print(sum_of_unique_elements(n, elements)) # Output should be 10"},{"question":"A courier is delivering packages in a city with a grid of size n x m. The city can be represented by a grid with n rows and m columns. There are certain cells that represent buildings (blocked cells) where the courier cannot enter. You need to determine the shortest path the courier can take to deliver a package from the start cell to the destination cell. The courier can only move: * Up (to the cell in the previous row, same column) * Down (to the cell in the next row, same column) * Left (to the cell in the same row, previous column) * Right (to the cell in the same row, next column) The courier starts at the top-left corner of the grid (cell (0, 0)) and needs to deliver the package to the bottom-right corner of the grid (cell (n-1, m-1)). If it\'s not possible to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each representing the grid, where: * \'.\' indicates an empty cell the courier can move into. * \'#\' indicates a building (blocked cell) the courier cannot enter. The top-left corner (0, 0) and the bottom-right corner (n-1, m-1) are always empty cells. Output Print the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, print -1. Examples Input 4 4 .... ..#. ...# #... Output 6 Input 3 3 .#. # .#. Output -1 Note In the first example, the courier can take the path: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (3,1) -> (3,2) -> (3,3). The length of the path is 6. In the second example, there is no valid path from the start to the destination, hence the output is -1.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(0, 0, 0)]) # (row, column, distance) grid[0][0] = \'#\' # Mark as visited while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): grid[nx][ny] = \'#\' # Mark as visited queue.append((nx, ny, dist + 1)) return -1 # Function to reformat the input grid for testing def find_shortest_path(n, m, grid_str): grid = [list(row) for row in grid_str] return shortest_path(grid)"},{"question":"In order to build a new software feature, Titus\'s team needs to understand the properties of a specific grid-based path. The grid is a 2D matrix of n rows and m columns, filled with non-negative integer values. A path in the grid is defined as a sequence of cells starting from the top-left corner (0, 0) and ending at the bottom-right corner (n-1, m-1). At each step, one can move either one cell to the right or one cell downwards. The cost of a path is the sum of the values of the cells visited along the path. Titus\'s task is to find the minimum cost path through the grid and to calculate this minimum cost. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. The next n lines each contain m integers, where each integer a_ij (0 ≤ a_ij ≤ 100) represents the value in the cell at row i and column j. Output Output a single integer — the cost of the minimum cost path from the top-left corner to the bottom-right corner of the grid. Examples Input 3 4 1 3 1 2 1 5 1 4 4 2 1 3 Output 8 Note Consider the example input. One possible minimum cost path is to move right twice, down once, right once, and then down once, visiting the cells with values: 1 → 3 → 1 → 1 → 1 → 3 The sum of these values is 8. In another possible path, the movements might be: right once, down twice, right twice, visiting the cells with values: 1 → 3 → 5 → 1 → 1 → 3 Here also, the sum of these values is 8.","solution":"def min_cost_path(matrix, n, m): Given a 2D matrix, finds the minimum cost path from the top-left to the bottom-right corner. Only moves to the right and down are allowed. # Create a 2D dp array filled with infinity dp = [[float(\'inf\') for _ in range(m)] for _ in range(n)] # Initialize the top-left corner with the first cell of the matrix dp[0][0] = matrix[0][0] # Fill the first row (only right moves) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (only down moves) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner has the result return dp[n-1][m-1]"},{"question":"Alice is a famous chocolatier, and she loves to experiment with different ways of cutting chocolate bars. She has a rectangular chocolate bar of size n x m, and she wants to break it down into smaller pieces. She can only make breaks along the lines that divide the rows or columns of the chocolate bar. At each step, she can break any existing piece of chocolate into two smaller pieces by making either a horizontal or vertical cut. Alice wants to find out the minimum number of breaks required to divide the chocolate bar into pieces such that each piece is a 1x1 square. Input The input consists of two positive integers n and m (1 ≤ n, m ≤ 1000), which represent the dimensions of the chocolate bar. Output Output a single integer, the minimum number of breaks required. Examples Input 3 1 Output 2 Input 2 2 Output 3 Input 5 5 Output 24 Note In the first example, the chocolate bar is 3x1. Alice can break it twice along its rows to get three 1x1 pieces: - First break it into a 1x1 piece and a 2x1 piece. - Then break the 2x1 piece into two 1x1 pieces. In the second example, the chocolate bar is 2x2. Alice can make breaks as follows: - First, break it into two 2x1 pieces by a vertical cut. - Then break each 2x1 piece into two 1x1 pieces by two horizontal cuts. Hence, 3 breaks in total are required. In the third example, a 5x5 chocolate bar requires 24 breaks to get 25 pieces of 1x1 squares.","solution":"def min_breaks(n, m): Returns the minimum number of breaks required to divide a chocolate bar of size n x m into pieces such that each piece is a 1x1 square. # To divide an n x m chocolate bar into 1x1 pieces, # we need to make (n-1) horizontal breaks and (m-1) vertical breaks. # The total number of breaks needed is therefore (n - 1) + (m - 1). return (n * m) - 1"},{"question":"Given an array of `n` integers, where each integer represents the height of a tower. You can perform the following operation any number of times: Choose two towers and reduce the height of the taller tower by 1 and increase the height of the shorter tower by 1. The goal is to make the height difference between the tallest and the shortest towers as small as possible. Write a function that calculates the minimal height difference that can be achieved after performing the operations optimally. Constraints: * 2 ≤ n ≤ 100000 * 1 ≤ height of each tower ≤ 100000 Input Input is given from Standard Input in the following format: The first line contains an integer `n`, the number of towers. The second line contains `n` integers representing the heights of the towers. Output Print one integer, the minimal height difference between the tallest and the shortest tower that can be achieved. Examples Input 5 2 6 3 4 7 Output 1 Input 4 1 4 7 10 Output 0 Input 3 5 5 5 Output 0","solution":"def minimal_height_difference(n, heights): Returns the minimal height difference between the tallest and shortest towers that can be achieved. sorted_heights = sorted(heights) return sorted_heights[-1] - sorted_heights[0]"},{"question":"A company is planning to design a new computer network for their office. The office comprises N rooms connected with M cables, each cable connecting two different rooms. Each cable has a certain length associated with it. The goal is to connect all rooms with the minimum possible total cable length, ensuring there are no cycles in the network. However, the company realizes that sometimes cables might fail. To ensure reliability, they also want to know the second best way to connect all rooms. In other words, if the best network configuration fails, what is the next minimal total cable length to connect all rooms? Your task is to write a program that finds both the minimum and the second minimum total cable lengths for the network. Input The first line of input contains two space-separated integers N and M, denoting the number of rooms and the number of cables, respectively. Each of the following M lines contains three space-separated integers u, v, and w, denoting a cable of length w connecting room u to room v. Output Print two space-separated integers: - The minimum total cable length required to connect all the rooms. - The second minimum total cable length required to connect all the rooms. If it is not possible to connect all the rooms, output \\"-1\\". Constraints 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N 0 ≤ w ≤ 10000 Example Sample Input 1: 4 5 1 2 3 1 3 4 2 3 1 2 4 2 3 4 5 Sample Output 1: 6 7 Sample Input 2: 3 1 1 2 4 Sample Output 2: -1 Explanation In the first example, the minimum total cable length is achieved by using cables (2 to 3), (2 to 4), and (1 to 2), with the sum being 6. The second minimum is achieved by using cables (1 to 3), (2 to 4), and (2 to 3), with the sum being 7. In the second example, it is not possible to connect all the rooms with the given cables, so the output is \\"-1\\".","solution":"def find_min_and_second_min_network(N, M, cables): from heapq import heappop, heappush def kruskal(n, edges, banned_edge=None): parent = list(range(n)) rank = [0] * n total_cost = 0 edges_used = 0 def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False heap = [] for edge in edges: if edge != banned_edge: heappush(heap, edge) while heap and edges_used < n - 1: w, u, v = heappop(heap) if union(u, v): total_cost += w edges_used += 1 return total_cost if edges_used == n - 1 else float(\'inf\') edges = [] for u, v, w in cables: edges.append((w, u - 1, v - 1)) edges.sort() min_cost = kruskal(N, edges) if min_cost == float(\'inf\'): return -1 second_min_cost = float(\'inf\') for w, u, v in edges: banned_edge = (w, u, v) cost_with_ban = kruskal(N, edges, banned_edge) if cost_with_ban > min_cost: second_min_cost = min(second_min_cost, cost_with_ban) if second_min_cost == float(\'inf\'): return min_cost, -1 return min_cost, second_min_cost # Driver function to facilitate the input/output mechanism def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) cables = [] index = 2 for i in range(M): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) cables.append((u, v, w)) index += 3 result = find_min_and_second_min_network(N, M, cables) print(result[0], result[1])"},{"question":"<!-- Problem A --> String Transformations You are given two strings, `s` and `t`, and you need to determine if it is possible to transform string `s` into string `t` using a series of allowed operations. The allowed operations are: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character with another character. Each operation has an associated cost. Given the costs: - `ci` for insertion, - `cd` for deletion, - `cr` for replacement, Your task is to compute the minimum cost required to transform `s` into `t`. Input The input consists of multiple test cases. Each test case is described in the following format: > ci cd cr > s > t Where `ci`, `cd`, and `cr` are integers (1 ≤ ci, cd, cr ≤ 1000) representing the costs of insertion, deletion, and replacement operations respectively. The strings `s` and `t` are composed of lowercase English letters (`a`-`z`) and their lengths are 1 ≤ |s|, |t| ≤ 1000. The end of the input is indicated by a line containing three zeros: > 0 0 0 Output For each test case, output the minimum cost required to transform `s` into `t`. Sample Input 1 1 1 sunday saturday 2 3 4 abc yabd 0 0 0 Output for the Sample Input 3 6 Example Input 1 1 1 sunday saturday 2 3 4 abc yabd 0 0 0 Output 3 6","solution":"def min_cost_to_transform(ci, cd, cr, s, t): Returns the minimum cost to transform string s into string t using the given costs for insertion, deletion, and replacement. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j * ci elif j == 0: dp[i][j] = i * cd elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] else: insert_cost = dp[i][j-1] + ci delete_cost = dp[i-1][j] + cd replace_cost = dp[i-1][j-1] + cr dp[i][j] = min(insert_cost, delete_cost, replace_cost) return dp[m][n]"},{"question":"In a large software development company, the engineering manager wants to measure how efficiently the code is tested by the developers. The team is working on a system that logs when a test case starts and when it ends. However, due to the complexity of the system, there are multiple test cases running concurrently, and it becomes challenging to evaluate which tests overlapped with each other. Your task is to write a function that calculates the maximum number of test cases that were running simultaneously at any point in time. You will be given an integer n which represents the number of test cases, and two lists of integers start and end, both of length n, where start[i] and end[i] denote the start and end times of the i-th test case, respectively. You can assume that the start times and end times are given in non-decreasing order. Write a function `maxOverlap(n: int, start: List[int], end: List[int]) -> int` that returns the maximum number of test cases that are running simultaneously. # Input - An integer n (1 ≤ n ≤ 10<sup>5</sup>) — the number of test cases. - A list of integers start of length n — start times. - A list of integers end of length n — end times. # Output - A single integer — the maximum number of test cases running simultaneously. # Example Example 1 Input: ```python n = 3 start = [1, 2, 3] end = [4, 5, 6] ``` Output: ```python 3 ``` Explanation: All three test cases overlap between time 3 and 4. Example 2 Input: ```python n = 5 start = [1, 2, 3, 5, 6] end = [4, 5, 6, 7, 8] ``` Output: ```python 3 ``` Explanation: The three test cases overlap between time 3 and 4. Max overlap of 3 occurs at time 3. # Note To solve the problem efficiently, you may want to use a two-pointer technique or a sweep line algorithm.","solution":"def maxOverlap(n, start, end): start.sort() end.sort() i = 0 j = 0 current_tests = 0 max_tests = 0 while i < n and j < n: if start[i] < end[j]: current_tests += 1 max_tests = max(max_tests, current_tests) i += 1 else: current_tests -= 1 j += 1 return max_tests"},{"question":"In a theme park, there is a popular ride called \\"The Train of Adventure\\". The train has a seating configuration that consists of multiple compartments, each containing a specific number of rows of seats. Each row has a specific number of seats. For instance, a compartment might have 3 rows with 4 seats each, and another could have 2 rows with 3 seats each. The company running the theme park wants to optimize the assignment of families to the compartments of the train. Each family requires consecutive seats in the same row, and the number of seats each family needs can vary. Your task is to design a program that, given the seating configuration of the train\'s compartments and a list of families with their respective seat requirements, determines if all families can be seated according to their needs. If all families can be seated appropriately, your program should output \\"Yes\\". Otherwise, it should output \\"No\\". Input The input consists of: - An integer `C` (1 ≤ C ≤ 10) representing the number of compartments. - For each compartment, a series of integers, starting with an integer `R` (1 ≤ R ≤ 100) representing the number of rows in that compartment, followed by `R` integers, each representing the number of seats in a row. - An integer `F` (1 ≤ F ≤ 100) representing the number of families. - `F` integers, each representing the number of consecutive seats required by a family. Output The output should be a single line with either \\"Yes\\" or \\"No\\". Example Input 3 3 4 4 4 2 3 3 1 5 4 3 2 4 2 Output Yes Explanation - The first compartment has 3 rows with 4 seats each. - The second compartment has 2 rows with 3 seats each. - The third compartment has 1 row with 5 seats. - There are 4 families needing 3, 2, 4, and 2 consecutive seats respectively. All families can be seated as follows: - Family 1 (3 seats) can sit in any row of the first compartment. - Family 2 (2 seats) can sit in any row of the first or second compartment. - Family 3 (4 seats) can sit in any row of the first compartment or the single row of the third compartment. - Family 4 (2 seats) can sit in any row of the first or second compartment. Since all families can be seated, the output is \\"Yes\\".","solution":"def can_all_families_be_seated(C, compartments, F, families): seat_counts = [] for compartment in compartments: seat_counts.extend(compartment[1:]) seat_counts.sort(reverse=True) families.sort(reverse=True) for family in families: seat_assigned = False for i in range(len(seat_counts)): if seat_counts[i] >= family: seat_counts[i] -= family seat_assigned = True break if not seat_assigned: return \\"No\\" return \\"Yes\\""},{"question":"You are given an array of integers and a target sum. Your task is to count the number of pairs of integers in the array that sum up to the target value. Each pair should be counted only once, and the order of elements in the pair does not matter. Input The input consists of: - The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of elements in the array. - The second line contains n integers, each representing an element in the array. - The third line contains the target sum. Output Output the count of distinct pairs that sum up to the target value. Examples Input 5 1 5 7 -1 5 6 Output 2 Input 4 1 1 1 1 2 Output 1 Input 6 10 12 10 15 -1 7 22 Output 2","solution":"def count_pairs_with_sum(n, arr, target_sum): Counts the number of distinct pairs in the array that sum up to the target value. Parameters: n (int): Number of elements in the array. arr (list of int): The array of integers. target_sum (int): The target sum to find pairs for. Returns: int: Number of distinct pairs that sum up to the target value. count = 0 seen = set() pairs = set() for num in arr: complement = target_sum - num if complement in seen: if (num, complement) not in pairs and (complement, num) not in pairs: count += 1 pairs.add((num, complement)) seen.add(num) return count"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node i has a value `a_i` associated with it. A node is called a **distinctive node** if for each node connected directly to it, the value at the distinctive node is unique compared to the values of its directly connected neighboring nodes. Find the number of distinctive nodes in the graph. # Input The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2⋅10^5) — the number of nodes and edges in the graph respectively. The next line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9), representing the values assigned to each node. The following `m` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n), denoting an undirected edge between nodes `u` and `v`. # Output Print a single integer — the number of distinctive nodes in the graph. # Examples Input ``` 5 4 1 2 3 2 5 1 2 1 3 2 4 3 5 ``` Output ``` 3 ``` Input ``` 3 2 1 1 1 1 2 2 3 ``` Output ``` 0 ``` # Note In the first example, nodes 1, 3, and 5 are distinctive nodes because: - Node 1 has value 1 which is different from the values of its neighbors (2 and 3). - Node 3 has value 3 which is different from the values of its neighbors (1 and 5). - Node 5 has value 5 which is different from the value of its only neighbor (3). In the second example, no node is a distinctive node because all nodes have the same value.","solution":"def count_distinctive_nodes(n, m, node_values, edges): from collections import defaultdict neighbors = defaultdict(set) for u, v in edges: neighbors[u].add(node_values[v-1]) neighbors[v].add(node_values[u-1]) distinctive_count = 0 for i in range(n): if node_values[i] not in neighbors[i+1]: distinctive_count += 1 return distinctive_count"},{"question":"In a distant coding galaxy, there exists a special kind of array called a **galactic array**. A galactic array is a sequence of integers where: 1. The absolute difference between any two consecutive elements is exactly 1. 2. The elements should vary regularly between increasing and decreasing sequences by 1. You are assigned a task to determine if a given array is a galactic array. For example, the array `[2, 3, 2, 1, 0]` is a galactic array, while the array `[1, 3, 2, 4]` is not. # Input - The first line of the input contains a single integer `n` (2 ≤ n ≤ 100 000) — the length of the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. # Output - Print \\"YES\\" if the given array is a galactic array. - Otherwise, print \\"NO\\". # Examples Input ``` 5 1 2 1 0 1 ``` Output ``` YES ``` Input ``` 3 4 5 4 ``` Output ``` YES ``` Input ``` 4 3 2 4 3 ``` Output ``` NO ``` Input ``` 6 6 7 6 5 6 7 ``` Output ``` YES ``` # Note - In the first example, the sequence 1, 2, 1, 0, and then up to 1 satisfies the condition of a galactic array. - In the third example, the sequence breaks between the elements 2 and 4. Hence, it is not a galactic array.","solution":"def is_galactic_array(n, arr): Determine if the given array is a galactic array. Parameters: n (int): Length of the array arr (list of int): The elements of the array Returns: str: \\"YES\\" if the array is a galactic array, otherwise \\"NO\\" for i in range(1, n): if abs(arr[i] - arr[i - 1]) != 1: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that simulates a simple voting system. The system should keep track of votes for different candidates and be able to declare a winner or determine if there is a tie. Your task is to implement the following three functions: 1. `vote(candidate_name)`: This function registers a vote for a candidate. The candidate\'s name is a string. If the candidate does not exist in the current vote tally, they should be added. 2. `winner()`: This function returns the name of the candidate with the highest number of votes. If there is a tie, it should return the string \\"Tie\\". 3. `reset()`: This function clears all the current votes, resetting the voting system to its initial state. # Input The functions should work as follows: ``` vote(\\"Alice\\") vote(\\"Bob\\") vote(\\"Alice\\") ``` After calling the above functions, the system should register two votes for Alice and one for Bob. ``` winner() ``` This should return \\"Alice\\" as she has the most votes. ``` reset() ``` This resets the system. After calling reset, the next call to `winner()` should return \\"Tie\\" as there are no votes. # Output The output is the result of calling the `winner()` function, which could be either the name of the candidate with the most votes or the string \\"Tie\\" in case of a tie. # Example Here is how we expect the functions to work: ``` # Example usage: vote(\\"Alice\\") vote(\\"Bob\\") vote(\\"Alice\\") print(winner()) # Outputs: Alice reset() vote(\\"Alice\\") vote(\\"Bob\\") vote(\\"Bob\\") print(winner()) # Outputs: Bob reset() vote(\\"Alice\\") vote(\\"Bob\\") print(winner()) # Outputs: Tie ``` Note: Make sure your implementation handles large inputs efficiently and correctly.","solution":"from collections import defaultdict # Initialize the vote dictionary vote_dict = defaultdict(int) def vote(candidate_name): Registers a vote for a candidate. If the candidate does not exist in the current vote tally, they are added. vote_dict[candidate_name] += 1 def winner(): Returns the name of the candidate with the highest number of votes. In the case of a tie, it returns \\"Tie\\". if not vote_dict: return \\"Tie\\" max_votes = max(vote_dict.values()) candidates_with_max_votes = [candidate for candidate, votes in vote_dict.items() if votes == max_votes] if len(candidates_with_max_votes) == 1: return candidates_with_max_votes[0] else: return \\"Tie\\" def reset(): Clears all the current votes, resetting the voting system. vote_dict.clear()"},{"question":"You are tasked with managing a dormitory system where you need to assign rooms to students based on their preferences. Each student has a list of room preferences, and each room can only accommodate one student. If a student\'s top preference is not available, they should be accommodated in their next preferred choice, and so forth. Write a program to automate the room assignment process. Given a number of students and a number of rooms along with the students\' room preferences, determine the optimal assignment of students to rooms such that as many students as possible receive their highest priority room choice. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of students and the number of rooms, respectively. The next n lines describe the preferences of each student. Each line starts with an integer k (1 ≤ k ≤ m), the number of preferred rooms followed by k integers representing the room numbers (1-based indices) in order of preference. Output Output n lines. Each line should contain two integers: the student\'s index (1-based) and the assigned room number. If a student cannot be assigned any room from their preference list, output -1 for that student. Examples Input 3 3 2 1 2 2 2 3 1 1 Output 1 1 2 2 3 -1 Input 4 5 3 4 2 1 2 5 3 1 2 2 3 1 Output 1 4 2 5 3 2 4 3 Note In the first example, student 1 gets room 1, student 2 gets room 2, and student 3 does not get any room as room 1 is already taken by student 1. In the second example, student 1 gets room 4 as it is their top priority choice and available; student 2 gets room 5, student 3 gets room 2 and student 4 gets room 3 based on the next available preferences considering the choices already taken by the previous students.","solution":"def assign_rooms(n, m, preferences): room_assignments = [-1] * n room_taken = [False] * m for student_index in range(n): preferred_rooms = preferences[student_index] for room in preferred_rooms: if not room_taken[room - 1]: room_assignments[student_index] = room room_taken[room - 1] = True break return [(i + 1, room_assignments[i]) for i in range(n)]"},{"question":"You are given a list of integers representing the fitness levels of athletes in a gym. Your task is to partition the entire list into two non-empty subsets such that the difference between the sums of fitness levels in these subsets is minimized. If there are multiple such partitionings, you can print any one of them. Input The first line contains a single integer n (2 ≤ n ≤ 50) — the number of athletes. The second line contains n integers f_1, f_2, ..., f_n (1 ≤ f_i ≤ 100), where f_i denotes the fitness level of the i-th athlete. Output Print two lines. The first line should contain the number of athletes in the first subset followed by their indices. The second line should contain the number of athletes in the second subset followed by their indices. Indices should be 1-based and the athletes in each subset can be listed in any order. Examples Input 4 4 3 2 7 Output 2 1 3 2 2 4 Input 3 10 5 1 Output 1 1 2 2 3 Note In the first example, one possible partition is {4, 2} and {3, 7}. Here, the sum of the fitness levels is 6 for the first subset and 10 for the second subset, with a difference of 4 which is minimized. In the second example, one possible partition is {10} and {5, 1}. Here, the sum of the fitness levels is 10 for the first subset and 6 for the second subset, with a difference of 4 which is minimized. In both cases, other partitions with a similar difference can also exist.","solution":"from itertools import combinations def partition_athletes(n, fitness_levels): Partition the list of athletes into two subsets such that the difference in their sums is minimized. Args: n: integer, number of athletes. fitness_levels: list of integers, representing the fitness levels of athletes. Returns: Tuple containing two lists: each list includes number of athletes in the subset followed by their indices. indices = list(range(1, n+1)) total_sum = sum(fitness_levels) min_diff = float(\'inf\') best_partition = ([], []) for i in range(1, n): for comb in combinations(indices, i): subset1_indices = list(comb) subset2_indices = list(set(indices) - set(subset1_indices)) subset1_sum = sum(fitness_levels[j-1] for j in subset1_indices) subset2_sum = total_sum - subset1_sum current_diff = abs(subset1_sum - subset2_sum) if current_diff < min_diff: min_diff = current_diff best_partition = (subset1_indices, subset2_indices) return len(best_partition[0]), best_partition[0], len(best_partition[1]), best_partition[1] # Example usage # Uncomment the lines below to test the function manually # n = 4 # fitness_levels = [4, 3, 2, 7] # print(partition_athletes(n, fitness_levels)) # n = 3 # fitness_levels = [10, 5, 1] # print(partition_athletes(n, fitness_levels))"},{"question":"A group of friends is designing a new game called \\"Roll and Score\\". The game involves rolling a distinct set of differently weighted dice, obtaining a score for each die based on the side facing up after each roll. The goal of the game is to determine the highest possible score by rolling all the dice once. Each die has a unique set of numbers on its sides, and you are given an array representing the maximum possible score for each die (i.e., the highest number on each die). Your task is to determine the maximum total score possible by rolling all the dice once. Input You are given an array of integers `diceScores` where each element represents the highest number on a corresponding die. The length of the array can vary from 1 to 10^6, and each integer in the array is between 1 and 1000 (inclusive). Output Print a single integer which is the highest possible total score by rolling all the dice once. Examples Input [6, 8, 7, 9] Output 30 Explanation: The highest possible score is achieved by summing the highest number of each die, i.e., 6 + 8 + 7 + 9 = 30.","solution":"def max_total_score(diceScores): Given an array of integers representing the highest score for each die, return the highest possible total score by rolling all the dice once. return sum(diceScores)"},{"question":"You are given the coordinates of several points on a plane. Your task is to determine the minimum area of a rectangle that can be formed with sides parallel to the x and y axes that encompasses all the given points. Input The first input line contains an integer n (1 ≤ n ≤ 100) — the number of points. Each of the next n lines contains two space-separated integers x and y (−1000 ≤ x, y ≤ 1000) — the coordinates of the points. Output Print the minimum area of the rectangle that can encompass all the given points. Examples Input 4 1 1 2 2 3 3 4 4 Output 9 Input 3 0 0 -1 -1 1 1 Output 4 Note In the first sample, the smallest rectangle that can encompass all points has corners at (1,1) and (4,4). The area of this rectangle is (4 - 1) * (4 - 1) = 9. In the second sample, the smallest rectangle that can encompass all points has corners at (-1,-1) and (1,1). The area of this rectangle is (1 - (-1)) * (1 - (-1)) = 4.","solution":"def min_rectangle_area(n, points): Calculate the minimum area of a rectangle that can encompass all given points. :param n: int - Number of points :param points: List[Tuple[int, int]] - List of tuples containing the coordinates of points :returns: int - Minimum area of the encompassing rectangle if n == 1: return 0 # With one point, there\'s no rectangle, hence area is 0 min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) area = (max_x - min_x) * (max_y - min_y) return area"},{"question":"Consider a warehouse management system that needs to process a sequence of operations to manage the inventory. The warehouse consists of various types of items, each identified by a unique string ID. The system supports three types of operations: addition of new items, removal of existing items, and querying the current inventory status. Each operation is represented by a string, starting with an identifier (\'ADD\', \'REMOVE\', or \'QUERY\'), followed by the necessary parameters: - \\"ADD <item_id> <quantity>\\": Adds the specified quantity of the item with the given item_id to the inventory. If the item already exists, increment its quantity by the provided amount. - \\"REMOVE <item_id> <quantity>\\": Removes the specified quantity of the item with the given item_id from the inventory. If the item\'s quantity falls to zero or below, it is removed from the inventory. - \\"QUERY\\": Prints the current inventory status including all item_id\'s and their corresponding quantities in alphabetical order of item_id. Write a program that processes a sequence of operations and outputs the results of the \\"QUERY\\" operations. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations to be processed. - Each of the next n lines contains an operation in one of the three formats described above. Output: - For each \\"QUERY\\" operation, print the current state of the inventory in alphabetical order of item_id, where each line contains an item_id and its quantity separated by a space. If the inventory is empty, print \\"EMPTY\\". Example: Input: ``` 7 ADD apple 10 ADD banana 5 REMOVE apple 3 QUERY ADD apple 2 REMOVE banana 5 QUERY ``` Output: ``` apple 7 banana 5 apple 9 EMPTY ```","solution":"def process_operations(n, operations): inventory = {} def add_item(item_id, quantity): if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity def remove_item(item_id, quantity): if item_id in inventory: inventory[item_id] -= quantity if inventory[item_id] <= 0: del inventory[item_id] def query_inventory(): if inventory: for item_id in sorted(inventory.keys()): print(f\\"{item_id} {inventory[item_id]}\\") else: print(\\"EMPTY\\") for operation in operations: parts = operation.split() command = parts[0] if command == \'ADD\': item_id = parts[1] quantity = int(parts[2]) add_item(item_id, quantity) elif command == \'REMOVE\': item_id = parts[1] quantity = int(parts[2]) remove_item(item_id, quantity) elif command == \'QUERY\': query_inventory()"},{"question":"Implement a program that can calculate the minimum number of operations required to convert a given string into a palindrome. An operation is defined as changing any one character in the string to any other character. A string is considered a palindrome if it reads the same backward as forward. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^6) consisting only of lowercase English letters. Output Output a single integer — the minimum number of operations required to make the string a palindrome. Examples Input abca Output 1 Input racecar Output 0 Input mnop Output 2","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to convert the string s into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"A warehouse is organizing its inventory through robotic arms that can sort packages placed on a conveyor belt. However, the packages need to be sorted in a specific order based on their dimensions. Each package has three dimensions: length, width, and height, and it needs to be sorted such that packages with smaller dimensions come before those with larger ones. Write a program to sort the packages based on their dimensions in non-decreasing order. If two packages have the same length, then they should be sorted by width. If they also have the same width, they should be sorted by height. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of packages. The next n lines each contain three integers l, w, h (1 ≤ l, w, h ≤ 1000) — the length, width, and height of each package. Output: Print n lines. Each line should contain three integers l, w, h representing the dimensions of the packages in sorted order. Examples Input: 5 5 4 2 3 2 1 5 4 1 3 2 3 3 3 3 Output: 3 2 1 3 2 3 3 3 3 5 4 1 5 4 2 Input: 4 2 5 6 2 3 4 3 2 1 2 3 2 Output: 2 3 2 2 3 4 2 5 6 3 2 1 Note: In the first example, the packages are sorted first by length. When lengths are the same, packages are then sorted by width. If both length and width are the same, they are finally sorted by height. In the second example, the same sorting criteria apply.","solution":"def sort_packages(n, packages): Sorts the packages based on their dimensions. Parameters: n (int): The number of packages. packages (list of tuples): List containing the dimensions of packages. Returns: list of tuples: Sorted dimensions of packages. packages.sort(key=lambda x: (x[0], x[1], x[2])) return packages"},{"question":"A group of people is standing in a line with each person labeled with a unique number. You are given an array of integers representing the initial positions of the people in the line. The goal is to sort the array in a sequence such that the sum of the absolute differences of consecutive elements is minimized. Specifically, if the array is sorted as [a1, a2, ..., an], the target is to minimize the sum: |a2 - a1| + |a3 - a2| + ... + |an - an-1| Write a program to determine the optimal rearrangement of the array. Input The input consists of one line containing an integer n (2 ≤ n ≤ 50), followed by a line containing n distinct integers ai (-10^4 ≤ ai ≤ 10^4). Output Output the rearranged sequence of n integers such that the sum of the absolute differences of consecutive elements is minimized. Examples Input 4 4 1 8 10 Output 4 1 8 10 Input 3 3 8 5 Output 3 5 8 Note In the first example, the original order already minimizes the sum of differences (|1 - 4| + |8 - 1| + |10 - 8| = 3 + 7 + 2 = 12). In the second example, sorting the array simplifies it into [3, 5, 8], which results in |5 - 3| + |8 - 5| = 2 + 3 = 5.","solution":"def optimal_rearrangement(n, arr): Returns the rearranged sequence of n integers such that the sum of the absolute differences of consecutive elements is minimized. arr.sort() result = [] for i in range(n // 2): result.append(arr[i]) if n - i - 1 != i: result.append(arr[n - i - 1]) if n % 2 != 0: result.append(arr[n // 2]) return result"},{"question":"Nina and Rahul are playing a game with arrays. They each have an array of integers. The game is played in k rounds. In each round, Nina can choose to either append one of the integers from her array to Rahul\'s array or skip to the next round. Rahul wins the game if, at the end of k rounds, his array is sorted in strictly increasing order, and if after k rounds the array is not sorted in strictly increasing order, Nina wins the game. Consider that Rahul\'s array can have duplicate numbers initially and Nina\'s array is empty initially. Note that the appended integer can only be one of Rahul\'s array elements. Your task is to help Nina choose whether to append an integer to Rahul\'s array or to skip the round, with the ultimate objective to make Rahul win if possible. Input: The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the length of Rahul\'s array and the number of rounds. The second line contains n integers — the elements of Rahul\'s array. Output: For each round, output \\"APPEND x\\" (where x is the integer to be appended from Rahul\'s array) or \\"SKIP\\" if Nina decides to skip the round. Example: Input: 4 3 1 3 3 2 Output: APPEND 3 APPEND 2 APPEND 1 In this example, Nina had three opportunities to append elements to Rahul\'s array with the goal of making it strictly increasing by the end of the rounds. After analyzing the integers, she made decisions accordingly to help Rahul win.","solution":"def game(n, k, array): Function to determine the actions Nina should take in each round. Args: n (int): length of Rahul\'s array. k (int): number of rounds. array (list): the elements of Rahul\'s array. Returns: list of str: actions for each round. actions = [] sorted_array = sorted(set(array)) current_index = 0 for _ in range(k): if current_index < len(sorted_array): actions.append(f\\"APPEND {sorted_array[current_index]}\\") current_index += 1 else: actions.append(\\"SKIP\\") return actions"},{"question":"In a large building, there are multiple floors, and each floor contains several rooms. All rooms on on each floor are connected in a single row. You can move from one room to an adjacent room for free, but moving from one floor to another requires taking an elevator. For simplicity, we assume there are two elevators, each located at room 1 and room N on each floor respectively. It costs a certain amount to ride the elevator, and the cost is represented by an array `liftCost` where `liftCost[i]` is the cost to take the elevator on floor `i`. You are to start your journey from room 1 on floor 1 and your goal is to reach room N on floor M, with the minimum cost possible. You can only use the elevator to travel between floors, and you can start and end your travel at any room you desire on each floor. Calculate the minimum cost needed to reach your destination. Input: * `M` — the number of floors (2 <= M <= 100) * `N` — the number of rooms on each floor (2 <= N <= 100) * `liftCost` — the list of integers `liftCost[1], liftCost[2], ..., liftCost[M]` representing the cost of taking the elevator from that floor. The input is given from Standard Input in the following format: ``` M N liftCost[1] liftCost[2] : liftCost[M] ``` Output: Print a single integer, denoting the minimum cost needed to go from room 1 on floor 1 to room N on floor M. Examples: Input: ``` 3 4 2 3 1 ``` Output: ``` 6 ``` Input: ``` 4 5 10 20 30 40 ``` Output: ``` 100 ``` Input: ``` 2 3 5 4 ``` Output: ``` 9 ``` Explanation: In Example 1, the minimum cost is achieved by the following steps: 1. Travel from room 1 on floor 1 to the elevator at room 4 on floor 1 (cost = 0) 2. Take the elevator to floor 2 (cost = 2) 3. Travel from room 4 on floor 2 to the elevator at room 1 on floor 2 (cost = 0) 4. Take the elevator to floor 3 (cost = 3) 5. Travel from room 1 on floor 3 to room 4 on floor 3 (cost = 0) Total cost = 2 + 3 + 1 = 6","solution":"def min_cost_to_reach_destination(M, N, liftCost): Calculates the minimum cost to reach from room 1 on floor 1 to room N on floor M. Parameters: M : int : the number of floors. N : int : the number of rooms on each floor. liftCost : List[int] : the list of costs to take the elevator on each floor. Returns: int : the minimum cost. # Initialize a 2D array to keep track of minimum costs to reach each room on each floor dp = [[float(\'inf\')] * 2 for _ in range(M)] # Starting at room 1 on floor 1, no cost needed dp[0][0] = 0 dp[0][1] = 0 for i in range(1, M): # Update costs for both entry points on the current floor using the elevator costs dp[i][0] = min(dp[i-1][0], dp[i-1][1]) + liftCost[i-1] # From either entry of previous floor dp[i][1] = min(dp[i-1][0], dp[i-1][1]) + liftCost[i-1] # From either entry of previous floor # Minimum cost to reach either entry on the last floor return min(dp[M-1][0], dp[M-1][1]) + liftCost[M-1] # Example usage: # M, N = 3, 4 # liftCost = [2, 3, 1] # print(min_cost_to_reach_destination(M, N, liftCost)) # Output: 6"},{"question":"You are given a list of n points in a 2D plane and an integer k. Your task is to find the k closest points to the origin (0, 0). Input The first line of the input contains two space-separated integers — n and k (1 ≤ k ≤ n ≤ 10^5). The next n lines contain the coordinates of the points. The i-th line contains two space-separated integers — xi and yi (−10^4 ≤ xi, yi ≤ 10^4). Output Print k lines, each containing two space-separated integers — the coordinates of one of the closest points to the origin. The points should be printed in ascending order based on their distance to the origin. If there are multiple points at the same distance, print them in any order. Examples Input 5 2 1 3 -2 2 5 8 0 0 -1 -1 Output 0 0 -1 -1 Input 3 3 3 3 5 -1 -2 4 Output 3 3 5 -1 -2 4 Note The distance between two points (xi, yi) and the origin (0, 0) is calculated using the Euclidean distance formula: sqrt(xi^2 + yi^2).","solution":"import heapq import math def k_closest_points(points, k): Finds the k closest points to the origin (0, 0). Parameters: points (list of tuples): List of points as (x, y). k (int): Number of closest points to find. Returns: list of tuples: k closest points to the origin in no particular order. # Create a list of tuples (distance_squared, x, y) distances = [] for x, y in points: distance_squared = x ** 2 + y ** 2 distances.append((distance_squared, x, y)) # Use a min-heap to get the k points with smallest distance_squared k_closest = heapq.nsmallest(k, distances) # Extract the points from the heap tuples and return them return [(x, y) for _, x, y in k_closest]"},{"question":"A retailer wants to keep track of the inventory in their store. Each product in the store is uniquely identified by an ID and has a certain quantity available in stock. Sometimes, suppliers deliver more stock of certain products, and sometimes customers buy products, resulting in changes to the stock levels. The retailer needs a program that can handle supplier deliveries, customer purchases, and check for out-of-stock products. The program should process a series of inventory transactions: - \\"DELIVER ID QTY\\": More of a product with ID has been delivered. Increase the stock of this product by QTY. - \\"SELL ID QTY\\": Some of a product with ID has been sold. Decrease the stock of this product by QTY. - \\"CHECK ID\\": Check the current stock quantity of the product with ID. - \\"OUTOFSTOCK\\": Print the IDs of all products that are currently out of stock (quantity 0). Your task is to implement this inventory management system. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of transactions. The next n lines contain one of the four possible transactions described above. For \\"DELIVER\\" and \\"SELL\\" transactions, it is guaranteed that: - 1 ≤ ID ≤ 100 - 1 ≤ QTY ≤ 100 Output For each \\"CHECK\\" transaction, output the current stock of the product with the specified ID. For the \\"OUTOFSTOCK\\" transaction, output all out-of-stock product IDs in ascending order, separated by spaces. If no products are out of stock, output \\"None\\". Example Input 7 DELIVER 1 50 SELL 1 20 CHECK 1 SELL 1 30 CHECK 1 OUTOFSTOCK SELL 2 10 Output 30 0 1 Note In the third transaction, the stock of product 1 is 30 after delivering 50 and selling 20. In the fifth transaction, the stock of product 1 is 0 after selling the remaining 30. In the sixth transaction, since the stock of product 1 is 0, it\'s considered out of stock. Therefore, \\"OUTOFSTOCK\\" transaction prints 1.","solution":"def inventory_management(n, transactions): inventory = {} results = [] for transaction in transactions: parts = transaction.split() action = parts[0] if action == \\"DELIVER\\": product_id = int(parts[1]) qty = int(parts[2]) if product_id not in inventory: inventory[product_id] = 0 inventory[product_id] += qty elif action == \\"SELL\\": product_id = int(parts[1]) qty = int(parts[2]) if product_id not in inventory: inventory[product_id] = 0 inventory[product_id] -= qty if inventory[product_id] < 0: inventory[product_id] = 0 # Cannot have negative stock elif action == \\"CHECK\\": product_id = int(parts[1]) current_stock = inventory.get(product_id, 0) results.append(current_stock) elif action == \\"OUTOFSTOCK\\": out_of_stock_items = [id for id, qty in inventory.items() if qty == 0] if out_of_stock_items: results.append(\\" \\".join(map(str, sorted(out_of_stock_items)))) else: results.append(\\"None\\") return results"},{"question":"John loves Fibonacci numbers and wants to create a special list based on them. He has a list p of m unique positive integers, and he asked you to find another list q of the same length such that: - q contains only Fibonacci numbers. - q contains each Fibonacci number exactly once. - The sum of the elements in q is as close as possible to the sum of the elements in p. For simplicity, the Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, ... You need to find a valid q list and print it. Input The first line contains an integer m (1 ≤ m ≤ 100), the length of the list p. The second line contains m unique integers p1, p2, ..., pm (1 ≤ pi ≤ 10^6), the elements of the list p. Output Output m space-separated integers, representing the elements of list q. Example Input 4 10 22 35 50 Output 8 21 34 55","solution":"def generate_fibonacci_until(max_value): fibs = [1, 1] while True: next_fib = fibs[-1] + fibs[-2] if next_fib > max_value: break fibs.append(next_fib) return fibs def find_closest_fib_subset(p, fibs): target_sum = sum(p) m = len(p) closest_subset = [] current_sum = 0 index = len(fibs) - 1 while m > 0: while current_sum + fibs[index] <= target_sum and m > 0: closest_subset.append(fibs[index]) current_sum += fibs[index] m -= 1 index -= 1 return closest_subset def find_fib_list(m, p): max_possible_value = sum(p) fibs = generate_fibonacci_until(max_possible_value) result = find_closest_fib_subset(p, fibs) return result def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) p = list(map(int, data[1:])) q = find_fib_list(m, p) print(\\" \\".join(map(str, q))) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of characters that represents a command for a turtle graphics system. Turtle graphics is a method for programming vector graphics using a relative cursor (the \\"turtle\\") upon a Cartesian plane. The commands consist of the following characters: - \'F\' - Move forward by one unit. - \'R\' - Turn right 90 degrees. - \'L\' - Turn left 90 degrees. Assume the turtle always starts at the origin (0, 0) and it begins facing north (positive y direction). Write a program that simulates the path of the turtle, and computes the final coordinates (x, y) after executing the given sequence of commands. Input The input is a single line containing a sequence of characters, where each character is one of \'F\', \'R\', or \'L\'. The length of the sequence is from 1 to 100 characters, inclusive. Output Print the final coordinates (x, y) of the turtle after executing all commands. Examples Input FFRF Output 1 2 Input FFLFF Output -2 2","solution":"def turtle_path(commands): Computes the final coordinates (x, y) of the turtle after executing the given sequence of commands. The turtle starts at the origin (0, 0) and begins facing north (positive y direction). Args: commands (str): A string containing the sequence of commands, each character is one of \'F\', \'R\', or \'L\'. Returns: tuple: The final coordinates (x, y) of the turtle. x, y = 0, 0 direction = 0 # 0->North, 1->East, 2->South, 3->West direction_map = [(0, 1), (1, 0), (0, -1), (-1, 0)] for command in commands: if command == \'F\': dx, dy = direction_map[direction] x += dx y += dy elif command == \'R\': direction = (direction + 1) % 4 elif command == \'L\': direction = (direction - 1) % 4 return x, y"},{"question":"Problem Description: A popular storage company uses containers for transitioning goods across the country. Each container has a specific weight and is identified by its ID. Some containers are added to new shipments, while others may be removed as they reach their destinations. The containers on a particular shipment must always be listed in ascending order of their ID numbers in the company\'s system. Due to an influx of container items, the system is now tasked with finding the heaviest container that has an ID within a given range. Your task is to design a program that will help the company efficiently find the heaviest container in the specified ID range. Given a number of operations that either add, remove, or query containers, write a program to perform these operations and return the desired results for each query. Input The first line contains an integer q denoting the number of operations. The next q lines describe the operations, which can be of three types: 1. \\"add id weight\\" - Adds a container with a specified id and weight. 2. \\"remove id\\" - Removes a container with a specified id. 3. \\"query L R\\" - Finds and returns the maximum weight of all containers with IDs in inclusive range [L, R]. Output For each query, output a single line containing the maximum weight within the specified ID range, or -1 if there are no containers in that range. Constraints 1 ≤ q ≤ 100000 1 ≤ id ≤ 1000000 1 ≤ weight ≤ 10000 1 ≤ L, R ≤ 1000000 Example Input: 8 add 1 100 add 2 80 add 3 90 query 1 2 add 4 200 query 1 4 remove 2 query 2 4 query 1 1 Output: 100 200 200 100 Explanation Example case 1. - The first query asks for the heaviest container between IDs 1 and 2. The heaviest is 100. - After adding a container with ID 4 and weight 200, the second query spans IDs 1 to 4, among which 200 is the heaviest. - Removing the container with ID 2, the third query checks IDs 2 to 4. The heaviest is still 200. - The final query is specific to ID 1, whose weight is 100.","solution":"def storage_operations(operations): Processes a sequence of storage operations and returns the results of queries. Args: operations (list): A list of strings each representing an operation. Returns: list: Results of the queries. import heapq containers = {} results = [] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \\"add\\": id = int(parts[1]) weight = int(parts[2]) containers[id] = weight elif op_type == \\"remove\\": id = int(parts[1]) if id in containers: del containers[id] elif op_type == \\"query\\": L = int(parts[1]) R = int(parts[2]) max_weight = -1 for id in range(L, R + 1): if id in containers: max_weight = max(max_weight, containers[id]) results.append(max_weight) return results"},{"question":"Polycarp\'s friend Vasya is part of a delivery drone competition. The rules state a delivery drone should: * start the delivery from a warehouse located at point (x1, y1) on a grid, * deliver a package to a customer\'s location at point (x2, y2), * return back to the warehouse at point (x1, y1). The drone can navigate the grid by moving one unit horizontally or vertically in one tick, meaning it can move from point (x, y) to any of the four points: (x - 1, y), (x + 1, y), (x, y - 1), or (x, y + 1). However, Vasya’s drone must avoid a no-fly zone which forms a rectangular region with corners at (x3, y3) and (x4, y4). The drone must choose a path that minimizes the distance traveled while avoiding the no-fly zone. What is the length of the minimal path for the delivery drone to complete its delivery and return to the warehouse while avoiding the no-fly zone? Input The first line contains two integer numbers x1 and y1 ( -100 ≤ x1, y1 ≤ 100) — coordinates of the warehouse. The second line contains two integer numbers x2 and y2 ( -100 ≤ x2, y2 ≤ 100) — coordinates of the customer\'s location. The third line contains four integer numbers x3, y3, x4, y4 ( -100 ≤ x3, y3, x4, y4 ≤ 100) — coordinates of the no-fly zone corners. It is guaranteed that the warehouse, customer\'s location, and no-fly zone do not overlap. Output Print the length of minimal path of the delivery drone to complete the delivery and return to the warehouse, while avoiding the no-fly zone. Examples Input 0 0 4 4 1 1 3 3 Output 16 Input -5 -5 5 5 -2 -2 2 2 Output 40","solution":"def minimal_delivery_path(x1, y1, x2, y2, x3, y3, x4, y4): Calculates the minimal path for the delivery drone to complete its delivery and return to the warehouse while avoiding the no-fly zone. def inside_no_fly_zone(px, py): Checks if a point (px, py) is inside the no-fly zone. return min(x3, x4) <= px <= max(x3, x4) and min(y3, y4) <= py <= max(y3, y4) def manhattan_dist(ax, ay, bx, by): Calculates the Manhattan distance between points (ax, ay) and (bx, by). return abs(ax - bx) + abs(ay - by) if not inside_no_fly_zone(x1, y1) and not inside_no_fly_zone(x2, y2): # Straight path possible, without intersecting no-fly zone return 2 * manhattan_dist(x1, y1, x2, y2) # Intermediate points to go around the no-fly zone around_path = float(\'inf\') for wx, wy in [(x3 - 1, y3 - 1), (x3 - 1, y4 + 1), (x4 + 1, y3 - 1), (x4 + 1, y4 + 1)]: if not inside_no_fly_zone(wx, wy): temp_dist = manhattan_dist(x1, y1, wx, wy) + manhattan_dist(wx, wy, x2, y2) + manhattan_dist(x2, y2, wx, wy) + manhattan_dist(wx, wy, x1, y1) around_path = min(around_path, temp_dist) return around_path"},{"question":"You are given an array of n integers, and your task is to divide this array into exactly m contiguous subarrays (subsegments) such that the maximum sum of the elements in any subarray is minimized. Return the minimized maximum sum. Input: The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000). The second line contains n integers representing the array A (1 ≤ A[i] ≤ 10000). Output: Print a single integer, the minimized maximum sum of the m subarrays. Examples: Input: 7 3 7 2 5 10 8 Output: 14 Input: 5 2 1 2 3 4 5 Output: 9 Note: In the first example, we can divide the array into three subarrays as follows: [7, 2, 5], [10], and [8]. The maximum sum among these subarrays is 14. In the second example, we can divide the array into two subarrays as follows: [1, 2, 3] and [4, 5]. The maximum sum among these subarrays is 9. Hint: Use binary search to find the minimized maximum sum efficiently. The search space for the binary search can be from the maximum element in the array (as the minimized maximum sum should at least be greater than or equal to this) to the sum of all elements in the array (as splitting into a single subarray will have this sum).","solution":"def minimize_max_sum(n, m, A): def can_split(max_sum): subarray_count = 1 current_sum = 0 for num in A: if current_sum + num > max_sum: subarray_count += 1 current_sum = num if subarray_count > m: return False else: current_sum += num return True left, right = max(A), sum(A) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"A robotic vehicle is on a rectangular grid having \'n\' rows and \'m\' columns. The vehicle can move to a neighboring cell either to the right or down but it cannot move to any cell that has an obstacle. Determine the number of unique paths from the top-left cell to the bottom-right cell, accounting for the obstacles. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100) which are the number of rows and columns of the grid. The next \'n\' lines contain \'m\' integers each. Each cell is filled with either 0 (meaning that the cell is free) or 1 (meaning that the cell has an obstacle). Output Output the number of unique paths from the top-left cell to the bottom-right cell. If there is no possible path, return 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # If the starting point or the ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"A large matrix of integers is given, where each row is sorted in ascending order. Write a program that finds the k-th smallest element in the entire matrix. The matrix does not necessarily have all distinct elements. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. The next n lines contain m integers each, where the i-th line contains the m elements of the i-th row of the matrix (−10^9 ≤ matrix[i][j] ≤ 10^9). Each row\'s elements are sorted in ascending order. The last line contains a single integer k (1 ≤ k ≤ n * m) — the position of the element to find when the matrix is considered in sorted order. Output Print a single integer — the k-th smallest element in the entire matrix. Examples Input 3 3 1 5 9 10 11 13 12 13 15 8 Output 13 Input 2 2 1 2 1 3 2 Output 1","solution":"import heapq def kth_smallest(matrix, n, m, k): min_heap = [] for r in range(min(n, k)): # Only consider the first min(n, k) rows heapq.heappush(min_heap, (matrix[r][0], r, 0)) while k: element, r, c = heapq.heappop(min_heap) if c + 1 < m: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) k -= 1 return element"},{"question":"You are designing a scheduling system for a conference where you need to determine whether a given set of presentations can be scheduled without any overlaps. Each presentation has a start time and an end time. Your goal is to write a function that checks if the presentations can be scheduled without conflicts. The presentations are provided as an array of tuples, where each tuple contains two integers. The first integer is the start time and the second integer is the end time. All times are given as integers in a 24-hour format (e.g., 9 for 09:00, 13 for 13:00). The start time is always less than the end time. Write a function `canSchedule` that takes a list of tuples representing the presentations\' schedules and returns `True` if it is possible to schedule all presentations without any overlaps, and `False` otherwise. Input - A list of tuples `presentations` where each tuple `(start_time, end_time)` represents a presentation. The list will contain between 1 and 50 tuples. Each tuple will have `0 <= start_time < end_time <= 24`. Output - Return `True` if it is possible to schedule all presentations without overlaps, `False` otherwise. Examples Input [(9, 10), (11, 12), (10, 11)] Output True Input [(10, 11), (10.5, 11.5), (11, 12)] Output False","solution":"def canSchedule(presentations): Checks if all presentations can be scheduled without overlaps. Args: presentations (list of tuple): Each tuple contains (start_time, end_time) of a presentation. Returns: bool: True if no presentations overlap, otherwise False. # Sorting presentations by start time presentations.sort() # Compare each presentation with the previous one for i in range(1, len(presentations)): if presentations[i][0] < presentations[i-1][1]: return False return True"},{"question":"You are given an array of integers and a target integer. Determine if there are two distinct elements in the array that sum up to the target value. Constraints * 2 leq N leq 100,000 * Array elements and the target value are integers within the range of -10^9 to 10^9 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Target Output Print \\"YES\\" if there exist two distinct elements in the array that sum up to the target value. Otherwise, print \\"NO\\". Examples Input 5 2 7 11 15 1 18 Output YES Input 4 1 2 3 4 8 Output NO Input 6 -1 1 2 -2 3 4 2 Output YES Input 3 4 5 6 1 Output NO","solution":"def two_sum_exists(arr, target): Determines if there are two distinct elements in the array that sum up to the target value. seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Elena is an ambitious programmer working on optimizing the resource utilization of her distributed computing system. The system consists of n servers arranged in a linear topology. Each server can handle a specific number of tasks per unit time. However, due to restrictions in the system design, only a contiguous segment of servers can be active at any one time for a certain period. Elena wants to maximize the efficiency by choosing the contiguous segment that can handle the most tasks per unit time. Given the number of tasks each of the n servers can handle, find the maximum number of tasks that can be processed by a contiguous segment of servers. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of servers. The second line contains n integers ti ( - 104 ≤ ti ≤ 104) — the number of tasks each server can handle per unit time. Output The first and only line of output should contain the maximum number of tasks that can be processed by any contiguous segment of servers. Examples Input 4 1 -2 3 4 Output 7 Input 6 -1 -2 -3 -4 -5 -6 Output -1 Input 5 2 3 -2 4 -1 Output 7","solution":"def max_tasks(n, tasks): Returns the maximum number of tasks that can be processed by any contiguous segment of servers. :param n: An integer representing the number of servers :param tasks: A list of integers where each integer represents the number of tasks a server can handle per unit time :return: The maximum number of tasks that can be processed by any contiguous segment of servers max_sum = tasks[0] current_sum = tasks[0] for i in range(1, n): current_sum = max(tasks[i], current_sum + tasks[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of n integers. Perform q operations on the array as follows: 1. Increment all the elements of the subarray defined by [l, r] by a given positive integer k. 2. Decrement all the elements of the subarray defined by [l, r] by a given positive integer k. 3. Compute the sum of all the elements in the subarray defined by [l, r]. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. The next q lines describe the operations and contain four integers t, l, r, k (1 ≤ t ≤ 3, 1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^9) — the type of the operation and the range of the subarray. For type 3 operations, k will be 0 and should be ignored. Output For each query of the third type (t = 3), output a line with a single integer — the sum of the subarray defined by [l, r]. Example Input 6 5 1 2 3 4 5 6 1 2 4 2 2 1 3 1 3 3 5 0 1 1 6 5 3 1 6 0 Output 8 34 Explanation After the first operation, the array becomes [1, 4, 5, 6, 5, 6]. After the second operation, the array becomes [0, 3, 4, 6, 5, 6]. The sum of the subarray [3, 5] is 4 + 6 + 5 = 15. After the fourth operation, the array becomes [5, 8, 9, 11, 10, 11]. The sum of the subarray [1, 6] is 5 + 8 + 9 + 11 + 10 + 11 = 54.","solution":"def perform_operations(n, q, array, operations): Perform operations as specified on the given array. :param n: Number of elements in the array (int) :param q: Number of operations (int) :param array: List of integers representing the initial array :param operations: List of operations, each operation being a list [t, l, r, k] :return: List of results for each query of the third type (sum operations) results = [] for operation in operations: t, l, r, k = operation if t == 1: for i in range(l-1, r): array[i] += k elif t == 2: for i in range(l-1, r): array[i] -= k elif t == 3: subarray_sum = sum(array[l-1:r]) results.append(subarray_sum) return results"},{"question":"A pharmaceutical company is planning to conduct clinical trials for a new medication. They have a list of n patients, each with a unique ID and a medication response rate. Each patient has an appointment for testing at a specific time slot. The company needs to determine which patients have appointments at overlapping time slots and group them for batch testing. You are assigned to write a feature that identifies and groups patients with overlapping appointments. You will be given t testcases to process patient information. Your task is to determine for each patient the group of patients (including themselves) with whom their appointment overlaps. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of testcases. For each testcase: - The first line contains an integer n (1 ≤ n ≤ 5000) — the number of patients. - The next n lines each contain: - An integer ID (1 ≤ ID ≤ 1000000) — the unique ID of the patient. - Two integers start and end (0 ≤ start < end ≤ 24 * 60) — the starting and ending time of the appointment, in minutes from the start of the day. Output For each testcase, output groups of patient IDs whose appointment slots overlap. Each group should be on a new line. Example Input 2 4 101 60 120 102 110 170 103 400 600 104 410 450 3 201 300 400 202 550 600 203 390 450 Output 101 102 103 104 201 203 202 Note In the first testcase: - Patient IDs 101 and 102 have overlapping time slots (60-120 and 110-170). - Patient IDs 103 and 104 have overlapping time slots (400-600 and 410-450). In the second testcase: - Patient IDs 201 and 203 have overlapping time slots (300-400 and 390-450). - Patient ID 202 does not overlap with other patients. Group patients with overlapping appointment times into individual lines, maintaining the order as they appear in the input.","solution":"def find_overlapping_appointments(testcases): from collections import defaultdict results = [] for case in testcases: n, patient_appointments = case intervals = [] for patient in patient_appointments: ID, start, end = patient intervals.append((start, end, ID)) # Sort by the start times intervals.sort() # Find overlapping intervals using a line sweep algorithm current_overlaps = [] in_progress = defaultdict(list) for start, end, ID in intervals: # Remove intervals which are not overlapping anymore to_remove = [] for k in in_progress: if k < start: current_overlaps.extend(in_progress[k]) to_remove.append(k) for r in to_remove: del in_progress[r] # Add the current interval in_progress[end].append(ID) for k in in_progress: current_overlaps.extend(in_progress[k]) res = sorted(current_overlaps) results.append(res) return results def parse_input(input_data): data = input_data.strip().split(\\"n\\") t = int(data[0]) index = 1 testcases = [] for _ in range(t): n = int(data[index]) index += 1 patients = [] for _ in range(n): patient_data = data[index].split() ID = int(patient_data[0]) start = int(patient_data[1]) end = int(patient_data[2]) patients.append((ID, start, end)) index += 1 testcases.append((n, patients)) return testcases def format_output(results): output = [] for res in results: if res: output.append(\\" \\".join(map(str, res))) return \\"n\\".join(output) def main(input_data): testcases = parse_input(input_data) results = find_overlapping_appointments(testcases) return format_output(results) # Test case input_data = 2 4 101 60 120 102 110 170 103 400 600 104 410 450 3 201 300 400 202 550 600 203 390 450 print(main(input_data))"},{"question":"In a matrix of dimensions n x m where each cell contains either a 0 or a 1, you need to determine the size of the largest square sub-matrix that contains only 1s. The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 1000), the number of test cases. Each test case starts with a line containing two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. The next n lines each contain m space-separated integers (either 0 or 1) representing the matrix. Output the size of the largest square sub-matrix containing only 1s for each test case. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers n and m, the matrix dimensions. - The next n lines each contain m integers (0 or 1), representing the matrix. Output For each test case, print an integer, the size of the largest square sub-matrix containing only 1s. Example Input 2 3 4 0 1 1 0 1 1 1 1 0 1 1 1 4 5 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 Output 2 2 Note In the first test case, the largest square sub-matrix containing only 1s has size 2x2. In the second test case, the largest square sub-matrix containing only 1s also has size 2x2.","solution":"def largest_square_submatrix(matrix, n, m): Given a n x m matrix of 0s and 1s, returns the size of the largest square sub-matrix containing only 1s. if n == 0 or m == 0: return 0 # Create a DP table initialized with 0s dp = [[0] * m for _ in range(n)] max_size = 0 for i in range(n): for j in range(m): # If we\'re at the first row or first column, the value is the same as the matrix\'s value if i == 0 or j == 0: dp[i][j] = matrix[i][j] elif matrix[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 # Keep track of the maximum size of square sub-matrix containing 1s if dp[i][j] > max_size: max_size = dp[i][j] return max_size def solve_largest_square_submatrix(t, test_cases): Processes multiple test cases for the largest square sub-matrix containing only 1s problem. results = [] for case in test_cases: n, m, matrix = case result = largest_square_submatrix(matrix, n, m) results.append(result) return results"},{"question":"You are given a 2D grid containing integers where each cell represents the height at that point. Your task is to find the number of unique paths from the top-left corner to the bottom-right corner such that each step you take must be either to the right or downward, and the height of the next cell must be greater than or equal to the height of the current cell. More formally, you can only move to cell (i + 1, j) if grid[i + 1][j] ≥ grid[i][j], or cell (i, j + 1) if grid[i][j + 1] ≥ grid[i][j]. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. The following m lines contain n integers each, where the j-th integer in the i-th line is grid[i][j] (-1000 ≤ grid[i][j] ≤ 1000) — the height at point (i, j). Output Print a single integer, the number of unique paths from the top-left corner to the bottom-right corner satisfying the given conditions. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 6 Explanation: There are 6 valid paths in the provided grid: 1 -> 2 -> 3 -> 6 -> 9 1 -> 2 -> 3 -> 6 -> 8 -> 9 1 -> 2 -> 5 -> 6 -> 9 1 -> 2 -> 5 -> 6 -> 8 -> 9 1 -> 4 -> 5 -> 6 -> 9 1 -> 4 -> 5 -> 6 -> 8 -> 9","solution":"def unique_paths(grid): m = len(grid) n = len(grid[0]) # Create a DP table of the same dimensions as grid initialized to 0 dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill DP table for i in range(m): for j in range(n): if i == 0 and j == 0: continue if i > 0 and grid[i][j] >= grid[i - 1][j]: dp[i][j] += dp[i - 1][j] if j > 0 and grid[i][j] >= grid[i][j - 1]: dp[i][j] += dp[i][j - 1] return dp[m - 1][n - 1] # Example use case grid_example = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(unique_paths(grid_example)) # Output should be 6"},{"question":"Lucas is developing a game where the player moves a character through a grid filled with obstacles. Each cell in the grid either contains an obstacle (denoted by \'#\') or is free (denoted by \'.\'). The character starts at the top-left corner of the grid and can move right or down to reach the bottom-right corner. However, Lucas wants to count the number of distinct paths the character could take while avoiding obstacles. Given the dimensions of the grid and the position of obstacles, write a program to determine the number of distinct paths from the top-left corner to the bottom-right corner. Input The first line contains two integers n and m (1≤ n, m≤ 100) — the dimensions of the grid. The next n lines each contain m characters (\'#\' or \'.\') representing the grid. Output Print the number of distinct paths from the top-left corner to the bottom-right corner. If there are no paths, output 0. Examples Input 3 3 ... .#. ... Output 2 Input 4 4 .... .#.. ..#. .... Output 4 Note In the first example, there are two paths from the top-left to the bottom-right: 1. (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2) 2. (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) In the second example, there are four paths: 1. (0, 0) → (0, 1) → (0, 2) → (0, 3) → (1, 3) → (2, 3) → (3, 3) 2. (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2) → (3, 2) → (3, 3) 3. (0, 0) → (1, 0) → (1, 1) → (1, 2) → (2, 2) → (3, 2) → (3, 3) 4. (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) → (3, 2) → (3, 3)","solution":"def num_paths(grid): n = len(grid) m = len(grid[0]) # Edge case if start or end is blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # DP array to store number of paths to each cell dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given an array of integers, you are required to perform the following operations: - Query the sum of elements between two given indices, inclusive. - Update the value of an element at a given index. Input The first line contains space-separated two integers n (1 ≤ n ≤ 10000) and q (1 ≤ q ≤ 10000), denoting the number of elements in the array and the number of queries, respectively. The second line contains n space-separated integers ai (−1000 ≤ ai ≤ 1000), the initial values of the elements in the array. The following q lines contain either: - A query operation with format: \\"1 l r\\" (1 ≤ l ≤ r ≤ n), asking for the sum of array elements from index l to index r (inclusive). - An update operation with format: \\"2 idx val\\" (1 ≤ idx ≤ n, −1000 ≤ val ≤ 1000), updating the element at index idx to have the value val. Output For each query operation, print the output in a separate line. Examples Input 5 3 1 2 3 4 5 1 1 3 2 2 5 1 2 4 Output 6 12 Note In the example above: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the sum of elements from index 1 to 3, which is 1 + 2 + 3 = 6. - The update operation changes the element at index 2 to 5, resulting in the array [1, 5, 3, 4, 5]. - The final query asks for the sum of elements from index 2 to 4, which is 5 + 3 + 4 = 12.","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(sum(array[l:r+1])) elif parts[0] == \'2\': idx = int(parts[1]) - 1 val = int(parts[2]) array[idx] = val return results"},{"question":"You are given an integer array containing n elements. You can perform the following operation any number of times (including zero times): - Choose any two elements a and b from the array (a ≤ b), then replace a and b with a single number (a+b)/2 (rounded down to the nearest integer). Determine the minimum possible integer in the resulting array after any number of such operations. Input The first line contains a single integer n (1 ≤ n ≤ 100), representing the number of elements in the array. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output Print a single integer — the minimum possible integer in the resulting array after any number of operations. Example Input 5 1 2 3 4 5 Output 2 Input 3 8 14 7 Output 5 Note In the first sample, you can perform the following operations: 1. Combine 1 and 2 to get (1+2)/2 = 1, the array becomes [1, 3, 4, 5]. 2. Combine 1 and 3 to get (1+3)/2 = 2, the array becomes [2, 4, 5]. Finally, [2, 4, 5] results in the minimum possible number which is 2. In the second sample: 1. Combine 8 and 7 to get (8+7)/2 = 7, the array becomes [7, 14]. 2. Combine 7 and 14 to get (7+14)/2 = 10, the array becomes [10]. Hence, the minimum possible integer in the resulting array is 5.","solution":"def min_possible_integer(arr): Calculate the minimum possible integer in the resulting array after performing the operation any number of times. # Implementation strategy: The minimum possible integer will be the mean of the smallest two elements sorted_arr = sorted(arr) if len(sorted_arr) == 1: return sorted_arr[0] return (sorted_arr[0] + sorted_arr[1]) // 2"},{"question":"Pablo\'s Programming Scores Pablo is an avid competitive programmer and he tracks his performance over time by maintaining a series of scores in a list after each contest he participates in. However, sometimes there\'s a glitch and the same score gets recorded multiple times for a single contest. Pablo wants to clean up his list so that each contest\'s score appears only once, in the order they were originally recorded. Given a list of integers where each integer represents the score Pablo received in a contest, write a program to remove duplicate scores while preserving the original order of their first occurrence. Input: - The first line contains an integer T (1 <= T <= 20), the number of test cases. - For each test case, the first line contains an integer N (1 <= N <= 1000), representing the number of scores recorded. - The following line contains N integers separated by spaces, where each integer S (-1000000000 <= S <= 1000000000) represents a score recorded by Pablo in the order they were recorded. Output: For each test case, output a single line containing the scores after removing duplicates, in the order of their first occurrence. Example Input: 2 5 4 2 2 8 4 6 1 2 3 4 5 3 Output: 4 2 8 1 2 3 4 5 Explanation: In the first test case, the score list is [4, 2, 2, 8, 4]. After removing duplicates, the list becomes [4, 2, 8]. In the second test case, the score list is [1, 2, 3, 4, 5, 3]. After removing duplicates, the list becomes [1, 2, 3, 4, 5]. Note: The outputs for each test case are printed on separate lines.","solution":"def remove_duplicates(scores): Removes duplicates from the list while preserving the order of their first occurrence. seen = set() unique_scores = [] for score in scores: if score not in seen: unique_scores.append(score) seen.add(score) return unique_scores def process_test_cases(test_cases): Processes multiple test cases as described. results = [] for case in test_cases: N, scores = case results.append(remove_duplicates(scores)) return results # Example input processing function, if needed, to convert input to the correct format def read_input(input_data): Parses the input data into the required format. lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) scores = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, scores)) index += 2 return test_cases"},{"question":"# Disaster Recovery You are managing a disaster recovery system that needs to be highly reliable. The system records multiple backup points for recovery and should be able to roll back to a specific backup point when needed. The system stores backup points in a chronological order with unique IDs starting from 1 up to the current maximum number of backups, `m`. Each backup point has an associated data version. The following operations can be performed on the system: 1. Create a new backup point. 2. Rollback to a specific backup point. Each backup point records the same version of the data as its associated point plus all the changes made up to that point. When rolling back to a specific backup point, the new current state becomes the state of that backup point. Your task is to implement this disaster recovery system, effectively handling the creation and rollback operations. # Input The first line contains an integer `q` (1 ≤ q ≤ 100,000), the number of operations. Each of the next `q` lines contains a string describing the operation: - `\\"CREATE\\"`: This indicates a new backup should be created. - `\\"ROLLBACK x\\"`: This indicates that the system should rollback to the `x`-th backup point (`1 ≤ x ≤ m`). # Output For each `\\"CREATE\\"` operation, output the new backup ID. For each `\\"ROLLBACK x\\"` operation, output the point ID to which the system is rolled back. # Example Input: ``` 5 CREATE CREATE CREATE ROLLBACK 2 CREATE ``` Output: ``` 1 2 3 2 4 ``` Explanation: - After the first \\"CREATE\\", backup point 1 is created. - After the second \\"CREATE\\", backup point 2 is created. - After the third \\"CREATE\\", backup point 3 is created. - After \\"ROLLBACK 2\\", the system rolls back to backup point 2. - After the fifth \\"CREATE\\", since we rolled back to point 2, the new backup point ID becomes 4. # Constraints - Initially, the system starts with no backup points. - Each \\"CREATE\\" operation increases the number of backups by 1. - When a rollback is performed, that becomes the new current state and subsequent \\"CREATE\\" operations continue from there. # Note: - Rollbacks are persistent. If you rollback to a point and create new backups, you cannot see the backups created after the rollback point anymore unless rolled back further to before the rollback was performed.","solution":"class DisasterRecoverySystem: def __init__(self): self.current_backups = [] self.max_backup_id = 0 self.current_state = 0 def create_backup(self): self.max_backup_id += 1 self.current_state = self.max_backup_id self.current_backups.append(self.current_state) return self.current_state def rollback(self, backup_id): self.current_state = backup_id self.current_backups = self.current_backups[:backup_id] return self.current_state def disaster_recovery_system(operations): system = DisasterRecoverySystem() results = [] for operation in operations: if operation == \\"CREATE\\": result = system.create_backup() results.append(result) elif operation.startswith(\\"ROLLBACK\\"): _, backup_id = operation.split() result = system.rollback(int(backup_id)) results.append(result) return results"},{"question":"You are given a grid of size n x m. Each cell in the grid is either empty (\'.\') or contains an obstacle (\'#\'). Tom and Jerry are playing a game on this grid. Tom starts at cell (x1, y1) and wants to catch Jerry, who starts at cell (x2, y2). Tom can move to any of the four neighboring cells (up, down, left, right) as long as the cell is within the grid boundaries and is not an obstacle. The goal is to determine whether Tom can reach Jerry\'s starting position and catch him. Tom can catch Jerry if there exists a path from Tom’s starting position to Jerry’s starting position without passing through any obstacles. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. The character ‘.’ represents an empty cell, and ‘#’ represents an obstacle. The last line contains four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) - the starting coordinates of Tom and Jerry. Output Print \\"YES\\" if there is a way for Tom to reach Jerry\'s starting position; otherwise, print \\"NO\\". Examples Input 5 5 ..... .#. ..#.. .#.#. ..... 1 1 5 5 Output YES Input 5 5 ..... .#.#. ..... .#. ..... 1 1 4 4 Output NO Note In the first example, one possible path for Tom is to move from (1, 1) → (1, 2) → (1, 3) → (1, 4) → (1, 5) → (2, 5) → (3, 5) → (4, 5) → (5, 5). In the second example, there is no path from Tom\'s start at (1, 1) to Jerry\'s position at (4, 4) due to obstacles blocking all possible routes.","solution":"from collections import deque def can_tom_catch_jerry(n, m, grid, x1, y1, x2, y2): Determines if Tom can catch Jerry on the grid. if grid[x1 - 1][y1 - 1] == \'#\' or grid[x2 - 1][y2 - 1] == \'#\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(x1 - 1, y1 - 1)]) visited[x1 - 1][y1 - 1] = True while queue: cx, cy = queue.popleft() if (cx, cy) == (x2 - 1, y2 - 1): return \\"YES\\" for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a grid with n rows and m columns, consisting of empty cells and walls. You are also given two positions in the grid: starting position (sx, sy) and destination position (dx, dy). A valid movement is defined as: 1. Moving to the adjacent cell horizontally or vertically if it is not a wall. We want to find the minimum number of steps required to move from the starting position to the destination position. If it is not possible to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines each contains m characters representing the grid. Each character can be either \'.\' representing an empty cell or \'#\' representing a wall. The next line contains four integers sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ 1000) — the starting and destination positions respectively. Positions are 1-indexed. Output Output a single number — the minimum number of steps required to move from the starting position to the destination position, or -1 if it is impossible. Examples Input 5 5 ..... ..#.. ..... ..#.. ..... 1 1 5 5 Output 8 Input 3 3 ..# #.. ..# 1 1 3 3 Output -1 Note In the first example, the path from (1, 1) to (5, 5) with minimum steps is (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) → (4, 3) → (5, 3) → (5, 4) → (5, 5). In the second example, it is not possible to reach (3, 3) from (1, 1) due to the walls blocking the path.","solution":"from collections import deque def min_steps_to_destination(n, m, grid, sx, sy, dx, dy): # Directions to move in the grid, right, left, down, up directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Convert input to zero-indexed sx, sy, dx, dy = sx - 1, sy - 1, dx - 1, dy - 1 # Check if start or destination are walls if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 # BFS initialization queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() # Check if we reached the destination if (x, y) == (dx, dy): return steps # Explore neighboring cells for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If the queue is empty and we never reached the destination return -1"},{"question":"You are developing a new feature for a popular online gaming platform, which involves managing and analyzing tournament results. Each tournament consists of multiple games, and each game results in a win for one of the players. Your task is to determine the player with the maximum number of wins. If there are several such players, choose the one with the smallest player ID. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of players and the number of games played. Each of the next m lines contains an integer x (1 ≤ x ≤ n), indicating the ID of the winning player of that game. Output Print the ID of the player with the maximum number of wins. If there are multiple players with the same maximum number of wins, print the smallest ID among them. Examples Input 3 4 1 2 1 3 Output 1 Input 2 6 2 2 1 2 2 1 Output 2 Note In the first sample, player 1 wins two games, player 2 wins one game, and player 3 wins one game. Therefore, player 1 has the maximum number of wins. In the second sample, player 2 wins four games and player 1 wins two games. Therefore, player 2 has the maximum number of wins.","solution":"def player_with_max_wins(n, m, game_results): Returns the player ID with the maximum number of wins. If there are multiple players with the same maximum number of wins, returns the smallest ID among them. :param n: int - number of players :param m: int - number of games played :param game_results: list of int - list of winning player IDs for each game :return: int - player ID with the maximum number of wins from collections import defaultdict # Dictionary to count the number of wins for each player win_count = defaultdict(int) for player_id in game_results: win_count[player_id] += 1 # Find the player with the maximum wins and the smallest ID if there are ties max_wins = -1 min_id_with_max_wins = float(\'inf\') for player_id, wins in win_count.items(): if wins > max_wins or (wins == max_wins and player_id < min_id_with_max_wins): max_wins = wins min_id_with_max_wins = player_id return min_id_with_max_wins"},{"question":"Erik has a fascination with strings and their transformations. He has discovered a specific type of string called a \\"beautiful string.\\" A string is considered beautiful if it contains at most one character that appears an odd number of times, while all other characters appear an even number of times. Erik has a string, and he wants to transform it into a beautiful string with a series of operations. In each operation, Erik can replace any character in the string with any other character (it can be the same character or a different one). Your task is to find the minimum number of operations required to transform the given string into a beautiful string. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5), which comprises only lowercase English letters. Output Print a single integer — the minimum number of operations required to transform the string into a beautiful string. Examples Input abc Output 2 Input aabbcc Output 0 Input abacabad Output 1","solution":"def min_operations_to_beautiful_string(s): from collections import Counter # Count the frequency of each character char_count = Counter(s) # Find the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Since at most one character can have an odd frequency in a beautiful string # we need to make all other odd frequencies even, which means changing `odd_count - 1` characters return max(0, odd_count - 1)"},{"question":"You are given a list of strings and a set of characters. Your task is to find the length of the longest substring from any of the strings in the list that can be formed using only the characters in the given set. Constraints * 1 ≤ number of strings ≤ 10^5 * 1 ≤ length of each string ≤ 100 * 1 ≤ number of characters in the set ≤ 26 * All strings and characters consist of lowercase English letters only. Input Input is given from Standard Input in the following format: M string_1 string_2 ... string_M K char_1 char_2 ... char_K Output Print an integer representing the length of the longest substring that can be formed using only the characters in the given set. Examples Input 3 abcde ghijk lmnop 5 a b c d e Output 5 Input 2 abcxyz yyyzzz 3 x y z Output 6","solution":"def longest_valid_substring_length(strings, valid_chars_set): This function finds the length of the longest substring from any of the strings in the list that can be formed using only the characters in the given set. :param strings: List[str] : List of input strings :param valid_chars_set: Set[str] : Set of valid characters :return: int : Length of the longest valid substring def longest_in_string(s, valid_chars): max_len = 0 current_len = 0 for char in s: if char in valid_chars: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len max_length = 0 for string in strings: max_length = max(max_length, longest_in_string(string, valid_chars_set)) return max_length"},{"question":"In a certain kingdom, there are x cities and y roads connecting them. The stability of the kingdom depends on the number of ways the king can command an expedition by choosing three distinct cities to visit. Each road has a unique intensity value which indicates its importance. The king wishes to ensure that the overall intensity of any chosen route is maximized. To achieve this, he asked you to find the maximal intensity value of any possible route consisting of three distinct cities. For each route chosen from three distinct cities (a, b, c) where a is connected to b, b to c, and c to a by roads of certain intensities, calculate the overall intensity as the sum of the three individual road intensities. You need to determine the maximum of these sums. Input The first line contains two integers x and y (3 ≤ x ≤ 100, 3 ≤ y ≤ 10^4), representing the number of cities and the number of roads respectively. Each of the next y lines contains three integers u, v, and w (1 ≤ u, v ≤ x, 1 ≤ w ≤ 10^5), representing a road connecting cities u and v with an intensity w. Each city might not be directly connected with every other city, but the king assumes that there will be at least one quadruple of three cities forming a triangle, ensuring a valid route. Output Print a single integer, the maximal intensity value of any possible route consisting of three distinct cities. Example Input 5 6 1 2 4 2 3 5 3 4 6 4 1 7 1 3 9 2 4 8 Output 24 Explanation Among the possible triplets: - (1, 2, 3) with intensities 4 + 5 + 9 = 18 - (2, 3, 4) with intensities 5 + 6 + 8 = 19 - (1, 3, 4) with intensities 9 + 6 + 7 = 22 - (1, 2, 4) with intensities 4 + 8 + 7 = 19 The maximal route intensity is achieved by visiting cities (1, 3, 4) with an overall intensity of 22. Another possible example: Input 4 5 1 2 1 2 3 3 3 4 2 4 1 4 1 3 5 Output 11","solution":"def max_route_intensity(x, y, roads): from collections import defaultdict city_map = defaultdict(dict) for u, v, w in roads: city_map[u][v] = w city_map[v][u] = w max_intensity = 0 for u in city_map: for v in city_map[u]: if v <= u: continue for w in city_map[v]: if w <= v or w == u: continue if u in city_map[w]: intensity = city_map[u][v] + city_map[v][w] + city_map[w][u] max_intensity = max(max_intensity, intensity) return max_intensity # Example usage x, y = 5, 6 roads = [ (1, 2, 4), (2, 3, 5), (3, 4, 6), (4, 1, 7), (1, 3, 9), (2, 4, 8) ] print(max_route_intensity(x, y, roads)) # Output: 22"},{"question":"Pavel is a game designer working on a new logic puzzle for his upcoming game. The puzzle involves arranging colored tiles on a grid. Each tile can be one of three colors: Red (R), Green (G), or Blue (B). The grid is an n x m rectangle, and Pavel wants to ensure that no two adjacent tiles (vertically or horizontally) are the same color. Help Pavel determine if a given grid configuration is valid according to these rules. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines each contain m characters, representing the colors of the tiles in the grid. Each character is either \'R\', \'G\', or \'B\'. Output Output \\"YES\\" if the grid configuration is valid, meaning no two adjacent tiles have the same color. Otherwise, output \\"NO\\". Examples Input 3 4 RGRG GRGR RGRG Output YES Input 2 3 RRG RGB Output NO","solution":"def is_valid_grid(n, m, grid): Checks if a given n x m grid configuration is valid such that no two adjacent tiles (vertically or horizontally) are the same color. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): The n x m grid represented as a list of strings. Returns: str: \\"YES\\" if the grid configuration is valid, otherwise \\"NO\\". for i in range(n): for j in range(m): if i > 0 and grid[i][j] == grid[i-1][j]: return \\"NO\\" if j > 0 and grid[i][j] == grid[i][j-1]: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of names, create a program that takes the list as input, counts the frequency of each name, and outputs each name with its count in alphabetical order. Input The input is given in the following format: n name1 name2 :: namen The first line gives the number of names n, and the following n lines give the names (each name is a string of letters consisting of lower and/or uppercase letters, with a maximum length of 100 characters). Output Please output each name and its corresponding count in alphabetical order on separate lines. Example Input 5 Alice Bob Alice Charles Bob Output Alice 2 Bob 2 Charles 1","solution":"def count_names(n, names): This function takes an integer n and a list of names, and returns a dictionary with the names as keys and their frequencies as values, sorted in alphabetical order. from collections import defaultdict name_count = defaultdict(int) for name in names: name_count[name] += 1 sorted_names = sorted(name_count.items()) return {name: count for name, count in sorted_names} def format_output(name_counts): This function takes a dictionary of name counts and returns a formatted string for output. output = [] for name, count in name_counts.items(): output.append(f\\"{name} {count}\\") return \\"n\\".join(output)"},{"question":"Problem Statement You are given two strings, `a` and `b`, both consisting of lowercase letters only. The goal is to determine if string `a` can be transformed into string `b` by repeatedly reversing any substring of `a` any number of times. To formalize, you should write a function that checks if `a` can be made identical to `b` through any number of substring reversals. Input The input consists of two lines: - The first line contains the string `a`. - The second line contains the string `b`. Output Print \\"YES\\" if string `a` can be transformed into string `b` by repeatedly reversing any substring, otherwise print \\"NO\\". Constraints - `a` and `b` contain only lowercase English letters. - The length of `a` and `b` will be between 1 and 1000, inclusive. Example Input 1 ``` abcdef fedcba ``` Example Output 1 ``` YES ``` Example Input 2 ``` aabbcc ccbbaa ``` Example Output 2 ``` YES ``` Example Input 3 ``` abc def ``` Example Output 3 ``` NO ``` Explanation In Example 1, the entire string can be reversed to get \'fedcba\' which matches `b`. In Example 2, by reversing appropriate substrings, for instance: - Reverse the substring \'aabb\' to get \'bbaa\', - Then reverse the substring \'bbaacc\' to get \'ccbbaa\', which matches `b`. In Example 3, since `a` and `b` have different characters altogether, it’s impossible to transform one into the other.","solution":"def can_transform(a, b): Checks if string `a` can be rearranged to match string `b` by reversing any substring of `a` any number of times. Args: a (str): The source string. b (str): The target string. Returns: str: \\"YES\\" if `a` can be rearranged to match `b`, otherwise \\"NO\\". # If the sorted versions of both strings are equal, # it means we can rearrange `a` to match `b` using reversals. if sorted(a) == sorted(b): return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex is numbered from 1 to n. Each edge has a positive weight. Your task is to find the length of the shortest path from vertex 1 to vertex n using exactly k edges. Input: - The first line contains three integers n, m, and k (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000, 1 ≤ k ≤ 100). - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000) representing an edge between vertices u and v with weight w. Output: - Print a single integer — the length of the shortest path from vertex 1 to vertex n using exactly k edges. If there\'s no such path, print -1. Examples: Input: 4 4 2 1 2 5 1 3 10 2 4 1 3 4 2 Output: 6 Input: 3 3 2 1 2 1 2 3 1 1 3 3 Output: 2 Note: In the first example, the shortest path from vertex 1 to vertex 4 using exactly 2 edges is 1 -> 2 -> 4 with a total weight of 5 + 1 = 6. In the second example, the shortest path from vertex 1 to vertex 3 using exactly 2 edges is 1 -> 2 -> 3 with a total weight of 1 + 1 = 2.","solution":"import heapq def shortest_path_k_edges(n, m, k, edges): graph = {} for u, v, w in edges: if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append((v, w)) graph[v].append((u, w)) # DP table to store the shortest distance using exactly `j` edges from vertex 1 to `i` dp = [[float(\'inf\')] * (k + 1) for _ in range(n + 1)] dp[1][0] = 0 pq = [(0, 1, 0)] # Current distance, current vertex, number of edges used while pq: dist, vertex, edges_used = heapq.heappop(pq) if edges_used == k: continue for neighbor, weight in graph.get(vertex, []): new_dist = dist + weight if new_dist < dp[neighbor][edges_used + 1]: dp[neighbor][edges_used + 1] = new_dist heapq.heappush(pq, (new_dist, neighbor, edges_used + 1)) return dp[n][k] if dp[n][k] != float(\'inf\') else -1"},{"question":"In a galaxy far, far away, there is a space station with n docking bays aligned in a single straight row. Each docking bay can hold one spaceship at a time. The space station receives spaceship arrival requests and each spaceship has a specific docking time until it departs. A time interval [si, ti] denotes a request to dock a spaceship at any bay between times si and ti inclusive. A spaceship can only dock at an empty bay. If multiple requests overlap in time, the spaceship will dock in the first available empty bay. Your task is to determine the id of the docking bay assigned to each spaceship request. Each docking bay is indexed from 1 to n. Input The first line contains an integer n (1 ≤ n ≤ 104) — the number of docking bays at the space station. The second line contains an integer m (1 ≤ m ≤ 105) — the number of spaceship docking requests. The next m lines each contain two integers si and ti (1 ≤ si ≤ ti ≤ 109) — the start and end times of the i-th spaceship\'s docking request. Output Output m lines. The i-th line should contain an integer indicating the docking bay id assigned to the i-th spaceship docking request. If no bay is available for a request, output -1 for that request. Examples Input 3 4 1 4 2 5 5 8 4 6 Output 1 2 1 3","solution":"def assign_docking_bays(n, m, requests): Function to assign docking bays to spaceship requests :param n: int - number of docking bays :param m: int - number of spaceship docking requests :param requests: list of tuples - each tuple has two integers representing start and end times of a docking request :return: list of ints - each integer represents the docking bay id assigned to each request or -1 if no docking bay is available # Initialize the docking bays with their free time set to 0 bays = [0] * n result = [] for start, end in requests: assigned = False for bay_id in range(n): if bays[bay_id] <= start: bays[bay_id] = end + 1 result.append(bay_id + 1) assigned = True break if not assigned: result.append(-1) return result"},{"question":"**Dynamic Subarray** Given an array of integers and two integers x and y, your task is to find the length of the smallest contiguous subarray such that the sum of its elements is at least x and the sum of the elements of any larger subarray starting with the same left boundary is strictly less than y. More formally, for each valid subarray [l, r] (with l ≤ r): 1. The sum of elements in the subarray [l, r] should be at least x. 2. For the smallest r such that the above condition holds, the sum of elements in any subarray [l, r+k] (where k ≥ 1) should be strictly less than y. If no such subarray exists, print -1. INPUT: - The first line contains a single integer N, the number of elements in the array. - The second line contains N space-separated integers representing the array. - The third line contains two integers x and y. OUTPUT: - Output a single integer representing the length of the smallest subarray that meets the criteria. - If no such subarray exists, output -1. CONSTRAINTS: - 1 ≤ N ≤ 100000 - -100000 ≤ each element of the array ≤ 100000 - 1 ≤ x, y ≤ 1000000000 SAMPLE INPUT: 8 1 2 3 4 5 6 7 8 15 20 SAMPLE OUTPUT: 2 Explanation: The subarray starting at index 3 and ending at index 4 gives a sum of (13+7 = 20) which is between that given range. The second condition is met since no larger subarray starting from index 3 has a sum of at least y. Here, the length of this subarray is 2, which is the smallest possible length satisfying the conditions.","solution":"def smallest_subarray_with_conditions(arr, x, y): Find the length of the smallest contiguous subarray such that the sum of its elements is at least x and the sum of any larger subarray starting with the same left boundary is strictly less than y. If no such subarray exists, return -1. N = len(arr) min_length = float(\'inf\') for i in range(N): current_sum = 0 for j in range(i, N): current_sum += arr[j] if current_sum >= x: if j + 1 < N and current_sum + arr[j+1] >= y: break min_length = min(min_length, j - i + 1) break return min_length if min_length != float(\'inf\') else -1"},{"question":"A new e-commerce company is implementing a feature to calculate shipping costs based on the weight of the package and the destination. The shipping cost calculation is done using predefined rules that are stored in the system. However, the company is facing an issue where the rules are not optimized, leading to incorrect cost calculations. Your task is to develop a function that can optimize the rules and then calculate the correct shipping cost for a given package. The optimization process involves merging shipping cost rules that have the same destination but different weight ranges and costs. After merging, the cost of shipping for a given package weight and destination should be determined by selecting the rule that exactly matches the package weight or the closest lower weight range if an exact match is not available. # Input: The first line contains an integer n (1 ≤ n ≤ 105), the number of shipping cost rules. The next n lines contain the shipping cost rules in the format: ``` <destination> <weight_low> <weight_high> <cost> ``` destination is a string consisting of 1 to 100 lowercase English letters. weight_low and weight_high are integers (1 ≤ weight_low ≤ weight_high ≤ 106) representing the inclusive weight range in grams for which the shipping cost is applicable. cost is a floating point number representing the shipping cost in USD (0 ≤ cost ≤ 1000). The next line contains an integer q (1 ≤ q ≤ 105), the number of packages. The next q lines contain the package details in the format: ``` <destination> <weight> ``` destination is a string representing the destination of the package. weight is an integer (1 ≤ weight ≤ 106) representing the weight of the package in grams. # Output: For each package, print the shipping cost in USD (rounded to two decimal places). If there is no applicable shipping cost rule for the given destination and package weight, print \\"No Shipping Rule\\". # Example Input ``` 5 us 0 1000 10.5 us 1001 2000 15.5 us 2001 3000 20.5 ca 0 500 8.5 ca 501 1000 12.5 3 us 500 us 1500 ca 600 ``` Output ``` 10.50 15.50 12.50 ``` Note: In the example, the shipping cost rules and packages are given for destinations \'us\' (United States) and \'ca\' (Canada). The function should correctly select and calculate the shipping cost based on the closest lower weight range if an exact rule does not match. If there are no valid rules for the given package destination and weight, the output should be \\"No Shipping Rule\\".","solution":"def optimize_shipping_rules(n, rules, q, packages): from collections import defaultdict # Organize the rules by destination destination_rules = defaultdict(list) for rule in rules: destination, weight_low, weight_high, cost = rule destination_rules[destination].append((weight_low, weight_high, cost)) # Sort the rules by weight_low to make the search easier later for destination, rule_list in destination_rules.items(): destination_rules[destination] = sorted(rule_list, key=lambda r: r[0]) # Function to get the shipping cost for a given package def get_shipping_cost(destination, weight): if destination not in destination_rules: return \\"No Shipping Rule\\" # Look for the closest applicable rule applicable_rule = None for weight_low, weight_high, cost in destination_rules[destination]: if weight_low <= weight <= weight_high: applicable_rule = cost break elif weight < weight_low: break return f\\"{applicable_rule:.2f}\\" if applicable_rule is not None else \\"No Shipping Rule\\" # Determine shipping costs for the packages results = [] for package in packages: destination, weight = package cost = get_shipping_cost(destination, weight) results.append(cost) return results"},{"question":"You are given a rectangular grid of cells, where each cell can be either empty or contain a bomb. Your task is to determine the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner, avoiding bombs and moving only up, down, left, or right. If it is not possible to reach the bottom-right corner, return -1. Input The input consists of a single integer T (1 ≤ T ≤ 10) — the number of test cases. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. The next n lines each contain m characters (either \'.\' for an empty cell or \'B\' for a cell containing a bomb). Output For each test case, print a single integer — the minimum number of steps required to move from the top-left corner to the bottom-right corner, or -1 if it is not possible. Examples Input 2 3 3 ..B .B. ... 3 3 ..B BBB ... Output 4 -1 Explanation In the first test case, one possible path is: (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> (2, 2) which requires 4 steps. In the second test case, there is no possible path from the top-left corner to the bottom-right corner because the only path is blocked by bombs.","solution":"from collections import deque def min_steps_to_exit(grid): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right if grid[0][0] == \'B\' or grid[n-1][m-1] == \'B\': return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1 def solve(T, test_cases): results = [] for t in range(T): n, m, grid = test_cases[t] results.append(min_steps_to_exit(grid)) return results"},{"question":"You are given an m x n grid following specific rules of movement within it. A robot starts at the top-left corner (0, 0) and its goal is to reach the bottom-right corner (m-1, n-1). The robot can only move down or right at any point in time. However, there are some cells in the grid that contain a hazard and must be avoided. The grid can be represented by a 2D array where 0 denotes a safe cell and 1 denotes a hazardous cell. The task is to determine the number of unique paths from the starting cell to the ending cell without passing through any hazardous cells. Write a function `uniquePathsWithHazards(m, n, grid)` that returns the number of unique paths. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) which are the dimensions of the grid. - The next m lines contain n integers each (either 0 or 1), representing the grid. Output: - Print a single integer which is the number of unique paths from the top-left corner to the bottom-right corner avoiding hazardous cells. Example Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Note: - The robot cannot pass through the cell (1,1) as it contains a hazard. - If the starting cell or the ending cell contains a hazard, the number of unique paths should be 0.","solution":"def uniquePathsWithHazards(m, n, grid): # Check if starting or ending cell is hazardous if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: # Cell is hazardous, no paths through it dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Consider a new game played on an n x n chessboard with multiple chess pieces. Initially, each piece occupies a distinct cell, and each cell can hold at most one piece. During the game, the pieces are moved according to the following rules: 1. A piece can move to any adjacent cell (up, down, left, or right), but cannot move diagonally. 2. Pieces cannot move off the board. 3. If a piece moves into a cell occupied by another piece, the latter is removed from the board. 4. Players alternate turns; each player moves exactly one piece per turn. 5. A player loses if they cannot make a legal move. Your task is to determine if the first player has a guaranteed winning strategy given the initial positions of all pieces on the board. Input The first input line contains two integers t and n (1 ≤ t ≤ 20, 1 ≤ n ≤ 50). Each of the following t lines describes the initial positions of the pieces for one test case. The first integer in each line is p, the number of pieces (1 ≤ p ≤ n^2). The next 2p integers represent the positions of the pieces in row-major order (r1, c1, r2, c2, ..., rp, cp), where (ri, ci) denotes the row and column of the i-th piece (1 ≤ ri, ci ≤ n). Output Output t lines, each containing «YES» if the first player can force a win, or «NO» otherwise. Examples Input 2 4 2 1 1 4 4 3 1 1 2 2 3 3 Output NO YES","solution":"def can_first_player_win(t, n, test_cases): results = [] for case in test_cases: p = case[0] positions = case[1:] if p % 2 == 0: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Function to parse input and call the function def solve(t, n, cases): test_cases = [] for case in cases: test_cases.append(list(map(int, case.split()))) return can_first_player_win(t, n, test_cases)"},{"question":"You are given a string s consisting of \'a\' and \'b\' characters. Your task is to determine whether it is possible to rearrange the characters in the string in such a way that no two adjacent characters are the same. If it is possible, output the rearranged string. If there are multiple valid rearrangements, any of them will be accepted. If it is not possible to rearrange the string to satisfy the condition, output \\"IMPOSSIBLE\\". Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. The next t lines contain strings consisting of \'a\' and \'b\' characters. Each string\'s length is between 1 and 10^5. Output For each test case, output a string or \\"IMPOSSIBLE\\" if it is not possible to rearrange the characters. Examples Input 3 aabb aaaaaaaaabbbbb abab Output abab IMPOSSIBLE abab Note In the first example, one possible rearrangement is \\"abab\\". In the second example, it is not possible to rearrange characters so that no two adjacent characters are the same, because one of the characters appears much more frequently than the other. In the third example, the input string is already satisfying the condition.","solution":"def rearrange_string(s): count_a = s.count(\'a\') count_b = s.count(\'b\') if abs(count_a - count_b) > 1: return \\"IMPOSSIBLE\\" # Create the result with a balance of \'a\' and \'b\' res = [] if count_a > count_b: res = [\'a\'] * count_a + [\'b\'] * count_b elif count_b > count_a: res = [\'b\'] * count_b + [\'a\'] * count_a else: res = [\'a\'] * count_a + [\'b\'] * count_b # Prepare the final result by interleaving result = [] for i in range(len(res) // 2): result.append(res[i]) result.append(res[i + (len(res) // 2)]) if len(res) % 2 == 1: result.append(res[len(res) // 2]) return \'\'.join(result) def solve(t, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"**Road Map** In computer graphics, a polyline is a continuous line composed of one or more line segments. You are tasked with manipulating such polylines represented by sequences of 2D points. Harish is developing a mapping application that uses these polylines to display routes on a map. As a part of this application, he wants to occasionally extend or compress these routes by scaling them. Scaling in this context means multiplying the x and y coordinates of each point in the polyline by a given factor. Your task is to write a program that scales a polyline by a given factor. # Input The first line contains an integer N which denotes the number of points in the polyline. The next N lines each contain two integers representing the x and y coordinates of a point in the polyline. The last line contains a floating-point number F which represents the scaling factor. # Output Output N lines, each containing two floating-point numbers representing the x and y coordinates of the scaled polyline points. Each number should be formatted to two decimal places. # Constraints 1 ≤ N ≤ 100 -1000 ≤ x, y ≤ 1000 0.01 ≤ F ≤ 100 # Example Input 5 1 1 2 3 4 5 8 8 10 10 0.5 Output 0.50 0.50 1.00 1.50 2.00 2.50 4.00 4.00 5.00 5.00 In this task, the input polylines are scaled by multiplying their coordinates by the factor given. This ensures that the coordinates remain within bounds and formatted correctly for mapping purposes.","solution":"def scale_polyline(points, factor): Scales a polyline by a given factor. Parameters: points (list of tuple): A list of (x, y) tuples representing the polyline points. factor (float): The scaling factor. Returns: list of tuple: A list of (x, y) tuples representing the scaled polyline points. scaled_points = [(round(x * factor, 2), round(y * factor, 2)) for x, y in points] return scaled_points def process_input(input_data): Process input data and return points and scaling factor. Parameters: input_data (str): Multiline string of input data. Returns: tuple: A tuple containing a list of points and a scaling factor. lines = input_data.strip().split(\'n\') N = int(lines[0].strip()) points = [tuple(map(int, lines[i + 1].strip().split())) for i in range(N)] factor = float(lines[N + 1].strip()) return points, factor def format_output(scaled_points): Formats the scaled points for output. Parameters: scaled_points (list of tuple): A list of scaled polyline points. Returns: str: A formatted string with the scaled points. return \'n\'.join(f\\"{x:.2f} {y:.2f}\\" for x, y in scaled_points) def main(input_data): points, factor = process_input(input_data) scaled_points = scale_polyline(points, factor) return format_output(scaled_points)"},{"question":"A group of friends is planning a road trip across several cities. Each city is uniquely identified by an integer from 1 to n, and the route between the two cities is given along with the distance between them. They want to ensure that they visit every city exactly once before returning to their starting city. The friends are keen on minimizing the total travel distance for their trip. Your task is to help them determine the minimum possible distance they need to travel to visit all cities exactly once and return to the starting city. This problem is known to be NP-hard (specifically the Travelling Salesman Problem), so an exact solution for larger values of n may be infeasible within reasonable time constraints. However, you should try to solve it based on the constraints provided. Input The input consists of: - The first line contains an integer n (2 ≤ n ≤ 20) representing the number of cities. - The next n lines each contain n integers. The j-th number in the i-th line represents the distance from city i to city j (1 ≤ distance ≤ 10^3, distance_i_i = 0 for all i). Output Print a single integer, the minimum possible distance to visit all cities exactly once and return to the starting city. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 1 2 1 0 3 2 3 0 Output 6 Note In the first example, one possible route is 1 -> 2 -> 4 -> 3 -> 1, resulting in a distance of 10 + 25 + 30 + 15 = 80, which is the minimum possible. In the second example, one possible route is 1 -> 2 -> 3 -> 1, resulting in a distance of 1 + 3 + 2 = 6, which is the minimum possible.","solution":"import itertools def tsp(n, distances): min_path = float(\'inf\') cities = list(range(n)) for perm in itertools.permutations(cities[1:]): cur_path = distances[0][perm[0]] for i in range(len(perm) - 1): cur_path += distances[perm[i]][perm[i + 1]] cur_path += distances[perm[-1]][0] min_path = min(min_path, cur_path) return min_path"},{"question":"The Galactic Revenue Service has hired you to write a program to help track the income of various star systems. Each system generates income based on the number of planets it has and the amount of revenue each planet produces. Input The first line contains an integer S (1 ≤ S ≤ 50) representing the number of star systems. For each star system, the first line contains an integer P (1 ≤ P ≤ 100) representing the number of planets in that system. The next P lines each contain an integer ri (1 ≤ ri ≤ 1000) representing the revenue generated by the i-th planet in that system. Output For each star system, output a single line with the total revenue generated by that system. Examples Input 2 3 100 200 300 2 500 600 Output 600 1100 Input 1 4 150 250 350 450 Output 1200 Note For the first example, the first star system has 3 planets with revenues 100, 200, and 300, thus the total revenue is 100 + 200 + 300 = 600. The second star system has 2 planets with revenues 500 and 600, thus the total revenue is 500 + 600 = 1100. For the second example, there is only one star system with 4 planets, having revenues 150, 250, 350, and 450, giving a total revenue of 150 + 250 + 350 + 450 = 1200.","solution":"def calculate_revenues(S, all_data): result = [] data_index = 0 for _ in range(S): P = all_data[data_index] data_index += 1 total_revenue = sum(all_data[data_index:data_index+P]) data_index += P result.append(total_revenue) return result"},{"question":"You are given a list of integers representing the heights of certain buildings. You are allowed to remove exactly one building from the list in order to maximize the difference between the heights of the remaining buildings. Calculate the maximum possible difference between the heights of the buildings after removing exactly one building. Constraints * All values in input are integers. * 2 leq N leq 100 * 1 leq height[i] leq 10^5 Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print the maximum possible difference between the heights of the buildings after removing exactly one building. Examples Input 4 3 1 9 7 Output 8 Input 3 5 10 15 Output 10 Input 6 1 3 2 8 7 6 Output 7","solution":"def max_possible_difference_after_removing_one_building(heights): Calculate the maximum possible difference between the heights of the buildings after removing exactly one building. :param heights: List of integers representing the heights of the buildings :return: Maximum possible difference if len(heights) < 3: return max(heights) - min(heights) max_difference = 0 for i in range(len(heights)): remaining_heights = heights[:i] + heights[i+1:] current_difference = max(remaining_heights) - min(remaining_heights) max_difference = max(max_difference, current_difference) return max_difference # Example usages: # print(max_possible_difference_after_removing_one_building([3, 1, 9, 7])) # 8 # print(max_possible_difference_after_removing_one_building([5, 10, 15])) # 10 # print(max_possible_difference_after_removing_one_building([1, 3, 2, 8, 7, 6])) # 7"},{"question":"Given an array of integers, write a function that returns the start and end indices of the subarray which has the maximum sum. If there are multiple subarrays with the same maximum sum, return the indices of the first occurrence of such a subarray. **Input Format** - The first line contains an integer N, the number of elements in the array. - The next line contains N integers separated by space, representing the elements of the array. **Output Format** - Print two integers, the start and end indices (1-based) of the subarray which has the maximum sum. If the array length is zero, return -1 -1. **Constraints** - 1 ≤ N ≤ 1000 - -10^5 ≤ A[i] ≤ 10^5 **Example** **Input 1:** ``` 8 -2 -3 4 -1 -2 1 5 -3 ``` **Output 1:** ``` 3 7 ``` **Explanation 1:** The subarray `[4, -1, -2, 1, 5]` has the maximum sum (4 + (-1) + (-2) + 1 + 5 = 7) and starts from index 3 to 7. **Input 2:** ``` 1 -5 ``` **Output 2:** ``` 1 1 ``` **Explanation 2:** The single element subarray `[-5]` has the maximum sum (-5) and starts from index 1 to 1. **Input 3:** ``` 5 1 2 3 4 5 ``` **Output 3:** ``` 1 5 ``` **Explanation 3:** The entire array `[1, 2, 3, 4, 5]` has the maximum sum (1 + 2 + 3 + 4 + 5 = 15) and spans from index 1 to 5.","solution":"def max_subarray_indices(arr): Returns the start and end indices (1-based) of the subarray which has the maximum sum. If the array length is zero, returns -1, -1. if len(arr) == 0: return -1, -1 max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return start + 1, end + 1"},{"question":"You are given an array of integers of length n called \\"a\\". You have to perform a series of operations to make all the elements of the array equal to 0. The operations you can perform are: 1. Pick any subarray of length 3, which contains at least one non-zero element. 2. Replace each element (a_i) in the subarray with (a_i - k), where ( a_i ) is an element in the subarray and ( k ) is the maximum element of the subarray before replacement. Your task is to minimize the number of operations needed to make all elements of the array equal to 0. It is guaranteed that it is always possible to make all elements zero. Input The first line contains one integer t (1 ≤ t ≤ 500) — the number of test cases. Each test case is described in two lines. The first line of each test case contains one integer n (3 ≤ n ≤ 1000) — the length of the array. The second line contains n integers (a_1, a_2, ..., a_n) (1 ≤ (a_i) ≤ 10^9) which represents the elements of the array. Output For each test case, print the minimum number of operations needed to make all elements of the array equal to 0. Example Input 3 3 3 2 1 5 1 2 3 4 5 4 10 10 10 10 Output 1 2 2 Explanation In the first test case, we can consider the entire array [3, 2, 1]. After the operation, these elements will be replaced with [0, 0, 0], resulting in a single operation. In the second test case, we can first take the subarray [3, 4, 5]. After this operation, the array becomes [1, 2, 0, 1, 0]. Next, we can take the subarray [1, 2, 0], and after this operation, the array becomes [0, 0, 0, 1, 0]. Finally, we can pick the subarray [1, 0, 0], which will result in [0, 0, 0, 0, 0], needing 2 operations. In the third test case, we need 2 operations: one for the subarray [10, 10, 10] and another for the remaining [10, 10, 10].","solution":"def min_operations_to_zero(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] if len(a) % 3 == 0: results.append(len(a) // 3) else: results.append(len(a) // 3 + 1) return results"},{"question":"Problem Consider M participants taking part in an online game. Each participant is given a unique participant ID from 1 to M. During the game, participants play a series of rounds where each round has exactly one winner. After all rounds have ended, you are required to analyze the winners and determine three key pieces of data: 1. The participant ID of the participant who won the highest number of rounds. 2. The total number of rounds each participant won. 3. The participant ID(s) who won the least number of rounds among all participants who won at least one round. Write a program to determine the above data based on the information of each round\'s winner. Constraints: * All inputs are integers. * 1 ≤ M ≤ 100,000 * 1 ≤ R ≤ 1,000,000 (where R is the number of rounds played) * 1 ≤ wi ≤ M (where wi is the participant ID who won the i-th round) Input The input is given in the following format: M R w1 w2 ... wR Output Output should be in the following format: 1. The participant ID of the participant who won the highest number of rounds. 2. The total count of rounds won by each participant, listed in ascending order of participant ID. 3. The participant ID(s) with the lowest number of wins among those who won at least one round, listed in ascending order. Examples Input 5 10 1 2 3 1 2 3 1 2 1 3 Output 1 1 4 2 3 3 3 4 0 5 0 2","solution":"def analyze_winners(M, R, winners): Analyze the game results to find: 1. The participant ID of the participant who won the highest number of rounds. 2. The total number of rounds each participant won. 3. The participant ID(s) who won the least number of rounds among those who won at least one round. # Initialize the win count for each participant win_counts = [0] * M # Count wins for each participant for winner in winners: win_counts[winner - 1] += 1 # Determine the participant with the highest number of wins max_wins = max(win_counts) highest_winner_id = win_counts.index(max_wins) + 1 # Find the least number of wins among those who won at least once, by filtering out non-zero win counts non_zero_wins = [count for count in win_counts if count > 0] if non_zero_wins: least_wins = min(non_zero_wins) least_winner_ids = [i + 1 for i, count in enumerate(win_counts) if count == least_wins] else: least_winner_ids = [] return highest_winner_id, win_counts, least_winner_ids"},{"question":"Alice has recently learned about various sorting algorithms in her computer science class. She is particularly interested in the efficiency of sorting numbers and wonders how many swaps are needed to sort a list of numbers using selection sort. In selection sort, the smallest element is selected from the unsorted part and swapped with the leftmost unsorted element, moving the boundary of the sorted part one step to the right. The process is repeated until the whole array is sorted. Your task is to help Alice by implementing an algorithm to count the number of swaps required to sort the given list using selection sort. Input The first line of the input contains an integer n, the number of elements in the list (1 ≤ n ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the list of numbers. Output Output a single integer, the number of swaps required to sort the list using selection sort. Example Input: 5 64 25 12 22 11 Output: 3 Explanation: - Swap 64 with 11: [11, 25, 12, 22, 64] - Swap 25 with 12: [11, 12, 25, 22, 64] - Swap 25 with 22: [11, 12, 22, 25, 64] Therefore, a total of 3 swaps are required to sort the list.","solution":"def selection_sort_swaps(arr): Returns the number of swaps needed to sort the list using selection sort. n = len(arr) num_swaps = 0 for i in range(n): # Find the minimum element in remaining unsorted array min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element if min_index != i: arr[i], arr[min_index] = arr[min_index], arr[i] num_swaps += 1 return num_swaps # Function to satisfy the problem interface def count_selection_sort_swaps(n, arr): return selection_sort_swaps(arr)"},{"question":"In the bustling town of Alphaville, there is an event called the \\"Parity Funfair\\". At this event, every day people come and play a unique game - they bring with them a bag of candies, and each candy has a certain sweetness value. The game\'s challenge is to find out if there exists any subset of candies such that their sweetness values add up to an even number. Given an array of integers representing the sweetness values of the candies, write a program to determine if a subset with an even sum exists. Input The first line contains a single integer N, the number of candies. The second line contains N integers S[1], S[2], ..., S[N] representing the sweetness values of the candies. Output Print \\"Possible\\" if there exists at least one subset with an even sum, otherwise print \\"Not Possible\\" (without quotes). Constraints 1 ≤ N ≤ 1000 1 ≤ S[i] ≤ 1000 Example Input 5 1 3 5 7 9 Output Not Possible Input 4 2 3 5 8 Output Possible Explanation In the first example, all candies have odd sweetness values, and the sum of any subset of odd numbers is always odd, hence an even sum subset is not possible. In the second example, the subset {3, 5} has an even sum (3+5=8), hence it is possible.","solution":"def is_even_sum_possible(n, sweets): Determine if a subset with an even sum of sweetness values exists. Parameters: n (int): The number of candies. sweets (list of int): The sweetness values of the candies. Returns: str: \'Possible\' if an even sum subset exists, otherwise \'Not Possible\'. # If there is at least one even number, it is possible to have an even sum. for sweetness in sweets: if sweetness % 2 == 0: return \'Possible\' # If all numbers are odd and there are at least two of them, their sum can be even. if n > 1: return \'Possible\' if any(sweets[i] % 2 != sweets[j] % 2 for i in range(n-1) for j in range(i+1, n)) else \'Not Possible\' else: return \'Not Possible\'"},{"question":"Mark wants to organize his music library on his computer. To do this, he has decided to sort his music files by their length in ascending order. However, the lengths of the files are not directly given; instead, he has a list of songs where each song has a file name and a string representing its duration in the format \\"hh:mm:ss\\" (hours, minutes, seconds). Mark needs a program that will help him sort his music files by their duration. If two songs have the same duration, they should remain in their original order. Write a function that takes a list of tuples as input, where each tuple contains two elements: a string representing the song\'s file name and another string representing the song\'s duration in the \\"hh:mm:ss\\" format. The function should output a list of tuples, sorted by the durations. Input The input consists of: - An integer n (1 ≤ n ≤ 10^6), the number of songs. - n subsequent lines, each containing a song\'s file name and its duration separated by a space. Output Output the list of songs sorted by their durations. Each song should be represented in the same format as the input. Examples Input 3 \\"songA.mp3\\" \\"00:03:20\\" \\"songB.wav\\" \\"00:02:15\\" \\"songC.flac\\" \\"00:03:20\\" Output [ (\\"songB.wav\\", \\"00:02:15\\"), (\\"songA.mp3\\", \\"00:03:20\\"), (\\"songC.flac\\", \\"00:03:20\\") ] Explanation In this example, \\"songB.wav\\" has the shortest duration of 2 minutes and 15 seconds, so it appears first in the sorted list. \\"songA.mp3\\" and \\"songC.flac\\" both have the same duration but remain in their original order because they are already in the correct relative order. Note In cases where the input durations are identical, the original order should be preserved in the output.","solution":"def sort_songs_by_duration(songs): Sort a list of songs by their duration in ascending order. Parameters: songs (list of tuples): A list where each tuple contains a song\'s file name and its duration in \\"hh:mm:ss\\" format. Returns: list of tuples: The input list sorted by the duration of the songs. def duration_to_seconds(duration): # Convert duration \\"hh:mm:ss\\" to seconds h, m, s = map(int, duration.split(\':\')) return h * 3600 + m * 60 + s # Sort the list using the duration converted to seconds as the key return sorted(songs, key=lambda x: duration_to_seconds(x[1]))"},{"question":"The company you work for has implemented a new system that records the transaction logs for user activities. Each log entry contains the timestamp of the transaction, the user ID, and the type of transaction (e.g., deposit, withdrawal, purchase). However, the data collected has gaps, and some entries are missing. Your task is to determine the number of users who performed each type of transaction within a specified time range. Input The input consists of: 1. A list of transaction logs. Each log is represented by a tuple consisting of a timestamp (integer), a user ID (string), and a transaction type (string). 2. Two integers representing the start and end of the time range (inclusive). Output For each transaction type, output the number of unique users who performed that type of transaction within the given time range. Sample Input [(1, \'user1\', \'deposit\'), (2, \'user2\', \'withdrawal\'), (3, \'user1\', \'purchase\'), (4, \'user3\', \'deposit\'), (5, \'user2\', \'purchase\'), (6, \'user1\', \'withdrawal\')] 2 4 Sample Output deposit: 1 withdrawal: 1 purchase: 1 Explanation From timestamp 2 to 4 (inclusive), the transactions are: (2, \'user2\', \'withdrawal\') (3, \'user1\', \'purchase\') (4, \'user3\', \'deposit\') Thus, there is one unique user for each type of transaction within the specified time range.","solution":"def count_unique_users(transaction_logs, start_time, end_time): Returns the number of unique users who performed each type of transaction within the specified time range. Parameters: transaction_logs (list): List of transaction logs; each log is a tuple (timestamp, user_id, transaction_type) start_time (int): Start of the time range (inclusive) end_time (int): End of the time range (inclusive) Returns: dict: A dictionary where keys are transaction types and values are the number of unique users transaction_dict = {} for log in transaction_logs: timestamp, user_id, transaction_type = log if start_time <= timestamp <= end_time: if transaction_type not in transaction_dict: transaction_dict[transaction_type] = set() transaction_dict[transaction_type].add(user_id) for transaction_type in transaction_dict: transaction_dict[transaction_type] = len(transaction_dict[transaction_type]) return transaction_dict"},{"question":"Mina is working on a secret project that involves encoding and decoding messages. She needs your help to write a function that will encode a message using a specific pattern. The encoding process works as follows: 1. Split the original message into words. 2. Reverse each word individually. 3. Rejoin the reversed words into a single string with spaces in between them. Your task is to implement the encoding function according to the rules mentioned above. Input The input consists of a single line containing a string `s` of length n (1 ≤ n ≤ 1000). The string will contain only lowercase English letters and spaces. There will be no leading or trailing spaces, and there will be no more than one space between any two consecutive words. Output Output a single line containing the encoded message. Examples Input hello world Output olleh dlrow Input the quick brown fox Output eht kciuq nworb xof Input a b c Output a b c Note In the first sample, \\"hello\\" reverses to \\"olleh\\" and \\"world\\" reverses to \\"dlrow\\", so the final encoded message is \\"olleh dlrow\\". In the second sample, each word is reversed and joined back into a single sentence. In the third sample, single-character words remain the same after reversing.","solution":"def encode_message(s): Encodes the message by reversing each word individually. Args: s (str): The input string containing words to be encoded. Returns: str: The encoded message with each word reversed. if not s: return \\"\\" words = s.split() reversed_words = [word[::-1] for word in words] encoded_message = \' \'.join(reversed_words) return encoded_message"},{"question":"You are given a tree T, which is an undirected graph with N vertices and N-1 edges. Each vertex is numbered from 1 through N, and each edge connects two vertices. Your task is to determine the maximum distance between any two vertices in T. The distance between two vertices is defined as the number of edges in the shortest path connecting them. Constraints * 2 ≤ N ≤ 10^5 Input The input consists of the following format: N u_1 v_1 u_2 v_2 : u_{N-1} v_{N-1} Output Print the maximum distance between any two vertices in the tree. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 3 1 2 2 3 Output 2 Input 6 1 2 1 3 3 4 3 5 5 6 Output 4","solution":"from collections import defaultdict, deque def find_farthest(node, graph): visited = set() queue = deque([(node, 0)]) farthest_node = node max_distance = 0 while queue: current_node, distance = queue.popleft() visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: max_distance = distance + 1 farthest_node = neighbor return farthest_node, max_distance def max_distance_in_tree(N, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Start with an arbitrary node, say node 1 start_node = 1 farthest_node, _ = find_farthest(start_node, graph) # Perform the second DFS starting from the farthest node found in the first DFS _, max_distance = find_farthest(farthest_node, graph) return max_distance"},{"question":"Alice and Bob have come up with a new card game to pass time during their summer vacation. The game rules are as follows: both Alice and Bob start with a set of n distinct integer cards. During each of their turns, a player will remove exactly one card from their set and add it to a shared pile. The goal of the game is to avoid placing a card on the pile that makes the sum of the pile\'s contents divisible by a given integer m. The game starts with Alice\'s turn. If any player\'s only option leads to a pile sum divisible by m, that player loses the game. Both players play optimally. Determine who will win the game. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) - the initial number of cards each player has and the integer by which the pile sum should not be divisible. The second line contains n distinct space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the cards that Alice initially has. The third line contains n distinct space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 1000) - the cards that Bob initially has. Output Print a single line with the winner\'s name. If Alice wins print \\"Alice\\", otherwise print \\"Bob\\" (without quotes). Examples Input 3 5 1 2 3 4 5 6 Output Bob Input 3 4 2 7 10 3 6 9 Output Alice Note Consider the first test sample. Alice moves first, let\'s say she places 1 on the pile, making the pile sum 1. Bob has to place either 4, 5, or 6. No matter which card Bob places next, at least one configuration will make the pile sum (1+x) not divisible by 5. They both play optimally, and eventually Bob will force Alice into a losing position. In the second example, Alice can play optimally such that she never places herself in a position where she would make the pile sum divisible by 4, hence winning the game.","solution":"def who_wins(n, m, alice_cards, bob_cards): Determine who will win the game given the rules and the cards each player has. :param n: int - the number of cards each player initially has :param m: int - the integer by which the pile sum should not be divisible :param alice_cards: List[int] - the cards Alice initially has :param bob_cards: List[int] - the cards Bob initially has :return: str - \\"Alice\\" if Alice will win, otherwise \\"Bob\\" # In this game, the player to move last will always win. # Given that Alice starts and they have an equal number of turns, # Bob will always be the last to move if n is odd, and Alice will # be the last to move if n is even. if n % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Lena loves to play the game of chess, and she is especially interested in understanding the movement of the knight. Given an 8x8 chessboard, Lena wants to know how many different positions a knight can move to from a given starting position. Write a program to help Lena find out the number of valid moves for a knight from a specified position. Input The input consists of a single line containing a string in the format \\"a1\\", where \'a\'..\'h\' is the column and \'1\'..\'8\' is the row representing the knight\'s current position on the chessboard. Output Output a single integer — the number of valid moves for a knight from the given position. Examples Input e4 Output 8 Input a1 Output 2 Notes The chessboard is denoted in standard chess notation. The knight moves in an \\"L\\" shape: it can move two squares in one direction and then one square perpendicular to that direction. The knight cannot move outside the boundaries of the board.","solution":"def knight_moves(position): Given a position on a standard 8x8 chessboard, returns the number of valid moves for a knight. Position is a string like \\"a1\\", where \'a\'..\'h\' is the column and \'1\'..\'8\' is the row. # Possible moves of a knight represented as (x, y) deltas moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Convert position to board indices col = ord(position[0]) - ord(\'a\') + 1 row = int(position[1]) valid_moves = 0 # Check all possible moves for move in moves: new_col = col + move[0] new_row = row + move[1] if 1 <= new_col <= 8 and 1 <= new_row <= 8: valid_moves += 1 return valid_moves"},{"question":"A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Given an integer array `preorder` where `preorder` is the preorder traversal of a binary tree, and an integer array `inorder` where `inorder` is the inorder traversal of the same tree, construct and return the binary tree. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. The second line contains n distinct integers preorder1, preorder2, ..., preordern (1 ≤ preorderi ≤ 1000) — the preorder traversal of the tree. The third line contains n distinct integers inorder1, inorder2, ..., inordern (1 ≤ inorderi ≤ 1000) — the inorder traversal of the tree. Output Print the level order traversal of the constructed binary tree. Examples Input 6 3 9 20 15 7 8 9 3 15 20 7 8 Output 3 9 20 15 7 8 Input 4 1 2 3 4 3 2 1 4 Output 1 2 4 3","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(preorder, inorder): Builds a binary tree from preorder and inorder traversal lists. if not preorder or not inorder: return None root_val = preorder.pop(0) # The first element of preorder is the root root = TreeNode(root_val) inorder_index = inorder.index(root_val) # Recursively construct the left subtree root.left = build_tree(preorder, inorder[:inorder_index]) # Recursively construct the right subtree root.right = build_tree(preorder, inorder[inorder_index + 1:]) return root def level_order_traversal(root): Returns the level order traversal of the binary tree. if not root: return [] queue = [root] result = [] while queue: current = queue.pop(0) result.append(current.val) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result def construct_and_print_level_order(preorder, inorder): Constructs the binary tree from its preorder and inorder traversal and prints the level order traversal of the tree. root = build_tree(preorder, inorder) return level_order_traversal(root)"},{"question":"Write a program that reads multiple datasets of integers and computes the sum of the even integers for each dataset. Constraints * 0 ≤ integer value ≤ 10000 * the number of integers in each dataset ≤ 1000 * the number of datasets ≤ 3000 Input The input consists of multiple datasets. Each dataset starts with an integer n (the number of integers in the dataset). Then n integers follow, separated by spaces. The input ends with a single integer 0. Your program should not process this terminal symbol. Output For each dataset, print the sum of the even integers in that dataset on a new line. Example Input 4 2 3 4 5 3 6 7 8 1 5 0 Output 6 14 0","solution":"def sum_of_even_integers(datasets): results = [] for dataset in datasets: if dataset[0] == 0: break n = dataset[0] integers = dataset[1:n+1] even_sum = sum(x for x in integers if x % 2 == 0) results.append(even_sum) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') datasets = [] for line in lines: dataset = list(map(int, line.split())) datasets.append(dataset) return datasets def process_input(input_data): datasets = parse_input(input_data) return sum_of_even_integers(datasets)"},{"question":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Constraints * 1 ≤ length of the array ≤ 100,000 * -10^6 ≤ array elements ≤ 10^6 Input An integer n representing the length of the array. An array of n integers. Output Print the length of the longest consecutive elements sequence. Example Input 10 100 4 200 1 3 2 5 6 7 8 Output 8","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence. Parameters: nums (List[int]): An unsorted array of integers Returns: int: Length of the longest consecutive elements sequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only check for the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A bakery is preparing cookies for the upcoming holiday season. They produce n different types of cookies, and each type takes a specific time to bake. The bakery has one oven that can bake any number of different types of cookies at the same time, but it takes the maximum time among the baking times of the chosen cookies to bake them. The bakery schedules the baking in such a way as to minimize the total time taken to bake all the cookies. The order in which the cookies are baked doesn\'t matter. Given the baking times of each type of cookies, determine the minimum total baking time required. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different types of cookies. The second line contains n integers t_1, t_2, …, t_n (1 ≤ t_i ≤ 10^9), where t_i denotes the baking time for the i-th type of cookies. Output Print a single integer — the minimum total baking time required to bake all the cookies. Examples Input 4 3 2 10 4 Output 10 Input 5 1 2 3 4 5 Output 5 Note In the first sample test, the bakery can bake all cookies together in the oven, which takes 10 units of time (the maximum of 3, 2, 10, and 4). In the second sample test, the bakery can bake all cookies together in the oven, which takes 5 units of time (the maximum of 1, 2, 3, 4, and 5).","solution":"def minimum_baking_time(n, baking_times): Returns the minimum total baking time required to bake all types of cookies. Parameters: n (int): The number of different types of cookies. baking_times (list of int): The baking times of each type of cookies. Returns: int: The minimum total baking time. return max(baking_times)"},{"question":"You are given a list of n integers, and your task is to find a subsequence such that the product of the elements in the subsequence is maximized. You are allowed to rearrange the elements, but elements should remain as integers. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of elements in the list. The second line contains n integers ai (-106 ≤ ai ≤ 106). Output In a single line, print an integer — the maximum possible product of a subsequence. Examples Input 3 -1 2 3 Output 6 Input 5 -1 -2 -3 -4 0 Output 24 Note In the first sample, the maximum product subsequence can be obtained by selecting elements {2, 3} which gives the product 2*3 = 6. In the second sample, the maximum product subsequence can be obtained by selecting elements {-2, -3, -4} which gives the product (-2)*(-3)*(-4) = 24. Note that the zero should not be selected as it will nullify the product.","solution":"def max_product_subsequence(n, arr): Returns the maximum product of any subsequence of the given list of integers. positives = [x for x in arr if x > 0] negatives = [x for x in arr if x < 0] zeros = [x for x in arr if x == 0] # Sort negatives to handle the largest negative pair if needed negatives.sort() # If the size of the negative list is odd, remove the largest (smallest in value terms) negative element if len(negatives) % 2 != 0: negatives.pop() # If we only have zero or a single negative number if not positives and len(negatives) <= 1: return max(arr) # Calculate product of all remaining positives and negatives product = 1 for num in positives + negatives: product *= num return product"},{"question":"Given an array of integers representing the daily temperatures, return an array of the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given the list of daily temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Input format: - The first line contains a single integer n, the number of days. - The second line contains n integers representing the daily temperatures. Output format: - Return an array of integers where each element denotes the number of days to wait for a warmer temperature, or 0 if no warmer day is available. Constraints: 1 ≤ n ≤ 100000 30 ≤ temperature ≤ 100 Example Input: 8 73 74 75 71 69 72 76 73 Example Output: 1 1 4 2 1 1 0 0","solution":"def daily_temperatures(T): Returns a list of integers where each element denotes the number of days to wait for a warmer temperature, or 0 if no warmer day is available. :param T: List[int] - A list of daily temperatures :return: List[int] - A list of the number of days to wait for a warmer temperature n = len(T) result = [0] * n stack = [] # stores the indices of the temperatures for i in range(n): while stack and T[i] > T[stack[-1]]: j = stack.pop() result[j] = i - j stack.append(i) return result"},{"question":"A reviewing committee wants to analyze the structure of a textual document. The document is composed of multiple lines, and each line contains a string of lowercase letters. The committee is interested in identifying whether there is a repeated substring pattern within each line. A string has a repeated substring pattern if it can be constructed by repeating a substring more than once. You are tasked with determining whether each line in the document exhibits such a repeated pattern. Write a function that takes as input a list of strings, where each string represents a line in the document. The function should return a list of booleans, where each boolean indicates whether the corresponding line in the input list has a repeated substring pattern. Input - A list of strings `lines`, where each string consists of lowercase letters and its length ranges from 1 to 10^5. The total length of all strings combined does not exceed 10^6. Output - A list of booleans, where each boolean is `True` if the corresponding string in the input list has a repeated substring pattern, and `False` otherwise. Example Input [\\"abab\\", \\"aba\\", \\"abcabcabc\\", \\"a\\"] Output [True, False, True, False] Explanation - For \\"abab\\", it can be constructed by repeating the substring \\"ab\\". - For \\"aba\\", there is no repeated substring pattern. - For \\"abcabcabc\\", it can be constructed by repeating the substring \\"abc\\". - For \\"a\\", it has to be itself which cannot be formed by repeating another string.","solution":"def repeated_substring_pattern(lines): Returns a list of booleans indicating whether each string in the input list has a repeated substring pattern. def is_repeated_pattern(s): Helper function to determine if a string s has a repeated substring pattern. l = len(s) for i in range(1, l // 2 + 1): if l % i == 0: if s[:i] * (l // i) == s: return True return False return [is_repeated_pattern(line) for line in lines]"},{"question":"A large company is organizing a coding competition, and each participant is required to solve a series of coding problems within a given timeframe. To ensure fairness in the grading process, they have devised a grading system that evaluates the participants based on the uniqueness and complexity of their solutions. The company now needs an algorithm that helps them detect \\"%UNIQUE%\\" code snippets within a collection of submitted solutions. The uniqueness is defined as the number of distinct substrings present in the code snippet provided by each participant. Your task is to write a function that takes a list of code snippets from different participants and returns the number of distinct substrings for each snippet. Input Format: - The first line contains an integer t - the number of code snippets. - Each of the next t lines contains a single code snippet which is a string of lowercase English letters. Output Format: - Print t lines, each containing the number of distinct substrings for the corresponding code snippet. Constraints: 1 ≤ t ≤ 100 1 ≤ length of each code snippet ≤ 1000 Assume that all code snippets consist of only lowercase English letters (\'a\'–\'z\'). Function Signature: ```python def count_distinct_substrings(snippets: List[str]) -> List[int]: pass ``` Example Input: 3 ababa abcdef aaaaa Example Output: 9 21 5 Explanation: - For the first snippet \\"ababa\\", the distinct substrings are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"ababa\\", \\"babab\\", \\"abab\\". - For the second snippet \\"abcdef\\", the distinct substrings are all the possible combinations from \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", up to \\"abcdef\\" itself. - For the third snippet \\"aaaaa\\", the distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\", \\"aaaaa\\". Note: The number of distinct substrings can be efficiently computed using suffix arrays or other advanced data structures.","solution":"def count_distinct_substrings(snippets): def count_substrings(s): n = len(s) suffixes = sorted(s[i:] for i in range(n)) lcp = [0] * n for i in range(1, n): lcp[i] = common_prefix_length(suffixes[i-1], suffixes[i]) total_substrings = sum(len(suffix) for suffix in suffixes) total_common_prefix = sum(lcp) return total_substrings - total_common_prefix def common_prefix_length(s1, s2): length = 0 min_len = min(len(s1), len(s2)) for i in range(min_len): if s1[i] != s2[i]: break length += 1 return length results = [] for snippet in snippets: results.append(count_substrings(snippet)) return results"},{"question":"A large software company wants to build an efficient file directory system. The system can perform the following operations on a hierarchical directory structure: 1. Create a new directory with ID v under parent directory u. 2. Delete directory v and all its subdirectories. 3. Retrieve the size of directory v, which is defined as the total number of subdirectories including itself. Initially, there is only one root directory with ID 1. Input The first line of the input contains an integer, q (1 ≤ q ≤ 200000), the number of operations. Each of the following q lines contains two or three space-separated integers depending on the type of operation: - For create operation: `1 u v`, where 1 represents the operation type, u (1 ≤ u ≤ 200000) is the parent directory, and v (1 ≤ v ≤ 200000) is the new directory ID. - For delete operation: `2 v`, where 2 represents the operation type and v (1 ≤ v ≤ 200000) is the directory to be deleted. - For retrieve operation: `3 v`, where 3 represents the operation type and v (1 ≤ v ≤ 200000) is the directory for which the size needs to be retrieved. It is guaranteed that no two directories will have the same ID, and IDs used in delete operations will always refer to existing directories. Output For each type 3 operation, output the size of the directory on a new line in the order in which they are requested. Examples Input 10 1 1 2 1 1 3 1 2 4 1 2 5 1 3 6 1 3 7 3 1 3 2 2 2 3 1 Output 7 3 4","solution":"class FileDirectorySystem: def __init__(self): self.directory_tree = {1: set()} self.parent = {1: None} def create(self, u, v): if u not in self.directory_tree: self.directory_tree[u] = set() self.directory_tree[u].add(v) self.directory_tree[v] = set() self.parent[v] = u def delete(self, v): sub_dirs = self._get_all_subdirectories(v) sub_dirs.add(v) for dir_id in sub_dirs: if dir_id in self.directory_tree: parent_dir = self.parent[dir_id] if parent_dir and parent_dir in self.directory_tree: self.directory_tree[parent_dir].remove(dir_id) del self.directory_tree[dir_id] def retrieve(self, v): return self._get_subdirectory_size(v) def _get_all_subdirectories(self, v): result = set() stack = [v] while stack: current = stack.pop() for sub in self.directory_tree.get(current, []): result.add(sub) stack.append(sub) return result def _get_subdirectory_size(self, v): sub_dirs = self._get_all_subdirectories(v) return len(sub_dirs) + 1 # This solves the problem as described in the prompt def main(): import sys input = sys.stdin.read data = input().split(\'n\') q = int(data[0].strip()) fds = FileDirectorySystem() results = [] for i in range(1, q + 1): if not data[i].strip(): continue query = list(map(int, data[i].strip().split())) if query[0] == 1: u, v = query[1], query[2] fds.create(u, v) elif query[0] == 2: v = query[1] fds.delete(v) elif query[0] == 3: v = query[1] result = fds.retrieve(v) results.append(result) for result in results: print(result)"},{"question":"2]. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome when punctuation and capitalization are ignored. Given a string s, determine if it is a palindrome. Your task is to write a function that can check if the given string is a palindrome when all non-alphanumeric characters are removed and the remaining characters are converted to lowercase. Function Signature: `def is_palindrome(s: str) -> bool:` Input - A single string `s` (1 ≤ len(s) ≤ 10^6). The string may contain spaces, punctuation, and can be a mix of uppercase and lowercase letters. Output - Return `True` if the cleaned and normalized string is a palindrome. Otherwise, return `False`. Examples Input \\"A man, a plan, a canal, Panama!\\" Output True Input \\"race a car\\" Output False Input \\"Was it a car or a cat I saw?\\" Output True Hints - Consider using the `str.isalnum` method to filter out non-alphanumeric characters. - Convert characters to lowercase for normalization with `str.lower`.","solution":"def is_palindrome(s: str) -> bool: Returns True if the input string is a palindrome after removing all non-alphanumeric characters and normalizing to lowercase. Otherwise, returns False. # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is a palindrome return cleaned == cleaned[::-1]"},{"question":"A software company is developing an advanced navigation system for autonomous robots that move on a 2D grid. Each robot can travel in four directions (up, down, left, right) and can perform a set of specific tasks at certain grid locations. While traveling, robots have to avoid obstacles and find the shortest path to complete their assigned tasks. You have to help them develop a module that determines the minimum number of steps required for a robot to move from its start position to a target position, avoiding obstacles on its way. Grid cells may be empty, may contain an obstacle, or may be a start or target position. A robot can only travel through empty cells. The grid is represented as a 2D array where: - `0` represents an empty cell - `1` represents an obstacle - `S` represents the starting cell - `T` represents the target cell Your task is to implement a function `min_steps(grid)` that returns the minimum number of steps required for the robot to reach the target position from the start position. If the target position is unreachable, return -1. **Input** - A 2D array grid of size m x n (1 ≤ m, n ≤ 100). - The grid contains exactly one start position (S) and one target position (T). **Output** - An integer representing the minimum number of steps to reach the target position, or -1 if it is unreachable. **Examples** ``` Input [[\\"S\\", 0, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, \\"T\\"]] Output 6 ``` ``` Input [[\\"S\\", 1, 0], [1, 0, 0], [1, 1, \\"T\\"]] Output -1 ``` **Note** 1. In the first example, the robot can take the path `[(0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3)]`, which requires 6 steps. 2. In the second example, the target is unreachable due to obstacles blocking all possible paths.","solution":"from collections import deque def min_steps(grid): Returns the minimum number of steps required for the robot to reach the target position from the start position, or -1 if it is unreachable. # Locate start and target positions start = target = None for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if start and target: break if start and target: break if not start or not target: return -1 # Initialize BFS q = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right while q: x, y, steps = q.popleft() if (x, y) == target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] != 1 and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny, steps + 1)) return -1"},{"question":"A group of friends decides to play a game called \\"Treasure Hunt\\". In this game, they hide treasures in a grid and then try to find the largest number of treasures in a single straight line. The grid is represented by an n × m matrix where each cell contains either a \'.\' (representing empty space) or a \'T\' (representing a treasure). A line can be either horizontal, vertical, or diagonal (45 degrees). Each line consists of consecutive cells that are either all horizontally connected, vertically connected, or diagonally connected. The players want to know the maximum number of treasures they can consecutively find in such a line. Your task is to write a program that determines the maximum number of treasures in any straight line. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each, either \'.\' or \'T\', representing the grid. Output Print a single integer — the maximum number of treasures in a single straight line. Examples Input 4 5 ..... T.... .TTTT ..TT. Output 4 Input 3 3 .T. TTT .T. Output 3 Input 5 5 T.TTT ..T.. .T.T. ..T.. T.TTT Output 3 Explanation In the first example, the longest line of consecutive treasures is the horizontal line of 4 \'T\'s in the third row. In the second example, the longest line of consecutive treasures is the horizontal line of 3 \'T\'s in the second row. In the third example, the longest line of consecutive treasures is found diagonally with 3 \'T\'s from cell (1,2) to (3,4) or (1,4) to (3,2).","solution":"def max_treasures(n, m, grid): def horizontal_max(): max_t = 0 for row in grid: current_t = 0 for cell in row: if cell == \'T\': current_t += 1 max_t = max(max_t, current_t) else: current_t = 0 return max_t def vertical_max(): max_t = 0 for col in range(m): current_t = 0 for row in range(n): if grid[row][col] == \'T\': current_t += 1 max_t = max(max_t, current_t) else: current_t = 0 return max_t def diag_max(): max_t = 0 # Check bottom-left to top-right diagonals for d in range(n + m - 1): current_t = 0 for i in range(max(0, d - m + 1), min(n, d + 1)): if grid[i][d - i] == \'T\': current_t += 1 max_t = max(max_t, current_t) else: current_t = 0 # Check top-left to bottom-right diagonals for d in range(n + m - 1): current_t = 0 for i in range(max(0, d - m + 1), min(n, d + 1)): if grid[i][m - 1 - (d - i)] == \'T\': current_t += 1 max_t = max(max_t, current_t) else: current_t = 0 return max_t return max(horizontal_max(), vertical_max(), diag_max())"},{"question":"This is a combinatorial problem. You are provided with N types of coins, and each type has an unlimited supply. Each type of coin has a distinct value, represented as C1, C2, ..., CN. Your goal is to determine the number of distinct ways to make a sum K using these coins. Determine the number of distinct combinations of the coins that sum up to exactly K. Two combinations are considered distinct if they use a different count of at least one type of coin. Input The first line contains two integers, N and K (1 ≤ N ≤ 100, 1 ≤ K ≤ 10^5) — the number of types of coins and the desired sum, respectively. The second line contains N integers, C1, C2, ..., CN (1 ≤ Ci ≤ 10^4), representing the values of the coins. Output Print one integer, the number of distinct ways to make the sum K using the given types of coins. Example Input 3 4 1 2 3 Output 4 Explanation In this example, there are four distinct ways to make the sum 4 using the coins of values 1, 2, and 3: 1. 1+1+1+1 2. 1+1+2 3. 2+2 4. 1+3","solution":"def count_combinations(N, K, coins): # Create a list to store the number of ways to make each amount up to K dp = [0] * (K + 1) dp[0] = 1 # There is one way to make 0 amount, which is to use no coins # Loop through each type of coin for coin in coins: # Update the dp array for all amounts that can be reached with the current coin for i in range(coin, K + 1): dp[i] += dp[i - coin] return dp[K]"},{"question":"Write a function to determine if a string has all unique characters. Input The input consists of a single line containing a string of characters \'a\'-\'z\' and \'A\'-\'Z\', with the length between 1 and 1000 characters, inclusive. Output Output \\"True\\" if the string has all unique characters, \\"False\\" otherwise. Examples Input abcdefghijklmnopqrstuvwxyz Output True Input CodeChef Output False","solution":"def has_all_unique_characters(s): Returns True if the given string has all unique characters, otherwise False. return len(set(s)) == len(s)"},{"question":"Given a list of `N` integers, where each integer represents the maximum number of steps you can jump forward from that position. Your goal is to determine the minimum number of jumps required to reach the end of the list from the start. You are initially positioned at the first index (position 0). If it is not possible to reach the end of the list, return -1. Your task is to implement the function `min_jumps(arr: List[int]) -> int` that returns the minimum number of jumps to reach the end, or -1 if it is not possible. Constraints: - `1 <= N <= 10^6` - `0 <= arr[i] <= 10^6` Input A list of integers representing the maximum steps you can jump from each position. Output An integer representing the minimum number of jumps to reach the end or -1 if it is not possible. Examples Input ```python [2, 3, 1, 1, 4] ``` Output ```python 2 ``` Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Input ```python [1, 2, 3] ``` Output ```python 2 ``` Input ```python [0, 2, 3] ``` Output ```python -1 ```","solution":"from typing import List def min_jumps(arr: List[int]) -> int: if len(arr) <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"In a large tech company, each employee is assigned a unique ID. The company stores the manager-employee relationships in a printed organizational chart. The company recently reorganized its departments and now wants to rebuild the chart in a digital form using a program. You are given a list of pairs where each pair contains two employee IDs [manager, employee], indicating that the first employee (manager) is the direct supervisor of the second employee (employee). You need to write a program that reads these relationships and outputs the digital organizational chart. The digital chart should represent each company\'s hierarchical structure starting from the CEO, who has no manager. For each manager, output their direct employees in a sorted (ascending) order by their numeric employee ID. Input The first line contains an integer n (1 ≤ n ≤ 1000) indicating the number of pairs. Each of the next n lines contains 2 integers, manager and employee, which represent the direct manager-employee relationship. Output Output the hierarchical structure starting from the CEO. Traverse the hierarchy, and for each manager, list their direct employees in sorted order. Each manager\'s list of employees should be indented with two spaces more than their manager. If there are multiple CEOs (employees with no managers), you may assume the CEO with the smallest ID as the true CEO. Example Input 6 1 2 1 3 2 4 2 5 3 6 3 7 Output 1 2 4 5 3 6 7","solution":"from collections import defaultdict def build_organization_chart(pairs): # Create a dictionary to store manager-employee relationships manager_to_employees = defaultdict(list) all_employees = set() employees_with_manager = set() for manager, employee in pairs: manager_to_employees[manager].append(employee) all_employees.add(manager) all_employees.add(employee) employees_with_manager.add(employee) # Find the CEO (an employee who has no manager) ceo_candidates = all_employees - employees_with_manager ceo = min(ceo_candidates) def print_chart(manager, indent_level=0): print(\' \' * indent_level + str(manager)) for employee in sorted(manager_to_employees.get(manager, [])): print_chart(employee, indent_level + 2) # Print the organizational chart starting from the CEO print_chart(ceo) # Example usage: # pairs = [ # [1, 2], # [1, 3], # [2, 4], # [2, 5], # [3, 6], # [3, 7] # ] # build_organization_chart(pairs)"},{"question":"John has a text editor that supports only two operations: inserting a specific character at a given position and deleting a character from a given position. John wants to transform one string into another by applying these operations the minimum number of times. Given two strings, S (source) and T (target), compute the minimum number of operations required to transform S into T. Input The first line contains the string S (1 ≤ |S| ≤ 100). The second line contains the string T (1 ≤ |T| ≤ 100). Both strings consist of lowercase English letters. Output Print a single integer, the minimum number of operations required to transform S into T. Example Input abcdef azced Output 3 Explanation In this example, we can transform \\"abcdef\\" into \\"azced\\" using the following steps: 1. Replace \'b\' with \'z\'. 2. Replace \'c\' with \'c\'. 3. Replace \'d\' with \'e\'. 4. Delete \'f\'. This yields a total of 3 operations.","solution":"def min_operations(S, T): Computes the minimum number of operations to transform string S into string T. m, n = len(S), len(T) # Create a (m+1) x (n+1) matrix to store the number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case: Transform empty string to target by inserting all characters of T for j in range(1, n + 1): dp[0][j] = j # Base case: Transform source to empty string by deleting all characters of S for i in range(1, m + 1): dp[i][0] = i for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Problem E: The Lost Treasure Hunt Mr. Damian is a renowned treasure hunter known for his extraordinary cartographical skills. He has recently discovered a map detailing the locations of several ancient temples scattered across a vast desert. Each temple may or may not contain a piece of a lost treasure. The challenge is to collect all treasure pieces in the minimum amount of time. The desert can be represented as an N x N grid. Each cell either contains a temple or is an empty cell. Movement is possible from one cell to any of its adjacent cells (up, down, left, right), but you cannot move diagonally. Your task is to write a program to determine the shortest possible time Mr. Damian needs to visit all the temples containing treasures, starting from a specified starting temple. The time taken to move from one cell to any adjacent cell is always 1 unit. Mr. Damian must visit the temples in sequence if specified, but he can choose the shortest path to minimize his travel time between temples. Input The input consists of a single dataset in the following format: > N > t1_x t1_y treasure 1 > t2_x t2_y treasure 2 > ... > tM_x tM_y treasure M > R > s1 s2 ... sR The input items are as follows: - The first line contains an integer N (1 ≤ N ≤ 100) representing the size of the grid (N x N). - The next M lines describe the temples’ locations and whether they contain parts of the treasure: - Each of these lines contains three integers ti_x, ti_y (0 ≤ ti_x, ti_y < N) representing the coordinates of the temple in the grid, and \'treasure\' which is either 0 (no treasure) or 1 (part of the treasure). - The following line contains an integer R (1 ≤ R ≤ 1000), the number of temples specified in the sequence of Mr. Damian\'s treasure hunt. - The last line contains R integers s1, s2, ... sR (0 ≤ si < M) specifying the indices (1-based) of the temples in the sequence they need to be visited. Output For the given input dataset, find the shortest travel time Mr. Damian requires to visit the temples in the specified order and collect all treasure pieces. Output this time on a single line. Example Input 5 0 0 1 0 1 0 1 1 1 2 2 0 4 4 1 3 1 3 5 Output 8 Explanation Mr. Damian starts at temple 1 (0, 0), travels to temple 3 (1, 1), then to temple 5 (4, 4), collecting all parts of the treasure. The shortest travel time is 8 units.","solution":"from collections import deque def shortest_path_bfs(grid, start, end): N = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist+1)) return -1 def minimum_time_to_collect_treasure(N, temples, sequence): grid = [[0] * N for _ in range(N)] treasures = [] for x, y, treasure in temples: grid[x][y] = treasure treasures.append((x, y, treasure)) total_time = 0 current_position = treasures[sequence[0]-1] for index in sequence[1:]: next_position = treasures[index-1] travel_time = shortest_path_bfs(grid, current_position[:2], next_position[:2]) total_time += travel_time current_position = next_position return total_time def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0].strip()) M = int(lines[1].strip()) temples = [] for i in range(2, 2 + M): x, y, treasure = map(int, lines[i].strip().split()) temples.append((x, y, treasure)) R = int(lines[2 + M].strip()) sequence = list(map(int, lines[2 + M + 1].strip().split())) return (N, temples, sequence) def main(): import sys input_str = sys.stdin.read() N, temples, sequence = parse_input(input_str) result = minimum_time_to_collect_treasure(N, temples, sequence) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Jason works in a factory that produces metal rods of various lengths. He has a special machine that can cut these rods exactly once. Given a rod of length `n`, Jason can cut it into two pieces in such a way that one piece has length `a` and the other piece has length `b` (where `a + b = n`). Jason knows that for each piece of rod, the selling price is proportional to the square of its length. That is, a piece of rod of length `x` will fetch `x^2` units of currency. Jason wants to maximize the total selling price of the two pieces after making one cut. Help Jason determine the maximum possible total selling price he can get by making a single cut on the rod. Input The first line of input contains an integer `n` (1 ≤ n ≤ 10^6), the length of the rod. Output Output a single integer, the maximum possible total selling price Jason can obtain by making one cut on the rod. Examples Input 10 Output 50 Input 5 Output 13 Explanation In the first sample, Jason can cut the rod into pieces of length 5 and 5. The total selling price would be 5^2 + 5^2 = 25 + 25 = 50. In the second sample, Jason can cut the rod into pieces of length 2 and 3. The total selling price would be 2^2 + 3^2 = 4 + 9 = 13.","solution":"def max_selling_price(n): Given a rod of length n, determine the maximum possible total selling price Jason can obtain by making a single cut on the rod, where the price of a piece of rod of length x is x^2. if n == 1: return 1 # To maximize a^2 + b^2 where a + b = n # Try cutting the rod into nearly equal parts a = n // 2 b = n - a return a**2 + b**2"},{"question":"Problem You are given a list of integers and a set of queries. Each query either updates an element in the list or asks for the maximum element in a specific sublist. The operations you need to support are: - Update an element at a specific index to a new value. - Query the maximum value in a sublist from index `l` to index `r` (inclusive). Constraints The input satisfies the following conditions. * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq A[i] leq 10^9 For each query, the input satisfies the following conditions. Query u * u index value * 1 leq index leq N * 1 leq value leq 10^9 Query q * q l r * 1 leq l leq r leq N Input The input is given in the following format: N Q A[1] A[2] ... A[N] query_1 query_2 ... query_Q Each query is given in one of two forms: Query u : u index value Query q : q l r Output For each query q , print the maximum value in the specified sublist on a new line. Examples Input 5 4 1 2 3 4 5 q 1 3 u 2 6 q 1 5 q 3 3 Output 3 6 3 Input 6 3 10 20 30 40 50 60 q 2 4 u 4 25 q 1 6 Output 40 60","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (2 * self.n) self.__build() def __build(self): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = self.data[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): # Update value at the leaf pos += self.n self.tree[pos] = value # Update internal nodes while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def maximum(self, left, right): res = -float(\'inf\') left += self.n right += self.n + 1 while left < right: if left % 2 == 1: res = max(res, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 res = max(res, self.tree[right]) left //= 2 right //= 2 return res def process_queries(N, Q, A, queries): st = SegmentTree(A) result = [] for query in queries: parts = query.split() type_ = parts[0] if type_ == \'q\': l = int(parts[1]) - 1 r = int(parts[2]) - 1 result.append(st.maximum(l, r)) elif type_ == \'u\': index = int(parts[1]) - 1 value = int(parts[2]) st.update(index, value) return result"},{"question":"A mailroom system is being developed to categorize mail based on their arrival timestamp and associated priority. Each mail item is represented by a tuple `(timestamp, priority)`. You are given a list of such tuples, where each tuple consists of an arrival timestamp and a priority level (1 being the highest priority and 5 being the lowest priority). You need to write a function that sorts these mail items primarily by their priority and secondarily by their arrival timestamp in ascending order. Function Signature: ```python def sort_mail(items: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Input - A list of tuples `items` where each tuple contains two integers. The first integer represents the timestamp (0 <= timestamp <= 10^5), and the second integer represents the priority (1 <= priority <= 5). # Output - Return a list of tuples sorted primarily by priority and secondarily by arrival timestamp. # Examples ```python assert sort_mail([(2, 3), (1, 2), (3, 2), (2, 1)]) == [(2, 1), (1, 2), (3, 2), (2, 3)] assert sort_mail([(2, 3), (1, 1), (3, 3), (2, 2)]) == [(1, 1), (2, 2), (2, 3), (3, 3)] ``` # Constraints - The list of items will have between 0 and 10^5 tuples.","solution":"from typing import List, Tuple def sort_mail(items: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Sorts mail items primarily by their priority and secondarily by their arrival timestamp. return sorted(items, key=lambda item: (item[1], item[0]))"},{"question":"The Treehouse Database (TDB) is a unique data storage solution that visualizes data in tree structures. A common task when working with TDB is to determine the depth of the deepest leaf node in the tree. You are tasked with writing a function that can locate the deepest leaf node and return its depth. The TDB tree uses a node-based structure. Each node can have zero or more children, and each node is represented as a pair of values: its unique identifier and its depth value. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. Next n lines contain two integers each, representing a node and the depth of that node respectively. Output Print the depth of the deepest leaf node. Additional Information - The depth hierarchy is such that the root node has a depth of 0. - Every other node has a depth of one more than its parent node, indicating it is one level deeper in the tree. Example Input 6 1 0 2 1 3 1 4 2 5 2 6 3 Output 3 Explanation The sample tree is structured as follows: 1 / 2 3 / 4 5 6 The deepest leaf node in the tree is node 6, which is at a depth of 3. Hence, the output is 3.","solution":"def deepest_leaf_depth(n, nodes): Given a list of nodes and their depths, returns the depth of the deepest leaf node. :param n: An integer representing the number of nodes. :param nodes: A list of tuples, where each tuple contains two integers (node identifier, depth). :return: An integer representing the depth of the deepest leaf node. max_depth = 0 for _, depth in nodes: if depth > max_depth: max_depth = depth return max_depth"},{"question":"A city has n buildings connected by m one-way roads. Each road connects two buildings and has a certain length. You have just acquired a new delivery company and want to determine the shortest paths from a specified building to all other buildings in the city. Your task is to implement an algorithm that will compute the shortest distance from the specified building to all other buildings using the given roads. There might be buildings that are not reachable from the starting building, and their distance should be marked as -1. Input The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of buildings and the number of roads, respectively. The next m lines each contain three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1000), representing a road from building u to building v of length l. The last line contains a single integer s (1 ≤ s ≤ n) — the starting building for the delivery. Output Print n integers. The ith (1-based) integer should be the shortest distance from building s to building i. If a building i is not reachable from s, print -1 for that building. Examples Input 5 6 1 2 2 1 4 1 2 3 3 4 5 2 5 2 1 3 5 4 1 Output 0 2 5 1 3 Input 3 2 1 2 4 2 3 6 2 Output -1 0 6 Explanation In the first example, the shortest path from building 1 to building 2 is 2, from 1 to 3 is 5 (through building 2), from 1 to 4 is 1, and from 1 to 5 is 3 (through building 4). In the second example, building 1 is not reachable from building 2, so its distance is -1. The other distances are calculated based on the direct available roads.","solution":"import heapq def dijkstra(n, m, edges, start): Computes the shortest distances from the specified start building to all other buildings. Returns a list where the ith element represents the shortest distance from start to the ith building. If a building is not reachable, its distance is marked as -1. graph = [[] for _ in range(n + 1)] for u, v, l in edges: graph[u].append((v, l)) # Initialize the distances array and the min heap distances = [-1] * (n + 1) distances[start] = 0 min_heap = [(0, start)] # (distance, node) while min_heap: current_dist, u = heapq.heappop(min_heap) # If we find a larger distance in the heap, we skip if current_dist > distances[u]: continue # Relax the edges for v, weight in graph[u]: new_dist = current_dist + weight if distances[v] == -1 or new_dist < distances[v]: distances[v] = new_dist heapq.heappush(min_heap, (new_dist, v)) # Replace the start position with 0 (distance from start to start is 0) distances = distances[1:] # Removing the first index to match the 1-based indexing return distances # Example Usage: # n = 5 # m = 6 # edges = [(1, 2, 2), (1, 4, 1), (2, 3, 3), (4, 5, 2), (5, 2, 1), (3, 5, 4)] # start = 1 # print(dijkstra(n, m, edges, start))"},{"question":"Write a program to evaluate the popularity of hashtags in a given set of tweets. The input consists of a series of tweets, each containing one or more hashtags. Your task is to count the number of occurrences of each hashtag and print them in descending order of their counts. If multiple hashtags have the same count, they should be ordered alphabetically. Input The input consists of multiple lines, each representing a tweet. A tweet is a string of lowercase alphabetic characters and spaces, where hashtags are prefixed with the \'#\' symbol. Each tweet will have at least one hashtag, and the maximum length of a tweet is 140 characters. The input ends with EOF. The number of tweets will not exceed 1000. Output For each unique hashtag, print the hashtag followed by its count, both separated by a space. Output each hashtag in a new line, sorted by their counts in descending order. If two hashtags have the same count, sort them alphabetically. Example Input love this #weather in #newyork having fun at the #beach #weather is great here #travel #newyork adventures #travel the world Output #newyork 2 #travel 2 #weather 2 #beach 1","solution":"def evaluate_hashtags(tweets): from collections import Counter hashtags = [] for tweet in tweets: words = tweet.strip().split() for word in words: if word.startswith(\'#\'): hashtags.append(word) hashtag_count = Counter(hashtags) # Sorting by count (descending) and then alphabetically sorted_hashtags = sorted(hashtag_count.items(), key=lambda x: (-x[1], x[0])) result = [f\\"{hashtag} {count}\\" for hashtag, count in sorted_hashtags] return result # Example Usage: # tweets = [ # \\"love this #weather in #newyork\\", # \\"having fun at the #beach\\", # \\"#weather is great here\\", # \\"#travel #newyork adventures\\", # \\"#travel the world\\" # ] # output = evaluate_hashtags(tweets) # for line in output: # print(line)"},{"question":"Mahesh and his friends are playing an interesting game. They have an array of positive integers, and they want to perform a series of special operations on this array. In each operation, one of the friends selects two different integers a and b from the array, such that their sum is even, and replaces them with their sum. This operation is repeated several times until no more such operations can be performed. Your task is to determine the final state of the array after all possible operations have been carried out, and output the sum of the resulting array. Input The first line of input contains an integer n (2 ≤ n ≤ 100,000), the number of elements in the array. The second line of input contains n positive integers, each element of the array, separated by a space (1 ≤ array[i] ≤ 1,000,000,000). Output Output a single integer, the sum of the elements of the array after all possible operations have been performed. Examples Input 4 2 3 8 12 Output 25 Input 5 1 1 2 2 3 Output 9 Input 3 5 9 11 Output 25 Note In the first example, the operation is performed as follows: - First, we can select 2 and 8 (sum is 10, even), replace them with 10. The array becomes [10, 3, 12] - Then, select 10 and 12 (sum is 22, even), replace them with 22. The array becomes [22, 3] No more operations can be performed, and the sum of the final array is 25. In the second example, the operation could be performed as: - Select 1 and 1 (sum is 2, even), replace them with 2. The array becomes [2, 2, 2, 3] - Select 2 and 2 (sum is 4, even), replace them with 4. The array becomes [4, 2, 3] No more operations can be performed, and the sum of the final array is 9.","solution":"def final_array_sum(n, arr): Returns the sum of the array after all possible operations have been carried out. # Split the array into even and odd numbers evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] # Sum up all remaining even and odd numbers separately even_sum = sum(evens) odd_sum = sum(odds) # Return the total sum of the final array return even_sum + odd_sum"},{"question":"Arya Stark is known for her determination, and her latest task is to decode a secret message left by her enemies. The message is encoded in a string that contains instructions mixed with dummy characters. The encoding scheme uses the following rules: 1. If the character is an uppercase letter, it moves its position to the start of the string. 2. If the character is a digit, its value is appended to the end of the string. 3. All lowercase letters and special characters are discarded. The challenge is to decode the message by rearranging the characters according to the rules and then reversing the final string. To illustrate, given the input string \\"a1B2cC3@D#4\\", we start by moving uppercase letters to the front (\\"BCD\\"), then appending the digits to the back (\\"1234\\"), and discarding everything else. Finally, to get the decoded message, we reverse the concatenated string (\\"4321DCB\\"). Write a function that accepts a single string input and returns the decoded message. Input: A single line string `s` (1 <= length(s) <= 1000), containing uppercase letters, lowercase letters, digits, and special characters. Output: The decoded string after applying the described encoding scheme and reversing it. # Sample Input a1B2cC3@D#4 # Sample Output 4321DCB # Explanation First, move uppercase letters \\"B\\", \\"C\\", \\"D\\" to the front, resulting to \\"BCD\\". Next, append the digits \\"1\\", \\"2\\", \\"3\\", \\"4\\" to the end, so it becomes \\"BCD1234\\". Lastly, reverse the string \\"BCD1234\\" to get \\"4321DCB\\".","solution":"def decode_message(s): Decodes the given encrypted message by moving uppercase letters to the start, appending digits to the end, discarding other characters, and then reversing the string. uppers = [] digits = [] for char in s: if char.isupper(): uppers.append(char) elif char.isdigit(): digits.append(char) combined = \'\'.join(uppers) + \'\'.join(digits) return combined[::-1]"},{"question":"Given a sequence defined as follows: a(1) = 1, a(2) = 2, a(n) = a(n-1) * a(n-2) for n > 2. Write a function to generate and print the nth term of this sequence. Input: First line contains an integer T, the number of test cases. Each of the next T lines contains a single integer n. Output: For each test case, print the nth term of the sequence. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 15 Sample Input 3 1 2 5 Sample Output 1 2 4","solution":"def generate_nth_term(n): Generate the nth term of the sequence defined as: a(1) = 1 a(2) = 2 a(n) = a(n-1) * a(n-2) for n > 2 if n == 1: return 1 elif n == 2: return 2 else: a = [0] * (n+1) a[1] = 1 a[2] = 2 for i in range(3, n+1): a[i] = a[i-1] * a[i-2] return a[n] def process_test_cases(T, test_cases): Process the test cases and print the nth term for each case. results = [] for n in test_cases: results.append(generate_nth_term(n)) return results"},{"question":"Little Sam loves playing video games, especially ones that involve solving puzzles with coins. Each coin has a certain value, and Sam enjoys creating sequences of coins where no two consecutive coins have the same value. Given a set of coins, help Sam create the longest possible sequence of coins with the unique-repetition condition. Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of coins. Next n lines contain the values of the coins, one value per line. It is guaranteed that there are at least two coins with different values. Output Print the length of the longest sequence Sam can form under the described condition on the first line. Print the sequence itself on the second line, with space-separated values. If there are several sequences of maximum length, print any of them. Examples Input 5 1 2 2 3 3 Output 5 1 2 1 2 1 Input 3 2 1 2 Output 3 2 1 2","solution":"def longest_unique_repetition_sequence(n, coin_values): Returns the length and the longest sequence of coins such that no two consecutive coins have the same value. :param n: int, number of coins :param coin_values: list of int, values of the coins :return: tuple, (length of sequence, the sequence itself as a list of int) from collections import Counter # Count occurrences of each coin value counter = Counter(coin_values) # Extract unique coins and sort them by frequency sorted_coins = sorted(counter.items(), key=lambda x: -x[1]) # Create a sequence by alternating between the most frequent values sequence = [] prev = None while sorted_coins: for i, (coin, freq) in enumerate(sorted_coins): if coin != prev: sequence.append(coin) sorted_coins[i] = (coin, freq - 1) if sorted_coins[i][1] == 0: sorted_coins.pop(i) prev = coin break return len(sequence), sequence"},{"question":"Digital Sum Write a function `digital_sum(n)` that takes a non-negative integer `n` and returns the sum of its digits. If the resulting sum has more than one digit, repeat the process until a single digit is obtained. This is also known as finding the digital root of the number. The function should handle very large numbers efficiently. # Function Signature ```python def digital_sum(n: int) -> int: pass ``` # Input - `n`: A non-negative integer (0 ≤ n ≤ 10^18) # Output - An integer representing the digital root of `n`. # Example ```python print(digital_sum(16)) # Output: 7 print(digital_sum(942)) # Output: 6 print(digital_sum(132189)) # Output: 6 print(digital_sum(493193)) # Output: 2 ``` # Explanation - For `n=16`, 1+6 = 7. Since 7 is a single digit, return 7. - For `n=942`, 9+4+2 = 15, then 1+5 = 6. Since 6 is a single digit, return 6. - For `n=132189`, 1+3+2+1+8+9 = 24, then 2+4 = 6. Since 6 is a single digit, return 6. - For `n=493193`, 4+9+3+1+9+3 = 29, then 2+9 = 11, then 1+1 = 2. Since 2 is a single digit, return 2.","solution":"def digital_sum(n: int) -> int: Returns the digital root of a non-negative integer n. The digital root is obtained by repeatedly summing the digits until a single digit is obtained. if n == 0: return 0 return 1 + (n - 1) % 9 # Additional explanation: # The digital sum or digital root of a number can be efficiently computed # using the formula 1 + (n - 1) % 9 due to properties of modular arithmetic. # This reduces the repeated summation of digits into a single step calculation."},{"question":"String Compression String compression is a method of representing repetitive string data in a compact form. Your task is to implement a function that compresses a given string by replacing sequences of the same character by that character followed by the length of the sequence. If the compressed string is not shorter than the original string, you should return the original string. For example, the string `aaabcccccaaa` would be compressed to `a3b1c5a3`. However, if the compressed string is not shorter, like for the input `abc`, the output should be the original string `abc`. Write a function `compressString(s)` that takes a string `s` as input and returns the compressed string or the original string based on the criteria described above. Your function should use the following signature: ```python def compressString(s: str) -> str: # Your code here ``` **Input Constraints:** - The input string will consist of only lowercase English alphabet characters. - The length of the string will be in the range [1, 1000]. **Output Format:** - Return the compressed string if it is shorter than the original string; otherwise, return the original string. **Example Input and Output:** *Example 1:* Input: ``` aaabcccccaaa ``` Output: ``` a3b1c5a3 ``` *Example 2:* Input: ``` abc ``` Output: ``` abc ``` *Example 3:* Input: ``` aabcccccaaa ``` Output: ``` a2b1c5a3 ```","solution":"def compressString(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # for the last group of characters compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Sarah is an avid reader, and she has a bookshelf where she keeps all her books. Each book is identified by its unique ISBN. Recently, she decided to reorganize her bookshelf. She wants to sort her books in ascending order based on their ISBNs. However, she finds the task too daunting to do by hand and needs your help to automate it. Write a program to help Sarah sort her books. Input: The first line contains an integer N, denoting the number of books on Sarah\'s bookshelf. The second line contains N space separated integers, ISBNi, where each ISBNi is the ISBN of the i-th book. Output: Print N space separated integers in ascending order representing the ISBNs of Sarah\'s books after sorting. Constraints: 1 ≤ N ≤ 100 1 ≤ ISBNi ≤ 10^18 SAMPLE INPUT 5 9780306406157 9780679783275 9780321356680 9780131101630 9780201633610 SAMPLE OUTPUT 9780131101630 9780201633610 9780306406157 9780321356680 9780679783275","solution":"def sort_books(N, ISBNs): Sorts the list of ISBNs in ascending order. Parameters: N (int): Number of books ISBNs (list of int): List of ISBNs Returns: list of int: Sorted list of ISBNs sorted_ISBNs = sorted(ISBNs) return sorted_ISBNs # Example usage: # N = 5 # ISBNs = [9780306406157, 9780679783275, 9780321356680, 9780131101630, 9780201633610] # print(sort_books(N, ISBNs)) # Output: [9780131101630, 9780201633610, 9780306406157, 9780321356680, 9780679783275]"},{"question":"Alice is organizing a treasure hunt in a grid-shaped park. The park is represented by a grid with n rows and m columns. Each cell in the grid contains an integer which represents the difficulty level of that cell. Alice starts at the top-left corner of the grid (cell (1, 1)) and wants to collect all the treasures which are located in some cells with difficulty levels greater than t. Alice can move to an adjacent cell either to the right or down. Write a program to determine the maximum number of treasures Alice can collect. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. The second line contains an integer t (1 ≤ t ≤ 10^9), which is the difficulty threshold. Each of the next n lines contains m integers, where each integer d_ij (1 ≤ d_ij ≤ 10^9) represents the difficulty level of the cell at row i and column j. Output Print the maximum number of treasures Alice can collect. Examples Input 3 3 5 6 2 3 1 8 4 5 9 7 Output 4 Input 4 4 10 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output 0","solution":"def max_treasures(n, m, t, grid): Returns the maximum number of treasures Alice can collect. :param n: int, number of rows in the grid :param m: int, number of columns in the grid :param t: int, difficulty threshold :param grid: List[List[int]], the grid representing difficulty levels in each cell :return: int, maximum number of treasures Alice can collect treasures = 0 i = j = 0 # First check the starting cell if grid[0][0] > t: treasures += 1 # Create a matrix to store the state of visited nodes visited = [[False] * m for _ in range(n)] visited[0][0] = True # Create queue for BFS from collections import deque queue = deque([(0, 0)]) while queue: x, y = queue.popleft() # Move to the right cell if y + 1 < m and not visited[x][y+1]: queue.append((x, y+1)) if grid[x][y+1] > t: treasures += 1 visited[x][y+1] = True # Move to the cell downward if x + 1 < n and not visited[x+1][y]: queue.append((x+1, y)) if grid[x+1][y] > t: treasures += 1 visited[x+1][y] = True return treasures"},{"question":"You are given a string S of length N where each character is either \'a\', \'b\', or \'c\'. You can perform the following operation any number of times (including zero): * Choose a contiguous substring of length exactly L and sort it in ascending order. Your task is to determine whether it is possible to sort the entire string S in non-decreasing order by performing the above operation any number of times. Constraints * 1 leq N leq 200000 * 1 leq L leq N * S consists of only characters \'a\', \'b\', and \'c\' Input Input is given from Standard Input in the following format: N L S Output Print `YES` if it is possible to sort the string in non-decreasing order; print `NO` otherwise. Examples Input 6 2 cbcabc Output YES Input 7 3 cccbaab Output NO Input 5 5 bacab Output YES Input 4 1 baca Output NO","solution":"def can_sort_entire_string(N, L, S): # If L == 1, we can\'t sort any parts of the string, so we need to check if the string is already sorted if L == 1: return \\"YES\\" if S == \\"\\".join(sorted(S)) else \\"NO\\" # Check if the string can be sorted by comparing sorted version and original sorted_S = \\"\\".join(sorted(S)) if sorted_S == S: return \\"YES\\" # If the length of the substring L is more than or equal to half of the length of the string, # it is always possible to sort any string completely by using such substrings multiple times. if L >= N // 2 + 1: return \\"YES\\" # For other cases of L, we need to check if sorting is possible by substrings of length L return \\"YES\\" if (L % 2 == 0 or N % 2 == 0) else \\"NO\\""},{"question":"John is organizing a charity event and he wants to create unique codes for all participants. Each code is a string consisting of exactly 4 characters, where each character is an uppercase English letter (\'A\' to \'Z\'). How many possible unique codes can be created? Constraints * There are no additional constraints apart from the character set limitation. Input This problem has no input since the problem is to calculate the possible unique codes. Output Print the total number of possible unique codes. Examples Output 456976","solution":"def count_unique_codes(): Returns the count of possible unique codes made of exactly 4 uppercase English letters. # There are 26 uppercase English letters and we need to create 4 character codes. result = 26 ** 4 return result"},{"question":"Johnny enjoys playing with integer sequences. He has a sequence consisting of `n` integers, and he wants to modify it to make the entire sequence non-decreasing. To do this, Johnny can perform the following operation any number of times: - Select any integer from the sequence and remove it. Johnny wants to make the sequence non-decreasing and define the minimum number of integers that need to be removed to achieve this. For example, a sequence [4, 3, 2, 1] requires removing all but one element to get a non-decreasing sequence, resulting in a minimum of 3 removals. Your task is to help Johnny find out the minimum number of integers he needs to remove to make his sequence non-decreasing. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains `n` integers separated by spaces representing Johnny\'s sequence `a` (1 ≤ aᵢ ≤ 10^9). Output Print a single integer representing the minimum number of integers Johnny needs to remove. Examples Input ``` 5 1 3 2 1 4 ``` Output ``` 2 ``` Input ``` 6 5 6 1 2 3 4 ``` Output ``` 2 ``` Note In the first example, Johnny can remove `3` and `1` to get the sequence `[1, 2, 4]`, which is non-decreasing. In the second example, Johnny can remove `5` and `6` to get the sequence `[1, 2, 3, 4]`, which is non-decreasing.","solution":"def min_removals_to_non_decreasing(n, a): Returns the minimum number of integers that need to be removed to make the sequence a non-decreasing. from bisect import bisect_left if n == 1: return 0 lis = [] for num in a: pos = bisect_left(lis, num) if pos >= len(lis): lis.append(num) else: lis[pos] = num return n - len(lis)"},{"question":"Sudoku is a popular number puzzle. The game consists of a 9x9 grid, which is further divided into nine 3x3 subgrids. The goal is to fill the entire grid with numbers from 1 to 9, such that: 1. Every row contains each number from 1 to 9 exactly once. 2. Every column contains each number from 1 to 9 exactly once. 3. Every 3x3 subgrid contains each number from 1 to 9 exactly once. You are given a partially-filled grid and your task is to determine if the current state of the grid is valid according to the above rules. Note that the grid may not be solvable to a full solution, you only need to check if the current numbers do not violate the rules. Write a function `is_valid_sudoku` that checks whether a given partially-filled grid is valid. # Input: - The function `is_valid_sudoku` takes a single argument: * `grid`: a list of lists, where each inner list represents a row in the Sudoku grid. Each element of the grid can be an integer from 1 to 9 or the character `.` representing an empty cell. # Output: - The function should return a boolean value: * `True` if the current state of the grid is valid. * `False` otherwise. # Constraints: - The input list `grid` always has 9 inner lists, each containing exactly 9 elements. # Example **Input:** ```python grid``` **Output:** ``` True ``` **Input:** ```python grid``` **Output:** ``` False ``` # Note - The function must run efficiently within the constraints provided. - Use proper error handling or assumptions if the input is guaranteed to be valid.","solution":"def is_valid_sudoku(grid): Checks if the given Sudoku grid is valid according to Sudoku rules. def is_valid_block(block): Checks if a block (row, column, or subgrid) contains no duplicates, excluding the empty cells represented by \'.\'. block = [i for i in block if i != \'.\'] return len(block) == len(set(block)) # Check rows for row in grid: if not is_valid_block(row): return False # Check columns for col in range(9): if not is_valid_block([grid[row][col] for row in range(9)]): return False # Check sub-grids for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): block = [grid[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] if not is_valid_block(block): return False return True"},{"question":"You are given a large sequence of integers, and you need to perform a series of operations on this sequence. These operations can either update an element in the sequence or query the sum of a subsegment of the sequence. Input The first line of the input contains two space-separated integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the sequence and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial elements of the sequence. The following q lines contain operations. Each operation is in one of the following forms: * 1 p x (1 ≤ p ≤ n, 1 ≤ x ≤ 10^9), meaning that the element at position p is updated to x. * 2 l r (1 ≤ l ≤ r ≤ n), meaning that you need to output the sum of elements from the l-th to the r-th position (inclusive). Output For each query operation, print the sum of elements of the subsegment specified. Examples Input 5 4 1 2 3 4 5 2 1 3 1 2 10 2 2 4 1 5 100 Output 6 17 Input 7 3 5 3 8 6 2 9 1 2 3 7 1 4 12 2 4 6 Output 26 23 Note For the first example: - The initial sequence is [1, 2, 3, 4, 5]. - The first query is to find the sum from position 1 to 3 (1 + 2 + 3 = 6), so the output is 6. - The first update sets the element at position 2 to 10, so the sequence becomes [1, 10, 3, 4, 5]. - The second query is to find the sum from position 2 to 4 (10 + 3 + 4 = 17), so the output is 17. - The second update sets the element at position 5 to 100, so the sequence becomes [1, 10, 3, 4, 100]. For the second example: - The initial sequence is [5, 3, 8, 6, 2, 9, 1]. - The first query is to find the sum from position 3 to 7 (8 + 6 + 2 + 9 + 1 = 26), so the output is 26. - The first update sets the element at position 4 to 12, so the sequence becomes [5, 3, 8, 12, 2, 9, 1]. - The second query is to find the sum from position 4 to 6 (12 + 2 + 9 = 23), so the output is 23.","solution":"def process_operations(n, q, sequence, operations): results = [] for op in operations: if op[0] == 1: # Update operation _, p, x = op sequence[p-1] = x elif op[0] == 2: # Query operation _, l, r = op results.append(sum(sequence[l-1:r])) return results"},{"question":"Interleaving Words You are given two words, word1 and word2, and a target word. The task is to determine if the target word is an interleaving of word1 and word2. A word is considered an interleaving of word1 and word2 if it contains all the characters of word1 and word2, and the order of characters in word1 and word2 is preserved. For example, \\"abc\\" and \\"def\\" can be interleaved as \\"adbcef\\" or \\"abdecf\\" among other possibilities, but \\"abdfec\\" is not a valid interleaving because it does not maintain the relative order of characters from \\"abc\\" and \\"def\\". Write a function to check whether the given target word is a valid interleaving of word1 and word2. Input - The input consists of three strings word1, word2, and target, where each string contains only lowercase English letters and their lengths are 1 leq |word1|, |word2| leq 100 and |target| = |word1| + |word2|. Output - Output \\"Yes\\" if the target word is an interleaving of word1 and word2. Otherwise, output \\"No\\". Sample Input 1 abc def adbcef Sample Output 1 Yes Sample Input 2 abc def abdfec Sample Output 2 No Sample Input 3 aab cc ababac Sample Output 3 No Note: Ensure that your solution handles edge cases, such as when word1 or word2 is empty, and when the target word can\'t be formed by interleaving the two words. Consider dynamic programming or other efficient methods to solve the problem within the given constraints.","solution":"def isInterleave(word1, word2, target): # Check if the lengths match the requirement if len(target) != len(word1) + len(word2): return \\"No\\" # dp table to store results of subproblems dp = [[False] * (len(word2)+1) for _ in range(len(word1)+1)] # Initial state, both word1 and word2 are empty dp[0][0] = True # Fill the dp table for i in range(len(word1)+1): for j in range(len(word2)+1): if i > 0 and dp[i-1][j] and word1[i-1] == target[i+j-1]: dp[i][j] = True if j > 0 and dp[i][j-1] and word2[j-1] == target[i+j-1]: dp[i][j] = True # The answer will be in the bottom-right cell of the dp table return \\"Yes\\" if dp[len(word1)][len(word2)] else \\"No\\""},{"question":"Write a program that simulates the operations of a simple queue system in a bank. Customers enter the queue with a unique identifier number, and a specified number of customers are served in the order they arrived. The program should support the following operations: - \\"enqueue X\\" to add a customer with identifier X to the queue. - \\"dequeue\\" to serve (and thus remove) the first customer in the queue. The input will be a series of operations, one per line. The program should process the commands and print the identifiers of the customers being served in the order they are dequeued. The program should read commands until it encounters an empty line. Assumptions: - The queue is initially empty. - Each \\"dequeue\\" command has a corresponding customer in the queue (i.e., it is guaranteed that \\"dequeue\\" will not be called when the queue is empty). Input A sequence of commands: - \\"enqueue X\\" where X is a unique identifier for a customer (1 <= X <= 1000) - \\"dequeue\\" Output For each \\"dequeue\\" command, print the identifier of the customer being served. Example Input enqueue 5 enqueue 3 dequeue enqueue 9 dequeue dequeue Output 5 3 9","solution":"from collections import deque def process_queue_operations(operations): queue = deque() results = [] for operation in operations: if operation.startswith(\\"enqueue\\"): _, identifier = operation.split() queue.append(identifier) elif operation == \\"dequeue\\": results.append(queue.popleft()) return results"},{"question":"You are given a list of elements representing different items and their respective prices in a market. Each element in the list is a tuple where the first value is the name of the item and the second value is the price of the item in an integer format. Your goal is to find the k most expensive items and return them in descending order of their prices. In case two items have the same price, they should be sorted in alphabetical order of their names. Input The first line contains an integer k (1 ≤ k ≤ n ≤ 100), where n is the number of items. The next n lines each contain a string followed by an integer, representing the name of the item and its respective price. Output Output k lines, each line containing the name and price of one of the k most expensive items in the format \'name price\' in descending order of their prices. Example Input 3 apple 50 banana 60 cherry 50 date 70 elderberry 50 Output date 70 banana 60 apple 50 Note In the example, the most expensive items are \\"date\\", \\"banana\\", and \\"apple\\". Although \\"cherry\\" and \\"elderberry\\" also have the same price as \\"apple\\", they are excluded from the output as we are only interested in the top 3 most expensive items.","solution":"def get_most_expensive_items(k, items): Returns the k most expensive items sorted by price in descending order. If two items have the same price, they are sorted alphabetically by name. # Sort items first alphabetically by name and then by price in descending order sorted_items = sorted(items, key=lambda x: (-x[1], x[0])) # Return the top k items return sorted_items[:k]"},{"question":"Fredrick is organizing a small music festival and needs to determine the concert lineup. Each artist has specific time slots they are available to perform at the festival, and each artist can perform only once. The artists, along with their available time slots, are provided as input, and the goal is to create the longest possible lineup with the most artists performing without any overlapping time slots. You need to write a program that finds the maximum number of artists that can perform without overlapping any of their time slots. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of artists. The next n lines describe the artists\' time slots. Each line contains two integers si and ei (0 ≤ si < ei ≤ 10^9), representing the start and end time of the i-th artist\'s available slot. Output Output a single integer representing the maximum number of artists that can perform without overlapping time slots. Examples Input 4 1 4 2 6 5 8 3 5 Output 2 Input 3 1 3 2 5 4 6 Output 2 Input 5 1 2 2 3 3 4 4 5 5 6 Output 5 Note For the first sample, one optimal solution is having artists with time slots [1, 4] and [5, 8] perform. For the second sample, one optimal solution is having artists with time slots [1, 3] and [4, 6] perform. For the third sample, all the artists can perform since none of their time slots overlap.","solution":"def max_artists(n, slots): Returns the maximum number of artists that can perform without overlapping time slots. :param n: int - number of artists :param slots: List[Tuple[int, int]] - list of tuples representing (start, end) time slots :return: int # Sort slots by end time slots.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in slots: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage: # n = 4 # slots = [(1, 4), (2, 6), (5, 8), (3, 5)] # print(max_artists(n, slots)) # Output: 2"},{"question":"Marina loves playing with sequences of integers. She is particularly interested in identifying special sequences called \\"Zig-Zag sequences\\". A Zig-Zag sequence is defined as a sequence in which the first difference between consecutive elements is positive, the next difference is negative, and this pattern continues alternately throughout the sequence. For example, the sequence [1, 3, 2, 4, 3] is a Zig-Zag sequence because: - 3 - 1 > 0 (positive difference) - 2 - 3 < 0 (negative difference) - 4 - 2 > 0 (positive difference) - 3 - 4 < 0 (negative difference) Marina wants to find out if a given sequence of integers is a Zig-Zag sequence or not. Input The first line contains an integer N (2 ≤ N ≤ 1000), the number of elements in the sequence. The next line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10000) which represent the sequence. Output Print \\"YES\\" if the sequence is a Zig-Zag sequence, otherwise print \\"NO\\". SAMPLE INPUT 5 1 3 2 4 3 SAMPLE OUTPUT YES SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT NO Explanation In the first example, the sequence 1, 3, 2, 4, 3 alternates between a positive and negative difference and hence is a Zig-Zag sequence. In the second example, the sequence 1, 2, 3, 4 always increases and does not alternate, hence it is not a Zig-Zag sequence.","solution":"def is_zigzag_sequence(n, sequence): Determines if the given sequence of integers is a Zig-Zag sequence. Params: - n (int): the number of elements in the sequence, - sequence (list): the sequence of integers. Returns: - str: \\"YES\\" if the sequence is a Zig-Zag sequence, otherwise \\"NO\\". if n < 2: return \\"NO\\" positive = None # To track the expectation of the next difference for i in range(1, n): diff = sequence[i] - sequence[i-1] if diff == 0: return \\"NO\\" # No zero difference allowed if positive is None: positive = diff > 0 # First difference determines the initial direction else: if positive and diff <= 0: return \\"NO\\" # Expected positive but got non-positive elif not positive and diff >= 0: return \\"NO\\" # Expected negative but got non-negative positive = not positive # Flip the expectation return \\"YES\\""},{"question":"In a forest, there are n trees in a row. The i-th tree has a height of hi units. You want to select a subsection of continuous trees such that the height difference between the tallest and the shortest tree in that section is minimized. Write a function to calculate the minimum possible height difference between the tallest and the shortest tree in any contiguous subsection of trees from the given row of trees. You need to return this minimum possible height difference. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of trees in the row. The second line contains n integers h1, h2, h3, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the trees. Output Print the minimum possible height difference between the tallest and shortest tree in any contiguous subsection of trees. Examples Input 5 1 5 3 9 6 Output 2 Input 4 4 4 4 4 Output 0 Input 6 10 12 15 7 8 5 Output 1 Note In the first sample, selecting the subsection from the second to the third tree (5, 3) gives a height difference of |5-3| = 2 which is the minimum possible. In the second sample, all trees have the same height so the height difference is |4-4| = 0. In the third sample, selecting the subsection from the fifth to the sixth tree (8, 7) gives a height difference of |8-7| = 1 which is the minimum possible.","solution":"def min_height_difference(n, heights): Returns the minimum possible height difference between the tallest and shortest tree in any contiguous subsection of trees. if n == 1: return 0 min_diff = float(\'inf\') for i in range(n-1): current_diff = abs(heights[i] - heights[i + 1]) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"In a mystical land, there are n mystical creatures, each possessing a unique magical power level. The creatures are arranged in a line, and the i-th creature has a power level of p_i. The creatures want to form teams such that the difference in power levels of any two creatures in a team is minimized. However, there\'s a strange rule for forming teams. Each team must have exactly k creatures, and the difference between the maximum power and the minimum power in each team should not exceed a given threshold, t. Your task is to determine the maximum number of teams that can be formed under these rules. The creatures are allowed to join only one team, and each team must have precisely k creatures. Input: The first line contains three integers n, k, and t (1 ≤ n ≤ 1000, 1 ≤ k ≤ n, 0 ≤ t ≤ 1000) — the total number of creatures, the number required in each team, and the threshold, respectively. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 1000) — the power levels of the creatures. Output: Output a single integer — the maximum number of teams that can be formed. Examples: Input: 6 3 10 18 12 15 9 7 10 Output: 2 Input: 5 2 5 3 8 5 1 11 Output: 2 Explanation: In the first example, the creatures can be formed into two teams: - First team consisting of creatures with power levels [12, 10, 9], the maximum difference being 3. - Second team consisting of creatures with power levels [18, 15, 7], the maximum difference being 11. But since 11 exceeds the threshold of 10, it\'s not valid. In the second example, the creatures can form the teams as follows: - First team consisting of creatures with power levels [3, 1], the maximum difference being 2. - Second team consisting of creatures with power levels [8, 11], the maximum difference being 3. (Note that the order in which teams are formed can vary).","solution":"def max_teams(n, k, t, power_levels): Determines the maximum number of teams that can be formed such that each team has exactly k creatures and the difference between the maximum and minimum power levels in each team does not exceed the threshold t. :param n: int - the total number of creatures :param k: int - the number of creatures per team :param t: int - the threshold of maximum power difference in a team :param power_levels: List[int] - the power levels of the creatures :return: int - the maximum number of teams that can be formed power_levels.sort() teams = 0 i = 0 while i + k <= n: if power_levels[i + k - 1] - power_levels[i] <= t: teams += 1 i += k else: i += 1 return teams"},{"question":"Your task is to create a word frequency counter. Given a text consisting of multiple lines, you need to count how many times each word appears. Input The input consists of multiple lines of text, and each line may contain multiple words separated by spaces. The input will end with a line that consists of a single word \\"END.\\" Output Output should display each word and its frequency in the order of their first appearance in the text, one per line, in the format: word: frequency Example Input this is a test this test is simple END Output this: 2 is: 2 a: 1 test: 2 simple: 1","solution":"def word_frequency_counter(text): Given a text consisting of multiple lines, count how many times each word appears. word_freq = {} for line in text: if line.strip() == \\"END\\": break words = line.split() for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq def format_output(word_freq): Format the output in the required format. return \\"n\\".join([f\\"{word}: {count}\\" for word, count in word_freq.items()])"},{"question":"You are organizing a company event where employees participate in teams. Each team must have a specific structure: 1. A team consists of a leader, some sub-leaders and some members. 2. There is a fixed number of leaders (L), sub-leaders (S), and members (M). The requirements for team formations are: 1. Every team has exactly 1 leader. 2. Each team has at least 1 and at most T sub-leaders. 3. Each team has at least 1 and at most T members. 4. Each person in the company must be part of exactly one team. 5. Teams should be as balanced as possible in terms of sub-leaders and members. Given the number of leaders, sub-leaders, and members, along with the limits for sub-leaders and members per team, determine if forming such balanced teams is possible. If it\'s possible, provide one valid formation. If not, state that it is not feasible. Input The first line contains four integers L, S, M, T (1 ≤ L ≤ 10^4; 0 ≤ S, M ≤ 10^5; 1 ≤ T ≤ 10^5) — the number of leaders, sub-leaders, members, and the maximum number of sub-leaders and members each team can have respectively. Output If valid team formations exist then print \\"YES\\" (without quotes) in the first line. In the next L lines, print the configuration of each valid team in the format: \\"Leader Sub_Leaders Members\\", where Leader, Sub_Leaders, and Members are space-separated, containing the indices of each within their respective groups. Indices start from 1 to L for leaders, 1 to S for sub-leaders, and 1 to M for members. If there is no valid team formation, print \\"NO\\" (without quotes). Examples Input 3 6 6 2 Output YES 1 1 1 1 2 2 2 3 3 3 4 4 3 5 5 5 6 6 Input 2 4 3 1 Output NO","solution":"def form_teams(L, S, M, T): if (S < L) or (M < L): # Not enough sub-leaders or members to form L teams return \\"NO\\" # Calculate minimum and maximum sub-leaders and members needed per team min_sub_leaders_per_team = max(1, S // L) min_members_per_team = max(1, M // L) if min_sub_leaders_per_team > T or min_members_per_team > T: return \\"NO\\" teams = [] sub_leader_index = 1 member_index = 1 for leader in range(1, L + 1): # Allocate sub-leaders and members as evenly as possible sub_leaders = [] members = [] for _ in range(min_sub_leaders_per_team): if sub_leader_index > S: return \\"NO\\" sub_leaders.append(sub_leader_index) sub_leader_index += 1 for _ in range(min_members_per_team): if member_index > M: return \\"NO\\" members.append(member_index) member_index += 1 # Add remaining sub-leaders and members if needed to fill team limits while len(sub_leaders) < T and sub_leader_index <= S: sub_leaders.append(sub_leader_index) sub_leader_index += 1 while len(members) < T and member_index <= M: members.append(member_index) member_index += 1 teams.append((leader, sub_leaders, members)) result = [\\"YES\\"] for team in teams: result.append(f\\"{team[0]} {\' \'.join(map(str, team[1]))} {\' \'.join(map(str, team[2]))}\\") return \\"n\\".join(result)"},{"question":"Diana enjoys solving puzzles that involve strings of characters. She recently came across an interesting challenge. Given a string `s`, she wants to split it into exactly `k` non-empty substrings such that: 1. Each substring can be distinct or identical. 2. The total number of distinct characters across all `k` substrings is maximized. Help Diana determine the maximum number of distinct characters that can appear across all `k` substrings. Input The first line contains a string `s` (1 ≤ |s| ≤ 10^5) — a non-empty string consisting of lowercase English letters. The second line contains an integer `k` (1 ≤ k ≤ |s|) — the number of non-empty substrings Diana wants to split `s` into. Output Print a single integer — the maximum number of distinct characters that can appear across all `k` substrings. Examples Input abcde 2 Output 5 Input aaaaa 3 Output 3 Note In the first example, since each character in the string `abcde` is unique, splitting it into 2 substrings like \\"ab\\" and \\"cde\\" would preserve all 5 distinct characters. In the second example, the string `aaaaa` only contains one distinct character \'a\'. Splitting it into 3 substrings still results in only 1 unique character, but with 3 splits, at most 3 distinct \'a\' characters can be considered in different parts (though it\'s the same character repeated).","solution":"def maximize_distinct_characters(s, k): Returns the maximum number of distinct characters that can appear across all k substrings. unique_characters = set(s) # find all unique characters in the string num_unique_characters = len(unique_characters) # The maximum distinct characters in the substrings cannot be more than the unique characters in s return min(num_unique_characters + k - 1, len(s))"},{"question":"Alice has recently learned about binary search trees (BST) and wants to practice by creating her own unique BST for a given sequence of integers. Alice\'s BST must follow these rules: 1. The left subtree of a node contains only nodes with values less than the node\'s value. 2. The right subtree of a node contains only nodes with values greater than the node\'s value. 3. No duplicate values are allowed in the BST. Given a sequence of integers, Alice wants to know how her BST would look by performing an in-order traversal (left-root-right) of the BST constructed from the sequence. It should be noted that the input sequence defines how the BST is constructed: the first number in the sequence becomes the root, and each subsequent number is inserted into the BST based on the aforementioned rules. Moreover, Alice also wants to confirm whether a given integer `k` is present in her BST or not after constructing it. **Input:** - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each test case consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of integers in the sequence. - The second line contains the sequence of `n` integers, followed by an integer `k` separated by spaces (-10^4 ≤ integers, k ≤ 10^4). **Output:** - For each test case, print two lines: - The first line should contain the in-order traversal of the BST, with values separated by spaces. - The second line should be \\"YES\\" if `k` is present in the BST, and \\"NO\\" otherwise. **Examples:** **Input:** ``` 2 5 3 1 4 2 5 4 4 2 1 2 1 ``` **Output:** ``` 1 2 3 4 5 YES 1 2 NO ```","solution":"class TreeNode: A class to represent a node in a binary search tree (BST). def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: A class to represent a Binary Search Tree (BST). def __init__(self): self.root = None def insert(self, value): Insert value into BST according to BST rules. if not self.root: self.root = TreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node, value): Helper method to insert a value in the BST recursively. if value < node.value: if node.left: self._insert_recursive(node.left, value) else: node.left = TreeNode(value) elif value > node.value: if node.right: self._insert_recursive(node.right, value) else: node.right = TreeNode(value) def in_order_traversal(self): Perform in-order traversal (left-root-right) and return result as a list. result = [] self._in_order_traversal_recursive(self.root, result) return result def _in_order_traversal_recursive(self, node, result): Helper method to perform in-order traversal recursively. if node: self._in_order_traversal_recursive(node.left, result) result.append(node.value) self._in_order_traversal_recursive(node.right, result) def search(self, value): Search for a value in the BST. return self._search_recursive(self.root, value) def _search_recursive(self, node, value): Helper method to search for a value in the BST recursively. if not node: return False if node.value == value: return True elif value < node.value: return self._search_recursive(node.left, value) else: return self._search_recursive(node.right, value) def process_test_cases(t, test_cases): results = [] for case in test_cases: n, sequence, k = case[\'n\'], case[\'sequence\'], case[\'k\'] bst = BinarySearchTree() for num in sequence: bst.insert(num) in_order_result = bst.in_order_traversal() search_result = bst.search(k) results.append((in_order_result, \\"YES\\" if search_result else \\"NO\\")) return results"},{"question":"You are given a city map as a grid of size n x m, where each cell of the grid represents a road. Steve is a delivery driver who starts his journey at the top-left corner of the grid (1,1). However, certain cells in the city are blocked and cannot be traversed. Steve can only move right or down from a cell. Your task is to help Steve find the number of unique paths from the start point (1,1) to the bottom-right corner (n,m) of the grid, avoiding all blocked cells. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each consist of a string of length m, where each character represents the state of a cell: - \'.\' represents an open cell. - \'#\' represents a blocked cell. It is guaranteed that both the start point (1,1) and the end point (n,m) are open cells. Output Print a single integer — the number of unique paths from (1,1) to (n,m). Examples Input 3 3 ... .#. ... Output 2 Input 3 3 ..# .#. ... Output 1","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"In the world of competitive coding, there is a unique challenge called the \\"Balanced Bracket Sequence\\" game. Given a sequence of brackets, your task is to determine the maximum length of a balanced subsequence. A balanced bracket sequence consists of an equal number of opening and closing brackets (\'(\' and \')\') in the correct order. A balanced bracket sequence example is \\"(()())\\" or \\"()\\", while \\"(()\\", \\")(\\", and \\"(()))(\\" are not balanced. Input The first line contains an integer n (1 ≤ n ≤ 50) – the length of the bracket sequence. The second line contains the bracket sequence consisting of exactly n characters, either \'(\' or \')\'. Output Output a single integer – the maximum length of a balanced subsequence. Examples Input 6 (())() Output 6 Input 4 )(() Output 2","solution":"def max_balanced_subsequence_length(n, sequence): Determines the maximum length of a balanced subsequence of the bracket sequence. Args: n (int): the length of the sequence. sequence (str): the input string containing the bracket sequence. Returns: int: the maximum length of a balanced subsequence. open_count = 0 close_count = 0 for char in sequence: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 close_count += 1 return close_count * 2"},{"question":"Farmer John is trying to keep track of his N cows (indexed 1 to N), each identified by a unique tag number. Farmer John believes that by analyzing the collective information of his cows, he can better manage his farm. For each cow, he records the number of liters of milk it produces every day. Farmer John has a busy schedule and can only analyze a contiguous segment of his cows at a time. He wants to find the maximum number of liters of milk produced by any contiguous subsegment of his cows. Given the liters of milk produced by each cow, can you help Farmer John find the maximum liters of milk produced by any contiguous subsegment? Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - The first line of each test case contains an integer N (1 ≤ N ≤ 10^5) — the number of cows. - The second line of each test case contains an array of N integers L (−10^4 ≤ L_i ≤ 10^4), where L_i represents the liters of milk produced by the ith cow. Output For each test case, print a single integer — the maximum liters of milk produced by any contiguous subsegment of the array. Example Input 3 5 3 -2 5 -1 4 4 -2 -3 4 -1 3 2 -1 2 Output 9 4 3 Explanation - In the first test case, the maximum contiguous subsegment sum is 3 + (-2) + 5 + (-1) + 4 = 9. - In the second test case, the maximum contiguous subsegment sum is 4. - In the third test case, the maximum contiguous subsegment sum is 2 + (-1) + 2 = 3.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subsegment of the array. Uses Kadane\'s Algorithm to find the maximum sum subarray. Parameters: arr (list of int): The array of milk production amounts. Returns: int: The maximum sum of a contiguous subsegment. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_cases(test_cases): Processes multiple test cases to find the maximum subarray sum for each case. Parameters: test_cases (list of tuples): A list where each tuple contains (N, array). Returns: list of int: The list of maximum sums for each test case. results = [] for N, arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"Eva Ecowarrior just embarked on a mission to protect a precious collection of rain forests. Each rain forest is represented as a non-overlapping convex polygon, and Eva is tasked with planting an anti-deforestation beacon in each rain forest to keep them secure. Eva\'s drones have a limitation: they can plant a beacon at the centroid of each polygon, calculated based on its vertices. However, Eva needs your assistance to determine the exact location of these centroids. Given the coordinates of the vertices of each polygon, you need to calculate the centroid. Input The first line contains one integer M (1 ≤ M ≤ 500) – the number of rain forests. Each of the next M lines describes a rain forest. The first number of the line is integer c_i (3 ≤ c_i ≤ 50) – the number of vertices in the i^{th} rain forest polygon, followed by c_i pairs of integers. The j^{th} pair is (x_j, y_j) – the coordinates of the j^{th} vertex (|x_j|, |y_j| ≤ 100). The vertices are listed in the order in which they occur around the polygon. Output Print M lines. Each line should contain two decimal numbers accurate to at least four decimal places – the x and y coordinates of the centroid of the i^{th} rain forest polygon. Example Input 2 3 0 0 4 0 2 3 4 1 1 4 1 4 5 1 5 Output 2.0000 1.0000 2.5000 3.0000 Note For the first rain forest, with vertices at (0,0), (4,0), and (2,3), the centroid can be calculated using the formula: Cx = (1/6A) Σ (x_i + x_{i+1})(x_i y_{i+1} - x_{i+1} y_i) Cy = (1/6A) Σ (y_i + y_{i+1})(x_i y_{i+1} - x_{i+1} y_i) where A is the polygon\'s area. After calculations, the centroid is found to be (2.0000, 1.0000). For the second rain forest, with vertices at (1,1), (4,1), (4,5), and (1,5), the centroid is (2.5000, 3.0000).","solution":"def calculate_centroid_of_polygon(vertices): Calculate the centroid of a polygon given its vertices. vertices: list of tuples, where each tuple is an (x, y) coordinate of a vertex. Returns the centroid of the polygon as a tuple (Cx, Cy). n = len(vertices) area = 0 Cx = 0 Cy = 0 for i in range(n): x0, y0 = vertices[i] x1, y1 = vertices[(i + 1) % n] factor = (x0 * y1 - x1 * y0) area += factor Cx += (x0 + x1) * factor Cy += (y0 + y1) * factor area = area / 2 Cx = Cx / (6 * area) Cy = Cy / (6 * area) return round(Cx, 4), round(Cy, 4) def find_centroids_of_forests(input_data): lines = input_data.strip().split(\'n\') M = int(lines[0]) centroids = [] for i in range(1, M + 1): parts = list(map(int, lines[i].split())) c_i = parts[0] vertices = [(parts[2*j + 1], parts[2*j + 2]) for j in range(c_i)] centroid = calculate_centroid_of_polygon(vertices) centroids.append(centroid) return centroids"},{"question":"In a small village, there is a famous ancient well where people draw water every day. The well has a unique property: it can only provide water if the sequence of numbers representing the water levels, when drawn in a sequence, forms a strictly increasing numerical list. The villager are worried about the sequences they receive and want to find out if there\'s any way to rearrange these sequences into strictly increasing ones. Your task is to help them determine if they can reorder the water levels to make the sequence strictly increasing. If the sequence can be rearranged, output the rearranged sequence. If not, return a single integer -1. Input The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 100) – the number of water levels. The next line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) – the water levels. Output For each test case, output a single line. If the sequence can be reordered to be strictly increasing, output the strictly increasing sequence of water levels separated by spaces. If it is not possible, output -1. Examples Input 3 4 3 1 2 4 5 1 2 2 3 4 3 5 5 5 Output 1 2 3 4 -1 -1","solution":"def can_be_increasing(arr): Determines if the list of water levels can be reordered to be strictly increasing. If possible, return the reordered list. Otherwise, return -1. arr_sorted = sorted(arr) for i in range(1, len(arr_sorted)): if arr_sorted[i] <= arr_sorted[i - 1]: return -1 return arr_sorted def process_test_cases(t, test_cases): Processes multiple test cases. Parameters: t (int): Number of test cases. test_cases (list of lists): List containing pairs of integers and sequences of water levels. Returns: list: List containing either the strictly increasing sequence or -1 for each test case. results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] result = can_be_increasing(a) if result == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"Farmer Joe has a unique way of planting his crops. He plants his crops in a grid where each cell of the grid either contains a crop represented by a positive integer or is empty represented by zero. Sometimes, Farmer Joe needs to harvest all crops from a rectangular subgrid defined by two points (top-left and bottom-right corners). He wants to know the total yield (sum of all crop values) from this subgrid. Write a program to help Farmer Joe calculate the total yield from a given subgrid. **Input** - The first line contains two integers, M and N, the dimensions of the grid (1 ≤ M, N ≤ 100). - The next M lines contain N integers each, representing the crop values in the grid. - The last line contains four integers, x1, y1, x2, y2, the coordinates of the top-left and bottom-right corners of the subgrid (1 ≤ x1 ≤ x2 ≤ M, 1 ≤ y1 ≤ y2 ≤ N). **Output** - Output a single integer, the total yield from the specified subgrid. **Sample Input** ``` 3 3 1 2 3 4 5 6 7 8 9 1 1 2 2 ``` **Sample Output** ``` 12 ``` **Explanation** - The given grid is: ``` 1 2 3 4 5 6 7 8 9 ``` - The specified subgrid from (1, 1) to (2, 2) is: ``` 1 2 4 5 ``` - The total yield from this subgrid is `1 + 2 + 4 + 5 = 12`.","solution":"def calculate_yield(M, N, grid, x1, y1, x2, y2): Calculate the total yield from the specified subgrid. :param M: Number of rows in the grid :param N: Number of columns in the grid :param grid: The crop grid represented as a list of lists :param x1: Row number of the top-left corner of the subgrid (1-indexed) :param y1: Column number of the top-left corner of the subgrid (1-indexed) :param x2: Row number of the bottom-right corner of the subgrid (1-indexed) :param y2: Column number of the bottom-right corner of the subgrid (1-indexed) :return: Total yield from the specified subgrid total_yield = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total_yield += grid[i][j] return total_yield"},{"question":"In this problem, you are given a string S. Your task is to determine if the given string is a palindrome or not. A string is a palindrome if it reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". If the string is a palindrome, print \\"YES\\", otherwise print \\"NO\\". Input The first line of input contains an integer T denoting the number of test cases. For each test case T, there is one line containing string S. Output For each test case, print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100,000 S consists of only lowercase English letters. SAMPLE INPUT 3 madam racecar hello SAMPLE OUTPUT YES YES NO","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Returns \\"YES\\" if it is a palindrome, otherwise \\"NO\\". return \\"YES\\" if s == s[::-1] else \\"NO\\" def process_test_cases(t, test_cases): Processes a number of test cases to determine if each string is a palindrome. Arguments: t -- integer, number of test cases test_cases -- list of strings to check Returns: A list of results for each test case. results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"Susan loves gardening and has a set of unique plants she wants to arrange in her garden. Each plant has a specific watering requirement measured in units of water per day. Knowing each plant\'s water requirement, Susan wants to ensure she can group the plants in such a way that each group has exactly the same total water requirement. Write a function that determines whether it is possible to divide the plants into two groups with exactly equal total water requirements. If it is possible, return \\"YES\\", otherwise return \\"NO\\". The input consists of two lines. The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of plants in Susan\'s garden. The second line contains `n` integers separated by spaces, where each integer represents the water requirement of a single plant in units per day (1 ≤ water requirement ≤ 100). Output \\"YES\\" if it\'s possible to split the plants into two groups with equal total water requirements, otherwise output \\"NO\\". Examples Input 4 1 5 11 5 Output YES Input 3 1 2 5 Output NO Note In the first sample, the plants can be split into two groups: {1, 5, 5} and {11} both of which sum to 11. In the second sample, it is not possible to split the plants into two groups with equal total water requirements.","solution":"def can_divide_plants(n, water_requirements): Returns \\"YES\\" if it\'s possible to divide the plants into two groups with equal total water requirements, otherwise returns \\"NO\\". Arguments: n : int : number of plants water_requirements : list of int : list of water requirements for each plant total_water = sum(water_requirements) # If the total water requirement is odd, it\'s not possible to divide into two equal parts if total_water % 2 != 0: return \\"NO\\" target = total_water // 2 dp = [False] * (target + 1) dp[0] = True for water in water_requirements: for j in range(target, water - 1, -1): dp[j] = dp[j] or dp[j - water] return \\"YES\\" if dp[target] else \\"NO\\" # Example usage: # print(can_divide_plants(4, [1, 5, 11, 5])) # Should return \\"YES\\" # print(can_divide_plants(3, [1, 2, 5])) # Should return \\"NO\\""},{"question":"A company has a system of servers connected by network cables. Each server is represented as a node, and each cable is represented as an edge connecting two nodes. The network forms a tree, i.e., a connected acyclic graph. Each server has an associated processing capacity. The company wants to perform maintenance on one of the servers and needs to ensure that the network remains efficient during this process. During maintenance, the chosen server will be temporarily taken offline along with all its direct connections to other servers. The company aims to identify the server whose removal minimizes the decrease in the total processing capacity of the remaining network components. Write a program that identifies the server which, when removed, results in the minimum loss of the combined processing capacity of the remaining servers. # Input The input consists of: - An integer `n` (2 ≤ n ≤ 10000) — the number of servers. - A list of integers `capacity` of length `n` where `capacity[i]` (1 ≤ `capacity[i]` ≤ 1000) represents the processing capacity of the `i-th` server. - `n-1` pairs of integers `u` and `v` (1 ≤ `u,v` ≤ n) — indicating there is a network cable between server `u` and server `v`. # Output Output a single integer — the index of the server whose removal results in the minimum total processing capacity of the remaining servers. If there are multiple servers with the same effect, output the smallest index. # Example Input ``` 5 5 3 2 4 6 1 2 1 3 2 4 2 5 ``` Output ``` 2 ``` # Explanation - Removing server `1`: The remaining servers and capacities are [3, 2, 4, 6]. The total processing capacity is 15. - Removing server `2`: The remaining servers and capacities are [5, 2, 6]. The total processing capacity is 13 (5+2 from component 1, and 6 from component 5). - Removing server `3`: The remaining servers and capacities are [5, 3, 4, 6]. The total processing capacity is 18. - Removing server `4`: The remaining servers and capacities are [5, 3, 2, 6]. The total processing capacity is 16. - Removing server `5`: The remaining servers and capacities are [5, 3, 2, 4]. The total processing capacity is 14. Thus, the optimal server to remove is server `2`, resulting in the minimum loss of total processing capacity. # Note Consider using tree traversal algorithms such as depth-first search (DFS) to efficiently compute the capacities of the remaining components after removal of each server.","solution":"def find_server_to_remove(n, capacity, edges): from collections import defaultdict, deque # Build adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Helper function to perform DFS and calculate subtree sizes def dfs(node, parent, subtree_sizes): subtree_size = capacity[node] for neighbor in graph[node]: if neighbor != parent: subtree_size += dfs(neighbor, node, subtree_sizes) subtree_sizes[node] = subtree_size return subtree_size total_capacity = sum(capacity) subtree_sizes = [0] * n # Initially calculate the subtree sizes for node 0 as the root dfs(0, -1, subtree_sizes) min_loss = float(\'inf\') best_server = -1 # Iterate over each server to determine the one with the minimum loss for u in range(n): if len(graph[u]) == 1: # If a leaf node, we remove it and it will cost total_capacity - capacity[u] loss = total_capacity - capacity[u] else: loss = 0 for neighbor in graph[u]: if subtree_sizes[neighbor] > subtree_sizes[u]: # making sure the current is in parent direction size_without_u = total_capacity - subtree_sizes[u] else: size_without_u = subtree_sizes[neighbor] loss = max(loss, size_without_u) if loss < min_loss: min_loss = loss best_server = u elif loss == min_loss: best_server = min(best_server, u) return best_server + 1"},{"question":"You are given an ancient script which contains a list of objects. Each object can contain other objects within them, making a nested structure. Your task is to calculate the total number of objects in the script, including the nested ones. The script is represented as a single string in the following format: - Each object is represented as an alphanumeric string without spaces or special characters. - Nested objects are enclosed within parentheses `(` and `)`, and objects are separated by commas `,`. - The structure can have multiple levels of nesting. For example: - `A(B,C(D,E),F)` consists of 6 objects: A, B, C, D, E, and F. - `G(H(I,J),K)` consists of 5 objects: G, H, I, J, and K. Input The input consists of a single line containing the ancient script. Output Output a single integer representing the total number of objects in the script, including all nested objects. Constraints - The length of the input string will not exceed 1000 characters. - The nested structure is well-formed (every opening parenthesis has a corresponding closing parenthesis). Sample Input 1 A(B,C(D,E),F) Sample Output 1 6 Sample Input 2 G(H(I,J),K) Sample Output 2 5 Explanation In Sample Input 1, the structure `A(B,C(D,E),F)` comprises the top-level object `A` containing three objects `B`, `C`, and `F`. The object `C` further contains two objects `D` and `E`. In Sample Input 2, the structure `G(H(I,J),K)` contains the top-level object `G` containing two objects `H` and `K`. The object `H` further contains objects `I` and `J`. The total number of objects must account for all nested objects.","solution":"def count_objects(script): Counts the total number of objects in the ancient script, including nested ones. :param script: str, a string representation of nested objects :return: int, total number of objects count = 0 i = 0 n = len(script) while i < n: if script[i].isalnum(): count += 1 # Move to the next non-alphanumeric character while i < n and script[i].isalnum(): i += 1 else: i += 1 return count"},{"question":"Write a program that simulates a priority queue with the following operations: * insert x: Insert an element with priority x into the priority queue. * extractMax: Remove and return the element with the largest priority from the priority queue. If there are multiple elements with the same priority, return any of them. * printQueue: Print all elements currently in the priority queue in descending order of their priorities. Constraints * The number of operations leq 300,000 * -1,000,000,000 leq x leq 1,000,000,000 * The priority queue can hold at most 100,000 elements at any time. Input In the first line, the number of operations m is given. In the following m lines, operations represented by insert x, extractMax, or printQueue are given. Output For each extractMax operation, print the element removed from the queue. In addition, for each printQueue operation, print all elements in the priority queue in a single line separated by a space, in descending order of their priorities. Example Input 8 insert 10 insert 5 insert 20 extractMax printQueue insert 15 extractMax printQueue Output 20 10 5 15 10 5","solution":"import heapq class PriorityQueue: def __init__(self): self.queue = [] def insert(self, x): # Since heapq is a min-heap, we insert negative values to simulate a max-heap heapq.heappush(self.queue, -x) def extractMax(self): if self.queue: return -heapq.heappop(self.queue) return None def printQueue(self): # Creating a sorted list in descending order sorted_queue = sorted([-x for x in self.queue], reverse=True) print(\' \'.join(map(str, sorted_queue))) # Function to handle operations def handle_operations(operations): pq = PriorityQueue() results = [] for operation in operations: if operation.startswith(\\"insert\\"): _, x = operation.split() pq.insert(int(x)) elif operation == \\"extractMax\\": max_elem = pq.extractMax() if max_elem is not None: results.append(str(max_elem)) elif operation == \\"printQueue\\": sorted_queue = sorted([-x for x in pq.queue], reverse=True) results.append(\' \'.join(map(str, sorted_queue))) return results def process_input(input_data): lines = input_data.strip().split(\'n\') m = int(lines[0]) operations = lines[1:] return handle_operations(operations)"},{"question":"Elina is working on a project where she needs to manipulate strings. Her current task is to find out how many substrings of a given string are palindromes. A palindrome is a string that reads the same backward as forward. Please help Elina complete her task. Input The first line contains an integer T, the number of test cases. For each test case, there is a single string S. Output For each test case, output a single integer, the number of palindromic substrings in the given string S. Constraints 1 ≤ T ≤ 10 1 ≤ length of S ≤ 1000 SAMPLE INPUT 2 abba abc SAMPLE OUTPUT 6 3","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # Create a 2D dp array to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True count += 1 # Check for substrings of length 2 for i in range(n - 1): if S[i] == S[i + 1]: dp[i][i + 1] = True count += 1 # Check for substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(count_palindromic_substrings(test_cases[i])) return results"},{"question":"Monica is a computer science student working on her final project for a data structures course. Her project involves working with arrays of integers and performing various operations on them. One particular operation she needs help with is finding the longest increasing subsequence (LIS) in a given array of integers. A subsequence is a sequence derived by deleting some or no elements of the array without changing the order of the remaining elements. An increasing subsequence is a subsequence where each element is strictly greater than the preceding one. Write a program that will help Monica determine the length of the longest increasing subsequence from a given array. Input The first line contains a single integer n (1 ≤ n ≤ 1000), representing the number of elements in the array. The second line contains n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9), representing the elements of the array. Output Output a single integer representing the length of the longest increasing subsequence in the array. Examples Input 6 10 9 2 5 3 7 101 18 Output 4 Input 4 0 1 0 3 2 3 Output 4 Input 1 4 Output 1 Note In the first example, the longest increasing subsequence is [2, 3, 7, 101], which has length 4. In the second example, one possible longest increasing subsequence is [0, 1, 2, 3], which has length 4. In the third example, with only one element, the longest increasing subsequence trivially has length 1.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence. if not nums: return 0 n = len(nums) lis = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Problem description John is a computer scientist who is fascinated with numbers. He recently came across a peculiar problem and needs your expertise to solve it. He has two integers, a and b, and he wants to calculate the sum of all the prime numbers in the range [a, b] inclusive. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. John finds it difficult to manually compute this sum, especially for large values of a and b. Can you help him by writing a program that efficiently computes the desired sum of prime numbers for multiple test cases? Input First line contains T, the number of test cases. Each test case consists of two integers a and b given on a new line. Output For each test case, print the sum of all prime numbers in the range [a, b] on a new line. If there are no prime numbers in this range, output 0. Constraints 1 ≤ T ≤ 10^5 1 ≤ a ≤ b ≤ 10^6 Example Input: 2 1 10 10 20 Output: 17 60","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_primes_in_range(a, b): prime_sum = 0 for num in range(a, b + 1): if is_prime(num): prime_sum += num return prime_sum def solve_primes_sum(test_cases): results = [] for a, b in test_cases: results.append(sum_primes_in_range(a, b)) return results"},{"question":"Julia is training for a marathon and wants to track her running sessions in terms of distance and speed. She maintains a record of her runs and seeks to find her best performance based on certain criteria. She records each running session as a tuple containing distance (in kilometers) and time (in minutes). Given a list of such records, Julia defines her best performance as the session where she has the highest average speed. Average speed can be calculated using the formula: `speed = distance / (time / 60)`, which gives the speed in kilometers per hour. Your task is to write a program that finds the running session with the highest average speed and outputs the session\'s distance and time. Input The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of running sessions. The next n lines each contain a tuple of two integers d and t (1 ≤ d ≤ 100, 1 ≤ t ≤ 1000) — the distance (in kilometers) and the time (in minutes) of the running session. Output Output two integers d and t — the distance and time of the running session that has the highest average speed. If there are multiple sessions with the same highest average speed, output the one which appears first in the input. Examples Input 3 10 50 5 20 7 30 Output 5 20 Input 2 8 60 6 40 Output 6 40 Note In the first example, the average speeds of the sessions are: - 10 km in 50 minutes: `10 / (50 / 60) = 12` km/h - 5 km in 20 minutes: `5 / (20 / 60) = 15` km/h - 7 km in 30 minutes: `7 / (30 / 60) = 14` km/h The session with 5 km and 20 minutes has the highest average speed of 15 km/h. In the second example, the average speeds of the sessions are: - 8 km in 60 minutes: `8 / (60 / 60) = 8` km/h - 6 km in 40 minutes: `6 / (40 / 60) = 9` km/h The session with 6 km and 40 minutes has the highest average speed of 9 km/h.","solution":"def best_performance(num_sessions, sessions): Finds the running session with the highest average speed. Parameters: num_sessions (int): Number of running sessions sessions (list): List of tuples containing distance (km) and time (min) for each session Returns: tuple: Distance and time of the session with the highest average speed best_speed = 0 best_session = (0, 0) for distance, time in sessions: speed = distance / (time / 60) if speed > best_speed: best_speed = speed best_session = (distance, time) return best_session"},{"question":"Bob is an enthusiast for trains and loves to calculate the total time spent on each of his journeys. He is interested in knowing the actual time spent in transit and the total waiting time during his train travels. Bob\'s journey consists of multiple train rides with waiting times in between. He wants to calculate the total travel time (excluding waiting time) and the total waiting time separately. You are given Bob\'s schedule as a list of tuples, where each tuple represents a train ride in the format (start_time, end_time). The \\"start_time\\" is the time when the train departs, and the \\"end_time\\" is the time when the train arrives. Both times are given in the \\"HH:MM\\" format (24-hour clock). Write a program that computes: 1. The total travel time (sum of all train rides). 2. The total waiting time (time between arriving at a station and the next train\'s departure). Input The first line contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N, the number of train rides Bob has taken. The next N lines each contain two strings representing the start time and end time of each train ride in the format \\"HH:MM\\". Output For each test case, output two lines. The first line contains the total travel time in the format \\"HH:MM\\". The second line contains the total waiting time in the format \\"HH:MM\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 All times are valid times in the \\"HH:MM\\" format. The total travel time and waiting time for any test case will not exceed 24 hours. Example Input: 2 3 09:00 11:00 12:00 14:00 15:00 17:00 2 08:30 09:45 10:15 12:30 Output: 06:00 01:00 03:30 00:30 Explanation Example case 1. Bob has three train rides. The total travel time is (2 hours + 2 hours + 2 hours) = 6 hours. The waiting time between the first and second rides is (12:00 - 11:00) = 1 hour, and between the second and third rides is (15:00 - 14:00) = 1 hour. So, the total waiting time is 1 hour. Example case 2. Bob has two train rides. The total travel time is (1 hour 15 minutes + 2 hours 15 minutes) = 3 hours 30 minutes. The waiting time between the two rides is (10:15 - 09:45) = 30 minutes. So, the total waiting time is 30 minutes.","solution":"from datetime import datetime, timedelta def compute_time_difference(start, end): start_time = datetime.strptime(start, \\"%H:%M\\") end_time = datetime.strptime(end, \\"%H:%M\\") if end_time < start_time: end_time += timedelta(days=1) return end_time - start_time def format_time_difference(diff): hours, remainder = divmod(diff.seconds, 3600) minutes = remainder // 60 return f\\"{hours:02}:{minutes:02}\\" def calc_travel_and_waiting_times(schedule): total_travel_time = timedelta(0) total_waiting_time = timedelta(0) n = len(schedule) for i in range(n): start_time, end_time = schedule[i] total_travel_time += compute_time_difference(start_time, end_time) if i > 0: _, prev_end_time = schedule[i-1] total_waiting_time += compute_time_difference(prev_end_time, start_time) return format_time_difference(total_travel_time), format_time_difference(total_waiting_time) def train_schedule(T, test_cases): results = [] for i in range(T): N, schedule = test_cases[i] travel_time, waiting_time = calc_travel_and_waiting_times(schedule) results.append(travel_time) results.append(waiting_time) return results"},{"question":"Write a function to determine if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Input: The first line contains an integer T, the number of test cases. The following T lines each contain a string S to be checked. Output: Output T lines, each containing \\"Yes\\" if the string can be rearranged to form a palindrome, or \\"No\\" if it cannot. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 Example: Input: 2 carrace daily Output: Yes No","solution":"def can_form_palindrome(test_cases): Determines if each string in test_cases can be rearranged to form a palindrome. Args: test_cases (list of str): List of strings to be checked. Returns: list of str: Each element is \\"Yes\\" if the corresponding string can be rearranged to form a palindrome, otherwise \\"No\\". def can_rearrange_to_palindrome(s): from collections import Counter # Count the occurrence of each character counts = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in counts.values() if count % 2 == 1) return \\"Yes\\" if odd_count <= 1 else \\"No\\" return [can_rearrange_to_palindrome(s) for s in test_cases]"},{"question":"A company has a rectangular meeting room with dimensions n by m. The room is equipped with moveable tables arranged in a grid. Each table can either be set for a meeting (denoted by 1) or left empty (denoted by 0). At the beginning of each week, the arrangement of tables is reset randomly. The company wants to find the largest rectangular sub-grid of tables that are all set for a meeting. Write a function to determine the area of the largest rectangle composed entirely of `1`s in a given matrix. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the meeting room. Each of the next `n` lines contains `m` integers separated by spaces, with each integer being either `0` or `1` representing the state of a table (empty or set for a meeting). Output Print a single integer — the area of the largest rectangle composed of entirely `1`s. Examples Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Input 3 4 0 1 1 0 0 1 1 1 1 1 1 1 Output 6 Input 3 3 0 0 0 0 1 0 0 0 0 Output 1 Note In the first example, the largest rectangle of `1`s is found in rows 2 and 3 and columns 3 to 4, giving an area of 6 (2 rows x 3 columns). In the second example, the largest rectangle of `1`s occupies rows 2 and 3 and columns 2 to 4, also giving an area of 6 (2 rows x 3 columns). In the third example, the largest rectangle of `1`s is just a single table, giving an area of 1.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * (m + 1) for row in matrix: for i in range(m): if row[i] == 1: heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(m + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Given an integer array `arr` of size `n`, you need to make all elements of the array equal by performing the following operation zero or more times: * Select `k` contiguous elements of the array (`1 <= k <= n`). * Decrease each of the selected elements by one. Determine the minimum number of operations required to make all elements of the array equal. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the size of the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1000). Output Print a single integer, the minimum number of operations required. Examples Input 5 3 3 2 2 1 Output 2 Input 3 5 4 3 Output 2 Note In the first example, you can achieve the result with the following operations: - Decrease the first three elements by one: `[2, 2, 1, 2, 1]`. - Decrease the first two elements by one: `[1, 1, 1, 2, 1]`. In the second example, you can achieve the result with the following operations: - Decrease all elements by one: `[4, 3, 2]`. - Decrease all elements by one again: `[3, 2, 1]`.","solution":"def min_operations_to_equal_elements(arr): Given an array of integers, this function will return the minimum number of operations required to make all elements of the array equal. Each operation consists of selecting k contiguous elements and decreasing each of them by one. max_element = max(arr) min_element = min(arr) return max_element - min_element"},{"question":"You are given a string `S` and a positive integer `K`. Your task is to determine the length of the smallest substring that contains at least `K` distinct characters. If no such substring exists, return -1. For example, consider the string `S = \\"abcabcabc\\"` and `K = 4`. Since the string only contains 3 distinct characters (\'a\', \'b\', \'c\'), it\'s impossible to find a substring with 4 distinct characters, so the result should be -1. Sample Input: ``` abcabcabc 3 ``` Sample Output: ``` 3 ``` Explanation: The smallest substring containing at least 3 distinct characters is \\"abc\\", which appears multiple times in the string with length 3. Write a function `findSmallestSubstring` that accepts a string `S` and an integer `K`, and returns the length of the smallest substring that contains at least `K` distinct characters. Function Signature: ```python def findSmallestSubstring(S: str, K: int) -> int: pass ``` Input: - A string `S` (1 <= len(S) <= 10^5) - An integer `K` (1 <= K <= 26) Output: - An integer representing the length of the smallest substring with at least `K` distinct characters, or -1 if no such substring exists. Constraints: - The string `S` will consist of lowercase English letters only (a-z).","solution":"def findSmallestSubstring(S: str, K: int) -> int: if len(set(S)) < K: return -1 freq = {} min_len = float(\'inf\') distinct_count = 0 left = 0 for right in range(len(S)): if S[right] not in freq: freq[S[right]] = 0 freq[S[right]] += 1 if freq[S[right]] == 1: distinct_count += 1 while distinct_count >= K: min_len = min(min_len, right - left + 1) freq[S[left]] -= 1 if freq[S[left]] == 0: distinct_count -= 1 left += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are planning to organize a marathon race with N checkpoints. Each checkpoint has its own supply station to support the runners. To optimize the race logistics, you should place supply managers at certain checkpoints such that every supply station is managed. Each supply manager placed at a checkpoint i will manage the supply stations at checkpoints i, i+1, and i+2. Determine the minimum number of supply managers needed to ensure every supply station across all N checkpoints is managed. Constraints * All values in input are integers. * 1 leq N leq 100 Input Input is given from Standard Input in the following format: N Output Print the minimum number of supply managers needed to manage all supply stations. Examples Input 5 Output 2 Input 6 Output 2 Input 10 Output 4","solution":"def min_supply_managers(N): Returns the minimum number of supply managers needed to manage all supply stations. # Each supply manager covers 3 checkpoints. # The optimal placement is to utilize the fact that each manager can cover 3 consecutive checkpoints. return (N + 2) // 3"},{"question":"You are given a list of n integers representing the ages of people in a group. Determine the minimum number of moves required to make all the ages in the group equal. A move is defined as incrementing or decrementing an individual\'s age by 1. Input The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of people in the group. The second line contains n integers ai (0 ≤ ai ≤ 120) — the ages of the people in the group. Output Print the minimum number of moves required to make all the ages equal. Example Input 5 10 12 12 15 13 Output 6","solution":"def min_moves_to_equal_ages(ages): Returns the minimum number of moves required to make all ages equal. A move is defined as incrementing or decrementing an individual\'s age by 1. ages.sort() median = ages[len(ages) // 2] moves = sum(abs(age - median) for age in ages) return moves"},{"question":"Consider a network of computers represented as a directed graph where vertices denote computers and edges represent direct communication paths between them. A communication can be initiated only if there is a direct or indirect pathway between the sender and receiver. Your task is to develop a program that reads the network configuration and determines if it is possible to send a message from a given computer to another specified computer. Input The input consists of multiple test cases. The first line contains an integer T, the number of test cases (1 <= T <= 100). Each test case starts with an integer N (2 <= N <= 1000), the number of computers in the network, followed by an integer M (1 <= M <= 10000), the number of communication paths. The next M lines each contain two integers u and v (1 <= u, v <= N), denoting a direct communication path from computer u to computer v. Finally, two integers S and D (1 <= S, D <= N) are given, representing the source computer S and the destination computer D. Output For each test case, output \\"Message can be delivered.\\" if there exists a path from S to D. Otherwise, output \\"Message cannot be delivered.\\" Example Sample input: 2 4 4 1 2 2 3 3 4 4 1 1 3 3 2 2 4 4 3 1 3 4 4 1 2 2 3 3 4 4 1 4 3 Sample output: Message can be delivered. Message cannot be delivered.","solution":"from collections import defaultdict, deque def can_message_be_delivered(T, test_cases): results = [] for t in range(T): N, M, edges, S, D = test_cases[t] graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs(start, end): visited = [False] * (N + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() if node == end: return True for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return False if bfs(S, D): results.append(\\"Message can be delivered.\\") else: results.append(\\"Message cannot be delivered.\\") return results # Example usage T = 2 test_cases = [ (4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)], 1, 3), (3, 2, [(2, 4), (4, 3)], 1, 3) ] print(can_message_be_delivered(T, test_cases))"},{"question":"You are given a rectangular grid of size n x m. Each cell in this grid can either be empty or blocked. You can move up, down, left, or right, but you cannot move through blocked cells. Your goal is to find the number of distinct paths from the top-left corner (0,0) of the grid to the bottom-right corner (n-1,m-1). You can only move through cells that are not blocked, and you can only move one step at a time. If there is no valid path from (0,0) to (n-1,m-1), output 0. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - Each of the next n lines contains m characters, where each character is either \'.\' indicating an empty cell or \'#\' indicating a blocked cell. Output - A single integer — the number of distinct paths from (0,0) to (n-1,m-1) modulo 109 + 7. Example Input 3 3 ... .#. ... Output 2 Explanation In the given grid, there are exactly two distinct paths from the top-left to the bottom-right: 1. Right, Right, Down, Down 2. Down, Down, Right, Right Input 3 3 # .#. ... Output 0 Explanation There is no path from the top-left corner to the bottom-right corner as the entire first row is blocked. Tasks like these test the ability to navigate and make decisions based on grid traversal, which is a common problem in coding assessments.","solution":"MOD = 10**9 + 7 def num_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"Alex likes to collect stamps and he has a collection of stamps with different values. He wants to display his stamps in a rectangular grid fashion on a board such that each row and each column contains unique values. However, some of the stamps are already placed on the board and cannot be moved. Help Alex complete the board in a way that satisfies the condition. Input The first line contains two integers n and m (1 ≤ n, m ≤ 15) — the dimensions of the board. The next n lines contain m integers each, describing the initial state of the board. An element of the board is either a value from 1 to n*m or 0, where 0 indicates that the cell is empty and can be filled with any value. Output Output the completed board in n lines with m integers each such that each row and each column contains unique values. If there are multiple solutions, any one will be acceptable. If it is not possible to complete the board, print \\"No solution\\". Examples Input 2 2 1 0 0 2 Output 1 2 2 1 Input 3 3 1 0 3 0 2 0 0 0 0 Output 1 2 3 3 2 1 2 3 1","solution":"def solve_board(n, m, board): def is_valid(board, row, col, val): for i in range(n): if board[i][col] == val: return False for j in range(m): if board[row][j] == val: return False return True def solve(): for row in range(n): for col in range(m): if board[row][col] == 0: for num in range(1, n * m + 1): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True if solve(): return board return \\"No solution\\" # Test cases print(solve_board(2, 2, [[1, 0], [0, 2]])) # Example output should be valid configuration print(solve_board(3, 3, [[1, 0, 3], [0, 2, 0], [0, 0, 0]])) # Example output should be valid configuration"},{"question":"You are given a list of n students, each with a unique student ID from 1 to n. Some students are friends with each other. Given certain constraints, you need to determine if you can assign a grade (an integer) to each student such that friends always have different grades and if yes, then provide one possible way to assign the grades. Input The first line contains integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000) — the number of students and the number of friend pairs, respectively. The next m lines contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — indicating that student a and student b are friends. Note that each friendship is bidirectional, i.e., if student a is friends with student b, then student b is also friends with student a. Output If it\'s possible to assign grades such that no two friends have the same grade, print \\"possible\\" on the first line. On the next line, output n integers, where the i-th integer represents the grade for the i-th student (1 ≤ grade ≤ n). If it\'s not possible, print \\"impossible\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output possible 1 2 3 4 Input 3 3 1 2 2 3 3 1 Output possible 1 2 3 Input 3 3 1 2 2 3 3 1 Output impossible Note In the first example, there are 4 students and 4 friend pairs forming a cycle. We can assign grades such that no two adjacent students have the same grade. In the second example, there are 3 students and 3 friend pairs forming a triangle. We can assign grades 1, 2, and 3 such that all constraints are satisfied. In the third example, there are 3 students and their friendships form a cycle of length 3. It is not possible to assign grades in such a way that no two friends share the same grade, thus the output is \\"impossible\\".","solution":"def assign_grades(n, m, friends): from collections import deque # Build adjacency list for the graph adj_list = [[] for _ in range(n + 1)] for a, b in friends: adj_list[a].append(b) adj_list[b].append(a) # We will use BFS to check if we can color the graph using 2 colors. color = [-1] * (n + 1) # -1 means unvisited, 0 and 1 will be our two colors def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring the first node with color 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: # If unvisited color[neighbor] = 1 - color[node] # Color with opposite color queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighbor has the same color return False return True for student in range(1, n + 1): if color[student] == -1: # If not visited if not bfs(student): return \\"impossible\\" # We need to ensure grading (1-indexed) rather than (0,1). Therefore adding 1 to each. grades = [c + 1 for c in color[1:]] return \\"possible\\", grades # Example usage: # n, m = 4, 4 # friends = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(assign_grades(n, m, friends))"},{"question":"A city has a grid of streets that forms a perfect square of NxN intersections. Each intersection can be either open or closed. A closed intersection creates an impassable barrier which can\'t be traversed. You are located at the top-left corner of the grid and want to travel to the bottom-right corner. You can only move in two directions: right or down. Determine if there is any valid path from the top-left corner to the bottom-right corner given the configuration of intersections. Input The first line contains an integer N (1 ≤ N ≤ 500) — the size of the grid. Next, N lines follow each containing N space-separated integers, \'0\' or \'1\'. A \'0\' indicates an open intersection, and a \'1\' indicates a closed intersection. Output Print \\"YES\\" if there is a valid path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". Examples Input 3 0 0 0 1 0 1 0 0 0 Output YES Input 3 0 1 0 1 0 1 0 0 0 Output NO Input 4 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 Output YES","solution":"def has_valid_path(N, grid): if grid[0][0] == 1 or grid[N-1][N-1] == 1: return \\"NO\\" def dfs(x, y): if x == N-1 and y == N-1: return True directions = [(1, 0), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == 0: grid[nx][ny] = -1 # Mark as visited if dfs(nx, ny): return True return False if dfs(0, 0): return \\"YES\\" return \\"NO\\""},{"question":"In a small town called Graphville, the local government plans to build a circular route network that connects various neighborhoods, represented as vertices, with unidirectional roads. Each neighborhood must be reachable from any other, directly or indirectly. Your task is to determine if it is possible to build such a network. If so, you should specify one valid way to orient the roads. The network should not contain any cycles other than the one that connects all the neighborhoods in a circular manner. # Input The first line contains an integer n (2 ≤ n ≤ 105) representing the number of neighborhoods. The next n lines each contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) which represent the proposed roads connecting neighborhood ai to neighborhood bi. Each neighborhood is connected to exactly two other neighborhoods. # Output If it\'s possible to build the circular network, print \\"YES\\" and then print n lines each containing two integers pi and qi — each road’s orientation indicating the direction from neighborhood pi to neighborhood qi. You can print the roads in any order. If there are several solutions to the problem, print any of them. If it\'s not possible, print \\"NO\\". # Examples Example 1 # Input: ``` 4 1 2 2 3 3 4 4 1 ``` # Output: ``` YES 1 2 2 3 3 4 4 1 ``` Example 2 # Input: ``` 3 1 2 2 3 3 1 ``` # Output: ``` YES 1 2 2 3 3 1 ``` Example 3 # Input: ``` 4 1 2 2 3 3 4 1 3 ``` # Output: ``` NO ``` # Note: In the first example, neighborhoods form a simple cycle. In the second example, all neighborhoods are still reachable in a circular manner. In the third example, an extra connection creates an invalid configuration due to the presence of an additional cycle.","solution":"def build_circular_network(n, roads): from collections import defaultdict # Create graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Check if each node has exactly 2 neighbors for node in graph: if len(graph[node]) != 2: return \\"NO\\", [] # Visited set to keep track of the visited nodes visited = set() # To store the circular path path = [] def dfs(node, parent): visited.add(node) path.append(node) for neighbor in graph[node]: if neighbor == parent: # Don\'t go back to the parent node continue if neighbor in visited: # If we visit a visited node and it\'s not the parent # then it\'s a cycle and so we should end the search path.append(neighbor) return True if dfs(neighbor, node): return True path.pop() return False # Start DFS from any node, we\'ll pick node 1 if dfs(1, -1): # If the path represents a circular route if len(path) == n + 1 and path[0] == path[-1]: orientation = [(path[i], path[i + 1]) for i in range(n)] return \\"YES\\", orientation else: return \\"NO\\", [] else: return \\"NO\\", []"},{"question":"You are a traffic signal controller and you need to manage the duration of green, yellow, and red lights at an intersection. The intersection has sensors that report the number of cars waiting at each light. Based on this data, you will determine the duration of the green light for each signal. The rules for determining the green light duration are as follows: - If the number of cars waiting is less than or equal to 5, the green light should last for 30 seconds. - If the number of cars waiting is greater than 5 but less than or equal to 10, the green light should last for 45 seconds. - If the number of cars waiting is greater than 10, the green light should last for 60 seconds. Write a program that takes the number of test cases and the number of cars waiting at each test case as input, and then outputs the duration for the green light for each test case. Input Format: The first line contains a number, t, denoting the number of test cases. After that, for t lines, there is one number in each line representing the number of cars waiting at the signal. Output Format: For each test case, print the duration of the green light in seconds. Constraints: 1 ≤ t ≤ 100 0 ≤ n ≤ 100 SAMPLE INPUT 4 0 6 9 15 SAMPLE OUTPUT 30 45 45 60","solution":"def green_light_duration(t, car_counts): Determines the duration of the green light for each test case based on the number of cars waiting. Parameters: t (int): Number of test cases. car_counts (list[int]): List of car counts at each signal. Returns: list[int]: List of green light durations for each test case. durations = [] for cars in car_counts: if cars <= 5: durations.append(30) elif cars <= 10: durations.append(45) else: durations.append(60) return durations"},{"question":"Given an array of integers, write a program to find the longest subsequence such that every two consecutive elements in the subsequence have a common factor greater than 1. # Input - The first line of input contains an integer n (2 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the array. # Output - Output a single integer - the length of the longest subsequence satisfying the condition. # Examples Input ``` 5 4 8 15 16 23 ``` Output ``` 3 ``` Input ``` 4 7 11 13 17 ``` Output ``` 1 ``` # Note In the first example, one of the longest subsequences that satisfies the condition is [4, 8, 16]. Every pair of consecutive elements have a common factor greater than 1. In the second example, there is no subsequence of length greater than 1 where consecutive elements have a common factor greater than 1; hence the answer is 1.","solution":"from math import gcd from functools import lru_cache @lru_cache(None) def gcd_memo(x, y): return gcd(x, y) def find_longest_subsequence(arr): n = len(arr) if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if gcd_memo(arr[i], arr[j]) > 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # The following function is for the input and output format handling def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:])) print(find_longest_subsequence(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Consider a string s consisting of lowercase English letters with length n (1 ≤ n ≤ 10^6). You are required to perform a series of operations on this string as efficiently as possible. In each operation, you can select any two distinct characters in the string that are adjacent to each other and swap them. Your goal is to make the string a palindrome (a string that reads the same forwards and backwards) if possible. Write a function `min_swaps_to_palindrome` that takes in the string `s` and returns the minimum number of swaps required to turn `s` into a palindrome. If it\'s not possible to transform `s` into a palindrome, return -1. Function Signature: ```python def min_swaps_to_palindrome(s: str) -> int: pass ``` # Input - A single string `s` containing n lowercase English letters (1 ≤ n ≤ 10^6). # Output - An integer denoting the minimum number of adjacent swaps needed to make the string a palindrome. If it\'s not possible, return -1. # Examples Example 1 **Input:** ``` racecar ``` **Output:** ``` 0 ``` Example 2 **Input:** ``` aabb ``` **Output:** ``` 2 ``` Example 3 **Input:** ``` abc ``` **Output:** ``` -1 ``` # Notes - In the first example, the string \\"racecar\\" is already a palindrome, so no swaps are needed. - In the second example, you can make the string a palindrome by swapping \'b\' with \'a\' to get \\"abba\\". - In the third example, it is impossible to rearrange the string to form a palindrome. # Constraints - Your solution should consider the input size and provide an efficient method to determine the number of swaps or the impossibility of forming a palindrome.","solution":"def min_swaps_to_palindrome(s: str) -> int: from collections import Counter # Check if it\'s possible to make the string a palindrome char_count = Counter(s) odd_count = sum(1 for _, freq in char_count.items() if freq % 2 != 0) if odd_count > 1: return -1 # Function to count minimum swaps to make the string palindrome def count_min_swaps(arr): n = len(arr) arr = list(arr) swaps = 0 for i in range(n // 2): left = i right = n - left - 1 while left < right: if arr[left] == arr[right]: break else: right -= 1 if left == right: # This is the middle element in an odd-length palindrome arr[left], arr[left + 1] = arr[left + 1], arr[left] swaps += 1 left -= 1 # Decrement left to reevaluate the swapped character else: # Move the character to its palindrome position for j in range(right, n - left - 1): arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps return count_min_swaps(s)"},{"question":"A company wants to track the time taken by their employees on different types of work tasks. Each task is represented by a letter and each employee\'s work log is recorded as a string of task letters. The company uses a specific rule to measure productivity - they count the number of contiguous segments of tasks in a given work log. For example, in the work log \\"AAAABBBCCDAA\\", the contiguous segments are \\"AAAA\\", \\"BBB\\", \\"CC\\", \\"D\\", and \\"AA\\". Therefore, there are 5 segments in the work log. Your task is to write a program that calculates the number of contiguous segments of tasks given a series of work logs. The program should process multiple employees\' work logs and output the number of segments for each log provided. Input: The input consists of multiple test cases. Each test case starts with an integer T (1 ≤ T ≤ 100), the number of work logs. The following T lines each contain a single work log represented as a string of uppercase alphabetical letters. Each work log string will have a length of at most 200 characters. Output: For each test case, print a line that contains the number of contiguous segments of tasks in the corresponding work log. Example: Input: 3 AAAABBBCCDAA ABABABAB CCCCCCCCCC Output: 5 8 1 Explanation: - In the first work log \\"AAAABBBCCDAA\\", there are 5 contiguous segments: \\"AAAA\\", \\"BBB\\", \\"CC\\", \\"D\\", \\"AA\\". - In the second work log \\"ABABABAB\\", each letter is a separate segment, resulting in 8 segments. - In the third work log \\"CCCCCCCCCC\\", the entire log is one continuous segment. Make sure that your program efficiently handles the input size and constraints provided.","solution":"def count_contiguous_segments(work_log): Given a work log as a string, counts the number of contiguous segments of tasks. if not work_log: return 0 segments_count = 1 # There\'s at least one segment if the string is not empty prev_task = work_log[0] for task in work_log[1:]: if task != prev_task: segments_count += 1 prev_task = task return segments_count def process_work_logs(test_cases): Processes multiple work logs and returns a list of the number of contiguous segments for each work log. results = [] for log in test_cases: results.append(count_contiguous_segments(log)) return results def main(): T = int(input(\\"Enter the number of test cases: \\")) work_logs = [input().strip() for _ in range(T)] results = process_work_logs(work_logs) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid can either be an open space (`.`) or a wall (`#`). You start at the top-left corner of the grid (1, 1) and want to find the shortest path to the bottom-right corner of the grid (n, m) while being able to break at most one wall. If there are multiple paths, any of them is acceptable. Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The following `n` lines each contain a string of length `m` consisting of characters `.` and `#` where `.` represents an open space and `#` represents a wall. Output Print the minimum number of steps required to reach the bottom-right corner of the grid (n, m) from the top-left corner (1, 1), breaking at most one wall if necessary. If there is no such path, print `-1`. Example Input 5 5 .#. .#.#. .#.#. .#.#. ...#. Output 9 Explanation: In the given example, the output is 9 because the shortest path involves breaking one wall: 1 (break the first wall) -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 (break the second wall) -> 8 -> 9","solution":"from collections import deque def min_steps_with_one_wall_break(n, m, grid): # Initialize the directions for moving in the grid (right, down, left, up) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # BFS queue initialized with the starting position (0, 0) queue = deque([(0, 0, 0, False)]) # (current_row, current_col, steps, wall_broken) # Visited set, storing (row, col, wall_broken) visited = set((0, 0, False)) while queue: row, col, steps, wall_broken = queue.popleft() # If we reach the bottom-right corner of the grid if row == n-1 and col == m-1: return steps + 1 # Check all 4 possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc # Ensure new position is within bounds if 0 <= new_row < n and 0 <= new_col < m: # If the new position is an open space if grid[new_row][new_col] == \'.\' and (new_row, new_col, wall_broken) not in visited: queue.append((new_row, new_col, steps + 1, wall_broken)) visited.add((new_row, new_col, wall_broken)) # If the new position is a wall and we have not broken a wall yet elif grid[new_row][new_col] == \'#\' and not wall_broken and (new_row, new_col, True) not in visited: queue.append((new_row, new_col, steps + 1, True)) visited.add((new_row, new_col, True)) # If we exhausted all possibilities and did not reach the goal, return -1 return -1"},{"question":"You are given a string made up of lowercase English letters and your goal is to determine the longest substring of the string such that: 1. It contains no more than two distinct characters. 2. The substring must be as contiguous as possible and should maximize the length. Example input and output are provided below: Input A single line containing a non-empty string consisting of lowercase English letters only. The length of the string will not exceed 10,000 characters. Output Print a single integer denoting the length of the longest substring of the given string that satisfies the mentioned requirements. Examples Input: abcbbbbcccbdddadacb Output: 10 Explanation: The substring \\"bcbbbbcccb\\" has 10 characters of any two distinct characters (\'b\' and \'c\') and appears contiguously within the string. Input: aaaaa Output: 5 Explanation: The substring \\"aaaaa\\" consists of only one character and it is already the longest possible substring containing up to two distinct characters.","solution":"def longest_substring_with_two_distinct_characters(s): from collections import defaultdict start = 0 max_length = 0 char_count = defaultdict(int) for end, char in enumerate(s): char_count[char] += 1 while len(char_count) > 2: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 current_length = end - start + 1 max_length = max(max_length, current_length) return max_length"},{"question":"problem Tom loves reading books and is a member of a local library. He has a list of books he wants to borrow, but the library has some constraints. The library has N different books, each available in a certain quantity. Tom wants to find out how many different books he can borrow while respecting the library\'s constraints. Tom can only borrow books such that the total number of books he borrows does not exceed the library\'s available quantity of that book. Additionally, he has a specific maximum limit L on the total number of books he can borrow in a single session. Given the library\'s inventory and Tom\'s borrowing limit, write a program to determine the maximum number of different books Tom can borrow. # Input The input consists of three lines: 1. The first line contains the integer N (1 ≤ N ≤ 100) representing the number of different books in the library. 2. The second line contains N integers separated by spaces, where the i-th integer represents the quantity of the i-th book available in the library (1 ≤ quantity ≤ 100). 3. The third line contains the integer L (1 ≤ L ≤ 100), which is the maximum total number of books Tom can borrow in a single session. # Output Output a single integer denoting the maximum number of different books Tom can borrow. # Example Input 3 5 3 2 5 Output 2 **Explanation:** Tom can borrow a maximum of 5 books. The optimal way is to borrow 3 books of the first type and 2 books of the third type, allowing him to borrow 2 different books in total. Although he could borrow up to 3 books of the second type, it would only count as 1 different book, so borrowing from the first and third types gives a better result. # Constraints - 1 ≤ N ≤ 100 - 1 ≤ quantity ≤ 100 - 1 ≤ L ≤ 100","solution":"def max_different_books(N, quantities, L): Determine the maximum number of different books Tom can borrow. Parameters: N : int : Number of different books in the library quantities : list of int : The available quantity of each book L : int : The maximum total number of books Tom can borrow in a single session Returns: int : The maximum number of different books Tom can borrow # Sort the quantities to prioritize borrowing books with smaller quantities quantities.sort() total_books_borrowed = 0 different_books_borrowed = 0 for quantity in quantities: if total_books_borrowed + quantity <= L: total_books_borrowed += quantity different_books_borrowed += 1 else: break return different_books_borrowed"},{"question":"Imagine you are a software engineer tasked with designing an automated ticketing system for a theatre. The theatre has several shows playing, each with its own set of time slots and seat arrangements. You are required to develop a function that can process ticket booking requests, allocate seats, and ensure that no two patrons are allocated the same seat for the same show at the same time. Each show is identified by a unique integer ID, and each time slot for a show is represented as a string in the form \\"HH:MM\\". Each seat is represented by a unique seat number. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of shows. - This is followed by `n` blocks of lines, each describing a show. Each block starts with an integer `t` (1 ≤ t ≤ 50), the number of time slots for the show. This is followed by `t` lines, each containing a string `timeslot` and integer `s` (1 ≤ s ≤ 200), the number of seats available for that time slot. If there are multiple time slots within a show, they are presented in chronological order. - The next line contains an integer `m` (1 ≤ m ≤ 500), the number of booking requests. Each booking request consists of three values: timeslot in the form \\"HH:MM\\", the show ID, and the seat number requested. # Output - For each booking request, output \\"SUCCESS\\" if the seat can be successfully booked, or \\"FAIL\\" if the seat is already taken for that show and timeslot. # Example Input ``` 2 3 10:00 100 12:00 100 14:00 150 2 09:00 50 11:00 60 5 10:00 1 10 12:00 1 100 14:00 1 150 09:00 2 25 10:00 1 10 ``` Output ``` SUCCESS SUCCESS SUCCESS SUCCESS FAIL ``` # Notes - A successful booking allocates the seat to the patron and ensures no other patron can book the same seat for the same show and time slot. - Each booking request must be processed in the order it is received. - If a booking request is for a valid show ID and valid seat number at a given timeslot, and the seat is available, allocate the seat and return \\"SUCCESS\\". If the seat has already been booked for that time slot, return \\"FAIL\\".","solution":"def process_bookings(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0].strip()) idx = 1 # Show and Time slot seat allocation dictionary shows = {} for _ in range(n): show_id = _ + 1 t = int(lines[idx].strip()) idx += 1 shows[show_id] = {} for _ in range(t): timeslot, s = lines[idx].strip().split() s = int(s) idx += 1 shows[show_id][timeslot] = [False] * (s + 1) # Boolean array to track booked seats for each timeslot m = int(lines[idx].strip()) idx += 1 results = [] for _ in range(m): timeslot, show_id, seat = lines[idx].strip().split() show_id = int(show_id) seat = int(seat) idx += 1 if shows[show_id][timeslot][seat] == False: shows[show_id][timeslot][seat] = True results.append(\\"SUCCESS\\") else: results.append(\\"FAIL\\") return results"},{"question":"Alex is building a simple inventory management system for his small store. Each product in the inventory has a unique product ID and a corresponding quantity. He wants to automate the process of handling stock transactions which include adding new products, updating the quantity of existing products, and retrieving the current stock of a particular product. Help Alex by implementing the necessary functionality. # Requirements 1. **Add New Product**: A new product can be added to the inventory with a specified initial quantity. 2. **Update Product Quantity**: The quantity of an existing product can be updated by adding or subtracting a specified amount. 3. **Retrieve Product Quantity**: The current quantity of a specified product can be retrieved. # Input Format The input starts with a single integer `n` (1 ≤ n ≤ 1000) representing the number of commands to be processed. Each of the next `n` lines contains one of three commands: - **Add Command**: \\"ADD productId initialQuantity\\" - **Update Command**: \\"UPDATE productId changeInQuantity\\" - **Retrieve Command**: \\"GET productId\\" - `productId` is a string of lowercase English letters with a length of no more than 10 characters. - `initialQuantity` and `changeInQuantity` are integers where `-1000 ≤ initialQuantity, changeInQuantity ≤ 1000`. It is guaranteed that the same product ID will not be added more than once. # Output Format For each \\"GET\\" command, output the current quantity of the specified product. If the product does not exist, output \\"Product not found\\". # Example Input ``` 7 ADD apple 50 ADD banana 100 GET apple UPDATE apple -30 GET apple UPDATE banana 200 GET banana ``` Output ``` 50 20 300 ``` # Explanation 1. The first command adds 50 apples to the inventory. 2. The second command adds 100 bananas to the inventory. 3. The third command retrieves and outputs the quantity of apples, which is 50. 4. The fourth command reduces the quantity of apples by 30. 5. The fifth command retrieves and outputs the new quantity of apples, which is now 20. 6. The sixth command increases the quantity of bananas by 200. 7. The seventh command retrieves and outputs the new quantity of bananas, which is now 300.","solution":"class Inventory: def __init__(self): self.products = {} def add_product(self, product_id, initial_quantity): Adds a new product with initial quantity. if product_id not in self.products: self.products[product_id] = initial_quantity def update_product_quantity(self, product_id, change_in_quantity): Updates the quantity of an existing product. if product_id in self.products: self.products[product_id] += change_in_quantity def get_product_quantity(self, product_id): Retrieves the current quantity of a product. if product_id in self.products: return self.products[product_id] else: return \\"Product not found\\""},{"question":"You are given an m x n 2D grid initialized with the value 0. You need to perform some operations on this grid. The operations are represented by a list of axis-aligned rectangles. Each rectangle is represented by its top-left and bottom-right coordinates, and performing an operation on a rectangle means incrementing all elements within that rectangle by 1. Write a function to process the grid and perform all operations. Return the grid after processing all the operations. The function signature is: ```python def apply_operations(m: int, n: int, operations: List[Tuple[int, int, int, int]]) -> List[List[int]]: ``` where: - `m` (1 ≤ m ≤ 1000) is the number of rows in the grid. - `n` (1 ≤ n ≤ 1000) is the number of columns in the grid. - `operations` is a list containing tuples of the form (r1, c1, r2, c2) (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n). Output: - Returns a 2D list representing the grid after applying all operations. Example: ```python m = 4 n = 5 operations = [(0, 0, 1, 2), (1, 1, 2, 4), (0, 0, 3, 3)] result = apply_operations(m, n, operations) # Expected output: # [ # [3, 3, 3, 2, 1], # [3, 4, 4, 3, 1], # [1, 2, 2, 2, 1], # [1, 1, 1, 1, 0] # ] ```","solution":"def apply_operations(m, n, operations): Apply operations on an m x n grid where operations are described as top-left and bottom-right coordinates marking rectangles within the grid. # Initialize the grid with zeros grid = [[0] * n for _ in range(m)] # Apply each operation for (r1, c1, r2, c2) in operations: for r in range(r1, r2 + 1): for c in range(c1, c2 + 1): grid[r][c] += 1 return grid"},{"question":"Write a program that takes an integer \'n\' and returns the sum of the digits of \'n\' after repeatedly summing the digits until a single digit is obtained. This process is known as finding the digital root of a number. The digital root of a non-negative integer is the single digit obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a digit sum. The process continues until a single-digit number is reached. Input: First line contains \'t\' number of test cases. Each of the next \'t\' lines contains a single non-negative integer \'n\'. Output: For each test case, print the single-digit sum. Constraints: 1 ≤ t ≤ 10^3 0 ≤ n ≤ 10^18 Author: Your Name SAMPLE INPUT 3 9875 12345 0 SAMPLE OUTPUT 2 6 0","solution":"def digital_root(n): Returns the digital root of a non-negative integer \'n\'. if n == 0: return 0 return 1 + (n - 1) % 9 def process_test_cases(t, cases): Processes \'t\' test cases, returning the digital root for each case. Parameters: t (int): Number of test cases. cases (list of int): The list of non-negative integers. Returns: list of int: A list containing the digital root for each test case. results = [] for n in cases: results.append(digital_root(n)) return results"},{"question":"Parking Lot Surveillance problem A parking lot surveillance system is designed to track the cars parked in a specific area. The surveillance system captures the license plate numbers of cars during entry and exit. You need to determine which cars are currently parked in the lot based on the entry and exit records. You are given two lists of entry and exit logs, where each license plate number can appear multiple times in both lists to account for cars re-entering or exiting the parking lot multiple times. Input format n m entry_1 entry_2 ldots entry_n exit_1 exit_2 ldots exit_m All inputs consist of alphanumeric characters. The first line gives the lengths n and m of the two logs, separated by spaces. The second line contains the license plate numbers captured during entry, separated by blanks. The third line contains the license plate numbers captured during exit, separated by blanks. Constraint * 0 leq n, m leq 10 ^ 5 * License plate numbers consist of alphanumeric characters (both uppercase and lowercase) without spaces. * The lengths of license plate numbers will not exceed 10 characters. Output format Print the number of unique cars currently parked in the lot. Print the license plate numbers of the parked cars in alphabetical order, one per line. Input example 1 5 3 ABC123 DEF456 GHI789 ABC123 JKL101 DEF456 ABC123 GHI789 Output example 1 2 ABC123 JKL101 Input example 2 4 4 XYZ789 ABC123 QRS456 TUV567 TUV567 ABC123 XYZ789 QRS456 Output example 2 0 Input example 3 6 4 LMN123 OPQ456 RST789 LMN123 UVW101 XYZ456 XYZ456 UVW101 OPQ456 LMN123 Output example 3 2 LMN123 RST789 Example Input 5 3 ABC123 DEF456 GHI789 ABC123 JKL101 DEF456 ABC123 GHI789 Output 2 ABC123 JKL101","solution":"def currently_parked_cars(cars_entry, cars_exit): Function to determine which cars are currently parked in the parking lot. Args: cars_entry (list): List of license plate numbers captured during entry. cars_exit (list): List of license plate numbers captured during exit. Returns: (int, list): Number of unique cars currently parked and the list of these cars in alphabetical order. entry_set = set(cars_entry) exit_set = set(cars_exit) # Count the occurrences entry_counts = {} exit_counts = {} for car in cars_entry: if car in entry_counts: entry_counts[car] += 1 else: entry_counts[car] = 1 for car in cars_exit: if car in exit_counts: exit_counts[car] += 1 else: exit_counts[car] = 1 currently_parked = [] for car in entry_counts: if car not in exit_counts or entry_counts[car] > exit_counts[car]: currently_parked.append(car) currently_parked.sort() return len(currently_parked), currently_parked"},{"question":"David is organizing a marathon on a circular track with n checkpoints. Each checkpoint is numbered from 1 to n in clockwise order. Runners are supposed to start at any checkpoint and visit all checkpoints exactly once, returning to their starting point. However, David wants to create a challenging twist to the marathon. He decided to give runners a sequence of target times they need to achieve between each pair of adjacent checkpoints. In this sequence, the i-th element represents the time for runners to travel from checkpoint i to checkpoint (i+1)%n. David wants to know if there is a way to arrange runners\' starting points such that the total time taken for a complete loop (visiting all checkpoints and returning to the starting point) will match a given target total time. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains two integers n (2 ≤ n ≤ 100) — the number of checkpoints, and T (1 ≤ T ≤ 10^9) — the target total time for completing a loop. The second line of each test case contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^6) — the target times between each pair of adjacent checkpoints. Output For each test case, if there exists a starting point such that the total time around the loop equals the target total time T, print \\"POSSIBLE\\" (without quotes). Otherwise, print \\"IMPOSSIBLE\\" (without quotes). Example Input 3 4 10 1 2 3 4 3 100 10 20 30 5 15 5 4 3 2 1 Output POSSIBLE IMPOSSIBLE POSSIBLE Note In the first test case, starting at any checkpoint and summing all times gives a total time of 10, which matches the target time T. In the second test case, no matter where the runners start, the total time is always 60, which doesn\'t match 100, so the output is IMPOSSIBLE. In the third test case, starting at checkpoint 2 and summing all times gives a total time of 15, which matches the target time T.","solution":"def is_possible_to_achieve_target_time(t, test_cases): results = [] for _ in range(t): n, target_time = map(int, test_cases.pop(0).split()) times = list(map(int, test_cases.pop(0).split())) total_time = sum(times) if total_time == target_time: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"The logistics department of a grocery delivery service is trying to optimize the loading process of boxes into their delivery trucks. Each truck is a 3x4 grid of storage spaces where each space can hold exactly one box. Boxes are stacked in rows and you must fill each row completely before moving on to the next row. However, if a row is filled, you must start filling from the leftmost position of the next row. The inventory manager has provided the number of boxes to be loaded into each truck. Your task is to design a program that visualizes how the boxes will be placed in the truck. Input The input consists of a single integer n (0 ≤ n ≤ 12), representing the number of boxes to be loaded in the truck. Output Print the figure of the truck\'s storage grid with n boxes loaded. Use the character \'X\' to represent a box, and \'.\' to represent an empty space. Each row should be 4 characters wide, and there should be three rows in total. Examples Input 5 Output XXXX X... .... .... Input 0 Output .... .... .... Input 10 Output XXXX XXXX XX.. ....","solution":"def visualize_truck_loading(n): Visualizes the loading of boxes into the truck\'s storage grid. Parameters: n (int): Number of boxes to load into the truck (0 ≤ n ≤ 12). Returns: str: A representation of the truck\'s storage grid. grid = [[\'.\' for _ in range(4)] for _ in range(3)] for i in range(n): grid[i // 4][i % 4] = \'X\' result = \'n\'.join(\'\'.join(row) for row in grid) return result"},{"question":"Create a function **anagramPairs** that, given a list of strings, returns the total number of unordered pairs of strings that are anagrams of each other. # Input - An integer **n** (1 ≤ n ≤ 10^4) - the length of the list. - A list of **n** strings, where each string has at most 100 characters, consisting of lowercase English letters. # Output - An integer - the total number of unordered pairs of strings that are anagrams of each other. # Example **Input:** ``` 4 [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\"] ``` **Output:** ``` 3 ``` **Input:** ``` 5 [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"zyx\\"] ``` **Output:** ``` 4 ``` # Note - In the first example: \\"listen\\", \\"silent\\", and \\"enlist\\" are all anagrams of each other (3 pairs). - In the second example: \\"abc\\", \\"bca\\", and \\"cab\\" form 3 anagram pairs among themselves, and \\"xyz\\" and \\"zyx\\" form 1 anagram pair. Thus, a total of 4 pairs.","solution":"def anagramPairs(n, strings): from collections import defaultdict # A dictionary to store the canonical form of the string as key and the count as value anagram_count = defaultdict(int) # Iterate over the list of strings for string in strings: # Sort the string to get its canonical form canonical_form = \'\'.join(sorted(string)) # Increment the count of this canonical form anagram_count[canonical_form] += 1 total_pairs = 0 # Calculate the number of pairs for count in anagram_count.values(): if count > 1: # If there are k anagrams, we can form k choose 2 pairs total_pairs += (count * (count - 1)) // 2 return total_pairs"},{"question":"Write a function `missing_number_in_array(arr, n)` that takes an array of integers `arr` and a single integer `n` as arguments. The array contains n-1 unique integers chosen from the range 1 to n. The function should return the missing integer from this range. INPUT - The first line of input contains a single integer t, the number of test cases. - Each of the next t lines contains: - The first integer, n, indicating the range of numbers from 1 to n. - The second line contains a space-separated list of n-1 integers representing the array. OUTPUT The missing number for each test case. Constraints: - 1 ≤ t ≤ 100 - 2 ≤ n ≤ 10^6 - Elements of the array are unique and within the range 1 to n SAMPLE INPUT 2 5 1 2 3 5 7 3 7 1 2 6 4 SAMPLE OUTPUT 4 5","solution":"def missing_number_in_array(arr, n): Returns the missing number from the range 1 to n in the array `arr`. # Calculate the expected sum of numbers from 1 to n expected_sum = n * (n + 1) // 2 # Calculate the actual sum of the numbers in arr actual_sum = sum(arr) # The missing number is the difference between expected and actual sum return expected_sum - actual_sum def find_missing_numbers(test_cases): results = [] for test in test_cases: n, arr = test missing_number = missing_number_in_array(arr, n) results.append(missing_number) return results"},{"question":"Cathy loves hiking and exploring nature trails. She maintains a blog where she writes about different trails she has explored. Each trail can be represented as a string where each character denotes a type of terrain. The terrain types Cathy encounters are as follows: - \'M\' for mountain - \'F\' for forest - \'R\' for river - \'P\' for plain Cathy likes to group consecutive terrains of the same type to create a summary of the trail. For example, if Cathy explores a trail represented by the string \\"MMFFFRRPPP\\", her summary should be \\"2M3F2R3P\\" indicating that there are 2 mountains, followed by 3 forests, followed by 2 rivers, and 3 plains in the sequence. Your task is to help Cathy generate such a summary for any given trail she explores. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the trail string. The second line contains a string of length n consisting only of characters \'M\', \'F\', \'R\', and \'P\'. Output Print a single line containing the summary of the trail. Examples Input 10 MMFFFRRPPP Output 2M3F2R3P Input 7 MRFFFRR Output 1M1R3F2R Note In the first sample, the input string \\"MMFFFRRPPP\\" represents a trail with 2 consecutive mountains, 3 consecutive forests, 2 consecutive rivers, and 3 consecutive plains. Thus, the summary is \\"2M3F2R3P\\". In the second sample, the string \\"MRFFFRR\\" is summarized as \\"1M1R3F2R\\". The problem requires reading an entire string and identifying the counts of consecutive terrains, then constructing a result string that groups those counts together with the corresponding terrain character.","solution":"def summarize_trail(n, trail): Generate a summary of the trail by grouping consecutive terrains of the same type. Args: n : int : Length of the trail string trail : str : String of length n consisting of characters \'M\', \'F\', \'R\', and \'P\' Returns: str : Summary of the trail if n == 0: return \\"\\" summary = [] current_char = trail[0] count = 1 for i in range(1, n): if trail[i] == current_char: count += 1 else: summary.append(f\\"{count}{current_char}\\") current_char = trail[i] count = 1 # Append the last group summary.append(f\\"{count}{current_char}\\") return \'\'.join(summary)"},{"question":"Consider an image represented by a square grid of size n × n. Each cell contains a value representing the pixel\'s intensity. You need to determine whether there is a sub-grid of size k × k where all the pixel values are the same. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000). - The next n lines each contain n integers representing the grid values (0 ≤ grid value ≤ 255). Output: Print \\"YES\\" if there exists a k × k sub-grid with all the same pixel values. Otherwise, print \\"NO\\". Examples: Input: 5 2 1 2 3 4 5 1 1 1 1 1 3 1 1 3 2 4 1 1 5 6 5 5 5 5 5 Output: YES Input: 4 3 1 2 3 4 4 4 4 4 1 1 1 1 0 1 2 3 Output: NO Input: 3 1 2 3 4 5 6 7 8 9 0 Output: YES Note: Sample 1. The sub-grid of size 2 × 2 located in the second and third rows and the second and third columns has all the same pixel values (1). Sample 2. No sub-grid of size 3 × 3 exists with all the same values. Sample 3. A sub-grid of size 1 × 1 always satisfies the condition.","solution":"def has_uniform_subgrid(n, k, grid): for i in range(n - k + 1): for j in range(n - k + 1): is_uniform = True initial_value = grid[i][j] for x in range(i, i + k): for y in range(j, j + k): if grid[x][y] != initial_value: is_uniform = False break if not is_uniform: break if is_uniform: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of n integers and an integer k. Determine if there is a pair of distinct elements in the list that sums to k. Input The first line contains an integer n (1 ≤ n ≤ 100) representing the number of integers in the list. The second line contains n integers, each integer between -10^5 and 10^5 inclusive. The third line contains the integer k (|k| ≤ 200,000). Output Output \\"YES\\" if there exists a pair of distinct elements that sum to k. Otherwise, output \\"NO\\". Examples Input 5 1 2 3 4 5 6 Output YES Input 5 1 2 3 4 5 10 Output NO","solution":"def pair_sums_to_k(n, numbers, k): Determines if there is a pair of distinct elements in \'numbers\' that sums to \'k\'. Parameters: n: int - the number of integers in the list numbers: list of int - the list of integers k: int - the target sum Returns: str - \\"YES\\" if there exists a pair that sums to \'k\', otherwise \\"NO\\" seen = set() for number in numbers: complement = k - number if complement in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Alice loves palindromes. A palindrome is a string that reads the same backward as forward. She wants to create a new string by choosing exactly three substrings from her given string and concatenating them together to form a palindrome. However, Alice must ensure that each of the three chosen substrings has the same length. Given a string s of lowercase English letters, determine whether it is possible to select three substrings of the same length from s and concatenate them to form a palindrome. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". Input A single line containing the string s (1 ≤ |s| ≤ 1000) consisting of only lowercase English letters. Output A single line containing \\"YES\\" or \\"NO\\" based on whether it is possible to concatenate three equally sized substrings of s to form a palindrome. Examples Input abcbaabc Output YES Input abcabcabcabc Output YES Input abcdefg Output NO Note In the first test case, Alice can choose the substrings \\"abc\\", \\"ba\\", and \\"abc\\" and concatenate them to form the palindrome \\"abcbaabc\\". In the second test case, Alice can choose the substrings \\"abc\\", \\"abc\\", and \\"abc\\" and concatenate them to form the palindrome \\"abcabcabcabc\\". In the third test case, no combination of three substrings of equal length can form a palindrome.","solution":"def can_form_palindrome(s): Determines if it\'s possible to select three substrings of equal length from the string s and concatenate them to form a palindrome. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it\'s possible to form such a palindrome, \\"NO\\" otherwise. n = len(s) # A helper function to check if a string is a palindrome def is_palindrome(sub): return sub == sub[::-1] # Iterate over possible substring lengths for length in range(1, n // 3 + 1): substrings = [s[i:i + length] for i in range(0, n - length + 1)] for i in range(len(substrings)): for j in range(i + 1, len(substrings)): for k in range(j + 1, len(substrings)): combined = substrings[i] + substrings[j] + substrings[k] if is_palindrome(combined): return \\"YES\\" return \\"NO\\""},{"question":"A pharmaceutical company has developed a new drug and wants to track its sales performance over time. They\'ve set up a system that records sales data, but they need your help to analyze it. Specifically, they want to find the highest sales day within each week for a given period and the corresponding sales amount. Write a program that processes the given sales data, which includes sales amounts for each day in multiple weeks. The task is to identify the day in each week where the sales were the highest and return the day of the week and the sales amount for that day. If there are multiple days with the highest sales, choose the earliest day in the week. # Input The input consists of multiple test cases. Each test case starts with an integer `n` (1 <= n <= 100), representing the number of weeks. For each week, there are 7 integers that represent the sales data for each day of the week from Monday to Sunday. The end of the input is indicated by a single integer `-1`, which is not part of the test cases. # Output For each test case, output the highest sales day for each week in the format `Week i: day salesAmount`, where `i` is the week number (starting from 1), `day` is the day of the week starting from 0 for Monday to 6 for Sunday, and `salesAmount` is the sales amount for that day. # Example Input ``` 2 10 20 30 40 50 60 70 50 60 70 80 30 20 10 1 5 15 25 35 45 55 65 -1 ``` Output ``` Week 1: 6 70 Week 2: 3 80 Week 3: 6 65 ```","solution":"def highest_sales_per_day(test_cases): results = [] week_number = 1 for sales_data in test_cases: for week in sales_data: max_sales = max(week) max_day = week.index(max_sales) results.append(f\\"Week {week_number}: {max_day} {max_sales}\\") week_number += 1 return results def parse_input(input_data): data = input_data.strip().split(\\"n\\") i = 0 test_cases = [] while i < len(data) and data[i] != \\"-1\\": weeks_count = int(data[i]) i += 1 weeks_sales = [] for _ in range(weeks_count): week_sales = list(map(int, data[i].split())) weeks_sales.append(week_sales) i += 1 test_cases.append(weeks_sales) return test_cases"},{"question":"You are given a list of integers. Your task is to find the maximum sum of any non-empty subarray of the list. A subarray is a contiguous segment of the original list. To solve this problem, you should use a well-known algorithm called Kadane\'s Algorithm, which runs in linear time. Input A single line containing space-separated integers. The sequence ends with the number -999 which should not be considered part of the input. Output Print a single integer: the maximum sum of any non-empty subarray of the list. Example Input -2 1 -3 4 -1 2 1 -5 4 -999 Output 6","solution":"def max_subarray_sum(nums): nums = nums[:-1] # Remove the ending -999 current_max = max_sum = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) max_sum = max(max_sum, current_max) return max_sum"},{"question":"Tom is a software engineer who loves playing games on his break. One of his favorite games involves popping balloons. There are n balloons in a row, each with a certain amount of air in it, represented by an integer value ai. Tom can pop any number of balloons in one move, but they must be contiguous. When Tom pops a balloon, the air from that balloon is added to his score. However, if the air from a balloon at the start of a contiguous segment is a negative value, the entire segment fails to contribute towards his score and his total remains unchanged after that move. Tom wants to maximize his score by choosing the best strategy to pop different segments of balloons. Your task is to help Tom determine the maximum score he can achieve. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of balloons. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the amount of air in each balloon. Output Print one integer — the maximum score Tom can achieve. Examples Input 5 3 -1 3 -2 5 Output 8 Input 4 -2 -3 -1 -4 Output 0 Note In the first sample, Tom can pop balloons 1 and 3 separately to get the maximum score of 8 (3 + 5). Popping the segment including the balloon with -1 or -2 would not maximize the score. In the second sample, since every balloon has negative air, it is better not to pop any segment to avoid reducing the score. Thus, the maximum score is 0.","solution":"def max_balloons_score(n, balloons): Returns the maximum score Tom can achieve by popping balloons. max_score = 0 current_score = 0 for air in balloons: if current_score + air < 0: current_score = 0 else: current_score += air max_score = max(max_score, current_score) return max_score"},{"question":"Alice has a garden with different types of flowers. She loves to arrange these flowers in unique ways for different occasions. She wants to know how many distinct ways she can arrange a set of n flowers in a row given that some of the flowers might be of the same type. Write a program to help Alice figure this out. INPUT First line of input contains the number of test cases T. Each test case contains two lines. The first line contains an integer n, the number of flowers. The second line contains n integers, where the ith integer represents the type of the ith flower. OUTPUT For each test case, output the number of distinct ways to arrange the flowers. CONSTRAINTS 1 ≤ T ≤ 20 1 ≤ n ≤ 12 1 ≤ type ≤ 100 SAMPLE INPUT 1 3 1 2 1 SAMPLE OUTPUT 3","solution":"from collections import Counter from math import factorial def distinct_flower_arrangements(T, cases): results = [] for i in range(T): n = cases[i][0] flower_types = cases[i][1] # Count the frequency of each flower type count = Counter(flower_types) # Total number of permutations without considering duplicates total_permutations = factorial(n) # For each frequency, divide the total permutations by the factorial of each type\'s count for freq in count.values(): total_permutations //= factorial(freq) results.append(total_permutations) return results"},{"question":"Lena is organizing a treasure hunt and she needs to hide treasures efficiently on a grid map. The grid map consists of cells with integer coordinates and Lena has certain points where she can hide treasures. She wants to know the smallest square sub-grid that can contain all the treasure locations. Your task is to help Lena by writing a program that determines the side length of the smallest square sub-grid that can enclose all given treasure locations. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), the number of treasure locations. It is followed by n lines, each containing two integers x and y (-1000 ≤ x ≤ 1000), the coordinates of a treasure location. The input is terminated by a line containing a single 0. Output For each test case, output the length of the side of the smallest square sub-grid that can contain all the treasure locations. The output for each test case should be on a new line. Example Input 3 -1 -1 2 2 0 1 4 -3 -3 1 4 4 1 -1 -2 0 Output 4 8","solution":"def smallest_square_sidelen(treasure_positions): Returns the side length of the smallest square sub-grid that can enclose all treasure locations. if not treasure_positions: return 0 # No treasures min_x = min(x for x, y in treasure_positions) max_x = max(x for x, y in treasure_positions) min_y = min(y for x, y in treasure_positions) max_y = max(y for x, y in treasure_positions) max_span = max(max_x - min_x, max_y - min_y) return (max_span + 1) def read_input(): import sys input = sys.stdin.read data = input().split() i = 0 results = [] while i < len(data): n = int(data[i]) if n == 0: break treasure_positions = [] for j in range(n): x = int(data[i + 1 + 2 * j]) y = int(data[i + 2 + 2 * j]) treasure_positions.append((x, y)) results.append(smallest_square_sidelen(treasure_positions)) i += 1 + 2 * n for result in results: print(result)"},{"question":"In a small town, there is a unique tradition of celebrating numbers. Each person in the town loves to perform an operation on an array of integers. You are given an array consisting of n integers: a1, a2, ..., an. There are m queries, each query can be one of the following types: 1. Format of the query \\"1 l r x\\". For this query, you need to add the number x to each element of the sub-array from index l to index r. 2. Format of the query \\"2 l r\\". For this query, you should output the sum of the elements of the sub-array from index l to index r. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 200000). The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the initial array a. The next m lines describe the queries. Each query is given in one of the formats described above. It is guaranteed that for each query of both types, 1 ≤ l ≤ r ≤ n. Output For each query of the second type, print the sum of the sub-array on a new line. Examples Input 5 4 5 3 -1 7 2 1 2 4 3 2 1 5 1 1 3 -2 2 2 4 Output 16 7 Note After the first query, a = [5, 6, 2, 10, 2]. For the second query, the sum = 5 + 6 + 2 + 10 + 2 = 25. After the third query, a = [3, 4, 0, 10, 2]. For the fourth query, the sum = 4 + 0 + 10 = 14.","solution":"def process_queries(n, m, array, queries): for query in queries: if query[0] == 1: _, l, r, x = query for i in range(l-1, r): array[i] += x elif query[0] == 2: _, l, r = query print(sum(array[l-1:r]))"},{"question":"Given an array of integers, determine the minimum number of moves required to make all elements equal, where a move is defined as incrementing or decrementing an element by 1. Constraints: * 1 ≤ N ≤ 10000 * -10^9 ≤ A[i] ≤ 10^9 * All values in input are integers Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Output the minimum number of moves required. Examples Input 3 1 2 3 Output 2 Input 5 10 10 10 10 10 Output 0 Input 4 -1 -2 -3 -4 Output 4","solution":"def min_moves_to_equal_elements(n, a): Determine the minimum number of moves required to make all elements equal. A move is defined as incrementing or decrementing an element by 1. Parameters: n (int): The number of integers in the array. a (list of int): The list of integers. Returns: int: The minimum number of moves. a.sort() median = a[n // 2] # median for odd length and also for even length, as it\'s the same cost moves = sum(abs(x - median) for x in a) return moves"},{"question":"You are given a string consisting of lowercase Latin letters, and you have to manipulate it using the following operations: 1. Select any character in the string and move it to the beginning of the string. 2. Select any character in the string and move it to the end of the string. You need to perform exactly k such operations (possibly zero) to obtain the lexicographically smallest string possible. The lexicographically smallest string is the one for which there is no other permutation that is smaller when compared character by character from left to right. For example, if you have the string \\"bcdea\\" and k=3, one possible sequence of moves is: 1. Move \'a\' to the beginning: \\"abcde\\" 2. Move \'b\' to the end: \\"acdeb\\" 3. Move \'c\' to the end: \\"adebc\\" However, if k=1, the best move would be: 1. Move \'a\' to the beginning: \\"abcde\\" Your task is to determine the lexicographically smallest string that can be obtained using exactly k operations. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: 1. The first line contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase Latin letters. 2. The second line contains an integer k (0 ≤ k ≤ 100). Output For each test case, print the lexicographically smallest string that can be obtained after exactly k operations. Example Input 2 bcdea 3 abcde 0 Output abcde abcde # Note: In the first test case, one possible sequence of moves to achieve the smallest lexicographical string is: 1. Move \'a\' to the beginning: \\"abcde\\" 2. Move \'b\' to the end: \\"acdeb\\" 3. Move \'c\' to the end: \\"adebc\\" However, in this example, there may be multiple optimal sequences of moves that result in the same lexicographically smallest string. In the second test case, since k=0, we can\'t make any move, so the output remains the same as the input string.","solution":"def smallest_lexicographical_string(s, k): Returns the lexicographically smallest string that can be obtained after exactly k operations. if k == 0: return s return \'\'.join(sorted(s)) def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(smallest_lexicographical_string(s, k)) return results"},{"question":"Piegirl discovered a series of vaults connected by unidirectional tunnels, where the goal is to assemble a specific collection of treasures. The vaults are arranged in a specific manner: every vault has exactly two tunnels emerging from it except for the final vault which contains all the treasures required. Each tunnel from vault `i` leads to either vault `i+1` or vault `i+2`. You start at vault 0. Node `i` can only be reached from nodes `i-1` or `i-2`. Your task is to find if it is possible to assemble all the treasures by visiting vaults in the order dictated, and if possible, provide an order in which to traverse the vaults to reach the final vault with all the treasures. The final vault will be vault `n` (0-indexed), containing all the treasures. Input The input consists of a single integer n (1 ≤ n ≤ 105). Output If it is possible to reach the final vault n following the vault tunnel constraints, print any order of vaults starting from vault 0 to vault n. If it is not possible, print -1. Examples Input 5 Output 0 1 3 4 5 Input 3 Output 0 1 3 Input 1 Output 0 1 Input 4 Output 0 1 2 4","solution":"def find_vault_path(n): Finds the path to the final vault n from vault 0. If it is possible to reach vault n, returns a list of vaults in the order to traverse. If not possible, returns -1. if n == 0: return [0] # Initialize the path with the starting vault path = [0] # Add vaults to the path following the rule i = 0 while i < n: if i + 2 <= n: path.append(i + 2) i += 2 else: path.append(i + 1) i += 1 return path # Example usage (Remove before running tests): # print(find_vault_path(5)) # Output: [0, 2, 4, 5] # print(find_vault_path(3)) # Output: [0, 2, 3] # print(find_vault_path(1)) # Output: [0, 1] # print(find_vault_path(4)) # Output: [0, 2, 4]"},{"question":"A gardener is building a new greenhouse and wants to ensure that it\'s well-structured. The greenhouse has to be made using glass panels in such a way that it forms a perfect rectangular shape covered fully with glass panels without any overlaps. However, the gardener can only use glass panels that have dimensions 1 × 2 or 2 × 1. Can you help the gardener determine if it\'s possible to cover an entire n x m greenhouse using only these panels? Input The first and only line of input contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the greenhouse\'s bottom. Output Print \\"POSSIBLE\\" if it is possible to cover the entire greenhouse using the given glass panels, otherwise print \\"IMPOSSIBLE\\". Examples Input 3 4 Output POSSIBLE Input 2 3 Output IMPOSSIBLE","solution":"def is_possible_to_cover(n, m): Determines if it is possible to cover an entire n x m greenhouse using only 1x2 or 2x1 glass panels. Parameters: n (int): The number of rows of the greenhouse. m (int): The number of columns of the greenhouse. Returns: str: \\"POSSIBLE\\" if the greenhouse can be fully covered with the panels, otherwise \\"IMPOSSIBLE\\". # Check if the product of n and m is even if (n * m) % 2 == 0: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"There are M stacks of pancakes, which are initially empty. You have N pancakes, each with a different size from 1 to N, and you need to distribute all the pancakes among the M stacks. A stack of pancakes is considered \\"sorted\\" if each pancake in the stack is smaller than the pancake below it. Your goal is to find the maximum number of stacks that can meet the \\"sorted\\" condition after distributing all the pancakes optimally. Constraints * All values in input are integers. * 1 leq N leq 100 * 1 leq M leq 100 Input Input is given from Standard Input in the following format: N M Output Print the maximum number of stacks that can be \\"sorted\\". Examples Input 5 3 Output 3 Input 8 4 Output 4 Input 7 2 Output 1","solution":"def max_sorted_stacks(N, M): Returns the maximum number of sorted stacks that can be achieved. Parameters: N (int): Number of pancakes M (int): Number of stacks Returns: int: Maximum number of sorted stacks return min(N, M)"},{"question":"Given is an undirected graph G with N vertices and M edges. A path is defined as a sequence of edges that connects two vertices without revisiting any vertex. You are given Q queries, where query i asks if there exists a path between Vertex U_i and Vertex V_i (1 leq U_i, V_i leq N and U_i ≠ V_i). For each query, print \\"YES\\" if there exists a path between Vertex U_i and Vertex V_i, and \\"NO\\" otherwise. Constraints - 2 le N le 10^5 - 1 le M le 2 times 10^5 - 1 le Q le 10^5 - 1 le U_i, V_i le N Input Input is provided from Standard Input in the following format: N M A_1 B_1 : A_M B_M Q U_1 V_1 : U_Q V_Q Output For each query, print \\"YES\\" if a path exists between Vertex U_i and Vertex V_i, and \\"NO\\" otherwise. Examples Input 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 5 1 Output YES YES YES Input 4 2 1 2 3 4 2 1 3 4 2 Output NO NO Input 6 5 1 2 2 3 1 4 4 5 5 6 4 1 6 2 3 4 1 6 5 Output YES YES YES YES","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def is_connected(n, edges, queries): # Initialize parent and rank arrays parent = [i for i in range(n + 1)] rank = [0] * (n + 1) # Apply union-find algorithm for u, v in edges: x = find_parent(parent, u) y = find_parent(parent, v) if x != y: union(parent, rank, x, y) # Process each query result = [] for u, v in queries: if find_parent(parent, u) == find_parent(parent, v): result.append(\\"YES\\") else: result.append(\\"NO\\") return result def solve(input_lines): data = input_lines.split() index = 0 N, M = int(data[index]), int(data[index+1]) index += 2 edges = [] for _ in range(M): A, B = int(data[index]), int(data[index+1]) edges.append((A, B)) index += 2 Q = int(data[index]) index += 1 queries = [] for _ in range(Q): U, V = int(data[index]), int(data[index+1]) queries.append((U, V)) index += 2 result = is_connected(N, edges, queries) return \\"n\\".join(result)"},{"question":"Write a program that takes an integer N (1 <= N <= 50) as input and prints a specific pattern of N lines. The pattern should follow these rules: - Each line i (1 <= i <= N) contains i asterisks (\'*\'). - After the i-th line, a newline character should be printed. Constraints * 1 <= N <= 50 * Each line should contain only \'*\' characters followed by a newline. Input Input is given from Standard Input in the following format: N Output The output should be the described pattern of N lines. Examples Input 3 Output * ** *** Input 5 Output * ** *** **** *****","solution":"def print_pattern(N): Prints a pattern of N lines where each line i contains i asterisks. for i in range(1, N + 1): print(\'*\' * i)"},{"question":"Tom is working on a text editor, and he needs to implement a feature that will allow him to find and highlight all substrings within a given string that meet specific criteria. The criterion is that the substring must be a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward (case-sensitive and without considering spaces). Tom requests your help in writing a function that will identify all unique palindromic substrings of a given string. Input: - A single string `s` (1 ≤ len(s) ≤ 5000), consisting of lowercase and uppercase English letters. Output: - Print the total number of unique palindromic substrings in `s`. Example Input: ``` abaaa ``` Output: ``` 5 ``` Explanation: The unique palindromic substrings are \\"a\\", \\"aa\\", \\"aba\\", \\"b\\", \\"aaa\\". Input: ``` racecar ``` Output: ``` 7 ``` Explanation: The unique palindromic substrings are \\"a\\", \\"c\\", \\"e\\", \\"r\\", \\"racecar\\", \\"cec\\", \\"aceca\\".","solution":"def count_unique_palindromic_substrings(s): def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j + 1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"Rainwater Harvesting In urban planning, one of the considerations is the capacity to harvest rainwater in large storage tanks. Typically, the tanks have a specific dimension which includes multiple compartments arranged sequentially. Each compartment can collect a different amount of rainwater based on its height compared to adjacent compartments. Given a list of integers representing the heights of the tanks\' compartments, we need to calculate the total amount of rainwater that can be harvested across all compartments after a heavy rain. The harvested rainwater in a compartment is limited by the height of the tallest compartments to its left and right. Write a function `harvest_rainwater(heights: List[int]) -> int` to determine the total amount of rainwater that can be harvested. # Input: - A list of positive integers `heights` where each integer represents the height of the compartments in the storage tank. The length of the list is between 1 and 100,000 inclusive, and each height can be between 1 and 1,000 inclusive. # Output: - An integer indicating the total amount of rainwater that can be harvested. # Example: ```python # Input heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] # Output 6 Explanation: Total rainwater that can be harvested: 1 + 1 + 2 + 1 + 1 = 6 units. ``` # Constraints: - The input list will always contain at least one compartment. - The function should handle large inputs efficiently, aiming for linear time complexity O(n).","solution":"from typing import List def harvest_rainwater(heights: List[int]) -> int: Calculate the total amount of rainwater that can be harvested. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water on top of each compartment for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"Alice loves to collect both small and large marbles, and she has a vast collection stored in boxes. Each box contains a variety of marble sizes, each labeled with a unique integer size value. Alice wants to know how many times a specific pattern of marble sizes appears in her boxes in a consecutive sequence. For example, if a box contains marbles with sizes [3, 4, 1, 2, 5, 1, 2, 3] and Alice is looking for the pattern [1, 2], we can see that the pattern [1, 2] appears twice in the sequence. You need to write a program to help Alice determine the number of times a specified pattern appears in a given marble sizes sequence. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of marble sizes in the sequence. - The second line contains n integers separated by spaces, representing the marble sizes in the sequence. - The third line contains an integer m (1 ≤ m ≤ 1000), the length of the pattern. - The fourth line contains m integers separated by spaces, representing the pattern of marble sizes. Output Print exactly one integer: the number of times the pattern appears as a consecutive sequence in the marble sizes sequence. Examples Input 10 3 4 1 2 5 1 2 3 1 2 2 1 2 Output 3 Input 7 1 1 1 1 1 1 1 1 1 Output 7 Input 5 1 2 3 4 5 3 4 5 6 Output 0 Explanation of Examples In the first example, the pattern [1, 2] appears three times in the sequence [3, 4, 1, 2, 5, 1, 2, 3, 1, 2]. In the second example, the pattern [1] appears seven times in the sequence [1, 1, 1, 1, 1, 1, 1]. In the third example, the pattern [4, 5, 6] does not appear in the sequence [1, 2, 3, 4, 5].","solution":"def count_pattern_occurrences(n, marble_sizes, m, pattern): Counts the number of times a pattern appears in a sequence of marble sizes as a consecutive sequence. :param n: Number of marble sizes in the sequence :param marble_sizes: List of marble sizes in the sequence :param m: Length of the pattern :param pattern: The pattern of marble sizes to look for :return: Number of times the pattern appears in the sequence as a consecutive sequence count = 0 for i in range(n - m + 1): if marble_sizes[i:i + m] == pattern: count += 1 return count"},{"question":"A chef is planning a menu for a multi-course meal, and you have been tasked with finding the minimum number of ingredients required. The chef has a list of ingredients for each course, and any ingredient can be used in any number of courses. Your task is to determine the minimum number of unique ingredients needed to cover all courses such that there are no duplicate ingredients within a single course. **Input** - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of courses. - Each of the next `n` lines contains a list of space-separated strings, representing the ingredients for the respective courses. Each string is an ingredient name consisting only of lowercase alphabetical characters and has a maximum length of 10. **Output** - Output a single integer, the minimum number of unique ingredients required to cover all the courses. **Example** Input ``` 3 pepper salt butter garlic salt garlic pepper ``` Output ``` 4 ``` In this example, the unique set of ingredients includes \\"pepper\\", \\"salt\\", \\"butter\\", and \\"garlic\\", totaling 4 unique ingredients to cover all courses.","solution":"def min_unique_ingredients(courses): unique_ingredients = set() for course in courses: ingredients = course.split() unique_ingredients.update(ingredients) return len(unique_ingredients)"},{"question":"You have an array of n integers and a target integer t. Your task is to find the number of contiguous subarrays (subarrays with consecutive elements) whose sum equals t. Input The first line contains integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), representing the elements of the array. The third line contains the target integer t (-109 ≤ t ≤ 109). Output Print the number of contiguous subarrays whose sum equals t. Examples Input 5 1 2 3 4 5 5 Output 2 Input 3 -1 1 0 0 Output 3 Note In the first example, the subarrays that sum to 5 are [2, 3] and [5]. In the second example, the subarrays that sum to 0 are [-1, 1], [1, -1], and [0].","solution":"def count_subarrays_with_sum(arr, target): This function returns the number of contiguous subarrays whose sum equals the target. from collections import defaultdict n = len(arr) current_sum = 0 count = 0 sum_dict = defaultdict(int) sum_dict[0] = 1 for num in arr: current_sum += num if current_sum - target in sum_dict: count += sum_dict[current_sum - target] sum_dict[current_sum] += 1 return count # Example usage arr = [1, 2, 3, 4, 5] target = 5 print(count_subarrays_with_sum(arr, target)) # Output: 2"},{"question":"Architect Anne is designing an innovative building that requires a specific type of structure with a certain ability to bear load, measured using load-bearing units (LBU). She has a supply of base modules, each with a fixed LBU capacity of 1. Anne can combine multiple base modules to create composite modules with varying LBU capacities according to these rules: 1. A composite module with capacity L can be made by connecting L individual base modules in series. The combined capacity then is equal to L. 2. Alternatively, two composite modules with capacities A and B connected in parallel will create a new composite module with capacity given by the formula ( frac{AB}{A+B} ). Your task is to determine the minimum number of base modules required to achieve a specific target LBU capacity. Input A single input line consisting of a positive integer n (1 ≤ n ≤ 10^18) representing the target LBU capacity. Output Print a single integer — the minimum number of base modules required to achieve the target capacity. Example Input 1 Output 1 Input 2 Output 2 Input 6 Output 5 Note In the first example, we need only one base module to achieve a capacity of 1 LBU. In the second example, connecting two base modules in series yields a capacity of 2 LBUs. In the third example, the optimal solution involves a sequence of parallel and series connections to efficiently use base modules and achieve a capacity of 6 LBUs. This could be done by connecting four modules in series to get a module with a 4 LBU capacity and another two modules to get a module with a 2 LBU capacity, which connected in parallel, follow the inverse addition rule to achieve a final composite module of exactly 6 LBU capacity.","solution":"def min_base_modules(n): Determine the minimum number of base modules required to achieve the target LBU capacity. if n == 1: return 1 # We perform a binary search for efficient calculation left, right = 1, n while left <= right: mid = (left + right) // 2 if (mid * (mid + 1)) // 2 >= n: right = mid - 1 else: left = mid + 1 return left"},{"question":"Your task is to write a program that finds the most frequent sum of paths in a binary tree. Given a binary tree, you need to calculate the sum of values on each root-to-leaf path and determine which sum appears the most frequently. Input: The first line contains an integer n, representing the number of nodes in the tree. The next n lines contain three integers v, l, and r, where v is the value of a node, l is the value of the left child (or -1 if there is no left child), and r is the value of the right child (or -1 if there is no right child). Output: Print the most frequent sum of root-to-leaf paths. If there is a tie, print the smallest sum. Constraints: 0 ≤ n ≤ 10^5 1 ≤ |v| ≤ 10^3 (absolute value of v) SAMPLE INPUT 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 SAMPLE OUTPUT 7 Explanation The binary tree is as follows: ``` 1 / 2 3 / 4 5 ``` The root-to-leaf paths and their sums are: - 1 -> 2 -> 4: sum is 7 - 1 -> 3 -> 5: sum is 9 The most frequent sum is 7 (as both path sums occur only once, the smallest sum is chosen).","solution":"from collections import defaultdict, deque class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_list): if not node_list: return None nodes = {} for v, l, r in node_list: if v not in nodes: nodes[v] = TreeNode(v) if l != -1 and l not in nodes: nodes[l] = TreeNode(l) if r != -1 and r not in nodes: nodes[r] = TreeNode(r) nodes[v].left = nodes.get(l) nodes[v].right = nodes.get(r) return nodes[node_list[0][0]] # return the root node def find_frequent_path_sum(n, node_list): if n == 0: return 0 # No nodes root = build_tree(node_list) sum_frequency = defaultdict(int) def dfs(node, current_sum): if not node: return current_sum += node.value if not node.left and not node.right: # Leaf node sum_frequency[current_sum] += 1 dfs(node.left, current_sum) dfs(node.right, current_sum) dfs(root, 0) most_frequent_sum = min(sum_frequency, key=lambda x: (-sum_frequency[x], x)) return most_frequent_sum"},{"question":"In a magical forest, there are n magical trees lined up in a row, each with a magical power that can be represented as an integer. The power of the i-th tree is represented as pi. The forest guardian has a special task for you: he wants to know the total magical power of a specific segment of the trees for a number of queries. Your task is to answer q queries where each query specifies a range of the trees using two integers l and r, and you need to return the sum of the magical powers of the trees from index l to index r inclusive. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of magical trees and the number of queries, respectively. The second line contains n integers p1, p2, ..., pn (|pi| ≤ 1,000) — the magical powers of the trees. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the segment for each query. Output For each query, print the sum of the magical powers of the trees in the specified range. Example Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15","solution":"def magical_powers(n, q, powers, queries): Compute the sum of magical powers for the specified range of trees. Args: n (int): Number of magical trees. q (int): Number of queries. powers (list of int): List of magical powers of the trees. queries (list of tuples): List of queries where each query is a tuple (l, r). Returns: list of int: The sum of magical powers for each query. # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + powers[i - 1] results = [] for l, r in queries: results.append(prefix_sum[r] - prefix_sum[l - 1]) return results"},{"question":"Given a list of words, your task is to group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all original letters exactly once. For example, the words \'listen\' and \'silent\' are anagrams of each other, as are \'evil\' and \'vile\'. Write a function that takes a list of strings and groups them into sets of anagrams. # Input Format - A single integer n, indicating the number of words in the list (0 <= n <= 1000). - Followed by n lines, with each line containing one word from the list. All words consist of lowercase English letters and are of length at most 100. # Output Format - You should output the anagrams line by line, each line containing a group of anagrams from the input, separated by spaces. The anagrams in each group and the groups themselves should be sorted lexicographically. # Example Input ``` 6 listen silent enlist eat tea ate ``` # Example Output ``` ate eat tea enlist listen silent ``` # Constraints - The output should maintain lexicographical order for both words in each group and the groups themselves. - Ignore any groups that do not contain at least two words. # Function Signature (Python) ```python def group_anagrams(n: int, words: List[str]) -> List[List[str]]: ``` # Explanation - The word \'listen\' can be rearranged into \'silent\', which is also in the list. Therefore, \'listen\' and \'silent\' should be grouped together. - Similarly, \'eat\', \'tea\', and \'ate\' are anagrams of each other and should be grouped together. - The output lists the anagram groups in lexicographical order: first \'ate eat tea\' and then \'enlist listen silent\'.","solution":"from typing import List from collections import defaultdict def group_anagrams(n: int, words: List[str]) -> List[List[str]]: anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) result = [] for anagram_group in anagram_map.values(): if len(anagram_group) > 1: result.append(sorted(anagram_group)) result.sort() return result def format_anagram_groups(anagram_groups: List[List[str]]) -> List[str]: return [\' \'.join(group) for group in anagram_groups]"},{"question":"A woman named Shreya is fascinated by grids and loves playing games on a 2D grid. One day, she invented a game where she places an object on one cell of the grid and wants to count the number of ways to move the object from the top-left corner to the bottom-right corner of an `n x n` grid. However, the object can only move right or down at any point in time. Your task is to help Shreya determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. Input The input consists of a single integer `n` (1 ≤ n ≤ 100), which represents the grid\'s size. Output Output a single integer which is the number of unique paths from the top-left corner to the bottom-right corner of the grid. SAMPLE INPUT 3 SAMPLE OUTPUT 6 Explanation For a 3x3 grid, the total unique paths are as follows: 1. Right, Right, Down, Down 2. Right, Down, Right, Down 3. Right, Down, Down, Right 4. Down, Right, Right, Down 5. Down, Right, Down, Right 6. Down, Down, Right, Right","solution":"def unique_paths(n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an n x n grid, where moves are only possible to the right or downward. # Create a 2D grid filled with 0\'s dp = [[0]*n for _ in range(n)] # Set the number of ways to reach any cell in the first row or column to 1 for i in range(n): dp[i][0] = 1 dp[0][i] = 1 # Use dynamic programming to fill the rest of the grid for i in range(1, n): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][n-1]"},{"question":"There is a large river flowing through a city. Several bridges have been built across the river to connect the two banks. Each bridge has a specific weight limit it can support, and the goal is to transport crates across the river with the heaviest possible weight without exceeding any bridge\'s weight limit. You are given `N` bridges, each with a weight limit `Wi`, and `M` crates, each with a weight `Cj`. You need to compute the maximum weight that can be transported by choosing any one of the crates while ensuring it does not exceed any bridge\'s weight limit. Input The first line consists of two integers, `N` and `M`, representing the number of bridges and the number of crates, respectively. The second line contains `N` integers, where the `i-th` integer represents the weight limit `Wi` of the `i-th` bridge. The third line contains `M` integers, where the `j-th` integer represents the weight `Cj` of the `j-th` crate. Output Output a single integer representing the maximum weight of the crate that can be transported across the river without exceeding any bridge\'s weight limit. If no crate can be transported, output 0. Constraints 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ Wi, Cj ≤ 10^9 Example Input: 3 4 10 15 20 5 8 10 12 Output: 10 Explanation - All bridges have weight limits of 10, 15, and 20. - The available crates have weights of 5, 8, 10, and 12. - The heaviest crate that does not exceed any bridge\'s weight limit is 10. Thus, the output is 10.","solution":"def max_transportable_weight(N, M, bridge_limits, crate_weights): Returns the maximum weight of the crate that can be transported across the river without exceeding any bridge\'s weight limit. If no crate can be transported, return 0. :param N: int, number of bridges :param M: int, number of crates :param bridge_limits: list of int, weight limits of the bridges :param crate_weights: list of int, weights of the crates :return: int, maximum transportable crate weight if N == 0 or M == 0: return 0 min_weight_limit = min(bridge_limits) max_crate_weight = max(filter(lambda w: w <= min_weight_limit, crate_weights), default=0) return max_crate_weight # Example usage input_data = (3, 4, [10, 15, 20], [5, 8, 10, 12]) print(max_transportable_weight(*input_data)) # Output: 10"},{"question":"problem You are a software engineer working on optimizing a railway system database. The railway system consists of multiple stations connected by train lines. Each station has multiple tracks, each with a specific travel time. Given a set of stations and tracks, your goal is to determine the minimum time required to travel from a specified starting station to a destination station. Your program should take the number of stations, number of tracks, the travel times for each track, and the starting and destination stations as input, and then output the minimum travel time. If there is no path between the starting and destination stations, your program should return -1. Input format: The first line contains two integers N and M, where N represents the number of stations (1 ≤ N ≤ 100,000) and M represents the number of tracks (0 ≤ M ≤ 200,000). The next M lines each contain three integers: u, v, and t, where u and v are the station numbers connected by a track, and t (1 ≤ t ≤ 1,000) is the travel time between the two stations. The final line contains two integers: S and D, where S is the starting station and D is the destination station (1 ≤ S, D ≤ N). Output format: Output a single integer representing the minimum travel time from station S to station D. If there is no path between S and D, output -1. Example: Input: 5 7 1 2 4 1 3 2 2 4 7 3 4 1 3 5 3 4 5 2 2 3 5 1 5 Output: 6 Explanation of example: The minimum travel time from station 1 to station 5 can be achieved by taking the following path: 1 -> 3 (2 units of time) and 3 -> 5 (3 units of time), totaling 5 units of time.","solution":"import heapq def dijkstra(n, edges, start, end): Determines the minimum travel time from station start to station end using Dijkstra\'s algorithm. :param n: The number of stations. :param edges: A list of tuples (u, v, t) representing the tracks between stations u and v with time t. :param start: The starting station. :param end: The destination station. :return: The minimum travel time from start to end, or -1 if no path exists. graph = [[] for _ in range(n + 1)] for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) min_heap = [(0, start)] # (cost, station) min_time = {i: float(\'inf\') for i in range(1, n + 1)} min_time[start] = 0 while min_heap: current_time, u = heapq.heappop(min_heap) if u == end: return current_time if current_time > min_time[u]: continue for v, time in graph[u]: total_time = current_time + time if total_time < min_time[v]: min_time[v] = total_time heapq.heappush(min_heap, (total_time, v)) return -1 def find_minimum_travel_time(n, m, tracks, s, d): return dijkstra(n, tracks, s, d)"},{"question":"In a faraway land, Jake works at a factory that creates color palettes. Each palette consists of a set of colored tiles. Each tile is represented by a unique integer value that denotes its color. To organize the palettes, Jake needs to find the most diverse palette. A palette is considered more diverse if it contains a wider range of colors. The diversity of a palette can be measured as the difference between the maximum and minimum color values in that palette. Jake has received N palettes, each with a different number of tiles. For each palette, Jake must determine the diversity and identify the palette with the maximum diversity. Given N palettes, help Jake find the maximum diversity among these palettes. Input Format: The first line contains a single integer N, the number of palettes. The following N sections will each start with an integer ki, the number of tiles in the i-th palette, followed by ki integers representing the colors of the tiles. Output Format: A single integer representing the maximum diversity among the given palettes. Constraints: 1 ≤ N ≤ 100 1 ≤ ki ≤ 100 0 ≤ tile color value ≤ 10^6 SAMPLE INPUT 3 4 1 2 3 4 5 10 20 30 40 50 3 100 200 300 SAMPLE OUTPUT 200 Explanation: - The first palette has colors [1, 2, 3, 4], so the diversity is 4 - 1 = 3. - The second palette has colors [10, 20, 30, 40, 50], so the diversity is 50 - 10 = 40. - The third palette has colors [100, 200, 300], so the diversity is 300 - 100 = 200. Among these, the third palette has the maximum diversity of 200. Therefore, the output is 200.","solution":"def find_maximum_diversity_palettes(N, palettes): Function to find the palette with the maximum diversity. :param N: int - Number of palettes :param palettes: List of lists - Each list contains the color values in a palette :return: int - The maximum diversity among the given palettes max_diversity = 0 for palette in palettes: diversity = max(palette) - min(palette) if diversity > max_diversity: max_diversity = diversity return max_diversity"},{"question":"You are given an array of n integers. You need to find the smallest power of 2 that is greater than or equal to the sum of the integers in the array. Input The first line of input contains one integer n (1 ≤ n ≤ 100 000): the number of elements in the array. The next line of input contains n integers a_1, a_2, ..., a_n (-1 000 000 ≤ a_i ≤ 1 000 000): the array elements. Output Print one integer: the smallest power of 2 that is greater than or equal to the sum of the array elements. Examples Input 3 1 2 3 Output 8 Input 5 -1 -2 -3 -4 -5 Output 1","solution":"def smallest_power_of_2_greater_than_sum(n, arr): Finds the smallest power of 2 that is greater than or equal to the sum of the integers in the array. Parameters: n (int): Number of elements in the array arr (list of int): The array of integers Returns: int: The smallest power of 2 greater than or equal to the sum of the array total_sum = sum(arr) power = 1 while power < total_sum: power *= 2 return power"},{"question":"You are given a large integer m and an integer k. Your task is to determine the last non-zero digit of m^k. Input The first line contains a single integer m (1 ≤ m ≤ 10^6). The second line contains a single integer k (0 ≤ k ≤ 10^6). Output Print a single integer - the last non-zero digit of m raised to the power of k. Examples Input 7 3 Output 3 Input 531 2 Output 1 Note In the first sample, 7^3 = 343, so the last non-zero digit is 3. In the second sample, 531^2 = 281961, so the last non-zero digit is 1. Operation x^y means raising x to the power y.","solution":"def last_non_zero_digit(m, k): def last_digit_non_zero(n): while n % 10 == 0: n //= 10 return n % 10 if k == 0: return 1 result = 1 for _ in range(k): result *= m result = last_digit_non_zero(result) return result"},{"question":"A painter has a canvas with a grid of cells, each cell initially colored with either red (R) or blue (B). The painter wants to create a pattern where no two adjacent cells (horizontally or vertically) have the same color. To achieve this, the painter can change the color of a cell from red to blue or from blue to red. Given the initial state of the canvas, determine the minimum number of color changes that the painter needs to make to achieve the desired pattern. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the number of rows and columns of the canvas respectively. The next N lines describe the grid, each containing a string of length M consisting of characters \'R\' and \'B\'. Output For each test case, output a single line containing the minimum number of color changes required to achieve the desired pattern. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 Example Input: 2 3 3 RRB BRB RRB 2 2 RR BB Output: 4 2 Explanation Example case 1. One possible desired pattern is: RBR BRB RBR To achieve this, the painter needs to change 4 cells: RRB -> RBR BRB -> BRB (no change) RRB -> RBR Example case 2. The desired pattern could be: RB BR The painter needs to change 2 cells: RR -> RB BB -> BR","solution":"def min_color_changes(T, test_cases): results = [] def calculate_changes(grid, pattern1, pattern2): changes1 = changes2 = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] != pattern1[i % 2][j % 2]: changes1 += 1 if grid[i][j] != pattern2[i % 2][j % 2]: changes2 += 1 return min(changes1, changes2) for case in test_cases: N, M, grid = case pattern1 = [[\'R\', \'B\'], [\'B\', \'R\']] pattern2 = [[\'B\', \'R\'], [\'R\', \'B\']] min_changes = calculate_changes(grid, pattern1, pattern2) results.append(min_changes) return results # Function to parse input and call the main function def solve(grid_data): T = int(grid_data[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, grid_data[index].split()) grid = grid_data[index + 1 : index + N + 1] test_cases.append((N, M, grid)) index += N + 1 results = min_color_changes(T, test_cases) return results"},{"question":"In a distant land, there is a magical forest with n trees positioned in a straight line. Each tree can bear exactly one type of magical fruit. These fruits, however, are of varied magical potency, represented by a numerical value associated with the tree. The forest warden wants to build a magical potion that requires fruit from contiguous trees such that the sum of the magical potency of the fruits is exactly equal to a given value k. Your task is to help the warden determine the length of the shortest segment of contiguous trees (if any) whose magical fruit potency sums up to exactly k. Input The first line contains the integer n (1 ≤ n ≤ 100 000) — the number of trees in the forest. The second line contains n integers separated by spaces, representing the magical potency of the fruit from each tree. The third line contains an integer k (1 ≤ k ≤ 10^9) — the exact sum of potency required to build the magical potion. Output Print the length of the shortest segment of contiguous trees whose magical fruit potency sums up to k. If there is no such segment, print -1. Examples Input 5 1 2 3 4 5 9 Output 2 Input 4 2 3 1 5 8 Output -1 Input 6 1 1 1 1 1 1 3 Output 3 Note In the first example, the shortest segment that sums to 9 is the segment containing the third and the fourth trees (3 + 6 = 9), which includes 2 trees. In the second example, there is no contiguous segment of trees whose magical fruit potency sums up to 8. In the third example, one possible segment is from the first tree to the third tree, inclusive (1 + 1 + 1 = 3), which includes 3 trees.","solution":"def shortest_segment_length(n, potencies, k): Given the number of trees n, a list of their associated potencies, and a target sum k, this function returns the length of the shortest segment of contiguous trees whose collective potency sums to k. start = 0 current_sum = 0 min_length = float(\'inf\') for end in range(n): current_sum += potencies[end] while current_sum >= k: if current_sum == k: min_length = min(min_length, end - start + 1) current_sum -= potencies[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Hannah is practicing her dance routine. She has a sequence of dance steps that she needs to perform. Each step has a duration in seconds and a type: either \\"hold\\" or \\"move\\". If the step is of type \\"hold\\", Hannah must stand still for the duration of the step. If the step is of type \\"move\\", Hannah must move around. Due to the choreography, she cannot stand still for more than `k` consecutive seconds. Your task is to determine if there is any rearrangement of the steps such that Hannah never stands still for more than `k` consecutive seconds. Input The first line contains an integer `n` (1 ≤ n ≤ 15) — the number of dance steps. The second line contains an integer `k` (1 ≤ k ≤ 120) — the maximum allowed consecutive \'hold\' duration. Each of the next `n` lines describes a dance step with an integer `t_i` (1 ≤ t_i ≤ 60) — the duration of the step in seconds, followed by a string `s_i` which is either \\"hold\\" or \\"move\\". Output If it is possible to rearrange the steps such that Hannah never stands still for more than `k` consecutive seconds, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Examples Input 3 5 3 hold 6 move 1 hold Output POSSIBLE Input 4 10 3 hold 4 hold 5 hold 6 move Output IMPOSSIBLE Note In the first example, Hannah can rearrange the steps such that she performs the \\"move\\" step between the two \\"hold\\" steps, allowing her to never stand still for more than 5 consecutive seconds. In the second example, it is impossible to rearrange the steps to satisfy the condition because two of the hold durations add up to more than the allowed maximum without enough breaks between them.","solution":"def is_possible_to_rearrange(n, k, steps): # Separate the steps into hold and move hold_steps = [t for t, s in steps if s == \\"hold\\"] move_steps = [t for t, s in steps if s == \\"move\\"] # Sum of all hold times total_hold_time = sum(hold_steps) # If there\'s no move step and total hold time exceeds k, it\'s impossible if not move_steps and total_hold_time > k: return \\"IMPOSSIBLE\\" # If the longest hold step is greater than k, it\'s immediately impossible if hold_steps and max(hold_steps) > k: return \\"IMPOSSIBLE\\" # If all hold steps together exceed k and there are enough move steps to separate them, it\'s possible if len(move_steps) >= len(hold_steps) - 1: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"Veena has a passion for antique jewelry, and during her recent visit to a historical market, she came across a unique necklace formed by beads of various colors. The necklace can be represented as a string consisting of lowercase English letters, where each letter denotes a specific color. However, Veena noticed that her necklace seems to be a part of a set and believes there might be another necklace out there that is a subsequence of her necklace but is equally colorful. She wants to find out if it\'s possible to form this colorful necklace that would contain at least \'k\' distinct colors. You have to help Veena by checking if there exists a subsequence in her necklace that contains at least \'k\' distinct colors. Formally, you are given a string `s` representing the necklace and an integer `k`. You need to determine if there\'s a subsequence in `s` that contains at least `k` distinct characters. Input The first line contains the string `s` (1 ≤ |s| ≤ 100000) consisting of lowercase English letters. The second line contains a single integer `k` (1 ≤ k ≤ 26). Output Print \\"YES\\" (without quotes) if there exists a subsequence in the necklace that contains at least `k` distinct colors. Otherwise, print \\"NO\\" (without quotes). Examples Input abracadabra 4 Output YES Input aabbcc 4 Output NO Note In the first sample, the string \\"abracadabra\\" contains the distinct characters \'a\', \'b\', \'r\', \'c\', \'d\', which amounts to 5 distinct colors. Since 5 ≥ 4, the output is \\"YES\\". In the second sample, the string \\"aabbcc\\" contains only 3 distinct characters \'a\', \'b\', and \'c\'. Since 3 < 4, the output is \\"NO\\".","solution":"def has_k_distinct_colors(s, k): Determines if there exists a subsequence in the string `s` that contains at least `k` distinct characters. Params: - s (str): The input string representing the necklace. - k (int): The minimum number of distinct colors required. Returns: - str: \\"YES\\" if there exists such a subsequence, \\"NO\\" otherwise. # Use a set to count distinct characters in the string s distinct_colors = set(s) # Check if the number of distinct colors is at least k if len(distinct_colors) >= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Problem You are given a list of N strings. Each of these strings contains lowercase letters and/or digits. You need to determine if any two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function that returns `True` if there are two strings in the given list that are anagrams of each other, otherwise returns `False`. Constraints: - Each string contains only lowercase letters and digits. - The maximum length of a string is 100. - The number of strings (N) is between 2 and 10^4. # Input The input is given in the following format: ``` N string1 string2 ... stringN ``` # Output Return `True` if there are any two strings in the list which are anagrams of each other, otherwise return `False`. # Examples: Input ``` 5 abc bca xyz yxz 123 ``` Output ``` True ``` Input ``` 3 hello world python ``` Output ``` False ``` Input ``` 4 test sett sett stet ``` Output ``` True ``` # Coding Guidelines Implement a function called `are_anagrams` which takes an integer N and a list of N strings as input and returns `True` or `False`. Use the signature provided below: ```python def are_anagrams(N: int, strings: List[str]) -> bool: pass ``` **Note:** Optimize your solution to be efficient for large inputs.","solution":"from typing import List def are_anagrams(N: int, strings: List[str]) -> bool: Returns True if there are two strings in the list that are anagrams of each other, otherwise returns False. seen = {} for s in strings: sorted_s = \'\'.join(sorted(s)) if sorted_s in seen: return True seen[sorted_s] = s return False"},{"question":"Alex is working on a string compression problem. He wants to compress a given string in a way that repeated characters are represented as a single character followed by the count of those repeated characters. For example, the string \\"aaabccddd\\" should be compressed to \\"a3b1c2d3\\". Write a program that, given a string, compresses it using this pattern. If the compressed string is not shorter than the original string, the original string should be returned. The input string will only contain lowercase alphabetical characters and will have a length between 1 and 100. Input A single line containing the original string. Output A single line containing the compressed string or the original string based on the condition mentioned above. Examples Input aabcccccaaa Output a2b1c5a3 Input abc Output abc Note In the first example, the string \\"aabcccccaaa\\" is compressed to \\"a2b1c5a3\\", which is shorter than the original string. In the second example, the string \\"abc\\" cannot be compressed to a shorter string, so the original string is returned.","solution":"def compress_string(s): Compresses the string by representing repeated characters with a single character followed by the count of its occurrences. Returns the compressed string if it is shorter than the original string, otherwise returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"In a competitive programming event, there is a need to schedule a series of n events, each happening over a single day. Each event can be described by its start time and end time. Some of these events might overlap, meaning participants cannot attend overlapping events simultaneously. Your task is to determine the maximum number of non-overlapping events that a single participant can attend in a day. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of events. The next n lines each contain two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^6) — the start time and end time of the i-th event. Output Print one integer — the maximum number of non-overlapping events that a participant can attend. Examples Input 5 1 4 2 5 3 6 4 7 5 8 Output 2 Input 3 1 2 2 3 3 4 Output 3 Note For the first example, the maximum number of non-overlapping events is 2, which can be achieved by attending either the events (1, 4) and (5, 8) or the events (2, 5) and (5, 8). For the second example, all events are non-overlapping, so the participant can attend all 3 events. [END]","solution":"def max_non_overlapping_events(n, events): Determines the maximum number of non-overlapping events one can attend in a day. Parameters: n (int): Number of events events (list of tuples): Each tuple contains the start time and end time of an event Returns: int: Maximum number of non-overlapping events # Sort the events based on their end times events.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"A sequence of integers is called balanced if the sum of its odd-indexed elements equals the sum of its even-indexed elements (considering 1-based indexing). You are given a sequence of positive integers and your task is to determine if it can be rearranged to form a balanced sequence. Input The first line contains an integer n (2 ≤ n ≤ 2000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Output Print \\"YES\\" if the sequence can be rearranged to form a balanced sequence; otherwise, print \\"NO\\". Example Input 6 4 1 7 2 5 1 Output YES Note In the example, the sequence can be rearranged as [4, 1, 7, 5, 1, 2] which is balanced since the sum of elements at odd positions (4 + 7 + 1 = 12) equals the sum of elements at even positions (1 + 5 + 2 = 8).","solution":"def can_be_balanced_sequence(n, sequence): Determine if the sequence can be rearranged to form a balanced sequence. Args: n (int): Length of the sequence. sequence (list of int): List of positive integers of length n. Returns: str: \\"YES\\" if the sequence can be rearranged to be balanced, otherwise \\"NO\\". total_sum = sum(sequence) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 current_sums = {0} for num in sequence: new_sums = set() for s in current_sums: new_sum = s + num if new_sum == target: return \\"YES\\" new_sums.add(new_sum) current_sums.update(new_sums) return \\"NO\\""},{"question":"Alex wants to create a new playlist for his upcoming road trip. He has a collection of songs, each with a unique name and a duration. Alex also has a specific duration that he wants his playlist to not exceed. Write a program to help Alex create a playlist that maximizes the number of songs included without exceeding the given duration. If there are multiple possible playlists with the same number of songs, choose the one with the minimal total duration. If there are still multiple options, choose the lexicographically smallest list of song names. Input - The first line contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 10000), where n is the number of songs and T is the maximum duration for the playlist. - The next n lines each contain a string s_i (the name of the i-th song, 1 ≤ |s_i| ≤ 50) and an integer d_i (1 ≤ d_i ≤ 10000), the duration of the i-th song. Output Print the playlist in the order of song names, each on a new line. If there are no songs that can fit in the given duration, print an empty string. Examples Input 5 20 song1 5 song2 6 song3 7 song4 15 song5 10 Output song1 song2 song3 Input 4 10 alpha 3 beta 4 gamma 5 delta 6 Output alpha beta","solution":"from typing import List, Tuple def create_playlist(n: int, T: int, songs: List[Tuple[str, int]]) -> List[str]: Creates a playlist maximizing the number of songs without exceeding the duration T. If multiple playlists have the same number of songs, choose the one with the minimal total duration. If there are still multiple options, choose the lexicographically smallest list of song names. from itertools import combinations songs.sort() # Sort lexicographically by song name initially best_playlist = [] max_songs_count = 0 min_duration = float(\'inf\') for i in range(1, n + 1): for combo in combinations(songs, i): total_duration = sum(song[1] for song in combo) if total_duration <= T: if i > max_songs_count or (i == max_songs_count and total_duration < min_duration): max_songs_count = i min_duration = total_duration best_playlist = list(combo) best_playlist.sort() # Ensure lexicographically smallest order return [song[0] for song in best_playlist]"},{"question":"In a small town, there is a unique tradition of forming a chain of handshakes during a festival. Each person in the town can only shake hands with two people, forming a closed circle where each hand is only used once. The task is to determine how the persons can form such a circle if each person witnesses who they can shake hands with. Input The input consists of a single integer n (2 ≤ n ≤ 1000) — the number of people in the town, followed by n lines describing the pairs of people who can shake hands. Each line contains two distinct integers a and b (1 ≤ a, b ≤ n), where a and b are the indices of the people that can shake hands. Output If it is possible to form a closed circle of handshakes, print \\"YES\\" followed by the sequence of people forming the circle. If it is not possible, print \\"NO\\". Example Input 4 1 2 2 3 3 4 4 1 Output YES 1 2 3 4 Input 4 1 2 2 3 3 1 4 1 Output NO Note In the first example, the people can form a circle of handshakes as: 1 shakes hands with 2, 2 shakes hands with 3, 3 shakes hands with 4, and 4 shakes hands with 1, forming a closed circle. In the second example, it is impossible to form a closed circle of handshakes since person 4 can only shake hands with person 1, which already is in another handshake.","solution":"def can_form_circle(num_people, handshakes): from collections import defaultdict, deque # Create an adjacency list for recording the handshake pairs graph = defaultdict(list) for a, b in handshakes: graph[a].append(b) graph[b].append(a) # Check if every person can shake hands with exactly 2 people for key, value in graph.items(): if len(value) != 2: return \\"NO\\" # Start forming the circle start = list(graph.keys())[0] circle = [] visited = set() current = start while True: if current in visited: break visited.add(current) circle.append(current) for neighbor in graph[current]: if neighbor not in visited: current = neighbor break if len(visited) == num_people: return \\"YESn\\" + \\" \\".join(map(str, circle)) else: return \\"NO\\""},{"question":"Alice is hosting a treasure hunt at her home. She has n locations numbered from 1 to n and some clues to find the treasure. Each clue is a pair of locations (i, j) meaning the clue at location i will lead to location j. Alice wants to ensure that each location has at most one clue leading to another location and no location has more than one clue pointing to it. However, Alice notices that some clues may form a cycle, making it impossible to reach all locations starting from location 1. To make the treasure hunt enjoyable, she wants to remove the minimum number of clues such that no cycles remain, and the treasure hunt can be completed without repetition. Your task is to help Alice determine the minimum number of clues that need to be removed to ensure no cycles exist. Input The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of locations. The second line contains an integer m (0 ≤ m ≤ 2·105) — the number of clues. Each of the next m lines contains two integers i and j (1 ≤ i, j ≤ n) representing a clue from location i to location j. Output Print the minimum number of clues that need to be removed to ensure that no cycles exist. Examples Input 4 4 1 2 2 3 3 4 4 2 Output 1 Input 5 3 1 2 2 3 3 4 Output 0 Note In the first example, removing the clue from location 4 to location 2 will break the cycle and result in a valid treasure hunt route. In the second example, there are no cycles initially, so no clues need to be removed.","solution":"from collections import defaultdict def min_removal_to_acyclic(n, m, edges): This function returns the minimum number of edges to remove to ensure no cycles exist in the graph defined by `n` nodes and `edges` connections. Parameters: n (int): number of locations m (int): number of clues edges (List[Tuple[int, int]]): list of edges representing the clues Returns: int: minimum number of edges to remove to remove cycles # Step 1: Represent the graph using adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Step 2: Detect cycles using DFS and a stack for the current path def dfs(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False visited = [False] * (n + 1) rec_stack = [False] * (n + 1) cycles = 0 for node in range(1, n + 1): if not visited[node]: if dfs(node, visited, rec_stack): cycles += 1 return cycles"},{"question":"Vera loves counting strings that consist only of vowels (a, e, i, o, u). She enjoys creating different combinations and counting them. You have been asked to help Vera determine how many strings of length n can be formed using only vowels, such that no two vowels in the string are the same. Given an integer n, calculate the number of possible strings of length n that can be formed under these conditions. Input The input consists of a single integer n (1 ≤ n ≤ 5). Output Output a single integer — the number of possible strings of length n that can be formed with no repeating vowels. Examples Input 2 Output 20 Input 3 Output 60 Note In the first example, the length of the strings is 2. Since there are 5 vowels, we can choose the first vowel in 5 ways and the second vowel in 4 remaining ways, resulting in 5 * 4 = 20 possible strings. Similarly, for a string length of 3, we can choose the first vowel in 5 ways, the second vowel in 4 ways, and the third vowel in 3 ways, giving us 5 * 4 * 3 = 60 possible strings.","solution":"import math def count_vowel_strings(n): Returns the number of strings of length n that can be formed using only vowels (a, e, i, o, u) without repeating any vowels. :param n: length of the string (1 ≤ n ≤ 5) :return: number of possible strings if not (1 <= n <= 5): raise ValueError(\\"n must be between 1 and 5\\") vowels = 5 return math.perm(vowels, n)"},{"question":"In a fictional city, there is a unique vending machine that dispenses a combination of snacks based on the input sequence. Each sequence is a string composed of characters \'A\', \'B\', and \'C\' where: - \'A\' increases the count of snack type 1, - \'B\' increases the count of snack type 2, - \'C\' increases the count of snack type 3. However, the vending machine has a quirk: it dispenses all the snacks only when each type of snack has been chosen at least once in the input sequence. If any of the snack types is missing in the sequence, it dispenses nothing. Write a program to determine whether the vending machine will dispense any snacks for each input sequence. Input: The first line of the input contains an integer T denoting the number of test cases to follow. Each test case is a single line containing a string S. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Output: For each test case output a single line, containing \\"YES\\" if the vending machine dispenses the snacks, and \\"NO\\" otherwise. SAMPLE INPUT 3 ABAC BBB AABBCC SAMPLE OUTPUT YES NO YES Explanation Test case 1: \'ABAC\' contains at least one \'A\', one \'B\', and one \'C\', so the vending machine will dispense the snacks. Test case 2: \'BBB\' does not contain \'A\' or \'C\', so the vending machine will not dispense the snacks. Test case 3: \'AABBCC\' contains at least one \'A\', one \'B\', and one \'C\', so the vending machine will dispense the snacks.","solution":"def will_dispense_snacks(test_cases): Determines if the vending machine will dispense snacks based on test cases. :param test_cases: List of strings representing the input sequences. :return: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: if \'A\' in case and \'B\' in case and \'C\' in case: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is organizing a competition where `n` participants will compete in a series of `m` matches. Each match involves exactly one participant competing alone. To make the competition more interesting, after each match, several queries regarding the performance of participants are answered. The competition\'s result structure is as follows: 1. Each match increments the score of the participant who competed in that match. 2. The score of a participant is simply the count of matches they have competed in. Q queries are about to happen. They are of two types: 1. `1 p`: Record participation of the p-th participant in a new match. 2. `2 p`: Output the current score of the p-th participant. Your task is to help Alice track the matches and respond to the queries. Input The first line contains two integers n and Q (1 ≤ n, Q ≤ 200,000) — the number of participants and the number of queries, respectively. The next Q lines describe the queries. The i-th of these lines starts with an integer typei (1 or 2) — the type of the i-th query. If typei = 1, then it is followed by an integer pi (1 ≤ pi ≤ n), indicating that the pi-th participant competed in a new match. If typei = 2, then it is followed by an integer pi (1 ≤ pi ≤ n), indicating that the current score of the pi-th participant is requested. Output For each query of type 2, print a single integer indicating the current score of the participant p. Example Input 5 7 1 3 1 1 1 2 2 2 1 2 2 2 2 3 Output 1 2 1 Explanation 1. Participant 3 competes in a match (their score is now 1). 2. Participant 1 competes in a match (their score is now 1). 3. Participant 2 competes in a match (their score is now 1). 4. Query asks for the score of participant 2, which is 1. 5. Participant 2 competes in another match (their score is now 2). 6. Query asks for the score of participant 2, which is 2. 7. Query asks for the score of participant 3, which is 1.","solution":"def competition_tracker(n, Q, queries): # Initialize scores for all participants to zero scores = [0] * (n + 1) results = [] for query in queries: typei, pi = query if typei == 1: # Record participation scores[pi] += 1 elif typei == 2: # Output the current score results.append(scores[pi]) return results"},{"question":"You are given an array of integers and a series of queries. Each query provides a pair of numbers (L, R), and you are required to find the sum of the subarray that lies between these indices, inclusive. The challenge is that the input array might undergo updates; some queries will instruct you to update an index of the array with a new value. There are two types of queries: 1. `1 L R` - Calculate and print the sum of elements in the subarray from index L to index R (1-based indices). 2. `2 X V` - Update the element at index X to the new value V (1-based index). Given the nature of the queries, you need a solution that efficiently processes both types of queries, even for large arrays and a high number of queries. Input The first line contains two integers, `n` and `q` (1 ≤ n, q ≤ 10^5), where `n` is the size of the array and `q` is the number of queries. The second line contains `n` space-separated integers representing the initial elements of the array. Each of the next `q` lines contains a query of one of the two types described above. Output For each query of the first type (`1 L R`), print the sum of the subarray from index L to index R on a new line. Examples Input ``` 5 6 1 2 3 4 5 1 1 3 2 2 10 1 1 3 2 3 15 1 1 5 1 3 4 ``` Output ``` 6 14 33 19 ``` Explanation In the example, the initial array is `[1, 2, 3, 4, 5]`. The queries and their results are as follows: 1. `1 1 3` - Sum of the subarray from index 1 to 3 is `1+2+3 = 6`. 2. `2 2 10` - Update index 2 to 10, so the array becomes `[1, 10, 3, 4, 5]`. 3. `1 1 3` - Sum of the subarray from index 1 to 3 is `1+10+3 = 14`. 4. `2 3 15` - Update index 3 to 15, so the array becomes `[1, 10, 15, 4, 5]`. 5. `1 1 5` - Sum of the subarray from index 1 to 5 is `1+10+15+4+5 = 35`. 6. `1 3 4` - Sum of the subarray from index 3 to 4 is `15+4 = 19`.","solution":"class ArrayManipulator: def __init__(self, array): self.array = array def range_sum(self, L, R): Returns the sum of the subarray from index L to index R (1-based). return sum(self.array[L-1:R]) def update_value(self, X, V): Updates the element at index X (1-based) to the new value V. self.array[X-1] = V # Example usage: # obj = ArrayManipulator([1, 2, 3, 4, 5]) # print(obj.range_sum(1, 3)) # Should return 6 # obj.update_value(2, 10) # print(obj.range_sum(1, 3)) # Should return 14"},{"question":"In a certain company, a team collaboration tool logs the actions taken by team members on various tasks. Each action is timestamped and recorded with the task ID it pertains to. Actions can be \'create\', \'update\', or \'delete\'. Only a task with the action \'create\' is considered valid. If a task is created, updated, and then deleted, it is no longer valid. You are writing a function to determine the current status of all tasks after processing a sequence of actions. The function should return a list of valid task IDs in the order they were created, excluding any that were subsequently deleted. Input The first line of the input contains an integer n (1 ≤ n ≤ 200,000) — the number of actions. The next n lines each contain a string s and an integer t, where s is one of \\"create\\", \\"update\\", or \\"delete\\", and t is an integer representing the task ID. Output Output the list of task IDs that are currently valid in the order they were created. If no task is valid, output an empty list. Examples Input 5 create 1 update 1 create 2 delete 1 create 3 Output 2 3 Input 4 create 1 delete 1 create 2 delete 2 Output \'\' (an empty line representing no valid tasks) Note In the first sample, task 1 is created and updated, but then deleted, so it is not valid. Task 2 is created and remains valid. Task 3 is created and remains valid. Hence, the output is 2 and 3. In the second sample, all created tasks are subsequently deleted, so no task is valid. Hence, the output is an empty list.","solution":"def get_valid_task_ids(actions): Determines the current status of all tasks after processing a sequence of actions. Args: actions (list of tuples): A list where each element is a tuple containing a string (action) and an int (task ID). Returns: list: A list of valid task IDs in the order they were created. created_tasks = {} valid_tasks = [] for action, task_id in actions: if action == \'create\': created_tasks[task_id] = True valid_tasks.append(task_id) elif action == \'delete\': if task_id in created_tasks: created_tasks[task_id] = False return [task_id for task_id in valid_tasks if created_tasks[task_id]] # Sample usage n = 5 actions = [ (\'create\', 1), (\'update\', 1), (\'create\', 2), (\'delete\', 1), (\'create\', 3) ] print(get_valid_task_ids(actions)) # Output should be [2, 3]"},{"question":"In a city, there are n roads, each connecting two different intersections. The n roads form m loops. Each loop is defined as a set of roads which form a closed path. A similar city is represented by an undirected graph with n edges, and m circuits (a circuit is a path which starts and ends at the same vertex without repeating an edge). Your task is to determine the number of different intersections in the city. Each intersection is connected by at least one road to another intersection. It is guaranteed that the graph representing the city is connected (i.e., every pair of vertices is connected by some path). Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n-1) which represent the number of roads and the number of loops. The following n lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a road between intersection u and intersection v. All roads are bidirectional. Output Print a single integer — the number of different intersections in the city. Examples Input 3 1 1 2 2 3 3 1 Output 3 Input 5 2 1 2 2 3 3 4 4 5 5 1 Output 5","solution":"def count_intersections(n, m, roads): Returns the number of different intersections in the city. Parameters: n (int): Number of roads m (int): Number of loops roads (list): List of tuples representing roads (u, v) Returns: int: Number of intersections intersections = set() for u, v in roads: intersections.add(u) intersections.add(v) return len(intersections)"},{"question":"A company is organizing a coding challenge and needs to distribute invitation codes to participants. Each invitation code is a unique alphanumeric string. The company has a list of potential candidates and the length of the required invitation codes. You need to generate the invitation codes in such a way that: 1. Each code is unique. 2. Each code consists of uppercase English letters and digits only. 3. All codes are exactly the required length. Ensure that the generated codes are unique and cover the requested length. Input: The first line contains an integer T (1 ≤ T ≤ 10) - the number of test cases. Each of the next T lines contains an integer N (1 ≤ N ≤ 10^5) - the number of invitation codes needed, and an integer L (1 ≤ L ≤ 20) - the length of each invitation code. Output: For each test case, print \\"Possible\\" if you can generate N unique codes of length L from the given set of allowed characters. Print \\"Impossible\\" otherwise. Example: Input: 2 3 5 1000 6 Output: Possible Possible Note: In the first test case, you need 3 unique codes of length 5. This is possible, for example, by generating codes like \\"ABCDE\\", \\"12345\\", \\"1A2B3\\". In the second test case, you need 1000 unique codes of length 6. Given the large number of permitted characters (36 possibilities per character position), it is possible to generate this many unique strings of the required length.","solution":"import string import random def can_generate_codes(T, test_cases): results = [] for i in range(T): N, L = test_cases[i] if N <= 36**L: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Alex loves playing with strings and experimenting with different character distributions. One day, he encountered a problem where he needed to rearrange a string such that no two adjacent characters are the same. If multiple solutions are possible, any rearrangement is valid. If it is impossible to perform such a rearrangement, output \\"IMPOSSIBLE\\". Input The input will be a single string s, consisting of lowercase English letters (1 ≤ |s| ≤ 100). Output Print a rearranged string such that no two adjacent characters are the same, or \\"IMPOSSIBLE\\" if no such rearrangement exists. Examples Input aab Output aba Input aaab Output IMPOSSIBLE","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges string s such that no two adjacent characters are the same. If not possible, returns \\"IMPOSSIBLE\\". if not s: return \\"IMPOSSIBLE\\" freq_counter = Counter(s) max_freq = max(freq_counter.values()) if max_freq > (len(s) + 1) // 2: return \\"IMPOSSIBLE\\" max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_char and -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 return \'\'.join(result)"},{"question":"You are developing a new search engine feature and you need to process and sort search queries based on certain criteria. Each query contains multiple words separated by spaces, and you need to sort the words within each query in alphabetical (lexicographical) order. Your task is to write a function that takes a list of search queries, sorts the words within each query, and returns a list of processed queries. Input - The first line of input contains an integer n (1 ≤ n ≤ 100) – the number of search queries. - The following n lines each contain one query, consisting of multiple words separated by spaces. Each query will contain at least one word, and the total length of each query will not exceed 1000 characters. Output - Output n lines, each containing a single query with the words sorted in alphabetical order. Example Input 3 search engine optimization advanced algorithms design data structures and complexity Output engine optimization search advanced algorithms design and complexity data structures Additional Constraints - All words will consist of lowercase English letters only. - Each query will contain no more than 100 distinct words. Function Signature ```python def sort_queries(queries: List[str]) -> List[str]: pass ```","solution":"from typing import List def sort_queries(queries: List[str]) -> List[str]: Sorts the words within each query in alphabetical order. Parameters: queries (List[str]): A list of search queries, each containing multiple words. Returns: List[str]: A list of processed queries with words sorted in alphabetical order. sorted_queries = [] for query in queries: words = query.split() sorted_words = sorted(words) sorted_query = \\" \\".join(sorted_words) sorted_queries.append(sorted_query) return sorted_queries"},{"question":"You are given a list of integers and asked to compress it in the following way: Count the occurrences of each integer in the list and output them in the order they appear. For example, if the list contains the integers [2, 2, 1, 3, 3, 3, 4], the compressed representation should be \\"2 appears 2 times, 1 appears 1 time, 3 appears 3 times, 4 appears 1 time\\". Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains n space-separated integers — the elements of the list (each value is between -1000 and 1000). Output Print the compressed representation of the list in the format specified above. Each unique integer in the list should be reported in the order of their first appearance. Example Input 7 2 2 1 3 3 3 4 Output 2 appears 2 times, 1 appears 1 time, 3 appears 3 times, 4 appears 1 time Input 5 -1 -1 2 2 2 Output -1 appears 2 times, 2 appears 3 times","solution":"def compress_list(n, lst): Compresses a list by counting occurrences of each integer and outputting them in the order of their first appearance. Parameters: n (int): The number of integers in the list. lst (list): The list of integers. Returns: str: The compressed representation of the list. from collections import OrderedDict count_dict = OrderedDict() for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 result = [] for key, value in count_dict.items(): result.append(f\\"{key} appears {value} {\'times\' if value > 1 else \'time\'}\\") return \\", \\".join(result)"},{"question":"A messaging app allows users to send text messages. After receiving several complaints about users sending excessively long messages, the company decides to limit the message length and split any message that exceeds this limit into multiple smaller messages. Each split message should be as large as possible but must not exceed the specified limit. Your task is to implement a function that takes the original message and the maximum allowed length as input and returns a list of strings, where each string is a part of the original message and does not exceed the maximum length. Input - The first line contains an integer `n` (1 ≤ `n` ≤ 100) — the amount of characters in the message. - The second line contains a string of length `n`, which is the original message. - The third line contains an integer `m` (1 ≤ `m` ≤ 100) — the maximum allowed length for each split message. Output Output multiple lines. The first line should contain the integer `k` — the number of split messages. Each of the following `k` lines contains a part of the original message with no more than `m` characters. Examples Input 27 This is an example message. 10 Output 3 This is an example me ssage. Input 15 Hello, world! 5 Output 3 Hello , wor ld!","solution":"def split_message(n, message, m): Splits a message into smaller parts with each part not exceeding the maximum length. Parameters: n (int): Length of the original message message (str): The original message m (int): Maximum allowed length for each split message Returns: List[str]: A list of split messages return [message[i:i + m] for i in range(0, n, m)]"},{"question":"Given a string s and an array of strings words, find the maximum number of words from the array that can appear as subsequences in the given string s. A subsequence of a string is a new string generated by deleting some (can be none) characters from the original string without changing the order of the remaining characters. Input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of words in the array. - The second line contains the string s (1 ≤ |s| ≤ 105). - The next n lines each contain a word from the array (1 ≤ |word| ≤ 100). Output: - Print a single integer, which represents the maximum number of words that appear as subsequences in the string s. Examples: Input: 3 abpcplea apple monkey plea Output: 2 Input: 4 abcde a bb acd ace Output: 3","solution":"def max_subsequences(n, s, words): Returns the maximum number of words that can appear as subsequences in the string s. def is_subsequence(word, s): it = iter(s) return all(char in it for char in word) count = 0 for word in words: if is_subsequence(word, s): count += 1 return count"},{"question":"Sara loves solving puzzles and recently she came across a unique number problem. She discovered a special number sequence that has an interesting property. The sequence starts with any positive integer n and each subsequent term is defined as follows: if the current term is even, the next term is half of the current term, otherwise, the next term is three times the current term plus one. The sequence ends when it reaches 1. Sara wants to find out how many steps it takes for a given number to reach 1 using this sequence. Can you help her solve this? Write a function `steps_to_one` that takes a single positive integer n and returns the number of steps required for n to reach 1. Input A single integer n (1 ≤ n ≤ 10^6) — the starting number of the sequence. Output A single integer — the number of steps required for n to reach 1. Examples Input 6 Output 8 Input 1 Output 0 Input 19 Output 20 Note In the first example, the sequence starting from 6 goes: 6, 3, 10, 5, 16, 8, 4, 2, 1 and it takes 8 steps to reach 1. In the second example, since the starting number is already 1, it doesn\'t take any steps. In the third example, the sequence starting from 19 goes: 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 and it takes 20 steps to reach 1.","solution":"def steps_to_one(n): Returns the number of steps required for n to reach 1 following the sequence rules. steps = 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 steps += 1 return steps"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Your task is to find all the elements that appear twice in the array. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n) — the elements of the array. Output Print a single line containing the elements that appear twice in any order separated by space. If no such element is found, print an empty line. Examples Input 5 4 3 2 7 8 2 3 1 Output 2 3 Input 3 1 1 2 Output 1 Input 7 1 2 3 4 5 6 7 Output (Note: In this case, the output should be an empty line.) Note In the first sample, the elements 2 and 3 appear twice. In the second sample, the element 1 appears twice. In the third sample, there are no elements that appear twice.","solution":"def find_duplicates(n, arr): Finds elements that appear twice in the array. Parameters: n (int): Size of the array arr (list): List of integers Returns: list: Elements that appear twice from collections import Counter # Count the frequency of each element in the array freq = Counter(arr) # Extract elements that appear twice result = [key for key, count in freq.items() if count == 2] return result"},{"question":"Given an array of integers `nums` and an integer `threshold`, create a function to determine the minimum possible length of a contiguous subarray of `nums` such that the sum of that subarray is greater than or equal to `threshold`. If there is no such subarray, return -1. Inputs: 1. An integer `n` (1 ≤ n ≤ 10^5) denoting the number of elements in `nums`. 2. An array `nums` of length `n` where each element is an integer (-10^4 ≤ nums[i] ≤ 10^4). 3. An integer `threshold` (-10^9 ≤ threshold ≤ 10^9). Output: - Return the minimum length of the contiguous subarray with sum ≥ `threshold`. - If there is no such subarray, return -1. Example: Input: ``` 5 1 2 3 4 5 11 ``` Output: ``` 3 ``` Input: ``` 4 1 -1 1 -1 1 ``` Output: ``` 1 ``` Note: In the first example, the subarray `[3, 4, 5]` has a sum 12 which is ≥ threshold 11, and its length is 3. In the second example, the subarray `[1]` has a sum 1 which is equal to threshold 1, and its length is 1.","solution":"def min_subarray_length(nums, threshold): Returns the minimum possible length of a contiguous subarray of nums such that the sum of that subarray is greater than or equal to threshold. If there is no such subarray, return -1. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= threshold: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an n x n grid that represents a matrix filled with integers. The matrix is called a \'magic square\' if the sum of the integers in each row, each column, and both main diagonals are the same. Write a program that determines if the given grid is a magic square. Input The first line of input contains a single integer n (1 ≤ n ≤ 50) — the size of the grid. Each of the following n lines contains n positive integers not greater than 1000 — the elements of the matrix. Output If the matrix is a magic square, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 3 2 7 6 9 5 1 4 3 8 Output YES Input 3 3 7 6 8 1 6 4 3 8 Output NO Input 4 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 Output YES Note In the first example, the matrix is a magic square since the sum of every row, column, and both diagonals equals 15. In the second example, the row, column, and diagonal sums are not consistent. In the third example, every row, column, and both diagonals sum up to 34, confirming it is a magic square.","solution":"def is_magic_square(grid): Determines if the given grid is a magic square. Parameters: grid (list of list of int): 2D list representing the grid. Returns: str: \\"YES\\" if the grid is a magic square, \\"NO\\" otherwise. n = len(grid) if n == 1: # A 1x1 grid is a magic square by definition return \\"YES\\" # Reference value is the sum of the first row reference_sum = sum(grid[0]) # Check sums of rows for row in grid: if sum(row) != reference_sum: return \\"NO\\" # Check sums of columns for col in range(n): if sum(grid[row][col] for row in range(n)) != reference_sum: return \\"NO\\" # Check sums of main diagonals if sum(grid[i][i] for i in range(n)) != reference_sum: return \\"NO\\" if sum(grid[i][n-i-1] for i in range(n)) != reference_sum: return \\"NO\\" return \\"YES\\""},{"question":"The company XYZ has a warehouse that stores products in rows and columns. The warehouse manager needs to track the inventory in such a way that it is easy to retrieve the count of items in any sub-section of the warehouse. The warehouse is represented by a matrix where each cell contains the number of items stored in that particular cell. Given a matrix of size m x n, implement a function that calculates the sum of items in a given sub-matrix. The sub-matrix is defined by its top-left and bottom-right corners. Input The input consists of: 1. An integer m (1 ≤ m ≤ 1000) — the number of rows in the matrix. 2. An integer n (1 ≤ n ≤ 1000) — the number of columns in the matrix. 3. A matrix of integers with m rows and n columns where each integer is the number of items in that cell. 4. Four integers r1, c1, r2, c2 (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n) representing the top-left and bottom-right corners of the sub-matrix. Output Print a single integer representing the sum of items in the given sub-matrix. Examples Input 3 3 1 2 3 4 5 6 7 8 9 1 1 2 2 Output 28 Note In the given example, the sub-matrix defined by the corners (1, 1) and (2, 2) includes the cells with the values 5, 6, 8, and 9. The sum of these values is 28.","solution":"def sum_submatrix(matrix, r1, c1, r2, c2): Calculate the sum of items in a sub-matrix defined by the top-left (r1, c1) and bottom-right (r2, c2) corners. submatrix_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): submatrix_sum += matrix[i][j] return submatrix_sum"},{"question":"Write a program that takes in the coordinates of three points A(x1, y1), B(x2, y2), and C(x3, y3). Determine if these three points form a right-angled triangle. * Print \\"RIGHT\\" if they form a right-angled triangle. * Print \\"NOT RIGHT\\" if they do not form a right-angled triangle. Input The input consists of multiple datasets. The first line contains an integer T (1 leq T leq 100), representing the number of datasets. Each of the next T lines contains six integers x1, y1, x2, y2, x3, y3, representing the coordinates of points A, B, and C respectively. Output For each dataset, print \\"RIGHT\\" or \\"NOT RIGHT\\" in a separate line. Example Input 3 0 0 3 0 0 4 1 1 4 5 6 1 0 0 1 1 2 2 Output RIGHT NOT RIGHT NOT RIGHT","solution":"def is_right_angle(x1, y1, x2, y2, x3, y3): Returns \\"RIGHT\\" if the points A(x1, y1), B(x2, y2), and C(x3, y3) form a right-angled triangle, otherwise returns \\"NOT RIGHT\\". def dist_sq(xa, ya, xb, yb): return (xb - xa) ** 2 + (yb - ya) ** 2 a2 = dist_sq(x2, y2, x3, y3) b2 = dist_sq(x1, y1, x3, y3) c2 = dist_sq(x1, y1, x2, y2) if a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2: return \\"RIGHT\\" else: return \\"NOT RIGHT\\" def check_datasets(datasets): results = [] for dataset in datasets: x1, y1, x2, y2, x3, y3 = dataset result = is_right_angle(x1, y1, x2, y2, x3, y3) results.append(result) return results"},{"question":"In a small village, there are N houses arranged in a straight line, each house with a certain amount of treasure T_i . A thief plans to rob houses in such a way that no two adjacent houses are robbed on the same night. The thief wants to maximize the amount of treasure he can steal without triggering the security alarms installed in the village. Your task is to determine the maximum amount of treasure the thief can steal. Input Input is given from standard input in the following format. N T_1 T_2 ldots T_N Output Please output the maximum amount of treasure that can be stolen. Insert a line break at the end. Constraint * 1 leq N leq 10^5 * 1 leq T_i leq 10^4 * All inputs are integers. Input example 1 4 5 3 4 11 Output example 1 16 Input example 2 3 2 7 9 Output example 2 11 Input example 3 2 1 2 Output example 3 2 Input example 4 1 10 Output example 4 10","solution":"def max_treasure(N, T): if N == 0: return 0 if N == 1: return T[0] dp = [0] * N dp[0] = T[0] dp[1] = max(T[0], T[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + T[i]) return dp[-1]"},{"question":"Alex is highly interested in number theory, particularly in prime numbers and their interesting properties. One day, he decided to play with the prime factorization of numbers. He wants to determine the sum of the number of prime factors (including multiplicity) for each integer from 1 to a given number M. Alex always counts 1 as having 0 prime factors since it has no prime factors by definition. Your task is to help Alex by writing a program to compute the required sum. Input: The first line contains an integer T, the number of test cases. Each of the following T lines contains a single integer M which represents the upper limit for that test case. Output: For each test case, output a single integer – the sum of the number of prime factors (including multiplicity) of each integer from 1 to M. Constraints: 1 ≤ T ≤ 100 1 ≤ M ≤ 10^6 Example: Input: 2 5 10 Output: 5 15 Explanation: Test case #1: Number of prime factors of numbers from 1 to 5 are: 1 -> 0 2 -> 1 3 -> 1 4 -> 2 (since 4 = 2*2) 5 -> 1 Total sum = 0 + 1 + 1 + 2 + 1 = 5 Test case #2: Number of prime factors of numbers from 1 to 10 are: 1 -> 0 2 -> 1 3 -> 1 4 -> 2 5 -> 1 6 -> 2 (since 6 = 2*3) 7 -> 1 8 -> 3 (since 8 = 2*2*2) 9 -> 2 (since 9 = 3*3) 10 -> 2 (since 10 = 2*5) Total sum = 0 + 1 + 1 + 2 + 1 + 2 + 1 + 3 + 2 + 2 = 15","solution":"def prime_factors_count_up_to_m(M): Returns a list where the value at index i is the number of prime factors of i. The returned list covers the range from 1 to M (inclusive). # Initialize a list for counting prime factors. factor_counts = [0] * (M + 1) # Perform a sieve-like approach to count the prime factors for i in range(2, M + 1): if factor_counts[i] == 0: # `i` is a prime number for j in range(i, M + 1, i): k = j while k % i == 0: factor_counts[j] += 1 k //= i return factor_counts def sum_prime_factor_counts(T, test_cases): results = [] for M in test_cases: factors_count = prime_factors_count_up_to_m(M) sum_factors = sum(factors_count) results.append(sum_factors) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [int(lines[i]) for i in range(1, T + 1)] return T, test_cases def main(input_str): T, test_cases = parse_input(input_str) results = sum_prime_factor_counts(T, test_cases) return \'n\'.join(map(str, results))"},{"question":"In a remote village, the villagers love creating fascinating patterns using strings of lights. To celebrate their unique culture, they have decided to create holiday decorations with distinct patterns based on binary strings. A pattern is considered distinct if there are no two adjacent lights lit up simultaneously (i.e., no two consecutive \'1\'s in the binary string). The villagers need your help to generate all possible unique patterns of length n. The challenge is to count the number of distinct patterns of given length n. Input The single input line contains an integer n (1 ≤ n ≤ 50) — the length of the binary strings. Output Print a single integer representing the number of distinct binary strings of length n where no two consecutive \'1\'s appear. Examples Input 3 Output 5 Input 4 Output 8 Explanation: For the first example with n=3, the valid patterns are \'000\', \'001\', \'010\', \'100\', and \'101\'. There are 5 such patterns in total. For the second example with n=4, the valid patterns are \'0000\', \'0001\', \'0010\', \'0100\', \'0101\', \'1000\', \'1001\', and \'1010\'. There are 8 such patterns in total.","solution":"def count_distinct_patterns(n): Returns the number of distinct binary strings of length n where no two consecutive \'1\'s appear. if n == 1: return 2 # \'0\', \'1\' elif n == 2: return 3 # \'00\', \'01\', \'10\' # Create a memoization table to avoid recomputation dp = [0] * (n + 1) dp[1] = 2 dp[2] = 3 for i in range(3, n + 1): dp[i] = dp[i-1] + dp[i-2] return dp[n]"},{"question":"You are given an undirected graph with n nodes and m edges. The nodes are labeled with integers from 1 to n. You need to determine the minimum number of edges you need to add to make the graph fully connected. A graph is fully connected if there is a path between any pair of nodes. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5) — the number of nodes and edges in the graph. Each of the next m lines describe an edge: the i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) — the nodes connected by the i-th edge. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5, and the sum of m over all test cases doesn\'t exceed 10^5. Output For each test case, output the minimum number of edges you need to add to make the graph fully connected. Example Input 3 4 2 1 2 3 4 5 0 7 9 1 2 2 3 3 4 4 5 5 6 6 7 7 1 1 3 Output 1 4 0 Note In the first test case, the graph has 2 separate components: {1, 2} and {3, 4}. By adding 1 edge, for example between nodes 2 and 3, the graph becomes fully connected. Therefore, the answer is 1. In the second test case, there are no edges, so we need to add 4 edges to make the graph fully connected, connecting each pair of nodes in sequence. In the third test case, the graph is already fully connected, so no additional edges are needed. Therefore, the answer is 0.","solution":"def find_connected_components(n, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Find all connected components connected_components = 0 for i in range(1, n + 1): if not visited[i]: visited[i] = True dfs(i) connected_components += 1 return connected_components def min_edges_to_connect(n, edges): connected_components = find_connected_components(n, edges) return connected_components - 1 def solve(test_cases): results = [] for n, m, edges in test_cases: results.append(min_edges_to_connect(n, edges)) return results"},{"question":"Given a string that represents a license plate, determine if the license plate is valid. A valid license plate follows these rules: 1. It should be exactly 7 characters long. 2. The first three characters must be uppercase letters. 3. The remaining four characters must be digits. 4. No other characters apart from uppercase letters and digits are allowed. Write a program that checks the validity of each license plate from a list of license plates. INPUT - First line contains an integer N. N test cases follow. - Each test case contains a string representing a license plate. OUTPUT For each test case, print \\"VALID\\" if the license plate is valid according to the above rules, otherwise print \\"INVALID\\". Constraints 1 ≤ N ≤ 10^5 Each license plate string is exactly 7 characters long SAMPLE INPUT 3 ABC1234 A1C2345 XYZ6789 SAMPLE OUTPUT VALID INVALID VALID Explanation In the first test case, \\"ABC1234\\" is a valid license plate as it meets all the criteria. In the second test case, \\"A1C2345\\" is invalid because the first three characters are not all letters. In the third test case, \\"XYZ6789\\" is a valid license plate as it meets all the criteria.","solution":"def is_valid_license_plate(plate): Check if the given license plate is valid. :param plate: A string representing the license plate :return: \\"VALID\\" if the license plate is valid, otherwise \\"INVALID\\" if len(plate) != 7: return \\"INVALID\\" if not (plate[:3].isalpha() and plate[:3].isupper()): return \\"INVALID\\" if not plate[3:].isdigit(): return \\"INVALID\\" return \\"VALID\\" def validate_license_plates(n, plates): Validate list of license plates. :param n: Number of test cases :param plates: List of license plates as strings :return: List containing \\"VALID\\" or \\"INVALID\\" for each license plate return [is_valid_license_plate(plate) for plate in plates] # Sample Input N = 3 license_plates = [\\"ABC1234\\", \\"A1C2345\\", \\"XYZ6789\\"] results = validate_license_plates(N, license_plates) for result in results: print(result)"},{"question":"Diana is organizing a coding marathon with m tasks. Each task must be attempted by at least one participant, and each participant is willing to take on a certain number of tasks. Each participant has a specific limit on the maximum number of tasks they can take. Help Diana distribute the tasks among the participants such that no task is left unattempted and that no participant exceeds their task limit. If there are multiple valid distributions, any one of them will suffice. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of participants and the number of tasks. The second line contains n integers ai (1 ≤ ai ≤ m) — the maximum number of tasks that the i-th participant can handle. Output Print the distribution of tasks among participants. If it is impossible to distribute the tasks without leaving any task unattempted or exceeding participants\' limits, print \\"Impossible\\". Otherwise, print m integers, where the i-th integer represents the participant assigned to the i-th task (participants are numbered from 1 to n). Examples Input 3 5 2 2 3 Output 1 2 3 1 2 Input 2 3 1 1 Output Impossible Note In the first sample, participants can be assigned tasks as follows: - Participant 1 can take tasks 1 and 4. - Participant 2 can take tasks 2 and 5. - Participant 3 can take task 3. In the second sample, it is impossible to distribute 3 tasks between only 2 participants if each can take only 1 task.","solution":"def distribute_tasks(n, m, a): Distributes m tasks among n participants based on their maximum capacity to handle tasks. Returns the distribution as a list of task assignments or \\"Impossible\\" if it cannot be done. :param n: Number of participants. :param m: Number of tasks. :param a: List of maximum tasks each participant can handle. :return: Task distribution or \\"Impossible\\". if sum(a) < m: return \\"Impossible\\" tasks_distributed = [] participants = list(range(1, n + 1)) idx = 0 for task in range(m): while a[idx] == 0: idx = (idx + 1) % n tasks_distributed.append(participants[idx]) a[idx] -= 1 idx = (idx + 1) % n return tasks_distributed"},{"question":"You are given a collection of books in a library, each with a unique ID. The library wants to organize these books on shelves such that the total number of books on each shelf is as equal as possible. Due to space constraints, there can be no more than `m` books on any shelf, but there is no restriction on the number of shelves. Your task is to determine if it is possible to organize all the books under the given constraints and, if possible, how many shelves are needed to achieve the organization. If it\'s not possible to organize the books according to the constraints, return -1. Input: The first line contains two integers `n` and `m` (1 ≤ n ≤ 100000, 1 ≤ m ≤ 100). Where `n` is the total number of books and `m` is the maximum number of books that can be placed on a single shelf. Output: If it is not possible to organize the books according to the stated conditions, print -1. Otherwise, print the minimum number of shelves required to organize all the books. Examples: Input: 10 3 Output: 4 Input: 5 5 Output: 1 Input: 23 4 Output: 6","solution":"def min_shelves(n, m): if m <= 0: return -1 # Calculate minimum number of shelves needed shelves_needed = (n + m - 1) // m return shelves_needed"},{"question":"You are given a grid of size n × m filled with integers. Each integer in the grid represents the elevation of that cell. An elevation change between two adjacent cells (horizontally or vertically) is called a step. A path from the upper-left corner (0, 0) to the bottom-right corner (n-1, m-1) is considered \\"smooth\\" if the absolute difference in elevation between any two consecutive cells on the path does not exceed a given integer k. Write a program to determine if there exists a smooth path from the upper-left corner to the bottom-right corner. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 1000) — the dimensions of the grid and the permitted elevation change. The next n lines each contain m integers separated by spaces — the elevations of the cells, where each integer is between 0 and 1000 inclusive. Output Output \\"YES\\" if there exists a smooth path from the upper-left corner to the bottom-right corner, otherwise output \\"NO\\". Examples Input 3 3 2 1 2 3 4 8 2 1 4 7 Output NO Input 2 2 1 0 1 1 0 Output YES","solution":"def is_smooth_path(grid, n, m, k): from collections import deque directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: r, c = queue.popleft() if r == n-1 and c == m-1: return \\"YES\\" for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc]: if abs(grid[nr][nc] - grid[r][c]) <= k: visited[nr][nc] = True queue.append((nr, nc)) return \\"NO\\" # Helper function to parse input and trigger smooth path check. def smooth_path(n, m, k, elevation_lines): grid = [list(map(int, line.split())) for line in elevation_lines] return is_smooth_path(grid, n, m, k)"},{"question":"Mark is preparing for a coding competition and he has n points on a 2D plane represented by their coordinates (x, y). He wants to form multiple queries to determine if there is a right triangle with the right angle at each queried point such that the other two points of the triangle are also part of the n points provided. For each query, you need to check whether such a right triangle exists or not. **Constraints:** - A triangle is considered to be a right triangle if it has one angle exactly 90 degrees. - Constraints on n & q and problem limits are given below. - You have to solve this problem for multiple test cases. **Input** The input consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 50). For each test case: - The first line contains two integers n (3 ≤ n ≤ 100) and q (1 ≤ q ≤ 100), the number of points and the number of queries respectively. - The next n lines contain two integers each x_i and y_i (-1000 ≤ x_i, y_i ≤ 1000), representing the coordinates of the points on the 2D plane. - The next q lines contain the index of the point to be queried (1-based index). **Output** For each test case, print q lines. Each line should contain \\"YES\\" if there exists a right triangle with the right angle at the queried point, and \\"NO\\" otherwise. **Example** **Input** ``` 1 5 3 0 0 1 0 0 1 1 1 2 2 1 2 5 ``` **Output** ``` YES YES YES ``` **Explanation** - For the first query (point (0, 0)), there are multiple triangles with a right angle at this point such as [[(0, 0), (1, 0), (0, 1)]]. - For the second query (point (1, 0)), there are multiple triangles with a right angle at this point such as [[(1, 0), (0, 0), (1, 1)]]. - For the third query (point (2, 2)), there exists no triangle with a right angle at this point.","solution":"def is_right_triangle(a, b, c): # Function to check if points a, b, c can form a right triangle with a right angle at point `a` ax, ay = a bx, by = b cx, cy = c vec1 = (bx - ax, by - ay) vec2 = (cx - ax, cy - ay) # Check if dot product of vec1 and vec2 is 0 return vec1[0] * vec2[0] + vec1[1] * vec2[1] == 0 def solve(test_cases): results = [] for t in test_cases: n, q, points, queries = t for query in queries: found_right_triangle = False queried_index = query - 1 for i in range(n): if i == queried_index: continue for j in range(i + 1, n): if j == queried_index: continue if is_right_triangle(points[queried_index], points[i], points[j]): found_right_triangle = True break if found_right_triangle: break results.append(\\"YES\\" if found_right_triangle else \\"NO\\") return results def parse_input(input_lines): index = 0 t = int(input_lines[index]) index += 1 test_cases = [] for _ in range(t): n, q = map(int, input_lines[index].split()) index += 1 points = [] for _ in range(n): x, y = map(int, input_lines[index].split()) points.append((x, y)) index += 1 queries = [] for _ in range(q): query = int(input_lines[index]) queries.append(query) index += 1 test_cases.append((n, q, points, queries)) return test_cases def main(input_lines): test_cases = parse_input(input_lines) results = solve(test_cases) return results"},{"question":"Player Alice is participating in a coding game where she moves on an infinite 2D grid. She starts at position (0, 0). Alice has programmed a list of moves, each representing a direction on the grid. The possible moves are \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right), each moving by one unit in the respective direction. Alice needs to calculate the unique positions she visits after making all the moves in her list. Help Alice count the number of unique positions she visits on the grid. Input - The first line contains an integer `m` (1 ≤ m ≤ 1000) — the number of moves Alice will make. - The second line contains a string of length `m` consisting of the characters \'U\', \'D\', \'L\', \'R\'. Output - Print a single integer — the number of unique positions Alice visits. Examples Input 5 UUDLR Output 4 Input 10 UUDDLLRRUD Output 5 Note For the first example: - Starting at (0, 0), the moves are: `U` → (0, 1), `U` → (0, 2), `D` → (0, 1), `L` → (-1, 1), and `R` → (0, 1). - The unique positions are (0, 0), (0, 1), (0, 2), and (-1, 1), totaling 4 unique positions.","solution":"def count_unique_positions(m, moves): position = (0, 0) visited_positions = set() visited_positions.add(position) for move in moves: x, y = position if move == \'U\': position = (x, y + 1) elif move == \'D\': position = (x, y - 1) elif move == \'L\': position = (x - 1, y) elif move == \'R\': position = (x + 1, y) visited_positions.add(position) return len(visited_positions)"},{"question":"You are organizing a coding competition and want to ensure a fair distribution of prizes. There are n participants in the competition, each with a certain score. You need to distribute k prizes, where each prize can only be given to one participant. To ensure fairness, you want to give the prizes to participants such that the difference between the highest and lowest scores among the prize-receiving participants is minimized. Your task is to determine the minimum possible difference between the highest and lowest scores among the participants who receive the prizes. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of participants and the number of prizes, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the score of the i-th participant. Output Print a single integer — the minimum possible difference between the highest and lowest scores among the participants who receive the prizes. Examples Input 5 3 1 3 7 9 2 Output 2 Input 6 2 8 1 4 3 6 10 Output 1 Note In the first example, the optimal choice is to give the prizes to participants with scores 1, 2, and 3. The highest score among these participants is 3, the lowest is 1, so the difference is 2. In the second example, the optimal choice is to give the prizes to participants with scores 3 and 4. The highest score among these participants is 4, the lowest is 3, so the difference is 1.","solution":"def min_diff_between_prizes(n, k, scores): Returns the minimum possible difference between the highest and lowest scores among the participants who receive the prizes. :param n: int - number of participants :param k: int - number of prizes :param scores: List[int] - scores of the participants :return: int - minimum possible difference scores.sort() min_diff = float(\'inf\') for i in range(n - k + 1): min_diff = min(min_diff, scores[i + k - 1] - scores[i]) return min_diff"},{"question":"You are given a matrix of size MxN filled with non-negative integers. A traversal from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1) is performed, where at each step one can only move either right or down. Calculate the sum of all numbers along the path that costs the least. Input: - The first line contains two integers M and N denoting the dimensions of the matrix. - Each of the next M lines contains N space-separated integers denoting the matrix elements. Output: - Print the sum of the path that has the minimum cost to traverse from (0, 0) to (M-1, N-1). Constraints: - 1 <= M, N <= 1000 - 0 <= matrix[i][j] <= 10^4 Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7","solution":"def min_sum_path(matrix): Returns the sum of the numbers along the path that costs the least to traverse from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1). Args: matrix: List[List[int]] - A 2D list containing non-negative integers. Returns: int - The minimum sum along the path. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = matrix[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Calculate the minimum sum for each cell for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1] # Helper function to parse the input and call min_sum_path def solve(): import sys input = sys.stdin.read data = input().split() M, N = int(data[0]), int(data[1]) matrix = [] idx = 2 for i in range(M): row = list(map(int, data[idx:idx+N])) idx += N matrix.append(row) print(min_sum_path(matrix))"},{"question":"Problem Statement: Alice and Bob enjoy walking in the hills and recently decided to keep track of their hikes using a GPS tracker. They hike through M checkpoints along a hilly trail. At each checkpoint, their respective altitude (in meters above sea level) is recorded. Clara, their friend, loves to predict things and challenged both Alice and Bob, stating that Bob would have greater altitude gain than Alice. Write a program to determine who has the greatest total altitude gain over the entire hike. The altitude gain between any two checkpoints is the difference in altitude, considering only positive differences (i.e., only if someone hiked uphill, not downhill). Input: First line contains a positive integer M - the number of checkpoints. Second line contains M space-separated integers - ai - the altitude reading of Alice at each checkpoint. Third line contains M space-separated integers - bi - the altitude reading of Bob at each checkpoint. Output: Print who had the greatest total altitude gain - Alice or Bob. If both had the same total altitude gain, print \\"Equal\\". Print a single integer on a new line - the greatest total altitude gain. Constraints: 2 ≤ M ≤ 10^6 -10^9 ≤ ai, bi ≤ 10^9 SAMPLE INPUT 4 100 200 150 300 100 250 200 400 SAMPLE OUTPUT Bob 350 Explanation Total altitude gain for Alice = (200 - 100) + (300 - 150) = 100 + 150 = 250 Total altitude gain for Bob = (250 - 100) + (400 - 200) = 150 + 200 = 350","solution":"def greatest_altitude_gain(M, alice_altitudes, bob_altitudes): alice_gain = sum(max(alice_altitudes[i] - alice_altitudes[i - 1], 0) for i in range(1, M)) bob_gain = sum(max(bob_altitudes[i] - bob_altitudes[i - 1], 0) for i in range(1, M)) if alice_gain > bob_gain: return \\"Alice\\", alice_gain elif bob_gain > alice_gain: return \\"Bob\\", bob_gain else: return \\"Equal\\", alice_gain"},{"question":"Alex has n balloons, each with a specific color represented by an integer c_i (1 ≤ c_i ≤ 104). He wants to arrange the balloons in a straight line such that two adjacent balloons have different colors. Alex can burst some balloons to achieve this desired pattern. Your task is to determine the minimum number of balloons that need to be burst to arrange the remaining balloons in such a way that no two adjacent balloons have the same color. Input The first line contains a single integer n (1 ≤ n ≤ 104) — the number of balloons. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 104) — the color of each balloon. Output Print a single integer — the minimum number of balloons that need to be burst to achieve the desired pattern. Examples Input 5 1 1 2 3 3 Output 2 Input 4 1 2 3 4 Output 0 Note In the first sample, Alex can burst the second and the last balloon to obtain the sequence: 1, 2, 3. In the second sample, all adjacent balloons already have different colors, so no balloons need to be burst.","solution":"def min_balloons_to_burst(n, colors): Returns the minimum number of balloons that need to be burst to achieve a sequence such that no two adjacent balloons have the same color. if n == 0: return 0 burst_count = 0 for i in range(1, n): if colors[i] == colors[i - 1]: burst_count += 1 return burst_count"},{"question":"Given a list of integers, each element may appear once, twice, or thrice. Your task is to write a function that finds and returns the unique element that appears only once, while every other element appears exactly twice or thrice. Input The input to the function is a list of integers, where each integer is guaranteed to appear either one time, exactly two times, or exactly three times. Output Return the integer that appears only once in the list. Example Input [2, 2, 3, 2, 4, 4, 4, 5, 5, 5, 7] Output 3 Input [9, 1, 1, 1, 2, 2, 2, 3] Output 9","solution":"def find_unique_element(arr): Finds the element that appears only once in a list where every other element appears exactly twice or thrice. Parameters: arr (list): List of integers where each integer appears either once, twice, or thrice. Returns: int: The unique element that appears only once. element_count = {} for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 for key, value in element_count.items(): if value == 1: return key return None # This return is only for safety; it should never be reached given the problem constraints"},{"question":"Jessie is preparing for a big cycling event and wants to maximize her weekly training mileage. She has a slightly irregular schedule where the number of miles she cycles varies daily. Given a list representing how many miles Jessie can cycle on each day of the week for a particular week, determine the total miles she will cycle that week. Additionally, if Jessie wants to hit a minimum target of miles for the week, determine whether she meets her goal or how many more miles she needs. Input The first input line contains the single integer t (1 ≤ t ≤ 1000) — the minimum target mileage for the week. The second line contains seven non-negative space-separated integers that do not exceed 1000 — those integers represent how many miles Jessie can cycle on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday, respectively. Output Print a single number — if Jessie meets or exceeds her target mileage, print \\"Goal met\\". Otherwise, print the additional miles Jessie needs to reach her target. Examples Input 150 20 30 25 10 15 40 60 Output Goal met Input 100 10 10 10 10 10 10 10 Output 30 Note In the first sample: Jessie cycles a total of 20 + 30 + 25 + 10 + 15 + 40 + 60 = 200 miles. Since 200 ≥ 150, Jessie meets her goal and \\"Goal met\\" is printed. In the second sample: Jessie cycles a total of 10 + 10 + 10 + 10 + 10 + 10 + 10 = 70 miles. Since 70 < 100, she needs an additional 30 miles to meet her goal, so \\"30\\" is printed.","solution":"def check_goal(target_miles, daily_miles): Given a target mileage for the week and a list of daily mileage, determines if the target is met or how many more miles are needed. :param target_miles: The minimum target mileage for the week (int). :param daily_miles: List of integers representing daily mileage for each day of the week. :return: \\"Goal met\\" if the weekly mileage meets or exceeds the target, otherwise the number of additional miles needed. total_miles = sum(daily_miles) if total_miles >= target_miles: return \\"Goal met\\" else: return target_miles - total_miles"},{"question":"Alice and Bob love solving puzzles in their free time. Alice came up with an interesting string rearrangement puzzle for Bob: Given a string, Bob needs to find the lexicographically smallest permutation of the string such that no two adjacent characters are the same. If no such permutation exists, Bob should return \\"Impossible\\". Since Alice\'s string can be long, Bob is unsure how to efficiently solve this, and he asks you for help. Input: The input contains a single line which is the initial string S. The length of the string does not exceed 1000 characters and it contains only lowercase English letters. Output: Print the lexicographically smallest permutation of the string such that no two adjacent characters are the same, or \\"Impossible\\" if no such permutation exists. Constraints: 1 ≤ len(S) ≤ 1000 S contains only lowercase English letters (\'a\' - \'z\'). Example: Input: aabbcc Output: abcabc Example: Input: aaab Output: Impossible Explanation: In the first example, one possible valid permutation is \\"abcabc\\". In the second example, it is impossible to rearrange \\"aaab\\" without two adjacent \'a\'s.","solution":"from collections import Counter import heapq def smallest_non_adjacent_permutation(S): Function to find the lexicographically smallest permutation of the string such that no two adjacent characters are the same. If no such permutation exists, return \\"Impossible\\". # First, count the frequency of each character count = Counter(S) # Create a max heap based on the counts max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap or prev_freq: if prev_freq and not max_heap: return \\"Impossible\\" freq, char = heapq.heappop(max_heap) # Add the character to the result result.append(char) # Since we are using a max heap with negative frequencies, add the previous character back if needed if prev_freq: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the previous character and frequency prev_char = char prev_freq = freq + 1 return \'\'.join(result)"},{"question":"Emma is a computer science student tasked with developing a text compression algorithm. She decides to use the Run-Length Encoding (RLE) technique for compressing strings. Your job is to help her implement the RLE algorithm. Run-Length Encoding is a simple form of data compression where consecutive occurrences of the same character are replaced with the character followed by the number of occurrences. For example: - Input: \\"aaabbbcc\\" - Output: \\"a3b3c2\\" Write a program that takes a string as input and outputs its Run-Length Encoded version. Input - The input starts with an integer T, the number of test cases. - For each test case, a single line of a non-empty string S consisting only of uppercase and lowercase English letters. Output - For each test case, print the Run-Length Encoded string. Constraints - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 Sample Input 3 aaabbbcc aabbcc abcd Sample Output a3b3c2 a2b2c2 a1b1c1d1 Explanation 1. In the first test case, \\"aaabbbcc\\" is encoded as \\"a3b3c2\\", where \'a\' occurs 3 times, \'b\' occurs 3 times, and \'c\' occurs 2 times. 2. In the second test case, \\"aabbcc\\" is encoded as \\"a2b2c2\\", where each letter \'a\', \'b\', and \'c\' occurs 2 times. 3. In the third test case, \\"abcd\\" is encoded as \\"a1b1c1d1\\", where each letter occurs 1 time.","solution":"def run_length_encoding(T, test_cases): Generates the Run-Length Encoding (RLE) for a list of strings. :param T: Integer, the number of test cases :param test_cases: List of strings for which RLE needs to be calculated :return: List of RLE encoded strings result = [] for s in test_cases: encoded_str = \'\' i = 0 while i < len(s): count = 1 while (i + 1) < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_str += s[i] + str(count) i += 1 result.append(encoded_str) return result"},{"question":"You are given a binary tree where each node contains a value. You need to implement a function that determines whether a given target value exists within the binary tree. Your task is to write a function that takes the root node of the binary tree and the target value as input and returns `True` if the target value is found in the tree, otherwise returns `False`. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the binary tree. - The next n lines contain three space-separated values each: the value of the node, the index of its left child, and the index of its right child. The value of the node will be given as an integer. - The left and right child indices will be -1 if the node does not have a left or right child, respectively. - The last line contains the target value which you need to search for in the binary tree. Output Return \\"True\\" if the target value is found in the tree, otherwise return \\"False\\". Example Input 5 10 1 2 4 -1 -1 6 3 4 3 -1 -1 8 -1 -1 8 Output True Input 5 10 1 2 4 -1 -1 6 3 4 3 -1 -1 8 -1 -1 5 Output False","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_values): nodes = [None] * len(node_values) for idx, (value, left_idx, right_idx) in enumerate(node_values): if nodes[idx] is None: nodes[idx] = TreeNode(value) nodes[idx].value = value if left_idx != -1: if nodes[left_idx] is None: nodes[left_idx] = TreeNode(node_values[left_idx][0]) nodes[idx].left = nodes[left_idx] if right_idx != -1: if nodes[right_idx] is None: nodes[right_idx] = TreeNode(node_values[right_idx][0]) nodes[idx].right = nodes[right_idx] return nodes[0] def find_value_in_tree(root, target): if root is None: return False if root.value == target: return True return find_value_in_tree(root.left, target) or find_value_in_tree(root.right, target)"},{"question":"You are given an integer N, and an array A of N integers. You need to rearrange the elements of the array in such a way that all even numbers come before all odd numbers, while maintaining the relative order of the even and odd numbers in the original array. Constraints * 1 ≤ N ≤ 100 * 1 ≤ A[i] ≤ 1000 Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the rearranged array in the required form in a single line, with each number separated by a space. Examples Input 6 1 2 3 4 5 6 Output 2 4 6 1 3 5 Input 5 9 8 7 6 5 Output 8 6 9 7 5 Input 3 1 1 1 Output 1 1 1","solution":"def rearrange_even_odd(n, arr): Returns the rearranged array with all even numbers coming before odd numbers while maintaining their relative order. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"You are given a rope of length n meters. You need to cut the rope into exactly k pieces such that each piece is at least m meters long. Additionally, you need to minimize the length of the longest piece. Your task is to determine the maximum possible length of the shortest piece after making these cuts, or decide that it\'s not possible. Input: - The first line contains three space-separated integers: n, k, and m (1 ≤ n ≤ 10^6, 1 ≤ k ≤ 10^5, 1 ≤ m ≤ 10^6). n is the total length of the rope, k is the number of pieces we want, and m is the minimum length of each piece. Output: - Print a single integer, which is the maximum possible length of the shortest piece, or -1 if it is impossible to make such cuts. Examples: Input 10 5 1 Output 2 Input 7 4 2 Output -1 Input 15 6 2 Output 2 Note: In the first example, the rope can be cut into pieces of lengths 2, 2, 2, 2, and 2, all of which are at least 1 meter long. In the second example, it is impossible to cut the rope into four pieces each of at least 2 meters long. In the third example, you can cut the rope into pieces of lengths 2, 2, 2, 2, 2, and 2, which are all at least 2 meters long.","solution":"def max_min_piece_length(n, k, m): def can_cut_to_min_length(x): return (n // x) >= k if n < k * m: return -1 left, right = m, n // k result = -1 while left <= right: mid = (left + right) // 2 if can_cut_to_min_length(mid): result = mid left = mid + 1 else: right = mid - 1 return result"},{"question":"Your task is to write a program to simulate a simple queue which implements the following instructions: * enqueue x: insert an integer x into the end of the queue * dequeue: remove the integer from the front of the queue and print it. If the queue is empty, print \'empty\' Notes Template in Python Constraints * 1 ≤ x ≤ 100000 * n ≤ 1000000 Input In the first line n, the number of instructions is given. In the following n lines, n instructions are given in the above-mentioned format. Output Print the output for each dequeue instruction in a line. Examples Input 7 enqueue 5 enqueue 10 dequeue enqueue 15 dequeue dequeue dequeue Output 5 10 15 empty Input 5 dequeue enqueue 7 enqueue 3 dequeue enqueue 12 Output empty 7","solution":"class SimpleQueue: def __init__(self): self.queue = [] def enqueue(self, x): self.queue.append(x) def dequeue(self): if self.queue: return self.queue.pop(0) else: return \'empty\' def process_instructions(instructions): queue = SimpleQueue() result = [] for instruction in instructions: if instruction.startswith(\'enqueue\'): _, x = instruction.split() queue.enqueue(int(x)) elif instruction == \'dequeue\': result.append(queue.dequeue()) return result"},{"question":"Monica is designing a ring road network for a new city. The city has n intersections connected by m bidirectional roads. Each road has a specific length in kilometers. Monica wants to identify the longest road in the city that, when removed, does not change the city from being fully connected, such that all intersections are still reachable from every other intersection through some paths. Write a program that will help Monica to identify this road, if it exists. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) — the number of intersections and the number of roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — representing a road of length w kilometers connecting intersection u with intersection v. Output Print the length of the longest road that, when removed, keeps all intersections still connected. If no such road exists, print -1. Example Input 5 6 1 2 3 1 3 4 2 3 2 3 4 6 4 5 5 2 5 8 Output 8 Note: In the example, removing the road connecting intersections 2 and 5 (with a length of 8 kilometers) does not prevent any intersection from being reachable from any other intersection in the city. This is the longest such road.","solution":"from collections import defaultdict import heapq def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def kruskal(n, edges): parent = list(range(n+1)) rank = [0] * (n+1) mst = [] edges.sort(key=lambda x: x[2], reverse=True) while edges: u, v, w = edges.pop() if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst.append((u, v, w)) return mst def longest_road_to_remove(n, m, roads): if m < n - 1: return -1 edges = [] for u, v, w in roads: edges.append((u, v, w)) mst = kruskal(n, edges) max_edge = -1 for u, v, w in roads: if (u, v, w) in mst or (v, u, w) in mst: continue max_edge = max(max_edge, w) return max_edge if max_edge != -1 else -1"},{"question":"Write a function that takes a list of integers and an integer k. The function should return the k-th largest element in the list. Input - A list of integers, where the size of the list is guaranteed to be at least k. - An integer k, which indicates the position of the largest element to find. Output - An integer representing the k-th largest element in the list. Example ``` Input: [3, 2, 1, 5, 4], 2 Output: 4 Explanation: The 2nd largest element in the list [3, 2, 1, 5, 4] is 4. ``` Note: If the list contains duplicates, they should be treated as separate elements when determining the k-th largest.","solution":"def kth_largest_element(lst, k): Returns the k-th largest element in the list. Parameters: lst (list): A list of integers. k (int): The position of the largest element to find. Returns: int: The k-th largest element in the list. # Sort the list in descending order lst_sorted = sorted(lst, reverse=True) # Return the k-th largest element return lst_sorted[k-1]"},{"question":"In a small village, there is a unique custom where every house has a robot that helps with daily chores. Each robot is programmed to follow a specific instruction set to complete its tasks. The instruction set is a string consisting of characters \'L\' (left turn), \'R\' (right turn), \'U\' (move up), and \'D\' (move down). Given the starting position of the robot at the origin (0, 0) in a 2D plane, you need to determine the final position of the robot after executing the instruction set. Input The input consists of a single string s (1 ≤ |s| ≤ 100) — the instruction set given to the robot. Output Print two integers x and y denoting the final position of the robot on the 2D plane after executing the instruction set. Examples Input \\"LURD\\" Output 0 0 Input \\"UUDDL\\" Output -1 0 Input \\"RRD\\" Output 2 -1","solution":"def final_position(instructions): Returns the final position of the robot after executing the instruction set. x, y = 0, 0 for instruction in instructions: if instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 elif instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 return x, y"},{"question":"An investment firm wants to optimize its trading strategy for the upcoming week. There are N different stocks, and the firm has an initial budget of B dollars. Each stock i has a price per share of P(i) dollars and an expected profit per share C(i) dollars. The firm wants to maximize the expected profit by buying shares of these stocks, but they should not exceed the initial budget B. Design an algorithm that helps the firm decide the maximum expected profit it can achieve by investing in these stocks. Input: The first line contains an integer N, the number of different stocks. The second line contains an integer B, the budget in dollars. The next N lines describe each stock where the i-th line contains two integers, P(i) and C(i). P(i) is the price per share of the i-th stock and C(i) is the expected profit per share of the i-th stock. Output: A single integer denoting the maximum expected profit the firm can achieve. Constraints: 1 ≤ N ≤ 1000 1 ≤ B ≤ 10^5 1 ≤ P(i), C(i) ≤ 1000 Example: Input 3 50 10 5 20 10 30 15 Output 25 Explanation: The firm can buy: - 5 shares of Stock 1 (5 * 5 = 25 profit) - 1 share of Stock 2 (1 * 10 = 10 profit) - Total profit = 25 + 10 = 35","solution":"def maximize_expected_profit(N, B, stocks): Given the number of stocks N, initial budget B, and a list of stocks with their prices and expected profits, this function returns the maximum expected profit. Args: N : int : Number of different stocks B : int : Initial budget in dollars stocks : List[Tuple[int, int]] : List of tuples where each tuple contains (P(i), C(i)) Returns: int : Maximum expected profit # Sort stocks by profit to price ratio in descending order stocks.sort(key=lambda x: x[1]/x[0], reverse=True) max_profit = 0 for price, profit in stocks: if B >= price: shares = B // price max_profit += shares * profit B -= shares * price return max_profit"},{"question":"Tanya is a software developer who often needs to manipulate dates in her programs. She realized that performing arithmetic operations on dates can be quite cumbersome. To ease her work, she decided to write a function that calculates the difference between two given dates in terms of days. Given two dates as input, your task is to calculate the number of days between them. Input The first line contains a date in the format YYYY-MM-DD, representing the first date. The second line contains another date in the same format YYYY-MM-DD, representing the second date. Output Print a single integer representing the number of days between the two dates. The output should always be a non-negative integer. Examples Input 2022-01-01 2022-01-31 Output 30 Input 2021-12-25 2022-01-01 Output 7 Input 2023-03-15 2023-03-15 Output 0 Note The difference between the dates 2022-01-01 and 2022-01-31 is 30 days. The difference between 2021-12-25 and 2022-01-01 is 7 days. When both dates are the same, the difference is 0 days.","solution":"from datetime import datetime def date_difference(date1, date2): Returns the number of days between two dates. Parameters: date1 (str) : First date in the format YYYY-MM-DD. date2 (str) : Second date in the format YYYY-MM-DD. Returns: int: The number of days between the two dates. # Convert date strings to datetime objects date1 = datetime.strptime(date1, \'%Y-%m-%d\') date2 = datetime.strptime(date2, \'%Y-%m-%d\') # Calculate the difference in days difference = abs((date2 - date1).days) return difference"},{"question":"You are given a single integer `N` (1 ≤ N ≤ 100) and a list of N integers `a_1, a_2, ..., a_N` where each `a_i` is between 1 and 1000. You need to partition the list into two non-empty subsets such that the absolute difference between the sum of the elements in the two subsets is minimized. Constraints * 1 ≤ N ≤ 100 * 1 ≤ a_i ≤ 1000 Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the smallest possible absolute difference between the sums of the two subsets. Examples Input 4 1 6 5 11 Output 1 Input 5 3 1 4 2 2 Output 0","solution":"def min_subset_difference(arr): Function to calculate the minimum subset difference Args: arr: List of integers Returns: int: The minimum difference between the sums of two subsets total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j def find_min_subset_difference(N, arr): return min_subset_difference(arr)"},{"question":"There are n nodes in a network, numbered from 1 to n, connected by m bidirectional edges. Each node i has an associated value vi. Now, there are q queries you need to handle. There are two types of queries: * \\"U x y\\": Update the value at node x to y. * \\"S x y\\": Find the maximum shortest path value between nodes x and y. The path should be the shortest possible, and among all shortest paths, you should find the maximum value of the nodes on that path. For a path to be valid: * It must be a sequence of nodes [v1, v2, ..., vk], where k is a positive integer. * The nodes must be distinct, i.e., for any 1 ≤ i < j ≤ k, vi ≠ vj. * For any 1 ≤ i < k, there is an edge between nodes vi and vi+1. * The value of a path is max(vv1, vv2, ..., vvk). * The query result for \\"S x y\\" should be the maximum value among all nodes on the shortest path between x and y. Input The first line of the input contains three integers n, m, and q (1 ≤ n, m, q ≤ 10^5), separated by single spaces. The next line contains n integers, which describe the node values v1, v2, ..., vn (1 ≤ vi ≤ 10^9). The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) denoting a bidirectional edge between nodes ui and vi. It is guaranteed that there is at most one edge connecting any pair of nodes. The next q lines each describe a query, of format \\"U x y\\" or \\"S x y\\" (1 ≤ x, y ≤ n, 1 ≤ y ≤ 10^9). Output For each query of type \\"S\\", output the corresponding answer. Example Input 5 5 4 5 3 8 6 2 1 2 2 3 1 4 4 5 3 5 S 1 3 U 2 10 S 1 3 S 4 5 Output 5 10 6 Note For the sample input: - The shortest path from 1 to 3 has nodes [1, 2, 3], with values [5, 3, 8]. The maximum value is 5. - After updating the value of node 2 to 10, the same shortest path has values [5, 10, 8], with the maximum being 10. - The shortest path from 4 to 5 has nodes [4, 5], with values [6, 2], and the maximum value is 6.","solution":"import heapq def update_value(values, x, y): values[x-1] = y def max_shortest_path_value(graph, values, x, y): n = len(values) INF = float(\'inf\') dist = [INF] * n visited = [False] * n max_values = [0] * n pq = [] dist[x-1] = 0 max_values[x-1] = values[x-1] heapq.heappush(pq, (0, x-1)) while pq: d, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True for neighbor in graph[node]: if dist[neighbor] > d + 1: dist[neighbor] = d + 1 max_values[neighbor] = max(max_values[node], values[neighbor]) heapq.heappush(pq, (dist[neighbor], neighbor)) elif dist[neighbor] == d + 1: if max_values[neighbor] < max(max_values[node], values[neighbor]): max_values[neighbor] = max(max_values[node], values[neighbor]) heapq.heappush(pq, (dist[neighbor], neighbor)) return max_values[y-1] def process_queries(n, m, q, values, edges, queries): graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) results = [] for query in queries: type, x, y = query[0], int(query[1]), int(query[2]) if type == \'U\': update_value(values, x, y) elif type == \'S\': result = max_shortest_path_value(graph, values, x, y) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) q = int(data[index + 2]) index += 3 values = list(map(int, data[index:index + n])) index += n edges = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 queries = [] for _ in range(q): type = data[index] x = data[index + 1] y = data[index + 2] queries.append((type, x, y)) index += 3 results = process_queries(n, m, q, values, edges, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that determines whether a given year is a leap year. Constraints * -10^4 leq year leq 10^4 * The input year is an integer. Input Input is given from Standard Input in the following format: year Output Print \\"True\\" if the given year is a leap year, otherwise print \\"False\\". Examples Input 2020 Output True Input 2019 Output False","solution":"def is_leap_year(year): Determine whether a given year is a leap year. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"A string is considered \\"balanced\\" if each character in the string appears the same number of times. For example, the strings \\"aabb\\", \\"abcdabcd\\", and \\"zzxxzzxx\\" are balanced strings. You are given a string s consisting of lowercase English letters only. Determine whether the string is balanced. Input The input consists of a single string s (1 ≤ |s| ≤ 10⁵). Output Output \\"YES\\" if the string is balanced, otherwise output \\"NO\\". Examples Input aabb Output YES Input abcabc Output YES Input aabbccd Output NO Note In the first example, each character (\'a\' and \'b\') appears exactly twice, so the string is balanced. In the second example, each character (\'a\', \'b\', and \'c\') appears exactly twice, so the string is balanced. In the third example, the characters do not all appear the same number of times; \'a\', \'b\', \'c\' appear twice, but \'d\' appears once, so the string is not balanced.","solution":"def is_balanced_string(s): Determines if the given string s is balanced. A string is considered balanced if each character in the string appears the same number of times. Args: s (str): Input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". from collections import Counter counts = Counter(s) freq = list(counts.values()) return \\"YES\\" if all(x == freq[0] for x in freq) else \\"NO\\""},{"question":"You are a software developer at a company that manages a database of book records. Each record contains the title of the book, the author\'s name, and the year of publication. The company needs a new feature that can search through these records. Your task is to create a function that searches for books based on a search term. The search term can match any part of the title or author\'s name, but it should be case-insensitive. The function should return the list of books that match the search term, sorted by year of publication in ascending order. Each book in the output list should appear as a tuple containing the title, author\'s name, and year of publication. Write a function `search_books(books, term)` that takes the following inputs: - `books`: A list of tuples, where each tuple contains three elements: the title of the book (string), the author\'s name (string), and the year of publication (integer). - `term`: A string representing the search term. The function should return a list of tuples, where each tuple contains the title, author\'s name, and year of publication of a matching book. # Input: - `books`: List of books, where each book is represented as a tuple of (title, author, year). - `term`: Search term (string). # Output: - A list of tuples containing the title, author\'s name, and year of the books that match the search term, sorted by the year of publication in ascending order. # Constraints: - The list `books` can contain up to 10,000 book records. - The search term can be up to 100 characters long. - Both book titles and author names will only contain alphanumeric characters and spaces. - The year of publication is between 1000 and 2023. # Example: ```python books = [ (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960), (\\"1984\\", \\"George Orwell\\", 1949), (\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951), (\\"Great Expectations\\", \\"Charles Dickens\\", 1861) ] term = \\"great\\" print(search_books(books, term)) ``` # Sample Output: ``` [ (\\"Great Expectations\\", \\"Charles Dickens\\", 1861), (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) ] ``` # Solution: To solve this problem, you should create a function that iterates over each book and checks if the search term is found in the title or author name. If a match is found, add the book to the result list. Finally, sort the result list by the year of publication and return it.","solution":"def search_books(books, term): Searches for books based on a search term. The search term can match any part of the title or author\'s name, case-insensitively. The result is a list of books sorted by year of publication in ascending order. Args: books: A list of tuples - (title: str, author: str, year: int) term: Search term (str) Returns: A list of books that match the search term, sorted by year of publication in ascending order. term = term.lower() matching_books = [ book for book in books if term in book[0].lower() or term in book[1].lower() ] return sorted(matching_books, key=lambda book: book[2]) # Example usage: books = [ (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960), (\\"1984\\", \\"George Orwell\\", 1949), (\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951), (\\"Great Expectations\\", \\"Charles Dickens\\", 1861) ] term = \\"great\\" print(search_books(books, term)) # Expected output: # [ # (\\"Great Expectations\\", \\"Charles Dickens\\", 1861), # (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) # ]"},{"question":"Problem You are given a special type of binary tree, called **complete binary tree**. In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Write a function that returns the sum of all left leaves in the tree. A **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of its parent. Implement the function `sum_of_left_leaves(root)`, where `root` is the root node of the given binary tree. # Constraints - The number of nodes in the tree is in the range [0, 1000]. - The value of each node is in the range [-1000, 1000]. # Input - `root`: TreeNode # Output - Return the integer sum of all left leaves. # Examples: Example 1 ```python # Input: root = [3,9,20,None,None,15,7] # Explanation: # 3 # / # 9 20 # / # 15 7 # Output: 24 # Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively. # Adding them up gives us 24. result = sum_of_left_leaves(root) print(result) # 24 ``` Example 2: ```python # Input: root = [1] # Explanation: # 1 # Output: 0 # Explanation: There are no left leaves in the binary tree. # result = sum_of_left_leaves(root) print(result) # 0 ``` # Note You may assume the tree is non-empty, but there may be cases where there are zero left leaves, in which case the output should be 0. Python class definition for TreeNode: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): Returns the sum of all left leaves in the given binary tree. if not root: return 0 def is_leaf(node): return node and not node.left and not node.right def dfs(node, is_left): if not node: return 0 if is_leaf(node) and is_left: return node.val return dfs(node.left, True) + dfs(node.right, False) return dfs(root, False)"},{"question":"You have been tasked to manage the schedules of several university lecturers. Each lecturer has a set of classes they need to teach at different times of the week. Your goal is to ensure that no lecturer is scheduled to teach more than one class at the same time while maximizing the number of classes taught in a week. The university follows a 7-day schedule with each day divided into 24 one-hour slots. Each class has a start time and an end time represented in the 24-hour format (e.g., 13:00 - 15:00) and is assigned to a specific lecturer. Given the list of classes and their respective time slots and lecturers, write a program to calculate the maximum number of non-overlapping classes that can be scheduled for each lecturer. Input The first line contains an integer n — the number of classes scheduled (1 ≤ n ≤ 10,000). Each of the next n lines contains six items separated by spaces: a string representing the lecturer\'s name (only lowercase Latin letters, 1 to 20 characters), the day of the class (an integer from 0 to 6, where 0 represents Monday and 6 represents Sunday), and the start and end times of the class in the format \\"HH:MM - HH:MM\\". Output For each lecturer, print their name followed by the number of non-overlapping classes they can teach in the given schedule, in any order. Examples Input 5 alice 0 09:00 - 10:00 bob 1 10:00 - 12:00 alice 0 10:00 - 11:00 bob 2 15:00 - 17:00 bob 1 11:00 - 13:00 Output alice 2 bob 2 Input 4 john 0 09:00 - 11:00 john 0 10:00 - 12:00 mary 3 14:00 - 16:00 john 0 11:00 - 13:00 Output john 2 mary 1 Input 3 david 6 09:00 - 11:00 david 6 10:00 - 12:00 david 6 13:00 - 15:00 Output david 2 Note In the first example, Alice can teach two non-overlapping classes on Monday, and Bob can teach two non-overlapping classes across Tuesday and Wednesday. In the second example, John can only teach 2 out of the 3 classes on Monday without overlapping. In the third example, David can attend only two classes on Sunday without overlapping.","solution":"from collections import defaultdict def parse_time(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def parse_classes(n, class_details): lectures = defaultdict(list) for detail in class_details: lecturer, day, time_range = detail[0], int(detail[1]), detail[2] start_time, end_time = map(parse_time, time_range.split(\' - \')) lectures[lecturer].append((day, start_time, end_time)) return lectures def calculate_max_classes(classes): non_overlap_count = 0 sorted_classes = sorted(classes, key=lambda x: (x[0], x[2])) # Sort by day, then by end time current_end = [-1] * 7 # to track end time for each day for day, start, end in sorted_classes: if start >= current_end[day]: non_overlap_count += 1 current_end[day] = end return non_overlap_count def maximize_lecturer_classes(n, class_details): lectures = parse_classes(n, class_details) result = {} for lecturer, classes in lectures.items(): result[lecturer] = calculate_max_classes(classes) return result # Example usage: n = 5 class_details = [ (\\"alice\\", \\"0\\", \\"09:00 - 10:00\\"), (\\"bob\\", \\"1\\", \\"10:00 - 12:00\\"), (\\"alice\\", \\"0\\", \\"10:00 - 11:00\\"), (\\"bob\\", \\"2\\", \\"15:00 - 17:00\\"), (\\"bob\\", \\"1\\", \\"11:00 - 13:00\\") ] print(maximize_lecturer_classes(n, class_details))"},{"question":"Anna loves decorating her house with beautiful lights. She has a row of N lights, each of which can be either on or off. One day, she realizes that it would be fun to create a pattern with lights based on a sequence of operations. She can perform the following operation any number of times: - Choose a sub-sequence of lights and flip their current state (i.e., turn all the lights that are on to off and vice versa). Anna wants to achieve a specific pattern of lights after a series of operations. Can you help her determine the minimum number of operations needed to transform the initial sequence of lights to the desired sequence? Input: The first line contains an integer N, the number of lights. The second line contains a string of N characters representing the initial state of the lights, where \'1\' denotes a light that is on and \'0\' denotes a light that is off. The third line contains a string of N characters representing the desired state of the lights, using the same notation as above. Output: Print the minimum number of operations required to transform the initial sequence into the desired sequence. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 5 10101 01010 SAMPLE OUTPUT 5 Explanation The initial state of the lights is \\"10101\\" and the desired state is \\"01010\\". To achieve this pattern, every individual light must be flipped because no two consecutive lights have the same target state. Therefore, we need 5 operations, one for each light.","solution":"def min_operations_to_transform(initial, desired): Returns the minimum number of operations required to transform the initial sequence of lights into the desired sequence by flipping subsequences of lights. count = 0 n = len(initial) for i in range(n): if initial[i] != desired[i]: count += 1 return count"},{"question":"Given a sequence of integers, determine the length of the longest subsequence in which the elements are in strictly increasing order. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ ai ≤ 10000 Input The entire input looks as follows: n (the length of the sequence) a1 a2 ... an (the sequence of integers) Output A single integer representing the length of the longest increasing subsequence. Example Input 8 10 22 9 33 21 50 41 60 Output 5","solution":"def length_of_longest_increasing_subsequence(n, sequence): Returns the length of the longest subsequence in which the elements are in strictly increasing order. :param n: Integer, the length of the sequence. :param sequence: List of integers, the sequence for which to find the longest increasing subsequence. :return: Integer, the length of the longest increasing subsequence. if n == 0: return 0 lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"Given an array of distinct positive integers, find a pair of numbers (a_i, a_j) such that a_i < a_j and the product a_i * a_j is maximized. If there are multiple pairs with the same maximum product, any of them is acceptable. Constraints * 2 leq n leq 10^5 * 1 leq a_i leq 10^9 * All values in input are distinct positive integers. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print a_i and a_j that you selected, with a space in between. Examples Input 5 1 10 3 7 5 Output 7 10 Input 4 4 12 3 8 Output 8 12","solution":"def find_max_product_pair(arr): Given an array of distinct positive integers, find a pair of numbers (a_i, a_j) such that a_i < a_j and the product a_i * a_j is maximized. Params: arr (List[int]): The list of distinct positive integers. Returns: Tuple[int, int]: A pair (a_i, a_j). if len(arr) < 2: return None # Not enough numbers to form a pair # Sort the array arr.sort() # The pair with the maximum product will be the last two elements in the sorted array return (arr[-2], arr[-1])"},{"question":"A search engine company wants to improve its search results ranking algorithm. They have introduced a mechanism to evaluate the relevance of documents by assigning a relevance score to each word in these documents. A document’s total relevance score is the sum of the relevance scores of all unique words present in it. Given a set of documents and a list of relevance scores for words, your task is to determine the total relevance score for each document. Input The input consists of three parts: 1. The first part is an integer w (1 ≤ w ≤ 100), the number of words for which the relevance score is provided. 2. The next w lines each contain a word and its relevance score (1 ≤ length of the word ≤ 50, 1 ≤ relevance score ≤ 1000). 3. The third part consists of an integer d (1 ≤ d ≤ 100), the number of documents. 4. The next d lines each contain a document, which is a space-separated string of words (1 ≤ number of words ≤ 500). It is guaranteed that each word in the document consists only of lowercase English letters. Output For each document, print the total relevance score on a new line. Examples Input 5 hello 50 world 40 search 100 engine 60 ranking 30 3 hello world search engine ranking hello hello search Output 90 190 150 Note In the first document, the words \\"hello\\" and \\"world\\" have relevance scores of 50 and 40 respectively, giving a total of 90. In the second document, the words \\"search\\", \\"engine\\", and \\"ranking\\" have relevance scores of 100, 60, and 30 respectively, giving a total of 190. In the third document, even though \\"hello\\" appears twice, it is counted only once, thus giving the total relevance score of 50 (hello) + 100 (search) = 150.","solution":"def calculate_document_relevance(w, word_scores, d, documents): word_score_dict = {word: score for word, score in word_scores} document_scores = [] for document in documents: words = set(document.split()) total_score = sum(word_score_dict.get(word, 0) for word in words) document_scores.append(total_score) return document_scores"},{"question":"You are given two arrays of integers `A` and `B`, both of length `n`. You are allowed to perform the following operation at most once: Operation: Choose an index `i` (1 <= i <= n) and swap the elements `A[i]` and `B[i]`. Your goal is to determine if there exists such an index where a swap could make array `A` strictly increasing. An array is strictly increasing if every successive element is greater than the previous one. Constraints: * 1 ≤ n ≤ 2 × 10^5 * 1 ≤ A[i], B[i] ≤ 10^9 Input The input is given from Standard Input in the following format: ``` n A1 A2 ... An B1 B2 ... Bn ``` Output Output \\"Yes\\" if there exists an index where a swap can make array `A` strictly increasing, otherwise output \\"No\\". Examples Input 5 1 5 3 4 6 9 2 8 7 10 Output Yes Input 4 1 3 2 4 6 7 8 5 Output No Explanation of Examples: - In the first example, swapping the elements at index 2 (5 and 2) makes array `A` = `[1, 2, 3, 4, 6]` which is strictly increasing. - In the second example, no single swap can make array `A` strictly increasing.","solution":"def can_make_strictly_increasing(n, A, B): Returns \\"Yes\\" if there is an index i where swapping A[i] with B[i] makes array A strictly increasing, else \\"No\\". def is_strictly_increasing(arr): for i in range(1, len(arr)): if arr[i] <= arr[i-1]: return False return True # If A is already strictly increasing, return \\"Yes\\" if is_strictly_increasing(A): return \\"Yes\\" for i in range(n): # Swap A[i] and B[i] A[i], B[i] = B[i], A[i] # Check if the array is strictly increasing after the swap if is_strictly_increasing(A): return \\"Yes\\" # Swap back to restore the original arrays A[i], B[i] = B[i], A[i] return \\"No\\""},{"question":"Background John is an aspiring developer who loves working with data structures, especially heaps. He is also a massive fan of competitive coding and keeps practicing problems involving heaps. One day, he came across a unique problem where he needs to process queries on a list of integers using a min-heap. The challenge is intriguing, and he could not solve it completely; so, he needs your help to write an efficient program for processing the queries. Problem You are given a list of integers and a set of queries to process. Each query can be of two types: 1. \\"add x\\": Add the integer \'x\' to the current list. 2. \\"remove_min\\": Remove and return the minimum integer from the current list. If the list is empty, return \\"None\\". You are required to process all queries and output the necessary results for each \\"remove_min\\" query. Input The first line contains an integer \'n\' (1 ≤ n ≤ 10^5), which is the number of queries. The next \'n\' lines each contain a query of one of the two types mentioned above: - \\"add x\\" where \'x\' is an integer (1 ≤ x ≤ 10^9). - \\"remove_min\\". Output Output the results of \\"remove_min\\" queries in the order they are processed, each result on a new line. If the list is empty at the time of a \\"remove_min\\" query, output \\"None\\". Examples Input 6 add 5 add 3 remove_min add 7 remove_min remove_min Output 3 5 7 Input 4 remove_min add 10 remove_min remove_min Output None 10 None Explanation In the first example, the list of integers after each query: - \\"add 5\\": [5] - \\"add 3\\": [3, 5] (min-heap order) - \\"remove_min\\": 3 is removed, list now [5] - \\"add 7\\": [5, 7] - \\"remove_min\\": 5 is removed, list now [7] - \\"remove_min\\": 7 is removed, list is empty now In the second example, initially, the list is empty. The query \\"remove_min\\" returns \\"None\\". - \\"add 10\\": [10] - \\"remove_min\\": 10 is removed, list is empty now - \\"remove_min\\": returns \\"None\\" because the list is empty.","solution":"import heapq def process_queries(n, queries): min_heap = [] results = [] for query in queries: if query.startswith(\\"add\\"): _, x = query.split() heapq.heappush(min_heap, int(x)) elif query == \\"remove_min\\": if min_heap: results.append(heapq.heappop(min_heap)) else: results.append(\\"None\\") return results"},{"question":"You are given a string containing a sequence of digits. Your task is to check if the string represents an even number or an odd number. If the number is even, print `EVEN`; if the number is odd, print `ODD`. Constraints: - The string `s` will contain at least one and at most 1000 digits. Input: Input is given from Standard Input in the following format: s Output: If the number is even, print `EVEN`; if the number is odd, print `ODD`. Examples: Input 1234 Output EVEN Input 56789 Output ODD","solution":"def check_even_odd(s): Given a string s representing a sequence of digits, check if it represents an even number or an odd number and return \'EVEN\' or \'ODD\'. Args: s (str): A string of digits. Returns: str: \'EVEN\' if the number is even, \'ODD\' if the number is odd. # Check the last digit of the string to determine if it\'s even or odd if int(s[-1]) % 2 == 0: return \'EVEN\' else: return \'ODD\'"},{"question":"Problem Statement You are working on an application that processes user transactions. Each transaction has a unique identifier and an associated amount. Your task is to calculate the total amount of all transactions and determine the maximum single transaction amount. Input: - An integer `n` (1 <= n <= 10000) representing the number of transactions. - The next `n` lines contain pairs of strings and floating-point numbers separated by a space. Each pair represents a transaction ID and the amount of the transaction. Output: - The total amount of all transactions rounded to 2 decimal places. - The maximum single transaction amount rounded to 2 decimal places. Example: Input: 4 T1 10.50 T2 20.75 T3 5.00 T4 25.25 Output: 61.50 25.25","solution":"def process_transactions(n, transactions): Processes user transactions and returns the total amount and the maximum single transaction amount. :param n: Integer number of transactions :param transactions: List of tuples, where each tuple contains a transaction ID and an amount :return: Tuple containing the total amount and the maximum single transaction amount, both rounded to 2 decimal places total_amount = 0.0 max_transaction = float(\'-inf\') for tx_id, amount in transactions: amount = float(amount) total_amount += amount if amount > max_transaction: max_transaction = amount total_amount = round(total_amount, 2) max_transaction = round(max_transaction, 2) return total_amount, max_transaction"},{"question":"Example You are given two strings `s` and `t` consisting of lowercase English letters, where the length of `t` is less than or equal to the length of `s`. Your task is to determine whether some anagram of `t` is a substring of `s`. Input The input consists of two lines: - The first line contains the string `s`. - The second line contains the string `t`. Output Output \\"YES\\" if some anagram of `t` is a substring of `s`, otherwise output \\"NO\\". Example Input cbabcacab abc Output YES","solution":"def is_anagram_substring(s, t): Determine if some anagram of t is a substring of s. Parameters: s (str): The string to search within. t (str): The string to form anagrams from. Returns: str: \\"YES\\" if some anagram of t is a substring of s, otherwise \\"NO\\". from collections import Counter len_s, len_t = len(s), len(t) if len_t > len_s: return \\"NO\\" t_count = Counter(t) window_count = Counter(s[:len_t]) if window_count == t_count: return \\"YES\\" for i in range(len_t, len_s): window_count[s[i]] += 1 window_count[s[i - len_t]] -= 1 if window_count[s[i - len_t]] == 0: del window_count[s[i - len_t]] if window_count == t_count: return \\"YES\\" return \\"NO\\""},{"question":"In a distant galaxy, there is a planet called Zog. On Zog, there\'s a sacred ritual involving a sequence of mystical stones aligned in a row. Each stone has a magical number engraved on it. To complete the ritual and gain immortality, a Zogonian must perform the following task: Given an array of integers, the Zogonian must find the length of the longest contiguous subarray such that every element in this subarray has the same parity (either all elements are even, or all are odd). Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of stones (elements in the array). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the magical numbers on the stones. Output Output a single integer, the length of the longest contiguous subarray that consists of stones with the same parity. Examples Input 7 1 2 2 2 3 4 4 Output 3 Input 8 4 4 5 5 5 5 2 2 Output 4 Note In the first example, the longest contiguous subarray with the same parity is formed by elements {2, 2, 2}, which has length 3. In the second example, the longest contiguous subarray with the same parity is formed by elements {5, 5, 5, 5}, which has length 4.","solution":"def longest_same_parity_subarray(n, a): Returns the length of the longest contiguous subarray where all elements have the same parity. Parameters: n (int): The number of elements in the array. a (list): The list of integers representing the magical numbers on the stones. Returns: int: The length of the longest contiguous subarray with the same parity. if n == 0: return 0 max_length = 1 current_length = 1 current_parity = a[0] % 2 for i in range(1, n): if a[i] % 2 == current_parity: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 current_parity = a[i] % 2 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a string S of length N. Each character in the string is either \'(\' or \')\'. Your task is to determine the longest balanced substring in the given string. A balanced substring is a string that contains equal number of \'(\' and \')\' with each \'(\' correctly matched to a \')\' in the proper order. Constraints * The string length N is an integer. * 1 leq N leq 10^5 * The characters in the string are either \'(\' or \')\'. Input Input is given from Standard Input in the following format: S Output Print the length of the longest balanced substring in the given string. Examples Input (()()) Output 6 Input )()()) Output 4 Input (((( Output 0","solution":"def longest_balanced_substring(S: str) -> int: Returns the length of the longest balanced substring in the given string S. max_length = 0 stack = [-1] # Initialize stack with -1 to handle the base case for i, char in enumerate(S): if char == \'(\': stack.append(i) else: # char == \')\' if stack: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: stack.append(i) return max_length"},{"question":"You have a series of financial transactions occurring in a cryptocurrency wallet. Each transaction can either increase or decrease the balance. A positive value means an increase (credit), and a negative value means a decrease (debit). The wallet has a special rule: If a series of consecutive transactions results in a net zero balance change (i.e., the sum of those transactions is zero), then all those transactions cancel each other out and are removed from the list of transactions. Given the initial list of transactions, find the minimum number of transactions left in the list after repeatedly applying the cancellation rule. Write a function `min_transactions(transactions)` that takes a list of integers representing the transactions and returns the minimum number of transactions left after all possible cancellations. # Constraints - The number of transactions 1 leq len(transactions) leq 10^5 - Each transaction -10^9 leq transactions[i] leq 10^9 # Function Signature ```python def min_transactions(transactions: List[int]) -> int: pass ``` # Input - A list of integers representing the transactions. # Output - An integer representing the minimum number of transactions left after all cancellations. # Examples Example 1 Input: ```python transactions = [1, 2, -3, 3, -1] ``` Output: ```python 2 ``` Example 2 Input: ```python transactions = [3, -3, 4, -4] ``` Output: ```python 0 ``` Example 3 Input: ```python transactions = [1, -1, 2, -2, 3, -3] ``` Output: ```python 0 ``` Example 4 Input: ```python transactions = [1, 2, 3, -1, -2, -3] ``` Output: ```python 0 ``` Example 5 Input: ```python transactions = [1, 2, 3, -3, -2, -1, 4, -4] ``` Output: ```python 0 ```","solution":"def min_transactions(transactions): from collections import defaultdict # Stack to hold running sums stack = [] sum_map = defaultdict(int) current_sum = 0 for transaction in transactions: current_sum += transaction if current_sum == 0: # Found a zero sum from the beginning stack.clear() sum_map.clear() elif current_sum in sum_map: # Found a zero sum subarray pos = sum_map[current_sum] del stack[pos:] else: sum_map[current_sum] = len(stack) stack.append(transaction) return len(stack)"},{"question":"Given a list of integers, return the maximum difference between any two integers in the list. Input Format: First line contains a single integer t, the number of test-cases. Each of the next t lines contains a space-separated list of integers. Output Format: Output t lines, each containing a single integer, the maximum difference for the corresponding list. Constraints: 1 ≤ t ≤ 100 2 ≤ number of integers in the list ≤ 50 -100 ≤ each integer ≤ 100 SAMPLE INPUT 2 1 5 3 19 18 25 30 5 20 9 SAMPLE OUTPUT 24 25","solution":"def max_difference(test_cases): Given a list of integers, returns the maximum difference between any two integers in the list for each test case. Parameters: test_cases (list of lists of int): A list where each element is a list containing integers. Returns: list of int: A list containing the maximum difference for each test case. results = [] for case in test_cases: min_val = min(case) max_val = max(case) results.append(max_val - min_val) return results def parse_input(input_string): Parses the input string and returns the number of test cases and the lists of integers. Parameters: input_string (str): The input string containing the number of test cases and subsequent integer lists. Returns: tuple: A tuple containing the number of test cases (int) and a list of lists of integers. lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [list(map(int, line.split())) for line in lines[1:t+1]] return t, test_cases def format_output(results): Formats the results into the required output format. Parameters: results (list of int): A list containing the maximum differences for each test case. Returns: str: A formatted string of results. return \\"n\\".join(map(str, results))"},{"question":"While walking in the park, Emma stumbled upon a peculiar game. She has a string s consisting of lowercase English letters and a target string t. She wants to find out the minimum number of operations required to convert the string s into the string t. In one operation, Emma can perform one of the following actions: 1. Remove a character from any position in s. 2. Insert a character at any position in s. 3. Replace a character at any position in s with another character. Help Emma by writing a program to determine the minimum number of operations required to convert s to t. Input The first line contains the string s (1 ≤ |s| ≤ 1000) — the initial string. The second line contains the string t (1 ≤ |t| ≤ 1000) — the target string. Output Print a single integer — the minimum number of operations required to convert s to t. Examples Input sitting kitten Output 3 Input sunday saturday Output 3 Note In the first example, the minimum number of operations to transform \'sitting\' into \'kitten\' is 3: 1. Replace \'s\' with \'k\'. 2. Replace \'i\' with \'e\'. 3. Remove \'g\'. In the second example, the minimum number of operations to transform \'sunday\' into \'saturday\' is 3: 1. Insert \'a\' after \'s\'. 2. Insert \'t\' after \'u\'. 3. Insert \'a\' before \'y\'.","solution":"def min_operations_to_convert(s, t): Returns the minimum number of operations required to convert string s to string t. m, n = len(s), len(t) # Create a DP array to hold the minimum number of operations for each substring. dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the first row and first column of the DP array. for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the rest of the DP array. for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Jack and Jill have a sequence of N integers. Jack always chooses a subarray with the maximum sum whenever it’s his turn, and Jill chooses the subarray with the minimum sum whenever it’s her turn. Jack always goes first and they alternate turns. The subarray chosen on each turn is removed from the sequence, and the trimmed sequence is considered for the next turn. Your task is to determine the final sum of the remaining elements in the sequence after both Jack and Jill have taken their respective turns until the sequence is empty. Input: First line contains T - number of test cases. Following T lines each contain an integer N (the size of the sequence), followed by N space-separated integers. Output: For each test case, output the final sum of the remaining elements in the sequence after all turns have been taken. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -10^4 ≤ sequence[i] ≤ 10^4 Sample Test Explanation: Test Case 1: Input sequence: 4, -1, -2, 7 Jack’s turn, he chooses the subarray with the maximum sum: [4, -1, -2, 7] (sum = 8) Trimmed sequence: [] Since the sequence is empty, no more turns are taken. Final sum of remaining elements: 0 Test Case 2: Input sequence: 1, -3, 4, -7, 2 Jack’s turn, he chooses the subarray with the maximum sum: [4] (sum = 4) Trimmed sequence: [1, -3, -7, 2] Jill’s turn, she chooses the subarray with the minimum sum: [-7] (sum = -7) Trimmed sequence: [1, -3, 2] Jack’s turn, he chooses the subarray with the maximum sum: [1, -3, 2] (sum = 0) Trimmed sequence: [] Since the sequence is empty, no more turns are taken. Final sum of remaining elements: 0 SAMPLE INPUT 2 4 4 -1 -2 7 5 1 -3 4 -7 2 SAMPLE OUTPUT 0 0","solution":"def final_sum_of_sequence_after_turns(t, test_cases): results = [] for case in test_cases: n, seq = case[0], case[1:] def max_subarray_sum(seq): max_so_far = seq[0] max_ending_here = seq[0] start = end = s = 0 for i in range(1, len(seq)): if seq[i] > max_ending_here + seq[i]: max_ending_here = seq[i] s = i else: max_ending_here += seq[i] if max_ending_here > max_so_far: max_so_far = max_ending_here start = s end = i return max_so_far, start, end def min_subarray_sum(seq): min_so_far = seq[0] min_ending_here = seq[0] start = end = s = 0 for i in range(1, len(seq)): if seq[i] < min_ending_here + seq[i]: min_ending_here = seq[i] s = i else: min_ending_here += seq[i] if min_ending_here < min_so_far: min_so_far = min_ending_here start = s end = i return min_so_far, start, end while seq: # Jack\'s turn - maximize the sum subarray max_sum, start, end = max_subarray_sum(seq) seq = seq[:start] + seq[end+1:] if not seq: break # Jill\'s turn - minimize the sum subarray min_sum, start, end = min_subarray_sum(seq) seq = seq[:start] + seq[end+1:] results.append(sum(seq)) return results"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer that appears exactly once. Write a program to find the integer that appears only once. Input The input consists of a single line containing a space-separated list of integers. The list will have at least one element and no more than 100 elements. Each integer in the list will be between -1000 and 1000, inclusive. Output Output the single integer that appears only once in the list. Example Input 2 2 3 4 4 5 5 Output 3 Input 10 10 -1 -1 12 13 13 Output 12","solution":"def find_single_number(nums): Returns the integer that appears only once in the list of integers where each integer appears exactly twice, except for one integer that appears exactly once. result = 0 for num in nums: result ^= num return result def parse_input(s): Parses the input string into a list of integers. return list(map(int, s.split()))"},{"question":"The wise Owl from Codeville has come up with an innovative way to merge data streams and now wants to test its efficiency. Instead of doing it manually, she decided to seek assistance from the contestants of the Codeville championship. You are given two data streams, each represented by a sequence of integers. These streams need to be merged in a specific manner to form a new sequence. Given two sequences of integers, a1, a2, ..., an and b1, b2, ..., bn, the merging process involves alternating the values from each sequence to form the output sequence c1, c2, ..., c2n as follows: - c1 = a1 - c2 = b1 - c3 = a2 - c4 = b2 - … In other words, the resulting sequence should alternate between the integers from the first sequence and the integers from the second sequence. Your task is to write a program that performs this merging process. Input The first input line contains a single integer n (1 ≤ n ≤ 105) — the number of integers in each sequence. The second input line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109), separated by single spaces — the first sequence of integers. The third input line contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 109), separated by single spaces — the second sequence of integers. Output Print 2n space-separated integers — the merged sequence. Examples Input 3 1 3 5 2 4 6 Output 1 2 3 4 5 6 Input 4 9 7 5 3 8 6 4 2 Output 9 8 7 6 5 4 3 2 Note In the first sample, the merging process produces the sequence: 1 (from the first sequence), 2 (from the second sequence), 3 (from the first sequence), 4 (from the second sequence), 5 (from the first sequence), and finally 6 (from the second sequence). Hence, the output is \\"1 2 3 4 5 6\\". In the second sample, the merging process produces the sequence: 9 (from the first sequence), 8 (from the second sequence), 7 (from the first sequence), 6 (from the second sequence), 5 (from the first sequence), 4 (from the second sequence), 3 (from the first sequence), and finally 2 (from the second sequence). Hence, the output is \\"9 8 7 6 5 4 3 2\\".","solution":"def merge_sequences(n, seq1, seq2): Merges two sequences by alternating the values from each sequence. Parameters: n (int): Number of integers in each sequence. seq1 (list): The first sequence of integers. seq2 (list): The second sequence of integers. Returns: list: The merged sequence of integers. merged_sequence = [] for i in range(n): merged_sequence.append(seq1[i]) merged_sequence.append(seq2[i]) return merged_sequence"},{"question":"Given an array of integers, you are required to determine if the array can be partitioned into two subarrays such that the sum of the elements in both subarrays is the same. Write a function that checks whether such a partition is possible. **Input:** - The first line contains an integer `n`, the number of elements in the array. - The second line contains `n` integers, representing the elements of the array. **Output:** - Print \\"YES\\" if the array can be partitioned into two subarrays with equal sum. Otherwise, print \\"NO\\". **Constraints:** - 1 ≤ n ≤ 100 - Each element of the array is between 0 and 100. **Example Input:** ```` 4 1 5 11 5 ```` **Example Output:** ```` YES ```` **Example Input:** ```` 5 1 2 3 5 4 ```` **Example Output:** ```` NO ````","solution":"def can_partition(nums): Determines if the array can be partitioned into two subarrays with equal sum. :param nums: List[int] - an array of integers :return: str - \\"YES\\" if the partition is possible, \\"NO\\" otherwise. total_sum = sum(nums) # If the sum is odd, it\'s impossible to partition into two equal subarrays if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) # Using dynamic programming to check if we can form the target sum dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an array of N integers and a number K. Your task is to count the number of subarrays that have exactly K distinct integers. Constraints * 1 leq N leq 100,000 * 1 leq K leq N * 1 leq array[i] leq 10^9 Input Input is given from Standard Input in the following format: N K array[0] array[1] ... array[N - 1] Output Print the number of subarrays that have exactly K distinct integers. Example Input 5 2 1 2 1 2 3 Output 7 Explanation The subarrays containing exactly 2 distinct integers are: [1, 2], [2, 1], [1, 2], [2, 1, 2], [1, 2], [2, 3], [1, 2, 3]. Thus, the answer is 7.","solution":"def subarrays_with_k_distinct(arr, K): from collections import defaultdict def at_most_k_distinct(k): count = defaultdict(int) left = 0 result = 0 for right in range(len(arr)): if count[arr[right]] == 0: k -= 1 count[arr[right]] += 1 while k < 0: count[arr[left]] -= 1 if count[arr[left]] == 0: k += 1 left += 1 result += right - left + 1 return result return at_most_k_distinct(K) - at_most_k_distinct(K - 1)"},{"question":"In the kingdom of Circles, there are N magical circles arranged in a line, each with a unique radius. The radius of the i-th circle is Ri. Each circle has the power to expand and push adjacent circles along the line to its left or right if it becomes larger than its neighbor. Specifically, if circle i expands and its radius becomes larger than the radius of circle i+1, it will push circle i+1 until the gap between them is again equal to the radius of circle i+1. Similarly, if circle i expands and its radius becomes larger than the radius of circle i-1, it will push circle i-1 until the gap between them is again equal to the radius of circle i-1. This pushing mechanism ensures that no two circles overlap, but they can touch each other. Given the initial radii of the circles and the rate of expansion for each circle, determine the order of the circles after a time T has passed. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Ri ≤ 10^9 * 1 ≤ T ≤ 10^9 * The expansion rate of each circle is 1 unit per unit time. Input The input is given from Standard Input in the following format: N T R1 R2 ... RN Output Print the radii of the circles in their final order after T time units. Example Input 5 3 2 1 4 3 5 Output 5 4 3 7 6","solution":"def final_radii_after_expansion(N, T, radii): Returns the final radii of circles after T time units. # Increase each circle\'s radius by T expanded_radii = [r + T for r in radii] return expanded_radii"},{"question":"Problem A detective named Sherlock Holmes is investigating a series of crimes. Each crime occurs at a specific location, and Sherlock has encoded the coordinates of each location in a peculiar way. Given a string representation of an encoded coordinate, your task is to decode it back into its original representation. The encoded coordinate is constructed as follows: - The original x-coordinate and y-coordinate are each two positive integers. - These integers are concatenated into a single string and separated by a \'D\'. - Once concatenated, the digits are reversed to form the final encoded string. For example, if the original coordinates are (12, 34), they would be concatenated as \\"12D34\\". Reversing the digits would result in the encoded string \\"43D21\\". Given the encoded coordinate as input, you need to decode it and output the original coordinates in the form (x,y). Constraints The input string satisfies the following conditions: - It contains exactly one \'D\' character. - The length of the string, excluding \'D\', is between 2 and 8 digits. Input The input is given in the following format: ``` encoded_coordinate ``` The encoded coordinate is provided on one line. Output Output the original coordinates in the form (x,y). Examples Input ``` 63D83 ``` Output ``` (36,38) ``` Input ``` 41D23 ``` Output ``` (14,32) ``` Input ``` 4D31 ``` Output ``` (4,13) ```","solution":"def decode_coordinate(encoded_coordinate): Decodes an encoded coordinate string into its original coordinates. Args: encoded_coordinate (str): The encoded coordinate string. Returns: tuple: A tuple (x, y) representing the original coordinates. # Split the encoded coordinate at \'D\' reversed_x, reversed_y = encoded_coordinate.split(\'D\') # Reverse the substrings to get the original coordinates x = int(reversed_x[::-1]) y = int(reversed_y[::-1]) return (x, y)"},{"question":"You are given a list of strings. Each string represents a series of upvotes and downvotes represented by 1s and 0s respectively. Your task is to find the longest contiguous subsequence of upvotes (1s) for each string and return the length of that subsequence. Input The first line contains an integer T, the number of test cases. The next T lines contain a single string consisting of characters \'1\' and \'0\'. Output For each test case, output a single integer representing the length of the longest contiguous sequence of \'1\'s in the corresponding string. Constraints 1 ≤ T ≤ 10^4 1 ≤ Length of each string ≤ 10^5 Sample Input 3 110011 111111 10000 Sample Output 2 6 1","solution":"def longest_contiguous_upvotes(test_cases): Given a list of binary strings, this function returns the length of the longest contiguous subsequence of \'1\'s (upvotes) for each string. :param test_cases: List of strings containing \'1\'s and \'0\'s :return: List of integers representing the longest contiguous upvote sequences result = [] for s in test_cases: max_count = 0 current_count = 0 for char in s: if char == \'1\': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 result.append(max_count) return result"},{"question":"Alex is developing a new video game where players navigate through a maze of rooms. Each room contains a certain number of coins. Players can start at any room and move to any adjacent room, collecting coins along the way. The game also allows players to make certain operations to alter the coins in the rooms, to add new paths, or to query the maximum coins they could collect starting from a specific room. The maze is represented by n rooms connected by bidirectional paths, and they have m operations which can be one of the following types: 1. Change the number of coins in a room to a new value. 2. Add a new path between two rooms. 3. Query the maximum number of coins a player can collect by starting in a particular room and visiting each room no more than once. Your task is to implement the features described. # Input - The first line contains three integers: n (1 ≤ n ≤ 2×10^5), m (1 ≤ m ≤ 2×10^5) representing the number of rooms and the number of operations respectively. - The second line contains n integers, c1, c2, ..., cn (1 ≤ ci ≤ 10^9), where ci represents the coin count in the i-th room. - The next m lines describe the operations, which can be of the following three types: * \\"1 i x\\" — change the coin count in the i-th room to x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9). * \\"2 u v\\" — add a new bidirectional path between room u and room v (1 ≤ u, v ≤ n). * \\"3 s\\" — query the maximum coins that can be collected starting from room s (1 ≤ s ≤ n). # Output - For each operation of type 3, output the maximum number of coins (including coins in the starting room) a player can collect starting from the specified room. # Example Input ``` 5 7 10 20 30 40 50 1 3 15 2 1 2 2 2 3 2 3 4 2 4 5 3 1 3 3 ``` Output ``` 105 90 ``` # Explanation - Initially, the rooms have coin counts of [10, 20, 30, 40, 50]. - The first operation updates the coin count of room 3 to 15. Now the rooms have coin counts of [10, 20, 15, 40, 50]. - The next four operations add paths connecting the rooms, forming a linear path: 1-2-3-4-5. - The sixth operation queries the maximum number of coins collectible starting from room 1. The player can navigate to all rooms, collecting 10 + 20 + 15 + 40 + 50 = 135 coins. - The seventh operation queries the maximum number of coins starting from room 3. The player can navigate to rooms 3, 2, 1, 4, 5 collecting 15 + 20 + 10 + 40 + 50 = 135 coins.","solution":"from collections import defaultdict, deque class MazeGame: def __init__(self, n, m, coins): self.n = n self.coins = coins self.graph = defaultdict(list) def change_coins(self, i, x): self.coins[i - 1] = x def add_path(self, u, v): self.graph[u].append(v) self.graph[v].append(u) def max_coins(self, start): visited = [False] * self.n queue = deque([start]) visited[start - 1] = True max_coins = 0 while queue: room = queue.popleft() max_coins += self.coins[room - 1] for neighbor in self.graph[room]: if not visited[neighbor - 1]: visited[neighbor - 1] = True queue.append(neighbor) return max_coins def coin_queries(n, m, coins, operations): game = MazeGame(n, m, coins) results = [] for op in operations: if op[0] == 1: _, i, x = op game.change_coins(i, x) elif op[0] == 2: _, u, v = op game.add_path(u, v) elif op[0] == 3: _, s = op results.append(game.max_coins(s)) return results"},{"question":"You are given a list of n integers. Your task is to determine if there exists a permutation of the list such that the sum of every pair of adjacent integers is an even number. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the list. The second line contains n integers ai (1 ≤ ai ≤ 109) — the integers in the list. Output If there exists a permutation that satisfies the condition, print \\"YES\\". Otherwise, print \\"NO\\". Example Input 4 1 3 5 7 Output YES Input 3 1 2 3 Output NO Note In the first example, the permutation [1, 3, 5, 7] is already a permutation where the sum of every pair of adjacent integers is even because all numbers are odd, and the sum of two odd numbers is even. In the second example, there is no permutation where the sum of every pair of adjacent integers is even since there is a mix of both odd and even numbers.","solution":"def can_form_even_adjacent_sums(n, a): Determines if there exists a permutation of the list such that the sum of every pair of adjacent integers is an even number. Parameters: n (int): The number of integers in the list a (list of int): The integers in the list Returns: str: \\"YES\\" if there exists such a permutation, otherwise \\"NO\\" odd_count = sum(1 for x in a if x % 2 != 0) even_count = n - odd_count # All numbers need to be even or all numbers need to be odd. if odd_count == n or even_count == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a non-empty string s and q queries. Each query consists of two integers l and r, and you need to find out the longest palindromic substring in the range s[l:r] inclusive. A palindromic string is a string that reads the same backward as forward. Input The first line contains a single non-empty string s of length n (1 ≤ n ≤ 1000) consisting of lowercase English letters. The second line contains an integer q (1 ≤ q ≤ 10^5) – the number of queries. The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the range [l, r]. Output For each query, output the length of the longest palindromic substring in the range s[l:r]. Examples Input abacaba 3 1 3 2 5 1 7 Output 3 3 7 Input abc 2 1 2 1 3 Output 1 1","solution":"def longest_palindromic_substring(s, queries): Returns the length of the longest palindromic substring in the ranges specified by the queries. :param s: A string of length n consisting of lowercase English letters. :param queries: A list of tuples where each tuple contains two integers (l, r) representing the range [l, r]. :return: A list of integers representing the length of the longest palindromic substring for each query. n = len(s) # Helper function to find longest palindromic substrings lengths for each position in s def longest_palindromes(): dp = [[0] * n for _ in range(n)] max_lengths = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = True max_lengths[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] if dp[i][j]: max_lengths[i][j] = length else: max_lengths[i][j] = max(max_lengths[i+1][j], max_lengths[i][j-1]) return max_lengths max_lengths = longest_palindromes() result = [] for l, r in queries: result.append(max_lengths[l-1][r-1]) return result"},{"question":"In a special school for programming, the students have a peculiar tradition. Each year, they select an integer k (1 ≤ k ≤ 100) and build a binary tree with k nodes. Each node in the tree has a unique value from 1 to k. To enhance their programming skills, students are given a task to transform this binary tree into its \\"canonical form\\". The canonical form of a binary tree is defined as follows: 1. The tree is traversed in in-order fashion. 2. All nodes are visited by performing an in-order traversal and listed without regard to their parent-child relationship. 3. The resulting sequence of node values is sorted in ascending order to form the canonical representation. Write a program which, given a binary tree, transforms it to its canonical form and prints the resulting sequence of node values. Input The input consists of multiple lines: - The first line contains an integer k (1 ≤ k ≤ 100) — the number of nodes. - The next k lines provide the structure of the binary tree. Each line contains three integers p, l, and r, where p is the parent node, l is the left child node, and r is the right child node. If a node does not have a left or right child, the respective value is given as 0. Output Output a single line containing the sorted sequence of node values in the canonical form. Example Input 5 1 2 3 2 4 0 3 0 5 4 0 0 5 0 0 Output 1 2 3 4 5 Input 3 1 2 3 2 0 0 3 0 0 Output 1 2 3 Note In the first example, the binary tree is: 1 / 2 3 / 4 5 The in-order traversal produces the sequence 4, 2, 1, 3, 5, which sorted in ascending order gives us 1, 2, 3, 4, 5.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_descriptions, k): nodes = {i: TreeNode(i) for i in range(1, k + 1)} for parent, left, right in node_descriptions: if left != 0: nodes[parent].left = nodes[left] if right != 0: nodes[parent].right = nodes[right] return nodes[1] # Root node is always 1 based on the constraints def in_order_traversal(node, traversal): if node is not None: in_order_traversal(node.left, traversal) traversal.append(node.value) in_order_traversal(node.right, traversal) def canonical_form(k, node_descriptions): root = build_tree(node_descriptions, k) traversal = [] in_order_traversal(root, traversal) return sorted(traversal)"},{"question":"Alice is learning about strings during her coding practice. She came across a problem where she needs to determine if two given strings are anagrams of each other. Two strings are called anagrams if they contain the same characters with the same frequencies, but possibly in a different order. Help Alice by writing a program to determine whether two strings are anagrams. Input: First line of input contains a single integer, T denoting the number of test cases. For each test case, there are two lines. The first line of each test case contains the string S1 and the second line contains the string S2. Output: For each test case print \\"Yes\\" (without quotes), if the strings are anagrams, otherwise print \\"No\\" (without quotes). Print a new line after each test case. Constraints: 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 1000 S1 and S2 consists of lowercase English letters only. SAMPLE INPUT 2 listen silent hello billion SAMPLE OUTPUT Yes No Note: - For the first test case, \\"listen\\" and \\"silent\\" are anagrams. - For the second test case, \\"hello\\" and \\"billion\\" are not anagrams.","solution":"def are_anagrams(s1, s2): Returns \'Yes\' if s1 and s2 are anagrams, \'No\' otherwise. return \'Yes\' if sorted(s1) == sorted(s2) else \'No\' def process_test_cases(t, test_cases): Processes multiple test cases to determine if pairs of strings are anagrams. Args: t (int): Number of test cases. test_cases (list of tuples): List of tuples where each tuple contains two strings to be checked. Returns: list of str: List of results for each test case, \'Yes\' or \'No\'. return [are_anagrams(s1, s2) for s1, s2 in test_cases]"},{"question":"You are the chief engineer at a robotics company and are tasked with ensuring the robots\' movements are efficient. Each robot can be given a set of movement commands to navigate a 2D grid, where the starting position is always (0, 0) facing North. The commands are given as a list of strings, each string representing a combination of direction and distance, such as \\"N10\\" (move 10 units North). The possible directions are \'N\', \'S\', \'E\', and \'W\' for North, South, East, and West respectively. Your goal is to create a program that takes an initial set of movement commands, optimizes them to minimize the total number of commands by merging consecutive moves in the same direction, and then outputs the optimized set of commands. Input: - A list of movement commands, where each command is a non-empty string consisting of a direction character followed by an integer (1 ≤ distance ≤ 1000). The length of the list does not exceed 100 commands. Output: - A list of optimized movement commands, with the same format as the input. Commands are merged if they are in the same direction and consecutive. Example: Input: ``` [\\"N10\\", \\"N20\\", \\"S5\\", \\"E15\\", \\"E5\\", \\"W10\\", \\"N10\\", \\"S10\\"] ``` Output: ``` [\\"N30\\", \\"S5\\", \\"E20\\", \\"W10\\", \\"N10\\", \\"S10\\"] ``` Explanation: - The first two \\"N\\" commands are merged into \\"N30\\". - The \\"E15\\" and \\"E5\\" commands are merged into \\"E20\\". - The remaining commands are left as they are since they are either in different directions or non-consecutive. Write a function `optimize_commands(commands)` which takes in the list of movement commands and returns the optimized list of commands.","solution":"def optimize_commands(commands): Optimizes the list of movement commands by merging consecutive movements in the same direction. Parameters: commands (list of str): List of movement commands in the format \\"DNN\\", where D is the direction (N, S, E, W) and NN is the distance. Returns: list of str: Optimized list of movement commands. if not commands: return [] optimized_commands = [] current_direction = commands[0][0] current_distance = int(commands[0][1:]) for command in commands[1:]: direction = command[0] distance = int(command[1:]) if direction == current_direction: current_distance += distance else: optimized_commands.append(f\\"{current_direction}{current_distance}\\") current_direction = direction current_distance = distance optimized_commands.append(f\\"{current_direction}{current_distance}\\") return optimized_commands"},{"question":"You are given an array of integers where each integer represents the height of a person. The heights are arranged in non-decreasing order. Your task is to design a program that, given a height value, returns the number of people who have a height less than the given value. Input The first line of input consists of an integer n (1 ≤ n ≤ 10^5), representing the number of people. The second line contains n integers separated by spaces, where each integer represents the height of a person. The heights are sorted in non-decreasing order (1 ≤ height[i] ≤ 10^9). The third line contains a single integer x (1 ≤ x ≤ 10^9), representing the target height. Output Print a single integer - the number of people whose height is less than the given height x. Examples Input 5 150 160 165 170 180 165 Output 2 Input 6 100 120 150 170 200 220 180 Output 4 Input 4 140 150 160 170 130 Output 0 Note In the first example, there are 2 people with heights less than 165 (150, 160). In the second example, there are 4 people with heights less than 180 (100, 120, 150, 170). In the third example, there are no people with a height less than 130.","solution":"def count_heights_less_than(heights, x): Returns the number of people whose height is less than x. Args: heights (list of int): A list of heights in non-decreasing order x (int): The target height Returns: int: The number of heights less than x left, right = 0, len(heights) while left < right: mid = (left + right) // 2 if heights[mid] < x: left = mid + 1 else: right = mid return left"},{"question":"You are given a list of words from a dictionary. Write a program which identifies and prints all the words that can be constructed from the given characters. The characters can each be used only once. Each test case will provide a list of words and the available set of characters. Input The first line contains an integer n, the number of words in the dictionary. Each of the next n lines contains one word from the dictionary. The following line contains a string of available characters. Output Output all the words from the dictionary that can be constructed using the given characters, one per line. The order of the words in the output does not matter. Examples Input 4 apple orange grape melon aelpp Output apple","solution":"from collections import Counter def can_form_word(word, chars): Check if a word can be formed using the given set of characters. word_count = Counter(word) chars_count = Counter(chars) for char in word_count: if word_count[char] > chars_count.get(char, 0): return False return True def words_from_chars(words, chars): Returns a list of words that can be formed using the given set of characters. result = [] for word in words: if can_form_word(word, chars): result.append(word) return result"},{"question":"You are given an array of integers **arr** containing **n** elements. You need to perform a sequence of operations on the array such that each operation consists of removing a subarray (a contiguous portion of the array). The cost of each operation is the sum of elements in the subarray being removed. Your task is to minimize the total cost of removing all elements from the array. To achieve this, you need to remove all elements of the array in a specific sequence of subarray removals that minimizes the total removal cost, and then return this minimal cost. Input: - The first line contains an integer **T** (1 ≤ T ≤ 100), the number of queries. - For each query: - The first line contains a single integer **n** (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains **n** integers representing the elements of the array **arr**, where each element is an integer within the range [-10^4, 10^4]. Output: For each query, print the minimum total cost to remove all elements from the array. Example Input: 3 3 1 2 3 4 4 -1 2 3 2 -5 -10 Output: 6 10 -15 Note: 1. In the first query, the optimal sequence is to remove subarrays [1, 2, 3] one by one. The cost is 1 + 2 + 3 = 6. 2. In the second query, we can remove [4], then [-1, 2, 3] with the cost of 4 + 4 * (-1 + 2 + 3) = 10. 3. In the third query, we can remove [-5, -10] directly with the cost of -5 + (-10) = -15.","solution":"def min_removal_cost(T, queries): results = [] for query in queries: n, arr = query total_cost = sum(arr) results.append(total_cost) return results # Example usage: # T = 3 # queries = [ # (3, [1, 2, 3]), # (4, [4, -1, 2, 3]), # (2, [-5, -10]) # ] # print(min_removal_cost(T, queries)) # Output: [6, 8, -15]"},{"question":"Problem In a custom-built board game, two players, Alice and Bob, take turns to play on a rectangular grid board with dimensions M x N. The grid initially has some cells marked as blocked, signifying that these cells cannot be played on. Alice and Bob place their tokens on distinct cells during their respective turns. The objective for both players is to place their token on a cell such that their tokens are maximally spaced apart. Alice always starts the game. Given the dimensions of the grid and the coordinates of the blocked cells, your task is to determine the maximum possible Manhattan distance between the positions where Alice and Bob place their initial tokens. The Manhattan distance between two points (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. Constraints * 2 ≤ M, N ≤ 500 * 0 ≤ B ≤ M * N * Each blocked cell\'s coordinates are distinct. Input The input is given in the following format. M N B x1 y1 x2 y2 ... xB yB The first row contains two integers M and N that represent the dimensions of the board. The second row contains an integer B, the number of blocked cells. The next B rows each contain two integers xi and yi, representing the coordinates of each blocked cell. Output Output the maximum possible Manhattan distance between the positions of Alice\'s and Bob\'s initial tokens. Examples Input 5 5 3 1 2 3 4 4 1 Output 8 Input 4 4 0 Output 6","solution":"def max_manhattan_distance(M, N, blocked_cells): def is_valid(x, y): return 0 <= x < M and 0 <= y < N and (x, y) not in blocked blocked = set(blocked_cells) max_dist = 0 points = [] for i in range(M): for j in range(N): if not is_valid(i, j): continue for k in range(M): for l in range(N): if not is_valid(k, l): continue dist = abs(i - k) + abs(j - l) if dist > max_dist: max_dist = dist points = [(i, j), (k, l)] return max_dist # Example usage: # M, N = 5, 5 # blocked_cells = [(1, 2), (3, 4), (4, 1)] # print(max_manhattan_distance(M, N, blocked_cells)) # Output: 8"},{"question":"A chat application maintains user activity logs, recording the sessions when users are active. During each active session, the system records two events: the login and logout times (in seconds) since the epoch (00:00:00 UTC on 1 January 1970). Your task is to determine the total number of seconds that any user was active, ensuring that overlapping times are not counted multiple times. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of login/logout event pairs. The next `n` lines each contain two integers `login` and `logout` (0 ≤ login < logout ≤ 10^6) — the login and logout times, respectively. Output Print a single integer — the total number of seconds during which any user was active. Examples Input 3 1 5 2 6 8 10 Output 7 Input 4 1 3 2 5 6 8 7 9 Output 7 Input 2 0 4 4 8 Output 8","solution":"def total_active_time(n, sessions): Given the number of sessions and their respective login and logout times, calculate the total number of unique seconds during which any user was active. Args: - n: Number of login/logout event pairs (int) - sessions: List of tuples with login and logout times (list of tuples of ints) Returns: - Total number of unique active seconds (int) # List to hold all time intervals intervals = [] for login, logout in sessions: intervals.append((login, logout)) # Sort intervals by login time intervals.sort() total_time = 0 current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # Overlapping interval current_end = max(current_end, end) else: # Non-overlapping interval total_time += current_end - current_start current_start, current_end = start, end # Don\'t forget to add the last interval total_time += current_end - current_start return total_time # Example usage: # print(total_active_time(3, [(1, 5), (2, 6), (8, 10)])) -> Output should be 7"},{"question":"You are given a matrix with n rows and m columns, and some cells are blocked. A robot is placed in the top-left corner of the matrix (position (1, 1)), and it can only move to the right or down. The task is to count the number of unique paths the robot can take to reach the bottom-right corner of the matrix (position (n, m)), given that it cannot move through blocked cells. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the matrix. - The next n lines each contain m characters \'O\' or \'X\'. \'O\' represents an open cell and \'X\' represents a blocked cell. Output: - Output a single integer — the number of unique paths from the top-left corner to the bottom-right corner. Examples: Input: 3 3 OOO OXO OOO Output: 2 Input: 2 2 OO OO Output: 2 Input: 4 4 OOOO OXXO OOXO OOOO Output: 3 Note: In the first example, there are 2 unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there are 2 unique paths: 1. Right -> Down 2. Down -> Right In the third example, there are 3 unique paths: 1. Right -> Right -> Down -> Down -> Down 2. Down -> Down -> Right -> Right -> Right 3. Down -> Right -> Down -> Down -> Right","solution":"def unique_paths(n, m, grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid grid (List[List[str]]): the grid representation where \'O\' is an open cell and \'X\' is a blocked cell Returns: int: number of unique paths from (1, 1) to (n, m) if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'X\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"In a distant galaxy far away, there exists an ancient communication network of nodes connected by directed and weighted edges. These nodes exchange messages using distinct paths. A node wants to send a message to another node with the least amount of interference. The interference of a path between two nodes is defined as the maximum weight of any edge in that path. Given a graph with N nodes and M edges, and Q queries, each asking for the minimum interference between two nodes, your task is to determine the result for each query. Input: The first line contains T, the number of test cases. Each test case comprises the following: - The first line contains three space-separated integers, N, M, and Q. - The next M lines contain three space-separated integers u, v, and w, indicating there is a directed edge from node u to node v with weight w. - The next Q lines contain two space-separated integers x and y, representing a query asking for the minimum interference from node x to node y. Output: For each query, output the minimum interference from node x to node y in a new line. If there is no path between nodes x and y, print -1 for that query. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ Q ≤ 100 1 ≤ u, v, x, y ≤ N 1 ≤ w ≤ 1000 Sample Input 2 4 4 2 1 2 3 1 3 4 2 4 2 3 4 1 1 4 3 4 3 3 1 1 2 1 2 3 2 3 1 3 2 3 Sample Output 3 1 2 Explanation: In test case 1: Query 1: The path from node 1 to node 4 with the minimum interference is 1 -> 2 -> 4 with weights [3, 2]. The maximum weight in this path is 3. Query 2: The path from node 3 to node 4 has only one edge with weight 1, resulting in interference of 1. In test case 2: Query 1: The path from node 2 to node 3 has only one edge with weight 2, resulting in interference of 2.","solution":"import sys import heapq def min_interference(t, test_cases): results = [] def dijkstra(graph, start, n): # distance array to store max weight path distances = [sys.maxsize] * (n + 1) distances[start] = 0 pq = [(0, start)] # (max weight in path, node) while pq: curr_max_wt, node = heapq.heappop(pq) if curr_max_wt > distances[node]: continue for neighbor, weight in graph[node]: max_wt = max(curr_max_wt, weight) if max_wt < distances[neighbor]: distances[neighbor] = max_wt heapq.heappush(pq, (max_wt, neighbor)) return distances for case in test_cases: N, M, Q = case[\\"meta\\"] edges = case[\\"edges\\"] queries = case[\\"queries\\"] graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) for x, y in queries: if x == y: results.append(0) continue distances = dijkstra(graph, x, N) result = distances[y] if distances[y] != sys.maxsize else -1 results.append(result) return results # Test processing def process_test_input(test_input): lines = test_input.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N, M, Q = map(int, lines[index].split()) index += 1 edges = [] for _ in range(M): edges.append(tuple(map(int, lines[index].split()))) index += 1 queries = [] for _ in range(Q): queries.append(tuple(map(int, lines[index].split()))) index += 1 test_cases.append({ \\"meta\\": (N, M, Q), \\"edges\\": edges, \\"queries\\": queries }) return T, test_cases def main(test_input): T, test_cases = process_test_input(test_input) results = min_interference(T, test_cases) for result in results: print(result) # Example usage test_input = 2 4 4 2 1 2 3 1 3 4 2 4 2 3 4 1 1 4 3 4 3 3 1 1 2 1 2 3 2 3 1 3 2 3 main(test_input)"},{"question":"A series of tasks is to be processed by a single processor. Each task has a specific start and end time, and the processor can only process one task at a time. Given the list of tasks, determine the maximum number of non-overlapping tasks that can be completed. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of tasks. - Each of the next `n` lines contains two integers `si` and `ei` (0 ≤ si < ei ≤ 10^9) — the start and end time of the i-th task. # Output - Print a single integer — the maximum number of non-overlapping tasks that can be completed. # Examples Input ``` 5 1 3 2 5 4 6 6 7 5 9 ``` Output ``` 3 ``` Input ``` 3 1 2 2 3 3 4 ``` Output ``` 3 ``` # Note In the first example, the optimal set of tasks to complete is (1, 3), (4, 6), and (6, 7), resulting in 3 tasks completed. In the second example, all tasks can be completed since they do not overlap. In this problem, each task is non-preemptive, meaning once started, it must be completed before starting another task. This is a typical interval scheduling maximization problem.","solution":"def max_non_overlapping_tasks(n, tasks): Determines the maximum number of non-overlapping tasks that can be completed. Args: n (int): The number of tasks. tasks (list of tuples): Each tuple contains the start and end time of a task (si, ei). Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end times tasks.sort(key=lambda x: x[1]) # Initialize the end time of the last finished task end_time = 0 count = 0 # Iterate through the tasks for task in tasks: if task[0] >= end_time: # If the start time of the current task is greater or equal to # the end time of the last finished task, we can schedule it. count += 1 end_time = task[1] return count"},{"question":"Tim is planning a trip to a new city and wants to visit several tourist attractions. Each attraction has specific opening and closing times. Tim wants to create a schedule that allows him to visit the maximum number of attractions without any overlaps in their visiting times. Help Tim by writing a program to find the maximum number of non-overlapping attractions he can visit. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of attractions. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^6), representing the opening and closing times of the ith attraction. Output Output a single integer, the maximum number of attractions Tim can visit without any overlaps. Examples Input 4 1 3 2 5 4 6 6 8 Output 3 Input 3 5 7 1 4 6 8 Output 2 Input 5 1 2 3 5 4 6 7 9 8 10 Output 3 Note In the first example, Tim can visit attractions at times (1, 3), (4, 6), and (6, 8), resulting in a total of 3 non-overlapping visits.","solution":"def max_attractions(n, attractions): Returns the maximum number of non-overlapping attractions Tim can visit. Parameters: n (int): The number of attractions. attractions (List[Tuple[int, int]]): A list of tuples where each tuple contains the opening and closing times (si, ei) of an attraction. Returns: int: The maximum number of non-overlapping attractions Tim can visit. # Sort attractions by their ending times attractions.sort(key=lambda x: x[1]) max_count = 0 last_end_time = -1 for start, end in attractions: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"Given an array of integers, you\'re required to partition the array into two subsets such that the difference of their sums is minimized. Your task is to write a program that calculates this minimum difference. # Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers Ai (1 ≤ Ai ≤ 100000), the elements of the array. # Output Print the minimum difference possible between the sums of the two subsets. # Examples Input 6 3 1 4 2 2 1 Output 1 Input 4 1 2 3 9 Output 3 Explanation In the first example, the array can be partitioned into {3, 1, 2} and {4, 2, 1} which have sums 6 and 7, respectively. The difference is |7 - 6| = 1. In the second example, the array can be partitioned into {1, 2, 3} and {9} which have sums 6 and 9, respectively. The difference is |9 - 6| = 3. To solve this problem, you can use a dynamic programming approach similar to the knapsack problem, where you aim to find the subset that is closest to half of the total sum.","solution":"def min_subset_diff(arr): Returns the minimum difference possible between the sums of two subsets of arr. total_sum = sum(arr) n = len(arr) half_sum = total_sum // 2 dp = [[False] * (half_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(0, half_sum + 1): if j >= arr[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] for j in range(half_sum, -1, -1): if dp[n][j]: return (total_sum - 2*j) return total_sum # In worst case, the total sum difference is the total sum itself"},{"question":"A company is managing their product inventory and needs to keep track of sales and stock replenishments in order of their occurrences. You are tasked with writing a program to manage this inventory based on a series of operations. Input The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of operations to be performed. Each of the next n lines contains an operation in one of the following formats: - \'S x y\': indicating a sale of x units of product y (1 ≤ x ≤ 100, 1 ≤ y ≤ 50). - \'R x y\': indicating a restock of x units of product y (1 ≤ x ≤ 100, 1 ≤ y ≤ 50). Assume that no operation will result in the stock of any product going below zero. Output For each sale (S) operation, output the remaining stock of the respective product after the sale in a new line. Examples Input 5 R 30 1 S 10 1 R 20 2 S 5 1 S 10 2 Output 20 15 10","solution":"def manage_inventory(n, operations): Manage inventory based on a series of operations. Parameters: n : int Number of operations. operations : list of str List of operations either in \'S x y\' (sale) or \'R x y\' (restock) format. Returns: list of int List of remaining stock after each sale operation. # Initialize the dictionary to keep track of product stocks inventory = {i: 0 for i in range(1, 51)} # Output list to store the result after each sale operation result = [] for operation in operations: op = operation.split() if op[0] == \'S\': x, y = int(op[1]), int(op[2]) inventory[y] -= x result.append(inventory[y]) elif op[0] == \'R\': x, y = int(op[1]), int(op[2]) inventory[y] += x return result"},{"question":"Your friend loves puzzles and has come up with a unique one. Given a string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Write a function that checks whether the string is valid and returns \\"YES\\" if it is valid, otherwise return \\"NO\\". Input The input contains a single string s (1 ≤ |s| ≤ 104) which consists only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output The function must return a string: \\"YES\\" if the string is valid, otherwise return \\"NO\\". Examples Input ()[]{} Output YES Input ([{}]) Output YES Input (] Output NO Input ([{]) Output NO","solution":"def is_valid_brackets(s): Check if the string of brackets is valid. Args: s (string): A string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: string: \\"YES\\" if the string is valid, otherwise \\"NO\\". stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given an undirected graph G = (V, E), where V is a set of vertices and E is a set of edges, an independent set is a subset of vertices such that no two vertices in the subset are adjacent. Given a graph, find the size of the maximum independent set. Constraints * 1 ≤ V ≤ 100 * 0 ≤ E ≤ 4,950 Input V E v1 v2 v3 v4 : v|E|-1 v|E|-1 V is the number of vertices and E is the number of edges in the graph G. The vertices are named with the numbers 0, 1,..., V-1. Each pair vi vj represents an edge between vertex vi and vertex vj. Output Print the size of the maximum independent set. Example Input 5 6 0 1 0 2 1 2 1 3 2 4 3 4 Output 2","solution":"from itertools import combinations def is_independent_set(graph, subset): Check if the given subset of vertices form an independent set in the graph. for v1, v2 in combinations(subset, 2): if v2 in graph[v1]: return False return True def max_independent_set_size(V, edges): Return the size of the maximum independent set in the graph. graph = {i: set() for i in range(V)} for v1, v2 in edges: graph[v1].add(v2) graph[v2].add(v1) max_size = 0 for r in range(V + 1): for subset in combinations(range(V), r): if is_independent_set(graph, subset): max_size = max(max_size, len(subset)) return max_size"},{"question":"Takahashi is practicing for a marathon by running along a straight road between two cities, A and B. There are N checkpoints along the road, each located at a distinct distance from city A. He wants to know how far he has run based on the checkpoints he has passed. You need to calculate the total distance Takahashi has covered given the checkpoints he has passed. Each checkpoint i (1leq i leq N) is at a distance D_i from city A. The checkpoints Takahashi has passed are represented by a binary string P of length N, where the i-th character of P is \'1\' if Takahashi has passed checkpoint i, and \'0\' otherwise. Constraints * 1 leq N leq 10^5 * 1 leq D_i leq 10^6 * P_i is \'0\' or \'1\' Input Input is given from Standard Input in the following format: N D_1 D_2 ... D_N P Output Print the total distance Takahashi has covered based on the checkpoints he has passed. Example Input 5 10 20 30 40 50 11010 Output 70 Input 4 5 15 25 35 1001 Output 40","solution":"def total_distance_covered(N, D, P): Calculates the total distance covered by Takahashi based on the checkpoints he has passed. :param N: Number of checkpoints :param D: List of distances of each checkpoint from city A :param P: Binary string indicating whether Takahashi passed each checkpoint :return: Total distance covered total_distance = 0 for i in range(N): if P[i] == \'1\': total_distance += D[i] return total_distance"},{"question":"You are given an integer array `arr` of length `n`, where `n` is always even. Your task is to group the elements of `arr` into pairs such that the maximum sum of elements in any pair is minimized. For example, if you have an array [1, 4, 3, 2], you can pair (1, 4) and (3, 2). Write a function `min_max_pair_sum` that takes in `arr` and returns the minimized maximum sum of any pair. Function Signature ```python def min_max_pair_sum(arr: List[int]) -> int: ``` Input - An integer array `arr` of length `n` (2 ≤ n ≤ 10^5, n is always even). Output - An integer, the minimized maximum sum of any pair. Examples # Example 1: ```python arr = [1, 4, 3, 2] # After pairing (1, 2) and (3, 4), the maximum sum of the pairs is max(1+2, 3+4) = 7. min_max_pair_sum(arr) -> 5 # Another optimal pairing is (1, 3) and (2, 4), where the maximum sum is max(1+3, 2+4) = 6. # But the minimized maximum sum is 5. ``` # Example 2: ```python arr = [5, 1, 8, 7, 2, 3] # After pairing (1, 8) and (2, 7) and (3, 5), the maximum sum of the pairs is max(1+8, 2+7, 3+5) = 9. min_max_pair_sum(arr) -> 9 ```","solution":"from typing import List def min_max_pair_sum(arr: List[int]) -> int: arr.sort() # Sort the array n = len(arr) max_pair_sum = 0 for i in range(n // 2): current_pair_sum = arr[i] + arr[n - 1 - i] max_pair_sum = max(max_pair_sum, current_pair_sum) return max_pair_sum"},{"question":"Problem statement You are given a string containing only \'0\'s and \'1\'s. You can flip exactly one \'0\' to \'1\' to make the string containing the longest contiguous segment of \'1\'s. You need to determine the length of the longest contiguous segment of \'1\'s that can be created by flipping exactly one \'0\' to \'1\'. For example, if the string is \\"11011001111\\", you can turn the 3rd \'0\' (1-based index) into a \'1\' to form the string \\"11111001111\\", and the longest contiguous segment of \'1\'s would be 5. Implement a function that takes a binary string and returns the length of this segment. Function Signature: ```python def longest_contiguous_segment(binary_string: str) -> int: pass ``` INPUT - A single string `binary_string` which consists only of \'0\'s and \'1\'s. OUTPUT - An integer which is the length of the longest contiguous segment of \'1\'s that can be obtained by flipping exactly one \'0\' to \'1\'. CONSTRAINTS - The length of `binary_string` will be between 1 and 10^5. EXAMPLE Input `\\"11011001111\\"` Output `5` Input `\\"1111\\"` Output `4` Input `\\"000\\"` Output `1`","solution":"def longest_contiguous_segment(binary_string: str) -> int: n = len(binary_string) if \'0\' not in binary_string: return n max_length = 0 left = [0] * n right = [0] * n count = 0 for i in range(n): if binary_string[i] == \'1\': count += 1 else: count = 0 left[i] = count count = 0 for i in range(n-1, -1, -1): if binary_string[i] == \'1\': count += 1 else: count = 0 right[i] = count for i in range(n): if binary_string[i] == \'0\': left_segment = left[i-1] if i > 0 else 0 right_segment = right[i+1] if i < n - 1 else 0 max_length = max(max_length, left_segment + 1 + right_segment) return max_length"},{"question":"Write a program that finds the second smallest unique number in a list of integers. Constraints * The list will contain at least two unique integers. * Each integer in the list will be between 1 and 10^6. Input The first line contains an integer n, the number of integers in the list. The second line contains n space-separated integers. Output Print the second smallest unique integer in the list. If there is no second smallest unique integer, print -1. Example Input 6 5 1 4 3 3 2 Output 2 Explanation From the input, the unique numbers are [5, 1, 4, 2]. The smallest unique number is 1 and the second smallest unique number is 2. Example Input 4 2 3 4 2 Output 4","solution":"def second_smallest_unique_number(numbers): Finds the second smallest unique number in a list of integers. :param numbers: List of integers :return: Second smallest unique integer or -1 if there is no such number from collections import Counter # count frequency of each number frequency = Counter(numbers) # filter out unique numbers unique_numbers = [number for number, count in frequency.items() if count == 1] if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Alex is a wildlife photographer who loves to capture images of birds. To organize his collection, he has decided to classify each bird photograph based on unique colors present in the image. To do this, he\'s written down the color codes of the birds he has captured. However, there are some duplicate photographs in his collection, and he wants to remove these duplicates based on unique color codes in the color list. Write a function to help Alex remove duplicate photographs from his collection such that each photograph in the final list has a unique color code combination. Two photographs are considered duplicates if they contain the exact same set of color codes. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of photographs in Alex\'s collection. Each of the next n lines contains a space-separated list of integers, indicating the color codes present in each photograph. Each color code is an integer between 1 and 10^6. Output: Output the number of unique photographs that Alex will have after removing duplicates. Examples: Input: 4 1 2 3 4 5 6 1 2 3 2 3 1 Output: 2 Input: 3 5 5 5 1 2 2 5 5 Output: 3 Note: In the first example, the color codes in the first, third and fourth photographs are all the same set {1, 2, 3}, so only one of these should remain in the final collection. Therefore, only two unique photographs remain in the end.","solution":"def remove_duplicate_photographs(n, photographs): Returns the number of unique photographs after removing duplicates based on color codes. Parameters: n (int): Number of photographs. photographs (list of list of int): List containing color codes of each photograph. Returns: int: Number of unique photographs. unique_photographs = set() for photograph in photographs: sorted_colors = tuple(sorted(photograph)) unique_photographs.add(sorted_colors) return len(unique_photographs)"},{"question":"A book inventory system needs to keep track of books in a library. Each book has a unique identifier and belongs to one of several categories. Periodically, the system needs to generate reports about the number of books in each category. You are tasked with writing a function to generate such a report. Specifically, the function should take a list of book entries and return the count of books in each category. Each book entry is represented as a dictionary with two keys: - `id`: an integer representing the unique identifier of the book. - `category`: a string representing the category of the book. Your function should return a dictionary where the keys are the categories and the values are the counts of books in those categories. Constraints: - The list of book entries can contain between 1 and 100,000 entries. - There are at most 1,000 unique categories. - Category names are non-empty strings and do not contain any whitespace. - Each `id` is unique and lies within the range 1 to 1,000,000. Input A list of book entries where each book entry is represented as a dictionary. Output A dictionary where keys are the category names and values are the counts of books in those categories. Examples ```python Input [ {\\"id\\": 1, \\"category\\": \\"Fiction\\"}, {\\"id\\": 2, \\"category\\": \\"Science\\"}, {\\"id\\": 3, \\"category\\": \\"Fiction\\"}, {\\"id\\": 4, \\"category\\": \\"Math\\"}, {\\"id\\": 5, \\"category\\": \\"Science\\"} ] Output { \\"Fiction\\": 2, \\"Science\\": 2, \\"Math\\": 1 } ``` ```python Input [ {\\"id\\": 1, \\"category\\": \\"A\\"}, {\\"id\\": 2, \\"category\\": \\"A\\"}, {\\"id\\": 3, \\"category\\": \\"B\\"} ] Output { \\"A\\": 2, \\"B\\": 1 } ``` ```python Input [ {\\"id\\": 1, \\"category\\": \\"History\\"} ] Output { \\"History\\": 1 } ```","solution":"def generate_category_report(books): Generates a report of number of books in each category. Parameters: books (list of dict): A list where each dictionary represents a book with unique id and category. Returns: dict: A dictionary where keys are category names and values are the counts of books in those categories. category_count = {} for book in books: category = book[\\"category\\"] if category in category_count: category_count[category] += 1 else: category_count[category] = 1 return category_count"},{"question":"Given an array of non-negative integers, find the two numbers such that they form the maximum product among all pairs of numbers in the array. Return the maximum product and the pair of numbers. Constraints * The length of the array is at least 2 and does not exceed 1000. * Each number in the array is non-negative and does not exceed 10^4. Input The input is given in the following format: - The first line contains a single integer n: the number of elements in the array. - The second line contains n space-separated non-negative integers: a_1, a_2, ..., a_n. Output Print the maximum product and the pair of numbers in a line respectively, with the pair of numbers separated by a space. Examples Input 5 1 20 30 40 50 Output 2000 40 50 Input 4 3 6 8 2 Output 48 6 8","solution":"def max_product_pair(n, arr): Returns the maximum product of two numbers in the array and the pair of numbers. Parameters: n (int): number of elements in the array arr (list): list of non-negative integers Returns: tuple: tuple containing the maximum product, and the pair of numbers if n < 2: raise ValueError(\\"Array should contain at least two elements.\\") max1 = max2 = 0 # Find the two largest numbers in the array for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num max_product = max1 * max2 return (max_product, max1, max2)"},{"question":"You are given an integer array `nums` representing an elevation map where the width of each bar is `1`. Some bars form valleys filled with water after raining. Write a function that computes how much water it can trap after raining. The elevation map is a list of non-negative integers where each position represents the height of the bar at that position. The amount of water trapped by each bar is equal to the minimum of the maximum height to the left and the maximum height to the right of the bar, minus the height of the bar itself. Sum these values to get the total amount of trapped water. Input The input is a single line containing space-separated integers representing the elevation heights. The length of the list is from `1` to `10^4`, and each elevation height is between `0` and `10^5`. Output Print the total amount of water that can be trapped. Examples Input 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 4 2 0 3 2 5 Output 9","solution":"def trap_rain_water(heights): Computes the total amount of water that can be trapped after raining, given the elevation heights. Parameters: heights (list): A list of non-negative integers representing the elevation map. Returns: int: The total amount of trapped water. if not heights or len(heights) <= 2: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Hana the Gardener is working on an interesting problem related to her garden. She has designated certain areas of her garden as flower patches. The garden can be represented as a grid of cells, where each cell can either be part of a flower patch or not. Hana wants to find the largest rectangular area within the grid that contains only flower patches. You are given a 2D grid representing the garden. Each cell contains either a \'1\' (indicating it is part of a flower patch) or a \'0\' (indicating it is not). Write a function to find the area of the largest rectangle containing only \'1\'s and return that area. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 200) representing the dimensions of the grid. - Each of the following m lines contains n binary digits (\'0\' or \'1\') representing the grid cells. Output - Print a single integer, the area of the largest rectangle containing only \'1\'s. # Example **Input:** 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 **Output:** 6 # Note In the example provided, the largest rectangle of flower patches is of area 6, corresponding to the rectangle formed by the last three rows and the last three columns of \'1\'s.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 m, n = len(matrix), len(matrix[0]) height = [0] * (n + 1) for i in range(m): stack = [] for j in range(n + 1): if j < n: if matrix[i][j] == \'1\': height[j] += 1 else: height[j] = 0 while stack and height[stack[-1]] > height[j]: h = height[stack.pop()] w = j if not stack else j - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(j) return max_area"},{"question":"A valid word in a text can usually be nested within another word. For example, the word \\"pointer\\" contains these valid nested words: \\"point\\", \\"inter\\", \\"pointe\\", \\"ointe\\", etc. In this problem, your task is to determine if a given word `w` can be constructed by combining letters from a word `t` without rearranging them. Note that contiguous letters from `t` are required to form `w`. Write code that checks if the word `w` can be formed by combining the letters of word `t` in the existing order. Input The first line of the input contains the word `t` (1 ≤ |t| ≤ 200,000). The second line contains the word `w` (1 ≤ |w| ≤ |t|). Both words consist of lowercase English letters. Output Print \\"YES\\" if the word `w` can be formed by combining contiguous letters from `t`, and \\"NO\\" otherwise. Examples Input pointer point Output YES Input pointer pointr Output NO Input hello heho Output NO Note In the first example, \\"point\\" is a contiguous subset of \\"pointer\\", so the output is \\"YES\\". In the second example, although \\"pointr\\" contains letters from \\"pointer\\", it requires rearranging, so the output is \\"NO\\". In the third example, \\"hello\\" and \\"heho\\" share some letters, but they are not in the required contiguous order.","solution":"def can_form_word(t, w): Determines if word w can be formed by combining contiguous letters from word t. Parameters: t (str): The base word from which to form another word. w (str): The word that needs to be checked if it can be formed. Returns: str: \\"YES\\" if w can be formed, otherwise \\"NO\\". if w in t: return \\"YES\\" else: return \\"NO\\""},{"question":"You are a software developer working on a database-related problem. Your task is to maintain a version history log for each user in a system. Each version of user data is represented by an integer. You have to implement a function to add new versions, retrieve the latest version, and retrieve the version at a particular timestamp. Implement a data structure that supports the following operations: 1. `addVersion(userId, version)`: Adds a new version for the given user. 2. `getVersion(userId)`: Returns the latest version of data for the given user. 3. `getVersionAtTime(userId, timestamp)`: Returns the version for the given user at the specified timestamp. Each userId is a positive integer, each version is an integer, and timestamp is a positive integer representing the order of version additions. The operations should be efficient to handle a large number of users and versions. Input The first line contains an integer q (1 ≤ q ≤ 10^5) — the number of operations. Each of the next q lines represents an operation in one of the following formats: 1. `1 userId version`: Add a new version for the user with the given userId. 2. `2 userId`: Get the latest version of data for the given user. 3. `3 userId timestamp`: Get the version of data for the given user at the specified timestamp. Output For each operation of type 2 or 3, output the result on a new line. Example Input 6 1 1 100 1 2 200 2 1 1 1 150 3 1 1 3 2 1 Output 100 100 200 Note For the queries `getVersionAtTime(userId, timestamp)`, it is guaranteed that the timestamp always corresponds to a valid version addition time for the given userId.","solution":"class VersionHistoryLog: def __init__(self): self.user_versions = {} def addVersion(self, userId, version): if userId not in self.user_versions: self.user_versions[userId] = [] self.user_versions[userId].append(version) def getVersion(self, userId): if userId in self.user_versions and self.user_versions[userId]: return self.user_versions[userId][-1] return None def getVersionAtTime(self, userId, timestamp): if userId in self.user_versions and 0 <= timestamp-1 < len(self.user_versions[userId]): return self.user_versions[userId][timestamp-1] return None"},{"question":"A programming academy wants to create a leaderboard that ranks students based on their cumulative test scores across multiple exams. The leaderboard should display students in descending order of their total score. In case of a tie in total score, students should appear in ascending order of their student IDs. Given the number of students and their scores in each test, write a program to generate the leaderboard. Input: - First line contains two integers N and M where N is the number of students and M is the number of exams. - Next N lines contain M integers each, representing the scores of a student in each exam. - Each of these N lines starts with an integer representing the `student_id` followed by M integers representing their scores. Output: - For each student, print one line containing the `student_id` and their total score, ordered as described above. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 50 0 ≤ score ≤ 100 1 ≤ student_id ≤ 10^9 SAMPLE INPUT 4 3 101 90 85 88 104 78 89 95 102 100 90 90 103 90 85 85 SAMPLE OUTPUT 102 280 101 263 103 260 104 262","solution":"def generate_leaderboard(N, M, students_scores): Generates a leaderboard based on cumulative scores of students across multiple exams. Students are ranked in descending order of their total scores. In case of tie, students are sorted by their student IDs in ascending order. Args: N : int : number of students M : int : number of exams students_scores : list of list : each inner list starts with student ID followed by their scores in M exams Returns: list of tuples : each tuple contains student ID and their total score # Prepare a list of tuples, each containing (student_id, total_score) leaderboard = [] for scores in students_scores: student_id = scores[0] total_score = sum(scores[1:]) leaderboard.append((student_id, total_score)) # Sort the leaderboard as required # First by total_score in descending order and then by student_id in ascending order in case of a tie leaderboard.sort(key=lambda x: (-x[1], x[0])) return leaderboard"},{"question":"Problem Statement A data analyst was given the task to examine a dataset containing the salaries of the employees in a company. She wants to identify the nth highest unique salary from this dataset. Write a program that accepts a list of salaries and an integer n, which represents the nth highest unique salary to be found. If there are fewer than n unique salaries, return \\"Not possible\\". Input: - A list of integers where each integer represents a salary. - An integer n representing the nth highest unique salary. Output: - The nth highest unique salary if it exists, otherwise \\"Not possible\\". Example Input: [120000, 85000, 120000, 90000, 100000] 2 Output: 100000 Input: [70000, 70000, 50000] 3 Output: Not possible","solution":"def nth_highest_unique_salary(salaries, n): Returns the nth highest unique salary from a list of salaries. If there are fewer than n unique salaries, returns \\"Not possible\\". unique_salaries = sorted(set(salaries), reverse=True) if len(unique_salaries) >= n: return unique_salaries[n-1] else: return \\"Not possible\\""}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},R=["disabled"],C={key:0},F={key:1};function z(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",F,"Loading...")):(n(),i("span",C,"See more"))],8,R)):h("",!0)])}const D=d(S,[["render",z],["__scopeId","data-v-e4d1d1fb"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/48.md","filePath":"deepseek/48.md"}'),M={name:"deepseek/48.md"},U=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,U as default};
