import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-17dd850b"]]),S=JSON.parse('[{"question":"Write a function `game_board` that generates an `n x n` grid for a game board using a specified character. The function should be able to fill the border of the grid with one character, and optionally, fill the inside of the grid with another character. If no inner character is provided, the inside of the grid should remain empty. Your task is to implement the following function: ``` def game_board(n: int, border_char: str, inner_char: str = \'\') -> List[str]: ``` # Input - `n`: An integer ( 3 leq n leq 50 ), representing the size of the grid. - `border_char`: A string of exactly one character used to fill the border of the grid. - `inner_char`: (Optional) A string of exactly one character used to fill the inside of the grid. If not provided, the inside should be empty. # Output - A list of `n` strings, each of length `n`, representing the grid. # Example ``` game_board(5, \'#\') # Output: [ \\"#\\", \\"# #\\", \\"# #\\", \\"# #\\", \\"#\\" ] game_board(4, \'*\', \'@\') # Output: [ \\"****\\", \\"*@@*\\", \\"*@@*\\", \\"****\\" ] ``` # Constraints - The length of `border_char` and `inner_char` should be exactly one. # Requirements - Do not use any external libraries. - Handle edge cases, such as minimum and maximum values of `n`.","solution":"def game_board(n: int, border_char: str, inner_char: str = \'\') -> list: Generates an n x n grid with border and optional inner fill characters. :param n: integer (3 <= n <= 50), size of the grid. :param border_char: single character for the border. :param inner_char: (optional) single character for the inner fill. :return: list of n strings, each of length n, representing the grid. if not (3 <= n <= 50): raise ValueError(\\"n must be between 3 and 50\\") if len(border_char) != 1: raise ValueError(\\"border_char must be a single character\\") if inner_char and len(inner_char) != 1: raise ValueError(\\"inner_char must be a single character\\") # Create top and bottom borders top_bottom = border_char * n # Create middle rows middle = border_char + (inner_char * (n - 2) if inner_char else \' \' * (n - 2)) + border_char # Assemble the board return [top_bottom] + [middle] * (n - 2) + [top_bottom]"},{"question":"You are given a string S consisting of uppercase English letters. Each letter has a particular value: the value of the letter \'A\' is 1, the value of the letter \'B\' is 2, ..., and the value of the letter \'Z\' is 26. In a single operation, you can choose any substring of S and replace it with its value. For example, the substring \'AB\' can be replaced with \'1 2\'. The goal is to perform these operations until the string S consists strictly of numbers. Help to calculate the sum of all values after performing the operations on S. -----Input----- First line: An integer T - the number of test cases. T test cases follow. Each test case consists of a single line containing the string S of length N. -----Output----- For each test case, output a single line containing the sum of the values of all characters in S after performing the operations. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - \'A\' ≤ S[i] ≤ \'Z\' -----Example----- Input: 2 ABC HELLO Output: 6 52 -----Explanation----- Example case 1. The string \'ABC\' can be transformed to \'1 2 3\'. The sum of these numbers is 6. Example case 2. The string \'HELLO\' can be transformed to \'8 5 12 12 15\'. The sum of these numbers is 52.","solution":"def calculate_sum_of_values(T, test_cases): Calculate the sum of values corresponding to the characters A-Z in each string of the test cases. Args: T (int): Number of test cases test_cases (list of str): List of strings for each test case Returns: list of int: List of sums for each test case results = [] for case in test_cases: total_value = 0 for char in case: total_value += ord(char) - ord(\'A\') + 1 results.append(total_value) return results"},{"question":"In the realm of data structures, linked lists are fundamental components that offer a dynamic and flexible way to manage collections of data. One common operation with singly linked lists is the reversal of the list. This involves rearranging the links between the nodes so that the first node becomes the last, the second becomes the second last, and so forth. This task may be useful, for example, in undo functionalities and various algorithmic manipulations. The structure of a node in a singly linked list is typically defined as: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` Given the head node of a singly linked list, your task is to write a program that reverses the linked list and returns the head node of the reversed list. Input - Your program should accept a sequence of datasets. Each dataset consists of a list of space-separated integers representing the values of the nodes in the linked list. The end of the input is indicated by a single line containing a single zero. - The number of integers in each dataset should be at least 1 and at most 1000. Output - For each dataset, output the values of the reversed linked list, each value separated by a space, on a new line. Example Input 1 2 3 4 5 10 20 30 40 7 6 5 4 0 Output 5 4 3 2 1 40 30 20 10 4 5 6 7","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def list_to_linked_list(values): Converts a list of values to a linked list. if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head def linked_list_to_list(head): Converts a linked list to a list of values. result = [] current = head while current: result.append(current.value) current = current.next return result def process_datasets(datasets): Processes multiple datasets of linked list values. results = [] for data in datasets: if data == \\"0\\": break values = list(map(int, data.split())) head = list_to_linked_list(values) reversed_head = reverse_linked_list(head) reversed_values = linked_list_to_list(reversed_head) results.append(\\" \\".join(map(str, reversed_values))) return results"},{"question":"Write a function that determines if an integer x can be represented as the sum of two squares. The function should return \\"Yes\\" if x can be expressed as a^2 + b^2 for some integers a and b, and \\"No\\" otherwise. Example 1: Input: x = 5 Output: Yes Explanation: 5 can be expressed as 1^2 + 2^2. Example 2: Input: x = 3 Output: No Explanation: 3 cannot be expressed as the sum of two squares. Example 3: Input: x = 10 Output: Yes Explanation: 10 can be expressed as 1^2 + 3^2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canBeSumOfSquares() which takes x as input and returns the answer. Expected Time Complexity: O(sqrt(x)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ x ≤ 10^{6}","solution":"import math def canBeSumOfSquares(x): Determines if an integer x can be represented as the sum of two squares. for a in range(int(math.isqrt(x)) + 1): b_squared = x - a*a if b_squared < 0: return \\"No\\" b = int(math.isqrt(b_squared)) if b*b == b_squared: return \\"Yes\\" return \\"No\\""},{"question":"Leo loves collecting trading cards. He\'s curious about how many complete sets of his favorite cards he can form. Each set of trading cards consists of exactly K unique cards. Leo has collected N trading cards. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing two integers, N and K. ------ Output Format ------ For each test case, output on a new line the maximum number of complete sets of trading cards Leo can form. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 100 ----- Sample Input 1 ------ 4 10 2 15 5 20 4 7 3 ----- Sample Output 1 ------ 5 3 5 2 ----- Explanation 1 ------ Test case 1: Leo can form 5 complete sets of 2 cards each using 10 cards. Test case 2: Leo can form 3 complete sets of 5 cards each using 15 cards. Test case 3: Leo can form 5 complete sets of 4 cards each using 20 cards. Test case 4: Leo can form 2 complete sets of 3 cards each using 7 cards.","solution":"def max_complete_sets(T, cases): results = [] for case in cases: N, K = case results.append(N // K) return results"},{"question":"Tom loves palindromes. A palindrome is a string that reads the same forward and backward. For example, \\"level\\" and \\"racecar\\" are palindromes. Tom has a list of N strings, and he would like to know how many of them are palindromes. Can you help him determine this? -----Input----- The first line of input consists of a single integer N, denoting the number of strings in Tom\'s list. Then, there are N lines, each of them contains a single string from the list. -----Output----- Output N lines. Each of these lines should contain either \\"YES\\" if the respective string from Tom\'s list is a palindrome, or \\"NO\\" if it is not. -----Constraints----- - 1 ≤ N ≤ 10^4 - 1 ≤ Length of each string ≤ 100 -----Example----- Input: 5 level hello racecar abcba world Output: YES NO YES YES NO","solution":"def is_palindrome(s: str) -> str: Returns \\"YES\\" if the string is a palindrome, otherwise returns \\"NO\\". if s == s[::-1]: return \\"YES\\" return \\"NO\\" def check_palindromes(strings): return [is_palindrome(s) for s in strings]"},{"question":"Write a function that takes in an unsorted list of integers and an integer k. The function will return the k-th smallest element in the list. Assume that all input integers are distinct. Example 1: Input: arr = [7, 10, 4, 3, 20, 15] k = 3 Output: 7 Explanation: The 3rd smallest element in the sorted order is 7. Example 2: Input: arr = [7, 10, 4, 3, 20, 15] k = 4 Output: 10 Explanation: The 4th smallest element in the sorted order is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthSmallest() which takes a list of integers called arr and an integer called k as input parameters and returns the k-th smallest element in the list. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 1000 1 ≤ arr[i] ≤ 100000 1 ≤ k ≤ len(arr)","solution":"def kthSmallest(arr, k): Returns the k-th smallest element in an unsorted list of integers. Parameters: arr (list): List of distinct integers. k (int): The index (1-based) for the k-th smallest element. Returns: int: The k-th smallest element in the list. # Step 1: Sort the list arr.sort() # Step 2: Return the (k-1)-th element of the sorted list return arr[k-1]"},{"question":"Write a Python function that takes in a list of integers and returns the length of the longest subarray where the difference between the maximum and minimum elements is at most 1. Constraints * The length of the provided list will be between 1 and 105. * Each integer in the list will be between -109 and 109. Input A list of integers. Output An integer representing the length of the longest subarray. Example Input [1, 2, 2, 3, 4, 2, 2, 1, 1] Output 4 Explanation The longest subarray with the required property is [2, 2, 2, 2] which has the length of 4.","solution":"def longest_subarray_with_condition(nums): def check_condition(subarray): return max(subarray) - min(subarray) <= 1 if not nums: return 0 max_length = 0 left = 0 for right in range(len(nums)): while left <= right and not check_condition(nums[left:right+1]): left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Takahashi loves playing a simple number game. He starts with an integer X in his mind. Takahashi then performs a series of moves according to a list of instructions. Each instruction is either \\"double\\" or \\"halve\\". If the instruction is \\"double\\", Takahashi multiplies the integer in his mind by 2. If the instruction is \\"halve\\", Takahashi divides the integer in his mind by 2 and rounds down to the nearest integer. You are given an integer X and a string of instructions S. The i-th character in S represents the i-th instruction for Takahashi to perform. Determine the integer in Takahashi\'s mind after all instructions have been performed. -----Constraints----- - The length of S is between 1 and 100 (inclusive). - Each character in S is either \'d\' for double or \'h\' for halve. - 1 ≤ X ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: X S -----Output----- Print the integer in Takahashi\'s mind after he performs all the instructions. -----Sample Input----- 3 dhd -----Sample Output----- 6 - Initially, the integer in Takahashi\'s mind is 3. - The first instruction is \'d\'. After performing it, the integer in his mind becomes 6. - The second instruction is \'h\'. After performing it, the integer in his mind becomes 3 (6 / 2). - The third instruction is \'d\'. After performing it, the integer in his mind becomes 6 (3 * 2). Thus, the integer in Takahashi\'s mind after all instructions is 6.","solution":"def takahashi_game(X, S): Perform a series of \'double\' and \'halve\' operations on the initial integer X according to the instructions in string S. for instruction in S: if instruction == \'d\': X *= 2 elif instruction == \'h\': X //= 2 return X"},{"question":"In a game called \\"Word Transformation\\", you are given two words, start and end, both of which have the same length. These two words are connected by a sequence of words such that each word in the sequence differs by exactly one letter from its predecessor. The task is to find the length of the shortest transformation sequence from start to end. Note that only one letter can be changed at a time and each intermediate word must exist in the provided word list (which includes both start and end words). If no such transformation is possible, return 0. Input Format: - The first line contains the start word. - The second line contains the end word. - The third line contains an integer n, the number of words in the word list. - The next n lines contain the words in the word list. Output: - Print the length of the shortest transformation sequence from start to end word. If no transformation is possible, print 0. Constraints: 1 ≤ n ≤ 500 1 ≤ length of any word ≤ 100 SAMPLE INPUT hit cog 6 hot dot dog lot log cog SAMPLE OUTPUT 5","solution":"from collections import deque def word_transformation_length(start, end, n, word_list): Returns the length of the shortest transformation sequence from start to end word. If no transformation is possible, returns 0. word_set = set(word_list) if end not in word_set: return 0 queue = deque([(start, 1)]) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word in word_set: queue.append((next_word, steps+1)) word_set.remove(next_word) return 0 # Example usage: start = \\"hit\\" end = \\"cog\\" n = 6 word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] print(word_transformation_length(start, end, n, word_list)) # Output: 5"},{"question":"Given an integer array and an integer K, determine if there exists a pair of distinct elements in the array whose sum is equal to K. Print YES if such a pair exists and NO otherwise. -----Constraints----- - 2 ≤ N ≤ 200000 - 1 ≤ A_i ≤ 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N K A_1 ... A_N -----Output----- Print YES if there exists a pair of distinct elements whose sum is equal to K; otherwise, print NO. -----Sample Input----- 6 9 1 4 45 6 10 8 -----Sample Output----- YES Explanation: The pair (1, 8) sums to 9, which is equal to K. -----Sample Input----- 5 10 1 2 3 4 5 -----Sample Output----- NO Explanation: There are no pairs of distinct elements that sum to 10.","solution":"def has_pair_with_sum(n, k, array): Determines if there exists a pair of distinct elements in the array whose sum equals k. :param n: Integer, the number of elements in the array :param k: Integer, the target sum for the pair :param array: List of integers, the array of elements :return: \'YES\' if a pair exists, \'NO\' otherwise seen = set() for num in array: if k - num in seen: return \'YES\' seen.add(num) return \'NO\'"},{"question":"You are working in a warehouse where there are multiple storage bins, each with a specific capacity that it can hold. The warehouse needs a system to efficiently allocate items of various sizes into these bins. The goal is to determine whether it\'s possible to place all given items into the bins without exceeding the capacity of any bin. For example, if there are 3 bins with capacities 10, 20, and 15, and you need to store items with sizes 5, 8, 12, and 6, it might be possible to place these items into the bins. Write a program that, given the capacities of the bins and the sizes of the items, determines if all items can be placed into the bins without exceeding the bin capacities. If possible, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line contains two integers b and i (1 ≤ b ≤ 1000, 1 ≤ i ≤ 1000) – the number of bins and the number of items respectively. The next line contains b space-separated integers c_{j} (1 ≤ c_{j} ≤ 1000) – the capacities of the bins. The next line contains i space-separated integers s_{k} (1 ≤ s_{k} ≤ 1000) – the sizes of the items. -----Output----- Print \\"YES\\" if all the items can be placed in the bins without exceeding the capacities, and \\"NO\\" otherwise. -----Examples----- Input 3 4 10 20 15 5 8 12 6 Output YES Input 2 3 10 5 8 6 3 Output NO","solution":"def can_allocate_bins(b, i, capacities, sizes): capacities.sort(reverse=True) sizes.sort(reverse=True) for size in sizes: allocated = False for j in range(b): if capacities[j] >= size: capacities[j] -= size allocated = True break if not allocated: return \\"NO\\" return \\"YES\\""},{"question":"Task You\'re given an integer array `nums` that contains only 1s, 0s, and -1s. Your task is to sort the array in such a way that all zeros come first, followed by all ones, and all the -1s come at the end. # Example For `nums = [0, 1, -1, 0, 1, -1, 1, 0]`, the output should be `[0, 0, 0, 1, 1, 1, -1, -1]`. # Input/Output - `[input]` integer array `nums` Array containing only 1s, 0s, and -1s. Constraints: `1 ≤ nums.length ≤ 50` - `[output]` an integer array Sorted array `nums` with all zeros first, followed by ones and then -1s.","solution":"def sort_num_array(nums): Sorts the given array such that all zeros come first, followed by all ones, and all the -1s come at the end. zeroes = [] ones = [] minus_ones = [] for num in nums: if num == 0: zeroes.append(num) elif num == 1: ones.append(num) else: minus_ones.append(num) return zeroes + ones + minus_ones"},{"question":"In a small town, there is an ancient clock tower that has recently stopped working. Each gear in the clock mechanism has a specific requirement to function properly. The town needs to purchase a set of gears to repair the clock. However, the compatibility of gears depends on the diameter and the material type. You are given the requirements of gear diameters for the clock, and the available gears in the market with specified diameters and material types. The town wants the gears to be of the same material type. Your task is to determine the different ways to pick a gear for each requirement such that all chosen gears are of the same material type. Input: The first line of the input contains t, the number of test cases. For each test case: - The first line contains n, the number of gear requirements. - The second line contains n space-separated integers denoting the required diameters. - The third line contains m, the number of available gears in the market. - The following m lines each contain an integer diameter and a string material type. Output: For each test case, output the number of ways to choose the gears to satisfy the requirements such that all chosen gears are of the same material type. Output the result modulo 1000000007 (10^9 + 7). Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 100 1 ≤ m ≤ 1000 1 ≤ diameter ≤ 100000 Material type is a string of lowercase letters with a maximum length of 10. SAMPLE INPUT 2 2 10 20 3 10 steel 20 steel 20 wood 1 5 2 5 iron 5 bronze SAMPLE OUTPUT 1 2 Explanation For the first test case, there is only one way to pick gears with diameters 10 and 20 from the available gears such that the material type is the same, which is steel. For the second test case, there are two ways to choose gears with diameter 5: 1. Both from iron 2. Both from bronze","solution":"MOD = 1000000007 def count_ways(t, test_cases): results = [] for idx in range(t): n, required_diameters, m, available_gears = test_cases[idx] material_map = {} # Populate the material map with required diameters and their respective material counts for diameter, material in available_gears: if material not in material_map: material_map[material] = {} if diameter not in material_map[material]: material_map[material][diameter] = 0 material_map[material][diameter] += 1 # Check each material type for compatibility with required diameters total_ways = 0 for material, diameters in material_map.items(): current_ways = 1 for req_diameter in required_diameters: if req_diameter in diameters: current_ways = (current_ways * diameters[req_diameter]) % MOD else: current_ways = 0 break total_ways = (total_ways + current_ways) % MOD results.append(total_ways) return results # Test input and expected output based on the provided example t = 2 test_cases = [ (2, [10, 20], 3, [(10, \'steel\'), (20, \'steel\'), (20, \'wood\')]), (1, [5], 2, [(5, \'iron\'), (5, \'bronze\')]) ] # Call the function with the sample input print(count_ways(t, test_cases))"},{"question":"Your roommate Alex has been helping you label boxes for moving. However, Alex tends to mix up the numbering by occasionally skipping numbers or repeating them. Given a sequence of box numbers, some may be missing, while others might show up multiple times. Your task is to identify the missing numbers. Input format: The first line contains a single integer N, representing the number of boxes you should have. The second line contains a space-separated list of integers representing the numbers labeled on the boxes you actually have. Output format: Print all the missing numbers in ascending order, separated by a space. If no numbers are missing, print \\"No missing numbers\\". Constraints: 1 ≤ N ≤ 10^5 Numbers on the boxes are between 1 and N and may not be in order. SAMPLE INPUT 5 4 1 2 2 5 SAMPLE OUTPUT 3 Explanation: You should have boxes labeled 1 through 5. However, 1, 2, and 5 are present, while 3 is missing and 2 is repeated.","solution":"def find_missing_numbers(N, boxes): Returns a sorted list of missing numbers between 1 and N (inclusive) based on the given list of boxes. all_numbers = set(range(1, N + 1)) present_numbers = set(boxes) missing_numbers = sorted(all_numbers - present_numbers) if missing_numbers: return missing_numbers else: return [\\"No missing numbers\\"] # Example usage: # N = 5 # boxes = [4, 1, 2, 2, 5] # find_missing_numbers(N, boxes) would return [3]"},{"question":"A transportation company is planning to optimize its freight transportation by creating efficient routes for its vehicles. The company has a fleet of M vehicles, and they need to deliver N packages. Each package has a specific weight, and each vehicle can carry a limited maximum weight. To achieve this, the company wants to balance the package distribution among the vehicles such that no vehicle exceeds its weight capacity. Write a program that determines whether it is possible to distribute all packages among the vehicles without exceeding their capacities. Input: - The first line contains the integers M and N, denoting the number of vehicles and the number of packages, respectively. - The second line contains M integers, where each integer denotes the maximum weight capacity of a vehicle. - The third line contains N integers, where each integer denotes the weight of a package. Output: - Output \\"YES\\" if it is possible to distribute all the packages without exceeding any vehicle\'s capacity. - Output \\"NO\\" otherwise. Example Input 3 6 50 70 80 20 30 40 35 25 15 Output YES Input 2 5 30 40 35 25 20 10 10 Output NO","solution":"def can_distribute_packages(M, N, capacities, packages): Determines if it is possible to distribute all packages among vehicles without exceeding their capacities. Args: M (int): Number of vehicles. N (int): Number of packages. capacities (list of int): List of each vehicle\'s maximum weight capacity. packages (list of int): List of each package\'s weight. Returns: str: \\"YES\\" if distribution is possible, otherwise \\"NO\\". # Sort capacities in descending order capacities.sort(reverse=True) # Sort packages in descending order packages.sort(reverse=True) # Try to fit the heaviest packages in the highest capacity vehicles first for package in packages: placed = False for i in range(M): if capacities[i] >= package: capacities[i] -= package placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"Given an input integer n, determine if it can be expressed as a sum of two or more consecutive positive integers. If so, return one such sequence in the form of a space-separated string of the integers. If there are multiple such sequences, return the one that starts with the smallest integer. If it is not possible to express n as the sum of consecutive positive integers, return \\"-1\\". -----Input----- The input consists of a single line containing a positive integer n (1 leq n leq 10^9). -----Output----- For each line of input, output one line containing a space-separated string of the integers if n can be expressed as a sum of two or more consecutive positive integers, and \\"-1\\" if it is not possible. -----Examples----- Sample Input 1: 15 Sample Output 1: 1 2 3 4 5 Sample Input 2: 8 Sample Output 2: -1","solution":"def find_consecutive_sum(n): for start in range(1, n): total = 0 seq = [] for i in range(start, n): total += i seq.append(i) if total == n: return \\" \\".join(map(str, seq)) elif total > n: break return \\"-1\\""},{"question":"Implement a function to convert an expression in Reverse Polish Notation (RPN) to its equivalent infix notation. In Reverse Polish Notation, each operator follows all of its operands. For example, to add three and four together, one would write \\"3 4 +\\" rather than \\"3 + 4\\". If there are multiple operations, the operator is given immediately after its second operand: so in order to add three and four together and then multiply the result by five, one would write \\"3 4 + 5 *\\", rather than \\"5 * (3 + 4)\\". Your function should take a string containing a valid RPN expression and return a string with the corresponding infix notation. The RPN expression is guaranteed to have valid format and operations. Example 1: Input: \\"3 4 +\\" Output: \\"(3 + 4)\\" Example 2: Input: \\"2 3 4 * +\\" Output: \\"(2 + (3 * 4))\\" Example 3: Input: \\"5 1 2 + 4 * + 3 -\\" Output: \\"((5 + ((1 + 2) * 4)) - 3)\\" Note: - The input string will contain non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. - Each distinct number or operator will be separated by a single space. - The infix expression you return should contain parentheses to strictly maintain the order of operations as dictated by the RPN expression.","solution":"def rpn_to_infix(expression): Converts an expression in Reverse Polish Notation (RPN) to its equivalent infix notation. tokens = expression.split() stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() # Enclose in parenthesis to strictly maintain the order of operations new_expr = f\'({a} {token} {b})\' stack.append(new_expr) else: stack.append(token) return stack[-1]"},{"question":"Write a function that takes a string as input and returns the count of each character in the string, sorted by the character\'s ASCII value. Your solution should handle both uppercase and lowercase letters, digits, and any special characters. Input - A single line string which may contain letters, digits, or special characters. Output - The function should output each character and its count in the string, sorted by the ASCII value of the characters, one per line. Constraints - The input string length will not exceed 1000 characters. Additional Notes - You should not use any external libraries for sorting. - Your solution should work efficiently even for the maximum input size. Example If your input is: ``` hello world! 123 ``` The output should be: ``` : 2 !: 1 1: 1 2: 1 3: 1 d: 1 e: 1 h: 1 l: 3 o: 2 r: 1 w: 1 ```","solution":"def count_characters(input_string): Returns the count of each character in the input string, sorted by the character\'s ASCII value. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 sorted_chars = sorted(char_count.items()) result = [] for char, count in sorted_chars: result.append(f\\"{char}: {count}\\") return \\"n\\".join(result)"},{"question":"Geekland is hosting a regional sports event and Geek has been assigned the task of managing the marathons. Each marathon consists of several checkpoints, and Geek has to ensure that each pair of consecutive checkpoints is connected by a road. The road layout and distances between checkpoints are given. Geek wants to find the longest possible path from the first checkpoint to the last checkpoint following the given roads. You are given N checkpoints numbered from 0 to N-1 and M unidirectional roads connecting these checkpoints. Each road connects two checkpoints (A[i][0], A[i][1]) and has a length of A[i][2]. Geek needs your help to find the longest path from checkpoint 0 to checkpoint N-1. Write a function longestPath(N, M, A) which takes the number of checkpoints N, the number of roads M, and the list of roads A. Return the length of the longest path from checkpoint 0 to checkpoint N-1. If there is no path from checkpoint 0 to checkpoint N-1, return -1. Example 1: Input: N = 4, M = 5 A = [[0, 1, 2], [0, 2, 4], [1, 2, 1], [1, 3, 7], [2, 3, 3]] Output: 9 Explanation: The longest path from checkpoint 0 to checkpoint 3 is 0 -> 1 -> 3 with a total length of 9. Example 2: Input: N = 3, M = 2 A = [[0, 1, 5], [1, 2, 10]] Output: 15 Explanation: The longest path from checkpoint 0 to checkpoint 2 is 0 -> 1 -> 2 with a total length of 15. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPath(N, M, A) which takes three inputs: number of checkpoints N, number of roads M, and the roads list A. Return the length of the longest path from checkpoint 0 to checkpoint N-1. Expected Time Complexity: O((N + M) * Log(N)) Expected Auxiliary Space: O(N + M) Constraints: 2 ≤ N ≤ 1000 1 ≤ M ≤ 5000 0 ≤ A[i][0], A[i][1] < N 1 ≤ A[i][2] ≤ 100","solution":"import heapq def longestPath(N, M, A): Function to find the longest path from checkpoint 0 to checkpoint N-1. Args: N : int : number of checkpoints M : int : number of roads A : list of lists : roads where each road consists [start, end, length] Returns: int : length of the longest path from checkpoint 0 to checkpoint N-1 or -1 if no path exists. # Graph adjacency list, storing negative lengths for max heap graph = {i: [] for i in range(N)} for u, v, w in A: graph[u].append((v, w)) # Distances array to store the longest distance from 0 to each node dist = [-float(\'inf\')] * N dist[0] = 0 # Max heap to get the current longest path heap = [(-0, 0)] # (negative distance, node) while heap: d, u = heapq.heappop(heap) d = -d # revert back to positive if d < dist[u]: continue for v, l in graph[u]: if dist[v] < dist[u] + l: dist[v] = dist[u] + l heapq.heappush(heap, (-dist[v], v)) return dist[N-1] if dist[N-1] != -float(\'inf\') else -1"},{"question":"You are given an integer array `arr` of length `N`. Your task is to find the smallest positive integer that is not present in the array. -----Constraints----- - 1 leq N leq 100 - -10^6 leq arr[i] leq 10^6 -----Input----- Input is given from Standard Input in the following format: N arr -----Output----- Print the smallest positive integer that is not present in the array. -----Sample Input----- 6 3 4 -1 1 2 6 -----Sample Output----- 5 In the given array the positive integers are [3, 4, 1, 2, 6]. The smallest positive integer not present is 5.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest positive integer not present in the array. # Convert array to set for O(1) look-up times s = set(arr) # Start checking from 1 upwards i = 1 while i in s: i += 1 return i # Example usage (will be replaced with input handling in actual usage): arr = [3, 4, -1, 1, 2, 6] print(smallest_missing_positive_integer(arr)) # Example output should be 5"},{"question":"You are given a string `s` consisting of lowercase English letters, and an integer `k`. You need to perform `q` operations of the following type. 1. 1 i c: Change the character at position `i` in the string `s` to `c` (1-based index). 2. 2 l r: Count and print the number of distinct substrings of length `k` in the substring `s[l:r]` (1-based inclusive index). Input The first line contains three integers n, k, and q (1 ≤ k ≤ n ≤ 100,000; 1 ≤ q ≤ 100,000) the length of the string, the length of the substrings to count, and the number of queries, respectively. The second line contains the string `s` of length `n` consisting of lowercase English letters. The next `q` lines describe the operations, in the following format: - For the first type of operation, the line will contain `1 i c` where `1 ≤ i ≤ n` and `c` is a lowercase English letter. - For the second type of operation, the line will contain `2 l r` where `1 ≤ l ≤ r ≤ n`. Output For each operation of the second type, output the number of distinct substrings of length `k` in the substring `s[l:r]` on a new line. Example Input 10 3 6 abcdefghij 2 1 7 1 5 z 2 1 7 2 1 10 1 5 e 2 1 7 2 1 10 Output 5 5 8 5 8","solution":"class StringProcessor: def __init__(self, s): self.s = list(s) # Convert string to list for mutability def change_character(self, i, c): Changes the character at position i (1-based index) to c. self.s[i - 1] = c def count_distinct_substrings(self, l, r, k): Counts the number of distinct substrings of length k in the substring s[l:r] (1-based index). substrings = set() for i in range(l - 1, r - k + 1): substring = \'\'.join(self.s[i:i + k]) substrings.add(substring) return len(substrings) def process_queries(s, k, queries): string_processor = StringProcessor(s) results = [] for query in queries: operation = query[0] if operation == 1: _, i, c = query string_processor.change_character(i, c) elif operation == 2: _, l, r = query results.append(string_processor.count_distinct_substrings(l, r, k)) return results"},{"question":"The Kingdom of Wasabia is known for its elaborate network of canals and boats used for transportation. The canals can be represented as a directed graph with n cities (nodes) and m canals (edges), each having a certain travel time. One day, the Queen of Wasabia wants to know if it\'s possible to travel from the capital city to every other city in no more than a given amount of time, T. Each canal connects two cities u and v, and has an associated travel time t. The Queen\'s advisor gave her a list of q queries, each asking if it\'s possible to travel from the capital city c to another city x within a specific time T. If it\'s possible, the advisor will also provide the shortest possible time it takes to travel from c to x. However, if the travel time exceeds T or there is no route, the advisor should report that it\'s impossible. Write a program to help the Queen\'s advisor answer these queries. ----- Input ----- The first line contains two integers n and m (1 leq n leq 1000, 0 leq m leq 10000), the number of cities and the number of canals, respectively. The next m lines each contain three integers u, v, and t (1 leq u, v leq n, 1 leq t leq 1000), denoting a directed canal from city u to city v taking t time units. The next line contains three integers c, q, and T (1 leq c leq n, 1 leq q leq 1000, 1 leq T leq 100000), denoting the capital city, the number of queries, and the maximum travel time, respectively. The last line contains q integers, each representing a city (1 leq x leq n) for which the travel time query is to be answered. ----- Output ----- For each queried city, print the shortest possible travel time from the capital city, or \\"IMPOSSIBLE\\" if the travel time exceeds T or there is no route. ----- Example ----- Input 5 6 1 2 3 1 3 2 2 4 4 3 4 1 4 5 6 1 5 10 1 3 10 4 5 Output 4 9 ----- Note ----- For the first query, the shortest time from city 1 to city 4 is 4 (via city 3), which is less than or equal to 10. For the second query, the shortest time from city 1 to city 5 is 9 (via cities 3 and 4), which is also less than or equal to 10.","solution":"import heapq def shortest_paths(n, edges, c): Computes the shortest paths from the source node c to all other nodes using Dijkstra\'s algorithm. Parameters: n (int): Number of nodes (cities) edges (List[Tuple[int, int, int]]): List of edges represented as (u, v, t) tuples c (int): The source node (capital city) Returns: List[int]: Shortest path distances from node c to all other nodes graph = [[] for _ in range(n+1)] for u, v, t in edges: graph[u].append((v, t)) dist = [float(\'inf\')] * (n+1) dist[c] = 0 pq = [(0, c)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, t in graph[u]: distance = current_dist + t if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def travel_queries(n, m, edges, c, q, T, queries): Processes travel queries to check if travel from the capital city to target cities is possible within a maximum time T. Parameters: n (int): Number of nodes (cities) m (int): Number of edges (canals) edges (List[Tuple[int, int, int]]): List of edges represented as (u, v, t) tuples c (int): The capital city q (int): Number of queries T (int): The maximum travel time queries (List[int]): List of queries represented as target city indices Returns: List[str]: Results for each query: either the shortest time or \\"IMPOSSIBLE\\" dist = shortest_paths(n, edges, c) results = [] for target in queries: if dist[target] <= T: results.append(str(dist[target])) else: results.append(\\"IMPOSSIBLE\\") return results # Example usage if __name__ == \\"__main__\\": n, m = 5, 6 edges = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (3, 4, 1), (4, 5, 6), (1, 5, 10) ] c, q, T = 1, 2, 10 queries = [4, 5] print(\'n\'.join(travel_queries(n, m, edges, c, q, T, queries)))"},{"question":"**Problem statement** You are given a matrix of integers with dimensions ( M times N ). One element of this matrix is the target element that we need to locate and return its position. Write a function `find_target(matrix: List[List[int]], target: int) -> Tuple[int, int]` that takes a matrix and a target integer as inputs and returns a tuple containing the row and column indices of the target element. The matrix will be sorted in a non-decreasing order both row-wise and column-wise: - From left to right in any row, the next element is greater than or equal to the current element. - From top to bottom in any column, the next element is greater than or equal to the current element. For example, for a ( 3 times 3 ) matrix: ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` and target ( 5 ): We should return ( (1, 1) ) because the element ( 5 ) is located at row 1, column 1. # Input constraints - ( 1 le M, N le 1000 ) - ( -10^9 le text{matrix}[i][j] le 10^9 ) - All integers in the matrix are unique and sorted as per the rules described above. # Example **Input:** ``` matrix = [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] target = 5 ``` **Output:** ``` (1, 1) ``` **Input:** ``` matrix = [ [10, 20, 30, 40], [15, 25, 35, 45], [27, 29, 37, 48], [32, 33, 39, 50] ] target = 29 ``` **Output:** ``` (2, 1) ``` **Note:** - If the target element does not exist in the matrix, return `(-1, -1)`. - Aim to find the target element with an optimal search strategy, given the properties of the matrix.","solution":"from typing import List, Tuple def find_target(matrix: List[List[int]], target: int) -> Tuple[int, int]: Finds the position of target in a sorted MxN matrix. Parameters: matrix (List[List[int]]): The sorted matrix. target (int): The target number to search in the matrix. Returns: Tuple[int, int]: The position (row, column) of the target element. Returns (-1, -1) if the target is not found. if not matrix or not matrix[0]: return -1, -1 rows, cols = len(matrix), len(matrix[0]) # Start from the top-right corner of the matrix row, col = 0, cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return row, col elif matrix[row][col] > target: col -= 1 else: row += 1 return -1, -1"},{"question":"A campus security system records the entry and exit times of students. Each record is represented as a tuple (studentId, action, timestamp), where studentId is a unique identifier for a student, action is either \\"entry\\" or \\"exit\\", and timestamp is a string in the format \\"YYYY-MM-DD HH:MM\\". Given the logs as an array of records, implement a function to determine the total time each student spends on campus. Return the result as a dictionary, where the keys are studentIds and the values are the total time in minutes each student spent on campus. Assumptions: - Each student can only have one \\"entry\\" without a corresponding \\"exit\\". - The logs are not necessarily sorted by timestamp. - Each student will have at least one \\"entry\\" action. Example 1: Input: logs = [ (1, \\"entry\\", \\"2023-10-01 08:00\\"), (2, \\"entry\\", \\"2023-10-01 09:00\\"), (1, \\"exit\\", \\"2023-10-01 11:00\\"), (2, \\"exit\\", \\"2023-10-01 12:00\\"), (1, \\"entry\\", \\"2023-10-01 13:00\\"), (1, \\"exit\\", \\"2023-10-01 14:00\\") ] Output: {1: 240, 2: 180} Explanation: - Student 1\'s total time on campus is (11:00 - 08:00) + (14:00 - 13:00) = 180 + 60 = 240 minutes. - Student 2\'s total time on campus is (12:00 - 09:00) = 180 minutes. Example 2: Input: logs = [ (1, \\"entry\\", \\"2023-02-01 10:00\\"), (1, \\"exit\\", \\"2023-02-01 12:30\\"), (1, \\"entry\\", \\"2023-02-01 14:00\\"), (1, \\"exit\\", \\"2023-02-01 17:00\\") ] Output: {1: 330} Explanation: - Student 1\'s total time on campus is (12:30 - 10:00) + (17:00 - 14:00) = 150 + 180 = 330 minutes. Constraints: - 1 <= len(logs) <= 10^4 - The timestamp format is \\"YYYY-MM-DD HH:MM\\" and is always valid. - Each studentId is a positive integer and <= 10^6. - Assume the campus security system operates in a single time zone.","solution":"from datetime import datetime def calculate_total_time_on_campus(logs): Calculate the total time each student spends on campus. :param logs: List of tuples (studentId, action, timestamp) :return: Dictionary with total time in minutes each student spent on campus. # Dictionary to store total minutes for each student. student_times = {} # Dictionary to track last entry time for each student. entry_times = {} for student_id, action, timestamp in sorted(logs, key=lambda x: x[2]): if action == \\"entry\\": entry_times[student_id] = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M\\") elif action == \\"exit\\": entry_time = entry_times.pop(student_id, None) if entry_time: exit_time = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M\\") duration = int((exit_time - entry_time).total_seconds() / 60) if student_id in student_times: student_times[student_id] += duration else: student_times[student_id] = duration return student_times"},{"question":"Given an integer array `arr` of length `n`, we want to find the smallest contiguous subarray whose sum is greater than or equal to a given integer `T`. The task is to return the length of such a subarray. If no such subarray exists, return 0. Input format - The first line contains two space-separated integers, `n` and `T`. - The second line contains `n` space-separated integers representing the elements of the array `arr`. Output format - Print a single integer: the length of the smallest contiguous subarray whose sum is at least `T`. If no such subarray exists, output 0. Constraints - 1 <= n <= 10^5 - 1 <= arr[i] <= 10^4 - 1 <= T <= 10^9 Sample Input 6 15 5 1 3 5 10 7 Sample Output 2 Explanation The sum of subarrays and their lengths are: - Subarray [5, 1, 3]: sum = 9, length = 3 - Subarray [1, 3, 5, 10]: sum = 19, length = 4 - Subarray [10, 7]: sum = 17, length = 2 The smallest subarray with sum >= 15 is [10, 7] and its length is 2. Thus, the output is 2.","solution":"def smallest_subarray_len(arr, T): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to T. If no such subarray exists, returns 0. n = len(arr) start = 0 end = 0 min_length = n + 1 current_sum = 0 while end < n: while current_sum < T and end < n: current_sum += arr[end] end += 1 while current_sum >= T and start < n: min_length = min(min_length, end - start) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"A delivery robot must deliver packages to houses located at various points along a straight street represented by an array of integers. Each index in the array corresponds to a house along the street, and the value at each index represents the delivery time required to deliver a package to that house. Your task is to determine the minimum total delivery time required if the robot can modify the delivery times of any two adjacent houses by averaging their delivery times and rounding down to the nearest integer. The robot can perform this modification any number of times. Given an array `deliveryTimes` of length `N`, find the minimum total delivery time required after any possible modifications. Example 1: Input: N = 4, deliveryTimes = [4, 3, 6, 7] Output: 13 Explanation: The robot can modify the delivery times of the first two and last two houses: 1. Adjust delivery times of houses 1 and 2: (4 + 3) // 2 = 3, resulting in [3, 3, 6, 7]. 2. Adjust delivery times of houses 3 and 4: (6 + 7) // 2 = 6, resulting in [3, 3, 6, 6]. The total delivery time becomes 3 + 3 + 6 + 6 = 18. Example 2: Input: N = 5, deliveryTimes = [1, 2, 3, 4, 5] Output: 10 Explanation: The robot can adjust houses as follows: 1. Adjust delivery times of houses 1 and 2: (1 + 2) // 2 = 1, resulting in [1, 1, 3, 4, 5]. 2. Adjust delivery times of houses 3 and 4: (3 + 4) // 2 = 3, resulting in [1, 1, 3, 3, 5]. 3. Adjust delivery times of houses 4 and 5: (3 + 5) // 2 = 4, resulting in [1, 1, 3, 3, 4]. The total delivery time becomes 1 + 1 + 3 + 3 + 4 = 12. Your Task: - You don\'t need to read input or print anything. - Complete the function `minDeliveryTime()` which takes the array `deliveryTimes` and size of array `N` as input parameters and returns the minimum total delivery time required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ deliveryTimes[i] ≤ 10^{5}","solution":"def minDeliveryTime(N, deliveryTimes): This function calculates the minimum total delivery time required after any possible modifications. # The key insight is that the optimal approach is just to make all houses\' # delivery times equal to their minimum. min_time = min(deliveryTimes) total_time = min_time * N return total_time"},{"question":"Write a function that receives a list of integers and returns the length of the longest contiguous subarray that contains an equal number of positive and negative numbers. Input: - An integer n (1 ≤ n ≤ 10^5), representing the number of elements in the array. - A list of n integers A[i] (-10^9 ≤ A[i] ≤ 10^9), representing the elements of the array. Output: - An integer representing the length of the longest contiguous subarray with an equal number of positive and negative integers. Examples: Input 7 1 -1 2 -2 3 -3 4 Output 6 Input 5 1 2 -2 -1 3 Output 4 Input 8 1 -1 1 -1 1 -1 1 -1 Output 8 Note: In the first test, the longest subarray with equal numbers of positive and negative integers is [1, -1, 2, -2, 3, -3], so the length is 6. In the second test, possible subarrays include [1, 2, -2, -1], so the length of the longest one is 4. In the third test, the entire array is the longest subarray with equal positives and negatives, with a length of 8.","solution":"def longest_equal_subarray(arr): Returns the length of the longest contiguous subarray with equal number of positive and negative numbers in the given list `arr`. # Convert array elements: 1 for positive, -1 for negative transformed = [1 if x > 0 else -1 for x in arr] # Dictionary to keep track of the first occurrence of each balance balance_index = {} balance = 0 max_length = 0 for i in range(len(transformed)): balance += transformed[i] if balance == 0: max_length = i + 1 elif balance in balance_index: max_length = max(max_length, i - balance_index[balance]) else: balance_index[balance] = i return max_length"},{"question":"You are organizing a competition where participants need to solve problems to earn points. Each problem has a different point value, and participants can choose which problems to solve. However, you want to ensure that each participant tries to score at least k points. Given a list of point values for the problems and the required minimum score k, find the minimum number of problems a participant needs to solve to achieve at least k points. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of problems and the required minimum score, respectively. The second line contains a sequence of n integers p1, p2, ..., pn (1 ≤ pi ≤ 100) — the points each problem is worth. All numbers are separated with spaces. Output Print the single number — the minimum number of problems needed to achieve at least k points. Examples Input 5 10 1 2 3 4 5 Output 3 Input 4 7 2 3 6 8 Output 1 Note In the first sample, you need to solve a minimum of 3 problems (with points 3, 4, and 3) to achieve at least 10 points. Solving fewer problems results in less than 10 points. In the second sample, solving the problem with 8 points already achieves at least 7 points, so only 1 problem is needed.","solution":"def min_problems_to_solve(n, k, points): Returns the minimum number of problems needed to achieve at least k points. # Sort the points in descending order to maximize points with the fewest problems points.sort(reverse=True) total_points = 0 for i in range(n): total_points += points[i] if total_points >= k: return i + 1 return n # In case all problems must be solved to meet the requirement"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, determine the number of distinct pairs `(i, j)` such that `arr[i] + arr[j]` is divisible by `k` (i.e., `(arr[i] + arr[j]) % k == 0`). -----Input----- The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^3). The second line contains `n` integers representing the array `arr` (1 ≤ arr[i] ≤ 10^9). -----Output----- Print the number of pairs `(i, j)` such that `0 ≤ i < j < n` and `(arr[i] + arr[j]) % k == 0`. -----Examples----- Input 5 3 1 2 3 4 5 Output 4 Input 4 2 2 4 6 8 Output 6 Input 3 5 5 10 15 Output 3","solution":"def count_divisible_pairs(arr, n, k): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] is divisible by k. remainder_count = [0] * k for num in arr: remainder = num % k remainder_count[remainder] += 1 count = 0 for i in range(k): if remainder_count[i] == 0: continue if i == 0 or 2 * i == k: count += (remainder_count[i] * (remainder_count[i] - 1)) // 2 else: count += remainder_count[i] * remainder_count[k - i] remainder_count[k - i] = 0 return count"},{"question":"You are given an integer array of length N filled with numbers from 1 to N, but the order of numbers might be mixed with some numbers missing. Your task is to find all the missing numbers from the array. * The array `arr` contains integers between 1 and N with some of them missing. Write a function `findMissingNumbers` that takes an array `arr` as input and returns the list of missing integers. Constraints: * 1 ≤ N ≤ 10^5 * 1 ≤ arr[i] ≤ N Input The input consists of a single line containing the integers of the array `arr` separated by spaces. Output Output a single line containing the missing numbers sorted in ascending order, separated by spaces. Examples: Input 7 3 1 4 8 6 2 Output 5 Input 5 5 5 5 5 Output 1 2 3 4","solution":"def find_missing_numbers(arr): N = len(arr) expected_set = set(range(1, N + 1)) actual_set = set(arr) missing_numbers = sorted(list(expected_set - actual_set)) return missing_numbers"},{"question":"A drone delivery service is responsible for delivering packages to various locations. Each delivery has a weight and a priority level. The drone can carry a limited weight, and your goal is to maximize the priority of the packages delivered without exceeding the weight limit. Write a program to determine the maximum priority that can be achieved. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers, N and W, where N is the number of packages and W is the maximum weight the drone can carry. The next N lines each contain two integers, wi and pi, where wi is the weight and pi is the priority of the ith package. -----Output----- For each test case, output a single line containing the maximum total priority the drone can carry without exceeding the weight limit. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1,000 - 1 ≤ W ≤ 10,000 - 1 ≤ wi, pi ≤ 1,000 -----Example----- Input: 1 4 10 5 10 4 40 6 30 3 50 Output: 90 -----Explanation----- Example case 1: The drone can carry the packages with weights 3 and 4, which have priorities 50 and 40 respectively, for a total priority of 90.","solution":"def max_priority(T, test_cases): Calculates the maximum total priority that the drone can carry without exceeding the weight limit for each test case. T : int : the number of test cases test_cases : list of tuples : each contains N : int : the number of packages W : int : the maximum weight the drone can carry items : list of tuples : each contains wi : int : weight of the package pi : int : priority of the package Returns: list of int : maximum priority for each test case results = [] for case in test_cases: N, W = case[0], case[1] items = case[2] dp = [0] * (W + 1) for weight, priority in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + priority) results.append(dp[W]) return results"},{"question":"You are given a string containing only lowercase letters. Your task is to determine the frequency of each letter in the string and output the results in alphabetical order. -----Input----- A single string S (1 <= |S| <= 10^6) where S consists of only lowercase letters. -----Output----- Output each letter and its frequency in alphabetical order. Each letter and its corresponding frequency should be on a new line in the format \\"letter: frequency\\". -----Example----- Input: banana Output: a: 3 b: 1 n: 2","solution":"def letter_frequency(s: str): Determines the frequency of each letter in the string and returns results in alphabetical order. :param s: Input string containing only lowercase letters :return: A dictionary with letters as keys and their frequencies as values from collections import Counter # Count frequencies of each character frequency = Counter(s) # Sort the dictionary by key and return it sorted_frequency = dict(sorted(frequency.items())) return sorted_frequency def pretty_print_frequency(s: str): frequencies = letter_frequency(s) output_list = [f\\"{letter}: {count}\\" for letter, count in frequencies.items()] return \\"n\\".join(output_list)"},{"question":"Kuroni is fascinated by trees and numbers. He recently encountered a special type of tree, called a \\"bitwise tree,\\" where each node contains a number, and the edge between two nodes exists if and only if the bitwise AND of their numbers is greater than a given threshold k. A \\"bitwise tree\\" is defined as follows: 1. Each node has exactly one parent (except the root). 2. The values on the nodes are unique. 3. For two nodes u and v (with values u_val and v_val respectively), there is an edge between them if and only if (u_val & v_val) > k. Kuroni wants to know whether it is possible to rearrange the values of the n nodes to form a valid \\"bitwise tree.\\" Input The first line contains two integers, n (1 ≤ n ≤ 2 ⋅ 10^5) and k (0 ≤ k ≤ 2 ⋅ 10^5) — the number of nodes in the tree and the threshold value. The second line contains n unique integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the values of the nodes. Output Output \\"YES\\" if it is possible to rearrange the values to form a valid \\"bitwise tree\\" and \\"NO\\" otherwise. Example Input 4 1 1 2 4 8 Output NO Note For the given example, no bitwise AND between any two values {1, 2, 4, 8} is greater than 1, making it impossible to form a valid bitwise tree. Hence, the output is \\"NO\\".","solution":"def can_form_bitwise_tree(n, k, values): Determines if it is possible to rearrange the values to form a valid bitwise tree. Args: n (int): The number of nodes in the tree. k (int): The threshold value for bitwise AND. values (list of int): The values of the nodes. Returns: str: \\"YES\\" if it is possible to form a valid bitwise tree, \\"NO\\" otherwise. from collections import defaultdict # Create an adjacency list where each node has a set of connected nodes adjacency_list = defaultdict(list) # Build the graph based on the condition (u_val & v_val) > k for i in range(n): for j in range(i + 1, n): if (values[i] & values[j]) > k: adjacency_list[values[i]].append(values[j]) adjacency_list[values[j]].append(values[i]) # Use DFS to check if all nodes are connected (i.e., form a single connected component) visited = set() def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Start DFS from the first node if values: visited.add(values[0]) dfs(values[0]) # Check if all nodes were visited return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"You are given a string consisting of lowercase Latin letters and an integer k. You need to rearrange the characters of the string in such a way that no two adjacent characters are the same and the difference between the positions of the same letter in its new arrangement is at least k. If it is possible to rearrange the string to satisfy the given conditions, output any valid string. If it is not possible, output \\"Impossible\\". Input The first line contains a single integer k (1 ≤ k ≤ 100). The second line contains the string s (1 ≤ |s| ≤ 1000) consisting of lowercase Latin letters. Output If it is possible to rearrange the string, print any valid rearrangement that satisfies the conditions mentioned above. Otherwise, output \\"Impossible\\". Examples Input 2 aabb Output abab Input 3 aaabc Output Impossible Note In the first example, one possible valid rearrangement is \\"abab\\". Both conditions are satisfied: - No two adjacent characters are the same. - The difference between the positions of \'a\' or \'b\' is at least 2. In the second example, it is not possible to rearrange the string so that the difference between the positions of \'a\' is at least 3.","solution":"from collections import Counter import heapq def rearrange_string(s, k): if k == 0: return s # if k is 0, the original string is valid # Count the frequency of each character counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) queue.append((char, freq + 1)) # freq is negative if len(queue) < k: continue old_char, old_freq = queue.pop(0) if -old_freq > 0: heapq.heappush(max_heap, (old_freq, old_char)) if len(result) == len(s): return \'\'.join(result) else: return \\"Impossible\\""},{"question":"Write a function that takes a string representing a file path and reads the content of the file. The function should then count and return the number of distinct words in the file. Words are defined as sequences of alphanumeric characters separated by whitespace or punctuation. The function must be compatible with `posix` operating systems. *Examples:* - Input: `/path/to/file.txt` (where the file content is `\\"Hello world! Hello everyone.\\"`) - Output: `3` (because the distinct words are \\"Hello\\", \\"world\\", and \\"everyone\\") - Input: `/path/to/another_file.txt` (where the file content is `\\"Programming is fun. Programming is challenging.\\"`) - Output: `4` (because the distinct words are \\"Programming\\", \\"is\\", \\"fun\\", and \\"challenging\\")","solution":"import re def count_distinct_words(file_path): Reads the content of a file and returns the number of distinct words. :param file_path: str, path to the file :return: int, number of distinct words in the file with open(file_path, \'r\') as file: content = file.read() # Use regex to find all words (sequences of alphanumeric characters) words = re.findall(r\'bw+b\', content) # Use a set to find distinct words distinct_words = set(words) return len(distinct_words)"},{"question":"You are given an array of integers. Compute and return the maximum sum of any non-empty subarray (contiguous elements) of the given array. For example, if we are given an array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum which is 6. Implement a function `max_subarray_sum(arr: List[int]) -> int` that returns the maximum sum among all possible subarrays of the input array. -----Input----- The function will take a single argument: - arr: A list of integers representing the array, where the length of the array n satisfies 1 leq n leq 10^5 and the elements of the array a_i satisfy -10^9 leq a_i leq 10^9. -----Output----- Return a single integer, the sum of the maximum sum subarray. -----Examples----- Example 1: Input: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] Output: 6 Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6. Example 2: Input: arr = [1] Output: 1 Explanation: The subarray [1] has the maximum sum 1. Example 3: Input: arr = [5, 4, -1, 7, 8] Output: 23 Explanation: The subarray [5, 4, -1, 7, 8] has the maximum sum 23. -----Constraints----- 1. The input array can be of length up to 10^5. 2. Elements can be negative, zero, or positive, and can range from -10^9 to 10^9.","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: This function takes a list of integers and returns the maximum sum of any non-empty subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Task: Your job is to implement a function `validate_pangram` that takes a string `s` as input and determines if it is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. The function should return `True` if `s` is a pangram, and `False` otherwise. The check should be case insensitive. What it looks like: ```python validate_pangram(str) #=> bool ``` Some examples: ```python validate_pangram(\\"The quick brown fox jumps over the lazy dog\\") # should return True validate_pangram(\\"Hello World\\") # should return False validate_pangram(\\"Cwm fjord bank glyphs vext quiz\\") # should return True validate_pangram(\\"Pack my box with five dozen liquor jugs\\") # should return True validate_pangram(\\"\\") # should return False ``` Note: - The input string may contain spaces, punctuation, and numbers, but these should be ignored in validating the pangram status. - Only alphabetic characters (a-z) are considered for the pangram check.","solution":"def validate_pangram(s): Determines if the given string is a pangram. Args: s (str): The input string to check. Returns: bool: True if the input string is a pangram, False otherwise. # Convert the string to lower case to make the check case insensitive s = s.lower() # Initialize a set to hold the unique alphabetic characters alphabet_set = set() # Iterate through each character in the string for char in s: # Check if the character is an alphabetic letter if \'a\' <= char <= \'z\': alphabet_set.add(char) # Check if the set of unique alphabetic characters contains all 26 letters return len(alphabet_set) == 26"},{"question":"Given two sorted arrays `A` and `B` of size `N` and `M` respectively, your task is to find the pair of elements (one from each array) whose absolute difference is minimized. ------ Input Format ------ - The first line contains an integer `T`, the number of test cases. - For each test case: * The first line contains the integers `N` and `M`, the sizes of the arrays `A` and `B` respectively. * The second line contains `N` space-separated integers, the elements of the array `A`. * The third line contains `M` space-separated integers, the elements of the array `B`. ------ Output Format ------ For each test case, output a single line containing the minimum absolute difference. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^6 -10^9 ≤ A[i], B[i] ≤ 10^9 ------ Sample Input 1 ------ 2 3 3 1 2 3 5 8 10 5 4 3 4 7 9 19 8 11 12 15 ------ Sample Output 1 ------ 2 1 ------ Explanation 1 ------ Test case 1: The pairs of elements (one from each array) and their absolute differences are: (1, 5) = 4, (1, 8) = 7, (1, 10) = 9, (2, 5) = 3, (2, 8) = 6, (2, 10) = 8, (3, 5) = 2, (3, 8) = 5, and (3, 10) = 7. The minimum absolute difference is 2. Test case 2: The pairs of elements (one from each array) and their absolute differences are: (3, 8) = 5, (3, 11) = 8, (3, 12) = 9, (3, 15) = 12, (4, 8) = 4, (4, 11) = 7, (4, 12) = 8, (4, 15) = 11, (7, 8) = 1, (7, 11) = 4, (7, 12) = 5, (7, 15) = 8, (9, 8) = 1, (9, 11) = 2, (9, 12) = 3, (9, 15) = 6, (19, 8) = 11, (19, 11) = 8, (19, 12) = 7, and (19, 15) = 4. The minimum absolute difference is 1.","solution":"def find_minimum_difference(T, test_cases): results = [] for case in test_cases: N, M, A, B = case A.sort() B.sort() i = j = 0 min_diff = float(\'inf\') while i < N and j < M: min_diff = min(min_diff, abs(A[i] - B[j])) if A[i] < B[j]: i += 1 else: j += 1 results.append(min_diff) return results"},{"question":"You are given N strings, and your task is to determine the number of strings that are palindromes. Input The first line contains an integer T denoting the number of test cases. Each test case consists of one integer N denoting the number of strings. The following N lines contain one string each. Output For each test case, print the required answer in one line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ length of each string ≤ 100 SAMPLE INPUT 2 3 aba abc racecar 4 level test rotor pythons SAMPLE OUTPUT 2 2","solution":"def count_palindromes(test_cases): Counts the number of palindrome strings in each test case. Parameters: test_cases (list): A list of test cases, where each test case is represented by a list of strings. Returns: list: A list of counts of palindromes for each test case. def is_palindrome(s): return s == s[::-1] results = [] for strings in test_cases: palindrome_count = sum(1 for s in strings if is_palindrome(s)) results.append(palindrome_count) return results"},{"question":"In a rectangular grid of size N x M, you are given a starting position and a target position. You can move up, down, left, or right from any cell in the grid. Determine whether it\'s possible to reach the target position from the starting position. The cells in the grid can either be empty (represented by \'.\') or blocked (represented by \'#\'). You cannot move through the blocked cells. Input The first line contains two integers N and M, the number of rows and columns in the grid respectively. The next N lines contain M characters each, representing the grid. The following line contains four integers x1, y1, x2, y2, representing the starting position (x1, y1) and the target position (x2, y2) respectively. Output Output \\"Yes\\" if it is possible to reach the target position from the starting position. Otherwise, output \\"No\\". Example Input 3 3 ... .#. ... 0 0 2 2 Output Yes","solution":"def is_path_possible(grid, start, target): N = len(grid) M = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def bfs(start, target): queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) if (x, y) == target: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False start_position = (start[0], start[1]) target_position = (target[0], target[1]) return \\"Yes\\" if bfs(start_position, target_position) else \\"No\\""},{"question":"You are given a string s consisting of lowercase English letters. We define a \\"block\\" as a contiguous substring where all characters are the same. You are asked to find the minimum number of distinct blocks you can obtain by deleting exactly one character from the string s. For example, for the string \\"aabcccbb\\", if you delete the character at position 3 (0-indexed), you obtain the string \\"aacccbb\\" which has blocks \\"aa\\", \\"ccc\\", and \\"bb\\". This transformation results in 3 distinct blocks. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of one line containing the string s (1 le |s| le 10^5) — a non-empty string of lowercase English letters. It is guaranteed that the sum of lengths of all strings in the input does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of distinct blocks you can obtain by deleting exactly one character from the string s. -----Examples----- Input 3 aabcccbb abbcc aaaaa Output 3 2 1 -----Note----- In the first test case, deleting the 3rd character \\"b\\" from \\"aabcccbb\\" results in \\"aacccbb\\" which has blocks \\"aa\\", \\"ccc\\", and \\"bb\\". This forms a minimum of 3 distinct blocks after one deletion. In the second test case, deleting the 4th character \\"c\\" from \\"abbcc\\" results in \\"abbc\\" which has blocks \\"a\\", \\"bb\\", and \\"c\\". However, deleting any \\"b\\" yields \\"acc\\" which has blocks \\"a\\" and \\"cc\\", a minimum of 2 distinct blocks. In the third test case, deleting any \\"a\\" from \\"aaaaa\\" still leaves \\"aaaa\\", having 1 block \\"aaaa\\".","solution":"def min_distinct_blocks(s): Returns the minimum number of distinct blocks obtainable by deleting exactly one character from string s. n = len(s) if n == 1: return 0 # If the string has only one character, the result is zero blocks after deletion. min_blocks = float(\'inf\') for i in range(n): new_s = s[:i] + s[i + 1:] blocks = 1 for j in range(1, len(new_s)): if new_s[j] != new_s[j - 1]: blocks += 1 min_blocks = min(min_blocks, blocks) return min_blocks def solve(t, strings): results = [] for s in strings: results.append(min_distinct_blocks(s)) return results"},{"question":"You are given an integer array `arr` and an integer `k`. Rearrange the array such that the distance between any two occurrences of the same element is at least `k` units apart. If no such arrangement exists, return `False`. If there are multiple valid arrangements, any one of them will be accepted. Example 1: Input: arr = [1, 2, 1, 2, 3, 3], k = 3 Output: [1, 2, 3, 1, 2, 3] Example 2: Input: arr = [4, 1, 1, 4, 2, 2, 4], k = 2 Output: [4, 1, 2, 4, 1, 2, 4] Example 3: Input: arr = [1, 1, 1, 1], k = 2 Output: False Example 4: Input: arr = [1, 2, 1], k = 2 Output: [1, 2, 1] Constraints: - 1 <= arr.length <= 10^4 - 0 <= arr[i] <= 10^4 - 1 <= k <= arr.length","solution":"from collections import Counter import heapq def rearrange_array(arr, k): Rearranges the array such that the distance between any two occurrences of the same element is at least k units apart. If no such arrangement exists, returns False. if k == 0: return arr count = Counter(arr) max_heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(max_heap) result = [None] * len(arr) index = 0 while max_heap: temp = [] for _ in range(k): if not max_heap: if any(r is None for r in result): return False break freq, num = heapq.heappop(max_heap) freq = -freq result[index] = num index += 1 if freq > 1: temp.append((freq - 1, num)) for item in temp: heapq.heappush(max_heap, (-item[0], item[1])) return result"},{"question":"# Introduction Given an integer array, where each element represents an altitude of a point on a mountain, your task is to determine if the array describes a valid mountain. A mountain is valid if: 1. It has at least three elements. 2. There exists some `i` with `0 < i < arr.length - 1` such that: - `arr[0] < arr[1] < ... < arr[i]` - `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` # Task Write a function that accepts an array of positive integers `arr`. Return `true` if the array describes a valid mountain and `false` otherwise. # Input / Output The `arr` is an array of positive integers. # Example ```python is_valid_mountain([2, 1]); ==> False is_valid_mountain([3, 5, 5]); ==> False is_valid_mountain([0, 3, 2, 1]); ==> True ``` # Constraints - `(0 < arr.length <= 10^4)` - `(-10^4 <= arr[i] <= 10^4)`","solution":"def is_valid_mountain(arr): Returns True if the array describes a valid mountain, else returns False. if len(arr) < 3: return False i = 0 # Ascending part while i + 1 < len(arr) and arr[i] < arr[i + 1]: i += 1 # Peak can\'t be first or last if i == 0 or i == len(arr) - 1: return False # Descending part while i + 1 < len(arr) and arr[i] > arr[i + 1]: i += 1 return i == len(arr) - 1"},{"question":"Given a set of non-negative integers, find the number of pairs (i, j) such that gcd(arr[i], arr[j]) = 1, where 1 ≤ i < j ≤ n. Constraints: * 2 ≤ n ≤ 1000 * 0 ≤ arr[i] ≤ 10^6 Your task is to write a program that: 1. Reads an integer n from standard input. 2. Reads n integers from the subsequent lines. 3. Outputs the count of pairs (i, j) where gcd(arr[i], arr[j]) equals 1. Input: n arr1 arr2 ... arrn Output: Print a single integer - the count of pairs where the gcd of the two integers is 1. Examples: Input: 4 1 2 3 4 Output: 5 Input: 5 5 10 15 20 25 Output: 0 Note: In the first example, the pairs (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4) have gcd equal to 1. In the second example, there are no pairs with gcd equal to 1.","solution":"from math import gcd def count_coprime_pairs(arr): Counts the number of pairs (i, j) from the array such that gcd(arr[i], arr[j]) = 1. n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): if gcd(arr[i], arr[j]) == 1: count += 1 return count # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = count_coprime_pairs(arr) print(result)"},{"question":"**Problem Statement:** You are given a third-party system that outputs a list of numbers, but for some reason, the system produces the list in a random order. Your task is to sort the list in ascending order and find the difference between the maximum and minimum value of the sorted list. ------ Input section ------ The first line contains T, the number of test cases. The description of T test cases follows. Each test case begins with an integer N denoting the number of elements in the list. The next line contains N space-separated integers representing the elements of the list. ------ Output section ------ For each test case, output the sorted list in ascending order followed by the difference between the maximum and minimum value in the list. ------ Input constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 50 -1000 ≤ A[i] ≤ 1000, where A[i] denotes the element of the list. ------ Sample Input 1 ------ 2 5 3 1 4 1 5 4 -3 -1 -2 -4 ------ Sample Output 1 ------ 1 1 3 4 5 4 -4 -3 -2 -1 3 ------ Explanation 1 ------ In the first test case, after sorting the list we get [1, 1, 3, 4, 5]. The difference between the maximum value (5) and the minimum value (1) is 4. In the second test case, after sorting the list we get [-4, -3, -2, -1]. The difference between the maximum value (-1) and the minimum value (-4) is 3.","solution":"def sort_and_find_difference(test_cases): results = [] for test_case in test_cases: n, arr = test_case arr.sort() difference = arr[-1] - arr[0] results.append((arr, difference)) return results"},{"question":"In a technical interview, the interviewer likes to ask questions about string manipulation. One of the common problems is to find the longest palindromic substring within a given string. A palindromic substring is a substring that reads the same forward and backward. Write a function `longest_palindromic_substring(s)` that takes in a string `s` (1 ≤ |s| ≤ 1000) and returns the longest palindromic substring within `s`. If there are multiple substrings with the same maximum length, return the first one. Input format: - A single line containing the string `s`. Output format: - A single line containing the longest palindromic substring of `s`. Constraints: - The given string `s` will contain only lowercase English letters. SAMPLE INPUT babad SAMPLE OUTPUT bab SAMPLE INPUT cbbd SAMPLE OUTPUT bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring within the given string `s`. n = len(s) if n <= 1: return s start, max_length = 0, 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Write a program that takes a list of integers and determines if there exists a pair of elements that sums to zero. If such a pair exists, the program should output the pair; otherwise, it should print \\"No pair found\\". Input The first line of input contains an integer `n` (1 ≤ n ≤ 100) – the number of elements in the list. The second line contains `n` space-separated integers representing the elements of the list. Each element is between -10^3 and 10^3, inclusive. Output If there exists a pair of elements in the list that sum to zero, output them in the format \\"a b\\", where `a` and `b` are the elements. If multiple pairs exist, output any one of them. If no such pair exists, print \\"No pair found\\". Examples Input 5 2 -3 1 -1 3 Output -3 3 Input 4 5 -2 9 1 Output No pair found","solution":"def find_pair_with_zero_sum(nums): Given a list of integers, find a pair of elements that sum to zero. If such a pair exists, return the pair as (a, b). If no such pair exists, return None. seen = set() for num in nums: if -num in seen: return -num, num seen.add(num) return None"},{"question":"In a city grid, streets are laid out in a perfect grid of N rows and M columns. Every intersection is a junction, which is represented by its row and column indices (r, c). Two intersections (r1, c1) and (r2, c2) are said to be connected if they share the same row or the same column, which means either r1 = r2 or c1 = c2. Given a list of K such connections, determine whether it\'s possible to traverse the entire grid from the top-left junction (1, 1) to the bottom-right junction (N, M) using only these connections. Each connection shows that travel is possible between the two specific connected junctions. Implement a function that will output whether such a path exists or not. -----Input----- The first line contains two integers N and M (2 ≤ N, M ≤ 100,000) — the dimensions of the grid. The second line contains one integer K (0 ≤ K ≤ 200,000) — the number of connections. The next K lines each contain four integers r1, c1, r2, c2 — representing a connected pair of junctions. -----Output----- Print \\"YES\\" if there exists a path from (1, 1) to (N, M) using the given connections, otherwise print \\"NO\\". -----Examples----- Input 3 3 4 1 1 1 2 1 2 2 2 2 2 2 3 2 3 3 3 Output YES Input 3 3 2 1 1 1 2 2 2 3 3 Output NO -----Note----- For the first example, the path goes through the connections: (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) For the second example, there is no way to reach (3, 3) from (1, 1) with the given connections.","solution":"def can_traverse_grid(N, M, connections): from collections import defaultdict, deque # Create adjacency list adjacency_list = defaultdict(list) for r1, c1, r2, c2 in connections: adjacency_list[(r1, c1)].append((r2, c2)) adjacency_list[(r2, c2)].append((r1, c1)) start = (1, 1) end = (N, M) # BFS to check if there is a path from start to end queue = deque([start]) visited = set() visited.add(start) while queue: current = queue.popleft() if current == end: return \'YES\' for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \'NO\'"},{"question":"You have a list of cities connected by one-way roads. Each road connects two cities, has a certain length, and you can travel it only in the direction it is established. You start in the capital city (city `1`) and your goal is to reach the destination city (city `n`). The total length of the route is the sum of the lengths of each road you travel. The problem is that some roads may be under construction and closed for repairs, marked with a length of `-1`. Write a function to determine the shortest possible route from city `1` to city `n` that does not include any under-construction roads. Input - The first line contains two integers `n` and `m`: the number of cities and the number of roads (2 ≤ `n` ≤ 1000, 1 ≤ `m` ≤ 10000). - The next `m` lines each contain three integers `u`, `v`, and `w`: representing a road from city `u` to city `v`, and its length `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 1000 or `w` = -1). Output If there is a route from city `1` to city `n`, print the total length of the shortest route. If no such route exists, print \\"NO\\". Example Input ``` 5 6 1 2 3 2 3 -1 2 4 2 3 5 4 4 5 3 1 3 10 ``` Output ``` 8 ``` Input ``` 4 3 1 2 2 2 3 -1 3 4 4 ``` Output ``` NO ``` Note: Roads under construction (with a length of `-1`) should be ignored when calculating the shortest route.","solution":"import heapq def shortest_route(n, m, roads): graph = [[] for _ in range(n + 1)] # Create the adjacency list for u, v, w in roads: if w != -1: # We will ignore the roads that are under construction graph[u].append((v, w)) # Use Dijkstra\'s Algorithm def dijkstra(start, end): min_heap = [(0, start)] # (distance, city) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while min_heap: current_distance, current_city = heapq.heappop(min_heap) if current_city == end: return current_distance if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return float(\'inf\') result = dijkstra(1, n) if result == float(\'inf\'): return \\"NO\\" else: return result"},{"question":"You are given a list of integers. You have to generate a new list following these steps: 1. Initialize an empty list called `output`. 2. Process every integer `x` in the given list: - For each divisor of `x` (including 1 and `x` itself), calculate the sum of its digits. - Append the sum of the divisor\'s digits to the `output` list. Write a program that implements the above steps and outputs the `output` list. For example, for the given list `[12, 15]`: - For `12`, the divisors are `[1, 2, 3, 4, 6, 12]`. The sum of their digits would be `[1, 2, 3, 4, 6, 3]` (since, for instance, the sum of digits of `12` is `1 + 2 = 3`). - For `15`, the divisors are `[1, 3, 5, 15]`. The sum of their digits would be `[1, 3, 5, 6]`. Input The first line contains one integer `n` (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains `n` space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the integers in the list. Output For each integer in the list, print the sums of the digits of its divisors in order. Each integer\'s result should be printed on a separate line. Example Input 2 12 15 Output 1 2 3 4 6 3 1 3 5 6","solution":"def sum_of_digits(x): return sum(int(digit) for digit in str(x)) def find_divisors(x): divisors = [] for i in range(1, x + 1): if x % i == 0: divisors.append(i) return divisors def generate_output_list(numbers): output = [] for number in numbers: divisors = find_divisors(number) sum_digits = [sum_of_digits(divisor) for divisor in divisors] output.append(sum_digits) return output"},{"question":"You\'re given a string S as input, consisting of only uppercase alphabetic characters. Your task is to create a new string where each character in the original string S is replaced by the third character after it in the alphabet (circularly, i.e., \'X\', \'Y\', \'Z\' would map to \'A\', \'B\', \'C\' respectively). Input: There will be one line of input containing the string S. Output: Output the new string after applying the described transformation. Constraints: 1 ≤ Length of S ≤ 100 SAMPLE INPUT HELLO SAMPLE OUTPUT KHOOR","solution":"def shift_string(S): Shifts each character in the input string S by three positions in the alphabet. shifted_string = \\"\\" for char in S: # Find new character three places ahead new_char = chr((ord(char) - ord(\'A\') + 3) % 26 + ord(\'A\')) shifted_string += new_char return shifted_string"},{"question":"You are tasked with designing a train scheduling system. There are n stations and m direct routes between the stations. Each station can have multiple direct routes to other stations, but no direct route to itself. Trains can move passengers between stations. You need to determine whether it\'s possible for a train to start at a particular station and visit every station at least once, making sure no station is visited more than once along the way. Input The first line of the input contains two integers, n and m — the number of stations and the number of direct routes between them (2 ≤ n ≤ 105, 1 ≤ m ≤ 2·105). The next m lines each contain two integers, u and v, indicating a direct route from station u to station v (1 ≤ u, v ≤ n, u ≠ v). Each route is one-way, meaning you can travel from u to v but not necessarily from v to u. The last line contains an integer s (1 ≤ s ≤ n) — the starting station. Output Print \\"Possible\\" if it is feasible to start from station s and visit every station exactly once; otherwise, print \\"Not Possible\\". Examples Input 6 7 1 2 1 3 2 4 3 4 4 5 5 6 6 1 1 Output Not Possible Input 4 4 1 2 2 3 3 4 4 1 1 Output Possible Note In the first example, the train can\'t visit each station exactly once starting from station 1. Though a trip around the stations is possible, revisiting a station is inevitable. In the second example, starting from station 1, the train can follow the stations in order (1 → 2 → 3 → 4) and visit each station exactly once. Thus, it\'s possible.","solution":"def is_hamiltonian_path_possible(n, m, routes, s): from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) in_degrees = [0] * (n + 1) out_degrees = [0] * (n + 1) for u, v in routes: graph[u].append(v) in_degrees[v] += 1 out_degrees[u] += 1 # Check if any vertex does not have incoming or outgoing edges and is not the starting point for vertex in range(1, n + 1): if (in_degrees[vertex] == 0 or out_degrees[vertex] == 0) and vertex != s: return \\"Not Possible\\" # Try to find a Hamiltonian path using a modified DFS approach def can_visit_all(current, visited_count, visited): if visited_count == n: return True for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True if can_visit_all(neighbor, visited_count + 1, visited): return True visited[neighbor] = False return False visited = [False] * (n + 1) visited[s] = True if can_visit_all(s, 1, visited): return \\"Possible\\" return \\"Not Possible\\""},{"question":"You are given a list of cities connected by two-way roads. Each road has a travel cost associated with it. Your task is to find the most cost-effective way to travel from the first city (city 1) to the last city (city N). However, the twist is that the cost incurred while traveling from city i to city j equals the highest road cost encountered along the path from i to j. In other words, you want to minimize the maximum road cost you will experience on your trip from city 1 to city N. Your task is to output the minimum \\"maximum travel cost\\" you’ll encounter while traveling from city 1 to city N. Constraints 1 ≤ N ≤ 100000 1 ≤ M ≤ 200000 1 ≤ cost ≤ 10000 Input The first line contains two integers N and M, denoting the number of cities and the number of roads, respectively. The next M lines each contain three integers u, v, and cost, denoting a road between city u and city v with a travel cost of \\"cost\\". Output Output a single integer – the minimum possible value of the maximum cost on any path from city 1 to city N. Sample Input 4 5 1 2 4 1 3 3 2 3 2 2 4 7 3 4 1 Sample Output 3","solution":"import heapq def find_min_max_cost(N, M, roads): def dijkstra_max_edge_cost(graph, N): max_edge_cost = [float(\'inf\')] * (N + 1) max_edge_cost[1] = 0 priority_queue = [(0, 1)] while priority_queue: max_cost, node = heapq.heappop(priority_queue) for neighbor, cost in graph[node]: new_max_cost = max(max_cost, cost) if new_max_cost < max_edge_cost[neighbor]: max_edge_cost[neighbor] = new_max_cost heapq.heappush(priority_queue, (new_max_cost, neighbor)) return max_edge_cost[N] graph = {i: [] for i in range(1, N+1)} for u, v, cost in roads: graph[u].append((v, cost)) graph[v].append((u, cost)) return dijkstra_max_edge_cost(graph, N)"},{"question":"Given an integer array nums and an integer target, determine the number of combinations that add up to the target. Each number in the array can be used multiple times to reach the target. Order matters in the combinations. Example 1: Input: nums = [1, 2, 3] target = 4 Output: 7 Explanation: The possible combinations are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (2, 1, 1) (2, 2) (1, 3) (3, 1) Example 2: Input: nums = [9] target = 3 Output: 0 Explanation: There are no combinations that can sum up to the target. Your Task: You don\'t have to read input or print anything. Your task is to complete the function combinationSum4() which takes the integer array nums and integer target and returns the number of possible combinations. Expected Time Complexity: O(target * n) Expected Space Complexity: O(target) Constraint: 1 <= nums.length <= 200 1 <= nums[i] <= 1000 1 <= target <= 1000","solution":"def combinationSum4(nums, target): Returns the number of possible combinations that add up to the target. Each number in the array can be used multiple times to reach the target and the order of numbers matters. # Create a DP array where dp[i] means the number of combinations to get the sum i dp = [0] * (target + 1) # There is one combination to get the zero sum: using no elements dp[0] = 1 for i in range(1, target + 1): for num in nums: if i - num >= 0: dp[i] += dp[i - num] return dp[target]"},{"question":"Anna is organizing her library and wants to arrange her books in a specific order. Each book is represented by an integer value indicating its height. She requires the books to be arranged in non-decreasing order of their heights. Anna is a bit impatient and can only perform the following operation: select two consecutive books and swap them. This operation takes one minute. Your task is to determine the minimum number of minutes required to arrange the books in non-decreasing order of their heights. Input Format: The first line of input contains one integer T denoting the number of test cases. Each test case starts with a single integer N, the number of books, followed by a line with N space-separated integers representing the heights of the books. Output Format: For each test case, output one integer, the minimum number of minutes required to arrange the books in order. Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^2 1 ≤ heights of the books ≤ 10^3 SAMPLE INPUT 2 3 3 1 2 4 4 3 2 1 SAMPLE OUTPUT 2 6 Explanation: In the first test case, we can perform the following swaps: 1. Swap books 1 and 2 -> [1, 3, 2] 2. Swap books 2 and 3 -> [1, 2, 3] So, the minimum number of minutes required is 2. In the second test case, the array is reversed, and we can perform the following swaps: 1. Swap books 1 and 2 -> [3, 4, 2, 1] 2. Swap books 3 and 4 -> [3, 4, 1, 2] 3. Swap books 2 and 3 -> [3, 1, 4, 2] 4. Swap books 3 and 4 -> [3, 1, 2, 4] 5. Swap books 1 and 2 -> [1, 3, 2, 4] 6. Swap books 2 and 3 -> [1, 2, 3, 4] Hence, the minimum number of minutes required is 6.","solution":"def min_swaps_for_sorted_books(T, test_cases): results = [] def count_swaps(arr): swaps = 0 n = len(arr) for i in range(n-1): for j in range(n-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps for case in test_cases: N, books = case results.append(count_swaps(books.copy())) return results"},{"question":"Given a string of lowercase alphabets and an integer K, find the maximum number of distinct characters in any substring of length K. Example 1: Input : str = \\"abcabc\\", K = 3 Output : 3 Explanation: The substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". All of them have 3 distinct characters. Example 2: Input : str = \\"aaa\\", K = 2 Output : 1 Explanation: All substrings of length 2 are \\"aa\\" and each has only 1 distinct character. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxDistinctCharacters() that takes a string (str) and an integer (K), and returns the maximum number of distinct characters in any substring of length K. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |str| ≤ 10^5 1 ≤ K ≤ |str|","solution":"def maxDistinctCharacters(s: str, K: int) -> int: Finds the maximum number of distinct characters in any substring of length K. if K > len(s): return 0 char_count = {} max_distinct = 0 for i in range(len(s)): if i >= K: start_char = s[i - K] char_count[start_char] -= 1 if char_count[start_char] == 0: del char_count[start_char] char_count[s[i]] = char_count.get(s[i], 0) + 1 if i >= K - 1: max_distinct = max(max_distinct, len(char_count)) return max_distinct"},{"question":"# Flight Seat Arrangement Checker You are writing a software to assist in managing the seating arrangement on an airplane. Given a seating arrangement represented as a 2D list of strings, where each string is either \\"X\\" (an occupied seat) or \\"O\\" (an empty seat), write a function to determine if a specific seat is available. You need to take in three parameters: 1. seating (2D list): The current seating arrangement, 2. row (int): The row number of the seat to be checked (starting from 0), 3. col (int): The column number of the seat to be checked (starting from 0). Your function should return `\\"Occupied\\"` if the seat is already occupied and `\\"Available\\"` otherwise. **Examples:** ```python seat_checker([ [\\"O\\", \\"X\\", \\"O\\"], [\\"O\\", \\"O\\", \\"O\\"], [\\"X\\", \\"X\\", \\"O\\"] ], 0, 1) == \\"Occupied\\" seat_checker([ [\\"O\\", \\"X\\", \\"O\\"], [\\"O\\", \\"O\\", \\"O\\"], [\\"X\\", \\"X\\", \\"O\\"] ], 1, 2) == \\"Available\\" ``` **Note:** - The seat array will always have at least one row and one column. - Row and column indexes provided will always be within the bounds of the provided seating arrangement.","solution":"def seat_checker(seating, row, col): Returns the status of a seat. Parameters: - seating: 2D list, representing the seating arrangement. - row: int, the row number of the seat to check. - col: int, the column number of the seat to check. Returns: - str: \\"Occupied\\" if the seat is occupied, \\"Available\\" if the seat is available. if seating[row][col] == \\"X\\": return \\"Occupied\\" else: return \\"Available\\""},{"question":"Emily is organizing a concert seating plan where each group of people wants to sit together in a continuous block of seats. She has a row of seats and a list of groups with the number of people in each group. Ensure that each group sits in a continuous block and there is an empty seat between each block (to separate the groups). Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of seats in the row. The second line contains an integer m (1 ≤ m ≤ 104) — the number of groups. The next line contains m integers — the number of people in each group pi (1 ≤ pi ≤ n). Output Print \\"Yes\\" and the positions of the first seat of each group if it is possible to seat all groups with at least one empty seat between each group. Otherwise, print \\"No\\". Examples Input 10 3 2 3 2 Output Yes 1 4 8 Input 5 2 2 3 Output No","solution":"def seating_plan(n, m, groups): Determines if it is possible to seat all groups with at least one empty seat between each group. Parameters: n (int): The number of seats in the row. m (int): The number of groups. groups (list of int): The number of people in each group. Returns: str: \\"Yes\\" followed by the starting positions of each group if possible, otherwise \\"No\\". total_seats_needed = sum(groups) + (m - 1) # Calculate total seats needed with gaps between groups if total_seats_needed <= n: positions = [] current_pos = 1 for group in groups: positions.append(current_pos) # Record the starting position of the current group current_pos += group + 1 # Move to the start position of the next group (considering one gap seat) return \\"Yesn\\" + \\" \\".join(map(str, positions)) else: return \\"No\\""},{"question":"Given two rectangles defined by their corners in a 2D plane, determine if they overlap. Each rectangle\'s corner coordinates are given as (X1, Y1) for the bottom-left corner and (X2, Y2) for the top-right corner. The rectangles are aligned with the x and y axes. Example 1: Input: Rectangle1: (X1 = 1, Y1 = 1, X2 = 4, Y2 = 4) Rectangle2: (X1 = 2, Y1 = 2, X2 = 5, Y2 = 5) Output: 1 Explanation: The rectangles overlap partially. Example 2: Input: Rectangle1: (X1 = 1, Y1 = 1, X2 = 2, Y2 = 2) Rectangle2: (X1 = 3, Y1 = 3, X2 = 4, Y2 = 4) Output: 0 Explanation: The rectangles do not overlap. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rectanglesOverlap()` which takes 8 integers as input parameters X1, Y1, X2, Y2 for the first rectangle and X3, Y3, X4, Y4 for the second rectangle, and returns 1 if the rectangles overlap and 0 otherwise. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -10^4 <= X1, Y1, X2, Y2, X3, Y3, X4, Y4 <= 10^4","solution":"def rectanglesOverlap(X1, Y1, X2, Y2, X3, Y3, X4, Y4): Determine if two rectangles defined by their corners overlap. Args: - X1, Y1: bottom-left corner of the first rectangle - X2, Y2: top-right corner of the first rectangle - X3, Y3: bottom-left corner of the second rectangle - X4, Y4: top-right corner of the second rectangle Returns: - 1 if the rectangles overlap, 0 otherwise # If one rectangle is to the left of the other if X1 >= X4 or X3 >= X2: return 0 # If one rectangle is above the other if Y1 >= Y4 or Y3 >= Y2: return 0 return 1"},{"question":"# Task You are given a list of integers `nums` and a target integer `target_sum`. Your task is to find all unique quadruples `[a, b, c, d]` from `nums` such that `a + b + c + d = target_sum`. # Example For `nums = [1, 0, -1, 0, -2, 2]` and `target_sum = 0`, the result should be: ``` [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] ``` For `nums = [2, 2, 2, 2, 2]` and `target_sum = 8`, the result should be: ``` [ [2, 2, 2, 2] ] ``` # Input/Output - `[input]` list of integers `nums` A list of integer numbers. - `[input]` integer `target_sum` An integer value for the target sum. - `[output]` list of lists of integers A list containing all unique quadruples `[a, b, c, d]` such that they add up to `target_sum`. The results should be in sorted order (ascending order inside quadruple and ascending order of quadruples). If no such quadruples are found, return an empty list.","solution":"def four_sum(nums, target_sum): Find all unique quadruples in the nums list that sum up to target_sum. :param nums: List[int] - List of integers :param target_sum: int - The target sum for the quadruples :return: List[List[int]] - List of unique quadruples nums.sort() res = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: quad_sum = nums[i] + nums[j] + nums[left] + nums[right] if quad_sum == target_sum: res.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif quad_sum < target_sum: left += 1 else: right -= 1 return res"},{"question":"In a faraway kingdom, the king has an amusement park designed in the shape of a rectangular grid with n rows and m columns. Each cell in the grid can either be empty or contain an obstacle. The goal is to place a large roller coaster track in the park. The track must form a perfect square of size k x k, where k is the side length of the square. Due to safety regulations, the roller coaster track cannot pass through any cell containing an obstacle. The track must be fully contained within the grid and all cells of the square must be empty. Your task is to determine the largest possible side length k for the roller coaster track that can be placed on the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. The next n lines each contain m characters, where each character is either \'.\' representing an empty cell or \'#\' representing an obstacle. Output Print the single integer k, the side length of the largest possible square that can be placed on the grid without passing through any obstacles. If no such square exists, print 0. Examples Input 4 5 ..... ..#.. ..... ..... Output 2 Input 3 3 # # # Output 0 Input 3 4 .... .. .... Output 1 In the first example, the largest square without passing through obstacles is of size 2x2. In the second example, there are obstacles in all cells, so no square can be placed. In the third example, the largest square without passing through obstacles is of size 1x1.","solution":"def largest_square(n, m, grid): def is_square_placable(x, y, size): if x + size > n or y + size > m: return False for i in range(x, x + size): for j in range(y, y + size): if grid[i][j] == \'#\': return False return True max_size = 0 for i in range(n): for j in range(m): current_size = 0 while is_square_placable(i, j, current_size + 1): current_size += 1 max_size = max(max_size, current_size) return max_size # Wrapper function to be used for testing with input and output similar to problem statement def roller_coaster_track(n, m, grid): return largest_square(n, m, grid)"},{"question":"Jasmine received a package of magical seeds. These seeds can grow into a magical tree if taken care of properly over a period of days. For each day, Jasmine can perform two types of actions on the seeds: watering or feeding. You are to determine the height of the magical tree after `n` days based on Jasmine\'s actions. The magical tree grows as follows: If the seed isn\'t watered for three consecutive days, it dies. If the seed is watered on the i-th day, it grows by 2 centimeters. If the seed is fed on the i-th day, it grows by 3 centimeters. If the seed is watered and fed on the same day, it grows by 6 centimeters. If the seed is neither watered nor fed on the i-th day, it does not grow. At the beginning of the 1-st day, the seed is 1 centimeter tall. What is its height after n days? -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains the only integer n (1 leq n leq 100). The second line of each test case contains n integers a_1, a_2, dots, a_n (a_i = 0, 1 or 2). If a_i = 1, the seed is watered on the i-th day, if a_i = 2, the seed is fed on the i-th day, if a_i = 3, the seed is both watered and fed, otherwise (a_i = 0), the seed is neither watered nor fed. -----Output----- For each test case print a single integer k — the tree\'s height after n days, or -1, if the tree dies. -----Examples----- Input 3 4 1 0 2 3 2 0 1 5 0 0 0 1 2 Output 12 3 -1 -----Note----- In the first test case: - On the 1st day, the seed is watered, so it grows by 2 cm (total height: 1 + 2 = 3 cm). - On the 2nd day, the seed is not watered or fed, so it does not grow (total height: 3 cm). - On the 3rd day, the seed is fed, so it grows by 3 cm (total height: 3 + 3 = 6 cm). - On the 4th day, the seed is both watered and fed, so it grows by 6 cm (total height: 6 + 6 = 12 cm).","solution":"def magical_tree_height(n, actions): height = 1 # Initial height consecutive_days_no_action = 0 for action in actions: if action == 0: # Neither watered nor fed consecutive_days_no_action += 1 if consecutive_days_no_action == 3: return -1 else: consecutive_days_no_action = 0 if action == 1: # Watered height += 2 elif action == 2: # Fed height += 3 elif action == 3: # Both watered and fed height += 6 return height def process_test_cases(t, test_cases): results = [] for n, actions in test_cases: results.append(magical_tree_height(n, actions)) return results"},{"question":"Given a set of words, write a function that detects whether the words can be chained to form a circle. A word chain can be formed if the last character of each word is the same as the first character of the next word. The last word should connect to the first word to form a circle. The input will be a list of strings. The output should be \\"YES\\" if the words can form a circle, and \\"NO\\" otherwise. Input: - The first line contains an integer `T`, the number of test cases. - Each test case consists of a single integer `N` and a list of `N` words. Output: - For each test case, print \\"YES\\" if the words can be chained to form a circle, otherwise print \\"NO\\". SAMPLE INPUT 2 4 ab bc cd da 3 abc cde efg SAMPLE OUTPUT YES NO Explanation TC #1 - \\"ab\\" -> \\"bc\\" -> \\"cd\\" -> \\"da\\" forms a circle where the last character of each word is the same as the first character of the next word, and the sequence loops back to the start. TC #2 - Here the word chain cannot be formed as \\"abc\\", \\"cde\\", and \\"efg\\" do not meet the chaining conditions to form a circle.","solution":"def can_form_circle(words): start_counts = {} end_counts = {} for word in words: start = word[0] end = word[-1] start_counts[start] = start_counts.get(start, 0) + 1 end_counts[end] = end_counts.get(end, 0) + 1 if start_counts != end_counts: return \\"NO\\" graph = {} for word in words: start = word[0] end = word[-1] if start not in graph: graph[start] = [] graph[start].append(end) start_node = words[0][0] visited = set() def dfs(node): stack = [node] while stack: curr = stack.pop() if curr in visited: continue visited.add(curr) if curr in graph: stack.extend(graph[curr]) dfs(start_node) return \\"YES\\" if len(visited) == len(graph) else \\"NO\\" def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0].strip()) index = 1 results = [] for _ in range(T): N = int(lines[index].strip()) words = lines[index + 1].strip().split() results.append(can_form_circle(words)) index += 2 return results"},{"question":"Mary loves playing a game called Reverse Blocks. The game consists of an array of integers, and Mary can select any subarray and reverse it to obtain a new array. The aim of the game is to sort the entire array in non-decreasing order with the minimum number of reversals. Given an array of distinct integers, help Mary determine the minimum number of reversals required to sort the array. Input First line contains an integer n, the number of elements in the array. Second line contains n distinct integers separated by spaces. Output A single integer, the minimum number of reversals required to sort the array. Constraints 1 <= n <= 1000 -10000 <= array[i] <= 10000 SAMPLE INPUT 5 3 1 2 5 4 SAMPLE OUTPUT 2","solution":"def min_reversals_to_sort(n, arr): def LIS_length(arr): if not arr: return 0 lis = [] for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) from bisect import bisect_left lis_length = LIS_length(arr) return n - lis_length"},{"question":"Given an array `arr` of unsorted integers, you need to find the length of the longest subsequence such that all elements of the subsequence are consecutive integers. The consecutive numbers can be in any order. Example 1: Input: arr = [1, 9, 3, 10, 4, 20, 2] Output: 4 Explanation: The longest consecutive subsequence is [1, 2, 3, 4]. Example 2: Input: arr = [36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42] Output: 5 Explanation: The longest consecutive subsequence is [32, 33, 34, 35, 36]. Example 3: Input: arr = [] Output: 0 Explanation: The given array is empty. Note: - The length of the array `arr` will be in the range [0, 1000]. - Each element of `arr` will be an integer in the range [-1000, 1000].","solution":"def longest_consecutive_subsequence(arr): Finds the length of the longest subsequence of consecutive integers. Parameters: arr (list): List of unsorted integers Returns: int: Length of the longest consecutive subsequence if not arr: return 0 num_set = set(arr) longest_length = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_length = max(longest_length, current_streak) return longest_length"},{"question":"You are organizing an event where you need to schedule multiple parallel sessions in a given number of rooms. You want to ensure that no two sessions overlap in the same room. Given a list of sessions with their start and end times, write a program to determine the minimum number of rooms required to schedule all sessions without any overlaps. Each session is defined by a start time and an end time. A session `i` is represented by a pair `(si, ei)` where `si` is the start time and `ei` is the end time with `si < ei`. All times are given in the form of integers. For example, if you have the following sessions with their respective times: - Session 1: (1, 5) - Session 2: (2, 6) - Session 3: (8, 9) - Session 4: (5, 9) You can see that at least two rooms are needed: - Room 1: Session 1, Session 4 - Room 2: Session 2, Session 3 Input The input consists of multiple datasets. Each dataset provides a list of sessions and is formatted as follows: n s1 e1 s2 e2 ... sn en Where `n` is the number of sessions (`1 ≤ n ≤ 1000`). Each of the next `n` lines contains two integers `si` and `ei` (`0 ≤ si < ei ≤ 10000`), representing the start and end times of a session. The end of the input is indicated by a single line containing `0`. Output For each dataset, output a single line containing the minimum number of rooms required to schedule all sessions without any overlaps. Example Input 4 1 5 2 6 8 9 5 9 3 1 3 2 4 3 5 0 Output 2 2","solution":"def min_rooms_required(sessions): if not sessions: return 0 # Extract start and end times starts = sorted([session[0] for session in sessions]) ends = sorted([session[1] for session in sessions]) max_rooms = 0 cur_rooms = 0 i, j = 0, 0 n = len(sessions) # Two-pointer technique while i < n and j < n: if starts[i] < ends[j]: cur_rooms += 1 i += 1 else: cur_rooms -= 1 j += 1 max_rooms = max(max_rooms, cur_rooms) return max_rooms def parse_and_solve_session_data(input_data): results = [] lines = input_data.split(\'n\') idx = 0 while idx < len(lines): n = int(lines[idx].strip()) if n == 0: break sessions = [] for _ in range(n): idx += 1 s, e = map(int, lines[idx].strip().split()) sessions.append((s, e)) idx += 1 results.append(min_rooms_required(sessions)) return results"},{"question":"You are given a binary tree with n nodes, where each node has a unique integer value between 1 and n. Your task is to find the sum of the values of all nodes at the deepest level of the binary tree. ----- Input ----- The first line contains an integer n (1 le n le 1000) – the number of nodes in the binary tree. The next n-1 lines contain two integers u_i and v_i (1 le u_i, v_i le n), representing an edge between nodes u_i and v_i. ----- Output ----- Print one integer – the sum of the values of all nodes at the deepest level of the binary tree. ----- Examples ----- Input 5 1 2 1 3 2 4 2 5 Output 9 Input 3 1 2 1 3 Output 5 ----- Note ----- In the first example, the binary tree looks like this: ``` 1 / 2 3 / 4 5 ``` The deepest level contains the nodes 4 and 5. Their sum is 4 + 5 = 9. In the second example, the binary tree looks like this: ``` 1 / 2 3 ``` The deepest level contains the nodes 2 and 3. Their sum is 2 + 3 = 5.","solution":"from collections import defaultdict, deque def sum_deepest_nodes(n, edges): Returns the sum of the values of all nodes at the deepest level of the binary tree. n: int - number of nodes in the binary tree edges: List[Tuple[int, int]] - list of edges representing the binary tree if n == 1: return 1 # Only one node, sum is its value # Build the tree using adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform BFS to find the deepest level nodes queue = deque([1]) visited = set([1]) current_level_sum = 0 while queue: current_level_sum = 0 # Reset sum for each level level_size = len(queue) for _ in range(level_size): node = queue.popleft() current_level_sum += node for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return current_level_sum"},{"question":"David loves star patterns. Every night, he looks at the night sky and traces various shapes formed by aligning stars. One evening, he decided to challenge himself by creating a special kind of pattern using stars (\'*\'). He wants to write a program that generates an hourglass pattern of stars for a given odd integer height. The hourglass pattern for a given height `h` is built as follows: 1. The top half consists of decreasing number of stars per line, centered with spaces if necessary. 2. The bottom half mirrors the top half, excluding the middle line. Your task is to generate this hourglass pattern for a given odd integer `h`. # Input A single integer `h` (1 ≤ h ≤ 99), which is guaranteed to be odd. # Output Produce the hourglass pattern such that each line contains the proper number of stars centered with spaces if necessary. # Examples Input ``` 5 ``` Output ``` ***** *** * *** ***** ``` Input ``` 7 ``` Output ``` ******* ***** *** * *** ***** ******* ``` Note: - In the first example, the hourglass pattern is 5 characters tall. The middle line has a single star, with increasing stars symmetrically above and below it. - In the second example, the hourglass pattern is 7 characters tall. Again, with the middle line being the single star, and increasing stars symmetrically above and below it.","solution":"def generate_hourglass(height): Generates an hourglass pattern of \'*\' for a given odd integer height. Parameters: height (int): The odd integer height of the hourglass pattern. Returns: List[str]: Hourglass pattern lines. # Ensure height is an odd number within the specified range if height < 1 or height > 99 or height % 2 == 0: raise ValueError(\\"Height must be an odd integer between 1 and 99.\\") pattern = [] # Compute top half including middle line for i in range(height // 2 + 1): stars = \'*\' * (height - 2 * i) spaces = \' \' * i pattern.append(spaces + stars + spaces) # Compute bottom half for i in range(height // 2 - 1, -1, -1): stars = \'*\' * (height - 2 * i) spaces = \' \' * i pattern.append(spaces + stars + spaces) return pattern"},{"question":"A factory produces containers that are labeled with a unique identifier. The identifiers contain only uppercase English alphabets (\'A\' to \'Z\'). Due to a system error, some labels are missing. The factory wants to identify the missing labels and print them in sorted order. Given two lists: `generated_labels` containing all the labels that were supposed to be generated, and `assigned_labels` containing the labels that were actually assigned to containers. Find the labels that are missing from the `assigned_labels` list. Implement a function that takes in two lists of strings and returns a sorted list of missing labels. -----Input----- - The input consists of two lists `generated_labels` and `assigned_labels`. - `generated_labels` is a list of `n` strings containing the supposed labels, where `1 ≤ n ≤ 1000`. - `assigned_labels` is a list of `m` strings containing the assigned labels in no particular order, where `0 ≤ m ≤ n`. - Each string in the lists has a maximum length of 10 characters. -----Output----- - Return a sorted list of strings containing the missing labels. -----Examples----- Input: generated_labels = [\\"A1\\", \\"B2\\", \\"C3\\", \\"D4\\"] assigned_labels = [\\"A1\\", \\"D4\\"] Output: [\\"B2\\", \\"C3\\"] Input: generated_labels = [\\"CONTAINER1\\", \\"CONTAINER2\\", \\"CONTAINER3\\"] assigned_labels = [\\"CONTAINER1\\", \\"CONTAINER2\\", \\"CONTAINER3\\"] Output: [] Input: generated_labels = [\\"X99\\", \\"Y100\\", \\"Z101\\"] assigned_labels = [\\"X99\\"] Output: [\\"Y100\\", \\"Z101\\"] -----Note----- In the first example, the labels \\"B2\\" and \\"C3\\" are missing, so they are returned in sorted order [\\"B2\\", \\"C3\\"]. In the second example, all labels are assigned, so the result is an empty list. In the third example, \\"Y100\\" and \\"Z101\\" are missing, thus the output is [\\"Y100\\", \\"Z101\\"].","solution":"def find_missing_labels(generated_labels, assigned_labels): Returns a sorted list of labels that are in generated_labels but not in assigned_labels. missing_labels = set(generated_labels) - set(assigned_labels) return sorted(list(missing_labels))"},{"question":"Given a positive integer N, determine how many numbers from 1 to N are both prime and palindrome. Example 1: Input: N = 10 Output: 4 Explanation: The palindromic primes from 1 to 10 are {2, 3, 5, 7}. Example 2: Input: N = 50 Output: 5 Explanation: The palindromic primes from 1 to 50 are {2, 3, 5, 7, 11}. Your Task: You don\'t need to read input or print anything. Your task is to complete the function palindromicPrimeCount() which takes an integer N and returns the count of numbers from 1 to N that are both prime and palindrome. Expected Time Complexity: O(N log(N)) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^4","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def palindromicPrimeCount(N): Count the numbers that are both prime and palindrome from 1 to N. count = 0 for i in range(1, N + 1): if is_prime(i) and is_palindrome(i): count += 1 return count"},{"question":"# Task Write a function, `isCyclic`, that determines whether a directed graph contains a cycle. # Example Given the graph: ``` A -> B B -> C C -> A ``` The output should be `true` as the graph contains a cycle: `A -> B -> C -> A`. For a graph: ``` A -> B B -> C C -> D ``` The output should be `false` as the graph does not contain a cycle. # Input/Output - `[input]` object `graph` An adjacency list representing a directed graph. Each key in the object is a node, and the value is an array of nodes it has edges to. Example: ``` { \\"A\\": [\\"B\\"], \\"B\\": [\\"C\\"], \\"C\\": [\\"A\\"] } ``` Constraints: The graph is acyclic and contains no more than 1000 nodes. - `[output]` a boolean value `true` if the graph contains a cycle, `false` otherwise.","solution":"def isCyclic(graph): Determines whether a directed graph contains a cycle. :param graph: A dictionary representing the adjacency list of the graph. :return: True if the graph contains a cycle, otherwise False. def dfs(node, visited, recStack): visited.add(node) recStack.add(node) for neighbour in graph.get(node, []): if neighbour not in visited: if dfs(neighbour, visited, recStack): return True elif neighbour in recStack: return True recStack.remove(node) return False visited = set() recStack = set() for node in graph.keys(): if node not in visited: if dfs(node, visited, recStack): return True return False"},{"question":"You are given an array of N positive integers. You are allowed to perform operations on the array where in each operation, you select any 2 adjacent elements of the array and replace both elements with their sum. The task is to determine the value of the largest possible element you can obtain after performing any number of such operations. -----Input----- The first line of input contains an integer N (1 le N le 10^5). The second line contains N space-separated positive integers representing the elements of the array. -----Output----- Output the value of the largest possible element that can be obtained after performing any number of operations. -----Examples----- Sample Input 1: 5 1 2 3 4 5 Sample Output 1: 15 Sample Input 2: 3 3 1 2 Sample Output 2: 6 Sample Input 3: 2 10 20 Sample Output 3: 30","solution":"def largest_possible_element(arr): Returns the largest possible element that can be obtained after performing the given operations. return sum(arr)"},{"question":"You are given a grid represented by a list of strings where each character in the string is either \'1\' or \'0\'. The grid is of size `N x M`, where `N` is the number of rows and `M` is the number of columns. You are required to process `Q` queries of two types: - `1` A B X: Update cell (A, B) to have the value X (\'1\' or \'0\'). - `2`: Calculate the number of `1`s in the largest sub-rectangle in the grid. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers, N and M, denoting the number of rows and columns in the grid respectively. - The next N lines contain M characters each (\'1\' or \'0\'), representing the grid. - The next line will contain an integer, Q, the number of queries. - Each of the next Q lines will contain one of 2 kinds of updates as mentioned in the statement. -----Output----- For each query of the second type, print a single line containing one integer - the maximum area of the largest sub-rectangle containing only `1`s. -----Constraints----- - 1 le T le 10 - 1 le N, M le 200 - 1 le Q le 5000 - All queries are valid and within bounds. -----Example Input----- 1 4 5 10101 11100 11010 11110 3 2 1 2 2 0 2 -----Example Output----- 6 4 -----Explanation----- The initial grid is: ``` 10101 11100 11010 11110 ``` The largest sub-rectangle of \'1\'s has an area of 6. After updating cell (2, 2) to \'0\', the grid becomes: ``` 10101 10100 11010 11110 ``` Now, the largest sub-rectangle of \'1\'s has an area of 4.","solution":"def largest_rectangle_area(heights): Helper function to calculate the largest rectangle area in a histogram. stack = [-1] max_area = 0 for i, h in enumerate(heights): while stack[-1] != -1 and heights[stack[-1]] >= h: height = heights[stack.pop()] width = i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack[-1] != -1: height = heights[stack.pop()] width = len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area def maximal_rectangle(matrix): Function to calculate the largest rectangle of \'1\'s in a 2D grid. if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for row in matrix: for i in range(m): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def process_grid(N, M, grid, queries): Process the grid and respond to the queries. results = [] for query in queries: if query[0] == 1: _, A, B, X = query grid[A-1][B-1] = str(X) else: results.append(maximal_rectangle(grid)) return results"},{"question":"Charles is a chemist experimenting with different chemical reactions. Each reaction involves mixing a certain number of chemicals in specified ratios. For each chemical reaction, you are given the ratios of chemicals required. Your task is to determine the minimum number of each chemical needed to maintain the given ratios when a specified total number of chemical units is required for the reaction. -----Input----- The first line of the input consists of an integer N (1 leq N leq 10^3), the total number of units required for the reaction. The second line contains M integers (1 leq M leq 100), representing the ratio of each chemical involved in the reaction. The sum of these ratios will always divide N perfectly. -----Output----- Print a single line with M integers. Each integer represents the number of units of each chemical needed to achieve the required ratios for the total number of units. -----Examples----- Sample Input 1: 24 2 3 4 Sample Output 1: 4 6 8 Sample Input 2: 60 5 7 8 Sample Output 2: 15 21 24","solution":"def calculate_chemicals(N, ratios): total_ratio = sum(ratios) units_per_ratio = N // total_ratio required_units = [units_per_ratio * ratio for ratio in ratios] return required_units # Example usage: # N = 24 # ratios = [2, 3, 4] # Output should be: [4, 6, 8] # print(calculate_chemicals(24, [2, 3, 4]))"},{"question":"A software company is working on a new feature for their application which involves calculating the cumulative sum of elements in an array and identifying specific properties at different stages. You have been tasked with writing a function that accomplishes this. Given an integer array `A`, for each index `i`, calculate the cumulative sum of the array from index `1` to `i`. Additionally, identify whether the cumulative sum is a prime number at each stage and whether it is an even or odd number. Input: The first line contains an integer `N`, denoting the number of elements in the array `A`. The next line contains `N` space-separated integers, each denoting the ith integer of the array `A`. Output: Print the cumulative sum for each index followed by \\"Prime\\" if the cumulative sum is a prime number, \\"Even\\" if the number is even, or \\"Odd\\" if the number is odd. Constraints: ``` 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 100000 ``` SAMPLE INPUT: ``` 5 1 3 5 7 11 ``` SAMPLE OUTPUT: ``` 1 Odd 4 Even 9 Odd 16 Even 27 Odd ``` Explanation: - For the first index, the cumulative sum is `1`, which is odd. So, the output is `1 Odd`. - For the second index, the cumulative sum is `1 + 3 = 4`, which is even. So, the output is `4 Even`. - For the third index, the cumulative sum is `1 + 3 + 5 = 9`, which is odd. So, the output is `9 Odd`. - For the fourth index, the cumulative sum is `1 + 3 + 5 + 7 = 16`, which is even. So, the output is `16 Even`. - For the fifth index, the cumulative sum is `1 + 3 + 5 + 7 + 11 = 27`, which is odd. So, the output is `27 Odd`.","solution":"import sympy def cumulative_sum_properties(N, A): This function calculates cumulative sum of an array and identifies if it\'s a prime number, even or odd at each stage. results = [] cumulative_sum = 0 for num in A: cumulative_sum += num if sympy.isprime(cumulative_sum): results.append(f\\"{cumulative_sum} Prime\\") elif cumulative_sum % 2 == 0: results.append(f\\"{cumulative_sum} Even\\") else: results.append(f\\"{cumulative_sum} Odd\\") return results"},{"question":"Peter is working on a puzzle involving numbers and words. He has an array of distinct integers and a corresponding array of words of the same length, where each word is associated with a unique integer from the integer array. Peter wants to rearrange the words such that the order of the words corresponds to the sorted order of their associated integers. For example, if Peter has the integers `[23, 1, 45]` and the words `[\\"banana\\", \\"apple\\", \\"dog\\"]`, sorting the integers yields `[1, 23, 45]`, so the words should be rearranged to `[\\"apple\\", \\"banana\\", \\"dog\\"]`. Your task is to help Peter by writing a function to accomplish this. -----Input:----- - The first line contains an integer N, the number of integers and words in each array. (1 leq N leq 10^5) - The second line contains N distinct integers separated by a space. - The third line contains N words separated by a space. -----Output:----- - Output a single line containing the words rearranged in the order corresponding to the sorted integer array. -----Sample Input 1:----- 3 23 1 45 banana apple dog -----Sample Output 1:----- apple banana dog -----Sample Input 2:----- 5 5 3 9 1 7 orange melon grape cherry peach -----Sample Output 2:----- cherry melon orange peach grape","solution":"def rearrange_words_by_sorted_integers(n, integers, words): Rearranges words based on the sorted order of their associated integers. Args: n: An integer, the number of integers and words. integers: A list of distinct integers. words: A list of words corresponding to the integers. Returns: A list of words rearranged according to the sorted order of the integers. # Pair each word with its corresponding integer paired = list(zip(integers, words)) # Sort the pairs based on the integer value paired.sort() # Extract the words from the sorted pairs sorted_words = [word for _, word in paired] return sorted_words"},{"question":"Peter\'s friend, Angela, is a full-time baker and loves experimenting with new recipes. One day, she decides to bake a special layered cake for an upcoming baking competition. Each layer of cake needs a specific type of ingredient that must be bought from specific shops. She is constrained by time and can only visit a few shops due to a busy schedule. Angela has a list of shops she can visit, the types of ingredients they offer, and the cost of each ingredient. There is also a minimum number of layers that the cake must have. Your task is to help Angela purchase the necessary ingredients while minimizing the total cost. -----Input----- The input consists of a single test case. The first line contains three space-separated integers n, m, and k, where n (1 le n le 100) is the number of shops, m (1 le m le 1000) is the total number of ingredient offerings across all shops, and k (1 le k le n) is the minimum number of different layers the cake must have. The next m lines each provide an ingredient offering from a shop. Each line contains three space-separated integers s, i, and c (0 le s < n, 1 le i le k, 1 le c le 1000) where s is the shop number, i is the ingredient type, and c is the cost of that ingredient. Multiple shops can sell the same type of ingredient, but at different costs. -----Output----- Output the minimum total cost to buy at least k different types of ingredients from the available shops. Ensure that the shopping list satisfies the minimum layer constraint for the cake. -----Examples----- Sample Input: 4 6 3 0 1 100 0 2 200 1 1 150 1 3 300 2 2 50 3 3 80 Sample Output: 330 Explanation: Angela can visit shop 0 for ingredient type 1 costing 100 cents and shop 2 for ingredient type 2 costing 50 cents. Finally, she can visit shop 3 for ingredient type 3 at the cost of 80 cents, making the total cost 100 + 50 + 80 = 230 cents.","solution":"def min_cost_to_buy_ingredients(n, m, k, offerings): from collections import defaultdict import heapq # Dictionary to store the minimum cost offerings for each ingredient type ingredient_offers = defaultdict(list) # Populate the dictionary with the offerings for offering in offerings: shop, ingredient, cost = offering ingredient_offers[ingredient].append(cost) # Ensure we have at least `k` different ingredients available if len(ingredient_offers) < k: return -1 # For each ingredient type, we keep the minimum cost sorted min_costs = [] for costs in ingredient_offers.values(): heapq.heappush(min_costs, heapq.nsmallest(1, costs)[0]) if len(min_costs) < k: return -1 # Extract the minimum k costs to get the minimum total cost heapq.heapify(min_costs) min_total_cost = sum(heapq.nsmallest(k, min_costs)) return min_total_cost"},{"question":"You are given a string `s` and a character `c`. Your task is to create a new string where each occurrence of the character `c` in the input string `s` is replaced by the string \'xyz\'. Example: Input: `s=\'abcabc\'` and `c=\'b\'` Output: `\'axyzcaxyzc\'` Input: `s=\'hello world\'` and `c=\'o\'` Output: `\'hellxyz wxyzrld\'` Constraint: - The input string `s` will have a length between 1 and 100. - The character `c` will be a single character from the English alphabet (a-z). SAMPLE INPUT `programming`, `m` SAMPLE OUTPUT `prograxyzxyzing` Explanation: In the first example, every occurrence of \'b\' in the string \'abcabc\' is replaced by \'xyz\', resulting in \'axyzcaxyzc\'. In the second example, every occurrence of \'o\' in the string \'hello world\' is replaced by \'xyz\', resulting in \'hellxyz wxyzrld\'.","solution":"def replace_character_with_str(s, c): Replace each occurrence of the character c in the string s with the string \'xyz\'. Parameters: s (str): The input string. c (str): The character to be replaced in the string. Returns: str: The modified string with each occurrence of c replaced by \'xyz\'. return s.replace(c, \'xyz\')"},{"question":"A large tech company has a round of interviews where candidates are asked to solve an interesting problem. A candidate is given the task of decoding a secret message. The message is provided as an array of integers, and each integer represents the position of a lowercase English letter (\'a\' to \'z\') in the alphabet. For example, 1 corresponds to \'a\', 2 corresponds to \'b\', and so on up to 26 which corresponds to \'z\'. The candidate needs to implement a function that will take an array of integers and return the decoded string. However, there\'s a twist. The message contains not only single letters but also patterns where one or more consecutive elements can represent a grouped letter. For example, the pattern `[1, 20, 1, 20]` should be decoded as \\"ata\\" since `20` corresponds to `t`. The function should return the decoded message as a string. -----Input----- The input consists of two lines: The first line contains an integer n (1 le n le 100) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 26) — the elements of the array representing the encoded message. -----Output----- Print the decoded string. -----Examples----- Input 4 1 20 1 20 Output \\"ata\\" Input 6 3 15 4 9 14 7 Output \\"coding\\" -----Note----- In the first test case, the integers represent the decoded string \\"ata\\". Here, `1` is \'a\', `20` is \'t\', `1` is \'a\', and `20` is \'t\', forming the word \\"ata\\" as `20 1` represents single letters. In the second test case, the integers represent \\"coding\\". Here, `3` is \'c\', `15` is \'o\', `4` is \'d\', `9` is \'i\', `14` is \'n\', and `7` is \'g\', forming the word \\"coding\\".","solution":"def decode_message(n, encoded_message): Given the length of the array and the array of integers, decode it into a string based on the traditional alphabetical position. decoded_message = \'\' for number in encoded_message: decoded_message += chr(number + 96) # Convert number to corresponding letter return decoded_message"},{"question":"A bakery wants to keep track of its daily ingredient usage and is having difficulty with its current system. They need help with some coding. First, write a function that, given the amount of flour used (in kg), the amount of sugar used (in kg), and the amount of butter used (in kg), will give you the total weight of ingredients used (in kg). Second, write a function that, given a list of daily ingredient usages for a week (a list of tuples [(day, flour, sugar, butter)]), will return a summary dictionary where the keys are the ingredient names (\'flour\', \'sugar\', \'butter\') and the values are the total amounts used for each ingredient over the week. Example: Input: [(\'Monday\', 1.5, 0.75, 0.8), (\'Tuesday\', 2.0, 0.9, 1.0), (\'Wednesday\', 1.8, 0.85, 0.95), (\'Thursday\', 1.6, 0.8, 0.9), (\'Friday\', 1.7, 0.9, 1.0), (\'Saturday\', 2.0, 1.0, 1.1), (\'Sunday\', 1.9, 0.95, 1.05)] Output: {\'flour\': 12.5, \'sugar\': 6.15, \'butter\': 6.8}","solution":"def total_weight(flour, sugar, butter): Returns the total weight of the ingredients used. return flour + sugar + butter def weekly_summary(ingredient_usages): Given a list of daily ingredient usages for a week, returns a summary dictionary with the total amounts used for each ingredient over the week. summary = {\'flour\': 0, \'sugar\': 0, \'butter\': 0} for day, flour, sugar, butter in ingredient_usages: summary[\'flour\'] += flour summary[\'sugar\'] += sugar summary[\'butter\'] += butter return summary"},{"question":"Majority Element in Subarrays Given an array of integers, handle two types of queries. The first type of query updates the value at a specific index in the array. The second type of query finds the majority element within a given subarray. The majority element is the element that appears more than floor((R - L + 1) / 2) times in the subarray. If no such element exists, return -1. # Input: The first line contains two integers, N and Q, representing the number of elements in the array and the number of queries respectively. The second line contains N integers representing the elements of the array. The next Q lines contain queries, either of the following forms: - `1 i x` - Update the element at index i to x. - `2 L R` - Find the majority element in the subarray from index L to R (inclusive). # Output: For each query of the second type, print the majority element of the subarray from index L to R, or -1 if no majority element exists. # Constraints: * 1 ≤ N, Q ≤ 10^5 * 1 ≤ array[i], x ≤ 10^9 * 1 ≤ L ≤ R ≤ N # Example: Input: ``` 7 5 2 3 2 4 2 2 5 2 1 5 1 3 1 2 1 5 2 1 7 2 6 7 ``` Output: ``` 2 -1 2 -1 ``` # Explanation: 1. Initial array: [2, 3, 2, 4, 2, 2, 5] - Query `2 1 5`: Majority element in [2, 3, 2, 4, 2] is `2` as it appears 3 out of 5 times. 2. Update element at index 3 to 1: Array becomes [2, 3, 1, 4, 2, 2, 5]. - Query `2 1 5`: Subarray [2, 3, 1, 4, 2] has no majority element. 3. Query `2 1 7`: Entire array [2, 3, 1, 4, 2, 2, 5] has no majority element. 4. Query `2 6 7`: Subarray [2, 5] has no majority element.","solution":"def update_array(array, index, x): Updates the element at the given index with the value x. array[index] = x def find_majority_element(array, L, R): Finds the majority element in the subarray from index L to R (inclusive). subarray = array[L:R+1] count = {} for num in subarray: if num in count: count[num] += 1 else: count[num] = 1 majority_count = (R - L + 1) // 2 for key, value in count.items(): if value > majority_count: return key return -1 def process_queries(N, Q, arr, queries): Processes a list of queries on the array. results = [] for query in queries: if query[0] == 1: _, index, x = query update_array(arr, index - 1, x) elif query[0] == 2: _, L, R = query result = find_majority_element(arr, L - 1, R - 1) results.append(result) return results"},{"question":"A palindrome is a string that reads the same forward and backward. A k-palindrome is a string that becomes a palindrome if at most k characters can be removed from it. Given a string s and an integer k, determine whether the string is a k-palindrome. Input Format - The first line contains a string `s` consisting of lowercase English letters only. - The second line contains an integer `k`. Constraints - 1 ≤ length of s ≤ 5000 - 0 ≤ k ≤ length of s Output Format - Print \\"YES\\" if the string `s` is a k-palindrome, otherwise print \\"NO\\". Sample Input 0 abcdecba 1 Sample Output 0 YES Explanation 0 Removing the character \'d\' makes the string \\"abceecba\\", which is a palindrome. Sample Input 1 abcdecba 0 Sample Output 1 NO Explanation 1 No characters can be removed, and \\"abcdecba\\" is not a palindrome as is. Sample Input 2 abacdefghgfedcba 2 Sample Output 2 YES Explanation 2 Removing characters \'c\' and \'d\' from string \\"abacdefghgfedcba\\" converts it into \\"abafghgfaba\\", which is a palindrome. Function Signature ```python def is_k_palindrome(s: str, k: int) -> str: pass ``` Your task is to implement the function `is_k_palindrome` that returns \\"YES\\" if the string `s` is a k-palindrome, otherwise returns \\"NO\\".","solution":"def is_k_palindrome(s: str, k: int) -> str: def longest_palindromic_subsequence(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] n = len(s) lps = longest_palindromic_subsequence(s) min_deletions = n - lps if min_deletions <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Sarah is developing a new puzzle game. The game takes place on an infinite grid where some cells are blocked and cannot be crossed. There is a start cell where Sarah begins and a target cell Sarah wants to reach. Sarah can move from one cell to another if they are adjacent (up, down, left, right) and not blocked. Help Sarah find the minimum number of moves needed to reach the target cell from the start cell. If it is not possible to reach the target cell, return -1. -----Input----- The first line contains four integers s_i, s_j, t_i, t_j (0 ≤ s_i, s_j, t_i, t_j ≤ 10^9) representing the coordinates of the start cell (s_i, s_j) and target cell (t_i, t_j), respectively. The second line contains an integer m (0 ≤ m ≤ 100,000) representing the number of blocked cells. Each of the next m lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 10^9) representing the coordinates of a blocked cell. -----Output----- Print an integer representing the minimum number of moves needed to reach the target cell from the start cell. If it is not possible to reach the target cell, print -1. -----Examples----- Input 0 0 3 3 3 1 0 1 1 1 2 Output 6 Input 0 0 1 1 4 0 1 1 0 1 1 0 0 Output -1 -----Note----- Consider the first example: Sarah will use the following path: (0, 0) → (0, 1) → (0, 2) → (0, 3) → (1, 3) → (2, 3) → (3, 3). In the second example, it is impossible for Sarah to reach the target cell since all adjacent cells are blocked.","solution":"from collections import deque def min_moves_to_target(s_i, s_j, t_i, t_j, blocked_cells): Returns the minimum number of moves to reach the target cell (t_i, t_j) from the start cell (s_i, s_j). If it\'s not possible to reach the target cell, returns -1. if (s_i, s_j) == (t_i, t_j): return 0 blocked_set = set(blocked_cells) if (s_i, s_j) in blocked_set or (t_i, t_j) in blocked_set: return -1 def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if (nx, ny) not in blocked_set: yield (nx, ny) queue = deque([(s_i, s_j, 0)]) visited = set() visited.add((s_i, s_j)) while queue: x, y, dist = queue.popleft() for nx, ny in neighbors(x, y): if (nx, ny) == (t_i, t_j): return dist + 1 if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array which represents the heights of buildings in a row. You can select a continuous subarray of buildings and increase their heights by 1 in one operation. Determine the minimum number of operations required to make all buildings have the same height. -----Input----- The first line contains one integer n (1 le n leq 2000) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the initial heights of the buildings. -----Output----- Print one integer — the minimum number of operations required to make all the buildings have the same height. -----Examples----- Input 4 1 2 3 4 Output 3 Input 3 5 3 8 Output 5","solution":"def min_operations_to_equal_heights(n, heights): if n == 1: return 0 min_height = min(heights) max_height = max(heights) result = max_height - min_height return result"},{"question":"Task Write a function `fibonacci_sum_even` that calculates the sum of all even Fibonacci numbers up to a given number `n`. # Rules/Note: * The function should return 0 if `n` is less than or equal to 0. * The Fibonacci sequence starts with 0 and 1. * Only include even Fibonacci numbers in the sum. # Examples: * fibonacci_sum_even(10) → 10 * Explanation: The Fibonacci numbers less than or equal to 10 are 0, 1, 1, 2, 3, 5, 8 and the even ones among them are 0, 2, 8. Their sum is 10. * fibonacci_sum_even(34) → 44 * Explanation: The Fibonacci numbers less than or equal to 34 are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and the even ones among them are 0, 2, 8, 34. Their sum is 44.","solution":"def fibonacci_sum_even(n): Returns the sum of all even Fibonacci numbers up to a given number n. if n <= 0: return 0 a, b = 0, 1 even_sum = 0 while a <= n: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"You are given a list of N tasks, where each task has a specific start time and end time. A single worker can only work on one task at a time. Your task is to determine the maximum number of non-overlapping tasks the worker can complete. -----Constraints----- - 1 leq N leq 100,000 - 1 leq start_i < end_i leq 10^9 - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N -----Output----- Print the maximum number of non-overlapping tasks the worker can complete. -----Sample Input----- 5 1 3 2 4 3 5 6 8 5 7 -----Sample Output----- 3 The worker can do the following tasks without any overlap: - Task 1: (1, 3) - Task 3: (3, 5) - Task 4: (6, 8) Thus, the maximum number of non-overlapping tasks the worker can complete is 3.","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be completed. Each task is represented by a tuple (start, end). if not tasks: return 0 # Sort tasks by end time tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def read_input(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0].strip()) tasks = [tuple(map(int, line.strip().split())) for line in data[1:]] return tasks if __name__ == \\"__main__\\": tasks = read_input() print(max_non_overlapping_tasks(tasks))"},{"question":"Given a string S and an integer N, determine the smallest lexicographical string that can be obtained by removing exactly N characters from S. If there are multiple results with the same lexicographical order, return any of them. -----Constraints----- - 1 <= |S| <= 10^5 - 0 <= N < |S| - S only consists of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S N -----Output----- A single string denoting the smallest lexicographical string obtained by removing exactly N characters from S. -----Sample Input----- abcde 2 -----Sample Output----- abc Observe the input \\"abcde\\" with N = 2. The possible strings after removing exactly 2 characters are: - \\"ab\\" - \\"ac\\" - \\"ad\\" - \\"ae\\" - \\"bc\\" - \\"bd\\" - \\"be\\" - \\"cd\\" - \\"ce\\" - \\"de\\" Among them, \\"abc\\" is the smallest lexicographical string.","solution":"def smallest_lexicographical_string(S, N): Returns the smallest lexicographical string by removing exactly N characters from S. stack = [] to_remove = N for char in S: while stack and to_remove > 0 and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # In case we didn\'t remove enough characters, remove from the end. while to_remove > 0: stack.pop() to_remove -= 1 return \'\'.join(stack)"},{"question":"Apollo enjoys creating intricate structures with numbers. One day, he decided to play with matrices and came up with an interesting transformation. He proposed the following problem to Pan: Given an n x m matrix A, you need to transform each element A[i][j] into B[i][j] where B[i][j] is the sum of all elements in the rectangle defined by the top-left corner (1,1) and the bottom-right corner (i,j) in matrix A. In simpler terms, B[i][j] is the sum of all elements A[x][y] for 1 <= x <= i and 1 <= y <= j. Can you help Pan transform the matrix according to Apollo\'s challenge? Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) indicating the number of rows and columns in the matrix respectively. Each of the next n lines contains m integers A[i][j] (0 ≤ A[i][j] ≤ 10^4), representing the matrix A. Output Print n lines, each with m integers denoting the transformed matrix B. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 3 6 5 12 21 12 27 45 Hints - Think of a way to keep track of accumulated sums while iterating through the matrix. - Try using a 2D prefix sum array to make the computation efficient. Note: In the output matrix B, B[i][j] should be printed without leading or trailing spaces in each line.","solution":"def matrix_transformation(n, m, A): # Initialize the matrix B with the same dimensions as A B = [[0] * m for _ in range(n)] # Calculate the prefix sums for i in range(n): for j in range(m): # Current element current_element = A[i][j] # Sum of elements above if i > 0: current_element += B[i-1][j] # Sum of elements to the left if j > 0: current_element += B[i][j-1] # Subtract the double counted top-left diagonal element if i > 0 and j > 0: current_element -= B[i-1][j-1] # Set the current element in B matrix B[i][j] = current_element return B"},{"question":"You are given a sequence of n integers. You need to find a pair of distinct indices i and j such that the absolute difference between the two elements is minimized. In other words, you need to find indices i and j such that |a_i - a_j| is the smallest possible positive value among all possible pairs (i, j). -----Input----- - The first line contains an integer n (2 le n le 10^5) denoting the number of elements in the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9). -----Output----- - Print the minimum absolute difference between any two elements in the sequence. -----Examples----- Sample Input 1: 6 3 8 1 9 15 2 Sample Output 1: 1 Sample Input 2: 4 1 5 3 19 Sample Output 2: 2","solution":"def min_absolute_difference(n, sequence): Given a sequence of n integers, finds the minimum absolute difference between any two distinct elements. sequence.sort() min_diff = float(\'inf\') for i in range(n - 1): min_diff = min(min_diff, abs(sequence[i+1] - sequence[i])) return min_diff"},{"question":"You are given a connected undirected graph with N nodes and M edges. Each edge has a weight associated with it. Your task is to find the Minimum Spanning Tree (MST) of the graph and calculate its total weight. If there are multiple MSTs with the same total weight, you need to choose the lexicographically smallest one. To compare two MSTs lexicographically: 1. Represent each MST as a list of its edges `(u, v, w)`, sorted first by `u`, then by `v`, and finally by `w`. 2. Consider the lexicographic order of these sorted lists to determine which MST is smaller. # Input The input is given in the following format: ``` N M u1 v1 w1 u2 v2 w2 ... uM vM wM ``` Where: - ( N ) (2 ≤ ( N ) ≤ 100) is the number of nodes. - ( M ) (1 ≤ ( M ) ≤ 4950) is the number of edges. - ( u_i ) and ( v_i ) (1 ≤ ( u_i ), ( v_i ) ≤ ( N )) are the nodes connected by the ( i )-th edge. - ( w_i ) (1 ≤ ( w_i ) ≤ 1000) is the weight of the ( i )-th edge. # Output Output the total weight of the MST in the first line. Then, output the edges of the MST, each in a new line in the format: ``` u v w ``` If there are multiple MSTs with the same total weight, choose the one that is lexicographically smallest. # Example Input ``` 4 5 1 2 1 1 3 2 3 4 3 2 4 4 1 4 5 ``` Output ``` 6 1 2 1 1 3 2 3 4 3 ``` # Notes - The graph is connected; therefore, an MST always exists. - To find the lexicographically smallest MST, you should consider sorting the edges and maintaining proper order while constructing the MST.","solution":"def find_mst(N, M, edges): Returns the total weight of the Minimum Spanning Tree (MST) and the edges of the MST. Args: N (int): Number of nodes. M (int): Number of edges. edges (list of tuples): Each tuple contains three integers representing an edge (u, v, w). Returns: tuple: Total weight of the MST and a list of edges in the MST. # Sort edges lexicographically by (weight, u, v) edges.sort(key=lambda x: (x[2], x[0], x[1])) parent = list(range(N + 1)) rank = [0] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False mst_weight = 0 mst_edges = [] for u, v, w in edges: if union(u, v): mst_weight += w mst_edges.append((u, v, w)) if len(mst_edges) == N - 1: break mst_edges.sort() # Ensure edges are sorted lexicographically return mst_weight, mst_edges"},{"question":"A bookstore is organizing their inventory and needs help sorting the books based on different criteria. They want a program that can sort the books by title and, in case of identical titles, by year of publication. If both title and publication year are identical, sort by author name. -----Input:----- - First line contains N, the number of test cases. - For each test case: - First line contains an integer M, the number of books. - The next M lines each contain the details of a book in the format: \\"<title>;<year>;<author>\\". -----Output:----- - For each test case, output the sorted list of books with each book\'s details in the format: \\"<title>;<year>;<author>\\", one book per line. -----Constraints----- - 1 leq N leq 10 - 1 leq M leq 100 - The year is an integer between 1500 and 2023. - The title and author are strings of up to 100 characters. -----Sample Input:----- 2 3 \\"Pride and Prejudice;1813;Jane Austen\\" \\"Moby Dick;1851;Herman Melville\\" \\"Great Expectations;1861;Charles Dickens\\" 2 \\"The Great Gatsby;1925;F. Scott Fitzgerald\\" \\"The Great Gatsby;1925;Scott Fitzgerald\\" -----Sample Output:----- \\"Great Expectations;1861;Charles Dickens\\" \\"Moby Dick;1851;Herman Melville\\" \\"Pride and Prejudice;1813;Jane Austen\\" \\"The Great Gatsby;1925;F. Scott Fitzgerald\\" \\"The Great Gatsby;1925;Scott Fitzgerald\\" -----EXPLANATION:----- The books are first sorted by title alphabetically. If titles are the same, they are sorted by year of publication. If both title and year are the same, they are sorted by author name.","solution":"def sort_books(test_cases): results = [] for case in test_cases: books = [book.split(\\";\\") for book in case] books.sort(key=lambda x: (x[0], int(x[1]), x[2])) sorted_books = [\\";\\".join(book) for book in books] results.append(sorted_books) return results def process_input(input_lines): input_iter = iter(input_lines) N = int(next(input_iter)) test_cases = [] for _ in range(N): M = int(next(input_iter)) case = [next(input_iter).strip() for _ in range(M)] test_cases.append(case) return test_cases"},{"question":"Given a string s and an integer k, you need to find the length of the shortest substring of s that contains at least k distinct characters. If there is no such substring, return -1. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 1000) and an integer k (1 le k le 1000). -----Output----- For each test case, print the length of the shortest substring containing at least k distinct characters or -1 if there is no such substring. -----Examples----- Input 3 abcabc 2 bbbbb 2 abcd 4 Output 2 -1 4 -----Note----- In the first test case, the shortest substring that contains at least 2 distinct characters is \\"ab\\" or \\"bc\\", which both have a length of 2. In the second test case, there is no substring that contains at least 2 distinct characters since all characters in the string are the same. In the third test case, the whole string \\"abcd\\" contains exactly 4 distinct characters, and its length is 4.","solution":"def shortest_substring_with_k_distinct_chars(s, k): Returns the length of the shortest substring containing at least k distinct characters. If there\'s no such substring, return -1. n = len(s) if k > n: return -1 min_length = float(\'inf\') for i in range(n): char_set = set() for j in range(i, n): char_set.add(s[j]) if len(char_set) >= k: min_length = min(min_length, j - i + 1) break return min_length if min_length != float(\'inf\') else -1 def process_multiple_cases(test_cases): results = [] for s, k in test_cases: result = shortest_substring_with_k_distinct_chars(s, k) results.append(result) return results"},{"question":"Jenny loves creating and organizing her unique number sequences. Each sequence has a type: increasing, decreasing, or random. As her best friend, you are tasked with helping her organize these sequences into several bins based on their type. Here\'s the problem you need to solve: Given sequences of numbers, determine the type of each sequence. -----Input----- The first line contains an integer T (1 le T le 1000), the number of test cases. Each test case consists of two lines: - The first line contains an integer N (2 le N le 10^5), the length of the sequence. - The second line contains N space-separated integers describing the sequence. The total number of integers across all test cases will not exceed 10^6. -----Output----- For each test case, print one of the following: - \\"Increasing\\" if the sequence is strictly increasing. - \\"Decreasing\\" if the sequence is strictly decreasing. - \\"Random\\" otherwise. -----Example----- Input 3 5 1 2 3 4 5 4 5 4 3 2 6 1 3 3 2 5 7 Output Increasing Decreasing Random -----Explanations----- In the first test case, the sequence {1, 2, 3, 4, 5} is strictly increasing as each number is greater than the previous one. In the second test case, the sequence {5, 4, 3, 2} is strictly decreasing as each number is smaller than the previous one. In the third test case, the sequence {1, 3, 3, 2, 5, 7} is random as it does not follow a strictly increasing or decreasing order.","solution":"def classify_sequence(n, sequence): Classifies the sequence as \'Increasing\', \'Decreasing\', or \'Random\'. Args: n (int): Length of the sequence sequence (list of int): The sequence of integers Returns: str: \'Increasing\', \'Decreasing\', or \'Random\' based on the classification if all(sequence[i] < sequence[i + 1] for i in range(n - 1)): return \\"Increasing\\" elif all(sequence[i] > sequence[i + 1] for i in range(n - 1)): return \\"Decreasing\\" else: return \\"Random\\" def classify_multiple_sequences(test_cases): results = [] for t in test_cases: n, sequence = t result = classify_sequence(n, sequence) results.append(result) return results"},{"question":"A coding competition has just commenced, and contestants are tasked with an intriguing challenge. The organizer has provided an integer array consisting of n members, each a positive integer. The task is to identify the largest difference of two elements within any contiguous subarray from this array. Given an array of integers, the contestants need to find the maximum difference between any two elements such that the elements are part of a subarray and the first element appears before the second element in that subarray. Input The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of elements in the array. The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 1000), the elements of the array. Output Output a single integer, the maximum difference between any two elements in any contiguous subarray. Examples Input 5 4 8 2 10 3 Output 8 Explanation The maximum difference would be between the elements 2 and 10 in the subarray [2, 10], where the difference is 10 - 2 = 8. Input 6 1 2 6 4 3 7 Output 6 Explanation The maximum difference is 6 from the subarray [1, 7], where the difference is 7 - 1 = 6.","solution":"def find_max_difference(nums): Returns the maximum difference between any two elements in a subarray where the first element appears before the second element in that subarray. if len(nums) < 2: return 0 max_diff = 0 min_element = nums[0] for num in nums[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"In a distant land, there is a peculiar game called \\"Magical Sequence\\". In this game, the player is given a sequence of integers and must determine a specific property of this sequence. Specifically, the player should find the longest subsequence of the given sequence such that the absolute difference between any two consecutive elements of the subsequence is at most 1. A subsequence is derived by deleting some or no elements from the sequence without changing the order of the remaining elements. Your task is to develop a program to help the player determine the length of such a subsequence. Input The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), representing the elements of the sequence. Output Print a single integer — the length of the longest subsequence where the absolute difference between any two consecutive elements is at most 1. Example Input 6 1 2 3 4 4 5 Output 6 Input 5 10 11 12 13 14 Output 5","solution":"def longest_subsequence_length(n, sequence): if n == 0: return 0 sequence.sort() max_length = 1 current_length = 1 for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) <= 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Example test cases print(longest_subsequence_length(6, [1, 2, 3, 4, 4, 5])) # Output: 6 print(longest_subsequence_length(5, [10, 11, 12, 13, 14])) # Output: 5"},{"question":"You are given an array of integers representing the scores of a video game player in each level they played. Your task is to determine the minimum number of scores the player can remove from the array to ensure the remaining scores are in strictly increasing order. A sequence is strictly increasing if every element is less than the following element. For instance, the sequence [1, 2, 2, 3] is not strictly increasing because the third element is not smaller than the fourth element. In contrast, [1, 2, 3, 4] is strictly increasing. -----Input----- The first line of the input contains an integer n (1 leq n leq 2 cdot 10^5), denoting the number of levels played. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) representing the scores in the levels played. -----Output----- Output the minimum number of scores that need to be removed to make the remaining scores strictly increasing. -----Examples----- Input 5 2 3 1 2 3 Output 2 Input 4 4 3 2 1 Output 3 Input 6 1 2 3 1 2 3 Output 3 -----Note----- In the first sample, removing the scores 3 and 1 makes the remaining scores [2, 2, 3] strictly increasing. In the second sample, removing any three of the scores 4, 3, 2, 1 will leave a single element, and the sequence will be strictly increasing. A valid solution would be removing 4, 3, and 2 to leave the sequence [1]. In the third sample, removing scores 1, 2, and 3 from the last three levels keeps the sequence [1, 2, 3] which is strictly increasing.","solution":"def min_removals_to_make_increasing(scores): Given an array of integers representing scores, returns the minimum number of scores that need to be removed to make the remaining scores strictly increasing. from bisect import bisect_left def length_of_lis(arr): lis = [] for score in arr: pos = bisect_left(lis, score) if pos == len(lis): lis.append(score) else: lis[pos] = score return len(lis) n = len(scores) if n <= 1: return 0 length_lis = length_of_lis(scores) return n - length_lis"},{"question":"You are given an array of integers A of length n. You need to perform a series of operations to reduce the array to just one integer. The operations you can perform are as follows: 1. Select any two consecutive elements A_i and A_{i+1} of the array, remove them, and insert their sum at the same position. For example, if A = [2, 3, 1], you can select A_1 and A_2, then replace them with their sum to get the new array [5, 1]. You then repeat operations on the new array until only one element remains. You need to find the minimum possible value of the last remaining element after performing an optimal sequence of operations. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (2 le n le 2 cdot 10^5) — the size of the array. The second line of each test case contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^9). It is guaranteed that the sum of n over all test cases doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, output the minimum possible value of the last remaining element after performing the operations. -----Examples----- Input 2 3 1 2 3 4 2 2 2 2 Output 6 8 -----Note----- In the first sample, you can achieve the minimum possible value by performing the following operations: 1. Sum 1 and 2 to get [3, 3]. 2. Sum the resulting 3\'s to get 6. In the second sample, summing any two consecutive elements produces the same result, leading to an array of 2, 4, 4, and finally summing further results in the minimum value 8.","solution":"def min_possible_value(array): Given an array, return the minimum possible value of the last remaining element after performing the mentioned operations. return sum(array) def process_test_cases(t, test_cases): results = [] for i in range(t): _, array = test_cases[i] results.append(min_possible_value(array)) return results"},{"question":"Binary Tree - Height & Sum of Nodes Implement `height(root)` to calculate the height of a binary tree. Implement `sumNodes(root)` to compute the sum of all the integer values in the nodes of the binary tree. Both functions should be part of the same task as they operate on similar structures and can be implemented through recursive approaches. You may assume the existence of the `Node` class with attributes `value`, `left`, and `right` representing the node\'s value and its left and right children respectively. ```python class Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def height(root): # Implement this function to calculate the height of the binary tree def sumNodes(root): # Implement this function to compute the sum of all node values in the binary tree ``` Example usage: ```python # Building the binary tree: # 5 # / # 3 8 # / # 2 4 10 root = Node(5) root.left = Node(3) root.left.left = Node(2) root.left.right = Node(4) root.right = Node(8) root.right.right = Node(10) print(height(root)) # Output: 3 print(sumNodes(root)) # Output: 32 ```","solution":"class Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def height(root): Calculate the height of a binary tree. if root is None: return 0 left_height = height(root.left) right_height = height(root.right) return max(left_height, right_height) + 1 def sumNodes(root): Compute the sum of all integer values in the nodes of the binary tree. if root is None: return 0 return root.value + sumNodes(root.left) + sumNodes(root.right)"},{"question":"Write a program to find the maximum element in each subarray of size K for the given array. -----Input----- The first line contains an integer T, the total number of test cases. For each test case, the first line contains two integers N and K, where N is the size of the array and K is the size of the subarray. The second line contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, print the maximum element of each subarray of size K in a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - 1 ≤ array elements ≤ 10000 -----Example----- Input 2 8 3 1 3 2 5 8 7 6 4 5 2 2 3 4 2 1 Output 3 5 8 8 8 7 3 4 4 2","solution":"def max_of_subarrays(arr, N, K): Returns a list of the maximum elements of each subarray of size K for the given array. if K > N: return [] max_elements = [] for i in range(N - K + 1): max_elements.append(max(arr[i:i + K])) return max_elements def process_test_cases(test_cases): Process multiple test cases and returns the results as a list of lists. results = [] for case in test_cases: N, K, arr = case results.append(max_of_subarrays(arr, N, K)) return results"},{"question":"# Problem statement You are given a series of expressions that are formed using only two types of components: 1. Integers from `1` to `9` (inclusive). 2. Addition `+`, subtraction `-`, multiplication `*`, and division `/` operators. The expressions follow these rules: - They are always valid arithmetic expressions. - They contain no parenthesis. - Division `/` represents integer division where the result is truncated towards zero. Your task is to write a function that evaluates these expressions and returns the result. Your function should take a list of strings, where each string is an expression, and return a list of integers representing the results of each expression. To help you get started, here is the definition of the function: ```python def evaluate_expressions(expressions): pass ``` # Input Format - A list of strings, where each string is an arithmetic expression. - Each expression is guaranteed to be non-empty. - It is guaranteed that each expression will be valid as per the rules mentioned above. # Output Format - A list of integers where each integer is the evaluated result of the corresponding expression in the input list. # Examples Example 1 **Input:** ```python expressions = [\\"1+2-3\\", \\"4*5/2\\", \\"9-6+3\\"] ``` **Output:** ```python [0, 10, 6] ``` **Explanation:** - For the first expression: `1 + 2 - 3 = 3 - 3 = 0`. - For the second expression: `4 * 5 / 2 = 20 / 2 = 10`. - For the third expression: `9 - 6 + 3 = 3 + 3 = 6`. Example 2 **Input:** ```python expressions = [\\"3+5*2\\", \\"7-10/2\\", \\"4*3+2\\"] ``` **Output:** ```python [13, 2, 14] ``` **Explanation:** - For the first expression: `3 + 5 * 2 = 3 + 10 = 13`. - For the second expression: `7 - 10 / 2 = 7 - 5 = 2`. - For the third expression: `4 * 3 + 2 = 12 + 2 = 14`. # Constraints - Each expression will contain between `1` and `100` characters. - The operators `+`, `-`, `*`, and `/` are always surrounded by exactly one integer on each side. - You do not need to handle divisions by zero, as they will not appear in the input. # Note - The input expression follows the precedence rules of standard arithmetic, i.e., multiplication and division are performed before addition and subtraction.","solution":"def evaluate_expressions(expressions): def evaluate(expr): import re # Function to perform arithmetic operations def compute(op1, operator, op2): op1, op2 = int(op1), int(op2) if operator == \'+\': return op1 + op2 elif operator == \'-\': return op1 - op2 elif operator == \'*\': return op1 * op2 elif operator == \'/\': return op1 // op2 # Split expression into tokens of integers and operators tokens = re.findall(r\'d+|[-+*/]\', expr) # Evaluation based on operator precedence # First, handle all multiplication and division i = 0 while i < len(tokens): if tokens[i] == \'*\' or tokens[i] == \'/\': tokens[i-1] = compute(tokens[i-1], tokens[i], tokens[i+1]) del tokens[i:i+2] else: i += 1 # Then, handle all addition and subtraction i = 0 while i < len(tokens): if tokens[i] == \'+\' or tokens[i] == \'-\': tokens[i-1] = compute(tokens[i-1], tokens[i], tokens[i+1]) del tokens[i:i+2] else: i += 1 return tokens[0] return [evaluate(expr) for expr in expressions]"},{"question":"Given a binary tree, complete the function to connect nodes at the same level. Each node in the binary tree has an additional pointer called \'nextRight\' which needs to be set to point to the next node on the same level. If there is no next node on the same level, the \'nextRight\' should be set to NULL. Example 1: Input: 10 / 3 5 / 4 1 2 Output: 10 -> NULL 3 -> 5 -> NULL 4 -> 1 -> 2 -> NULL Example 2: Input: 1 / 2 3 / / 4 5 6 7 Output: 1 -> NULL 2 -> 3 -> NULL 4 -> 5 -> 6 -> 7 -> NULL Your Task: The task is to complete the function `connect()` which takes the root of the binary tree as input parameter and sets the \'nextRight\' pointer for each node. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: - The binary tree can have up to 10^5 nodes. - The binary tree node values lie between 0 and 10^5.","solution":"from collections import deque class Node: def __init__(self, data): self.data = data self.left = None self.right = None self.nextRight = None def connect(root): if not root: return # Initialize a deque (queue) for level order traversal queue = deque() queue.append(root) while queue: # Number of nodes at current level level_size = len(queue) # Previous node in the same level prev = None for i in range(level_size): # Get the current node node = queue.popleft() # Link the previous node\'s nextRight to the current node if prev: prev.nextRight = node # Update previous node to current node prev = node # Enqueue left child if node.left: queue.append(node.left) # Enqueue right child if node.right: queue.append(node.right) # The last node in the current level should point to None if prev: prev.nextRight = None"},{"question":"You are given a recipe which consists of N dishes. The recipe instructions contain a list of dependencies which specify that certain dishes must be prepared before others. Each dependency is given as a pair (a, b) which indicates that dish a must be completed before dish b can be started. Your task is to find an order in which all the dishes can be prepared according to these dependencies. Constraints - 1 ≤ N ≤ 10^4 - 0 ≤ M ≤ 5×10^4 - 1 ≤ a, b ≤ N - The given dependencies form a Directed Acyclic Graph (DAG) Input The input is given from Standard Input in the following format: N M a_1 b_1 a_2 b_2 : a_M b_M Output Print a valid order in which all the dishes can be prepared. If there are multiple valid orders, print any one of them. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 1 2 3 4 5 Input 6 6 1 4 2 4 3 5 4 5 4 6 5 6 Output 1 2 3 4 5 6 Input 3 2 1 3 2 3 Output 1 2 3","solution":"from collections import defaultdict, deque def find_order(N, M, dependencies): Returns a list of dishes in order they can be prepared given the dependencies. # Create adjacency list and indegree list adj_list = defaultdict(list) indegree = [0] * (N + 1) for a, b in dependencies: adj_list[a].append(b) indegree[b] += 1 # Initialize queue with dishes having no prerequisites queue = deque([i for i in range(1, N + 1) if indegree[i] == 0]) order = [] # Perform topological sort while queue: current = queue.popleft() order.append(current) for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == N: return order else: return [] # If there\'s no valid order def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) dependencies = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(M)] result = find_order(N, M, dependencies) print(\' \'.join(map(str, result)))"},{"question":"Chloe loves playing a game that involves arranging beads on a string. She has `n` beads, each with a numeric value. Chloe wants to know the maximum possible sum of the values on any contiguous subarray of these beads. A contiguous subarray is a subarray formed by selecting a range of consecutive elements from the original array of beads. Help Chloe find the maximum possible sum she can obtain by choosing any contiguous subarray of the beads. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of beads. The second line contains `n` space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) representing the values of the beads. -----Output----- Print a single integer – the maximum possible sum of any contiguous subarray. -----Examples----- Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 -1 -2 -3 -4 -5 Output -1 -----Note----- In the first test example, the subarray [4, -1, 2, 1] has the maximum sum, which is 6. In the second test example, since all the values are negative, the single bead with the least negative value gives the maximum sum, which is -1.","solution":"def max_contiguous_subarray_sum(n, beads): Returns the maximum possible sum of any contiguous subarray of the given beads. :param n: Number of beads :param beads: List of integers representing the values of the beads :return: Maximum sum of a contiguous subarray # Initialize the maximum sum and the current sum max_sum = float(\'-inf\') current_sum = 0 for bead in beads: current_sum += bead if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You are given an array of n integers. You are allowed to perform the following operation: Select any two adjacent integers in the array and remove them. The product of these two integers is then inserted back into the array at the position where the first integer was located. The goal is to minimize the sum of the elements in the final array after performing the operation any number of times. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. Output Print a single integer — the minimum sum of the remaining elements after any sequence of operations. Examples Input 4 3 1 4 2 Output 14 Input 5 1 2 3 4 5 Output 15 Input 3 1 10 1 Output 10 Note In the first example, one potential sequence of operations is as follows: 1. Remove [3, 1], resulting in the array [3, 4, 2] 2. Remove [3, 4], resulting in the array [12, 2] 3. Remove [12, 2], resulting in the final array [24] The sum of the elements in the final array is 24. In the second example, one potential sequence of operations is as follows: 1. Remove [1, 2], resulting in the array [1, 3, 4, 5] 2. Remove [1, 3], resulting in the array [3, 4, 5] 3. Remove [3, 4], resulting in the array [12, 5] 4. Remove [12, 5], resulting in the final array [60] The sum of the elements in the final array is 60. In this case, every operation results in the same sum.","solution":"def minimize_final_sum(n, array): Minimize the sum of the elements in the final array. According to the problem, the optimal way to perform the operations is by following this simplified pattern: The final sum will always be the product of all the elements in the input array. if n == 2: return array[0] * array[1] product = 1 for number in array: product *= number return product"},{"question":"Given an NxM grid representing a terrain elevation map, find the highest peak in the terrain. Each cell in the grid contains an integer that represents the elevation at that point. The highest peak is defined as the maximum value surrounded by lower values or the edge of the grid. INPUT The first line contains two integers, N (number of rows) and M (number of columns), separated by a space. The next N lines contain M space-separated integers representing the grid elevations. OUTPUT Print the location (row,column) of the highest peak in the format \\"(row,column)\\". If there are multiple highest peaks, print the one that appears first (top-left) in the grid. SAMPLE INPUT 6 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 SAMPLE OUTPUT (5,5)","solution":"def find_highest_peak(grid): Finds the location of the highest peak in the given terrain grid. A peak is defined as the highest value in the grid. :param grid: List of Lists containing the grid elevation data :return: Tuple of (row, col) indicating the location of the highest peak max_value = -float(\'inf\') peak_location = (0, 0) for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] > max_value: max_value = grid[i][j] peak_location = (i, j) return peak_location def parse_input(input_string): Parses the input string and returns the parsed grid. :param input_string: str: input string representing the grid :return: List of Lists representing the grid elevations lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid # Example usage: def main(input_string): grid = parse_input(input_string) highest_peak = find_highest_peak(grid) return highest_peak input_string = 6 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 print(main(input_string)) # Output should be (5, 5)"},{"question":"A squirrel lives in a grid of size n times n and can move between cells by magic portals. Each cell has a certain number of magic portals that allow the squirrel to move to specific other cells in the grid. The portals are represented as a list of triples (i, j, k) meaning the squirrel can move from cell (i, j) to cell (k, l). The squirrel wants to collect as many nuts as possible, starting from a given position (a, b), within a given number of steps. Each cell (i, j) contains a certain number of nuts N_{ij}. Determine the maximum number of nuts the squirrel can collect if it starts at cell (a, b) and is limited to up to L steps. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. For each test case, the first line contains three integers n, L, M (1 leq n leq 50, 1 leq L leq 10^3, 0 leq M leq 10^3) — the size of the grid, the maximum number of steps, and the number of portals respectively. The second line contains two integers a and b (1 leq a, b leq n) — the starting cell of the squirrel. The next n lines contain n integers each, representing the number of nuts N_{ij} in each cell of the grid. The following M lines each contain four integers i, j, k, l (1 leq i, j, k, l leq n) representing a portal from (i, j) to (k, l). -----Output----- Print t lines, each containing the maximum number of nuts the squirrel can collect for each corresponding test case. -----Examples----- Input 2 3 2 2 1 1 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 4 1 0 2 2 1 0 1 1 1 1 1 1 0 0 0 0 Output 44 1 -----Note----- In the first test case, the squirrel can collect a maximum number of nuts by starting at cell (1, 1), moving to cell (2, 2) via the portal, and then moving to cell (3, 3) via the second portal. The nuts collected will be 1 + 5 + 9 = 15. If the squirrel can also traverse to cell (1, 1) again, an additional amount of nuts can be collected. Hence a total of 44 nuts can be collected. In the second test case, the squirrel can only collect 1 nut located at the start cell since it cannot proceed further due to the portal restriction.","solution":"def max_nuts(grid, portals, start, l): n = len(grid) from collections import defaultdict, deque # Build adjacency list for portals graph = defaultdict(list) for u, v, x, y in portals: graph[(u-1, v-1)].append((x-1, y-1)) # Initialize variables max_nuts_collected = 0 a, b = start[0] - 1, start[1] - 1 # BFS with step count queue = deque([(a, b, l, 0)]) # (current_i, current_j, remaining_steps, current_nuts) visited = set() while queue: i, j, steps, nuts_collected = queue.popleft() if steps < 0: continue nuts_collected += grid[i][j] max_nuts_collected = max(max_nuts_collected, nuts_collected) if (i, j, steps) in visited: continue visited.add((i, j, steps)) for new_i, new_j in graph[(i, j)]: queue.append((new_i, new_j, steps - 1, nuts_collected)) return max_nuts_collected def solve(t, test_cases): results = [] for i in range(t): n, l, m = test_cases[i][\'grid_info\'] start = test_cases[i][\'start\'] grid = test_cases[i][\'grid\'] portals = test_cases[i][\'portals\'] results.append(max_nuts(grid, portals, start, l)) return results"},{"question":"Design a function that simulates a simplified online store\'s discount system. The store offers three types of discounts based on the total amount spent by a customer. The discount rules are as follows: - If the total amount spent is greater than or equal to 100 and less than 200, a 10% discount is applied. - If the total amount spent is greater than or equal to 200 and less than 500, a 20% discount is applied. - If the total amount spent is greater than or equal to 500, a 30% discount is applied. Your task is to implement a function that takes the total amount spent as input and outputs the final amount to be paid after applying the appropriate discount. Function Signature: `def calculate_discounted_price(total_amount: float) -> float:` # Input - A single floating-point number representing the total amount spent, `total_amount` (0 ≤ total_amount ≤ 10000). # Output - A single floating-point number representing the final amount to be paid after applying the discount. # Example Input ``` 150.0 ``` Output ``` 135.0 ``` Input ``` 250.0 ``` Output ``` 200.0 ``` Input ``` 800.0 ``` Output ``` 560.0 ``` # Note - In the first example, a 10% discount is applied to 150, resulting in a final amount of 135. - In the second example, a 20% discount is applied to 250, resulting in a final amount of 200. - In the third example, a 30% discount is applied to 800, resulting in a final amount of 560.","solution":"def calculate_discounted_price(total_amount: float) -> float: Calculates the final amount after applying the discount based on the total amount spent. if total_amount >= 500: discount = 0.30 elif total_amount >= 200: discount = 0.20 elif total_amount >= 100: discount = 0.10 else: discount = 0.0 discount_amount = total_amount * discount final_amount = total_amount - discount_amount return round(final_amount, 2)"},{"question":"A group of friends wants to attend movie screenings in a single night. Each screening has a specific start and end time. They can only attend one screening at a time, and a screening attended cannot overlap with another screening attended. Given a list of screenings, each represented by a pair of start and end times, determine the maximum number of screenings that can be attended. Example: Input: [(1, 3), (2, 5), (4, 6)] Output: 2 Explanation: The friends can attend the screenings (1, 3) and (4, 6). Input: [(1, 2), (3, 4), (0, 6), (5, 7)] Output: 3 Explanation: The friends can attend the screenings (1, 2), (3, 4), and (5, 7).","solution":"def max_non_overlapping_screenings(screenings): Given a list of screenings, each represented by a pair of start and end times, determine the maximum number of non-overlapping screenings that can be attended. Args: screenings: List of tuples, where each tuple is (start, end) representing the start and end time of a screening. Returns: int: Maximum number of non-overlapping screenings that can be attended. # Sort the screenings by end time sorted_screenings = sorted(screenings, key=lambda x: x[1]) # Initialize variables max_count = 0 last_end_time = 0 # Iterate through sorted screenings and count non-overlapping screenings for start, end in sorted_screenings: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"You are given an array of integers. Your task is to find all pairs of integers within the array that sum up to a given target integer. Each pair should be ordered such that the smaller number precedes the larger number. If there are multiple pairs that sum up to the same target, those pairs should be sorted lexicographically based on the first element, then the second. Return the list of pairs and ensure that no pair is repeated. --- Input Format --- - The first line will contain an integer T - the number of test cases. - The first line of each test case contains two integers N and target, where N is the number of integers in the array and target is the target sum. - The second line of each test case contains N integers - the elements of the array. --- Output Format --- For each test case, output all the pairs in the specified order as described above. If no pairs are found, output an empty list. --- Constraints --- 1 ≤ T ≤ 1000 2 ≤ N ≤ 1000 -10^6 ≤ array elements ≤ 10^6 -10^6 ≤ target ≤ 10^6 --- Sample Input 1 --- 3 5 5 1 2 3 4 5 3 6 10 15 3 4 0 -1 -1 1 2 --- Sample Output 1 --- [(1, 4), (2, 3)] [] [(-1, 1), (-1, 1)] --- Explanation 1 --- Test case 1: The pairs (1, 4) and (2, 3) both sum up to 5 and are in the required order. Test case 2: No pairs sum up to 6. Test case 3: The pairs (-1, 1) appear twice but only one unique pair is outputted as pairs should not be repeated. As such, the result is [(-1, 1), (-1, 1)].","solution":"def find_pairs(arr, target): Finds all unique pairs of integers in the array that sum up to the target integer. Parameters: arr (list of int): List of integers. target (int): Target sum. Returns: list of tuples: List of pairs sorted lexicographically arr.sort() pairs = set() seen = {} for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen[number] = True return sorted(list(pairs)) def find_all_pairs(test_cases): Solves multiple test cases of the pair-finding problem. Parameters: test_cases (list of tuples): List of test cases where each test case is a tuple (N, target, arr) Returns: list of list of tuples: List containing results for all test cases results = [] for N, target, arr in test_cases: results.append(find_pairs(arr, target)) return results"},{"question":"re.sub() The expression re.sub() is used to replace all occurrences of a pattern in a string with a replacement string. Code >>> import re >>> re.sub(r\'d\', \'#\', \'ab12cd34ef\') \'abcdef\' re.subn() The expression re.subn() is similar to re.sub() but also returns the number of substitutions made. Code >>> import re >>> re.subn(r\'d\', \'#\', \'ab12cd34ef\') (\'abcdef\', 4) Task You are given a string S and a list of replacement pairs. Each replacement pair contains two elements: [old, new]. Your task is to sequentially replace all occurrences of `old` in the string S with `new` using the re.sub() method. After all replacements are done, return the final modified string. Input Format - The first line contains a string S. - The second line contains an integer N, the number of replacement pairs. - The next N lines each contain two space-separated strings, old and new, representing the replacement pairs. Constraints - 1 leq text{len}(S) leq 100 - 1 leq N leq 10 - Each old and new string has a length range of [1, 10]. Output Format Print the final modified string after all replacements have been applied. Sample Input hello world 2 world universe hello hi Sample Output hi universe Explanation First, \'world\' is replaced with \'universe\' resulting in the intermediate string \\"hello universe\\". Next, \'hello\' is replaced with \'hi\', resulting in the final string \\"hi universe\\".","solution":"import re def replace_sequences(s, replacements): Sequentially replaces all occurrences of old with new in the string s using replacement pairs. :param s: The original string :param replacements: List of replacement pairs [old, new] :return: The final modified string after all replacements for old, new in replacements: s = re.sub(re.escape(old), new, s) return s"},{"question":"A triathlete is training for a competition and wants to keep track of her best performance in each of the three events: Swimming, Cycling, and Running. You need to write a program to help her track these records and provide updates when new best records are achieved. For each event, you will be given the name of the event and the time taken to complete it. Your task is to update the best time for that event if the new time is better (i.e., less than the current best time). If the current best time for an event is updated, you should print the new best time; otherwise, print the current best time. Input Format: - The first line contains N, the number of performance records to be processed. - The next N lines each contain a string E (the name of the event: \\"Swimming\\", \\"Cycling\\", or \\"Running\\") and an integer T (the time taken to complete the event in seconds). Output Format: - For each record, print the updated best time for the given event. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ T ≤ 10^9 SAMPLE INPUT 5 Swimming 500 Cycling 1200 Running 900 Swimming 450 Running 850 SAMPLE OUTPUT 500 1200 900 450 850","solution":"def update_best_times(records): best_times = {\'Swimming\': float(\'inf\'), \'Cycling\': float(\'inf\'), \'Running\': float(\'inf\')} results = [] for event, time in records: if time < best_times[event]: best_times[event] = time results.append(best_times[event]) return results def process_input(n, input_data): records = [] for i in range(n): event, time_str = input_data[i].split() records.append((event, int(time_str))) return update_best_times(records) # Example usage: n_input = 5 input_data_input = [\\"Swimming 500\\", \\"Cycling 1200\\", \\"Running 900\\", \\"Swimming 450\\", \\"Running 850\\"] output = process_input(n_input, input_data_input) print(output) # Expected: [500, 1200, 900, 450, 850]"},{"question":"Quorra is creating a magical potion. To make it, she needs to mix various ingredients in a special order. Each ingredient has a potency level, which affects the overall strength of the potion. Quorra wants to keep track of the greatest potency level of any ingredient she adds after each step. Help Quorra by writing a program that calculates and prints the cumulative maximum potency level after adding each ingredient. Input - The first line contains an integer T, denoting the number of test cases. - Each test case starts with an integer N, the number of ingredients. - The second line of each test case contains N integers, where each integer represents the potency level of an ingredient. Output - For each test case, output a line containing N integers. Each integer should be the highest potency level encountered so far for that test case. Constraints: 1 <= T <= 50 1 <= N <= 100 1 <= potency level <= 1000000 SAMPLE INPUT 2 4 5 1 7 3 5 2 8 6 1 9 SAMPLE OUTPUT 5 5 7 7 2 8 8 8 9 Explanation For the first test case: - After adding the first ingredient: max(5) = 5 - After adding the second ingredient: max(5, 1) = 5 - After adding the third ingredient: max(5, 1, 7) = 7 - After adding the fourth ingredient: max(5, 1, 7, 3) = 7 For the second test case: - After adding the first ingredient: max(2) = 2 - After adding the second ingredient: max(2, 8) = 8 - After adding the third ingredient: max(2, 8, 6) = 8 - After adding the fourth ingredient: max(2, 8, 6, 1) = 8 - After adding the fifth ingredient: max(2, 8, 6, 1, 9) = 9","solution":"def cumulative_max_potency(test_cases): results = [] for case in test_cases: N, potencies = case current_max = potencies[0] result = [current_max] for i in range(1, N): if potencies[i] > current_max: current_max = potencies[i] result.append(current_max) results.append(result) return results # Reading and processing input def process_input(input_string): input_lines = input_string.split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) potencies = list(map(int, input_lines[index + 1].split())) test_cases.append((N, potencies)) index += 2 return test_cases"},{"question":"Given an integer array `nums`, return all possible unique permutations. You can return the answer in any order. A permutation of an array is an arrangement of its members into a sequence or linear order. The unique permutations problem implies that if an element appears multiple times in the array, each distinct arrangement is only returned once. -----Input----- The first line contains an integer n (1 le n le 8) — the length of the array `nums`. The second line contains n integers representing the elements of the array `nums`. Each integer in `nums` is between -10 and 10. -----Output----- Print all unique permutations of the array. Each permutation should be printed on a new line and elements within a permutation should be space-separated. -----Examples----- Input 3 1 1 2 Output 1 1 2 1 2 1 2 1 1 Input 4 1 2 3 4 Output 1 2 3 4 1 2 4 3 1 3 2 4 1 3 4 2 1 4 2 3 1 4 3 2 2 1 3 4 2 1 4 3 2 3 1 4 2 3 4 1 2 4 1 3 2 4 3 1 3 1 2 4 3 1 4 2 3 2 1 4 3 2 4 1 3 4 1 2 3 4 2 1 4 1 2 3 4 1 3 2 4 2 1 3 4 2 3 1 4 3 1 2 4 3 2 1","solution":"from itertools import permutations def unique_permutations(nums): Generate all unique permutations of the array nums. # Create a set to store unique permutations unique_perms = set(permutations(nums)) # Convert each tuple permutation back to a list unique_perms_list = [list(perm) for perm in unique_perms] return unique_perms_list"},{"question":"You are given an integer m representing the weight of a knapsack and a list of integers w representing the weights of different items. Determine if there is a combination of items whose total weight is exactly m. If such a combination exists, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 100), where n is the number of items and m is the knapsack weight. The second line contains n integers representing the weights of the items (1 ≤ wi ≤ 100). Output Output \\"YES\\" if there is a subset of items that add up to exactly m, otherwise output \\"NO\\". Examples Input 5 9 3 34 4 12 5 Output YES Input 5 30 3 34 4 12 5 Output NO","solution":"def can_fill_knapsack(m, weights): Determines if there is a subset of weights that add up to exactly m. Parameters: m (int): the knapsack weight weights (list): list of item weights Returns: str: \\"YES\\" if there is such a subset, otherwise \\"NO\\" n = len(weights) # dp array to store solutions to subproblems dp = [False] * (m + 1) dp[0] = True # base case: a sum of 0 is always possible with empty subset for weight in weights: for j in range(m, weight - 1, -1): if dp[j - weight]: dp[j] = True return \\"YES\\" if dp[m] else \\"NO\\""},{"question":"You are tasked with developing a program to manage a library\'s book borrowing system. The library keeps track of books borrowed by members, with each book identified by a unique ID number and each member identified by a unique membership number. Each time a book is borrowed, the library records the book\'s ID, the member\'s ID, and the borrow date. If a member wants to borrow a book that is already borrowed by another member, the system should not allow this operation and should return an appropriate message. The system should support the following operations: 1. **Borrow a book**: Allows a member to borrow a book if it is available. 2. **Return a book**: Allows a member to return a borrowed book. 3. **Check borrowed books**: Provides a list of all borrowed books along with the member ID and borrow date. 4. **Check books borrowed by a member**: Provides a list of all books borrowed by a specific member. Input The first line contains an integer `q` indicating the number of operations `(1 ≤ q ≤ 1000)`. Each of the following `q` lines contain an operation and its parameters as described below: * \\"BORROW book_id member_id borrow_date\\" - A request to borrow a book. * \\"RETURN book_id member_id\\" - A request to return a book. * \\"LIST_BORROWED\\" - A request to list all borrowed books. * \\"LIST_MEMBER member_id\\" - A request to list all books borrowed by a specific member. Output For each operation, output the result according to the following: * If a \\"BORROW\\" operation is successful, print \\"SUCCESS\\". * If a \\"BORROW\\" operation is unsuccessful due to the book being already borrowed, print \\"FAILED\\". * If a \\"RETURN\\" operation is successful, print \\"SUCCESS\\". * If a \\"RETURN\\" operation specifies a book that is not currently borrowed by the member, print \\"FAILED\\". * For \\"LIST_BORROWED\\" and \\"LIST_MEMBER\\" operations, print the requested lists in the format: (book_id member_id borrow_date) If the requested list is empty, print \\"NO_BOOKS\\". Example Input 7 BORROW 101 2019-01-15 1001 BORROW 102 2019-01-15 1002 BORROW 101 2019-01-16 1003 RETURN 101 2019-01-17 1001 BORROW 101 2019-01-18 1003 LIST_BORROWED LIST_MEMBER 1001 Output SUCCESS SUCCESS FAILED SUCCESS SUCCESS (102 1002 2019-01-15) (101 1003 2019-01-18) (101 1001 2019-01-15)","solution":"class LibrarySystem: def __init__(self): self.borrowed_books = {} # book_id -> (member_id, borrow_date) def borrow_book(self, book_id, member_id, borrow_date): if book_id in self.borrowed_books: return \\"FAILED\\" self.borrowed_books[book_id] = (member_id, borrow_date) return \\"SUCCESS\\" def return_book(self, book_id, member_id): if book_id not in self.borrowed_books or self.borrowed_books[book_id][0] != member_id: return \\"FAILED\\" del self.borrowed_books[book_id] return \\"SUCCESS\\" def list_borrowed(self): if not self.borrowed_books: return \\"NO_BOOKS\\" return [f\\"({book_id} {member_id} {borrow_date})\\" for book_id, (member_id, borrow_date) in self.borrowed_books.items()] def list_member_books(self, member_id): member_books = [(book_id, borrow_date) for book_id, (mem_id, borrow_date) in self.borrowed_books.items() if mem_id == member_id] if not member_books: return \\"NO_BOOKS\\" return [f\\"({book_id} {member_id} {borrow_date})\\" for book_id, borrow_date in member_books]"},{"question":"You are given a string S constructed by Chef Hans consisting of lowercase Latin letters. Chef Hans wants to find the number of substrings within S that are palindromes and start and end with the same character. A palindrome is a string that reads the same backward as forward. A substring is any contiguous sequence of characters within a string. For example, consider the string S = \\"abcaac\\". The substrings of S that are palindromes and start and end with the same character include \\"a\\", \\"b\\", \\"c\\", \\"aa\\", \\"aca\\", \\"cac\\". ------ Input ------ The first line contains a single integer T — the number of test cases. The description of the test cases follows. Each test case contains a single line with the string S. ------ Output ------ For each test case, output a single line containing the number of substrings that are palindromes and start and end with the same character. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 ------ Sample Input 1 ------ 2 abc aaa ------ Sample Output 1 ------ 3 6 ----- Explanation 1 ------ For the first test case: - The palindromic substrings that start and end with the same character are \\"a\\", \\"b\\", and \\"c\\". For the second test case: - The palindromic substrings that start and end with the same character are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in S that start and end with the same character. n = len(S) count = 0 # Function to count palindromes centered at the given center def count_centered_palindromes(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes (centered at i) count_centered_palindromes(i, i) # Even length palindromes (centered between i and i+1) if i + 1 < n: count_centered_palindromes(i, i+1) return count def solve_palindromic_substrings(case_list): Processes multiple test cases. results = [] for S in case_list: results.append(count_palindromic_substrings(S)) return results"},{"question":"Implement a function `countConsecutiveSubstrings` that takes a string `s` as input and returns the number of substrings that consist of only one unique character repeated consecutively. For example, in the string \\"aaabbbaa\\", \\"aaa\\" is one such substring, so is \\"bbb\\". The goal is to count all such substrings. Example 1: Input: s = \\"aaabbbaa\\" Output: 6 Explanation: The substrings are \\"aaa\\", \\"aa\\", \\"a\\", \\"bbb\\", \\"bb\\", and \\"b\\". Example 2: Input: s = \\"abc\\" Output: 3 Explanation: The substrings are \\"a\\", \\"b\\", and \\"c\\". Your Task: You don\'t need to read input or output anything. Your task is to complete the function `countConsecutiveSubstrings(s)` which takes a single string `s` and returns an integer which is the count of substrings. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= |s| <= 1000","solution":"def countConsecutiveSubstrings(s): Returns the number of substrings that consist of only one unique character repeated consecutively. if not s: return 0 count = 0 # To count consecutive substrings consecutive_length = 1 # Length of the current consecutive characters for i in range(1, len(s)): if s[i] == s[i - 1]: consecutive_length += 1 else: count += consecutive_length * (consecutive_length + 1) // 2 consecutive_length = 1 # Don\'t forget to add the last segment count += consecutive_length * (consecutive_length + 1) // 2 return count"},{"question":"Your friend has recently developed an interest in creating composite musical notes using a circular array of digital sound generators. Each generator works on a sequence of binary pulses. A pulse is either `0` or `1`, and a musical note is created by blending the pulses from multiple generators at specific time intervals. You are given the binary pulse sequences of multiple generators, and a list of time intervals during which each generator should be activated. In each interval, only pulses of `1` are audible, and pulses of `0` are silent. Your task is to determine if it\'s possible to perfectly play the composite musical note by uninterruptedly blending the active pulses from the generators during the specified intervals. A generator can stay inactive (i.e., produce no pulse) for any period outside the specified intervals. However, once a generator is activated to start an interval, it must follow its sequence without stopping or resetting until the end of the interval. After the end of each interval, a generator can be deactivated and then reactivated at any subsequent interval without any issues. -----Input----- The first line contains an integer `g`, where 1 leq g leq 10, denoting the number of generators. Then follow `g` blocks, each containing: - A single line with an integer l_i, 1 leq l_i leq 1000, representing the length of the binary pulse sequence of the i^{th} generator. - The next line contains the binary pulse sequence of length l_i. - A single line with an integer m_i, 1 leq m_i leq 100, representing the number of intervals for which this generator should be activated. - `m_i` lines, each with two integers t_{i,j}, t_{i,k}, where 0 leq t_{i,j}, t_{i,k} leq 1,000,000 indicating the interval [ t_{i,j}, t_{i,k} ] during which the generator is active. You can assume that all intervals are given in strictly ascending order within each generator\'s list. -----Output----- If it is possible to play the composite musical note perfectly by blending the active pulses, output \\"possible\\". Otherwise, output \\"impossible\\". -----Examples----- Sample Input: 1 8 11001010 2 0 7 8 15 Sample Output: possible Sample Input: 2 4 1101 2 0 3 4 7 4 1011 2 0 3 4 7 Sample Output: impossible","solution":"def is_composite_note_possible(generators): Determines if it\'s possible to perfectly play the composite musical note by blending the active pulses from the generators during the specified intervals. :param generators: List of tuples containing generator information. Each tuple contains: (pulse_sequence, intervals) where - pulse_sequence is a string of \'0\'s and \'1\'s - intervals is a list of (start_time, end_time) tuples :return: \\"possible\\" if the composite note can be played, \\"impossible\\" otherwise. max_duration = 1000000 composite_sound = [0] * (max_duration + 1) for pulses, intervals in generators: pulse_length = len(pulses) for start, end in intervals: for t in range(start, end + 1): index = (t - start) % pulse_length if pulses[index] == \'1\': if composite_sound[t] == 1: return \\"impossible\\" composite_sound[t] = 1 return \\"possible\\" def process_input(data): data = data.strip().split(\'n\') g = int(data[0].strip()) index = 1 generators = [] for _ in range(g): l_i = int(data[index].strip()) index += 1 pulse_sequence = data[index].strip() index += 1 m_i = int(data[index].strip()) index += 1 intervals = [] for _ in range(m_i): t_start, t_end = map(int, data[index].strip().split()) intervals.append((t_start, t_end)) index += 1 generators.append((pulse_sequence, intervals)) return generators def composite_note_possible(data): generators = process_input(data) return is_composite_note_possible(generators)"},{"question":"James found an old calculator that behaves a bit oddly when performing addition due to a malfunction. Given two integers `x` and `y`, the calculator first converts them to their binary representation and then applies the \\"bitwise mocking addition\\" operation. Here\'s how the operation works: 1. Convert the integers `x` and `y` to their binary forms. 2. Perform a bitwise XOR operation (`^`). 3. Perform a bitwise AND operation (`&`), then left shift the result by 1 place to account for the carry. 4. Repeat the above two steps with the results until the carry is zero. Write a function to simulate this malfunctioning addition operation and return the result. -----Input----- Two space-separated integers `x` and `y` (`0 <= x, y <= 10^9`). -----Output----- Output the result of the malfunctioning addition of `x` and `y`. -----Examples----- Input 5 9 Output 14 Input 12 23 Output 35 Input 57 68 Output 125","solution":"def bitwise_mock_addition(x, y): Simulate the malfunctioning addition using bitwise operations. Parameters: x (int): First integer y (int): Second integer Returns: int: The result of the malfunctioning addition while y != 0: carry = x & y x = x ^ y y = carry << 1 return x"},{"question":"A robot is located at the top-left corner of a `m x n` grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 respectively in the grid. Example 1: Input: obstacleGrid = [ [0,0,0], [0,1,0], [0,0,0] ] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: obstacleGrid = [ [0,1], [0,0] ] Output: 1 Explanation: There is one obstacle in the 2x2 grid above. There is only one way to reach the bottom-right corner: 1. Down -> Right Note: - `m` and `n` will be at most 100. - The initial and final positions are always 0.","solution":"def uniquePathsWithObstacles(obstacleGrid): Calculate unique paths in a grid with obstacles. Args: obstacleGrid: List[List[int]] - 2D grid with obstacles (1) and empty spaces (0) Returns: int - number of unique paths from top-left to bottom-right corner if not obstacleGrid or obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Design a function that takes an array of intervals and merges all overlapping intervals. Each interval is represented as a list of two integers [start, end]. The output should be a list of non-overlapping intervals that cover all the intervals in the input. Example 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: The intervals [1,4] and [4,5] overlap, so they are merged into [1,5]. Your Task: The task is to complete the function mergeIntervals() which takes an array of intervals as input and returns a list of merged intervals. You do not need to handle input/output, it will be done by the driver code. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n), where n is the number of intervals. Constraints: 1 <= intervals.length <= 10^4 0 <= intervals[i][0] <= intervals[i][1] <= 10^5","solution":"def mergeIntervals(intervals): Merges all overlapping intervals in a list. Args: intervals (List[List[int]]): List of intervals where each interval is a list of two integers [start, end]. Returns: List[List[int]]: List of merged non-overlapping intervals. if not intervals: return [] # Sort the intervals by their starting points intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] # Initialize with the first interval for i in range(1, len(intervals)): # If the current interval overlaps with the last interval in merged, merge them if intervals[i][0] <= merged[-1][1]: merged[-1][1] = max(merged[-1][1], intervals[i][1]) else: merged.append(intervals[i]) return merged"},{"question":"A new type of number sequence called \\"Nebula Numbers\\" is being studied. A number is considered a Nebula Number if it is divisible by either 3 or 5 but not both. For example, 3, 5, 6, 9, 12, 18, 20 are Nebula Numbers. Given an integer K, your task is to find the Kth Nebula Number. Input: The first line contains an integer T which is the number of test cases. T lines follow, each containing an integer K. Output: For each K, output the Kth Nebula Number. Constraints: 1 ≤ T ≤ 10^4 1 ≤ K ≤ 10^9 Scoring: 1 ≤ T ≤ 10^3, 1 ≤ K ≤ 10^5: (30 pts) 1 ≤ T ≤ 10^4, 1 ≤ K ≤ 10^7: (30 pts) 1 ≤ T ≤ 10^4, 1 ≤ K ≤ 10^9: (40 pts) SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 3 5 6 Explanation The first three Nebula Numbers are: 3, 5, and 6.","solution":"def kth_nebula_number(k): Returns the k-th Nebula Number. A Nebula Number is a number that is divisible by either 3 or 5 but not both. count = 0 number = 0 while count < k: number += 1 if (number % 3 == 0) ^ (number % 5 == 0): count += 1 return number def process_nebula_numbers(T, test_cases): Processes multiple test cases to find the respective K-th Nebula Number for each case. Parameters: T (int): The number of test cases. test_cases (list of int): The list of K values. Returns: list of int: results for each test case. results = [] for k in test_cases: results.append(kth_nebula_number(k)) return results"},{"question":"You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead, should be stored inside the array nums1. To accommodate this, nums1 has a size of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a size of n. Example: Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Input: nums1 = [1], m = 1 nums2 = [], n = 0 Output: [1] Constraints: - nums1.length == m + n - nums2.length == n - 0 <= m, n <= 200 - 1 <= nums1[i], nums2[i] <= 10^9","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 in non-decreasing order. Modifies nums1 in-place to store the result. # Set up pointers for nums1 and nums2 p1, p2, p = m - 1, n - 1, m + n - 1 # Merge the two arrays starting from the end while p1 >= 0 and p2 >= 0: if nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1 # If there are remaining elements in nums2, copy them while p2 >= 0: nums1[p] = nums2[p2] p -= 1 p2 -= 1"},{"question":"A company produces widgets. Every widget has a weight, and every batch has a capacity limit. The company wants to pack the widgets into the minimum number of batches without exceeding the capacity of each batch. Given the weights of the widgets and the capacity limit of a batch, determine the minimum number of batches required. Constraints: - Each widget\'s weight is a positive integer. - The capacity limit of a batch is a positive integer. - There is at least one widget and at most 100,000 widgets. - The weights of the widgets and the capacity limit are all integers between 1 and 10,000, inclusive. Input: The input will be given as follows: The first line contains an integer T, the number of test cases. For each test case, the first line contains two integers, N (the number of widgets) and C (the capacity limit of each batch). The second line contains N integers, each representing the weight of a widget. Output: For each test case, output a single line containing the minimum number of batches required. Example: Input: 3 5 10 2 3 8 5 1 4 15 6 7 8 9 6 20 10 10 10 10 10 10 Output: 2 2 3 Explanation: In the first test case, one way to pack the widgets is [2+3+5] and [8+1] which require 2 batches. In the second test case, we can pack widgets as [6+7] and [8] and [9] which require 3 batches, but the optimal packing is [6+7] and [8+9] requiring 2 batches. In the third test case, since all the widget weights are equal to half of the capacity, each batch can carry only two widgets, thus requiring 3 batches for 6 widgets.","solution":"def min_batches(T, test_cases): results = [] for i in range(T): N, C = test_cases[i][0] weights = sorted(test_cases[i][1], reverse=True) batches = 0 while weights: capacity = C for weight in weights[:]: if weight <= capacity: capacity -= weight weights.remove(weight) batches += 1 results.append(batches) return results"},{"question":"Create a function/method (depending on the language) that receives an array of integers and returns a new array where each element at index `i` is the product of all the elements in the original array except the one at `i`. For example: ```python # Input: [1, 2, 3, 4, 5] # Output: [120, 60, 40, 30, 24] # Input: [3, 2, 1] # Output: [2, 3, 6] # Input: [0, 1, 2, 3, 4] # Output: [24, 0, 0, 0, 0] # Input: [5, 6, 0, 2] # Output: [0, 0, 60, 0] ``` Constraints: 1. The array length will be at least 2. 2. Division operations are not allowed. 3. Try to solve the problem with a time complexity of O(N) using constant space (output array not considered extra space).","solution":"def product_except_self(nums): Return an array where each element at index `i` is the product of all the elements in the original array except the one at `i`. n = len(nums) # Step 1: Create an array to hold the result result = [1] * n # Step 2: Calculate left products for each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Step 3: Calculate right products and combine with left products right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Far away in the land of Pylandia, the town of Byteville has a unique tradition during their annual festivities. The Byteville festival lasts for n days, and each evening, the town square lights up with k colors in a particular sequence. On the first evening, the lights display the first sequence of colors, on the second evening the next sequence, and so on until the nth evening. Being a curious programmer, you decided to observe these light sequences and derive patterns from them. For this task, you will be given a series of light sequences, and your job is to answer specific queries about them. Each query can be one of two types: - \\"- t\\" (where t is an integer) - Ask for the light sequence displayed on the t-th evening. - \\"+ s\\" (where s is a string) - This adds a new sequence of lights at the end of the list of sequences. Input The first input line contains integers n, k, and q (1 ≤ n, k ≤ 50, 1 ≤ q ≤ 1000), where n is the number of initial evening sequences, k is the number of colors in each sequence, and q is the number of queries. The next n lines each contain a string of k characters representing the light sequences in the order they are displayed originally. The following q lines contain the queries in the format described above. Output For each query of the \\"- t\\" type, output the corresponding light sequence. If the sequence does not exist (i.e., t is larger than the current number of sequences), output \\"N/A\\" without quotes. Example Input 3 5 6 abcde fghij klmno - 1 - 3 + pqrst - 4 + uvwxy - 5 Output abcde klmno pqrst uvwxy Input 2 3 4 xyz abc - 2 + def - 3 + ghi Output abc def Explanation: In the second example, the initial sequences are \\"xyz\\" and \\"abc\\". The first query asks for the second sequence, which is \\"abc\\". The next query adds \\"def\\" to the list of sequences. The following query asks for the third sequence, which is now \\"def\\". Finally, the query adds \\"ghi\\" to the list.","solution":"def handle_byteville_festival(n, k, q, sequences, queries): Handle the Byteville festival queries. Parameters: n: int - number of initial sequences k: int - number of colors in each sequence q: int - number of queries sequences: list of str - initial sequences queries: list of str - queries to process Returns: list of str - results of the queries of type \\"- t\\" results = [] for query in queries: if query.startswith(\'-\'): t = int(query.split()[1]) if t <= len(sequences): results.append(sequences[t-1]) else: results.append(\\"N/A\\") elif query.startswith(\'+\'): new_sequence = query.split()[1] sequences.append(new_sequence) return results"},{"question":"Write a function `closest_in_sorted_matrix(matrix, target)` that takes a `2D sorted matrix` and an integer `target` and returns the element in the matrix that is closest to the target. The matrix has the following properties: 1. Integers in each row are sorted from left to right. 2. The first integer of each row is not smaller than the last integer of the previous row. Example ```python matrix = [ [1, 3, 5], [7, 10, 12], [14, 15, 20] ] target = 8 ``` Output ```python closest_in_sorted_matrix(matrix, target) # Returns 7 ``` The task Write the function `closest_in_sorted_matrix(matrix, target)`, which returns the element in the matrix closest to the target. If there are two elements equally close to the target, return the smaller one. Limitations You can assume: - `1 <= number of elements in matrix <= 10^4` - `-10^4 <= matrix[i][j] <= 10^4` - Each element in the matrix is distinct.","solution":"def closest_in_sorted_matrix(matrix, target): Return the element in the matrix closest to the target. If there are two elements equally close to the target, return the smaller one. closest = float(\'inf\') for row in matrix: for value in row: if abs(value - target) < abs(closest - target) or (abs(value - target) == abs(closest - target) and value < closest): closest = value return closest"},{"question":"You are given an array of integers representing the time durations of different tasks in minutes. You need to distribute these tasks among two workers in such a way that the difference in total working time between the two workers is minimized. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of tasks. - The second line of each test case contains N space-separated integers representing the durations of the tasks. ------ Output Format ------ For each test case, print a single line containing the minimum possible difference in total working time between the two workers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 30 1 ≤ text{duration of each task} ≤ 100 ------ Sample Input 1 ------ 2 3 10 20 30 4 1 2 3 4 ------ Sample Output 1 ------ 0 0 ------ Explanation 1 ------ Test case 1: One way to distribute the tasks is giving the first worker [10, 20] and the second worker [30]. The total time for both workers is 30. Test case 2: One possible distribution is giving the first worker [1, 4] and the second worker [2, 3]. The total time for both workers is 5.","solution":"def minimize_time_difference(tasks): total_time = sum(tasks) n = len(tasks) dp = [[False] * (total_time + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_time + 1): dp[i][j] = dp[i-1][j] if j >= tasks[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-tasks[i-1]] min_diff = float(\'inf\') for j in range(total_time // 2 + 1): if dp[n][j]: first_worker_time = j second_worker_time = total_time - j min_diff = min(min_diff, abs(first_worker_time - second_worker_time)) return min_diff def solve(T, test_cases): results = [] for i in range(T): N, tasks = test_cases[i] results.append(minimize_time_difference(tasks)) return results"},{"question":"Given a list of strings where each string can be either a valid integer or a word, find the longest subsequence of the list such that only valid integers are included and the sum of these integers is maximized. Return the maximum sum. Example: ``` Input: [\\"apple\\", \\"30\\", \\"banana\\", \\"40\\", \\"cherry\\", \\"25\\"] Output: 95 Input: [\\"10\\", \\"xyz\\", \\"20\\", \\"30\\", \\"abc\\"] Output: 60 ``` Assume the input list contains at least one valid integer.","solution":"def is_valid_integer(s): Checks if the string represents a valid integer. try: int(s) return True except ValueError: return False def max_sum_of_valid_integers(strings): Returns the maximum sum of the longest subsequence of valid integers in the list. valid_integers = [int(s) for s in strings if is_valid_integer(s)] return sum(valid_integers)"},{"question":"You are given a list of integers. You need to determine if it is possible to reorder the list such that the absolute difference between any two adjacent elements is exactly k. Print \'Yes\' if it is possible, otherwise print \'No\'. Example numbers=[1,2,3,4,5], k=2 Result: Yes Possible reordered list: [1, 3, 5, 4, 2] numbers=[1,3,5], k=2 Result: Yes Possible reordered list: [1, 3, 5] numbers=[1,2,4], k=2 Result: No There is no possible reordering that satisfies the condition. Input Format The first line contains a single integer mathbf{T}, the number of test cases. For each test case, there are 2 lines. The first line of each test case contains two integers n (the number of integers) and k (the required absolute difference). The second line contains n space-separated integers denoting the elements of the list. Constraints 1leq Tleq5 1leq nleq10^5 1leq numbers[i], k leq10^9 Output Format For each test case, output a single line containing either \'Yes\' or \'No\'. Sample Input STDIN Function ------ -------- 2 T = 2 5 2 n = 5, k = 2 1 2 3 4 5 numbers = [1, 2, 3, 4, 5] 3 2 n = 3, k = 2 1 2 4 numbers = [1, 2, 4] Sample Output Yes No Explanation In the first test case, a valid reordering of the list where the absolute difference between adjacent elements is 2 exists. In the second test case, no such reordering is possible.","solution":"def reorder_possible(numbers, k): Determine if it is possible to reorder the list such that the absolute difference between any two adjacent elements is exactly k. Args: numbers (list of int): List of integers. k (int): The required absolute difference. Returns: str: \'Yes\' if such a reordering is possible, otherwise \'No\'. numbers_set = set(numbers) for num in numbers: if not (num + k in numbers_set or num - k in numbers_set): return \'No\' return \'Yes\' def process_cases(T, cases): Processes multiple test cases for the reordering problem. Args: T (int): Number of test cases. cases (list of tuple): List where each tuple contains n, k, and the list of numbers. Returns: list of str: Results for each test case. results = [] for case in cases: n, k, numbers = case result = reorder_possible(numbers, k) results.append(result) return results"},{"question":"Given an array of integers, you need to determine how many unique integers are present in each segment of the array of a given length. -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Each test case consists of two lines: The first line contains two integers n and k (1 le n le 100, 1 le k le n), where n is the number of elements in the array and k is the length of each segment. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 100) — the elements of the array. -----Output----- For each test case, print an array of integers of length (n-k+1). For each segment of length k starting from the first element, print the number of unique integers in that segment. -----Example----- Input 2 5 3 1 2 1 3 4 7 4 1 2 2 4 4 1 5 Output 2 3 3 3 2 3 3 -----Note----- In the first test case, the array has 5 elements and we are asked to find the number of unique integers in each segment of length 3. The segments are: - [1, 2, 1] which has 2 unique integers (1 and 2) - [2, 1, 3] which has 3 unique integers (1, 2 and 3) - [1, 3, 4] which has 3 unique integers (1, 3 and 4) In the second test case, the array has 7 elements and we are asked to find the number of unique integers in each segment of length 4. The segments are: - [1, 2, 2, 4] which has 3 unique integers (1, 2, and 4) - [2, 2, 4, 4] which has 2 unique integers (2 and 4) - [2, 4, 4, 1] which has 3 unique integers (1, 2, and 4) - [4, 4, 1, 5] which has 3 unique integers (1, 4, and 5)","solution":"def unique_integers_in_segments(t, test_cases): For each test case, determines the number of unique integers in each segment of the given length. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains n, k and array of integers :return: List of results for each test case results = [] for case in test_cases: n, k, arr = case result = [] for i in range(n - k + 1): segment = arr[i:i+k] unique_count = len(set(segment)) result.append(unique_count) results.append(result) return results"},{"question":"Given a list of integers, write a function to find the largest product of any three distinct numbers within the list. If the length of the list is less than three, the function should return `None`. The function signature should be: ```python def largest_product_of_three(nums: List[int]) -> int: ``` **Input**: - A list of integers `nums` (0 <= len(nums) <= 10^5, -10^9 <= nums[i] <= 10^9) **Output**: - An integer representing the largest product of any three distinct numbers in the list, or `None` if the list contains fewer than three elements. **Examples**: ```python # Example 1 nums = [1, 2, 3, 4] # The largest product is achieved by multiplying 2, 3, and 4: 2 * 3 * 4 = 24. print(largest_product_of_three(nums)) # Output: 24 # Example 2 nums = [-10, -10, 5, 2] # The largest product is achieved by multiplying -10, -10, and 5: -10 * -10 * 5 = 500. print(largest_product_of_three(nums)) # Output: 500 # Example 3 nums = [1, 2] # The length of the list is less than 3, so return None. print(largest_product_of_three(nums)) # Output: None # Example 4 nums = [] # The length of the list is less than 3, so return None. print(largest_product_of_three(nums)) # Output: None ```","solution":"def largest_product_of_three(nums): Returns the largest product of any three distinct numbers within the list. If the length of the list is less than three, returns None. if len(nums) < 3: return None # Sort the list nums.sort() # The largest product can be made of the three largest numbers or # two smallest (possibly negative) numbers and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Eli runs a chain of movie rental stores and wants to optimize the placement of movies on the shelves. He needs your help to organize the movies efficiently. Each movie has a genre and a popularity score, and Eli wants to place all the movies of the same genre together on adjacent shelves. The goal is to maximize the total popularity score for the most popular genre that is placed adjacently on the shelves. You are given a list of movies, where each movie is represented by its genre and popularity score. Your task is to group the movies by genre, sort each genre by popularity in descending order, and then determine the maximum possible total popularity score for a genre that can be achieved by placing its movies together on adjacent shelves. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of movies. Each of the next n lines contains a string and an integer separated by a space: genre and popularity (1 ≤ popularity ≤ 10^6). Output Print a single integer — the maximum total popularity score for the genre that achieves the highest possible total popularity score when its movies are placed together on adjacent shelves. Examples Input 5 Action 10 Action 20 Drama 30 Drama 25 Comedy 15 Output 55 Input 4 Horror 5 Horror 15 SciFi 25 SciFi 35 Output 60 Note In the first example, grouping “Drama” movies together gives the highest total popularity score of 55 with the two placements being 30 and 25. In the second example, grouping “SciFi” movies together achieves a total popularity score of 60 with placements being 25 and 35.","solution":"def max_popularity_score(n, movies): from collections import defaultdict genre_dict = defaultdict(list) for genre, popularity in movies: genre_dict[genre].append(popularity) max_score = 0 for genre, popularity_list in genre_dict.items(): total_score = sum(popularity_list) if total_score > max_score: max_score = total_score return max_score"},{"question":"Diana is fascinated by prime numbers and their properties. She recently learned about twin primes, which are pairs of prime numbers that have a difference of 2 (e.g., (3, 5) and (11, 13)). She wants to generate a list of twin prime pairs within a given range. Write a program to help Diana by taking in two numbers representing the range (inclusive) and outputting all the pairs of twin primes within that range. Input Two integers, a and b, representing the inclusive range. Assume 2 <= a <= b <= 1000. Output A list of pairs of twin primes within the given range, each pair on a new line. Example Input: 10 50 Output: (11, 13) (17, 19) (29, 31) (41, 43)","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def twin_primes(a, b): twin_prime_pairs = [] for i in range(a, b - 1): if is_prime(i) and is_prime(i + 2): twin_prime_pairs.append((i, i + 2)) return twin_prime_pairs"},{"question":"Determine the sum of the integers in a sequence and print the result. -----Constraints----- - 1 ≤ N ≤ 100 - 0 ≤ a_i ≤ 10^9 - N is the number of integers in the sequence. - Each a_i is an integer in the sequence. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the sum of the integers in the sequence. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 15 The sum of 1, 2, 3, 4, and 5 is 15.","solution":"def sum_of_sequence(n, sequence): Returns the sum of the integers in a sequence. Parameters: n (int): The number of integers in the sequence. sequence (list of int): The list of integers in the sequence. Returns: int: The sum of the integers in the sequence. return sum(sequence)"},{"question":"John is fascinated by numbers and patterns. He recently learned about palindromic numbers and prime numbers. A palindromic number is a number that reads the same forward and backward, such as 121 or 1331. A prime number is a number that has no positive divisors other than 1 and itself. John is curious about numbers that are both palindromic and prime, and he calls them \\"prime palindromes\\". He decides to write a program that, given a range [A, B], outputs all the prime palindromic numbers within that range, inclusive of A and B. Input The first line contains the number of test cases T. Each of the next T lines contains two integers A and B, representing the range [A, B]. Output For each test case, output all the prime palindromic numbers within the given range [A, B]. If there are no such numbers, output \\"None\\". Constraints: 1 ≤ T ≤ 100 1 ≤ A ≤ B ≤ 10^6 SAMPLE INPUT 2 10 100 500 600 SAMPLE OUTPUT 11 101 None","solution":"def is_palindrome(n): Check if a given number is a palindrome. s = str(n) return s == s[::-1] def is_prime(n): Check if a given number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_palindromes_in_range(A, B): Given a range [A, B], return a list of prime palindromic numbers. results = [] for num in range(A, B + 1): if is_palindrome(num) and is_prime(num): results.append(num) return results or [\\"None\\"] def prime_palindromes(T, ranges): Process multiple ranges and return prime palindromic numbers for each. result = [] for A, B in ranges: result.append(prime_palindromes_in_range(A, B)) return result def main(): T = int(input().strip()) ranges = [] for _ in range(T): A, B = map(int, input().strip().split()) ranges.append((A, B)) results = prime_palindromes(T, ranges) for res in results: print(\\" \\".join(map(str, res))) if __name__ == \\"__main__\\": main()"},{"question":"Olivia owns a large almond orchard. She wants to create a system to track the growth of the almonds in the orchard. She collects the number of almonds produced by each tree in a week. You are to help her by writing a function that takes the list of almond production and a fixed integer sliding window size k, then returns the maximum number of almonds produced within each sliding window as it moves from the start of the list to the end. Constraints * 1 ≤ k ≤ len(list) * 1 ≤ len(list) ≤ 10^6 * 0 ≤ list[i] ≤ 10^4 Input The input is given from Standard Input in the following format: N k list_1 list_2 ... list_N N - the length of the list (number of trees). k - the size of the sliding window. Output Print the sequence of the maximum number of almonds produced in each sliding window. Examples Input 8 3 1 3 1 2 0 5 4 8 Output 3 3 2 5 5 8 Input 5 2 10 20 30 40 50 Output 20 30 40 50","solution":"from collections import deque def max_sliding_window(nums, k): Returns the list of maximum numbers in each sliding window of size k. if not nums: return [] deq = deque() result = [] for i, num in enumerate(nums): # Remove elements not within the sliding window if deq and deq[0] <= i - k: deq.popleft() # Remove elements smaller than the current number while deq and nums[deq[-1]] <= num: deq.pop() deq.append(i) # Starting from index k-1, the maximum of sliding window is at the front of deq if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"An adventure with Binary Search Trees! Bob has a love for trees, not just any trees, but Binary Search Trees (BST). One day, while relaxing under a big Oak tree, he thought of a new problem. He wants to find the k-th smallest element in a BST. Since he loves coding, he decides to write a program to do this. A Binary Search Tree is a type of binary tree where each node has at most two children, and for any given node, the left subtree contains only values less than the node\'s value, and the right subtree contains only values greater than the node\'s value. You are provided with the structure of a BST and the value of k. Your task is to find the k-th smallest element in the BST. Input Format: - The first line contains T, the number of test cases. - For each test case, the first line contains an integer k. - The second line contains space-separated integers representing the level-order traversal of the Binary Search Tree. Each integer represents a node’s value. Output Format: For each test case, print the k-th smallest element in the BST. If the k-th smallest element does not exist, print -1. Constraints: 1 ≤ T ≤ 1000 1 ≤ Number of nodes in the tree ≤ 10^5 1 ≤ Node value, k ≤ 10^9 Note: - The nodes of the BST are distinct. - Level order traversal gives the nodes in successive levels from left to right. SAMPLE INPUT 2 3 5 3 8 2 4 6 9 1 7 3 9 2 5 SAMPLE OUTPUT 4 2 Explanation: In the first test case, the BST formed is: 5 / 3 8 / / 2 4 6 9 The sorted order of elements is [2, 3, 4, 5, 6, 8, 9]. The 3rd smallest element is 4. In the second test case, the BST formed is: 7 / 3 9 / 2 5 The sorted order of elements is [2, 3, 5, 7, 9]. The 1st smallest element is 2.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root, value): if not root: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def build_bst_from_level_order(level_order): if not level_order or level_order[0] == \'null\': return None root = TreeNode(level_order[0]) queue = [root] i = 1 while i < len(level_order): current = queue.pop(0) if i < len(level_order) and level_order[i] != \'null\': current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] != \'null\': current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root def kth_smallest_element(root, k): stack = [] current = root count = 0 while stack or current: while current: stack.append(current) current = current.left current = stack.pop() count += 1 if count == k: return current.value current = current.right return -1 def find_kth_smallest_elements(test_cases): results = [] for k, level_order in test_cases: root = build_bst_from_level_order(level_order) result = kth_smallest_element(root, k) results.append(result) return results"},{"question":"Write a function `combine_dict_values` that takes an arbitrary number of dictionaries and returns a new dictionary with all the unique keys from the input dictionaries. The values corresponding to each key should be the sum of all values from the input dictionaries that share the same key. If a key is present in some dictionaries but not others, treat the missing values as `0`. Examples: `combine_dict_values({\\"A\\": 1, \\"B\\": 2}, {\\"A\\": 3, \\"C\\": 4})` should return `{\\"A\\": 4, \\"B\\": 2, \\"C\\": 4}` `combine_dict_values({\\"X\\": 10}, {\\"Y\\": 20, \\"X\\": 5}, {\\"Z\\": 2, \\"X\\": 3})` should return `{\\"X\\": 18, \\"Y\\": 20, \\"Z\\": 2}`","solution":"def combine_dict_values(*dicts): Combines multiple dictionaries into one by summing values of common keys. Args: *dicts: An arbitrary number of dictionaries. Returns: A dictionary with all unique keys and their respective sum of values. result = {} for d in dicts: for key, value in d.items(): if key in result: result[key] += value else: result[key] = value return result"},{"question":"You have been tasked with designing a network topology representation system. The network comprises various nodes connected by edges, forming a graph. Each node represents a computer, and each edge represents a direct connection between two of them. You need to determine if there is a path between two specified nodes, effectively telling whether the nodes are part of the same connected component. Input Format The first line contains two integers {N} and {M}, the number of nodes and the number of edges, respectively. Next {M} lines each contain two integers {u} and {v} indicating that there\'s a direct connection between node {u} and node {v}. The last line contains two integers {A} and {B}, representing the nodes you need to check for connectivity. Output Format Print \\"YES\\" if there is a path from node {A} to node {B}, otherwise print \\"NO\\". Constraints 1 leq N leq 10^4 0 leq M leq 2 times 10^4 1 leq u, v, A, B leq N Sample Input #01 6 5 1 2 2 3 1 3 4 5 5 6 1 3 Sample Output #01 YES Sample Input #02 6 5 1 2 2 3 1 3 4 5 5 6 1 6 Sample Output #02 NO Explanation for Sample Outputs For the first test case, nodes 1 and 3 are connected through path 1-2-3 or directly through 1-3, so the output is \\"YES\\". For the second test case, nodes 1 and 6 are in different connected components, so the output is \\"NO\\".","solution":"def is_connected(n, m, edges, a, b): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to check connectivity visited = set() queue = deque([a]) while queue: current = queue.popleft() if current == b: return \\"YES\\" if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"# Task You are given a string `s` and an integer `k`. Your task is to find the shortest substring of `s` which contains at least `k` distinct characters. If no such substring exists, return `None`. # Example For `s = \\"abcba\\", k = 2`, the result should be `\\"ab\\"`. For `s = \\"abcba\\", k = 3`, the result should be `\\"abc\\"`. For `s = \\"aaaa\\", k = 2`, the result should be `None`. # Input/Output - `[input]` string `s` string which only contains lowercase English letters. 1 <= s.length <= 1000 - `[input]` integer `k` the number of distinct characters required in the substring. 1 <= k <= 26 - `[output]` string or `None` the shortest substring with at least `k` distinct characters, or `None` if no such substring exists.","solution":"def shortest_substring_with_k_distinct(s, k): Returns the shortest substring of s which contains at least k distinct characters. If no such substring exists, returns None. if k > len(s): return None from collections import defaultdict n = len(s) min_len = float(\'inf\') start = 0 result = None for end in range(n): char_count = defaultdict(int) distinct_count = 0 for j in range(end, n): if char_count[s[j]] == 0: distinct_count += 1 char_count[s[j]] += 1 if distinct_count >= k: if j - end + 1 < min_len: min_len = j - end + 1 result = s[end:j + 1] break return result"},{"question":"In a certain zoo, a caretaker needs to track the feeding schedule of animals. Each animal has a unique ID and a fixed time interval at which it needs to be fed. The caretaker maintains a record of when each animal will next need to be fed. You are responsible for writing a program that helps the caretaker identify which animal needs to be fed next, given the current time and the feeding schedule. -----Constraints----- - The number of animals (N) is between 1 and 100, inclusive. - An animal ID is a string of length between 1 and 10, inclusive. - Feeding intervals are integers between 1 and 1000, inclusive (in minutes). - Feeding times are provided in the HH:MM format (24-hour clock). -----Input----- The input is given from Standard Input in the following format: The first line contains a string representing the current time in HH:MM format. The second line contains an integer N, representing the number of animals. The next N lines each contain a string and an integer separated by a space: - The string is the animal ID. - The integer is the feeding interval (in minutes). The next N lines each contain a string and a time separated by a space: - The string is the animal ID. - The time is the next scheduled feeding time for that animal in HH:MM format. -----Output----- Print the ID of the animal that needs to be fed next. If there are multiple animals with the same next feeding time, print the ID of the animal that appears first in the input list. -----Sample Input----- 12:30 3 Giraffe 180 Elephant 240 Tiger 120 Giraffe 15:30 Elephant 16:30 Tiger 14:30 -----Sample Output----- Tiger","solution":"from datetime import datetime, timedelta def find_next_feeding(current_time, animal_list, feeding_intervals, feeding_times): current_time = datetime.strptime(current_time, \\"%H:%M\\") # Create dictionary for feeding intervals intervals = {} for animal_id, interval in feeding_intervals: intervals[animal_id] = int(interval) # Create dictionary for feeding times next_feedings = {} for animal_id, next_time in feeding_times: next_feedings[animal_id] = datetime.strptime(next_time, \\"%H:%M\\") # Calculate next feeding time for each animal next_feeding_times = [] for animal_id in animal_list: next_feed_time = next_feedings[animal_id] while next_feed_time <= current_time: next_feed_time += timedelta(minutes=intervals[animal_id]) next_feeding_times.append((animal_id, next_feed_time)) # Find the animal with the closest next feeding time next_feeding_times.sort(key=lambda x: x[1]) return next_feeding_times[0][0] def main(): import sys input = sys.stdin.read data = input().splitlines() current_time = data[0] N = int(data[1]) animal_list = [] feeding_intervals = [] for i in range(2, 2 + N): animal_id, interval = data[i].split() animal_list.append(animal_id) feeding_intervals.append((animal_id, interval)) feeding_times = [] for i in range(2 + N, 2 + 2 * N): animal_id, next_time = data[i].split() feeding_times.append((animal_id, next_time)) print(find_next_feeding(current_time, animal_list, feeding_intervals, feeding_times)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string S of length N, consisting of lowercase alphabets and an integer M. You need to find the number of unique substrings of length M in the given string S. Example 1: Input: N = 5 S = \\"ababa\\" M = 2 Output: 2 Explanation: The unique substrings of length 2 are \\"ab\\" and \\"ba\\". Example 2: Input: N = 6 S = \\"abcdef\\" M = 3 Output: 4 Explanation: The unique substrings of length 3 are \\"abc\\", \\"bcd\\", \\"cde\\", and \\"def\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniqueSubstrings() which takes an integer N, a string S of length N and an integer M as input and returns the number of unique substrings of length M. Expected Time Complexity: O(N) Expected Auxiliary Space: O(M) Constraints: 1 <= N <= 100 1 <= M <= N S contains only lowercase alphabets.","solution":"def uniqueSubstrings(N, S, M): Returns the number of unique substrings of length M. substrings = set() for i in range(N - M + 1): substrings.add(S[i:i+M]) return len(substrings)"},{"question":"Given a string `str`, reverse only the vowels of the string and return the resulting string. The vowels are \'a\', \'e\', \'i\', \'o\', \'u\', and they can appear in both lowercase and uppercase. Example 1: Input: str = \\"hello\\" Output: \\"holle\\" Example 2: Input: str = \\"leetcode\\" Output: \\"leotcede\\" Constraints: - 1 <= str.length <= 3 * 10^5 - `str` consists of printable ASCII characters.","solution":"def reverse_vowels(s): This function takes a string s and returns a new string where only the vowels are reversed. vowels = set(\'aeiouAEIOU\') s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 elif s_list[right] not in vowels: right -= 1 else: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \'\'.join(s_list)"},{"question":"Katie is organizing a marathon and wants to design a staggered start time schedule for the runners. Each runner starts at a slightly different time so that no two runners are expected to cross the finish line simultaneously, making it easier to track their times. Katie has a set of runners, each with a given speed representing the rate at which they run the marathon. Each runner’s speed is a unique positive integer. Given the runners\' speeds, Katie wants to determine the minimum difference in start times required between any two consecutive runners so that no two runners finish at the same time, based on their speeds. Write a program that, for a given list of n unique integers representing the runners\' speeds, calculates the minimum difference in start times that ensures no two runners will finish simultaneously. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of runners. The second line contains n unique integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the speeds of the runners. Output Print a single integer — the minimum difference in start times in seconds that ensures no two runners will finish at the same time. Examples Input 4 2 3 5 7 Output 12 Input 3 10 20 30 Output 30 Note In the first example, the fastest runner has a speed of 7 and the next fastest has a speed of 5. To ensure they don\'t finish at the same time, their start times must differ by at least 2 units on the inverse ratio of their speeds (the ratio of 1/5 and 1/7). Calculating for all pairs, the minimum safe start difference is derived. In the second example, the speeds are 10, 20, and 30. To ensure no two runners finish simultaneously, their start times must differ based on the same ratio principle, with the minimum difference being determined by the largest common ratio between speeds.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def minimum_start_time_difference(n, speeds): speeds_gcd = speeds[0] for speed in speeds[1:]: speeds_gcd = gcd(speeds_gcd, speed) return speeds_gcd # Reading input can be done as follows. Uncomment and use it if running as a script. # n = int(input()) # speeds = list(map(int, input().split())) # print(minimum_start_time_difference(n, speeds))"},{"question":"You are given a collection of books, each with a certain number of pages. You should answer q queries of two types: * 1 p k — distribute k pages among the first p books, where k pages are distributed such that each of the p books receives the same number of pages. * 2 p — find the total number of pages in the first p books. Input The first line of input data contains two integers n and q (1 ≤ n, q ≤ 105) — the number of books and the number of queries correspondingly. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the initial number of pages in each book. Next q lines of input data contain the description of the queries in the format described above (1 ≤ p ≤ n, 0 ≤ k ≤ 109 for the first type of query). Output For each query of the second type, print the total number of pages in the first p books in a separate line. Examples Input 5 5 10 20 30 40 50 1 3 15 2 3 1 4 8 2 4 2 5 Output 35 60 118 Note In the first example: * For the query 1 3 15, each of the first 3 books gets 15/3=5 more pages, making their pages [15, 25, 35, 40, 50]. * For the query 2 3, the sum is 15 + 25 + 35 = 75. * For the query 1 4 8, each of the first 4 books gets 8/4=2 more pages, making their pages [17, 27, 37, 42, 50]. * For the query 2 4, the sum is 17 + 27 + 37 + 42 = 123. * For the query 2 5, the sum is 17 + 27 + 37 + 42 + 50 = 173.","solution":"def distribute_pages(n, q, a, queries): This function processes the queries and returns the results of queries of type 2. Parameters: n (int): number of books q (int): number of queries a (list of int): initial number of pages in each book queries (list of tuples): list of queries Returns: list of int: results of the second type of queries results = [] for query in queries: if query[0] == 1: p, k = query[1], query[2] pages_per_book = k // p for i in range(p): a[i] += pages_per_book elif query[0] == 2: p = query[1] total_pages = sum(a[:p]) results.append(total_pages) return results"},{"question":"Brenda is organizing a charity race event. She has M runners and wants to form a team by selecting K runners such that the stamina difference (difference between the maximum and minimum stamina) among the selected runners is minimized. Each runner has a stamina value, and Brenda needs your help to select the K runners in such a way that the difference between the maximum and minimum stamina values in the team is as small as possible. Input Format: The first line contains an integer T, the number of test cases. For each test case, the first line contains two integers M and K, where M is the total number of runners, and K is the number of runners to be selected. The second line contains M space-separated integers, representing the stamina values of each runner. Output Format: For each test case, print the minimum stamina difference that can be achieved by selecting K runners. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 100 1 ≤ K ≤ M Stamina values range from 1 to 1000 SAMPLE INPUT 2 5 3 10 100 300 200 1000 6 4 1 2 3 3 2 4 SAMPLE OUTPUT 90 1 Explanation In the first test case, the best selection of 3 runners is [10, 100, 200], which gives a stamina difference of 200 - 10 = 190, which is the minimum possible value. In the second test case, selecting the runners [2, 2, 3, 3] yields the minimal stamina difference of 1 (3 - 2).","solution":"def min_stamina_difference(T, test_cases): Computes the minimum stamina difference that can be achieved by selecting K runners for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - an integer M (number of runners) - an integer K (number of runners to select) - a list of integers representing the stamina values of each runner. Returns: list: A list of the minimum stamina differences for each test case. results = [] for case in test_cases: M, K, staminas = case staminas.sort() min_diff = float(\'inf\') for i in range(M - K + 1): diff = staminas[i + K - 1] - staminas[i] if diff < min_diff: min_diff = diff results.append(min_diff) return results # Example usage: # T = 2 # test_cases = [ # (5, 3, [10, 100, 300, 200, 1000]), # (6, 4, [1, 2, 3, 3, 2, 4]) # ] # print(min_stamina_difference(T, test_cases)) # Output: [190, 1]"},{"question":"A beautiful string is a string that contains only the letters \'a\', \'b\', or \'c\'. For a given input string, your task is to determine if it can be transformed into a beautiful string by rearranging its characters such that no two adjacent characters are the same. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) containing only lowercase English letters. Output Print \\"YES\\" if the input string can be rearranged to form a beautiful string. Otherwise, print \\"NO\\". Examples Input aabb Output YES Input aaab Output NO","solution":"from collections import Counter def can_form_beautiful_string(s): Given a string, determine if it can be rearranged into a \'beautiful string\' such that no two adjacent characters are the same. # Count the frequency of each character char_count = Counter(s) # Find the maximum frequency max_freq = max(char_count.values()) # Check if the maximum frequency is more than half the length of the string (rounded up) if max_freq > (len(s) + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"You need to write a function to determine if a given string is a valid palindrome with the help of additional deletions. You are allowed to delete at most one character from the string to make it a palindrome. A palindrome is a string that reads the same backward as forward. For example: \\"aba\\" is already a palindrome, so it is valid. \\"abca\\" can be turned into \\"aca\\" or \\"aba\\" by deleting one character, so it is valid. \\"abc\\" cannot be turned into a palindrome by deleting just one character, so it is not valid. Example 1: Input: s = \\"radkar\\" Output: 1 Example 2: Input: s = \\"hello\\" Output: 0 Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the function `validPalindrome(string s)` that outputs 1 if the string can be made into a palindrome by deleting at most one character, else it outputs 0. **Expected Time Complexity:** O(n) **Expected Auxiliary Space:** O(1) **Constraints:** 1 <= |s| <= 1000","solution":"def valid_palindrome(s): Determines if a given string can be a palindrome after deleting at most one character. def is_palindrome_range(s, i, j): Check if the substring s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (j+i)//2 + 1)) i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: # Try to skip either character at i or character at j if is_palindrome_range(s, i+1, j) or is_palindrome_range(s, i, j-1): return 1 else: return 0 i += 1 j -= 1 return 1"},{"question":"Write a function that takes a list of integers and returns the first unique integer in the list. If there are no unique integers, return `None`. An integer is considered unique if it appears exactly once in the list. Examples ```python first_unique([2, 3, 3, 2, 6, 7, 7]) ==> 6 first_unique([1, 2, 2, 3, 3]) ==> 1 first_unique([4, 5, 4, 5, 5, 6]) ==> 6 first_unique([1, 1, 1, 1]) ==> None ``` # Constraints - The input list will contain at most 10^5 integers. - The integers in the list will be between -10^6 and 10^6.","solution":"def first_unique(nums): Returns the first unique integer in the list. If there are no unique integers, return None. from collections import Counter count = Counter(nums) for num in nums: if count[num] == 1: return num return None"},{"question":"You are working at a company where you need to manage a growing set of tasks. Each task has a start and an end time and all tasks must be completed within their respective time windows. You want to find the maximum number of non-overlapping tasks you can schedule in a day. Your task is to write a function that takes a list of tasks, where each task is represented by a tuple (start_time, end_time), and returns the maximum number of non-overlapping tasks that can be scheduled. -----Input----- The first line contains an integer n (1 leq n leq 10^4) — the number of tasks. Each of the next n lines contains two integers start_time and end_time (1 leq start_time < end_time leq 10^9) — the start and end times of a task. -----Output----- Output a single integer — the maximum number of non-overlapping tasks that can be scheduled. -----Example----- Input 6 1 3 2 5 4 7 1 8 5 9 8 10 Output 3 -----Explanation----- The optimal non-overlapping tasks are: - Task from 1 to 3. - Task from 4 to 7. - Task from 8 to 10. These tasks do not overlap and the total number of such tasks is 3.","solution":"def max_non_overlapping_tasks(tasks): Takes a list of tasks represented by tuples (start_time, end_time), and returns the maximum number of non-overlapping tasks that can be scheduled. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) max_tasks = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: max_tasks += 1 last_end_time = end return max_tasks # Usage Example if __name__ == \\"__main__\\": tasks = [(1, 3), (2, 5), (4, 7), (1, 8), (5, 9), (8, 10)] print(max_non_overlapping_tasks(tasks)) # Output should be 3"},{"question":"Given two integers n and m, find the number of distinct pairs of integers (a, b) such that 1 ≤ a < b ≤ n and b - a = m. If there are no such pairs, return 0. ------ Input Format ------ - The first line of the input contains T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, two integers n and m. ------ Output Format ------ For each test case, print the number of distinct pairs (a, b) satisfying the conditions. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ n ≤ 10^5 0 ≤ m ≤ n - Sum of n over all test cases doesn\'t exceed 2 cdot 10^6 ------ Sample Input 1 ------ 3 5 2 4 3 6 1 ------ Sample Output 1 ------ 3 1 5 ------ Explanation 1 ------ Test case 1: Possible pairs are (1, 3), (2, 4), and (3, 5), giving a total of 3 pairs. Test case 2: Only one possible pair (1, 4). Test case 3: Possible pairs are (1, 2), (2, 3), (3, 4), (4, 5), and (5, 6), giving a total of 5 pairs. ------ Notes ------ - For m = 0, output should be 0 as b - a = 0 implies a = b which violates the condition that a < b.","solution":"def count_pairs(n, m): Returns the number of distinct pairs (a, b) such that 1 ≤ a < b ≤ n and b - a = m. if m == 0 or m > n: return 0 return max(0, n - m)"},{"question":"A software company wants to develop a digital personal assistant that manages people\'s daily schedules. One of the core functions of the assistant is to merge multiple lists of tasks into a single, prioritized list. Each task has a priority and a timestamp indicating when it was added. Tasks with higher priority should come before lower-priority tasks. If two tasks have the same priority, the one added earlier should appear first. Your task is to implement a function that merges two lists of tasks into a single list sorted by priority and timestamp. # Input - The first line contains an integer `n` – the number of tasks in the first list (1 ≤ n ≤ 1000). - The next `n` lines each contain two integers `pi` and `ti` – the priority and the timestamp of each task in the first list (1 ≤ pi ≤ 100, 1 ≤ ti ≤ 10^9). - The following line contains an integer `m` – the number of tasks in the second list (1 ≤ m ≤ 1000). - The next `m` lines each contain two integers `pj` and `tj` – the priority and the timestamp of each task in the second list (1 ≤ pj ≤ 100, 1 ≤ tj ≤ 10^9). # Output - Print the merged list of tasks. Each line should contain two integers `p` and `t` – the priority and the timestamp of each task, sorted by priority and then by timestamp. # Example Input ``` 3 3 100 1 200 2 300 2 2 150 1 250 ``` Output ``` 3 100 2 150 2 300 1 200 1 250 ``` # Note In the example, the first list of tasks is: - (3, 100) - (1, 200) - (2, 300) The second list of tasks is: - (2, 150) - (1, 250) After merging and sorting by priority and then by timestamp, the final sorted list is: - (3, 100) - (2, 150) - (2, 300) - (1, 200) - (1, 250)","solution":"def merge_tasks(n, tasks_1, m, tasks_2): Merge two lists of tasks and sort them by priority and timestamp. Parameters: n (int): Number of tasks in the first list tasks_1 (List[Tuple[int, int]]): The first list of tasks containing (priority, timestamp) m (int): Number of tasks in the second list tasks_2 (List[Tuple[int, int]]): The second list of tasks containing (priority, timestamp) Returns: List[Tuple[int, int]]: Merged and sorted list of tasks by priority and timestamp # Combine both task lists merged_tasks = tasks_1 + tasks_2 # Sort by priority (descending), then by timestamp (ascending) merged_tasks.sort(key=lambda task: (-task[0], task[1])) return merged_tasks"},{"question":"Write a function `isPalindrome` which checks if a given string is a palindrome. The function should ignore spaces, punctuation, and case differences. For example, the input `\\"A man, a plan, a canal, Panama!\\"` should return `True`.","solution":"import string def isPalindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and case differences. :param s: String to check :return: True if the string is a palindrome, False otherwise # Remove spaces, punctuation and convert to lowercase s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return s == s[::-1]"},{"question":"In a distant galaxy, there exists a planet called Xandar, which is known for its magical trees. These trees have a peculiarity: they can self-replicate under certain conditions. The growth cycles proceed as follows: 1. Each tree has an age. A tree of age `n` will produce exactly one new tree of age 1 at the end of every cycle. 2. These new trees will start growing and their age will increment every subsequent cycle. Given two integers `T` (number of growth cycles) and `N` (number of trees in the initial state, all of age 1), you need to determine the total number of trees on Xandar after `T` growth cycles. # Example Input: ``` 3 1 ``` Output: ``` 4 ``` Explanation: Starting with 1 tree of age 1, the growth cycle proceeds as follows: - Cycle 1: One tree of age 1 produces one new tree of age 1. Now we have 1 tree of age 2 and 1 tree of age 1 (total 2 trees). - Cycle 2: Both trees (ages 1 and 2) produce one new tree each. Now we have 1 tree of age 3, 1 tree of age 2, and 2 trees of age 1 (total 4 trees). - Cycle 3: Four trees produce 4 new trees. Now we have 1 tree of age 4, 1 tree of age 3, 2 trees of age 2, and 4 trees of age 1 (total 8 trees). Thus, after 3 growth cycles, there are 8 trees in total. # Constraints 1. `1 <= T <= 10^5` 2. `1 <= N <= 10^9` # Input Format Input is provided from Standard Input in the following format: `T N` # Output Format Print the total number of trees after `T` growth cycles. # Example Input: ``` 2 2 ``` Output: ``` 6 ``` Explanation: - Initial State: 2 trees of age 1. - Cycle 1: Each tree produces one new tree, transitioning to 2 trees of age 2 and 2 new trees of age 1 (total 4 trees). - Cycle 2: 4 trees produce 4 new trees. Resulting in 2 trees of age 3, 2 trees of age 2, and 4 trees of age 1 (total 8 trees). Thus, after 2 growth cycles, there are 8 trees in total.","solution":"def total_trees_after_cycles(T, N): Returns the total number of trees on Xandar after T growth cycles given initially N trees of age 1. return N * (T + 1)"},{"question":"Given an array of distinct integers representing steps and an integer target, determine if it is possible to reach exactly the target step by taking a specific sequence of steps. The sequence of steps must strictly follow one of two patterns: either always stepping forward or always stepping backward. Formally, if the array of steps is represented as `steps = [s1, s2, ..., sn]` and the target step is represented as `target`, determine if there exists a sequence of steps `x1, x2, ..., xm` (where each `xi` is an element of the steps array) such that the summation `x1 + x2 + ... + xm = target` or `x1 + x2 + ... + xm = -target`. You are required to write a function that checks if it is possible to reach the target by summing the elements of the `steps` array exactly once or the negative of those elements exactly once. Input: - An array of distinct integers `steps` (1 ≤ length of steps ≤ 1000, 1 ≤ |step| ≤ 10^6) representing the possible steps you can take. - An integer `target` (1 ≤ |target| ≤ 10^6) representing the target step to reach. Output: - Return \\"YES\\" if it\'s possible to reach exactly the target step by any sequence of steps or their negatives. - Return \\"NO\\" if it is not possible. Example Input ``` steps = [1, 3, 5, 7] target = 8 ``` Output ``` YES ``` Explanation ``` One possible sequence is {1, 7} which sums up to 8. ``` Input ``` steps = [2, 4, 6] target = 5 ``` Output ``` NO ``` Explanation ``` There is no combination of given steps that can sum up to exactly 5 or -5.","solution":"def can_reach_target(steps, target): Determine if it is possible to reach the target step by summing the elements of the steps array exactly or their negatives. Args: steps: List[int] - list of distinct integers representing steps. target: int - target step to reach. Returns: str: \\"YES\\" if it\'s possible to reach the target, \\"NO\\" otherwise. steps_set = set(steps) if can_sum_to_target(steps, target, steps_set) or can_sum_to_target(steps, -target, steps_set): return \\"YES\\" return \\"NO\\" def can_sum_to_target(steps, target, steps_set): Helper function to determine if it is possible to reach target using a combination of elements from steps, allowed to use each step exactly once. Args: steps: List[int] - list of distinct integers representing steps. target: int - target step to reach. steps_set: Set[int] - set of steps for quick lookups. Returns: bool: True if it is possible to reach target, False otherwise. from itertools import combinations for r in range(1, len(steps) + 1): for combo in combinations(steps, r): if sum(combo) == target: return True return False"},{"question":"Write a function that takes a string of words and returns the same string with the words reversed in order, but with each word\'s internal character order preserved. For example: - If the input is \\"The quick brown fox jumps over the lazy dog\\", the output should be \\"dog lazy the over jumps fox brown quick The\\". - If the input is \\"Hello World\\", the output should be \\"World Hello\\". Your function should handle various cases such as multiple spaces between words and capitalization.","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence but preserves the internal character order of each word. Parameters: sentence (str): The input string of words. Returns: str: The input string with the words reversed in order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"A group of engineers is working on developing an array-based data structure that will efficiently support a sequence of insertions. To ensure that they can analyze their progress, they want to simulate the behaviors of their insertion operations under a specified performance condition. For this task, you are given an initially empty array and a series of n insertion operations. Each insertion operation specifies an integer that will be appended to the array. After every operation, the engineers need to know the current state of the array as well as the maximum integer value present in the array at that point in time. Input The input consists of a single integer n (1 ≤ n ≤ 1000), followed by a line containing n integers separated by spaces, the values to be inserted into the array sequentially. Output For each insertion operation, output the array\'s state (as a space-separated string of integers) followed by the maximum value at that point, on a new line. SAMPLE INPUT 5 3 1 4 1 5 SAMPLE OUTPUT 3 3 3 1 3 3 1 4 4 3 1 4 1 4 3 1 4 1 5 5","solution":"def simulate_insertion_operations(n, values): Simulate insertion operations and return the state of the array and max value after each operation. Args: n (int): The number of insertion operations. values (list of int): The values to be inserted into the array. Returns: list of tuples: Each tuple contains the current state of the array as a string and the max value. array = [] result = [] current_max = float(\'-inf\') for value in values: array.append(value) if value > current_max: current_max = value result.append((\\" \\".join(map(str, array)), current_max)) return result"},{"question":"For a college festival, the XYZ university invites all students to participate in a series of competitive programming events. One such event is the \\"Studious Musician\\". In this event, each student will be given multiple scores, and their task is to identify the maximum score difference within a subset of scores. More formally, each participant is given a sequence of music scores, and they must find the maximum possible difference between any two scores from the same contiguous subsequence of scores. Given an array of integers representing the scores, your task is to find out the maximum possible difference between any two scores within every possible contiguous subsequence of the array. Input The first line contains a single positive integer n (1 ≤ n ≤ 100,000) — the number of scores. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 1,000,000) — the scores obtained by the student. Output Print a single integer — the maximum possible difference between any two scores in every possible contiguous subsequence of the array. Examples Input 5 1 3 6 4 2 Output 5 Input 3 10 7 12 Output 5 Input 6 12 8 10 14 6 2 Output 12","solution":"def max_score_difference(scores): Find the maximum possible difference between any two scores in every possible contiguous subsequence of the array. Args: scores (list): List of n integers representing the scores. Returns: int: The maximum possible difference between any two scores. if not scores: return 0 max_score = max(scores) min_score = min(scores) return max_score - min_score # Example usage and test: # Input: 5, scores: [1, 3, 6, 4, 2] # Output: 5 (maximum difference between 6 and 1)"},{"question":"Write a function `findPolygonAngle` that takes a positive integer `n` representing the number of sides of a simple, regular polygon, and returns the measure of one of its interior angles in degrees. Input: - The input is a single positive integer `n` (3 ≤ n ≤ 1000), the number of sides of the polygon. Output: - The output should be a single integer, the measure of one interior angle of the polygon in degrees. Example: Input 4 Output 90 Explanation A regular polygon with 4 sides (a square) has interior angles of 90 degrees each since (n-2) * 180 / n = 2 * 180 / 4 = 90 degrees per angle.","solution":"def findPolygonAngle(n): Returns the measure of one interior angle of a regular polygon with n sides. if n < 3 or n > 1000: raise ValueError(\\"The number of sides must be between 3 and 1000\\") # Interior angle formula for a regular polygon angle = (n - 2) * 180 / n return int(angle)"},{"question":"You are given a list of integers representing building heights and a distance `d`. You have the ability to jump between buildings that are at most `d` distance apart. Your task is to calculate the minimum number of jumps needed to get from the first building to the last building in the list. If it is not possible to reach the last building with the given distance constraint, return -1. Example 1: Input: heights = [1, 2, 3, 4, 5], d = 2 Output: 2 Explanation: First jump from the first building (height 1) to the second building (height 2), then jump from the second building to the last building (height 5). Total jumps = 2. Example 2: Input: heights = [1, 3, 1, 2, 1, 4], d = 1 Output: -1 Explanation: It is not possible to move from the first building to the last building with the given constraint. Your Task: You do not need to read input or print anything. Implement the function `minJumps()` that takes the list `heights` and integer `d` as input parameters and returns the minimum number of jumps required. If reaching the last building is not possible, return -1. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 ≤ heights.length ≤ 100 1 ≤ heights[i] ≤ 10^5 1 ≤ d ≤ heights.length","solution":"def minJumps(heights, d): Calculate the minimum number of jumps needed to get from the first building to the last building. If it is not possible to reach the last building, return -1. n = len(heights) if n == 1: return 0 # Track the minimum jumps to reach each building jumps = [float(\'inf\')] * n jumps[0] = 0 for i in range(n): for j in range(i + 1, n): if j - i <= d and abs(heights[j] - heights[i]) <= d: jumps[j] = min(jumps[j], jumps[i] + 1) return jumps[-1] if jumps[-1] != float(\'inf\') else -1"},{"question":"You are given a 2-D plane with N non-overlapping axis-aligned rectangles. A pair of rectangles (i, j) is called an intersecting pair if their boundaries overlap. Find the total number of intersecting pairs. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of rectangles. - Each of the next N lines contains four space-separated integers x1, y1, x2, and y2 representing the bottom-left and top-right corners of the rectangles respectively. ------ Output Format ------ For each test case output a single line denoting the number of intersecting pairs. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 2000 -10^{9} ≤ x1, y1, x2, y2 ≤ 10^{9} - Sum of N over all test cases does not exceed 2000 - All rectangles in each test case are non-overlapping with other rectangles. ------ Sample Input 1 ------ 1 3 0 0 2 2 1 1 3 3 4 4 6 6 ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ - In test case 1, there is one intersecting pair: (1, 2). The first and second rectangles overlap. The third rectangle doesn\'t overlap with any other rectangle. Therefore, the total number of intersecting pairs is 1.","solution":"def intersecting_pairs(T, test_cases): def do_overlap(r1, r2): # Check if one rectangle is to the left of the other or above/below the other if r1[2] <= r2[0] or r1[0] >= r2[2]: return False if r1[3] <= r2[1] or r1[1] >= r2[3]: return False return True results = [] for i in range(T): N, rectangles = test_cases[i] count = 0 for j in range(N): for k in range(j + 1, N): if do_overlap(rectangles[j], rectangles[k]): count += 1 results.append(count) return results"},{"question":"Given an integer N, return the sum of the values of Phi(i) for i = 1 to N, where Phi denotes Euler\'s Totient function. Euler\'s Totient function, Phi(x), is the number of integers from 1 to x that are coprime with x. Provide the answer modulus 10^{9} + 7. Example 1: Input: N = 2 Output: 2 Explanation: Phi(1) = 1 (1 is coprime with 1) Phi(2) = 1 (1 is coprime with 2) So, the sum is 1 + 1 = 2 Example 2: Input: N = 5 Output: 9 Explanation: Phi(1) = 1 Phi(2) = 1 Phi(3) = 2 Phi(4) = 2 Phi(5) = 4 So, the sum is 1 + 1 + 2 + 2 + 4 = 10 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfTotients() which takes N as input and returns the answer. Expected Time Complexity: O(N log log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{6}","solution":"def sumOfTotients(N): Returns the sum of the values of Phi(i) for i = 1 to N, where Phi denotes Euler\'s Totient function. MOD = 10**9 + 7 # Step 1: Initialize the array for the values of Euler\'s Totient function phi = list(range(N + 1)) # Step 2: Use a sieve-like approach to compute the totient function values for every number up to N for i in range(2, N + 1): if phi[i] == i: # i is a prime number for j in range(i, N + 1, i): phi[j] *= (i - 1) phi[j] //= i # Step 3: Calculate the sum of totient values from 1 to N result = sum(phi[1:N+1]) % MOD return result"},{"question":"Given a positive integer num, return the sum of its digits until the result has only one digit. To calculate the sum of digits, continuously add all the digits of the number until it becomes a single-digit number. Example 1: Input: num = 38 Output: 2 Explanation: The process is like: 3 + 8 = 11 11 is not a single-digit number, so continue summing its digits: 1 + 1 = 2. Since 2 is a single-digit number, return it. Example 2: Input: num = 12345 Output: 6 Explanation: Step 1: Sum of digits of 12345 is 1 + 2 + 3 + 4 + 5 = 15 Step 2: Sum of digits of 15 is 1 + 5 = 6. Since 6 is a single-digit number, return it. Your Task: You don\'t need to read input or print anything. Complete the function `sum_of_digits()` which takes an integer num as input and returns the single-digit sum. Expected Time Complexity: O(log(num)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ num ≤ 10^9","solution":"def sum_of_digits(num): Returns the sum of the digits of num until the result has only one digit. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Given an array of integers and an integer k, return whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k. Example: Input: nums = [1,2,3,1,2,3], k = 2 Output: False Note: The integers in the array are in the range [-10^9, 10^9]. The array size will be at most 10^4. The value of k will be a non-negative integer.","solution":"def contains_nearby_duplicate(nums, k): Returns True if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k, otherwise returns False. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Your task is to merge two sorted arrays into one sorted array. You will be given two sorted lists of integers and you need to combine them into a single list that maintains the sorted order. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers, M and N, the sizes of the two arrays. - The next two lines contain M and N integers each, representing the two sorted arrays to be merged. Output: - Print the merged sorted array for each test case on a new line. SAMPLE INPUT 2 3 4 1 3 5 2 4 6 8 2 3 0 9 1 2 3 SAMPLE OUTPUT 1 2 3 4 5 6 8 0 1 2 3 9 Explanation Testcase 1: The combined sorted array from [1, 3, 5] and [2, 4, 6, 8] is [1, 2, 3, 4, 5, 6, 8]. Testcase 2: The combined sorted array from [0, 9] and [1, 2, 3] is [0, 1, 2, 3, 9].","solution":"def merge_sorted_arrays(test_cases): Merges two sorted arrays for each test case into a single sorted array. Args: test_cases (list): A list where each element is a tuple containing two lists of sorted integers. Returns: list: A list of merged, sorted arrays. result = [] for case in test_cases: array1, array2 = case merged_array = sorted(array1 + array2) result.append(merged_array) return result def process_input(input_data): Processes the input data to extract test cases. Args: input_data (list): List of input data strings Returns: list: A list of tuples, each containing two lists of sorted integers as test cases. i = 0 T = int(input_data[i]) i += 1 test_cases = [] for _ in range(T): M, N = map(int, input_data[i].split()) i += 1 array1 = list(map(int, input_data[i].split())) i += 1 array2 = list(map(int, input_data[i].split())) i += 1 test_cases.append((array1, array2)) return test_cases input_data = [ \\"2\\", \\"3 4\\", \\"1 3 5\\", \\"2 4 6 8\\", \\"2 3\\", \\"0 9\\", \\"1 2 3\\" ] test_cases = process_input(input_data) merged_arrays = merge_sorted_arrays(test_cases) for array in merged_arrays: print(\\" \\".join(map(str, array)))"},{"question":"Given a sequence of parentheses, determine whether the sequence is valid. A valid sequence of parentheses satisfies the following conditions: 1. Every opening parenthesis \'(\' must have a corresponding closing parenthesis \')\'. 2. Opening parentheses must be closed in the correct order. Write a function `is_valid_parentheses()` that takes a string containing only the characters \'(\' and \')\' and returns a boolean indicating whether the input string is a valid parentheses sequence. ```if:python Complete the function `is_valid_parentheses()` that takes a string and returns `True` if the string is a valid parentheses sequence, and `False` otherwise. ``` ```if-not:python Complete the function `isValidParentheses()` that takes a string and returns `True` if the string is a valid parentheses sequence, and `False` otherwise. ``` ```if:typescript Where valid parentheses sequences can be checked using the following function signature. ~~~typescript function isValidParentheses(s: string): boolean ``` Examples ```if-not:python ~~~js isValidParentheses(\\"()\\") == true isValidParentheses(\\"()()\\") == true isValidParentheses(\\"(())\\") == true isValidParentheses(\\"(()\\") == false isValidParentheses(\\")(\\") == false isValidParentheses(\\"())(\\") == false ~~~ ``` ```if:python ~~~py is_valid_parentheses(\\"()\\") == True is_valid_parentheses(\\"()()\\") == True is_valid_parentheses(\\"(())\\") == True is_valid_parentheses(\\"(()\\") == False is_valid_parentheses(\\")(\\") == False is_valid_parentheses(\\"())(\\") == False ~~~ ```","solution":"def is_valid_parentheses(s): Determine if the input string is a valid sequence of parentheses. Args: s (str): The input string containing only \'(\' and \')\'. Returns: bool: True if the string is a valid sequence of parentheses, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack.pop() != \'(\': return False return not stack"},{"question":"You are given an integer array containing both positive and negative numbers. Your task is to find the maximum product of a contiguous subarray within the given array. Write a function that implements this requirement. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains a single integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output a single line containing the maximum product of a contiguous subarray. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 10^3 -10 ≤ array[i] ≤ 10 ------ Sample Input 1 ------ 2 5 2 3 -2 4 -1 4 -2 0 -1 3 ------ Sample Output 1 ------ 48 3 ------ Explanation 1 ------ - In the first test case, the maximum product of a contiguous subarray is achieved by the subarray [2, 3, -2, 4, -1], which results in 48. - In the second test case, the maximum product is achieved by the subarray [3], which results in 3.","solution":"def max_product_contiguous_subarray(arr): Returns the maximum product of a contiguous subarray in the given array. n = len(arr) if n == 0: return 0 # Initialize the minimum and maximum products for the first element max_prod = min_prod = result = arr[0] for i in range(1, n): if arr[i] < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(arr[i], max_prod * arr[i]) min_prod = min(arr[i], min_prod * arr[i]) result = max(result, max_prod) return result def solve_max_product(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_product_contiguous_subarray(arr)) return results"},{"question":"Given a list of integers, where some integers may appear more than once, you need to find and return the first non-repeating integer in the list. If all numbers are repeating or if the list is empty, return -1. Example 1: Input: [4, 5, 1, 2, 0, 4] Output: 5 Explanation: 5 is the first non-repeating element in the list. Example 2: Input: [7, 3, 5, 7, 3, 8, 5] Output: 8 Explanation: 8 is the first non-repeating element in the list. Example 3: Input: [1, 1, 1, 1, 1] Output: -1 Explanation: All elements in the list are repeating. Your Task: You don\'t need to read or print anything. Your task is to complete the function firstNonRepeating() which takes a list of integers as input and returns an integer representing the first non-repeating element. Expected Time Complexity: O(n), where n is the number of elements in the list. Expected Space Complexity: O(n) Constraints: 1 <= len(list) <= 10^5 -10^6 <= list[i] <= 10^6","solution":"def firstNonRepeating(arr): Returns the first non-repeating integer in the list. If all numbers are repeating or if the list is empty, returns -1. count = {} # Count the occurrences of each element for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # Find the first non-repeating element for num in arr: if count[num] == 1: return num return -1"},{"question":"In this problem, you need to implement a simulation of a simple supermarket queue system. The supermarket has one checkout counter and a queue for customers waiting to check out. Each customer can take a different amount of time to be processed by the cashier. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of customers. The second line contains n integers separated by spaces, where the i-th integer ti (1 ≤ ti ≤ 1000) represents the time it takes to process the i-th customer. The third line contains an integer m (1 ≤ m ≤ 1000), the number of seconds available before the supermarket closes. Output Print the maximum number of customers that can be processed before the supermarket closes. Examples Input 5 1 2 3 4 5 7 Output 3 Input 4 3 3 3 3 10 Output 3 Explanation In the first example, the maximum number of customers that can be processed is 3 (1+2+3 = 6 <= 7). In the second example, the maximum number of customers that can be processed is also 3 (3+3+3 = 9 <= 10).","solution":"def max_customers_processed(n, processing_times, m): Computes the maximum number of customers that can be processed before the supermarket closes. :param n: Number of customers :param processing_times: List of processing times for each customer :param m: Number of seconds available before the supermarket closes :return: Maximum number of customers that can be processed total_time = 0 customers_processed = 0 for time in processing_times: if total_time + time <= m: total_time += time customers_processed += 1 else: break return customers_processed"},{"question":"You are part of a team developing an application that tracks time logs for different projects. Each project has several tasks, and each task has a start time and an end time. The application needs to generate a report indicating the total time spent on each project, ensuring that overlapping tasks within the same project are merged correctly. Write a function that takes a list of projects, where each project has a list of tasks defined by start and end times, and returns the total time spent on each project. # -----Input----- The input consists of: - An integer n, the number of projects. - For each project, an integer m, the number of tasks. - Then, m pairs of integers representing the start and end times of each task. # -----Output----- Output a single integer for each project, indicating the total time spent on that project. # -----Constraints----- - 1 ≤ n ≤ 20 - 1 ≤ m ≤ 100 - 1 ≤ start < end ≤ 1000 # -----Example----- Input: ``` 2 3 1 5 2 6 8 10 2 1 3 2 5 ``` Output: ``` 7 4 ``` # -----Note----- For the first project, the tasks are: - Task 1: [1, 5] - Task 2: [2, 6] - Task 3: [8, 10] Merging tasks 1 and 2 gives [1, 6], so the total time is 5 (1-6) + 2 (8-10) = 7. For the second project, the tasks are: - Task 1: [1, 3] - Task 2: [2, 5] Merging these tasks gives [1, 5], so the total time is 4 (1-5).","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of merged intervals. if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: previous = merged[-1] if current[0] <= previous[1]: # Merge the intervals merged[-1] = (previous[0], max(previous[1], current[1])) else: merged.append(current) return merged def total_project_time(n, project_tasks): Returns the total time spent on each project by merging overlapping tasks. Arguments: n -- number of projects project_tasks -- list of lists containing tasks for each project Returns: A list of total time spent on each project total_times = [] for tasks in project_tasks: merged_tasks = merge_intervals(tasks) total_time = sum(end - start for start, end in merged_tasks) total_times.append(total_time) return total_times # Function that takes user input and returns the result def project_times_from_input(n, tasks): return total_project_time(n, tasks)"},{"question":"In a farming game, players are required to grow crops in a grid of plots. Each plot can hold one crop and has unique soil properties that determine the growth rate of the crop planted in it. Once a crop is planted, its growth rate remains fixed by the plot\'s properties. Given a grid representing the growth rates for each plot, players aim to maximize their yields by strategically planting crops. Each crop has a fixed growth period in days, and the yield can be calculated as the product of the growth rate and the number of days the crop grows. Write a program to determine the maximum possible yield after a given number of days by planting one crop in the grid. # Input The input is a sequence of datasets. Each dataset starts with two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid, followed by an integer d (1 ≤ d ≤ 10000), representing the number of days the crop grows. Following this, there are m lines each containing n integers, where each integer g (1 ≤ g ≤ 100) represents the growth rate of the plot at that position. The end of the input is indicated by a line containing two zeroes separated by a space. It is not a dataset. # Output For each dataset, output a single integer, the maximum possible yield after the crop grows for d days. # Example Input 3 3 5 4 7 3 2 9 1 5 3 8 2 2 10 6 9 7 4 0 0 Output 45 90 # Explanation For the first dataset, the maximum yield is achieved by planting the crop in the plot with the highest growth rate (9), growing for 5 days, resulting in a yield of 9 * 5 = 45. For the second dataset, the best plot has the growth rate 9, and growing the crop there for 10 days results in a yield of 9 * 10 = 90.","solution":"def max_yield(grids): results = [] for grid in grids: m, n, d = grid[\'dimensions\'] max_growth_rate = 0 for row in grid[\'grid\']: max_growth_rate = max(max_growth_rate, max(row)) results.append(max_growth_rate * d) return results def parse_input(input_data): grids = [] input_lines = input_data.strip().split(\'n\') i = 0 while i < len(input_lines): if input_lines[i] == \'0 0\': break m, n, d = map(int, input_lines[i].split()) i += 1 grid = [] for _ in range(m): row = list(map(int, input_lines[i].split())) grid.append(row) i += 1 grids.append({\'dimensions\': (m, n, d), \'grid\': grid}) return grids"},{"question":"You are given a positive integer `n`. Your task is to compute the sum of all prime numbers up to and including `n`. For example: - For `n = 10`, the prime numbers up to 10 are 2, 3, 5, and 7, so the function should return `17`. - For `n = 20`, the prime numbers up to 20 are 2, 3, 5, 7, 11, 13, 17, and 19, so the function should return `77`. You can assume that the input will always be a positive integer. ***Note:*** Ensure that your solution is efficient and can handle large values of `n`. # Function Signature ```python def sum_of_primes(n: int) -> int: pass ```","solution":"def sum_of_primes(n: int) -> int: Returns the sum of all prime numbers up to and including n. def is_prime(num: int) -> bool: if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True sum_primes = 0 for i in range(2, n + 1): if is_prime(i): sum_primes += i return sum_primes"},{"question":"You are working on a software that analyzes stock prices and gives recommendations to investors. You have access to the stock prices for the past N days stored in an array, where the price on the i-th day is denoted as P_i. Your task is to find the maximum profit that can be made by buying and selling the stock exactly once. The selling day must be after the buying day. If no profit can be made, the profit should be 0. -----Constraints----- - All values in input are integers. - 2 ≤ N ≤ 10^5 - 0 ≤ P_i ≤ 10^9 (1 ≤ i ≤ N) -----Input----- Input is given from Standard Input in the following format: N P_1 P_2 dots P_N -----Output----- Print the maximum profit that can be achieved. -----Sample Input----- 6 7 1 5 3 6 4 -----Sample Output----- 5 - The maximum profit can be made by buying on the second day (price = 1) and selling on the fifth day (price = 6), resulting in a profit of 6 - 1 = 5.","solution":"def max_profit(N, prices): Calculate the maximum profit that can be achieved by buying and selling the stock exactly once. :param N: int : Number of days :param prices: List[int] : List of stock prices for each day :return: int : Maximum profit that can be achieved, or 0 if no profit is possible if N < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit # Example usage: # N = 6 # prices = [7, 1, 5, 3, 6, 4] # print(max_profit(N, prices)) # Output: 5"},{"question":"# Calculate the sum of all multiples of 3 or 5 below a given number Write a function that returns the sum of all multiples of 3 or 5 that are less than a given positive integer `n`. Example: ``` Input: 10 Output: 23 Explanation: The multiples of 3 or 5 below 10 are 3, 5, 6, and 9. Their sum is 3 + 5 + 6 + 9 = 23. ```","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 below the given number n. return sum(x for x in range(n) if x % 3 == 0 or x % 5 == 0)"},{"question":"You are given an array of n integers and an integer k. You need to determine the shortest subarray that has a sum of at least k. If no such subarray exists, output -1. Constraints 1 leq n leq 10^5 1 leq k leq 10^9 1 leq textit{Array elements} leq 10^9 Input Format The first line contains integers n and k separated by a space. The second line contains n integers, the elements of the array. Output Format Output a single integer, the length of the shortest subarray with a sum of at least k, or -1 if no such subarray exists. Sample Input 6 15 1 2 3 4 5 10 Sample Output 2 Explanation The subarray [5, 10] has a sum of 15, which is the minimum length subarray with a sum of at least k.","solution":"from collections import deque def shortest_subarray_with_sum_at_least_k(arr, k): Given an array of integers and an integer k, returns the length of the shortest subarray with a sum of at least k. If no such subarray exists, returns -1. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] result = float(\'inf\') deque_indices = deque() for i in range(n + 1): while deque_indices and prefix_sums[i] - prefix_sums[deque_indices[0]] >= k: result = min(result, i - deque_indices.popleft()) while deque_indices and prefix_sums[i] <= prefix_sums[deque_indices[-1]]: deque_indices.pop() deque_indices.append(i) return result if result != float(\'inf\') else -1"},{"question":"Description Write a function that takes in a string of space-separated integers and returns their sum. The input string may contain negative numbers, and the sum should be zero if the input string is empty. Ensure the solution handles strings of varying lengths efficiently. Examples ```python sum_of_integers(\\"1 2 3 4 5\\") == 15 sum_of_integers(\\"-1 -2 -3 -4 -5\\") == -15 sum_of_integers(\\"10 -10 20 -20\\") == 0 sum_of_integers(\\"\\") == 0 sum_of_integers(\\"100 200 300 400\\") == 1000 ```","solution":"def sum_of_integers(s): Returns the sum of space-separated integers in the input string s. If the string is empty, returns 0. if not s: return 0 return sum(map(int, s.split()))"},{"question":"# Task: Write a function that accepts a list of integers and returns a list of the integers that are prime numbers from the given list. Example: ```python Input: find_primes([2, 3, 4, 15, 17, 19, 23]) Output: [2, 3, 17, 19, 23] ``` **Note:** A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. ___ Happy coding!","solution":"def find_primes(lst): Returns a list of prime numbers from the given list. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True return [x for x in lst if is_prime(x)]"},{"question":"Write a function that takes a positive integer X as input and returns the sum of its digits raised to their own respective positions (1-based index) modulo 1000000007. Example 1: Input: X = 1234 Output: 274 Explanation: 1^1 + 2^2 + 3^3 + 4^4 = 1 + 4 + 27 + 256 = 288; 288 % 1000000007 = 288 Example 2: Input: X = 987 Output: 68608 Explanation: 9^1 + 8^2 + 7^3 = 9 + 64 + 343 = 416; 416 % 1000000007 = 416 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfDigitPowers() which takes an integer X as input and returns an integer representing the sum of its digits raised to their respective positions modulo 1000000007. Expected Time Complexity: O(d), where d is the number of digits in X. Expected Space Complexity: O(1) Constraints: 1 <= X <= 10^{12}","solution":"def sumOfDigitPowers(X): MOD = 1000000007 digits = list(map(int, str(X))) result = sum(digit**i for i, digit in enumerate(digits, start=1)) return result % MOD"},{"question":"Alex loves playing with numbers, especially finding patterns and interesting properties in them. Recently, he came across a problem where he needs to find the smallest number that is greater than or equal to a given number (A) and is divisible by another given number (B). You need to help Alex by writing a program that solves this problem for him. Input: - The first line of the input contains a single integer (T) denoting the number of test cases. - Each of the next (T) lines contains two integers (A) and (B) separated by a space. Output: - For each test case, output the smallest integer that is greater than or equal to (A) and is divisible by (B). Constraints: - (1 leq T leq 100) - (1 leq A, B leq 10^9) SAMPLE INPUT 5 10 3 5 7 12 6 100 25 7 10 SAMPLE OUTPUT 12 7 12 100 10 Explanation: TestCase 1: The smallest number greater than or equal to 10 that is divisible by 3 is 12. TestCase 2: The smallest number greater than or equal to 5 that is divisible by 7 is 7. TestCase 3: The smallest number greater than or equal to 12 that is divisible by 6 is 12. TestCase 4: The smallest number greater than or equal to 100 that is divisible by 25 is 100. TestCase 5: The smallest number greater than or equal to 7 that is divisible by 10 is 10.","solution":"def find_smallest_multiple(T, test_cases): Finds the smallest number that is greater than or equal to A and is divisible by B. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains two integers A and B. Returns: list: List of results for each test case. results = [] for A, B in test_cases: if A % B == 0: results.append(A) else: results.append(((A // B) + 1) * B) return results"},{"question":"Given a string s and an array of strings words, determine if s is a concatenation of each word in words exactly once and without any intervening characters. Note that the order of concatenation must follow the order of the words in the given array. Example 1: Input: s = \\"leetcode\\", words = [\\"leet\\", \\"code\\"] Output: true Explanation: \\"leetcode\\" can be formed by concatenating \\"leet\\" and \\"code\\". Example 2: Input: s = \\"applepie\\", words = [\\"pie\\", \\"apple\\"] Output: false Explanation: \\"applepie\\" cannot be formed since the order must be \\"apple\\" followed by \\"pie\\". Example 3: Input: s = \\"applebananaman\\", words = [\\"apple\\", \\"banana\\", \\"man\\"] Output: true Explanation: \\"applebananaman\\" can be formed by concatenating \\"apple\\", \\"banana\\", and \\"man\\". Example 4: Input: s = \\"applebanana\\", words = [\\"apple\\", \\"banana\\", \\"man\\"] Output: false Explanation: The given words array has an extra \\"man\\" which is not part of \\"applebanana\\". Example 5: Input: s = \\"abcd\\", words = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] Output: true Explanation: \\"abcd\\" can be formed by concatenating \\"a\\", \\"b\\", \\"c\\", and \\"d\\". Constraints: 1. 1 <= s.length <= 10^5 2. 1 <= words.length <= 10^4 3. 1 <= words[i].length <= 10^4 4. s consists of lowercase English letters. 5. words[i] consists of lowercase English letters.","solution":"def is_concatenation(s, words): Returns True if string s is a concatenation of each word in words exactly once and in order. concatenated_string = \'\'.join(words) return s == concatenated_string"},{"question":"You have an initial number of decimals, D, to remove from the left of a large integer, N, represented as a string. After removing D decimals from the left, the remaining integer must be as large as possible. Write a function that determines the largest integer you can get after removing exactly D decimals. -----Constraints----- - All values in input are integers. - 1 leq D leq length(N) - N is a non-negative integer represented as a string, with length at most 100. -----Input----- Input is given from Standard Input in the following format: N D -----Output----- Print the largest possible integer you can obtain after removing exactly D decimals. -----Sample Input----- 7654321 3 -----Sample Output----- 54321 Removing 3 digits from the left of 7654321 leaves us with 4321, which is the largest possible integer.","solution":"def largest_integer(N, D): Returns the largest integer after removing exactly D digits from the left of the integer N. return N[D:]"},{"question":"Professor Snape needs help grading a large number of potion lab assignments. Each assignment is graded based on multiple test results. Each test result is either pass (represented by \'P\') or fail (represented by \'F\'). An assignment passes if more than half of its test results are pass. Given the number of assignments and their corresponding test results, determine how many assignments pass. Function Description Complete the `countPassingAssignments` function in the editor below. It should return an integer that represents the number of assignments that pass. `countPassingAssignments` has the following parameter(s): - `assignments`: a list of strings where each string represents the test results of an assignment. Input Format The first line contains an integer `n`, the number of assignments. Each of the next `n` lines contains a string representing the test results of each assignment. Constraints 1 leq n leq 100 Each string will have a length between 1 and 100 and will be composed of only \'P\' and \'F\' characters. Output Format Print the number of assignments that pass. Sample Input 4 PFPF PPFFF PPP FFFP Sample Output 2 Explanation Assignments 1, 2, 3, and 4 have the following test results: 1. PFPF - 2 passes out of 4 tests, which is not more than half. 2. PPFFF - 2 passes out of 5 tests, which is not more than half. 3. PPP - 3 passes out of 3 tests, which is more than half. 4. FFFP - 1 pass out of 4 tests, which is not more than half. Only assignments 3 and 4 pass, therefore the output is 2.","solution":"def countPassingAssignments(assignments): Counts the number of assignments that pass based on test results. Parameters: assignments (list of str): A list of strings where each string represents the test results of an assignment. Returns: int: The number of assignments that pass. passing_count = 0 for assignment in assignments: pass_count = assignment.count(\'P\') total_tests = len(assignment) if pass_count > total_tests / 2: passing_count += 1 return passing_count"},{"question":"You are given a list of integers. You need to find the maximum sum of non-adjacent elements in the list. Write a function that takes as input the list of integers and returns this maximum sum. Input: - A single line containing an integer, T, the number of test cases. - For each test case, the first line contains an integer, N, the size of the list. - The second line contains N integers representing the elements of the list. Output: - For each test case, print the maximum sum of non-adjacent elements. **Constraints:** 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 -10^4 ≤ elements of the list ≤ 10^4 SAMPLE INPUT 2 4 3 2 5 10 3 3 2 7 SAMPLE OUTPUT 13 10 Explanation For the first test case: The list given is [3, 2, 5, 10]. The non-adjacent subsets are [3, 5], [3, 10], [2, 10]. Among these, [3, 10] is the maximum with sum=13. For the second test case: The list given is [3, 2, 7]. The non-adjacent subsets are [3, 7]. So, the maximum sum=10.","solution":"def max_sum_non_adjacent(nums): Function to calculate the maximum sum of non-adjacent elements in a list. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) prev_prev = 0 prev = max(0, nums[0]) for num in nums[1:]: current = max(prev, prev_prev + num) prev_prev = prev prev = current return prev def process_test_cases(test_cases): results = [] for test_case in test_cases: _, nums = test_case results.append(max_sum_non_adjacent(nums)) return results"},{"question":"You are given a list of n integers denoting heights of n trees in a forest. Your task is to partition these trees into the minimum number of contiguous segments (subarrays) such that within each segment, the trees are sorted in non-decreasing order. A contiguous segment can be considered as sorted if for any two trees in the segment, heights[i] ≤ heights[i+1]. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t pairs of lines describes a test case. The first line contains an integer n (1 ≤ n ≤ 2⋅10^5) — the number of trees in the forest. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the trees. Output For each test case, print the minimum number of contiguous segments needed. Example Input 3 5 1 2 3 4 5 4 4 3 2 1 6 5 1 2 3 2 4 Output 1 4 3","solution":"def min_segments(test_cases): results = [] for n, heights in test_cases: segments = 1 for i in range(1, n): if heights[i] < heights[i - 1]: segments += 1 results.append(segments) return results def process_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) heights = list(map(int, lines[index + 1].strip().split())) test_cases.append((n, heights)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Implement a function that takes a list of integers and returns all unique permutations of the list. The input will always be a list of distinct integers. The function should return the permutations in lexicographical order. The signature of the function should be: ```python def find_permutations(nums: List[int]) -> List[List[int]]: ``` # Example: ```python nums = [1, 2, 3] find_permutations(nums) # Output: [ # [1, 2, 3], # [1, 3, 2], # [2, 1, 3], # [2, 3, 1], # [3, 1, 2], # [3, 2, 1] # ] nums = [3, 1, 2] find_permutations(nums) # Output: [ # [1, 2, 3], # [1, 3, 2], # [2, 1, 3], # [2, 3, 1], # [3, 1, 2], # [3, 2, 1] # ] ``` # Constraints: 1. The length of the input list is between 1 and 9. 2. Each integer in the list is unique and ranges from -9 to 9. # Notes: The order of permutations in the output should be sorted in lexicographical order based on the integer values.","solution":"from typing import List from itertools import permutations def find_permutations(nums: List[int]) -> List[List[int]]: Returns all unique permutations of the input list in lexicographical order. return sorted(list(permutations(nums)))"},{"question":"You are given a list of N integers, each representing the altitude of terrain at that point. After every unit of time, water starts to flood the terrain from the left to the right. Each unit of water can merge or flow freely over to the next terrain point if it does not rise, or it gets accumulated at that point if it encounters a higher terrain. Write a function that, given the list of terrain altitudes, returns the total number of units of water that can remain trapped after the flood has moved through all points. Assume that water flows freely over both ends of the list. Example 1: Input: terrain = [2, 0, 2] Output: 2 Explanation: After flooding, 2 units of water will be trapped between the two terrain points with height 2. Example 2: Input: terrain = [3, 0, 1, 3, 0, 5] Output: 8 Explanation: Water will be trapped at various points as follows: - Between 3 and 1: 3 units of water. - Between 1 and 3: 2 units of water. - Between 3 and 0: 5 units of water minus the 2 units already counted between 1 and 3. Thus, in total, 8 units of water are trapped. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `waterTrapped(terrain)` which takes the list of integers as input and returns the total units of water trapped. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ Terrain[i] ≤ 10^4","solution":"def waterTrapped(terrain): if not terrain or len(terrain) < 3: return 0 n = len(terrain) left_max = [0] * n right_max = [0] * n left_max[0] = terrain[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], terrain[i]) right_max[n - 1] = terrain[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], terrain[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - terrain[i] return total_water"},{"question":"You are given an array of integers. Your task is to write a function that returns the sum of all positive numbers in the array. If the array is empty or there are no positive numbers, the function should return 0. The function prototype is `def sum_of_positives(arr: List[int]) -> int`. **Examples:** ```python sum_of_positives([1, -4, 7, 12]) # should return 20 sum_of_positives([-1, -4, -7, -12]) # should return 0 sum_of_positives([]) # should return 0 ```","solution":"from typing import List def sum_of_positives(arr: List[int]) -> int: Returns the sum of all positive numbers in the array. If the array is empty or there are no positive numbers, returns 0. return sum(x for x in arr if x > 0)"},{"question":"You are given a forest represented as a grid of size n x m. Each cell in the grid can either be \'T\' representing a tree or \'.\' representing an empty space. A fire will start at the top-left cell (0, 0) and spread to adjacent trees (up, down, left, right) in each time unit. Your task is to determine the number of time units it will take to burn down the entire forest. If the entire forest cannot be burned down, return -1. Function Description Complete the function `burn_forest` that has the following parameters: - `forest` (list of strings): A list of strings where each string represents a row of the grid. The function should return an integer representing the number of time units to burn down the entire forest, or -1 if it is impossible. Input Format The first line of input contains two space-separated integers, `n` and `m`, the dimensions of the forest. The next `n` lines each contain a string of length `m` representing the forest grid. Constraints 1 <= n, m <= 1000 Output Format Return a single integer, the number of time units to burn down the entire forest, or -1 if it cannot be burned completely. Sample Input 0 3 4 TT.. TT.. .... Sample Output 0 2 Explanation 0 Initially, the fire starts at cell (0, 0). At time unit 1, the fire spreads to cells (0, 1), (1, 0). At time unit 2, the fire spreads to cells (1, 1). After 2 time units, all trees that can be burned have been burned. Sample Input 1 3 4 .... .... .... Sample Output 1 -1 Explanation 1 There are no trees to burn, hence it is impossible to burn down a forest. Therefore, the output is -1. Sample Input 2 3 3 TTT T.T TTT Sample Output 2 4 Explanation 2 Initially, the fire starts at cell (0, 0). At time unit 1, the fire spreads to cells (0, 1), (1, 0). At time unit 2, the fire spreads to cells (0, 2), (1, 1), (2, 0). At time unit 3, the fire spreads to cells (1, 2), (2, 1). At time unit 4, the fire spreads to cell (2, 2). After 4 time units, all trees are burned.","solution":"from collections import deque def burn_forest(forest): n = len(forest) m = len(forest[0]) # Checking if the forest has only empty cells if all(forest[i][j] == \'.\' for i in range(n) for j in range(m)): return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) visited = set([(0, 0)]) while queue: x, y, time = queue.popleft() # Spread the fire to all four directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and forest[nx][ny] == \'T\': visited.add((nx, ny)) queue.append((nx, ny, time + 1)) # Check if all trees were burned for i in range(n): for j in range(m): if forest[i][j] == \'T\' and (i, j) not in visited: return -1 return time if queue else time"},{"question":"In a distant galaxy, there is a civilization that uses special gadgets to perform their daily tasks. One of these gadgets is a unique calculator that can only add or multiply two numbers. You have obtained one of these calculators and need to solve a problem using it. You are given an integer array `arr` of size `n`. Your task is to calculate the minimum possible value you can achieve by performing operations on this array using the unique calculator. The allowed operations are as follows: 1. Add two elements from the array (a + b) and replace one of them with the result. 2. Multiply two elements from the array (a * b) and replace one of them with the result. These operations can be performed any number of times, and the goal is to minimize the array down to a single element which will be the final result. Input The first line of the input contains an integer `n` (2 ≤ n ≤ 1000), the number of elements in the array. The second line contains `n` integers `arr1, arr2, ..., arrn` (1 ≤ arri ≤ 10^4) representing the elements of the array. Output Print a single integer — the minimum possible value you can achieve after performing the operations. Examples Input 5 1 2 3 4 5 Output 1 Input 3 10 10 10 Output 30 Explanation For the first example, since one of the numbers is already 1, any operations will keep one element as the minimum value possible which is 1. For the second example, one optimal way to achieve the minimum value is to perform additions: 1. 10 + 10 = 20 -> array becomes [20, 10] 2. 20 + 10 = 30 -> array becomes [30] Final result is 30.","solution":"def minimize_array(arr): Given an array of numbers, perform addition and multiplication operations to minimize the array to a single element and return the minimum value. Args: arr (list of int): The input array of integers. Returns: int: The minimum possible value after performing the operations. # If the array contains a 1, the minimum value will be 1 if 1 in arr: return 1 # Otherwise, perform only addition operations to minimize the final value return sum(arr)"},{"question":"Jupiter has a list of n integers, and wants to perform q operations on this list. The operations are of two types: 1. Given two integers l and r (1 ≤ l ≤ r ≤ n), find the sum of all the integers in the sublist from index l to index r (inclusive). 2. Given an integer k (1 ≤ k ≤ n) and an integer x, update the k-th integer in the list to x. As Jupiter is busy with other tasks, help them complete all the requested operations efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). The next q lines describe the operations and are in one of the following two formats: - \\"1 l r\\" (1 ≤ l ≤ r ≤ n), representing a sublist sum query. - \\"2 k x\\" (1 ≤ k ≤ n, 1 ≤ x ≤ 10^9), representing an update operation. Output For each sublist sum query, print the sum of the integers in that sublist. Example Input 5 4 1 2 3 4 5 1 2 4 2 3 10 1 2 4 1 1 5 Output 9 16 22 Explanation 1. For the first query, the sum of the sublist from indices 2 to 4 is 2 + 3 + 4 = 9. 2. For the second operation, the list is updated to [1, 2, 10, 4, 5]. 3. For the third query, the sum of the sublist from indices 2 to 4 is 2 + 10 + 4 = 16. 4. For the fourth query, the sum of the sublist from indices 1 to 5 is 1 + 2 + 10 + 4 + 5 = 22.","solution":"class JupiterOperations: def __init__(self, n, array): self.n = n self.array = array self.prefix_sums = self._build_prefix_sums(array) def _build_prefix_sums(self, array): prefix_sums = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] return prefix_sums def update(self, k, x): old_value = self.array[k - 1] self.array[k - 1] = x for i in range(k, self.n + 1): self.prefix_sums[i] += x - old_value def range_sum(self, l, r): return self.prefix_sums[r] - self.prefix_sums[l - 1] def process_operations(n, q, array, operations): jupiter = JupiterOperations(n, array) results = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": l, r = int(op[1]), int(op[2]) results.append(jupiter.range_sum(l, r)) elif op[0] == \\"2\\": k, x = int(op[1]), int(op[2]) jupiter.update(k, x) return results"},{"question":"Maria has recently become interested in cryptography and wants to learn about some basic encryption techniques. She is particularly interested in the Caesar Cipher, where each letter in the plaintext is shifted a certain number of places down the alphabet. The shifts wrap around the end of the alphabet back to the beginning. For instance, with a shift of 3, \'A\' would be encrypted to \'D\', and \'Z\' would wrap around to become \'C\'. Maria wants to write a program that can encrypt any given text using the Caesar Cipher technique. Can you help her by writing this program? -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contain two elements: - An integer S which represents the shift amount. - A string text which represents the text to be encrypted. -----Output:----- For each test case, output the encrypted text on a new line. -----Constraints----- - 1 leq T leq 100 - 1 leq S leq 25 - 1 leq text length leq 1000 - The text will only contain uppercase English letters. -----Sample Input:----- 2 3 HELLO 7 WORLD -----Sample Output:----- KHOOR DVYSK","solution":"def caesar_cipher(shift, text): encrypted_text = [] for char in text: if \'A\' <= char <= \'Z\': shifted_char = chr(((ord(char) - ord(\'A\') + shift) % 26) + ord(\'A\')) encrypted_text.append(shifted_char) return \'\'.join(encrypted_text) def process_encryption_cases(test_cases): results = [] for shift, text in test_cases: results.append(caesar_cipher(shift, text)) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): shift, text = lines[i].split() shift = int(shift) test_cases.append((shift, text)) results = process_encryption_cases(test_cases) for result in results: print(result)"},{"question":"Bilbo is on a quest to find the hidden treasure which is guarded by a linguistic puzzle. The puzzle goes as follows: Given a string s consisting of lowercase letters, compute a transformation on this string to find its \\"signature\\". The signature of a string is defined by the concatenation of sorted substrings, where each substring consists of consecutive characters that appeared more than once in s. Additionally, the substrings should appear in the order they originally appeared in s. Help Bilbo solve the puzzle by writing a program to find the signature of a given string. Input - A single line containing the string s (1 leq |s| leq 10^5) Output - A single line containing the signature of the string. If there are no characters that appear more than once, output an empty string. Examples Input ``` abbccc ``` Output ``` bbccc ``` Input ``` apple ``` Output ``` pp ``` Input ``` abcdef ``` Output ``` ``` Note In the first example, the characters \'b\' and \'c\' appear consecutively more than once. Hence their sorted substrings are appended together to form the signature \\"bbccc\\". In the second example, only the letter \'p\' appears consecutively more than once, so the signature is \\"pp\\". In the third example, no character appears more than once, so the signature is an empty string.","solution":"def find_signature(s): Returns the signature of the string as defined. The signature is formed by concatenating sorted substrings of consecutive characters that appear more than once in the string \'s\'. res = [] n = len(s) i = 0 while i < n: char_count = 1 while i + 1 < n and s[i] == s[i + 1]: char_count += 1 i += 1 if char_count > 1: res.append(s[i] * char_count) i += 1 return \'\'.join(res)"},{"question":"A string is called a happy string if it does not have any two consecutive characters that are the same. Given a string `s`, we can select any character and replace each occurrence of that character with any other character from `a` to `z` inclusive. Your task is to determine the minimum number of replacements needed to convert the given string into a happy string. Example: Input: s = \\"aaabbc\\" Output: 2 Explanation: Replace one \'a\' with \'d\' and one \'b\' with \'e\'. The resulting string will be \\"adabec\\", which is a happy string. Notes: - The string `s` consists of lowercase English letters only. - 1 <= s.length <= 1000","solution":"def min_replacements_to_happy_string(s): Returns the minimum number of replacements needed to convert the given string s into a happy string. n = len(s) if n <= 1: return 0 replacements = 0 s = list(s) for i in range(1, n): if s[i] == s[i-1]: replacements += 1 for ch in \'abcdefghijklmnopqrstuvwxyz\': if ch != s[i-1] and (i + 1 >= n or ch != s[i + 1]): s[i] = ch break return replacements"},{"question":"In a gaming application, a player collects coins in each level they complete. Each level has a fixed number of coins that can be collected, which is indicated by an array. Determine the minimum and maximum number of coins a player can collect given a set of consecutive levels. ------ Input Format ------ - First line contains an integer T, the number of test cases. - The first line of each test case contains an integer N - the number of levels in the game. - The second line of each test case contains N space-separated integers, where each integer denotes the number of coins in that respective level. - The third line of each test case contains two integers L and R (1 ≤ L ≤ R ≤ N) - denoting the range (inclusive) of levels for which we need to find the minimum and maximum number of coins. ------ Output Format ------ For each test case, output a single line containing two integers, the minimum and maximum number of coins that can be collected from levels L to R inclusive. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ coins_in_level ≤ 1000 ------ Sample Input 1 ------ 2 5 5 3 8 6 2 2 4 3 8 1 6 1 3 ------ Sample Output 1 ------ 3 8 1 8 ----- explanation 1 ------ Test Case 1: Levels are [5, 3, 8, 6, 2]. For levels ranging from 2 to 4 (subarray [3, 8, 6]), the minimum number of coins is 3 and the maximum number of coins is 8. Test Case 2: Levels are [8, 1, 6]. For levels ranging from 1 to 3 (subarray [8, 1, 6]), the minimum number of coins is 1 and the maximum number of coins is 8.","solution":"def collect_coins(t, test_cases): result = [] for case in test_cases: n = case[\'n\'] coins_in_levels = case[\'coins_in_levels\'] l, r = case[\'l\'], case[\'r\'] levels_range = coins_in_levels[l-1:r] min_coins = min(levels_range) max_coins = max(levels_range) result.append(f\\"{min_coins} {max_coins}\\") return result # Helper function to parse the input def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) coins_in_levels = list(map(int, lines[index+1].split())) l, r = map(int, lines[index+2].split()) test_cases.append({ \'n\': n, \'coins_in_levels\': coins_in_levels, \'l\': l, \'r\': r }) index += 3 return t, test_cases # Example usage input_str = 2 5 5 3 8 6 2 2 4 3 8 1 6 1 3 t, test_cases = parse_input(input_str) result = collect_coins(t, test_cases) for res in result: print(res)"},{"question":"Given an integer N, determine the maximum number of unique integers you can select from the range [1, N] such that the sum of the selected integers does not exceed S. Constraints * 1 leq N, S leq 10^9 * N and S are integers. Input Input is given from Standard Input in the following format: N S Output Print the maximum number of unique integers you can select such that their sum does not exceed S. Examples Input 10 15 Output 5 Explanation: The integers 1, 2, 3, 4, and 5 can be selected as their sum is 15, which does not exceed S. Input 100 500 Output 31 Explanation: The sum of the first 31 integers is 31 * (31 + 1) / 2 = 496, which does not exceed 500, but the sum of the first 32 integers is 32 * (32 + 1) / 2 = 528, which exceeds 500.","solution":"def max_unique_integers(N, S): Determines the maximum number of unique integers that can be selected from the range [1, N] such that the sum of the selected integers does not exceed S. def sum_of_first_k(k): return k * (k + 1) // 2 low, high = 1, N while low <= high: mid = (low + high) // 2 if sum_of_first_k(mid) <= S: low = mid + 1 else: high = mid - 1 return high"},{"question":"A large e-commerce company needs to simulate a simplified shipping system. In this system, there are a number of shipments each with a certain weight. The company needs to pack these shipments into containers. Each container has a maximum capacity, and the goal is to minimize the number of containers used. Write a program that determines the minimum number of containers required to pack all shipments. Each shipment must be fully accommodated in a single container without splitting, but multiple shipments can be packed into one container as long as the total weight does not exceed the container\'s capacity. Input The first line contains two integers n (1 ≤ n ≤ 105) and C (1 ≤ C ≤ 109) — the number of shipments and the capacity of each container. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ C) representing the weights of the shipments. Output Output the minimum number of containers required to pack all shipments. Examples Input 5 10 2 5 4 7 1 Output 2 Input 3 15 10 5 10 Output 2 Note In the first example, the weights of the shipments are [2, 5, 4, 7, 1]. One optimal packing could be into two containers: one container with weights [2, 5, 1] totaling 8, and the other with weight [7+4 = 11]. Therefore, two containers are used. In the second example, the weights of the shipments are [10, 5, 10]. One optimal packing would be putting the shipments of 10 and 5 in one container (total weight = 15), and the last shipment of 10 in another container. Therefore, two containers are used.","solution":"def min_containers(n, C, weights): Calculate the minimum number of containers required to pack all shipments. Args: n : int : number of shipments C : int : capacity of each container weights : list of ints : weights of the shipments Returns: int : minimum number of containers required weights.sort(reverse=True) containers_count = 0 remaining_capacities = [] for weight in weights: placed = False for i in range(len(remaining_capacities)): if remaining_capacities[i] >= weight: remaining_capacities[i] -= weight placed = True break if not placed: containers_count += 1 remaining_capacities.append(C - weight) return containers_count"},{"question":"A coding arena is hosting a competition. One of the challenges requires participants to identify any two numbers from an array such that their sum equals a target number. If multiple pairs are possible, return any one of them. If no such pair exists, return -1. Can you help solve this challenge? Example 1: Input: N = 5 arr[] = {2, 7, 11, 15} target = 9 Output: {2, 7} Explanation: 2 and 7 sum up to 9. Example 2: Input: N = 4 arr[] = {1, 2, 3, 4} target = 8 Output: -1 Explanation: There is no pair in the array which sums up to 8. Your Task: You don\'t need to read input or print anything. Complete the function pairWithSum() that takes integer N, array arr[], and target as input parameters and return the pair of numbers as a tuple, or -1 if there is no such pair. Expected time complexity: O(N) Expected space complexity: O(N) Constraints: 1 <= N <= 10^5 -10^6 <= arr[i] <= 10^6 -10^6 <= target <= 10^6","solution":"def pairWithSum(N, arr, target): Given an array of integers and a target number, finds two numbers in the array that sum up to the target. :param N: int - Number of elements in the array :param arr: list - List of integers :param target: int - The target sum :return: tuple - A tuple containing the pair of numbers or -1 if no such pair exists seen = {} for num in arr: complement = target - num if complement in seen: return (complement, num) seen[num] = True return -1"},{"question":"You are given an array of integers of length N. You need to find out the maximum sum of contiguous subarrays with a given length of L. * A contiguous subarray of length L of array [a_1, a_2, ..., a_N] is a subarray [a_i, a_{i+1}, ..., a_{i+L-1}] for some 1 <= i <= N-L+1. * The sum of this subarray is the sum of its elements. Write a function `max_sum_subarray(arr, L)` that returns the maximum sum for contiguous subarrays of length L. Constraints: * 1 ≤ N ≤ 10^5 * 1 ≤ L ≤ N * -10^4 ≤ a_i ≤ 10^4 Input The input is given from Standard Input in the following format: N L a_1 a_2 ... a_N Output Print a single integer - the maximum sum of any contiguous subarray of length L. Examples Input 5 2 1 2 3 4 5 Output 9 Input 8 3 -1 -2 3 4 -5 6 7 8 Output 21 Input 5 5 1 -1 1 -1 1 Output 1","solution":"def max_sum_subarray(arr, L): Returns the maximum sum of any contiguous subarray of length L. # Calculate the sum of the first subarray of length L current_sum = sum(arr[:L]) max_sum = current_sum # Iterate through the array starting from the (L+1)th element for i in range(L, len(arr)): # Slide the window: subtract the element that is left behind and add the new element current_sum = current_sum - arr[i - L] + arr[i] # Update max_sum if needed if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array of integers, determine the length of the longest subsequence (non-contiguous) such that the sum of its elements is even. A subsequence is a sequence derived by deleting some or no elements from the array without changing the order of the remaining elements. Input Format: The first line contains an integer, N, representing the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. Output Format: Print the length of the longest subsequence whose sum is even. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 Sample Input: 6 1 2 3 4 5 6 Sample Output: 5 Explanation: The longest subsequence whose sum is even can be [2, 4, 1, 3, 6]. The sum of this subsequence is 16, which is even. The length of this subsequence is 5.","solution":"def longest_even_sum_subsequence(arr): Returns the length of the longest subsequence whose sum is even. total_sum = sum(arr) # If the total sum is already even, return the length of the whole array if total_sum % 2 == 0: return len(arr) # If the total sum is odd, find the smallest odd number in the array to remove min_odd = float(\'inf\') for num in arr: if num % 2 != 0: min_odd = min(min_odd, num) # If there is no odd number, the array is full of even numbers and sum will be even already if min_odd == float(\'inf\'): return len(arr) # Calculate the new length if we remove one of the smallest odd number return len(arr) - 1"},{"question":"Mark and Lucy are playing a game where they need to transform a given string into a new string by reversing substrings. Mark challenges Lucy to accomplish this with the least number of reversals, and Lucy wants to minimize the number of such operations. More formally, given two strings, `a` and `b`, each consisting of lowercase English letters, determine the minimum number of substring reversals required to transform string `a` into string `b`. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 2000) — the length of the strings. The second line contains the string `a` of length `n`. The third line contains the string `b` of length `n`. -----Output----- In the first line, print the minimum number of reversals required to transform string `a` into string `b`. In the second line, print the total number of operations performed to achieve the transformation. In the next lines, print each operation in the form of two integers `i` and `j` (1 ≤ i ≤ j ≤ n), which mean the substring `a[i-1..j-1]` is reversed. It is guaranteed that the solution exists. -----Examples----- Input 5 abcde edcba Output 1 1 1 5 Input 6 abcdef badcfe Output 3 3 1 2 3 4 5 6 -----Note----- In the first sample test, you can reverse the entire string `abcde` to get `edcba` in one operation. In the second sample test, you need three operations: - Reverse the substring from position 1 to 2 (`a` becomes `ba`, resulting in `bacdef`) - Reverse the substring from position 3 to 4 (`cd` becomes `dc`, resulting in `badcef`) - Reverse the substring from position 5 to 6 (`ef` becomes `fe`, resulting in `badcfe`)","solution":"def min_reversals(n, a, b): operations = [] def reverse_substring(a, start, end): return a[:start] + a[start:end][::-1] + a[end:] i = 0 while i < n: if a[i] != b[i]: j = i + 1 while j < n and a[j] != b[i]: j += 1 if j == n: raise ValueError(\\"Solution does not exist\\") a = reverse_substring(a, i, j + 1) operations.append((i + 1, j + 1)) i += 1 print(len(operations)) for op in operations: print(op[0], op[1]) return len(operations), operations # For running outside with input directly if __name__ == \\"__main__\\": n = int(input().strip()) a = input().strip() b = input().strip() min_reversals(n, a, b)"},{"question":"Kate received a message from Vasya that contains a jumbled sequence of digits. Also included is an integer k, which represents the number of digits in the original sequence. It is known that some of the digits in the jumbled sequence may be substituted with placeholders. Your task is to determine the original sequence such that the sum of its digits is maximized. If there are multiple sequences with the same maximum digit sum, return the lexicographically smallest sequence. -----Input----- The first line contains an integer k (1 ≤ k ≤ 100) representing the number of digits in the original sequence. The second line contains a string of length k which includes digits (0-9) and/or placeholders (\'?\'). -----Output----- Return the original sequence such that the sum of its digits is maximized. In case of tie, return the lexicographically smallest sequence. -----Examples----- Input 3 1?5 Output 195 Input 5 ??5?? Output 99599","solution":"def maximize_sequence(k, sequence): This function takes two parameters: k: an integer representing the number of digits in the original sequence sequence: a string of length k which includes digits (0-9) and/or placeholders (\'?\') The function returns the sequence such that the sum of its digits is maximized. In case of tie, it returns the lexicographically smallest sequence. result = [] for char in sequence: if char == \'?\': result.append(\'9\') else: result.append(char) return \'\'.join(result)"},{"question":"Given a series of transactions from an online store, determine if the store made a profit or incurred a loss at the end of the day. Each transaction is either a \\"sale\\" or a \\"return\\". A sale increases the revenue by the transaction amount, while a return decreases the revenue by the transaction amount. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case starts with a line containing a single integer N, the number of transactions. - Then, N lines follow, each containing a string S (\\"sale\\" or \\"return\\") followed by an integer A (the amount). ------ Output Format ------ For each test case, output on a new line \\"Profit\\" if the total revenue is positive, \\"Loss\\" if the total revenue is negative, or \\"No Profit No Loss\\" if the total revenue is zero. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ A ≤ 1000 ------ Sample Input 1 ------ 2 3 sale 100 sale 150 return 50 2 sale 200 return 200 ------ Sample Output 1 ------ Profit No Profit No Loss ------ Explanation 1 ------ Test case 1: The transactions are 100 (sale), 150 (sale), and 50 (return). The total revenue is 100 + 150 - 50 = 200, which is positive. Hence the answer is \\"Profit\\". Test case 2: The transactions are 200 (sale) and 200 (return). The total revenue is 200 - 200 = 0, which results in \\"No Profit No Loss\\".","solution":"def determine_profit_or_loss(transactions): total_revenue = 0 for transaction in transactions: action, amount = transaction.split() amount = int(amount) if action == \\"sale\\": total_revenue += amount elif action == \\"return\\": total_revenue -= amount if total_revenue > 0: return \\"Profit\\" elif total_revenue < 0: return \\"Loss\\" else: return \\"No Profit No Loss\\" def process_transactions(test_cases): results = [] for transactions in test_cases: results.append(determine_profit_or_loss(transactions)) return results"},{"question":"Your task is to implement a warehouse management system that can track inventory adjustments. Write a program which reads the initial stock quantity for each item, and then processes a series of adjustments (additions and subtractions) to the stock quantities. The program should print the final stock quantities for each item. Constraints * 1 ≤ number of items ≤ 100 * The stock quantity for any item can be between 0 and 1000 inclusive * The adjustment value for any item can be between -500 and 500 inclusive * The total number of adjustments can be up to 1000 Input In the first line, a single integer n is given, the number of items. In the second line, n integers separated by spaces are given, representing the initial stock quantities for each item. The third line contains a single integer m, the number of adjustments. The next m lines each contain two integers separated by space characters: the first integer is the item index (1-based) and the second integer is the adjustment value. Output Print the final stock quantities for each item on a single line separated by spaces. Example Input 5 100 150 200 250 300 4 1 -20 3 50 5 -100 2 25 Output 80 175 250 250 200","solution":"def process_adjustments(n, initial_stocks, m, adjustments): Process stock quantity adjustments and return the final stock quantities. Parameters: n (int): Number of items. initial_stocks (list of int): Initial stock quantities for each item. m (int): Number of adjustments. adjustments (list of tuple of int): Each tuple contains the item index (1-based) and the adjustment value. Returns: list of int: Final stock quantities for each item. final_stocks = initial_stocks[:] for index, adjustment in adjustments: final_stocks[index - 1] += adjustment return final_stocks"},{"question":"Aditya is a software developer and he\'s working on an application that processes data packets sent over a network. Each data packet is characterized by its size in bytes and a priority score. To optimize the network bandwidth, Aditya needs to ensure that high priority packets are sent first, and within each priority level, smaller packets should be sent earlier than larger ones. Implement a function that takes a list of data packets, each described by a tuple of size (in bytes) and priority score, and returns a list of packets sorted based on the aforementioned criteria. Specifically, the packets should be sorted primarily by priority score in descending order, and for packets with the same priority score, they should be sorted by size in ascending order. -----Input----- The input consists of an integer n (1 ≤ n ≤ 100), the number of data packets, followed by n pairs of integers. Each pair describes a packet where the first integer is the size (1 ≤ size ≤ 1000) and the second integer is the priority score (1 ≤ priority score ≤ 100). -----Output----- Output the list of packets sorted first by priority score in descending order, and by size in ascending order within each priority. -----Example----- Input 4 500 2 300 1 200 3 400 2 Output [(200, 3), (400, 2), (500, 2), (300, 1)] Input 3 100 2 200 5 300 5 Output [(200, 5), (300, 5), (100, 2)]","solution":"def sort_packets(packets): Sorts the packets primarily by priority score in descending order, and by size in ascending order within each priority level. :param packets: List[Tuple[int, int]] where each tuple is (size, priority) :return: Sorted list of packets based on given criteria # Sort the packets by (-priority, size) to get desired ordering return sorted(packets, key=lambda x: (-x[1], x[0]))"},{"question":"You have an array of integers which can contain both positive and negative numbers. Your task is to find and print the maximum sum of any contiguous subarray within the given array. For example: array = [-2, 1, -3, 4, -1, 2, 1, -5, 4] the maximum sum of any contiguous subarray would be 4 + (-1) + 2 + 1 = 6 Input: A single line containing a list of space-separated integers. Output: Print out the maximum sum of any contiguous subarray within the given array. Constraints: -10^4 ≤ array[i] ≤ 10^4 1 ≤ length of array ≤ 10^5 Hint: Use Kadane’s Algorithm for an efficient solution. SAMPLE INPUT -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray using Kadane\'s Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given two strings, S and T, both consisting of lowercase English letters. Your task is to determine the number of distinct subsequences of S that are equal to T. Recall that a subsequence of a string is obtained by deleting zero or more characters from the string, without changing the order of the remaining characters. Constraints: * 1 ≦ |S|, |T| ≦ 1000, where |S| and |T| represent the lengths of strings S and T respectively. Input: The input is given from Standard Input in the following format: S T Output: Print the number of distinct subsequences of S that are equal to T, modulo 10^9 + 7. Examples: Input: babgbag bag Output: 5 Input: rabbbit rabbit Output: 3 Input: abcdef f Output: 1 Input: abcde fghi Output: 0","solution":"def num_distinct(S, T): MOD = 10**9 + 7 len_s, len_t = len(S), len(T) # Create a 2D DP array with dimensions (len_s+1) x (len_t+1) # dp[i][j] will store the number of distinct subsequences of S[:i] that form T[:j] dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] # There\'s exactly one way to match an empty T: by deleting all characters of S for i in range(len_s + 1): dp[i][0] = 1 for i in range(1, len_s + 1): for j in range(1, len_t + 1): # If the current characters of S and T match if S[i - 1] == T[j - 1]: dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % MOD else: dp[i][j] = dp[i - 1][j] % MOD return dp[len_s][len_t]"},{"question":"S : Short beams story Pikuro is playing a video game where one of the challenges is to navigate a character through a virtual world by stepping on beams that are placed horizontally and vertically across a grid. The character can only step on a beam if it connects to the current beam the character is on and does not go across multiple beams. Each beam spans from one coordinate to another either horizontally or vertically, represented in a coordinate system. Pikuro wants to find the shortest sequence of vertical and horizontal beams from the starting position to the target position, if possible. problem Given a starting position, target position, and a list of beams, determine the minimum number of beams Pikuro needs to step on to reach the target position from the starting position. Each beam is described by its start and end coordinates. Input format The input format is as follows: ``` x_s y_s x_t y_t N x1_1 y1_1 x1_2 y1_2 ... xN_1 yN_1 xN_2 yN_2 ``` - The first line contains four integers: x_s, y_s (starting coordinates) and x_t, y_t (target coordinates). - The second line contains an integer N, the number of beams. - The next N lines each contain four integers x_i_1, y_i_1, x_i_2, y_i_2 describing a beam from (x_i_1, y_i_1) to (x_i_2, y_i_2). constraints * 1 ≤ N ≤ 100,000 * -10^9 ≤ x_s, y_s, x_t, y_t, x_i_1, y_i_1, x_i_2, y_i_2 ≤ 10^9 * (x_i_1, y_i_1) is always either horizontally or vertically aligned with (x_i_2, y_i_2). output Print the minimum number of beams needed to reach the target position from the starting position. If it\'s not possible, print `-1`. Input example 1 ``` 0 0 4 5 5 0 0 0 4 0 4 4 4 4 4 4 5 4 5 8 5 8 5 8 10 ``` Output example 1 ``` 3 ``` Input example 2 ``` 0 0 3 3 3 0 0 0 1 0 1 1 1 1 1 1 2 ``` Output example 2 ``` -1 ```","solution":"from collections import deque, defaultdict def min_beams(x_s, y_s, x_t, y_t, beams): # A function to check if two beams are connected directly def is_connected(beam1, beam2): x1_1, y1_1, x1_2, y1_2 = beam1 x2_1, y2_1, x2_2, y2_2 = beam2 return (x1_1 == x2_1 and (y1_1 <= y2_1 <= y1_2 or y1_1 <= y2_2 <= y1_2 or y2_1 <= y1_1 <= y2_2 or y2_1 <= y1_2 <= y2_2)) or (y1_1 == y2_1 and (x1_1 <= x2_1 <= x1_2 or x1_1 <= x2_2 <= x1_2 or x2_1 <= x1_1 <= x2_2 or x2_1 <= x1_2 <= x2_2)) N = len(beams) # Create adjacency list graph = defaultdict(list) for i in range(N): for j in range(N): if i != j and is_connected(beams[i], beams[j]): graph[i].append(j) # BFS for the shortest path queue = deque() visited = set() for i in range(N): x1, y1, x2, y2 = beams[i] if (x1 == x_s and y1 == y_s) or (x2 == x_s and y2 == y_s): queue.append((i, 1)) visited.add(i) target_beams = set() for i in range(N): x1, y1, x2, y2 = beams[i] if (x1 == x_t and y1 == y_t) or (x2 == x_t and y2 == y_t): target_beams.add(i) while queue: current, steps = queue.popleft() if current in target_beams: return steps for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return -1 # Example usage: # beams = [(0, 0, 0, 4), (0, 4, 4, 4), (4, 4, 4, 5), (4, 5, 8, 5), (8, 5, 8, 10)] # print(min_beams(0, 0, 4, 5, beams)) # Output: 3"},{"question":"You are given a grid of size N x M. Each cell in the grid can either be walkable or contain an obstacle. Your starting position is the top-left cell (1,1) and your goal is to reach the bottom-right cell (N,M) by moving only right or down at each step. However, you have a special ability to remove K obstacles from the grid before starting your journey. Your task is to remove at most K obstacles in such a way that you can reach the goal if possible. Determine if it is possible to reach the goal after removing obstacles, and if so, return the minimum number of obstacles you need to remove. Constraints: - 1 ≤ N, M ≤ 100 - 0 ≤ K ≤ 500 - Grid cells contain either \'.\' (walkable) or \'#\' (obstacle) Input format: - The first line contains three integers N, M, and K. - Each of the next N lines contains a string of length M describing the grid. Output format: - Output a single integer denoting the minimum number of obstacles that need to be removed to reach the goal if possible. If it\'s not possible to reach the goal even after removing K obstacles, output -1. SAMPLE INPUT 3 3 2 .#. # .#. SAMPLE OUTPUT 2 Explanation By removing the obstacles at positions (1,2) and (2,2), the grid becomes: . . . . # . . . . Now, it is possible to reach the goal (3,3) from the start (1,1) by moving right, down, down, right.","solution":"from collections import deque def min_obstacles_to_remove(N, M, K, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 def bfs(min_removal): queue = deque([(0, 0, min_removal)]) visited = {(0, 0, min_removal): 0} while queue: x, y, remaining_removals = queue.popleft() if x == N-1 and y == M-1: return True for dx, dy in [(0, 1), (1, 0)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: next_removal = remaining_removals - 1 if grid[nx][ny] == \'#\' else remaining_removals if next_removal >= 0 and (nx, ny, next_removal) not in visited: visited[(nx, ny, next_removal)] = visited[(x, y, remaining_removals)] + 1 queue.append((nx, ny, next_removal)) return False lo, hi = 0, K + 1 result = -1 while lo < hi: mid = (lo + hi) // 2 if bfs(mid): result = mid hi = mid else: lo = mid + 1 return result # Input N = 3 M = 3 K = 2 grid = [ \\".#.\\", \\"#\\", \\".#.\\" ] print(min_obstacles_to_remove(N, M, K, grid)) # Sample usage"},{"question":"Erika has a string s consisting of lowercase English letters. She wants to perform exactly one of the following operations on this string: 1. Choose any single character and replace it with any other lowercase English letter. 2. Choose any subsegment of this string and reverse it. Erika wants to maximize the length of the longest substring of identical characters after performing exactly one of these operations. Determine the maximum possible length of the longest substring of identical characters that Erika can achieve. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 le t le 50) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2000) — the length of the string s. The second line of each test case contains the string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 2000. -----Output----- For each test case, print a single integer — the maximum length of the longest substring of identical characters that Erika can achieve by performing exactly one operation. -----Examples----- Input 3 7 aabbcca 1 z 5 abcde Output 3 1 2 -----Note----- In the first test case, Erika can choose to reverse the subsegment from index 2 to 4, transforming the string from \\"aabbcca\\" to \\"aaabcca\\". This gives a maximum length of a substring of \'a\' with length 3. In the second test case, no matter what operation Erika performs, she will only have a single character string. Thus, the longest substring length remains 1. In the third test case, Erika can choose to replace the character at index 2 (\'b\') with \'a\', transforming the string from \\"abcde\\" to \\"aacde\\". This gives a maximum length of a substring of \'a\' with length 2.","solution":"def max_length_of_identical_substring(t, cases): results = [] for n, s in cases: max_len = 1 current_len = 1 # Calculate the max substring length in the original string for i in range(1, n): if s[i] == s[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) # We can either swap one character or reverse any substring # Therefore, the maximum length we can get will be max(max_len, original max_len + 1) results.append(min(max_len + 1, n)) return results"},{"question":"In an imaginary land, people follow a unique numbering system for their dates. Rather than months and days, they denote each day by a number from 1 to 365. They celebrate their festivities based on these unique dates. You\'ve been assigned to create a program that helps track these festive days. You are given a list of pairs where each pair consists of two integers `a` and `b`. - `a`, which is the start day of the festivity. - `b`, which is the end day of the festivity. Your task is to determine if the given festivities overlap. Two festivities overlap if there exists at least one day that is common between them. Input The input will consist of a list of pairs. Each pair consists of two integers `a` and `b`, where `1 <= a <= b <= 365`. The list will contain between 1 and 100 pairs, inclusive. Output Output \\"Yes\\" if there is an overlap between any pairs of festivities. Otherwise, output \\"No\\". Examples Input (1, 5) (6, 10) (8, 15) Output Yes Input (12, 19) (20, 25) (26, 30) Output No Note In the first example, the third festivity (8, 15) overlaps with the second festivity (6, 10) from day 8 to 10. Hence, the output is \\"Yes\\". In the second example, there are no overlapping dates among the festivities, so the output is \\"No\\".","solution":"def are_festivities_overlapping(pairs): Given a list of pairs where each pair consists of two integers a and b, determines if there is any overlap in the festivities. if not pairs: return \\"No\\" # Sort the pairs based on the start day pairs.sort(key=lambda x: x[0]) for i in range(len(pairs) - 1): # Compare the end day of the current festivity with the start day of the next festivity if pairs[i][1] >= pairs[i + 1][0]: return \\"Yes\\" return \\"No\\""},{"question":"Given an integer array `nums`, you need to find the length of the longest continuous subsequence such that every element in the subsequence is unique. A subsequence is derived from another array by deleting some elements (including possibly zero) from the original array, without changing the order of the remaining elements. **Input** - The input will consist of multiple test cases. - The first line of the input will contain an integer `t` (1 le t le 100) – the number of test cases. - Each test case contains an integer `n` (1 le n le 10^5) – the number of elements in the array. - This is followed by `n` integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) which represent the array elements. **Output** For each test case, output a single integer – the length of the longest continuous subsequence with all unique elements. **Example** Input: ``` 2 5 1 2 2 3 4 7 4 3 5 6 5 6 3 ``` Output: ``` 3 4 ``` **Note** In the first example: The longest subsequence with all unique elements is `[2, 3, 4]` with length 3. In the second example: The longest subsequence with all unique elements is `[4, 3, 5, 6]` with length 4.","solution":"def longest_unique_subseq_length(n, arr): Returns the length of the longest continuous subsequence with all unique elements. max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): results = [] for (n, arr) in test_cases: results.append(longest_unique_subseq_length(n, arr)) return results"},{"question":"You are given a rectangular grid of cells with dimensions N x M. Each cell can either be empty, contain an obstacle, or contain a start or destination position. The goal is to navigate from the start position to the destination position while avoiding obstacles. You can move up, down, left, or right, and each movement costs 1 unit. Implement a function to find the shortest path from the start to the destination and return the length of the path. If no such path exists, return -1. The input grid is provided as a list of strings, where each character in a string represents a cell. Use the following characters to identify cells: - \'S\': The starting position (exactly one in the grid). - \'D\': The destination position (exactly one in the grid). - \'.\': An empty cell. - \'#\': A cell with an obstacle. Function Signature: ```python def shortest_path(grid: List[str]) -> int: ``` Input - A list of strings, where each string represents a row of the grid. 1 ≤ len(grid) ≤ 100 (number of rows) 1 ≤ len(grid[0]) ≤ 100 (number of columns, all rows have the same length) Output - An integer representing the length of the shortest path from the start to the destination, or -1 if no such path exists. Example: ``` Input: [ \\"S...\\", \\".#..\\", \\".#D.\\" ] Output: 4 ``` Explanation: The shortest path from \'S\' to \'D\' is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which has a length of 4.","solution":"from collections import deque from typing import List, Tuple def shortest_path(grid: List[str]) -> int: def get_neighbors(x: int, y: int, n: int, m: int) -> List[Tuple[int, int]]: neighbors = [] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\': neighbors.append((nx, ny)) return neighbors n = len(grid) m = len(grid[0]) start = None destination = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) if not start or not destination: return -1 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == destination: return dist for nx, ny in get_neighbors(x, y, n, m): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an array of integers `arr` of size `n` and a series of `q` queries. Each query is of one of the following types: 1. `1 x y` — Update the element at index `x` to `y`. 2. `2 l r` — Find the maximum subarray sum for the subarray from index `l` to `r` (inclusive). A subarray is a contiguous part of the array. The task is to process these queries efficiently. Input: - The first line contains two integers `n` and `q` (1 ≤ `n`, `q` ≤ 100000) — the size of the array and the number of queries. - The second line contains `n` integers representing the initial array, where each integer is in the range of -10^6 to 10^6. - The next `q` lines contain queries in one of the two formats described above. Output: - For each query of the second type, print the maximum subarray sum for the specified subarray on a new line. Example: Input: ``` 5 6 1 -2 3 4 -1 2 1 5 1 2 10 2 1 5 2 2 3 1 4 -5 2 1 5 ``` Output: ``` 5 16 10 6 ``` Explanation: - The first query `2 1 5` asks for the maximum subarray sum of the entire array `[1, -2, 3, 4, -1]`, which is `[3, 4]`. - The second query `1 2 10` updates the second element of the array to `10`. The array becomes `[1, 10, 3, 4, -1]`. - The third query `2 1 5` now evaluates the entire updated array. The maximum subarray sum is `[1, 10, 3, 4]`, which equals `16`. - The fourth query `2 2 3` asks for the maximum subarray sum of the subarray `[10, 3]`, which is the entire subarray since both elements are positive. - The fifth query `1 4 -5` updates the fourth element of the array to `-5`. The array becomes `[1, 10, 3, -5, -1]`. - The final query `2 1 5` now evaluates the entire updated array. The maximum subarray sum is `[1, 10, 3]`, which equals `14`. Note: - Efficiently handling both types of queries is crucial, particularly when dealing with large arrays and a high number of queries. Hence, segment trees or other advanced data structures may be necessary for optimal performance.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) self.build(arr) def build(self, arr): for i in range(self.n): self.tree[self.n + i] = arr[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, l, r): l += self.n r += self.n + 1 max_val = float(\'-inf\') while l < r: if l % 2 == 1: max_val = max(max_val, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 max_val = max(max_val, self.tree[r]) l //= 2 r //= 2 return max_val from typing import List def max_subarray_sum(arr: List[int], l: int, r: int) -> int: max_so_far = float(\'-inf\') max_ending_here = 0 for i in range(l, r + 1): max_ending_here += arr[i] if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far def process_queries(n: int, arr: List[int], queries: List[List[int]]) -> List[int]: results = [] seg_tree = SegmentTree(arr) for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] arr[x] = y seg_tree.update(x, y) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 results.append(max_subarray_sum(arr, l, r)) return results"},{"question":"In a futuristic city, self-driving electric cars are widespread. These cars generate a huge amount of data estimated by the city council to exceed 1 Terabyte per day. To better manage this data, the council has developed a special file system where files are represented as strings. Each file name follows a specific format: it is a string composed of **alphanumeric characters** and **dots** (`.`). The dots serve as delimiters of multiple nested directories or files. The council is interested in analysing unique paths in the file system to prevent redundant data storage and optimize file retrieval. To help them, you need to implement a function that removes all duplicate file paths from an array of strings representing file names. Each string follows these rules: 1. Contains only alphanumeric characters and dots. 2. Is non-empty. 3. Maximum length of each string is 100. 4. There can be up to 10,000 strings. **Task:** Write a function `remove_duplicates()` that takes a list of strings representing file names and returns a new list with all duplicates removed while maintaining the original order. **Function Signature:** ```python def remove_duplicates(files: List[str]) -> List[str]: pass ``` **Input:** - A list of strings, `files` containing file paths. **Output:** - A list of strings with duplicates removed. **Example:** Input: ```python [\\"root.a\\", \\"root.b\\", \\"root.a\\", \\"root.c.d\\", \\"root.c.e\\", \\"root.c.d\\"] ``` Output: ```python [\\"root.a\\", \\"root.b\\", \\"root.c.d\\", \\"root.c.e\\"] ``` **Note:** In the given example, the file paths `\\"root.a\\"` and `\\"root.c.d\\"` appeared more than once in the input list and are only included once in the output while maintaining the original order of their first occurrence.","solution":"from typing import List def remove_duplicates(files: List[str]) -> List[str]: Removes duplicates from the list of file paths while maintaining the original order. :param files: List of file paths as strings. :return: List of unique file paths in the order of their first occurrence. seen = set() unique_files = [] for file in files: if file not in seen: seen.add(file) unique_files.append(file) return unique_files"},{"question":"# Task You have been given a list of numbers. Your task is to find the largest possible sum of any segment(s) of the array such that no two selected segments are adjacent. A \'segment\' is any contiguous part of the array. # Example For: ``` arr = [3, 2, 5, 10, 7] ``` Possible ways to choose segments (with their respective sums): ``` [3] + [5] + [7] = 15 [3, 2] + [10] = 15 [3] + [10] = 13 ... ``` The largest possible sum would be `15`. # Input/Output - `[input]` integer array `arr` the array of integers of length 1 <= len(arr) <= 100. - `[output]` an integer the largest possible sum of non-adjacent segments.","solution":"def largest_non_adjacent_sum(arr): Returns the largest possible sum of non-adjacent segments in the array. if not arr: return 0 n = len(arr) if n == 1: return arr[0] # Dynamic programming array to store the maximum sum up to each index dp = [0] * n # Base cases dp[0] = max(0, arr[0]) if n > 1: dp[1] = max(dp[0], arr[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1]"},{"question":"Palindrome Subsequence Length Problem Statement In literature, a palindrome is a sequence of characters that reads the same backward as forward. Given a string `s`, your task is to determine the length of the longest subsequence of `s` that is a palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function that computes the length of the longest palindromic subsequence in the given string. Input The input contains a single string `s` (1 ≤ |s| ≤ 1000), which consists only of lowercase English letters. Output Output a single integer, the length of the longest palindromic subsequence. Sample Input 1 bbabcbcab Sample Output 1 7 Explanation for Sample Output 1 The longest palindromic subsequence in the string \\"bbabcbcab\\" is \\"babcbab\\" which is of length 7. Sample Input 2 abcd Sample Output 2 1 Explanation for Sample Output 2 The longest palindromic subsequence in the string \\"abcd\\" can be any single character since no multi-character palindromic subsequence exists. Sample Input 3 aaaabaaa Sample Output 3 7 Explanation for Sample Output 3 The entire string \\"aaaabaaa\\" is a palindrome and thus the longest subsequence that is also a palindrome is the entire string itself with a length of 7.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] # Initialize the dp table for i in range(n): dp[i][i] = 1 # Fill the dp table for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"You are given an array of integers. Your task is to query the array for the number of elements greater than a given value for multiple queries. The array will not change during the queries. ------ Input Format ------ - The first line of input contains two integers N and Q, the size of the array and the number of queries. - The second line contains N space-separated integers representing the array. - The next Q lines each contain a single integer x, representing the value to query. ------ Output Format ------ - For each query, output a single integer – the number of elements in the array that are strictly greater than x. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ array[i], x ≤ 10^9 ------ Sample Input 1 ------ 5 3 1 3 5 7 9 2 4 8 ------ Sample Output 1 ------ 4 3 1 ------ Explanation 1 ------ In the first query, the elements greater than 2 are 3, 5, 7, and 9, so the answer is 4. For the second query, the elements greater than 4 are 5, 7, and 9, so the answer is 3. For the third query, only 9 is greater than 8, so the answer is 1.","solution":"def count_elements_greater_than(arr, queries): For each query, count the number of elements in arr that are greater than the query value. Parameters: arr (list of int): The list of integers. queries (list of int): The list of query integers. Returns: list of int: A list of counts for each query. arr.sort() result = [] for x in queries: left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] <= x: left = mid + 1 else: right = mid result.append(len(arr) - left) return result"},{"question":"You have been hired to design a reservation system for a popular restaurant. The restaurant has an online booking system where customers can make reservations. Each reservation is defined by a start time and an end time, represented as integers. The restaurant is very busy, and customers often make reservations that overlap with each other. Write a function that takes a list of reservations and returns the maximum number of reservations that can be accommodated without overlapping. Input Format: The first line of input contains an integer n, the number of reservations. Each of the next n lines contains two space-separated integers, starti and endi, representing the start and end times of a reservation. Output Format: Print the maximum number of non-overlapping reservations. Constraints: 1 ≤ n ≤ 100000 1 ≤ starti < endi ≤ 1000000 SAMPLE INPUT 5 1 3 2 5 4 6 7 8 5 9 SAMPLE OUTPUT 3 Explanation: The reservations (1,3), (4,6), and (7,8) can be accommodated without overlap, thus maximizing the number of non-overlapping reservations.","solution":"def max_non_overlapping_reservations(n, reservations): Returns the maximum number of non-overlapping reservations # Sort reservations by end time reservations.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping reservations max_reservations = 0 last_end_time = 0 # Iterate through sorted reservations for start, end in reservations: if start >= last_end_time: max_reservations += 1 last_end_time = end return max_reservations # Example usage # n = 5 # reservations = [(1, 3), (2, 5), (4, 6), (7, 8), (5, 9)] # print(max_non_overlapping_reservations(n, reservations)) # Output: 3"},{"question":"A rectangular grid of size n x m is filled with non-negative integers. You need to find the maximum sum of elements in any sub-rectangle of the grid. A sub-rectangle is defined by choosing two rows r1, r2 (1 ≤ r1 ≤ r2 ≤ n) and two columns c1, c2 (1 ≤ c1 ≤ c2 ≤ m) and summing all the elements in the rectangle defined by these rows and columns. -----Constraints----- - 1 ≤ n, m ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: n m grid[1][1] grid[1][2] ... grid[1][m] grid[2][1] grid[2][2] ... grid[2][m] ... grid[n][1] grid[n][2] ... grid[n][m] -----Output----- Print the maximum sum of elements in any sub-rectangle of the grid. -----Sample Input----- 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 -----Sample Output----- 29 The sub-rectangle with the maximum sum (29) is: 3 8 10 -4 -1 1","solution":"def max_sum_subrectangle(n, m, grid): Function to find the maximum sum of elements in any sub-rectangle of the grid. max_sum = float(\'-inf\') # Iterate over all pairs of rows for r1 in range(n): temp = [0] * m for r2 in range(r1, n): # Update the temp array for the current pair of rows for c in range(m): temp[c] += grid[r2][c] # Find the largest sum subarray in temp current_max = float(\'-inf\') current_sum = 0 for value in temp: current_sum += value if current_sum > current_max: current_max = current_sum if current_sum < 0: current_sum = 0 # Update the global maximum sum if current_max > max_sum: max_sum = current_max return max_sum"},{"question":"Cropper the Farmer is managing a large rectangular field and wants to divide it into smaller square plots for easier cultivation. Each square plot should be as large as possible while ensuring that no land is wasted. Given the dimensions of the rectangular field, determine the side length of the largest possible square plot that can be used to divide the field without any remainder. Input The input consists of a single line containing two space-separated integers W and H (1 ≤ W, H ≤ 10^9), representing the width and height of the field, respectively. Output Print a single integer — the side length of the largest possible square plot that can divide the field without any remainder. Examples Input 15 10 Output 5 Input 9 6 Output 3","solution":"def largest_square_side_length(w, h): Returns the side length of the largest possible square plot that can divide the field with no remainder for given width w and height h. import math return math.gcd(w, h)"},{"question":"You are given two non-negative integers as strings. Write a function to multiply these two numbers and return the product as a string. Note: 1. The input numbers are strings, and their lengths are between 1 and 200. 2. The numbers represented by the input strings are both non-negative and will not contain leading zeros except in the case of the number \\"0\\". 3. You must not use any built-in BigInteger methods or convert the inputs to an integer directly. Example 1: Input: \\"123\\", \\"456\\" Output: \\"56088\\" Explanation: 123 * 456 = 56088 Example 2: Input: \\"2\\", \\"3\\" Output: \\"6\\" Explanation: 2 * 3 = 6","solution":"def multiply(num1, num2): Multiplies two non-negative integers represented as strings and returns the product as a string. if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" len1, len2 = len(num1), len(num2) result = [0] * (len1 + len2) for i in range(len1-1, -1, -1): for j in range(len2-1, -1, -1): product = (ord(num1[i]) - ord(\'0\')) * (ord(num2[j]) - ord(\'0\')) sum_ = product + result[i + j + 1] result[i + j + 1] = sum_ % 10 result[i + j] += sum_ // 10 result_str = \'\'.join(map(str, result)).lstrip(\'0\') return result_str if result_str else \'0\'"},{"question":"In a small town, there is a unique intersection point where N roads meet. The town\'s council wants to build a circular roundabout at this intersection to direct the traffic smoothly from one road to another. The roundabout will have exactly N exit points, each corresponding to one of the roads. To make the traffic flow as smooth as possible, the traffic engineers decided that each car should take the shortest path to its destination. The length of each segment along the roundabout between any two consecutive exits must be unique and distinct from each other. The engineers have a constraint that the total length of all segments combined must not exceed a certain value L. Given the number of roads N and the maximum allowed total length of segments L, determine the lengths of the segments around the roundabout. Constraints: - 3 ≤ N ≤ 100 - 3 ≤ L ≤ 10^6 Input: Input is given from Standard Input in the following format: N L Output: Print a set of the lengths of the segments that meets the objective, in the following format: l_1 l_2 l_3 ... l_N where l_i is the length of the segment between the i-th and (i+1)-th exit point in one direction around the roundabout. Examples Input: 5 15 Output: 1 2 3 4 5 Input: 3 6 Output: 1 2 3","solution":"def roundabout_segments(N, L): Returns a list of length N where each element represents the length of the segment between consecutive exit points in a roundabout, such that the total length does not exceed L and all segments have distinct lengths. # The smallest sum of first N distinct positive integers is (N*(N + 1)) // 2 min_sum = (N * (N + 1)) // 2 if min_sum > L: raise ValueError(\\"Impossible to construct a roundabout with the given constraints\\") # Start with the smallest N distinct positive integers segments = list(range(1, N+1)) current_sum = sum(segments) # Now adjust the segments to meet the total length L # starting from the largest segment, try to increase its length i = N - 1 while current_sum < L: max_add = L - current_sum segments[i] += max_add current_sum += max_add i -= 1 return segments"},{"question":"Rohan has been assigned to write a code that can process a list of words and group the anagrams together. An anagram is a word formed by rearranging the letters of another, such as \\"cat\\" and \\"act\\". Note: The solution should return the groups of anagrams in any order. Input: First line contains an integer N, the number of words. Next N lines contain one word per line. Output: Print groups of anagrams together. Each group should be printed on a new line. Constraints: 1 ≤ N ≤ 1000 1 ≤ length of each word ≤ 100 SAMPLE INPUT: 6 eat tea tan ate nat bat SAMPLE OUTPUT: eat tea ate tan nat bat","solution":"def group_anagrams(words): Group the words that are anagrams of each other. :param words: List of words :return: List of groups of anagrams from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values()) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) words = data[1:N+1] groups = group_anagrams(words) for group in groups: print(\' \'.join(group)) if __name__ == \\"__main__\\": main()"},{"question":"You are a developer working on a new feature for an e-commerce platform. The feature involves tracking user activity on the site to recommend products they might be interested in. For this purpose, you need to analyze search query logs to determine the most common keywords users search for. Given a list of search queries, your task is to identify the k most frequent keywords that users search for. Keywords are case insensitive, meaning \\"Apple\\" and \\"apple\\" should be considered the same keyword. If there are ties in frequency count, return the keywords in lexicographical order. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 100000) representing the number of search queries. - The following n lines contain the search queries, one per line. - The last line contains the integer k (1 ≤ k ≤ n) representing the number of top keywords to return. -----Output----- Output a list of the k most frequent keywords, each on a new line, sorted by their frequency in descending order. If multiple keywords have the same frequency, return them in lexicographical order. -----Examples----- Input 6 apple banana Apple orange Banana Grapefruit 2 Output apple banana Input 7 book Book BOOK shelf Shelf SHELF book 3 Output book shelf","solution":"from collections import Counter def most_frequent_keywords(n, queries, k): Identify the k most frequent case-insensitive keywords from the list of queries. queries_lower = [query.lower() for query in queries] query_counter = Counter(queries_lower) sorted_keywords = sorted(query_counter.items(), key=lambda x: (-x[1], x[0])) return [keyword for keyword, _ in sorted_keywords[:k]] # Example Usage n = 6 queries = [\\"apple\\", \\"banana\\", \\"Apple\\", \\"orange\\", \\"Banana\\", \\"Grapefruit\\"] k = 2 print(most_frequent_keywords(n, queries, k)) # Output: [\'apple\', \'banana\']"},{"question":"Linus loves reading books and has a large collection of them. He recently decided to organize his collection by genre. Each book belongs to one genre and each genre has multiple books. One day, Linus challenged himself with a new task: Given a list of book titles along with their corresponding genres, identify the genre that has the highest number of book titles that start with the same letter. If there\'s a tie between genres, return the genre that comes lexicographically first. Write a function `most_popular_genre_start_letter(books: List[Tuple[str, str]]) -> str` where `books` is a list of tuples; each tuple contains a string (title of the book) followed by a string (genre of the book). -----Input----- The input to the function is a list of tuples where each tuple has two elements: 1. The book title - a string of length between 1 and 100 consisting of uppercase and lowercase letters and possibly spaces. 2. The genre - a string consisting of lowercase letters only, with a maximum length of 100. -----Output----- The function should return a single string: - The genre that contains the highest number of books starting with the same letter. In case of a tie, return the lexicographically first genre. -----Examples----- Example Input 1: [(\\"Harry Potter\\", \\"fantasy\\"), (\\"Half Blood Prince\\", \\"fantasy\\"), (\\"Hobbit\\", \\"fantasy\\"), (\\"Fantastic Beasts\\", \\"fantasy\\"), (\\"To Kill a Mockingbird\\", \\"classic\\"), (\\"The Great Gatsby\\", \\"classic\\")] Example Output 1: fantasy Example Input 2: [(\\"Pride and Prejudice\\", \\"romance\\"), (\\"Percy Jackson\\", \\"fantasy\\"), (\\"Paranormalcy\\", \\"romance\\"), (\\"Gone Girl\\", \\"thriller\\")] Example Output 2: romance","solution":"from collections import defaultdict from typing import List, Tuple def most_popular_genre_start_letter(books: List[Tuple[str, str]]) -> str: genre_start_count = defaultdict(lambda: defaultdict(int)) for title, genre in books: start_letter = title[0].lower() genre_start_count[genre][start_letter] += 1 max_count = 0 result_genre = None for genre, start_counts in genre_start_count.items(): max_genre_count = max(start_counts.values()) if max_genre_count > max_count or (max_genre_count == max_count and genre < result_genre): max_count = max_genre_count result_genre = genre return result_genre"},{"question":"Given an array of integers, find the maximum length of a subarray that is strictly increasing (each element is greater than the previous one). Input: - The first line of the input contains a single integer N denoting the number of elements in the array. - The second line contains N space-separated integers representing the array. Output: - Print a single integer - the maximum length of a strictly increasing subarray. Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} # Sample Input 1: 6 1 2 2 4 3 5 # Sample Output 1: 2 # Explanation 1: The longest strictly increasing subarray is either [1, 2] or [3, 5], both of length 2. # Sample Input 2: 9 1 2 3 4 5 1 2 3 4 # Sample Output 2: 5 # Explanation 2: The longest strictly increasing subarray is [1, 2, 3, 4, 5], of length 5. # Sample Input 3: 5 5 4 3 2 1 # Sample Output 3: 1 # Explanation 3: There is no strictly increasing subarray of length greater than 1. So, the answer is 1.","solution":"def max_length_strictly_increasing_subarray(arr): Finds the maximum length of a strictly increasing subarray in the given array. Parameters: arr (list): The input array of integers. Returns: int: The maximum length of a strictly increasing subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given an integer `n`, write a function that returns the nth number in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. Starting with 0 and 1, the first 10 numbers in the sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ```if-not:haskell If the input is not a positive integer (0, 1, 2, ...), return \\"Invalid input\\". ``` ```if:haskell Return `Nothing` if the input is a negative integer and `Just n` if the input is valid. ```","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. If the input is not a positive integer, returns \\"Invalid input\\". if not isinstance(n, int) or n < 0: return \\"Invalid input\\" if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Determine the minimum number of operations required to make two words anagrams of each other. In one operation, you can remove any character from either of the words. An anagram of a word is another word that contains the same characters, only the order of characters can be different. Example 1: Input: word1 = \\"abc\\", word2 = \\"cde\\" Output: 4 Explanation: To make the two words anagrams, you can remove \'a\' and \'b\' from \\"abc\\" and remove \'d\' and \'e\' from \\"cde\\". So, 4 operations are required. Example 2: Input: word1 = \\"night\\", word2 = \\"thing\\" Output: 0 Explanation: The words \\"night\\" and \\"thing\\" are already anagrams, so no operations are required. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes two strings word1 and word2 as input and returns the minimum number of operations required. Expected Time Complexity: O(N), where N is the length of the longer word. Expected Auxiliary Space: O(1) Constraints: 1 <= len(word1), len(word2) <= 100000 All characters are lowercase English letters.","solution":"from collections import Counter def minOperations(word1, word2): Determine the minimum number of operations required to make two words anagrams of each other. count1 = Counter(word1) count2 = Counter(word2) # Calculate the difference in counts for all characters diff1 = count1 - count2 # characters that need to be removed from word1 diff2 = count2 - count1 # characters that need to be removed from word2 # Sum the values of differences total_diff = sum(diff1.values()) + sum(diff2.values()) return total_diff"},{"question":"You have been given the task to manage a warehouse that stores crates in different rows. Each row can hold an unlimited number of crates, but you can only place a crate at the end of a row. You have to process a sequence of operations to either add a new crate to a specific row, remove the last crate from a specific row, or retrieve the number of crates in a specific row. You have to write a program that simulates the operations and returns the relevant results. -----Input----- The first line of the input contains an integer n (1 leq n leq 10^5), the number of operations. The next n lines each describe an operation in one of the following formats: - `add r` (where 1 leq r leq 10^5), which adds a crate to the end of row r. - `remove r` (where 1 leq r leq 10^5), which removes the last crate from row r. If row r is already empty, this operation does nothing. - `count r` (where 1 leq r leq 10^5), which retrieves the number of crates in row r`. -----Output----- For each `count r` operation in the input, output a single integer on a new line which is the number of crates in row r. -----Examples----- Sample Input 1: 6 add 1 add 2 count 1 add 1 count 1 remove 1 Sample Output 1: 1 2 Sample Input 2: 4 add 3 remove 3 count 3 remove 3 Sample Output 2: 0","solution":"def warehouse_operations(n, operations): warehouse = {} result = [] for operation in operations: op, r = operation.split() r = int(r) if op == \'add\': if r not in warehouse: warehouse[r] = 0 warehouse[r] += 1 elif op == \'remove\': if r in warehouse and warehouse[r] > 0: warehouse[r] -= 1 elif op == \'count\': result.append(warehouse.get(r, 0)) return result"},{"question":"Your task is to implement a simple book management system. Each book in the system is represented as a dictionary with three keys: \\"title\\", \\"author\\", and \\"year\\". You are required to write a function `manage_books` that takes a list of books and a command string as input. The command string will determine the action to perform on the book list. The command string can be one of the following: 1. \\"add <title> by <author> published in <year>\\": Adds the specified book to the list. 2. \\"remove <title>\\": Removes the book with the specified title from the list. If the book is not found, return \\"Book not found!\\". 3. \\"find <title>\\": Returns the details of the book with the specified title in the format: \\"Title: <title>, Author: <author>, Year: <year>\\". If the book is not found, return \\"Book not found!\\". You can assume that book titles are unique in this system. # Examples ```python books = [ {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949} ] manage_books(books, \\"add Moby Dick by Herman Melville published in 1851\\") # books after adding: [ # {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, # {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}, # {\\"title\\": \\"Moby Dick\\", \\"author\\": \\"Herman Melville\\", \\"year\\": 1851} # ] manage_books(books, \\"remove 1984\\") # books after removing: [ # {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, # {\\"title\\": \\"Moby Dick\\", \\"author\\": \\"Herman Melville\\", \\"year\\": 1851} # ] manage_books(books, \\"find To Kill a Mockingbird\\") # returns: \\"Title: To Kill a Mockingbird, Author: Harper Lee, Year: 1960\\" manage_books(books, \\"remove The Great Gatsby\\") # returns: \\"Book not found!\\" ``` Write the `manage_books` function to implement the described functionality.","solution":"def manage_books(books, command): Manages the book list based on the provided command. :param books: List of book dictionaries :param command: Command string specifying action to take :return: None or string message if book not found in certain commands parts = command.split(\' \', 1) action = parts[0] if action == \\"add\\": rest = parts[1].rsplit(\' published in \', 1) title_author = rest[0].split(\' by \') title = title_author[0].strip() author = title_author[1].strip() year = int(rest[1]) books.append({\\"title\\": title, \\"author\\": author, \\"year\\": year}) elif action == \\"remove\\": title = parts[1].strip() for book in books: if book[\\"title\\"] == title: books.remove(book) return return \\"Book not found!\\" elif action == \\"find\\": title = parts[1].strip() for book in books: if book[\\"title\\"] == title: return f\\"Title: {book[\'title\']}, Author: {book[\'author\']}, Year: {book[\'year\']}\\" return \\"Book not found!\\""},{"question":"Toy Train Problem Imagine a toy train running on a circular track with N stations. Each station has a certain number of passengers waiting to board the train, and the train itself has a capacity, c, that determines the maximum number of passengers it can carry at any time. However, the train’s driver wants to maximize the number of passengers picked up throughout the journey. The train starts from station 1 with exactly c passengers and continues to travel in only one direction (from 1 to 2, 2 to 3 up to N and then N back to 1, and so on). As the train stops at each station, it unloads all its passengers and picks up a new group. Assume that these events (unloading and loading) happen instantaneously. Implement a function that computes the maximum number of passengers the train can pick up after the train has visited each station at least once. ----Input---- - The first line consists of two integers, N (the number of stations) and c (the capacity of the train) where 1 leq N, c leq 100. - The second line contains N integers - p_1, p_2,..., p_N (the number of passengers waiting at each station) where 0 leq p_i leq 1000. ----Output---- Output a single integer, the maximum number of passengers the train can pick up by the time it has visited each station at least once. ----Example---- Sample Input: 5 100 120 90 200 150 100 Sample Output: 500","solution":"def max_passengers(N, c, passengers): Computes the maximum number of passengers the train can pick up after visiting each station. Parameters: N (int): Number of stations. c (int): Capacity of the train. passengers (list of int): Number of passengers waiting at each station. Returns: int: Maximum number of passengers picked up. total_passengers = 0 for p in passengers: total_passengers += min(c, p) return total_passengers # Example usage: # N = 5, c = 100, passengers = [120, 90, 200, 150, 100] # Number of passengers picked up will be min(100, 120) + min(100, 90) + min(100, 200) + min(100, 150) + min(100, 100) = 100 + 90 + 100 + 100 + 100 = 490 # print(max_passengers(5, 100, [120, 90, 200, 150, 100])) # Output: 490"},{"question":"You are given two strings, `S1` and `S2`, both consisting of lowercase alphabets. Your task is to determine the longest common substring shared between `S1` and `S2`. A substring is defined as a contiguous sequence of characters within a string. -----Input----- The input consists of two lines: - The first line contains the string `S1` (1 ≤ |S1| ≤ 10^6). - The second line contains the string `S2` (1 ≤ |S2| ≤ 10^6). -----Output----- Output the length of the longest common substring. If there is no common substring, output `0`. -----Examples----- Input abcdxyz xyzabcd Output 4 Input abc def Output 0 Input zxabcdezy yzabcdezx Output 6 -----Note----- In the first example, the longest common substring is \\"abcd\\", which has length 4. In the second example, there is no common substring, so the output is 0. In the third example, the longest common substring is \\"abcdez\\", which has length 6. To solve this problem efficiently, you might consider using suffix arrays or dynamic programming.","solution":"def longest_common_substring(S1, S2): Returns the length of the longest common substring between S1 and S2. m, n = len(S1), len(S2) # Create a table to store lengths of longest common suffixes of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] length_of_longest = 0 # Building the dp array in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 length_of_longest = max(length_of_longest, dp[i][j]) else: dp[i][j] = 0 return length_of_longest"},{"question":"Your friend is organizing a coding competition and wants to create an interesting problem. They want you to help them design a problem that involves sorting and validating a sequence of numbers. Here is the problem scenario: A sequence b is called “(X, Y)-balanced” if for every element bi of the sequence, the following condition holds: X ≤ bi ≤ Y. In other words, all elements of the sequence are within the inclusive range [X, Y]. Given a sequence of N integers, your task is to determine how many elements you need to change to make the sequence (X, Y)-balanced. Input The first line of the input contains three integers N, X, and Y (1 ≤ N ≤ 10^5, -10^9 ≤ X ≤ Y ≤ 10^9) — the length of the sequence and the bounds for the balanced condition, respectively. The following N lines contain one integer each — the elements of the sequence. Output Output one integer — the minimum number of changes required to make the sequence (X, Y)-balanced. Examples Input 5 1 3 4 2 -1 3 5 Output 3 Input 4 0 10 7 -11 8 15 Output 2 Input 3 -5 0 -8 -1 -4 Output 1","solution":"def min_changes_to_balance_sequence(N, X, Y, sequence): Returns the minimum number of changes required to make the sequence (X, Y)-balanced. :param N: int, the length of the sequence :param X: int, the minimum bound :param Y: int, the maximum bound :param sequence: list of int, the elements of the sequence :return: int, number of changes required changes = 0 for number in sequence: if number < X or number > Y: changes += 1 return changes"},{"question":"You are given a list of integers. You need to find the next lexicographic permutation of the list and print it. If the given list is the largest permutation, print the smallest permutation instead. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The second line contains n integers ai (1 ≤ ai ≤ 1000), the integers in the list separated by space. Output Print the list representing the next lexicographic permutation of the given list. If the given list is the largest permutation, print the smallest permutation instead. Examples Input 3 1 2 3 Output 1 3 2 Input 3 3 2 1 Output 1 2 3 Input 4 1 1 5 1 Output 1 5 1 1","solution":"def next_permutation(nums): Rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). n = len(nums) # Find the rightmost element which is smaller than its next element k = n - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k == -1: # If no such element is found, the array is in descending order nums.reverse() else: # Find the smallest element on the right of the k-th element which is greater than nums[k] l = n - 1 while nums[l] <= nums[k]: l -= 1 # Swap the k-th element and the l-th element nums[k], nums[l] = nums[l], nums[k] # Reverse the sequence after the k-th element nums[k + 1:] = reversed(nums[k + 1:]) return nums def process_input(n, nums): return next_permutation(nums)"},{"question":"A conveyor belt carries n packages positioned from left to right, with positions numbered from 1 to n. Each package has a unique ID ranging from 1 to n. The conveyor belt splits into multiple sections after every k positions. When the conveyor belt is in operation, you have the ability to remove all packages in a designated section, but removal of packages can only be done from the rightmost section back to the left. Once a section is cleared, the conveyor belt readjusts and shifts any remaining packages to the left to fill gaps. Your task is to determine the minimum number of operations needed to remove all packages from the conveyor belt. Input The first line contains two integers n and k (1 ≤ n ≤ 10^18, 1 ≤ k ≤ n) — the number of packages and the number of positions in each section. Output Print a single integer — the minimum number of operations required to remove all packages from the conveyor belt. Examples Input 10 3 Output 4 Input 15 5 Output 3 Note For the first example: * Initially, the conveyor belt has packages positioned as [1, 2, 3 | 4, 5, 6 | 7, 8, 9 | 10]. * In the first operation, the rightmost section [10] is cleared, leading to [1, 2, 3 | 4, 5, 6 | 7, 8, 9]. * In the second operation, the rightmost section [7, 8, 9] is cleared, leading to [1, 2, 3 | 4, 5, 6]. * In the third operation, the rightmost section [4, 5, 6] is cleared, leading to [1, 2, 3]. * In the fourth operation, the remaining section [1, 2, 3] is cleared. For the second example: * Initially, the conveyor belt has packages positioned as [1, 2, 3, 4, 5 | 6, 7, 8, 9, 10 | 11, 12, 13, 14, 15]. * In the first operation, the rightmost section [11, 12, 13, 14, 15] is cleared, leading to [1, 2, 3, 4, 5 | 6, 7, 8, 9, 10]. * In the second operation, the rightmost section [6, 7, 8, 9, 10] is cleared, leading to [1, 2, 3, 4, 5]. * In the third operation, the remaining section [1, 2, 3, 4, 5] is cleared.","solution":"def min_operations(n, k): Returns the minimum number of operations required to remove all packages from the conveyor belt. # Calculate the minimum number of operations needed return (n + k - 1) // k"},{"question":"You are organizing a team-building event and need to distribute t-shirts to the participants. Each participant should receive exactly one t-shirt. Write a function that calculates the total number of t-shirts needed given the number of participants in each group. # Input: - `groups` - a list of positive integers where each integer represents the number of participants in a group. # Output: - The total number of t-shirts required for all participants. If the list is empty, return `0`. # Example: ```python def total_tshirts(groups): return sum(groups) # Test cases print(total_tshirts([5, 10, 15])) # Returns 30 print(total_tshirts([1, 2, 3, 4])) # Returns 10 print(total_tshirts([])) # Returns 0 ``` **Note:** Ensure the function handles edge cases such as an empty list.","solution":"def total_tshirts(groups): Calculates the total number of t-shirts needed for all participants. Parameters: groups (list of int): A list of integers where each integer represents the number of participants in a group. Returns: int: The total number of t-shirts required for all participants. Returns 0 if the list is empty. return sum(groups)"},{"question":"Alice the Astronaut is working on a new satellite deployment mission. She needs to deploy satellites equidistantly around a planet in a circular orbit. Each satellite will help with different tasks such as communication, navigation, and observation. Alice wants to make sure that the satellites are symmetrically distributed. Alice has determined the required number of satellites, `n`, and the radius, `r`, of the orbit. The position of each satellite can be represented in a 2D coordinate system with the planet situated at the origin (0, 0). Help Alice determine the coordinates of each satellite when they are placed symmetrically around the orbit. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of satellites. The second line contains a real number `r` (1 ≤ r ≤ 1000) — the radius of the orbit. Output Print `n` lines, each line containing the coordinates of a satellite in the form `xi yi`, where `xi` and `yi` are the coordinates in the 2D plane with exactly two decimal places. Examples Input 4 5.0 Output 5.00 0.00 0.00 5.00 -5.00 0.00 0.00 -5.00 Input 3 10.0 Output 10.00 0.00 -5.00 8.66 -5.00 -8.66 Explanation In the first example, four satellites are placed at 90-degree intervals around the planet, resulting in coordinates: (5, 0), (0, 5), (-5, 0), and (0, -5). In the second example, three satellites are placed at 120-degree intervals around the planet. The coordinates are: (10, 0), (-5, 8.66), and (-5, -8.66). Note The satellites\' coordinates are calculated using the following formula for each satellite `i` (0-based index) with the angle `theta = 2 * PI * i / n`: - `xi = r * cos(theta)` - `yi = r * sin(theta)` Ensure to round the coordinates to exactly two decimal places before printing.","solution":"import math def satellite_coordinates(n, r): Returns the coordinates of n satellites placed symmetrically around a circle of radius r. Parameters: n (int): The number of satellites r (float): The radius of the orbit Return: list of tuples: A list of coordinates formatted as (xi, yi) coordinates = [] for i in range(n): theta = 2 * math.pi * i / n xi = r * math.cos(theta) yi = r * math.sin(theta) coordinates.append((round(xi, 2), round(yi, 2))) return coordinates"},{"question":"Write a function to determine if there is a path from the top-left corner to the bottom-right corner of a given grid where each cell in the path must be the same value. Each cell in the grid can either contain a 0 or a 1. You can move up, down, left, or right. # Input: - The input dataset consists of multiple test cases. Each test case starts with an integer n (2 ≤ n ≤ 100), representing the size of the n x n grid. - The next n lines contain n integers (either 0 or 1) representing the grid. - The end of input is indicated by a single zero line. # Output: - For each test case, output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner where each cell in the path contains the same value, otherwise output \\"NO\\". # Example: Input: ``` 4 1 1 0 0 0 1 0 1 0 1 1 1 0 0 0 1 3 0 0 0 0 0 0 0 0 0 3 0 1 0 1 1 1 0 1 0 0 ``` Output: ``` YES YES NO ```","solution":"def is_path_exist(grid): n = len(grid) start_value = grid[0][0] visited = [[False] * n for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n: return False if visited[x][y] or grid[x][y] != start_value: return False if x == n - 1 and y == n - 1: return True visited[x][y] = True return dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1) return \\"YES\\" if dfs(0, 0) else \\"NO\\" def solve(input_data): lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n = int(lines[index]) if n == 0: break grid = [] index += 1 for _ in range(n): grid.append(list(map(int, lines[index].split()))) index += 1 results.append(is_path_exist(grid)) return \\"n\\".join(results)"},{"question":"You are given an array of integers. You need to perform the following tasks: - Sort the array in ascending order. - Reverse the sorted array to get it in descending order. - Find the sum of all elements in the reversed array. - Output the sum. Input Format - The first line contains an integer N, the size of the array. - The second line contains N integers representing the elements of the array. Output Format - Print the sum of the elements in the array after they have been sorted in ascending order and then reversed. Constraints - 1 ≤ N ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 Example Input 5 4 3 1 5 2 Output 15 Input 6 -1 -2 3 4 -5 2 Output 1","solution":"def process_array(n, arr): Performs the following tasks on the input array: - Sorts the array in ascending order. - Reverses the sorted array to get it in descending order. - Finds the sum of all elements in the reversed array. Args: n (int): The size of the array arr (List[int]): The elements of the array Returns: int: The sum of the elements in the reversed array sorted_arr = sorted(arr) reversed_arr = sorted_arr[::-1] return sum(reversed_arr)"},{"question":"Given an integer matrix of size m times n where each cell contains either a 0 or a 1, find the largest rectangle containing only 1s and return its area. Input Format The first line contains an integer, boldsymbol{T}, denoting the number of matrices you must process. Each of the T subsequent blocks describes one matrix as follows: - The first line of each block contains two space-separated integers, m and n, denoting the number of rows and columns. - The next m lines, each containing n space-separated integers representing the matrix. Constraints - 1 leq T leq 10 - 1 leq m, n leq 1000 - Each cell in the matrix can only be 0 or 1 Output Format For each of the boldsymbol{T} matrices, print an integer denoting the area of the largest rectangle containing only 1s. Sample Input 2 4 4 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 3 3 1 1 1 1 1 1 1 1 0 Sample Output 4 6 Explanation For the first matrix, the largest rectangle containing only 1s is formed by the following submatrix: 1 1 1 1 This submatrix has an area of 4. For the second matrix, the largest rectangle containing only 1s is formed by the following submatrix: 1 1 1 1 1 1 This submatrix has an area of 6.","solution":"def maximalRectangle(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) height = [0] * n max_area = 0 for i in range(m): for j in range(n): if matrix[i][j] == 0: height[j] = 0 else: height[j] += 1 max_area = max(max_area, largestRectangleArea(height)) return max_area def largestRectangleArea(heights): stack = [] heights.append(0) max_area = 0 for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def process_matrices(T, matrices): result = [] for i in range(T): m, n, matrix = matrices[i] result.append(maximalRectangle(matrix)) return result"},{"question":"You have a list of strings in the following format: ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\"] ``` Write a function `count_vowels()` that counts the total number of vowels (a, e, i, o, u) in all the strings combined and returns a dictionary that maps each vowel to its count. For example, given the input list: ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\"] ``` The function should return: ```python {\'a\': 4, \'e\': 2, \'i\': 0, \'o\': 0, \'u\': 0} ``` For input, you can assume that all strings contain only lowercase alphabetical characters and the list will not be empty.","solution":"def count_vowels(words): Returns a dictionary with counts of each vowel (a, e, i, o, u) in the given list of words. # Initialize a dictionary to hold the count of each vowel vowel_counts = {\'a\': 0, \'e\': 0, \'i\': 0, \'o\': 0, \'u\': 0} # Iterate through each word in the list for word in words: # Iterate through each character in the word for char in word: # If the character is a vowel, increment its count in the dictionary if char in vowel_counts: vowel_counts[char] += 1 return vowel_counts"},{"question":"Alice is organizing a coding competition and needs to assign participants into teams. There are n participants with unique skill ratings given as an array. The goal is to form the maximum number of teams of three participants, such that the sum of skills in each team is at least a given threshold value k. Each participant can only be in one team. Write a function that takes an integer n, an integer k, and an array of n integers representing the skill ratings of participants, and returns the maximum number of teams that can be formed. Input The first line contains an integer n (3 ≤ n ≤ 500) — the number of participants. The second line contains an integer k (1 ≤ k ≤ 1500) — the threshold value for the sum of skills in each team. The third line contains n integers (1 ≤ skill_i ≤ 500), the skill ratings of the participants. Output Print a single integer — the maximum number of teams that can be formed. Examples Input 6 10 1 2 3 4 5 6 Output 1 Input 8 15 10 5 5 10 5 5 5 10 Output 2 Input 5 9 5 4 3 2 1 Output 1 Note In the first example, one possible team could be (2, 3, 5) with the sum of skills being 10. In the second example, the teams could be (10, 5, 5) and (10, 5, 5) each summing up to at least 15. In the third example, the team could be (5, 4, 3) with the sum of skills being 12.","solution":"def max_teams(n, k, skills): Returns the maximum number of teams that can be formed where each team has at least a sum of skill ratings equal to k. skills.sort(reverse=True) team_count = 0 i = 0 while i <= n - 3: if skills[i] + skills[i + 1] + skills[i + 2] >= k: team_count += 1 i += 3 else: break return team_count"},{"question":"Write a function that takes a single string representing the day of the week and returns whether it is a \\"Weekday\\" or \\"Weekend\\". **Rules:** - If the input is \\"Saturday\\" or \\"Sunday\\", return \\"Weekend\\". - For any other valid weekday input (\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"), return \\"Weekday\\". - The input is guaranteed to be one of the above mentioned days. **Examples:** ```python day_type(\\"Monday\\") == \\"Weekday\\" day_type(\\"Friday\\") == \\"Weekday\\" day_type(\\"Sunday\\") == \\"Weekend\\" day_type(\\"Saturday\\") == \\"Weekend\\" ```","solution":"def day_type(day): Returns whether the given day is \\"Weekday\\" or \\"Weekend\\". Parameters: day (str): A string representing the day of the week. Returns: str: \\"Weekday\\" or \\"Weekend\\". if day in [\\"Saturday\\", \\"Sunday\\"]: return \\"Weekend\\" else: return \\"Weekday\\""},{"question":"You\'ve been hired by a reputable bank to write a program that manages the process of issuing checks to customers. Each customer has a unique account number. The bank has a daily limit on the total amount of money it can issue via checks. When a check is issued, it raises a request specifying the desired amount and the account number of the customer. Your task is to process these requests and determine the outcome for each of them, based on whether issuing the check would stay within the daily limit. Here are the rules: - If the total amount issued via checks exceeds the daily limit, the bank must decline the subsequent check requests. - The bank cannot simply reconsider the declined checks later in the day. - At the end of the day, the program must output the status of each check request in the order they were received. Input The first line of the input contains two integers n (1 ≤ n ≤ 10000) and L (1 ≤ L ≤ 10^9), where n is the number of requests, and L is the daily limit on the total amount of money the bank can issue via checks. Each of the next n lines contains an amount m (1 ≤ m ≤ 10000) and a customer account number (a string of up to 20 characters without spaces). Each line represents a check request with m being the desired amount. Output For each check request, print \\"Approved\\" if issuing the check would stay within the daily limit, and \\"Declined\\" otherwise. Example Input 5 15000 5000 JohnDoe 4000 JaneDoe 6000 JohnDoe 2000 JaneDoe 3000 JohnDoe Output Approved Approved Approved Declined Declined Explanation - The first request for 5000 is approved because it\'s within the daily limit. - The second request for 4000 is approved because the total amount (5000 + 4000 = 9000) is within the limit. - The third request for 6000 is approved because the total amount (9000 + 6000 = 15000) meets the limit exactly. - The fourth request for 2000 is declined because 15000 is already issued, which is the daily limit. - The fifth request for 3000 is declined for the same reason.","solution":"def process_check_requests(n, L, requests): Process check requests and determine if they are approved or declined based on the daily limit. Parameters: n (int): Number of check requests L (int): Daily limit on the total amount of money the bank can issue via checks requests (list of tuple): List of tuples containing the amount required and the customer account number Returns: list of str: List containing \\"Approved\\" or \\"Declined\\" for each request current_total = 0 result = [] for amount, _ in requests: if current_total + amount <= L: result.append(\\"Approved\\") current_total += amount else: result.append(\\"Declined\\") return result"},{"question":"A company plans to automate the process of scheduling meetings for its employees. Each employee has a list of availability slots, and any meeting must be scheduled within these slots. The available slots for each employee are given as intervals in the format [start_time, end_time], where both the start and end times are inclusive. A meeting can only be scheduled if there is a common available slot among all employees. Your task is to write a program that takes the availability intervals of N employees and determines the largest possible duration for a meeting that can fit within the common slots of all employees. If no common slot exists, the program should output 0. # Example Consider the following input: ``` 3 3 6 5 1 3 5 9 5 1 3 4 5 2 6 3 5 10 2 4 7 0 3 7 0 2 10 7 15 6 20 ``` In this example, the availability intervals of the employees are: - Employee 1: [[1, 3], [5, 9]] - Employee 2: [[2, 6], [3, 5], [10, 10]] - Employee 3: [[2, 4], [7, 7]] The largest possible meeting duration that fits within the common availability intervals of all employees is 0 minutes. # Input - First line: Single integer N (1 ≤ N ≤ 100) representing the number of employees. - For each of the next N blocks: - First line: An integer K (1 ≤ K ≤ 100), representing the number of availability intervals for the current employee. - Next K lines: Two integers start_time and end_time (0 ≤ start_time ≤ end_time ≤ 1440), representing the start and end times of the intervals. # Output A single integer representing the largest possible duration for a meeting that can fit within the common slots of all employees. If no common slot exists, output 0. # Examples Example 1: Input: ``` 3 2 1 3 5 9 2 2 6 3 5 1 10 10 ``` Output: ``` 0 ``` Example 2: Input: ``` 2 2 1 5 6 10 2 3 7 8 12 ``` Output: ``` 2 ``` # Constraints - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 100 - 0 ≤ start_time ≤ end_time ≤ 1440 Develop an algorithm to determine the largest possible meeting duration or identify if no common slot exists.","solution":"def largest_common_meeting_duration(availabilities): Finds the largest possible duration for a meeting that can fit within the common slots of all employees. Parameters: availabilities (List[List[List[int]]]): A list where each element represents the availability of an employee. Returns: int: The largest possible duration for a meeting in common slots. from itertools import product def overlap(intervals): if not intervals: return [] start = max(interval[0] for interval in intervals) end = min(interval[1] for interval in intervals) if start <= end: return [start, end] return [] # Reduce the list to common intervals step by step common_intervals = availabilities[0] for emp_availability in availabilities[1:]: new_common_intervals = [] for common_interval in common_intervals: for emp_interval in emp_availability: intersec = overlap([common_interval, emp_interval]) if intersec: new_common_intervals.append(intersec) common_intervals = new_common_intervals # Find the maximum duration in common_intervals max_duration = 0 for interval in common_intervals: max_duration = max(max_duration, interval[1] - interval[0]) return max_duration def parse_input(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) availabilities = [] index = 1 for _ in range(N): K = int(lines[index]) emp_intervals = [] for j in range(K): start_time, end_time = map(int, lines[index + 1 + j].split()) emp_intervals.append([start_time, end_time]) availabilities.append(emp_intervals) index += 1 + K return availabilities"},{"question":"Subarray Sum Query Given an array of integers a_1, a_2, .., a_N. You will be given Q queries, each with two integers l and r. For each query, compute the sum of the elements in the subarray from index l to index r (inclusive). Input N Q a_1 a_2 ... a_N l_1 r_1 l_2 r_2 :: l_q r_q Output sum_1 sum_2 :: sum_q On line i, output the sum of the elements in the subarray from index l_i to r_i for the i-th query. Constraints * 1 leq N, Q leq 10^5 * -10^9 leq a_i leq 10^9 * 1 leq l_i leq r_i leq N Input example 6 3 1 2 3 4 5 6 1 3 2 5 1 6 Output example 6 14 21 Example Input 6 3 1 2 3 4 5 6 1 3 2 5 1 6 Output 6 14 21","solution":"def precompute_prefix_sums(arr): Computes the prefix sums array for the given input array. N = len(arr) prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def subarray_sum_query(arr, queries): Processes subarray sum queries using the prefix sums array. prefix_sums = precompute_prefix_sums(arr) results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results"},{"question":"Watson has a collection of strings and he wants to find the longest common prefix among them. The longest common prefix of two or more strings is the longest starting portion of both strings that is identical. ------ Input ------ The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, which represents the number of strings in that test case. This is followed by N lines, each containing one string. ------ Output ------ For each test case, output in one line the longest common prefix of the given strings. If there is no common prefix, output \\"-1\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ |S| ≤ 10^{3}, where |S| is the length of any string Sum of lengths of all strings in all test cases will not exceed 10^6. ----- Sample Input 1 ------ 2 3 flower flow flight 2 dog racecar ----- Sample Output 1 ------ fl -1 ----- Explanation 1 ------ Test case 1: The first three characters \'flo\' are the same, but after that, there is no longer a common prefix. So the longest common prefix is \'fl\'. Test case 2: There is no common prefix among \\"dog\\" and \\"racecar\\", hence the output is \\"-1\\".","solution":"def longest_common_prefix(strs): This function takes a list of strings and returns the longest common prefix. If there is no common prefix, it returns \\"-1\\". if not strs: return \\"-1\\" min_length = min(len(s) for s in strs) low, high = 1, min_length while low <= high: middle = (low + high) // 2 if all(s[:middle] == strs[0][:middle] for s in strs): low = middle + 1 else: high = middle - 1 common_prefix = strs[0][: (low + high) // 2] return common_prefix if common_prefix else \\"-1\\" def process_test_cases(test_cases): This function takes a list of test cases, where each test case is a list of strings. It returns a list of the longest common prefixes for each test case. results = [] for case in test_cases: result = longest_common_prefix(case) results.append(result) return results"},{"question":"Implement a function to determine the length of the longest binary gap within a given positive integer N. A binary gap within a positive integer N is defined as a maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N. Write a function: ``` def longest_binary_gap(N: int) -> int: ``` that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn\'t contain a binary gap. # Example: ```python assert longest_binary_gap(9) == 2 # 9 in binary is 1001, and it has a binary gap of length 2. assert longest_binary_gap(529) == 4 # 529 in binary is 1000010001, and it has a binary gap of length 4. assert longest_binary_gap(20) == 1 # 20 in binary is 10100, and it has a binary gap of length 1. assert longest_binary_gap(15) == 0 # 15 in binary is 1111, and it has no binary gaps. assert longest_binary_gap(32) == 0 # 32 in binary is 100000, and it has no binary gaps. ``` # Constraints - 1 leq N leq 2,147,483,647","solution":"def longest_binary_gap(N: int) -> int: Determines the length of the longest binary gap within a given positive integer N. A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N. :param N: A positive integer :return: Length of the longest binary gap binary_representation = bin(N)[2:] # Convert N to binary and strip the \'0b\' prefix max_gap = 0 current_gap = 0 found_one = False for digit in binary_representation: if digit == \'1\': if found_one: max_gap = max(max_gap, current_gap) found_one = True current_gap = 0 # Reset current_gap when we find a \'1\' elif found_one: current_gap += 1 # Increase current_gap when we find a \'0\' return max_gap"},{"question":"Kevin is playing with a binary string, which consists of only characters \'0\' and \'1\'. He considers a binary string valid if no two consecutive characters are the same (i.e., it contains no \\"00\\" or \\"11\\" substring). Kevin can flip any single character in the string from \'0\' to \'1\' or from \'1\' to \'0\', but he wants to minimize the number of flips. Given a binary string `S`, determine the minimum number of flips required to make the string valid. Input format: The first line of the input contains an integer `N`, the length of the binary string. The second line contains a binary string `S` of length `N`. Output format: Print the minimum number of flips required to make the binary string valid. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 7 0101011 SAMPLE OUTPUT 1 Explanation Flipping the last character from \'1\' to \'0\' results in the valid string \\"0101010\\", with no consecutive characters being the same. This is the minimum number of flips required.","solution":"def min_flips_to_make_valid(N, S): Determines the minimum number of flips required to make the binary string valid. Args: N (int): The length of the binary string. S (str): The binary string. Returns: int: The minimum number of flips required. # Pattern when starting with \'0\', e.g., \\"010101...\\" flip_0 = 0 # Pattern when starting with \'1\', e.g., \\"101010...\\" flip_1 = 0 for i in range(N): if i % 2 == 0: if S[i] != \'0\': flip_0 += 1 if S[i] != \'1\': flip_1 += 1 else: if S[i] != \'1\': flip_0 += 1 if S[i] != \'0\': flip_1 += 1 return min(flip_0, flip_1)"},{"question":"You are given an array of integers. Your task is to find the longest consecutive subsequence in the array. A consecutive subsequence is a subset of elements from the array that can be rearranged to form a sequence of consecutive integers. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq a_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the length of the longest consecutive subsequence. -----Sample Input----- 7 100 4 200 1 3 2 5 -----Sample Output----- 5 Explanation: The longest consecutive subsequence is {1, 2, 3, 4, 5}, which has a length of 5.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest consecutive subsequence in the array. if not arr: return 0 num_set = set(arr) longest_length = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Given an array of integers, you can perform the following operation: Choose any two adjacent elements in the array, and if they have the same value, remove both elements from the array. Your task is to determine the minimum possible length of the array after applying the operation repeatedly as long as possible. Function Description Complete the arrayReduction function in the editor below. It must return an integer that denotes the length of the shortest array obtainable. arrayReduction has the following parameter: - arr: an array of integers Input Format The first line contains the number of test cases t. Each of the next t lines contains a list of integers representing an array arr to process. Constraints 1 leq t leq 100 1 leq |arr| leq 100 1 leq arr[i] leq 100 Output Format For each test case, print the length of the resultant minimal array on a new line. Sample Input 3 1 2 2 3 4 4 4 4 1 1 1 1 2 2 2 2 Sample Output 3 0 0 Explanation For the first case, one way to reduce the array is: [1, 2, 2, 3] to [1, 3], resulting in a length of 2. Another approach may leave the array as [1], resulting in a length of 1. For the second case, we can completely remove the array by repeatedly removing pairs: [4, 4, 4, 4] to [], resulting in a length of 0. For the third case, we can completely remove the array by repeatedly removing pairs: [1, 1, 1, 1, 2, 2, 2, 2] to [], resulting in a length of 0.","solution":"def arrayReduction(arr): Function to find the minimum possible length of the array after applying the operation of removing adjacent elements with the same value. stack = [] for num in arr: if stack and stack[-1] == num: stack.pop() else: stack.append(num) return len(stack) def process_test_cases(t, test_cases): results = [] for arr in test_cases: results.append(arrayReduction(arr)) return results"},{"question":"A famous online auction platform has introduced a new bidding system to its site. In this system, users can place multiple bids on various items during an auction. The platform wants users to see the highest bid they have placed on any item at the end of the auction. You are tasked with writing a program that processes multiple bids from various users and determines the highest bid each user has placed during an auction. -----Input----- - The first line of input contains a single integer N denoting the number of bids placed in the auction. - Each of the next N lines contains a user ID and the bid amount separated by a space. - user ID is a unique alphanumeric string identifying the user. - bid amount is a non-negative integer representing the amount bid by the user. -----Output----- - Output the highest bid placed by each user, one user per line, in the format: `<user ID> <highest bid>` - The output should be sorted lexically by the user ID. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ length of user ID ≤ 20 - 0 ≤ bid amount ≤ 10^6 -----Example----- Input: 7 alice 200 bob 150 alice 350 bob 200 charlie 100 alice 100 charlie 150 Output: alice 350 bob 200 charlie 150 -----Explanation----- In the example: - Alice placed three bids: 200, 350, and 100. The highest bid is 350. - Bob placed two bids: 150 and 200. The highest bid is 200. - Charlie placed two bids: 100 and 150. The highest bid is 150. The sorted users by user ID are: Alice, Bob, and Charlie. The highest bids they placed in the auction are printed accordingly.","solution":"def highest_bids(n, bids): Determines the highest bid for each user based on several bids. :param n: Number of bids (integer) :param bids: List of bids, each represented by a tuple (user_id, bid_amount) :return: List of tuples sorted by user IDs, each tuple contains user_id and highest_bid bid_dict = {} for bid in bids: user_id, bid_amount = bid bid_amount = int(bid_amount) if user_id in bid_dict: bid_dict[user_id] = max(bid_dict[user_id], bid_amount) else: bid_dict[user_id] = bid_amount highest_bids_list = sorted(bid_dict.items()) return highest_bids_list # Example Usage # n = 7 # bids = [ # (\\"alice\\", \\"200\\"), # (\\"bob\\", \\"150\\"), # (\\"alice\\", \\"350\\"), # (\\"bob\\", \\"200\\"), # (\\"charlie\\", \\"100\\"), # (\\"alice\\", \\"100\\"), # (\\"charlie\\", \\"150\\") # ] # print(highest_bids(n, bids))"},{"question":"Given a string consisting of lower case Latin characters and parentheses, find the minimum number of parentheses to be added to make the string valid. A string is considered valid if it is correctly balanced (i.e., every opening parenthesis has a corresponding closing parenthesis). ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case is described with a single line containing a string S. ------ Output ------ For each test case, output a single line containing the minimum number of parentheses to be added. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. ------ Sample Input 1 ------ 2 a)b(c)d ))( ------ Sample Output 1 ------ 1 2 ------ Explanation 1 ------ For the first input, we need one more \'(\' to make the string valid as a)b(c)d can be fixed by adding \'(\' at the beginning. For the second input, we need two more \'(\' at the beginning to make the string valid as ))( can be fixed by adding \'\'(()(()))\'\'.","solution":"def min_add_to_make_valid(S): Returns the minimum number of parentheses to be added to make the string valid. left_balance = 0 right_balance = 0 for char in S: if char == \'(\': left_balance += 1 elif char == \')\': if left_balance > 0: left_balance -= 1 else: right_balance += 1 return left_balance + right_balance def solve(test_cases): results = [] for S in test_cases: results.append(min_add_to_make_valid(S)) return results"},{"question":"You are given a collection of villages connected by roads. The villages are represented as nodes, and the roads are represented as edges in an undirected graph. Each road has a positive integer weight representing the travel time. You need to help the villagers find the shortest travel time between two given villages. Write a function that takes in the following inputs and returns the shortest travel time between the two specified villages, or `-1` if there is no path connecting them. ------ Input ------ The function should take the following inputs: - `n`: integer representing the number of villages (nodes). - `edges`: list of tuples where each tuple `(u, v, t)` represents a road connecting village `u` to village `v` with travel time `t`. - `start`: integer representing the starting village. - `end`: integer representing the destination village. ------ Output ------ The function should return an integer representing the shortest travel time between the starting village (`start`) and the destination village (`end`), or `-1` if no such path exists. ------ Constraints ------ - `1 ≤ n ≤ 10^4` - `0 ≤ len(edges) ≤ 10^5` - `1 ≤ t ≤ 10^4` - The villages are indexed from `1` to `n`. ------ Example ------ ------ Input ------ ``` n = 5 edges = [(1, 2, 2), (2, 3, 4), (3, 4, 1), (1, 4, 10)] start = 1 end = 4 ``` ------ Output ------ ``` 7 ``` Explanation: The shortest path from village 1 to village 4 is: 1 → 2 → 3 → 4 with a total travel time of `2 + 4 + 1 = 7`.","solution":"import heapq from collections import defaultdict def shortest_travel_time(n, edges, start, end): Returns the shortest travel time between the starting village and the destination village, or -1 if no such path exists. n: int - the number of villages (nodes). edges: List[Tuple[int, int, int]] - list of tuples where each tuple (u, v, t) represents a road connecting village u to village v with travel time t. start: int - the starting village. end: int - the destination village. graph = defaultdict(list) for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) heap = [(0, start)] # (travel_time, village) shortest_times = {i: float(\'inf\') for i in range(1, n+1)} shortest_times[start] = 0 while heap: current_time, current_village = heapq.heappop(heap) if current_village == end: return current_time if current_time > shortest_times[current_village]: continue for neighbor, travel_time in graph[current_village]: time = current_time + travel_time if time < shortest_times[neighbor]: shortest_times[neighbor] = time heapq.heappush(heap, (time, neighbor)) return -1"},{"question":"Given a string s and a number k, rotate the string to the right by k characters without using any extra space. Rotation by k means that each character in the string is shifted to the right by k positions and characters that \\"fall off\\" the end appear back at the beginning of the string. For negative values of k, rotate the string to the left by |k| characters. Example 1: Input: s = \\"abcdef\\" k = 2 Output: \\"efabcd\\" Explanation: Rotating the string \\"abcdef\\" to the right by 2 characters results in \\"efabcd\\". Example 2: Input: s = \\"abcdef\\" k = -2 Output: \\"cdefab\\" Explanation: Rotating the string \\"abcdef\\" to the left by 2 characters results in \\"cdefab\\". Example 3: Input: s = \\"abcdef\\" k = 0 Output: \\"abcdef\\" Explanation: A rotation by 0 characters means the string remains unchanged. Your Task: The task is to complete the function rotateString(), which takes a string s and an integer k as input and returns the rotated string. The function should perform the rotation without using any extra space for another string. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1) (no extra space) Constraints: 1 <= |s| <= 10^5 -10^5 <= k <= 10^5","solution":"def rotateString(s, k): Rotates the string s by k characters without using extra space. n = len(s) # Normalize k to be within the range of [0, n) k = k % n # If k is zero, return the original string if k == 0: return s # Rotate the string return s[-k:] + s[:-k]"},{"question":">Write a function that takes a string representing a mathematical expression in the form of `term operator term` (e.g., \\"3 + 5\\") and evaluates the expression. The supported operations are addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). If the result is an integer, return it as an integer, otherwise return it as a float. # Description: Develop a function `evaluate_expression(expression)` that parses and evaluates a simple arithmetic expression involving two operands and an operator. Your function should correctly handle spaces in the input and perform the appropriate arithmetic operation. Take care to handle division by zero by returning `None` in such cases. # Examples ``` For Python: evaluate_expression(\\"3 + 5\\") should return 8 evaluate_expression(\\"10 - 2\\") should return 8 evaluate_expression(\\"4 * 2.5\\") should return 10.0 evaluate_expression(\\"9 / 3\\") should return 3 evaluate_expression(\\"8 / 0\\") should return None ``` # Constraints: - The input is guaranteed to be in the form `term operator term`. - `term` is always a valid positive or negative integer or float. - `operator` is one of the `+`, `-`, `*`, `/`.","solution":"def evaluate_expression(expression): Evaluates a simple arithmetic expression given in the form \\"term operator term\\". Returns the result as an integer if it has no fractional value, otherwise as a float. Returns None for division by zero. # Split the expression into components term1, operator, term2 = expression.split() # Convert terms to correct numeric types term1 = float(term1) if \'.\' in term1 else int(term1) term2 = float(term2) if \'.\' in term2 else int(term2) # Evaluate based on the operator result = None if operator == \'+\': result = term1 + term2 elif operator == \'-\': result = term1 - term2 elif operator == \'*\': result = term1 * term2 elif operator == \'/\': if term2 == 0: return None result = term1 / term2 # Return integer if the result is a whole number if isinstance(result, float) and result.is_integer(): return int(result) return result"},{"question":"A company is organizing a coding competition and wants to create teams from a pool of N participants. Each team must have exactly M members. After forming the maximum number of teams, there might be some participants left without a team. Determine the number of participants who are left without a team after forming the maximum number of teams possible. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each of the next T lines contains two integers N and M — the number of participants and the number of members required per team, respectively. ------ Output Format ------ For each test case, output the number of participants who are left without a team after forming the maximum number of teams possible. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 100 ----- Sample Input 1 ------ 4 20 3 14 5 10 10 6 4 ----- Sample Output 1 ------ 2 4 0 2 ----- Explanation 1 ------ Test Case 1: The maximum number of teams that can be formed is 6, which requires 18 participants, leaving 2 participants without a team. Test Case 2: The maximum number of teams that can be formed is 2, which requires 10 participants, leaving 4 participants without a team. Test Case 3: The maximum number of teams that can be formed is 1, which requires 10 participants, leaving 0 participants without a team. Test Case 4: The maximum number of teams that can be formed is 1, which requires 4 participants, leaving 2 participants without a team.","solution":"def participants_left_without_team(test_cases): results = [] for N, M in test_cases: leftover = N % M results.append(leftover) return results"},{"question":"Roshni is planning to host a party and she wants to send invitations to all her friends. She has F friends and each invitation costs C rupees to print and send. Roshni has M rupees available for printing and sending the invitations. Given these constraints, determine if Roshni can afford to send invitations to all her friends. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - Each test case consists of three integers F, C, and M - the number of friends, cost per invitation, and the money Roshni has respectively. ------ Output Format ------ For each test case, output YES if Roshni can afford to send invitations to all her friends, otherwise output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ F ≤ 1000 1 ≤ C ≤ 100 1 ≤ M ≤ 10^5 ----- Sample Input 1 ------ 3 10 50 500 20 30 600 15 40 550 ----- Sample Output 1 ------ YES NO NO ----- Explanation 1 ------ Test Case 1: Roshni has 10 friends and each invitation costs 50 rupees, so she needs 10 times 50 = 500 rupees in total. Since she has exactly 500 rupees, she can afford to send the invitations. Test Case 2: Roshni has 20 friends and each invitation costs 30 rupees, so she needs 20 times 30 = 600 rupees in total. Since she has only 600 rupees, she does not have enough to cover any extra possible expenses and may fall short. Test Case 3: Roshni has 15 friends and each invitation costs 40 rupees, so she needs 15 times 40 = 600 rupees in total. Since she only has 550 rupees, she cannot afford to send the invitations.","solution":"def can_afford_invitations(friends, cost, money): Determines if Roshni can afford to send invitations to all her friends. Args: friends: int - Number of friends cost: int - Cost per invitation money: int - Total money available Returns: str - \\"YES\\" if she can afford, otherwise \\"NO\\" total_cost = friends * cost if total_cost <= money: return \\"YES\\" else: return \\"NO\\" def process_input(test_cases): results = [] for (friends, cost, money) in test_cases: results.append(can_afford_invitations(friends, cost, money)) return results"},{"question":"Given a binary tree, where each node contains an integer value, implement a function to determine the longest path of nodes that form a strictly increasing sequence from the root to any leaf. Your function should return the length of this longest increasing path. If there are multiple such paths with the same length, only the length is required. Input: - First line contains a single integer \'n\' (1 <= n <= 1000), the number of nodes in the binary tree. - Following \'n\' lines, each containing three space-separated values: \'node_value left_child right_child\'. Each node is defined by its value and the values of its left and right children (both can be -1 if absent). Output: - A single integer representing the length of the longest strictly increasing path from root to any leaf. Notes: - The root of the tree is always the first node defined in the input. - Each node value is unique and within the range of 1 to 10^6. SAMPLE INPUT 5 10 5 20 5 -1 -1 20 15 30 15 -1 -1 30 -1 -1 SAMPLE OUTPUT 3 Explanation: The longest increasing path is 10 -> 20 -> 30 with a length of 3.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes): node_dict = {} for value, left, right in nodes: if value not in node_dict: node_dict[value] = TreeNode(value) if left != -1: if left not in node_dict: node_dict[left] = TreeNode(left) node_dict[value].left = node_dict[left] if right != -1: if right not in node_dict: node_dict[right] = TreeNode(right) node_dict[value].right = node_dict[right] return node_dict[nodes[0][0]] def longest_increasing_path_length(root): def dfs(node, prev_value): if not node: return 0 if node.value <= prev_value: return 0 left_path_length = dfs(node.left, node.value) right_path_length = dfs(node.right, node.value) return 1 + max(left_path_length, right_path_length) return dfs(root, float(\'-inf\')) def find_longest_increasing_path_length(tree_nodes): root = build_tree(tree_nodes) return longest_increasing_path_length(root) # Example usage: # tree_nodes = [(10, 5, 20), (5, -1, -1), (20, 15, 30), (15, -1, -1), (30, -1, -1)] # print(find_longest_increasing_path_length(tree_nodes)) # Output: 3"},{"question":"Given a string that contains only \'a\' and \'b\' characters, you need to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If possible, you should return one such permutation of the string. If not, return an empty string. Your task is to write a function that will rearrange the string based on the above condition. Input - A single string `s` containing only the characters \'a\' and \'b\'. Output - A single string representing the rearranged string, or an empty string if no such arrangement is possible. Constraints - The length of the string `s` will be in the range: 1 ≤ |s| ≤ 10^5 Examples Example 1: Input: aab Output: aba Example 2: Input: aaab Output: \\"\\" (an empty string) Explanation In the first example, the input string \\"aab\\" can be rearranged to \\"aba\\" where no two adjacent characters are the same. In the second example, the input string \\"aaab\\" cannot be rearranged such that no two adjacent characters are the same, hence the output is an empty string.","solution":"def rearrange_string(s): Rearranges the string so that no two adjacent characters are the same. Returns an empty string if it\'s not possible. from collections import Counter count = Counter(s) most_common = count.most_common() # Edge case if the count of the most common character is more than half the length of the string plus one if most_common[0][1] > (len(s) + 1) // 2: return \\"\\" result = [\\"\\"] * len(s) index = 0 for char, freq in most_common: for _ in range(freq): result[index] = char index += 2 if index >= len(s): index = 1 return \\"\\".join(result) # Examples to validate the function implementation if __name__ == \\"__main__\\": print(rearrange_string(\\"aab\\")) # Output: \\"aba\\" print(rearrange_string(\\"aaab\\")) # Output: \\"\\""},{"question":"Lina is preparing a special recipe that requires exactly P grams of a particular ingredient. She has two types of packets of that ingredient at home: small packets containing S grams and large packets containing L grams. She can use multiple packets of either type to reach the desired weight. Write a program to determine if it is possible to get exactly P grams of the ingredient using any combination of the packets she has. -----Constraints----- - All values in input are integers. - 1 leq P, S, L leq 1000 -----Input----- Input is given from Standard Input in the following format: P S L -----Output----- If it is possible to get exactly P grams, print POSSIBLE; otherwise, print IMPOSSIBLE. -----Sample Input----- 250 50 100 -----Sample Output----- POSSIBLE By using 2 large packets (100 grams each) and 1 small packet (50 grams), Lina can get exactly 250 grams.","solution":"def is_possible(P, S, L): Determines if it is possible to get exactly P grams using packets of S grams and L grams. # Check if we can achieve P grams using packets of size S and L for i in range(P // S + 1): # Try different multiples of the small packet remaining = P - (i * S) if remaining % L == 0: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"Alice loves customizing her home with various patterns. She has `n` rows of tiles and in each row, she can place `m` tiles. Every tile can either be white or black. Alice wants to create a specific pattern by painting some tiles black. Given the initial state of the tiles, Alice wants to perform a series of operations to transform it into the desired pattern. Each operation consists of choosing a specific tile and toggling its color (i.e., changing a white tile to black or a black tile to white). You are tasked with determining the minimum number of operations required to transform the initial tile configuration into the desired configuration. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), denoting the number of rows and columns of the tile grid, respectively. The next `n` lines contain `m` characters each, describing the initial configuration of the tile grid. Each character is either \'W\' (for a white tile) or \'B\' (for a black tile). The following `n` lines also contain `m` characters each, describing the desired configuration of the tile grid. Each character is either \'W\' or \'B\'. Output Print a single integer, the minimum number of operations required to achieve the desired configuration. Example Input 3 3 WBW BBW WWW BBB BWB BBW Output 6 Explanation In this example: Initial configuration: ``` WBW BBW WWW ``` Desired configuration: ``` BBB BWB BBW ``` The minimum number of operations required is 6.","solution":"def min_operations_to_transform(n, m, initial, target): Given the initial and target configurations of a tile grid, return the minimum number of operations required to achieve the target configuration. :param n: Number of rows in the grid :param m: Number of columns in the grid :param initial: List of strings representing the initial configuration. :param target: List of strings representing the desired configuration. :return: Minimum number of operations required to transform initial to target configuration. min_operations = 0 for i in range(n): for j in range(m): if initial[i][j] != target[i][j]: min_operations += 1 return min_operations"},{"question":"Write a function that takes a string as input and returns the first non-repeating character. If there are no non-repeating characters, return an empty string. Example: ``` firstNonRepeatingCharacter(\\"swiss\\") -> \\"w\\" firstNonRepeatingCharacter(\\"level\\") -> \\"v\\" firstNonRepeatingCharacter(\\"aabbcc\\") -> \\"\\" ```","solution":"def firstNonRepeatingCharacter(s): Returns the first non-repeating character in the string s. If there are no non-repeating characters, returns an empty string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"# Task **Given** a positive integer `N`, write a function to determine if it is a prime number. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The function should return true if `N` is prime, otherwise return false. ___ # Notes - **Guaranteed constraint**: **_2 ≤ N ≤ 10^6_** ___ # Input >> Output Examples: ```plaintext is_prime(2) -> true is_prime(4) -> false is_prime(17) -> true is_prime(20) -> false ``` ___ # Requirements: - Create a function that checks for primality. - Optimize for efficiency to handle the upper limit of the constraint effectively. ___ # Example Implementation: ```python def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True ```","solution":"def is_prime(n): Returns True if the given number n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"John is participating in a robotics competition. In the competition, he needs to program a robot to move across a grid. The grid is represented by an N x N matrix. The robot has special movement rules: - It can move exactly two steps forward in one of the four cardinal directions — up, down, left, or right. - The robot cannot visit the same cell twice. The goal for John is to find the maximum number of unique cells the robot can visit starting from any cell in the grid. -----Constraints----- 1 ≤ N ≤ 50 -----Input----- The input is given from Standard Input in the following format: N -----Output----- Print the maximum number of unique cells the robot can visit. -----Sample Input----- 3 -----Sample Output----- 1 Explanation: For a 3x3 grid, the robot cannot move two steps forward in any direction from any cell, so it stays in its starting position, visiting only 1 unique cell.","solution":"def max_unique_cells(N): Calculate the maximum number of unique cells the robot can visit. Parameters: N (int): Size of the grid (N x N) Returns: int: Maximum number of unique cells the robot can visit # For an NxN grid, since the robot\'s constraint is to move exactly two steps, # if N < 3, the robot cannot make any movement. # Therefore, the robot remains on the starting cell, and hence only visits 1 unique cell. if N < 3: return 1 # In larger grids where the robot can make movements, # the robot can move until it hits the grid limits. # This results in multiple visits. However, the optimal path to cover the most unique cells # involves covering all boundary and internal cells it can possibly reach based on constraints. return N * N # For larger grids, the general formula to visit maximum unique cells is simply visiting each cell of the grid."},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. Your task is to rearrange the elements in such a way that the absolute difference between any two adjacent elements is minimized. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the elements of the array. -----Output----- The output should be a single line with n integers: the rearranged array such that the absolute difference between any two adjacent elements is minimized. If there are several valid rearrangements, print any of them. -----Examples----- Input 4 3 2 1 4 Output 1 2 3 4 Input 5 10 5 3 9 1 Output 1 3 5 9 10","solution":"def minimize_absolute_difference(n, array): Rearranges the array such that the absolute difference between any two adjacent elements is minimized. array.sort() return array"},{"question":"Alice has two strings `S1` and `S2` consisting of lowercase English letters. She wants to determine if `S2` is a permutation of a substring of `S1`. In other words, she wants to know if there is a way to rearrange the characters of `S2` to form a substring within `S1`. Your task is to help Alice by writing a function that will return `true` if `S2` is a permutation of some substring of `S1`, and `false` otherwise. Input Format - The input consists of two lines: - The first line contains the string `S1` (1 ≤ |S1| ≤ 10^5). - The second line contains the string `S2` (1 ≤ |S2| ≤ 10^5). Output Format - Output `true` if `S2` is a permutation of any substring of `S1`, otherwise output `false`. Constraints - Both `S1` and `S2` consist only of lowercase English letters. SAMPLE INPUT 1 abcdba abc SAMPLE OUTPUT 1 true SAMPLE INPUT 2 hello ollh SAMPLE OUTPUT 2 false Explanation: In the first sample, `abc` can be rearranged to form the substring `cba` in `S1`. In the second sample, there is no permutation of `ollh` that can form a substring in `hello`.","solution":"from collections import Counter def check_permutation_in_substring(S1, S2): Returns true if S2 is a permutation of some substring of S1, false otherwise. len_S1 = len(S1) len_S2 = len(S2) if len_S2 > len_S1: return False S2_counter = Counter(S2) window_counter = Counter(S1[:len_S2]) if S2_counter == window_counter: return True for i in range(len_S2, len_S1): window_counter[S1[i]] += 1 window_counter[S1[i - len_S2]] -= 1 if window_counter[S1[i - len_S2]] == 0: del window_counter[S1[i - len_S2]] if window_counter == S2_counter: return True return False"},{"question":"Given an array of integers arr of size N, find if there are three elements in arr whose sum is equal to a given value X. Example 1: Input: N = 6, X = 24 arr = [12, 3, 4, 1, 6, 9] Output: True Explanation: There is a triplet (12, 3, 9) present in the array whose sum is 24. Example 2: Input: N = 5, X = 10 arr = [1, 2, 4, 3, 6] Output: True Explanation: There is a triplet (1, 3, 6) present in the array whose sum is 10. Example 3: Input: N = 4, X = 19 arr = [1, 2, 3, 8] Output: False Explanation: There is no triplet present in the array whose sum is 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function find3Numbers() which takes the array arr, the size of the array N, and the target sum X as parameters and returns a boolean value indicating if there is a triplet in the array which sums up to X. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^3 -10^6 ≤ arr[i] ≤ 10^6","solution":"def find3Numbers(arr, N, X): Returns True if there are three numbers in \'arr\' which sum to \'X\', else returns False. arr.sort() for i in range(N - 2): l = i + 1 r = N - 1 while l < r: current_sum = arr[i] + arr[l] + arr[r] if current_sum == X: return True elif current_sum < X: l += 1 else: r -= 1 return False"},{"question":"Theo just started learning data structures and is fascinated by binary trees. He wants to understand how different his binary tree of integers is from a perfectly balanced binary tree containing the same integers. A binary tree is considered balanced if the depth of the two subtrees of every node never differs by more than one. Given the integers in Theo\'s binary tree, write a function to determine whether the tree can be rearranged to form a balanced binary tree. -----Input----- The first line contains a single integer n (1 le n le 10^5), the number of nodes in the binary tree. The second line contains n integers v_1, v_2, ldots, v_n (-10^9 le v_i le 10^9), the values of the nodes in the binary tree. -----Output----- Print \\"Yes\\" if the tree can be rearranged to form a balanced binary tree, otherwise print \\"No\\". -----Examples----- Input 3 1 2 3 Output Yes Input 4 1 2 3 4 Output Yes Input 7 1 2 3 4 5 6 7 Output Yes Input 10 10 20 30 40 50 60 70 80 90 100 Output Yes -----Note----- In the first example, the given nodes can be rearranged to form a balanced binary tree like: ``` 2 / 1 3 ``` In the second example, the given nodes can be rearranged to form a balanced binary tree like: ``` 2 / 1 3 4 ``` In the third example, the given nodes can be rearranged to form a perfectly balanced binary tree like: ``` 4 / 2 6 / / 1 3 5 7 ``` In the fourth example, despite the larger number of nodes, the given values can still be rearranged to form a balanced binary tree.","solution":"def can_form_balanced_binary_tree(n, values): Determines if the given tree values can be rearranged to form a balanced binary tree. A binary tree can be balanced if given `n` values can be arranged in such a way that: - For every node, the heights of the left and right subtrees differ by at most 1. Args: n (int): The number of nodes. values (list): The list of node values. Returns: str: \\"Yes\\" if the tree can be rearranged to form a balanced binary tree, otherwise \\"No\\". # For any given `n`, if it can form a balanced binary tree, the values can be organized in # such a way that it satisfies the balanced binary tree property for these values. # Since any sequence of numbers can be sorted and then rearranged to make such a tree, # the answer is always \\"Yes\\". return \\"Yes\\""},{"question":"Given a list of integers, determine whether it is possible to reorder them such that no two adjacent elements have the same parity (evenness). If such a reordering is possible, output one valid arrangement; otherwise, output \\"Not possible\\". -----Constraints----- - All values in input are integers. - 2 leq length of list leq 1000 - 1 leq each integer leq 10^5 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Output one valid reordering of the array if possible, or \\"Not possible\\" if no such reordering exists. -----Sample Input----- 6 4 5 2 3 8 9 -----Sample Output----- 4 5 2 3 8 9 -----Explanation----- The list can be reordered such that no two adjacent elements have the same parity. One possible valid reordering is 4 5 2 3 8 9 where each even number (4, 2, 8) is followed by an odd number (5, 3, 9) or vice versa.","solution":"def reorder_list(N, A): Reorders the list A of integers such that no two adjacent elements have the same parity if possible. Parameters: N: int : Number of integers in the list A: List[int] : List of integers Returns: List[int] or \'Not possible\' : Reordered list of integers or \\"Not possible\\" if reordering is not possible # Split the list into even and odd numbers evens = [x for x in A if x % 2 == 0] odds = [x for x in A if x % 2 != 0] if abs(len(evens) - len(odds)) > 1: return \\"Not possible\\" # If there are more evens, start with an even number; otherwise, start with an odd number if len(evens) >= len(odds): result = [] for i in range(N): if i % 2 == 0: result.append(evens.pop()) else: if odds: result.append(odds.pop()) else: result.append(evens.pop()) else: result = [] for i in range(N): if i % 2 == 0: result.append(odds.pop()) else: if evens: result.append(evens.pop()) else: result.append(odds.pop()) return result"},{"question":"Pathfinding in a Grid You are given a grid of size N x M. Each cell in the grid can either be an open space (represented by \'.\') or an obstacle (represented by \'#\'). You need to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, M-1). You can move up, down, left, or right, but you cannot move through obstacles. If there is no path from the top-left to the bottom-right, return -1. Write a function that takes the grid as input and returns the length of the shortest path. Input The first line contains two integers, N and M, denoting the number of rows and columns in the grid, respectively. The next N lines contain M characters each, representing the grid. Output Output a single integer representing the length of the shortest path from the top-left to the bottom-right cell, or -1 if no such path exists. Constraints * 1 ≤ N, M ≤ 1000 * The grid contains only characters \'.\' and \'#\'. Input example 5 5 ..... .#. ..... .#. ..... Output example 7 Explanation The shortest path from the top-left to the bottom-right is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4) The length of this path is 7. If there were no path due to obstacles blocking the way, the output would be -1.","solution":"from collections import deque def shortest_path_in_grid(grid): if not grid: return -1 n, m = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == m - 1: return dist for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < n and 0 <= c < m and (r, c) not in visited and grid[r][c] == \'.\': queue.append((r, c, dist + 1)) visited.add((r, c)) return -1"},{"question":"You are given a string containing a list of words. For example: `\\"dog cat elephant dog giraffe cat cat\\"`. Your task is to create a function `analyze_string` that takes this string as input and returns the following: 1. A dictionary where the keys are the words and the values are the number of times each word appears in the string. 2. The word that appears the most frequently. 3. The length of the longest word in the string. If multiple words appear the most frequently, return all of them in a list, sorted in lexicographical order. If the input string is empty, return `(None, None, None)`. # Example ```python analyze_string(\\"dog cat elephant dog giraffe cat cat\\") # Returns: # ( # {\'dog\': 2, \'cat\': 3, \'elephant\': 1, \'giraffe\': 1}, # [\'cat\'], # 8 # ) ``` # Notes - Words are case-sensitive. - The input string only contains alphabetical characters and spaces. - You can assume the input string does not contain any punctuation or special characters. - You can also assume the input string will not contain leading or trailing spaces, and words are separated by a single space. # Constraints - The input string will contain no more than 10,000 characters.","solution":"def analyze_string(s): if not s: return (None, None, None) word_count = {} max_len = 0 words = s.split() for word in words: word_count[word] = word_count.get(word, 0) + 1 if len(word) > max_len: max_len = len(word) max_freq = max(word_count.values()) most_frequent_words = sorted([word for word, count in word_count.items() if count == max_freq]) return (word_count, most_frequent_words, max_len)"},{"question":"A factory produces an array of metal rods of varying lengths. The rods need to be packaged and shipped to clients with a constraint: each package must contain rods that differ in length by no more than 1 unit. What is the maximum number of packages needed to ship all rods given this constraint? For example, given the rod lengths l = [1, 2, 2, 3, 4, 5, 6, 6, 7], the rods can be divided into three packages: [1, 2, 2, 3], [4, 5], and [6, 6, 7]. Each package contains rods with lengths differing by no more than 1 unit. Function Description Complete the `packageRods` function in the editor below. It should return the maximum number of packages required to ship all rods. `packageRods` has the following parameter(s): - `l`: an array of integers that represent the lengths of each rod. Input Format The first line contains an integer n, the number of rods. The second line contains n space-separated integers, l[1], l[2], ldots, l[n], representing the lengths of the rods. Constraints 1 leq n leq 10^5 1 leq l[i] leq 10^4, where i in [1, n] Output Format Return the integer value of the maximum number of packages needed to ship all the rods. Sample Input 10 1 2 2 3 4 5 5 6 6 7 Sample Output 4 Explanation The first package holds rods of lengths 1, 2, 2 (lengths in range 1 ldots 2). The second package holds rods of lengths 3 (length in range 3 ldots 3). The third package holds rods of lengths 4, 5, 5 (lengths in range 4 ldots 5). The fourth package holds rods of lengths 6, 6, 7 (lengths in range 6 ldots 7). Four packages are required.","solution":"def packageRods(l): l.sort() packages = 0 i = 0 while i < len(l): # Determine the range of the current package current_length = l[i] while i < len(l) and l[i] <= current_length + 1: i += 1 packages += 1 return packages"},{"question":"Company XYZ organizes an annual coding competition that follows a unique scoring system. Each participant earns a score for each problem they solve and there are also bonus points based on the sequence in which they solve their problems. Given the number of problems solved by a participant and their individual scores for those problems in the order they were solved, you need to calculate the participant\'s final score. The final score is the sum of their individual problem scores plus bonus points that are calculated as follows: - For every consecutive pair of problems solved where the second problem\'s score is higher than the first problem\'s score, they earn bonus points equal to the difference between the scores of these two problems. Write a function `calculate_final_score(n, scores)` where `n` is the number of problems solved and `scores` is a list of `n` integers representing the scores of the problems. The function should return the participant\'s final score. Constraints: * 1 leq n leq 10^5 * 1 leq scores[i] leq 10^9 for all 1 leq i leq n Input The function will take the following input: - List of integers: `scores`, which contains the scores of the problems solved in the order they were solved. Output The function should output an integer representing the final score. Examples Input n = 5 scores = [10, 20, 15, 25, 30] Output final_score = 120 Input n = 3 scores = [5, 10, 20] Output final_score = 55 Explanation of Examples: Example 1: - Sum of individual scores: 10 + 20 + 15 + 25 + 30 = 100 - Bonus points: (20 - 10) + (25 - 15) + (30 - 25) = 10 + 10 + 5 = 25 - Final score: 100 + 25 = 125 Example 2: - Sum of individual scores: 5 + 10 + 20 = 35 - Bonus points: (10 - 5) + (20 - 10) = 5 + 10 = 15 - Final score: 35 + 15 = 50","solution":"def calculate_final_score(n, scores): if n <= 0: return 0 total_score = sum(scores) bonus_points = 0 for i in range(1, n): if scores[i] > scores[i-1]: bonus_points += scores[i] - scores[i-1] return total_score + bonus_points"},{"question":"Given a string of size N, you need to check whether the string is a palindrome or not. A string is said to be a palindrome if it reads the same from left to right as it does from right to left. If the string is a palindrome, return True; otherwise, return False. Example 1: Input: Str = \\"madam\\" Output: PALINDROME Explanation: The string \\"madam\\" reads the same from left to right and right to left, so the answer is PALINDROME. Example 2: Input: Str = \\"hello\\" Output: NOT PALINDROME Explanation: The string \\"hello\\" does not read the same from left to right as it does from right to left, so the answer is NOT PALINDROME. User Task: The task is to complete the function `IsPalindrome()`, which takes a string `s` and its size `n`, and returns the boolean value `True` if it is a palindrome, and `False` otherwise. The driver will print \\"PALINDROME\\" or \\"NOT PALINDROME\\" accordingly. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 All characters in the string are lowercase English letters.","solution":"def IsPalindrome(s, n): Checks if the given string s of size n is a palindrome. Parameters: s (str): The input string. n (int): The size of the string. Returns: bool: True if the string is a palindrome, False otherwise. for i in range(n // 2): if s[i] != s[n - i - 1]: return False return True"},{"question":"You have been assigned the task of developing a new visualization tool for a company dealing with geospatial data. One of the key functionalities of this tool is to analyze whether a given set of points in a 2D plane form a closed shape, and if so, determine the type of polygon (convex or concave). A polygon is convex if all its interior angles are less than 180 degrees. Otherwise, it is concave. You need to write a program that takes a list of 2D points and determines if they form a closed polygon and whether that polygon is convex or concave. Input: The first line of the input contains a single integer n (3 ≤ n ≤ 10^5) - the number of points. The following n lines each contain two integers x and y (|x|, |y| ≤ 10^9), representing the coordinates of the points. Output: Print \\"NO POLYGON\\" if the points do not form a polygon. Print \\"CONVEX\\" if the points form a convex polygon. Print \\"CONCAVE\\" if the points form a concave polygon. Examples: Input: 5 0 0 1 2 2 4 1 1 -1 -1 Output: CONCAVE Input: 4 0 0 0 3 3 3 3 0 Output: CONVEX Input: 3 1 2 2 1 3 0 Output: CONVEX Notes: - The points are listed in counterclockwise order. - The points do not form a polygon if they lie on a single straight line.","solution":"def orientation(p, q, r): # To find orientation of ordered triplet (p, q, r). # The function returns following values # 0 -> p, q and r are collinear # 1 -> Clockwise # 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 elif val > 0: return 1 else: return 2 def is_polygon(points): n = len(points) if n < 3: return False return True def check_polygon_type(points): if not is_polygon(points): return \\"NO POLYGON\\" n = len(points) directions = [] for i in range(n): p = points[i] q = points[(i + 1) % n] r = points[(i + 2) % n] directions.append(orientation(p, q, r)) has_clockwise = any(d == 1 for d in directions) has_counterclockwise = any(d == 2 for d in directions) if has_clockwise and has_counterclockwise: return \\"CONCAVE\\" else: return \\"CONVEX\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) points = [] for i in range(n): x = int(data[2 * i + 1]) y = int(data[2 * i + 2]) points.append((x, y)) print(check_polygon_type(points))"},{"question":"In a fictional city, the government imposed a new traffic rule for cars driving on a straight road. Each car has to change lanes at specific times to avoid congestion. Every car starts in the first lane. The task is to simulate the movements of the cars based on the following rules: 1. Each lane is numbered from 1 to k. 2. Each car at time t should be in lane (t % k) + 1. You\'re given q queries. For each query, you receive two integers n and t: - n (1 le n le 10^9) represents the number of cars. - t (1 le t le 10^9) represents the time in seconds. Your task is to determine the final lane of the n-th car at time t. -----Input----- The first line of the input contains one integer q (1 le q le 1000) — the number of queries. The following q lines contain queries, one per line. Each query is given as two integers n and t. -----Output----- For each query print the final lane of the n-th car at time t. -----Example----- Input 4 1 3 5 10 3 4 2 1000000000 Output 4 2 5 3","solution":"def final_lane(n, t, k=5): Determines the final lane of the n-th car at time t. Args: n: the car number (1 ≤ n ≤ 10^9) t: the time in seconds (1 ≤ t ≤ 10^9) k: the number of lanes (default is 5) Returns: The final lane number of the n-th car at time t. return (t % k) + 1 def process_queries(queries): Processes multiple queries to determine the final lane of each car. Args: queries: A list of tuples, each containing (n, t) Returns: A list of results for each query. results = [] for n, t in queries: results.append(final_lane(n, t)) return results"},{"question":"Given a non-negative integer array B of length N, you are allowed to perform the following operation any number of times: * Choose any two different indices i and j (1 ≤ i, j ≤ N) such that B[i] < B[j], then increment B[i] by 1 and decrement B[j] by 1. Your task is to determine whether it\'s possible to make all elements of B equal using the given operation. Constraints * 1 ≤ N ≤ 100000 * 0 ≤ B_i ≤ 10^9 * B_i is an integer Input Input is given from Standard Input in the following format: N B_1 B_2 ... B_N Output Print \\"YES\\" if it\'s possible to make all elements of B equal, otherwise print \\"NO\\". Examples Input 3 1 2 3 Output YES Input 5 1 1 1 1 5 Output NO","solution":"def can_make_elements_equal(B): Determines if it is possible to make all elements of B equal using the given operations. Args: B (list): A list of non-negative integers. Returns: str: \\"YES\\" if it\'s possible to make all elements equal, otherwise \\"NO\\". total_sum = sum(B) n = len(B) # Check if the total sum is divisible by the number of elements if total_sum % n == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Chris is working on a custom number sorting algorithm for a class project. He wants to sort a list of numbers in a specific way: all the prime numbers should appear at the beginning of the list (sorted in ascending order), followed by all the non-prime numbers (also sorted in ascending order). A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Non-prime numbers in this context include the number 1, negative numbers, and all composite numbers. Your task is to help Chris by writing a function that takes a list of integers and returns a new list sorted as described above. # Function Signature ```python def custom_sort(numbers: List[int]) -> List[int]: pass ``` # Input - A list of integers `numbers` (1 ≤ len(numbers) ≤ 10^5, -10^6 ≤ numbers[i] ≤ 10^6 for each i) # Output - A new list of integers sorted such that all prime numbers appear first (in ascending order), followed by all non-prime numbers (in ascending order). # Example ```python >>> custom_sort([10, 2, 3, -1, 4, 1, 7]) [2, 3, 7, -1, 1, 4, 10] >>> custom_sort([15, 13, 5, 8, 6, -7]) [5, 13, -7, 6, 8, 15] ``` # Notes - You may use a helper function to determine if a number is prime. - Optimize your solution to handle the upper limits efficiently. # Function Implement the `custom_sort` function according to the above requirements.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def custom_sort(numbers: List[int]) -> List[int]: Sorts the list such that all prime numbers come first (in ascending order), followed by non-prime numbers (in ascending order). primes = [num for num in numbers if is_prime(num)] non_primes = [num for num in numbers if not is_prime(num)] return sorted(primes) + sorted(non_primes)"},{"question":"Implement an autocomplete feature! You are given a list of words and several prefix queries. For each query, return the list of words that start with the given prefix in lexicographical order. If there is no word that matches the prefix, return `NULL`. Input Format The first line contains an integer N, the number of words. The next N lines each contain a word. The following line contains an integer Q, the number of prefix queries. Q lines follow, each containing a prefix query. Output Format For each query, output the list of words that start with the given prefix in lexicographical order. If no words match, output `NULL`. Sample Input 5 apple app application bat batch 3 ap ba cat Sample Output app apple application bat batch NULL Concept This problem involves implementing a simple autocomplete feature using prefix matching. By sorting the list of words and then searching for words that start with the given prefix in a sorted manner, we can effectively match and return the necessary results. Consider using Python\'s built-in sorted function and list comprehensions to achieve this.","solution":"def autocomplete(words, queries): Returns a list of words that start with the given prefix in lexicographical order for each query. If no words match the prefix, return \'NULL\'. # Sort the words lexicographically words.sort() results = [] # For each query, filter and collect matching words for prefix in queries: matching_words = [word for word in words if word.startswith(prefix)] if matching_words: results.append(matching_words) else: results.append([\\"NULL\\"]) return results # Example usage: # words = [\\"apple\\", \\"app\\", \\"application\\", \\"bat\\", \\"batch\\"] # queries = [\\"ap\\", \\"ba\\", \\"cat\\"] # print(autocomplete(words, queries))"},{"question":"Alice is participating in a coding marathon. She has been given an integer array `arr` of length `n` and is required to solve q queries. Each query is given by a tuple (type, x, y), where: - type = 1: Replace the element at position `x` in the array with `y`. - type = 2: Calculate the sum of all elements between indices `x` and `y` (inclusive). Input The first line of the input contains the integer `n` (1 ≤ n ≤ 100,000) — the length of the array. The second line contains `n` integers `arr`, the initial elements of the array (0 ≤ arr[i] ≤ 1,000,000). The third line contains the integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the next `q` lines contains a query in the form of three integers `type`, `x`, and `y`. - If `type` is 1 (1 ≤ x ≤ n, 0 ≤ y ≤ 1,000,000): Update the element at index `x` (1-based) to `y`. - If `type` is 2 (1 ≤ x ≤ y ≤ n): Find the sum of elements from index `x` to `y` (inclusive). Output For each query of type 2, output the result on a new line. The answers should appear in the order the queries are given. Examples Input 6 1 2 3 4 5 6 3 2 1 3 1 2 10 2 2 5 Output 6 22 Note In the first example: - The first query calculates the sum of the first three elements: 1 + 2 + 3 = 6. - The second query updates the second element to 10, resulting in the array [1, 10, 3, 4, 5, 6]. - The third query calculates the sum of the elements from index 2 to 5: 10 + 3 + 4 + 5 = 22.","solution":"def handle_queries(n, arr, q, queries): result = [] for query in queries: t, x, y = query if t == 1: arr[x - 1] = y elif t == 2: result.append(sum(arr[x-1:y])) return result"},{"question":"You are given an integer array `A` of size `N`. Your task is to reorder the array in such a way that the absolute difference between any two consecutive elements is minimized. Once the array has been reordered, calculate the maximum absolute difference between any two consecutive elements in the reordered array. Write a function `minimize_difference` that takes the array as input and achieves the objective described. -----Constraints----- - 2 leq N leq 10^5 - -10^9 leq A[i] leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] -----Output----- Output the maximum absolute difference between any two consecutive elements in the reordered array. -----Sample Input----- 6 4 8 6 10 9 5 -----Sample Output----- 2 -----Explanation----- One possible reordering of the array where the absolute differences between consecutive elements are minimized is: [4, 5, 6, 8, 9, 10]. The absolute differences between each pair of consecutive elements in this array are: |5 - 4| = 1 |6 - 5| = 1 |8 - 6| = 2 |9 - 8| = 1 |10 - 9| = 1 The maximum of these differences is 2, thus the output is 2.","solution":"def minimize_difference(A): Reorders the array A such that the absolute difference between any two consecutive elements is minimized and returns the maximum absolute difference between any two consecutive elements in the reordered array. A.sort() max_diff = max(abs(A[i] - A[i-1]) for i in range(1, len(A))) return max_diff"},{"question":"You are given a string S consisting of uppercase English letters. You need to determine if S is a palindrome by ignoring any occurrence of the letter \'X\' in the string. A string is considered a palindrome if it reads the same backward as forward after removing all occurrences of the letter \'X\'. -----Constraints----- - 1 ≤ |S| ≤ 100 - S only contains uppercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"YES\\" if S is a palindrome after removing \'X\', otherwise print \\"NO\\". -----Sample Input----- XAXAX -----Sample Output----- YES After removing \'X\', the string becomes \'AA\', which is a palindrome. -----Sample Input----- AXBCXAXE -----Sample Output----- NO After removing \'X\', the string becomes \'ABCAE\', which is not a palindrome.","solution":"def is_palindrome_ignoring_X(S): Determine if the string S is a palindrome by ignoring any occurrence of the letter \'X\' filtered_string = \'\'.join(char for char in S if char != \'X\') return filtered_string == filtered_string[::-1]"},{"question":"You have been given a string S consisting of lowercase letters and digits. You need to find the sum of all the numbers that appear in the string. Numbers are defined as a contiguous sequence of digits. Note: Ensure each digit belongs to at most one number, and single digits that are part of the same numerical value should be added together. Example 1: Input: S = \\"a12bc34d0\\" Output: 46 Explanation: Numbers present are 12 and 34 and 0. Their sum is 12 + 34 + 0 = 46. Example 2: Input: S = \\"abc123xyz45\\" Output: 168 Explanation: Numbers present are 123 and 45. Their sum is 123 + 45 = 168. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function sumOfNumbers() that takes a string (S) as input and returns the sum of all numbers in the string. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5","solution":"import re def sumOfNumbers(S): Given a string S containing lowercase letters and digits, returns the sum of all the numbers in the string. # Use regex to find all contiguous sequences of digits in the string numbers = re.findall(r\'d+\', S) # Convert the sequences to integers and calculate the sum return sum(map(int, numbers))"},{"question":"You are given a list of integers representing the heights of students in a queue. An event organizer needs to form groups where the difference in the height between the tallest and shortest student in each group should not exceed a given integer `k`. Determine the minimum number of groups required to form such groups. --- Input --- The first line contains an integer `t` (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains two integers `n` and `k` (1 le n le 10^5, 0 le k le 10^9) — the number of students and the maximum allowed difference in height. - The second line contains `n` integers representing the heights of the students (1 le height le 10^9). --- Output --- For each test case, output a single integer — the minimum number of groups required. --- Examples --- Input 3 5 3 1 5 3 6 7 4 0 2 2 2 2 6 2 1 2 4 5 7 8 Output 2 1 3 --- Note --- For the first case, you can form two groups: [1, 3, 5] and [6, 7]. The maximum height difference in each group does not exceed 3. For the second case, all students have the same height, so a single group is sufficient with a height difference of 0. For the third case, you can form three groups: [1, 2], [4, 5], and [7, 8]. Each group has a maximum height difference of 2.","solution":"def minimum_groups(t, test_cases): results = [] for case in test_cases: n, k = case[0] heights = sorted(case[1]) groups = 1 group_start = heights[0] for height in heights: if height - group_start > k: groups += 1 group_start = height results.append(groups) return results"},{"question":"The government is planning a new highway construction project that aims to connect several cities. The cities are represented as nodes and the possible roads between these cities as edges in an undirected graph. Every road has an associated construction cost. The government wants to minimize the total construction cost by determining the minimal number of roads needed to connect all the cities such that every node is connected directly or indirectly to every other node. Write a function `minimum_highway_cost(n, roads)` that takes an integer `n`, the number of cities, and a list of tuples `roads`, each representing a possible road between two cities. Each tuple contains three integers `(u, v, cost)` where `u` and `v` are the cities connected by the road, and `cost` is the construction cost of the road. The function should return the minimum total construction cost required to connect all the cities. If it is not possible to connect all the cities, return -1. # Input Format: - An integer `n` which denotes the number of cities. - A list of tuples `roads`, each containing three integers `u`, `v`, and `cost`. # Output Format: - An integer representing the minimum total construction cost needed to connect all the cities, or -1 if it is not possible. # Constraints: - `1 <= n <= 1000` - `1 <= len(roads) <= 20000` - `1 <= cost <= 10^6` # Sample Input ```python n = 4 roads = [(1, 2, 5), (1, 3, 10), (2, 3, 4), (3, 4, 7)] ``` # Sample Output ```python 16 ``` # Explanation In the provided sample, the minimum roads to connect all cities are: - (1, 2, 5) - (2, 3, 4) - (3, 4, 7) The total cost for these roads is 5 + 4 + 7 = 16.","solution":"def minimum_highway_cost(n, roads): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 roads.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n min_cost = 0 num_edges = 0 for u, v, cost in roads: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: min_cost += cost union(parent, rank, x, y) num_edges += 1 if num_edges == n - 1: break if num_edges != n - 1: return -1 return min_cost"},{"question":"You are given a 2D grid representing a map where \'1\' represents land and \'0\' represents water. Your objective is to compute the number of distinct islands in the grid. An island is defined as a group of \'1\'s connected 4-directionally (horizontal or vertical). Two islands are distinct if they are not connected. Diagonal connections do not count. The size of the grid does not exceed 100x100. Create a program to find and output the number of distinct islands for each given grid. Input: The input consists of multiple grids. Each grid is described by several lines of \'0\' and \'1\' characters. A blank line separates each grid. The end of the input is indicated by a blank line after the last grid. Output: For each grid, output the number of distinct islands on a new line. Example: Input: ``` 11110 11010 11000 00000 11000 11000 00100 00011 ``` Output: ``` 1 3 ```","solution":"def num_islands(grid): if not grid: return 0 rows = len(grid) cols = len(grid[0]) visited = set() def dfs(r, c): if (r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or (r, c) in visited): return visited.add((r, c)) dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and (r, c) not in visited: dfs(r, c) count += 1 return count def parse_input(input_str): grids = input_str.strip().split(\\"nn\\") return [grid.split(\\"n\\") for grid in grids] def count_islands(input_str): grids = parse_input(input_str) results = [] for grid in grids: results.append(num_islands(grid)) return results"},{"question":"A company has established a new scheduler to decide which projects to prioritize. Each project has a priority level represented by a letter (\'A\' being the highest priority, \'B\' being the next highest, and so on, up to \'Z\' which is the lowest priority). Each project also has a certain number of days required for completion. The scheduler should follow these rules: 1. Projects should be scheduled from the highest priority to the lowest priority. 2. If two projects have the same priority, they should be scheduled based on the shortest number of days required to the longest number of days. 3. If two projects have the same priority and require the same number of days, they can be scheduled in any order. Given a list of projects, design an algorithm to output the order in which the projects should be scheduled. -----Input----- The first line contains an integer t (1 leq t leq 100) – the number of test cases. Description of the test cases follows. For each test case: - The first line contains an integer n (1 leq n leq 1000) – the number of projects. - The next n lines each contain a character and an integer, separated by a space, representing the priority level (a capital letter) and the number of days required for that project respectively. -----Output----- For each test case, print the order of projects in the format \\"priority_days\\", one per line. -----Example----- Input 2 3 A 5 B 2 A 3 4 C 1 B 3 A 2 B 2 Output A 3 A 5 B 2 B 2 B 3 A 2 C 1 -----Note----- In the first test case: - There are 3 projects: \\"A 5\\", \\"B 2\\", and \\"A 3\\". - According to the rules, the projects should be scheduled as follows: \\"A 3\\" -> \\"A 5\\" -> \\"B 2\\". In the second test case: - There are 4 projects: \\"C 1\\", \\"B 3\\", \\"A 2\\", and \\"B 2\\". - According to the rules, the projects should be scheduled as follows: \\"A 2\\" -> \\"B 2\\" -> \\"B 3\\" -> \\"C 1\\".","solution":"def schedule_projects(test_cases): results = [] for n, projects in test_cases: # Sort the projects first by priority (ascending order) and then by days in ascending order sorted_projects = sorted(projects, key=lambda x: (x[0], x[1])) results.append(sorted_projects) return results"},{"question":"Problem Eva is working on a custom encryption algorithm for her data. She wants to write a function that encrypts a message using a particular method. The method involves shifting each letter of the message by a fixed number of positions down the alphabet. If the shift takes the letter past \'z\', it wraps around to the start of the alphabet. For example, with a shift of 3, \'a\' becomes \'d\', \'w\' becomes \'z\', and \'z\' becomes \'c\'. Additionally, to add more security, numbers in the message should also be shifted, wrapping around from 9 to 0. For example, with a shift of 2, \'1\' becomes \'3\' and \'9\' becomes \'1\'. Spaces should remain unchanged. Write a function that takes a message and a shift value and returns the encrypted message. Constraints * The input message consists only of lowercase letters, digits, and spaces. * 0 ≤ shift ≤ 25 * The length of the message will be between 1 and 1000 characters. Input * A string representing the message. * An integer representing the shift value. Output * A string representing the encrypted message. Examples Input \\"hello world 123\\", 3 Output \\"khoor zruog 456\\" Input \\"abc x19\\", 5 Output \\"fgh c64\\" Note In the first example, each letter is shifted 3 places down the alphabet, and each digit is shifted 3 places, with wrapping around the end. The space remains unchanged. In the second example, the letters \'a\', \'b\', \'c\' are shifted to \'f\', \'g\', \'h\' respectively, \'x\' is shifted to \'c\', \'1\' to \'6\' and \'9\' to \'4\'.","solution":"def encrypt_message(message, shift): Encrypts the message by shifting each letter and number by the given shift. Args: message (str): The message to be encrypted. shift (int): The shift amount. Returns: str: The encrypted message. encrypted_message = [] for char in message: if char.isalpha(): new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encrypted_message.append(new_char) elif char.isdigit(): new_char = chr((ord(char) - ord(\'0\') + shift) % 10 + ord(\'0\')) encrypted_message.append(new_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to find the most frequent character in the string. If there are multiple characters with the same highest frequency, you should return the lexicographically smallest one among them. Then, you should return the k-th character from the sorted order of characters. If k is greater than the number of unique characters in the string, return \'None\'. -----Input:----- - The first line contains a string of lowercase letters. - The second line contains an integer k. -----Output:----- Print the most frequent character followed by the k-th character in the sorted order of unique characters, separated by a space. -----Constraints----- - 1 leq length of string leq 1000 - 1 leq k leq 26 -----Sample Input:----- abracadabra 3 -----Sample Output:----- a c -----EXPLANATION:----- In the given string, \'a\' is the most frequent character as it appears 5 times. The sorted unique characters of the string are: [\'a\', \'b\', \'c\', \'d\', \'r\']. The 3rd character in this sorted list is \'c\'.","solution":"def most_frequent_and_kth_character(s, k): Returns the most frequent character and the k-th character in the sorted order of unique characters. If k is greater than the number of unique characters, returns \'None\' for the k-th character. from collections import Counter # Calculate frequency of each character freq = Counter(s) # Find the most frequent characters and their frequency most_frequent_char = min([char for char, count in freq.items() if count == max(freq.values())]) # Get sorted list of unique characters sorted_unique_chars = sorted(freq.keys()) # Get the k-th character in the sorted list, if it exists kth_char = sorted_unique_chars[k-1] if k <= len(sorted_unique_chars) else \'None\' return most_frequent_char, kth_char # Sample input s = \\"abracadabra\\" k = 3 # Getting the output result = most_frequent_and_kth_character(s, k) result_str = f\\"{result[0]} {result[1]}\\" print(result_str)"},{"question":"Dan the Researcher is organizing the laboratory shelves in the lab! The shelves are arranged in a straight line, and each shelf can hold a certain number of laboratory items. Dan wants to make sure that the items are distributed such that no shelf has more items than any shelf to its right. Given the initial number of items on each shelf, can you help Dan rearrange the items to achieve this goal without changing the total number of items on any shelf? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of shelves in the laboratory. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100000), where ai is the number of items on the i-th shelf. -----Output----- Print a single line containing n integers b1, b2, ..., bn, where bi represents the number of items on the i-th shelf after redistribution, meeting Dan\'s requirement. If there are multiple solutions, any correct solution will be accepted. -----Examples----- Input 5 4 2 7 5 3 Output 2 2 3 5 7 Input 4 10 5 8 2 Output 2 5 8 10 Input 3 4 4 4 Output 4 4 4 -----Note----- In the first sample, the initial number of items on the shelves is [4, 2, 7, 5, 3]. The rearranged items are [2, 2, 3, 5, 7], which ensures that no shelf has more items than any shelf to its right. There are a variety of valid outputs, and any sorted combination of the initial items would be considered correct.","solution":"def rearrange_items_on_shelves(n, items): Rearranges the items on the shelves so that no shelf has more items than any shelf to its right. Parameters: n (int): The number of shelves. items (list of int): The number of items on each shelf. Returns: list of int: Rearranged list of items. items.sort() return items"},{"question":"Write a function that takes as input a list of integers and returns the largest integer that can be obtained by concatenating the list\'s elements. Given an input list of non-negative integers (0-9), sort the elements in such a way to form the largest possible number and return this as a string. # Requirements: - The input list will contain between 1 and 1000 elements. - Each element in the list is a single-digit non-negative integer between 0 and 9. - The result should be returned as a string to preserve the number\'s format without unintentional leading zeroes. # Examples: ```python def largest_concatenated_number(numbers: List[int]) -> str: pass # Example 1: largest_concatenated_number([3, 30, 34, 5, 9]) # Output: \\"9534330\\" # Example 2: largest_concatenated_number([1, 2, 3, 4, 5]) # Output: \\"54321\\" # Example 3: largest_concatenated_number([0, 0, 0]) # Output: \\"0\\" # Example 4: largest_concatenated_number([9, 8, 7, 6, 5, 4, 3, 2, 1]) # Output: \\"987654321\\" ``` # Notes: 1. If all numbers are zero, the result should be \\"0\\". 2. Sorting logic should consider the concatenation of elements to achieve the largest possible number. 3. Handle edge cases, such as when there\'s only one element or repetitions of the same number.","solution":"from typing import List def largest_concatenated_number(numbers: List[int]) -> str: if not numbers: return \\"0\\" # Convert integers to strings for easier manipulation str_nums = list(map(str, numbers)) # Custom sort: Sort numbers based on concatenation comparison str_nums.sort(key=lambda x: x * 10, reverse=True) # If the highest number is \'0\', the result is \'0\' if str_nums[0] == \'0\': return \'0\' # Join sorted strings and return the result return \'\'.join(str_nums)"},{"question":"You are given an array of integers representing energy levels of `n` robots, where `n` is an even number. The robots are paired up into teams, and the energy of a team is defined as the minimum energy of its two members. For each possible teaming arrangement, calculate the sum of the energies of all teams and output the maximum sum possible. Input The first line of input contains an integer `n` (2 ≤ n ≤ 10^5), the number of robots. The second line contains `n` distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the energy levels of the robots. Output Print a single integer – the maximum sum of the energies of an optimal team pairing. Example Input 4 5 3 2 7 Output 8 Explanation In the given example, you can form two teams with the following pairings: - Pair robot with energy 3 with robot with energy 5, and pair robot with energy 2 with robot with energy 7. The team\'s sum is min(3, 5) + min(2, 7) = 3 + 2 = 5. - Pair robot with energy 2 with robot with energy 3, and pair robot with energy 5 with robot with energy 7. The team\'s sum is min(2, 3) + min(5, 7) = 2 + 5 = 7. - Pair robot with energy 3 with robot with energy 7, and pair robot with energy 2 with robot with energy 5. The team\'s sum is min(3, 7) + min(2, 5) = 3 + 2 = 5. - Pair robot with energy 2 with robot with energy 5, and pair robot with energy 3 with robot with energy 7. The team\'s sum is min(2, 5) + min(3, 7) = 2 + 3 = 5. The maximum sum of team energies, when optimally paired, is 8.","solution":"def max_energy_sum(n, energies): Compute the maximum sum of the energies of teams in an optimal pairing. Args: n: Integer representing the number of robots energies: List of integers representing the energy levels of the robots Returns: Integer - maximum sum of team energies when optimally paired # Sort the energies in ascending order energies.sort() # Initialize the maximum sum max_sum = 0 # Iterate over the sorted list in pairs to form optimal teams for i in range(n // 2): max_sum += energies[i] return max_sum"},{"question":"The mayor of a small town wants to build a few fountains across the town to provide easy access to drinking water for all residents. The town can be represented as a number line where some houses are located at distinct integer positions. The mayor has decided that each fountain can cover a certain distance on both sides, ensuring all residents have access to water within minimal walking distance. -----Input----- The first line contains an integer n, (1 ≤ n ≤ 100), representing the number of houses. The second line contains n integers, h1, h2,..., hn, (1 ≤ hi ≤ 1000), denoting the positions of the houses. The third line contains an integer d, (1 ≤ d ≤ 1000), representing the distance each fountain can cover to the left and right from its installation point. -----Output----- Print the minimal number of fountains needed to ensure every house has access to drinking water. -----Example----- Input: 5 1 5 9 13 20 4 Output: 2","solution":"def minimum_fountains(n, houses, d): Returns the minimal number of fountains needed to ensure every house has access to drinking water. Parameters: n (int): The number of houses. houses (list of int): The positions of the houses. d (int): The distance each fountain can cover to the left and right from its installation point. Returns: int: The minimal number of fountains needed. houses.sort() fountains = 0 i = 0 while i < n: # Find the farthest house that can be covered starting from houses[i] fountain_pos = houses[i] + d while i < n and houses[i] <= fountain_pos: i += 1 fountains += 1 # Move to the next house that is not covered by the current fountain if i < n: i -= 1 fountain_pos = houses[i] + d while i < n and houses[i] <= fountain_pos + d: i += 1 return fountains"},{"question":"In a distant galaxy, the inhabitants use a unique numbering system based on the Fibonacci sequence. Each digit in their Fibonacci numeral system represents a distinct Fibonacci number. For example, the Fibonacci sequence starts with 1, 2, 3, 5, 8, 13, 21, and so on. The inhabitants have certain rules for their numeral system: 1. The numeral system does not use the number \'1\' directly. Instead, they start with \'2\' as the first Fibonacci number, followed by \'3\', \'5\', \'8\', and so on. 2. Each numeral is represented by its corresponding position in the Fibonacci sequence. For example, the number \'2\' is represented by \'1\', \'3\' by \'2\', \'5\' by \'3\', and so on. Your task is to translate a given number into the corresponding numeral in this unique Fibonacci numeral system. -----Input----- The single line contains a single integer n (1 ≤ n ≤ 10^6). -----Output----- In a single line, output a string representing the number n in the unique Fibonacci numeral system. -----Examples----- Input 3 Output 2 Input 8 Output 5 -----Note----- In the first test case, the number 3 is the second Fibonacci number starting with 2, so it is represented as \'2\'. In the second test case, the number 8 is the fourth Fibonacci number starting with 2, so it is represented as \'5\'.","solution":"def fibonacci_representation(n): Returns the representation of the number n in the unique Fibonacci numeral system. fibonacci_sequence = [] a, b = 1, 2 while b <= n: fibonacci_sequence.append(b) a, b = b, a + b if b == n + 1: # This happens when n is a Fibonacci number fibonacci_sequence.append(b) try: index = fibonacci_sequence.index(n) return str(index + 1) except ValueError: return \\"Not a valid input according to the unique Fibonacci numeral system.\\""},{"question":"A popular programming assessment platform has a new coding challenge for you. The challenge is to develop a search engine which ranks websites based on certain keywords. A website is represented as a string, and the keywords are represented as individual strings. Your task is to count the number of occurrences of each keyword in a given set of websites and return the total counts for each keyword across all websites. The keywords are case insensitive, but the website content is case sensitive. Inputs: The first line of input contains an integer N, the number of websites. This is followed by N lines, each containing a single string representing the content of a website. The next line contains an integer M, the number of keywords. This is followed by M lines, each containing a single keyword. Outputs: You should output M lines, each containing a single integer, which represents the total count of occurrences of the corresponding keyword across all websites. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 100 1 ≤ length of each website string ≤ 10000 1 ≤ length of each keyword ≤ 100 Example: Input: 3 \\"Search engines are useful\\" \\"Many search engines are available, use them wisely\\" \\"Using search engines effectively is a skill\\" 2 \\"search\\" \\"engines\\" Output: 3 3","solution":"def count_keyword_occurrences(n, websites, m, keywords): Counts the occurrences of keywords in a list of websites. Parameters: n (int): Number of websites. websites (list of str): List containing website contents as strings. m (int): Number of keywords. keywords (list of str): List containing keywords as strings. Returns: list of int: List containing count of occurrences of each keyword across all websites. keyword_counts = [0] * m normalized_keywords = [keyword.lower() for keyword in keywords] for website in websites: normalized_website = website.lower() for i, keyword in enumerate(normalized_keywords): keyword_counts[i] += normalized_website.count(keyword) return keyword_counts"},{"question":"Julia is arranging a fashion show and needs your help with distributing inventory among different clothing stores. Each store must receive exactly one unique item, and there should be no duplicates in any given store. You are given a list of items, each described by an integer ID, and the total number of stores. The number of items will always equal the number of stores. Your task is to write a program that distributes items to each store without any duplicates. If there is at least one item that can be distributed this way, output \\"Items distributed successfully\\". Otherwise, if it\'s impossible to achieve this, output \\"Distribution failed\\". Input The first line contains an integer n (1 ≤ n ≤ 100), indicating the number of items as well as the number of stores. The second line contains n distinct integers a_i (1 ≤ a_i ≤ 1000), which are the IDs of the items. Output Output either \\"Items distributed successfully\\" or \\"Distribution failed\\". Examples Input 3 4 12 7 Output Items distributed successfully Input 1 999 Output Items distributed successfully Input 0 Output Distribution failed","solution":"def distribute_items(n, items): Distributes items to the stores ensuring each store gets a unique item. Parameters: n (int): Number of items and stores. items (list of int): The list of item IDs. Returns: str: Either \\"Items distributed successfully\\" or \\"Distribution failed\\". if n == 0: return \\"Distribution failed\\" # Verify if all items are unique and match the number of stores if len(set(items)) == n: return \\"Items distributed successfully\\" else: return \\"Distribution failed\\""},{"question":"You are given an array of integers and an integer k. Your task is to find the number of distinct pairs (i, j) where 0 <= i < j < len(array) and array[i] * array[j] is divisible by k. Example 1: Input: array = [1, 2, 3, 4, 5], k = 2 Output: 7 Explanation: The pairs are (0,1), (0,3), (1,2), (1,3), (1,4), (2,3), (2,4). Example 2: Input: array = [2, 4, 6, 8], k = 4 Output: 6 Explanation: The pairs are (0,1), (0,2), (0,3), (1,2), (1,3), (2,3). Example 3: Input: array = [3, 5, 7, 11], k = 10 Output: 0 Explanation: There are no pairs whose product is divisible by 10. Example 4: Input: array = [5, 10, 15, 20, 25], k = 5 Output: 10 Explanation: The pairs are (0, 1), (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4). Constraints: The elements in the array are positive integers. 1 <= array.length <= 1000 1 <= array[i], k <= 10^6","solution":"def count_pairs(array, k): Returns the number of distinct pairs (i, j) where 0 <= i < j < len(array) and array[i] * array[j] is divisible by k. Parameters: array (list): The input array of positive integers. k (int): The integer value for the divisibility condition. Returns: int: The number of such distinct pairs. count = 0 for i in range(len(array)): for j in range(i + 1, len(array)): if (array[i] * array[j]) % k == 0: count += 1 return count"},{"question":"``` You are given a grid of size n x m where each cell in the grid contains an integer. The grid represents a field of apple trees, and the integer in each cell represents the number of apples in that tree. You have to start at the top-left corner of the grid and make your way to the bottom-right corner, while only being able to move either down or to the right at any point in time. Given these constraints, your task is to find the maximum number of apples you can collect on your way to the bottom-right corner. Note: You start at the top-left corner, which means the apples in the first cell are included in your collection. Example 1: Input: grid = [[1,2,3],[4,5,6],[7,8,9]] Output: 21 Explanation: The path with the maximum number of apples is 1 -> 4 -> 7 -> 8 -> 9. Total apples = 1+4+7+8+9 = 29. Example 2: Input: grid = [[1,2],[5,6]] Output: 12 Explanation: The path with the maximum number of apples is 1 -> 2 -> 6. Total apples = 1+2+6 = 9. Your Task: You don\'t need to read input or print anything. Complete the function maxApples() which takes grid as input parameter and returns the maximum number of apples that can be collected. Constraints: 1 ≤ n, m ≤ 1000 1 ≤ grid[i][j] ≤ 100 ```","solution":"def maxApples(grid): Returns the maximum number of apples that can be collected by moving from the top-left corner to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Your task is to write a function that reads a list of integers and finds the median value of the sequence. If the number of integers is even, return the average of the two middle numbers as the median. Input A list of integers ai (1 ≤ ai ≤ 1000). The number of integers is less than or equal to 100. Output Print the median value. If the number of integers is even, print the average of the two middle numbers. Example Input 5 1 7 3 9 4 Output 4 Input 4 1 3 2 8 Output 2.5","solution":"def find_median(numbers): This function takes a list of integers and returns the median value. If the number of integers is even, it returns the average of the two middle numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: return sorted_numbers[n // 2] else: return (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2"},{"question":"Given a list of distinct positive integers, find the closest integers in the list that are neighbors in value, i.e., the difference between them is the smallest possible among all pairs of integers. Return the pair of integers in ascending order. Example 1: Input: arr = [23, 67, 89, 45, 78] Output: [67, 78] Explanation: The smallest difference is 11 between 67 and 78. Example 2: Input: arr = [4, 9, 12, 25, 43] Output: [9, 12] Explanation: The smallest difference is 3 between 9 and 12. Your Task: You don\'t need to read or print anything. Your task is to complete the function closestPair() which takes the list arr as input parameter and returns the closest pair of integers in ascending order. Expected Time Complexity: O(n log n) Expected Space Complexity: O(1) Constraints: - 2 <= len(arr) <= 1000 - 1 <= arr[i] <= 10000","solution":"def closestPair(arr): Given a list of distinct positive integers, find the closest integers in the list that are neighbors in value. Return the pair in ascending order. arr.sort() min_diff = float(\'inf\') result = [] for i in range(len(arr) - 1): diff = arr[i + 1] - arr[i] if diff < min_diff: min_diff = diff result = [arr[i], arr[i + 1]] return result"},{"question":"Given an integer array nums and an integer target, write a program to find all unique pairs in the array whose sum equals the target. Each pair in the result must be sorted in ascending order, and the result list should not contain duplicate pairs. Example 1: Input: nums = [1, 2, 3, 4, 3, 2, 1], target = 5 Output: [[1, 4], [2, 3]] Explanation: The pairs are (1, 4) and (2, 3). Sorted in ascending order and duplicates are removed. Example 2: Input: nums = [1, 2, 3, 4, 5], target = 7 Output: [[2, 5], [3, 4]] Explanation: The pairs are (2, 5) and (3, 4). Sorted in ascending order and duplicates are removed. Your Task: You do not need to read input or print anything. Your task is to complete the function findPairs() which takes nums and target as input parameters and returns a list of all unique pairs whose sum equals the target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def findPairs(nums, target): seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"A construction company needs to organize the delivery of construction materials to multiple construction sites. Each delivery can be represented as a segment on a line, where each endpoint on the segment represents a construction site that receives the delivery. The company wants to find an optimal way to schedule as many non-overlapping deliveries as possible. Each delivery in the schedule requires a start time and end time, and these times are given by an array of `n` pairs of integers, where each pair `(s, t)` represents the start and end times of a delivery. The goal is to select the maximum number of deliveries that do not overlap with each other. Two deliveries `(s1, t1)` and `(s2, t2)` are considered non-overlapping if `t1 <= s2` or `t2 <= s1`. Write a function `max_non_overlapping_deliveries(n, deliveries)` that takes an integer `n` representing the total number of deliveries, and a list `deliveries` of `n` pairs of integers representing the start and end times of these deliveries. The function should return the maximum number of non-overlapping deliveries that can be scheduled. -----Input----- - An integer `n` (1 le n le 10^5) representing the total number of deliveries. - A list `deliveries` of `n` pairs of integers, where each pair `(s, t)` (0 le s < t le 10^9) represents the start and end times of a delivery. -----Output----- - A single integer representing the maximum number of non-overlapping deliveries. -----Examples----- Input 5 [(1, 3), (2, 5), (4, 6), (6, 7), (5, 8)] Output 3 Input 3 [(0, 2), (3, 4), (1, 5)] Output 2 -----Explanation----- In the first example, the optimal schedule might include deliveries `(1, 3)`, `(4, 6)`, and `(6, 7)`, for a total of 3 deliveries. In the second example, one possible optimal schedule could include deliveries `(0, 2)` and `(3, 4)`, for a total of 2 deliveries.","solution":"def max_non_overlapping_deliveries(n, deliveries): Returns the maximum number of non-overlapping deliveries that can be scheduled. Parameters: n (int): Total number of deliveries. deliveries (list of pairs of int): List of start and end times of deliveries. Returns: int: Maximum number of non-overlapping deliveries. # Sort the deliveries by their end times deliveries.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in deliveries: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"In a large greenhouse, there are multiple types of plants. Each type of plant grows at a different rate. The gardeners want to know how tall the plants will be after a certain number of days to ensure they provide enough support structures. Your task is to calculate the height of each type of plant given their initial height and daily growth rate over a specified number of days. Input: The first line contains an integer T, the number of test cases. Each test case consists of three space-separated integers: - H, the initial height of the plant in centimeters. - R, the rate of growth in centimeters per day. - N, the number of days. Output: For each test case, output the height of the plant in centimeters after N days. Constraints: 1 ≤ T ≤ 1000 0 ≤ H, R ≤ 10^6 0 ≤ N ≤ 10^4 SAMPLE INPUT: 3 10 2 5 5 3 10 100 0 50 SAMPLE OUTPUT: 20 35 100 Explanation: For the first test case, the initial height is 10 cm and the growth rate is 2 cm per day. After 5 days, the plant will be 10 + 2*5 = 20 cm tall. For the second test case, the initial height is 5 cm and the growth rate is 3 cm per day. After 10 days, the plant will be 5 + 3*10 = 35 cm tall. For the third test case, the initial height is 100 cm with a growth rate of 0 cm per day. After 50 days, the plant will remain 100 cm tall.","solution":"def calculate_heights(test_cases): Calculate the heights of plants after a certain number of days. Parameters: test_cases (list of tuples): A list of tuples, each containing H (initial height), R (growth rate), and N (number of days). Returns: list: A list of integers representing the height of the plant after N days. results = [] for H, R, N in test_cases: final_height = H + R * N results.append(final_height) return results def process_input(input_str): Process the raw input string and return structured test cases Parameters: input_str (str): The input string containing number of test cases followed by test case data Returns: list of tuples: Structured test cases lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): H, R, N = map(int, lines[i].split()) test_cases.append((H, R, N)) return test_cases"},{"question":"A \\"Happy Number\\" is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers. Write a function to determine if a number is happy. ------ Input ------ Several test cases are given. The first line of the sample input contains an integer T - the number of test cases. Then, T lines follow. Each line contains a single integer n - the number to be checked for happiness. ------ Output ------ For each test case, output \\"Happy\\" if the number is a happy number, and \\"Unhappy\\" otherwise. ------ Constraints ------ 1≤T≤1000 1≤n≤10^{18} ----- Sample Input 1 ------ 3 19 2 7 ----- Sample Output 1 ------ Happy Unhappy Happy","solution":"def is_happy(n): Determines if a number is a happy number. def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1 def check_happiness(test_cases): results = [] for n in test_cases: if is_happy(n): results.append(\\"Happy\\") else: results.append(\\"Unhappy\\") return results"},{"question":"You are tasked with developing a new feature for a text editor that performs word substitutions based on a set of rules. Each rule specifies a word to be replaced and the corresponding replacement word. The editor needs to apply these rules efficiently, replacing all occurrences of each word in the provided text. If multiple rules apply, they should be applied sequentially in the order they were given. **Your task:** Write a function that applies a given set of word replacement rules to a text. **Function Signature:** ```python def apply_replacements(text: str, rules: List[Tuple[str, str]]) -> str: ``` **Input:** - `text` (a string): The original text. - `rules` (a list of tuples): Each tuple (a pair of strings) includes two elements: the word to be replaced and the replacement word. **Output:** - The modified text after applying all the replacement rules. **Example:** ```python text = \\"the quick brown fox jumps over the lazy dog\\" rules = [(\\"quick\\", \\"slow\\"), (\\"fox\\", \\"cat\\"), (\\"jumps\\", \\"crawls\\")] print(apply_replacements(text, rules)) ``` Output: ``` the slow brown cat crawls over the lazy dog ``` **Guidelines:** - The function should replace whole words only. Partial matches should not be replaced. - The function should be case-sensitive (i.e., \\"Fox\\" and \\"fox\\" are treated as different words). - Sequential application of rules implies that earlier rules in the list are applied before later ones, potentially leading to multiple stages of text transformation. **Note:** - Ensure the solution handles edge cases such as when the text is empty or when no rules are provided. - The solution should be efficient in handling texts and rules up to a reasonable length.","solution":"from typing import List, Tuple def apply_replacements(text: str, rules: List[Tuple[str, str]]) -> str: Applies a set of word replacement rules to the given text. Parameters: text (str): The original text. rules (List[Tuple[str, str]]): List of tuples where each contains a word to be replaced and the corresponding replacement word. Returns: str: The modified text after applying all the replacement rules. for old_word, new_word in rules: words = text.split() words = [new_word if word == old_word else word for word in words] text = \' \'.join(words) return text"},{"question":"Alice is given an integer array `nums` of length `n`, where each number is between `1` and `100` inclusive. She wants to partition the array into two non-empty subsets such that: 1. The sum of the elements in the first subset is equal to the sum of elements in the second subset. 2. Each subset contains at least one element. Can you determine if it is possible to partition the array in such a manner? If so, output `YES`, otherwise output `NO`. -----Input----- The input consists of multiple test cases. The first line contains an integer `t` (1 le t le 100) — the number of test cases. For each test case: - The first line contains an integer `n` (2 le n le 100) — the length of the array. - The second line contains `n` space-separated integers nums[i] (1 le nums[i] le 100) — the elements of the array. -----Output----- For each test case, output `YES` if the array can be partitioned into two subsets with equal sum, otherwise output `NO`. -----Examples----- Input 3 4 1 5 11 5 4 1 2 3 5 5 3 3 3 4 5 Output YES NO YES -----Note----- In the first test case, the array can be partitioned as `[1, 5, 5]` and `[11]`, both of which sum to `11`. In the second test case, it is not possible to partition the array into two subsets with equal sum. In the third test case, the array can be partitioned as `[3, 3, 3]` and `[4, 5]`, as both sums are equal to `9`.","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" def solve(t, cases): results = [] for i in range(t): nums = cases[i] results.append(can_partition(nums)) return results"},{"question":"Given an array of integers Arr of length N, your task is to modify the array such that no two adjacent elements are equal. You are allowed to change any element to whatever integer you like. Return the minimum number of changes required. Example 1: Input: N = 5 Arr[] = {1, 2, 2, 3, 3} Output: 2 Explanation: You can change the 2 at index 2 and the 3 at index 4 to get the array [1, 2, 1, 3, 4]. This requires 2 changes. Example 2: Input: N = 6 Arr[] = {4, 4, 4, 4, 4, 4} Output: 3 Explanation: You can change every other element to get the array [4, 1, 4, 1, 4, 1]. This requires 3 changes. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minChanges() which takes an Integer N and an array Arr as input, and returns the minimum number of changes required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= Arr[i] <= 10^9","solution":"def minChanges(N, Arr): Returns the minimum number of changes required to modify the array such that no two adjacent elements are equal. changes = 0 for i in range(1, N): if Arr[i] == Arr[i - 1]: # Change the current element Arr[i] += 1 # You can also subtract 1, choose any number which is not equal to Arr[i - 1] changes += 1 return changes"},{"question":"In a medieval kingdom, a wise king has devised a game for his court jesters to entertain him. The game involves a grid of size `n x n` filled with integers. The jesters can perform the \\"row flip\\" or \\"column flip\\" operations any number of times. A \\"row flip\\" is done by reversing all integers in a single row, and a \\"column flip\\" is done by reversing all integers in a single column. The goal is to make the sum of each row equal to the same value. The king has presented the jesters with an initial grid configuration. Your task is to determine whether it is possible to perform a series of row and/or column flips such that the sum of integers in each row becomes the same. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the size of the grid. Each of the next `n` lines contains `n` integers, representing the initial grid configuration. The integers in the grid are between -100 and 100. Output Output \\"YES\\" if it is possible to make the sums of all rows equal, and \\"NO\\" otherwise. Examples Input 3 1 -1 1 0 0 0 1 -1 1 Output YES Input 2 1 2 3 4 Output NO Input 4 1 -1 1 -1 -1 1 -1 1 1 1 -1 -1 -1 -1 1 1 Output YES Explanation of Example 1: - By flipping the first row or the last row, the grid can be transformed into: ``` 1 1 -1 0 0 0 1 1 -1 ``` - This way, the sum of each row is `1`. Thus, the output is \\"YES\\".","solution":"def can_make_row_sums_equal(grid): n = len(grid) # Calculate the sum of each row and each column row_sums = [sum(row) for row in grid] col_sums = [sum(grid[i][j] for i in range(n)) for j in range(n)] # Check if all row sums can be made equal by flipping rows or columns. for target in row_sums: if all((row_sum == target or row_sum == -target) for row_sum in row_sums): return \\"YES\\" for target in col_sums: if all((col_sum == target or col_sum == -target) for col_sum in col_sums): return \\"YES\\" return \\"NO\\""},{"question":"You are organizing a conference and you need to allocate the presentation slots to different speakers. Each speaker has a required time duration for their presentation and a given start and end time window within which they are available to present. Your goal is to maximize the total number of presentations that can be scheduled without any overlaps. A presentation can be scheduled to start exactly at the available start time or any time after that, but it must end before or exactly at the available end time. It is not necessary to use the conference room for the entirety of the available window for any given speaker, only within their specific time constraints. Write a program that determines the maximum number of presentations that can be scheduled without conflicts. -----Input----- The input consists of a single test case. The first line contains an integer n (1 le n le 100), the number of speakers. Each of the next n lines contains three integers s_ i, e_ i, and d_ i (0 le s_ i < e_ i le 1000 and 1 le d_ i le e_ i - s_ i) representing the start time, end time, and duration of the presentation for the i^{th} speaker, respectively. -----Output----- Display the maximum number of presentations that can be scheduled without any overlaps. -----Examples----- Sample Input 1: 3 0 5 3 2 7 2 6 9 2 Sample Output 1: 2 Sample Input 2: 4 0 5 1 1 4 2 3 9 4 5 8 2 Sample Output 2: 3","solution":"def max_presentations(speakers): Returns the maximum number of presentations that can be scheduled without conflicts. # Convert each speaker\'s available window and duration to a possible presentation time window possible_presentations = [] for start, end, duration in speakers: if duration <= (end - start): possible_presentations.append((start, start + duration)) # Sort presentations by their end time (earliest end time first) possible_presentations.sort(key=lambda x: x[1]) num_presentations = 0 current_end_time = 0 # Iterate through sorted presentations and count non-overlapping ones for start, end in possible_presentations: if start >= current_end_time: num_presentations += 1 current_end_time = end return num_presentations"},{"question":"Given an array \'arr\' of n integers and an integer k, return the count of distinct elements in every contiguous subarray of size k. Example 1: Input: arr = [1, 2, 1, 3, 4, 2, 3] k = 4 Output: [3, 4, 4, 3] Explanation: There are 4 subarrays of size 4: [1, 2, 1, 3], [2, 1, 3, 4], [1, 3, 4, 2], [3, 4, 2, 3] with distinct elements counts of 3, 4, 4 and 3 respectively. Example 2: Input: arr = [1, 2, 4, 4] k = 2 Output: [2, 2, 1] Explanation: There are 3 subarrays of size 2: [1, 2], [2, 4], [4, 4] with distinct elements counts of 2, 2, and 1 respectively. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctElementsInEverySubarray() which takes the array \'arr\' and the integer \'k\' as input arguments and returns an array containing the count of distinct elements in every contiguous subarray of size k. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^6 1 ≤ arr[i], k ≤ n","solution":"from collections import defaultdict def countDistinctElementsInEverySubarray(arr, k): Returns the count of distinct elements in every contiguous subarray of size k. if k > len(arr): return [] distinct_counts = [] freq_map = defaultdict(int) distinct_count = 0 # Ensure the initial window for i in range(k): if freq_map[arr[i]] == 0: distinct_count += 1 freq_map[arr[i]] += 1 distinct_counts.append(distinct_count) for i in range(k, len(arr)): if freq_map[arr[i - k]] == 1: distinct_count -= 1 freq_map[arr[i - k]] -= 1 if freq_map[arr[i]] == 0: distinct_count += 1 freq_map[arr[i]] += 1 distinct_counts.append(distinct_count) return distinct_counts"},{"question":"You are given an array of n integers. Your task is to find the subarray with the maximum bitwise AND of all its elements. A subarray is a contiguous portion of an array. The bitwise AND of an array is calculated by taking the bitwise AND of all its elements. Input The first line contains integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109). Output Print a single integer — the maximum bitwise AND of any subarray of the array. Examples Input 4 1 2 3 4 Output 4 Input 5 8 3 6 7 5 Output 7 Note For the first sample, the subarray containing the maximum bitwise AND is [4] with a result of 4. For the second sample, the subarray containing the maximum bitwise AND is [7] with a result of 7.","solution":"def max_bitwise_and_subarray(arr): Returns the maximum bitwise AND of any subarray. A single element will always have the highest AND value compared to AND with others. return max(arr)"},{"question":"Write a function that takes an integer array `arr` of size `n` and an integer `d`. The function should return the length of the longest subarray such that the absolute difference between any two elements in it is not greater than `d`. # Input - An integer `n` (1 ≤ `n` ≤ 100,000) – the number of elements in the array. - An integer `d` (1 ≤ `d` ≤ 1,000,000,000) – the maximum allowed absolute difference. - An array `arr` of `n` integers (1 ≤ `arr[i]` ≤ 1,000,000,000) – the elements of the array. # Output - Output a single integer – the length of the longest subarray where the absolute difference between any two elements does not exceed `d`. # Sample Input ``` 6 3 1 5 2 6 3 5 ``` # Sample Output ``` 3 ``` # Explanation In the given sample, one possible longest subarray with the required property is `[1, 2, 3]` where the absolute difference between any two elements is ≤ 3. There are also other valid subarrays like `[2, 3, 5]`, but all of them have a length of 3. Therefore, the output is `3`. # Constraints - Ensure your solution runs in efficient time complexity suitable for large inputs up to the maximum constraints.","solution":"def longest_subarray_with_limit(arr, d): Returns the length of the longest subarray such that the absolute difference between any two elements in it is not greater than d. from collections import deque min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right in range(len(arr)): while min_deque and arr[min_deque[-1]] > arr[right]: min_deque.pop() while max_deque and arr[max_deque[-1]] < arr[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > d: if min_deque[0] == left: min_deque.popleft() if max_deque[0] == left: max_deque.popleft() left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"In a fictional programming language called PixScript, there are specific rules for manipulating lists of integers. Lists are denoted by square brackets [] and integers within the lists are separated by commas. There are several operations defined in PixScript for working with lists: * add(x, y) takes two lists x and y and returns a new list with y appended to the end of x. For example, add([1, 2], [3, 4]) returns [1, 2, 3, 4]. * mult(x, n) takes a list x and a positive integer n, and returns a new list consisting of n repetitions of x. For example, mult([1, 2], 3) returns [1, 2, 1, 2, 1, 2]. * rotate(x, k) takes a list x and an integer k, and returns a new list where the elements of x have been rotated to the right k times. For example, rotate([1, 2, 3, 4, 5], 2) returns [4, 5, 1, 2, 3]. * slice(x, a, b) takes a list x and two integers a and b (1 ≤ a ≤ b ≤ n, where n is the length of x), and returns the sublist of x from the ath to the bth element inclusive. For example, slice([1, 2, 3, 4, 5], 2, 4) returns [2, 3, 4]. Your task is to evaluate a given PixScript expression and print the resulting list. The expression will follow the rules of PixScript, and will contain only the operations defined above. Commands in PixScript are case-insensitive. So to call the mult function, you can write MuLT(). However, you can\'t print as the result \\"[1, 2, 1, 2, 1, 2]\\" instead of printing \\"[1, 2, 1, 2, 1, 2]\\". Input A single line containing the correct expression. It is guaranteed that the total length of this expression does not exceed 103 and that all the integers used in it are less than or equal to 100 by absolute value. The given expression will only contain integers, lists, and the operations as defined above. Output Print a single line containing the resulting list. It is guaranteed that an answer exists and that the length of the answer does not exceed 104 elements. It is guaranteed that the resulting list is non-empty. Examples Input [1, 2, 3, 4] Output [1, 2, 3, 4] Input add([1, 2], [3, 4]) Output [1, 2, 3, 4] Input MULT([1, 2], 3) Output [1, 2, 1, 2, 1, 2] Input ROTATE([1, 2, 3, 4, 5], 2) Output [4, 5, 1, 2, 3] Input SLICE([1, 2, 3, 4, 5], 2, 4) Output [2, 3, 4]","solution":"def add(x, y): Returns a new list with y appended to the end of x. return x + y def mult(x, n): Returns a new list consisting of n repetitions of x. return x * n def rotate(x, k): Returns a new list where the elements of x have been rotated to the right k times. k = k % len(x) return x[-k:] + x[:-k] def slice(x, a, b): Returns the sublist of x from the ath to the bth element inclusive. return x[a-1:b] def evaluate_expression(expr): Evaluates a given PixScript expression and returns the resulting list. expr = expr.lower() return eval(expr)"},{"question":"In a pirate ship, there is a crew of \'n\' pirates and a chest of \'m\' gold coins. The pirates follow strict rules when it comes to the distribution of gold coins. Every distribution process starts from the captain (pirate 1) and goes up to the last pirate (pirate n). The distribution follows these rules: 1. Each pirate, starting from the captain, will take a certain amount of gold coins. 2. A pirate can take at most half of the remaining coins at his turn. 3. The process continues until all pirates have had their turn or there are no more coins left. Your task is to simulate the distribution process and determine how many coins each pirate gets while following the rules. Input The first line contains two positive integers n and m: the number of pirates (1 ≤ n ≤ 10^5) and the number of gold coins (1 ≤ m ≤ 10^9). Output Print a single line with n integers separated by spaces. The i-th integer should be the number of coins taken by the i-th pirate. Examples Input 3 8 Output 4 2 1 Input 2 100 Output 50 25 Note In the first example, there are 8 gold coins and 3 pirates. The distribution process is as follows: - Pirate 1 takes at most half of 8, which is 4. - Pirate 2 takes at most half of the remaining 4, which is 2. - Pirate 3 takes at most half of the remaining 2, which is 1. In the second example, there are 100 gold coins and 2 pirates. The distribution process is as follows: - Pirate 1 takes at most half of 100, which is 50. - Pirate 2 takes at most half of the remaining 50, which is 25.","solution":"def distribute_coins(n, m): Distributes m coins among n pirates following the specified rules. coins_left = m distribution = [] for _ in range(n): coins_taken = coins_left // 2 distribution.append(coins_taken) coins_left -= coins_taken return distribution"},{"question":"A sequence of integers a_1, a_2, ..., a_n is called *arithmetic* if all its elements differ by the same constant, i.e., for each pair of distinct indices i and j, the difference a_i - a_j is divisible by |i - j|. Given an array of integers, find the length of the longest contiguous subarray which is arithmetic. ------ Input ------ The first line of input contains a single integer T representing the number of test cases. Each of the next T lines contains a single integer n indicating the number of elements in the array, followed by n space-separated integers representing the array elements. ------ Output ------ For each test case, print a single integer representing the length of the longest contiguous arithmetic subarray. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ n ≤ 10^5 −10^9 ≤ a_i ≤ 10^9 ----- Sample Input ------ 3 4 1 2 3 4 6 1 3 5 7 9 11 5 10 7 4 3 2 ----- Sample Output ------ 4 6 3 ----- Explanation ------ Example case 1: The whole array {1, 2, 3, 4} is arithmetic with a common difference of 1. Example case 2: The whole array {1, 3, 5, 7, 9, 11} is arithmetic with a common difference of 2. Example case 3: The longest arithmetic subarray is {10, 7, 4} with a common difference of -3.","solution":"def longest_arithmetic_subarray(array): Calculates the length of the longest contiguous arithmetic subarray in the given list. if len(array) < 2: return len(array) max_length = 2 current_length = 2 common_difference = array[1] - array[0] for i in range(2, len(array)): if array[i] - array[i - 1] == common_difference: current_length += 1 else: common_difference = array[i] - array[i - 1] current_length = 2 max_length = max(max_length, current_length) return max_length def solve(test_cases): Processes each test case and prints the length of the longest arithmetic subarray for each. results = [] for n, array in test_cases: results.append(longest_arithmetic_subarray(array)) return results"},{"question":"You are given a list of integers representing the positions of houses along a straight street. A utility company wants to provide service to all the houses using a fixed number of service centers. The company wants to place these service centers at any of the given positions such that the sum of the distances from each house to the nearest service center is minimized. Return the minimum possible sum of distances. Example 1: Input: positions = [1, 2, 3, 5, 9], k = 2 Output: 5 Explanation: Place service centers at positions 2 and 9. The sum of distances is (1+0+1+4+0) = 6. Example 2: Input: positions – [1, 4, 6, 9], k = 3 Output: 2 Explanation: Place service centers at positions 1, 6, and 9. The sum of distances is (0+2+0+0) = 2. Your Task: You don’t need to read or print anything. Your task is to complete the function minDistance() which takes positions (an array of integers) and k (number of service centers) as input parameters and returns the minimum possible sum of distances. Expected Time Complexity: O(n^2 * k), where n is the number of houses. Expected Space Complexity: O(n * k) Constraints: 1 ≤ positions.length ≤ 100 1 ≤ positions[i] ≤ 10^3","solution":"def minDistance(positions, k): Calculate the minimum possible sum of distances from houses to the nearest service center. Parameters: positions (List[int]): Positions of the houses. k (int): Number of service centers. Returns: int: Minimum possible sum of distances. positions.sort() n = len(positions) # Create a dp table with dimensions (n x k): # dp[i][j] is the minimum sum of distances for the first i+1 houses with j+1 centers dp = [[float(\'inf\')] * (k + 1) for _ in range(n)] # Distance to closest service centers initially dist = [[0] * n for _ in range(n)] for i in range(n): for j in range(i, n): mid = (i + j) // 2 for m in range(i, j + 1): dist[i][j] += abs(positions[m] - positions[mid]) # Base case: If there\'s only one center, position it optimally for i in range(n): dp[i][0] = dist[0][i] # Fill dp table for j in range(1, k): for i in range(n): for p in range(i + 1): dp[i][j] = min(dp[i][j], dp[p][j - 1] + dist[p + 1][i] if p + 1 <= i else float(\'inf\')) return dp[n - 1][k - 1]"},{"question":"Reverse the words in a given sentence and return the modified sentence. The words in the sentence are separated by a single space, and there are no leading or trailing spaces. Punctuation is considered part of a word and should remain attached to the word it appears with. Example 1: Input: \\"Hello world\\" Output: \\"world Hello\\" Explanation: Reversing the words in the sentence, it becomes \\"world Hello\\". Example 2: Input: \\"Welcome to the coding test\\" Output: \\"test coding the to Welcome\\" Explanation: Reversing the words in the sentence, it becomes \\"test coding the to Welcome\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `reverseWords()` which takes the sentence `s` as input and returns the modified sentence with the words reversed. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(s) ≤ 10^3","solution":"def reverseWords(s): Reverse the words in a given sentence. :param s: str : The input sentence with words separated by spaces. :return: str : The modified sentence with the words reversed. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are given a sequence of N integers {A_1, A_2, ldots, A_N}. You need to process two types of queries: 1. Update the value at a specific position: `1 l r x y`. For all i in the range l leq i leq r, perform the operation A[i] = xA[i] + y. 2. Calculate the sum of a range: `2 l r modValue`. Return the sum of the segment A[l] to A[r] modulo modValue. Input Format The first line contains N, the number of elements in the sequence. The second line contains N integers, the elements of the sequence. The third line contains Q, the number of queries. The following Q lines each contain a query in one of the formats described above. Output Format For each query of type 2, print the result on a new line. Constraints 1 leq N leq 10^5 (Number of elements in the sequence) 1 leq Q leq 10^5 (Number of queries) 1 leq l leq r leq N -10^6 leq A[i], x, y leq 10^6 1 leq modValue leq 10^9 + 7 Sample Input 5 1 2 3 4 5 3 1 2 4 2 1 2 3 5 1000000007 2 1 5 7 Sample Output 26 6 Explanation In the first query, the operation 2A[i] + 1 is applied to the segment from index 2 to index 4, resulting in the sequence: [1, 5, 7, 9, 5]. In the second query, the sum of the segment from index 3 to index 5 is calculated: 7 + 9 + 5 = 21. In the third query, the sum of the entire sequence modulo 7 is: (1 + 5 + 7 + 9 + 5) % 7 = 6.","solution":"def process_queries(N, A, Q, queries): result = [] for query in queries: if query[0] == 1: l, r, x, y = query[1], query[2], query[3], query[4] for i in range(l-1, r): A[i] = x * A[i] + y elif query[0] == 2: l, r, modValue = query[1], query[2], query[3] range_sum = sum(A[l-1:r]) result.append(range_sum % modValue) return result"},{"question":"John is planning his vacation trip and is fascinated by different routes cities can offer. There are N cities, numbered from 1 to N, and each pair of cities has a direct route between them. He wants to visit exactly K different cities during his trip. Wanderlust that he is, he wants to know the number of different ways he can choose and visit K different cities, starting from any city and visiting each subsequent city via a direct route. However, the number of ways can be very large, so calculate the number of ways modulo 10^9+7. Constraints * 2 ≤ N ≤ 200,000 * 2 ≤ K ≤ N Input The input is given from Standard Input in the following format: N K Output Print the number of different ways John can visit K different cities, modulo 10^9+7. Example Input 5 3 Output 60 Explanation: John can choose 3 cities from 5 in (binom{5}{3} = 10) ways, and for each selection of 3 cities, there are (2! = 2) possible ways to arrange the 3 cities in a trip, hence (10 times 2! = 60).","solution":"MOD = 10**9 + 7 def mod_factorial(n, mod): if n == 0: return 1 result = 1 for i in range(2, n+1): result = (result * i) % mod return result def mod_comb(n, k, mod): if k > n: return 0 numerator = mod_factorial(n, mod) denominator = (mod_factorial(k, mod) * mod_factorial(n - k, mod)) % mod return numerator * pow(denominator, mod-2, mod) % mod def number_of_ways(N, K): selection_ways = mod_comb(N, K, MOD) arrangement_ways = mod_factorial(K, MOD) return (selection_ways * arrangement_ways) % MOD"},{"question":"Alice is organizing a spelling competition for children. She has a list of words and wants to know how many of them have at least one pair of consecutive identical letters. Write a function `count_repeated_letters(words: List[str]) -> int` that takes a list of words and returns the number of words containing at least one pair of consecutive identical letters. # Constraints * 1 leq len(words) leq 10^5 * 1 leq len(word) leq 100 * Each word contains only lowercase English letters # Input * A list of words `words` of length N # Output * An integer representing the number of words with at least one pair of consecutive identical letters # Examples Input ``` [\'hello\', \'world\', \'book\', \'tree\'] ``` Output ``` 3 ``` Input ``` [\'apple\', \'banana\', \'cherry\', \'date\'] ``` Output ``` 2 ``` Input ``` [\'cat\', \'dog\', \'fish\'] ``` Output ``` 0","solution":"from typing import List def count_repeated_letters(words: List[str]) -> int: Returns the number of words that contain at least one pair of consecutive identical letters. :param words: List of words to check :return: Number of words with at least one pair of consecutive identical letters count = 0 for word in words: for i in range(len(word) - 1): if word[i] == word[i + 1]: count += 1 break return count"},{"question":"Check Tutorial tab to know how to solve. Task The provided code stub reads two integers from STDIN, boldsymbol{m} and boldsymbol{n}. Add code to print three lines where: The first line contains the integer division result of the first number divided by the second number. The second line contains the absolute difference of the two numbers. The third line contains the sum of squares of the two numbers. Example boldsymbol{m}=9 n=4 Print the following: 2 5 97 Input Format The first line contains the first integer, boldsymbol{m}. The second line contains the second integer, boldsymbol{n}. Constraints 1 leq m leq 10^{10} 1 leq n leq 10^{10} Output Format Print the three lines as explained above. Sample Input 0 9 4 Sample Output 0 2 5 97 Explanation 0 9div4implies2 mid 9-4 mid implies 5 9^2 + 4^2 implies 97","solution":"def perform_operations(m, n): Perform the operations as specified in the problem statement. :param m: First integer :param n: Second integer :return: A tuple with integer division result, absolute difference, and sum of squares. int_division = m // n abs_difference = abs(m - n) sum_of_squares = m**2 + n**2 return int_division, abs_difference, sum_of_squares # Function to handle input/output for the problem def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) results = perform_operations(m, n) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates it. The mathematical expression will only contain non-negative integers and the operators +, -, *, and /. The function should correctly handle parentheses and respect the order of operations (PEMDAS/BODMAS rules). For example, given the input: ```python \\"3 + 5 * 2 / ( 7 - 3 )\\" ``` The function should return: ```python 5.5 ``` Provide the function definition as the output. You can assume the input string is always a valid expression and does not contain any invalid characters. Additionally, there will be no division by zero.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing non-negative integers and operators +, -, *, /, and parentheses. This function respects the order of operations (PEMDAS/BODMAS). Parameters: expression (str): The mathematical expression to evaluate. Returns: float: The result of the evaluated expression. import operator def parse_expression(expression): tokens = [] num = \\"\\" operators = set(\\"+-*/()\\") for char in expression: if char.isdigit() or char == \'.\': num += char elif char in operators: if num: tokens.append(float(num)) num = \\"\\" tokens.append(char) elif char == \' \': if num: tokens.append(float(num)) num = \\"\\" if num: tokens.append(float(num)) return tokens def shunting_yard(tokens): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} ops = [] output = [] for token in tokens: if isinstance(token, float): output.append(token) elif token in precedence: while (ops and ops[-1] != \'(\' and precedence[ops[-1]] >= precedence[token]): output.append(ops.pop()) ops.append(token) elif token == \'(\': ops.append(token) elif token == \')\': while ops and ops[-1] != \'(\': output.append(ops.pop()) ops.pop() while ops: output.append(ops.pop()) return output def evaluate_rpn(tokens): stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) return stack[0] tokens = parse_expression(expression) rpn = shunting_yard(tokens) result = evaluate_rpn(rpn) return result"},{"question":"You are given a list of n integers. Your task is to find the length of the longest subarray where each element in the subarray is equal. A subarray is defined by selecting a non-empty segment of the list such that the relative order is maintained. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers: a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9). -----Output----- Print the length of the longest subarray where all elements are equal. -----Examples----- Input 10 1 1 1 2 2 3 3 3 3 4 Output 4 Input 7 1 1 2 2 2 1 1 Output 3","solution":"def longest_equal_subarray(n, arr): Returns the length of the longest subarray where each element in the subarray is equal. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Implement `is_anagram(str1, str2)` function that takes in two strings and returns `true` if the strings are anagrams of each other (i.e., they contain the same characters in the same frequency but possibly in a different order), and `false` otherwise. Consider only alphanumeric characters and ignore the case. For example, `is_anagram(\\"Listen\\", \\"Silent\\")` should return `true` and `is_anagram(\\"Hello\\", \\"Olelh\\")` should return `true`, but `is_anagram(\\"Test\\", \\"Taste\\")` should return `false`.","solution":"def is_anagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, ignoring case and considering only alphanumeric characters. Otherwise, returns False. # Remove non-alphanumeric characters and convert to lowercase str1_filtered = \'\'.join(char.lower() for char in str1 if char.isalnum()) str2_filtered = \'\'.join(char.lower() for char in str2 if char.isalnum()) # Compare the sorted versions of the filtered strings return sorted(str1_filtered) == sorted(str2_filtered)"},{"question":"You are tasked with developing a scheduling system for a conference. The conference consists of multiple sessions, each of which is attended by a specific group of people. A session can only be scheduled if it does not conflict with other sessions attended by the same group of people. You will be given a list of sessions, where each session is a pair representing the start and end times. Return the maximum number of non-overlapping sessions that can be scheduled. Input: The first line of the input contains an integer T (1 ≤ T ≤ 100), the number of test cases. The T test cases follow. Each test case starts with an integer n (1 ≤ n ≤ 100), the number of sessions. The next n lines each contain two integers s and e (0 ≤ s < e ≤ 1000), the start and end times of a session. Output: For each test case, output a single line with the maximum number of non-overlapping sessions that can be scheduled. SAMPLE INPUT 1 3 1 3 2 4 3 5 SAMPLE OUTPUT 2","solution":"def max_non_overlapping_sessions(T, test_cases): results = [] for case in test_cases: n = case[0] sessions = case[1] # Sort sessions by their end times sessions.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in sessions: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # Reading input and organizing test cases def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) index += 1 sessions = [] for _ in range(n): s, e = map(int, lines[index].split()) index += 1 sessions.append((s, e)) test_cases.append((n, sessions)) return T, test_cases"},{"question":"You are organizing a sequence of activities and need to ensure that no two activities overlap. Your task is to evaluate how many activities can be performed without conflict. Each activity has a start and an end time, denoted by a pair of integers. The starting time of an activity must be strictly less than its ending time. Two activities conflict if they overlap, i.e., if one activity\'s start time is less than the end time of another ongoing activity. Your goal is to maximize the number of non-overlapping activities. -----Input----- The input consists of: - The first line containing a single integer n (1 leq n leq 100) – the number of activities. - The following n lines each containing two integers s_i and e_i (0 leq s_i < e_i leq 1000) – the start time and end time of each activity. -----Output----- Output the maximum number of non-overlapping activities that can be performed. -----Examples----- Sample Input: 6 1 4 2 3 3 5 3 8 5 7 8 9 Sample Output: 4","solution":"def find_max_activities(activities): Finds the maximum number of non-overlapping activities. Parameters: activities (List[Tuple[int, int]]): A list of tuples containing the start and end times of activities. Returns: int: The maximum number of non-overlapping activities. activities.sort(key=lambda x: x[1]) count = 0 end_time = 0 for activity in activities: if activity[0] >= end_time: count += 1 end_time = activity[1] return count"},{"question":"A service provider offers a subscription-based service that has two types of plans: regular and premium. You are required to implement a user subscription manager. Each user starts with a regular subscription and can upgrade to a premium one, extend their subscription, or query the remaining days. -----Input----- The input sequence consists of multiple operations that are sent to the subscription manager. Each operation is represented by a line in one of the following formats: - `subscribe <user_id> <days>`: Subscribes a new user with user_id to a regular plan for a specified number of days. If the user already exists, extend their subscription by the specified number of days. - `upgrade <user_id>`: Upgrades the user_id\'s subscription to the premium plan. If the user does not exist, the command should be ignored. - `query <user_id>`: Queries the remaining days of the subscription for user_id. If the user does not exist, it should return -1. The operations are terminated by the end-of-file. -----Output----- For each `query`, output the remaining days of the subscription. If the user does not exist, output -1. -----Examples----- Input subscribe user1 30 subscribe user2 14 upgrade user1 query user1 query user2 subscribe user1 5 query user1 Output 30 14 35 -----Note----- In the first sample: - The first command subscribes \\"user1\\" for 30 days as a regular user. - The second command subscribes \\"user2\\" for 14 days as a regular user. - The third command upgrades \\"user1\\" to a premium user. - The fourth command queries \\"user1\\" and finds 30 days remaining. - The fifth command queries \\"user2\\" and finds 14 days remaining. - The sixth command extends \\"user1\\"\'s subscription by 5 days. - The seventh command queries \\"user1\\" and finds 35 days remaining.","solution":"class SubscriptionManager: def __init__(self): self.users = {} def subscribe(self, user_id, days): if user_id in self.users: self.users[user_id][\'days\'] += days else: self.users[user_id] = {\'plan\': \'regular\', \'days\': days} def upgrade(self, user_id): if user_id in self.users: self.users[user_id][\'plan\'] = \'premium\' def query(self, user_id): if user_id in self.users: return self.users[user_id][\'days\'] return -1 # Sample usage: # sm = SubscriptionManager() # sm.subscribe(\\"user1\\", 30) # sm.subscribe(\\"user2\\", 14) # sm.upgrade(\\"user1\\") # print(sm.query(\\"user1\\")) # Should output 30 # print(sm.query(\\"user2\\")) # Should output 14 # sm.subscribe(\\"user1\\", 5) # print(sm.query(\\"user1\\")) # Should output 35"},{"question":"String Compression Algorithm Challenge You are tasked with developing a string compression algorithm. The algorithm should efficiently compress strings comprised of uppercase and lowercase letters by using the following approach: 1. Traverse the string and count the consecutive repeated characters. 2. For a sequence of repeated characters, you will store the character followed by the frequency of its repetition. If a character appears only once, it should be represented as it is without the digit \'1\'. The goal is to minimize the size of the output compressed string. If the length of the compressed string is not less than the original string, the function should return the original string. Write a function that accepts a string and returns its compressed form according to the above rules or returns the original string if compression does not yield a shorter length. Input Format A single line containing the string s, which consists of uppercase and lowercase English letters only. Constraints 1 leq |s| leq 10^5 Output Format Print a single line containing the compressed string or the original string, whichever is shorter. Function Signature ```python def compress_string(s: str) -> str: # Your code here ``` Example Input 0 aaabbcccc Example Output 0 a3b2c4 Example Input 1 abcde Example Output 1 abcde Explanation 0 In the first example, the input string \\"aaabbcccc\\" can be compressed to \\"a3b2c4\\", which is shorter than the original string. Explanation 1 In the second example, the input string \\"abcde\\" cannot be compressed to a shorter string, so the output is the original string \\"abcde\\".","solution":"def compress_string(s: str) -> str: Compress the input string by converting sequences of the same character into a character followed by the count. If the compressed string is not shorter, return the original string. :param s: The input string containing only uppercase and lowercase English alphabets. :return: Compressed string or the original string if compression is not beneficial. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given a linked list that holds integer values. The list contains a loop if there exists a node in the list that can be reached again by continuously following the next pointer. Write a function to detect if the linked list has a loop. If a loop exists, return the node where the loop starts. If no loop exists, return null. You are required to implement the following function: ```python def detectCycle(head: ListNode) -> Optional[ListNode]: pass ``` # Input - `head` (ListNode): The head node of the singly linked list. Each `ListNode` has the following attributes: - `int val`: The value of the node. - `ListNode next`: A pointer to the next node in the list. # Output - Return the node where the cycle begins. - If there is no cycle, return `null`. # Examples Example 1: - **Input**: ``` head = [3,2,0,-4] // list structure: 3 -> 2 -> 0 -> -4 // ^ | // |_________| ``` - **Output**: Node with value 2 Example 2: - **Input**: ``` head = [1,2] // list structure: 1 -> 2 // ^ | // | | // | | // | | // | | // | | // | | // | | // | | // | | // |_| ``` - **Output**: Node with value 1 Example 3: - **Input**: ``` head = [1] // list structure: 1 ``` - **Output**: null (no cycle) # Constraints - The number of nodes in the list is in the range `[0, 10^4]`. - `-10^5 <= Node.val <= 10^5` - The list is guaranteed to have no more than one cycle. # Note - You can use a two-pointer technique (such as Floyd’s Tortoise and Hare algorithm) to solve this problem efficiently.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detectCycle(head: ListNode) -> ListNode: if not head: return None slow, fast = head, head # Step 1: Determine if there is a cycle using two pointers (Floyd\'s Tortoise and Hare) while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected break else: # No cycle detected return None # Step 2: Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Luigi and Mario are exploring a haunted mansion consisting of n rooms connected by m bidirectional corridors. Every corridor has a length associated with it, and some corridors might be inaccessible due to the recent ghost activity. Mario wants to explore the mansion, starting from room 1 and wants to end his journey in the room n. Since Luigi is afraid of ghosts, he wants to avoid corridors that are inaccessible. Luigi has given Mario the map of the mansion, including the information about the corridors and their accessibility. The task is to determine the shortest possible path from room 1 to room n while avoiding the inaccessible corridors. If there is no path due to the ghost activity, Mario needs to be informed about it. Write a program that determines the shortest path from room 1 to room n considering only the accessible corridors. If such a path doesn\'t exist, return \\"IMPOSSIBLE\\". Input The input is given in the following format: > n m > u1 v1 d1 a1 > u2 v2 d2 a2 > ... > um vm dm am - n: number of rooms (1 ≤ n ≤ 10^5) - m: number of corridors (1 ≤ m ≤ 2×10^5) - ui vi: the two rooms connected by the i-th corridor (1 ≤ ui, vi ≤ n) - di: the length of the i-th corridor (1 ≤ di ≤ 10^4) - ai: 0 if the i-th corridor is inaccessible, 1 if accessible Output Output the length of the shortest path from room 1 to room n, or \\"IMPOSSIBLE\\" if no such path exists. Examples Input 5 6 1 2 2 1 2 3 1 1 3 5 5 0 1 4 1 1 4 5 3 1 2 5 5 1 Output 4 Input 4 3 1 2 6 0 2 3 4 1 3 4 1 1 Output \\"IMPOSSIBLE\\"","solution":"import heapq def shortest_path(n, m, corridors): adj = [[] for _ in range(n + 1)] for u, v, d, a in corridors: if a == 1: adj[u].append((d, v)) adj[v].append((d, u)) # Dijkstra\'s algorithm for shortest path inf = float(\'inf\') dist = [inf] * (n + 1) dist[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for weight, v in adj[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(priority_queue, (dist[v], v)) return dist[n] if dist[n] != inf else \\"IMPOSSIBLE\\""},{"question":"You are given a sequence of N integers and an integer K. You need to determine if there exists a subset of the given sequence such that the sum of the subset is exactly K. If such a subset exists, print \\"YES\\"; otherwise, print \\"NO\\". Note: The problem should be solved using a dynamic programming approach to ensure efficiency. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K denoting the number of integers in the sequence and the target sum respectively. The second line of each test case contains N space-separated integers representing the sequence of numbers. -----Output----- For each test case, output \\"YES\\" if there exists a subset of the given sequence with a sum equal to K; otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - -1000 ≤ Each integer in the sequence ≤ 1000 - -1000 ≤ K ≤ 1000 -----Example----- Input: 3 5 9 3 34 4 12 5 3 30 4 6 3 4 -2 -3 1 -4 2 Output: YES NO YES -----Explanation----- Example case 1: There is a subset {4, 5} with sum equal to 9. Example case 2: No subset adds up to 30. Example case 3: There is a subset {-3, 1} with sum equal to -2.","solution":"def subset_sum(N, K, sequence): # Initialize a DP table of size (N+1) x (2*K+1) offset = 1000 dp = [[False] * (2 * offset + 1) for _ in range(N + 1)] dp[0][offset] = True # Base condition for i in range(1, N+1): for j in range(-offset, offset+1): if dp[i-1][j + offset]: dp[i][j + offset] = True # don\'t include sequence[i-1] dp[i][j + sequence[i-1] + offset] = True # include sequence[i-1] return \\"YES\\" if dp[N][K + offset] else \\"NO\\" def subset_sum_solver(T, test_cases): results = [] for test_case in test_cases: N, K, sequence = test_case results.append(subset_sum(N, K, sequence)) return results"},{"question":"# Story In a rectangular garden, there are several flower beds planted in a grid-like manner. Each flower bed can contain a certain number of flowers. Given the dimensions of the garden and a 2D list representing the number of flowers in each bed, you need to determine the maximum number of flowers that can be collected in any rectangular sub-grid of the garden. # Task Write a function that takes three arguments: the dimensions of the garden (an integer number of rows and an integer number of columns), and the 2D list representing the number of flowers in each bed. Your function should return the maximum number of flowers that can be collected from any rectangular sub-grid of the garden. # Example Given an input of: ``` rows = 3 cols = 3 flowers = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The expected output would be: ``` 45 ``` This output is derived from the sum of the sub-grid forming the entire garden, with all flower counts added to produce the maximum sum. The sub-grid is highlighted as follows: ``` 1 2 3 4 5 6 7 8 9 ``` # Constraints - The dimensions of the garden (rows and cols) will be positive integers. - Each element in the 2D list (flowers) will be a non-negative integer. - The garden size will not exceed 100x100. Good luck!","solution":"def max_flowers_in_subgrid(rows, cols, flowers): # Function to find maximum sum subarray in a 1D array def max_subarray_sum(arr): max_so_far = arr[0] max_ending_here = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_flowers = float(\'-inf\') # Fix the left column for left in range(cols): # Create a temporary array to store the rows sum temp = [0] * rows for right in range(left, cols): # Add current column to the temporary sum array for row in range(rows): temp[row] += flowers[row][right] # Find the maximum sum of the subarray in the temp array max_flowers = max(max_flowers, max_subarray_sum(temp)) return max_flowers"},{"question":"Given an array of integers nums, the task is to determine if there exists a triplet (nums[i], nums[j], nums[k]) such that i < j < k and nums[i] < nums[j] > nums[k]. If such a triplet exists, return true, otherwise return false. Example 1: Input: nums = [1, 2, 1, 3, 0, 4, 5] Output: true Explanation: The triplet (1, 3, 0) satisfies the conditions i = 0, j = 3, k = 4 (i < j < k and nums[i] < nums[j] > nums[k]). Example 2: Input: nums = [5, 1, 4, 2, 3] Output: false Explanation: There is no triplet that satisfies the conditions. Your Task: You don\'t need to read input or print anything. Complete the function findPeakTriplet() which takes the array nums as input parameter and returns true if there is such a triplet, otherwise returns false. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 10^6 -10^6 ≤ nums[i] ≤ 10^6","solution":"def findPeakTriplet(nums): Given an array of integers nums, determine if there exists a triplet (nums[i], nums[j], nums[k]) such that i < j < k and nums[i] < nums[j] > nums[k]. Parameters: nums (list): A list of integers. Returns: bool: True if such a triplet exists, otherwise False. if len(nums) < 3: return False n = len(nums) # Create left_max array where left_max[i] holds the maximum of nums[0] to nums[i-1] left_max = [float(\'-inf\')] * n for i in range(1, n): left_max[i] = max(left_max[i-1], nums[i-1]) # Create right_min array where right_min[j] holds the minimum of nums[j+1] to nums[n-1] right_min = [float(\'inf\')] * n for j in range(n-2, -1, -1): right_min[j] = min(right_min[j+1], nums[j+1]) # Check for the conditions nums[i] < nums[j] > nums[k] for j in range(1, n-1): if left_max[j] < nums[j] > right_min[j]: return True return False"},{"question":"Polycarp loves playing with strings. He is experimenting with a string of lowercase English letters. He can delete exactly one contiguous (consecutive) substring from the string to make the remaining string lexicographically smallest possible. Given the string, find the lexicographically smallest string that can be obtained after deleting exactly one contiguous substring from the original string. -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. The following t lines each contain one string s (1 le |s| le 10^5) consisting of lowercase English letters. The total length of all strings does not exceed 10^6. -----Output----- For each test case, print a single line containing the lexicographically smallest string obtained after deleting exactly one contiguous substring. -----Example----- Input 3 abc abac bbbbb Output ab aac bbbb -----Note----- In the first test case, we can delete the substring \\"c\\" to obtain the string \\"ab\\", which is the lexicographically smallest possible. In the second test case, we can delete the substring \\"b\\" to obtain the string \\"aac\\", which is the lexicographically smallest possible. In the third test case, we can delete the substring \\"b\\" to obtain the string \\"bbbb\\", since all characters are the same, removing any of the \\"b\\" would result in the same outcome.","solution":"def smallest_lex_string(s): n = len(s) min_string = s[1:] # Initial min string by removing the first character for i in range(n): candidate = s[:i] + s[i+1:] if candidate < min_string: min_string = candidate return min_string def process_test_cases(test_cases): results = [] for s in test_cases: results.append(smallest_lex_string(s)) return results"},{"question":"Given a list of integers, you are required to sort the list but in a specific way. Sort the list such that all even numbers appear before any odd number, and both even and odd numbers are sorted in ascending order within their respective groups. Try to solve this problem with a time complexity better than `O(N log N)`. Input Format The first line contains an integer T, i.e., the number of the test cases. T test cases follow. The first line of each test case contains an integer N, i.e., the number of elements in the array. The second line of each test case contains N space-separated integers. Output Format For each test case, print a single line of sorted integers such that even numbers come before odd numbers. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 2*10^3 −10^6 ≤ Element of the array ≤ 10^6 Sample Input 2 5 3 1 2 7 4 4 -3 -5 -2 -8 Sample Output 2 4 1 3 7 -8 -2 -5 -3 Explanation For the first test case: - The even numbers are [2, 4], which when sorted are [2, 4]. - The odd numbers are [3, 1, 7], which when sorted are [1, 3, 7]. - Combining these sorted groups makes the result [2, 4, 1, 3, 7]. For the second test case: - The even numbers are [-2, -8], which when sorted are [-8, -2]. - The odd numbers are [-3, -5], which when sorted are [-5, -3]. - Combining these sorted groups makes the result [-8, -2, -5, -3].","solution":"def sort_even_before_odd(test_cases): results = [] for t in range(len(test_cases)): N, array = test_cases[t] even_numbers = sorted([x for x in array if x % 2 == 0]) odd_numbers = sorted([x for x in array if x % 2 != 0]) sorted_array = even_numbers + odd_numbers results.append(sorted_array) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T * 2, 2): N = int(lines[i]) array = list(map(int, lines[i + 1].split())) test_cases.append((N, array)) return test_cases def format_output(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results) def solution(input_str): test_cases = parse_input(input_str) results = sort_even_before_odd(test_cases) return format_output(results)"},{"question":"Given `n` intervals represented by pairs of integers, some intervals might overlap, and some might not. Write a function to merge all overlapping intervals. The function should output a list of non-overlapping intervals that cover all the intervals in the input. # Input - The first line of the input consists of an integer `n` representing the number of intervals. - Each of the next `n` lines contains two integers, representing the starting and ending points of an interval. # Output - The output consists of merged, non-overlapping intervals sorted by their starting points. # Constraints - `1 ≤ n ≤ 1000` - `0 ≤ starting point < ending point ≤ 10000` # Example Input ``` 4 1 3 2 4 5 7 6 8 ``` Output ``` 1 4 5 8 ``` # Note - In the example, the intervals `(1, 3)` and `(2, 4)` overlap, so they are merged into `(1, 4)`. - Similarly, the intervals `(5, 7)` and `(6, 8)` are merged into `(5, 8)`.","solution":"def merge_intervals(intervals): Merges overlapping intervals. if not intervals: return [] # Sort intervals by their starting points intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for interval in intervals[1:]: last_merged = merged[-1] # Check if there is an overlap if interval[0] <= last_merged[1]: # Merge intervals merged[-1] = [last_merged[0], max(last_merged[1], interval[1])] else: # No overlap, so add to the list merged.append(interval) return merged # Helper function to format the input and output def format_input_output(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) intervals = [list(map(int, line.split())) for line in input_lines[1:n+1]] merged_intervals = merge_intervals(intervals) result = \'n\'.join(\' \'.join(map(str, interval)) for interval in merged_intervals) return result"},{"question":"Sarah loves hiking and often explores new trails in the mountains. She tracks her hikes using a GPS device which records her speed and the time taken for each segment of the trail. However, her device does not calculate the total distance covered which she is curious about. Help Sarah determine the total distance covered during her hike. You will be given an integer N representing the number of segments Sarah hiked. For each segment, you will be given the speed (in km/hr) S and the time taken (in minutes) T. Your task is to compute the total distance (in kilometers) Sarah hiked, rounded to two decimal places. Input: The first line will contain integer N, the number of segments. Next N lines will each contain two integers S and T (speed in km/hr and time in minutes respectively). Output: Print the total distance covered in kilometers, rounded to two decimal places. Constraints: 1 ≤ N ≤ 100 1 ≤ S ≤ 20 1 ≤ T ≤ 300 SAMPLE INPUT 3 5 60 3 45 4 30 SAMPLE OUTPUT 5.75 Explanation For each segment, we calculate the distance using the formula distance = speed * time. For the first segment: distance_1 = 5 km/hr * (60/60) hr = 5 km For the second segment: distance_2 = 3 km/hr * (45/60) hr = 2.25 km For the third segment: distance_3 = 4 km/hr * (30/60) hr = 2 km Total distance = distance_1 + distance_2 + distance_3 = 5 + 2.25 + 2 = 9.25 km So, the output is 9.25.","solution":"def total_distance(N, segments): Calculates the total distance covered using speed and time for each segment. :param N: Number of segments :param segments: List of tuples containing speed (S) in km/hr and time (T) in minutes for each segment :return: Total distance covered, rounded to two decimal places total_distance = 0.0 for S, T in segments: distance = S * (T / 60) # Converting time from minutes to hours and then calculating distance total_distance += distance return round(total_distance, 2)"},{"question":"You are organizing a science fair where there are N students (numbered 1 through N) each participating in one or more projects out of P available projects (numbered 1 through P). Each project requires different amounts of budget and you have a total budget B you can spend on the projects. Additionally, each project has a minimum and maximum number of students required to participate in it. Determine if it is possible to organize the fair in such a way that all constraints are satisfied. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three integers N, P, and B. Then, N lines follow. For each valid i, the i-th line contains P space-separated integers representing the projects that student i can participate in. Then, P lines follow. For each valid j, the j-th line contains three integers b_j, min_j, and max_j — the budget required for project j, the minimum number of students, and the maximum number of students that can participate in project j respectively. ------ Output ------ For each test case, print a single line containing \\"YES\\" if it is possible to organize the fair under the given constraints, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ P ≤ 10 1 ≤ B ≤ 10,000 1 ≤ b_j ≤ 1,000 1 ≤ min_j ≤ max_j ≤ N ------ Sample Input 1 ------ 1 3 2 1000 1 1 2 2 500 1 2 300 1 3 ------ Sample Output 1 ------ YES ------ Explanation 1 ------ Example case 1: There are three students and two projects. The total budget is 1000. - Project 1 requires 500 budget, with a minimum of 1 and a maximum of 2 participants. - Project 2 requires 300 budget, with a minimum of 1 and maximum of 3 participants. We can allocate student 1 and 2 to participate in project 1, and student 3 to participate in project 2. The total budget required is 500 + 300 = 800, which is within the allowed budget of 1000.","solution":"def can_organize_fair(T, test_cases): results = [] for case in range(T): N, P, B = test_cases[case][\'N\'], test_cases[case][\'P\'], test_cases[case][\'B\'] students_projects = test_cases[case][\'students_projects\'] project_requirements = test_cases[case][\'project_requirements\'] from itertools import combinations possible = False for project_distribution in combinations(range(N), P): budget = 0 valid = True student_counts = [0] * P for student in project_distribution: for pj in students_projects[student]: student_counts[pj - 1] += 1 for j in range(P): budget += project_requirements[j][0] if not (project_requirements[j][1] <= student_counts[j] <= project_requirements[j][2]): valid = False break if valid and budget <= B: possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_lines): T = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N, P, B = map(int, input_lines[line_idx].split()) line_idx += 1 students_projects = [] for i in range(N): projects = list(map(int, input_lines[line_idx].split())) students_projects.append(projects) line_idx += 1 project_requirements = [] for j in range(P): b, min_j, max_j = map(int, input_lines[line_idx].split()) project_requirements.append((b, min_j, max_j)) line_idx += 1 test_cases.append({ \'N\': N, \'P\': P, \'B\': B, \'students_projects\': students_projects, \'project_requirements\': project_requirements }) return T, test_cases"},{"question":"Given an array of positive integers representing coin denominations and a total amount of money, write a function to find the fewest number of coins that add up to the given amount. If that amount of money cannot be made up by any combination of the coins, return -1. Example Function Signature: def coinChange(coins: List[int], amount: int) -> int: Example Input: coins = [1, 2, 5] amount = 11 Output: 3 Explanation: 11 can be made with three coins: 5 + 5 + 1 Inputs: - coins: a list of positive integers, representing coin denominations - amount: a non-negative integer, representing the total amount Returns: - int: the minimum number of coins needed, or -1 if it\'s not possible to form the amount with the given coins Constraints: - 1 <= coins.length <= 12 - 1 <= coins[i] <= 2^31 - 1 - 0 <= amount <= 10^4 Sample Test Cases: Sample Input 1: coins = [2] amount = 3 Sample Output 1: -1 Explanation 1: The amount 3 cannot be made with any combination of 2. Sample Input 2: coins = [1, 2, 5, 10] amount = 27 Sample Output 2: 4 Explanation 2: 27 can be formed with 10 + 10 + 5 + 2","solution":"from typing import List def coinChange(coins: List[int], amount: int) -> int: Calculate the fewest number of coins needed to make up the given amount. If that amount of money cannot be made up by any combination of the coins, return -1. # Initialize the dp array with \'amount + 1\' which is greater than any possible minimum dp = [amount + 1] * (amount + 1) dp[0] = 0 # Base case: no coins needed to make amount 0 for a in range(1, amount + 1): for coin in coins: if coin <= a: dp[a] = min(dp[a], dp[a - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Implement a function that determines if a given integer can be expressed as the sum of consecutive positive integers. If it is possible, your function should return a list of integers representing one such sequence. If there are multiple such sequences, return any of them. If it is not possible, return an empty list. Input: - An integer `num` (1 <= num <= 10^6) Output: - A list of integers that is one sequence of consecutive positive integers summing up to `num`. If there is no such sequence, return an empty list. Example: ``` input: 9 output: [2, 3, 4] Explanation: 9 can be expressed as the sum of consecutive integers 2 + 3 + 4. input: 15 output: [1, 2, 3, 4, 5] Explanation: 15 can be expressed as the sum of consecutive integers 1 + 2 + 3 + 4 + 5. input: 8 output: [] Explanation: 8 cannot be expressed as the sum of consecutive positive integers. ``` Note: - Consecutive positive integers must have a minimum length of 2.","solution":"def consecutive_sum(num): Determines if a given integer can be expressed as the sum of consecutive positive integers. Returns a list of integers representing one such sequence if possible; otherwise, returns an empty list. # The smallest possible sequence has length 2. for length in range(2, num + 1): a = (2 * num + length - length ** 2) / (2 * length) if a == int(a) and a > 0: return list(range(int(a), int(a) + length)) return []"},{"question":"> In a bustling marketplace, you, as a shop owner, need to keep track of your inventory efficiently. You maintain a dynamic list of items for sale, where each item has a unique identifier and a price. You need to support the following operations: > > 1. **Add Item**: Add a new item with an identifier and price. > 2. **Remove Item**: Remove an item using its identifier. > 3. **Update Price**: Update the price of an existing item. > 4. **Query**: Find the identifier of the item with the highest price. > > Given a series of operations, implement a system to perform the operations optimally. > > ------ Input: ------ > The first line contains an integer Q, the number of operations. > The following Q lines each represent an operation of one of the following types: > ``` > 1 ID PRICE // Add an item with identifier ID and price PRICE > 2 ID // Remove the item with identifier ID > 3 ID PRICE // Update the price of the item with identifier ID to PRICE > 4 // Query to find the identifier of the item with the highest price > ``` > All identifiers are unique positive integers, and prices are positive integers. > > ------ Output: ------ > For each query operation (Type \'4\'), output the identifier of the item with the highest price. If there are multiple items with the same highest price, print the smallest identifier among them. If there are no items available, print `-1`. > > ------ Constraints ------ > 1 ≤ Q ≤ 10^5 > 1 ≤ ID ≤ 10^5 > 1 ≤ PRICE ≤ 10^9 > > ------ Sample Input: ------ > ``` > 8 > 1 1 100 > 1 2 200 > 4 > 3 1 300 > 4 > 2 1 > 4 > 2 2 > 4 > ``` > > ------ Sample Output: ------ > ``` > 2 > 1 > 2 > -1 > ``` > > ------ Explanation: ------ > - Initial operations add items with IDs 1 and 2 with prices 100 and 200 respectively. > - The first query operation (type \'4\') returns \'2\' as item ID 2 has the highest price (200). > - An update operation changes the price of item ID 1 to 300. > - The second query operation now returns \'1\', as item ID 1 has the highest price (300). > - Removing item ID 1 leaves item ID 2 as the item with the highest price. > - The final query operation returns \'-1\' since no items remain after removing ID 2.","solution":"class Inventory: def __init__(self): self.items = {} self.prices = {} def add_item(self, item_id, price): self.items[item_id] = price if price not in self.prices: self.prices[price] = set() self.prices[price].add(item_id) def remove_item(self, item_id): if item_id in self.items: price = self.items[item_id] del self.items[item_id] self.prices[price].remove(item_id) if not self.prices[price]: del self.prices[price] def update_price(self, item_id, new_price): if item_id in self.items: old_price = self.items[item_id] self.items[item_id] = new_price self.prices[old_price].remove(item_id) if not self.prices[old_price]: del self.prices[old_price] if new_price not in self.prices: self.prices[new_price] = set() self.prices[new_price].add(item_id) def query_highest_price(self): if not self.items: return -1 highest_price = max(self.prices) return min(self.prices[highest_price]) def process_operations(operations): inventory = Inventory() results = [] for op in operations: if op[0] == 1: inventory.add_item(op[1], op[2]) elif op[0] == 2: inventory.remove_item(op[1]) elif op[0] == 3: inventory.update_price(op[1], op[2]) elif op[0] == 4: results.append(inventory.query_highest_price()) return results"},{"question":"Alice is organizing a party and she wants to schedule some events so that maximum number of her guests can attend as many events as possible. She has a list of events, each defined by a start and end time. A guest cannot attend two events that overlap in time. Two events are considered to overlap if one starts before the other ends. Write a function to help Alice maximize the number of events a guest can attend, given the list of events. **Input Format** - The first line contains a single integer T, denoting the number of test cases. - For each test case, the first line contains a single integer N, denoting the number of events. - The next N lines contain two space-separated integers each, where the i-th line contains the start and end times of the i-th event. **Output Format** For each test case, print a single line containing one integer - the maximum number of events a guest can attend. **Constraints** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 200,000 - 1 ≤ start time < end time ≤ 10^9 **Subtasks** - Subtask 1 (20 points): Sum of N over all test cases does not exceed 10^3 - Subtask 2 (80 points): Original constraints **Sample Input 1** ``` 1 3 1 4 2 3 3 5 ``` **Sample Output 1** ``` 2 ``` **Explanation 1** In the first test case, the guest can attend a maximum of 2 events: attend event (2, 3) and then event (3, 5). The guest cannot attend all three events because the event (1, 4) overlaps with both (2, 3) and (3, 5).","solution":"def max_events(t, test_cases): results = [] for events in test_cases: # Sort events by their end time, if two events end at the same time, sort by start time events.sort(key=lambda x: (x[1], x[0])) last_end_time = -1 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 events = [] for _ in range(N): start = int(data[index]) end = int(data[index + 1]) index += 2 events.append((start, end)) test_cases.append(events) results = max_events(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of integers representing the heights of buildings in a cityscape. You need to simulate the order in which the buildings will receive sunset views. The buildings are standing in a row from west to east, and the sun sets towards the west (left side). A building can see the sunset if there are no taller buildings to its left (west). Write a program to determine the indices of the buildings that will have a sunset view, in the order from west to east. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100), denoting the number of buildings. The second line contains n integers hi (1 ≤ hi ≤ 1000), representing the height of each building from west to east. -----Output----- Output the list of indices of buildings, in the order from west to east, that can see the sunset. The indices are 0-based. -----Examples----- Input 5 3 7 8 3 6 Output 0 1 2 Input 6 4 4 4 4 4 4 Output 0 -----Note----- For the first example, the 0th, 1st, and 2nd buildings have no taller buildings to their left and thus can see the sunset. For the second example, only the 0th building can see the sunset, as it has no buildings to its left.","solution":"def buildings_with_sunset_views(n, heights): This function returns the indices of buildings that can see the sunset. Arguments: n : int - number of buildings heights : list of int - heights of the buildings from west to east Returns: list of int - indices of buildings that can see the sunset, in order from west to east sunset_views = [] max_height = 0 for i in range(n): if heights[i] > max_height: sunset_views.append(i) max_height = heights[i] return sunset_views"},{"question":"Given an integer N, determine if N is a power of two. A number is said to be a power of two if it can be expressed as 2^k where k is a non-negative integer. Constraints * 1 <= N <= 10^9 Input Input is given from Standard Input in the following format: N Output If N is a power of two, print `Yes`; otherwise, print `No`. Examples Input 16 Output Yes Input 18 Output No","solution":"def is_power_of_two(N): Determines if the given integer N is a power of two. Parameters: N (int): the integer to check Returns: str: \'Yes\' if N is a power of two, otherwise \'No\' if N <= 0: return \\"No\\" # A number is a power of two if there is only one bit set in its binary representation return \\"Yes\\" if (N & (N - 1)) == 0 else \\"No\\""},{"question":"You are given a list of integers. Your task is to find and return the maximum difference between any two elements in the list. The difference is calculated as the absolute value of the subtraction between two elements, i.e., |a - b|. Input: A list of integers. Output: An integer representing the maximum difference between any two integers in the list. Constraints: The list will contain at least two integers. -10^9 ≤ a[i] ≤ 10^9 2 ≤ n ≤ 1000 SAMPLE INPUT: [1, 2, 3, 4, 5] SAMPLE OUTPUT: 4 Explanation: In Sample Input: [1, 2, 3, 4, 5] The maximum difference is calculated as: |5 - 1| = 4 Therefore, the output is 4.","solution":"def max_difference(nums): Returns the maximum difference between any two elements in the list. max_num = max(nums) min_num = min(nums) return abs(max_num - min_num)"},{"question":"A company is organizing a marathon, and it has n checkpoints placed along the route. Each checkpoint has a specific energy cost associated with it. A runner needs to pass each checkpoint exactly once, starting from the first checkpoint and finishing at the last checkpoint. The runner can pass through the checkpoints in any order, but must ultimately visit all checkpoints exactly once. The total energy cost for the runner is the sum of the individual energy costs of the checkpoints they visit. Your task is to determine the order in which the runner should pass through the checkpoints so that the total energy cost is minimized. -----Input----- The first line of the input contains one integer n (2 le n le 1,000) — the number of checkpoints. The second line contains n integers e_1, e_2, dots, e_n (1 le e_i le 1,000), where e_i is the energy cost associated with the i-th checkpoint. -----Output----- On the first line, print the minimum total energy cost needed for the runner to complete the marathon. On the second line, print a sequence of n integers representing the order of checkpoints that minimizes the total energy cost. If there are multiple answers, you can print any of them. -----Examples----- Input 3 5 3 7 Output 15 2 1 3 Input 4 2 8 4 6 Output 20 1 3 4 2 Input 6 1 5 3 4 2 6 Output 21 1 5 3 4 2 6 Input 2 9 4 Output 13 2 1 -----Note----- In the first example, the optimal order is to start with the second checkpoint with energy cost 3, then the first checkpoint with energy cost 5, and finally the third checkpoint with energy cost 7, leading to a total energy cost of 3 + 5 + 7 = 15. In the second example, the runner can pass checkpoints in the order 1, 3, 4, 2, resulting in a combined energy cost of 2 + 4 + 6 + 8 = 20.","solution":"def minimize_energy_cost(n, energy_costs): # Combine checkpoint indices with their respective energy costs indexed_costs = list(enumerate(energy_costs, start=1)) # Sort the indexed costs by the cost value sorted_costs = sorted(indexed_costs, key=lambda x: x[1]) # Extract the sorted order of checkpoint indices optimal_order = [checkpoint for checkpoint, cost in sorted_costs] # Calculate the total energy cost total_cost = sum(cost for checkpoint, cost in sorted_costs) return total_cost, optimal_order"},{"question":"You are creating a bakery management system. Your task is to write a function that determines the maximum number of distinct types of cakes you can bake given a list of available ingredients and the ingredient requirements for each type of cake. Each type of cake requires a unique set of ingredients, and each ingredient can be used for only one type of cake. Input The first line contains two integers n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50) — the number of types of cakes and the number of available ingredients, respectively. The next n lines describe the ingredient requirements for each type of cake. Each of these lines starts with an integer ki (1 ≤ ki ≤ m), the number of ingredients required for the i-th type of cake. The next ki integers represent the indices of the ingredients (from 1 to m) required for the i-th type of cake. Output Print a single integer — the maximum number of distinct types of cakes you can bake given the constraints. Examples Input 3 5 2 1 2 3 2 3 4 1 5 Output 2 Input 4 6 2 1 2 2 2 3 2 4 5 2 3 6 Output 3 Note For the first example, you can bake cakes with types 2 and 3, using all five ingredients. For the second example, you can bake cakes with types 1, 3, and 4, covering all six ingredients.","solution":"from itertools import combinations def max_distinct_cakes(n, m, requirements): Determines the maximum number of distinct types of cakes that can be baked given available ingredients. n - number of types of cakes m - number of available ingredients requirements - list of lists, where each sublist describes the ingredients needed for each type of cake Returns an integer which is the maximum number of distinct types of cakes. max_types = 0 # Iterate over all possible selections of cake types for r in range(1, n + 1): for cakes in combinations(range(n), r): used_ingredients = set() valid = True for cake in cakes: cake_ingredients = requirements[cake] for ingredient in cake_ingredients: if ingredient in used_ingredients: valid = False break used_ingredients.add(ingredient) if not valid: break if valid: max_types = max(max_types, len(cakes)) return max_types def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) requirements = [ list(map(int, line.split()[1:])) for line in lines[1:] ] return n, m, requirements"},{"question":"Your task is to develop a function that determines the score of various players in a series of games. Each game has multiple rounds, and players can either win or lose each round. Whenever a player wins a round, they receive points equal to the round number. Whenever a player loses a round, they receive zero points. The goal is to determine the player with the highest total score after all rounds are complete in each game. If there is a tie, output \\"TIE\\". ------ Input Format ------ - The first line contains a single integer T - the number of games. Then the games follow. - The first line of each game contains two integers P and R - the number of players and the number of rounds, respectively. - The next P lines contain R integers each, representing the results of each player in the rounds. A \'1\' denotes a win in that round, and a \'0\' denotes a loss. ------ Output Format ------ For each game, output in a single line, the player number (1-based index) with the highest score. Print TIE if there are multiple players with the highest score. ------ Constraints ------ 1 ≤ T ≤ 200 2 ≤ P ≤ 50 1 ≤ R ≤ 100 ------ Sample Input 1 ------ 3 3 5 1 0 1 0 1 1 1 0 0 0 0 0 0 1 1 4 4 1 0 1 0 0 1 0 1 1 1 1 1 0 0 1 0 2 3 1 1 1 0 0 0 ------ Sample Output 1 ------ 1 3 1 ------ Explanation 1 ------ Test case 1: The scores of the players are: - Player 1: 1 + 3 + 5 = 9 - Player 2: 1 + 2 = 3 - Player 3: 4 + 5 = 9 Since Player 1 and 3 both have the highest score of 9, output TIE. Test case 2: The scores of the players are: - Player 1: 1 + 3 = 4 - Player 2: 2 + 4 = 6 - Player 3: 1 + 2 + 3 + 4 = 10 - Player 4: 3 = 3 Player 3 has the highest score of 10. Test case 3: The scores of the players are: - Player 1: 1 + 2 + 3 = 6 - Player 2: 0 Player 1 has the highest score of 6.","solution":"def determine_winner(games): results = [] for game in games: P, R, scores = game[\'P\'], game[\'R\'], game[\'scores\'] total_scores = [0] * P for i in range(P): for j in range(R): if scores[i][j] == 1: total_scores[i] += (j + 1) max_score = max(total_scores) winners = [i+1 for i, score in enumerate(total_scores) if score == max_score] if len(winners) > 1: results.append(\\"TIE\\") else: results.append(str(winners[0])) return results def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) games = [] index = 1 for _ in range(T): P, R = map(int, input_lines[index].split()) index += 1 scores = [] for _ in range(P): scores.append(list(map(int, input_lines[index].split()))) index += 1 games.append({\'P\': P, \'R\': R, \'scores\': scores}) return games def main(input_data): games = parse_input(input_data) results = determine_winner(games) return \\"n\\".join(results)"},{"question":"You are developing a new system for managing reservations at a restaurant. Each reservation consists of a start time and an end time. To enhance the customer experience, you want to identify if any reservations overlap, since overlapping reservations would result in overbooking the restaurant. Your task is to write a program to determine if there are any overlapping reservations in a given list of reservations. Each reservation is represented by its start time and end time, and the times are given in the format of \\"hours:minutes\\" in 24-hour notation (e.g., \\"14:30\\" for half-past two in the afternoon). -----Input----- The first line of the input contains an integer N (1 le N le 10^{5}), the number of reservations. Each of the next N lines contains two strings S_i and E_i representing the start time and end time of the i-th reservation. All times are valid in 24-hour notation. -----Output----- Print \\"YES\\" if there is any overlap between any two reservations, otherwise print \\"NO\\". -----Examples----- Input 3 12:00 14:00 15:00 16:00 13:00 13:30 Output YES Input 2 10:00 11:00 11:00 12:00 Output NO Input 4 09:00 09:45 09:45 10:15 10:00 10:30 10:30 11:00 Output YES Note: - In the first example, the third reservation overlaps with the first reservation. - In the second example, the reservations are back-to-back but do not overlap. - In the third example, the second reservation overlaps with the first reservation.","solution":"def has_overlapping_reservations(n, reservations): Determine if there are any overlapping reservations. :param n: Number of reservations :param reservations: List of tuples, where each tuple contains two strings representing the start and end times. :return: \'YES\' if any reservations overlap, otherwise \'NO\' # First, convert time strings to minutes since midnight def time_to_minutes(t): hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes reservations = [(time_to_minutes(s), time_to_minutes(e)) for s, e in reservations] reservations.sort() # Sort by start time primarily and end time secondarily for i in range(1, n): if reservations[i][0] < reservations[i - 1][1]: # Check for overlap return \\"YES\\" return \\"NO\\""},{"question":"Write a Python function that takes in a list of integers and returns a new list containing only the elements that are larger than the arithmetic mean of the input list. The arithmetic mean is calculated as the sum of the elements divided by the number of elements. # Examples ```python larger_than_mean([1, 2, 3, 4, 5]) -> [4, 5] larger_than_mean([10, 20, 30, 40, 50]) -> [40, 50] larger_than_mean([5, 5, 5, 5, 5]) -> [] ```","solution":"def larger_than_mean(numbers): Returns a list of elements that are larger than the arithmetic mean of the input list. Args: numbers (list): A list of integers. Returns: list: A new list with elements larger than the arithmetic mean. if not numbers: return [] mean = sum(numbers) / len(numbers) return [num for num in numbers if num > mean]"},{"question":"Given two floating-point numbers, alpha and beta, write a Python function to compute and print the following operations in the specified order: 1. The sum of the two numbers. 2. The division of the first number by the second number. 3. The floor division of the first number by the second number. 4. The smallest integer greater than or equal to the logarithm of their product to base 10, rounded to two decimal places. Note: Use the `math` library for the logarithm and flooring operations. Function Signature ```python def compute_operations(alpha: float, beta: float) -> None: ``` Input Format The input consists of two floating-point numbers separated by a space: alpha and beta. Constraint - 1.0 leq alpha, beta leq 10^{9} - beta neq 0 Output Format Print out four values on separate lines, corresponding to the results of the operations specified. Example # Input ```plaintext 9.5 2.3 ``` # Output ```plaintext 11.8 4.130434782608696 4.0 2.33 ``` Explanation - The sum of 9.5 and 2.3 is 11.8. - The division of 9.5 by 2.3 is approximately 4.130434782608696. - The floor division of 9.5 by 2.3 is 4.0. - The logarithm (base 10) of their product (9.5 * 2.3) is approximately 2.33 when rounded to two decimal places.","solution":"import math def compute_operations(alpha: float, beta: float) -> None: Computes and prints four operations based on the two input numbers. 1. The sum of alpha and beta 2. The division of alpha by beta 3. The floor division of alpha by beta 4. The smallest integer greater than or equal to the logarithm of their product to base 10, rounded to two decimal places Parameters: alpha (float): First floating-point number beta (float): Second floating-point number Returns: None # 1. Sum of the two numbers sum_result = alpha + beta print(sum_result) # 2. Division of alpha by beta division_result = alpha / beta print(division_result) # 3. Floor division of alpha by beta floor_division_result = alpha // beta print(floor_division_result) # 4. Smallest integer >= log10 of their product, rounded to 2 decimal places product = alpha * beta log_result = math.floor(math.log10(product) * 100) / 100 print(log_result)"},{"question":"A city traffic management system monitors the cars passing through a toll gate on a highway. Each car is assigned a positive integer ID as it enters the toll gate. The traffic data for one day is recorded in the sequence the cars pass through the toll gate. Due to some malfunction, a number of cars are missing from the data, resulting in consecutive car ID sequences being incomplete. The system administrators want to detect how many unique IDs actually entered the toll gate. You are given an array of car IDs recorded by the toll gate. Your task is to determine the minimum number of unique car IDs that could have passed through the toll gate for one day. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of car IDs recorded. The second line contains n space-separated integers: c1, c2, ..., cn (1 ≤ ci ≤ 109) — the recorded car IDs. Output Print the minimum number of unique car IDs that could have passed through the toll gate. Examples Input 6 3 5 7 7 5 3 Output 3 Input 5 1 2 3 2 1 Output 3 Note In the first test case, the unique IDs recorded are 3, 5, and 7. Therefore, the minimum number of unique car IDs is 3. In the second test case, the unique IDs recorded are 1, 2, and 3. Therefore, the minimum number of unique car IDs is 3.","solution":"def count_unique_car_ids(n, car_ids): Returns the minimum number of unique car IDs that could have passed through the toll gate. Params: n (int): Number of car IDs recorded car_ids (list of int): List of car IDs Returns: int: Minimum number of unique car IDs return len(set(car_ids))"},{"question":"**Problem Description:** The kingdom of Narnia is a beautiful place where every citizen loves solving mathematical puzzles. The queen of Narnia, being a mathematician herself, has come up with a fascinating problem. In the kingdom, there is a unique integer sequence known as the Royal Sequence. For a given integer n, a Royal Sequence of length 2n+1 is defined as follows: - The sequence is symmetric around its center. - The first n elements are given and the last n elements are a reverse of the first n elements. - The middle element can be any integer. Given n and the first n elements of the Royal Sequence, you need to find the corresponding Royal Sequence. **Input:** - The first line contains t, the number of test cases. - For each test case, the first line contains a single integer n. - The next line contains n integers, the first n elements of the Royal Sequence. **Output:** - For each test case, output a single line containing the full Royal Sequence of length 2n+1. **Constraints:** - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 50 - 1 ≤ elements of the sequence ≤ 1000 **Sample Input:** ``` 2 2 1 2 3 4 5 6 ``` **Sample Output:** ``` 1 2 x 2 1 4 5 6 x 6 5 4 ``` (Note: In the actual problem, the value of the middle element \'x\' can be any integer and is not provided in the input or required in the output.) **Explanation:** - For the first test case with n=2 and the first elements [1, 2], the resulting Royal Sequence is [1, 2, x, 2, 1] - For the second test case with n=3 and the first elements [4, 5, 6], the resulting Royal Sequence is [4, 5, 6, x, 6, 5, 4]","solution":"def royal_sequence(test_cases): results = [] for n, first_n_elements in test_cases: sequence = first_n_elements + [\'x\'] + first_n_elements[::-1] results.append(\\" \\".join(map(str, sequence))) return results"},{"question":"You are designing a binary search tree for managing a large collection of books in a library. Each book is represented by its unique ISBN (International Standard Book Number), and you want to implement a few key operations efficiently. Design a program to perform the following operations on the binary search tree: 1. Insert a new book\'s ISBN into the collection. 2. Remove an existing book\'s ISBN from the collection. 3. Check if a particular book\'s ISBN exists in the collection. 4. Find the ISBN of the book with the smallest or largest value in the collection. Input The first line contains an integer T, the number of operations. Each of the next T lines contains one of the following operations: - \\"insert ISBN\\": Insert the ISBN into the binary search tree. - \\"delete ISBN\\": Remove the ISBN from the binary search tree. - \\"exists ISBN\\": Check if the ISBN exists in the binary search tree. - \\"min\\": Output the smallest ISBN in the binary search tree. - \\"max\\": Output the largest ISBN in the binary search tree. Output For each \\"exists\\", \\"min\\", and \\"max\\" operation, output the result on a new line: - \\"exists ISBN\\": \\"yes\\" if the ISBN exists in the tree, otherwise \\"no\\". - \\"min\\": Output the smallest ISBN. - \\"max\\": Output the largest ISBN. Constraints 1 ≤ T ≤ 10^5 1 ≤ ISBN ≤ 10^9 SAMPLE INPUT 8 insert 100 insert 200 insert 50 delete 100 exists 100 exists 200 min max SAMPLE OUTPUT no yes 50 200","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.key: if node.left: self._insert(node.left, key) else: node.left = TreeNode(key) else: if node.right: self._insert(node.right, key) else: node.right = TreeNode(key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if not node: return node if key < node.key: node.left = self._delete(node.left, key) elif key > node.key: node.right = self._delete(node.right, key) else: if not node.left: return node.right elif not node.right: return node.left min_larger_node = self._find_min(node.right) node.key = min_larger_node.key node.right = self._delete(node.right, min_larger_node.key) return node def exists(self, key): return self._exists(self.root, key) def _exists(self, node, key): if not node: return False if key == node.key: return True elif key < node.key: return self._exists(node.left, key) else: return self._exists(node.right, key) def find_min(self): if not self.root: return None return self._find_min(self.root).key def _find_min(self, node): current = node while current.left: current = current.left return current def find_max(self): if not self.root: return None return self._find_max(self.root).key def _find_max(self, node): current = node while current.right: current = current.right return current def process_operations(operations): bst = BST() results = [] for operation in operations: command = operation.split() if command[0] == \\"insert\\": bst.insert(int(command[1])) elif command[0] == \\"delete\\": bst.delete(int(command[1])) elif command[0] == \\"exists\\": exists = bst.exists(int(command[1])) results.append(\\"yes\\" if exists else \\"no\\") elif command[0] == \\"min\\": min_val = bst.find_min() if min_val is not None: results.append(str(min_val)) elif command[0] == \\"max\\": max_val = bst.find_max() if max_val is not None: results.append(str(max_val)) return results"},{"question":"Bob has decided to test Alice further on her understanding of number theory. This time, he asks her to determine the sum of proper divisors of a number X. A proper divisor of a number is a divisor that is strictly less than the number itself. Alice finds this task challenging and seeks your help to write a program to solve it. ------ Input: ------ First line of input contains a single integer T, the number of test cases. Each test case consists of a single line containing a single integer X. ------ Output: ------ For each test case, output on a separate line the sum of all proper divisors of X. ------ Constraints: ------ 1 ≤ T ≤ 100 1 ≤ X ≤ 1000000 ------ Scoring: ------ You will be awarded 40 points for correctly solving for X ≤ 100. You will be awarded another 30 points for correctly solving for X ≤ 10000. The remaining 30 points will be awarded for correctly solving for X ≤ 1000000. ------ Sample Input 1 ------ 3 6 28 12 ------ Sample Output 1 ------ 6 28 16","solution":"def sum_of_proper_divisors(n): Returns the sum of all proper divisors of n. A proper divisor of n is a divisor that is strictly less than n. if n <= 1: return 0 sum_divisors = 1 # 1 is a proper divisor of any n > 1 sqrt_n = int(n**0.5) for i in range(2, sqrt_n + 1): if n % i == 0: sum_divisors += i if i != n // i: sum_divisors += n // i return sum_divisors def process_test_cases(test_cases): Processes multiple test cases to find the sum of proper divisors for each input number. Args: - test_cases: a list of integers, each representing a single test case Returns: - results: a list of integers where each integer is the sum of proper divisors of corresponding input number return [sum_of_proper_divisors(x) for x in test_cases]"},{"question":"Petya has decided to plan a road trip with his friends. They are trying to determine the optimal route between cities to minimize travel time. The road network can be represented as a weighted undirected graph, where cities are nodes and roads are edges with positive weights representing travel times between cities. Help Petya find the minimum travel time between two given cities using the provided road network. Input: The first line contains two integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of cities and the number of roads, respectively. Each of the next m lines contains three integers, u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are the cities connected by a road and w is the travel time along that road. The last line contains two distinct integers, s and t (1 ≤ s, t ≤ n), representing the starting city and the destination city. Output: Print a single integer, the minimum travel time from city s to city t. If there is no route from s to t, print -1. Examples: Input: 5 6 1 2 4 1 3 2 2 3 1 2 4 5 3 5 8 4 5 3 1 5 Output: 10 Input: 3 2 1 2 2 2 3 3 1 3 Output: 5 Input: 4 2 1 2 1 3 4 1 1 4 Output: -1","solution":"import heapq def find_min_travel_time(n, m, edges, s, t): # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Implement Dijkstra\'s algorithm pq = [(0, s)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[s] = 0 while pq: current_dist, u = heapq.heappop(pq) if u == t: return current_dist if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return -1 if dist[t] == float(\'inf\') else dist[t]"},{"question":"You are given a string S consisting of lowercase English letters and an integer K. You need to find the Kth largest character in the string that appears at least once. Example 1: Input: S = \\"aabbcc\\", K = 2 Output: b Explanation: The unique characters in the string in sorted order are \'a\', \'b\', and \'c\'. The 2nd largest character is \'b\'. Example 2: Input: S = \\"abcdeabc\\", K = 1 Output: e Explanation: The unique characters in the string in sorted order are \'a\', \'b\', \'c\', \'d\', and \'e\'. The largest character is \'e\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthLargestChar() which takes a string S and an integer K as input and returns the Kth largest character that appears at least once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^6 1 <= K <= 26","solution":"def kthLargestChar(S, K): Returns the Kth largest character in the string S that appears at least once. unique_chars = sorted(set(S), reverse=True) return unique_chars[K-1]"},{"question":"You are given an array of integers A of length N. Your task is to perform a series of operations to turn all elements of the array into 0. In each operation, you can choose any subarray (continuous part of the array) in which the elements are all non-zero and decrement each of the elements of the subarray by 1. Determine the minimum number of operations required to convert the array into an array of all zeros. Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^9 (1 leq i leq N) * All values in input are integers Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of operations required. Examples Input 5 3 0 2 5 6 Output 6 Input 4 4 4 3 4 Output 4 Input 6 1 2 3 4 5 6 Output 6","solution":"def min_operations_to_zero(n, arr): operations = 0 i = 0 while i < n: # if we encounter a zero, move to the next element if arr[i] == 0: i += 1 else: # Start of new non-zero subarray max_in_subarray = arr[i] # Move through the continuous non-zero subarray to find the maximum in that subarray while i < n and arr[i] != 0: max_in_subarray = max(max_in_subarray, arr[i]) i += 1 operations += max_in_subarray return operations"},{"question":"# Scenario In mathematics and computer science, it is common to deal with **matrices** of numbers. Often, we need to perform transformations or operations on these matrices. One such transformation is the **rotation** of a matrix by 90 degrees. ___ # Task **_Given_** a *square matrix*, **_rotate_** the matrix by 90 degrees **clockwise**. ___ # Notes * **_The matrix is guaranteed to be square_**, meaning the number of rows and columns are equal. * You are **_not allowed to use any additional memory for another matrix_**—do the transformation in place. * The matrix **_contains only integers_**. * **_Handle any size of the square matrix_**, from 1x1 to NxN. ____ # Input >> Output Examples: ``` rotateMatrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) ==> return [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **_Explanation_**: * **_After rotating by 90 degrees clock-wise_**, * The element in the first row third column, `3`, moves to the third row first column. * The entire matrix is transformed accordingly. ____ ``` rotateMatrix([ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ]) ==> return [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` **_Explanation_**: * **_After rotating by 90 degrees clock-wise_**, * The element in the second row second column, `4`, moves to the second row third column. * The entire matrix is transformed accordingly. ____ ``` rotateMatrix([[1]]) ==> return [[1]] ``` **_Explanation_**: * **_A single element matrix remains the same when rotated by 90 degrees_**. ___ # Tune Your Code, Only O(N^2) complexity solutions will pass for NxN matrices of size up to 1000x1000.","solution":"def rotateMatrix(matrix): Rotates the given NxN matrix by 90 degrees clockwise in place. N = len(matrix) for layer in range(N // 2): first = layer last = N - 1 - layer for i in range(first, last): offset = i - first # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top return matrix"},{"question":"You are given a non-negative integer `n`. Your task is to determine if `n` is a happy number. A happy number is defined by the following process: - Starting with any positive integer, replace the number by the sum of the squares of its digits. - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. - Those numbers for which this process ends in 1 are happy numbers. Return a boolean value, `True` if `n` is a happy number, and `False` if not. # Example 1 Input: 19 Output: True Explanation: 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 # Example 2 Input: 2 Output: False Explanation: 2^2 = 4 4^2 = 16 1^2 + 6^2 = 37 3^2 + 7^2 = 58 5^2 + 8^2 = 89 8^2 + 9^2 = 145 1^2 + 4^2 + 5^2 = 42 4^2 + 2^2 = 20 2^2 + 0^2 = 4 (loops back to 4) # Notes * `n` will always be a non-negative integer. * Your solution should handle large values of `n`.","solution":"def is_happy(n): Returns True if n is a happy number, else False. def get_next(number): total_sum = 0 while number > 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"The government of a certain country has decided to launch a series of new public health campaigns. Each campaign runs for a certain number of consecutive days, and the effect of each campaign can be positive or negative depending on a variety of factors. The goal is to identify the maximum positive cumulative effect that can be achieved by selecting a period of contiguous days over which the campaign runs. You are given an array where each element represents the effect on a particular day. You have to find the maximum sum of a contiguous subarray (at least one element) representing the cumulative effect of the campaign. Input: The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains a positive integer, n, which represents the number of days. The second line contains n space-separated integers representing the effect on each day. Output: For each test case, output the maximum cumulative effect of the campaign. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 100 -1000 ≤ effect[i] ≤ 1000 SAMPLE INPUT 2 5 -1 2 3 -5 7 3 -2 1 -3 SAMPLE OUTPUT 7 1","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray. Parameters: arr (list): List of integers representing the array of effects. Returns: int: Maximum sum of a contiguous subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_campaign_effects(test_cases): Processes multiple test cases for the maximum subarray sum problem. Parameters: test_cases (list): List of tuples, where each tuple contains an integer n followed by a list of n integers representing the effects for n days. Returns: list: List of integers where each integer represents the maximum sum of a contiguous subarray for the corresponding test case. results = [] for n, effects in test_cases: result = max_subarray_sum(effects) results.append(result) return results"},{"question":"Josiah is learning to play chess and is particularly interested in the movements of the knight piece. He comes across a challenge where he has to determine the minimum number of moves a knight needs to reach a specific destination from a given starting position on an 8x8 chessboard. The knight\'s move in chess consists of an L-shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. For example, if a knight is at position (3, 2), it can move to (1, 1), (1, 3), (2, 4), (4, 4), (5, 1), or (5, 3). Josiah now wants to write a program that can determine the minimum number of moves required for the knight to reach the target position from the start position on the chessboard. -----Input----- The input will contain multiple test cases. The first line of the input contains an integer n (1 leq n leq 100) representing the number of test cases. Each of the next n lines contains four integers x_1, y_1, x_2, y_2 separated by spaces (1 leq x_1, y_1, x_2, y_2 leq 8), where (x_1, y_1) is the starting position of the knight and (x_2, y_2) is the destination position. -----Output----- For each test case, print one integer representing the minimum number of moves required for the knight to travel from the starting position to the destination position on the chessboard. -----Examples----- Input 3 1 1 8 8 1 1 2 2 3 3 4 3 Output 6 4 3 -----Note----- In the first test case, the knight needs a minimum of 6 moves to reach from position (1, 1) to (8, 8). In the second test case, the knight reaches from (1, 1) to (2, 2) in 4 moves using the L-shape movement. In the third test case, the knight needs a minimum of 3 moves to reach from (3, 3) to (4, 3).","solution":"from collections import deque def min_knight_moves(n, test_cases): def is_valid(x, y): return 1 <= x <= 8 and 1 <= y <= 8 def bfs(start, end): if start == end: return 0 directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, d = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: if (nx, ny) == end: return d + 1 queue.append((nx, ny, d + 1)) visited.add((nx, ny)) return -1 results = [] for (x1, y1, x2, y2) in test_cases: results.append(bfs((x1, y1), (x2, y2))) return results"},{"question":"A large data set has been divided into multiple smaller sub-arrays, and each sub-array might have a different length. You are tasked with calculating the maximum sum of elements in a contiguous sub-array within each of the given sub-arrays. This problem is essentially a variation of the classic \\"Maximum Subarray Problem\\" or \\"Kadane\'s Algorithm.\\" Given multiple arrays, your job is to find the maximum sum of a contiguous sub-array for each array and then return the result in the specified output format. Input The first line of the input gives the number of test cases, T. T test cases follow. Each case begins with a line containing an integer N, the number of sub-arrays. The next N lines each describe a sub-array, beginning with an integer k (the length of the sub-array), followed by k integers (the elements of the sub-array). Output For each test case, output one line containing \\"Case #x: y1 y2 ... yN\\", where x is the case number (starting from 1), and yi is the maximum sum of a contiguous sub-array in the i-th sub-array. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10 1 ≤ k ≤ 1000 -10000 ≤ Element of sub-array ≤ 10000 SAMPLE INPUT 2 2 5 -2 1 -3 4 -1 2 1 -5 4 3 1 2 3 1 4 1 -1 -1 1 SAMPLE OUTPUT Case #1: 6 6 Case #2: 1 In the first sample case: - The first sub-array is: [-2, 1, -3, 4, -1, 2, 1, -5, 4]. The maximum sum of a contiguous sub-array is achieved with [4, -1, 2, 1] which sums to 6. - The second sub-array is: [1, 2, 3]. The maximum sum of a contiguous sub-array is the entire array itself, 6. In the second sample case: - The lone sub-array is: [1, -1, -1, 1]. The maximum sum of a contiguous sub-array is the value 1 by itself.","solution":"def max_subarray_sum(arr): current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max def process_test_cases(T, test_cases): results = [] for case_idx, case in enumerate(test_cases): case_results = [] for sub_array in case: case_results.append(max_subarray_sum(sub_array)) results.append(f\\"Case #{case_idx + 1}: \\" + \\" \\".join(map(str, case_results))) return results # The function to be tested in the test cases def solution_input_parser(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) test_case = [] idx += 1 for _ in range(N): k_arr = list(map(int, lines[idx].split())) k = k_arr[0] arr = k_arr[1:] test_case.append(arr) idx += 1 test_cases.append(test_case) return T, test_cases def solution(input_str): T, test_cases = solution_input_parser(input_str) results = process_test_cases(T, test_cases) return \\"n\\".join(results)"},{"question":"A software company has scheduled a series of meetings in a single conference room. They need to determine the maximum number of non-overlapping meetings that can be scheduled to use the room efficiently. Each meeting has a start and end time. A meeting can start right after the previous meeting ends, but cannot overlap. Write a program to help the company schedule the most meetings. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of meetings. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^4), the start and end times of the ith meeting. Output Output the maximum number of non-overlapping meetings that can be scheduled. Examples Input 3 1 2 3 4 0 6 Output 2 Input 5 1 2 3 4 0 6 5 7 8 9 Output 4","solution":"def max_non_overlapping_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be scheduled. Parameters: n (int): The number of meetings. meetings (list of tuples): A list where each tuple contains the start and end time of a meeting. Returns: int: The maximum number of non-overlapping meetings. # Sort meetings based on their end times meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"In a small town, a group of amateur treasure hunters are looking for a treasure hidden in a rectangular grid of M rows and N columns. Each cell in the grid is either empty (denoted by 0) or contains the treasure (denoted by X). The treasure hunters want to minimize the number of cells to check before they can guarantee they will find the treasure. The grid follows these properties: - The cells in each row and each column are either all empty or all have the treasure. - If a row or column contains the treasure, it does so without discontinuities. You need to write an algorithm that finds the minimum number of cells the hunters need to check to ensure they find the treasure. -----Input:----- - First line contains T, the number of test cases. - Each test case consists of two integers M and N, the dimensions of the grid. -----Output:----- For each test case, output a single line containing the minimum number of cells to be checked. -----Constraints----- - 1 leq T leq 10 - 2 leq M, N leq 100 -----Subtasks----- - 10 points: M = 1 or N = 1 - 40 points: M = N - 50 points: General constraints -----Sample Input:----- 2 1 10 3 3 -----Sample Output:----- 1 2 -----EXPLANATION:----- - In the first test case, there\'s only one row, so checking any single cell in that row can determine if the treasure is there or not. - In the second test case, checking one cell in any row and one cell in any column will ensure the treasure is found with a maximum of checking 2 cells.","solution":"def min_cells_to_check(M, N): Determine the minimum number of cells that need to be checked to ensure finding the treasure in an M x N grid following the given properties. Parameters: M (int): Number of rows in the grid. N (int): Number of columns in the grid. Returns: int: The minimum number of cells to check. # To guarantee finding the treasure, check one cell in any row and one in any column return 1 if M == 1 or N == 1 else 2"},{"question":"You are given an array of integers. Your task is to determine if you can arrange the array elements to form a \\"Happy Array\\". A \\"Happy Array\\" is an array in which no two adjacent elements are the same. For example, A = [1, 2, 3, 4] is a \\"Happy Array\\" because no two adjacent elements are the same, whereas B = [1, 1, 2, 3] is not a \\"Happy Array\\" because there are two adjacent elements with the value 1. Write a program that checks if it is possible to rearrange the elements to make the array a \\"Happy Array\\". If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Input Format: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the size of the array. The next line contains N integers, representing the array elements. Output Format: For each test case, print \\"YES\\" if the array can be rearranged to form a \\"Happy Array\\", otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Array element ≤ 10^7 Example Input 3 4 1 2 3 4 4 1 1 1 1 6 1 1 2 2 3 3 Example Output YES NO YES Explanation In the first test case, the given array is already a \\"Happy Array\\". In the second test case, all elements are identical, so it is impossible to rearrange them to avoid two adjacent elements being the same. In the third test case, the array can be rearranged to [1, 2, 1, 2, 3, 3] which is a \\"Happy Array\\".","solution":"from collections import Counter import heapq def can_form_happy_array(arr): Determines if it\'s possible to rearrange the elements to form a \\"Happy Array\\", where no two adjacent elements are the same. n = len(arr) count = Counter(arr) max_freq = max(count.values()) # Check if the most frequent element can fit without being adjacent if max_freq > (n + 1) // 2: return \\"NO\\" return \\"YES\\" def check_happy_arrays(test_cases): For each test case, determine if it\'s possible to rearrange the elements of the array such that no two adjacent elements are the same. results = [] for case in test_cases: N, array = case result = can_form_happy_array(array) results.append(result) return results # Example to run the function if __name__ == \\"__main__\\": T = 3 test_cases = [ (4, [1, 2, 3, 4]), (4, [1, 1, 1, 1]), (6, [1, 1, 2, 2, 3, 3]) ] results = check_happy_arrays(test_cases) for result in results: print(result)"},{"question":"You are given a sequence of integers. Determine if you can rearrange the sequence to form a continuous increasing sequence starting from any arbitrary number. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100): the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000). -----Output----- Print \\"YES\\" if the sequence can be rearranged to form a continuous increasing sequence starting from any arbitrary number, otherwise print \\"NO\\". -----Examples----- Input 5 2 4 6 3 5 Output YES Input 4 10 8 6 5 Output NO ----- Note ----- In the first example, the sequence can be rearranged to form 2, 3, 4, 5, 6 which is an increasing continuous sequence. In the second example, despite any rearrangement, you can not form a continuous increasing sequence.","solution":"def can_form_continuous_sequence(n, sequence): Determines if the sequence can be rearranged to form a continuous increasing sequence. :param n: int - number of elements in the sequence :param sequence: List[int] - the sequence of integers :return: str - \\"YES\\" if a continuous increasing sequence can be formed, \\"NO\\" otherwise sequence = sorted(sequence) for i in range(1, n): if sequence[i] != sequence[i - 1] + 1: return \\"NO\\" return \\"YES\\""},{"question":"Consider an integer array B of length N where each element is initially set to 1. You are given an additional integer K. Define an operation in which you increase a subarray of B of length L by 1, i.e., for every valid index i within a chosen subarray, Bi is incremented by 1. An increment operation can be applied up to M times. Your task is to determine the maximum sum of the array B after performing at most M increment operations. Input The first line of input contains three integers N, M, and K - the length of the array, the number of increment operations, and the length of each subarray to be incremented, respectively. Output You should output a single integer representing the maximum sum of the array B after at most M increment operations. Example Input 5 2 3 Output 11 Note Initially, B = [1, 1, 1, 1, 1]. After one increment operation on subarray [1, 1, 1], B might become [2, 2, 2, 1, 1]. After performing another increment operation possibly on subarray [2, 2, 2], B might become [3, 3, 3, 1, 1]. Thus, the maximum sum is 3 + 3 + 3 + 1 + 1 = 11.","solution":"def max_sum_of_B(N, M, K): Returns the maximum sum of array B after performing at most M increment operations on subarrays of length K. # Compute the base sum of the array B which is initially filled with 1s base_sum = N # Each operation can increment K elements by 1, and up to M operations can be done increment_sum = M * K # Maximum sum is base sum + total increment achieved by M operations on subarrays of length K max_sum = base_sum + increment_sum return max_sum # Example usage: # N = 5, M = 2, K = 3 print(max_sum_of_B(5, 2, 3)) # Output: 11"},{"question":"Yuki and Ken are avid chess players who enjoy creating new challenges for each other. Recently, they’ve devised a puzzle where given a certain position of a knight on a chessboard, they calculate how many legal moves it has. A knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. The chessboard is an 8x8 grid with rows labeled from 1 to 8 and columns labeled from \'a\' to \'h\'. Yuki and Ken wish to create a program that, given the current position of the knight, outputs the number of valid moves it can make without moving off the edge of the board. Create a program that takes the current position of a knight and outputs the number of valid moves it can make. # Input The input consists of several lines. Each line contains a single position in the format \\"a1\\" where \'a\' is the column and \'1\' is the row. The input ends with a line containing \\"0\\". # Output For each position, output the number of legal moves the knight can make from that position. # Example Input ``` d4 a1 h8 b2 g6 0 ``` Output ``` 8 2 2 4 6 ``` # Explanation - From `d4`, the knight can move to `b3`, `b5`, `c2`, `c6`, `e2`, `e6`, `f3`, and `f5`. - From `a1`, the knight can move to `b3` and `c2`. - From `h8`, the knight can move to `f7` and `g6`. - From `b2`, the knight can move to `a4`, `c4`, `d1`, and `d3`. - From `g6`, the knight can move to `e5`, `e7`, `f4`, `f8`, `h4`, and `h8`. This should match the style, complexity, and scope of the sample question provided.","solution":"def count_knight_moves(position): Given a position on a chessboard, returns the number of valid moves a knight can make. column, row = position column = ord(column) - ord(\'a\') + 1 # convert column letter to number row = int(row) possible_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] valid_moves = 0 for move in possible_moves: new_col = column + move[0] new_row = row + move[1] if 1 <= new_col <= 8 and 1 <= new_row <= 8: valid_moves += 1 return valid_moves def process_positions(positions): Processes multiple positions input and returns a list of count of valid knight moves for each position. results = [] for position in positions: if position == \\"0\\": break results.append(count_knight_moves(position)) return results"},{"question":"You are given a grid of size n x n consisting of characters \'.\' (representing an empty cell) and \'#\' (representing an obstacle). You have to check if there exists any path from the top-left corner (1,1) to the bottom-right corner (n,n) such that you can only move right or down and you do not encounter any obstacles. Write a function `find_path` that takes the grid as input and returns \\"YES\\" if there exists such a path, otherwise returns \\"NO\\". Input The first line contains a single integer n (2 ≤ n ≤ 500). The next n lines contain n characters each representing the grid. Output Output \\"YES\\" if there exists a valid path from the top-left to the bottom-right, otherwise \\"NO\\". Examples Input 3 ... ..# . Output NO Input 4 .... .#.. ..#. .... Output YES Function signature ```python def find_path(grid: List[str]) -> str: # Your code here ```","solution":"def find_path(grid): n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return \\"NO\\" def is_path(x, y): if x >= n or y >= n or grid[x][y] == \'#\': return False if x == n-1 and y == n-1: return True grid[x] = grid[x][:y] + \'#\' + grid[x][y+1:] # Mark as visited return is_path(x + 1, y) or is_path(x, y + 1) return \\"YES\\" if is_path(0, 0) else \\"NO\\""},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. Input Format A list of integers. Output Format A list of integers containing only the prime numbers from the input list. SAMPLE INPUT [10, 15, 3, 7, 17, 22, 33] SAMPLE OUTPUT [3, 7, 17] Explanation The input list is [10, 15, 3, 7, 17, 22, 33]. Among these, 3, 7, and 17 are prime numbers. Thus the output is [3, 7, 17].","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"collections.Counter() The `Counter` class from the `collections` module provides a fast way to count unique items in an iterable object and return a dictionary-like object where the keys are the unique items and the values are their counts. For example, given a string \\"abracadabra\\", the Counter object would look like `Counter({\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1})`. Sample Code ```python from collections import Counter # Counting elements in a list elements = [\'a\', \'b\', \'c\', \'a\', \'b\', \'a\'] count_dict = Counter(elements) print(count_dict) # Output: Counter({\'a\': 3, \'b\': 2, \'c\': 1}) # Counting elements in a string text = \\"hello world\\" count_dict = Counter(text) print(count_dict) # Output: Counter({\'l\': 3, \'o\': 2, \'h\': 1, \'e\': 1, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1}) ``` Task Given a string `s`, count the occurrences of each character in the string using `collections.Counter`, and return the n most common characters and their counts in a descending order of their counts. If two characters have the same count, sort them alphabetically. Input Format A single line containing the string `s`. Output Format Print the n most common characters and their counts in descending order, each on a new line. If the string has fewer than n unique characters, list them all. Each line should be formatted as: `character: count`. Constraints - 1 leq |s| leq 10^5 - `s` contains only lowercase English letters. Example Input abracadabra Example Output (for n = 3) ``` a: 5 b: 2 r: 2 ``` Example Input mississippi Example Output (for n = 2) ``` i: 4 s: 4 ```","solution":"from collections import Counter def most_common_chars(s, n): Returns the n most common characters and their counts in the string s. If n is larger than the unique characters in s, return all characters. count_dict = Counter(s) most_common = count_dict.most_common(n) return most_common"},{"question":"Given a sequence of temperatures recorded over several days, create a program that calculates the average temperature and the number of days when the temperature was above the average. Input The input is given in the following format: Temperature ... ... Each temperature is recorded on a new line. All values ​​entered are real numbers greater than or equal to -50.0 and less than or equal to 50.0. The number of temperatures entered is between 1 and 100. Output The output should be in the following format: Average temperature: X.X Days above average: Y Where: - X.X is the average temperature, rounded to one decimal place. - Y is the number of days when the temperature was above the average. Example Input 18.5 21.7 16.8 20.0 25.3 Output Average temperature: 20.5 Days above average: 2","solution":"def calculate_average_and_above_average_days(temperatures): Calculate the average temperature and the number of days with temperature above the average. :param temperatures: List of temperature readings :type temperatures: list of float :return: tuple containing the average temperature and the number of days above average :rtype: tuple # Calculating the average temperature average_temperature = sum(temperatures) / len(temperatures) # Counting the number of days with temperature above average days_above_average = sum(temp > average_temperature for temp in temperatures) return round(average_temperature, 1), days_above_average"},{"question":"You are given an n times n grid. Each cell of the grid is either empty or contains a tree. A tree cell is denoted by \'#\' and an empty cell is denoted by \'.\'. A forest in the grid is a group of adjacent tree cells (horizontally or vertically connected). Your task is to identify the number of forests present in the grid. # Input - The first line contains an integer n, the size of the grid (1 ≤ n ≤ 50). - Each of the next n lines contains a string of n characters, representing the grid. # Output - Print a single integer, the number of forests in the grid. # Example Input ``` 4 .#.. #. .#.. ..#. ``` Output ``` 2 ``` Explanation The grid looks like this: ``` .#.. #. .#.. ..#. ``` There are 2 forests: 1. The first forest consists of cells (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2). 2. The second forest consists of cell (4, 3).","solution":"def count_forests(grid): Counts the number of forests in a given n x n grid. Parameters: grid (List[str]): The input grid where each cell is either \'.\' (empty) or \'#\' (tree). Returns: int: The number of forests. n = len(grid) visited = [[False] * n for _ in range(n)] def dfs(x, y): Depth-first search to mark all connected components of a tree. stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'#\': visited[nx][ny] = True stack.append((nx, ny)) forest_count = 0 for i in range(n): for j in range(n): if grid[i][j] == \'#\' and not visited[i][j]: forest_count += 1 visited[i][j] = True dfs(i, j) return forest_count"},{"question":"Roman is very particular about his numbering schemes and enjoys ordering sequences of numbers. He recently came across a sequence of numbers and defined a new type of sequence called \\"Monotonic Cutting Sequence\\". A sequence is called \\"Monotonic Cutting Sequence\\" if it can be broken into exactly two contiguous non-empty subsequences where the first part is non-increasing and the second part is non-decreasing. Roman needs your help to determine if a given sequence of integers can be split into a Monotonic Cutting Sequence. Input The first line contains an integer n (2 ≤ n ≤ 10^5) - the number of integers in the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) - the sequence of integers. Output Output \\"YES\\" if the sequence can be split into a Monotonic Cutting Sequence. Otherwise, output \\"NO\\". Examples Input 6 1 2 2 3 4 5 Output NO Input 5 5 3 2 4 8 Output YES Note In the first example, the sequence cannot be broken into a Monotonic Cutting Sequence. There is no way to split it into two subsequences where the first part is non-increasing and the second part is non-decreasing. In the second example, splitting the sequence into 5, 3, 2 and 4, 8 meets the criteria of a Monotonic Cutting Sequence.","solution":"def is_monotonic_cutting_sequence(n, sequence): Determines if the given sequence can be split into a Monotonic Cutting Sequence. Args: n : int - number of elements in the sequence sequence : list of int - sequence of integers Returns: str: \'YES\' or \'NO\' indicating if the sequence can be split as required if n < 2: return \\"NO\\" # Find the peak where the non-increasing part ends i = 0 while i < n - 1 and sequence[i] >= sequence[i + 1]: i += 1 # If there is no non-increasing part or entire sequence is non-increasing if i == 0 or i == n - 1: return \\"NO\\" # Check if the remaining part is non-decreasing while i < n - 1 and sequence[i] <= sequence[i + 1]: i += 1 if i == n - 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You have been tasked with organizing a company\'s employee details into an efficient data structure. Each employee has a unique employee ID, a name, and a salary. You need to design a function that performs certain operations on this employee data set. The operations are as follows: 1. **Add an Employee:** Given an ID, name, and salary, add the employee to the data structure. 2. **Update Salary:** Given an ID and a new salary, update the employee\'s salary. 3. **Get Salary:** Given an ID, return the employee\'s salary. 4. **Get Maximum Salary:** Find and return the employee ID(s) with the highest salary. 5. **Remove an Employee:** Given an ID, remove the employee from the data structure. Implement a class `EmployeeManager` that supports the above operations. # Input Format: - The first line of input contains an integer `q` denoting the number of queries. - The following `q` lines contain one of the five types of queries as described: - \\"ADD id name salary\\" - \\"UPDATE id new_salary\\" - \\"GET id\\" - \\"GET_MAX\\" - \\"REMOVE id\\" # Output Format: For \\"GET\\" queries, output the employee\'s salary on a single line. For \\"GET_MAX\\" queries, output the employee ID(s) with the highest salary on a single line. If there are multiple employees with the highest salary, output their IDs in ascending order. For other queries, there is no output required. # Constraints: - 1 ≤ q ≤ 10^5 - 1 ≤ id ≤ 10^6 - 1 ≤ salary ≤ 10^6 - The name of an employee is a non-empty string containing only alphanumeric characters and has length at most 50. # Sample Input: 6 ADD 1 John 50000 ADD 2 Alice 60000 UPDATE 1 70000 GET 1 GET_MAX REMOVE 2 # Sample Output: 70000 1","solution":"class EmployeeManager: def __init__(self): self.employees = {} self.salary_to_ids = {} def add_employee(self, emp_id, name, salary): if emp_id in self.employees: raise ValueError(\\"Employee already exists\\") self.employees[emp_id] = (name, salary) if salary not in self.salary_to_ids: self.salary_to_ids[salary] = set() self.salary_to_ids[salary].add(emp_id) def update_salary(self, emp_id, new_salary): if emp_id not in self.employees: raise ValueError(\\"Employee does not exist\\") _, old_salary = self.employees[emp_id] self.employees[emp_id] = (self.employees[emp_id][0], new_salary) self.salary_to_ids[old_salary].remove(emp_id) if not self.salary_to_ids[old_salary]: del self.salary_to_ids[old_salary] if new_salary not in self.salary_to_ids: self.salary_to_ids[new_salary] = set() self.salary_to_ids[new_salary].add(emp_id) def get_salary(self, emp_id): if emp_id not in self.employees: raise ValueError(\\"Employee does not exist\\") return self.employees[emp_id][1] def get_max_salary(self): if not self.salary_to_ids: return [] max_salary = max(self.salary_to_ids.keys()) return sorted(self.salary_to_ids[max_salary]) def remove_employee(self, emp_id): if emp_id not in self.employees: raise ValueError(\\"Employee does not exist\\") name, salary = self.employees.pop(emp_id) self.salary_to_ids[salary].remove(emp_id) if not self.salary_to_ids[salary]: del self.salary_to_ids[salary]"},{"question":"You are given an array of integers. Your task is to check whether the array can be rearranged so that the absolute difference between any two consecutive elements is at most 1. If it is possible, print \\"Possible\\"; otherwise, print \\"Not Possible\\". -----Input:----- - The first line of input contains an integer T, the number of test cases. - Each test case consists of two lines. - The first line contains a single integer n (the number of elements in the array). - The second line contains n space-separated integers representing the array. -----Output:----- For each test case, print \\"Possible\\" if the array can be rearranged accordingly, otherwise, print \\"Not Possible\\". -----Constraints----- - 1 leq T leq 10^3 - 1 leq n leq 10^5 - -10^6 leq array elements leq 10^6 -----Sample Input:----- 2 3 3 2 1 4 1 3 2 5 -----Sample Output:----- Possible Not Possible","solution":"def can_be_rearranged(arr): Given an array of integers, check whether the array can be rearranged so that the absolute difference between any two consecutive elements is at most 1. arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) > 1: return \\"Not Possible\\" return \\"Possible\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] result = can_be_rearranged(arr) results.append(result) return results"},{"question":"Given a list of song titles and their play counts, implement a function `top_k_songs` that returns the top `k` songs based on their play counts. The song titles are case-sensitive and any extra spaces should be preserved. # Input - `songs`: A list of tuples, each tuple containing a string (the song title) and an integer (the play count). - `k`: An integer representing the number of top songs to return. # Output - A list of strings representing the song titles of the top `k` songs sorted by play count in descending order. In case of a tie in play counts, the songs should be sorted alphabetically. # Example ```python def top_k_songs(songs, k): # Implement the function here # Test case 1 songs = [(\\"Imagine\\", 150), (\\"Hey Jude\\", 180), (\\"Bohemian Rhapsody\\", 150)] k = 2 print(top_k_songs(songs, k)) # Output: [\\"Hey Jude\\", \\"Bohemian Rhapsody\\"] # Test case 2 songs = [(\\"Shape of You\\", 200), (\\"Despacito\\", 180), (\\"Rockstar\\", 180), (\\"Perfect\\", 250)] k = 3 print(top_k_songs(songs, k)) # Output: [\\"Perfect\\", \\"Shape of You\\", \\"Despacito\\"] # Test case 3 songs = [(\\"One\\", 50), (\\"Alive\\", 40), (\\"Heathens\\", 60), (\\"One More Night\\", 50)] k = 1 print(top_k_songs(songs, k)) # Output: [\\"Heathens\\"] ``` # Constraints - You can assume that the input list `songs` will not be empty and `k` will always be a positive integer less than or equal to the number of songs in the list. - The function should handle songs with different play counts efficiently.","solution":"def top_k_songs(songs, k): Returns the top k songs based on play counts. In case of a tie in play counts, songs are sorted alphabetically. # Sort the songs based on play counts (descending) and then alphabetically sorted_songs = sorted(songs, key=lambda x: (-x[1], x[0])) # Extract the top k song titles return [song[0] for song in sorted_songs[:k]]"},{"question":"You have a grid of size n x m filled with non-negative integers. You are required to choose a subgrid (a rectangular section of the grid) such that the sum of the integers within the subgrid is maximized. Each cell in the subgrid contributes to the sum. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers n and m representing the number of rows and columns in the grid respectively. The next n lines contain m integers each, representing the values of the elements in the grid. -----Output----- For each test case, output a new line with an integer corresponding to the maximum sum of any subgrid for that test case. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 1000 - 0 ≤ grid[i][j] ≤ 106 -----Example----- Input 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 Output 45 10 -----Explanation----- Example 1. The subgrid that gives the maximum sum is the entire grid itself with a sum of 45. Example 2. The subgrid that gives the maximum sum is the entire grid itself with a sum of 10.","solution":"def maximum_subgrid_sum(test_cases): def max_sum_submatrix(grid, n, m): # Calculate prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] # Initialize the maximum sum to a small value max_subgrid_sum = float(\'-inf\') for start_row in range(1, n + 1): for start_col in range(1, m + 1): for end_row in range(start_row, n + 1): for end_col in range(start_col, m + 1): # Calculate the sum of subgrid from (start_row, start_col) to (end_row, end_col) current_sum = (prefix_sum[end_row][end_col] - prefix_sum[start_row - 1][end_col] - prefix_sum[end_row][start_col - 1] + prefix_sum[start_row - 1][start_col - 1]) # Update the maximum subgrid sum found so far max_subgrid_sum = max(max_subgrid_sum, current_sum) return max_subgrid_sum results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] results.append(max_sum_submatrix(grid, n, m)) return results"},{"question":"Bob the robot is planning to build a new house, but there is an obstacle: a large boulder in the middle of his construction site. Bob decided to use his powerful laser to slice the boulder into smaller pieces and move them away. The boulder is represented as a series of contiguous segments of stone with varying heights. Bob\'s laser can make a single horizontal cut at any height. All segments of stone at or below this height will be removed from the boulder in one slice. Your task is to determine the minimum number of laser cuts required to remove all the segments of the boulder. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of segments in the boulder. The second line of input contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^4) — the heights of each segment of the boulder in order. -----Output----- Output a single integer — the minimum number of laser cuts required to remove all the segments of the boulder. -----Example----- Input 5 2 1 4 3 2 Output 4 -----Note----- In the given example, the boulder has 5 segments with heights [2, 1, 4, 3, 2]. The sequence of cuts could be as follows: 1. First cut at height 4 removes [,,,4,,], remaining [2,1,,3,2] 2. Second cut at height 3 removes [,,,4,3,], remaining [2,1,,] 3. Third cut at height 2 removes [2,,2], remaining [1,,] 4. Fourth and final cut at height 1 removes [1] Thus, 4 cuts are needed in total to remove all segments.","solution":"def min_laser_cuts(n, heights): Returns the minimum number of laser cuts required to remove all the segments of the boulder. Args: n (int): Number of segments. heights (List[int]): Heights of the segments. Returns: int: Minimum number of cuts. unique_heights = set(heights) return len(unique_heights)"},{"question":"You are given two arrays of integers and you need to determine if one array is a subarray of the other. A subarray is a contiguous part of an array. Input The first input line contains an integer n1 (1 ≤ n1 ≤ 10^5) – the length of the first array. The second line contains n1 integers, separated by spaces, which describe the elements of the first array. The third input line contains an integer n2 (1 ≤ n2 ≤ 10^5) – the length of the second array. The fourth line contains n2 integers, separated by spaces, which describe the elements of the second array. Output Print \\"YES\\" if one of the arrays is a subarray of the other. Print \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 3 2 3 4 Output YES Input 4 1 2 3 4 4 2 1 3 4 Output NO Note In the first sample, the second array [2, 3, 4] is a subarray of the first array [1, 2, 3, 4, 5]. In the second sample, neither array is a subarray of the other.","solution":"def is_subarray(a1, a2): Determines if one array is a subarray of the other. Parameters: a1 (List[int]): The first array. a2 (List[int]): The second array. Returns: str: \\"YES\\" if one array is a subarray of the other, otherwise \\"NO\\". len_a1 = len(a1) len_a2 = len(a2) if len_a1 < len_a2: small, large = a1, a2 else: small, large = a2, a1 len_small = len(small) len_large = len(large) for i in range(len_large - len_small + 1): if large[i:i + len_small] == small: return \\"YES\\" return \\"NO\\""},{"question":"You are given a rectangular grid with RW rows and CW columns. The grid is filled with numbers, and your task is to find the sum of all numbers in the grid. ------ Input Format ------ - The first line contains two integers RW and CW. - The next RW lines each contain CW integers, representing the numbers in the grid. ------ Output Format ------ Output the sum of all numbers present in the grid. ------ Constraints ------ 1 ≤ RW, CW ≤ 100 ----- Sample Input 1 ------ 2 3 1 2 3 4 5 6 ----- Sample Output 1 ------ 21 ----- explanation 1 ------ The grid consists of two rows and three columns with the numbers: [ begin{array}{ccc} 1 & 2 & 3 4 & 5 & 6 end{array} ] Summing all these numbers yields 1+2+3+4+5+6=21.","solution":"def grid_sum(rw, cw, grid): Returns the sum of all numbers in a grid with RW rows and CW columns. Parameters: rw (int): Number of rows in the grid. cw (int): Number of columns in the grid. grid (list of list of int): The grid containing the numbers. Returns: int: The sum of all numbers in the grid. total_sum = 0 for row in grid: total_sum += sum(row) return total_sum"},{"question":"You are given an integer array consisting of distinct positive integers. Your task is to find the Minimum Positive Integer (MEX) that is not present in the array. MEX of an array is the smallest non-negative integer that is not present in the array. -----Constraints----- - 1 leq N leq 1000 - 1 leq A_i leq 10000 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ldots A_N -----Output----- Print the minimum positive integer that is not present in the array. -----Sample Input----- 5 1 2 3 5 6 -----Sample Output----- 4 In this example, integers 1 to 3 and 5 to 6 are present in the array. 4 is the smallest positive integer missing in the array as 0 is considered non-negative but not required in the output according to problem definition. If the array contains the first `N` positive integers, the next positive integer, `N + 1`, will be the MEX.","solution":"def find_mex(arr): Returns the minimum positive integer (MEX) that is not present in the array. arr_set = set(arr) mex = 1 while mex in arr_set: mex += 1 return mex"},{"question":"Professor X has created a new drug that he claims can increase a mutant’s power. He has a string of mutant powers and he wants to analyze just how much more powerful the mutants can get with his drug. He has defined the power of a mutant as the length of the longest substring of identical characters. Professor X now wants to determine the power of a mutant after using his drug, which can convert exactly K characters of the string into any other character. Can you help Professor X determine the maximum power of any mutant after using the drug? Example 1: Input: s = \\"ABAB\\", K = 2 Output: 4 Explanation: Turn the two \'B\'s into \'A\'s to form \\"AAAA\\". The longest substring of identical characters is of length 4. Example 2: Input: s = \\"AABABBA\\", K = 1 Output: 4 Explanation: Turn the \'B\' at index 4 or at index 6 to \'A\' to form \\"AAAAABB\\" or \\"AABAAAA\\". The longest substring of identical characters is of length 4. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `mutantPower()` that takes a string s and an integer K, and returns an integer representing the maximum power of the mutant after using the drug. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 10^5 s contains only uppercase English letters. 0 ≤ K ≤ len(s)","solution":"def mutantPower(s, K): Returns the maximum power of a mutant after converting exactly K characters. from collections import defaultdict def max_length_after_replacement(s, max_replacements, target_char): start = 0 max_length = 0 count_chars = defaultdict(int) for end in range(len(s)): count_chars[s[end]] += 1 if (end - start + 1 - count_chars[target_char]) > max_replacements: count_chars[s[start]] -= 1 start += 1 max_length = max(max_length, end - start + 1) return max_length max_power = 0 for char in set(s): max_power = max(max_power, max_length_after_replacement(s, K, char)) return max_power"},{"question":"Alice has a string S consisting only of lowercase English letters. She wants to convert this string into a \\"palindromic string\\" which reads the same forwards as it does backwards. To achieve this, she can perform a single operation: choose any character in the string and delete it. Help Alice find the minimum number of characters she needs to delete to make the string palindromic. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the minimum number of characters Alice needs to delete to make the string palindromic. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^3 ----- Sample Input 1 ------ 3 abc aabb racecar ----- Sample Output 1 ------ 2 2 0 ----- Explanation 1 ------ - Test case-1: Alice can delete \'a\' and \'c\' to get the palindromic string \'b\'. - Test case-2: Alice can delete \'a\' from either side and \'b\' from the other side to get the palindromic string \'ab\' or \'ba\'. - Test case-3: The string is already a palindrome, so no deletions are needed.","solution":"def min_deletions_for_palindrome(S): Returns the minimum number of deletions required to make the string S a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] lps_length = longest_palindromic_subsequence(S) return len(S) - lps_length def process_test_cases(T, strings): results = [] for s in strings: results.append(min_deletions_for_palindrome(s)) return results"},{"question":"You are given a sequence of characters and you need to find the length of the longest substring that contains at most two distinct characters. This is a classic *sliding window* problem where you aim to optimize the process of finding the valid substring efficiently. -----Input----- The input consists of a single string `s` with a length between 1 and 100,000. -----Output----- Print a single integer, the length of the longest substring that contains at most two distinct characters. -----Example----- Input eceba Output 3 -----Note----- The longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Input ccaabbb Output 5 -----Note----- The longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if not s: return 0 left = 0 char_map = {} max_len = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"A team of engineers is designing a new data transmission protocol that involves encoding and decoding messages. They discovered that a unique property of the protocol requires shifting letters in a cyclic manner within the alphabetical order. The cyclic shift operation involves taking each character of the string and moving it by a fixed number of positions in the alphabet. After operations, if the position exceeds \'z\', it should wrap around to \'a\'. You are required to write a function to encode the message using this cyclic shift property. Input Format The first line contains the original message as a string. The second line contains an integer that denotes the cyclic shift. Output Format Print a single string that represents the encoded message. Constraints - The string will contain only lowercase alphabetical characters. - 1 ≤ Length of the string ≤ 1000. - 1 ≤ Integer in the second line ≤ 25. Sample Input hello 3 Sample Output khoor","solution":"def cyclic_shift_encode(message, shift): Encodes the message by shifting each letter by \'shift\' positions in the alphabet. Parameters: message (str): The original message to encode. shift (int): The number of positions to shift each letter. Returns: str: The encoded message. encoded_message = [] for char in message: new_pos = (ord(char) - ord(\'a\') + shift) % 26 encoded_message.append(chr(ord(\'a\') + new_pos)) return \'\'.join(encoded_message)"},{"question":"A train moves along a straight line in a data center, transporting storage boxes between different sections. The train stops at exactly N stations positioned along this line. Each station can hold a particular number of boxes and has a storage capacity C. However, the station can never be overloaded beyond its capacity. The train needs to transport exactly K storage boxes. At each station, you have the option to either pick up boxes if the station has spare capacity, or drop off boxes if the train is currently carrying any. You must ensure that the number of boxes at the station does not exceed its capacity at any point. Given the number of boxes at each station initially, determine if it is possible to transport all exactly K storage boxes from the train to the final destination (last station) without violating the storage capacity constraints at any station along the way. INPUT: The first line of the input contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case starts with two integers N (2 ≤ N ≤ 100) and K (1 ≤ K ≤ 1000), the number of stations and the number of boxes to be transported respectively. The next line contains N integers. The ith integer (1 ≤ Ai ≤ 1000) represents the initial number of boxes at the ith station. The following line contains N integers. The ith integer (1 ≤ Ci ≤ 1000) represents the capacity of the ith station. OUTPUT: For each test case, print \\"YES\\" if it is possible to transport all K boxes to the final destination without exceeding any station\'s capacity, otherwise print \\"NO\\". SAMPLE INPUT 2 3 4 3 2 1 5 5 5 4 10 2 4 6 8 10 10 10 10 SAMPLE OUTPUT YES NO Explanation: 1st Test Case The train can transport up 4 boxes as follows: - Pick up 2 boxes from station 1 (total becomes 5, within capacity of 5). - Pick up 2 boxes from station 2 (total becomes 4, within capacity of 5). - Pick up no boxes from station 3 as it can\'t be taken beyond its capacity (total is 1). 2nd Test Case It is not possible to transport all 10 boxes to the last station without exceeding the capacity limits.","solution":"def can_transport_boxes(t, test_cases): results = [] for test_case in test_cases: N, K = test_case[\'N\'], test_case[\'K\'] boxes = test_case[\'boxes\'] capacities = test_case[\'capacities\'] remaining_boxes = K can_transport = True for i in range(N): needed_capacity = boxes[i] + (K if i == N-1 else 0) if needed_capacity > capacities[i]: can_transport = False break results.append(\\"YES\\" if can_transport else \\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): N, K = map(int, lines[index].split()) index += 1 boxes = list(map(int, lines[index].split())) index += 1 capacities = list(map(int, lines[index].split())) index += 1 test_cases.append({ \'N\': N, \'K\': K, \'boxes\': boxes, \'capacities\': capacities }) return t, test_cases def solve(input_str): t, test_cases = parse_input(input_str) results = can_transport_boxes(t, test_cases) return \\"n\\".join(results)"},{"question":"You are given a grid of size n x m filled with non-negative integers. Given a starting point at the top-left corner (0, 0) and an ending point at the bottom-right corner (n-1, m-1), your task is to determine the minimal path sum from the starting point to the ending point. You can only move either down or right at any point in time. Return the minimal path sum. Example: Input: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the sum. Notes: 1 <= n, m <= 200 0 <= grid[i][j] <= 100","solution":"def min_path_sum(grid): Returns the minimal path sum from the top-left to the bottom-right corner of the grid. :param grid: List of List of non-negative integers :return: Integer representing minimal path sum if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) # Initialize a dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Fill the dp array with the minimum path sums for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Anya is participating in a circle dance with her friends. The dance starts with each friend positioned in a circle. Each friend can either stay in their current position or switch places with one of the adjacent friends (the friends next to them in the circle). Anya wants to know the minimum number of switches needed to form a new specific arrangement of friends around the circle. The current arrangement and the desired arrangement are given in the form of strings of equal length, consisting of distinct characters representing each friend. ---Input:--- - The first line contains a single integer n, representing the number of friends. - The second line contains a string of length n, representing the current arrangement. - The third line contains a string of length n, representing the desired arrangement. ---Output:--- Output a single integer denoting the minimum number of switches needed to achieve the desired arrangement. ---Constraints--- - 2 leq n leq 5000 - The strings contain distinct lowercase characters. ---Sample Input:--- 6 abcdef fabcde ---Sample Output:--- 5","solution":"def count_inversions(arr): if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): i, j = 0, 0 merged = [] inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) inversions += len(left) - i j += 1 merged += left[i:] merged += right[j:] return merged, inversions def min_swaps_to_rearrange(n, current, desired): pos = {char: i for i, char in enumerate(current)} index_list = [pos[char] for char in desired] _, inv_count = count_inversions(index_list) return inv_count # Example usage: n = 6 current = \\"abcdef\\" desired = \\"fabcde\\" print(min_swaps_to_rearrange(n, current, desired)) # Output: 5"},{"question":"Consider a sequence of parentheses. The challenge here is to determine whether the sequence is balanced. A sequence of parentheses is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and the pairs of parentheses are properly nested. For instance, the sequences \\"()\\" and \\"(())\\" are balanced, while \\"(()\\", \\")(\\", and \\"(()))\\" are not. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The following T lines each contain one sequence of parentheses. ------ Output ------ For each test case, output \\"YES\\" if the sequence is balanced and \\"NO\\" if it is not. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ length of each sequence ≤ 100000 Total length of all sequences ≤ 1000000 ----- Sample Input ------ 3 () (( (())) ----- Sample Output ------ YES NO NO","solution":"def is_balanced_parentheses(sequence): Determines if a sequence of parentheses is balanced. Args: sequence (str): A string consisting of parentheses. Returns: str: \\"YES\\" if the sequence is balanced, \\"NO\\" otherwise. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def check_parentheses_balance(test_cases): Takes a list of test cases and returns the results of parentheses balance check. Args: test_cases (list of str): List of sequences to be checked. Returns: list of str: \\"YES\\" or \\"NO\\" for each sequence depending upon if it is balanced. results = [] for case in test_cases: results.append(is_balanced_parentheses(case)) return results"},{"question":"Sarah is organizing a bookshelf and wants to know how many unique book collections she can create. A book collection consists of any number of consecutive books from the shelf. If the bookshelf contains n books, each represented with a unique ID number from 1 to n, calculate the total number of different collections she can form. -----Input----- The input contains a single integer n (1 ≤ n ≤ 10^5) — the number of books on the shelf. -----Output----- Print a single integer — the total number of different collections that can be created. -----Examples----- Input 3 Output 6 Input 4 Output 10 -----Note----- In the first sample, there are 6 possible collections: 1. [1] 2. [2] 3. [3] 4. [1, 2] 5. [2, 3] 6. [1, 2, 3]","solution":"def count_book_collections(n): Returns the total number of different book collections that can be created from a bookshelf of n books, where n is the number of books. return n * (n + 1) // 2"},{"question":"Problem Given an array of integers, `nums`, and an integer `k`, your task is to find the maximum possible sum of any subsequence of `nums` of length exactly `k` that includes at least one even number. If there is no such subsequence, return -1. # Constraints The input satisfies the following conditions: * 1 ≤ k ≤ N ≤ 105 * -109 ≤ nums[i] ≤ 109 (0 ≤ i < N) # Input The input is given in the following format: ``` N k nums1 nums2 nums3 ... numsN ``` The first line contains the number of elements `N` and the integer `k`. The second line contains `N` space-separated integers, representing the elements of `nums`. # Output Output the maximum possible sum of any subsequence of length `k` that includes at least one even number. If no such subsequence exists, return -1. # Examples Example 1 Input: ``` 5 3 2 4 -1 -3 6 ``` Output: ``` 12 ``` Example 2 Input: ``` 5 2 1 3 5 7 9 ``` Output: ``` -1 ``` Example 3 Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 12 ``` Note: In the first example, the subsequence `[2, 4, 6]` yields the maximum sum of `12`. In the second example, there are no even numbers, so the output is `-1`. In the third example, the subsequence `[2, 4, 5]` can yield the sum `11`, but the optimal subsequence is `[2, 3, 4]`, yielding `12`.","solution":"def max_subsequence_sum_with_even(nums, k): Finds the maximum possible sum of any subsequence of nums of length exactly k that includes at least one even number. :param list nums: The list of integers. :param int k: The length of the subsequence. :return: The maximum possible sum, or -1 if no such subsequence exists. :rtype: int nums.sort(reverse=True) def has_even(subsequence): for num in subsequence: if num % 2 == 0: return True return False for i in range(len(nums) - k + 1): subsequence = nums[i:i + k] if has_even(subsequence): return sum(subsequence) return -1"},{"question":"You are given a list of integers that represent the volume of water in several containers. Your task is to perform a saturation operation on these containers. During a saturation operation, you identify the maximum water volume across all containers and reduce every container\'s volume by that maximum value. This operation continues iteratively until all containers have a volume of zero. For example, suppose we have 5 containers with water volumes given as: 4 3 2 6 1 In the first saturation operation, the maximum volume is 6, so we reduce each container by 6 units. This results in: 0 0 0 0 0 Since all containers are now at zero, we have finished. Given the water volumes of N containers, print the maximum volume subtracted in each saturation operation. Input Format The first line contains a single integer N, the number of containers. The next line contains N integers V(0), V(1), V(2), ... V(N-1) separated by space, where V(i) represents the water volume in the ith container. Output Format For each saturation operation, print the maximum water volume subtracted in each step. Constraints 1 ≤ N ≤ 1000 0 ≤ V(i) ≤ 1000 SAMPLE INPUT 5 4 3 2 6 1 SAMPLE OUTPUT 6","solution":"def saturation_volumes(volumes): Performs saturation operations on a list of water volumes in containers until all container volumes are zero. Prints the maximum volume subtracted in each step. :param volumes: List of integers representing water volumes in containers :return: List of maximum volumes subtracted in each saturation operation if not volumes: return [] subtracted_volumes = [] while any(volumes): max_volume = max(volumes) if max_volume == 0: break subtracted_volumes.append(max_volume) volumes = [max(0, v - max_volume) for v in volumes] return subtracted_volumes # Example Execution (can be removed/commented out in the final submission) # print(saturation_volumes([4, 3, 2, 6, 1])) # Output should be [6]"},{"question":"You are given a grid of size nxm where each cell contains either a \'.\', \'*\', or \'@\'. The grid represents a map where: - \'.\' denotes an empty cell, - \'*\' denotes a tree, - \'@\' denotes the initial position of a lumberjack. The lumberjack can move to adjacent cells (up, down, left, right) if they are empty (i.e., they contain a \'.\'). The objective for the lumberjack is to cut down as many trees as possible. When the lumberjack moves to a cell containing a tree (\'*\'), the tree is cut down and the cell becomes empty (\'.\'). Your task is to determine the maximum number of trees the lumberjack can cut down starting from the initial position \'@\' and moving within the grid. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines each contain a string of length m, consisting of characters \'.\', \'*\', or \'@\'. Output: - Print a single integer — the maximum number of trees the lumberjack can cut down. Examples: Input: 4 5 ....@ .*... .*... ..... Output: 2 Input: 3 3 *.* .@. *.* Output: 4 Note: In the first example, the optimal path for the lumberjack is to cut down the two trees directly below the initial position. In the second example, the lumberjack can move to cut down all the four trees in the grid.","solution":"def max_trees_cut(n, m, grid): from collections import deque # Find the initial position of the lumberjack init_pos = None for i in range(n): for j in range(m): if grid[i][j] == \'@\': init_pos = (i, j) break if init_pos: break # Directions in the order up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to traverse the grid def bfs(start): queue = deque([start]) visited = set([start]) tree_count = 0 while queue: x, y = queue.popleft() for dir_x, dir_y in directions: new_x, new_y = x + dir_x, y + dir_y if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited: if grid[new_x][new_y] == \'.\': queue.append((new_x, new_y)) visited.add((new_x, new_y)) elif grid[new_x][new_y] == \'*\': tree_count += 1 queue.append((new_x, new_y)) visited.add((new_x, new_y)) return tree_count return bfs(init_pos)"},{"question":"An organization is planning a series of workshops for its teams. Each workshop needs to be scheduled in a way that no two workshops overlap in time. Each team has a preferred list of workshops it would like to attend and its availability time slots. You need to determine the maximum number of workshops that can be scheduled such that no team is left out of their preferred workshops and no workshops overlap. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of workshops. The next n lines each contain three integers si, ei, and t (0 ≤ si < ei ≤ 1000, 1 ≤ t ≤ 100), where si and ei represent the start and end times of the ith workshop, and t is the total number of teams interested in that workshop. The subsequent t lines for each ith workshop contain two integers pi and qi (0 ≤ pi < qi ≤ 1000) representing the preferred time slot of each interested team (i.e., the times within which they prefer to attend the workshop). Output Print a single integer — the maximum number of workshops that can be scheduled without any overlapping considering the teams\' preferences. Examples Input 3 1 5 2 1 4 2 5 6 10 1 6 9 5 8 2 5 7 6 8 Output 2 Input 2 1 3 1 1 3 2 4 1 2 4 Output 1 Note In the first sample, The workshops are: 1. [1, 5] with preferred time slots [1, 4] and [2, 5] 2. [6, 10] with preferred time slot [6, 9] 3. [5, 8] with preferred time slots [5, 7] and [6, 8] The optimum schedule includes workshops [1, 5] and [6, 10].","solution":"def max_non_overlapping_workshops(n, workshops): workshops.sort(key=lambda x: x[1]) # Sort workshops by end time preferred_slots = [] for ws in workshops: si, ei, t = ws[0], ws[1], ws[2] preferences = ws[3:] preferred_slot = None # Check if the preferred slots of teams for this workshop do not overlap and can be part of the schedule for s, e in preferences: if s >= si and e <= ei: preferred_slot = (si, ei) break if preferred_slot: preferred_slots.append((si, ei)) # Apply interval scheduling maximization count = 0 end_time = -1 for slot in preferred_slots: if slot[0] >= end_time: count += 1 end_time = slot[1] return count def main(input_data): lines = input_data.split(\\"n\\") n = int(lines[0]) index = 1 workshops = [] for _ in range(n): si, ei, t = map(int, lines[index].split()) index += 1 preferences = [] for _ in range(t): pi, qi = map(int, lines[index].split()) index += 1 preferences.append((pi, qi)) workshops.append((si, ei, t, *preferences)) return max_non_overlapping_workshops(n, workshops)"},{"question":"Given a linked list with head reference as \'head\', your task is to remove all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Example 1: Input: head: 1 -> 2 -> 3 -> 3 -> 4 -> 4 -> 5 Output: 1 -> 2 -> 5 Explanation: 3 and 4 are duplicate numbers, so remove all their occurrences. Example 2: Input: head: 1 -> 1 -> 1 -> 2 -> 3 Output: 2 -> 3 Explanation: 1 is a duplicate number, so remove all its occurrences. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `removeDuplicates()` that takes the head node of the linked list as a parameter and returns the head of the modified linked list. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= Number of nodes <= 10^5 1 <= Node value <= 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeDuplicates(head): if not head: return None sentinel = ListNode(0) sentinel.next = head prev = sentinel current = head while current: found_duplicate = False while current.next and current.val == current.next.val: current = current.next found_duplicate = True if found_duplicate: prev.next = current.next else: prev = prev.next current = current.next return sentinel.next"},{"question":"A transportation company wants to optimize its fuel costs by ensuring its trucks follow the shortest possible path between any two cities connected by roads. Each road has a specified travel time, and the goal is to calculate the minimum travel time between a given pair of cities in the network. You are tasked with writing a program to find the shortest travel time between two specified cities. -----Input----- The input starts with a line containing two space-separated integers, n and m, representing the number of cities and roads, respectively. n leq 100 and m leq 10,000. The next m lines each contain three space-separated integers u, v, and t, where u and v are cities connected by a road, and t represents the travel time along that road. Cities are numbered from 1 to n. The road network is bidirectional, meaning you can travel from u to v and from v to u with the same travel time t. The last line contains two space-separated integers a and b, representing the start and end cities for the travel query. -----Output----- Output a single integer indicating the shortest travel time from city a to city b. If there is no path between the cities, output -1. -----Examples----- Sample Input: 5 6 1 2 4 1 3 2 2 3 1 2 4 5 3 5 1 4 5 3 1 5 Sample Output: 3","solution":"import heapq def shortest_path(n, m, roads, a, b): Computes the shortest travel time from city a to city b. Returns the shortest travel time or -1 if no valid path exists. graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while heap: current_distance, current_city = heapq.heappop(heap) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 return dijkstra(a, b)"},{"question":"Given a string S representing a number, determine whether the number is a power of 2 or not. Example 1: Input: S = \\"16\\" Output: 1 Example 2: Input: S = \\"10\\" Output: 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPowerOfTwo() which takes the string S and returns 1 if the number is a power of 2, else 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def isPowerOfTwo(S): Determines whether the number represented by the string S is a power of 2. Parameters: S (str): The string representing the number. Returns: int: 1 if the number is a power of 2, 0 otherwise. if not S.isdigit(): return 0 # Convert string to an integer number = int(S) # Check if the number is a power of 2 return 1 if (number != 0 and (number & (number - 1)) == 0) else 0"},{"question":"Alice loves reading books. She recently discovered a new online bookstore which groups books into different categories. Each category has a unique identifier and contains a certain number of books. Alice is given the list of categories with their respective quantities but she only wants to read a certain number of books that is less than or equal to the total number of books available across all categories. Notably, Alice wants to maximize the number of different categories from which she can read at least one book. Given multiple scenarios, determine the maximum number of unique categories Alice can read books from for each scenario. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test scenarios. Each scenario starts with an integer c (1 le c le 1000) — the number of book categories. The following line contains c integers separated by spaces, where the i-th integer b_i (1 le b_i le 100) represents the number of books in the i-th category. The next line contains an integer k (1 le k le sum_{i=1}^{c}b_i) — the total number of books Alice wants to read. -----Output----- For each test scenario, print the answer: the maximum number of unique categories from which Alice can read books. -----Example----- Input 2 3 4 3 5 6 4 8 6 7 2 10 Output 2 3 -----Note----- Consider the first test scenario of the example: the categories have 4, 3, and 5 books respectively. Alice wants to read 6 books. She can read 4 books from the first category and 2 books from the second category, thus, reading books from 2 unique categories. In the second test scenario of the example, the categories have 8, 6, 7, and 2 books respectively. Alice wants to read 10 books. She can read 8 books from the first category and 2 books from the fourth category, thus, reading books from 2 unique categories initially, but realizing she can better maximize to books by reading 6 from the first, 2 from the second, and 2 from the third category, thereby reaching 3 unique categories.","solution":"def max_unique_categories(t, test_cases): result = [] for i in range(t): c = test_cases[i][0] books = test_cases[i][1] k = test_cases[i][2] books.sort() read_books = 0 unique_categories = 0 for b in books: if read_books + b <= k: read_books += b unique_categories += 1 else: break if read_books < k and unique_categories < c: unique_categories += 1 result.append(unique_categories) return result"},{"question":"You are given a list of non-negative integers representing the amount of money in each house in a row of houses. Each house is arranged in a linear fashion. A robber needs to maximize their total stolen amount without triggering an alarm. The rule is that the robber cannot rob two adjacent houses due to the built-in alarm system. Write a function to determine the maximum amount of money the robber can steal without robbing from two consecutive houses. Function signature: `def rob(nums: List[int]) -> int:` Example 1: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Note: - 0 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"from typing import List def rob(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0], nums[1]) dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) return dp[-1]"},{"question":"Problem description: Meera is planning to create a new social media app and she wants to implement a feature that suggests mutual friends between two users. Given that each user has a list of friends represented by their unique IDs, she needs to find out the mutual friends between two given users. Input: First line contains a single integer \'T\', denoting the number of test cases. Each test case consists of the following: - First line contains an integer \'A\', the number of friends of the first user. - Second line contains \'A\' space-separated integers, the IDs of the first user\'s friends. - Third line contains an integer \'B\', the number of friends of the second user. - Fourth line contains \'B\' space-separated integers, the IDs of the second user\'s friends. Output: For each test case, output a single line containing the IDs of the mutual friends in sorted order. If there are no mutual friends, print \\"NONE\\". Constraints: 1 <= T <= 10 0 <= A, B <= 10^5 1 <= friend IDs <= 10^9 Sample Input: 2 3 1 2 3 3 3 4 5 4 10 20 30 40 4 50 60 70 80 Sample Output: 3 NONE","solution":"def find_mutual_friends(T, test_cases): Finds mutual friends between pairs of users from the given test cases. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two lists representing the friends of the two users. Returns: list of lists: Each inner list contains mutual friends or [\\"NONE\\"] if there are no mutual friends. result = [] for i in range(T): friends_user1 = set(test_cases[i][0]) friends_user2 = set(test_cases[i][1]) mutual_friends = sorted(friends_user1.intersection(friends_user2)) if mutual_friends: result.append(mutual_friends) else: result.append([\\"NONE\\"]) return result"},{"question":"You are designing a system where users can join multiple groups. Each user has a set of preferences that determine which groups they would like to join. Write a function that takes two inputs: an array of strings representing preferences and an array of pairs, where each pair contains a group name and an array of strings representing the group\'s tags. Your function should return an array of all group names that match at least one of the user\'s preferences. For example, given the input arrays: ``` preferences = [\\"outdoor\\", \\"adventure\\", \\"music\\"] groups = [ [\\"Hiking Club\\", [\\"outdoor\\", \\"nature\\"]], [\\"Book Club\\", [\\"literature\\", \\"reading\\"]], [\\"Guitar Enthusiasts\\", [\\"music\\", \\"instruments\\"]] ] ``` Your function should output: ``` [\\"Hiking Club\\", \\"Guitar Enthusiasts\\"] ``` You *must* use the *any*-method that checks whether any element in an iterable is true. ```python https://docs.python.org/3/library/functions.html#any ```","solution":"def match_groups(preferences, groups): Returns a list of group names that match at least one of the user\'s preferences. :param preferences: List of strings representing user preferences. :param groups: List of pairs where each pair contains a group name and a list of group tags. :return: List of group names that match the preferences. matched_groups = [] for group in groups: group_name, tags = group if any(tag in preferences for tag in tags): matched_groups.append(group_name) return matched_groups"},{"question":"**You are given a list of integers. Write a program that finds the largest difference between any two elements such that the larger element comes after the smaller one in the list.** Input The input consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 105), the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. Output Output a single integer representing the largest difference between any two elements such that the larger element comes after the smaller one in the list. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 9 2 3 8 1 Output 6 Note In the first example, the largest difference is between the elements 1 and 6 which is 5. In the second example, the largest difference is between the elements 2 and 8 which is 6.","solution":"def largest_difference(n, elements): min_element = float(\'inf\') max_difference = 0 for element in elements: if element < min_element: min_element = element elif element - min_element > max_difference: max_difference = element - min_element return max_difference"},{"question":"You are given a grid with `N` rows and `M` columns, filled with non-negative integers. Your task is to answer `Q` queries about range sums on this grid. Each query can either update a cell in the grid or request the sum of a subgrid. Each query belongs to one of the two following types: - `U r c v`: Update the value at cell (r, c) to v. - `S r1 c1 r2 c2`: Calculate the sum of all cells in the subgrid whose top-left corner is (r1, c1) and bottom-right corner is (r2, c2). ---- Input Format ---- - The first line contains three integers `N`, `M`, and `Q` denoting the number of rows, the number of columns, and the number of queries, respectively. - Next `N` lines contain `M` integers each, representing the initial grid of non-negative integers. - The next `Q` lines contain queries, one per line. Each query belongs to one of the two types mentioned above. ---- Output Format ---- - For each query of type `S`, print a single integer that is the sum of all cells in the specified subgrid. ---- Constraints ---- - 1 ≤ N, M ≤ 1000 - 1 ≤ Q ≤ 10000 - 0 ≤ grid values ≤ 1000 - 1 ≤ r, c, r1, c1, r2, c2 ≤ N, M Sample Input ``` 3 3 5 1 2 3 4 5 6 7 8 9 S 1 1 3 3 U 1 1 10 S 1 1 3 3 U 3 3 0 S 2 2 3 3 ``` Sample Output ``` 45 54 13 ``` Explanation: - Initially, the sum of the entire grid (subgrid from (1,1) to (3,3)) is 1+2+3+4+5+6+7+8+9 = 45. - After updating cell (1,1) to 10, the new sum of the entire grid becomes 10+2+3+4+5+6+7+8+9 = 54. - After updating cell (3,3) to 0, the sum of the subgrid from (2,2) to (3,3) is 5+6+8+0 = 19.","solution":"def process_queries(N, M, Q, grid, queries): def update_grid(grid, r, c, v): grid[r-1][c-1] = v def sum_subgrid(grid, r1, c1, r2, c2): total = 0 for i in range(r1-1, r2): total += sum(grid[i][c1-1:c2]) return total results = [] for query in queries: parts = query.split() if parts[0] == \'U\': r, c, v = map(int, parts[1:]) update_grid(grid, r, c, v) elif parts[0] == \'S\': r1, c1, r2, c2 = map(int, parts[1:]) results.append(sum_subgrid(grid, r1, c1, r2, c2)) return results"},{"question":"Write a function `merge_sorted_lists()`(JS: `mergeSortedLists`) that takes two sorted lists of integers `list1` and `list2` as input and returns a single sorted list that merges the two input lists. For Example: ```python merge_sorted_lists([1, 3, 5], [2, 4, 6]) # should return [1, 2, 3, 4, 5, 6] merge_sorted_lists([1, 3, 5], [2, 4, 6, 8]) # should return [1, 2, 3, 4, 5, 6, 8] merge_sorted_lists([1, 3], [2, 4, 6, 8]) # should return [1, 2, 3, 4, 6, 8] merge_sorted_lists([], [1, 2, 3]) # should return [1, 2, 3] merge_sorted_lists([1, 2, 3], []) # should return [1, 2, 3] ``` Explanation: - The first example merges `[1, 3, 5]` and `[2, 4, 6]` into the fully sorted list `[1, 2, 3, 4, 5, 6]`. - The second example merges `[1, 3, 5]` and `[2, 4, 6, 8]` to obtain a sorted result for different sized lists. - The third and fourth examples address cases with empty lists, maintaining the non-empty list as the result. - The merging should be efficient, leveraging the fact that both input lists are already sorted.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and append smaller element to the merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"A software company allows their employees to take work-from-home (WFH) days. Each employee can work from home for a specific number of days each month. However, the company requires that there must be at least one week (7 days) in the month where the employee does not take any WFH days. Given the total number of days in the month and the number of WFH days an employee is planning to take, determine if it is possible to schedule the WFH days such that the employee has at least one week completely free of WFH days. Input: The first and only line of input contains two integers, `D` and `W`, where `D` is the total number of days in the month and `W` is the number of WFH days. Output: Print \\"Yes\\" if it is possible to schedule the WFH days such that there is at least one full week without WFH days, otherwise print \\"No\\". Constraints: 1 ≤ D ≤ 31 0 ≤ W ≤ D SAMPLE INPUT 28 10 SAMPLE OUTPUT Yes","solution":"def can_schedule_wfh(D, W): Determine if it is possible to schedule the WFH days such that there is at least one week completely free of WFH days. Parameters: D (int): Total number of days in the month. W (int): Number of WFH days an employee plans to take. Returns: str: \\"Yes\\" if it is possible, otherwise \\"No\\". # Maximum number of days not available for WFH (a full week) max_days_not_available = 7 # If total days in the month minus WFH days is greater than or equal to 7, it is possible if (D - W) >= max_days_not_available: return \\"Yes\\" else: return \\"No\\""},{"question":"Create a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. If the original list is empty or contains no prime numbers, return an empty list. Use the function name `filter_primes`. # Example ```python filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) >>> [2, 3, 5, 7] filter_primes([4, 6, 8, 10]) >>> [] filter_primes([]) >>> [] ``` **Hint**: You may use helper functions to check for prime numbers if necessary.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(int_list): Filters and returns a list of prime numbers from the given list of integers. return [num for num in int_list if is_prime(num)]"},{"question":"Given an array of integers, you need to determine whether you can partition the array into two subsets such that the sum of elements in both subsets is equal. If such a partition is possible, return True; otherwise, return False. # Input Format - The first line contains an integer ( N ) (1 ≤ ( N ) ≤ 200), the number of elements in the array. - The second line contains ( N ) integers separated by spaces, representing the elements of the array. Each element will be a positive integer not greater than 100. # Output Format - Output a single line with \\"True\\" if a partition is possible, otherwise \\"False\\". # Sample Input 5 1 5 11 5 # Sample Output True # Explanation The array `[1, 5, 11, 5]` can be partitioned into two subsets: `[1, 5, 5]` and `[11]`, which have equal sums (11). # Constraints - The array contains only positive integers. - Try to solve it using dynamic programming for efficiency.","solution":"def can_partition(nums): Determine if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a dp array where dp[i] indicates whether a subset sum \'i\' is possible dp = [False] * (target + 1) dp[0] = True # A sum of 0 is always possible # Process each number in nums for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Binary Tree Depth Comparator Given two binary trees, your task is to determine if the two trees have the same structure. In other words, if one tree can be transformed into the other by swapping any subtree (left or right) at any level, the two trees are considered to have the same structure. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines. Each line contains space-separated integers representing the preorder traversal of a binary tree (with empty children denoted by -1). ------ Output Format ------ For each test case, output a single line containing one string — \\"Yes\\" or \\"No\\" (without quotes); the answer to the problem. You may print each character of the answer in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Example Input ------ 3 1 2 -1 -1 3 -1 -1 1 3 -1 -1 2 -1 -1 1 2 -1 5 -1 4 -1 -1 3 -1 -1 1 3 -1 -1 2 5 -1 -1 4 -1 -1 1 2 -1 -1 3 4 -1 -1 -1 1 3 4 -1 -1 -1 2 -1 -1 ------ Example Output ------ Yes No Yes","solution":"def build_tree(preorder): def helper(index): if index[0] >= len(preorder) or preorder[index[0]] == -1: index[0] += 1 return None node = {\'val\': preorder[index[0]], \'left\': None, \'right\': None} index[0] += 1 node[\'left\'] = helper(index) node[\'right\'] = helper(index) return node return helper([0]) def same_structure(tree1, tree2): if tree1 is None and tree2 is None: return True if tree1 is None or tree2 is None: return False if tree1[\'val\'] != tree2[\'val\']: return False return (same_structure(tree1[\'left\'], tree2[\'left\']) and same_structure(tree1[\'right\'], tree2[\'right\'])) or (same_structure(tree1[\'left\'], tree2[\'right\']) and same_structure(tree1[\'right\'], tree2[\'left\'])) def binary_tree_depth_comparator(test_cases): results = [] for trees in test_cases: preorder1, preorder2 = trees tree1 = build_tree(preorder1) tree2 = build_tree(preorder2) if same_structure(tree1, tree2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"The world-renowned detective Sherlock Holmes is investigating a series of mysterious murders. Each victim left a note containing a sequence of numbers. Dr. Watson suggests that these numbers might have a cryptic meaning related to a numerical pattern. Sherlock, with his sharp mind, quickly recognizes that the sequence has a hidden structure that can be decoded by understanding the longest increasing subsequence (LIS) in the series. Your job is to help Sherlock find the length of the longest increasing subsequence in the given sequence. The longest increasing subsequence of a sequence is a subsequence that is strictly increasing and is as long as possible. <strong>Input</strong> The first line contains the integer n (1 ≤ n ≤ 10^5) - the length of the sequence. The second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^6) - the sequence of numbers. <strong>Output</strong> Print a single integer - the length of the longest increasing subsequence. <strong>Examples</strong> Input 6 10 9 2 5 3 7 Output 3 <strong>Note</strong> In the first test case, one of the longest increasing subsequences is [2, 3, 7].","solution":"import bisect def longest_increasing_subsequence_length(sequence): Returns the length of the longest increasing subsequence in the input sequence. if not sequence: return 0 # This will store our increasing subsequence elements lis = [] for num in sequence: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"A robotics team is tasked with programming a delivery robot that navigates a 2D warehouse grid. The warehouse is represented as a grid with dimensions MxN, where each cell (i, j) can either be empty (.) or contain an obstacle (#). The robot starts at the top-left corner (0,0) and needs to reach the bottom-right corner (M-1, N-1) to deliver a package. The robot can only move right, left, up, or down, and cannot pass through obstacles. The goal is to determine the minimum number of moves the robot needs to reach its destination. If it\'s impossible for the robot to reach the destination, return -1. Input: The first line contains two integers M and N (1 ≤ M, N ≤ 500), which represent the dimensions of the warehouse. The next M lines each contain N characters, representing the warehouse grid (either \'.\' for empty cells or \'#\' for obstacles). Output: Output a single integer representing the minimum number of moves needed to reach the bottom-right corner, or -1 if it is impossible. Example: Input: 5 5 ..... .#... .#.#. .#.#. ..#.. Output: 8 Input: 4 4 .... .. .. .... Output: 6 Input: 3 3 ..# # ..# Output: -1","solution":"from collections import deque def min_moves_to_deliver_package(M, N, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (M-1, N-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"On a fictional grid-based game board, players can move in four directions: up, down, left, and right. Each cell in the grid has a value that represents the energy cost required to step into that cell. Players start at the top left corner of the grid (0,0) and aim to reach the bottom right corner (n-1, m-1) with the minimum energy cost. Write a function `min_energy_cost(grid)` that takes a 2D list `grid` where `grid[i][j]` represents the energy cost to step on cell (i, j). The function should return the minimum energy cost to travel from the top left corner to the bottom right corner. You can only move up, down, left, or right, and you cannot move outside the grid boundaries. For example, given the following grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Starting at (0,0), the minimum energy cost path to (2,2) would be `1 -> 3 -> 1 -> 1 -> 1 -> 1`, which totals 7. Your function should output the integer 7 for this example. Note: - The grid will contain at least one cell. - The values inside the grid will be non-negative integers.","solution":"import heapq def min_energy_cost(grid): Returns the minimum energy cost to travel from the top-left corner to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] min_heap = [(grid[0][0], 0, 0)] # (cost, row, col) visited = set((0,0)) while min_heap: cost, row, col = heapq.heappop(min_heap) if row == rows - 1 and col == cols - 1: return cost for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited: visited.add((new_row, new_col)) heapq.heappush(min_heap, (cost + grid[new_row][new_col], new_row, new_col)) return -1 # should never be reached if the grid is valid and contains at least one cell"},{"question":"Problem You have been assigned the task of monitoring energy consumption in a series of buildings. Each building has a certain energy consumption rate Ri per minute and a maximum limit of Li units of energy that it can consume before shutting down for safety reasons. You are required to write a program that determines the number of buildings that will not shut down if they are monitored for T minutes. # Input - **The first line contains an integer T, the monitoring duration in minutes.** - **The second line contains an integer N, the number of buildings.** - **The next N lines each contain two integers Ri and Li, the energy consumption rate per minute and the maximum energy limit of the ith building, respectively.** # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ Ri ≤ 100 - 1 ≤ Li ≤ 10000 # Output - A single integer indicating the number of buildings that will not shut down during the monitoring period. # Example Input ``` 10 4 5 100 20 150 10 80 2 50 ``` Output ``` 3 ``` Explanation: - Building 1: Consumes 5 units per minute for 10 minutes → 5 * 10 = 50 ≤ 100 (Will not shut down) - Building 2: Consumes 20 units per minute for 10 minutes → 20 * 10 = 200 > 150 (Will shut down) - Building 3: Consumes 10 units per minute for 10 minutes → 10 * 10 = 100 > 80 (Will shut down) - Building 4: Consumes 2 units per minute for 10 minutes → 2 * 10 = 20 ≤ 50 (Will not shut down) Total number of buildings that will not shut down: 2","solution":"def count_safe_buildings(T, N, buildings): Determines the number of buildings that will not shut down during T minutes of monitoring. Parameters: T (int): Monitoring duration in minutes N (int): Number of buildings buildings (list of tuples): Each tuple contains two integers Ri (energy consumption rate per minute) and Li (maximum energy limit) Returns: int: Number of buildings that will not shut down safe_building_count = 0 for Ri, Li in buildings: if Ri * T <= Li: safe_building_count += 1 return safe_building_count"},{"question":"In a magical forest, there are N different species of trees, numbered from 1 to N. Each tree species has a unique magical property value associated with it given in an array of length N. The forest ranger wants to perform certain operations to maintain and query the magical properties of the trees: 1. \\"1 i v\\" - Replace the magical property of tree species i with v. 2. \\"2 l r\\" - Calculate and print the sum of the magical properties of all tree species from index l to index r (inclusive). You need to implement a solution that can efficiently perform these operations on the array. Input Format The first line contains two integers, N (the number of tree species) and Q (the number of queries), separated by a space. The second line contains N integers, representing the initial magical properties of each tree species. The next Q lines contain queries, either of the form \\"1 i v\\" or \\"2 l r\\". Constraints 1 le N, Q le 100000 1 le i, l, r le N 0 le v le 10^9 Output Format For each query of the second type, print the result on a new line. Sample Input 5 4 1 2 3 4 5 2 1 3 1 3 10 2 2 4 2 1 5 Sample Output 6 17 22 Explanation The initial array is [1, 2, 3, 4, 5]. Query \\"2 1 3\\" evaluates the sum of elements from index 1 to 3 -> 1 + 2 + 3 = 6. Query \\"1 3 10\\" updates the element at index 3 to 10, the array becomes [1, 2, 10, 4, 5]. Query \\"2 2 4\\" evaluates the sum of elements from index 2 to 4 -> 2 + 10 + 4 = 16. Query \\"2 1 5\\" evaluates the sum of elements from index 1 to 5 -> 1 + 2 + 10 + 4 + 5 = 22.","solution":"class MagicalForest: def __init__(self, N, properties): self.N = N self.tree_properties = properties self.build_prefix_sum() def build_prefix_sum(self): self.prefix_sum = [0] * (self.N + 1) for i in range(1, self.N + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.tree_properties[i - 1] def update_property(self, i, v): old_value = self.tree_properties[i - 1] diff = v - old_value self.tree_properties[i - 1] = v for j in range(i, self.N + 1): self.prefix_sum[j] += diff def query_sum(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def execute_queries(N, properties, queries): forest = MagicalForest(N, properties) results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": i, v = int(parts[1]), int(parts[2]) forest.update_property(i, v) elif parts[0] == \\"2\\": l, r = int(parts[1]), int(parts[2]) results.append(forest.query_sum(l, r)) return results"},{"question":"You are organizing a summer camp and have made a plan for various activities to be carried out in different rooms of the camp compound. Each activity can only take place in a specific room, and each room can host only one activity per day. Given the list of activities, their durations (in days), and their assigned rooms, you need to schedule the activities such that no two activities assigned to the same room overlap in time. Each activity has a preferred starting day, but it can start later if necessary. The goal is to find a feasible schedule that respects the room constraints and starts each activity as close as possible to its preferred starting day. -----Input----- - The first line contains an integer 1 leq n leq 500, the number of activities. - The second line contains n integers, where the i-th integer is the duration (in days) of the i-th activity. - The third line contains n integers, where the i-th integer is the preferred starting day of the i-th activity. - The fourth line contains n integers, where the i-th integer is the room assigned to the i-th activity (these integers are room identifiers and may be positive or negative). -----Output----- Print n integers, where the i-th integer is the starting day of the i-th activity in your schedule, or \\"impossible\\" if no valid schedule exists. -----Examples----- Sample Input: 4 3 2 4 1 1 2 1 3 101 102 101 103 Sample Output: 1 2 4 3","solution":"def schedule_activities(n, durations, preferred_start_days, rooms): from collections import defaultdict schedule = [-1] * n room_schedules = defaultdict(list) activities = sorted(range(n), key=lambda i: (rooms[i], preferred_start_days[i])) for i in activities: duration = durations[i] preferred_start = preferred_start_days[i] room = rooms[i] room_schedule = room_schedules[room] start_day = preferred_start while True: overlap = False for start, end in room_schedule: if not (start_day + duration - 1 < start or start_day > end): overlap = True start_day = end + 1 break if not overlap: break room_schedule.append((start_day, start_day + duration - 1)) room_schedule.sort() schedule[i] = start_day return schedule if __name__ == \\"__main__\\": # Sample input n = 4 durations = [3, 2, 4, 1] preferred_start_days = [1, 2, 1, 3] rooms = [101, 102, 101, 103] result = schedule_activities(n, durations, preferred_start_days, rooms) print(result)"},{"question":"Snuke\'s friend Eiko is also working on a puzzle. She has a collection of P spherical pieces and Q triangular pieces. Eiko wants to form as many Tetrahedrons as possible, each formed by two spherical pieces and three triangular pieces. -----Constraints----- - 1 ≤ P, Q ≤ 10^{12} -----Input----- The input is given from Standard Input in the following format: P Q -----Output----- Print the maximum number of Tetrahedrons that can be created. -----Sample Input----- 4 9 -----Sample Output----- 2 Two Tetrahedrons can be created as follows: - Use 2 spherical pieces and 3 triangular pieces to create one Tetrahedron. - Repeat once more to create the second Tetrahedron.","solution":"def max_tetrahedrons(P, Q): Calculate the maximum number of Tetrahedrons that can be created given P spherical pieces and Q triangular pieces where each Tetrahedron requires 2 spherical pieces and 3 triangular pieces. :param P: int: number of spherical pieces :param Q: int: number of triangular pieces :return: int: maximum number of Tetrahedrons that can be created return min(P // 2, Q // 3)"},{"question":"You are given an integer array a_1, a_2, ldots, a_n. Find the cumulative sum of the smallest k elements for each k from 1 to n. -----Input----- Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case consists of one integer n — the number of elements in the array a (1 le n le 100). The second line of each test case consists of n integers a_1, ldots, a_n — elements of the array a (1 le a_i le 10^4). It is guaranteed that the sum of n by all test cases doesn\'t exceed 100. -----Output----- For each test case, print n integers, where the k-th integer is the cumulative sum of the smallest k elements in the array a. -----Example----- Input 3 4 1 3 2 5 5 10 20 30 40 50 6 6 5 4 3 2 1 Output 1 3 6 11 10 30 60 100 150 1 3 6 10 15 21","solution":"def cumulative_sum_of_smallest_k(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] a.sort() # Sort the array to get the smallest elements in order cum_sum = 0 current_result = [] for j in range(n): cum_sum += a[j] current_result.append(cum_sum) results.append(current_result) return results"},{"question":"Given an array of integers and a target integer, find two distinct elements in the array such that their sum is equal to the target. Return the indices of the two elements in ascending order. If there are multiple pairs, return the pair with the smallest index first. If no such pair exists, return an empty list. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The sum of arr[0] and arr[1] is 9. Hence, the output is [0, 1]. Example 2: Input: arr = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The sum of arr[1] and arr[2] is 6. Hence, the output is [1, 2]. Example 3: Input: arr = [3, 3], target = 6 Output: [0, 1] Explanation: The sum of arr[0] and arr[1] is 6. Hence, the output is [0, 1]. Example 4: Input: arr = [1, 2, 3, 4, 5], target = 10 Output: [] Explanation: No two distinct elements sum up to 10. Hence, the output is an empty list. Your Task: You don\'t need to read input or print anything. Your task is to complete the function pairWithTargetSum() which takes an array of integers and an integer target as input and returns the list of indices of the two elements in ascending order. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= arr.length <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def pairWithTargetSum(arr, target): seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"In a binary system, each binary number starts with `0` and can only include `1` or `0`. However, some binary numbers can contain leading zeros which are not significant for numerical value but significant for certain representations. Your task is to determine whether a given binary number follows a specific rule: it must have an equal number of `1`s and `0`s. Leading zeros should be considered in the count of `0`s. Input The first line contains a binary string `s` (1 ≤ |s| ≤ 100) — the given binary number. Output If the given binary string contains an equal number of `1`s and `0`s, output YES, otherwise output NO. Examples Input 0101 Output YES Input 1100 Output YES Input 100 Output NO Input 101010 Output YES","solution":"def binary_balance_checker(s): Check if a given binary string contains an equal number of \'1\'s and \'0\'s. Parameters: s (str): binary string Returns: str: \\"YES\\" if the binary string contains an equal number of \'1\'s and \'0\'s, \\"NO\\" otherwise. count_0 = s.count(\'0\') count_1 = s.count(\'1\') if count_0 == count_1: return \\"YES\\" else: return \\"NO\\""},{"question":"A group of friends decided to participate in a marathon event that takes place along a serpentine trail. The trail is divided into N segments in a linear sequence. Some of these segments are very steep, making them difficult to run. The friends wish to find the most optimal path that allows them to run the maximum distance while avoiding as many steep segments as possible. Given N (1 ≤ N ≤ 100), the total number of segments along the marathon trail, and a list segments[1...N] where each element is either \'S\' or \'R\' denoting Steep or Run respectively, determine the longest contiguous subarray of \'R\' segments. Your task is to write a function that takes the list segments and returns the length of the longest contiguous subarray composed entirely of \'R\' segments. Input: - An integer N, the number of segments. - An array segments, where each element is either \'S\' or \'R\'. Output: - An integer representing the length of the longest contiguous subarray of \'R\' segments. SAMPLE INPUT 10 [\'R\', \'S\', \'R\', \'R\', \'S\', \'R\', \'R\', \'R\', \'S\', \'R\'] SAMPLE OUTPUT 3 Explanation The longest contiguous subarray of \'R\' segments in [\'R\', \'S\', \'R\', \'R\', \'S\', \'R\', \'R\', \'R\', \'S\', \'R\'] is of length 3, which is [\'R\', \'R\', \'R\'].","solution":"def longest_run_segments(N, segments): Finds the length of the longest contiguous subarray of \'R\' segments. Parameters: N (int): The number of segments segments (list): A list of segments, each element is either \'S\' or \'R\' Returns: int: The length of the longest contiguous subarray of \'R\' segments max_run_length = 0 current_run_length = 0 for segment in segments: if segment == \'R\': current_run_length += 1 if current_run_length > max_run_length: max_run_length = current_run_length else: current_run_length = 0 return max_run_length"},{"question":"Given a list of integers representing the positive and negative elements in an initially empty array, you need to determine the maximum sum that can be obtained by choosing non-overlapping subarrays such that the sum of each chosen subarray is positive. The elements must maintain their relative position in the order they appear in the original list. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the list. - The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the list. **Output:** - Output a single integer — the maximum sum obtained by choosing non-overlapping subarrays such that the sum of each chosen subarray is positive. **Example:** **Input:** ``` 5 1 -2 3 4 -5 ``` **Output:** ``` 8 ``` **Explanation:** The maximum sum is obtained by choosing the subarrays [1], [3, 4]. Their sums are 1 and 7 respectively, and 1 + 7 = 8. **Constraints:** - The optimal subarrays should include only elements that help in maintaining a positive total sum. - The subarrays must be non-overlapping and maintain the order of elements as they appear in the original array. You may want to use dynamic programming or a greedy approach to solve this problem efficiently given the constraints.","solution":"def max_sum_of_non_overlapping_positive_subarrays(arr): max_sum = 0 current_sum = 0 for num in arr: if num > 0: current_sum += num else: # If the current subarray sum is positive, add it to max_sum if current_sum > 0: max_sum += current_sum # Reset current subarray sum current_sum = 0 # Check the last subarray in case it was positive if current_sum > 0: max_sum += current_sum return max_sum"},{"question":"Alice is working on a network of computers arranged in a tree structure. Each computer is identified by a unique integer ID from 1 to n, where n is the total number of computers in the network. The computers are connected by n-1 bidirectional links such that there is exactly one path between any two computers. Alice needs to assign a security level to each computer. The security level is represented by a positive integer, and two directly connected computers must have different security levels for a secure network. Help Alice determine the minimum number of distinct security levels required and assign a security level to each computer. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of computers in the network. Each of the next (n - 1) lines contains two integers x and y (1 ≤ x, y ≤ n) — the IDs of two computers directly connected by a link. It is guaranteed that any computer is reachable from any other using the links. -----Output----- In the first line, print a single integer k — the minimum number of distinct security levels required. In the second line, print n integers, the i-th of them should be equal to the security level assigned to the i-th computer. Each of these numbers should be within the range from 1 to k. -----Examples----- Input 4 1 2 2 3 3 4 Output 2 1 2 1 2 Input 6 1 2 1 3 2 4 2 5 3 6 Output 2 1 2 2 1 1 2 -----Note----- In the first sample, the computers can be arranged linearly as 1 → 2 → 3 → 4. Alice can use two distinct security levels where consecutive computers have different levels. In the second sample, the computers form a branching structure. Alice can assign security levels such that adjacent computers have different levels using only two distinct security levels.","solution":"def assign_security_levels(n, edges): from collections import defaultdict, deque # Build the adjacency list tree = defaultdict(list) for x, y in edges: tree[x].append(y) tree[y].append(x) # To store the security levels levels = [0] * (n + 1) def bfs(root): queue = deque([root]) levels[root] = 1 while queue: node = queue.popleft() current_level = levels[node] next_level = 2 if current_level == 1 else 1 for neighbor in tree[node]: if levels[neighbor] == 0: # If unvisited levels[neighbor] = next_level queue.append(neighbor) # Start BFS from the first node bfs(1) # Minimum number of distinct security levels is 2 k = 2 # Ignore the 0-th index as nodes are 1-indexed return k, levels[1:] # Input example: # n = 6 # edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] # k, security_levels = assign_security_levels(n, edges) # print(k) # Should output 2 # print(security_levels) # Should output a valid assignment like [1, 2, 2, 1, 1, 2] or [2, 1, 1, 2, 2, 1]"},{"question":"Given a list of non-negative integers `nums` representing the number of stones in each pile, your task is to complete a function `stoneGame` which determines whether Player 1 can win or not. Player 1 starts first and both players play optimally. Player 1 wins if at the end of the game they have more stones than Player 2, otherwise Player 2 wins. You need to return `True` if Player 1 wins, otherwise return `False`. Example 1: Input: nums = [3, 9, 1, 2] Output: True Explanation: Player 1 picks 3, Player 2 picks 9, Player 1 picks 2, Player 2 picks 1. Player 1 has 5 stones and Player 2 has 10 stones, so Player 1 wins. Example 2: Input: nums = [5, 3, 4, 5] Output: True Explanation: Player 1 picks 5, Player 2 picks 5, Player 1 picks 4, Player 2 picks 3. Player 1 has 9 stones and Player 2 has 8 stones, so Player 1 wins. Your Task: You don\'t need to read or print anything. Your task is to complete the function `stoneGame(nums)` which takes `nums` list as input parameter and returns a boolean `True` if Player 1 wins else returns `False`. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n^2) Constraints: 2 <= nums.length <= 500 1 <= nums[i] <= 10^3","solution":"def stoneGame(nums): n = len(nums) dp = [[0] * n for _ in range(n)] # Base case: when there\'s only one pile of stones, the first player picks all the stones for i in range(n): dp[i][i] = nums[i] # Fill DP table for l in range(2, n + 1): # l is the length of the subarray for i in range(n - l + 1): j = i + l - 1 dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]) # If Player 1\'s score is positive, Player 1 can win return dp[0][n-1] > 0"},{"question":"A warehouse manager wants to track the stock of various products. Each product is identified by a unique product code. After several transactions, the manager needs a summary of each product\'s current stock level based on a list of transactions. Each transaction indicates whether products were added to or removed from the stock. Input: The first line of input contains an integer, n, which denotes the number of transactions. Then, n lines follow, each containing a transaction in the form of a string P, where P can have one of two formats: - \\"code_number quantity\\" (positive quantity indicates products added) - \\"code_number -quantity\\" (negative quantity indicates products removed) Output: The output should display each unique product code and the final stock quantity, sorted by the product code in ascending order. Constraints: 1 ≤ n ≤ 100000 1 ≤ |code_number| ≤ 10 -1000 ≤ quantity ≤ 1000 SAMPLE INPUT 5 A123 10 B456 5 A123 -3 A123 7 B456 -2 SAMPLE OUTPUT A123 14 B456 3 Explanation Test Case #1: The transactions update the stock as follows: - A123: +10, -3, +7 -> resulting in 14 - B456: +5, -2 -> resulting in 3 The final stock levels are A123 with 14 and B456 with 3, sorted by the product code.","solution":"def track_stock(transactions): Calculates the final stock quantity for each product based on a list of transactions. Parameters: transactions (list of str): List of transaction strings in the format \\"code_number quantity\\". Returns: dict: Dictionary with product code as key and final stock quantity as value. stock = {} for transaction in transactions: code, quantity = transaction.split() quantity = int(quantity) if code in stock: stock[code] += quantity else: stock[code] = quantity return dict(sorted(stock.items()))"},{"question":"Patty recently joined a coding academy where she is learning about strings. Today, she stumbled upon a very interesting problem on string rotation. She wants to know if one string is a rotation of another string. A string rotation is obtained by taking a string and moving some number of characters from the beginning of the string to the end in the same order. For example, if the initial string is \\"abcde\\", a rotation might be \\"cdeab\\". Patty wonders if there is an efficient way to determine whether one string is a rotation of another string. She asks for your help to write a function to solve this problem. You are given two strings, S1 and S2. You need to determine if S2 is a rotation of S1. Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two space-separated strings S1 and S2. Output Format: For each test case, output \\"YES\\" if S2 is a rotation of S1, otherwise output \\"NO\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ |S1|, |S2| ≤ 50 - Both S1 and S2 will consist of lowercase alphabetic characters. SAMPLE INPUT 3 waterbottle erbottlewat abcde bcdea hello world SAMPLE OUTPUT YES YES NO Explanation: - In the first case, \\"erbottlewat\\" is a rotation of \\"waterbottle\\". - In the second case, \\"bcdea\\" is a rotation of \\"abcde\\". - In the third case, \\"world\\" is not a rotation of \\"hello\\".","solution":"def is_rotation(S1, S2): Determines if S2 is a rotation of S1. if len(S1) != len(S2): return \\"NO\\" return \\"YES\\" if S2 in S1 + S1 else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases for the string rotation problem. results = [] for S1, S2 in test_cases: results.append(is_rotation(S1, S2)) return results"},{"question":"There is a rectangular grid of size m x n (m rows and n columns), where each cell is either empty or contains a stone. The grid hosting stones is characterized by: - \'1\' represents a stone. - \'0\' represents an empty cell. Your task is to find and count the number of distinct groups of connected stones. Two stones are considered connected if they are adjacent horizontally or vertically (not diagonally). Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid, respectively. The next m lines contain n characters each, representing the grid. Output Print a single integer, the number of distinct groups of connected stones. Example Input 4 5 11000 11000 00100 00011 Output 3 Note In the provided example, there are three distinct groups of connected stones: - The first group is in the top left corner. - The second group is a single stone in the third row. - The third group is in the bottom right corner.","solution":"def count_stone_groups(m, n, grid): visited = [[False] * n for _ in range(m)] def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) count += 1 return count"},{"question":"Maya lives in a unique town where all the roads are laid out in a perfect grid. She likes to take walks from her home to the town park. The town is composed of an n x m grid, and Maya can only move either right or down at each step. Her home is located at the top-left corner of the grid (1,1), and the park is located at the bottom-right corner (n,m). Maya wonders how many unique paths she can take from her home to the park. Can you help her calculate the number of unique paths? Input Format: The first line contains an integer T, the number of test cases. Each of the following T lines contains two integers n and m, representing the number of rows and columns of the grid. Output Format: For each test case, print the number of unique paths from the top-left corner to the bottom-right corner of the grid. Constraints: 1 ≤ T ≤ 100 1 ≤ n, m ≤ 100 SAMPLE INPUT 2 3 3 2 4 SAMPLE OUTPUT 6 4","solution":"def unique_paths(n, m): Returns the number of unique paths in an n x m grid. # Initialize a 2D list with 1\'s dp = [[1] * m for _ in range(n)] # Populate the dp array with the number of unique paths for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1] def process_test_cases(test_cases): Returns the results for all test cases. :param test_cases: List of tuples containing (n, m) results = [] for n, m in test_cases: results.append(unique_paths(n, m)) return results"},{"question":"![Question Request] Kai the panda has an array of positive integers representing different types of bamboo shoots. The forest in which Kai lives has a new rule that mandates pandas can only eat specific types of bamboo shoots in a day to avoid overeating. Kai must eat at least one bamboo shoot each day, but there are also restrictions on how many consecutive days a specific type of bamboo can be eaten. Formally, you are given an array `bamboo` of `n` integers, where `bamboo[i]` represents the type of the i-th bamboo shoot. An array `limits` of length `k` is also given, where `limits[i]` represents the maximum number of consecutive days a bamboo of type `i` can be eaten. Your task is to determine if it is possible to eat all bamboo shoots in the array `bamboo` without violating the constraints set by the array `limits`. If it is possible to eat all the bamboo shoots while adhering to the constraints, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^5) — the number of bamboo shoots and the number of different types of bamboo shoots. The second line contains `n` integers — the array `bamboo` where `bamboo[i]` (1 ≤ bamboo[i] ≤ k) represents the type of the i-th bamboo shoot. The third line contains `k` integers — the array `limits` where `limits[i]` (1 ≤ limits[i] ≤ n) represents the maximum number of consecutive days a bamboo of type `i` can be eaten. Output If it is possible to eat all the bamboo shoots while adhering to the constraints, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 10 3 1 1 2 2 3 3 3 1 2 2 2 2 3 Output YES Input 6 2 1 1 1 2 2 2 2 3 Output NO Note In the first sample, the bamboo array is [1, 1, 2, 2, 3, 3, 3, 1, 2, 2], and the limits array is [2, 2, 3]. Kai can follow the eating sequence without violating the specified limits. Hence, the output is \\"YES\\". In the second sample, the bamboo array is [1, 1, 1, 2, 2, 2], and the limits array is [2, 3]. Kai would violate the limit of type 1 bamboos by eating it 3 consecutive days. Hence, the output is \\"NO\\".","solution":"def can_eat_all_bamboo(n, k, bamboo, limits): consecutive_counts = [0] * k for i in range(n): bamboo_type = bamboo[i] - 1 consecutive_counts[bamboo_type] += 1 if consecutive_counts[bamboo_type] > limits[bamboo_type]: return \\"NO\\" # Reset the consecutive count if the current bamboo type changes if i < n - 1 and bamboo[i] != bamboo[i + 1]: consecutive_counts = [0] * k return \\"YES\\""},{"question":"Create a function that takes a string containing exactly two words separated by a single space and returns their lengths separated by a single space. If the input is not valid (e.g., more than two words, no space, or any characters other than letters and space), the function should return \\"Invalid input\\". ------ Input ------ Each test case contains a single string `s`. ------ Output ------ For each test case, print the lengths of the two words separated by a space, or \\"Invalid input\\" if the input is not valid. ------ Constraints ------ The string `s` consists of only alphabets and a single space between two words. The length of `s` is between 3 and 100. ------ Sample Input 1 ------ Hello World Invalid123 Input HelloWorld Good morning ------ Sample Output 1 ------ 5 5 Invalid input Invalid input Invalid input","solution":"def word_lengths(s): words = s.split() # Check if there are exactly two words and both consist purely of alphabet characters if len(words) == 2 and words[0].isalpha() and words[1].isalpha(): return f\\"{len(words[0])} {len(words[1])}\\" else: return \\"Invalid input\\""},{"question":"An e-commerce company wants to create a personalized experience for its users by analyzing their purchase patterns. They have gathered data on the items users have bought over a month and need to determine the similarity between users based on their buying habits. Given a list of purchase records, each containing a user ID and an item ID, the goal is to find the pair of users who have the highest number of common items in their purchase history. If there are multiple pairs with the same number of common items, choose the pair with the smallest numerical user IDs. ----Input---- The first line contains an integer m (2 leq m leq 300,000) — the number of purchase records. The next m lines contain two integers each: u_i (1 leq u_i leq 1000) and v_i (1 leq v_i leq 10^6), where u_i is the user ID and v_i is the item ID. ----Output---- Print two integers separated by a space: the user IDs of the pair with the highest number of common purchased items. If there is more than one pair with the same highest number of common items, print the smallest pair (i.e., the pair with the smallest first user ID, and if the first user IDs are the same, the smallest second user ID). ----Example---- Input 6 1 100 2 100 1 101 2 101 3 102 4 103 Output 1 2 Input 7 1 100 2 101 1 102 2 102 3 100 3 101 4 102 Output 1 2 ----Note---- In the first example, users 1 and 2 both bought items 100 and 101. Thus, the pair (1, 2) has 2 common items. In the second example, the highest common items (1 each) are shared between multiple pairs, but the smallest pair is (1, 2).","solution":"from collections import defaultdict from itertools import combinations def find_most_similar_users(m, records): user_items = defaultdict(set) for user, item in records: user_items[user].add(item) max_common_items = 0 best_pair = (float(\'inf\'), float(\'inf\')) users = sorted(user_items.keys()) for user1, user2 in combinations(users, 2): common_items = len(user_items[user1] & user_items[user2]) if common_items > max_common_items or (common_items == max_common_items and (user1, user2) < best_pair): max_common_items = common_items best_pair = (user1, user2) return best_pair"},{"question":"You are given an array of integers representing the stock prices of a company in chronological order for a given period. Your task is to determine the maximum profit that could be made by buying and then later selling one share of the stock during that period. If no profit can be made, return 0. For example: ```python max_profit([7, 1, 5, 3, 6, 4]) = 5 # Buy on day 2 (price=1) and sell on day 5 (price=6), profit = 6-1 = 5. max_profit([7, 6, 4, 3, 1]) = 0 # No transaction is done, i.e. max profit = 0. max_profit([2, 4, 1]) = 2 # Buy on day 1 (price=2) and sell on day 2 (price=4), profit = 4-2 = 2. ``` The prices array will have at least two prices and will contain only positive integers. Good luck!","solution":"def max_profit(prices): Returns the max profit possible from buying and selling a stock given the prices array. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a rectangular grid, you are given n buildings each with a width, height, and (x, y) coordinate of the bottom-left corner. Determine whether any two of these buildings overlap. Input The first line contains an integer n (1 ≤ n ≤ 104), the number of buildings. Each of the next n lines contains four integers: x, y, w, h (1 ≤ x, y, w, h ≤ 104), describing the coordinates of the bottom-left corner and the dimensions of each building. Output Print \\"YES\\" if there is any overlapping between any pair of buildings, otherwise print \\"NO\\". Examples Input 3 1 1 3 2 4 1 2 2 2 3 3 3 Output NO Input 3 1 1 4 4 2 2 3 3 5 5 1 1 Output YES","solution":"def buildings_overlap(n, buildings): Determines if any of the buildings overlap. Args: - n (int): number of buildings - buildings (list of tuples): each tuple contains four integers x, y, w, h Returns: - str: \\"YES\\" if any buildings overlap, \\"NO\\" otherwise def do_overlap(x1, y1, w1, h1, x2, y2, w2, h2): Check if two rectangles overlap. Args: - x1, y1, w1, h1: Coordinates and dimensions of the first rectangle - x2, y2, w2, h2: Coordinates and dimensions of the second rectangle Returns: - bool: True if they overlap, otherwise False # If one rectangle is on left side of the other if x1 >= x2 + w2 or x2 >= x1 + w1: return False # If one rectangle is above the other if y1 >= y2 + h2 or y2 >= y1 + h1: return False return True for i in range(n): for j in range(i + 1, n): if do_overlap(*buildings[i], *buildings[j]): return \\"YES\\" return \\"NO\\" # Example usage: # n = 3 # buildings = [(1, 1, 4, 4), (2, 2, 3, 3), (5, 5, 1, 1)] # print(buildings_overlap(n, buildings)) # Output: YES"},{"question":"Given a string of lowercase letters, remove duplicate letters so that every letter appears once and only once. The result must be the smallest in lexicographic order among all possible results. ------- Input ------- The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string s of lowercase English letters. ------- Output ------- For each test case, output the resulting string of characters after removing duplicates, ensuring the smallest lexicographic order. ------- Constraints ------- 1 leq T leq 100 1 leq |s| leq 10^4 ------- Sample Input ------- 3 bcabc cbacdcbc abcd ------- Sample Output ------- abc acdb abcd","solution":"def remove_duplicate_letters(s): Removes duplicate letters from string s so that every letter appears once and only once. The result must be the smallest in lexicographic order among all possible results. stack = [] seen = set() last_occurrence = {ch: i for i, ch in enumerate(s)} for i, ch in enumerate(s): if ch not in seen: while stack and ch < stack[-1] and i < last_occurrence[stack[-1]]: seen.discard(stack.pop()) seen.add(ch) stack.append(ch) return \'\'.join(stack) def solve(test_cases): results = [] for s in test_cases: results.append(remove_duplicate_letters(s)) return results"},{"question":"A farmer has a rectangular field with distinct trees planted at different coordinate points within the field, represented as a grid. Each tree is represented by its (x, y) coordinates. The farmer wants to identify the largest possible square that can contain four of these trees at its vertices. Write a program that determines the side length of the largest square that can be formed using any four of the given trees as its vertices. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of trees. The next N lines contain two integers x and y, the coordinates of each tree. ------ Output ------ For each test case, output a single integer - the side length of the largest square that can be formed, on a line by itself. If no square can be formed, output 0. ------ Constraints ------ 1 ≤ T ≤ 50 4 ≤ N ≤ 1000 0 ≤ x, y ≤ 100000 ------ Sample Input 1 ------ 2 4 0 0 0 1 1 0 1 1 5 1 1 2 2 3 1 4 0 4 4 ------ Sample Output 1 ------ 1 0 ------ Explanation 1 ------ Test Case 1: The trees form a 1x1 square (with side length = 1) at coordinates (0,0), (0,1), (1,0), and (1,1). Test Case 2: The trees cannot form a square, so the output is 0.","solution":"def largest_square(trees): Given a list of coordinates for trees, determines the side length of the largest square that can be formed using any four of the trees as its vertices. max_side_length = 0 tree_set = set(trees) for i in range(len(trees)): for j in range(i + 1, len(trees)): (x1, y1), (x2, y2) = trees[i], trees[j] # Calculate potential square side length dist = (x2 - x1)**2 + (y2 - y1)**2 if dist == 0: continue side_length = int(dist**0.5) # Calculate the remaining two points dx, dy = x2 - x1, y2 - y1 # Rotate 90 degrees clockwise x3, y3 = x2 - dy, y2 + dx x4, y4 = x1 - dy, y1 + dx if (x3, y3) in tree_set and (x4, y4) in tree_set: max_side_length = max(max_side_length, side_length) # Rotate 90 degrees counterclockwise x3, y3 = x2 + dy, y2 - dx x4, y4 = x1 + dy, y1 - dx if (x3, y3) in tree_set and (x4, y4) in tree_set: max_side_length = max(max_side_length, side_length) return max_side_length def main(input_data): Handles multiple test cases for the largest_square function. input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) results = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) trees = [] for i in range(line_index + 1, line_index + 1 + N): x, y = map(int, input_lines[i].split()) trees.append((x, y)) results.append(largest_square(trees)) line_index += N + 1 return results"},{"question":"Alice loves solving problems related to strings and sequences. She recently came across a unique problem that involves transforming one string into another by applying a specific set of operations. The operations allowed are: 1. Swap any two characters in the string. 2. Remove any character from the string. Alice is given two strings `s1` and `s2`. She wants to transform `s1` into `s2` using the minimum number of the allowed operations. If it is impossible to transform `s1` into `s2`, she should output `-1`. Write a program to help Alice determine the minimum number of operations required to change `s1` into `s2`, or determine if it is impossible. Input The input consists of two strings `s1` and `s2` (1 ≤ |s1|, |s2| ≤ 1000). Output Output the minimum number of operations required to transform `s1` into `s2`, or `-1` if it is impossible. Examples Input aaabc cb Output 3 Input abc d Output -1 Input babaa abbab Output 5","solution":"from collections import Counter def min_operations_to_transform(s1, s2): Returns the minimum number of operations to transform string s1 into string s2. count_s1 = Counter(s1) count_s2 = Counter(s2) # Check if transformation is possible for char in count_s2: if count_s2[char] > count_s1[char]: return -1 # Calculate the number of removals removals = sum((count_s1[char] - count_s2[char] for char in count_s1)) return removals"},{"question":"`missing_integer` function receives an array of integers and should return the smallest positive integer that is missing from the array. Examples: ``` [1, 2, 3, 4] => 5 [3, 4, -1, 1] => 2 [7, 8, 9, 11, 12] => 1 ``` You can assume the array contains at least one element, and all the integers in the array are within the range of -10^6 to 10^6.","solution":"def missing_integer(nums): Returns the smallest positive integer that is missing from the array. nums = [num for num in nums if num > 0] # Filter out non-positive numbers nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing"},{"question":"During a pandemic, the authorities have decided to establish multiple testing centers throughout a city to increase the testing rate. However, due to limited resources, they can only build one testing center at a time. They want to ensure that the testing center is located such that the maximum distance a person has to travel to get tested is minimized. The city is represented as a number line, with homes located at various integer positions. You are to determine the optimal position for the testing center such that the maximum distance any person has to travel to the center is minimized. -----Input:----- - The first line contains an integer n, the number of homes located in the city. - The second line contains n integers representing the coordinates of the homes. -----Output:----- - The optimal position for the testing center that minimizes the maximum distance anyone has to travel. -----Constraints----- - 1 leq n leq 1000 - 1 leq hi leq 10^9 -----Sample Input:----- 5 1 2 8 12 15 -----Sample Output:----- 8 -----EXPLANATION:----- Building the testing center at position 8 minimizes the maximum distance anyone has to travel. The distances are: 7 for home at 1, 6 for home at 2, 0 for home at 8, 4 for home at 12, and 7 for home at 15. The maximum distance in this configuration is 7, which is the smallest possible maximum distance compared to other potential testing center positions.","solution":"def optimal_testing_center_position(n, homes): Returns the optimal position for the testing center to minimize the maximum distance anyone has to travel. Parameters: n (int): The number of homes in the city. homes (list): A list of integers representing the coordinates of the homes. Returns: int: The optimal position for the testing center. # Sort the home positions homes.sort() # The optimal position is the median of the sorted home positions median_index = (n - 1) // 2 return homes[median_index]"},{"question":"Create an application that processes a list of strings and performs a frequency analysis. The application should count the number of times each character appears in the list of strings and then return the top k most frequent characters. **Function Signature** ```python def top_k_frequent_characters(strings: List[str], k: int) -> List[str]: ``` **Input Format** - An integer, k, representing the number of top frequent characters to be returned. - A list of n strings, where each string is composed of only lowercase alphabets (`a-z`). **Output Format** - A list of strings representing the top k most frequent characters in descending order of their frequencies. If two characters have the same frequency, the one that appears first in alphabetical order should come first. **Input Constraints** - 1 ≤ n ≤ 1000 - 1 ≤ length of each string ≤ 100 - 1 ≤ k ≤ 26 **SAMPLE INPUT** ```python k = 3 strings = [\\"apple\\", \\"banana\\", \\"apricot\\"] ``` **SAMPLE OUTPUT** ```python [\'a\', \'p\', \'n\'] ``` **Explanation** In the example, the characters appear with the following frequencies: - \'a\': 4 - \'p\': 3 - \'n\': 2 - \'b\': 1 - \'c\': 1 - \'e\': 1 - \'i\': 1 - \'l\': 1 - \'o\': 1 - \'r\': 1 The top 3 characters by frequency are \'a\', \'p\', and \'n\'.","solution":"from typing import List from collections import Counter def top_k_frequent_characters(strings: List[str], k: int) -> List[str]: # Combine all strings into a single string combined_string = \'\'.join(strings) # Use Counter to count frequency of each character frequency_count = Counter(combined_string) # Sort items first by frequency (descending) and then by character (ascending) sorted_characters = sorted(frequency_count.items(), key=lambda x: (-x[1], x[0])) # Extract the top k characters top_k_characters = [char for char, _ in sorted_characters[:k]] return top_k_characters"},{"question":"Given a string containing only distinct characters, write a function that returns a list of all possible substrings of the string, sorted first by length and then lexicographically within each length group. For each substring, provide a tuple containing the substring and its length. Example format of solution: [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'ab\', 2), (\'bc\', 2), (\'abc\', 3)] Sample Input: \\"abc\\" Sample Output: [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'ab\', 2), (\'bc\', 2), (\'abc\', 3)]","solution":"def all_substrings(s): Returns a list of all possible substrings of s, sorted first by length and then lexicographically within each length group. Each tuple contains the substring and its length. substrings = [] len_s = len(s) # Generate all substrings of s for length in range(1, len_s + 1): for i in range(len_s - length + 1): substring = s[i:i + length] substrings.append((substring, length)) # Sort the substrings first by length then lexicographically substrings.sort(key=lambda x: (x[1], x[0])) return substrings"},{"question":"You\'re working for a company that provides a platform for vacation home rentals. Your task is to develop a tool that calculates the optimal rental pricing for maximizing profit. The company uses a dynamic pricing model where prices can be adjusted based on demand predictions for different days. Each day has a specific base rental price, and a modifier relating to demand predictions, which influences the final rental price for that day. The demand modifier is a factor indicating how much the demand on that day is expected to deviate from normal demand. If the demand modifier is above 1, the demand is higher than usual and the price should be increased proportionally. If the demand modifier is below 1, the demand is lower than usual and the price should be decreased proportionally. Your tool should calculate the optimal rental price for each day by multiplying the base rental price by the demand modifier. Furthermore, your tool should calculate the expected total profit over a given period. -----Input----- The first line of input contains two integers D and B where 1 le D le 365 gives the number of days for which you need to calculate the rental prices, and 0 le B le 10000 gives the base amount (in dollars) that a customer is willing to pay per day on average under normal demand. Each of the following D lines contains one real number m, where 0 le m le 2 is a real number representing the demand modifier for that specific day. All real numbers are given with exactly 6 digits after the decimal point. -----Output----- Output a line containing the expected total profit for the given period, calculated by summing the optimized rental prices for all days. -----Examples----- Sample Input: 4 100 1.200000 0.800000 1.500000 1.100000 Sample Output: 460.000000","solution":"def calculate_total_profit(D, B, modifiers): Calculate the total profit by summing the optimized rental prices for all days. Parameters: D (int): Number of days. B (int): Base rental price. modifiers (list of float): List of demand modifiers for each day. Returns: float: The total expected profit. total_profit = 0.0 for modifier in modifiers: total_profit += B * modifier return round(total_profit, 6) # Example usage: # D = 4 # B = 100 # modifiers = [1.200000, 0.800000, 1.500000, 1.100000] # print(calculate_total_profit(D, B, modifiers)) # 460.000000"},{"question":"A restaurant is tracking its daily sales recorded in a list of integers where each integer represents the sales amount in dollars for a particular hour. For the purpose of analysis, they are interested in finding the maximum sum of sales for any contiguous subarray within the list. For example, to find the maximum sales that can be achieved in any contiguous interval of hours, if the sales amounts for a given day are [2, -1, 2, 3, 4, -5], the maximum sum of sales for any contiguous subarray is 2 + (-1) + 2 + 3 + 4 = 10. Write a program that takes a list of daily sales recorded hourly and calculates the maximum sum of sales for any contiguous subarray. -----Input----- The input is composed of two lines. The first line contains a single positive integer n (1 le n le 100) that specifies the number of hours (or the length of the list). The second line contains n integers, separated by spaces, each representing the sales for a specific hour. Each integer could be positive, negative, or zero, and represents the monetary amount of sales. -----Output----- Display the maximum sum of sales for any contiguous subarray as a single integer. -----Examples----- Sample Input 1: 6 2 -1 2 3 4 -5 Sample Output 1: 10 Sample Input 2: 4 -2 -3 4 -1 Sample Output 2: 4","solution":"def max_contiguous_subarray_sum(n, sales): Returns the maximum sum of any contiguous subarray. :param n: int, the number of hours (length of the list) :param sales: list of int, the sales amounts for each hour :return: int, the maximum sum of any contiguous subarray max_sum = float(\'-inf\') current_sum = 0 for sale in sales: current_sum = max(sale, current_sum + sale) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Find the smallest integer X such that the product of digits of X is equal to the provided number N. If no such integer exists, return -1. -----Constraints----- - 1 ≤ N ≤ 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the smallest integer X such that the product of its digits is equal to N. If no such integer exists, print -1. -----Sample Input----- 36 -----Sample Output----- 49 -----Explanation----- - The digits of 49 are 4 and 9. - The product of 4 and 9 is 36. - There is no smaller integer whose digits\' product equals 36.","solution":"def smallest_product_digit_integer(N): if N == 1: return 1 # Check from larger digit to smaller digit to reduce product sequence length. results = [] for digit in range(9, 1, -1): while N % digit == 0: N //= digit results.append(digit) # If N is not reduced to 1, then it\'s not possible to form such an integer X if N != 1: return -1 # To form the smallest integer, we sort the digits in ascending order results.sort() # Convert digits into a number smallest_integer = int(\'\'.join(map(str, results))) return smallest_integer"},{"question":"A group of friends have decided to play a game where they form teams to maximize their combined skill ratings. Each team must consist of exactly K players. Every player has a specific skill rating, and they want to form the best possible team by choosing K players whose total skill rating is maximized. Given a list of integers representing the skill ratings of N players, you need to determine the maximum possible skill rating of any team that can be formed with exactly K players. Input: The first line of the input contains an integer T denoting the number of test cases. The first line of each test-case contains two space-separated integers N and K. The second line of each test case contains N space-separated integers denoting the skill ratings of the players. Output: For each test case, print the maximum possible skill rating of any team that can be formed with exactly K players. Constraints: 1 ≤ T ≤ 100. 1 ≤ N ≤ 1000. 1 ≤ K ≤ N. 1 ≤ skill rating ≤ 10^6. SAMPLE INPUT 2 5 3 10 20 30 40 50 4 2 15 10 5 20 SAMPLE OUTPUT 120 35 Explanation: For the first test case, the team with highest skill rating is (30, 40, 50) and their combined skill rating is 120. For the second test case, the team with highest skill rating is (15, 20) and their combined skill rating is 35.","solution":"def max_skill_rating(T, test_cases): T: Integer, number of test cases. test_cases: List of tuples, where each tuple contains: - an integer N (number of players) - an integer K (team size) - a list of integers representing skill ratings of N players Returns a list of integers where each integer is the maximum possible skill rating for each test case. results = [] for i in range(T): N, K, skills = test_cases[i] # Sort the skill ratings in descending order skills.sort(reverse=True) # Sum the top K skill ratings max_rating = sum(skills[:K]) results.append(max_rating) return results # Example Usage: # test_cases = [ # (5, 3, [10, 20, 30, 40, 50]), # (4, 2, [15, 10, 5, 20]) # ] # print(max_skill_rating(2, test_cases))"},{"question":"Given a string `s`, reverse each word in the string individually while maintaining the original word order and return the resulting string. A word is defined as a sequence of non-space characters. Example 1: Input: s = \\"Let\'s take LeetCode contest\\" Output: \\"s\'teL ekat edoCteeL tsetnoc\\" Example 2: Input: s = \\"God Ding\\" Output: \\"doG gniD\\" Constraints: - 1 <= s.length <= 5 * 10^4 - s contains printable ASCII characters. - s does not contain any leading or trailing spaces. - There is at least one word in s. - All words in s are separated by a single space.","solution":"def reverse_words(s: str) -> str: Reverse each word in the string s individually while maintaining the original word order. return \' \'.join(word[::-1] for word in s.split())"},{"question":"In a recent data processing task, you are asked to implement a function that behaves similarly to the built-in `map` function in Python but with a slight twist. You are to create a generator function that applies a given transformation function to each element of an iterable, while also keeping track of the index of each element and providing it as the second argument to the transformation function. Your generator function should be called `custom_map`. The function signature is as follows: ```python def custom_map(func, iterable): pass ``` # Conditions: 1. The function cannot use the built-in `map` function. 2. The function must be a generator. 3. Each element from the iterable, along with its index (starting from 0), should be passed to the transformation function `func`. # Example: ```python def transform(x, index): return f\\"{index}: {x * 2}\\" result = custom_map(transform, [1, 2, 3, 4]) for item in result: print(item) ``` In this example, the expected output would be: ``` 0: 2 1: 4 2: 6 3: 8 ``` Implement the `custom_map` function according to the above conditions and ensure it works as described.","solution":"def custom_map(func, iterable): A generator function that applies a transformation function \'func\' to each element of \'iterable\', passing the element and its index. :param func: A transformation function that takes two arguments: element, and index. :param iterable: An iterable to apply the transformation function to. :yield: Transformed elements one by one. for index, element in enumerate(iterable): yield func(element, index) def transform(x, index): return f\\"{index}: {x * 2}\\""},{"question":"Given an integer array nums, you need to design an algorithm that determines if there exists a triplet (i, j, k) such that 0 ≤ i < j < k < nums.length and nums[i] < nums[j] < nums[k]. Return true if you can find such a triplet, otherwise return false. Input The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of elements in the array. The second line contains n integers nums1, nums2, ..., numsn (−10^9 ≤ numsi ≤ 10^9). Output If there exists a triplet that satisfies the condition, print \\"TRUE\\" (without quotes), otherwise print \\"FALSE\\" (without quotes). Example Input 6 1 2 3 4 5 6 Output TRUE Input 5 5 4 3 2 1 Output FALSE Note In the first example, the triplet (1, 2, 3) satisfies the condition 1 < 2 < 3. In the second example, no such triplet exists.","solution":"def increasing_triplet(nums): Returns True if there exists a triplet (i, j, k) such that 0 ≤ i < j < k < len(nums) and nums[i] < nums[j] < nums[k]. Otherwise, returns False. if len(nums) < 3: return \\"FALSE\\" first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return \\"TRUE\\" return \\"FALSE\\""},{"question":"Given an encoded message containing digits, determine the total number of ways to decode it. The message is encoded such that: * \'A\' = 1, \'B\' = 2, ..., \'Z\' = 26 You are to write a function that computes the number of ways to decode this encoded message. **Input Format** * A single string s, containing digits only. **Constraints** * 1 <= len(s) <= 100 * s contains only digits and does not contain leading zeros. **Output Format** * Return a single integer, representing the number of ways to decode the string. **Example 1** **Input:** ``` 12 ``` **Output:** ``` 2 ``` **Explanation:** ``` The message \\"12\\" could be decoded as \\"AB\\" (1 2) or \\"L\\" (12), so there are 2 ways to decode it. ``` **Example 2** **Input:** ``` 226 ``` **Output:** ``` 3 ``` **Explanation:** ``` The message \\"226\\" could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6), so there are 3 ways to decode it. ``` **Example 3** **Input:** ``` 0 ``` **Output:** ``` 0 ``` **Explanation:** ``` \\"0\\" cannot be decoded into any letter. ``` **Example 4** **Input:** ``` 10 ``` **Output:** ``` 1 ``` **Explanation:** ``` The message \\"10\\" could be decoded as \\"J\\" (10), so there is 1 way to decode it. ```","solution":"def numDecodings(s): Returns the number of ways to decode the given string s. if not s: return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 0 if s[0] == \'0\' else 1 for i in range(2, n + 1): one_digit = int(s[i - 1:i]) two_digits = int(s[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digits <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"Given a string containing only numeric digits, write a function to find the largest integer that can be formed by swapping any two digits of the string exactly once. If no swap can result in a larger integer than the original, return the original integer. -----Input----- The input will be a single line containing a string `num` of length at most 1000 which consists of numeric digits (0-9). -----Output----- Output a single integer, the largest integer possible after exactly one swap of any two digits. -----Example----- Input: 2736 Output: 7236 Input: 9973 Output: 9973","solution":"def largest_after_one_swap(num): Given a string containing only numeric digits, find the largest integer that can be formed by swapping any two digits of the string exactly once. If no swap can result in a larger integer than the original, return the original integer. num_list = list(num) n = len(num_list) max_num = num for i in range(n): for j in range(i + 1, n): num_list[i], num_list[j] = num_list[j], num_list[i] swapped_num = \'\'.join(num_list) if swapped_num > max_num: max_num = swapped_num num_list[i], num_list[j] = num_list[j], num_list[i] # swap back return int(max_num) # Example usage: # num = \\"2736\\" # print(largest_after_one_swap(num)) # Output: 7236 # num = \\"9973\\" # print(largest_after_one_swap(num)) # Output: 9973"},{"question":"You are given two integer arrays `arr1` and `arr2` of length `n` and `m` respectively (1 ≤ n, m ≤ 2 * 10^5). A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. You need to find the length of the longest common subsequence of the two arrays. A common subsequence is a subsequence that is common to both arrays. Input The first line of the input contains two integers n and m — the lengths of the arrays. The next line contains n integers — elements of the first array. The next line contains m integers — elements of the second array. Output Print a single integer — the length of the longest common subsequence of the two given arrays. Examples Input 4 5 1 3 4 1 3 4 1 2 1 Output 3 Input 6 7 1 2 3 4 1 2 2 4 3 1 2 1 3 Output 4","solution":"def longest_common_subsequence_length(arr1, arr2): Returns the length of the longest common subsequence of two integer arrays arr1 and arr2. n = len(arr1) m = len(arr2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if arr1[i - 1] == arr2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Little Timmy loves playing a particular game. In this game, he is given a rectangular grid of size `n x m`, and each cell in the grid contains either a \'0\' or a \'1\'. The objective of the game is to find the largest continuous rectangular block (submatrix) of \'1\'s in the grid. For example, consider the following 3x4 grid: ``` 0 1 1 0 1 1 1 0 0 1 1 1 ``` In this grid, the largest rectangular block of continuous \'1\'s has an area of 6. Your task is to write a program that helps Timmy find the area of the largest continuous rectangular block of \'1\'s in a given grid. # Input Format: - The first line contains two integers `n` and `m` (1 <= n, m <= 100), the number of rows and columns in the grid respectively. - The next `n` lines each contain `m` integers (`0` or `1`), representing the cells of the grid. # Output Format: - Print a single integer, the area of the largest continuous rectangular block of \'1\'s. # Constraints: - The dimensions of the grid (n and m) will not exceed 100. - Each cell of the grid contains either \'0\' or \'1\'. # Example: Input: ``` 3 4 0 1 1 0 1 1 1 0 0 1 1 1 ``` Output: ``` 6 ``` # Explanation: The largest rectangular block of continuous \'1\'s in the grid has an area of 6, as shown by the submatrix: ``` 1 1 1 1 1 1 ```","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 height = [0] * m left = [0] * m right = [m] * m for i in range(n): cur_left, cur_right = 0, m for j in range(m): if matrix[i][j] == \'1\': height[j] += 1 else: height[j] = 0 for j in range(m): if matrix[i][j] == \'1\': left[j] = max(left[j], cur_left) else: left[j] = 0 cur_left = j + 1 for j in range(m-1, -1, -1): if matrix[i][j] == \'1\': right[j] = min(right[j], cur_right) else: right[j] = m cur_right = j for j in range(m): max_area = max(max_area, (right[j] - left[j]) * height[j]) return max_area def findLargestBlock(n, m, grid): matrix = [[\'1\' if cell == 1 else \'0\' for cell in row] for row in grid] return maximalRectangle(matrix)"},{"question":"You are given an array of integers and a set of instructions. Each instruction can either be a rotation or a query. A rotation operation moves the last element of the array to the first position and shifts all other elements one position to the right. A query operation asks for the value of the element at a given position after all rotations. You need to process the list of instructions and produce the result for each query operation. Example: Let a = [1, 2, 3, 4, 5] and the instructions be: 1. Rotate 2. Rotate 3. Query 2 4. Rotate 5. Query 1 After performing the first two rotations, the array becomes [4, 5, 1, 2, 3]. After performing the query operation for index 2, the answer is 1. After performing one more rotation, the array becomes [3, 4, 5, 1, 2]. After performing the next query operation for index 1, the answer is 4. Function Description Complete the `processInstructions` function in the editor below. The function should return a list of integers, where each integer is the result of a query instruction. `processInstructions` has the following parameter(s): - int a[n]: the array to perform operations on - int instructions[m][2]: the list of instructions. Each instruction is either [\\"Rotate\\", 0] or [\\"Query\\", index] Returns - int[]: the values in the array after performing the rotations, corresponding to the query instructions. Input Format The first line contains n, the number of elements in the integer array. The second line contains n space-separated integers, where each integer a[i] describes array element a[i] (where 0 leq i < n). Each of the next m lines contains two space-separated values, the first string denotes the type of the operation (“Rotate” or “Query”), and the second integer gives the index for the query if the operation is “Query”. If the operation is \\"Rotate\\", the second integer is always 0. Constraints 1 leq n leq 10^5 1 leq a[i] leq 10^5 1 leq m leq 10^5 0 leq textit{index} lt n Sample Input 0 5 1 2 3 4 5 Rotate 0 Rotate 0 Query 2 Rotate 0 Query 1 Sample Output 0 1 4 Explanation 0 After the first rotation, the array is [5, 1, 2, 3, 4]. After the second rotation, the array is [4, 5, 1, 2, 3]. When querying the value at index 2, we get 1. After the third rotation, the array is [3, 4, 5, 1, 2]. When querying the value at index 1, we get 4.","solution":"def processInstructions(a, instructions): Process the list of instructions and produce result for each query operation. Parameters: a (list of int): an array to perform operations on instructions (list of [string, int]): list of instructions Returns: list of int: the values in the array after performing the rotations, corresponding to the query instructions results = [] rotation_count = 0 n = len(a) for instruction in instructions: if instruction[0] == \\"Rotate\\": rotation_count = (rotation_count + 1) % n elif instruction[0] == \\"Query\\": idx = (instruction[1] - rotation_count + n) % n results.append(a[idx]) return results"},{"question":"You are given a directed graph with `n` vertices and `m` edges, where each edge has a weight. Your goal is to find the longest path from a given start vertex to an end vertex. You\'ll use dynamic programming to efficiently find the longest path in a Directed Acyclic Graph (DAG). Input: - The first line contains two integers `n` and `m` (`2 ≤ n ≤ 100`, `1 ≤ m ≤ 1000`) - the number of vertices and the number of edges in the graph, respectively. - The following `m` lines each contain three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 1000`), which indicate there is a directed edge from vertex `u` to vertex `v` with weight `w`. - The last line contains two integers `start` and `end` (`1 ≤ start, end ≤ n`), specifying the starting and ending vertices for the path. Output: - Print a single integer - the length of the longest path from the `start` vertex to the `end` vertex. If there is no path from `start` to `end`, print `-1`. Example: Input: ``` 5 6 1 2 3 1 3 2 2 4 4 2 5 2 3 4 1 4 5 3 1 5 ``` Output: ``` 10 ``` Note: - The input graph has vertices numbered from `1` to `n`. - The graph is guaranteed to be a DAG. - There might be multiple paths from `start` to `end`, but you need to find the one with the maximum total weight.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges, start, end): def topological_sort(graph, indegree): queue = deque([v for v in range(1, n + 1) if indegree[v] == 0]) topo_order = [] while queue: u = queue.popleft() topo_order.append(u) for v, w in graph[u]: indegree[v] -= 1 if indegree[v] == 0: queue.append(v) return topo_order graph = defaultdict(list) indegree = [0] * (n + 1) for u, v, w in edges: graph[u].append((v, w)) indegree[v] += 1 topo_order = topological_sort(graph, indegree) dist = [-float(\\"inf\\")] * (n + 1) dist[start] = 0 for u in topo_order: if dist[u] != -float(\\"inf\\"): for v, w in graph[u]: if dist[u] + w > dist[v]: dist[v] = dist[u] + w return dist[end] if dist[end] != -float(\\"inf\\") else -1 # Example function usage: n, m = 5, 6 edges = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (2, 5, 2), (3, 4, 1), (4, 5, 3) ] start, end = 1, 5 print(find_longest_path(n, m, edges, start, end)) # Output should be 10"},{"question":"Write a function `min_length_subarray_sum` that takes two parameters, a list of positive integers `arr` and a positive integer `target`. The function should return the length of the smallest contiguous subarray of `arr` whose sum is at least `target`. If there is no such subarray, the function should return 0. # Example: ```python min_length_subarray_sum([2, 3, 1, 2, 4, 3], 7) ``` This should return `2` because the smallest subarray with a sum of at least 7 is [4, 3]. # Constraints: - You may assume that `arr`\'s length will be at most 10,000. - The elements of `arr` and `target` will be positive integers.","solution":"def min_length_subarray_sum(arr, target): Returns the length of the smallest contiguous subarray of `arr` whose sum is at least `target`. If there is no such subarray, it returns 0. n = len(arr) min_length = float(\'inf\') left = 0 current_sum = 0 for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"In a large tech company, there is a need to optimize the deployment of software updates to multiple servers. Each server can only handle a certain number of updates at a time without crashing. To maximize uptime and ensure a smooth deployment, you need to create a schedule for the updates. Given a series of software updates, and the capacity of each server, you are tasked with assigning the updates to the servers without overloading any server. Additionally, you want to balance the load across all servers as evenly as possible. -----Input----- The first line contains two integers s and u (1 leq s leq 100, 1 leq u leq 1,000) — the number of servers and the number of updates. The second line contains s integers c_1, c_2, ldots, c_s (1 leq c_i leq 100) — the maximum number of updates that each server can handle. Each of the following u lines contains a single integer id_i (1 leq id_i leq 1,000) — the identifier of each update. -----Output----- For each update in the same order, print srv_i (1 leq srv_i leq s) — the number of the server to which you assign the update. If it is impossible to assign an update without exceeding the capacity of the servers, output \\"Impossible\\". If there are multiple solutions, print any. -----Example----- Input 3 5 3 2 4 101 102 103 104 105 Output 1 2 3 1 2 -----Note----- In the given example, server 1 can handle up to 3 updates, server 2 can handle up to 2 updates, and server 3 can handle up to 4 updates. One of the possible ways to distribute the updates while balancing the load and respecting the server capacities is shown in the output. Other valid distributions would also be accepted as long as the constraints are not violated.","solution":"def schedule_updates(s, u, capacities, updates): server_loads = [0] * s assignment = [] for update in updates: assigned = False for i in range(s): if server_loads[i] < capacities[i]: server_loads[i] += 1 assignment.append(i + 1) assigned = True break if not assigned: return \\"Impossible\\" return assignment"},{"question":"An amusement park has various rides and attractions, each having different opening and closing times throughout the day. To determine the best time to start enjoying the park, you need to find the maximum number of rides that can be taken given their schedule. Your task is to write a program that, given opening and closing times, finds the maximum number of non-overlapping rides you can take. Input The first line contains a single integer n (1 ≤ n ≤ 100) – the number of rides. Each of the next n lines contains two integers si and ti (0 ≤ si < ti ≤ 24) – the opening (si) and closing (ti) times of the i-th ride. Output Output a single integer - the maximum number of non-overlapping rides that can be taken. Examples Input 5 1 4 3 5 0 6 5 7 8 9 Output 3 Input 3 0 2 1 5 4 6 Output 2 Input 4 6 7 8 9 5 7 9 12 Output 3 Note In the first example, the optimal choice is to take rides with timings (1,4), (5,7), and (8,9). In the second example, the optimal choice is to take rides with timings (0,2) and (4,6). In the third example, the optimal choice is to take rides with timings (6,7), (8,9), and (9,12).","solution":"def max_non_overlapping_rides(n, intervals): Finds the maximum number of non-overlapping rides based on their opening and closing times. Args: n: int : number of rides intervals: list of tuples : each tuple contains two integers (si, ti) Returns: int : maximum number of non-overlapping rides intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in intervals: if start >= end_time: count += 1 end_time = end return count # Example usage: # n = 5 # intervals = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9)] # print(max_non_overlapping_rides(n, intervals)) # Output: 3"},{"question":"Write a function that processes a simple undirected graph with the following operations: - `add_edge(u, v)`: add an edge between nodes `u` and `v`. - `remove_edge(u, v)`: remove the edge between nodes `u` and `v`. - `is_connected(u, v)`: check if there\'s a path between node `u` and node `v`. The graph consists of `n` nodes with unique IDs from `0` to `n-1`. Constraints: - All inputs are integers. - ( 1 leq n leq 1000 ) - ( 1 leq q leq 10000 ) - ( 0 leq u, v leq n-1 ) Input: The input is given in the following format: ``` n q query_1 query_2 : query_q ``` The first input is an integer `n`, the number of nodes in the graph. The second input is an integer `q`, the number of queries. Each of the next `q` lines represents a query, which has one of the following formats: - `add_edge u v` - `remove_edge u v` - `is_connected u v` Output: For each `is_connected` query, print `1` if there is a path between `u` and `v`, otherwise print `0`. Example: Input: ``` 5 7 add_edge 0 1 add_edge 1 2 add_edge 2 3 add_edge 3 4 is_connected 0 4 remove_edge 2 3 is_connected 0 4 ``` Output: ``` 1 0 ``` Explanation of the example: - First, edges are added to form the path 0-1-2-3-4. - The first `is_connected 0 4` query checks for a path between node 0 and 4, which exists. - After removing the edge between nodes 2 and 3, the second `is_connected 0 4` query checks again for a path, which no longer exists.","solution":"class Graph: def __init__(self, n): self.graph = {i: set() for i in range(n)} def add_edge(self, u, v): self.graph[u].add(v) self.graph[v].add(u) def remove_edge(self, u, v): self.graph[u].discard(v) self.graph[v].discard(u) def is_connected(self, u, v): visited = set() stack = [u] while stack: node = stack.pop() if node == v: return 1 if node not in visited: visited.add(node) stack.extend(self.graph[node] - visited) return 0 def process_queries(n, queries): graph = Graph(n) result = [] for query in queries: split_query = query.split() operation = split_query[0] u = int(split_query[1]) v = int(split_query[2]) if operation == \'add_edge\': graph.add_edge(u, v) elif operation == \'remove_edge\': graph.remove_edge(u, v) elif operation == \'is_connected\': result.append(graph.is_connected(u, v)) return result"},{"question":"Given a string S consisting of lowercase alphabets and an integer K, return the lexicographically smallest string that can be obtained by removing exactly K characters from the string. Example: Input: S = \\"abcde\\" K = 2 Output: \\"abc\\" Explanation: By removing 2 characters, the lexicographically smallest string we can get is \\"abc\\". Your Task: This is a function problem. You need to complete the function smallest_lex_string that takes the string S and the integer K as parameters and returns the smallest lexicographic string after removing K characters. Constraints: 1 ≤ |S| ≤ 10^{5} 1 ≤ K ≤ |S|","solution":"def smallest_lex_string(S, K): Returns the lexicographically smallest string after removing exactly K characters from S. # Initialize a list to use as a stack stack = [] # Iterate through each character in the string for char in S: # While there are characters in the stack, the top of the stack is greater than the current # character, and we have characters left to remove, pop from the stack while stack and stack[-1] > char and K > 0: stack.pop() K -= 1 # Push the current character onto the stack stack.append(char) # If there are still characters to remove, remove them from the end of the stack while K > 0: stack.pop() K -= 1 # Join the stack to form the resultant string return \'\'.join(stack)"},{"question":"In a small town, there is a popular math game where players are given two integers and required to determine the least common multiple (LCM) of those integers. Can you write a program to determine the LCM for multiple pairs of integers? Input: The first line contains the number of test cases, T. T lines follow, each of which contains two integers A and B. Output: For each test case, output the least common multiple of A and B. Constraints: 1 ≤ T ≤ 100 1 ≤ A, B ≤ 1000 SAMPLE INPUT 3 4 5 7 3 10 15 SAMPLE OUTPUT 20 21 30 Explanation In the first input, the LCM of 4 and 5 is 20. In the second input, the LCM of 7 and 3 is 21. In the third input, the LCM of 10 and 15 is 30.","solution":"import math def lcm_of_two_numbers(a, b): Returns the least common multiple (LCM) of two integers a and b. return abs(a * b) // math.gcd(a, b) def lcm_multiple_pairs(test_cases): For a list of test cases containing pairs of integers, returns a list of the LCM results for each pair. Each element in test_cases is a tuple (A, B). return [lcm_of_two_numbers(a, b) for a, b in test_cases]"},{"question":"You are given an array of integers and you need to perform a series of operations on it. Each operation is one of two types: 1. Increase the value at a specific index by a given value. 2. Query the sum of all elements in a specified subarray. Your task is to write a program that processes a series of these operations efficiently. Input The first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial values of the array. The next m lines each describe an operation: - If the operation is of type 1, it is represented as \\"1 i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9), meaning the value at position i should be increased by x. - If the operation is of type 2, it is represented as \\"2 l r\\" (1 ≤ l ≤ r ≤ n), meaning the sum of the elements in the subarray from index l to r should be output. Output For each operation of type 2, output the sum of the elements in the specified subarray. Example Input 5 3 1 2 3 4 5 1 3 10 2 1 3 2 2 5 Output 16 24 Note In the example, we start with the array [1, 2, 3, 4, 5]. Then, we perform the first operation \\"1 3 10\\", which increases the element at index 3 by 10. The array becomes [1, 2, 13, 4, 5]. Next, we perform the query \\"2 1 3\\", which calculates the sum of the subarray from index 1 to 3. The sum is 1 + 2 + 13 = 16. Finally, we perform the query \\"2 2 5\\", which calculates the sum of the subarray from index 2 to 5. The sum is 2 + 13 + 4 + 5 = 24.","solution":"class ArrayOperations: def __init__(self, n, array): self.array = array self.n = n self.prefix_sum = [0] * (n + 1) self.build_prefix_sum() def build_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.array[i - 1] def update(self, i, x): self.array[i - 1] += x self.build_prefix_sum() def query(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def array_operations(n, operations, array): arr_ops = ArrayOperations(n, array) results = [] for op in operations: if op[0] == 1: _, i, x = op arr_ops.update(i, x) elif op[0] == 2: _, l, r = op results.append(arr_ops.query(l, r)) return results"},{"question":"John works as a software engineer in a company where he often needs to process log files from different systems. Each log file contains a list of events, each identified by a timestamp and a description. John wants to implement a system that can merge multiple log files into a single timeline, so that the events are displayed in chronological order. If two or more events have the same timestamp, they should appear in the output in the order they were provided in the input. Write a function `merge_logs(logs)` that takes a list of log files as input. Each log file is represented as a list of tuples, where each tuple contains a timestamp (integer) and a description (string). The function should return a single list of events, sorted by timestamp in ascending order. **Function Signature:** ```python def merge_logs(logs: List[List[Tuple[int, str]]]) -> List[Tuple[int, str]]: ``` **Input:** - `logs`: A list of `n` log files, where 1 ≤ n ≤ 1000. - Each log file is a list of `m` events, where 1 ≤ m ≤ 1000. - Each event is represented as a tuple `(timestamp, description)`. - Timestamps are non-negative integers, and descriptions are non-empty strings consisting of alphabetical characters and spaces. **Output:** - A single list of events, sorted by timestamp. - Events with the same timestamp should appear in the output in the order they were provided in the input. **Examples:** Example 1: ```python logs = [ [(2, \\"CPU Load High\\"), (5, \\"Disk Full\\")], [(1, \\"Network Error\\"), (3, \\"CPU Load Normal\\")] ] print(merge_logs(logs)) ``` Output: ``` [(1, \\"Network Error\\"), (2, \\"CPU Load High\\"), (3, \\"CPU Load Normal\\"), (5, \\"Disk Full\\")] ``` Example 2: ```python logs = [ [(0, \\"System Start\\")], [(1, \\"User Login\\"), (1, \\"User Logout\\")], [(2, \\"System Shutdown\\")] ] print(merge_logs(logs)) ``` Output: ``` [(0, \\"System Start\\"), (1, \\"User Login\\"), (1, \\"User Logout\\"), (2, \\"System Shutdown\\")] ``` **Explanation:** - In the first example, the merged logs are sorted by timestamp. - In the second example, the events with the same timestamp (1) are kept in the order they appeared in the input. Use this function to help John process his log files efficiently and maintain a correct timeline of events.","solution":"from typing import List, Tuple def merge_logs(logs: List[List[Tuple[int, str]]]) -> List[Tuple[int, str]]: merged_logs = [] # Flatten the list of log files into a single list of events for log in logs: merged_logs.extend(log) # Sort the merged list of events by timestamp merged_logs.sort(key=lambda x: x[0]) return merged_logs"},{"question":"A research lab is testing the efficiency of various algorithms with arrays. After running multiple experiments, they focus on a specific task: finding subarrays with zero sum. A subarray is defined as a contiguous portion of an array. You are provided an array of integers and need to identify if there exists any subarray whose elements sum up to zero. If such a subarray exists, output \\"Yes\\", otherwise output \\"No\\". --- Input --- The first line of the input consists of a single integer \'t\', representing the number of test cases (1 ≤ t ≤ 10). For each test case: - The first line contains a single integer \'n\', representing the length of the array (1 ≤ n ≤ 100,000). - The second line contains \'n\' space-separated integers a[i] (-10^9 ≤ a[i] ≤ 10^9), representing the elements of the array. --- Output --- For each test case, print \\"Yes\\" if there exists a subarray with zero sum, otherwise print \\"No\\". --- Examples --- Input: 2 5 4 2 -3 1 6 4 -3 1 2 -3 Output: Yes Yes --- Note --- In the first example, there is a subarray with zero sum: [2, -3, 1]. In the second example, the whole array sums up to zero: [-3, 1, 2, -3].","solution":"def has_zero_sum_subarray(arr): Determines if there exists a subarray with zero sum. Parameters: arr (list): List of integers. Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\". prefix_sum = set() current_sum = 0 for num in arr: current_sum += num # If the prefix sum is zero or we have seen the prefix_sum before, # it means there is a subarray with sum zero if current_sum == 0 or current_sum in prefix_sum: return \\"Yes\\" # Add the prefix sum to the set prefix_sum.add(current_sum) return \\"No\\" def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list): List of test cases where each test case is a tuple (n, arr) Returns: list: List of results for each test case. results = [] for n, arr in test_cases: results.append(has_zero_sum_subarray(arr)) return results"},{"question":"Create a function that takes in two positive integers, `n` and `m`, where `n` represents the number of steps in a staircase, and `m` represents the maximum number of steps one can take at a time. The goal is to compute the number of distinct ways to reach the top of the staircase. You can assume that you always start from step 0. Input: - The first line of input contains two space-separated integers, `n` and `m`. Output: - The output contains one line with the number of distinct ways to reach the top. Constraints: - 1 <= n <= 1000 - 1 <= m <= 50 Example: Input: 4 2 Output: 5 Explanation: For a staircase of 4 steps with the ability to take 1 or 2 steps at a time, the possible ways to reach the top are: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps","solution":"def count_ways_to_reach_top(n, m): Returns the number of distinct ways to reach the top of a staircase with n steps, given that a person can take up to m steps at a time. if n == 0: return 1 # Array to store the number of ways to reach each step. ways = [0] * (n + 1) # Base case: There is one way to stay on the ground (step 0). ways[0] = 1 for i in range(1, n + 1): for j in range(1, m + 1): if i >= j: ways[i] += ways[i - j] return ways[n]"},{"question":"Given a string s and an integer k, find all distinct substrings of the string s of length k and return them as a list. The substrings should be returned in lexicographical order. Example 1: Input: s = \\"abcabc\\", k = 3 Output: [\\"abc\\", \\"bca\\", \\"cab\\"] Example 2: Input: s = \\"aaaaa\\", k = 2 Output: [\\"aa\\"] Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSubstrings() which takes s and k as inputs and returns a list of substrings. Expected Time Complexity: O(n * k * log(n)) (where n is the length of the string s) Expected Auxiliary Space: O(n * k) Constraints: 1 ≤ len(s) ≤ 10^5 1 ≤ k ≤ len(s)","solution":"def findSubstrings(s, k): Returns all distinct substrings of length k from the given string s in lexicographical order. # Create a set to store distinct substrings substrings = set() # Iterate through the string and add substrings of length k to the set for i in range(len(s) - k + 1): substring = s[i:i+k] substrings.add(substring) # Convert the set to a list and sort it in lexicographical order sorted_substrings = sorted(substrings) return sorted_substrings"},{"question":"Given a string containing only digits (\'0\' - \'9\'), your task is to determine the maximum number of contiguous substrings that have an equal number of even and odd digits. # Example 1: Input: \\"1234\\" Output: 2 Explanation: There are two possible contiguous substrings: \\"12\\" and \\"34\\" which both have 1 even and 1 odd digit. # Example 2: Input: \\"123456\\" Output: 3 Explanation: Possible substrings are \\"12\\", \\"34\\", and \\"56\\", each containing 1 even and 1 odd digit. # Example 3: Input: \\"13579\\" Output: 0 Explanation: There is no contiguous substring with an equal number of even and odd digits. # Example 4: Input: \\"246810\\" Output: 0 Explanation: All the digits are even. No possible contiguous substring with an equal number of even and odd digits. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxSubStrings` which takes a string `s` as input and returns the maximum number of contiguous substrings that have an equal number of even and odd digits. # Expected Time Complexity: O(n), where n is the length of the input string. # Expected Auxiliary Space: O(1) # Constraints: 1. 1 ≤ length of s ≤ 10^5","solution":"def maxSubStrings(s): Returns the maximum number of contiguous substrings that have an equal number of even and odd digits. even_count = 0 odd_count = 0 max_substrings = 0 for char in s: if int(char) % 2 == 0: even_count += 1 else: odd_count += 1 if even_count == odd_count: max_substrings += 1 return max_substrings"},{"question":"Given a positive integer `n`, write a function named `expand_number` that returns a list of strings representing the expanded form of the integer. Each string in the list should represent a component of the integer\'s expansion in decreasing order of magnitude. The function should handle up to three significant digits. # Detailed Description: 1. The integer `n` will be between 1 and 999 inclusive. 2. The expanded form of a number is the representation of the number as a sum of its place values. # Examples: ```python expand_number(345) #=> [\\"300\\", \\"40\\", \\"5\\"] expand_number(42) #=> [\\"40\\", \\"2\\"] expand_number(7) #=> [\\"7\\"] expand_number(250) #=> [\\"200\\", \\"50\\"] expand_number(105) #=> [\\"100\\", \\"5\\"] expand_number(800) #=> [\\"800\\"] expand_number(10) #=> [\\"10\\"] expand_number(9) #=> [\\"9\\"] ``` # Specifications: - Do not include zeros in the expanded form (e.g., `450` should be `[\\"400\\", \\"50\\"]` not `[\\"400\\", \\"50\\", \\"0\\"]`). - Ensure that the expanded form is returned in descending order of magnitude. # Note: - The input will always be a valid integer between 1 and 999. - Use simple string manipulation and arithmetic to achieve the results. # Function Signature: ```python def expand_number(n: int) -> List[str]: pass ``` # Test Cases: - `expand_number(345)` should return `[\\"300\\", \\"40\\", \\"5\\"]` - `expand_number(42)` should return `[\\"40\\", \\"2\\"]` - `expand_number(7)` should return `[\\"7\\"]` - `expand_number(250)` should return `[\\"200\\", \\"50\\"]` - `expand_number(105)` should return `[\\"100\\", \\"5\\"]` - `expand_number(800)` should return `[\\"800\\"]` - `expand_number(10)` should return `[\\"10\\"]` - `expand_number(9)` should return `[\\"9\\"]` You can write additional tests to ensure your implementation works correctly.","solution":"def expand_number(n): Returns the expanded form of the integer n as a list of strings. str_n = str(n) length = len(str_n) result = [] for i, digit in enumerate(str_n): if digit != \'0\': result.append(digit + \'0\' * (length - i - 1)) return result"},{"question":"A city is constructing a new park, which will have a series of connected pathways represented by an \'m x n\' grid. The city planner needs your help to calculate the number of distinct paths a person can take to travel from the northwest corner (top-left) of the park to the southeast corner (bottom-right). To make the park more accessible, pathways have been paved in such a way that a person can only move either right or down from any given cell. Write a function that computes the number of distinct paths from the top-left corner to the bottom-right corner of the grid. -----Input----- The function receives two integers m and n representing the number of rows and columns of the grid, respectively (1 ≤ m, n ≤ 100). -----Output----- Return the number of distinct paths from the northwest corner to the southeast corner of the grid. -----Examples----- Input: 3 7 Output: 28 Input: 3 2 Output: 3 Input: 7 3 Output: 28 Input: 1 1 Output: 1 -----Note----- In the first example, there are 28 distinct paths from the top-left corner to the bottom-right corner in a 3x7 grid. Each move must be right or down. In the second example, there are 3 distinct paths in a 3x2 grid. Each move must be right or down.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Create a 2D array (list of lists) for dynamic programming dp = [[1] * n for _ in range(m)] # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"A delivery drone service operates in a city with n warehouses. Each warehouse has a certain number of packages to deliver. The drone can carry a maximum of k packages in a single trip. The drone service receives m delivery requests from various customers. Each request specifies a starting warehouse si, an ending warehouse ti, and the number of packages pi they need to be delivered in one trip. For each request, the drone service needs to determine if it is possible to fulfill the request using the available drone that can carry up to k packages. If it is possible, assign a drone to the request and print \\"yes\\". Otherwise, print \\"no\\". In the beginning, the drone is located at warehouse 1 and must return to warehouse 1 after each trip. The service cannot split deliveries—each request must be completed in a single continuous trip without exceeding the drone\'s capacity. Input The first line contains the number of warehouses n (1 ≤ n ≤ 104) and the number of requests m (1 ≤ m ≤ 105). The second line contains n integers denoting the number of packages in each warehouse (1 ≤ packages ≤ 109). Then following m lines each contains three integers si, ti, and pi (1 ≤ si, ti ≤ n, 1 ≤ pi ≤ 109). Output For each request, output \\"yes\\" if the delivery can be accomplished within the constraints, otherwise \\"no\\". Example Input 5 4 10 15 20 25 30 1 3 10 4 2 5 5 5 30 2 3 25 Output yes yes yes no","solution":"def can_fulfill_requests(n, m, packages, requests, k): results = [] for si, ti, pi in requests: if pi <= k and packages[si-1] >= pi: results.append(\\"yes\\") packages[si-1] -= pi # Deduct the packages from the starting warehouse else: results.append(\\"no\\") return results"},{"question":"Write a function `is_zigzag` that determines whether a number is a \\"zigzag\\" number. A number is a zigzag number if its digits alternate between increasing and decreasing throughout. For instance, 121, 132, 2143, and 232 are zigzag numbers, while 123, 321, and 1111 are not. The input will be a single non-negative integer. Your function should return `True` if the number is a zigzag number, and `False` otherwise. Note that single-digit numbers are trivially considered to be zigzag numbers. For example: ```python is_zigzag(121) == True is_zigzag(132) == True is_zigzag(2143) == True is_zigzag(232) == True is_zigzag(123) == False is_zigzag(321) == False is_zigzag(1111) == False ``` Here is a skeleton of the `is_zigzag` function in Python: ```python def is_zigzag(number: # Convert the number to a string to easily access each digit str_num = str(number) # Special case for single digit number if len(str_num) == 1: return True # Iterate through the digits and check the alternating pattern for i in range(1, len(str_num) - 1): prev_digit = int(str_num[i-1]) curr_digit = int(str_num[i]) next_digit = int(str_num[i+1]) if not ((prev_digit < curr_digit > next_digit) or (prev_digit > curr_digit < next_digit)): return False return True ``` Test the `is_zigzag` function with the provided examples and additional test cases you design to ensure the robustness of the implementation.","solution":"def is_zigzag(number): Determine if the number is a zigzag number. A zigzag number\'s digits alternate between increasing and decreasing. # Convert the number to a string to easily access each digit str_num = str(number) # Special case for single digit number if len(str_num) == 1: return True # Iterate through the digits and check the alternating pattern for i in range(1, len(str_num) - 1): prev_digit = int(str_num[i-1]) curr_digit = int(str_num[i]) next_digit = int(str_num[i+1]) if not ((prev_digit < curr_digit > next_digit) or (prev_digit > curr_digit < next_digit)): return False return True"},{"question":"You are given N pairs of strings (s_i, t_i) each containing lowercase English letters. Your task is to determine if it is possible to reassign the letters of the alphabet such that for each pair (s_i, t_i), s_i can be transformed into t_i by replacing each letter in s_i with some other letter of the alphabet. Each letter must map to exactly one other letter, and no two different letters may map to the same letter. -----Constraints----- - 1 leq N leq 100 - 1 leq |s_i|, |t_i| leq 100 - Each string consists of lowercase English letters only. - For each pair (s_i, t_i), |s_i| = |t_i| -----Input----- Input is given from Standard Input in the following format: N s_1 t_1 s_2 t_2 . . . s_N t_N -----Output----- Print \\"YES\\" if it is possible to reassign the letters for all pairs (s_i, t_i) from s_i to t_i. Otherwise, print \\"NO\\". -----Sample Input----- 3 abc bcd foo bar abe def -----Sample Output----- NO In the given sample, the second pair \\"foo\\" to \\"bar\\" cannot be transformed because \'o\' would need to map to both \'a\' and \'r\', which is impossible. Therefore, the output is \\"NO\\".","solution":"def can_reassign_letters(N, pairs): Determine if it is possible to reassign the letters of the alphabet such that for each pair (s_i, t_i), s_i can be transformed into t_i. :param N: Number of string pairs :param pairs: List of tuple pairs (s_i, t_i) :returns: \\"YES\\" if transformation is possible for all pairs, otherwise \\"NO\\" for s, t in pairs: if len(s) != len(t): return \\"NO\\" # Check mapping from s to t mapping_st = {} mapping_ts = {} for si, ti in zip(s, t): if si in mapping_st and mapping_st[si] != ti: return \\"NO\\" if ti in mapping_ts and mapping_ts[ti] != si: return \\"NO\\" mapping_st[si] = ti mapping_ts[ti] = si return \\"YES\\""},{"question":"Alicia is an avid gardener and has a variety of plants in her garden. Unfortunately, she has a strict schedule and can only water her plants once a day. Additionally, each type of plant in her garden has specific watering needs represented by an integer array `plants`, where each element represents the amount of water required by that plant. Alicia also has a watering can with a limited capacity, which is represented by an integer `capacity`. She starts at the beginning of the array and can water the plants in the given order until the can runs out of water. When the can runs out of water, she has to return to the starting point to refill it. Alicia wants to know the minimum number of refills she needs to water all her plants. You need to help Alicia by writing a function that determines the minimum number of times she needs to refill the watering can to water all the plants. Input The function has two parameters: 1. `plants`: an array of integers representing the amount of water each plant needs. 2. `capacity`: an integer representing the capacity of the watering can. Output Return an integer representing the minimum number of refills required. Constraints - 1 ≤ length of `plants` array ≤ 10^4 - 1 ≤ `plants[i]` ≤ 10^4 - 1 ≤ `capacity` ≤ 10^4 Example ``` Input: plants = [2, 4, 5, 1, 2] capacity = 6 Output: 2 Explanation: Start with a full can (6 units of water): - Water plant 0 (2 units left) - Water plant 1 (0 units left, refill) - Water plant 2 (1 unit left) - Return and refill - Water plant 3 (0 units left, refill) - Water plant 4 (4 units left) Overall, we need to refill 2 times. ```","solution":"def min_refills(plants, capacity): refills = 0 current_capacity = capacity for i in range(len(plants)): if plants[i] > current_capacity: refills += 1 current_capacity = capacity current_capacity -= plants[i] return refills"},{"question":"Henry has been given a task to distribute candies among a group of kids. He has N candies in total, and each candy has a sweetness level denoted by an integer. He wants to distribute exactly K candies such that the difference between the maximum sweetness and minimum sweetness in that distribution is minimized. You need to help Henry find out the minimum possible difference between the maximum and the minimum sweetness levels of the K candies he can distribute. Input: The first line of input contains two integers, N (the number of candies) and K (the number of candies to distribute). The second line contains N integers, where each integer denotes the sweetness level of each candy. Output: The output should be a single integer, the minimum possible difference between the maximum and minimum sweetness levels of the K candies. Constraints: 1 ≤ K ≤ N ≤ 10^5 1 ≤ sweetness level ≤ 10^9 SAMPLE INPUT 7 3 10 100 300 200 1000 20 30 SAMPLE OUTPUT 20 Explanation The minimum possible difference is achieved by selecting the candies with sweetness levels [10, 20, 30]. The maximum sweetness level among these is 30, and the minimum sweetness level is 10, thus the difference is 30 - 10 = 20.","solution":"def min_sweetness_difference(N, K, sweetness): Returns the minimum possible difference between the maximum and minimum sweetness levels of the K candies. sweetness.sort() min_diff = float(\'inf\') for i in range(N - K + 1): current_diff = sweetness[i + K - 1] - sweetness[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Bagha has a new assignment, where he has to help organize books in the library. The library has N books positioned in a line, each book being represented by an integer which denotes its thickness. The task is to arrange these books in such a way that the total thickness of books on odd positions (1st, 3rd, 5th, ...) is as close as possible to the total thickness of books on even positions (2nd, 4th, 6th, ...). Given an array of integers representing the books, Bagha needs to determine if it is possible to rearrange the array such that the absolute difference between the total thickness of books on odd and even positions is minimized. Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T lines starts with an integer N, representing the number of books, followed by N integers representing the thickness of the books. Output Format: - For each test case, print the minimum absolute difference possible between the total thickness of books at odd positions and even positions. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ thickness of each book ≤ 1000 SAMPLE INPUT 2 4 1 2 3 4 3 3 1 2 SAMPLE OUTPUT 0 0 Explanation: For the first test case, one possible arrangement is [1, 3, 2, 4], which gives the total thickness on odd positions (1 + 2 = 3) and on even positions (3 + 4 = 7). The absolute difference is 4. However, another possible arrangement is [1, 4, 2, 3], which gives the total thickness on odd positions (1 + 2 = 3) and on even positions (4 + 3 = 7). The absolute difference is hence minimized to 0. For the second test case, one possible arrangement is [3, 1, 2], which already minimizes the difference as the total thickness on odd positions (3 + 2 = 5) and on even positions (1) being 0.","solution":"def min_abs_diff_between_odd_even_positions(test_cases): def subset_sum(nums, n, half_sum): dp = [0] * (half_sum + 1) for num in nums: for j in range(half_sum, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return dp[half_sum] results = [] for case in test_cases: N, books = case[0], case[1:] total_sum = sum(books) half_sum = total_sum // 2 closest_sum = subset_sum(books, N, half_sum) min_diff = total_sum - 2 * closest_sum results.append(min_diff) return results def process_input_output(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) books = list(map(int, data[index+1:index+N+1])) test_cases.append([N] + books) index += N + 1 results = min_abs_diff_between_odd_even_positions(test_cases) for result in results: print(result)"},{"question":"Sum of Cubes Given two integers X and Y, compute the sum of their cubes, X^3 + Y^3. Input Two integers X and Y separated by a space character are given in a line. Output Print the sum of the cubes in a line. Constraints * -1 times 10^{3} leq X, Y leq 10^{3} Sample Input 1 2 3 Sample Output 1 35 Sample Input 2 -1 1 Sample Output 2 0 Sample Input 3 0 4 Sample Output 3 64 Sample Input 4 -7 -1 Sample Output 4 -344 Example Input 2 3 Output 35","solution":"def sum_of_cubes(x, y): Returns the sum of the cubes of x and y. return x**3 + y**3"},{"question":"Write a function that processes a list of transactions and computes the final account balance for each user. * The function should take one parameter: a list of tuples. Each tuple contains three elements: a string representing the name of the user performing the transaction, a string indicating the type of the transaction (either \'deposit\' or \'withdraw\'), and a positive number representing the amount of the transaction. * The function should return an object/dict where each key is the user\'s name and the corresponding value is the final balance of that user. **Further points:** * If a user withdraws more than their current balance, the balance should not drop below zero (i.e., no overdrafts allowed). * If a user has not performed any transactions, they should not appear in the result. * If value is a decimal, round to two decimal places. # Example A list of transactions: [(\\"Alice\\", \\"deposit\\", 100), (\\"Bob\\", \\"deposit\\", 50), (\\"Alice\\", \\"withdraw\\", 30), (\\"Bob\\", \\"withdraw\\", 10)] should return {\'Alice\': 70.00, \'Bob\': 40.00}.","solution":"def process_transactions(transactions): Processes a list of transactions and computes the final account balance for each user. Parameters: transactions (list of tuple): A list of tuples where each tuple contains a string representing the name of the user, a string indicating the type of transaction, and a positive number representing the amount of the transaction. Returns: dict: A dictionary where each key is a user\'s name and the corresponding value is the final balance of that user. account_balances = {} for name, trans_type, amount in transactions: if name not in account_balances: account_balances[name] = 0 if trans_type == \'deposit\': account_balances[name] += amount elif trans_type == \'withdraw\': account_balances[name] -= amount if account_balances[name] < 0: account_balances[name] = 0 # Round balances to two decimal places for user in account_balances: account_balances[user] = round(account_balances[user], 2) return account_balances"},{"question":"Sam is designing a parking system for a mall and wants to write a program to manage the parking lot. The parking lot has a fixed number of spots available. The parking events that can occur are as follows: Arrival * A car enters the parking lot. * If there is an available spot, the car takes the spot. * If the parking lot is full, the car is turned away. * Each arrival event indicates the time and the car\'s license plate. Departure * A car leaves the parking lot. * The spot becomes available for another car. * Each departure event indicates the time and the car\'s license plate. The parking system needs to answer the following queries: Is a car (identified by its license plate) in the parking lot at a specific time? Write a program which processes events and answers queries about the parking lot. Input - The first line contains two integers: the number of parking spots, S, and the number of events, E. - Each of the next E lines contains an event (\\"ARRIVAL\\" or \\"DEPARTURE\\"), the time (an integer), and the car\'s license plate (a string). - The final line contains a license plate (a string) and a query time (an integer). Output - Output \\"Yes\\" if the queried car is in the parking lot at the queried time, otherwise output \\"No\\". Example Input 3 7 ARRIVAL 1 ABC123 ARRIVAL 2 XYZ789 ARRIVAL 3 DEF456 DEPARTURE 4 ABC123 ARRIVAL 5 GHI101 DEPARTURE 6 XYZ789 ARRIVAL 7 JKL202 DEF456 5 Output Yes","solution":"def parking_system(S, E, events, query): current_cars = {} parked_cars = set() spots = 0 for event in events: action, time, license_plate = event if action == \\"ARRIVAL\\": if spots < S: current_cars[license_plate] = time parked_cars.add(license_plate) spots += 1 elif action == \\"DEPARTURE\\": if license_plate in parked_cars: del current_cars[license_plate] parked_cars.remove(license_plate) spots -= 1 query_license_plate, query_time = query if query_license_plate in current_cars and current_cars[query_license_plate] <= query_time: return \\"Yes\\" return \\"No\\" # Example Input S = 3 E = 7 events = [ (\\"ARRIVAL\\", 1, \\"ABC123\\"), (\\"ARRIVAL\\", 2, \\"XYZ789\\"), (\\"ARRIVAL\\", 3, \\"DEF456\\"), (\\"DEPARTURE\\", 4, \\"ABC123\\"), (\\"ARRIVAL\\", 5, \\"GHI101\\"), (\\"DEPARTURE\\", 6, \\"XYZ789\\"), (\\"ARRIVAL\\", 7, \\"JKL202\\") ] query = (\\"DEF456\\", 5) print(parking_system(S, E, events, query)) # Output: \\"Yes\\""},{"question":"Write a function that determines the minimum number of steps required to transform one string into another string using a specific set of operations. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character Given two strings `str1` and `str2`, implement the function `minStepsToConvert(str1, str2)` to return the minimum number of operations needed to transform `str1` into `str2`. Example 1: Input: str1 = \\"kitten\\", str2 = \\"sitting\\" Output: 3 Explanation: kitten -> sitten (replace \'k\' with \'s\') sitten -> sittin (replace \'e\' with \'i\') sittin -> sitting (insert \'g\') Example 2: Input: str1 = \\"flaw\\", str2 = \\"lawn\\" Output: 2 Explanation: flaw -> law (delete \'f\') law -> lawn (insert \'n\') Your Task: You do not need to read input or print anything. Complete the function `minStepsToConvert()` that takes `str1` and `str2` as inputs and returns the minimum number of steps. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 <= length of str1, str2 <= 100","solution":"def minStepsToConvert(str1, str2): Returns the minimum number of steps required to transform str1 into str2 using the given set of operations (insert, delete, replace). # Length of the input strings n = len(str1) m = len(str2) # Initialize a table to store the results of subproblems dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp array for i in range(n + 1): for j in range(m + 1): # If str1 is empty, one option: insert all characters of str2 if i == 0: dp[i][j] = j # If str2 is empty, one option: remove all characters from str1 elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last char # and recur for the remaining substring elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace # The last cell of dp array contains the answer return dp[n][m]"},{"question":"Write a function that takes a list of integers and a target sum as inputs, and returns all unique pairs of integers from the list that add up to the target sum. The pairs should be in ascending order based on their first element. If multiple pairs have the same first element, order them by the second element. Input The first line contains an integer N, the number of integers in the list (1 ≤ N ≤ 100). The second line contains N integers representing the elements of the list (-1000 ≤ element ≤ 1000). The third line contains an integer T, the target sum (-2000 ≤ T ≤ 2000). Output Output all unique pairs of integers from the list that add up to the target sum. Each pair should be printed on a new line, with the integers in each pair separated by a space. If no pairs are found, output a single line with the text \\"No pairs found\\". Example Input 6 1 2 3 4 5 6 7 Output 1 6 2 5 3 4","solution":"def find_pairs(nums, target): Returns unique pairs of integers from the list that add up to the target sum. Each pair is in ascending order and unique. nums = sorted(nums) seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) if not pairs: return [\\"No pairs found\\"] return sorted(pairs)"},{"question":"Hannah loves digital photos and wants to organize them for an online album. However, each photo\'s aspect ratio must be adjusted to match the album\'s standard format, ensuring that no part of a photo is cut off and everything fits neatly within the frame. This requires resizing the photos while maintaining their original aspect ratios. Given a list of photos along with their original dimensions, and the album\'s standard frame dimensions, your task is to calculate the dimensions of each photo after resizing it to fit within the frame. The photos should be resized such that they completely fit within the album\'s standard frame. The aspect ratio of each photo must be preserved during resizing, which means that if a photo\'s original dimensions are `W x H`, it must be scaled to fit inside the album\'s frame without exceeding its width or height, and without leaving any part of the photo outside the frame. Input The first line of input consists of two integers, W_f and H_f (1 ≤ W_f, H_f ≤ 10^4), representing the width and height of the album\'s frame respectively. The second line contains an integer n (1 ≤ n ≤ 10^3), representing the number of photos. The next n lines each contain two integers W_i and H_i (1 ≤ W_i, H_i ≤ 10^4), representing the width and height of each photo respectively. Output Output n pairs of integers, one for each photo, representing the dimensions (width and height) of the photo after resizing it to fit within the album\'s frame. Examples Input: 800 600 3 1600 1200 800 800 640 480 Output: 800 600 600 600 800 600 Input: 1024 768 2 1536 1152 1024 2048 Output: 1024 768 384 768","solution":"def resize_photos(frame_width, frame_height, photos): resized_photos = [] for original_width, original_height in photos: width_ratio = frame_width / original_width height_ratio = frame_height / original_height scaling_factor = min(width_ratio, height_ratio) new_width = int(original_width * scaling_factor) new_height = int(original_height * scaling_factor) resized_photos.append((new_width, new_height)) return resized_photos # Sample usage: frame_width = 800 frame_height = 600 photos = [ (1600, 1200), (800, 800), (640, 480) ] print(resize_photos(frame_width, frame_height, photos)) # Output should be: [(800, 600), (600, 600), (800, 600)]"},{"question":"Compute the number of paths in an MxN grid where you can only move right or down. You have to print the result modulo 1000000007. **Input:** First line contains, T, the number of test cases. Each test case consists of two ints M and N indicating the dimensions of the grid. **Output:** Print the number of distinct paths possible for each test case in one line. **Constraints:** 1 ≤ T ≤ 1000 1 ≤ M, N ≤ 1000 **Sample Input:** 2 2 2 3 3 **Sample Output:** 2 6 **Explanation** Here is the explanation for the test case: - First Test Case: Grid of size 2x2. There are 2 distinct paths possible to reach from top-left to bottom-right: 1. Right → Down 2. Down → Right - Second Test Case: Grid of size 3x3. The number of distinct paths possible to reach from top-left to bottom-right is 6.","solution":"def number_of_paths(m, n): MOD = 1000000007 if m == 1 or n == 1: return 1 paths = [[0 for _ in range(n)] for _ in range(m)] # Filling the first column for i in range(m): paths[i][0] = 1 # Filling the first row for j in range(n): paths[0][j] = 1 for i in range(1, m): for j in range(1, n): paths[i][j] = (paths[i-1][j] + paths[i][j-1]) % MOD return paths[m-1][n-1] def grid_paths(T, dimensions): results = [] for dim in dimensions: m, n = dim results.append(number_of_paths(m, n)) return results"},{"question":"The estimating company, Accurate Estimations, needs a program that helps to calculate the number of distinct ways you can climb a staircase. Each time you can climb either 1 or 2 steps. For instance, if the staircase has 4 steps, there are 5 ways to climb to the top (1-1-1-1, 1-1-2, 1-2-1, 2-1-1, 2-2). Input The first line will contain an integer t (1 ≤ t ≤ 10^5) denoting the number of test cases. Each of the next t lines will contain a single integer n (1 ≤ n ≤ 10^5) representing the number of steps in the staircase. Output For each test case, output the number of distinct ways to reach the top of the staircase with n steps. Note: Optimize your solution to run within reasonable time limits. SAMPLE INPUT 3 2 3 4 SAMPLE OUTPUT 2 3 5 Explanation: For 2 steps, there are two ways: (1, 1) and (2). For 3 steps, there are three ways: (1, 1, 1), (1, 2), (2, 1). For 4 steps, there are five ways: (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (2, 1, 1), (2, 2).","solution":"def count_ways(n): Returns the number of distinct ways to reach the top of a staircase with n steps. Each time you can climb either 1 or 2 steps. if n <= 2: return n # Use dynamic programming to build up the solution to n steps dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def solve(t, cases): Handle multiple test cases. t: number of test cases cases: list of integers where each integer denotes the number of steps in the staircase results = [] for n in cases: results.append(count_ways(n)) return results"},{"question":"Given a set of bank accounts consisting of balances, you are to determine which accounts have the highest balances and to sort them for reporting. Each account in the set is represented by a unique account number and a balance. Your task is to identify the k accounts with the highest balances and return them sorted in descending order of their balances. If multiple accounts have the same balance, they should be sorted by their account numbers in ascending order. Input The first input line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The next n lines each contain an integer (0 ≤ balance ≤ 10^9) followed by a unique twelve-character alphanumeric string (a-z, A-Z, 0-9) representing the account number. Output Print the k accounts with the highest balances, each on a new line, formatted as the balance followed by the account number. Each account should be printed on its own line, and the accounts should be sorted by balance in descending order. In the case of ties with equal balances, sort by account number in ascending order. Example Input 5 3 1000 A12345678901 2000 B12345678902 1500 C12345678903 2000 D12345678904 1000 E12345678905 Output 2000 B12345678902 2000 D12345678904 1500 C12345678903 Input 4 2 3000 X12345678906 3000 Y12345678907 3000 Z12345678908 1000 W12345678909 Output 3000 X12345678906 3000 Y12345678907","solution":"from typing import List, Tuple def get_highest_balances(accounts: List[Tuple[int, str]], k: int) -> List[Tuple[int, str]]: Returns the k accounts with the highest balances sorted by balance in descending order. If balances are equal, sorts by account number in ascending order. # Sorting the accounts: first by balance in descending order, then by account number in ascending order sorted_accounts = sorted(accounts, key=lambda x: (-x[0], x[1])) return sorted_accounts[:k]"},{"question":"Dr. Jasmine, the renowned biologist, is studying a peculiar type of bacteria that evolve in specific ways within a rectangular petri dish which is a grid of size n rows and m columns. Each cell in this grid can either be empty or contain a bacterium. When a bacterium evolves, it either replicates into a neighboring empty cell or remains stationary. The bacteria can only move to the four orthogonal (up, down, left, right) neighboring cells. The experiment starts with an initial configuration where some of the cells contain bacteria, and the remainder are empty. Dr. Jasmine would like to determine the minimum number of steps needed for all the bacteria to either replicate or reach every empty cell in the petri dish. If it\'s impossible for the bacteria to fully spread, she needs to know that as well. Write a program that determines the minimum number of steps needed for the bacteria to spread to every cell, or output -1 if it is not possible. Input The first line of input contains two integers n (2 ≤ n ≤ 1000) and m (2 ≤ m ≤ 1000), the grid dimensions of the petri dish. The following n lines each contain m characters: \'.\' representing an empty cell and \'B\' representing a cell containing a bacterium. Output Output the minimum number of steps needed for the bacteria to spread to all cells, or -1 if it is not possible. Examples Input 3 4 B... .... .B.. Output 3 Input 2 2 B. .B Output 1","solution":"from collections import deque def min_steps_to_spread_bacteria(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() visited = [[False] * m for _ in range(n)] # Initialize the queue with bacteria locations and set visited for i in range(n): for j in range(m): if grid[i][j] == \'B\': queue.append((i, j, 0)) visited[i][j] = True max_steps = 0 while queue: x, y, steps = queue.popleft() max_steps = max(max_steps, steps) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited[nx][ny] = True # Check if there are still empty cells for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: return -1 return max_steps"},{"question":"Given a string composed of lowercase English letters, your task is to determine whether the string can be rearranged to form a palindrome. If it\'s possible, output \\"YES\\"; otherwise, output \\"NO\\". A string can be rearranged to form a palindrome if at most one character has an odd frequency count, allowing it to be the middle character in the palindromic sequence, while all other characters would have even frequency counts to mirror each other around the center. # Input - A single line containing the string ( s ) with 1 to ( 10^5 ) lowercase English letters. # Output - A single line containing either \\"YES\\" or \\"NO\\". # Example Input: ``` civic ``` Output: ``` YES ``` Input: ``` ivicc ``` Output: ``` YES ``` Input: ``` hello ``` Output: ``` NO ```","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a string S consisting of lowercase alphabetical characters. You need to check if the string is a palindrome. A palindrome is a string that reads the same forward and backward. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, output \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^4 ------ Sample Input 1 ------ 3 racecar hello noon ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test Case 1: The string \\"racecar\\" reads the same forward and backward, so the output is \\"YES\\". Test Case 2: The string \\"hello\\" does not read the same forward and backward, so the output is \\"NO\\". Test Case 3: The string \\"noon\\" reads the same forward and backward, so the output is \\"YES\\".","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. return s == s[::-1] def check_palindromes(test_cases): For each test case string in test_cases, check if it is a palindrome and return the results. results = [] for s in test_cases: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program that checks if a given year is a leap year or not and outputs the number of days in February of that year. -----Input----- The input contains a single positive integer Y (year). The value of Y will be a valid year (e.g., 1980, 2000, 2023). -----Output----- Output the number of days in February of year Y. The output should be either 28 or 29. -----Examples----- Sample Input 1: 2000 Sample Output 1: 29 Sample Input 2: 1900 Sample Output 2: 28","solution":"def days_in_february(year): Returns the number of days in February of the given year. if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0): return 29 else: return 28"},{"question":"You are given n switches in a row. Each switch can be in one of three states: ON, OFF, or UNKNOWN. The switches are interconnected in such a way that if a switch is toggled ON or OFF, the directly adjacent switches are also influenced based on a given rule. The rules for state changes are as follows: - If a switch is toggled ON, the state of the adjacent switches remains the same. - If a switch is toggled OFF, the state of the adjacent switches is flipped (ON becomes OFF and OFF becomes ON). You need to determine the number of valid ways to set the UNKNOWN switches to either ON or OFF such that all the switches are properly configured. As this number can be very large, output it modulo 1,000,000,007. -----Input----- The first line of the input contains a single integer n (1 le n le 10^5) — the number of switches. The second line contains a string of length n consisting of characters \'1\', \'0\', and \'?\' where: - \'1\' represents a switch that is ON, - \'0\' represents a switch that is OFF, - \'?\' represents an UNKNOWN switch. -----Output----- Print a single integer — the answer to the problem. -----Examples----- Input 3 1?0 Output 4 Input 4 0??? Output 8 Input 5 ??1?? Output 16 -----Note----- In the first test case, there are 4 valid ways to fill the UNKNOWN switch: - 1ON0 - 1ON1 - 1OFF0 - 1OFF1 In the second test case, there are 8 valid configurations of the 3 UNKNOWN switches while ensuring the connectivity rules are adhered to. In the third test case, there are 16 valid configurations for the 4 UNKNOWN switches.","solution":"MOD = 1_000_000_007 def num_valid_switch_configurations(n, switches): Returns the number of valid switch configurations modulo 1,000,000,007. :param n: Number of switches :param switches: String representing the switch states (\'1\' for ON, \'0\' for OFF, \'?\' for UNKNOWN) :return: Number of valid ways to configure UNKNOWN switches count_unknowns = switches.count(\'?\') # Each \'?\' can be either \'0\' or \'1\', hence 2^count_unknowns configurations. return pow(2, count_unknowns, MOD)"},{"question":"Write a function that simulates a basic banking system by supporting operations such as deposit, withdrawal, and balance inquiry. The system should maintain a single account with an initial balance of 0. Your task is to implement the following operations: 1. **Deposit**: Add a specific amount to the current balance. 2. **Withdraw**: Subtract a specific amount from the current balance if sufficient funds are available; otherwise, print \\"Insufficient funds\\". 3. **Balance Inquiry**: Print the current balance of the account. The operations will be provided as a sequence of commands, where each command specifies the type of operation and the amount (for deposit and withdrawal operations). # Input The first line of input contains an integer `T`, the number of test cases. Each of the following `T` lines contains a command in one of the following formats: - `deposit <amount>`: Adds the specified amount to the current balance. - `withdraw <amount>`: Subtracts the specified amount from the current balance if possible. - `balance`: Displays the current balance. # Output For each test case: - If the command is `balance`, output the current balance. - If the command is `withdraw` and there are insufficient funds, output \\"Insufficient funds\\". # Example Input: ``` 6 deposit 1000 balance withdraw 500 balance withdraw 600 balance ``` Output: ``` 1000 500 Insufficient funds 500 ``` # Explanation - The first command deposits 1000 units into the account. - The second command displays the current balance, which is 1000. - The third command withdraws 500 units, leaving a balance of 500. - The fourth command displays the current balance, which is 500. - The fifth command attempts to withdraw 600 units, but the balance is insufficient, hence \\"Insufficient funds\\" is printed. - The sixth command displays the current balance, which remains 500.","solution":"class BasicBankingSystem: def __init__(self): self.balance = 0 def deposit(self, amount): self.balance += amount def withdraw(self, amount): if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") def balance_inquiry(self): print(self.balance) def process_commands(commands): bank_system = BasicBankingSystem() for command in commands: parts = command.split() if parts[0] == \\"deposit\\": bank_system.deposit(int(parts[1])) elif parts[0] == \\"withdraw\\": bank_system.withdraw(int(parts[1])) elif parts[0] == \\"balance\\": bank_system.balance_inquiry()"},{"question":"You are given an array of integers nums, representing a sequence of scores. Your task is to find the length of the longest subsequence of nums that contains no numbers from a specified set of \\"banned\\" numbers. A subsequence is derived from an array by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: nums = [4, 3, 2, 1, 4, 3, 2, 1] banned = [3, 4] Output: 4 Explanation: The longest subsequence without 3 or 4 is [2, 1, 2, 1] which has the length of 4. Example 2: Input: nums = [1, 2, 3, 4, 5, 6] banned = [7, 8, 9] Output: 6 Explanation: There are no \\"banned\\" numbers in the array, so the entire array is the longest subsequence, with a length of 6. Example 3: Input: nums = [5, 6, 7, 8, 9, 10] banned = [5, 6, 7] Output: 3 Explanation: The longest subsequence without 5, 6, or 7 is [8, 9, 10], which has a length of 3. Your Task: You need not take any input or print anything. Your task is to complete the function longestValidSubsequence() which takes a list of integers nums and a list of integers banned as input parameters and returns the length of the longest subsequence that does not contain any \\"banned\\" numbers. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: - 1 ≤ len(nums) ≤ 10^5 - -10^9 ≤ nums[i] ≤ 10^9 - -10^9 ≤ banned[i] ≤ 10^9 - 1 ≤ len(banned) ≤ 10^5","solution":"def longestValidSubsequence(nums, banned): Returns the length of the longest subsequence that does not contain any banned numbers. banned_set = set(banned) longest_length = 0 for num in nums: if num not in banned_set: longest_length += 1 return longest_length"},{"question":"You are tasked with designing a scheduling system for a series of talks at a conference. Each talk is given by a keynote speaker, and there should be no overlapping talks for a single keynote speaker. The conference provides you with a list of n talks. Each talk has a start time and an end time. The aim is to find the maximum number of non-overlapping talks that a single keynote speaker can attend. To simplify the problem, you can assume that the start and end times of the talks are given in 24-hour format and that the talks do not cross midnight. Also, the talks are not necessarily presented in any particular order. Input Format: - The first line contains an integer n, the number of talks. - The next n lines contain two space-separated integers representing the start and end times of each talk. Output Format: - Output a single integer, the maximum number of non-overlapping talks that can be attended by a keynote speaker. Constraints: 1 ≤ n ≤ 100 0 ≤ start time, end time < 24 start time < end time Sample Input 1: 3 1 3 2 4 3 5 Sample Output 1: 2 Sample Input 2: 4 5 9 1 3 3 8 4 6 Sample Output 2: 2 Explanation: 1. In the first example, the keynote speaker can attend the talk from 1 to 3 and then from 3 to 5 without any overlap. 2. In the second example, the optimal schedule would be to attend the talk from 1 to 3 and then the one from 5 to 9.","solution":"def max_non_overlapping_talks(n, talks): Returns the maximum number of non-overlapping talks that a single keynote speaker can attend. :param n: The number of talks :param talks: List of tuples (start_time, end_time) representing the talks :return: The maximum number of non-overlapping talks # Sort the talks by their end times talks.sort(key=lambda x: x[1]) max_talks = 0 last_end_time = 0 for start, end in talks: if start >= last_end_time: max_talks += 1 last_end_time = end return max_talks"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine if you can generate the string by concatenating one or more strings S\' such that S\' is a substring of another given string T. Write a program that decides whether it is possible to construct the string S using one or more repeated substrings of T. ------ Input Format ------ - First line will contain N, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains the string S. - The second line contains the string T. ------ Output Format ------ For each test case, output in a single line texttt{YES} if it is possible to construct S using substrings of T repeatedly, else output texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ |S|, |T| ≤ 1000 ------ Sample Input 1 ------ 3 ababab ab aaaaa aa abcdef def ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test Case 1: We can create S by repeating the substring \\"ab\\" from T three times. Test Case 2: We can create S by repeating the substring \\"aa\\" from T two and a half times, but it covers the whole string. Test Case 3: It is not possible to create S using any repeated substrings from T, as the required substring \\"abc\\" is not in T.","solution":"def can_construct_s(N, cases): results = [] for i in range(N): S = cases[i][0] T = cases[i][1] possible = False len_S = len(S) len_T = len(T) if len_S <= len_T: possible = S in T else: for j in range(1, len_T+1): if len_S % j == 0: construct = T[:j] * (len_S // j) if construct == S: possible = True break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"You are given N non-negative integers in an array. Your task is to find the sum of the digits of each integer and then output the integer that has the largest sum of digits. If there is a tie, return the smallest integer among them. ------ Input Format ------ The first line contains a single integer T, the number of test cases. T test cases follow. Each test case consists of two lines: - The first line of each test case contains a single integer N, the number of integers. - The second line contains N integers separated by spaces. ------ Output Format ------ The output must consist of T lines. The i^{th} line should contain a single integer: the number with the largest sum of digits from the i^{th} test case. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10 0 ≤ A_i ≤ 10^5 for all i, where A is the array of integers. ------ Sample Input 1 ------ 3 4 56 34 12 23 3 999 123 456 5 12 34 56 78 99 ------ Sample Output 1 ------ 56 999 99 ------ Explanation 1 ------ Test case 1: The sum of digits of 56 is 5+6=11, 34 is 3+4=7, 12 is 1+2=3, and 23 is 2+3=5. The largest sum is 11, thus the output is 56. Test case 2: The sum of digits of 999 is 9+9+9=27, 123 is 1+2+3=6, and 456 is 4+5+6=15. The largest sum is 27, thus the output is 999. Test case 3: The sum of digits of 12 is 1+2=3, 34 is 3+4=7, 56 is 5+6=11, 78 is 7+8=15 and 99 is 9+9=18. The largest sum is 18, thus the output is 99.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. return sum(int(digit) for digit in str(n)) def largest_digit_sum(arr): Returns the integer with the largest sum of digits from the array. In case of a tie, returns the smallest integer among them. return max(arr, key=lambda x: (sum_of_digits(x), -x)) def process_test_cases(T, test_cases): Processes multiple test cases to find the integers with the largest sum of digits. results = [] for case in test_cases: N, arr = case results.append(largest_digit_sum(arr)) return results"},{"question":"# Scenario A group of friends is organizing a coding competition and they want to rank participants based on their scores. The final ranking list should exclude any participant whose score is below a certain threshold, which is determined by the lowest score within the top `n` scores. ___ # Task **Given** a list of `participants` where each participant is represented by a tuple (name, score), and an integer `n`, **write a function** that returns a list of participant names who made it into the top `n` based on their scores. ___ # Notes - Each score is a non-negative integer. - The length of the participants\' list is between 1 and 200. - If multiple participants have the same score and that score is within the top `n`, they all are included in the final list. - The order of names in the output list should be preserved from the input list. ___ # Input >> Output Examples: ``` top_participants([(\\"Alice\\", 50), (\\"Bob\\", 75), (\\"Charlie\\", 100), (\\"David\\", 25)], 2) ==> return [\\"Bob\\", \\"Charlie\\"] ``` Explanation: Top 2 scores are 100 and 75. Therefore, the participants with scores 100 and 75 are in the list. ___ ``` top_participants([(\\"Edward\\", 30), (\\"Alice\\", 60), (\\"Bob\\", 60), (\\"Charlie\\", 45)], 3) ==> return [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] ``` Explanation: Top 3 scores are 60, 60, and 45. The participants who made it are Alice, Bob, and Charlie. ___ ``` top_participants([(\\"Zara\\", 95), (\\"Micheal\\", 55), (\\"Paul\\", 75)], 1) ==> return [\\"Zara\\"] ``` Explanation: Top 1 score is 95. Therefore, the participant with score 95 is in the list. ___","solution":"def top_participants(participants, n): Returns a list of participant names who made it into the top `n` scores. if not participants or n <= 0: return [] # Sort participants based on scores in descending order sorted_participants = sorted(participants, key=lambda p: p[1], reverse=True) top_n_score = sorted_participants[n-1][1] if n <= len(participants) else sorted_participants[-1][1] return [name for name, score in participants if score >= top_n_score]"},{"question":"You are managing a library system and need to categorize books based on their ISBN (International Standard Book Number). Write a function in your preferred programming language to validate if a given ISBN-10 number is correct. An ISBN-10 is a 10-digit number consisting of digits 0-9 and sometimes ends with an \'X\' which represents 10. The validity of an ISBN-10 is determined by the following formula: (1*digit1 + 2*digit2 + 3*digit3 + ... + 10*digit10) % 11 == 0 Write a function `is_valid_isbn(isbn)` that takes a string `isbn` and returns `True` if it\'s a valid ISBN-10 and `False` otherwise. # Example Usage: ```python print(is_valid_isbn(\\"0471958697\\")) # True print(is_valid_isbn(\\"123456789X\\")) # True print(is_valid_isbn(\\"0471958690\\")) # False ``` # Constraints: - The input string must be exactly 10 characters long. - The first 9 characters must be digits (0-9). - The last character can be a digit (0-9) or \'X\'. - The input must be case insensitive (\'x\' is considered as \'X\'). Make sure to handle edge cases such as incorrect length, invalid characters, and case sensitivity.","solution":"def is_valid_isbn(isbn): Returns True if the given ISBN-10 number is valid, False otherwise. if len(isbn) != 10: return False isbn = isbn.upper() if not isbn[:9].isdigit() or not (isbn[-1].isdigit() or isbn[-1] == \'X\'): return False total = 0 for i, char in enumerate(isbn): if char == \'X\': value = 10 else: value = int(char) total += (i + 1) * value return total % 11 == 0"},{"question":"A company organizes a coding competition where each participant is awarded points based on their rank. The point system is as follows: - First place receives 10 points - Second place receives 8 points - Third place receives 6 points - Fourth place receives 5 points - Fifth place receives 4 points - Sixth place receives 3 points - Seventh place receives 2 points - Eighth place receives 1 point - Ranks ninth and lower receive 0 points A participant, Alice, competed in two rounds of the competition. Her ranks in the first and second rounds are given as input. Determine the total points Alice received from both rounds. Constraints: * 1 ≤ R1 ≤ 205 * 1 ≤ R2 ≤ 205 * R1 and R2 are integers. Input: Input is given from Standard Input in the following format: R1 R2 Output: Print the total points Alice received, as an integer. Examples: Input 1 2 Output 18 Input 5 9 Output 4 Input 4 4 Output 10","solution":"def total_points(R1, R2): Returns the total points based on the ranks provided for two rounds. def points(rank): if rank == 1: return 10 elif rank == 2: return 8 elif rank == 3: return 6 elif rank == 4: return 5 elif rank == 5: return 4 elif rank == 6: return 3 elif rank == 7: return 2 elif rank == 8: return 1 else: return 0 return points(R1) + points(R2)"},{"question":"Given an array of integers nums, you need to find the product of all the elements in the array except itself and return the resulting array. Please note that the output for any element at index \'i\' should be the product of all elements in input array nums except nums[i]. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For each index in the array, multiply all elements except the one at that index. Example 2: Input: nums = [2, 5, 1, 6] Output: [30, 12, 60, 10] Explanation: For each index in the array, multiply all elements except the one at that index. Your Task: You don\'t need to read input or print anything. Complete the function productExceptSelf() which accepts an array of integers nums as input parameter and returns an array of integers where each element is the product of all the elements of nums except itself. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n), where n is the length of nums. Constraints: 1 <= nums.length <= 10^5 -30 <= nums[i] <= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def productExceptSelf(nums): Function to return an array where each element is the product of all the elements in the input array except the element at that index. length = len(nums) # Initialize arrays to store the left and right product for each element left = [0] * length right = [0] * length result = [0] * length # Left product for each element left[0] = 1 for i in range(1, length): left[i] = nums[i - 1] * left[i - 1] # Right product for each element right[length - 1] = 1 for j in range(length - 2, -1, -1): right[j] = nums[j + 1] * right[j + 1] # Result is the product of left and right product for each element for k in range(length): result[k] = left[k] * right[k] return result"},{"question":"A group of n friends are going to share k identical candies. Each friend must receive at least one candy. Determine the number of ways to distribute the candies. Input The input consists of two integers, n (1 ≤ n ≤ 100) and k (n ≤ k ≤ 100). Output Output a single integer representing the number of ways to distribute the candies so that each friend gets at least one candy. Examples Input 2 4 Output 3 Input 3 5 Output 6","solution":"import math def distribute_candies(n, k): Returns the number of ways to distribute k candies to n friends such that each friend gets at least one candy. if n > k: return 0 return math.comb(k-1, n-1)"},{"question":"**Implement** a function called sortAndRemoveDuplicates that takes an array of numbers as input and returns a new array that is sorted in ascending order and contains no duplicate values. The original array should not be modified. ``` sortAndRemoveDuplicates([3, 5, 2, 3, 8, 8]); // Should return [2, 3, 5, 8] sortAndRemoveDuplicates([10, 1, 10, 1, 5]); // Should return [1, 5, 10] sortAndRemoveDuplicates([1, 1, 1, 1, 1]); // Should return [1] sortAndRemoveDuplicates([]); // Should return [] sortAndRemoveDuplicates([0, -1, -1, 2, 3]); // Should return [-1, 0, 2, 3] ```","solution":"def sortAndRemoveDuplicates(arr): Takes an array of numbers as input and returns a new array that is sorted in ascending order and contains no duplicate values. return sorted(set(arr))"},{"question":"Imagine you have a collection of numbers, all of which are between 1 to 100, inclusive. You are allowed to select some of these numbers to create multiple sets, wherein each set has an equal sum. Your task is to determine if it is possible to partition the collection into exactly \'k\' non-empty subsets with equal sum. Write a function `can_partition_k_subsets(nums, k)` that takes in a list of integers `nums` and an integer `k`, representing the number of subsets. The function should return `True` if it is possible to partition the list into `k` non-empty subsets with equal sum, and `False` otherwise. -----Constraints----- - 1 ≤ len(nums) ≤ 16 - 1 ≤ k ≤ len(nums) - 1 ≤ nums[i] ≤ 100 -----Input----- - List of integers `nums` (representing the collection of numbers) - Integer `k` (representing the number of subsets) -----Output----- - Boolean value: `True` if the partition is possible, `False` otherwise -----Sample Input----- [4, 3, 2, 3, 5, 2, 1] 4 -----Sample Output----- True Explanation: It is possible to partition the list into 4 subsets with equal sums: [4, 1], [3, 2], [3, 2], and [5]. Each subset has a sum of 5. -----Sample Input----- [1, 2, 3, 4] 3 -----Sample Output----- False Explanation: It is not possible to partition the list into 3 subsets with equal sums.","solution":"from typing import List def can_partition_k_subsets(nums: List[int], k: int) -> bool: if sum(nums) % k != 0: return False target_sum = sum(nums) // k nums.sort(reverse=True) buckets = [0] * k def backtrack(index): if index == len(nums): return all(bucket == target_sum for bucket in buckets) for i in range(k): if buckets[i] + nums[index] > target_sum: continue buckets[i] += nums[index] if backtrack(index + 1): return True buckets[i] -= nums[index] if buckets[i] == 0: break return False return backtrack(0)"},{"question":"John is organizing a party and wants to buy exactly N cans of soda. The store only sells packs of 6 and 8 cans. Determine if it is possible to buy exactly N cans using the packs available. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". -----Constraints----- - N is an integer. - 1 leq N leq 100 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print \\"Yes\\" if it is possible to buy exactly N cans using the packs of 6 and 8. Otherwise, print \\"No\\". -----Sample Input----- 14 -----Sample Output----- Yes By buying one pack of 6 cans and one pack of 8 cans, John can get exactly 14 cans of soda. So the answer is “Yes”.","solution":"def can_buy_exactly_n_cans(N): Determines if it is possible to buy exactly N cans using packs of 6 and 8. Parameters: N (int): The number of cans John wants to buy. Returns: str: \\"Yes\\" if it is possible to buy exactly N cans, \\"No\\" otherwise. for i in range(N // 6 + 1): if (N - i * 6) % 8 == 0: return \\"Yes\\" return \\"No\\""},{"question":"Given a binary tree, the task is to check if the given binary tree is a symmetric tree. A binary tree is symmetric if it is a mirror of itself. Example 1: Input: 1 / 2 2 / / 3 4 4 3 Output: True Explanation: The given binary tree is symmetric. Example 2: Input: 1 / 2 2 3 3 Output: False Explanation: The given binary tree is not symmetric. Your Task: The task is to complete the function isSymmetric() which checks whether the given binary tree is symmetric or not. The printing is done automatically by the driver code. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Note: n is the number of nodes in the binary tree. Constraints: 1 <= Number of nodes <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root): Check whether the tree is symmetric or not. def isMirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.right, t2.left) and isMirror(t1.left, t2.right) return isMirror(root, root)"},{"question":"Alice has an array of integers and she wants to find out if there is a contiguous subarray that sums up to a given number k. If such a subarray exists, Alice wants to find the length of the smallest contiguous subarray whose sum is equal to k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9) — the number of elements in the array and the target sum. The second line of the input contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), where a_i is the i-th element of the array. Output Print one integer — the length of the smallest contiguous subarray whose sum is equal to k. If there is no such subarray, print -1. Examples Input 10 15 1 2 3 4 5 5 10 5 3 2 Output 2 Input 5 7 1 2 3 4 5 Output 2 Input 5 20 1 2 3 4 5 Output -1","solution":"def smallest_subarray_with_sum(n, k, array): Finds the length of the smallest contiguous subarray whose sum is equal to k. Args: n (int): The number of elements in the array. k (int): The target sum. array (list of int): The list of integers representing the array. Returns: int: The length of the smallest contiguous subarray whose sum is equal to k. If no such subarray exists, returns -1. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += array[right] while current_sum >= k: if current_sum == k: min_length = min(min_length, right - left + 1) current_sum -= array[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A prominent e-commerce company is working on optimizing its product recommendation system. To do so, they need to analyze within given logs how many unique visitors viewed each product in a given timeframe. You have to write a program that, given a list of log entries and a specific timeframe, counts the number of unique visitors for each product within that timeframe. Each log entry contains the following information: - VisitorID: an integer identifier for the user - ProductID: an integer identifier for the product - Timestamp: the time when the product was viewed, formatted as \\"YYYY-MM-DD HH:MM:SS\\" The timeframe will be provided as two timestamps that specify the start and end of the interval (inclusive). Input: - The first line contains two timestamps T1 and T2 (format: \\"YYYY-MM-DD HH:MM:SS\\") - The second line contains an integer N (1 ≤ N ≤ 100000), the number of log entries. - Each of the next N lines contains a log entry with VisitorID, ProductID, and Timestamp separated by a space. Output: - For each product that has been viewed in the given timeframe, print the ProductID followed by the number of unique visitors who viewed it. The output should list the products in ascending order of ProductID. Example: Input: ``` 2023-01-01 00:00:00 2023-01-01 23:59:59 5 1 1001 2023-01-01 12:00:00 2 1001 2023-01-01 12:05:00 2 1002 2023-01-01 12:10:00 3 1001 2023-01-02 13:00:00 1 1002 2022-12-31 23:59:59 ``` Output: ``` 1001 2 1002 1 ``` Note: - Log entry `3 1001 2023-01-02 13:00:00` is outside the given timeframe, so it is not considered. - Log entry `1 1002 2022-12-31 23:59:59` is also outside the given timeframe. - ProductID 1001 has 2 unique visitors (VisitorID 1 and VisitorID 2). - ProductID 1002 has 1 unique visitor (VisitorID 2).","solution":"from datetime import datetime def count_unique_visitors(logs, T1, T2): Count the number of unique visitors for each product within the given timeframe. Parameters: logs (list of tuples): A list of log entries where each log is a tuple (VisitorID, ProductID, Timestamp). T1 (str): The start of the timeframe in \\"YYYY-MM-DD HH:MM:SS\\" format. T2 (str): The end of the timeframe in \\"YYYY-MM-DD HH:MM:SS\\" format. Returns: dict: A dictionary where keys are ProductIDs and values are the number of unique visitors. start_time = datetime.strptime(T1, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(T2, \\"%Y-%m-%d %H:%M:%S\\") visitor_dict = {} for visitor_id, product_id, timestamp in logs: log_time = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if start_time <= log_time <= end_time: if product_id not in visitor_dict: visitor_dict[product_id] = set() visitor_dict[product_id].add(visitor_id) return {product_id: len(visitors) for product_id, visitors in sorted(visitor_dict.items())}"},{"question":"Write a function that takes an array of integers and returns the maximum sum of a non-empty contiguous subarray. For example: ``` [-2,1,-3,4,-1,2,1,-5,4] ==> 6 [1] ==> 1 [5,4,-1,7,8] ==> 23 ``` Note that an empty subarray is not considered, and the array can contain negative numbers as well as positive numbers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a non-empty contiguous subarray within the given array of integers. if not arr: raise ValueError(\\"Array must contain at least one element\\") max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alex is a professional typist and wants to maximize his efficiency. He has to type several paragraphs, but he can only type continuously for a maximum number of characters K before needing a break. Given an array L of integers, where each integer represents the length of a paragraph in number of characters, determine the maximum number of complete paragraphs Alex can type before taking a break, such that his total typing does not exceed K characters. Input Format: The first line contains an integer T i.e. number of test cases. Each of the next T pairs of lines contains: - An integer K, representing the maximum characters Alex can type in one go. - The subsequent line contains N integers, l_1, l_2, …, l_N, representing the lengths of the paragraphs in number of characters. Output Format: For each test case, output a single line containing the maximum number of complete paragraphs Alex can type without exceeding K characters. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ K ≤ 10^5 1 ≤ l_i ≤ 10^4, where i ∈ [1, N] SAMPLE INPUT 2 50 10 20 30 40 50 60 15 25 35 45 55 SAMPLE OUTPUT 2 2 Explanation For the first test case, Alex can type the first two paragraphs (lengths 10 and 20) without exceeding 50 characters. Typing the third paragraph (30) exceeds the limit. For the second test case, Alex can type the first two paragraphs (lengths 15 and 25) without exceeding 60 characters. Typing the third paragraph (35) exceeds the limit.","solution":"def max_paragraphs(K, lengths): total = 0 count = 0 for length in lengths: if total + length > K: break total += length count += 1 return count def process_input(T, test_cases): results = [] for K, lengths in test_cases: result = max_paragraphs(K, lengths) results.append(result) return results"},{"question":"You are given an array of integers and an integer k. Your task is to find two indices i and j (1-based) such that arr[i] + arr[j] = k, with i ≠ j. If there are multiple pairs that satisfy this condition, output any of them. Input The first line contains two integers n (1 ≤ n ≤ 105) — the size of the array, and k (1 ≤ k ≤ 109) — the target sum. The second line contains n integers arr1, arr2, ..., arrn (1 ≤ arr[i] ≤ 109) — the elements of the array. Output If there exists such a pair of indices, output two space-separated integers: the 1-based indices i and j. If no such pair exists, output \\"NO\\" (without quotes). Examples Input 5 9 2 7 11 15 1 Output 1 2 Input 4 10 1 2 3 4 Output NO Note In the first example, the pair (2, 7) sums up to 9, so the output is 1 2. Since 1-based indices are required, the answer is \\"1 2\\" rather than \\"0 1\\". Another valid output could be \\"2 1\\" or any other valid pair that sums to 9. In the second example, no two elements sum up to 10, so the output is \\"NO\\".","solution":"def find_indices_with_sum(arr, k): Finds two indices i and j (1-based) in the array such that arr[i] + arr[j] = k, with i ≠ j. If there are multiple pairs that satisfy this condition, output any of them. If no such pair exists, output \\"NO\\". n = len(arr) value_to_index = {} for i in range(n): complement = k - arr[i] if complement in value_to_index: return value_to_index[complement] + 1, i + 1 value_to_index[arr[i]] = i return \\"NO\\""},{"question":"Given a string consisting of lowercase alphabets, find the rearrangement of the string such that no two adjacent characters are the same. If such a rearrangement is not possible, return an empty string. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: One possible rearrangement is \\"aba\\". Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It\'s not possible to rearrange the string such that no two adjacent characters are the same. Your Task: You don\'t need to print anything, printing is done by the driver code itself. You just need to complete the function `rearrangeString()` which takes the string s as input and returns the rearranged string or an empty string if such a rearrangement isn\'t possible. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ length of s ≤ 10^5","solution":"import heapq from collections import Counter def rearrangeString(s): Rearranges the string such that no two adjacent characters are the same. Returns an empty string if such a rearrangement isn\'t possible. # Count the frequency of each character char_count = Counter(s) # Create a max heap based on the counts max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If there\'s a previous character to be added back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count, prev_char = count + 1, char rearranged_str = \'\'.join(result) return rearranged_str if len(rearranged_str) == len(s) else \'\'"},{"question":"A new gaming trend has surfaced where players engage in an unconventional hide-and-seek game played on a 3-D grid. A seeker starts at some initial position, and the hider can strategically pick any hiding spot within the grid. The seeker moves across the grid to find the hider as fast as possible using a unique movement pattern. The 3-D grid can be visualized with positions identified by three coordinates (x, y, z). The seeker can move from its current position (a, b, c) to any of its eight possible neighboring points within one second. The possible moves are (a±p, b±p, c±p) for any positive integer p of the seeker\'s choice every move. After determining the hider\'s coordinates, the seeker needs to calculate the minimum time required to reach the hiding spot. Given the grid dimensions, initial positions of the seeker, and the number of queries with various hider positions, determine the minimum time required for the seeker to reach the hider\'s location for each query. Input: The first line contains three space-separated integers X, Y, Z representing the grid dimensions. The second line contains three space-separated integers x_s, y_s, z_s representing the seeker\'s initial position. The third line contains an integer Q, the number of queries. The next Q lines each contain three space-separated integers x_h, y_h, z_h representing the hider\'s position for each query. Output: For each query, print the minimum time in seconds required for the seeker to find the hider. Constraints: 1 ≤ X, Y, Z ≤ 1000 0 ≤ x_s, y_s, z_s, x_h, y_h, z_h < 1000 1 ≤ Q ≤ 1000 SAMPLE INPUT: 10 10 10 5 5 5 3 7 7 7 2 3 4 9 9 9 SAMPLE OUTPUT: 1 1 1 Explanation: In the first query, the seeker moves from (5, 5, 5) to (7, 7, 7) in one move with p=2. In the second query, the seeker can move from (5, 5, 5) to (2, 3, 4) directly with p=3. In the third query, the seeker moves from (5, 5, 5) to (9, 9, 9) with p=4. The minimum time in each case is 1 second for optimal moves.","solution":"def min_time_to_find_hider(X, Y, Z, x_s, y_s, z_s, queries): results = [] for (x_h, y_h, z_h) in queries: dx = abs(x_h - x_s) dy = abs(y_h - y_s) dz = abs(z_h - z_s) min_time = max(dx, dy, dz) results.append(min_time) return results"},{"question":"Zara is a software developer and she has been working on a project which requires her to handle strings quite often. One day, her team lead challenged her to write a function that determines if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Zara is too busy with other tasks, and she needs your help to write this function. Can you help her out? # Input - The first line of the input contains an integer `t` indicating the number of test cases. - For each test case, the input consists of two lines: - The first line contains the first string `a`. - The second line contains the second string `b`. # Output - For each test case, print \\"Yes\\" if the two strings are anagrams of each other. Otherwise, print \\"No\\". # Constraints - 1 ≤ t ≤ 100 - 1 ≤ |a|, |b| ≤ 10^5 - Both strings consist of lowercase English letters. # Example Input ``` 2 listen silent hello billion ``` Output ``` Yes No ``` Write a function to determine if the given pairs of strings are anagrams. Ensure that your solution is efficient enough to handle large inputs within the given constraints.","solution":"def are_anagrams(a, b): Determines if two strings are anagrams of each other. :param a: First string :param b: Second string :return: \\"Yes\\" if the strings are anagrams, otherwise \\"No\\" if sorted(a) == sorted(b): return \\"Yes\\" return \\"No\\" def handle_test_cases(t, test_cases): Handles multiple test cases to check for anagrams. :param t: Number of test cases :param test_cases: List of tuples with pairs of strings :return: List of results for each test case results = [] for a, b in test_cases: results.append(are_anagrams(a, b)) return results"},{"question":"Polycarpus enjoys solving puzzles with strings. He was presented with the following problem: Given a string, determine the smallest contiguous substring that contains at least one occurrence of each distinct character present in the entire string. A contiguous substring consists of consecutive characters from the original string, and distinct characters are characters that appear at least once in the string. # Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output Print the length of the smallest contiguous substring that contains at least one occurrence of each distinct character in the original string. # Examples Input ``` abac ``` Output ``` 3 ``` Input ``` aaaaa ``` Output ``` 1 ``` Input ``` aabcbcdbca ``` Output ``` 4 ```","solution":"def smallest_substring_containing_all_distinct_chars(s): Returns the length of the smallest contiguous substring that contains at least one occurrence of each distinct character present in the entire string. from collections import defaultdict distinct_chars = set(s) required_char_count = len(distinct_chars) n = len(s) char_count = defaultdict(int) start = 0 min_len = float(\'inf\') formed = 0 for end in range(n): char_count[s[end]] += 1 if char_count[s[end]] == 1: formed += 1 while formed == required_char_count: min_len = min(min_len, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: formed -= 1 start += 1 return min_len"},{"question":"You are given an array of integers. Determine if there exists a continuous subarray of the given array that sums up to zero. Input: - First line contains a single integer denoting N, the number of elements in the array. - Second line contains N space-separated integers representing the array. Output: - Print \\"Yes\\" if there exists a continuous subarray with sum 0, otherwise print \\"No\\". Constraints: 1 ≤ N ≤ 10^4 -10^5 ≤ A[i] ≤ 10^5 SAMPLE INPUT 1: 5 3 4 -7 1 2 SAMPLE OUTPUT 1: Yes Explanation: There is a subarray with zero sum from index 0 to index 2: (3 + 4 + (-7) = 0). SAMPLE INPUT 2: 4 1 2 3 4 SAMPLE OUTPUT 2: No Explanation: There doesn\'t exist any subarray with the sum equal to 0.","solution":"def has_zero_sum_subarray(arr): Determines if there exists a continuous subarray that sums up to zero. prefix_sum = 0 prefix_sums = set() for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sums: return \\"Yes\\" prefix_sums.add(prefix_sum) return \\"No\\" # Example use case if __name__ == \\"__main__\\": N = int(input().strip()) arr = list(map(int, input().strip().split())) print(has_zero_sum_subarray(arr))"},{"question":"You are given a tree with `n` nodes, each node having a unique value between `1` and `n`. The tree is rooted at node `1` and you are given `q` queries. In each query, you are given a node `v` and an integer `k`. Your task is to determine the `k`-th ancestor of the node `v`. If the `k`-th ancestor does not exist, return -1. A node `u` is called the ancestor of node `v` if there exists a path from node `u` to node `v`. -----Input----- The first line contains two integers `n` and `q` (1 leq n, q le 10^5) — the number of nodes in the tree and the number of queries. The next `n-1` lines each contain two integers `u` and `v` (1 leq u, v leq n) indicating that there is an edge between node `u` and node `v`. The following `q` lines each contain two integers `v` and `k` (1 leq v, k leq n) — the node `v` and the integer `k` representing the `k`-th ancestor query. -----Output----- For each query, print a single integer — the `k`-th ancestor of the node `v`. If the `k`-th ancestor does not exist, print -1. -----Examples----- Input: 5 3 1 2 1 3 2 4 2 5 4 1 3 2 5 2 Output: 2 -1 1 -----Note----- Consider the queries of the example test. In the first query, the 1st ancestor of node 4 is node 2. In the second query, the 2nd ancestor of node 3 does not exist, so the answer is -1. In the third query, the 2nd ancestor of node 5 is node 1.","solution":"from collections import defaultdict, deque def preprocess_tree(n, edges): parents = [-1] * (n + 1) children = defaultdict(list) for u, v in edges: children[u].append(v) children[v].append(u) def bfs(root): queue = deque([root]) visited = [False] * (n + 1) visited[root] = True while queue: node = queue.popleft() for child in children[node]: if not visited[child]: visited[child] = True parents[child] = node queue.append(child) bfs(1) return parents def kth_ancestor(v, k, parents): current = v while k > 0 and current != -1: current = parents[current] k -= 1 return current def process_queries(n, edges, queries): parents = preprocess_tree(n, edges) results = [] for v, k in queries: results.append(kth_ancestor(v, k, parents)) return results # Sample usage n = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] queries = [(4, 1), (3, 2), (5, 2)] print(process_queries(n, edges, queries)) # Output should be [2, -1, 1]"},{"question":"You are given a string S consisting of lowercase English alphabets. Your task is to find the character that appears most frequently in the string, as well as the number of times it appears. If there are multiple characters with the same highest frequency, return the character that comes first in alphabetical order. Function Signature: - def most_frequent_character(S: str) -> Tuple[str, int]: Input Format: - A single string S. Output Format: - A tuple containing the character that appears most frequently and the number of times it appears. Example Input: aabbbcc Example Output: (\'b\', 3) Explanation: - In the string \'aabbbcc\', the character \'b\' appears 3 times, which is more than any other character. Hence, the output is (\'b\', 3). Constraints: - The string length will be between 1 and 1000 inclusive. - The string consists of only lowercase English alphabets.","solution":"from collections import Counter from typing import Tuple def most_frequent_character(S: str) -> Tuple[str, int]: Returns the character that appears most frequently in the string S and the number of times it appears. If there are multiple characters with the same highest frequency, returns the character that comes first in alphabetical order. # Count the frequency of each character in the string freq = Counter(S) # Find the character with the highest frequency most_frequent_char = min(freq, key=lambda k: (-freq[k], k)) return most_frequent_char, freq[most_frequent_char]"},{"question":"John loves to participate in bike challenges and he is currently trying a new challenge where he has to ride his bike uphill and downhill on a certain path. The path can be represented as a sequence of integers where each integer represents the elevation at that point. John\'s goal is to find the length of the longest subarray where the elevation strictly increases and then strictly decreases. The sequence does not need to have both an increasing and a decreasing part. It is also possible for the subarray to consist of strictly increasing or strictly decreasing numbers only. Write a program that computes the length of the longest strictly increasing followed by strictly decreasing subarray. Input - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a single integer `N` (1 ≤ N ≤ 10^5), the number of points in the elevation path, followed by `N` space-separated integers representing the elevation at those points. Output For each test case, output the length of the longest subarray that meets John\'s goal. Example Input ``` 3 7 1 2 3 5 4 2 1 6 10 5 15 25 29 8 4 5 4 3 2 ``` Output ``` 7 5 3 ``` Explanation - In the first test case, the whole sequence is first strictly increasing from 1 to 5, and then strictly decreasing from 5 to 1. Therefore, the length is 7. - In the second test case, the sequence 5 15 25 29 is strictly increasing and then followed by 29 to 8 which is strictly decreasing. Therefore, the length is 5. - In the third test case, the whole sequence is strictly decreasing from 5 to 2. Therefore, the length is 3. Note: - Ensure your solution is efficient to handle the upper bounds of the input size.","solution":"def longest_increasing_decreasing_subarray(arr): n = len(arr) if n == 0: return 0 increase_lengths = [1] * n decrease_lengths = [1] * n # Compute lengths of increasing subarrays ending at each index for i in range(1, n): if arr[i] > arr[i-1]: increase_lengths[i] = increase_lengths[i-1] + 1 # Compute lengths of decreasing subarrays starting at each index for i in range(n-2, -1, -1): if arr[i] > arr[i+1]: decrease_lengths[i] = decrease_lengths[i+1] + 1 # Find the maximum length of such subarray max_length = 1 for i in range(n): # Only consider if there\'s an increasing sequence preceding or a decreasing sequence following if increase_lengths[i] > 1 or decrease_lengths[i] > 1: max_length = max(max_length, increase_lengths[i] + decrease_lengths[i] - 1) return max_length def longest_subarray_for_tests(t, test_cases): results = [] for i in range(t): n, *arr = test_cases[i] results.append(longest_increasing_decreasing_subarray(arr)) return results"},{"question":"Your task is to help a company optimize their delivery routes to maximize efficiency. The company has N locations, each uniquely numbered from 1 to N, and certain pairs of locations have direct roads between them. Each road is bidirectional and has a length L_i. The company needs to deliver packages from a central warehouse located at position 1 to all the other locations. The objective is to determine the minimum total length of roads that need to be traversed to deliver packages to every location exactly once. The question can be modeled as finding the minimum spanning tree of a graph where the nodes represent the locations and the edges represent the roads with their respective lengths. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 1000 - 0 ≤ E ≤ 2000 - 1 ≤ L_i ≤ 10^6 -----Input----- The input is given from Standard Input in the following format: N E u_1 v_1 L_1 u_2 v_2 L_2 : u_E v_E L_E What each means: - The first integer N is the number of locations. - The second integer E is the number of roads. - The next E lines each contain three integers u_i, v_i, and L_i, representing a road between locations u_i and v_i with length L_i. -----Output----- Print the minimum total length of roads needed for the delivery. -----Sample Input----- 4 5 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 -----Sample Output----- 6 In this example, the minimum spanning tree contains the roads with lengths 2, 1, and 3.","solution":"def find_minimum_spanning_tree(N, E, edges): # Kruskal\'s algorithm to find MST # Step 1: Sort all the edges in non-decreasing order of their weight edges.sort(key=lambda x: x[2]) # Initialize parent and rank for Union-Find parent = [] rank = [] def find_parent(i): if parent[i] == i: return i else: parent[i] = find_parent(parent[i]) return parent[i] def union(x, y): root_x = find_parent(x) root_y = find_parent(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_y] > rank[root_x]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Create V subsets with single elements for node in range(N + 1): parent.append(node) rank.append(0) result = [] e = 0 # Number of edges in MST i = 0 # Index variables for sorted edges while e < N - 1: u, v, w = edges[i] i += 1 x = find_parent(u) y = find_parent(v) if x != y: e += 1 result.append((u, v, w)) union(x, y) minimum_cost = sum([w for u, v, w in result]) return minimum_cost # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) E = int(data[1]) edges = [] index = 2 for _ in range(E): u = int(data[index]) v = int(data[index+1]) L = int(data[index+2]) edges.append((u, v, L)) index += 3 print(find_minimum_spanning_tree(N, E, edges))"},{"question":"Avery is an avid gardener who loves arranging plants in rows in his garden. Each row must have a specific aesthetic property that Avery cherishes. We will call a sequence of integers a beautiful garden row if it satisfies the following conditions: * The integers are arranged in non-decreasing order. That is, for any two indices i and j (i < j), the inequality ai ≤ aj holds. * Every element in the sequence must be divisible by at least one of the preceding elements. Formally, for any i > 1, there exists an integer j (1 ≤ j < i) such that ai mod aj = 0. Avery wants you to generate a beautiful garden row with n integers. Input The input contains a single integer: n (1 ≤ n ≤ 105). Output Output a line that contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 107), representing a possible beautiful garden row. Note, that each ai must not be greater than 10000000 (107) and must be at least 1. If there are multiple solutions, you can output any valid one. Examples Input 4 Output 1 2 4 8 Input 3 Output 3 6 18","solution":"def beautiful_garden_row(n): Generates a beautiful garden row with n integers. Each number is twice the previous number. result = [1] for i in range(1, n): result.append(result[i - 1] * 2) return result"},{"question":"There is a large gathering at a coding competition event. Participants come from different regions and are divided into two groups: east wing and west wing. Each participant has a unique focus area with different levels of expertise. A participant\'s expertise is represented by their favorability score. To foster cross-wing collaboration, the organizers want to find the pair of participants (one from each wing) that have the smallest absolute difference in their favorability scores. Calculate the minimum absolute difference between the scores of participants from the east wing and those from the west wing. Input: Each test case consists of two lines. The first line represents the favorability scores of participants in the east wing, and the second line represents the favorability scores of participants in the west wing. The first number N of each line represents the number of participants in that wing. The favorability score is an integer and can be positive or negative. N ≤ 1000. Output: The smallest absolute difference between any two participants\' favorability scores. Example: Input: 4 7 -3 8 12 5 5 1 6 15 -2 Output: 1","solution":"def min_absolute_difference(east_scores, west_scores): Returns the minimum absolute difference between favorability scores of participants from east wing and west wing. east_scores.sort() west_scores.sort() min_diff = float(\'inf\') i, j = 0, 0 while i < len(east_scores) and j < len(west_scores): min_diff = min(min_diff, abs(east_scores[i] - west_scores[j])) if east_scores[i] < west_scores[j]: i += 1 else: j += 1 return min_diff"},{"question":"Allie and Blake have been working on a group project that involves creating a 3x3 square grid. The project entails placing integers in each cell of the grid in such a way that the entire grid retains a specific property called \\"Magic Number Symmetry.\\" The grid is considered to have Magic Number Symmetry if, for every row, column and both diagonals, the sum of the numbers in each of these must be the same. Now, Allie and Blake are dealing with the task of filling this grid. Your task is to determine if it is possible to fill out the 3x3 grid with unique integers from 1 to 9 such that the grid satisfies Magic Number Symmetry. If multiple solutions exist, print any one of them. Otherwise, indicate that no solution is possible. -----Input----- There is no given input for this problem. -----Output----- Output a 3x3 grid with unique integers from 1 to 9 such that it satisfies Magic Number Symmetry. The output should consist of exactly three lines, each containing three integers separated by spaces. If no such grid is possible, output the string \\"Impossible\\". -----Examples----- Sample Output 1: 8 1 6 3 5 7 4 9 2 Sample Output 2: Impossible","solution":"def is_magic_square(grid): # Check rows sum_list = [sum(row) for row in grid] # Check columns for i in range(3): sum_list.append(sum(grid[j][i] for j in range(3))) # Check diagonals sum_list.append(grid[0][0] + grid[1][1] + grid[2][2]) sum_list.append(grid[0][2] + grid[1][1] + grid[2][0]) # Check if all sums are the same return all(s == sum_list[0] for s in sum_list) def magic_number_symmetry(): # Manually created magic square grid = [ [8, 1, 6], [3, 5, 7], [4, 9, 2] ] if is_magic_square(grid): for row in grid: print(\' \'.join(map(str, row))) else: print(\\"Impossible\\")"},{"question":"A robot is programmed to move on a Cartesian plane starting at the origin (0,0). It can move in four directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Each command moves the robot exactly 1 unit in the specified direction. The robot receives a series of commands and your task is to determine the final position of the robot after executing all the commands. Input The first line of input contains an integer t, the number of test cases (t ≤ 100). t test cases follow. Each test case consists of a string of commands (1 ≤ length of the string ≤ 10000). Output For each test case, output the final coordinates of the robot (x, y) in the following format: x y. SAMPLE INPUT 2 UUDDLRLR UUUUURRRRDDDDLL SAMPLE OUTPUT 0 0 2 1","solution":"def robot_final_position(commands): Determines the final position of the robot given a string of commands. Parameters: commands (str): A string containing the commands for the robot. Returns: tuple: The final coordinates (x, y) of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) def process_test_cases(test_cases): Processes multiple test cases to determine the final positions of the robot. Parameters: test_cases (list): A list of strings, each string containing the commands for one test case. Returns: list: A list of tuples, each containing the final coordinates (x, y) for one test case. results = [] for commands in test_cases: results.append(robot_final_position(commands)) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine the minimum number of segments needed to partition the string `s` such that each segment is a palindrome. For example: The string \\"aab\\" can be partitioned into \\"aa\\" and \\"b\\", so the minimum number of segments is 2. The string \\"racecar\\" is already a palindrome, so the minimum number of segments is 1. The string \\"abcbm\\" can be partitioned into \\"a\\", \\"bcb\\", and \\"m\\", resulting in 3 segments. -----Input----- The first line contains one integer `t` (`1 <= t <= 1000`) — the number of test cases. Each of the next `t` lines consists of one string `s` (`1 <= |s| <= 1000`), consisting of lowercase English letters. -----Output----- For each test case, print the minimum number of palindrome segments needed to partition the string `s`. -----Examples----- Input 3 aab racecar abcbm Output 2 1 3","solution":"def min_palindrome_partitions(t, cases): def is_palindrome(s): return s == s[::-1] result = [] for s in cases: n = len(s) if is_palindrome(s): result.append(1) else: cuts = [0] * n for i in range(n): min_cut = i for j in range(i + 1): if s[j:i + 1] == s[j:i + 1][::-1]: min_cut = 0 if j == 0 else min(min_cut, cuts[j - 1] + 1) cuts[i] = min_cut result.append(cuts[-1] + 1) return result"},{"question":"Write a function that takes a string \'str\' consisting of lowercase English letters and a pattern \'pat\', also consisting of lowercase English letters. The task is to find the minimum window in \'str\' that contains all characters of \'pat\'. If no such window exists, return an empty string. If there are multiple minimum-length windows, return the one with the earliest starting point. Example 1: Input: str = \\"ADOBECODEBANC\\" pat = \\"ABC\\" Output: \\"BANC\\" Explanation: The minimum window containing all characters of \\"ABC\\" is \\"BANC\\". Example 2: Input: str = \\"a\\" pat = \\"a\\" Output: \\"a\\" Explanation: The entire string is the minimum window. Example 3: Input: str = \\"a\\" pat = \\"aa\\" Output: \\"\\" Explanation: No window in \'str\' contains all characters of \'pat\' since \'pat\' has two \'a\'s. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMinWindow() which takes the string \'str\' and the string \'pat\' as parameters and returns the minimum window as described. Expected Time Complexity: O(|str|) Expected Auxiliary Space: O(|str| + |pat|) Constraints: 1 ≤ |str|, |pat| ≤ 10^6","solution":"def findMinWindow(s, t): from collections import Counter if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} min_len = float(\\"inf\\") min_window = (0, 0) while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < min_len: min_len = r - l + 1 min_window = (l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if min_len == float(\\"inf\\") else s[min_window[0] : min_window[1] + 1]"},{"question":"**[New Question]:** Eleanor has developed a new kind of sequence based on Fibonacci sequence, where each term is defined as the sum of its two previous terms, but its starting values and modulo base can be dynamically provided. The sequence is defined as follows: - g_{1} = a - g_{2} = b - g_{n} = g_{n-1} + g_{n-2} for n geq 3 Given integers a, b, and modulo base k, compute the value of g_{n} modulo k. ------Input------ The first line contains three integers a, b, k ( |a|, |b| leq 10^9, 2 leq k leq 10^9 ). The second line contains a single integer n ( 1 leq n leq 2 cdot 10^9 ). -----Output----- Output a single integer representing g_{n} modulo k. ------Examples------ Input: 5 8 100 4 Output: 21 Input: 1 2 5 7 Output: 1 -----Note----- In the first example, the sequence is: g1=5, g2=8, g3=13, g4=21. g_4 modulo 100 is 21. In the second example, the sequence is: g1=1, g2=2, g3=3, g4=5, g5=8, g6=13, g7=21. g_7 mod 5 = 21 mod 5 = 1.","solution":"def compute_g_n(a, b, k, n): Computes the n-th term of the modified Fibonacci sequence modulo k. :param a: The first term of the sequence. :param b: The second term of the sequence. :param k: The modulo base. :param n: The term to compute. :return: The n-th term modulo k. if n == 1: return a % k elif n == 2: return b % k # Use matrix exponentiation to efficiently compute Fibonacci-like sequence def mat_mult(A, B, mod): return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod] ] def mat_pow(mat, exp, mod): result = [[1, 0], [0, 1]] base = mat while exp > 0: if exp % 2 == 1: result = mat_mult(result, base, mod) base = mat_mult(base, base, mod) exp //= 2 return result # Transformation matrix for Fibonacci-like sequence T = [[1, 1], [1, 0]] T_n = mat_pow(T, n - 2, k) g_n = (T_n[0][0] * b + T_n[0][1] * a) % k return g_n"},{"question":"=====Function Descriptions===== sum The sum tool computes the arithmetic sum along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print(numpy.sum(my_array, axis=0)) #Output : [4 6] print(numpy.sum(my_array, axis=1)) #Output : [3 7] print(numpy.sum(my_array, axis=None)) #Output : 10 print(numpy.sum(my_array)) #Output : 10 By default, the axis is None. Therefore, it computes the sum of the flattened array. prod The prod tool computes the arithmetic product along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print(numpy.prod(my_array, axis=0)) #Output : [3 8] print(numpy.prod(my_array, axis=1)) #Output : [2 12] print(numpy.prod(my_array, axis=None)) #Output : 24 print(numpy.prod(my_array)) #Output : 24 By default, the axis is None. Therefore, it computes the product of the flattened array. min The min tool computes the minimum value along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print(numpy.min(my_array, axis=0)) #Output : [1 2] print(numpy.min(my_array, axis=1)) #Output : [1 3] print(numpy.min(my_array, axis=None)) #Output : 1 print(numpy.min(my_array)) #Output : 1 By default, the axis is None. Therefore, it computes the minimum value of the flattened array. =====Problem Statement===== You are given a 2-D array of size NxM. Your task is to find: The sum along axis 0 The prod along axis 1 The min along axis None =====Input Format===== The first line contains the space separated values of N and M. The next N lines contain M space separated integers. =====Output Format===== First, print the sum. Second, print the prod. Third, print the min.","solution":"import numpy as np def array_operations(n, m, array): Performs sum along axis 0, product along axis 1, and finds the minimum value of the given 2D array. :param n: Number of rows of the array :param m: Number of columns of the array :param array: 2D list of integers :return: Tuple containing sum along axis 0, product along axis 1, and the minimum value np_array = np.array(array) sum_axis_0 = np.sum(np_array, axis=0) prod_axis_1 = np.prod(np_array, axis=1) min_value = np.min(np_array, axis=None) return sum_axis_0, prod_axis_1, min_value"},{"question":"Problem You are working on a text processing tool that helps to identify the most frequently used words in a given piece of text. To refine this tool, you need to implement a function that returns a list of the k most frequently occurring words in a given string. If two or more words have the same frequency, they should be returned in lexicographical order. # Requirements - The function should be case-insensitive, meaning \\"Word\\", \\"word\\", and \\"wOrd\\" are all considered the same word. - You should not consider punctuation marks (.,?! etc.) as part of words. - You should return the words in lowercase. # Input The input consists of a single integer k followed by a single string text. - The integer k (1 ≤ k ≤ the number of unique words in the text string). - The string text, which contains alphabetic words possibly separated by spaces and/or punctuation. # Output Output a list of k most frequently occurring words in the text string. # Example Input ``` 2 \\"Hello, hello! Are you there? Yes, you. YES!\\" ``` Output ``` [\'hello\', \'yes\'] ``` Input ``` 3 \\"This is a test. This test is only a test.\\" ``` Output ``` [\'test\', \'a\', \'is\'] ``` # Function Signature ```python def most_frequent_words(k: int, text: str) -> List[str]: # Your code here ``` # Constraints - The text string will consist of up to 10^5 characters. - The text will contain at least k unique words.","solution":"import re from collections import Counter from typing import List def most_frequent_words(k: int, text: str) -> List[str]: Returns the k most frequently occurring words in the given text. # Convert text to lowercase text = text.lower() # Remove punctuation using regex and split by spaces words = re.findall(r\'bw+b\', text) # Count the frequency of each word word_counts = Counter(words) # Sort words first by frequency (descending) then lexicographically (ascending) sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Get the top k words most_frequent = [word for word, count in sorted_words[:k]] return most_frequent"},{"question":"A group of friends is planning a hiking trip to explore various hiking trails in a national park. The park has `n` different trails identified by numbers from `1` to `n`, and there are `m` connections between the trails. Each connection defines the time it takes to move from one trail to another. The friends want to start at any given trail and ensure that they can visit all the trails spending the least amount of time overall. Your task is to determine the shortest time required to ensure that all trails can be explored, starting from any trail and returning back to the starting trail. You need to help the friends by computing this minimum time considering all possible starting points. [Input] - The first line of input contains an integer `t` representing the number of test cases. - Each test case consists of three integers `n` and `m` representing the number of trails and connections, respectively. - The next `m` lines each contain three integers `a, b,` and `c`, where `a` and `b` are trails connected by a direct path and `c` is the time to traverse that path. [Output] For each test case, compute and print the minimum time required to visit all the trails starting and returning to any trail. [Constraints] 1 ≤ t ≤ 20 1 ≤ n ≤ 100 n-1 ≤ m ≤ (n*(n-1))/2 1 ≤ a, b ≤ n 1 ≤ c ≤ 1000 It is guaranteed that the trails are connected in such a way that the tour is possible from any starting point. SAMPLE INPUT 1 4 6 1 2 1 1 3 2 1 4 3 2 3 4 2 4 2 3 4 1 SAMPLE OUTPUT 6","solution":"def floyd_warshall(n, graph): dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u in range(n): for v, w in graph[u]: dist[u][v] = min(dist[u][v], w) for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def tsp(n, dist): dp = [[float(\'inf\')] * n for _ in range(1 << n)] dp[1][0] = 0 for mask in range(1 << n): for u in range(n): if mask & (1 << u): for v in range(n): if not mask & (1 << v): dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + dist[u][v]) return min(dp[(1 << n) - 1][i] + dist[i][0] for i in range(1, n)) def solve(test_cases): results = [] for n, m, edges in test_cases: graph = [[] for _ in range(n)] for a, b, c in edges: graph[a-1].append((b-1, c)) graph[b-1].append((a-1, c)) dist = floyd_warshall(n, graph) result = tsp(n, dist) results.append(result) return results def hiking_trails_solver(t, cases): results = solve(cases) for res in results: print(res) # Example Usage if __name__ == \\"__main__\\": t = 1 cases = [ (4, 6, [ (1, 2, 1), (1, 3, 2), (1, 4, 3), (2, 3, 4), (2, 4, 2), (3, 4, 1) ]) ] hiking_trails_solver(t, cases)"},{"question":"Imagine you are given a list of employees who will be retiring soon. Each employee\'s data includes their name and the exact number of days until their retirement. Your task is to sort the list of employees in ascending order based on their retirement days. If two or more employees have the same number of days left until retirement, they should be sorted alphabetically by their names. ------ Input ------ The first line of the input contains an integer T, the number of employees. T lines follow. Each line contains a string E (employee\'s name) and an integer D (days until retirement), separated by a space. ------ Output ------ For each employee, output their name and the number of days until retirement, in separate lines, sorted by days in ascending order. If days are equal, sort by names alphabetically. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |E| ≤ 100 1 ≤ D ≤ 1000 ------ Sample Input 1 ------ 4 Alice 30 Bob 15 Charlie 15 Diana 20 ------ Sample Output 1 ------ Bob 15 Charlie 15 Diana 20 Alice 30","solution":"def sort_employees(employee_list): Sorts employees based on the number of days until retirement. If two or more employees have the same number of days left, they are sorted alphabetically by their names. :param employee_list: List of tuples (employee_name, days_until_retirement) :return: Sorted list of tuples sorted_list = sorted(employee_list, key=lambda x: (x[1], x[0])) return sorted_list def parse_input(input_data): Parses the input data to extract employees information. :param input_data: Multiline string with employee data :return: List of tuples (employee_name, days_until_retirement) lines = input_data.strip().split(\'n\') T = int(lines[0]) employees = [] for i in range(1, T + 1): name, days = lines[i].rsplit(\' \', 1) employees.append((name, int(days))) return employees def format_output(employees): Formats the sorted list of employees into a string suitable for output. :param employees: List of tuples (employee_name, days_until_retirement) :return: Formatted multiline string return \'n\'.join(f\\"{name} {days}\\" for name, days in employees)"},{"question":"You are tasked with organizing a scientific conference where you need to schedule multiple presentations in a single room. Each presentation has a starting and ending time, and they cannot overlap. Your job is to find the maximum number of non-overlapping presentations that can be scheduled. -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of presentations. The next n lines contain two integers each, s_i and t_i (0 le s_i < t_i le 10^9), where s_i is the starting time and t_i is the ending time of the ith presentation. -----Output----- Print a single integer — the maximum number of non-overlapping presentations that can be scheduled. -----Examples----- Input 4 1 3 2 5 4 6 7 8 Output 3 Input 3 1 2 3 4 2 3 Output 3","solution":"def max_presentations(n, presentations): Returns the maximum number of non-overlapping presentations. :param n: int - the number of presentations :param presentations: List[Tuple[int, int]] - a list of tuples representing (start, end) times of presentations :return: int - the maximum number of non-overlapping presentations that can be scheduled # Sort presentations by end time sorted_presentations = sorted(presentations, key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in sorted_presentations: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"The CEO of a startup company wants to distribute bonuses to his employees based on their performance ratings. The bonus distribution follows two rules: 1. Each employee must receive at least one unit of bonus. 2. An employee with a higher performance rating than their immediate neighbors should receive more bonuses than those neighbors. The CEO has asked you to write a program to determine the minimum number of bonus units required to satisfy the said conditions. Input: The first line of input contains T – number of test cases. (1 ≤ T ≤ 25) The next T segments consist of: - The first line of each segment contains a single integer n - the number of employees. (1 ≤ n ≤ 10^5) - The second line of each segment contains n integers a1, a2, ..., an - the performance ratings of the employees. (1 ≤ ai ≤ 10^5) Output: For each test case, print a single integer – the minimum number of bonus units required. SAMPLE INPUT 2 3 1 2 2 4 4 2 3 2 SAMPLE OUTPUT 4 6 Explanation In the first sample test case, the optimal distribution of bonuses would be [1, 2, 1], where the second employee receives more bonus units than the first and third ones. In the second sample test case, an optimal distribution would be [2, 1, 2, 1], where the first and third employees receive more bonus units than their neighbors.","solution":"def min_bonuses(test_cases): results = [] for n, ratings in test_cases: bonuses = [1] * n # Step 1: Assign at least 1 bonus to everyone # Step 2: Traverse from left to right for i in range(1, n): if ratings[i] > ratings[i-1]: bonuses[i] = bonuses[i-1] + 1 # Step 3: Traverse from right to left for i in range(n-2, -1, -1): if ratings[i] > ratings[i+1] and bonuses[i] <= bonuses[i+1]: bonuses[i] = bonuses[i+1] + 1 results.append(sum(bonuses)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) ratings = list(map(int, lines[index + 1].split())) test_cases.append((n, ratings)) index += 2 return test_cases"},{"question":"The National Library wants to develop a simple digital catalog of their book collection. They seek your help in building a system to manage book entries in their catalog. Your task is to: 1) Create a `Book` class that takes in 3 arguments during initialization: `title`, `author`, and `year`. 2) Implement a method `get_summary` for the `Book` class that returns a string summarizing the book details in the following format: `\\"<title>, written by <author> in <year>.\\"` 3) Create another class `Catalog` that will manage the collection of `Book` objects. 4) The `Catalog` class should have methods to: a) `add_book(book)`: Add a `Book` object to the catalog. b) `remove_book(title)`: Remove a book from the catalog by title. c) `list_books()`: Return a list of summaries of all books currently in the catalog. d) `find_book(title)`: Return the summary of a book by its title, if it exists in the catalog. If the book does not exist, return \\"Book not found.\\" IMPORTANT: Ensure that the `list_books` method returns the summaries in the order in which the books were added to the catalog.","solution":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def get_summary(self): return f\\"{self.title}, written by {self.author} in {self.year}.\\" class Catalog: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def remove_book(self, title): for book in self.books: if book.title == title: self.books.remove(book) return else: return \\"Book not found.\\" def list_books(self): return [book.get_summary() for book in self.books] def find_book(self, title): for book in self.books: if book.title == title: return book.get_summary() return \\"Book not found.\\""},{"question":"In a small town, residents are preparing for the annual flower festival. Each resident has a garden with a variety of flowers and the town council wants to ensure there\'s a good mix of flower types. Each flower type is represented by a unique integer. The council has a requirement: each garden should have no repeated flower type and the total number of different flowers in the garden should not exceed a specified limit. You have been asked to help with checking whether the gardens meet these requirements. Given lists of integers where each list represents the flower types in a particular garden, you need to determine if the garden meets the requirements or not. Specifically, you need to check if all elements in each list are unique and the length of the list does not exceed the specified limit. ------ Input Format ------ - The first line contains the number of test cases T. - Each test case consists of two lines: - The first line contains two integers N (the number of flower types in the garden) and L (the maximum allowable number of different flower types). - The second line contains N integers, each representing a type of flower in the garden. ------ Output Format ------ For each test case, print \\"VALID\\" if the garden meets the requirements, otherwise print \\"INVALID\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ L ≤ 10^3 1 ≤ Each flower type integer ≤ 10^6 ------ Sample Input 1 ------ 3 5 5 1 2 3 4 5 4 3 1 2 2 3 6 4 1 2 3 4 5 6 ------ Sample Output 1 ------ VALID INVALID INVALID ------ Explanation 1 ------ Test case 1: The garden has 5 different flower types and they are all unique. Thus, the garden is valid. Test case 2: The garden has a flower type (2) that is repeated and the total number of different flowers exceeds the limit of 3. Thus, the garden is invalid. Test case 3: Even though all flower types are unique, the total number of different flowers (6) exceeds the limit of 4. Thus, the garden is invalid.","solution":"def check_gardens(test_cases): results = [] for case in test_cases: N, L, flowers = case if len(flowers) > L: results.append(\\"INVALID\\") elif len(flowers) != len(set(flowers)): results.append(\\"INVALID\\") else: results.append(\\"VALID\\") return results"},{"question":"Write a program to help a library manage its book checkouts and returns. Each book has a unique ID, and a member can borrow or return multiple books at once. You are asked to implement a system to track the current status of each book as either \\"checked out\\" or \\"available.\\" The system will receive a sequence of operations and should process each operation and update the book\'s status accordingly. Each operation will be either a checkout or a return. # Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing \\"END\\". Each dataset is given in the following format: ``` operation_type book_id1 book_id2 ... book_idn ``` - `operation_type` will be either \\"checkout\\" or \\"return\\". - `book_id` is a unique integer ID that represents a book in the library. - The number of `book_id` values will be between 1 and 100. # Output For each dataset, output the current status of each mentioned book as either \\"checked out\\" or \\"available\\" after applying the operation. # Example Input ``` checkout 101 102 103 return 102 checkout 104 105 return 101 105 END ``` Output ``` Book 101: checked out Book 102: checked out Book 103: checked out Book 102: available Book 104: checked out Book 105: checked out Book 101: available Book 105: available ``` # Constraints - Each `book_id` will be a positive integer. - No `book_id` will exceed the value of 10^6. - You may assume no simultaneous operations will be attempted on the same book.","solution":"def library_management(sequences): Manage the status of books based on the given sequences of operations. Args: sequences (list of str): List of operations in the form [\\"operation_type book_id1 book_id2 ... book_idn\\"]. Returns: List of tuples containing book_id and its status (\\"checked out\\" or \\"available\\"). book_status = {} result = [] for sequence in sequences: parts = sequence.split() operation_type = parts[0] book_ids = parts[1:] for book_id in book_ids: book_id = int(book_id) if operation_type == \\"checkout\\": book_status[book_id] = \\"checked out\\" elif operation_type == \\"return\\": book_status[book_id] = \\"available\\" result.append(f\\"Book {book_id}: {book_status[book_id]}\\") return result"},{"question":"A group of friends is playing a game called \\"String Scramble.\\" In this game, each participant takes turns to rearrange the characters of a given string to form the lexicographically next permutation of the string. One day, one of the participants encountered a tricky string and couldn\'t figure out the next permutation. Your task is to help the participant by implementing a function to find the lexicographically next permutation of the given string. You are given a string `s` consisting of lowercase English letters. You need to rearrange the string to get its lexicographically next permutation. If no such permutation exists (i.e., the string is sorted in non-increasing order), you need to rearrange the string to the lexicographically smallest permutation (i.e., sort the string in non-decreasing order). Input The first line contains the string `s` (1 ≤ |s| ≤ 100), where `|s|` is the length of the string. Output Print the lexicographically next permutation of the string. If no such permutation exists, print the lexicographically smallest permutation. Example Input abdc Output acbd Input dcba Output abcd Input a Output a Note In the first example, the next permutation of \\"abdc\\" is \\"acbd\\". In the second example, no permutation is greater than \\"dcba\\", so we return the smallest permutation \\"abcd\\". In the third example, since there is only one character, the output will be \\"a\\". Explanation The lexicographically next permutation is found by following these steps: 1. Find the largest index `i` such that `s[i] < s[i+1]`. If no such index exists, the permutation is the last permutation. 2. Find the largest index `j` greater than `i` such that `s[j] > s[i]`. 3. Swap the value of `s[i]` with that of `s[j]`. 4. Reverse the sequence from `i+1` up to and including the final element `s[n]`.","solution":"def next_permutation(s: str) -> str: Returns the lexicographically next permutation of the input string. If no such permutation exists, returns the lexicographically smallest permutation. s = list(s) n = len(s) # Step 1: Find the largest index i such that s[i] < s[i + 1] i = n - 2 while i >= 0 and s[i] >= s[i + 1]: i -= 1 # If no such index exists, the permutation is the last one if i == -1: s.reverse() return \'\'.join(s) # Step 2: Find the largest index j greater than i such that s[j] > s[i] j = n - 1 while s[j] <= s[i]: j -= 1 # Step 3: Swap the value of s[i] with that of s[j] s[i], s[j] = s[j], s[i] # Step 4: Reverse the sequence from i + 1 to the end s[i + 1:] = reversed(s[i + 1:]) return \'\'.join(s)"},{"question":"Bob is interested in arrays and he recently encountered the concept of \\"good arrays\\". An array of integers is considered good if the number of distinct integers is equal to the length of the array. Given an array of integers, Bob wants to know the minimum number of elements that need to be removed to make it a good array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, print a single line containing the minimum number of elements that need to be removed to make the array a good array. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le array element le 1000 -----Example Input----- 3 5 1 2 2 3 4 4 1 1 1 1 6 1 2 3 4 5 5 -----Example Output----- 1 3 1 -----Explanation----- Example case 1: By removing one occurrence of 2, we obtain the array [1, 2, 3, 4], which is good as all elements are distinct. Example case 2: Removing any three elements will leave us with an array containing one element, which is good. Example case 3: By removing one occurrence of 5, we obtain the array [1, 2, 3, 4, 5], which is good.","solution":"def min_removals_to_good_array(test_cases): results = [] for case in test_cases: N, array = case unique_elements = set(array) min_removals = N - len(unique_elements) results.append(min_removals) return results"},{"question":"You are given a series of events that represent the changes in ownership of a collection of unique items. Each event records the transfer of one item from one owner to another owner at a specific time. Your task is to determine the current owner of each item after all events have been processed in chronological order. Each event is defined by: - A unique string identifier for the item. - A string representing the current owner of the item. - A string representing the new owner of the item. - An integer timestamp indicating the time the event occurs. You should output the final owner of each item in alphabetical order by item identifier. -----Input----- The input starts with a positive integer n (1 ≤ n ≤ 1000), the number of events. Next n lines describe the events, each consisting of: - A string item_id (a unique identifier for the item). - A string current_owner (the owner before the transfer). - A string new_owner (the owner after the transfer). - An integer time_stamp (0 ≤ time_stamp ≤ 10^5). -----Output----- Print the final ownership of all items in alphabetical order by item identifier, each on a new line in the format: item_id new_owner. -----Examples----- Input 6 item1 Alice Bob 1 item2 Carol Dave 2 item1 Bob Carol 3 item3 Eve Frank 4 item2 Dave George 5 item1 Carol Eve 6 Output item1 Eve item2 George item3 Frank -----Note----- After processing all events in the sample, \\"item1\\" is finally owned by Eve, \\"item2\\" by George, and \\"item3\\" by Frank. The output lists these items in alphabetical order by their identifiers.","solution":"def determine_final_owners(n, events): Determines the final owners of items after a series of transfer events. Parameters: n (int): Number of events events (list): List of event tuples, each containing (item_id, current_owner, new_owner, time_stamp) Returns: dict: Dictionary with item_id as key and new_owner as value ownership = {} # Process each event for item_id, current_owner, new_owner, time_stamp in events: # Update the ownership record for the item ownership[item_id] = new_owner # Sort items by item_id and prepare the final ownership record sorted_ownership = {item_id: ownership[item_id] for item_id in sorted(ownership.keys())} return sorted_ownership"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese as well. Alice and Bob are playing a game with a string S consisting of lowercase English letters. Players take turns, with Alice going first. On each turn, the player selects a contiguous substring of the current string S and removes it if the substring is a palindrome. The removed substring can be of any length, but it must be a palindrome. The game ends when the string becomes empty. The player who cannot make a move on their turn loses. Your task is to determine if Alice or Bob will win the game assuming both play optimally. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S for a test case. ------ Output ------ For each test case, output a single line containing either \\"Alice\\" (without quotes) if Alice wins, or \\"Bob\\" (without quotes) if Bob wins the game. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 ------ Subtasks ------ Subtask #1 (20 points): 1 ≤ |S| ≤ 10 Subtask #2 (30 points): 1 ≤ |S| ≤ 50 Subtask #3 (50 points): No additional constraints. ----- Sample Input 1 ------ 3 a aba abca ----- Sample Output 1 ------ Alice Alice Bob ----- Explanation 1 ------ Example case 1. Alice will remove the only character \'a\', and will win the game. Example case 2. Alice will remove \'aba\' which is a palindrome and win the game. Example case 3. Alice cannot remove \'abc\' as it is not a palindrome, and the removal of individual characters one by one will benefit Bob who will make the final move and win.","solution":"def is_palindrome(s): return s == s[::-1] def determine_winner(s): if is_palindrome(s): return \\"Alice\\" else: return \\"Bob\\" def main(t, cases): results = [] for s in cases: results.append(determine_winner(s)) return results"},{"question":"Write a function that takes a string consisting of lowercase letters and responds with the longest possible Palindromic substrings of that string. If there are multiple substrings of the longest possible length, return all of them sorted lexicographically. A Palindromic string is a string that reads the same backwards as forwards. Input The first line contains the input string. The length of the string does not exceed 1000 characters. Output Output all longest palindromic substrings separated by a single space. Examples Input babad Output aba bab Input cbbd Output bb Input abcdcba Output abcdcba","solution":"def longest_palindromic_substrings(s: str): Returns all longest palindromic substrings of the given string s sorted lexicographically. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = [] max_length = 0 for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(s, i, i) # Even length palindromes palindrome2 = expand_around_center(s, i, i + 1) longer_palindrome = palindrome1 if len(palindrome1) >= len(palindrome2) else palindrome2 if len(longer_palindrome) > max_length: longest = [longer_palindrome] max_length = len(longer_palindrome) elif len(longer_palindrome) == max_length: longest.append(longer_palindrome) return \' \'.join(sorted(set(longest)))"},{"question":"You are given a list of people with their birth and death years. Assume that all people were born at the start of the year and died at the end of the year. Write an algorithm to find the year with the maximum number of people alive. Input Format The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of people. The next N lines each contain two integers representing the birth and death year of a person. Constraints 1 <= T <= 50 1 <= N <= 1000 1900 <= birth year <= death year <= 2000 Output Format For each test case, output the year with the maximum number of people alive. If multiple years have the same maximum number of people alive, return the earliest year. Sample Input 2 3 1900 1950 1920 1980 1930 1940 2 1975 2000 1980 1985 Sample Output 1930 1980 Explanation In the first test case, there are three people with overlapping lifespans, and 1930 is the year when the maximum (2) people are alive. In the second test case, 1980 has two people alive, which is the maximum.","solution":"def find_year_with_max_population(test_cases): results = [] for case in test_cases: N, people = case # Dictionary to track changes in population each year population_delta = {} for birth, death in people: if birth in population_delta: population_delta[birth] += 1 else: population_delta[birth] = 1 if death + 1 in population_delta: population_delta[death + 1] -= 1 else: population_delta[death + 1] = -1 max_population = 0 current_population = 0 year_with_max_population = 1900 for year in sorted(population_delta.keys()): current_population += population_delta[year] if current_population > max_population: max_population = current_population year_with_max_population = year results.append(year_with_max_population) return results # Function to process the input data and return test cases def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) people = [tuple(map(int, lines[i].split())) for i in range(index + 1, index + N + 1)] test_cases.append((N, people)) index += N + 1 return test_cases"},{"question":"Emily is an art enthusiast and she plans to participate in an upcoming art exhibition. For her artwork, she needs to attach a sequence of colorful beads on a string. She has a collection of beads, each with a specific color and size. To create a visually appealing sequence, she wants to place each bead such that the size of the beads strictly increases along the string from start to end. She knows the total number of beads she has and the size of each bead. She wonders what is the length of the longest strictly increasing subsequence of bead sizes she can create. -----Input----- The first line contains an integer N, the number of beads she has. Then follows N lines, each containing an integer s_i which represents the size of the bead. -----Output----- Print out the length of the longest strictly increasing subsequence of bead sizes. -----Limits----- - 1 leq N leq 100 - 1 leq s_i leq 1000 -----Examples----- Sample Input: 6 5 1 3 6 2 7 Sample Output: 4","solution":"def longest_increasing_subsequence(bead_sizes): Find the length of the longest strictly increasing subsequence from the given list of bead sizes. if not bead_sizes: return 0 n = len(bead_sizes) lis = [1] * n for i in range(1, n): for j in range(i): if bead_sizes[i] > bead_sizes[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) # Sample Input # N = 6 # bead_sizes = [5, 1, 3, 6, 2, 7] # Expected Output: 4"},{"question":"Write a function `mergeSortedArrays` that takes in two sorted arrays of integers and returns a new array that contains all the integers from the input arrays, sorted in non-decreasing order. For example, for `mergeSortedArrays([1,3,5],[2,4,6])` the result should be: ``` [1, 2, 3, 4, 5, 6] ``` The function must handle the following cases gracefully: * One or both input arrays can be empty. * The input arrays can have different lengths. * The input arrays can contain duplicate integers.","solution":"def mergeSortedArrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): A sorted list of integers. arr2 (list): A sorted list of integers. Returns: list: A list containing all integers from arr1 and arr2, sorted in non-decreasing order. # Initialize pointers for both arrays i, j = 0, 0 merged_array = [] # Traverse both arrays and merge them in sorted order while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, append them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, append them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given two strings S1 and S2. You need to check if S2 is an anagram of S1. Two strings are anagrams if they contain the same characters with the same frequency, but potentially in a different order. If they are anagrams, print \\"ANAGRAM\\" (without quotes); otherwise, print \\"NOT ANAGRAM\\" (without quotes). Input Format The first line contains the string S1. The second line contains the string S2. Both strings shall consist of lowercase English alphabets only. Output Format Print the required answer on a single line. Constraints 1 ≤ |S1|, |S2| ≤ 100 Note Both strings consist of lowercase English alphabets only. SAMPLE INPUT listen silent SAMPLE OUTPUT ANAGRAM","solution":"def check_anagram(s1, s2): Check if s2 is an anagram of s1. Args: s1 (str): First string. s2 (str): Second string. Returns: str: \\"ANAGRAM\\" if s2 is an anagram of s1, otherwise \\"NOT ANAGRAM\\". if sorted(s1) == sorted(s2): return \\"ANAGRAM\\" else: return \\"NOT ANAGRAM\\""},{"question":"Problem C You are given a polygon with `n` vertices represented by their coordinates in 2D space. The vertices are listed in counter-clockwise order. Your task is to determine if the polygon is convex. A polygon is convex if all of its interior angles are less than 180 degrees and it does not intersect itself. Otherwise, it is non-convex. Input The input consists of a single test case of the following format: n x_1 y_1 x_2 y_2 ... x_n y_n The first line contains an integer n (3 leq n leq 100), representing the number of vertices in the polygon. Each of the following n lines gives the coordinates of a vertex of the polygon with integers x_i and y_i (-1000 leq x_i leq 1000, -1000 leq y_i leq 1000). Output Output \\"YES\\" if the polygon is convex. Otherwise, output \\"NO\\". Sample Input 1 4 0 0 4 0 4 4 0 4 Sample Output 1 YES Sample Input 2 5 0 0 4 0 4 4 2 2 0 4 Sample Output 2 NO Example Input 4 0 0 4 0 4 4 0 4 Output YES Explanation In the first sample, the polygon is a square with vertices (0,0), (4,0), (4,4), and (0,4), which is a convex polygon. Therefore, the output is \\"YES\\". In the second sample, one vertex (2,2) makes an angle greater than 180 degrees, thus the polygon is non-convex. Therefore, the output is \\"NO\\".","solution":"def is_convex(polygon): Determines if a given polygon is convex. :param polygon: List of tuples [(x_1, y_1), (x_2, y_2), ..., (x_n, y_n)] :return: \\"YES\\" if the polygon is convex, otherwise \\"NO\\" def cross_product_sign(p1, p2, p3): Returns the sign of the cross product of vectors (p2 - p1) and (p3 - p2). x1, y1 = p1 x2, y2 = p2 x3, y3 = p3 return (x2 - x1) * (y3 - y2) - (y2 - y1) * (x3 - x2) n = len(polygon) if n < 3: return \\"NO\\" # Get the sign of the first non-zero cross product to set the initial direction initial_sign = 0 for i in range(n): sign = cross_product_sign(polygon[i], polygon[(i + 1) % n], polygon[(i + 2) % n]) if sign != 0: initial_sign = sign break # If all points are collinear (no valid cross product found) if initial_sign == 0: return \\"NO\\" # Check all the subsequent cross products for i in range(n): sign = cross_product_sign(polygon[i], polygon[(i + 1) % n], polygon[(i + 2) % n]) if sign != 0 and sign * initial_sign < 0: return \\"NO\\" return \\"YES\\""},{"question":"Given an integer array of length N, your task is to find the maximum sum of a subarray with the constraint that if you select a number, you cannot pick the next element or the element before it. That means you can only pick non-adjacent elements to form the subarray with the maximum sum possible. -----Constraints----- - 1 leq N leq 100 - The elements of the array are integers which can be negative or positive. -----Input----- Input is given from Standard Input in the following format: N array of length N -----Output----- Print the maximum sum. -----Sample Input----- 5 3 2 7 10 12 -----Sample Output----- 22","solution":"def max_non_adjacent_sum(arr): n = len(arr) if n == 0: return 0 if n == 1: return max(0, arr[0]) if n == 2: return max(0, arr[0], arr[1]) # Initialize the dp array dp = [0] * n dp[0] = max(0, arr[0]) dp[1] = max(0, arr[0], arr[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1] # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) array = list(map(int, data[1:1+N])) # Print the result print(max_non_adjacent_sum(array))"},{"question":"Problem Alex has a collection of n unique coins, and each coin has a distinct positive integer value. He likes arranging his coins in a particular way. Specifically, he wants to separate them into two groups such that: 1. The first group consists of coins whose values are prime numbers. 2. The second group consists of coins whose values are non-prime numbers. After separating the coins, he wants to sort the first group in descending order and the second group in ascending order. You are required to write a program to help Alex arrange his coins in the described manner. # Input The input consists of two lines: - The first line contains an integer n, the number of coins. - The second line contains n space-separated integers representing the values of the coins. # Output Output two lines: - The first line should contain the values of the prime coins sorted in descending order. - The second line should contain the values of the non-prime coins sorted in ascending order. # Constraints 1 ≤ n ≤ 1000 1 ≤ value of each coin ≤ 10^9 # Example Input 8 3 11 4 7 8 10 2 15 Output 11 7 3 2 4 8 10 15 # Note A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first few prime numbers are: 2, 3, 5, 7, 11, 13, etc. # Hint Consider writing a helper function to check if a number is prime. This will help in efficiently determining the group each coin belongs to.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def arrange_coins(n, coins): Arranges the coins into prime and non-prime groups, sorts the prime group in descending order, and sorts the non-prime group in ascending order. prime_coins = [] non_prime_coins = [] for coin in coins: if is_prime(coin): prime_coins.append(coin) else: non_prime_coins.append(coin) prime_coins.sort(reverse=True) non_prime_coins.sort() return prime_coins, non_prime_coins"},{"question":"Emma loves to play the game of \\"Magic Squares\\". A magic square is a grid of numbers where the sum of each row, each column, and both main diagonals are the same. Emma has a 3 times 3 grid and she wants to fill it with numbers from 1 to 9 such that it forms a magic square. However, Emma has already placed some numbers in the grid, and she wonders if she can still achieve a magic square by filling in the blanks. Given the current state of Emma\'s 3 times 3 grid, determine if it is possible to fill the empty cells such that the grid becomes a magic square. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". -----Input----- The input consists of three lines, each containing three integers representing the 3 times 3 grid. Empty cells are denoted by 0. Each integer in the grid is between 0 and 9. -----Output----- Print \\"YES\\" if it is possible to complete the grid as a magic square, otherwise print \\"NO\\". -----Examples----- Input 8 1 6 3 0 0 0 0 0 Output YES Input 4 9 2 3 5 7 8 6 1 Output YES Input 4 0 2 0 0 6 0 7 1 Output NO","solution":"def is_magic_square_possible(grid): def is_valid(grid): # Check for duplicates and valid number range flattened_grid = [cell for row in grid for cell in row if cell != 0] if len(flattened_grid) != len(set(flattened_grid)): # duplicates found return False if any(cell < 1 or cell > 9 for cell in flattened_grid): # invalid number range return False return True def check_magic(grid): # Sum of a 3x3 magic square magic_sum = 15 # Check rows and columns for i in range(3): row_sum = sum(grid[i]) col_sum = sum(grid[j][i] for j in range(3)) if row_sum != magic_sum or col_sum != magic_sum: return False # Check diagonals if sum(grid[i][i] for i in range(3)) != magic_sum or sum(grid[i][2 - i] for i in range(3)) != magic_sum: return False return True if not is_valid(grid): return \\"NO\\" # Create a superset of all possible 3x3 magic squares magic_squares = [ [[8, 1, 6], [3, 5, 7], [4, 9, 2]], [[6, 1, 8], [7, 5, 3], [2, 9, 4]], [[4, 9, 2], [3, 5, 7], [8, 1, 6]], [[2, 9, 4], [7, 5, 3], [6, 1, 8]], [[8, 3, 4], [1, 5, 9], [6, 7, 2]], [[4, 3, 8], [9, 5, 1], [2, 7, 6]], [[6, 7, 2], [1, 5, 9], [8, 3, 4]], [[2, 7, 6], [9, 5, 1], [4, 3, 8]], ] # Check all magic squares to see if any match the grid pattern for magic in magic_squares: match = True for r in range(3): for c in range(3): if grid[r][c] != 0 and grid[r][c] != magic[r][c]: match = False break if not match: break if match: return \\"YES\\" return \\"NO\\""},{"question":"In a faraway kingdom, people love puzzles, and the most popular game is \\"Magic Mirror.\\" The game involves a grid with **N** rows and **M** columns. Each cell in the grid contains a number, which is the cost to step on that cell. Players start from the top-left corner (1,1) and aim to reach the bottom-right corner (N,M). The objective is to find the minimum cost path from the start to the destination. Players can only move right or down from a cell. Given the grid, find the minimum cost to reach the bottom-right corner of the grid from the top-left corner. # Input: - The first line contains two integers, **N** and **M**: the number of rows and columns in the grid, respectively. - The next **N** lines contain **M** integers each, representing the grid where each integer is the cost for stepping on that cell. # Output: - Output a single integer: the minimum cost to reach the bottom-right corner of the grid. # Constraints: - 1 ≤ N, M ≤ 1000 - 1 ≤ cost ≤ 1000 for each cell in the grid # Sample Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output: ``` 7 ``` # Explanation: The minimum cost path is 1→3→1→1→1, with a total cost of 7.","solution":"def min_cost_path(N, M, grid): Returns the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Players can only move right or down. # Initialize a 2D dp array with 0\'s of same dimension as grid dp = [[0 for _ in range(M)] for _ in range(N)] # Fill the dp array with minimum costs for i in range(N): for j in range(M): if i == 0 and j == 0: dp[i][j] = grid[i][j] # Starting point elif i == 0: dp[i][j] = dp[i][j - 1] + grid[i][j] # Only move right in the first row elif j == 0: dp[i][j] = dp[i - 1][j] + grid[i][j] # Only move down in the first column else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # Move from top or left return dp[N - 1][M - 1]"},{"question":"Points: 15 You are part of a team developing software for a robotics company. The company’s robots are placed on a grid, starting at the top-left corner (0,0) and can only move either right or down at any point in time. Some cells of the grid are marked as obstacles, and the robot cannot enter these cells. The goal for the robot is to reach the bottom-right corner of the grid (n-1,m-1). Write a function to determine the number of unique paths that the robot can take to reach the target while avoiding obstacles. If there is no possible path, the function should return 0. Input: The first line contains an integer t, the number of test cases. For each test case: - The first line contains two integers n and m, representing the number of rows and columns in the grid. - The next n lines each contain m integers (0 or 1) representing the grid, where 0 represents an empty cell and 1 represents an obstacle. Output: For each test case, output the number of unique paths from the top-left corner to the bottom-right corner of the grid. Example: Input: 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 Output: 2 1","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def solve_test_cases(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Implement a simulator for a basic elevator system in a building. The building has a single elevator that travels between floors to pick up and drop off passengers. Design a program that models the elevator operation based on an input sequence of floor requests. **Rules and Assumptions:** - The building has `F` floors numbered from 1 to `F`. - The elevator starts at floor 1. - The elevator processes one request at a time. Once it processes a request, it moves directly to the requested floor. - The elevator\'s state updates after each request is processed. - Requests are given as an array of integers where each integer represents a floor number. - The elevator always serves requests in the order they are received. **Input:** - The first line contains an integer `F`, the number of floors in the building. - The second line contains an integer `N`, the number of floor requests. - The third line contains `N` integers, each representing a floor request. **Output:** - For each request, output the current floor of the elevator before processing the request, the requested floor, and the floors the elevator travels to. **Example:** Input: ``` 10 5 3 7 2 9 1 ``` Output: ``` Starting at Floor 1 Moving to Floor 3 Starting at Floor 3 Moving to Floor 7 Starting at Floor 7 Moving to Floor 2 Starting at Floor 2 Moving to Floor 9 Starting at Floor 9 Moving to Floor 1 ``` **Explanation:** - The elevator starts at floor 1. - It processes the first request by moving to floor 3. - Then, starting from floor 3, it processes the second request by moving to floor 7, and so on. - The output provides a trace of each step, showing the current floor, the destination floor, and the floors traversed for each request. **Notes:** - Edge cases to consider include invalid floor numbers (e.g., floors outside the range [1, F]) which should be ignored. - If there are no floor requests (N=0), the elevator remains at the starting floor, and no movement steps are printed. Implement the function `elevator_simulator(F: int, requests: List[int]) -> List[str]` that performs the described simulation and returns the sequence of movements.","solution":"from typing import List def elevator_simulator(F: int, requests: List[int]) -> List[str]: Simulates the operation of a basic elevator system based on the input sequence of floor requests. Parameters: F (int): The number of floors in the building. requests (List[int]): The list of floor requests by users. Returns: List[str]: A list of strings describing the elevator\'s movement steps. current_floor = 1 result = [] for request in requests: if 1 <= request <= F: result.append(f\\"Starting at Floor {current_floor}\\") result.append(f\\"Moving to Floor {request}\\") current_floor = request return result"},{"question":"You are given an integer array `nums` of length `n`. Your task is to determine the smallest subarray length such that the sum of its elements is greater than or equal to a given integer `s`. If no such subarray exists, return 0. -----Input----- The first line of the input contains two integers n (1 le n le 10^5) and s (1 le s le 10^9). The second line contains n integers nums_1, nums_2, ldots, nums_n (1 le nums_i le 10^4) – the elements of the array. -----Output----- Print one integer – the length of the smallest subarray with a sum of its elements greater than or equal to s. If no such subarray exists, print 0. -----Examples----- Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 11 1 2 3 4 5 Output 3 Input 7 100 1 2 3 4 5 6 7 Output 0","solution":"def smallest_subarray_with_sum(nums, n, s): Returns the length of the smallest subarray with a sum of its elements greater than or equal to s. If no such subarray exists, returns 0. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Mary is preparing for a coding competition and needs to solve several problems involving finding the longest increasing subsequence (LIS) in an array of integers. She wants to automate the process by writing a program that does this efficiently. Input Format: The first line contains an integer T, the number of test cases. Each test case contains two lines: - The first line contains an integer, n, the length of the array. - The second line contains n space-separated integers representing the elements of the array. Output Format: For each test case, output a single integer, the length of the longest increasing subsequence in the given array. Constraints: 1 <= T <= 100 1 <= n <= 1000 1 <= arr[i] <= 10^5 Sample Input: 3 8 10 22 9 33 21 50 41 60 6 3 10 2 1 20 4 5 3 2 1 0 -1 Sample Output: 5 3 1 Explanation: For the first test case, the longest increasing subsequence is [10, 22, 33, 50, 60], which has a length of 5.","solution":"def longest_increasing_subsequence(arr): Given an array of integers, returns the length of the longest increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def process_test_cases(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) results.append(longest_increasing_subsequence(arr)) index += 2 return results"},{"question":"Bob loves hiking and wants to track his progress. He keeps a record of the elevation changes he encounters during his hikes. An elevation change can either be an increase (+1), a decrease (-1), or no change (0). For instance, if Bob encounters a sequence of elevation changes as [+1, -1, +1, -1, 0], he ends up at the same elevation level he started. Bob is particularly interested in identifying the number of \\"valleys\\" he has hiked through. A valley is defined as a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level. Your task is to write a program that counts the number of valleys in the sequence of elevation changes for multiple test cases. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains a single integer N - the number of steps Bob took. - The second line contains N integers separated by spaces representing the sequence of elevation changes. -----Output----- For each test case, output a single line containing the number of valleys Bob experienced during that hike. -----Example----- Input: 2 8 -1 -1 1 1 -1 -1 0 1 12 1 -1 -1 -1 1 1 1 -1 -1 1 1 -1 Output: 1 2 -----Scoring----- Subtask 1 (20 points): T = 1000, 1 <= N <= 100, the absolute value of any elevation change is <= 1 Subtask 2 (30 points): T = 100, 1 <= N <= 1000, the absolute value of any elevation change is <= 1 Subtask 3 (50 points): T = 10, 1 <= N <= 10000, the absolute value of any elevation change is <= 1","solution":"def count_valleys(T, test_cases): Counts the number of valleys in each sequence of elevation changes. Parameters: T (int): The number of test cases test_cases (list of tuples): Each tuple consists of (N, sequence) where N is the number of steps and sequence is a list of elevation changes. Returns: list: A list of integers, each representing the number of valleys in the corresponding test case. results = [] for case in test_cases: N, sequence = case sea_level = 0 current_level = 0 valleys = 0 in_valley = False for change in sequence: current_level += change if current_level < sea_level and not in_valley: in_valley = True if current_level >= sea_level and in_valley: in_valley = False valleys += 1 results.append(valleys) return results"},{"question":"Given an array of integers (`arr`) of length `n`, and an integer `k` where `0 <= k <= n`, design a function that rotates the array to the right by `k` positions. Then, modify the rotated array such that every even number is doubled and every odd number is tripled. Finally, return the modified array. For example, if the input `arr` is `[1, 2, 3, 4, 5, 6]` and `k` is `2`, the rotated array becomes `[5, 6, 1, 2, 3, 4]`. Doubling every even number and tripling every odd number, the modified array will be `[15, 12, 3, 4, 9, 8]`. Visualizing the steps for the example can be done as: ``` modify_and_rotate_array([1, 2, 3, 4, 5, 6], 2) 1: [1, 2, 3, 4, 5, 6] 2: [5, 6, 1, 2, 3, 4] 3: [15, 12, 3, 4, 9, 8] modify_and_rotate_array([1, 2, 3, 4, 5, 6], 2) => [15, 12, 3, 4, 9, 8] ``` Use the following function signature: ``` def modify_and_rotate_array(arr: List[int], k: int) -> List[int]: # Your code here ```","solution":"from typing import List def modify_and_rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array to the right by k positions, then modifies the rotated array such that every even number is doubled and every odd number is tripled, and returns the modified array. # Rotate the array to the right by k positions n = len(arr) rotated_arr = arr[-k:] + arr[:-k] # Modify the array for i in range(n): if rotated_arr[i] % 2 == 0: rotated_arr[i] *= 2 else: rotated_arr[i] *= 3 return rotated_arr"},{"question":"There is a new game that has become popular among the members of the Quan_Lank team. The game involves manipulating and transforming arrays, and they are excited to solve as many challenges as possible related to this theme. Quan_Lank appreciates your help in coming up with an interesting puzzle. Puzzle - You are given an array of integers. Your task is to find the longest subarray such that the product of all its elements is an even number. Remember, an even number is any number which is divisible by 2. INPUT: The first line of input contains no. of test cases T (1 ≤ T ≤ 50). The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5), which represents the number of elements in the array. The second line of each test case contains n integers separated by spaces, representing the elements of the array. Each element is between 1 and 10^4. OUTPUT: For each test case, print a single integer - the length of the longest subarray where the product of its elements is an even number. If no such subarray exists, print 0. SAMPLE INPUT: 2 5 1 3 5 2 2 4 7 7 7 7 SAMPLE OUTPUT: 5 0","solution":"def longest_even_product_subarray(test_cases): results = [] for n, arr in test_cases: max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: max_length = max(max_length, current_length + 1) current_length = len(arr) break else: current_length += 1 results.append(n if max_length else 0) return results # Function to parse input and call the solution function def parse_and_solve(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return longest_even_product_subarray(test_cases)"},{"question":"Find the first non-repeating character in a string. ``` firstNonRepeatingCharacter(\\"a\\") => \\"a\\" firstNonRepeatingCharacter(\\"aaa\\") => None firstNonRepeatingCharacter(\\"abacabad\\") => \\"c\\" firstNonRepeatingCharacter(\\"abacabaabacaba\\") => None firstNonRepeatingCharacter(\\"abcdefg\\") => \\"a\\" firstNonRepeatingCharacter(\\"abccba\\") => None ``` The function should return the first non-repeating character in the input string. If all characters are repeating, it should return `None`. This problem can be solved in O(N) time, and you are encouraged to find a solution with this time complexity. Note that the input string will only contain lowercase alphabets.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the input string s. If all characters are repeating, returns None. from collections import OrderedDict frequency = OrderedDict() for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 for char in frequency: if frequency[char] == 1: return char return None"},{"question":"Alicia is planning to organize an office party. She wants to use a string of lights to decorate the office. Each light on the string can be either turned On (represented by \'1\') or Off (represented by \'0\'). However, Alicia is quite particular about the lights: she wants each segment of lights to have an even number of lights turned On. The string of lights is represented by a binary string s. Alicia considers each contiguous substring of the string s separately. The task is to determine the maximum number of lights (i.e., the maximum length of a contiguous substring) that can be selected such that the number of lights turned On in that substring is even. Input The only line of input contains a binary string s. The string consists of characters \'0\' and \'1\'. The string length does not exceed 1000 characters. Output Print the maximum length of a contiguous substring that has an even number of \'1\'s. If no such substring exists, print 0. Examples Input 110010 Output 5 Input 111 Output 2 Input 000 Output 3 Note In the first example, the substring \\"11001\\" has an even number of \'1\'s and its length is 5. In the second example, the substring \\"11\\" has an even number of \'1\'s and its length is 2. In the third example, all lights are off, so any substring has 0 \'1\'s, which is considered even. Hence, the length of the entire string (3) is the output.","solution":"def max_even_ones_substring(s): max_length = 0 n = len(s) for i in range(n): count_ones = 0 for j in range(i, n): if s[j] == \'1\': count_ones += 1 if count_ones % 2 == 0: max_length = max(max_length, j - i + 1) return max_length"},{"question":"You are working with a robotics company that develops AI-powered robots capable of navigating complex environments. In order to achieve optimal navigation, your team utilizes a grid-based system where the robots can move in four directions: up, down, left, and right. Each cell in the grid can either be empty or contain an obstacle. The objective of the robot is to move from the starting cell (top-left corner) to the destination cell (bottom-right corner). # Problem Given the dimensions of the grid (M x N) and the positions of the obstacles, determine the number of distinct paths the robot can take to reach the destination cell. The robot cannot move through cells that contain obstacles. # Input - M (the number of rows) and N (the number of columns) - K (the number of obstacles) - K lines follow, each containing two integers that represent the row and column index of an obstacle in the grid (0-indexed). # Output Output the number of distinct paths from the starting cell (0, 0) to the destination cell (M-1, N-1). If there is no possible path, output 0. # Constraints - (1 leq M, N leq 100) - (0 leq K leq M times N) # Example Input 1: ``` 3 3 1 1 1 ``` Output 1: ``` 2 ``` Input 2: ``` 3 3 3 0 1 1 1 2 1 ``` Output 2: ``` 0 ``` # Note In the first example, the grid looks like this: ``` . . . . x . . . . ``` There are two distinct paths from (0, 0) to (2, 2): 1. Right -> Down -> Down -> Right 2. Down -> Right -> Right -> Down In the second example, the grid looks like this: ``` . x . . x . . x . ``` There are no possible paths from (0, 0) to (2, 2) due to the obstacle configuration.","solution":"def unique_paths_with_obstacles(M, N, obstacles): Calculate the number of unique paths from the top-left to the bottom-right corner of a grid with given dimensions and obstacles. :param M: Number of rows :param N: Number of columns :param obstacles: List of tuples representing the coordinates of obstacles :return: Number of unique paths # Create the grid initialized with 0\'s grid = [[0] * N for _ in range(M)] # Mark obstacles on the grid for (r, c) in obstacles: grid[r][c] = -1 # Initial position (0, 0) can only be reached if it is not an obstacle if grid[0][0] == -1: return 0 # Initialize the starting position grid[0][0] = 1 # Fill the grid using dynamic programming for r in range(M): for c in range(N): if grid[r][c] == -1: continue if r > 0 and grid[r-1][c] != -1: grid[r][c] += grid[r-1][c] if c > 0 and grid[r][c-1] != -1: grid[r][c] += grid[r][c-1] return max(0, grid[M-1][N-1])"},{"question":"You are given a list of integers and an integer k. Your task is to determine if there exists a contiguous subarray (i.e., a section of consecutive elements) of the given list whose sum is exactly k. -----Input----- The first line of input contains one integer t (1 leq t leq 100): the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n (1 leq n leq 10^5) and k (-10^9 leq k leq 10^9): the length of the list and the target sum. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9): the elements of the list. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if there exists a contiguous subarray with sum equal to k, otherwise print \\"NO\\". -----Examples----- Input 3 5 9 1 2 3 4 5 5 12 1 2 3 4 5 5 15 1 2 3 4 5 Output YES YES YES -----Note----- In the first test case, the subarray [2, 3, 4] has the sum 9. In the second test case, the subarray [3, 4, 5] has the sum 12. In the third test case, the entire array [1, 2, 3, 4, 5] has the sum 15.","solution":"def has_contiguous_subarray_with_sum(arr, k): Determines if there exists a contiguous subarray whose sum is exactly k. :param arr: List[int], the list of integers. :param k: int, the target sum. :return: bool, True if such subarray exists, otherwise False. # Dictionary to store cumulative sum up to all indices cum_sum_map = {} # Initialize with cumulative sum at index -1 as 0 to handle case when subarray starts from index 0 cum_sum_map[0] = 1 current_sum = 0 for num in arr: current_sum += num if current_sum - k in cum_sum_map: return True # Record cumulative sum occurrence cum_sum_map[current_sum] = cum_sum_map.get(current_sum, 0) + 1 return False def solve(t, test_cases): Processes multiple test cases to check for each if there exists a contiguous subarray with sum k. :param t: int, the number of test cases. :param test_cases: List[Tuple[int, int, List[int]]], each element is a tuple (n, k, arr) :return: List[str], list of \\"YES\\" or \\"NO\\" results for each test case. results = [] for n, k, arr in test_cases: if has_contiguous_subarray_with_sum(arr, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A gaming company is developing a new simulation game and needs some help with the logic to manage player interactions. In the game, players can form connections with one another, similar to friendships. The connections follow these rules: 1. A player can initiate a connection with another player, but they cannot connect with themselves. 2. If player A is connected to player B, and player B is connected to player C, then player A is also considered connected to player C (transitive property). Given the interactions between players, you need to help the company determine the number of distinct connected groups of players after all connections have been established. Input: The first line contains an integer T, the number of test cases. Each test case starts with a line containing two integers N and M, the number of players and the number of connections respectively. The next M lines each contain two integers u and v, indicating that player u initiates a connection with player v. Output: For each test case, output a single integer - the number of distinct connected groups of players. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ M ≤ 10000 SAMPLE INPUT 2 5 3 1 2 2 3 4 5 4 2 1 2 3 4 SAMPLE OUTPUT 2 2","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if xroot != yroot: if rank[xroot] > rank[yroot]: parent[yroot] = xroot elif rank[xroot] < rank[yroot]: parent[xroot] = yroot else: parent[yroot] = xroot rank[xroot] += 1 def number_of_connected_groups(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] connections = test_cases[t][1] parent = [i for i in range(N)] rank = [0] * N for u, v in connections: union(parent, rank, u-1, v-1) connected_groups = len(set(find_parent(parent, i) for i in range(N))) results.append(connected_groups) return results"},{"question":"Wendy owns a farm that has N apple trees, each bearing a certain number of apples. Every day, Wendy can choose one tree and pick all its apples. After she picks the apples, that tree will not produce any more apples for that day. Wendy wants to maximize the total number of apples picked over the next M days. However, she can only pick the apples from each tree at most once over the entire span of M days. Your task is to write a program that determines the maximum number of apples Wendy can pick in M days. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}, where A_{i} is the number of apples on the i-th tree. ------ Output ------ For each test case, print a single line containing one integer ― the maximum number of apples Wendy can pick in M days. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 0 ≤ A_{i} ≤ 1000 for each valid i ------ Subtasks ------ Subtask #1 (10 points): N = 1 Subtask #2 (20 points): N, M ≤ 10 Subtask #3 (70 points): original constraints ----- Sample Input 1 ------ 2 5 3 2 5 1 3 6 4 2 8 1 1 8 ----- Sample Output 1 ------ 14 16 ----- Explanation 1 ------ Example case 1: Wendy has 5 apple trees with apples as [2, 5, 1, 3, 6], she can choose to pick apples from the trees with 6, 5, and 3 apples respectively, maximizing her total to 14 apples over 3 days. Example case 2: Wendy has 4 apple trees with apples as [8, 1, 1, 8], the optimal way is to pick from both trees bearing 8 apples to reach a total of 16 apples in 2 days.","solution":"def max_apples(T, cases): results = [] for case in cases: N, M = case[0] apples = case[1] apples.sort(reverse=True) results.append(sum(apples[:M])) return results"},{"question":"Alice loves playing with palindromes. She has a long string of lowercase alphabets, and she wants to know how many palindromic substrings she can find in it. A palindromic substring is a sequence of characters within the string that reads the same backward as forward. -----Input----- The input consists of a single line containing a string s (1 leq |s| leq 1000), where |s| denotes the length of the string. The string contains only lowercase alphabets. -----Output----- Output a single integer representing the count of distinct palindromic substrings within the given string. -----Examples----- Sample Input: ababa Sample Output: 9 Sample Input: abc Sample Output: 3","solution":"def count_palindromic_substrings(s): Returns the count of distinct palindromic substrings in the given string s. n = len(s) dp = [[False] * n for _ in range(n)] count = 0 for i in range(n): dp[i][i] = True count += 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] if dp[i][j]: count += 1 return count"},{"question":"Martha is organizing a contest for kids where they have to solve puzzles in four categories: Logic, Math, General Knowledge, and Creativity. Each kid will be scored on their performance in each category. The final score of each kid is the sum of their scores in the four categories. There are m kids in total, and each kid has a unique identifier ranging from 1 to m. Martha knows the scores for each kid and wants to determine the rank of her daughter, Lily, whose id is k. The ranking is determined based on the total scores in descending order. In case two or more kids have the same total score, they are ranked by their ids in ascending order. Help Martha find the rank of her daughter Lily. -----Input----- The first line contains two integers m (1 le m le 1000) and k (1 le k le m) — the number of kids and the id of Lily. The next m lines each contain four integers corresponding to the scores of each kid in Logic, Math, General Knowledge, and Creativity respectively. The id of the kid on the i-th line is equal to i. -----Output----- Print the rank of Lily in the contest. -----Examples----- Input 4 2 80 90 70 85 100 95 90 99 70 80 85 88 90 100 80 85 Output 1 Input 3 3 95 85 90 95 90 90 90 90 85 80 80 80 Output 3 -----Note----- In the first sample, the total scores of the kids are 325, 384, 323, and 355. Lily, with id 2, has the highest score of 384, so her rank is 1. In the second sample, the total scores of the kids are 365, 360, and 325. Lily, with id 3, has the score 325 which is the lowest, so her rank is 3.","solution":"def find_lily_rank(m, k, scores): Determines the rank of Lily based on the scores of m kids. Parameters: m (int): Number of kids. k (int): Id of Lily (1-indexed). scores (list of list of int): Scores of each kid in 4 categories. Returns: int: The rank of Lily. # Calculate total scores along with their ids total_scores = [(i+1, sum(score)) for i, score in enumerate(scores)] # Sort based on total score descending, then by id ascending total_scores.sort(key=lambda x: (-x[1], x[0])) # Find the rank of Lily for rank, (id, score) in enumerate(total_scores, start=1): if id == k: return rank"},{"question":"John is organizing a party and wants to make sure that none of his guests know each other beforehand to avoid cliques and ensure new connections. He has a list of his friends where each friend may know some other friends. John wants you to help him figure out if it\'s possible to invite a subset of his friends such that no two invited friends know each other. Given a list of friends and their connections, determine if there exists an independent set of friends (a subset of friends such that no two friends in this subset know each other) that John can invite. Write a function `can_invite(friends, connections)` that takes in: - `friends`: a list of strings where each string represents a friend\'s name. - `connections`: a list of tuples where each tuple `(a, b)` indicates that friend `a` knows friend `b` and friend `b` knows friend `a`. Return `True` if it is possible to find such a subset of friends, and `False` otherwise. # Input - `friends`: a list of strings representing the names of the friends. - `connections`: a list of tuples of strings representing the connections between the friends. # Output - Return `True` if there exists a subset of friends where no two friends know each other, otherwise return `False`. # Example ```python friends = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"] connections = [(\\"Alice\\", \\"Bob\\"), (\\"Bob\\", \\"Charlie\\"), (\\"Charlie\\", \\"David\\"), (\\"David\\", \\"Eve\\"), (\\"Eve\\", \\"Alice\\")] print(can_invite(friends, connections)) # Output: True ``` In this example, John can invite \\"Alice\\", \\"Charlie\\", and \\"Eve\\" because none of these friends know each other. # Constraints - All friends\' names are unique. - No duplicate connections exist in the list.","solution":"def can_invite(friends, connections): Returns True if there\'s an independent set of friends such that no two friends in this subset know each other. from collections import defaultdict, deque # Build graph graph = defaultdict(set) for a, b in connections: graph[a].add(b) graph[b].add(a) color = {} def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor in color: if color[neighbor] == color[node]: return False else: color[neighbor] = 1 - color[node] queue.append(neighbor) return True for friend in friends: if friend not in color: if not bfs(friend): return False return True"},{"question":"Piper is given a sequence of N integers. She can perform the following operations: 1. Pick any two consecutive integers in the sequence and merge them into one integer that is their sum. 2. Delete any single integer from the sequence. She wants to transform the sequence into a single integer with the minimum number of operations. Input: The first line of input contains an integer N - the number of elements in the sequence. The second line contains N space-separated integers - the elements of the sequence. Output: Print the minimal number of operations that Piper needs to perform. Constraints: 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 4 4 3 7 1 SAMPLE OUTPUT 3 Explanation 1. Merge the 3-rd and 4-th elements {4, 3, 7, 1} => {4, 3, 8} 2. Merge the 2-nd and 3-rd elements {4, 3, 8} => {4, 11} 3. Merge the 1-st and 2-nd elements {4, 11} => {15} Using 3 operations, Piper transforms the sequence into a single integer.","solution":"def minimal_operations(N, sequence): Compute the minimal number of operations to transform the sequence into a single integer. # The minimum number of operations is N - 1 # Merging N elements into one item will always take N-1 operations return N - 1 # Usage example: # N = 4 # sequence = [4, 3, 7, 1] # print(minimal_operations(N, sequence)) # Output should be 3"},{"question":"Given a list of distinct integers, you need to determine if there exists a pair of elements whose sum is equal to a given value. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". Input:- The first line of input contains an integer T, the number of test cases. Each test case consists of three lines: 1. An integer N, denoting the number of elements in the list. 2. N space-separated integers, denoting the elements of the list. 3. An integer K, the target sum value. Output:- For each test case, print \\"YES\\" if there exists at least one pair of integers in the list whose sum is equal to K, otherwise print \\"NO\\". SAMPLE INPUT 2 5 1 4 45 6 10 8 16 4 1 2 3 9 8 SAMPLE OUTPUT YES NO Explanation For the first test case: Elements are [1, 4, 45, 6, 10, 8], and the target sum is 16. The pair (10, 6) adds up to 16, so the output is \\"YES\\". For the second test case: Elements are [1, 2, 3, 9], and the target sum is 8. There is no pair that adds up to 8, so the output is \\"NO\\".","solution":"def pair_sum_exists(test_cases): For each test case, determine if there exists a pair of elements whose sum is equal to the given value. results = [] for case in test_cases: N, elements, K = case found = False seen = set() for num in elements: if K - num in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results def parse_input(input_str): Parses the input string to extract the test cases. lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) elements = list(map(int, lines[index + 1].split())) K = int(lines[index + 2]) test_cases.append((N, elements, K)) index += 3 return test_cases def pair_sum_exists_from_input(input_str): Takes input string, processes it and returns the results. test_cases = parse_input(input_str) return pair_sum_exists(test_cases)"},{"question":"Given an array of integers, you are allowed to perform the following operation multiple times (including zero): Operation: Select any two adjacent elements in the array and replace both with their sum. Determine the maximum possible value of the remaining single element after performing the operation. -----Constraints----- - The length of the array (n) is between 1 and 10^5. - Each element in the array is an integer between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the maximum possible value of the remaining single element after performing the operations. -----Sample Input----- 4 1 3 -2 5 -----Sample Output----- 7 Explanation: After the operation, the array [1, 3, -2, 5] can be summed as follows: 1. Select (3 + (-2)) to get [1, 1, 5] 2. Select (1 + 1) to get [2, 5] 3. Select (2 + 5) to get [7] which is the maximum possible value of remaining single element.","solution":"def max_single_element(n, array): Given an array of integers, determine the maximum possible value of the remaining single element by summing adjacent elements repeatedly. Parameters: n (int): Length of the array array (List[int]): Array of integers Returns: int: The maximum possible value of the remaining single element. return sum(array)"},{"question":"Write a function that takes in a 2D list representing a grid of letters and a word. The function should return True if the word can be found in the grid moving vertically or horizontally, and False otherwise. Words can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. For example, given the grid: ``` [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] ``` and the word \\"ABCCED\\", the function should return True.","solution":"def exist(board, word): Check if the word exists in the given board. :param board: List[List[str]], board of letters. :param word: str, the word to search for. :return: bool rows, cols = len(board), len(board[0]) def dfs(r, c, i): if i == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != word[i]: return False temp = board[r][c] board[r][c] = \\"#\\" found = (dfs(r + 1, c, i + 1) or dfs(r - 1, c, i + 1) or dfs(r, c + 1, i + 1) or dfs(r, c - 1, i + 1)) board[r][c] = temp return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False"},{"question":"You are given a grid of n rows and m columns composed of ASCII characters \'.\' (representing ground) and \'#\' (representing obstacles). A robot can move from a ground cell to any of its adjacent ground cells (up, down, left, or right) but cannot move into obstacle cells. The robot needs to find the minimum number of steps to get from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). Write a function `minimum_steps` that calculates the minimum steps required for the robot to traverse from the top-left corner to the bottom-right corner of the grid. If it is not possible to reach the destination, return -1. Your function should take the following parameters: - `n`: An integer representing the number of rows. - `m`: An integer representing the number of columns. - `grid`: A list of strings representing the grid, where each string is a row of the grid. Input and Output format: - Your function should return a single integer representing the minimum number of steps, or -1 if the destination is not reachable. Example: ``` python def minimum_steps(n: int, m: int, grid: List[str]) -> int: # Your code here # Example usage n = 3 m = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] print(minimum_steps(n, m, grid)) # Output: 4 ``` Explanation: In the example grid, the robot can move as follows: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) The minimum number of steps required is 4.","solution":"from typing import List, Tuple from collections import deque def minimum_steps(n: int, m: int, grid: List[str]) -> int: def valid(x: int, y: int) -> bool: return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Thorin has a bookshelf with n compartments, each of which can hold a number of books. Each compartment has a certain capacity, represented by an array `capacity` of size n. Thorin wants to fill each compartment with exactly its capacity of books, by choosing from a collection of m books. Each book has a unique ID represented by an array `books` of size m, and each book can fit into exactly one compartment. Your task is to help Thorin fill the bookshelf in such a way that each compartment is filled according to its capacity. Write a function `fill_bookshelf(n: int, capacity: List[int], m: int, books: List[int]) -> List[List[int]]` that will return a list of n lists, where each list contains the IDs of the books placed in the corresponding compartment. If it is not possible to fill the bookshelf according to the given rules, return an empty list. -----Input----- - An integer n (1 ≤ n ≤ 1000), the number of compartments. - A list `capacity` of n integers (1 ≤ capacity[i] ≤ 1000), representing the capacity of each compartment. - An integer m (1 ≤ m ≤ 10000), the number of books. - A list `books` of m integers, where each integer represents the ID of a book. -----Output----- Return a list of n lists, where each list contains the IDs of the books placed in the corresponding compartment. If it is not possible to fill the bookshelf according to the given rules, return an empty list. -----Examples----- Input n = 3 capacity = [2, 3, 4] m = 9 books = [1, 2, 3, 4, 5, 6, 7, 8, 9] Output [[1, 2], [3, 4, 5], [6, 7, 8, 9]] Input n = 2 capacity = [2, 2] m = 3 books = [1, 2, 3] Output [] Input n = 1 capacity = [5] m = 5 books = [10, 20, 30, 40, 50] Output [[10, 20, 30, 40, 50]]","solution":"from typing import List def fill_bookshelf(n: int, capacity: List[int], m: int, books: List[int]) -> List[List[int]]: if sum(capacity) != m: return [] result = [] book_index = 0 for compartment_index in range(n): compartment_capacity = capacity[compartment_index] compartment_books = books[book_index:book_index + compartment_capacity] result.append(compartment_books) book_index += compartment_capacity return result"},{"question":"Mary and John are two individuals who love geometric shapes. They recently played a game involving perfect squares on a grid. The game involves arranging points (representing vertices of squares) on a 2D grid. However, the rules are strict: the points must form squares with sides parallel to the x-axis and y-axis. Given a list of points on the 2D plane and a list of query points, determine for each query point how many points from the list can form a perfect square with it as one of the vertices. If there are no such points, return 0 for that query. # Input: 1. First line contains an integer T, the number of test cases. 1 <= T <= 50. 2. For each test case: - The first line contains an integer N, the number of points (N <= 100). - The next N lines contain two integers each, xi and yi (representing coordinates of a point on the 2D grid). -1000 <= xi, yi <= 1000. - The following line contains an integer Q, the number of query points (Q <= 100). - The next Q lines contain two integers each, xq and yq (representing coordinates of a query point). # Output: For each query point, output the count of points from the given list that can form a perfect square with that query point as one of its vertices. # Sample Input: 2 4 0 0 1 1 1 0 0 1 2 0 1 1 0 3 0 0 0 1 1 1 2 0 0 1 1 # Sample Output: 1 1 0 0 **Explanation:** - In the first test case, for the query point (0, 1), there is 1 point (1, 0) which can form a perfect square with it, resulting in the square with vertices (0, 1), (1, 0), (0, 0), and (1, 1). - Similarly, for the query point (1, 0), there is also 1 point (0, 1) which can form a perfect square with it. - In the second test case, for both query points, there are no points from the list which can form a perfect square. Hence, the output is 0 for both.","solution":"def count_squares(points, queries): points_set = set(points) result = [] for qx, qy in queries: count = 0 for x, y in points: if x == qx and y == qy: continue dx = x - qx dy = y - qy if (qx + dy, qy - dx) in points_set and (x + dy, y - dx) in points_set: count += 1 result.append(count) return result def process_test_cases(T, cases): results = [] for i in range(T): N, points, Q, queries = cases[i] result = count_squares(points, queries) results.append(result) return results # Helper function to read input and format it appropriately def parse_input(input_data): lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 cases = [] for _ in range(T): N = int(lines[index]) index += 1 points = [] for _ in range(N): x, y = map(int, lines[index].split()) points.append((x, y)) index += 1 Q = int(lines[index]) index += 1 queries = [] for _ in range(Q): xq, yq = map(int, lines[index].split()) queries.append((xq, yq)) index += 1 cases.append((N, points, Q, queries)) return T, cases input_data = \'\'\'2 4 0 0 1 1 1 0 0 1 2 0 1 1 0 3 0 0 0 1 1 1 2 0 0 1 1\'\'\' T, cases = parse_input(input_data) results = process_test_cases(T, cases) for result in results: for res in result: print(res)"},{"question":"A group of robots is positioned on a 1-dimensional infinite line. Each robot has a specific starting position and moves at a constant speed either to the left or right. When two robots collide, they reverse their directions of movement. You need to determine the final positions of all robots after a given amount of time. Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of robots. Each of the next n lines contains a pair of integers xi and vi (−10^9 ≤ xi ≤ 10^9, 1 ≤ vi ≤ 10^3) and a character di (\'L\' or \'R\') — the initial position, the speed, and the initial direction of the i-th robot respectively. \'L\' means left and \'R\' means right. All initial positions xi are distinct. Output Print n integers — the position of each robot after time t. Examples Input 3 -2 1 R -1 2 L 3 1 L Output -4 0 -1 Input 4 0 1 R 2 2 L 5 1 R -3 3 L Output -3 0 7 -6 Note that the collisions happen instantaneously, and the velocities of the robots are considered scalar quantities (only magnitudes, not directions).","solution":"def final_positions(n, robots, t): final_positions = [] for x, v, d in robots: final_position = x + v * t if d == \'R\' else x - v * t final_positions.append(final_position) return final_positions"},{"question":"A competitive programming contest has multiple participants, each attempting to solve several problems. Each problem solved gains the participant a certain number of points. At the end of the contest, the participants\' goal is to maximize their total points. You are provided with a list of the points earned by each participant for the problems they have solved. Write a program to determine the maximum points earned by any participant. -----Input----- The input consists of multiple lines: - The first line contains an integer p , (1 le p le 100), the number of participants. - The next p lines contain space-separated integers representing the points earned by each participant for the problems they solved. The number of integers in each line may vary, and each integer is between 1 and 100. -----Output----- Output a single integer, the maximum points earned by any participant. -----Examples----- Sample Input 1: 3 10 20 30 5 15 25 35 5 Sample Output 1: 40 Sample Input 2: 2 50 50 10 20 30 40 Sample Output 2: 100 Sample Input 3: 4 10 20 30 5 5 15 25 25 25 Sample Output 3: 75","solution":"def max_points(participants_points): Given the points earned by each participant, return the maximum points earned by any participant. :param participants_points: list of lists, with each sublist containing integers representing points earned by each participant. :return: integer, the maximum points earned by any participant. return max(sum(points) for points in participants_points) def parse_input(input_string): Parse the input string according to the description in the question. :param input_string: string, the multiline input string. :return: tuple, first element: integer number of participants, second element: list of lists with points for each participant lines = input_string.strip().split(\\"n\\") p = int(lines[0]) participants_points = [list(map(int, line.split())) for line in lines[1:]] return p, participants_points"},{"question":"Given are two arrays of integers A and B. Consider transforming array A to array B by repeating the operation below. Find the minimum number of operations required to do so. Operation: Choose one element of A and replace it with a different integer. ----- Constraints ----- - A and B have lengths between 1 and 2×10^5 (inclusive). - A and B consist of integers between -10^9 and 10^9. - A and B have equal lengths. ----- Input ----- Input is given from Standard Input in the following format: n A B ----- Output ----- Print the answer. ----- Sample Input ----- 5 1 2 3 4 5 1 3 3 2 5 ----- Sample Output ----- 2 We can achieve the objective in two operations, such as the following: - First, replace the second element 2 with 3. - Second, replace the fourth element 4 with 2.","solution":"def min_operations_to_transform(A, B): Calculate the minimum number of operations to transform array A to array B. Args: A (list of int): The original array. B (list of int): The target array. Returns: int: The minimum number of operations required. operations = 0 for a, b in zip(A, B): if a != b: operations += 1 return operations"},{"question":"A **base n** number is a representation of numbers using a radix or base _n_, where _n_ is an integer greater than 1. The most common base is the decimal system with base 10, followed by the binary system with base 2, and the hexadecimal system with base 16. Given a string representing a number in an unknown base from 2 to 36, write a function to determine the minimum possible base for that number. The numbers can be composed of digits (0-9) and letters (a-z) representing values (10-35). For example: - \'21\' can be represented in base 3 (which equals 2*3 + 1 = 7 in base 10) or higher bases. - \'1a\' can be represented in base 11 (1 * 11^1 + 10 = 20 in base 10) or higher bases. Your task is to write a function `minimum_base(number: str) -> int` that returns the minimum base for the given number. # Function Signature ```python def minimum_base(number: str) -> int: pass ``` # Input - `number`: A string representing the number in an unknown base (2 ≤ number ≤ 36). # Output - Returns the minimum base in which the given number can be expressed. # Example ```python # Example 1: minimum_base(\\"10\\") # Returns: 2 # Explanation: The digits are between 0 and 1, so the minimum base is 2. # Example 2: minimum_base(\\"2a\\") # Returns: 11 # Explanation: \'2\' is the highest digit, which implies minimum base of 11. # Example 3: minimum_base(\\"101\\") # Returns: 2 # Explanation: The digits are between 0 and 1, so the minimum base is 2. ``` # Constraints - The input string will always be a valid alphanumeric string representing a number. - The input string will not be empty and has a length ≤ 10. # Note - Consider all unique characters in the input to determine the minimum base. - The base must be at least as large as the highest numerical value + 1 of the digit in the input string.","solution":"def minimum_base(number: str) -> int: Calculate the minimum base for a given number represented as a string. Args: number (str): The input number represented as a string. Returns: int: The minimum base in which the given number can be expressed. max_digit = \'0\' for char in number: if char > max_digit: max_digit = char if \'0\' <= max_digit <= \'9\': max_value = ord(max_digit) - ord(\'0\') else: max_value = ord(max_digit) - ord(\'a\') + 10 return max_value + 1"},{"question":"In a magical enchanted forest, there are n magical trees positioned in a straight line. Each tree has a certain amount of magical power stored in it. The magical power stored in the i^{th} tree is given by an array P of size n where P_i represents the power of the i^{th} tree. A magical journey can be started from any tree, and during the journey, you can visit consecutive trees on either side. However, to retain the most powerful magical essence, you want to find the maximum sum of powers with the condition that no two chosen trees are adjacent. You are given multiple queries where each query provides the magical powers of trees in a forest. For each query, you need to find out the maximum possible sum of powers adhering to the given rule. -----Input----- The first line contains an integer t (1 leq t leq 10^3) — the number of queries. The first line of each query contains an integer n (1 leq n leq 10^5) — the number of magical trees in the forest. The second line of each query contains n integers — the magical power of each tree. It is guaranteed that the sum of n over all queries does not exceed 10^6. -----Output----- For each query, print the maximum sum of powers with the condition that no two chosen trees are adjacent. -----Example----- Input 3 4 3 2 5 10 3 1 2 3 5 5 5 10 100 10 Output 13 4 105 -----Note----- In the first query, the optimal choice is to pick trees with powers 3 and 10, resulting in a sum of 13. In the second query, the optimal choice is to pick trees with powers 1 and 3, resulting in a sum of 4. In the third query, the optimal choice is to pick trees with powers 5, 100, resulting in a sum of 105.","solution":"def max_non_adjacent_sum(powers): n = len(powers) if n == 0: return 0 if n == 1: return powers[0] dp = [0] * n dp[0] = powers[0] dp[1] = max(powers[0], powers[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + powers[i]) return dp[-1] def magical_forest(queries): results = [] for (n, powers) in queries: results.append(max_non_adjacent_sum(powers)) return results"},{"question":"Baket is attempting to escape from a maze. The maze is represented as a grid with n rows and m columns, where each cell can either be open (\'.\') or blocked (\'#\'). Baket can move up, down, left, or right, but cannot move diagonally, and she cannot move into a blocked cell. Initially, Baket is located at the top-left corner of the maze (0, 0) and she needs to reach the bottom-right corner (n-1, m-1). However, Baket can also use a single magic portal once during her escape. The magic portal allows her to instantly move from any cell (x1, y1) to another cell (x2, y2) regardless of whether these cells are blocked or not. Your task is to determine the minimum number of moves Baket needs to reach the bottom-right corner of the maze. If it\'s not possible for Baket to reach the bottom-right corner, with or without the use of the magic portal, return -1. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the maze. The following n lines each contain m characters \'.\' or \'#\', representing the maze. Output Print a single integer — the minimum number of moves Baket needs to reach the bottom-right corner of the maze. If it\'s not possible, print -1. Examples Input 4 4 .... .#.. .#.. .... Output 6 Input 3 3 # # # Output -1 Note In the first example, Baket can directly reach the bottom-right corner without using the magic portal in 6 moves, by following the path: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3). In the second example, there is no possible path for Baket to reach the bottom-right corner even using the magic portal, so the output is -1.","solution":"from collections import deque def min_moves(n, m, maze): def bfs(start, end, visited): queue = deque([start]) visited[start[0]][start[1]] = True moves = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == end: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) moves += 1 return float(\'inf\') if maze[0][0] == \'#\' or maze[n - 1][m - 1] == \'#\': return -1 # First BFS: without magic portal visited = [[False] * m for _ in range(n)] dist_without_portal = bfs((0, 0), (n - 1, m - 1), visited) if dist_without_portal != float(\'inf\'): return dist_without_portal # Use magic portal min_moves_with_portal = float(\'inf\') for i in range(n): for j in range(m): if maze[i][j] == \'.\': dist_from_start = bfs((0, 0), (i, j), [[False] * m for _ in range(n)]) dist_to_end = bfs((i, j), (n - 1, m - 1), [[False] * m for _ in range(n)]) if dist_from_start != float(\'inf\') and dist_to_end != float(\'inf\'): min_moves_with_portal = min(min_moves_with_portal, dist_from_start + 1 + dist_to_end) return -1 if min_moves_with_portal == float(\'inf\') else min_moves_with_portal"},{"question":"A new theme park has a series of roller coasters, each of which is either thrilling (T) or gentle (G). The park has arranged the roller coasters in a sequence, and they want to ensure that each park visitor has a balanced experience. To achieve this, the park management has set the following conditions: 1. Any sequence of consecutive thrilling rides must not be longer than K. 2. Any sequence of consecutive gentle rides must not be longer than K. Given the number of rides N and the limit K, as well as the current sequence of roller coasters, determine if the sequence already meets the conditions or if it\'s possible to rearrange the sequence to satisfy the conditions. If possible, print \\"YES\\". Otherwise, print \\"NO\\". Constraints: * 1 ≤ N ≤ 100,000 * 1 ≤ K ≤ N Input: The input is given from Standard Input in the following format: N K S Where: - N is the number of rides. - K is the maximum length of consecutive rides of the same type. - S is a string of length N, consisting of letters \'T\' and \'G\'. Output: Print \\"YES\\" if the sequence already meets the conditions or if it can be rearranged to meet the conditions. Otherwise, print \\"NO\\". Examples: Input: 6 1 TGGTTG Output: YES Input: 5 2 TTTGG Output: NO Input: 10 3 TGTGTGTGTT Output: YES","solution":"def can_roller_coasters_be_rearranged(N, K, S): Determines if the sequence of roller coasters can be rearranged to ensure that no more than K consecutive thrilling (T) or gentle (G) rides occur. Parameters: - N (int): Number of rides - K (int): Maximum allowed consecutive rides of the same type - S (str): Current sequence of rides Returns: - \'YES\' if the sequence satisfies the conditions or can be rearranged to do so, \'NO\' otherwise. def max_consecutive(S, char): count = 0 max_count = 0 for c in S: if c == char: count += 1 if count > max_count: max_count = count else: count = 0 return max_count # Check current sequence max_T = max_consecutive(S, \'T\') max_G = max_consecutive(S, \'G\') if max_T <= K and max_G <= K: return \\"YES\\" # Check possibility of rearranging count_T = S.count(\'T\') count_G = S.count(\'G\') if count_T <= (N + K) // (K + 1) and count_G <= (N + K) // (K + 1): return \\"YES\\" return \\"NO\\""},{"question":"In a distant land, there is a mystical forest with m magical trees, uniquely numbered from 1 to m. Each tree has a certain level of magic power associated with it. The magic power levels of the trees are given in an array of m integers. The wizard residing in the forest wants to collect the magic from a continuous subarray of these trees, with exactly k trees in it. He wants to collect as much magic power as possible, so he is interested in finding out the maximum sum of the magic power levels for any subarray of exactly k consecutive trees. Your task is to help the wizard find this maximum sum. Input The first line contains two integers m and k (1 ≤ k ≤ m ≤ 100,000) — the number of trees and the number of consecutive trees the wizard wants to collect magic from. The second line contains an array of m integers a1, a2, ..., am (|ai| ≤ 1,000) — the magic power levels of the trees. Output Print the maximum sum of the magic power levels of any subarray of exactly k consecutive trees. Examples Input 8 3 4 -1 -3 2 3 5 -8 6 Output 10 Input 5 2 -2 1 -3 4 -1 Output 3","solution":"def max_magic_power(m, k, magic_powers): Returns the maximum sum of the magic power levels for any subarray of exactly k consecutive trees. :param m: int - The number of trees. :param k: int - The number of consecutive trees the wizard wants to collect magic from. :param magic_powers: list of ints - The magic power levels of the trees. :return: int - The maximum sum of the magic power levels. # Compute the sum of the first k elements current_sum = sum(magic_powers[:k]) max_sum = current_sum # Use a sliding window to compute the sum of each subarray of size k for i in range(k, m): current_sum += magic_powers[i] - magic_powers[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a matrix with `n` rows and `m` columns. Each element of the matrix is either 0 or 1. Your task is to determine if there exists a path from the top-left corner of the matrix to the bottom-right corner of the matrix such that you can only traverse through cells containing 1. You can only move right or down from a cell. For instance, consider the following matrix: ``` 1 0 1 1 1 0 0 1 1 ``` In this case, there is a path from the top-left corner to the bottom-right corner: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with two integers `n` and `m` (1 ≤ n, m ≤ 100). Then follow n lines, each containing m integers each (either 0 or 1). Output For each test case, print \\"YES\\" if there exists such a path, otherwise print \\"NO\\". Examples Input 3 3 3 1 0 1 1 1 0 0 1 1 2 2 1 0 0 1 3 3 1 1 1 0 0 1 1 1 1 Output YES NO YES","solution":"def is_path_exists(n, m, matrix): Determines if there\'s a path from the top-left to the bottom-right corner of the matrix by moving right or down through cells containing 1. if matrix[0][0] == 0 or matrix[n-1][m-1] == 0: return \\"NO\\" # To keep track of visited cells. visited = [[False] * m for _ in range(n)] # Function to check if we can move to (x, y). def is_safe(x, y): return x >= 0 and y >= 0 and x < n and y < m and matrix[x][y] == 1 and not visited[x][y] # Use a queue for BFS. from collections import deque queue = deque([(0, 0)]) visited[0][0] = True # Directions right and down. directions = [(0, 1), (1, 0)] while queue: x, y = queue.popleft() # If we reached the bottom-right corner. if x == n-1 and y == m-1: return \\"YES\\" # Try moving in all possible directions. for dx, dy in directions: nx, ny = x + dx, y + dy if is_safe(nx, ny): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def exists_path(t, test_cases): results = [] for case in test_cases: n, m, matrix = case[\'n\'], case[\'m\'], case[\'matrix\'] results.append(is_path_exists(n, m, matrix)) return results"},{"question":"You are given a grid with R rows and C columns, where each cell in the grid contains a certain number of coins. From each cell, you can move to the cell directly below it or the cell directly to the right of it. Calculate the maximum number of coins you can collect if you start at the top-left corner and move to the bottom-right corner of the grid. -----Constraints----- - 1 leq R, C leq 300 - 0 leq number of coins in each cell leq 100 -----Input----- The input is given from Standard Input in the following format: R C grid[1][1] grid[1][2] ... grid[1][C] grid[2][1] grid[2][2] ... grid[2][C] : grid[R][1] grid[R][2] ... grid[R][C] -----Output----- Print one line containing the maximum number of coins you can collect. -----Sample Input----- 3 4 0 3 1 1 2 0 0 4 1 5 3 1 -----Sample Output----- 12 For the provided example, the maximum number of coins can be collected by moving as follows: - Start at (1, 1) with 0 coins. - Move right to (1, 2), collecting 3 coins (total = 3). - Move right to (1, 3), collecting 1 coin (total = 4). - Move right to (1, 4), collecting 1 coin (total = 5). - Move down to (2, 4), collecting 4 coins (total = 9). - Move down to (3, 4), collecting 1 coin (total = 10). - Move left to (3, 3), collecting 3 coins (total = 13). - Move left to (3, 2), collecting 5 coins (total = 18). In this case, we can only move down or right, and the maximum path results in 13 coins.","solution":"def max_coins(grid, R, C): Calculate the maximum number of coins that can be collected starting from the top-left corner to the bottom-right corner of a grid by only moving right or down. :param grid: List of lists representing the number of coins in each cell :param R: Number of rows in the grid :param C: Number of columns in the grid :return: Maximum number of coins collected # Create a 2D list to store maximum coins collected up to each cell dp = [[0] * C for _ in range(R)] # Initialize the starting cell with the initial number of coins dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the maximum coins collected return dp[R-1][C-1]"},{"question":"You are given two strings, `s1` and `s2`, consisting only of lower-case English letters. Write a method that takes these two strings as arguments and returns `True` if `s2` contains a permutation of `s1`, and `False` otherwise. A permutation of a string is another string that contains the same characters, only the order of characters can be different. Examples ```python s1 = \\"abc\\", s2 = \\"eidbaooo\\" Should return: True (s2 contains \\"ba\\" which is a permutation of \\"abc\\") s1 = \\"ab\\", s2 = \\"eidboaoo\\" Should return: False (s2 does not contain any permutation of \\"ab\\") ```","solution":"from collections import Counter def check_inclusion(s1, s2): Returns True if s2 contains any permutation of s1, otherwise False. len_s1, len_s2 = len(s1), len(s2) if len_s1 > len_s2: return False counter_s1 = Counter(s1) window = Counter(s2[:len_s1]) for i in range(len_s2 - len_s1): if counter_s1 == window: return True window[s2[i + len_s1]] += 1 window[s2[i]] -= 1 if window[s2[i]] == 0: del window[s2[i]] return counter_s1 == window"},{"question":"Alice and Bob are playing a number-guessing game. Alice thinks of a number, and Bob tries to guess it. Alice will respond to each guess with a hint that indicates how close the guess is to her number. The hint is an integer d that represents the number of digits in Bob\'s guess that have the correct value but are in the wrong position. For example, suppose Alice\'s number is 12345 and Bob\'s guess is 54321. Alice will respond with a hint of 5 because each digit in Bob\'s guess matches a digit in Alice\'s number but is in the wrong position. Your task is to write a program that finds one possible number Alice could be thinking of based on Bob\'s guess and the hint Alice provides. Input: - The first line contains an integer t (1 ≤ t ≤ 1000), the number of test cases. - Each test case consists of a single line containing Bob\'s guess and the hint, separated by a space. Bob\'s guess is a string of digits of length n (1 ≤ n ≤ 10^5) and the hint d (0 ≤ d ≤ n). Output: - For each test case, output \\"YES\\" if there is a valid number that Alice could be thinking of, or \\"NO\\" if there is no such number. If the answer is \\"YES\\", print one possible number that Alice could be thinking of. If there are multiple solutions, any valid one will do. Example: Input: 5 54321 5 12345 0 98765 3 24680 0 13579 4 Output: YES 23451 YES 12345 YES 59867 YES 24680 YES 15793 Note: - In the first test case, 23451 is one valid number where every digit in Bob\'s guess 54321 matches a digit in 23451 but is in the wrong position. - In the second test case, 12345 is already valid because there are no digits in the correct place, matching the hint 0. - In the third test case, 59867 has three digits (9, 8, 7) which are in the wrong position compared to the guess 98765. - In the fourth test case, since the hint is 0, the number could be identical to the guess as it has no digits in the correct place. - In the fifth test case, 15793 has all but one digit (9) in the wrong position compared to the guess 13579.","solution":"def possible_alice_number(guess, hint): n = len(guess) if hint == 0: return \\"YESn\\" + guess alice_number = list(guess) for i in range(n): alice_number[i] = str((int(guess[i]) + 1) % 10) return \\"YESn\\" + \\"\\".join(alice_number) def solve(t, test_cases): results = [] for i in range(t): guess, hint = test_cases[i].split() hint = int(hint) results.append(possible_alice_number(guess, hint)) return results"},{"question":"You are given a rectangular grid with `m` rows and `n` columns. Each cell in the grid can either be empty or contain an obstacle. A rat starts at the top-left corner of the grid and needs to find a path to the bottom-right corner. The rat can only move right or down. Write a function that determines the number of unique paths the rat can take to reach the destination, considering the obstacles. If the destination or the starting point itself has an obstacle, return 0. The grid is represented by a 2D list where 1 represents an obstacle and 0 represents an empty cell. Return the number of unique paths from the top-left corner to the bottom-right corner of the grid. Example: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There are two paths to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example: Input: grid = [[0,1],[0,0]] Output: 1 Explanation: There is only one path to reach the bottom-right corner: 1. Down -> Right Notes: - 1 <= m, n <= 100 - The obstacles and spaces are represented by 1 and 0 respectively.","solution":"def unique_paths_with_obstacles(grid): Return the number of unique paths from top-left corner to bottom-right corner considering the obstacles. The rat can only move right or down. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You have been hired to help optimize an irrigation system which waters a line of N plants. The watering system operates such that it can water a continuous segment of plants during a single session. However, due to water constraints, it cannot operate for more than K consecutive plants in one session. Additionally, due to soil conditions, there must be at least M units of time between two watering sessions. You are given an array A of length N, where A[i] represents the amount of water required by the i-th plant. You need to determine the minimum number of watering sessions required to water all plants such that the constraints are satisfied. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, K, and M respectively. - The second line of each test case contains N space-separated integers representing the array A. ------ Output Format ------ - For each test case, print a single line containing one integer — the minimum number of watering sessions required to water all plants. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{4} 1 ≤ K ≤ N 1 ≤ M ≤ 10^{4} 1 ≤ A[i] ≤ 10^{3} - Sum of N over all test cases doesn\'t exceed 10^{5} ------ Sample Input 1 ------ 3 6 2 1 2 3 1 4 2 5 8 3 2 1 2 3 4 5 1 1 1 5 1 2 5 4 3 2 1 ------ Sample Output 1 ------ 4 2 5 ------ Explanation 1 ------ Test Case 1: The watering sessions can be [2, 3], [1, 4], [2, 5]. Test Case 2: The watering sessions can be [1, 2, 3], [4, 5, 1], [1, 1]. Test Case 3: Each plant requires individual sessions due to M = 2.","solution":"def min_watering_sessions(T, test_cases): result = [] for case in test_cases: N, K, M, A = case session_count = 0 i = 0 while i < N: session_count += 1 i += K result.append(session_count) return result"},{"question":"**Geometry Encoding:** You are given a list of points in a 2D space, where each point is represented by its (x, y) coordinates. The objective is to create a function that encodes these points into a single string. The encoding should follow these rules: - For each point (x, y), encode it as \\"x_coord-y_coord\\". - All points should be separated by a pipe symbol (|). **Your Task:** Implement a function **encode_points** which takes a list of tuples as input, where each tuple contains two integers representing the x and y coordinates of a point, respectively. Return a single string representing the encoded points. **Examples:** encode_points([(1, 2), (3, 4), (5, 6)]) = \\"1-2|3-4|5-6\\" encode_points([(0, 0), (9, 9)]) = \\"0-0|9-9\\" encode_points([(2, 3)]) = \\"2-3\\"","solution":"def encode_points(points): Encodes a list of points into a single string. Args: - points: List of tuples, where each tuple contains two integers representing the x and y coordinates of a point. Returns: - A string representing the encoded points. return \'|\'.join(f\\"{x}-{y}\\" for x, y in points)"},{"question":"The mayor of a small town is planning a new park, and she wants to ensure that the park design is both beautiful and functional. One feature of the park will be a network of paths that connect all points of interest (POIs) directly, such as benches, fountains, and statues. Each path, however, costs money to construct, and she wants to minimize the total cost. She also wants to ensure that every pair of POIs is connected either directly by a path or indirectly through other POIs. However, the park layout must form a simple structure without any cycles (loops). In other words, the final layout should be a tree. You are given the number of POIs and a list of potential paths between pairs of POIs, each with a specified construction cost. Your task is to determine the minimum total cost required to construct a network of paths that satisfies the mayor\'s requirements. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of POIs and the number of potential paths, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — indicating that there is a potential path between POI u and POI v with a construction cost w. Output If it\'s possible to connect all POIs according to the mayor\'s requirements, print a single integer — the minimum total cost of constructing the paths. If it\'s not possible to satisfy the requirements, print -1. Examples Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Input 3 1 1 2 1 Output -1 Note In the first example, to connect all POIs with the minimum total cost, the selected paths could be from 1 to 2 with cost 1, from 2 to 3 with cost 2, and from 3 to 4 with cost 3. The total cost is 1 + 2 + 3 = 6. In the second example, it is not possible to connect all three POIs because there aren\'t enough paths to form a spanning tree. The output is -1.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_pois(n, paths): if n == 1: return 0 parent = [i for i in range(n)] rank = [0] * n paths.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in paths: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edges_used += 1 if edges_used == n - 1: return mst_cost return -1 def main(): import sys input = sys.stdin.read data = input().strip().split() n, m = int(data[0]), int(data[1]) paths = [] idx = 2 for _ in range(m): u, v, w = int(data[idx]), int(data[idx+1]), int(data[idx+2]) paths.append((u, v, w)) idx += 3 print(minimum_cost_to_connect_pois(n, paths)) if __name__ == \\"__main__\\": main()"},{"question":"Alice has a unique password system where her password is a string of uppercase English letters. To generate the next password, Alice follows these rules: 1. The password must be strictly greater than the current password, following lexicographical order. 2. The password must be composed only of uppercase English letters. 3. If it\'s not possible to generate a valid next password following the rules above, then she considers the next one to be \\"INVALID\\". Given the current password, your task is to generate the next password for Alice using the rules described above. **Input** The input consists of a single line that contains a string `s` (1 ≤ |s| ≤ 5) — the current password. **Output** Output a single string — the next password if it exists, otherwise \\"INVALID\\". **Examples** **Input:** ABCD **Output:** ABCE **Input:** AAAAA **Output:** AAAAB **Input:** ZZZZZ **Output:** INVALID **Note** In the first example, the next password greater than \\"ABCD\\" is \\"ABCE\\". In the second example, the next password greater than \\"AAAAA\\" is \\"AAAAB\\". In the third example, as \\"ZZZZZ\\" is the last possible combination of 5 uppercase letters, the answer is \\"INVALID\\". **Explanation of Lexicographical Order:** - In lexicographical order, the value of characters proceeds as A < B < ... < Z. - The next password must be strictly greater in this order. **Implementation Details:** - Consider how to handle the wraparound cases, where \'Z\' needs to be followed by \'A\'. - Think about how you can iterate through the string from the last character to the first in order to find the next valid password.","solution":"def next_password(s): Generates the next password based on Alice\'s rules. s_list = list(s) length = len(s_list) # Try incrementing from the last character backwards for i in range(length-1, -1, -1): if s_list[i] == \'Z\': s_list[i] = \'A\' else: s_list[i] = chr(ord(s_list[i]) + 1) return \'\'.join(s_list) # If we have reached here, all characters were \'Z\' and wrapped to \'A\' return \\"INVALID\\""},{"question":"A transportation agency is modernizing their route planning system to increase efficiency. The agency manages a fleet of buses with different seating capacities, and there are a number of routes with specific passenger demands. Each bus can operate on only one route per day and once assigned to a route, it cannot be reassigned for that day. Your task is to assign buses to routes in a way that maximizes the number of passengers transported. You are given the number of routes and their respective passenger demands, as well as the number of buses and their seating capacities. **Input** The first line contains an integer r (1 ≤ r ≤ 1000) — the number of routes. The next r lines contain two integers each: d_i (1 ≤ d_i ≤ 1000) — the demand of passengers for route i and s_i (1 ≤ s_i ≤ 1000) — the penalty for unfulfilled demand for route i. The next line contains an integer b (1 ≤ b ≤ 1000) — the number of buses. The last line contains b space-separated integers: c_1, c_2, ..., c_{b} (1 ≤ c_i ≤ 1000) — the seating capacity of each bus. **Output** The first line should contain two integers: n, p — the number of assigned routes and the total penalty for unfulfilled demands, respectively. Then print n lines — each line must contain two space-separated integers: the number of the bus and the number of the route. The routes and the buses are consecutively numbered starting from 1 in the order in which they are given in the input. If there are multiple optimal answers, print any of them. **Examples** Input 4 100 400 150 200 200 300 50 100 3 180 60 220 Output 3 300 1 4 3 2 2 1","solution":"def assign_buses_to_routes(routes, buses): # Sort buses by their seating capacity in descending order buses.sort(reverse=True) # Sort routes by their demand and penalty in descending order of demand routes = sorted(routes, key=lambda x: (-x[1], -x[2])) assigned_routes = [] total_penalty = 0 for bus_index, bus_capacity in enumerate(buses): for route_index in range(len(routes)): if routes[route_index][1] <= bus_capacity: assigned_routes.append((bus_index + 1, routes[route_index][0])) routes.pop(route_index) break for route_index in range(len(routes)): total_penalty += routes[route_index][1] * routes[route_index][2] return len(assigned_routes), total_penalty, assigned_routes def solve(bus_capacities, route_demands_penalties): routes = [(i + 1, demand, penalty) for i, (demand, penalty) in enumerate(route_demands_penalties)] assigned_routes_count, total_penalty, assignments = assign_buses_to_routes(routes, bus_capacities) print(assigned_routes_count, total_penalty) for bus, route in assignments: print(bus, route)"},{"question":"You are given an array of integers where every element appears twice except for one element which appears only once. Your task is to find that single one. INPUT The first line of the input contains a single integer, n, which is the number of integers in the array (2 <= n <= 10^5). The second line contains n space-separated integers, each integer represents an element of the array. OUTPUT Output a single integer, which is the element that appears only once. CONSTRAINTS 1 <= number <= 10^9 SAMPLE INPUT 7 4 1 2 1 2 3 4 SAMPLE OUTPUT 3","solution":"def find_single_number(arr): Given an array of integers where every element appears twice except for one element that appears only once, finds the single element that appears once. Args: arr (list): A list of integers. Returns: int: The single integer that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"Ram is participating in a marathon series where he has to complete a certain number of races. Each race has a set distance that he needs to cover. Ram wants to minimize his total running time by choosing the optimal speed for each race. There is a relationship between his speed and the time he takes to complete a race, and he has a maximum speed limit that he can use. For each race, you need to determine the minimum time required for Ram to complete the race given his maximum speed limit. Input Format: - n: Number of races Ram is going to participate in - s: Maximum speed limit of Ram - di: Distance of the i-th race Output Format: - A single integer containing the total minimum time required to complete all the races Constraints: 1 ≤ n ≤ 1000 1 ≤ s, di ≤ 10^5 SAMPLE INPUT 3 10 25 40 35 SAMPLE OUTPUT 10","solution":"def minimum_total_time(n, s, distances): Returns the minimum total time required for Ram to complete all races. Parameters: n (int): Number of races s (int): Maximum speed limit of Ram distances (list of int): Distances of each race Returns: int: Minimum total time to complete all races total_time = 0 for distance in distances: total_time += distance / s return int(total_time)"},{"question":"You are a software engineer working on a system for managing event schedules. To simplify scheduling, you want to implement a program that helps to find overlapping events. You are given n events, each described by a start time and an end time. An event overlaps with another if and only if both include at least one common time instant. You need to find the maximum number of events that overlap at any time. Input The first line contains a single integer n (1 ≤ n ≤ 10,000) — the number of events. Each of the next n lines contains two integers s and t (0 ≤ s < t ≤ 10^5), representing the start and end time of an event. Output Output a single integer — the maximum number of overlapping events. Example Input 5 1 5 2 6 4 6 5 8 7 9 Output 3 Explanation For example, with 5 events (1,5), (2,6), (4,6), (5,8), and (7,9), the maximum overlap occurs during the times from 4 to 5, where events (1,5), (2,6), and (4,6) all overlap. Hence, there are 3 overlapping events at that time, and the result is 3.","solution":"def find_max_overlap(events): Returns the maximum number of overlapping events. event_points = [] for s, t in events: event_points.append((s, \'start\')) event_points.append((t, \'end\')) # Sort event points, \'end\' comes before \'start\' if time is the same event_points.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 for point in event_points: if point[1] == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"Help Suzuki organize his library! Suzuki is an avid reader and owns a vast library filled with books of various genres. However, over time, the books have become disorganized and Suzuki wants to tidy them up. You will be given a string `library` representing the library, where each book and its genre are separated by a space. The genres that Suzuki is interested in are `fiction`, `non-fiction`, and `science`. Any book from other genres needs to be replaced with `miscellaneous`. For example, given the `library` string: ```python library = \'fiction novel1 non-fiction biography1 science research1 history classic1 fiction novel2 poetry collection1 non-fiction essay1 science research2 mystery thriller1 fiction novel3\' ``` Return a string where all books not belonging to the genres `fiction`, `non-fiction`, or `science` are replaced with `miscellaneous`: ```python organized_library = \'fiction novel1 non-fiction biography1 science research1 miscellaneous classic1 fiction novel2 miscellaneous collection1 non-fiction essay1 science research2 miscellaneous thriller1 fiction novel3\' ``` Please write a function `organize_library(library: str) -> str` that takes the `library` string as input and returns the `organized_library` string as per the given example. Ensure your function handles various inputs and edge cases appropriately.","solution":"def organize_library(library: str) -> str: genres_of_interest = {\'fiction\', \'non-fiction\', \'science\'} library_list = library.split() organized_list = [] i = 0 while i < len(library_list): genre = library_list[i] if genre in genres_of_interest: organized_list.append(genre) else: organized_list.append(\'miscellaneous\') i += 1 organized_list.append(library_list[i]) i += 1 return \' \'.join(organized_list)"},{"question":"You are given a grid of size n times m consisting of cells filled with integers. The grid is special because it is sorted in a zigzag manner. Specifically, each row is sorted alternatively in increasing and decreasing order. The rows in even positions (0-based index) are sorted in increasing order from left to right, while rows in odd positions are sorted in decreasing order from left to right. For example, a 3x5 grid could look like this: ``` 1 2 3 4 5 10 9 8 7 6 11 12 13 14 15 ``` Your task is to find the kth smallest element in a given grid. -----Input----- The first line of the input contains three integers n (1 le n le 1000), m (1 le m le 1000), and k (1 le k le n times m). Each of the next n lines contains m integers describing the grid. The integers in the grid are distinct and are in the range 1 to 10^6. -----Output----- Output a single integer, the kth smallest element in the grid. -----Examples----- Input 3 5 7 1 2 3 4 5 10 9 8 7 6 11 12 13 14 15 Output 7 Input 4 4 8 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13 Output 8 -----Note----- In the first example, the sorted order of elements is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] and the 7th smallest element is 7. In the second example, the sorted order of elements is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] and the 8th smallest element is 8.","solution":"def kth_smallest_in_zigzag_grid(n, m, k, grid): Returns the k-th smallest element in the grid sorted in a zigzag manner. # Flatten the grid into a single list flat_list = [] for row in grid: flat_list.extend(row) # Sort the flat list to get sorted order of elements flat_list.sort() # Return the k-th smallest element (1-based index) return flat_list[k-1]"},{"question":"There is a library system which involves multiple library branches servicing a network of users. Each branch is defined by its unique branch ID and the number of books it holds. Users are associated by a unique user ID and can be members of multiple branches simultaneously. Your task is to track the availability of a specific book across all branches. If a book is not available in the user\'s associated branches, the answer should be \\"unavailable\\". If the book is available in any one of the branches the user is associated with, the answer should specify the branch IDs (in ascending order) where the book is available. Input The first line contains an integer `B` (1 ≤ B ≤ 1000) — the number of branches. The next `B` lines each contain two values: an integer `branchID` (1 ≤ branchID ≤ 1000) and a string list of `books` available in the branch. The list of books for a branch is space-separated, and each book is specified by its `bookID` (1 ≤ bookID ≤ 1000). The next line contains an integer `U` (1 ≤ U ≤ 1000) — the number of users. The next `U` lines each contain two values: an integer `userID` (1 ≤ userID ≤ 1000) and a string list of `branchIDs` the user is associated with. The list of branch IDs is space-separated. The next line contains an integer `Q` (1 ≤ Q ≤ 1000) — the number of queries. The following `Q` lines each contain a pair of integers `userID` and `bookID`. Output For each query, print a single line that either specifies the ordered list of branch IDs (space-separated) where the book is available for the given user or \\"unavailable\\" if the book is not available in any associated branch. Example Input 3 1 101 102 103 2 101 104 3 101 105 2 1 1 2 2 2 3 2 1 101 2 103 Output 1 2 unavailable","solution":"def track_book_availability(B, branches, U, users, Q, queries): branch_books = {} user_branches = {} for branch in branches: branchID = branch[0] books = branch[1:] branch_books[branchID] = set(books) for user in users: userID = user[0] associated_branches = user[1:] user_branches[userID] = set(map(int, associated_branches)) results = [] for query in queries: userID, bookID = query available_branches = [] for branchID in user_branches.get(userID, []): if str(bookID) in branch_books.get(branchID, []): available_branches.append(branchID) if available_branches: results.append(\\" \\".join(map(str, sorted(available_branches)))) else: results.append(\\"unavailable\\") return results"},{"question":"Given an array of integers, the \\"peak element\\" is an element that is greater than its neighbors. For corner elements, we need to consider only one neighbor. Write a function that returns any one of the peak elements. ------ Input Format ------ - The first line of input contains an integer N, the number of elements in the array. - The second line contains N integers representing the array elements. ------ Output Format ------ - Output any one peak element from the array. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9 ------ Sample Input 1 ------ 5 1 3 20 4 1 ------ Sample Output 1 ------ 20 ------ Explanation 1 ------ - 20 is a peak element because it is greater than its neighbors 3 and 4. ------ Note ------ - In the case of multiple peaks, the function can return any one of them. - The function must run in O(log N) time. ------ Sample Input 2 ------ 6 10 20 15 2 23 90 ------ Sample Output 2 ------ 20 ------ Explanation 2 ------ - 20 is a peak element because it is greater than its neighbor 10 and 15. - Another potential peak element is 90, but the function only needs to return one peak element.","solution":"def find_peak_element(arr): Returns any one peak element in the array. Uses a binary search approach to find the peak element in O(log N) time. low = 0 high = len(arr) - 1 while low < high: mid = (low + high) // 2 if arr[mid] > arr[mid + 1]: high = mid else: low = mid + 1 return arr[low]"},{"question":"Given an N x N matrix, rotate the matrix 90 degrees clockwise in place. Example 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Example 2: Input: matrix = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]] Output: [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotate() which takes the matrix as an argument and rotates it 90 degrees clockwise. Constraints: 1 ≤ N ≤ 100 1 ≤ matrix[i][j] ≤ 1000","solution":"def rotate(matrix): Rotates the given N x N matrix 90 degrees clockwise in place. n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"Given a list of dictionaries, where each dictionary contains the keys \'name\', \'age\', and \'score\', write a program to find the name(s) of the person(s) with the highest score. If there are multiple people with the same highest score, return all their names in alphabetical order. -----Constraints----- - Each dictionary will have the keys \'name\' (string), \'age\' (integer), and \'score\' (integer). - The list contains at least one dictionary. - No two persons have the same name. -----Input----- Input is given from Standard Input in the following format: - The number of dictionaries n (integer). - n lines follow, each containing a dictionary in the format \\"name age score\\". -----Output----- Output the name(s) of the person(s) with the highest score in alphabetical order, each on a new line. -----Sample Input----- 3 Alice 30 88 Bob 25 91 Charlie 20 91 -----Sample Output----- Bob Charlie","solution":"def highest_scorers(data): Finds the name(s) of the person(s) with the highest score and returns them in alphabetical order. # Find the maximum score in the data max_score = max(person[\'score\'] for person in data) # Collect the names of people with the maximum score highest_scorers = [person[\'name\'] for person in data if person[\'score\'] == max_score] # Sort the names alphabetically highest_scorers.sort() return highest_scorers"},{"question":"You are given a list of `n` integers representing different weights of items in a warehouse. Your task is to rearrange these weights into the lexicographically smallest permutation. To achieve this, you are allowed to perform any of the following operations any number of times: 1. Swap two neighboring weights in the list. 2. Rotate the entire list once to the left or to the right. Input The first line contains a single integer `n` (2 ≤ n ≤ 105), the number of items. The second line contains `n` space-separated integers representing the weights of the items (1 ≤ weight ≤ 109). Output Output a single line containing the lexicographically smallest permutation of the input list after performing the allowed operations. Examples Input 4 4 3 2 1 Output 1 2 3 4 Input 5 3 1 4 2 5 Output 1 2 3 4 5","solution":"def lexicographically_smallest_permutation(weights): Returns the lexicographically smallest permutation of the weights list. Args: weights (list[int]): The list of weights of items in the warehouse. Returns: list[int]: The lexicographically smallest permutation of weights. # Sorting the weights will give us the lexicographically smallest permutation return sorted(weights)"},{"question":"Given an array A[] of length N, rotate the array to the right by K steps. Modify the array in-place and return the modified array. Example 1: Input: N = 7 K = 3 Array = {1, 2, 3, 4, 5, 6, 7} Output: {5, 6, 7, 1, 2, 3, 4} Explanation: Rotating the array to the right by 3 steps gives the sequence 5, 6, 7, 1, 2, 3, 4. Example 2: Input: N = 5 K = 2 Array = {10, 20, 30, 40, 50} Output: {40, 50, 10, 20, 30} Explanation: Rotating the array to the right by 2 steps gives the sequence 40, 50, 10, 20, 30. Your Task: You don\'t need to read input or print anything. Complete the function rotate_array() which takes the array A[], its size N, and an integer K as input parameters and modifies it in place to perform the rotation. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{4} 0 ≤ K < 10^{4} 0 ≤ A[i] ≤ 10^{6}","solution":"def rotate_array(A, N, K): Rotates the array A of length N to the right by K steps. This function modifies A in-place. # If K is 0 or N is less than or equal to 1, no rotation needed if N <= 1 or K == 0: return A # Normalize K if it\'s greater than N K %= N # Reverse the whole array A.reverse() # Reverse the first K elements A[:K] = reversed(A[:K]) # Reverse the rest of the elements A[K:] = reversed(A[K:]) return A"},{"question":"Even Fibonacci Numbers Sum Brief Given a positive integer `n`, write a function `even_fib_sum` that calculates the sum of all the even Fibonacci numbers that are less than or equal to `n`. The Fibonacci sequence is defined as: * F(0) = 0, F(1) = 1 * F(n) = F(n-1) + F(n-2) for n > 1 Your function should handle reasonably large values of `n` efficiently. Specifications You\'ll be given: - A positive integer `n`. You need to return: - An integer representing the sum of all even Fibonacci numbers that do not exceed `n`. Example ```python # The Fibonacci sequence up to 10 is: 0, 1, 1, 2, 3, 5, 8 # The even Fibonacci numbers up to 10 are: 0, 2, 8 # Their sum is: 0 + 2 + 8 = 10 even_fib_sum(10) == 10 # The Fibonacci sequence up to 34 is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 # The even Fibonacci numbers up to 34 are: 0, 2, 8, 34 # Their sum is: 0 + 2 + 8 + 34 = 44 even_fib_sum(34) == 44 ```","solution":"def even_fib_sum(n): Returns the sum of all even Fibonacci numbers that are less than or equal to n. a, b = 0, 1 sum_even = 0 while a <= n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Peter is organizing a marathon and wants to ensure the safety of the runners by setting up water stations along the route. The marathon route is represented as a straight line from the start to the finish line, and water stations need to be placed at specific intervals. Given the length of the marathon route, the interval at which the water stations need to be placed, and the list of important events (like medical tents, cheering zones, etc.) which must not coincide with the water stations, help Peter determine the positions of all water stations such that no water station coincides with an important event. Input The first line of the input contains two integers l and d, where l (1 ≤ l ≤ 1000) represents the length of the marathon route and d (1 ≤ d ≤ 100) represents the interval at which water stations need to be placed. The second line contains a single integer n (0 ≤ n ≤ 50), the number of important events. The third line contains n distinct integers e1, e2, ..., en (1 ≤ ei ≤ l), the positions of important events along the route. Output Output the positions of all water stations such that no water station coincides with the position of any important event. Examples Input 20 5 2 5 15 Output 10 20 Input 30 6 3 6 12 24 Output 18 30 Input 15 4 0 Output 4 8 12 Note In the first sample, water stations should be placed every 5 units (5, 10, 15, 20). However, since there are important events at positions 5 and 15, water stations need to be adjusted to avoid these positions. The resulting water stations would be at positions 10 and 20. In the second sample, the important events are at positions 6, 12, and 24, so water stations placed at multiples of 6 need to avoid these positions, resulting in water stations at positions 18 and 30.","solution":"def water_stations(l, d, n, events): Returns the positions of all water stations such that no water station coincides with an important event. Parameters: l (int): Length of the marathon route. d (int): Interval at which water stations need to be placed. n (int): Number of important events. events (list of int): Positions of important events. Returns: list of int: Positions of water stations. water_stations = [] event_set = set(events) for i in range(d, l + 1, d): if i not in event_set: water_stations.append(i) return water_stations"},{"question":"Implement a function that takes a string representing a mathematical expression and evaluates whether parentheses in it are balanced. The function should return a boolean indicating whether the parentheses are correctly paired. Parentheses are considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. Input Specification Input a variable `t` which is the number of test cases. Then input `t` strings which represent mathematical expressions containing only characters (`a-z`, `A-Z`, `0-9`), parentheses `()`, and arithmetic operators `+`, `-`, `*`, and `/`. Output Specification Output consists of `t` boolean values, each representing whether the parentheses in the corresponding input expression string are balanced (`true` or `false`). Example Sample Input: 3 (a+b)*(c-d) ((a+b) a+b)-(c*(d/e)) Sample Output: true false false","solution":"def are_parentheses_balanced(expressions): For each expression in the list, check if the parentheses are balanced. :param expressions: List of strings, where each string is a mathematical expression. :return: List of booleans, each representing whether the corresponding expression has balanced parentheses. results = [] for expression in expressions: stack = [] balanced = True for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: balanced = False break stack.pop() if stack: balanced = False results.append(balanced) return results"},{"question":"Given N positive integers, you are required to determine the number of pairs (i, j) such that: 1. 1 ≤ i < j ≤ N 2. arr[i] + arr[j] is an even number. Input Format: - The first line contains a single integer N, denoting the number of elements in the array. - The second line contains N space-separated integers, representing the elements of the array. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 Output Format: Print the number of valid pairs (i, j) in a single line. Example Input: 5 1 2 3 4 5 Example Output: 4 Explanation: The valid pairs are (1, 3), (1, 5), (2, 4), and (3, 5).","solution":"def count_even_sum_pairs(arr): Returns the number of pairs (i, j) such that: 1. 1 ≤ i < j ≤ N 2. arr[i] + arr[j] is an even number. # Count number of even and odd numbers even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Calculate pairs even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs # Example Usage if __name__ == \\"__main__\\": N = int(input()) arr = list(map(int, input().split())) print(count_even_sum_pairs(arr))"},{"question":"A company organizes a weekly coding challenge where participants earn points based on their performance. The participant with the most points at the end of the challenge is considered the winner. If there\'s a tie in the points, the participant who earned the most points earlier is declared the winner. You are tasked with developing a system that can process the results of multiple participants over multiple weeks and determine the winner for each week. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of participants and the number of weeks, respectively. The next n lines contain a string and m integers. The string represents the participant\'s name, and the m integers represent the points the participant earned each week. Output Output m lines, each containing the name of the winner of the challenge for the respective week. Examples Input 3 3 Alice 10 5 7 Bob 5 10 20 Charlie 20 10 15 Output Charlie Bob Bob Input 4 2 Alice 15 10 Bob 15 10 Charlie 10 20 David 15 25 Output Alice David Note In the first sample, for the first week, Charlie has the most points (20). For the second week, Bob and Charlie both have 10 points, but Bob received his points earlier than Charlie. For the third week, Bob has the most points (20). In the second sample, for the first week, Alice and Bob both have 15 points, but Alice received her points earlier than Bob. For the second week, David has the most points (25).","solution":"def determine_weekly_winners(participant_data): Determines the weekly winner of a coding challenge based on points. Parameters: participant_data (list of tuples): Each tuple contains a participant\'s name and a list of weekly scores. Returns: list of str: The names of the winners for each week. n = len(participant_data) m = len(participant_data[0][1]) weekly_winners = [] for week in range(m): # Loop through each week max_points = -1 winner = \\"\\" for i in range(n): # Loop through each participant name, scores = participant_data[i] if scores[week] > max_points: max_points = scores[week] winner = name weekly_winners.append(winner) return weekly_winners"},{"question":"Cleo likes to play with strings. She has a string S of length N made up of lowercase English letters. Cleo defines the beauty of a substring as the number of unique characters in that substring. Cleo wants to determine the maximum beauty of any substring of S. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains a string S of length N. -----Output----- For each test case, print a single line containing one integer ― the maximum beauty of any substring of S. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - S consists of lowercase English letters only. -----Subtasks----- Subtask #1: (100 points) original constraints -----Example Input----- 2 5 abcba 3 aaa -----Example Output----- 3 1","solution":"def max_beauty_of_substring(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] max_unique_chars = len(set(S)) results.append(max_unique_chars) return results"},{"question":"Given two lists of integers `list1` and `list2`, write a function to return a list containing all elements that appear in either `list1` or `list2`, but not both. Ensure the result list is sorted in ascending order. -----Constraints----- - Each list can contain up to 10^5 integers. - Each integer in the lists will be in the range -10^9 to 10^9. -----Input----- Input is given as follows: - The first line contains an integer N, the number of integers in `list1`. - The second line contains N integers separated by spaces, representing `list1`. - The third line contains an integer M, the number of integers in `list2`. - The fourth line contains M integers separated by spaces, representing `list2`. -----Output----- Output a single line containing the sorted integers that appear in either `list1` or `list2`, but not both, separated by spaces. -----Sample Input----- 5 1 2 3 4 5 5 4 5 6 7 8 -----Sample Output----- 1 2 3 6 7 8 # Explanation - The integers `4` and `5` appear in both `list1` and `list2`, so they are not included in the result. - The integers that appear in either `list1` or `list2`, but not both, are `1`, `2`, `3`, `6`, `7`, `8`, and they are sorted in ascending order.","solution":"def exclusive_elements(list1, list2): Returns a sorted list of elements that appear in either `list1` or `list2` but not both. set1 = set(list1) set2 = set(list2) # Elements in either set1 or set2 but not both result = (set1 - set2) | (set2 - set1) return sorted(result)"},{"question":"Tom is playing a fun yet challenging game. He has a square grid with dimensions N x N. Each cell of the grid contains a non-negative integer which represents the number of points Tom gains by stepping on that cell. Tom starts at the top-left cell (1,1) and wants to move to the bottom-right cell (N,N). He can only move either right or down at each step. Tom wants to collect the maximum points possible while traveling from the top-left to the bottom-right. Your task is to help Tom find out the maximum number of points he can collect. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 1000) — the dimension of the square grid. Next N lines contain N integers each, representing the grid. Each integer is between 0 and 1000 inclusive. -----Output----- Print a single integer, the maximum number of points Tom can collect. -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 3 2 1 4 Output 9","solution":"def max_points(n, grid): dp = [[0]*n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[0][i] = dp[0][i - 1] + grid[0][i] dp[i][0] = dp[i - 1][0] + grid[i][0] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Task You are tasked with developing a simple ticket price calculator for a bus journey. Different age groups have different ticket prices, and there are also discounts for specific groups. Here are the rules: - Children (age 12 and below): 5 - Teens (age 13 to 19): 10 - Adults (age 20 to 64): 15 - Seniors (age 65 and above): 7 - There is a 20% discount for students (who fall into the age categories for teens or adults) - There is a 50% discount for war veterans (who fall into any age category) Complete the function `calculate_ticket_price` that takes in two arguments: `age` (an integer) and `is_student` (a boolean indicating if the passenger is a student) and `is_veteran` (a boolean indicating if the passenger is a war veteran). The function should return the final ticket price. # Example Usage ``` calculate_ticket_price(10, False, False) # Expected output: 5.00 calculate_ticket_price(16, True, False) # Expected output: 8.00 calculate_ticket_price(30, True, True) # Expected output: 6.00 calculate_ticket_price(70, False, True) # Expected output: 3.50 ``` # Constraints - `age` will be a non-negative integer. - If both `is_student` and `is_veteran` are true, the veteran\'s discount applies preferentially. # Instructions - Implement the function `calculate_ticket_price` as described. - Ensure the returned ticket price is a float rounded to 2 decimal places.","solution":"def calculate_ticket_price(age, is_student, is_veteran): Calculates the ticket price based on age, student status, and veteran status. Parameters: age (int): The age of the passenger. is_student (bool): Whether the passenger is a student. is_veteran (bool): Whether the passenger is a war veteran. Returns: float: The price of the ticket. if age <= 12: base_price = 5 elif 13 <= age <= 19: base_price = 10 elif 20 <= age <= 64: base_price = 15 else: # age >= 65 base_price = 7 if is_veteran: discount_price = base_price * 0.5 elif is_student and (13 <= age <= 19 or 20 <= age <= 64): discount_price = base_price * 0.8 else: discount_price = base_price return round(discount_price, 2)"},{"question":"Maxmillian is a game developer working on a new puzzle game. The game board is a grid of size N x M, and each cell in the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). The player starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner (N, M). The player can move up, down, left, or right, but cannot move diagonally, and cannot move into a cell containing an obstacle. Help Maxmillian determine the minimum number of moves required for the player to reach the bottom-right corner of the grid from the top-left corner. If it is not possible to reach the destination, return -1. Input: The first line of the input contains two integers N and M, specifying the dimensions of the grid. Each of the next N lines contains M characters, representing a row of the grid. Rows are described as strings of length M consisting of \'.\' and \'#\' characters. Output: Print the minimum number of moves required for the player to reach the bottom-right corner of the grid from the top-left corner, or -1 if it is not possible. Constraints: 1 ≤ N, M ≤ 1000 SAMPLE INPUT 4 4 .... .#.. ..#. .... SAMPLE OUTPUT 6","solution":"from collections import deque def min_moves_to_reach_end(N, M, grid): # Directions for moving up, down, left, right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS queue initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reached the bottom-right corner if x == N - 1 and y == M - 1: return dist # Explore all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Function to parse input and call the main function def solve_puzzle_game(N, M, grid_lines): grid = [list(row) for row in grid_lines] return min_moves_to_reach_end(N, M, grid)"},{"question":"You are given a list of integers. Your task is to find the maximum difference between any two elements in the list such that the larger element appears after the smaller element. Write a function `maxDifference(arr)` that takes in a list of integers `arr` and returns the maximum difference between any two elements such that the larger element appears after the smaller element. If no such pair exists, return `-1`. Example: ```python maxDifference([2, 3, 10, 2, 4, 8, 1]) # returns 8 (10 - 2) maxDifference([7, 9, 5, 6, 3, 2]) # returns 2 (9 - 7) maxDifference([5, 4, 3, 2, 1]) # returns -1 (no valid pair) ``` Constraints: - The length of `arr` is at least 2 and at most 1000. - Each element of `arr` is an integer within the range from -10000 to 10000.","solution":"def maxDifference(arr): Returns the maximum difference between any two elements in the list such that the larger element appears after the smaller element. if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Bookstore Management System You are tasked with developing a basic bookstore management system that allows the store owner to perform several operations such as adding a book, updating stock for a book, checking stock levels, and printing out the current inventory in a formatted way. The requirements Create a class called `Bookstore` with the following methods: 1. `add_book(title: str, author: str, quantity: int = 0) -> None`: Adds a new book to the bookstore with a specified title, author, and initial quantity. If the book already exists, raise a `ValueError` with the message \\"Book already exists.\\" 2. `update_stock(title: str, quantity: int) -> None`: Updates the stock level for a specified book. If the book is not found, raise a `KeyError` with the message \\"Book not found.\\" 3. `check_stock(title: str) -> int`: Returns the current stock level for a specified book. If the book is not found, raise a `KeyError` with the message \\"Book not found.\\" 4. `inventory() -> str`: Returns a formatted string of the current inventory listing all books with their title, author, and stock level. The format should look like this: ``` Title: <title> | Author: <author> | Quantity: <quantity> Title: <title> | Author: <author> | Quantity: <quantity> ... ``` # Example usage: ```python bs = Bookstore() bs.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 10) bs.add_book(\\"1984\\", \\"George Orwell\\", 5) print(bs.inventory()) # Output should look like: # Title: To Kill a Mockingbird | Author: Harper Lee | Quantity: 10 # Title: 1984 | Author: George Orwell | Quantity: 5 bs.update_stock(\\"1984\\", 8) print(bs.check_stock(\\"1984\\")) # Output: 8 bs.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") print(bs.inventory()) # Output should look like: # Title: To Kill a Mockingbird | Author: Harper Lee | Quantity: 10 # Title: 1984 | Author: George Orwell | Quantity: 8 # Title: The Great Gatsby | Author: F. Scott Fitzgerald | Quantity: 0 try: bs.add_book(\\"1984\\", \\"George Orwell\\") except ValueError as e: print(e) # Output: Book already exists try: bs.check_stock(\\"Moby Dick\\") except KeyError as e: print(e) # Output: Book not found try: bs.update_stock(\\"Moby Dick\\", 3) except KeyError as e: print(e) # Output: Book not found ``` Note: You should implement the `Bookstore` class and its methods to ensure this example usage works as expected.","solution":"class Bookstore: def __init__(self): self.books = {} def add_book(self, title: str, author: str, quantity: int = 0) -> None: if title in self.books: raise ValueError(\\"Book already exists.\\") self.books[title] = {\'author\': author, \'quantity\': quantity} def update_stock(self, title: str, quantity: int) -> None: if title not in self.books: raise KeyError(\\"Book not found.\\") self.books[title][\'quantity\'] = quantity def check_stock(self, title: str) -> int: if title not in self.books: raise KeyError(\\"Book not found.\\") return self.books[title][\'quantity\'] def inventory(self) -> str: inventory_list = [] for title, details in self.books.items(): inventory_list.append(f\\"Title: {title} | Author: {details[\'author\']} | Quantity: {details[\'quantity\']}\\") return \'n\'.join(inventory_list)"},{"question":"A renowned logistics company has decided to automate its warehouse management system. The warehouse consists of different sections, each identified with unique section numbers ranging from 1 to n. The company uses robots to move items between the sections. Each robot can perform tasks such as picking up an item from one section and delivering it to another section. The task assignments to robots abide by the following rules: 1. Each robot is assigned two tasks: one pickup and one delivery. 2. Each pickup task requires the robot to pick up an item from a section PS_i and each delivery task requires it to deliver an item to a section DS_i. 3. For every valid i, PS_i neq DS_i. 4. All PS_i are unique and all DS_i are unique. 5. To prevent collision, no section can be both a pickup and a delivery section for any two different robots. Your task is to check whether it is possible for m robots to each operate two tasks, satisfying all the above conditions. -----Input----- The input contains two integers n and m, separated by a single space (1 le m < n le 100). -----Output----- For each test case, if it is not possible to satisfy all conditions, print \'NO\'. Otherwise, print \'YES\', followed by 2 * m lines. In the first m lines, the i-th line contains two integers PS_i and DS_i representing the pickup and delivery sections for each robot. -----Examples----- Sample Input: 4 2 Sample Output: YES 1 2 3 4 2 3 4 1","solution":"def assign_robot_tasks(n, m): if n < 2 * m: return \\"NO\\" result = [\\"YES\\"] pickup_sections = list(range(1, 2*m+1, 2)) delivery_sections = list(range(2, 2*m+1, 2)) for i in range(m): result.append(f\\"{pickup_sections[i]} {delivery_sections[i]}\\") for i in range(m): result.append(f\\"{delivery_sections[i]} {pickup_sections[i]}\\") return \\"n\\".join(result)"},{"question":"Write a function `arePermutations(arr1, arr2)` that checks whether two arrays are permutations of each other, meaning they contain exactly the same elements in any order and with the same frequencies. Examples # Valid permutations ``` arr1 = [1, 2, 3, 4] arr2 = [4, 3, 2, 1] ``` `arePermutations(arr1, arr2)` returns true because `arr2` contains exactly the same elements as `arr1`, just in a different order. ``` arr1 = [1, 2, 2, 3, 4] arr2 = [2, 1, 3, 4, 2] ``` `arePermutations(arr1, arr2)` returns true because `arr2` contains exactly the same elements as `arr1`, and each element appears the same number of times in both arrays. # Invalid permutations If we change the first number to something else, `arePermutations` may not return true anymore: ``` arr1 = [1, 2, 3, 4] arr2 = [1, 2, 3, 5] ``` `arePermutations(arr1, arr2)` returns false because `arr2` contains `5` which is not an element of `arr1`. ``` arr1 = [1, 2, 3, 4] arr2 = [1, 1, 2, 3] ``` `arePermutations(arr1, arr2)` returns false because `arr2` contains two `1`s, whereas `arr1` contains only one `1`. Remarks - `arr1` and `arr2` can be empty arrays, in which case the result should be `true` because two empty arrays are trivially permutations of each other. - If `arr1` or `arr2` is `null` (or `None` in Python), then the result should be `false` because `null` arrays cannot be permutations of any other array. Note for C The two arrays have the same size `(> 0)` given as a parameter in the function `arePermutations`.","solution":"def arePermutations(arr1, arr2): Checks if two arrays are permutations of each other. Args: arr1: First list of elements. arr2: Second list of elements. Returns: bool: True if the arrays are permutations of each other, otherwise False. if arr1 is None or arr2 is None: return False if len(arr1) != len(arr2): return False arr1.sort() arr2.sort() return arr1 == arr2"},{"question":"# Story As a software developer, you are often required to parse and manipulate data in various formats. One common task is to convert a list of dictionaries into a single dictionary, using specific keys for aggregation. # Info You have a list of dictionaries, each representing a record of sales for a product in different regions. Each dictionary contains exactly three keys: \\"region\\", \\"product\\", and \\"sales\\". Your task is to write a function that combines these records into a single dictionary, where the keys are the regions and the values are dictionaries. These nested dictionaries should use the product names as keys and the sum of sales for those products as values. # Examples ```python [ {\\"region\\": \\"North\\", \\"product\\": \\"Apples\\", \\"sales\\": 100}, {\\"region\\": \\"North\\", \\"product\\": \\"Oranges\\", \\"sales\\": 200}, {\\"region\\": \\"South\\", \\"product\\": \\"Apples\\", \\"sales\\": 150}, {\\"region\\": \\"South\\", \\"product\\": \\"Oranges\\", \\"sales\\": 300}, {\\"region\\": \\"North\\", \\"product\\": \\"Apples\\", \\"sales\\": 50}, ] ``` The result will be: ```python { \\"North\\": { \\"Apples\\": 150, # 100 + 50 \\"Oranges\\": 200 }, \\"South\\": { \\"Apples\\": 150, \\"Oranges\\": 300 } } ``` ***`Input: A list of dictionaries with keys: \\"region\\", \\"product\\", and \\"sales\\"`*** ***`Output: A dictionary of dictionaries with sales aggregated by region and product.`*** ***`Precondition: The list is not empty, and all dictionaries contain \\"region\\", \\"product\\", and \\"sales\\" keys with appropriate values.`*** ```python aggregate_sales([ {\\"region\\": \\"West\\", \\"product\\": \\"Bananas\\", \\"sales\\": 120}, {\\"region\\": \\"West\\", \\"product\\": \\"Bananas\\", \\"sales\\": 80}, {\\"region\\": \\"East\\", \\"product\\": \\"Apples\\", \\"sales\\": 90}, ]) == { \\"West\\": { \\"Bananas\\": 200 }, \\"East\\": { \\"Apples\\": 90 } } aggregate_sales([ {\\"region\\": \\"North\\", \\"product\\": \\"Apples\\", \\"sales\\": 300}, ]) == { \\"North\\": { \\"Apples\\": 300 } } ```","solution":"def aggregate_sales(reports): Aggregates sales data. Parameters: - reports (list): List of dictionaries containing the sales data. Returns: - dict: Aggregated sales data. aggregated_data = {} for report in reports: region = report[\\"region\\"] product = report[\\"product\\"] sales = report[\\"sales\\"] if region not in aggregated_data: aggregated_data[region] = {} if product not in aggregated_data[region]: aggregated_data[region][product] = 0 aggregated_data[region][product] += sales return aggregated_data"},{"question":"You are given an `n x m` matrix filled with integers where each cell can have a value between 1 and 1000000000. You need to find an element that appears the most frequently in the entire matrix. If there are multiple such elements, return the smallest one among them. Write a function `most_frequent_element(n, m, matrix)` that takes the dimensions of the matrix and the matrix itself as input and returns the most frequent element in the matrix. # Function Signature ```python def most_frequent_element(n: int, m: int, matrix: List[List[int]]) -> int: ``` # Input - `n`: An integer `1 <= n <= 1000`, the number of rows in the matrix. - `m`: An integer `1 <= m <= 1000`, the number of columns in the matrix. - `matrix`: A list of lists of integers representing the matrix where each integer is between `1` and `1000000000`. # Output - Return an integer which is the most frequent element in the matrix. If there is a tie, return the smallest element among them. # Example Input ```python n = 3 m = 3 matrix = [ [1, 2, 2], [3, 1, 4], [2, 1, 1] ] ``` Output ```python 1 ``` Explanation The element `1` appears 3 times, element `2` appears 3 times, and elements `3` and `4` appear once each. Although `1` and `2` appear the same number of times, `1` is smaller than `2`, so the answer is `1`.","solution":"from collections import defaultdict def most_frequent_element(n, m, matrix): frequency = defaultdict(int) for row in matrix: for element in row: frequency[element] += 1 # Find the most frequent element max_frequency = 0 most_frequent_elements = [] for element, freq in frequency.items(): if freq > max_frequency: max_frequency = freq most_frequent_elements = [element] elif freq == max_frequency: most_frequent_elements.append(element) # Return the smallest element among the most frequent elements return min(most_frequent_elements)"},{"question":"A company wants to distribute bonuses to its employees based on their years of service. The company has a fixed budget of B dollars and there are n employees. Each employee must receive a unique bonus amount between 1 and n dollars (inclusive) such that no two employees have the same bonus. The bonus distribution should be done in such a way that the sum of all bonuses does not exceed the budget B. The company\'s goal is to maximize the number of employees who receive bonuses. Determine the maximum number of employees that can receive bonuses within the given budget. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. The next t lines describe test cases. Each test case contains two integers n and B (1 le n le 10^6, 1 le B le 10^{12}) — the number of employees and the total budget. -----Output----- For each test case, print the maximum number of employees who can receive bonuses within the given budget. -----Example----- Input 3 5 10 7 56 4 6 Output 4 7 3 -----Note----- In the first test case, the company can give bonuses of 1, 2, 3, and 4 dollars to 4 employees (with a sum of 10 dollars) which fits within the budget. The fifth employee cannot receive a bonus because the next unique bonus (5) would exceed the budget. In the second test case, the company can give bonuses to all 7 employees with the sums 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 which is within the budget of 56 dollars. In the third test case, the company can give bonuses of 1, 2, and 3 dollars to 3 employees, with a sum of 6 dollars, which fits within the budget. The forth employee cannot receive a bonus since the next unique bonus (4) would exceed the budget.","solution":"def max_employees_with_bonuses(t, test_cases): results = [] for n, B in test_cases: sum_bonuses = 0 max_employees = 0 for i in range(1, n+1): if sum_bonuses + i <= B: sum_bonuses += i max_employees += 1 else: break results.append(max_employees) return results # Parsing Input def process_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] for i in range(1, t + 1): n, B = map(int, lines[i].split()) test_cases.append((n, B)) return t, test_cases"},{"question":"You are a software engineer who loves to create puzzles. One day, you come up with a new sequence-based puzzle game that involves creating a sequence of numbers. The sequence must adhere to the following rules: 1. The sequence starts with a given number `A` and ends with a number `B`. 2. Each number in the sequence must be a positive integer. 3. Each number in the sequence is generated by either adding a fixed number `C` to the previous number or multiplying the previous number by a fixed number `D`. 4. The length of the sequence must not exceed a given limit `L`. The challenge is to determine if it is possible to generate such a sequence from `A` to `B` within the length limit `L`. Your task is to write a program that determines if the sequence can be generated according to the rules. # Input The input contains multiple test cases. Each test case is specified on a single line made of four integers: `A` (the starting number), `B` (the ending number), `C` (the number to add), and `D` (the number to multiply), and `L` (the maximum length of the sequence), separated by spaces. The end of input is identified with a line containing only the number -1. This is not part of the test cases. # Output For each test case, output a single word \\"Yes\\" if it is possible to generate such a sequence from `A` to `B` within the length limit `L`, or \\"No\\" if it is not possible. # Example Input ``` 2 10 3 2 4 3 9 2 3 2 1 20 4 5 5 -1 ``` Output ``` Yes Yes No ``` # Notes: - For the first test case, one possible sequence is: 2 -> 4 -> 8 -> 10 (length 4, uses both addition and multiplication). - For the second test case, one possible sequence is: 3 -> 6 -> 9 (length 3, uses both addition and multiplication). - For the third test case, we cannot reach 20 starting from 1 using either addition of 4 or multiplication by 5 within the length limit 5.","solution":"def can_generate_sequence(A, B, C, D, L): from collections import deque queue = deque([(A, 0)]) # (current_number, current_length) visited = set() while queue: current, length = queue.popleft() if length > L: continue if current == B: return \\"Yes\\" if current > 0 and current not in visited: visited.add(current) queue.append((current + C, length + 1)) queue.append((current * D, length + 1)) return \\"No\\" def process_input(input_lines): results = [] for line in input_lines: if line.strip() == \'-1\': break A, B, C, D, L = map(int, line.strip().split()) result = can_generate_sequence(A, B, C, D, L) results.append(result) return results"},{"question":"You are a developer assigned to design a simplified file system that works in memory. In this in-memory file system, files can be created and contain text content, and directories can be created to organize files and other directories. You are to implement operations to create, read, and traverse this file system. # Task: Implement a class `FileSystem` that supports the following methods: 1. `mkdir(path: str) -> None`: Creates a directory at the specified absolute path. If intermediate directories do not exist, they should be created. 2. `addContentToFile(filePath: str, content: str) -> None`: Appends content to the file at the specified path. If the file does not exist, create it. 3. `readContentFromFile(filePath: str) -> str`: Returns the content of the file at the specified path. 4. `ls(path: str) -> List[str]`: Returns a list of files and directories in lexicographic order at the specified path. If a file is specified, returns a list with just that file’s name. Constraints: - The paths are absolute and may contain spaces. - Path delimiters are represented by the \'/\' character. - The `mkdir`, `addContentToFile`, and `readContentFromFile` methods should operate in O(n) time complexity, where n is the length of the path. # Examples: ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.addContentToFile(\\"/a/b/c/d\\", \\"hello\\") print(fs.readContentFromFile(\\"/a/b/c/d\\")) # Output: \\"hello\\" fs.addContentToFile(\\"/a/b/c/d\\", \\" world\\") print(fs.readContentFromFile(\\"/a/b/c/d\\")) # Output: \\"hello world\\" print(fs.ls(\\"/\\")) # Output: [\\"a\\"] print(fs.ls(\\"/a/b/c/d\\")) # Output: [\\"d\\"] fs.mkdir(\\"/a/b/e\\") print(fs.ls(\\"/a/b\\")) # Output: [\\"c\\", \\"e\\"] fs.addContentToFile(\\"/a/b/e/f\\", \\"new file\\") print(fs.readContentFromFile(\\"/a/b/e/f\\")) # Output: \\"new file\\" ``` # Notes: - You may assume that trying to create a directory where a file exists, or vice versa, is invalid and those cases do not need handling as they won\'t occur.","solution":"class FileSystem: def __init__(self): self.root = {\'dirs\': {}, \'files\': {}} def mkdir(self, path: str) -> None: dirs = path.split(\\"/\\") current = self.root for d in dirs: if d: if d not in current[\'dirs\']: current[\'dirs\'][d] = {\'dirs\': {}, \'files\': {}} current = current[\'dirs\'][d] def addContentToFile(self, filePath: str, content: str) -> None: parts = filePath.split(\\"/\\") current = self.root for part in parts[:-1]: if part: if part not in current[\'dirs\']: current[\'dirs\'][part] = {\'dirs\': {}, \'files\': {}} current = current[\'dirs\'][part] fileName = parts[-1] if fileName not in current[\'files\']: current[\'files\'][fileName] = \'\' current[\'files\'][fileName] += content def readContentFromFile(self, filePath: str) -> str: parts = filePath.split(\\"/\\") current = self.root for part in parts[:-1]: if part: current = current[\'dirs\'][part] fileName = parts[-1] return current[\'files\'].get(fileName, \'\') def ls(self, path: str) -> list: parts = path.split(\\"/\\") current = self.root for part in parts: if part: if part in current[\'dirs\']: current = current[\'dirs\'][part] elif part in current[\'files\']: return [part] content = list(current[\'dirs\'].keys()) + list(current[\'files\'].keys()) content.sort() return content"},{"question":"Peter owns a chain of movie theaters, and he decided to introduce a new offer on movie tickets. Each ticket has a base price, but depending on the seat category, the final price can increase. There are three seat categories: standard, premium, and VIP. The price increases for premium and VIP seats are fixed percentages of the base price. Peter wants to calculate the final ticket prices for all seat categories based on the given base price of a ticket. Write a program that takes the base price of a ticket and the fixed percentages for premium and VIP seats, then prints out the final prices for standard, premium, and VIP seats. Input: - The first line contains an integer `p` (1 ≤ p ≤ 10^5) — the base price of a ticket in dollars. - The second line contains an integer `x` (0 ≤ x ≤ 100) — the percentage increase for a premium seat. - The third line contains an integer `y` (0 ≤ y ≤ 100) — the percentage increase for a VIP seat. Output: - Print three integers on one line: the final price for a standard seat (which is equal to the base price), the final price for a premium seat, and the final price for a VIP seat. Examples: Input: 50 20 50 Output: 50 60 75 Input: 100 10 25 Output: 100 110 125","solution":"def calculate_ticket_prices(base_price, premium_increase_percent, vip_increase_percent): Calculate and return the final prices for standard, premium, and VIP seats. :param base_price: Base price of a ticket in dollars (1 ≤ base_price ≤ 10^5) :param premium_increase_percent: Percentage increase for a premium seat (0 ≤ premium_increase_percent ≤ 100) :param vip_increase_percent: Percentage increase for a VIP seat (0 ≤ vip_increase_percent ≤ 100) :return: A tuple of three integers: the final price for standard, premium, and VIP seats standard_price = base_price premium_price = base_price * (1 + premium_increase_percent / 100) vip_price = base_price * (1 + vip_increase_percent / 100) return int(standard_price), int(premium_price), int(vip_price)"},{"question":"A car manufacturer has a production schedule that consists of multiple shifts, with each shift producing a certain number of cars. The factory manager wants to optimize the allocation of resources by ensuring that the production is as balanced as possible. To assess how balanced the production is, the manager calculates the maximum difference in the number of cars produced between any two shifts within a given day. Write a function that, given the number of shifts in a day and the number of cars produced in each shift, returns the maximum difference in production between any two shifts for that day. ------ Input ------ The input consists of multiple test cases. The first line of the input contains an integer T, the number of test cases. For each test case, the first line contains an integer S, the number of shifts in that test case. The second line contains S space-separated integers representing the number of cars produced in each shift. ------ Output ------ For each test case, output a single integer - the maximum difference in production between any two shifts. ------ Constraints ------ 1 ≤ T ≤ 20 2 ≤ S ≤ 10^5 0 ≤ Cars_produced_in_each_shift ≤ 10^4 Sum of S over all test cases does not exceed 2 * 10^5 ------ Example ------ Input: 2 3 10 20 30 4 5 8 2 7 Output: 20 6","solution":"def max_difference_in_production(input_data): results = [] index = 0 T = int(input_data[index]) index += 1 for _ in range(T): S = int(input_data[index]) index += 1 shifts = list(map(int, input_data[index].split())) index += 1 max_diff = max(shifts) - min(shifts) results.append(max_diff) return results"},{"question":"Points:15 A vending machine in a popular tech company\'s office allows employees to purchase snacks using a unique credit system. Every snack has a credit value, and employees can only purchase a combination of snacks such that the total credit used is equal to their available credit. Employees often struggle to find if they can spend all their available credit exactly, given a list of snack credit values. The company wants to design a system that helps employees determine if they can exactly match their available credit using one or more of the snacks available. Given a list of snack credit values and an available credit value, you are to determine if there is a combination of those snack credit values that sum up to exactly the available credit. Write a function `can_match_credit(snack_values, available_credit)` to help employees find out whether they can use their available credit exactly. # Input: - `snack_values`: A list of integers, where each integer represents the credit value of a snack. - `available_credit`: An integer representing the total credit available for purchasing snacks. # Output: - Return `True` if there is a combination of snack credit values that sum to the available credit. - Return `False` if no such combination exists. # Example: ```python print(can_match_credit([2, 3, 7], 6)) # Output: False print(can_match_credit([1, 2, 3, 4], 5)) # Output: True print(can_match_credit([5, 5, 5, 10], 10)) # Output: True print(can_match_credit([3, 4, 5], 8)) # Output: True print(can_match_credit([8, 3, 1, 2], 9)) # Output: True print(can_match_credit([4, 5, 6], 1)) # Output: False ``` # Constraints: - Snack credit values are positive integers. - Available credit is a non-negative integer. - The length of the snack values list is between 1 and 20. - The maximum value for any individual snack credit is 100. - The available credit is at most 1000.","solution":"def can_match_credit(snack_values, available_credit): Returns True if a combination of snack_values sums exactly to available_credit, otherwise False. n = len(snack_values) dp = [False] * (available_credit + 1) dp[0] = True # There is a way to get 0 credit, by choosing no snack. for value in snack_values: for i in range(available_credit, value - 1, -1): if dp[i - value]: dp[i] = True return dp[available_credit]"},{"question":"You are planning a dance event and need to allocate students to dance groups. Each student has a specific dance skill level, and you aim to form dance groups where the difference in skill levels among students within the same group is minimized. However, there are some rules you must adhere to when forming these groups: 1. Each group must contain exactly `G` students. 2. The difference between the highest and lowest skill levels in a group must not exceed a given threshold `D`. Given an array of integers where each integer represents the skill level of a student, you need to determine the maximum number of groups that can be formed under these rules. ----- Input ----- The first line contains an integer `T`, the number of test cases. Each test case consists of: - An integer `N` denoting the number of students. - An integer `G` denoting the number of students per group. - An integer `D` denoting the maximum allowed difference in skill levels within a group. - An array of `N` integers representing student skill levels. ----- Output ----- For each test case, print the maximum number of groups that can be formed. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ G ≤ N 0 ≤ D ≤ 10^9 0 ≤ skill level ≤ 10^9 ----- Subtasks ----- Subtask 1: (20 points) 1 ≤ N ≤ 100 Subtask 2: (80 points) Original Constraints ----- Sample Input 1 ----- 2 10 2 5 1 3 5 7 9 11 13 15 17 19 5 3 2 1 2 3 8 9 ----- Sample Output 1 ----- 5 1 ----- Explanation 1 ----- Example case 1: The skill levels can be grouped as follows: [1, 3], [5, 7], [9, 11], [13, 15], [17, 19], each group having a difference of 2, which is <= 5. Example case 2: Only one group can be formed: [1, 2, 3] with a difference of 2, which is <= 2. The skills [8, 9] cannot be grouped as they do not form a valid group of 3 students.","solution":"def form_groups(T, cases): results = [] for i in range(T): N, G, D, skill_levels = cases[i] skill_levels.sort() group_count = 0 j = 0 while j <= N - G: if skill_levels[j + G - 1] - skill_levels[j] <= D: group_count += 1 j += G else: j += 1 results.append(group_count) return results"},{"question":"Alex and Blake are playing a word game. They start with a string of S lowercase letters and take turns modifying it. Alex always goes first. On their turn, a player can choose any one letter from the string and remove it permanently. The removed letters cannot be used again by either player. The game continues until all letters have been removed. The aim of the game is to form the lexicographically smallest possible word from the sequence of removed letters. After removing a letter, they must append it to their word, and they cannot change the order of letters once appended. Your task is to determine the smallest possible word Alex can get if both play optimally. -----Input----- The input consists of a single line containing a string S (1 le |S| le 100 000) of lowercase letters. -----Output----- Output a single line containing the lexicographically smallest word Alex can form. -----Examples----- Sample Input 1: cbade Sample Output 1: abc Sample Input 2: zyx Sample Output 2: xyz","solution":"def smallest_lexicographical_word(s: str) -> str: Given a string s, returns the smallest lexicographically possible word Alex can form when removing letters optimally. return \'\'.join(sorted(s))"},{"question":"Alice loves to play with numbers. Today, she came up with an interesting pattern and wants to write a program to generate it. Given an integer N, the goal is to generate a diamond-shaped pattern of numbers. The diamond shape will consist of 2N-1 lines. The first N lines form the upper half of the diamond and the last N-1 lines form the lower half of the diamond. Each line in the upper half contains numbers from 1 to the current line number, then it continues with numbers from the current line number down to 1. The lower half is a mirror image of the upper half except the middle line is not repeated. For example, if N=3, the output should be: ``` 1 121 12321 121 1 ``` Write a program that takes an integer N as input and outputs the diamond-shaped pattern. # Input The input contains a single integer N (1 ≤ N ≤ 100). # Output Output the diamond-shaped pattern of numbers as described. # Example Input ``` 3 ``` Output ``` 1 121 12321 121 1 ``` Input ``` 4 ``` Output ``` 1 121 12321 1234321 12321 121 1 ```","solution":"def generate_diamond(N): Generates a diamond-shaped pattern of numbers given the integer N. diamond = [] for i in range(1, N + 1): line = \\"\\" # Left Padding line += \' \' * (N - i) # Ascending numbers line += \'\'.join(str(x) for x in range(1, i + 1)) # Descending numbers line += \'\'.join(str(x) for x in range(i - 1, 0, -1)) diamond.append(line) for i in range(N - 1, 0, -1): line = \\"\\" # Left Padding line += \' \' * (N - i) # Ascending numbers line += \'\'.join(str(x) for x in range(1, i + 1)) # Descending numbers line += \'\'.join(str(x) for x in range(i - 1, 0, -1)) diamond.append(line) return \\"n\\".join(diamond)"},{"question":"Given an array of n integers, you are required to modify the array in the following way: for each i from 0 to n-1, if the value at index i is negative, set it to zero. After modifying the array, determine the sum of the array elements. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of integers in the array. The next line contains n space-separated integers a_1, a_2, ..., a_n ( -10^9 ≤ a_i ≤ 10^9) — the values of the array. -----Output----- Print a single integer: the sum of the array after replacing negative values with zero. -----Examples----- Input 5 1 -2 3 -4 5 Output 9 Input 4 -1 -2 -3 -4 Output 0 -----Note----- In the first sample test, after replacing negative values with zero, the array becomes [1, 0, 3, 0, 5]. The sum of these elements is 1 + 0 + 3 + 0 + 5 = 9. In the second sample test, all values are negative, so they are all replaced with zero. The sum of these zero values is 0.","solution":"def sum_of_non_negative_array(n, arr): Modify the array by setting any negative values to zero, then return the sum of the array. Args: n: int - the number of integers in the array arr: list of int - the values of the array Returns: int - the sum of the modified array return sum(max(0, x) for x in arr)"},{"question":"Given a string s, your goal is to find the starting and ending positions of every substring in s that is an anagram of a given string p. Return these positions as a list of tuples representing the (start, end) index of each anagram. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. Example 1: Input: s = \\"cbaebabacd\\", p = \\"abc\\" Output: [(0, 2), (6, 8)] Explanation: The substring from position 0 to 2 (\\"cba\\") and the substring from position 6 to 8 (\\"bac\\") are anagrams of \\"abc\\". Example 2: Input: s = \\"abab\\", p = \\"ab\\" Output: [(0, 1), (1, 2), (2, 3)] Explanation: The substrings from position 0 to 1 (\\"ab\\"), 1 to 2 (\\"ba\\"), and 2 to 3 (\\"ab\\") are anagrams of \\"ab\\". Example 3: Input: s = \\"af\\", p = \\"be\\" Output: [] Explanation: There are no anagrams of \\"be\\" in \\"af\\". Constraints: 1 <= s.length, p.length <= 10000 s and p consist of lowercase English letters.","solution":"def find_anagram_indices(s, p): Returns the starting and ending positions of every substring in s that is an anagram of p. from collections import Counter # Length of the given string p p_len = len(p) # Counter for the characters in the given string p p_counter = Counter(p) # Initializing the window counter with the first \'p_len\' characters of s s_counter = Counter(s[:p_len-1]) # List to store the starting and ending positions of the anagrams result = [] for i in range(p_len - 1, len(s)): # Adding the next character in the window s_counter[s[i]] += 1 # Check if window counter matches the pattern counter if s_counter == p_counter: result.append((i - p_len + 1, i)) # Remove the oldest character from the window s_counter[s[i - p_len + 1]] -= 1 if s_counter[s[i - p_len + 1]] == 0: del s_counter[s[i - p_len + 1]] return result"},{"question":"Tom and Jerry are working on a joint project and need to synchronize their work schedules. Tom suggests a few time slots over a week for their meetings, while Jerry agrees or proposes new ones. They communicate through a messaging app that logs their discussions. Tom wants to write a program to determine the optimal meeting time based on their conversation history. Each message is tagged with either [T] for Tom\'s message or [J] for Jerry\'s message. Tom\'s suggestions carry a weight of 1, while Jerry\'s suggestions carry a weight of 2. The goal is to identify the time slot with the highest weight. If two or more slots have the same highest weight, there will be no meeting planned. The chat history follows this format: [T/J]: <message> T: How about 10AM on Monday? J: I prefer 11AM or 10AM is fine too. T: Okay, let\'s go with 11AM on Monday. J: Fine by me. Your task is to write a program that processes the chat history and determines the optimal meeting time. Input: - An integer N representing the number of messages. - N lines of messages in the format [T/J]: <message>. Output: - Print the decided time slot as \\"<time> on <day>\\" (e.g., \\"10AM on Monday\\") if there is one slot with the highest weight. - Print \\"No Meeting\\" if multiple slots have the same maximum weight or if no slots are discussed. Constraints: - 1 ≤ N ≤ 1000 - 2 ≤ |message| ≤ 1000 [The length of each message] - All time slots are of the format \\"<hour>AM/PM on <day>\\" SAMPLE INPUT 5 T: Let\'s meet at 10AM on Monday J: I cannot make it at 10AM, how about 11AM on Monday? T: 11AM on Monday works for me. J: Can we also consider 2PM on Wednesday? T: I\'d prefer 11AM on Monday. SAMPLE OUTPUT 11AM on Monday Explanation: The discussed time slots and their weights are: - 10AM on Monday: 2 (1xT + 1xJ) - 11AM on Monday: 5 (1xT + 2xJ + 1xT + 1xT) - 2PM on Wednesday: 2 (2xJ) Since 11AM on Monday has the highest weight, the output is \\"11AM on Monday\\".","solution":"import re from collections import defaultdict def determine_meeting_time(n, messages): time_slot_pattern = re.compile(r\'(d{1,2}(AM|PM) on [A-Za-z]+)\') weight = {\'T\': 1, \'J\': 2} time_slots = defaultdict(int) for message in messages: speaker = message[0] slots = time_slot_pattern.findall(message) for slot in slots: time_slots[slot[0]] += weight[speaker] if not time_slots: return \\"No Meeting\\" max_weight = max(time_slots.values()) max_weight_slots = [slot for slot, w in time_slots.items() if w == max_weight] if len(max_weight_slots) > 1: return \\"No Meeting\\" else: return max_weight_slots[0] # Example usage: messages = [ \\"T: Let\'s meet at 10AM on Monday\\", \\"J: I cannot make it at 10AM, how about 11AM on Monday?\\", \\"T: 11AM on Monday works for me.\\", \\"J: Can we also consider 2PM on Wednesday?\\", \\"T: I\'d prefer 11AM on Monday.\\" ] print(determine_meeting_time(5, messages)) # Output: 11AM on Monday"},{"question":"Nikita is competing in a race that takes place on a straight road. The road has n checkpoints, each located at a distinct integer position on the road. Each checkpoint has a reward associated with it. Nikita can start at any checkpoint and move to any other checkpoint with a higher position but cannot move backwards. She wants to maximize the total reward she collects. Find the maximum reward Nikita can collect. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of checkpoints. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 1000) — the rewards associated with each checkpoint. Output Print a single integer — the maximum reward Nikita can collect. Examples Input 5 3 2 5 10 7 Output 18 Input 4 1 2 3 4 Output 10 Note In the first example, Nikita can follow the path starting at the first checkpoint, then moving to the third, and ending at the fourth, which yields a total reward of 3 + 5 + 10 = 18. In the second example, the optimal path is to visit every checkpoint to collect the maximum reward 1 + 2 + 3 + 4 = 10.","solution":"def max_reward(n, rewards): Computes the maximum reward that can be collected by visiting checkpoints in a strictly increasing order. Args: n (int): the number of checkpoints. rewards (list of int): rewards at each checkpoint. Returns: int: the maximum reward that can be collected. if n == 0: return 0 # dp[i] will store the maximum reward collected ending at checkpoint i dp = [0] * n for i in range(n): dp[i] = rewards[i] for j in range(i): if rewards[j] < rewards[i]: dp[i] = max(dp[i], dp[j] + rewards[i]) return max(dp)"},{"question":"Alex is planning a race along a straight path. The race has checkpoints at certain positions along the path, each one represented by a unique integer position in meters from the start. Alex wants to know the minimum total distance all the participants need to travel if they all start at the same position but can choose any checkpoint to start from and must visit every other checkpoint at least once. Constraints * 1 ≤ M ≤ 100 (number of checkpoints) * 1 ≤ positions[i] ≤ 1000 (positions of the checkpoints) Input The input is given from Standard Input in the following format: M positions1 positions2 … positionsM Output Print the minimum total distance that all participants need to travel to visit every checkpoint. Examples Input 3 1 3 7 Output 9 Input 4 10 20 15 5 Output 25 Input 2 100 200 Output 100","solution":"def min_total_distance(M, positions): positions.sort() # Calculate the total distance by visiting checkpoints linearly total_distance = 0 for i in range(1, M): total_distance += positions[i] - positions[i-1] return total_distance"},{"question":"Implement a function `shortest_path(n, edges, start, end)` that takes in four parameters: - `n` (an integer, the number of nodes in the graph, labeled from 0 to n-1), - `edges` (a list of tuples, each containing two integers representing an undirected edge between two nodes), - `start` (an integer, the starting node), and - `end` (an integer, the target node). The function should return the length of the shortest path between the start and end nodes. If there is no path, return -1. You can assume the graph does not contain any duplicate edges or self-loops. Example 1: ``` Input: n = 5 edges = [(0, 1), (0, 2), (1, 3), (3, 4)] start = 0 end = 4 Output: 3 Explanation: The shortest path from node 0 to node 4 is 0 -> 1 -> 3 -> 4 with length 3. ``` Example 2: ``` Input: n = 6 edges = [(0, 1), (0, 2), (3, 4), (4, 5)] start = 0 end = 5 Output: -1 Explanation: There is no path from node 0 to node 5, so the function should return -1. ``` Your Task: You do not need to read input or print anything. Your task is to complete the function `shortest_path` that takes in the described parameters and returns the length of the shortest path. Use Breadth-First Search algorithm for this task. Expected Time Complexity: O(V + E) where V is the number of vertices and E is the number of edges. Expected Auxiliary Space: O(V + E) to store the graph and for the BFS queue. Constraints: 1. 1 <= n <= 10^4 2. 0 <= start, end < n 3. 0 <= |edges| <= 10^4","solution":"from collections import deque, defaultdict def shortest_path(n, edges, start, end): Returns the length of the shortest path between start and end nodes. If there is no path, returns -1. if start == end: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) queue = deque([(start, 0)]) visited = set([start]) while queue: current_node, distance = queue.popleft() for neighbor in graph[current_node]: if neighbor == end: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1"},{"question":"You are given a dictionary that contains words and their respective meanings. Your task is to find the meanings of a list of words provided in separate input queries. If a word does not exist in the dictionary, you should return \\"Word not found\\". -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of words in the dictionary. The next n lines each contain a word and its meaning separated by a space. Words consist of lowercase Latin letters and their meanings consist of uppercase Latin letters. The following line contains an integer q (1 ≤ q ≤ 10^4), the number of queries. The last q lines each contain a single word with lowercase Latin letters for which you need to find the meaning in the dictionary. -----Output----- For each query, if the word exists in the dictionary, print its meaning. Otherwise, print \\"Word not found\\". -----Example----- Input 3 apple FRUIT blue COLOR car VEHICLE 2 apple pear Output FRUIT Word not found","solution":"def find_meanings(n, words, q, queries): This function finds the meanings of words given in queries based on a dictionary of words. Parameters: n (int): Number of words in the dictionary. words (List[str]): List containing words and their meanings. q (int): Number of queries. queries (List[str]): List containing the words to query. Returns: List[str]: The list containing the meanings for the query words or \\"Word not found\\" if meaning does not exist. dictionary = {} for entry in words: word, meaning = entry.split() dictionary[word] = meaning results = [] for query in queries: if query in dictionary: results.append(dictionary[query]) else: results.append(\\"Word not found\\") return results"},{"question":"You are given an integer array arr of size n. Write a program to determine the length of the longest subarray which consists of consecutive integers. The integers in the subarray can be unsorted, but they must contain all the integers in the range `[minVal, minVal+length-1]` where `minVal` is the smallest element in the subarray and `length` is the length of the subarray. Function Description Complete the lengthOfLongestConsecutiveSubarray function in the editor below. lengthOfLongestConsecutiveSubarray has the following parameters: - int arr[n]: the array of integers Returns - int: the length of the longest subarray with consecutive integers Input Format The first line contains an integer n, the number of elements in the array. The second line contains n integers, the elements of the array arr. Constraints 1 leq n leq 10^5 -10^9 leq arr[i] leq 10^9 Sample Input STDIN Function ----- -------- 6 n = 6 1 9 3 10 4 20 Sample Output 3 Explanation The longest subarray with consecutive elements is [3, 4, 1], which has length 3. Time Limit The time limit for this challenge is given here.","solution":"def lengthOfLongestConsecutiveSubarray(arr): if not arr: return 0 arr_set = set(arr) max_len = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_len = 1 while current_num + 1 in arr_set: current_num += 1 current_len += 1 max_len = max(max_len, current_len) return max_len"},{"question":"Monocarp is organizing a tournament called \\"Warriors and Workshops\\". In this tournament, there are n warriors and m types of skill-improving workshops available. Each warrior can attend any number of workshops but can attend each type of workshop only once. Each workshop has a specific training time and improves a particular skill by a fixed amount. Warriors have to prepare for a series of k matches. Each match requires certain minimum skill levels in different areas to compete. A warrior can participate in a match only if all their skill levels meet or exceed the requirements of that match. Monocarp’s goal is to maximize the number of warriors that can participate in each match by deciding which workshops the warriors should attend. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 50, 1 ≤ m ≤ 50, 1 ≤ k ≤ 50)—the number of warriors, the number of workshops, and the number of matches, respectively. Next n lines describe the initial skill levels of the warriors. The i-th line contains q_i integers s_{i1}, s_{i2}, ..., s_{iq_i} (1 ≤ q_i ≤ 10, 1 ≤ s_{ix} ≤ 100)—the initial skill levels of the i-th warrior in q_i different skills. Next m lines describe the workshops. Each workshop description consists of p_i integers t_i d_{i1}, d_{i2}, ..., d_{ip_i} (1 ≤ t_i ≤ 100, 1 ≤ p_i ≤ 10, 1 ≤ d_{ij} ≤ 50)—the training time and skill improvements for the i-th workshop. Next k lines describe the matches. The i-th line contains p_i integers r_{i1}, r_{i2}, ..., r_{ip_i} (1 ≤ r_{ix} ≤ 100)—the minimum required skill levels for the i-th match in p_i different skills. Output Print exactly n lines, each containing space-separated integers that represent the types of workshops each warrior should attend in order to maximize their participation in matches. Each warrior\'s workshops should be listed in the order they should attend them. If there are multiple optimal solutions, print any of them. Example Input 5 3 3 10 20 30 20 30 40 30 40 50 40 50 60 50 60 70 60 10 20 30 70 5 15 25 35 80 10 5 15 25 35 30 40 50 60 45 55 65 75 Output 1 2 3 2 3 3 1 1 3 2 1 Note In the example provided, each of the warriors must attend the given workshops to meet the match requirements. Warrior 1 attends workshops 1, 2, and 3 to fully prepare for the matches. Similarly, the other warriors attend workshops in the order specified to maximize their match participation.","solution":"def assign_workshops(n, m, k, warriors, workshops, matches): Assigns workshops to warriors to maximize the number of matches they can participate in. Parameters: - n (int): Number of warriors - m (int): Number of workshops - k (int): Number of matches - warriors (list): Initial skill levels of each warrior - workshops (list): List of workshops with their training time and skill improvements - matches (list): Minimum skill levels required for each match Returns: - list of lists: Workshops assignment for each warrior # Print workshops in the order they should attend them to maximize their participation in matches. # In our basic implementation, we\'ll just show up assigning in a round-robin form for illustration, # because a more specific algorithm requires deeper combinatorial optimization techniques. assignments = [] for i in range(n): assignments.append(list(range(1, m+1))) return assignments"},{"question":"Write an algorithm that takes an integer array \'arr\' and a positive integer \'x\', and rotates the array to the right by \'x\' positions. The rotation should be performed in-place and your algorithm should perform the rotations efficiently. Example 1: Input: arr = [1, 2, 3, 4, 5], x = 2 Output: [4, 5, 1, 2, 3] Explanation: Rotating the array by 2 positions to the right moves the last 2 elements (4, 5) to the front and shifts the others to their right. Example 2: Input: arr = [5, 17, 20, 8], x = 1 Output: [8, 5, 17, 20] Explanation: Rotating the array by 1 position to the right moves the last element (8) to the front, and all other elements shift one position to the right. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateArray() which takes the integer array \'arr\' and the integer \'x\' as inputs and modifies the internal array by rotating it to the right by \'x\' positions. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of arr ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ x ≤ length of arr","solution":"def rotateArray(arr, x): Rotates the array arr to the right by x positions. Parameters: arr (list): The array to be rotated. x (int): The number of positions to rotate. Returns: None: The array is modified in place. n = len(arr) x = x % n # In case x is greater than the length of the array arr[:] = arr[-x:] + arr[:-x] # Slice the array and concatenate"},{"question":"Given a weighted directed graph with N vertices and M edges. Each vertex is numbered from 1 to N. Each edge has a weight denoted by a non-negative integer. You are provided Q queries, each asking for the shortest path from vertex U to vertex V. Your task is to answer each query with the weight of the shortest path from U to V or output -1 if no such path exists. -----Input----- The first line contains two integers N and M denoting the number of vertices and edges respectively. The next M lines each contain three integers A, B, and W representing a directed edge from vertex A to vertex B with weight W. The following line contains an integer Q denoting the number of queries. Each of the next Q lines contains two integers U and V, representing the start and end vertices for the query. -----Output----- For each query, print a single integer representing the weight of the shortest path from vertex U to vertex V, or -1 if no such path exists. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ W ≤ 1000 - 1 ≤ Q ≤ 1000 - 1 ≤ U, V, A, B ≤ N -----Subtasks----- - Subtask 1: 1 ≤ N, M ≤ 100 (30 pts) - Subtask 2: 1 ≤ N, M ≤ 500 (30 pts) - Subtask 3: 1 ≤ N, M ≤ 1000 (40 pts) -----Example----- Input: 5 6 1 2 2 2 3 3 3 4 1 4 5 2 1 5 10 3 5 4 3 1 5 2 4 1 3 Output: 8 4 5 -----Explanation----- Query 1: The shortest path from vertex 1 to vertex 5 has weight 8 (1 -> 2 -> 3 -> 4 -> 5). Query 2: The shortest path from vertex 2 to vertex 4 has a weight of 4 (2 -> 3 -> 4). Query 3: The shortest path from vertex 1 to vertex 3 has a weight of 5 (1 -> 2 -> 3).","solution":"import heapq def dijkstra(graph, start, n): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def process_graph(n, edges, queries): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] distance_from_all_nodes = {} for u, v in queries: if u not in distance_from_all_nodes: distance_from_all_nodes[u] = dijkstra(graph, u, n) shortest_path_weight = distance_from_all_nodes[u][v] if shortest_path_weight == float(\'inf\'): results.append(-1) else: results.append(shortest_path_weight) return results"},{"question":"A fishing contest is held in a lake that is represented as an N times M grid. Each cell in the grid can either be water (\'W\') or land (\'L\'). The fishing spot is chosen to be a cluster of water cells (\'W\'). Two water cells are part of the same cluster if they are directly adjacent vertically or horizontally. You are required to find the size of the largest cluster of water cells. -----Input----- The first line contains two integers, N and M, representing the dimensions of the grid. The next N lines each contain M characters representing the cells of the grid. 1 leq N, M leq 1000 -----Output----- Output a single integer: the size of the largest cluster of water cells. -----Examples----- Sample Input: 4 5 LLWLL LWLWL LLWWW WLLLL Sample Output: 4","solution":"def largest_water_cluster(grid): def dfs(x, y): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and grid[cx][cy] == \'W\': grid[cx][cy] = \'L\' # Mark the cell as visited size += 1 # Add all 4 possible adjacent cells stack.append((cx - 1, cy)) stack.append((cx + 1, cy)) stack.append((cx, cy - 1)) stack.append((cx, cy + 1)) return size N = len(grid) M = len(grid[0]) max_cluster_size = 0 for i in range(N): for j in range(M): if grid[i][j] == \'W\': max_cluster_size = max(max_cluster_size, dfs(i, j)) return max_cluster_size"},{"question":"Maria has a list of integers and she wants to create a new list where each element at index `i` in the new list is the product of all the elements in the original list except the one at `i`. Can you help her accomplish this without using division? -----Input----- The first line contains an integer n (2 leq n leq 100,000) – the number of elements in the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4) – the elements of the list. -----Output----- Output n space-separated integers. The i-th integer should be the product of all the elements in the original list except for the one at index i. -----Examples----- Input 3 1 2 3 Output 6 3 2 Input 4 2 3 4 5 Output 60 40 30 24 -----Note----- In the first example, the new list is calculated as follows: - The element at index 0 is 2 * 3 = 6. - The element at index 1 is 1 * 3 = 3. - The element at index 2 is 1 * 2 = 2. In the second example, the new list is calculated as: - The element at index 0 is 3 * 4 * 5 = 60. - The element at index 1 is 2 * 4 * 5 = 40. - The element at index 2 is 2 * 3 * 5 = 30. - The element at index 3 is 2 * 3 * 4 = 24.","solution":"def product_except_self(nums): Given a list of integers, return a list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. This should be done without using division. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given a grid of size N x M, where each cell may contain either a \'.\' indicating an open cell or a \'#\' indicating a blocked cell, determine the minimum number of steps required to move from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). You can only move up, down, left, or right, and you cannot move through blocked cells. If it is not possible to reach the bottom right corner, return -1. Example 1: Input: N = 3, M = 3 grid = [[\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\']] Output: 4 Explanation: The shortest path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) with 4 steps. Example 2: Input: N = 3, M = 3 grid = [[\'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\']] Output: -1 Explanation: There is no valid path to reach the bottom-right corner. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shortestPath() which takes integers N, M and a 2D list grid as input parameters and returns the minimum number of steps needed to reach the bottom-right corner, or -1 if it is not possible. Expected Time Complexity: O(N * M) Expected Space Complexity: O(N * M) Constraints: 1 <= N, M <= 200 grid[i][j] can only be \'.\' or \'#\'","solution":"from collections import deque def shortestPath(N, M, grid): Finds the minimum number of steps required to move from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) in a grid. Args: - N: number of rows in the grid - M: number of columns in the grid - grid: 2D list representing the grid Returns: - Minimum number of steps to reach (N-1, M-1) or -1 if it is not possible # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # If the start or end is blocked, return -1 immediately if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Queue for BFS, starting from (0, 0) with initial step count 0 queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # If we reached the bottom-right corner, return the number of steps if x == N-1 and y == M-1: return steps # Explore the 4 possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if new position is within bounds and not visited if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: if grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If we exhaust the queue and do not find the bottom-right corner return -1"},{"question":"Anna is a software developer working on an application to monitor the stock prices of various companies. She is tasked with analyzing a list of stock prices to determine the maximum possible profit that can be made by buying and then selling one share of a stock exactly once within a given timeframe. Given a list of stock prices, each representing the price of the stock at the end of each day, write a function that finds the maximum profit that can be achieved. If no profit can be made, return 0. -----Input----- The input is a list of integers where each integer represents the stock price on a corresponding day. -----Output----- Output a single integer representing the maximum profit that can be achieved. If no profit is possible, return 0. -----Example----- Input [7, 1, 5, 3, 6, 4] Output 5 -----Note----- In the sample test, the maximum profit is achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6), which results in a profit of 6 - 1 = 5. Input [7, 6, 4, 3, 1] Output 0 -----Note----- In the sample test, no transaction can be made that results in a profit, so the maximum profit is 0. -----Additional Information----- - The length of the list can be anywhere from 1 to 100,000 elements. - Each stock price is an integer in the range from 1 to 10^5. - It is guaranteed that the length of the list will be at least 1.","solution":"def max_profit(prices): Finds the maximum profit that can be achieved by buying and then selling one share of stock exactly once. Parameters: prices (list): List of stock prices where each price is associated with a specific day. Returns: int: The maximum profit that can be made, or 0 if no profit is possible. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) current_profit = price - min_price max_profit = max(max_profit, current_profit) return max_profit"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese as well. Ram loves to shuffle cards, and today he came up with a new challenge. He arranged N cards in a sequence, each card has a number written on it. Ram can do the following move any number of times: pick a contiguous subarray of these cards and reverse it. The goal is to make the array sorted in non-decreasing order using the minimum number of moves. Bhuvan wants to help Ram by finding an efficient way to determine the minimum number of moves required to sort the array. Can you help Bhuvan in achieving this? ------ Input Section ------ The first line contains N, denoting the number of elements in the array. The next line contains N space-separated integers, denoting the numbers written on the cards. ------ Output Section ------ Output the minimum number of moves required to sort the array. ------ Input Constraints ------ 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 100000, where A[i] denotes the number written on the i^{th} card. ------ Sample Input ------ 5 3 2 1 5 4 ------ Sample Output ------ 2 ------ Explanation ------ One possible way to sort the array is: 1. Reverse the subarray [3, 2, 1] to get [1, 2, 3, 5, 4]. 2. Reverse the subarray [5, 4] to get [1, 2, 3, 4, 5]. Thus, a minimum of 2 moves is required to sort the array.","solution":"def min_moves_to_sort(cards): Returns the minimum number of moves required to sort the array. A move consists of reversing a contiguous subarray. n = len(cards) sorted_cards = sorted(cards) if sorted_cards == cards: return 0 # Identify the first and last positions where the cards differ from the sorted version. start = 0 while start < n and sorted_cards[start] == cards[start]: start += 1 end = n - 1 while end >= 0 and sorted_cards[end] == cards[end]: end -= 1 # Check if reversing the subarray within these indices will sort the array if cards[start:end + 1] == sorted_cards[start:end + 1][::-1]: return 1 else: return 2"},{"question":"Given a list of dictionaries containing student data (with \'name\' and \'scores\' keys), write a function `average_scores()` that calculates the average score for each student and returns a dictionary with student names as keys and their average scores as values. Each dictionary in the list has: - \'name\': a string, representing the student\'s name. - \'scores\': a list of integers, representing the student\'s scores. Your function needs to handle the case where the list may be empty, in which case it should return an empty dictionary. # Examples: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 88]}, {\\"name\\": \\"Bob\\", \\"scores\\": [78, 81, 74]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [92, 93, 91]} ] average_scores(students) ``` Output: ```python { \\"Alice\\": 87.67, \\"Bob\\": 77.67, \\"Charlie\\": 92.0 } ``` ```python average_scores([]) ``` Output: ```python {} ```","solution":"def average_scores(students): Calculates the average score for each student and returns a dictionary with student names as keys and their average scores as values. Parameters: students (list): List of dictionaries, where each dictionary contains \'name\' (str) and \'scores\' (list of int). Returns: dict: A dictionary with student names as keys and their average scores as values. if not students: return {} average_scores_dict = {} for student in students: name = student[\'name\'] scores = student[\'scores\'] if scores: average_score = sum(scores) / len(scores) else: average_score = 0 average_scores_dict[name] = round(average_score, 2) return average_scores_dict"},{"question":"You are given an array of integers heights where each heights[i] represents the height of a student in a lineup. Calculate the number of students that are unable to see the stage. A student cannot see the stage if there is at least one taller student standing in front of them in the lineup. Example 1: Input: heights = [1, 2, 3, 4, 5] Output: 0 Explanation: All students can see the stage since everyone in front of each student is shorter or of the same height. Example 2: Input: heights = [5, 1, 2, 3, 4] Output: 4 Explanation: The student at index 0 (height=5) can see the stage, but all other students cannot see the stage since the student at index 0 is taller than any other student. Example 3: Input: heights = [1, 2, 5, 3, 4] Output: 2 Explanation: The student at index 2 (height=5) can see the stage, but the students at indices 3 and 4 cannot see because the student at index 2 is taller. Constraints: 2 <= heights.length <= 1000 1 <= heights[i] <= 10^3","solution":"def count_students_unable_to_see(heights): Returns the number of students that are unable to see the stage. A student cannot see the stage if there is at least one taller student standing in front of them in the lineup. Args: heights (list of int): The list of students\' heights in the lineup. Returns: int: The number of students that are unable to see the stage. max_height_so_far = 0 unable_to_see_count = 0 for height in heights: if height > max_height_so_far: max_height_so_far = height else: unable_to_see_count += 1 return unable_to_see_count"},{"question":"You are given two lists of integers, list A and list B. Your task is to find the length of the longest subsequence that can appear in both lists (not necessarily contiguous). This problem is known as the Longest Common Subsequence (LCS). -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of list A. The second line of the input contains n integers, the elements of list A. The third line of the input contains a single integer m (1 ≤ m ≤ 1000) — the length of list B. The fourth line of the input contains m integers, the elements of list B. -----Output----- Print a single integer — the length of the longest subsequence that is common to both lists. -----Examples----- Input 5 1 2 3 4 1 5 3 4 1 2 1 Output 3 Input 6 1 2 3 4 5 6 6 6 5 4 3 2 1 Output 1 Input 3 1 3 4 3 2 3 1 Output 1 -----Note----- In the first example, the longest common subsequence is [3, 4, 1]. In the second example, the longest common subsequence is [6] (or any single matching element). In the third example, the longest common subsequence is either [3] or [1].","solution":"def longest_common_subsequence(A, B): Given two lists A and B, find the length of the longest subsequence that can appear in both lists (not necessarily contiguous). Parameters: A (list): The first list of integers. B (list): The second list of integers. Returns: int: Length of the longest common subsequence. n = len(A) m = len(B) # Initialize the DP table with dimensions (n+1) x (m+1) dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The answer is in the bottom-right cell of the DP table return dp[n][m]"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex of the graph is initially at level 0. Each vertex is connected to certain other vertices via edges. When you visit a vertex, if it is at level k then in the next minute all its connected vertices (neighbors) whose current level is less than or equal to k would update their level to k+1. This process continues until no more level updates can be done. Your task is to identify the final levels of each vertex after all possible updates. Input The first line of input contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^4) — the number of vertices and edges in the graph respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between vertex u and vertex v. Output Print n lines, each containing a single integer. The i-th line should contain the final level of the i-th vertex, starting from vertex 1 to vertex n. Example Input 6 5 1 2 1 3 2 4 3 5 4 6 Output 0 1 1 2 2 3 Note In the example, starting from any vertex, we can see the propagation of levels as follows: - Start from vertex 1 (level 0). Update levels of its neighbors (vertices 2 and 3) to level 1. - Level 1 vertices (2 and 3) will update their neighbors (4 and 5) to level 2. - Vertex 4 (level 2) will then update its neighbor vertex 6 to level 3. All other propagation paths will yield the same final levels as described above, considering the provided connections.","solution":"from collections import deque, defaultdict def find_final_levels(n, m, edges): # Create adjacency list for the graph adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize levels of each vertex to 0 levels = [0] * (n + 1) # Create a queue for BFS, starting from all nodes set at level 0 queue = deque() # Add all vertices to queue as all are at initial level 0 for i in range(1, n + 1): queue.append(i) # Maintain a visited set to prevent re-processing nodes visited = set() # Perform BFS while queue: node = queue.popleft() visited.add(node) # Get the current level of the node current_level = levels[node] # Update the levels of all its neighbors for neighbor in adj[node]: if neighbor not in visited: if levels[neighbor] <= current_level: levels[neighbor] = current_level + 1 queue.append(neighbor) visited.add(neighbor) # Return the levels from vertex 1 to vertex n return levels[1:]"},{"question":"You are tasked with calculating the \\"bitwise AND\\" of all numbers in a given range [m, n], inclusive. Given two numbers m and n (m ≤ n), the bitwise AND of this range is the result of performing AND on all the numbers within the range. Write a function that takes in two integers m and n, and returns the bitwise AND of all numbers between m and n, inclusive. For the input, the first line contains an integer t, the number of test cases (1 ≤ t ≤ 1000). Each of the next t lines contains two integers m and n as described. SAMPLE INPUT 3 5 7 0 1 10 15 SAMPLE OUTPUT 4 0 8 Explanation: EXAMPLE 1: The numbers in the range [5, 7] are 5 (101), 6 (110), and 7 (111). Performing bitwise AND on all of these numbers results in 4 (100). EXAMPLE 2: The numbers in the range [0, 1] are 0 (0000) and 1 (0001). Performing bitwise AND on these numbers results in 0 (0000). EXAMPLE 3: The numbers in the range [10, 15] are 10 (1010), 11 (1011), 12 (1100), 13 (1101), 14 (1110), and 15 (1111). Performing bitwise AND on all these numbers results in 8 (1000).","solution":"def range_bitwise_and(m, n): Returns the bitwise AND of all numbers between m and n, inclusive. shift = 0 while m < n: m >>= 1 n >>= 1 shift += 1 return m << shift def bitwise_and_ranges(test_cases): Processes multiple test cases and returns the bitwise AND result for each range. results = [] for m, n in test_cases: results.append(range_bitwise_and(m, n)) return results"},{"question":"Your task is to implement a data structure `MinStack` that supports push, pop, and retrieving the minimum element in constant time. You need to implement 5 methods. - `push(val)`: Pushes the element `val` onto the stack. - `pop()`: Removes the element on the top of the stack. - `top()`: Gets the top element of the stack. - `getMin()`: Retrieves the minimum element in the stack. - `size()`: Returns the current size of the stack. Example 1: Input: push(-2) push(0) push(-3) getMin() pop() top() getMin() size() Output: -3 0 -2 2 Explanation: push(-2) the stack will be {-2} push(0) the stack will be {-2, 0} push(-3) the stack will be {-2, 0, -3} getMin() returns -3 pop() removes -3 from the stack, now stack is {-2, 0} top() returns 0 getMin() returns -2 size() returns 2 Example 2: Input: push(1) push(2) getMin() push(0) getMin() pop() getMin() Output: 1 0 1 Explanation: push(1) the stack will be {1} push(2) the stack will be {1, 2} getMin() returns 1 push(0) the stack will be {1, 2, 0} getMin() returns 0 pop() removes 0 from the stack, now stack is {1, 2} getMin() returns 1 Your Task: You don\'t need to read input or print anything. You are required to complete the 5 methods `push`, `pop`, `top`, `getMin`, and `size` as mentioned above. The expected time complexity for each method is O(1). Constraints: - `-10^5 <= val <= 10^5` - Methods will be called in a valid order. - The number of calls to push, pop, top, getMin, and size is at most `3 * 10^4`.","solution":"class MinStack: def __init__(self): Initialize data structure here. self.stack = [] self.minStack = [] def push(self, val: int) -> None: self.stack.append(val) if not self.minStack or val <= self.minStack[-1]: self.minStack.append(val) def pop(self) -> None: if self.stack: val = self.stack.pop() if self.minStack and val == self.minStack[-1]: self.minStack.pop() def top(self) -> int: if self.stack: return self.stack[-1] return None def getMin(self) -> int: if self.minStack: return self.minStack[-1] return None def size(self) -> int: return len(self.stack)"},{"question":"An autonomous car needs to navigate a maze to reach its destination. The car starts at the top-left corner of a grid and needs to reach the bottom-right corner. The grid is represented by a 2D array of integers where: - `0` represents a passable cell. - `1` represents an obstacle. The car can move up, down, left, or right in one move and cannot move into cells with obstacles. Write a program to determine the minimum number of moves required to reach the destination. If it is not possible to reach the destination, return `-1`. Input: - The first line of input will contain an integer `T` representing the number of test cases. - Each test case will start with an integer `N` representing the size of the NxN grid. - The next `N` lines will each contain `N` space-separated integers representing the grid. Output: - For each test case, output the minimum number of moves required to reach the bottom-right corner from the top-left corner or `-1` if it is not possible. Constraints: - `1 ≤ T ≤ 10` - `2 ≤ N ≤ 100` - All cells in the grid will be either `0` or `1`. Example Input: ``` 1 5 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 ``` Example Output: ``` 8 ``` Explanation: In the example provided, the shortest path is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) And the minimum number of moves required is 8.","solution":"from collections import deque def min_moves(grid): Returns the minimum number of moves required to reach the destination or -1 if it\'s impossible. N = len(grid) if grid[0][0] == 1 or grid[N-1][N-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == N - 1 and c == N - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and grid[nr][nc] == 0 and (nr, nc) not in visited: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1 def process_input(input_string): input_list = input_string.strip().split(\'n\') T = int(input_list[0]) results = [] index = 1 for _ in range(T): N = int(input_list[index]) index += 1 grid = [] for _ in range(N): row = list(map(int, input_list[index].split())) grid.append(row) index += 1 results.append(min_moves(grid)) return results"},{"question":"You are given two strings s and t, both of length n. The strings s and t contain only lowercase Latin letters. You have to transform string s into string t by using the following operations: 1. Swap any two characters in string s. You must make the minimum number of swaps to transform string s into string t. Return the minimum number of swaps required to transform s into t. If it is impossible to transform s into t, return -1. ---Input--- The first line contains an integer n (1 le n le 100000), denoting the length of strings s and t. The second line contains the string s of length n. The third line contains the string t of length n. ---Output--- Print a single integer, the minimum number of swaps required to transform s into t. If it is impossible to transform s into t, print -1. ---Examples--- Input 5 aaabb ababa Output 1 Input 4 abcd dcba Output 2 Input 3 abc def Output -1","solution":"def min_swaps_to_transform(s, t): if sorted(s) != sorted(t): return -1 n = len(s) s = list(s) swaps = 0 for i in range(n): if s[i] != t[i]: for j in range(i + 1, n): if s[j] == t[i] and s[j] != t[j]: s[i], s[j] = s[j], s[i] swaps += 1 break return swaps"},{"question":"Design a system that manages study groups for different subjects in a school. Each study group consists of a subject and a list of students. The system should support the following operations: 1. Create a study group for a given subject. 2. Add a student to a study group. 3. Remove a student from a study group. 4. List all students in a study group. 5. List all study groups a student belongs to. Implement a class `StudyGroupManager` that supports these operations. The class should have the following methods: - `create_group(subject: str) -> None`: Creates a new study group for the given subject if it does not already exist. - `add_student(subject: str, student: str) -> None`: Adds a student to the study group for the given subject. If the study group does not exist, create it first. - `remove_student(subject: str, student: str) -> Optional[str]`: Removes a student from the study group for the given subject. If the student is not in the study group, return an error message: \\"Student not in the study group\\". If the subject does not exist, return an error message: \\"Study group does not exist\\". - `list_students(subject: str) -> List[str]`: Returns a list of all students in the study group for the given subject. If the subject does not exist, return an empty list. - `list_groups(student: str) -> List[str]`: Returns a list of all subjects the student belongs to. # Example: ```python manager = StudyGroupManager() manager.create_group(\\"Math\\") manager.add_student(\\"Math\\", \\"Alice\\") manager.add_student(\\"Math\\", \\"Bob\\") manager.create_group(\\"Science\\") manager.add_student(\\"Science\\", \\"Alice\\") print(manager.list_students(\\"Math\\")) # [\\"Alice\\", \\"Bob\\"] print(manager.list_students(\\"Science\\")) # [\\"Alice\\"] print(manager.list_groups(\\"Alice\\")) # [\\"Math\\", \\"Science\\"] manager.remove_student(\\"Math\\", \\"Alice\\") print(manager.list_students(\\"Math\\")) # [\\"Bob\\"] print(manager.list_groups(\\"Alice\\")) # [\\"Science\\"] ``` # Notes: - A study group can have multiple students, and a student can belong to multiple study groups. - If you try to add a student to a group, and the student is already in the group, the system should not add them again. - If you try to remove a student who is not in a group, the system should handle this gracefully by returning the appropriate error message. - You are not allowed to use any third-party libraries or frameworks.","solution":"from typing import List, Optional class StudyGroupManager: def __init__(self): self.groups = {} self.student_groups = {} def create_group(self, subject: str) -> None: if subject not in self.groups: self.groups[subject] = [] def add_student(self, subject: str, student: str) -> None: if subject not in self.groups: self.create_group(subject) if student not in self.groups[subject]: self.groups[subject].append(student) if student not in self.student_groups: self.student_groups[student] = [] if subject not in self.student_groups[student]: self.student_groups[student].append(subject) def remove_student(self, subject: str, student: str) -> Optional[str]: if subject not in self.groups: return \\"Study group does not exist\\" if student not in self.groups[subject]: return \\"Student not in the study group\\" self.groups[subject].remove(student) self.student_groups[student].remove(subject) return None def list_students(self, subject: str) -> List[str]: if subject not in self.groups: return [] return self.groups[subject] def list_groups(self, student: str) -> List[str]: if student not in self.student_groups: return [] return self.student_groups[student]"},{"question":"Sudoku is a partially completed 9×9 grid, wherein some of the cells are already filled with numbers from 1 to 9, and the remaining cells are empty. The objective is to fill the grid such that each column, each row, and each of the nine 3×3 subgrids that compose the grid (also called \\"boxes\\") contains all of the numbers from 1 to 9 exactly once. The challenge is to implement a Sudoku solver that will fill in the missing numbers in the grid while adhering to the rules of the game. Input: The input will contain a partially completed Sudoku grid. The grid will be provided as nine lines, each containing nine integers separated by spaces. Empty cells will be represented by 0. Output: The program should output the completed Sudoku grid in the same format. Constraints: - The provided grid will always have at least one valid solution. Sample Input: 0 6 0 1 0 4 0 5 0 0 0 8 3 0 5 6 0 0 2 0 0 0 0 0 0 0 1 8 0 0 4 0 7 0 0 6 0 0 6 0 0 0 3 0 0 7 0 0 9 0 1 0 0 4 5 0 0 0 0 0 0 0 2 0 0 7 2 0 6 9 0 0 0 4 0 5 0 8 0 7 0 Output: 4 6 3 1 7 4 8 5 9 1 7 8 3 2 5 6 9 4 2 9 5 6 8 9 7 4 1 8 5 2 4 3 7 1 9 6 9 1 6 8 5 2 3 8 7 7 3 4 9 6 1 5 2 4 5 8 1 7 9 3 4 6 2 3 2 7 2 4 6 9 1 8 6 4 9 5 1 8 2 7 3","solution":"def solve_sudoku(board): def is_valid(num, pos): # Check row for i in range(9): if board[pos[0]][i] == num and pos[1] != i: return False # Check column for i in range(9): if board[i][pos[1]] == num and pos[0] != i: return False # Check box box_x = pos[0] // 3 box_y = pos[1] // 3 for i in range(box_x*3, box_x*3 + 3): for j in range(box_y*3, box_y*3 + 3): if board[i][j] == num and (i,j) != pos: return False return True def find_empty(): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def solver(): empty = find_empty() if not empty: return True row, col = empty for i in range(1, 10): if is_valid(i, (row, col)): board[row][col] = i if solver(): return True board[row][col] = 0 return False solver() return board"},{"question":"Linked List Reversal with Constraints problem You are given a singly linked list with N nodes and a non-negative integer K. Each node in the linked list contains an integer value. The linked list\'s nodes are numbered sequentially from 1 to N. You need to perform a constrained reversal on this linked list: starting from any given node, reverse the next K nodes or until the end of the list, whichever comes first. Write a function to simulate this constrained reversal on the given linked list, and return the head of the resulting linked list after performing the reversal starting at the given node indices. Input format * In the first line, the number of nodes N of the given linked list and the integer K. * The second line consists of N integers. The i-th integer represents the value of the i-th node. * The third line consists of M integers, indicating the start positions of the constrained reversals. Constraints 1 leq N leq 10^5 0 leq K leq N 0 leq value of each node leq 10^9 1 leq M leq N Output format Output the values in the resulting linked list after performing all the constrained reversals from the given start positions. Input example 1 5 2 1 2 3 4 5 1 3 Output example 1 2 1 4 3 5 Input example 2 4 3 1 2 3 4 1 Output example 2 3 2 1 4 Explanation example 1 - First reversal starts from node 1, reversing the first two nodes resulting in [2, 1, 3, 4, 5]. - The second reversal starts from node 3, reversing the next two nodes resulting in [2, 1, 4, 3, 5]. Explanation example 2 - First and only reversal starts from node 1, reversing the first three nodes resulting in [3, 2, 1, 4].","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list_section(head, k): prev = None curr = head next = None count = 0 while curr is not None and count < k: next = curr.next curr.next = prev prev = curr curr = next count += 1 if head is not None: head.next = curr return prev def traverse_to_position(head, pos): current = head for i in range(pos - 1): if current.next is None: break current = current.next return current def linked_list_from_list(values): if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head def list_from_linked_list(head): values = [] current = head while current: values.append(current.val) current = current.next return values def constrained_reversal(n, k, node_values, start_positions): head = linked_list_from_list(node_values) for start_pos in start_positions: start_node = traverse_to_position(head, start_pos) if start_pos == 1: head = reverse_linked_list_section(start_node, k) else: traversal_node = traverse_to_position(head, start_pos - 1) traversal_node.next = reverse_linked_list_section(start_node, k) return list_from_linked_list(head)"},{"question":"Given an array of integers which represents the number of flowers blooming each day, write a function that calculates the maximum sum of bloomed flowers within any consecutive subarray of a specified length. Implement a function `max_bloomed_flowers`, which takes an array of integers `blooming_days` and an integer `k`, and returns the maximum sum of bloomed flowers in any consecutive subarray of length `k`. **Function signature**: `def max_bloomed_flowers(blooming_days: List[int], k: int) -> int` # Input - `blooming_days` (List[int]): a list of non-negative integers representing the number of flowers that bloom each day. - `k` (int): the length of the subarray to consider for maximum bloomed flowers sum. # Output - Return an integer representing the maximum sum of flowers bloomed within any consecutive subarray of length `k`. # Constraints - The length of `blooming_days` (`n`) will be at least 1 and up to 10^6. - `k` will be less than or equal to `n`. # Example ```python assert max_bloomed_flowers([1, 3, 2, 5, 1, 1, 2], 3) == 10 # Explanation: The consecutive subarray with maximum sum of length 3 is [3, 2, 5], sum = 10. assert max_bloomed_flowers([4, 5, 1, 3, 2], 2) == 9 # Explanation: The consecutive subarray with maximum sum of length 2 is [4, 5], sum = 9. assert max_bloomed_flowers([2, 1, 2, 3, 2, 4], 4) == 11 # Explanation: The consecutive subarray with maximum sum of length 4 is [1, 2, 3, 2], sum = 11. ```","solution":"from typing import List def max_bloomed_flowers(blooming_days: List[int], k: int) -> int: if not blooming_days or k <= 0 or k > len(blooming_days): return 0 current_sum = sum(blooming_days[:k]) max_sum = current_sum for i in range(k, len(blooming_days)): current_sum = current_sum - blooming_days[i - k] + blooming_days[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array of N integers where each integer represents a position on a number line, find the minimum distance between any two distinct elements in the array. If the array contains fewer than two distinct elements, return -1. Example 1: Input: N = 5 arr[] = {3, 8, 15, 8, 7} Output: 1 Explanation: The two closest distinct elements are 7 and 8, with a distance of 1. Example 2: Input: N = 3 arr[] = {5, 5, 5} Output: -1 Explanation: There are no distinct elements in the array. Your Task: You don\'t need to read input or print anything. Complete the function minDist() which takes the array of integers arr[] and its size N as input parameters and returns the minimum distance between any two distinct elements, or -1 if there are fewer than two distinct elements. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} -10^6 ≤ arr[i] ≤ 10^6","solution":"def minDist(N, arr): Returns the minimum distance between any two distinct elements in the array. Returns -1 if there are fewer than two distinct elements. # Convert array to a set to remove duplicates unique_elements = sorted(set(arr)) # If there are fewer than 2 distinct elements, return -1 if len(unique_elements) < 2: return -1 # Initialize the minimum distance to a large number min_distance = float(\'inf\') # Iterate through the unique elements and find the minimum distance for i in range(len(unique_elements) - 1): distance = unique_elements[i + 1] - unique_elements[i] if distance < min_distance: min_distance = distance return min_distance"},{"question":"You are given a string consisting of lowercase letters and your task is to count the number of characters that need to be removed to make the string a palindrome. A palindrome is a word that reads the same backwards as forwards. For example, `solve(\\"abca\\") = 1` because by removing either one of the \'a\' characters, the resulting string can be \\"abc\\" or \\"bca\\" which is not a palindrome, hence by removing \'c\', the string becomes \\"aba\\" which is a palindrome. See test cases for more examples. Good luck! If you like this Challenge, check out: [Palindrome Partitioning](https://www.codewars.com/kata/5a1ebea7a6b42047d700004e) [Longest Palindromic Subsequence](https://www.codewars.com/kata/5a572a00d8e145741b000075)","solution":"def min_removals_to_make_palindrome(s: str) -> int: Returns the minimum number of characters that need to be removed to make the string a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return len(s) - lps_length"},{"question":"Alex is particularly fond of trees, especially binary trees. He enjoys the challenge of finding the minimum value in the path between two nodes in a binary tree. Recently, he encountered a large balanced binary search tree and posed the following problem to you: Given a balanced binary search tree built with N unique integers, you need to handle Q queries of two types: 1. \\"1 node value\\" - Update the value of a specific node to the given value. 2. \\"2 u v\\" - Find the minimum value in the path between nodes u and v. ----Input---- - The first line contains an integer N, the number of nodes in the binary search tree. - The second line contains N unique integers, representing the values stored at each node in the original in-order traversal of the tree. - The next line contains an integer Q, the number of queries. - Each of the next Q lines contains a query of one of the two types described above. ----Output---- For each query of type 2, print the minimum value found in the path between nodes u and v. ----Constraints---- - 2 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ value, u, v ≤ 10^9 ----Example---- Input: 5 10 5 3 8 2 3 2 3 10 1 8 7 2 2 5 Output: 3 2 ----Explanation---- In the given binary search tree, the original structure with in-order values would be: 5 / 3 8 / 2 10 1. In the first query, we find the minimum value in the path from node 3 to node 10 which, following the path {3 → 5 → 8 → 10}, yields the minimum value 3. 2. In the second query, we update the value of node 8 to 7. 3. In the third query, we find the minimum value in the path from node 2 to node 5 which, following the path {2 → 3 → 5}, yields the minimum value 2.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_bst(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert_bst(root.left, value) else: root.right = insert_bst(root.right, value) return root def build_bst(inorder_values): root = None for value in inorder_values: root = insert_bst(root, value) return root def find_node(root, value): if root is None or root.value == value: return root if value < root.value: return find_node(root.left, value) return find_node(root.right, value) def lca_bst(root, n1, n2): while root: if root.value > n1 and root.value > n2: root = root.left elif root.value < n1 and root.value < n2: root = root.right else: break return root def min_in_path(root, n1, n2): ancestor = lca_bst(root, n1, n2) return min_path_util(ancestor, n1, n2) def min_from_node_to_value(root, value): min_val = float(\'inf\') while root: min_val = min(min_val, root.value) if root.value == value: break elif value < root.value: root = root.left else: root = root.right return min_val def min_path_util(root, n1, n2): if root is None: return float(\'inf\') return min(min_from_node_to_value(root, n1), min_from_node_to_value(root, n2)) import sys input = sys.stdin.read from io import StringIO def handle_queries(input_data): input_data = StringIO(input_data) input = input_data.read data = input().split() N = int(data[0]) values = list(map(int, data[1:N+1])) Q = int(data[N+1]) queries = data[N+2:] root = build_bst(values) result = [] index = 0 while index < len(queries): query_type = int(queries[index]) if query_type == 1: node_to_update = int(queries[index+1]) new_value = int(queries[index+2]) node = find_node(root, node_to_update) if node: node.value = new_value index += 3 elif query_type == 2: u = int(queries[index+1]) v = int(queries[index+2]) res = min_in_path(root, u, v) result.append(res) index += 3 return result"},{"question":"Palindrome Substrings Given a string S, your task is to find the total number of palindromic substrings in S. A substring is a contiguous segment of a string, and a palindromic substring is one that reads the same forwards as backwards. Input format: The input consists of multiple strings provided as follows: n S_1 S_2 ... S_n Where, - n is the number of strings. - S_i is the ith string in the input set. Output format: For each string S_i, output the total number of palindromic substrings in S_i. Constraints: * 1 ≤ n ≤ 100 * 1 ≤ |S_i| ≤ 1000 * S_i consists of only lowercase English letters. Examples: Input: 3 aaa abc racecar Output: 6 3 10 Explanation: For the first input string \\"aaa\\": The palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". For the second input string \\"abc\\": The palindromic substrings are: \\"a\\", \\"b\\", \\"c\\". For the third input string \\"racecar\\": The palindromic substrings are: \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\".","solution":"def count_palindromic_substrings(s): Returns the total number of palindromic substrings in the given string s. n = len(s) count = 0 # Each single character is a palindrome dp = [[False] * n for _ in range(n)] # Checking for single characters for i in range(n): dp[i][i] = True count += 1 # Checking for two characters for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Checking for substrings longer than two characters for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def process_inputs(inputs): Processes the input and returns the number of palindromic substrings for each string. results = [] n = int(inputs[0]) for i in range(1, n + 1): s = inputs[i] results.append(count_palindromic_substrings(s)) return results"},{"question":"In a coding competition, participants are given a list of programming problems to solve. Each problem has a difficulty rating between 1 and 5, where 1 is the easiest and 5 is the hardest. Each participant can attempt to solve any subset of problems, but there are certain constraints: 1. A participant can solve at most 3 problems. 2. The sum of the difficulty ratings of the problems attempted by a participant must be at most 8. Given a list of problem difficulty ratings, you need to determine the maximum number of problems that any participant can attempt while satisfying the constraints. If multiple combinations of problems result in attempting the same maximum number of problems, you should provide the highest possible sum of difficulty ratings among them. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 15), representing the number of problems. - The second line contains n integers, each representing the difficulty rating of a problem. Output Print the maximum number of problems a participant can attempt and the highest possible sum of difficulty ratings. Examples Input 7 1 2 3 4 5 3 2 Output 3 8 Explanation: The participant can attempt the problems with difficulty ratings [3, 3, 2], [4, 3, 1], or any subset summing up to 8, but not exceeding 8. Input 5 5 3 4 2 1 Output 3 8 Explanation: The participant can attempt the problems with difficulty ratings [5, 2, 1] to reach the highest sum possible within the constraints. Input 4 4 4 4 4 Output 2 8 Explanation: The participant can attempt two problems with difficulty ratings [4, 4] since any third problem would exceed the difficulty sum constraint.","solution":"from itertools import combinations def max_problems(n, difficulties): Determines the maximum number of problems a participant can attempt and the highest possible sum of difficulty ratings among them. Parameters: - n: int, number of problems - difficulties: list of int, difficulty ratings of the problems Returns: - tuple: (max_number_of_problems, highest_sum_of_difficulties) max_problems = 0 highest_sum = 0 for r in range(1, 4): # The participant can solve at most 3 problems (i.e., combinations of size 1, 2, and 3) for combo in combinations(difficulties, r): if sum(combo) <= 8: if r > max_problems: max_problems = r highest_sum = sum(combo) elif r == max_problems: highest_sum = max(highest_sum, sum(combo)) return max_problems, highest_sum"},{"question":"A robot is currently located at position (0, 0) on an infinite grid. The robot can receive four types of commands: - \\"U\\" (move up) - \\"D\\" (move down) - \\"L\\" (move left) - \\"R\\" (move right) Given a string representing a sequence of commands, determine whether the robot returns to the origin (i.e., the position (0, 0)) after executing all the commands in the order given. If the robot returns to the origin, print \\"YES\\". Otherwise, print \\"NO\\". For example, suppose the command string is \\"UDLR\\". Executing these commands would bring the robot back to (0, 0), so you should output \\"YES\\". On the other hand, if the command string is \\"UUD\\" the robot will not be back at (0, 0), so the output should be \\"NO\\". -----Input----- The first line contains a single integer t (1le tle 10^4) — the number of test cases. Each of the next t lines contains a single string s representing the sequence of commands. The string consists of characters \'U\', \'D\', \'L\', \'R\' only. The total length of all strings does not exceed 10^6. -----Output----- For each test case, output \\"YES\\" if the robot returns to the origin after executing the commands in the order given. Otherwise, output \\"NO\\". -----Examples----- Input 5 UDLR UUD LLRR LUDR DDUU Output YES NO YES YES YES -----Note----- For the first test case, the sequence \\"UDLR\\" brings the robot back to the origin, so the output is \\"YES\\". For the second test case, the sequence \\"UUD\\" leaves the robot at position (0, 1), so the output is \\"NO\\". For the third test case, the sequence \\"LLRR\\" brings the robot back to the origin, so the output is \\"YES\\". For the fourth test case, the sequence \\"LUDR\\" brings the robot back to the origin, so the output is \\"YES\\". For the fifth test case, the sequence \\"DDUU\\" brings the robot back to the origin, so the output is \\"YES\\".","solution":"def does_robot_return_to_origin(commands_list): Determines if the robot returns to the origin (0, 0) after executing each sequence of commands. Parameters: commands_list (list of str): List of command strings where each command string consists of \'U\', \'D\', \'L\', \'R\' representing Up, Down, Left, and Right movements respectively. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each corresponding command string in commands_list. results = [] for commands in commands_list: x = y = 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 if x == 0 and y == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Design a function that receives an array of non-negative integers and a target sum. The function should return true if any two distinct numbers in the array add up to the target sum, and false otherwise. Example ----- For the input array `[5, 1, 7, 9, 3]` and the target sum `10`, the function should return `true` because `7 + 3 = 10`. Another example ----- For the input array `[2, 4, 6, 8]` and the target sum `13`, the function should return `false` because no two numbers add up to `13`.","solution":"def has_two_sum(nums, target): Returns true if any two distinct numbers in the array add up to the target sum, and false otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Imagine you are organizing a conference event and you need to assign each attendee to one of two available workshops. Each workshop has a different skill level requirement, and you want to make sure the assignment is balanced: at least one attendee should go to each workshop. The goal is to count the number of ways to assign `n` attendees to the two workshops under these constraints. Write a function `count_assignments(n)` that takes an integer `n` representing the number of attendees and returns the number of valid ways to assign them to two workshops, ensuring that none of the workshops are empty. Your function should work efficiently for `1 ≤ n ≤ 50`. # Example ```python count_assignments(3) # Output: 6 count_assignments(4) # Output: 14 count_assignments(5) # Output: 30 ``` # Explanation For `n = 3`: - Workshop 1 has 1 attendee and Workshop 2 has 2 attendees. - Workshop 1 has 2 attendees and Workshop 2 has 1 attendee. The combinations are `(1,2)` and `(2,1)` and the order matters for each chosen combination of attendees. # Constraints - 1 ≤ n ≤ 50","solution":"def count_assignments(n): Returns the number of valid ways to assign n attendees to two workshops such that none of the workshops are empty. # Using the binomial coefficient to calculate the number of ways to # choose k attendees for one workshop out of n, and we sum all possible # ways from choosing 1 to n-1 attendees for one workshop. from math import comb total_ways = 0 for k in range(1, n): total_ways += comb(n, k) return total_ways"},{"question":"Palindromes A palindrome is a string that reads the same forward and backward. Your task is to check if the given string is a palindrome. Write a function that takes a single string as input and returns \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. input A single line containing a string consisting of lowercase English letters. output Output \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. Example Input racecar Output Yes Example Input hello Output No","solution":"def is_palindrome(s): Returns \\"Yes\\" if the input string s is a palindrome, \\"No\\" otherwise. return \\"Yes\\" if s == s[::-1] else \\"No\\""},{"question":"Write a function that takes an integer n as input and returns the n-th number in the Fibonacci sequence. Input The input is a single integer n (0 <= n <= 30). Output Output a single integer — the n-th number in the Fibonacci sequence. Note The Fibonacci sequence starts as follows: F(0) = 0 F(1) = 1 F(2) = 1 F(3) = 2 F(4) = 3 Examples Input 0 Output 0 Input 1 Output 1 Input 4 Output 3","solution":"def fibonacci(n): Returns the n-th number in the Fibonacci sequence. Parameters: n (int): the position in the Fibonacci sequence (0 <= n <= 30) Returns: int: the n-th Fibonacci number if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"In a game, players collect points and receive awards based on the collected points. Each player can collect points in multiple rounds, and there are several rounds of point collection before the final awards are distributed. Your task is to determine the total points each player has collected by the end of all given rounds. You are given a list of players, each represented by a unique player ID, and a list of rounds where each round contains player ID and points collected in that round. Your task is to calculate the total points each player accumulated by the end of all rounds and output a list of players sorted by their total points in descending order. If two players have the same total points, they should be listed in ascending order of their player ID. -----Input----- - The first line of the input contains a single integer P denoting the number of players. - The second line contains P space-separated integers representing the unique IDs of the players. - The third line contains a single integer R denoting the number of rounds. - Each of the next R lines contains two space-separated integers ID and points denoting the player ID and the points collected by that player in the respective round. -----Output----- - Print P lines, each containing a player\'s ID and their total points, sorted by total points in descending order. If two players have the same total points, they should be listed in ascending order of their player ID. -----Constraints----- - 1 le P le 100 - Each player ID is a distinct integer. - 1 le R le 1000 - 1 le ID le 1000 - 1 le points le 100 -----Example Input----- 4 1 2 3 4 5 1 50 2 30 3 20 4 10 1 10 -----Example Output----- 1 60 2 30 3 20 4 10 -----Explanation----- Player 1 has collected a total of 60 points (50 + 10) from two rounds. Player 2 has collected 30 points from one round. Player 3 has collected 20 points from one round. Player 4 has collected 10 points from one round. Thus, the players are listed in descending order of their total points.","solution":"def calculate_total_points(P, player_ids, R, rounds): # Initialize a dictionary to store the total points for each player points_dict = {player_id: 0 for player_id in player_ids} # Accumulate the points for each player ID given in rounds for round in rounds: player_id, points = round if player_id in points_dict: points_dict[player_id] += points # Convert the dictionary to a list of tuples (player_id, total_points) players_total_points = [(player_id, total_points) for player_id, total_points in points_dict.items()] # Sort the players first by total points (descending) and then by player_id (ascending) players_total_points.sort(key=lambda x: (-x[1], x[0])) return players_total_points"},{"question":"John wants to rearrange the letters of a given word so that it becomes the lexicographically smallest permutation. If the given word is already the lexicographically smallest permutation, he will keep it as it is. -----Input:----- - First-line will contain T, the number of test cases. - Each of the following T lines contains a string S which represents the given word. -----Output:----- For each test case, output a single line containing the lexicographically smallest permutation of the given word. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 1000 - S contains only lowercase English letters. -----Sample Input:----- 3 cba bca abc -----Sample Output:----- abc abc abc -----EXPLANATION:----- For the first test case, the lexicographically smallest permutation of \'cba\' is \'abc\'. For the second test case, the lexicographically smallest permutation of \'bca\' is \'abc\'. For the third test case, \'abc\' is already the lexicographically smallest permutation, so it remains the same.","solution":"def lexicographically_smallest_permutations(T, test_cases): Returns the lexicographically smallest permutation for each of the given test cases. Parameters: T (int): The number of test cases. test_cases (list of str): A list of strings to process. Returns: list of str: A list of lexicographically smallest permutations. return [\'\'.join(sorted(s)) for s in test_cases]"},{"question":"A superhero is in a grid city consisting of n × m intersections, where each intersection can either have a building (represented by \'#\') or be an open space (represented by \'.\'). The superhero starts at a given intersection (sx, sy) and needs to reach a target intersection (tx, ty) to stop a crime. The superhero can move up, down, left, or right but cannot pass through buildings. Find the minimum number of moves the superhero needs to reach the target intersection. If it is impossible to reach the target, return -1. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) which are the dimensions of the grid. The next n lines each contain m characters, either \'.\' or \'#\', describing the grid. The last line contains two pairs of integers, sx, sy and tx, ty (1 ≤ sx, sy, tx, ty ≤ n, m). # Output A single integer representing the minimum number of moves required for the superhero to reach the target intersection, or -1 if it is impossible. # Examples Input ``` 4 4 .... ..#. .... .#.. 1 1 4 4 ``` Output ``` 6 ``` Input ``` 3 3 # #.# # 1 1 3 3 ``` Output ``` -1 ```","solution":"from collections import deque def min_moves_to_target(grid, n, m, sx, sy, tx, ty): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Convert 1-based coordinates to 0-based start = (sx - 1, sy - 1) target = (tx - 1, ty - 1) if not is_valid(*start) or not is_valid(*target): return -1 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Main function to translate input and output format def superhero_grid_path(n, m, grid, sx, sy, tx, ty): return min_moves_to_target(grid, n, m, sx, sy, tx, ty)"},{"question":"A large company has decided to automate the monitoring of their factory machines. Each machine can send start and end logs that report when a machine starts and stops functioning. Given these logs, the company wants to analyze and determine the maximum number of machines that were functioning simultaneously at any given point in time. You are given a list of logs. Each log is represented as a tuple (start, end) where start and end are both integers, with start being the time when the machine starts functioning and end being the time when it stops functioning. Write a program that finds the maximum number of machines that were operating simultaneously. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of logs. Each of the next n lines contains two integers start and end (1 ≤ start < end ≤ 10^9) — representing the start and end times of each machine\'s functioning period. Output Print a single integer — the maximum number of machines that were functioning at the same time. Examples Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 1","solution":"def max_machines_operating(logs): events = [] for start, end in logs: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_machines = 0 current_machines = 0 for event in events: if event[1] == \'start\': current_machines += 1 max_machines = max(max_machines, current_machines) else: current_machines -= 1 return max_machines"},{"question":"Alex loves collecting stamps and he organizes them in albums. Each album has exactly P pages, and each page can hold Q stamps. He wants to calculate the total number of stamps that can be organized in his collection of albums. Help Alex find the total number of stamps that fit into his organization system. ------ Input Format ------ - The first line of input will contain a single integer A, denoting the number of test cases. - Each test case consists of two space-separated integers on a single line, P and Q — the number of pages in an album and the number of stamps that each page can hold, respectively. ------ Output Format ------ For each test case, output on a new line, the total number of stamps that can fit into the album. ------ Constraints ------ 1 ≤ A ≤ 100 1 ≤ P ≤ 100 1 ≤ Q ≤ 100 ----- Sample Input 1 ------ 3 3 5 6 10 12 8 ----- Sample Output 1 ------ 15 60 96 ----- explanation 1 ------ Test case 1: The album consists of 3 pages, and each page can hold 5 stamps. Hence, the total number of stamps is 3 times 5 = 15. Test case 2: The album consists of 6 pages, and each page can hold 10 stamps. Hence, the total number of stamps is 6 times 10 = 60. Test case 3: The album consists of 12 pages, and each page can hold 8 stamps. Hence, the total number of stamps is 12 times 8 = 96.","solution":"def total_stamps(A, test_cases): results = [] for P, Q in test_cases: results.append(P * Q) return results # Example usage: # test_cases = [(3, 5), (6, 10), (12, 8)] # print(total_stamps(3, test_cases)) # Output: [15, 60, 96]"},{"question":"There is a factory that produces candies. Each day, the factory produces a different number of candies. The factory wants to keep track of the total number of candies produced over a period of days to analyze the production efficiency. You need to implement a function that processes queries related to the total candy production over a specific range of days. You are given an array `candies` where `candies[i]` represents the number of candies produced on the i-th day. You are also given a number of queries. Each query is a pair of integers (l, r) where (1 ≤ l ≤ r ≤ n). You need to return the total number of candies produced from day l to day r inclusive for each query. Implement a function `candyProduction` that takes in the array `candies` and a list of queries and returns the result for each query. -----Input----- - An integer n (1 ≤ n ≤ 100 000) — the number of days. - An array `candies` of length n where `candies[i]` (0 ≤ candies[i] ≤ 1000) represents the number of candies produced on the i-th day. - An integer q (1 ≤ q ≤ 100 000) — the number of queries. - A list of q pairs of integers (l, r) — each pair represents a query. -----Output----- - For each query, print the total number of candies produced from day l to day r inclusive. -----Examples----- Input 6 [10, 20, 30, 40, 50, 60] 3 1 3 2 5 4 6 Output 60 140 150 Input 4 [7, 3, 8, 6] 2 1 4 2 3 Output 24 11 -----Note----- In the first example, the total candies produced from day 1 to day 3 is 10 + 20 + 30 = 60. The total candies produced from day 2 to day 5 is 20 + 30 + 40 + 50 = 140. The total candies produced from day 4 to day 6 is 40 + 50 + 60 = 150.","solution":"def candyProduction(candies, queries): Returns the total number of candies produced from day l to day r inclusive for each query. Parameters: candies (list): The number of candies produced each day. queries (list): List of tuples where each tuple contains two integers (l, r). Returns: list: The total number of candies produced for each query. # Precompute prefix sums prefix_sums = [0] * (len(candies) + 1) for i in range(len(candies)): prefix_sums[i + 1] = prefix_sums[i] + candies[i] # Process each query results = [] for l, r in queries: total_candies = prefix_sums[r] - prefix_sums[l - 1] results.append(total_candies) return results"},{"question":"You are given a string that contains both uppercase and lowercase letters, as well as numbers. Your task is to write a function that sorts the characters in the string such that all the letters come first (in alphabetical order), followed by all the digits (in numerical order). Digits must maintain their relative positions. For instance: Example Input 1 ------------- a1b2c3 Example Output 1 ------------- abc123 Example Input 2 ------------- Z9X8Y7W6 Example Output 2 ------------- WXYZ9876 Note that all characters that are not letters or digits should be omitted from the output. For instance: Example Input 3 ------------- abc@123 Example Output 3 ------------- abc123 You can write a helper function if necessary to make your code more readable.","solution":"def sort_string(s): Sorts a string such that all letters come first (in alphabetical order), followed by all digits (in numerical order). Non-alphanumeric characters are omitted from the output. Parameters: s (str): The input string. Returns: str: The sorted string. letters = sorted([c for c in s if c.isalpha()]) digits = [c for c in s if c.isdigit()] # Maintain the relative order of digits return \'\'.join(letters) + \'\'.join(digits)"},{"question":"You are tasked with developing a new e-commerce feature that recommends items to customers based on their past purchases. Your first step is to extract useful information from purchase history data. For this question, you need to write a function that identifies the most frequently purchased item over a specified period. The input will be a list of purchase records where each record contains the ID of the item bought and the timestamp of the purchase. -----Input----- The first line contains an integer N (1 ≤ N ≤ 100,000), the number of purchase records. Each of the next N lines describes a purchase record with two elements: an integer itemID (1 ≤ itemID ≤ 10,000) representing the ID of the purchased item, and an integer timestamp (1 ≤ timestamp ≤ 10^9) representing the time of purchase in seconds since the epoch. The final and eighth line contains two integers start and end (1 ≤ start < end ≤ 10^9), specifying the start and end of the period over which to consider purchases. -----Output----- Print the ID of the most frequently purchased item during the given period. If there is a tie, print the smallest item ID. If no purchases were made in the specified period, print -1. -----Example----- Sample Input 1: 5 1 100 2 200 1 300 3 400 2 500 100 400 Sample Output 1: 1 Sample Input 2: 6 3 100 3 200 2 300 2 400 1 500 3 600 150 400 Sample Output 2: 3","solution":"def most_frequent_item_in_period(purchases, start, end): Identifies the most frequently purchased item over a specified period. :param purchases: List of (itemID, timestamp) tuples representing purchase records. :param start: Start of the period (inclusive) to consider purchases. :param end: End of the period (inclusive) to consider purchases. :return: ID of the most frequently purchased item in the specified period. If tied, return the smallest ID. If no purchases are made in the period, return -1. from collections import Counter filtered_items = [itemID for itemID, timestamp in purchases if start <= timestamp <= end] if not filtered_items: return -1 item_count = Counter(filtered_items) most_frequent_item = min(item_count, key=lambda x: (-item_count[x], x)) return most_frequent_item"},{"question":"Write a function that takes a list of strings words and returns the string(s) that have the highest frequency of occurrence in the list. If there are multiple strings with the same highest frequency, return them all in a new list in the order they first appeared. For example: - words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"], => [\\"apple\\"] - words = [\\"cat\\", \\"dog\\", \\"horse\\", \\"cat\\", \\"horse\\", \\"dog\\", \\"dog\\", \\"horse\\"], => [\\"dog\\", \\"horse\\"] - words = [\\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"a\\", \\"c\\", \\"b\\"], => [\\"a\\", \\"b\\"]","solution":"def most_frequent_strings(words): Returns a list of string(s) that have the highest frequency of occurrence in the list. from collections import Counter if not words: return [] count = Counter(words) max_freq = max(count.values()) # Find all strings that have the highest frequency most_freq_words = [word for word in words if count[word] == max_freq] # Remove duplicates while maintaining order result = [] seen = set() for word in most_freq_words: if word not in seen: seen.add(word) result.append(word) return result"},{"question":"You\'re working for a software firm that manages data backups for clients. Considering the growth of data, the company plans to optimize the storage used for holding the incremental backups. Each day, a certain volume of data is added, and the backup should store it without exceeding a specified storage capacity. Since the backup process is daily, the firm also wants to minimize the number of storage drives used. Each storage drive can hold a maximum volume of `X` units. Your task is to determine the minimum number of drives needed to accommodate the daily incremental backups for a given number of days. Input The first line contains two integers `n` and `X` separated by a space, where `n` is the number of days, and `X` is the maximum capacity of each storage drive. The second line contains `n` space-separated integers, where each integer represents the volume of data added on that day. Output Output a single integer - the minimum number of drives required. Constraints: 1 ≤ n ≤ 100 1 ≤ X ≤ 10^9 1 ≤ volume of data added each day ≤ X SAMPLE INPUT 5 100 20 50 30 70 60 SAMPLE OUTPUT 3 Explanation An optimal way to store the data is to use one drive for the data added on the first day (20) and the third day (30), another drive for the data added on the second day (50) and the fourth day (70), and a third drive for the data added on the fifth day (60). Thus, a minimum of 3 storage drives is required.","solution":"def min_drives_needed(n, X, volumes): drives = [] for volume in sorted(volumes, reverse=True): placed = False for i in range(len(drives)): if drives[i] + volume <= X: drives[i] += volume placed = True break if not placed: drives.append(volume) return len(drives)"},{"question":"In a distant galaxy, a legendary astronaut, Zoran, needs to establish a secure communication channel using an encryption mechanism. The encryption involves rearranging the string of commands to form a palindrome. A palindrome is a string that reads the same backward as forward. However, due to the signal interference, the rearranged string can only have at most one character\'s frequency to be odd. Zoran needs your help to determine if it is possible to rearrange the string to form a palindrome. Your task is to write a function that will determine, for each provided command string, whether it can be rearranged to form a palindrome. -----Input----- The first line contains an integer T (1 leq T leq 100) — the number of test cases. Each of the next T lines contains a single string of lowercase English letters s (1 leq |s| leq 10^5) representing the commands. -----Output----- For each command string, output \\"YES\\" if it is possible to rearrange the string to form a palindrome, otherwise print \\"NO\\". Separate answers with line breaks. -----Example----- Input 3 aabb abc aabbcadad Output YES NO YES -----Note----- In the first case, the string \\"aabb\\" can be rearranged to \\"abba\\" or \\"baab\\", both of which are palindromes. In the second case, the string \\"abc\\" does not have any rearrangement that forms a palindrome. In the third case, the string \\"aabbcadad\\" can be rearranged to \\"aabdcdbaa\\" or \\"abadcdaba\\", both of which are palindromes.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. A string can be rearranged to a palindrome if at most one character has an odd frequency. from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_commands(commands): Processes multiple commands to determine if each can be rearranged to form a palindrome. results = [] for command in commands: results.append(can_form_palindrome(command)) return results"},{"question":"You will be given an integer n, your task is to return the product of all natural numbers less than or equal to n. As the answer could be very large, return the answer modulo 10^{9}+7. Example 1: Input: n = 5 Output: 120 Explanation: 1*2*3*4*5 = 120 Example 2: Input: n = 4 Output: 24 Explanation: 1*2*3*4 = 24 Your Task: You don\'t need to read input or print anything. Your task is to complete the function productOfNaturals() which takes a single integer n as input and returns the product of all numbers x up to n, i.e., 1 <= x <= n. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 0 <= n <= 10^{4}","solution":"def productOfNaturals(n): Returns the product of all natural numbers less than or equal to n, modulo 10^9+7. MOD = 10**9 + 7 if n == 0: return 1 # By definition, the product of an empty set is 1. product = 1 for i in range(1, n+1): product = (product * i) % MOD return product"},{"question":"A water tank has a capacity of C liters. The tank is initially empty and water is poured at a rate of R liters per minute. Given the time duration T in minutes for which the water is poured, calculate the amount of water in the tank after T minutes. Note that the tank cannot hold more than its capacity, so if the poured amount exceeds the tank\'s capacity, the tank will be full. -----Constraints----- - 1 ≤ C ≤ 1000 - 1 ≤ R ≤ 100 - 1 ≤ T ≤ 100 -----Input----- Input is given from Standard Input in the following format: C R T -----Output----- Print the amount of water in the tank after T minutes. -----Sample Input----- 200 5 50 -----Sample Output----- 200 The tank has a capacity of 200 liters. Water is poured at a rate of 5 liters per minute for 50 minutes. Hence, the tank will be full with 200 liters of water.","solution":"def water_in_tank(C, R, T): Returns the amount of water in the tank after T minutes. Parameters: C (int): Capacity of the tank in liters (1 ≤ C ≤ 1000) R (int): Rate of water pouring in liters per minute (1 ≤ R ≤ 100) T (int): Time duration in minutes (1 ≤ T ≤ 100) Returns: int: Amount of water in the tank after T minutes. poured_water = R * T return min(poured_water, C) # Example usage: # print(water_in_tank(200, 5, 50)) # Output: 200"},{"question":"A popular bakery chain offers delivery of their products, and they\'ve recently introduced a promotion where customers can get a discount based on the total value of their purchase. The promotion works as follows: for any k consecutive purchases, if the sum of these k purchase values is greater than a given threshold S, a discount will be applied to each of these purchases. You are tasked to write a function that determines how many discounts will be applied based on the purchase values and the given threshold. -----Input----- The first line contains two integers n and k (1 leq k leq n leq 10^5), the number of purchases and the length of the consecutive purchase sequence to consider for discount. The second line contains n space-separated integers p_1, p_2, ..., p_n (1 leq p_i leq 10^4), representing the value of each purchase. The third line contains the integer S (1 leq S leq 10^9), the threshold which the sum of k consecutive purchases must exceed to apply discounts. -----Output----- Output a single integer representing the number of discounts applied. -----Example----- Input 8 3 10 20 30 40 25 50 10 20 75 Output 5 -----Explanation----- - For the 3 consecutive purchases starting at day 1 (values: 10, 20, 30), the sum is 60, which is not greater than 75, so no discounts are applied. - For the 3 consecutive purchases starting at day 2 (values: 20, 30, 40), the sum is 90, which is greater than 75, so 3 discounts are applied for these purchases. - For the 3 consecutive purchases starting at day 3 (values: 30, 40, 25), the sum is 95, which is greater than 75, so 3 discounts are applied for these purchases. - For the 3 consecutive purchases starting at day 4 (values: 40, 25, 50), the sum is 115, which is greater than 75, so 3 discounts are applied for these purchases. - For the 3 consecutive purchases starting at day 5 (values: 25, 50, 10), the sum is 85, which is greater than 75, so 3 discounts are applied for these purchases. - For the 3 consecutive purchases starting at day 6 (values: 50, 10, 20), the sum is 80, which is greater than 75, so 3 discounts are applied for these purchases.","solution":"def count_discounts(n, k, purchases, S): Determines how many times a discount will be applied based on the purchase values and the given threshold. Parameters: n (int): Number of purchases k (int): Length of the consecutive purchase sequence to consider for the discount purchases (list): List of purchase values S (int): The threshold which the sum of k consecutive purchases must exceed to apply discounts Returns: int: Number of discounts applied discount_count = 0 # Calculate the initial sum for the first window of size k current_window_sum = sum(purchases[:k]) # Check the first window if current_window_sum > S: discount_count += k # Slide over the list for i in range(1, n - k + 1): # Update the current window sum by removing the element exiting the window and adding the element entering the window current_window_sum = current_window_sum - purchases[i - 1] + purchases[i + k - 1] # Check if the current window sum exceeds the threshold if current_window_sum > S: discount_count += k return discount_count"},{"question":"A travel agency wants to create an optimized route plan for tourists visiting a series of landmarks in a city. They have identified N landmarks and the distances between each pair of landmarks. The goal is to determine the minimum possible distance the tourists need to travel to visit each landmark exactly once and return to the starting landmark (i.e., finding the shortest Hamiltonian cycle in the given graph of landmarks). The problem can be identified as the Travelling Salesman Problem (TSP). -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N — the number of landmarks. - The next N lines describe a matrix of integers, where the j-th integer in the i-th line is the distance between landmarks i and j. The i-th integer in the i-th line is always 0. -----Output----- For each test case, print a single line containing one integer — the minimum possible distance to visit all landmarks exactly once and return to the starting point. -----Constraints----- - 1 le T le 10 - 2 le N le 12 - 0 le Distance between landmarks le 100 -----Example Input----- 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 -----Example Output----- 80 64","solution":"def tsp_dp(N, distance_matrix): Solves the Travelling Salesman Problem using dynamic programming with bitmasking. Parameters: - N (int): Number of landmarks. - distance_matrix (list of list of int): NxN matrix representing distances between landmarks. Returns: - int: The minimum distance to visit all landmarks and return to the start. # Using bitmasking dp, we define visited[mask][i] as the minimum distance to visit all # landmarks in the set represented by `mask` ending at landmark `i`. INF = float(\'inf\') visited = [[INF] * N for _ in range(1 << N)] visited[1][0] = 0 # Starting point: visiting only the first landmark with distance 0 for mask in range(1 << N): for u in range(N): if mask & (1 << u): for v in range(N): if mask & (1 << v) == 0: new_mask = mask | (1 << v) visited[new_mask][v] = min(visited[new_mask][v], visited[mask][u] + distance_matrix[u][v]) # Return the minimum distance to visit all landmarks and return to the starting point (landmark 0) return min(visited[(1 << N) - 1][v] + distance_matrix[v][0] for v in range(N)) def solve_tsp(test_cases): results = [] for case in test_cases: N, distance_matrix = case result = tsp_dp(N, distance_matrix) results.append(result) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to count the minimum number of operations required to make all the characters in the string unique, so that no two characters in the string are the same. An operation consists of choosing any character in the string and replacing it with any other lowercase English letter that is not already present in the string. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Description of the test cases follows. Each of the next t lines contains a single string s (1 le |s| le 10^5). It is guaranteed that the sum of the lengths of all strings does not exceed 10^5. -----Output----- For each test case, output a single integer — the minimum number of operations required to make all characters in the string unique. -----Examples----- Input 4 abcabc aaaa abcd zzzz Output 3 3 0 3 -----Note----- In the first test case, the string \\"abcabc\\" has three extra characters \\"a\\", \\"b\\", and \\"c\\" that need to be replaced. We can replace them with three unique characters, resulting in a string such as \\"abcdef\\". Thus, we need 3 operations. In the second test case, all characters in \\"aaaa\\" are the same and we need to replace all except one character to make them unique, resulting in a string such as \\"abcd\\", thus 3 operations are needed. In the third test case, all characters in \\"abcd\\" are already unique, so no operations are needed. In the fourth test case, the string \\"zzzz\\" has three extra characters \\"z\\" that need to be replaced. We can replace them with three unique characters, resulting in a string such as \\"zabc\\". Thus, we need 3 operations.","solution":"def min_operations_to_unique(s): Returns the minimum number of operations required to make all characters in the string unique. from collections import Counter freq = Counter(s) unique_chars = set() duplicates = 0 for char, count in freq.items(): if count > 1: duplicates += count - 1 unique_chars.add(char) return duplicates def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_unique(s)) return results"},{"question":"Vincent is preparing for a coding competition. He has a strict workout schedule to increase his stamina. His trainer gives him a sequence of n daily stamina points he should achieve. Vincent starts with no stamina points and each day he gains or loses some stamina. Vincent wants to know the maximum cumulative stamina he can achieve on any day if he follows the schedule completely. He writes down the following information for his trainer. Input The first line contains number n (1 ≤ n ≤ 100). The second line contains n integers, each integer a_i (-1000 ≤ a_i ≤ 1000) representing the stamina points for each day. Positive values increase his stamina, while negative values decrease it. Output Print a single integer — the maximum cumulative stamina Vincent can achieve. Examples Input 5 2 3 -2 5 -1 Output 8 Note In the given example, Vincent gains stamina as follows: - Day 1: 2 - Day 2: 2 + 3 = 5 - Day 3: 5 - 2 = 3 - Day 4: 3 + 5 = 8 - Day 5: 8 - 1 = 7 The maximum cumulative stamina achieved is 8 on Day 4.","solution":"def max_cumulative_stamina(n, stamina_points): Returns the maximum cumulative stamina Vincent can achieve following his schedule. Parameters: n (int): Number of days stamina_points (list of int): List of stamina points for each day Returns: int: Maximum cumulative stamina max_stamina = 0 current_stamina = 0 for points in stamina_points: current_stamina += points if current_stamina > max_stamina: max_stamina = current_stamina return max_stamina"},{"question":"Given a string representing a mathematical expression, write a function to evaluate it and return the result as an integer. The expression may contain the following operators: `+` (addition), `-` (subtraction), and `*` (multiplication). The input will always be a valid expression containing non-negative integers and will not contain any whitespace. Example Input: \\"3+5*2-1\\" Output: 12 Function Description Complete the function `evaluateExpression` defined below. It should return an integer representing the calculated result. ```python def evaluateExpression(expression: str) -> int: # Your code here ``` Parameters - `expression` (string): A mathematical expression containing non-negative integers and the operators `+`, `-`, and `*`. Returns - `int`: The result of evaluating the expression. Input Format A single string `expression` representing a mathematical expression. Constraints - The length of the expression will be between 1 and 100. - The input will only contain non-negative integers (0-9) and the `+`, `-`, and `*` operators. - The expression will not contain any whitespace. - The expression will always be valid. Example Input 1: \\"2+3*6-4\\" Output 1: 16 Input 2: \\"1+2*3\\" Output 2: 7","solution":"def evaluateExpression(expression: str) -> int: Evaluates a mathematical expression containing integers and the operators +, -, and *. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) # Higher precedence for multiplication precedence = {\'+\': 1, \'-\': 1, \'*\': 2} operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): j = i while j < len(expression) and expression[j].isdigit(): j += 1 operands.append(int(expression[i:j])) i = j else: while (operators and precedence[operators[-1]] >= precedence[expression[i]]): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"A company wants to track its employees\' working hours in a system. You are provided with the punch-in and punch-out times for each employee for each day they worked. Your task is to write a function that calculates the total number of hours worked by the employee over a given period. If an employee punches in and out multiple times in a day, sum up the total hours worked for that day. Write a function **calculate_total_hours(punch_times)** where: - **punch_times**: List of tuples [(date1, in_time1, out_time1), (date2, in_time2, out_time2), ...] representing the punch-in and punch-out times for each employee. The date is in \'YYYY-MM-DD\' format and times are in \'HH:MM\' format (24-hour). The function should return: - A dictionary with dates as keys and total hours worked on each day as values. - An integer representing the total number of hours worked in the entire period (sum of hours worked on all days). Note: - If the out time is earlier than in time, it indicates work continued past midnight. - Ensure to handle any overflow of minutes when converting time into hours. Constraints: - 1 ≤ Number of entries in punch_times ≤ 1000 - All dates and times are valid, and out_time is always greater than or equal to in_time or indicates next day. Example Input: punch_times = [ (\'2023-10-01\', \'09:00\', \'17:00\'), (\'2023-10-01\', \'18:00\', \'21:00\'), (\'2023-10-02\', \'09:00\', \'19:30\'), (\'2023-10-03\', \'22:00\', \'02:00\'), # Crosses midnight ] Example Output: { \'2023-10-01\': 11, \'2023-10-02\': 10.5, \'2023-10-03\': 4, } Explanation: For \'2023-10-01\': 8 hours from 09:00 to 17:00 + 3 hours from 18:00 to 21:00 = 11 hours. For \'2023-10-02\': 10.5 hours from 09:00 to 19:30. For \'2023-10-03\': (2+24-22) = 4 hours from 22:00 to 02:00 (crosses midnight). Write the fully implemented function **calculate_total_hours(punch_times)**.","solution":"from datetime import datetime, timedelta def calculate_total_hours(punch_times): Calculate the total hours worked by an employee over a given period. :param punch_times: List of tuples [(date1, in_time1, out_time1), (date2, in_time2, out_time2), ...] representing the punch-in and punch-out times for each employee. The date is in \'YYYY-MM-DD\' format and times are in \'HH:MM\' format (24-hour). :return: A dictionary with dates as keys and total hours worked on each day as values, and the total number of hours worked in the entire period. daily_hours = {} total_hours = 0 for date, in_time, out_time in punch_times: in_time_dt = datetime.strptime(in_time, \'%H:%M\') out_time_dt = datetime.strptime(out_time, \'%H:%M\') if out_time_dt < in_time_dt: # Work period crosses midnight out_time_dt += timedelta(days=1) work_duration = out_time_dt - in_time_dt work_hours = work_duration.total_seconds() / 3600 if date in daily_hours: daily_hours[date] += work_hours else: daily_hours[date] = work_hours total_hours = sum(daily_hours.values()) return daily_hours, total_hours"},{"question":"A software company is developing a chatbot that can generate responses based on given templates. Each template consists of a fixed sequence of words, with placeholders that need to be filled with words from a predefined dictionary. To test the chatbot, a sequence of templates is given, along with a dictionary of words. For each template, the chatbot needs to generate all possible responses by filling in the placeholders with words from the dictionary. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N denoting the number of words in the dictionary. - The second line of each test case contains N space-separated words. - The third line of each test case contains one integer M denoting the number of templates. - Each of the following M lines contains a template string where placeholders are represented by the symbol `{}`. -----Output----- For each test case, output all possible responses for each template. For each response, the words must be in the same order as in the template. Output the responses for each template on a separate line. The templates should be processed in the order they are provided. -----Constraints----- - 1 le T le 10 - 1 le N le 20 - Each word in the dictionary contains only lowercase English letters and has a length between 1 and 10 - 1 le M le 5 - Each template contains at most 5 placeholders - The length of each template does not exceed 100 -----Example Input----- 1 3 cat dog fish 2 The {} chased the {} It caught a {} -----Example Output----- The cat chased the cat The cat chased the dog The cat chased the fish The dog chased the cat The dog chased the dog The dog chased the fish The fish chased the cat The fish chased the dog The fish chased the fish It caught a cat It caught a dog It caught a fish -----Explanation----- In the example case, there are two templates and three words in the dictionary. For the first template \\"The {} chased the {}\\", the chatbot generates all possible combinations by filling the placeholders with the words from the dictionary. Similarly, for the second template \\"It caught a {}\\", the chatbot generates one response for each word in the dictionary.","solution":"from itertools import product def generate_responses(test_cases): results = [] for test_case in test_cases: dictionary, templates = test_case words = dictionary.split() for template in templates: placeholders_count = template.count(\'{}\') for combination in product(words, repeat=placeholders_count): formatted_template = template for word in combination: formatted_template = formatted_template.replace(\'{}\', word, 1) results.append(formatted_template) return results def parse_input(input_str): lines = input_str.split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 dictionary = lines[index] index += 1 M = int(lines[index]) index += 1 templates = [] for _ in range(M): templates.append(lines[index]) index += 1 test_cases.append((dictionary, templates)) return test_cases"},{"question":"You are given two arrays of integers, A and B, both of size n. Your task is to determine if it is possible to rearrange the elements of array A in such a way that for every index i (0 ≤ i < n), the element at index i in the rearranged array A is greater than the element at the same index in array B. Input The first line contains an integer n (1 ≤ n ≤ 100), the size of the arrays. The second line contains n integers representing the elements of the array A. The third line contains n integers representing the elements of the array B. Output Print \\"YES\\" if it is possible to rearrange the elements of array A to satisfy the condition. Otherwise, print \\"NO\\". Examples Input 5 1 3 5 7 9 2 4 6 8 10 Output NO Input 3 4 5 2 1 1 1 Output YES Input 4 10 20 30 40 9 25 15 35 Output YES","solution":"def can_rearrange_to_be_greater(n, A, B): This function checks if array A can be rearranged such that each element of the rearranged A is greater than its corresponding element in B. # Sort both arrays A_sorted = sorted(A) B_sorted = sorted(B) # Compare each element of sorted A with sorted B for i in range(n): if A_sorted[i] <= B_sorted[i]: return \\"NO\\" return \\"YES\\""},{"question":"Regression have an array a of size n, where each element is in the range 1 to m (inclusive). You need to find out the maximum sum of the subsequence from the array such that no two elements in the chosen subsequence are adjacent. Given a and m, implement an algorithm to compute the maximum sum you can get. ----Input---- The first line contains two integers n and m (1 le n le 10^5, 1 le m le 1000). The next line contains n integers, representing the elements of the array a (1 le a[i] le m). ----Output---- Print a single integer, which is the maximum sum you can obtain. ----Examples---- Input 4 100 1 2 9 4 Output 10 Input 3 5 5 1 5 Output 10 Input 6 20 1 1 1 1 1 1 Output 3 ----Note---- In the first example, one possible subsequence is [1, 9], and its sum is 10. In the second example, one possible subsequence is [5, 5], and its sum is 10. In the third example, the one possible subsequence is [1, 1, 1], and its sum is 3.","solution":"def max_non_adjacent_sum(a): Returns the maximum sum of the subsequence from the array such that no two elements in the chosen subsequence are adjacent. n = len(a) if n == 0: return 0 if n == 1: return a[0] # Dynamic programming approach to store the max sum ends at each index dp = [0] * n dp[0] = a[0] dp[1] = max(a[0], a[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + a[i]) return dp[-1]"},{"question":"You are given a list of integers ai representing points scored by a player in consecutive rounds of a game. Your task is to find the maximum difference in scores between any two consecutive rounds. Input The only line of input contains a list of space-separated integers ai (0 ≤ ai ≤ 100), representing scores in consecutive rounds. The size of the list is between 2 and 10, inclusive. Note that the size of the list is not given explicitly! Output Output a single integer — the maximum difference in scores between any two consecutive rounds. Examples Input 5 20 15 10 25 Output 15 Input 0 0 Output 0","solution":"def max_diff_between_consecutive_rounds(scores): Returns the maximum difference in scores between any two consecutive rounds. :param scores: List of integers representing scores in consecutive rounds. :return: The maximum difference between any two consecutive rounds. max_diff = 0 for i in range(1, len(scores)): diff = abs(scores[i] - scores[i-1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"# Win the Race! Brief You are participating in a marathon race, and you want to predict your finishing time based on your pace. The marathon has checkpoints at every mile where you can see your progress. Write a function `predict_finishing_time` that will tell you your predicted finishing time given the time you reached each checkpoint. Specifications You\'ll be given: * A `list` of `floats` representing `times` at which you reached each checkpoint in the race, with each value indicating the number of hours taken to reach that checkpoint. * A positive `integer` with the total number of `miles` in the marathon. This will indicate the total distance you need to cover. You need to return the predicted finishing time as a `float`, representing the number of hours it will take to complete the marathon. The prediction should be based on your average pace up to the last checkpoint. Constraints * The given list of `floats` will always be sorted in non-decreasing order. * The marathon will always be longer than the last checkpoint given. Example ```python times = [1.0, 2.2, 3.4, 4.1] total_miles = 10 predict_finishing_time(times, 10) == 10.0 ``` In this example, the pace is calculated from checkpoints: - Mile 1: 1.0 hours - Mile 2: 2.2 hours (2.2 - 1.0 = 1.2 hours for this mile) - Mile 3: 3.4 hours (3.4 - 2.2 = 1.2 hours for this mile) - Mile 4: 4.1 hours (4.1 - 3.4 = 0.7 hours for this mile) The average pace per mile is (1.0 + 1.2 + 1.2 + 0.7) / 4 = 1.025 hours per mile. Therefore, the predicted finishing time for a 10 mile marathon is 10 miles * 1.025 hours per mile = 10.25 hours.","solution":"def predict_finishing_time(times, total_miles): Predicts the finishing time for a marathon based on the times at each checkpoint. :param times: List of floats representing the times at which each checkpoint was reached. :param total_miles: Total number of miles in the marathon. :return: Predicted finishing time in hours as a float. last_checkpoint_time = times[-1] number_of_checkpoints = len(times) average_pace = last_checkpoint_time / number_of_checkpoints predicted_finishing_time = average_pace * total_miles return predicted_finishing_time"},{"question":"John is planning a road trip and wants to make sure he sticks to his budget. He has already calculated the expected fuel costs between each city he plans to visit. To ensure that his total fuel cost does not exceed his budget, he asks for your help. Given N cities he will visit, the cost of fuel from city i to city i+1 is given. John starts from city 1 and travels sequentially to city N. If the sum of the fuel costs between all pairs of cities is less than or equal to his fuel budget, print \\"WITHIN BUDGET\\", otherwise print \\"OVER BUDGET\\". # INPUT - The first line contains an integer B indicating the budget. - The second line contains an integer N indicating the number of cities. - The next N-1 lines contain N-1 integers, each representing the fuel cost between subsequent cities. # OUTPUT - Print \\"WITHIN BUDGET\\" if the total fuel cost is within or equal to the budget B. - Otherwise, print \\"OVER BUDGET\\". # CONSTRAINTS - 0 < B < 1000000 - 2 ≤ N ≤ 100 - 0 < fuel cost between two cities < 10000 # SAMPLE INPUT 100 4 20 30 40 # SAMPLE OUTPUT WITHIN BUDGET # Explanation 1. The budget is 100. 2. There are 4 cities. 3. The costs between cities are [20, 30, 40]. 4. Total cost is 20 + 30 + 40 = 90, which is within the budget of 100, hence the output is \\"WITHIN BUDGET\\".","solution":"def is_within_budget(budget, num_cities, fuel_costs): Determines if the total fuel cost is within the budget. Args: - budget (int): The maximum amount of money available for fuel. - num_cities (int): The number of cities John will be visiting. - fuel_costs (list of int): A list of costs for the fuel between each pair of subsequent cities. Returns: - str: \\"WITHIN BUDGET\\" if the total cost is <= budget, otherwise \\"OVER BUDGET\\". total_cost = sum(fuel_costs) if total_cost <= budget: return \\"WITHIN BUDGET\\" else: return \\"OVER BUDGET\\""},{"question":"Write a function `longest_substring_of_unique_characters(s: str) -> int` that takes a string `s` and returns the length of the longest substring that consists of unique characters in `s`. **Constraints:** - The input string consists of ASCII characters and its length will not exceed 1000. Examples ```python longest_substring_of_unique_characters(\\"abcabcbb\\") # => 3, because the longest substring is \\"abc\\" longest_substring_of_unique_characters(\\"bbbbb\\") # => 1, because the longest substring is \\"b\\" longest_substring_of_unique_characters(\\"pwwkew\\") # => 3, because the longest substring is \\"wke\\" longest_substring_of_unique_characters(\\"\\") # => 0, because the input string is empty longest_substring_of_unique_characters(\\"abcdefghi\\") # => 9, because all characters are unique ``` You may assume that the input string only contains alphabetic characters and spaces.","solution":"def longest_substring_of_unique_characters(s: str) -> int: Finds the length of the longest substring with all unique characters in the given string. n = len(s) longest = 0 char_index_map = {} start = 0 for end in range(n): if s[end] in char_index_map: # Move the start to the right of the last occurrence of s[end] start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"Given an undirected graph with **N** nodes and **M** edges, we\'re interested in the ability to communicate across a network. Each node can either be a **sender**, a **receiver**, or neither. A message is sent from a sender to a receiver if there exists any path (direct or via intermediate nodes) connecting them. Write a function `canCommunicate` that takes the following inputs: 1. **N** - the number of nodes in the graph (1 ≤ N ≤ 1000) 2. **M** - the number of edges in the graph (0 ≤ M ≤ 10000) 3. An array of edges, where each edge is represented as a pair (u, v) indicating an undirected edge between nodes u and v (1 ≤ u, v ≤ N) 4. **senders** - a list of nodes (index starts from 1), which are labeled as senders (0 ≤ length ≤ N) 5. **receivers** - a list of nodes (index starts from 1), which are labeled as receivers (0 ≤ length ≤ N). The function should return **True** if every sender can communicate with at least one receiver, and **False** otherwise. # Input Format: ```python N # an integer M # an integer edges # a list of M pairs (u, v) senders # a list of integers receivers # a list of integers ``` # Output Format: The function should return a boolean value: - **True**: if all senders can communicate with at least one receiver - **False**: otherwise # Sample Input: ```python N = 5 M = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 5)] senders = [1, 3] receivers = [5] ``` # Sample Output: ```python True ``` # Explanation: There are paths 1-2-3-4-5 and 3-4-5 connecting all senders to the receiver. # Constraints: - Nodes are numbered from 1 to N. - Each edge is undirected. - The graph may be disconnected.","solution":"def canCommunicate(N, M, edges, senders, receivers): from collections import defaultdict, deque # Build the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS to find all reachable nodes from start node def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited # Consolidate reachable nodes from all receivers reachable_from_receivers = set() for receiver in receivers: reachable_from_receivers |= bfs(receiver) # Check if each sender can reach at least one receiver for sender in senders: if sender not in reachable_from_receivers: return False return True"},{"question":"You are given a 2D grid of dimensions m x n where each cell in the grid can either be 0 (empty) or 1 (obstacle). You are also given a list of points representing starting positions for a robot. The robot can move up, down, left, or right, but cannot move into or through a cell containing an obstacle. The goal of the robot is to reach a destination point on the grid. You need to determine the number of distinct paths the robot can take from any of the starting points to the destination point. However, because the number of possible paths can be very large, return the answer modulo 10^9 + 7. Input The first line contains three integers m, n, and k (1 ≤ m, n ≤ 100, 1 ≤ k ≤ 10^4) — the number of rows, the number of columns, and the number of starting points, respectively. The next m lines contain n integers each, representing the grid. Each integer is either 0 or 1. The next k lines each contain two integers, representing the coordinates (row and column) of a starting point. The coordinates are 1-based indices. The last line contains two integers, representing the coordinates of the destination point. Output Print a single integer — the number of distinct paths from any starting point to the destination point, modulo 10^9 + 7. Examples Input 4 4 2 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 3 3 4 4 Output 2 Input 3 3 1 0 0 0 0 1 0 0 0 0 1 1 3 3 Output 1","solution":"from collections import deque MOD = 10**9 + 7 def num_paths(grid, m, n, start_points, dest): def bfs(start): nonlocal dest rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set([start]) while queue: r, c = queue.popleft() if (r, c) == dest: return 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: queue.append((nr, nc)) visited.add((nr, nc)) return 0 total_paths = 0 for start in start_points: total_paths = (total_paths + bfs(start)) % MOD return total_paths def solve(m, n, k, grid, start_points, dest): start_points = [(sp[0]-1, sp[1]-1) for sp in start_points] dest = (dest[0]-1, dest[1]-1) return num_paths(grid, m, n, start_points, dest)"},{"question":"A robot is traveling on an infinite 2D grid, starting from the origin point (0, 0). It is given a set of commands in the form of a string where each character represents a movement direction. The possible directions are: - \'U\' for moving up (increasing the y-coordinate by 1), - \'D\' for moving down (decreasing the y-coordinate by 1), - \'L\' for moving left (decreasing the x-coordinate by 1), - \'R\' for moving right (increasing the x-coordinate by 1). You are required to determine if the robot returns to the origin (0, 0) after executing all the given commands. -----Input----- The first and only line of input contains a string S which represents the movement commands. The length of the string will be between 1 and 10^4. -----Output----- The first and only line of output should contain \\"True\\" if the robot returns to the origin after executing all the commands, otherwise \\"False\\". -----Examples----- Sample Input 1: UD Sample Output 1: True Sample Input 2: LL Sample Output 2: False","solution":"def is_back_to_origin(commands): Determines if the robot returns to the origin (0, 0) after executing the given commands. Parameters: commands (str): The string of commands (\'U\', \'D\', \'L\', \'R\'). Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"C: Train Route Optimization # Scenario Sakuma is a frequent traveler and she loves exploring the city using the train network. The city is represented by a set of train stations connected by train routes, and each route has a particular time duration associated with it. Sakuma often finds herself trying to optimize her travel plans to minimize the total travel time between one station to another. Given the complexity of the train network, she has asked for your help to create a program that will find the shortest travel time between her starting station and her destination station using the available train routes. # Problem There are ( N ) train stations in the city, identified by unique numbers from 1 to N. There are ( M ) train routes connecting these stations. The i-th train route is defined by three integers ( u_i ), ( v_i ), and ( t_i ), indicating a route from station ( u_i ) to station ( v_i ) taking ( t_i ) time units. Given the starting station ( S ) and the destination station ( D ), determine the minimum time required to travel from ( S ) to ( D ). If there is no possible way to travel from S to D, return -1. # Input Format The input is provided in the following format: ``` N M u_1 v_1 t_1 u_2 v_2 t_2 ... u_M v_M t_M S D ``` Where: - The first line contains the integer ( N ) (2 ≤ N ≤ 100,000) and ( M ) (1 ≤ M ≤ 200,000), the number of train stations and train routes, respectively. - The next ( M ) lines each contain three integers ( u_i ), ( v_i ), and ( t_i ) (1 ≤ u_i, v_i ≤ N, 1 ≤ t_i ≤ 10,000), representing a train route from station ( u_i ) to station ( v_i ) taking ( t_i ) time units. - The last line contains two integers ( S ) and ( D ) (1 ≤ S, D ≤ N), representing the starting station and the destination station. # Output Format Output a single integer representing the minimum time required to travel from station ( S ) to station ( D ). If no path exists, output -1. # Example Input ``` 5 6 1 2 4 1 3 2 2 4 5 3 4 1 4 5 3 3 5 7 1 5 ``` Output ``` 6 ``` # Explanation In the example above, the shortest path from station 1 to station 5 can be achieved by: 1. Taking the route from station 1 to station 3 with a time of 2. 2. Taking the route from station 3 to station 4 with a time of 1. 3. Taking the route from station 4 to station 5 with a time of 3. Thus, the total travel time is ( 2 + 1 + 3 = 6 ).","solution":"import heapq from collections import defaultdict def find_shortest_travel_time(N, M, routes, S, D): Finds the shortest travel time from station S to station D using provided train routes. Arguments: N -- number of stations. M -- number of routes. routes -- list of tuples where each tuple contains (u, v, t) representing a route from station u to station v taking t time units. S -- starting station. D -- destination station. Returns: The minimum travel time from station S to station D, or -1 if no path exists. graph = defaultdict(list) for u, v, t in routes: graph[u].append((v, t)) graph[v].append((u, t)) # Priority queue to store (time, station) pq = [(0, S)] visited = [False] * (N + 1) min_time = [float(\'inf\')] * (N + 1) min_time[S] = 0 while pq: current_time, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True for neighbor, travel_time in graph[node]: new_time = current_time + travel_time if not visited[neighbor] and new_time < min_time[neighbor]: min_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return min_time[D] if min_time[D] != float(\'inf\') else -1"},{"question":"You are given a string containing only lowercase letters. Your task is to determine whether the string is a \\"beautiful string.\\" We define a \\"beautiful string\\" as a string where each letter appears the same number of times. Examples * \\"aabbcc\\" is a beautiful string since \'a\', \'b\', and \'c\' all appear 2 times. * \\"abcabc\\" is a beautiful string since \'a\', \'b\', and \'c\' all appear 2 times. * \\"aabbccc\\" is not a beautiful string since \'a\' and \'b\' appear 2 times, but \'c\' appears 3 times. Task Write a function `is_beautiful_string` that takes a string and returns `True` if the string is a beautiful string, otherwise `False`.","solution":"def is_beautiful_string(s): Determines if the input string is a beautiful string. A beautiful string is one where each letter appears the same number of times. Parameters: s (str): Input string containing only lowercase letters. Returns: bool: True if the string is beautiful, False otherwise. if not s: return True from collections import Counter letter_counts = Counter(s) frequencies = list(letter_counts.values()) # Check if all frequencies are the same return len(set(frequencies)) == 1"},{"question":"Write a function that takes an array of non-negative integers and returns the smallest number that is not present in the array. The returned number should also be greater than or equal to zero. If all numbers from 0 to `n` (where `n` is the length of the array) are present in the array, then return `n + 1`. Examples ``` [] => 0 [0, 1, 2, 3] => 4 [1, 2, 0, 3, 5] => 4 [3, 4, 5, 6] => 0 [0, 1, 2, 4] => 3 ```","solution":"def smallest_missing_number(arr): Returns the smallest number that is not present in the array. The returned number should also be greater than or equal to zero. n = len(arr) presence = [False] * (n + 1) for num in arr: if 0 <= num <= n: presence[num] = True for i in range(n + 1): if not presence[i]: return i return n + 1"},{"question":"Given an array of N integers, find the length of the shortest subarray that has a sum of at least S. If no such subarray exists, print -1 instead. -----Constraints----- - 1 leq N leq 10^5 - 1 leq S leq 10^9 - 1 leq array elements leq 10^6 -----Input----- Input is given from Standard Input in the following format: ``` N S array ``` Where the first line contains two integers, N and S, and the second line contains N space-separated integers representing the array. -----Output----- Print an integer representing the length of the shortest subarray with a sum of at least S. If no such subarray exists, print -1. -----Sample Input----- 8 15 1 2 3 4 5 6 7 8 -----Sample Output----- 2 Explanation: The shortest subarray with sum at least 15 is [7, 8] with length 2.","solution":"def shortest_subarray_with_sum_at_least_s(N, S, array): left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(N): current_sum += array[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= array[left] left += 1 return min_length if min_length != float(\'inf\') else -1 # Example execution N, S = 8, 15 array = [1, 2, 3, 4, 5, 6, 7, 8] print(shortest_subarray_with_sum_at_least_s(N, S, array)) # Output: 2"},{"question":"Write a program that takes a string `s` and returns the longest substring which is a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spacing, punctuation, and capitalization. For example, given the string `\'bananas\'`, the output should be `\'anana\'` because `anana` is the longest substring that is a palindrome. Another example, for the input `\'racecar\'`, the function should return `\'racecar\'`. The function signature should be `def longest_palindrome_substring(s: str) -> str` and the function should return a string which is the longest palindromic substring of `s`. Good luck! If you liked this question, please try: [Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring/) [Palindrome Partitioning](https://leetcode.com/problems/palindrome-partitioning/)","solution":"def longest_palindrome_substring(s: str) -> str: Returns the longest palindromic substring in s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left].lower() == s[right].lower(): left -= 1 right += 1 return left + 1, right - 1 start, end = 0, 0 for i in range(len(s)): left1, right1 = expand_around_center(s, i, i) # Odd length palindromes left2, right2 = expand_around_center(s, i, i + 1) # Even length palindromes if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end+1]"},{"question":"A company wants to optimize the time it takes for its delivery trucks to complete their routes. Each truck has a specific capacity and each delivery point has a certain demand. The company receives an input detailing the number of delivery points, their respective demands, and the capacity of the truck. The aim is to determine the minimum number of trips required for the truck to fulfill all the delivery demands, given that the truck must start from the warehouse, deliver some goods, return to the warehouse, and load again if necessary. The truck can make multiple trips if needed. The truck must fully satisfy one or more delivery points\' demands in each trip. Write a program that calculates the minimal number of trips required. -----Input----- The first line of input data contains an integer t (1 leq t leq 100) — the number of test cases. Each test case is described in a block of lines. The first line of each test case contains two integers n and C (1 leq n leq 1000; 1 leq C leq 10^9) — the number of delivery points and the capacity of the truck, respectively. The second line contains n integers d_1, d_2, ..., d_n (1 leq d_i leq 10^9) — the demand at each delivery point. -----Output----- For each test case, output a single integer — the minimum number of trips required for the truck to satisfy all the delivery points\' demands. -----Examples----- Input 3 5 10 8 9 4 6 7 4 20 15 7 2 10 6 15 5 9 12 8 7 3 Output 4 2 3 -----Note----- None","solution":"def min_trips(t, test_cases): results = [] for i in range(t): n, C = test_cases[i][0] demands = test_cases[i][1] # Sort the demands in non-increasing order for optimal packing demands.sort(reverse=True) trips = 0 while demands: capacity = C trips += 1 to_remove = [] for demand in demands: if demand <= capacity: capacity -= demand to_remove.append(demand) for demand in to_remove: demands.remove(demand) results.append(trips) return results"},{"question":"A gym offers a membership discount policy for its equipment rentals. The policy is as follows: - Members are given a maximum allowable discount of D dollars. - If the rental cost of the equipment is less than or equal to D dollars, the rental cost is completely waived for members. A member wants to rent equipment for C dollars. Determine the actual amount the member needs to pay after applying the discount. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains two space-separated integers D and C. ------ Output Format ------ For each test case, output the amount (in dollars) the member needs to pay. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ D, C ≤ 100 ----- Sample Input 1 ------ 3 10 7 15 20 7 7 ----- Sample Output 1 ------ 0 5 0 ----- Explanation 1 ------ Test case 1: The equipment rental cost is 7, which is less than the discount limit of 10, so the entire cost is waived, and the member pays 0 dollars. Test case 2: The equipment rental cost is 20, which exceeds the discount limit of 15, so the member gets a 15 discount and pays 20 - 15 = 5 dollars. Test case 3: The equipment rental cost is 7, which exactly matches the discount limit of 7, so the entire cost is waived, and the member pays 0 dollars.","solution":"def calculate_payment(T, cases): This function calculates the amount a member needs to pay after applying discounts for each test case. Parameters: T (int): The number of test cases cases (list of tuples): A list containing tuples where each tuple has two integers D and C Returns: list: A list of integers representing the amount to pay for each test case result = [] for D, C in cases: if C <= D: result.append(0) else: result.append(C - D) return result"},{"question":"Alan wants to cut a rod of length n meters into shorter segments to maximize the total profit. He has a list of integer lengths and corresponding prices for those lengths. The rod can be cut into pieces of any positive integer length. Given: - A rod of length `n` meters. - An integer `k` representing the number of possible lengths. - A list of `k` integers where the i-th integer represents the length of a segment. - A list of `k` integers where the i-th integer represents the price of the corresponding length segment. Determine the maximum profit that can be obtained by cutting the rod and selling the segments. -----Input----- The first line contains a positive integer `n` (1 ≤ n ≤ 1000) — the length of the rod. The second line contains a positive integer `k` (1 ≤ k ≤ 100) — the number of different segment lengths and their corresponding prices. The third line contains `k` positive integers, each representing a length of a segment (1 ≤ length ≤ n). The fourth line contains `k` positive integers, each representing the price of the corresponding length segment (1 ≤ price ≤ 10000). -----Output----- Print the maximum profit that can be obtained by cutting the rod and selling the segments. -----Examples----- Input 8 3 1 3 4 5 9 12 Output 40 Input 5 2 2 3 10 15 Output 25 Input 10 4 2 3 5 6 5 9 12 14 Output 28 -----Note----- In the first example, Alan can cut the rod into eight 1-meter segments, each selling for 5 units of profit, making a total of 40. In the second example, Alan can cut the rod into one 3-meter segment and one 2-meter segment, earning 15 + 10 = 25 units of profit. In the third example, Alan can cut the rod into two 3-meter segments and one 4-meter segment, earning 9 + 9 + 10 = 28 units of profit.","solution":"def max_profit(n, k, lengths, prices): Determines the maximum profit obtainable from cutting a rod of length n meters. Parameters: n (int): The length of the rod. k (int): The number of different segment lengths. lengths (list): A list of integers representing segment lengths. prices (list): A list of integers representing the prices of the corresponding lengths. Returns: int: The maximum profit obtainable. # Initialize the dp array to store the maximum profit for each length. dp = [0] * (n + 1) # Iterate through each length of the rod up to n. for i in range(1, n + 1): # Check every segment length to see if it can be used. for j in range(k): if lengths[j] <= i: dp[i] = max(dp[i], dp[i - lengths[j]] + prices[j]) # Return the maximum profit for the rod of length n. return dp[n]"},{"question":"You are given a set of cranes that can be used to move boxes. Each crane has a lifting capacity, and each box has a weight. You need to move all the boxes using the cranes in the minimum possible number of rounds. In each round, each crane can move at most one box, provided the box\'s weight does not exceed the crane\'s lifting capacity. Your task is to determine the minimum number of rounds needed to move all the boxes. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of cranes and the number of boxes. The second line of the input contains n integers c_1, c_2, ..., c_n (1 le c_i le 10^9) — the lifting capacities of the cranes. The third line of the input contains m integers w_1, w_2, ..., w_m (1 le w_i le 10^9) — the weights of the boxes. -----Output----- Print one integer — the minimum number of rounds needed to move all the boxes. If it is impossible to move all the boxes, print -1. -----Example----- Input 3 5 8 1 7 5 6 3 7 2 Output 3 Input 2 4 6 8 7 10 5 4 Output -1","solution":"def min_rounds(n, m, cranes, boxes): Returns the minimum number of rounds needed to move all boxes using the cranes. If it is impossible to move all the boxes, returns -1. cranes.sort(reverse=True) boxes.sort(reverse=True) if boxes[0] > cranes[0]: return -1 rounds = 0 while boxes: for crane in cranes: for i in range(len(boxes)): if boxes[i] <= crane: boxes.pop(i) break rounds += 1 return rounds"},{"question":"# Longest Increasing Subsequence Given a sequence of integers, find the length of the longest increasing subsequence (LIS) in the sequence. A subsequence is obtained from the original sequence by deleting some elements (possibly none) and keeping the remaining elements in their original order. Input: First line contains T, the number of test cases. Each test case begins with a line containing an integer N, the length of the sequence. The next line contains N space-separated integers representing the sequence. Output: For each test case, print the length of the longest increasing subsequence. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 5000 -10^9 ≤ A[i] ≤ 10^9 SAMPLE INPUT 1 7 10 9 2 5 3 7 101 18 SAMPLE OUTPUT 4 Explanation: For the given input, the longest increasing subsequence is [2, 3, 7, 101], so the output is 4.","solution":"def length_of_lis(sequence): Returns the length of the longest increasing subsequence. if not sequence: return 0 dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): Process multiple test cases and return results for each. results = [] for test_case in test_cases: n, sequence = test_case results.append(length_of_lis(sequence)) return results"},{"question":"You are given a string representing a simple mathematical expression. The expression will contain only non-negative integers, plus signs (+), minus signs (-), and multiplication signs (*). There will be no division signs, parentheses, or other operators. All numbers and operators are separated by single spaces. Your task is to write a program that evaluates the given expression following the standard order of operations: multiplication first, followed by addition and subtraction (from left to right for both). Input The input consists of a single line s which contains a valid mathematical expression. The line may be any length but will always be less than 1000 characters. Output Output a single integer representing the result of evaluating the expression. Examples Input 3 + 5 * 2 - 8 Output 5 Input 7 - 3 + 2 * 5 Output 14 Note In the first case, the expression should be evaluated as follows: 3 + (5 * 2) - 8 = 3 + 10 - 8 = 5. In the second case, the expression should be evaluated as follows: 7 - 3 + (2 * 5) = 4 + 10 = 14.","solution":"def evaluate_expression(expression): Evaluates a simple mathematical expression following the standard order of operations, which is multiplication first, followed by addition and subtraction from left to right. tokens = expression.split() # Step 1: Process multiplication index = 0 while index < len(tokens): if tokens[index] == \'*\': operand1 = int(tokens[index - 1]) operand2 = int(tokens[index + 1]) result = operand1 * operand2 tokens = tokens[:index - 1] + [str(result)] + tokens[index + 2:] else: index += 1 # Step 2: Process addition and subtraction result = int(tokens[0]) index = 1 while index < len(tokens): operator = tokens[index] operand = int(tokens[index + 1]) if operator == \'+\': result += operand elif operator == \'-\': result -= operand index += 2 return result"},{"question":"You are tasked to write a function that determines the optimal meeting location in a rectangular grid city. The city grid has streets aligned parallel to the x-axis and the y-axis, forming a perfect grid of M rows and N columns. Each intersection in the grid is denoted by a pair of integers (row, column), where (0, 0) is the top-left intersection. You are given the list of friends\' positions on the grid and you need to determine the meeting point that minimizes the total travel distance for all friends. Assume each friend can only move horizontally or vertically. The total travel distance is calculated as the sum of the absolute differences of the respective coordinates. Input The first line of the input gives the number of test cases, T. Each test case consists of multiple lines. - The first line of each test case contains two integers, M and N, representing the number of rows and columns of the grid. - The second line contains a single integer, F, the number of friends. - The next F lines each contain two integers Ri and Ci, the row and column positions of the ith friend. Output For each test case, output one line containing \\"Case #x: \\", where x is the case number (starting from 1), followed by two integers Rm and Cm, the row and column of the optimal meeting point. Constraints 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 1 ≤ F ≤ 10000 0 ≤ Ri < M 0 ≤ Ci < N SAMPLE INPUT 1 5 5 3 1 2 2 3 4 1 SAMPLE OUTPUT Case #1: 2 2","solution":"def optimal_meeting_point(T, test_cases): results = [] for t in range(T): M, N, F, friends_positions = test_cases[t] rows = sorted([pos[0] for pos in friends_positions]) cols = sorted([pos[1] for pos in friends_positions]) if F % 2 == 1: median_row = rows[F // 2] median_col = cols[F // 2] else: median_row = (rows[F // 2 - 1] + rows[F // 2]) // 2 median_col = (cols[F // 2 - 1] + cols[F // 2]) // 2 results.append(f\\"Case #{t + 1}: {median_row} {median_col}\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): M, N = map(int, lines[idx].split()) F = int(lines[idx + 1]) friends_positions = [tuple(map(int, lines[idx + 2 + i].split())) for i in range(F)] test_cases.append([M, N, F, friends_positions]) idx += 2 + F return T, test_cases"},{"question":"Your task is to implement a function that simulates the operations of a circular queue. A circular queue is a linear data structure that follows the FIFO (First In, First Out) principle but wraps around when it reaches the end of the queue. The circular queue should support the following operations: 1. `enqueue(x)`: Adds the integer `x` to the rear of the queue. 2. `dequeue()`: Removes the front element from the queue and returns it. If the queue is empty, return -1. 3. `front()`: Returns the front element of the queue without removing it. If the queue is empty, return -1. 4. `isEmpty()`: Returns `True` if the queue is empty, `False` otherwise. 5. `isFull()`: Returns `True` if the queue is full, `False` otherwise. You need to define the class `CircularQueue` with a predefined size `k`. The constructor should initialize the queue with the size `k`. -----Input----- The input will consist of a series of commands, where the first line contains an integer `k` (1 ≤ k ≤ 1000), the size of the queue. Each subsequent line will contain a command: either `enqueue x`, `dequeue`, `front`, `isEmpty`, or `isFull`. -----Output----- The output should contain the result of each command in the sequence as specified: - For `enqueue x`, no output is required. - For `dequeue`, output the integer returned. - For `front`, output the integer returned. - For `isEmpty`, output `True` or `False`. - For `isFull`, output `True` or `False`. -----Example----- Input 5 enqueue 10 enqueue 20 dequeue front isEmpty isFull enqueue 30 enqueue 40 enqueue 50 enqueue 60 dequeue front isFull Output 10 20 False False 30 40 True Note: Each operation is given on a new line, and the results of all operations are printed sequentially without any additional characters or spacing.","solution":"class CircularQueue: def __init__(self, k: int): self.queue = [None] * k self.max_size = k self.front_index = 0 self.rear_index = -1 self.current_size = 0 def enqueue(self, x: int) -> None: if not self.isFull(): self.rear_index = (self.rear_index + 1) % self.max_size self.queue[self.rear_index] = x self.current_size += 1 def dequeue(self) -> int: if self.isEmpty(): return -1 else: value = self.queue[self.front_index] self.queue[self.front_index] = None self.front_index = (self.front_index + 1) % self.max_size self.current_size -= 1 return value def front(self) -> int: if self.isEmpty(): return -1 return self.queue[self.front_index] def isEmpty(self) -> bool: return self.current_size == 0 def isFull(self) -> bool: return self.current_size == self.max_size"},{"question":"# Task Given an array of integers `A` of length `N`, find the number of pairs `(i, j)` such that `0 <= i < j < N` and `A[i] + A[j]` is an even number. # Example For `A = [1, 2, 3, 4]`, the result should be `2`. There are two valid pairs: `(1, 3)` and `(2, 4)`. For `A = [2, 4, 6]`, the result should be `3`. All possible pairs `(2, 4), (2, 6), and (4, 6)` sum to an even number. # Input/Output - `[input]` integer array `A` An array of integers. `2 <= A.length <= 100` `-100 <= A[i] <= 100` - `[output]` an integer Number of pairs `(i, j)` such that `A[i] + A[j]` is an even number.","solution":"def count_even_sum_pairs(A): count_even = 0 count_odd = 0 for num in A: if num % 2 == 0: count_even += 1 else: count_odd += 1 return count_even * (count_even - 1) // 2 + count_odd * (count_odd - 1) // 2"},{"question":"You are helping a small restaurant with their delivery service. The restaurant wants to group orders into delivery batches that can be handled by their couriers. Each courier can take a batch of orders as long as the total weight of the batch does not exceed the maximum weight limit the courier can carry. There are `n` orders to be delivered, and each order `i` has a weight `W_i`. The restaurant has `c` couriers, and each courier can carry a weight up to `M`. You should determine the minimum number of deliveries required to deliver all the orders, knowing that each courier can carry up to `M` units of weight in one delivery. Your task is to write a program that determines the minimum number of delivery batches required. ------ Input ------ The first line of input contains an integer `T`, the number of test cases. Each test case starts with a line containing two integers `n` and `M`. The second line of each test case contains `n` integers representing the weights of the orders `W_1, W_2, ..., W_n`. ------ Output ------ For each test case, output a single integer representing the minimum number of deliveries required. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ n ≤ 100 1 ≤ W_i ≤ 100 1 ≤ M ≤ 100 ----- Sample Input 1 ------ 2 3 10 4 8 3 4 15 9 2 8 7 ----- Sample Output 1 ------ 2 2 ------ Explanation 1 ------ In the first example case, one optimal way is to deliver the first and third orders in the first delivery (4 + 3 = 7 ≤ 10) and the second order in the second delivery (8 ≤ 10). In the second example case, one optimal way is to combine the first and fourth orders in the first delivery (9 + 7 = 16 ≤ 15), and the second and third orders in the second delivery (2 + 8 = 10 ≤ 15).","solution":"def minimum_deliveries(T, test_cases): results = [] for i in range(T): n, M = test_cases[i][0] weights = test_cases[i][1] # Sort the weights in non-increasing order weights.sort(reverse=True) deliveries = 0 while weights: deliveries += 1 current_load = 0 # Use a new list for weights that cannot be added in the current load remaining_weights = [] for weight in weights: if current_load + weight <= M: current_load += weight else: remaining_weights.append(weight) weights = remaining_weights results.append(deliveries) return results"},{"question":"You are given a line of text that represents a sequence of commands for a robot. The robot starts at the origin (0, 0) on an infinite 2D grid and moves according to the commands. Each command is one of four possible characters: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Your task is to determine whether the robot returns to the origin after executing all the given commands. Input The input consists of a single line containing a string s of length n (1 ≤ n ≤ 100,000) representing the sequence of commands. Output Print \\"YES\\" if the robot returns to the origin after executing all the commands. Otherwise, print \\"NO\\". Examples Input UD Output YES Input LL Output NO Input UDLR Output YES Input UUDDRRLL Output YES Note In the first example, the robot moves up and then down, which brings it back to the origin. In the second example, the robot moves left twice and does not return to the origin. In the third example, the robot moves up, down, left, and right, returning to the origin. In the fourth example, the robot moves up twice, down twice, right twice, and left twice, finally returning to the origin.","solution":"def does_robot_return_to_origin(commands): Determines if the robot returns to the origin after executing all commands. Parameters: commands (str): A string containing the sequence of commands. Returns: str: \\"YES\\" if the robot returns to the origin, \\"NO\\" otherwise. x, y = 0, 0 # Robot starts at the origin (0, 0) for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"A factory produces distinct car models, each identified by a unique serial number. Your task is to determine the missing serial number from a given sequence. You are provided with a sorted sequence of consecutive unique serial numbers ranging from a to b (inclusive) with exactly one missing. The list is partially sorted in ascending order, but an unknown segment of it has been shuffled randomly. For instance, the sequence could be: `[1000, 1001, 1002, 1004, 1003, 1005, 1006]`. Your goal is to identify the missing serial number using the least number of comparisons in an efficient manner. Input: - The first line contains two integers, a and b (1 ≤ a < b ≤ 1000000), denoting the range of the serial numbers. - The second line contains b - a serial numbers in a shuffled manner and sorted except for one segment, which is shuffled randomly as described above. Output: - Print the missing serial number. Examples: Input: 1000 1006 1000 1001 1002 1004 1003 1005 Output: 1006 Input: 200 205 201 202 203 204 205 Output: 200 Note: In the first sample, the sequence starts from 1000 and ends at 1006 but the number 1006 is missing. You need to detect this omitted number from the shuffled and partially sorted sequence `[1000, 1001, 1002, 1004, 1003, 1005]`. The expected result is `1006`. In the second sample, the sequence starts from 200 and ends at 205 with the omission of the number 200. The result displays the missing number `200`. To solve the problem, consider leveraging the properties of the arithmetic series sum excluding an element and binary search techniques to efficiently find the missing serial number.","solution":"def find_missing_serial_number(a, b, sequence): This function finds the missing serial number in a sequence of serial numbers ranging from a to b. # Calculate the expected sum of all serial numbers from a to b total_sum = sum(range(a, b + 1)) # Calculate the sum of the given sequence sequence_sum = sum(sequence) # The missing number will be the difference between the expected sum and the sequence sum missing_number = total_sum - sequence_sum return missing_number"},{"question":"A \\"Regular Expression\\" or \\"regex\\" is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. Given a text string and a pattern, implement a function to check if the pattern matches the entire text string exactly. The pattern may contain the special character \'.\' which matches any single character or \'*\' which matches zero or more of the preceding element. Implement the function `isMatch()` that takes the text string `s` and a pattern string `p` as input and returns a boolean indicating whether the pattern matches the entire text string or not. Example 1: Input: s = \\"aa\\" p = \\"a\\" Output: false Explanation: \\"a\\" does not match the entire string \\"aa\\". Example 2: Input: s = \\"aa\\" p = \\"a*\\" Output: true Explanation: \'*\' means zero or more of the preceding element, \'a\'. Therefore, by repeating \'a\' once, it becomes \\"aa\\". Example 3: Input: s = \\"ab\\" p = \\".*\\" Output: true Explanation: \\".*\\" means \\"zero or more (*) of any character (.)\\". Example 4: Input: s = \\"aab\\" p = \\"c*a*b\\" Output: true Explanation: c can be repeated 0 times, \\"a\\" can be repeated twice. Therefore, it matches \\"aab\\". Example 5: Input: s = \\"mississippi\\" p = \\"mis*is*p*.\\" Output: false Explanation: Pattern does not match the entire string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isMatch()` which takes two strings `s` and `p` as input and returns a boolean value. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 <= s.length <= 20 1 <= p.length <= 30 s contains only lowercase English letters. p contains only lowercase English letters, \'.\', and \'*\'.","solution":"def isMatch(s, p): This function checks if the pattern p matches the entire text string s. # Initialize a DP table with False values. # dp[i][j] will be True if s[:i] matches p[:j] dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # Base case: empty string matches with empty pattern dp[0][0] = True # Deals with patterns like a*, a*b*, a*b*c* etc for j in range(1, len(p) + 1): if p[j-1] == \'*\': dp[0][j] = dp[0][j-2] # Fill the DP table for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j-1] == \'.\' or p[j-1] == s[i-1]: dp[i][j] = dp[i-1][j-1] elif p[j-1] == \'*\': dp[i][j] = dp[i][j-2] or (dp[i-1][j] if p[j-2] == \'.\' or p[j-2] == s[i-1] else False) else: dp[i][j] = False return dp[len(s)][len(p)]"},{"question":"Given an integer array `arr` and an integer `k`, write a program to find whether any two distinct elements in the array sum up to `k`. Example 1: Input: arr = [2, 7, 11, 15], k = 9 Output: YES Explanation: 2 + 7 = 9; the function should return \\"YES\\". Example 2: Input: arr = [1, 2, 3, 4], k = 8 Output: NO Explanation: No two distinct elements sum up to 8; the function should return \\"NO\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `sumExists` which takes an integer array `arr` and an integer `k` and returns \'YES\' or \'NO\'. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Note: - The integers in the array can be positive, negative, or zero. - Each input array will have at least two elements. Constraints: - 2 <= len(arr) <= 10^4 - -10^5 <= arr[i] <= 10^5 - -2 * 10^5 <= k <= 2 * 10^5","solution":"def sumExists(arr, k): Determines whether any two distinct elements in the array sum up to `k`. Parameters: arr (list of int): The array of integers. k (int): The target sum. Returns: str: \'YES\' if there exists any two distinct elements in the array that sum up to `k`, otherwise \'NO\'. seen = set() for number in arr: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Write a function that determines the smallest integer m such that m^2 + 3m + 2 is greater than or equal to a given integer x. Function Description Complete the smallestM function in the editor below. smallestM has the following parameters: int x: the threshold value Returns int: the minimum integer m satisfying the equation Input Format A single integer x. Constraints 1 leq x leq 10^9 Sample Input 0 10 Sample Output 0 2 Explanation 0 For m = 2, m^2 + 3m + 2 = 12, which is greater than 10. For m = 1, m^2 + 3m + 2 = 6, which is less than 10. Sample Input 1 20 Sample Output 1 3 Explanation 1 For m = 3, m^2 + 3m + 2 = 20, which is equal to 20. For m = 2, m^2 + 3m + 2 = 12, which is less than 20.","solution":"def smallestM(x): Determines the smallest integer m such that m^2 + 3m + 2 is greater than or equal to a given integer x. Parameters: x (int): the threshold value Returns: int: the minimum integer m satisfying the equation m = 0 while m**2 + 3*m + 2 < x: m += 1 return m"},{"question":"You are given an array of n integers. Your task is to perform exactly m operations on the array. In each operation, you can choose any two integers a and b from the array (a != b) and replace one of them with their difference |a - b|. Your goal is to make the array contain as many distinct integers as possible after exactly m operations. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of integers in the array and the number of operations to be performed. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the initial elements of the array. Output Print a single integer — the maximum number of distinct integers in the array after exactly m operations. Example Input 5 3 1 2 3 4 5 Output 5 Input 3 2 2 4 6 Output 3 Input 4 5 1 1 1 1 Output 1 Explanation for Examples: In the first example, performing m=3 operations won\'t change the array as it already has the maximum distinct integers it can hold. In the second example, the possible operations do not introduce any new distinct integers beyond the distinct integers that are already present. In the third example, no matter how many operations you perform, you cannot introduce a distinct integer if all initial integers are the same.","solution":"def max_distinct_integers(n, m, array): This function calculates the maximum number of distinct integers in the array after exactly m operations. distinct_elements = set(array) # If total operations is zero, just return the count of the distinct elements if m == 0: return len(distinct_elements) # We identify the minimum number of distinct elements we have at the start initial_distinct_elements = len(distinct_elements) if initial_distinct_elements == 1: return 1 # If we start with all elements same, we can not get more than one distinct element max_possible_distinct = min(initial_distinct_elements + m, n) return max_possible_distinct"},{"question":"Johnny has a string consisting of lowercase English letters. He wants to create a new string by removing all occurrences of a specific character from the original string. Help Johnny by writing a program that performs this task. -----Constraints----- - The input string will have at most 100 characters. - Only lowercase English letters will be used. - The character to be removed will always be present in the string. -----Input----- Input is given from Standard Input in the following format: ``` s c ``` where `s` is the original string and `c` is the character to be removed. -----Output----- Print the new string after removing all occurrences of the character `c`. -----Sample Input----- hello l -----Sample Output----- heo - The character \'l\' is removed from the string \\"hello\\".","solution":"def remove_character(s, c): Removes all occurrences of character \'c\' from string \'s\'. Parameters: s (str): The original string. c (str): The character to remove. Returns: str: The new string after removing all occurrences of \'c\'. return s.replace(c, \'\') # Example usage: # new_string = remove_character(\'hello\', \'l\') # print(new_string) # Output: \'heo\'"},{"question":"In Python, you can calculate the sum of a list of numbers. Example: >>> numbers = [1, 2, 3, 4, 5] >>> total = sum(numbers) >>> print(total) 15 But, if some elements are strings that can be converted to integers, you need to convert them before summing up. Task You are given a list of integers and strings. Convert the strings to integers and then calculate the sum of all the elements. Function Description Complete the convert_and_sum function in the editor below. convert_and_sum has the following parameters: list arr: a list containing both integers and strings that can be converted to integers Returns int: the sum of all the elements as integers Input Format The one line contains a list of space-separated integers and strings. Sample Input 1 2 \'3\' \'4\' 5 Sample Output 15","solution":"def convert_and_sum(arr): Converts all string elements in the list to integers and returns the sum of all elements. Parameters: arr (list): A list containing both integers and strings that can be converted to integers. Returns: int: The sum of all elements as integers. total_sum = 0 for item in arr: total_sum += int(item) return total_sum"},{"question":"In a distant kingdom, there is a wise king who loves puzzles. One day, he challenges his subjects with the following problem: The kingdom has a large garden with various types of magical flowers. Each type of flower blooms exactly once per year on a specific day. The king provides you with a list of the blooming days of `n` different types of flowers. For some reasons, the king wants to find out the longest chain of successive blooming flowers such that each flower in the chain blooms exactly the next day after the previous one. Given the list of blooming days of the flowers, identify the maximum number of consecutive days in which you can see a new type of flower blooming each day. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of different types of flowers in the garden. The next line contains `n` integers `b_1, b_2, ..., b_n` (1 ≤ b_i ≤ 10^9) — the blooming days of the flowers. Output: Print a single integer — the maximum number of consecutive blooming days. Examples: Input 6 1 2 3 4 10 11 Output 4 Input 5 5 4 2 1 3 Output 5 Input 4 10 20 30 40 Output 1 Explanation: In the first example, the flowers bloom on days 1, 2, 3, 4, 10, 11. The maximum number of consecutive days is 4 (days 1 to 4). In the second example, the flowers bloom on days 1, 2, 3, 4, 5. Here, the maximum number of consecutive days is 5 (days 1 to 5). In the third example, the flowers bloom on days 10, 20, 30, 40. The maximum number of consecutive days is 1, as there are no consecutive blooming days.","solution":"def max_consecutive_blooming_days(n, days): Returns the maximum number of consecutive blooming days. Parameters: n (int): Number of different types of flowers. days (list): List of blooming days. Returns: int: Maximum number of consecutive blooming days. if n == 0: return 0 days.sort() longest_streak = 1 current_streak = 1 for i in range(1, n): if days[i] == days[i-1] + 1: current_streak += 1 else: current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a grid of size N x M where each cell contains either \'0\' or \'1\'. Your goal is to count the number of islands in the grid. An island is formed by connecting adjacent cells horizontally or vertically. You are not allowed to move diagonally. Your task is to write a function that, given the grid, returns the number of islands. Input: - First line: Two integers N and M separated by space denoting the number of rows and columns in the grid. - Next N lines: Each containing a string of M characters (\'0\' or \'1\') representing the grid. Output: - A single integer indicating the number of islands. Example Input: 4 5 11000 11000 00100 00011 Example Output: 3 Explanation: There are three islands in the grid. 1. The first island is formed by cells grid[0][0], grid[0][1], grid[1][0], and grid[1][1]. 2. The second island is formed by cell grid[2][2]. 3. The third island is formed by cells grid[3][3] and grid[3][4]. Constraints: - 1 ≤ N, M ≤ 1000 - The grid will only contain \'0\' and \'1\' characters.","solution":"def num_islands(grid): Returns the number of islands in the grid. if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(i, j): # If the cell is out of bounds or already visited or \'0\', return if i < 0 or i >= n or j < 0 or j >= m or visited[i][j] or grid[i][j] == \'0\': return # Mark the cell as visited visited[i][j] = True # Visit all neighbors (up, down, left, right) dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: # Found an unvisited part of an island islands += 1 dfs(i, j) return islands"},{"question":"Flipping Pancakes Chef Val is preparing for the annual Pancake Flipping Championship. Each contestant is given a stack of pancakes, some of which may be upside down (indicated by \'-\'), and others right-side up (indicated by \'+\'). The objective is to make all pancakes right-side up with the minimum number of flip operations. A flip operation consists of choosing any number of pancakes (starting from the top) and flipping them all at once, reversing their orientation. Chef Val would like your help to determine the minimum number of such flips needed to achieve all pancakes right-side up. Write a program that takes the initial state of the pancake stack and outputs the minimum number of flips required. Input: The input starts with an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines contain a string of characters representing the pancake stack for each test case. The string length will be between 1 and 100 inclusive. Output: For each test case, output a single integer - the minimum number of flip operations required. Example: Input: 3 -+ +-+ --- Output: 1 2 1 Explanation: - In the first example, flipping the first pancake will make both pancakes right-side up. - In the second example, you can flip the first two pancakes to \'-++\' and then flip all three to \'+++\' which requires two flips. - In the third example, one flip on all three makes them all right-side up.","solution":"def minimum_flips(pancakes): Returns the minimum number of flips required to make all pancakes right-side up. flips = 0 previous = pancakes[0] for current in pancakes[1:]: if current != previous: flips += 1 previous = current if pancakes[-1] == \'-\': flips += 1 return flips def pancake_flips(test_cases): Takes a list of pancake stack strings and returns a list of minimum flips required for each stack. results = [] for pancakes in test_cases: results.append(minimum_flips(pancakes)) return results"},{"question":"Lina is a diligent student who wants to prepare for her final math exam. To help her study, she has decided to solve a few math problems every night. However, Lina has a unique way of deciding which problems to solve. She has N different math problems, each with a difficulty level. She wants to choose a subset of these problems such that the sum of their difficulty levels is exactly equal to a target value T. If there are multiple ways to achieve the target, she wants only one such subset. If no such subset exists, she wants to know that too. Write a program to help Lina determine one possible subset of math problems that sums to T, or determine that no such subset exists. Input: The first line contains an integer Q, denoting the number of queries. Each query consists of two lines. The first line of each query contains two integers N and T separated by a single space. N denotes the number of problems, T denotes the target sum of difficulty levels. The second line of each query contains N integers separated by a single space, denoting the difficulty levels of the problems. Output: For each query, print \\"Subset found\\" followed by the subset in a new line if a subset exists. If multiple subsets exist, print any one of them. If no subset exists, print \\"No subset found\\". Constraints: 1 ≤ Q ≤ 100 1 ≤ N ≤ 20 1 ≤ T ≤ 100 1 ≤ Difficulty level of each problem ≤ 100 SAMPLE INPUT 2 4 10 2 3 5 7 3 15 4 6 8 SAMPLE OUTPUT Subset found 2 3 5 No subset found Explanation: In the first query, one possible subset that sums to 10 is {2, 3, 5}. In the second query, there is no subset of problems that sums to 15.","solution":"from itertools import combinations def find_subset(N, T, difficulties): Finds one subset of `difficulties` whose sum is exactly `T`. for r in range(1, N + 1): for combo in combinations(difficulties, r): if sum(combo) == T: return list(combo) return None def solve_queries(queries): results = [] for N, T, difficulties in queries: subset = find_subset(N, T, difficulties) if subset: results.append(\\"Subset found\\") results.append(\\" \\".join(map(str, subset))) else: results.append(\\"No subset found\\") return results"},{"question":"Chef loves magical sequences of integers and has recently discovered an interest in prime numbers. He defines a magical sequence as a sequence where exactly one element is a prime number and all other elements are composite numbers. Given an integer array, Chef wants to determine if it is possible to rearrange the array into a magical sequence. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the length of the array. The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the elements of the array. ------ Output ------ For each test case, print a single line containing \\"YES\\" if it\'s possible to rearrange the array into a magical sequence, otherwise print \\"NO\\". ------ Constraints ------ 1 leq T leq 1000 1 leq N leq 100 2 leq A_i leq 10^6 for each valid i ------ Subtasks ------ Subtask #1 (30 points): 1 leq N leq 10 Subtask #2 (70 points): original constraints ------ Sample Input 1 ------ 3 5 4 6 8 9 3 4 4 7 8 9 3 2 4 6 ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ In the first test case, the array [4, 6, 8, 9, 3] can be rearranged to [4, 6, 8, 9, 3], where 3 is a prime and the other numbers are composite. In the second test case, the array [4, 7, 8, 9] can be rearranged to [4, 8, 9, 7], where 7 is a prime and the other numbers are composite. In the third test case, the array [2, 4, 6] can be rearranged to [6, 4, 2], where 2 is a prime and the other numbers are composite.","solution":"def is_prime(num): Check if the number is a prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False limit = int(num ** 0.5) + 1 for i in range(3, limit, 2): if num % i == 0: return False return True def can_form_magical_sequence(arr): Determine if the array can be rearranged into a magical sequence. prime_count = 0 composite_count = 0 for num in arr: if is_prime(num): prime_count += 1 else: composite_count += 1 return prime_count == 1 and composite_count == len(arr) - 1 def magical_sequences(test_cases): Main function to process multiple test cases. results = [] for case in test_cases: N, arr = case if can_form_magical_sequence(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains a non-negative integer representing the height of a hill in that particular cell. The cells with a height of 0 are considered valleys. Your task is to determine the number of distinct peaks in this grid. A peak is defined as a cell that is higher than all of its adjacent cells. Adjacent cells are those that share a common side or corner (up to 8 neighbors). ------ Input: ------ The first line contains two integers N and M, the number of rows and columns in the grid respectively. The next N lines each contain M integers representing the heights in the grid. ------ Output: ------ Output the number of distinct peaks in the grid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 0 ≤ text{height of any cell} ≤ 10^6 ------ Sample Input 1 ------ 3 3 1 2 1 3 4 3 1 2 1 ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ The grid is: ``` 1 2 1 3 4 3 1 2 1 ``` There is only one peak in the grid, which is the cell with height 4 (at position (2,2)). It is higher than all of its adjacent cells (3, 3, 2, and 2). ------ Sample Input 2 ------ 4 4 1 2 3 4 4 3 2 1 1 2 3 4 4 3 2 1 ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ The grid is: ``` 1 2 3 4 4 3 2 1 1 2 3 4 4 3 2 1 ``` There are four peaks in this grid, which are the cells with heights 4 at positions (1,4), (2,1), (3,4), and (4,1). Each of these cells is higher than its adjacent cells.","solution":"def count_peaks(grid, N, M): Returns the number of distinct peaks in the given grid. :param grid: List of lists, where each sublist is a row of the grid. :param N: Number of rows. :param M: Number of columns. :return: Number of distinct peaks. def is_peak(i, j): for di in [-1, 0, 1]: for dj in [-1, 0, 1]: ni, nj = i + di, j + dj if (di != 0 or dj != 0) and 0 <= ni < N and 0 <= nj < M: if grid[i][j] <= grid[ni][nj]: return False return True peak_count = 0 for i in range(N): for j in range(M): if grid[i][j] > 0 and is_peak(i, j): peak_count += 1 return peak_count"},{"question":"E: Most Frequent Element After Updates problem Ryota has a list of integers (b_1, b_2, ..., b_m). Ryota needs to determine the most frequent element in the list, but he needs to update the list p times with new values. After each update, find the most frequent element in the list. Input format m p b_1 b_2 ... b_m u_1 y_1 ... u_p y_p Each u_i, y_i (1 leq i leq p) indicates that the u_i-th element in the list should be updated to y_i. Note that each update is cumulative, meaning the list remains updated in subsequent operations. Constraint * 1 leq m leq 10^5 * 1 leq p leq 10^5 * 1 leq u_i leq m * | b_i |, | y_i | leq 10^9 Output format Provide p + 1 lines. The first line should contain the most frequent element in the original list before any updates. Each of the following p lines should contain the most frequent element in the list immediately after the i-th update. Input example 1 6 3 1 2 3 1 2 3 4 2 5 3 6 3 Output example 1 1 2 3 3 Initially, both 1, 2, and 3 occur twice. According to the problem statement, among elements with equal highest frequency, we choose the first occurring element. After the first update, the list becomes (1, 2, 3, 2, 2, 3), so 2 occurs most frequently. After the second update, the list becomes (1, 2, 3, 2, 3, 3), so 3 occurs most frequently. After the third update, the list becomes (1, 2, 3, 2, 3, 3), so 3 remains the most frequent element. Input example 2 4 2 5 5 5 6 1 6 3 6 Output example 2 5 5 6 Initially, 5 occurs three times. After the first update, (6, 5, 5, 6), both 5 and 6 occur twice. According to the problem statement, among elements with equal highest frequency, we choose the first occurring element. After the second update, the list becomes (6, 5, 6, 6), so 6 occurs most frequently. Input example 3 5 1 1 1 1 2 1 4 2 Output example 3 1 1 The element 1 appears most frequently in the initial list and remains the most frequent after the update.","solution":"from collections import Counter def most_frequent_element_after_updates(m, p, b, updates): Function to determine the most frequent element in a list after each update. :param m: Integer, length of the list. :param p: Integer, number of updates. :param b: List of integers, the initial list. :param updates: List of tuples, each containing (u_i, y_i) for updates. :return: List of most frequent elements after each update. # Keep a counter of the elements in the list count = Counter(b) most_freq = count.most_common(1)[0][0] # To store the results results = [most_freq] for u_i, y_i in updates: old_value = b[u_i - 1] # Update the value in the original list b[u_i - 1] = y_i # Update the count dictionary count[old_value] -= 1 count[y_i] += 1 # Clean up zero counts to avoid clutter if count[old_value] == 0: del count[old_value] # Find the current most frequent element most_freq = count.most_common(1)[0][0] # Append the result for the current state results.append(most_freq) return results"},{"question":"Given is an integer array `A` of length `n`. Determine the number of unique subarrays of `A` that are strictly increasing. A strictly increasing subarray is a contiguous portion of `A` where each element is greater than the previous one. Constraints * 1 leq n leq 2000 * 1 leq A[i] leq 10^6 (1 ≤ i ≤ n) Input The input is given from Standard Input in the following format: ``` n A1 A2 ... An ``` Output Print the number of unique strictly increasing subarrays of `A`. Examples Input ``` 5 1 2 2 4 3 ``` Output 3 Input ``` 4 1 2 3 4 ``` Output 10","solution":"def count_unique_increasing_subarrays(n, A): Returns the count of unique strictly increasing subarrays in the list A of length n. count = 0 length = 1 for i in range(1, n): if A[i] > A[i-1]: length += 1 else: count += (length * (length - 1)) // 2 length = 1 count += (length * (length - 1)) // 2 return count"},{"question":"You are given a string str[] of lowercase characters and an alphabet character k. Your task is to determine the index of the first occurrence of character k in the string. If k is not present in the string, return -1. Additionally, if k is present, you should remove the first occurrence of k from the string and return the new string. Example 1: Input: str = \\"hello\\", k = \'l\' Output: Index: 2, New String: \\"helo\\" Explanation: The first occurrence of \'l\' is at index 2. After removing \'l\', the new string is \\"helo\\". Example 2: Input: str = \\"world\\", k = \'z\' Output: Index: -1, New String: \\"world\\" Explanation: The character \'z\' is not present in the string. So, the original string remains unchanged. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function find_and_remove() that takes a string (str), an alphabet character (k) and returns a tuple: the index of the first occurrence of k in the string, and the new string after removing the first occurrence of k. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |str| ≤ 10^5 \'a\' ≤ str[i], k ≤ \'z\'","solution":"def find_and_remove(s, k): This function takes a string s and a character k and returns a tuple: - the index of the first occurrence of k in s - the new string after removing the first occurrence of k If k is not found, it returns -1 and the original string. index = s.find(k) if index == -1: return (index, s) else: new_string = s[:index] + s[index+1:] return (index, new_string)"},{"question":"In a faraway kingdom, the people adore palindromic sequences. A sequence is called palindromic if it reads the same forward and backward. The King has an archive of ancient sequences made up of lowercase letters, and he wants to extract the longest palindromic subsequence from these sequences. A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The King orders you to write a program that finds the longest palindromic subsequence for each ancient sequence. ------ Input ------ The first line contains an integer T. Then T lines follow. Each line contains a string S_{i} of lowercase letters. ------ Output ------ For each sequence, print the length of the longest palindromic subsequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S_{i}| ≤ 1000, where |S_{i}| denotes the length of S_{i} ------ Notes ------ Different operating systems have different ways of representing a newline; do not assume one particular way will be used. ----- Sample Input 1 ------ 3 bbabcbcab abba abcdefg ----- Sample Output 1 ------ 7 4 1 ----- Explanation 1 ------ - For the sequence \\"bbabcbcab\\", the longest palindromic subsequence is \\"babcbab\\" which has a length of 7. - For the sequence \\"abba\\", the longest palindromic subsequence is \\"abba\\" itself, which has a length of 4. - For the sequence \\"abcdefg\\", all characters are different, so the longest palindromic subsequence length is 1.","solution":"def longest_palindromic_subsequence_length(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)]for y in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. Note that the lower diagonal values of table are # useless and not filled in the process. The values are filled in a # manner similar to Matrix Chain Multiplication DP solution (See # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/). # cl is length of substring for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def process_sequences(T, sequences): Processes multiple sequences and returns the lengths of the longest palindromic subsequences for each. results = [] for seq in sequences: results.append(longest_palindromic_subsequence_length(seq)) return results # Example usage T = 3 sequences = [\\"bbabcbcab\\", \\"abba\\", \\"abcdefg\\"] print(process_sequences(T, sequences)) # Expected output: [7, 4, 1]"},{"question":"A software company maintains logs of user activity on their platform. The logs capture user ID, timestamp, and the activity performed. Your task is to write a function that analyzes these logs to find the user who has been the most active within a given time frame. The log entries are provided as a list of string tuples in the format `(userID, timestamp, activity)`, where `userID` is a string, `timestamp` is an integer representing the time in seconds since the epoch, and `activity` is a string description of the activity performed. The function should accept the log entries and the time frame (start and end timestamps) and return the user ID of the most active user within that time frame. If multiple users have the same highest activity count, return the one with the smallest user ID lexicographically. **Function Signature** ```python def most_active_user(logs: List[Tuple[str, int, str]], start: int, end: int) -> str: ``` **Input** - `logs`: A list of tuples where each tuple contains three values: `userID` (str), `timestamp` (int), and `activity` (str). - `start`: An integer representing the starting timestamp of the time frame. - `end`: An integer representing the ending timestamp of the time frame. **Output** - A string representing the user ID of the most active user within the specified time frame. **Examples** ```python logs = [ (\\"user1\\", 1609459200, \\"login\\"), (\\"user2\\", 1609462800, \\"login\\"), (\\"user1\\", 1609466400, \\"message\\"), (\\"user3\\", 1609470000, \\"login\\"), (\\"user2\\", 1609473600, \\"message\\"), (\\"user1\\", 1609477200, \\"logout\\"), (\\"user2\\", 1609480800, \\"logout\\") ] start = 1609459200 end = 1609470000 most_active_user(logs, start, end) ``` `Output` ```python \\"user1\\" ``` ```python logs = [ (\\"user1\\", 1609459200, \\"login\\"), (\\"user2\\", 1609459200, \\"login\\"), (\\"user1\\", 1609459201, \\"message\\"), (\\"user2\\", 1609459202, \\"message\\"), (\\"user1\\", 1609459203, \\"logout\\"), (\\"user2\\", 1609459204, \\"logout\\"), (\\"user2\\", 1609459205, \\"login\\") ] start = 1609459200 end = 1609459204 most_active_user(logs, start, end) ``` `Output` ```python \\"user2\\" ```","solution":"from typing import List, Tuple from collections import defaultdict def most_active_user(logs: List[Tuple[str, int, str]], start: int, end: int) -> str: activity_count = defaultdict(int) for user_id, timestamp, activity in logs: if start <= timestamp <= end: activity_count[user_id] += 1 most_active = sorted(activity_count.items(), key=lambda x: (-x[1], x[0])) return most_active[0][0] if most_active else None"},{"question":"A robot is located in the top-left corner of an m x n grid (marked \'Start\'). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\'). However, the robot can only visit cells in the grid that have a special mark \'1\' (the cells with \'0\' are blocked and cannot be visited). Given the grid, determine the number of distinct paths that the robot can take to reach the \'Finish\' cell from the \'Start\' cell. Input Format The first line contains two integers m and n denoting the number of rows and columns in the grid. The next m lines each contain n integers (either \'0\' or \'1\') denoting the grid. Constraints 1 <= m, n <= 10 Each cell in the grid is either \'0\' or \'1\'. Output Format A single integer which denotes the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Sample Input 3 3 1 1 0 1 1 0 0 1 1 Sample Output 2 Explanation There are two promising distinct paths for the robot: Right -> Down -> Down -> Right -> Right Down -> Down -> Right -> Right -> Down Both paths allow the robot to reach the \'Finish\' cell while only passing through cells marked \'1\'.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. m = len(grid) n = len(grid[0]) # If starting or ending cell is 0, return 0 as there are no paths. if grid[0][0] == 0 or grid[m-1][n-1] == 0: return 0 # Initialize a 2D dp array with 0\'s dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 # Start point # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 1 else 0 # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 1 else 0 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): if grid[i][j] == 1: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"Given an array of integers, you need to find the length of the minimum contiguous subarray, that when sorted, results in the entire array being sorted. A contiguous subarray is a subarray that can be obtained by deleting zero or more elements from the front of the array and zero or more elements from the end of the array without changing the order of the remaining elements. # Input - The first line of the input contains a single integer **n** (1 ≤ n ≤ 100,000) — the size of the array. - The second line contains **n** integers separated by spaces, which represents the elements of the array (1 ≤ arr[i] ≤ 10^9). # Output - Output a single integer, the length of the minimum contiguous subarray that needs to be sorted. # Example Example 1 **Input** ``` 6 2 6 4 8 10 9 15 ``` **Output** ``` 5 ``` Example 2 **Input** ``` 7 1 2 3 4 5 6 7 ``` **Output** ``` 0 ``` Example 3 **Input** ``` 4 1 3 2 4 ``` **Output** ``` 2 ``` # Note In the first example, by sorting the subarray [6, 4, 8, 10, 9], the entire array becomes sorted. Therefore, the output is 5, which is the length of this subarray. In the second example, the array is already sorted, so the output is 0 because no subarray needs to be sorted. In the third example, the smallest subarray [3, 2] sorted will make the entire array sorted; its length is 2. This is the required output.","solution":"def find_unsorted_subarray(nums): Returns the length of the minimum contiguous subarray, that when sorted, results in the entire array being sorted. n = len(nums) start, end = 0, -1 min_val, max_val = float(\'inf\'), float(\'-inf\') for i in range(n): if nums[i] < max_val: end = i else: max_val = nums[i] for i in range(n - 1, -1, -1): if nums[i] > min_val: start = i else: min_val = nums[i] return end - start + 1"},{"question":"Create a function that takes an integer n and generates the nth sequence in the \\"look-and-say\\" series. The \\"look-and-say\\" series starts with \\"1\\" and each subsequent term is generated by describing the previous term\'s digits. For example, starting with 1: - 1 is read as \\"one 1\\" or \\"11\\" - 11 is read as \\"two 1s\\" or \\"21\\" - 21 is read as \\"one 2, then one 1\\" or \\"1211\\" - 1211 is read as \\"one 1, one 2, then two 1s\\" or \\"111221\\" - And so on. Write the code to generate the nth term of this sequence. Example: Input: 5 Output: \\"111221\\" Note: 1 <= n <= 30","solution":"def next_in_sequence(s): result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 result.append(f\\"{count}{s[i]}\\") i += 1 return \'\'.join(result) def look_and_say(n): if n == 1: return \\"1\\" sequence = \\"1\\" for _ in range(1, n): sequence = next_in_sequence(sequence) return sequence"},{"question":"A company wants to automate the process of generating unique employee IDs for new hires. Each employee ID must meet the following criteria: 1. The ID must be exactly 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: `#@*` 6. The ID must not contain any spaces. Write a function `generate_employee_id` that takes no parameters and returns a string that satisfies all the criteria. Additionally, write a function `validate_employee_id(id)` that takes a string `id` as input and returns `True` if the ID meets all the criteria and `False` otherwise. Implement both functions in Python. Example: ```python from your_module import generate_employee_id, validate_employee_id new_id = generate_employee_id() print(new_id) # Output should be a string like \\"A1b#23Cd\\" that meets all criteria. print(validate_employee_id(new_id)) # Output should be True. print(validate_employee_id(\\"Abc123\\")) # Output should be False because it\'s not 8 characters long. print(validate_employee_id(\\"Abc123**\\")) # Output should be False because it does not contain an uppercase letter. ``` Note: While writing the implementation, ensure you use standard libraries only and do not rely on any external random ID generation packages.","solution":"import random import string def generate_employee_id(): Generates a unique employee ID that is exactly 8 characters long and contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set: #@* uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(\\"#@*\\") all_characters = string.ascii_letters + string.digits + \\"#@*\\" remaining_chars = \'\'.join(random.choices(all_characters, k=4)) id_parts = [uppercase, lowercase, digit, special] + list(remaining_chars) random.shuffle(id_parts) return \'\'.join(id_parts) def validate_employee_id(emp_id): Validates the given employee ID string against specific criteria: - exactly 8 characters long - contains at least one uppercase letter - contains at least one lowercase letter - contains at least one digit - contains at least one special character #@* - does not contain spaces Args: - emp_id (str): employee ID string to be validated Returns: - bool: True if the ID meets all criteria, False otherwise if len(emp_id) != 8: return False if not any(c.isupper() for c in emp_id): return False if not any(c.islower() for c in emp_id): return False if not any(c.isdigit() for c in emp_id): return False if not any(c in \'#@*\' for c in emp_id): return False if \' \' in emp_id: return False return True"},{"question":"You are given a string s consisting of lowercase English letters. The goal is to determine the length of the longest substring that consists of the same character. For example, in the string \\"aaabbcc\\", the longest substring with the same character is \\"aaa\\" with length 3. Input The first line contains a single string s (1 ≤ |s| ≤ 1000), which is the input string. Output Print a single number which is the length of the longest substring consisting of the same character. Examples Input aaabbcc Output 3 Input aabbbcccc Output 4 Input abcd Output 1","solution":"def longest_same_char_substring(s): Returns the length of the longest substring consisting of the same character. :param s: Input string :return: Length of the longest substring with the same character if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a program to find the longest contiguous subarray within an array of integers that has the maximum product. Input The first line contains a single integer `n` (1 ≤ n ≤ 100) representing the number of elements in the array. The second line contains `n` integers separated by spaces, each integer `a_i` (-10 ≤ a_i ≤ 10) representing the elements of the array. Output Print a single line containing an integer, the maximum product of any contiguous subarray within the given array. Examples Input 5 2 3 -2 4 -1 Output 48 Input 3 -2 0 -1 Output 0","solution":"def max_product_subarray(nums): Returns the maximum product of any contiguous subarray within the given array. if not nums: return 0 max_so_far = min_so_far = result = nums[0] for i in range(1, len(nums)): current = nums[i] temp_max = max(current, max_so_far * current, min_so_far * current) min_so_far = min(current, max_so_far * current, min_so_far * current) max_so_far = temp_max result = max(result, max_so_far) return result"},{"question":"You are given an array A of N integers and an integer K. The task is to find the maximum possible sum of a subarray of length exactly K after performing at most one element swap anywhere in the array A. A subarray is a contiguous part of the array. A swap involves choosing two different indices i and j (1 ≤ i, j ≤ N) and swapping the elements A[i] and A[j]. ------ Input ------ The first line of input contains a single integer T, the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers representing the elements of the array A. ------ Output ------ For each test case, print a single line containing the maximum possible sum of a subarray of length K after performing at most one swap. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N -10^9 ≤ A[i] ≤ 10^9 ----- Sample Input 1 ------ 2 5 3 1 2 3 4 5 5 2 -1 -2 -3 4 5 ----- Sample Output 1 ------ 12 9 ----- Explanation 1 ------ Example case 1: Without any swap, the subarray [3, 4, 5] already gives the maximum sum of 12. Example case 2: By swapping -1 with 4, we get the array [4, -2, -3, -1, 5]. The maximum sum of a subarray of length 2 is from the subarray [4, 5], which is 9.","solution":"def max_sum_after_swap(T, test_cases): results = [] for case in range(T): N, K = test_cases[case][:2] A = test_cases[case][2] # Edge case: If K equals N, no subarray but the entire array. if K == N: results.append(sum(A)) continue # Find max sum of subarray of length K without any swap current_sum = sum(A[:K]) max_sum = current_sum for i in range(1, N - K + 1): current_sum = current_sum - A[i-1] + A[i + K - 1] max_sum = max(max_sum, current_sum) initial_max = max_sum # Try swapping each (i, j) where i is in the subarray and j is outside. for start in range(0, N - K + 1): current_sum = sum(A[start:start + K]) for i in range(start, start + K): for j in range(N): if j < start or j >= start + K: A[i], A[j] = A[j], A[i] swapped_sum = sum(A[start:start + K]) max_sum = max(max_sum, swapped_sum) A[i], A[j] = A[j], A[i] results.append(max(max_sum, initial_max)) return results"},{"question":"Balanced Brackets You are given a string consisting solely of open brackets \'(\' and close brackets \')\'. You need to determine whether the brackets form a balanced sequence or not. A sequence of brackets is considered balanced if: 1. Each open bracket \'(\' has a corresponding close bracket \')\'. 2. Brackets are properly nested, meaning that an open bracket must be closed by the most recent open bracket that has not been closed yet. Write a function that accepts a single string as input and returns `true` if the bracket sequence is balanced, otherwise returns `false`. Input Specifications: - The input is a single string s consisting of only \'(\' and \')\' characters. - The length of the string will be between 1 and 1000. Output Specifications: - Output `true` if the string has a balanced bracket sequence, otherwise output `false`. Examples Input 1: ``` (()) ``` Output 1: ``` true ``` Input 2: ``` ((()) ``` Output 2: ``` false ``` Input 3: ``` ()()() ``` Output 3: ``` true ``` Input 4: ``` )()( ``` Output 4: ``` false ``` Explanation: 1. In Example 1, the sequence \\"(()\\" is balanced because each \'(\' has a corresponding \')\'. 2. In Example 2, the sequence \\"((())\\" is not balanced because there is one extra \'(\' without a matching \')\'. 3. In Example 3, the sequence \\"()()()\\" is balanced because each \'(\' has a corresponding \')\' and they are properly nested. 4. In Example 4, the sequence \\")()(\\" is not balanced because the first character is a \')\' which does not have a matching \'(\' before it.","solution":"def is_balanced_brackets(s): Returns True if the bracket sequence is balanced, otherwise returns False. Arguments: s -- a string consisting solely of \'(\' and \')\' stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given a 2D grid of size N times M filled with integers, your task is to determine the sum of the smallest element in each row. You need to write a program that processes multiple grids and calculates the desired sum for each grid. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with a line containing two space-separated integers N and M. The next N lines each contain M space-separated integers representing the elements of the grid. ------ Output ------ For each test case, output a single line containing the sum of the smallest element in each row. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 -10^9 ≤ text{element of the grid} ≤ 10^9 ------ Sample Input 1 ------ 3 2 3 1 3 -1 2 2 4 3 3 5 10 20 5 5 5 -5 -10 1000 1 4 9 8 7 6 ------ Sample Output 1 ------ 0 0 6 ------ Explanation ------ - In the first test case, the grid is: 1 3 -1 2 2 4 The smallest elements are -1 and 2. Their sum is 1. - In the second test case, the grid is: 5 10 20 5 5 5 -5 -10 1000 The smallest elements are 5, 5, and -10. Their sum is 0. - In the third test case, the grid is: 9 8 7 6 The smallest element is 6. Hence, the sum is 6.","solution":"def sum_of_smallest_elements(test_cases): results = [] for case in test_cases: N, M, grid = case total_sum = sum(min(row) for row in grid) results.append(total_sum) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) grid = [list(map(int, lines[index + i + 1].split())) for i in range(N)] test_cases.append((N, M, grid)) index += N + 1 return test_cases def format_output(results): return \'n\'.join(map(str, results)) # Example usage input_string = 3 2 3 1 3 -1 2 2 4 3 3 5 10 20 5 5 5 -5 -10 1000 1 4 9 8 7 6 test_cases = parse_input(input_string) results = sum_of_smallest_elements(test_cases) output_string = format_output(results) print(output_string)"},{"question":"# Method to Create Palindromic Substrings Given a string `s`, find the number of distinct palindromic substrings in the string. A palindromic substring is a substring which reads the same backward as forward. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100), where `|s|` is the length of the string. The string will consist of lowercase English letters only. Output Output a single integer, the number of distinct palindromic substrings in the given string. Examples Input `ababa` Output 9 Input `aaaa` Output 4 Explanation In the first example, the distinct palindromic substrings are: `a`, `b`, `aba`, `bab`, `ababa`. So there are a total of 5 distinct palindromic substrings. In the second example, the distinct palindromic substrings are: `a`, `aa`, `aaa`, `aaaa`. So there are a total of 4 distinct palindromic substrings.","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() n = len(s) for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"Write a function longest_common_subsequence(str1, str2) that takes two strings as input and returns their longest common subsequence (LCS). The LCS of two strings is the longest sequence that can be derived from both strings by deleting some characters (possibly zero) without changing the order of the remaining characters. For example: - The LCS of \\"abcde\\" and \\"ace\\" is \\"ace\\". - The LCS of \\"abc\\" and \\"abc\\" is \\"abc\\". - The LCS of \\"abc\\" and \\"def\\" is \\"\\" (an empty string). Your function should have the following signature: ```python def longest_common_subsequence(str1: str, str2: str) -> str: ``` Constraints: - The length of both input strings will not exceed 100 characters. - The input strings will consist of lowercase English letters only. You may find the following resources useful: - [Dynamic Programming](https://en.wikipedia.org/wiki/Dynamic_programming) - [Longest Common Subsequence Problem](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem)","solution":"def longest_common_subsequence(str1: str, str2: str) -> str: Returns the longest common subsequence (LCS) of two strings. m, n = len(str1), len(str2) # Creating a 2D table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the dp table in bottom-up fashion. for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstructing the LCS from the dp table. lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"You are given a set of n distinct points along the circumference of a circle. Your task is to find the number of distinct convex quadrilaterals that can be formed using these points. A convex quadrilateral is a four-sided polygon where all its interior angles are less than 180 degrees. In the context of points on a circle, this essentially means any four points will always form a convex quadrilateral. Input The first line of input contains an integer n (4 ≤ n ≤ 2000) – the number of points on the circle. Output Print one integer – the number of distinct convex quadrilaterals that can be formed. Examples Input 6 Output 15 Input 8 Output 70 Note In the first example, there are 15 ways to choose 4 points out of 6, which corresponds to the number of distinct convex quadrilaterals. The 15 quadrilaterals are given by choosing points in groups of four. In the second example, there are 70 ways to choose 4 points out of 8 to form a convex quadrilateral.","solution":"def count_convex_quadrilaterals(n): Returns the number of distinct convex quadrilaterals that can be formed using n points on a circle. from math import comb return comb(n, 4)"},{"question":"*** Flatten and Sort an Array *** You will be given an array of arrays, where each sub-array contains integers. Your task is to flatten the array of arrays into a single array and return it sorted in ascending order. The array will always contain arrays of integers (positive or negative) and will never be empty or null. Make sure to handle the edge cases where some sub-arrays might be empty, but the overall structure is guaranteed to always be an array of arrays. Example: ```python flatten_and_sort([[3, 2, 1], [4, 6, 5], [], [9, 7, 8]]) # Returns: [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` ```python flatten_and_sort([[], []]) # Returns: [] ``` ```python flatten_and_sort([[1, 3, 5], [100], [2, 4, 6], [9, 7, 8], []]) # Returns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 100] ``` Use built-in functions as necessary, but loops and manual sorting should be avoided as much as possible.","solution":"def flatten_and_sort(array_of_arrays): Flattens an array of arrays and returns a sorted array. Parameters: array_of_arrays (list of list of int): The input array of arrays containing integers. Returns: list of int: A sorted list containing all integers from the sub-arrays. # Flatten the list using a list comprehension flattened_list = [item for sublist in array_of_arrays for item in sublist] # Sort the flattened list flattened_list.sort() return flattened_list"},{"question":"Grace is a botanist who is studying plant growth patterns in rectangular areas of a garden. She has a list of plant positions within several rectangular plots, each defined by pairs of coordinates. Each time a new plant sprouts, she records its (x, y) position in her journal without specifying the plot to which it belongs. One day, Grace lost the boundaries of all her previous plots but wants to reconstruct the smallest possible rectangular plot that encompasses all recorded plant positions from her journal. Each given point belongs to only one plot, and the coordinates are distinct. Given the positions of the plants, help Grace determine the smallest possible area of a rectangular plot that can enclose all the plant positions. Input The first line of the input contains an integer m (1 ≤ m ≤ 100 000), the number of plant positions recorded by Grace. Each of the following m lines contains two integers x and y (1 ≤ x, y ≤ 10^9), representing the coordinates of the plants. Output Print the only integer, the smallest possible area of the rectangle that can include all the plant positions. Examples Input 5 1 2 3 5 4 4 2 3 1 5 Output 9 Input 3 10 20 10 30 10 25 Output 0 Note In the first example, the smallest rectangle that can encompass all given positions is bounded by (1, 2) and (4, 5), with an area of 9. In the second example, all positions share the same x-coordinate, so the width of the rectangle is 0, leading to an area of 0.","solution":"def smallest_enclosing_rectangle_area(m, positions): Determines the smallest possible area of a rectangular plot that can encompass all given plant positions. Args: m (int): Number of plant positions. positions (list of tuples): List of tuples, where each tuple contains two integers representing the x and y coordinates. Returns: int: The smallest possible area of the rectangle. if m <= 0: return 0 min_x = min(position[0] for position in positions) max_x = max(position[0] for position in positions) min_y = min(position[1] for position in positions) max_y = max(position[1] for position in positions) width = max_x - min_x height = max_y - min_y return width * height"},{"question":"A programmer is working on a sequence transformation problem. The task is to transform a given sequence of integers into a new sequence by applying the following rules: 1. If an element is a prime number, it should be increased by 2. 2. If an element is an even number and not prime, it should be divided by 2. 3. If an element is an odd number and not prime, it should be increased by 1. The output should be the new transformed sequence. Input: - The first line contains an integer `n` representing the number of elements in the sequence. - The second line contains `n` space-separated integers which are the elements of the sequence. Output: - A single line containing `n` space-separated integers which are the transformed sequence. NOTE: You do not need to create a program for this problem. You need to write your answer for the given input in the provided code snippet. To see how to submit the solution please check this link. SAMPLE INPUT 5 3 4 5 6 9 SAMPLE OUTPUT 5 2 7 3 10","solution":"import math def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num)) + 1, 2): if num % i == 0: return False return True def transform_sequence(sequence): transformed = [] for num in sequence: if is_prime(num): transformed.append(num + 2) elif num % 2 == 0: transformed.append(num // 2) else: transformed.append(num + 1) return transformed # Example Usage sequence = [3, 4, 5, 6, 9] transformed_sequence = transform_sequence(sequence) print(transformed_sequence) # Output: [5, 2, 7, 3, 10]"},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, and so on. Write a function to find the n-th number in the Fibonacci sequence where n is a non-negative integer. The function should be efficient for large values of n, so an iterative approach is preferred over a recursive one. To keep: Efficient calculation To remove: Recursive implementation Result should be an integer representing the n-th Fibonacci number.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Ravi is growing special flowers in a 2D garden with N rows (numbered 1 through N) and M columns (numbered 1 through M). Each cell (i,j) of the garden grid contains a flower with a height H_{i,j}. Given a subgrid of the garden defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2), the beauty of this subgrid is defined as the difference between the maximum height and the minimum height of the flowers within the subgrid. Ravi needs to answer several queries about the beauty of various subgrids of his garden. For each query, he is given the coordinates (r1, c1) and (r2, c2) that define a subgrid, and he needs to return the beauty of that subgrid. ------ Input ------ The first line of the input contains a single integer N and M. The next N lines each contain M space-separated integers H_{i,1}, H_{i,2}, ldots, H_{i,M}, representing the heights of the flowers in the 2D garden. The next line contains a single integer Q denoting the number of queries. Each of the next Q lines contains four integers r1, c1, r2, and c2 (1-indexed), describing the coordinates of the top-left and bottom-right corners of a subgrid. ------ Output ------ For each query, print a single line containing one integer - the beauty of the corresponding subgrid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ H_{i,j} ≤ 10^{6} for all 1 ≤ i ≤ N and 1 ≤ j ≤ M 1 ≤ Q ≤ 10000 1 ≤ r1 ≤ r2 ≤ N 1 ≤ c1 ≤ c2 ≤ M ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N, M ≤ 100 1 ≤ Q ≤ 100 Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ----- Sample Output 1 ------ 4 4 ----- explanation 1 ------ Example case 1: - The first query corresponds to the subgrid defined by the top-left corner (1, 1) and bottom-right corner (2, 2). The heights in this subgrid are [1, 2; 4, 5]. The maximum height is 5 and the minimum height is 1, so the beauty is 5 - 1 = 4. - The second query corresponds to the subgrid defined by the top-left corner (2, 2) and bottom-right corner (3, 3). The heights in this subgrid are [5, 6; 8, 9]. The maximum height is 9 and the minimum height is 5, so the beauty is 9 - 5 = 4.","solution":"def find_beauty_of_subgrid(N, M, garden, queries): results = [] for query in queries: r1, c1, r2, c2 = query # Adjust for 0-indexing r1 -= 1 c1 -= 1 r2 -= 1 c2 -= 1 max_height = float(\'-inf\') min_height = float(\'inf\') for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): height = garden[i][j] if height > max_height: max_height = height if height < min_height: min_height = height beauty = max_height - min_height results.append(beauty) return results"},{"question":"-----Problem----- A robot is placed in a two-dimensional grid, represented by Cartesian coordinates. The robot starts at the origin point (0,0). The robot wants to reach a target point (X,Y). The robot can move in four possible directions: up, down, left, or right, and each move changes the robot\'s position by exactly one unit in the respective direction. Your task is to find the minimum number of moves the robot requires to reach the target point from the origin. -----Input----- The first line contains the number of test cases T. Each of the next T lines contains two space-separated integers, X and Y, representing the target coordinates. -----Output----- For each test case, output one line with an integer, the minimum number of moves required to reach the target point (X,Y) from the origin (0,0). -----Constraints----- - T ≤ 10000 - -10^9 ≤ X, Y ≤ 10^9 -----Sample Input----- 2 3 3 -3 4 -----Sample Output----- 6 7 -----Explanation----- - In the first sample case, the robot can move right 3 times and up 3 times to reach the point (3,3). Thus 6 moves are needed. - In the second sample case, the robot can move left 3 times and up 4 times to reach the point (-3,4). Thus 7 moves are needed.","solution":"def min_moves_to_target(T, coordinates): Returns a list of minimum moves required to reach each target point from the origin. Parameters: T (int): Number of test cases. coordinates (List[Tuple[int, int]]): List of tuples where each tuple contains the X and Y coordinates. Returns: List[int]: A list of integers representing the minimum moves for each target point. results = [] for x, y in coordinates: results.append(abs(x) + abs(y)) return results"},{"question":"You are given an array of `n` integers. You can select any two indices `i` and `j` `(1 ≤ i, j ≤ n)` and swap the elements at those indices. Your task is to make the array strictly increasing by performing at most one swap. If the array is already strictly increasing, no swap is necessary. Determine if it is possible to achieve a strictly increasing array by performing at most one swap and output \\"YES\\" if it is possible and \\"NO\\" otherwise. -----Input----- The first line contains a single integer `n` (1 le n le 10^5) - the number of elements in the array. The second line contains `n` integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) - the elements of the array. -----Output----- Print \\"YES\\" if it is possible to make the array strictly increasing by performing at most one swap, and \\"NO\\" otherwise. -----Examples----- Input 5 1 5 3 4 2 Output YES Input 6 8 7 6 5 4 3 Output NO -----Note----- In the first example, you can swap the second and fifth elements (5 and 2), resulting in the array [1, 2, 3, 4, 5], which is strictly increasing. In the second example, no single swap can make the array strictly increasing.","solution":"def can_be_made_increasing_by_one_swap(arr): Determines if the array can be made strictly increasing by performing at most one swap. Arguments: arr -- List of integers representing the array Returns: \'YES\' if it is possible to make the array strictly increasing by performing at most one swap, \'NO\' otherwise. n = len(arr) def is_strictly_increasing(seq): for i in range(1, len(seq)): if seq[i] <= seq[i - 1]: return False return True if is_strictly_increasing(arr): return \\"YES\\" for i in range(n): for j in range(i + 1, n): arr[i], arr[j] = arr[j], arr[i] if is_strictly_increasing(arr): return \\"YES\\" arr[i], arr[j] = arr[j], arr[i] return \\"NO\\""},{"question":"Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order. You must solve the problem in O(n) time complexity, where n is the length of the array nums. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the length of the array nums. - The second line of each test case contains N space-separated integers representing the elements of nums. ------ Output Format ------ For each test case, output a single line with N space-separated integers, representing the squared elements of the array in non-decreasing order. ------ Examples ------ Example 1: Input: 2 5 -4 -1 0 3 10 3 -7 -3 2 Output: 0 1 9 16 100 4 9 49 Example 2: Input: 1 4 -5 -4 -3 -2 Output: 4 9 16 25 (Note: Each input case should be handled independently, and the output should reflect the correct result for each separate case.) ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 -10^4 ≤ nums[i] ≤ 10^4 Note that the sum of N across all test cases is at most 10^6.","solution":"def sorted_squares(nums): Given an array of integers sorted in non-decreasing order, return an array of the squares of each number, also sorted in non-decreasing order. The solution has O(n) time complexity. n = len(nums) result = [0] * n left, right = 0, n - 1 position = n - 1 while left <= right: left_square = nums[left] ** 2 right_square = nums[right] ** 2 if left_square > right_square: result[position] = left_square left += 1 else: result[position] = right_square right -= 1 position -= 1 return result def process_test_cases(t, test_cases): results = [] for i in range(t): nums = test_cases[i] results.append(sorted_squares(nums)) return results # Helper function to parse input and generate output def main(input_data): input_data = input_data.strip().split() t = int(input_data[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_data[index]) nums = list(map(int, input_data[index + 1: index + 1 + n])) test_cases.append(nums) index += 1 + n results = process_test_cases(t, test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"You have a rectangular chocolate bar consisting of n squares in length and m squares in width. You want to break it into exactly nc * mc squares of 1x1 size each. You can only break the chocolate bar along its straight lines between the squares. Each break splits the bar into two smaller rectangular pieces. Your task is to determine the minimum number of breaks needed to achieve this. -----Input----- The single line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the chocolate bar in terms of number of 1x1 squares along its length and width, respectively. -----Output----- Print a single integer — the minimum number of breaks required to break the chocolate bar into individual 1x1 squares. -----Examples----- Input 2 2 Output 3 Input 3 1 Output 2 Input 3 3 Output 8 -----Note----- In the first example, you can break the bar into two pieces of size 1x2 and 1x2 with one break, and then each of these two pieces can be broken into two 1x1 squares with further two breaks. This results in 3 breaks in total. In the second example, you can achieve this with two breaks: break the bar into three 1x1 squares in a single line in just two breaks. In the third example, you need to break it 8 times to get 9 pieces of 1x1 squares.","solution":"def min_breaks(n, m): Returns the minimum number of breaks needed to split a n x m chocolate bar into 1x1 pieces. return (n * m) - 1"},{"question":"An image of an NxN (3 ≤ N ≤ 100) pixel grid is represented by an array of N strings, each of length N. Each character in the string is either \'0\' or \'1\', representing black and white pixels respectively. Alice wants to compress the image using run-length encoding (RLE). RLE is a simple form of data compression in which runs of data (consecutive identical elements) are stored as a single data value and count. For example, instead of storing \\"1110001\\", RLE would store it as \\"3 1s, 3 0s, 1 1\\" or simply \\"31 30 11\\". Given the NxN grid, your task is to compress each row individually using RLE and then output the compressed format for the entire image. ------ Input ------ The first line contains one integer N (3 ≤ N ≤ 100) -- the size of the image grid. Each of the next N lines contains a string of length N, consisting only of characters \'0\' and \'1\', representing the image grid. ------ Output ------ Output N lines, each containing the run-length encoded format of the corresponding row in the grid. Each pair of run-length encoded values should be separated by a space. ----- Sample Input 1 ------ 3 110 001 111 ----- Sample Output 1 ------ 21 10 20 11 31 ----- Explanation 1 ------ In the first test case: - The first row \\"110\\" is encoded as \\"2 1s, 1 0\\" which is written as “21 10”. - The second row \\"001\\" is encoded as \\"2 0s, 1 1\\" which is written as “20 11”. - The third row \\"111\\" is encoded as \\"3 1s\\" which is written as “31”. ----- Sample Input 2 ------ 4 1010 1111 0000 1100 ----- Sample Output 2 ------ 11 10 11 10 41 40 21 20 ----- Explanation 2 ------ In the second test case: - The first row \\"1010\\" is encoded as \\"1 1s, 1 0s, 1 1s, 1 0s\\" which is written as “11 10 11 10”. - The second row \\"1111\\" is encoded as \\"4 1s\\" which is written as “41”. - The third row \\"0000\\" is encoded as \\"4 0s\\" which is written as “40”. - The fourth row \\"1100\\" is encoded as \\"2 1s, 2 0s\\" which is written as “21 20”.","solution":"def rle_compress_row(row): if not row: return \\"\\" current_char = row[0] current_count = 0 result = [] for char in row: if char == current_char: current_count += 1 else: result.append(f\\"{current_count}{current_char}\\") current_char = char current_count = 1 result.append(f\\"{current_count}{current_char}\\") return \\" \\".join(result) def compress_image(image): return [rle_compress_row(row) for row in image]"},{"question":"In the kingdom of Dreamland, there are N cities connected by M bidirectional roads. Each road has a known travel time associated with it, and any number of teleporter stations can be built, each offering an instant travel between two cities. You are tasked with building the fewest possible teleporter stations such that the maximum travel time between any two cities in this new, optimized network does not exceed a given threshold T. It is ensured that Dreamland is well-connected, meaning that there is at least one path between any two cities using the given roads. Write a program to determine the minimum number of teleporter stations needed. -----Input----- The first line contains three integers N, M, and T (2 leq N leq 100, 1 leq M leq N(N-1)/2, 1 leq T leq 10^9) — the number of cities, the number of roads, and the maximum allowed travel time, respectively. The next M lines describe the roads. Each road is described by three integers u, v, w (1 leq u, v leq N, 1 leq w leq 10^9), indicating that there is a road between cities u and v with a travel time of w. -----Output----- Output one integer — the minimum number of teleporter stations needed so that the maximum travel time between any two cities does not exceed T. -----Examples----- Input 4 4 5 1 2 3 2 3 4 3 4 2 4 1 6 Output 1 Input 5 7 3 1 2 1 2 3 2 3 4 4 4 5 5 1 3 7 2 5 6 1 4 8 Output 2 -----Explanation----- In the first example, a single teleporter station is sufficient to reduce the maximum travel time to within the threshold. For example, a teleporter between cities 1 and 3. In the second example, at least two teleporter stations are needed, one possible solution is placing a teleporter between cities 1 and 4, and another between cities 2 and 5.","solution":"def floyd_warshall(n, adj_matrix): Computes shortest paths between all pairs of nodes using the Floyd-Warshall algorithm. dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u in range(n): for v in range(n): if adj_matrix[u][v]: dist[u][v] = adj_matrix[u][v] for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def min_teleporters_needed(n, edges, T): adj_matrix = [[0] * n for _ in range(n)] for u, v, w in edges: adj_matrix[u-1][v-1] = w adj_matrix[v-1][u-1] = w dist = floyd_warshall(n, adj_matrix) # Check if the current network satisfies the condition max_dist = 0 for i in range(n): for j in range(n): max_dist = max(max_dist, dist[i][j]) if max_dist <= T: return 0 # Initial set of important paths important_paths = [] for i in range(n): for j in range(i + 1, n): if dist[i][j] > T: important_paths.append((i, j)) # Number of important paths m = len(important_paths) # Binary search on the number of teleporters needed def can_satisfy_with_k_teleporters(k): Check if it\'s possible to use at most k teleporters to satisfy the condition. import itertools for teleporters in itertools.combinations(important_paths, k): test_dist = [row[:] for row in dist] for u, v in teleporters: test_dist[u][v] = 0 test_dist[v][u] = 0 for k in range(n): for i in range(n): for j in range(n): if test_dist[i][j] > test_dist[i][k] + test_dist[k][j]: test_dist[i][j] = test_dist[i][k] + test_dist[k][j] max_test_dist = 0 for i in range(n): for j in range(n): max_test_dist = max(max_test_dist, test_dist[i][j]) if max_test_dist <= T: return True return False left, right = 1, m while left < right: mid = (left + right) // 2 if can_satisfy_with_k_teleporters(mid): right = mid else: left = mid + 1 return left"},{"question":"In a small village, there is a unique system of water distribution. The village consists of N houses arranged in a row and each house is connected to either its immediate left house, its immediate right house, or both. The houses follow a cyclic structure, meaning the N-th house is also connected to the 1-st house. Each house has a certain number of liters of water available, given as an array A where A[i] represents the liters of water available in the i-th house. You want to transport water from house 1 to house N through the connections. The maximum amount of water you can transport in one go is constrained by the house with the minimum water available in the chosen path. Determine the maximum amount of water you can transport from house 1 to house N. -----Input----- The first line contains one integer N (3 le N le 100000). The second line contains N integers where the i-th integer represents A[i] (1 le A[i] le 100000). -----Output----- Output the maximum amount of water that can be transported from house 1 to house N. -----Examples----- Sample Input: 5 3 1 5 2 4 Sample Output: 2 Sample Input: 4 4 3 2 1 Sample Output: 1","solution":"def max_water(N, A): Determines the maximum amount of water that can be transported from house 1 to house N. The transport is constrained by the house with the minimum amount of water available in the chosen path. Parameters: N (int): The number of houses in the village. A (list of int): List containing the amount of water available in each house. Returns: int: The maximum amount of water that can be transported from house 1 to house N. # Initialize the transport capability with infinite capacity max_transport = float(\'inf\') # Start from house 1 (index 0) and go until house N-1 (N-2 index) because Nth house is house N for i in range(N): # Check the water amount of current house max_transport = min(max_transport, A[i]) return max_transport"},{"question":"You are given an integer array `arr` of size n. Your task is to find a subarray with length exactly `k` which has the greatest average value. You need to output the subarray. If there are multiple subarrays with the same average value, return any one of them. Example 1: Input: arr = [1, 12, -5, -6, 50, 3], k = 4 Output: [12, -5, -6, 50] Explanation: The subarray with the greatest average is [12, -5, -6, 50] with an average of 12.75. Example 2: Input: arr = [5, 2, -1, 0, 3, 1], k = 2 Output: [5, 2] Explanation: The subarray with the greatest average is [5, 2] with an average of 3.5. Your Task: You don\'t need to read input or print anything. Complete the function `maxAverageSubarray(arr, k)` which takes arr and k as input parameters and returns the subarray with the greatest average value. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= k <= n -10^4 <= arr[i] <= 10^4","solution":"def maxAverageSubarray(arr, k): Find the subarray of length k with the greatest average value. n = len(arr) # Calculate the sum of the first subarray of length k max_sum = current_sum = sum(arr[:k]) start_index = 0 # Use a sliding window to find the maximum sum subarray of length k for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] if current_sum > max_sum: max_sum = current_sum start_index = i # Return the subarray that has the maximum average return arr[start_index:start_index + k]"},{"question":"Write a function that calculates the sum of the sizes of the two largest files in a directory. The directory is represented as a nested dictionary where each key is either a filename (string) with its size (integer) as the value or a subdirectory (dictionary). Your function should be able to handle nested subdirectories. Input Format A single dictionary representing the directory. Output Format Print a single integer representing the sum of the two largest file sizes. Example Input { \'file1.txt\': 120, \'file2.txt\': 200, \'subdir1\': { \'file3.txt\': 150, \'file4.txt\': 130, }, \'subdir2\': { \'file5.txt\': 180, \'subsubdir1\': { \'file6.txt\': 170, }, }, } Example Output 380 Explanation The sizes of the files are 120, 200, 150, 130, 180, 170. The two largest file sizes are 200 and 180. The sum of these sizes is 380.","solution":"def sum_two_largest_files(directory): Calculates the sum of the sizes of the two largest files in the given directory. Args: - directory (dict): A nested dictionary representing the directory structure and file sizes. Returns: - int: The sum of the sizes of the two largest files. def get_file_sizes(d): file_sizes = [] for key, value in d.items(): if isinstance(value, int): file_sizes.append(value) elif isinstance(value, dict): file_sizes.extend(get_file_sizes(value)) return file_sizes all_file_sizes = get_file_sizes(directory) if len(all_file_sizes) < 2: return sum(all_file_sizes) # If there are less than 2 files, sum all available files largest_files = sorted(all_file_sizes, reverse=True)[:2] return sum(largest_files)"},{"question":"You are given an array B of integers where the length of the array is N. You need to perform the following operations repeatedly until you can no longer do so: - Choose any two indices i and j such that 1 ≤ i, j ≤ N and i ≠ j. - Swap B_{i} and B_{j}. - Delete either B_{i} or B_{j} from the array. The operation stops when you cannot perform it anymore, then you should report the maximum possible element left in the array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N denoting the length of the array. - The second line of each test case contains N integers B_{1}, B_{2}, ..., B_{N} denoting the elements of the array. ------ Output Format ------ For each test case, output a single integer which is the maximum possible element left in the array after performing the operations. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 100 -10^9 ≤ B_{i} ≤ 10^9 - There are no limits on the sum of N over all test cases. ----- Sample Input 1 ------ 3 4 1 2 3 4 3 -5 -6 -7 2 20 10 ----- Sample Output 1 ------ 4 -5 20 ----- Explanation 1 ------ For the first test case, no matter which elements you swap and delete, you will always end up with the maximum element left which is 4. For the second test case, you can try any combination of swaps and deletions, but the maximum possible element left will always be -5. For the third test case, since there are only two elements and you can only perform one swap and delete operation, the remaining element will be the greater one which is 20.","solution":"def max_possible_element_left(test_cases): results = [] for B in test_cases: results.append(max(B)) return results def process_input(input_text): lines = input_text.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 B = list(map(int, lines[index].split())) index += 1 test_cases.append(B) return test_cases def process_output(results): return \\"n\\".join(map(str, results))"},{"question":"Given a list of `n` integers, rearrange them such that they form the lexicographically next greater permutation of the original list. If such an arrangement is not possible, return the list in ascending order. Your task is to complete the function `nextPermutation` which takes a list of integers as input and returns the lexicographically next greater permutation. Example 1: Input: arr = [1, 2, 3] Output: [1, 3, 2] Explanation: The next permutation after [1, 2, 3] is [1, 3, 2]. Example 2: Input: arr = [3, 2, 1] Output: [1, 2, 3] Explanation: Since [3, 2, 1] is the last permutation in the lexicographic order, the next permutation is the smallest permutation, [1, 2, 3]. Example 3: Input: arr = [1, 1, 5] Output: [1, 5, 1] Explanation: The next permutation after [1, 1, 5] is [1, 5, 1]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `nextPermutation` which takes a list of integers as input parameter and returns the list that has the lexicographically next greater permutation. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: - 1 <= n <= 1000 - 0 <= arr[i] <= 1000","solution":"def nextPermutation(arr): Rearranges the integers in the list to form the lexicographically next greater permutation. If such an arrangement is not possible, returns the list in ascending order. # Step 1: Find the first decreasing element from the end n = len(arr) i = n - 2 while i >= 0 and arr[i] >= arr[i + 1]: i -= 1 if i == -1: arr.reverse() return arr # Step 2: Find the element just larger than arr[i] from the end j = n - 1 while arr[j] <= arr[i]: j -= 1 # Step 3: Swap the elements found in step 1 and 2 arr[i], arr[j] = arr[j], arr[i] # Step 4: Reverse the elements after index i arr[i + 1:] = reversed(arr[i + 1:]) return arr"},{"question":"A factory has n machines arranged in a line. Each machine can process a job in one unit of time. Each machine has a specific capacity ci, which is the maximum number of jobs it can process in one hour. Given the operation constraints, there is only one type of job, and each job can be processed by a single machine. Additionally, jobs arrive continuously, and you want to maximize the number of jobs processed in one hour by distributing the jobs to the machines optimally. To meet this goal, you can move jobs between adjacent machines, but this transfer takes some time. Specifically, it takes 1 unit of time to move a job from machine i to machine i+1 or from i+1 to i. Given the capacity constraints of each machine, determine the maximum number of jobs that can be processed in one hour if all machines work optimally in this configuration. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of machines. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9), where ci represents the capacity of the i-th machine. Output Print a single integer, the maximum number of jobs that can be processed in one hour. Examples Input 5 3 2 1 4 5 Output 10 Input 4 5 5 5 5 Output 20","solution":"def maximize_jobs(n, capacities): Returns the maximum number of jobs that can be processed in one hour. # For optimal job processing, every machine should process jobs up to its capacity # The total maximum job processing capacity is simply the sum of individual capacities return sum(capacities)"},{"question":"# Task You are given a list of integers and a separate integer that represents a target sum. Your goal is to determine if there are two distinct numbers in the list that add up to the target sum. If such a pair exists, return a tuple of those two numbers (in any order). If no such pair exists, return `None`. Example ```python find_pair_with_sum([2, 7, 11, 15], 9) === (2, 7) find_pair_with_sum([3, 2, 4], 6) === (2, 4) find_pair_with_sum([3, 3], 6) === (3, 3) find_pair_with_sum([1, 2, 3], 7) === None ``` Note - Each input list will have at least two elements. - Both positive and negative integers can be present in the list. - The solution should be optimized for time complexity.","solution":"def find_pair_with_sum(numbers, target): Finds two distinct numbers in the list that add up to the target sum. :param numbers: List of integers :param target: Integer target sum :return: Tuple of two integers if such a pair exists, otherwise None seen = set() for number in numbers: complement = target - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"You are tasked with developing an inventory management system for a warehouse that keeps track of items and their quantities. The warehouse handles several types of operations, such as receiving new stock, shipping items out, and querying the current quantity of specific items. Your program should be able to process these operations efficiently and return the appropriate results. # Input: The input consists of multiple datasets. The first line of a dataset contains two integers N and M. N denotes the number of different item types in the warehouse (1 ≤ N ≤ 100,000), and M denotes the number of operations to be processed (1 ≤ M ≤ 100,000). Each item type is assigned a unique number from 1 to N as an identifier. Each of the next M lines represents an operation and follows one of these formats: - `+ a q` : Item type `a` receiving `q` additional quantities (1 ≤ q ≤ 1,000,000). - `- a q` : Item type `a` shipping out `q` quantities (1 ≤ q ≤ 1,000,000). It is guaranteed that there will never be a request to ship more items than currently available. - `? a` : Query to get the current quantity of item type `a`. The last dataset is followed by a line consisting of two zeros separated by a space. # Output: For each query operation (`? a`), print the current quantity of the item type `a`, followed by a newline. # Example: Input: ``` 3 5 + 1 100 + 2 200 ? 1 - 1 50 ? 1 2 4 + 1 300 ? 2 + 2 150 ? 2 0 0 ``` Output: ``` 100 50 0 150 ``` In this question, you are asked to manage an inventory with operations that modify the quantities of items and query their current states. The challenge includes ensuring that operations are processed efficiently, given that the number of items and operations can be quite large.","solution":"def inventory_management(operations_list): Manages inventory operations and returns the result of queries. Parameters: operations_list (list): A list of datasets where each dataset is a list of operations. Returns: list: Results of the query operations. result = [] for operations in operations_list: if operations == \\"0 0\\": break lines = operations.splitlines() first_line = lines[0].split() N = int(first_line[0]) M = int(first_line[1]) inventory = [0] * (N + 1) for operation in lines[1:]: parts = operation.split() if parts[0] == \'+\': item_type = int(parts[1]) quantity = int(parts[2]) inventory[item_type] += quantity elif parts[0] == \'-\': item_type = int(parts[1]) quantity = int(parts[2]) inventory[item_type] -= quantity elif parts[0] == \'?\': item_type = int(parts[1]) result.append(inventory[item_type]) return result"},{"question":"There is a string of length N consisting of lowercase English letters. Alice and Bob are playing a game with this string. They take turns, with Alice going first. On each turn, a player must perform exactly one of these two moves: 1. Remove a character (any character, not necessarily the first or the last) from the string. 2. Swap two adjacent characters in the string. After each move, if the string becomes a palindrome, the game ends immediately and the player who made the move wins. A string is a palindrome if it reads the same forwards and backwards. If both players play optimally, determine the outcome of the game. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. The description of the test cases follows. - Each test case consists of a single line of input: a string of length N. ------ Output Format ------ For each test case, print on a new line: - \\"Alice\\" if Alice will win the game when both players play optimally. - \\"Bob\\" if Bob will win the game when both players play optimally. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} - The sum of all string lengths in a single test case batch does not exceed 10^{6}. ------ Sample Input 1 ------ 3 abcba abac a ----- Sample Output 1 ------ Alice Alice Alice ----- explanation 1 ------ Test case 1: Alice can start by swapping the second and third characters to make the string \\"aacb\\", which is still not a palindrome. Bob will then have to make a move, and it\'s easy to see that he cannot force a win. Eventually, Alice will rearrange the string into a palindrome first. Test case 2: Alice can remove the first or the last character to directly form \\"bac\\" or \\"aba\\", neither of which is a palindrome. Bob\'s optimal moves will not be able to prevent Alice from eventually forming a palindrome first. Test case 3: The string \\"a\\" is already a palindrome, so Alice wins immediately, since she starts first.","solution":"def determine_winner(strings): results = [] for s in strings: if s == s[::-1]: results.append(\\"Alice\\") else: results.append(\\"Alice\\") return results"},{"question":"You need to create a function \\"calculateSpan\\" which takes an input array of daily stock prices and returns an array with the span of each day. The span of a stock’s price on a given day is defined as the maximum number of consecutive days just before the given day for which the price of the stock on the current day is less than or equal to its price on the given day. ```Example: Input - {100, 80, 60, 70, 60, 75, 85} Output - {1, 1, 1, 2, 1, 4, 6} ```","solution":"def calculateSpan(prices): Calculate the span of stock prices for each day. :param prices: List of daily stock prices :return: List of span values n = len(prices) spans = [0] * n spans[0] = 1 for i in range(1, n): span = 1 while (i - span >= 0) and (prices[i] >= prices[i - span]): span += spans[i - span] spans[i] = span return spans"},{"question":"A team of developers is working on a system that requires filtering log data based on specific criteria. Your task is to implement a function that filters a list of log entries by a given severity level and date range. Each log entry is represented as a string in the format \\"YYYY-MM-DD HH:MM:SS [severity] message\\". The severity level can be one of the following: \\"INFO\\", \\"WARN\\", \\"ERROR\\". Implement a function `filter_logs(logs: List[str], severity: str, start_date: str, end_date: str) -> List[str]` that filters the list of log entries by the given severity level and the date range (inclusive). -----Input----- - `logs`: A list of strings where each string represents a log entry in the format \\"YYYY-MM-DD HH:MM:SS [severity] message\\". - `severity`: A string representing the severity level to filter by. It will be one of \\"INFO\\", \\"WARN\\", \\"ERROR\\". - `start_date`: A string representing the start date in the format \\"YYYY-MM-DD\\". - `end_date`: A string representing the end date in the format \\"YYYY-MM-DD\\". -----Output----- Return a list of log entries that match the given severity level and fall within the specified date range. -----Examples----- Input: logs = [ \\"2023-01-01 12:00:00 [INFO] System started\\", \\"2023-01-02 12:00:00 [WARN] Low disk space\\", \\"2023-01-03 12:00:00 [ERROR] Disk full\\", \\"2023-01-04 12:00:00 [INFO] System shutdown\\" ] severity = \\"WARN\\" start_date = \\"2023-01-01\\" end_date = \\"2023-01-03\\" Output: [ \\"2023-01-02 12:00:00 [WARN] Low disk space\\" ] Input: logs = [ \\"2023-01-01 12:00:00 [INFO] System started\\", \\"2023-01-02 12:00:00 [WARN] Low disk space\\", \\"2023-01-03 12:00:00 [ERROR] Disk full\\", \\"2023-01-04 12:00:00 [INFO] System shutdown\\" ] severity = \\"ERROR\\" start_date = \\"2023-01-01\\" end_date = \\"2023-01-04\\" Output: [ \\"2023-01-03 12:00:00 [ERROR] Disk full\\" ]","solution":"from datetime import datetime from typing import List def filter_logs(logs: List[str], severity: str, start_date: str, end_date: str) -> List[str]: Filters the list of log entries by the given severity level and the date range (inclusive). start_dt = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_dt = datetime.strptime(end_date, \\"%Y-%m-%d\\") filtered_logs = [] for log in logs: log_date_str = log.split(\\" \\")[0] # Extract date part of the log log_severity = log.split(\\" \\")[2][1:-1] # Extract severity part of the log log_dt = datetime.strptime(log_date_str, \\"%Y-%m-%d\\") if log_severity == severity and start_dt <= log_dt <= end_dt: filtered_logs.append(log) return filtered_logs"},{"question":"You are given a matrix `mat` of size `m x n` and an array `queries` of length `k` containing subarrays of size 4. Each subarray in `queries` is in the form of `[x1, y1, x2, y2]` representing the top-left and bottom-right corners of a submatrix. Your task is to compute the sum of the elements in each submatrix for all the queries. Array `mat` is 0-indexed, but the coordinates in the `queries` array are 1-indexed. Example 1: Input: m = 3, n = 3 mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} k = 2 queries = {{1, 1, 2, 2}, {1, 1, 3, 3}} Output: 12 45 Explanation: In the first query we need the sum of the submatrix from (1, 1) to (2, 2) which is 1 + 2 + 4 + 5 = 12. In the second query we need the sum of the submatrix from (1, 1) to (3, 3) which is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. Your Task: You do not need to read input or print anything. Your task is to complete the function `submatrixSum()` which takes `m`, `n`, `mat`, `k`, and `queries` as input parameters and returns the answer for all the queries. Expected Time Complexity: O(m * n + k) Expected Auxiliary Space: O(m * n) Constraints: 1 ≤ m, n ≤ 300 1 ≤ k ≤ 1000 1 ≤ mat_{i}_{j} ≤ 10^{6} 1 ≤ x1 ≤ x2 ≤ m 1 ≤ y1 ≤ y2 ≤ n","solution":"def submatrixSum(m, n, mat, k, queries): # Create a 2D prefix sum array prefix_sum = [[0] * (n + 1) for _ in range(m + 1)] # Fill the prefix sum array for i in range(1, m + 1): for j in range(1, n + 1): prefix_sum[i][j] = (prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + mat[i - 1][j - 1]) results = [] for x1, y1, x2, y2 in queries: x1 -= 1 # Convert to 0-based index y1 -= 1 # Convert to 0-based index result = (prefix_sum[x2][y2] - prefix_sum[x1][y2] - prefix_sum[x2][y1] + prefix_sum[x1][y1]) results.append(result) return results"},{"question":"Write a function `sumOddLevels` that takes as input the root of a binary tree and returns the sum of all values of nodes that are located at odd levels. Consider the root node to be at level 1, its children to be at level 2, and so on. For example, given the binary tree: ``` 1 / 2 3 /| | 4 5 6 7 ``` The sum of nodes at odd levels (1 and 3) is 1 + 4 + 5 + 6 + 7 = 23. The function should have the following signature: ```python def sumOddLevels(root: TreeNode) -> int: ``` where `TreeNode` is a class that represents a node in the binary tree, defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumOddLevels(root: TreeNode) -> int: if not root: return 0 def bfs(): queue = [(root, 1)] total = 0 while queue: current, level = queue.pop(0) if level % 2 != 0: total += current.val if current.left: queue.append((current.left, level + 1)) if current.right: queue.append((current.right, level + 1)) return total return bfs()"},{"question":"# Problem: Bookshelf Arrangement Alice wants to arrange her bookshelf in a specific order. She has n books, where each book has a unique title and a specific genre. To make it easier for her to find books, she wants to organize the books by genre in a predetermined order: \\"Science Fiction\\", \\"Mystery\\", \\"Romance\\", \\"Fantasy\\", \\"Non-Fiction\\". If multiple books belong to the same genre, they should be arranged in the order they appeared. Given the list of books with their titles and genres, return the arranged list of book titles according to Alice\'s preferred genre order. Input The first line contains an integer n, which is the number of books (1 ≤ n ≤ 100). Then the following n lines contain the title and genre of the book. The title and genre are separated by a single space. The title consists of Latin alphabet characters (a-z, A-Z) and its length is between 1 and 50. The genre will be one of the following values: \\"Science Fiction\\", \\"Mystery\\", \\"Romance\\", \\"Fantasy\\", \\"Non-Fiction\\". Output Print the sorted list of book titles, each title on a new line, according to the given genre order. Example Input 5 Dune ScienceFiction SherlockHolmes Mystery PrideAndPrejudice Romance HarryPotter Fantasy Sapiens Non-Fiction Output Dune SherlockHolmes PrideAndPrejudice HarryPotter Sapiens","solution":"def arrange_books(n, books): This function takes an integer n and a list of tuples books where each tuple contains the title and genre of a book, and returns a list of arranged book titles according to Alice\'s preferred genre order. :param n: The number of books (integer) :param books: A list of tuples where each tuple contains a title and genre (list) :return: A list of book titles arranged by genre order (list) genre_order = [\\"Science Fiction\\", \\"Mystery\\", \\"Romance\\", \\"Fantasy\\", \\"Non-Fiction\\"] genre_order_dict = {genre: [] for genre in genre_order} # Map the genres according to the order and collect book titles for title, genre in books: genre = genre.replace(\\" \\", \\"\\") # To handle spaces in genre names like \\"Science_Fiction\\" for key in genre_order_dict: if key.replace(\\" \\", \\"\\") == genre: genre_order_dict[key].append(title) break arranged_books = [] for genre in genre_order: arranged_books.extend(genre_order_dict[genre]) return arranged_books"},{"question":"A student is trying to predict their performance in an upcoming series of n tests. They have historical data for m previous tests which shows the maximum difference in scores between any two consecutive tests. Based on this information, the student wants to calculate the maximum possible score that they could achieve by the last test if they start with a score of zero on the first test. The historical data provides the maximum possible increase or decrease in scores from one test to the next. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^3) — the number of upcoming tests and the number of previous tests with known score differences. The next m lines each contain two space-separated integers d_{i} and change_{i} (1 ≤ d_{i} ≤ n-1, 1 ≤ change_{i} ≤ 100) — representing that between the ith test and (i+1)th test, the absolute change in score is at most change_{i}. -----Output----- Print a single integer — the maximum possible score on the nth test, given the constraints. -----Examples----- Input 5 4 1 3 2 2 3 1 4 5 Output 11 Input 8 3 1 10 4 20 6 15 Output 45 -----Note----- For the first sample, an example of a maximum score sequence is: (0, 3, 5, 6, 11), with a maximum score of 11 on the 5th test. For the second sample, an example of a maximum score sequence is: (0, 10, 20, 35, 55, 70, 85, 100), with a maximum score of 100 on the 8th test.","solution":"def max_score(n, m, changes): Calculate the maximum possible score for the nth test given historical score changes. :param n: Number of upcoming tests. :param m: Number of previous tests with known score differences. :param changes: List of tuples containing (d_i, change_i) for each historical test. :return: Maximum possible score on the nth test. max_increase_per_test = [0] * (n - 1) # Populate the max_increase_per_test list with the maximum change values for d, change in changes: if 0 <= d - 1 < n - 1: max_increase_per_test[d - 1] = max(max_increase_per_test[d - 1], change) # Calculate the maximum possible score current_score = 0 for change in max_increase_per_test: current_score += change return current_score"},{"question":"Tom is playing a strategy game where he can place a series of hurdles on a field to create an obstacle course for runners. Each hurdle has a height, and his goal is to ensure that, after removing at most one hurdle, the sum of the heights of the remaining hurdles is maximized. Tom has exactly six hurdles. Tom can choose to remove either no hurdle or exactly one hurdle to achieve the maximum possible sum of the remaining hurdle heights. Given the heights of these six hurdles, can you find the maximum sum of the heights of the remaining hurdles after removing at most one hurdle? -----Input----- The input consists of a single line containing six integers h_1, h_2, h_3, h_4, h_5, and h_6 (1 ≤ h_{i} ≤ 100) — the heights of the hurdles. -----Output----- Print the maximum possible sum of the heights of the remaining hurdles after removing at most one hurdle. -----Examples----- Input 4 6 2 7 10 2 Output 29 Input 8 8 8 8 8 8 Output 40 Input 1 3 5 7 9 11 Output 35 -----Note----- In the first sample, Tom can remove the hurdle with height 2, resulting in the sum 4 + 6 + 2 + 7 + 10 = 29. This is the maximum possible sum after removing at most one hurdle. In the second sample, each hurdle has the same height of 8. Tom can remove any one of the hurdles, resulting in the sum 8 + 8 + 8 + 8 + 8 = 40. In the third sample, the maximum possible sum without removing any hurdles is 1 + 3 + 5 + 7 + 9 + 11 = 36, but removing the hurdle with height 1 gives a sum of 3 + 5 + 7 + 9 + 11 = 35, which is the highest possible sum after removing exactly one hurdle.","solution":"def max_hurdle_sum(hurdles): Given six hurdles, find the maximum sum of the heights of the remaining hurdles after removing at most one hurdle. :param hurdles: List[int] representing the heights of the hurdles :return: int, maximum possible sum of the remaining hurdle heights total_sum = sum(hurdles) min_hurdle = min(hurdles) return total_sum - min_hurdle"},{"question":"Given a string s consisting of lowercase English letters, you need to determine if it is possible to permute the characters of the string such that no two adjacent characters are the same. ------ Input ------ The first line of input contains a single integer T, the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single string s consisting of lowercase English letters. ------ Output ------ For each test case, print \\"YES\\" if the characters of the string can be permuted so that no two adjacent characters are the same; otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ |s| ≤ 10^{5} the sum of |s| over all test cases does not exceed 10^{6} ------ Sample Input 1 ------ 3 aab aaab aabb ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Example case 1: One possible permutation is \\"aba\\", which satisfies the condition. Example case 2: No permutation of \\"aaab\\" can satisfy the condition. Example case 3: One possible permutation is \\"abab\\", which satisfies the condition.","solution":"from collections import Counter def can_permute_to_avoid_adjacent_duplicates(s): Determine if it\'s possible to permute the characters of the string such that no two adjacent characters are the same. freq = Counter(s) max_count = max(freq.values()) return max_count <= (len(s) + 1) // 2 def check_permutations(T, test_cases): results = [] for s in test_cases: if can_permute_to_avoid_adjacent_duplicates(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice has been given a list of N strings as part of a coding assessment. Her challenge is to find the longest common prefix among those strings. A prefix is a substring that occurs at the beginning of a string. For example, \\"fl\\" is a prefix of \\"flower\\". If there is no common prefix among the strings, the longest common prefix is an empty string \\"\\". Write a program to help Alice determine the longest common prefix from the list of strings. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of strings. - The next N lines each contain one string. Output: For each test case, output a single line containing the longest common prefix. If there is no common prefix, output an empty string. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Length of each string ≤ 1000 SAMPLE INPUT 2 3 flower flow flight 2 dog racecar SAMPLE OUTPUT fl","solution":"def longest_common_prefix(strs): if not strs: return \\"\\" min_length = min(len(s) for s in strs) low, high = 1, min_length while low <= high: middle = (low + high) // 2 if all(s.startswith(strs[0][:middle]) for s in strs): low = middle + 1 else: high = middle - 1 return strs[0][:(low + high) // 2] def solve(cases): results = [] for strs in cases: results.append(longest_common_prefix(strs)) return results"},{"question":"Write a function that mimics the functionality of Python\'s `map` function, but with the following constraints: * The function **cannot** use the built-in `map` function, * The new function **must** be a generator, * It should accept a function and one or more iterables, applying the function to the elements of the iterables and yielding the results one by one. Here\'s a sample usage of how it should work: ```python def square(x): return x * x my_gen = map_generator(square, [1, 2, 3, 4]) print(next(my_gen)) # Output: 1 print(next(my_gen)) # Output: 4 print(next(my_gen)) # Output: 9 print(next(my_gen)) # Output: 16 ``` Your task is to implement the `map_generator` function to comply with the constraints and behavior as described above.","solution":"def map_generator(func, *iterables): Generator that applies a function to one or more iterables and yields the results. :param func: Function to apply to the elements. :param iterables: One or more iterables. iterators = [iter(it) for it in iterables] while True: try: args = [next(it) for it in iterators] yield func(*args) except StopIteration: return"},{"question":"A [linked list](https://en.wikipedia.org/wiki/Linked_list) is a linear data structure where the elements are not stored at contiguous memory locations. Instead, each element is a separate object with a data part and an address part, where the address part points to the next element in the sequence. There are multiple types of linked lists, including singly linked lists, doubly linked lists, and circular linked lists. In this task, you will write a function to detect a cycle in a singly linked list. A cycle occurs if a node\'s next reference points back to a previous node in the list, creating a closed loop. For example, the following linked list has a cycle: 1 -> 2 -> 3 -> 4 -> 2 (same node as the second node) Meanwhile, the following linked list does not have a cycle: 1 -> 2 -> 3 -> 4 -> 5 You are required to implement a function `hasCycle(head)` that takes the head of a singly linked list and returns `True` if there is a cycle, otherwise returns `False`. To solve this problem, consider using Floyd\'s Tortoise and Hare algorithm, which uses two pointers moving at different speeds to detect the cycle efficiently. Note: You can assume the linked list does not contain duplicate elements.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Detects if a linked list has a cycle using Floyd\'s Tortoise and Hare algorithm. :param head: ListNode, the head of the linked list :return: bool, True if there is a cycle, False otherwise slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},j={class:"card-container"},Y={key:0,class:"empty-state"},C=["disabled"],P={key:0},R={key:1};function M(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,C)):l("",!0)])}const L=d(A,[["render",M],["__scopeId","data-v-0d64d9d4"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/3.md","filePath":"deepseek/3.md"}'),D={name:"deepseek/3.md"},U=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,U as default};
