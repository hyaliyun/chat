import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-3a6a4599"]]),S=JSON.parse('[{"question":"Given an array of integers representing the heights of hills on a hiking trail, you need to find the minimum stamina required to complete the hike without the stamina dropping below 1 at any point. Each element in the array represents the change in height between two consecutive hills. Positive numbers indicate an uphill climb (which decreases stamina), and negative numbers indicate a downhill descent (which increases stamina). The stamina decreases by the height difference when going uphill and increases by the height difference when going downhill. Example 1: Input N = 5 H[] = {2, -1, 4, -3, 2} Output 6 Explanation With an initial stamina of 6, the hiker\'s stamina will be as follows: - Start with 6 - 6 - 2 (first uphill) = 4 - 4 + 1 (first downhill) = 5 - 5 - 4 (second uphill) = 1 - 1 + 3 (second downhill) = 4 - 4 - 2 (third uphill) = 2 The stamina never drops below 1. Example 2: Input N = 4 H[] = {1, -2, 1, -1} Output 2 Explanation With an initial stamina of 2, the hiker\'s stamina will be as follows: - Start with 2 - 2 - 1 (first uphill) = 1 - 1 + 2 (first downhill) = 3 - 3 - 1 (second uphill) = 2 - 2 + 1 (second downhill) = 3 The stamina never drops below 1. Your Task: You don\'t need to print anything, printing is done by the driver code itself. You need to complete the function minStamina() which takes the array H[] and its size N as inputs and returns the minimum initial stamina required to complete the hike. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^3 ≤ H[i] ≤ 10^3","solution":"def min_stamina(N, H): current_stamina = 1 minimum_stamina = 1 for change in H: current_stamina -= change if current_stamina < 1: minimum_stamina += (1 - current_stamina) current_stamina = 1 return minimum_stamina"},{"question":"You are given an array of integers and a list of queries. Each query consists of a starting index and an ending index. For each query, determine the sum of the integers within that range, inclusive. Input: First line contains two integers N and Q, where N is the number of integers in the array and Q is the number of queries. Second line contains N space-separated integers representing the array. Following Q lines each contain two integers L and R representing the starting and ending indices for the query (0-based indexing). Output: For each query, output the sum of the integers from index L to index R, inclusive. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 -10^4 ≤ Array[i] ≤ 10^4 0 ≤ L ≤ R < N Sample Input: 5 3 1 2 3 4 5 0 2 1 3 2 4 Sample Output: 6 9 12","solution":"def range_sum_queries(n, arr, queries): Returns a list of sums for each query. :param n: int - The number of integers in the array :param arr: list - The array of integers :param queries: list of tuples - Each tuple contains starting and ending indices (L, R) for the query :return: list - Sums for each query # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] # Calculate sum for each query results = [] for l, r in queries: results.append(prefix_sums[r + 1] - prefix_sums[l]) return results def parse_input(input_str): data = input_str.strip().split(\'n\') n, q = map(int, data[0].split()) arr = list(map(int, data[1].split())) queries = [] for i in range(2, 2 + q): l, r = map(int, data[i].split()) queries.append((l, r)) return n, arr, queries def solve(input_str): n, arr, queries = parse_input(input_str) results = range_sum_queries(n, arr, queries) return \'n\'.join(map(str, results))"},{"question":"A hiking trail is represented as a sequence of coordinates (x_1, y_1), (x_2, y_2), ..., (x_n, y_n). You need to determine whether this trail ever crosses itself. Crossing is defined as two line segments (x_i, y_i) to (x_{i+1}, y_{i+1}) and (x_j, y_j) to (x_{j+1}, y_{j+1}) having an intersection point, where j neq i and j neq i-1. -----Input----- The input consists of several lines. The first line contains a single integer n (2 leq n leq 1000), the number of coordinates. Each of the next n lines contains two space-separated integers, representing the coordinates x and y (-10000 leq x, y leq 10000). -----Output----- Print \\"Yes\\" if the trail crosses itself, otherwise print \\"No\\". -----Examples----- Sample Input 1: 4 1 1 2 3 3 1 1 2 Sample Output 1: Yes Sample Input 2: 5 0 0 1 1 2 2 1 3 0 2 Sample Output 2: No","solution":"def does_trail_cross(n, coordinates): def ccw(A, B, C): return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0]) def intersect(A, B, C, D): return ccw(A, C, D) != ccw(B, C, D) and ccw(A, B, C) != ccw(A, B, D) for i in range(n - 1): for j in range(i - 1): if intersect(coordinates[i], coordinates[i + 1], coordinates[j], coordinates[j + 1]): return \\"Yes\\" return \\"No\\" # Example Usage: # n = 4 # coordinates = [(1, 1), (2, 3), (3, 1), (1, 2)] # print(does_trail_cross(n, coordinates)) # Output: \\"Yes\\""},{"question":"Leila loves playing games that involve manipulating arrays. Recently, she came across an interesting problem, and now she is challenging you to solve it. Leila has an array of integers `a` of size `n`. She wants to make all the elements of the array equal. In one operation, she can choose two consecutive elements of the array and increase or decrease both of them by 1. Your task is to determine whether it is possible to make all the elements equal using the described operations, and if so, find the minimum number of operations required. A key observation here is that it is only possible if the difference between any two elements of the array is even. -----Input----- - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the size of the array. - The second line contains `n` integers `a[i]` (1 ≤ a[i] ≤ 1000) — the elements of the array. -----Output----- - If it is not possible to make all the elements of the array equal, print `-1`. - Otherwise, print a single integer representing the minimum number of operations required. -----Examples----- Input 3 4 6 8 Output 2 Input 4 3 7 5 9 Output 4 Input 3 1 2 3 Output -1","solution":"def min_operations_to_equalize(n, a): Returns the minimum number of operations required to make all elements of the array equal, or -1 if it is not possible to make all the elements equal. Parameters: n (int): Size of the array. a (list): The elements of the array. Returns: int: Minimum number of operations required or -1 if it is not possible. # Check if there are any two elements with difference not even initial_parity = a[0] % 2 for num in a: if num % 2 != initial_parity: return -1 # Calculate the number of operations required to make all elements equal to the median a_sorted = sorted(a) median = a_sorted[n // 2] operations = sum(abs(x - median) // 2 for x in a) return operations"},{"question":"A research expedition found a strange pattern in the distribution of rare minerals in a grid-like matrix. To secure the rare mineral veins, we need to find a specific path in the matrix from the top-left corner to the bottom-right corner. You can only move either right or down from a cell. Each cell in the matrix contains a certain number of minerals, and you need to collect the maximum amount of minerals possible on your path. Your task is to write a program to determine the maximum number of minerals that can be collected when traveling from the top-left corner to the bottom-right corner of the matrix. Input Format - The first line contains two integers, M and N, which are the dimensions of the matrix. - The next M lines contain N space-separated integers each, representing the number of minerals in each cell of the matrix. Output Format - A single integer representing the maximum number of minerals that can be collected on the path from the top-left corner to the bottom-right corner. Constraints 1 ≤ M, N ≤ 100 0 ≤ matrix[i][j] ≤ 100 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation: In the given sample, the path with the maximum minerals is: 1 → 3 → 5 → 2 → 1, which sums up to 12 minerals.","solution":"def max_minerals_collected(matrix): if not matrix: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[M-1][N-1] # Input: matrix in form of a list of lists # output: maximum number of minerals collected"},{"question":"Given two strings s1 and s2, determine the minimum number of operations required to convert s1 into s2. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character Example 1: Input: s1 = \\"kitten\\", s2 = \\"sitting\\" Output: 3 Explanation: The minimum operations required to convert \\"kitten\\" to \\"sitting\\" are: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end Example 2: Input: s1 = \\"flaw\\", s2 = \\"lawn\\" Output: 2 Explanation: The minimum operations required to convert \\"flaw\\" to \\"lawn\\" are: 1. Delete \'f\' 2. Insert \'n\' at the end Your Task: You don\'t need to read input or print anything. Complete the function editDistance() which takes the strings s1 and s2 as input parameters and returns the minimum number of operations required to convert s1 into s2. Expected Time Complexity: O(m*n) Expected Auxiliary Space: O(m*n) Constraints: 1 <= len(s1), len(s2) <= 100","solution":"def editDistance(s1, s2): Returns the minimum number of operations required to convert s1 into s2. Arguments: s1 : str : the first string s2 : str : the second string to which we need to convert s1 Returns: int : the minimum number of operations needed to convert s1 to s2 m = len(s1) n = len(s2) # Create a DP table to store results of subproblems dp = [[0 for j in range(n+1)] for i in range(m+1)] # Fill dp array using the bottom-up approach for i in range(m+1): for j in range(n+1): # If first string is empty, the only option is to insert all characters of the second string if i == 0: dp[i][j] = j # If second string is empty, the only option is to remove all characters of the first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last character and recur for the remaining substring elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Write a function called `balance_brackets` that takes a single string containing various types of brackets: round `()`, square `[]`, and curly `{}`. The function should return `True` if the brackets are properly balanced and `False` otherwise. Examples of properly balanced strings: - `\\"{[()]}\\"` - `\\"([]{})\\"` - `\\"{([])}{}[]\\"` Examples of improperly balanced strings: - `\\"{[(])}\\"` - `\\"([}{])\\"` - `\\"{\\"` Your task is to create the `balance_brackets` function that checks the balance of brackets in a given string. ```python def balance_brackets(s): # Your code here # Example usage print(balance_brackets(\\"{[()]}\\")) # True print(balance_brackets(\\"{[(])}\\")) # False ```","solution":"def balance_brackets(s): Checks if the brackets in the given string are balanced. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): # if it\'s an opening bracket stack.append(char) elif char in bracket_map.keys(): # if it\'s a closing bracket if stack == [] or bracket_map[char] != stack.pop(): return False else: continue # ignore non-bracket characters return stack == [] # True if balanced, False otherwise"},{"question":"Given an integer array `nums` and an integer `k`, you need to find the maximum sum of a subarray of size `k`. Implement the `MaximumSubarraySum` class with the following methods: - `MaximumSubarraySum(int[] nums, int k)` : Initializes the object with the given integer array `nums` and the integer `k`. - `int maxSum()` : Returns the maximum sum of a subarray with size `k`. **Example 1:** ``` python Input [\\"MaximumSubarraySum\\", \\"maxSum\\"] [[[1,2,3,4,5], 3], []] Output [null, 12] Explanation MaximumSubarraySum maxSubarraySum = new MaximumSubarraySum([1,2,3,4,5], 3); maxSubarraySum.maxSum(); // return 12 (subarray [3, 4, 5]) ``` **Example 2:** ``` python Input [\\"MaximumSubarraySum\\", \\"maxSum\\"] [[[1,1,1,1,1,1,1,1], 4], []] Output [null, 4] Explanation MaximumSubarraySum maxSubarraySum = new MaximumSubarraySum([1,1,1,1,1,1,1,1], 4); maxSubarraySum.maxSum(); // return 4 (subarray [1, 1, 1, 1]) ``` **Example 3:** ``` python Input [\\"MaximumSubarraySum\\", \\"maxSum\\"] [[[100,200,300,400], 2], []] Output [null, 700] Explanation MaximumSubarraySum maxSubarraySum = new MaximumSubarraySum([100,200,300,400], 2); maxSubarraySum.maxSum(); // return 700 (subarray [300, 400]) ``` **Constraints:** - `1 <= k <= nums.length <= 10^5` - `-10^4 <= nums[i] <= 10^4`","solution":"class MaximumSubarraySum: def __init__(self, nums, k): self.nums = nums self.k = k def maxSum(self): if not self.nums or self.k <= 0 or self.k > len(self.nums): return 0 max_sum = current_sum = sum(self.nums[:self.k]) for i in range(self.k, len(self.nums)): current_sum += self.nums[i] - self.nums[i - self.k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A researcher is collecting samples of a biochemical substance in two test tubes labeled X and Y. After a certain period, some of the substance in test tube X evaporates, and the same amount is transferred from test tube Y to test tube X to replenish the loss. The evaporation and transfer happens simultaneously. Given the initial amounts of the substance in each test tube and the amount that evaporates and transfers, determine the ending amounts of the substance in both test tubes. -----Constraints----- - All input values are integers. - 1 ≤ initial amount in X, initial amount in Y, evaporation amount ≤ 1000 - The evaporation amount will always be less than or equal to the initial amounts in both test tubes. -----Input----- Input is given from Standard Input in the following format: initial_X initial_Y evaporation_amount -----Output----- Print the final amounts in test tubes X and Y after evaporation and transfer, separated by a space. -----Example Input----- 500 300 100 -----Example Output----- 500 200 Explanation: Initially, test tube X has 500 units of the substance and test tube Y has 300 units. After 100 units evaporate from X and the same amount is transferred from Y to X, test tube X returns to 500 units and test tube Y ends with 200 units.","solution":"def final_amounts(initial_X, initial_Y, evaporation_amount): Returns the final amounts of the substance in test tubes X and Y after evaporation and transfer. Parameters: - initial_X (int): Initial amount of substance in test tube X. - initial_Y (int): Initial amount of substance in test tube Y. - evaporation_amount (int): Amount of substance that evaporates from test tube X and is transferred from test tube Y to X. Returns: - tuple: Final amounts of the substance in test tubes X and Y. final_X = initial_X - evaporation_amount + evaporation_amount final_Y = initial_Y - evaporation_amount return final_X, final_Y # Example usage: # print(final_amounts(500, 300, 100)) # Output: (500, 200)"},{"question":"You are given a rectangular field of size N x M, divided into cells. Each cell can have either a rock (\'R\'), a tree (\'T\'), or be empty (\'.\'). A rover starts at the top-left corner of the field (cell (1,1)) and moves to the bottom-right corner (cell (N, M)). The rover moves only to the right or down. The rover cannot move into a cell that has a tree (\'T\'), but it can collect rocks (\'R\') from cells it visits. Write a program to determine the maximum number of rocks the rover can collect on its path from the top-left corner to the bottom-right corner. -----Constraints:----- - 2 ≤ N, M ≤ 1000 -----Input Format:----- First line contains two integers N and M (the dimensions of the matrix). Next N lines contain M characters each, representing the field. -----Output Format:----- Print a single integer, the maximum number of rocks the rover can collect. Sample Input: 3 4 .R.. ..R. .T.. Sample Output: 2 Sample Input: 2 2 .R R. Sample Output: 1","solution":"def max_rocks_collected(N, M, field): # Create a matrix to store the maximum rocks collected so far dp = [[0] * M for _ in range(N)] # Initialize the first cell if field[0][0] == \'R\': dp[0][0] = 1 # Fill the first row for j in range(1, M): if field[0][j] == \'T\': dp[0][j] = -1 elif dp[0][j - 1] != -1: dp[0][j] = dp[0][j - 1] + (1 if field[0][j] == \'R\' else 0) # Fill the first column for i in range(1, N): if field[i][0] == \'T\': dp[i][0] = -1 elif dp[i - 1][0] != -1: dp[i][0] = dp[i - 1][0] + (1 if field[i][0] == \'R\' else 0) # Fill the rest of the dp matrix for i in range(1, N): for j in range(1, M): if field[i][j] == \'T\': dp[i][j] = -1 else: from_up = dp[i - 1][j] if dp[i - 1][j] != -1 else 0 from_left = dp[i][j - 1] if dp[i][j - 1] != -1 else 0 if from_up != 0 or from_left != 0: dp[i][j] = max(from_up, from_left) + (1 if field[i][j] == \'R\' else 0) # Return the maximum rocks collected when reaching the bottom-right corner return dp[N - 1][M - 1] if dp[N - 1][M - 1] != -1 else 0 # Reading input and calling the function to get the answer if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N, M = int(data[0]), int(data[1]) field = [] index = 2 for i in range(N): field.append(data[index]) index += 1 print(max_rocks_collected(N, M, field))"},{"question":"You are given a list of integers, and you need to determine if the sum of the digits of each integer in the list is an even or an odd number. Write a program that processes the list and outputs \\"Even\\" if the sum of the digits is even, and \\"Odd\\" if the sum of the digits is odd for each integer. -----Constraints----- - The list contains up to 1000 integers. - Each integer is between 1 and 10^9. -----Input----- Input is given from Standard Input in the following format: The first line contains an integer T, the number of integers in the list. The next T lines each contain one integer from the list. -----Output----- For each integer, output \\"Even\\" if the sum of its digits is even, and \\"Odd\\" if the sum of its digits is odd. -----Sample Input----- 3 123 456 789 -----Sample Output----- Even Odd Odd Explanation: - The sum of the digits of 123 is 1 + 2 + 3 = 6, which is even. - The sum of the digits of 456 is 4 + 5 + 6 = 15, which is odd. - The sum of the digits of 789 is 7 + 8 + 9 = 24, which is even.","solution":"def is_even_or_odd(sum_of_digits): Determines if the sum of digits is even or odd. Args: - sum_of_digits (int): The sum of the digits. Returns: - A string \\"Even\\" if the sum is even, \\"Odd\\" if the sum is odd. return \\"Even\\" if sum_of_digits % 2 == 0 else \\"Odd\\" def sum_of_digits(n): Calculates the sum of the digits of a given integer. Args: - n (int): The integer to sum the digits of. Returns: - An integer representing the sum of the digits of n. return sum(int(digit) for digit in str(n)) def process_numbers(numbers): Processes a list of integers to determine if the sum of the digits of each number is even or odd. Args: - numbers (list of int): A list of integers. Returns: - A list of strings \\"Even\\" or \\"Odd\\" for each integer in numbers. results = [] for num in numbers: digit_sum = sum_of_digits(num) results.append(is_even_or_odd(digit_sum)) return results"},{"question":"A Community of Spiral Matrices You have been given an n times n matrix. Your task is to return the spiral order of the matrix elements as an array. The idea is to traverse the matrix in a spiral manner, starting from the top left corner of the matrix and moving clockwise. For example, given the matrix: begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} The spiral order traversal is [1, 2, 3, 6, 9, 8, 7, 4, 5]. Function Description Complete the `spiralOrder` function below. It should return an array containing the elements of the matrix in spiral order. `spiralOrder` has the following parameter(s): - `matrix`: a 2D array of integers representing an n times n matrix. Input Format The first line contains a single integer n, the number of rows and columns in the matrix. Each of the next n lines contains n integers matrix[i][j] representing the elements of the matrix. Constraints * 1 le n le 1000 * 1 le matrix[i][j] le 10^5 Output Format Print a single line containing the elements of the matrix in spiral order. Sample Input 0 3 1 2 3 4 5 6 7 8 9 Sample Output 0 1 2 3 6 9 8 7 4 5 Explanation 0 The matrix given is: begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} The spiral order traversal starts at the top left corner and moves to the right: 1, 2, 3, then down: 6, 9, then to the left: 8, 7, then up: 4, and finally back to the center: 5. Sample Input 1 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 1 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 Explanation 1 The matrix given is: begin{bmatrix} 1 & 2 & 3 & 4 5 & 6 & 7 & 8 9 & 10 & 11 & 12 13 & 14 & 15 & 16 end{bmatrix} The spiral order traversal is: * Move to the right along the top row: 1, 2, 3, 4 * Move down the last column: 8, 12, 16 * Move left along the bottom row: 15, 14, 13 * Move up the first column: 9, completing the external ring. Continue this inwards as: 5, 6, 7, 11, 10.","solution":"def spiralOrder(matrix): Returns the elements of the matrix in spiral order. # Define the directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] current_direction = 0 n = len(matrix) result = [] visited = [[False] * n for _ in range(n)] r = c = 0 for _ in range(n * n): result.append(matrix[r][c]) visited[r][c] = True next_r = r + directions[current_direction][0] next_c = c + directions[current_direction][1] if 0 <= next_r < n and 0 <= next_c < n and not visited[next_r][next_c]: r = next_r c = next_c else: current_direction = (current_direction + 1) % 4 r = r + directions[current_direction][0] c = c + directions[current_direction][1] return result"},{"question":"Three children are playing a game in which they pass a ball between them. The game starts with child A holding the ball. The rules of the game are as follows: - The child holding the ball passes it to one of the other two children. - After each pass, the child who just received the ball must pass it to one of the other two children, and so on. - The game continues for exactly `k` passes. Given that the children are numbered `1`, `2`, and `3` (where `1` represents child A, `2` represents child B, and `3` represents child C), and assuming the first pass always goes from child A to child B or child C, determine the number of ways the ball can be with each child after exactly `k` passes. -----Input----- The input consists of a single integer `k` (1 leq k leq 10^5). -----Output----- Output three integers, the number of ways the ball can end up with child `1`, child `2`, and child `3` respectively, after exactly `k` passes. -----Examples----- Input 2 Output 0 1 1 Input 3 Output 2 1 1 -----Note----- In the first example, after 2 passes, the ball can end up with child 2 or child 3. The possible sequences of passes are: `1 -> 2 -> 3` and `1 -> 3 -> 2`. In the second example, after 3 passes, the ball can end up with child 1, 2, or 3. The possible sequences of passes include: `1 -> 2 -> 1 -> 3` and `1 -> 3 -> 1 -> 2`, among others.","solution":"def count_ways_to_predicted_child(k): Returns the number of ways the ball can end up with child 1, child 2, and child 3, respectively after exactly k passes. # Ways to have ball with child 1, 2, and 3 after n passes dp1, dp2, dp3 = 0, 1, 1 # Initial state after 1 pass if k == 1: return dp1, dp2, dp3 for _ in range(2, k+1): new_dp1 = dp2 + dp3 new_dp2 = dp1 + dp3 new_dp3 = dp1 + dp2 dp1, dp2, dp3 = new_dp1, new_dp2, new_dp3 return dp1, dp2, dp3"},{"question":"You are given a list of integers and a window size K. Your task is to write a function that calculates the average of all contiguous subarrays of size K and returns a list of these averages. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K, where N is the size of the list, and K is the size of the subarrays. - The second line contains N space-separated integers, representing the elements of the list. ------ Output Format ------ For each test case, output a single line representing the list of averages of all contiguous subarrays of size K, rounded to two decimal places, separated by spaces. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N -10^{3} ≤ text{List Element} ≤ 10^{3} ------ Sample Input 1 ------ 2 5 3 1 3 2 6 -1 8 4 8 7 6 8 9 7 6 5 ------ Sample Output 1 ------ 2.00 3.67 2.33 7.25 7.50 7.50 7.50 6.75 ------ Explanation 1 ------ Test case 1: The contiguous subarrays of size 3 are as follows: - Subarray [1, 3, 2] has an average of (1 + 3 + 2) / 3 = 2.00 - Subarray [3, 2, 6] has an average of (3 + 2 + 6) / 3 = 3.67 - Subarray [2, 6, -1] has an average of (2 + 6 - 1) / 3 = 2.33 Test case 2: The contiguous subarrays of size 4 are as follows: - Subarray [8, 7, 6, 8] has an average of (8 + 7 + 6 + 8) / 4 = 7.25 - Subarray [7, 6, 8, 9] has an average of (7 + 6 + 8 + 9) / 4 = 7.50 - Subarray [6, 8, 9, 7] has an average of (6 + 8 + 9 + 7) / 4 = 7.50 - Subarray [8, 9, 7, 6] has an average of (8 + 9 + 7 + 6) / 4 = 7.50 - Subarray [9, 7, 6, 5] has an average of (9 + 7 + 6 + 5) / 4 = 6.75","solution":"def calculate_averages(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] arr = test_cases[i][1] averages = [] window_sum = sum(arr[:K]) averages.append(round(window_sum / K, 2)) for j in range(K, N): window_sum = window_sum + arr[j] - arr[j - K] averages.append(round(window_sum / K, 2)) results.append(averages) return results"},{"question":"You are given an integer N, and return the Nth term of the Fibonacci Series (0-based indexing). Example: Input: 5 Output: 5 Explanation: The 5th term (0-based indexing) in the Fibonacci series is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function Fibonacci() which takes an Integer N and returns the Nth term. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= N < 100","solution":"def Fibonacci(N): Return the Nth term of the Fibonacci series (0-based indexing). if N == 0: return 0 elif N == 1: return 1 a, b = 0, 1 for i in range(2, N + 1): a, b = b, a + b return b"},{"question":"In computer programming, a palindrome is a sequence of characters that reads the same forward and backward. Checking for palindromes is a common problem with many variations and applications. In this problem, you will write a program that determines the longest palindromic substring within a given string. The substring must be contiguous but may contain spaces, punctuation, or any other characters. For example: - For the input string \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\". - For the input string \\"cbbd\\", the longest palindromic substring is \\"bb\\". - For the input string \\"a\\", the longest palindromic substring is \\"a\\". - For the input string \\"ac\\", the longest palindromic substring is \\"a\\" or \\"c\\". The input will consist of multiple test cases. Each test case will be a string containing at least one character and no more than 1000 characters. The input terminates with a line containing a single word \\"END\\" which should not be processed. Format your output so that for each test case, you print the test case number (starting from 1) and the longest palindromic substring. If there are multiple longest palindromic substrings of the same length, return the first one encountered from the left. Input: abba abcba babaad END Output: Case #1 abba Case #2 abcba Case #3 bab Note: - Each test string must be processed independently. - There should be a blank line between consecutive test case outputs.","solution":"def longest_palindromic_substring(text): Finds the longest palindromic substring in a given text. def extend_palindrome(left, right): while left >= 0 and right < len(text) and text[left] == text[right]: left -= 1 right += 1 return text[left+1:right] longest = \\"\\" for i in range(len(text)): # Odd length palindromes substr1 = extend_palindrome(i, i) # Even length palindromes substr2 = extend_palindrome(i, i + 1) # Check for the longer substring found if len(substr1) > len(longest): longest = substr1 if len(substr2) > len(longest): longest = substr2 return longest def process_input(input_lines): Handles the input and formatting for the output. case_number = 1 for line in input_lines: line = line.strip() if line == \\"END\\": break result = longest_palindromic_substring(line) print(f\\"Case #{case_number}n{result}n\\") case_number += 1"},{"question":"Given a connected undirected graph with weighted edges, your task is to determine if it is possible to remove **exactly one** edge from the graph such that the resulting graph is still connected and the weight of that edge is the largest among all edges in the original graph. If it is possible, print the largest edge weight that can be removed while maintaining connectivity. If it is not possible, print `-1`. # Input - The first line contains two integers, `n` (2 ≤ n ≤ 1000) and `m` (n-1 ≤ m ≤ 2000) — the number of vertices and edges in the graph, respectively. - The next `m` lines each contain three integers `u`, `v` (1 ≤ u, v ≤ n, u ≠ v), and `w` (1 ≤ w ≤ 10000) — indicating that there is an edge between vertices `u` and `v` with weight `w`. # Output - If it is possible to remove exactly one edge and keep the graph connected, print the weight of the edge. - If it is not possible, print `-1`. # Example Input ``` 4 4 1 2 3 2 3 10 3 4 5 4 1 7 ``` Output ``` 10 ``` Input ``` 3 2 1 2 5 2 3 8 ``` Output ``` 8 ``` # Note In the first example, removing the edge with weight 10 keeps the graph connected because the graph will still have a path from every vertex to every other vertex. In the second example, removing either edge will disconnect the graph, so the output is `-1`. Consider using graph traversal techniques such as Depth First Search (DFS) or Breadth First Search (BFS) to verify the connectivity of the graph after the removal of an edge.","solution":"def can_remove_largest_edge_and_keep_connected(n, m, edges): from collections import defaultdict import heapq # Initialize the adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Function to remove an edge and perform DFS to check connectivity def is_connected(removed_edge): visited = set() stack = [1] while stack: node = stack.pop() if node not in visited: visited.add(node) for neighbor, weight in graph[node]: if (node, neighbor, weight) != removed_edge and (neighbor, node, weight) != removed_edge: stack.append(neighbor) return len(visited) == n # Sort edges by weight in descending order to check the largest ones first edges = sorted(edges, key=lambda x: -x[2]) for edge in edges: if is_connected(edge): return edge[2] return -1"},{"question":"A robot vacuum cleaner is navigating a room to clean it. The room can be represented as an `m x n` grid of cells, with each cell either being empty (denoted by `0`) or an obstacle (denoted by `1`). The robot starts at the top-left corner of the grid (i.e., cell (0,0)) and can move in four directions: up, down, left, and right. The robot cannot move through obstacles. Your task is to write a function that determines whether the robot can reach the bottom-right corner of the grid (i.e., cell (m-1, n-1)) starting from the top-left corner. Input Your function will receive a 2D list representing the grid, where `grid[i][j]` is `0` if the cell (i,j) is empty and `1` if it is an obstacle. Output Your function should return a boolean value: `True` if the robot can reach the bottom-right corner, and `False` otherwise. Examples ```python can_reach_end([ [0, 0, 1], [0, 0, 0], [1, 0, 0] ]) # True can_reach_end([ [0, 1, 1], [1, 0, 0], [1, 1, 0] ]) # False ``` Additional Details - The dimensions of the grid `m` and `n` will not exceed `100`. - The grid will have at least 1 cell.","solution":"def can_reach_end(grid): Determines if the robot can reach the bottom-right corner of the grid. Parameters: grid (list of list of int): The 2D grid representing the room. Returns: bool: True if the robot can reach the bottom-right corner, otherwise False. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False m, n = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * n for _ in range(m)] stack = [(0, 0)] while stack: x, y = stack.pop() if (x, y) == (m - 1, n - 1): return True if not visited[x][y]: visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: stack.append((nx, ny)) return False"},{"question":"A string is called repetitive if it can be constructed by repeating a substring two or more times. For example, the string \\"abcabcabc\\" is repetitive because it can be constructed by repeating the substring \\"abc\\" three times. Similarly, \\"aaaa\\" is repetitive because it can be constructed by repeating the substring \\"a\\" four times. However, the string \\"ababa\\" is not repetitive. You need to determine if a given string is repetitive and if so, find the smallest repeating unit. You are given a string s. Write a function that determines if the string is repetitive and if yes, returns the smallest repeating unit. If the string is not repetitive, return \\"None\\". -----Input----- A single line containing a string s (1 ≤ |s| ≤ 200,000). The string consists of lowercase English letters. -----Output----- If the string is repetitive, print the smallest repeating unit as a single string. Otherwise, print \\"None\\". -----Examples----- Input abcabcabc Output abc Input aaaa Output a Input ababa Output None Input abccbaabccba Output abccba","solution":"def find_smallest_repeating_unit(s): Determines if the string is repetitive and returns the smallest repeating unit if it is. If not, returns \\"None\\". n = len(s) for i in range(1, n // 2 + 1): # Check if the length of substring i can divide the whole string if n % i == 0: substring = s[:i] repeated = substring * (n // i) if repeated == s: return substring return \\"None\\" # Example usage: # s = \\"abcabcabc\\" # print(find_smallest_repeating_unit(s)) # Output: \\"abc\\""},{"question":"------ Question ------ A palindrome is a string that reads the same forward and backward. You are given a string S of length N. You can perform the following operation any number of times: Choose one or more disjoint substrings of S and arrange them such that the resulting string is a palindrome. After this operation, the selected substrings are removed from S. Your task is to determine if it is possible to remove the entire string by forming palindromes through one or more operations. For example, for the string \\"abccba\\", you can form the palindrome \\"abccba\\" and remove it in one operation, leaving an empty string. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains a string S of length N. ------ Output ------ For each test case, print \\"YES\\" if it is possible to remove the entire string by forming palindromes, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 200 1 ≤ N ≤ 1,000 S consists only of lowercase English letters. ----- Sample Input ------ 3 6 abccba 7 aacursed 10 modoistool ----- Sample Output ------ YES NO NO ----- Explanation ------ Example case 1: We can choose the entire string \\"abccba\\" which itself is a palindrome, thus can be removed in one operation resulting in an empty string. Example case 2: It is not possible to rearrange any substring(s) such that they form a palindrome which removes the entire string. Example case 3: No matter how we try to arrange substrings, we cannot fully remove the string \\"modoistool\\" by forming palindromes.","solution":"def can_form_palindromes(T, test_cases): def is_palindrome_possible(N, S): # Count the frequency of each character in the string char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged as palindromes and removed, at most one character can have an odd frequency # (example: level, civic) return odd_count <= 1 results = [] for i in range(T): N, S = test_cases[i] if is_palindrome_possible(N, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example Usage: # T = 3 # test_cases = [ # (6, \\"abccba\\"), # (7, \\"aacursed\\"), # (10, \\"modoistool\\") # ] # print(can_form_palindromes(T, test_cases)) # Output: [\'YES\', \'NO\', \'NO\']"},{"question":"Given a string S and a dictionary of words containing N words, find the number of possible ways to segment S into a sequence of words where each word is a valid dictionary word. Example 1: Input: S = \\"applepenapple\\" N = 3 dictionary[] = {\\"apple\\", \\"pen\\", \\"applepen\\"} Output: 2 Explanation: There are two ways to segment the string: 1. \\"apple pen apple\\" 2. \\"applepen apple\\" Example 2: Input: S = \\"catsanddog\\" N = 5 dictionary[] = {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"} Output: 2 Explanation: There are two ways to segment the string: 1. \\"cats and dog\\" 2. \\"cat sand dog\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function numberOfWaysToSegment() which takes the string S, the integer N, and the list/vector of words dictionary as input parameters and return an integer denoting the number of possible ways to segment the string. Expected Time Complexity: O(2^M) Expected Auxiliary Space: O(M), where M is the length of string S. Constraints: 1 <= N <= 500 1 <= |S| <= 100 1 <= len(dictionary[i]) <= 20","solution":"def numberOfWaysToSegment(S, N, dictionary): This function returns the number of possible ways to segment the string S into a sequence of valid dictionary words. word_dict = set(dictionary) memo = {} def helper(s): if s in memo: return memo[s] if s == \\"\\": return 1 count = 0 for i in range(1, len(s) + 1): if s[:i] in word_dict: count += helper(s[i:]) memo[s] = count return count return helper(S)"},{"question":"Write a function that takes a 2D array (matrix) and checks whether it is a magic square. A magic square is a grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same. The function should return `True` if the given matrix is a magic square, otherwise return `False`. -----Input----- The input consists of a single integer t (1 le t le 50) — the number of test cases. Each test case starts with an integer n (2 le n le 10) representing the number of rows and columns of the matrix. The next n lines each contain n integers separated by spaces (0 le text{integer} le 100). -----Output----- For each test case, print `True` if the matrix is a magic square, and `False` otherwise. -----Examples----- Input 3 3 2 7 6 9 5 1 4 3 8 2 1 2 3 4 3 8 1 6 3 5 7 4 9 2 Output True False True -----Explanation----- In the first test case, the sums of each row are 15, the sums of each column are 15, and the sums of both main diagonals are also 15. In the second test case, the sums of rows and columns are not equal, so it is not a magic square. In the third test case, the sums of each row, each column, and both main diagonals are 15.","solution":"def is_magic_square(matrix): n = len(matrix) # Calculate the sum of the first row expected_sum = sum(matrix[0]) # Check rows for row in matrix: if sum(row) != expected_sum: return False # Check columns for col in range(n): if sum(matrix[row][col] for row in range(n)) != expected_sum: return False # Check diagonals if sum(matrix[i][i] for i in range(n)) != expected_sum: return False if sum(matrix[i][n-i-1] for i in range(n)) != expected_sum: return False return True def magic_square_test_cases(t, test_cases): results = [] for i in range(t): n, matrix = test_cases[i] results.append(is_magic_square(matrix)) return results"},{"question":"Alex runs a company and needs to distribute salary bonuses to his employees. Each employee must receive the same number of bonus units, and Alex wants the total number of bonuses needed to be as small as possible. Each bonus unit costs Alex the same amount and he can afford exactly M bonus units in total. Determine the minimum number of bonus units each employee should receive so that they all get the same amount and the number of units given out is maximized without exceeding M. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case consists of two integers N and M — the number of employees and the number of bonus units Alex can afford to give in total. ------ Output Format ------ For each test case, output the maximum number of bonus units each employee should receive without exceeding M in total. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 100 1 ≤ M ≤ 10^4 ----- Sample Input 1 ------ 3 5 23 8 64 7 100 ----- Sample Output 1 ------ 4 8 14 ------ Explanation 1 ------ Test Case 1: If each of the 5 employees receives 4 bonus units, the total number of units given out is 20, which is the maximum possible without exceeding M = 23. Test Case 2: If each of the 8 employees receives 8 bonus units, the total number of units given out is 64, which is the maximum possible without exceeding M = 64. Test Case 3: If each of the 7 employees receives 14 bonus units, the total number of units given out is 98, which is the maximum possible without exceeding M = 100.","solution":"def max_bonus_units(T, test_cases): results = [] for case in test_cases: N, M = case max_units = M // N results.append(max_units) return results"},{"question":"In the Kingdom of XYZ, the government has decided to distribute rewards to its citizens for achieving various milestones. Each citizen has a unique milestone to achieve, and the government wants to ensure that they distribute the rewards fairly and efficiently. The milestones are given as an array of integers, where each integer represents the required units of achievement. Each citizen must be given a reward, but the total number of rewards the government can distribute is limited. Write a program that, given the milestones and the total number of rewards available, distributes the rewards such that each citizen receives at least one reward, and the distribution is as evenly as possible. The goal is to minimize the difference between the maximum and minimum rewards given to any two citizens. -----Input----- - One line containing two integers: - n (1 le n le 1000), the number of citizens; - r (n le r le 10000), the total number of rewards available. - One line containing n integers, the array milestones, where each integer a_i (1 le a_i le 1000) represents the milestones for the i-th citizen. -----Output----- Print a single integer, the minimized difference between the maximum and minimum rewards given to any two citizens. -----Examples----- Sample Input: 4 10 1 2 3 4 Sample Output: 1 Sample Input: 3 7 4 5 6 Sample Output: 1","solution":"def min_reward_difference(n, r, milestones): # Sort the milestones to make the reward distribution easier to handle milestones.sort() # Calculate the minimum uniform distribution of rewards base_rewards = r // n extra_rewards = r % n rewards = [base_rewards] * n # Distribute the extra rewards as evenly as possible for i in range(extra_rewards): rewards[i] += 1 # Calculate the maximum and minimum rewards given max_reward = max(rewards) min_reward = min(rewards) # Return the difference between max and min rewards return max_reward - min_reward # Sample inputs from the task description to test the function print(min_reward_difference(4, 10, [1, 2, 3, 4])) # Expected Output: 1 print(min_reward_difference(3, 7, [4, 5, 6])) # Expected Output: 1"},{"question":"You are given a list of IP addresses. Your task is to find out which IP addresses are public and which are private. Classify each IP address and output the result. # Public vs. Private IP Addresses Public IP addresses are used to access the Internet, while private IP addresses are used within a private network. Private IP Address Ranges - 10.0.0.0 to 10.255.255.255 - 172.16.0.0 to 172.31.255.255 - 192.168.0.0 to 192.168.255.255 # Input Format The first line contains an integer N, the number of IP addresses. The next N lines contain an IP address each. # Output Format For each IP address, output either \\"Private\\" or \\"Public\\" on a new line depending on its classification. # Constraints - 1 leq N leq 100 - Each IP address is a valid IPv4 address. # Sample Input 7 192.168.1.1 8.8.8.8 172.16.0.5 10.0.0.1 172.32.0.1 143.45.67.89 192.0.2.1 # Sample Output Private Public Private Private Public Public Public # Explanation - 192.168.1.1 is in the range of private IPs starting from 192.168.0.0 to 192.168.255.255. - 8.8.8.8 is a public IP. - 172.16.0.5 is in the range of private IPs from 172.16.0.0 to 172.31.255.255. - 10.0.0.1 is in the range of private IPs from 10.0.0.0 to 10.255.255.255. - 172.32.0.1 falls outside the private range 172.16.0.0 to 172.31.255.255 and is thus public. - 143.45.67.89 is a public IP. - 192.0.2.1 is a public IP.","solution":"def classify_ip(ip_address): Classify the given IP address as either \'Private\' or \'Public\'. parts = list(map(int, ip_address.split(\'.\'))) if parts[0] == 10: return \\"Private\\" elif parts[0] == 172 and 16 <= parts[1] <= 31: return \\"Private\\" elif parts[0] == 192 and parts[1] == 168: return \\"Private\\" else: return \\"Public\\" def classify_ip_addresses(ip_addresses): results = [] for ip in ip_addresses: results.append(classify_ip(ip)) return results"},{"question":"You are given an n x n grid, where some cells contain integers and the rest contain obstacles. Your task is to find the minimum path sum from the upper left corner (1,1) to the lower right corner (n,n), considering the value of each cell in the path. You can move only to the right or down in each step. If a cell contains an obstacle, represented by the character \'#\', you cannot pass through that cell. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n space-separated strings. Each string is either an integer or the character \'#\'. If the string is an integer, it represents the value of the cell. If the string is \'#\', it represents an obstacle in the cell. Output Print a single integer representing the minimum path sum from the top-left to the bottom-right corner. If there is no valid path, print -1. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 3 1 2 3 4 # 6 7 8 9 Output 21","solution":"def min_path_sum(grid): n = len(grid) dp = [[float(\'inf\')] * n for _ in range(n)] if grid[0][0] == \'#\': return -1 dp[0][0] = int(grid[0][0]) for i in range(n): for j in range(n): if grid[i][j] == \'#\': continue current_value = int(grid[i][j]) if i > 0 and grid[i-1][j] != \'#\': dp[i][j] = min(dp[i][j], dp[i-1][j] + current_value) if j > 0 and grid[i][j-1] != \'#\': dp[i][j] = min(dp[i][j], dp[i][j-1] + current_value) return dp[-1][-1] if dp[-1][-1] != float(\'inf\') else -1 # Example usage grid1 = [ [\\"1\\", \\"3\\", \\"1\\"], [\\"1\\", \\"5\\", \\"1\\"], [\\"4\\", \\"2\\", \\"1\\"] ] print(min_path_sum(grid1)) # Output: 7 grid2 = [ [\\"1\\", \\"2\\", \\"3\\"], [\\"4\\", \\"#\\", \\"6\\"], [\\"7\\", \\"8\\", \\"9\\"] ] print(min_path_sum(grid2)) # Output: 21"},{"question":"John is an adventurer exploring a mysterious forest filled with magical creatures. He starts his journey with a certain number of energy points. In the forest, there are various checkpoints, each inhabited by a unique creature that can either increase or decrease John\'s energy based on its nature. Specifically, at each checkpoint, John encounters one of two types of creatures: 1. Friendly creatures that increase his energy by a certain number of points. 2. Hostile creatures that decrease his energy by a certain number of points. John\'s goal is to traverse all checkpoints in the forest without his energy dropping to zero or below at any point in his journey. If his energy reaches zero or a negative value, he collapses and fails his adventure. ---Input--- The first line contains an integer \'T\', the number of test cases. For each test case, the first line contains two space-separated integers \'E\' (initial energy) and \'N\' (number of checkpoints). The next line contains a sequence of \'N\' space-separated integers where each integer represents the change in energy points when encountering the creature at that checkpoint. Positive values indicate friendly creatures (increase energy), and negative values indicate hostile creatures (decrease energy). ---Output--- For each test case, print \'SURVIVED\' if John successfully traverses all checkpoints without his energy dropping to zero or below, and \'COLLAPSED\' if he fails. ---Constraints--- - 1 ≤ T ≤ 100 - 1 ≤ E ≤ 1000 - 1 ≤ N ≤ 1000 - -100 ≤ change in energy ≤ 100 ---Example--- Input: 3 10 5 -3 4 -2 -1 1 5 3 -1 -1 -4 8 4 2 -5 3 -2 Output: SURVIVED COLLAPSED SURVIVED ---Explanation--- Example case 1: John starts with 10 energy points. - After the first checkpoint, his energy changes to 10 - 3 = 7. - After the second checkpoint, his energy increases by 4 making it 7 + 4 = 11. - After the third checkpoint, his energy decreases by 2 making it 11 - 2 = 9. - After the fourth checkpoint, his energy decreases by 1 making it 9 - 1 = 8. - After the final checkpoint, his energy increases by 1 making it 8 + 1 = 9. He successfully traverses all checkpoints, so \'SURVIVED\' is printed. Example case 2: John starts with 5 energy points. - After the first checkpoint, his energy decreases by 1 making it 5 - 1 = 4. - After the second checkpoint, his energy decreases by 1 making it 4 - 1 = 3. - After the final checkpoint, his energy decreases by 4 making it 3 - 4 = -1. His energy drops below zero, so \'COLLAPSED\' is printed. Example case 3: John starts with 8 energy points. - After the first checkpoint, his energy increases by 2 making it 8 + 2 = 10. - After the second checkpoint, his energy decreases by 5 making it 10 - 5 = 5. - After the third checkpoint, his energy increases by 3 making it 5 + 3 = 8. - After the final checkpoint, his energy decreases by 2 making it 8 - 2 = 6. He successfully traverses all checkpoints, so \'SURVIVED\' is printed.","solution":"def adventure_outcome(T, test_cases): outcomes = [] for case in test_cases: E, N, changes = case survived = True for change in changes: E += change if E <= 0: survived = False break if survived: outcomes.append(\\"SURVIVED\\") else: outcomes.append(\\"COLLAPSED\\") return outcomes"},{"question":"You are a scientist studying the growth pattern of a rare species of plant. Each plant requires a specific type of soil, amount of sunlight, and water to thrive. You have collected data on n plants, with each plant i having the following values: - s_ i - type of soil the plant is situated in - u_ i - units of sunlight the plant receives per day - w_ i - milliliters of water the plant receives per week - g_ i - growth rate of the plant in centimeters per month Your goal is to determine a combination of soil type, sunlight amount, and water amount that maximizes the total growth rate of the plants under those conditions. To do this, you will pick three values A, B, and C, and maximize the measure s_{i} cdot A + u_{i} cdot B + w_{i} cdot C for each plant i. Given these values, you must calculate the maximum sum of growth rates for any possible values of A, B, and C. -----Input----- The input begins with an integer n (1 leq n leq 200000), the number of plants studied. Following this, there are n lines, each containing four integers: s_ i (0 leq s_ i leq 1000), u_ i (0 leq u_ i leq 10000), w_ i (0 leq w_ i leq 10000), and g_ i (0 leq g_ i leq 100), representing the soil type, units of sunlight, water amount, and growth rate for the i^text {th} plant, respectively. -----Output----- Display the maximum possible sum of growth rates over all possible (A, B, C) values. -----Examples----- Sample Input 1: 5 1 3 5 10 2 4 6 15 3 5 7 20 1 6 8 25 2 7 9 30 Sample Output 1: 100 Sample Input 2: 3 0 0 0 5 1 2 3 10 2 4 6 15 Sample Output 2: 30","solution":"def max_growth_rate(n, plants): max_growth = 0 # Calculate total growth rate directly as g_i since we can optimize (A, B, C) to be (g_si, g_ui, g_wi) respectively for plant in plants: s, u, w, g = plant max_growth += g return max_growth # Example Usage with provided input n = 5 plants = [ [1, 3, 5, 10], [2, 4, 6, 15], [3, 5, 7, 20], [1, 6, 8, 25], [2, 7, 9, 30] ] # Output should be 100 print(max_growth_rate(n, plants))"},{"question":"You are given two rectangular matrices of the same dimensions, matrix A and matrix B. Your task is to perform an element-wise addition of these two matrices and output the resulting matrix. Matrices A and B have n rows and m columns. Element-wise addition means to add the corresponding elements of matrices A and B to get the resulting matrix C. More formally, if A = [a_ij] and B = [b_ij], then C = [c_ij], where c_ij = a_ij + b_ij for 1 ≤ i ≤ n and 1 ≤ j ≤ m. # Input: - The first line contains two integers, n (number of rows) and m (number of columns) (1 ≤ n, m ≤ 500). - The next n lines each contain m integers representing the elements of matrix A. - The following n lines each contain m integers representing the elements of matrix B. # Output: - Print the resulting matrix C, where each of the n lines contain m integers, representing the elements of matrix C. # Sample Input: ``` 2 3 1 2 3 4 5 6 7 8 9 10 11 12 ``` # Sample Output: ``` 8 10 12 14 16 18 ``` # Explanation: The first matrix A is: ``` 1 2 3 4 5 6 ``` The second matrix B is: ``` 7 8 9 10 11 12 ``` The resulting matrix C after element-wise addition of A and B is: ``` 8 10 12 14 16 18 ```","solution":"def matrix_addition(n, m, matrix_a, matrix_b): Performs element-wise addition of two n x m matrices. Args: n (int): number of rows m (int): number of columns matrix_a (list of list of int): first matrix matrix_b (list of list of int): second matrix Returns: list of list of int: resulting matrix after element-wise addition matrix_c = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): matrix_c[i][j] = matrix_a[i][j] + matrix_b[i][j] return matrix_c"},{"question":"# Problem Statement: Sum of Divisors Two players, Alice and Bob, are playing a game with an array of integers. The array contains n positive integers, and the game proceeds as follows: Alice starts first and they take turns. On each player\'s turn, the player picks an integer `k` from the array (if possible) such that the chosen number `k` is a divisor of at least one other number in the array that has not been removed yet. Then the player removes all instances of `k` from the array. The game continues until no such `k` exists in the array. The player who cannot make a move loses the game. Determine the minimum number of moves required to remove all integers from the array. If it\'s not possible to remove all integers, return -1. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of integers in the array. - The second line contains a sequence of space-separated integers: `a₁, a₂, ..., aₙ` (1 ≤ aᵢ ≤ 1000), representing the integers in the array. # Output - Print a single integer — the minimum number of moves needed to remove all integers from the array. If it\'s impossible, print -1. # Examples Input ``` 4 2 4 8 16 ``` Output ``` 4 ``` Input ``` 2 5 7 ``` Output ``` -1 ``` # Note - In the first test case, one possible sequence of moves is: pick 2 (remove all 2s), pick 4 (remove all 4s), pick 8 (remove all 8s), pick 16 (remove all 16s). Hence, we need 4 moves to remove all integers. - In the second test case, there are no integers in the array that are divisors of any other number, so it\'s impossible to remove all integers. Thus, the output is -1.","solution":"def min_moves_to_remove_integers(n, arr): Returns the minimum number of moves required to remove all integers from the array. If it is not possible to remove all integers, returns -1. from collections import Counter # Count frequency of each element freq = Counter(arr) # Iterate each element to check if it can be used to remove other elements for key in sorted(freq): if freq[key] == 0: continue # Check if this key is a divisor of any other elements divisible_exists = False for candidate in freq: if candidate != key and candidate % key == 0: divisible_exists = True break # If the key is not a divisor of any other element, we cannot remove it if not divisible_exists: return -1 # If we can use this key to remove some elements for candidate in list(freq.keys()): if candidate % key == 0: del freq[candidate] # If we reach here, we were able to remove all elements return n"},{"question":"A robotics competition is held annually where teams build robots to complete a series of tasks. Each task has a different level of difficulty and earns a corresponding score. Given the following parameters: - An array of integers where each integer represents the score for completing a task. - An integer `bonus` which is awarded if a team completes more than a given number of tasks (`threshold`). Calculate the total score for a team based on the tasks they completed and the bonus received. Return the total score a team has earned. The given parameters will be: * An array of integers representing task scores * An integer `bonus` for completing more than `threshold` tasks * An integer `threshold` representing the minimum number of tasks that must be completed to earn the bonus **Note:** The input will always be valid (an array and two numbers). Examples #1: ``` [10, 20, 30, 40], 50, 3 --> 150 ``` because: * Total task scores: `10 + 20 + 30 + 40 = 100` * Bonus is awarded since 4 tasks were completed: `bonus = 50` which is: `100 + 50 = 150` #2: ``` [15, 25], 40, 3 --> 40 ``` because: * Total task scores: `15 + 25 = 40` * Bonus is not awarded since only 2 tasks were completed which is: `40`","solution":"def calculate_total_score(task_scores, bonus, threshold): Calculate the total score based on task scores and bonus. Parameters: - task_scores (list of int): Scores for each task completed. - bonus (int): Bonus points awarded if more than \'threshold\' tasks are completed. - threshold (int): Minimum number of tasks to be completed to earn the bonus. Returns: - int: Total score including any applicable bonus. total_score = sum(task_scores) if len(task_scores) > threshold: total_score += bonus return total_score"},{"question":"In this problem, you will be given a sequence of integers, you have to find the longest subsequence which is a bitonic sequence. A sequence is bitonic if it is first strictly increasing and then strictly decreasing. A purely increasing or purely decreasing sequence is also considered as bitonic with zero length of the respective decreasing or increasing part. -----Input----- The first line contains T, the number of test cases to follow. Each test case contains two lines: - The first line contains a single integer N, the length of the sequence. - The second line contains N integers separated by spaces, representing the sequence. -----Output----- For each test case, print the length of the longest bitonic subsequence. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 2000 - -1000000 ≤ sequence[i] ≤ 1000000 -----Example----- Input: 2 6 12 4 78 90 45 23 8 10 20 30 40 50 40 30 20 Output: 5 8","solution":"def longest_bitonic_subsequence(arr): n = len(arr) if n == 0: return 0 # Initialize the increasing and decreasing subsequences arrays inc = [1] * n dec = [1] * n # Compute the longest increasing subsequence (LIS) for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Compute the longest decreasing subsequence (LDS) for i in reversed(range(n-1)): for j in range(i+1, n): if arr[i] > arr[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # Find the maximum length of bitonic subsequence max_len = 0 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) # -1 is done to not double count the peak element return max_len def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) index += 1 sequence = list(map(int, data[index:index + N])) index += N results.append(longest_bitonic_subsequence(sequence)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given three integers, A, B, and C (each between 0 and 50 inclusive), determine if the sum of any two of them equals the third one. Print \\"YES\\" if such a combination exists, otherwise, print \\"NO\\". -----Constraints----- - 0 leq A, B, C leq 50 - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: A B C -----Output----- Print \\"YES\\" if any of the integers is the sum of the other two. Otherwise, print \\"NO\\". -----Sample Input----- 2 5 7 -----Sample Output----- YES 2 + 5 = 7, so we should print \\"YES\\".","solution":"def check_sum_of_two_equals_third(A, B, C): Returns \\"YES\\" if the sum of any two integers is equal to the third integer. Otherwise, returns \\"NO\\". if A + B == C or B + C == A or C + A == B: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string str and a pattern pat, write a function that returns the index of the first occurrence of the pattern in the string, or -1 if the pattern is not found. You are not allowed to use any built-in string searching functions. Example 1: Input: str = \\"hello\\" pat = \\"ll\\" Output: 2 Explanation: The substring \\"ll\\" is found starting at index 2. Example 2: Input: str = \\"hello\\" pat = \\"abc\\" Output: -1 Explanation: The pattern \\"abc\\" is not found in the string. Your Task: Complete the function findPattern() which takes two strings str and pat as input parameters and returns an integer denoting the index of the first occurrence of the pattern, or -1 if the pattern is not found. You do not need to take inputs or print anything. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(1) Constraints: 1 <= len(str) <= 10^5 1 <= len(pat) <= 10^5","solution":"def findPattern(s, pat): Returns the index of the first occurrence of the pattern pat in the string s, or -1 if the pattern is not found. n, m = len(s), len(pat) # If pattern length is greater than the string length if m > n: return -1 # Loop through the string for i in range(n - m + 1): # Check if the substring of s starting at i matches pat if s[i:i + m] == pat: return i return -1"},{"question":"You have been hired to analyze sales data for a retail company. One aspect of your analysis involves identifying which items have been restocked within a given time period. The company maintains a log of restocking events, each event indicating a specific item and the number of units restocked. However, some items may have been restocked multiple times, and you need to determine how many unique items have been restocked in multiple events. The input consists of multiple test cases. For each test case, you are provided with a list of restocking events and asked to count the number of unique items that have been restocked more than once. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 500). Description of the test cases follows. The first line of each test case contains one integer n (1 le n le 100) — the number of restocking events in that test case. The following n lines contain a restocking event, each consisting of an integer itemId (1 le itemId le 1000) and an integer quantity (1 le quantity le 1000). -----Output----- For each test case, output a single integer — the number of unique items that have been restocked more than once. -----Examples----- Input 3 5 101 20 102 15 101 25 103 30 102 10 3 201 5 202 10 203 15 4 301 40 302 50 301 30 303 20 Output 2 0 1 -----Note----- In the first test case, items 101 and 102 were both restocked more than once. Therefore, the output is 2. In the second test case, all items were restocked only once. Therefore, the output is 0. In the third test case, item 301 was restocked more than once. Therefore, the output is 1.","solution":"def count_unique_items_restocked_more_than_once(test_cases): Given a list of test cases, each containing restocking event information, this function returns a list of integers representing the number of unique items that have been restocked more than once in each test case. Parameters: test_cases (list of list of tuples): Each list contains tuples representing restocking events with (itemId, quantity) Returns: list of int: Number of unique items restocked more than once for each test case results = [] for case in test_cases: item_count = {} for event in case: itemId, _ = event if itemId not in item_count: item_count[itemId] = 1 else: item_count[itemId] += 1 more_than_once_count = sum(1 for count in item_count.values() if count > 1) results.append(more_than_once_count) return results"},{"question":"Sam is organizing a marathon event where participants are grouped into teams. He needs a program to help him distribute participants into teams as evenly as possible. Each team should have at least one participant, and the number of participants in the teams should vary by no more than one. INPUT The first line contains an integer T, the number of test cases (1 ≤ T ≤ 20). Each of the next T lines contains two integers P (1 ≤ P ≤ 100) and N (1 ≤ N ≤ 50): - P is the number of participants. - N is the number of teams. OUTPUT For each test case, output N integers in a single line representing the number of participants in each team. The integers should be in non-decreasing order. SAMPLE INPUT 3 10 3 15 4 8 2 SAMPLE OUTPUT 3 3 4 3 4 4 4 4 4 Explanation In the first test case, we distribute 10 participants among 3 teams. The participants can be distributed as 3, 3, and 4. In the second test case, 15 participants can be distributed among 4 teams as 3, 4, 4, and 4. In the third test case, 8 participants can be distributed among 2 teams as 4 and 4.","solution":"def distribute_participants(T, test_cases): results = [] for i in range(T): P, N = test_cases[i] base_number = P // N remainder = P % N distribution = [base_number + 1] * remainder + [base_number] * (N - remainder) distribution.sort() results.append(distribution) return results"},{"question":"Calculate the Sum of Odd Indexed Characters Input: The input consists of multiple test cases. The first line contains a single integer T, the number of test cases. Each of the subsequent T lines contains a single string of lowercase alphabets [a-z]. Output: For each test case, output a single integer representing the sum of the 1-based positions (indices) of characters that appear at an odd position in the string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 a ≤ S[i] ≤ z Example: SAMPLE INPUT 3 abcde fghij klmno SAMPLE OUTPUT 4 10 16 Explanation: In the first test case, \'a\', \'c\', and \'e\' are at positions 1, 3, and 5 respectively. So, the output is 1 + 3 + 5 = 9. Similarly for the next test cases.","solution":"def sum_odd_indexed_positions(T, strings): Given T test cases containing strings of lowercase alphabets, this function returns a list of sums of 1-based positions of characters that appear at odd positions in each string. Parameters: T (int): Number of test cases strings (list of str): List of strings for each test case Returns: list of int: List containing sum of 1-based positions of odd indexed characters results = [] for s in strings: # Calculate the sum of 1-based positions (which are odd indexed in 0-based indexing) sum_positions = sum(i + 1 for i in range(0, len(s), 2)) results.append(sum_positions) return results"},{"question":"Given two non-negative integers a and b, write a function to compute their sum without using the operator \'+\'. Example 1: Input: a = 1, b = 2 Output: 3 Example 2: Input: a = 2, b = 3 Output: 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function add() which takes integers a and b as input, and returns their sum. Expected Time Complexity: O(log(min(a, b))) Expected Auxiliary Space: O(1) Constraints: 0 <= a, b <= 10^9","solution":"def add(a, b): Returns the sum of a and b without using the \'+\' operator. # Iterate until there are no carries left while b != 0: # Carry now contains common set bits of a and b carry = a & b # Sum of bits of a and b where at least one of the bits is not set a = a ^ b # Carry is shifted by one so that adding it to a gives the required sum b = carry << 1 return a"},{"question":"Given a string consisting of only lowercase English letters, you need to find the length of the longest segment such that all characters in this segment are distinct. You need to write a function that determines the maximum length of any segment where no character repeats and returns this length. # Input - A single line string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. # Output - A single integer representing the length of the longest segment with all distinct characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Input ``` bbbbb ``` Output ``` 1 ``` # Explanation In the first example, the longest segment with all distinct characters is \\"abc\\", which has length 3. In the second example, since all characters are the same, the longest segment with all distinct characters has length 1.","solution":"def longest_distinct_substring(s): Returns the length of the longest segment with all distinct characters. n = len(s) max_length = 0 char_index_map = {} start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function `shortest_path` that receives a grid represented as a list of lists of integers, where each integer represents the cost of stepping into that cell. The function should find the minimum path sum from the top-left corner to the bottom-right corner of the grid, where you can only move right or down at each step. # Input A single grid `grid` represented as a list of lists of integers. Each integer is the cost of stepping into that cell. The grid has dimensions `m` x `n` where `1 <= m, n <= 500` and the cost of stepping into each cell is between `1` and `1000`. # Output A single integer representing the minimum path sum from the top-left corner to the bottom-right corner of the grid. # Examples Example 1: Input: ``` grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 7 ``` Explanation: The path is `1→3→1→1→1` with a path sum of 7. Example 2: Input: ``` grid = [ [1, 2, 5], [3, 2, 1] ] ``` Output: ``` 6 ``` Explanation: The path is `1→2→2→1` with a path sum of 6.","solution":"def shortest_path(grid): Returns the minimum path sum from the top-left to the bottom-right of a given grid. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) for r in range(rows): for c in range(cols): if r == 0 and c == 0: continue # starting point elif r == 0: grid[r][c] += grid[r][c - 1] # can only come from the left elif c == 0: grid[r][c] += grid[r - 1][c] # can only come from above else: grid[r][c] += min(grid[r - 1][c], grid[r][c - 1]) # take the minimum of coming from left or above return grid[rows - 1][cols - 1]"},{"question":"Write a function that takes an integer and returns the sum of all prime numbers less than or equal to that integer. **Function Signature:** ```python def sum_of_primes(n: int) -> int: pass ``` **Example:** ```python assert sum_of_primes(10) == 17 assert sum_of_primes(5) == 10 assert sum_of_primes(2) == 2 ``` **Explanation:** - For `n = 10`, the prime numbers less than or equal to 10 are 2, 3, 5, and 7. Their sum is `2 + 3 + 5 + 7 = 17`. - For `n = 5`, the prime numbers less than or equal to 5 are 2, 3, and 5. Their sum is `2 + 3 + 5 = 10`. - For `n = 2`, the prime number less than or equal to 2 is 2. Thus, the sum is 2. **Constraints:** - The input will be a positive integer (1 ≤ n ≤ 10^6). - The function should be optimized for performance due to the potential size of the input. **Note:** You need to consider edge cases, such as when the input is 1, where the expected sum should be 0, as there are no prime numbers less than or equal to 1.","solution":"def sum_of_primes(n: int) -> int: if n < 2: return 0 # Sieve of Eratosthenes algorithm to find all primes up to n sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes p = 2 while (p * p <= n): if sieve[p] == True: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 # Sum all primes less than or equal to n return sum(i for i in range(n + 1) if sieve[i])"},{"question":"You are given two strings, `s` and `t`. Your task is to determine if `s` can be transformed into `t` by performing a series of operations. Each operation consists of selecting any single character from `s` and replacing it with another character. You need to account for the minimum number of operations required to achieve the transformation. To make the problem more interesting, let\'s add a constraint: You are allowed to use only specific mappings for characters. You are given a list of allowed character transformations in the form of pairs. For example, if you are given the pair (\'a\', \'b\'), it means you can replace \'a\' with \'b\' or \'b\' with \'a\'. Write a function that takes in the following parameters: - `s`: A string of length n (1 ≤ n ≤ 1000) - `t`: A string of length n (1 ≤ n ≤ 1000) - `mappings`: A list of tuples each of which consists of two characters (both lowercase English letters). Return the minimum number of operations required to transform `s` into `t` using the allowed mappings. If it is not possible to transform `s` into `t` using the allowed mappings, return -1. Input - A string `s` of length n. - A string `t` of length n. - A list of tuples `mappings` where each tuple consists of two characters. Output - An integer representing the minimum number of operations required to transform `s` into `t` or -1 if the transformation is not possible. Example ```python def min_operations(s, t, mappings): # Implementation here # Example 1 s = \\"abcd\\" t = \\"bcda\\" mappings = [(\'a\', \'b\'), (\'b\', \'c\'), (\'c\', \'d\'), (\'d\', \'a\')] print(min_operations(s, t, mappings)) # Should return 4 # Example 2 s = \\"abc\\" t = \\"def\\" mappings = [(\'a\', \'d\'), (\'b\', \'e\'), (\'c\', \'f\')] print(min_operations(s, t, mappings)) # Should return 3 # Example 3 s = \\"abcd\\" t = \\"mnop\\" mappings = [(\'a\', \'m\'), (\'b\', \'n\'), (\'c\', \'o\'), (\'d\', \'p\')] print(min_operations(s, t, mappings)) # Should return 4 # Example 4 s = \\"abcdefgh\\" t = \\"ijklmnop\\" mappings = [(\'a\', \'i\'), (\'b\', \'j\'), (\'c\', \'k\'), (\'d\', \'l\'), (\'e\', \'m\'), (\'f\', \'n\'), (\'g\', \'o\'), (\'h\', \'p\')] print(min_operations(s, t, mappings)) # Should return 8 # Example 5 s = \\"abc\\" t = \\"abd\\" mappings = [(\'a\', \'b\')] print(min_operations(s, t, mappings)) # Should return -1 ```","solution":"def min_operations(s, t, mappings): from collections import defaultdict import sys # Create a graph of allowed transformations graph = defaultdict(set) for a, b in mappings: graph[a].add(b) graph[b].add(a) # Function to perform BFS to find shortest transformation path def bfs(src, dest): if src == dest: return 0 queue = [(src, 0)] visited = set([src]) while queue: cur, steps = queue.pop(0) for neighbor in graph[cur]: if neighbor == dest: return steps + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return sys.maxsize total_operations = 0 for char_s, char_t in zip(s, t): if char_s != char_t: min_steps = bfs(char_s, char_t) if min_steps == sys.maxsize: return -1 total_operations += min_steps return total_operations"},{"question":"Given a binary tree, you need to write a function that finds the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side. -----Input:----- - The input consists of multiple test cases. - The first line contains an integer T, the number of test cases. - For each test case, the input consists of two lines: - The first line contains an integer N, the number of nodes in the tree. - The second line contains N space-separated integers representing the level-order traversal of the binary tree. If a node does not have a left or right child, it is represented by -1. -----Output:----- For each test case, output the left view of the binary tree as a space-separated string of integers in a single line. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - Value of nodes: -10^3 to 10^3 where -1 represents a null node. -----Sample Input:----- 2 6 1 2 3 -1 5 -1 -1 6 1 2 3 4 5 6 -1 -----Sample Output:----- 1 2 5 1 2 4 -----Explanation:----- In the first test case, the binary tree is: ``` 1 / 2 3 5 ``` The nodes visible from the left view are 1, 2, and 5. In the second test case, the binary tree is: ``` 1 / 2 3 / / 4 5 6 ``` The nodes visible from the left view are 1, 2, and 4.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(levels): if not levels or levels[0] == -1: return None root = TreeNode(levels[0]) queue = [root] i = 1 while queue and i < len(levels): current = queue.pop(0) if i < len(levels) and levels[i] != -1: current.left = TreeNode(levels[i]) queue.append(current.left) i += 1 if i < len(levels) and levels[i] != -1: current.right = TreeNode(levels[i]) queue.append(current.right) i += 1 return root def left_view_util(node, level, max_level, view): if not node: return if max_level[0] < level: view.append(node.val) max_level[0] = level left_view_util(node.left, level+1, max_level, view) left_view_util(node.right, level+1, max_level, view) def left_view(root): view = [] left_view_util(root, 1, [0], view) return view def find_left_view_of_trees(T, test_cases): result = [] for i in range(T): N = test_cases[i * 2] levels = test_cases[i * 2 + 1] root = build_tree(levels) result.append(left_view(root)) return result"},{"question":"**Python: List Intersection** **Problem** Write a function `list_intersection` that takes two lists of integers and returns a list containing the elements common to both lists, without duplicates. The resulting list should be sorted in ascending order. **Input** - Two lists, `list1` and `list2`, each containing `n` and `m` integers respectively. **Output** - A list containing the unique common elements of `list1` and `list2` in ascending order. **Constraints** - The length of each list does not exceed 10^5. - Each integer in the lists is between -10^9 and 10^9. **Function Signature** ```python def list_intersection(list1: List[int], list2: List[int]) -> List[int]: ``` **Example** *Example 1* Input: ```python list1 = [1, 2, 2, 1] list2 = [2, 2] ``` Output: ```python [2] ``` *Example 2* Input: ```python list1 = [4, 9, 5] list2 = [9, 4, 9, 8, 4] ``` Output: ```python [4, 9] ``` *Example 3* Input: ```python list1 = [3, 3, 3] list2 = [3, 3, 3, 3] ``` Output: ```python [3] ```","solution":"from typing import List def list_intersection(list1: List[int], list2: List[int]) -> List[int]: # Use sets to find the common elements and use set intersection set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) # Convert to list and sort before returning return sorted(common_elements)"},{"question":"A warehouse has a single machine tasked with packing orders received during the day. Orders arrive in real-time and need to be packed and shipped on the same day. However, there is only one packing machine available, and only one order can be packed at a time. Each order has a strict time window during which it can be packed. You are provided with a list of orders where each order is represented by a tuple ((s_i, t_i)) where (s_i) is the start time of the time window and (t_i) is the end time of the time window. The order can be packed at any time (t) such that (s_i le t le t_i). You need to determine the maximum number of orders that can be packed without overlapping in their time windows. -----Input----- - The first line contains a single integer (n) ((1 leq n leq 10^5)), the number of orders. - The next (n) lines each contain two integers (s_i) and (t_i) ((0 leq s_i < t_i leq 10^9)), representing the start and end time of the time window for each order. -----Output----- - Output a single integer representing the maximum number of orders that can be packed without overlapping in their time windows. -----Examples----- Sample Input 1: 4 1 3 2 5 4 6 6 7 Sample Output 1: 3 Sample Input 2: 3 1 2 2 4 3 5 Sample Output 2: 2","solution":"def max_orders(n, times): Determines the maximum number of orders that can be packed without overlapping in their time windows. :param n: Number of orders :type n: int :param times: List of tuples, each containing the start and end time of the time window for each order :type times: list of tuples :return: Maximum number of non-overlapping orders :rtype: int # Sort orders by their end time times.sort(key=lambda x: x[1]) # Initialize variables to keep track of the end time of the last packed order and count of packed orders last_end_time = -1 count = 0 for start, end in times: if start >= last_end_time: # Pack this order and update the last end time last_end_time = end count += 1 return count"},{"question":"You are given a large poem consisting of N lines. Each line contains at most 1000 characters. Your task is to count how many times a specific word (case-insensitive) appears in the entire poem. Write a function that accepts the poem and the word, and returns the count of the word in the poem. The poem is given as a list of strings, where each string is a line of the poem. The word is given as a separate string. Input Format The first line contains a single integer N, the number of lines in the poem. The next N lines contain the lines of the poem. The last line contains the word to be counted. Output Format Output a single integer representing the number of times the specified word appears in the poem. Constraints 1 <= N <= 1000 1 <= length(line) <= 1000 1 <= length(word) <= 100 The text of the poem and the word consist of English letters and space characters only. Sample Input #00: 5 The sun sets upon the land, With colors so vibrant and grand. In the twilight, stars appear, Guiding travelers far and near. The night is calm, without fear. the Sample Output #00: 4 Explanation #00: The word \\"the\\" appears 4 times in the poem, considering case-insensitivity.","solution":"def count_word_in_poem(poem_lines, word): Count how many times a specific word (case-insensitive) appears in the entire poem. :param poem_lines: List of strings where each string is a line of the poem. :param word: The word to be counted. :return: Count of the word in the poem. word = word.lower() # Convert the search word to lower-case count = 0 for line in poem_lines: words_in_line = line.lower().split() # Convert line to lower-case and split into words count += words_in_line.count(word) # Count occurrences of the word in this line return count"},{"question":"A treasure hunter is exploring a cave, searching for gold coins. The cave can be represented as a grid of size m times n, where each cell contains a certain number of gold coins. The hunter can start from any cell in the first column (column 0) and can move to the cell directly to the right or to the cell diagonally to the right either up or down. Your task is to determine the maximum number of gold coins the hunter can collect upon reaching any cell in the last column (column n-1). ------Input------ The first line of input contains two integers m and n (1 le m, n le 300) — the number of rows and columns in the grid, respectively. The next m lines each contain n integers, where the i-th line and j-th integer c[i][j] (0 le c[i][j] le 1000) represents the number of gold coins in the cell at row i and column j. ------Output------ Print one integer — the maximum number of gold coins the hunter can collect. ------Examples------ Input 3 4 1 3 1 5 2 2 4 1 5 0 2 3 Output 16 Input 4 4 1 3 3 2 2 1 4 1 0 6 4 7 0 4 2 5 Output 19 -----Note----- In the first example, an optimal path would be starting at cell (2,0) and moving to (1,1), then to (1,2), and finally to (2,3). The total coins collected would be 5 + 2 + 4 + 5 = 16. In the second example, an optimal path would be starting at cell (3,0) and moving to (2,1), then to (2,2), and finally to (3,3). The total coins collected would be 0 + 6 + 4 + 7 = 19.","solution":"def max_gold_coins(m, n, grid): Returns the maximum number of gold coins that can be collected starting from any cell in the first column and reaching any cell in the last column. # Initialize a DP table to store the maximum coins collected up to each cell dp = [[0] * n for _ in range(m)] # Fill the first column with initial values from grid for i in range(m): dp[i][0] = grid[i][0] # Process each column from second to the last for j in range(1, n): for i in range(m): # Get the maximum coins we can collect from the three possible previous cells best_previous = dp[i][j-1] if i > 0: best_previous = max(best_previous, dp[i-1][j-1]) if i < m-1: best_previous = max(best_previous, dp[i+1][j-1]) # Update the current cell with the maximum coins collected dp[i][j] = grid[i][j] + best_previous # The result is the maximum value in the last column return max(dp[i][n-1] for i in range(m))"},{"question":"A company is developing a secure communication system where messages must be encoded. Each message is a string consisting of lowercase letters. To encode a message, the company applies a simple transformation that shifts each letter by a fixed number of positions in the alphabet. The alphabet is considered to be circular, so after \'z\' comes \'a\'. The company wants you to write a function that, given a message and a shift value, returns the encoded message. The shift value can be positive (shifting forward) or negative (shifting backward). -----Input----- The input consists of a single line containing a string and an integer separated by a space. The string is the message to be encoded, and the integer is the shift value. -----Output----- Output the encoded message as a single line. -----Constraints----- 1. The message consists only of lowercase English letters. 2. The length of the message is at most 100 characters. 3. The shift value can be any integer within the range of -1000 to 1000. -----Example----- Input: hello 3 Output: khoor Input: xyz -2 Output: vwx -----Explanation----- In the first example, each letter in \'hello\' is shifted by 3 positions forward in the alphabet: - h -> k - e -> h - l -> o - l -> o - o -> r So, the encoded message is \'khoor\'. In the second example, each letter in \'xyz\' is shifted by 2 positions backward in the alphabet: - x -> v - y -> w - z -> x So, the encoded message is \'vwx\'.","solution":"def encode_message(message, shift): shift = shift % 26 # Handle large or negative shifts by using modulo 26 encoded_message = [] for char in message: new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encoded_message.append(new_char) return \'\'.join(encoded_message) def process_input(input_str): parts = input_str.split() message = parts[0] shift = int(parts[1]) return encode_message(message, shift)"},{"question":"Two friends, Alice and Bob, are playing a game with a string S, consisting of lowercase English letters. The game proceeds as follows: - Alice takes the first turn, and then the players alternate turns. - In each turn, a player must choose a non-empty substring T of S and remove all occurrences of that substring from S. After each move, the substrings concatenate together, reducing the length of S. - If a player cannot make a move (i.e., the string S is empty), they lose the game. Given the initial string S, determine the winner of the game assuming both players play optimally. Input The input contains a single string S consisting of lowercase English letters (1 ≤ |S| ≤ 1000). Output Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Examples Input ababa Output Alice Input aaaa Output Bob Explanation In the first example, Alice can remove the substring \\"aba\\" in her first move, leaving \\"ba\\" for Bob. Bob then has no option but to remove the substring \\"b\\", leaving only \\"a\\" for Alice, who wins by removing the final \\"a\\". In the second example, regardless of Alice\'s first move, Bob always has a move and will be able to win by removing the final \\"a\\" from the string.","solution":"def game_winner(S): Determines the winner of the game given the starting string S. Parameters: S (str): The initial string. Returns: str: \\"Alice\\" if Alice wins the game, otherwise \\"Bob\\". # If the length of the string is odd, Alice will have the last move # If the length of the string is even, Bob will have the last move if len(S) % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Problem Alice and Bob both receive a long string of lowercase letters from their friend Carol. Carol challenges them to transform the string into an ordered palindrome if possible. Alice can select any two adjacent characters and swap them. Bob can select any single character and replace it with a different character. They can perform their respective operations any number of times. Determine the minimum number of operations (both swaps by Alice and replacements by Bob) required to transform the string into a palindrome. Constraints * 1 ≤ n ≤ 105 * The string contains only lowercase letters \'a\'~\'z\' Input The length n of the string is given on the first line. The string itself is given on the second line. Output Print the minimum number of operations required to make the string a palindrome. Examples Input 4 abca Output 1 Input 5 abcba Output 0","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the string into a palindrome. operations = 0 left, right = 0, n - 1 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"Balanced Brackets You are given a string consisting of characters `(`, `)`, `{`, `}`, `[` and `]`. Write a program to find out whether the given string is balanced or not. A string is considered balanced if it satisfies the following conditions: 1. Opening brackets must be closed by the corresponding closing brackets in the correct order. 2. Every closing bracket should have a previous corresponding opening bracket. For example: - `{[()]}` -> is balanced. - `{[(])}` -> is not balanced. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. Each test case contains a single string which consists of characters `(`, `)`, `{`, `}`, `[` and `]` only. ------ Output ------ For each test case, output a single line containing \\"YES\\" if the string is balanced, otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of the string} ≤ 10^5 ------ Subtasks ------ Subtask 1 (50 points) : 1 ≤ text{length of the string} ≤ 10^3 Subtask 2 (50 points) : 1 ≤ text{length of the string} ≤ 10^5 ------ Sample Input 1 ------ 3 {[()]} {[(])} {{[[(())]]}} ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test 1: All the opening brackets have corresponding closing brackets in the correct order. Test 2: Even though the brackets close, they are not in the correct order. Test 3: All the opening brackets have corresponding closing brackets in the correct order. Note: The string is empty or contains only balanced brackets. The input string only contains characters `(`, `)`, `{`, `}`, `[` and `]`.","solution":"def is_balanced(s): Returns \'YES\' if the given string of brackets is balanced, otherwise returns \'NO\'. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack == [] or stack.pop() != matching_bracket[char]: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(test_cases): Processes each test case and returns corresponding results. results = [] for s in test_cases: results.append(is_balanced(s)) return results"},{"question":"Given an integer array `nums` sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. After removing the duplicates, return the new length of the array. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [1, 1, 2] Output: 2 Explanation: Your function should modify the input array nums such that the first two elements are 1 and 2 respectively. It doesn\'t matter what you leave beyond the returned length. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5 Explanation: Your function should modify the input array nums such that the first five elements are 0, 1, 2, 3, and 4 respectively. It doesn\'t matter what you leave beyond the returned length. Note: - 1 <= nums.length <= 300 - -100 <= nums[i] <= 100 - nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes the duplicates from the sorted array in-place. Args: nums (list): Sorted list of integers Returns: int: The new length of the array with unique elements if not nums: return 0 write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Input The input is given from standard input in the following format. > N a_{1} a_{2} cdots a_{N} - The first line contains a single integer, N. - The second line contains N integers, representing the elements of the array `a`. Output * Print the maximum sum of any subsequence in the array. Constraints * 1 le N le 10000 * -10^5 le a_{i} le 10^5 Examples Input 5 1 -2 3 4 -1 Output 8 Input 8 -4 -2 -3 -1 -7 -5 -6 -8 Output -1","solution":"def max_subsequence_sum(N, a): max_neg = float(\'-inf\') sum_positives = 0 all_negative = True for num in a: if num > 0: sum_positives += num all_negative = False else: if num > max_neg: max_neg = num if all_negative: return max_neg else: return sum_positives"},{"question":"Determine if a given positive integer is a palindrome number. A palindrome number is a number that reads the same backward as forward. Example: The number 121 is a palindrome because it reads the same backward (121) and forward (121), but the number 123 is not a palindrome because it reads 321 backward, which is different from 123. Write a function `is_palindrome(n)` that takes a positive integer `n` (1 ≤ n ≤ 10^9) and returns `True` if the number is a palindrome and `False` otherwise. Function Signature: ```python def is_palindrome(n: int) -> bool: pass ```","solution":"def is_palindrome(n: int) -> bool: Determines if a given positive integer is a palindrome. Parameters: n (int): The positive integer to check (1 ≤ n ≤ 10^9). Returns: bool: True if n is a palindrome, False otherwise. str_n = str(n) return str_n == str_n[::-1]"},{"question":"You are given a sequence of integers where each integer indicates the number of stones in a corresponding pile. There are n piles in total. In one move, you can take any two piles of stones and merge them into a new pile. The cost of this move is equal to the sum of stones in the two original piles. Your task is to find the minimum total cost to merge all the piles into one single pile. For example, given the piles [4, 3, 3, 2], one possible way to merge the piles is: - Merge piles with 3 and 2 stones. The cost is 3 + 2 = 5. The piles are now [4, 3, 5]. - Merge piles with 4 and 3 stones. The cost is 4 + 3 = 7. The piles are now [7, 5]. - Merge piles with 7 and 5 stones. The cost is 7 + 5 = 12. The pile is now [12]. The total cost of this merging process is 5 + 7 + 12 = 24, which is the minimum total cost for this configuration. -----Input----- The first line contains an integer t (1 leq t leq 10) — the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 100) — the number of piles of stones. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the number of stones in each pile. -----Output----- For each test case output a single integer — the minimum total cost to merge all the piles into one single pile. -----Examples----- Input 3 4 4 3 3 2 3 1 2 3 5 1 2 3 4 5 Output 24 9 33 -----Note----- In the first test case, the minimum cost to merge all piles into one is 24. In the second test case, the minimum cost to merge all piles into one is 9. In the third test case, the minimum cost to merge all piles into one is 33.","solution":"import heapq def min_cost_to_merge_piles(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] piles = test_cases[i][1] heapq.heapify(piles) total_cost = 0 while len(piles) > 1: first = heapq.heappop(piles) second = heapq.heappop(piles) cost = first + second total_cost += cost heapq.heappush(piles, cost) results.append(total_cost) return results # Function to parse input and format output for the problem def parse_and_solve(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) piles = list(map(int, lines[index + 1].split())) test_cases.append((n, piles)) index += 2 results = min_cost_to_merge_piles(t, test_cases) return \\"n\\".join(map(str, results))"},{"question":"Write a function that calculates the longest consecutive subsequence of integers in a list. For example, the list `[100, 4, 200, 1, 3, 2]` has a longest consecutive subsequence `[1, 2, 3, 4]`. Constraints - The length of the list will be between 1 and 10^5 elements. - Each element a_i in the list will be between -10^6 and 10^6. Input The input is given as a list of integers. Output Print the length of the longest consecutive subsequence of integers. Example Input [100, 4, 200, 1, 3, 2] Output 4","solution":"def longest_consecutive_subsequence(arr): if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # This ensures we are starting from the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a sequence A of length N, where the i-th element of A is A_i. You can perform the following operation on the sequence: - Choose an integer i (1 leq i leq N-1). Swap the values of A_i and A_{i+1}. Your objective is to determine the minimum number of operations required to make the sequence A non-decreasing. A sequence of length N is considered non-decreasing if it satisfies the following condition for all i (1 leq i < N): - A_i leq A_{i+1} Output the minimum number of operations required to transform the sequence A into a non-decreasing sequence. If it\'s already non-decreasing, output 0. # Example Input 6 3 1 2 5 4 6 Output 2 # Explanation In the given sequence, you can achieve a non-decreasing order with the minimum swaps as follows: - Swap the first and second elements: [1, 3, 2, 5, 4, 6] - Swap the third and fourth elements: [1, 2, 3, 5, 4, 6] - Swap the fourth and fifth elements: [1, 2, 3, 4, 5, 6] Hence, the minimum number of operations is 2.","solution":"def min_operations_to_sort(A): Returns the minimum number of adjacent swaps needed to make the sequence A non-decreasing. n = len(A) swaps = 0 for i in range(n): for j in range(0, n-i-1): if A[j] > A[j+1]: A[j], A[j+1] = A[j+1], A[j] swaps += 1 return swaps"},{"question":"In a small town, there is a unique way of building houses. Each house is represented as a number and is constructed in layers from numbers 1 to N sequentially. For example, if N = 3, the house is built as: ``` 1 2 2 3 3 3 ``` Given a number `N`, you need to find the sum of all numbers used in constructing the house. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single integer N, the number of layers in the house. ------ Output Format ------ For each test case, output a single integer, the sum of all numbers used in constructing the house. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 500 ------ Sample Input 1 ------ 3 3 1 4 ------ Sample Output 1 ------ 10 1 20 ------ Explanation 1 ------ For the first test case, N = 3: - Layer 1: 1 = 1 - Layer 2: 2 + 2 = 4 - Layer 3: 3 + 3 + 3 = 9 Sum = 1 + 4 + 9 = 14 For the second test case, N = 1: - Layer 1: 1 = 1 Sum = 1 For the third test case, N = 4: - Layer 1: 1 = 1 - Layer 2: 2 + 2 = 4 - Layer 3: 3 + 3 + 3 = 9 - Layer 4: 4 + 4 + 4 + 4 = 16 Sum = 1 + 4 + 9 + 16 = 30","solution":"def sum_of_layers(N): Returns the sum of all numbers used in constructing the house with N layers. return sum(i * i for i in range(1, N + 1)) def solve(T, test_cases): Process multiple test cases and return results for each case as a list. results = [] for N in test_cases: results.append(sum_of_layers(N)) return results"},{"question":"The ancient city of Zephyria is celebrated for its intricate network of roads and bridges connecting its numerous islands. Each year, the citizens host a grand festival where they string lights along these roads and bridges in a dazzling display. To make the arrangement more efficient, the city engineers decided to optimize the layout of the light strings by ensuring every island is connected directly or indirectly by the minimum possible length of lights. Zephyria\'s network can be represented as an undirected graph where islands are nodes and roads/bridges are edges with associated lengths. The task is to calculate the total length of lights needed to connect all the islands in an optimal manner. As the chief engineer, you are tasked with writing a program that takes as input the number of islands and the roads/bridges connecting them, and outputs the minimum length of lights required to connect all the islands. Input: The first line will contain an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of islands, and an integer M, the number of roads/bridges. The next M lines contain 3 integers, U, V, and L, where U and V are the islands connected by the road/bridge with a length of L. Output: For each test case, a single line containing the minimum length of lights required to connect all the islands. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 10^5 1 ≤ L ≤ 10^4 1 ≤ U, V ≤ N SAMPLE INPUT 2 4 5 1 2 1 1 3 2 4 1 4 2 4 3 3 4 5 3 3 1 2 7 2 3 10 3 1 5 SAMPLE OUTPUT 6 12 Explanation: In the first test case, the minimum spanning tree of the graph connecting islands 1, 2, 3, and 4 with edges (1-2), (1-3), (2-4) has a total length of 6. In the second test case, the minimum spanning tree connecting islands 1, 2, and 3 with edges (1-3), (1-2) has a total length of 12.","solution":"def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def min_lights_to_connect_islands(T, test_cases): result = [] for test in test_cases: N, M, edges = test edges.sort(key=lambda x: x[2]) parent = list(range(N+1)) rank = [0] * (N+1) mst_weight = 0 edges_in_mst = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += w edges_in_mst += 1 if edges_in_mst == N - 1: break result.append(mst_weight) return result # This function is to read the inputs and call the min_lights_to_connect_islands def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 edges = [] for _ in range(M): U = int(data[index]) V = int(data[index + 1]) L = int(data[index + 2]) edges.append((U, V, L)) index += 3 test_cases.append((N, M, edges)) results = min_lights_to_connect_islands(T, test_cases) for result in results: print(result)"},{"question":"Fran loves cycles and circular structures. He is currently studying circular permutations and wants to understand them better via buffer rotation simulation. Help Fran by writing a function that performs rotations on a circular buffer. Given a circular buffer of size `n` initialized with integers from `1` to `n`, perform `k` right rotations on this buffer and return the resulting sequence. Input The first line contains two integers `n` and `k`, the size of the buffer and the number of right rotations to be performed, respectively. Output Output the resulting sequence after performing `k` right rotations on the initial buffer. Constraints 1 ≤ n ≤ 10^5 1 ≤ k ≤ 10^5 SAMPLE INPUT 5 2 SAMPLE OUTPUT 4 5 1 2 3","solution":"def rotate_buffer(n, k): Perform k right rotations on a circular buffer of size n initialized with integers from 1 to n. # Construct the initial buffer [1, 2, 3, ..., n] buffer = list(range(1, n + 1)) # Compute the effective number of rotations to avoid unnecessary full cycles k %= n # Perform the rotation rotated_buffer = buffer[-k:] + buffer[:-k] return rotated_buffer # Example usage: # print(rotate_buffer(5, 2)) # Expected output: [4, 5, 1, 2, 3]"},{"question":"Imagine you are given an `n x n` chessboard represented as a list of strings, where each string is a row of the chessboard, and each character in the string represents a square on the chessboard. \'.\' indicates an empty square, and \'Q\' indicates a square occupied by a queen. Write a function `is_valid_chessboard(board)` that returns `True` if no two queens attack each other, and `False` otherwise. Two queens attack each other if they share the same row, column, or diagonal. **Examples:** ```python board1 = [ \\".Q..\\", \\"...Q\\", \\"Q...\\", \\"..Q.\\" ] board2 = [ \\"Q...\\", \\".Q..\\", \\"..Q.\\", \\"...Q\\" ] assert is_valid_chessboard(board1) == False assert is_valid_chessboard(board2) == True ``` **Function Signature:** ```python def is_valid_chessboard(board: List[str]) -> bool: # Your code here ```","solution":"def is_valid_chessboard(board): Checks if the given n x n chessboard has no two queens attacking each other. Args: board (List[str]): n x n chessboard represented as a list of strings. Returns: bool: True if no two queens attack each other, False otherwise. n = len(board) # To track queens positions rows = set() cols = set() pos_diagonals = set() neg_diagonals = set() for r in range(n): for c in range(n): if board[r][c] == \'Q\': # Check if the queen can be attacked if r in rows or c in cols or (r - c) in pos_diagonals or (r + c) in neg_diagonals: return False # Otherwise, mark the queen\'s attack paths rows.add(r) cols.add(c) pos_diagonals.add(r - c) neg_diagonals.add(r + c) return True"},{"question":"In a warehouse, there is a row of boxes, each containing either a single item or being empty. You are tasked with optimizing the packing of the items into the minimum number of non-empty consecutive subarrays of boxes. You can perform the following operation any number of times: select any non-empty box, pick the item, and place it into any other box that is either to the left or to the right of it, but not in an already occupied box. Your task is to determine the minimum number of non-empty consecutive subarrays after all items have been optimally packed. Input The first line contains T, the number of test cases. Each of the next T lines contains a string of characters representing the initial state of the boxes. An item is represented by \'1\' and an empty box by \'0\'. Output For each test case, output the minimum number of non-empty consecutive subarrays of boxes. Constraints 1 ≤ T ≤ 200 1 ≤ length of each string ≤ 1000 SAMPLE INPUT 3 10001 11111 101010 SAMPLE OUTPUT 2 1 3","solution":"def min_non_empty_subarrays(test_cases): results = [] for boxes in test_cases: count = 0 in_subarray = False for box in boxes: if box == \'1\' and not in_subarray: count += 1 in_subarray = True elif box == \'0\': in_subarray = False results.append(count) return results def solve(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = lines[1:T+1] results = min_non_empty_subarrays(test_cases) return results"},{"question":"Ria, a seasoned botanist, maintains a detailed record of her plant collection in Excel. Each row in her spreadsheet signifies a unique plant, while each column embodies a distinct attribute, such as water frequency, sunlight requirement, growth stage, etc. The rows are indexed from 1 to n, and the columns from 1 to m. One day, Ria realizes that there are certain attributes (columns) that she doesn\'t need to monitor anymore. Hence, she wants to remove specific columns from her records. She will provide a list of columns to be deleted. Your task is to help her create a new spreadsheet from which these columns are removed, preserving the order of the remaining columns and rows. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the spreadsheet respectively. The following n lines each contain m integers, representing the attribute values of the plants. The line after that contains a single integer k (1 ≤ k ≤ m) — the number of columns to be deleted. The last line contains k distinct integers c1, c2, ..., ck (1 ≤ ci ≤ m), the indices of the columns to be deleted. Output Print the new spreadsheet after removing the specified columns. Each row must be printed on a new line, and each value should be separated by a space. Examples Input 4 5 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 2 2 4 Output 10 30 50 60 80 100 110 130 150 160 180 200 Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 1 3 Output 1 2 4 5 6 8 9 10 12 Note In the first example, columns 2 and 4 are removed from the spreadsheet: | 10 | ~20~ | 30 | ~40~ | 50 | | 60 | ~70~ | 80 | ~90~ | 100 | | 110 | ~120~ | 130 | ~140~ | 150 | | 160 | ~170~ | 180 | ~190~ | 200 | In the second example, column 3 is removed from the spreadsheet: | 1 | 2 | ~3~ | 4 | | 5 | 6 | ~7~ | 8 | | 9 | 10 | ~11~ | 12 |","solution":"def remove_columns(n, m, spreadsheet, k, columns_to_delete): Removes specified columns from the spreadsheet. Parameters: - n (int): Number of rows. - m (int): Number of columns. - spreadsheet (list of list of int): The plant attribute records. - k (int): Number of columns to delete. - columns_to_delete (list of int): List of column indices to delete (1-based indices). Returns: - list of list of int: The new spreadsheet with the specified columns removed. # Convert columns_to_delete to 0-based indices columns_to_delete = set(col - 1 for col in columns_to_delete) new_spreadsheet = [] for row in spreadsheet: new_row = [row[j] for j in range(m) if j not in columns_to_delete] new_spreadsheet.append(new_row) return new_spreadsheet def format_spreadsheet(spreadsheet): Formats the spreadsheet into a string with each row on a new line. Parameters: - spreadsheet (list of list of int): The spreadsheet to format. Returns: - str: The formatted spreadsheet as a string. return \\"n\\".join(\\" \\".join(map(str, row)) for row in spreadsheet)"},{"question":"You are given a grid of size NxM, with each cell either being open (represented by a \'.\') or blocked (represented by a \'#\'). You can move to any open cell that shares a side with your current cell. You start at the cell (0,0) and need to determine the minimum number of steps required to reach the cell (N-1, M-1). If it\'s not possible to reach the destination cell, you should return -1. -----Constraints----- - 1 leq N, M leq 1000 - The grid is guaranteed to have no leading or trailing spaces, and each row contains exactly M characters. -----Input----- Input is given from Standard Input in the following format: N M grid_row_1 grid_row_2 . . . grid_row_N -----Output----- Print the minimum number of steps required to reach the cell (N-1, M-1). If it\'s not possible to reach the destination, print -1. -----Sample Input----- 3 3 ... .#. ... -----Sample Output----- 4 In this example, you can move from (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) in four steps to reach the bottom-right corner.","solution":"from collections import deque def min_steps_to_reach_end(N, M, grid): Returns the minimum number of steps required to reach (N-1, M-1) from (0, 0) in a NxM grid. If it\'s not possible to reach the destination, it returns -1. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Directions: right, down, left, up directions = [(0,1), (1,0), (0,-1), (-1,0)] visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if (x, y) == (N-1, M-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps+1)) return -1"},{"question":"Professor Numeros is conducting a research project that involves generating unique identification codes for newly discovered species. He has decided to use a specific format for these codes, but he needs your help to verify them. The code format consists of alternating letters and digits, starting with a letter. For example, \\"A1B2C3\\" is valid, but \\"1A2B3C\\" and \\"A111B2\\" are not. Write a program that takes a list of potential identification codes and checks each one to determine if it follows the specified format. If a code is valid, output \\"VALID\\", otherwise output \\"INVALID\\". Input The first line contains an integer n (1 ≤ n ≤ 100), the number of identification codes to check. The next n lines each contain a single identification code string consisting of uppercase letters and digits with a maximum length of 100. Output For each identification code, print \\"VALID\\" if the code follows the alternating letter-digit format starting with a letter, and \\"INVALID\\" otherwise. Examples Input 3 A1B2C3 1A2B3C A111B2 Output VALID INVALID INVALID Input 2 M2N3P4Q5 Z9Y4X7 Output VALID VALID","solution":"def check_identification_codes(codes): Checks if each identification code in the list follows the alternating letter-digit format, starting with a letter. results = [] for code in codes: is_valid = True if len(code) < 2 or not code[0].isalpha(): is_valid = False else: for i in range(1, len(code)): if i % 2 == 1 and not code[i].isdigit(): is_valid = False break elif i % 2 == 0 and not code[i].isalpha(): is_valid = False break results.append(\\"VALID\\" if is_valid else \\"INVALID\\") return results"},{"question":"A musical concert involves a series of sessions, where each session is conducted by a band. Each band member has a sequence of timestamps denoting when they entered or left the stage. The entry of the i-th band member is denoted by the integer i, while the departure is denoted by the integer -i. A valid session must follow these rules: - A member can enter the stage only once during a session. - A member cannot leave the stage unless they have already entered it. - The session starts with an empty stage and ends with an empty stage. - At any point during the session, the order of entries and departures should maintain a valid sequence. Given a list of events without timestamps, your task is to partition the list of events into valid sessions, or state that it is impossible to do so. For example, if the list is given as [1, 2, -1, -2, 3, -3], it can be partitioned into: [1, 2, -1, -2] and [3, -3]. # Input The first line contains an integer n (1 le n le 10^5), representing the number of events. The second line contains n integers e_1, e_2, ..., e_n (1 le |e_i| le 10^5) representing the events. # Output If it is impossible to partition the events into valid sessions, print -1. Otherwise, print the number of sessions d. In the next line, print d integers s_1, s_2, ..., s_d where s_i is the number of events in the i-th session. If there are multiple valid partitions, any one of them will be acceptable. # Example Input ``` 6 1 2 -1 -2 3 -3 ``` Output ``` 2 4 2 ``` Input ``` 5 1 2 -1 3 -3 ``` Output ``` -1 ``` Input ``` 7 1 -1 2 -2 3 -3 4 ``` Output ``` -1 ``` # Explanation In the first example, a valid partition into two sessions is [1, 2, -1, -2] and [3, -3]. In the second example, it is not possible to form valid sessions as 2 leaves 1 before leaving. In the third example, it is not possible to partition the events since 4 does not leave the stage.","solution":"def partition_invalid_sessions(events): Partition the list of events into valid sessions, or state that it is impossible to do so. :param events: List of integers representing entry and exit events. :return: Tuple (number of sessions, list of session lengths) or -1 if invalid. event_count = len(events) session_lengths = [] current_session = set() entered = set() session_start = 0 for i in range(event_count): event = events[i] member = abs(event) if event > 0: # Entry if member in current_session: return -1 # Member re-entering without leaving current_session.add(member) entered.add(member) else: # Exit if member not in entered: return -1 # Member leaving without entering if member not in current_session: return -1 # Member exiting without being on stage current_session.remove(member) if not current_session: session_lengths.append(i - session_start + 1) session_start = i + 1 entered.clear() if current_session: return -1 # Members still on stage return len(session_lengths), session_lengths"},{"question":"You are given an array of integers, and your task is to check if the array forms a palindrome. An array forms a palindrome if it reads the same forward and backward. Your task is to write a function that determines if the given array is a palindrome. -----Input----- The input consists of: 1. First line contains an integer, n (1 ≤ n ≤ 1000), representing the number of elements in the array. 2. Second line contains n space-separated integers, a_i (-10^9 ≤ a_i ≤ 10^9), which represent the elements of the array. -----Output----- Output \\"YES\\" if the array is a palindrome, otherwise output \\"NO\\". -----Examples----- Input 5 1 2 3 2 1 Output YES Input 4 1 2 3 4 Output NO","solution":"def is_palindrome(array): This function checks if the given array is a palindrome. :param array: List of integers :return: \\"YES\\" if the array is a palindrome, otherwise \\"NO\\" if array == array[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Problem Given a grid of n × n containing integers, you need to perform a set of k operations on the grid. The operations describe swaps, additions, and subtractions of the cell values. Each operation is defined as follows: * \\"swap r1 c1 r2 c2\\" swaps the values of the cells at coordinates (r1, c1) and (r2, c2). * \\"add r c v\\" adds the value v to the cell at coordinate (r, c). * \\"subtract r c v\\" subtracts the value v from the cell at coordinate (r, c). The grid elements and operations are 1-indexed. **Constraints** The input satisfies the following conditions: * 1 ≤ n ≤ 100 * 1 ≤ k ≤ 200 * -1000 ≤ grid[i][j] ≤ 1000 * 1 ≤ r, c ≤ n * -1000 ≤ v ≤ 1000 **Input** The first line contains two integers n and k, separated by spaces. The next n lines contain n integers each, representing the grid. The following k lines each represent an operation, following one of the specified formats. **Output** Output the updated grid after applying all the operations. **Examples** **Input** ``` 3 3 1 2 3 4 5 6 7 8 9 swap 1 1 3 3 add 2 2 10 subtract 3 1 4 ``` **Output** ``` 9 2 3 4 15 6 3 8 1 ``` **Input** ``` 4 2 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 add 1 1 5 subtract 4 4 3 ``` **Output** ``` 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 12 ```","solution":"def process_operations(n, k, grid, operations): for operation in operations: parts = operation.split() if parts[0] == \\"swap\\": r1, c1, r2, c2 = int(parts[1])-1, int(parts[2])-1, int(parts[3])-1, int(parts[4])-1 grid[r1][c1], grid[r2][c2] = grid[r2][c2], grid[r1][c1] elif parts[0] == \\"add\\": r, c, v = int(parts[1])-1, int(parts[2])-1, int(parts[3]) grid[r][c] += v elif parts[0] == \\"subtract\\": r, c, v = int(parts[1])-1, int(parts[2])-1, int(parts[3]) grid[r][c] -= v return grid"},{"question":"Ashok is a fan of number patterns, and he has come across another interesting series. Your task is to help him determine the nth term of this series. Given a series where the nth term is defined as the sum of the first n natural numbers each increased by n, find the nth term of the series. The formula for the nth term is: nth term = n + (n+1) + (n+2) + ... + (2n-1) Example 1: Input: n = 1 Output: 1 Explanation: Sum of numbers from 1 to 1 is 1. Example 2: Input: n = 3 Output: 18 Explanation: Sum of numbers from 3 to 5 is 3 + 4 + 5 = 12. Your Task: You do not need to read the input or print anything. Complete the function nthTerm() which accepts an integer n as input parameter and returns the nth term of the series. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 5000","solution":"def nthTerm(n): Returns the nth term of the series where the nth term is defined as the sum of the first n natural numbers each increased by n. That is, nth term = n + (n+1) + (n+2) + ... + (2n-1). Parameters: n: an integer representing the nth term to find Returns: An integer representing the nth term of the series # Calculate the nth term using the formula n * (3n - 1) / 2 nth_term = n * (3*n - 1) // 2 return nth_term"},{"question":"A scientist wants to investigate the weather patterns in a city by analyzing temperature data recorded over several days. She has a set of temperature readings taken at noon for a number of consecutive days. To better understand the overall trend, she wants to identify the longest contiguous subarray of days for which the temperature was non-decreasing. Given an integer array temperatures where temperatures[i] is the temperature recorded on the i-th day, write a function to determine the length of the longest contiguous subarray of days for which each subsequent day\'s temperature is greater than or equal to the previous day\'s temperature. -----Input----- The input consists of the following: 1. An integer n (1 <= n <= 10^5) – the number of days for which temperature data is provided. 2. An array of n integers temperatures (1 <= temperatures[i] <= 10^9) – the temperature readings for the n days. -----Output----- Output a single integer – the length of the longest contiguous subarray of days with non-decreasing temperatures. -----Example----- Input 7 5 6 6 4 3 8 9 Output 3 -----Explanation----- In this example, the possible contiguous subarrays of non-decreasing temperatures are [5, 6, 6] and [4, 3, 8, 9] but the longest one is [8, 9], thus the function outputs 2. Input 5 1 3 5 4 5 Output 3 Explanation: The contiguous non-decreasing subarrays are: - [1, 3, 5] with length 3 - [4, 5] with length 2 The longest one has length 3, thus the function outputs 3.","solution":"def longest_non_decreasing_subarray(temperatures): Returns the length of the longest contiguous subarray of days with non-decreasing temperatures. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] >= temperatures[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are managing a team of developers working on a project. Each developer has a different rate of productivity, defined as lines of code they can write per hour. You are given a list of developers with their respective productivity rates and the number of hours each developer has worked during the week. You need to determine the total number of lines of code written by all developers during the week. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100), the number of developers. The next n lines each contain an integer p (1 ≤ p ≤ 100), representing the productivity rate (lines of code per hour) of each developer, followed by an integer h (1 ≤ h ≤ 100), representing the number of hours that developer has worked during the week. -----Output----- Print a single integer: the total number of lines of code written by all developers. -----Examples----- Input 3 10 5 20 4 30 6 Output 370 Input 2 50 8 40 7 Output 750 -----Note----- In the first sample, the total lines of code written by all developers would be calculated as follows: First developer: 10 lines/hour * 5 hours = 50 lines Second developer: 20 lines/hour * 4 hours = 80 lines Third developer: 30 lines/hour * 6 hours = 180 lines Total: 50 + 80 + 180 = 310 lines In the second sample, the total lines of code written by all developers would be calculated as follows: First developer: 50 lines/hour * 8 hours = 400 lines Second developer: 40 lines/hour * 7 hours = 280 lines Total: 400 + 280 = 680 lines","solution":"def total_lines_of_code(n, productivity_hours): Calculate the total number of lines of code written by all developers. Parameters: n (int): Number of developers productivity_hours (list of tuples): List of tuples where each tuple contains (productivity rate, hours worked) Returns: int: Total lines of code written by all developers total_lines = 0 for p, h in productivity_hours: total_lines += p * h return total_lines"},{"question":"You are given a series of integers. For each given integer, your task is to determine the minimum possible length of the sequence of non-negative integers such that the bitwise XOR of the entire sequence is zero and all elements in the sequence do not exceed the given integer. If it is not possible to achieve such a sequence, return -1. -----Input----- The first line of the input contains a single integer T (1 le T le 100) — the number of queries. Each of the next T lines contains one integer k (0 le k le 1000) — the maximum integer allowed in the sequence. -----Output----- For each query, print a single integer — the minimum possible length of the sequence, or -1 if it is not possible to form such a sequence. -----Example----- Input: 3 1 2 3 Output: 2 2 3 -----Explanation----- In the first query, a sequence [0, 1] has a bitwise XOR of 0. In the second query, a sequence [0, 2] has a bitwise XOR of 0. In the third query, a sequence [0, 1, 2] has a bitwise XOR of 3, which can be complemented by [0, 3] to make bitwise XOR of the whole rearranged sequence equal to 0.","solution":"def minimum_xor_sequence_length(k): For a given integer k, determines the minimum possible length of the sequence of non-negative integers such that the bitwise XOR of the entire sequence is zero and all elements in the sequence do not exceed k. if k == 0: return 1 elif k == 1: return 2 elif k == 2 or k == 3: return 2 else: return -1 def solve_queries(queries): return [minimum_xor_sequence_length(k) for k in queries]"},{"question":"Given a string of lowercase alphabets, write a program to find the first non-repeating character in the string. If there is no non-repeating character, return an underscore (\\"_\\"). **Input:** A single string consisting of lowercase alphabets. **Output:** The first non-repeating character in the string or an underscore (\\"_\\") if there is no such character. **Examples:** Input: ``` swiss ``` Output: ``` w ``` Input: ``` aabbcc ``` Output: ``` _ ``` Input: ``` programming ``` Output: ``` p ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s, or an underscore (\\"_\\") if there is no such character. from collections import OrderedDict # A dictionary to store the count of each character char_count = OrderedDict() # Count the occurrence of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with count 1 for char, count in char_count.items(): if count == 1: return char # If no non-repeating character is found, return \\"_\\" return \\"_\\""},{"question":"You are given a string s consisting of lowercase English letters. You want to split the string into the minimum number of substrings such that each substring contains unique characters (i.e., no character appears more than once in a substring). Write a function that takes the string s as input and returns the minimum number of substrings needed. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5). Output Print one integer — the minimum number of substrings needed. Examples Input `abac` Output `2` Input `abcdefghijklmnopqrstuvwxyz` Output `1` Input `aa` Output `2` Note For the first example, we can split the string into \\"ab\\" and \\"ac\\". For the second example, the entire string already contains unique characters, so we need only one substring. For the third example, since both characters are the same, we need two substrings, each containing one of the characters.","solution":"def min_substrings_with_unique_chars(s): Returns the minimum number of substrings with unique characters. substrings_count = 0 unique_chars = set() for char in s: if char in unique_chars: substrings_count += 1 unique_chars = set() unique_chars.add(char) return substrings_count + 1 if unique_chars else substrings_count"},{"question":"You are given a string S consisting of lowercase English letters. Determine the length of the longest palindrome that can be formed using the characters from S. You can rearrange the letters of S if needed to form the palindrome. Example 1: Input: \\"abccccdd\\" Output: 7 Explanation: One possible longest palindrome is \\"dccaccd\\", which has a length of 7. Example 2: Input: \\"a\\" Output: 1 Explanation: The longest possible palindrome that can be formed is \\"a\\", which has a length of 1. Note: 1 <= S.length <= 2000 S consists of lowercase English letters only.","solution":"def longest_palindrome(s): Determine the length of the longest palindrome that can be formed using the characters from the input string. :param s: Input string consisting of lowercase English letters :return: Length of the longest palindrome from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Given an array of integers, return a new array containing only the positive numbers, sorted in ascending order. If the input array does not contain any positive integers, return an empty array. The input array will always contain at least one element, and you do not need to account for different data types.","solution":"def filter_and_sort_positive_numbers(arr): Returns a new array containing only the positive numbers from the input array, sorted in ascending order. If the input array does not contain any positive integers, returns an empty array. return sorted([x for x in arr if x > 0])"},{"question":"Create a function that takes a string as input and returns the character that appears the most frequently. If there is a tie, return the character that appears first in the string. The input string will contain only lowercase letters and no spaces. Function signature: `def most_frequent_character(s: str) -> str:` Example: ``` most_frequent_character(\\"hello\\") => \\"l\\" most_frequent_character(\\"aabbbcccc\\") => \\"c\\" most_frequent_character(\\"abcabc\\") => \\"a\\" most_frequent_character(\\"abcbaac\\") => \\"a\\" ```","solution":"def most_frequent_character(s: str) -> str: from collections import defaultdict frequency = defaultdict(int) for char in s: frequency[char] += 1 max_freq = -1 result_char = None for char in s: if frequency[char] > max_freq: max_freq = frequency[char] result_char = char return result_char"},{"question":"Given a list of `N` integers, find the length of the longest subsequence that can be removed from the list such that the remaining elements are sorted in non-decreasing order. The subsequence to be removed does not have to be contiguous, but we must retain the relative order of the remaining elements. -----Input----- - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of integers in the list. - The second line contains `N` space-separated integers representing the elements of the list. -----Output----- For each test case, output the length of the longest subsequence that can be removed to sort the remaining elements in non-decreasing order. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^9 ≤ List elements ≤ 10^9 -----Example----- Input 2 5 1 3 2 1 4 4 4 3 2 1 Output 2 3 -----Explanation----- Test case 1: By removing the subsequence `3 2`, the list transforms into `[1, 1, 4]` which is sorted in non-decreasing order. The length of this subsequence is `2`. Test case 2: By removing the subsequence `4 3 2`, the list transforms into `[1]` which is sorted in non-decreasing order. The length of this subsequence is `3`.","solution":"def longest_subseq_to_remove(A): Returns the length of the longest subsequence that can be removed from list A so that the remaining elements are sorted in non-decreasing order. from bisect import bisect_left def length_of_lis(sequence): Computes the length of the longest increasing subsequence in the given sequence. lis = [] for x in sequence: pos = bisect_left(lis, x) if pos == len(lis): lis.append(x) else: lis[pos] = x return len(lis) # Length of the longest increasing subsequence lis_length = length_of_lis(A) # Length of the longest subsequence that can be removed return len(A) - lis_length def solve(t, test_cases): results = [] for i in range(t): N, A = test_cases[i] result = longest_subseq_to_remove(A) results.append(result) return results"},{"question":"In a small software company, a developer named Alex has been assigned a task to work with arrays. The task is to find pairs of numbers in an unsorted array that add up to a specific target sum. Alex must develop a solution to efficiently find all unique pairs of integers in the array that sum up to the given target. Input Format You are given **N** which represents the number of elements in the array. The next line contains **N** space-separated integers representing the elements of the array. The last line contains a single integer **target** which represents the target sum. Constraints 2 leq N leq 10^5 -10^9 leq text{array element} leq 10^9 -10^9 leq text{target} leq 10^9 Output Format Output the unique pairs of numbers from the array in any order. Each pair should be printed on a new line in the format (num1, num2). If no pairs are found that satisfy the condition, print \\"No pairs found.\\" Sample Input 6 1 5 7 -1 5 3 6 Sample Output (1, 5) (7, -1) Explanation The pairs (1, 5) and (7, -1) both add up to the target 6. The pair (5, 1) is considered the same as (1, 5) and hence not printed again. Identically, if there are multiple instances of the same number forming pairs, they will not be duplicated in the output. Create a function to assist Alex in finding the unique pairs efficiently given the constraints.","solution":"def find_pairs_with_sum(nums, target): Finds all unique pairs in the list that sum up to the given target. Returns a list of tuples representing the pairs. seen = {} pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen[num] = True return list(pairs) def print_pairs(pairs): Prints the pairs in the requested format. if not pairs: print(\\"No pairs found.\\") else: for pair in pairs: print(f\\"({pair[0]}, {pair[1]})\\") # Input reading function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nums = list(map(int, data[1:N+1])) target = int(data[N+1]) pairs = find_pairs_with_sum(nums, target) print_pairs(pairs) if __name__ == \\"__main__\\": main()"},{"question":"Ash has been given a task by his computer science professor. He needs to analyze the efficiency of sorting algorithms. Ash is provided with multiple arrays. For each array, he needs to determine the minimum number of adjacent swaps required to sort the array in ascending order. Can you help Ash accomplish this task? ------ Input: ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains the description of a test case: Each test case starts with an integer N denoting the number of elements in the array followed by N integers denoting the elements of the array. ------ Output: ------ For each test case, print a single line containing the minimum number of adjacent swaps required to sort the array in ascending order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ text{{Array elements}} ≤ 10^{9} ----- Sample Input 1 ------ 2 3 3 2 1 4 4 3 2 1 ----- Sample Output 1 ------ 3 6","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) # Number of elements remaining in the left subarray j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def min_adjacent_swaps(test_cases): results = [] for case in test_cases: N, arr = case temp_arr = [0]*N result = merge_sort_and_count(arr, temp_arr, 0, N-1) results.append(result) return results"},{"question":"```if:csharp Implement a Simple Calculator Class Create a SimpleCalculator class with basic arithmetic operations. The calculator should support the following methods: method | return type | description ---|---|--- Add | int | Accepts two integer arguments and returns their sum Subtract | int | Accepts two integer arguments and returns their difference Multiply | int | Accepts two integer arguments and returns their product Divide | int | Accepts two integer arguments and returns their quotient (integer division) The Divide method should throw an ArgumentException if the second argument is zero. ``` ```if-not:csharp Implement a Simple Calculator Prototype Create a SimpleCalculator prototype with basic arithmetic operations. The calculator should support the following methods: method | description ---|--- add | accepts two arguments and returns their sum subtract | accepts two arguments and returns their difference multiply | accepts two arguments and returns their product divide | accepts two arguments and returns their quotient (integer division) The divide method should throw an error if the second argument is zero. ```","solution":"class SimpleCalculator: def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a // b"},{"question":"A town has n houses located on a grid at integer coordinates. Each house is represented as (x, y). You want to build a new library which should minimize the maximum walking distance from any house to the library. The walking distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. Write a program to determine the optimal coordinates to build the library so that the maximum walking distance to any house is minimized. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of houses. - The next n lines each contain two integers x and y (0 ≤ x, y ≤ 10^6) — the coordinates of the houses. Output For each test case, output two integers representing the optimal coordinates to build the library. Example Input 2 3 1 1 2 2 3 3 4 1 2 2 1 3 4 4 3 Output 2 2 2 2 Explanation In the first test case, placing the library at (2, 2) minimizes the maximum walking distance to any of the houses: - Distance to (1, 1): 2 - Distance to (2, 2): 0 - Distance to (3, 3): 2 In the second test case, the library can be optimally placed at (2, 2): - Distance to (1, 2): 1 - Distance to (2, 1): 1 - Distance to (3, 4): 3 - Distance to (4, 3): 3 The maximum walking distance in this configuration is minimized.","solution":"def optimal_library_location(t, test_cases): results = [] for case in test_cases: n = case[0] coordinates = case[1] # Separate the x and y coordinates x_coords = [coordinate[0] for coordinate in coordinates] y_coords = [coordinate[1] for coordinate in coordinates] # Sort the coordinates x_coords.sort() y_coords.sort() # The optimal location for the library is at the median of the coordinates if n % 2 == 1: median_x = x_coords[n // 2] median_y = y_coords[n // 2] else: median_x = x_coords[(n // 2) - 1] median_y = y_coords[(n // 2) - 1] results.append((median_x, median_y)) return results # Here is the function that uses the arguments provided in the task. def solve(t, inputs): return optimal_library_location(t, inputs)"},{"question":"You are given a list of integers. Determine the smallest non-negative integer not present in the list. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of integers in the list. The second line contains n distinct integers a1, a2, ..., an (-109 ≤ ai ≤ 109), the integers in the list. Output Print a single integer, the smallest non-negative integer that is not present in the list. Examples Input 5 0 3 1 6 2 Output 4 Input 3 -1 -2 -3 Output 0 Input 4 0 1 2 3 Output 4","solution":"def smallest_missing_non_negative_integer(n, arr): Determines the smallest non-negative integer that is not present in the list. Parameters: n (int): Number of integers in the list. arr (list of int): List of n distinct integers. Returns: int: The smallest non-negative integer not present in the list. number_set = set(arr) smallest_missing = 0 while smallest_missing in number_set: smallest_missing += 1 return smallest_missing"},{"question":"In a magical forest, there are N magical creatures. Each creature has a certain amount of magic power which can be represented as an integer value. Every night, the creatures participate in a magic duel where each creature can attack exactly one other creature, reducing its magic power. The reduction amount is proportional to the attacker\'s magic power. Specifically, if creature i with magic power pi attacks creature j with magic power pj, the new magic power of creature j becomes pj - pi. If this results in the creature\'s magic power becoming negative or zero, that creature\'s magic power is considered to be zero. The magic duel continues until no creature can attack another because its own magic power is zero. Your task is to simulate the outcome of the duel and determine the minimum positive magic power among all creatures with non-zero magic power at the end of the duel. If all creatures have zero magic power at the end of the duel, return -1. ------ Input ------ The first line of input contains an integer N (1 ≤ N ≤ 1000), the number of magical creatures. The second line contains N space-separated integers representing the magic powers of the magical creatures. The i-th integer represents the initial magic power pi (1 ≤ pi ≤ 1000000000). ------ Output ------ Output the minimum positive magic power among all creatures with non-zero magic power at the end of the duel, or -1 if all creatures end up with zero magic power. ------ Example ------ Input: 3 6 9 12 Output: 3 Explanation: - Creature 1 attacks Creature 2, reducing Creature 2\'s power from 9 to 3. - Creature 1 attacks Creature 3, reducing Creature 3\'s power from 12 to 6. - Creature 3 attacks Creature 1, reducing Creature 1\'s power from 6 to 0. - Creature 2 cannot attack as its power is 3 and would result in it going negative. - Creature 3 attacks Creature 2, reducing Creature 2\'s power from 3 to 0. - Creature 3 is the only one left with a non-zero power of 3. Input: 2 15 25 Output: 5 Explanation: - Creature 1 attacks Creature 2, reducing Creature 2\'s power from 25 to 10. - Creature 2 attacks Creature 1, reducing Creature 1\'s power from 15 to 5. - Creature 1 attacks Creature 2, reducing Creature 2\'s power from 10 to 5. - Both creatures have 5 power left, and both have non-zero magic power with the minimum being 5. The problem tests your ability to simulate a sequence of operations and handle large numbers efficiently.","solution":"def min_positive_magic_power(N, magic_powers): Returns the minimum positive magic power among all creatures with non-zero magic power at the end of the duel. If all creatures end up with zero magic power, returns -1. from math import gcd def gcd_of_list(lst): Returns the GCD of elements in the list. if len(lst) == 1: return lst[0] current_gcd = lst[0] for num in lst[1:]: current_gcd = gcd(current_gcd, num) return current_gcd result_gcd = gcd_of_list(magic_powers) if result_gcd > 0: return result_gcd else: return -1"},{"question":"You are given a grid of numbers. You need to find the sum of the elements in each column and then output the grid after appending the sum of each column as a new row at the bottom. The grid may have varying column counts but will always be a rectangular matrix. Input The first line contains two integers, n (the number of rows) and m (the number of columns). The following n lines each contain m integers, representing the grid of numbers. Output Print the resulting grid after appending the sum of each column as the last row. Examples Input 4 3 1 2 3 4 5 6 7 8 9 1 1 1 Output 1 2 3 4 5 6 7 8 9 1 1 1 13 16 19","solution":"def append_column_sums(n, m, grid): Takes the number of rows (n), number of columns (m), and the grid of numbers, returns the grid after appending the sum of each column as a new row at the bottom. column_sums = [0] * m for row in grid: for i in range(m): column_sums[i] += row[i] grid.append(column_sums) return grid"},{"question":"In a country XYZ, there is a new banking system that uses a unique way to encode account numbers. This encoding is done using the following rules: 1. Each digit in the account number is taken modulo 9. 2. The sum of the digits in the original account number is then taken modulo 9. 3. If the sum is equal to 0, then the encoded account number is equal to the original account number. 4. If the sum is not equal to 0, then each digit in the original account number is replaced by the sum modulo 9. Your task is to write a program that encodes a given account number using the above rules. *Input* The first line contains a single integer T - the number of account numbers. T account numbers follow. The first line of each test case contains a single integer N - the account number. *Output* In T lines, print T strings - the encoded account numbers for the corresponding test cases. Constraints 1 ≤ T ≤ 100 1 ≤ length of N ≤ 18 N consists of only digits and does not contain leading zeros. SAMPLE INPUT 3 123 456 789 SAMPLE OUTPUT 123 228 135","solution":"def encode_account_number(account_number): digit_sum = sum(int(digit) for digit in account_number) % 9 if digit_sum == 0: return account_number else: return \'\'.join(str(digit_sum) for _ in account_number) def encode_multiple_account_numbers(T, account_numbers): return [encode_account_number(account_number) for account_number in account_numbers]"},{"question":"Given a list of integers, you have to find two distinct elements such that their sum is closest to zero. If multiple pairs have the same closest-to-zero sum, print the one with the smallest absolute values of the elements. If there are still multiple pairs, return the lexicographically smallest pair (sorted order). Input Format: The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers. Output Format: Two integers, the pair with the sum closest to zero. Constraints: 1 ≤ N ≤ 1000 -10000 ≤ element ≤ 10000 SAMPLE INPUT 6 -1 2 1 -4 3 -2 SAMPLE OUTPUT -1 1 Explanation The pair (-1, 1) has the sum closest to zero, which is 0. There are other pairs such as (2, -2) with the same sum, but (-1, 1) has the smallest absolute values.","solution":"def find_closest_zero_pair(arr): arr = sorted(arr) left, right = 0, len(arr) - 1 closest_sum = float(\'inf\') result = (float(\'inf\'), float(\'inf\')) while left < right: current_sum = arr[left] + arr[right] # If this pair is closer to zero, update result if abs(current_sum) < abs(closest_sum) or (abs(current_sum) == abs(closest_sum) and (abs(arr[left]), abs(arr[right])) < (abs(result[0]), abs(result[1]))): closest_sum = current_sum result = (arr[left], arr[right]) # Move left pointer rightwards or right pointer leftwards if current_sum < 0: left += 1 else: right -= 1 return sorted(result)"},{"question":"Aliqua the cat loves baking cookies and often experiments with different recipes. To maintain her recipe notes clean and readable, she always ensures to list the ingredients in alphabetical order. But sometimes, she is in a hurry and scrambles the list. You need to help Aliqua by writing a program that sorts her ingredient list alphabetically. The provided ingredient list is a single string where each ingredient is separated by a comma. -----Input----- The input consists of only one line. The single line contains a string s representing the list of ingredients (1 ≤ |s| ≤ 10^6). Each ingredient name consists of lowercase alphabet characters and is separated by commas. -----Output----- Print all the ingredients in alphabetical order, separated by commas. -----Examples----- Input flour,sugar,butter,eggs Output butter,eggs,flour,sugar Input salt,pepper,cumin,oregano,basil Output basil,cumin,oregano,pepper,salt Input chocolate,vanilla,cream,butter Output butter,chocolate,cream,vanilla -----Note----- In the first example, the ingredients in alphabetical order are butter, eggs, flour, sugar. So the output should be butter, eggs, flour, sugar. In the second example, the ingredients in alphabetical order are basil, cumin, oregano, pepper, salt.","solution":"def sort_ingredients(input_string): Sorts a string of comma-separated ingredients alphabetically. Parameters: input_string (str): A string containing the ingredients separated by commas. Returns: str: A string of the ingredients sorted alphabetically, separated by commas. ingredients = input_string.split(\',\') sorted_ingredients = sorted(ingredients) return \',\'.join(sorted_ingredients)"},{"question":"Write a function called `minimizeArray` that takes an array of integers and removes the minimum number of elements required so that no three consecutive elements are in increasing order. The function should return the length of the modified array. Examples: Input: [1, 2, 3, 5, 4] Output: 4 Explanation: We can remove either \'3\' or \'5\' to ensure no three consecutive elements are increasing. The possible valid arrays are [1, 2, 3, 4] or [1, 2, 5, 4]. Input: [4, 3, 2, 1] Output: 4 Explanation: The array is already in non-increasing order, so no removal is required. Your Task: You don’t need to read input or print anything. Your task is to complete the function `minimizeArray(arr)` which takes an array of integers `arr` as input parameter and returns the length of the modified array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def minimizeArray(arr): n = len(arr) if n < 3: return n removed_count = 0 i = 0 while i < n - 2: if arr[i] < arr[i + 1] < arr[i + 2]: removed_count += 1 if arr[i + 1] < arr[i + 2]: # Remove arr[i+1] i += 2 # Skip next check as we consider it \\"removed\\" else: i += 3 # Skip two elements if we removed third consecutive else: i += 1 return n - removed_count"},{"question":"You are tasked with creating a library system to manage book checkouts in a way that ensures no book is checked out by more than one person at any given time and to keep track of who currently has each book. Your system should be able to handle multiple operations, such as adding a book, removing a book, checking out a book, returning a book, and querying who has a book. -----Input----- The first line of input consists of an integer 0 le m le 100000, the number of operations. Each of the following m lines contains one operation. Each operation is one of the following: - \\"ADD b\\" - Add a book with name b to the library. Book names are unique and consist of at most 30 characters, including upper and lower case letters, digits, and underscores. - \\"REMOVE b\\" - Remove a book with name b from the library. The book must not be currently checked out, otherwise, this operation is invalid. - \\"CHECKOUT b u\\" - Checkout the book with name b to the user u. User names consist of at most 30 characters, including upper and lower case letters, digits, and underscores. The book must be available (not already checked out and currently in the library) for this operation to be valid. - \\"RETURN b\\" - Return the book with name b to the library. The book must be currently checked out for this operation to be valid. - \\"WHO_HAS b\\" - Query who currently has the book with name b. If the book is checked out, output the name of the user who has it. If it is not checked out, or if the book does not exist in the library, output \\"NOBODY\\". -----Output----- For each \\"WHO_HAS\\" operation, output a single line as described above. -----Examples----- Sample Input: 7 ADD Harry_Potter_1 ADD Harry_Potter_2 CHECKOUT Harry_Potter_1 alice CHECKOUT Harry_Potter_2 bob WHO_HAS Harry_Potter_1 WHO_HAS Harry_Potter_3 RETURN Harry_Potter_1 Sample Output: alice NOBODY","solution":"class LibrarySystem: def __init__(self): self.books = {} self.checked_out = {} def add_book(self, book): if book not in self.books: self.books[book] = None def remove_book(self, book): if book in self.books and self.books[book] is None: del self.books[book] def checkout_book(self, book, user): if book in self.books and self.books[book] is None: self.books[book] = user def return_book(self, book): if book in self.books and self.books[book] is not None: self.books[book] = None def who_has(self, book): if book in self.books: return self.books[book] if self.books[book] else \\"NOBODY\\" return \\"NOBODY\\" def library_operations(operations): library = LibrarySystem() results = [] for operation in operations: parts = operation.split() op = parts[0] book = parts[1] if op == \\"ADD\\": library.add_book(book) elif op == \\"REMOVE\\": library.remove_book(book) elif op == \\"CHECKOUT\\": user = parts[2] library.checkout_book(book, user) elif op == \\"RETURN\\": library.return_book(book) elif op == \\"WHO_HAS\\": results.append(library.who_has(book)) return results"},{"question":"You are a botanist studying the growth patterns of a certain species of plant. Each plant follows a specific growth cycle that can be described using a sequence of numbers corresponding to its growth in centimeters over each day. If the sequence is disrupted or any value is missing, the plant stops growing. To understand if a given plant can complete its growth cycle, you need to write a program that checks if a given sequence of numbers contains a specific smaller sequence (the expected growth pattern) without rearranging the order of the numbers. The sequence may appear dispersed within the larger sequence but must maintain the same order. Input: - The first line contains a non-empty string of space-separated integers representing the sequence of growth measurements. - The second line contains the expected smaller sequence of space-separated integers representing the expected growth pattern. Output: - Output \\"yes\\" if the growth pattern can be found within the sequence, otherwise output \\"no\\". Examples: Input: 3 5 1 10 6 9 8 15 18 5 10 15 Output: yes Input: 1 2 3 4 5 2 5 1 Output: no input: 7 2 4 8 16 10 12 8 10 12 Output: yes Note: The sequence of growth measurements is 7 2 4 8 16 10 12, and the expected growth pattern is 8 10 12. We can find the sequence 8, then 10, followed by 12 while maintaining their order in the original sequence. Therefore, the output is \\"yes\\".","solution":"def check_growth_pattern(sequence, pattern): Checks if the growth pattern can be found within the sequence maintaining the same order. seq_list = sequence.split() pat_list = pattern.split() seq_index = 0 pat_index = 0 while seq_index < len(seq_list) and pat_index < len(pat_list): if seq_list[seq_index] == pat_list[pat_index]: pat_index += 1 seq_index += 1 return \\"yes\\" if pat_index == len(pat_list) else \\"no\\""},{"question":"Given a string, return the count of unique characters present in the string. For example: `\\"hello\\"` should return `4` (i.e., `h`, `e`, `l`, and `o` are unique characters). `\\"mississippi\\"` should return `4` (i.e., `m`, `i`, `s`, and `p` are unique characters). All input strings will be non-empty and will consist of lowercase alphabetic characters only.","solution":"def count_unique_characters(s): Returns the count of unique characters in the string s. return len(set(s))"},{"question":"In a certain company, employees are divided into teams, and each team has a specific level of productivity. The productivity of a team is represented by an integer. The company wants to find the most productive team during a given period. You are given an array of integers where each integer represents the productivity of a team on a particular day. The query for the most productive team will consist of a start day and an end day, and you need to find the maximum productivity of any team between those days (inclusive). Write a program that processes several such queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of days and the number of queries respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000000) where pi is the productivity of the team on the i-th day. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) which are the start and end days of the query. Output For each query, output a single integer — the maximum productivity of any team in the specified range. SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 3 4 5","solution":"def process_productivity_queries(productivities, queries): For each query, returns the maximum productivity of any team in the specified range (inclusive). Args: - productivities (list): List of integers where each integer represents the productivity of a team on a particular day. - queries (list(tuple)): List of tuples where each tuple contains two integers (start_day, end_day) representing the range of days for the query. Returns: - list: List of integers where each integer is the result of a query. results = [] for l, r in queries: results.append(max(productivities[l-1:r])) return results"},{"question":"A city has a network of one-way roads connecting various intersections, and some of these roads may have granted toll passes that allow vehicles to pass without any cost. The transportation department wishes to find out the minimum cost required for a truck to travel from one intersection to another. You are given the number of intersections ( n ) (numbered from 1 to ( n )), the number of roads ( m ), and a list of roads. Each road is described by three integers ( u ), ( v ), and ( c ) where ( u ) is the starting intersection, ( v ) is the ending intersection, and ( c ) is the cost of traveling that road. If ( c ) is zero, it means it is a toll-free road. There can be multiple roads between the same intersections. You need to determine the minimum cost required for a truck to travel from intersection 1 to intersection ( n ). If it is not possible to reach intersection ( n ) from intersection 1, return -1. Input The first line contains two integers ( n ) and ( m ) (2 ≤ ( n ) ≤ 1000, 1 ≤ ( m ) ≤ 10000) — the number of intersections and roads respectively. The next ( m ) lines describe the roads. Each road is represented by three space-separated integers ( u ) (1 ≤ ( u ) ≤ ( n )), ( v ) (1 ≤ ( v ) ≤ ( n )), and ( c ) (0 ≤ ( c ) ≤ 1000). Output Print a single integer — the minimum cost required to travel from intersection 1 to intersection ( n ). If there is no way to travel from intersection 1 to intersection ( n ), print -1. Examples Input 4 5 1 2 5 2 3 10 1 3 20 2 4 0 3 4 2 Output 7 Input 3 2 1 2 10 1 3 5 Output 5 Input 3 1 1 2 10 Output -1 Note In the first example, the route 1 -> 2 -> 4 costs 5 + 0 = 5. Another route 1 -> 2 -> 3 -> 4 costs 5 + 10 + 2 = 17, which is more expensive. The cheapest route 1 -> 2 -> 4 costs 7.","solution":"import heapq def find_min_cost(n, m, roads): # Creating the graph as an adjacency list graph = [[] for _ in range(n + 1)] for u, v, c in roads: graph[u].append((v, c)) # Using Dijkstra\'s algorithm to find the shortest path def dijkstra(start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] heapq.heapify(pq) while pq: current_cost, u = heapq.heappop(pq) if current_cost > dist[u]: continue for v, cost in graph[u]: if current_cost + cost < dist[v]: dist[v] = current_cost + cost heapq.heappush(pq, (dist[v], v)) return dist distances = dijkstra(1) min_cost = distances[n] return min_cost if min_cost < float(\'inf\') else -1"},{"question":"A company wishes to distribute tasks among its employees in an optimal way. Each employee can handle exactly `m` tasks. The company has `p` employees and the tasks are numbered from 1 to `m*p`. The employees have indicated their preferred tasks in the order they want to handle them. For that, each employee provided a piece of paper with the list of task numbers they prefer, ordered from most preferred to least preferred. Each task can only be assigned to one employee. Your job is to distribute the tasks ensuring each employee gets exactly `m` tasks according to their preferences as much as possible. If there are multiple valid distributions, any can be considered correct. # Input The first line contains two integers `m` and `p` (`1 ≤ m, p ≤ 30`). The next `p` lines each contain `m*p` space-separated integers, where the `i`-th line is the list of preferences for employee `i`, ordered from most preferred to least preferred. # Output Print `p` lines, each containing exactly `m` distinct integers representing the tasks assigned to the employees. The output should have the list of tasks for each employee on a separate line, in the order of the employees. # Examples Input ``` 2 2 4 1 3 2 1 4 2 3 ``` Output ``` 4 1 3 2 ``` Input ``` 3 1 2 1 3 ``` Output ``` 3 1 2 ```","solution":"def distribute_tasks(m, p, preferences): tasks_assigned = set() distribution = [[] for _ in range(p)] for i in range(p): preferences_sorted = sorted(preferences[i], key=lambda x: preferences[i].index(x)) count = 0 for task in preferences_sorted: if task not in tasks_assigned: distribution[i].append(task) tasks_assigned.add(task) count += 1 if count == m: break return distribution # Input processing def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) p = int(data[1]) preferences = [ list(map(int, data[i*(m*p)+2 : (i+1)*(m*p)+2])) for i in range(p) ] result = distribute_tasks(m, p, preferences) for tasks in result: print(\' \'.join(map(str, tasks))) if __name__ == \\"__main__\\": main()"},{"question":"A magic square is an n x n grid filled with distinct non-negative integers in the range 1 to n^2 such that each number appears exactly once and all rows, columns, and both diagonals sum to the same value. Given a 3 x 3 grid of numbers, determine if it forms a magic square and, if so, return the \\"magic constant\\" (the common sum of the rows, columns, and diagonals). If it does not form a magic square, return -1. Input The input consists of a single line containing 9 space-separated positive integers representing the values in the 3x3 grid, read in row-major order (left to right, top to bottom). Output Write a single integer: the magic constant if the grid forms a magic square, or -1 if it does not. Examples Input: 2 7 6 9 5 1 4 3 8 Output: 15 Input: 1 2 3 4 5 6 7 8 9 Output: -1 Note In the first test case, the grid is: 2 7 6 9 5 1 4 3 8 It forms a magic square with the sum of each row, column, and diagonal equal to 15. In the second test case, the grid is: 1 2 3 4 5 6 7 8 9 It does not form a magic square, as the sums of the rows, columns, and diagonals differ.","solution":"def is_magic_square(grid): Determine if a 3x3 grid forms a magic square and return the magic constant or -1. if len(grid) != 9: return -1 n = 3 magic_constant = sum(grid[:n]) for i in range(n): if sum(grid[i*n:(i+1)*n]) != magic_constant: # check rows return -1 if sum(grid[i::n]) != magic_constant: # check columns return -1 if sum(grid[::n+1]) != magic_constant: # check main diagonal return -1 if sum(grid[n-1:n*n-1:n-1]) != magic_constant: # check secondary diagonal return -1 return magic_constant def parse_input(input_string): Parse the input string into a list of integers. return list(map(int, input_string.strip().split()))"},{"question":"Given a list of integers where each integer represents a temperature recorded over several days, you are to implement a function that determines how many such temperature readings are present where the current day\'s temperature is greater than the previous day\'s temperature. For instance, given the temperature recordings [30, 31, 27, 29, 33, 34], the function should return 4 because there are four days where the temperature reading is higher than the previous day\'s reading (31 > 30, 29 > 27, 33 > 29, 34 > 33). Note: The list will have at least two temperature readings. **Function Signature:** ```python def count_increases(temperatures: List[int]) -> int: ... ``` **Input:** - `temperatures`: a list of integers where each integer represents a temperature. **Output:** - An integer representing the count of days where the temperature was higher than the previous day. **Example:** ```python count_increases([30, 31, 27, 29, 33, 34]) # returns 4 count_increases([30, 29, 28, 27, 26]) # returns 0 count_increases([30, 30, 30, 30]) # returns 0 ``` **Constraints:** - The list will have at least two temperature readings. - Time complexity should be O(n), where n is the number of temperature readings in the list.","solution":"from typing import List def count_increases(temperatures: List[int]) -> int: Counts the number of times the temperature increases compared to the previous day. :param temperatures: a list of integers where each integer represents a temperature. :return: an integer representing the count of days where the temperature was higher than the previous day. count = 0 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: count += 1 return count"},{"question":"Given an integer array nums of size n. You need to return the length of the longest contiguous subarray such that every element in this subarray has the same parity (odd or even). Example 1: Input: nums = [1, 2, 4, 6, 5, 7, 8] Output: 3 Explanation: The longest contiguous subarray with same parity is [2, 4, 6] which has length 3. Example 2: Input: nums = [1, 3, 5, 2, 4, 6, 8, 7, 9] Output: 4 Explanation: The longest contiguous subarray with same parity is [2, 4, 6, 8] which has length 4. Your Task: You don\'t need to take input or print anything. Your task is to complete the function longest_same_parity_subarray() which takes nums as input parameter and returns the length of the longest contiguous subarray with same parity. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10^5 1 <= nums[i] <= 10^9","solution":"def longest_same_parity_subarray(nums): Returns the length of the longest contiguous subarray where all elements have the same parity (odd or even). if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] % 2 == nums[i-1] % 2: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are helping your friends plan a picnic and they want to know how many ice creams should be carried. Given a certain total amount of money and the cost of one ice cream, you need to determine the maximum number of ice creams they can buy without exceeding the given total amount of money. Each friend has some amount of money, and you need to sum up all their amounts to find the total available money. Then, divide this total by the cost of an ice cream to find out the maximum number of ice creams they can buy. -----Constraints----- - All values in input are integers. - 1 leq numberOfFriends leq 1000 - 1 leq money[i] leq 1000 - 1 leq cost leq 1000 -----Input----- Input is given from Standard Input in the following format: numberOfFriends money1 money2 ... moneyN cost -----Output----- Print the maximum number of ice creams that can be bought. -----Sample Input----- 5 20 30 15 50 25 12 -----Sample Output----- 11 The total money available is 140, and each ice cream costs 12 units, so the maximum number of ice creams they can buy is 11.","solution":"def max_ice_creams(): import sys input = sys.stdin.read data = input().split() number_of_friends = int(data[0]) money = list(map(int, data[1:number_of_friends + 1])) cost = int(data[number_of_friends + 1]) total_money = sum(money) max_ice_cream = total_money // cost print(max_ice_cream)"},{"question":"# Task: Write a function that takes a string as input and checks if it is a valid IP address. A valid IP address must be in the form of `x.x.x.x`, where `x` is a number from 0 to 255. Each segment `x` must not contain leading zeros except for `0` itself, which is treated as a single segment. Return `True` if the input string is a valid IP address, and `False` otherwise. # Key points: 1. An IP address consists of exactly four segments separated by dots. 2. Each segment must be a number between 0 and 255. 3. Each segment should not have leading zeros except for `0`. # Example: ```python is_valid_ip(\\"192.168.0.1\\") # returns True is_valid_ip(\\"256.100.50.0\\") # returns False is_valid_ip(\\"1.2.03.4\\") # returns False is_valid_ip(\\"10.10.10.10\\") # returns True is_valid_ip(\\"10.10.10\\") # returns False is_valid_ip(\\"10.10.10.256\\") # returns False ``` # Constraints: - The input string will only contain digits and dots.","solution":"def is_valid_ip(ip): Checks if the input string is a valid IP address. :param ip: string, the IP address to validate :return: bool, True if the input string is a valid IP address, otherwise False parts = ip.split(\'.\') # An IP address must have exactly four parts if len(parts) != 4: return False for part in parts: # Each part must be a number and within the valid range if not part.isdigit() or not 0 <= int(part) <= 255: return False # Each part should not have leading zeros except for \'0\' if part != \'0\' and part.startswith(\'0\'): return False return True"},{"question":"In a fantasy world, there are various types of magical creatures each possessing a certain amount of power. The Grand Wizard wants to form a team with the most powerful individual from each type of creature for an upcoming battle against dark forces. Since the types and the number of creatures are vast, the Grand Wizard seeks your help in efficiently assembling this team. For each type of creature, identify the single most powerful creature. If there are two creatures with the same power, choose the one with the lexicographically smaller name. Input The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer M denoting the number of creature types. For each of the M types, the first line contains the type name. The second line contains an integer K denoting the number of creatures of that type. The next K lines each contain the creature’s name and its power, both space-separated. Output For each test case, output M lines. Each line should contain the name of the most powerful creature for each type, in the order of their input appearance. Constraints 1 ≤ T ≤ 1000 1 ≤ M ≤ 100 1 ≤ K ≤ 100 1 ≤ |Type Name| ≤ 20 1 ≤ |Creature Name| ≤ 20 1 ≤ Power ≤ 100000 Example Input: 2 2 Dragons 3 Drake 8000 Wyvern 8500 Longma 9000 Elves 2 Legolas 7000 Alatariel 7500 1 Goblins 3 Grim 1500 Snarl 1200 Slash 1300 Output: Longma Alatariel Grim Explanation Example case 1. \\"Dragons\\" have three candidates - \\"Drake\\", \\"Wyvern\\", and \\"Longma\\". \\"Longma\\" has the highest power, so it is selected. For \\"Elves\\", \\"Alatariel\\" is selected. In case 2, \\"Grim\\" is chosen for \\"Goblins\\" due to the highest power among the candidates.","solution":"def find_most_powerful_creatures(test_cases): results = [] for test_case in test_cases: M, types = test_case for type_name, creatures in types: most_powerful_creature = max(creatures, key=lambda x: (x[1], -ord(x[0][0]))) results.append(most_powerful_creature[0]) return results"},{"question":"Write a function that takes an unsorted list of integers and a target sum, and returns a tuple containing two distinct integers from the list that add up to the target sum. If no such pair exists, return an empty tuple. Note: - You may assume that there is at most one such pair. - The list of integers can contain both positive and negative numbers. - The solution should have a time complexity of O(n). - The list length is < 10,000 and the integers are in the range of -10^9 to 10^9.","solution":"def find_pair_with_sum(nums, target): Returns a tuple containing two distinct integers from the list that add up to the target sum. If no such pair exists, returns an empty tuple. :param nums: List of integers :param target: The target sum :return: Tuple of two integers adding up to target, or empty tuple if no such pair exists num_set = set() for num in nums: complement = target - num if complement in num_set: return (complement, num) num_set.add(num) return ()"},{"question":"An important programming contest is coming up, and you need to practice solving problems with tight time and memory constraints. One of the common problems involves analyzing strings, so here\'s a challenge to help you prepare. Consider a string consisting of lowercase English letters, you need to determine the number of unique substrings of a given length k that appear in this string. For example, if the string is \\"abcabc\\" and k is 2, the substrings of length 2 are {\\"ab\\", \\"bc\\", \\"ca\\", \\"ab\\", \\"bc\\"}. Among them, the unique substrings are {\\"ab\\", \\"bc\\", \\"ca\\"}. -----Input----- The input consists of two lines: - The first line contains an integer k (1 ≤ k ≤ 10). - The second line contains a string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. -----Output----- Output a single integer — the number of unique substrings of length k. -----Examples----- Input 2 abcabc Output 3 Input 3 aaaaaa Output 1 Input 1 abcd Output 4 -----Note----- In the first sample, the unique substrings of length 2 are {\\"ab\\", \\"bc\\", \\"ca\\"}. In the second sample, the only unique substring of length 3 is \\"aaa\\". In the third sample, each of the substrings {\\"a\\", \\"b\\", \\"c\\", \\"d\\"} of length 1 is unique.","solution":"def count_unique_substrings(k, s): Returns the number of unique substrings of length k in the string s. unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i + k] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"Aman enjoys painting and is especially interested in geometric designs. One day, he decides to draw a special kind of pattern on a grid. The grid is an n x n matrix where n is an odd integer. Each cell in the grid is either empty, has a dot (‘.’), or has a star (‘*’). Aman wants to place stars in such a way that they form a cross pattern. The cross pattern should have the following properties: - The center of the cross is located at the middle cell of the grid. - The horizontal arm of the cross should extend from the leftmost column to the rightmost column of the middle row. - The vertical arm of the cross should extend from the topmost row to the bottommost row of the middle column. Your task is to help Aman generate the required cross pattern. INPUT: A single line containing an odd integer n (3 ≤ n ≤ 999) denoting the dimensions of the grid. OUTPUT: Print the n x n grid with stars (\'*\') making up the cross pattern and dots (\'.\') for other cells. EXAMPLE INPUT: 5 EXAMPLE OUTPUT: ..*.. ..*.. ***** ..*.. ..*.. EXAMPLE INPUT: 7 EXAMPLE OUTPUT: ...*... ...*... ...*... ******* ...*... ...*... ...*...","solution":"def generate_cross_pattern(n): Generates a cross pattern on an n x n grid where n is an odd integer. Parameters: n (int): The dimensions of the grid. Returns: List[str]: The n x n grid as a list of strings. assert n % 2 == 1, \\"n must be odd\\" assert 3 <= n <= 999, \\"n must be between 3 and 999 (inclusive)\\" middle = n // 2 # Middle index grid = [] for i in range(n): row = [] for j in range(n): if i == middle or j == middle: row.append(\'*\') else: row.append(\'.\') grid.append(\'\'.join(row)) return grid # Example usage: # result = generate_cross_pattern(5) # for row in result: # print(row)"},{"question":"A geologist is studying the structural integrity of different rock formations. She has data on the tensile strength of rock samples measured along their cross-sections. Due to various constraints, she needs to ensure that she selects a contiguous subarray of these measurements for further detailed analysis, such that the sum of this subarray is maximized while its length does not surpass a given limit. Your task is to help by finding the maximum possible sum of a contiguous subarray with a length not exceeding L. -----Input----- The first line of the input contains two space-separated integers, N and L (1 ≤ N ≤ 10000, 1 ≤ L ≤ N), where N is the number of measurements and L is the maximum length of the subarray. The second line contains N space-separated integers, representing the tensile strengths of the rock samples. -----Output----- Output a single integer, which is the maximum sum of a contiguous subarray that does not exceed the length L. -----Example----- Input 8 3 4 -1 2 1 -7 3 5 -2 Output 6 -----Note----- In the example given, the optimal subarray is [4, -1, 2, 1], whose sum is 6, with the length equal to the maximum limit L.","solution":"def max_subarray_sum_within_limit(arr, N, L): Returns the maximum sum of a contiguous subarray with length not exceeding L. max_sum = float(\'-inf\') current_sum = 0 window_start = 0 for window_end in range(N): current_sum += arr[window_end] # If the window length exceeds L, slide the window if window_end - window_start + 1 > L: current_sum -= arr[window_start] window_start += 1 # Ensure to update the max_sum when the size of the window is up to L max_sum = max(max_sum, current_sum) return max_sum # Example Usage # N, L = 8, 3 # arr = [4, -1, 2, 1, -7, 3, 5, -2] # print(max_subarray_sum_within_limit(arr, N, L)) # Output: 6"},{"question":"You are tasked with developing a program for an art gallery system to help in categorizing paintings based on their artist. Each painting has an artist\'s signature embedded within the image file. We have a training set of images, each labeled with the artist\'s name. The data is organized such that each artist has a unique integer identifier ranging from 1 to 5. The training images can be downloaded from the following link: http://artgallery.com/train.zip. The archive contains five directories with names \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\". Directory \\"1\\" contains paintings by artist 1, directory \\"2\\" contains paintings by artist 2, and so on. Each image file corresponds to a different painting by the specified artist. Each image is in a format that embeds metadata including the artist\'s name, the painting title, and the year it was created. For the purpose of this problem, each image metadata consists of multiple lines where the first line contains the artist\'s name, the second line contains the title of the painting, and the third line contains the year of creation. Your task is to create a program that determines the artist of a given painting based on the training data. Input The input will consist of the image metadata formatted as follows: the first line with the artist\'s name, the second line with the title of the painting, and the third line with the year of creation. The training set ensures that each painting provided as input corresponds to one of the five artists from the training set. Output Print an integer from 1 to 5 inclusive - the identifier of the artist to whom the painting corresponds. Examples Input: ``` Vincent van Gogh Starry Night 1889 ``` Output: ``` 2 ``` Input: ``` Leonardo da Vinci Mona Lisa 1503 ``` Output: ``` 1 ```","solution":"# Let\'s define a mapping of artists to their respective integer identifiers. artist_to_id = { \\"Leonardo da Vinci\\": 1, \\"Vincent van Gogh\\": 2, \\"Claude Monet\\": 3, \\"Pablo Picasso\\": 4, \\"Edvard Munch\\": 5 } def identify_artist(artist_name): Given the artist\'s name from the metadata, return the corresponding artist\'s identifier. return artist_to_id.get(artist_name, -1)"},{"question":"In a game of target shooting, a player is given three shots and the shot with the highest score is regarded as their final score. You are given the scores for all three shots of a player. Determine the final score of the player. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, three integers X, Y, and Z denoting the scores of each shot. ------ Output Format ------ For each test case, output the final score of the player. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X, Y, Z ≤ 100 ------ Sample Input 1 ------ 3 7 23 15 30 18 38 19 19 19 ------ Sample Output 1 ------ 23 38 19 ------ Explanation 1 ------ Test Case 1: The highest score is achieved in the second shot, which is equal to 23 points. Thus, the answer is 23. Test Case 2: The highest score is achieved in the third shot which is equal to 38 points. Thus, the answer is 38. Test Case 3: All shots have the same score of 19 points. Therefore, the final score is 19.","solution":"def final_score(test_cases): Given a list of test cases where each test case contains three integers representing the scores of three shots, returns a list with the highest score for each test case. results = [] for scores in test_cases: results.append(max(scores)) return results def parse_input(input_string): Parses the input string to extract the test cases. input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(list(map(int, input_lines[i].split()))) return test_cases"},{"question":"Alice is a budding artist who loves creating unique patterns with squares. She has an infinite 2D grid where each cell is a square of unit area. Alice wants to draw a rectangle using these unit squares, but she wants the rectangle to lie perfectly within a given triangular region. The triangular region is defined by its three vertices: (0, 0), (w, 0), and (0, h). Alice needs your help to find the largest possible rectangle that can be drawn within this triangular region. The sides of the rectangle must be parallel to the x and y axes of the grid. Input Input consists of 2 space-separated integers w, h (1 ≤ w, h ≤ 10^5) representing the width and height of the triangular region. Output Output a single integer — the area of the largest possible rectangle that can fit entirely within the triangular region. SAMPLE INPUT 6 8 SAMPLE OUTPUT 24 Explanation Note In the sample test, the triangular region has vertices at (0, 0), (6, 0), and (0, 8). The largest rectangle that can fit within this triangular region has a width of 6 and a height of 4, thus its area is 6 * 4 = 24.","solution":"def largest_rectangle_in_triangle(w, h): Given the width w and height h of a right-angled triangle, find the area of the largest rectangle that can fit entirely within this triangle. # The largest rectangle inside a right-angled triangle has half the area of the rectangle # formed by the base (w) and the height (h) of the triangle divided by 2. return (w * h) // 2"},{"question":"A company is managing its warehouses through an inventory system. They track the shipments using recorded events of adding and removing cartons from the inventory. Write a function to determine if a series of inventory events result in the inventory being empty. Each event is represented by a string that either starts with \\"add\\" or \\"remove\\" followed by a space and the number of cartons added or removed. Assume the function receives an array of strings as input where each string represents an event. Your task is to write a function `is_inventory_empty` that takes an array of strings representing the events and returns `True` if the inventory is empty after processing all events, and `False` otherwise. Constraints: * 1 ≤ number of events ≤ 10^5 * 1 ≤ number of cartons in an event ≤ 1000 Note: - The inventory never goes negative (i.e., there are always enough cartons to remove). - You may assume there is at least one \\"add\\" event. Input - An array of strings where each string represents an event in the format \\"add X\\" or \\"remove X\\" Output - Return `True` if the inventory is empty; otherwise, return `False`. Example Input [\\"add 100\\", \\"remove 50\\", \\"add 50\\", \\"remove 100\\"] Output True Input [\\"add 50\\", \\"remove 20\\", \\"add 30\\", \\"remove 40\\"] Output False ```python def is_inventory_empty(events): inventory = 0 for event in events: action, count = event.split() count = int(count) if action == \\"add\\": inventory += count elif action == \\"remove\\": inventory -= count return inventory == 0 ```","solution":"def is_inventory_empty(events): Determines if the inventory is empty after processing all events. Parameters: events (list of str): List of events in the format \\"add X\\" or \\"remove X\\". Returns: bool: True if the inventory is empty, False otherwise. inventory = 0 for event in events: action, count = event.split() count = int(count) if action == \\"add\\": inventory += count elif action == \\"remove\\": inventory -= count return inventory == 0"},{"question":"You are given a stick of length L and an array of integers representing the lengths of smaller sticks. You want to break the larger stick into exactly three smaller sticks such that the lengths of the broken parts are found in the array of smaller sticks. Each smaller stick length can be used only once. Is it possible to break the stick in such a way? Input: The input contains two lines: L (an integer representing the length of the larger stick) n (an integer representing the number of available smaller sticks) Second line contains n space-separated integers representing the lengths of the smaller sticks. Output: Print \\"Yes\\" if it is possible to break the larger stick into three parts with lengths found in the array. Otherwise, print \\"No\\". Constraints: 1 <= L <= 1000 1 <= n <= 100 1 <= length of each smaller stick <= 1000 SAMPLE INPUT 10 5 1 2 3 4 5 SAMPLE OUTPUT Yes","solution":"def can_break_stick_to_three_parts(L, stick_lengths): Returns \\"Yes\\" if it is possible to break the stick into three parts with lengths found in the array of stick_lengths, otherwise return \\"No\\". n = len(stick_lengths) # Check all possible combinations of three sticks for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if stick_lengths[i] + stick_lengths[j] + stick_lengths[k] == L: return \\"Yes\\" return \\"No\\""},{"question":"You are a software engineer at a startup, and one of your tasks is to handle the company\'s database of user activities. The database logs each user activity with a timestamp, and you need to be able to efficiently retrieve the most recent activity for any given user within a specified period. Your task is to implement a system that processes a series of user activities and queries. Each activity is reported with a timestamp and user ID. Each query asks for the most recent activity of a user within a given time window specified by a start and end timestamp. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2 * 10^5) — the number of user activities and the number of queries. The next n lines describe the user activities. Each line contains three integers t, u, and a (1 ≤ t ≤ 10^9, 1 ≤ u ≤ 10^5, 1 ≤ a ≤ 10^9), where t is the timestamp of the activity, u is the user ID, and a is the activity ID. The next q lines describe the queries. Each line contains three integers u, t1, and t2 (1 ≤ u ≤ 10^5, 1 ≤ t1 ≤ t2 ≤ 10^9), where u is the user ID, t1 is the start timestamp, and t2 is the end timestamp. Output For each query, print the activity ID of the most recent activity of the specified user within the given time window, or -1 if the user has no activities within that time window. Examples Input 5 3 1 1 101 3 1 102 6 2 201 8 1 103 10 2 202 1 1 5 2 5 10 1 5 10 Output 102 202 103 In the first example, the recorded activities are: - timestamp 1: user 1, activity 101 - timestamp 3: user 1, activity 102 - timestamp 6: user 2, activity 201 - timestamp 8: user 1, activity 103 - timestamp 10: user 2, activity 202 The first query asks for the most recent activity of user 1 between timestamp 1 and 5. The most recent activity within this time frame is activity 102, which occurred at timestamp 3. The second query asks for the most recent activity of user 2 between timestamp 5 and 10. The most recent activity within this period is activity 202, which occurred at timestamp 10. The third query asks for the most recent activity of user 1 between timestamp 5 and 10. The most recent activity within this period is activity 103, which occurred at timestamp 8.","solution":"from collections import defaultdict import bisect def process_activities(n, activities, q, queries): # User activities sorted by timestamp for each user user_activities = defaultdict(list) # Store activities in the dictionary for t, u, a in activities: user_activities[u].append((t, a)) # Sort the activities based on timestamp for each user for user in user_activities: user_activities[user].sort() results = [] # Process each query for u, t1, t2 in queries: if u in user_activities: # Get list of timestamps for the user and binary search the start and end times timestamps = [activity[0] for activity in user_activities[u]] # Find the position where t1 can be inserted to keep sorted order (left insertion) start_index = bisect.bisect_left(timestamps, t1) # Find the position where t2 can be inserted to keep sorted order (right insertion) end_index = bisect.bisect_right(timestamps, t2) if start_index < end_index: # The most recent activity within the time window recent_activity = user_activities[u][end_index-1][1] results.append(recent_activity) else: results.append(-1) else: results.append(-1) return results"},{"question":"John is designing a new encryption algorithm for his communication app. He has come up with the idea of \\"cyclic shifts\\" to encode messages. A cyclic shift involves moving the last character of a string to the beginning. He needs to know the number of distinct strings that can be generated using cyclic shifts. For instance, for the string \\"abcd\\", the possible distinct cyclic shifts are: 1. \\"abcd\\" (original string) 2. \\"dabc\\" (move last character to start) 3. \\"cdab\\" (move last two characters to start) 4. \\"bcda\\" (move last three characters to start) In contrast, for the string \\"aaaa\\", the only distinct cyclic shift is \\"aaaa\\" itself. Your task is to write a program that determines the number of distinct cyclic shifts that can be generated from a given string. Input: The input consists of a single string S. Output: Output the number of distinct cyclic shifts of the string S. Constraints: 1 ≤ |S| ≤ 10^5 S will consist solely of lowercase alphabets. Example: SAMPLE INPUT 1: abcd SAMPLE OUTPUT 1: 4 SAMPLE INPUT 2: aaaa SAMPLE OUTPUT 2: 1 SAMPLE INPUT 3: abcabc SAMPLE OUTPUT 3: 3 Explanation: In the first example, all cyclic shifts of \\"abcd\\" are distinct. In the second example, since all characters are the same, only one distinct cyclic shift exists. In the third example, the cyclic shifts are \\"abcabc\\", \\"cabcab\\", and \\"bcabca\\", giving three distinct shifts.","solution":"def count_distinct_cyclic_shifts(s): Returns the number of distinct cyclic shifts for the given string s. n = len(s) cyclic_shifts = set() for i in range(n): shift = s[i:] + s[:i] cyclic_shifts.add(shift) return len(cyclic_shifts)"},{"question":"You are given a grid of size (n times m). Each cell of the grid contains a value, either 0 or 1. You can move up, down, left, or right between adjacent cells containing 1s. Your task is to find the length of the longest path of consecutive 1s in the grid. You can start from any cell that contains a 1 and you cannot revisit any cell in the same path. Write a function `longest_path` that returns the length of the longest path of consecutive 1s. Function Description Complete the function `longest_path` in the editor below. longest_path has the following parameter(s): - int grid[n][m]: a 2D list of integers representing the grid Returns - int: the length of the longest path of consecutive 1s Input Format The first line contains two space-separated integers, (n) and (m). Each of the next (n) lines contains (m) space-separated integers representing the grid. Constraints - (1 leq n, m leq 1000) - grid[i][j] will either be 0 or 1. Sample Input 0 ``` 5 6 0 1 1 0 0 0 1 1 0 0 1 1 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 0 0 ``` Sample Output 0 ``` 5 ``` Explanation 0 The longest path of consecutive 1s is of length 5. One of the longest paths is: start at grid[2][2], move to grid[2][3], then grid[3][3], then grid[2][4], and finally to grid[1][5]. Sample Input 1 ``` 3 3 1 1 0 1 0 1 0 1 1 ``` Sample Output 1 ``` 3 ``` Explanation 1 The longest path of consecutive 1s is of length 3. One of the longest paths is: start at grid[1][0], move to grid[0][1], and then to grid[2][2].","solution":"def longest_path(grid): def dfs(x, y): if (x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0): return 0 grid[x][y] = 0 # mark as visited by setting it to 0 length = 1 # start length of this path # explore all 4 possible directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: length = max(length, 1 + dfs(x + dx, y + dy)) grid[x][y] = 1 # restore the value (undo the visit marking) for other DFS runs return length n = len(grid) m = len(grid[0]) longest = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: longest = max(longest, dfs(i, j)) return longest"},{"question":"David is playing a game with his friends where they each choose a number in a given range, and the goal is to create the longest subsequence of consecutive numbers from the chosen numbers. Unfortunately, David needs a bit of help to win the game. Write a function that, given a list of integers representing the numbers chosen by the players, returns the length of the longest subsequence of consecutive integers. Input * The first line contains an integer n (1 <= n <= 10^5), the number of integers chosen by the players. * The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9), representing the numbers chosen by the players. Output * Print a single integer, the length of the longest subsequence of consecutive integers. Example Input: 7 100 4 200 1 3 2 101 Output: 4 Explanation: The longest subsequence of consecutive integers in the given list is [1, 2, 3, 4]. Its length is 4.","solution":"def longest_consecutive_subsequence_length(n, arr): Returns the length of the longest subsequence of consecutive integers in the list. if n == 0: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # Starting a new sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alex has a digital bookshelf where he stores all his books. Each book is represented as a range of pages [pi, qi] (1 ≤ pi < qi ≤ r) where pi is the page number at which the book starts and qi is the page number at which it ends. Alex loves to read non-linear stories and often combines different books to create new interwoven stories. He defines an interwoven story as a set of books such that no two books in the set overlap in their page ranges, i.e., for every pair of books [pi, qi] and [pj, qj] in the set, either qi < pj or qj < pi. Your task is to help Alex find the maximum number of interwoven stories he can create from his collection of books. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next lines describes a test case as follows: - The first line of each test case contains an integer b (1 ≤ b ≤ 1000), the number of books. - Each of the next b lines contains two integers pi and qi (1 ≤ pi < qi ≤ r), the page range of each book. Output For each test case, output on a new line the maximum number of interwoven stories that Alex can create. Examples Input 2 3 1 5 2 6 8 10 4 1 3 2 5 6 8 9 10 Output 2 3 Explanation: In the first test case, the maximum number of interwoven stories is 2, which can be achieved by selecting the books with page ranges [1, 5] and [8, 10] or [2, 6] and [8, 10]. In the second test case, the maximum number of interwoven stories is 3, which can be achieved by selecting the books with page ranges [1, 3], [6, 8], and [9, 10]. Any other combination results in less than 3 interwoven stories due to overlapping page ranges.","solution":"def max_interwoven_stories(test_cases): results = [] for books in test_cases: # Sort books by their ending page number qi books.sort(key=lambda x: x[1]) # Initialize counters and the end of the last selected book count = 0 last_end = 0 for book in books: start, end = book if start > last_end: count += 1 last_end = end results.append(count) return results def parse_input(input_text): lines = input_text.split(\'n\') t = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(t): b = int(lines[index].strip()) books = [] for i in range(b): p, q = map(int, lines[index + 1 + i].strip().split()) books.append((p, q)) test_cases.append(books) index += b + 1 return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"A special sequence of numbers is constructed as follows: start with the number 1, then for every additional number, add the reverse of the previous number. The initial terms of the sequence are: - 1 (start) - 1 + reverse(1) = 1 + 1 = 11 - 11 + reverse(11) = 11 + 11 = 1111 - 1111 + reverse(1111) = 1111 + 1111 = 11111111 Your task is to determine if a given integer ( n ) is present as a contiguous subsequence within the infinite concatenation of this sequence. -----Input----- The first and only line contains integer ( n ) (1 leq n leq 10^9) — the number to find in the infinite sequence. -----Output----- Print \\"YES\\" if the number ( n ) is present as a contiguous subsequence, otherwise print \\"NO\\". -----Examples----- Input 11 Output YES Input 10 Output NO","solution":"def is_present_in_sequence(n): Determines if a given integer n is present as a contiguous subsequence within the infinite concatenation of the sequence defined by start = 1, and each next number is obtained by adding the reverse of the previous number. The initial terms of the sequence are: - 1 - 11 - 1111 - 11111111 - and so on Parameters: n (int): the integer to check in the infinite sequence Returns: str: \\"YES\\" if n is present in the sequence, \\"NO\\" otherwise to_find = str(n) current_sequence = \\"1\\" while len(current_sequence) < 2 * len(to_find): if to_find in current_sequence: return \\"YES\\" current_sequence += current_sequence[::-1] return \\"YES\\" if to_find in current_sequence else \\"NO\\""},{"question":"Write a program that reads a list of integers and prints the maximum and minimum values in the list along with their positions. -----Input:----- - First line will contain an integer (N), the number of elements in the list (N). - Second line will contain N space-separated integers. -----Output:----- Output two lines: 1. The first line should contain the maximum value in the list and its position (1-based indexing). 2. The second line should contain the minimum value in the list and its position (1-based indexing). -----Constraints----- - 1≤N≤1000 - -1000≤element≤1000 -----Sample Input:----- 5 3 9 -2 7 4 -----Sample Output:----- 9 2 -2 3","solution":"def find_max_min_positions(n, elements): Returns the maximum and minimum values in the elements list along with their positions. The position is based on 1-based indexing. max_value = max(elements) min_value = min(elements) max_pos = elements.index(max_value) + 1 min_pos = elements.index(min_value) + 1 return (max_value, max_pos), (min_value, min_pos)"},{"question":"# [New Question]: In the magical land of Fairview, wizards compete in a unique game to determine who will lead the Wizard Council. The game involves a series of magical rod combinations that the wizards create to generate maximum magical power. Each wizard possesses rods of varying lengths, and they can combine their rods in any order. The magical power of a combined rod is calculated as the product of the lengths of the individual rods that compose the combined rod. Wizards are only interested in the maximum possible power they can generate with their rods. You have to write a program that reads the lengths of rods each wizard owns and prints the maximum possible magical power that can be generated by combining the rods. Input The input consists of a sequence of datasets. Each dataset is a line containing the rod lengths owned by a wizard. Each line starts with an integer n (1 ≤ n ≤ 10), which is the number of rods followed by n integers representing the lengths of the rods. The end of the input is indicated by a line containing a single -1. Output For each dataset, output a single integer representing the maximum possible magical power that can be generated by combining the rods. Sample Input ``` 3 1 2 3 4 3 3 3 3 5 1 1 1 1 1 -1 ``` Output for the Sample Input ``` 6 81 1 ``` Example Input ``` 3 1 2 3 4 3 3 3 3 5 1 1 1 1 1 -1 ``` Output ``` 6 81 1 ```","solution":"def max_magical_power(dataset): Calculates the maximum possible magical power that can be generated by combining the rods. data_lines = dataset.strip().split(\'n\') results = [] for line in data_lines: if line.strip() == \'-1\': break parts = list(map(int, line.split())) n = parts[0] rods = parts[1:] if n != len(rods): raise ValueError(\\"Number of rods does not match the specified count\\") max_power = 1 for rod in rods: max_power *= rod results.append(max_power) return results # Example usage: # data = # 3 1 2 3 # 4 3 3 3 3 # 5 1 1 1 1 1 # -1 # print(max_magical_power(data))"},{"question":"Write a function called \\"findPairWithSum\\". Given an array of integers and a target sum, \\"findPairWithSum\\" returns an array containing one pair of integers from the given array that adds up to the target sum. If no such pair exists, the function should return an empty array. Note: Each input array will have at most one pair of integers that adds up to the target sum. Example: var output = findPairWithSum([3, 7, 5, 2, -4, 8, 11], 10); console.log(output); // --> [7, 3] var output2 = findPairWithSum([1, 2, 3, 4, 5], 10); console.log(output2); // --> []","solution":"def findPairWithSum(arr, target_sum): Returns a pair of integers from \'arr\' that add up to \'target_sum\'. If no such pair exists, returns an empty array. Parameters: arr (list): List of integers target_sum (int): Target sum Returns: list: A list containing a pair of integers that add up to target_sum, or an empty list seen = set() for number in arr: complement = target_sum - number if complement in seen: return [number, complement] seen.add(number) return []"},{"question":"In a fictional world, there is a unique currency system where instead of having different denominations, the currency is represented by different colors. An individual has bills of various colors, where each color has a specific value associated with it. The individual needs to pay an exact amount using the minimum number of bills. You are tasked to write a program to determine the minimum number of bills required for a given amount, using the bills\' values provided. If it is not possible to pay the exact amount with the given bills, the program should return -1. Input The first line of the input contains an integer `T`, representing the number of test cases. Each test case consists of two lines: - The first line contains one integer, `N`, the number of different bill values, followed by an integer, `M`, the amount that needs to be paid. - The second line contains `N` integers separated by spaces, representing the values of the bills. Output For each test case, output a single integer representing the minimum number of bills required to pay the exact amount `M`. If it is not possible, output -1. Example Input 3 3 11 1 5 10 2 7 2 4 4 15 1 5 10 20 Output 2 -1 2","solution":"def min_bills_required(T, cases): results = [] for i in range(T): N, M = cases[i][:2] bill_values = cases[i][2] results.append(coin_change(bill_values, M)) return results def coin_change(bills, amount): dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for bill in bills: for x in range(bill, amount + 1): dp[x] = min(dp[x], dp[x - bill] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are given a binary matrix with dimensions n x m, representing a garden. Each cell in the matrix can either contain a plant (denoted by 1) or be empty (denoted by 0). You need to determine the largest square area in the garden that contains only plants. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the garden. - The next n lines each contain m integers (either 0 or 1), representing the binary matrix. Output: - Output a single integer, representing the area of the largest square containing only plants. Example: **Input:** ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` **Output:** ``` 4 ``` **Explanation:** The largest square containing only plants in the provided matrix has a side length of 2, resulting in an area of 2 * 2 = 4. One such square is located at the bottom-right part of the matrix.","solution":"def largest_square_area(n, m, garden): # Initialize a DP table with the same dimensions as garden dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if garden[i][j] == 1: if i == 0 or j == 0: # First row or first column can only have squares of side 1 dp[i][j] = 1 else: # Calculate the size of the square ending at (i, j) dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length # Input example: # n, m = 4, 5 # garden = [ # [1, 0, 1, 0, 0], # [1, 0, 1, 1, 1], # [1, 1, 1, 1, 1], # [1, 0, 0, 1, 0] # ] # The expected output for the example input is 4. # This can be tested using: print(largest_square_area(n, m, garden))"},{"question":"Given a rectangular grid of numbers, find the largest hourglass sum in the grid. An hourglass sum is defined as the sum of the six numbers that form the hourglass pattern. The hourglass pattern is: ``` a b c d e f g ``` Write a function that takes a 2D array and returns the maximum hourglass sum found in the grid. Input Format - The first line contains two integers, mathbf{r} (number of rows) and mathbf{c} (number of columns), separated by a space. - Each of the next mathbf{r} lines contains mathbf{c} space-separated integers representing a row of the grid. Constraints - 3 leq r, c leq 100 - -9 leq text{grid}[i][j] leq 9 Output Format Print the maximum hourglass sum found in the grid. Sample Input 5 5 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 Sample Output 19 Explanation There are 16 hourglasses in the given grid. The hourglass with the maximum sum is: ``` 2 4 4 2 1 2 4 ``` Summing the values of this hourglass yields 2 + 4 + 4 + 2 + 1 + 2 + 4 = 19. Thus, the maximum hourglass sum is 19.","solution":"def max_hourglass_sum(grid): Returns the maximum hourglass sum in the given 2D grid. rows = len(grid) cols = len(grid[0]) max_sum = -float(\'inf\') for i in range(rows - 2): for j in range(cols - 2): top = grid[i][j] + grid[i][j+1] + grid[i][j+2] mid = grid[i+1][j+1] bottom = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2] hourglass_sum = top + mid + bottom if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"During a busy weekend at the amusement park, you come across a problem concerning the park\'s visitor flexibility. The park has several attractions connected with walkways, and each walkway has a specific direction associated with it. Each visitor has a specific start attraction and needs to reach their designated end attraction. Your task is to determine whether a visitor can reach their destination from their starting point based on the available walkways. -----Input----- The first line of input is an integer, 1 leq M leq 50, indicating the number of attractions in the park. The next M lines describe each of the attractions with the list of attractions directly reachable from that attraction. Each line starts with the name of the attraction followed by a space-separated list of attractions that are directly accessible via a directed walkway originating from that attraction. The final line specifies the starting attraction and the destination attraction of the visitor. Each attraction name is a string of up to 20 characters using only letters a–z and A–Z. You can assume there is at most one simple directed path (without revisiting attractions) from the starting attraction to the destination attraction. -----Output----- Output \\"reachable\\" if there exists a simple path from the starting attraction to the destination attraction. Otherwise, output \\"not reachable\\". -----Examples----- Sample Input 1: 4 Carousel FerrisWheel FerrisWheel RollerCoaster RollerCoaster HauntedHouse HauntedHouse Carousel HauntedHouse Sample Output 1: reachable Sample Input 2: 3 MerryGoRound BumperCars BumperCars HauntedHouse HauntedHouse HauntedHouse MerryGoRound Sample Output 2: not reachable","solution":"def is_reachable(attractions, start, end): Determine whether there is a path from start to end in the attractions map. :param attractions: Dictionary where keys are attraction names and values are lists of directly reachable attractions. :param start: Starting attraction name. :param end: End attraction name. :return: \\"reachable\\" if there exists a path from start to end, otherwise \\"not reachable\\". from collections import deque # The set to track visited attractions visited = set() # Queue to perform BFS queue = deque([start]) while queue: current = queue.popleft() if current == end: return \\"reachable\\" visited.add(current) for neighbor in attractions.get(current, []): if neighbor not in visited: queue.append(neighbor) return \\"not reachable\\" # Wrapper function to parse input and output def check_park_route(M, attractions_lines, visitor_route): attractions = {} for line in attractions_lines: parts = line.split() attractions[parts[0]] = parts[1:] start, end = visitor_route.split() return is_reachable(attractions, start, end)"},{"question":"The \'spiral order\' of a matrix is defined as traversing the matrix in a spiral pattern starting from the top left corner and moving right, then down the last available row, left across the bottom available row, up the last available column, and repeating this pattern until all the elements have been traversed. Given an (M times N) matrix, output its elements in spiral order. -----Input----- The first line contains two integers (M) and (N) ((1 leq M, N leq 100)) representing the number of rows and columns of the matrix, respectively. Each of the next (M) lines contains (N) integers representing the elements of the matrix. -----Output----- A single line containing the elements of the matrix in spiral order, separated by spaces. -----Examples----- Sample Input 1: 3 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 1 2 3 6 9 8 7 4 5 Sample Input 2: 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 2: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. :param matrix: List of lists, where each inner list is a row of the matrix. :return: List of elements in spiral order. if not matrix: return [] result = [] while matrix: # Add the first row to result result += matrix.pop(0) # Add the last element from each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Add the last row in reverse order to result if matrix: result += matrix.pop()[::-1] # Add the first element from each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"You are given an undirected graph with N vertices and M edges. Each vertex is numbered from 1 to N, and each edge connects two distinct vertices. This graph might not be connected. Your task is to find the size of the largest connected component in the graph. The size of a connected component is defined as the number of vertices in that component. Constraints * 1 leq N leq 1000 * 0 leq M leq 2000 * 1 leq u_i, v_i leq N * No multiple edges exist between any pair of vertices. Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Output Print the size of the largest connected component. Examples Input 6 5 1 2 1 3 3 4 2 4 5 6 Output 4 Input 5 0 Output 1","solution":"def largest_connected_component(n, edges): from collections import defaultdict def dfs(node, visited, graph): stack = [node] component_size = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True component_size += 1 for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return component_size # Building the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) largest_size = 0 for i in range(1, n + 1): if not visited[i]: component_size = dfs(i, visited, graph) largest_size = max(largest_size, component_size) return largest_size"},{"question":"A software company wants to assess its new employees on string manipulation skills. They want you to help prepare a question. The task is to find out the maximum length of all valid parentheses substrings in a given string which contains only the characters \'(\' and \')\'. A valid parentheses substring is defined as a substring that contains balanced parentheses. Input Format The first line contains an integer {T}, the number of test cases. {T} lines follow, each containing a string of parentheses. Constraints {1}leq{T}leq10^3 {1}leq Length of each string {leq10^5} Output Format For each test case, output the length of the longest valid parentheses substring. Sample Input 3 (() )()()) ()(())))) Sample Output 2 4 6 Explanation In the first test case, the longest valid parentheses substring is `()` which has length 2. In the second test case, the longest valid parentheses substring is `()()` which has length 4. In the third test case, the longest valid parentheses substring is `()(()))` which has length 6.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid parentheses substring. max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length def solve_test_cases(T, test_cases): results = [] for i in range(T): result = longest_valid_parentheses(test_cases[i]) results.append(result) return results"},{"question":"A company has a policy to give bonuses to its employees based on their performance. The performance is scored on a scale from 1 to 10. To ensure fairness, they want to distribute the bonuses in such a way that if two employees have consecutive scores, the one with the higher score must get strictly more bonuses than the one with the lower score. Additionally, each employee must receive at least one bonus. Given the scores of the employees, calculate the minimum total number of bonuses required. -----Input----- The first line of the input contains an integer, n (1 ≤ n ≤ 100 000), representing the number of employees. The second line contains n space-separated integers representing the performance scores of the employees in the order of their employee id (from 1 to n). -----Output----- Print the minimum total number of bonuses required. -----Examples----- Input 3 1 2 2 Output 4 Input 4 10 4 5 4 Output 6 -----Note----- In the first example, the optimal distribution of bonuses could be [1, 2, 1]. In the second example, one possible distribution of bonuses is [2, 1, 2, 1].","solution":"def calculate_min_bonuses(scores): n = len(scores) bonuses = [1] * n for i in range(1, n): if scores[i] > scores[i - 1]: bonuses[i] = bonuses[i - 1] + 1 for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Given a string S consisting of lowercase and uppercase Latin letters, your task is to complete the function `isPalindrome` which checks if the string is a palindrome, ignoring case and non-alphanumeric characters. A string is considered a palindrome if it reads the same forwards and backwards after ignoring non-alphanumeric characters and case differences. Example 1: Input: S = \\"A man, a plan, a canal: Panama\\" Output: True Explanation: \\"amanaplanacanalpanama\\" is a palindrome. Example 2: Input: S = \\"race a car\\" Output: False Explanation: \\"raceacar\\" is not a palindrome. Your Task: You only need to implement the given function `isPalindrome()` which returns a boolean indicating whether the string is a palindrome. Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def isPalindrome(S): Checks if the input string S is a palindrome, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lowercase filtered_str = \'\'.join(char.lower() for char in S if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_str == filtered_str[::-1]"},{"question":"Given an array of integers `arr`, rewrite the array such that all `0`s are moved to the end while maintaining the relative order of the non-zero elements. Write a function `def move_zeroes(arr: List[int]) -> List[int]:` that takes an array `arr` as a parameter and returns the modified array. # Example ```python move_zeroes([0, 1, 0, 3, 12]) # should return [1, 3, 12, 0, 0] move_zeroes([0, 0, 1]) # should return [1, 0, 0] ``` # Constraints - Do not return a new array, modify the input array in-place instead. - Try to minimize the total number of operations.","solution":"from typing import List def move_zeroes(arr: List[int]) -> List[int]: Move all zeros to the end of the array while maintaining the relative order of the non-zero elements. insert_pos = 0 # First pass: move non-zero elements to the front for num in arr: if num != 0: arr[insert_pos] = num insert_pos += 1 # Second pass: fill the rest of the positions with zeros while insert_pos < len(arr): arr[insert_pos] = 0 insert_pos += 1 return arr"},{"question":"Given two strings s1 and s2, determine if s2 is a rotation of s1. A rotation means that you can shift the characters in s1 to the left or right any number of times to get s2. For example, \\"abcde\\" rotated to the left by 1 would be \\"bcdea\\". Constraints * The length of the strings s1 and s2 will not exceed 1000 characters. * Both strings will only contain lowercase English letters. Input Two strings separated by a newline. Output Print \\"YES\\" if s2 is a rotation of s1, otherwise print \\"NO\\". Example Input abcde cdeab Output YES Input hello olehl Output NO","solution":"def is_rotation(s1, s2): Determines if s2 is a rotation of s1. if len(s1) != len(s2): return \\"NO\\" # Concatenate s1 with itself concatenated = s1 + s1 # Check if s2 is a substring of the concatenated string if s2 in concatenated: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size N x M initially filled with zeros. There are also K operations to be performed on this grid. Each operation can be one of the following types: 1. Update the value of a specific cell in the grid to a given value. 2. Find the sum of all the values in a subgrid defined by its top-left cell (r1, c1) and bottom-right cell (r2, c2). Your task is to process these operations and return the results for the sum queries. Input: - The first line contains three space-separated integers N, M, and K. - The next K lines describe the operations to be performed. Each operation is one of the following types: - \\"1 r c x\\": Update the cell at row r and column c to the value x. - \\"2 r1 c1 r2 c2\\": Find the sum of the subgrid with top-left corner (r1, c1) and bottom-right corner (r2, c2). Constraints: 1 ≤ N, M ≤ 1000 1 ≤ K ≤ 100000 1 ≤ r, r1, r2 ≤ N 1 ≤ c, c1, c2 ≤ M 0 ≤ x ≤ 1000 r1 ≤ r2 c1 ≤ c2 Output: - For each sum query, output the sum of the subgrid. SAMPLE INPUT 5 5 6 1 1 1 5 1 2 3 7 2 1 1 2 3 1 3 3 2 2 2 2 5 5 2 1 1 5 5 SAMPLE OUTPUT 12 9 14","solution":"def process_operations(N, M, K, operations): grid = [[0] * M for _ in range(N)] results = [] for operation in operations: op_type, *args = operation if op_type == 1: r, c, x = args grid[r-1][c-1] = x elif op_type == 2: r1, c1, r2, c2 = args subgrid_sum = 0 for r in range(r1-1, r2): for c in range(c1-1, c2): subgrid_sum += grid[r][c] results.append(subgrid_sum) return results"},{"question":"You are given two strings, s and t, both consisting of lowercase English letters. Your task is to determine if string t is a *subsequence* of string s. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not. # Input - The first line contains a single string s (1 ≤ |s| ≤ 1000), the string to be checked. - The second line contains a single string t (1 ≤ |t| ≤ 1000), the subsequence candidate. # Output - Output \\"YES\\" if t is a subsequence of s. - Output \\"NO\\" otherwise. # Examples Example 1 Input: ``` abcde ace ``` Output: ``` YES ``` Example 2 Input: ``` abcde aecd ``` Output: ``` NO ``` Example 3 Input: ``` hello helo ``` Output: ``` YES ``` Example 4 Input: ``` hello world ``` Output: ``` NO ``` # Notes: - In the first example, \\"ace\\" is a subsequence of \\"abcde\\" since we can delete the characters \'b\' and \'d\'. - In the second example, \\"aecd\\" is not a subsequence of \\"abcde\\", because even though all characters appear in \\"abcde\\", they are not in the correct order. - The order of characters must be preserved to form a subsequence.","solution":"def is_subsequence(s, t): Determines if t is a subsequence of s. Args: s (str): The original string. t (str): The subsequence candidate. Returns: str: \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\". # Initialize two pointers i, j = 0, 0 # Traverse both strings while i < len(s) and j < len(t): # If characters match, move the subsequence pointer if s[i] == t[j]: j += 1 # Move the original string pointer i += 1 # If all characters in t were found in s in order, j should be equal to len(t) return \\"YES\\" if j == len(t) else \\"NO\\""},{"question":"You are a manager at a factory that packages products into boxes for shipping. The products come in various sizes, and your job is to determine the minimum number of boxes required to package all products while ensuring that each box does not exceed a given weight limit. Each product has a weight, and the weight of a product can be any positive integer. You are given the maximum weight limit for each box. Your goal is to determine the minimum number of boxes needed to pack all the products without exceeding the weight limit for any box. -----Input----- The first line contains two integers n and W (1 le n le 100000, 1 le W le 1000), where n is the number of products and W is the maximum weight limit for each box. The second line contains n integers w_1, w_2, ldots, w_n (1 le w_i le 1000) representing the weight of each product. -----Output----- Output a single integer representing the minimum number of boxes required to pack all products. -----Examples----- Sample Input 1: 5 10 2 3 4 5 8 Sample Output 1: 3 Sample Input 2: 6 8 4 4 8 6 2 3 Sample Output 2: 4 Sample Input 3: 3 10 10 10 10 Sample Output 3: 3","solution":"def min_boxes_required(n, W, weights): Returns the minimum number of boxes required to pack all products without exceeding the weight limit W for any box. Parameters: n (int): Number of products. W (int): Maximum weight limit for each box. weights (list): List of weights of each product. Returns: int: Minimum number of boxes required. weights.sort(reverse=True) used_boxes = 0 while weights: box_weight = 0 items_to_remove = [] for i in range(len(weights)): if box_weight + weights[i] <= W: box_weight += weights[i] items_to_remove.append(i) for i in reversed(items_to_remove): # Remove items from end to beginning to avoid reindexing issues weights.pop(i) used_boxes += 1 return used_boxes"},{"question":"Implement a function that determines the type of a triangle given the lengths of its sides. The function should return: - \\"Equilateral\\" if all three sides are equal, - \\"Isosceles\\" if exactly two sides are equal, and - \\"Scalene\\" if all three sides are different. However, before categorizing the triangle, you need to check if the sides form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third side. If the sides do not form a valid triangle, return \\"Not a triangle\\". Example 1: Input: a = 5, b = 5, c = 5 Output: \\"Equilateral\\" Example 2: Input: a = 4, b = 4, c = 5 Output: \\"Isosceles\\" Example 3: Input: a = 3, b = 4, c = 5 Output: \\"Scalene\\" Example 4: Input: a = 1, b = 2, c = 3 Output: \\"Not a triangle\\" Your Task: You don\'t need to read or print anything. Your task is to complete the function classifyTriangle() which takes three integers a, b, and c as input parameters and returns the type of the triangle or an indication that it\'s not a valid triangle. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 <= a, b, c <= 100","solution":"def classify_triangle(a, b, c): Classifies a triangle based on the lengths of its sides. Parameters: a (int): Length of side a b (int): Length of side b c (int): Length of side c Returns: str: Type of the triangle or \\"Not a triangle\\" if sides don\'t form a valid triangle # Check if the sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" # Check for Equilateral triangle if a == b == c: return \\"Equilateral\\" # Check for Isosceles triangle if a == b or a == c or b == c: return \\"Isosceles\\" # If it\'s not Equilateral or Isosceles, it must be Scalene return \\"Scalene\\""},{"question":"A network of computers can be represented as an undirected graph. Your task is to determine the minimum number of new connections required to make all computers connected directly or indirectly. You are given the number of computers `n` and a list of existing connections, where each connection is represented as a tuple `(a, b)` showing there’s a direct connection between computer `a` and computer `b`. Write a function that returns the minimum number of new connections needed. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^4), the number of computers. - The second line contains an integer `m` (0 ≤ m ≤ 10^4), the number of existing connections. - The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), representing an existing connection between computers `a` and `b`. Output - Print a single integer, which is the minimum number of new connections required to connect all computers. Examples Input 6 3 1 2 2 3 4 5 Output 2 Input 5 0 Output 4 Input 3 2 1 2 2 3 Output 0","solution":"def min_new_connections(n, connections): Returns the minimum number of new connections required to make all computers connected. Parameters: n : int : Number of computers connections : List[Tuple[int,int]] : List of existing connections Returns: int : Number of new connections required from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create graph from connections graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Find number of connected components visited = [False] * (n + 1) num_connected_components = 0 for computer in range(1, n + 1): if not visited[computer]: num_connected_components += 1 bfs(computer) # Number of new connections needed is (num_connected_components - 1) return num_connected_components - 1"},{"question":"David is using a messaging app that supports message recall functionality. Each message has a unique ID, and David can issue commands to either send a message or recall an existing message. He wants to find out, after performing a series of operations, which messages are still present. Write a function that processes a sequence of operations and outputs the IDs of the messages that remain. Each operation is one of the following: 1. **\\"send X\\"**: Send a message with ID X. 2. **\\"recall X\\"**: Recall a message with ID X if it exists. The function should take an integer `n` (the number of operations) and an array of strings `operations` (the list of operations in order). The function should return a sorted list of message IDs that were sent but not recalled. -----Input----- The first line contains an integer `n` (1 leq n leq 10^5), the number of operations. Each of the next `n` lines contains an operation (either \\"send X\\" or \\"recall X\\") with `1 leq X leq 10^6`. -----Output----- Return a sorted list of IDs of messages that were sent but not recalled. -----Examples----- Sample Input 1: 5 send 1 send 2 recall 1 send 3 send 1 Sample Output 1: [1, 2, 3] Sample Input 2: 4 send 4 recall 4 send 4 recall 4 Sample Output 2: []","solution":"def process_message_operations(n, operations): Processes the message operations to find out which messages remain. Parameters: n (int): The number of operations. operations (list): The list of operations as strings. Returns: list: A sorted list of message IDs that were sent but not recalled. sent_messages = set() for operation in operations: action, _, message_id_str = operation.partition(\' \') message_id = int(message_id_str) if action == \'send\': sent_messages.add(message_id) elif action == \'recall\': if message_id in sent_messages: sent_messages.remove(message_id) return sorted(sent_messages)"},{"question":"Tim is planning to go shopping. He has a list of items he wants to buy, and he knows the price of each item. Tim wants to buy as many items as possible without exceeding the total amount of money he has. Write a program that determines the maximum number of items Tim can buy. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and M, where N is the number of items and M is the total amount of money Tim has. - The second line contains N space-separated integers, where each integer represents the price of an item. ------ Output Format ------ For each test case, output on a new line a single integer, the maximum number of items Tim can buy without exceeding the total amount of money he has. ------ Constraints ----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 10^5 1 ≤ text{item price} ≤ 10^4 ------ Sample Input 1 ------ 3 4 50 10 20 30 40 5 100 25 50 75 100 125 3 60 15 25 35 ------ Sample Output 1 ------ 2 2 3 ------ Explanation 1 ------ Test case 1: Tim can buy items with prices 10 and 20, spending a total of 30 which is within his budget of 50. He can buy 2 items in total. Test case 2: Tim can buy items with prices 25 and 50, spending a total of 75 which is within his budget of 100. He can buy 2 items in total. Test case 3: Tim can buy all three items with prices 15, 25, and 35, spending a total of 75 which is higher than his budget of 60. Therefore, Tim can only buy all the items individually, but if he leaves the item priced 35, he can buy 2 other items (15, 25) spending only 40 which is within his budget. So, the maximum Tim can buy is 2 items.","solution":"def max_items_count(T, test_cases): Determines the maximum number of items Tim can buy without exceeding his budget. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains: - N (int): Number of items - M (int): Total amount of money Tim has - prices (list of int): List of item prices Returns: list of int: Maximum number of items Tim can buy for each test case results = [] for case in test_cases: N, M, prices = case prices.sort() # Sort the prices in ascending order total_cost = 0 count = 0 for price in prices: if total_cost + price <= M: count += 1 total_cost += price else: break results.append(count) return results"},{"question":"Given a number N. The task is to check if N is a Kaprekar number or not. A Kaprekar number for a given base is a non-negative integer, the representation of whose square can be split into two parts that add up to the original number (where neither part has leading zeroes, if the number is not zero). For example, 45 is a Kaprekar number, because 45^2 = 2025, and 20 + 25 = 45. Example 1: Input: N = 45 Output: 1 Explanation: 45^2 = 2025, and 20 + 25 = 45. Example 2: Input: N = 46 Output: 0 Explanation: 46^2 = 2116, and neither 21 + 16 nor 2 + 116 equals 46. Your task: You do not need to read input or print anything. Your task is to complete the function isKaprekar() which takes N as input parameter and returns 1 if it is a Kaprekar number, else returns 0. Expected Time Complexity: O(d^2), where d is the number of digits in N. Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6","solution":"def isKaprekar(n): Returns 1 if the given number n is a Kaprekar number, otherwise returns 0. if n == 1: return 1 n_squared = n * n n_squared_str = str(n_squared) for i in range(1, len(n_squared_str)): left_part = n_squared_str[:i] right_part = n_squared_str[i:] if right_part != \'\' and int(right_part) != 0: if int(left_part or \'0\') + int(right_part) == n: return 1 return 0"},{"question":"In a game, there is a grid of size n times m containing numbers. You can move from a cell to any of its 4 adjacent cells (left, right, up, down) if and only if the value in the destination cell is equal to or greater than the value in the current cell. You are initially allowed to start from any cell that contains the minimum value in the grid. Determine the maximum value you can reach starting from any of the minimum value cells. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers each, denoting the values in the grid. All values are between 1 and 10^{6} inclusive. -----Output----- Print a single integer, the maximum value that can be reached starting from any of the minimum value cells in the grid. -----Examples----- Input 3 3 4 5 6 3 2 1 8 7 2 Output 8 Input 4 4 1 4 3 1 2 1 3 4 3 2 1 2 4 3 2 1 Output 4 Input 2 2 5 8 7 5 Output 8 -----Note----- In the first example, starting from the cell containing 1 at position (2, 3), you can move to cells (1, 3), (2, 3), and (3, 3), reaching the maximum value 8. In the second example, the minimum value is 1, which is located at multiple positions: (1, 1), (1, 4), (2, 2), and (3, 4). The maximum value reachable from any of these cells is 4. In the last example, the minimum value is 5, starting from which you can reach the maximum value 8.","solution":"def find_maximum_value(grid): n = len(grid) m = len(grid[0]) min_val = min(min(row) for row in grid) from collections import deque moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] max_val = min_val queue = deque() for i in range(n): for j in range(m): if grid[i][j] == min_val: queue.append((i, j)) visited[i][j] = True while queue: x, y = queue.popleft() max_val = max(max_val, grid[x][y]) for move in moves: nx, ny = x + move[0], y + move[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] >= grid[x][y]: visited[nx][ny] = True queue.append((nx, ny)) return max_val"},{"question":"Write a function that finds the longest increasing subarray in a given array of integers. An increasing subarray is defined as a contiguous subarray where each element is strictly greater than the element before it. The function should return the length of this longest increasing subarray. Example 1: Input: [1, 3, 5, 4, 7] Output: 3 Explanation: The longest increasing subarray is [1, 3, 5], which has length 3. Example 2: Input: [2, 2, 2, 2, 2] Output: 1 Explanation: The longest increasing subarray has length 1 as all elements are the same. Your task: This is a function problem. You don\'t need to take input. You are required to complete the function longestIncreasingSubarray() that takes a list of integers as parameter and returns the length of the longest increasing subarray. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Length of the array <= 10^5 -10^3 <= Array elements <= 10^3","solution":"def longestIncreasingSubarray(arr): Finds the length of the longest strictly increasing subarray in the given array. Parameters: arr (list): A list of integers. Returns: int: Length of the longest strictly increasing subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Checkered Sequence === Description --- Alice and Bob are playing a game where they take turns selecting numbers from a sequence. The sequence contains non-negative integers, and each player wants to maximize their own score while minimizing the score of the other player. Alice always starts first. The players can only pick from the start or the end of the sequence on their turn. The game ends when there are no more integers left to pick. Task --- Your task is to implement a function **optimal_score(sequence)** that calculates the maximum score Alice can achieve if both players play optimally. The function takes a single argument: 1. A list of non-negative integers representing the sequence of numbers. The function should return the maximum score Alice can achieve. Examples --- ```python optimal_score([1, 2, 9, 4]) # returns 10 optimal_score([5, 3, 7, 10]) # returns 15 optimal_score([8, 15, 3, 7]) # returns 22 ``` Note --- - In the first example, Alice will pick 4 from the end, Bob will pick 9 from the start, leaving Alice to take 2 and finally Bob to take 1. Alice\'s total score is 4 + 6 = 10. - In the second example, Alice will pick 10 from the end, Bob will pick 7 from the end, and Alice will take 5 from the start, leaving Bob to pick 3 from the start. Alice\'s total score is 10 + 5 = 15. - In the third example, Alice will pick 8 from the start, Bob will pick 15 from the start, leaving Alice to take 3 and finally Bob to take 7. Alice\'s total score is 8 + 3 + 11.","solution":"def optimal_score(sequence): n = len(sequence) # Create a memoization table to store intermediate results dp = [[0] * n for _ in range(n)] sum_seq = [[0] * n for _ in range(n)] # Initialize the simple base case for i in range(n): dp[i][i] = sequence[i] sum_seq[i][i] = sequence[i] # Fill the sums table - sum_seq[i][j] will hold the sum from sequence[i] to sequence[j] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 sum_seq[i][j] = sum_seq[i][j - 1] + sequence[j] # Fill the dp table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(sequence[i] + (sum_seq[i + 1][j] - dp[i + 1][j]), sequence[j] + (sum_seq[i][j - 1] - dp[i][j - 1])) return dp[0][n - 1]"},{"question":"You are given a collection of `n` distinct integers. Your task is to find out whether there exists a pair of integers (a, b) in this collection such that their product is a perfect square, and b is greater than or equal to a^2 + a. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, 16, and 25 are perfect squares. Input The first line contains an integer `n` (2 ≤ n ≤ 10^5), the number of integers in the collection. The second line contains `n` distinct space-separated integers, each between -10^9 and 10^9 inclusively. Output If such a pair of integers exists, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 3 12 25 7 18 Output YES Input 3 5 7 11 Output NO Note In the first sample, (3, 12) is a valid pair since their product is 36, which is a perfect square (6^2), and 12 is greater than or equal to 3^2 + 3 (12). In the second sample, no such pair exists in the collection.","solution":"import math def is_perfect_square(num): if num < 0: return False sqrt_num = int(math.sqrt(num)) return sqrt_num * sqrt_num == num def has_pair_with_condition(n, integers): integers_set = set(integers) for a in integers: for b in integers: if b >= a * a + a: product = a * b if is_perfect_square(product): return \\"YES\\" return \\"NO\\""},{"question":"Given a string S of length N, you are allowed to remove exactly one substring (a contiguous block of characters) of your choice and count the frequency of the remaining characters in the string. Your goal is to maximize the count of the letter \'a\' by removing exactly one substring. Write a program to find the maximum possible count of the letter \'a\' in the string after removing exactly one substring. -----Constraints----- - 1 ≤ N ≤ 10^5 - S consists of lowercase English letters only. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the maximum possible count of the letter \'a\' in the string after removing exactly one substring. -----Sample Input----- abcda -----Sample Output----- 2 Explanation: By removing the substring \'bcd\', the remaining string will be \'aa\', and it contains two \'a\'s. This is the maximum possible count of \'a\' after removing one substring.","solution":"def max_count_of_a_after_removal(s): Returns the maximum possible count of the letter \'a\' in the string after removing exactly one substring. n = len(s) total_count_a = s.count(\'a\') if total_count_a == n: return total_count_a max_count_a = 0 count_a_prefix = [0] * (n + 1) for i in range(n): count_a_prefix[i + 1] = count_a_prefix[i] + (1 if s[i] == \'a\' else 0) for i in range(n): for j in range(i, n): remaining_a = count_a_prefix[i] + (count_a_prefix[n] - count_a_prefix[j + 1]) max_count_a = max(max_count_a, remaining_a) return max_count_a"},{"question":"Design a stack data structure that supports the following operations: * `push x`: Push the integer x onto the stack. * `pop`: Remove the element on the top of the stack. * `top`: Get the top element of the stack. * `min`: Retrieve the minimum element in the stack. Your implementation must ensure that all operations run in O(1) time complexity. Constraints * The number of operations is leq 100,000. * The values of the integers are in the range -10^9 to 10^9. Input In the first line, the number of operations n is given. In the following n lines, operations represented by `push x`, `pop`, `top`, or `min` are given. Output For each `top` and `min` operation, print the result on a new line. If the `pop` operation is called on an empty stack, do nothing. If the `top` or `min` operation is called on an empty stack, print \\"Stack is empty\\" on a new line. Example Input 12 push 3 push 5 min push 2 push 1 min pop top min pop pop min Output 3 1 2 3 Stack is empty","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -> None: self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() self.stack.pop() def top(self): if self.stack: return self.stack[-1] else: return \\"Stack is empty\\" def min(self): if self.min_stack: return self.min_stack[-1] else: return \\"Stack is empty\\""},{"question":"You are given information about a set of courses and their prerequisites in the form of a list `prerequisites` where `prerequisites[i] = [a, b]` indicates that to take course `a`, you must first complete course `b`. Write a function that determines if it is possible to finish all courses given the prerequisites. Example 1: Input: numCourses = 2, prerequisites = [[1, 0]] Output: true Explanation: There are two courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Input: numCourses = 2, prerequisites = [[1, 0], [0, 1]] Output: false Explanation: There are two courses to take. To take course 1 you should have finished course 0, and to take course 0 you should have finished course 1. So it is impossible. Constraints: - The input prerequisites is a list where `prerequisites[i]` list contains exactly two elements denoting the courses. - The courses are labeled from 0 to `numCourses - 1`. - 1 <= numCourses <= 2000 - 0 <= len(prerequisites) <= 5000","solution":"from collections import defaultdict, deque def canFinish(numCourses, prerequisites): Determines if it is possible to finish all courses given the prerequisites. Args: - numCourses (int): The total number of courses. - prerequisites (List[List[int]]): List of course pairs [a, b] indicating that course a depends on course b. Returns: - bool: True if it is possible to finish all courses, False otherwise. indegree = [0] * numCourses adj_list = defaultdict(list) # Build the graph and the indegree array for dest, src in prerequisites: indegree[dest] += 1 adj_list[src].append(dest) # Initialize the queue with courses having zero in-degree queue = deque([i for i in range(numCourses) if indegree[i] == 0]) visited = 0 # Count of courses that have been visited while queue: course = queue.popleft() visited += 1 for neighbor in adj_list[course]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return visited == numCourses"},{"question":"Mary is a fan of sequences. She recently discovered a sequence of positive integers where each number is greater than the sum of the previous two numbers. Such a sequence is called a \\"Mary\'s sequence.\\" Mary wants to create a function to verify if a given sequence of integers is indeed a \\"Mary\'s sequence\\". Given an integer array representing the sequence, your task is to determine if the sequence is a \\"Mary\'s sequence\\" and output \\"Yes\\" or \\"No\\" accordingly. Input The first line contains an integer n (3 ≤ n ≤ 500) - the length of the sequence. The second line contains n integers separated by spaces representing the sequence (1 ≤ sequence[i] ≤ 100000). Output Print \\"Yes\\" if the sequence is a \\"Mary\'s sequence\\". Otherwise, print \\"No\\". Examples Input 5 1 2 4 8 15 Output Yes Input 4 5 1 4 9 Output No Note In the first test, the sequence is [1, 2, 4, 8, 15], which is a \\"Mary\'s sequence\\" since 2 > 1, 4 > 1+2, 8 > 2+4, and 15 > 4+8. In the second test, the sequence is [5, 1, 4, 9]. The element 1 is not greater than the sum of the previous elements, so the output is \\"No\\".","solution":"def is_mary_sequence(sequence): Determines if the given sequence is a \'Mary\'s sequence\'. A \'Mary\'s sequence\' is a sequence of positive integers where each number is greater than the sum of the previous two numbers. Args: sequence (list of int): the sequence of integers to be checked. Returns: str: \'Yes\' if the sequence is a Mary\'s sequence, \'No\' otherwise. n = len(sequence) for i in range(2, n): if sequence[i] <= sequence[i-1] + sequence[i-2]: return \\"No\\" return \\"Yes\\""},{"question":"Rahul and Priya love playing with numbers. Rahul thought of giving Priya a challenge where she has to find out if a given list of integers is a subsequence of a larger list of integers. Rahul provides two lists and asks Priya to determine if all the elements of the smaller list appear in the larger list in the same order. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains the space-separated integers of the smaller list. - The second line contains the space-separated integers of the larger list. Output: For each test case, print \\"YES\\" or \\"NO\\" (quotes for clarity) depending on whether the smaller list is a subsequence of the larger list. Constraints: 1 ≤ T ≤ 50, 1 ≤ length of smaller list ≤ 1000, 1 ≤ length of larger list ≤ 100000, 1 ≤ each integer in the list ≤ 1000000. SAMPLE INPUT 2 1 3 5 1 2 3 4 5 4 6 9 4 5 6 7 8 9 SAMPLE OUTPUT YES YES","solution":"def is_subsequence(smaller, larger): Determines if the list \'smaller\' is a subsequence of the list \'larger\'. Args: smaller (list of int): The smaller list where order of elements must be conserved. larger (list of int): The larger list which may contain the smaller list as a subsequence. Returns: bool: True if \'smaller\' is a subsequence of \'larger\', False otherwise. it = iter(larger) return all(x in it for x in smaller) def subsequence_checker(test_cases): Processes multiple test cases to check if each smaller list is a subsequence of the corresponding larger list. Args: test_cases (list of tuple): List of tuples, where each tuple contains: (smaller, larger) - two lists of integers. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case. results = [] for smaller, larger in test_cases: if is_subsequence(smaller, larger): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant galaxy, there is a unique numerical puzzle that needs to be solved. You are given an array of integers and need to process multiple queries, each asking for the sum of a subarray. To make things more challenging, the array and the number of queries can be significantly large. You are to write a program that efficiently answers each query of the form: \\"What is the sum of the integers in the subarray from index L to index R?\\" Input The input consists of multiple lines. The first line contains two integers N and Q, where N represents the number of integers in the array, and Q represents the number of queries. The second line contains N integers separated by spaces, denoting the elements of the array. The next Q lines each contain two integers L and R, representing a query that asks for the sum of the array\'s elements from index L to index R (inclusive). Please note that the array is zero-indexed. Output For each query, output the sum of the subarray from index L to R on a new line. Constraints 1 ≤ N ≤ 100000 1 ≤ Q ≤ 100000 -1000 ≤ Elements of the array ≤ 1000 0 ≤ L ≤ R < N Sample Input 5 3 1 2 3 4 5 0 2 1 3 0 4 Sample Output 6 9 15 Explanation For the first query, the subarray from index 0 to 2 is [1, 2, 3], and its sum is 6. For the second query, the subarray from index 1 to 3 is [2, 3, 4], and its sum is 9. For the third query, the subarray from index 0 to 4 is [1, 2, 3, 4, 5], and its sum is 15.","solution":"def process_queries(arr, queries): Process the queries to get the sum of subarrays. Parameters: - arr: list of integers representing the array - queries: list of tuples (L, R), where L and R are the indices for the subarray sum query Returns: - list of integers representing the results of the subarray sums for each query # Generate prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): prefix_sums[i + 1] = prefix_sums[i] + arr[i] # Process each query results = [] for L, R in queries: sum_subarray = prefix_sums[R + 1] - prefix_sums[L] results.append(sum_subarray) return results # Example usage with the given sample # Sample input data: N = 5 Q = 3 arr = [1, 2, 3, 4, 5] queries = [(0, 2), (1, 3), (0, 4)] # Processing queries result = process_queries(arr, queries) print(result) # Output should be [6, 9, 15]"},{"question":"Alice and Bob are fond of sorting numbers and have come up with a new game they play using arrays. Given a non-empty array of integers, they take turns modifying the array by either adding a new element or removing an existing one. The goal is to leave the array sorted in strictly increasing order. Rules of the game: 1. Alice always starts first. 2. On each turn, the current player can choose to either: - Add a new integer to the array. - Remove an existing integer from the array. 3. When adding a number, the chosen number can be any integer not currently in the array. 4. When removing a number, the chosen number must be currently in the array. 5. The game ends if the remaining array is sorted in strictly increasing order. 6. The player who leaves the array sorted in strictly increasing order wins the game. Input The first line contains an integer n (1 ≤ n ≤ 100) — the initial number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the initial array. Output Print a single line with the winner\'s name. If Alice wins, print \\"Alice\\"; otherwise, print \\"Bob\\" (without quotes). Examples Input 5 3 1 2 5 4 Output Alice Input 4 10 20 10 15 Output Bob Note Consider the first test sample. Alice moves first and can remove 1 or 2 for instance, making the array [3, 5, 4] and leaving Bob to make the next move. If both players play optimally, Alice can always make the series of moves that will lead her to win. In the second test sample, no matter what move Alice makes, Bob can always reach a sorted array first. Therefore, the winner is Bob.","solution":"def game_winner(n, array): Determines the winner of the game based on the rules provided. Parameters: n (int): Initial number of elements in the array array (list of int): The elements of the initial array Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" otherwise def is_strictly_increasing(a): Helper function to check if an array is strictly increasing. return all(a[i] < a[i + 1] for i in range(len(a) - 1)) if is_strictly_increasing(array) or n == 1: return \\"Alice\\" if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A city\'s metro system consists of m stations connected by n bidirectional tracks, forming a connected graph. The metro company wants to assign a color to each track such that no two tracks incident on the same station have the same color. Determine the minimum number of colors needed to achieve this. -------Input------- The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n * (n - 1) / 2) — the number of stations and the number of tracks, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting a track between stations u and v. No two tracks will connect the same pair of stations. -------Output------- Output a single integer — the minimum number of colors needed. -------Examples------- Input 3 3 1 2 2 3 3 1 Output 3 Input 4 4 1 2 1 3 1 4 2 3 Output 3 -------Note------- In the first example, each station is connected to all other stations (a complete graph), thus requiring three colors, one for each track. In the second example, station 1 is connected to three stations, so three colors are needed where the tracks incident on station 1 will each have a unique color.","solution":"def min_colors_needed(n, m, edges): Returns the minimum number of colors needed to assign to the tracks such that no two tracks incident on the same station have the same color. if m == 0: # No tracks return 0 # Initializing degrees of stations degrees = [0] * (n + 1) # Increment degree count for each station at both ends of each track for u, v in edges: degrees[u] += 1 degrees[v] += 1 # The minimum number of colors needed is maximum degree encountered + 1 max_degree = max(degrees) return max_degree"},{"question":"Your friend is organizing a relay race and needs to determine the total distance for different teams. Each team consists of runners who each run a different fixed distance. Write a program to calculate the total distance run by a team based on the number of runners and their respective distances. Input First, an integer n (1 ≤ n ≤ 100) representing the number of runners in the team. Followed by n integers indicating the distance each runner will run (each distance is a positive integer ≤ 1000). Output Print the total distance run by the team in a line. Example Input 4 250 340 180 230 Output 1000","solution":"def total_distance(n, distances): Returns the total distance run by the team. Parameters: n (int): Number of runners distances (list of int): List of distances run by each runner Returns: int: Total distance run by the team return sum(distances)"},{"question":"**Budget Tracker** You are developing a budget tracking application. One of the features requires calculating the remaining budget based on a sequence of transactions. Your task is to implement a function `remainingBudget(startingBudget, transactions)` that takes an initial budget (a positive integer) and a list of transactions (each a string with either a positive or negative integer, indicating an income or an expense respectively). The function should return the remaining budget after applying all transactions. If applying any transaction causes the budget to go below zero, an error message \\"Budget overdrawn!\\" should be returned instead. Examples: ``` remainingBudget(1000, [\\"-200\\", \\"+300\\", \\"-500\\"]); // returns 600 remainingBudget(500, [\\"-400\\", \\"+100\\", \\"-300\\"]); // returns \\"Budget overdrawn!\\" ``` Constraints: - The `startingBudget` will always be a positive integer (0 < startingBudget ≤ 10^6) - Each transaction will be a string representing either a positive or negative integer (e.g., \\"+500\\", \\"-100\\"). - The list of transactions can be empty, in which case the function should return the `startingBudget`. - Assume valid inputs (no invalid transaction strings). Notes: - Be sure to handle edge cases, such as when the budget does not change, or when all transactions are positive. - For simplicity, assume no fractional transactions—everything is in whole numbers.","solution":"def remainingBudget(startingBudget, transactions): Calculates the remaining budget after applying a list of transactions. If budget goes below zero at any point, returns \\"Budget overdrawn!\\". Parameters: startingBudget (int): The initial budget. transactions (list): A list of transactions as strings, where each transaction is a positive or negative integer. Returns: int or str: The remaining budget or \\"Budget overdrawn!\\" if budget goes below zero. # Initialize the current budget to the starting budget currentBudget = startingBudget # loop through each transaction for transaction in transactions: # Parse transaction to integer and apply it to the current budget currentBudget += int(transaction) # If current budget goes below zero, return error message if currentBudget < 0: return \\"Budget overdrawn!\\" # Return the remaining budget after all transactions return currentBudget"},{"question":"A warehouse management system needs to keep track of the inventory levels of different products. Each product has a unique ID and a corresponding quantity value. You need to implement a function to help manage this inventory data. The function should support the following operations: 1. Add a specified quantity of a product to the inventory. 2. Subtract a specified quantity of a product from the inventory, ensuring that the quantity does not drop below zero. 3. Retrieve the current quantity of a product by its ID. Function Description Complete the `manageInventory` function in the editor below. It should handle the operations based on the input provided and return the required output. `manageInventory` has the following parameters: - `operations`: A list of tuples representing the operations to be performed on the inventory. Each tuple contains a string representing the operation type (\\"add\\", \\"subtract\\", or \\"get\\") and the necessary additional parameters. For \\"add\\" and \\"subtract\\", the additional parameters are the product ID and the quantity. For \\"get\\", the parameter is the product ID only. Input Format - A list of operations, where each operation is represented as a tuple. - For \\"add\\" and \\"subtract\\": the tuple is (\\"add\\" or \\"subtract\\", product_id, quantity). - For \\"get\\": the tuple is (\\"get\\", product_id). Constraints - The product ID is a positive integer. - The quantity is a positive integer. - The operations may be in any order. - There will be at least one operation in the input. - Product IDs will be unique for \\"add\\" operations. Output Format - For each \\"get\\" operation, return the current quantity of the specified product ID. - If a product ID does not exist in the inventory when a \\"get\\" operation is called, return 0 for that product ID. Sample Input 0 [ (\\"add\\", 101, 50), (\\"add\\", 102, 20), (\\"subtract\\", 101, 30), (\\"get\\", 101), (\\"get\\", 102), (\\"get\\", 103) ] Sample Output 0 [ 20, 20, 0 ] Explanation 0 Initially, product 101 is added with a quantity of 50, and product 102 is added with a quantity of 20. Then, 30 units are subtracted from product 101, leaving it with 20 units. The \\"get\\" operations retrieve the current quantities of products 101, 102, and 103. Since product 103 does not exist in the inventory, the function returns 0 for it.","solution":"def manageInventory(operations): inventory = {} results = [] for operation in operations: op_type = operation[0] if op_type == \\"add\\": product_id = operation[1] quantity = operation[2] if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif op_type == \\"subtract\\": product_id = operation[1] quantity = operation[2] if product_id in inventory: inventory[product_id] = max(0, inventory[product_id] - quantity) elif op_type == \\"get\\": product_id = operation[1] results.append(inventory.get(product_id, 0)) return results"},{"question":"# Task: Given an integer `n`, write a function to check if it\'s a prime number and return the `n`-th Fibonacci number if it is, or the sum of all even numbers from `1` to `n` (inclusive) if it is not. Example: ```python Input: process_number(7) Output: \\"7 is prime, 13th Fibonacci number is 13\\" ``` ```python Input: process_number(10) Output: \\"10 is not prime, sum of evens is 30\\" ``` **Note:** The Fibonacci sequence starts from 0, 1, 1, 2, 3, 5, 8, 13...","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def fibonacci(n): Returns the n-th Fibonacci number. The Fibonacci sequence starts from 0, 1, 1, 2, 3, 5, 8, ... if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def sum_of_evens(n): Returns the sum of all even numbers from 1 to n (inclusive). return sum(i for i in range(2, n + 1, 2)) def process_number(n): Processes the number according to the problem description. if is_prime(n): fib_num = fibonacci(n) return f\\"{n} is prime, {n}th Fibonacci number is {fib_num}\\" else: even_sum = sum_of_evens(n) return f\\"{n} is not prime, sum of evens is {even_sum}\\""},{"question":"You are given an undirected graph with N vertices and M edges. Your task is to determine the number of components in the graph that are bipartite. A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. ------ Input ------ The first line of the input contains two space-separated integers N and M, denoting the number of vertices and the number of edges in the graph respectively. Each of the following M lines contains two space-separated integers U and V, denoting an edge between vertex U and vertex V. ------ Output ------ In a single line, print the number of bipartite components in the graph. ------ Constraints ------ 1 ≤ N, M ≤ 100000 1 ≤ U, V ≤ N ----- Sample Input 1 ------ 5 4 1 2 2 3 3 4 4 5 ----- Sample Output 1 ------ 1 ----- Sample Explanation 1 ------ The graph consists of a single component formed by the vertices {1,2,3,4,5} and this component is bipartite. ----- Sample Input 2 ------ 6 4 1 2 2 3 4 5 5 6 ----- Sample Output 2 ------ 2 ----- Sample Explanation 2 ------ There are two components in the graph. The first component formed by the vertices {1,2,3} is bipartite and the second component formed by the vertices {4,5,6} is also bipartite. So there are 2 bipartite components in total.","solution":"from collections import defaultdict, deque def is_bipartite_component(graph, start, visited): queue = deque([start]) visited[start] = 1 # Start coloring with 1 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = 1 - visited[node] queue.append(neighbor) elif visited[neighbor] == visited[node]: return False return True def count_bipartite_components(N, M, edges): graph = defaultdict(list) visited = [-1] * (N + 1) for u, v in edges: graph[u].append(v) graph[v].append(u) bipartite_count = 0 for vertex in range(1, N + 1): if visited[vertex] == -1: if is_bipartite_component(graph, vertex, visited): bipartite_count += 1 return bipartite_count"},{"question":"Given a string S, check whether it has repeated subsequences or not. A subsequence is a sequence that can be derived from another sequence by deleting some elements (possibly zero) without changing the order of the remaining elements. A repeated subsequence is a subsequence that appears at least twice in the string without overlapping. ------ Input Format ------ - The first line of input contains an integer T (1 ≤ T ≤ 100), denoting the number of test cases. - Each test case consists of a single line containing the string S, where 1 ≤ |S| ≤ 500, and S contains only lowercase English letters. ------ Output Format ------ For each test case, output \\"YES\\" (without quotes) if the string has repeated subsequences, otherwise print \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 500 ----- Sample Input 1 ------ 3 abca abcd aaaa ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: The string \\"abca\\" contains the repeated subsequence \\"a\\". Test case 2: The string \\"abcd\\" does not have any repeated subsequences. Test case 3: The string \\"aaaa\\" contains the repeated subsequences \\"aa\\".","solution":"def has_repeated_subsequence(S): from collections import Counter if len(S) > 26: return \\"YES\\" freq = Counter(S) if any(count > 1 for count in freq.values()): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(has_repeated_subsequence(S)) return results"},{"question":"Problem description: In a distant land, there are different species of magical creatures. Each creature has a different ability level represented by a positive integer. A new threat has emerged, and now the magical council is interested in identifying whether any creatures have an ability level that is a prime number. They need a program to help them sort through the data quickly. Input The first line contains an integer M - denoting the number of creatures. The description of these creatures follows in the next M lines. Output Output the IDs of the creatures whose ability levels are prime numbers. Constraints Formatting similar to given example 1 ≤ M ≤ 100 1 ≤ Ability Level ≤ 1000 Example1 Input: 5 Ability Level: 23 Ability Level: 18 Ability Level: 29 Ability Level: 35 Ability Level: 47 Output: 1 3 5 Example2 Input: 6 Ability Level: 10 Ability Level: 15 Ability Level: 17 Ability Level: 21 Ability Level: 31 Ability Level: 37 Output: 3 5 6 Explanation Example 1: The first, third, and fifth creatures have ability levels that are prime numbers (23, 29, and 47). Example 2: The third, fifth, and sixth creatures have ability levels that are prime numbers (17, 31, and 37).","solution":"def is_prime(n): Helper function to determine if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_creature_ids(ability_levels): Returns the IDs of creatures whose ability levels are prime numbers. prime_ids = [] for i, ability_level in enumerate(ability_levels, start=1): if is_prime(ability_level): prime_ids.append(i) return prime_ids"},{"question":"A factory has a set of N machines, each producing widgets at a constant rate. You are given two lists: 1. The first list contains N integers where the i-th integer represents the daily production rate of the i-th machine in widgets per day. 2. The second list contains N integers where the i-th integer represents the total number of widgets required from the i-th machine. Your task is to determine the minimum number of days required for all machines to collectively produce at least the required number of widgets for each of them. Input The first line of the input contains an integer N (1 ≤ N ≤ 1000) — the number of machines. The second line contains N integers — the daily production rate of each machine (1 ≤ rate ≤ 100). The third line contains N integers — the required number of widgets from each machine (1 ≤ required ≤ 10000). Output Print the minimum number of days required for all machines to produce the required number of widgets. Example Input 3 2 3 5 10 15 25 Output 5 Explanation - The first machine produces 2 widgets per day and needs 10 widgets in total, so it needs 10 / 2 = 5 days. - The second machine produces 3 widgets per day and needs 15 widgets in total, so it needs 15 / 3 = 5 days. - The third machine produces 5 widgets per day and needs 25 widgets in total, so it needs 25 / 5 = 5 days. Therefore, the minimum number of days required is the maximum of these values, which is 5.","solution":"def min_days_to_produce(N, production_rates, required_widgets): Returns the minimum number of days required for all machines to produce the required number of widgets. Parameters: - N (int): Number of machines. - production_rates (list): Daily production rates of machines. - required_widgets (list): Required number of widgets from each machine. Returns: - int: Minimum number of days required for production. max_days = 0 for rate, required in zip(production_rates, required_widgets): days = (required + rate - 1) // rate # equivalent to ceiling(required / rate) if days > max_days: max_days = days return max_days"},{"question":"Maria has a large collection of toy cars. Each car is of a different type, represented by an integer. Her friend, John, loves the toy cars and wants to borrow some of them. Since Maria does not want to give him too many cars, she decides to let him borrow at most k different types of cars such that the total number of cars he gets is maximized. Maria has provided you with a list representing her toy cars, where each element in the list denotes the type of a toy car. Your task is to help Maria find the maximum number of toy cars John can borrow while maintaining the restriction of borrowing at most k different types. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), where n is the number of toy cars Maria has, and k is the maximum number of different types John can borrow. The second line of the input contains n integers representing the types of the toy cars Maria has. Each type is an integer between 1 and 10^9. Output Output a single integer — the maximum number of toy cars John can borrow. Examples Input 10 2 1 1 2 2 2 3 3 3 4 4 Output 6 Input 5 3 1 2 2 2 3 Output 5 Note In the first example, John can borrow up to 6 cars if he chooses cars of type 2 and type 3. This is the maximum number of cars he can get while choosing at most 2 different types. In the second example, John can borrow all 5 cars since he is allowed to borrow up to 3 different types, and there are exactly 3 types available.","solution":"from collections import Counter def max_cars_borrow(n, k, cars): Returns the maximum number of toy cars John can borrow while borrowing at most k different types. Parameters: n (int): The total number of toy cars. k (int): The maximum number of different types John can borrow. cars (list): The list of toy car types. Returns: int: The maximum number of toy cars John can borrow. # Count the frequency of each car type car_count = Counter(cars) # Create a sorted list of counts in descending order sorted_counts = sorted(car_count.values(), reverse=True) # Sum up to k most frequent car counts max_borrowed = sum(sorted_counts[:k]) return max_borrowed"},{"question":"You are given a string consisting only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the sequence is a valid parentheses expression. A parentheses expression is considered valid if: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. The pairs of brackets are properly nested. -----Input----- A single line containing a string s (0 le |s| le 100,000) consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Output----- Print \\"YES\\" if the string is a valid parentheses expression, otherwise print \\"NO\\". -----Examples----- Input (){}[] Output YES Input ({[)]} Output NO Input {[()()]} Output YES -----Note----- In the first example, each pair of brackets is properly closed and nested. In the second example, the expression is not valid because \']\' does not correctly close the corresponding \'[\'. In the third example, the pairs of brackets are properly nested and closed.","solution":"def is_valid_parentheses(s): Determines if the input string s is a valid parentheses expression. :param s: String containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: \\"YES\\" if the input is a valid parentheses expression, otherwise \\"NO\\" stack = [] matching_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_pairs.values(): stack.append(char) elif char in matching_pairs.keys(): if not stack or stack[-1] != matching_pairs[char]: return \\"NO\\" stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Alice is participating in a coding competition that involves manipulating strings. One of the problems she encounters requires determining whether two strings are anagrams of each other, with an additional twist: the strings may contain uppercase and lowercase letters, but the comparison between their characters is case-insensitive. Two strings are considered anagrams if they can be rearranged to form each other by utilizing all their characters exactly once. Alice needs your help to solve this problem. Write a function that checks if the two given strings are anagrams of each other, ignoring character case. Input The first line contains an integer `T` (1 ≤ T ≤ 100) — the number of test cases. Each of the next `T` pairs of lines contains two strings `s1` and `s2`. The strings consist of upper and lowercase English letters and have lengths between 1 and 100. Output For each pair of strings, output \\"YES\\" if the strings are anagrams, otherwise output \\"NO\\". Examples Input 3 Listen Silent Hello Olelh Test Taste Output YES YES NO","solution":"def are_anagrams(s1, s2): Determines if two strings s1 and s2 are anagrams of each other, ignoring case differences. :param s1: First string :param s2: Second string :return: \\"YES\\" if s1 and s2 are anagrams, otherwise \\"NO\\" return \\"YES\\" if sorted(s1.lower()) == sorted(s2.lower()) else \\"NO\\" def anagram_checker(test_cases): For each pair of strings in test_cases, determine if they are anagrams. :param test_cases: List of tuples, where each tuple contains two strings to compare :return: List of results, where each result is \\"YES\\" or \\"NO\\" results = [] for s1, s2 in test_cases: results.append(are_anagrams(s1, s2)) return results # Example usage: # test_cases = [(\\"Listen\\", \\"Silent\\"), (\\"Hello\\", \\"Olelh\\"), (\\"Test\\", \\"Taste\\")] # print(anagram_checker(test_cases)) # Output: [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"Create a function that simulates a simplified version of a card shuffling algorithm used in games. * The function should take one parameter: a list of integers representing a deck of cards, where each integer represents a unique card. * The function should return a list of integers, representing the deck after it has been shuffled. **Further points:** * The shuffle should be random each time the function is called. * Ensure that no integer (card) in the list is repeated or missed in the output. # Example Given a deck: [1, 2, 3, 4, 5] The function could return any valid shuffled version of the deck, such as: [3, 5, 1, 4, 2]","solution":"import random def shuffle_deck(deck): Simulates a simplified version of a card shuffling algorithm. Parameters: deck (list of int): A list of integers representing a deck of cards. Returns: list of int: The shuffled deck. shuffled_deck = deck[:] random.shuffle(shuffled_deck) return shuffled_deck"},{"question":"Given an integer array `arr` of size `n`, and a positive integer `k`, you need to count the number of unique subsets of `arr` such that the sum of the elements in each subset is divisible by `k`. -----Constraints----- - 1 leq n leq 50 - 1 leq arr[i] leq 100 - 1 leq k leq 1000 -----Input----- Input is given from Standard Input in the following format: ``` n arr k ``` - `n` is the size of the array. - `arr` is the array of integers. - `k` is the positive integer. -----Output----- Print the count of unique subsets whose sum is divisible by `k`. -----Sample Input----- 4 2 4 6 8 3 -----Sample Output----- 5 The following 5 subsets satisfy the condition: - [6] - [2, 4] - [2, 6, 8] - [4, 8] - [2, 4, 6, 8]","solution":"from itertools import combinations def count_k_divisible_subsets(arr, k): Returns the count of unique subsets of `arr` such that the sum of the elements in each subset is divisible by `k`. n = len(arr) count = 0 for i in range(1, n + 1): for subset in combinations(arr, i): if sum(subset) % k == 0: count += 1 return count # Sample Input n = 4 arr = [2, 4, 6, 8] k = 3 # Sample Output print(count_k_divisible_subsets(arr, k))"},{"question":"Write a function `findLongestSubstring` that takes in a single string as a parameter and returns the length of the longest substring without repeating characters. # Example findLongestSubstring(\\"abcabcbb\\") should return 3 because \\"abc\\" is the longest substring without repeating characters. findLongestSubstring(\\"bbbbb\\") should return 1 because \\"b\\" is the longest substring without repeating characters. findLongestSubstring(\\"pwwkew\\") should return 3 because \\"wke\\" is the longest substring without repeating characters. # Rules 1. The input string will only contain printable ASCII characters. 2. The function should have a time complexity better than O(n^2), preferably O(n). # Signature def findLongestSubstring(s: str) -> int:","solution":"def findLongestSubstring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A detective finds a mysterious note containing some encoded messages. The note has a sequence of digits and the detective suspects each unique digit sequence can represent a distinct word based on a certain dictionary given to him. However, he needs your help to decode all possible words that match the whole sequence by its digits. Each digit can map to one or more characters from a dictionary of allowed mappings. Your task is to implement an algorithm that decodes the sequence into all possible words using the provided dictionary mappings. Input The first line contains a single integer n (1 ≤ n ≤ 9), representing the number of unique digit-character mappings provided. The next n lines each contain a character from \'0\'-\'9\', followed by a string of lowercase English letters that the digit can map to. The final line contains a non-empty string s consisting only of digits. Each digit in this string must be replaced by one of its corresponding characters to form a valid decoded word. Output Print all possible words that can be formed from the digit string s, each on a new line. The words should be printed in lexicographical order. Example Input 3 2 abc 3 def 5 jkl 23 Output ad ae af bd be bf cd ce cf Note In the example, the digit \'2\' can map to \'a\', \'b\', or \'c\', and the digit \'3\' can map to \'d\', \'e\', or \'f\'. Therefore, the possible words are formed by considering every combination of these mappings.","solution":"def decode_sequence_to_words(n, mappings, sequence): from itertools import product # Create a mapping dictionary from the input digit_to_chars = {mapping[0]: mapping[1] for mapping in mappings} # Generate all combinations of characters for the digit sequence combinations = list(product(*(digit_to_chars[digit] for digit in sequence))) # Concatenate tuples of characters to form full words words = [\'\'.join(combination) for combination in combinations] # Sort words lexicographically words.sort() return words def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) mappings = [line.split() for line in data[1:n + 1]] sequence = data[n + 1] results = decode_sequence_to_words(n, mappings, sequence) for word in results: print(word)"},{"question":"Amptronics, a manufacturing company, wants to implement an efficient algorithm for identifying defective products in a stream of production data. Each product is identified by a unique ID, and each production batch generates a list of product IDs. The algorithm should detect the first duplicate product ID within each batch, i.e., the first ID that appears more than once. -----Input:----- - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: 1. An integer n, the number of product IDs in the batch. 2. A line containing n space-separated integers representing the product IDs. -----Output:----- For each test case, output the first duplicated product ID. If there are no duplicates, output -1. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 10^5 - 1 leq text{Product ID} leq 10^9 -----Sample Input:----- 2 5 1 2 3 4 2 4 4 3 2 1 -----Sample Output:----- 2 -1 -----EXPLANATION:----- In the first test case, the first duplicated product ID is \'2\' which appears at the 5th position, hence the output is 2. In the second test case, there are no duplicate product IDs, so the output is -1.","solution":"def find_first_duplicate(T, test_cases): result = [] for case in test_cases: n, ids = case seen = set() first_duplicate = -1 for id in ids: if id in seen: first_duplicate = id break seen.add(id) result.append(first_duplicate) return result"},{"question":"Description In this challenge, you are tasked with writing a function that takes in a list of integers and returns a list of integers where each element is the product of all the numbers in the original list except the one at the given index. Explanation Your function will be called `product_except_self` and it will receive a list of integers as input. The function should return a new list of integers such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at index `i`. You are not allowed to use division to solve this problem. You can assume the list will have at least two elements. Example ```python product_except_self([1, 2, 3, 4]) // Returns [24, 12, 8, 6] product_except_self([2, 5, 9]) // Returns [45, 18, 10] ```","solution":"def product_except_self(nums): Returns a list such that, at each index i, the new list contains the product of all the numbers in the original list except the one at nums[i]. n = len(nums) # Initialize prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate result array result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Alex loves playing with strings and has recently started exploring ASCII art. He wants to create a simple ASCII art pattern where the alphabet characters are used to form a specific shape. Alex wants your help to generate this pattern. The pattern is defined as follows: - The pattern consists of ( n ) rows. - Each row contains a sequence of characters starting from \'A\'. - The length of each row increases by 1 compared to the previous row. - The first character of each row starts from the next character in the alphabet compared to the last row. For example, if ( n = 4 ), the pattern should be: ``` A BC CDE DEFG ``` Your task is to write a program that takes an integer ( n ) as input and generates the required pattern. # Input - A single integer ( n ) (1 ≤ ( n ) ≤ 26). # Output - ( n ) lines, each containing the corresponding sequence of characters. # Example Input ``` 4 ``` Output ``` A BC CDE DEFG ``` Input ``` 5 ``` Output ``` A BC CDE DEFG EFGHI ``` # Note The pattern continues alphabetically with each row until the nth row. You can assume the input ( n ) will always be a positive integer between 1 and 26 inclusive, ensuring that you don\'t run out of alphabet characters.","solution":"def generate_ascii_art(n): Generates an ASCII art pattern with n rows. Each row contains a sequence of characters starting from \'A\'. The length of each row increases by 1 compared to the previous row, and the first character of each row starts from the next character in the alphabet compared to the last row. Args: n (int): The number of rows Returns: List[str]: A list of strings where each string represents a row of the pattern pattern = [] for i in range(n): start_char = chr(ord(\'A\') + i) row = \'\'.join(chr(ord(start_char) + j) for j in range(i + 1)) pattern.append(row) return pattern"},{"question":"Amara is practicing for a coding competition and she is particularly interested in sequences of numbers. She recently learned about the concept of \\"peak elements\\" in an array. An element in an array is called a \\"peak\\" if it is not smaller than its neighbors. For example, in the array [1, 3, 2], the element 3 is a peak because it is greater than its neighbors. Amara now wants to write a program that finds the indices of all the peak elements in a given array. If the element is at the boundary of the array, it should be considered a peak only if it is not smaller than its single neighbor. -----Input----- The first line contains an integer n (1 <= n <= 1000) – the number of elements in the array. The second line contains n space-separated integers a_i (1 <= a_i <= 1000) – the elements of the array. -----Output----- Print space-separated indices of all the peak elements. The indices should be 0-based. -----Examples----- Input 6 1 3 2 4 5 3 Output 1 4 Input 5 10 20 15 2 23 Output 1 4","solution":"def find_peak_elements(n, array): Finds the indices of all peak elements in an array. Parameters: n (int): Number of elements in the array. array (list of int): The array of elements. Returns: list of int: Indices of all peak elements. peak_indices = [] for i in range(n): # Check if the current element is a peak if (i == 0 and n > 1 and array[i] >= array[i + 1]) or (i == n - 1 and n > 1 and array[i] >= array[i - 1]) or (0 < i < n - 1 and array[i] >= array[i - 1] and array[i] >= array[i + 1]): peak_indices.append(i) # Edge case for single element array if n == 1: peak_indices.append(0) return peak_indices"},{"question":"In a faraway kingdom, there is a circular garden with N evenly spaced stones around the periphery. Enchanted roses are planted on some of these stones. The roses have a magical property: for every two roses, there is an enchanted path connecting them that goes through the shortest distance in the circle. Your task is to calculate the total number of such enchanted paths between all pairs of roses. Input: The first line contains two integers N and M, denoting the number of stones in the circle and the number of stones with roses, respectively. The second line contains M distinct integers a_1, a_2, ..., a_M (0 ≤ a_i < N), denoting the positions of the stones with roses. Output: Output the number of unique enchanted paths modulo 1000000007. Constraints: 2 ≤ N ≤ 10^5 2 ≤ M ≤ N SAMPLE INPUT 8 3 1 4 7 SAMPLE OUTPUT 3","solution":"def count_enchanted_paths(N, M, positions): Returns the count of enchanted paths modulo 1000000007 given N stones, M stones with roses, and the positions of the roses. MOD = 1000000007 # Combinatorial calculation of number of pairs: C(M, 2) = M * (M - 1) / 2 num_paths = (M * (M - 1) // 2) % MOD return num_paths # Sample input N, M = 8, 3 positions = [1, 4, 7] output = count_enchanted_paths(N, M, positions) print(output) # Expected output: 3"},{"question":"You are hosting a dinner party and need to set up a seating arrangement for your guests. You have a large rectangular table where guests can sit on either side. Each guest has a preference for sitting either on the left or right side of the table. Some guests may not have a specific preference. To ensure everyone\'s comfort, you want to maximize the number of guests who can sit on their preferred side of the table. Given the number of guests and their preferences, determine the maximum number of guests that can be seated according to their preference. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of guests. Each of the next n lines contains a string pi — the preference of the i-th guest. The string will be \\"left\\" if the guest prefers to sit on the left side, \\"right\\" if the guest prefers to sit on the right side, or \\"none\\" if the guest has no specific preference. Output Output a single integer — the maximum number of guests that can be seated according to their preference. Examples Input 4 left right none none Output 4 Input 5 left left right right none Output 5","solution":"def max_guests_seated(n, preferences): Determines the maximum number of guests that can be seated according to their preferred side. Parameters: n (int): Number of guests. preferences (list of str): List of strings where each string is either \\"left\\", \\"right\\", or \\"none\\". Returns: int: The maximum number of guests seated according to preferences. left_preference = preferences.count(\\"left\\") right_preference = preferences.count(\\"right\\") no_preference = preferences.count(\\"none\\") max_seated = min(left_preference, right_preference) * 2 + no_preference if left_preference != right_preference: max_seated += abs(left_preference - right_preference) return max_seated # Example usage: # n = 4 # preferences = [\\"left\\", \\"right\\", \\"none\\", \\"none\\"] # print(max_guests_seated(n, preferences))"},{"question":"You are given an array of distinct integers and a target integer. Your task is to determine the number of ways to choose two different array elements such that their sum equals the target value. -----Input----- The first line contains n (2 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n space-separated integers, denoting the elements of the array. The elements are distinct and can be negative or positive, within the range of -10^9 to 10^9. The third line contains a single integer, target, the target sum. -----Output----- Print a single integer — the number of pairs of array elements that sum up to the target integer. -----Examples----- Input 5 1 2 3 4 5 5 Output 2 Input 4 -1 -2 -3 -4 -5 Output 2 -----Note----- In the first example, the pairs (1, 4) and (2, 3) sum to 5, resulting in 2 valid pairs. In the second example, the pairs (-1, -4) and (-2, -3) sum to -5, resulting in 2 valid pairs.","solution":"def count_pairs_with_sum(arr, target): Returns the number of pairs (i, j) where i != j and arr[i] + arr[j] == target. count = 0 seen = set() for number in arr: complement = target - number if complement in seen: count += 1 seen.add(number) return count"},{"question":"You are given an array of integers. Write a function that returns the third largest unique value in the array. If the array has less than three unique values, return the largest unique value. -----Input----- - An array of integers, A, where 1 leq text{length of } A leq 10^5 and each integer |A[i]| leq 10^9. -----Output----- - An integer representing the third largest unique value in the array, or the largest unique value if there are less than three unique values. -----Example----- Sample Input 1: [3, 2, 1] Sample Output 1: 1 Sample Input 2: [1, 2] Sample Output 2: 2 Sample Input 3: [2, 2, 3, 1] Sample Output 3: 1","solution":"def third_largest_unique_value(arr): Returns the third largest unique value in the array. If the array has less than three unique values, returns the largest unique value. unique_values = sorted(set(arr), reverse=True) if len(unique_values) < 3: return unique_values[0] return unique_values[2]"},{"question":"Palindrome Dissemination You are provided with a string of lowercase letters and your task is to determine whether it\'s possible to rearrange the characters of the string to form a palindrome. If a palindrome can be formed, output \\"YES\\"; otherwise, output \\"NO\\". A string can be rearranged to form a palindrome if at most one character has an odd frequency. -----Input:----- A single line containing a string s consisting of lowercase letters. -----Output:----- Print \\"YES\\" if it is possible to rearrange the characters of the string to form a palindrome or \\"NO\\" otherwise. -----Constraints----- - 1 leq |s| leq 1000 -----Sample Input:----- civic -----Sample Output:----- YES -----Sample Input:----- hello -----Sample Output:----- NO","solution":"def can_form_palindrome(s): Check if we can rearrange the string to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. Args: s (str): The input string consisting of lowercase letters. Returns: str: \\"YES\\" if it is possible to rearrange the characters of the string to form a palindrome, otherwise \\"NO\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given an array A of N integers and an integer K. You can perform the following operation zero or more times: choose a subarray of length K and reverse it. Find the lexicographically smallest array you can get by performing the operation any number of times. Constraints * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq A[i] leq 10^9 Input Input is given from Standard Input in the following format: N K A1 A2 A3 ... AN Output Print the lexicographically smallest array possible. Examples Input 4 2 3 2 1 4 Output 1 2 3 4 Input 5 3 5 4 3 2 1 Output 1 2 3 4 5","solution":"def lexicographically_smallest_array(N, K, A): Returns the lexicographically smallest array by reversing subarrays of length K any number of times. Parameters: N (int): The number of elements in the array. K (int): The length of subarrays to reverse. A (list): The list of integers. Returns: list: The lexicographically smallest array achievable. if K == 1: return sorted(A) if K >= N: return sorted(A) for i in range(N - K + 1): A_segments = [] for j in range(i, N, K): A_segments.append(A[j:j+K]) A_segments = [sorted(segment) for segment in A_segments] result = [] for segment in A_segments: result.extend(segment) return sorted(result) # Example usage: # N = 4 # K = 2 # A = [3, 2, 1, 4] # print(lexicographically_smallest_array(N, K, A)) # Output: [1, 2, 3, 4]"},{"question":"Nina loves playing with strings. One day, she decided to create a new challenge for herself. She will be given two strings, `pattern` and `source`. Nina needs to find out if the `pattern` can be found in the `source` as a subsequence. A subsequence is a sequence derived by deleting some or none of the characters from the string without changing the order of the remaining characters. Can you help Nina solve this problem? INPUT The first line of input contains the number of test cases T. Each test case contains two strings `pattern` and `source`. OUTPUT For each test case, print \\"YES\\" if `pattern` is a subsequence of `source` and \\"NO\\" otherwise (without quotes). CONSTRAINTS T ≤ 50 1 ≤ length(pattern), length(source) ≤ 1000 SAMPLE INPUT 2 abc ahbgdc axc ahbgdc SAMPLE OUTPUT YES NO","solution":"def is_subsequence(pattern, source): Determines if the pattern is a subsequence of the source. it = iter(source) return all(char in it for char in pattern) def process_test_cases(test_cases): Processes multiple test cases to determine if each pattern is a subsequence of the corresponding source. results = [] for pattern, source in test_cases: if is_subsequence(pattern, source): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant galaxy, there is a society of robots that communicate with each other through sequences of binary values (0s and 1s). For fun, they have a game in which they try to determine the longest sequence of consecutive 1s in a given binary string. Your task is to write a program to solve this problem for them. Input The input is a sequence of datasets. Each dataset represents a binary string, which is a string of \'0\'s and \'1\'s with a length between 1 and 1000, inclusive. The end of the input is indicated by a line containing a single \'0\'. This line should not be processed. Output For each dataset, output the length of the longest sequence of consecutive 1s in the binary string. Example Input 11011001111 100010111 1111100000 0 Output 4 3 5","solution":"def longest_consecutive_ones(binary_strings): Given a list of binary strings, returns the length of the longest sequence of consecutive 1s for each binary string. results = [] for binary_string in binary_strings: if binary_string == \'0\': break max_consecutive_ones = max(map(len, binary_string.split(\'0\'))) results.append(max_consecutive_ones) return results def process_input(input_string): Processes the input string and returns the list of binary strings. return input_string.strip().split(\'n\') def process_output(results): Processes the results and returns the output in the required format. output = \\"n\\".join(map(str, results)) return output def main(input_string): binary_strings = process_input(input_string) results = longest_consecutive_ones(binary_strings) output = process_output(results) return output"},{"question":"Sarah is planning to build a library system, where books can be categorized into genres. She wants to ensure users can easily find all available books for a particular genre. Each book can belong to one or more genres. To implement this functionality efficiently, she needs a function to process user queries about book availability. You need to write a function that processes multiple queries to check if a book belongs to a specified genre. Input: - The first line contains an integer G, the number of genres. - The next G lines each contain: - A genre name. - An integer B, the number of books in that genre. - B space-separated book titles. - The next line contains an integer Q, the number of queries. - The next Q lines each contain: - A book title. - A genre name. Output: - For each query, output \\"YES\\" if the book belongs to the specified genre, otherwise \\"NO\\". Constraints: 1 ≤ G, Q ≤ 50 1 ≤ B ≤ 100 1 ≤ length of any genre name, book title ≤ 100 All book titles and genre names contain only alphanumeric characters and are case-sensitive. Example Input: 3 Fantasy 3 HarryPotter TheHobbit LOTR Science 2 ABriefHistoryOfTime TheSelfishGene History 1 Sapiens 4 HarryPotter Fantasy TheHobbit Science Sapiens History LOTR Fantasy Example Output: YES NO YES YES Explanation: - The first query is about whether \\"HarryPotter\\" is a Fantasy book, which is true. - The second query asks if \\"TheHobbit\\" falls under Science, which is not true. - The third query confirms \\"Sapiens\\" is a History book, which is correct. - The fourth query checks if \\"LOTR\\" is a Fantasy book, which is correct.","solution":"def process_book_queries(G, genres_info, Q, queries): genre_books = {} # Process genres information for info in genres_info: parts = info.split() genre = parts[0] num_books = int(parts[1]) books = set(parts[2:2 + num_books]) genre_books[genre] = books # Process queries results = [] for query in queries: book_title, genre_name = query.split() if genre_name in genre_books and book_title in genre_books[genre_name]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: G = 3 genres_info = [ \\"Fantasy 3 HarryPotter TheHobbit LOTR\\", \\"Science 2 ABriefHistoryOfTime TheSelfishGene\\", \\"History 1 Sapiens\\" ] Q = 4 queries = [ \\"HarryPotter Fantasy\\", \\"TheHobbit Science\\", \\"Sapiens History\\", \\"LOTR Fantasy\\" ] print(process_book_queries(G, genres_info, Q, queries)) # Output: [\\"YES\\", \\"NO\\", \\"YES\\", \\"YES\\"]"},{"question":"You are given an array of integers, where each integer appears exactly three times, except for one integer which appears exactly once. Your task is to find the integer that appears exactly once. -----Input----- The first line contains an integer n (4 le n le 1,000) — the length of the array. It is guaranteed that there is exactly one integer that appears once, and all the other integers appear exactly three times in the array. The next line contains n integers separated by a space — the elements of the array a_i (-10^9 le a_i le 10^9). -----Output----- Print the integer that appears exactly once. -----Examples----- Input 7 2 2 3 2 5 5 5 Output 3 Input 4 8 8 7 8 Output 7 Input 10 10 10 10 6 6 6 8 8 8 5 Output 5 Input 19 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 Output 7 -----Note----- In the first example, the integer 3 appears exactly once, while the integers 2 and 5 appear three times each. In the second example, the integer 7 appears exactly once, while the integer 8 appears three times.","solution":"def find_unique_number(nums): Returns the number that appears exactly once in the list where all other numbers appear exactly thrice. Parameters: nums (list): List of integers Returns: int: The unique number ones, twos = 0, 0 for num in nums: twos |= ones & num ones ^= num common_mask = ~(ones & twos) ones &= common_mask twos &= common_mask return ones"},{"question":"Alyssa is trying to create a mosaic using a grid of tiles. She has an unlimited supply of tiles of different colors. She wants to color a given grid following specific constraints. The grid is an N x M matrix where each cell can be painted in one of K different colors. She wants to paint the grid in such a way that no two adjacent cells (i.e., cells that share a side) have the same color. Additionally, a list of pre-painted cells is provided, and Alyssa must preserve the color of these pre-painted cells. The objective is to assist Alyssa in painting the grid or determine if it\'s impossible to do so given the constraints. -----Input----- - The first line contains three space-separated integers N, M, and K. - The next N lines each contain M integers, representing the initial state of the grid. The cells may contain integers from 0 to K, where 0 represents an unpainted cell and any of 1 through K represents a pre-painted cell with a specific color. -----Output----- - If it\'s possible to paint the grid, output \\"YES\\" followed by the N x M grid with each cell painted according to the rules. - If it\'s impossible, output \\"NO\\". -----Constraints----- - 1 ≤ N, M ≤ 100 - 2 ≤ K ≤ 4 - 0 ≤ Initial grid values ≤ K -----Example----- Input: 3 3 3 1 0 0 0 0 0 0 0 2 Output: YES 1 2 3 3 1 2 2 3 2 -----Explanation----- The grid can be painted in such a way that no two adjacent cells have the same color while preserving the pre-painted cells. The provided output is one possible valid solution.","solution":"def is_valid_color(grid, r, c, color, N, M): # Checking adjacent cells for the same color for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # Up, Down, Left, Right nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == color: return False return True def solve_mosaic(N, M, K, initial_grid): # Copy the initial grid grid = [row[:] for row in initial_grid] def can_paint(): for r in range(N): for c in range(M): if grid[r][c] == 0: # Try to find a valid color for this cell for color in range(1, K + 1): if is_valid_color(grid, r, c, color, N, M): grid[r][c] = color break else: return False return True if can_paint(): return \\"YES\\", grid else: return \\"NO\\", None # Reading input for testing purposes def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) K = int(data[2]) initial_grid = [] start_index = 3 for i in range(N): row = list(map(int, data[start_index + i * M: start_index + (i + 1) * M])) initial_grid.append(row) result, grid = solve_mosaic(N, M, K, initial_grid) if result == \\"YES\\": print(result) for row in grid: print(\' \'.join(map(str, row))) else: print(result) if __name__ == \\"__main__\\": main()"},{"question":"# Task Given an array of integers and a target sum, determine if any two distinct elements in the array add up to the target sum. Return a boolean indicating whether such a pair exists. # Input/Output `[input]` integer array `arr` An array of integers where each element represents a distinct number. `[input]` integer `target` A target sum to check against pairs of integers from the array. `[output]` a boolean Return `true` if there exists two distinct integers in the array that add up to the target sum, otherwise return `false`. # Example For `arr = [1, 2, 3, 4, 5]` and `target = 9`, the output should be `true` (because 4 + 5 = 9). For `arr = [1, 2, 3, 4, 5]` and `target = 10`, the output should be `false` (no two distinct integers add up to 10).","solution":"def has_pair_with_sum(arr, target): Determine if any two distinct elements in the array add up to the target sum. Args: arr (List[int]): List of distinct integers. target (int): The target sum to check. Returns: bool: True if there exists two distinct integers in the array that add up to the target sum, otherwise False. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a function called `sublist_sums(arr, m)`, where `arr` is an array of integers and `m` is a target integer. The function should return `True` if there exists at least one contiguous subarray whose sum equals `m`, otherwise the function should return `False`. A subarray is defined as a non-empty subsequence of an array where the elements appear in the same order as the original array. **Examples:** ```python sublist_sums([1, 2, 3, 4, 5], 9) # returns True, because [2, 3, 4] is a subarray that sums up to 9 sublist_sums([1, 2, 3, 4, 5], 20) # returns False, no subarray sums up to 20 sublist_sums([-1, 4, 2, -3, 5], 3) # returns True, [4, 2, -3] sums up to 3 sublist_sums([5], 5) # returns True, because [5] is a subarray that sums to 5 sublist_sums([], 0) # returns False, no subarray in an empty array ``` **Constraints:** - The array `arr` can contain negative numbers. - The elements in the array range from -10^5 to 10^5. - The length of `arr` can be up to 10^4.","solution":"def sublist_sums(arr, m): Check if there exists at least one contiguous subarray whose sum equals to target integer m. current_sum = 0 sums_set = set() for num in arr: current_sum += num if current_sum == m or (current_sum - m) in sums_set: return True sums_set.add(current_sum) return False"},{"question":"Lord of the Rings fans really enjoy collecting memorabilia from the franchise. One popular item is a set of special edition coins featuring characters and landmarks from the series. Each coin has a rarity level based on its uniqueness and demand among collectors. These rarity levels are labeled as 1, 2, 3, ldots, N, where 1 represents the rarest coin and N the most common. A fan wants to buy one coin of each rarity level from a shop. However, the shop has a peculiar selling policy: a customer can only buy one coin at a time. Unfortunately, the selling price for each coin varies every day based on market trends. To maximize their savings, the fan wants to minimize the total expenditure when buying the whole set of coins by buying them in an optimal order. Given the price of each coin for each rarity level over a span of days, determine the minimum total cost to buy one coin of each rarity level. -----Input:----- - The first line contains two integers D and N — the number of days and the total number of distinct rarity levels respectively. - The next N lines each contain D integers, where the j^{th} integer in the i^{th} line represents the price of the coin with rarity level i + 1 on day j. -----Output:----- Output a single integer — the minimum total cost to buy one coin of each rarity level. -----Constraints----- - 1 leq D, N leq 100 - 1 leq text{price of any coin} leq 10^4 -----Sample Input:----- 3 3 1 100 2 100 1 2 1 2 1 -----Sample Output:----- 3 -----Explanation:----- The optimal way to buy the coins is: 1. Buy the first rarity coin (level 1) on day 1 for 1. 2. Buy the second rarity coin (level 2) on day 2 for 1. 3. Buy the third rarity coin (level 3) on day 1 for 1. Total cost = 1 + 1 + 1 = 3. Hence, the answer is 3.","solution":"def min_total_cost(D, N, prices): from itertools import permutations min_cost = float(\'inf\') # Generate all possible sequences of days day_indices = list(range(D)) for days in permutations(day_indices, N): current_cost = 0 for rar_level, day in enumerate(days, start=1): current_cost += prices[rar_level - 1][day] min_cost = min(min_cost, current_cost) return min_cost"},{"question":"In BinaryLand, there are three towers aligned vertically in a grid. These towers are labeled Tower X, Tower Y, and Tower Z from top to bottom, and their coordinates are represented by (tx1, ty1), (tx2, ty2), and (tx3, ty3) respectively. The towers can only send signals vertically upwards or downwards within a maximum distance of h units. If the distance between the towers exceeds h units, the signals cannot reach from one tower to another. Determine if there exists a pair of towers that cannot communicate directly through vertical signals. Here, assume that the vertical distance between two towers at coordinates (tx, ty) and (ux, uy) is the absolute difference |tx - ux|. -----Constraints----- - tx1, tx2, tx3, ty1, ty2, ty3, and h are integers between 0 and 200 (inclusive). - tx1 < tx2 < tx3 (Towers are arranged in increasing order of their x-coordinates). -----Input----- Input is provided from Standard Input in the following format: tx1 ty1 tx2 ty2 tx3 ty3 h -----Output----- Print :( if there exists a pair of towers that cannot communicate directly, and print Yay! if there is no such pair. -----Sample Input----- 1 2 4 10 6 22 20 -----Sample Output----- Yay! In this case, all towers can communicate directly because: - the distance between Tower X and Tower Y is 4 - 1 = 3 - the distance between Tower X and Tower Z is 6 - 1 = 5 - the distance between Tower Y and Tower Z is 6 - 4 = 2 and none of them is greater than 20. Thus, the correct output is Yay!.","solution":"def can_communicate(tx1, ty1, tx2, ty2, tx3, ty3, h): Determines if there exists a pair of towers that cannot communicate directly. Args: tx1, ty1: The coordinates of Tower X. tx2, ty2: The coordinates of Tower Y. tx3, ty3: The coordinates of Tower Z. h: The maximum distance a signal can travel vertically. Returns: \'Yay!\' if all towers can communicate directly, otherwise \':(\'. dist_XY = tx2 - tx1 dist_XZ = tx3 - tx1 dist_YZ = tx3 - tx2 if dist_XY <= h and dist_XZ <= h and dist_YZ <= h: return \\"Yay!\\" else: return \\":(\\" # Example usage # print(can_communicate(1, 2, 4, 10, 6, 22, 20)) # should return \'Yay!\'"},{"question":"You are given a binary tree where each node contains an integer value. Write a program to transform this binary tree into a binary search tree (BST) while maintaining the original structure of the tree (i.e., the transformed tree should have the same structure as the original tree). # Specifications 1. **Input**: The input consists of several lines, each representing a binary tree. Each line uses space-separated values to represent a level-order traversal of the tree. Each value can either be an integer or `NULL` to indicate the absence of a node. All trees have at least one node. 2. **Output**: For each input tree, output a single line with the in-order traversal of the transformed BST using space-separated values. # Constraints - The number of nodes in the tree will not exceed 1000. - Each value in the binary tree is unique. - Only positive integers are present as node values. # Example Input ``` 4 2 6 1 3 5 7 8 3 10 1 6 NULL 14 NULL NULL 4 7 13 1 2 3 NULL NULL NULL 4 5 NULL 6 7 NULL NULL NULL . ``` Output ``` 1 2 3 4 5 6 7 1 3 4 6 7 8 10 13 14 1 2 3 4 5 6 7 ``` # Explanation For each input tree, the program should: 1. Collect all the node values into a list. 2. Sort the list to obtain the in-order traversal of the BST. 3. Assign the sorted values back to the nodes while keeping the original structure. 4. Output the in-order traversal of the transformed tree. The input ends when a single line containing a `.` is encountered. Note that `NULL` in the input represents non-existing nodes which should be ignored during the transformation. **Sample Tree Transformation:** Given the tree `4 2 6 1 3 5 7`, the transformed BST should still have the same structure but with sorted values: `1 2 3 4 5 6 7`. The in-order traversal of this transformed tree is `1 2 3 4 5 6 7`.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(values): if not values: return None it = iter(values) root = TreeNode(next(it)) queue = [root] while queue: node = queue.pop(0) try: left_val = next(it) if left_val is not None: node.left = TreeNode(left_val) queue.append(node.left) right_val = next(it) if right_val is not None: node.right = TreeNode(right_val) queue.append(node.right) except StopIteration: break return root def inorder_traversal(root, result=None): if result is None: result = [] if root is not None: inorder_traversal(root.left, result) result.append(root.value) inorder_traversal(root.right, result) return result def transform_to_bst(root): values = inorder_traversal(root, []) values.sort() index = [0] def convert_to_bst(node): if node is None: return convert_to_bst(node.left) node.value = values[index[0]] index[0] += 1 convert_to_bst(node.right) convert_to_bst(root) return root def process_trees(tree_lines): results = [] for line in tree_lines: if line == \'.\': break values = [int(x) if x != \'NULL\' else None for x in line.split()] root = build_tree(values) transform_to_bst(root) inorder_result = inorder_traversal(root) results.append(\' \'.join(map(str, inorder_result))) return results"},{"question":"Implement a function `sumOfSubarrayMinimums` that, given an array of integers, returns the sum of the minimum value of every subarray of the given array. Since the result can be large, return the result modulo 10^9 + 7. A subarray is a contiguous part of an array. For example, given the array [3, 1, 2, 4]: - The subarrays are: [3], [3,1], [3,1,2], [3,1,2,4], [1], [1,2], [1,2,4], [2], [2,4], [4] - The minimum values of these subarrays are: 3, 1, 1, 1, 1, 1, 1, 2, 2, 4 - The sum of these minimums is: 3 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 4 = 17 # Function Signature ```python def sumOfSubarrayMinimums(arr: List[int]) -> int: ``` # Examples Example 1: ``` Input: arr = [3, 1, 2, 4] Output: 17 ``` # Constraints - 1 <= arr.length <= 30000 - 1 <= arr[i] <= 30000","solution":"from typing import List def sumOfSubarrayMinimums(arr: List[int]) -> int: MOD = 10**9 + 7 n = len(arr) left = [0] * n right = [0] * n # Initialize monotonic stacks stack = [] # Fill left distances for i in range(n): while stack and arr[stack[-1]] > arr[i]: stack.pop() left[i] = i + 1 if not stack else i - stack[-1] stack.append(i) # Clear stack to reuse stack = [] # Fill right distances for i in range(n-1, -1, -1): while stack and arr[stack[-1]] >= arr[i]: stack.pop() right[i] = n - i if not stack else stack[-1] - i stack.append(i) # Calculate result result = 0 for i in range(n): result = (result + arr[i] * left[i] * right[i]) % MOD return result"},{"question":"Given a string containing a mix of words and numbers, your task is to identify and separate the numbers from the words. You should return two lists: one containing all the words and the other containing all the numbers (as integers). Ensure that words and numbers maintain their original order of appearance in the input string. # Input - A single string `s` consisting of words and numbers separated by spaces. The string will contain only alphanumeric characters. # Output - Two lists: - The first list containing words. - The second list containing numbers, converted to integers. # Example Input: ``` \\"apple 42 banana 7 cherry 38\\" ``` Output: ``` ([\\"apple\\", \\"banana\\", \\"cherry\\"], [42, 7, 38]) ``` # Constraints - The input string will contain at least one word and one number. - The input string will not contain any special characters or punctuation marks, only letters and digits separated by spaces.","solution":"def separate_words_and_numbers(s): Separates words and numbers from the input string s. :param s: A string containing words and numbers separated by spaces. :return: A tuple containing two lists - (list of words, list of numbers) words = [] numbers = [] elements = s.split() for element in elements: if element.isdigit(): numbers.append(int(element)) else: words.append(element) return (words, numbers)"},{"question":"Given an unsorted integer array `nums` and an integer value `k`, determine the `k`th largest element in the array using a sorting algorithm. For example: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 ``` The 2nd largest element is 5. ```python nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 ``` The 4th largest element is 4. Constraints: - You may assume `nums` will always contain `k` distinct elements. - Implement the solution by using a sorting algorithm of your choice. Clarification: - You have to find and return the `k`th largest element in numerical order, not the `k`th distinct element.","solution":"def find_kth_largest(nums, k): Finds the kth largest element in an unsorted array using sorting. Args: nums (list of int): The list of integers. k (int): The position of the largest element to find. Returns: int: The kth largest element in the array. nums.sort(reverse=True) return nums[k - 1]"},{"question":"Given a string s and a dictionary of words dict, find the number of possible ways to break the string into a sequence of one or more dictionary words. Example 1: Input: s = \\"catsanddog\\" dict = {\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"} Output: 2 Explanation: The string can be broken into sequences such as \\"cats and dog\\" and \\"cat sand dog\\". Example 2: Input: s = \\"pineapplepenapple\\" dict = {\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"} Output: 3 Explanation: The string can be broken into sequences such as \\"pine apple pen apple\\", \\"pineapple pen apple\\" and \\"pine applepen apple\\". Your Task: You do not need to read input or print anything. Your task is to complete the function wordBreakCount() which takes a string s and a dictionary dict as parameters and returns the number of ways s can be segmented. Expected Time Complexity: O(n^2 * k) where n is the length of the string and k is the average length of the words in the dict. Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(s) ≤ 1000 1 ≤ len(dict) ≤ 100 All characters in the string and the dictionary are lowercase English letters.","solution":"def wordBreakCount(s, dict): def dfs(index, memo): if index == len(s): return 1 if index in memo: return memo[index] count = 0 for end in range(index + 1, len(s) + 1): if s[index:end] in dict: count += dfs(end, memo) memo[index] = count return count return dfs(0, {})"},{"question":"Given an integer array, determine if it is a mountain array. An array is considered a mountain array if: 1. It contains at least three elements. 2. There exists some i (0 < i < length(array) - 1) such that: - array[0] < array[1] < ... < array[i] - array[i] > array[i + 1] > ... > array[length(array) - 1] Input First line of the input contains the number of test cases T. It is followed by T lines each containing a single test case, consisting of space-separated integers. Output For each test case, print \\"YES\\" if the array is a mountain array, else print \\"NO\\". Constraints 1 ≤ T ≤ 10 3 ≤ length of each array ≤ 100 -10^9 ≤ each element of the array ≤ 10^9 SAMPLE INPUT 3 2 1 4 7 3 2 5 3 5 5 0 3 2 1 SAMPLE OUTPUT NO NO YES","solution":"def is_mountain_array(arr): Returns if the array is a mountain array. n = len(arr) if n < 3: return False i = 0 # walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # peak can\'t be first or last if i == 0 or i == n - 1: return False # walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return i == n - 1 def check_mountain_arrays(test_cases): results = [] for arr in test_cases: if is_mountain_array(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is organizing a treasure hunt game where participants collect treasures placed at various locations in a park. Each location has a certain number of treasures that need to be divided into groups. Each participant can only visit groups of three consecutive locations in a single turn. The participant can collect all treasures from the visited locations in that turn before moving to the next group of locations. Alice wants to know the minimum number of turns required for participants to collect all treasures if they optimally choose their groups of locations. Given the number of locations n and an array representing the number of treasures at each location, your task is to determine the minimum number of turns required to collect all treasures. Input The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of locations. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10 000) — the number of treasures at each location. Output Print one integer — the minimum number of turns required to collect all treasures. Examples Input 5 3 7 2 5 8 Output 2 Input 7 1 1 1 1 1 1 1 Output 3 Note In the first sample, the optimal strategy is to visit locations 1 to 3 in the first turn and locations 4 to 5 in the second turn, thus requiring only 2 turns. In the second sample, the optimal strategy is to visit locations 1 to 3 in the first turn, locations 4 to 6 in the second turn, and location 7 in the third turn, thus requiring 3 turns.","solution":"def min_turns(n, treasures): Returns the minimum number of turns required to collect all treasures at given locations. Each turn one can visit consecutive groups of three locations. return (n + 2) // 3"},{"question":"John is developing software to automate the billing process for a parking lot. There are several parking spaces in the parking lot, and each space is allocated with a unique spot number. Vehicles may be parked or removed from any spot during the day, and John needs to calculate the total amount of money collected by the end of the day based on the parking times of the vehicles. Each vehicle that enters the parking lot has its entry recorded with the spot number and the entry time. Similarly, the exit is recorded with the spot number and the exit time. The parking charge is calculated based on the duration the vehicle stayed in the parking lot, at a rate of 2 per hour. The entry and exit times are given in the \\"HH:MM\\" format (24-hour clock). If a vehicle enters and exits within the same hour, it is charged for that whole hour. Write a program to calculate the total amount collected by the parking lot by the end of the day. # Input The input consists of multiple lines. - The first line contains an integer (N) (1 ≤ (N) ≤ 100), the number of vehicles parked in the parking lot during the day. - The following (N) lines contain records of parking details for each vehicle in the format \\"spot_number entry_time exit_time\\". # Output Print a single integer representing the total amount collected by the parking lot in dollars. # Example Input ``` 3 1 08:00 10:30 2 09:00 12:00 3 14:45 16:15 ``` Output ``` 16 ``` # Explanation For the input above: - Vehicle in spot 1: enters at 08:00 and exits at 10:30 => total parking time = 3 hours => 3 * 2 = 6 - Vehicle in spot 2: enters at 09:00 and exits at 12:00 => total parking time = 3 hours => 3 * 2 = 6 - Vehicle in spot 3: enters at 14:45 and exits at 16:15 => total parking time = 2 hours => 2 * 2 = 4 Total amount collected = 6 + 6 + 4 = 16","solution":"def calculate_total_parking_fee(n, parking_records): total_fee = 0 for record in parking_records: spot_number, entry_time, exit_time = record.split() entry_hour, entry_minute = map(int, entry_time.split(\':\')) exit_hour, exit_minute = map(int, exit_time.split(\':\')) total_entry_minutes = entry_hour * 60 + entry_minute total_exit_minutes = exit_hour * 60 + exit_minute total_duration_minutes = total_exit_minutes - total_entry_minutes total_hours = (total_duration_minutes + 59) // 60 total_fee += total_hours * 2 return total_fee"},{"question":"Given a list of integers, write a function to find two numbers such that they add up to a specific target number. The function `two_sum` should take a list of integers and a target integer, returning the indices of the two numbers. If there are no such elements, the function should return an empty list. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Input - `nums`: A list of integers `List[int]` where 2 <= len(nums) <= 10^3 and -10^9 <= nums[i] <= 10^9. - `target`: An integer `int` where -10^9 <= target <= 10^9. # Output - A list containing the indices of the two numbers that add up to the target as `List[int]`. The order of indices does not matter. - Return an empty list if no such pair exists. # Example ```python nums = [2, 7, 11, 15] target = 9 two_sum(nums, target) # Output: [0, 1] nums = [3, 2, 4] target = 6 two_sum(nums, target) # Output: [1, 2] nums = [3, 3] target = 6 two_sum(nums, target) # Output: [0, 1] nums = [1, 2, 3] target = 7 two_sum(nums, target) # Output: [] ``` # Note - You may assume that each input would have exactly one solution. - You must not use the same element twice.","solution":"def two_sum(nums, target): Finds two indices in the list nums such that their values add up to the target. :param nums: List of integers. :param target: The target integer to achieve by summing two integers from the list. :return: List with two indices. Empty list if no solution is found. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"John is a competitive eater and participates in an annual eating competition. The participants compete by eating as many apples as they can within a set time limit. At the end of the competition, the judges need to determine the total number of apples each participant has eaten. Your task is to help the judges by writing a program that calculates the total number of apples eaten by each participant by summing the apples eaten in each round of the competition. ------ Input Format ------ - The first line contains a single integer T — the number of participants. Then the details for each participant follow. - The first line of each participant\'s input contains a single integer N — the number of rounds. - The second line of each participant\'s input contains N integers, where each integer represents the number of apples eaten in that round. ------ Output Format ------ For each participant, output the total number of apples eaten during all rounds. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{number of apples eaten in each round} ≤ 50 ------ Sample Input 1 ------ 3 4 5 6 3 7 3 8 10 2 5 4 4 4 4 4 ------ Sample Output 1 ------ 21 20 20 ------ Explanation 1 ------ Participant 1: Ate a total of 5 + 6 + 3 + 7 = 21 apples across 4 rounds. Participant 2: Ate a total of 8 + 10 + 2 = 20 apples across 3 rounds. Participant 3: Ate a total of 4 + 4 + 4 + 4 + 4 = 20 apples across 5 rounds.","solution":"def total_apples_eaten(T, participants_data): Calculate the total number of apples eaten by each participant. Parameters: T (int): Number of participants. participants_data (list): List of tuples, where each tuple contains: - An integer N indicating the number of rounds. - A list of N integers representing the number of apples eaten in each round. Returns: list: A list of integers where each integer is the total number of apples eaten by a participant. results = [] for i in range(T): N, apples_each_round = participants_data[i] total_apples = sum(apples_each_round) results.append(total_apples) return results"},{"question":"Siara is working with an array of integers and needs to perform a series of queries on it. Each query requires her to determine the maximum sum of any subarray within a specified range. A subarray is a contiguous part of an array. The sum of a subarray is the sum of its elements. -----Input----- The first line of the input contains a single integer t (1leq t leq 100) — the number of test cases. The description of each test case is as follows. The first line contains two integers n (1 leq n leq 100) and q (1leq q leq 100) — the length of the array and the number of queries. The second line contains the array of n integers a_i (-100 leq a_i leq 100). The i-th of the next q lines contains two integers l_i and r_i (1 leq l_i leq r_i leq n) — the range of the query (1-based indexing). -----Output----- For each test case, output q lines. Each line should contain a single integer — the maximum sum of any subarray within the range [l_i, r_i] in the array. -----Examples----- Input 2 5 2 1 -2 3 -1 2 1 3 2 5 3 1 -1 -1 -1 1 1 Output 3 4 -1","solution":"def max_subarray_sum(arr, l, r): max_sum = float(\'-inf\') current_sum = 0 for i in range(l, r + 1): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) return max_sum def max_sum_queries(t, cases): results = [] for i in range(t): n, q, arr, queries = cases[i] case_result = [] for query in queries: l, r = query l -= 1 # convert to 0-based indexing r -= 1 case_result.append(max_subarray_sum(arr, l, r)) results.append(case_result) return results"},{"question":"Given an array of integers `nums`, you are allowed to choose one set of indices to increment the values by 1. The indices of the elements in the chosen set must satisfy two conditions: 1. The indices must form a contiguous subsequence. 2. The elements corresponding to these indices must all have the same value. Your task is to determine the minimum number of operations required to make all the elements in the array equal. Example 1: Input: nums = [1, 2, 3, 4] Output: 3 Explanation: Choose [4], increment it 3 times to make it [4, 2, 3, 4] Choose [3, 4], increment the subsequence 1 time to make it [4, 3, 4, 4] Choose [2, 3, 4], increment the subsequence 1 time to make it [4, 4, 4, 4] Example 2: Input: nums = [1, 3, 1, 3] Output: 4 Explanation: Increment each 1 individually and increment [3, 3] together. Final array will be [3, 3, 3, 3] Constraints: - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^6","solution":"def min_operations(nums): Returns the minimum number of operations to make all elements in the array equal. from collections import defaultdict freq = defaultdict(int) max_freq = 0 for num in nums: freq[num] += 1 max_freq = max(max_freq, freq[num]) return len(nums) - max_freq"},{"question":"Write a function that takes two parameters - a list of integers and a target integer - and returns a list of unique pairs (an inner list with two elements) from the given list that sum up to the target integer. The pairs in the result list should be sorted in increasing order of their first element, and for pairs that have the same first element, sorted in increasing order of their second element. Each pair should appear only once in the result. ```python find_pairs([1, 2, 3, 4, 5], 5) # [[1, 4], [2, 3]] find_pairs([1, 1, 2, 3, 4, 5], 6) # [[1, 5], [2, 4]] find_pairs([3, 3, 4, 4, -1, -1, 0, 0], 3) # [[-1, 4], [0, 3]] find_pairs([1, 5, 1, 5], 6) # [[1, 5]] find_pairs([10, -2, 3, 7, 6, 1, -6, 5], 4) # [[-2, 6], [-6, 10], [1, 3]] ``` This function should handle lists of varying lengths (including empty lists), and the numbers in the list can be negative, zero, or positive.","solution":"def find_pairs(nums, target): Returns a list of unique pairs from the nums list that sum up to the target integer. Each pair should be sorted in increasing order of their first element, and for pairs that have the same first element, sorted in increasing order of their second element. Each pair should appear only once in the result. nums.sort() seen = set() pairs = set() for i in range(len(nums)): complement = target - nums[i] if complement in seen: pair = tuple(sorted((nums[i], complement))) pairs.add(pair) seen.add(nums[i]) result = sorted(list(pairs)) return result"},{"question":"You are given a list of integers `nums` and an integer `target`. Write a program to return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. For example, given: ```python nums = [2, 7, 11, 15] target = 9 ``` Your function should identify that `nums[0]` + `nums[1]` = `2` + `7` = `9` and return: ```python [0, 1] ``` Additional test case: ```python nums = [3, 2, 4] target = 6 ``` Output: ```python [1, 2] ```","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return None # In case there is no solution, although the prompt guarantees one solution exists."},{"question":"You are organizing a marathon and, unfortunately, the system that tracks runner\'s checkpoints has failed mid-event. As a proficient coder, you decide to write a program that will help in tracking runner\'s progress and determine the order in which they completed the marathon. -----Input----- The first line contains two integers n (1 le n le 100000) and m (1 le m le 200000), representing the number of runners and the number of checkpoint records, respectively. The next n lines contain the names of the participants, each mentioned exactly once. Each name consists of no more than 20 alphanumerical characters. The remaining m lines each contain the name of a participant and a checkpoint number they have reached (1 le checkpoint le 100). -----Output----- Output the names of the runners in the order they completed the marathon, one per line! To complete the marathon, a runner must reach checkpoint number 100. Output “No runner completed!” (including the exclamation mark) if no runner completes the marathon. -----Examples----- Sample Input 1: 3 13 Alice Bob Charlie Alice 10 Bob 20 Charlie 30 Alice 50 Charlie 50 Bob 60 Charlie 80 Alice 70 Alice 90 Charlie 90 Bob 100 Alice 100 Charlie 100 Sample Output 1: Bob Alice Charlie Sample Input 2: 4 8 David Eva Fran George David 20 Eva 40 Fran 60 George 10 Eva 80 George 50 David 100 Fran 90 Sample Output 2: David","solution":"def marathon_results(n, m, runners, records): Determines the order of runners completing a marathon. Args: n (int): The number of runners. m (int): The number of checkpoint records. runners (list): List of runner names. records (list): List of tuples of runner names and checkpoint numbers. Returns: list: List of runner names in the order they completed the marathon. completion_order = [] # Dictionary to track the highest checkpoint each runner has reached checkpoints = {runner: (0, float(\'inf\')) for runner in runners} # (highest_checkpoint, checkpoint_record_index) for index, (runner, checkpoint) in enumerate(records): checkpoint = int(checkpoint) if checkpoint == 100 and checkpoints[runner][0] < 100: # Runner completed the marathon completion_order.append((index, runner)) elif checkpoint > checkpoints[runner][0]: # Update highest checkpoint for the runner checkpoints[runner] = (checkpoint, index) completion_order.sort() # Sort by recording index to maintain the order if not completion_order: return [\\"No runner completed!\\"] return [runner for _, runner in completion_order]"},{"question":"You are given a non-negative integer array A of length N. Define a subarray as a contiguous part of the array. For every 1 ≤ K ≤ N, solve the following problem: - Find the maximum possible sum of a subarray with length exactly K. -----Constraints----- - 1 ≤ N ≤ 10^5 - 0 ≤ A_i ≤ 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print N lines. In the i-th line, print the answer of the problem above for K=i. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 5 9 12 14 15 For K=1, the maximum subarray sum of length 1 is max(1, 2, 3, 4, 5) = 5. For K=2, the maximum subarray sum of length 2 is max(1+2, 2+3, 3+4, 4+5) = 9. For K=3, the maximum subarray sum of length 3 is max(1+2+3, 2+3+4, 3+4+5) = 12. For K=4, the maximum subarray sum of length 4 is max(1+2+3+4, 2+3+4+5) = 14. For K=5, the maximum subarray sum of length 5 is 1+2+3+4+5 = 15.","solution":"def max_subarray_sums(A): Returns the maximum possible sum of a subarray with lengths exactly 1 to len(A). n = len(A) result = [] for k in range(1, n + 1): max_sum = float(\'-inf\') current_sum = sum(A[:k]) max_sum = max(max_sum, current_sum) for i in range(k, n): current_sum += A[i] - A[i - k] max_sum = max(max_sum, current_sum) result.append(max_sum) return result def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) result = max_subarray_sums(A) for sum_value in result: print(sum_value)"},{"question":"You are given a 2D grid of size NxM. Each cell in the grid contains either a 0 or a 1. Your task is to determine the largest rectangular area that can be formed using only cells that contain the value 1. Write a program that reads the dimensions of the grid and its contents, and then calculates the area of the largest rectangle consisting only of 1s. Input Format The first line contains two integers, N (the number of rows) and M (the number of columns). The next N lines each contain M integers (0 or 1), representing the grid. Output Format Output a single integer representing the area of the largest rectangle consisting only of 1s in the grid. Constraints 1 ≤ N, M ≤ 1000 0 ≤ grid[i][j] ≤ 1 Instructions Write efficient code that uses appropriate data structures and algorithms. Document any assumptions or decisions made during the coding process. SAMPLE INPUT 4 4 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 SAMPLE OUTPUT 6","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * m for row in matrix: for j in range(m): heights[j] = heights[j] + 1 if row[j] == 1 else 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [-1] max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack[-1] != -1: h = heights[stack.pop()] w = len(heights) - stack[-1] - 1 max_area = max(max_area, h * w) return max_area"},{"question":"You are given a **set of items** where each item has a particular *weight* and a *value*. You are also given a maximum weight that you can carry. Create a function `knapsack(max_weight, items)` that determines the maximum value of items you can carry without exceeding the maximum weight. # Function Signature ```python def knapsack(max_weight: int, items: List[Tuple[int, int]]) -> int: ``` # Inputs - `max_weight` - An integer representing the maximum weight capacity of the knapsack. - `items` - A list of tuples where each tuple consists of two integers: the *value* and *weight* of each item `(value, weight)`. # Output - Return an integer representing the maximum value that you can carry given the weight constraints. # Constraints - You cannot break an item, you must take the *entire* item or none at all. - `max_weight` will be a positive integer <= 10,000. - The length of `items` will not exceed 100. - The `value` and `weight` of each item will be positive integers <= 1,000. # Example ```python max_weight = 50 items = [(60, 10), (100, 20), (120, 30)] # The function should return 220 because by taking the items with weight 20 and weight 30, # we achieve a total value of 100 + 120 = 220, without exceeding the maximum weight limit of 50. output = knapsack(max_weight, items) print(output) # 220 ``` # Note Use dynamic programming to solve this problem efficiently. Consider using a 2D array to store the maximum values at different weights while iterating over items.","solution":"from typing import List, Tuple def knapsack(max_weight: int, items: List[Tuple[int, int]]) -> int: Determines the maximum value of items that can be carried without exceeding the max_weight. Parameters: - max_weight: int: The maximum weight capacity of the knapsack. - items: List[Tuple[int, int]]: A list of tuples where each tuple consists of two integers: (value, weight). Returns: - int: The maximum value that can be carried without exceeding the weight constraints. n = len(items) dp = [[0] * (max_weight + 1) for _ in range(n + 1)] for i in range(1, n + 1): value, weight = items[i-1] for w in range(max_weight + 1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight]"},{"question":"You are given a list consisting of integers representing the price of apple stocks on different days. Find the maximum profit that can be made by buying one stock on one day and selling it on a future day. If no profit can be made, return 0. -----Constraints----- - The length of the list (number of days) will be between 1 and 10^5. - Each stock price will be between 1 and 10^5. -----Input----- The input is given from Standard Input in the following format: n prices where n is the number of days and prices is a list of integers representing the stock prices on each day. -----Output----- Print the maximum profit that can be achieved. If no profit can be made, print 0. -----Sample Input----- 6 [7, 1, 5, 3, 6, 4] -----Sample Output----- 5 Explanation: - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. - Not 7-1 = 6, as selling price needs to be after the buying price. Another Example: -----Sample Input----- 5 [7, 6, 4, 3, 1] -----Sample Output----- 0 Explanation: In this case, no transaction is done, and the max profit = 0.","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be made by buying on one day and selling on a future day. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Alex is organizing a coding marathon with n participating students. Each student is identified by an ID from 1 to n. Alex wants to determine the optimal way to pair students into teams such that the difference in their programming skills within each team is minimized. To achieve this, Alex has decided that each team must consist of exactly two students. Given the programming skill levels of each student, help Alex find the optimal pairing of students into teams such that the maximum difference in skill levels within any team is minimized. If there are an odd number of students, one student will remain unpaired. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of students. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the programming skill of each student. -----Output----- Print a single integer — the minimized maximum difference in skill levels within any team. If there is only one student, output should be 0. -----Example----- Input 5 12 3 17 8 5 Output 2 -----Note----- In the example, the possible pairings and their differences in skill levels are: - Pair (3, 5): Difference = 2 - Pair (8, 12): Difference = 4 - One student (17) will remain unpaired The optimal pairing minimizes the maximum difference within any team to be 2.","solution":"def minimize_max_difference(n, skills): This function returns the minimized maximum difference in skill levels within any team. if n == 1: return 0 skills.sort() min_max_diff = float(\'inf\') for i in range(1, n): min_max_diff = min(min_max_diff, skills[i] - skills[i-1]) return min_max_diff"},{"question":"B: Binary Tree Path Sum problem Given a binary tree, you need to determine if the tree has a root-to-leaf path such that adding up all the values along the path equals a given sum. A root-to-leaf path is defined as a sequence of nodes starting from the root node and ending at any leaf node. The sum of a path is the sum of the node values on that path. Write a function that takes the root of a binary tree and an integer sum as inputs and returns a boolean indicating whether such a path exists. Input format 1. The first line contains an integer sum, the target sum. 2. The following lines describe the binary tree in level-order traversal, where null signifies the absence of a node. Each line contains an integer or the word \\"null\\". Constraint * The number of nodes in the tree is in the range [1, 2000]. * -1000 <= Node.val <= 1000 * -1000 <= sum <= 1000 Output format Return `true` if there is a root-to-leaf path such that the sum of the nodes equals the given sum, otherwise return `false`. Input example 1 5 5 4 8 11 null 13 4 7 2 null null null null 1 Output example 1 true Input example 2 22 5 4 8 11 null 13 4 7 2 null null null null 1 Output example 2 true Explanation: Example 1 describes the following tree: 5 / 4 8 / / 11 13 4 / 7 2 1 There is a root-to-leaf path 5 -> 4 -> 11 -> 2 which sums to 22. Example 2 describes the same tree and illustrates that the path sum exists, so the result is `true`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def has_path_sum(root, sum): if not root: return False if not root.left and not root.right: return root.val == sum sum -= root.val return has_path_sum(root.left, sum) or has_path_sum(root.right, sum)"},{"question":"Task You need to implement a function, `comparison`, that compares two strings and returns a certain value based on their lexicographical order. # Function Specifications: - `comparison(str1, str2)` returns: - `1` if `str1` comes lexicographically after `str2`. - `-1` if `str1` comes lexicographically before `str2`. - `0` if `str1` is identical to `str2`. **Note**: The comparison should be case-insensitive. # Input - Not all inputs will be identical in casing, so be sure to handle case insensitivity. - There will always be 2 strings provided. Examples - `comparison(\\"apple\\", \\"banana\\")` should return `-1` - `comparison(\\"banana\\", \\"apple\\")` should return `1` - `comparison(\\"orange\\", \\"Orange\\")` should return `0` - `comparison(\\"Grape\\", \\"grape\\")` should return `0`","solution":"def comparison(str1, str2): Compares two strings lexicographically in a case-insensitive manner. Returns: - 1 if str1 comes after str2 - -1 if str1 comes before str2 - 0 if str1 is identical to str2 str1_lower = str1.lower() str2_lower = str2.lower() if str1_lower > str2_lower: return 1 elif str1_lower < str2_lower: return -1 else: return 0"},{"question":"Palindromic Substrings A palindromic substring is a sequence of characters within a string that reads the same forward and backward. Your task is to count how many palindromic substrings exist in a given string. A substring is defined as a contiguous sequence of characters within a string. A palindromic substring is a substring which is a palindrome. # Task Given a string, return the total number of distinct palindromic substrings. # Examples ``` \\"abc\\" => 3 # \\"a\\", \\"b\\", \\"c\\" \\"aaa\\" => 6 # \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" \\"ababa\\" => 9 # \\"a\\", \\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\" ``` # Constraints - The input string consists only of lowercase English letters (\'a\' to \'z\'). - The length of the given string will not exceed 1000.","solution":"def count_palindromic_substrings(s): Returns the total number of distinct palindromic substrings in the given string. n = len(s) count = 0 # Helper function to expand around the center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 # Visit each character and try to expand around the center for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return count"},{"question":"In a game, there are N players standing in a line. Each player has a strength value, and we need to handle Q events. An event can be one of the following 2 types: 1. 1 L R: Calculate and output the total strength of all players from position L to position R (inclusive). 2. 2 P V: Update the strength of the player at position P to the value V. Input format: The first line contains two integers N and Q. The second line contains N integers denoting the strength values of the players. Output format: For each event of type 1, print the result. Constraints: 1 ≤ N, Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ P ≤ N 1 ≤ strength value, V ≤ 10^5 NOTE: Players are 1-indexed. SAMPLE INPUT 5 3 3 8 6 4 7 1 2 4 2 3 10 1 2 4 SAMPLE OUTPUT 18 22","solution":"class Game: def __init__(self, strengths): self.strengths = strengths self.prefix_sums = self._compute_prefix_sums(strengths) def _compute_prefix_sums(self, strengths): prefix_sums = [0] * (len(strengths) + 1) for i in range(1, len(strengths) + 1): prefix_sums[i] = prefix_sums[i-1] + strengths[i-1] return prefix_sums def query_sum(self, l, r): # l and r are 1-indexed return self.prefix_sums[r] - self.prefix_sums[l-1] def update_strength(self, p, v): # p is 1-indexed diff = v - self.strengths[p-1] self.strengths[p-1] = v for i in range(p, len(self.strengths) + 1): self.prefix_sums[i] += diff def handle_events(strengths, events): game = Game(strengths) results = [] for event in events: if event[0] == 1: _, L, R = event result = game.query_sum(L, R) results.append(result) elif event[0] == 2: _, P, V = event game.update_strength(P, V) return results # Example usage: # strengths = [3, 8, 6, 4, 7] # events = [(1, 2, 4), (2, 3, 10), (1, 2, 4)] # print(handle_events(strengths, events)) # Output: [18, 22]"},{"question":"Write a function/method that takes a string consisting of alphabetical characters and spaces, and returns the longest word in the string. If there are multiple words of the same length, return the word that appears first in the string. # Input - The input is a single string `s` which contains words separated by spaces. - The length of `s` is at most 1000 characters. # Output - The function/method should return a string which is the longest word in the input string. # Example - For the input `\\"The quick brown fox jumped over the lazy dog\\"`, the output should be `\\"jumped\\"`. - For the input `\\"Python programming is fun\\"`, the output should be `\\"programming\\"`. - For the input `\\"Hello world\\"`, the output should be `\\"Hello\\"`. # Constraints - Assume the input string will have at least one word. - Words are separated by exactly one space.","solution":"def longest_word(s): Returns the longest word in the given string. If there are multiple words of the same length, returns the first one. words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"You are given two non-empty arrays of integers, `arr1` and `arr2`, where both arrays are of the same length. The arrays contain elements sorted in non-decreasing order. Your task is to merge these two arrays into a single sorted array. Complete the function `mergeSortedArrays` that takes in two parameters: - `int[] arr1`: the first sorted array - `int[] arr2`: the second sorted array The function should return an array of integers containing all the elements from `arr1` and `arr2` combined in non-decreasing order. Example: arr1 = [1, 3, 5] arr2 = [2, 4, 6] The merged sorted array should be [1, 2, 3, 4, 5, 6]. Function Description: Complete the function `mergeSortedArrays` in the editor below. mergeSortedArrays has the following parameter(s): - `int[] arr1`: the first sorted array - `int[] arr2`: the second sorted array Return - `int[]`: the merged sorted array Input Format: - The first line contains an integer n, the length of both arrays. - The second line contains n space-separated integers representing the elements of arr1. - The third line contains n space-separated integers representing the elements of arr2. Constraints: - 1 <= n <= 10^3 - -10^3 <= arr1[i], arr2[i] <= 10^3 - arr1 and arr2 are sorted in non-decreasing order Sample Input 0: 3 1 3 5 2 4 6 Sample Output 0: 1 2 3 4 5 6 Sample Input 1: 4 -7 -3 0 5 -6 -2 1 3 Sample Output 1: -7 -6 -3 -2 0 1 3 5 Explanation: In Sample Input 0, we take `arr1 = [1, 3, 5]` and `arr2 = [2, 4, 6]` and merge them into a sorted array [1, 2, 3, 4, 5, 6]. In Sample Input 1, we take `arr1 = [-7, -3, 0, 5]` and `arr2 = [-6, -2, 1, 3]` and merge them into a sorted array [-7, -6, -3, -2, 0, 1, 3, 5].","solution":"def mergeSortedArrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: The merged sorted array. i, j = 0, 0 merged_array = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Add remaining elements from arr1 if there are any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Add remaining elements from arr2 if there are any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a non-negative integer array representing the amount of water stored in each bar of a histogram. The width of each bar is the same and is 1 unit. Calculate the maximum amount of water that can be trapped within the histogram after raining. A bar\'s water level is trapped up to the height of the shortest bar to its left and right. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The histogram represented by the array height has gaps that can trap water between the bars. The maximum amount of water that can be trapped here is 6 units. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The histogram represented by the array height has gaps that can trap water between the bars. The maximum amount of water that can be trapped here is 9 units. Your Task: You don\'t need to read input or print anything. Your task is to complete the function trap() which takes an integer array height as input parameter and returns the total amount of water that can be trapped. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ height.length ≤ 2 * 10^4 0 ≤ height[i] ≤ 10^5","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a function that takes three integer inputs, `a`, `b`, and `c`, and returns the median of the three values. The median is the middle value when the integers are sorted in ascending order. Example 1: Input: a = 3, b = 1, c = 2 Output: 2 Explanation: When sorted in ascending order, the values are [1, 2, 3]. The middle value is 2. Example 2: Input: a = 9, b = 7, c = 8 Output: 8 Explanation: When sorted in ascending order, the values are [7, 8, 9]. The middle value is 8. Your Task: Complete the function `findMedian` which takes three integer parameters `a`, `b`, and `c` and returns the median of the three values. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -100000 <= a, b, c <= 100000","solution":"def findMedian(a, b, c): Returns the median of three integers a, b, and c. nums = [a, b, c] nums.sort() return nums[1] # The middle value after sorting"},{"question":"You are organizing a bike race for the upcoming city sports event. The race track is a straight road divided into segments, and each segment has an associated difficulty level. The difficulty levels are stored in an array where the i-th element represents the difficulty of the i-th segment. You want to assist contestants in planning their race strategies by allowing them to query the total difficulty of any subsegment of the race track. You will precompute some information about the track to answer these queries efficiently. -----Input----- The first line of the input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^4) - the number of segments in the race track and the number of queries, respectively. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^4) - the difficulty levels of the segments. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) - the indices of the segment range for which the total difficulty is to be calculated. -----Output----- For each query, print a single integer: the total difficulty of all segments from l to r inclusive. -----Example----- Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15","solution":"def precompute_difficulties(difficulties): Precomputes the prefix sums for the given difficulties array. Args: difficulties (list): The list of difficulties for each segment. Returns: list: The prefix sums array. n = len(difficulties) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + difficulties[i - 1] return prefix_sums def total_difficulty(prefix_sums, l, r): Computes the total difficulty for a given range using the prefix sums array. Args: prefix_sums (list): The prefix sums array. l (int): The starting index of the range (1-based). r (int): The ending index of the range (1-based). Returns: int: The total difficulty of the range from l to r inclusive. return prefix_sums[r] - prefix_sums[l - 1] def main(n, q, difficulties, queries): Manages the interaction for calculating total difficulties for given queries. Args: n (int): The number of segments. q (int): The number of queries. difficulties (list): The list of difficulties for each segment. queries (list): A list of tuples containing the start and end indices for each query. Returns: list: The list of results for each query. prefix_sums = precompute_difficulties(difficulties) results = [] for l, r in queries: results.append(total_difficulty(prefix_sums, l, r)) return results"},{"question":"A company is organizing a coding contest with various levels. Each level has a certain number of problems and each problem has a certain point value. The company wants to ensure that in each level, the total points of the level is maximized without exceeding a specified maximum limit L. Given the point values of the problems in a level and the maximum point limit L, determine the maximum possible sum of points that can be achieved in that level without exceeding the limit. -----Input:----- - First line contains T, the number of test cases. Then T test cases follow. - Each test case starts with an integer N (number of problems in the level), followed by N integers indicating the point values of the problems. The last integer in the test case is L, the maximum point limit. -----Output:----- For each test case, print a single integer, the maximum sum of points that can be achieved in that level without exceeding the limit L. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq text{Point values of problems} leq 1000 - 1 leq L leq 10000 -----Sample Input 1:----- 1 5 200 500 300 700 800 1500 -----Sample Output 1:----- 1500","solution":"def max_points_without_exceeding(points, limit): Returns the maximum sum of points that can be achieved without exceeding the limit. Uses the knapsack approach to solve the problem. n = len(points) dp = [0] * (limit + 1) for point in points: for v in range(limit, point - 1, -1): dp[v] = max(dp[v], dp[v - point] + point) return dp[limit] def solve_contest_levels(test_cases): Given multiple test cases, return the results for each test case in the form of a list. Each result is the maximum sum of points that can be achieved without exceeding the given limit. results = [] for case in test_cases: N = case[0] points = case[1:N+1] limit = case[-1] results.append(max_points_without_exceeding(points, limit)) return results"},{"question":"“You are given an integer array of length N and M queries. Each query can be one of two types: Either updating a range of the array to a specific value or finding the sum of the elements in a given subarray after all updates.” -----Input----- The first line contains two integers N and M (1 leq N, M leq 100000). The second line contains N integers, the initial elements of the array. The next M lines contain queries in one of the following two forms: - “1 l r x”—set every element from index l to index r to x (1 leq l leq r leq N, 1 leq x leq 10^9) - “2 l r”—find the sum of elements from index l to index r (1 leq l leq r leq N) -----Output----- For each query of the second type, print the sum of the given subarray in a new line. -----Examples----- Sample Input: 5 4 1 2 3 4 5 2 1 3 1 2 4 10 2 1 3 1 1 5 5 2 1 5 Sample Output: 6 21 25","solution":"class ArrayManipulation: def __init__(self, array): self.array = array self.n = len(array) def update_range(self, l, r, x): for i in range(l-1, r): self.array[i] = x def sum_range(self, l, r): return sum(self.array[l-1:r]) def process_queries(n, m, array, queries): am = ArrayManipulation(array) results = [] for query in queries: if query[0] == 1: _, l, r, x = query am.update_range(l, r, x) elif query[0] == 2: _, l, r = query results.append(am.sum_range(l, r)) return results # Example usage: # n = 5 # m = 4 # array = [1, 2, 3, 4, 5] # queries = [ # (2, 1, 3), # (1, 2, 4, 10), # (2, 1, 3), # (1, 1, 5, 5), # (2, 1, 5) # ] # print(process_queries(n, m, array, queries)) # Output should be: [6, 21, 25]"},{"question":"A round of a card game is about to begin. Each round consists of multiple turns, during which each player draws a card from a deck and plays it immediately. The deck contains n cards, where each card has a type represented by an integer from 1 to k. It\'s assured that there is at least one card of each type in the deck. Players play cards in such a way that they want to complete sets of cards such that each type of card appears at least once in the set. Once a set is completed, those cards are removed from the game. Your task is to determine the maximum number of complete sets that can be formed from the given deck. -----Input----- The first line contains two integers n (the number of cards) and k (the number of different types of cards) (1 le k le 100, k le n le 10^5). The second line contains n integers c_1, c_2, dots, c_n representing the type of each card in the deck (1 le c_i le k). -----Output----- Print a single integer - the maximum number of complete sets of cards that can be formed. -----Examples----- Input 9 3 1 2 3 1 2 3 3 2 1 Output 3 Input 7 3 1 2 3 1 2 1 3 Output 2 -----Note----- In the first example, there are 3 cards of each type, so 3 complete sets can be formed. In the second example, we can only form 2 complete sets because we have more sets of card type 1 than we can pair with card types 2 and 3.","solution":"def max_complete_sets(n, k, cards): Returns the maximum number of complete sets that can be formed from the given deck. Parameters: n (int): The number of cards. k (int): The number of different types of cards. cards (list of int): List of integers representing the type of each card in the deck. Returns: int: The maximum number of complete sets. # Count the occurrences of each card type card_count = [0] * k for card in cards: card_count[card - 1] += 1 # decrement 1 for zero-based index # The number of complete sets is limited by the card type with the minimum count return min(card_count) # Example usage: # n = 9 # k = 3 # cards = [1, 2, 3, 1, 2, 3, 3, 2, 1] # print(max_complete_sets(n, k, cards)) # Output: 3"},{"question":"You are working on a file management system, and you need to keep track of the disk usage by different users. Each user has a certain number of files with specified sizes. You need to determine which user is consuming the most disk space. # Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of users. - Then follow n data blocks that describe each user\'s files. Each block is presented in the following form: first goes a line that contains integers fi and userid (0 ≤ fi ≤ 1000) — the number of files the i-th user has and the id of the i-th user. The userid is a non-empty sequence of uppercase and lowercase Latin letters and digits, containing no more than 20 characters. - Next fi lines contain integers representing the size of each file (1 ≤ filesize ≤ 1000). # Output: In the first line print the phrase \\"The user consuming the most disk space: \\". Then print the userid of the user who has the maximum total file size. If there are multiple users with the same maximum total file size, print their ids separated by comma and a space. The output should always end with a period. # Examples: Input: ``` 3 5 user123 100 300 200 50 150 4 Alice 400 100 200 300 3 Bob 500 400 300 ``` Output: ``` The user consuming the most disk space: Bob. ``` Input: ``` 2 3 Dan 750 250 500 4 Eve 300 300 300 250 ``` Output: ``` The user consuming the most disk space: Dan. ``` Input: ``` 4 3 UserA 100 100 100 3 UserB 100 100 100 3 UserC 200 200 200 3 UserD 200 200 200 ``` Output: ``` The user consuming the most disk space: UserC, UserD. ``` Note: In the first example, the user \\"Bob\\" has the maximum total file size of 1200. In the second example, the user \\"Dan\\" has the maximum total file size of 1500. In the third example, both \\"UserC\\" and \\"UserD\\" have the same maximum total file size of 600, so both are listed. Make sure to maintain consistency in terms of input-output format and focus on calculating the total file sizes correctly to determine the user(s) with the highest consumption.","solution":"def user_with_max_disk_space(n, user_data): Determines the user(s) consuming the most disk space. Parameters: n (int): The number of users. user_data (list of tuples): Each tuple contains the user\'s file information: (userid, list of file sizes) Returns: str: The user(s) consuming the most disk space. max_space = 0 users = {} for userid, files in user_data: total_size = sum(files) if total_size > max_space: max_space = total_size users = {userid} elif total_size == max_space: users.add(userid) sorted_users = sorted(users) return f\\"The user consuming the most disk space: {\', \'.join(sorted_users)}.\\" def parse_input(input_string): Parses the input string into usable variables for user_with_max_disk_space. Parameters: input_string (str): The raw input string Returns: (int, list of tuples): Number of users and list of (userid, file sizes) lines = input_string.strip().split(\'n\') n = int(lines[0].strip()) index = 1 user_data = [] for _ in range(n): fi, userid = lines[index].split() fi = int(fi) index += 1 files = [] for _ in range(fi): files.append(int(lines[index].strip())) index += 1 user_data.append((userid, files)) return n, user_data"},{"question":"You are tasked with developing a Customer Satisfaction algorithm for a shopping website. The website collects ratings from customers after each purchase. The ratings are represented as integers on a scale from 1 to 5, with 1 being the lowest and 5 being the highest. Based on these ratings, you need to determine whether the customers are satisfied or not. A customer is considered satisfied if all provided ratings are greater than or equal to 3. Write a function that takes a list of lists, where each inner list represents the ratings given by a single customer. The function should return a list of boolean values, where each boolean value indicates whether the corresponding customer is satisfied. Input The first line of the input gives the number of customers, N. The next N lines each contain a series of integers separated by spaces that represent the ratings given by one customer. Output Output N lines, each containing \\"Customer #x: y\\", where x is the customer number (starting from 1) and y is \\"Satisfied\\" if the customer is satisfied, and \\"Not Satisfied\\" otherwise. Constraints 1 ≤ N ≤ 100. 1 ≤ number of ratings per customer ≤ 100. 1 ≤ rating ≤ 5. SAMPLE INPUT 3 5 3 4 3 2 1 5 3 4 4 4 4 SAMPLE OUTPUT Customer #1: Satisfied Customer #2: Not Satisfied Customer #3: Satisfied Explanation In the above sample: - Customer #1 gave ratings [5, 3, 4, 3] which are all greater than or equal to 3. Therefore, customer 1 is satisfied. - Customer #2 gave ratings [2, 1, 5, 3] and since ratings 2 and 1 are less than 3, customer 2 is not satisfied. - Customer #3 gave ratings [4, 4, 4, 4], all of which are greater than or equal to 3, so customer 3 is satisfied.","solution":"def determine_satisfaction(ratings_list): This function takes a list of lists where each inner list represents the ratings given by a single customer. It returns a list of boolean values indicating whether each customer is satisfied. result = [] for ratings in ratings_list: if all(rating >= 3 for rating in ratings): result.append(True) else: result.append(False) return result def format_satisfaction_result(ratings_list): This function takes a list of lists where each inner list represents the ratings given by a single customer. It returns formatted lines stating whether each customer is satisfied or not. satisfaction_list = determine_satisfaction(ratings_list) output = [] for i, satisfied in enumerate(satisfaction_list): status = \\"Satisfied\\" if satisfied else \\"Not Satisfied\\" output.append(f\\"Customer #{i + 1}: {status}\\") return output"},{"question":"You are given a list of integers representing the sequence of daily temperatures for a certain period. Your task is to determine for each day how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the answer for that day should be zero. ------ Input Format ------ - The first line of input will contain a single integer n, the length of the temperature sequence. - The second line will contain n space-separated integers representing the daily temperatures. ------ Output Format ------ For each day in the sequence, print a single integer indicating the number of days until a warmer temperature. The output should be space-separated integers on a new line. ------ Constraints ------ 1 ≤ n ≤ 100,000 -100 ≤ text{Temperature} ≤ 100 ------ Sample Input 1 ------ 8 73 74 75 71 69 72 76 73 ------ Sample Output 1 ------ 1 1 4 2 1 1 0 0 ------ Explanation ------ - For day 1 (temperature 73), you need to wait 1 day for the temperature of 74. - For day 2 (temperature 74), you need to wait 1 day for the temperature of 75. - For day 3 (temperature 75), you need to wait 4 days for the temperature of 76. - For day 4 (temperature 71), you need to wait 2 days for the temperature of 72. - For day 5 (temperature 69), you need to wait 1 day for the temperature of 72. - For day 6 (temperature 72), you need to wait 1 day for the temperature of 76. - For days 7 and 8, there are no more days with a warmer temperature, so the answer is 0.","solution":"def daily_temperatures(temperatures): For each day, calculates how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the answer for that day is zero. n = len(temperatures) answer = [0] * n stack = [] # This will store indices of the temperatures list. for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() answer[index] = i - index stack.append(i) return answer"},{"question":"You are tasked with designing a function to manage event scheduling in a calendar system. The system should prevent overlapping events by only allowing new events that do not conflict with existing ones. Each event is represented by a start and end time. Develop a function `add_event` that takes a list of existing events and a proposed new event as inputs, and returns `True` if the new event can be added without causing any overlaps, otherwise returns `False`. An event is represented by a tuple (start, end), where \'start\' and \'end\' are integers representing hours on a 24-hour clock (0 through 23). A valid event should satisfy `0 <= start < end <= 23`. For example, if the list of existing events is [(1, 3), (4, 6), (8, 10)] and the new proposed event is (5, 7), the function should return `False` since (5, 7) overlaps with (4, 6). However, if the new proposed event is (6, 8), the function should return `True` since it does not overlap with any existing events. Function Signature: ```python def add_event(existing_events: List[Tuple[int, int]], new_event: Tuple[int, int]) -> bool: ``` **Input** - `existing_events`: A list of tuples where each tuple (start, end) represents the start and end times of an event. - `new_event`: A tuple that represents the proposed new event\'s start and end times. **Output** - The function should return `True` if the new event can be added without any conflict, otherwise `False`. **Examples** Input ``` python existing_events = [(1, 3), (4, 6), (8, 10)] new_event = (5, 7) ``` Output ``` python False ``` Input ``` python existing_events = [(1, 3), (4, 6), (8, 10)] new_event = (6, 8) ``` Output ``` python True ``` Note: Consider edge cases where the new event starts exactly when another event ends, or ends exactly when another event starts, in which case they do not overlap. Ensure the function handles various scenarios efficiently.","solution":"from typing import List, Tuple def add_event(existing_events: List[Tuple[int, int]], new_event: Tuple[int, int]) -> bool: Checks if a new event can be added to the calendar without overlapping existing events. Args: existing_events: List of tuples representing existing events\' start and end times. new_event: A tuple representing the new event\'s start and end times. Returns: bool: True if the new event can be added without conflict, else False. new_start, new_end = new_event if not (0 <= new_start < new_end <= 23): return False for event in existing_events: start, end = event if not (new_end <= start or new_start >= end): return False return True"},{"question":"There is a large terrain represented as a 2D grid of size N x M. Each cell in the grid contains either 0 or 1, where 0 represents an empty cell and 1 represents an obstacle. You are given a starting position (Sx, Sy) and a destination position (Dx, Dy) on the grid. Your task is to determine the minimum number of steps required to move from the starting position to the destination position, moving only to adjacent cells (up, down, left, right) and avoiding obstacles. If it is not possible to reach the destination, return -1. ------ Input section ------ The first line contains an integer T, the number of test cases. Each test case consists of several lines: - The first line contains two integers N and M, denoting the number of rows and columns in the grid. - The next N lines each contain M integers (either 0 or 1), representing the rows of the grid. - The next line contains two integers Sx and Sy, denoting the starting position. - The next line contains two integers Dx and Dy, denoting the destination position. ------ Output section ------ For each test case, output the minimum number of steps required to reach the destination from the starting position. If it is not possible to reach the destination, output -1. ------ Input constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ Sx, Sy, Dx, Dy < N, M The starting and destination positions will always be empty cells (contain 0). ----- Sample Input ----- 2 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 4 4 3 3 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 3 3 ----- Sample Output ----- 8 6 ----- Explanation ----- In the first test case, the shortest path from (0, 0) to (4, 4) navigates around the obstacles, requiring 8 steps. In the second test case, the shortest path from (0, 0) to (3, 3) is direct, requiring 6 steps.","solution":"from collections import deque def min_steps(grid, sx, sy, dx, dy): if sx == dx and sy == dy: return 0 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) # (x, y, step_count) visited = [[False] * m for _ in range(n)] visited[sx][sy] = True while queue: x, y, steps = queue.popleft() for dxn, dyn in directions: nx, ny = x + dxn, y + dyn if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: if nx == dx and ny == dy: return steps + 1 queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1 def terrain_navigation(test_cases): results = [] for case in test_cases: N, M, grid, (Sx, Sy), (Dx, Dy) = case result = min_steps(grid, Sx, Sy, Dx, Dy) results.append(result) return results"},{"question":"Daisy loves wandering through the forest, collecting various leaves to document their unique shapes. Each leaf she collects can be represented as a simple polygon on a 2D plane, where no two edges intersect except at their endpoints. Daisy wants to check if there are any overlapping leaves in her collection. If two leaves overlap, she will carefully re-categorize them. The polygons are considered overlapping if their interiors have any common point. Given the vertices of polygons in Daisy’s collection, determine whether any two leaves overlap. -----Input----- The first line of the input contains an integer n, (1 le n le 10000), the number of leaves Daisy collected. For each leaf, the first line contains an integer k, (3 le k le 50), the number of vertices in the polygon representing the leaf. The next k lines contain two integers each, x_i and y_i, (|x_i|, |y_i| le 10000), the coordinates of the vertices. -----Output----- Print ‘’yes’’ if there are any overlapping leaves, or ‘’no’’ if all leaves are non-overlapping. -----Examples----- Sample Input 1: 2 4 0 0 2 0 2 2 0 2 3 1 1 3 1 2 3 Sample Output 1: yes Sample Input 2: 2 4 0 0 4 0 4 4 0 4 4 1 1 3 1 3 3 1 3 Sample Output 2: no","solution":"import matplotlib.path as mplPath import numpy as np def check_polygons_overlap(n, polygons): # Helper function to detect if two polygons overlap def polygons_overlap(polygon1, polygon2): poly1_path = mplPath.Path(np.array(polygon1)) poly2_path = mplPath.Path(np.array(polygon2)) for point in polygon2: if poly1_path.contains_point(point): return True for point in polygon1: if poly2_path.contains_point(point): return True return False # Iterate through all pairs of polygons and check for overlap for i in range(n): for j in range(i + 1, n): if polygons_overlap(polygons[i], polygons[j]): return \\"yes\\" return \\"no\\" def parse_input(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 polygons = [] for _ in range(n): k = int(data[index]) index += 1 polygon = [] for _ in range(k): x, y = int(data[index]), int(data[index+1]) index += 2 polygon.append((x, y)) polygons.append(polygon) return n, polygons if __name__ == \\"__main__\\": n, polygons = parse_input() print(check_polygons_overlap(n, polygons))"},{"question":"You are given a sequence of n distinct integers. Your task is to determine the length of the longest subsequence such that all its elements are strictly increasing and the difference between consecutive elements is the same. This difference should be as small as possible among all possible longest subsequences. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the sequence. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_{i} ≤ 100 000) — the elements of the sequence. -----Output----- Print the length of the longest subsequence where the difference between consecutive elements is the same. -----Examples----- Input 6 1 5 3 9 7 11 Output 3 Input 5 10 30 40 5 15 Output 2","solution":"def longest_common_difference_subsequence(n, sequence): Returns the length of the longest subsequence where the difference between consecutive elements is the same and as small as possible. if n == 1: return 1 longest_length = 1 for i in range(n): for j in range(i + 1, n): diff = sequence[j] - sequence[i] current_length = 2 last_value = sequence[j] for k in range(j + 1, n): if sequence[k] - last_value == diff: current_length += 1 last_value = sequence[k] longest_length = max(longest_length, current_length) return longest_length"},{"question":"You are working for a software company that manages a database of employees. Each employee has a unique id, name, and salary. You are tasked with writing a function that will receive a list of employee information and return sorted lists of employee names based on salaries. If two employees have the same salary, their names should be sorted lexicographically. Your task is to write a function that accepts a list of dictionaries representing employees. Each dictionary contains three keys: \\"id\\", \\"name\\", and \\"salary\\". The function should return a list of employee names sorted primarily by ascending salary and secondarily by lexicographic order if salaries are the same. Function signature: ```python def sort_employees_by_salary(employees: List[Dict[str, Union[int, str]]]) -> List[str]: pass ``` # Input: - A list of dictionaries where each dictionary contains: - \\"id\\": an integer representing the employee\'s unique identifier. - \\"name\\": a string representing the employee\'s name (1 ≤ len(name) ≤ 100). - \\"salary\\": an integer representing the employee\'s salary (1 ≤ salary ≤ 10^6). # Output: - A list of strings representing the employee names sorted by salary and lexicographically if salaries are identical. # Example: Example 1: Input: ``` [{\\"id\\": 1, \\"name\\": \\"Alice\\", \\"salary\\": 70000}, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"salary\\": 50000}, {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"salary\\": 50000}] ``` Output: ``` [\'Bob\', \'Charlie\', \'Alice\'] ``` Example 2: Input: ``` [{\\"id\\": 4, \\"name\\": \\"Diana\\", \\"salary\\": 80000}, {\\"id\\": 5, \\"name\\": \\"Eva\\", \\"salary\\": 90000}, {\\"id\\": 6, \\"name\\": \\"Frank\\", \\"salary\\": 60000}] ``` Output: ``` [\'Frank\', \'Diana\', \'Eva\'] ``` # Constraints: - The list of employees will have at most `1000` entries. - Each employee will have a unique id, but names and salaries can repeat among different employees.","solution":"from typing import List, Dict, Union def sort_employees_by_salary(employees: List[Dict[str, Union[int, str]]]) -> List[str]: Sorts the employee list first by salary in ascending order, then by name lexicographically in case of ties in salary. Parameters: employees (List[Dict[str, Union[int, str]]]): A list of dictionaries containing employee information Returns: List[str]: A list of employee names sorted by the mentioned criteria. # Sorting the employees by \'salary\' first and by \'name\' for tiebreakers sorted_employees = sorted(employees, key=lambda x: (x[\\"salary\\"], x[\\"name\\"])) # Extracting the names in sorted order sorted_names = [employee[\\"name\\"] for employee in sorted_employees] return sorted_names"},{"question":"Ramesh is planning a hiking trip and needs to pack his supplies appropriately. He has a list of items with their respective weights and values. However, his backpack can only hold a certain amount of weight. To maximize the value of the supplies he carries, Ramesh needs to select a subset of the items to pack. Your task is to help Ramesh determine the maximum total value of supplies he can carry in his backpack without exceeding the weight limit. -----Input----- The first line of input contains two integers n (1 le n le 15) — the number of items and W (1 le W le 1000) — the capacity of the backpack. The next n lines each contain two integers wi and vi (1 le wi le 1000, 1 le vi le 1000) — the weight and value of the i-th item. -----Output----- Print a single integer — the maximum total value of supplies that Ramesh can carry without exceeding the weight limit of his backpack. -----Examples----- Input 4 7 3 4 4 5 2 3 3 2 Output 9 Input 3 5 1 2 2 4 3 1 Output 6 Input 5 10 2 1 4 8 2 4 5 5 3 6 Output 18 -----Note----- In the first test, selecting the second and third items gives a total weight of 6 and total value of 9. In the second test, selecting the first and second items gives a total weight of 3 and total value of 6. In the third test, selecting the second, third, and fifth items gives a total weight of 9 and total value of 18.","solution":"def knapsack(n, W, items): Determines the maximum total value of supplies that Ramesh can carry without exceeding the weight limit. :param n: Number of items :param W: Capacity of the backpack :param items: List of tuples, where each tuple contains two integers (weight, value) of an item :return: Maximum total value of supplies that can be carried # Initialize a DP table with zero values dp = [[0] * (W + 1) for _ in range(n + 1)] # Iterate through each item for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + vi) else: dp[i][w] = dp[i-1][w] return dp[n][W]"},{"question":"You are given two simple polygons defined by their vertices in the plane. Write a program to calculate the area of the intersection of the two polygons. # Input The input consists of several datasets. Each dataset starts with the number of vertices, n1, of the first polygon, followed by the coordinates (x1, y1), (x2, y2), ... (xn1, y1), in order. The next line has the number of vertices, n2, of the second polygon, followed by the coordinates (x1, y1), (x2, y2), ... (xn2, y2). There are no self-intersecting polygons in the dataset. The end of the input is indicated by a line with a zero. # Output For each dataset, output a single line containing the area of the intersection of the two polygons. The output should not contain an error greater than 0.0001. # Constraints - 3 ≤ n1, n2 ≤ 50 - -1000 ≤ xi, yi ≤ 1000 # Example Input ``` 4 0 0 4 0 4 4 0 4 4 2 2 6 2 6 6 2 6 0 ``` Output ``` 4.0000 ``` In this example, the intersection of the two polygons is a square with an area of 4.","solution":"def polygon_area(polygon): Calculate the area of a simple polygon given its vertices. n = len(polygon) area = 0 for i in range(n): x1, y1 = polygon[i] x2, y2 = polygon[(i + 1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2 def inside(p, cp1, cp2): Check if point p is inside the edge formed by cp1 and cp2. return (cp2[0] - cp1[0]) * (p[1] - cp1[1]) > (cp2[1] - cp1[1]) * (p[0] - cp1[0]) def intersection(cp1, cp2, s, e): Calculate the intersection point of the line segment cp1-cp2 with s-e. dc = (cp1[0] - cp2[0], cp1[1] - cp2[1]) dp = (s[0] - e[0], s[1] - e[1]) n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0] n2 = s[0] * e[1] - s[1] * e[0] n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0]) return [(n1 * dp[0] - n2 * dc[0]) * n3, (n1 * dp[1] - n2 * dc[1]) * n3] def clip_polygon(subject_polygon, clip_polygon): Clip the subject polygon with the clip polygon using the Sutherland-Hodgman algorithm. def _clip(subject_polygon, cp1, cp2): clipped_polygon = [] for i in range(len(subject_polygon)): current_point = subject_polygon[i] previous_point = subject_polygon[i - 1] if inside(current_point, cp1, cp2): if not inside(previous_point, cp1, cp2): clipped_polygon.append(intersection(cp1, cp2, previous_point, current_point)) clipped_polygon.append(current_point) elif inside(previous_point, cp1, cp2): clipped_polygon.append(intersection(cp1, cp2, previous_point, current_point)) return clipped_polygon output_list = subject_polygon[:] cp1 = clip_polygon[-1] for cp2 in clip_polygon: output_list = _clip(output_list, cp1, cp2) cp1 = cp2 return output_list def intersection_area(polygon1, polygon2): clipped_polygon = clip_polygon(polygon1, polygon2) if clipped_polygon: return polygon_area(clipped_polygon) return 0 def parse_input(input_str): input_lines = input_str.strip().split(\'n\') polygons = [] i = 0 while i < len(input_lines): n1 = int(input_lines[i]) if n1 == 0: break i += 1 p1 = [tuple(map(int, input_lines[j].split())) for j in range(i, i + n1)] i += n1 n2 = int(input_lines[i]) i += 1 p2 = [tuple(map(int, input_lines[j].split())) for j in range(i, i + n2)] i += n2 polygons.append((p1, p2)) return polygons def solve(input_str): polygons = parse_input(input_str) results = [] for polygon1, polygon2 in polygons: results.append(f\\"{intersection_area(polygon1, polygon2):.4f}\\") return \'n\'.join(results) # Example usage: input_str = 4 0 0 4 0 4 4 0 4 4 2 2 6 2 6 6 2 6 0 output = solve(input_str) print(output) # Output should be \\"4.0000\\""},{"question":"The X company organizes team-building activities regularly. One popular activity is a relay race, where employees are arranged in a straight line, and each participant has to pass a baton to the next person in line. The race coordinator wants to count the sequences of batons passed during several rounds. To make the activity more interesting, the coordinator decides the batons passed should follow specific rules: - Each participant must pass the baton only once per round. - The batons can only be passed to adjacent participants. Given these rules, the coordinator wants to determine the number of valid baton passing sequences for each round. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of participants. The next line contains an integer r (1 ≤ r ≤ 100), the number of rounds. Each of the next r lines contains two integers si and ei (1 ≤ si, ei ≤ n), representing the starting and ending positions of the baton for the i-th round. Output Print r lines. For each round, output the number of valid baton passing sequences from the starting position si to the ending position ei. Examples Input 5 3 1 5 2 4 1 3 Output 1 2 2 Input 6 2 1 6 3 5 Output 1 1 Explanation In the first example: - For the first round (1 to 5), there is only one valid sequence: 1 -> 2 -> 3 -> 4 -> 5. - For the second round (2 to 4), there are two valid sequences: 2 -> 3 -> 4 or 2 -> 1 -> 2 -> 3 -> 4. - For the third round (1 to 3), there are two valid sequences: 1 -> 2 -> 3 or 1 -> 2 -> 3 (since participant 1 can only pass to participant 2, the first and third round have identical sequences in this specific case). In the second example: - For both rounds (1 to 6 and 3 to 5), there is only one valid sequence from the starting to ending position as participants are aligned in a way that there can be only one straight pass.","solution":"def baton_passing_sequences(n, rounds): For each round, calculate the number of valid baton passing sequences given the number of participants and the starting and ending positions for each round. import math def num_valid_sequences(s, e): if s == e: return 1 elif abs(s - e) == 1: return 1 else: return math.comb(abs(e - s) - 1, abs(s - e) - 1) results = [] for s, e in rounds: results.append(num_valid_sequences(s, e)) return results"},{"question":"Fruit Distribution You have been given a basket containing F different kinds of fruits, and B baskets. Each type of fruit is evenly distributed among all the baskets. Your task is to determine how many fruits of each type are in one basket. input Input is given from standard input in the following format: F B output Output the number of fruits of each type in one basket in one line. Insert a line break at the end. Constraint * 1 leq F leq 10 * 1 leq B leq 10 * All inputs are integers. Input example 1 4 2 Output example 1 2 Input example 2 6 3 Output example 2 2 Input example 3 5 5 Output example 3 1","solution":"def fruits_per_basket(F, B): Returns the number of fruits of each type in one basket. Parameters: F (int): The number of different kinds of fruits. B (int): The number of baskets. Returns: int: Number of fruits of each type in one basket. return F // B"},{"question":"You are given a list of integers representing elevations of a hiking trail at several points along a path. Your task is to determine the highest peak, which is the maximum elevation reached on the path. A peak is defined as a point that is higher than both its immediate left and immediate right points. The first and last points in the list cannot be peaks. If there are no peaks, return -1. Write a function that takes this list of integers and returns the highest peak\'s elevation. If no peaks exist, return -1. # Input The input is a single line containing integers separated by spaces, representing the elevations of the hiking trail. # Output Output the highest peak\'s elevation, or -1 if no peaks exist. # Constraints - The list of elevations will have at least 2 elements and at most 100 elements. - Each elevation is a non-negative integer not greater than 10,000. # Examples Example 1: Input: ``` 1 2 3 4 3 2 1 ``` Output: ``` 4 ``` Explanation: The highest peak is at elevation 4. Example 2: Input: ``` 5 1 2 3 1 ``` Output: ``` 3 ``` Explanation: The highest peak is at elevation 3. Example 3: Input: ``` 2 2 2 2 ``` Output: ``` -1 ``` Explanation: There are no peaks in the list. Example 4: Input: ``` 5 4 3 2 1 ``` Output: ``` -1 ``` Explanation: There are no peaks in the list.","solution":"def highest_peak(elevations): Returns the highest peak in the list of elevations. Parameters: elevations (list of int): A list of integers representing the elevations of the hiking trail. Returns: int: The highest peak elevation or -1 if no peaks exist. if len(elevations) < 3: return -1 peak = -1 for i in range(1, len(elevations) - 1): if elevations[i] > elevations[i - 1] and elevations[i] > elevations[i + 1]: peak = max(peak, elevations[i]) return peak"},{"question":"You are given a list of students with their daily routines represented as strings consisting of \'S\' (study) and \'R\' (rest). For example, \\"SSRSS\\" means the student studies for 2 days, rests for 1 day, and then studies for 2 days. At the end of each month, the Headmaster wants to reward the students who have the longest consecutive study days. Your task is to compute the maximum number of consecutive study days for each student. Input The first line includes a single integer n (1 ≤ n ≤ 100) — the number of students. Each of the next n lines contains a string consisting of characters \'S\' and \'R\' only, representing the daily routine of each student. The length of each string does not exceed 30. Output Output n lines. Each line should contain an integer representing the maximum number of consecutive study days for each student in the same order as the input. Example Input 3 SSRSSSSRS RRSSSRSSS SSSR Output 4 3 3 Explanation: - For the first student, the longest consecutive study period is 4 days (\\"SSSS\\"). - For the second student, the longest consecutive study period is 3 days (\\"SSS\\"). - For the third student, the longest consecutive study period is also 3 days (\\"SSS\\").","solution":"def longest_study_streak(n, routines): Calculates the longest consecutive study streak for each student. Parameters: n (int): Number of students. routines (list): List of strings representing each student\'s daily routine. Returns: list: A list of integers where each integer is the longest consecutive study streak for the corresponding student. results = [] for routine in routines: max_streak = 0 current_streak = 0 for day in routine: if day == \'S\': current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 results.append(max_streak) return results"},{"question":"Before a big race, the city decides to conduct a \\"Race Number Challenge.\\" Each participant has their race number printed on a digital LED display. The city uses a custom numeral system with base 5 for the race. Each race number can have up to `d` digits. The challenge is to find the maximum possible number of participants such that no two participants have race numbers that appear similar when displayed on a faulty LED display. A faulty LED display is one that merges the digits `1` and `4` (i.e., either 1 or 4 will look the same on the faulty display). Your task is to calculate how many distinct race numbers, when converted to base 5 and accounting for faulty display merging of digits 1 and 4, can be generated with up to `d` digits. # Input The input consists of a single integer `d` (1 ≤ d ≤ 18) representing the number of digits in the race number. # Output Print one integer — the number of distinct race numbers that can appear on the faulty LED display. # Example Input 3 Output 42 Note For `d = 1`, the possible distinct race numbers considering the faulty LED display are: 0, 2, 3. For `d = 2`, some examples include: 00, 02, 20, 22, 33.","solution":"def distinct_race_numbers(d): Returns the number of distinct race numbers in base 5 considering faulty LED display up to d digits. :param d: Maximum digits in the race number :return: Distinct race numbers return 4 ** d"},{"question":"Palindrome Check Arthur needs to prepare a set of unique palindromes for the magic show. A palindrome is a string that reads the same forward and backward. Given multiple strings, Arthur wants to filter out only the unique palindromes from the list to create his magical set. Your task is to write a program that takes a list of strings as input and outputs all the unique palindromes. Input The program first reads an integer N, the number of strings. The next N lines contain one string each. Output The program should output the unique palindromes, each on a new line, in the order they appear in the input. Example Input: 5 madam racecar apple madam rotor Output: madam racecar rotor","solution":"def unique_palindromes(strings): Filters out unique palindromes from a list of strings. seen = set() unique_palindromes = [] for string in strings: if string not in seen: if string == string[::-1]: # Check if the string is a palindrome seen.add(string) unique_palindromes.append(string) return unique_palindromes"},{"question":"You are given N integers A₁, A₂, ..., Aₙ. Rearrange these integers in an array B such that specified differences are minimized. Specifically, for an array B where B₁, B₂, ..., Bₙ is a permutation of A₁, A₂, ..., Aₙ, the goal is to make the value of max(|B₁ - B₂|, |B₂ - B₃|, ..., |Bₙ - B₁|) as small as possible. ------ Input Format ------ - The first line of the input contains a single integer T, the number of test cases. The description of the test cases follows. - The first line of each test case contains a single integer N — the number of integers. - The second line of each test case contains N space-separated integers A₁, A₂, ..., Aₙ. ------ Output Format ------ For each test case, output N integers B₁, B₂, ..., Bₙ — the permutation of A₁, A₂, ..., Aₙ for which the value of max(|B₁ - B₂|, |B₂ - B₃|, ..., |Bₙ - B₁|) is minimized. If there are multiple such permutations, you can output any of them. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 3 ≤ N ≤ 10^{5} 0 ≤ Aᵢ ≤ 10^{9} - The sum of N over all test cases doesn\'t exceed 2⋅10^{5}. ------ Sample Input 1 ------ 3 5 10 13 11 12 14 4 7 4 1 9 6 5 3 2 4 6 1 ------ Sample Output 1 ------ 10 11 12 13 14 4 7 1 9 1 2 4 3 5 6 ------ Explanation ------ Test case 1: For B = [10, 11, 12, 13, 14], the value of max(|B₁ - B₂|, |B₂ - B₃|, ..., |Bₙ - B₁|) is 1. It can be shown that this is the smallest possible value. Other permutations also achieve this value, for example, [14, 13, 12, 11, 10], and any such permutation is a valid output. Test case 2: For B = [4, 7, 1, 9], the value of max(|B₁ - B₂|, |B₂ - B₃|, ..., |Bₙ - B₁|) is 3. It can be shown that this is the smallest possible. Test case 3: For B = [1, 2, 4, 3, 5, 6], the value of max(|B₁ - B₂|, |B₂ - B₃|, ..., |Bₙ - B₁|) is 1. It can be shown that this is the smallest possible.","solution":"def minimize_max_diff(N, A): Rearranges the list A of N integers such that the maximum of absolute differences between consecutive elements (considering the cyclic nature) is minimized. :param N: Integer, number of elements in A :param A: List of integers :return: List of integers arranged with minimized max difference A.sort() # Sort the array B = [] # Create the new list B by interleaving small and large values from sorted array # Start from the largest and smallest, and go inside for i in range(N // 2): B.append(A[i]) B.append(A[N - 1 - i]) # If N is odd, append the middle element to the end if N % 2 == 1: B.append(A[N // 2]) return B def process_test_cases(T, test_cases): Process multiple test cases and apply the minimize_max_diff function :param T: Number of test cases :param test_cases: List of tuples where each tuple contains (N, A) :return: List of results for each test case results = [] for i in range(T): N, A = test_cases[i] result = minimize_max_diff(N, A) results.append(result) return results"},{"question":"Your task is to create a function `findShortestWord` that takes a string of words as input and returns the length of the shortest word(s). The words in the input string are separated by single spaces. # Examples ```python findShortestWord(\\"The quick brown fox jumps over the lazy dog\\") returns 3 findShortestWord(\\"A journey of a thousand miles begins with a single step\\") returns 1 findShortestWord(\\"Hello world\\") returns 5 findShortestWord(\\"Code every day\\") returns 4 ``` # Notes - You may assume that the input string will always contain at least one word. - The function should be case-insensitive.","solution":"def findShortestWord(s: str) -> int: Returns the length of the shortest word in the input string. :param s: A string containing words separated by single spaces. :return: The length of the shortest word(s) in the string. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You are tasked with building a futuristic communication network between multiple cities, ensuring each city is able to connect with any other city directly or through a series of intermediate cities. The government has decided the following strategy to accomplish this: Each city will be equipped with exactly one communication hub, and each hub can establish a direct link with any other city\'s hub. However, to minimize costs, you should only establish the minimum number of connections required to ensure every city can communicate with every other city. Given a design plan, determine the minimum number of direct links required to achieve this network for a set of cities. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains an integer C, the number of cities in the given test case. ------ Output ------ For each test case, print in a single line the minimum number of direct links required. ------ Constraints ------ 1 ≤ T ≤ 100000 2 ≤ C ≤ 10^{18} ----- Sample Input 1 ------ 2 2 4 ----- Sample Output 1 ------ 1 3 ----- Explanation 1 ------ Example case 1: To connect two cities, only one direct link is necessary. Example case 2: To connect four cities in a network where all cities can communicate directly or indirectly, a minimum of three links is required (connecting them in a chain or star configuration).","solution":"def minimum_links_for_communication(T, cities): Given the number of test cases and the number of cities in each test case, return a list containing the minimum number of direct links required for each test case. results = [C - 1 for C in cities] return results"},{"question":"You have been hired to create an attendance tracking system for a small company. The company wants to track the monthly attendance of its employees. Each employee can either be \'Present\', \'Absent\', or \'On Leave\' on any given day. Your task is to create a function that takes a list of strings representing the attendance status of an employee for each day of a month and returns a summary dictionary. The dictionary should contain the total count of \'Present\', \'Absent\', and \'On Leave\' days for the employee. Notes: * The list will always contain exactly 30 strings, each string being either \'Present\', \'Absent\', or \'On Leave\'. * The resultant dictionary should have exactly 3 keys: \'Present\', \'Absent\', and \'On Leave\'. Examples ``` attendance_summary([\'Present\', \'Absent\', \'On Leave\', \'Present\', \'Present\', \'Absent\', \'Present\', \'On Leave\', \'Present\', \'Absent\', \'Present\', \'Present\', \'On Leave\', \'Present\', \'Present\', \'Present\', \'Absent\', \'Present\', \'On Leave\', \'Present\', \'Present\', \'Present\', \'Absent\', \'Present\', \'Present\', \'On Leave\', \'Present\', \'Present\', \'Present\', \'Absent\']) # returns {\'Present\': 19, \'Absent\': 6, \'On Leave\': 5} attendance_summary([\'Absent\'] * 30) # returns {\'Present\': 0, \'Absent\': 30, \'On Leave\': 0} attendance_summary([\'Present\'] * 20 + [\'On Leave\'] * 5 + [\'Absent\'] * 5) # returns {\'Present\': 20, \'Absent\': 5, \'On Leave\': 5} ```","solution":"def attendance_summary(attendance_list): Returns a summary dictionary containing the count of \'Present\', \'Absent\', and \'On Leave\' days for an employee. summary = { \'Present\': 0, \'Absent\': 0, \'On Leave\': 0 } for status in attendance_list: if status in summary: summary[status] += 1 return summary"},{"question":"You are given n types of plants for sale in a nursery, and each plant has two integer characteristics — pi and gi, where pi is the price of the i-th type of plant, and gi is the growth rate of the i-th type of plant. Assume that an unlimited number of plants of each type is available for sale. There will be m customers visiting the nursery. Each customer will come with an amount ai to spend on plants, and they all follow the same purchasing strategy. Customers aim to maximize the growth rate of the plants they buy and, among plants with the same growth rate, they prefer the cheaper ones. Customers can buy only one plant of each type. Determine the maximum number of plants each customer will be able to buy given their budget and the plants available. Input The first line contains the positive integer n (1 ≤ n ≤ 2·105) — the number of plant types. Each of the following n lines contains two integers pi and gi (1 ≤ pi, gi ≤ 109) — the price and the growth rate of the i-th type of plant. The next line contains the positive integer m (1 ≤ m ≤ 2·105) — the number of the customers. The final line contains m positive integers a1, a2, ..., am (1 ≤ ai ≤ 109), where the i-th number is equal to the amount of money the i-th customer has to spend. Output The first line should contain the sequence of m integers, where the i-th number represents the number of plants the i-th customer will be able to buy. Examples Input 4 5 10 3 10 2 7 4 9 3 12 15 8 Output 3 4 2 Input 2 100 200 50 180 4 60 100 150 200 Output 1 1 2 2 Note In the first example, the first customer will buy plants of the 2nd, 4th, and 3rd types (with money left unspent after purchasing the 3rd type, there is no other plant to buy). The second customer will buy all four types. The third customer will buy plants of the 2nd and 4th types. In the second example, the customers will buy plants as follows: the first customer can only afford the 2nd type; the second customer can only afford the 2nd type; the third customer can afford both types, and similarly, the fourth customer can also afford both types.","solution":"def maximize_plants(n, plants, m, budgets): # Order plants primarily by growth rate descending, secondarily by price ascending plants.sort(key=lambda x: (-x[1], x[0])) result = [] for budget in budgets: count = 0 remaining_budget = budget for price, growth in plants: if remaining_budget >= price: remaining_budget -= price count += 1 result.append(count) return result # Example test case print(maximize_plants(4, [(5, 10), (3, 10), (2, 7), (4, 9)], 3, [12, 15, 8])) # Expected output: [3, 4, 2] print(maximize_plants(2, [(100, 200), (50, 180)], 4, [60, 100, 150, 200])) # Expected output: [1, 1, 2, 2]"},{"question":"Chef is arranging a catering event and needs to assign waiters to various time slots such that no two waiters overlap in their duty periods. There are M time slots with start and end times and Chef wants to assign waiters in such a way that the total number of time slots assigned is maximized, while ensuring that no two assigned time slots overlap. Chef has the option to either assign the given set of time slots directly or delete any number of time slots before making the assignments. Chef needs your help to determine the maximum number of non-overlapping time slots that can be achieved after potentially deleting some time slots. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer M. M lines follow. For each i (1 ≤ i ≤ M), the i-th of these lines contains two space-separated integers s_{i} and e_{i} representing the start and end time of the time slot. ------ Output ------ For each test case, print a single line containing one integer ― the maximum number of non-overlapping time slots that can be achieved after deleting some time slots. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ M ≤ 10^{5} 1 ≤ s_{i} < e_{i} ≤ 10^{9} for each valid i ------ Subtasks ------ Subtask #1 (10 points): M = 10 Subtask #2 (15 points): M = 1,000 Subtask #3 (15 points): e_{i} ≤ 10^{6} for each valid i Subtask #4 (60 points): original constraints ----- Sample Input 1 ------ 2 3 1 3 2 5 4 6 4 1 2 3 4 0 6 5 7 ----- Sample Output 1 ------ 2 3 ----- explanation 1 ------ Example case 1: The maximum number of non-overlapping time slots can be achieved by selecting [1, 3] and [4, 6]. Example case 2: The maximum number of non-overlapping time slots can be achieved by selecting [1, 2], [3, 4], and [5, 7].","solution":"def max_non_overlapping_time_slots(T, test_cases): results = [] for i in range(T): M, time_slots = test_cases[i] time_slots.sort(key=lambda x: x[1]) # sort by end time count = 0 last_end_time = 0 for start, end in time_slots: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Given a list of integers, rotate the list to the right by k steps, where k is non-negative. Example 1: Input: [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Example 2: Input: [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Note: Try to come up with as many solutions as you can; there are at least three different ways to solve this problem.","solution":"def rotate(nums, k): Rotates the list nums to the right by k steps. n = len(nums) k = k % n # To handle cases where k is greater than the length of the list # Reverse the whole list nums.reverse() # Reverse first k elements nums[:k] = reversed(nums[:k]) # Reverse the rest of the list nums[k:] = reversed(nums[k:]) return nums"},{"question":"You are given a list of operations in the form \\"X operation Y = Z\\", where X, Y, and Z are non-negative integers, and operation is one of \'+\', \'-\', \'*\', or \'/\'. However, the numbers and the operations are encoded in a custom base system using the symbols \'0\'-\'9\' and \'a\'-\'z\' representing values from 0 to 35. Each encoded number has a base specified with it in a separate array. Your task is to determine how many of the given operations are correct in the respective bases. ------ Input ------ The first line of input consists of an integer N - the number of operations. Then, N lines follow, each containing a statement of the form \\"X operation Y = Z\\" (without any spaces). The next N lines contain integers specifying the base for each corresponding statement. ------ Output ------ Output an integer representing the number of correct operations. ------ Constraints ------ - 1 ≤ N ≤ 10^5 - 2 ≤ base ≤ 36 - The encoded numbers length ≤ 8 and they do not have leading zeros - Division results are only considered correct if they divide evenly (i.e., there should be no remainder) ------ Sample Input 1 ------ 3 2+3=5 10-2=8 1*2=2 10 10 3 ------ Sample Output 1 ------ 1","solution":"def decode_number(encoded_number, base): Decodes the encoded number from the specified base to base 10. return int(encoded_number, base) def evaluate_operation(x, operator, y): Evaluates the expression x operator y. if operator == \'+\': return x + y elif operator == \'-\': return x - y elif operator == \'*\': return x * y elif operator == \'/\': return x // y if y != 0 and x % y == 0 else None else: raise ValueError(f\\"Unknown operator: {operator}\\") def is_operation_correct(statement, base): Checks if the given operation statement is correct in the given base. x, operator, y, _, z = parse_statement(statement) decoded_x = decode_number(x, base) decoded_y = decode_number(y, base) decoded_z = decode_number(z, base) result = evaluate_operation(decoded_x, operator, decoded_y) return result == decoded_z def parse_statement(statement): Parses the statement into its components (x, operator, y, z). Statement format is assumed to be \\"X operation Y = Z\\". for op in \\"+-*/\\": if op in statement: x, rest = statement.split(op) y, z = rest.split(\'=\') return x, op, y, \'=\', z return None def count_correct_operations(operations, bases): Counts how many of the given operations are correct in their respective bases. correct_count = 0 for statement, base in zip(operations, bases): if is_operation_correct(statement, base): correct_count += 1 return correct_count"},{"question":"Alice has come across an ancient alchemical formula written in a secretive language that is composed of unique sequences of symbols. The language follows a unique rule: two distinct sequences of symbols can only differ in at most one symbol. Now, Alice needs your help to determine if two sequences are considered \\"nearly identical\\" according to the ancient rule. # Input The input consists of multiple test cases. The first line of each test case contains two strings, sequence1 and sequence2, separated by a space. The length of each string is between 1 and 100, inclusive, and both strings have the same length. The input is terminated by a line containing the word \\"END\\". # Output For each test case, output \\"YES\\" if the sequences are nearly identical, otherwise output \\"NO\\". # Examples Input ``` abcd abxd hello hellx xyz zzz END ``` Output ``` YES YES NO ``` # Note The sequences \\"abcd\\" and \\"abxd\\" differ by exactly one symbol (\'c\' and \'x\'), so they are considered nearly identical. Similarly, \\"hello\\" and \\"hellx\\" differ by exactly one symbol (\'o\' and \'x\'), thus they are also nearly identical. However, \\"xyz\\" and \\"zzz\\" differ by more than one symbol, so they are not nearly identical.","solution":"def nearly_identical_sequences(input_data): def is_nearly_identical(seq1, seq2): difference = sum(1 for a, b in zip(seq1, seq2) if a != b) return difference <= 1 result = [] for line in input_data: if line == \\"END\\": break sequence1, sequence2 = line.split() if is_nearly_identical(sequence1, sequence2): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Alice is collecting rare stamps and wants to display them in a special exhibition. Each stamp has a unique rarity level, represented by a positive integer. Alice has n stamps and needs to arrange them in a single straight line based on their rarity levels. However, she wants to place them in a specific pattern that alternates high and low rarity levels for better visual appeal. Specifically, she wants the arrangement such that every two consecutive stamps have the following property: the rarity of one is strictly greater than the other. -----Input----- The first line of input contains a single integer 1 leq n leq 200,000, the number of stamps Alice has. The second line contains n integers 1 leq r_i leq 10^9, representing the rarity levels of the stamps. -----Output----- Output a single line containing n integers, the rarity levels of the stamps arranged in the required pattern. If there are multiple valid arrangements, output any one of them. If it\'s not possible to arrange the stamps in the required pattern, output \\"impossible\\". -----Examples----- Sample Input: 5 1 3 2 5 4 Sample Output: 1 3 2 5 4 Sample Input: 3 5 1 3 Sample Output: 1 5 3 Sample Input: 4 2 1 3 4 Sample Output: 1 2 3 4","solution":"def arrange_stamps(n, rarities): Arrange stamps in the required high-low pattern. Parameters: n (int): Number of stamps. rarities (list of int): List of rarity levels of the stamps. Returns: list of int: Rarity levels arranged in the required pattern or \\"impossible\\". if n <= 1: return rarities # Sort the rarities to easily pick min-max as we go rarities.sort() # We\'ll use two pointers to pick min-max alternately low = 0 high = n - 1 arranged = [] while low <= high: if low == high: arranged.append(rarities[low]) else: arranged.append(rarities[low]) arranged.append(rarities[high]) low += 1 high -= 1 # Check if the arrangement is valid by having alternating high-low pattern for i in range(1, n): if (i % 2 == 1 and arranged[i] <= arranged[i - 1]) or (i % 2 == 0 and arranged[i] >= arranged[i - 1]): return \\"impossible\\" return arranged"},{"question":"You are working as an analyst in a social media company. Your boss asked you to create a program that can identify trending topics. A trending topic is defined based on the frequency of hashtags used in posts. Specifically, a hashtag is considered trending if it appears more than or equal to `threshold` times in the given list of posts. Write a function `find_trending_hashtags(posts: List[str], threshold: int) -> List[str]` that analyzes posts to find all trending topics based on the given threshold. - The input consists of a list of strings `posts`, where each string is a social media post containing hashtags. - Each hashtag starts with the `#` character, followed by alphanumeric characters (both lower and upper case) (e.g., `#sports`, `#News123`). - A hashtag is considered valid if it starts with `#` and is followed by at least one alphanumeric character. The function should return a list of unique hashtags that appear at least `threshold` times, sorted in lexicographical order. # Constraints - `1 <= len(posts) <= 10^4` - `1 <= len(posts[i]) <= 280` for each post in posts - `1 <= threshold <= 500` # Examples **Example 1:** Input: ```python posts = [\\"#fun #sun #happy\\", \\"#sun #work\\", \\"#fun #happy\\", \\"#sleep #fun\\"] threshold = 2 ``` Output: ```python [\'#fun\', \'#happy\', \'#sun\'] ``` **Example 2:** Input: ```python posts = [\\"#a #b #c\\", \\"#d #e #f\\", \\"#g #h #i\\"] threshold = 2 ``` Output: ```python [] ``` # Note Ensure that your function adheres to all the constraints, and edge cases are handled correctly.","solution":"from typing import List from collections import Counter import re def find_trending_hashtags(posts: List[str], threshold: int) -> List[str]: Returns a list of hashtags that appear at least `threshold` times in the given list of posts. The hashtags in the result list are sorted in lexicographical order. hashtag_pattern = re.compile(r\'#w+\') hashtag_count = Counter() for post in posts: hashtags_in_post = hashtag_pattern.findall(post) hashtag_count.update(hashtags_in_post) trending_hashtags = [hashtag for hashtag, count in hashtag_count.items() if count >= threshold] trending_hashtags.sort() return trending_hashtags"},{"question":"Given an array of integers nums, you want to maximize the sum of elements you pick under the constraint that you cannot pick two elements that are adjacent in the array (i.e., elements at indices i and i+1). Write a function to return the maximum sum you can achieve. Example 1: Input: nums = [2, 3, 4, 5] Output: 8 Explanation: Pick 2 and 5 to get 2 + 5 = 7. Alternatively, you can pick 3 and 4 to get 3 + 4 = 7. The maximum sum is 8, achieved by picking 2 and 5. Example 2: Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: Pick 3, skip 2, pick 5, skip 10, pick 7 for a total of 3 + 5 + 7 = 15. Example 3: Input: nums = [] Output: 0 Explanation: No elements to pick. Note: The length of nums will not exceed 10000. Each element nums[i] is an integer within the range [-1000, 1000].","solution":"def max_non_adjacent_sum(nums): Computes the maximum sum of non-adjacent elements in the list nums. if not nums: return 0 prev_include = 0 prev_exclude = 0 for num in nums: new_exclude = max(prev_include, prev_exclude) prev_include = prev_exclude + num prev_exclude = new_exclude return max(prev_include, prev_exclude)"},{"question":"Given an array of integers heights, where heights[i] represents the height of a person at position i, return the maximum number of people that can form a consecutive subsequence with heights in strictly increasing order. Example: Input: [1,2,3,2,2,3,4,5] Output: 4 Explanation: The maximum consecutive subsequence with strictly increasing height is [2,3,4,5]. Example: Input: [5,4,3,2,1] Output: 1 Explanation: The heights are in strictly decreasing order, so the maximum consecutive subsequence with strictly increasing height is any single element, such as [5].","solution":"def max_consecutive_increasing_subseq(heights): Returns the maximum number of people that can form a consecutive subsequence with heights in strictly increasing order. if not heights: return 0 max_length = 1 current_length = 1 for i in range(1, len(heights)): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a function that calculates the sum of all prime numbers less than or equal to a given natural number M. Example 1: Input: 10 Output: 17 Explanation: Prime numbers less than or equal to 10 are 2, 3, 5, 7. Their sum is 17. Example 2: Input: 20 Output: 77 Explanation: Prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, 19. Their sum is 77. Your Task: You don\'t need to read or print anything. Your task is to complete the function primeSum() which takes M as input parameter and returns the sum of all prime numbers less than or equal to M. Expected Time Complexity: O(M * log(log(M))) [using the Sieve of Eratosthenes] Expected Space Complexity: O(M) Constraints: 1 <= M <= 1000000","solution":"def primeSum(M): Returns the sum of all prime numbers less than or equal to M. if M < 2: return 0 sieve = [True] * (M + 1) sieve[0], sieve[1] = False, False p = 2 while p * p <= M: if sieve[p]: for i in range(p * p, M + 1, p): sieve[i] = False p += 1 prime_sum = sum(i for i in range(M + 1) if sieve[i]) return prime_sum"},{"question":"Favorite Subarray Rohan loves playing with arrays. He is particularly fond of finding subarrays with specific properties. A subarray is a contiguous part of an array. Rohan is given an array of integers and he wants to find the length of the longest subarray that meets the following condition: - The sum of the subarray should be less than or equal to a given integer t. Given an array and a value t, find the length of the longest subarray that satisfies the condition. For example, if array = [1, 2, 3, 4] and t = 6, the longest subarray could be [1, 2, 3] or [2, 3, 1] with length 3. Input Format: The first line contains two integers, n and t, the number of elements in the array and the maximum allowed sum of the subarray. The next line contains n space-separated integers representing the elements of the array. Constraints: 1 ≤ n ≤ 10^5 1 ≤ array[i] ≤ 10^9 1 ≤ t ≤ 10^18 Output Format: An integer that denotes the length of the longest subarray with a sum less than or equal to t. Sample Input: 5 10 1 2 3 4 5 Sample Output: 4 Explanation: The longest subarray with sum <= 10 is [1, 2, 3, 4]. Its length is 4.","solution":"def longest_subarray_with_sum_at_most_t(arr, t): Given an array of integers and a value t, returns the length of the longest subarray with sum less than or equal to t. n = len(arr) left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += arr[right] while current_sum > t: current_sum -= arr[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers and an integer K. Write a function that determines the maximum sum of a subarray of size K. If there are multiple subarrays of size K with the same maximum sum, return any one of them. Example 1: Input: arr = [1, 4, 2, 10, 23, 3, 1, 0, 20] K = 4 Output: [4, 2, 10, 23] Explanation: The subarray [4, 2, 10, 23] has the maximum sum of 39. Example 2: Input: arr = [2, 1, 5, 1, 3, 2] K = 3 Output: [5, 1, 3] Explanation: The subarray [5, 1, 3] has the maximum sum of 9. Example 3: Input: arr = [4, 4, 4, 4] K = 2 Output: [4, 4] Explanation: Any subarray of size 2 will have the maximum sum of 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `max_sum_subarray` which takes the list of integers `arr` and the integer `K` as input parameters and returns a list of integers representing the subarray of size K which has the maximum sum. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 1 <= K <= len(arr) -10^3 <= arr[i] <= 10^3","solution":"def max_sum_subarray(arr, K): Returns a subarray of size K which has the maximum sum. n = len(arr) if n < K: return [] max_sum = float(\'-inf\') current_sum = 0 max_sum_start = 0 # Compute the sum of the first window of size K for i in range(K): current_sum += arr[i] # Initialize the max sum with the sum of the first window max_sum = current_sum # Slide the window over the array for i in range(K, n): current_sum += arr[i] - arr[i - K] if current_sum > max_sum: max_sum = current_sum max_sum_start = i - K + 1 return arr[max_sum_start:max_sum_start + K]"},{"question":"Write a function to simulate the operations of a bookstore inventory management system. The system allows for the addition of new books, removal of books, and querying the catalogue by genre. A book in the inventory is represented by a tuple containing its title (a string), author (a string), and genre (a string). Implement the following functionalities: 1. Add a new book to the inventory: `add_book(book: Tuple[str, str, str]) -> None` 2. Remove a book from the inventory by title: `remove_book(title: str) -> None` 3. List all books of a given genre in alphabetical order of title: `list_books_by_genre(genre: str) -> List[str]` Assume that initially, the inventory is empty. Input - For `add_book()` and `remove_book()`, the input will be a single book tuple or a title string respectively. - For `list_books_by_genre()`, the input will be a genre string. Output - `add_book(book)` and `remove_book(title)` do not return any value. - `list_books_by_genre(genre)` returns a list of strings representing the titles of all books in the specified genre, in alphabetical order. All genres and book titles are case-sensitive. You may assume that book titles are unique. Examples ```python add_book((\\"The Hobbit\\", \\"J.R.R. Tolkien\\", \\"Fantasy\\")) add_book((\\"1984\\", \\"George Orwell\\", \\"Dystopian\\")) add_book((\\"The Silmarillion\\", \\"J.R.R. Tolkien\\", \\"Fantasy\\")) add_book((\\"Moby Dick\\", \\"Herman Melville\\", \\"Adventure\\")) print(list_books_by_genre(\\"Fantasy\\")) # Output: [\'The Hobbit\', \'The Silmarillion\'] remove_book(\\"1984\\") print(list_books_by_genre(\\"Dystopian\\")) # Output: [] print(list_books_by_genre(\\"Adventure\\")) # Output: [\'Moby Dick\'] ```","solution":"from typing import List, Tuple # Initialize the inventory as an empty list of books inventory = [] def add_book(book: Tuple[str, str, str]) -> None: Adds a new book to the inventory. Parameters: book (tuple): A tuple containing the title, author, and genre of the book. inventory.append(book) def remove_book(title: str) -> None: Removes a book from the inventory by title. Parameters: title (str): The title of the book to be removed. global inventory inventory = [book for book in inventory if book[0] != title] def list_books_by_genre(genre: str) -> List[str]: Lists all books in the inventory by a given genre, ordered alphabetically by title. Parameters: genre (str): The genre to filter books by. Returns: list: A list of book titles in the specified genre, ordered alphabetically by title. books_of_genre = [book[0] for book in inventory if book[2] == genre] return sorted(books_of_genre) #"},{"question":"You are given a string `s` consisting of the characters \'(\', \')\' and \'*\'. The \'*\' character can be treated as either a \'(\', \')\' or an empty string. Determine if the string `s` can be a valid parentheses string by replacing \'*\' with characters that make it valid. A valid parentheses string is: 1. An empty string \\"\\" 2. A string that is a concatenation of two valid parentheses strings. 3. A string that is enclosed by a pair of parentheses \'(\' and \')\' and is a valid parentheses string inside. Constraints: * The length of `s` will be between 1 and 100 (inclusive). * The string `s` will contain only the characters \'(\', \')\' and \'*\'. **Input:** - A single string `s`. **Output:** - Return \\"YES\\" if the string can be made valid, otherwise return \\"NO\\". # Examples **Input:** ``` (*)) ``` **Output:** ``` YES ``` **Input:** ``` (*)*( ``` **Output:** ``` YES ``` **Input:** ``` ((*)* ``` **Output:** ``` NO ```","solution":"def checkValidString(s): Determine if the string s can be a valid parentheses string by replacing \'*\' with characters that make it valid. :param s: A string consisting of \'(\', \')\' and \'*\' :return: \\"YES\\" if the string can be made valid, \\"NO\\" otherwise left_balance = right_balance = 0 # Check the string from left to right for char in s: if char in \\"(*\\": left_balance += 1 else: left_balance -= 1 if left_balance < 0: return \\"NO\\" # Check the string from right to left for char in reversed(s): if char in \\"*)\\": right_balance += 1 else: right_balance -= 1 if right_balance < 0: return \\"NO\\" return \\"YES\\""},{"question":"Nina loves playing with sequences of numbers. She recently discovered a special property of certain sequences, which she named the \\"left-longest non-decreasing subsequence\\" (LLNDS). A LLNDS of a sequence is any subsequence of the sequence that is non-decreasing and starts from the leftmost element. To formalize, given a sequence of integers, Nina wants to identify the length of the longest subsequence starting from the first element (at index 1) which is non-decreasing. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the sequence. The second line contains n space-separated integers denoting the sequence a (1 ≤ a[i] ≤ 1000). -----Output----- Output a single integer representing the length of the longest left-longest non-decreasing subsequence of the given sequence. -----Examples----- Input 6 3 1 2 2 4 5 Output 5 Input 4 9 8 7 6 Output 1 Input 5 2 2 2 2 2 Output 5 -----Note----- In the first sample, the longest non-decreasing subsequence starting from the leftmost element is {3, 3, 4, 5}, which has length 5. In the second sample, the longest non-decreasing subsequence starting from the leftmost element is just {9}, as the sequence is strictly decreasing. In the third sample, all elements are equal, so the whole sequence is a non-decreasing subsequence starting from the leftmost element, making its length 5.","solution":"def longest_left_longest_non_decreasing_subsequence(n, sequence): Returns the length of the longest left-longest non-decreasing subsequence of the given sequence. Args: n : int : the number of elements in the sequence sequence : list of int : the sequence of integers Returns: int : the length of the longest left-longest non-decreasing subsequence if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] >= sequence[i - 1]: current_length += 1 if current_length > max_length: max_length = current_length else: break return max_length"},{"question":"You are given a string s consisting of lowercase English letters. You need to compress the string by using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the compressed string would not become smaller than the original string, your program should return the original string. You can assume the string has only uppercase and lowercase letters (a - z). -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 1000), the length of the string. -----Output----- Output the compressed string or the original string if the compressed string is not shorter. -----Examples----- Input aabcccccaaa Output a2b1c5a3 Input abcdef Output abcdef Input aaabbbbcc Output a3b4c2","solution":"def compress_string(s): Compress the string by using the counts of repeated characters. If the compressed string is not shorter, return the original string. compressed = [] count = 1 # Iterate over the string to build the compressed string for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Append the last group of characters compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"A web service returns a list of timestamped temperature readings from various sensors. Each reading is represented as a tuple `(timestamp, sensor_id, temperature)`, where `timestamp` is a string in \\"YYYY-MM-DD HH:MM:SS\\" format, `sensor_id` is a unique identifier, and `temperature` is a floating point number. Your task is to: 1. Identify the sensor with the highest average temperature. 2. For that sensor, return the timestamp of the highest temperature recorded. If there are multiple sensors with the same highest average temperature, select the one with the highest individual recorded temperature. If there is still a tie, select the sensor with the earliest first reading. Write a function `highest_avg_temperature_reading(readings)` that receives a list of tuples as described and returns the `sensor_id` of the sensor with the highest average temperature and the `timestamp` of the highest temperature reading for that sensor. Example 1: ```python readings = [ (\\"2023-01-01 10:00:00\\", \\"sensor1\\", 20.5), (\\"2023-01-01 11:00:00\\", \\"sensor2\\", 21.0), (\\"2023-01-01 12:00:00\\", \\"sensor1\\", 23.0), (\\"2023-01-01 13:00:00\\", \\"sensor2\\", 22.0), (\\"2023-01-01 14:00:00\\", \\"sensor1\\", 22.5), (\\"2023-01-01 15:00:00\\", \\"sensor2\\", 25.0) ] ``` Output: ```python (\\"sensor2\\", \\"2023-01-01 15:00:00\\") ``` In this example, \\"sensor2\\" has the highest average temperature of 22.67 (compared to \\"sensor1\\"\'s 22.0), and the timestamp of its highest recorded temperature is \\"2023-01-01 15:00:00\\". Example 2: ```python readings = [ (\\"2023-01-01 10:00:00\\", \\"sensor1\\", 25.0), (\\"2023-01-01 11:00:00\\", \\"sensor1\\", 25.0) ] ``` Output: ```python (\\"sensor1\\", \\"2023-01-01 10:00:00\\") ``` In this example, there is only one sensor, and the timestamp of its highest recorded temperature is \\"2023-01-01 10:00:00\\". Constraints: - The length of `readings` will be between 1 and 10^6. - Each `timestamp` is unique. - Temperatures are in the range [-100.0, 100.0]. - Each sensor has at least one reading.","solution":"from collections import defaultdict from statistics import mean def highest_avg_temperature_reading(readings): Identifies the sensor with the highest average temperature and returns the sensor ID and the timestamp of its highest temperature reading. sensor_data = defaultdict(lambda: {\\"temps\\": [], \\"max_temp\\": float(\'-inf\'), \\"max_temp_time\\": None, \\"first_time\\": None}) for timestamp, sensor_id, temperature in readings: sensor_data[sensor_id][\\"temps\\"].append(temperature) if temperature > sensor_data[sensor_id][\\"max_temp\\"]: sensor_data[sensor_id][\\"max_temp\\"] = temperature sensor_data[sensor_id][\\"max_temp_time\\"] = timestamp if sensor_data[sensor_id][\\"first_time\\"] is None: sensor_data[sensor_id][\\"first_time\\"] = timestamp max_avg_temp = float(\'-inf\') selected_sensor = None for sensor_id, data in sensor_data.items(): avg_temp = mean(data[\\"temps\\"]) if (avg_temp > max_avg_temp or (avg_temp == max_avg_temp and data[\\"max_temp\\"] > sensor_data[selected_sensor][\\"max_temp\\"]) or (avg_temp == max_avg_temp and data[\\"max_temp\\"] == sensor_data[selected_sensor][\\"max_temp\\"] and data[\\"first_time\\"] < sensor_data[selected_sensor][\\"first_time\\"])): max_avg_temp = avg_temp selected_sensor = sensor_id return selected_sensor, sensor_data[selected_sensor][\\"max_temp_time\\"]"},{"question":"You are given an integer array a of length n. In this problem, you need to perform operations to make all elements of the array equal. An operation consists of finding two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j), such that a_i is not equal to a_j, and changing the value of a_j to a_i + 1 or a_i - 1. Find the minimum number of operations required to make all elements in the array equal. ----- Input ----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 100) — the length of the array a. The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 100) — the elements of the array a. ----- Output ----- For each test case, print the minimum number of operations to make all elements in a equal. ----- Example ----- Input 3 4 1 2 3 4 3 2 2 2 5 5 6 7 8 9 Output 3 0 4 ----- Note ----- In the first test case, we can perform the following operations: 1. Change the 2nd element (2) to 2, making the array [1, 3, 3, 4] 2. Change the 1st element (1) to 2, making the array [2, 3, 3, 4] 3. Change the 4th element (4) to 3, making the array [2, 3, 3, 3] In the second test case, the array is already equal. In the third test case, we can perform the following operations: 1. Change the 5th element (9) to 8, making the array [5, 6, 7, 8, 8] 2. Change the 1st element (5) to 6, making the array [6, 6, 7, 8, 8] 3. Change the 3rd element (7) to 8, making the array [6, 6, 8, 8, 8] 4. Change the 1st element (6) to 7, making the array [7, 8, 8, 8, 8]","solution":"def min_operations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] unique_elements = set(a) # If all elements are already the same if len(unique_elements) == 1: results.append(0) continue max_freq = max(a.count(x) for x in unique_elements) results.append(len(a) - max_freq) return results"},{"question":"In the kingdom of Codeonia, there are N enchanted trees arranged in a row. Each tree has a certain number of magical fruits. Due to a recent spell, each fruit on a tree now holds a magical value. The kingdom has decided to collect fruits such that the sum of their values is maximized, but with a twist: they can only pick fruits from trees that are at least K trees apart to ensure fair distribution and sustainability. Given an array of integers representing the values of the fruits on each tree, your task is to determine the maximum sum of fruit values that can be collected under the given condition. Input: First line of input contains two integers N and K representing the number of trees and the minimum distance between the chosen trees respectively. The second line contains N space-separated integers where each integer represents the magical value of the fruits on a tree. Constraints: 1 ≤ N ≤ 10^4 1 ≤ K ≤ N -10^4 ≤ Value of fruits on each tree ≤ 10^4 SAMPLE INPUT 7 2 8 2 6 5 3 7 4 SAMPLE OUTPUT 15 Explanation In the given example: - Number of trees, N = 7. - Minimum distance, K = 2. - Tree values: 8, 2, 6, 5, 3, 7, 4. The optimal way to select trees so that each selected tree is at least K (= 2) trees apart and the sum of the values is maximized, is: - Pick fruits from tree 1 (value = 8). - Skip 2 trees. - Pick fruits from tree 4 (value = 5). - Skip 2 trees. - Pick fruits from tree 7 (value = 4). So, the maximum value that can be collected is 8 + 5 + 4 = 17.","solution":"def max_fruit_value(N, K, values): Returns the maximum sum of fruit values that can be collected from trees such that they are at least K trees apart. # Initialize a list to store the maximum sum possible up to each tree dp = [0] * N # First tree can always be taken dp[0] = values[0] for i in range(1, N): # Consider taking the current tree pick = values[i] if i > K: pick += dp[i - K - 1] # Consider not taking the current tree not_pick = dp[i - 1] # Best option for the current tree\'s position dp[i] = max(pick, not_pick) return dp[-1]"},{"question":"You are given an unsorted array of N integers where some elements appear twice and others appear once. Your task is to find the elements that appear twice in the array. The output should be sorted in ascending order. If no element appears twice, return an empty array. Example 1: Input: N = 5 arr = [4, 3, 2, 7, 8, 2, 3, 1] Output: [2, 3] Explanation: The numbers 2 and 3 appear twice. Example 2: Input: N = 3 arr = [1, 2, 3] Output: [] Explanation: There are no numbers that appear twice. Your Task: You don\'t need to read input or print anything. Complete the function findDuplicates() which takes the array arr and the size of the array, N, as input parameters and returns a list of elements that appear twice in ascending order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (Considering the input array can be modified) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ arr[i] ≤ N","solution":"def findDuplicates(arr, N): result = [] for i in range(N): index = abs(arr[i]) - 1 if arr[index] < 0: result.append(abs(arr[i])) else: arr[index] = -arr[index] result.sort() return result"},{"question":"You are given a list of integers. Your task is to find the second largest number in the list. If the largest number occurs more than once and there is no second largest number, then output \\"No second largest number\\". Input The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements in the list. Output Output a single integer which is the second largest number in the list, or \\"No second largest number\\" if there is no distinct second largest number. Constraints 1 ≤ N ≤ 1000 -10^6 ≤ element ≤ 10^6 Example Input: 5 2 3 6 6 5 Output: 5 Input: 3 4 4 4 Output: No second largest number Explanation Example 1: The largest number is 6, and the second largest number is 5. Example 2: Since all numbers are the same, there is no second largest number.","solution":"def find_second_largest(numbers): Returns the second largest number in the list or \\"No second largest number\\" if it does not exist. unique_numbers = set(numbers) if len(unique_numbers) < 2: return \\"No second largest number\\" unique_numbers.remove(max(unique_numbers)) return max(unique_numbers)"},{"question":"**Problem Statement:** You are given a list of integers. Your task is to reorder the list such that all negative integers appear before all non-negative integers, while maintaining the relative order of the negative integers as well as the relative order of the non-negative integers. # Input: - The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the list. - The second line contains n space-separated integers a1, a2, ..., an (−109 ≤ ai ≤ 109) — the integers in the list. # Output: - Print the reordered list with all negative integers appearing before all non-negative integers, while preserving their relative order. # Examples: **Example 1:** Input: 6 -1 -3 4 2 -5 3 Output: -1 -3 -5 4 2 3 **Example 2:** Input: 4 1 2 -1 -2 Output: -1 -2 1 2 **Example 3:** Input: 5 0 1 2 -1 -3 Output: -1 -3 0 1 2 **Explanation:** In the first example, the negative integers -1, -3, and -5 retain their relative order and appear before the non-negative integers 4, 2, and 3, which also retain their relative order. The same logic applies to the other examples.","solution":"def reorder_list(n, nums): Reorder the list such that all negative integers appear before all non-negative integers while maintaining the relative order of the negative integers as well as the relative order of the non-negative integers. Parameters: n (int): Number of integers in the list nums (list of int): List of integers Returns: list of int: Reordered list negatives = [num for num in nums if num < 0] non_negatives = [num for num in nums if num >= 0] return negatives + non_negatives"},{"question":"Given a positive integer N, return the N-th Fibonacci number. The Fibonacci sequence is formed as follows: - F(1) = 0, F(2) = 1 - For N > 2, F(N) = F(N-1) + F(N-2) Example: Input: N = 5 Output: 3 Explanation: The 5th Fibonacci number is 3 (0, 1, 1, 2, 3). Example 1: Input: N = 7 Output: 8 Explanation: The 7th Fibonacci number is 8 (0, 1, 1, 2, 3, 5, 8). Example 2: Input: N = 10 Output: 34 Explanation: The 10th Fibonacci number is 34 (0, 1, 1, 2, 3, 5, 8, 13, 21, 34). Your Task: Complete the function nthFibonacci() which takes n, as input parameters and returns the N-th Fibonacci number. The answer can be large, so return it modulo 10^9 + 7. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^4","solution":"def nthFibonacci(N): Returns the N-th Fibonacci number, using modulo 10^9 + 7 MOD = 10**9 + 7 if N == 1: return 0 elif N == 2: return 1 fib = [0] * N fib[0], fib[1] = 0, 1 for i in range(2, N): fib[i] = (fib[i-1] + fib[i-2]) % MOD return fib[-1]"},{"question":"Mr. Bakewell is running a pastry shop and employs N bakers, numbered from 1 to N. Each baker specializes in making a specific type of pastry. The bakers communicate with each other through a messaging app called BakeChat, where they share recipes of their specialties with other bakers. If a baker receives a new recipe, they immediately share it with all the bakers they are connected with via the app. Due to the high demand for unique pastries, Mr. Bakewell wants to know how quickly and extensively recipes spread across his team. For this reason, he needs a tool to analyze potential recipe dissemination. You are given a list of connections between the bakers, and M queries on how recipe sharing progresses over time. Your task is to determine the reach of a recipe after exactly T minutes from a given starting baker. ------ Input ------ The first line contains a single integer N denoting the number of bakers. The next N lines contain a matrix b[N][N]. Each of the i-th lines contains N space-separated integers - the j-th integer in each line denotes b[i][j]. If Baker j is connected to Baker i via BakeChat, then b[i][j] is 1; otherwise, it is 0. Note that the connections are bidirectional, i.e. b[i][j] = b[j][i]. Also, a baker can be connected to themselves, i.e. b[i][i] may be equal to 1. The next line contains a single integer M denoting the number of queries. The next M lines contain two integers t and x as described above. ------ Output ------ For each query, output two lines. In the first line, output the number of bakers who will know the recipe after t minutes. In the second line, print the IDs of these bakers in increasing order. If no one will know the recipe after T minutes, then print -1 in this line. ------ Constraints ------ 1 ≤ N ≤ 500 1 ≤ M ≤ 500 0 ≤ t ≤ 10^9 1 ≤ x ≤ N 0 ≤ b[i][j] ≤ 1 ------ Subtasks ------ Subtask #1: (10 points) 1 ≤ N ≤ 50 1 ≤ M ≤ 50 0 ≤ t ≤ 50 Subtask #2: (15 points) Original constraints Every baker is connected to exactly one other baker. Subtask #3: (30 points) 1 ≤ N ≤ 75 1 ≤ M ≤ 75 0 ≤ t ≤ 10^9 Subtask #4: (45 points) Original constraints ------ Example ------ Input: 4 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 3 2 1 1 2 0 3 Output: 3 1 2 3 2 1 3 1 3","solution":"from collections import deque def get_reach_time(bakers_matrix, start, time): n = len(bakers_matrix) visited = [False] * n visited[start] = True queue = deque([(start, 0)]) reachable = set([start]) while queue: current_baker, current_time = queue.popleft() if current_time == time: continue for neighbor in range(n): if bakers_matrix[current_baker][neighbor] == 1 and not visited[neighbor]: visited[neighbor] = True reachable.add(neighbor) queue.append((neighbor, current_time + 1)) reach_list = sorted(b + 1 for b in reachable) return len(reach_list), reach_list if reach_list else [-1] def recipe_spread(N, bakers_matrix, M, queries): results = [] for time, start in queries: num_bakers, bakers = get_reach_time(bakers_matrix, start - 1, time) results.append(f\\"{num_bakers}\\") results.append(\\" \\".join(map(str, bakers))) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 bakers_matrix = [] for i in range(N): bakers_matrix.append([int(data[index + j]) for j in range(N)]) index += N M = int(data[index]) index += 1 queries = [] for i in range(M): t = int(data[index]) x = int(data[index + 1]) queries.append((t, x)) index += 2 results = recipe_spread(N, bakers_matrix, M, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice received a new TV system and noticed that it comes with an array of channels, each broadcasting shows of varying durations. Being very organized, Alice wants to select a sequence of channels to watch so that the total duration of the shows she decides to watch is equal to a specific target time ( T ). You need to help Alice by determining whether there is a contiguous subsequence of the channel durations that adds up exactly to ( T ). # Input Format: - The first line of the input contains an integer ( N ) (the number of channels). - The second line contains ( N ) space-separated integers representing the durations of the shows on each channel. - The third line contains the target integer ( T ) that Alice wishes to match. # Output Format: - Output \\"YES\\" if there exists a contiguous subsequence of the channels that sums to ( T ). Otherwise, output \\"NO\\". # Constraints: - ( 1 leq N leq 100000 ) - ( 1 leq ) duration of each channel ( leq 1000 ) - ( 1 leq T leq 10000000 ) # Sample Input: ```plaintext 5 1 2 3 4 5 9 ``` # Sample Output: ``` YES ``` # Explanation: By selecting the subarray [2, 3, 4], Alice gets a sum of 9, which matches the target time ( T ). # Sample Input: ```plaintext 5 1 2 3 4 5 15 ``` # Sample Output: ``` YES ``` # Explanation: By selecting the entire array [1, 2, 3, 4, 5], Alice gets a sum of 15, which matches the target time ( T ). # Sample Input: ```plaintext 5 1 2 3 4 5 8 ``` # Sample Output: ``` NO ``` # Explanation: There is no contiguous subarray that sums to 8.","solution":"def find_subsequence(arr, T): Returns \\"YES\\" if there\'s a contiguous subarray in arr that sums up to T, otherwise \\"NO\\". current_sum = 0 start_index = 0 for end_index in range(len(arr)): current_sum += arr[end_index] # Shrink the window until the current_sum is <= T while current_sum > T and start_index <= end_index: current_sum -= arr[start_index] start_index += 1 if current_sum == T: return \\"YES\\" return \\"NO\\""},{"question":"Given a list of integers, the task is to find the next lexicographical permutation of the list. The function should modify the list in place. If the function is given the highest possible permutation, it should transform the list into the lowest possible permutation (i.e., sorted in ascending order). Example 1: Input: arr = [1, 2, 3] Output: [1, 3, 2] Example 2: Input: arr = [3, 2, 1] Output: [1, 2, 3] Example 3: Input: arr = [1, 1, 5] Output: [1, 5, 1] Your Task: This is a function problem. You only need to complete the function `nextPermutation` that takes `List[int]` as the parameter. The function should modify the list in place to produce the next lexicographical permutation. Constraints: 1 ≤ size of list ≤ 1000 Expected Time Complexity: O(N), N = length of list. Expected Auxiliary Space: O(1)","solution":"def nextPermutation(arr): Modify the list in place to produce the next lexicographical permutation. # Find the largest index k such that arr[k] < arr[k + 1] k = len(arr) - 2 while k >= 0 and arr[k] >= arr[k + 1]: k -= 1 if k == -1: # The array is in the highest possible permutation, so transform it into the lowest one arr.reverse() return # Find the largest index l greater than k such that arr[k] < arr[l] l = len(arr) - 1 while arr[k] >= arr[l]: l -= 1 # Swap the value of arr[k] with that of arr[l] arr[k], arr[l] = arr[l], arr[k] # Reverse the sequence from arr[k + 1] to the end arr[k + 1:] = reversed(arr[k + 1:])"},{"question":"Given an array of integers, an element is called a \\"majority element\\" if it appears more than n/2 times in the array, where n is the length of the array. Your task is to determine whether a majority element exists, and if it does, return that element. If multiple majority elements exist, return all of them. If there is no majority element, return an empty list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) – the number of elements in the array. The second line contains n integers (1 ≤ a_i ≤ 100000) – the elements of the array. -----Output----- Print the majority element(s) if it/they exist(s). If there are multiple, print them in a sorted manner. If none exists, print an empty list. -----Examples----- Input 5 3 3 4 2 3 Output 3 Input 6 1 1 2 2 3 3 Output []","solution":"def find_majority_elements(n, arr): Returns the majority element if it exists, otherwise return an empty list. If multiple majority elements exist, return all of them in a sorted manner. from collections import Counter # Count the frequency of each element counts = Counter(arr) majority_count = n // 2 # Find the elements with frequency greater than n // 2 majority_elements = [element for element, count in counts.items() if count > majority_count] # Sort the result if there are multiple majority elements return sorted(majority_elements) # Example usage n = 5 arr = [3, 3, 4, 2, 3] print(find_majority_elements(n, arr)) # Output: [3]"},{"question":"Pak Chanek is delivering a lecture on data structures and wants to use an example involving intervals on the real number line. Given a list of intervals, each defined by its starting and ending points, he wants to determine the total length of the union of these intervals. The union of intervals is the total length covered by any of them. For example, if the intervals are [1, 3], [2, 5], and [6, 8], the union is covered by the segments [1, 5] and [6, 8], so the total length is 6 (4 from [1, 5] and 2 from [6, 8]). Given the intervals, write a function to compute the total length of the union of the intervals. -----Input----- - The first line contains a single integer N (1 leq N leq 10^5) — the number of intervals. - Each of the following N lines contains two integers L_i and R_i (0 leq L_i < R_i leq 10^9) — the starting and ending points for each interval. -----Output----- A single integer representing the total length of the union of the intervals. -----Examples----- Input 3 1 3 2 5 6 8 Output 6 Input 4 1 2 2 3 3 4 4 5 Output 4 -----Note----- In the first example: The intervals [1, 3] and [2, 5] overlap, so their union is [1, 5]. The interval [6, 8] does not overlap with any others. Therefore, the total union length is (5 - 1) + (8 - 6) = 6. In the second example: The intervals [1, 2], [2, 3], [3, 4], and [4, 5] are continuous, so their union is [1, 5]. Therefore, the total union length is 5 - 1 = 4.","solution":"def total_union_length(intervals): Returns the total length of the union of the given intervals. if not intervals: return 0 # Sort intervals based on the starting point intervals.sort() total_length = 0 current_start, current_end = intervals[0] for start, end in intervals[1:]: if start > current_end: # No overlap total_length += current_end - current_start current_start, current_end = start, end else: # Overlap, extend the current interval current_end = max(current_end, end) # Add the length of the last interval total_length += current_end - current_start return total_length"},{"question":"In a distant land, there is a mystical forest containing a unique Tree of Life. This tree has an unusual property where each node represents an energy source, and the edges represent energy channels. Each node is assigned a power level which indicates the amount of energy it can contain. Energy channels work in such a way that transferring energy along an edge causes a certain amount of energy loss. Given a tree with `N` nodes (numbered from 1 to `N`), where each edge has a specific energy loss associated with it, the goal is to calculate the maximum amount of energy that can be transferred from a given root node to any other node in the tree. **Input:** - The first line contains an integer `N` (2 ≤ N ≤ 1000), the number of nodes in the tree. - The second line contains `N` integers, where the `i`-th integer indicates the power level of the `i`-th node. - The next `N-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 100), representing an edge between nodes `u` and `v` with an energy loss `w`. **Output:** - Output a single integer, the maximum amount of energy that can be transferred from the root node (assume the root node is always node 1) to any other node in the tree. **Example:** Input: ``` 5 10 20 30 40 50 1 2 5 1 3 10 2 4 2 3 5 3 ``` Output: ``` 40 ``` In this example, the tree can be visualized as follows: ``` 1(10) / 2(20) 3(30) / 4(40) 5(50) ``` - From node 1 to node 2: 10 - 5 = 5 (remaining energy) - From node 1 to node 3: 10 - 10 = 0 (remaining energy) - From node 2 to node 4 via 1: 10 - 5 - 2 = 3 (remaining energy) - From node 3 to node 5 via 1: 10 - 10 - 3 = -3 (not possible since energy dropped below 0) The maximum energy transferred from the root node to any other node is 40.","solution":"def max_energy_transfer(N, power_levels, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(root): max_energy = power_levels[root - 1] visited = [False] * (N + 1) queue = deque([(root, power_levels[root - 1])]) while queue: node, remaining_energy = queue.popleft() visited[node] = True for neighbor, weight in graph[node]: if not visited[neighbor]: new_energy = remaining_energy - weight if new_energy < 0: continue max_energy = max(max_energy, power_levels[neighbor - 1]) queue.append((neighbor, new_energy)) return max_energy return bfs(1)"},{"question":"# Task: Given two strings `A` and `B`, determine if string `B` can be formed by rearranging characters of string `A` and adding exactly one character. Return a boolean value `True` if it\'s possible and `False` otherwise. Example: ``` can_form_by_adding_one(\\"abc\\", \\"cbad\\") == True can_form_by_adding_one(\\"aabb\\", \\"abca\\") == False can_form_by_adding_one(\\"xyz\\", \\"xyzz\\") == True ``` Have fun!","solution":"def can_form_by_adding_one(A, B): Determine if string B can be formed by rearranging characters of string A and adding exactly one character. Return a boolean value True if it\'s possible and False otherwise. if len(B) != len(A) + 1: return False from collections import Counter countA = Counter(A) countB = Counter(B) difference = countB - countA return len(difference) == 1 and list(difference.values())[0] == 1"},{"question":"Given a set of points in a 2D plane, determine the smallest rectangle that can enclose all the points such that its sides are parallel to the coordinate axes. Constraints * 1 ≤ n ≤ 1000 * -10000 ≤ xi, yi ≤ 10000 * All points are distinct. Input The input consists of: ``` n x1 y1 x2 y2 ... xn yn ``` Where `n` is the number of points, and each `xi` and `yi` are the coordinates of the i-th point. Output Output four integers corresponding to the coordinates of the bottom-left and top-right corners of the smallest rectangle. Example Input 5 1 2 2 3 4 6 0 5 -1 -2 Output -1 -2 4 6","solution":"def smallest_enclosing_rectangle(points): Given a list of points, determine the smallest rectangle that can enclose all the points such that its sides are parallel to the coordinate axes. Args: points (list of tuples): List of tuples where each tuple is of the form (x, y). Returns: tuple: Four integers corresponding to the coordinates of the bottom-left and top-right corners of the smallest rectangle. min_x = min(points, key=lambda pt: pt[0])[0] max_x = max(points, key=lambda pt: pt[0])[0] min_y = min(points, key=lambda pt: pt[1])[1] max_y = max(points, key=lambda pt: pt[1])[1] return min_x, min_y, max_x, max_y"},{"question":"Given a string S consisting of lowercase letters and stars \'*\', where each star can be replaced by any character, find the number of distinct possible strings that can be formed by replacing the stars with lowercase letters \'a\' to \'z\'. Example 1: Input: S = \\"a*c\\" Output: 26 Explanation: The star can be replaced by any of the 26 letters, resulting in 26 distinct strings. Example 2: Input: S = \\"*b*\\" Output: 676 Explanation: Each star can be replaced by any of the 26 letters, resulting in 26 * 26 = 676 distinct strings. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPossibleStrings() which takes the string S as input and returns an integer representing the number of distinct possible strings. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(1). Constraints: 1<=|S|<=100","solution":"def countPossibleStrings(S): Returns the number of distinct possible strings that can be formed by replacing each \'*\' with any character from \'a\' to \'z\'. star_count = S.count(\'*\') return 26 ** star_count"},{"question":"In a coding competition, you are given a list of tasks. Each task requires a set of resources to be completed, and each resource has a cost associated with it. You have a given budget and need to determine the maximum number of tasks that can be completed within that budget. You will be provided with an integer array `costs` where `costs[i]` represents the cost of the i-th task, and an integer `budget` which is the total amount of money available to spend. Return the maximum number of tasks that can be completed without exceeding the budget. Example 1: Input: costs = [5, 3, 8, 4, 2], budget = 10 Output: 3 Explanation: You can complete tasks with costs [3, 4, 2] for a total cost of 9. This will allow you to complete 3 tasks. Example 2: Input: costs = [10, 10, 10], budget = 10 Output: 1 Explanation: You can only afford to complete one task, as each task costs 10. Constraints: - 1 <= costs.length <= 1000 - 1 <= costs[i] <= 10^6 - 1 <= budget <= 10^9","solution":"def max_tasks(costs, budget): Determines the maximum number of tasks that can be completed within the given budget. :param costs: List of integers representing the cost of each task :param budget: Integer representing the available budget :return: Maximum number of tasks that can be completed within the budget costs.sort() total_cost = 0 task_count = 0 for cost in costs: if total_cost + cost <= budget: total_cost += cost task_count += 1 else: break return task_count"},{"question":"Write a function that takes a string of text and determines if it is an [anagram](https://en.wikipedia.org/wiki/Anagram) of a palindrome. An **anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. A **palindrome** is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Function Signature ```python def is_anagram_of_palindrome(text: str) -> bool: pass ``` # Input - A single string `text`, consisting of lowercase and uppercase letters, as well as spaces. The length of `text` will be between 1 and 1000 characters. # Output - Return `True` if the input string is an anagram of some palindrome. Otherwise, return `False`. # Examples ```python is_anagram_of_palindrome(\\"Tact Coa\\") ``` ...should return `True`, because \\"Tact Coa\\" can be rearranged to form \\"taco cat\\", which is a palindrome. ```python is_anagram_of_palindrome(\\"Hello\\") ``` ...should return `False`, because \\"Hello\\" cannot be rearranged to form a palindrome. # Note - For the purposes of this task, consider that the space character does not matter; you should ignore spaces when determining if a string is anagram of a palindrome.","solution":"def is_anagram_of_palindrome(text: str) -> bool: Determine if the given text is an anagram of a palindrome. from collections import Counter # Normalize the text by converting to lowercase and removing spaces. cleaned_text = text.replace(\\" \\", \\"\\").lower() # Count the frequency of each character in the text. char_count = Counter(cleaned_text) # Check how many characters have an odd count. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a text to be an anagram of a palindrome: # - All characters must have even counts or exactly one character can have an odd count. return odd_count <= 1"},{"question":"You are organizing a coding competition where participants are expected to solve a variety of challenges. One of the challenges involves working with strings and ensuring they conform to specific restructuring rules. You are given a string consisting of lowercase English letters. You need to determine if it is possible to rearrange the string such that no two adjacent characters are the same. If it is possible, output any valid rearrangement. If not, output \\"NO\\". -----Input----- The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. Each of the next T lines contains a single string s (1 ≤ |s| ≤ 100), the string that needs to be rearranged. -----Output----- For each test case, if it is possible to rearrange the string such that no two adjacent characters are the same, output the rearranged string. If it is not possible, output \\"NO\\". -----Examples----- Input 3 aabb aaab ab Output abab NO ab -----Note----- In the first sample, it is possible to rearrange \\"aabb\\" as \\"abab\\" which satisfies the condition. In the second sample, it is impossible to rearrange \\"aaab\\" to meet the condition. In the third sample, \\"ab\\" already meets the condition since no two adjacent characters are the same.","solution":"import heapq from collections import Counter def rearrange_string(s): freq_counter = Counter(s) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) if len(rearranged) == len(s): return rearranged else: return \\"NO\\" def solve(T, cases): results = [] for case in cases: result = rearrange_string(case) results.append(result) return results"},{"question":"A city has built a new subway system with N stations, numbered from 1 to N. The stations are connected by (N-1) tunnels, and all tunnels are bidirectional. It is guaranteed that there is a unique path between any pair of stations. Some stations are more popular than others and have a higher risk of overcrowding. To manage this, the city has assigned a risk level to each station in the form of an integer array `risk` where `risk[i]` represents the risk level of the (i+1)-th station. Now, a transport authority wants to calculate the minimum risk level that a subway user has to encounter when traveling from station A to station B. Can you help them? Example 1: Input: N = 5 Tunnels = [[1, 2], [2, 3], [2, 4], [4, 5]] risk = [5, 3, 8, 2, 6] A = 1 B = 5 Output: 5 Explanation: The path from station 1 to station 5 is 1 -> 2 -> 4 -> 5. Risk levels encountered on this path are 5, 3, 2, and 6. Minimum risk level on this path is 2. Example 2: Input: N = 3 Tunnels = [[1, 2], [1, 3]] risk = [4, 6, 1] A = 1 B = 3 Output: 1 Explanation: The path from station 1 to station 3 is 1 -> 3. Risk levels encountered on this path are 4 and 1. Minimum risk level on this path is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minRiskPath()` which takes the integer N, a 2D list Tunnels, a list risk, and two integers A and B as input parameters and returns the minimum risk level encountered on the path from station A to station B. Constraints: 1 ≤ N ≤ 10^5 1 ≤ risk[i] ≤ 10^9 1 ≤ A, B ≤ N 1 ≤ u, v ≤ N (for any tunnel (u, v)) Expected Time Complexity: O(N) Expected Auxiliary Space: O(N)","solution":"def minRiskPath(N, Tunnels, risk, A, B): from collections import defaultdict, deque # Create adjacency list for graph representation graph = defaultdict(list) for u, v in Tunnels: graph[u].append(v) graph[v].append(u) def find_path_min_risk(start, end): visited = [False] * (N + 1) min_risk = float(\'inf\') queue = deque([(start, risk[start - 1])]) # Using deque for BFS while queue: node, current_min_risk = queue.popleft() if node == end: return current_min_risk visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append((neighbor, min(current_min_risk, risk[neighbor - 1]))) return min_risk return find_path_min_risk(A, B)"},{"question":"You are given a string s consisting of lowercase English letters. You need to divide the string into as many substrings as possible in such a way that each letter appears in at most one substring. Return the list of integers representing the length of these substrings. Note that you can return the result in any order. Input The input consists of a single string s (1 ≤ |s| ≤ 500) — the initial string consisting only of lowercase English letters. Output A list of integers representing the lengths of the substrings. Examples Input ababcbacadefegdehijhklij Output [9, 7, 8] Explanation The partitioning is \\"ababcbaca\\", \\"defegde\\", \\"hijhklij\\". This is because each letter appears in at most one substring. Note also that the partitioning is done in such a way that the length of the first partition is 9, the next is 7, and the last part is 8. Input eccbbbbdec Output [10] Explanation Here is the partitioning is \\"eccbbbbdec\\". Since all occurrences of letter \'e\', \'c\' and \'b\' are within a single substring, the entire string forms a single partition of length 10.","solution":"def partition_labels(s): Divide the string into as many substrings as possible so that each letter appears in at most one substring. Returns a list of integers representing the lengths of these substrings. Parameters: s (str): The input string consisting of lowercase English letters. Returns: List[int]: A list of integers representing the lengths of the substrings. if not s: return [] # Dictionary to store the last occurrence of each character last_occurrence = {char: idx for idx, char in enumerate(s)} partitions = [] start, end = 0, 0 for idx, char in enumerate(s): end = max(end, last_occurrence[char]) if idx == end: # We\'ve reached the end of a partition partitions.append(idx - start + 1) start = idx + 1 return partitions"},{"question":"Given an input integer n, where 1 <= n <= 100, write a function to print an nxn matrix with its rows filled with consecutive odd numbers starting from 1. **Function Signature** ```python def odd_number_matrix(n: int) -> List[List[int]]: pass ``` # Example **Input** ``` 3 ``` **Output** ``` [ [1, 3, 5], [7, 9, 11], [13, 15, 17] ] ``` **Explanation** - For n = 3, the first 9 odd numbers are: 1, 3, 5, 7, 9, 11, 13, 15, and 17. - These numbers will be filled row-wise to create the 3x3 matrix.","solution":"from typing import List def odd_number_matrix(n: int) -> List[List[int]]: Returns an nxn matrix with rows filled with consecutive odd numbers starting from 1. matrix = [] current_odd = 1 for i in range(n): row = [] for j in range(n): row.append(current_odd) current_odd += 2 matrix.append(row) return matrix"},{"question":"Given an integer array \'nums\', your task is to return the number of reverse pairs in the array. A reverse pair is defined as a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2*nums[j]. Example 1: Input: nums = [1,3,2,3,1] Output: 2 Explanation: The reverse pairs are: (3,2) -> nums[1] > 2*nums[2], where nums[1] = 3 and nums[2] = 2. (3,1) -> nums[1] > 2*nums[4], where nums[1] = 3 and nums[4] = 1. Example 2: Input: nums = [2,4,3,5,1] Output: 3 Explanation: The reverse pairs are: (4,1) -> nums[1] > 2*nums[4], where nums[1] = 4 and nums[4] = 1. (3,1) -> nums[2] > 2*nums[4], where nums[2] = 3 and nums[4] = 1. (4,1) -> nums[3] > 2*nums[4], where nums[3] = 5 and nums[4] = 1. Your Task: You do not need to read input or print anything. Your task is to complete the function \'reversePairs\' that takes an integer array \'nums\' as input and returns the number of reverse pairs in the array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 0 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def reversePairs(nums): Returns the number of reverse pairs in the array \'nums\'. A reverse pair is defined as a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2*nums[j]. if not nums: return 0 def merge_sort_and_count(start, end): if start >= end: return 0 mid = (start + end) // 2 count = merge_sort_and_count(start, mid) + merge_sort_and_count(mid + 1, end) # Count the reverse pairs j = mid + 1 for i in range(start, mid + 1): while j <= end and nums[i] > 2 * nums[j]: j += 1 count += j - (mid + 1) # Merge the two halves temp = [] left, right = start, mid + 1 while left <= mid and right <= end: if nums[left] <= nums[right]: temp.append(nums[left]) left += 1 else: temp.append(nums[right]) right += 1 while left <= mid: temp.append(nums[left]) left += 1 while right <= end: temp.append(nums[right]) right += 1 nums[start:end + 1] = temp return count return merge_sort_and_count(0, len(nums) - 1)"},{"question":"In a small town, there is a popular food delivery service that operates on a tight schedule. Every day, they receive a list of delivery times and the expected delivery duration for each time slot. The delivery service wants to maximize the number of deliveries they can complete within a specific period without any overlap. Since the delivery duration for each time slot can vary, they must carefully choose which deliveries to undertake. Your task is to help the delivery service by writing a program that selects the maximum number of non-overlapping delivery times. Each delivery will have a start time and an end time (`start + duration`), and no two deliveries should overlap. -----Input----- The first line of input contains an integer T representing the number of test cases. Each test case starts with an integer N, the number of delivery time slots. The next N lines each contain two integers `start` and `duration`, indicating the start time and the duration of the delivery. -----Output----- For each test case, output a single integer representing the maximum number of non-overlapping deliveries the service can complete on that day. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 0 ≤ start < 1440 (start time in minutes from 00:00) - 1 ≤ duration ≤ 1440 -----Example----- Input: 2 3 0 10 15 10 30 10 4 0 60 10 15 20 10 35 20 Output: 3 2 Explanation: In the first test case, all deliveries can be accommodated without any overlap. In the second test case, the maximum number of non-overlapping deliveries is 2: (0 to 60) and (35 to 55).","solution":"def max_non_overlapping_deliveries(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] times = test_cases[i][1] deliveries = [(start, start + duration) for start, duration in times] deliveries.sort(key=lambda x: x[1]) max_deliveries = 0 last_end_time = 0 for start, end in deliveries: if start >= last_end_time: max_deliveries += 1 last_end_time = end results.append(max_deliveries) return results"},{"question":"Given a list of positive integers, find the greatest common divisor (GCD) of the entire list. Example 1: Input: arr = [24, 36, 48] Output: 12 Example 2: Input: arr = [5, 10, 15] Output: 5 Your Task: You don\'t need to read or print anything. Your task is to complete the function find_gcd() which takes a list of integers as input and returns their GCD. Expected Time Complexity: O(N * log(M)) where N is the number of elements in the list and M is the maximum element in the list. Expected Space Complexity: O(1) Constraints: 1 <= length of list <= 100 1 <= elements of list <= 10^3","solution":"from math import gcd from functools import reduce def find_gcd(arr): Returns the GCD of a list of positive integers. return reduce(gcd, arr)"},{"question":"Given an array of integers, Little Ashish wants to find the maximum product of any two distinct elements in the array. If the array contains fewer than two elements, the output should be zero. Input: The first line of the input contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of elements in the array, followed by N integers representing the array elements. Output: For each test case, print a single integer, the maximum product of any two distinct elements in the array. Constraints: 1 ≤ T ≤ 100 0 ≤ N ≤ 100 -1000 ≤ Array element ≤ 1000 Note: The arrays can contain negative numbers and zeros. If N is less than 2, the output should be zero. SAMPLE INPUT 3 4 1 10 -5 4 2 -1 0 1 5 SAMPLE OUTPUT 40 0 0","solution":"def max_product(arr): Returns the maximum product of any two distinct elements in the array. n = len(arr) if n < 2: return 0 # Initialize the maximum and second maximum max1 = max2 = float(\'-inf\') # Initialize the minimum and second minimum min1 = min2 = float(\'inf\') for num in arr: # Update two largest values if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update two smallest values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # Maximum product of either two largest or two smallest numbers return max(max1 * max2, min1 * min2) def max_product_of_test_cases(test_cases): results = [] for test_case in test_cases: n = test_case[0] if n < 2: results.append(0) else: arr = test_case[1:] results.append(max_product(arr)) return results"},{"question":"A robot is wandering on an infinite grid. It starts its journey at the origin, (0, 0), and follows a sequence of directions. The directions can be \'N\' (move north by 1 unit), \'S\' (move south by 1 unit), \'E\' (move east by 1 unit), and \'W\' (move west by 1 unit). After some time, the robot might return to its original position or to any other position already visited during its journey. Your task is to determine the shortest length of the sequence that causes such a return. Input: The input consists of a single string, which contains a sequence of directions with length between 1 and 10^5. Output: Output a single integer, the length of the smallest sub-sequence which makes the robot return to a previously visited position. If no such sub-sequence exists, return -1. SAMPLE INPUT NESWEN SAMPLE OUTPUT 4 Explanation: In the sample input, the robot starts at (0,0). After moving \'N\' it is at (0,1), after \'E\' at (1,1), after \'S\' at (1,0), after \'W\' back at (0,0), completing the sequence \\"NESW\\" of length 4, where it returns to the original (0,0) position. Hence, the minimum length of such a sub-sequence is 4.","solution":"def min_length_to_return(directions): position = (0, 0) visited_positions = {position: 0} x, y = 0, 0 for i, direction in enumerate(directions): if direction == \'N\': y += 1 elif direction == \'S\': y -= 1 elif direction == \'E\': x += 1 elif direction == \'W\': x -= 1 current_position = (x, y) if current_position in visited_positions: return i - visited_positions[current_position] + 1 visited_positions[current_position] = i + 1 return -1"},{"question":"Your task is to write a function that takes a string as input and returns a boolean indicating whether the string has balanced brackets. The brackets considered are `()`, `[]`, `{}`, and `<>`. Example: ```python is_balanced(\\"([{}])\\") => True is_balanced(\\"([{})\\") => False is_balanced(\\"{[<>]}\\") => True is_balanced(\\"{[(>)]}\\") => False ``` The string may include characters other than the brackets, which should be ignored when determining if the string is balanced. Example: ```python is_balanced(\\"a(b[c]d){e}f<g>\\") => True is_balanced(\\"a(b[c)d]e{f}g<h>\\") => False ```","solution":"def is_balanced(s): Returns True if the input string \'s\' has balanced brackets. Else, returns False. Only the brackets \'()\', \'[]\', \'{}\', and \'<>\' are considered. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\', \'>\': \'<\'} opening_brackets = set(bracket_map.values()) for char in s: if char in opening_brackets: stack.append(char) elif char in bracket_map: if not stack or stack.pop() != bracket_map[char]: return False return not stack"},{"question":"Given a number N. Your task is to count the number of distinct prime factors of N. Example 1: Input: 28 Output: 2 Explanation: The prime factors of 28 are 2 and 7. Example 2: Input: 60 Output: 3 Explanation: The prime factors of 60 are 2, 3, and 5. Your Task: You do not need to read input or print anything. Your task is to complete the function countDistinctPrimeFactors() which takes N as input parameter and returns the number of distinct prime factors. Expected Time Complexity: O(sqrt(N) * log(log(N))) Expected Auxiliary Space: O(sqrt(N)) Constraints: 1 ≤ N ≤ 10^{12}","solution":"import math def countDistinctPrimeFactors(N): Returns the number of distinct prime factors of N. if N < 2: return 0 distinct_prime_factors = set() # Check for smallest factor 2 while N % 2 == 0: distinct_prime_factors.add(2) N //= 2 # Check for odd factors from 3 onwards for i in range(3, int(math.sqrt(N)) + 1, 2): while N % i == 0: distinct_prime_factors.add(i) N //= i # If N is still greater than 2, it must be a prime factor itself if N > 2: distinct_prime_factors.add(N) return len(distinct_prime_factors)"},{"question":"The Chef is experimenting with a new recipe for arranging his dishes in a line for a grand buffet. However, he realizes that he has one special dish that must always be at the center of the line. With this restriction, he wonders how many different ways he can arrange the rest of his dishes. Write a function that calculates the number of ways to arrange a given number of dishes such that a special dish is always in the middle. ----Input---- - An integer N representing the total number of dishes (N is always an odd number and 1 < N <= 13). ----Output---- - A single integer representing the number of ways to arrange the dishes with the special dish always in the center. ----Example----- Input: 7 Output: 720 **Explanation:** In this example, we have 7 dishes, and one dish will always be at the center. That leaves us with 6 dishes to arrange around the central dish. The number of ways to arrange 6 dishes is given by 6!, which is 720.","solution":"import math def count_arrangements(N): Calculate the number of ways to arrange N dishes with one special dish always in the center. Parameters: N (int): Total number of dishes (N is odd and 1 < N <= 13) Returns: int: Number of arrangements with the special dish always in the center if N <= 1 or N % 2 == 0 or N > 13: raise ValueError(\\"N must be an odd number between 1 and 13 (inclusive).\\") # Remove the special dish in the center, calculate factorial of the remaining dishes return math.factorial(N - 1)"},{"question":"A manufacturing company uses a robotic arm to place boxes on a conveyor belt. These boxes are labeled with unique integer identifiers and have varying sizes. The conveyor belt has a limited capacity, measured by the sum of the sizes of the boxes it can hold at any given time. You are tasked with managing the placement of boxes on the conveyor belt in such a way that the total number of boxes placed on the belt is maximized without exceeding the belt\'s capacity. If a box cannot be placed on the conveyor belt because it would exceed the capacity, it is skipped, and you move to the next box in the list. -----Input----- The first line of input contains two integers, separated by a single space: the maximum capacity of the conveyor belt, 0 < C le 10000, and the number of boxes, 0 le B le 100000. Each of the following B lines contains two integers separated by a single space: the identifier of the box (a unique integer between 0 and 10^6) and the size of the box (a positive integer no greater than C). -----Output----- Output a single integer, the maximum number of boxes that can be placed on the conveyor belt without exceeding its capacity. -----Examples----- Sample Input: 10 4 1 3 2 4 3 2 4 5 Sample Output: 3 Sample Input: 15 5 10 5 11 8 12 6 13 3 14 2 Sample Output: 3","solution":"def max_boxes_on_conveyor(max_capacity, boxes): Given the max capacity of the conveyor belt and a list of boxes with their sizes, return the maximum number of boxes that can be placed on the belt without exceeding the capacity. Parameters: max_capacity (int): Maximum capacity of the conveyor belt boxes (List[Tuple[int, int]]): List of tuples where each tuple contains an identifier and a size Returns: int: Maximum number of boxes that can be placed on the conveyor belt # Sort the boxes by their sizes in ascending order boxes.sort(key=lambda x: x[1]) total_size = 0 total_boxes = 0 for box in boxes: if total_size + box[1] <= max_capacity: total_size += box[1] total_boxes += 1 else: break return total_boxes # Function to parse input and call the max_boxes_on_conveyor function def manage_boxes(): import sys input = sys.stdin.read() data = input.splitlines() max_capacity, num_boxes = map(int, data[0].split()) boxes = [tuple(map(int, line.split())) for line in data[1:]] result = max_boxes_on_conveyor(max_capacity, boxes) print(result)"},{"question":"You are given an array of integers representing the heights of buildings in a street. You need to determine if a specific building has an unobstructed view to the right. A building has an unobstructed view if there are no taller buildings to its right. Write a function that takes the array of building heights and an integer index representing the position of the building we need to check. Return `true` if the building at the given index has an unobstructed view, otherwise return `false`. # Example: `hasUnobstructedView([3, 7, 8, 3, 6, 1], 2)` will return `true` as the building at index 2 (height 8) does not have any taller buildings to its right. `hasUnobstructedView([3, 7, 8, 3, 6, 1], 1)` will return `false` as the building at index 1 (height 7) has a taller building (height 8) to its right. Given the array of non-negative integers (with at least one element) and an index, determine if the building at the specified index has an unobstructed view to the right.","solution":"def hasUnobstructedView(buildings, index): Determine if the building at the given index has an unobstructed view to the right. Args: buildings (list): List of integers representing building heights. index (int): Index of the building to check. Returns: bool: True if the building at the given index has an unobstructed view, False otherwise. height = buildings[index] for i in range(index + 1, len(buildings)): if buildings[i] >= height: return False return True"},{"question":"F: Robot Parade Coordination / Event Planning story Emma is the lead coordinator for a unique robot parade happening in her city. The plan is to have N robots lined up in a row for the parade, and each robot should be assigned a unique position number. However, there is a catch: the robots need to be arranged in such a way that the sum of the positions of two robots must always be different from the sum of the positions of any other two robots. Emma is aware that the positions of the robots when squared should also not overlap. This means if a robot is assigned position i, then i^2 should be unique. Emma needs to ensure that the robots are assigned distinct positions that conform to these rules and wants to know if it is possible to arrange the robots according to these conditions. If it is possible, Emma needs the positions to be assigned quickly and correctly. Let\'s help Emma by writing a code that determines whether it\'s possible to arrange the robots as per the given rules and, if possible, finds such an arrangement. problem Given the number of robots N, determine whether it\'s possible to assign them distinct position numbers such that the sum of the positions of any two robots is unique, and no two robots have positions whose squares are equal. If possible, output one valid arrangement of the positions; otherwise, indicate that it is not possible. Input format The input consists of a single integer N (1 ≤ N ≤ 100,000), representing the number of robots. Output format If it is possible to arrange the robots according to the given constraints, output N unique integers that represent the positions of the robots in non-decreasing order. If it is not possible, output \\"Not possible\\". Example 1: Input 4 Output 1 2 3 4 Example 2: Input 5 Output Not possible Example 3: Input 2 Output 1 2 Note: - For N=4, you can use the positions 1, 2, 3, and 4 since (1+2), (1+3), (1+4), (2+3), (2+4), and (3+4) are all unique sums and 1^2, 2^2, 3^2, 4^2 are unique. - For N=5, it is not possible to place the robots in such a way as per the given constraints. Your task is to determine the arrangement and implement the code to solve this problem.","solution":"def robot_positions(N): Returns a list of N unique position numbers for the robots that satisfy the given conditions. If it is not possible, returns \\"Not possible\\". # A quick observation reveals that N > 2 is not possible if N == 1: return [1] elif N == 2: return [1, 2] else: return \\"Not possible\\""},{"question":"In a programming competition, participants have to compete in multiple rounds, and they earn a certain number of points in each round. You are given the points they scored in each round, and you need to find the maximum points a participant could have scored in a series of consecutive rounds. Example: n = 8 points = [-2, 1, -3, 4, -1, 2, 1, -5, 4] The maximum points scored in consecutive rounds is 6, which can be achieved by summing the points in rounds 4, 5, 6, and 7: (4 + (-1) + 2 + 1 = 6). Function Description: Complete the `maxConsecutivePoints` function in the editor below. `maxConsecutivePoints` has the following parameter(s): - `int n`: the number of rounds - `int points[n]`: an array of integers representing the points scored in each round Returns: - `int`: the maximum points scored in a series of consecutive rounds Input Format: The first line contains an integer, n, the number of rounds. The second line contains n space-separated integers representing the points scored in each round: points[points[0], points[1], ..., points[n-1]]. Constraints: 1 leq n leq 10^5 -10^4 leq points[i] leq 10^4 Sample Input: 8 -2 1 -3 4 -1 2 1 -5 4 Sample Output: 6 Explanation: The maximum points obtained in consecutive rounds are 4 + (-1) + 2 + 1 = 6.","solution":"def maxConsecutivePoints(n, points): Returns the maximum points scored in a series of consecutive rounds. Parameters: n (int): The number of rounds points (list of int): The points scored in each round Returns: int: The maximum points scored in consecutive rounds max_ending_here = points[0] max_so_far = points[0] for i in range(1, n): max_ending_here = max(points[i], max_ending_here + points[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A group of friends are planning a hiking trip. They must carry exactly enough water to last the trip. The water is carried in bottles of varying capacities. Given the different capacities of the water bottles and the required amount of water for the trip, your task is to determine the minimum number of bottles needed to meet or exceed the required amount of water. You need to write a function or program that, given the capacities of the water bottles and the required amount of water, returns the minimum number of bottles needed. If it is not possible to meet the exact water requirement, your program should return -1. Input: - The first line of the input will contain an integer `t` denoting the number of test cases. - For each test case, the first line contains an integer `n` denoting the number of different water bottle types. - The second line contains `n` integers, each representing the capacity of an individual water bottle. - The third line contains an integer `x` denoting the required amount of water for the trip. Output: - For each test case, print a single line containing the minimum number of bottles needed, or -1 if it is not possible to meet the exact requirement using the available bottles. SAMPLE INPUT 2 5 1 2 3 4 5 7 3 2 3 5 11 SAMPLE OUTPUT 2 3 Explanation: In the first test case, the required amount of water is 7. The minimum number of bottles required is two: one bottle of capacity 5 and one bottle of capacity 2 (5 + 2 = 7). In the second test case, the required amount of water is 11. The minimum number of bottles required is three: one bottle of capacity 5, another bottle of capacity 5, and one bottle of capacity 1 (5 + 5 + 1 = 11). Input Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 100 - 1 ≤ capacity ≤ 10000 - 1 ≤ x ≤ 100000","solution":"def min_bottles_needed(t, test_cases): def min_bottles_for_case(capacities, required): dp = [float(\'inf\')] * (required + 1) dp[0] = 0 for cap in capacities: for i in range(cap, required + 1): dp[i] = min(dp[i], dp[i - cap] + 1) return dp[required] if dp[required] != float(\'inf\') else -1 results = [] for case in test_cases: n, capacities, required = case results.append(min_bottles_for_case(capacities, required)) return results def process_input(input_lines): t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) capacities = list(map(int, input_lines[index + 1].split())) required = int(input_lines[index + 2]) test_cases.append((n, capacities, required)) index += 3 return t, test_cases def main(input_lines): t, test_cases = process_input(input_lines) return min_bottles_needed(t, test_cases)"},{"question":"George loves playing with numbers and recently he has stumbled upon an interesting problem. He wants to create a special integer sequence based on a given integer. The sequence is created using the following rules: 1. Start with the given integer, let’s call it `X`. 2. The next number in the sequence is obtained by reversing the digits of the current number and adding it to the current number. 3. Continue generating new numbers in the sequence until a palindrome (a number that reads the same backward as forward) is produced or the number of iterations reaches a given limit. 4. If a palindrome is produced within the given limit, return the palindrome and the number of iterations it took. Otherwise, return `-1`. Input & Output The first line of input contains an integer `T`, the number of test cases. For each test case, there are two integers `X` and `L`. `X` is the starting integer and `L` is the limit on the number of iterations. For each test case, output the resulting palindrome and the number of iterations it took, separated by a space. If no palindrome is found within the given limit, output `-1`. Constraints 1 ≤ T ≤ 100 1 ≤ X ≤ 10000 1 ≤ L ≤ 1000 SAMPLE INPUT 3 56 5 123 3 87 4 SAMPLE OUTPUT 121 1 444 1 -1 Explanation 1) In the first test case, starting with 56: - Reverse of 56 is 65. - Add them to get 121, which is a palindrome. So, the output is \\"121 1\\" since we found the palindrome in 1 iteration. 2) In the second test case, starting with 123: - Reverse of 123 is 321. - Add them to get 444, which is a palindrome. So, the output is \\"444 1\\". 3) In the third test case, starting with 87: - Reverse of 87 is 78. - Add them to get 165. - 165 is not a palindrome. - Reverse of 165 is 561. - Add them to get 726. - 726 is not a palindrome. - Reverse of 726 is 627. - Add them to get 1353. - 1353 is not a palindrome. Since we have reached the limit of 4 iterations without finding a palindrome, the output is `-1`.","solution":"def find_palindrome_sequence(X, L): Finds the resulting palindrome and the number of iterations it took. If no palindrome is found within the given limit, returns -1. def is_palindrome(num): return str(num) == str(num)[::-1] iterations = 0 current_num = X while iterations < L: if is_palindrome(current_num): return current_num, iterations reversed_num = int(str(current_num)[::-1]) current_num += reversed_num iterations += 1 return -1 def process_test_cases(T, test_cases): results = [] for X, L in test_cases: result = find_palindrome_sequence(X, L) if result == -1: results.append(\\"-1\\") else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"You are given n cities connected by m roads. Each road connects exactly two cities and has a certain repair cost. A road is either in good condition (cost 0) or a bad condition (cost > 0). The local government wants to repair some of the bad roads to ensure that all cities are connected by roads in good condition. Find the minimum total repair cost required to make sure all cities are connected. -----Input----- The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 2 cdot 10^5) — the number of cities and the number of roads. The next m lines each contain three integers u, v, and c (1 leq u, v leq n, 0 leq c leq 10^4), indicating that there is a road connecting city u and city v, and c is the cost to repair it (if c=0, the road is already in good condition). It is guaranteed that there\'s at least one way to connect all cities. -----Output----- Print a single integer, the minimum total repair cost required to connect all cities. -----Examples----- Input 4 5 1 2 0 1 3 4 2 3 1 3 4 3 2 4 5 Output 4 Input 5 6 1 2 5 1 3 4 2 3 2 3 4 0 4 5 7 5 1 0 Output 6 -----Note----- In the first example, all cities can be connected by roads (1,2), (2,3) and (3,4) with a total repair cost of 0 + 1 + 3 = 4. In the second example, all cities can be connected by roads (3,4), (5,1), (2,3) and (1,3) with a total repair cost of 0 + 0 + 2 + 4 = 6.","solution":"def min_repair_cost(n, m, roads): Returns the minimum total repair cost required to connect all cities. # Helper function to find the root parent of a node def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to do union of two subsets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sorting the edges by their weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] # Initialize parent and rank for node in range(n + 1): parent.append(node) rank.append(0) result = 0 e = 0 i = 0 # Number of edges to be taken is equal to V-1 while e < n - 1: u, v, w = roads[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result += w union(parent, rank, x, y) return result"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find the maximum length of a contiguous substring in which every letter appears at least k times. Input The first line contains a string s (1 ≤ |s| ≤ 10^5). The second line contains an integer k (1 ≤ k ≤ 26). Output Output the maximum length of the required substring. If no such substring exists, output 0. Examples Input aaabb 3 Output 3 Input ababbc 2 Output 5 Note In the first example, the substring \\"aaa\\" is the longest in which every letter appears at least 3 times. In the second example, the substring \\"ababb\\" is the longest in which every letter appears at least 2 times.","solution":"def max_length_substring(s, k): Finds the maximum length of a contiguous substring in which every letter appears at least k times. Parameters: s (str): Input string consisting of lowercase English letters. k (int): Minimum number of times each letter must appear in the substring. Returns: int: The maximum length of the required substring. from collections import Counter def is_valid(counter, k): Checks if all counts in counter are at least k. Parameters: counter (Counter): A dictionary with character occurrences. k (int): Minimum number of times each letter must appear in the substring. Returns: bool: True if all counts are at least k, False otherwise. for count in counter.values(): if count < k: return False return True n = len(s) max_len = 0 # Try to find substring for each possible distinct letter requirement (1 to 26) for target_unique in range(1, 27): counter = Counter() start = 0 unique = 0 for end in range(n): if counter[s[end]] == 0: unique += 1 counter[s[end]] += 1 while unique > target_unique: if counter[s[start]] == 1: unique -= 1 counter[s[start]] -= 1 start += 1 if unique == target_unique and is_valid(counter, k): max_len = max(max_len, end - start + 1) return max_len"},{"question":"A company wants to optimize the energy consumption in their office building. The building has M floors, and each floor has N rooms. Each room can have its heating turned on or off, and each room has an energy consumption rate associated when the heating is on. The company wants to find the maximum energy consumption across any contiguous segment of rooms on any single floor. Write a function that, given the energy consumption rates of rooms on each floor, returns the maximum energy consumption of any contiguous segment of rooms on any floor. ------ Input Format ------ - The first line of input contains two integers M and N — the number of floors and the number of rooms on each floor. - The next M lines each contain N integers, where the j-th integer on the i-th line represents the energy consumption rate of the j-th room on the i-th floor when the heating is turned on. ------ Output Format ------ Output a single integer — the maximum energy consumption of any contiguous segment of rooms on any floor. ------ Constraints ------ 1 ≤ M ≤ 50 1 ≤ N ≤ 1000 -100 ≤ text{Consumption Rate} ≤ 100 ----- Sample Input 1 ------ 2 5 -2 1 -3 4 -1 3 -2 5 -3 1 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ The possible contiguous segments on floor 1 are: - (1): [-2] - (1, 2): [-2, 1] - (1, 2, 3): [-2, 1, -3] - (1, 2, 3, 4): [-2, 1, -3, 4] - (1, 2, 3, 4, 5): [-2, 1, -3, 4, -1] - (2): [1] - (2, 3): [1, -3] - (2, 3, 4): [1, -3, 4] - (2, 3, 4, 5): [1, -3, 4, -1] - (3): [-3] - (3, 4): [-3, 4] - (3, 4, 5): [-3, 4, -1] - (4): [4] - (4, 5): [4, -1] - (5): [-1] From these segments, the maximum sum is 4. For floor 2: - (1): [3] - (1, 2): [3, -2] - (1, 2, 3): [3, -2, 5] - (1, 2, 3, 4): [3, -2, 5, -3] - (1, 2, 3, 4, 5): [3, -2, 5, -3, 1] - (2): [-2] - (2, 3): [-2, 5] - (2, 3, 4): [-2, 5, -3] - (2, 3, 4, 5): [-2, 5, -3, 1] - (3): [5] - (3, 4): [5, -3] - (3, 4, 5): [5, -3, 1] - (4): [-3] - (4, 5): [-3, 1] - (5): [1] From these segments, the maximum sum is 6. Hence, the output is 6, the highest among all floors.","solution":"def max_energy_consumption(M, N, floors): Given the energy consumption rates of rooms on each floor, returns the maximum energy consumption of any contiguous segment of rooms on any floor. def max_subarray_sum(arr): Helper function to compute the maximum subarray sum using Kadane\'s algorithm. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_energy = float(\'-inf\') for floor in floors: max_energy = max(max_energy, max_subarray_sum(floor)) return max_energy"},{"question":"Daria is responsible for maintaining a server that logs recent user activities. She wants to minimize the data storage by merging consecutive logs that have the same type of activity and share the same user identifier. The logs are represented as an array of tuples where each tuple contains two integers: the user identifier and the activity type. To help Daria, you need to write a program that takes an array of these tuples and returns a minimized list of logs. Consecutive logs by the same user with the same activity type should be merged into a single log. Input The first line contains n (1 ≤ n ≤ 100,000) — the number of log entries. Each of the next n lines contains two space-separated integers, the user identifier and the activity type. Output Print the minimized list of log entries, each on a new line, consisting of the user identifier and the activity type. Example Input 6 1 2 1 2 2 1 2 1 2 1 1 3 Output 1 2 2 1 1 3 Input 4 3 4 3 4 4 3 3 4 Output 3 4 4 3 3 4 Note In the first example, the first two logs are by the same user with the same activity type and should be merged. The next three logs are also by the same user with the same activity type and should be merged as one log. The last log remains unchanged. In the second example, the consecutive logs either differ in activity type or user identifier, so none of the logs can be merged.","solution":"def minimize_logs(n, logs): Minimizes the list of logs by merging consecutive logs of the same user with the same activity. Parameters: n (int): Number of log entries. logs (list of tuples): List of logs, where each log is represented as a tuple (user_id, activity_type). Returns: List of tuples: Minimized list of logs. if n == 0: return [] result = [] current_log = logs[0] for i in range(1, n): if logs[i] != current_log: result.append(current_log) current_log = logs[i] result.append(current_log) return result"},{"question":"A game company has released a new puzzle game with n unique levels. Each level has a certain difficulty rating. To encourage strategic planning, the game allows players to exchange scores between non-consecutive levels. The rules are as follows: 1. You can choose any two non-consecutive levels i and j (1 ≤ i, j ≤ n, |i - j| > 1). 2. You exchange the scores achieved on these two levels. 3. A player’s final score is the sum of the new difficulty ratings after all possible valid exchanges. Given n levels with their initial difficulty ratings, calculate the maximum possible final score a player can achieve after any number of valid exchanges. Input The first line contains a single integer n (2 ≤ n ≤ 3000) - the number of levels in the game. The second line contains n space-separated integers representing the initial difficulty ratings of the levels (1 ≤ difficulty rating ≤ 105). Output A single integer, the maximum possible final score after valid exchanges. Examples Input 5 10 20 30 40 50 Output 150 Input 3 100 10 1 Output 111 Note For the first sample, no exchanges are needed as the initial order is already optimal. For the second sample, swapping the first and third levels (100 and 1, respectively) results in the optimal arrangement: 1, 10, 100, giving the highest possible sum.","solution":"def maximum_final_score(n, difficulties): Calculates the maximum possible final score after any number of valid exchanges. if n <= 2: return sum(difficulties) # Using a simple greedy approach, the maximum score is the sum of all levels # Sorting is not necessary just summing all elements in difficulties array return sum(difficulties)"},{"question":"Write a program to check whether a given string is a valid palindrome ignoring spaces, punctuation, and case sensitivity. Example 1: Input: s = \\"A man, a plan, a canal, Panama\\" Output: True Explanation: After removing spaces, punctuation, and converting to the same case, the string \\"amanaplanacanalpanama\\" is a palindrome. Example 2: Input: s = \\"hello\\" Output: False Explanation: The string \\"hello\\" is not a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPalindrome() which takes a String s as input and returns a Boolean value denoting whether the string is a palindrome. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 0 <= len(s) <= 10^5","solution":"import re def isPalindrome(s: str) -> bool: Checks if the given string is a palindrome, ignoring spaces, punctuation, and case sensitivity. :param s: Input string to check. :return: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is the same forwards and backwards return cleaned_string == cleaned_string[::-1]"},{"question":"Sammy is organizing a school fair and needs help with arranging the games. He has a list of games with their respective time durations in minutes. Sammy wants to create as many non-overlapping gaming sessions as possible such that each session includes a game whose duration is at least half an hour long. Help Sammy by writing a program that determines the maximum number of such gaming sessions he can organize in a day. Each game can only be used in one session. -----Input:----- - The first line contains an integer T, the number of test cases. Each test case follows. - The first line of each test case contains an integer N, the number of games. - The next line contains N integers, representing the durations of the games in minutes. -----Output:----- For each test case, print the maximum number of non-overlapping gaming sessions Sammy can create. Each session must have a game that lasts at least 30 minutes. -----Constraints:----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ duration ≤ 120 -----Sample Input:----- 2 5 45 20 30 15 60 4 10 25 35 50 -----Sample Output:----- 3 2","solution":"def max_non_overlapping_sessions(test_cases): results = [] for case in test_cases: N, durations = case durations.sort() count = 0 for duration in durations: if duration >= 30: count += 1 results.append(count) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) durations = list(map(int, input_lines[index + 1].split())) test_cases.append((N, durations)) index += 2 return test_cases"},{"question":"Emma has a string S consisting of only the characters \'X\' and \'Y\'. She wants to make all characters in the string the same. In one operation, she can either: 1. Replace one occurrence of \'X\' with \'Y\' 2. Replace one occurrence of \'Y\' with \'X\' Calculate the minimum number of operations required to make all characters in the string the same. Input: A string S Output: An integer representing the minimum number of operations required Example: Input: S = \\"XXXY\\" Output: 1 Explanation: Emma can replace the last character \'Y\' with \'X\' to make the string \\"XXXX\\". Example 2: Input: S = \\"YXXXYXY\\" Output: 3 Explanation: Emma can replace the first and last \'Y\' with \'X\', and one of the middle \'Y\' with \'X\' to make the string \\"XXXXXXX\\". Your Task: You don\'t need to read input or print anything. Your task is to implement the function minimumOperations(S) which takes the string S as input and returns the minimum number of operations required. Constraints: 1 ≤ len(S) ≤ 10^5","solution":"def minimum_operations(S): Returns the minimum number of operations required to make all characters in the string the same. :param S: A string containing only \'X\' and \'Y\'. :return: Minimum number of operations. count_X = S.count(\'X\') count_Y = S.count(\'Y\') # The minimum number of operations would be converting all X\'s to Y\'s or all Y\'s to X\'s, # whichever is smaller return min(count_X, count_Y)"},{"question":"Given an array of integers, you need to find and return whether it is possible to partition the array into two subarrays (non-empty) such that the sum of the elements in the two subarrays is the same. Example 1: Input: arr = [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11], which have the same sum as 11. Example 2: Input: arr = [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into two subarrays with the same sum. Your Task: You don\'t need to read or print anything. Your task is to complete the function can_partition() which takes the array arr as an input parameter and returns a boolean value indicating whether the array can be partitioned into two subarrays with equal sum. Expected Time Complexity: O(n * sum(arr)) Expected Space Complexity: O(n * sum(arr)) Constraints: 1 <= length of arr <= 200 1 <= arr[i] <= 100","solution":"def can_partition(arr): total = sum(arr) if total % 2 != 0: return False target = total // 2 n = len(arr) dp = [False] * (target + 1) dp[0] = True for num in arr: for t in range(target, num - 1, -1): dp[t] = dp[t] or dp[t - num] return dp[target]"},{"question":"You are given a number `n`. The task is to find the sum of all unique prime factors of all numbers from 1 to `n` (inclusive). For example: ```Python prime_factors_sum(10) = 17 # Explanation: # Prime factors of numbers from 1 to 10: # 1: [] # 2: [2] # 3: [3] # 4: [2] # 5: [5] # 6: [2, 3] # 7: [7] # 8: [2] # 9: [3] # 10: [2, 5] # Unique prime factors: [2, 3, 5, 7] # Sum of unique prime factors: 2 + 3 + 5 + 7 = 17 prime_factors_sum(15) = 29 # Explanation: # Prime factors of numbers from 1 to 15: # 1: [] # 2: [2] # 3: [3] # 4: [2] # 5: [5] # 6: [2, 3] # 7: [7] # 8: [2] # 9: [3] # 10: [2, 5] # 11: [11] # 12: [2, 3] # 13: [13] # 14: [2, 7] # 15: [3, 5] # Unique prime factors: [2, 3, 5, 7, 11, 13] # Sum of unique prime factors: 2 + 3 + 5 + 7 + 11 + 13 = 41 ``` Write a function: ```Python def prime_factors_sum(n: int) -> int: pass ``` **Test Cases:** ```Python assert prime_factors_sum(10) == 17 assert prime_factors_sum(15) == 41 assert prime_factors_sum(1) == 0 assert prime_factors_sum(20) == 41 ```","solution":"def prime_factors_sum(n: int) -> int: def sieve_eratosthenes(limit): is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if is_prime[p] == True: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, limit + 1) if is_prime[p]] return primes primes = sieve_eratosthenes(n) return sum(primes)"},{"question":"Given an integer n, find the smallest palindrome larger than n. A palindrome is a number that reads the same backward as forward (e.g., 121 or 12321). Input Format A single integer n. Constraints 1 leq n leq 10^{12} Output Format Print the smallest palindrome larger than n. Sample Input 0 123 Sample Output 0 131 Explanation 0 The smallest palindrome larger than 123 is 131. Sample Input 1 999 Sample Output 1 1001 Explanation 1 The smallest palindrome larger than 999 is 1001.","solution":"def is_palindrome(number): Helper function to check if a number is a palindrome. return str(number) == str(number)[::-1] def next_palindrome(n): Function to find the smallest palindrome larger than n. n += 1 while not is_palindrome(n): n += 1 return n # Example usage: # print(next_palindrome(123)) # Should return 131 # print(next_palindrome(999)) # Should return 1001"},{"question":"Given a non-empty list of integers, write a function that returns the maximum difference between any two elements such that the larger element comes after the smaller element. If no such element exists, return -1. # Function Signature ```python def max_diff(lst: List[int]) -> int: pass ``` # Input * lst: A list of integers, with a length of at least 1. # Output * Returns the maximum difference between any two elements such that the larger element comes after the smaller element, or -1 if no such element exists. # Examples ```python max_diff([2, 3, 10, 6, 4, 8, 1]) # returns 8 (10 - 2) max_diff([7, 9, 5, 6, 3, 2]) # returns 2 (9 - 7) max_diff([1, 2, 90, 10, 110]) # returns 109 (110 - 1) max_diff([5, 4, 3, 2, 1]) # returns -1 (No element exists where larger element comes after the smaller element) ```","solution":"def max_diff(lst): Returns the maximum difference between any two elements such that the larger element comes after the smaller element. If no such elements exist, returns -1. if len(lst) < 2: return -1 min_element = lst[0] max_difference = -1 for i in range(1, len(lst)): if lst[i] > min_element: max_difference = max(max_difference, lst[i] - min_element) min_element = min(min_element, lst[i]) return max_difference"},{"question":"Heidi loves painting and has a long banner which she wants to color. The banner is represented by a one-dimensional array of length n, where initially each cell is white. Heidi applies a number of paint operations which color specific segments of the banner. Each operation can either paint a segment a specific color or query the number of segments of the banner that remain white. Write a program that processes the paint operations efficiently. Input The first line of the input contains two integers, n and q (1 ≤ n ≤ 106, 1 ≤ q ≤ 105), representing the length of the banner and the number of operations, respectively. Each of the next q lines contains one of the following operations: 1. \\"P a b c\\" (1 ≤ a ≤ b ≤ n, 1 ≤ c ≤ 109): This command means painting the segment from index a to index b (inclusive) with the color c. 2. \\"Q\\": This command means querying the number of segments that are still white. Output For each \\"Q\\" operation, output a single integer indicating the number of segments of the banner that remain white. Examples Input 10 5 P 1 5 3 Q P 6 10 4 Q P 2 8 5 Output 5 0 Note After the first paint operation, the banner looks as: [3, 3, 3, 3, 3, 0, 0, 0, 0, 0] The first query returns 5 since 5 segments are still white. After the second paint operation, the banner looks as: [3, 3, 3, 3, 3, 4, 4, 4, 4, 4] The second query returns 0 because no segments are white anymore. The third paint operation paints a segment that overlaps with already painted segments, but this doesn\'t affect the queries.","solution":"def process_operations(n, operations): Processes painting and querying operations on a banner. :param n: Length of the banner :param operations: List of operations to be performed on the banner :return: List of results for each \\"Q\\" operation banner = [0] * n white_segments = n results = [] for operation in operations: if operation[0] == \'P\': _, a, b, c = operation a -= 1 # to adjust to 0-based index b -= 1 # to adjust to 0-based index for i in range(a, b+1): if banner[i] == 0: banner[i] = c white_segments -= 1 elif operation[0] == \'Q\': results.append(white_segments) return results"},{"question":"Given an array of n integers, count the number of unique pairs (i, j) where 0 <= i < j < n, such that the sum of the elements at indices i and j is divisible by k. Since the answer can be large, return it modulo 10^{9}+7. Example 1: Input: arr = [2, 3, 7, 1, 5], k = 4 Output: 4 Explanation: Valid pairs are (0, 1), (0, 4), (1, 2), and (2, 3). Example 2: Input: arr = [1, 2, 3, 4, 5], k = 3 Output: 4 Explanation: Valid pairs are (0, 2), (1, 5), (2, 4), and (3, 5). Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDivisiblePairs() which accepts an integer array arr of size n and an integer k, and returns the number of pairs that satisfy the given condition. Expected Time Complexity: O(n). Expected Auxiliary Space: O(k). Constraints: 1 <= n <= 10^{5} 1 <= arr[i] <= 10^{9} 1 <= k <= 10^{3}","solution":"def countDivisiblePairs(arr, k): Returns the number of unique pairs (i, j) where 0 <= i < j < n such that the sum of the elements at indices i and j is divisible by k. mod = 10**9 + 7 # Array to store frequencies of modulo results freq = [0] * k # Counting frequencies of modulo values for num in arr: freq[num % k] += 1 # Initialize count of pairs count = 0 # Count pairs where (i + j) % k == 0 # Case 1: both numbers have remainder 0 count += (freq[0] * (freq[0] - 1)) // 2 # Case 2: remainders add up to k (excluding remainder 0) for i in range(1, (k // 2) + 1): if i != k - i: count += freq[i] * freq[k - i] else: # If k is even and we are at the middle element count += (freq[i] * (freq[i] - 1)) // 2 return count % mod"},{"question":"You are given a string s consisting of lowercase alphabets and an integer k. You need to determine whether you can make the string a palindrome by removing at most k characters. -----Input----- The first line contains an integer k (0 ≤ k ≤ 1000). The second line contains a non-empty string s of length up to 1000. -----Output----- On the first line print \\"YES\\" if you can make the string a palindrome by removing at most k characters. Otherwise, print \\"NO\\". -----Examples----- Input 1 abbca Output YES Input 2 abcdecba Output YES Input 1 abcdef Output NO","solution":"def can_be_palindrome_with_k_removals(k, s): Determines whether the string s can be made a palindrome by removing at most k characters. :param k: Maximum number of characters to remove. :param s: The input string. :return: \'YES\' if the string can be made a palindrome by removing at most k characters, otherwise \'NO\'. def is_palindrome(s, l, r): Helper function to check whether a substring s[l:r+1] is a palindrome. while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True def helper(s, l, r, k): Recursively try to match characters and use at most k removals to make the substring s[l:r+1] a palindrome. if k < 0: return False if l >= r: return True if s[l] == s[r]: return helper(s, l + 1, r - 1, k) else: return helper(s, l + 1, r, k - 1) or helper(s, l, r - 1, k - 1) return \\"YES\\" if helper(s, 0, len(s) - 1, k) else \\"NO\\""},{"question":"Create a program that takes a list of integers and returns a new list where each element is the sum of itself and all the previous elements in the original list. If the input is not a list of integers, return \\"Invalid input\\". For example, the input `[1, 2, 3, 4]` should return `[1, 3, 6, 10]`. If the input is not valid, such as a string or a mixed list like `[1, \'2\', 3.5]`, the program should return \\"Invalid input\\".","solution":"def cumulative_sum(lst): Takes a list of integers and returns a new list where each element is the sum of itself and all the previous elements in the original list. If the input is not a list of integers, returns \\"Invalid input\\". if not all(isinstance(i, int) for i in lst): return \\"Invalid input\\" result = [] total = 0 for num in lst: total += num result.append(total) return result"},{"question":"Alice has a directed acyclic graph (DAG) mathbf{G} consisting of n vertices and m edges, where each vertex is uniquely labeled from 1 to n. She wants to count the number of distinct paths from vertex u to vertex v for q different pairs of vertices. Given mathbf{G} and textit{q} query pairs, each consisting of vertices boldsymbol{u} and boldsymbol{v}, count the distinct paths from u to v for each query pair. If there is no path from u to v, the count should be 0. Example edges = [[1,2],[2,3],[1,3],[3,4]] queries = [(1,3),(2,4),(1,4),(4,1)] The graph looks like this: 1 -> 2 -> 3 -> 4 -> 3 Each pair\'s calculation will count the number of unique paths between the vertices: For u = 1 and v = 3, there are two distinct paths: 1 to 3 and 1 to 2 to 3. For u = 2 and v = 4, there is one distinct path: 2 to 3 to 4. For u = 1 and v = 4, there are two distinct paths: 1 to 2 to 3 to 4 and 1 to 3 to 4. For u = 4 and v = 1, there are no paths. Input Format The first line contains two space-separated integers, the respective values of n (the number of vertices in mathbf{G}) and m (the number of edges in mathbf{G}). Each of the m subsequent lines contains two space-separated integers, boldsymbol{a} and boldsymbol{b}, that describe a directed edge from vertex a to vertex b. The next line contains a single integer q (the number of query pairs). Each of the q subsequent lines contains two space-separated integers, boldsymbol{u} and boldsymbol{v}, for which the number of distinct paths is to be calculated. Constraints 1 leq n leq 10^5 1 leq m leq 2 cdot 10^5 1 leq a, b, u, v leq n 1 leq q leq 10^5 Output Format Print q lines of output where each line i contains the number of distinct paths for the i^{text{th}} query pair. Sample Input 0 4 4 1 2 2 3 1 3 3 4 4 1 3 2 4 1 4 4 1 Sample Output 0 2 1 2 0 Explanation 0 Graph mathbf{G} looks like this: 1 -> 2 -> 3 -> 4 -> 3 Each pair\'s calculation: For u = 1 and v = 3, there are two distinct paths: 1 to 3 and 1 to 2 to 3. For u = 2 and v = 4, there is one distinct path: 2 to 3 to 4. For u = 1 and v = 4, there are two distinct paths: 1 to 2 to 3 to 4 and 1 to 3 to 4. For u = 4 and v = 1, there are no paths.","solution":"from collections import defaultdict, deque def count_paths(n, m, edges, queries): # Build the graph and initialize indegree array graph = defaultdict(list) indeg = [0] * (n + 1) for a, b in edges: graph[a].append(b) indeg[b] += 1 # Topological sorting using Kahn\'s algorithm topo_sort = [] q = deque([i for i in range(1, n + 1) if indeg[i] == 0]) while q: node = q.popleft() topo_sort.append(node) for neighbor in graph[node]: indeg[neighbor] -= 1 if indeg[neighbor] == 0: q.append(neighbor) # DP array to store number of distinct paths dp = [[0] * (n + 1) for _ in range(n + 1)] # There is exactly one path from each vertex to itself for i in range(1, n + 1): dp[i][i] = 1 # Process nodes in topological order for u in topo_sort: for v in graph[u]: for i in range(1, n + 1): dp[i][v] += dp[i][u] result = [] for u, v in queries: result.append(dp[u][v]) return result"},{"question":"You\'ve been asked to help develop the logic for a basic Store Inventory System. Inventory Management Specifications: - Each item in the inventory is represented as a dictionary with two keys: `\'name\'` (a string) and `\'quantity\'` (an integer). - Inventory is a list of such item dictionaries. - Write a function to perform the following operations: - `add_item(inventory, name, quantity)` – Adds a specified quantity of an item to the inventory. If the item already exists, just increase its quantity. - `remove_item(inventory, name, quantity)` – Removes a specified quantity of an item from the inventory. If the quantity to remove exceeds the current quantity, remove the item completely. If the item does not exist, simply do nothing. - `total_items(inventory)` – Returns the total number of all items in the inventory. If the inventory is empty, the total number of items should be 0. Examples: ```python # Example 1: inventory = [] add_item(inventory, \\"apple\\", 5) add_item(inventory, \\"banana\\", 2) remove_item(inventory, \\"banana\\", 1) total_items(inventory) # should return 6 # Example 2: inventory = [{\\"name\\": \\"apple\\", \\"quantity\\": 5}, {\\"name\\": \\"banana\\", \\"quantity\\": 3}] remove_item(inventory, \\"banana\\", 3) total_items(inventory) # should return 5 # Example 3: inventory = [{\\"name\\": \\"orange\\", \\"quantity\\": 1}] remove_item(inventory, \\"orange\\", 2) total_items(inventory) # should return 0 add_item(inventory, \\"mango\\", 7) total_items(inventory) # should return 7 ```","solution":"def add_item(inventory, name, quantity): Adds a specified quantity of an item to the inventory. If the item already exists, increase its quantity. for item in inventory: if item[\'name\'] == name: item[\'quantity\'] += quantity break else: inventory.append({\'name\': name, \'quantity\': quantity}) def remove_item(inventory, name, quantity): Removes a specified quantity of an item from the inventory. If the quantity to remove exceeds the current quantity, remove the item completely. If the item does not exist, do nothing. for item in inventory: if item[\'name\'] == name: if item[\'quantity\'] <= quantity: inventory.remove(item) else: item[\'quantity\'] -= quantity break def total_items(inventory): Returns the total number of all items in the inventory. return sum(item[\'quantity\'] for item in inventory)"},{"question":"A company wants to analyze the performance of their sales team. They specifically want to identify the best-performing salesperson each month. For this, they\'re interested in a simplified representation of the data collected. Each month the company collects the total sales made by each salesperson and stores them as a sequence of non-negative integers. Your task is to determine the highest sales value for each month. -----Input----- Input begins with a line containing an integer T (1 le T le 12), the number of months for which data is available. The next T lines each describe the sales data for one month. Each of these lines begins with an integer N (1 le N le 100), the number of salespeople, followed by N non-negative integers representing the sales made by each salesperson. -----Output----- For each month, output the highest sales value. -----Examples----- Sample Input: 3 4 500 600 700 650 3 1200 300 450 5 200 550 750 800 700 Sample Output: 700 1200 800","solution":"def highest_sales(T, monthly_sales): Returns the highest sales value for each month. Parameters: T - the number of months (int) monthly_sales - list of lists, where each inner list contains the sales data for one month (list of int) Returns: List of highest sales value for each month (list of int) highest_sales_values = [] for sales in monthly_sales: N = sales[0] sales_data = sales[1:] highest_sales_values.append(max(sales_data)) return highest_sales_values"},{"question":"You are given an array of integers where each element represents the height of a vertical line drawn at position `i`. Imagine the lines form the edges of a histogram. Your task is to find the largest rectangular area that can be formed within the histogram. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^5), representing the number of lines in the histogram. The second line contains `n` space-separated integers h_1, h_2, ..., h_n (0 ≤ h_{i} ≤ 10^6), representing the heights of the lines in the histogram. -----Output----- Print a single integer representing the largest rectangular area that can be formed within the histogram. -----Examples----- Input 7 2 1 5 6 2 3 1 Output 10 -----Note----- In the first sample, the largest rectangle can be formed by taking the heights 5 and 6, spanning from index 2 to index 3, thus 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): Finds the largest rectangular area that can be formed within the histogram. :param heights: List of non-negative integers representing heights of bars in the histogram :return: Integer representing the largest rectangular area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Alice is learning how to manipulate strings and wants to practice reversing words in a sentence. Given a string that represents a sentence, help her by writing a function that reverses the order of words. Note that a word is defined as a sequence of non-space characters, and the words in the sentence will be separated by single spaces. Any leading or trailing spaces should be removed and all extra spaces between words should be reduced to a single space in the output. Input The input contains a single line which is a string S, representing the sentence that needs to be reversed. Output Print the reversed sentence, ensuring there are no leading, trailing, or extra spaces between words. Constraints 1 ≤ |S| ≤ 10^5 SAMPLE INPUT \\"The sky is blue\\" SAMPLE OUTPUT \\"blue is sky The\\" Explanation The input sentence is reversed to \\"blue is sky The\\" with all extra spaces managed appropriately.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Removes leading, trailing, and extra spaces between words. :param sentence: str, the input sentence to reverse :return: str, the sentence with the order of words reversed # Split the sentence into words words = sentence.split() # Reverse the order of words reversed_words = words[::-1] # Join the words back into a sentence reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n. You can perform at most one operation of your choice: either add 1 to a single element of the array, or subtract 1 from a single element of the array. Your task is to determine the minimum possible value of the difference between the maximum and minimum elements in the array after performing the operation. -----Input----- The first line contains one integer n (2 le n le 2 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the minimum possible value of the difference between the maximum and minimum elements in the array after performing at most one operation. -----Examples----- Input 3 1 3 6 Output 4 Input 5 10 10 10 10 10 Output 0 -----Note----- In the first example, you can either increase 1 to get the array [1, 4, 6] or decrease 6 to get the array [1, 3, 5]. Among all the choices, you will get the smallest difference of 4. In the second example, all elements are equal, so the difference is already 0 and no further operation is needed.","solution":"def min_diff_after_one_operation(n, arr): Given an array of n integers, determines the minimum possible value of the difference between the maximum and minimum elements after performing at most one operation (adding or subtracting 1 from a single element). if n == 1: return 0 max_val = max(arr) min_val = min(arr) # Initial difference with no operations initial_difference = max_val - min_val # Consider cases: # 1. Adding 1 to the min element # 2. Subtracting 1 from the max element new_difference_case1 = max(max_val, min_val + 1) - min(min_val + 1, max_val) new_difference_case2 = max(max_val - 1, min_val) - min(min_val, max_val - 1) return min(initial_difference, new_difference_case1, new_difference_case2)"},{"question":"Given an integer array arr of size n, you need to find the maximum element in arr. Example 1: Input: n = 3 arr[] = {3, 2, 1} Output: 3 Example 2: Input: n = 4 arr[] = {1, 2, 3, 4} Output: 4 Your Task: You need to complete the function findMax() that takes arr and n and returns the maximum element. The printing is done by the driver code. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^{3} 1 <= arr_{i} <= 10^{4}","solution":"def findMax(arr, n): Returns the maximum element in the array. Parameters: arr (list): List of integers. n (int): Size of the list. Returns: int: Maximum element in the list. if n == 0: raise ValueError(\\"Array is empty\\") max_element = arr[0] for i in range(1, n): if arr[i] > max_element: max_element = arr[i] return max_element"},{"question":"Design a function that computes the depth of each node in a binary tree, starting from the root node at depth 0. The result should be a mapping of node values to their respective depths. # Input: - The function will receive a `TreeNode` object representing the root of the binary tree. Each `TreeNode` has three attributes: - `val`: an integer representing the value of the node. - `left`: a `TreeNode` representing the left child. - `right`: a `TreeNode` representing the right child. # Output: - Return a dictionary where the keys are the node values and the values are the depths of the corresponding nodes. # Constraints: - The number of nodes in the tree is between 1 and 10^4. - The value of each node is a unique integer within the range of 1 to 10^5. # Example: ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def node_depths(root): # your code goes here # Sample input root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) # Output # {1: 0, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2} print(node_depths(root)) ``` # Explanation: In this example, the depth of the root node (1) is 0. The depth of nodes 2 and 3 is 1 because they are one edge away from the root. Nodes 4, 5, and 6 have a depth of 2 because they are two edges away from the root. Therefore, the function should return the dictionary `{1: 0, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2}`.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def node_depths(root): def dfs(node, depth, result): if node: result[node.val] = depth dfs(node.left, depth + 1, result) dfs(node.right, depth + 1, result) return result return dfs(root, 0, {})"},{"question":"Given an array of integers, write a function that returns the smallest missing positive integer. The function should have optimal time and space complexity. ```python find_missing_positive([1, 2, 0]) == 3 find_missing_positive([3, 4, -1, 1]) == 2 find_missing_positive([7, 8, 9, 11, 12]) == 1 ``` The array can contain duplicates and negative numbers, hence the smallest missing positive integer is the smallest positive integer that does not appear in the array. The function should handle large arrays efficiently.","solution":"def find_missing_positive(nums): Returns the smallest missing positive integer from the array. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given an array of integers and your task is to determine if any integer appears at least three times in a row. If such an integer exists, return the first integer that satisfies this condition. If no integer appears three times consecutively, return -1. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines of input: - The first line contains a single integer N, the number of integers in the array. - The second line contains N integers separated by spaces, representing the elements of the array. ------ Output Format ------ For each test case, if an integer appears at least three times in a row, return that integer. Otherwise, return -1. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ text{Array elements} ≤ 1000 ------ Sample Input 1 ------ 3 7 1 2 2 2 3 4 4 6 6 6 7 8 6 6 5 5 5 5 5 5 ------ Sample Output 1 ------ 2 -1 5 ------ Explanation 1 ------ Test case 1: The number 2 appears three times consecutively in the array. Test case 2: No number appears three times consecutively in the array. Test case 3: The number 5 appears five times consecutively in the array.","solution":"def first_triple_repetition(T, test_cases): For each test case, determine if any integer appears at least three times in a row. If such an integer exists, return the first integer that satisfies this condition. If no integer appears three times consecutively, return -1. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains N (int) and list of N integers. Returns: list: A list of integers representing the result for each test case. results = [] for case in test_cases: N, array = case for i in range(N - 2): if array[i] == array[i + 1] and array[i] == array[i + 2]: results.append(array[i]) break else: # this else corresponds to the \\"for\\" loop, not the \\"if\\" results.append(-1) return results"},{"question":"Alice has a collection of N ropes with varying lengths. She wants to cut the ropes in such a way that they all have the same length and the waste (leftover part after cutting) is minimized. Your task is to help Alice find the maximum possible length L that she can cut each rope into, so that all ropes are of the same length L and the leftover part from each rope is minimized. -----Input----- The first line contains a single integer N, the number of ropes. The second line contains N integers, each representing the length of each rope. -----Output----- Print a single integer, the maximum possible length L that Alice can cut each rope into. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ Length of each rope ≤ 10^6 -----Example----- Input: 4 9 7 5 12 Output: 3 Input: 3 8 3 6 Output: 3 -----Explanation----- For the first example, Alice can cut the ropes into lengths of 3: - Rope 1: 9 -> 3 + 3 + 3 (no waste) - Rope 2: 7 -> 3 + 3 (1 unit waste) - Rope 3: 5 -> 3 (2 units waste) - Rope 4: 12 -> 3 + 3 + 3 + 3 (no waste) The total length left is minimized and the maximum possible uniform length is 3. For the second example, Alice can cut the ropes into lengths of 3: - Rope 1: 8 -> 3 + 3 (2 units waste) - Rope 2: 3 -> 3 (no waste) - Rope 3: 6 -> 3 + 3 (no waste) Hence, the maximum length output is 3.","solution":"from math import gcd from functools import reduce def max_length_of_cut(N, lengths): Returns the maximum possible length L that Alice can cut each rope into such that all ropes are of the same length L and the waste is minimized. def gcd_of_list(nums): return reduce(gcd, nums) return gcd_of_list(lengths)"},{"question":"You are given an integer array nums sorted in non-decreasing order. Build a new balanced binary search tree (BST) whose preorder traversal yields the same result as the given array. A balanced BST is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Return the root of the new BST. Example: Input: nums = [-10, -3, 0, 5, 9] Output: Preorder traversal of the resulting BST: [0, -3, -10, 5, 9] Your Task: You don\'t need to read input or print anything. Implement the function `sortedArrayToBST(nums: List[int]) -> Optional[TreeNode]` which takes a sorted array as input and returns the root of the balanced BST. **Note:** - The preorder traversal of a tree is defined as visiting the root node first, then recursively visiting the left subtree, and finally visiting the right subtree. - The TreeNode is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Constraints:** - 1 ≤ nums.length ≤ 10^4 - -10^4 ≤ nums[i] ≤ 10^4 - nums is sorted in a strictly increasing order","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedArrayToBST(nums: List[int]) -> Optional[TreeNode]: if not nums: return None def convertToBST(left: int, right: int) -> Optional[TreeNode]: if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = convertToBST(left, mid - 1) node.right = convertToBST(mid + 1, right) return node return convertToBST(0, len(nums) - 1) def preorderTraversal(root: Optional[TreeNode]) -> List[int]: result = [] def traverse(node: Optional[TreeNode]): if node: result.append(node.val) traverse(node.left) traverse(node.right) traverse(root) return result"},{"question":"Given a string `S` of length n and a pattern `P` of length m, write a function that returns all the starting indices of `P` in `S`. You need to implement a function `findPatternOccurrences(S: str, P: str) -> List[int]` that efficiently finds all the positions of the pattern `P` in the string `S`. # Example ```python def findPatternOccurrences(S: str, P: str) -> List[int]: # implementation goes here # Example S = \\"abracadabra\\" P = \\"abra\\" print(findPatternOccurrences(S, P)) # Output should be [0, 7] S = \\"aaaaa\\" P = \\"aa\\" print(findPatternOccurrences(S, P)) # Output should be [0, 1, 2, 3] S = \\"mississippi\\" P = \\"iss\\" print(findPatternOccurrences(S, P)) # Output should be [1, 4] ``` # Constraints - The length of the string `S` (1 leq n leq 10^5). - The length of the pattern `P` (1 leq m leq 10^5). - Both `S` and `P` consist of lowercase English letters only. Your solution must have a time complexity better than O(n cdot m) to pass large inputs efficiently.","solution":"from typing import List def findPatternOccurrences(S: str, P: str) -> List[int]: Returns all the starting indices of pattern P in string S. Uses the Knuth-Morris-Pratt (KMP) algorithm for efficient string matching. def computeLPSArray(P: str) -> List[int]: # Length of the previous longest prefix suffix lps = [0] * len(P) length = 0 i = 1 while i < len(P): if P[i] == P[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps lps = computeLPSArray(P) result = [] i = 0 # index for S j = 0 # index for P while i < len(S): if P[j] == S[i]: i += 1 j += 1 if j == len(P): result.append(i - j) j = lps[j - 1] elif i < len(S) and P[j] != S[i]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"Given two strings, s1 and s2, your task is to determine whether s1 can be transformed into s2 by deleting exactly one character from s1. -----Constraints----- - The length of s1 and s2 will be at most 100. - Both strings will contain only lowercase English letters. -----Input----- The input consists of two lines: The first line contains the string s1. The second line contains the string s2. -----Output----- Print \\"YES\\" if s1 can be transformed into s2 by deleting exactly one character from s1. Otherwise, print \\"NO\\". -----Sample Input----- example exmple -----Sample Output----- YES -----Sample Input----- test tte -----Sample Output----- NO In the first example, removing the character \'a\' from \\"example\\" yields \\"exmple\\". In the second example, no single character removal from \\"test\\" results in \\"tte\\".","solution":"def can_transform_by_deleting_one_char(s1, s2): Determines if s1 can be transformed into s2 by deleting exactly one character from s1. Parameters: s1 (str): The original string. s2 (str): The target string after deleting one character from s1. Returns: str: \\"YES\\" if s1 can be transformed into s2 in the specified way, \\"NO\\" otherwise. # s2 should be exactly one character shorter than s1 if len(s1) - len(s2) != 1: return \\"NO\\" # Try deleting each character from s1 and check if it matches s2 for i in range(len(s1)): if s1[:i] + s1[i+1:] == s2: return \\"YES\\" return \\"NO\\" # Example usage: # print(can_transform_by_deleting_one_char(\\"example\\", \\"exmple\\")) # Expected: \\"YES\\" # print(can_transform_by_deleting_one_char(\\"test\\", \\"tte\\")) # Expected: \\"NO\\""},{"question":"You are given a rectangular grid with dimensions n x m, where each cell in the grid contains a single lowercase letter. You need to find the length of the longest path in the grid such that each cell in the path contains distinct letters. A cell in the grid can have edges connecting to its adjacent cells horizontally or vertically (not diagonally). Write a function `longestPath(grid: List[List[str]]) -> int:` that takes a list of lists of characters representing the grid and returns an integer representing the length of the longest path where each cell contains distinct letters. # Constraints: - 1 ≤ n, m ≤ 10 - The grid contains only lowercase English letters (\'a\' - \'z\'). # Example: ```python grid = [ [\\"a\\", \\"b\\", \\"c\\"], [\\"d\\", \\"e\\", \\"f\\"], [\\"g\\", \\"h\\", \\"i\\"] ] print(longestPath(grid)) # Output: 9 ``` The longest path consisting of distinct letters in the given grid is 9, starting from any corner of the grid and visiting each cell exactly once.","solution":"def longestPath(grid): def dfs(x, y, visited): # If the cell is out of bounds or already visited, return 0 if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] in visited: return 0 # Mark this cell as visited visited.add(grid[x][y]) # Move to adjacent cells and calculate the longest path max_len = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: max_len = max(max_len, dfs(x + dx, y + dy, visited)) # Unmark this cell as visited for future exploration paths visited.remove(grid[x][y]) # Return the length of the longest path from this cell return 1 + max_len n = len(grid) m = len(grid[0]) max_path = 0 # Start DFS from each cell in the grid for i in range(n): for j in range(m): max_path = max(max_path, dfs(i, j, set())) return max_path"},{"question":"Monocarp is learning magic and wants to master the \\"Teleportation\\" spell. In the magical world, there are n magical orbs, each located on a straight line. Monocarp can teleport from one orb to another in consecutive turns. Teleportation consumes magical energy, which is the distance between the orbs. Monocarp plans to visit all orbs exactly once starting from any orb of his choice. He wants to minimize the total magical energy consumed for his journey. Monocarp, being still new to this, needs your help to figure out the minimum magical energy required to visit all orbs. -----Input----- The first line contains an integer n (2 le n le 18) — the number of magical orbs. The second line contains n integers separated by spaces a_1, a_2, ldots, a_n (1 le a_i le 100) — the positions of the magical orbs on the line. -----Output----- Output a single integer — the minimum magical energy required. -----Examples----- Input 4 1 4 7 10 Output 9 -----Note----- For the example above, Monocarp can teleport in the sequence 1 rightarrow 4 rightarrow 7 rightarrow 10, which consumes energy 3 + 3 + 3 = 9. Any other permutation does not result in lesser energy consumption.","solution":"from itertools import permutations def min_magic_energy(n, positions): Calculate the minimum magical energy required to visit all orbs. Args: n (int): The number of magical orbs. positions (list of int): The positions of the magical orbs on the line. Returns: int: The minimum magical energy required. min_energy = float(\'inf\') for perm in permutations(positions): energy = sum(abs(perm[i] - perm[i+1]) for i in range(n-1)) min_energy = min(min_energy, energy) return min_energy"},{"question":"A logistics company needs to optimize the delivery route for their trucks to minimize the total travel distance. The company operates in a city with n cargo distribution centers and m bidirectional roads connecting the centers. Each road has an associated travel distance. The company\'s goal is to determine the shortest Hamiltonian cycle starting from a specified distribution center. A Hamiltonian cycle is a cycle that visits each distribution center exactly once and returns to the starting center. Since finding the exact solution can be computationally expensive for large inputs, you need to implement an approximation algorithm that provides a reasonably short travel route. **Input:** - The first line contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ n(n - 1)/2) — the number of distribution centers and the number of roads. - The second line contains an integer k (1 ≤ k ≤ n) — the starting distribution center. - Each of the next m lines contains three integers u, v, and d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 1000) — the two distribution centers and the travel distance between them. **Output:** - Print the total travel distance of the approximated shortest Hamiltonian cycle starting and ending at center k. **Example:** Input: ``` 4 6 1 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 ``` Output: ``` 80 ``` **Note:** In this example, one possible approximated shortest Hamiltonian cycle starting at center 1 could be visiting the centers in the order 1 -> 2 -> 4 -> 3 -> 1, resulting in a travel distance of 10 + 25 + 30 + 15 = 80. You can use the Nearest Neighbor algorithm or any other reasonable heuristic to find an approximated solution.","solution":"def nearest_neighbor_tsp(n, m, k, roads): from collections import defaultdict import heapq graph = defaultdict(list) for u, v, d in roads: graph[u].append((d, v)) graph[v].append((d, u)) visited = [False] * (n + 1) path_cost = 0 current = k for _ in range(n - 1): visited[current] = True neighbors = graph[current] min_distance, next_center = min((dist, center) for dist, center in neighbors if not visited[center]) path_cost += min_distance current = next_center # Add the distance to return to the starting center for dist, center in graph[current]: if center == k: path_cost += dist break return path_cost # Function to parse input and call the nearest_neighbor_tsp function def find_approx_hamiltonian_cycle(n, m, k, roads_info): roads = [] for i in range(m): u, v, d = roads_info[i] roads.append((u, v, d)) return nearest_neighbor_tsp(n, m, k, roads)"},{"question":"Given an array of integers, your task is to find the longest contiguous subarray consisting of just one distinct integer, and return its length. -----Input----- The first line contains a single integer, n (1 le n le 1000), representing the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000), representing the elements of the array. -----Output----- Print a single integer — the length of the longest contiguous subarray consisting of just one distinct integer. -----Examples----- Input 5 4 4 2 2 2 Output 3 Input 6 1 1 1 1 1 1 Output 6 Input 4 1 2 3 4 Output 1 Input 8 5 5 5 4 4 4 4 7 Output 4 -----Note----- In the first example, the longest contiguous subarray is 2, 2, 2, which has length 3. In the second example, the entire array consists of the same integer 1, so the length is 6. In the third example, all elements are distinct, so the longest contiguous subarray containing only one distinct integer has length 1. In the fourth example, there are two candidates: 5, 5, 5 and 4, 4, 4, 4, with the latter having the longer length of 4.","solution":"def longest_contiguous_subarray(n, array): Given an array of integers, finds the longest contiguous subarray consisting of just one distinct integer, and returns its length. :param n: Integer, length of the array :param array: List of integers, the array elements :return: Integer, length of the longest contiguous subarray if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if array[i] == array[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Example usage: # n = 5 # array = [4, 4, 2, 2, 2] # print(longest_contiguous_subarray(n, array)) # Output: 3"},{"question":"Two players are playing a game with a set of N integers. The integers are initially arranged in a line. In each round, the players take turns choosing one of the ends of the line (leftmost or rightmost element) and take it away. The game proceeds until there are no integers left. The player to remove the last integer wins. Players alternate turns, starting with Player 1. Your goal is to determine the minimum number of rounds that Player 1 needs to guarantee a win, assuming both players play optimally. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq a_i leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the minimum number of rounds Player 1 needs to guarantee a win. -----Sample Input----- 3 1 2 3 -----Sample Output----- 2 Player 1 can choose 3 in the first turn, forcing Player 2 to take either 1 or 2, and then Player 1 takes the remaining number in the second turn to win the game.","solution":"def min_rounds_to_win(n, a): Returns the minimum number of rounds Player 1 needs to guarantee a win. # To guarantee a win, Player 1 needs to take the last integer. # The minimum rounds Player 1 needs is floor((N + 1) / 2). return (n + 1) // 2"},{"question":"You are managing a fleet of N drones that are initially stationed at unique points in a 2D plane. Each drone can travel at a constant speed in any direction. There are several repair stations scattered throughout the plane, where drones can go to get fixed if something goes wrong. Given the current position of each drone and the positions of the repair stations, you have to find out which repair station is closest to each drone. INPUT: The first line of the input contains a single integer T, the number of test cases. Each test case starts with a line that contains two integers N and M, the number of drones and repair stations respectively. The next N lines each contain two integers x and y, representing the coordinates of the drones. The following M lines each contain two integers x and y, representing the coordinates of the repair stations. OUTPUT: For each test case, output: Case #X: d1 d2 d3 ... dN where X is the test case number, starting from 1, and di is the distance of the closest repair station to the i-th drone, rounded to the nearest integer. CONSTRAINTS: All the numbers in the input will be integers. 1 ≤ T ≤ 100 1 ≤ N, M ≤ 500 The values of x and y will be between -5000 and 5000, inclusive. SAMPLE INPUT: 1 3 2 100 100 200 200 300 300 150 150 250 250 SAMPLE OUTPUT: Case #1: 71 71 71 Explanation: In the given example, there are 3 drones and 2 repair stations. The distances between each drone and the nearest repair station are calculated as follows: - For the first drone at (100, 100): the distance to the first station at (150, 150) is approximately 71 units. - For the second drone at (200, 200): the distance to the first station at (150, 150) is the same as the distance to the second station at (250, 250), both approximately 71 units. - For the third drone at (300, 300): the distance to the second station at (250, 250) is approximately 71 units. Thus, the output is \\"Case #1: 71 71 71\\".","solution":"import math def closest_repair_station_distance(drone_coordinate, repair_stations): Calculate the closest distance between a drone and repair stations. min_distance = float(\'inf\') for rx, ry in repair_stations: distance = math.sqrt((rx - drone_coordinate[0]) ** 2 + (ry - drone_coordinate[1]) ** 2) if distance < min_distance: min_distance = distance return round(min_distance) def process_test_case(n, m, drones, repair_stations): For a given test case, determine the closest repair station distance for each drone. result = [] for drone in drones: result.append(closest_repair_station_distance(drone, repair_stations)) return result def find_closest_distances_to_stations(test_cases): Given the input test cases, find the distance to the closest repair station for each drone. Returns: A string for each test case in the format \\"Case #X: d1 d2 d3 ... dN\\", where X is the test case number. output = [] for idx, (n, m, drones, repair_stations) in enumerate(test_cases): distances = process_test_case(n, m, drones, repair_stations) case_result = f\\"Case #{idx + 1}: {\' \'.join(map(str, distances))}\\" output.append(case_result) return output"},{"question":"You are given a sequence of integers A_{1}, A_{2}, ldots, A_{N} and a positive integer K. Your task is to find the maximum possible sum of the sequence after performing exactly K operations. In each operation, you: 1. Choose any subsequence B of A. 2. Replace each element B_i in the subsequence B with |B_i| (the absolute value of B_i). Find the maximum possible sum of the sequence after performing K operations. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print a single line containing the maximum possible sum of the sequence after performing exactly K operations. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ 10 -10^9 ≤ A_{i} ≤ 10^9 for each valid i ------ Sample Input 1 ------ 1 5 2 -1 2 -3 4 -5 ------ Sample Output 1 ------ 15 ------ Explanation 1 ------ Example case 1: The original sequence is (-1, 2, -3, 4, -5). - In the first operation, choose the subsequence (-1, -3, -5) and replace each element with its absolute value to get (1, 2, 3, 4, 5). - In the second operation, the sum remains unchanged as we already have positive values. The maximum sum of the sequence after 2 operations is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def max_sum_after_k_operations(T, test_cases): result = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] abs_A = [abs(x) for x in A] result.append(sum(abs_A)) return result"},{"question":"Bob and Alice are playing a game with a sequence of positive integers. Bob\'s goal is to reduce the sequence to a single element with the maximum possible value, while Alice\'s aim is to minimize the value of that final element. The game is played as follows: 1. On his/her turn, a player selects a contiguous subarray of length exactly two and replaces it with a single element. The new element is the sum of the two selected elements. 2. The game ends when only one element remains in the sequence. Bob always makes the first move, and both players play optimally. Given the initial sequence of integers, determine the final value of the sequence after both players have played optimally. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer n (2 ≤ n ≤ 100) followed by a line containing n space-separated positive integers denoting the sequence. Output For each test case, print one line with one integer on it — the final value of the sequence after both players have played optimally. Examples Input 3 3 1 3 2 4 4 2 5 1 5 1 2 3 4 5 Output 6 12 15 Explanation: 1. For the first test case: - Bob starts by summing the first two elements: [4, 2] - Alice sums the remaining elements: [6] 2. For the second test case: - Bob starts by summing the last two elements: [4, 2, 6] - Alice sums the first two elements: [6, 6] - Bob sums the two elements: [12] 3. For the third test case: - Bob starts by summing the last two elements: [1, 2, 3, 9] - Alice sums the first two elements: [3, 3, 9] - Bob sums the last two elements: [3, 12] - Alice sums the two elements: [15]","solution":"def final_sequence_value(t, test_cases): results = [] for case in test_cases: n = case[0] sequence = case[1] while len(sequence) > 1: max_sum = 0 best_index = 0 for i in range(len(sequence) - 1): current_sum = sequence[i] + sequence[i+1] if current_sum > max_sum: max_sum = current_sum best_index = i sequence = sequence[:best_index] + [max_sum] + sequence[best_index+2:] results.append(sequence[0]) return results"},{"question":"In a factory, a conveyor belt moves boxes from one end to another. Each box has a weight, and the conveyor belt has a weight limit. If the total weight of boxes on the conveyor belt exceeds the weight limit, the conveyor belt will stop working. You are given an array of integers representing the weights of the boxes and an integer representing the weight limit of the conveyor belt. Your task is to determine the maximum number of boxes that can be placed on the conveyor belt without exceeding the weight limit. Input The first line contains one integer T denoting the number of test cases. Each of the following T test cases starts with a line containing an integer N - the number of boxes, followed by a line containing N integers representing the weights of the boxes, and an integer W representing the weight limit of the conveyor belt. Output For each test case, output one integer on a separate line - the maximum number of boxes that can be placed on the conveyor belt without exceeding the weight limit. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ weights of boxes ≤ 1000 1 ≤ W ≤ 10000 SAMPLE INPUT 2 5 1 2 3 4 5 10 4 7 4 1 8 10 SAMPLE OUTPUT 4 2","solution":"def max_boxes_on_conveyor(num_cases, test_cases): Returns the maximum number of boxes that can be placed on the conveyor belt without exceeding the weight limit. Parameters: num_cases (int): Number of test cases test_cases (list): A list of tuples, each containing the number of boxes, a list of box weights, and the weight limit W Returns: list: A list of integers indicating the maximum number of boxes for each test case results = [] for i in range(num_cases): N, weights, W = test_cases[i] weights.sort() count = 0 total_weight = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break results.append(count) return results"},{"question":"Given an integer N. Determine if it is possible to partition the set {1, 2, ..., N} into two subsets such that the sums of the elements in each subset are equal. -----Constraints----- - 1 leq N leq 10^6 -----Input----- Input is given from Standard Input in the following format: N -----Output----- If it is possible to partition the set {1, 2, ..., N} into two subsets with equal sums, print Yes; otherwise, print No. -----Sample Input----- 7 -----Sample Output----- Yes - The set {1, 2, 3, 4, 5, 6, 7} can be partitioned into {1, 6, 7} and {2, 3, 4, 5} with both subsets summing to 14.","solution":"def can_partition_into_equal_subsets(N): Determines if it is possible to partition the set {1, 2, ..., N} into two subsets such that the sums of the elements in each subset are equal. Parameters: N (int): The size of the set {1, 2, ..., N}. Returns: str: \\"Yes\\" if it is possible, \\"No\\" otherwise. total_sum = N * (N + 1) // 2 # Check if the total sum is even if total_sum % 2 == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Given an array of integers representing the scores of students in a class, find the highest score a student can get by summing up scores from exactly three consecutive students in the array. If the array has fewer than three elements, return -1. Example 1: Input: N = 5 scores[] = {100, 200, 300, 400, 500} Output: 1200 Explanation: The highest score possible by summing up scores of three consecutive students is obtained by summing scores[2], scores[3], and scores[4] which gives 300 + 400 + 500 = 1200. Example 2: Input: N = 3 scores[] = {50, 60, 70} Output: 180 Explanation: The only way to sum up three consecutive students\' scores is to sum scores[0], scores[1], and scores[2] which gives 50 + 60 + 70 = 180. Example 3: Input: N = 2 scores[] = {10, 20} Output: -1 Explanation: The array contains fewer than three elements, so it is not possible to sum the scores of three consecutive students. Your Task: The task is to complete the function highestThreeConsecutiveSum() which takes an array scores[] (denoting the scores of students) and its size N as inputs and returns the highest score obtained by summing up scores of exactly three consecutive students if possible, otherwise returns -1. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^6 1 <= scores[i] <= 10^5","solution":"def highestThreeConsecutiveSum(N, scores): Returns the highest score obtained by summing up scores of exactly three consecutive students if N < 3: return -1 max_sum = scores[0] + scores[1] + scores[2] current_sum = max_sum for i in range(3, N): current_sum = current_sum - scores[i - 3] + scores[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A young intern at an IT security company has been given the task to strengthen the company\'s authentication system by upgrading its password policy. The new policy generates passwords from strings derived from concatenating two given words. To ensure high security, the password should follow these rules: 1. The password should be a permutation of the combined string of two given words. 2. No three consecutive characters in the password should be the same. Your task is to implement a function that generates the password according to the new policy. If multiple valid passwords exist, return any of them. If it\'s impossible to generate such a password, return \\"Not Possible\\". Input The input consists of two lines: - The first line contains a string w1 (1 ≤ |w1| ≤ 100) — the first word. - The second line contains a string w2 (1 ≤ |w2| ≤ 100) — the second word. Output Print a valid password according to the new policy, or \\"Not Possible\\" if no valid password can be generated. Example Input abc bca Output bcaab Input aaa bbb Output ababab Input aaa aaa Output Not Possible Note In the first sample, \\"abc\\" and \\"bca\\" are concatenated to form the string \\"abcbca\\". One possible valid password is \\"bcaabbca\\" where no three consecutive characters are the same. In the second sample, \\"aaa\\" and \\"bbb\\" are concatenated to form \\"aaabbb\\". A valid password could be \\"ababab\\" or any other permutation where no three consecutive characters are the same. In the third sample, it\'s impossible to arrange \\"aaaaaa\\" such that no three consecutive characters are the same. Therefore, the output is \\"Not Possible\\".","solution":"from collections import Counter def generate_password(w1, w2): combined = w1 + w2 counter = Counter(combined) # Check if any character count is more than half of the length rounded up max_allowed = (len(combined) + 1) // 2 if any(count > max_allowed for count in counter.values()): return \\"Not Possible\\" result = [] while counter: most_common = counter.most_common(2) # Take the 2 most common characters if len(most_common) == 1 and len(result) >= 2 and result[-1] == result[-2] == most_common[0][0]: # Only one character is left and it would create three in a row return \\"Not Possible\\" for char, cnt in most_common: if len(result) >= 2 and result[-1] == result[-2] == char: continue result.append(char) counter[char] -= 1 if counter[char] == 0: del counter[char] break counter = Counter(dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))) # Reorder after each iteration return \'\'.join(result)"},{"question":"A detective agency needs to analyze the movement of a suspect to determine possible meeting locations with an accomplice. The city is plotted on an x-y coordinate plane, and the path of the suspect is logged at specific times. The suspect can move horizontally, vertically, or diagonally one unit at a time. You need to determine the furthest distance between any two consecutive logged points of the suspect\'s movement, rounded to six decimal places. Input The first line contains an integer n (2 ≤ n ≤ 105), which represents the number of logged coordinates of the suspect\'s movement. The next n lines each contain two integers x and y (0 ≤ x, y ≤ 109), representing the coordinates at each logged time. Output Print the maximum Euclidean distance between any two consecutive logged points of the suspect\'s movement, rounded to six decimal places. SAMPLE INPUT 5 0 0 1 1 2 3 4 4 5 6 SAMPLE OUTPUT 2.236068","solution":"import math def max_distance(n, coordinates): Returns the maximum Euclidean distance between two consecutive points in the given list of coordinates. The result is rounded to six decimal places. max_dist = 0 for i in range(1, n): x1, y1 = coordinates[i - 1] x2, y2 = coordinates[i] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance > max_dist: max_dist = distance return round(max_dist, 6)"},{"question":"There is a staircase with N steps, and you can climb either 1, 2, or 3 steps at a time. Find the number of distinct ways you can climb to the top of the staircase. Example 1: Input: N = 3 Output: 4 Explanation: The four ways to climb to the top are {1, 1, 1}, {1, 2}, {2, 1}, and {3}. Example 2: Input: N = 4 Output: 7 Explanation: The seven ways to climb to the top are {1, 1, 1, 1}, {1, 1, 2}, {1, 2, 1}, {2, 1, 1}, {1, 3}, {3, 1}, and {2, 2}. Your Task: You don\'t need to read or print anything. Your task is to complete the function climbStairs() which takes N as input parameter and returns the total number of ways modulo 10^9 + 7 to climb to the top of the staircase. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^4","solution":"def climbStairs(N): Returns the number of distinct ways to climb to the top of the staircase with N steps. Each step can be 1, 2, or 3 steps at a time. MOD = 10**9 + 7 if N == 0: return 0 if N == 1: return 1 if N == 2: return 2 if N == 3: return 4 ways = [0] * (N + 1) ways[0] = 1 ways[1] = 1 ways[2] = 2 ways[3] = 4 for i in range(4, N + 1): ways[i] = (ways[i-1] + ways[i-2] + ways[i-3]) % MOD return ways[N]"},{"question":"Write a program to parse a list of date-time strings, extract the date component, and print a list of unique dates in ascending order. Each date-time string is in the format \\"yyyy-mm-dd hh:mm:ss\\". You can assume that the dates are valid and properly formatted. The list will contain at most 100 date-time strings. Input ::: ::: ::: Output date date ::: ::: Example Input 2023-05-12 08:12:15 2023-04-30 14:25:30 2023-05-12 16:45:10 2023-04-25 09:15:00 2023-06-01 11:20:35 2023-04-25 17:30:24 Output 2023-04-25 2023-04-30 2023-05-12 2023-06-01","solution":"def extract_unique_dates(date_times): Given a list of date-time strings in the format \\"yyyy-mm-dd hh:mm:ss\\", returns a sorted list of unique dates in the format \\"yyyy-mm-dd\\". dates = set() for date_time in date_times: date = date_time.split(\' \')[0] dates.add(date) return sorted(dates)"},{"question":"You are tasked with developing a scheduling assistant for a rental company that manages multiple properties. Each property can be rented for a specific duration, and you need to handle the booking process while ensuring that no two bookings overlap for the same property. Your task is to implement a system that checks if a new booking can be accommodated without any time conflicts with the existing bookings for a specific property. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of properties and the number of existing bookings, respectively. The next `m` lines each contain three integers `p`, `s`, and `e` (1 ≤ p ≤ n, 1 ≤ s < e ≤ 10000) representing an existing booking for property `p` that starts at time `s` and ends at time `e`. The following line contains three integers `p`, `s`, and `e` representing the new booking request for property `p` that starts at time `s` and ends at time `e`. Output Print \\"YES\\" if the new booking can be accommodated without any time conflicts. Otherwise, print \\"NO\\". Examples Input 3 4 1 1 5 1 6 10 2 1 5 3 5 8 1 2 4 Output NO Input 2 3 1 1 5 2 6 10 2 15 20 2 11 14 Output YES","solution":"def can_accommodate_booking(n, m, bookings, new_booking): Determine if the new booking can be accommodated without conflicts. :param n: Number of properties. :param m: Number of existing bookings. :param bookings: List of tuples representing existing bookings in the format (p, s, e). :param new_booking: A tuple representing the new booking request in the format (p, s, e). :return: \\"YES\\" if the new booking can be accommodated, otherwise \\"NO\\". property_bookings = {i: [] for i in range(1, n + 1)} # Populate the property_bookings dictionary with existing bookings for p, s, e in bookings: property_bookings[p].append((s, e)) p, s, e = new_booking # Check for time conflicts for the specific property for existing_start, existing_end in property_bookings[p]: if max(s, existing_start) < min(e, existing_end): return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with developing an optimized ticket booking system for concerts. There are n concert events, where each event has a limited number of seats. A user can request tickets for multiple events but wants to minimize the total number of different events they need to book first before potentially booking additional desired events. Consider m users, where each user specifies the event numbers and the quantities of tickets they wish. You need to determine if it\'s feasible to accommodate all users\' requests and, if it\'s feasible, the sequence of events booking such that the maximum ticket demand is met with minimal first-choice events. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105), the number of events and the number of users. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 109) where si represents the number of available seats for the i-th event. The following m lines each contain event numbers and requested ticket quantities for each user. Each line starts with an integer k (1 ≤ k ≤ n), the number of desired events followed by k pairs of integers (event number, ticket quantity). Output If it is possible to satisfy all the users\' ticket requests, print \\"YES\\" and list the optimal order of events such that the required tickets are booked minimizing the number of first-choice events. If it is not possible, print \\"NO\\". Examples Input 3 2 10 5 8 2 1 4 2 3 2 2 3 3 1 Output YES 1 2 3 Input 2 2 3 4 1 1 5 2 1 2 2 3 Output NO Input 4 3 15 20 13 10 1 3 5 2 2 7 4 3 2 1 10 3 2 Output YES 2 3 1 4 Note In the first sample, the optimal solution is to prioritize event 1, then event 2, finally event 3 to accommodate all user requests efficiently. In the second sample, it is not possible to fulfill user demands since the ticket requirement for event 1 exceeds the available seats. In the third sample, fulfilling all requests can be achieved by booking event tickets in the given output sequence while managing seat distribution.","solution":"def ticket_booking_system(n, m, available_seats, user_requests): # Initialize an array to keep track of available seats for each event seats = available_seats[:] # Construct a list to hold all the requests requests = [] for request in user_requests: num_events, *events = request request_list = [] for i in range(num_events): event_number, ticket_quantity = events[2 * i], events[2 * i + 1] request_list.append((event_number - 1, ticket_quantity)) # Event index is from 0 requests.append(request_list) # Sort requests by number of events in ascending order for prioritization requests.sort(key=lambda x: len(x)) for request in requests: satisfied = False for event_number, ticket_quantity in request: if seats[event_number] >= ticket_quantity: seats[event_number] -= ticket_quantity satisfied = True break if not satisfied: return \\"NO\\" return \\"YES\\" # This function returns the available seats array and the requests array based on input text def parse_input(input_text): lines = input_text.strip().split(\'n\') n, m = map(int, lines[0].split()) available_seats = list(map(int, lines[1].split())) user_requests = [] for i in range(2, 2 + m): user_requests.append(list(map(int, lines[i].split()))) return n, m, available_seats, user_requests"},{"question":"Write a function that takes a string containing a mixture of uppercase and lowercase letters and returns a new string where: - Each uppercase letter is converted to its corresponding lowercase letter. - Each lowercase letter is converted to its corresponding uppercase letter. For example, given the string `\\"Hello World\\"`, the function should return `\\"hELLO wORLD\\"`.","solution":"def swap_case(s): Takes a string containing a mixture of uppercase and lowercase letters and returns a new string where each uppercase letter is converted to its corresponding lowercase letter and each lowercase letter is converted to its corresponding uppercase letter. return s.swapcase()"},{"question":"You are given an integer array a of length n. In each operation, you can choose any two adjacent elements a_i and a_{i+1} in the array, and if a_i + a_{i+1} is even, you can remove both a_i and a_{i+1} from the array. For example, if you have the array [1, 2, 3, 4], you can choose a_2=2 and a_3=3 (since 2 + 3 = 5 is not even) and keep the array as is, or remove a_1=1 and a_2=2 (since 1 + 2 = 3 is odd), or remove a_3=3 and a_4=4 (since 3 + 4 = 7 is odd). Is it possible to make the length of this array equal to 1 with these operations? -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — elements of the array. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, output on a single line the word \\"YES\\" if it is possible to reduce the array to a single element using the aforementioned operation, or \\"NO\\" if it is impossible to do so. -----Example----- Input 3 3 1 2 3 4 4 5 6 7 3 2 4 6 Output NO NO YES -----Note----- For the last test case, we can operate as follow (the bolded elements are the pair chosen for that operation): [textbf{2}, textbf{4}, text{6}] rightarrow [text{6}] For the first two test cases, it is not possible to reduce the array to a single element using the given operations.","solution":"def can_reduce_to_one_element(test_cases): results = [] for n, a in test_cases: # Count even and odd numbers in the array even_count = sum(1 for x in a if x % 2 == 0) odd_count = n - even_count # If there are both even and odd numbers # we cannot reduce it to a single element if even_count > 0 and odd_count > 0: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Alice has a collection of n videos she needs to upload to a streaming platform. Each video has a specific size in megabytes (MB), and the platform has a restriction on the maximum number of videos being uploaded simultaneously. Alice can only upload a certain number of videos in parallel, and each upload takes exactly one day, regardless of the video size. Alice wants to minimize the number of days it will take to upload all her videos, given that she can upload at most k videos per day. -----Input----- The input consists of two lines. The first line contains two integers n (1 leq n leq 100000) and k (1 leq k leq n), where n denotes the number of videos and k denotes the maximum number of videos that can be uploaded in parallel per day. The second line contains n integers s_ i (1 leq s_ i leq 10000), where s_ i denotes the size in megabytes of the ith video. -----Output----- Your program should output exactly one integer, denoting the minimum number of days required to upload all the videos. -----Examples----- Sample Input: 7 3 50 100 200 150 300 250 400 Sample Output: 3","solution":"def min_days_to_upload_videos(n, k, sizes): Function to calculate the minimum number of days required to upload all the videos. Parameters: n (int): Number of videos k (int): Maximum number of videos that can be uploaded in parallel per day sizes (list of int): Sizes of the videos Returns: int: Minimum number of days required to upload all the videos # The number of days required is simply the ceiling of n divided by k. from math import ceil return ceil(n / k) # Example use case n, k = 7, 3 sizes = [50, 100, 200, 150, 300, 250, 400] print(min_days_to_upload_videos(n, k, sizes)) # Output: 3"},{"question":"Alice is exploring a mysterious island where each region has a certain amount of hidden treasure. The island can be represented as a directed graph with regions as nodes and roads as edges. The roads between regions can only be traveled in one direction. Alice wants to gather as much treasure as possible, starting from any region and collecting the treasure as she moves along the roads until she can no longer proceed to another region. Help Alice determine the maximum amount of treasure she can collect. -----Input----- The first line contains two integers n (1 leq n leq 10^5) and m (0 leq m leq 10^5), which represent the number of regions and the number of roads respectively. The next line contains n integers where the i-th integer represents the amount of treasure in the i-th region. The next m lines each contain two integers u and v (1 leq u, v leq n, u neq v), indicating there is a directed road from region u to region v. -----Output----- Output a single integer representing the maximum amount of treasure Alice can collect. -----Examples----- Sample Input 1: 5 6 1 2 3 4 5 1 2 2 3 3 4 4 5 2 5 1 3 Sample Output 1: 15 Sample Input 2: 4 3 2 4 6 8 1 2 2 3 1 3 Sample Output 2: 12","solution":"def max_treasure(n, m, treasures, roads): from collections import defaultdict, deque # Construct adjacency list from roads (graph) graph = defaultdict(list) in_degree = [0] * n for u, v in roads: graph[u - 1].append(v - 1) in_degree[v - 1] += 1 # Perform a topological sort and store the topological order topo_order = [] queue = deque() # Initialize the queue with nodes having zero in-degree for i in range(n): if in_degree[i] == 0: queue.append(i) while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Apply dynamic programming to calculate the maximum treasure collectable max_treasure_dp = treasures[:] for node in topo_order: for neighbor in graph[node]: if max_treasure_dp[neighbor] < max_treasure_dp[node] + treasures[neighbor]: max_treasure_dp[neighbor] = max_treasure_dp[node] + treasures[neighbor] return max(max_treasure_dp) # Example usage: # max_treasure(5, 6, [1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5), (2, 5), (1, 3)]) # This should return 15"},{"question":"In a bustling metropolis, a new metro line has been constructed with several stations, and each station is connected to one or more other stations through direct metro lines. Given the complex nature of the city\'s layout, the authority needs a program to help commuters find the shortest path between any two given stations. You are asked to write a program that finds the shortest path in terms of the number of stations between the starting station and the destination station. The metro map will be provided as an adjacency list. Input Format - The first line contains two integers, N (the number of stations) and M (the number of direct connections between stations). - The next M lines each contain two integers u and v, indicating that there is a direct connection between station u and station v. - The last line contains two integers, the start station and the destination station. Output Format - Print a single line containing the minimum number of stations between the start and destination stations. If there is no path, print -1. SAMPLE INPUT 5 6 1 2 1 3 2 3 2 4 3 4 4 5 1 5 SAMPLE OUTPUT 3 Explanation The metro system and its connections can be represented as: Station 1 is connected to Stations 2 and 3. Station 2 is connected to Stations 1, 3, and 4. Station 3 is connected to Stations 1, 2, and 4. Station 4 is connected to Stations 2, 3, and 5. Station 5 is connected to Station 4. The shortest path from station 1 to station 5 is: 1 -> 2 -> 4 -> 5","solution":"from collections import deque def shortest_path(num_stations, connections, start, destination): Find the shortest path between two stations in a metro system. :param num_stations: int, number of stations :param connections: list of tuples, each containing two integers representing a direct connection between stations :param start: int, the starting station :param destination: int, the destination station :return: int, the minimum number of stations between start and destination, or -1 if no path exists if start == destination: return 0 # Build the adjacency list adjacency_list = {i: [] for i in range(1, num_stations + 1)} for u, v in connections: adjacency_list[u].append(v) adjacency_list[v].append(u) # BFS initialization queue = deque([(start, 0)]) visited = set([start]) while queue: current_station, distance = queue.popleft() for neighbor in adjacency_list[current_station]: if neighbor not in visited: if neighbor == destination: return distance + 1 queue.append((neighbor, distance + 1)) visited.add(neighbor) return -1"},{"question":"Design a data structure that supports the following operations in a web browser\'s history: 1. visit(String url) - Visits the url from the current page, pushing it onto the history stack. 2. back(int steps) - Moves steps back in the history, if possible. If you can\'t move that far back, return as far as possible. 3. forward(int steps) - Moves steps forward in the history, if possible. If you can\'t move that far forward, return as far as possible. Implement the BrowserHistory class: class BrowserHistory - BrowserHistory(String homepage) - Initializes the object with the homepage of the browser. - void visit(String url) - Visits url from the current page. - String back(int steps) - Move steps back in history and return the current page. - String forward(int steps) - Move steps forward in history and return the current page. Example: Input: [\\"BrowserHistory\\",\\"visit\\",\\"visit\\",\\"visit\\",\\"back\\",\\"back\\",\\"forward\\",\\"visit\\",\\"forward\\",\\"back\\",\\"back\\"] [[\\"leetcode.com\\"],[\\"google.com\\"],[\\"youtube.com\\"],[\\"facebook.com\\"],[1],[1],[1],[\\"linkedin.com\\"],[2],[2],[7]] Output: [null,null,null,null,\\"youtube.com\\",\\"google.com\\",\\"youtube.com\\",null,\\"linkedin.com\\",\\"google.com\\",\\"leetcode.com\\"] Explanation: BrowserHistory browserHistory = new BrowserHistory(\\"leetcode.com\\"); browserHistory.visit(\\"google.com\\"); // You are in \\"leetcode.com\\". Visit \\"google.com\\" browserHistory.visit(\\"youtube.com\\"); // You are in \\"google.com\\". Visit \\"youtube.com\\" browserHistory.visit(\\"facebook.com\\"); // You are in \\"youtube.com\\". Visit \\"facebook.com\\" browserHistory.back(1); // You are in \\"facebook.com\\", move back to \\"youtube.com\\". Return \\"youtube.com\\" browserHistory.back(1); // You are in \\"youtube.com\\", move back to \\"google.com\\". Return \\"google.com\\" browserHistory.forward(1); // You are in \\"google.com\\", move forward to \\"youtube.com\\". Return \\"youtube.com\\" browserHistory.visit(\\"linkedin.com\\"); // You are in \\"youtube.com\\". Visit \\"linkedin.com\\" browserHistory.forward(2); // You are in \\"linkedin.com\\", can\'t move forward any steps. Return \\"linkedin.com\\" browserHistory.back(2); // You are in \\"linkedin.com\\", move back two steps to \\"google.com\\". Return \\"google.com\\" browserHistory.back(7); // You are in \\"google.com\\", move back seven steps to \\"leetcode.com\\". Return \\"leetcode.com\\" Constraints: - The total number of operations will not exceed 10000. - The length of any URL will not exceed 200. - The URLs will only contain printable ASCII characters.","solution":"class BrowserHistory: def __init__(self, homepage: str): self.history = [homepage] # Stack for the browser history self.current = 0 # Pointer to the current page in the history def visit(self, url: str) -> None: self.history = self.history[:self.current + 1] # Discard forward history self.history.append(url) self.current += 1 def back(self, steps: int) -> str: self.current = max(0, self.current - steps) # Move back steps or to the beginning return self.history[self.current] def forward(self, steps: int) -> str: self.current = min(len(self.history) - 1, self.current + steps) # Move forward steps or to the end return self.history[self.current]"},{"question":"A librarian is organizing a set of books on a shelf. Each book has a width represented by a positive integer. The librarian wants to ensure that the total width of books on the shelf does not exceed a given limit. Your task is to determine whether it is possible to place all the books on the shelf without exceeding the limit. Example 1: Input N = 4 W[] = {2, 3, 5, 7} L = 15 Output YES Explanation: The total width of all books is 2 + 3 + 5 + 7 = 17, which is less than the limit 15. So, it is possible to place all the books on the shelf. Example 2: Input N = 3 W[] = {4, 6, 9} L = 15 Output NO Explanation: The total width of all books is 4 + 6 + 9 = 19, which exceeds the limit 15. So, it is not possible to place all the books on the shelf. Your task: You don\'t need to print the answer, printing is done by the driver code itself. You have to complete the function CanPlaceBooks() which takes the array W[] and its size N, and the limit L as inputs and returns \\"YES\\" (without quotes) if it is possible to place all the books on the shelf, else returns \\"NO\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints 1 ≤ N ≤ 10^{5} 1 ≤ W_{i} ≤ 10^{9} 1 ≤ L ≤ 10^{18}","solution":"def CanPlaceBooks(N, W, L): Determine if it\'s possible to place all books on the shelf without exceeding the limit. Args: - N (int): Number of books. - W (list of int): Widths of the books. - L (int): Limit of the shelf width. Returns: - str: \'YES\' if all books can be placed on the shelf within the limit, else \'NO\'. total_width = sum(W) if total_width <= L: return \\"YES\\" else: return \\"NO\\""},{"question":"Calculate String Multiplication Write a program that accepts a string and an integer as inputs and returns the string repeated the given number of times. SAMPLE INPUT hello 3 SAMPLE OUTPUT hellohellohello","solution":"def string_multiplication(s, n): Returns the string s repeated n times. return s * n"},{"question":"In a small town, there is a unique communication network made of n nodes, which are connected by m bidirectional edges. Each edge is associated with a unique communication cost, represented as an integer. A rumor starts spreading from one node and can propagate to neighboring nodes via the edges. The goal is to determine the minimum cost required to ensure the rumor spreads from the starting node to all other nodes in the network. You are to write a program that takes the details of the network and the starting node, and then calculates the minimum cost of spreading the rumor to all nodes. Input The first line contains three space-separated integers n, m, and s (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ s ≤ n) — the number of nodes, the number of edges, and the starting node respectively. Each of the following m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — indicating there is an edge between nodes u and v with a communication cost of w. Output Print a single integer — the minimum communication cost required for the rumor to reach all nodes starting from the node s. Examples Input 4 4 1 1 2 3 2 3 4 3 4 5 1 4 10 Output 12 Input 5 4 2 1 2 1 2 3 2 2 4 3 4 5 4 Output 10 Note For the first example, one of the minimum communication cost paths is 1 -> 2 -> 3 -> 4 with costs 3, 4, and 5 summing up to 12. For the second example, the minimum communication cost paths include visiting each node connected to node 2 and their appropriate edges.","solution":"import heapq def min_spreading_cost(n, m, s, edges): # Create an adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Keep track of the total cost and visited nodes total_cost = 0 visited = set() # Use a min-heap to always expand the cheapest edge min_heap = [(0, s)] # (cost, node) while min_heap and len(visited) < n: cost, node = heapq.heappop(min_heap) if node not in visited: visited.add(node) total_cost += cost for edge_cost, next_node in graph[node]: if next_node not in visited: heapq.heappush(min_heap, (edge_cost, next_node)) return total_cost"},{"question":"A software company has built a messaging application where users can send messages to each other. However, due to a bug in the system, the order of the messages received is sometimes reversed. Each message received is represented as a string of lowercase English letters. Given a list of received messages, the company wants to detect if each received message is a \\"mirror message.\\" A \\"mirror message\\" is defined as a message that reads the same forwards and backwards. For each given message, determine if it is a \\"mirror message.\\" -----Input----- The first line of the input contains a single integer n (1 leq n leq 10^5), denoting the number of messages, followed by n lines where each line contains a non-empty string of lowercase English letters, representing a received message. The sum of the lengths of all messages in the input will not exceed 10^6. -----Output----- You should output n lines, each containing \\"YES\\" if the corresponding message is a mirror message or \\"NO\\" if it is not. -----Examples----- Input 5 madam hello racecar abcba software Output YES NO YES YES NO -----Note----- In the first test case, \\"madam\\" reads the same forwards and backwards, so the output is \\"YES\\". In the second test case, \\"hello\\" does not read the same forwards and backwards, so the output is \\"NO\\". In the third test case, \\"racecar\\" is the same when reversed, thus the response is \\"YES\\". In the fourth test case, \\"abcba\\" also reads the same forwards and backwards, so the result is \\"YES\\". In the fifth test case, \\"software\\" does not read the same when reversed, hence the response is \\"NO\\".","solution":"def is_mirror_message(message): Returns \'YES\' if the message is a mirror message, otherwise \'NO\'. return \'YES\' if message == message[::-1] else \'NO\' def check_mirror_messages(messages): Takes a list of messages and returns a list with \'YES\' or \'NO\' for each message depending on whether the message is a mirror message. result = [] for message in messages: result.append(is_mirror_message(message)) return result"},{"question":"Maya is organizing her grandparent\'s old library and wants to create a digital catalog of the books. Each book has multiple genres, and she wants to count the number of unique genres across all the books. Your task is to help Maya by writing a program to determine the set of unique genres from the list of books provided. Input The first line contains an integer N denoting the number of books in the library. The next N lines each contain a comma-separated list of genres for a single book. Output Print the total number of unique genres in the library, followed by the sorted list of these unique genres, each printed on a new line. Constraints 1 <= N <= 100 Each genre name consists of lowercase English letters and will be at most 30 characters long. Each line will contain at most 10 genres. Example Input: 3 fiction,history,mystery science,fiction,technology fantasy,mystery,history,romance Output: 7 fantasy fiction history mystery romance science technology","solution":"def count_unique_genres(N, books): Returns the number of unique genres and a sorted list of these genres. Parameters: N (int): Number of books in the library books (list of strings): Each string is a comma-separated list of genres for a book Returns: tuple: Number of unique genres, sorted list of unique genres genres_set = set() for book in books: genres = book.split(\',\') for genre in genres: genres_set.add(genre) unique_genres_sorted = sorted(genres_set) return len(genres_set), unique_genres_sorted # Sample Input N = 3 books = [ \\"fiction,history,mystery\\", \\"science,fiction,technology\\", \\"fantasy,mystery,history,romance\\" ] # Calling the function number_of_genres, unique_genres_list = count_unique_genres(N, books) print(number_of_genres) for genre in unique_genres_list: print(genre)"},{"question":"You are building a new feature for a shopping website that allows users to purchase products in bulk. You need to calculate the total cost of purchasing a given number of items, where bulk discounts apply. The discounts are characterized by price reductions at certain quantity thresholds. You are given the following inputs: - An integer N, representing the number of different discount tiers. - N pairs of integers where each pair represents a discount tier: (Q_i, P_i) denotes that if the quantity purchased is at least Q_i, each item costs P_i. - An integer M, denoting the total number of items to purchase. The task is to determine the minimum cost to purchase M items given the discount tiers. If multiple discount tiers apply, the most favorable discount (lowest price per item) should be used. -----Constraints----- - 1 leq N leq 10 - 1 leq Q_i leq 10^5 - 1 leq P_i leq 10^5 - 1 leq M leq 10^5 -----Input----- Input is given from Standard Input in the following format: N Q_1 P_1 Q_2 P_2 : Q_N P_N M -----Output----- Print the total minimum cost to purchase M items. -----Sample Input----- 3 10 50 20 40 30 35 25 -----Sample Output----- 875 In this example: - Buying 25 items falls into the second discount tier (20 items or more, price 40 each). - So the total cost is 25 * 40 = 1000. However, if another purchase involves more complex conditions or multiple falls strictly into special cases: 25 items fall into tier (10 at 50), (20 at 40), finally at (30 at 35), then we recalculate properly. Hence the output should get absolute minimum as ≈ 875 instead of fixed one (M items * minimal price tier).","solution":"def calculate_minimum_cost(N, discount_tiers, M): Calculate the minimum cost to purchase M items given certain discount tiers. :param N: Number of discount tiers :param discount_tiers: List of tuples, where each tuple contains (Qi, Pi) :param M: Total number of items to purchase :return: Minimum cost to purchase M items # Sort the discount tiers by quantity in descending order discount_tiers.sort(reverse=True, key=lambda x: x[0]) min_cost = float(\'inf\') for Q, P in discount_tiers: if M >= Q: min_cost = min(min_cost, M * P) return min_cost"},{"question":"Autonomous vehicles are navigating a smart city grid of size N x N. The grid is represented as an adjacency matrix where each element (i, j) contains a boolean value indicating if there\'s a direct road between intersections i and j. The vehicles must travel from a starting intersection S to a destination intersection D. Given the grid\'s adjacency matrix, determine if there is a path from the starting intersection to the destination intersection. Input The input file consists of several test cases T (1 ≤ T ≤ 10). For each test case: - The first line contains a positive integer N (1 ≤ N ≤ 100) specifying the size of the grid. - The next N lines contain N space-separated boolean values (0 or 1) representing the adjacency matrix of the city grid. - The last line contains two integers S and D (0 ≤ S, D < N), the starting and destination intersections respectively. Output For every test case, print \\"YES\\" if there exists a path from S to D, otherwise print \\"NO\\". SAMPLE INPUT 2 3 0 1 0 1 0 1 0 1 0 0 2 4 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 0 3 SAMPLE OUTPUT YES YES","solution":"def is_path_exists(grid, N, S, D): def dfs(node, visited): if node == D: return True visited.add(node) for neighbor in range(N): if grid[node][neighbor] and neighbor not in visited: if dfs(neighbor, visited): return True return False visited = set() return dfs(S, visited) def parse_input(input_string): data = input_string.strip().split(\\"n\\") current_line = 0 T = int(data[current_line]) current_line += 1 results = [] for _ in range(T): N = int(data[current_line]) current_line += 1 grid = [] for _ in range(N): grid.append(list(map(int, data[current_line].split()))) current_line += 1 S, D = map(int, data[current_line].split()) current_line += 1 results.append(is_path_exists(grid, N, S, D)) return results def format_output(results): return \\"n\\".join(\\"YES\\" if result else \\"NO\\" for result in results)"},{"question":"Given a binary matrix, find the largest size square sub-matrix with all 1s. Write a function `maximalSquare` that receives a 2D array `matrix` filled with 0s and 1s, and returns the side length of the largest square containing only 1s. Parameters: - `matrix` (List[List[int]]): A binary 2D array. Output: - An integer that represents the side length of the largest square sub-matrix with all 1s. Example 1: ``` Input: matrix = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"] ] Output: 2 Explanation: The largest square has a side length of 2 and appears on the sub-matrix: [ [\\"1\\",\\"1\\"], [\\"1\\",\\"1\\"] ] ``` Example 2: ``` Input: matrix = [ [\\"0\\",\\"1\\"], [\\"1\\",\\"0\\"] ] Output: 1 Explanation: The largest square has a side length of 1 and appears on both [ [\\"1\\"] ] ``` Example 3: ``` Input: matrix = [ [\\"0\\"] ] Output: 0 Explanation: There are no 1\'s in the matrix so the largest square has a side length of 0. ``` Note: - The matrix will not be larger than 300x300.","solution":"def maximalSquare(matrix): if not matrix: return 0 rows = len(matrix) cols = len(matrix[0]) max_side_length = 0 dp = [[0] * (cols + 1) for _ in range(rows + 1)] for i in range(1, rows + 1): for j in range(1, cols + 1): if matrix[i - 1][j - 1] == \\"1\\": dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Your friend is an aspiring gardener and is trying to maintain a health chart for their plants. Each plant has the following attributes: `water_level` (measured in units) and `height` (measured in centimeters). Every day, each plant grows based on the water_level it has. The growth rate is given as a float value, which represents how much a plant\'s height increases for each unit of water it absorbs. Your task is to simulate the growth of a given number of plants over a specified number of days. Implement a function that takes the initial states of the plants, the growth rate, and the number of days to simulate. The function should return the final height of each plant after the simulation period. **Function Signature:** ```python def simulate_growth(initial_states: List[Tuple[int, float]], growth_rate: float, days: int) -> List[float]: ``` **Input:** - `initial_states`: A list of tuples where each tuple contains two values: the initial `water_level` (integer) and the initial `height` (float) of a plant. - `growth_rate`: A float value indicating the daily growth rate per unit of water. - `days`: An integer representing the number of days to simulate the plant growth. **Output:** - Returns a list of floats representing the final height of each plant. **Example:** ```python initial_states = [(3, 10.0), (5, 15.0)] growth_rate = 2.0 days = 3 print(simulate_growth(initial_states, growth_rate, days)) # Output: [22.0, 30.0] ``` **Explanation:** - For the first plant: initially, it has a height of 10.0 cm and absorbs water units for 3 days. Each day it grows `3 * 2.0 = 6.0` cm. After 3 days, the height will be `10.0 + 3 * 6.0 = 28.0` cm. - For the second plant: initially, it has a height of 15.0 cm and absorbs water units for 5 days. Each day it grows `5 * 2.0 = 10.0` cm. After 3 days, the height will be `15.0 + 3 * 10.0 = 45.0` cm. However, it seems like the growth should be accumulated uniformly across the days. So, the correct output needs to reflect balanced distribution of growth. **Constraints:** - 1 ≤ number of plants ≤ 100 - 1 ≤ water_level ≤ 1000 - 0.0 ≤ height ≤ 10,000.0 - 0.1 ≤ growth_rate ≤ 10.0 - 1 ≤ days ≤ 365","solution":"from typing import List, Tuple def simulate_growth(initial_states: List[Tuple[int, float]], growth_rate: float, days: int) -> List[float]: Given the initial states of plants, growth rate, and number of days, return the final height of each plant. final_heights = [] for water_level, initial_height in initial_states: daily_growth = water_level * growth_rate final_height = initial_height + daily_growth * days final_heights.append(final_height) return final_heights"},{"question":"There is a game called \\"Chained Words\\" that Aida and her friends like to play. Here\'s how it works: - The game starts with a given initial word. - Each player, in turn, modifies the word they received from the previous player. - A player can modify the word in one of three ways: 1. Insert an alphabetic character anywhere in the word. 2. Remove an alphabetic character from anywhere in the word. 3. Replace an existing alphabetic character with another alphabetic character. - This continues for exactly n turns, after which the final player gives the modified word to Aida. Aida suspects that one of her friends might have violated the rules. She wants to know if it\'s possible to transform the initial word into the final word given the permissible modifications and exactly n turns. Your task is to write a function to determine if the final word can be obtained from the initial word after exactly n moves following the game rules. Input The input contains the following: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of turns. - The second line contains the initial word, a non-empty string with a maximum length of 1000 characters. - The third line contains the final word, a non-empty string with a maximum length of 1000 characters. Output Output a single string: \\"YES\\" if it\'s possible to obtain the final word from the initial word after exactly n moves, and \\"NO\\" otherwise. Examples Input 3 hello healo Output YES Input 3 abc abcd Output NO Note In the first example, the initial word \\"hello\\" can be transformed into the final word \\"healo\\" in the following way: - Remove \'l\' from \\"hello\\" to get \\"helo\\" - Insert \'a\' into \\"helo\\" to get \\"healo\\" - No further action needed since the word has been reached in the required number of moves In the second example, though it might seem possible, the number of allowed moves is not sufficient to reach the final word \\"abcd\\" from \\"abc\\" in exactly 3 moves. Hence, the output is \\"NO\\".","solution":"def can_transform(n, initial, final): Determine if it is possible to transform the initial word into the final word with exactly n moves. len_initial = len(initial) len_final = len(final) # Check the required number of moves to get from initial to final min_moves = abs(len_initial - len_final) + sum(1 for i, j in zip(initial, final) if i != j) # Additional or exact moves required if lengths are different if len_initial > len_final: min_moves += len_initial - len_final elif len_final > len_initial: min_moves += len_final - len_initial # Check if n moves are enough and if the difference (n - min_moves) is even (for parity issues) if min_moves <= n and (n - min_moves) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice and Bob are playing a game involving strings. They have a string `s` of length `n` consisting of lowercase English letters. Alice will choose a substring of `s` and Bob will remove the chosen substring from `s`. The goal of the game is to maximize the number of distinct characters in the remaining string. Your task is to find the maximum number of distinct characters that can remain after Bob removes Alice\'s chosen substring. ---Input--- The input consists of multiple test cases. The first line contains a single integer `t` (1 leq t leq 100), which denotes the number of test cases. Description of the test cases follows. The first line of each test case contains an integer `n` (2 leq n leq 100). The second line of each test case contains the string `s` consisting of `n` lowercase English letters. ---Output--- For each test case, print an integer — the maximum number of distinct characters that can remain after Alice chooses a substring and Bob removes it. ---Examples--- Input 2 5 abcde 6 aabbcc Output 4 3 ---Note--- In the first example, Alice can choose to remove any single character, since every character is unique. Bob can remove `a`, `b`, `c`, `d`, or `e`, and the maximum number of distinct characters remaining will be 4. In the second example, Alice can choose the substring \\"aa\\", \\"bb\\", or \\"cc\\". If Alice chooses to remove \\"aa\\", \\"bb\\", or \\"cc\\", Bob is left with \\"bbcc\\", \\"aacc\\", or \\"aabb\\" respectively, each of which has 3 distinct characters.","solution":"def max_distinct_characters(n, s): Returns the maximum number of distinct characters that can remain after removing a substring. max_distinct = 0 for i in range(n): for j in range(i+1, n+1): remaining_string = s[:i] + s[j:] max_distinct = max(max_distinct, len(set(remaining_string))) return max_distinct def main(): import sys input = sys.stdin.read data = input().split() idx = 0 t = int(data[idx]) idx += 1 results = [] for _ in range(t): n = int(data[idx]) idx += 1 s = data[idx] idx += 1 results.append(max_distinct_characters(n, s)) for result in results: print(result)"},{"question":"A palindrome is a string that reads the same forward and backward. Given a series of strings, our task is to determine if each string in the list can be rearranged to form a palindrome. Note that an empty string is considered a valid palindrome. -----Input----- The input consists of N cases. The first line of the input contains a positive integer N. Then follow the N cases. Each case contains a single string consisting of only lowercase letters. -----Output----- For each case, print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". -----Example----- Input: 3 civic ivicc hello Output: YES YES NO","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. Args: s (str): The input string consisting of only lowercase letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter freq = Counter(s) odd_count = sum(1 for v in freq.values() if v % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\" def can_form_palindrome_multiple_cases(strings): For a list of strings, determines if each string can be rearranged to form a palindrome. Args: strings (list[str]): List of input strings consisting of only lowercase letters. Returns: list[str]: List of results (\\"YES\\" or \\"NO\\") for each input string. results = [can_form_palindrome(s) for s in strings] return results"},{"question":"Implement a function string_letter_count that takes a string as input and returns a dictionary with keys as characters and values as the count of those characters in the given string. The function should ignore spaces and be case insensitive. For example: ```python string_letter_count(\\"Hello World\\") == {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} string_letter_count(\\"Python Programming\\") == {\'p\': 2, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 2, \'n\': 2, \'r\': 2, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1} string_letter_count(\\"\\") == {} ```","solution":"def string_letter_count(s): Returns a dictionary with keys as characters and values as the count of those characters in the given string. The function ignores spaces and is case insensitive. s = s.replace(\\" \\", \\"\\").lower() letter_count = {} for char in s: if char in letter_count: letter_count[char] += 1 else: letter_count[char] = 1 return letter_count"},{"question":"Bear is playing a new game with strings and has encountered the following challenge: You are given a string s consisting of lowercase English letters and m queries. Each query is characterized by two integers li and ri, indicating the range [li, ri] (1-based inclusive). For each query, the bear needs to determine if the substring s[li, ri] can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward (e.g., \\"madam\\" or \\"racecar\\"). Help the bear solve this problem. Input The first line contains the string s (1 ≤ |s| ≤ 105), where |s| is the length of the string. The next line contains an integer m (1 ≤ m ≤ 50000), which is the number of queries. Each of the following m lines contains two space-separated integers, li and ri (1 ≤ li ≤ ri ≤ |s|) — the numbers that characterize the current query. Output Print m lines — the answer to each query. For each query, print \\"YES\\" if the substring can be rearranged into a palindrome, otherwise print \\"NO\\". Examples Input abacaba 3 1 7 2 4 3 5 Output YES NO YES Input abcde 2 1 5 2 3 Output NO NO Note In the first sample: 1. The substring for query 1 is \\"abacaba\\". It can be rearranged to form \\"aabbaca\\", which is a palindrome, so the answer is \\"YES\\". 2. The substring for query 2 is \\"bac\\". It cannot be rearranged to form a palindrome, so the answer is \\"NO\\". 3. The substring for query 3 is \\"aca\\". It is already a palindrome, so the answer is \\"YES\\". In the second sample: 1. The substring for query 1 is \\"abcde\\". It cannot be rearranged to form a palindrome, so the answer is \\"NO\\". 2. The substring for query 2 is \\"bc\\". It cannot be rearranged to form a palindrome, so the answer is \\"NO\\".","solution":"def can_form_palindrome(s, queries): Determines if substrings can be rearranged to form a palindrome. :param s: A string of lowercase English letters. :param queries: A list of tuples (li, ri) indicating the range of queries. :return: A list of \\"YES\\" or \\"NO\\" for each query. def is_palindrome_possible(sub): # A string can be rearranged to form a palindrome if at most one character # has an odd count. from collections import Counter freq = Counter(sub) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1 results = [] for li, ri in queries: substring = s[li-1:ri] # Convert 1-based index to 0-based if is_palindrome_possible(substring): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase alphabets only, and an integer `k`. Your task is to determine if you can rearrange the characters in the string such that no two adjacent characters are the same. If it is possible, return any possible resultant string. If it is not possible, return an empty string. # Input - A string `s` (1 ≤ |s| ≤ 10^4), consisting of lowercase alphabets. - An integer `k` (2 ≤ k ≤ 26), specifying the maximum number of different characters you can have in any continuous subsegment of the resultant string. # Output - A string where no two adjacent characters are the same and each continuous subsegment of length `k` contains k different characters. - If no such arrangement is possible, return an empty string. # Example **Input:** ``` aabbcc 3 ``` **Output:** ``` abcabc ``` **Input:** ``` aaaaaa 2 ``` **Output:** ``` \\"\\" ``` **Note:** In the first example, the input string `aabbcc` can be rearranged to `abcabc`, which meets the conditions that no two adjacent characters are the same and every subsegment of length 3 contains 3 different characters. In the second example, the input string `aaaaaa` does not allow rearrangement to meet the conditions, so the output is an empty string.","solution":"from collections import Counter, deque import heapq def rearrangeString(s, k): if k == 1: # If k == 1, any string would be valid because no restriction on character count per segment return s counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = deque() # queue to store the characters that are in the cooldown period while max_heap or wait_queue: if wait_queue and wait_queue[0][1] == len(result): heapq.heappush(max_heap, wait_queue.popleft()[0]) if not max_heap: return \\"\\" freq, char = heapq.heappop(max_heap) result.append(char) if -freq > 1: wait_queue.append(((freq + 1, char), len(result) + k - 1)) return \\"\\".join(result) # Test the function with example inputs print(rearrangeString(\\"aabbcc\\", 3)) # Output: \\"abcabc\\" or similar valid arrangement print(rearrangeString(\\"aaaaaa\\", 2)) # Output: \\"\\""},{"question":"Implement a function called **balancingParentheses** that takes a string as an argument. The string consists of only the characters \\"(\\", \\")\\", \\"{\\", \\"}\\", \\"[\\" and \\"]\\". Your function should determine if the parentheses are balanced, meaning every opening parenthesis has a matching closing parenthesis in the correct order. For example: - \\"**balancingParentheses(\'({[]})\')**\\" should return **true**, since the string has balanced parentheses. - \\"**balancingParentheses(\'([)]\')**\\" should return **false**, since the string does not have balanced parentheses (the closing \')\' is not matched with the appropriate opening \'(\'). The function should return **true** if the parentheses are balanced, and **false** otherwise. *Note that:* - An empty string is considered to have balanced parentheses. - You can assume that the string will contain only the specified characters. Here is the function signature: ```python def balancingParentheses(s: str) -> bool: pass ```","solution":"def balancingParentheses(s: str) -> bool: Determines if the parentheses in the given string are balanced. Args: s (str): A string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] matching = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching.values(): stack.append(char) elif char in matching.keys(): if stack == [] or matching[char] != stack.pop(): return False else: return False return stack == []"},{"question":"You are given an array of integers `heights` representing the heights of buildings, and you are given an integer `bricks` and an integer `ladders`. Write a function to find the furthest building that you can reach by climbing buildings using the given `bricks` and `ladders`. You can use bricks to cover the height difference between two buildings, and each ladder will allow you to go up one building without using any bricks. If the height difference is negative or zero, you don\'t need bricks or ladders. Example 1: Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1 Output: 4 Explanation: Starting at building 0 with height 4, you can: - Use 1 ladder to reach building 1 with height 2. - Use 2 bricks to reach building 2 with height 7. - Use 1 brick to reach building 3 with height 6. - Use 2 bricks to reach building 4 with height 9. Example 2: Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2 Output: 7 Explanation: Starting at building 0, you use ladders to climb from height 4 to 12 and then from height 3 to 18 for the largest height jumps. This allows you to save bricks for smaller jumps. By the time you reach building 7, you have spent all your bricks, so you cannot climb to building 8. Example 3: Input: heights = [14,3,19,3], bricks = 17, ladders = 0 Output: 3 Explanation: You can only use bricks. Starting at building 0, you can: - Use 14 bricks to reach building 1. - Use 16 more bricks to reach building 2. - Use 0 bricks to reach building 3. Constraints: - 1 <= heights.length <= 10^5 - 1 <= heights[i] <= 10^6 - 0 <= bricks <= 10^9 - 0 <= ladders <= heights.length","solution":"import heapq def furthest_building(heights, bricks, ladders): heap = [] # min-heap to store the largest jumps for usage of ladders for i in range(len(heights) - 1): gap = heights[i + 1] - heights[i] if gap > 0: heapq.heappush(heap, gap) # If the number of ladders is smaller than the number of gaps if len(heap) > ladders: bricks -= heapq.heappop(heap) # If we run out of bricks if bricks < 0: return i return len(heights) - 1"},{"question":"A spaceship is navigating through a rectangular coordinate grid of size n x m from the bottom-left corner (1, 1) to the top-right corner (n, m). The spaceship can only move up or to the right from any point in the grid. Along the way, it encounters black holes that it needs to avoid. The spaceship cannot move through a cell containing a black hole but can move adjacent to it. The objective is to find the total number of unique paths the spaceship can take from the starting point to the destination, avoiding all black holes. -----Input----- The first line of the input contains three integers n, m, and b (1 ≤ n, m ≤ 100, 0 ≤ b ≤ 100), where n is the number of rows, m is the number of columns, and b is the number of black holes. Each of the following b lines contains two space-separated integers x_i and y_i (1 ≤ x_i ≤ n, 1 ≤ y_i ≤ m) indicating the position of a black hole. -----Output----- Output a single integer, the total number of unique paths from (1, 1) to (n, m) without passing through any black holes. -----Examples----- Input 3 3 1 2 2 Output 2 Input 4 4 2 2 2 3 3 Output 4 -----Note----- In the first example, there are two possible unique paths from (1, 1) to (3, 3) avoiding the black hole at (2, 2): - (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) - (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) In the second example, there are four possible unique paths avoiding black holes at (2, 2) and (3, 3).","solution":"def unique_paths(n, m, b, black_holes): Returns the number of unique paths from (1, 1) to (n, m) avoiding all black holes. Parameters: - n (int): Number of rows. - m (int): Number of columns. - b (int): Number of black holes. - black_holes (list of tuple): List of (x, y) positions of black holes. Returns: - int: Total number of unique paths. # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Set the starting point grid[0][0] = 1 # Mark black holes in the grid for x, y in black_holes: grid[x-1][y-1] = -1 # Adjusting to 0-based index # Calculate number of paths for i in range(n): for j in range(m): if grid[i][j] == -1: # If it\'s a black hole, do nothing continue # If not in the first row, add paths from the cell above if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] # If not in the first column, add paths from the cell on the left if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] # If the destination is a black hole, there are 0 ways to reach it if grid[n-1][m-1] == -1: return 0 return grid[n-1][m-1]"},{"question":"During a recent hacking competition, participants were asked to write a function that checks if a given password is strong enough. A strong password is defined by the following criteria: 1. It contains at least 8 characters. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: !@#%^&*()-+. Write a function `is_strong_password(password: str) -> bool` that returns `True` if the password meets all the criteria, otherwise returns `False`. Input: - A single string `password` which consists of at most 100 characters including letters, digits, and special characters. Output: - A boolean value indicating whether the password is strong. ------- Examples -------- Input: \\"Passw0rd!\\" Output: True Input: \\"password\\" Output: False Input: \\"P@ssword\\" Output: False Input: \\"12345678\\" Output: False Input: \\"Aa1!\\" Output: False Note: In the first example, the password \\"Passw0rd!\\" meets all the criteria. The subsequent examples fail to meet one or more of the specified conditions.","solution":"import re def is_strong_password(password: str) -> bool: Checks if the given password is strong according to the criteria: - It contains at least 8 characters. - It must contain at least one uppercase letter. - It must contain at least one lowercase letter. - It must contain at least one digit. - It must contain at least one special character from the set: !@#%^&*()-+. :param password: The password to check. :return: True if the password is strong, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False return True"},{"question":"A [linked list](https://en.wikipedia.org/wiki/Linked_list) is a linear data structure where the elements are not stored at contiguous memory locations. Instead, each element, called a node, consists of a data value and a reference to the next node in the sequence. The last node in a linked list points to `null`, indicating the end of the list. In this task, you will write a function to detect if a linked list has a cycle. A cycle occurs if a node’s next reference points to an earlier node, forming a loop. Consider the following examples: These linked lists have cycles: 1 -> 2 -> 3 -> 4 -> 2 ... (cycle repeats from node 2) 7 -> 5 -> 1 -> 2 -> 7 ... (cycle repeats from node 7) These linked lists do not have cycles: 1 -> 2 -> 3 -> 4 -> null 10 -> 20 -> 30 -> null Function signature: ```python def has_cycle(head: Optional[ListNode]) -> bool: # your code here ``` Where `head` is the reference to the first node in the linked list. **Notes:** - Implement the function to run in O(n) time complexity, where n is the number of nodes in the linked list. - You are encouraged to use the Floyd’s Tortoise and Hare algorithm for detecting cycles. - You may assume the linked list consists of nodes defined by the class `ListNode`, where each node has an integer value and a reference to the next node (or `null` if it is the last node). Example: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next # Example 1: # Creating a linked list with a cycle: # 1 -> 2 -> 3 -> 4 -> 2 ... node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # cycle here assert has_cycle(node1) == True # Example 2: # Creating a linked list without a cycle: # 1 -> 2 -> 3 -> 4 -> null node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node1.next = node2 node2.next = node3 node3.next = node4 assert has_cycle(node1) == False ```","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Detects whether a linked list has a cycle using Floyd’s Tortoise and Hare algorithm. :param head: ListNode | The head node of the linked list :return: bool | True if there is a cycle, False otherwise if not head or not head.next: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Emma is an aspiring software engineer. She is fascinated by palindromes. A palindrome is a string that reads the same backward as forward. Emma enjoys finding the longest palindromic substring within a given string. To challenge herself, she has decided to write a program that finds the length of the longest palindromic substring in a given string. -----Input----- The input is a single string s of length n (1 leq n leq 10^4). The string consists of lowercase English letters only. -----Output----- Print a single integer, the length of the longest palindromic substring in s. -----Examples----- Input babad Output 3 Input cbbd Output 2 Input a Output 1 Input faceracecar Output 7 -----Note----- In the first example, the longest palindromic substring is \\"bab\\" and \\"aba\\", both of which have length 3. In the second example, the longest palindromic substring is \\"bb\\", which has length 2. In the third example, the longest palindromic substring is \\"a\\", which has length 1. In the fourth example, the longest palindromic substring is \\"racecar\\", which has length 7.","solution":"def longest_palindromic_substring_length(s): Find the length of the longest palindromic substring in the given string. :param s: input string consisting of lowercase English letters only :return: length of the longest palindromic substring n = len(s) if n == 0: return 0 # Table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True max_length = 1 start = 0 # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for substrings of length 3 to n for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Checking for sub-string from ith index to jth index # iff s[i+1] to s[j-1] is a palindrome if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"# Task You are given a string consisting of lowercase letters and you need to determine the most frequently occurring character in the string. If there are multiple characters that occur the same number of times, return the character that comes first alphabetically. Write a function that fulfills this task. # Example For `input_string = \\"banana\\"`, the output should be `\'a\'`. For `input_string = \\"apple\\"`, the output should be `\'p\'`. # Input/Output - `[input]` string `input_string` A string of lowercase letters where `1 <= len(input_string) <= 10^5`. - `[output]` a character The most frequently occurring character, and if ties occur, the alphabetically first character.","solution":"def most_frequent_char(input_string): from collections import Counter # Count the frequency of each character in the string frequency = Counter(input_string) # Find the maximum frequency max_freq = max(frequency.values()) # Collect all characters with the maximum frequency max_chars = [char for char, freq in frequency.items() if freq == max_freq] # Return the alphabetically first character among those with the maximum frequency return min(max_chars)"},{"question":"Problem Rina and Nami are friends who decided to play a number game. They have an array of integers and play alternately. On their turn, a player must select one integer from the array and remove it. The players continue this until no numbers are left. The goal for each player is to maximize the cumulative XOR of the numbers they have picked. Rina goes first. Both Rina and Nami are equally skilled and will always make the optimal move. Determine if there is a way for Rina to ensure that she wins the game, assuming optimal play by both. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ Ai ≤ 10^9 Input The input is given in the following format: n A1 A2 ... An The first line contains an integer, n, the number of elements in the array. The second line contains n space-separated integers, A1, A2, ..., An, representing the array. Output Print \\"Rina\\" if there is a way for Rina to guarantee a win, or print \\"Nami\\" if there is not. Examples Input 3 1 2 3 Output Nami Input 4 1 2 3 4 Output Rina","solution":"def determine_winner(n, array): cumulative_xor = 0 for num in array: cumulative_xor ^= num # If the cumulative xor is not zero, Rina can guarantee a win return \\"Rina\\" if cumulative_xor != 0 else \\"Nami\\""},{"question":"Implement a function `countBalancedStrings` to determine the number of balanced strings given a specific length N. A balanced string is defined as a string consisting of characters \'a\' and \'b\' with the same number of \'a\'s and \'b\'s. Each test case will provide a specific length N, and your program should output the number of balanced strings of that length modulo 10^9+7. A balanced string of even length `2n` has precisely `n` \'a\'s and `n` \'b\'s. You need to count the number of such balanced strings for the given length. # Input - The first line contains an integer T, the number of test cases. - The next T lines each contain a single integer N, the length of the string. # Output - For each test case, print the number of balanced strings of length N modulo 10^9+7. # Constraints - 1 ≤ T ≤ 100 - 0 ≤ N ≤ 1000 # Notes - If the length N is odd, it is impossible to have a balanced string, so the output should be 0 for such cases. - Use dynamic programming to handle the cases efficiently. # Sample Input ``` 3 2 4 5 ``` # Sample Output ``` 2 6 0 ``` # Explanation - For N = 2, the balanced strings are \\"ab\\" and \\"ba\\". Hence, the output is 2. - For N = 4, the balanced strings are \\"aabb\\", \\"abab\\", \\"abba\\", \\"baab\\", \\"baba\\", and \\"bbaa\\". Hence, the output is 6. - For N = 5, it is not possible to have a balanced string since the length is odd. Hence, the output is 0. # Function Signature ```python def countBalancedStrings(T: int, lengths: List[int]) -> List[int]: ```","solution":"MOD = 10**9 + 7 def countBalancedStrings(T, lengths): def binomial_coeff(n, k): if k > n: return 0 res = 1 for i in range(k): res = res * (n - i) // (i + 1) return res max_length = max(lengths) if lengths else 0 dp = [0] * (max_length + 1) for i in range(0, max_length + 1, 2): n = i // 2 dp[i] = binomial_coeff(i, n) % MOD results = [] for length in lengths: if length % 2 != 0: results.append(0) else: results.append(dp[length]) return results"},{"question":"Alan is working on a software that processes strings. He encounters a problem where he needs to determine the longest substring of a given string which is lexicographically smallest and all characters of this substring are the same. A substring is defined as a contiguous sequence of characters within a string. A string is lexicographically smaller than another string if it comes before the other string in dictionary order. For example, the string \\"a\\" is lexicographically smaller than \\"b\\", and \\"abcd\\" is lexicographically smaller than \\"abdc\\". -----Input----- Each test case consists of a single line containing a string s (1 le |s| le 10^5), composed of lowercase English letters only. The number of test cases, t, can vary and is provided as the first line of input. -----Output----- For each test case, print the lexicographically smallest substring composed of repeating characters and its length. If there are multiple substrings with the same length, output the one that appears first in the string. -----Examples----- Input 3 aaabbbcc abcabcabc zzzabc Output a 3 a 1 a 1 -----Note----- In the first test case, \\"aaa\\" and \\"bbb\\" are the longest substrings of repeating characters. However, \\"aaa\\" is lexicographically smaller than \\"bbb\\", thus the output is \\"a\\" with length 3. In the second test case, all substrings of repeating characters have length 1, and \\"a\\" is the smallest lexicographically and comes first. In the third test case, \\"zzz\\" and \\"a\\" both appear, but \\"a\\" is lexicographically smaller since it comes before \\"z\\". The length is 1 in this case.","solution":"def smallest_lexicographical_substring(s): n = len(s) if n == 0: return \\"\\", 0 min_char = min(s) max_len = 0 current_char = None current_len = 0 min_substring_char = \'\' min_substring_len = 0 for char in s: if char == current_char: current_len += 1 else: if current_char == min_char: if current_len > max_len: max_len = current_len min_substring_char = current_char min_substring_len = current_len current_char = char current_len = 1 if current_char == min_char: if current_len > max_len: max_len = current_len min_substring_char = current_char min_substring_len = current_len if min_substring_char == \\"\\": min_substring_char = min_char min_substring_len = 1 return min_substring_char, min_substring_len def process_cases(input_data): t = int(input_data[0]) results = [] for i in range(1, t + 1): s = input_data[i] substring_char, substring_len = smallest_lexicographical_substring(s) results.append((substring_char, substring_len)) return results"},{"question":"You are given a string containing a mathematical expression with the following constraints: 1. The expression consists of only non-negative integers, parentheses `(` and `)`, and the operators `+`, `-`, `*`, and `/`. 2. The integers and operators are separated by exactly one space. 3. Division is integer division, discarding any remainders. Your task is to write a program that evaluates the given expression and prints the result. Constraints * The length of the input string will not exceed 100 characters. Input A single line containing the string of the mathematical expression. Output A single integer, which is the result of evaluating the expression. Example Input `( 3 + ( 2 * 1 ) )` Output 5 Input `10 + 2 * 6` Output 22","solution":"def eval_expression(expr): Evaluates a given mathematical expression. The expression consists of non-negative integers, parentheses, and the operators +, -, *, /. def compute(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expr): if expr[i] == \' \': i += 1 continue elif expr[i] == \'(\': operators.append(expr[i]) elif expr[i].isdigit(): val = 0 while i < len(expr) and expr[i].isdigit(): val = val * 10 + int(expr[i]) i += 1 values.append(val) i -= 1 elif expr[i] == \')\': while operators and operators[-1] != \'(\': compute(operators, values) operators.pop() else: # operator while (operators and precedence(operators[-1]) >= precedence(expr[i])): compute(operators, values) operators.append(expr[i]) i += 1 while operators: compute(operators, values) return values[-1]"},{"question":"You are given an array of integers. A subarray of this array is any contiguous segment of the array. The sum of a subarray is the sum of all the integers it contains. Find the largest possible sum of a subarray of the given array. Input The first line of the input contains one integer n (1 ≤ n ≤ 105) — the number of integers in the array. The second line contains n space-separated integers — the elements of the array. Each integer in the array is between -106 and 106. Output Output one integer — the largest possible sum of a subarray of the given array. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -1 Output -1 Input 4 1 2 3 4 Output 10","solution":"def max_subarray_sum(n, arr): Finds the largest possible sum of a subarray of the given array. Args: n : int : number of integers in the array arr : list of int : the elements of the array Returns: int : the largest possible sum of a subarray max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Ravi is a marathon runner and wants to practice running across different routes in his city. The city has n intersections connected by m bidirectional roads, and each road has a certain length. Ravi starts his practice at a particular intersection and wants to find the shortest time to reach a specific destination intersection. Assume Ravi runs at a constant speed, thus the time taken to cover a road is directly proportional to its length. You are given the following inputs: - n: the number of intersections in the city. - m: the number of bidirectional roads connecting the intersections. - edges: a 2D array where each element represents a road and is of the form [u, v, w], indicating that there is a road between intersection u and intersection v with length w. - start: the starting intersection. - end: the destination intersection. Your task is to complete the function `shortestRunTime()` which takes the integers n, m, a list of edges, an integer start, and an integer end as input, and returns the shortest time for Ravi to reach the destination intersection from the starting intersection. Example 1: Input: n = 5 m = 6 edges = [[1, 2, 2], [1, 3, 4], [2, 3, 1], [2, 4, 7], [3, 5, 3], [4, 5, 1]] start = 1 end = 5 Output: 6 Explanation: The shortest path is: 1 -> 2 -> 3 -> 5 with a total length of 6. Example 2: Input: n = 4 m = 4 edges = [[1, 2, 3], [1, 3, 1], [3, 4, 2], [2, 4, 5]] start = 1 end = 4 Output: 3 Explanation: The shortest path is: 1 -> 3 -> 4 with a total length of 3. Constraints: - 1 ≤ n ≤ 10^4 - 1 ≤ m ≤ 10^5 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 10^4 - 1 ≤ start, end ≤ n Expected Time Complexity: O((n + m) log n) Expected Auxiliary Space: O(n)","solution":"import heapq def shortestRunTime(n, m, edges, start, end): Returns the shortest time for Ravi to reach the destination intersection from the starting intersection using Dijkstra\'s algorithm. # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm heap = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end]"},{"question":"David loves watching movies and keeps track of all the movies he watches. He rates each movie and stores the rating in his notebook. Each movie has a unique name and a rating given by David. He now wants to know the names of the top k rated movies he has watched. Write a program that finds the top k rated movies from his notebook. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200,000) - the number of movies rated by David. The next n lines contain the name of the movie and its rating, separated by a space. The movie name is a string of length between 1 and 50 characters and the rating is an integer between 1 and 100, inclusive. The last line contains an integer k (1 ≤ k ≤ n) - the number of top rated movies David wants to see. -----Output----- Print the names of the top k rated movies in descending order of their ratings. If there are multiple movies with the same rating, print them in the order they appear in the input. -----Examples----- Input 5 Inception 90 Interstellar 95 Tenet 85 Memento 85 The Prestige 92 3 Output Interstellar The Prestige Inception Input 4 Avatar 78 Titanic 85 The Godfather 100 The Dark Knight 100 2 Output The Godfather The Dark Knight","solution":"def top_k_rated_movies(n, movies, k): Returns the top k rated movies names in descending order of their ratings. If multiple movies have the same rating, they are returned in the order they appear in the input. :param n: int, number of movies. :param movies: list of tuples, where each tuple contains the name of the movie and its rating. :param k: int, number of top rated movies to return. :return: list of strings, top k rated movie names. # Sort movies by rating in descending order and by their original input order if ratings are the same sorted_movies = sorted(movies, key=lambda x: (-x[1], movies.index(x)) ) # Extract the names of the top k rated movies result = [movie[0] for movie in sorted_movies[:k]] return result"},{"question":"**Question: Detective\'s Secret Meetings** Detective Holmes is working on a secret investigation. He schedules his meetings in a way such that he attends only one meeting at a time. Holmes is very cautious, so he will never schedule overlapping meetings deliberately. But sometimes, he wants to find gaps between his meetings to plan some undercover activities. Given a list of meeting start and end times, your task is to help Holmes find the largest gap between any two consecutive meetings. If there are no gaps, i.e., meetings are back-to-back or overlap, return 0. Input The first input line contains an integer n (1 ≤ n ≤ 105), which represents the number of meetings. Next n lines contain the descriptions of the meetings, one meeting per line. The i-th line contains two integers ai and bi (1 ≤ ai < bi ≤ 109) — the start and end times of the i-th meeting. No two meetings will have the same start or end time, but meetings may overlap. Output Print the largest gap between any two consecutive meetings. If there are no gaps, print 0. Examples Input 3 1 5 10 15 20 25 Output 5 Input 4 1 4 2 10 12 15 20 25 Output 5 Input 2 5 10 10 15 Output 0 Note In the first example, the largest gap is between the meetings (5, 10) and (15, 20), which is 5 time units. In the second example, the meetings (1, 4) and (2, 10) overlap. The gap between the meetings ending at time 10 and starting at time 12 is 2 time units. The largest gap is between the meetings ending at 15 and starting at 20, which is 5 time units. In the third example, the two given meetings are back-to-back, so there is no gap between them. Hence, the output is 0.","solution":"def largest_gap(n, meetings): Finds the largest gap between any two consecutive meetings. :param n: Number of meetings :param meetings: List of tuples, where each tuple contains start and end times of a meeting :return: The largest gap between any two consecutive meetings # Sort meetings by their start time meetings.sort() max_gap = 0 # Initialize the end time of the first meeting prev_end = meetings[0][1] for i in range(1, n): start, end = meetings[i] gap = start - prev_end if gap > max_gap: max_gap = gap prev_end = end return max_gap"},{"question":"You have been given a sentence containing both uppercase and lowercase letters. However, there are no punctuation marks or spaces. Your task is to insert a space before every uppercase letter (except for the first character of the sentence if it is an uppercase letter) and then convert the entire sentence to lowercase. |s| denotes the length of the sentence. Constraints: 1 < |s| < 200 Input: It will consist of one line, containing the sentence. Output: Consists of one line containing the modified sentence in lowercase. Sample Input: HelloWorldThisIsPython Sample Output: hello world this is python","solution":"def insert_space_and_lowercase(sentence): Inserts a space before every uppercase letter (except the first one if it is uppercase) and converts the entire sentence to lowercase. modified_sentence = [] for i, char in enumerate(sentence): if char.isupper() and i != 0: modified_sentence.append(\' \') modified_sentence.append(char.lower()) return \'\'.join(modified_sentence)"},{"question":"You are given a list of digits, and you need to form the largest possible number by arranging these digits. However, you are only allowed to swap adjacent digits. Your task is to determine the largest number you can form in the given number of swaps. # Input The input consists of two parts: 1. A string `digits` representing the list of digits. 2. An integer `k` representing the maximum number of adjacent swaps allowed. # Output Print a single string representing the largest number that can be formed in at most `k` swaps. # Examples Example 1 **Input** ``` 98765 1 ``` **Output** ``` 98765 ``` Example 2 **Input** ``` 254 1 ``` **Output** ``` 524 ``` Example 3 **Input** ``` 596 2 ``` **Output** ``` 965 ``` # Constraints - `1 <= len(digits) <= 100` - `0 <= k <= 100`","solution":"def largestNumberWithAdjacentSwaps(digits, k): digits = list(digits) n = len(digits) for i in range(n): if k <= 0: break max_digit_position = i for j in range(i + 1, min(i + k + 1, n)): if digits[j] > digits[max_digit_position]: max_digit_position = j for j in range(max_digit_position, i, -1): digits[j], digits[j - 1] = digits[j - 1], digits[j] k -= 1 return \'\'.join(digits)"},{"question":"You are given a 2D array `grid` representing a maze where each cell is either open (0) or blocked (1). Your task is to find the shortest path from the top-left corner (0,0) to the bottom-right corner (m-1, n-1) such that you can move up, down, left, or right from a cell to an adjacent cell. The path can only pass through open cells. If no such path exists, return -1. Write a function `shortestPath` that accepts a grid and returns the length of the shortest path from start to end, or -1 if no path exists. ``` def shortestPath(grid: List[List[int]]) -> int: pass ``` Example 1: ``` Input: grid = [ [0, 0, 0], [1, 1, 0], [1, 1, 0] ] Output: 4 Explanation: The shortest path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) with total length 4. ``` Example 2: ``` Input: grid = [ [0, 1], [1, 0] ] Output: -1 Explanation: There is no valid path from (0, 0) to (1, 1). ``` Example 3: ``` Input: grid = [ [0] ] Output: 0 Explanation: The starting cell is also the ending cell. ``` Constraints: - `m == grid.length` - `n == grid[i].length` - 1 <= m, n <= 100 - grid[i][j] is either 0 or 1","solution":"from collections import deque from typing import List def shortestPath(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) if m == 1 and n == 1: return 0 if grid[0][0] == 0 else -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: if nx == m - 1 and ny == n - 1: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Given an integer array `arr` and an integer `target`, check if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j]` is equal to `target`. Return true if such indices exist, otherwise return false. Example 1: Input: arr = [1, 2, 3, 4], target = 5 Output: true Explanation: Index `i = 0` and `j = 3` gives 1 + 4 = 5. Example 2: Input: arr = [1, 2, 3, 4], target = 8 Output: false Explanation: There are no two distinct indices in the array that sum to 8. Example 3: Input: arr = [-1, 0, 1, 2], target = 1 Output: true Explanation: Index `i = 0` and `j = 3` gives -1 + 2 = 1. Your task: You don\'t have to read input or print anything. Your task is to complete the function `hasTwoSum` that takes the list `arr` and integer `target` as parameters and returns a boolean value indicating whether such indices exist. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ len(arr) ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def hasTwoSum(arr, target): Checks if there are two distinct indices in arr such that arr[i] + arr[j] equals to target. Parameters: arr (list of int): The list of integers. target (int): The target sum. Returns: bool: True if such indices exist, otherwise False. num_map = {} for i, num in enumerate(arr): complement = target - num if complement in num_map: return True num_map[num] = i return False"},{"question":"You are organizing a game event where players compete based on their performance metrics. Each player gets points from different activities, and their final score is determined by the sum of these points. You need to write a program to determine the rank of a specific player. You will be given the scores of several players. Each player is identified by a unique ID, and you want to find out the rank of a specific player, based on their total points. The rank is defined in descending order, i.e., the player with the highest points gets rank 1. If two or more players have the same total points, they share the same rank, but the next rank(s) should skip the number of duplicate ranks seen. # Input: The first line contains an integer n (1 leq n leq 1,000), indicating the number of players. The next n lines each contain an integer ID and a sequence of non-negative integers representing the points from different activities. Each line corresponds to one player’s data. The last line contains an integer target_ID representing the ID of the player whose rank you want to determine. # Output: Print a single integer, representing the rank of the player with ID target_ID. # Example: Input ``` 4 1 10 20 30 2 30 20 10 3 20 30 40 4 10 10 10 2 ``` Output ``` 2 ``` Explanation: - Player 1: 10 + 20 + 30 = 60 - Player 2: 30 + 20 + 10 = 60 - Player 3: 20 + 30 + 40 = 90 - Player 4: 10 + 10 + 10 = 30 The ranks are: 1. Player 3 with 90 points 2. Player 1 and Player 2 with 60 points 3. Player 4 with 30 points Player 2\'s rank is 2.","solution":"def determine_rank(n, player_data, target_ID): # Calculate total points for each player in a dictionary scores = {} for player in player_data: player_info = player.split() player_id = int(player_info[0]) player_scores = map(int, player_info[1:]) total_points = sum(player_scores) scores[player_id] = total_points # Get the target player\'s total points target_score = scores[target_ID] # Get all unique scores in descending order unique_scores = sorted(set(scores.values()), reverse=True) # Determine the rank of the target score rank = unique_scores.index(target_score) + 1 return rank"},{"question":"You have an array of integers representing stock prices on different days. Your task is to calculate the maximum profit that can be achieved by buying and then later selling a single share of the stock. You must buy the stock before you can sell it. Constraints * 1 ≤ n ≤ 1000 * 0 ≤ price[i] ≤ 10000 Input The input consists of multiple datasets. Each dataset is given in the following format: n price1 price2 ... pricen The input ends with a single zero for n. Output For each dataset, print the maximum profit in a line. If no profit can be achieved, print 0. Example Input 6 7 1 5 3 6 4 5 7 6 4 3 1 4 1 2 3 4 0 Output 5 0 3","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and then later selling a single share of the stock from the given list of prices. if not prices or len(prices) == 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def parse_input(input_data): Parses the multiple datasets input and returns the results for maximum profits. lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break prices = list(map(int, lines[i + 1].strip().split())) results.append(max_profit(prices)) i += 2 return results def process_input(input_data): Takes input data as a string, processes it, and returns the result as a list. results = parse_input(input_data) return results"},{"question":"Task Write a function that accepts a list of integers and returns a new list with only the elements that have an even number of digits. Input A list of integers. Example ```python filter_even_digit_numbers([123, 22, 4567, 789]) # --> [22, 4567] ```","solution":"def filter_even_digit_numbers(numbers): Filters the given list of integers and returns a new list with only the elements that have an even number of digits. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: A list where each integer has an even number of digits. return [num for num in numbers if len(str(abs(num))) % 2 == 0]"},{"question":"Given a list of integers, an integer is considered to be a \\"good number\\" if the sum of any non-empty subset of numbers in the list is not divisible by 3. Design a function `countGoodNumbers(lst)` to determine how many integers in the list qualify as \\"good numbers.\\" Function Description: Complete the function `countGoodNumbers` in the editor below. The function should return an integer, the count of \\"good numbers\\" in the given list. `countGoodNumbers` has the following parameter: - `lst`: a list of integers. Constraints: - 1 leq len(lst) leq 10^5 - -10^9 leq lst[i] leq 10^9 Input Format: - The first line contains an integer `n`, the number of elements in the list. - The second line contains `n` space-separated integers representing the list. Output Format: - Output a single integer, the count of \\"good numbers.\\" Sample Input 1: ``` 5 1 2 4 5 8 ``` Sample Output 1: ``` 5 ``` Explanation 1: - All elements are \\"good numbers\\" as none can form a subset whose sum is divisible by 3. Sample Input 2: ``` 4 3 6 9 12 ``` Sample Output 2: ``` 0 ``` Explanation 2: - None of the elements are \\"good numbers\\" because each of these values alone is divisible by 3. Note: Ensure your solution is efficient to handle the upper constraint limits.","solution":"def countGoodNumbers(lst): good_count = 0 for number in lst: if number % 3 != 0: good_count += 1 return good_count # Example usage: # lst = [1, 2, 4, 5, 8] # print(countGoodNumbers(lst)) # Output: 5"},{"question":"A father has a curious son who loves to play with strings and is particularly fond of palindromes. One day, the son asked his father to write a program that helps him find palindromes within random strings. The father decided to make the task more interesting by making it a bit challenging. The task is to find the longest substring in a given string that is a palindrome. Note that the palindrome may have multiple occurrences but you need to return the longest one. # Input - The input consists of a single line containing a string S (1 ≤ |S| ≤ 1000). The string S contains only lowercase English letters (\'a\' - \'z\'). # Output - Output the longest palindromic substring in S. If there is more than one substring with the maximum length, output the first one which appears. # Example Input ``` babad ``` Output ``` bab ``` - Note that \\"aba\\" is also a valid answer but \\"bab\\" appears first. Input ``` cbbd ``` Output ``` bb ``` # Note In the first example, the longest palindromic substrings are \\"bab\\" and \\"aba\\". Since \\"bab\\" appears first, it is the answer. In the second example, the longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in the given string s. If there are multiple substrings of the same maximum length, return the first one. n = len(s) if n <= 1: return s start, max_length = 0, 1 for i in range(n): if i - max_length >= 1 and s[i - max_length - 1: i + 1] == s[i - max_length - 1: i + 1][::-1]: start = i - max_length - 1 max_length += 2 elif i - max_length >= 0 and s[i - max_length: i + 1] == s[i - max_length: i + 1][::-1]: start = i - max_length max_length += 1 return s[start: start + max_length]"},{"question":"You are given a string `s` of length `n` consisting of lowercase letters. You can perform the following operations: * Append a single character anywhere in the string. * Delete a single character from anywhere in the string. * Replace a single character with another character. Each operation has a certain cost associated with it, represented by three integers `a`, `b`, and `c`, respectively. Your task is to transform the string `s` into a palindrome with the minimum possible cost. A palindrome is a string that reads the same backward as forward. Input The first line contains an integer `n` (1 ≤ n ≤ 2·10^5) — the length of the string `s`. The second line contains a string `s` of length `n` consisting only of lowercase letters. The third line contains three integers `a`, `b`, and `c` (0 ≤ a, b, c ≤ 10^9) — the costs of appending, deleting, and replacing a character, respectively. Output Print a single integer — the minimum cost to transform the string `s` into a palindrome. Examples Input 4 abca 1 2 3 Output 1 Input 3 abc 3 5 2 Output 2 Note In the first example, you can append the character \'a\' at the end with a cost of 1, making the string \\"abcaa\\", which is a palindrome. In the second example, you can replace the character \'c\' with \'a\' with a cost of 2, making the string \\"aba\\", which is a palindrome.","solution":"def min_cost_to_palindrome(n, s, a, b, c): Calculate the minimum cost to transform the input string into a palindrome. :param n: Length of the string `s`. :param s: The input string consisting of lowercase letters. :param a: Cost to append a character. :param b: Cost to delete a character. :param c: Cost to replace a character. :return: The minimum cost to transform the string `s` into a palindrome. # Two pointers approach left = 0 right = n - 1 cost = 0 while left < right: if s[left] != s[right]: # Calculate the costs for each possible operation cost_replace = c cost_append_delete = min(a, b) # Choose the minimum cost operation to make the characters equal cost += min(cost_replace, cost_append_delete) left += 1 right -= 1 return cost"},{"question":"Chef is building a new feature for his cooking website that recommends a sequence of dishes based on the user\'s taste preferences. Each dish has a specific flavor level, and the dishes must be arranged in such a way that flavors gradually increase or decrease in steps of exactly one unit. Chef\'s team must verify if a given sequence of dishes can form a valid recommendation list according to the specified rules. To validate the sequence of dishes, they need to ensure that each subsequent dish in the list has a flavor level that is exactly one unit higher or lower than the previous dish. Additionally, the sequence cannot contain any repeated flavor levels. Write a function that will take a list of dishes with their respective flavor levels and determine if the sequence is valid according to these rules. ------ Input ------ First line contains number of test cases T. The first line of each test case contains the number of dishes N. Second line of each test case contains N space-separated integers representing the flavor levels of the dishes from F_{1} to F_{N}. ------ Output ------ For each test case, output a single line with either \\"VALID\\" if the sequence meets the required criteria, or \\"INVALID\\" if it does not, without quotes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ F_{i} ≤ 10^{9} Integers in F are distinct ------ Sample Input 1 ------ 2 5 3 4 5 6 7 6 10 9 8 7 6 5 ------ Sample Output 1 ------ VALID VALID ------ Sample Input 2 ------ 2 4 1 2 4 3 3 5 5 6 ------ Sample Output 2 ------ INVALID INVALID","solution":"def validate_dishes(test_cases): results = [] for dishes in test_cases: N = dishes[0] # Number of dishes flavors = dishes[1] # List of flavor levels valid = True for i in range(1, N): if abs(flavors[i] - flavors[i - 1]) != 1: valid = False break if valid: results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Create a function `nearest_larger_element(arr, target)` that takes as input a list of integers `arr` and an integer `target`, and returns the nearest larger element on the right side of `target` in the list. If there is no larger element on the right, return -1. If the target element is not in the array, return -1. The function should be efficient with a time complexity better than O(n^2). # Examples ``` nearest_larger_element([4, 1, 3, 5, 6], 3) -> 5 nearest_larger_element([4, 1, 3, 5, 6], 6) -> -1 nearest_larger_element([4, 1, 3, 5, 6], 2) -> -1 ``` # Explanation For the first example, the element 3 exists in the list and the nearest larger element to the right of it is 5. For the second example, the element 6 exists in the list but there is no larger element to the right of it. Therefore, the function returns -1. For the third example, the element 2 does not exist in the list. Therefore, the function returns -1.","solution":"def nearest_larger_element(arr, target): Returns the nearest larger element on the right side of target in the list. If there is no larger element on the right, returns -1. If the target element is not in the array, returns -1. # Check if the target is in the array if target not in arr: return -1 # Find the index of the first occurrence of target target_index = arr.index(target) # Iterate over the array from the element right after target_index for i in range(target_index + 1, len(arr)): if arr[i] > target: return arr[i] # If no larger element is found return -1"},{"question":"You are a software developer for a logistics company. Your company needs a program to calculate the shortest delivery route between cities based on the distance matrix provided. The distance matrix is a 2D list where the element at the i-th row and j-th column represents the distance between city i and city j. Write a function `shortest_route(matrix)` that takes a distance matrix as input, assuming that the distance from a city to itself is always 0. The function should return the length of the shortest route that visits each city exactly once and returns to the starting city. Input: A 2D list `matrix` where `matrix[i][j]` represents the distance from city `i` to city `j`. Output: An integer representing the shortest possible route that visits each city exactly once and returns to the starting city. Constraints: 1. 1 ≤ len(matrix) ≤ 10 2. 0 ≤ matrix[i][j] ≤ 1000 SAMPLE INPUT [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]] SAMPLE OUTPUT 80 Explanation The sample input represents the distance matrix for 4 cities: - Distance from city 0 to city 1 is 10 - Distance from city 0 to city 2 is 15 - Distance from city 0 to city 3 is 20 - .... The shortest route visiting all cities exactly once and returning to the starting city would be 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 80.","solution":"from itertools import permutations def shortest_route(matrix): n = len(matrix) perm = permutations(range(n)) min_route = float(\'inf\') for p in perm: current_distance = 0 for i in range(len(p) - 1): current_distance += matrix[p[i]][p[i+1]] current_distance += matrix[p[-1]][p[0]] # Add the return to starting city distance min_route = min(min_route, current_distance) return min_route"},{"question":"Given a string expression that may contain open \'(\' and close \')\' parentheses, determine if the expression has balanced parentheses. A string is said to be balanced if there are no unmatched parentheses and if the subset of parentheses enclosed within the confines of a matched pair of parentheses is also balanced. Example 1: Input: \\"((()))\\" Output: True Explanation: All the opening brackets have closing brackets. There are no unmatched parentheses. Example 2: Input: \\"(()())\\" Output: True Explanation: Every opening brace has a corresponding closing brace and all braces are in proper order. Example 3: Input: \\"())(\\" Output: False Explanation: The third position has a closing brace without a corresponding opening brace and the fourth position has an opening brace without a corresponding closing brace. Example 4: Input: \\"\\" Output: True Explanation: An empty string is considered balanced since it contains no unbalanced parentheses. Your Task: You don\'t need to read input or print anything. You just need to complete the function `isBalanced` which takes a single string `expression` and returns a boolean indicating whether the input string has balanced parentheses or not. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= length of expression <= 100","solution":"def isBalanced(expression): Returns True if the given expression has balanced parentheses, otherwise False. stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"A company plans to distribute Christmas gifts to its employees. Each employee is uniquely identified by an ID number in the range [0, n-1]. The company wants to ensure a balanced distribution such that no employee receives more than one gift and all gifts are distributed. Given an array `gifts` of length n, where each element represents the preference of the employees for each gift type (numerically represented), write a function to determine if a balanced gift distribution is possible. A balanced gift distribution means that each gift type must be given to exactly one employee, and no employee receives more than one gift. Your task is to implement a function `isBalancedDistribution(gifts: List[int]) -> bool`. If it is possible to distribute the gifts in a balanced way, return `True`; otherwise, return `False`. Example: Input: gifts = [0, 1, 2, 3] Output: True Input: gifts = [1, 2, 2, 3] Output: False Explanation: - In the first example, each employee has a unique preference, so a balanced distribution is possible. - In the second example, two employees prefer the same gift type (2), making it impossible to distribute in a balanced manner. Constraints: - 1 ≤ n ≤ 1000 - 0 ≤ gifts[i] < n - All elements in the array are integers.","solution":"from typing import List def isBalancedDistribution(gifts: List[int]) -> bool: Determine if a balanced gift distribution is possible :param gifts: A list of integers indicating the preferred gift type of each employee :return: True if balanced distribution is possible, otherwise False return len(gifts) == len(set(gifts))"},{"question":"Joe is organizing a music playlist with N songs. Each song is characterized by a length in seconds. To meet the event requirements, the total duration of the playlist must fall within a given range [L, R]. To help Joe, you need to determine if there is a subset of the songs that satisfies this requirement. If such a subset exists, print \\"Yes\\" along with the lengths of the songs in that subset. If no such subset exists, print \\"No\\". You can assume that each song length is unique. -----Constraints----- - 1 leq N leq 50 - 1 leq Length of each song leq 5000 - 1 leq L, R leq 25000 -----Input----- Input is given from Standard Input in the following format: N L R song_1 song_2 : song_N -----Output----- If it is possible to form the playlist within the given range, print \\"Yes\\" on the first line. On the subsequent lines, print the lengths of the songs in the subset. If it is not possible, print \\"No\\". -----Sample Input----- 5 500 1200 100 300 400 500 700 -----Sample Output----- Yes 500 700 You can create the subset {500, 700}, which has a total duration of 1200 seconds, fitting within the required range [500, 1200].","solution":"def find_playlist_subset(songs, L, R): Determines if there is a subset of songs whose total length is within the range [L, R]. n = len(songs) possible_sums = {0: []} for song in songs: new_sums = {} for s in possible_sums: new_sum = s + song if new_sum <= R: new_sums[new_sum] = possible_sums[s] + [song] possible_sums.update(new_sums) for total in possible_sums: if L <= total <= R: return \\"Yes\\", possible_sums[total] return \\"No\\", [] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) L = int(data[1]) R = int(data[2]) songs = list(map(int, data[3:])) result, subset = find_playlist_subset(songs, L, R) if result == \\"Yes\\": print(result) for song in subset: print(song) else: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Tina loves solving puzzles. She has a number puzzle that consists of an array of integers. The puzzle asks her to perform operations on the elements of the array to obtain a new array where the sum of the elements is maximum. Here’s how the operation works: Tina can choose any two elements of the array, say A_i and A_j, and replace any one of them with their sum, i.e., she can replace A_i with A_i + A_j or A_j with A_i + A_j. Tina can perform this operation any number of times. Help Tina find the maximum possible sum of elements of the array after performing the operations optimally. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N, the number of elements in the array. The second line contains N space-separated integers A_1, A_2, ldots, A_N, representing the elements of the array. ------ Output ------ For each test case, print a single line containing one integer — the maximum sum of the elements that can be achieved. ------ Constraints ------ 1 leq T leq 100 2 leq N leq 50 1 leq A_i leq 1000 for each valid i ------ Sample Input ------ 2 3 1 2 3 4 5 3 9 1 ------ Sample Output ------ 6 18 ------ Explanation ------ In the first test case, Tina can: 1. Combine the first and second elements to get the array [3, 3] with a sum of 6. In the second test case, Tina can: 1. Combine the first and fourth elements to get the array [6, 3, 9] with a sum of 18. No further operations are required as any further combination would not change the sum.","solution":"def max_sum_possible(arr): Returns the maximum possible sum of elements of the array after performing the operations optimally. return sum(arr) def solve_case(n, arr): Solves a single test case. return max_sum_possible(arr) def max_sum_of_elements(test_cases): results = [] for case in test_cases: n, arr = case results.append(solve_case(n, arr)) return results # Example usage: # test_cases = [ # (3, [1, 2, 3]), # (4, [5, 3, 9, 1]), # ] # print(max_sum_of_elements(test_cases))"},{"question":"Given a string S, print the characters in reverse order. Example 1: Input: S = \\"Geeks\\" Output: \\"skeeG\\" Example 2: Input: S = \\"Programming\\" Output: \\"gnimmargorP\\" Your Task: Complete the function reverseString() which takes a string S as input parameter and returns the reversed string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^{5} S contains only printable ASCII characters.","solution":"def reverseString(S): Returns the string S in reverse order. return S[::-1]"},{"question":"Given a list of integers, find the maximum product that can be obtained from multiplying any three of the integers in the list. Return the maximum product. Input A list of integers separated by spaces. The list will have at least three integers. Output Single integer representing the maximum product of multiplying any three integers from the list. Example Input 1 2 3 4 Output 24 Input -10 -10 5 2 Output 500","solution":"import itertools def max_product_of_three(nums): nums.sort() # The maximum product of three numbers can be obtained in two cases: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (both might be negative) and the largest number product1 = nums[-1] * nums[-2] * nums[-3] product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"},{"question":"Implement the function/method so that it takes a string containing a mathematical expression (infix notation) and returns the result of the expression as an integer. The expression will include positive integers and the operators +, -, *, and /. Division should be integer division. Examples: ``` python # returns 7 evaluate_expression(\\"3+2*2\\") # returns 1 evaluate_expression(\\" 3/2 \\") # returns 5 evaluate_expression(\\" 3+5 / 2 \\") # returns 9 evaluate_expression(\\"3 * 3\\") ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression in infix notation and returns the result as an integer. The expression includes positive integers and the operators +, -, *, and / (integer division). def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # Ensure integer division def precedence(op): if op in (\'+\', \'-\'): return 1 elif op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'0123456789\': val = 0 while i < len(expression) and expression[i] in \'0123456789\': val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are given an array of integers containing N elements. You can perform the following operation any number of times (possibly zero): Select an integer x (1 ≤ x ≤ N) and replace any element in the array with x. Determine if it is possible to make all elements in the array distinct after performing some operations. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with an integer N denoting the number of elements in the array. - The second line of each test case contains N integers separated by spaces representing the elements of the array. ------ Output Format ------ For each test case, output the string YES if it is possible to make all elements of the array distinct, and NO if it is not. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ a[i] ≤ 1000 for each element in the array ------ Sample Input 1 ------ 3 4 1 2 2 3 5 1 1 1 1 1 6 6 5 4 3 2 1 ------ Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ Test case 1: One possible sequence of operations is as follows: - Replace the second occurrence of the element \'2\' with \'4\' Test case 2: One possible sequence of operations is as follows: - Replace the first element \'1\' with \'2\' - Replace the second element \'1\' with \'3\' - Replace the third element \'1\' with \'4\' - Replace the fourth element \'1\' with \'5\' In both cases, the resulting array has all distinct elements. Hence, the answers are YES for the first two test cases and YES for the third test case since the array is already distinct.","solution":"def can_make_all_elements_distinct(test_cases): results = [] for case in test_cases: N, arr = case if len(arr) == len(set(arr)): results.append(\\"YES\\") else: elements_count = [0] * (N + 1) for num in arr: if num <= N: elements_count[num] += 1 # Count duplicates duplicates = sum(x - 1 for x in elements_count if x > 1) # Number of possible replacements is the number of unique elements that we can use (1 to N) possible_replacements = N - len(set(arr)) if duplicates <= possible_replacements: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Read problem statements in various languages including Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese. In a fantastic little village, there\'s a tradition that whenever someone celebrates their birthday, they invite everyone they\'ve ever invited before to their birthday party, including themselves. The village starts with one person known as the villager zero (V0) and they have their birthday at day one. Given a day number, determine how many people in total have been invited to birthday parties up to and including that day. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer D denoting the day number. ------ Output ------ For each test case, print a single integer — the total number of people invited to birthday parties up to and including day D. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ D ≤ 1000 ------ Sample Input 1 ------ 2 1 2 ------ Sample Output 1 ------ 1 2 ------ Explanation 1 ------ On day 1, villager zero (V0) has their birthday and invites 1 person (themselves). On day 2, there are the original invitee (V0) and 1 newly invited person, making it a total of 2 people invited by now.","solution":"def total_invitations(T, days): Given T test cases and a list of day numbers, return a list of total number of people invited to birthday parties up to and including each day. Each day corresponds to a complete graph invitation pattern where the number of people invited is equal to the day number because each day introduces exactly one more person. Parameters: - T: int, number of test cases - days: List[int], list of day numbers to calculate invitations for Returns: - List[int], total number of people invited for each day in the input list return [day for day in days]"},{"question":"Given an array A of integers where each element represents the height of a building at that index, return the maximum water that can be stored between two buildings while forming a container. The width of the container is considered to be the difference in their indices. Example 1: Input: [1,8,6,2,5,4,8,3,7] Output: 49 Example 2: Input: [1,1] Output: 1 Example 3: Input: [4,3,2,1,4] Output: 16 Example 4: Input: [1,2,1] Output: 2 Note: - 2 <= A.length <= 100000 - 0 <= A[i] <= 10000","solution":"def max_water_container(heights): Returns the maximum amount of water that can be stored between two buildings. The width of the container is considered to be the difference in their indices. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left min_height = min(heights[left], heights[right]) max_water = max(max_water, width * min_height) # Move the pointer which points to the shorter building if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are given a pattern string and a text string. The objective is to check if the text matches the pattern. The pattern string `p` may contain the special character `\'*\'`, which stands for zero or more characters, and `\'.\'`, which stands for any single character. Implement a function to determine if the pattern matches the text. -----Input----- The first line contains the pattern string `p` which can be of length between 1 and 100. The second line contains the text string `t` which can be of length between 1 and 1000. -----Output----- Print a single line containing `\\"true\\"` if the pattern matches the text, otherwise `\\"false\\"`. -----Examples----- Input a*b.c aazbec Output true Input mis*is*p*. mississippi Output false","solution":"def is_match(text, pattern): Determines if the given text matches the pattern. The pattern may contain \'*\' (matching zero or more characters) and \'.\' (matching any single character). def dfs(t_index, p_index): if p_index == len(pattern): return t_index == len(text) first_match = (t_index < len(text)) and (pattern[p_index] in {text[t_index], \'.\'}) if p_index + 1 < len(pattern) and pattern[p_index + 1] == \'*\': return (dfs(t_index, p_index + 2) or (first_match and dfs(t_index + 1, p_index))) else: return first_match and dfs(t_index + 1, p_index + 1) return \\"true\\" if dfs(0, 0) else \\"false\\""},{"question":"# Anagram Checker Write a function that takes two strings and determines if they are anagrams (i.e., both strings consist of exactly the same characters in any order). The function should return `True` if the strings are anagrams, otherwise `False`. Examples: ```python anagram(\\"listen\\", \\"silent\\") ➞ True anagram(\\"triangle\\", \\"integral\\") ➞ True anagram(\\"apple\\", \\"pale\\") ➞ False ```","solution":"def anagram(str1, str2): Determines if two strings are anagrams. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. # Anagrams must be the same length if len(str1) != len(str2): return False # Sort the characters of both strings and compare return sorted(str1) == sorted(str2)"},{"question":"A gardener has a rectangular garden of length N meters and width M meters. He wants to plant trees around the perimeter of the garden. Each tree needs exactly 1 meter of space. Determine the number of trees needed to plant around the garden. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing two space-separated integers N and M — the length and width of the garden. ------ Output Format ------ For each test case, output in a single line, the number of trees required to plant around the garden. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N,M ≤ 1000 ----- Sample Input 1 ------ 3 5 3 7 8 15 10 ----- Sample Output 1 ------ 16 30 50 ----- Explanation 1 ------ Test case 1: The total perimeter of the garden is 2 cdot 5 + 2 cdot 3 = 16 meters. So, 16 trees are needed to plant around the garden. Test case 2: The total perimeter of the garden is 2 cdot 7 + 2 cdot 8 = 30 meters. So, 30 trees are needed to plant around the garden. Test case 3: The total perimeter of the garden is 2 cdot 15 + 2 cdot 10 = 50 meters. So, 50 trees are needed to plant around the garden.","solution":"def number_of_trees_around_garden(N, M): Returns the number of trees needed to plant around the perimeter of the garden. Parameters: N (int): Length of the garden. M (int): Width of the garden. Returns: int: Number of trees needed. return 2 * (N + M) def solve_gardens(test_cases): Solves the problem for multiple test cases and returns the results. Parameters: test_cases (list of tuples): List of tuples where each tuple contains two integers (N, M) Returns: list: List of results for each test case results = [] for N, M in test_cases: results.append(number_of_trees_around_garden(N, M)) return results"},{"question":"Analyzing Trails A robot is placed on an infinite 2D orthogonal grid. The robot can move up, down, left, or right. It starts at position (0,0) and is given a sequence of moves consisting of characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Write a function that determines if the robot returns to the origin after following the sequence of moves. # Function Signature ```python def is_robot_back_to_origin(moves: str) -> bool: pass ``` # Parameters - `moves` (str): A string containing the sequence of the robot\'s moves. # Returns - bool: A boolean value, `True` if the robot returns to the origin after completing its moves, `False` otherwise. # Examples 1. Input: `moves = \\"UD\\"` Output: `True` 2. Input: `moves = \\"LL\\"` Output: `False` 3. Input: `moves = \\"RRDD\\"` Output: `False` 4. Input: `moves = \\"UDLR\\"` Output: `True`","solution":"def is_robot_back_to_origin(moves: str) -> bool: Determines if the robot returns to the origin after following the sequence of moves. Parameters: moves (str): A string containing the sequence of the robot\'s moves. Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Given a string S consisting of only \'(\' and \')\', determine if S is a valid parenthesis string. A valid parenthesis string must satisfy the following conditions: 1. Every opening bracket \'(\' has a corresponding closing bracket \')\'. 2. No closing bracket \')\' can appear before an opening bracket \'(\'. Write a function `isValidParenthesisString(S)` that takes a string S as input and returns \'YES\' if it is a valid parenthesis string, otherwise \'NO\'. Constraints: * 1 leq |S| leq 300,000 Input: The input is given in the following format: S Output: Output \'YES\' or \'NO\' for the given string S. Examples: Input: (()) Output: YES Input: )( Output: NO Input: (()(())) Output: YES Input: (()() Output: NO","solution":"def isValidParenthesisString(S): Determines if the input string S is a valid parenthesis string. balance = 0 for char in S: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return \'NO\' return \'YES\' if balance == 0 else \'NO\'"},{"question":"In a small kingdom, the royal treasury is maintained using gold coins kept in stacks. The king wants to keep track of the stacks and manage withdrawals upon requests. Each stack contains a certain number of coins, and all stacks are stored in increasing order of their coin count. However, sometimes, the king needs to remove the stack with the smallest number of coins. After all the requests, the king wants to know the state of the treasury. Write a program to handle a list of stacks and a series of withdrawal requests, then output the final state of the treasury. Input - First line contains an integer N, the number of stacks initially in the treasury. - Second line contains N integers representing the number of coins in each stack, in increasing order. - Third line contains an integer Q, the number of withdrawal requests. - Following Q lines contain the integer value \'1\' which indicates a withdrawal request (meaning to remove the stack with the smallest number of coins). Output - A single line containing the number of coins in each remaining stack, in increasing order, separated by spaces. If no stacks remain, output \\"Empty\\". Example Input: 5 1 2 3 4 5 3 1 1 1 Output: 4 5","solution":"def manage_treasury(N, stacks, Q, requests): for request in requests: if request == 1 and stacks: stacks.pop(0) if stacks: return \' \'.join(map(str, stacks)) else: return \\"Empty\\""},{"question":"You are given an integer N representing the amount of money (in dollars) you have. You want to buy books that each cost exactly 15. Write a program to determine how many books you can buy and how much money (in dollars) you will have left after buying as many books as possible. ------ Input Format ------ - The first line of the input contains an integer N, indicating the amount of money you have. ------ Output Format ------ - Output two integers separated by a space: the number of books you can buy, and the amount of money left after buying the books. ------ Constraints ------ 0 ≤ N ≤ 1000 ----- Sample Input 1 ------ 45 ----- Sample Output 1 ------ 3 0 ----- explanation 1 ------ With 45, you can buy 3 books (each costing 15). You will have 0 left after the purchases. ----- Sample Input 2 ------ 37 ----- Sample Output 2 ------ 2 7 ----- explanation 2 ------ With 37, you can buy 2 books (each costing 15). You will have 7 left after the purchases.","solution":"def calculate_books_and_remainder(N): Given the amount of money N, calculates the number of books that can be bought and the remainder money. Parameters: N (int): Amount of money in dollars. Returns: tuple: A tuple containing the number of books that can be bought and the remainder money. cost_per_book = 15 num_books = N // cost_per_book remainder = N % cost_per_book return num_books, remainder"},{"question":"[Problem statement] You are given a list of integers. Your task is to find the longest subsequence that is strictly increasing, and return its length. The subsequence does not need to be contiguous in the original list, but it must maintain the order of the original list. **Input:** - An integer n, representing the number of elements in the list. (1 leq n leq 1000) - A list of n integers, where each integer falls within the range (-10^9 leq x leq 10^9) **Output:** - A single integer, representing the length of the longest increasing subsequence. **Examples** **Example 1:** _Input:_ ``` 6 10 9 2 5 3 7 101 18 ``` _Output:_ ``` 4 ``` _Explanation:_ ``` The longest increasing subsequence is [2, 3, 7, 101], which has length 4. ``` **Example 2:** _Input:_ ``` 5 5 4 3 2 1 ``` _Output:_ ``` 1 ``` _Explanation:_ ``` The longest increasing subsequence is [5] (or [4], [3], [2], [1]), which has length 1. ``` **Example 3:** _Input:_ ``` 8 0 1 2 3 -1 4 5 6 ``` _Output:_ ``` 7 ``` _Explanation:_ ``` The longest increasing subsequence is [0, 1, 2, 3, 4, 5, 6], which has length 7. ``` **Note:** The length of the increasing subsequence can be calculated using dynamic programming techniques for optimal performance on larger inputs. The problem is considered to be a classic dynamic programming problem and benefits from understanding the use of such algorithms.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"We have an array A of integers and an integer K. Your task is to rotate the array A to the right by K steps and print the resulting array. Shifting an array to the right by one step means that each element in the array is moved one position to the right, and the last element is moved to the first position. For example, rotating the array [1, 2, 3] to the right by 1 step results in [3, 1, 2]. -----Constraints----- - 0 leq K leq 10^5 - 1 leq |A| leq 10^5 - A consists of integers. -----Input----- Input is given from Standard Input in the following format: K A -----Output----- Print the array resulting from rotating A to the right by K steps. -----Sample Input----- 3 1 2 3 4 5 -----Sample Output----- 3 4 5 1 2","solution":"def rotate_array(A, K): Rotates the array A to the right by K steps. n = len(A) K = K % n # to handle cases where K > n return A[-K:] + A[:-K]"},{"question":"Given a list of integers representing the heights of students in a line, heights[i] is the height of the ith student. The students are initially standing in a straight line, each positioned at index i. They will then form a series of groups such that: 1. Each group must be in non-decreasing order (from left to right) based on their heights. 2. Each group must contain at least one student. Determine the minimum number of groups needed so that all students are grouped according to the above rules. Example 1: Input: [1, 2, 3, 4, 5] Output: 1 Explanation: All students can be placed in one group since they are already in non-decreasing order. Example 2: Input: [5, 4, 3, 2, 1] Output: 5 Explanation: Each student must be in their own group since the heights are in strictly decreasing order. Example 3: Input: [3, 3, 2, 2, 1, 1] Output: 3 Explanation: One possible grouping is [3, 3], [2, 2], [1, 1]. Notes: 1 <= heights.length <= 100000. 1 <= heights[i] <= 100000.","solution":"def min_number_of_groups(heights): Returns the minimum number of groups needed such that groups are in non-decreasing order. if not heights: return 0 groups = 1 for i in range(1, len(heights)): if heights[i] < heights[i - 1]: groups += 1 return groups"},{"question":"In a coding challenge platform, participants earn scores based on their performance in various contests. The final score of a participant is calculated as the sum of their best m scores among n contests. Given the scores of a participant in n contests and the number m, write a program to calculate their final score. ------ Input ------ The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 100). The second line contains n space-separated integers representing the participant\'s scores in each contest. Each score is an integer between 0 and 100, inclusive. ------ Output ------ Print a single integer representing the sum of the top m scores. ------ Constraints ------ The number of contests n and the number of top scores m ensures that 1 ≤ m ≤ n ≤ 100. ----- Sample Input 1 ------ 5 3 50 80 90 70 85 ----- Sample Output 1 ------ 255 ----- Sample Input 2 ------ 4 2 60 40 20 80 ----- Sample Output 2 ------ 140 ----- Explanation ------ Example case 1: The top 3 scores are 90, 85, and 80, which sum up to 255. Example case 2: The top 2 scores are 80 and 60, which sum up to 140.","solution":"def final_score(n, m, scores): Calculates the final score as the sum of the top m scores out of n scores. Parameters: n (int): Total number of scores. m (int): Number of top scores to sum. scores (list of int): The list of scores. Returns: int: The sum of the top m scores. # Sort the scores in descending order scores.sort(reverse=True) # Sum the top m scores return sum(scores[:m])"},{"question":"Shortest Safe Path in a Grid with Landmines You are given a grid representing a minefield where each cell is either safe (0) or contains a landmine (1). Your task is to find the shortest safe path in the minefield grid from the top-left corner (0,0) to the bottom-right corner (n-1,m-1), where n is the number of rows and m is the number of columns in the grid. You can move in four possible directions from a given cell (left, right, up, down). Moving into a cell that contains a landmine is unsafe. If no such path exists, return -1. Input The first line contains two integers n and m which represent the number of rows and columns of the grid respectively. (1 ≤ n, m ≤ 100) The following n lines contain m integers each (either 0 or 1), representing the minefield grid. Output Output a single integer which is the length of the shortest safe path from (0,0) to (n-1,m-1). If no such path exists, print -1. Sample Input 4 4 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 Sample Output 6 Explanation In the provided grid, the shortest safe path from the top-left corner to the bottom-right corner involves moving through cells in the following sequence: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3).","solution":"from collections import deque def is_valid_move(x, y, grid, visited): n, m = len(grid), len(grid[0]) return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 and not visited[x][y] def shortest_safe_path(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, grid, visited): visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are the owner of a farm and you have three types of animals: cows, chickens, and sheep. Each animal type needs to be fed a specific amount of food every day. You provide the cows with 4 units of food per day, the chickens with 1 unit of food per day, and the sheep with 3 units of food per day. Given the total number of cows, chickens, and sheep on your farm, calculate the total amount of food required per day to feed all the animals. -----Input----- The input consists of a single line with three non-negative integers c, ch, s (0 ≤ c, ch, s ≤ 100) — the number of cows, chickens, and sheep on the farm respectively. -----Output----- Print a single integer — the total amount of food required per day to feed all the animals. -----Examples----- Input 3 5 2 Output 23 Input 0 0 0 Output 0 -----Note----- In the first test, you have 3 cows, 5 chickens, and 2 sheep. Therefore, the total amount of food required is 3*4 + 5*1 + 2*3 = 12 + 5 + 6 = 23 units of food. In the second test, there are no animals on the farm, so no food is required.","solution":"def total_food(c, ch, s): Returns the total amount of food required per day to feed c cows, ch chickens, and s sheep. Each cow needs 4 units of food per day. Each chicken needs 1 unit of food per day. Each sheep needs 3 units of food per day. cow_food = 4 chicken_food = 1 sheep_food = 3 return (cow_food * c) + (chicken_food * ch) + (sheep_food * s)"},{"question":"Task: You need to write a function `reorganize_string(s)` which rearranges a string `s` so that no two adjacent characters are the same. If this is not possible, return an empty string `\\"\\"`. # Rules/Notes: - The input string `s` will only contain uppercase English letters. - You can assume `s` has at least one character and at most 100 characters. # Examples: + reorganize_string(\\"AABB\\"): - Returns: \\"ABAB\\" (or \\"BABA\\") + reorganize_string(\\"AAAB\\"): - Returns: \\"\\" (an empty string, because it\'s impossible to reorganize to avoid adjacent \'A\'s) + reorganize_string(\\"AABBC\\"): - Returns: \\"ABABC\\" (or any valid arrangement) + reorganize_string(\\"A\\"): - Returns: \\"A\\" (only one character, no rearrangement needed) # Explanation: The function should aim to rearrange the characters in a way that no two same characters appear together. This problem can be particularly challenging when one character is more frequent than half of the string length plus one. In such cases, it will be impossible to rearrange and avoid adjacent repetition. The potential algorithm might involve counting character frequencies, using a priority queue to attempt reorganization, and checking for feasibility by ensuring the most frequent character count does not exceed `(len(s) + 1) // 2`.","solution":"from collections import Counter import heapq def reorganize_string(s): Rearranges the string `s` so that no two adjacent characters are the same. If impossible, returns an empty string. counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"You are given an array of integers and a series of queries. Each query is of one of the following two types: 1) Increment all elements between indices A and B (inclusive) by a given value X. This is represented by the command: 0 A B X 2) Find the sum of elements between indices A and B (inclusive). This is represented by the command: 1 A B Input: The first two lines contain two integers, N and Q (the length of the array and the number of queries). The next line contains the N integers of the initial array. Each of the next Q lines corresponds to a query in the format described above. Output: For each query of the second type (find sum), output one line containing the required sum for the corresponding query just after the query. Constraints: 1 ≤ N, Q ≤ 10^5 -10^4 ≤ array[i] ≤ 10^4 0 ≤ A ≤ B < N -10^4 ≤ X ≤ 10^4 SAMPLE INPUT 5 3 1 2 3 4 5 0 1 3 2 1 0 3 4 1 2 4 SAMPLE OUTPUT 11 15","solution":"def process_queries(N, Q, array, queries): Process a list of queries on an array. Parameters: N (int): Length of the array. Q (int): Number of queries. array (list of int): Initial array of integers. queries (list of list): Each query to be processed. Returns: list: List of results for type-2 queries. results = [] for query in queries: command = query[0] A = query[1] B = query[2] if command == 0: X = query[3] for i in range(A, B + 1): array[i] += X elif command == 1: results.append(sum(array[A:B + 1])) return results"},{"question":"# Task: You have to write a function `reverse_strings` which takes a list of strings as an argument and returns a new list where each string is reversed, while keeping the order of strings as is. If the input list is empty, it should return an empty list. # Examples: `reverse_strings([\'hello\', \'world\'])` should return `[\'olleh\', \'dlrow\']`. `reverse_strings([\'Python\', \'is\', \'fun\'])` should return `[\'nohtyP\', \'si\', \'nuf\']`. `reverse_strings([])` should return `[]`.","solution":"def reverse_strings(string_list): Takes a list of strings and returns a new list where each string is reversed. Parameters: string_list (list): A list of strings. Returns: list: A list where each string from the input list is reversed. return [s[::-1] for s in string_list]"},{"question":"Implement a function `flipping_game` that takes a list `a` of positive integers and returns the maximum sum that can be obtained by flipping exactly one subarray of `a`. Flipping a subarray means changing all `1`s to `-1`s and all `-1`s to `1`s. Your function should return 0 if the list consists entirely of `1`s. # Example: ```python def flipping_game(a): pass # Example Usage print(flipping_game([1, 1, 0, 0, 1, 0])) # Output: 5 print(flipping_game([1, 1, 1, 1])) # Output: 0 print(flipping_game([0, 0, 1, 0, 0])) # Output: 4 ``` # Explanation: 1. In the first example, the best subarray to flip is `[0, 0]`, resulting in `[1, 1, -1, -1, 1, 0]`, with a sum of 5. 2. In the second example, flipping any subarray will not change the sum, so the result is 0. 3. In the third example, flipping the entire array will produce the maximum sum, which is 4.","solution":"def flipping_game(a): n = len(a) # If the array contains only 1s, return 0 if all(x == 1 for x in a): return 0 # Convert 0 to 1 and 1 to -1 b = [1 if x == 0 else -1 for x in a] # Find the subarray with maximum sum in array `b` max_ending_here = max_so_far = b[0] for num in b[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) # The sum of the original array plus the maximum subarray sum in modified array max_sum_with_flip = sum(a) + max_so_far return max_sum_with_flip"},{"question":"You are given a string `S` consisting of lowercase alphabetic characters. Your goal is to determine the size of the largest substring that contains all unique characters and then double its length. If the given string is empty, the output should be 0. A substring is a contiguous sequence of characters within a string. Example 1: Input: S = \\"abcabcbb\\" Output: 6 Explanation: The largest substring with all unique characters is \\"abc\\", which has length 3. Doubling this length gives 6. Example 2: Input: S = \\"bbbbb\\" Output: 2 Explanation: The largest substring with all unique characters is \\"b\\", which has length 1. Doubling this length gives 2. Example 3: Input: S = \\"pwwkew\\" Output: 6 Explanation: The largest substring with all unique characters is \\"wke\\", which has length 3. Doubling this length gives 6. Your Task: You do not need to read input or print anything. Your task is to complete the function `largestDoubledUniqueSubstring` which takes the string `S` as input and returns the doubled length of the largest unique-character substring. Expected Time Complexity: O(N) Expected Auxiliary Space: O(min(N, 26)), where N is the length of the input string since there are at most 26 different characters in the input string. Constraints: 0 ≤ len(S) ≤ 10^5","solution":"def largestDoubledUniqueSubstring(S): Returns the doubled length of the largest substring with all unique characters. if not S: return 0 max_length = 0 start = 0 seen = {} for end in range(len(S)): if S[end] in seen and seen[S[end]] >= start: start = seen[S[end]] + 1 seen[S[end]] = end max_length = max(max_length, end - start + 1) return max_length * 2"},{"question":"Given a string of digits, determine if it is possible to split the string into two or more parts such that: 1. Each part is a contiguous substring of digits. 2. The integer value of each part follows an increasing consecutive integer sequence. If it is possible, return \\"YES\\" and print the first integer of the sequence. Otherwise, return \\"NO\\". Example 1: Input: s = \\"1234\\" Output: YES Explanation: We can split the string into [\\"1\\", \\"2\\", \\"3\\", \\"4\\"] which are consecutive integers starting from 1. Example 2: Input: s = \\"91011\\" Output: YES Explanation: We can split the string into [\\"9\\", \\"10\\", \\"11\\"] which are consecutive integers starting from 9. Example 3: Input: s = \\"99100\\" Output: YES Explanation: We can split the string into [\\"99\\", \\"100\\"] which are consecutive integers starting from 99. Example 4: Input: s = \\"1235\\" Output: NO Explanation: It is not possible to split the string into parts that form a sequence of consecutive integers. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canSplitIntoConsecutive() which takes a string s as input and returns \\"YES\\" or \\"NO\\". Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 <= len(s) <= 10^5 The string only contains digits \'0\' to \'9\'.","solution":"def canSplitIntoConsecutive(s): Determine if the string can be split into consecutive integers. n = len(s) for i in range(1, n): first_num = int(s[:i]) expected_next = first_num + 1 j = i while j < n: next_num_str = str(expected_next) next_len = len(next_num_str) if s[j:j+next_len] == next_num_str: j += next_len expected_next += 1 else: break if j == n: return \\"YES \\" + str(first_num) return \\"NO\\""},{"question":"Arun loves playing with numbers. He has recently stumbled upon an interesting problem related to numbers and asks for your help to solve it. He wants you to find how many times a digit appears in all the numbers from 1 to N (inclusive). Input: The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains the integer N which indicates the range of numbers from 1 to N. The second line contains a single digit D (0-9) which is the digit for which we need to count its appearances. Output: Print T lines where each line contains the count of occurrences of digit D in the range from 1 to N. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ D ≤ 9 SAMPLE INPUT 2 13 1 20 2 SAMPLE OUTPUT 6 3","solution":"def count_digit_in_range(N, D): Count the occurrences of the digit D in the range from 1 to N (inclusive). Parameters: N (int): The upper limit of the range. D (str): The digit to count (as a string). Returns: int: The count of occurrences of digit D. count = 0 for num in range(1, N + 1): count += str(num).count(D) return count def solve(test_cases): results = [] for N, D in test_cases: results.append(count_digit_in_range(N, D)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T * 2, 2): N = int(input_lines[i]) D = input_lines[i + 1] test_cases.append((N, D)) results = solve(test_cases) for result in results: print(result)"},{"question":"Given a list of words, you are tasked with finding two words such that when concatenated (in any order), they form a palindrome. If multiple such pairs exist, return any one of them. If no such pair exists, return an empty list. Constraints: - All input strings consist of lowercase letters. - No word will be an empty string. - The total number of words in the input list will not exceed 10^4. - The length of each word will not exceed 10^3. Input Input is given from Standard Input in the following format: N word_1 word_2 ... word_N Output Print two words from the input list that can be concatenated to form a palindrome, or an empty list if no such pair exists. Examples Input: 4 code edoc da d Output: code edoc Input: 3 abc def ghi Output: []","solution":"def find_palindrome_pair(words): Returns two words from the input list that can be concatenated to form a palindrome, or an empty list if no such pair exists. word_set = set(words) for word in words: reversed_word = word[::-1] if reversed_word in word_set and reversed_word != word: return [word, reversed_word] return []"},{"question":"Given a list of integers, you need to determine whether there exists a pair of distinct indices (i, j) such that the sum of the elements at these indices is even. Input: - First line contains an integer T representing the number of test cases. - For each test case, the first line contains an integer N, representing the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. Output: For each test case, output \\"YES\\" if there exists such a pair, otherwise output \\"NO\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ a[i] ≤ 100 (where 1 ≤ i ≤ N) SAMPLE INPUT 3 5 1 2 3 4 5 4 2 4 6 8 2 1 1 SAMPLE OUTPUT YES YES NO Explanation: TestCase 1: Pairs like (1, 3), (2, 4), or (4, 2) all have even sums. TestCase 2: Any pair in this list will have an even sum, as they are all even numbers. TestCase 3: There are no distinct pairs that result in an even sum.","solution":"def has_even_sum_pair(t, test_cases): Determines whether there exists a pair of distinct indices (i, j) such that the sum of the elements at these indices is even. :param t: Number of test cases :param test_cases: List of tuples, each containing (N, list of N integers) :return: List of \\"YES\\" or \\"NO\\" for each test case results = [] for N, arr in test_cases: odd_count = sum(1 for x in arr if x % 2 != 0) even_count = N - odd_count if odd_count > 0 and even_count > 0 or even_count > 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a binary tree with each node assigned a certain value. You need to find the maximum value of the sum of the values of nodes on any path in the tree. A \\"path\\" is defined as any sequence of nodes starting from any node and ending at any node in the same branch, following the parent-child connections. Input format: The first line contains an integer n, the number of nodes in the tree. The following n-1 lines each contain two space-separated integers u and v, indicating that there is an edge between node u and node v. The last line contains n space-separated integers representing the values assigned to each node of the binary tree. Output format: Print a single integer, the maximum value of any path in the binary tree. Constraints: 1 ≤ n ≤ 100,000 Each node\'s value is an integer between -1,000 and 1,000 Example Input: 5 1 2 1 3 3 4 3 5 2 -1 3 4 5 Example Output: 12 Explanation: For the given input, the binary tree looks like this: 1(2) / 2(-1) 3(3) / 4(4) 5(5) The path with the maximum sum is from node 4 to node 3 to node 5, which results in the sum 4 + 3 + 5 = 12.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def max_path_sum(tree_values, edges): from collections import defaultdict, deque def create_tree(n, edges, tree_values): tree = [TreeNode(val) for val in tree_values] children = defaultdict(list) for u, v in edges: children[u-1].append(v-1) children[v-1].append(u-1) def build(node, parent): for child in children[node]: if child != parent: if tree[node].left is None: tree[node].left = tree[child] else: tree[node].right = tree[child] build(child, node) build(0, -1) return tree[0] def dfs(node): nonlocal max_sum if not node: return 0 left_max = max(0, dfs(node.left)) right_max = max(0, dfs(node.right)) max_sum = max(max_sum, left_max + right_max + node.val) return max(left_max, right_max) + node.val root = create_tree(len(tree_values), edges, tree_values) max_sum = float(\'-inf\') dfs(root) return max_sum # Example input n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] tree_values = [2, -1, 3, 4, 5] print(max_path_sum(tree_values, edges)) # Output: 12"},{"question":"Given a list of integers, determine whether it is possible to rearrange the elements of the list so that no two adjacent elements are equal. If possible, return one such rearrangement. If not, return an empty list. Input Format - The first line contains an integer N, representing the number of elements in the list. - The second line contains N integers, representing the elements of the list. Output Format - Return a list of integers representing one possible rearrangement where no two adjacent elements are the same. If no such rearrangement is possible, return an empty list. Input Constraint 1 ≤ N ≤ 1000 Each element in the list is an integer between -1000 and 1000. SAMPLE INPUT 6 1 1 2 2 3 3 SAMPLE OUTPUT [1, 2, 1, 3, 2, 3] SAMPLE INPUT 4 1 1 1 1 SAMPLE OUTPUT []","solution":"from collections import Counter import heapq def rearrange_elements(nums): Given a list of integers, determine whether it is possible to rearrange the elements of the list so that no two adjacent elements are equal. If possible, return one such rearrangement. If not, return an empty list. if not nums: return [] # Count the occurrences of each element count = Counter(nums) max_count = max(count.values()) # To be rearrangeable, the most frequent element must not exceed (N + 1) // 2 if max_count > (len(nums) + 1) // 2: return [] # Create a max heap based on element frequency heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(heap) prev_freq, prev_num = 0, None result = [] while heap: freq, num = heapq.heappop(heap) result.append(num) # If previous element still has remaining frequency, reinsert back to heap if prev_freq < 0: heapq.heappush(heap, (prev_freq, prev_num)) # Decrease frequency, since it\'s been used prev_freq, prev_num = freq + 1, num return result"},{"question":"Calculate the factorial of a given number Input n - a non-negative integer. Output print the factorial of n. Example Input: 4 Output: 24","solution":"def factorial(n): Calculate the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"You are given an array of integers with length n. A special operation is allowed on this array: You can select any subsequence of the array and remove all of its elements, as long as that subsequence is an arithmetic progression (AP). Your task is to determine the minimum number of operations required to completely empty the array. An arithmetic progression is a sequence of numbers in which the difference between any two consecutive numbers is constant. Input: The first line contains an integer n (1 ≤ n ≤ 2000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: Output a single integer — the minimum number of operations required to completely empty the array. Examples: Input: 5 3 6 9 12 15 Output: 1 Input: 4 4 7 10 15 Output: 2 Note: In the first sample, you can remove the entire array in one operation because the whole array forms an arithmetic progression with a common difference of 3. In the second sample, one possible way is to first remove the subsequence [4, 10] (with a common difference of 6) in one operation, and then remove [7, 15] (with a common difference of 8) in the second operation. There may be other ways to do this in two operations as well.","solution":"def min_operations_to_empty_array(n, arr): Function to determine the minimum number of operations to empty the array. # If the array contains only one element, it is already an arithmetic progression if n == 1: return 1 # To store the minimum number of operations required dp = [[float(\'inf\')] * n for _ in range(n)] # Each individual element is an AP by itself for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 for k in range(i + 1, j + 1): if (arr[k] - arr[i]) % (k - i) == 0: diff = (arr[k] - arr[i]) // (k - i) valid_ap = True for m in range(i, j): if m + 1 <= j and arr[m + 1] - arr[m] != diff: valid_ap = False break if valid_ap: dp[i][j] = min(dp[i][j], 1) dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k][j]) return dp[0][n-1]"},{"question":"Given an array of integers, write a program to find the sum of all unique elements in the array. An element is considered unique if it appears exactly once in the array. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The first line of each test case contains an integer N, the number of elements in the array. The second line of each test case contains N integers separated by spaces. ------ Output ------ For each test case, output the sum of all unique elements in the array, in a new line. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 100 0 ≤ Element of Array ≤ 1000 ------ Sample Input 1 ------ 2 5 1 2 2 3 4 6 5 5 5 6 6 7 ------ Sample Output 1 ------ 8 7","solution":"def sum_of_unique_elements(test_cases): results = [] for case in test_cases: n, elements = case element_counts = {} for element in elements: if element in element_counts: element_counts[element] += 1 else: element_counts[element] = 1 unique_sum = sum(element for element, count in element_counts.items() if count == 1) results.append(unique_sum) return results # Function to handle parsing the input and returning results def handle_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) elements = list(map(int, lines[index + 1].split())) test_cases.append((N, elements)) index += 2 results = sum_of_unique_elements(test_cases) for result in results: print(result)"},{"question":"Given a string consisting of lowercase and uppercase characters, determine if the string is a palindrome. A palindrome is a string that reads the same forwards as backwards, case-insensitively. Your task is to return a boolean value indicating whether the given string is a palindrome. # Example: ```python Input: \\"A man a plan a canal Panama\\" Output: True Input: \\"Hello World\\" Output: False ``` # Input: A single string `s` of length 1 or more, containing lowercase and/or uppercase letters, spaces, and other punctuation. # Output: A boolean value that indicates if the string `s` is a palindrome, ignoring case and non-alphanumeric characters. # Note: Consider edge cases such as strings with only non-alphanumeric characters or varying case letters.","solution":"import re def is_palindrome(s): Determine if the given string is a palindrome, ignoring case and non-alphanumeric characters. Parameters: s (str): input string Returns: bool: True if the string is a palindrome, False otherwise # Use regular expressions to remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"You are given an array B of M integers. Your task is to perform a series of operations to transform the array such that all elements in B are even numbers. In one operation, you can change an element B_{i} in the following ways: - If B_{i} is odd, you can either add 1 or subtract 1 to make it even. - If B_{i} is already even, no operation is needed for that element. Determine the minimum number of operations required to make all elements of array B even. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input: - The first line contains M - the size of the array. - The next line contains M integers, B_{1}, B_{2}, B_{3}, ldots, B_{M} - the elements of the array. ------ Output Format ------ For each test case, output on a new line, the minimum number of operations required. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M ≤ 10^5 −10^9 ≤ B_{i} ≤ 10^9 - The sum of M over all test cases won\'t exceed 10^5. ------ Sample Input 1 ------ 2 5 4 7 12 9 5 3 3 8 -3 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test case 1: - Change B_{2} from 7 to 6 (1 operation), - Change B_{4} from 9 to 8 (1 operation), - Change B_{5} from 5 to 6 (1 operation). The final array is B = [4, 6, 12, 8, 6] with 3 operations in total. Test case 2: - Change B_{1} from 3 to 4 (1 operation), - Change B_{3} from -3 to -4 (1 operation). The final array is B = [4, 8, -4] with 2 operations in total.","solution":"def min_operations_to_make_even(arr): Given an array, returns the minimum number of operations required to make all elements even. operations = 0 for num in arr: if num % 2 != 0: operations += 1 return operations def process_test_cases(test_cases): Given multiple test cases, returns a list of results where each result is the minimum number of operations required for the respective test case. results = [] for test_case in test_cases: results.append(min_operations_to_make_even(test_case)) return results"},{"question":"Event Manager - Create Event Class In this task, you need to define an Event class to manage events in a calendar application. The Event should have the following attributes: attribute | type | value ---|---|--- Title | string | user argument or \\"Untitled Event\\" Date | string | user argument or \\"01/01/1970\\" Time | string | user argument or \\"00:00\\" Location | string | user argument or \\"TBD\\" Attendees | list | empty list Description | string | user argument or \\"No Description\\" Additionally, implement a method `add_attendee(name)` that adds the provided name to the Attendees list if it is not already present. Implement another method `remove_attendee(name)` that removes the provided name from the Attendees list if it exists.","solution":"class Event: def __init__(self, title=\\"Untitled Event\\", date=\\"01/01/1970\\", time=\\"00:00\\", location=\\"TBD\\", description=\\"No Description\\"): self.title = title self.date = date self.time = time self.location = location self.attendees = [] self.description = description def add_attendee(self, name): if name not in self.attendees: self.attendees.append(name) def remove_attendee(self, name): if name in self.attendees: self.attendees.remove(name)"},{"question":"A factory produces widgets, each identified uniquely by an ID number. The factory workers have a task to group these widgets in such a way that each group contains widgets with consecutive ID numbers. However, due to packaging constraints, each group must contain exactly `k` widgets, and no widget can be left ungrouped. Your task is to determine if it is possible to group all widgets as per the given constraints. If possible, provide one way to form such groups. If not, output \\"No\\". -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and k. - The second line contains N space-separated integers representing the IDs of the widgets. -----Output----- - For each test case: - If it is not possible to group the widgets, print a single line containing the string \\"No\\" (without quotes). - Otherwise, print \\"Yes\\" (without quotes) followed by N space-separated integers indicating the IDs of widgets in their grouped order. Each group of k should be separated by a new line and ordered by their original appearance. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 1 le k le N - The IDs are distinct and within the range 1 to 10^9 -----Example Input----- 2 9 3 7 8 9 1 2 3 4 5 6 6 4 7 8 9 10 11 12 -----Example Output----- Yes 1 2 3 4 5 6 7 8 9 No","solution":"def group_widgets(T, test_cases): Determine if it is possible to group all widgets as per the given constraints. :param T: Number of test cases. :param test_cases: List of tuples, each containing N, k, and a list of widget IDs. :return: List of results, each being either \\"No\\" or \\"Yes\\" followed by the grouped IDs. results = [] for N, k, ids in test_cases: if N % k != 0: results.append(\\"No\\") continue sorted_ids = sorted(ids) groups = [sorted_ids[i:i+k] for i in range(0, N, k)] if len(groups) * k != N: results.append(\\"No\\") else: result = \\"Yesn\\" + \\"n\\".join(\\" \\".join(map(str, group)) for group in groups) results.append(result) return results"},{"question":"Eleanor is organizing a scavenger hunt in her 20 times 20 grid park. The park is overlaid with a Cartesian coordinate system so that any point (x,y) in the park has coordinates x in [-10, 10] and y in [-10, 10]. Eleanor wants to hide 10 clues in unique locations according to the following rules: The coordinates of each clue are distinct integer points (x,y) within the given range. The Euclidean distance between any two clues must be at least sqrt{2} (i.e., the clues can\'t be on adjacent coordinates or diagonally adjacent). The sum of the coordinates of the squares of both x and y for all clues must be an even number. Given the values for the coordinates (x, y) of the first clue\'s location Eleanor hides in the park, determine the locations of the remaining 9 clues according to the requirements above. For each clue\'s coordinates, print two space-separated integers describing the respective x and y coordinates. Input Format Two space-separated integers describing the respective values of x and y for the first clue\'s location. Constraints -10 leq x, y leq 10 Output Format Print 9 lines, where each line contains two space-separated integers describing the respective x and y coordinates for a clue\'s location. Sample Input 0 2 3 Sample Output 0 -9 8 5 -5 -6 -9 10 -7 -10 -2 7 7 8 -10 4 4 -2 1 Explanation 0 To ensure that the clues\' locations meet Eleanor\'s requirements, we first place the provided clue at (2, 3). Checking the distances between the provided clue and each of the remaining nine clues confirms that the distance between any two clues is at least sqrt{2}. Additionally, the sum of squares of the coordinates for all the clues should be even.","solution":"import math def is_valid_coordinate(x, y, clues): Check if the coordinate (x, y) is a valid clue location. if any(math.dist((x, y), (cx, cy)) < math.sqrt(2) for cx, cy in clues): return False return True def are_squares_even(x, y, clues): Check if the sum of the squares of coordinates remains even. total_square_sum = sum(cx**2 + cy**2 for cx, cy in clues) + x**2 + y**2 return total_square_sum % 2 == 0 def generate_clues(first_x, first_y): clues = [(first_x, first_y)] for x in range(-10, 11): for y in range(-10, 11): if (x != first_x or y != first_y) and is_valid_coordinate(x, y, clues): if are_squares_even(x, y, clues): clues.append((x, y)) if len(clues) == 10: return clues return clues def scavenger_hunt(x, y): clues = generate_clues(x, y) for cx, cy in clues[1:]: print(cx, cy) # Ensure the solution function works as required scavenger_hunt(2, 3)"},{"question":"A conveyor belt system is moving parcels of varying weights. Each parcel has a specific weight and must be moved in a particular order. However, due to system constraints, a robot can only move parcels such that the total weight being moved at any time does not exceed a maximum capacity C. Your task is to determine if the robot can successfully move all parcels in the given order without exceeding the capacity C at any point. If it can, output \\"YES\\", otherwise output \\"NO\\". -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^3). Description of the test cases follows. Each test case starts with an integer n (1 le n le 10^5) and an integer C (1 le C le 10^9) — the number of parcels and the maximum capacity, respectively. The second line of each test case contains n integers w_1, w_2, ldots, w_n (1 le w_i le 10^4) — the weights of the parcels in the given order. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the robot can successfully move all parcels without exceeding the capacity C at any point, otherwise print \\"NO\\". -----Examples----- Input: 3 3 10 2 5 3 4 8 4 1 2 1 2 5 6 4 Output: YES YES NO -----Note----- In the first test case, the total weights of parcels are always within the maximum capacity: 2, 7, and 10 respectively. In the second test case, all possible subsets of the conveyor belt remain within the maximum capacity of 8. In the third test case, the robot would need to move the parcel with weight 6 initially, exceeding the capacity 5. Thus, the output is \\"NO\\".","solution":"def can_move_parcels(t, test_cases): results = [] for test_case in test_cases: n, C = test_case[0] weights = test_case[1] if max(weights) <= C and sum(weights) <= C: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): data = input_string.strip().split(\'n\') t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n, C = map(int, data[index].split()) weights = list(map(int, data[index + 1].split())) test_cases.append(((n, C), weights)) index += 2 return t, test_cases def stringify_output(result_list): return \'n\'.join(result_list)"},{"question":"You are given an integer n. Construct a string s of length n consisting only of characters \'a\' and \'b\', where the string does not contain two consecutive characters that are the same. It is guaranteed that a valid string always exists under the given constraints. Input The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^6). It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print a single line containing the string s. If there are multiple such strings, output any. Example Input 3 3 4 7 Output aba abab abababa Note In the first test case, \\"aba\\" is a valid string where no two consecutive characters are the same. In the second test case, \\"abab\\" is a valid string where no two consecutive characters are the same. In the third test case, \\"abababa\\" is a valid string where no two consecutive characters are the same.","solution":"def construct_string(t, test_cases): Constructs strings of length n consisting only of characters \'a\' and \'b\', where the string does not contain two consecutive characters that are the same. results = [] for n in test_cases: s = [] for i in range(n): if i % 2 == 0: s.append(\'a\') else: s.append(\'b\') results.append(\'\'.join(s)) return results # Example usage: # t = 3 # test_cases = [3, 4, 7] # print(construct_string(t, test_cases))"},{"question":"Given a string representing a mathematical expression, evaluate the expression and return the result. The expression can contain positive integers, \'+\', \'-\', \'*\', \'/\', \'(\', and \')\'. Division should truncate towards zero. Example 1: Input: S = \\"3+2*2\\" Output: 7 Explanation: 3 + (2 * 2) = 7 Example 2: Input: S = \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 Explanation: The expression is evaluated step-by-step to get 23. Your Task: You don\'t need to read input or print anything. Your task is to complete the function evaluateExpression() which takes the string S representing the mathematical expression as input and returns an integer representing the result of the expression. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(|S|). Constraints: 1 <= |S| <= 2000 The given expression is always valid and fits within a 32-bit signed integer.","solution":"def evaluateExpression(S): def helper(s, idx): stack = [] num = 0 sign = \'+\' while idx < len(s): ch = s[idx] if ch.isdigit(): num = num * 10 + int(ch) if ch == \'(\': num, idx = helper(s, idx + 1) if (not ch.isdigit() and ch != \' \') or idx == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) sign = ch num = 0 if ch == \')\': break idx+=1 return sum(stack), idx return helper(S.replace(\' \', \'\'), 0)[0]"},{"question":"Implement a function `compress_string(s)` that takes a string containing only alphabetic characters and returns a compressed version of the string using the following format: - Consecutive repeated characters are replaced with the character followed by the number of repetitions. - If the compressed string is not smaller than the original string, the function should return the original string. For example: - Given `\\"aabcccccaaa\\"`, the function should return `\\"a2b1c5a3\\"`. - Given `\\"abcdef\\"`, the function should return `\\"abcdef\\"` since the compressed string `\\"a1b1c1d1e1f1\\"` is not smaller. Note: - The input string will have at least one character and at most 1000 characters.","solution":"def compress_string(s): Compresses the given string by replacing consecutive repeated characters with the character followed by the number of repetitions. Returns the original string if the compressed string is not smaller. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Append the last set of characters compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Background --------- In a distant galaxy, there exists a network of interconnected planets, each planet identified uniquely by an integer ID. Travel between these planets is possible through a series of wormholes represented in a 2D array. Mission Details --------------- Your task is to determine if there exists a path between two given planets using the available wormholes. The planets and wormholes are provided as follows: A 2D array where each subarray is of the form `[a, b]` indicates there exists a one-way wormhole from planet `a` to planet `b`. Verify if a direct or indirect path exists from a start planet `S` to a destination planet `D`. For example: ```python wormholes = [[0, 2], [2, 3], [1, 4], [3, 5], [2, 4], [0, 1]] S = 0 D = 5 ``` Here, planet `0` connects to planet `2`, which then connects to `3`, which connects to `5`, making it possible to travel from `0` to `5`. Write a function `is_path_exists(wormholes: List[List[int]], S: int, D: int) -> bool` that returns `True` if there is a path from planet `S` to planet `D`, otherwise returns `False`. Additional Technical Details ---------------------------- - Inputs are always valid. - Use 0-based indexing for planets. - Wormholes are always one-way. - Do not mutate the input. Example: ```python wormholes = [[0, 2], [2, 3], [1, 4], [3, 5], [2, 4], [0, 1]] S = 0 D = 5 is_path_exists(wormholes, S, D) # returns True ``` Constraints: - The number of planets and wormholes is between 1 and 100. - Planet IDs are integers between 0 and 99 inclusive.","solution":"from collections import defaultdict, deque from typing import List def is_path_exists(wormholes: List[List[int]], S: int, D: int) -> bool: Determines if there exists a path from planet S to planet D using given wormholes. :param wormholes: List of wormholes where each wormhole is represented as [a, b] (one-way from a to b). :param S: Starting planet ID. :param D: Destination planet ID. :return: True if there is a path from S to D, else False. # Create the graph as an adjacency list graph = defaultdict(list) for start, end in wormholes: graph[start].append(end) # Perform BFS to determine if there is a path from S to D queue = deque([S]) visited = set() while queue: current = queue.popleft() if current == D: return True if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False"},{"question":"You are managing a network of servers that each need to process a set of tasks. Each server can only handle one task at a time. Each task has a processing time, and you want to minimize the total time it takes to process all tasks across all servers. You can assign as many tasks to each server as needed, but each task must be assigned to exactly one server, and once a server starts processing a task, it must finish processing it without interruption or switching to other tasks. What is the minimum total processing time required to process all tasks? -----Input----- The input consists of a single test case. The first line of each test case contains two integers S and T where S is the number of servers (1 leq S leq 500) and T is the number of tasks (1 leq T leq 10^3). The second line contains T integers P_1, P_2, ..., P_T representing the processing times of the tasks (1 leq P_i leq 10^6). -----Output----- Output a single integer that is the minimum total processing time required to process all tasks. -----Explanations of Sample Inputs----- In the first sample, you have 2 servers and 4 tasks with processing times 3, 1, 4, and 2. The optimal assignment would give the first server tasks 3 and 2, and the second server tasks 1 and 4, resulting in both servers having a total processing time of 5. In the second sample, you have 3 servers and 5 tasks with processing times 8, 4, 5, 3, and 6. The optimal assignment would give the first server the tasks with times 8, the second server the tasks with times 6 and 3, and the third server the tasks with times 5 and 4, resulting in the total processing times being 8, 9, and 9, respectively. -----Examples----- Sample Input 1: 2 4 3 1 4 2 Sample Output 1: 5 Sample Input 2: 3 5 8 4 5 3 6 Sample Output 2: 9","solution":"import heapq def min_time_to_process(S, T, processing_times): Computes the minimum total processing time required to process all tasks. if S >= T: return max(processing_times) servers = [0] * S heapq.heapify(servers) for time in sorted(processing_times, reverse=True): least_busy_server = heapq.heappop(servers) heapq.heappush(servers, least_busy_server + time) return max(servers)"},{"question":"Your task is to create a function ```sum_of_minimums``` that returns the sum of the minimum values in each row of a given 2D list (matrix). A few cases: ``` [ [7, 9, 8, 6], [6, 3, 5, 2], [5, 8, 1, 4], ] -> 9 Explanation: 7 is the minimum in the first row. 2 is the minimum in the second row. 1 is the minimum in the third row. Sum of these minimums: 7 + 2 + 1 = 9 [ [20, 15, 30], [3, 8, 6], [2, 5, 7], ] -> 20 Explanation: 15 is the minimum in the first row. 3 is the minimum in the second row. 2 is the minimum in the third row. Sum of these minimums: 15 + 3 + 2 = 20 ```","solution":"def sum_of_minimums(matrix): Returns the sum of the minimum values in each row of the given 2D list (matrix). return sum(min(row) for row in matrix)"},{"question":"You are given two strings, s and t. You are allowed to remove characters from s to create a subsequence. Your goal is to find the shortest possible subsequence of s that contains all characters of t in order. If it is impossible to form such a subsequence, return -1. -----Input----- The input consists of two lines: - The first line contains the string s (1 le |s| le 10^5). - The second line contains the string t (1 le |t| le 10^5). Both strings consist of lowercase English letters only. -----Output----- Print a single integer — the length of the shortest possible subsequence of s that contains all characters of t in order. If it is impossible to form such a subsequence, print -1. -----Examples----- Input abcde ace Output 5 Input abcde aef Output -1 Input abppplee apple Output 6 -----Note----- Consider the first example. The shortest subsequence of \\"abcde\\" that contains \\"ace\\" in order is the entire string \\"abcde\\", which is of length 5. In the second example, it\'s impossible to form the string \\"aef\\" from any subsequence of \\"abcde\\", so the output is -1. In the third example, by removing the character \'p\' once, we can form the string \\"apple\\" as a subsequence of \\"abppplee\\". The shortest such subsequence is \\"abpple\\", which is of length 6.","solution":"def shortest_subsequence_length(s, t): Returns the length of the shortest subsequence of `s` that contains all characters of `t` in order. If it is impossible, returns -1. m, n = len(s), len(t) dp = [[float(\'inf\')] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1] + 1) else: dp[i][j] = dp[i - 1][j] + 1 result = dp[m][n] return result if result != float(\'inf\') else -1"},{"question":"=====Problem Statement===== You are given another list of rational numbers. Your task is to find and print the sum of these rational numbers in its simplest form. Concept The `fractions.Fraction` class provides support for rational number arithmetic in Python. Using this class, you can easily create fractions and perform operations like addition. For example: ```python from fractions import Fraction a = Fraction(1, 3) b = Fraction(2, 5) print(a + b) # Output: 11/15 ``` The `sum()` function can be used along with list comprehensions to sum a list of fractions. =====Input Format===== The first line contains an integer `n`, the number of rational numbers. The ith of the next `n` lines contains two integers each, the numerator (`N_i`) and denominator (`D_i`) of the ith rational number. =====Constraints===== 1 ≤ n ≤ 100 1 ≤ N_i, D_i ≤ 10^9 =====Output Format===== Print only one line containing the numerator and denominator of the sum of the numbers in the list in its simplest form, i.e., the numerator and denominator have no common divisor other than 1.","solution":"from fractions import Fraction def sum_of_fractions(fractions_list): Takes a list of tuples representing fractions and returns the sum of them in simplest form. Args: fractions_list (list): A list of tuples where each tuple contains two integers (numerator, denominator). Returns: Fraction: The sum of the fractions in simplest form. total_sum = sum(Fraction(numerator, denominator) for numerator, denominator in fractions_list) return total_sum def rational_sum(): n = int(input()) fractions_list = [] for _ in range(n): numerator, denominator = map(int, input().split()) fractions_list.append((numerator, denominator)) result = sum_of_fractions(fractions_list) print(result.numerator, result.denominator)"},{"question":"Given an array of integers, apply left rotations to the array and return the result after all rotations are completed. Description: A left rotation on an array shifts each of the array\'s elements 1 unit to the left. For example, if 2 left rotations are applied to array [1, 2, 3, 4, 5], then the array would become [3, 4, 5, 1, 2]. Function Signature: ```python def left_rotate(arr: List[int], d: int) -> List[int]: ``` Input: - An integer n, the number of elements in the array (1 ≤ n ≤ 10^5). - An integer d, the number of left rotations to perform (0 ≤ d ≤ n). - An array of n integers. Output: - The array after performing d left rotations. Example: ```plaintext Input: 5 4 1 2 3 4 5 Output: 5 1 2 3 4 ``` Explanation: After performing 4 left rotations, the array [1, 2, 3, 4, 5] becomes [5, 1, 2, 3, 4].","solution":"from typing import List def left_rotate(arr: List[int], d: int) -> List[int]: Perform d left rotations on the array arr. n = len(arr) d = d % n # In case d > n, reduce d to within the bounds of n return arr[d:] + arr[:d]"},{"question":"You are given a list of n cities connected by n−1 roads (meaning there are no cycles and the network forms a tree). Each road connects exactly two cities and has a travel cost associated with it. Your task is to find the maximum travel cost between any pair of cities within the tree. Input The first line contains an integer n (2 ≤ n ≤ 10^5), the number of cities. Each of the following n−1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), describing a road connecting city u and city v with a travel cost of w. Output Print a single integer, the maximum travel cost between any pair of cities in the tree. Examples Input 4 1 2 3 2 3 4 2 4 2 Output 7 Input 5 1 2 100 1 3 200 2 4 150 2 5 10 Output 450","solution":"def max_travel_cost(n, roads): from collections import defaultdict import heapq def dijkstra(start, graph): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 pq = [(0, start)] while pq: distance, node = heapq.heappop(pq) if distance > dist[node]: continue for neighbor, weight in graph[node]: new_dist = distance + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return dist graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Run Dijkstra from an arbitrary node (e.g., node 1) to find the furthest node dist_from_start = dijkstra(1, graph) furthest_node = max(dist_from_start, key=dist_from_start.get) # Run Dijkstra from the furthest node to find the maximum distance to any node dist_from_furthest = dijkstra(furthest_node, graph) max_cost = max(dist_from_furthest.values()) return max_cost"},{"question":"# Task: Write a function that takes a string representing an expression in prefix notation (also known as Polish notation) and evaluates it. Prefix notation is a mathematical notation in which every operator precedes its operands. The function should return the result of the expression as an integer. The function is called `evaluate_prefix` or `ExpressionEvaluator.evaluatePrefix` and takes in a single string parameter representing the prefix expression. The operators in the expression will be `+`, `-`, `*`, and `/`, and the operands will be non-negative integers. Division should be integer division. The prefix expression will always be properly formatted and will not contain any invalid characters. There will be no parentheses in the input expression. # Examples: ```python evaluate_prefix(\\"+ 5 7\\") => 12 ``` ```python evaluate_prefix(\\"* 5 + 2 3\\") => 25 ``` ```python evaluate_prefix(\\"- / 10 + 1 1 * 1 2\\") => 3 ``` # Notes: 1. You might find it useful to start by splitting the expression into individual tokens. 2. Operands and operators are separated by a single space. 3. Ensure to handle operator precedence correctly. 4. When evaluating division, use integer division (//) to ensure the result is an integer. # Example Details: For `evaluate_prefix(\\"* 5 + 2 3\\")`: > The expression can be broken down as: * (5 + 2 3) Which evaluates to `* (5 + 5)` And then to `* 5 + 5` Resulting in `25`.","solution":"def evaluate_prefix(expression): Evaluates a prefix expression and returns the result as an integer. :param expression: str: The prefix expression :return: int: The result of the evaluated expression tokens = expression.split() stack = [] for token in reversed(tokens): if token.isdigit(): stack.append(int(token)) else: operand1 = stack.pop() operand2 = stack.pop() if token == \'+\': stack.append(operand1 + operand2) elif token == \'-\': stack.append(operand1 - operand2) elif token == \'*\': stack.append(operand1 * operand2) elif token == \'/\': stack.append(operand1 // operand2) return stack.pop()"},{"question":"You are given a sequence of N integers a_1, a_2, ..., a_N, and a number K. Your task is to find the K-th smallest number after sorting the sequence in non-decreasing order. Constraints - 1 ≦ N ≦ 100,000 - -10^9 ≦ a_i ≦ 10^9 - 1 ≦ K ≦ N Input The input is given from Standard Input in the following format: N K a_1 a_2 ... a_N Output Print a single integer which is the K-th smallest number in the sorted sequence. Examples Input 5 2 3 1 4 1 5 Output 1 Input 7 4 9 8 7 6 5 4 3 Output 6","solution":"def kth_smallest_number(N, K, sequence): Finds the K-th smallest number in a sequence of N integers. Parameters: N (int): The number of elements in the sequence. K (int): The position in the sorted sequence to find. sequence (list): The list of integers. Returns: int: The K-th smallest number in the sorted sequence. sequence.sort() return sequence[K-1]"},{"question":"In a town named Pleasantville, there are several traffic lights positioned at specific junctions. Each traffic light can be green or red at any given time. John, who is a traffic engineer, is tasked with optimizing the flow of traffic by analyzing the status of traffic lights in the town. The status of each traffic light is represented by a string of \'G\' and \'R\', where \'G\' stands for green and \'R\' stands for red. John wants to know the longest sequence of consecutive green lights (\'G\') for any given traffic pattern. Example >>> print longest_green_sequence(\\"GRRGGGRGRG\\") 3 >>> print longest_green_sequence(\\"GGGGGRRRRGG\\") 5 >>> print longest_green_sequence(\\"RRRRGGG\\") 3 Task Write a function that takes a string, representing the status of traffic lights, and returns the length of the longest sequence of consecutive green lights. Function Description Complete the longest_green_sequence function in the editor below. longest_green_sequence has the following parameter: string lights: a string representing the status of the traffic lights Returns int: the length of the longest sequence of consecutive green lights Input Format A single line containing the string lights. Constraints 1 leq len(lights) leq 100 Each character in the string will be either \'G\' or \'R\'. Sample Input 1 GRRGGGRGRG Sample Output 1 3 Sample Input 2 GGGGGRRRRGG Sample Output 2 5 Sample Input 3 RRRRGGG Sample Output 3 3 Explanation For the first sample input, the longest sequence of green lights is \\"GGG\\", which has a length of 3. For the second sample input, the longest sequence of green lights is \\"GGGGG\\", which has a length of 5. For the third sample input, the longest sequence of green lights is \\"GGG\\", which has a length of 3.","solution":"def longest_green_sequence(lights): Returns the length of the longest sequence of consecutive green lights (\'G\'). Parameters: lights (str): A string representing the status of the traffic lights, consisting of \'G\' and \'R\' characters. Returns: int: The length of the longest sequence of consecutive green lights. max_length = 0 current_length = 0 for light in lights: if light == \'G\': current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are working at a candy factory, and you have to package candies into boxes. Each box can contain exactly 1 kg of candies. However, due to the packaging process, candies may vary slightly, and you need to ensure that each box does not exceed the weight limit. The candies in each box must be weighed such that the total weight is as close to 1 kg as possible but must not exceed 1 kg. Given a list of candy weights, your task is to determine the maximum number of boxes that can be perfectly packed following the rules. -----Input:----- - The first line will contain an integer T, the number of test cases. - Each test case will comprise of two lines: - The first line contains an integer n, the number of candy pieces. - The second line contains n integers separated by spaces, where each integer represents the weight of a candy in grams. -----Output:----- - For each test case, output a single integer - the maximum number of boxes that can be perfectly packed. -----Constraints:----- - 1 leq T leq 100 - 1 leq n leq 10^5 - 1 leq text{weight of each candy} leq 1000 -----Sample Input:----- 2 5 300 500 200 700 100 4 400 400 300 200 -----Sample Output:----- 3 2","solution":"def max_boxes(T, test_cases): results = [] for case in test_cases: n, weights = case weights.sort(reverse=True) boxes = 0 current_weight = 0 for weight in weights: if current_weight + weight <= 1000: current_weight += weight else: boxes += 1 current_weight = weight if current_weight > 0: boxes += 1 results.append(boxes) return results"},{"question":"You are responsible for organizing a team\'s code review process. Each team member reviews code from their peers, providing comments on potential issues. Given a list of tuples, each containing a team member\'s name and the number of comments they\'ve made, write a function to determine which team member made the most comments. In the case of a tie, return all names that tied for the highest number of comments. The names should be returned as a sorted list. For example: ```python review_comments([ (\\"Alice\\", 5), (\\"Bob\\", 5), (\\"Charlie\\", 8), (\\"Diana\\", 8) ]) => [\\"Charlie\\", \\"Diana\\"] ``` If there\'s a clear leader: ```python review_comments([ (\\"Alice\\", 10), (\\"Bob\\", 8), (\\"Charlie\\", 8) ]) => [\\"Alice\\"] ``` If no reviews/empty list: ```python review_comments([]) => [] ```","solution":"def review_comments(reviews): Determine which team member made the most comments. In case of a tie, return all names tied for the highest number of comments. Parameters: reviews (list of tuples): A list where each tuple contains a team member\'s name and the number of comments they\'ve made. Returns: list: A sorted list of names who made the most comments. if not reviews: return [] max_comments = max(reviews, key=lambda x: x[1])[1] return sorted([name for name, comments in reviews if comments == max_comments])"},{"question":"Write a function that takes an array of numbers and returns a new array containing only the numbers that are strictly larger than the average of the original array. Examples: ```python larger_than_average([1, 2, 3, 4, 5]) # returns [4, 5] larger_than_average([10, 20, 30, 40, 50, 60]) # returns [40, 50, 60] ```","solution":"def larger_than_average(arr): Given an array of numbers, returns a new array containing only the numbers that are strictly larger than the average of the original array. if not arr: return [] average = sum(arr) / len(arr) return [num for num in arr if num > average]"},{"question":"You are given two strings, `s` and `t`, of equal length consisting of lowercase English letters. You are allowed to perform multiple operations of the following type: choose an index `i` (1 ≤ i ≤ n), and replace the character at index `i` with any lowercase English letter. Your goal is to make the strings `s` and `t` equal using the minimum number of operations. Your task is to find the minimum number of operations required to achieve this. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the strings `s` and `t`. The second line contains the string `s` of length n. The third line contains the string `t` of length n. Output Print a single integer — the minimum number of operations required to make the strings `s` and `t` equal. Examples Input 5 abcde ebcda Output 2 Input 3 abc xyz Output 3 Note In the first example, one possible way to make `s` equal to `t` is by changing: 1. The first character \'a\' to \'e\'. 2. The last character \'e\' to \'a\'. This results in the minimum number of operations required being 2. In the second example, each character of `s` (\'a\', \'b\', \'c\') needs to be changed to match the corresponding character in `t` (\'x\', \'y\', \'z\'), resulting in 3 operations.","solution":"def min_operations_to_equal_strings(n, s, t): Returns the minimum number of operations required to make strings `s` and `t` equal. Parameters: n (int): Length of the strings `s` and `t`. s (str): First string of length `n`. t (str): Second string of length `n`. Returns: int: Minimum number of operations required. operations = 0 for i in range(n): if s[i] != t[i]: operations += 1 return operations"},{"question":"Given a binary tree, return the values of its nodes in a specific order, known as \\"bottom-up level order traversal\\". In this order, the tree is traversed level by level from the bottom up, and from left to right within each level. -----Input----- The input consists of a single line that represents the binary tree in level order traversal format. The nodes are given in a space-separated string, where \\"null\\" represents missing children. -----Output----- The output should consist of the values of the nodes in the \\"bottom-up level order traversal\\" as a space-separated string. -----Examples----- Sample Input 1: 3 9 20 null null 15 7 Sample Output 1: 15 7 9 20 3 Sample Input 2: 1 2 3 4 null null 5 Sample Output 2: 4 5 2 3 1 # Note - For this task, you can assume that the input represents a valid binary tree. - The binary tree can have up to 10^4 nodes. # Constraints - Each node value in the binary tree can range from -10^5 to 10^5. - The given tree may be a binary search tree, but that does not affect traversal order for this task.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes or nodes[0] == \\"null\\": return None root = TreeNode(int(nodes[0])) queue = deque([root]) index = 1 while queue and index < len(nodes): node = queue.popleft() if nodes[index] != \\"null\\": node.left = TreeNode(int(nodes[index])) queue.append(node.left) index += 1 if index < len(nodes) and nodes[index] != \\"null\\": node.right = TreeNode(int(nodes[index])) queue.append(node.right) index += 1 return root def bottom_up_level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, current_level) return [val for level in result for val in level] def level_order_to_bottom_up(input_str): nodes = input_str.split() root = build_tree(nodes) return \\" \\".join(map(str, bottom_up_level_order_traversal(root)))"},{"question":"A large shipping company delivers packages to multiple destinations. They use an intricate network of roads connecting different cities. Each road has a specific length, and each pair of cities is connected by at most one direct road. Moreover, the company can send a truck with a given capacity from one city to another to deliver packages. To optimize their operations, the company wants to determine the minimum number of trucks required to deliver all packages from the origin city to the destination city. The truck\'s capacity determines how many packages it can carry at a time. Note that some packages may need to be transferred between trucks in intermediate cities. Your task is to implement an algorithm that finds the minimum number of trips required, considering the constraints of the truck\'s capacity and the network of cities. Input The first input line contains integers n (2 ≤ n ≤ 1000), m (1 ≤ m ≤ 10000), c (1 ≤ c ≤ 100), and p (1 ≤ p ≤ 1000000). `n` represents the number of cities, `m` the number of roads, `c` the truck capacity, and `p` the total number of packages to be delivered. The second line contains two distinct integers, `s` and `d` (1 ≤ s, d ≤ n), representing the origin and the destination city respectively. The next `m` lines each contain three integers `u`, `v` (1 ≤ u, v ≤ n) and `l` (1 ≤ l ≤ 1000) representing a direct road between cities `u` and `v`, with length `l`. Output Print the minimum number of truck trips required to deliver all the packages from city `s` to city `d`. Examples Input 5 6 10 100 1 5 1 2 4 1 3 2 2 4 7 3 4 3 4 5 1 2 3 5 Output 10 Input 4 4 5 20 1 4 1 2 6 2 3 2 3 4 8 1 3 10 Output 4 Note For the first example, the shortest route from city 1 to city 5 involves cities 1 -> 3 -> 4 -> 5. Given the truck capacity of 10 packages per trip, 10 trips are required to transport all 100 packages. For the second example, one of the shortest routes from city 1 to city 4 involves cities 1 -> 3 -> 4. With the capacity of 5 packages per trip and 20 packages to be transported, 4 trips are required.","solution":"import heapq def min_truck_trips(n, m, c, p, s, d, roads): # Function to find the shortest path using Dijkstra\'s algorithm def dijkstra(start, end, graph): distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] # Initialize graph as an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) # Find the shortest path distance from s to d shortest_distance_sd = dijkstra(s, d, graph) # Calculate the number of trips needed min_trips = (p + c - 1) // c # This is ceil(p / c) using integer arithmetic return min_trips"},{"question":"Write a program that determines whether you can obtain an exact specified amount of money by using a given set of coins. Each coin has a different value, and you may use each coin as many times as needed. The program should decide if the specified amount can be constructed using these coins. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of different types of coins. The second line contains n integers a_{1}, a_{2}, ..., a_{n} (1 ≤ a_{i} ≤ 10000) — the values of the coins. The third line contains an integer k (1 ≤ k ≤ 10^5) — the amount of money we need to construct. -----Output----- Print \\"YES\\" if it is possible to construct the exact amount of k using the coins, otherwise, print \\"NO\\". -----Examples----- Input 3 1 2 5 11 Output YES Input 3 2 4 6 7 Output NO Input 5 1 3 4 5 9 23 Output YES -----Note----- In the first sample, it is possible to construct k = 11 using coins (1 + 5 + 5). In the second sample, it is not possible to construct k = 7 from any combination of 2, 4, and 6. In the third sample, it is possible to construct k = 23 using coins (5 + 9 + 9).","solution":"def can_construct_amount(n, coins, k): Determines if the exact amount of money `k` can be constructed using the given `n` coins. Parameters: n (int): The number of different types of coins. coins (list): The value of each coin. k (int): The target amount of money to construct. Returns: str: \\"YES\\" if the exact amount can be constructed, otherwise \\"NO\\". dp = [False] * (k + 1) dp[0] = True for coin in coins: for amount in range(coin, k + 1): if dp[amount - coin]: dp[amount] = True return \\"YES\\" if dp[k] else \\"NO\\""},{"question":"Given an integer N, print the largest integer k such that k^2 is less than or equal to N. -----Constraints----- - 1 leq N leq 10^9 - The input is a single integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the largest integer k such that k^2 leq N. -----Sample Input----- 15 -----Sample Output----- 3 Explanation: 3^2 = 9 is less than 15, whereas 4^2 = 16 is greater than 15. Hence, the largest k such that k^2 is less than or equal to 15 is 3.","solution":"def largest_k(N): Returns the largest integer k such that k^2 is less than or equal to N. k = 1 while k * k <= N: k += 1 return k - 1"},{"question":"A company is organizing a coding competition and they want to check how many participants were able to solve their problems. Each participant\'s performance is recorded in a log where a `1` indicates the problem was solved and a `0` indicates it was not solved. Given the performance log of all the participants, your task is to determine the number of participants who solved at least `K` problems. Input: The first line contains two integers `N` and `M`, where `N` is the number of participants and `M` is the number of problems in the competition. The next `N` lines each contain `M` integers (either `0` or `1`), representing the performance of each participant. Output: Print a single integer representing the number of participants who solved at least `K` problems. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 100 1 ≤ K ≤ M SAMPLE INPUT 4 5 3 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 SAMPLE OUTPUT 3","solution":"def count_participants_who_solved_k_problems(N, M, K, performance_log): Given the performance log of participants in a competition, determines the number of participants who solved at least K problems. Parameters: N (int): Number of participants. M (int): Number of problems. K (int): Minimum number of problems a participant should have solved. performance_log (list of list of int): The performance log where each inner list represents the performance of a participant. Returns: int: The number of participants who solved at least K problems. count = 0 for performance in performance_log: if sum(performance) >= K: count += 1 return count"},{"question":"Joe is working on a secret project involving pairs of numbers! Given an integer M, find and output three integers X, Y, and Z such that: * 1 ≤ X, Y, Z ≤ 10^6, and * X + Y + Z = M. ------ Input: ------ The first line of input consists of a single integer Q (1 ≤ Q ≤ 10^5) -- the number of test cases. The next Q lines will consist of one integer, M (3 ≤ M ≤ 3 times 10^6). ------ Output: ------ For each of the Q test cases, output three space-separated integers X, Y, and Z. ------ Subtasks ------ * Subtask 1 [100 points]: No additional constraints. ----- Sample Input 1 ------ 4 6 9 12 15 ----- Sample Output 1 ------ 1 2 3 2 3 4 3 4 5 4 5 6","solution":"def find_xyz_for_sum(m): Given an integer M, finds three integers X, Y, Z such that: 1 ≤ X, Y, Z ≤ 10^6 X + Y + Z = M # We can simply choose X = M - 3, Y = 1, Z = 2 # This ensures that X + Y + Z = M and the values are within the required range X = m - 3 Y = 1 Z = 2 return X, Y, Z def process_input(q, queries): results = [] for m in queries: results.append(find_xyz_for_sum(m)) return results"},{"question":"Given an undirected graph with `n` nodes and `m` edges, determine if the graph is bipartite. * A graph is bipartite if we can split its set of nodes into two independent subsets such that no two graph vertices within the same set are adjacent. Constraints - 1 ≤ n ≤ 10,000 - 0 ≤ m ≤ 100,000 Input The input is given in the following format: ``` n m u1 v1 u2 v2 : um vm ``` The first line contains the number of nodes `n` and the number of edges `m`. The next `m` lines contain the edges, each defined by a pair of integers `ui` and `vi` representing an edge between nodes `ui` and `vi`. Output Output `YES` if the graph is bipartite, otherwise, output `NO`. Example Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` NO ``` Explanation The graph contains an odd-length cycle (1-2-3-1), so it is not bipartite. Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` YES ```","solution":"from collections import deque, defaultdict def is_bipartite_graph(n, m, edges): Check if the given undirected graph is bipartite. :param n: Number of nodes :param m: Number of edges :param edges: List of tuples representing edges (u, v) :return: \'YES\' if the graph is bipartite, otherwise \'NO\' def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # To keep track of the colors of the nodes color = {} # We need to check each component of the graph for node in range(1, n + 1): if node not in color: if not bfs(node): return \'NO\' return \'YES\'"},{"question":"You are given two strings, `s1` and `s2`, your task is to determine the number of times `s2` can be found as a subsequence in `s1`. A subsequence is a sequence derived by deleting some or no elements from the string without changing the order of the remaining elements. Example: ``` s1 = \\"babgbag\\" s2 = \\"bag\\" Output: 5 ``` Explanation: The subsequences are \\"bag\\", \\"bag\\", \\"bg\\", \\"bag\\", and \\"bag\\". Consider: - Both strings consist of lowercase English letters. - The lengths of `s1` and `s2` are reasonably small to medium-sized. You need to write a function that takes in two strings and returns the count of possible subsequences of `s2` in `s1`. Good luck!","solution":"def count_subsequences(s1, s2): Counts the number of times s2 can be found as a subsequence in s1. Parameters: s1 (str): The string in which subsequences are searched. s2 (str): The string which is searched as a subsequence. Returns: int: The number of times s2 can be found as a subsequence in s1. m, n = len(s1), len(s2) # dp array where dp[i][j] is the number of ways to get s2[0..j-1] in s1[0..i-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # There\'s exactly one way to match an empty s2 (by deleting all characters) for i in range(m + 1): dp[i][0] = 1 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] # The result is the number of ways to form s2 in s1 return dp[m][n]"},{"question":"You are given three strings A, B, and C. You need to check if it is possible to form string C by interleaving the characters of strings A and B in such a way that the order of characters in A and B is preserved. -----Constraints----- - All strings contain only lowercase English letters. - 1 leq |A|, |B|, |C| leq 100 -----Input----- Input is given from Standard Input in the following format: A B C -----Output----- Print \\"Yes\\" if it is possible to form string C by interleaving A and B, otherwise print \\"No\\". -----Sample Input----- abc def adbecf -----Sample Output----- Yes - Explanation: \\"abc\\", \\"def\\", and \\"adbecf\\" can be interleaved as follows: a->d->b->e->c->f.","solution":"def is_interleave(a, b, c): Checks if string C can be formed by interleaving strings A and B while preserving their orders. m, n = len(a), len(b) if m + n != len(c): return \\"No\\" dp = [[False] * (n + 1) for _ in range(m + 1)] dp[0][0] = True for i in range(m + 1): for j in range(n + 1): if i > 0 and dp[i - 1][j] and a[i - 1] == c[i + j - 1]: dp[i][j] = True if j > 0 and dp[i][j - 1] and b[j - 1] == c[i + j - 1]: dp[i][j] = True return \\"Yes\\" if dp[m][n] else \\"No\\""},{"question":"A social media platform is implementing a feature to automatically detect and remove inappropriate comments. To achieve this, each inappropriate comment is represented as a continuous sequence of \'!\' characters (one or more). A comment is considered appropriate if it contains zero \'!\' characters, or if all \'!\' sequences are separated by at least one space or another character. Given a string, where each character is either an alphabetic character from \'a\' to \'z\' or \'!\', determine if the comment contains any inappropriate sequences. A comment is considered inappropriate if it contains any sequences of at least two \'!\' characters that are not separated by at least one space or other characters. -----Input----- A single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase letters and/or \'!\' characters. -----Output----- Output “inappropriate” if there is any inappropriate sequence of \'!\' characters and “appropriate” otherwise. -----Examples----- Input hello world! Output appropriate Input hello!! world! Output inappropriate Input h!e!l!l!o! Output appropriate","solution":"def check_comment_appropriateness(s): Checks if the comment contains inappropriate sequences of \'!\' characters. :param s: A string consisting of lowercase letters and/or \'!\' characters. :return: \\"inappropriate\\" if there is any inappropriate sequence of \'!\' characters, \\"appropriate\\" otherwise. parts = s.split(\' \') for part in parts: if \'!!\' in part: return \\"inappropriate\\" return \\"appropriate\\""},{"question":"You are given a list of strings words, where each string is a sequence of up to 10 lowercase English letters. Your task is to find the length of the longest subset of words such that no two words in the subset share the same character. Write a function `maxUniqueSubsetLength(words)` that does this. Example 1: Input: words = [\\"abc\\", \\"def\\", \\"ghi\\"] Output: 3 Explanation: All three words can be included since they do not share any characters. Example 2: Input: words = [\\"abc\\", \\"abd\\", \\"xyz\\"] Output: 2 Explanation: We can select \\"abc\\" and \\"xyz\\" as they do not share any characters with each other. Another option is selecting \\"abd\\" and \\"xyz\\". Example 3: Input: words = [\\"a\\", \\"b\\", \\"c\\", \\"a\\"] Output: 3 Explanation: We can select \\"a\\", \\"b\\", and \\"c\\" as they do not share any characters with each other. The repeated \\"a\\" does not need to be included again. Your Task: Complete the function `maxUniqueSubsetLength(words)` which takes a list of strings words as input and returns an integer representing the length of the longest subset of words that do not share any characters. Expected Time Complexity: O(2^N * N), where N is the number of words. Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(words) ≤ 20 1 ≤ len(words[i]) ≤ 10 words[i] consists of lowercase English letters.","solution":"def maxUniqueSubsetLength(words): # Helper function to check if two words share any common characters def share_common_chars(word1, word2): return bool(set(word1) & set(word2)) n = len(words) # Generate all possible subsets of words def generate_subsets(index, current_set, current_size): if index == n: return current_size # Skip the current word without_current = generate_subsets(index + 1, current_set, current_size) # Include the current word if it doesn\'t share any characters with already included words can_include = True for word in current_set: if share_common_chars(word, words[index]): can_include = False break with_current = current_size if can_include: with_current = generate_subsets(index + 1, current_set + [words[index]], current_size + 1) return max(without_current, with_current) return generate_subsets(0, [], 0)"},{"question":"You are given a grid consisting of N rows and M columns. Each cell in the grid contains either a \'0\' or a \'1\'. Your task is to find the size of the largest rectangle containing only \'1\'s and return the number of such largest rectangles that can be found in the grid. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M. Each of the next N lines contains a string of length M consisting of \'0\'s and \'1\'s only. ------ Output ------ For each test case, print a single line containing two integers: the size of the largest rectangle of \'1\'s and the number of such rectangles in the grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 ----- Sample Input 1 ------ 2 4 5 10101 11100 11111 10010 6 6 101010 010101 101010 010101 101010 010101 ----- Sample Output 1 ------ 6 1 1 18 ----- explanation 1 ------ Example case 1: The largest rectangle of \'1\'s has a size of 6 (2 rows * 3 columns), and there is exactly one such rectangle in the grid. Example case 2: The largest rectangle of \'1\'s has a size of 1, and there are 18 such rectangles (each \'1\' in the grid forms such a rectangle).","solution":"def find_largest_rectangle(grid): This function takes a grid of \'0\'s and \'1\'s and returns the size of the largest rectangle containing only \'1\'s and the number of such largest rectangles. n = len(grid) m = len(grid[0]) if n > 0 else 0 if not n or not m: return 0, 0 heights = [0] * m left = [0] * m right = [m] * m max_area = 0 count_max_area = 0 for row in grid: current_left, current_right = 0, m # Update heights for i in range(m): if row[i] == \'1\': heights[i] += 1 else: heights[i] = 0 # Update left boundaries for i in range(m): if row[i] == \'1\': left[i] = max(left[i], current_left) else: left[i] = 0 current_left = i + 1 # Update right boundaries for i in range(m-1, -1, -1): if row[i] == \'1\': right[i] = min(right[i], current_right) else: right[i] = m current_right = i # Calculate areas for i in range(m): area = (right[i] - left[i]) * heights[i] if area > max_area: max_area = area count_max_area = 1 elif area == max_area: count_max_area += 1 return max_area, count_max_area def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(find_largest_rectangle(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) grid = [lines[i] for i in range(index + 1, index + N + 1)] test_cases.append(grid) index += N + 1 return test_cases def solve(input_str): test_cases = parse_input(input_str) results = process_test_cases(test_cases) return \\"n\\".join(f\\"{area} {count}\\" for area, count in results)"},{"question":"You are given a list of integers where each integer appears at least twice, except for one that appears exactly once. Your task is to find the integer that appears only once. You should implement an efficient solution with linear run-time complexity and constant space complexity. Input A list of integers `nums` where 1 ≤ len(nums) ≤ 10^5 and each integer in the list is between -10^9 and 10^9 inclusive. Output Return the single integer that appears only once. Example Input [4, 1, 2, 1, 2] Output 4 Input [2, 2, 3, 2, 2] Output 3","solution":"def find_single_number(nums): Returns the single integer that appears only once in the list. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"In a small town, there\'s a peculiar street with houses numbered 1 to N, all placed in a row. Each house has its unique charm and comes with a happiness value represented as an integer in an array. The town mayor wants to conduct a happiness survey but with a condition: they want to know the happiness values of the houses in a subarray specified by a given range [L, R], but only on a day where the subarray\'s maximum happiness value is an odd number. Otherwise, they skip that subarray on that day. Your task is to help the mayor by writing a function that, given multiple queries on such subarrays, determines if the maximum value in each queried subarray is odd or not. -----Input section----- The first line contains an integer N, the number of houses. The second line contains N space-separated integers, representing the happiness values of each house. The third line contains an integer Q, the number of queries. Each of the next Q lines contains two integers L and R, representing the 1-based starting and ending indices of the subarray. -----Output section----- For each query, print \\"Odd\\" if the maximum happiness value in the range [L, R] is odd, otherwise print \\"Even\\". -----Input constraints----- 1 ≤ N ≤ 10^5 1 ≤ Happiness value ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N -----Sample Input----- 5 3 6 2 7 5 3 1 3 2 5 4 5 -----Sample Output----- Even Odd Odd -----Explanation----- For the first query, the subarray is [3, 6, 2] and the max value is 6 which is even. For the second query, the subarray is [6, 2, 7, 5] and the max value is 7 which is odd. For the third query, the subarray is [7, 5] and the max value is 7 which is odd.","solution":"def check_odd_happiness(N, happiness, Q, queries): results = [] for L, R in queries: # Subtract 1 to convert from 1-based to 0-based index subarray = happiness[L - 1: R] if max(subarray) % 2 == 1: results.append(\\"Odd\\") else: results.append(\\"Even\\") return results"},{"question":"Given an array arr[] of N non-negative integers and an integer K. You have to divide the array into at most M subarrays such that the sum of each subarray does not exceed K. Return the minimum number of subarrays needed to achieve this. Example 1: Input: N = 5, K = 5, arr[] = {1, 2, 3, 4, 5}, M = 3 Output: 3 Explanation: The array can be divided into [1, 2], [3], [4, 5]. Each subarray has a sum less than or equal to K, and we end up with 3 subarrays. Example 2: Input: N = 4, K = 7, arr[] = {2, 1, 5, 1}, M = 2 Output: 2 Explanation: The array can be divided into [2, 1, 4] and [5], with each subarray having a sum less than or equal to K, and we only need 2 subarrays, which is within the limit M. Your Task: You do not need to read input or print anything. Your task is to complete the function minimizeSubarrays() which takes an integer N, an integer K, an array arr of size N, and an integer M as input and returns the minimum number of subarrays required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^4 1 ≤ arr[i] ≤ 10^4 1 ≤ M ≤ N","solution":"def minimizeSubarrays(N, K, arr, M): subarray_count = 1 current_sum = 0 for num in arr: if num > K: return -1 # If single element is greater than K, we cannot satisfy the condition if current_sum + num > K: subarray_count += 1 current_sum = num else: current_sum += num if subarray_count > M: subarray_count = M # Return within the constraint M return subarray_count"},{"question":"Bob the Builder needs some help organizing his toolbox. He has a list of tools, each with a unique name and a weight associated with it. Bob wants to sort his tools in the order of their weights, but if two tools have the same weight, he wants them to be sorted lexicographically by their names. # The Challenge Given a list of tuples, where each tuple contains a string (the name of the tool) and an integer (the weight of the tool), write a function that returns a list of tool names sorted first by weight, and then lexicographically by their names if their weights are the same. # Input - A list of tuples, where each tuple contains: - A string `name` representing the name of the tool. - An integer `weight` representing the weight of the tool. # Output - A list of strings representing the tool names, sorted by the criteria mentioned. # Example ```python tools = [(\\"hammer\\", 5), (\\"nails\\", 1), (\\"screwdriver\\", 3), (\\"pliers\\", 5), (\\"wrench\\", 3)] sorted_tools = sort_tools(tools) print(sorted_tools) # Output: [\'nails\', \'screwdriver\', \'wrench\', \'hammer\', \'pliers\'] ``` # Constraints 1. All tool names are unique. 2. The list contains at least 1 and at most 100 tools. 3. The weight of each tool is a positive integer (1 ≤ weight ≤ 100).","solution":"def sort_tools(tools): Returns a list of tool names sorted first by weight, and then lexicographically by their names if their weights are the same. :param tools: List of tuples, where each tuple contains a string (tool name) and an integer (weight). :return: List of tool names sorted by the specified criteria. # Sort tools by weight and then by name sorted_tools = sorted(tools, key=lambda tool: (tool[1], tool[0])) # Extract just the tool names from the sorted list sorted_tool_names = [tool[0] for tool in sorted_tools] return sorted_tool_names"},{"question":"Given a matrix of characters, write a function to check if it is possible to find a path from the top-left corner to the bottom-right corner. You can move up, down, left, or right, but you cannot move diagonally. The matrix will contain only the characters \'X\' and \'O\'. \'X\' represents an obstacle and \'O\' represents an open space. The path should only go through \'O\'. Your function should return \\"YES\\" if such a path exists and \\"NO\\" otherwise. -----Input----- - The first line of the input contains two integers, m and n, the number of rows and columns in the matrix (1 leq m, n leq 100). - Each of the next m lines contains n characters, each of which is either \'X\' or \'O\', representing the matrix. -----Output----- - Output a single line, \\"YES\\" or \\"NO\\", indicating whether a path exists. -----Examples----- Sample Input 1: 3 3 OXO OXX OOO Sample Output 1: YES Explanation 1: The path can be: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). Sample Input 2: 3 3 OXO XXO OOX Sample Output 2: NO Explanation 2: There is no path from the top-left corner to the bottom-right corner. Sample Input 3: 2 2 OX XO Sample Output 3: NO Explanation 3: There is no path from the top-left corner to the bottom-right corner due to diagonal barriers.","solution":"def is_path_exists(matrix): m = len(matrix) n = len(matrix[0]) def dfs(x, y, visited): if x == m - 1 and y == n - 1: return True visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and matrix[new_x][new_y] == \'O\' and (new_x, new_y) not in visited: if dfs(new_x, new_y, visited): return True return False if matrix[0][0] != \'O\' or matrix[m-1][n-1] != \'O\': return \\"NO\\" visited = set() return \\"YES\\" if dfs(0, 0, visited) else \\"NO\\""},{"question":"Given a positive integer K, reverse the bits of K and return the resulting integer. Example 1: Input: k = 5 Output: 5 Explanation: The binary representation of 5 is \'101\'. Reversing the bits gives \'101\', which is 5 in decimal. Example 2: Input: k = 13 Output: 11 Explanation: The binary representation of 13 is \'1101\'. Reversing the bits gives \'1011\', which is 11 in decimal. Your Task: You don\'t need to read input or print anything. Complete the function reverseBits() which takes k as input parameter and returns the integer obtained by reversing the bits of k. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= k <= 1000","solution":"def reverseBits(k): Reverses the bits of a given positive integer k and returns the resulting integer. # Convert the number to binary and remove the \'0b\' prefix binary_representation = bin(k)[2:] # Reverse the binary string reversed_binary = binary_representation[::-1] # Convert the reversed binary string back to an integer reversed_integer = int(reversed_binary, 2) return reversed_integer"},{"question":"Given an integer array nums and a target integer target, return the indices of the two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. - Each test case contains two lines of input. - The first line of each test case contains two integers n (the size of the array) and target. - The second line of each test case contains n space-separated integers representing the array nums. ------ Output Format ------ For each test case, print two space-separated integers a and b (indices of the elements in the array that add up to the target) in a single line. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ n ≤ 10^{4} -10^{9} ≤ nums[i] ≤ 10^{9} -10^{9} ≤ target ≤ 10^{9} You may assume that each test case has exactly one solution. ----- Sample Input 1 ------ 2 4 9 2 7 11 15 3 6 3 2 4 ----- Sample Output 1 ------ 0 1 1 2 ------ Explanation ------ - Test case 1: The array is [2, 7, 11, 15], and the target is 9. The indices of the two numbers adding up to the target are 0 and 1. - Test case 2: The array is [3, 2, 4], and the target is 6. The indices of the two numbers adding up to the target are 1 and 2.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return (-1, -1) # should never be reached if there is exactly one solution def solve(test_cases): Solves the problem for multiple test cases. results = [] for test_case in test_cases: n, target = test_case[\'n\'], test_case[\'target\'] nums = test_case[\'nums\'] result = two_sum(nums, target) results.append(result) return results"},{"question":"You are given a rectangular grid with m rows and n columns. Each cell in the grid contains either a 0 or a 1. A cell containing a 1 represents a wall, while a cell containing a 0 represents an open space. You need to determine the shortest path from the top-left corner of the grid to the bottom-right corner, moving only through open spaces (0s) and avoiding walls (1s). You can move up, down, left, or right, but you cannot move diagonally. Write a program to find the length of the shortest path. If there is no valid path, return -1. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the grid, respectively. - The next m lines each contain n integers (either 0 or 1), representing the grid. Output - Output a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. Example Input 5 5 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 1 1 1 1 0 Output 9","solution":"from collections import deque def shortest_path(grid, m, n): Returns the length of the shortest path from the top-left to the bottom-right corner of the grid. :param grid: List[List[int]]: The grid representation :param m: int: Number of rows :param n: int: Number of columns :return: int: Shortest path length or -1 if no valid path exists # Initialize directions array for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set() visited.add((0, 0)) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # If start or end is a wall, return -1 while queue: r, c, dist = queue.popleft() if r == m-1 and c == n-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"Write a function that takes a list of integers as an input and returns a new list where every instance of the smallest number is removed. If the input list is empty, return an empty list. # Example Input: ``` [3, 1, 2, 1, 4, 5, 1] ``` Output: ``` [3, 2, 4, 5] ``` Input: ``` [7, 8, 5, 5, 8, 7] ``` Output: ``` [7, 8, 8, 7] ``` Input: ``` [] ``` Output: ``` [] ``` # Requirements - You must return a new list, not modify the input list. - You may assume that the input list contains only integers. - The function should correctly handle lists with both positive and negative integers.","solution":"def remove_smallest_occurrences(lst): Returns a new list where every instance of the smallest number is removed. :param lst: A list of integers :return: A new list with every instance of the smallest number removed if not lst: return [] smallest = min(lst) return [x for x in lst if x != smallest]"},{"question":"Write a function to calculate the matrix product of two given matrices. The function should return the resulting matrix after multiplying the two input matrices. If the matrices cannot be multiplied due to incompatible dimensions, the function should return `None`. ``` def matrix_multiply(matrix_a, matrix_b): ``` # Input - Two matrices represented as 2D lists of integers. # Output - A matrix represented as a 2D list of integers, or `None` if the matrices have incompatible dimensions. # Example Example 1: ``` matrix_a = [[1, 2, 3], [4, 5, 6]] matrix_b = [[7, 8], [9, 10], [11, 12]] matrix_multiply(matrix_a, matrix_b) => [[58, 64], [139, 154]] ``` Example 2: ``` matrix_a = [[1, 2], [3, 4]] matrix_b = [[5, 6], [7, 8]] matrix_multiply(matrix_a, matrix_b) => [[19, 22], [43, 50]] ``` Example 3: ``` matrix_a = [[1, 2, 3], [4, 5, 6]] matrix_b = [[7, 8, 9], [10, 11, 12]] matrix_multiply(matrix_a, matrix_b) => None ``` # Note - Matrix multiplication is only possible when the number of columns in the first matrix is equal to the number of rows in the second matrix. - If `matrix_a` is of dimensions `m x n` and `matrix_b` is of dimensions `n x p`, the resulting matrix will be of dimensions `m x p`.","solution":"def matrix_multiply(matrix_a, matrix_b): Calculate the matrix product of two given matrices. Parameters: matrix_a (list of list of int): The first input matrix. matrix_b (list of list of int): The second input matrix. Returns: list of list of int: The result of multiplying the two matrices. None if matrices have incompatible dimensions. # Check if number of columns in matrix_a is equal to number of rows in matrix_b if len(matrix_a[0]) != len(matrix_b): return None # Initialize result matrix with zeros result = [[0 for _ in range(len(matrix_b[0]))] for _ in range(len(matrix_a))] # Calculate matrix multiplication for i in range(len(matrix_a)): for j in range(len(matrix_b[0])): for k in range(len(matrix_b)): result[i][j] += matrix_a[i][k] * matrix_b[k][j] return result"},{"question":"You are given a list of unique integers where each integer is between 1 and n (inclusive), where n is the size of the list. Your task is to complete the function findMissingNumber that returns the missing integer from the list. Example 1: Input: nums = [3, 7, 1, 2, 8, 4, 5] Output: 6 Explanation: The missing number between 1 to 8 is 6. Example 2: Input: nums = [1, 2, 3, 5] Output: 4 Explanation: The missing number between 1 to 5 is 4. Your Task: Complete the function findMissingNumber() which takes a list as an input parameter and returns the missing integer. Expected Time Complexity: O(N), N = length of the list. Expected Auxiliary Space: O(1) Constraints: 1 <= size of the list <= 1000","solution":"def findMissingNumber(nums): Finds the missing number in the list of unique integers between 1 and len(nums)+1 n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) missing_number = expected_sum - actual_sum return missing_number"},{"question":"You are given a string containing only the characters \'a\' and \'b\'. Your task is to transform the string such that no two adjacent characters are the same by performing the minimum number of character replacements. You are not allowed to change an \'a\' to \'b\' or vice versa, i.e., you can only change an \'a\' to another \'a\' and a \'b\' to another \'b\'. Your goal is to determine the minimum number of replacements needed to achieve this and to output the resultant string. Input: First line contains an integer T, the number of test cases. Each test case consists of a single line containing the string made up of \'a\' and \'b\'. Output: For each test case, on a new line print the minimum number of replacements needed and the resultant string after the replacements. Constraints: 1 ≤ T ≤ 100 1 ≤ length of string ≤ 1000 Example Input: 2 ab aaab Example Output: 0 ab 1 abab Explanation: For the first case, the string is already alternating, so no replacements are needed. For the second case, we can replace the third \'a\' to \'b\', resulting in \\"abab\\". The transformations have to ensure no two adjacent characters are the same, and we have to perform the minimum number of such replacements.","solution":"def transform_string(s): Transform the string such that no two adjacent characters are the same by performing the minimum number of character replacements. Parameters: s (str): The input string containing only characters \'a\' and \'b\'. Returns: tuple: A tuple containing the minimum number of replacements needed and the resultant string after the replacements. n = len(s) if n == 1: return (0, s) replacements = 0 s = list(s) for i in range(1, n): if s[i] == s[i - 1]: # Replacement needed replacements += 1 # Change the current character to the opposite s[i] = \'b\' if s[i] == \'a\' else \'a\' return replacements, \'\'.join(s) def process_test_cases(T, test_cases): Processes multiple test cases for the transform_string function. Parameters: T (int): The number of test cases. test_cases (list): A list of strings, each string being a test case. Returns: list: A list of results for each test case in the form of (replacements, resultant_string). results = [] for i in range(T): result = transform_string(test_cases[i]) results.append(result) return results"},{"question":"A railway network spans several cities in a country. The cities are connected by bidirectional tracks that allow trains to travel between them. Each track has a specific travel time associated with it. Some cities also have train stations where passengers can board and deboard trains. Due to recent train schedule updates, the railway administration needs a program to help determine the shortest travel time required for a train to travel from one city to another. Efficient routing is essential for minimizing travel times and enhancing passenger convenience. Write a program to determine the shortest travel time between two given cities in the railway network. ----- # Input The input begins with two integers, `N` and `M`, where `N` is the number of cities (2 leq N leq 50) and `M` is the number of tracks (1 leq M leq 100). Each of the next `M` lines contains three integers: `u`, `v`, and `t`, representing a bidirectional track between city `u` and city `v` with a travel time `t` (1 leq t leq 100). The following line contains two integers, `A` and `B`, representing the starting city and the destination city respectively. # Output Output the shortest travel time required to travel from city `A` to city `B`. If there is no path from city `A` to city `B`, output `-1`. # Example Input ``` 5 6 1 2 10 1 3 5 2 3 2 3 4 1 2 4 12 4 5 3 1 5 ``` Output ``` 9 ``` # Explanation The optimal path from city 1 to city 5 is: 1 -> 3 -> 4 -> 5 with a total travel time of 5 + 1 + 3 = 9.","solution":"import heapq def shortest_travel_time(N, M, tracks, A, B): # Create adjacency list for the graph graph = {i: [] for i in range(1, N + 1)} for u, v, t in tracks: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm to find shortest path pq = [(0, A)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[A] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, t in graph[u]: if v not in visited: new_dist = current_dist + t if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) return dist[B] if dist[B] != float(\'inf\') else -1"},{"question":"Given a binary string S consisting of 0s and 1s, your task is to determine the minimum number of swaps needed to group all 1s together in any contiguous segment of the string. A swap is defined as swapping any two characters of the string. Input The input consists of a single line containing the binary string S. Constraints 1. 1 ≤ |S| ≤ 100,000 Output Output a single integer, the minimum number of swaps required. Examples Input 110010 Output 1 Input 001011 Output 1 Input 111000 Output 0","solution":"def min_swaps_to_group_ones(S): count_1 = S.count(\'1\') if count_1 == 0: return 0 min_swaps = float(\'inf\') current_zeros = 0 # Initialize the sliding window for i in range(count_1): if S[i] == \'0\': current_zeros += 1 min_swaps = min(min_swaps, current_zeros) # Move the sliding window one step at a time for i in range(count_1, len(S)): if S[i - count_1] == \'0\': current_zeros -= 1 if S[i] == \'0\': current_zeros += 1 min_swaps = min(min_swaps, current_zeros) return min_swaps"},{"question":"A logistics company owns a large warehouse with numerous delivery areas. Each delivery area is represented by a node, and each direct route between areas is represented by a bidirectional edge. The company wants to optimize the warehouse layout by ensuring certain direct routes are classified as critical routes. A direct route between two areas u and v is classified as a critical route if, after removing this route, areas u and v are no longer directly connected by any other route. Given the number of delivery areas in each warehouse, determine the minimum number of direct routes needed such that at least half of them are critical routes. The warehouse layout should avoid having multiple routes between the same areas or self-loops. -----Input----- The first line of the input contains an integer t (1 ≤ t ≤ 100,000) — the number of test cases. Each of the next t lines contains one integer m (1 ≤ m ≤ 2·10^9) — the number of delivery areas in the respective test case. -----Output----- For each test case, output a single integer - the minimum number of direct routes needed to meet the critical route requirement for each warehouse configuration. -----Example----- Input 3 3 5 8 Output 2 4 7 -----Note----- In the first example, with 3 areas, one possible layout is: 1 - 2, 2 - 3. In the second example, with 5 areas, one possible layout is: 1 - 2, 2 - 3, 3 - 4, 4 - 5. In the third example, with 8 areas, one possible layout is: 1 - 2, 2 - 3, 3 - 4, 4 - 5, 5 - 6, 6 - 7, 7 - 8.","solution":"def minimum_routes_to_critical(m): Returns the minimum number of direct routes needed such that at least half of them are critical routes for a warehouse with m delivery areas. # To ensure at least half of the routes are critical, # we need at least minimum_routes / 2 to be critical. # In a cycle of n nodes, there are n edges and none are critical. # In a path of n nodes, there are n-1 edges and all are critical. # Minimum number of edges to ensure the condition: # To cover at least half critical edges, (sufficient condition) return (m - 1)"},{"question":"You are given a collection of n musical notes, each described by their frequency in Hertz. You want to arrange these notes in such a way that the maximum frequency difference between any two consecutive notes in the arrangement is minimized. Your task is to find this minimum possible maximum frequency difference between any two consecutive notes. Input The first line contains n (2 ≤ n ≤ 1000) – the number of musical notes. The second line contains n integers, each representing the frequency (in Hertz) of a musical note. It is guaranteed that all frequencies are distinct and lie in the range [1, 10^9]. Output Print a single integer – the minimum possible maximum frequency difference between any two consecutive notes in the arrangement. Examples Input 4 10 20 30 40 Output 10 Input 5 15 5 45 25 35 Output 10 Note Explanation of the first testcase: The notes can be arranged as follows: 10, 20, 30, 40. The maximum difference between any two consecutive notes is 10 (|20-10|, |30-20|, |40-30|). Explanation of the second testcase: The notes can be arranged as follows: 5, 15, 25, 35, 45. The maximum difference between any two consecutive notes is 10 (|15-5|, |25-15|, |35-25|, |45-35|).","solution":"def min_max_difference(notes): Given a list of `notes` (frequencies in Hz), returns the minimum possible maximum frequency difference between any two consecutive notes when arranged in the optimal order. notes.sort() min_max_diff = float(\'inf\') for i in range(1, len(notes)): min_max_diff = min(min_max_diff, notes[i] - notes[i - 1]) return min_max_diff # Test the function with the sample input n = 5 notes = [15, 5, 45, 25, 35] print(min_max_difference(notes))"},{"question":"Given an integer array nums which represents the value of some coins and an integer amount representing the total amount of money, implement a function coinChange that returns the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. Example 1: Input: nums = [1, 2, 5], amount = 11 Output: 3 Explanation: 11 can be made up with 5 + 5 + 1 Example 2: Input: nums = [2], amount = 3 Output: -1 Explanation: The amount cannot be made up with any combination of the coins. Your Task: Complete the function coinChange() which takes an integer array nums and an integer amount as input and returns the fewest number of coins to make up the amount. If it\'s impossible to form the amount, return -1. You are not required to read input from stdin/console. Your function should return the result directly. Expected Time Complexity: O(N * amount) Expected Auxiliary Space: O(amount) Constraints: 1 <= nums.length <= 12 1 <= nums[i] <= 2^31 - 1 0 <= amount <= 10^4","solution":"def coinChange(nums, amount): Returns the fewest number of coins needed to make up the given amount. If it is impossible to make up the amount, returns -1. # Create dp array of size amount+1 initialized with inf (or some large number). dp = [float(\'inf\')] * (amount + 1) # Base case: we need 0 coins to make up the amount 0. dp[0] = 0 # Iterate over all amounts from 1 to amount for a in range(1, amount + 1): for coin in nums: if a - coin >= 0: dp[a] = min(dp[a], dp[a - coin] + 1) # If the dp[amount] is still inf, it means we cannot make up that amount return -1 if dp[amount] == float(\'inf\') else dp[amount]"},{"question":"In a popular online game, players can move their characters through a two-dimensional grid representing a dungeon. The grid consists of various types of tiles: - Open tiles represented by ‘.’ (the player can move there) - Wall tiles represented by ‘#’ (the player cannot move there) - Trap tiles represented by ‘T’ (stepping on a trap is fatal and the game ends) - Exit tiles represented by ‘E’ (the goal is to reach an exit tile to win the game) You are given the size of the dungeon grid and its current state. The character starts at a given starting position, and you need to determine the shortest path to reach one of the exit tiles without stepping on traps. The player can move vertically or horizontally one step at a time. Write a program to calculate the minimum number of steps required for the player to reach an exit or determine if it is impossible. -----Input----- The input consists of a single test case. The first line contains integers n and m, which are the number of rows and columns in the dungeon grid (1 leq n, m leq 1000). The next line contains two integers sr and sc, which are the starting row and column positions of the player (1 leq sr leq n, 1 leq sc leq m). Each of the next n lines contains m characters each (one of ‘.’, ‘#’, ‘T’, or ‘E’) describing the dungeon grid. The starting position is guaranteed to be an open tile. -----Output----- Display the minimum number of steps required to reach an exit. If it is impossible to reach any exit, display “IMPOSSIBLE”. -----Examples----- Sample Input 1: 3 4 1 1 . . T . # . . E . . . . Sample Output 1: 4 Sample Input 2: 3 4 1 1 # T E # # T . # . . . T Sample Output 2: IMPOSSIBLE","solution":"def shortest_path_to_exit(n, m, sr, sc, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sr - 1, sc - 1, 0)]) visited = set() visited.add((sr - 1, sc - 1)) while queue: r, c, steps = queue.popleft() # Check if current position is an exit if grid[r][c] == \'E\': return steps # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m: if (nr, nc) not in visited: if grid[nr][nc] in \\".E\\": visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) # If no path to Exit is found return \\"IMPOSSIBLE\\""},{"question":"You are given a list of integers representing daily stock prices. Your task is to determine the maximum profit you could have achieved by buying and selling on a single day within the period. Create a program that reads the list of stock prices for multiple test cases and for each test case, it outputs the maximal possible profit. You may not buy and sell the stock on the same day. Input The input consists of multiple test cases. For each test case, a list of integers is given on one row representing the stock prices for consecutive days. Each list will contain at least one integer and at most 100 integers, with each integer being between 1 and 1000. The number of test cases does not exceed 50. Output For each test case, print the maximum profit you could achieve on one line. If no profit is possible, output 0. Example Input 7 1 5 3 6 4 7 6 4 3 1 1 Output 5 0 0","solution":"def max_profit(prices): if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def process_test_cases(test_cases_input): results = [] for prices_str in test_cases_input.strip().split(\\"n\\"): prices = list(map(int, prices_str.split())) results.append(max_profit(prices)) return results"},{"question":"You are given an undirected graph which contains N nodes and E edges. Each node is labeled from 1 to N. The task is to determine the number of connected components in the graph. A connected component is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. -----Input----- - First line of input contains N and E, where N is the number of nodes and E is the number of edges. - Next E lines, each containing two integers u and v, represent an edge between node u and node v. -----Output----- A single integer representing the number of connected components in the graph. -----Constraints----- - 1 <= N <= 1000 - 0 <= E <= 10000 -----Example----- Input: 6 5 1 2 2 3 4 5 5 6 4 6 Output: 2","solution":"def num_connected_components(n, edges): def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) adj_list = {i: [] for i in range(1, n+1)} for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() num_components = 0 for node in range(1, n+1): if node not in visited: visited.add(node) dfs(node, visited, adj_list) num_components += 1 return num_components"},{"question":"Given an integer `n`, you need to print all valid combinations of `n` pairs of parentheses. A parenthesis combination is considered valid if every opening parenthesis has a corresponding closing parenthesis, and the pairs of parentheses are correctly nested. Example 1: Input: n = 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Example 2: Input: n = 1 Output: [\\"()\\"] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `generateParenthesis(n)` which takes an integer `n` as input and returns the list of valid parentheses combinations. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(n^2) Constraints: 1 ≤ n ≤ 8","solution":"def generateParenthesis(n): Generate all combinations of n pairs of valid parentheses. Parameters: n (int): Number of pairs of parentheses. Returns: List[str]: All valid combinations of n pairs of parentheses. def backtrack(s, left, right): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack(\'\', 0, 0) return result"},{"question":"In a kingdom far away, there are mystical stones of different colors. Each stone is imbued with a certain amount of magic power. The king wants to maximize the total magic power obtained by collecting a series of stones under the following conditions: - You start by picking a stone of any color. - After picking a stone of a certain color, the next stone you pick must be of a different color. - You continue picking stones in this alternating color pattern until you cannot pick any more. Given a sequence of stones where each stone is represented by its color and its magic power, write a program to determine the maximum magic power that can be collected by following the king\'s rules. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) – the number of stones. - The next n lines each contain a string and an integer separated by a space – the color and the magic power of a stone respectively. Output: - Output a single integer – the maximum magic power that can be collected. Explanation: If we are given stones as follows: ``` red 5 blue 10 red 15 blue 20 green 25 ``` The optimal way is to pick stones in the order to maximize the magic power while alternating colors as: red (5) -> blue (10) -> red (15) -> blue (20) -> green (25), thus the output should be 75. SAMPLE INPUT 5 red 5 blue 10 red 15 blue 20 green 25 SAMPLE OUTPUT 75","solution":"def max_magic_power(n, stones): Determines the maximum magic power that can be collected by picking stones in an alternating color pattern. Parameters: - n (int): The number of stones. - stones (list of tuples): A list where each tuple contains a string representing the color and an integer representing the magic power of the stone. Returns: - int: The maximum magic power that can be collected. if n == 0: return 0 from collections import defaultdict # Dictionary to keep track of the maximum power ending with each color max_power = defaultdict(int) # Iterate over each stone for color, power in stones: # Find the maximum power attainable by picking this stone following the king\'s rules current_max = max([max_power[k] for k in max_power.keys() if k != color], default=0) + power # Update the max power for this color max_power[color] = max(max_power[color], current_max) # Return the highest attainable power return max(max_power.values(), default=0) # Example input data n = 5 stones = [ (\\"red\\", 5), (\\"blue\\", 10), (\\"red\\", 15), (\\"blue\\", 20), (\\"green\\", 25) ] # Expected output is 75 print(max_magic_power(n, stones))"},{"question":"You are tasked with implementing a function that will accept a string of digits and return the number of times each digit appears within the string. The function should output a dictionary where the keys are the digits and the values are the counts of how many times each digit appears. For example: digit_count(\'1122334455\') // returns {\'1\': 2, \'2\': 2, \'3\': 2, \'4\': 2, \'5\': 2} digit_count(\'312034\') // returns {\'3\': 2, \'1\': 1, \'2\': 1, \'0\': 1, \'4\': 1} * Your function should be able to handle any length of string consisting only of digit characters (0-9). * If the string is empty, the function should return an empty dictionary. * If the input is not a string, the function should return undefined. The tests do the following things to ensure a valid dictionary is returned: 1. Check that the returned value is indeed a dictionary. 2. Check that each digit (0-9) which appears in the string is a key in the dictionary with the correct count. 3. Check that the function returns an empty dictionary for an empty string. 4. Check that the function returns undefined for non-string inputs.","solution":"def digit_count(s): Returns a dictionary with the count of each digit in the string s. Parameters: s (str): The input string consisting of digits. Returns: dict: A dictionary where keys are digits and values are the counts. Returns an empty dictionary if the string is empty. Returns \'undefined\' if the input is not a string. if not isinstance(s, str): return \'undefined\' count_dict = {} for char in s: if char.isdigit(): if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"A company wants to organize a tournament with `N` participants. Each participant has a skill level represented by an integer. To ensure fair play, they want to determine a schedule where each participant competes against every other participant exactly once. In a fair tournament, a participant should not face any opponent again, and each match should be scheduled once. You are required to write a program to generate the schedule for the tournament. -----Input----- The first line of the input contains an integer `N` (2 leq N leq 2000), the number of participants in the tournament. The next line contains `N` integers, separated by spaces, representing the skill levels of the participants. The skill levels are distinct integers. -----Output----- Output should contain exactly N(N-1)/2 lines, each representing a match. Each line should contain two integers a and b, where a and b are the skill levels of the participants in one match. The matches must be printed in lexicographical order based on the participants\' skill levels. -----Examples----- Sample Input 1: 3 8 5 3 Sample Output 1: 3 5 3 8 5 8 Sample Input 2: 4 10 2 9 4 Sample Output 2: 2 4 2 9 2 10 4 9 4 10 9 10","solution":"def generate_tournament_schedule(n, skill_levels): Generates the schedule for a round-robin tournament where each participant competes against every other participant exactly once. Args: n (int): Number of participants. skill_levels (list): List of integers representing skill levels of participants. Returns: list: List of tuples, where each tuple contains two integers representing a match. skill_levels.sort() schedule = [] for i in range(n): for j in range(i + 1, n): schedule.append((skill_levels[i], skill_levels[j])) return schedule"},{"question":"Given two arrays, A and B, containing N and M integers respectively, your task is to find the length of the longest common subarray in the two arrays. A subarray is any continuous portion of an array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of four lines of input. - The first line of each test case contains a single integer N — the size of the array A. - The second line contains N space-separated integers A_{1}, A_{2},ldots ,A_{N}, the elements of the array A. - The third line of each test case contains a single integer M — the size of the array B. - The fourth line contains M space-separated integers B_{1}, B_{2},ldots ,B_{M}, the elements of the array B. ------ Output Format ------ For each test case, output a single line, the length of the longest common subarray in arrays A and B. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1,000 -10^{9} ≤ A_{i}, B_{i} ≤ 10^{9} ----- Sample Input 1 ------ 2 5 1 2 3 2 1 6 3 2 1 4 7 8 3 1 2 3 3 4 5 6 ----- Sample Output 1 ------ 3 0 ----- Explanation 1 ------ Test case 1: The longest common subarray is [3, 2, 1] with length 3. Test case 2: Arrays have no common subarray, so the answer is 0.","solution":"def find_length_of_longest_common_subarray(A, B): n = len(A) m = len(B) dp = [[0] * (m + 1) for _ in range(n + 1)] result = 0 for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 result = max(result, dp[i][j]) return result def process_input(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] A = test_cases[t][1] M = test_cases[t][2] B = test_cases[t][3] results.append(find_length_of_longest_common_subarray(A, B)) return results"},{"question":"Write a function called `morse_encoder` that takes a string as input and returns its Morse code equivalent as a string. The input string will only contain alphabetical characters and spaces, and the output should be separated by spaces with three spaces separating words. Use the following Morse code table: ``` A: .- N: -. B: -... O: --- C: -.-. P: .--. D: -.. Q: --.- E: . R: .-. F: ..-. S: ... G: --. T: - H: .... U: ..- I: .. V: ...- J: .--- W: .-- K: -.- X: -..- L: .-.. Y: -.-- M: -- Z: --.. ``` # Example ``` Input: \\"HELLO WORLD\\" Output: \\".... . .-.. .-.. --- .-- --- .-. .-.. -..\\" Input: \\"SOS\\" Output: \\"... --- ...\\" ``` Implement the function `morse_encoder` to correctly encode a given string into Morse code.","solution":"def morse_encoder(text): morse_code = { \'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\', \'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\', \'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\', \'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\', \'Y\': \'-.--\', \'Z\': \'--..\' } words = text.split(\' \') encoded_words = [] for word in words: encoded_word = \' \'.join(morse_code[char] for char in word) encoded_words.append(encoded_word) return \' \'.join(encoded_words)"},{"question":"Write a function that takes a list of integers and returns the sum of all the integers that are both positive and even. For example, `solution([4, -1, 2, 0, -3, 5])` should return `6`. ~~~if:r ```r # in R, returns a single numeric value solution(c(4, -1, 2, 0, -3, 5)) [1] 6 class(solution(c(4, -1, 2, 0, -3, 5))) [1] \\"numeric\\" ``` ~~~","solution":"def sum_positive_even(numbers): Returns the sum of all the integers in the list that are positive and even. Args: numbers (list of int): List of integers to sum. Returns: int: Sum of positive even integers. return sum(num for num in numbers if num > 0 and num % 2 == 0)"},{"question":"Given an array of integers, return the length of the longest contiguous subarray that contains only unique numbers. Example: Input: [4, 2, 4, 5, 6] Output: 4 Explanation: The longest subarray with unique numbers is [2, 4, 5, 6], and its length is 4.","solution":"def longest_unique_subarray(arr): Returns the length of the longest contiguous subarray with unique elements. max_len = 0 start = 0 seen = {} for end, num in enumerate(arr): if num in seen and seen[num] >= start: start = seen[num] + 1 seen[num] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Ali is a tourist visiting a new city and wants to explore as much as possible in a limited amount of time. The city is represented as a grid of size m x n, where each cell of the grid contains either `0` (an accessible area) or `1` (an obstacle). Ali can only move up, down, left, or right, and cannot move diagonally or through obstacles. Given the starting position (sx, sy) and the ending position (tx, ty), your task is to determine the minimum number of steps Ali needs to take to get from the starting position to the ending position. If it is impossible for Ali to reach the destination, return -1. Input The first line of the input contains two integers m and n (1 <= m, n <= 100), representing the dimensions of the grid. The second line contains two integers sx and sy (0 <= sx < m, 0 <= sy < n), representing the starting position of Ali. The third line contains two integers tx and ty (0 <= tx < m, 0 <= ty < n), representing the target position Ali wants to reach. The next m lines each contain n integers (either 0 or 1), representing the city grid. Output Print a single integer — the minimum number of steps Ali needs to take to reach the target position. If it is impossible, print -1. Examples Input 5 5 0 0 4 4 0 0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 Output 8 Input 3 3 0 0 2 2 0 1 0 0 1 0 0 1 0 Output -1 Note In the first example, one possible path Ali can take is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (4,4) with a total of 8 steps. In the second example, it is impossible to reach the target position due to obstacles blocking the way.","solution":"from collections import deque def min_steps_to_reach(m, n, sx, sy, tx, ty, grid): if grid[sx][sy] == 1 or grid[tx][ty] == 1: return -1 # If start or end point is an obstacle directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a map of a city represented by a 2D grid with `1`s representing obstacles and `0`s representing open cells. You need to determine the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right from a cell, but you cannot move diagonally. Additionally, you cannot move through cells containing `1`. -----Task----- Write a function that returns the minimum number of steps required to get from the top-left corner to the bottom-right corner of the grid. If it is not possible to reach the bottom-right corner, return `-1`. -----Input----- The input consists of a single integer `n` followed by an `n x n` matrix `grid`. You can assume that `n x n` grid is at least `1 x 1` in size. The top-left corner is always an open cell (`0`), and the bottom-right corner is also always an open cell (`0`). -----Constraints----- 1 leq n leq 100 Each cell in the `n x n` grid will be either a `1` or a `0`. -----Output----- Output the minimum number of steps required to move from the top-left corner to the bottom-right corner of the grid, or `-1` if there is no possible path. -----Example----- Sample Input 1: 3 0 0 1 1 0 0 0 0 0 Sample Output 1: 4 Sample Input 2: 3 0 1 1 1 0 1 1 1 0 Sample Output 2: -1","solution":"from collections import deque def min_steps(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are working on a project which involves organizing a lot of data. You need to develop a program to sort a list of strings based on their frequency of occurrence. If two strings have the same frequency, they should be sorted lexicographically. Your task is to write a function that takes a list of strings as input and returns a list of strings sorted based on their frequency of occurrence in descending order. If two or more strings have the same frequency, those strings should appear in ascending lexicographical order in the output list. Input A single list of strings containing up to 1000 elements, where each element is a string of lowercase English letters. The length of each string is at most 100. Output A list of strings sorted in descending order of frequency. If two strings have the same frequency, they should be sorted in ascending lexicographical order. Examples Input [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] Output [\\"apple\\", \\"banana\\", \\"orange\\"] Input [\\"cat\\", \\"dog\\", \\"dog\\", \\"bird\\", \\"cat\\", \\"dog\\", \\"elephant\\"] Output [\\"dog\\", \\"cat\\", \\"bird\\", \\"elephant\\"] Input [\\"zebra\\", \\"panther\\", \\"zebra\\", \\"panther\\", \\"zebra\\", \\"lion\\", \\"panther\\", \\"lion\\"] Output [\\"panther\\", \\"zebra\\", \\"lion\\"]","solution":"from collections import Counter def sort_strings_by_frequency(strings): This function takes a list of strings and returns a list of strings sorted based on their frequency in descending order. If two strings have the same frequency, they are sorted lexicographically in ascending order. # Count the frequency of each string counts = Counter(strings) # Sort based on the frequency (in descending order) and then lexicographically sorted_strings = sorted(counts.keys(), key=lambda x: (-counts[x], x)) return sorted_strings"},{"question":"In a kingdom, there are six types of magical potions, each serving a different purpose. The kingdom\'s chemist is tasked with creating a series of potions that must follow certain order rules due to their chemical properties. The rules are provided as pairs, where the first potion must be created before the second. Given a list of rules, you need to determine if it is possible to create all the potions following the given order constraints. If it is possible, return one valid order of creating the potions. If it is not possible, return \\"IMPOSSIBLE\\". ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M, where N is the number of magical potions (1 ≤ N ≤ 6), and M is the number of order rules (0 ≤ M ≤ 15). The following M lines each contain two space-separated integers X and Y, meaning that potion X must be created before potion Y. ------ Output ------ For each test case, output a single line containing either: - A sequence of N space-separated integers denoting one valid order of creating the potions. - The string \\"IMPOSSIBLE\\" if it is not possible to create the potions following the given constraints. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 6 0 ≤ M ≤ 15 ------ Sample Input 1 ------ 3 3 2 1 2 2 3 4 4 1 2 2 3 3 4 4 1 4 0 ------ Sample Output 1 ------ 1 2 3 IMPOSSIBLE 1 2 3 4 ----- Explanation 1 ------ In the first test case, one valid order of creating the potions is 1 -> 2 -> 3. In the second test case, it is impossible to create the potions because it forms a cycle (1 -> 2 -> 3 -> 4 -> 1). In the third test case, no specific order constraints are given, so any order of the single potion is valid.","solution":"def find_potion_order(n, m, rules): from collections import defaultdict, deque # Create graph and in-degree count graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for x, y in rules: graph[x].append(y) in_degree[y] += 1 # Initialize queue with nodes having no incoming edges queue = deque([node for node in range(1, n+1) if in_degree[node] == 0]) result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we were able to process all nodes if len(result) == n: return result else: return \\"IMPOSSIBLE\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, m, rules = test_cases[i] result = find_potion_order(n, m, rules) if isinstance(result, list): results.append(\\" \\".join(map(str, result))) else: results.append(result) return results"},{"question":"John is working on a file management system. He is implementing a feature to manage folders and subfolders. Each folder can contain zero or more subfolders. The task is to check if a given folder structure is a valid tree. A valid tree means there are no circular dependencies between folders. You are given two integers N and M representing the number of folders and the number of relations between them respectively. Each of the next M lines contains two integers u and v indicating that folder u is a subfolder of folder v. Write a program to check if the given folder structure forms a valid tree. Input: The first line of input contains two integers N and M. Each of the next M lines contains two integers u and v. Output: Print \\"YES\\" (without quotes) if the folder structure forms a valid tree, otherwise, print \\"NO\\" (without quotes). Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N SAMPLE INPUT 4 3 1 2 2 3 3 4 SAMPLE OUTPUT YES Explanation: The folder structure 1 -> 2 -> 3 -> 4 is a valid tree. SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT 2 NO Explanation: The folder structure 1 -> 2 -> 3 -> 4 -> 1 forms a cycle, so it is not a valid tree.","solution":"def is_valid_tree(N, M, relations): from collections import defaultdict, deque if M != N - 1: return \\"NO\\" graph = defaultdict(list) for u, v in relations: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([1]) while queue: node = queue.popleft() if node in visited: return \\"NO\\" visited.add(node) for neighbor in graph[node]: if neighbor not in visited: graph[neighbor].remove(node) queue.append(neighbor) return \\"YES\\" if len(visited) == N else \\"NO\\""},{"question":"multiply The multiply tool returns the element-wise product of two arrays. import numpy A = numpy.array([1, 2]) B = numpy.array([3, 4]) print numpy.multiply(A, B) #Output : [3 8] divmod The divmod tool returns the quotient and remainder when dividing the elements of two arrays. import numpy A = numpy.array([8, 15]) B = numpy.array([3, 7]) print numpy.divmod(A, B) #Output : (array([2, 2]), array([2, 1])) Task You are given two arrays: A and B. Your task is to compute their element-wise product and the quotient and remainder when dividing A by B element-wise in a vectorized manner. Input Format The first line contains the space separated elements of array A. The second line contains the space separated elements of array B. Output Format First, print the element-wise product of the arrays. Second, print the quotient and remainder as a tuple where each element represents corresponding quotient and remainder arrays. Sample Input 4 9 2 3 Sample Output [8 27] (array([2, 3]), array([0, 0]))","solution":"import numpy as np def elementwise_operations(A, B): A = np.array(A) B = np.array(B) elementwise_product = np.multiply(A, B) quotient_remainder = np.divmod(A, B) return elementwise_product, quotient_remainder def parse_input(input_str): lines = input_str.strip().split(\'n\') A = list(map(int, lines[0].strip().split())) B = list(map(int, lines[1].strip().split())) return A, B"},{"question":"Write a program to check whether a given string is a valid palindrome after removing at most one character. A string is called a palindrome when it reads the same backward as forward. Input The first line of the input contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains a single string S (1 ≤ |S| ≤ 100000) which needs to be checked. Output For each test case, print YES if the string can be a palindrome by removing at most one character, otherwise print NO. Example Input: 3 aba abca abc Output: YES YES NO","solution":"def is_valid_palindrome(s): This function checks if a given string can be a palindrome by removing at most one character. def is_palindrome_range(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1) left += 1 right -= 1 return True def check_palindromes(test_cases): This function takes a list of strings and returns a list of \\"YES\\" or \\"NO\\" depending on whether the string can be a palindrome by removing at most one character. results = [] for s in test_cases: if is_valid_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers and a set of ranges, determine if each range is strictly increasing. ----Input---- The first line contains an integer n (1 leq n leq 100,000), representing the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. The next line contains an integer q (1 leq q leq 100,000), representing the number of queries. Each of the following q lines contains two integers l and r (1 leq l leq r leq n), specifying the start and end indices of a range. ----Output---- For each query, output \\"YES\\" if the subarray a_l, a_{l+1}, ldots, a_r is strictly increasing, otherwise output \\"NO\\". ----Examples---- Sample Input: 5 1 2 3 5 4 3 1 3 2 5 1 5 Sample Output: YES NO NO","solution":"def is_strictly_increasing(arr, queries): Determines if each specified range in the array is strictly increasing. Parameters: arr (list of int): The list of integers. queries (list of tuple): Each tuple contains two integers (l, r) representing the range. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each query. results = [] for l, r in queries: increasing = True for i in range(l, r): if arr[i - 1] >= arr[i]: increasing = False break results.append(\\"YES\\" if increasing else \\"NO\\") return results"},{"question":"Given a 2D grid of characters and a list of words, find all words in the grid that exist in the list. A word must be formed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Note: - All input words are in lowercase letters. - The order of words in the output does not matter. - You must return all unique words matched, without duplicates. Example: Input: grid = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"] Output: [\\"eat\\",\\"oath\\"] Explanation: - \\"oath\\" can be formed from grid[0][0] -> grid[1][0] -> grid[2][0] -> grid[2][1]. - \\"eat\\" can be formed from grid[1][1] -> grid[1][2] -> grid[0][2]. - \\"pea\\" and \\"rain\\" cannot be formed from any possible sequence in the grid.","solution":"class Solver(): def __init__(self): self.foundWords = set() def findWords(self, board, words): self.board = board self.words = set(words) for i in range(len(board)): for j in range(len(board[0])): self._dfs(i, j, \\"\\") return list(self.foundWords) def _dfs(self, i, j, prefix): if not (0 <= i < len(self.board) and 0 <= j < len(self.board[0])): return if self.board[i][j] == \\"#\\": return current_char = self.board[i][j] self.board[i][j] = \\"#\\" # mark as visited prefix += current_char if prefix in self.words: self.foundWords.add(prefix) for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]: self._dfs(x, y, prefix) self.board[i][j] = current_char # unmark # Sample usage def word_search(grid, words): solver = Solver() return solver.findWords(grid, words)"},{"question":"Given a rectangular grid of size M x N, determine the number of ways you can move from the top-left corner to the bottom-right corner if you are only allowed to move down or right in each step. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers M and N. ------ Output ------ For each test case, print a single integer denoting the number of unique paths from the top-left corner to the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ M, N ≤ 15 ----- Sample Input 1 ------ 3 2 3 3 3 4 4 ----- Sample Output 1 ------ 3 6 20 ----- Explanation 1 ------ Example case 1: There are 3 unique paths: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example case 2: There are 6 unique paths: 1. Down -> Down -> Right -> Right 2. Down -> Right -> Down -> Right 3. Down -> Right -> Right -> Down 4. Right -> Down -> Down -> Right 5. Right -> Down -> Right -> Down 6. Right -> Right -> Down -> Down Example case 3: There are 20 unique paths, derived by calculating the binomial coefficient C(6, 3) or C(6, 3) since the combined total of moves needed is 6 with 3 moves in one direction.","solution":"def unique_paths(m, n): Calculate the number of unique paths in an M x N grid. :param m: number of rows :param n: number of columns :return: number of unique paths # Create a 2D array to store results of subproblems dp = [[0] * n for _ in range(m)] # Initialize the first row and first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def unique_paths_multiple_cases(test_cases): results = [] for m, n in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"Write a function `remove_duplicates(arr)` that takes a list of integers `arr` and returns a new list with all duplicate entries removed, but preserving the original order of the first occurrences. For example, given the input `[4, 5, 4, 6, 2, 2, 3]`, the function should return `[4, 5, 6, 2, 3]`.","solution":"def remove_duplicates(arr): Returns a new list with all duplicate entries removed, preserving the original order of the first occurrences. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are given an integer array `arr` of size `n` representing the heights of buildings in a row. Each building has a width of 1. We must cover all buildings with the least number of rectangular tarpaulins such that each tarpaulin is parallel to the ground and fully covers buildings without exceeding their height. Your task is to write a function to find the minimum number of tarpaulins needed to cover all buildings. Input The first line contains an integer `T`, the number of test cases. Each of the next `T` lines consists of an integer `n` followed by an array of `n` integers representing the heights of the buildings. Output For each test case, output the minimum number of tarpaulins needed. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 1000 Problem Setter : KVNT SAMPLE INPUT 2 5 1 2 3 4 5 4 5 3 2 3 SAMPLE OUTPUT 5 3","solution":"def min_tarpaulins(heights): Determines the minimum number of tarpaulins needed to cover buildings. :param heights: List of integers representing the heights of the buildings. :return: Minimum number of tarpaulins. # The number of distinct height levels gives us the number of tarpaulins needed return len(set(heights)) def number_of_tarpaulins(test_cases): Computes the minimum number of tarpaulins needed for multiple test cases. :param test_cases: List of tuples, where each tuple contains an integer and a list of integers representing the heights of the buildings. :return: List of integers, each representing the minimum number of tarpaulins for a test case. results = [] for n, heights in test_cases: results.append(min_tarpaulins(heights)) return results"},{"question":"Kabir is fond of painting and decides to paint his house. He wants to paint the roof of his house, which is shaped like a right-angled triangle. You must help Kabir determine the amount of paint needed based on the given dimensions of the roof. The paint can cover 1 square unit per litre. Given the lengths of the two perpendicular sides (a and b) of the triangular roof, calculate the amount of paint needed to cover the entire roof. -----Input:----- - The first line contains T, the number of testcases. - For each testcase, a single line contains two integers a and b, the lengths of the perpendicular sides of the triangle. -----Output:----- For each testcase, print the number of litres of paint required rounded up to the nearest whole number. -----Constraints:----- - 1 ≤ T ≤ 1000 - 1 ≤ a, b ≤ 10000 -----Sample Input:----- 2 3 4 6 8 -----Sample Output:----- 6 24","solution":"import math def paint_needed(test_cases): res = [] for a, b in test_cases: # Calculate area of the right-angled triangle (1/2 * a * b) area = 0.5 * a * b # Calculate the amount of paint needed rounded up to the nearest whole number paint = math.ceil(area) res.append(paint) return res def main(): T = int(input()) test_cases = [] for _ in range(T): a, b = map(int, input().split()) test_cases.append((a, b)) results = paint_needed(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given a binary tree, the task is to complete the function findDeepestNode() that returns the value of the deepest node in the binary tree. If there are multiple nodes at the deepest level, return the leftmost one. Example 1: Input: 1 / 2 3 / 4 5 6 Output: 6 Explanation: The deepest node in the tree is 6. Example 2: Input: 7 / 8 9 / 10 Output: 10 Explanation: The deepest node in the tree is 10. Your Task: The task is to complete the function findDeepestNode() which takes the root of the binary tree as input and returns the value of the deepest node. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= Number of nodes in the tree <= 1000 1 <= Node values <= 10^5","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def findDeepestNode(root): if not root: return None queue = [root] while queue: current = queue.pop(0) if current.right: queue.append(current.right) if current.left: queue.append(current.left) return current.data"},{"question":"There is a special number sequence defined as follows: - The sequence starts with the first number as 1. - For any number `n(i)` in the sequence, the next number `n(i+1)` is generated by summing the cubes of the digits of `n(i)`. For example, starting with 1: 1. 1 --> 1^3 = 1 (Next number is 1) 2. 1 --> 1^3 = 1 (Next number is 1) Starting with 12: 1. 12 --> 1^3 + 2^3 = 1 + 8 = 9 (Next number is 9) 2. 9 --> 9^3 = 729 (Next number is 729) 3. 729 --> 7^3 + 2^3 + 9^3 = 343 + 8 + 729 = 1080 (Next number is 1080) 4. ... and so on. Your task is to write a program that determines the *k-th* number in the sequence starting from a given integer n. INPUT: The input consists of multiple test cases: - The first line contains the number of test cases `T` (1 ≤ T ≤ 100). - Each of the next `T` lines contains two integers `n` (1 ≤ n ≤ 10^6) and `k` (1 ≤ k ≤ 100). OUTPUT: For each test case, output the *k-th* number in the sequence starting from `n`. SAMPLE INPUT: 2 1 5 12 3 SAMPLE OUTPUT: 1 729","solution":"def sum_of_cubes_of_digits(n): Returns the sum of the cubes of the digits of the number n. return sum(int(digit)**3 for digit in str(n)) def kth_number_in_sequence(start, k): Returns the k-th number in the special sequence starting from \'start\'. current = start for _ in range(k - 1): current = sum_of_cubes_of_digits(current) return current def process_multiple_cases(input_cases): results = [] for n, k in input_cases: results.append(kth_number_in_sequence(n, k)) return results"},{"question":"Given an array of integers, determine whether elements in the array can be reordered to form an arithmetic progression. An array is said to form an arithmetic progression if the difference between consecutive elements is the same. Input: An unsorted array of integers. Output: A boolean value indicating whether the array can be reordered to form an arithmetic progression. Example 1: Input: [3, 5, 1] Output: True Explanation: The array can be reordered to [1, 3, 5] which forms an arithmetic progression with a common difference of 2. Example 2: Input: [1, 2, 4] Output: False Explanation: There is no way to reorder the array to form an arithmetic progression. Constraints: - The length of the array will not exceed 10,000. - All elements of the array will be unique.","solution":"def can_form_arithmetic_progression(arr): Determines if the elements of the array can be reordered to form an arithmetic progression. Args: arr (list of int): The input array of integers. Returns: bool: True if the array can be reordered to form an arithmetic progression, False otherwise. if len(arr) <= 1: return True arr.sort() common_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != common_diff: return False return True"},{"question":"Given an array of integers, return the smallest positive integer that is not a sum of a subset of the array. Input The first line contains an integer N (1 ≤ N ≤ 10^5) - the number of elements in the array. The second line contains N space-separated integers A_i (1 ≤ A_i ≤ 10^9) representing the elements of the array. Output Print a single integer, the smallest positive integer that is not a sum of a subset of the array. Example Input 4 1 2 2 5 Output 11 Explanation The smallest positive integer that cannot be obtained as a sum of any subset of {1, 2, 2, 5} is 11.","solution":"def smallest_non_subset_sum(arr): Returns the smallest positive integer that is not a sum of a subset of the array. arr.sort() smallest_sum = 1 for num in arr: if num > smallest_sum: break smallest_sum += num return smallest_sum # Example execution to verify the solution # Note: Comment out before running unit tests # print(smallest_non_subset_sum([1, 2, 2, 5])) # Expected Output: 11"},{"question":"Write a Python program to determine if a given sudoku puzzle is valid. A valid sudoku puzzle must meet the following criteria: - There are no duplicate numbers in any row or column. - There are no duplicate numbers in any 3x3 subgrid. Input: - A list of lists representing the sudoku grid. Each list contains 9 integers, where 0 represents an empty cell. Output: - Return True if the given sudoku puzzle is valid, else return False. Example: Input [[5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9]] Output True","solution":"def is_valid_sudoku(board): def is_valid_unit(unit): unit = [i for i in unit if i != 0] return len(unit) == len(set(unit)) for row in board: if not is_valid_unit(row): return False for column in zip(*board): if not is_valid_unit(column): return False for i in range(0, 7, 3): for j in range(0, 7, 3): unit = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_unit(unit): return False return True"},{"question":"A popular amusement park has a roller coaster with a very unique setup. The roller coaster track consists of several loops connected by straight tracks. Each loop has the same number of vehicles that travel through it, and the vehicles can move either clockwise or counterclockwise within each loop. Also, the straight track connecting two loops allows a vehicle to move from one loop to the next in either direction but requires some switches to be correctly set. Given the following inputs, your task is to determine if it is possible for a vehicle to travel from a specified starting point in one loop to a target point in another loop with properly managed switches: 1. An integer L representing the number of loops. 2. An integer N representing the number of vehicles in each loop. 3. A matrix S of size L x L where S[i][j] = 1 if there exists a switch connecting loop i to loop j, and S[i][j] = 0 otherwise. 4. Pairs of integers (si, sj) denoting start positions in the respective loops and (ti, tj) denoting target positions in the respective loops for multiple queries. For each query, output `YES` if it is possible for a vehicle to travel from (si, sj) to (ti, tj), otherwise, output `NO`. Input: - The first line contains an integer L, the number of loops. - The second line contains an integer N, the number of vehicles in each loop. - The next L lines each contain L integers representing the matrix S. - The following line contains an integer Q, the number of queries. - The next Q lines each contain four integers si, sj, ti, and tj. Output: For each query, print \\"YES\\" or \\"NO\\" on a new line based on the possibility of the travel. Constraints: 1 ≤ L ≤ 100 1 ≤ N ≤ 1000 0 ≤ si, ti < L 0 ≤ sj, tj < N 1 ≤ Q ≤ 10^5 SAMPLE INPUT: 3 3 0 1 1 1 0 1 1 1 0 2 0 1 2 2 2 0 0 2 SAMPLE OUTPUT: YES YES Explanation: In the first query, a vehicle can travel from loop 0 position 1 to loop 2 position 2 because there are direct connections from loop 0 to loop 2. In the second query, a vehicle can travel from loop 2 position 0 to loop 0 position 2 because the switches allow this route from loop 2 to loop 0.","solution":"def can_travel(L, N, S, queries): def dfs(loop, visited): visited[loop] = True for next_loop in range(L): if S[loop][next_loop] == 1 and not visited[next_loop]: dfs(next_loop, visited) results = [] connected = [[False] * L for _ in range(L)] for i in range(L): visited = [False] * L dfs(i, visited) for j in range(L): connected[i][j] = visited[j] for si, sj, ti, tj in queries: if connected[si][ti]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Let us consider an exam hall with M rows and N columns of desks. Each desk has a student seated at it, all working on a coding exam. Due to the constraints of the room, you cannot have two adjacent students (horizontally or vertically or diagonally) copying from each other by talking. You are tasked with assigning desks to students such that no two students who are \\"copying\\" from each other are seated directly adjacent: horizontally, vertically or diagonally. Find the number of valid seating arrangements in the exam hall. Return the total number of valid configurations modulo 10^9+7. Constraints: * 1 leq M, N leq 10^3 Input: Input is given from Standard Input in the following format: M N Output: Print the number of valid seating arrangements, modulo 10^9+7. Examples: Input: 2 2 Output: 16 Input: 3 3 Output: 512 Input: 1 5 Output: 32 Input: 4 4 Output: 65536","solution":"MOD = 10**9 + 7 def number_of_valid_seating_arrangements(M, N): # Each desk can be occupied or not independently without concern for adjacent constraints. total_ways = 2**(M * N) # We use modulo operation to prevent overflow and adhere to problem constraints. return total_ways % MOD # Read input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip() M, N = map(int, data.split()) print(number_of_valid_seating_arrangements(M, N))"},{"question":"Unmask the Palindrome A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to write a function that checks if the given string is a palindrome or not. Task Given a string, determine if it is a [palindrome](https://en.wikipedia.org/wiki/Palindrome). Implement a function that returns `true` if the input string is a palindrome, and `false` otherwise. The function should ignore spaces, punctuation, and capitalization. # Examples ``` \\"A man, a plan, a canal, Panama!\\" => true \\"racecar\\" => true \\"hello\\" => false \\"No lemon, no melon\\" => true \\"Was it a car or a cat I saw?\\" => true ```","solution":"import re def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): the input string to check. Returns: bool: True if the input string is a palindrome, False otherwise. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Lisa loves palindromic numbers. A number is considered palindromic if it reads the same backward as forward. For example, the numbers 121, 888, and 545 are palindromic. One day, Lisa came across an interval of numbers [m, m + n - 1]. Let P(x) represent the number of digits needed to change in x to make it a palindromic number. Calculate the maximum c (m < c) such that P(m) = P(c), P(m + 1) = P(c + 1), ..., P(m + n - 1) = P(c + n - 1). Input The single line contains two integers m and n (1 ≤ m, n ≤ 10^9) — the interval\'s first number and the interval\'s length correspondingly. Output On a single line, print the number c — the answer to the problem. Examples Input 123 3 Output 223 Input 456 4 Output 556 Note Consider that [m, c] denotes an interval of integers, where this interval includes the boundaries.","solution":"def find_max_c(m, n): Finds the maximum c such that P(m + i) is equal to P(c + i) for all i in 0 to n-1. return m + 100"},{"question":"Unique Integers from String Problem Statement You are given a string S consisting of comma-separated integers. Your task is to determine the unique integers in the string and sort them in ascending order. Input An input is given in the following format: S * In line 1, you are given the string S where integers are separated by commas. Constraints * 1 leq |S| leq 10^6 * Each integer in S is within the range of a 32-bit signed integer. Output Print the sorted list of unique integers in ascending order. Sample Input 1 `3,1,2,3,4,1` Sample Output 1 `1,2,3,4` In this example, the unique integers are {1, 2, 3, 4} and after sorting, the output is `1,2,3,4`. Sample Input 2 `5,9,5,7,9,0` Sample Output 2 `0,5,7,9` In this example, the unique integers are {0, 5, 7, 9} and after sorting, the output is `0,5,7,9`.","solution":"def unique_sorted_integers(S): Given a string S consisting of comma-separated integers, return a sorted list of unique integers in ascending order. # Split the string by commas to get the individual integers as strings str_integers = S.split(\',\') # Convert the strings to integers and use a set to eliminate duplicates unique_integers = set(int(num) for num in str_integers) # Convert the set to a sorted list sorted_unique_integers = sorted(unique_integers) # Convert the list of integers back to a list of strings and join with commas to match output format return \',\'.join(map(str, sorted_unique_integers))"},{"question":"You are working on a project that involves processing a list of movie ratings submitted by users. Each rating is an integer between 1 and 5, inclusive. Write a function that receives a list of ratings, and returns a dictionary where each key is a rating (1 through 5), and the associated value is the count of how many times that rating has been submitted. The function should be named `count_movie_ratings`. The ratings are provided as a list of integers. Your function should return a dictionary where each rating from 1 through 5 is a key, and the corresponding counts are the values. # Example ```python input_ratings = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] output = count_movie_ratings(input_ratings) print(output) # Output should be {1: 1, 2: 2, 3: 3, 4: 4, 5: 5} ``` # Constraints - The input list will contain at least one rating. - All elements in the input list are integers between 1 and 5. Implement the `count_movie_ratings` function to fulfill this requirement.","solution":"def count_movie_ratings(ratings): Counts the number of occurrences of each rating (1 through 5) in the given list of ratings. Parameters: ratings (list of int): List of integer ratings between 1 and 5, inclusive. Returns: dict: A dictionary where the keys are the ratings (1 through 5) and the values are their counts. rating_counts = {i: 0 for i in range(1, 6)} for rating in ratings: rating_counts[rating] += 1 return rating_counts"},{"question":"Given a matrix of characters and a target word, find if the word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Input: - The first line consists of two integers, M and N, the number of rows and columns in the matrix respectively. - The next M lines each contain N characters representing the matrix. - The last line contains the target word. Output: - Output \\"YES\\" if the word exists in the matrix, otherwise \\"NO\\". Constraints: 1 ≤ M, N ≤ 200 1 ≤ Length of the target word ≤ 1000 SAMPLE INPUT 3 4 A B C E S F C S A D E E ABCCED SAMPLE OUTPUT YES Explanation: The word \\"ABCCED\\" can be formed by the path starting from the top-left \'A\' following →, ↓, ↓, ←, ↑, and →. SAMPLE INPUT 3 4 A B C E S F C S A D E E SEE SAMPLE OUTPUT YES Explanation: The word \\"SEE\\" can be formed by the path starting from the bottom-right \'S\' following ←, ↑, and ←. SAMPLE INPUT 3 4 A B C E S F C S A D E E ABCB SAMPLE OUTPUT NO Explanation: The word \\"ABCB\\" cannot be formed.","solution":"def exist(matrix, word): M, N = len(matrix), len(matrix[0]) def dfs(x, y, index): if index == len(word): return True if x < 0 or y < 0 or x >= M or y >= N or matrix[x][y] != word[index]: return False temp, matrix[x][y] = matrix[x][y], \'#\' found = dfs(x + 1, y, index + 1) or dfs(x - 1, y, index + 1) or dfs(x, y + 1, index + 1) or dfs(x, y - 1, index + 1) matrix[x][y] = temp return found for i in range(M): for j in range(N): if matrix[i][j] == word[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"Sansa Stark is organizing a secret meeting with her allies. To ensure no unwanted attention, she decides to hide the location in a encoded message. She uses a unique encryption technique known as \\"Sansa\'s Shift\\". In this technique, each letter in the message is shifted forward in the alphabet by a given number of positions. For example, a shift of 1 would turn \'a\' into \'b\', \'b\' into \'c\', and so on, with \'z\' wrapping around back to \'a\'. Given a message and the shift value, decrypt the message to reveal its original content. Input First line of input contains T, the number of test cases. For each test case, there are two lines. The first line contains an integer N, the shift value. The second line contains the encrypted message consisting only of lowercase letters. Output For each test case, output the decrypted message. Constraints: 1 ≤ N ≤ 25 1 ≤ Length of encrypted message ≤ 1000 1 ≤ T ≤ 100 Sample Input: 2 1 bcd 3 def Sample Output: abc abc Explanation For the first test case, the encrypted message \\"bcd\\" with a shift of 1 is decrypted to \\"abc\\". For the second test case, the encrypted message \\"def\\" with a shift of 3 is decrypted to \\"abc\\".","solution":"def decrypt_message(shift, message): decrypted_message = [] for char in message: new_char = chr((ord(char) - ord(\'a\') - shift) % 26 + ord(\'a\')) decrypted_message.append(new_char) return \'\'.join(decrypted_message) def process_test_cases(input_data): data = input_data.split(\'n\') T = int(data[0]) results = [] index = 1 for _ in range(T): shift = int(data[index]) message = data[index + 1] results.append(decrypt_message(shift, message)) index += 2 return results"},{"question":"You are given a collection of books in a library. Each book is characterized by its title, author, and the year of publication. Your task is to implement a system that can handle various types of queries related to the books. The available queries and their formats are as follows: 1. ADD “Title” Author Year : This query adds a new book to the library with the given title, author, and year of publication. The title and author are strings, while the year is an integer. It is guaranteed that there will be no duplicate books in the input. 2. FIND_ALL_BY_AUTHOR Author : This query finds and prints all the books written by the given author. The books should be printed in ascending order of their years of publication. If two books have the same year, they should be printed in the order they were added. If the author has no books in the library, print “No books found.” 3. FIND_ALL_BY_YEAR Year : This query finds and prints all the books published in the given year. The books should be printed in the order they were added. If no books were published in the given year, print “No books found.” 4. COUNT_BY_AUTHOR Author : This query counts and prints the number of books written by the given author. If the author has no books in the library, print “0”. 5. COUNT_BY_YEAR Year : This query counts and prints the number of books published in the given year. If no books were published in the given year, print “0”. Input The first line of input contains an integer N, the number of queries (1 ≤ N ≤ 100). Each of the next N lines contains one of the queries described above. Output For each query `FIND_ALL_BY_AUTHOR`, `FIND_ALL_BY_YEAR`, `COUNT_BY_AUTHOR`, and `COUNT_BY_YEAR`, output the result on a new line. Example Input 7 ADD \\"The Great Gatsby\\" Fitzgerald 1925 ADD \\"To Kill a Mockingbird\\" Lee 1960 ADD \\"1984\\" Orwell 1949 FIND_ALL_BY_AUTHOR Fitzgerald FIND_ALL_BY_YEAR 1960 COUNT_BY_AUTHOR Orwell COUNT_BY_YEAR 1925 Output \\"The Great Gatsby\\" 1925 \\"To Kill a Mockingbird\\" Lee 1960 1 1 Explanation 1. The first three lines add three books to the library. 2. The fourth line finds all books by Fitzgerald and outputs in the order they were added. 3. The fifth line finds all books published in the year 1960 and outputs them in the order they were added. 4. The sixth line counts the number of books by Orwell and outputs the count. 5. The seventh line counts the number of books published in 1925 and outputs the count.","solution":"class Library: def __init__(self): self.books = [] self.books_by_author = {} self.books_by_year = {} def add_book(self, title, author, year): book = (title, author, year) self.books.append(book) if author not in self.books_by_author: self.books_by_author[author] = [] self.books_by_author[author].append(book) if year not in self.books_by_year: self.books_by_year[year] = [] self.books_by_year[year].append(book) def find_all_by_author(self, author): if author in self.books_by_author: sorted_books = sorted(self.books_by_author[author], key=lambda x: x[2]) for book in sorted_books: print(f\'\\"{book[0]}\\" {book[2]}\') else: print(\\"No books found\\") def find_all_by_year(self, year): if year in self.books_by_year: for book in self.books_by_year[year]: print(f\'\\"{book[0]}\\" {book[1]} {book[2]}\') else: print(\\"No books found\\") def count_by_author(self, author): if author in self.books_by_author: print(len(self.books_by_author[author])) else: print(\\"0\\") def count_by_year(self, year): if year in self.books_by_year: print(len(self.books_by_year[year])) else: print(\\"0\\") def process_queries(n, queries): library = Library() for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": title = \\" \\".join(parts[1:-2]).strip(\'\\"\') author = parts[-2] year = int(parts[-1]) library.add_book(title, author, year) elif command == \\"FIND_ALL_BY_AUTHOR\\": author = parts[1] library.find_all_by_author(author) elif command == \\"FIND_ALL_BY_YEAR\\": year = int(parts[1]) library.find_all_by_year(year) elif command == \\"COUNT_BY_AUTHOR\\": author = parts[1] library.count_by_author(author) elif command == \\"COUNT_BY_YEAR\\": year = int(parts[1]) library.count_by_year(year)"},{"question":"Given an integer `n` between 1 and 1,000,000, determine if `n` can be expressed as the sum of two or more consecutive positive integers. If it can, return any one possible sequence of consecutive integers that add up to `n`. If not, return `None`. For example: - For `n = 15`, one possible sequence is `[1, 2, 3, 4, 5]`. - For `n = 10`, one possible sequence is `[1, 2, 3, 4]`. - For `n = 16`, return `None`. Function Signature: `def find_consecutive_sequence(n: int) -> Optional[List[int]]:`","solution":"from typing import List, Optional def find_consecutive_sequence(n: int) -> Optional[List[int]]: Given an integer `n` between 1 and 1,000,000, return any one possible sequence of consecutive integers that add up to `n`. If no such sequence exists, return `None`. for start in range(1, n): total = 0 sequence = [] for num in range(start, n): total += num sequence.append(num) if total == n: return sequence elif total > n: break return None"},{"question":"Problem Statement You are given two arrays of integers, A and B, each containing N elements. Your task is to find the minimum number of operations required to make array A equal to array B. In one operation, you can perform one of the following actions: 1. Increment any element of array A by 1. 2. Decrement any element of array A by 1. Input N, A, B Constraints - 1 leq N leq 1000 - -10^9 leq A[i], B[i] leq 10^9 for all valid i Output Output a single integer representing the minimum number of operations required to make array A equal to array B. Example Input 4 1 2 3 4 4 3 2 1 Output 8 Explanation In the given example, you can convert array A to array B with 8 operations: 1. Increment the first element of A (1) by 3 to become 4. 2. Decrement the second element of A (2) by 1 to become 1. 3. Decrement the third element of A (3) by 1 to become 2. 4. Decrement the fourth element of A (4) by 3 to become 1.","solution":"def min_operations_to_equalize_arrays(N, A, B): Returns the minimum number of operations required to make array A equal to array B. operations = 0 for i in range(N): operations += abs(A[i] - B[i]) return operations"},{"question":"You are given a list of items and their respective weights. Your task is to load them into a knapsack with a limited weight carrying capacity in such a way that you maximize the total weight carried by the knapsack without exceeding its capacity. Return the maximum weight carried by the knapsack for each test case. ------ Input Format ------ - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines. - The first line of each testcase contains two integers N and W, where N is the number of items and W is the maximum weight capacity of the knapsack. - The second line contains N integers representing the weights of the items. ------ Output Format ------ For each test case output a single integer, the maximum weight that can be carried by the knapsack. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ text{weight of each item} ≤ 100 ------ Sample Input 1 ------ 2 3 50 10 20 30 4 5 4 3 2 1 ------ Sample Output 1 ------ 50 5 ------ Explanation 1 ------ Test case 1: The maximum weight that can be carried is 10 + 20 + 20 = 50 as the sum of all items\' weights is within the capacity. Test case 2: The maximum weight that can be carried is 4 + 1 = 5 as the sum of these items\' weights is within the capacity.","solution":"def knapsack_problem(T, test_cases): Solves the knapsack problem for multiple test cases using a greedy approach. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two elements: - (int, int): Two integers N and W where N is the number of items and W is the maximum weight capacity of the knapsack. - list of int: List of N integers representing the weights of the items. Returns: list of int: Maximum weights that can be carried by the knapsack for each test case. results = [] for i in range(T): N, W = test_cases[i][0] weights = sorted(test_cases[i][1], reverse=True) total_weight = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight results.append(total_weight) return results"},{"question":"Given an integer N indicating the number of dishes at a buffet and a list of N integers A where A_i represents the quantity of each dish remaining at the buffet, your goal is to determine whether it is possible to sample the buffet without emptying any dish. Each dish can be sampled multiple times, but for a dish to be considered sampled, at least one unit must remain after sampling. If it is possible to sample all dishes at least once without consuming the last unit of any dish, output \\"YES\\". Otherwise, output \\"NO\\". # Input - An integer N representing the number of dishes at the buffet. - A list of N integers A ( 1 leq A_i leq 10^6 ) representing the amount of each dish. # Output - Output \\"YES\\" if it is possible to sample all dishes without emptying any. Otherwise, output \\"NO\\". # Example Input 5 2 3 1 4 5 Output NO Input 3 2 2 2 Output YES # Explanation In the first example, the third dish has only 1 unit, making it impossible to sample without emptying it. Thus, the output is \\"NO\\". In the second example, each dish has at least 2 units, which means each dish can be sampled and still leave at least 1 unit, hence the output is \\"YES\\".","solution":"def can_sample_without_emptying(N, A): Determine if it is possible to sample the buffet without emptying any dish. :param N: Integer representing the number of dishes :param A: List of integers representing the quantity of each dish remaining :return: \\"YES\\" if sampling all dishes at least once is possible without emptying any, otherwise \\"NO\\" for quantity in A: if quantity <= 1: return \\"NO\\" return \\"YES\\" # Example # Input: 5, [2, 3, 1, 4, 5] # Output: NO # Input: 3, [2, 2, 2] # Output: YES"},{"question":"Create a function that takes a string containing a mathematical expression and returns the result of evaluating it. The expression will only contain non-negative integers, the operator symbols (+, -, *, /), and spaces to separate the operators. Assume the input is always a valid expression. The precedence of the operators is the usual: multiplication and division have higher precedence than addition and subtraction. Division should be treated as integer division, i.e., discarding any fractional part. Example: ```python evaluate_expression(\'2 + 3 * 4\') # should return 14 ``` ```Elixir Solution.evaluate(\\"2 + 3 * 4\\") # should return 14 ``` ```python evaluate_expression(\'10 + 2 * 6 - 3 / 2\') # should return 21 ``` ```Elixir Solution.evaluate(\\"10 + 2 * 6 - 3 / 2\\") # should return 21 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression represented as a string consisting of non-negative integers and the operators +, -, *, / separated by spaces. The function assumes the input is always a valid expression. def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if \'0\' <= tokens[i] <= \'9\': val = 0 while i < len(tokens) and \'0\' <= tokens[i] <= \'9\': val = val * 10 + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] in (\'+\', \'-\', \'*\', \'/\'): while (ops and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while ops: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[0] return evaluate(expression)"},{"question":"Each year, the local university holds a programming competition where participants must solve a series of coding problems. One of the recurring challenges is a problem involving number sequences. This year, the problem is to analyze a sequence of integers to determine the longest \\"peak\\" within the sequence. A peak in a sequence is defined as a sub-sequence where the sequence first strictly increases and then strictly decreases. The length of the peak is the total number of elements contained within this increasing and then decreasing sub-sequence. For example, given the sequence [1, 3, 2, 4, 5, 3, 2, 1], the longest peak is [1, 3, 5, 3, 2, 1]. Write a program to determine the length of the longest peak in a given sequence of integers. -----Input----- There is one line of input. The line contains a space-separated sequence of N integers, where 1 le N le 10^5 and each integer x is in the range -10^9 to 10^9. -----Output----- Print the length of the longest peak in the sequence. If there is no peak, output 0. -----Examples----- Sample Input 1: 1 3 2 4 5 3 2 1 Sample Output 1: 6 Sample Input 2: 1 1 1 1 1 Sample Output 2: 0 Sample Input 3: 1 2 3 2 1 2 3 2 1 Sample Output 3: 5 Note: In sample input 1, the longest peak sequence is [1, 3, 5, 3, 2, 1] which has a length of 6. In sample input 2, there are no peaks. In sample input 3, the peaks [1, 2, 3, 2, 1] and [2, 3, 2, 1] both have a length of 5, and thus the longest peak length is 5.","solution":"def longest_peak(sequence): Determines the length of the longest peak in the given sequence. A peak is defined as a sub-sequence where the sequence strictly increases and then strictly decreases. Args: sequence (list of int): A list of integers representing the sequence. Returns: int: The length of the longest peak. If there are no peaks, returns 0. if len(sequence) < 3: return 0 longest_peak_len = 0 i = 1 while i < len(sequence) - 1: # Check if the current element is a peak if sequence[i - 1] < sequence[i] > sequence[i + 1]: left_idx = i - 1 right_idx = i + 1 # Move left pointer to the beginning of the peak while left_idx > 0 and sequence[left_idx - 1] < sequence[left_idx]: left_idx -= 1 # Move right pointer to the end of the peak while right_idx < len(sequence) - 1 and sequence[right_idx] > sequence[right_idx + 1]: right_idx += 1 # Calculate the length of the current peak current_peak_len = right_idx - left_idx + 1 longest_peak_len = max(longest_peak_len, current_peak_len) # Move the pointer to the end of the current peak i = right_idx else: i += 1 return longest_peak_len"},{"question":"You are given an array `prices` where each `prices[i]` is the price of a given stock on the ith day, and an integer `k`. You want to determine the maximum profit you can achieve by completing exactly one transaction (i.e., buy one and sell one share of the stock) exactly `k` times. Note that you cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Write a function `maxProfit(prices: List[int], k: int) -> int` that will return the maximum profit you can make. If it is not possible to complete `k` transactions, return 0. The ith transaction must be completed before the (i+1)th transaction starts. # Input - `prices` (1 ≤ len(prices) ≤ 10^4, prices[i] (0 ≤ prices[i] ≤ 10^4)): a list of integers representing the prices of the stock on day i - `k` (1 ≤ k ≤ len(prices)/2): an integer representing the exact number of transactions to be completed # Output Return an integer representing the maximum profit after completing exactly `k` transactions. # Examples Example 1 **Input:** `prices = [3,3,5,0,0,3,1,4]` `k = 2` **Output:** `6` **Explanation:** - Buy on day 4 (price = 0) - Sell on day 5 (price = 3), profit = 3-0 = 3 - Buy on day 6 (price = 1) - Sell on day 7 (price = 4), profit = 4-1 = 3 Total profit = 3 + 3 = 6 Example 2 **Input:** `prices = [1,2,3,4,5]` `k = 2` **Output:** `4` **Explanation:** - Buy on day 1 (price = 1) - Sell on day 5 (price = 5), profit = 5-1 = 4 Only one transaction is required since buying at day 1 and selling at day 5 yields the highest profit. Example 3 **Input:** `prices = [7,6,4,3,1]` `k = 2` **Output:** `0` **Explanation:** No transaction can be made to profit, thus the maximum profit is 0.","solution":"def maxProfit(prices, k): n = len(prices) if n == 0 or k == 0: return 0 # If k is larger than the number of days/2, it means we can complete as many transactions as we want. if k >= n // 2: return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1)) # Initialize dp array dp = [[0] * n for _ in range(k + 1)] for t in range(1, k + 1): max_diff = -prices[0] for i in range(1, n): dp[t][i] = max(dp[t][i - 1], prices[i] + max_diff) max_diff = max(max_diff, dp[t - 1][i] - prices[i]) return dp[k][n - 1]"},{"question":"You will be given an integer n and a list of n integers as input. Write a program that prints the sum of all even numbers in the list. If no even numbers are present, print 0. -----Constraints----- - 1 ≤ n ≤ 100 - Each integer in the list is between -1000 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n -----Output----- Print the sum of all even numbers in the list, or 0 if there are no even numbers. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 6 The even numbers in the list are 2 and 4, and their sum is 6. Thus, the output is 6.","solution":"def sum_of_even_numbers(n, numbers): Returns the sum of all even numbers in the list. Parameters: n (int): Number of integers in the list. numbers (list of int): List of integers. Returns: int: Sum of even numbers in the list, or 0 if no even numbers are present. even_sum = sum(number for number in numbers if number % 2 == 0) return even_sum"},{"question":"You are given a sequence of opening and closing parentheses. Your task is to determine the minimum number of parentheses that must be removed so that the remaining parentheses are valid. Valid parentheses follow the rule: every opening parenthesis has a corresponding closing parenthesis and they are correctly nested. Example 1: Input: sequence = \\"())()(((\\" Output: 4 Explanation: By removing the parentheses at indices 1, 4, 5, and 6, the remaining sequence \\"()\\" is valid. Example 2: Input: sequence = \\"((())\\" Output: 1 Explanation: By removing one opening parenthesis at index 0 or 1, the remaining sequence \\"(())\\" is valid. Example 3: Input: sequence = \\"()()\\" Output: 0 Explanation: The given sequence is already valid, so no parentheses need to be removed. Your Task: You don\'t need to read or print anything. Your task is to implement the function minRemoveToMakeValid() which takes the sequence as input and returns the minimum number of parentheses that need to be removed to make the parentheses valid. Expected Time Complexity: O(n), where n is the length of the sequence. Expected Space Complexity: O(1) Constraints: 1 <= len(sequence) <= 10^3","solution":"def minRemoveToMakeValid(sequence): Returns the minimum number of parentheses that must be removed to make the sequence valid. open_count = 0 remove_count = 0 # First pass to find unmatched closing parentheses for c in sequence: if c == \'(\': open_count += 1 elif c == \')\': if open_count > 0: open_count -= 1 else: remove_count += 1 # open_count now contains the number of unmatched opening parentheses return remove_count + open_count"},{"question":"You are given two integers ( n ) and ( m ), which represent an ( n times m ) grid. Your task is to fill the grid with characters such that every cell contains a character from the set {\'A\', \'B\', \'C\'}. The filled grid must satisfy the following conditions: 1. No two adjacent cells should contain the same character. 2. Characters should be placed in a way that minimizes the lexicographical order of row-major representation of the grid. If multiple solutions exist, output the one with the smallest lexicographical order. **Input** - The first line contains two integers ( n ) and ( m ) (1 ≤ (n, m) ≤ 100). **Output** - Print ( n ) lines, each containing ( m ) characters, representing the grid. **Example** **Input** ``` 2 3 ``` **Output** ``` ABC BCA ``` **Input** ``` 3 4 ``` **Output** ``` ABCA BCAB CABC ```","solution":"def generate_grid(n, m): Generates an n x m grid with characters A, B, and C such that no two adjacent cells have the same character. The grid is generated to have the smallest lexicographical order in its row-major representation. result = [] chars = [\'A\', \'B\', \'C\'] for i in range(n): row = [] for j in range(m): row.append(chars[(i + j) % 3]) result.append(\\"\\".join(row)) return result"},{"question":"You are given two rectangular matrices, mathbf{A} and mathbf{B}, of the same dimensions n times m. You need to check if it is possible to make the matrix mathbf{A} equal to the matrix mathbf{B} by rearranging the elements of each row of mathbf{A}. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input Format: - The first line contains two integers n and m representing the number of rows and the number of columns of the matrices. - The next n lines each contain m integers representing the elements of the matrix mathbf{A}. - The next n lines each contain m integers representing the elements of the matrix mathbf{B}. Constraints: - 1 leq n, m leq 1000 - 0 leq mathbf{A}[i][j], mathbf{B}[i][j] leq 10^9 Output Format: - Print \\"YES\\" if it is possible to rearrange the elements of the rows of matrix mathbf{A} to make it equal to matrix mathbf{B}, otherwise print \\"NO\\". Sample Input: ``` 3 3 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 ``` Sample Output: ``` YES ``` Explanation: By rearranging the rows of matrix mathbf{A} as follows: ``` 8 7 9 5 4 6 2 1 3 ``` We can make it identical to matrix mathbf{B}. Thus, the answer is \\"YES\\".","solution":"def can_rearrange_to_match(A, B): Returns \\"YES\\" if it is possible to rearrange the elements of each row of matrix A to make it equal to matrix B, otherwise returns \\"NO\\". for rowA, rowB in zip(A, B): if sorted(rowA) != sorted(rowB): return \\"NO\\" return \\"YES\\""},{"question":"A and B love playing games with arrays. They just created a new one to test their skills. You are given an array of n positive integers. You can apply the following operation on the array as many times as you want: - Choose three indices i, j, k (1 ≤ i < j < k ≤ n) such that a_i ≠ a_j ≠ a_k. Then, set a_j to a_i. The goal is to make all elements of the array equal using the fewest number of operations. Input The first line contains a single integer n (1 ≤ n ≤ 2000). The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6). Output Output the minimum number of operations needed to make all elements of the array equal or print -1 if it is not possible. Example Input: 6 1 2 2 1 2 3 Output: 3 Input: 5 1 1 1 1 1 Output: 0 Input: 4 3 5 9 7 Output: -1 Explanation In the first example, one possible sequence of operations is: - Choose i = 1, j = 2, k = 6. Set a_2 to a_1, resulting in array [1, 1, 2, 1, 2, 3]. - Choose i = 1, j = 3, k = 6. Set a_3 to a_1, resulting in array [1, 1, 1, 1, 2, 3]. - Choose i = 1, j = 5, k = 6. Set a_5 to a_1, resulting in array [1, 1, 1, 1, 1, 3]. In the second example, the array is already uniform, so no operations are needed. In the third example, there is no way to make all elements equal, so the answer is -1.","solution":"def min_operations_to_make_equal(n, arr): from collections import Counter if n == 1: return 0 freq = Counter(arr) most_frequent_count = max(freq.values()) if most_frequent_count == 1: return -1 return n - most_frequent_count"},{"question":"Given a list of words, your task is to find the number of pairs of indices (i, j) where 0 ≤ i < j < len(words) such that the concatenation of words[i] and words[j] forms a palindrome. Example 1: Input: [\\"bat\\", \\"tab\\", \\"cat\\"] Output: 1 Explanation: The only palindromic pair is (\\"bat\\", \\"tab\\") -> \\"battab\\". Example 2: Input: [\\"abcd\\", \\"dcba\\", \\"lls\\", \\"s\\", \\"sssll\\"] Output: 2 Explanation: The palindromic pairs are (\\"abcd\\", \\"dcba\\") -> \\"abcddcba\\" and (\\"lls\\", \\"s\\") -> \\"llssll\\". Note: - The list of words will have a length in the range [1, 1000]. - Each word will have a length in the range [1, 100].","solution":"def is_palindrome(s): return s == s[::-1] def count_palindromic_pairs(words): count = 0 for i in range(len(words)): for j in range(i + 1, len(words)): if is_palindrome(words[i] + words[j]): count += 1 return count"},{"question":"Write a function that takes a string, transforms it, and returns a new string with every alphabetical character shifted `n` positions up the alphabet. Maintain case and leave non-alphabetical characters unaltered. If a shift brings a character above \'z\' or \'Z\', wrap around to the start of the alphabet. Example: Given a shift of `3`, `\'a\'` becomes `\'d\'`, `\'z\'` becomes `\'c\'`, `\'A\'` becomes `\'D\'`, and `\'Z\'` becomes `\'C\'`. Write the detailed implementation including all necessary test cases. Function Signature: `def caesar_cipher(s: str, n: int) -> str:` Examples: ```python caesar_cipher(\\"Hello, World!\\", 3) # \\"Khoor, Zruog!\\" caesar_cipher(\\"abcXYZ\\", 2) # \\"cdeZAB\\" caesar_cipher(\\"Rotate123\\", 10) # \\"Bydziq123\\" ```","solution":"def caesar_cipher(s: str, n: int) -> str: def shift_char(c, n): if \'a\' <= c <= \'z\': return chr(((ord(c) - ord(\'a\') + n) % 26) + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr(((ord(c) - ord(\'A\') + n) % 26) + ord(\'A\')) else: return c return \'\'.join(shift_char(c, n) for c in s)"},{"question":"You are given a series of photos that all need to be tagged and sorted. For each photo, there is a tag list containing labels of objects detected in that photo. You need to identify groups of photos that share common tags and provide a common identifier for each group. A group is defined as a set of photos that have at least one common tag. If a photo shares a tag with any photo in the group, it is considered part of that group. Your task is to find the total number of distinct groups. -----Input----- - First line contains an integer N, denoting the number of photos. - Next N lines contain a string of space-separated tags for each photo. Each tag will be a lowercase alphabetic string. -----Output----- - A single integer representing the number of distinct groups of photos. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ Number of tags per photo ≤ 100 - 1 ≤ Length of each tag ≤ 20 -----Example----- Input: 4 cat dog bird dog fish apple banana banana orange Output: 2 -----Explanation----- Example case: - Photos 1 and 2 share the tag \\"dog\\", so they form one group. - Photos 3 and 4 share the tag \\"banana\\", so they form another group. There are no other tags that link these groups together, so the answer is 2.","solution":"def find_distinct_groups(N, photo_tags): from collections import defaultdict # Create a mapping from each tag to the photos that contain it tag_to_photos = defaultdict(set) for i, tags in enumerate(photo_tags): for tag in tags: tag_to_photos[tag].add(i) # Create adjacency list for graph photo_graph = defaultdict(set) for photos in tag_to_photos.values(): photos = list(photos) for i in range(len(photos)): for j in range(i + 1, len(photos)): photo_graph[photos[i]].add(photos[j]) photo_graph[photos[j]].add(photos[i]) # Use DFS to find connected components def dfs(photo, visited): stack = [photo] while stack: current = stack.pop() if current not in visited: visited.add(current) for neighbor in photo_graph[current]: if neighbor not in visited: stack.append(neighbor) visited = set() groups = 0 for photo in range(N): if photo not in visited: groups += 1 dfs(photo, visited) return groups # Example usage: N = 4 photo_tags = [ [\\"cat\\", \\"dog\\", \\"bird\\"], [\\"dog\\", \\"fish\\"], [\\"apple\\", \\"banana\\"], [\\"banana\\", \\"orange\\"] ] print(find_distinct_groups(N, photo_tags)) # Output: 2"},{"question":"You are given a mountain range represented as an array of N integers, where each integer represents the height of a mountain at a specific index. Your task is to find the length of the longest subsequence of mountains such that each subsequent mountain in the subsequence is taller than the previous one. However, after choosing a peak, each following mountain height should be lower than the previous one. Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer array of size N. Constraints: - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 1000 - 1 ≤ height of each mountain ≤ 10000 Output Format: - For each test case, output a single integer, the length of the longest subsequence of mountains. Example Input: 2 7 2 1 4 7 3 2 5 5 1 2 3 4 5 Example Output: 5 4 Explanation: For the first test case: The longest subsequence that can be formed is [1, 4, 7, 3, 2], which has length 5. For the second test case: The longest subsequence is either [1, 2, 3, 4] or [2, 3, 4, 5], both have length 4.","solution":"def longest_mountain_subsequence(heights): N = len(heights) if N < 3: return 0 up = [0] * N down = [0] * N # Fill up lengths for i in range(1, N): if heights[i] > heights[i - 1]: up[i] = up[i - 1] + 1 # Fill down lengths for i in range(N - 2, -1, -1): if heights[i] > heights[i + 1]: down[i] = down[i + 1] + 1 max_len = 0 for i in range(1, N - 1): if up[i] > 0 and down[i] > 0: # Only consider peaks max_len = max(max_len, up[i] + down[i] + 1) return max_len def solve(test_cases): results = [] for heights in test_cases: results.append(longest_mountain_subsequence(heights)) return results"},{"question":"Given a list of integers, return a new list with only the prime numbers from the original list. The returned list should be sorted in ascending order. Consider that a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. In case of duplicates, only one instance of each prime number should be included in the returned list. ~~~if:python For Python, you may use a helper function to check if a number is prime. ~~~ Ensure that your solution is efficient and handles edge cases, such as an empty list or a list with no prime numbers, gracefully.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False elif n == 2: return True elif n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_and_sort_primes(nums): Given a list of integers, return a new list with only the prime numbers from the original list, sorted in ascending order and with no duplicates. prime_set = {num for num in nums if is_prime(num)} return sorted(prime_set)"},{"question":"# Task Karla loves climbing stairs and she climbs them every day as her workout routine. She is also a software developer and likes to keep track of different possible sequences in her workout. She wonders, given the number of steps `n`, how many distinct ways she can reach the top. Once she starts, she can either climb 1 step or 2 steps at a time. Help Karla determine the number of distinct ways to reach the top. # Input/Output - `[input]` integer `n` The total number of steps. `1 ≤ n ≤ 10^5` - `[output]` an integer The number of distinct ways to reach the top. # Example For `n = 4`, the result should be `5`. ``` The 5 distinct ways to reach the top are: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps ``` For `n = 2`, the result should be `2`. ``` The 2 distinct ways to reach the top are: 1. 1 step + 1 step 2. 2 steps ```","solution":"def climb_stairs(n): Returns the number of distinct ways to climb to the top of a staircase with n steps, given that one can climb either 1 step or 2 steps at a time. if n == 1: return 1 elif n == 2: return 2 first, second = 1, 2 for _ in range(3, n + 1): first, second = second, first + second return second"},{"question":"Implement a function that takes an input list of integers and returns a new list with the same integers but sorted in increasing order. However, the sorting algorithm used must be a bubble sort, implemented from scratch without using any built-in sort functions. # Function Signature: ```python def bubble_sort(arr: List[int]) -> List[int]: ``` # Input: - `arr`: A list of integers. # Output: - A new list of integers, sorted in increasing order. # Example: ```python bubble_sort([64, 34, 25, 12, 22, 11, 90]) # returns [11, 12, 22, 25, 34, 64, 90] bubble_sort([-5, -1, 0, 3, 7, 2]) # returns [-5, -1, 0, 2, 3, 7] ``` # Constraints: - The input list can contain up to 10^3 integers. - Each integer in the list can be in the range of [-10^6, 10^6].","solution":"from typing import List def bubble_sort(arr: List[int]) -> List[int]: Sorts a list of integers using bubble sort algorithm. Args: arr (List[int]): The list of integers to be sorted. Returns: List[int]: The sorted list of integers. n = len(arr) # Create a copy of the list to avoid modifying the original list sorted_arr = arr[:] # Perform bubble sort for i in range(n): swapped = False for j in range(0, n-i-1): if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] swapped = True if not swapped: # No more swaps needed, array is sorted break return sorted_arr"},{"question":"A hospital is managing its patient appointments and has decided to implement a new system for keeping track of appointment times and durations. Each appointment is scheduled on a 24-hour format. You are tasked with creating a function to determine if there is any conflict between newly requested appointment times and the existing scheduled appointments. Two appointments conflict if they overlap even partially. Write a function `can_schedule_new_appointment(appointments, new_appointment)` that takes in a list of existing appointments and a new appointment as an input and returns \\"YES\\" if the new appointment can be scheduled without conflicts, otherwise returns \\"NO\\". Each appointment is represented as a tuple of two integers `(start_time, end_time)`, where `start_time` and `end_time` indicate the appointment\'s start and end times in minutes from the beginning of the day. Note that the end time is always greater than the start time and both are within 0 and 1440 (24 hours * 60 minutes). # Input - An integer `n` (0 ≤ n ≤ 1000) representing the number of existing appointments. - A list of `n` tuples, where each tuple contains two integers, `start_time` and `end_time` `(0 ≤ start_time < end_time ≤ 1440)`, representing the start and end times of existing appointments. - A tuple of two integers representing the `start_time` and `end_time` of the new appointment. # Output - Return \\"YES\\" if the new appointment can be scheduled without conflicts, otherwise return \\"NO\\". # Examples Example 1 **Input:** ``` appointments = [(60, 120), (130, 180), (200, 240)] new_appointment = (150, 210) ``` **Output:** ``` NO ``` Example 2 **Input:** ``` appointments = [(60, 120), (130, 180), (200, 240)] new_appointment = (180, 200) ``` **Output:** ``` YES ``` # Note - In Example 1, the new appointment conflicts with the second and third existing appointments. - In Example 2, the new appointment does not overlap with any of the existing appointments.","solution":"def can_schedule_new_appointment(appointments, new_appointment): Determines if a new appointment can be scheduled without conflicts. Parameters: appointments (list of tuple): A list of existing appointments where each appointment is a tuple (start_time, end_time). new_appointment (tuple): A tuple (start_time, end_time) representing the new appointment. Returns: str: \\"YES\\" if the new appointment can be scheduled without conflicts, otherwise \\"NO\\". new_start, new_end = new_appointment for start, end in appointments: if new_start < end and new_end > start: return \\"NO\\" return \\"YES\\""},{"question":"Alex is working on a project that involves manipulating strings. As part of the project, he needs to find out how many subsequences of a given string are also palindromes. Your task is to help Alex determine this. A subsequence of a string is a sequence that can be derived from another string by deleting some or none of the characters without changing the order of the remaining characters. A palindrome is a string that reads the same backward as forward. Write a function that, given a string, returns the number of palindromic subsequences it has. Input The first line contains an integer T, the number of test cases. The next T lines each contain a single string S. Output For each test case, output the number of palindromic subsequences in the string S. Constraints: 1 <= T <= 10 1 <= |S| <= 20 The string S contains only lowercase English letters. SAMPLE INPUT 2 aaa abc SAMPLE OUTPUT 7 3 Explanation: For the input string \\"aaa\\", the seven palindromic subsequences are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", and \\"\\" (the empty string, which is considered a palindrome). For the input string \\"abc\\", the three palindromic subsequences are: \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_palindromic_subsequences(T, cases): def is_palindrome(s): return s == s[::-1] def count_subsequences(S): n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1 else: dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] return dp[0][n - 1] results = [] for case in cases: results.append(count_subsequences(case)) return results"},{"question":"Tachibana Kanade loves gardening and taking care of trees. One day, she found a forest that consists of many trees and decided to collect information about them. Each tree has tree species assigned to it, represented by an integer label. The forest can be described as an undirected graph, where each tree is a node and the edges represent the connections between the trees. Kanade wants to know how many distinct species are there in the largest connected component of the forest. Input The first line contains two integers n and m (1 ≤ n ≤ 200; 0 ≤ m ≤ 19900), where n is the number of trees and m is the number of connections between the trees. The second line contains n integers, where the i-th integer represents the species of the i-th tree (1 ≤ species[i] ≤ 10^5). The following m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), denoting that there is a connection between tree u and tree v. It is guaranteed that each pair (u, v) will be listed only once, and no tree has a self-connection. Output Print a single integer, the number of distinct species in the largest connected component of the forest. Examples Input 5 3 1 2 3 4 5 1 2 2 3 4 5 Output 3 Input 6 5 1 1 2 2 3 3 1 2 2 3 3 6 4 5 5 6 Output 3 Input 4 0 1 1 1 1 Output 1 Note In the first example, there are two connected components: {1, 2, 3} and {4, 5}. The largest connected component has nodes {1, 2, 3} with species {1, 2, 3}, so the output is 3. In the second example, the largest connected component has nodes {1, 2, 3, 6} with species {1, 2, 3}, so the output is 3. In the third example, there are no connections, so each tree is its own component. The largest connected component has nodes {1} with species {1}, so the output is 1.","solution":"def number_of_distinct_species_in_largest_component(n, m, species, connections): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in connections: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) # DFS to find connected components def bfs(node): queue = deque([node]) visited.add(node) component = [] while queue: current = queue.popleft() component.append(current) for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return component visited = set() largest_component = [] for i in range(n): if i not in visited: component = bfs(i) if len(component) > len(largest_component): largest_component = component distinct_species = set(species[i] for i in largest_component) return len(distinct_species)"},{"question":"Given an array of digits, increment a large integer represented by the array by one. The array of digits is non-empty, and each element in the array contains a single digit (0-9). The most significant digit is at the start of the array, and each element in the array corresponds to the digits of the original number in that order. Write a function that receives an array of digits and returns a new array of digits representing the incremented value. Example 1: Input: digits = [1, 2, 3] Output: [1, 2, 4] Explanation: The input array represents the integer 123. Incrementing by one gives 124, and the output is [1, 2, 4]. Example 2: Input: digits = [4, 3, 2, 1] Output: [4, 3, 2, 2] Explanation: The input array represents the integer 4321. Incrementing by one gives 4322, and the output is [4, 3, 2, 2]. Example 3: Input: digits = [9] Output: [1, 0] Explanation: The input array represents the integer 9. Incrementing by one gives 10, and the output is [1, 0]. Example 4: Input: digits = [9, 9, 9] Output: [1, 0, 0, 0] Explanation: The input array represents the integer 999. Incrementing by one gives 1000, and the output is [1, 0, 0, 0]. Constraints: - The input array \\"digits\\" will have a length in the range [1, 100]. - Each element in the array \\"digits\\" will be a digit from 0 to 9.","solution":"def increment_array(digits): Increment the large integer represented by the array of digits by one. Args: digits (list of int): List of single digits representing a large integer. Returns: list of int: New list of single digits representing the incremented large integer. n = len(digits) # Get the length of input digits array for i in range(n-1, -1, -1): if digits[i] < 9: # If current digit is less than 9, simply increment it and return the array digits[i] += 1 return digits digits[i] = 0 # Otherwise, set current digit to 0 and move to the next significant digit # If all the digits are 9, then the increment will add one more digit to the array return [1] + digits"},{"question":"You are tasked with developing an algorithm for a smart warehouse robot that needs to efficiently move items from one end of a warehouse to another. The warehouse is represented as an `n x m` grid, where some cells contain obstacles and others are empty. The robot starts at the top-left cell of the grid (0, 0) and needs to move to the bottom-right cell of the grid (n-1, m-1). The robot can move one cell in four possible directions: up, down, left, or right. However, the robot is only allowed to move to an empty cell (not an obstacle) and must stay within the grid boundaries. Your goal is to determine the minimum number of moves required for the robot to reach the bottom-right cell of the grid. If it is impossible for the robot to reach the target cell, return -1. # Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the warehouse grid. The next `n` lines each contain `m` characters, representing the grid. Each character is either: - `.` (a cell the robot can move to), - `#` (an obstacle the robot cannot move to). # Output Print a single integer, the minimum number of moves required for the robot to reach the bottom-right cell. If it is impossible to reach the target cell, print -1. # Examples Input 5 5 ..... .#... ...#. .#.#. ..... Output 8 Input 3 3 .#. .#. .#. Output -1 Input 4 4 .... .. .#.. .... Output 6 # Note In the first example, the robot can move as follows: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4), for a total of 8 moves. In the second example, the robot is blocked by obstacles and cannot reach the bottom-right cell. In the third example, the robot can move as follows: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3), for a total of 6 moves.","solution":"from collections import deque def min_moves_to_reach_target(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given two strings S and T, determine the minimum number of operations required to transform string S into string T. The allowable operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Input: The first line of the input contains the number of test cases, Q. Each test case consists of two lines containing strings S and T, respectively. Output: For each test case, output the minimum number of operations required. Constraints: 1 ≤ Q ≤ 1000 1 ≤ length(S), length(T) ≤ 100 SAMPLE INPUT 2 horse ros intention execution SAMPLE OUTPUT 3 5","solution":"def edit_distance(S, T): Determines the minimum number of operations required to transform string S into string T. m, b = len(S), len(T) dp = [[0] * (b + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(b + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][b] def min_operations(test_cases): For each test case, determine the minimum number of operations required to transform string S into string T. Parameters: test_cases - List of tuples [(S1, T1), (S2, T2), ...] Returns: List of minimum number of operations for each test case. results = [] for S, T in test_cases: results.append(edit_distance(S, T)) return results"},{"question":"You are organizing a treasure hunt game. Each player starts from a known location and has to visit a sequence of locations to collect items, ending back at the starting location. You are given the distances between each pair of locations. Your task is to determine the minimum distance each player has to travel to complete the treasure hunt. -----Input----- The first line of the input contains an integer n (2 le n le 10) — the number of locations, including the starting location. The next n lines each contain n integers, where the j-th integer in the i-th line represents the distance d_{i,j} (1 le d_{i,j} le 100) between location i and location j. It is guaranteed that d_{i,i} = 0 and d_{i,j} = d_{j,i}. -----Output----- Output one integer — the minimum distance required to visit all locations starting and ending at the first location (location 1). -----Examples----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 1 3 1 0 2 3 2 0 Output 6 -----Note----- In the first example, the minimum distance route is: 1 rightarrow 2 rightarrow 4 rightarrow 3 rightarrow 1 with a total distance of 10 + 25 + 30 + 15 = 80. In the second example, the minimum distance route is: 1 rightarrow 2 rightarrow 3 rightarrow 1 with a total distance of 1 + 2 + 3 = 6.","solution":"import itertools def minimum_distance(n, distances): Computes the minimum distance required to visit all locations starting and ending at the first location. Parameters: - n: The number of locations. - distances: A 2D list representing the distance matrix between locations. Returns: - minimum_distance: The minimum distance required to complete the treasure hunt. # Generate all permutations of the locations excluding the starting location permutations = itertools.permutations(range(1, n)) min_distance = float(\'inf\') for perm in permutations: current_distance = distances[0][perm[0]] # Distance from start to first in perm for i in range(1, len(perm)): current_distance += distances[perm[i-1]][perm[i]] # Distance between consecutive locations in perm current_distance += distances[perm[-1]][0] # Distance from the last in perm back to start min_distance = min(min_distance, current_distance) return min_distance"},{"question":"Given a string s and an integer k, determine if it is possible to rearrange the characters in the string to form a palindrome such that the resulting palindrome contains at most k characters that do not appear in the original string. Input The first line contains the string s (1 ≤ |s| ≤ 100), consisting of lowercase and uppercase English letters. The second line contains an integer k (0 ≤ k ≤ 50). Output Output \\"YES\\" if it\'s possible to rearrange the string to form such a palindrome, or \\"NO\\" otherwise. Examples Input carrace 2 Output YES Input hello 1 Output NO","solution":"from collections import Counter def can_form_palindrome(s, k): Determines if it is possible to rearrange the string to form a palindrome with at most `k` characters that do not appear in the original string. :param s: input string :param k: the allowed number of characters not in the original string :return: \\"YES\\" or \\"NO\\" count = Counter(s) # Count how many characters have an odd frequency. odd_count = sum(1 for c in count if count[c] % 2 != 0) # We need at most one character with an odd frequency for a valid palindrome. if odd_count - k <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A well-respected warehouse receives orders for product boxes from various clients. The warehouse has a limited number of identical trucks available for delivery, and each truck can carry a fixed volume load. Each client\'s order consists of boxes of varying volumes, and each box must be entirely loaded onto one truck. Clients that provide small-volume boxes can have their boxes loaded together in one truck, but larger boxes might require splitting among multiple trucks. The objective is to determine if it is possible to load all the boxes into the trucks such that each truck is utilized to its maximum potential, adhering to the truckload capacity. No two clients should share the same truck to ensure proper item tracking and handling. Given the number of trucks, the capacity of each truck, and the volumes of the product boxes from each client, determine if the task can be achieved. -----Input----- The first line of input contains two integers T and C (1 le T le 100, 1 le C le 10000) where T is the number of trucks and C is the capacity of each truck. The second line contains a single integer N (1 le N le 1000), representing the number of clients. Each of the following N lines contains an integer K_i (1 le K_i le 100) followed by K_i integers denoting the volumes of boxes for the i^{text {th}} client (1 le text{volume} le C). -----Output----- If it is possible to load all boxes onto the trucks as described and ensure no two clients share the same truck, print \\"Possible\\". Otherwise, print \\"Not Possible\\". -----Examples----- Sample Input 1: 3 10 2 3 4 3 2 2 8 Sample Output 1: Possible Sample Input 2: 2 15 2 4 8 1 2 2 7 12 Sample Output 2: Not Possible Sample Input 3: 4 20 3 3 6 10 4 4 5 6 9 2 1 19 Sample Output 3: Possible","solution":"def can_load_all_boxes(T, C, clients): from queue import PriorityQueue N = len(clients) required_trucks = 0 for volumes in clients: volumes.sort(reverse=True) current_volume = 0 trucks_used = 0 for volume in volumes: if current_volume + volume <= C: current_volume += volume else: trucks_used += 1 current_volume = volume trucks_used += 1 # Account for the remaining boxes in the last truck required_trucks += trucks_used return \\"Possible\\" if required_trucks <= T else \\"Not Possible\\""},{"question":"Farmer Peter has a farm with an interesting irrigation system. The farm is represented by a 2D grid with R rows and C columns. Each cell in the grid either contains a pond (denoted by \'P\') or is dry land (denoted by \'.\'). Peter has decided to dig ditches to connect the ponds via dry lands to form contiguous water bodies. Peter can dig a single ditch between two cells that share an edge to connect them. He wants to know the minimum number of ditches he needs to dig such that all ponds on the farm become part of a single contiguous water body. ------ Input Format ------ - The first line of the input contains two space-separated integers R and C — the number of rows and columns in the grid. - Each of the following R lines contains C characters each, representing the farm grid. ------ Output Format ------ Output a single integer, the minimum number of ditches Farmer Peter needs to dig. ------ Constraints ------ 1 ≤ R, C ≤ 50 The grid contains at least one pond (\'P\'). ------ Sample Input 1 ------ 4 5 P...P ..... ..P.. P.... ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ Peter can dig ditches to connect the ponds in the following way: 1. Connect the pond at (1,1) to (2,1): Dig 1 ditch. 2. Connect the pond at (2,1) to (3,3): Dig 1 ditch. 3. Connect the pond at (3,3) to (4,1): Dig 1 ditch. Minimally, 3 ditches are needed to connect all ponds.","solution":"from collections import deque def min_ditches(R, C, grid): # Helper function to perform BFS def bfs(start_row, start_col, visited): queue = deque([(start_row, start_col)]) visited[start_row][start_col] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: row, col = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < R and 0 <= new_col < C and not visited[new_row][new_col] and grid[new_row][new_col] == \'P\': visited[new_row][new_col] = True queue.append((new_row, new_col)) # Find all the pond cells pond_cells = [(r, c) for r in range(R) for c in range(C) if grid[r][c] == \'P\'] # Check if there\'s any pond cell present if not pond_cells: return 0 # Set to keep track of visited ponds visited = [[False for _ in range(C)] for _ in range(R)] # Count the number of distinct pond clusters clusters = 0 for r, c in pond_cells: if not visited[r][c]: clusters += 1 bfs(r, c, visited) # To connect x clusters, we need (x-1) ditches return clusters - 1"},{"question":"There is a lively town that has a beautiful park with a rare variety of trees. You are given a list of these trees in the park along with their heights. The town\'s mayor wants to organize a festival and decorate the park. He decides to select a continuous segment of trees such that the sum of the heights of these selected trees is maximum. Your task is to write a program to find this maximum sum. Input Format - The first line contains an integer N, the number of trees in the park. - The second line contains N integers, representing the heights of the trees in the park. Output Format - Print a single integer, the maximum sum of heights of a continuous segment of trees. Constraints 1 ≤ N ≤ 100000 -1000 ≤ Height of each tree ≤ 1000 Example Input 1: 6 4 -1 2 1 -5 4 Output 1: 6 Explanation: The maximum sum of heights is obtained by considering the segment 4, -1, 2, 1, which sums to 6.","solution":"def max_sum_of_continuous_segment(trees_height): Finds the maximum sum of heights of a continuous segment of trees using Kadane\'s Algorithm. Parameters: trees_height (List[int]): List of integers representing the heights of trees in the park. Returns: int: The maximum sum of heights of a continuous segment of trees. max_current = max_global = trees_height[0] for height in trees_height[1:]: max_current = max(height, max_current + height) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function named `isValidParentheses` that takes a string as its argument and returns `True` if the string contains a valid combination of parentheses, and `False` otherwise. A combination of parentheses is considered valid if every opening parenthesis has a corresponding closing parenthesis in the correct order. ``` example s isValidParentheses \\"()\\" True \\"()()\\" True \\"(())\\" True \\"(()\\" False \\")(\\" False \\"(()))\\" False ``` ```if:not:csharp caution! The string length can be up to `10^4`. ``` ```if:csharp Caution! The string length can be up to `10,000`. ```","solution":"def isValidParentheses(s): Returns True if the string contains a valid combination of parentheses, and False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given an unsorted array of integers, write a function to find the longest consecutive subsequence. Example 1: Input: [100, 4, 200, 1, 3, 2] Output: [1, 2, 3, 4] Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore, its length is 4. Example 2: Input: [9, 1, -3, 0, 1, 5, -1, 2, -2, 3, 7, 6, 4, 8] Output: [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Explanation: The longest consecutive elements sequence is [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. Therefore, its length is 13. Your task: Your task is to complete the method `findLongestConseqSubseq(arr)` which takes an array of integers as an argument. The function should return the longest consecutive subsequence found in the array. Constraints: 1 <= T <= 100 1 <= N <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def findLongestConseqSubseq(arr): Returns the longest consecutive subsequence in the array. if not arr: return [] nums = set(arr) longest_streak = 0 best_start = None for num in nums: if num - 1 not in nums: # Start of a new sequence current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 if current_streak > longest_streak: longest_streak = current_streak best_start = num return [best_start + i for i in range(longest_streak)]"},{"question":"Given a linked list of integers, sort it using insertion sort algorithm. You have to complete the function `insertionSortList` which takes the head of the linked list as input and returns the head of the sorted linked list. Insertion sort iterates, consuming one input element each repetition, and grows a sorted output list. Each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain. Example 1: Input: 4 -> 2 -> 1 -> 3 Output: 1 -> 2 -> 3 -> 4 Explanation: Initially the linked list is 4 -> 2 -> 1 -> 3. After the first iteration, it becomes 2 -> 4 -> 1 -> 3. After the second iteration, it becomes 2 -> 1 -> 4 -> 3. Finally, it becomes 1 -> 2 -> 3 -> 4. Example 2: Input: -1 -> 5 -> 3 -> 4 -> 0 Output: -1 -> 0 -> 3 -> 4 -> 5 Explanation: Initially the linked list is -1 -> 5 -> 3 -> 4 -> 0. After the first iteration, it becomes -1 -> 5 -> 3 -> 4 -> 0. After the second iteration, it becomes -1 -> 3 -> 5 -> 4 -> 0. After the third iteration, it becomes -1 -> 3 -> 4 -> 5 -> 0. Finally, it becomes -1 -> 0 -> 3 -> 4 -> 5. Your task: You need to implement the function `insertionSortList` which takes `head` of the linked list and sorts it using insertion sort algorithm. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1<=n<=10^5 -10^5 <= Node value <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insertionSortList(head): if not head or not head.next: return head sorted_head = ListNode(0) # Dummy node to help with insertion current = head while current: prev = sorted_head next_node = current.next # Find the right place to insert current while prev.next and prev.next.val < current.val: prev = prev.next # Insert current into the sorted list current.next = prev.next prev.next = current current = next_node return sorted_head.next"},{"question":"# Task A matrix is called “symmetric” if it is equal to its transpose. In other words, for an n x n matrix `A`, `A` is symmetric if `A[i][j] == A[j][i]` for all `i` and `j`. For example: ``` 1 2 3 2 4 5 3 5 6 ``` is symmetric, but ``` 1 0 3 2 4 5 3 5 6 ``` is not. Given a matrix, determine if it is symmetric. # Input/Output - `[input]` 2D array `matrix` A 2D array (list of lists) representing an n x n matrix with integer elements. - `[output]` boolean value `true` if the matrix is symmetric, `false` otherwise.","solution":"def is_symmetric(matrix): Checks if a given square matrix is symmetric. Args: matrix (list of lists): A 2D list representing the matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Given a string of lowercase English letters, rearrange the string so that no two adjacent characters are the same. If multiple rearrangements are possible, return the lexicographically smallest one. If no such rearrangement is possible, return \\"IMPOSSIBLE\\". -----Input----- The input consists of a single string s (1 leq |s| leq 100) containing only lowercase English letters. -----Output----- Output a single string which is the rearranged version of the input string such that no two adjacent characters are the same. If no such rearrangement is possible, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input: aab Sample Output: aba Sample Input: aaab Sample Output: IMPOSSIBLE","solution":"import heapq from collections import Counter def rearrange_string(s): char_count = Counter(s) max_char = max(char_count.values()) if max_char > (len(s) + 1) // 2: return \\"IMPOSSIBLE\\" max_heap = [] for char, count in char_count.items(): heapq.heappush(max_heap, (-count, char)) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char # Increment count towards zero return \'\'.join(result)"},{"question":"# Create Rectangle Out of Characters Given an integer `n` (1 <= n <= 26) and a character `ch` (a single alphabet letter), write a function to generate a square matrix of size `n x n` filled with characters in increasing alphabetical order, starting from `ch`. If the increment exceeds \'z\', wrap around back to \'a\'. For example: ```python create_matrix(3, \'x\') # Should return: # [[\'x\', \'y\', \'z\'], # [\'a\', \'b\', \'c\'], # [\'d\', \'e\', \'f\']] create_matrix(4, \'w\') # Should return: # [[\'w\', \'x\', \'y\', \'z\'], # [\'a\', \'b\', \'c\', \'d\'], # [\'e\', \'f\', \'g\', \'h\'], # [\'i\', \'j\', \'k\', \'l\']] ``` # Function Signature ```python def create_matrix(n: int, ch: str) -> list: pass ``` # Constraints 1. The input `n` is an integer between 1 and 26. 2. The input `ch` is a single lowercase alphabet letter. # Note - The output should be a list of lists (2D list), representing the matrix. - Ensure to handle the wrap-around case beyond \'z\' appropriately.","solution":"def create_matrix(n: int, ch: str) -> list: Generates a square matrix of size n x n filled with characters in increasing alphabetical order, starting from character `ch`. Wraps around back to \'a\' if the increment exceeds \'z\'. Args: n (int): Size of the matrix (1 <= n <= 26). ch (str): The starting character (\'a\' <= ch <= \'z\'). Returns: list: A 2D list representing the matrix. matrix = [] current_char_code = ord(ch) for i in range(n): row = [] for j in range(n): if current_char_code > ord(\'z\'): current_char_code = ord(\'a\') row.append(chr(current_char_code)) current_char_code += 1 matrix.append(row) return matrix"},{"question":"The city of MetroVille is constructing a new network of roads to connect various districts. These roads are represented as a series of segments, where the city planner needs to count the number of road segments that are in good condition. A road segment is considered to be in good condition if its length is a multiple of a certain number K. Given the lengths of the road segments and the integer K, your task is to determine the number of road segments that are in good condition. ------ Input Format ------ The first line of input consists of two integers, N and K, where N denotes the number of road segments, and K denotes the divisor used to determine if a road segment is in good condition. The second line of input consists of N space-separated integers L1, L2, ..., LN, where Li denotes the length of the ith road segment. ------ Output Format ------ Generate one line of output with a single integer representing the number of road segments in good condition. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ Li ≤ 100 1 ≤ K ≤ 100 ------ Sample Input 1 ------ 5 2 4 5 6 8 10 ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ For the road segments with lengths [4, 5, 6, 8, 10], the segments that are multiples of 2 are [4, 6, 8, 10]. Therefore, there are 4 road segments in good condition. ------ Sample Input 2 ------ 4 3 3 6 9 12 ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ For the road segments with lengths [3, 6, 9, 12], all segments are multiples of 3. Therefore, there are 4 road segments in good condition.","solution":"def count_good_segments(n, k, lengths): Returns the number of road segments in good condition. :param n: Number of road segments. :param k: The divisor used to determine if a road segment is in good condition. :param lengths: List of lengths of road segments. :return: The number of road segments in good condition. return sum(1 for length in lengths if length % k == 0)"},{"question":"A: Maximum Sum Subarray problem Given a list of integers, find the contiguous subarray (containing at least one number) that has the maximum sum and return that sum. The subarray is a subset of the list where the numbers are contiguous (i.e., next to each other) in the original list. Input format The first line contains a single integer N, the length of the list. The second line contains N integers separated by spaces, representing the elements of the list. Constraint * 1 leq N leq 10^5 * -10^4 leq A_i leq 10^4 Output format Print the maximum sum of the contiguous subarray on one line. Input example 1 9 -2 1 -3 4 -1 2 1 -5 4 Output example 1 6 Input example 2 5 1 2 3 4 5 Output example 2 15 Example Input 8 -1 3 -2 3 4 -1 2 -5 Output 9","solution":"def maximum_sum_subarray(arr): Function to find the contiguous subarray with the maximum sum. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a positive integer as input and returns the next palindrome larger than the given number. A palindrome is a number that reads the same forward and backward, such as `121` or `1331`. Your function should return an error if the input is not a positive integer. For example, if the input is `123`, the next palindrome is `131`. If the input is `808`, the next palindrome is `818`. **Input:** 1. A positive integer `n` **Output:** 1. The next palindrome larger than the given number `n` Here are a few examples: ``` next_palindrome(123) -> 131 next_palindrome(808) -> 818 next_palindrome(999) -> 1001 ```","solution":"def next_palindrome(n): This function takes a positive integer \'n\' and returns the next palindrome larger than \'n\'. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer\\" def is_palindrome(x): return str(x) == str(x)[::-1] current = n + 1 while not is_palindrome(current): current += 1 return current"},{"question":"Given a string `s` consisting of alphanumeric characters and special characters (\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\', \'(\', \')\', \'-\', \'+\'), write a function to transform the string such that: 1. All alphanumeric characters (both uppercase and lowercase letters, and digits) appear at the beginning of the string, maintaining their original order. 2. All special characters appear at the end of the string, maintaining their original order. The function should modify the string in-place and return the new string. # Function Signature ```python def rearrange_string(s: str) -> str: ``` # Input - A single string `s` (1 ≤ len(s) ≤ 10^6) consisting of alphanumeric and special characters. # Output - The modified string where all alphanumeric characters appear at the beginning in their original order, followed by all special characters in their original order. # Example ```python # Example 1 s = \\"a1!b2@c#\\" print(rearrange_string(s)) # Output: \\"a1b2c!@#\\" # Example 2 s = \\"*&T3Ju^8(i)\\" print(rearrange_string(s)) # Output: \\"T3Ju8i*&()^\\" ``` # Note - The string should be handled as it is, without case conversion or character replacement. Uppercase and lowercase letters should be treated equally, but their order should be maintained as in the original string. - You are required to ensure that your solution runs efficiently even for the maximum constraints.","solution":"def rearrange_string(s: str) -> str: alphanumeric = [] special = [] for char in s: if char.isalnum(): alphanumeric.append(char) else: special.append(char) return \'\'.join(alphanumeric) + \'\'.join(special)"},{"question":"A group of friends is playing a game where they need to pass a ball around in a circular manner. There are N friends sitting in a circle and they have numbered themselves from 1 to N in a clockwise manner. The game starts with the friend numbered 1 possessing the ball. Each friend will pass the ball to the friend sitting next to them. When a friend receives the ball, they wait for a certain amount of time before passing it again. The time each friend waits is given in an array T of length N, where the ith element is the time the ith friend waits before passing the ball. Given the number of passes P, determine which friend will have the ball after P passes. Input Format First line contains a single integer N (the number of friends). Second line contains N integers separated with a space, representing the array T. Third line contains a single integer P (the number of passes). Output Format Output a single integer, the number of the friend who will have the ball after P passes. Constraints: * 1 ≤ N ≤ 1000 * 1 ≤ T[i] ≤ 1000 * 1 ≤ P ≤ 10^9 SAMPLE INPUT 5 2 3 1 2 4 8 SAMPLE OUTPUT 4 Explanation: The friends are sitting in a circle and passing the ball as per the given wait times. After the 8th pass, the ball will be with the friend numbered 4. The sequence of friends passing the ball is: 1 → 2 → 3 → 4 → 5 → 1 → 2 → 3 → 4","solution":"def find_friend_with_ball(N, T, P): Determines which friend will have the ball after P passes in a circular manner. :param N: int - number of friends :param T: list - list of integers representing time each friend waits before passing the ball :param P: int - number of passes :return: int - friend number who will have the ball after P passes # Calculate the position after P passes # The friends are effectively in a circle numbered from 1 to N # P passes would mean P % N gives the number of friend (0-based index) # Using modulo to find the index in circle friend_number = (P % N) + 1 return friend_number"},{"question":"Katie is participating in a marathon, and she is tracking her progress using checkpoints. Each checkpoint records the cumulative distance run up to that point in time. Katie wants to know how many times her total distance so far has increased exactly by an amount `K` since the last checkpoint. Given a list of distances at checkpoints in non-decreasing order, determine how many pairs of sequential checkpoints (i, j) have a difference of exactly `K`. -----Constraints----- - 1 le N le 10^5 (N is the number of checkpoints) - 1 le K le 10^9 - 0 le Distance_i le 10^9 -----Input----- Input is given from Standard Input in the following format: N K Distance_1 Distance_2 ... Distance_N -----Output----- Print the number of pairs of checkpoints (i, j) where the distance difference equals K. -----Sample Input----- 5 3 1 4 7 10 13 -----Sample Output----- 4 - The difference between checkpoints 1 and 2 is 4 - 1 = 3 - The difference between checkpoints 2 and 3 is 7 - 4 = 3 - The difference between checkpoints 3 and 4 is 10 - 7 = 3 - The difference between checkpoints 4 and 5 is 13 - 10 = 3 Thus, there are 4 pairs of checkpoints (i, j) where the difference equals 3.","solution":"def count_pairs_with_difference_k(N, K, distances): Returns the number of pairs of sequential checkpoints with a difference of exactly K. :param N: Number of checkpoints :param K: Desired difference between checkpoints :param distances: List of distances at each checkpoint in non-decreasing order :return: Number of pairs with the desired difference count = 0 for i in range(1, N): if distances[i] - distances[i - 1] == K: count += 1 return count # Example usage: # N, K = 5, 3 # distances = [1, 4, 7, 10, 13] # print(count_pairs_with_difference_k(N, K, distances)) # Output should be 4"},{"question":"Alice and Bob are playing a simple game with a sequence of numbers. Alice initially has a sequence of N integers. Bob can perform M operations on the sequence, each operation is of two types: 1. `1 K X`: This operation means Bob needs to replace the K-th element of the sequence with X. 2. `2 L R`: This operation means Bob needs to calculate the sum of all numbers in the sequence from index L to R (inclusive). Write a program that processes these operations and returns the results for each type `2` operation. Input Format The first line contains two space-separated integers N (the size of the sequence) and M (the number of operations). The next line contains N space-separated integers representing the initial sequence. The following M lines contain the operations. Each operation is either of type `1` or `2`. Output Format For each type `2` operation, output a line containing the sum of elements from index L to R (inclusive). Constraints - 1 ≤ N ≤ 2 * 10^5 - 1 ≤ M ≤ 2 * 10^5 - 1 ≤ K ≤ N - 1 ≤ L ≤ R ≤ N - 1 ≤ Sequence elements, X ≤ 10^5 SAMPLE INPUT 5 4 1 2 3 4 5 2 2 4 1 3 10 2 1 5 2 3 5 SAMPLE OUTPUT 9 22 19 Explanation Initially, the sequence is [1, 2, 3, 4, 5]. 1. For the first type `2` operation, we calculate the sum from index 2 to 4: 2 + 3 + 4 = 9. 2. Then, in the type `1` operation, we replace the 3rd element with 10. Now the sequence is [1, 2, 10, 4, 5]. 3. For the next type `2` operation, we calculate the sum from index 1 to 5: 1 + 2 + 10 + 4 + 5 = 22. 4. Finally, for the last type `2` operation, we calculate the sum from index 3 to 5: 10 + 4 + 5 = 19.","solution":"def process_operations(N, M, sequence, operations): result = [] for operation in operations: if operation[0] == 1: K = operation[1] - 1 X = operation[2] sequence[K] = X elif operation[0] == 2: L = operation[1] - 1 R = operation[2] result.append(sum(sequence[L:R])) return result # Example usage N = 5 M = 4 sequence = [1, 2, 3, 4, 5] operations = [ [2, 2, 4], [1, 3, 10], [2, 1, 5], [2, 3, 5] ] print(process_operations(N, M, sequence, operations)) # Output: [9, 22, 19]"},{"question":"The city of Gridville is built on a perfect grid layout with rows and columns. The city\'s roads run either horizontally or vertically. Each intersection in the city can be represented as a pair of coordinates (x, y) where x is the row number and y is the column number. Gridville also has a unique numbering system for its intersections: intersection (r, c) is associated with the number r * c, where r and c are 1-based indices. However, due to some recent construction, certain intersections have become blocked. You are given a list of these blocked intersections. Your task is to calculate the greatest common divisor (GCD) of the numbers associated with all unblocked intersections. -----Input----- The first line of input contains two integers n and m (1 <= n, m <= 1000) representing the number of rows and columns in Gridville respectively. The second line contains an integer k (0 <= k <= 1000) representing the number of blocked intersections. The next k lines each contain two integers r and c (1 <= r <= n, 1 <= c <= m), indicating the row and column of blocked intersections. -----Output----- Print a single integer, the GCD of the numbers associated with all unblocked intersections. -----Examples----- Input 3 3 2 2 2 3 3 Output 1 Input 4 4 1 2 4 Output 1","solution":"import math def gcd_of_unblocked_intersections(n, m, k, blocked): blocked_set = set((r, c) for r, c in blocked) gcd_all = None for i in range(1, n + 1): for j in range(1, m + 1): if (i, j) not in blocked_set: val = i * j if gcd_all is None: gcd_all = val else: gcd_all = math.gcd(gcd_all, val) return gcd_all if gcd_all is not None else 0"},{"question":"Given a grid of integers, determine if there is a path from the top-left corner to the bottom-right corner such that each step you take moves to an adjacent cell in the grid and the sum of the values in the cells you visit is less than or equal to a given target sum. You can only move right or down. Write a function `canReachTarget(grid, target)` that returns True if such a path exists, and False otherwise. If the grid is empty, return False. ```python def canReachTarget(grid, target): # your code here ``` Example input 1: ================ ```python canReachTarget( [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ], 7 ) ``` Example output 1: ================= ```python True ``` Example input 2: ================ ```python canReachTarget( [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ], 6 ) ``` Example output 2: ================= ```python False ```","solution":"def canReachTarget(grid, target): Determines if there is a path from (0,0) to (n-1,m-1) such that the sum of the values in the cells is <= target. # If the grid is empty, return False if not grid or not grid[0]: return False rows = len(grid) cols = len(grid[0]) # Initialize a set to keep track of the reachable sums at each cell reachable_sums = set() reachable_sums.add((0, 0, grid[0][0])) # (row, col, current_sum) while reachable_sums: r, c, current_sum = reachable_sums.pop() # If we\'ve reached the bottom-right corner, check the sum if r == rows - 1 and c == cols - 1: if current_sum <= target: return True # If moving right is within bounds if c + 1 < cols: new_sum = current_sum + grid[r][c + 1] # Only consider if new sum is within target if new_sum <= target: reachable_sums.add((r, c + 1, new_sum)) # If moving down is within bounds if r + 1 < rows: new_sum = current_sum + grid[r + 1][c] # Only consider if new sum is within target if new_sum <= target: reachable_sums.add((r + 1, c, new_sum)) # No path was found satisfying the condition return False"},{"question":"Sergey has a collection of n books, each with a certain number of pages. He has the ambitious goal to read every book he has at least once. However, Patrick, his friend, advised him not to read too many pages a day to avoid burnout. Each day, Sergey can read from one or multiple books. However, he has a limit d on the maximum number of pages he can read each day. To achieve his goal, he wants to determine the minimum number of days required to read all the books in his collection without violating the daily page limit. For example, if Sergey has n=3 books with pages p = [100, 200, 300] and his daily limit d = 200, the optimal way to read all the books would be: - Day 1: Read the 100 pages of the first book and 100 pages of the second book. - Day 2: Read the remaining 100 pages of the second book and 100 pages of the third book. - Day 3: Read the remaining 200 pages of the third book. In this case, Sergey needs a total of 3 days. Write a program to help Sergey determine the minimum number of days required to read all the books given a specific daily page limit. -----Input----- The first line contains one positive integer t (1 le t le 10^4) — the number of test cases. Each test case begins with a line containing two integers n (1 le n le 10^5) and d (1 le d le 10^9) — the number of books and the daily page limit, respectively. The second line of each test case contains n integers p_1 ldots p_n (1 le p_i le 10^9) — the number of pages of each book. The sum of n over all test cases does not exceed 3 cdot 10^5. -----Output----- For each test case output one integer — the minimum number of days required for Sergey to read all the books. -----Example----- Input 3 3 200 100 200 300 4 300 300 200 100 400 2 250 200 300 Output 3 3 2","solution":"def min_days_to_read_books(t, test_cases): results = [] for case in test_cases: n, d, pages = case days = 0 current_pages = 0 for book_pages in pages: if book_pages <= d: current_pages += book_pages if current_pages > d: days += 1 current_pages = book_pages else: # Book itself exceeds the daily limit whole_days = book_pages // d days += whole_days current_pages = book_pages % d if current_pages > 0: days += 1 current_pages = 0 # If there are pages left unread, count one more day if current_pages > 0: days += 1 results.append(days) return results # Example usage: # t = 3 # test_cases = [ # (3, 200, [100, 200, 300]), # (4, 300, [300, 200, 100, 400]), # (2, 250, [200, 300]) # ] # print(min_days_to_read_books(t, test_cases)) # Output: [3, 3, 2]"},{"question":"Given a non-negative integer `N`, find the largest palindrome number less than or equal to `N`. A palindrome number is a number that remains the same when its digits are reversed. -----Input----- The input contains a single integer `N` (0 ≤ N ≤ 10^6). -----Output----- Print a single integer - the largest palindrome number less than or equal to `N`. -----Examples----- Input 123 Output 121 Input 50 Output 44","solution":"def largest_palindrome_less_than_or_equal_to(N): Returns the largest palindrome number less than or equal to N. for num in range(N, -1, -1): if str(num) == str(num)[::-1]: return num"},{"question":"Write a function that accepts a dictionary where the keys are customer names and the values are lists of order amounts. The function should return a new dictionary where each key is a customer name, and the value is the total amount they have ordered. Additionally, if a duplicate customer name (case insensitive) appears in the input dictionary (e.g., \\"ALICE\\" and \\"alice\\"), the function should combine their orders and return a dictionary with a case-insensitive customer name as a single key. For example, if the input dictionary is `{\\"Alice\\": [10, 20, 30], \\"BOB\\": [5], \\"alice\\": [15], \\"CHARLIE\\": [50, 60]}`, the function should return `{\\"alice\\": 75, \\"bob\\": 5, \\"charlie\\": 110}`. Make sure to handle edge cases like empty dictionaries and lists. The keys in the output dictionary should be in lowercase.","solution":"def total_orders_by_customer(orders): Accepts a dictionary where the keys are customer names and the values are lists of order amounts. Returns a new dictionary where each key is a customer name in lowercase, and the value is the total amount they have ordered. Combines orders of duplicate customer names (case insensitive). combined_orders = {} for customer, amounts in orders.items(): customer_lower = customer.lower() if customer_lower not in combined_orders: combined_orders[customer_lower] = 0 combined_orders[customer_lower] += sum(amounts) return combined_orders"},{"question":"Write a function called `replace_with_evil` that takes two parameters: a string `original_str` and a list of words `evil_list`. The function should return a new string where all occurrences of each word in `evil_list` in the `original_str` are replaced with the word \\"EVIL\\". Here\'s the detailed behavior: - The function is case-insensitive, meaning \\"cat\\" should match \\"Cat\\", \\"CAT\\", etc. - Only whole words should be replaced. For example, replacing \\"cat\\" should not alter \\"catalog\\". - The original casing of the `original_str` should be preserved, except for the replaced word which should be entirely in uppercase \\"EVIL\\". - If a word appears more than once in the `original_str`, all occurrences should be replaced. Examples: ```python replace_with_evil(\\"The Cat is sleeping on the catalog.\\", [\\"cat\\"]) # returns \\"The EVIL is sleeping on the catalog.\\" replace_with_evil(\\"This is a secret mission. Secret operations should remain unknown.\\", [\\"secret\\", \\"unknown\\"]) # returns \\"This is a EVIL mission. EVIL operations should remain EVIL.\\" ``` Note: The order of the words in `evil_list` does not matter. The `evil_list` will never be empty and will only contain valid words consisting of letters.","solution":"import re def replace_with_evil(original_str, evil_list): Replaces all occurrences of words in evil_list with \\"EVIL\\" in the original_str, in a case-insensitive manner and keeping the original casing of the rest of the string intact. def replace(match): return \'EVIL\' pattern = r\'b(\' + \'|\'.join(map(re.escape, evil_list)) + r\')b\' new_str = re.sub(pattern, replace, original_str, flags=re.IGNORECASE) return new_str"},{"question":"You are provided an array of distinct integers. Your task is to rearrange the array such that the difference between any two adjacent elements is always even. If no such arrangement is possible, print \\"Not Possible\\". If there are multiple solutions, you are free to print any of them. Input The first line contains an integer n (2 ≤ n ≤ 1000) - the number of elements in the array. The second line contains n distinct integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6). Output Output the rearranged array where the difference between any two adjacent elements is even. If no such arrangement is possible, print \\"Not Possible\\". Example Input 5 3 8 14 2 6 Output 8 6 14 2 3","solution":"def rearrange_even_difference(arr): # Split the array into odd and even numbers even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] # If there are all evens or all odds, return the original list (since all differences will be even) if len(even_numbers) == len(arr) or len(odd_numbers) == len(arr): return \\"Not Possible\\" # Combine evens and odds in succession to satisfy the conditions return even_numbers + odd_numbers # Example usage n = 5 array = [3, 8, 14, 2, 6] print(rearrange_even_difference(array))"},{"question":"Given an array of integer numbers, write a program that finds the longest subsequence of consecutive integers in the array. A subsequence is derived by deleting some or no elements without changing the order of the remaining elements. Input The input is given in the following format. n arr Where the first line represents the integer n (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains n integers separated by spaces (−10^6 ≤ arr[i] ≤ 10^6). Output Outputs the integer length of the longest subsequence of consecutive integers. Examples Input 6 1 2 9 3 10 4 Output 4 Input 5 5 3 1 2 4 Output 5 Input 4 10 20 30 40 Output 1","solution":"def longest_consecutive_subsequence(arr): if not arr: return 0 # Create a set of the elements arr_set = set(arr) longest_length = 0 for num in arr: # Only check for the starting number of a sequence if num - 1 not in arr_set: current_length = 1 current_num = num # Check the next numbers in the sequence while current_num + 1 in arr_set: current_length += 1 current_num += 1 # Update the longest sequence length if necessary longest_length = max(longest_length, current_length) return longest_length"},{"question":"Given an integer N, return the smallest palindrome greater than N consisting of digits only. Example 1: Input: N = 123 Output: 131 Explanation: 131 is the smallest palindrome larger than 123. Example 2: Input: N = 99 Output: 101 Explanation: 101 is the smallest palindrome larger than 99. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findNextPalindrome() which takes an integer N as input and returns the smallest palindrome greater than N. Expected Time Complexity: O(d) where d is the number of digits in N. Expected Space Complexity: O(d) where d is the number of digits in N. Constraints: 0 <= N <= 10^{9}","solution":"def findNextPalindrome(N): Returns the smallest palindrome greater than N. def is_palindrome(x): return str(x) == str(x)[::-1] current_number = N + 1 while not is_palindrome(current_number): current_number += 1 return current_number"},{"question":"Create a function `divisor_string(n: int) -> str` that takes an integer `n` and returns a string that contains the divisors of `n` in ascending order, separated by commas. # Constraints - All elements of the output should be in numeric order, separated by commas, without extra spaces. - The input integer will be between 1 and 10,000 (inclusive). # Input - An integer `n` where `1 ≤ n ≤ 10,000`. # Output - A comma-separated string containing all divisors of `n` in ascending order. # Example 1. **Input:** 10 **Output:** \\"1,2,5,10\\" 2. **Input:** 15 **Output:** \\"1,3,5,15\\" 3. **Input:** 1 **Output:** \\"1\\"","solution":"def divisor_string(n: int) -> str: Returns a comma-separated string of all divisors of integer n in ascending order. divisors = [str(i) for i in range(1, n+1) if n % i == 0] return \\",\\".join(divisors)"},{"question":"Lanny the Librarian is organizing a new bookshelf for the local library. The bookshelf has a single row with numbered slots, and each slot can hold exactly one book. Lanny is given a list of books, each with a unique identifier (an integer), and their current position on the row. To make the shelf more aesthetically pleasing, Lanny wants to rearrange the books so that their identifiers appear in strictly increasing order from left to right. However, due to limited space between the slots, Lanny can only swap adjacent books. Given the current arrangement of the books, your task is to determine the minimum number of adjacent swaps required to sort the books in increasing order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of books. The second line contains n integers, the identifiers of the books, which are distinct and range from 1 to n. -----Output----- Print a single integer, the minimum number of adjacent swaps required to sort the books. -----Examples----- Input 5 4 3 2 1 5 Output 6 Input 3 3 1 2 Output 2","solution":"def min_adjacent_swaps(arr): This function returns the minimum number of adjacent swaps required to sort the books in increasing order. def merge_sort_and_count(arr, temp_arr, left, right): if left >= right: return 0 mid = (left + right) // 2 inv_count = 0 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"You are given an integer array nums. Your task is to find the length of the longest strictly increasing subsequence in the array. A subsequence is defined as a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. Write a function `length_of_LIS` to achieve the desired functionality. Input: - The first line of input contains an integer T (1 ≤ T ≤ 100), the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of elements in the array nums. - The second line contains n space-separated integers representing the array nums. Output: - For each test case, output a single line containing the length of the longest strictly increasing subsequence. Example: Input: 3 8 10 9 2 5 3 7 101 18 6 0 1 0 3 2 3 7 7 7 7 7 7 7 7 Output: 4 4 1 Hints: - Consider using Dynamic Programming to solve this problem efficiently. - An additional method can be using Binary Search for optimizing the solution further.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in the array nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(T, test_cases): results = [] for i in range(T): n, nums = test_cases[i] result = length_of_LIS(nums) results.append(result) return results"},{"question":"You are given a string S of length N consisting of lowercase English letters. You need to find and print the length of the longest substring of S in which no character appears more than twice consecutively. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the string S. - The second line of each test case contains the string S — consisting of N lowercase English letters. ------ Output Format ------ For each test case, output the length of the longest substring in which no character appears more than twice consecutively. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 2 cdot 10^{5} - The sum of N over all test cases does not exceed 2 cdot 10^{5} ----- Sample Input 1 ------ 3 10 aaabbccccd 5 abcde 7 aabbcccb ----- Sample Output 1 ------ 7 5 7 ----- explanation 1 ------ Test case 1: The longest valid substring is \\"aabbccd\\". Removing the third \'c\' and the \'d\' at the end gives all characters appearing no more than twice consecutively, and the length of this substring is 7. Test case 2: The entire string \\"abcde\\" is valid since no character appears more than twice consecutively. The length is 5. Test case 3: The entire string \\"aabbcccb\\" is valid since no character appears more than twice consecutively. The length is 7.","solution":"def longest_valid_substring_length(S): Returns the length of the longest substring in which no character appears more than twice consecutively. max_len = 0 current_len = 0 count = 0 previous_char = \'\' for char in S: if char == previous_char: count += 1 if count <= 2: current_len += 1 else: count = 1 current_len += 1 previous_char = char max_len = max(max_len, current_len) return max_len def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] results.append(longest_valid_substring_length(S)) return results"},{"question":"You are planning to transform a string using a set of given operations. The allowed operations are: 1. Insert any character at any position in the string. 2. Remove any character from any position in the string. 3. Replace any character with another character. You need to determine the minimum number of operations required to transform a given string S1 into another string S2. This is a common problem known as the \\"edit distance\\" or \\"Levenshtein distance\\" problem. # Input The input consists of multiple test cases. Each test case is provided in two lines: 1. S1 2. S2 Both S1 and S2 are non-empty strings of lowercase alphabets (a-z). The length of S1 and S2 does not exceed 1000 characters. The end of input is identified by a line containing two zeros. This line should not be processed. # Output For each test case, output a line containing a single integer representing the minimum number of operations required to transform S1 into S2. # Example Input abc yabd kitten sitting intention execution 0 0 Output 2 3 5 # Explanation For the first test case: - Transform \\"abc\\" to \\"yabc\\" (Insert \'y\') - Transform \\"yabc\\" to \\"yabd\\" (Replace \'c\' with \'d\') For the second test case: - Transform \\"kitten\\" to \\"sitten\\" (Replace \'k\' with \'s\') - Transform \\"sitten\\" to \\"sittin\\" (Replace \'e\' with \'i\') - Transform \\"sittin\\" to \\"sitting\\" (Insert \'g\') For the third test case: - Transform \\"intention\\" to \\"inention\\" (Remove \'t\') - Transform \\"inention\\" to \\"enention\\" (Replace \'i\' with \'e\') - Transform \\"enention\\" to \\"exention\\" (Replace \'n\' with \'x\') - Transform \\"exention\\" to \\"exection\\" (Replace \'n\' with \'c\') - Transform \\"exection\\" to \\"execution\\" (Insert \'u\') Your task is to implement a program that calculates and outputs the minimum number of operations for each test case.","solution":"def edit_distance(S1, S2): Calculates the minimum edit distance between two strings S1 and S2. m, n = len(S1), len(S2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If S1 is empty, insert all characters of S2 elif j == 0: dp[i][j] = i # If S2 is empty, remove all characters of S1 elif S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are the same, ignore last char else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_input(input_data): Processes the given input data and outputs the minimum edit distances sequentially. lines = input_data.strip().split(\'n\') results = [] for i in range(0, len(lines) - 1, 2): S1 = lines[i] S2 = lines[i + 1] if S1 == \'0\' and S2 == \'0\': break results.append(edit_distance(S1, S2)) return results"},{"question":"Given an integer array `arr` of length `N` (1 ≤ N ≤ 10^5), an inversion pair is a pair of indices `(i, j)` such that `i < j` and `arr[i] > arr[j]`. Your task is to find the number of inversion pairs in the array. An efficient solution is required to handle the upper constraints. Input: The first line of the input contains an integer `N`, indicating the size of the array. The second line contains `N` integers separated by space, representing the array elements. Output: Output a single integer representing the number of inversion pairs in the array. SAMPLE INPUT 5 2 4 1 3 5 SAMPLE OUTPUT 3 Explanation The inversion pairs for the given array are (2, 1), (4, 1), and (4, 3). Thus, there are 3 inversion pairs in total.","solution":"def count_inversions(arr): Returns the count of inversion pairs in the array. An inversion pair is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. def merge_sort_and_count(arr, temp_arr, left, right): Helper function to perform merge sort and count inversions. if left >= right: return 0 mid = (left + right) // 2 inv_count = 0 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def merge_and_count(arr, temp_arr, left, mid, right): Helper function to merge two halves and count inversions. i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index for sorted subarray inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) # Increment count of inversions j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count n = len(arr) temp_arr = [0] * n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"Given a list of integers where every element appears twice except for one, find the element that appears only once in linear time complexity without using extra memory. Example 1: Input: nums = [2, 2, 3, 4, 4, 5, 5] Output: 3 Example 2: Input: nums = [1, 1, 2, 2, 3, 3, 4] Output: 4 Example 3: Input: nums = [0, 1, 0, 1, 99] Output: 99 Your Task: You don\'t need to read input or print anything. Complete the function singleNumber() which takes the list of integers as input and returns the element that appears only once. Expected Time Complexity: O(N), where N is the number of elements in the list. Expected Space Complexity: O(1) Constraints: 1 ≤ N ≤ 10^6 N is always an odd number. -3 * 10^4 ≤ nums[i] ≤ 3 * 10^4","solution":"def singleNumber(nums): Returns the single number in the list where every element appears twice except for one. Uses XOR to achieve O(N) time complexity and O(1) space complexity. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"To participate in a marathon in the city, one must be at least 18 years old. Given your age A, determine if you can participate in the marathon or not. If you are eligible to participate, print texttt{YES}; otherwise, print texttt{NO}. ------ Input Format ------ The first and only line of input contains a single integer A, your age. ------ Output Format ------ Print texttt{YES} if you can participate in the marathon. Otherwise, print texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 0 ≤ A ≤ 100 ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 20 ----- Sample Output 1 ------ YES ----- explanation 1 ------ Since 20 ≥ 18, you are eligible to participate in the marathon. ----- Sample Input 2 ------ 16 ----- Sample Output 2 ------ NO ----- explanation 2 ------ Since 16 < 18, you are not eligible to participate in the marathon.","solution":"def can_participate_in_marathon(age): Determines if a person can participate in the marathon based on their age. Parameters: age (int): The age of the person. Returns: str: \'YES\' if the person can participate, \'NO\' otherwise. if age >= 18: return \'YES\' else: return \'NO\'"},{"question":"You are given a string consisting of lowercase English letters and an integer k. Rotate the string to the right by k positions. Input The first line contains a string s (1 ≤ s.length ≤ 106) consisting of lowercase English letters. The second line contains an integer k (1 ≤ k ≤ 106). Output Print the rotated string. Examples Input abcdef 2 Output efabcd Input hello 3 Output llohe Note In the first example, rotating the string \\"abcdef\\" by 2 positions to the right results in \\"efabcd\\". In the second example, rotating the string \\"hello\\" by 3 positions to the right results in \\"llohe\\".","solution":"def rotate_string(s, k): Rotates the string `s` to the right by `k` positions. Parameters: s (str): the input string k (int): the number of positions to rotate Returns: str: the rotated string n = len(s) k = k % n # handling the case where k might be greater than the length of the string return s[-k:] + s[:-k]"},{"question":"You are given an encoded string, and you are to determine the total number of ways to decode it. The encoding rules are as follows: 1. \'A\' -> 1 2. \'B\' -> 2 ... 26. \'Z\' -> 26 You need to return the number of ways to decode the entire string. Example: Input: \\"226\\" Output: 3 Explanation: It can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), and \\"BBF\\" (2 2 6). Note: - The input string will only contain digits and its length will be in the range [1, 1000]. - The input may contain leading zeros, given the string is valid per decoding rules. Example: Input: \\"06\\" Output: 0 Explanation: No valid decoding exists as the string starts with zero. Implement the function `numDecodings(s: str) -> int` to solve the problem.","solution":"def numDecodings(s: str) -> int: Returns the number of ways to decode the given string. :param s: String containing the encoded message :return: Total number of ways to decode the string if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): if 1 <= int(s[i - 1:i]) <= 9: dp[i] += dp[i - 1] if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2] return dp[-1]"},{"question":"A game development company is implementing a ranking system for their new game. Players earn a score after each game they play, and the system needs to keep track of the top k highest scores achieved by players. The scores should be displayed in descending order. If there are fewer than k scores, display all scores in descending order. The task is to design a function that updates the list of top k scores whenever a new score is received. Input The first line contains two integers n (1 ≤ n ≤ 10^5) — the number of scores received, and k (1 ≤ k ≤ 10^5) — the number of top scores to keep track of. The next n lines contain one integer each, representing a player\'s score (0 ≤ score ≤ 10^9). Output Print the top k scores in descending order after all n scores have been processed. Example Input 8 3 100 200 50 300 400 150 250 350 Output 400 350 300 Input 5 5 90 85 100 95 80 Output 100 95 90 85 80 Note In the first example, the company\'s system should track the highest 3 scores. After all scores are processed, the top 3 scores are 400, 350, and 300. In the second example, since the company wants to track the highest 5 scores and exactly 5 scores are given, all scores are displayed in descending order: 100, 95, 90, 85, and 80.","solution":"import heapq def top_k_scores(n, k, scores): # Create a min-heap to keep track of the top k scores top_k_heap = [] for score in scores: if len(top_k_heap) < k: heapq.heappush(top_k_heap, score) else: heapq.heappushpop(top_k_heap, score) # Convert the heap into a sorted list in descending order top_k_list = sorted(top_k_heap, reverse=True) return top_k_list"},{"question":"There are N rooms arranged in a straight line, and each room can have 0 or more gold coins. Each day, Chef can walk either to the next room on the right or stay in the current room. However, Chef can only stay in the same room for at most X consecutive days before he must move to the next room. Chef starts in the first room and wants to collect the maximum number of gold coins by the time he reaches the last room. Determine the maximum number of gold coins Chef can collect and the sequence of rooms he should visit. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two space-separated integers N and X, denoting the number of rooms and the maximum consecutive days Chef can stay in the same room. - The second line contains N space-separated integers C_1, C_2, ..., C_N, where C_i represents the number of gold coins in the i-th room. ------ Output Format ------ For each test case, output a single integer – the maximum number of gold coins Chef can collect, followed by the sequence of room indices Chef should visit (1-based index). ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 10^4 0 ≤ C_i ≤ 10^6 1 ≤ X ≤ 100 ----- Sample Input 1 ------ 2 5 2 0 2 4 1 3 4 1 3 2 5 6 ----- Sample Output 1 ------ 10 1 2 3 4 5 16 1 2 3 4 ----- Explanation 1 ------ Test Case 1: Chef should move to the second room on day 1, stay in the second room on day 2, move to the third room on day 3 and day 4, then move through the rooms until he reaches the last room, collecting a total of 10 coins. Test Case 2: Chef should move to each room daily, collecting a total of 16 coins.","solution":"def max_gold_collect(T, test_cases): results = [] for i in range(T): N, X = test_cases[i][0] coins = test_cases[i][1] dp = [[-1] * (X + 1) for _ in range(N)] dp[0][0] = coins[0] for room in range(1, N): for stay in range(X + 1): max_prev = 0 if stay > 0: max_prev = max(dp[room][stay - 1], dp[room - 1][stay - 1]) else: max_prev = max(dp[room - 1]) dp[room][stay] = max_prev + (coins[room] if stay == 0 else 0) max_coins = max(dp[N - 1]) path = [] current_room = N - 1 max_stay = dp[N - 1].index(max_coins) while current_room >= 0: path.append(current_room + 1) if max_stay == 0: current_room -= 1 while current_room >= 0 and max(dp[current_room]) != dp[current_room + 1][0] - coins[current_room + 1]: current_room -= 1 if current_room >= 0: max_stay = dp[current_room].index(max(dp[current_room])) else: max_stay -= 1 current_room -= 1 results.append((max_coins, list(reversed(path)))) return results"},{"question":"How Many Ways? You are given an integer n. Your task is to calculate how many ways you can express the number n as a sum of two or more consecutive positive integers. Input The first line of input is an integer T (1 ≤ T ≤ 1000) that specifies the number of test cases. Each of the following T lines contains a single integer n (1 ≤ n ≤ 10^9). Output For each test case, generate a line containing the number of ways to express n as a sum of two or more consecutive positive integers. SAMPLE INPUT 3 9 15 41 SAMPLE OUTPUT 2 3 1 Explanation For the first test case (n = 9), there are two ways to express 9 as a sum of two or more consecutive positive integers: - 2 + 3 + 4 = 9 - 4 + 5 = 9 For the second test case (n = 15), there are three ways to express 15 as a sum of two or more consecutive positive integers: - 1 + 2 + 3 + 4 + 5 = 15 - 4 + 5 + 6 = 15 - 7 + 8 = 15 For the third test case (n = 41), there is only one way to express 41 as a sum of two or more consecutive positive integers: - 20 + 21 = 41","solution":"def count_consecutive_sum_ways(n): Returns the number of ways to express n as a sum of two or more consecutive positive integers. count = 0 m = 1 while m * (m + 1) // 2 < n: if (n - (m * (m + 1)) // 2) % (m + 1) == 0: count += 1 m += 1 return count def process_input(T, cases): Processes T test cases results = [] for n in cases: results.append(count_consecutive_sum_ways(n)) return results"},{"question":"Given two strings, S1 and S2, find if S1 can be transformed into S2 by rotating it exactly one place either to the left or to the right. Return 1 if it can be transformed, otherwise return 0. **Note**: Rotation to the left of a string \\"abcdef\\" results in \\"bcdefa\\". Rotation to the right of the same string results in \\"fabcde\\". **Examples**: **Example 1:** ``` Input: S1 = \\"abcdef\\" S2 = \\"bcdefa\\" Output: 1 Explanation: S1 can be rotated to the left one place to get S2. ``` **Example 2:** ``` Input: S1 = \\"abcdef\\" S2 = \\"fabcde\\" Output: 1 Explanation: S1 can be rotated to the right one place to get S2. ``` **Example 3:** ``` Input: S1 = \\"abcdef\\" S2 = \\"abcedf\\" Output: 0 Explanation: S1 cannot be transformed to S2 by a single left or right rotation. ``` **Your Task**: You don\'t need to read input or print anything. Your task is to complete the function `canBeTransformed()` which takes two strings S1 and S2 as input and returns 1 if S1 can be transformed to S2 by one rotation, otherwise returns 0. **Expected Time Complexity**: O(n) **Expected Auxiliary Space**: O(1) **Constraints**: - 1 <= len(S1), len(S2) <= 100 - S1 and S2 consist of only lowercase English letters.","solution":"def canBeTransformed(S1, S2): Checks if S1 can be transformed into S2 by rotating it exactly one place either to the left or to the right. if len(S1) != len(S2): return 0 # Left rotation: Move first character to end left_rotated = S1[1:] + S1[0] # Right rotation: Move last character to start right_rotated = S1[-1] + S1[:-1] if S2 == left_rotated or S2 == right_rotated: return 1 else: return 0"},{"question":"Dark is fascinated by sequences and patterns. He recently came across Fibonacci numbers and wants to explore more. Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. It starts with 0 and 1, and the first few numbers in the sequence are: 0, 1, 1, 2, 3, 5, 8, 13, ... However, Dark has a twist. He is interested in finding the sum of all Fibonacci numbers up to the N-th Fibonacci number (including the N-th Fibonacci number), for multiple test cases. Input The first line contains T, the number of test cases. Followed by T lines each containing a single integer N. Output For every test case print the sum of all Fibonacci numbers up to the N-th Fibonacci number, including it. Separate the answers for each test case by an empty line. Constraints 1 ≤ T ≤ 10000 1 ≤ N ≤ 50 Author: Darshak Mehta SAMPLE INPUT 3 5 7 10 SAMPLE OUTPUT 12 33 143 Explanation Test Case 1: Fibonacci sequence up to 5th number: 0, 1, 1, 2, 3, 5 Sum = 0 + 1 + 1 + 2 + 3 + 5 = 12 So, output is 12 Test Case 2: Fibonacci sequence up to 7th number: 0, 1, 1, 2, 3, 5, 8, 13 Sum = 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 = 33 So, output is 33 Test Case 3: Fibonacci sequence up to 10th number: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 Sum = 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 = 143 So, output is 143","solution":"def fibonacci_sum_upto_n(n): Returns the sum of all Fibonacci numbers up to the N-th Fibonacci number, including it. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 total_sum = a + b for _ in range(2, n + 1): a, b = b, a + b total_sum += b return total_sum def process_test_cases(t, cases): results = [] for n in cases: results.append(fibonacci_sum_upto_n(n)) return results # Example usage: # t = 3 # cases = [5, 7, 10] # output = process_test_cases(t, cases) # print(output)"},{"question":"In a forest, there are multiple trees represented as an undirected graph where each node is a vertex and each edge connects two vertices. Each vertex has an integer value associated with it, and each edge has an integer weight. The forest is initially fragmented and can be connected into a single tree by adding some edges. Your task is to find a way to add the minimum number of edges to form a single connected tree, such that the sum of the vertex values in this tree is maximized. Each of these added edges can only connect vertices that are initially disconnected. **Constraints:** - 1 ≤ n ≤ 1000 — the number of vertices. - 1 ≤ m ≤ 10000 — the number of edges. - 1 ≤ value[v] ≤ 1000 — the value associated with vertex v. - 0 ≤ weight[e] ≤ 1000 — the weight of each edge. **Input Format:** - The first line contains an integer n — the number of vertices in the forest. - The second line contains n integers, where the i-th integer is the value associated with vertex i. - The next m lines contain three integers u, v, and w each, describing an edge between vertices u and v with weight w. **Output Format:** - Print a single integer — the maximum sum of the vertex values in the resulting tree after adding the minimum number of edges. **Example:** ``` Input 4 1 2 3 4 3 1 2 1 2 3 2 3 4 1 Output 10 Input 5 5 3 6 1 4 4 1 2 3 2 3 2 4 5 1 3 4 5 Output 19 ``` **Explanation:** In the first example, we must add one edge to connect all vertices. Adding either edge (1-2) or (3-4) gives us a connected tree with vertex values 1 + 2 + 3 + 4 = 10. In the second example, we can add edges (1-2), (2-3), and (3-4) to connect all vertices with the maximum sum of vertex values 5+3+6+1+4=19.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximum_tree_value(n, values, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) # Kruskal\'s algorithm to connect the forest with the minimum number of edges edges.sort(key=lambda x: x[2]) mst_weight = 0 edge_count = 0 for edge in edges: u, v, w = edge uset = find(parent, u-1) vset = find(parent, v-1) if uset != vset: edge_count += 1 mst_weight += w union(parent, rank, uset, vset) # Calculate the sum of vertex values final_values = sum(values) return final_values # Example usage: if __name__ == \\"__main__\\": n = 4 values = [1, 2, 3, 4] edges = [ (1, 2, 1), (2, 3, 2), (3, 4, 1) ] print(maximum_tree_value(n, values, edges)) # Should output 10"},{"question":"A company is organizing a coding competition and has a scoreboard that needs to be updated frequently. Each participant in the competition can submit multiple solutions, and their score is determined by their highest scoring submission. Given a series of submissions, each consisting of a participant identifier and a score, you need to process the submissions and determine the highest score for each participant. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of submissions. The next N lines each contain a string identifier and an integer score separated by a space. ------ Output ------ For each test case, output the highest score for each participant in the format shown below. The output for each test case should be separated by an empty line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ score ≤ 10^9 The identifier is a non-empty string containing alphanumeric characters and is at most 20 characters long. ------ Example Input ------ 2 3 alice 50 bob 60 alice 70 4 eve 30 bob 50 alice 60 eve 40 ------ Example Output ------ alice 70 bob 60 bob 50 alice 60 eve 40","solution":"def process_submissions(test_cases): results = [] for submissions in test_cases: scores = {} for identifier, score in submissions: if identifier not in scores or score > scores[identifier]: scores[identifier] = score results.append(scores) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 submissions = [] for _ in range(N): identifier, score = input_lines[index].split() submissions.append((identifier, int(score))) index += 1 test_cases.append(submissions) return test_cases def format_output(result): output_lines = [] for scores in result: for identifier in sorted(scores): output_lines.append(f\\"{identifier} {scores[identifier]}\\") output_lines.append(\\"\\") # To add a blank line between the test cases return \\"n\\".join(output_lines).strip()"},{"question":"You are given an array of integers, and your task is to find all unique pairs of numbers that sum up to a given target value. A pair is considered unique if no element from the pair repeats in any other pair for that specific target sum calculation. Input The first line contains two integers N (1 ≤ N ≤ 100 000) and T (1 ≤ T ≤ 100 000), representing the length of the input array and the target sum, respectively. The second line contains N integers, each ranging between -100 000 and 100 000, which are the elements of the input array. Output Output the number of unique pairs that sum up to the target value. Examples Input 5 6 1 5 7 -1 5 Output 2 Input 6 10 2 4 6 8 10 12 Output 2 Note The first example: 1 + 5 → 6 -1 + 7 → 6 The second example: 2 + 8 → 10 4 + 6 → 10","solution":"def find_unique_pairs(arr, target): Returns the number of unique pairs in the array that sum up to the target value. seen = set() pair_set = set() for number in arr: complement = target - number if complement in seen: pair = tuple(sorted((number, complement))) pair_set.add(pair) seen.add(number) return len(pair_set)"},{"question":"During a recent cyber-crisis simulation, a software security team developed a new encryption algorithm to secure communication between agents in the field. They created a scheme where each message was represented as a base-N number, where N is between 2 and 16. To ensure robustness of the encryption, the team decided to introduce an additional step: checking if the encrypted message is a palindrome in its base-N representation. Your task is to write a program that checks if a given base-N number is a palindrome. # Input: - The first line contains an integer N (2 ≤ N ≤ 16). - The second line contains a string representing the number in base-N notation. Valid digits range from \'0\' to \'9\' and \'A\' to \'F\', where \'A\' represents 10, \'B\' represents 11, and so on up to \'F\' representing 15. # Output: - Output \\"Yes\\" if the number is a palindrome in its base-N representation, otherwise \\"No\\". # Examples: **Example 1:** ``` Input: 2 101 Output: Yes ``` **Example 2:** ``` Input: 16 1A3C3A1 Output: Yes ``` **Example 3:** ``` Input: 8 1234 Output: No ``` # Explanation: In Example 1, the number `101` in base `2` is a palindrome because it reads the same forwards and backwards.","solution":"def is_palindrome_base_n(N, number): Checks if a given number in base-N representation is a palindrome. Args: N (int): The base of the number system (between 2 and 16). number (str): The number in base-N notation. Returns: str: \\"Yes\\" if the number is a palindrome, otherwise \\"No\\". # The function assumes `number` is already in the correct base-N format # Check if the `number` reads the same forwards and backwards if number == number[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"Hostel Y has n rooms arranged in a straight line, with each room having a specific temperature. You are responsible for maintaining the temperature inside each room. The hostel administration has decided to use exactly one air conditioning unit to control the temperatures of the rooms. This air conditioning unit affects all rooms within a distance of k rooms to its left and right (inclusive). The temperature of an affected room will be set to the temperature of the room where the AC unit is installed, regardless of its initial temperature. Your task is to determine the maximum number of rooms that can have their temperatures set to the same value if you strategically install the AC unit in the optimal room. Input The first line contains two integers n and k (1 ≤ n ≤ 2·105, 0 ≤ k ≤ n-1) — the number of rooms and the range of influence of the air conditioning unit. The second line contains n positive integers t1, t2, ..., tn (1 ≤ ti ≤ 109) representing the initial temperatures of the rooms. Output Print a single integer — the maximum number of rooms that can have their temperatures set to the same value by installing the AC unit in the optimal room. Examples Input 7 2 1 2 2 5 5 3 4 Output 5 Input 5 1 10 1 10 1 10 Output 3 Note In the first sample, installing the AC unit in room 4 will affect rooms 2 to 6, resulting in their temperatures being set to 5. Therefore, the maximum number of rooms with the same temperature will be 5. In the second sample, installing the AC unit in either room 1, 3, or 5 will result in 3 rooms having the same temperature, which is the maximum possible.","solution":"def max_same_temperature_rooms(n, k, temperatures): Determines the maximum number of rooms that can have their temperatures set to the same value by strategically installing the AC unit in the optimal room. :param n: int, number of rooms :param k: int, range of influence of the AC unit :param temperatures: List[int], initial temperatures of the rooms :return: int, the maximum number of rooms with the same temperature max_rooms = 0 for i in range(n): left = max(0, i - k) right = min(n - 1, i + k) max_rooms = max(max_rooms, right - left + 1) return max_rooms"},{"question":"Write a function that, given an array of integers, finds the minimum subarray sum of all contiguous subarrays of the given array. A contiguous subarray is defined as a subset of elements from the original array that are adjacent and retain their order. # Function Signature `def min_subarray_sum(arr: List[int]) -> int:` # Input - `arr`: List of integers representing the array of size n. Assuming the size of the array (`n`) ranges from `1` to `10^5` and the elements may vary from `-10^4` to `10^4`. # Output - Returns an integer representing the minimum sum of any contiguous subarray within the given array. # Example Input: arr = [2, -4, 6, -3, 9, -5, 2] Output: -5 Explanation: The contiguous subarray [-5] has the minimum sum, which is -5. # Note - For the purpose of this problem, a subarray can consist of only one element. - Use efficient algorithms to ensure the solution runs within permissible limits given the constraints. For example, a brute force approach might not be the best approach due to the size of the input. # Constraints: - (1 leq n leq 10^5) - (-10^4 leq text{arr}[i] leq 10^4)","solution":"from typing import List def min_subarray_sum(arr: List[int]) -> int: Finds the minimum subarray sum of all contiguous subarrays of the given array. :param arr: List of integers representing the array :return: Integer representing the minimum sum of any contiguous subarray within the given array # Initialize the minimum sum and the current sum min_sum = current_sum = arr[0] for num in arr[1:]: # Update the current sum to be either the current number itself or the sum of the current sum with the number current_sum = min(num, current_sum + num) # Update the minimum sum encountered so far min_sum = min(min_sum, current_sum) return min_sum"},{"question":"Given a list of non-negative integers, we define a \\"peak\\" as an element which is not smaller than its neighbours. For the elements at the boundary of the list, we consider only the one neighbour that exists. Specifically: - An element at index `i` in the list is considered a peak if: - It is greater than or equal to its left neighbour (if there is one). - It is greater than or equal to its right neighbour (if there is one). Your task is to find the first peak in the list. If no peaks are found, your function should return -1. Input: The first line of the input contains an integer `T` denoting the number of test cases. Each of the next `T` lines contains a comma-separated list of non-negative integers. Output: For each test case, output the index of the first peak found. If no peaks are found in a test case, return -1 for that test case. Constraints: 1 ≤ T ≤ 100 1 ≤ length of the list ≤ 10^5 0 ≤ each integer in the list ≤ 10^9 Note that each test case is independent of others. SAMPLE INPUT 3 1,3,1,2,1 1,2,3,4,5 5,1,2,3,4,0,1 SAMPLE OUTPUT 1 4 0 Explanation In the first test case, `1,3,1,2,1`, the first peak is at index 1 (the element is 3). In the second test case, `1,2,3,4,5`, the element 5 is the peak found at index 4. In the third test case, `5,1,2,3,4,0,1`, the element 5 is the peak found at index 0.","solution":"def find_first_peak(arr): Finds the index of the first peak in the given list. A peak is defined as an element which is not smaller than its neighbours. n = len(arr) if n == 0: return -1 if n == 1: return 0 for i in range(n): if (i == 0 and arr[i] >= arr[i + 1]) or (i == n - 1 and arr[i] >= arr[i - 1]) or (0 < i < n - 1 and arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]): return i return -1 def process_test_cases(T, test_cases): Processes T test cases and returns the index of the first peak for each test case. results = [] for case in test_cases: arr = list(map(int, case.split(\',\'))) results.append(find_first_peak(arr)) return results"},{"question":"Implement a function called `stringReverser` that reverses each word in a given string while maintaining its original word order. Ensure that the input string contains only lowercase letters and spaces. You can assume there are no leading or trailing spaces, and each word is separated by a single space. If the value passed in is not a string or is an empty string, return `\\"Not a valid string\\"`. **EXAMPLES:** ``` \'hello world\' -> \'olleh dlrow\' \'string reverser\' -> \'gnirts resrever\' \' \' -> \' \' 42 -> \'Not a valid string\' [] -> \'Not a valid string\' ```","solution":"def stringReverser(s): Reverses each word in a given string s while maintaining the original word order. Arguments: s : str : input string containing only lowercase letters and spaces Returns: str : a new string with each word reversed while maintaining the original word order or \'Not a valid string\' if the input s is not a valid string. if not isinstance(s, str) or len(s) == 0: return \\"Not a valid string\\" return \' \'.join(word[::-1] for word in s.split())"},{"question":"Design a **library management system** for your local library. Your program should keep track of books and their availability. The library contains a set of books, and patrons can borrow or return books. Each book is identified by a unique ID and title. The actions to be tracked include: adding a new book to the library, borrowing a book, returning a book, and checking the availability of a book. Your task is to implement these functionalities and ensure that no book is borrowed more than once simultaneously and is marked as available upon return. Additionally, the program should generate a report listing the IDs and titles of all books that are currently available in the library. -----Input----- The input starts with an integer 1 leq N leq 1000 representing the number of actions to be processed. Each of the next N lines contains an action in one of the following formats: 1. `add <ID> <Title>`: Add a new book with the given ID and title to the library. 2. `borrow <ID>`: Borrow the book with the given ID. 3. `return <ID>`: Return the book with the given ID. 4. `report`: Generate and output the report of currently available books in the library. - `<ID>` is an integer between 1 and 10000. - `<Title>` is a string (containing only lowercase letters and spaces) with at most 50 characters. Assume all IDs used in the `add` action are unique. The `borrow` and `return` actions will always reference an existing book ID. -----Output----- For the `report` action, output the list of available books in the format \\"<ID> <Title>\\" sorted by ID. If no books are available, output \\"No books available\\". -----Examples----- Sample Input 1: 7 add 1 the_great_gatsby add 2 war_and_peace borrow 1 report borrow 2 return 1 report Sample Output 1: 2 war_and_peace 1 the_great_gatsby Sample Input 2: 5 add 1 moby_dick borrow 1 report return 1 report Sample Output 2: No books available 1 moby_dick","solution":"class LibraryManagementSystem: def __init__(self): self.books = {} # Dictionary to store books with ID as key and title as value self.borrowed = set() # Set to store borrowed book IDs def add(self, book_id, title): Adds a new book to the library. if book_id not in self.books: self.books[book_id] = title def borrow(self, book_id): Borrows a book from the library. if book_id in self.books and book_id not in self.borrowed: self.borrowed.add(book_id) def return_book(self, book_id): Returns a borrowed book to the library. if book_id in self.borrowed: self.borrowed.remove(book_id) def report(self): Generates a report of available books. available_books = [(book_id, self.books[book_id]) for book_id in self.books if book_id not in self.borrowed] available_books.sort() if not available_books: return \\"No books available\\" return \\"n\\".join([f\\"{book_id} {title}\\" for book_id, title in available_books])"},{"question":"— It\'s Cherry Blossom season, and Hana and Yuki are out to enjoy the splendid sight. They have decided to visit different parks in their city, identified by the parks\' unique coordinates on a 2D-grid. They want to start their day at one park and hop from one to another along the shortest distance possible. However, to make it a bit more challenging, they want to strictly limit their movement in the North-East direction only. That is, for any two parks (x1, y1) and (x2, y2), they can only move from (x1, y1) to (x2, y2) if and only if x2-x1 = 1 and y2-y1 = 1. Given the coordinates of all the parks, your task is to determine the maximum number of parks they can visit in one single journey under these restrictions. Your output should be an integer, representing the maximum number of parks they can visit. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of parks. The next n lines each contain two space-separated integers xi and yi (0 ≤ xi, yi ≤ 1000), representing the coordinates of each park. -----Output----- Output one line containing an integer — the maximum number of parks they can visit. -----Examples----- Input 5 1 2 2 3 3 4 1 3 2 4 Output 3 Input 6 0 0 1 1 2 2 1 0 0 1 1 2 Output 3 -----Note----- In the first example, the longest path that keeps moving North-East is: (1,2) -> (2,3) -> (3,4), visiting 3 parks in total.","solution":"def max_parks(n, coordinates): coordinates = set(map(tuple, coordinates)) max_count = 0 for x, y in coordinates: count = 1 current_x, current_y = x, y while (current_x + 1, current_y + 1) in coordinates: count += 1 current_x, current_y = current_x + 1, current_y + 1 max_count = max(max_count, count) return max_count"},{"question":"Given a list of unique integers, your goal is to find the only missing number between the smallest and largest number in the list. The list will always be missing exactly one number in the range. For instance, consider the list [3, 7, 1, 2, 8, 4, 5]. Here, the smallest number is 1 and the largest is 8. The full list of numbers should be [1, 2, 3, 4, 5, 6, 7, 8], and the missing number is 6. Write a function that takes a list of unique integers and returns the missing number. Example 1: Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 Example 2: Input: [10, 12, 14, 13] Output: 11 Function signature: ```python def find_missing_number(nums: List[int]) -> int: ``` Note: - The integers will be in the range [-10^6, 10^6]. - The length of the list will be at least 2 and at most 10^6.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Given a list of unique integers, find the only missing number between the smallest and largest number in the list. :param nums: List of unique integers :return: The missing number # Calculate the expected sum of the range from min(nums) to max(nums) full_sum = sum(range(min(nums), max(nums) + 1)) # Calculate the actual sum of the elements in nums actual_sum = sum(nums) # The missing number is the difference between the full_sum and actual_sum return full_sum - actual_sum"},{"question":"Leo is designing a queuing system for an amusement park ride. Each ride has a maximum allowable weight that it can safely operate under. The total weight of the people on the ride at any time should not exceed this limit. Given a list of people waiting in the queue and their respective weights, can you help Leo determine the maximum number of people he can safely fit on the ride at any given time without exceeding the weight limit? -----Input----- The input consists of: - one line with two integers n (1 leq n leq 100000), the number of people in the queue, and W (1 leq W leq 10^9), the maximum allowable weight the ride can support; - n lines each with one integer w_i (1 leq w_i leq 10^9), the weight of the i-th person in the queue. -----Output----- Output the maximum number of people that can be safely fitted onto the ride without exceeding the weight limit. -----Examples----- Sample Input: 5 200 50 75 90 60 85 Sample Output: 3 Sample Input: 4 100 30 40 10 20 Sample Output: 4","solution":"def max_people_on_ride(n, W, weights): Determines the maximum number of people that can fit on the ride without exceeding the weight limit. Parameters: n (int): Number of people in the queue. W (int): Maximum allowable weight. weights (list of int): Weights of people in the queue. Returns: int: Maximum number of people that can be safely fitted onto the ride. weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"Given a binary string B of length n, we define a \\"block\\" as a maximal substring of consecutive 1\'s. For example, in the string \\"110111\\", there are two blocks of 1\'s, namely \\"11\\" and \\"111\\". Define the \\"block size\\" as the length of the block. The size of the largest block in the given string is the maximum length among all blocks. You are tasked with finding the size of the largest block in the given binary string. If the string contains no \'1\'s, return 0. -----Input----- The first and only line of input contains a binary string B, where 1 leq mathrm{length}(B) leq 10^6. -----Output----- Output an integer representing the size of the largest block in the given binary string. -----Examples----- Sample Input 1: 110111 Sample Output 1: 3 Sample Input 2: 0000 Sample Output 2: 0","solution":"def largest_block_size(B): Returns the size of the largest block of consecutive 1\'s in the given binary string B. If there are no 1\'s in the string, return 0. max_block_size = 0 current_block_size = 0 for char in B: if char == \'1\': current_block_size += 1 max_block_size = max(max_block_size, current_block_size) else: current_block_size = 0 return max_block_size"},{"question":"You are tasked with creating an application that helps a user organize their book collection. Each book in the collection has a title and a reading level. For simplicity, the reading level is represented as an integer. The user would like to query the collection to find out the number of books within a certain range of reading levels. You need to write a program that takes in the list of books and responds to several range queries. Each query asks for the count of books whose reading levels fall between a specified lower and upper bound (inclusive). Input - The first line contains an integer N, the number of books. - The following N lines each contain a string, the title of the book, and an integer, the reading level of the book. - After that, there is an integer Q, the number of queries. - The next Q lines each contain two integers, lower and upper, which define the range of reading levels for the query. Output - For each query, output the number of books whose reading levels fall within the specified range. Constraints - 1 ≤ N ≤ 10^5 - 0 ≤ Reading Level ≤ 10^4 - 1 ≤ Q ≤ 10^5 - 0 ≤ lower ≤ upper ≤ 10^4 SAMPLE INPUT 5 \\"Harry Potter\\" 5 \\"The Hobbit\\" 8 \\"1984\\" 10 \\"Pride and Prejudice\\" 6 \\"To Kill a Mockingbird\\" 7 3 5 7 1 5 7 10 SAMPLE OUTPUT 3 1 3 Note: For better performance, consider using efficient data structures and algorithms to handle the range queries due to the potentially large input size.","solution":"def count_books_in_range(books, queries): Counts the number of books within the specified reading levels for each query. :param books: List of tuples, each containing a title and a reading level. :param queries: List of tuples, each containing a lower and upper bound for the query. :return: List of counts of books within the specified reading level range for each query. reading_levels = [level for title, level in books] reading_levels.sort() result = [] def count_in_range(low, high): from bisect import bisect_left, bisect_right left = bisect_left(reading_levels, low) right = bisect_right(reading_levels, high) return right - left for lower, upper in queries: result.append(count_in_range(lower, upper)) return result"},{"question":"# Task You are given two strings, `str1` and `str2`, and your task is to determine whether they are anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Write a function, `are_anagrams(str1, str2)` that returns a boolean value indicating whether the given strings are anagrams. # Example For `str1 = \\"listen\\"` and `str2 = \\"silent\\"`: ``` The strings `listen` and `silent` contain the same characters with the same frequency. So the function should return True. ``` For `str1 = \\"hello\\"` and `str2 = \\"billion\\"`: ``` The strings `hello` and `billion` do not contain the same characters. So the function should return False. ``` # Input/Output - `[input]` string `str1` A non-empty string of lowercase English letters. `0 < str1.length ≤ 100` - `[input]` string `str2` A non-empty string of lowercase English letters. `0 < str2.length ≤ 100` - `[output]` a boolean Return `True` if `str1` and `str2` are anagrams, otherwise return `False`.","solution":"def are_anagrams(str1, str2): Determines if the two input strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Convert both strings to sorted lists of characters and compare return sorted(str1) == sorted(str2)"},{"question":"Given a string `s`, find and return all the permutations of the string that do not contain any repeated adjacent characters. If there are no valid permutations, return an empty list. Constraints - The length of `s` is between 1 and 10, inclusive. - `s` contains only lowercase English letters. Input A single line containing the string `s`. Output A list of strings representing all distinct valid permutations where no two adjacent characters are the same. Each permutation should be listed only once. Example Input `aab` Output `[\'aba\']` Input `abc` Output `[\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\']`","solution":"from itertools import permutations def no_adjacent_repeats(s): Returns a list of all distinct valid permutations of s where no two adjacent characters are the same. all_perms = set(permutations(s)) valid_perms = [\\"\\".join(p) for p in all_perms if all(p[i] != p[i+1] for i in range(len(p) - 1))] return valid_perms"},{"question":"Sophie wants to create a rectangular grid garden. She has a plant that requires a certain amount of sunlight every day, and for this, she wants to place mirrors on the boundary of the grid. The garden grid is represented by a matrix where each cell can have either soil (\'S\') or a mirror (\'M\'). More precisely, mirrors can only be placed on the boundary of the grid. She needs help to find out the arrangement of mirrors on the boundary such that the plant gets the maximum sunlight, which is projected by mirrors onto the garden. A sunlight ray enters the grid from the top left corner (0, 0) and moves towards the bottom right corner (n-1, m-1), bouncing off mirrors which reflect it at 90 degrees. # Input - The first line contains two integers n and m denoting the dimensions of the garden grid (1 leq n, m leq 50). - The following n lines each contain m characters representing the initial state of the garden grid (either \'S\' or \'M\'). # Output - Print a matrix of the same dimensions after placing mirrors on the boundary such that the plant receives the maximum possible sunlight. # Constraints - Mirrors can only be placed on the boundary. - The garden grid is a rectangle. - There is guaranteed to be at least one cell with soil (\'S\'). # Example Input 5 5 S S S S S S S S S S S S S S S S S S S S S S S S S Output M M M M M M S S S M M S S S M M S S S M M M M M M # Explanation - By placing mirrors on the boundary (top, bottom, left, and right sides of the grid), more sunlight can be reflected to the soil in the middle, allowing the plant to receive sufficient sunlight. In this problem, you need to place the mirrors (\'M\') on the boundary cells (if not already present) to ensure maximum sunlight reflection onto the soil cells (\'S\').","solution":"def arrange_mirrors(n, m, garden): Arrange mirrors \'M\' on the boundary of the garden matrix to maximize sunlight reflection. # Create a deep copy of the garden to modify and return modified_garden = [row[:] for row in garden] # Place mirrors on the top and bottom rows for i in range(m): modified_garden[0][i] = \'M\' modified_garden[n-1][i] = \'M\' # Place mirrors on the left and right columns for i in range(n): modified_garden[i][0] = \'M\' modified_garden[i][m-1] = \'M\' return modified_garden"},{"question":"Maya has a sequence of n integers where each integer ranges from 1 to 100. Maya can perform the following operation any number of times: choose any consecutive subsequence of the array and rotate it once to the right. She wants to know the minimum number of operations required to make the sequence sorted in non-decreasing order. Can you help Maya determine the minimum number of operations? Note: - A rotation of a subsequence [a, b, c] to the right gives [c, a, b]. -----Input----- The first line of the input contains one integer n (1 le n le 100) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 100) — the elements of the sequence. -----Output----- Print a single integer — the minimum number of operations required to sort the sequence in non-decreasing order. -----Example----- Input 5 4 3 1 2 5 Output 2 Input 4 2 4 3 1 Output 2 -----Note----- In the first example, one of the ways to sort the sequence with the minimum number of operations is: - Rotate the subsequence [3, 1] to the right to get [4, 1, 3, 2, 5] - Rotate the subsequence [1, 3, 2] to the right to get [4, 2, 1, 3, 5] - Rotate the subsequence [4, 2, 1, 3, 5] to the right to get [5, 3, 4, 2, 1] - Rotate the subsequence [3, 4, 2, 1] to the right to get [5, 1, 3, 4, 2] - Rotate the subsequence [1, 3, 4] to the right to get [5, 1, 4, 3, 2] In the second example, one of the ways to sort the sequence with the minimum number of operations is: - Rotate the subsequence [4, 3] to the right to get [2, 3, 4, 1] - Rotate the subsequence [3, 4, 1] to the right to get [2, 1, 3, 4]","solution":"def min_operations_to_sort_sequence(n, sequence): sorted_sequence = sorted(sequence) longest_increasing_subsequence = 1 current_length = 1 for i in range(1, n): if sequence[i] >= sequence[i - 1]: current_length += 1 longest_increasing_subsequence = max(longest_increasing_subsequence, current_length) else: current_length = 1 return n - longest_increasing_subsequence"},{"question":"You are given an array of integers with length up to 10^5. Your task is to sort the array in such a way that all even numbers come before all odd numbers. The relative order of the even and odd numbers should remain the same. Write a program that sorts the array as described above. -----Input----- An integer n (1 ≤ n ≤ 10^5) followed by an array of n integers (each integer is from -10^9 to 10^9). -----Output----- Print the array after sorting it such that all even numbers come before all odd numbers while maintaining their relative order. -----Examples----- Input 5 3 1 2 4 5 Output 2 4 3 1 5 Input 4 3 5 7 9 Output 3 5 7 9","solution":"def sort_array_even_before_odd(arr): Sorts the array so that all even numbers come before all odd numbers while maintaining their relative order. Parameters: arr (list): A list of integers. Returns: list: The sorted list with all even numbers first, followed by odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"The friendly giraffe from ZooDocs came up with an interesting problem for the CodeZoo contest participants! This time the giraffe invites contestants to examine a problem on categorizing animal research articles. Let\'s lay out the problem: You have a dataset of research articles. For each article, you know its category. The category in this problem is represented by an integer ranging from 1 to 3. Each of these numbers signifies a type of article. For instance, all articles with category 2 are about carnivorous animals. You can download the dataset of research articles at the following link: http://download4.zoodocs.com/a2/G1RZ2ZWXBG5VYWAL61H76ZQM/research.zip. The archive contains three directories named \\"1\\", \\"2\\", \\"3\\". The directory named \\"1\\" contains articles categorized as 1, directory \\"2\\" contains articles categorized as 2, and directory \\"3\\" contains articles categorized as 3. Each article corresponds to exactly one file from an appropriate directory. All articles have the following format: the first line contains the article identifier, the second line contains the title of the article, and all subsequent lines contain the body of the article. The article identifier aids in organizing the problem more effectively but has no significance for the participants. You need to develop a program that determines the category for a given article. It is guaranteed that all articles provided as input to your program belong to one of the three categories outlined in the dataset. Input The first line of the input contains an integer id (0 ≤ id ≤ 106) — the article identifier. The second line contains the title of the article. The third and subsequent lines contain the body of the article. It is guaranteed that the size of any given article will not exceed 10 kilobytes. The tests for this problem are divided into 10 groups. Articles from groups 1 and 2 are part of the dataset, but their identifiers will not match those listed in the dataset. Groups 3 to 10 contain articles not present in the dataset, roughly sorted by complexity in ascending order (containing progressively more challenging documents). Output Print an integer from 1 to 3, inclusive — the category to which the given article belongs. Examples Input 13456 Understanding Habitats Forests are ecosystems that host a wide range of organisms, some of which are especially adapted to their environment. Output 1","solution":"def categorize_article(article_id, title, body): Categorize an article based on its title and body content. # Keywords related to each category category_keywords = { 1: [\\"habitat\\", \\"ecosystem\\", \\"environment\\"], 2: [\\"carnivore\\", \\"meat\\", \\"predator\\"], 3: [\\"herbivore\\", \\"plant\\", \\"vegetarian\\"] } content = f\\"{title} {body}\\".lower() category_scores = {1: 0, 2: 0, 3: 0} for category, keywords in category_keywords.items(): for keyword in keywords: if keyword in content: category_scores[category] += content.count(keyword) # Determine the category with the highest score best_category = max(category_scores, key=category_scores.get) return best_category"},{"question":"You are given a list of integers that represent votes in an election. Your task is to determine if there is a candidate who has more than half of the total votes. -----Input----- The first line contains a single integer t (1 le t le 100), the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 10^5), the number of votes. - The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 10^9), representing the votes. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output the candidate number if there is a candidate with more than half of the votes, otherwise output \\"NO\\". -----Examples----- Input: 3 5 1 2 1 1 3 4 2 3 3 3 6 4 4 4 1 1 1 Output: 1 3 NO -----Note----- In the first test case, candidate 1 has 3 out of 5 votes, which is more than half. In the second test case, candidate 3 has 3 out of 4 votes, which is more than half. In the third test case, no candidate has more than half of the 6 votes.","solution":"def majority_vote(t, cases): results = [] for n, votes in cases: vote_count = {} for vote in votes: if vote in vote_count: vote_count[vote] += 1 else: vote_count[vote] = 1 majority_threshold = n // 2 found_majority = \\"NO\\" for candidate, count in vote_count.items(): if count > majority_threshold: found_majority = candidate break results.append(found_majority) return results"},{"question":"A and B are playing a game to test their problem-solving skills. A gives B a sequence of N integers and asks B to find the longest subsequence where the sum of the elements is less than or equal to a given value S. B is confident he can solve the problem, but A wants to verify B\'s answer using a program. Write a program to help A verify B\'s answer. Input The first line of input contains two integers N (the number of elements in the sequence) and S (the maximum allowed sum). The second line contains N integers representing the sequence of integers. The third line contains one integer M — B\'s answer, the length of the longest subsequence with sum ≤ S. Output Output \\"Correct\\" if B\'s answer is correct, otherwise, output \\"Incorrect\\". Constraints 1 ≤ N ≤ 100 1 ≤ Sequence Element ≤ 100 1 ≤ S ≤ 1000 1 ≤ M ≤ N Example Input: 5 10 2 3 1 5 4 3 Output: Correct Explanation B\'s answer is correct because a subsequence like [2, 3, 1] has a sum of 6 which is ≤ 10 and is the longest such subsequence.","solution":"def verify_b_answer(n, s, sequence, m): Verifies B\'s answer by finding the longest subsequence with a sum of elements <= s and comparing it to m. Args: n (int): The number of elements in the sequence. s (int): The maximum allowed sum. sequence (list): List of integers representing the sequence. m (int): B\'s answer for the length of the longest subsequence with sum <= s. Returns: str: \\"Correct\\" if B\'s answer is correct, otherwise \\"Incorrect\\". def longest_subsequence_length(sequence, s): n = len(sequence) max_length = 0 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += sequence[end] if current_sum <= s: max_length = max(max_length, end - start + 1) else: break return max_length actual_max_length = longest_subsequence_length(sequence, s) return \\"Correct\\" if actual_max_length == m else \\"Incorrect\\""},{"question":"You are given an island map represented as a 2D grid where \'1\' represents land and \'0\' represents water. An island is a group of \'1\'s (land) connected 4-directionally (vertical or horizontal). The grid has no boundary or corner connections. Your task is to write a program that finds the size of the largest island in the grid. The size of an island is the number of \'1\'s in the connected component. The grid is defined by N lines where each line contains M characters (\'1\' or \'0\') representing the island map. Input The first input line contains two integers `N` and `M` (1 ≤ N, M ≤ 20) separated by a space which are the dimensions of the grid. The next `N` lines each contain a string of length `M` consisting of \'1\'s and \'0\'s representing the island map. Output Output a single integer representing the size of the largest island in the grid. Example 1 Input 4 5 11000 11000 00100 00011 Output 4 Example 2 Input 3 3 111 010 111 Output 7 Example 3 Input 5 5 11001 11001 00000 11110 11000 Output 6","solution":"def largest_island_size(n, m, grid): Returns the size of the largest island in the grid. def dfs(x, y): Depth-First Search to mark the visited lands and count the size. if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # Mark this land as visited size = 1 # Current land size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Problem Ada is fond of the game of hopscotch, and she wants to play it on an infinite grid. On this grid, the bottom-left square has coordinates (0, 0), the bottom-right square is (0, 1), and so on. Ada starts at square (0, 0) and wants to hop to square (M, N) in minimum steps. A hop can move Ada to a neighboring square: the left, right, top, or bottom square. However, Ada has a special rule for her hops. When hopping to a square whose sum of coordinates is an even number, she can move to any neighboring square. But when hopping to a square whose sum of coordinates is an odd number, she can only move diagonally to a neighboring square denoted by (i ± 1, j ± 1). Your task is to find the minimum number of hops Ada needs to get to square (M, N) from (0, 0). Constraints The input meets the following conditions: * 0 le M, N le 1000 Input The input is given in the following format: M N The input consists of one line giving M and N which represents the destination\'s coordinates. Output Please output the minimum number of hops Ada needs to reach the destination square from the starting square (0, 0). Examples Input 3 2 Output 3 Input 5 5 Output 5","solution":"def min_hops(M, N): Returns the minimum number of hops Ada needs to get from (0, 0) to (M, N) based on the given rules. # Base case: when M and N are both zero, no hops are needed. if M == 0 and N == 0: return 0 # Even sum rule - can hop to any neighboring square if (M + N) % 2 == 0: return max(M, N) # Odd sum rule - can only move diagonally to neighboring squares return max(M, N) # Example usage print(min_hops(3, 2)) # Output: 3 print(min_hops(5, 5)) # Output: 5"},{"question":"A company has hired you to design a function that returns the minimum number of operations needed to transform a given string `S1` into another string `S2`. The allowed operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. You need to implement the function `min_operations(S1, S2)` in Python, which takes in two input strings `S1` and `S2` and returns the minimum number of edit operations required to transform `S1` into `S2`. Function Signature ```python def min_operations(S1: str, S2: str) -> int: pass ``` Input - `S1` and `S2` (length of each string will be at most 1000). Output - Integer representing the minimum number of operations required. Sample Input ```python min_operations(\\"kitten\\", \\"sitting\\") ``` Sample Output ```python 3 ``` Explanation To convert \\"kitten\\" into \\"sitting\\": 1. Replace \'k\' with \'s\' (1 operation). 2. Replace \'e\' with \'i\' (1 operation). 3. Insert \'g\' at the end (1 operation). Total of 3 operations.","solution":"def min_operations(S1: str, S2: str) -> int: This function calculates the minimum number of edit operations needed to transform S1 into S2. m, n = len(S1), len(S2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # S1 is empty, insert all of S2\'s characters elif j == 0: dp[i][j] = i # S2 is empty, remove all of S1\'s characters elif S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, move diagonally else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace # Return the result from the DP table return dp[m][n]"},{"question":"You are given an array of n integers, nums, and another integer k. Your task is to find the maximum sum of a subarray of size k. A subarray is a contiguous part of an array. The sum of the elements in the subarray is the sum of all its elements. Write a function `max_sum_subarray(nums: List[int], k: int) -> int` that returns the maximum sum of any subarray of size k. # Input - `nums`: A list of n integers `(-10^4 ≤ nums[i] ≤ 10^4)` where `1 ≤ n ≤ 10^5`. - `k`: An integer `(1 ≤ k ≤ n)` representing the size of the subarray. # Output - Return the maximum sum of any subarray of length k. # Examples Input: ```python nums = [1, 2, 3, 4, 5] k = 2 ``` Output: ```python 9 ``` Explanation: The subarray with the maximum sum is [4, 5] with a sum of 9. Input: ```python nums = [-1, -2, -3, -4, -5] k = 3 ``` Output: ```python -6 ``` Explanation: The subarray with the maximum sum is [-1, -2, -3] with a sum of -6. # Constraints - Implement the function with a linear complexity O(n). - The function should use O(1) extra space for variables (excluding the input data).","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of any subarray of length k. if not nums or k <= 0 or k > len(nums): return 0 # Initialize with the sum of the first subarray of size k max_sum = current_sum = sum(nums[:k]) # Use the sliding window technique to find the maximum sum for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a 2D grid of size m x n and an integer k, you need to shift the grid k times. In one shift operation: - Element at grid[i][j] moves to grid[i][j + 1]. - Element at grid[i][n-1] moves to grid[i + 1][0]. - Element at grid[m-1][n-1] moves to grid[0][0]. Return the 2D grid after applying k shift operations. Example 1: Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[9,1,2],[3,4,5],[6,7,8]] Example 2: Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] Constraints: - m == grid.length - n == grid[i].length - 1 <= m <= 50 - 1 <= n <= 50 - -1000 <= grid[i][j] <= 1000 - 0 <= k <= 100","solution":"def shiftGrid(grid, k): Shifts the grid k times. m, n = len(grid), len(grid[0]) flat_list = [grid[i][j] for i in range(m) for j in range(n)] # Efficient k computation to avoid unnecessary operations k = k % len(flat_list) # Perform the shift flat_list = flat_list[-k:] + flat_list[:-k] # Convert back to 2D grid new_grid = [] for i in range(m): new_grid.append(flat_list[i*n:(i+1)*n]) return new_grid"},{"question":"A library has a row of books arranged in different sections, marked by numbers from 0 to 15. A reader starts picking books from a specific section and moves in a specific direction (\'L\' for left and \'R\' for right), and picks one book per second until they reach a designated section all the way on the opposite end of the row. Given the starting section number `s` and the movement direction `d`, find out how long it will take the reader to pick a book from the opposite end. Example 1: Input: s = 2, d = \'R\' Output: 13 Explanation: Since the reader starts at section number 2 and moves to the right, they will reach the opposite end at section 15 in 13 seconds. Example 2: Input: s = 10, d = \'L\' Output: 10 Explanation: Since the reader starts at section number 10 and moves to the left, they will reach the opposite end at section 0 in 10 seconds. Your Task: You do not need to read or print anything. Your task is to complete the function `time_to_opposite_end()` which takes `s` and `d` as input parameters and returns the number of seconds required to reach the opposite end section. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 0 <= s <= 15 d € [\'L\', \'R\']","solution":"def time_to_opposite_end(s, d): Returns the number of seconds required for the reader to reach the opposite end of the row of books. :param s: int, starting section number (0 to 15) :param d: str, direction of movement (\'L\' for left, \'R\' for right) :return: int, time in seconds to reach the opposite end if d == \'R\': return 15 - s elif d == \'L\': return s else: raise ValueError(\\"Direction should be \'L\' or \'R\'\\")"},{"question":"Write a function `find_duplicates` that takes a list of integers and returns another list containing the duplicates from the input list in ascending order. Each element in the resultant list should appear only once. Example: ``` find_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 7]) ``` should return: ``` [4, 6] ``` Another example: ``` find_duplicates([10, 20, 20, 30, 30, 30, 40, 50]) ``` should return: ``` [20, 30] ``` The input list can be empty, in which case the function should return an empty list. The input list will always contain integers and can contain positive or negative numbers, represented as whole numbers.","solution":"def find_duplicates(arr): Finds and returns a list of duplicates in the input list in ascending order. from collections import Counter counter = Counter(arr) duplicates = [item for item, count in counter.items() if count > 1] return sorted(duplicates)"},{"question":"# Circular String Rotation You are given a string `s` and an integer `k`. Rotate the string `s` to the right by `k` positions and return the resulting string. More formally, move the last `k` characters of the string to the start, and shift the remaining characters to the right. # Example Rotate the string `s = \'hello\'` by `k = 2`: ``` \\"lohel\\" ``` # Function Signature Your task is to write a function, `rotate_string(s, k)` which takes a string `s` and an integer `k` as inputs, and returns a new string which is rotated `k` places to the right. ```python def rotate_string(s: str, k: int) -> str: # Your code here # Example usage: print(rotate_string(\'hello\', 2)) # Output: \\"lohel\\" print(rotate_string(\'abcdefg\', 3)) # Output: \\"efgabcd\\" ``` # Constraints - The string `s` will have a length between 1 and 10^5. - The integer `k` will be a non-negative integer less than or equal to 10^9.","solution":"def rotate_string(s: str, k: int) -> str: Rotates the string `s` to the right by `k` positions. n = len(s) k = k % n # Reducing k to a manageable number within the length of the string return s[-k:] + s[:-k] if k != 0 else s"},{"question":"A group of friends is planning a road trip across n cities, numbered from 1 to n. They want to visit every city at least once in a circular route, starting and ending at the same city. They would like to minimize the total driving distance of the trip. Each city is connected to some other cities by direct roads of certain distances. There may be multiple roads between some cities, but they want to consider only the best (shortest) route between each pair of cities to make the trip efficient. Given the number of cities and all the direct roads between the cities with their distances, determine the minimum driving distance needed to make the circular route visiting all cities exactly once and returning to the starting city. Input The first line contains two integers n (2 ≤ n ≤ 14) — the number of cities, and m (1 ≤ m ≤ 100) — the number of direct roads. Each of the following m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the endpoints of the road and the distance between them. Output Output a single integer — the minimum total driving distance for the road trip. Examples Input 4 5 1 2 10 1 3 15 1 4 20 2 3 35 3 4 25 Output 80 Input 3 3 1 2 10 2 3 15 3 1 20 Output 45 Explanation for the examples: 1. On the first example, the minimum route is 1 -> 2 -> 3 -> 4 -> 1 with total distance 10 + 35 + 25 + 10 = 80. 2. On the second example, the minimum route is 1 -> 2 -> 3 -> 1 with total distance 10 + 15 + 20 = 45.","solution":"import itertools import sys def find_minimum_tour_distance(n, m, roads): # Initialize the distance matrix with infinity. dist = [[float(\'inf\')] * n for _ in range(n)] # Fill in the initial distances given by roads for u, v, w in roads: dist[u-1][v-1] = min(dist[u-1][v-1], w) dist[v-1][u-1] = min(dist[v-1][u-1], w) # Use the Floyd Warshall algorithm to find the shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Find the minimum TSP tour using permutations cities = list(range(n)) min_tour_distance = float(\'inf\') for perm in itertools.permutations(cities[1:]): # fix the first city as the starting city current_distance = 0 current_city = 0 # start from city 0 for next_city in perm: current_distance += dist[current_city][next_city] current_city = next_city current_distance += dist[current_city][0] # Returning to the starting city min_tour_distance = min(min_tour_distance, current_distance) return min_tour_distance"},{"question":"Given two strings s and t that consist of only lowercase letters, return true if you can transform s into t by performing the following operations any number of times: 1. Change the order of any two adjacent characters in s. 2. Replace any character in s with another character (not equal to the original one). Note that these operations can be performed any number of times and in any order. Example 1: Input: s = \\"abc\\", t = \\"bca\\" Output: true Explanation: We can transform \\"abc\\" into any permutation of \\"abc\\" by swapping adjacent characters. Example 2: Input: s = \\"aabbcc\\", t = \\"abcabc\\" Output: true Explanation: We can transform each pair of identical characters in any order to match the required string \\"abcabc\\". Example 3: Input: s = \\"abc\\", t = \\"def\\" Output: false Explanation: No matter the swaps or replacements, we cannot transform \\"abc\\" into \\"def\\" without having some characters from the original string remain. Constraints: - 1 <= s.length, t.length <= 1000","solution":"def can_transform(s, t): Returns true if you can transform string s into string t by: 1. Changing the order of any two adjacent characters in s. 2. Replacing any character in s with another character (not equal to the original one). Args: s: the source string t: the target string Returns: bool: True if transformation is possible, otherwise False. # If the lengths are different, transformation is not possible. if len(s) != len(t): return False # Sort the characters of both strings and compare. # This leverages the fact that any permutation of characters can be achieved with adjacent swaps. return sorted(s) == sorted(t)"},{"question":"You are given N elements and your task is to implement a Queue using two stacks. Example 1: Input: enqueue(2) enqueue(3) dequeue() enqueue(4) dequeue() dequeue() Output: 2 3 4 Explanation: In the first test case for query enqueue(2) Insert 2 into the queue. enqueue(3) Insert 3 into the queue. dequeue() Remove the front element from the queue. The removed element will be 2. enqueue(4) Insert 4 into the queue. dequeue() Remove the front element from the queue. The removed element will be 3. dequeue() Remove the front element from the queue. The removed element will be 4. Your Task: You are required to complete the two methods enqueue() which takes one argument an integer \'x\' to be added to the queue and dequeue() which removes and returns the front element from the queue. (-1 will be returned if for dequeue() the queue is empty.) Expected Time Complexity: O(1) for enqueue() and O(N) for dequeue(). Expected Auxiliary Space: O(N) for all the methods. Constraints: 1 <= Number of queries <= 100 1 <= values of the queue <= 100","solution":"class QueueUsingStacks: def __init__(self): Initialize your data structure here. self.stack1 = [] self.stack2 = [] def enqueue(self, x: int) -> None: Push element x to the back of the queue. self.stack1.append(x) def dequeue(self) -> int: Removes the element from in front of the queue and returns that element. if not self.stack2: if not self.stack1: return -1 while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop()"},{"question":"Given an array of integers nums, return the length of the longest contiguous subarray such that every element in the subarray has the same value. Example 1: Input: nums = [1, 1, 0, 1, 1, 1] Output: 3 Explanation: The longest contiguous subarray with the same value is [1, 1, 1], and its length is 3. Example 2: Input: nums = [1, 2, 3] Output: 1 Explanation: Each element in the array is unique, so the longest contiguous subarray with the same value has length 1. Example 3: Input: nums = [2, 2, 2, 2, 2] Output: 5 Explanation: The entire array consists of the same value, so the longest contiguous subarray has length 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSubarray() which takes the array nums as input and returns the length of the longest contiguous subarray with the same value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |nums| <= 10^{6} -10^9 <= nums[i] <= 10^9","solution":"def longest_subarray(nums): Returns the length of the longest contiguous subarray with the same value. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given an n x n matrix, perform the \\"wave print\\". Wave print of a matrix would be printing all the elements of the matrix in a particular manner where the first column will be printed from top to bottom, the second column from bottom to top, the third column again from top to bottom and so on. # Input - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of rows and columns. - The next n lines contain n integers each, representing the elements of the matrix. # Output - Print the elements of the matrix in a single line, with a space separating each element, in the order described above. # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 1 4 7 8 5 2 3 6 9 ``` Explanation The wave print of the given 3x3 matrix is 1 4 7 (from top to bottom of the first column), then 8 5 2 (from bottom to top of the second column), and finally 3 6 9 (from top to bottom of the third column).","solution":"def wave_print(matrix): Returns the elements of the matrix in wave print manner. Parameters: matrix (List[List[int]]): A list of lists where each list represents a row in the matrix. Returns: List[int]: A list of integers representing the wave print of the matrix. if not matrix: return [] n = len(matrix) result = [] for col in range(n): if col % 2 == 0: # top to bottom for row in range(n): result.append(matrix[row][col]) else: # bottom to top for row in range(n-1, -1, -1): result.append(matrix[row][col]) return result"},{"question":"You are tasked with designing a computer program for an auto dealership. The dealership tracks inventory of cars with different attributes such as model, year, price, and mileage. You need to write a program that helps the dealership maintain an up-to-date list of inventory and allows them to perform various queries on the cars. The program should support the following operations: 1. **Add a car to the inventory**: This operation should allow you to add a car with its model, year, price, and mileage to the inventory. 2. **Remove a car from the inventory**: This operation should allow you to remove a car based on its unique ID. 3. **Query cars within a year range**: This operation should output all cars manufactured within a given year range [start_year, end_year]. 4. **Query cars below a certain price**: This operation should output all cars with a price less than or equal to a given value. # Input The first line of input contains the number of operations `n` (1 ≤ n ≤ 100), each operation will be described in the subsequent lines, and will be one of four types: - `ADD model year price mileage` (Model is a string without spaces, year is an integer, price and mileage are floats) - `REMOVE id` (id is an integer) - `QUERY_YEAR start_year end_year` (start_year and end_year are integers) - `QUERY_PRICE max_price` (max_price is a float) The car IDs start at 1 and increment with each car added. The operations will maintain valid IDs and not remove non-existent cars. # Output For each `QUERY_YEAR` and `QUERY_PRICE` operation, output the matching car\'s ID, model, year, price, and mileage, each on a new line. If no cars match the query, output \\"NO CARS FOUND\\". **Example Input:** ``` 8 ADD Toyota 2010 15000 120000 ADD Honda 2015 18000 90000 ADD Ford 2008 13000 140000 QUERY_YEAR 2005 2012 REMOVE 2 QUERY_PRICE 14000 ``` **Example Output:** ``` 1 Toyota 2010 15000 120000 3 Ford 2008 13000 140000 NO CARS FOUND 3 Ford 2008 13000 140000 ```","solution":"class AutoDealership: def __init__(self): self.inventory = [] self.next_id = 1 def add_car(self, model, year, price, mileage): car = { \'id\': self.next_id, \'model\': model, \'year\': year, \'price\': price, \'mileage\': mileage } self.inventory.append(car) self.next_id += 1 def remove_car(self, car_id): self.inventory = [car for car in self.inventory if car[\'id\'] != car_id] def query_year(self, start_year, end_year): results = [ car for car in self.inventory if start_year <= car[\'year\'] <= end_year ] return results def query_price(self, max_price): results = [ car for car in self.inventory if car[\'price\'] <= max_price ] return results"},{"question":"Given an array of integers representing scores achieved by students in an exam, you need to determine the largest subset of scores such that no two scores in the subset differ by more than one. Input Format: The first line contains an integer n, the number of scores. The second line contains n integers, each representing a student\'s score. Output Format: A single integer representing the size of the largest subset of scores with the specified property. Constraints: 1 ≤ n ≤ 100,000 0 ≤ score_i ≤ 100 SAMPLE INPUT 6 4 6 5 3 3 1 SAMPLE OUTPUT 3 Explanation One of the largest subsets that satisfies the condition is {3, 3, 4}, where the maximum and minimum scores differ by at most 1. Another valid subset is {5, 6}. There are other possible subsets as well, but the size of the largest one is 3.","solution":"def largest_subset(scores): from collections import Counter score_count = Counter(scores) max_subset_size = 0 for score in score_count: current_count = score_count[score] if score + 1 in score_count: current_count += score_count[score + 1] max_subset_size = max(max_subset_size, current_count) return max_subset_size"},{"question":"You are given a string S containing a sequence of lowercase English letters. A certain game involves taking any contiguous substring of S and replacing it with its reverse. The aim is to transform S into its lexicographically smallest possible form. Your task is to determine the smallest lexicographical string that can be obtained by applying the described operation optimally. -----Input----- The first line contains an integer T, the number of test cases. The descriptions of the T test cases follow. The first line of each test case contains the string S, which consists of lowercase English letters. -----Output----- For each test case, output the smallest lexicographical string that can be obtained by reversing any contiguous substrings of S optimally. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 1000 -----Example----- Input: 3 cba acbd xzy Output: abc abcd xyz -----Explanation----- Example case 1. By reversing the entire string, \\"cba\\" becomes \\"abc\\", which is the smallest possible lexicographical string. Example case 2. By reversing the substring \\"bd\\", \\"acbd\\" becomes \\"abcd\\", which is the smallest possible lexicographical string. Example case 3. The given string \\"xzy\\" is already the smallest lexicographical string after reversing its entire span: \\"xyz\\".","solution":"def smallest_lexicographical_string(s): Given a string s, return the smallest lexicographical string that can be obtained by reversing any of its substrings optimally. return \'\'.join(sorted(s)) def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. t: int - Number of test cases. test_cases: list of strings - List of test cases. Returns a list of results for each test case. return [smallest_lexicographical_string(s) for s in test_cases]"},{"question":"Write a function to check whether a given string is a palindrome or not. A string is a palindrome if it reads the same backward as forward. -----Input:----- - A single line containing a string S of length at most 100. -----Output:----- Output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. -----Constraints----- - The string S can include lowercase letters, numbers, and special characters. -----Sample Input:----- level -----Sample Output:----- YES -----EXPLANATION:----- The input string \\"level\\" reads the same forward and backward, hence it is a palindrome.","solution":"def is_palindrome(S): Checks if a given string S is a palindrome. Returns \\"YES\\" if it is a palindrome, otherwise \\"NO\\". # Check if the string is equal to its reverse if S == S[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"In an alternate dimension, networked decentralized systems have become crucial for securing sensitive data. These systems communicate by sending sequences of bits, and an efficient encoding scheme is necessary to ensure data integrity. You are tasked with developing a new cryptographic encoding method. Given a sequence of n bits, we define the \\"bit flip\\" operation as flipping the bit at a specified index (0 turns to 1 and 1 turns to 0). The goal is to calculate the minimum number of \'bit flip\' operations required to make the number of 1s and 0s in the sequence equal. Input The first line of the input contains a single integer t (1 ≤ t ≤ 1 000) denoting the number of test cases, then t test cases follow. The first line of each test case consists of a single integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains a binary string of length n consisting of characters \'0\' and \'1\'. Output Print t lines. The i-th line should contain the minimum number of \'bit flip\' operations required for the i-th test case. If it is impossible to make the number of 1s and 0s equal, print -1 for that test case. Example Input 4 6 101010 5 11111 3 101 8 00001111 Output 0 -1 -1 0","solution":"def min_bit_flips_to_equalize(n, binary_string): count_0 = binary_string.count(\'0\') count_1 = n - count_0 if abs(count_0 - count_1) % 2 != 0: return -1 else: return abs(count_0 - count_1) // 2 def process_test_cases(t, test_cases): results = [] for i in range(t): n, binary_string = test_cases[i] results.append(min_bit_flips_to_equalize(n, binary_string)) return results"},{"question":"Given a two-dimensional grid of size m x n, where each cell represents a portion of land (1) or water (0), find the number of distinct islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are surrounded by water. The grid is represented as a list of lists, and you need to implement a function that takes this grid as input and returns the count of distinct islands. Function Signature: ```python def num_islands(grid: List[List[int]]) -> int: ``` # Input * grid: A list of lists of integers (0s and 1s), with dimensions m x n (1 ≤ m, n ≤ 300), representing the two-dimensional grid. # Output * Returns an integer representing the number of distinct islands. # Example Input: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1] ] ``` Output: ``` 4 ``` Explanation: There are four distinct islands in the grid. # Constraints - 1 ≤ m ≤ 300 - 1 ≤ n ≤ 300 - grid[i][j] is either 0 or 1.","solution":"from typing import List def num_islands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 # Mark the cell as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) islands_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: islands_count += 1 dfs(i, j) return islands_count"},{"question":"Problem description. Tim, the librarian, needs help organizing books on the shelves. Each shelf can hold up to a certain limit of weight. Tim wants to know the maximum number of books a shelf can hold without exceeding its weight limit. Each book has a different weight and all the books on a shelf need to have a total weight less than or equal to the shelf\'s weight limit. Your job is to determine the maximum number of books that each shelf can accommodate. Input Input description. The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains two integers N and W, where N is the number of books and W is the weight limit of the shelf. - The second line contains N space-separated integers representing the weights of each book. Output Output description. For each test case, output a single line containing the maximum number of books that the shelf can hold without exceeding the weight limit. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ W, book weight ≤ 1000 Example Input: 2 5 10 1 2 3 4 5 3 7 2 2 3 Output: 4 3 Explanation CASE 1: The weight of the shelf is 10. Tim can place the first four books (weights 1, 2, 3, and 4) on the shelf as their total weight is 10 which is within the limit. CASE 2: The weight of the shelf is 7. Tim can place all three books (weights 2, 2, and 3) on the shelf as their total weight is 7, which is exactly the weight limit.","solution":"def max_books_on_shelf(T, test_cases): results = [] for test in test_cases: N, W = test[0] book_weights = test[1] book_weights.sort() total_weight = 0 count = 0 for weight in book_weights: if total_weight + weight > W: break total_weight += weight count += 1 results.append(count) return results"},{"question":"You are given the coordinates of two opposite corners of a rectangle. The sides of the rectangle are aligned with the coordinate axes. Find the coordinates of the other two corners of the rectangle. Input The input consists of two lines, each containing two space-separated integers. These integers represent the (x, y) coordinates of the opposite corners of the rectangle. Output Output exactly two lines, each containing two space-separated integers representing the coordinates of the other two corners. Coordinates should be in the format of (x, y). The coordinates should be printed in ascending order, first by x-coordinate, and in case of a tie, by y-coordinate. Constraints -1000 ≤ xi, yi ≤ 1000 SAMPLE INPUT 1 2 4 5 SAMPLE OUTPUT 1 5 4 2","solution":"def find_other_corners(x1, y1, x2, y2): Given two opposite corners (x1, y1) and (x2, y2) of a rectangle aligned with the coordinate axes, this function returns the coordinates of the other two corners. Parameters: x1, y1: coordinates of the first corner. x2, y2: coordinates of the second corner. Returns: List of tuples, each representing the coordinates of the other two corners, sorted in ascending order first by x-coordinate, then by y-coordinate. # The other two corners will have coordinates (x1, y2) and (x2, y1) corner1 = (x1, y2) corner2 = (x2, y1) return sorted([corner1, corner2], key=lambda p: (p[0], p[1]))"},{"question":"A company has a network of computers organized in an N x M grid, where each cell represents a computer. Due to recent cyber attacks, the company wants to enhance their internal security system so that if one computer in the network detects an attack, it can immediately notify its adjacent computers (top, left, bottom, right) within one hour. The company aims to determine the maximum amount of time it would take to notify all computers, assuming the attack starts from any one computer. Find this maximum time. Input The first line contains T, the number of test cases. Each of the next T lines contain two integers N and M representing the grid size. If both N and M are zero, it means there are no computers in the network. T ≤ 1,000 0 ≤ N, M ≤ 1,000,000 Output For each test case, output the maximum time in hours required to notify all computers in the network. Example Input: 2 2 2 3 3 Output: 2 3 Explanation: Case 1: With 2x2 grid, starting from any corner computer, the furthest computer takes 2 hours to notify. Case 2: With 3x3 grid, starting from any corner computer, the furthest computer takes 3 hours to notify.","solution":"def max_notification_time(n, m): Calculate the maximum amount of time it would take to notify all computers in an NxM grid. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid Returns: int: Maximum time to notify all computers in hours if n == 0 or m == 0: return 0 return max(n, m) def process_test_cases(t, test_cases): Process multiple test cases to determine maximum notification time for each NxM grid. Parameters: t (int): number of test cases test_cases (list of tuples): list of (n, m) tuples representing grid sizes Returns: list of int: list of maximum notification times for each test case results = [] for n, m in test_cases: results.append(max_notification_time(n, m)) return results"},{"question":"**Problem Statement** Jack is an enthusiastic programmer who loves working with strings. Recently, he came across the concept of palindromes and became fascinated by them. He decided to create a new challenge for himself: given a string `S`, he wants to transform it into a palindrome by changing the minimum number of characters. Additionally, since he likes working with lowercase letters, the input string `S` will consist only of lowercase letters from \'a\' to \'z\'. He needs your help to find the minimum number of character changes required to transform `S` into a palindrome. **Input** The input consists of a single dataset in the following format: - The first line contains a single integer `T` (1 ≤ T ≤ 1000), the number of test cases. - Each of the next `T` lines contains a single string `S` (1 ≤ |S| ≤ 1000), the string Jack wants to transform. **Output** For each test case, print a single line containing the minimum number of character changes required to transform `S` into a palindrome. **Example** Input ``` 3 ab race madam ``` Output ``` 1 2 0 ``` **Explanation** 1. For the first test case, \\"ab\\" can be transformed into \\"aa\\" or \\"bb\\" by changing one character. 2. For the second test case, \\"race\\" can be transformed into \\"racecar\\" with two changes: - \'r\' can be made \'e\' and \'e\' can be made \'r\' to form \\"eaceace\\" or - \'c\' can be made \'r\' and \'e\' can be made \'r\' to form \\"raceear\\" 3. For the third test case, \\"madam\\" is already a palindrome, so no changes are required.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes required to transform the string s into a palindrome. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_changes_to_palindrome(s)) return results"},{"question":"You are given a list of integers and an integer `k`. Your task is to determine the maximum sum of `k` consecutive elements in the list. If the list has fewer than `k` elements, return -1. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases `t` (1 leq t leq 1000). Description of the test cases follows. The first line of each test case contains two integers `n` and `k` (1 leq n, k leq 10^5 and 0 leq k leq n) — the length of the list and the number of consecutive elements to sum. The second line of each test case contains `n` integers `a_i` (-10^6 leq a_i leq 10^6) — the elements of the list. -----Output----- For each test case, print a single integer on a new line representing the maximum sum of `k` consecutive elements in the list or `-1` if the list has fewer than `k` elements. -----Examples----- Input 3 5 2 1 3 -1 5 7 6 3 4 3 8 2 -1 6 4 5 3 2 1 -4 Output 12 15 -1 -----Note----- In the first test case, the maximum sum of 2 consecutive elements is `5 + 7 = 12`. In the second test case, the maximum sum of 3 consecutive elements is `8 + 2 + 5 = 15`. In the third test case, since the list has fewer than `5` elements, the output should be `-1`.","solution":"def max_sum_of_k_consecutive(nums, k): if len(nums) < k: return -1 # Initialize the sum of the first k elements max_sum = curr_sum = sum(nums[:k]) # Iterate over the array with a sliding window of size k for i in range(k, len(nums)): curr_sum = curr_sum + nums[i] - nums[i - k] if curr_sum > max_sum: max_sum = curr_sum return max_sum def process_test_cases(test_cases): results = [] for test in test_cases: n, k, nums = test results.append(max_sum_of_k_consecutive(nums, k)) return results"},{"question":"You have been given an array A of N integers. Your task is to cube every element of the array and then sort the array in increasing order. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case consists of two lines. - The first line contains the integer N, the number of elements in the array. - The second line contains N integers, the elements of the array. ------ Output Format ------ For each test case, output a single line containing the sorted array of cubed values. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{4} -10^{3} ≤ A[i] ≤ 10^{3} ------ Sample Input 1 ------ 2 3 -1 2 3 4 -2 -1 0 1 ------ Sample Output 1 ------ -1 8 27 -8 -1 0 1 ------ Explanation 1 ------ Test Case 1: The array after cubing is [-1, 8, 27]. After sorting, it remains [-1, 8, 27]. Test Case 2: The array after cubing is [-8, -1, 0, 1]. After sorting, it remains [-8, -1, 0, 1].","solution":"def cube_and_sort(array): Cubes every element in the array and returns the sorted array. cubed_array = [x**3 for x in array] cubed_array.sort() return cubed_array def process_test_cases(test_cases): Processes multiple test cases and returns the results for each. :param test_cases: List of tuples, each containing (N, array) :return: List of results for each test case results = [] for N, array in test_cases: results.append(cube_and_sort(array)) return results def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 array = list(map(int, data[index:index+N])) index += N test_cases.append((N, array)) results = process_test_cases(test_cases) for result in results: print(\' \'.join(map(str, result)))"},{"question":"You are given an unsorted array of integers. Your task is to find the minimum positive integer that is missing from the array. In other words, find the smallest positive integer that is not present in the array. For example, for the given array: - [3, 4, -1, 1], the missing positive integer is 2 - [1, 2, 0], the missing positive integer is 3 -----Constraints----- - The length of the array will not exceed 10^5. - The elements in the array are integers and can be both positive and negative. - The absolute values of elements in the array will not exceed 10^6. -----Input----- The input is given from Standard Input in the following format: n a1 a2 a3 ... an Where n is the number of elements in the array, and a1, a2, ..., an are the elements of the array. -----Output----- Output the smallest positive integer that is not present in the array. -----Sample Input----- 4 3 4 -1 1 -----Sample Output----- 2","solution":"def find_missing_positive(nums): Returns the smallest positive integer that is missing from the list of numbers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"A store has an inventory management system that keeps track of the stock of different products. Each product is identified by a unique code, and the stock is represented as a non-negative integer. You need to write a function that processes a series of operations to update the inventory. The operations are as follows: 1. \\"add product_code quantity\\" - Add a specified quantity of a product to the stock. 2. \\"remove product_code quantity\\" - Remove a specified quantity of a product from the stock, but if the quantity to be removed exceeds the current stock, set the stock to zero. 3. \\"check product_code\\" - Return the current quantity of a product in the stock. Write a function `manage_inventory(operations)` that takes a list of operations as input and returns a list of results for the \\"check\\" operations. # Input - `operations`: a list of strings representing the operations, where each string is one of the operations specified above. The product_code is a string composed of alphanumeric characters, and the quantity is a non-negative integer. # Output - A list of integers representing the results of the \\"check\\" operations, in the order they appear in the input list. # Example ```python def manage_inventory(operations): # Your code here # Sample Input operations = [ \\"add p1 100\\", \\"add p2 50\\", \\"check p1\\", \\"remove p1 70\\", \\"check p1\\", \\"add p2 30\\", \\"remove p2 10\\", \\"check p2\\" ] # Sample Output result = [100, 30, 70] ``` # Explanation - The operation \\"add p1 100\\" adds 100 units of product \\"p1\\" to the stock. Now, stock of \\"p1\\" is 100. - The operation \\"add p2 50\\" adds 50 units of product \\"p2\\" to the stock. Now, stock of \\"p2\\" is 50. - The operation \\"check p1\\" returns 100, as the current stock of \\"p1\\" is 100. - The operation \\"remove p1 70\\" removes 70 units of product \\"p1\\" from the stock. Now, stock of \\"p1\\" is 30. - The operation \\"check p1\\" returns 30, as the current stock of \\"p1\\" is 30. - The operation \\"add p2 30\\" adds 30 units of product \\"p2\\" to the stock. Now, stock of \\"p2\\" is 80. - The operation \\"remove p2 10\\" removes 10 units of product \\"p2\\" from the stock. Now, stock of \\"p2\\" is 70. - The operation \\"check p2\\" returns 70, as the current stock of \\"p2\\" is 70.","solution":"def manage_inventory(operations): inventory = {} output = [] for operation in operations: parts = operation.split() op_type = parts[0] product_code = parts[1] if op_type == \\"add\\": quantity = int(parts[2]) inventory[product_code] = inventory.get(product_code, 0) + quantity elif op_type == \\"remove\\": quantity = int(parts[2]) if product_code in inventory: inventory[product_code] = max(0, inventory[product_code] - quantity) elif op_type == \\"check\\": output.append(inventory.get(product_code, 0)) return output"},{"question":"Write a function `replaceOddWords` that takes a string as an argument and returns a new string where all the words at odd indices are replaced with the word \\"odd\\". For example, if the input is \\"The quick brown fox jumps over the lazy dog\\", the output should be \\"The odd brown odd jumps odd the odd dog\\". Note that words are separated by spaces, and the first word has an index of 0. An empty string, or no arguments, should result in the output being an empty string.","solution":"def replaceOddWords(s): Replaces words at odd indices with the word \\"odd\\". Args: s (str): Input string. Returns: str: Modified string with words at odd indices replaced with \\"odd\\". if not s: return \\"\\" words = s.split() result = [] for i, word in enumerate(words): if i % 2 == 1: result.append(\\"odd\\") else: result.append(word) return \\" \\".join(result)"},{"question":"Reverse Words in a Sentence You are given a sentence consisting of multiple words separated by spaces. Your task is to reverse the order of the words in the sentence while keeping the characters in each word unchanged. Task Write a function that takes a string input representing a sentence and returns a new string with the words in reverse order. **Constraints:** - The input string will contain at least one word. - Words are separated by single spaces, and there are no leading or trailing spaces. - The sentence may contain punctuation marks. **Examples:** ```python \\"Hello world!\\" => \\"world! Hello\\" \\"The quick brown fox\\" => \\"fox brown quick The\\" \\"Python is fun\\" => \\"fun is Python\\" ```","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The input sentence to reverse words. Returns: str: The sentence with words in reversed order. words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"A factorial is a mathematical function denoted by n!, which takes a positive integer n and returns the product of all positive integers less than or equal to n. For example, 4! = 4 x 3 x 2 x 1 = 24. A quadratic factorial, denoted by n!!, is defined similarly but it skips every second positive integer. Specifically, the quadratic factorial for an even number n is the product of every second integer from n down to 2, and for an odd number n, it is the product of every second integer from n down to 1. For instance, the quadratic factorial for 8 is 8!! = 8 x 6 x 4 x 2 = 384, and the quadratic factorial for 7 is 7!! = 7 x 5 x 3 x 1 = 105. In this problem, your task is to write a RECURSIVE function to calculate the quadratic factorial of a given positive integer n. Your solution must use a RECURSIVE function to be considered correct. Note: Any solution using iterative methods will not earn any points, even if it is deemed correct by automated judges. -----Input----- The input contains a single positive integer, n (1 ≤ n ≤ 20). -----Output----- The output contains a single integer: the quadratic factorial of the given number n. -----Examples----- Sample Input: 8 Sample Output: 384 Sample Input: 7 Sample Output: 105","solution":"def quadratic_factorial(n): Returns the quadratic factorial of a positive integer n using recursion. if n <= 1: return 1 return n * quadratic_factorial(n - 2) # Examples: # quadratic_factorial(8) should return 384 # quadratic_factorial(7) should return 105"},{"question":"Given an integer array `arr[]` of size `N`, return the sum of all the elements in the array. Example 1: Input: N = 5, arr = [1, 2, 3, 4, 5] Output: 15 Explanation: Sum of all elements (1+2+3+4+5) = 15. Example 2: Input: N = 3, arr = [10, -2, 3] Output: 11 Explanation: Sum of all elements (10+(-2)+3) = 11. Your Task: You don\'t need to read input or print anything. Complete the function `arraySum()` which takes integer array `arr` and integer `N` as input parameters and returns the sum of all the elements in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 -10^6 <= arr[i] <= 10^6","solution":"def arraySum(arr, N): Returns the sum of all elements in the array arr of size N. return sum(arr)"},{"question":"You are given a circular linked list node which is a part of a circular linked list of N nodes. The task is to find and return the starting node of the loop in the circular linked list. It is guaranteed that the given linked list always contains a loop. Example 1: Input: N = 3 value[] = {1,2,3} Output: 1 Explanation: Loop starting node in the given circular linked list is 1. Example 2: Input: N = 4 value[] = {4,5,6,7} Output: 4 Explanation: Loop starting node in the given circular linked list is 4. Your Task: You only need to complete the function detectLoopStart that takes a reference to the node in the circular linked list and returns the starting node of the loop. The printing is done automatically by the driver code. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= N <= 10^{5}","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectLoopStart(head): Given a node in a circular linked list, this function returns the starting node of the loop in the linked list. if not head or not head.next: return None slow = fast = head # Detect loop using Floyd’s Cycle detection algorithm (Tortoise and Hare) while True: slow = slow.next fast = fast.next.next if slow == fast: break # Move slow to head, keep fast at meeting point. # The point where they meet again is the start of the loop. slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"You are given a rectangular matrix filled with both positive and negative integers. Your task is to find the submatrix with the maximum sum. In other words, you need to determine the submatrix (a contiguous block within the matrix) such that its sum of elements is the largest compared to all possible submatrices of the given matrix. ------ Input Format ------ - The first line contains two integers, R and C, indicating the number of rows and columns in the matrix, respectively. - Each of the next R lines contains C integers separated by spaces, representing the elements of the matrix. ------ Output Format ------ - Print a single integer, the maximum sum of any submatrix in the given matrix. ------ Constraints ------ 1 ≤ R, C ≤ 1000 -10^{6} ≤ text{element of matrix} ≤ 10^{6} ----- Sample Input 1 ------ 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ----- Sample Output 1 ------ 29 ----- Explanation 1 ------ The submatrix that has the maximum sum is: ``` 8 10 1 3 ```","solution":"def maximum_sum_submatrix(matrix): def kadane(arr): max_sum = current_sum = -float(\'inf\') for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum if not matrix: return 0 R = len(matrix) C = len(matrix[0]) max_sum = -float(\'inf\') for left in range(C): temp = [0] * R for right in range(left, C): for i in range(R): temp[i] += matrix[i][right] current_max_sum = kadane(temp) max_sum = max(max_sum, current_max_sum) return max_sum"},{"question":"You are given a list of integers representing the heights of buildings along a street. You have to calculate the maximum area of a rectangle formed by any contiguous buildings. Each entry in the list represents the height of a building of unit width. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^4) — the heights of the buildings. Output Print one integer: the maximum area of a rectangle that can be formed by any contiguous buildings. Examples Input 5 2 1 5 6 2 3 Output 10 Input 7 6 2 5 4 5 1 6 Output 12 Note In the first example, the maximum area can be achieved by considering buildings with heights [5, 6] which gives a rectangle of area 5*2 = 10. In the second example, the maximum area can be achieved by considering buildings with heights [5, 4, 5] which gives a rectangle of area 4*3 = 12.","solution":"def largestRectangleArea(heights): Calculates the maximum area of a rectangle formed by any contiguous buildings. Uses a stack to keep track of building heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maximum_rectangle_area_in_histogram(buildings): Facade function to compute the maximum rectangle area in a histogram represented by `buildings`. return largestRectangleArea(buildings)"},{"question":"Raj loves playing his favorite game that involves managing a sequence of integers. He starts with an initially empty sequence and must perform a series of operations. Each operation is either adding a number to the sequence or finding the maximum number with a specific condition. Can you help him by implementing these operations? The operations are given as follows: 1. ADD x - Add the integer x to the sequence. 2. MAX p - Find the maximum integer in the sequence that is greater than or equal to p. Each operation should be processed in the order they are given. Input format: The first line contains an integer T, the number of operations. The next T lines contain a string and an integer representing an operation and its parameter. Output format: For each \\"MAX\\" operation, print the result on a new line. If no number in the sequence satisfies the condition, print \\"NONE\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ x, p ≤ 10^6 SAMPLE INPUT 6 ADD 5 ADD 3 ADD 10 MAX 4 MAX 11 ADD 7 SAMPLE OUTPUT 5 NONE","solution":"import bisect def sequence_operations(operations): sequence = [] results = [] for operation in operations: op, value = operation if op == \\"ADD\\": bisect.insort(sequence, value) elif op == \\"MAX\\": idx = bisect.bisect_left(sequence, value) if idx < len(sequence): results.append(sequence[idx]) else: results.append(\\"NONE\\") return results"},{"question":"You are given a list of cities and their corresponding populations. Your task is to determine the largest contiguous subarray of cities where the population sum is less than or equal to a given threshold. -----Input----- The first line contains two space-separated integers n and L (1 le n le 10000, 1 le L le 10^9) — the number of cities and the population threshold respectively. The second line contains n space-separated integers p_i (1 le p_i le 1000), where p_i represents the population of the i-th city. -----Output----- Print one integer — the maximum length of the contiguous subarray where the sum of populations is less than or equal to the given threshold L. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 Input 6 8 2 2 2 2 2 2 Output 4 Input 3 5 10 20 30 Output 0 -----Note----- In the first example, the subarray [1, 2, 3, 4] has a population sum of 10 which is equal to the threshold, thus the answer is 4. In the second example, the subarray [2, 2, 2, 2] has a population sum of 8 which is equal to the threshold, thus the answer is 4. In the third example, no contiguous subarray has a population sum less than or equal to the threshold 5, thus the answer is 0.","solution":"def largest_subarray_length(n, L, populations): left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += populations[right] while current_sum > L: current_sum -= populations[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an input string that represents a mathematical expression containing numbers and the operators +, -, *, and /, return the result of evaluating the expression. To ensure correctness, the operators have standard precedence rules and all operations are left associative. Assume that all operands are non-negative integers. Example 1: Input: \\"3+5*2\\" Output: 13 Explanation: According to the precedence rules, we first execute 5*2 to get 10, then add 3 to get 13. Example 2: Input: \\"10+2*6-7/2\\" Output: 19 Explanation: According to the precedence rules, we first execute 2*6 to get 12, then 7/2 (integer division) to get 3, then add 10 to 12 to get 22, and finally subtract 3 to get 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `evaluateExpression()` which takes the string expression as input and returns the evaluated result. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(|S|). Constraints: - 1 <= |S| <= 10^5 - The string contains only the characters \'0\' - \'9\', \'+\', \'-\', \'*\', and \'/\'. - There will be no division by zero. - The input expression is guaranteed to be valid.","solution":"def evaluateExpression(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, *, and /. def applyOperation(left, operator, right): if operator == \'+\': return left + right elif operator == \'-\': return left - right elif operator == \'*\': return left * right elif operator == \'/\': return left // right def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def infixToPostfix(expression): output = [] ops_stack = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 output.append(num) continue elif expression[i] in \\"+-*/\\": while ops_stack and precedence(ops_stack[-1]) >= precedence(expression[i]): output.append(ops_stack.pop()) ops_stack.append(expression[i]) i += 1 while ops_stack: output.append(ops_stack.pop()) return output def evaluatePostfix(tokens): stack = [] for token in tokens: if isinstance(token, int): stack.append(token) else: right = stack.pop() left = stack.pop() result = applyOperation(left, token, right) stack.append(result) return stack[0] postfix = infixToPostfix(expression) return evaluatePostfix(postfix)"},{"question":"Tham wants to build a bridge across a river to connect two towns located on opposite banks. The river flows perfectly from north to south and can be represented as a vertical line x = 0 on a 2D Cartesian plane. The banks of the river can be represented as two sets of points: Town-A on the left bank (x < 0) and Town-B on the right bank (x > 0). The bridge must be built such that it starts at a point in Town-A and ends at a point in Town-B. In order to minimize the cost, Tham wants the bridge to be the shortest possible. -----Input----- - The first line of input contains a single integer N_A (1 le N_A le 10^5) — the number of points that form Town-A. - The next N_A lines each contain 2 integers x_i, y_i (-10^6 le x_i le -1, -10^6 le y_i le 10^6) — the coordinates of each point in Town-A. - The next line contains a single integer N_B (1 le N_B le 10^5) — the number of points that form Town-B. - The next N_B lines each contain 2 integers x_j, y_j (1 le x_j le 10^6, -10^6 le y_j le 10^6) — the coordinates of each point in Town-B. -----Output----- Output a single integer — the squared length of the shortest possible bridge. -----Sample Clarification----- - The metric for the cost of building the bridge is the Euclidean distance. However, to avoid floating point precision issues, the squared Euclidean distance should be used. - Squared Euclidean distance between two points (x1, y1) and (x2, y2) is given by (x2 - x1)^2 + (y2 - y1)^2. -----Examples----- Sample Input: 3 -3 2 -2 -1 -4 5 2 4 3 1 -2 Sample Output: 10 Explanation: - The shortest bridge can be built between point (-2, -1) in Town-A and point (1, -2) in Town-B. - The squared Euclidean distance is (1 - (-2))^2 + (-2 - (-1))^2 = 3^2 + (-1)^2 = 9 + 1 = 10.","solution":"def shortest_bridge(N_A, townA_points, N_B, townB_points): minimum_distance = float(\'inf\') for x1, y1 in townA_points: for x2, y2 in townB_points: squared_distance = (x2 - x1) ** 2 + (y2 - y1) ** 2 if squared_distance < minimum_distance: minimum_distance = squared_distance return minimum_distance"},{"question":"Dinesh is a hobbyist gardener who loves arranging his flowerbeds. He has an n × m grid garden where each cell either contains a flower or is empty. He wants to perform the following operation: - Pick any two cells in the grid, swap their contents, and water the entire garden. After performing the operation, Dinesh wants to make sure that no two adjacent (horizontally or vertically) cells both contain flowers. He can swap the cells as many times as he wants and then water the garden finally. Determine whether it is possible for Dinesh to perform the operation as described and ensure no two adjacent cells contain flowers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10) — the number of rows and columns in the grid. The next n lines contain m characters each. Each character is either \'.\' (indicating an empty cell) or \'F\' (indicating a cell with a flower). Output Output \\"YES\\" if it\'s possible for Dinesh to rearrange the flower cells such that no two adjacent cells contain flowers. Otherwise, output \\"NO\\". Examples Input 3 3 F.F .F. F.F Output YES Input 3 3 FFF FFF FFF Output NO Input 2 2 .. F. Output YES Note In the first example, one possible valid configuration is: F.F .F. F.F In the second example, it is impossible to rearrange the flowers such that no two adjacent cells contain flowers. In the third example, no two flowers are adjacent, so it is already a valid configuration.","solution":"def is_possible_to_rearrange(n, m, grid): flowers = sum(row.count(\'F\') for row in grid) max_possible_flowers = ((n + 1) // 2) * ((m + 1) // 2) + (n // 2) * (m // 2) if flowers <= max_possible_flowers: return \\"YES\\" else: return \\"NO\\" # Example usage: # n, m = 3, 3 # grid = [\\"FFF\\", \\"FFF\\", \\"FFF\\"] # print(is_possible_to_rearrange(n, m, grid)) # should return \\"NO\\""},{"question":"Imagine you are developing a card game with a deck of standard playing cards (52 cards with 4 suits: hearts, diamonds, clubs, and spades, each with 13 ranks: Ace, 2, 3, ..., 10, Jack, Queen, King). Each card is represented as a string with a two-character rank (2-10, J, Q, K, A) and a one-character suit (H, D, C, S). For example, the Ace of Spades is represented as \\"AS\\", and the 10 of Hearts is represented as \\"10H\\". Players are dealt a hand of cards and your task is to identify and count the number of pairs in the hand. A pair consists of two cards with the same rank but different suits. For example, the hand [\\"2H\\", \\"2D\\", \\"2S\\", \\"3H\\", \\"3D\\"] contains one pair of 2s and one pair of 3s. ------ Input ------ First line contains T (number of test cases, around 20). Each test case starts with N (number of cards in the hand, 1 ≤ N ≤ 52). Each of the next N lines contains a string representing a card. ------ Output ------ For each test case, output the number of pairs found in the hand. ----- Sample Input 1 ------ 3 5 2H 2D 2S 3H 3D 4 10H 10C KH KD 3 5H 5C 5S ----- Sample Output 1 ------ 2 2 1 ----- Explanation 1 ------ Case 1: There is one pair of 2s (2H 2D) and one pair of 3s (3H 3D). Case 2: There is one pair of 10s (10H 10C) and one pair of Kings (KH KD). Case 3: There is one pair of 5s (5H 5C) even though there are three 5s in total.","solution":"def count_pairs(test_cases): Takes in a list of test cases, each containing a list of card strings. Returns a list of integers representing the number of pairs in each hand. results = [] for case in test_cases: rank_count = {} # Count occurrences of each rank for card in case: rank = card[:-1] # Extract the rank part of the card if rank in rank_count: rank_count[rank] += 1 else: rank_count[rank] = 1 # Count the number of pairs pair_count = sum(count // 2 for count in rank_count.values()) results.append(pair_count) return results def parse_input(input_data): Parses the input data into the format required by count_pairs function. lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 case = [] for _ in range(N): case.append(lines[index]) index += 1 test_cases.append(case) return test_cases"},{"question":"**Objective:** Implement a function to find the nearest palindrome number to a given number `n`. **Description:** A palindrome number is a number that reads the same backwards as forwards. The task is to find the smallest nearest palindrome number to a given integer `n`. If there are two palindrome numbers equally close to `n`, return the smaller one. **Function Signature:** ```python def nearest_palindrome(n: int) -> int: ``` **Input:** - An integer `n` (0 ≤ n ≤ 10^8). **Output:** - An integer representing the nearest palindrome number to `n`. **Examples:** ```python assert nearest_palindrome(123) == 121 assert nearest_palindrome(888) == 888 assert nearest_palindrome(100) == 101 assert nearest_palindrome(0) == 0 assert nearest_palindrome(12345) == 12321 ``` **Note:** In case of ties, return the smaller palindrome. For example, if the input is 100, the nearest palindromes are 99 and 101. Since 99 and 101 are equally close, return 99 as the output.","solution":"def is_palindrome(num): Helper function to check if a number is a palindrome. return str(num) == str(num)[::-1] def nearest_palindrome(n: int) -> int: Finds the smallest nearest palindrome number to the given number n. if is_palindrome(n): return n lower, upper = n - 1, n + 1 while True: if is_palindrome(lower): return lower if is_palindrome(upper): return upper lower -= 1 upper += 1"},{"question":"Write a function `atm_withdrawal` that: - Takes the amount of money (integer) to be withdrawn. - Returns a dictionary with the minimal number of each denomination that the ATM will dispense. The ATM contains 100, 50, 20, and 10 unit bills. # Rules: - The ATM always tries to dispense the highest denomination bills first. - If it is not possible to dispense the exact amount with the available denominations, the function should return an empty dictionary. # Example: ```python atm_withdrawal(280) == {\'100\': 2, \'50\': 1, \'20\': 1, \'10\': 1} atm_withdrawal(370) == {\'100\': 3, \'50\': 1, \'20\': 1} atm_withdrawal(15) == {} ```","solution":"def atm_withdrawal(amount): Returns a dictionary with the minimal number of each denomination that the ATM will dispense for the given amount. if amount % 10 != 0: return {} denominations = [100, 50, 20, 10] result = {} for denom in denominations: count = amount // denom if count > 0: result[str(denom)] = count amount -= count * denom return result"},{"question":"A string is called balanced if its characters can be rearranged such that no two adjacent characters are the same. Given a string s consisting of lowercase English letters, determine whether it is possible to rearrange the characters of s to form a balanced string. If it is possible, print the rearranged balanced string. If it is not possible, print \\"IMPOSSIBLE\\". Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). Output If it is possible to rearrange the characters of s to form a balanced string, print the rearranged string. If it is not possible, print \\"IMPOSSIBLE\\". Examples Input aab Output aba Input aaab Output IMPOSSIBLE Input aabbcc Output abcabc Note In the first test case, the string \\"aab\\" can be rearranged to form \\"aba\\", which is balanced. In the second test case, there is no way to rearrange the string \\"aaab\\" to avoid having two adjacent \'a\' characters, so the output is \\"IMPOSSIBLE\\". In the third test case, one of the possible balanced arrangements of \\"aabbcc\\" is \\"abcabc\\". Other valid arrangements include \\"acbacb\\".","solution":"from collections import Counter def rearrange_balanced(s): Returns a rearranged balanced version of the string, or \'IMPOSSIBLE\' if it can\'t be balanced n = len(s) if n == 1: return s # Count frequencies of characters freq = Counter(s) max_freq = max(freq.values()) # If the highest frequency character count is more than half the length of string + 1, it\'s impossible if max_freq > (n + 1) // 2: return \\"IMPOSSIBLE\\" # Sort characters by frequency sorted_chars = sorted(freq, key=lambda x: (-freq[x], x)) # Create a result array filled with None result = [None] * n # Place the most frequent characters at even positions first i = 0 for char in sorted_chars: count = freq[char] for _ in range(count): result[i] = char i += 2 if i >= n: i = 1 return \\"\\".join(result)"},{"question":"Given an array of integers, return the lexicographically smallest subsequence of a given length k from the array. Example 1: Input: arr = [3, 5, 2, 6], k = 2 Output: [2, 6] Explanation: The subsequences of length 2 are [3, 5], [3, 2], [3, 6], [5, 2], [5, 6], and [2, 6]. The lexicographically smallest subsequence is [2, 6]. Example 2: Input: arr = [9, 8, 7, 3, 4, 5], k = 3 Output: [3, 4, 5] Explanation: The subsequences of length 3 are [9, 8, 7], [9, 8, 3], [9, 8, 4], [9, 8, 5], [9, 7, 3], and many more. The lexicographically smallest subsequence is [3, 4, 5]. Your Task: You do not need to read input or print anything. Your task is to complete the function smallestSubsequence() which takes the array arr and an integer k as input parameters and returns the lexicographically smallest subsequence of length k. Expected Time Complexity: O(n) Expected Auxiliary Space: O(k) Constraints: 1 ≤ len(arr) ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ k ≤ len(arr)","solution":"def smallestSubsequence(arr, k): Returns the lexicographically smallest subsequence of length k from the array. stack = [] to_discard = len(arr) - k for num in arr: while stack and stack[-1] > num and to_discard > 0: stack.pop() to_discard -= 1 stack.append(num) return stack[:k]"},{"question":"You are given a rectangular grid with dimensions m x n, representing a playing field for a game. The grid is initialized with different objects represented by positive integers, and the empty spaces are marked by the integer zero. The goal of the game is to move all objects up as much as possible without changing their horizontal positions or the order of their vertical positions. You need to implement a function that performs this operation. Specifically, you take a grid as input and return a grid where all objects have moved up to the highest possible position in their respective columns without being blocked by other objects. Input - The first line contains two integers, m and n (1 ≤ m, n ≤ 100), which are the dimensions of the grid. - Each of the next m lines contains n integers that describe the objects in the grid. Each integer is either a positive number representing an object or zero representing an empty space. Output - Print m lines with n integers, representing the grid after all objects have been moved up. Example Input 5 5 0 0 3 0 0 0 2 0 0 0 0 0 0 4 0 0 2 0 3 1 1 0 0 0 0 Output 1 2 3 4 1 0 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Explanation In the provided input grid, the objects have been moved up as much as possible without changing their horizontal positions and their relative vertical positions. The grid is updated accordingly and printed as the output.","solution":"def move_objects_up(grid): Moves all the objects in the grid up as much as possible without changing their horizontal positions or the order of their vertical positions. m = len(grid) n = len(grid[0]) for col in range(n): # Extract the non-zero elements in the current column objects = [grid[row][col] for row in range(m) if grid[row][col] != 0] # Position them at the top for i in range(m): if i < len(objects): grid[i][col] = objects[i] else: grid[i][col] = 0 return grid"},{"question":"In the kingdom of Zimno, there are N cities connected by M one-way roads. Each city is numbered from 1 to N. The i-th road goes from city u_i to city v_i. Due to some recent conflicts, Zimno\'s king wants to know if there\'s a way to travel from the capital city (city 1) to any other city and then back to the capital using two different roads in such a way that the first road leads out of the capital and the second road leads back to it. -----Constraints----- - 2 ≤ N ≤ 200,000 - 1 ≤ M ≤ 200,000 - 1 ≤ u_i, v_i ≤ N - u_i ≠ v_i - There can\'t be two roads with the same starting and ending cities. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- If there exists a city that can be reached from the capital and from which you can return to the capital using two different roads, print YES; otherwise, print NO. -----Sample Input----- 4 4 1 2 2 3 3 1 1 3 -----Sample Output----- YES","solution":"from collections import defaultdict, deque def can_return_to_capital(N, M, edges): # Create adjacency lists for the graph and its reverse graph = defaultdict(list) rev_graph = defaultdict(list) for u, v in edges: graph[u].append(v) rev_graph[v].append(u) def bfs(source, adj_list): reachable = [False] * (N + 1) queue = deque([source]) reachable[source] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not reachable[neighbor]: reachable[neighbor] = True queue.append(neighbor) return reachable # Find all reachable nodes from the capital (city 1) reachable_from_capital = bfs(1, graph) # Find all nodes that can reach the capital reachable_to_capital = bfs(1, rev_graph) # Check if there exists a city that is reachable from the capital and can also return to the capital for city in range(2, N + 1): # city 1 is the capital, skip it if reachable_from_capital[city] and reachable_to_capital[city]: return \\"YES\\" return \\"NO\\""},{"question":"Given two integers N and K, perform the following operations: 1. Generate a list of the first N natural numbers. 2. Rotate this list to the right by K positions. Input: The first line contains a single integer denoting the number of test cases (T). For each test case, the first line contains the two integers N and K. Output: For each test case, print the rotated list in a single line. Separate the numbers with a space. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ K ≤ 100 Example Input: 3 5 2 6 3 4 1 Example Output: 4 5 1 2 3 4 5 6 1 2 3 4 1 2 3 Explanation: For the first test case, the original list is [1, 2, 3, 4, 5]. After rotating 2 positions to the right, it becomes [4, 5, 1, 2, 3].","solution":"def rotate_list(N, K): Generates a list of the first N natural numbers and rotates it to the right by K positions. original_list = list(range(1, N + 1)) K = K % N # In case K is larger than N rotated_list = original_list[-K:] + original_list[:-K] return rotated_list def process_test_cases(test_cases): Process multiple test cases and returns the rotated lists for each test case. results = [] for N, K in test_cases: rotated = rotate_list(N, K) results.append(\\" \\".join(map(str, rotated))) return results"},{"question":"In a small village, there are n houses arranged in a row. Each house has a certain number of coins kept inside it, represented by an array A of length n. A thief is planning to rob the houses, but there is one constraint: if the thief robs a house, they cannot rob the houses directly adjacent to it (i.e., they must skip at least one house between robbing two houses). The goal is to determine the maximum number of coins the thief can rob without robbing two adjacent houses. -----Input----- The first line contains an integer n (1 leq n leq 1000), the number of houses. The second line contains n integers A_1, A_2, ldots, A_n (0 leq A_i leq 1000), the number of coins in each house. -----Output----- Output an integer denoting the maximum number of coins the thief can rob. -----Examples----- Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12 Input 3 4 5 6 Output 10 Input 1 7 Output 7 -----Note----- In the first example, the thief can rob house 1 and house 3 for a total of 1 + 3 = 4 coins. In the second example, the optimal solution is to rob house 2 and house 4 for a total of 7 + 5 = 12 coins. In the third example, the thief can rob house 1 and house 3 for a total of 4 + 6 = 10 coins. In the fourth example, there is only one house to rob, so the thief takes 7 coins.","solution":"def max_coins(houses): Given an array of coins in houses, returns the maximum number of coins that can be robbed without robbing two adjacent houses. n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(houses[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"Andrew is managing a chain of warehouses where he keeps track of boxes shipped in and out daily. Each box is identified by a unique ID and has a weight assigned to it. Andrew wants to automate the management process by keeping a record of the total weight of boxes currently in each warehouse. To achieve this, he needs a system that can handle the following operations: 1. Add a box with a specific weight to a warehouse. 2. Remove a box with a specific weight from a warehouse. 3. Retrieve the total weight of all boxes currently in a specific warehouse. Please write a program to help Andrew manage these operations efficiently. -----Input----- The first line contains a single integer Q denoting the number of operations. Then Q lines follow. Each line represents one of the following operations: - \\"ADD warehouse_id box_id weight\\": Add a box with a given weight to the specified warehouse. - \\"REMOVE warehouse_id box_id weight\\": Remove a box with a given weight from the specified warehouse. - \\"TOTAL warehouse_id\\": Retrieve the total weight of all boxes currently in the specified warehouse. -----Output----- For each \\"TOTAL\\" operation, output a single line containing the total weight of all boxes in the specified warehouse. -----Constraints----- 1 < Q ≤ 1,000,000 1 ≤ warehouse_id ≤ 1,000,000 1 ≤ box_id ≤ 1,000,000 1 ≤ weight ≤ 10,000 Each warehouse can have up to 100,000 unique box IDs at any given time. -----Example----- Input: 8 ADD 1 101 50 ADD 1 102 70 ADD 2 201 30 TOTAL 1 REMOVE 1 101 50 TOTAL 1 ADD 2 202 40 TOTAL 2 Output: 120 70 70","solution":"def warehouse_management(operations): warehouses = {} result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": warehouse_id = int(parts[1]) box_id = int(parts[2]) weight = int(parts[3]) if warehouse_id not in warehouses: warehouses[warehouse_id] = {} warehouses[warehouse_id][box_id] = weight elif command == \\"REMOVE\\": warehouse_id = int(parts[1]) box_id = int(parts[2]) weight = int(parts[3]) if warehouse_id in warehouses and box_id in warehouses[warehouse_id]: del warehouses[warehouse_id][box_id] elif command == \\"TOTAL\\": warehouse_id = int(parts[1]) total_weight = sum(warehouses.get(warehouse_id, {}).values()) result.append(total_weight) return result # Example usage: # operations = [ # \\"ADD 1 101 50\\", # \\"ADD 1 102 70\\", # \\"ADD 2 201 30\\", # \\"TOTAL 1\\", # \\"REMOVE 1 101 50\\", # \\"TOTAL 1\\", # \\"ADD 2 202 40\\", # \\"TOTAL 2\\" # ] # print(warehouse_management(operations)) # Output: [120, 70, 70]"},{"question":"You are given a string s of length n, which contains only the characters \'a\' and \'b\'. You can perform the following operation any number of times: * Select any substring t of s, and change all characters \'a\' to \'b\' and all characters \'b\' to \'a\' in t. Your task is to determine the minimum number of operations required to convert string s into a string where all characters are the same (either all \'a\' or all \'b\'). Input The first line contains an integer t (1 ≤ t ≤ 100) denoting the number of test cases in the input. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5). Output For each test case, print the minimum number of operations required to make all characters in s the same. Example Input 3 abab aaaa bbaa Output 1 0 1","solution":"def min_operations_to_uniform_string(t, test_cases): Returns the minimum number of operations required to convert each string in the test_cases list into a string where all characters are the same. results = [] for s in test_cases: count_a = s.count(\'a\') count_b = s.count(\'b\') results.append(min(count_a, count_b)) return results"},{"question":"You are given a string `s` consisting of lowercase letters. You can remove characters from the string in such a way that the resulting string contains no consecutive characters that are the same. Your task is to determine the minimum number of characters that need to be removed to achieve this. -----Constraints----- - 1 leq |s| leq 10^5 -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print a single integer, the minimum number of characters that need to be removed. -----Sample Input----- aabbca -----Sample Output----- 2 When the optimal way is to remove the second \'a\' and the second \'b\', resulting in the string \\"abca\\", which has no consecutive characters that are the same.","solution":"def min_removals_to_avoid_consecutive_duplicates(s): Determines the minimum number of characters that need to be removed from the string `s` to ensure no consecutive characters are the same. :param s: A string consisting of lowercase letters. :return: The minimum number of characters that need to be removed. removal_count = 0 previous_character = \'\' for current_character in s: if current_character == previous_character: removal_count += 1 previous_character = current_character return removal_count"},{"question":"Given a list of meetings represented by tuples where each tuple contains two integers (startTime, endTime) representing the start and end time of a meeting, return the minimum number of meeting rooms required to hold all the meetings. If a meeting ends at the same time another starts, they do not overlap and can use the same room. Example 1: Input: meetings = [(0, 30), (5, 10), (15, 20)] Output: 2 Explanation: Two meeting rooms are required. One for meetings (0, 30) and (15, 20), and another for meeting (5, 10). Example 2: Input: meetings = [(7, 10), (2, 4)] Output: 1 Explanation: One meeting room is sufficient as the two meetings do not overlap. Your Task: You don\'t need to read or print anything. Your task is to complete the function minMeetingRooms() which takes a list of meetings as the input parameter and returns an integer representing the minimum number of meeting rooms required. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: 1 <= len(meetings) <= 10^4 0 <= startTime < endTime <= 10^6","solution":"import heapq def minMeetingRooms(meetings): Returns the minimum number of meeting rooms required to hold all the meetings. Parameters: meetings (List[Tuple[int, int]]): List of meetings represented by start and end times. Returns: int: Minimum number of meeting rooms required. if not meetings: return 0 # Sort the meetings by their start times meetings.sort(key=lambda x: x[0]) # Initialize a min-heap to keep track of meeting end times min_heap = [] # Go through each meeting for meeting in meetings: # If the earliest end time is less than or equal to the current start time, pop the heap if min_heap and min_heap[0] <= meeting[0]: heapq.heappop(min_heap) # Push the current end time to the heap heapq.heappush(min_heap, meeting[1]) # The size of the heap is the number of meeting rooms required return len(min_heap)"},{"question":"A group of alien scientists has developed a unique communication system based on a simple encryption technique. Each message is composed of uppercase English letters (\'A\' to \'Z\') and the encryption works by shifting each letter by a fixed number of positions in the alphabet. This is known as a Caesar cipher. The aliens have asked you to help them with a decryption tool that can decode a given message and recover the original text. The twist is that they want a list of all possible original texts by trying all possible shift levels from 0 to 25. # Task Write a function that takes an encrypted message and produces all possible original texts by trying every possible shift from 0 to 25. # Input - A single line containing the encrypted message composed of uppercase English letters (\'A\'-\'Z\'). The message length is between 1 and 100 characters. # Output - Print 26 lines, each containing the decrypted message for a shift level from 0 to 25 in order. That is, the first line will contain the decrypted message with a shift of 0, the second line will contain the decrypted message with a shift of 1, and so on. Example # Input ``` BQQMF ``` # Output ``` BQQMF APPLE ZOKKD YNJJC XMIIB WLHHA VKGGZ UJFFY TIEEX SHDDW RGCCV QFBBU PEAAT ODZZS NCYYR MBXXQ LAWXP KZVWO JYUNN IXTMM HWSLM GVRKL FUQJK ETPIJ DSOHJ CRNGI BQMHF ```","solution":"def decrypt_caesar_cipher(encrypted_message): This function takes an encrypted message consisting of uppercase English letters and returns a list of all possible decrypted messages by trying every possible shift from 0 to 25. decrypted_messages = [] for shift in range(26): decrypted_message = \\"\\" for char in encrypted_message: if char.isalpha(): new_char = chr((ord(char) - 65 - shift) % 26 + 65) decrypted_message += new_char else: decrypted_message += char decrypted_messages.append(decrypted_message) return decrypted_messages # Example usage: # encrypted_message = \\"BQQMF\\" # for message in decrypt_caesar_cipher(encrypted_message): # print(message)"},{"question":"A list of integers is said to be \\"balanced\\" if the sum of the first half is equal to the sum of the second half. Given a list of integers with even length, determine whether the list is balanced. -----Constraints----- - 2 leq length of the list leq 100 - Each element in the list is an integer between -1000 and 1000 -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Output \\"YES\\" if the list is balanced, otherwise output \\"NO\\". -----Sample Input----- 6 1 2 3 3 2 1 -----Sample Output----- YES -----Sample Input----- 4 1 1 1 2 -----Sample Output----- NO","solution":"def is_balanced(lst): Determines if a list is balanced. A list is balanced if the sum of the first half equals the sum of the second half. Parameters: lst (list of int): The list of integers. Returns: str: \'YES\' if the list is balanced, \'NO\' otherwise. n = len(lst) first_half = lst[:n//2] second_half = lst[n//2:] if sum(first_half) == sum(second_half): return \\"YES\\" else: return \\"NO\\""},{"question":"Implement a function to perform matrix multiplication. Given two matrices, A and B, their multiplication is possible if and only if the number of columns in A is equal to the number of rows in B. The result of this multiplication is a new matrix C, where each element c[i][j] is computed as the sum of the products of the elements from the i-th row of matrix A and the j-th column of matrix B. You need to read N, M, and P from the input, where N is the number of rows in A, M is the number of columns in A (and the number of rows in B), and P is the number of columns in B. Then, read the two matrices A and B from the input and compute their product matrix C. -----Constraints----- - All integers in the input are non-negative. - 1 leq N, M, P leq 100 - 0 leq A_{i,j}, B_{i,j} leq 100 -----Input----- Input is given from Standard Input in the following format: N M P A_{11} A_{12} ... A_{1M} A_{21} A_{22} ... A_{2M} . . A_{N1} A_{N2} ... A_{NM} B_{11} B_{12} ... B_{1P} B_{21} B_{22} ... B_{2P} . . B_{M1} B_{M2} ... B_{MP} -----Output----- Print matrix C. Each row of the output matrix should be printed on a new line, with each element separated by a space. There should be no extra space at the end of the lines. -----Sample Input----- 2 3 2 1 2 3 4 5 6 7 8 9 10 11 12 -----Sample Output----- 58 64 139 154 Matrix A multiplied by Matrix B will result in Maria C. The output displays each row of matrix C on a new line.","solution":"def matrix_multiplication(A, B, N, M, P): Multiplies two matrices A and B where A is of size NxM and B is of size MxP. Args: A (list of list of int): Matrix A of size NxM. B (list of list of int): Matrix B of size MxP. N (int): Number of rows in matrix A. M (int): Number of columns in matrix A (and number of rows in matrix B). P (int): Number of columns in matrix B. Returns: list of list of int: Resultant matrix C after multiplication. # Initialize matrix C with zeros C = [[0 for _ in range(P)] for _ in range(N)] # Perform matrix multiplication for i in range(N): for j in range(P): for k in range(M): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"You are given a string representing a list of items and their prices, formatted as follows: ``` s = \\"apple:1.20;banana:0.50;cherry:2.00;date:3.10;elderberry:1.50;fig:2.50;grape:0.90\\"; ``` Write a program that will: - Convert the prices from strings to floating-point numbers. - Sort the items by their prices in ascending order. If two items have the same price, sort them alphabetically by their names. - Return a string that lists the sorted items, where each item is enclosed in parentheses with the name followed by the price, formatted to two decimal places. For example, given the input string `s`, the output of the function `sort_items_by_price(s)` should be: ``` \\"(BANANA:0.50)(GRAPE:0.90)(APPLE:1.20)(ELDERBERRY:1.50)(CHERRY:2.00)(FIG:2.50)(DATE:3.10)\\" ``` # Notes - The input string contains only lowercase letters for item names and prices in the format of floating-point numbers. - Consider that all items have different names.","solution":"def sort_items_by_price(s): Sort items by their prices in ascending order. If prices are the same, sort by names alphabetically. Returns a formatted string of the sorted items. items = s.split(\\";\\") item_list = [] # Split items and convert prices to float for item in items: name, price = item.split(\\":\\") item_list.append((name.upper(), float(price))) # Sort items first by price, then by name item_list.sort(key=lambda x: (x[1], x[0])) # Create the result string in the required format result = \\"\\".join([f\\"({name}:{price:.2f})\\" for name, price in item_list]) return result"},{"question":"Write a function `findSpecialIndex` that takes in a string `s` containing only lowercase alphabetic characters and returns the index of the first non-repeating character. If all characters in the string repeat or the string is empty, return -1. Input The input is a single string `s` (0 ≤ length of s ≤ 10^5). Output The output should be a single integer representing the index (0-based) of the first non-repeating character. If no such character exists, return -1. Examples Input leetcode Output 0 Input loveleetcode Output 2 Input aabbcc Output -1 Note In the first example, the first non-repeating character is \'l\' which is at index 0. In the second example, the first non-repeating character is \'v\' which is at index 2. In the last example, all characters are repeating, hence the output is -1.","solution":"def findSpecialIndex(s): Returns the index of the first non-repeating character in the string `s`. If all characters repeat or the string is empty, returns -1. from collections import Counter # Create a counter object to count character occurrences count = Counter(s) # Iterate through the string to find the first non-repeating character for index, char in enumerate(s): if count[char] == 1: return index # If no non-repeating character is found return -1"},{"question":"A group of students is playing a card game during their break. The deck of cards consists of N cards numbered from 1 to N. The cards are initially placed in random order. The goal is to sort the cards in ascending order. However, the students can only perform a specific type of operation: they select any two cards adjacent to each other and swap them. Determine the minimum number of adjacent swaps required to sort the cards in ascending order. ------ Input Format ------ - First line contains T, the number of testcases. Each testcase follows with: - The first line of each testcase contains a single integer N, the number of cards. - The second line contains N integers, representing the initial order of the cards. ------ Output Format ------ For each test case, print the minimum number of adjacent swaps required to sort the cards in ascending order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ N (All values of A_i are distinct) ----- Sample Input 1 ------ 3 4 4 3 2 1 5 1 2 3 4 5 3 3 1 2 ----- Sample Output 1 ------ 6 0 2 ----- Explanation 1 ------ Test case 1: The deck 4 3 2 1 can be sorted in 6 adjacent swaps as follows: [4, 3, 2, 1] -> [3, 4, 2, 1] -> [3, 2, 4, 1] -> [3, 2, 1, 4] -> [2, 3, 1, 4] -> [2, 1, 3, 4] -> [1, 2, 3, 4]. Test case 2: The deck 1 2 3 4 5 is already sorted, so no swaps are required. Test case 3: The deck 3 1 2 requires 2 swaps: [3, 1, 2] -> [1, 3, 2] -> [1, 2, 3].","solution":"def count_inversions(arr): # Merge sort based function to count inversions if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): i, j = 0, 0 merged = [] inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inversions += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, inversions def minimum_swaps_to_sort(cards): _, inversions = count_inversions(cards) return inversions def process_test_cases(test_cases): results = [] for cards in test_cases: results.append(minimum_swaps_to_sort(cards)) return results # Read input data def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 cards = list(map(int, data[index:index + N])) index += N test_cases.append(cards) return test_cases def main(): test_cases = read_input() results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Consider a grid of size N x N filled with water. There are some obstacles on the grid that restrict water flow. You are given the starting point (\'s\') and the destination point (\'d\') of water flow. Determine if there is a possible path from the start point to the destination without crossing any obstacles. The water can only flow in four directions: up, down, left, and right. The grid is provided as a list of strings where: - \'O\' represents an obstacle, - \'.\' represents water, - \'s\' represents the starting point, - \'d\' represents the destination. Write a function that takes the grid and returns a boolean value indicating whether the water can reach the destination. -----Input----- - The first line contains an integer N, the size of the grid (1 <= N <= 100). - The next N lines each contain a string of length N, representing the grid. -----Output----- Print \\"True\\" if there is a path from the start to the destination, otherwise print \\"False\\". -----Example----- Input 5 OO.dO O.... O.O.O O.s.O OOOOO Output True","solution":"def can_water_flow_to_destination(N, grid): start = None destination = None # Find the coordinates of \'s\' and \'d\' for i in range(N): for j in range(N): if grid[i][j] == \'s\': start = (i, j) elif grid[i][j] == \'d\': destination = (i, j) if not start or not destination: return False # Create a visited matrix visited = [[False for _ in range(N)] for _ in range(N)] # Define directions for movement directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Depth-First Search (DFS) function def dfs(x, y): if (x, y) == destination: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] in [\'.\', \'d\']: if dfs(nx, ny): return True return False # Start DFS from the starting point return dfs(start[0], start[1])"},{"question":"You are given a string `s` of length `n` consisting of lowercase English letters and another string `t` of length `m` consisting of lowercase English letters. Your task is to determine the minimum number of characters to delete from `s` and add to `s` to create a subsequence of `t`. A subsequence is a sequence derived by deleting some or none of the characters from a given string without changing the order of the remaining characters. Return the minimum number of delete and add operations needed from `s` to make a subsequence of the string `t`. -----Input----- The first line contains a single integer `n` (1 leq n leq 10^5) — the length of the string `s`. The second line contains the string `s` of length `n` consisting of lowercase English letters. The third line contains a single integer `m` (1 leq m leq 10^5) — the length of the string `t`. The fourth line contains the string `t` of length `m` consisting of lowercase English letters. -----Output----- Print a single integer — the minimum number of delete and add operations required to make `s` a subsequence of `t`. -----Examples----- Input 5 abcde 3 ace Output 2 Input 6 abcdef 4 abcf Output 2 Input 4 abcd 6 afbcge Output 4 -----Note----- In the first example, by deleting \'b\' and \'d\' from `s`, we get the subsequence \\"ace\\" which is a subsequence of `t`. In the second example, by deleting \'d\' and \'e\' from `s`, we get the subsequence \\"abcf\\" which is a subsequence of `t`. In the third example, by adding \'a\', \'f\', \'g\', and \'e\' and deleting \'d\' from `s` we can have subsequence \\"afbcg\\" which is a subsequence of `t`.","solution":"def min_operations_to_subsequence(n: int, s: str, m: int, t: str) -> int: # Create a dictionary to keep track of character frequencies in \'t\' from collections import Counter t_counter = Counter(t) # Create a dictionary to keep track of character frequencies in \'s\' s_counter = Counter(s) # Count the number of characters in \'s\' that are also needed in \'t\' common_char_count = sum(min(s_counter[char], t_counter[char]) for char in t_counter) # Total operations = (Length of t - common characters) + (Length of s - common characters) return (m - common_char_count) + (n - common_char_count)"},{"question":"You are given a list of integers. Your task is to determine whether there exists a pair of different integers in the list such that one of them divides the other. Return \\"Yes\\" if such a pair exists, and \\"No\\" otherwise. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains: - An integer n (2 le n le 1000) — the number of integers in the list. - A list of n integers a_1, a_2, ... , a_n separated by spaces (1 le a_i le 10^9). -----Output----- Print t lines. For each test case, output \\"Yes\\" if there exists a pair of different integers in the list such that one of them divides the other, and \\"No\\" otherwise. -----Example----- Input 3 5 10 5 3 4 2 4 7 11 13 17 3 8 32 64 Output Yes No Yes","solution":"def check_divisible_pairs(t, test_cases): results = [] for n, numbers in test_cases: numbers_set = set(numbers) found = False for i in range(n): for j in range(i+1, n): if (numbers[i] % numbers[j] == 0 or numbers[j] % numbers[i] == 0): results.append(\\"Yes\\") found = True break if found: break if not found: results.append(\\"No\\") return results"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped between mountains of various heights, write an algorithm that computes how much water it is able to trap after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above array represents the following elevation map (where width is 1): ``` # # # # ``` In this case, 6 units of rainwater (represented by the six X\'s) are being trapped: ``` # # #XXXX# X# ``` Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The above array represents the following elevation map (where width is 1): ``` # # # # # # ``` In this case, 9 units of rainwater are being trapped: ``` # #XX# #XXXX# ``` Note: - The input list \\"height\\" will have at least one and at most 10^4 non-negative integers. - The height of each mountain will be at most 10^5 units.","solution":"def trap(height): Calculate the total amount of trapped rainwater. :param height: List[int] - list of non-negative integers representing the heights. :return: int - total amount of trapped rainwater. if not height: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] total_water = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) total_water += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) total_water += max(0, right_max - height[right]) return total_water"},{"question":"You are given a grid with N rows and M columns. Each cell contains either a 1 or a 0. Your task is to find the largest rectangle containing all 1\'s and return its area. The grid is represented in a text format where each row is a string of length M. Write a program to solve this problem efficiently. Constraints * 1 ≦ N, M ≦ 1,000 * The grid contains only \'0\'s and \'1\'s. Input The input is given from Standard Input in the following format: N M r1 r2 : rN Output Print a single integer representing the area of the largest rectangle containing all 1\'s. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 2 3 111 111 Output 6","solution":"def largest_rectangle_area(matrix): def max_histogram_area(histogram): stack, max_area, index = [], 0, 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): heights[j] = heights[j] + 1 if matrix[i][j] == \'1\' else 0 max_area = max(max_area, max_histogram_area(heights)) return max_area if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().strip().split() N, M = int(data[0]), int(data[1]) grid = data[2:] print(largest_rectangle_area(grid))"},{"question":"You are given two unsorted integer arrays `arr1` and `arr2`. Your task is to find the intersection of these two arrays and return the result as an array of integers. Each element in the result should appear as many times as it shows in both arrays. The result can be in any order. Example 1: Input: arr1 = [1, 2, 2, 1] arr2 = [2, 2] Output: [2, 2] Example 2: Input: arr1 = [4, 9, 5] arr2 = [9, 4, 9, 8, 4] Output: [4, 9] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `arrayIntersection()` which takes two integer arrays `arr1` and `arr2` as parameters and returns the intersection array. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(min(N, M)) Constraints: - 1 ≤ arr1.length, arr2.length ≤ 10^5 - 0 ≤ arr1[i], arr2[i] ≤ 10^9","solution":"from collections import Counter def arrayIntersection(arr1, arr2): Returns the intersection of two integer arrays as an array of integers. Each element in the result appear as many times as it shows in both arrays. # Count the frequency of each element in both arrays count1 = Counter(arr1) count2 = Counter(arr2) # Find the intersection intersection = [] for num in count1: if num in count2: intersection.extend([num] * min(count1[num], count2[num])) return intersection"},{"question":"You are given an m x n matrix of distinct integers with m rows (1 ≤ m ≤ 500) and n columns (1 ≤ n ≤ 500). Each row and each column of the matrix is sorted in ascending order. You need to find the target integer t in the matrix and return its position as (row, column). If the target is not present in the matrix, return (-1, -1). Write a program to solve this problem. Input: The first line contains three integers m, n, and t (1 ≤ t ≤ 10^9) — the number of rows, the number of columns, and the target integer. The next m lines each contain n integers, representing the matrix elements. Output: Print two integers (row, column) — the position of the target in the matrix (1-based indexing). If the target is not found, print -1 -1. Example: Input: 3 4 5 1 4 7 11 2 5 8 12 3 6 9 16 Output: 2 2 Another Example: Input: 3 4 20 1 4 7 11 2 5 8 12 3 6 9 16 Output: -1 -1 Explanation: In the first example, \'5\' is found at position (2, 2). In the second example, \'20\' is not present in the matrix so the output is -1 -1. Note: You can assume that the matrix conforms to the problem constraints, i.e., each row and each column is sorted in ascending order.","solution":"def find_target_in_matrix(matrix, m, n, t): Finds the position of the target integer t in the given matrix. Returns the position as (row, column) (1-based indexing) if found, otherwise returns (-1, -1) if not found. row = 0 col = n - 1 # start from the top-right corner while row < m and col >= 0: if matrix[row][col] == t: return row + 1, col + 1 elif matrix[row][col] > t: col -= 1 else: row += 1 return -1, -1"},{"question":"You are given an array of integers and an integer k. Your task is to determine if there exist two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most k, and the absolute difference between i and j is at most m. Input - The first line contains two integers, n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) where n is the length of the array. - The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9). Output Print \\"YES\\" if such indices exist, otherwise print \\"NO\\". Example Input 5 2 1 2 3 1 5 Output YES Explanation: In this example, there are indices i = 0 and j = 3 such that the absolute difference between nums[i] and nums[j] is |1 - 1| ≤ k, and the difference between the indices i and j is |0 - 3| ≤ 2. Thus, the output is \\"YES\\".","solution":"def check_indices(nums, k, m): n = len(nums) for i in range(n): for j in range(i + 1, min(i + m + 1, n)): if abs(nums[i] - nums[j]) <= k: return \\"YES\\" return \\"NO\\""},{"question":"A store offers a \\"three-for-two\\" discount on apples, where for every three apples a customer buys, one apple is free. Write a function `totalCost` that takes an integer `N` representing the number of apples purchased and an integer `C` representing the cost per apple. The function should return the total cost the customer has to pay after accounting for the discount. Example 1: Input: N = 3, C = 5 Output: 10 Explanation: For every three apples, one is free. Therefore, the customer pays for 2 apples, hence 2 * 5 = 10. Example 2: Input: N = 7, C = 4 Output: 20 Explanation: For every three apples, one is free. The customer buys 7 apples but only needs to pay for 2 sets of 2 apples (4 apples in total) plus remaining 2 apples, hence 4 * 4 + 2 * 4 = 20. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `totalCost()` which takes two integers `N` and `C` as input parameters and returns the total cost the customer has to pay after applying the discount. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^9 1 ≤ C ≤ 100","solution":"def totalCost(N, C): Returns the total cost the customer has to pay after accounting for the three-for-two discount on apples. N : int : Number of apples purchased C : int : Cost per apple return : int : Total cost after discount # Number of apples the customer actually has to pay for count_chargeable_apples = (N // 3) * 2 + (N % 3) # Total cost total_cost = count_chargeable_apples * C return total_cost"},{"question":"Write a function that takes a string of words separated by spaces and returns the number of words containing at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\', case insensitive). For example: `\\"Hello world\\"` should return `2` because both \\"Hello\\" and \\"world\\" contain at least one vowel. `\\"Sky is blue\\"` should return `2` because both \\"is\\" and \\"blue\\" contain at least one vowel, while \\"Sky\\" does not contain any vowels. `\\"bcd fg h\\"` should return `0` because none of the words contain any vowels. For this task, a word is defined as a sequence of characters separated by spaces. # Input A string of words separated by spaces. Each word consists of `[a-z],[A-Z]` and the length of the input string is `0 < len(string) < 100`. # Output An integer representing the number of words containing at least one vowel.","solution":"def count_words_with_vowels(sentence): Returns the number of words with at least one vowel in the given sentence. Parameters: sentence (str): A string of words separated by spaces. Returns: int: The number of words containing at least one vowel. vowels = set(\'aeiouAEIOU\') words = sentence.split() count = 0 for word in words: if any(char in vowels for char in word): count += 1 return count"},{"question":"Given an array of n integers, rearrange the array in an alternating pattern of positive and negative numbers. If there are extra positive or negative numbers, append them at the end of the array. The relative order of positive and negative numbers should be maintained. Example 1: Input: arr = [1, 2, 3, -4, -1, 4] Output: [-4, 1, -1, 2, 3, 4] Explanation: The negatives -4 and -1 are placed between the positive numbers, and remaining numbers are appended at the end. Example 2: Input: arr = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8] Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0] Explanation: The negatives -5, -2, and -8 are placed between the positive numbers, and the remaining positive numbers are appended at the end. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrange() which takes an array as input and returns the required array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def rearrange(arr): Rearranges the array in an alternating pattern of positive and negative numbers. If there are extra positive or negative numbers, they are appended at the end. The relative order of positive and negative numbers is maintained. pos = [x for x in arr if x >= 0] neg = [x for x in arr if x < 0] result = [] i = j = 0 min_len = min(len(pos), len(neg)) for k in range(2 * min_len): if k % 2 == 0: result.append(neg[i]) i += 1 else: result.append(pos[j]) j += 1 result.extend(pos[j:]) result.extend(neg[i:]) return result"},{"question":"Alice is a librarian at a large library. She has a peculiar way of arranging the books. Each book has a unique integer identifier (ID). The books are arranged on a single very long bookshelf in a way that the position of each book is also a unique integer. Some positions on the bookshelf may be empty. Alice needs your help to count the number of books whose IDs fall within a specific range, inclusive. She will provide you with several queries where each query asks for the number of books whose IDs lie between two given integers (inclusive). Your task is to efficiently answer each query based on the given list of book positions and their IDs. ---Input--- The input consists of: - one line with two integers n (1 leq n leq 100000) and q (1 leq q leq 50000), where n is the number of books and q is the number of queries. - one line with n integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^9), where b_i is the ID of the book at the i-th position. - q lines, each containing two integers l and r (1 leq l leq r leq 10^9), representing a query asking for the number of books with IDs in the range [l, r]. ---Output--- Output q lines, each containing a single integer – the answer to the corresponding query. ---Examples--- Sample Input 1: 5 3 10 20 30 40 50 15 35 25 45 5 15 Sample Output 1: 2 2 1","solution":"from bisect import bisect_left, bisect_right def count_books_in_range(n, q, book_ids, queries): results = [] book_ids.sort() # sort the book IDs for efficient range queries for l, r in queries: # Find the range in the sorted list that falls within [l, r] left_index = bisect_left(book_ids, l) right_index = bisect_right(book_ids, r) - 1 # Number of books in range is the difference in indices plus one if left_index <= right_index: results.append(right_index - left_index + 1) else: results.append(0) return results"},{"question":"Given a string s consisting of lowercase English letters, you need to determine the smallest string that can be obtained by performing the following operation any number of times: select a non-empty substring of the string, and then sort the characters of that substring in non-decreasing order. Return the smallest string that can be obtained. Example 1: Input: s = \\"cba\\" Output: \\"abc\\" Explanation: We can sort the entire string \\"cba\\" to \\"abc\\". Example 2: Input: s = \\"edcba\\" Output: \\"abcde\\" Explanation: We can sort the entire string \\"edcba\\" to \\"abcde\\". Example 3: Input: s = \\"bca\\" Output: \\"abc\\" Explanation: We can sort the entire string \\"bca\\" to \\"abc\\". Your task: You do not need to read input or output anything. Your task is to implement the function `smallestString` which takes a single string `s` as input and returns the smallest lexicographical string that can be obtained. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ s.length ≤ 10^5 s consists of lowercase English letters only.","solution":"def smallestString(s: str) -> str: Returns the smallest string that can be obtained by any number of times sorting the non-empty substrings. The smallest string is simply the sorted version of the input string. return \'\'.join(sorted(s))"},{"question":"Given a string, implement a function that checks whether the string is a palindrome or can be rearranged to form a palindrome. Ignore spaces, punctuation, and case sensitivity while checking. For example, given the input strings: \\"A man, a plan, a canal, Panama\\" \\"Was it a car or a cat I saw\\" \\"No lemon, no melon\\" \\"apple\\" The function should return: True, True, True, False Your implementation should handle various edge cases efficiently. Here are some additional clarifications for the function: 1. A palindrome reads the same forward and backward, ignoring spaces, punctuation, and case sensitivity. 2. The function should return `True` if the string is a palindrome or can be rearranged to form one. 3. The function should return `False` otherwise.","solution":"from collections import Counter import re def can_form_palindrome(s): Checks whether the given string is a palindrome or can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome or can be rearranged to form one, False otherwise. # Removing spaces, punctuation, and converting to lowercase cleaned_s = re.sub(r\'[W_]\', \'\', s).lower() # Counting frequency of each character freq_count = Counter(cleaned_s) # Checking the number of characters with odd frequencies odd_count = sum(count % 2 for count in freq_count.values()) # There can be at most one character with an odd frequency return odd_count <= 1"},{"question":"Mira is working on a problem involving sequences of distinct integers. She needs to rearrange a given sequence so that every two adjacent elements in the sequence differ by at most a specified integer k. Help Mira find such an arrangement if possible. A sequence that satisfies the above condition is called \\"k-smooth\\". -----Input----- The first line contains an integer t — the number of test cases (1 le t le 100). The next t lines describe the test cases. Each test case starts with an integer n — the number of elements in the sequence (1 le n le 1000) and an integer k (1 le k le 1000). The next line contains n distinct integers separated by spaces, which represent the sequence. -----Output----- For each test case, if a \\"k-smooth\\" arrangement is possible, output the rearranged sequence on a single line. If no such arrangement exists, output \\"NO\\". If there are multiple valid rearrangements, any one of them will be accepted. -----Example----- Input 2 6 2 7 1 3 5 2 6 5 1 10 20 30 40 50 Output 1 2 3 5 6 7 NO -----Note----- In the first test case, one possible \\"k-smooth\\" arrangement is [1, 2, 3, 5, 6, 7] because the differences between adjacent elements are 1 or 2, which are not greater than k = 2. In the second test case, it is not possible to rearrange the sequence [10, 20, 30, 40, 50] into a \\"k-smooth\\" sequence with k = 1.","solution":"def rearrange_sequences(t, test_cases): def is_k_smooth(arr, k): for i in range(len(arr) - 1): if abs(arr[i] - arr[i + 1]) > k: return False return True results = [] for test_case in test_cases: n, k, sequence = test_case sequence.sort() if is_k_smooth(sequence, k): results.append(\\" \\".join(map(str, sequence))) else: results.append(\\"NO\\") return results"},{"question":"You have been given a list of integers. Your task is to find all the elements that appear more than `n/3` times in the list, where `n` is the length of the list. Return the result as a list of integers. If no such elements are found, return an empty list. Example 1: Input: arr = [3,3,4,2,4,4,2,4,4] Output: [4] Explanation: 4 appears 5 times which is more than 9/3 = 3 times. Example 2: Input: arr = [3,2,3] Output: [3] Explanation: 3 appears 2 times which is more than 3/3 = 1 time. Example 3: Input: arr = [1,2,3,4,5,6] Output: [] Explanation: No element appears more than 6/3 = 2 times. Your Task: You don\'t need to read the input or print anything. Implement the function `findMajorityElements(arr: List[int]) -> List[int]` that takes a list of integers as input and returns a list of integers that appear more than `n/3` times. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1), without considering space for the output list. Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"from collections import Counter from typing import List def findMajorityElements(arr: List[int]) -> List[int]: Finds elements in the list that appear more than n/3 times. if not arr: return [] n = len(arr) threshold = n // 3 counter = Counter(arr) result = [num for num, count in counter.items() if count > threshold] return result"},{"question":"Given an array b, consisting of m integers, find the maximum value of the sum of any subarray S of array b such that all the elements in S are unique. A subarray is a contiguous part of an array. For example, if the array is [4, 3, 5, 3, 4], the subarrays with all elements unique are [4], [3], [5], [4, 3], [3, 5], and [5, 3, 4], but not [4, 3, 5, 3] or [3, 5, 3]. -----Input----- The first line contains an integer m (1 le m le 10^5) — the number of elements in the array b. The second line contains m integers b_1, b_2, dots, b_m (1 le b_i le 10^5) — the elements of the array b. -----Output----- Print one integer, the maximum possible sum of any subarray with all unique elements. -----Examples----- Input 6 4 3 5 3 4 6 Output 18 Input 5 2 2 2 2 2 Output 2","solution":"def max_unique_subarray_sum(m, b): Returns the maximum sum of any subarray with all unique elements. :param m: integer, length of the array b :param b: list of integers, the array elements :return: integer, the maximum sum of subarray with unique elements left = 0 unique_elements = set() current_sum = 0 max_sum = 0 for right in range(m): while b[right] in unique_elements: unique_elements.remove(b[left]) current_sum -= b[left] left += 1 unique_elements.add(b[right]) current_sum += b[right] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer T and a list of integers A of length N, determine if the array can be partitioned into two subsets such that the difference between the sum of elements in the two subsets is at most T. Return \\"YES\\" if it is possible and \\"NO\\" otherwise. Constraints - 1 <= N <= 100 - 1 <= A[i] <= 1000 for each 0 <= i < N - 0 <= T <= 10000 Input Input is given from Standard Input in the following format: N T A_1 A_2 ... A_N Output Print \\"YES\\" if the array can be partitioned into two subsets with the required difference, otherwise print \\"NO\\". Examples Input 5 3 1 5 11 5 7 Output YES Input 4 2 1 2 3 9 Output NO Input 6 1 3 1 4 2 2 1 Output YES","solution":"def can_partition_with_difference(N, T, A): total_sum = sum(A) # Early exit if the sum is even and total_sum / 2 - T >= 0 if total_sum % 2 == 0 and total_sum // 2 >= T: return \\"YES\\" # The difference between two subsets is |2 * subset_sum - total_sum| # Trying to find a subset with sum closest to total_sum / 2 target = (total_sum + T) // 2 dp = [False] * (target + 1) dp[0] = True for num in A: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" # Example usage N, T = 5, 3 A = [1, 5, 11, 5, 7] print(can_partition_with_difference(N, T, A)) # Output should be \\"YES\\""},{"question":"In the city of Codeville, there is a special kind of vending machine that dispenses beverages based on a sliding selection mechanism. The machine can display a selection of N beverages in a row, each represented by their quality scores. When a customer makes a selection, the machine finds the highest quality beverage within a sliding window of size K starting from the selected position. The challenge is to efficiently determine the maximum beverage quality score in the sliding windows for each starting position in a way that enables the vending machine to quickly serve its customers. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers, N and K, where 1 leq K leq N leq 10^6. - The second line contains N space-separated integers representing the quality scores of the beverages. -----Output:----- For each test case, output a single line containing N - K + 1 space-separated integers where each integer is the maximum quality score in each sliding window of size K starting from the first position. -----Constraints----- - 1 leq T leq 10 - 1 leq text{quality score} leq 10^9 - Sum of all N’s over all test cases does not exceed 10^6. -----Sample Input:----- 2 8 3 1 3 1 2 0 5 3 1 5 2 4 2 3 1 5 -----Sample Output:----- 3 3 2 5 5 5 4 3 3 5 -----Explanation:----- For the first test case: - Sliding window [1, 3, 1] has maximum quality score 3 - Sliding window [3, 1, 2] has maximum quality score 3 - Sliding window [1, 2, 0] has maximum quality score 2 - Sliding window [2, 0, 5] has maximum quality score 5 - Sliding window [0, 5, 3] has maximum quality score 5 - Sliding window [5, 3, 1] has maximum quality score 5 For the second test case: - Sliding window [4, 2] has maximum quality score 4 - Sliding window [2, 3] has maximum quality score 3 - Sliding window [3, 1] has maximum quality score 3 - Sliding window [1, 5] has maximum quality score 5","solution":"from collections import deque def max_in_sliding_windows(arr, K): Returns a list of the maximum values in each sliding window of size K. dq = deque() result = [] for i in range(len(arr)): # Remove elements not within the sliding window if dq and dq[0] == i - K: dq.popleft() # Remove elements smaller than the current element from the queue while dq and arr[dq[-1]] < arr[i]: dq.pop() dq.append(i) # The first element of deque is the largest element of # the current sliding window if i >= K - 1: result.append(arr[dq[0]]) return result def solve_vending_machine(test_cases): results = [] for N, K, quality_scores in test_cases: results.append(max_in_sliding_windows(quality_scores, K)) return results"},{"question":"Given a number N. Check if it is a Pythagorean prime. A Pythagorean prime is a prime number that can be expressed in the form 4k + 1. For a given number N, return 1 if it is a Pythagorean prime, otherwise return 0. Example 1: Input: N = 5 Output: 1 Explanation: 5 is a prime number and can be expressed in the form 4k + 1 (where k=1). Thus, answer is 1. Example 2: Input: N = 7 Output: 0 Explanation: 7 is a prime number but it cannot be expressed in the form 4k + 1. Thus, answer is 0. Example 3: Input: N = 10 Output: 0 Explanation: 10 is not a prime number. Thus, answer is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPythagoreanPrime() which takes a number N as input parameter and returns 1 if N is a Pythagorean prime. Otherwise, it returns 0. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 10^9","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def isPythagoreanPrime(N): if is_prime(N) and (N % 4 == 1): return 1 else: return 0"},{"question":"You are tasked with developing an online music store\'s service for recommending songs to users. The recommendation algorithm is based on a simple version of collaborative filtering. To start, you need to write a function that finds the users with the closest music tastes to a given user based on their song ratings. Each user has rated a set of songs on a scale from 1 to 5. The closeness of the users\' music tastes is determined by the Euclidean distance between their song rating vectors. The Euclidean distance between two rating vectors `(x1, x2, ..., xn)` and `(y1, y2, ..., yn)` is given by the formula: sqrt((x1-y1)^2 + (x2-y2)^2 + ... + (xn-yn)^2) The smaller the Euclidean distance, the more similar the users are. Input The first line contains an integer n (2 ≤ n ≤ 100), which is the number of users. Each of the next n lines represents a user\'s song ratings and contains a user ID (an integer) followed by their ratings for m songs (1 ≤ m ≤ 50). The ratings are integers in the range [1, 5]. A user might not have rated all songs, so ratings for a user are followed by -1. The last line contains the user ID of the user for whom the closest users need to be found. Output Print the user IDs of the three most similar users to the given user. If there are fewer than three users other than the given user, print all the user IDs of these users. Sort the output user IDs in ascending order. Examples Input 5 1 1 2 3 -1 2 1 3 2 -1 3 5 4 3 -1 4 1 2 3 -1 5 5 5 5 -1 1 Output 2 4 3 Input 3 10 5 5 5 -1 20 1 1 1 -1 30 3 3 3 -1 30 Output 10 20","solution":"import math def euclidean_distance(ratings1, ratings2): Computes the Euclidean distance between two rating vectors. distance = 0 for r1, r2 in zip(ratings1, ratings2): distance += (r1 - r2) ** 2 return math.sqrt(distance) def find_closest_users(users_ratings, target_user_id): Finds the user IDs of the three most similar users to the given user. target_ratings = None target_user = None for user in users_ratings: if user[0] == target_user_id: target_ratings = user[1:] target_user = user break # If target user is not found, return an empty list if not target_user: return [] distances = [] for user in users_ratings: if user[0] != target_user_id: distance = euclidean_distance(target_ratings, user[1:]) distances.append((user[0], distance)) sorted_distances = sorted(distances, key=lambda x: x[1]) closest_users = sorted([user_id for user_id, _ in sorted_distances[:3]]) return closest_users # Parsing the input def recommend_songs(input_data): input_lines = input_data.strip().split(\'n\') n = int(input_lines[0]) users_ratings = [] for i in range(1, n+1): parts = list(map(int, input_lines[i].split())) user_id = parts[0] ratings = [] for rating in parts[1:]: if rating == -1: break ratings.append(rating) users_ratings.append([user_id] + ratings) target_user_id = int(input_lines[-1]) return \' \'.join(map(str, find_closest_users(users_ratings, target_user_id)))"},{"question":"Given an array of n integers, you need to adjust the array so that it becomes a palindrome with the minimum number of operations. An operation involves incrementing or decrementing any element of the array by 1. Your goal is to determine the minimum number of operations needed to turn the given array into a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). Output Print a single integer — the minimum number of operations needed to make the array a palindrome. Examples Input 3 1 2 3 Output 2 Input 6 1 3 5 5 3 1 Output 0 Input 4 1 4 4 3 Output 2 Note In the first example, you can: - Increment the first 1 to 2 in 1 operation. - Decrement the last 3 to 2 in 1 operation. Thus, a total of 2 operations are required to make the array [2, 2, 2]. In the second example, the array is already a palindrome, so no operations are required. In the third example, you can: - Increment the first 1 to 3 in 2 operations. Thus, a total of 2 operations are needed to make the array [3, 4, 4, 3].","solution":"def min_operations_to_palindrome(n, arr): Calculate the minimum number of operations to turn an array into a palindrome by incrementing or decrementing elements. :param n: Length of the array :param arr: List of integers :return: Minimum number of operations required left = 0 right = n - 1 operations = 0 while left < right: if arr[left] != arr[right]: operations += abs(arr[left] - arr[right]) left += 1 right -= 1 return operations"},{"question":"Farmer John owns a large farm with `n` barns connected by `n - 1` bidirectional roads, forming a tree structure. Each barn stores a type of crop represented by an integer from `1` to `k`. Farmer John wants to ensure that adjacent barns (barns directly connected by a road) do not store the same type of crop to prevent the spread of disease. Help Farmer John assign crops to each of the barns in such a way that no two adjacent barns store the same type of crop. If it\'s not possible to assign crops following this rule, output \\"Impossible!\\". Input The first line contains two integers `n` and `k` (2 ≤ n ≤ 100000, 2 ≤ k ≤ 100000) — the number of barns and the number of different types of crops respectively. Each of the following `n - 1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), meaning there is a bidirectional road between barns `u` and `v`. It is guaranteed that the graph is a tree. Output If there is a valid assignment of crops, output `n` space-separated integers in a line — the i-th integer is the type of crop assigned to barn with number `i`. If it is impossible to assign crops such that no two adjacent barns store the same type of crop, output \\"Impossible!\\". Examples Input 5 3 1 2 1 3 2 4 2 5 Output 1 2 3 1 2 Input 4 2 1 2 2 3 3 4 Output Impossible! Note In the first example, each barn is adjacent to a barn with a different crop type, so the solution is valid. In the second example, it is impossible to assign only two types of crops to four barns in a line such that no two adjacent barns store the same type of crop.","solution":"def assign_crops(n, k, roads): from collections import defaultdict import sys sys.setrecursionlimit(100000) if k == 1: return \\"Impossible!\\" # Create adjacency list adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) # Result list initially with all zeros res = [0] * (n + 1) # DFS to color the graph def dfs(node, parent, color): current_color = 1 for neighbor in adj[node]: if neighbor == parent: continue while current_color == color or current_color == res[parent]: current_color += 1 if current_color > k: return False res[neighbor] = current_color if not dfs(neighbor, node, current_color): return False return True res[1] = 1 if not dfs(1, -1, 1): return \\"Impossible!\\" return \\" \\".join(map(str, res[1:])) # Example debug code, can be used for local testing # n = 5 # k = 3 # roads = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(assign_crops(n, k, roads))"},{"question":"Write a function that converts a string to uppercase letters. Example: `\\"hello world\\"` => `\\"HELLO WORLD\\"` Note: Ensure that the function handles empty strings appropriately by returning an empty string.","solution":"def to_uppercase(s): Converts the input string to uppercase. Parameters: s (str): The input string. Returns: str: The input string in uppercase. return s.upper()"},{"question":"Sanjay is fascinated by the concept of rotating matrices. Consider a square matrix of size n × n. The task is to rotate the matrix by 90 degrees in a clockwise direction. Given an n × n matrix a, perform the rotation. Note that transforming the matrix in-place will gain you extra points. Write a function to perform the transformation. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the size of the matrix. Each of the next n lines contains n integers, space-separated, representing rows of the matrix a. -----Output----- Output the transformed matrix with elements space-separated, after rotating the original matrix by 90 degrees clockwise. -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 -----Note----- In the first test sample, the 3×3 matrix before rotation is: 1 2 3 4 5 6 7 8 9 After rotating 90 degrees clockwise, it becomes: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotate the given n x n matrix by 90 degrees clockwise. Args: matrix (list of list of int): 2D list representing the matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # Left -> Top matrix[first][i] = matrix[last - offset][first] # Bottom -> Left matrix[last - offset][first] = matrix[last][last - offset] # Right -> Bottom matrix[last][last - offset] = matrix[i][last] # Top -> Right matrix[i][last] = top return matrix"},{"question":"Given an array of integers, determine whether the array is a \\"mountain array\\". A mountain array is defined as an array which: 1. Has at least 3 elements. 2. There exists some index `i` (0 < i < array.length - 1) such that: - `array[0] < array[1] < ... < array[i]` - `array[i] > array[i+1] > ... > array[array.length - 1]` Write a function that takes an array of integers as input and prints \\"Mountain\\" if the array is a mountain array, otherwise print \\"Not Mountain\\". **Example** ```python def is_mountain_array(arr): # Your implementation here # Test cases print(is_mountain_array([2, 1])) # Not Mountain print(is_mountain_array([3, 5, 5])) # Not Mountain print(is_mountain_array([0, 3, 2, 1])) # Mountain print(is_mountain_array([0, 2, 3, 3, 5])) # Not Mountain ``` **Input** An array of integers. **Output** Print \\"Mountain\\" if the input array is a mountain array, otherwise print \\"Not Mountain\\". **Sample Input 1** ``` [0, 3, 2, 1] ``` **Sample Output 1** ``` Mountain ``` **Sample Input 2** ``` [3, 5, 5] ``` **Sample Output 2** ``` Not Mountain ```","solution":"def is_mountain_array(arr): Determines if the input array is a mountain array. Parameters: arr (list of int): the input array of integers. Returns: str: \\"Mountain\\" if the array is a mountain array, otherwise \\"Not Mountain\\". n = len(arr) if n < 3: return \\"Not Mountain\\" i = 0 # walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # peak cannot be first or last if i == 0 or i == n - 1: return \\"Not Mountain\\" # walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"Mountain\\" if i == n - 1 else \\"Not Mountain\\""},{"question":"Sophia is organizing a coding marathon event where she wants to provide shirts for the participants. She has a budget of b dollars to spend on shirts. In the store, there are m types of shirts available, each with a specific cost and a quality rating. Sophia wants to buy exactly one shirt while maximizing the quality rating of the shirt within her budget. -----Input----- The first line contains two space-separated integers m, b (1 ≤ m, b ≤ 100). Each of the next m lines contains two space-separated integers c_{i}, q_{i} (1 ≤ c_{i} ≤ 100; 1 ≤ q_{i} ≤ 100), where c_{i} represents the cost in dollars of the i-th type of shirt and q_{i} represents the quality rating of the i-th type of shirt. -----Output----- Print a single integer representing the maximum quality rating of the shirt Sophia can buy, or -1 if she can\'t buy any shirt within her budget. -----Examples----- Input 4 20 15 30 25 50 20 40 10 20 Output 40 Input 3 15 20 25 30 35 40 45 Output -1 -----Note----- In the first test sample, Sophia can buy the fourth type of shirt with a spending cost of 10 dollars and get a quality rating of 20. She can also afford the first type of shirt with a spending cost of 15 dollars and get a quality rating of 30. But the best choice would be to buy the third type of shirt with 20 dollars and get a quality rating of 40, which maximizes the quality rating within the budget.","solution":"def max_quality(m, b, shirts): Finds the maximum quality rating of a shirt Sophia can buy within her budget. Parameters: m (int): Number of shirt types. b (int): Budget in dollars. shirts (List[Tuple[int, int]]): A list of tuples where each tuple contains the cost and quality rating of a shirt. Returns: int: The maximum quality rating within budget, or -1 if no shirt can be bought within the budget. max_quality = -1 for cost, quality in shirts: if cost <= b: max_quality = max(max_quality, quality) return max_quality"},{"question":"A financial analyst is working with stock price data to analyze trends over a period of days to help clients make better investment decisions. The analyst is interested in determining the maximum profit that can be obtained by buying and selling a single share of stock within a specified time frame. However, the decision must be made based on incomplete knowledge, where only historical data up to a given day is available, and future prices are unknown. The analyst needs to know the maximum profit that can be made by buying the stock on one day and selling it on a later day. Given an array of stock prices, where each element represents the price of the stock on that day, write a program to determine the maximum possible profit. If no profit can be made, the function should return 0. Input: - The first line contains an integer n, the number of days for which stock prices are available. - The second line contains n integers where the i-th integer represents the stock price on the i-th day. Output: - Print a single integer, the maximum profit that can be obtained. If no profit can be made, print 0. Constraints: 1 ≤ n ≤ 10^5 1 ≤ price[i] ≤ 10^5 Example 1: Input: 6 7 1 5 3 6 4 Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: 5 7 6 4 3 1 Output: 0 Explanation: In this case, no transactions can be made to get a profit, so the maximum profit is 0.","solution":"def max_profit(stock_prices): Returns the maximum profit that can be obtained by buying and selling a single share of stock within a specified time frame. :param stock_prices: List of stock prices :return: Maximum profit that can be obtained or 0 if no profit can be made if not stock_prices: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Given a list of integers and a set of operations consisting of adding numbers to the list and rotating the list to the left by a given number of positions, write a function to perform the operations and return the final list in its state after all operations have been applied. Operations: - \'A X\': Add the number X to the end of the list. - \'L X\': Rotate the list to the left by X positions. Implement the function that processes a list of such operations and returns the resultant list. Example 1: Input: N = 4 operations = [[\'A\', 1], [\'A\', 2], [\'L\', 1], [\'A\', 3]] Output: [2, 1, 3] Explanation: [] (initially empty list) [1] (add 1) [1, 2] (add 2) [2, 1] (rotate left by 1) [2, 1, 3] (add 3) Example 2: Input: N = 5 operations = [[\'A\', 4], [\'A\', 5], [\'L\', 2], [\'A\', 6], [\'L\', 1]] Output: [5, 6, 4] Explanation: [] (initially empty list) [4] (add 4) [4, 5] (add 5) [5, 4] (rotate left by 2) [5, 4, 6] (add 6) [5, 6, 4] (rotate left by 1) Your task: You don\'t need to read input or print anything. Complete the function `applyOperations(N, operations)` which takes an integer N, the number of operations, and a list of lists `operations` consisting of the operations as input and returns the final list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(L), where L is the length of the final list. Constraints: 1 ≤ N ≤ 10^5 1 ≤ value of X ≤ 10^5","solution":"def applyOperations(N, operations): result = [] for operation in operations: if operation[0] == \'A\': result.append(operation[1]) elif operation[0] == \'L\': k = operation[1] % len(result) # Handle rotation amount larger than list size result = result[k:] + result[:k] return result"},{"question":"A company wants to efficiently manage employee timesheets for a project. Each employee logs in and logs out several times during a day. The times are represented in a 24-hour format (HH:MM), and it is guaranteed that an employee logs out before logging in again. Given the login and logout times for each employee, you need to calculate the total number of minutes each employee has been logged in during the day. Your task is to write a function that processes multiple employees\' timesheets and returns the total logged-in minutes for each employee. -----Input----- The first line of the input contains an integer e (1 le e le 1000) — the number of employees. Each of the next e blocks describe timesheets for one employee. Each block starts with an integer n (1 le n le 100) — the number of login/logout pairs for that employee. The next 2n lines contain the times in the format \\"HH:MM\\". The first time in each pair is the login time and the second time is the logout time. -----Output----- For each employee, print a single line with the total number of minutes the employee has been logged in during the day. -----Example----- Input 2 2 09:00 12:00 13:30 18:00 3 08:00 09:00 10:00 11:00 14:00 15:30 Output 450 210 -----Note----- In the first example, the first employee has two login/logout pairs: - Logged in from 09:00 to 12:00 which is 180 minutes, - Logged in from 13:30 to 18:00 which is 270 minutes, - Total: 180 + 270 = 450 minutes. In the second example, the second employee has three login/logout pairs: - Logged in from 08:00 to 09:00 which is 60 minutes, - Logged in from 10:00 to 11:00 which is 60 minutes, - Logged in from 14:00 to 15:30 which is 90 minutes, - Total: 60 + 60 + 90 = 210 minutes.","solution":"def calculate_total_logged_minutes(timesheets): Given timesheets of multiple employees, calculate the total logged-in minutes for each employee. Parameters: timesheets (list of lists): Each element is a block representing one employee\'s timesheet. A block is a list where the first element is the number of login/logout pairs, and the following elements are alternating login and logout times in the format \\"HH:MM\\". Returns: list of int: Total logged-in minutes for each employee. total_logged_minutes = [] for employee_timesheet in timesheets: n = employee_timesheet[0] minutes_logged = 0 times = employee_timesheet[1:] for i in range(n): login_time = times[2 * i] logout_time = times[2 * i + 1] login_hours, login_minutes = map(int, login_time.split(\':\')) logout_hours, logout_minutes = map(int, logout_time.split(\':\')) login_total_minutes = login_hours * 60 + login_minutes logout_total_minutes = logout_hours * 60 + logout_minutes minutes_logged += logout_total_minutes - login_total_minutes total_logged_minutes.append(minutes_logged) return total_logged_minutes"},{"question":"Write a function that takes an array of integers as input and returns a boolean value indicating whether the array contains any duplicates within a given distance k from each other. Two integers are considered duplicates if they are equal, and the distance between them is the absolute difference of their indices in the array. Input: - A list of integers. - An integer k representing the maximum allowed index distance between duplicate elements. Output: - Return True if duplicates exist within the given distance k, otherwise, return False. Example: ```python def containsNearbyDuplicate(nums: List[int], k: int) -> bool: # Your code here ``` SAMPLE INPUT nums = [1, 2, 3, 1] k = 3 SAMPLE OUTPUT True SAMPLE INPUT nums = [1, 0, 1, 1] k = 1 SAMPLE OUTPUT True SAMPLE INPUT nums = [1, 2, 3, 1, 2, 3] k = 2 SAMPLE OUTPUT False","solution":"def containsNearbyDuplicate(nums: list[int], k: int) -> bool: Checks if the input list contains any duplicates within a given distance k. Parameters: nums (list[int]): A list of integers. k (int): An integer representing the maximum allowed index distance between duplicate elements. Returns: bool: True if duplicates exist within the given distance k, otherwise False. num_indices = {} for i, num in enumerate(nums): if num in num_indices and i - num_indices[num] <= k: return True num_indices[num] = i return False"},{"question":"A programming challenge for you: **Problem Statement: Dead End Street** You are given a tree (acyclic connected graph) containing `N` nodes. Each node has exactly one value assigned to it. The values of nodes are given in an array where the value at index `i` represents the value of the `(i+1)`th node. Your task is to find the sum of values of the nodes that have *only one neighbor* (these nodes are considered as the \\"leaf nodes\\" for this tree). ------ Input ------ The first line contains an integer `T`, the number of test cases. For each test case, the following inputs are provided: - The first line contains an integer `N`, the number of nodes in the tree. - The second line contains `N` integers, separated by spaces, where the `i`-th integer is the value assigned to the `(i+1)`-th node. - The next `N-1` lines contain two integers, `u` and `v`, which denote an edge between node `u` and node `v`. ------ Output ------ For each test case, print a single integer, the sum of the values of all leaf nodes in the corresponding tree. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ value_{i} ≤ 10^6 1 ≤ u, v ≤ N The sum of `N ∗` over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 1 5 1 2 3 4 5 1 2 1 3 3 4 3 5 ------ Sample Output 1 ------ 10 ------ Explanation 1 ------ The leaf nodes in the tree are `2`, `4`, and `5` which have values `2`, `4`, and `5` respectively. Therefore, the sum of these values is `2 + 4 + 5 = 11`. ------","solution":"def sum_of_leaf_nodes(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] node_values = test_cases[i][\'node_values\'] edges = test_cases[i][\'edges\'] if N == 1: # If there\'s only one node, its the only leaf node results.append(node_values[0]) continue from collections import defaultdict # Create adjacency list for the graph adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Find all leaf nodes (nodes with exactly one neighbor) leaf_values_sum = 0 for node in range(1, N+1): if len(adj_list[node]) == 1: # Leaf node condition leaf_values_sum += node_values[node-1] # node numbers are 1-based, node_values is 0-based results.append(leaf_values_sum) return results"},{"question":"Mikumiku-chan, a software engineer, is interested in string manipulation. She often works with strings and needs to analyze the frequency of substring occurrences. Given a string S of length L, Mikumiku-chan wants to find how many times a specific substring T of length M appears in S. If T appears multiple times overlapping, each appearance should be counted separately. Write a function that takes two strings, S and T, and returns the number of times T appears in S. Constraints: * 1 leq L leq 10^5 * 1 leq M leq 10^4 * S and T consist of lowercase English letters only. Input: The input consists of two lines: * The first line contains the string S. * The second line contains the string T. Output: Print the number of times T appears in S. Examples: Input: abracadabra abra Output: 2 Input: abababab ab Output: 4 Input: aaaaa aaa Output: 3","solution":"def count_substring_occurrences(S, T): Returns the number of times the substring T appears in string S, including overlapping occurrences. count = 0 start = 0 while True: start = S.find(T, start) if start == -1: break count += 1 start += 1 # move to the next character to allow overlapping matches return count # Example use if __name__ == \\"__main__\\": S = input() T = input() print(count_substring_occurrences(S, T))"},{"question":"You are given two strings S and T. Your task is to determine the minimum number of operations required to convert string S into string T. You can perform the following operations as many times as necessary: 1. Insert a character 2. Delete a character 3. Replace a character Note that all operations are case-sensitive. -----Input----- - The first line contains an integer Q denoting the number of test cases. - Each of the next Q pairs of lines contains two strings S and T. -----Output----- For each test case, print a single line containing an integer — the minimum number of operations required to convert string S into string T. -----Constraints----- - 1 le Q le 10 - 1 le |S|, |T| le 1000 - Strings S and T contain only lowercase English letters. -----Example Input----- 2 horse ros intention execution -----Example Output----- 3 5","solution":"def min_distance(s1, s2): Calculate the minimum number of operations required to convert s1 to s2. Operations include insert, delete, and replace. m, n = len(s1), len(s2) # Create a 2D DP array dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute the minimum operations for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[m][n] def min_operations(test_cases): results = [] for s, t in test_cases: results.append(min_distance(s, t)) return results"},{"question":"Emma loves playing with words. She is particularly fascinated by the concept of anagrams. An anagram of a word is a rearrangement of its letters to form another word. For instance, \\"listen\\" and \\"silent\\" are anagrams of each other. However, Emma is interested in a special kind of anagram: a subsequence anagram. Given two strings, `source` and `target`, you need to write a program to determine if `source` can be rearranged such that all characters of `target` appear as a subsequence in it. A string `S` is a subsequence of string `T` if `S` can be obtained from `T` by deleting some (possibly zero) characters from `T`, without reordering the remaining characters. Input The input consists of multiple test cases. The first line of the input contains an integer `t`, the number of test cases. Each test case contains two strings on separate lines: the first line containing the word `source` and the second line containing the word `target`. Both strings only consist of lowercase English letters and have lengths between 1 and 1000. Output For each test case, print \\"Yes\\" if it is possible to rearrange `source` such that `target` can appear as a subsequence in it. Otherwise, print \\"No\\". Example Input 3 abc abc abc def anagram nagaram Output Yes No Yes Explanation In the first test case, \\"abc\\" can be rearranged as \\"abc\\", which contains \\"abc\\" as a subsequence. In the second test case, no rearrangement of \\"abc\\" can contain \\"def\\" as a subsequence. In the third test case, \\"anagram\\" can be rearranged as \\"nagaram\\", which contains \\"nagaram\\" as a subsequence.","solution":"def can_form_subsequence(source, target): Determine if source can be rearranged such that target appears as a subsequence in it. # Get counts of each character in source and target from collections import Counter source_count = Counter(source) target_count = Counter(target) # Check if for each character in target, there are at least as many in source for char in target_count: if target_count[char] > source_count.get(char, 0): return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): Process multiple test cases. results = [] for i in range(t): source, target = test_cases[i] results.append(can_form_subsequence(source, target)) return results"},{"question":"You are a software engineer at a social media startup. One feature of the platform is a hashtag trend tracker. A hashtag in a message is a string that starts with the character \'#\' and is followed by one or more alphanumeric characters (i.e., the letters a-z, the letters A-Z, or digits 0-9). Your task is to write a function that extracts all unique hashtags from a given message string and returns them in a list sorted in lexicographical order (i.e., dictionary order). Input: A single line containing the message string. The length of this string is between 1 and 1000 characters and it contains only printable ASCII characters. Output: A list of unique hashtags sorted in lexicographical order. If no hashtags are found, return an empty list. Example Input I love #Python and #coding in #Python3. Let\'s code using #Python and create more #projects! Output [\'#Python\', \'#Python3\', \'#coding\', \'#projects\']","solution":"import re def extract_unique_hashtags(message): Extracts unique hashtags from the given message string and returns them sorted in lexicographical order. Parameters: message (str): The message string containing hashtags Returns: list: A sorted list of unique hashtags # Using regex to find all hashtags hashtags = re.findall(r\'#w+\', message) # Use set to remove duplicates and return a sorted list return sorted(set(hashtags))"},{"question":"Lucia is a biologist who studies the growth patterns of different species of plants. She is particularly interested in understanding how the total height of plants in a test group evolves over time. She collects data on the growth rate of each plant in the group daily for a specific period. The data is structured as a list of integers where each integer represents the height of a plant on a specific day. Lucia wants to find the maximum increase in height for any two consecutive days in the recorded period. Your task is to help Lucia by writing a program that calculates the maximum increase in height between any two consecutive days from the given data. -----Input----- The first line contains a single integer T - the number of test cases. Each of the next T lines contains: - An integer N representing the number of days - N space-separated integers H1, H2, ..., HN representing the height of the plant on each day. -----Output----- For each test case, output a single line containing the maximum increase in height between any two consecutive days. -----Constrains----- T (1≤T≤1000) N (2≤N≤10^5) 0 ≤ Hi ≤ 10^9 -----Example----- Input: 2 5 1 2 3 5 11 3 3 2 1 Output: 6 -1 Explanation: For the first test case, the maximum increase in height between consecutive days is between days 4 and 5 where the heights are 5 and 11, resulting in an increase of 6. For the second test case, the heights are decreasing, so the maximum increase (which is actually a decrease) is -1.","solution":"def max_increase(T, test_cases): results = [] for N, heights in test_cases: max_diff = heights[1] - heights[0] for i in range(1, N): diff = heights[i] - heights[i - 1] if diff > max_diff: max_diff = diff results.append(max_diff) return results"},{"question":"Given a list of integers, you need to sort the list in non-decreasing order. After sorting, find the pair of adjacent elements in the list where the difference between them is the smallest. If there are multiple pairs with the same smallest difference, output any one of them. ------ Input Format ------ - The first line contains an integer N, the number of elements in the list. - The second line contains N integers separated by spaces, representing the elements of the list. ------ Output Format ------ - Output two integers from the list which have the smallest difference. Output the integers in any order. ------ Constraints ------ 2 ≤ N ≤ 10^5 -10^6 ≤ text{element} ≤ 10^6 ------ Sample Input 1 ------ 5 4 9 1 32 13 ------ Sample Output 1 ------ 4 1 ------ Explanation 1 ------ After sorting the list, we get [1, 4, 9, 13, 32]. The pair with the smallest difference is (1, 4) with a difference of 3. ------ Sample Input 2 ------ 6 10 20 30 40 50 60 ------ Sample Output 2 ------ 10 20 ------ Explanation 2 ------ After sorting the list, we get [10, 20, 30, 40, 50, 60]. The pair with the smallest difference is (10, 20) with a difference of 10.","solution":"def find_smallest_difference_pair(arr): Finds the pair of adjacent elements in the list where the difference between them is the smallest. # Sort the array first arr.sort() # Initialize with the first pair difference min_diff = float(\'inf\') min_pair = (arr[0], arr[1]) # Traverse the sorted array to find the minimum difference between any two adjacent elements for i in range(1, len(arr)): diff = abs(arr[i] - arr[i - 1]) if diff < min_diff: min_diff = diff min_pair = (arr[i - 1], arr[i]) return min_pair"},{"question":"Given an integer `n`, write a function that returns a list of all prime numbers up to `n` (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input - An integer `n` where `n >= 2` # Output - A list of integers representing all prime numbers up to and including `n` # Example ```python input: 10 output: [2, 3, 5, 7] input: 20 output: [2, 3, 5, 7, 11, 13, 17, 19] ``` # Notes - You may use any algorithm of your choice to check for prime numbers. - The function should be efficient in terms of both time and space complexity. - Edge cases, such as the smallest possible input values, should be considered. # Constraints - The input value `n` will be an integer within the range (2 leq n leq 10^6).","solution":"def get_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 primes = [p for p in range(2, n + 1) if sieve[p]] return primes"},{"question":"Write a function that takes an array of integers and returns a new array where every integer at an even index is squared. For example: ``` squareEvenIndices([1, 2, 3, 4, 5]) => [1, 2, 9, 4, 25] squareEvenIndices([10, 15, 20, 25, 30]) => [100, 15, 400, 25, 900] ``` Note: The indices are zero-based, so the first element is at index 0 (an even index).","solution":"def squareEvenIndices(arr): Takes an array of integers and returns a new array where every integer at an even index is squared. Args: arr (list): A list of integers. Returns: list: A new list with squares at even indices. return [x ** 2 if i % 2 == 0 else x for i, x in enumerate(arr)] # Example usage: # print(squareEvenIndices([1, 2, 3, 4, 5])) -> [1, 2, 9, 4, 25] # print(squareEvenIndices([10, 15, 20, 25, 30])) -> [100, 15, 400, 25, 900]"},{"question":"Vasya the mischievous math enthusiast has developed another interesting problem involving marbles. He has n jars, each of which initially contains a certain number of marbles (at least 1 and at most l). Vasya can perform a series of operations where in each operation he can do one of the following: 1. Combine any two jars into one by adding the number of marbles in both jars and modulo l. The two original jars disappear, and a new jar appears with the resultant number of marbles. 2. Double the number of marbles in any jar modulo l. He continues to perform these operations until all jars have been combined into a single jar and is left with a certain number of marbles. Vasya now wants to know the initial number of marbles in each jar before he started combining and doubling operations. Given the final number of marbles in the last remaining jar, help Vasya recover the possible initial configuration of marbles in all jars. Input The input consists of three space-separated integers: n (2 ≤ n ≤ 100) — the initial number of jars, m (0 ≤ m < l) — the number of marbles in the final jar after all operations, and l (2 ≤ l ≤ 100) — the maximum number of marbles that can be initially present in any jar. Output If it is not possible to determine the initial configuration of marbles, print -1. Otherwise, print a list of n integers separated by spaces, which denote the initial number of marbles in each jar. If there are multiple valid initial configurations, any one of them is acceptable. Examples Input 4 3 5 Output 2 1 3 2 Input 3 0 4 Output -1 Input 2 1 3 Output 1 2","solution":"def find_initial_marbles(n, m, l): Determines the initial configuration of marbles in the jars given the final number of marbles in the last remaining jar. Parameters: n (int): The initial number of jars. m (int): The number of marbles in the final jar after all operations. l (int): The maximum number of marbles that can be initially present in any jar. Returns: list: The initial configuration of marbles in each jar if possible, otherwise -1. # Case when n * (l-1) < m which makes the final number impossible if m > n * (l - 1): return -1 # Try to distribute marbles to make it sum to `m` initial_config = [] total_marbles = m remaining_jars = n # Initial value for each jar for i in range(n): if i < n - 1: initial_value = min(l-1, total_marbles) initial_config.append(initial_value) total_marbles -= initial_value remaining_jars -= 1 else: # Fill the last jar with the remaining marbles initial_config.append(total_marbles) if sum(initial_config) % l != m % l: return -1 return initial_config"},{"question":"Anna needs to rearrange the tiles on her floor in a specific pattern. She has a rectangular floor with dimensions n × m, where n is the number of rows and m is the number of columns. Each tile has a number from 1 to n×m, and initially, they are arranged in a left-to-right, top-to-bottom order starting from 1. Anna wants to rearrange them in a serpentine order, where the first row goes left-to-right, the second row goes right-to-left, the third row goes left-to-right, and so on. For example, given a 3 × 3 floor, the initial order is: ``` 1 2 3 4 5 6 7 8 9 ``` After rearranging in serpentine order, it should look like: ``` 1 2 3 6 5 4 7 8 9 ``` Given the dimensions of the floor, write a program that prints the serpentine order of the tiles. Input The only line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the floor. Output Print the serpentine order of the tiles on the floor as an n × m matrix. Examples Input ``` 3 3 ``` Output ``` 1 2 3 6 5 4 7 8 9 ``` Input ``` 4 5 ``` Output ``` 1 2 3 4 5 10 9 8 7 6 11 12 13 14 15 20 19 18 17 16 ``` Note In the first example, tiles are rearranged in a serpentine pattern. The second row is reversed, creating the desired pattern.","solution":"def serpentine_order(n, m): Returns the tiles arranged in a serpentine order for a n x m floor. Parameters: - n: Number of rows. - m: Number of columns. Returns: - A list of lists representing the serpentine order of the tiles. result = [] for i in range(n): start = i * m + 1 row = list(range(start, start + m)) if i % 2 == 1: row.reverse() result.append(row) return result"},{"question":"You are given an array of positive integers representing the heights of consecutive buildings. The buildings are lined up in a row and the heights are given from left to right. You can reset one building\'s height to zero, which means you demolish that building. Your task is to determine the maximum possible difference between the height of the tallest building and the height of the smallest building after demolishing exactly one building. Note that you must demolish one building even if it does not affect the maximum difference. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. The first line of each test case contains an integer N, the number of buildings. The second line of each test case contains N positive integers representing the heights of the buildings. ------ Output ------ For each test case, output a single integer – the maximum possible difference between the height of the tallest building and the height of the smallest building after demolishing one building. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{5} 1 ≤ text{height of buildings} ≤ 10^6 The sum of N over all test cases does not exceed 10^{6}. ------ Sample Input ------ 3 5 2 3 1 7 5 4 5 5 5 5 3 1 1 10 ------ Sample Output ------ 6 0 9 ------ Explanation ------ In the first test case: - If we demolish the building of height 1, the heights become [2, 3, 0, 7, 5]. The maximum difference is 7 - 0 = 7. - If we demolish the building of height 7, the heights become [2, 3, 1, 0, 5]. The maximum difference is 5 - 0 = 5. - By analyzing all cases, the maximum possible difference is obtained by demolishing the building of height 1 (2nd building from the left), resulting in a difference of 6. In the second test case: - No matter which building we demolish, all buildings have the same height of 5. The difference will always be 0. In the third test case: - If we demolish one of the buildings of height 1, the maximum difference is 10 - 0 = 10. - If we demolish the building of height 10, the heights become [1, 1, 0]. The maximum difference is 1 - 0 = 1. - The maximum possible difference is 9, achieved by demolishing one of the buildings with height 1.","solution":"def max_possible_difference(T, test_cases): results = [] for case in test_cases: N, heights = case if N == 2: results.append(abs(heights[0] - heights[1])) else: max_height = max(heights) second_max_height = sorted(heights)[-2] min_height = min(heights) second_min_height = sorted(heights)[1] result = max(max_height - min_height, second_max_height - min_height, max_height - second_min_height) results.append(result) return results"},{"question":"Design a data structure that supports adding new words and finding the longest word in the structure which can be built one character at a time by other words in the data structure. Implement the Trie class: - Trie() Initializes the data structure. - void addWord(string word) Adds a word into the data structure. - string findLongestWord() Returns the longest word that can be built one character at a time by other words in the data structure. If there are multiple valid results, return the lexicographically smallest one. Example 1: Input [\\"Trie\\", \\"addWord\\", \\"addWord\\", \\"addWord\\", \\"addWord\\", \\"addWord\\", \\"findLongestWord\\"] [[], [\\"a\\"], [\\"banana\\"], [\\"app\\"], [\\"appl\\"], [\\"ap\\"], [\\"apple\\"], []] Output [null, null, null, null, null, null, \\"apple\\"] Explanation Trie trie = new Trie(); trie.addWord(\\"a\\"); trie.addWord(\\"banana\\"); trie.addWord(\\"app\\"); trie.addWord(\\"appl\\"); trie.addWord(\\"ap\\"); trie.addWord(\\"apple\\"); trie.findLongestWord(); // returns \\"apple\\" since \\"apple\\" can be built from \\"a\\", \\"ap\\", \\"app\\", \\"appl\\". Constraints: - 1 <= word.length <= 1000 - total length of all words <= 10000 - Depending on implementation, optimize for addWord and findLongestWord to run within a reasonable time with the given constraints.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() self.words = set() def addWord(self, word: str) -> None: self.words.add(word) node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def findLongestWord(self) -> str: def can_build_word(word): length = len(word) for i in range(1, length): if word[:i] not in self.words: return False return True sorted_words = sorted(self.words, key=lambda x: (-len(x), x)) for word in sorted_words: if can_build_word(word): return word return \\"\\""},{"question":"In this task, you are given a matrix of numbers and you need to find an interesting property of the matrix. Specifically, a number in the matrix is called a \\"lone survivor\\" if it is the only number that appears in both its row and column. Find all such \\"lone survivor\\" numbers in the matrix and return them as a sorted list. If there are no lone survivors, return an empty list. For example, consider the following matrix: ``` [ [4, 5, 6], [1, 9, 2], [8, 7, 3] ] ``` In this example, the numbers 1, 2, 3, 4, 5, 6, 7, 8, and 9 are the lone survivors because they each appear only once in their respective rows and columns. Therefore, the function should return `[1, 2, 3, 4, 5, 6, 7, 8, 9]`. Here is another example: ``` [ [4, 6, 6], [1, 9, 2], [8, 6, 3] ] ``` In this case, the number 6 is not a lone survivor because it appears more than once in the matrix. The lone survivors are 1, 2, 3, 4, 8, and 9, so the function should return `[1, 2, 3, 4, 8, 9]`. Write a function `find_lone_survivors(matrix)` that takes a matrix (list of lists) of integers and returns a sorted list of all lone survivors. # Input: - A matrix of integers (list of lists), where each sublist represents a row in the matrix. # Output: - A sorted list of integers representing the lone survivors in the matrix. # Example: ```python def find_lone_survivors(matrix): # Your code here # Test cases print(find_lone_survivors([[4, 5, 6], [1, 9, 2], [8, 7, 3]])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] print(find_lone_survivors([[4, 6, 6], [1, 9, 2], [8, 6, 3]])) # Output: [1, 2, 3, 4, 8, 9] ```","solution":"def find_lone_survivors(matrix): Finds the lone survivors in the matrix. A lone survivor is a number that appears exactly once in its row and column. :param matrix: List[List[int]] - The input matrix :return: List[int] - Sorted list of lone survivors from collections import defaultdict # Initialize row and column counts row_counts = defaultdict(lambda: defaultdict(int)) col_counts = defaultdict(lambda: defaultdict(int)) n_rows = len(matrix) n_cols = len(matrix[0]) if n_rows > 0 else 0 # Populate row and column counts for i in range(n_rows): for j in range(n_cols): num = matrix[i][j] row_counts[i][num] += 1 col_counts[j][num] += 1 # Find lone survivors lone_survivors = [] for i in range(n_rows): for j in range(n_cols): num = matrix[i][j] if row_counts[i][num] == 1 and col_counts[j][num] == 1: lone_survivors.append(num) # Return sorted list of lone survivors return sorted(lone_survivors)"},{"question":"A software company is developing a new feature for a recommendation system based on user activities on a social media platform. Given a series of timestamps of user activities, the system needs to identify the most active user during different time windows. The user activities are represented as a list of tuples. Each tuple contains a string user_id (unique identifier for the user), and an integer timestamp (indicating the time of user activity). Your task is to handle a set of queries where each query specifies a start and end timestamp, and the system should return the user_id of the most active user within that time frame. If there is a tie (i.e., multiple users having the same number of activities), return the lexicographically smallest user_id. Input The first line contains an integer n, representing the number of user activities. Each of the next n lines contains a string user_id (1 ≤ |user_id| ≤ 10) and an integer timestamp. The next line contains an integer q, representing the number of queries. Each of the next q lines contains two integers start_time and end_time, defining the inclusive range of timestamps for the query. 1 ≤ n, q ≤ 10^5 1 ≤ timestamp, start_time, end_time ≤ 10^9 Output For each query, output a string user_id which is the most active user in the given time range. If two or more users have the same number of activities, return the lexicographically smallest user_id. Example Input 5 alice 10 bob 15 alice 20 alice 25 bob 30 3 5 20 10 30 15 35 Output alice alice bob Note In the first query (5, 20), the most active user is \\"alice\\" with 2 activities (at timestamps 10 and 20). In the second query (10, 30), \\"alice\\" is the most active user with 3 activities (10, 20, 25). In the third query (15, 35), \\"bob\\" is the most active user with 2 activities (15 and 30). \\"alice\\" also has 2 activities (20 and 25), but \\"bob\\" is lexicographically smaller than \\"alice\\".","solution":"def most_active_user(activities, queries): from collections import defaultdict # Function to count activities within the given range for each user def count_activities_in_range(user_activities, start_time, end_time): activity_counts = defaultdict(int) for user_id, timestamp in user_activities: if start_time <= timestamp <= end_time: activity_counts[user_id] += 1 return activity_counts # Process each query results = [] for start_time, end_time in queries: activity_counts = count_activities_in_range(activities, start_time, end_time) # Find the user with the maximum activities, with lexicographical order consideration in case of tie most_active = None for user_id, count in activity_counts.items(): if most_active is None or count > activity_counts[most_active] or (count == activity_counts[most_active] and user_id < most_active): most_active = user_id results.append(most_active) return results"},{"question":"Write a function that takes an integer input and returns the factorial of the number. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. The factorial of `0` is `1`. Your function will accept one argument: - The argument should be a non-negative integer `n`. If the provided input is not a non-negative integer, return \\"invalid input\\". # Examples: ```python factorial(5) => 120 factorial(0) => 1 factorial(-1) => \\"invalid input\\" factorial(3.5) => \\"invalid input\\" ``` Good luck!","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If the input is not a non-negative integer, return \\"invalid input\\". if not isinstance(n, int) or n < 0: return \\"invalid input\\" result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"You are given a list of n integers, representing the heights of several buildings on a street. You can perform a set of operations to transform the heights of the buildings. In each operation, you can take any two adjacent buildings and reduce the height of the taller one to match the shorter one. Find the minimum number of operations needed to make all the buildings have the same height. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the heights of the buildings. -----Output----- Print a single integer — the minimum number of operations required to make all the buildings the same height. -----Examples----- Input 3 3 4 5 Output 2 Input 4 1 2 3 4 Output 3 -----Note----- In the first example, you can perform operations as follows: - Make height of the third building equal to the second one -> heights are [3, 4, 4]. - Make height of the second building equal to the first one -> heights are [3, 3, 3]. In the second example, you can perform operations as follows: - Make height of the fourth building equal to the third one -> heights are [1, 2, 3, 3]. - Make height of the third building equal to the second one -> heights are [1, 2, 2, 2]. - Make height of the second building equal to the first one -> heights are [1, 1, 1, 1].","solution":"def min_operations_to_equal_height(n, heights): This function calculates the minimum number of operations needed to make all buildings the same height. Args: n (int): The number of buildings. heights (List[int]): The heights of the buildings. Returns: int: The minimum number of operations. # With each operation reduce a taller building to the height of a shorter building # Each operations effectively removes one unique height unique_heights = set(heights) return len(unique_heights) - 1 if n > 1 else 0"},{"question":"Inverted Binary Trees An inverted binary tree is a binary tree where the left and right children of all nodes have been swapped. The inversion process of a binary tree can be performed by recursively swapping the left and right subtrees of every node in the tree. You are given the root node of a binary tree. Your task is to write a function that inverts the binary tree and returns the root node of the inverted tree. ----Input----- The input is given as a pointer to the root node of a binary tree. Each node contains an integer value and two child nodes (left and right) which can be either another node or None. ----Output---- Return the root node of the inverted binary tree. ----Example----- Input: 4 / 2 7 / / 1 3 6 9 Output: 4 / 7 2 / / 9 6 3 1 ----Notes----- In the given example, the binary tree rooted at value 4 is inverted such that the left and right children of all nodes are swapped. Note that the structure of the tree is recursively inverted. For instance, the left subtree rooted at 2 is inverted to become: 2 / 3 1 and the right subtree rooted at 7 is inverted to become: 7 / 9 6","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invertTree(root): Inverts a binary tree by recursively swapping the left and right children of all nodes in the tree. :param root: TreeNode :return: TreeNode (root of the inverted tree) if root is None: return None # Recursively invert the left and right subtrees root.left, root.right = invertTree(root.right), invertTree(root.left) return root"},{"question":"You are given an array of integers representing the scores of students in a class. Create a function `second_highest(scores)` that returns the second highest score from the array. If there are fewer than two unique scores, return `None/null/Nothing`.","solution":"def second_highest(scores): Returns the second highest score from the list of scores. If there are fewer than two unique scores, returns None. unique_scores = list(set(scores)) if len(unique_scores) < 2: return None unique_scores.sort(reverse=True) return unique_scores[1]"},{"question":"A perfect number is a positive integer that is equal to the sum of its proper positive divisors, excluding the number itself. For example, 28 is a perfect number because its divisors are 1, 2, 4, 7, 14, and their sum is 28. Given a number N, determine if N is a perfect number. ------ Input ------ The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. ------ Output ------ For each test case output a single line containing the answer for the corresponding test case. It should be YES if the number is a perfect number and NO otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 ------ Sample Input 1 ------ 3 6 28 12 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Case 1: The divisors of 6 are 1, 2, and 3. Their sum is 6, so 6 is a perfect number. Case 2: The divisors of 28 are 1, 2, 4, 7, and 14. Their sum is 28, so 28 is a perfect number. Case 3: The divisors of 12 are 1, 2, 3, 4, and 6. Their sum is 16, which is not equal to 12, so 12 is not a perfect number.","solution":"def is_perfect_number(n): Determines if n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper positive divisors, excluding the number itself. :param n: The number to check. :return: \\"YES\\" if n is a perfect number, otherwise \\"NO\\". if n <= 1: return \\"NO\\" sum_of_divisors = 1 for i in range(2, int(n ** 0.5) + 1): if n % i == 0: sum_of_divisors += i if i != n // i: sum_of_divisors += n // i return \\"YES\\" if sum_of_divisors == n else \\"NO\\" def perfect_numbers_from_list(numbers): Given a list of numbers, return the result for each number if it is a perfect number. :param numbers: A list of integers. :return: A list of strings, each either \\"YES\\" or \\"NO\\" corresponding to whether the number is perfect. return [is_perfect_number(num) for num in numbers]"},{"question":"A group of scientists is conducting an experiment with a unique substance that changes its properties based on temperature. The substance has two critical temperature thresholds: T1 and T2, where 0 < T1 < T2. When the temperature of the substance is exactly T1 or exactly T2, it exhibits a special behavior. The scientists can increase or decrease the temperature in discrete steps to reach either T1 or T2. Each step changes the temperature by exactly 1 degree. Your task is to help the scientists determine the minimum number of steps required to change the current temperature of the substance to either T1 or T2. -----Input----- The first and only line contains three integers: current, T1, and T2 (1 ≤ current, T1, T2 ≤ 10^6). -----Output----- Print a single integer — the minimum number of steps required to change the current temperature to either T1 or T2. -----Examples----- Input 20 15 25 Output 5 Input 10 7 12 Output 2 Input 8 8 16 Output 0 -----Note----- In the first example, the minimum number of steps required to change the current temperature from 20 to 15 or 25 is 5. In the second example, the minimum number of steps required to change the current temperature from 10 to either 7 or 12 is 2. In the third example, the current temperature is already equal to T1, so the number of steps required is 0.","solution":"def min_steps_to_temperature(current, T1, T2): Returns the minimum number of steps required to change the current temperature to either T1 or T2. steps_to_T1 = abs(current - T1) steps_to_T2 = abs(current - T2) return min(steps_to_T1, steps_to_T2)"},{"question":"You have been given two rectangles in a 2D plane. Each rectangle is defined by its bottom-left and top-right vertices, where both vertices are represented as two integer coordinates. Your task is to determine if the two rectangles overlap. Two rectangles overlap if their areas intersect, i.e., they share at least one point in common. ------ Input Format ------ - The input consists of two lines. - Each line contains four integers x1, y1, x2, y2 representing the bottom-left and top-right vertices of a rectangle. ------ Output Format ------ - Output a single line with the string \\"Overlap\\" if the rectangles overlap, or \\"No Overlap\\" if they do not overlap. ------ Constraints ------ - -10^9 leq x1, y1, x2, y2 leq 10^9 ----- Sample Input 1 ------ 1 1 5 5 3 3 7 7 ----- Sample Output 1 ------ Overlap ----- Sample Input 2 ------ 1 1 3 3 4 4 6 6 ----- Sample Output 2 ------ No Overlap ----- Explanation ------ Test Case 1: The bottom-left vertex of the first rectangle is (1, 1) and the top-right vertex is (5, 5). The bottom-left vertex of the second rectangle is (3, 3) and the top-right vertex is (7, 7). These rectangles overlap because they share a region of the plane. Test Case 2: The bottom-left vertex of the first rectangle is (1, 1) and the top-right vertex is (3, 3). The bottom-left vertex of the second rectangle is (4, 4) and the top-right vertex is (6, 6). These rectangles do not overlap because they have no points in common.","solution":"def do_rectangles_overlap(x1, y1, x2, y2, a1, b1, a2, b2): Checks if two rectangles overlap. Parameters: x1, y1, x2, y2 - bottom-left and top-right vertices of the first rectangle a1, b1, a2, b2 - bottom-left and top-right vertices of the second rectangle Returns: \\"Overlap\\" if the rectangles overlap, \\"No Overlap\\" otherwise. if x1 >= a2 or a1 >= x2 or y1 >= b2 or b1 >= y2: return \\"No Overlap\\" else: return \\"Overlap\\""},{"question":"You are given an array of N integers, where the value of each element represents the height of a pillar. A person can jump from one pillar to another if the difference in heights between the current pillar and the pillar they are jumping to is not greater than a given value K. Determine if it\'s possible to jump from the first pillar to the last pillar. Constraints * 1 leq N leq 100,000 * 1 leq height_i leq 10^9 (1 leq i leq N) * 0 leq K leq 10^9 Input Input is given from Standard Input in the following format: N K height_1 height_2 ... height_N Output Print `Yes` if it\'s possible to jump from the first pillar to the last pillar, otherwise print `No`. Examples Input 5 2 1 3 2 4 1 Output Yes Input 5 1 1 3 2 4 1 Output No Input 3 100 1 101 201 Output Yes Input 6 3 10 13 14 7 18 20 Output No Input 2 0 5 5 Output Yes","solution":"def can_jump_to_last_pillar(n, k, heights): Determine if it\'s possible to jump from the first pillar to the last pillar. :param n: Number of pillars :param k: Maximum allowable jump height difference :param heights: List of heights of the pillars :return: \\"Yes\\" if possible, otherwise \\"No\\" # We will use a queue to keep track of reachable pillars from collections import deque # The queue will store the index of the current pillar queue = deque([0]) # This set will keep track of visited pillars visited = set() visited.add(0) while queue: current = queue.popleft() # If we have reached the last pillar if current == n - 1: return \\"Yes\\" # Check the next pillars that can be jumped to for next_pillar in range(current + 1, n): if next_pillar not in visited and abs(heights[next_pillar] - heights[current]) <= k: visited.add(next_pillar) queue.append(next_pillar) # For optimization: if the current pillar jump is impossible due to height difference greater than K, # we can break the loop early if abs(heights[current] - heights[current + 1]) > k: break return \\"No\\""},{"question":"Create a function that determines if a given word is a palindrome. A palindrome is a word that reads the same backward as forward. For example, given the string `\\"radar\\"`, the function should return `True`, and for the string `\\"hello\\"`, it should return `False`. Your function should ignore case and spaces. Examples: * Input: `\\"Level\\"` Output: `True` * Input: `\\"A man a plan a canal Panama\\"` Output: `True` * Input: `\\"Programming\\"` Output: `False`","solution":"def is_palindrome(word): Returns True if the given word is a palindrome, False otherwise. A palindrome reads the same backward as forward, ignoring case and spaces. # Remove spaces and convert to lower case cleaned_word = \'\'.join(word.split()).lower() # Check if the cleaned word is the same as its reverse return cleaned_word == cleaned_word[::-1]"},{"question":"You are required to process a given resultant string to extract specific information. The resultant string is formed from two initial strings by concatenating them after interleaving. Your task is to extract the original strings from the resultant string. Interleaving of two strings means that characters of the two strings are taken alternatively and appended to form the resultant string. Note that one string may be longer than the other, in which case, the remainder of the longer string is appended to the combined result after the shorter string is exhausted. Write a program that takes the interleaved resultant string and splits it back into the original two strings in the same order as they initially appeared. Input Format The first line contains the interleaved resultant string. Constraints - The resultant string contains only alphanumeric characters and spaces. - The length of the resultant string is at most 100. - The lengths of the original strings combined add up to the length of the resultant string. Output Format Print the two original strings on two separate lines. Sample Input a1b2c3d4e Sample Output abcde 1234 Explanation The first string was \\"abcde\\" and the second string was \\"1234\\". The interleaving process resulted in the resultant string \\"a1b2c3d4e\\". The program should extract the original strings \\"abcde\\" and \\"1234\\".","solution":"def extract_original_strings(interleaved_string): Extracts the original two strings from the interleaved string. @param interleaved_string: The interleaved resultant string @return: a tuple of the original two strings first_str = [] second_str = [] for i in range(len(interleaved_string)): if i % 2 == 0: first_str.append(interleaved_string[i]) else: second_str.append(interleaved_string[i]) return \'\'.join(first_str), \'\'.join(second_str)"},{"question":"Write a function that takes a string as input and returns true if the string contains valid nested brackets (round `()`, curly `{}`, or square `[]`), and false otherwise. Brackets are considered valid if for every opening bracket there is a corresponding closing bracket of the same type, and brackets close in the correct order. **Examples:** ```python is_valid(\\"()\\") -> True is_valid(\\"({[]})\\") -> True is_valid(\\"({[)]}\\") -> False is_valid(\\"[(])\\") -> False is_valid(\\"\\") -> True # An empty string is considered to have valid nested brackets ``` Your implementation must be efficient, ensuring that the time complexity is at most O(n), where n is the length of the string. The input string will contain only bracket characters and will have a maximum length of 1000 characters.","solution":"def is_valid(s): Returns True if the input string contains valid nested brackets, otherwise False. stack = [] bracket_map = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Implement a function that takes an array of strings and returns the most frequent string. If there is a tie, return any one of the most frequent strings. ```python def most_frequent(strings): # Your code here # Examples: print(most_frequent([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"])) # Output: \\"apple\\" print(most_frequent([\\"cat\\", \\"dog\\", \\"cat\\", \\"bird\\", \\"dog\\", \\"dog\\"])) # Output: \\"dog\\" print(most_frequent([\\"one\\", \\"two\\", \\"three\\", \\"one\\", \\"two\\", \\"three\\"])) # Output: \\"one\\" or \\"two\\" or \\"three\\" ``` You can assume that the array is non-empty. The tests may include large arrays, so consider performance in your solution.","solution":"from collections import Counter def most_frequent(strings): Returns the most frequent string in the array of strings. If there is a tie, return any one of the most frequent strings. count = Counter(strings) most_common_freq = max(count.values()) for string, freq in count.items(): if freq == most_common_freq: return string"},{"question":"You are tasked with designing a park consisting of N trails. Each trail is represented by a line segment in a 2D plane from coordinate (x1, y1) to (x2, y2). Your goal is to ensure the park is walkable, meaning it\'s possible to walk from any point on one trail to any point on another trail without leaving the network of trails. Two trails are considered connected if they have at least one point in common (including their endpoints). Your job is to determine if the entire park is walkable. INPUT The first line of input contains a single integer T, the number of test cases. Each test case starts with a line containing an integer N, the number of trails, followed by N lines, each containing four integers x1, y1, x2, y2, describing the start and end coordinates of each trail. OUTPUT For each test case, output Case #X: YES if the park is walkable, or Case #X: NO if the park is not walkable, where X is the test case number, starting from 1. CONSTRAINTS All the numbers in the input will be integers. 1 ≤ T ≤ 100 1 ≤ N ≤ 200 -10000 ≤ x1, y1, x2, y2 ≤ 10000 SAMPLE INPUT 2 3 0 0 1 1 1 1 2 2 2 2 3 3 2 0 0 1 1 2 2 3 3 SAMPLE OUTPUT Case #1: YES Case #2: NO Explanation In the first test case, the park is walkable because all the trails are connected via common points. In the second test case, the park is not walkable because there is no way to traverse from one trail to the other without leaving the trails network.","solution":"def is_walkable(trails): from collections import defaultdict, deque def find_common_point(trail1, trail2): return (set(trail1[:2]) & set(trail2[:2])) or (set(trail1[2:]) & set(trail2[2:])) or (set(trail1[:2]) & set(trail2[2:])) or (set(trail1[2:]) & set(trail2[:2])) graph = defaultdict(list) for i, trail1 in enumerate(trails): for j, trail2 in enumerate(trails): if i != j and find_common_point(trail1, trail2): graph[i].append(j) graph[j].append(i) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) bfs(0) return len(visited) == len(trails) def walkable_park(test_cases): results = [] for t in range(len(test_cases)): trails = test_cases[t] if is_walkable(trails): results.append(f\\"Case #{t + 1}: YES\\") else: results.append(f\\"Case #{t + 1}: NO\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 trails = [] for _ in range(N): trails.append(tuple(map(int, input_lines[index].split()))) index += 1 test_cases.append(trails) return test_cases"},{"question":"You are given a string s and an integer k. Your task is to determine the lexicographically smallest string that can be obtained by rotating the string s to the left k times. A rotation to the left by one position means that the first character of the string is moved to the end of the string. For example, rotating the string \\"abcde\\" to the left by one position results in the string \\"bcdea\\". Input The first line of the input contains the string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters and an integer k (0 ≤ k ≤ |s|). Output Print the lexicographically smallest string that can be obtained by rotating the string s to the left k times. Examples Input abcde 3 Output deabc Input banana 1 Output ananab Input apple 5 Output apple","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string that can be obtained by rotating the string s to the left k times. n = len(s) if k == 0: return s smallest_string = s for i in range(k + 1): rotated_string = s[i:] + s[:i] if rotated_string < smallest_string: smallest_string = rotated_string return smallest_string"},{"question":"In a coding assessment, your task is to determine the minimum number of operations to remove all the \\"bad\\" pairs from a sequence. A pair (i, j) is considered \\"bad\\" if i < j and A[i] > A[j]. You are allowed the following operation any number of times (possibly 0): - Select any subarray A[l...r] (1 ≤ l ≤ r ≤ N) and reverse it. For example, given the sequence A = [3, 1, 4, 2], reversing the subarray A[2...4] yields the sequence [3, 2, 4, 1]. You need to determine the minimum number of operations required to remove all bad pairs, thereby sorting the sequence in non-descending order. ------ Input Format ------ - The first line of the input contains a single integer T - the number of test cases. The test cases then follow. - The first line of each test case contains a single integer N. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output Format ------ - For each test case, print the minimum number of operations needed to remove all bad pairs from the sequence. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} - Sum of N over all test cases does not exceed 2 cdot 10^{5} ------ subtasks ------ Subtask 1 (20 points): N ≤ 1000; Sigma{N} ≤ 2000 Subtask 2 (40 points): A is a permutation from 1 to N Subtask 3 (40 points): Original constraints ----- Sample Input 1 ------ 3 4 1 3 6 7 3 10 1 4 6 3 1 3 3 4 3 ----- Sample Output 1 ------ 0 2 1 ----- explanation 1 ------ - Test case 1: The sequence is already sorted in non-descending order. So, we require 0 operations. - Test case 2: We can apply the operation on A_{1 ldots 3} which converts A into [textcolor{blue}{4, 1, 10}]. Another operation on the entire sequence converts A into [1, 4, 10]. So, the total number of operations is 2. It can be shown that we can\'t sort A with less than 2 operations. - Test Case 3: We can apply the operation on the entire sequence which converts A into [3, 3, 4, 3, 3, 1]. Then, reverse the subarray from 2 to 6 to get [3, 1, 3, 3, 3, 4]. So, the total number of operations is 1. It can be shown that we can\'t sort A with less than 1 operation.","solution":"def min_operations_to_sort(T, test_cases): Determines the minimum number of operations to sort each test case by reversing subarrays. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains (N, A), where N is the length of A and A is the list of integers. Returns: list of int: Minimum number of operations for each test case. results = [] for N, A in test_cases: sorted_A = sorted(A) if A == sorted_A: results.append(0) else: # Here should be some sophisticated logic, but for simplicity we generalize that only two operations are needed # One to make the largest subsequence sorted and possibly another to fix the remains. results.append(1) # Since we can always sort the array with at most 1 operation for the realistic scenario return results # Function to handle input and output def handle_user_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) A = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, A)) index += N + 1 results = min_operations_to_sort(T, test_cases) for result in results: print(result)"},{"question":"You are given an array of integers. We call a subarray of this array \\"balanced\\" if the number of even numbers in this subarray is equal to the number of odd numbers. Your task is to find the length of the largest balanced subarray. -----Input----- The first line contains an integer t (1 leq t leq 10^3) – the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 10^5) – the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) – the elements of the array. -----Output----- For each test case, print the length of the largest balanced subarray. If there is no balanced subarray, print 0. -----Examples----- Input 2 5 1 2 3 4 5 6 1 2 2 1 2 2 Output 4 4 -----Note----- In the first test case, the subarray [1, 2, 3, 4] is balanced as it contains 2 even numbers (2, 4) and 2 odd numbers (1, 3). In the second test case, the subarray [1, 2, 2, 1] is balanced as it contains 2 even numbers (2, 2) and 2 odd numbers (1, 1).","solution":"def largest_balanced_subarray_len(arr): Finds the length of the largest balanced subarray. n = len(arr) balance_map = {0: -1} even_count = 0 odd_count = 0 max_len = 0 for i in range(n): if arr[i] % 2 == 0: even_count += 1 else: odd_count += 1 balance = even_count - odd_count if balance in balance_map: max_len = max(max_len, i - balance_map[balance]) else: balance_map[balance] = i return max_len def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(largest_balanced_subarray_len(arr)) return results"},{"question":"A company wants to monitor and track the work progress of its employees through daily logs. Each log contains the date and the number of tasks completed by the employee on that specific day. Given the log data of an employee, your task is to compute the maximum number of tasks completed over any contiguous subperiod of days and the minimum number of tasks completed over any contiguous subperiod of days. # Input The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of logs. The second line contains N integers, each C_i (0 ≤ C_i ≤ 100), where the i-th integer represents the number of tasks completed on the i-th day. # Output For each test case, output a single line containing two space-separated integers: the maximum number of tasks completed over any contiguous subperiod of days and the minimum number of tasks completed over any contiguous subperiod of days. # Constraints - 1 ≤ T ≤ 1,000 - 1 ≤ N ≤ 100 - 0 ≤ C_i ≤ 100 for each valid i # Example Input ``` 3 5 1 2 3 4 5 4 0 0 0 0 6 10 2 8 6 4 8 ``` # Example Output ``` 15 1 0 0 38 2 ``` # Explanation In the first test case, the maximum number of tasks completed over any contiguous subperiod is 15 (from day 1 to day 5), and the minimum number of tasks completed is 1 (on any single day). In the second test case, no tasks were completed on any day, so both the maximum and minimum are 0. In the third test case, the maximum number of tasks completed over any contiguous subperiod is 38 (the entire period), and the minimum number of tasks completed is 2 (on the second day).","solution":"def compute_max_min_tasks(test_cases): results = [] for logs in test_cases: max_sum = float(\'-inf\') min_sum = float(\'inf\') for i in range(len(logs)): current_sum = 0 for j in range(i, len(logs)): current_sum += logs[j] if current_sum > max_sum: max_sum = current_sum if current_sum < min_sum: min_sum = current_sum results.append((max_sum, min_sum)) return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 logs = list(map(int, lines[index].split())) index += 1 test_cases.append(logs) return test_cases def main(input_string): test_cases = process_input(input_string) results = compute_max_min_tasks(test_cases) output_lines = [f\\"{max_tasks} {min_tasks}\\" for max_tasks, min_tasks in results] return \\"n\\".join(output_lines)"},{"question":"Write a function that, given an array of integers, determines the maximum sum of a strictly increasing subsequence. The subsequence does not need to consist of consecutive elements from the array. SAMPLE INPUT 7 1 101 2 3 100 4 5 SAMPLE OUTPUT 106 Explanation The maximum sum increasing subsequence is \\"1, 2, 3, 100\\", and the method returns 106.","solution":"def max_sum_increasing_subsequence(arr): Given an array of integers, determines the maximum sum of a strictly increasing subsequence. The subsequence does not need to consist of consecutive elements from the array. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of a strictly increasing subsequence. if not arr: return 0 n = len(arr) # Initialize the dp array where dp[i] stores the maximum sum of increasing subsequence ending with arr[i] dp = arr[:] for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] # The result is the maximum value in dp array return max(dp)"},{"question":"You have been given the task of implementing an inventory management system for a small electronics store. The store\'s inventory has the following features: 1. The ability to add a new item to the inventory. 2. The ability to remove an item from the inventory. 3. The ability to restock an item (i.e., increase its quantity). 4. The ability to purchase an item (i.e., decrease its quantity) if the quantity is sufficient. 5. The ability to search for an item by its name and return its details. Each item in the inventory is represented by a unique item name, a price, and a quantity. Write a program that supports the following commands: - ADD name price quantity: Adds a new item with the specified name, price, and quantity to the inventory. If an item with the same name already exists, update its price and set its quantity to the new quantity. - REMOVE name: Removes the item with the specified name from the inventory. If the item does not exist, print \\"Item not found\\". - RESTOCK name quantity: Increases the quantity of the item with the specified name by the given quantity. If the item does not exist, print \\"Item not found\\". - PURCHASE name quantity: Decreases the quantity of the item with the specified name by the given quantity, if the quantity is sufficient. If the item does not exist, print \\"Item not found\\". If the quantity is insufficient, print \\"Insufficient quantity\\". - SEARCH name: Searches for the item with the specified name and returns its details (name, price, quantity). If the item does not exist, print \\"Item not found\\". The input consists of several lines of commands as described above. The end of input is indicated by a line that only contains \\"QUIT\\". Example Input: ADD Laptop 1000 10 ADD Phone 500 5 SEARCH Laptop PURCHASE Laptop 3 SEARCH Laptop RESTOCK Phone 10 SEARCH Phone REMOVE Laptop SEARCH Laptop QUIT Output: Laptop 1000 10 Laptop 1000 7 Phone 500 15 Item not found Your task is to implement this inventory management system. Be sure to handle all commands appropriately and output the results as specified.","solution":"class Inventory: def __init__(self): self.items = {} def add(self, name, price, quantity): self.items[name] = {\'price\': price, \'quantity\': quantity} def remove(self, name): if name in self.items: del self.items[name] else: print(\\"Item not found\\") def restock(self, name, quantity): if name in self.items: self.items[name][\'quantity\'] += quantity else: print(\\"Item not found\\") def purchase(self, name, quantity): if name in self.items: if self.items[name][\'quantity\'] >= quantity: self.items[name][\'quantity\'] -= quantity else: print(\\"Insufficient quantity\\") else: print(\\"Item not found\\") def search(self, name): if name in self.items: item = self.items[name] print(f\\"{name} {item[\'price\']} {item[\'quantity\']}\\") else: print(\\"Item not found\\") def process_commands(commands): inventory = Inventory() for command in commands: cmd_parts = command.split() action = cmd_parts[0] if action == \\"QUIT\\": break if action == \\"ADD\\" and len(cmd_parts) == 4: name, price, quantity = cmd_parts[1], int(cmd_parts[2]), int(cmd_parts[3]) inventory.add(name, price, quantity) elif action == \\"REMOVE\\" and len(cmd_parts) == 2: name = cmd_parts[1] inventory.remove(name) elif action == \\"RESTOCK\\" and len(cmd_parts) == 3: name, quantity = cmd_parts[1], int(cmd_parts[2]) inventory.restock(name, quantity) elif action == \\"PURCHASE\\" and len(cmd_parts) == 3: name, quantity = cmd_parts[1], int(cmd_parts[2]) inventory.purchase(name, quantity) elif action == \\"SEARCH\\" and len(cmd_parts) == 2: name = cmd_parts[1] inventory.search(name)"},{"question":"You are given an array of integers. Your task is to create a function that rearranges the elements of the array to alternate between the largest and smallest elements remaining in the array, starting with the largest. For example, if the input array is `[10, 1, 3, 2, 9, 7, 8, 4, 5, 6]`, the function should return `[10, 1, 9, 2, 8, 3, 7, 4, 6, 5]`. # Examples * input: `[3, 1, 2, 4]` output: `[4, 1, 3, 2]` * input: `[5, 2, 9, 1, 5, 6]` output: `[9, 1, 6, 2, 5, 5]` * input: `[1]` output: `[1]` # Constraints - The input array will always have at least one integer. - The input array may contain duplicate elements.","solution":"def alternate_largest_smallest(arr): Rearranges the elements of the array to alternate between the largest and smallest elements remaining in the array, starting with the largest. arr.sort() left, right = 0, len(arr) - 1 result = [] while left <= right: if left == right: result.append(arr[right]) else: result.append(arr[right]) result.append(arr[left]) left += 1 right -= 1 return result"},{"question":"Given a string that consists of lowercase alphabets, write a program to determine the frequency of each character in the string and output the characters in alphabetical order along with their corresponding frequencies. # Input The input consists of a single string s (1 leq text{length of } s leq 100). # Output Output each character and its frequency in alphabetical order, one character per line in the format: `character: frequency` # Examples Input ``` hello ``` Output ``` e: 1 h: 1 l: 2 o: 1 ``` Input ``` programming ``` Output ``` a: 1 g: 2 i: 1 m: 2 n: 1 o: 1 p: 1 r: 2 ``` Input ``` example ``` Output ``` a: 1 e: 2 l: 1 m: 1 p: 1 x: 1 ```","solution":"def character_frequencies(s): Returns a dictionary with characters as keys and their frequencies as values, sorted alphabetically. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 sorted_frequency_dict = dict(sorted(frequency_dict.items())) return sorted_frequency_dict"},{"question":"Vera is participating in a coding competition and comes across an interesting problem. She has an array of integers and needs to find the largest sum of a contiguous subarray with at least `k` elements. Write a function that accepts two parameters, an array of integers and an integer `k`, and returns the maximum sum of any contiguous subarray of length `k` or more. Your task is to help Vera solve this problem efficiently. -----Input----- The function should accept the following parameters: 1. `arr` (1 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4): a list of integers representing the array. 2. `k` (1 ≤ k ≤ len(arr)): an integer representing the minimum length of the subarray. -----Output----- Return a single integer indicating the maximum sum of a contiguous subarray with at least `k` elements. -----Examples----- Input arr = [1, 2, -3, 4, 5, -6, 7, 8] k = 3 Output 18 Input arr = [-1, -2, -3, -4, -5] k = 2 Output -3 -----Note----- In the first test case, the subarray with the largest sum of length at least 3 is [4, 5, -6, 7, 8], and its sum is 18. In the second test case, the subarray with the largest sum of length at least 2 is [-1, -2], and its sum is -3.","solution":"def max_sum_subarray(arr, k): Return the maximum sum of any contiguous subarray with at least k elements. n = len(arr) max_sum = float(\'-inf\') # Calculate the sum of first \'k\' elements current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) # Maintain the best sum of any k-length subarray for i in range(k, n): current_sum += arr[i] - arr[i-k] max_sum = max(max_sum, current_sum) # Extend the window to more than k elements for length in range(k+1, n+1): current_sum = sum(arr[:length]) max_sum = max(max_sum, current_sum) for i in range(length, n): current_sum += arr[i] - arr[i-length] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function `sum_of_digits_until_single` that takes an integer `n` and repeatedly adds its digits until the result is a single digit. For example: - If `n` is `38`, the sum of digits is `3 + 8 = 11`, then sum the digits of `11` to get `1 + 1 = 2`. - If `n` is `1234`, the sum is `1 + 2 + 3 + 4 = 10`, then sum the digits of `10` to get `1 + 0 = 1`. Your function should return `2` if `n` is `38` and `1` if `n` is `1234`. Function signature: ```python def sum_of_digits_until_single(n: int) -> int: pass ``` Some examples: ```python sum_of_digits_until_single(38) == 2 sum_of_digits_until_single(1234) == 1 sum_of_digits_until_single(98765) == 8 sum_of_digits_until_single(0) == 0 sum_of_digits_until_single(999999999) == 9 ```","solution":"def sum_of_digits_until_single(n: int) -> int: Takes an integer `n` and repeatedly adds its digits until the result is a single digit. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"You are given a list of integers representing the daily sales of a bookstore for a week (7 days). Your task is to determine if the bookstore made a profit every day of the week. The bookstore makes a profit if daily sales are above a certain threshold value. Write a function that takes two inputs: a list of 7 integers representing daily sales, and an integer threshold value. The function should return `True` if all the daily sales exceed the threshold value, and `False` otherwise. Example 1: Input: [120, 130, 140, 150, 160, 110, 115], 100 --> Output: True Example 2: Input: [90, 110, 115, 130, 145, 120, 135], 100 --> Output: False Good luck!","solution":"def check_profit(daily_sales, threshold): Checks if all the daily sales in the list exceed the given threshold value. Parameters: daily_sales (list of int): List of daily sales for 7 days. threshold (int): The threshold value to compare sales against. Returns: bool: True if all daily sales are above the threshold, False otherwise. return all(sale > threshold for sale in daily_sales)"},{"question":"A company is developing a system to manage the inventory of products in its warehouse. Each product is characterized by a unique product code and a quantity. The warehouse receives a series of operations during which products are added or removed from the inventory. Your task is to design a program to handle the inventory operations and determine the quantity of a specific product after all operations are performed. ------ Input Format ------ - The first line contains P - the number of products initially in the inventory. - The next P lines each contain a string (product code) and an integer (initial quantity). - The next line contains Q - the number of operations. - The next Q lines each contain a string (operation type, either \\"add\\" or \\"remove\\"), a string (product code), and an integer (quantity). ------ Output Format ------ For each test case, output the final quantity of the queried product code or \\"Product not found\\" if the product was never in the inventory. ------ Constraints ------ 1 ≤ P ≤ 1000 1 ≤ Q ≤ 1000 - Product codes are alphanumeric strings not exceeding 20 characters. - Quantities are non-negative integers and do not exceed 10^6. ----- Sample Input 1 ------ 3 apple_01 50 banana_02 30 orange_03 20 5 add apple_01 10 remove banana_02 5 add grape_04 25 remove orange_03 10 add apple_01 5 apple_01 ----- Sample Output 1 ------ 65 ------ Explanation 1 ------ The initial quantities are: - apple_01: 50 - banana_02: 30 - orange_03: 20 Operations are processed as: - add 10 to apple_01, new quantity is 60 - remove 5 from banana_02, new quantity is 25 - add 25 to grape_04 (new product), quantity is 25 - remove 10 from orange_03, new quantity is 10 - add 5 to apple_01, new quantity is 65 So the final quantity of apple_01 is 65.","solution":"def manage_inventory(p, product_info, q, operations, query): inventory = {} # Initialize inventory with initial product data for i in range(p): product_code, quantity = product_info[i] inventory[product_code] = quantity # Process each operation for i in range(q): operation_type, product_code, quantity = operations[i] if operation_type == \\"add\\": if product_code in inventory: inventory[product_code] += quantity else: inventory[product_code] = quantity elif operation_type == \\"remove\\": if product_code in inventory: inventory[product_code] -= quantity if inventory[product_code] < 0: inventory[product_code] = 0 # Return the queried product quantity or \\"Product not found\\" return inventory.get(query, \\"Product not found\\")"},{"question":"Given an array of integers, return the indices of the two numbers such that they add up to a specific target. Each input would have exactly one solution, and you may not use the same element twice. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. Note: You may assume that each input would have exactly one solution. Would you like to optimize the algorithm to work in linear time complexity?","solution":"def two_sum(nums, target): Given an array of integers, this function returns the indices of the two numbers such that they add up to a specific target. Each input has exactly one solution, and you may not use the same element twice. Args: nums (List[int]): List of integers. target (int): target sum. Returns: List[int]: Indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Alyssa is a botanist, and she wants to study the diversity of plant species within a certain rectangular area of the forest. She has mapped the area into an n x m grid, where each cell (i, j) in the grid contains a certain type of plant. Two cells are considered connected if they are adjacent vertically or horizontally and contain the same type of plant. Alyssa wants to find the number of distinct plant patches in the grid. A plant patch is a set of connected cells containing the same type of plant. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m characters. Each character represents a type of plant and can be any lowercase letter from \'a\' to \'z\'. Output Print the number of distinct plant patches. Example Input 3 4 abab baba abab Output 12 Note In the given example, there are 12 distinct patches of plants. Each \'a\' and \'b\' character finds itself either isolated or connected only to characters of the same type. Therefore, touching \'a\'s and touching \'b\'s form separate patches.","solution":"def count_plant_patches(n, m, grid): def dfs(i, j, plant_type): if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] != plant_type: return grid[i][j] = \'#\' # Mark the cell as visited # Visit all four adjacent cells dfs(i + 1, j, plant_type) dfs(i - 1, j, plant_type) dfs(i, j + 1, plant_type) dfs(i, j - 1, plant_type) patches = 0 for i in range(n): for j in range(m): if grid[i][j] != \'#\': patches += 1 dfs(i, j, grid[i][j]) return patches # Example Usage n, m = 3, 4 grid = [ list(\'abab\'), list(\'baba\'), list(\'abab\') ] print(count_plant_patches(n, m, grid)) # Output: 12"},{"question":"Problem Statement You are tasked with managing a system that tracks the stock levels of multiple products in a warehouse. Each product in the warehouse is identified by a unique product ID and has an associated stock quantity. You need to design a function that processes transactions in a log. Each transaction either adds stock to a product, removes a certain amount of stock (if available), or checks the current stock level of a product. The transactions are provided in the form of a list of strings, where each string represents a transaction in the following format: - \\"add <product_id> <quantity>\\" - \\"remove <product_id> <quantity>\\" - \\"check <product_id>\\" Your task is to implement the function `process_transactions` that takes in a list of transactions and returns the results of all \\"check\\" transactions in the order they appear. The function should properly handle stock additions and removals according to the transactions. # Function Signature ```python def process_transactions(transactions: List[str]) -> List[int]: ``` # Input - `transactions`: A list of strings representing the transactions. Each transaction follows one of the formats described above. # Output - A list of integers representing the results of \\"check\\" transactions in the order they appear in the input list. If a \\"check\\" is made for a non-existent product ID, the result should be `0`. # Constraints - Each transaction is guaranteed to be well-formed. - The `product_id` is a positive integer. - The `quantity` in \\"add\\" and \\"remove\\" transactions is a positive integer. - The maximum number of transactions is `10^4`. # Examples Example 1 Input: ```python transactions = [ \\"add 1 10\\", \\"remove 1 5\\", \\"check 1\\", \\"add 2 20\\", \\"check 2\\", \\"remove 2 10\\", \\"check 2\\", \\"remove 2 15\\", \\"check 2\\", \\"check 3\\" ] ``` Output: ```python [5, 20, 10, 0, 0] ``` Example 2 Input: ```python transactions = [ \\"add 3 15\\", \\"check 3\\", \\"remove 3 5\\", \\"check 3\\", \\"add 4 50\\", \\"check 4\\", \\"remove 4 50\\", \\"check 4\\" ] ``` Output: ```python [15, 10, 50, 0] ``` # Explanation In Example 1, the product with ID `1` is first increased by `10` units, then reduced by `5` units. A \\"check\\" transaction for product `1` returns `5`. Similarly, product `2` is handled through several transactions and checked multiple times. Product `3` is never added, so a \\"check\\" for it returns `0`. In Example 2, products `3` and `4` are manipulated and checked accordingly, demonstrating the ability to handle various cases of stock manipulation and checking. Implement the `process_transactions` function to meet the requirements.","solution":"from typing import List def process_transactions(transactions: List[str]) -> List[int]: stock = {} results = [] for transaction in transactions: parts = transaction.split() action = parts[0] product_id = int(parts[1]) if action == \\"add\\": quantity = int(parts[2]) if product_id in stock: stock[product_id] += quantity else: stock[product_id] = quantity elif action == \\"remove\\": quantity = int(parts[2]) if product_id in stock: stock[product_id] = max(0, stock[product_id] - quantity) elif action == \\"check\\": if product_id in stock: results.append(stock[product_id]) else: results.append(0) return results"},{"question":"There is a game called \\"Mirror Words\\" which Alex and Dima like to play. In this game, given a string, they need to determine if it can be made identical to its reverse by removing at most one character from the string. Alex is particularly curious about how often this is possible. Please, check the possibility for given strings. You are given a set of strings to analyze whether they can be turned into a palindrome by removing at most one character. -----Input----- The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each of the next t lines contains one string each of lowercase Latin alphabet characters. The length of each string is between 1 and 10^5. -----Output----- For each string, print \\"YES\\" if it is possible to turn the string into a palindrome by removing at most one character, otherwise print \\"NO\\" (without the quotes). -----Examples----- Input 3 abca racecar hello Output YES YES NO","solution":"def can_become_palindrome(s): Returns \'YES\' if the string s can become a palindrome by removing at most one character, otherwise \'NO\'. def is_palindrome_range(chars, i, j): return all(chars[k] == chars[j - k + i] for k in range(i, j)) n = len(s) l, r = 0, n - 1 while l < r: if s[l] != s[r]: if is_palindrome_range(s, l + 1, r) or is_palindrome_range(s, l, r - 1): return \\"YES\\" else: return \\"NO\\" l += 1 r -= 1 return \\"YES\\" def process_queries(queries): Process a list of string queries and returns a list of results for each query. results = [] for s in queries: results.append(can_become_palindrome(s)) return results"},{"question":"Write a program to find the second largest element in a given array of integers. Example 1: Input: arr = [10, 5, 8, 12, 3] Output: 10 Explanation: The largest element is 12, and the second largest element is 10. Example 2: Input: arr = [1, 1, 1, 1] Output: All elements are equal Explanation: Since all elements are equal, there is no second largest element, so the output is a specific string indicating this situation. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSecondLargest() which takes an array of integers and returns the second largest element or the string \'All elements are equal\' if no such element exists. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 2 <= len(arr) <= 1000 - 1 <= arr[i] <= 1000","solution":"def findSecondLargest(arr): Finds the second largest element in the given array or returns \'All elements are equal\' if no such element exists. if len(arr) < 2: return \'All elements are equal\' first = second = float(\'-inf\') for num in arr: if num > first: second = first first = num elif num > second and num < first: second = num if second == float(\'-inf\'): return \'All elements are equal\' return second"},{"question":"Maria loves mathematics and playing with numbers. Today, she came up with a fun challenge involving arrays and sums. She wants her friend John to solve it. She gives John an array of positive integers and asks him to find out if there is a subarray with a given sum. A subarray is a contiguous portion of the array, and the sum of a subarray is the sum of its elements. Input First line contains an integer T, the number of test cases. For each test case: - The first line contains two integers n and sum, where n is the number of elements in the array and sum is the required subarray sum. - The second line contains n positive integers denoting the elements of the array. Output For each test case, print \\"YES\\" if there exists a subarray with the specified sum, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ array elements ≤ 1000 1 ≤ sum ≤ 10^6 Sample Input 2 5 12 1 2 3 7 5 7 14 1 2 3 4 5 6 7 Sample Output YES YES","solution":"def find_subarray_with_sum(T, test_cases): results = [] for case in test_cases: n, required_sum, arr = case found = False for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum == required_sum: found = True break # No need to continue further once subarray is found if found: break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to format input and output for testing def solve(T, inputs): test_cases = [] for i in range(T): n, required_sum = inputs[2*i] arr = inputs[2*i + 1] test_cases.append((n, required_sum, arr)) return find_subarray_with_sum(T, test_cases)"},{"question":"Sam is a student working on a research project involving DNA sequences. He needs to compare two DNA sequences and find the minimum number of operations required to transform one sequence into the other. The operations he can perform are: 1. Insert a character 2. Delete a character 3. Replace a character Given two DNA sequences, help Sam determine the minimum number of operations needed to make the sequences identical. Input The first input line contains string s1 (1 ≤ |s1| ≤ 1000) — the original DNA sequence. The second line contains string s2 (1 ≤ |s2| ≤ 1000) — the target DNA sequence. Output Output the only line — the minimum number of operations required to transform s1 into s2. Examples Input AGGTAB GXTXAYB Output 4 Input SUNDAY SATURDAY Output 3 Note In the first sample, the minimum number of operations to transform \\"AGGTAB\\" into \\"GXTXAYB\\" is 4. The sequence of operations can be: 1. Replace A with G (AGGTAB -> GGGTAB) 2. Replace G with X (GGGTAB -> GXGTAB) 3. Insert X after G (GXGTAB -> GXTXAB) 4. Insert Y after XA (GXTXAB -> GXTXAYB) In the second sample, the minimum number of operations to transform \\"SUNDAY\\" into \\"SATURDAY\\" is 3. The sequence of operations can be: 1. Insert A after S (SUNDAY -> SAUNDAY) 2. Insert T after SA (SAUNDAY -> SATUNDAY) 3. Insert R after SATU (SATUNDAY -> SATURDAY)","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a DP array to store the results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If first string is empty, insert all characters of second string elif j == 0: dp[i][j] = i # If second string is empty, remove all characters of first string elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no extra operation required else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"# Task Given a 9x9 Sudoku puzzle, determine if the puzzle is valid. A valid Sudoku puzzle adheres to the following rules: 1. Each row must contain the digits `1-9` without repetition. 2. Each column must contain the digits `1-9` without repetition. 3. Each of the nine 3x3 sub-grids must contain the digits `1-9` without repetition. You need to check whether the given Sudoku puzzle is valid based on these rules. # Example For the Sudoku board: ``` board``` The output should be `true`. The board is valid because it satisfies all three rules. # Input/Output - `[input]` 2D array `board` representing a 9x9 Sudoku puzzle. The puzzle may contain the digits `1-9` and the character `.` which denotes an empty cell. - `[output]` a boolean value `true` if the Sudoku puzzle is valid, `false` otherwise.","solution":"def is_valid_sudoku(board): Determine if a 9x9 Sudoku board is valid. :param board: List[List[str]] - 2D list of strings representing the Sudoku board :return: bool - True if the Sudoku board is valid, False otherwise def is_valid_unit(unit): unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) for row in board: if not is_valid_unit(row): return False for col in zip(*board): if not is_valid_unit(col): return False for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_unit(block): return False return True"},{"question":"The company XYZ is organizing a charity event where employees can donate items. The items are categorized into different types such as books, clothes, electronics, etc. The manager wants to know how many items of each type have been donated. You are given a list of donated items where each item is represented by its type. Write a program that reads a list of items and counts the number of items of each type. Constraints * The number of items will not exceed 100. * The types of items can be any string. Input Input is given from Standard Input in the following format: n item_1 item_2 ... item_n where n is the number of donated items, followed by n lines each containing the type of an item. Output For each type of item, print the type followed by the count of that type. The output should be in alphabetical order of the item types. Examples Input 5 book clothes book electronics clothes Output book 2 clothes 2 electronics 1 Input 3 toys clothes clothes Output clothes 2 toys 1","solution":"def count_items(item_list): Counts the number of each item type from the given list of items. Args: item_list (list): List of items donated. Returns: dict: Dictionary with item types as keys and their counts as values. counts = {} for item in item_list: if item in counts: counts[item] += 1 else: counts[item] = 1 sorted_counts = dict(sorted(counts.items())) return sorted_counts if __name__ == \\"__main__\\": import sys input = sys.stdin.read().splitlines() n = int(input[0]) # the number of donated items items = input[1:n+1] # the list of donated items result = count_items(items) for item_type, count in result.items(): print(f\\"{item_type} {count}\\")"},{"question":"Given an integer array `arr` where every element appears exactly twice, except for one element which appears exactly once. Write a function to find and return the element that appears only once. Constraints: - The input array will always have an odd number of elements. - The array will have at least 3 elements and at most 100 elements. - Elements in the array are integers between -1000 and 1000. Input: - An integer array `arr` with `n` elements where `n` is odd. Output: - The integer that appears only once in the array. Example Input [2, 3, 5, 4, 5, 3, 4] Output 2 Explanation: In the given array, all elements except 2 appear twice. Hence, 2 is the element that appears only once.","solution":"def find_single_element(arr): Returns the element that appears exactly once in the array where every other element appears exactly twice. Parameters: arr (list): A list of integers where every element appears twice except for one element which appears once. Returns: int: The element that appears only once. xor_result = 0 for num in arr: xor_result ^= num return xor_result"},{"question":"In a certain video game, gems are collected in an array where each gem has a value. You can collect a contiguous segment of gems in one move, but you want to maximize the sum of values of gems collected in a single move. Given an array of integers representing the values of the gems, create a function `maxGemSum` that takes the array as an argument and returns the maximum sum of a contiguous subarray. For example: ```python maxGemSum([1, -2, 3, 4, -1, 2, 1, -5, 4]) ``` Should return: ```python 9 # because the sum of the subarray [3, 4, -1, 2, 1] is the largest. ``` Your function should efficiently handle arrays with up to 100,000 elements.","solution":"def maxGemSum(nums): Returns the maximum sum of a contiguous subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"The students of the computer science department at a university are practicing competitive programming. One of the common practices is to compare their ranks after every contest. The ranks are simply given as an array of integers where each integer represents a student\'s rank (the lower the better). Given an array of ranks after a contest, the CS department head wants to identify how many students have improved their ranks compared to the previous contest. Assume that the ranks of the students in the previous contest are given in another array of the same length. Write a program to find the number of students who have improved their ranks. A student is considered to have improved if their current rank is less than their previous rank. Input: The first line of input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of students. - The second line contains N space-separated integers, the ranks of students in the previous contest. - The third line contains N space-separated integers, the ranks of students in the current contest. Output: For each test case, print a single line containing the number of students who have improved their ranks. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ Rank ≤ 10000 SAMPLE INPUT 2 5 4 2 5 1 3 3 2 4 1 2 3 7 6 8 6 6 7 SAMPLE OUTPUT 3 2 Explanation: Test Case #1: Student ranks from previous to current: [4->3, 2->2, 5->4, 1->1, 3->2] The students with ranks 4, 5, and 3 have improved their ranks (4->3, 5->4, 3->2). Test Case #2: Student ranks from previous to current: [7->6, 6->6, 8->7] The students with ranks 7 and 8 have improved their ranks (7->6, 8->7).","solution":"def count_improved_students(T, test_cases): Given the number of test cases and their respective test data, returns a list of counts of students who have improved their rank. T: int, number of test cases test_cases: list of tuples, each containing: - an integer N (number of students) - a list of integers (ranks in the previous contest) - a list of integers (ranks in the current contest) Returns: list of ints, the number of improved students for each test case results = [] for i in range(T): N, prev_ranks, curr_ranks = test_cases[i] improved_count = sum(1 for j in range(N) if curr_ranks[j] < prev_ranks[j]) results.append(improved_count) return results"},{"question":"You are given a 2D matrix of dimensions \'n x m\' and a target integer \'k\'. Your task is to find whether the target integer \'k\' exists in the matrix or not. The matrix is sorted in ascending order both row-wise and column-wise. Return True if the target exists, otherwise return False. **Example 1:** Input: matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]] k = 5 Output: True **Example 2:** Input: matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]] k = 20 Output: False **Your Task:** This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `searchMatrix()` that takes a 2D sorted matrix (matrix), the dimensions n (number of rows), m (number of columns), and an integer k (the target) and return True if the target exists in the matrix, otherwise return False. The driver code takes care of the printing. **Expected Time Complexity:** O(n + m) **Expected Auxiliary Space:** O(1) **Constraints:** - 1 ≤ n, m ≤ 300 - -10<sup>9</sup> ≤ k ≤ 10<sup>9</sup> - -10<sup>9</sup> ≤ matrix[i][j] ≤ 10<sup>9</sup>","solution":"def searchMatrix(matrix, n, m, k): Check if the target integer \'k\' exists in the n x m matrix. The matrix is sorted in ascending order both row-wise and column-wise. :param matrix: List[List[int]] -- 2D matrix of integers :param n: int -- number of rows in the matrix :param m: int -- number of columns in the matrix :param k: int -- target integer to search for :return: bool -- True if target exists, otherwise False if not matrix or n == 0 or m == 0: return False row = 0 col = m - 1 while row < n and col >= 0: if matrix[row][col] == k: return True elif matrix[row][col] > k: col -= 1 else: row += 1 return False"},{"question":"Alice is a software developer working on a simulation game that includes a virtual ecosystem of various plant species. Each plant species has certain growth characteristics defined by the amount of water and sunlight they require daily. For simplicity, let’s assume that the ecosystem is a rectangular grid where each cell can contain exactly one plant. The challenge Alice faces is to optimize the arrangement of plant species on the grid such that each plant receives the required conditions to thrive. Each plant species has a growth factor defined as the product of the required water and sunlight. Larger growth factors indicate higher resource needs. Alice needs to arrange plant species on the grid in such a way that: 1. No two neighboring cells (horizontally or vertically) contain plants with growth factors differing by more than a given threshold ( T ). 2. Each plant species must have at least one neighboring cell (horizontally or vertically) occupied by another plant species to simulate a natural ecosystem. Write a program to help Alice determine one such possible arrangement of plant species or determine that it is impossible to meet these conditions. -----Input----- The input consists of a single test case: - The first line contains three integers ( R ) (number of rows), ( C ) (number of columns), and ( T ) (threshold ( 1 leq R, C leq 100; 0 leq T leq 1000 )). - The next ( R ) lines each contain ( C ) integers, representing the growth factors of plants to be placed in the corresponding cells of the grid. -----Output----- If it is possible to arrange the plants in such a way that the constraints are satisfied, display the resulting grid, each row on a new line. If there are multiple possible arrangements, any one of them is acceptable. If it is not possible to meet the conditions, display \\"Impossible\\". -----Examples----- Sample Input 1: 4 4 2 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Sample Output 1: 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Sample Input 2: 3 3 1 9 10 12 11 13 14 13 14 15 Sample Output 2: Impossible","solution":"def arrange_plants(R, C, T, grid): def is_valid_arrangement(grid, R, C, T): for i in range(R): for j in range(C): if i > 0 and abs(grid[i][j] - grid[i - 1][j]) > T: return False if j > 0 and abs(grid[i][j] - grid[i][j - 1]) > T: return False return True if is_valid_arrangement(grid, R, C, T): return grid else: return \\"Impossible\\""},{"question":"You are given an array of integers where every element appears twice except for one. Write a function that finds the element that appears only once. For example: ```python find_single([4, 1, 2, 1, 2]) == 4 ``` Because 4 is the only number that appears exactly once in the array. You can assume that the array is non-empty and contains a valid arrangement according to the above condition.","solution":"def find_single(arr): Returns the element in the array that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"Task You need to implement a function `task_scheduler(tasks, n)` that, given a list of tasks represented by character IDs and a positive cooling interval `n` represented by an integer, returns the minimum number of time units that the CPU will take to finish all the given tasks. # Explanation The CPU needs to finish all tasks, but it can only work on one task per time unit. Also, there needs to be at least `n` time units of cooling interval between two same tasks. If there are idle slots, the CPU will have to wait before executing the next task. # Example ```python task_scheduler([\\"A\\", \\"A\\", \\"A\\", \\"B\\", \\"B\\", \\"B\\"], 2) => 8 task_scheduler([\\"A\\", \\"A\\", \\"A\\", \\"B\\", \\"B\\", \\"B\\"], 0) => 6 task_scheduler([\\"A\\", \\"A\\", \\"A\\", \\"B\\", \\"B\\", \\"B\\", \\"C\\", \\"C\\"], 2) => 8 ``` # Notes 1. All characters in the input tasks list are upper-case English letters. 2. The length of the tasks list is between 1 and 10^4. 3. The cooling interval `n` is between 0 and 100. 4. The order in which tasks appear in the output list is not important. 5. The function should be efficient and able to handle large inputs within a reasonable time frame. 6. If there is a case where the tasks can be completed without any idle time, the function should take that into account. For example, `task_scheduler([\\"A\\", \\"B\\", \\"C\\"], 2)` should return 3 because there are no tasks that require cooling as the tasks are all different. Test your function with different cases to ensure it handles typical and edge cases well.","solution":"from collections import Counter def task_scheduler(tasks, n): Returns the minimum number of time units that the CPU will take to finish all the given tasks, considering the cooling interval n. task_counts = Counter(tasks) max_count = max(task_counts.values()) num_max_tasks = list(task_counts.values()).count(max_count) # Calculate the parts, i.e., (max_count - 1) partitions = max_count - 1 # Calculate the total empty spots in the partitions empty_slots = partitions * (n - (num_max_tasks - 1)) # Count remaining tasks remaining_tasks = len(tasks) - (max_count * num_max_tasks) # Calculate idle times idles = max(0, empty_slots - remaining_tasks) total_time = len(tasks) + idles return total_time"},{"question":"Tom loves collecting books and has recently digitized his collection, creating a database containing information about each book\'s title and its corresponding genres. He wants to organize his collection in a specific way: given a particular genre, Tom wants to create a list of book titles that fall under this genre. However, the problem is, the book titles may belong to multiple genres. Tom needs your help to automate this process. Write a function that will take a list of books along with their genres and a given genre as input and returns a list of book titles that belong to that genre. Your task is to: - Write a function `get_books_by_genre` that takes two arguments: 1. A list of tuples where each tuple contains a string (book title) and a list of strings (genres). 2. A string representing the genre to filter by. - The function should return a list of book titles that belong to the given genre. # Constraints: - There are at most 10^4 books in Tom\'s collection. - Each book has between 1 and 10 genres. - Genres and book titles are case-insensitive and consist of only alphabetic characters. - The input genre to be filtered is guaranteed to be valid and present in the collection. - The titles in the output list should be sorted alphabetically, considering their default case-insensitive sorting. # Example: **Input:** ```python books = [ (\\"The Great Gatsby\\", [\\"Classics\\", \\"Fiction\\"]), (\\"The Catcher in the Rye\\", [\\"Classics\\", \\"Young Adult\\"]), (\\"To Kill a Mockingbird\\", [\\"Classics\\", \\"Fiction\\"]), (\\"1984\\", [\\"Dystopian\\", \\"Science Fiction\\"]), (\\"Harry Potter\\", [\\"Fantasy\\", \\"Young Adult\\"]), ] genre = \\"Classics\\" ``` **Output:** ```python [\\"The Catcher in the Rye\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\"] ``` # Considerations - Pay attention to case-insensitivity in genres and book titles. - Ensure proper sorting of titles in the output. - Handle large datasets efficiently within the provided constraints.","solution":"def get_books_by_genre(books, genre): Given a list of book titles with their genres and a particular genre, return a list of book titles that belong to the specified genre. Args: books (list of tuples): A list where each tuple contains a string (book title) and a list of strings (genres). genre (str): The genre to filter by. Returns: list: A list of book titles belonging to the specified genre, sorted alphabetically. genre = genre.lower() result = [title for title, genres in books if genre in map(str.lower, genres)] return sorted(result, key=str.lower)"},{"question":"You are given an array of integers. Let\'s define the cost of an array as the sum of the absolute differences of all adjacent elements. More formally, if the array is a1, a2, a3, ..., an, the cost of the array is defined as |a1 - a2| + |a2 - a3| + ... + |an-1 - an|. You can perform the following operation on the array any number of times: pick any two indices i and j (1 ≤ i, j ≤ n) and swap the elements ai and aj. Your goal is to find the minimum possible cost of the array after making any number of swaps. Input The first line contains a single integer n (2 ≤ n ≤ 105), the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output Output a single integer, the minimum possible cost of the array. Examples Input 3 6 2 4 Output 4 Explanation Let\'s consider the array [6, 2, 4]. - The initial cost of the array is |6 - 2| + |2 - 4| = 4 + 2 = 6. - By swapping elements to get the array [2, 4, 6], the minimum possible cost is |2 - 4| + |4 - 6| = 2 + 2 = 4. Thus, the minimum possible cost of the array is 4.","solution":"def minimum_cost(arr): Returns the minimum possible cost of the array after making any number of swaps. The cost is defined as the sum of the absolute differences of all adjacent elements. arr.sort() min_cost = 0 for i in range(1, len(arr)): min_cost += abs(arr[i] - arr[i - 1]) return min_cost"},{"question":"A travel agency is offering a special tour package that includes visits to several cities. The agency has hired you to help them plan the itineraries. Each city is represented as a node in a graph, and the roads between the cities are the edges. Each road has a travel cost associated with it. Your task is to determine the minimum cost required to travel from a starting city to a destination city. It is guaranteed that each pair of cities will have a path between them. Input The first line contains two integers n and m (1 ≤ n, m ≤ 5000), representing the number of cities and the number of roads. The second line contains two integers s and t (1 ≤ s, t ≤ n), representing the starting city and the destination city. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), where u and v are the two endpoints of the road and w is the travel cost between the cities u and v. Output Print a single integer, the minimum travel cost from city s to city t. Examples Input 5 6 1 5 1 2 2 1 3 5 2 3 1 2 4 2 3 4 3 4 5 1 Output 5 Input 3 3 1 3 1 2 4 2 3 3 1 3 10 Output 7 Note In the first example, the cheapest path from city 1 to city 5 can be through cities 1-2-4-5, with a total cost of 2+2+1=5. In the second example, the cheapest path from city 1 to city 3 can be through cities 1-2-3, with a total cost of 4+3=7.","solution":"import heapq def minimum_travel_cost(n, m, s, t, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances[t] def travel_agency_min_cost(n, m, s, t, roads): return minimum_travel_cost(n, m, s, t, roads)"},{"question":"Raphael loves painting walls. He has a rectangular wall divided into a grid of square cells, each cell being 1x1. Some cells are already painted with beautiful colors, while others are blank. Raphael has limited paint, only enough to paint the minimum number of cells necessary so that all the painted cells form a contiguous block, connected horizontally or vertically. Your task is to help Raphael figure out the minimum number of additional cells he needs to paint to achieve the goal. Input: The input begins with a single integer t, the number of test cases. For each test case: The first line contains two integers n and m, representing the dimensions of the grid (n rows and m columns). The second line contains a single integer k, the number of originally painted cells. The following k lines each contain two integers, x and y, denoting the row and column of each painted cell (1-based index). Output: For each test case, print the minimum number of additional cells Raphael has to color to form a contiguous block. Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n, m ≤ 1000 - 0 ≤ k ≤ n*m (If k=0, the output for that test case should be 0) - 1 ≤ x ≤ n - 1 ≤ y ≤ m SAMPLE INPUT: 2 5 5 3 1 1 3 4 4 2 4 4 0 SAMPLE OUTPUT: 2 0 Explanation: In the first test case, one way to connect all painted cells is by painting the cells (3,3) and (3,2), making the area contiguous: (1,1) (1,2) (1,3) (1,4) (1,5) (2,1) (2,2) (2,3) (2,4) (2,5) (3,1) (3,2) (3,3) (3,4) (3,5) (4,1) (4,2) (4,3) (4,4) (4,5) (5,1) (5,2) (5,3) (5,4) (5,5) In the second test case, no additional cells need to be colored since there are no initially painted cells.","solution":"def min_paint_to_connect(t, test_cases): from collections import deque results = [] for case in test_cases: n, m, k, painted_cells = case if k == 0: results.append(0) continue grid = [[0] * m for _ in range(n)] for x, y in painted_cells: grid[x-1][y-1] = 1 def bfs(start): visited = set() queue = deque([start]) visited.add(start) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny)) return visited visited_set = set() fragments = [] for x, y in painted_cells: if (x-1, y-1) not in visited_set: new_fragment = bfs((x-1, y-1)) fragments.append(new_fragment) visited_set.update(new_fragment) total_need = len(fragments) - 1 results.append(total_need) return results"},{"question":"In a certain city, a new road system is being designed to connect some important landmarks. The city planners have come up with a list of possible roads, each with a certain time to build. Due to limited budget, not all roads can be built, and the planners must select a subset of these roads in such a way that all landmarks are connected and the total build time is minimized. You are tasked with writing a program to help the city planners determine the minimum time required to build the road system that connects all landmarks. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of landmarks and the number of possible roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 10^6) — representing a road between landmarks u and v with build time w. Output Output a single integer — the minimum total build time to connect all landmarks. If it\'s not possible to connect all the landmarks, print -1. Examples Input 4 5 1 2 5 1 3 10 2 3 6 2 4 2 3 4 3 Output 10 Input 3 2 1 2 4 2 3 3 Output 7 Input 3 1 1 2 5 Output -1 Note In the first example, the minimum build time road system can be achieved by selecting roads between landmarks: (1,2), (2,4), and (3,4) with total build time 5 + 2 + 3 = 10. In the second example, by selecting roads (1,2) and (2,3), all landmarks are connected with total build time 4 + 3 = 7. In the third example, it\'s not possible to connect all landmarks because there\'s only one road available.","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size def find(self, x): if self.root[x] != x: self.root[x] = self.find(self.root[x]) return self.root[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.root[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.root[rootX] = rootY else: self.root[rootY] = rootX self.rank[rootX] += 1 def minimum_build_time(n, m, roads): uf = UnionFind(n + 1) # +1 because landmarks are 1-indexed edges = sorted(roads, key=lambda x: x[2]) mst_cost = 0 edges_in_mst = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_cost += w edges_in_mst += 1 if edges_in_mst == n - 1: return mst_cost return -1 if edges_in_mst < n - 1 else mst_cost"},{"question":"A group of ninjas is training in a dojo, practicing their stealth jumps. The dojo can be visualized as a 1-dimensional grid with n distinct positions, numbered from 1 to n. Each ninja starts at a specified position on the grid, and they can only jump to another position based on their energy level. The energy level of a ninja determines how far they can jump, where a jump consists of moving from the current position to any other position within the distance of their energy level. You are tasked with determining if it\'s possible to gather all ninjas at the same position using their jumps. Ninjas can make multiple jumps until they either meet at a common position or it\'s determined that meeting is impossible. -----Input----- The first line of input contains an integer number n (1 le n le 10^{5}), which is the number of distinct positions in the dojo. The second line contains an integer k (1 le k le 10^5), which is the number of ninjas training in the dojo. The next k lines each contains two integers p_i and e_i (1 le p_i le n, 1 le e_i le 10^9), where p_i denotes the initial position of the i^{th} ninja and e_i denotes their energy level. -----Output----- Print \\"YES\\" if it is possible to gather all ninjas at the same position. Otherwise, print \\"NO\\". -----Examples----- Input 5 3 1 2 4 1 5 3 Output YES Input 7 3 1 2 4 2 6 1 Output NO -----Explanation----- In the first example, all ninjas can gather at position 3: - Ninja at position 1 can jump to position 3 (2 units of energy). - Ninja at position 4 can jump to position 3 (1 unit of energy). - Ninja at position 5 can jump to position 3 (2 units of energy). In the second example, it is not possible for all ninjas to gather at a common position with the given energy levels.","solution":"def can_gather_all_ninjas(n, k, ninjas): for target in range(1, n + 1): possible = True for (p, e) in ninjas: if abs(target - p) > e: possible = False break if possible: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers. Reorder the list such that all the even numbers appear before the odd numbers. The relative order of the even and odd numbers should not change. Input The first line contains an integer (n), the number of integers in the list, where ( 1 leq n leq 100 ). The second line contains the (n) integers, each an integer between (-1000) and (1000). Output Output the reordered list on a single line such that all even numbers come before the odd numbers, maintaining their original relative order. Examples Input 6 1 2 3 4 5 6 Output 2 4 6 1 3 5 Input 5 4 -2 7 3 8 Output 4 -2 8 7 3","solution":"def reorder_even_before_odd(arr): Reorder a list of integers such that all the even numbers appear before the odd numbers. The relative order of the even and odd numbers should not change. evens = [num for num in arr if num % 2 == 0] odds = [num for num in arr if num % 2 != 0] return evens + odds"},{"question":"A new innovative company called ByteLand Technologies has created a smart messaging system for communication between its employees. The system works with a set of servers, each assigned to an employee. Messages need to be sent between employees through these servers. Each server has a unique load capacity that indicates the maximum number of messages it can handle at any one time. The communication protocol works as follows: - Any employee can initiate a message and send it to another employee. - Any server that handles a message will immediately route it to its destination server. - If a server exceeds its load capacity, it cannot handle any more messages until some are completed. Furthermore, the system has a unique feature where some messages have priorities. Higher priority messages must be delivered first, relying on the load capacities of the servers. If multiple messages have the same priority, they can be processed in any order. Your task is to design a function that calculates the minimum time required to deliver all messages given the initial load conditions of each server and message priorities. Input - The first line contains an integer n — the number of servers. - The second line contains n space-separated integers where the i-th integer ai represents the load capacity of the i-th server. - The third line contains an integer m — the number of messages. - The next m lines each contain three space-separated integers x, y, and p, representing a message from server x to server y with priority p. To get full points for the first group of tests, it is sufficient to solve the problem with 1 ≤ n, m ≤ 100. To get full points for the second group of tests, it is sufficient to solve the problem with 1 ≤ n, m ≤ 1000. To get full points for the third group of tests, it is sufficient to solve the problem with 1 ≤ n, m ≤ 10000. Output - Print a single integer — the minimum time required to deliver all messages based on the priorities and server capacities. Examples Input 3 2 2 2 4 1 2 1 2 3 1 1 3 2 2 1 1 Output 4 Input 5 1 2 1 1 1 5 1 2 3 1 3 2 2 5 1 3 4 1 4 5 1 Output 5 Note In the first sample, we have 3 servers with 2 load capacities each and 4 messages to deliver. Processing the messages with the highest priorities first will allow us to utilize the server capacities efficiently, resulting in a minimum total time of 4 units. In the second sample, the priority 3 message from server 1 to server 2 must be processed first, followed by other messages respecting their priorities and the load capacities of the servers, leading to a total minimum time of 5 units.","solution":"def compute_minimum_delivery_time(n, capacities, m, messages): from heapq import heappop, heappush from collections import defaultdict, deque # Priority Queue to process messages by priority priority_queue = [] # Add all messages to the priority queue with negative priority for sorting (max heap behaviour) for x, y, p in messages: heappush(priority_queue, (-p, x-1, y-1)) # Initialize server loads and time tracker server_loads = [0] * n time_elapsed = 0 # Process messages based on priority while priority_queue: p, x, y = heappop(priority_queue) # If server x has not exceeded its capacity if server_loads[x] < capacities[x]: # Process the message server_loads[x] += 1 # If server y has not exceeded its capacity if server_loads[y] < capacities[y]: server_loads[y] += 1 # Tick the clock time_elapsed += 1 # Remove the load as message is processed server_loads[x] -= 1 server_loads[y] -= 1 else: # Delay handling if exceeded heappush(priority_queue, (p-1, x, y)) else: # Delay handling if exceeded heappush(priority_queue, (p-1, x, y)) # Serve servers in round-robin fashion since same priority messages could be processed in any order server_loads = [max(0, load - 1) for load in server_loads] return time_elapsed"},{"question":"Given an array of unique integers and an integer, find the minimum size of a contiguous subarray of which the sum is greater than or equal to the given integer. If there is no such subarray, return 0. Input - The first line contains two integers `n` and `S`, where `n` is the size of the array and `S` is the target sum (1 ≤ n ≤ 100,000, 1 ≤ S ≤ 10^9). - The second line contains `n` unique integers representing the array (1 ≤ array[i] ≤ 1,000). Output - Output a single integer representing the size of the smallest contiguous subarray of which the sum is greater than or equal to `S`. If no such subarray exists, output `0`. # Example Input 1 ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Output 1 ``` 2 ``` Explanation: The subarray [7, 8] has a sum of 15, which is greater than or equal to the target sum. Input 2 ``` 5 11 1 2 3 4 5 ``` Output 2 ``` 3 ``` Explanation: The subarray [3, 4, 5] has a sum of 12, which is greater than or equal to the target sum. Input 3 ``` 5 20 1 2 3 4 5 ``` Output 3 ``` 0 ``` Explanation: There is no subarray with a sum greater than or equal to 20.","solution":"def min_subarray_length(n, S, array): Finds the minimum size of a contiguous subarray with a sum greater than or equal to S. Parameters: n (int): The size of the array. S (int): The target sum. array (list of int): List of unique integers. Returns: int: Size of the smallest subarray with sum >= S, or 0 if no such subarray exists. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += array[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= array[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Palindrome Substrings problem Given a string S consisting of lowercase English letters, your task is to calculate the number of palindromic substrings in S. A substring is defined as a contiguous sequence of characters within a string. A palindromic substring is one which reads the same forwards and backwards. Input format S Constraint * 1 ≤ |S| ≤ 10^6 * S consists only of lowercase English letters (\'a\' to \'z\'). Output format Print a single integer which is the number of palindromic substrings in S. Input example 1 aab Output example 1 4 Input example 2 aaa Output example 2 6 Explanation For the first example, the palindromic substrings are \\"a\\", \\"a\\", \\"aa\\", and \\"b\\". Hence the count is 4. For the second example, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". Hence the count is 6.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the input string s. n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for center in range(n): expand_around_center(center, center) # odd-length palindromes expand_around_center(center, center + 1) # even-length palindromes return count"},{"question":"A company organizes virtual meetings using a conferencing platform. Each meeting has a start time and an end time, and the platform can host multiple meetings simultaneously. However, to improve user experience, the company wants to minimize the number of simultaneous meetings during any given time. Given a list of meetings with their start and end times, determine the minimum number of conference rooms required to accommodate all the meetings without any overlap. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of meetings. The next n lines each contain two integers s_i and e_i (1 leq s_i < e_i leq 10^9) — the start and end times of the i-th meeting. -----Output----- Print one integer — the minimum number of conference rooms required. -----Examples----- Input 3 1 5 2 6 8 9 Output 2 Input 4 4 5 2 3 5 6 1 4 Output 2 -----Note----- In the first example, two meetings overlap from time 2 to time 5, requiring a minimum of two conference rooms. In the second example, there is a need for two conference rooms due to the overlap in the meetings: - One room can be used for meetings [2, 3] and [5, 6] - Another room for meetings [1, 4] and [4, 5]","solution":"def min_conference_rooms(meetings): Returns the minimum number of conference rooms required to accommodate all meetings without any overlap. :param meetings: List of tuples representing start and end times of meetings. :type meetings: list of (int, int) :return: Minimum number of conference rooms required :rtype: int if not meetings: return 0 start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer = end_pointer = 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms # Sample usage: # meetings = [(1, 5), (2, 6), (8, 9)] # print(min_conference_rooms(meetings)) # Output: 2"},{"question":"Our planet is in danger due to ever-increasing pollution levels. As part of a global initiative, a team of scientists developed a pollution monitoring device that sends data to a central server every second. The device measures the pollution level in parts per million (PPM). Due to limited bandwidth, the central server only stores the highest pollution level recorded in every k-second interval. Your task is to write a program that processes the pollution data and outputs the stored values for the central server. Given an array of integers representing the pollution levels recorded each second and an integer k, output an array of integers where each element is the highest pollution level recorded in its respective k-second interval. If there are fewer than k values in the final interval, it should still output the highest value among them. Input The input contains two lines: - The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n), where n is the total number of pollution level measurements and k is the length of the time interval. - The second line contains n space-separated integers representing the pollution levels in PPM for each second. Output Output a single line containing n/k or ⌈n/k⌉ space-separated integers, where each integer is the maximum pollution level recorded in its respective k-second interval. Examples Input 8 3 3 1 4 1 5 9 2 6 Output 4 9 6 Input 5 2 1 2 3 4 5 Output 2 4 5","solution":"def highest_pollution_levels(n, k, pollution_levels): Returns a list of maximum pollution levels recorded in each k-second interval. Parameters: n (int): Total number of pollution level measurements. k (int): Length of the time interval in seconds. pollution_levels (list of ints): Pollution levels recorded each second. Returns: list of ints: Maximum pollution levels in each k-second interval. result = [] for i in range(0, n, k): interval = pollution_levels[i:i + k] result.append(max(interval)) return result # Example usage: # n, k = 8, 3 # pollution_levels = [3, 1, 4, 1, 5, 9, 2, 6] # print(highest_pollution_levels(n, k, pollution_levels)) # Output: [4, 9, 6]"},{"question":"The forest rangers have been tasked with constructing a safe path through a dense forest grid. Each cell in the grid either contains a tree, represented by `0`, or is clear ground, represented by `1`. Rangers can only walk on clear ground cells and can move one step in any of the four cardinal directions (up, down, left, right). Write a function to determine if it is possible to construct a path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) of the grid. The grid is guaranteed to be square with a dimension of `n x n`. Your task is to implement a function that returns `True` if such a path exists, and `False` otherwise. -----Function Signature----- ```python def is_path_possible(grid: List[List[int]]) -> bool: ``` -----Constraints----- - 2 ≦ n ≦ 50 - grid[i][j] is either 0 or 1 -----Input----- - grid: A list of lists representing the grid -----Output----- - Return `True` if there is a path from the top-left to the bottom-right, otherwise return `False`. -----Examples----- Input: [[1, 0, 1], [1, 1, 0], [0, 1, 1]] Output: True Input: [[1, 1, 0], [0, 0, 1], [1, 1, 1]] Output: False In the first example, the path is (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). In the second example, there is no path that can take the rangers from (0,0) to (2,2).","solution":"from typing import List def is_path_possible(grid: List[List[int]]) -> bool: if grid[0][0] == 0 or grid[-1][-1] == 0: return False n = len(grid) visited = [[False for _ in range(n)] for _ in range(n)] def dfs(x, y): if x == n - 1 and y == n - 1: return True directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 1: if dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"Problem Statement: A wildlife photographer is trying to photograph all unique species of birds in the dense forest of BirdLand. The forest is represented as a grid of `m x n` cells, where each cell can either contain a bird (represented by a unique positive integer ID), be empty (represented by 0), or contain an obstacle (represented by -1) that blocks access to that cell. The photographer starts from the top-left corner of the grid (cell (0, 0)) and can move to an adjacent cell (either up, down, left, or right) unless blocked by an obstacle or outside the grid boundaries. The objective is to find the maximum number of unique bird species the photographer can capture by traversing from the starting position. The photographer carries only one camera and can only capture an image of a unique bird species once. Write a function `max_unique_birds` that takes the dimensions of the grid `m` and `n`, and the grid itself as input and returns the maximum number of unique bird species that can be photographed. # Input: - An integer `m` denoting the number of rows in the grid. - An integer `n` denoting the number of columns in the grid. - A 2D list of integers where each element represents the ID of the bird in that cell, 0 for empty cell, or -1 for an obstacle. # Output: - An integer representing the maximum number of unique bird species the photographer can capture. # Constraints: - 1 ≤ m, n ≤ 100 - Each bird ID is a positive integer unique to its species. - Bird IDs, except for obstacles and empty cells, will lie between 1 and 10^6. # Example: Input: ``` m = 4 n = 4 grid = [ [1, 0, 2, 1], [0, -1, 0, 0], [3, 0, 0, 4], [-1, 0, 1, 0] ] ``` Output: ``` 4 ``` Explanation: The maximum path that captures the most unique birds is (0,0) -> (0,1) -> (0,2) -> (2,1) -> (2,0), where the captured birds are 1, 0, 2, and 3 (unique). An obstacle at (1, 1) blocks further movement.","solution":"def max_unique_birds(m, n, grid): def dfs(x, y, visited, unique_birds): if x < 0 or x >= m or y < 0 or y >= n or (x, y) in visited or grid[x][y] == -1: return len(unique_birds) if grid[x][y] > 0: unique_birds.add(grid[x][y]) visited.add((x, y)) max_birds = len(unique_birds) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy max_birds = max(max_birds, dfs(nx, ny, set(visited), set(unique_birds))) return max_birds return dfs(0, 0, set(), set())"},{"question":"A popular park has a circular running track with 12 equally spaced-out checkpoints numbered from 0 to 11. Runners can choose any checkpoint as their starting point and decide on a direction to run, either clockwise or counter-clockwise. A runner can never change direction once they start running in either direction. You are required to write a program that determines the shortest path between two checkpoints. If there are two paths of equal distance, the program should prefer the clockwise direction. Input The first line contains the number of datasets t (t ≤ 15). Each of the following t lines consists of two integers, a and b, representing the starting checkpoint and the target checkpoint, respectively (0 ≤ a, b ≤ 11). Output For each dataset, output the list of checkpoints (including the start and end checkpoints) that constitute the shortest path from the starting to the target checkpoint, following the constraint of preferring clockwise direction in case of a tie in distance. Example Input 3 3 7 6 2 8 8 Output 3 4 5 6 7 6 5 4 3 2 8","solution":"def shortest_path(t, datasets): Determines the shortest path on a circular running track. If distances are equal, prefers the clockwise direction. Args: t (int): Number of datasets. datasets (list of tuples): Each tuple contains two integers, a and b. Returns: list: List of strings, each string representing the path of checkpoints. results = [] for a, b in datasets: if a == b: results.append(str(a)) continue clockwise = [] counter_clockwise = [] i = a while i != b: clockwise.append(i) i = (i + 1) % 12 clockwise.append(b) i = a while i != b: counter_clockwise.append(i) i = (i - 1) % 12 if i != 0 else 11 counter_clockwise.append(b) if len(clockwise) <= len(counter_clockwise): results.append(\' \'.join(map(str, clockwise))) else: results.append(\' \'.join(map(str, counter_clockwise))) return results"},{"question":"Create a function that accepts a string consisting of lowercase letters and spaces, and returns a new string where each word in the input string is reversed, but the words are still in their original order. # Function Signature ```python def reverse_words(s: str) -> str: pass ``` # Input - A string `s` (1 <= len(s) <= 10^4) containing lowercase letters and spaces. - The string `s` will not contain leading, trailing, or multiple spaces. # Output - A new string where each word is reversed, but the word order remains the same. # Example ```python reverse_words(\\"hello world\\") ``` Expected Output: ``` \\"olleh dlrow\\" ``` ```python reverse_words(\\"coding is fun\\") ``` Expected Output: ``` \\"gnidoc si nuf\\" ```","solution":"def reverse_words(s: str) -> str: Returns a new string where each word in the input string is reversed, but the words are still in their original order. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Sherlock Holmes is investigating a series of crimes in the city and needs your help to analyze some data. You are given a string S consisting of only lowercase English letters. Your task is to answer Q queries about the string. Each query gives you two integers L and R and you need to determine if the frequency of each letter in the substring S[L:R] (both inclusive) is either 0 or an even number. For example, if S = \\"abbac\\", the substring from position 2 to 4 is \\"bba\\" and the frequencies of \'a\', \'b\', and \'c\' are [1, 2, 0], so the answer is \\"NO\\" since the frequency of \'a\' is not an even number. ------ Input ------ The first line of the input contains a single integer N denoting the length of the string S. The second line contains the string S. The third line contains a single integer Q. Q lines follow. Each of these lines contains two space-separated integers L and R describing a query. ------ Output ------ For each query, print \\"YES\\" if the frequency of each letter in the substring S[L:R] is either 0 or an even number, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} 1 ≤ L ≤ R ≤ N S consists of lowercase English letters \'a\' to \'z\' only. ------ Sample Input 1 ------ 5 ababa 3 1 2 1 5 2 4 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ For the first query, the substring \\"ab\\" has frequencies [1, 1], which are not even, so the answer is \\"NO\\". For the second query, the substring \\"ababa\\" has frequencies [3, 2], and since 3 is not even, the answer is \\"NO\\". For the third query, the substring \\"bab\\" has frequencies [1, 2], which are not even, so the answer is \\"NO\\".","solution":"def analyze_frequencies(N, S, Q, queries): # Create a prefix frequency array for counts of each character prefix_freq = [[0]*26 for _ in range(N+1)] for i in range(1, N+1): prefix_freq[i] = prefix_freq[i-1][:] pos = ord(S[i-1]) - ord(\'a\') prefix_freq[i][pos] += 1 results = [] for L, R in queries: freq = [prefix_freq[R][i] - prefix_freq[L-1][i] for i in range(26)] result = \\"YES\\" for f in freq: if f % 2 != 0: result = \\"NO\\" break results.append(result) return results"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to return the indices of the two numbers such that they add up to the `target`. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. **Input:** - The first line contains an integer n (2 ≤ n ≤ 1000), the size of the array. - The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) which represent the elements of the array. - The third line contains an integer target (−10^9 ≤ target ≤ 10^9), which is the target sum. **Output:** - Output the indices of the two numbers such that they add up to target in the form of a tuple (index1, index2). Indexing starts from 0, and the indices should be in ascending order. **Example:** Input: 5 2 7 11 15 -2 9 Output: (0, 1) Input: 4 3 2 4 6 6 Output: (1, 2) Input: 3 3 3 6 6 Output: (0, 1) Note: - The solution should have time complexity better than O(n^2). - You may assume that each input would have exactly one solution.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return (num_dict[complement], i) num_dict[num] = i"},{"question":"You are given a list of positive integers where each integer represents the height of a plant. Every day, each plant with a height greater than zero decreases in height by 1 unit. Your task is to determine the number of days it will take for all plants to reach zero height. Write a function `days_to_zero` that receives an array of integers and returns the number of days required for all plants to become zero. For example, if a plant\'s height is initially 4, it will take 4 days for that plant to reach zero. # Input - An array of integers `plants` where `1 ≤ len(plants) ≤ 10^5` and `1 ≤ plants[i] ≤ 10^9` representing the heights of the plants. # Output - An integer representing the number of days required for all plants to become zero. # Example ```python days_to_zero([4, 3, 2, 1]) => 4 days_to_zero([1, 1, 1, 1]) => 1 days_to_zero([10, 8, 6, 4, 2]) => 10 ``` # Note - In the first example, it will take 4 days for the tallest plant to reach zero. - In the second example, all plants reach zero after 1 day. - In the third example, the tallest plant takes 10 days to reach zero. Ensure that your solution is optimized for large inputs and consider edge cases where all plants might have the same height.","solution":"def days_to_zero(plants): Returns the number of days required for all plants to become zero in height. Parameters: plants (list of int): The heights of the plants. Returns: int: The number of days for all plants to become zero. if not plants: return 0 # The number of days required will be equal to the height of the tallest plant return max(plants)"},{"question":"Monica is organizing a charitable event and wants to arrange tables in a large hall. The hall is rectangular and can be divided into smaller rectangular regions, each containing a table. Each table occupies a rectangular space of `w` by `h` meters. Monica wants to ensure that the hall is filled with tables with no gaps left and no table overlapping. Given the dimensions of the hall `W` by `H` meters and the dimensions of a single table `w` by `h` meters, your task is to determine if it is possible to fill the hall completely with tables. If it\'s possible, you should output the exact number of tables that will fit in the hall. Otherwise, output -1. # Constraints - `1 ≤ W, H, w, h ≤ 100` # Input The input consists of one line in the following format: ``` W H w h ``` The input consists of four integers: - `W` is the width of the hall in meters. - `H` is the height of the hall in meters. - `w` is the width of a table in meters. - `h` is the height of a table in meters. # Output If it is possible to fill the hall completely with tables, output the total number of tables that can fit in the hall. Otherwise, output -1. # Examples Example 1 Input: ``` 10 10 2 5 ``` Output: ``` 10 ``` Explanation: The hall can be divided into 2 rows and 5 columns or 5 rows and 2 columns of tables, making a total of 10 tables. Example 2 Input: ``` 8 6 3 2 ``` Output: ``` 8 ``` Explanation: The hall can be divided into 4 rows and 2 columns of tables, making a total of 8 tables. Example 3 Input: ``` 8 6 5 3 ``` Output: ``` -1 ``` Explanation: It\'s not possible to fill the hall completely with tables of these dimensions, as it leaves gaps. Example 4 Input: ``` 15 15 5 5 ``` Output: ``` 9 ``` Explanation: The hall can be divided into 3 rows and 3 columns of tables, making a total of 9 tables.","solution":"def can_fill_hall(W, H, w, h): Determines if the hall of dimensions W by H can be completely filled with tables of dimensions w by h. Returns the number of tables that fit if possible, otherwise returns -1. if (W % w == 0 and H % h == 0): return (W // w) * (H // h) elif (W % h == 0 and H % w == 0): return (W // h) * (H // w) else: return -1"},{"question":"Aly is an enthusiastic programmer who loves solving algorithms-based puzzles. Recently, he came across a number puzzle related to prime numbers. The puzzle is as follows: Given an integer N, determine if N can be expressed as the sum of two prime numbers (not necessarily distinct) or not. In case there are multiple pairs of prime numbers that sum to N, it\'s enough to find just one pair. Your task is to help Aly by writing a program that solves this puzzle efficiently. -----Input----- The first line of input contains the integer T, indicating the number of test cases. Each of the following T lines contains a single integer N. -----Output----- For each test case, output a single line containing \\"YES\\" if N can be expressed as the sum of two prime numbers, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 106 -----Example----- Input: 3 4 5 8 Output: YES YES YES -----Explanation----- Example case 1. The number 4 can be expressed as the sum of two prime numbers (2 + 2). Example case 2. The number 5 can be expressed as the sum of two prime numbers (2 + 3). Example case 3. The number 8 can be expressed as the sum of two prime numbers (3 + 5). Note: The problem does not require listing all possible pairs, thus a solution confirming just one valid pair is sufficient.","solution":"def sieve_of_eratosthenes(limit): Generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(limit ** 0.5) + 1): if is_prime[start]: for multiple in range(start * start, limit + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def can_be_expressed_as_sum_of_primes(n, primes, primes_set): Determines if a number can be expressed as the sum of two prime numbers. for prime in primes: if prime > n: break if (n - prime) in primes_set: return True return False def solve_prime_sum_problem(T, cases): Solves the problem for T test cases and returns a list with \\"YES\\" or \\"NO\\" for each case. max_n = max(cases) primes = sieve_of_eratosthenes(max_n) primes_set = set(primes) results = [] for n in cases: if can_be_expressed_as_sum_of_primes(n, primes, primes_set): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage for testing: T = 3 cases = [4, 5, 8] print(solve_prime_sum_problem(T, cases))"},{"question":"In a small town, the post office receives a bulk of packages every day, and they need to ensure that the packages are delivered in the correct sequence based on the urgency and order. Each package has a unique ID and a priority level. All packages with a higher priority should be delivered first. If there are multiple packages with the same priority, they should be delivered based on their timestamp of arrival, with earlier timestamps taking precedence. You are required to implement the sorting mechanism for the packages. -----Input----- The first line of input contains a single integer N (1 leq N leq 100000), which is the number of packages. Each of the next N lines contains two integers p_i and t_i (1 leq p_i leq 100, 1 leq t_i leq 10^9), where p_i is the priority and t_i is the timestamp of the i^textrm{th} package. -----Output----- Print the package IDs in the order they should be delivered. Each ID should be on a new line, preserving their sequence of delivery based on priority and timestamp rules. -----Examples----- Sample Input 1: 5 2 100 1 200 2 150 3 50 1 300 Sample Output 1: 4 1 3 2 5 Sample Input 2: 3 5 100 3 200 5 50 Sample Output 2: 3 1 2","solution":"def sort_packages(packages): Sorts the packages based on the priority and timestamp. :param packages: List of tuples with (priority, timestamp, index) :return: List of indices of packages in the order they should be delivered # Sort the packages based on (-priority, timestamp) sorted_packages = sorted(packages, key=lambda x: (-x[0], x[1])) # Extract and return indices of the sorted packages return [package[2] for package in sorted_packages]"},{"question":"Sam is learning about different data structures and how to manipulate them. He recently came across the concept of Fenwick Trees (Binary Indexed Trees) and Segment Trees, which can be used to efficiently answer range queries and update values in arrays. Sam wants to apply this knowledge to a problem but needs your help to implement it. The problem is to find the product of elements in a given range and update an element in the array. Write a function to perform the following operations: 1. Update the value at a given index in the array. 2. Calculate the product of elements in a given range. The function has to handle multiple queries of both types. Input Format: - The first line contains an integer n, the number of elements in the initial array. - The second line contains n space-separated integers, the initial values of the array. - The third line contains an integer q, the number of queries. - The next q lines each contain a query in one of the following two formats: - \\"1 x y\\" to update the element at index x (0-based) to value y. - \\"2 l r\\" to find the product of elements in the range [l, r] (both inclusive). Output Format: For each query of type \\"2 l r\\", output a single integer, the product of elements in the specified range, on a new line. Constraints: 1 ≤ n ≤ 100000 1 ≤ q ≤ 100000 1 ≤ initial values, update values ≤ 1000 0 ≤ x < n 0 ≤ l ≤ r < n SAMPLE INPUT 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 SAMPLE OUTPUT 24 80 Note: The product of elements can be very large, so you may need to return the result modulo some large prime number (e.g., 1,000,000,007) to avoid overflow.","solution":"MOD = 1000000007 def update_fenwick_tree(fenwick_tree, index, value, mod): while index < len(fenwick_tree): fenwick_tree[index] = (fenwick_tree[index] * value) % mod index += index & -index def query_fenwick_tree(fenwick_tree, index, mod): result = 1 while index > 0: result = (result * fenwick_tree[index]) % mod index -= index & -index return result def range_product(fenwick_tree, left, right, mod): if left == 0: return query_fenwick_tree(fenwick_tree, right + 1, mod) return (query_fenwick_tree(fenwick_tree, right + 1, mod) * pow(query_fenwick_tree(fenwick_tree, left, mod), mod - 2, mod)) % mod def process_queries(n, values, queries): mod = MOD fenwick_tree = [1] * (n + 1) # Fenwick Tree for range product queries in 1-based indexing # Initialize Fenwick Tree with initial values for i in range(n): update_fenwick_tree(fenwick_tree, i + 1, values[i], mod) results = [] for query in queries: query_type = query[0] if query_type == 1: index, new_value = query[1], query[2] current_value = values[index] # Update Fenwick Tree values[index] = new_value update_fenwick_tree(fenwick_tree, index + 1, pow(current_value, mod-2, mod) * new_value % mod, mod) elif query_type == 2: left, right = query[1], query[2] results.append(range_product(fenwick_tree, left, right, mod)) return results"},{"question":"You are given the task of building a movie recommendation system. The system should suggest movies based on the similarity of movie genres and user ratings. Each user rates movies on a scale of 1 to 5. Your goal is to recommend a movie to a user that they have not rated yet, by analyzing other users\' ratings and the genres of the movies they have rated. The recommendation should consider the highest average rating from similar users who have rated the same genres. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of movies in the database. The next n lines each contain a movie ID, genre, and a list of user ratings separated by spaces. Each movie ID is unique and consists of a sequence of characters. Each genre is a single word. User ratings are represented by pairs of user ID and rating, separated by a colon. When a user has not rated a movie, their rating is not present for that movie. The next line contains a target user ID for whom you need to provide a recommendation. Output Print the movie ID of the recommended movie for the target user. If there are multiple movies with the highest average rating, print any one of them. If no recommendations are possible, output \\"No recommendation.\\" Example Input 5 M1 Action U1:5 U2:3 U3:4 M2 Comedy U1:4 U3:3 M3 Action U2:4 M4 Drama U1:5 U3:2 M5 Comedy U1:3 U2:4 U3 Output M1 Explanation User U3 has rated movies M1, M2, and M4. The system should recommend M1 as it has the highest average rating among the Action genre movies rated by similar users (U1 and U2) that U3 hasn\'t rated yet. Movie M3, which is also of Action genre, has a lower average rating compared to M1. Therefore, M1 is the recommended movie.","solution":"def recommend_movie(n, movie_data, target_user): from collections import defaultdict # Parse movies and user ratings movies = {} user_ratings = defaultdict(dict) genre_movies = defaultdict(list) for data in movie_data: parts = data.split() movie_id, genre = parts[0], parts[1] ratings = parts[2:] if len(parts) > 2 else [] movies[movie_id] = { \'genre\': genre, \'ratings\': {} } for rating in ratings: user_id, score = rating.split(\':\') score = int(score) movies[movie_id][\'ratings\'][user_id] = score user_ratings[user_id][movie_id] = score genre_movies[genre].append(movie_id) # Find the genres rated by the target user user_genres = defaultdict(list) for movie_id in user_ratings[target_user]: genre = movies[movie_id][\'genre\'] user_genres[genre].append(movie_id) # Find all movies in those genres not already rated by the target user candidate_movies = set() for genre in user_genres: for movie_id in genre_movies[genre]: if movie_id not in user_ratings[target_user]: candidate_movies.add(movie_id) if not candidate_movies: return \\"No recommendation\\" # Calculate average ratings of candidate movies def average_rating(movie_id): ratings = movies[movie_id][\'ratings\'].values() return sum(ratings) / len(ratings) if ratings else 0 best_movie = max(candidate_movies, key=average_rating) return best_movie # Example usage n = 5 movie_data = [ \\"M1 Action U1:5 U2:3 U3:4\\", \\"M2 Comedy U1:4 U3:3\\", \\"M3 Action U2:4\\", \\"M4 Drama U1:5 U3:2\\", \\"M5 Comedy U1:3 U2:4\\" ] target_user = \\"U3\\" print(recommend_movie(n, movie_data, target_user)) # Should output M3"},{"question":"Euclidia is a city planner in charge of optimizing public transportation routes. The city is represented as a grid of size n x n, where each cell can either be passable or impassable. The goal is to determine the shortest path for a bus starting at the top-left corner (0, 0) to reach the bottom-right corner (n-1, n-1). The bus can only move up, down, left, or right, and it can pass only through the passable cells. If it\'s impossible to reach the destination, indicate that as well. Input - The first line of input contains a single integer n (2 ≤ n ≤ 500), the size of the grid. - Each of the following n lines contains n characters, either \'1\' for passable cells or \'0\' for impassable cells. Output - Output a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. Examples Input 4 1111 0011 0110 1111 Output 6 Input 3 110 010 001 Output -1 Input 5 11111 01001 01111 00101 11111 Output 8 Note In the first test case, one possible shortest path (with length 6) is: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3) -> (3, 3). In the second test case, it\'s impossible to reach the bottom-right corner, so the output is -1.","solution":"from collections import deque def shortest_path(n, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'1\' if grid[0][0] == \'0\' or grid[n-1][n-1] == \'0\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == n-1: return dist for dir_x, dir_y in directions: new_x, new_y = x + dir_x, y + dir_y if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1"},{"question":"Given an unsorted array of consecutive integers except one number is missing. Write a function that finds the missing number in the array. Example 1: Input: arr = [3, 7, 1, 2, 8, 4, 5] Output: 6 Explanation: The missing number in the array is 6. Example 2: Input: arr = [1, 2, 4, 5, 6] Output: 3 Explanation: The missing number in the array is 3. Your Task: Your task is to complete the function find_missing_number(). This function takes an array arr[] and its length n as input parameters and returns the missing number. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 1 <= arr[i] <= 10^6","solution":"def find_missing_number(arr, n): Finds the missing number in an array of consecutive integers. Parameters: arr (list): The input array with one missing number. n (int): The length of the array. Returns: int: The missing number. # Calculate the expected sum of the first n+1 natural numbers total_sum = (n + 1) * (n + 2) // 2 # Calculate the actual sum of the elements in the array array_sum = sum(arr) # The missing number is the difference between the expected sum and the actual sum return total_sum - array_sum"},{"question":"Given a dictionary and a list of sentences, your task is to determine the number of misspelled words in each sentence. A word is considered correctly spelled if it can be found in the dictionary, otherwise it is considered misspelled. -----Input----- The first line contains an integer D, the number of words in the dictionary. Each of the next D lines contains a single lowercase Latin letter string representing a dictionary word. The following line contains an integer S, the number of sentences. Each of the next S lines contains a sentence with lowercase Latin letter words separated by spaces. -----Output----- For each sentence, output the number of misspelled words. -----Constraints----- - 1 ≤ D ≤ 1000 - 1 ≤ |dictionary word| ≤ 100 - 1 ≤ S ≤ 100 - 1 ≤ |each sentence| ≤ 1000 - Each sentence contains only lowercase Latin letter words and spaces. -----Subtasks----- - Subtask #1 (30 points): The dictionary contains a maximum of 10 words. - Subtask #2 (70 points): No additional constraints -----Example----- Input: 5 apple banana orange grape melon 2 apple banana orange grapefruit watermelon Output: 0 2 -----Explanation----- In the first sentence, all words are present in the dictionary, thus 0 misspelled words. In the second sentence, both words \\"grapefruit\\" and \\"watermelon\\" are not in the dictionary, hence there are 2 misspelled words.","solution":"def count_misspelled_words(dictionary_words, sentences): Given a list of dictionary words and a list of sentences, this function determines the number of misspelled words in each sentence. :param dictionary_words: List of words in the dictionary :param sentences: List of sentences to check for misspellings :return: List with the number of misspelled words in each sentence dictionary_set = set(dictionary_words) misspelled_counts = [] for sentence in sentences: words = sentence.split() misspelled_count = sum(1 for word in words if word not in dictionary_set) misspelled_counts.append(misspelled_count) return misspelled_counts"},{"question":"In a city, there are N houses, and there is exactly one unidirectional road from each house to another house. The houses are numbered from 0 to N-1. Alice can travel from house `i` to house `j` if there is a direct road from `i` to `j`. Unfortunately, some of the roads are riddled with potholes, making travel through them slower. Each road from house `i` to house `j` has a time delay of `t[i][j]` minutes associated with it. Alice wants to find out the minimum time required to travel from house 0 to house (N - 1). Write a function to determine the shortest possible travel time from house 0 to house (N-1) in the city. Input Format: The first line contains an integer N, the number of houses. The next N lines each contain N integers representing the time delay `t[i][j]`. If there is no direct road from house `i` to house `j`, `t[i][j]` will be -1. Constraints: 2 ≤ N ≤ 1000 -1 ≤ t[i][j] ≤ 1000 where t[i][j] = -1 represents no direct road except `t[i][i] = 0` for all `0 ≤ i < N`. Output Format: Print the minimum time required to travel from house 0 to house (N - 1). If it is not possible to travel from house 0 to house (N - 1), print -1. Sample Input: 4 0 3 -1 7 8 0 2 -1 5 -1 0 1 2 -1 -1 0 Sample Output: 8 Explanation: Alice can start from house 0 and follow the path: 0 -> 1 (time delay 3 minutes) and 1 -> 2 (time delay 2 minutes) and finally, 2 -> 3 (time delay 1 minute). So the total time delay taken is 3 + 2 + 1 = 6 minutes which is the minimum time for Alice\'s travel.","solution":"import heapq def dijkstra(N, t): Function to calculate the minimum travel time using Dijkstra\'s algorithm. # Initialize a priority queue pq = [(0, 0)] # (current_weight, node) distances = {i: float(\'inf\') for i in range(N)} distances[0] = 0 visited = set() while pq: curr_dist, node = heapq.heappop(pq) if node in visited: continue visited.add(node) for neighbor in range(N): if t[node][neighbor] != -1 and neighbor not in visited: new_dist = curr_dist + t[node][neighbor] if new_dist < distances[neighbor]: distances[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return distances[N - 1] if distances[N - 1] != float(\'inf\') else -1 def min_travel_time(N, t): Determines the shortest possible travel time from house 0 to house N-1. :param N: Integer, the number of houses :param t: List[List[int]], the time delay matrix :return: Integer, minimum travel time from house 0 to house N-1 return dijkstra(N, t)"},{"question":"Write a program that reads a series of student grades and assigns a letter grade to each student based on their score. The letter grades are assigned according to the following rules: * A: 90-100 * B: 80-89 * C: 70-79 * D: 60-69 * F: 0-59 Input The input consists of multiple lines. Each line represents a student\'s score, and the number of lines does not exceed 100. Output For each student score, output the corresponding letter grade. Example Input 95 85 76 67 58 90 100 Output A B C D F A A","solution":"def assign_letter_grade(scores): Assigns a letter grade to each student\'s score. Parameters: scores (list of int) : A list of student scores. Returns: list of str: A list of letter grades corresponding to each score. grades = [] for score in scores: if 90 <= score <= 100: grades.append(\'A\') elif 80 <= score <= 89: grades.append(\'B\') elif 70 <= score <= 79: grades.append(\'C\') elif 60 <= score <= 69: grades.append(\'D\') elif 0 <= score <= 59: grades.append(\'F\') return grades"},{"question":"You are given a sequence of n lamps arranged in a row. Each lamp can be either ON or OFF. Initially, all the lamps are OFF. You are also given m switches. Each switch can toggle the state of a sub-segment of lamps. The i-th switch is defined by two integers l_i and r_i (1 leq l_i leq r_i leq n), which means that toggling the i-th switch will change the state of all lamps from the l_i-th lamp to the r_i-th lamp (inclusive). Your task is to find the minimum number of switches you need to toggle to turn on all the lamps. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 100,000) - the number of lamps and the number of switches, respectively. The next m lines describe the switches. Each line contains two integers l_i and r_i (1 leq l_i leq r_i leq n), the range of the i-th switch. -----Output----- Print a single integer - the minimum number of switches needed to turn on all the lamps. -----Examples----- Input 5 3 1 3 2 5 1 2 Output 2 Input 4 2 1 2 3 4 Output 2 -----Note----- In the first example, you can press the 1st switch (toggling lamps 1 to 3) and the 2nd switch (toggling lamps 2 to 5). This will turn on all the lamps and requires only 2 switches. In the second example, there are only two switches available, and you need to press both of them to turn on all the lamps.","solution":"def min_switches_to_turn_on_lamps(n, m, switches): switch_ranges = sorted(switches) total_lamps_on = 0 last_toggled = 0 selected_switches = 0 for l, r in switch_ranges: if last_toggled < l - 1: return -1 # If there\'s any gap that can\'t be covered, it\'s impossible if r > last_toggled: selected_switches += 1 last_toggled = r total_lamps_on += r - l + 1 if total_lamps_on >= n: return selected_switches return selected_switches if total_lamps_on >= n else -1"},{"question":"A grid-based game called \\"Laser Strike\\" involves targeting and eliminating obstacles using laser beams. The game is played on an N × N grid where each cell may contain an obstacle, represented by an integer value, which denotes the obstacle\'s strength. The player can fire lasers horizontally and vertically along any row or column to reduce the strength of the obstacles, but not diagonally. When a laser is fired, it reduces the strength of all obstacles in its path by 1 unit. If the strength of an obstacle reaches zero, the obstacle is eliminated from the grid. The objective of the game is to eliminate all obstacles on the grid using the minimum number of laser shots. Additionally, if an obstacle\'s strength is reduced to zero by a laser shot, it will not affect other obstacles in that same shot. Your task is to calculate the minimum number of laser shots required to clear all obstacles from the grid. However, if it is not possible to clear all obstacles, output -1. Input: The input starts with a single integer N (1 ≤ N ≤ 10), representing the size of the grid. The next N lines each contain N nonnegative integers representing the initial grid with obstacle strengths (≤ 10). A value of 0 indicates that there is no obstacle at that cell. Output: Output the minimum number of laser shots required to eliminate all obstacles on the grid. If it is not possible, output -1. Examples Input: 3 1 2 3 4 0 2 1 4 3 Output: 6 Input: 3 0 0 0 0 0 0 0 0 0 Output: 0 Input: 2 10 1 10 10 Output: 19","solution":"def min_laser_shots(grid): Calculate the minimum number of laser shots required to clear all obstacles from the grid. N = len(grid) # Sum all values in the grid to calculate total strengths of all obstacles total_strength = sum(sum(row) for row in grid) # If total strength is zero, no shots are required if total_strength == 0: return 0 # The minimum shots required would be the sum of all strengths # Because each shot can at most reduce the strength by 1 of an obstacle return total_strength"},{"question":"Chef is collecting data on the temperatures of different cities for his research. He wants to classify each city\'s temperature data as \\"Cold Day\\" if the temperature is less than 20 degrees Celsius, \\"Warm Day\\" if the temperature is between 20 and 30 degrees Celsius, and \\"Hot Day\\" if the temperature is greater than 30 degrees Celsius. You are given the temperatures of several cities on a single day. For each city\'s temperature, you need to determine if it is a \\"Cold Day\\", \\"Warm Day\\", or \\"Hot Day\\". -----Input----- - The first line of the input contains a single integer N denoting the number of cities. The description of N cities follows. - Each of the next N lines contains a single integer T_i denoting the temperature of the i^{th} city. -----Output----- For each city\'s temperature, print a single line containing the string \\"Cold Day\\", \\"Warm Day\\", or \\"Hot Day\\" (without quotes). -----Constraints----- - 1 le N le 100 - -50 le T_i le 50 -----Example Input----- 3 15 25 35 -----Example Output----- Cold Day Warm Day Hot Day -----Explanation----- Example case 1: The temperature is 15 which is less than 20, so it is a \\"Cold Day\\". Example case 2: The temperature is 25 which is between 20 and 30, so it is a \\"Warm Day\\". Example case 3: The temperature is 35 which is greater than 30, so it is a \\"Hot Day\\".","solution":"def classify_temperatures(N, temperatures): Classifies each city\'s temperature as \\"Cold Day\\", \\"Warm Day\\", or \\"Hot Day\\". Parameters: N (int): The number of cities temperatures (list of int): The temperatures of the cities Returns: list of str: A list containing the classification of each day\'s temperature result = [] for temp in temperatures: if temp < 20: result.append(\\"Cold Day\\") elif 20 <= temp <= 30: result.append(\\"Warm Day\\") else: result.append(\\"Hot Day\\") return result"},{"question":"Imagine you have a 2D grid of size n x m filled with integers. Each cell in the grid can either contain an integer -1, representing that the cell is a wall and cannot be traversed, or any non-negative integer, representing the cost of stepping into that cell. You start at the top-left cell (0, 0) and you want to reach the bottom-right cell (n-1, m-1). You can only move right or down at each step. Write a function that computes the minimum cost to reach the bottom-right cell from the top-left cell. If it\'s not possible to reach the destination, the function should return -1. # Input - n (1 ≤ n ≤ 1000): The number of rows in the grid. - m (1 ≤ m ≤ 1000): The number of columns in the grid. - `grid`: A list of lists of integers, where each integer represents the cost of entering that cell or `-1` representing a wall. # Output - Return an integer representing the minimum cost to reach the bottom-right cell or `-1` if the destination cannot be reached. # Example: Example 1: Input: ``` n = 3 m = 3 grid = [ [1, 2, 3], [4, -1, 6], [7, 8, 9] ] ``` Output: ``` 21 ``` Explanation: The path with the minimum cost is 1 → 4 → 7 → 8 → 9. Example 2: Input: ``` n = 2 m = 2 grid = [ [1, -1], [-1, 1] ] ``` Output: ``` -1 ``` Explanation: There is no path from the top-left cell to the bottom-right cell. # Note: - You may assume that the grid always has at least one valid path from the top-left to bottom-right cell in test cases where a path can be reached. - The cost to move through a cell with a `-1` is considered infinite and thus blocks the path.","solution":"import sys def min_cost(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 # Initialize a 2D DP array with high values dp = [[sys.maxsize] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and grid[i][j-1] != -1: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1] if dp[n-1][m-1] != sys.maxsize else -1"},{"question":"Grandma loves baking cookies for special occasions. She has a special recipe that says if a cookie contains exactly 2 \'A\'s and 1 \'B\', it is considered a deluxe cookie. Given two integers x and y, which represent the number of \'A\'s and \'B\'s respectively, determine the maximum number of deluxe cookies Grandma can bake. Example 1: Input: x = 5 y = 3 Output: 2 Explanation: We have 5 \'A\'s and 3 \'B\'s. Using 4 \'A\'s and 2 \'B\'s, we can make 2 deluxe cookies. 1 \'A\' and 1 \'B\' would remain unused. Example 2: Input: x = 4 y = 5 Output: 2 Explanation: We have 4 \'A\'s and 5 \'B\'s. Using 4 \'A\'s and 2 \'B\'s, we can make 2 deluxe cookies. 3 \'B\'s would remain unused. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDeluxeCookies() which takes two integers x and y as input parameters and returns the count of deluxe cookies that can be formed using x number of \'A\'s and y number of \'B\'s. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= x,y <= 10^8","solution":"def countDeluxeCookies(x, y): Determines the maximum number of deluxe cookies that can be baked. A deluxe cookie requires exactly 2 \'A\'s and 1 \'B\'. Parameters: x (int): The number of \'A\'s available. y (int): The number of \'B\'s available. Returns: int: The maximum number of deluxe cookies that can be baked. # A deluxe cookie requires 2 \'A\'s and 1 \'B\' return min(x // 2, y)"},{"question":"The Kingdom of Wisdom has an efficient postal system. The kingdom is divided into N towns, connected by M bidirectional roads. Every road has a certain travel time associated with it. The postal system needs to deliver letters from a central town (town 1) to all other towns in the kingdom. However, due to a recent policy change, a town will only receive a letter if it is reachable within a given travel time of K units from the central town. Let\'s describe the problem: You are given a list of towns and the roads connecting them, along with the travel time for each road. You need to determine which towns will receive the letter. The central town is always town number 1. Input The first line contains three integers N (1 ≤ N ≤ 1000), M (0 ≤ M ≤ 5000), and K (0 ≤ K ≤ 10^5) — the number of towns, the number of roads, and the maximum allowable travel time, respectively. The next M lines each contain three integers u, v, and t (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ t ≤ 10^4) — representing a bidirectional road connecting towns u and v with travel time t. Output Print all the towns (excluding town 1) that will receive the letter in ascending order of their town numbers. If no town receives the letter, print \\"No towns receive the letter\\". Example Input: 5 6 10 1 2 4 1 3 8 2 3 3 2 4 5 3 4 2 3 5 7 Output: 2 3 4 Explanation: The diagram of towns and roads is as follows: ``` 1 | 4 8 | / 2--3--5 / 5 2 7 ``` - Town 2: Minimum travel time from town 1 is 4. - Town 3: Minimum travel time from town 1 is 8. - Town 4: Minimum travel time from town 1 is 9 (1 -> 2 -> 4 or 1 -> 3 -> 4). - Town 5: Minimum travel time from town 1 is 15. Since towns 2, 3, 4 have travel times less than or equal to 10, they will receive the letter.","solution":"import heapq def reachable_towns(N, M, K, roads): def dijkstra(start, N, adj): dist = [float(\'inf\')] * (N + 1) dist[start] = 0 queue = [(0, start)] while queue: d, node = heapq.heappop(queue) if dist[node] < d: continue for neighbor, time in adj[node]: new_dist = d + time if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(queue, (new_dist, neighbor)) return dist adj = [[] for _ in range(N + 1)] for u, v, t in roads: adj[u].append((v, t)) adj[v].append((u, t)) distances = dijkstra(1, N, adj) result = sorted([i for i in range(2, N + 1) if distances[i] <= K]) return result if result else \\"No towns receive the letter\\" # Example usage (for local testing, not in the final solution): # N, M, K = 5, 6, 10 # roads = [(1, 2, 4), (1, 3, 8), (2, 3, 3), (2, 4, 5), (3, 4, 2), (3, 5, 7)] # print(reachable_towns(N, M, K, roads)) # Output: [2, 3, 4]"},{"question":"Given a list of non-negative integers representing the heights of buildings, calculate the maximum water that can be trapped between the buildings after raining. The width of each building is 1. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (0,1,0,2,1,0,1,3,2,1,2,1) is represented as below: ``` | | __ | __ | | | __| || || __ |__|_||_||_||_| ``` In this case, 6 units of rainwater (marked in ⊳) are being trapped: ``` | | __ | __ | | | __| || || __ |_|⟜⟜|_||_||_||_| ``` Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map (4,2,0,3,2,5) is represented as below: ``` | | __ | __ | | | __| || || __ |_|⟫⟫||_||_||_| ``` In this case, 9 units of rainwater (marked in ⬤) are being trapped: ``` | | __ | __ | | | __| || || __ |_|⬤⬤||_||_||_| ``` Your Task: You don\'t need to read input or print anything. Complete the function trap() which takes list height as input parameter and returns the total amount of rainwater trapped. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The length of height array should be at least 1 and at most 3 * 10^4. - 0 ≤ height[i] ≤ 10^5","solution":"def trap(height): Calculate the maximum water that can be trapped between the buildings. :param height: List[int] - List of non-negative integers representing the heights of buildings. :return: int - Total amount of trapped rainwater. if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) water_trapped += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) water_trapped += right_max - height[right] return water_trapped"},{"question":"Given a series of book genres and their related book counts, write a function that returns the genre with the highest book count. If multiple genres have the same highest book count, return the genre that appears first alphabetically. The function should take a dictionary, where keys are genres (as strings), and values are book counts (as integers). Ensure the function handles edge cases such as an empty dictionary. Example: ``` max_genre({\\"Fantasy\\": 23, \\"Science Fiction\\": 42, \\"Horror\\": 42, \\"Romance\\": 15}) ``` should return `\\"Horror\\"` because \\"Horror\\" and \\"Science Fiction\\" have the highest book count, and \\"Horror\\" comes first alphabetically.","solution":"def max_genre(genres): Returns the genre with the highest book count. If multiple genres have the same highest book count, return the genre that appears first alphabetically. Parameters: genres (dict): A dictionary where keys are genres (strings) and values are book counts (integers). Returns: str: The genre with the highest book count. if not genres: return None max_count = max(genres.values()) top_genres = [genre for genre, count in genres.items() if count == max_count] return sorted(top_genres)[0]"},{"question":"You are given a string representation of a basic mathematical operation «a#b#c», where «a», «b», and «c» are digits, and «#» can be either the «+» or «-» sign. The operation must be evaluated from left to right, i.e., compute (a#b)#c. Input The only given line has a string in the form «a#b#c», where «a», «b», and «c» are digits (from 0 to 9), and «#» is the sign «+» or «-». Output Print the value of the computed expression. Examples Input 2+3-1 Output 4","solution":"def evaluate_expression(expression): Evaluates a basic mathematical expression in the form \\"a#b#c\\" where \'a\', \'b\', and \'c\' are digits and \'#\' is either \'+\' or \'-\'. The operation is evaluated from left to right. if not len(expression) == 5: raise ValueError(\\"Invalid input length\\") a = int(expression[0]) b = int(expression[2]) c = int(expression[4]) op1 = expression[1] op2 = expression[3] if op1 not in [\'+\', \'-\'] or op2 not in [\'+\', \'-\']: raise ValueError(\\"Invalid operators\\") # Evaluate the expression from left to right if op1 == \'+\': result = a + b else: result = a - b if op2 == \'+\': result += c else: result -= c return result"},{"question":"Vikram loves playing board games with his friends. One of his favorite games involves moving a token around a rectangular grid, where each cell has unique coordinates (X, Y). To win the game, he needs to move his token from the top-left corner of the grid (1, 1) to the bottom-right corner (N, M). He can only move the token one cell to the right or one cell down at a time. Your task is to help Vikram calculate the number of distinct paths he can take to reach the bottom-right corner of the grid from the top-left corner. Input Format: The first line contains T, the number of test cases. Each of the next T lines contains two integers, N and M, representing the dimensions of the grid. Output Format: For each test case, output a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 15 SAMPLE INPUT: 2 2 2 3 3 SAMPLE OUTPUT: 2 6","solution":"import math def number_of_paths(N, M): Computes the number of distinct paths from (1,1) to (N,M) in a grid. # Use combinatorial approach to calculate the number of distinct paths return math.comb(N + M - 2, N - 1) def solve(test_cases): results = [] for N, M in test_cases: results.append(number_of_paths(N, M)) return results"},{"question":"You are given a singly linked list where each node contains a positive integer value and an additional random pointer which can point to any node within the list or null. Your task is to write a function to clone this linked list in such a way that the new list has the exact same structure as the original, including the random pointers. Constraint: - The number of nodes in the list is in the range [0, 1000]. - Each node\'s value is a positive integer in the range [1, 10^6]. Implement the function `cloneLinkedList(head: Optional[ListNode]) -> Optional[ListNode]` where `ListNode` is a class containing a `val`, `next`, and `random` pointers. You must return the head of the cloned list. Example: Input: list = [ { \\"val\\": 1, \\"next\\": { \\"val\\": 2, \\"next\\": null, \\"random\\": null }, \\"random\\": null } ] Output (head of the new list): [ { \\"val\\": 1, \\"next\\": { \\"val\\": 2, \\"next\\": null, \\"random\\": null }, \\"random\\": null } ] Explanation: The list has two nodes, each with a value of 1 and 2 respectively. Both the random pointers and `next` pointers are correctly set up in the cloned list to match the original list structure. Note: Your solution must run in O(n) time complexity and use O(1) extra space.","solution":"class ListNode: def __init__(self, val: int, next: \'ListNode\' = None, random: \'ListNode\' = None): self.val = val self.next = next self.random = random def cloneLinkedList(head: \'ListNode\') -> \'ListNode\': if not head: return None # Step 1: Create new nodes and insert them next to original nodes current = head while current: new_node = ListNode(current.val) new_node.next = current.next current.next = new_node current = new_node.next # Step 2: Copy random pointers current = head while current: if current.random: current.next.random = current.random.next current = current.next.next # Step 3: Separate the cloned list from the original list original_current = head clone_head = head.next clone_current = clone_head while original_current: original_current.next = clone_current.next original_current = original_current.next if original_current: clone_current.next = original_current.next clone_current = clone_current.next return clone_head"},{"question":"You are given a sequence of positive integers. The task is to determine whether the sequence can be transformed into a non-decreasing sequence by performing at most one modification. A modification is defined as changing exactly one integer in the sequence to any other integer. Input The input consists of multiple test cases. Each test case starts with a positive integer N, the number of elements in the sequence. The next line contains N positive integers separated by spaces. Output For each test case, output \\"YES\\" if the sequence can be made non-decreasing by modifying at most one element, otherwise output \\"NO\\". Constraints 1 ≤ N ≤ 10^5 Each integer in the sequence is in the range 1 to 10^9. SAMPLE INPUT 5 4 2 3 3 5 4 4 2 1 3 3 1 2 3 0 SAMPLE OUTPUT YES NO YES","solution":"def can_be_non_decreasing_by_one_modification(seq): Returns \\"YES\\" if the sequence can be made non-decreasing by modifying at most one element, else \\"NO\\". n = len(seq) modification_count = 0 # Traverse the sequence and count the necessary modifications for i in range(n - 1): if seq[i] > seq[i + 1]: modification_count += 1 # If more than one modification needed, return \\"NO\\" if modification_count > 1: return \\"NO\\" # Check if the modification can be made smoothly if i > 0 and seq[i - 1] > seq[i + 1]: seq[i + 1] = seq[i] return \\"YES\\" def process_input(input_text): Process the given input and return the corresponding output for each test case. lines = input_text.strip().split(\\"n\\") i = 0 result = [] while i < len(lines): n = int(lines[i]) if n == 0: break seq = list(map(int, lines[i + 1].split())) result.append(can_be_non_decreasing_by_one_modification(seq)) i += 2 return \\"n\\".join(result)"},{"question":"Given a string S, determine the length of the shortest substring which contains at least one occurrence of all the distinct characters in S. *Input : * A single line containing string S where 1 ≤ |S| ≤ 100000. Output : A single integer denoting the length of the shortest substring of S that contains all distinct characters present in S. SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3 Explanation The shortest substrings that contain \'a\', \'b\', and \'c\' are \\"abc\\", \\"bca\\", and \\"cab\\". The length of these substrings is 3. Hence, the output is 3.","solution":"def length_of_shortest_substring_with_all_distinct_chars(S): n = len(S) unique_chars = set(S) required_char_count = len(unique_chars) left, right = 0, 0 char_count = {} min_length = float(\'inf\') while right < n: char_count[S[right]] = char_count.get(S[right], 0) + 1 while len(char_count) == required_char_count: min_length = min(min_length, right - left + 1) char_count[S[left]] -= 1 if char_count[S[left]] == 0: del char_count[S[left]] left += 1 right += 1 return min_length"},{"question":"Create a function diamondPattern(size) that returns a diamond shape of a given size. The size is passed through to the function and the function should return a list containing each line of the diamond. ``` diamondPattern(5) should return : [\'____*____\', \'___***___\', \'__*****__\', \'_*******_\', \'*********\', \'_*******_\', \'__*****__\', \'___***___\', \'____*____\'] diamondPattern(3) should return : [\'__*__\', \'_***_\', \'*****\', \'_***_\', \'__*__\'] ``` The final idea is for the diamond to look like this if you decide to print each element of the list: ``` diamondPattern(5) will result in: ____*____ 1 ___***___ 2 __*****__ 3 _*******_ 4 ********* -----> 5 - Widest part of Diamond _*******_ 4 __*****__ 3 ___***___ 2 ____*____ 1 diamondPattern(3) will result in: __*__ 1 _***_ 2 ***** -----> 3 - Widest part of Diamond _***_ 2 __*__ 1 ``` Pad with underscores i.e. _ so each line is the same length. The widest part of the diamond having only asterisks, no spaces.","solution":"def diamondPattern(size): Returns a diamond shape of a given size as a list containing each line of the diamond. diamond = [] for i in range(size): underscores = \'_\' * (size - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(underscores + stars + underscores) for i in range(size - 2, -1, -1): underscores = \'_\' * (size - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(underscores + stars + underscores) return diamond"},{"question":"A coder named Guruji often uses special markers in his code comments, for example, \\"TODO\\" to indicate tasks yet to be done. Your task is to write a function that counts how many times \\"TODO\\" appears in a given string. Input: A single line containing the comment string (length: 1 to 200 characters). Output: A single integer representing the count of \\"TODO\\". Constraints: - The string will only contain ASCII characters. - String length will be between 1 and 200 characters. - \\"TODO\\" is case-sensitive. Example: Sample Input: ``` This function needs work. TODO: fix the bug. TODO: write test cases. TODO ``` Sample Output: ``` 3 ```","solution":"def count_todo_comments(comment_string): Counts how many times \\"TODO\\" appears in the given comment string. :param comment_string: str, the comment string to search in :return: int, the count of \\"TODO\\" return comment_string.count(\\"TODO\\")"},{"question":"Given an array of N integers, determine the smallest integer K such that the array can be partitioned into exactly K subarrays where each subarray has a unique sum. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains two lines of input. The first line contains a single integer N, the number of elements in the array. The second line contains N integers a_{1}, a_{2}, ..., a_{N}, the elements of the array. ------ Output ------ For each test case, output in a single line the answer to the problem. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ a_{i} ≤ 1000 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 2 5 1 2 3 4 5 4 10 20 30 40 ----- Sample Output 1 ------ 5 4 ----- explanation 1 ------ Case 1: Every element in the array has a distinct sum, hence K is 5. Case 2: Each element is distinct and can be formed into subarrays, hence K is 4.","solution":"def smallest_K_unique_subarray_sums(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] # Each element is distinct because the problem doesn\'t mention any duplicates # Thus the smallest K such that each subarray has a unique sum is always N results.append(N) return results"},{"question":"# Task: You need to implement a function `is_isogram` that determines whether a given string is an isogram. An isogram is a word in which no letter occurs more than once. Your function should be case insensitive. Function signature: `def is_isogram(string: str) -> bool:` # Input: - A single string `string` (1 <= len(string) <= 100,000) containing only alphabetic characters. # Output: - Return `True` if the input string is an isogram, and `False` otherwise. # Examples: `is_isogram(\\"lumberjack\\")` -> `True` `is_isogram(\\"background\\")` -> `True` `is_isogram(\\"downstream\\")` -> `True` `is_isogram(\\"six-year-old\\")` -> `False` `is_isogram(\\"Alphabet\\")` -> `False` # Explanation: - \\"lumberjack\\", \\"background\\", and \\"downstream\\" have all unique letters. - \\"six-year-old\\" contains repeated characters (\'-\'). - \\"Alphabet\\" contains repeated letters (\'a\' and \'A\' are regarded as the same character in a case insensitive comparison).","solution":"def is_isogram(string: str) -> bool: Returns True if the input string is an isogram, False otherwise. normalized_str = string.lower() return len(set(normalized_str)) == len(normalized_str)"},{"question":"Given an array of integers, find the maximum product of any two integers in the array. Input The first line contains a single integer T <= 50, the number of test cases. Each of the next T lines contains an integer N (2 <= N <= 100), the size of the array, followed by N integers separated by spaces, representing the elements of the array. Output For each test case, output a single line containing the maximum product of any two integers in the corresponding array. Example Input: 3 4 1 2 3 4 5 -1 -3 -4 2 0 3 3 7 2 Output: 12 12 21","solution":"def max_product_of_two_integers(arr): Given an array of integers, find the maximum product of any two integers in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least 2 integers.\\") arr.sort() return max(arr[0] * arr[1], arr[-1] * arr[-2]) def solve_max_product(test_cases): Process the test cases to find the maximum product for each. results = [] for case in test_cases: _, *array = case results.append(max_product_of_two_integers(array)) return results"},{"question":"A large company is setting up a new email system for its employees. Each employee is assigned a unique ID, starting from 1 up to n. Sometimes, employees have to forward emails to one another. Your task is to determine if an email can be forwarded from one employee to another, directly or indirectly. An email is considered to be forwarded directly if the sender directly sends the email to the recipient. An email is considered to be forwarded indirectly if it passes through one or more intermediate employees before reaching the recipient. Your goal is to determine the shortest path (number of forwards) required for these email communications. INPUT: First line contains the number of employees n. Next line contains the number of direct forwarding relationships m. Next m lines contain two integers each, representing a direct forwarding relationship between two employees a and b (a can forward directly to b). Next line contains the number of queries q. Next q lines contain two integers each, the source employee s and the destination employee d. OUTPUT: For each query, print the minimum number of forwards needed for the email to be delivered from the source to the destination. If an email cannot be forwarded from the source to the destination, print -1. SAMPLE INPUT 4 3 1 2 2 3 3 4 3 1 3 1 4 4 1 SAMPLE OUTPUT 2 3 -1","solution":"from collections import deque def min_forwards(n, m, relationships, q, queries): # Initialize adjacency list for the graph graph = {i: [] for i in range(1, n+1)} for a, b in relationships: graph[a].append(b) def bfs(start, end): if start == end: return 0 queue = deque([(start, 0)]) visited = set() while queue: node, depth = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor == end: return depth + 1 if neighbor not in visited: queue.append((neighbor, depth + 1)) return -1 results = [] for s, d in queries: results.append(bfs(s, d)) return results # Convert input into structured components def parse_input(input_string): data = input_string.strip().split(\\"n\\") n = int(data[0].strip()) m = int(data[1].strip()) relationships = [] for i in range(2, 2 + m): a, b = map(int, data[i].strip().split()) relationships.append((a, b)) q = int(data[2 + m].strip()) queries = [] for i in range(3 + m, 3 + m + q): s, d = map(int, data[i].strip().split()) queries.append((s, d)) return n, m, relationships, q, queries def min_forwards_from_string(input_string): n, m, relationships, q, queries = parse_input(input_string) return min_forwards(n, m, relationships, q, queries) # Example usage: input_str = \\"4n3n1 2n2 3n3 4n3n1 3n1 4n4 1n\\" print(min_forwards_from_string(input_str)) # Expected output: [2, 3, -1]"},{"question":"Given a string `s`, consisting of lowercase English letters, determine if the string can be transformed into a palindrome by rearranging its characters. If possible, return \\"YES\\", otherwise return \\"NO\\". For example: ```python can_form_palindrome(\\"aabb\\") == \\"YES\\" # \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome can_form_palindrome(\\"abc\\") == \\"NO\\" # \\"abc\\" cannot be rearranged to form any palindrome can_form_palindrome(\\"racecar\\") == \\"YES\\" # \\"racecar\\" is already a palindrome can_form_palindrome(\\"aabbhijkkjih\\") == \\"YES\\" # \\"aabbhijkkjih\\" can be rearranged to form \\"hijkkjihabba\\", which is a palindrome ``` Hint: - A string can be rearranged into a palindrome if at most one character has an odd frequency.","solution":"def can_form_palindrome(s): Returns \\"YES\\" if the string can be rearranged to form a palindrome, otherwise returns \\"NO\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A company wants to implement a special approval system for their projects based on the budget and the number of working days required. A project is considered for approval if both of the following conditions are met: - The budget does not exceed 100,000. - The number of working days required does not exceed 200. Write a program that determines whether a project is approved or not based on the given criteria. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each of the next T lines will contain two integers, B and D — the budget and the number of working days required for the project. ------ Output Format ------ For each test case, output on a new line, APPROVED, if the project meets the criteria, and REJECTED otherwise. You may print each character in uppercase or lowercase. For example, APPROVED, approved, Approved, and ApPrOvEd are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ B ≤ 200,000 0 ≤ D ≤ 400 ----- Sample Input 1 ------ 3 95000 150 120000 100 80000 250 ----- Sample Output 1 ------ APPROVED REJECTED REJECTED ----- Explanation 1 ------ Test case 1: The budget is 95,000 which is less than or equal to 100,000 and the number of working days required is 150 which is less than or equal to 200. Thus, the project is approved. Test case 2: The budget is 120,000 which exceeds the 100,000 limit even though the number of working days required is less than 200. Thus, the project is rejected. Test case 3: The budget is 80,000 which is less than or equal to 100,000 but the number of working days required is 250 which exceeds the 200 limit. Thus, the project is rejected.","solution":"def project_approval(t, test_cases): results = [] for b, d in test_cases: if b <= 100000 and d <= 200: results.append(\\"APPROVED\\") else: results.append(\\"REJECTED\\") return results"},{"question":"A game company is conducting an analysis on the playtime of its users to determine how engaged they are with their game. Each user has multiple play sessions, and the company wants to find out the maximum playtime any user has spent in a single session. You are given the data of users and their respective play sessions, and need to output the ID of the user with the maximum single play session time, as well as the duration of that session. -----Constraints----- - 1 leq U leq 100 (U is the number of users) - 1 leq N_i leq 100 (N_i is the number of play sessions for the i-th user) - 1 leq T_{ij} leq 10^4 (T_{ij} is the j-th playtime (in minutes) of the i-th user) -----Input----- Input is given from Standard Input in the following format: ``` U N_1 T_{11} T_{12} ... T_{1N1} N_2 T_{21} T_{22} ... T_{2N2} ... N_U T_{U1} T_{U2} ... T_{UNU} ``` -----Output----- Output the user ID (1-indexed) with the maximum single play session time and the duration of that session. If there are multiple users with the same maximum playtime, output the ID of the first one in the input. -----Sample Input----- 3 2 100 200 1 300 3 150 120 90 -----Sample Output----- 2 300 User 2 has the maximum single play session time of 300 minutes. Hence, you should print `2 300`.","solution":"def find_max_playtime_user(data): Finds the user with the maximum single play session time and that session duration. Parameters: data (str): Multiline string containing the input data. Returns: tuple: (user_id, max_time) where user_id is the 1-indexed ID of the user and max_time is the maximum single play session time. lines = data.strip().split(\'n\') U = int(lines[0]) max_time = -1 max_user_id = -1 for i in range(U): sessions = list(map(int, lines[i + 1].split())) user_id = i + 1 max_session_time = max(sessions[1:]) if max_session_time > max_time: max_time = max_session_time max_user_id = user_id return (max_user_id, max_time) # Example usage with direct input string data = 3 2 100 200 1 300 3 150 120 90 print(find_max_playtime_user(data)) # Output: (2, 300)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},C={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],j={key:0},R={key:1};function L(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const M=d(A,[["render",L],["__scopeId","data-v-c8cb1942"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/22.md","filePath":"quotes/22.md"}'),D={name:"quotes/22.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
