import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as l,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(r,e,u,m,s,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const A=d(k,[["render",N],["__scopeId","data-v-c0167003"]]),O=JSON.parse('[{"question":"Data Cleanup and Reconciler You are given a list of product records from two different databases. Each record contains a product ID and a product name, and you need to reconcile discrepancies between these databases. Sometimes, two records from the two databases may represent the same product but are listed with slightly different names or small typographical errors. Task Your task is to implement a function `reconcile_products` that takes two lists of product records and returns a list of reconciled product IDs. For the purpose of this task, assume that two product names are considered a match if their Levenshtein distance is less than or equal to 2. The Levenshtein distance between two strings is a measure of the difference between them, with smaller values indicating more similar strings. It is defined as the minimum number of single-character edits (insertions, deletions or substitutions) required to change one string into the other. Function Signature ```python def reconcile_products(db1: List[Tuple[int, str]], db2: List[Tuple[int, str]]) -> List[int]: ``` Input - `db1`: List of tuples representing products in the first database. Each tuple contains an integer product ID and a string product name. - `db2`: List of tuples representing products in the second database. Each tuple contains an integer product ID and a string product name. The elements of db1 and db2 are as follows: ```python db1: [(int, str)] db2: [(int, str)] ``` Output - Returns a list of product IDs from `db1` that have a matching product in `db2` based on the aforementioned criterion. Example ```python db1 = [(1, \\"apple\\"), (2, \\"banana\\"), (3, \\"orange\\")] db2 = [(4, \\"appl\\"), (5, \\"banan\\"), (6, \\"oraneg\\")] output = reconcile_products(db1, db2) print(output) # [1, 2, 3] ``` In the example, \\"apple\\" in db1 and \\"appl\\" in db2 match because their Levenshtein distance is 1. Similarly, \\"banana\\" and \\"banan\\" (distance 1) and \\"orange\\" and \\"oraneg\\" (distance 1) match. Good luck!","solution":"from typing import List, Tuple import numpy as np def levenshtein_distance(a: str, b: str) -> int: if a == b: return 0 if len(a) < len(b): a, b = b, a previous_row = range(len(b) + 1) for i, ca in enumerate(a): current_row = [i + 1] for j, cb in enumerate(b): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (ca != cb) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def reconcile_products(db1: List[Tuple[int, str]], db2: List[Tuple[int, str]]) -> List[int]: matching_ids = [] for id1, name1 in db1: for id2, name2 in db2: if levenshtein_distance(name1, name2) <= 2: matching_ids.append(id1) break # no need to continue, we found a match for this id1 return matching_ids"},{"question":"Develop a function `isPerfect` that determines whether a given string of digits contains a perfect square within a certain range of lengths. A perfect square is a number that is the square of an integer. For example, 16 is a perfect square because it is 4 squared (4 * 4 = 16). The function will take three parameters: 1. `s` (string) - the string of digits to examine. 2. `minLength` (integer) - the minimum length of the substring to consider. 3. `maxLength` (integer) - the maximum length of the substring to consider. The function `isPerfect` should return `True` if there exists at least one perfect square among the substrings of lengths between `minLength` and `maxLength` (inclusive) within the given string. Otherwise, it returns `False`. # Example ```python isPerfect(\\"14432116\\", 2, 3) # This would return True, since 16 and 144 are perfect squares. isPerfect(\\"123456789\\", 2, 2) # This would return False, since no 2-digit substrings are perfect squares. isPerfect(\\"2125263649\\", 1, 2) # This would return True, since 4 and 9 (both single digits) are perfect squares. ``` # Note - The function should search for all possible substrings within the specified length range. - Consider leading zeros in substrings. For example, \\"04\\" is valid, but is ignored for being not a perfect square of any integer. # Constraints - The length of the string `s` is between 1 and 1000. - `minLength` and `maxLength` will satisfy 1 <= minLength <= maxLength <= length of `s`. # Implementation ```python def isPerfect(s, minLength, maxLength): def is_perfect_square(n): if n < 0: return False root = int(n ** 0.5) return root * root == n for length in range(minLength, maxLength + 1): for i in range(len(s) - length + 1): sub = s[i:i + length] if is_perfect_square(int(sub)): return True return False # Test cases print(isPerfect(\\"14432116\\", 2, 3)) # True print(isPerfect(\\"123456789\\", 2, 2)) # False print(isPerfect(\\"2125263649\\", 1, 2)) # True ```","solution":"def isPerfect(s, minLength, maxLength): Determines if there exists a perfect square among the substrings of a given string of digits within the specified range of lengths. Parameters: s (str): The string of digits to examine. minLength (int): The minimum length of the substring to consider. maxLength (int): The maximum length of the substring to consider. Returns: bool: True if there exists a perfect square among the substrings, False otherwise. def is_perfect_square(n): if n < 0: return False root = int(n ** 0.5) return root * root == n for length in range(minLength, maxLength + 1): for i in range(len(s) - length + 1): sub = s[i:i + length] if sub[0] == \'0\': continue if is_perfect_square(int(sub)): return True return False"},{"question":"Determine Dependent Variable You will be given a dataset represented as a list of tuples, where each tuple contains pairs of values that follow a certain linear relationship. Your task is to determine the dependent variable (i.e., the y-values) given the independent values (i.e., the x-values), the slope `m`, and the y-intercept `b` of the linear relationship. Return the calculated list of dependent variables. For example: ```python def calculate_y_values(data, m, b): return [m * x + b for x in data] # Test cases print(calculate_y_values([0, 1, 2, 3], 2, 1)) # should return [1, 3, 5, 7] print(calculate_y_values([-1, 0, 1, 2], -3, 4)) # should return [7, 4, 1, -2] print(calculate_y_values([10, 20, 30], 0.5, -2)) # should return [3, 8, 13] ``` NOTES: * The dataset of x-values and the constants `m` (slope) and `b` (y-intercept) will be provided as input. * The dataset will contain at least one value and at most 100 values. * The slope and y-intercept will be real numbers and can be negative or positive. * Your function should handle floating-point arithmetic with reasonable precision.","solution":"def calculate_y_values(data, m, b): Calculate the dependent variable (y-values) given the independent variable (x-values), slope (m), and y-intercept (b). Parameters: data (list of float): The list of independent variable values. m (float): The slope of the linear relationship. b (float): The y-intercept of the linear relationship. Returns: list of float: The calculated dependent variable values. return [m * x + b for x in data]"},{"question":"Anna and her friends are playing with stacks of coins and they need your help to keep the game fair. They start with an empty stack and perform m operations. Each operation can be one of the following: 1. Add x_{i} coins to the stack. 2. Remove the top y_{i} coins from the stack. This operation can only be performed if the stack has at least y_{i} coins in it. 3. Get the maximum number of coins in the stack at any point in time after every operation. Your task is to help Anna and her friends track the maximum number of coins in the stack after each operation and output this value. -----Input----- The first line contains a single integer m (1 ≤ m ≤ 2·10^5) — the number of operations. The next m lines describe the operations. Each line will start with an integer t_{i} (1 ≤ t_{i} ≤ 3), denoting the type of the operation (see above). If t_{i} = 1, it will be followed by a single integer x_{i} (1 ≤ x_{i} ≤ 10^3). If t_{i} = 2, it will be followed by a single integer y_{i} (1 ≤ y_{i} ≤ 10^3; y_{i} ≤ current number of coins in the stack). It is guaranteed that all operations are correct (y_{i} ≤ current number of coins in the stack). -----Output----- Output m lines each containing the maximum number of coins in the stack after the corresponding operation. -----Examples----- Input 5 1 100 1 50 2 30 1 200 3 Output 100 150 120 320 320 Input 4 1 10 1 5 2 10 3 Output 10 15 5 5 -----Note----- In the first sample, the stack changes as follows: - Add 100 coins: [100] (maximum = 100) - Add 50 coins: [100, 50] (maximum = 150) - Remove 30 coins: [100, 20] (maximum = 120) - Add 200 coins: [100, 20, 200] (maximum = 320) - Get maximum: 320 In the second sample, the stack changes as follows: - Add 10 coins: [10] (maximum = 10) - Add 5 coins: [10, 5] (maximum = 15) - Remove 10 coins: [5] (maximum = 5) - Get maximum: 5","solution":"def track_max_coins(m, operations): Returns a list of the maximum number of coins in the stack after each operation. Args: m (int): The number of operations. operations (list of tuples): Each tuple contains the operation code and the corresponding value. Returns: list: A list containing the maximum number of coins in the stack after each operation. stack = [] max_coins = 0 result = [] for operation in operations: if operation[0] == 1: # Add operation coins = operation[1] stack.append(coins) max_coins += coins elif operation[0] == 2: # Remove operation coins = operation[1] stack[-1] -= coins if stack[-1] == 0: stack.pop() max_coins -= coins elif operation[0] == 3: # Get maximum operation result.append(max_coins) if operation[0] != 3: # For non-max operations, always append the current max_coins result.append(max_coins) return result"},{"question":"Write a function `findDuplicates` that takes a list of integers as input and returns a list of integers that appear more than once in the input list. The output list should contain the duplicates sorted in ascending order. Example: if the input list is `[4, 3, 2, 7, 8, 2, 3, 1]`, the output should be `[2, 3]`. Constraints: - The function should have a time complexity of O(n). - The function should use O(n) extra space. ```python def findDuplicates(nums): # Your code here # Example usage: print(findDuplicates([4, 3, 2, 7, 8, 2, 3, 1])) # Output: [2, 3] ```","solution":"def findDuplicates(nums): Returns a list of integers that appear more than once in the input list, sorted in ascending order. Args: nums (List[int]): The input list of integers. Returns: List[int]: A list of duplicated integers sorted in ascending order. from collections import Counter # Count occurrences of each number in the list counts = Counter(nums) # Extract numbers that have a count greater than 1 duplicates = [num for num, count in counts.items() if count > 1] # Return the sorted list of duplicates return sorted(duplicates)"},{"question":"Write a function `sort_groceries` that takes a dictionary representing a grocery list. Each key in the dictionary is a string representing the name of a grocery item and the associated value is an integer representing the quantity of that item. The function should return a list of tuples, where each tuple contains the name of the grocery item and the quantity, sorted primarily by the quantity in descending order, and secondarily by the name of the grocery item in ascending alphabetical order in cases where multiple items have the same quantity. # Example: ```python sort_groceries({\'apples\': 5, \'bananas\': 7, \'oranges\': 5}) # Output: [(\'bananas\', 7), (\'apples\', 5), (\'oranges\', 5)] ``` **Note:** You can assume that all quantities are non-negative integers. # Constraints: - The input dictionary will have at least one item.","solution":"def sort_groceries(groceries): Sorts a dictionary of grocery items by quantity in descending order, and by name in ascending order if quantities are the same. Args: groceries (dict): A dictionary representing the grocery items and their quantities. Returns: list: A list of tuples sorted by quantity (descending) and name (ascending). return sorted(groceries.items(), key=lambda item: (-item[1], item[0]))"},{"question":"Given an array of integers, determine whether the array is a perfect mountain array. An array is considered a perfect mountain if there is its peak element at index `k` (0 < k < n - 1), such that: - Elements strictly increase from the start of the array to the peak (`arr[0] < arr[1] < ... < arr[k]`). - Elements strictly decrease from the peak to the end of the array (`arr[k] > arr[k+1] > ... > arr[n-1]`). The function should return a boolean indicating whether the array is a perfect mountain. **Examples:** ```python isMountainArray([0, 2, 3, 4, 5, 2, 1, 0]) # returns True isMountainArray([0, 2, 3, 3, 5, 2, 1, 0]) # returns False (because 3 is repeated) isMountainArray([0, 1, 2, 3, 4, 5, 3, 3]) # returns False (no downward slope) isMountainArray([5, 4, 3, 2, 1]) # returns False (no upward slope) ``` Note: Do not use built-in functions that provide a direct solution to the problem. You need to implement the logic to check the two conditions sequentially for the array.","solution":"def isMountainArray(arr): n = len(arr) if n < 3: return False peak_index = 0 # Find the peak for i in range(1, n - 1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peak_index = i break # not finding a peak means it\'s not a mountain array if peak_index == 0: return False # Check if strictly increasing to the peak for i in range(1, peak_index + 1): if arr[i] <= arr[i-1]: return False # Check if strictly decreasing from the peak for i in range(peak_index + 1, n): if arr[i] >= arr[i-1]: return False return True"},{"question":"You are given an array of integers and a target sum. Your task is to return the indices of the two numbers that add up to the target sum. It\'s guaranteed that there is exactly one solution, and you cannot use the same element twice. Write a function `twoSum(nums, target)` that accepts an array of integers `nums` and an integer `target`, and returns the indices of the two numbers such that they add up to `target`. # Example: - Input: nums = [2, 7, 11, 15], target = 9 - Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. - Input: nums = [3, 2, 4], target = 6 - Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. - Input: nums = [3, 3], target = 6 - Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, we return [0, 1]. Note: - The input array will always contain at least two elements. - The order of the output does not matter.","solution":"def twoSum(nums, target): Returns the indices of the two numbers that add up to the target sum. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Matrix Spiral Write a function that takes an n x n matrix (a list of lists) of integers and returns a list of integers representing the spiral order of the matrix. The spiral order starts from the top-left corner of the matrix and proceeds to the right. When the end of a row is reached, it proceeds downwards along the column, then from right to left along the bottom row, and then upwards along the left column, continuing in a spiral pattern until all elements are covered. **Function Signature:** ```python def spiral_order(matrix: List[List[int]]) -> List[int]: ``` **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] spiral_order(matrix) ``` **Output:** ```python [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` **Constraints:** 1. The input matrix will have dimensions n x n where `1 <= n <= 10^3`. 2. All elements of the matrix will be integers. **Notes:** - You can assume the function will only be called with valid n x n matrices (i.e., no need to handle invalid input). - The function should efficiently handle the given constraints.","solution":"from typing import List def spiral_order(matrix: List[List[int]]) -> List[int]: result = [] if not matrix or not matrix[0]: return result top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"**Function Implementation**: Write a function called `findMostFrequent` that takes a list of integers and returns the integer that appears the most times in the list. If there is a tie for the most frequent element, return any one of the integers that have the highest frequency. If the list is empty, return null. **Examples:** ``` findMostFrequent([1, 3, 3, 3, 2, 2, 2, 4, 4]); // Should return 3 or 2 findMostFrequent([5, 6, 6, 7, 5, 8, 8, 8, 8, 5]); // Should return 8 findMostFrequent([]); // Should return null findMostFrequent([10]); // Should return 10 findMostFrequent([1, 1, 2, 2, 3, 3, 4, 4, 4]); // Should return 4 ``` **Notes:** - You can assume the input list contains only integers and can have negative numbers. - If the list contains elements with the same highest frequency, any one of them can be returned. - The function should handle both positive and negative integers.","solution":"def findMostFrequent(nums): Returns the integer that appears the most times in the list. If there is a tie for the most frequent element, return any one of them. If the list is empty, return None. if not nums: return None frequency = {} for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 most_frequent_num = max(frequency, key=frequency.get) return most_frequent_num"},{"question":"You are given a string that contains a mathematical expression in an infix format. The operators include +, -, *, and /, and the operands are integers only. The expression may contain parentheses to indicate precedence. Your task is to evaluate this expression and return the result as an integer. # Task Write a function `evaluate_expression(expression: str) -> int` that takes a string `expression` representing a mathematical expression in infix notation and returns the evaluated result as an integer. The input expression is a valid mathematical expression and does not contain any spaces. Examples ```python evaluate_expression(\\"3+2*2\\") -> 7 evaluate_expression(\\" 3/2 \\") -> 1 evaluate_expression(\\"(2+6* 3+5- (3*14/7+2)*5)+3\\") -> -12 ``` # Constraints - The input expression will be a non-empty string. - Input strings are guaranteed to be valid mathematical expressions. - Division results should truncate towards zero (e.g., 3/2 should be 1 and -3/2 should be -1). # Note - You may use the `eval` function in the initial implementation, but you should ultimately aim to implement the expression evaluation manually for educational purposes. - Consider operator precedence and associativity when implementing the solution.","solution":"def evaluate_expression(expression: str) -> int: def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return int(a / b) # Handle truncation towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def to_rpn(expression): stack = [] output = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 output.append(num) i -= 1 elif expression[i] == \'(\': stack.append(expression[i]) elif expression[i] == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Removing \'(\' else: while (stack and precedence(stack[-1]) >= precedence(expression[i])): output.append(stack.pop()) stack.append(expression[i]) i += 1 while stack: output.append(stack.pop()) return output def evaluate_rpn(tokens): stack = [] for token in tokens: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() stack.append(operate(a, b, token)) return stack[0] rpn = to_rpn(expression) return evaluate_rpn(rpn)"},{"question":"In a scientific research facility, researchers need to manage their laboratory equipment across multiple departments. Each department has a set of requirements for various types of equipment to be used most efficiently. Each type of equipment has a limited number of units available in the storage. You are given an array of integers representing the types of equipment, each with a specified maximum number of units available. You are also given a list of departmental demands, with each department requiring exactly one unit of a specified type of equipment. Your task is to determine whether it is possible to fulfill all departmental demands with the available equipment. If it is possible, return \\"Yes\\", otherwise return \\"No\\". -----Input----- The first line contains two integers n and m, separated with space — the number of equipment types and the number of departmental demands, respectively (1 leq n, m leq 100,000). The second line contains n integers e_1, ldots, e_n, separated by spaces — e_i is the number of units available for the i-th type of equipment (0 leq e_i leq 10^5). The following m lines each contain an integer d_j (1 leq d_j leq n) — the type of equipment required by the j-th department. -----Output----- Output \\"Yes\\" if it is possible to fulfill all departmental demands, otherwise output \\"No\\". -----Examples----- Input 3 5 3 2 3 1 2 3 1 2 Output Yes Input 2 3 1 1 2 2 2 Output No -----Note----- In the first test, the equipment distribution is as follows: - Department 1 takes one unit of type 1 equipment (remaining: 2 units). - Department 2 takes one unit of type 2 equipment (remaining: 1 unit). - Department 3 takes one unit of type 3 equipment (remaining: 2 units). - Department 4 takes one unit of type 1 equipment (remaining: 1 unit). - Department 5 takes one unit of type 2 equipment (remaining: 0 units). It is possible to fulfill all demands, so the output is \\"Yes\\". In the second test, the demands are for three units of type 2 equipment, but only one unit is available, so the output is \\"No\\".","solution":"def can_fulfill_demands(n, m, equipment, demands): Determines if all departmental demands can be fulfilled with available equipment units. Args: n (int): Number of equipment types. m (int): Number of departmental demands. equipment (List[int]): List of equipment units available for each type. demands (List[int]): List of departmental demands for equipment types. Returns: str: \\"Yes\\" if all demands can be fulfilled, otherwise \\"No\\". available_equipment = equipment[:] for demand in demands: if available_equipment[demand - 1] > 0: available_equipment[demand - 1] -= 1 else: return \\"No\\" return \\"Yes\\""},{"question":"Create a function that takes a string as an input and checks if it contains balanced parentheses. The function should return `True` if the parentheses are balanced and `False` otherwise. ```python # Examples print(is_balanced(\\"(a + b) * (c - d)\\")) # should return True print(is_balanced(\\"((a + b) * (c - d)\\")) # should return False print(is_balanced(\\")a + b(\\")) # should return False # Constraints: # The string will only contain alphabetical characters, spaces, and parentheses. # The length of the input string will not exceed 100 characters. def is_balanced(input_string): # Your code here pass ```","solution":"def is_balanced(input_string): Checks if the input string contains balanced parentheses. Args: input_string (str): The string to check for balanced parentheses. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in input_string: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"# Introduction In the world of text processing, words hold immense power. In this challenge, the words themselves are magical and can influence their surroundings based on their \\"power\\" level. Your task is to process a string and determine the most powerful magical word present. # Task Write a function that takes a string consisting of multiple words separated by spaces. Each word in the string has a power level determined by the sum of the ASCII values of its characters. Return the word with the highest power level. If there are multiple words with the same highest power level, return the one that appears first in the string. # Example ``` Input: \\"hello world here\\" Output: \\"world\\" Input: \\"racecar ready set go\\" Output: \\"racecar\\" ``` # Constraints 1. Each word in the string consists of lowercase letters only. 2. The string will not contain any punctuation, only letters and spaces. 3. The string will always contain at least one word.","solution":"def most_powerful_word(s): Returns the word with the highest power level. Power level is determined by the sum of ASCII values of the characters. If multiple words have the same highest power level, the first such word is returned. words = s.split() def power_level(word): return sum(ord(char) for char in word) max_power = -1 result = \\"\\" for word in words: power = power_level(word) if power > max_power: max_power = power result = word return result"},{"question":"Given a string consisting of words separated by a single space, write a function that reverses the letters of each word individually, while keeping the words in their original order. If the input string is empty, return an empty string. You may assume that the input string does not contain leading, trailing, or consecutive spaces. For example: - Input: `\\"hello world\\"` Output: `\\"olleh dlrow\\"` - Input: `\\"code assessment\\"` Output: `\\"edoc tnemssessa\\"` - Input: `\\"\\"` Output: `\\"\\"`","solution":"def reverse_words_in_string(s): Given a string consisting of words separated by a single space, reverses the letters of each word individually, while keeping the words in their original order. :param s: Input string :return: String with each word\'s letters reversed if not s: return \\"\\" words = s.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given an array of integers, you are allowed to perform a series of at most k operations in which you can either: - Increase any element by 1. - Decrease any element by 1. Your goal is to make all the elements in the array equal using at most k operations. If it\'s possible to make all the elements equal within the given operations, return the number of operations used. If it\'s not possible, return -1. Example: Input: 2 3 3 3 1 Output: 2 Explanation: You can either do the following operations: - (3) 3 1 → 3 3 2 → 3 3 3 with 2 steps - (3) 3 1 → 3 2 1 → 3 3 3 with 2 steps -----Input:----- - The first line contains an integer k, the maximum number of operations allowed. - The second line contains an integer n, denoting the size of the array. - The third line contains n space-separated integers describing the elements of the array. -----Output:----- Single integer which represents the number of operations used to make all elements equal or -1 if it is not possible to make all elements equal within the given operations. -----Constraints:----- - 1 leq k leq 10^9 - 1 leq n leq 100 - -10^9 leq A[i] leq 10^9 -----Sample Input:----- 2 3 3 3 1 -----Sample Output:----- 2","solution":"def min_operations_to_equal_elements(k, arr): This function calculates if it is possible to make all elements in the array equal within `k` operations, and if possible, returns the number of operations used. Otherwise, it returns -1. # Find the maximum and minimum values in the array max_val = max(arr) min_val = min(arr) # Calculate the total operations needed to make all elements equal to max_val total_operations = sum(max_val - x for x in arr) # If the total operations needed is within k, return the total operations if total_operations <= k: return total_operations else: return -1"},{"question":"The gardener at the royal palace has a unique way of planting trees in rows. There are not just any trees, but magical trees where the height of each tree after planting follows a specific pattern based on a sequence of operations. The gardener knows that the height of the tree at position (N) in a row can be determined by the sum of the heights of the previous trees plus some constant values. The gardener needs your help to determine precisely how this sequence is constructed. -----Input:----- - The first line will contain an integer ( S ), the number of sequences you need to evaluate. - Each sequence starts with an integer ( K ) (the number of trees), followed by ( K ) integers which denote the heights of these trees initially. -----Output:----- For each sequence, determine the height of the first tree after all trees are planted, under the assumption that each tree’s height is influenced by the cumulative process described. -----Constraints----- - ( 1 leq S leq 10 ) - ( 1 leq K leq 100,000 ) - Each tree\'s initial height is provided as a non-negative integer not exceeding ( 10^9 ) -----Sample Input:----- 1 5 1 2 3 4 5 -----Sample Output:----- 1 (Note: The height calculation seems straightforward but consider the cumulative nature of the sequence.)","solution":"def determine_first_tree_height(sequences): Determines the height of the first tree for each sequence given the specific rules. Parameters: sequences (list of list of int): A list of sequences, each sequence contains a list where the first element is K, followed by K integers (tree heights) Returns: list of int: The height of the first tree for each sequence results = [] for sequence in sequences: K = sequence[0] heights = sequence[1:] # In this specific problem\'s context, the height of the first tree remains the same # as the initial height given in each sequence. results.append(heights[0]) return results"},{"question":"Given a string `s` and a list of words `word_list`, find all starting indices of substring(s) in `s` that is a concatenation of each word in `word_list` exactly once and without any intervening characters. Example 1: Input: `s = \\"barfoothefoobarman\\"`, `word_list = [\\"foo\\",\\"bar\\"]` Output: `[0,9]` Explanation: Substring starting at index 0 is \\"barfoo\\". Substring starting at index 9 is \\"foobar\\". Example 2: Input: `s = \\"wordgoodgoodgoodbestword\\"`, `word_list = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"]` Output: `[]` Example 3: Input: `s = \\"barfoofoobarthefoobarman\\"`, `word_list = [\\"bar\\",\\"foo\\",\\"the\\"]` Output: `[6,9,12]` Notes: 1. `s` consists of only lowercase English letters. 2. `1 <= s.length <= 10^4` 3. `1 <= word_list.length <= 5000` 4. `1 <= word_list[i].length <= 30`","solution":"def find_substring_indices(s, word_list): if not s or not word_list: return [] word_length = len(word_list[0]) number_of_words = len(word_list) substring_length = word_length * number_of_words word_count = {word: word_list.count(word) for word in word_list} result_indices = [] for i in range(word_length): left = i right = i current_count = {} current_word_count = 0 while right + word_length <= len(s): word = s[right:right + word_length] right += word_length if word in word_count: current_count[word] = current_count.get(word, 0) + 1 current_word_count += 1 while current_count[word] > word_count[word]: left_word = s[left:left + word_length] current_count[left_word] -= 1 current_word_count -= 1 left += word_length if current_word_count == number_of_words: result_indices.append(left) else: current_count = {} current_word_count = 0 left = right return result_indices"},{"question":"Write a function that takes a list of integers and returns a sublist containing only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For instance, 2, 3, and 5 are prime numbers, while 4 and 6 are not. **Requirements:** - Your function should be able to handle an empty list and return an empty list in such cases. - If there are no prime numbers in the list, return an empty list. For example: - Input: [10, 2, 3, 4, 5, 6] - Output: [2, 3, 5] **Note:** Consider optimizing your function for larger lists of numbers.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_prime_numbers(lst): Returns a sublist containing only the prime numbers from the original list. return [x for x in lst if is_prime(x)]"},{"question":"Design a class named `RomanNumeralConverter` in Python that can convert an integer to a Roman numeral and vice versa. The class should be able to handle integers from 1 to 3999 inclusive. Implement the following methods: 1. `__init__(self)`: Initializes any required data structures. 2. `to_roman(self, number: int) -> str`: Converts an integer to a Roman numeral. 3. `from_roman(self, roman: str) -> int`: Converts a Roman numeral to an integer. # Roman Numerals | Value | Numeral | | Value | Numeral | |-------|---------|--------|-------|---------| | 1 | I | | 1000 | M | | 4 | IV | | 900 | CM | | 5 | V | | 500 | D | | 9 | IX | | 400 | CD | | 10 | X | | 100 | C | | 40 | XL | | 90 | XC | | 50 | L | | 10 | X | | 90 | XC | | 9 | IX | | 100 | C | | 5 | V | | 400 | CD | | 4 | IV | | 500 | D | | 1 | I | | 900 | CM | | | | | 1000 | M | | | | # Example Usage: ```python converter = RomanNumeralConverter() assert converter.to_roman(1990) == \'MCMXC\' assert converter.to_roman(48) == \'XLVIII\' assert converter.from_roman(\'MCMXC\') == 1990 assert converter.from_roman(\'XLVIII\') == 48 ``` # Notes: - You may assume that `from_roman` will always be provided with a valid Roman numeral in the context of this problem. - Your implementation should be efficient and avoid unnecessary computations.","solution":"class RomanNumeralConverter: def __init__(self): self.roman_to_int_map = { \'M\': 1000, \'CM\': 900, \'D\': 500, \'CD\': 400, \'C\': 100, \'XC\': 90, \'L\': 50, \'XL\': 40, \'X\': 10, \'IX\': 9, \'V\': 5, \'IV\': 4, \'I\': 1 } self.int_to_roman_map = {v: k for k, v in self.roman_to_int_map.items()} self.values = sorted(self.int_to_roman_map.keys(), reverse=True) def to_roman(self, number: int) -> str: roman_numeral = [] for value in self.values: while number >= value: roman_numeral.append(self.int_to_roman_map[value]) number -= value return \'\'.join(roman_numeral) def from_roman(self, roman: str) -> int: i = 0 num = 0 while i < len(roman): if i + 1 < len(roman) and roman[i:i+2] in self.roman_to_int_map: num += self.roman_to_int_map[roman[i:i+2]] i += 2 else: num += self.roman_to_int_map[roman[i]] i += 1 return num"},{"question":"Ava is fascinated by matrices, especially by their properties and transformations. One day, she came across the concept of symmetrical matrices and wanted to determine how many such matrices exist within a certain range. A matrix is considered symmetrical if it satisfies the following property for all elements: Matrix[i,j] = Matrix[j,i] Ava wants to count the number of symmetrical matrices of size N x N where the elements of the matrix are integers between 1 and M, inclusive. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case is described in one line containing two integers: N denoting the size of the matrix and M denoting the range of matrix elements. -----Output----- - For each test case, output a single line containing one integer denoting the number of symmetrical matrices that can be formed. -----Constraints----- - 1 ≤ T ≤ 104 - 1 ≤ N ≤ 10 - 1 ≤ M ≤ 5 -----Example----- Input: 2 2 3 3 2 Output: 27 64 -----Explanation----- Example case 1. For a 2x2 symmetrical matrix where the elements range between 1 and 3, we can represent it as: [[a, b], [b, c]] Each element can be 1, 2, or 3. The total number of symmetrical matrices is 3 (a choices) * 3 (b choices) * 3 (c choices) = 27. Example case 2. For a 3x3 symmetrical matrix where the elements range between 1 and 2, we can represent it as: [[a, b, c], [b, d, e], [c, e, f]] Each element can be 1 or 2. The total number of symmetrical matrices is 2^6 (a through f choices) = 64.","solution":"def count_symmetrical_matrices(N, M): Determines the number of symmetrical N x N matrices where the elements of the matrix are integers between 1 and M, inclusive. import math # Calculating the number of unique elements needed for a symmetrical matrix unique_elements = (N * (N + 1)) // 2 return M ** unique_elements def solve_symmetrical_matrices(T, cases): results = [] for case in cases: N, M = case results.append(count_symmetrical_matrices(N, M)) return results"},{"question":"Write a function that takes two arguments: a string and a character. The function should return the indices of all occurrences of the character in the string. Example: ```python find_indices(\\"Google\\", \'o\') # => [1, 2] find_indices(\\"banana\\", \'a\') # => [1, 3, 5] ```","solution":"def find_indices(s, char): Returns a list of indices where the character char occurs in the string s. return [i for i, c in enumerate(s) if c == char]"},{"question":"=====Function Descriptions===== collections.Counter() A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. It is used to keep track of the frequencies of elements in an iterable. Example Code >>> from collections import Counter >>> c = Counter() >>> c = Counter(\'gallahad\') >>> print c Counter({\'a\': 3, \'l\': 2, \'g\': 1, \'h\': 1, \'d\': 1}) >>> print c[\'a\'] 3 >>> print c[\'x\'] 0 >>> c.update(\'aaaaa\') >>> print c Counter({\'a\': 8, \'l\': 2, \'g\': 1, \'h\': 1, \'d\': 1}) >>> c.subtract(\'aag\') >>> print c Counter({\'a\': 6, \'l\': 2, \'h\': 1, \'d\': 1, \'g\': 0}) >>> c.most_common(3) [(\'a\', 6), (\'l\', 2), (\'h\', 1)] =====Problem Statement===== Perform update, subtract, and most_common methods on a Counter c, initialized with an empty string. =====Input Format===== The first line contains an integer M, the number of operations. The next M lines contains the space separated names of methods and their values. For methods that do not take values (like most_common), the number of elements to return is given. =====Constraints===== 0<M≤100 =====Output Format===== For each most_common method used, print the elements along with their counts separated by spaces in a new line. Example: Input: 5 update gallahad update aaaaa subtract aag most_common 3 subtract had Output: a 8 l 2 h 1","solution":"from collections import Counter def perform_operations(M, operations): c = Counter() result = [] for operation in operations: op = operation.split() if op[0] == \'update\': c.update(op[1]) elif op[0] == \'subtract\': c.subtract(op[1]) elif op[0] == \'most_common\': most_common_elements = c.most_common(int(op[1])) result.append(\' \'.join(f\\"{elem} {count}\\" for elem, count in most_common_elements)) return result"},{"question":"Maria is working on a custom sorting algorithm for her digital photo collection. Each photo has a unique ID and a quality score associated with it. Maria\'s goal is to dynamically change the quality score of a photo and maintain a sorted order of photos quickly based on these quality scores. The photo with the highest quality score should be at the front of the collection, and if two photos have the same quality score, they should be sorted by their IDs in ascending order. Your task is to help Maria by implementing a program that supports the following operations: 1. **Update** - Change the quality score of a specified photo. 2. **Query** - Determine the ID of the photo currently at the `k`-th position in the sorted list based on the quality scores. Write a program to process these operations efficiently. -----Input---- The first line contains two integers n and q (1 leq n, q leq 200 000) - the number of photos and the number of operations, respectively. The second line contains n integers, where the i-th integer is the initial quality score of the i-th photo (1 leq quality_i leq 10^{6}). Each of the following q lines describes an operation and has the following two formats: - `1 i x` - Update the quality score of the i-th photo to x (1 leq i leq n, 1 leq x leq 10^{6}). - `2 k` - Query the ID of the photo currently at the `k`-th position in the sorted list (1 leq k leq n). -----Output----- For each query of type 2, print the result on a new line. -----Example----- Input 5 4 4 3 2 5 1 1 3 6 2 1 2 5 1 2 7 Output 3 5 -----Explanation----- Initial quality scores: Photo 1: 4, Photo 2: 3, Photo 3: 2, Photo 4: 5, Photo 5: 1. After the first update, the quality scores become: Photo 1: 4, Photo 2: 3, Photo 3: 6, Photo 4: 5, Photo 5: 1. The sorted order is Photo 3 > Photo 4 > Photo 1 > Photo 2 > Photo 5. Query 1: The photo at position 1 (highest quality score) is Photo 3 with a quality score of 6. Query 2: The photo at position 5 (lowest quality score) is Photo 5 with a quality score of 1. After the second update, the quality scores become: Photo 1: 4, Photo 2: 7, Photo 3: 6, Photo 4: 5, Photo 5: 1. The sorted order is Photo 2 > Photo 3 > Photo 4 > Photo 1 > Photo 5.","solution":"from bisect import insort_left class PhotoCollection: def __init__(self, qualities): self.qualities = qualities self.sorted_photos = sorted((q, i + 1) for i, q in enumerate(qualities)) def update(self, i, x): old_quality = self.qualities[i - 1] photo_id = (old_quality, i) self.qualities[i - 1] = x # Remove old entry self.sorted_photos.remove(photo_id) # Insert new entry new_photo_id = (x, i) insort_left(self.sorted_photos, new_photo_id) def query(self, k): return self.sorted_photos[-k][1] # Function to process commands def process_commands(n, q, qualities, commands): photo_collection = PhotoCollection(qualities) results = [] for command in commands: if command[0] == 1: _, i, x = command photo_collection.update(i, x) elif command[0] == 2: _, k = command results.append(photo_collection.query(k)) return results"},{"question":"Write a function that takes an integer as input and returns the next prime palindrome greater than the given integer. A prime palindrome is a number that is both a prime number and a palindrome. For example, the next prime palindrome after 31 is 101. If the input number itself is a prime palindrome, return the next one after it. Ensure the function is optimized for performance to handle large input values.","solution":"def is_prime(n): if n < 2: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): return str(n) == str(n)[::-1] def next_prime_palindrome(n): n += 1 while not (is_prime(n) and is_palindrome(n)): n += 1 return n"},{"question":"You need to complete the function `find_palindromic_substrings`. Given a string `s`, this function should count and return the number of distinct palindromic substrings present in it. A palindrome is a string that reads the same backward as forward. Two substrings are considered different if they start or end at different positions in the string, even if they consist of identical characters. For example, if the input string is \\"ababa\\", the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", meaning there are 4 distinct palindromic substrings. Note: The input string will consist of lowercase English letters only and its length will be no greater than 1000.","solution":"def find_palindromic_substrings(s): Counts and returns the number of distinct palindromic substrings in the given string s. palindromes = set() def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.add(s[left:right+1]) left -= 1 right += 1 for i in range(len(s)): expand_from_center(i, i) # Odd length palindromes expand_from_center(i, i + 1) # Even length palindromes return len(palindromes)"},{"question":"You are given two parameters, `students` (an array of dictionaries) and `subject` (a string). Each dictionary in `students` contains the name of a student and their grades in various subjects in the form of key-value pairs. Your task is to find the average grade for the given subject across all students. If the subject does not exist for any student, consider their grade as 0 for that subject. Round the average grade to two decimal places. For example, given the `students` array: ```python [ {\\"name\\": \\"Alice\\", \\"Math\\": 95, \\"English\\": 85}, {\\"name\\": \\"Bob\\", \\"Math\\": 75, \\"Science\\": 90}, {\\"name\\": \\"Clara\\", \\"Math\\": 60}, {\\"name\\": \\"David\\", \\"English\\": 92} ] ``` and `subject` as `\\"Math\\"`, the average grade for Math should be calculated as follows: - Alice\'s Math grade is 95 - Bob\'s Math grade is 75 - Clara\'s Math grade is 60 - David\'s Math grade is 0 (as he does not have Math in his dictionary) The average Math grade is `(95 + 75 + 60 + 0) / 4 = 57.5` Your function should return `57.5` in this case. If the `students` array is empty, return `0.00`. ```python def average_grade(students, subject): # your code here ```","solution":"def average_grade(students, subject): Returns the average grade for the given subject across all students. If the subject does not exist for any student, consider their grade as 0 for that subject. Round the average grade to two decimal places. total = 0 count = len(students) if count == 0: return 0.00 for student in students: total += student.get(subject, 0) average = total / count return round(average, 2)"},{"question":"Given an unsorted integer array, find the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space. Examples: Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1 Constraints: - The array can contain any integers including negative numbers. - The size of the array can be between 0 and 300.","solution":"def first_missing_positive(nums): Finds the smallest missing positive integer from an unsorted array. This function runs in O(n) time and uses constant extra space. n = len(nums) # Move every positive integer to its correct position for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Identify the first position where the index does not match the value for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Note: This question carries 150 points Alice is taking part in a coding competition and facing a new challenge. She needs to manipulate arrays to meet certain conditions. Given an array of integers and a number K, Alice needs to transform the array so that no integer in the array is repeated more than K times. If this condition cannot be satisfied, she must identify the first position in the array where the condition fails. Help Alice by writing a function that receives an array of integers and an integer K, and outputs a modified array meeting the conditions if possible. If it\'s not possible, return the 1-based index of the first violation. -----Input :----- - First line contains T, the number of test cases. - Each of the following T lines contains two parts: - An integer K. - An array of integers separated by spaces. -----Output :----- - For each test case, print the modified array if the conditions are met. - If the condition cannot be met, print the position of the first violation. -----Constraints :----- - 1 ≤ T ≤ 100 - 1 ≤ |array| ≤ 1000 - -10^6 ≤ array[i] ≤ 10^6 - 1 ≤ K ≤ 100 -----Sample Input :----- 3 2 1 2 3 4 1 2 3 4 5 1 1 1 2 2 3 3 4 4 5 3 1 1 1 1 2 2 3 3 3 3 -----Sample Output :----- 1 2 3 4 1 2 3 4 5 2 1 1 1 2 2 3 3 4 4 5","solution":"def transform_array(k, array): Transform the array so that no integer in the array is repeated more than K times. If this condition cannot be satisfied, return the 1-based index of the first violation. Parameters: k (int): Maximum allowed repetitions for each integer. array (list): List of integers to be transformed. Returns: list or int: Transformed list, or the 1-based index of the first violation. from collections import defaultdict frequency = defaultdict(int) for index, num in enumerate(array): frequency[num] += 1 if frequency[num] > k: return index + 1 return array def process_test_cases(input_data): Process multiple test cases according to the problem specifications. Parameters: input_data (list of tuple): Contains test cases where each tuple has an integer K and a list representing the array. Returns: list: List of results for each test case. results = [] for k, array in input_data: result = transform_array(k, array) results.append(result) return results"},{"question":"In a simple encryption system, each letter in the plaintext message is shifted a certain number of places down the alphabet. For example, with a shift of 3, \'A\' would be replaced by \'D\', \'B\' would become \'E\', and so on. This is known as a Caesar Cipher. The alphabet is treated as circular, so if the shift moves a letter past \'Z\', it wraps around to the beginning of the alphabet. For example, with a shift of 3, \'X\' would become \'A\', \'Y\' would become \'B\', and \'Z\' would become \'C\'. Your Task Write a function `caesar_cipher` that takes a string and an integer shift value, and returns the encrypted message using the Caesar Cipher. Function Signature ```python def caesar_cipher(s: str, shift: int) -> str: ``` # Input - `s` (string): The plaintext message containing only uppercase alphabetic characters (A-Z). - `shift` (integer): The number of places to shift each letter (0 ≤ shift ≤ 25). # Output - Returns the encrypted message as a string. # Examples ```python caesar_cipher(\\"HELLO\\", 3) # Returns \\"KHOOR\\" caesar_cipher(\\"ABCXYZ\\", 4) # Returns \\"EFGBCD\\" caesar_cipher(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\", 1) # Returns \\"BCDEFGHIJKLMNOPQRSTUVWXYZA\\" ``` Good luck and happy coding!","solution":"def caesar_cipher(s: str, shift: int) -> str: Encrypts the given plaintext message using the Caesar Cipher with the specified shift. Parameters: s (str): The plaintext message containing only uppercase alphabetic characters (A-Z). shift (int): The number of places to shift each letter (0 ≤ shift ≤ 25). Returns: str: The encrypted message as a string. encrypted_message = [] for char in s: new_char = chr(((ord(char) - ord(\'A\') + shift) % 26) + ord(\'A\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Reverse each word in a sentence = Write a function that takes a string as input and returns the string with each word reversed, but the words are still in their original order. Words are separated by spaces, and there are no punctuation marks in the input. For example: ```python \\"hello world\\" ``` The function should return: ```python \\"olleh dlrow\\" ``` Another example: ```python \\"coding is fun\\" ``` The function should return: ```python \\"gnidoc si nuf\\" ``` Make sure to handle multiple spaces between words. For instance: ```python \\"how are you\\" ``` Should become: ```python \\"woh era uoy\\" ```","solution":"def reverse_each_word(sentence): Reverses each word in a given sentence while keeping the original order of words. Arguments: sentence -- Input sentence string. Returns: A string with each word reversed but the order of words maintained. # Split the sentence on spaces words = sentence.split(\' \') # Reverse each word and join them back with a space reversed_words = [word[::-1] for word in words] # Join the list back into a single string return \' \'.join(reversed_words)"},{"question":"Given a list of integers, write a function to return a list containing all the unique pairs of integers whose sum is equal to a given target value. The pairs should be listed in ascending order based on their first element, and within each pair, the numbers should be in ascending order. Example: Input: nums = [1, 3, 2, 2, 4, 3, 5], target = 5 Output: [[1, 4], [2, 3]] Note: 1. Each pair should be represented as a list of two numbers. 2. If there are multiple pairs with the same numbers but different orders, they should be considered as one. 3. The input list may contain duplicate numbers, but each pair should consist of unique elements from the list.","solution":"def find_pairs(nums, target): Returns a list of unique pairs of integers from the given list `nums` that sum up to `target`. The pairs are sorted in ascending order based on their first element, and within each pair, the numbers are in ascending order. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted([list(pair) for pair in pairs])"},{"question":"Write a function `box_area_diff(n: int) -> int` that takes an integer `n` representing the side length of a simple cubic box and returns the difference between the sums of the surface areas of the smallest inscribed sphere and the largest inscribed sphere. In a cubic box with side length `n`, the radius of the largest inscribed sphere is half of the side length of the cube, i.e., `n/2`. The radius of the smallest inscribed sphere is determined such that the sphere just touches the diagonal of the cube, calculated by `n/(2√3)` since the diagonal can be found by `√3 * radius_diagonal` where radius_diagonal is the radius of the smallest inscribed sphere. Recall that the surface area `A` of a sphere is given by `4 * π * r^2`. For example: ```python box_area_diff(1) == 4π - 4π / 3 box_area_diff(2) == 16π - 4(√3)π ``` Note: Always return the result as a plain integer and use π as 3.14159 for your calculations.","solution":"import math def box_area_diff(n: int) -> int: Calculate the difference between the sums of the surface areas of the largest inscribed sphere and the smallest inscribed sphere in a cube of side length `n`. The radius of the largest inscribed sphere is `n/2`. The radius of the smallest inscribed sphere is `n/(2√3)`. The surface area of a sphere is given by `4 * π * r^2`. pi = 3.14159 r_largest = n / 2 r_smallest = n / (2 * math.sqrt(3)) area_largest = 4 * pi * (r_largest ** 2) area_smallest = 4 * pi * (r_smallest ** 2) return round(area_largest - area_smallest)"},{"question":"# Task You are given two arrays of the same length, `points` and `queries`. The `points` array contains the coordinates of some points on a 2D plane, where `points[i] = [xi, yi]`. The `queries` array contains some queries, where each query is represented as `[xj, yj, rj]`. For each query, you need to determine the number of points that lie inside the circle centered at `(xj, yj)` with radius `rj` (inclusive of the circle boundary). # Example For `points = [[1, 3], [3, 3], [5, 3], [2, 2]]` and `queries = [[2, 3, 1], [4, 3, 1], [1, 1, 2]]`, the output should be `[3, 2, 2]`. **Explanation:** - The 1st query circle has its center at (2, 3) and a radius of 1. The points that are inside or on the boundary of this circle are (1, 3), (3, 3), and (2, 2). - The 2nd query circle has its center at (4, 3) and a radius of 1. The points that are inside or on the boundary of this circle are (3, 3) and (5, 3). - The 3rd query circle has its center at (1, 1) and a radius of 2. The points that are inside or on the boundary of this circle are (1, 3) and (2, 2). # Input/Output - `[input]` array of integer arrays `points` Array of points on a 2D plane. Constraints: `1 ≤ points.length ≤ 100,` `points[i].length = 2,` `0 ≤ points[i][0], points[i][1] ≤ 500.` - `[input]` array of integer arrays `queries` Array of queries where each query is represented by the center and radius of a circle. Constraints: `1 ≤ queries.length ≤ 100,` `queries[i].length = 3,` `0 ≤ queries[i][0], queries[i][1] ≤ 500,` `1 ≤ queries[i][2] ≤ 500.` - `[output]` an integer array Array of integers where the ith element is the number of points inside or on the boundary of the circle defined by the ith query.","solution":"import math def count_points_in_circles(points, queries): For each query, count how many points lie inside or on the boundary of the circle defined by the query. Parameters: points (list of list of int): A list of [xi, yi] coordinates of points. queries (list of list of int): A list of [xj, yj, rj] where each defines a circle query. Returns: list: A list of integers counting the points inside each circle query. result = [] for xj, yj, rj in queries: count = 0 rj_squared = rj ** 2 for xi, yi in points: # Calculate the squared distance to avoid computing the square root distance_squared = (xi - xj) ** 2 + (yi - yj) ** 2 if distance_squared <= rj_squared: count += 1 result.append(count) return result"},{"question":"Design an algorithm to rotate an `n x n` 2D matrix 90 degrees clockwise. You have to do this in-place, meaning you have to modify the input matrix directly. Do not allocate another matrix for the rotation. Example 1: Input: [ [1,2,3], [4,5,6], [7,8,9] ] Output: [ [7,4,1], [8,5,2], [9,6,3] ] Example 2: Input: [ [5, 1, 9,11], [2, 4, 8,10], [13,3, 6, 7], [15,14,12,16] ] Output: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]","solution":"def rotate(matrix): Rotates the input matrix 90 degrees clockwise in place. :param matrix: List[List[int]], the nxn 2D matrix to be rotated n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Implement a class MovieRatings, which has the following API: MovieRatings() constructs an instance of MovieRatings with no initial movie ratings; void addRating(String movieTitle, double rating) updates the rating for the given movie title, allowing multiple ratings for a single title; Double getRating(String movieTitle) returns the average rating for the given movie title, or null if there are no ratings yet for that movie; List<String> getTopRatedMovies(int N) returns the titles of the top N movies sorted by their average ratings in descending order. If there are multiple movies with the same average rating, return them in lexicographical order; Example: MovieRatings movieRatings = new MovieRatings(); movieRatings.addRating(\\"Inception\\", 4.8); movieRatings.addRating(\\"Inception\\", 4.6); movieRatings.addRating(\\"Interstellar\\", 4.9); movieRatings.addRating(\\"Interstellar\\", 5.0); movieRatings.addRating(\\"Dunkirk\\", 4.2); System.out.println(movieRatings.getRating(\\"Inception\\")); // returns 4.7 System.out.println(movieRatings.getRating(\\"Interstellar\\")); // returns 4.95 System.out.println(movieRatings.getRating(\\"Dunkirk\\")); // returns 4.2 System.out.println(movieRatings.getTopRatedMovies(2)); // returns [\\"Interstellar\\", \\"Inception\\"] System.out.println(movieRatings.getTopRatedMovies(1)); // returns [\\"Interstellar\\"] Constraints: - Movie titles are unique strings containing only letters, and their length does not exceed 100 characters. - Rating values are between 1.0 and 5.0 inclusive. - 1 <= N <= 100 - The number of ratings added is at most 10000.","solution":"class MovieRatings: def __init__(self): self.ratings = {} def addRating(self, movieTitle, rating): if movieTitle not in self.ratings: self.ratings[movieTitle] = [] self.ratings[movieTitle].append(rating) def getRating(self, movieTitle): if movieTitle not in self.ratings: return None ratings_list = self.ratings[movieTitle] return sum(ratings_list) / len(ratings_list) def getTopRatedMovies(self, N): avg_ratings = {} for movie, ratings in self.ratings.items(): avg_ratings[movie] = sum(ratings) / len(ratings) sorted_movies = sorted(avg_ratings.items(), key=lambda x: (-x[1], x[0])) return [movie for movie, rating in sorted_movies[:N]] # Example usage # movieRatings = MovieRatings() # movieRatings.addRating(\\"Inception\\", 4.8) # movieRatings.addRating(\\"Inception\\", 4.6) # movieRatings.addRating(\\"Interstellar\\", 4.9) # movieRatings.addRating(\\"Interstellar\\", 5.0) # movieRatings.addRating(\\"Dunkirk\\", 4.2) # print(movieRatings.getRating(\\"Inception\\")) # returns 4.7 # print(movieRatings.getRating(\\"Interstellar\\")) # returns 4.95 # print(movieRatings.getRating(\\"Dunkirk\\")) # returns 4.2 # print(movieRatings.getTopRatedMovies(2)) # returns [\\"Interstellar\\", \\"Inception\\"] # print(movieRatings.getTopRatedMovies(1)) # returns [\\"Interstellar\\"]"},{"question":"You are given an array of integers `nums` and an integer `k`. A sliding window of size `k` moves from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Your task is to return the maximum element in the window for each position it slides through the array. Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window positions: Max ----------------------------------- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Example 2: Input: nums = [9,11], k = 2 Output: [11] Explanation: Window positions: Max -------------------------- [9, 11] 11 Note: 1 <= k <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"from collections import deque def max_sliding_window(nums, k): Returns a list of the maximum elements in the sliding window of size k for each position the window slides through the array. if not nums or k == 0: return [] n = len(nums) deq = deque() result = [] for i in range(n): # Remove elements not in the window while deq and deq[0] < i - k + 1: deq.popleft() # Remove smaller elements in k range as they are useless while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add new element index deq.append(i) # Append the max value in current window to result if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Develop a function that takes a string of words and returns the length of the shortest word. For the purpose of this kata, a word is defined as a contiguous string of alphabetic characters. Consider `a` as the shortest word. Requirements: - The function should be case insensitive. - Spaces, punctuation, and other non-alphabetic characters should be ignored in identifying words. - Don\'t worry about input validation as you can assume the input is always a string. Examples: ```python # Example 1 Input: \\"The quick brown fox jumps over the lazy dog\\" Output: 3 Explanation: The shortest word in the input string is \\"The\\", \\"fox\\", or \\"dog\\", each of which has a length of 3. # Example 2 Input: \\"A journey of a thousand miles begins with a single step\\" Output: 1 Explanation: The shortest word in the input string is \\"A\\", \\"a\\", both having a length of 1. # Example 3 Input: \\"Do or do not. There is no try!\\" Output: 2 Explanation: The shortest word in the input string is \\"Do\\", \\"or\\", both having a length of 2. ``` Note: - Make sure your solution handles strings with mixed case (upper and lower) properly. - Ignore punctuation or special characters when counting lengths of words. - Ensure the function runs efficiently for longer strings. ```python def find_shortest_word_length(s: str) -> int: import re words = re.findall(r\'b[a-zA-Z]+b\', s.lower()) if words: return min(len(word) for word in words) return 0 ```","solution":"def find_shortest_word_length(s: str) -> int: Returns the length of the shortest word in the string s. A word is defined as a contiguous string of alphabetic characters. import re # Find all words in the string words = re.findall(r\'b[a-zA-Z]+b\', s.lower()) # If there are words, return the length of the shortest one if words: return min(len(word) for word in words) # In case there are no words, return 0 return 0"},{"question":"A peak element in an array is an element that is greater than its neighbors. Given an array of integers, your task is to find the index of any one of its peak elements. The array may contain multiple peaks, and you are required to return the index of any one of such peaks. - An element at index `i` is a peak if: * `array[i] > array[i-1]` for `i > 0` * `array[i] > array[i+1]` for `i < array.length - 1` If the array contains only one element, that element is considered a peak. # Examples: ``` [1, 3, 20, 4, 1, 0] => 2 or 3 (20 is greater than 3 and 4; 4 is greater than 1 and 20) [10, 20, 15, 2, 23, 90, 67] => 1 or 5 (20 is greater than 10 and 15; 90 is greater than 23 and 67) [1, 2, 3, 4, 5] => 4 (5 is greater than 4 and 3) [5, 4, 3, 2, 1] => 0 (5 is greater than 4) [1] => 0 (Only one element which is the peak) ``` Write a function named `findPeakElement`/`find_peak_element()`/`FindPeakElement()` that returns the index of a peak element. If the array contains multiple peaks, return the index of any peak element.","solution":"def find_peak_element(nums): Finds the index of a peak element in an array. n = len(nums) # If there\'s only one element, it\'s a peak if n == 1: return 0 start, end = 0, n - 1 while start < end: mid = (start + end) // 2 if nums[mid] < nums[mid + 1]: start = mid + 1 else: end = mid return start"},{"question":"You are given a list of integers representing the prices of different items in a store. You have a fixed budget and want to buy two items such that their total cost is as close to the budget as possible without exceeding it. If no two items can be purchased without exceeding the budget, you should return -1. Input: - The first line of the input contains a single integer T denoting the number of test cases. The description of each test case follows: - The first line of each test case contains two integers n and B, where n is the number of items in the store, and B is the budget. - The second line contains n space-separated integers p1, p2, ..., pn, where pi denotes the price of the i-th item. Output: - For each test case, output the maximum possible sum of the prices of two items that is less than or equal to the budget. If no such pair exists, output -1. Constraints: - 1 ≤ T ≤ 10 - 2 ≤ n ≤ 100 - 1 ≤ B, pi ≤ 10^4 Example Input: 2 5 10 1 3 5 7 9 4 8 4 4 4 4 Example Output: 10 8 Explanation: First Case: The best pair is 3 and 7, which sums to 10, exactly matching the budget. Second Case: The best pair is any two 4s, summing to 8, which is exactly the budget.","solution":"def max_sum_under_budget(T, test_cases): results = [] for i in range(T): n, B = test_cases[i][0] prices = test_cases[i][1] max_sum = -1 for j in range(n): for k in range(j + 1, n): total = prices[j] + prices[k] if total <= B and total > max_sum: max_sum = total results.append(max_sum) return results"},{"question":"You are given two strings `s` and `t`, both containing only lowercase alphabetical characters. Your task is to determine the minimum number of operations required to convert string `s` into string `t`, where the only allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character These are the classic edit distance operations. Write a function `edit_distance(s, t)` that returns an integer representing the minimum number of operations required. For example: ``` edit_distance(\\"kitten\\", \\"sitting\\") = 3, because the following changes are needed: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end ``` ``` edit_distance(\\"flaw\\", \\"lawn\\") = 2, because the following changes are needed: 1. Replace \'f\' with \'l\' 2. Append \'n\' at the end ```","solution":"def edit_distance(s, t): Returns the minimum number of edit operations required to convert string s into string t. m, n = len(s), len(t) # Initialize a (m+1) x (n+1) matrix to store results of subproblems dp = [[0] * (n+1) for _ in range(m+1)] # Fill dp array for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j # Min operations = j (insert all characters of t) elif j == 0: dp[i][j] = i # Min operations = i (remove all characters of s) elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # Characters match, no new operations needed else: dp[i][j] = 1 + min(dp[i-1][j], # Delete dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given an n x n grid, where each cell represents a certain number of coins. You need to collect coins starting from the top-left corner of the grid to the bottom-right corner, moving only right or down at each step. Your goal is to find the maximum number of coins you can collect along a path from the top-left to the bottom-right corner. -----Input----- The first line contains a single integer T <= 50, the number of test cases. For each test case, the first line contains a single integer n (1 <= n <= 100), size of the grid. Each of the next n lines contains n space-separated integers representing the coins in each cell of the grid. -----Output----- For each test case, output a single line containing the maximum number of coins that can be collected. -----Example----- Input: 2 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 Output: 29 8 -----Explanation----- In the first test case, the best path to collect the maximum number of coins is: 1 → 4 → 7 → 8 → 9, collecting a total of 29 coins. In the second test case, the best path is: 1 → 3 → 4, collecting a total of 8 coins.","solution":"def maximum_coins(T, test_cases): results = [] for t in range(T): grid = test_cases[t] n = len(grid) # Create a dp array with the same dimensions as grid initialized to zero dp = [[0] * n for _ in range(n)] # Fill in the dp array with the maximum path sums dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] dp[0][i] = dp[0][i - 1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) results.append(dp[-1][-1]) return results"},{"question":"Given a list of integers, determine whether the sum of its elements is odd or even. Return \\"odd\\" or \\"even\\" accordingly. Example 1: Input: [3, 1, 4, 1, 5] Output: \\"even\\" Example 2: Input: [2, 4, 6, 1] Output: \\"odd\\" Note: - An empty list should be considered as having an even sum (i.e., the sum is 0).","solution":"def odd_or_even(lst): Determines whether the sum of elements in the list is odd or even. Args: lst (list): A list of integers. Returns: str: \\"odd\\" if the sum is odd, \\"even\\" if the sum is even. total_sum = sum(lst) if total_sum % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Write a function that takes a string and an integer `N` as parameters, and returns a new string consisting of every `N`th character from the original string. For example, given the following code: ``` extractNthChar(\\"abcdefghijk\\", 3) ``` The result should be: ``` \\"cfi\\" ```","solution":"def extractNthChar(s, N): Returns a string consisting of every Nth character from the given string s. Parameters: s (str): The original string. N (int): The interval for selecting characters. Returns: str: A new string consisting of every Nth character from s. return s[N-1::N]"},{"question":"Evelyn has an array of integers and wants to reorder it to form a potential binary search tree (BST). A binary search tree is a binary tree in which each node has a value such that: - The value of all the nodes in the left subtree is less than the value of the current node. - The value of all the nodes in the right subtree is more than the value of the current node. Given an array of distinct integers, determine if it is possible to reorder the array to create a binary search tree following the above rules. -----Input----- The first line contains an integer n (1 leq n leq 100,000) — the size of the array. The second line contains n distinct integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- If it is possible to reorder the array to form a binary search tree, in the first line print \\"YES\\". In the second line, output any one valid permutation of the array that can be used to build such a tree. If there are multiple solutions, output any of them. If it is not possible, print \\"NO\\". -----Examples----- Input 3 2 1 3 Output YES 2 1 3 Input 4 8 5 7 4 Output NO Input 5 3 2 1 5 4 Output YES 3 2 1 5 4","solution":"def can_form_bst(n, array): Determines if the given array can be reordered to form a binary search tree. Returns \\"YES\\" and one possible permutation if it can, otherwise \\"NO\\". if n == 1: return (\\"YES\\", array) # A single node can always form a BST sorted_array = sorted(array) return (\\"YES\\", sorted_array) # Example usage: # n = 3 # array = [2, 1, 3] # result = can_form_bst(n, array) # print(result)"},{"question":"For a given integer array \\"nums\\" and an integer \\"k\\", determine the maximum number of unique elements in any contiguous subarray of \\"nums\\" of length \\"k\\". Assume \\"k\\" is an integer between 1 and the length of \\"nums\\". Example: nums = [1, 2, 2, 3, 4], k = 3 There are three subarrays of length 3: 1. [1, 2, 2] which has 2 unique elements (1 and 2) 2. [2, 2, 3] which has 2 unique elements (2 and 3) 3. [2, 3, 4] which has 3 unique elements (2, 3, and 4) So, the answer is 3 nums = [4, 2, 1, 3, 4, 5], k = 4 There are three subarrays of length 4: 1. [4, 2, 1, 3] which has 4 unique elements (4, 2, 1, and 3) 2. [2, 1, 3, 4] which has 4 unique elements (2, 1, 3, and 4) 3. [1, 3, 4, 5] which has 4 unique elements (1, 3, 4, and 5) So, the answer is 4","solution":"def max_unique_in_subarrays(nums, k): Determines the maximum number of unique elements in any contiguous subarray of `nums` of length `k`. max_unique = 0 for i in range(len(nums) - k + 1): unique_elements = set(nums[i:i + k]) max_unique = max(max_unique, len(unique_elements)) return max_unique"},{"question":"You are a computer science department head responsible for staffing classes with teaching assistants (TAs). Each class requires a certain number of TAs, and each TA can only be assigned to one class per semester. The goal is to determine whether it is possible to meet the TA needs for all classes. You are given a list of integers where each integer represents the number of TAs required for a particular class. You are also given the total number of TAs available and the number of classes. Write a function that determines if it is possible to assign TAs to classes such that every class has the required number of TAs, and print the result for each case. -----Input----- The first line contains a single integer T (1 le T le 100), the number of test cases. For each test case: - The first line contains two integers N (1 le N le 100) and M (0 le M le 10000): the number of classes and the total number of TAs available. - The second line contains N space-separated integers a_1, a_2, ldots, a_N (0 le a_i le 100): the number of TAs required for each class. -----Output----- For each test case, print \\"Possible\\" if it is possible to assign TAs to meet the needs of all classes. Print \\"Impossible\\" otherwise. -----Example----- Input 3 3 10 3 3 4 2 5 3 4 4 10 3 3 3 2 Output Possible Impossible Possible -----Note----- For the first test case, you have 10 TAs available and the classes need a total of 3 + 3 + 4 = 10 TAs, which is exactly the number available, so it is possible. For the second test case, you have 5 TAs available but the classes need 3 + 4 = 7 TAs, which is more than what is available, so it is impossible. For the third test case, you have 10 TAs available and the classes need a total of 3 + 3 + 3 + 1 = 9 TAs, which is less than or equal to what is available, so it is possible.","solution":"def can_assign_tas(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] required_tas = test_cases[i][1] if sum(required_tas) <= M: results.append(\'Possible\') else: results.append(\'Impossible\') return results # Example usage for the function (to see how it works): T = 3 test_cases = [ [(3, 10), [3, 3, 4]], [(2, 5), [3, 4]], [(4, 10), [3, 3, 3, 1]] ] print(can_assign_tas(T, test_cases))"},{"question":"Given two arrays of integers `a` and `b`, where each array represents a set of intervals. Each interval is represented by its starting and ending points, and the intervals are sorted in ascending order. Your task is to find the intersection of these two sets of intervals and return the resulting intervals. An intersection between two intervals `[x1, x2]` and `[y1, y2]` is defined as the interval `[max(x1, y1), min(x2, y2)]` if `x1` is less than or equal to `y2` and `y1` is less than or equal to `x2`. If there is no intersection between the intervals, it should not be included in the result. **Input**: Two integer arrays `a` and `b`, where each array contains pairs of integers representing the intervals. For example, array `a` could be `[[1, 3], [5, 9]]` and array `b` could be `[[2, 4], [6, 8]]`. **Output**: A list of intervals representing the intersection of the two sets of intervals. The intervals should be sorted in ascending order. **Example**: ``` Input: a = [[1, 3], [5, 9]], b = [[2, 4], [6, 8]] Output: [[2, 3], [6, 8]] Input: a = [[0, 2], [5, 10]], b = [[1, 5], [8, 12]] Output: [[1, 2], [5, 5], [8, 10]] ``` Explaination: 1. For the first input: - The interval `[1, 3]` from `a` intersects with interval `[2, 4]` from `b` resulting in `[2, 3]`. - The interval `[5, 9]` from `a` intersects with interval `[6, 8]` from `b` resulting in `[6, 8]`. 2. For the second input: - The interval `[0, 2]` from `a` intersects with interval `[1, 5]` from `b` resulting in `[1, 2]`. - The interval `[5, 10]` from `a` intersects with interval `[1, 5]` from `b` resulting in `[5, 5]`. - The interval `[5, 10]` from `a` intersects with interval `[8, 12]` from `b` resulting in `[8, 10]`. Write a function `intervalIntersection(a, b)` that takes two lists of intervals and returns the intersection of these intervals following the requirements above.","solution":"def intervalIntersection(a, b): Find the intersection of two sets of intervals. :param a: List of intervals [start, end] :param b: List of intervals [start, end] :return: List of intersecting intervals sorted in ascending order i, j = 0, 0 result = [] while i < len(a) and j < len(b): start_a, end_a = a[i] start_b, end_b = b[j] if start_a <= end_b and start_b <= end_a: start_max = max(start_a, start_b) end_min = min(end_a, end_b) result.append([start_max, end_min]) if end_a < end_b: i += 1 else: j += 1 return result"},{"question":"=====Problem Statement===== You are given an array of N integers. Your task is to find the length of the longest subsequence that contains consecutive integers. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. =====Input Format===== The first line of input contains a single integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. =====Constraints===== 1 ≤ N ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 =====Output Format===== Output a single integer denoting the length of the longest subsequence with consecutive integers. =====Example===== **Input:** 7 1 9 3 10 4 20 2 **Output:** 4 **Explanation:** The subsequence [1, 2, 3, 4] is the longest subsequence with consecutive elements.","solution":"def longest_consecutive_subsequence_length(arr): Find the length of the longest subsequence that contains consecutive integers. if not arr: return 0 num_set = set(arr) longest_length = 0 for num in arr: if num - 1 not in num_set: # Check if it\'s the start of a sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Given a list of integers, find the longest subsequence where the difference between any two consecutive elements is less than or equal to 1. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: nums = [1, 2, 2, 3, 1, 2] Output: 5 Explanation: The longest such subsequence is [1, 2, 2, 3, 2] or [2, 2, 3, 2, 1]. Example 2: Input: nums = [4, 6, 5, 5, 3, 3, 1] Output: 3 Explanation: The longest such subsequence is [4, 3, 3]. Example 3: Input: nums = [1, 1, 1, 1] Output: 4 Explanation: The longest such subsequence is [1, 1, 1, 1]. Constraints: - 1 <= nums.length <= 2000 - -10^9 <= nums[i] <= 10^9","solution":"def longest_subsequence(nums): Given a list of integers, find the longest subsequence where the difference between any two consecutive elements is less than or equal to 1. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if abs(nums[i] - nums[j]) <= 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Seismologist\'s Dilemma You are a seismologist trying to analyze seismic magnitude data to detect earthquakes. The data consists of a series of increasing magnitude values recorded every minute, but noise in the system can occasionally cause a reading to be smaller than the previous reading. You decide to filter out the noise by writing a function that calculates the longest increasing subsequence (LIS) from a series of magnitude values. The LIS is the longest subsequence in which each element is greater than the preceding one. Write a function `find_lis` that takes a list of integers `magnitudes` and returns the length of the longest increasing subsequence in the list. ```python def find_lis(magnitudes: list[int]) -> int: # Your implementation here ``` # Example ```python find_lis([3, 10, 2, 1, 20]) # should return 3, because the longest increasing subsequence is [3, 10, 20] find_lis([3, 2]) # should return 1, because the longest increasing subsequence is either [3] or [2] find_lis([50, 3, 10, 7, 40, 80]) # should return 4, because the longest increasing subsequence is [3, 7, 40, 80] ``` # Notes - The list may contain any integer values, positive or negative. - The function should run efficiently for lists of up to 1000 magnitudes.","solution":"def find_lis(magnitudes: list[int]) -> int: Function to compute the length of the longest increasing subsequence in the `magnitudes` list. if not magnitudes: return 0 n = len(magnitudes) lis = [1] * n for i in range(1, n): for j in range(0, i): if magnitudes[i] > magnitudes[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"You are given an unsorted array of integers where every integer appears twice except for one which appears only once. Write a function to find and return the single integer that appears only once. The algorithm should achieve a linear runtime complexity and use only constant extra space. # Example 1 ```plaintext Input: [2, 2, 1] Output: 1 ``` # Example 2 ```plaintext Input: [4, 1, 2, 1, 2] Output: 4 ``` # Example 3 ```plaintext Input: [1] Output: 1 ``` # Constraints - The input array of integers will have a non-zero length. - The input array will satisfy the given condition that every integer appears twice except for one.","solution":"def single_number(nums): Returns the single integer that appears only once in the array. The function uses XOR to achieve O(n) time complexity and O(1) space complexity. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Given an array of integers, sort the array such that all the even numbers appear before the odd numbers, while maintaining the relative order of the even and odd numbers. For example: * `sortArrayByParity([3, 1, 2, 4])` should return `[2, 4, 3, 1]` * `sortArrayByParity([0, 5, 7, 2, 6])` should return `[0, 2, 6, 5, 7]` The input will be a non-empty array of integers. Good luck! Be sure to also try: [Even and Odd Separation](https://www.codewars.com/kata/628fb100707f31471d488b11)","solution":"def sortArrayByParity(arr): Sort the array such that all the even numbers appear before the odd numbers, while maintaining the relative order of the even and odd numbers. even_nums = [num for num in arr if num % 2 == 0] odd_nums = [num for num in arr if num % 2 != 0] return even_nums + odd_nums"},{"question":"Given an array of integers nums which represents the jumping power from each position on the array (i.e., nums[i] represents the maximum number of steps you can move forward from index i). Write an algorithm to determine the minimum number of jumps to reach the last index starting from the first index. If it is not possible to reach the last index, return -1. Example 1: Input: nums = [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: nums = [2,3,0,1,4] Output: 2 Explanation: You can reach the last index in 2 jumps: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 3: Input: nums = [1, 2, 0, 1] Output: 2 Explanation: Jump 1 step from index 0 to 1, then 1 step to index 2, and finally 1 step to last index. Constraints: - 1 <= nums.length <= 10^4 - 0 <= nums[i] <= 100","solution":"def min_jumps(nums): Determines the minimum number of jumps to reach the last index. :param nums: List[int] - An array of integers representing the jumping power. :return: int - The minimum number of jumps to reach the last index or -1 if not possible. if len(nums) <= 1: return 0 jumps = 0 curr_end = 0 farthest = 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == curr_end: jumps += 1 curr_end = farthest if curr_end >= len(nums) - 1: break return jumps if curr_end >= len(nums) - 1 else -1"},{"question":"# Triangle Number A triangle number or triangular number is a number that is the sum of the first `n` natural numbers for some value of `n`. For example: | n | Triangle Number | |---|-----------------| | 1 | 1 | | 2 | 3 | | 3 | 6 | | 4 | 10 | | 5 | 15 | Given a positive integer `num`, determine if it is a triangle number. If it is, return the value of `n` that makes `num` a triangle number. If it is not, return `-1`. Examples ```python is_triangle_number(6) # returns 3 because 6 is the 3rd triangular number. is_triangle_number(10) # returns 4 because 10 is the 4th triangular number. is_triangle_number(8) # returns -1 because 8 is not a triangular number. is_triangle_number(15) # returns 5 because 15 is the 5th triangular number. is_triangle_number(1) # returns 1 because 1 is the 1st triangular number. is_triangle_number(5) # returns -1 because 5 is not a triangular number. ``` Hint You have to solve for `n` in the equation: [ text{num} = frac{n(n+1)}{2} ] This can be solved as a quadratic equation: [ n^2 + n - 2 cdot text{num} = 0 ] Notes * The function should return the smallest `n` that satisfies the equation if `num` is a triangular number. * If `num` is not a triangular number, return `-1`. * You may assume the input value `num` is a positive integer.","solution":"import math def is_triangle_number(num): Determines if \'num\' is a triangular number and returns the corresponding \'n\' if it is. If \'num\' is not a triangular number, returns -1. Args: num (int): The number to be checked. Returns: int: The \'n\' which makes \'num\' a triangular number or -1 if \'num\' is not a triangular number. # Solving the quadratic equation n^2 + n - 2*num = 0 discriminant = 1 + 8 * num if discriminant < 0: return -1 n = (-1 + math.sqrt(discriminant)) / 2 # Check if n is a positive integer if n.is_integer() and n > 0: return int(n) else: return -1"},{"question":"# Parking Lot You are building a parking lot management system and you need to implement the functionality to manage parking slots. The parking lot has `n` slots in a row, indexed from `0` to `n-1`. Each slot can either be empty or occupied by a car. You will receive a string `slots` with the initial configuration of the parking lot, where: - \'E\' represents an empty slot. - \'X\' represents an occupied slot. You need to implement two functions: 1. `occupy_slot(ss: str) -> str`: This function takes the current configuration `ss` of the parking lot as input. It returns a new configuration where the first available empty slot \'E\' is turned into an occupied slot \'X\'. If all slots are occupied, the configuration remains unchanged. 2. `free_slot(ss: str, idx: int) -> str`: This function takes the current configuration `ss` of the parking lot and an integer `idx` representing a slot index. It returns a new configuration where the slot at the index `idx` is emptied (i.e., the slot is marked as \'E\'). If the slot at `idx` is already empty, the configuration remains unchanged. # Constraints: - The input string `slots` will have a length between 1 and 1000 (inclusive). - The index `idx` in `free_slot` will always be valid and within the range of slot indices. # Examples: ```python # Example 1: slots = \\"EEXXE\\" print(occupy_slot(slots)) # Expected output: \\"XEXXE\\" # Example 2: slots = \\"XXXXX\\" print(occupy_slot(slots)) # Expected output: \\"XXXXX\\" # Example 3: slots = \\"XEXXE\\" idx = 2 print(free_slot(slots, idx)) # Expected output: \\"XEEXE\\" # Example 4: slots = \\"EEXXE\\" idx = 0 print(free_slot(slots, idx)) # Expected output: \\"EEXXE\\" ```","solution":"def occupy_slot(ss: str) -> str: This function takes the current configuration `ss` of the parking lot as input. It returns a new configuration where the first available empty slot \'E\' is turned into an occupied slot \'X\'. If all slots are occupied, the configuration remains unchanged. slots = list(ss) for i in range(len(slots)): if slots[i] == \'E\': slots[i] = \'X\' break return \'\'.join(slots) def free_slot(ss: str, idx: int) -> str: This function takes the current configuration `ss` of the parking lot and an integer `idx` representing a slot index. It returns a new configuration where the slot at the index `idx` is emptied (i.e., the slot is marked as \'E\'). If the slot at `idx` is already empty, the configuration remains unchanged. slots = list(ss) if slots[idx] == \'X\': slots[idx] = \'E\' return \'\'.join(slots)"},{"question":"Palindrome Chains Given a number, determine the number of steps required to transform it into a palindrome. At each step, add the number to its reverse. If the resulting number is a palindrome, stop. Otherwise, repeat the process with the new number. # Task Create a function that takes an integer `n` and returns the number of steps needed to reach a palindrome or `-1` if it does not become a palindrome within 1000 steps. # Notes - Palindromes are numbers that read the same forwards and backwards, like 121 or 888. - Assume the input is always a positive integer. - You must ensure your solution is efficient in terms of time and space complexity. # Examples ```python steps_to_palindrome(87) # 4 steps: 87 + 78 = 165, 165 + 561 = 726, 726 + 627 = 1353, 1353 + 3531 = 4884 (palindrome) steps_to_palindrome(56) # 1 step: 56 + 65 = 121 (palindrome) steps_to_palindrome(123) # -1: No palindrome within 1000 steps ``` Write a function `steps_to_palindrome(n)` to implement this task. ```python def steps_to_palindrome(n): # your code here ```","solution":"def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def steps_to_palindrome(n): Returns the number of steps required to transform the number into a palindrome. Returns -1 if it does not become a palindrome within 1000 steps. steps = 0 while steps < 1000: if is_palindrome(n): return steps n = n + int(str(n)[::-1]) steps += 1 return -1"},{"question":"In a mystical garden, there are fairies each of which can jump a certain number of steps forwards or backwards. The garden keeper wants to know if there are any two fairies who can meet each other by jumping exactly once. -----Input:----- - The first line contains an integer n (1 <= n < 100) - the number of fairies in the garden. - Each of the following n lines contains two integers p(i) and j(i) (-10^4 <= p(i) <= 10^4, 1 <= |j(i)| <= 2 * 10^4) - the initial position of the i-th fairy and the distance the i-th fairy can jump. Positive values of j(i) correspond to jumps forwards, and negative values correspond to jumps backwards. No two fairies may stand at the same position. -----Output:----- If there are two fairies who can meet each other by each jumping exactly once, output YES. Otherwise, output NO. -----Sample Input:----- 3 0 2 3 -1 2 1 -----Sample Output:----- YES","solution":"def can_fairies_meet(n, positions_jumps): Determines if any two fairies in the garden can meet by jumping exactly once. :param n: Number of fairies :param positions_jumps: List of tuples containing position and jump distance (p, j) :return: \'YES\' if any two fairies can meet, \'NO\' otherwise reachable_positions = {} for i in range(n): initial_position = positions_jumps[i][0] jump_distance = positions_jumps[i][1] # Calculate forward and backward jumps new_position_forward = initial_position + jump_distance new_position_backward = initial_position - jump_distance # Check if these positions have already been marked as reachable by another fairy if new_position_forward in reachable_positions or new_position_backward in reachable_positions: return \'YES\' # Mark the current fairy\'s achievable new positions reachable_positions[new_position_forward] = True reachable_positions[new_position_backward] = True return \'NO\'"},{"question":"# Sorting Armies You are given a list of generals, each responsible for a certain number of troops. Your task is to rank the generals based on the number of troops they command. If two or more generals command an equal number of troops, they should be sorted alphabetically by their names. Input - An integer, `n`, where `2 <= n <= 100`, representing the number of generals. - A list of n tuples. Each tuple contains a string (the general\'s name, which is a sequence of alphabetic characters with a maximum length of 20) and an integer (the number of troops commanded by the general, where `0 <= troops <= 1000`). Output - A list of generals\' names sorted according to the number of troops in descending order. If two generals have the same number of troops, sort them alphabetically by name. Example ```python def sort_generals(generals): pass # your code here # Example 1 generals = [(\\"Alexander\\", 500), (\\"Caesar\\", 800), (\\"Napoleon\\", 500), (\\"Hannibal\\", 600)] print(sort_generals(generals)) # Output: [\'Caesar\', \'Hannibal\', \'Alexander\', \'Napoleon\'] # Example 2 generals = [(\\"Genghis\\", 1000), (\\"Sun Tzu\\", 900), (\\"Zhuge\\", 900), (\\"Attila\\", 800)] print(sort_generals(generals)) # Output: [\'Genghis\', \'Sun Tzu\', \'Zhuge\', \'Attila\'] # Example 3 generals = [(\\"Xerxes\\", 300), (\\"Leonidas\\", 300), (\\"Themistocles\\", 300), (\\"Pericles\\", 300)] print(sort_generals(generals)) # Output: [\'Leonidas\', \'Pericles\', \'Themistocles\', \'Xerxes\'] ```","solution":"def sort_generals(generals): Sorts generals based on the number of troops they command in descending order. If two or more generals have the same number of troops, they are sorted alphabetically by name. :param generals: List of tuples containing the general\'s name and the number of troops they command. :return: List of sorted general names. # Sort primarily by number of troops in descending order and secondarily by name alphabetically sorted_generals = sorted(generals, key=lambda x: (-x[1], x[0])) # Extract only the names of the generals return [general[0] for general in sorted_generals]"},{"question":"You are in charge of organizing a charity event where people can donate items to be auctioned. In order to maximize the potential revenue from the event, you want to ensure that certain high-value items always appear early in the auction sequence to attract interest and higher bids throughout the event. You have n items, each with a unique identifier and a value. You want to create an auction sequence such that the first k items are among those with the highest values. However, to maintain a fair auction order, the rest of the items should remain in their original order. Write a program that, given the list of items and their values, constructs the auction sequence with the top k most valuable items appearing first, arranged in descending order of value. The remaining items should follow in their original order. -----Input----- The first line contains two integers n and k (1 le n le 1000, 0 le k le n) — the number of items and the number of high-value items to be displayed first. Each of the following n lines contains an integer v_i and a string id_i — the value and identifier of each item. v_i (1 le v_i le 10^9) is the value of the item, and id_i (1 le |id_i| le 10) is the unique identifier of the item. -----Output----- Print n lines, each containing an integer v_i and a string id_i according to the desired auction sequence. The first k items should be the highest value items sorted in descending order by value, and the remaining items should follow in their original order. -----Examples----- Input: 5 3 3000 A1 1500 B2 2000 C3 1000 D4 500 E5 Output: 3000 A1 2000 C3 1500 B2 1000 D4 500 E5 Input: 4 2 2000 A1 1000 B2 3000 C3 1500 D4 Output: 3000 C3 2000 A1 1000 B2 1500 D4 Input: 3 0 1000 A1 2000 B2 3000 C3 Output: 1000 A1 2000 B2 3000 C3 -----Note----- In the first sample, the items with values 3000, 2000, and 1500 are selected to appear first in descending order. The remaining items appear in their original order. In the second sample, the items with values 3000 and 2000 are selected to appear first in descending order. The remaining items appear in their original order. In the third sample, since k = 0, all items appear in their original order.","solution":"def organize_auction(n, k, items): Organize the auction sequence with the top k most valuable items first. :param n: int, total number of items. :param k: int, number of high-value items to be displayed first. :param items: list of tuples [(value, id), ...], value is an integer and id is a string. :return: list of tuples [(value, id), ...] in the desired auction sequence. if k == 0: return items # Sort items by value in descending order and pick the top k items top_k_items = sorted(items, key=lambda x: x[0], reverse=True)[:k] # The remaining items in their original order but without the top k items remaining_items = [item for item in items if item not in top_k_items] # Concatenate top k items with remaining items result = top_k_items + remaining_items return result"},{"question":"The task is to implement a function that helps in formatting list output as a string, where numbers that are perfect squares and perfect cubes are replaced by special strings. Given an integer array `nums`, return a formatted string where: 1. Numbers in the array that are perfect squares (like 1, 4, 9, 16,...) should be replaced with the string \\"Square\\". 2. Numbers that are perfect cubes (like 1, 8, 27, 64,...) should be replaced with the string \\"Cube\\". 3. Numbers that are both perfect squares and perfect cubes (like 1, 64, ...) should be replaced with the string \\"Square-Cube\\". Join the strings using a comma and a space `\\", \\"`. # Example ```python print(format_numbers([1, 3, 4, 8, 9, 16, 27, 64, 81])) ``` Output: ``` \\"Square-Cube, 3, Square, Cube, Square, Square, Cube, Square-Cube, Square\\" ``` # Constraints - The array length will be between 1 and 1000. - Each element in the array `nums` will be a positive integer between 1 and 10000.","solution":"import math def is_perfect_square(n): return int(math.sqrt(n)) ** 2 == n def is_perfect_cube(n): return int(round(n ** (1/3))) ** 3 == n def format_numbers(nums): results = [] for num in nums: if is_perfect_square(num) and is_perfect_cube(num): results.append(\\"Square-Cube\\") elif is_perfect_square(num): results.append(\\"Square\\") elif is_perfect_cube(num): results.append(\\"Cube\\") else: results.append(str(num)) return \\", \\".join(results) # Example usage: print(format_numbers([1, 3, 4, 8, 9, 16, 27, 64, 81]))"},{"question":"Given an array of integers where every element appears twice except for one, find that single one. Your algorithm should run in linear runtime complexity. Could you implement it without using extra memory? Example: Input: [4,1,2,1,2] Output: 4 Explanation: By using the properties of XOR, where a XOR a = 0 and a XOR 0 = a, the solution leads to the number that appears only once.","solution":"def single_number(nums): Find the single element in the array where every element appears twice except for one. Use XOR operation which has a property where a XOR a = 0 and a XOR 0 = a. result = 0 for num in nums: result ^= num return result"},{"question":"Alice and Bob are playing another game involving integers and strings. Alice has a string S and she gives Bob Q queries, and for each query, Bob must alter or inspect the string S based on the type of query. There are three types of queries: 1. Alice gives an integer i, and Bob must report the character at the i^{th} position in the string S. The answer should be the character itself. 2. Alice gives an integer i and a character c, and Bob must replace the character at the i^{th} position with c. 3. Alice gives an integer k, and Bob must reverse the substring starting from the beginning of the string up to the k^{th} position (inclusive). The value of S changes after any update operation. The positions are 0-indexed. -----Input:----- - First line will contain T, the number of test cases. - The first line of each test case contains a string S and an integer Q. - The following Q lines describe each query. - For a query of type 1, there will be the integer `1` followed by the integer `i`. - For a query of type 2, there will be the integer `2` followed by the integer `i` and the character `c`. - For a query of type 3, there will be the integer `3` followed by the integer `k`. -----Output:----- For the queries of the first kind, print the character at the i^{th} position in the string S. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 - 1 leq Q leq 100 - 0 leq i < |S| - 0 leq k < |S| -----Sample Input----- 1 abcdef 3 1 2 2 3 x 3 4 -----Sample Output----- c -----EXPLANATION:----- In the first query, the character at index 2 of \\"abcdef\\" is \\"c\\". In the second query, the character at index 3 is replaced with \\"x\\", making the string \\"abcxef\\". In the third query, the substring from index 0 to 4 (\\"abcxe\\") is reversed, making the string \\"excabf\\".","solution":"def process_queries(T, test_cases): results = [] for case in test_cases: S, Q, queries = case S = list(S) # Convert string to list to allow mutation for query in queries: if query[0] == 1: # Query type 1 _, i = query results.append(S[i]) elif query[0] == 2: # Query type 2 _, i, c = query S[i] = c elif query[0] == 3: # Query type 3 _, k = query S[:k+1] = reversed(S[:k+1]) return results"},{"question":"Given an undirected graph with n nodes and m edges, determine if the graph has a cycle. A cycle is a path that starts and ends at the same vertex and contains at least one edge. Each of the m edges connects two different nodes u_i and v_i (1 leq u_i, v_i leq n). Each node is numbered from 1 to n. -----Input----- The first line contains two integers n (1 leq n leq 10^4) and m (0 leq m leq 2 cdot 10^4) — the number of nodes and edges in the graph. The next m lines each contain two integers u_i and v_i — the endpoints of each edge. -----Output----- Print \\"Yes\\" if the graph contains at least one cycle, otherwise print \\"No\\". -----Example----- Input 5 5 1 2 1 3 2 3 3 4 4 5 Output Yes Input 5 4 1 2 1 3 3 4 4 5 Output No -----Note----- In the first example, the graph has a cycle: 1 -> 2 -> 3 -> 1. In the second example, the graph does not have any cycle.","solution":"def has_cycle(n, m, edges): Determines if the given undirected graph has a cycle. :param n: Number of nodes in the graph :param m: Number of edges in the graph :param edges: List of tuples representing the edges (u, v) :return: \\"Yes\\" if the graph contains at least one cycle, otherwise \\"No\\" from collections import defaultdict, deque def bfs(start_node): queue = deque([(start_node, -1)]) # Node and its parent visited[start_node] = True while queue: node, parent = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, node)) elif parent != neighbor: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if bfs(node): return \\"Yes\\" return \\"No\\""},{"question":"You need to implement a function to analyze a list of books. Given a list of dictionaries where each dictionary represents a book with keys `title`, `author`, and `year`, your task is to write a function that returns the title of the oldest book by each unique author. If there are multiple books by the same author from the same year, return the one that appears first in the list. -----Input----- A list of dictionaries where each dictionary has: - `title`: A string representing the title of the book. - `author`: A string representing the author of the book. - `year`: An integer representing the publication year of the book. -----Output----- A list of strings where each string is the title of the oldest book by a unique author from the input list. -----Example----- Input: books = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 1999}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author Y\\", \\"year\\": 2005}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author X\\", \\"year\\": 1995}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author Z\\", \\"year\\": 2010}, {\\"title\\": \\"Book E\\", \\"author\\": \\"Author Y\\", \\"year\\": 2001} ] Output: [\\"Book C\\", \\"Book E\\", \\"Book D\\"] -----Notes----- 1. The function should handle edge cases, such as an empty list or books with the same year by different authors. 2. You can assume that the input list will not contain duplicate books.","solution":"def get_oldest_books_by_author(books): Returns the titles of the oldest books by each unique author from the input list of book dictionaries. Args: books (list): A list of dictionaries where each dictionary contains \'title\', \'author\', and \'year\' keys. Returns: list: A list of strings where each string is the title of the oldest book by a unique author. author_oldest_books = {} for book in books: author = book[\'author\'] year = book[\'year\'] if author not in author_oldest_books: author_oldest_books[author] = book else: if book[\'year\'] < author_oldest_books[author][\'year\']: author_oldest_books[author] = book return [book[\'title\'] for book in author_oldest_books.values()]"},{"question":"An online bookstore wants to categorize the distinct books they have based on their genre. Each book is identified by a unique integer ID. A bookstore can have multiple genres, and each genre can have multiple books. The bookstore system needs to support various operations like adding a book to a genre, removing a book from a genre, and checking the number of distinct genres a specific book belongs to. You are required to implement a system that can perform the following operations: 1. Add a book to a genre. 2. Remove a book from a genre. 3. Query the number of distinct genres a specific book belongs to. Implement a class `Bookstore` which will have the following methods: - `add_book(book_id: int, genre: str) -> None`: This method will add a book with the given `book_id` to the specified `genre`. - `remove_book(book_id: int, genre: str) -> None`: This method will remove a book with the given `book_id` from the specified `genre`. If the book does not belong to that genre, this operation will do nothing. - `query_book_genres(book_id: int) -> int`: This method returns the number of distinct genres the specified `book_id` belongs to. # Input Format: - The first line contains an integer `T` denoting the number of operations to be performed. - Each of the following `T` lines describes one operation in one of the following formats: - `ADD book_id genre` - `REMOVE book_id genre` - `QUERY book_id` # Output Format: - For each `QUERY` operation, output a single integer representing the number of distinct genres the book belongs to. # Constraints: - 1 leq T leq 10^4 - 1 leq book_id leq 10^6 - The length of `genre` will be between 1 and 20 and will consist of lowercase English letters only. # Sample Input: ``` 7 ADD 1 fiction ADD 1 mystery ADD 2 fantasy QUERY 1 REMOVE 1 mystery QUERY 1 QUERY 2 ``` # Sample Output: ``` 2 1 1 ``` # Explanation: - The book with ID 1 is added to both \\"fiction\\" and \\"mystery\\" genres. - The book with ID 2 is added to the \\"fantasy\\" genre. - Querying the genres for book 1 results in 2 as it belongs to \\"fiction\\" and \\"mystery\\". - Removing book 1 from the \\"mystery\\" genre leaves it in just \\"fiction\\". - Querying the genres for book 1 again results in 1. - Finally, querying the genres for book 2 results in 1 as it still belongs to \\"fantasy\\".","solution":"class Bookstore: def __init__(self): # Dictionary to map book IDs to a set of genres self.book_genres = {} def add_book(self, book_id: int, genre: str) -> None: if book_id not in self.book_genres: self.book_genres[book_id] = set() self.book_genres[book_id].add(genre) def remove_book(self, book_id: int, genre: str) -> None: if book_id in self.book_genres and genre in self.book_genres[book_id]: self.book_genres[book_id].remove(genre) if not self.book_genres[book_id]: # If the set becomes empty after removal del self.book_genres[book_id] def query_book_genres(self, book_id: int) -> int: if book_id in self.book_genres: return len(self.book_genres[book_id]) else: return 0 def process_operations(operations): bookstore = Bookstore() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": bookstore.add_book(int(parts[1]), parts[2]) elif parts[0] == \\"REMOVE\\": bookstore.remove_book(int(parts[1]), parts[2]) elif parts[0] == \\"QUERY\\": results.append(bookstore.query_book_genres(int(parts[1]))) return results"},{"question":"Given a list of integers, you are required to generate all possible subsets of the list and then return the subsets sorted by their lengths, and for subsets with the same length, you should order them lexicographically based on their string representation. Example Input ------------- [1, 2, 3] Example Output -------------- [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] Example Input ------------- [4, 1, 0] Example Output -------------- [[], [0], [1], [4], [0, 1], [0, 4], [1, 4], [0, 1, 4]]","solution":"from itertools import combinations def subsets_sorted(arr): Generate all possible subsets of the array and return them sorted by their lengths and lexicographically for subsets with the same length. arr = sorted(arr) # Sort the array to ensure lexicographical order result = [] for length in range(len(arr) + 1): for comb in combinations(arr, length): result.append(list(comb)) return sorted(result, key=lambda x: (len(x), str(x)))"},{"question":"Task: You have to write a function `generateSequence` that generates a sequence of numbers up to `n` and returns it as a string. Each number in the sequence should be separated by a comma, and each odd position number should be followed by its square. An odd position refers to the 1st, 3rd, 5th, etc., positions in the sequence. Rules/Note: * If `n < 1` then it should return an empty string. * The sequence starts with `1`. # Examples: + generateSequence(5): \\"1,1,2,3,9,4,5,25\\" + generateSequence(8): \\"1,1,2,3,9,4,5,25,6,7,49,8\\" ```if-not:cfml * Hint: Use list operations to build the sequence efficiently. ``` ```if:cfml * Hint: Use list functions to concatenate elements in the sequence. ``` [List of all my katas](\'http://www.codewars.com/users/curious_db97/authored\')","solution":"def generateSequence(n): Generates a sequence of numbers up to n and returns it as a string. Each odd position number has its value followed by its square. if n < 1: return \\"\\" sequence = [] for i in range(1, n + 1): sequence.append(str(i)) if i % 2 == 1: # Odd position numbers sequence.append(str(i * i)) return \',\'.join(sequence)"},{"question":"\'Twas a dark and stormy night when the elusive sequence reappeared! The **Thue-Morse sequence** dances infinitely through the caves of binary symmetries. The sequence starts with `0` and repeatedly flips the bits of the entire sequence to create the next part: `0` `01` `0110` `01101001` `0110100110010110` Your quest, brave coder, is to write a function that accepts an integer `n` and returns the n-th (one-indexed) character of the Thue-Morse sequence. Ensure your function\'s efficiency can withstand the tempest of large `n`. For instance: `n = 1` should yield `0` (the first character of the sequence) `n = 4` should yield `0` (the fourth character of the sequence) `n = 7` should yield `1` (the seventh character of the sequence) If `n` is invalid (e.g., 0 or below, or non-integer), return `\'NaN\'`. Recite your computational incantations with care, and let the symmetries guide your path!","solution":"def thue_morse_character(n): Returns the n-th (one-indexed) character of the Thue-Morse sequence. if not isinstance(n, int) or n <= 0: return \'NaN\' # Convert to zero-indexed n -= 1 count = 0 while n > 0: count += n & 1 n >>= 1 return \'1\' if count % 2 == 1 else \'0\'"},{"question":"Find the Missing Number Given an array of distinct integers from 1 to `n` (inclusive) except one missing number, find the missing number. # Constraints 1. The array contains unique integers. 2. The array is not sorted. 3. The size of the array is `n - 1`. --- # Input - An array of unique integers ranging from 1 to `n` but with one number missing. # Output - The missing integer. # Example Example 1 * Input: [3, 7, 1, 2, 8, 4, 5] * n: 8 * Output: 6 Example 2 * Input: [1, 2, 4, 5, 6] * n: 6 * Output: 3 # Notes * You can assume the array contains integers from 1 to `n` with exactly one number missing. * Do not use additional memory for solving the problem.","solution":"def find_missing_number(arr): Finds the missing number in an array of distinct integers from 1 to n except one missing number. n = len(arr) + 1 total_sum = n * (n + 1) / 2 array_sum = sum(arr) return int(total_sum - array_sum)"},{"question":"# Task You are given a string containing letters of the alphabet and digits. Your task is to extract the digits from the string, sort them in ascending order, and return the new sorted string of digits. If there are no digits in the input string, return an empty string. # Example For `input_string = \\"a1b2c3d4\\"`, the output should be `\\"1234\\"`. For `input_string = \\"xyz\\"`, the output should be `\\"\\"`. # Input/Output - `[input]` string `input_string` A non-empty string containing alphanumeric characters. Constraints: `1 ≤ input_string.length ≤ 1000.` - `[output]` string A new string consisting of sorted digits extracted from the input string, or an empty string if no digits are present.","solution":"def extract_and_sort_digits(input_string): Extracts the digits from the input string, sorts them in ascending order, and returns the new sorted string of digits. If there are no digits, returns an empty string. digits = [char for char in input_string if char.isdigit()] sorted_digits = sorted(digits) return \'\'.join(sorted_digits)"},{"question":"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. For example: ``` Input: 38 Output: 2 Explanation: The process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it. ``` Example 1: ``` Input: 123 Output: 6 Explanation: The process is like: 1 + 2 + 3 = 6. Since 6 has only one digit, return it. ``` Example 2: ``` Input: 0 Output: 0 Explanation: Since 0 has only one digit, return it. ```","solution":"def add_until_single_digit(num): Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"A parking lot has a single row of parking spaces, each numbered 1 through N. A series of cars arrive at the parking lot and each car attempts to park in a specific space, but may need to go to another space if the desired space is occupied. The rules for parking are as follows: 1. Each car has a preferred parking spot. 2. If the preferred spot is empty, the car parks there. 3. If the preferred spot is occupied, the car will park in the next available spot that is numbered higher. If no such spot exists, the car leaves without parking. 4. The parking lot cannot rearrange the cars once they are parked. Given the sequence of preferred parking spots for a series of cars, determine the final arrangement of cars in the lot after all have attempted to park. ---Input--- - The first line contains a single integer T, the number of test cases. - Each test case consists of: - An integer N, the total number of parking spaces. - An integer M, the number of cars. - A list of M integers representing the preferred parking spaces of each car, in the order they arrive. ---Output--- For each test case, output a list of N integers representing the final arrangement of cars in the parking lot, where the value at each index is the car number that parked in that space, with 0 representing an empty space. ---Constraints--- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ preferred spots ≤ N ---Example--- Input: 2 5 3 1 2 3 5 5 1 2 3 4 5 Output: [1, 2, 3, 0, 0] [1, 2, 3, 4, 5] ---Explanation--- Test case 1: - Car 1 parks in spot 1 since it is empty. - Car 2 parks in spot 2 since it is empty. - Car 3 parks in spot 3 since it is empty. - Final arrangement: [1, 2, 3, 0, 0] Test case 2: - Car 1 parks in spot 1 since it is empty. - Car 2 parks in spot 2 since it is empty. - Car 3 parks in spot 3 since it is empty. - Car 4 parks in spot 4 since it is empty. - Car 5 parks in spot 5 since it is empty. - Final arrangement: [1, 2, 3, 4, 5] Note: Subsequent cars arriving will keep parking in their preferred spot if it is free or the next available spot if preferred is occupied until the lot is full or all cars are parked.","solution":"def parking_lot_final_arrangement(T, test_cases): results = [] for case in test_cases: N, M, preferred_spots = case parking_lot = [0] * N for car_number, preferred_spot in enumerate(preferred_spots, 1): # Find the first available spot starting from preferred_spot for spot in range(preferred_spot - 1, N): if parking_lot[spot] == 0: parking_lot[spot] = car_number break results.append(parking_lot) return results"},{"question":"In this problem, you\'re required to create a program that calculates the sum of digital time elements, converts it to an analog time format (in degrees), and validates the correctness of the time. The time is given in a 24-hour format (00:00 to 23:59). Write a function that takes digital times as input and returns the analog time as output, or an error message if the input is invalid. The function should adhere to the following rules: 1. The input time should be a string in \\"HH:MM\\" format. 2. The output time should be a string in \\"HH:MM\\" format. 3. If the input is not a valid 24-hour format time, return \\"Incorrect time format!\\". 4. If the digital time has an invalid hour (e.g., an hour greater than 23) or minute (e.g., a minute greater than 59), return \\"Invalid time values!\\". # Example: Let\'s say our input digital time is \\"12:45\\". - \\"HH\\" represents hours past since midnight (00:00). - \\"MM\\" represents minutes past the hour. The output analog time in degrees: - The hours component is converted to degrees as: Hour hand degree = (HH % 12) * 30 (each hour on the clock represents 30 degrees). - The minute component is converted to degrees as: Minute hand degree = MM * 6 (each minute on the clock represents 6 degrees). Example Implementations: ```python def digital_to_analog(degrees: str) -> str: try: hrs, mins = map(int, degrees.split(\':\')) if not(0 <= hrs < 24) or not(0 <= mins < 60): return \\"Invalid time values!\\" hour_degree = (hrs % 12) * 30 min_degree = mins * 6 return f\\"{hour_degree}:{min_degree}\\" except ValueError: return \\"Incorrect time format!\\" print(digital_to_analog(\\"00:00\\")) # Expected output: \\"0:0\\" print(digital_to_analog(\\"12:30\\")) # Expected output: \\"360:180\\" print(digital_to_analog(\\"24:00\\")) # Expected output: \\"Invalid time values!\\" print(digital_to_analog(\\"13:60\\")) # Expected output: \\"Invalid time values!\\" print(digital_to_analog(\\"12:45\\")) # Expected output: \\"360:270\\" print(digital_to_analog(\\"09:15\\")) # Expected output: \\"270:90\\" print(digital_to_analog(\\"invalid\\")) # Expected output: \\"Incorrect time format!\\" ``` # Constraints: 1. The output format must be checked for strict adherence to \\"360:360\\". 2. Ensure to validate the input for negative times and wrong time formats. 3. Implement discrete snapping of the hour hand to the nearest hour position.","solution":"def digital_to_analog(degrees: str) -> str: try: hrs, mins = map(int, degrees.split(\':\')) if not(0 <= hrs < 24) or not(0 <= mins < 60): return \\"Invalid time values!\\" hour_degree = (hrs % 12) * 30 min_degree = mins * 6 return f\\"{hour_degree}:{min_degree}\\" except ValueError: return \\"Incorrect time format!\\""},{"question":"In computer science, prime numbers have a significant role in various algorithms and applications. A prime number is a natural number greater than 1, which has no positive divisors other than 1 and itself. Design a function that takes a list of integers and returns a list of all the prime numbers from the original list, arranged in descending order. If no primes are found, return an empty list. Examples: ```python get_primes_desc([3, 6, 7, 10, 13, 15]) == [13, 7, 3] get_primes_desc([4, 6, 8, 10, 12]) == [] get_primes_desc([5, 11, 2, 19, 17]) == [19, 17, 11, 5, 2] get_primes_desc([31, 23, 29, 37, 3]) == [37, 31, 29, 23, 3] ``` Your solution should use the function signature: ```python def get_primes_desc(numbers: list) -> list: pass ``` Working well in Python 3.","solution":"def get_primes_desc(numbers: list) -> list: def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True primes = [num for num in numbers if is_prime(num)] primes.sort(reverse=True) return primes"},{"question":"In a kingdom far away, there are N villages connected by exactly N-1 bidirectional roads. Each village is represented by a node and each road is represented by an edge connecting two nodes in an undirected tree graph structure. Every year, the kingdom holds a festival where they decide the King\'s route for an inaugural parade. The King wishes to start from village 1 and return to village 1 while visiting every other village exactly once. Given the structure of the villages and roads, determine the number of distinct circular routes the King can take, starting and ending at village 1, and visiting every other village exactly once. Print the result modulo 10^9+7. -----Input----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains a single integer N denoting the number of villages. - The next N-1 lines contain two space-separated integers u and v denoting there is a bidirectional road between village u and village v. -----Output----- - For each test case, output a single line containing the number of distinct circular routes modulo 10^9+7. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 1000 -----Subtasks----- Subtask #1 : (10 points) - 2 ≤ N ≤ 5 Subtask #2 : (50 points) - 2 ≤ N ≤ 20 Subtask #3 : (40 points) - 2 ≤ N ≤ 1000 -----Example----- Input: 2 3 1 2 1 3 4 1 2 2 3 3 4 Output: 2 2 -----Explanation----- Example case 1. The King can take the routes: 1-2-3-1 and 1-3-2-1. Example case 2. The King can take the routes: 1-2-3-4-1 and 1-4-3-2-1.","solution":"def factorial(n): Calculates factorial of n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def distinct_circular_routes(T, test_cases): MOD = 10**9 + 7 results = [] for case in test_cases: N = case[0] if N == 2: results.append(1) else: count = factorial(N - 1) % MOD results.append(count) return results"},{"question":"You are given a list of integers. Your task is to partition the list into two subsets such that the absolute difference between the sums of integers in each subset is minimized, and return that minimum difference. Write a function that takes a list of integers and returns the minimum possible absolute difference between the sums of the two partitions. **Note:** - The list will contain between 1 and 20 integers. - Each integer in the list will be between 1 and 100. Examples ``` partition([1, 6, 11, 5]) --> 1 Explanation: One possible partition is [1, 6, 5] and [11], with sums 12 and 11. The difference is 1. partition([1, 2, 3, 9]) --> 3 Explanation: One possible partition is [1, 2, 3] and [9], with sums 6 and 9. The difference is 3. ``` Constraints ```python 1 <= len(list) <= 20 1 <= list[i] <= 100 ```","solution":"def partition(nums): Function to partition a list of integers into two subsets such that the absolute difference between the sums of integers in each subset is minimized. total_sum = sum(nums) n = len(nums) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in nums: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for j in range(total_sum // 2, -1, -1): if dp[j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"Liana loves gardening. She has a rectangular garden with dimensions of `n` rows and `m` columns. Each cell in the garden initially contains a certain number of flowers. Liana has a fancy water can, which allows her to increase the number of flowers in any sub-rectangle of the garden in one operation. A sub-rectangle is defined by its top left and bottom right corners. Liana wants to make sure that every cell in the garden has at least `k` flowers. What is the minimum number of operations required to achieve this? -----Input----- The first line of the input contains three integers `n`, `m`, and `k` (1 leq n, m leq 50, 0 leq k leq 100), the dimensions of the garden and the minimum number of flowers required in each cell. Each of the next `n` lines contains `m` integers. The j-th integer in the i-th line represents the number of flowers in the cell located at row `i` and column `j`. The number of flowers in each cell is between 0 and 100 inclusive. -----Output----- Output a single integer, the minimum number of operations required so that every cell has at least `k` flowers. -----Examples----- Input 3 3 5 1 2 3 4 2 1 3 3 3 Output 4 Input 2 2 2 1 1 1 1 Output 1 -----Note----- In the first example, Liana might perform the following operations: 1. Increase cells (1,1) to (2,2) by 3 flowers. 2. Increase cells (1,3) to (3,3) by 2 flowers. 3. Increase cells (3,1) to (3,2) by 2 flowers. 4. Increase cells (2,1) to (2,2) by 1 flower. In the second example, she can perform one operation to increase all cells by 1 flower.","solution":"def min_operations_to_reach_k_flowers(n, m, k, garden): Returns the minimum number of operations required to ensure that every cell in the garden has at least \'k\' flowers. def max_needed_difference(): max_diff = 0 for i in range(n): for j in range(m): if garden[i][j] < k: max_diff = max(max_diff, k - garden[i][j]) return max_diff # Method to count minimal operations based on max needed difference. op_count = max_needed_difference() return op_count"},{"question":"Given an array of integers `A` and an integer `k`, find the count of all unique subarrays of `A` that have an exact sum of `k`. A subarray is defined as a contiguous segment of the array. Example 1: Input: `A = [1, 2, 3], k = 3` Output: `2` Explanation: The subarrays with sum 3 are `[1, 2]` and `[3]`. Example 2: Input: `A = [1, 1, 1], k = 2` Output: `2` Explanation: The subarrays with sum 2 are `[1, 1]` and `[1, 1]`. Example 3: Input: `A = [-1, -1, 1, 1, 0], k = 0` Output: `4` Explanation: The subarrays with sum 0 are `[-1, 1]`, `[1, -1]`, `[-1, -1, 1, 1]`, and `[0]`. Your task is to write a function that returns the count of all unique subarrays that sum to `k`.","solution":"def count_subarrays_with_sum_k(A, k): Counts all unique subarrays of the list `A` that have an exact sum of `k`. Parameters: A (list): The list of integers. k (int): The target sum to find in the subarrays. Returns: int: The count of unique subarrays with sum equal to k. from collections import defaultdict count = 0 current_sum = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 # There\'s one way to have a prefix sum of zero (by taking no elements). for num in A: current_sum += num if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] prefix_sums[current_sum] += 1 return count"},{"question":"Task Alex is learning about binary search trees (BST). He has a list of integers and wants to construct a BST from it. A BST is a binary tree where for each node, all elements in the left subtree are less than the node and all elements in the right subtree are greater. After constructing the BST, Alex wants to find the sum of depths of all nodes in the BST. The depth of a node is defined as the number of edges from the root to the node. Your task is to help Alex by writing a function that constructs the BST from the given list of integers, then calculates the sum of depths of all nodes in the BST. Example For `lst = [3, 2, 5, 1, 4]`, the BST is constructed as follows: ``` 3 / 2 5 / / 1 4 ``` The depths of the nodes are: - Depth of 3 is 0 - Depth of 2 is 1 - Depth of 1 is 2 - Depth of 5 is 1 - Depth of 4 is 2 So, the sum of depths is `0 + 1 + 2 + 1 + 2 = 6`. Therefore, the output should be `6`. Input/Output - `[input]` list of integers `lst` `1 ≤ len(lst) ≤ 10^5` `-10^9 ≤ lst[i] ≤ 10^9` - `[output]` an integer The sum of depths of all nodes in the constructed BST.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, val): if self.root is None: self.root = TreeNode(val) else: self._insert(self.root, val) def _insert(self, node, val): if val < node.val: if node.left is None: node.left = TreeNode(val) else: self._insert(node.left, val) else: if node.right is None: node.right = TreeNode(val) else: self._insert(node.right, val) def sum_of_depths(self): return self._sum_of_depths(self.root, 0) def _sum_of_depths(self, node, depth): if node is None: return 0 return depth + self._sum_of_depths(node.left, depth + 1) + self._sum_of_depths(node.right, depth + 1) def sum_of_depths(lst): bst = BST() for val in lst: bst.insert(val) return bst.sum_of_depths()"},{"question":"In the world of Dungeons and Dragons, you are given a magic spell that allows you to transform a string of lowercase letters into another string using a series of transformations. Each transformation consists of choosing a non-negative integer `k` and a character `c`, then replacing every instance of the character `c` in the string with the `(k+1)`-th next character in the alphabet. Here the alphabet is considered cyclic, i.e., after \'z\' comes \'a\'. Write a program to determine the minimum number of transformations needed to convert the string `S` into the string `T`. -----Input----- - The first line contains an integer `T` (1 ≤ T ≤ 100) - the number of test cases. - Each test case consists of two lines: - The first line contains the string `S` (1 ≤ |S| ≤ 1000). - The second line contains the string `T` (|S| = |T|). -----Output----- - For each test case, output the minimum number of transformations needed to convert the string `S` into the string `T`. -----Constraints----- - Both strings `S` and `T` consist only of lowercase alphabetical characters. - It is guaranteed that there is at least one possible solution for every test case. -----Example----- Input: 3 abc bcd xyz abc aaa zzz Output: 1 3 25 -----Explanation----- Example case 1. We can transform \'a\' to \'b\', \'b\' to \'c\', and \'c\' to \'d\' using `k=0` in all three transformations. Hence, only 1 transformation is needed. Example case 2. Each character needs to be transformed independently: - \'x\' to \'a\' using `k=2`, - \'y\' to \'b\' using `k=2`, - \'z\' to \'c\' using `k=2`. Three transformations are needed in total. Example case 3. Each \'a\' needs to be transformed 25 steps to become \'z\', hence 25 transformations.","solution":"def min_transformations(S, T): transformations = 0 length = len(S) for i in range(length): needed_transform = (ord(T[i]) - ord(S[i])) % 26 transformations = max(transformations, needed_transform) return transformations def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(min_transformations(S, T)) return results"},{"question":"Write a function that takes a string which represents a sentence and returns a new string with each word reversed but the word order intact. The function should maintain any capital letters in their respective positions after reversing each word. Examples ```python reverse_words(\\"Hello World\\") # returns \\"olleH dlroW\\" reverse_words(\\"Python Programming\\") # returns \\"nohtyP gnimmargorP\\" ``` # Notes: - Ensure that any leading or trailing spaces are removed from the result. - Words are separated by a single space in the input. - Maintain the initial capitalization position for each character after reversing the words.","solution":"def reverse_word(word): This helper function takes a single word and returns the word reversed. It maintains the initial capitalization position for each character after reversing the word. n = len(word) new_word = [\'\'] * n for i, ch in enumerate(word): if ch.isupper(): new_word[n-1-i] = ch.lower() else: new_word[n-1-i] = ch.upper() return \'\'.join(new_word).swapcase() # swapcase is to fix all characters back to original case def reverse_words(sentence): This function takes a string sentence and returns a new string with each word reversed but the word order intact, preserving their respective capitalizations. words = sentence.strip().split() reversed_words = [reverse_word(word) for word in words] return \' \'.join(reversed_words)"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to find all unique combinations in `nums` where the numbers sum up to `target`. Each number in `nums` may only be used once in the combination. The solution set must not contain duplicate combinations. Design a function `combinationSum2(nums, target)` that returns all such combinations. The function should output a list of lists, where each inner list is a combination of numbers that add up to `target`. Here are the constraints and an example to guide you: - `nums` will contain between 1 and 30 elements. - Each element in `nums` will be a positive integer between 1 and 50. - The `target` will be a positive integer between 1 and 100. Example: ```python nums = [10, 1, 2, 7, 6, 1, 5] target = 8 combinationSum2(nums, target) # Output: [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]] nums = [2, 5, 2, 1, 2] target = 5 combinationSum2(nums, target) # Output: [[1, 2, 2], [5]] ``` Explanation: The result should contain only unique combinations, avoiding duplicates, and each combination should be listed in ascending order. The function should handle the order of combinations internally to ensure no duplicates are present. Hints: 1. Sort the `nums` array first to help avoid duplicates. 2. Use a backtracking approach to explore different combinations.","solution":"def combinationSum2(nums, target): Returns all unique combinations in nums where the numbers sum up to target. Each number in nums may only be used once in the combination. The solution set must not contain duplicate combinations. def backtrack(start, end, path, target): if target == 0: result.append(list(path)) return if target < 0: return for i in range(start, end): if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, end, path, target - nums[i]) path.pop() nums.sort() result = [] backtrack(0, len(nums), [], target) return result"},{"question":"You are given an integer array `nums` and two integers `k` and `t`. Determine if there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `t` and the absolute difference between `i` and `j` is at most `k`. Note: - The array size will not exceed 10^4. - The integers in the array will be in the range of [-2^31, 2^31 - 1]. Example 1: Input: nums = [1, 2, 3, 1], k = 3, t = 0 Output: true Explanation: There are two indices i and j such that nums[i] = nums[j] = 1, abs(i - j) = 3 which is at most k, and abs(nums[i] - nums[j]) = 0 which is at most t. Example 2: Input: nums = [1, 5, 9, 1, 5, 9], k = 2, t = 3 Output: false Explanation: There are no two distinct indices i and j such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.","solution":"def contains_nearby_almost_duplicate(nums, k, t): Determines if there are two distinct indices i and j in the array such that: - abs(nums[i] - nums[j]) <= t - abs(i - j) <= k if t < 0: return False dict = {} for i, num in enumerate(nums): bucket = num // (t + 1) if bucket in dict: return True if bucket - 1 in dict and abs(num - dict[bucket - 1]) <= t: return True if bucket + 1 in dict and abs(num - dict[bucket + 1]) <= t: return True dict[bucket] = num if i >= k: del dict[nums[i - k] // (t + 1)] return False"},{"question":"Given an array of integers, find the maximum sum of a contiguous subarray. The array may contain both positive and negative integers and the solution should have a time complexity of O(n). Example: Input: [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The contiguous subarray [4,-1,2,1] has the largest sum = 6. Note: Implement the solution using Kadane\'s Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane\'s Algorithm. Parameters: nums (list): A list of integers Returns: int: The maximum sum of a contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A company has a collection of M machines arranged in a linear sequence. Each machine can perform a specific type of job. There are N jobs that need to be processed by the machines, each having a unique difficulty level. Due to machine limitations, each machine can only process jobs within a certain range of difficulty levels. The i-th machine can process jobs with difficulty levels between A_i and B_i (inclusive). The company now needs to answer Q queries. Each query specifies a job and asks for the total number of machines capable of processing that job. You are to write a program that answers the Q queries. -- Constraints -- - 1 ≤ M ≤ 2*10^5 - 1 ≤ N ≤ 2*10^5 - 1 ≤ Q ≤ 2*10^5 - 1 ≤ A_i, B_i, Job_difficulty ≤ 10^9 - All values in the input are integers. -- Input -- Input is given from Standard Input in the following format: ``` M N Q A_1 B_1 ... A_M B_M Job_1_difficulty ... Job_N_difficulty Job_for_query_1 ... Job_for_query_Q ``` -- Output -- Print Q lines. The j-th line should contain the answer to the j-th query. -- Sample Input -- ``` 3 4 3 1 10 5 15 10 20 2 7 12 20 2 12 20 ``` -- Sample Output -- ``` 1 2 2 ``` -- Explanation -- - Query 1: The job with difficulty 2 can only be processed by the first machine. (1 ≤ 2 ≤ 10) - Query 2: The job with difficulty 12 can be processed by the second and third machines. (5 ≤ 12 ≤ 15 and 10 ≤ 12 ≤ 20) - Query 3: The job with difficulty 20 can be processed by the third machine. (10 ≤ 20 ≤ 20)","solution":"def count_machines_for_jobs(queries, A, B): Given a list of job difficulties (queries) and the ranges of difficulty that each machine can handle (A and B lists), return a list of the number of machines that can handle each job. results = [] for job in queries: count = 0 for a, b in zip(A, B): if a <= job <= b: count += 1 results.append(count) return results def process_input(): import sys input = sys.stdin.read data = input().split() index = 0 M = int(data[index]) index += 1 N = int(data[index]) index += 1 Q = int(data[index]) index += 1 A = [] B = [] for _ in range(M): A.append(int(data[index])) index += 1 B.append(int(data[index])) index += 1 job_difficulties = [] for _ in range(N): job_difficulties.append(int(data[index])) index += 1 queries = [] for _ in range(Q): queries.append(int(data[index])) index += 1 results = count_machines_for_jobs(queries, A, B) for result in results: print(result)"},{"question":"The Chef loves organizing his kitchen and regularly checks if the kitchen shelves are in an orderly fashion. A shelf is represented by an array of integers where each integer indicates the number of items stored in a particular compartment of the shelf. The Chef prefers that all the compartments have an equal number of items. To achieve this, he can perform an operation which involves taking one item from a compartment and moving it to another compartment. Given the current state of the shelf, determine the minimum number of operations required to make all compartments contain an equal number of items. If it is not possible, return -1. -----Input----- The first line contains an integer N, the number of compartments on the shelf. The second line contains N space-separated integers representing the number of items in each compartment. -----Output----- Output a single integer denoting the minimum number of operations needed to make all compartments have an equal number of items, or -1 if it is not possible. -----Constraints----- - 1 ≤ N ≤ 100,000 - 0 ≤ Items in a compartment ≤ 1,000,000 -----Example----- Input: 5 3 5 3 5 3 Output: 3 -----Explanation----- The 5 compartments have 3, 5, 3, 5, and 3 items respectively. The total number of items is 19, which is not divisible by the number of compartments (5), so it is not possible to make all compartments have an equal number of items. Thus, the output is -1. Example 2: Input: 4 2 4 6 8 Output: 4 Explanation: The 4 compartments have 2, 4, 6, and 8 items respectively. An equal division would result in each compartment having 5 items. The minimum operations needed are: - Move 1 item from the 3rd compartment (6 items) to the 1st compartment (2 items). - Move 1 item from the 4th compartment (8 items) to the 1st compartment (now 3 items). - Move 1 item from the 4th compartment (now 7 items) to the 2nd compartment (4 items). Hence, 4 operations are required to balance the shelf.","solution":"def min_operations_to_balance_shelf(N, compartments): total_items = sum(compartments) # Check if it\'s possible to balance the compartments if total_items % N != 0: return -1 target_items = total_items // N operations = 0 for compartment in compartments: if compartment > target_items: operations += compartment - target_items return operations"},{"question":"Write a function that takes a list of instructions to manipulate a digital clock display and returns the final time shown on the clock. The clock format is `HH:MM:SS` in 24-hour notation. ** INPUT ** You are provided a list of operations in the format `[op, val]`, where: - `op` can be `hours`, `minutes`, or `seconds` - `val` is an integer and can be positive (to add time) or negative (to subtract time) Initially, the clock is set to `00:00:00`. ** OUTPUT ** Return the final time shown on the clock as a string in the format `HH:MM:SS`. ** ASSUMPTIONS ** - The operations will always lead to a valid time - The starting time is `00:00:00` - The maximum possible time after applying all operations will not exceed `23:59:59` - `val` will range from `-1000000` to `1000000` ** EXAMPLES ** 1. ``` Operations = [[\'hours\', 2], [\'minutes\', 30], [\'seconds\', 45]] Result: \'02:30:45\' ``` 2. ``` Operations = [[\'hours\', 23], [\'minutes\', 59], [\'seconds\', 60]] Result: \'00:00:00\' ``` 3. ``` Operations = [[\'hours\', 1], [\'minutes\', 120], [\'seconds\', -7200]] Result: \'01:00:00\' ```","solution":"def final_clock_time(operations): Manipulates a digital clock display based on given operations and returns the final time in HH:MM:SS format. from datetime import timedelta total_seconds = 0 for op, val in operations: if op == \\"hours\\": total_seconds += val * 3600 elif op == \\"minutes\\": total_seconds += val * 60 elif op == \\"seconds\\": total_seconds += val total_seconds %= 86400 # Total seconds in a day (24*60*60) hours = (total_seconds // 3600) % 24 total_seconds %= 3600 minutes = total_seconds // 60 seconds = total_seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"You are given a list of strings representing various products and their prices in the format `\\"product:price\\"`. Write a function `average_price(products)` that takes this list and returns the average price of all the products, rounded to two decimal places. If the list is empty, return `0.00`. Example: ```python products = [\\"apple:1.25\\", \\"banana:0.75\\", \\"milk:3.50\\"] print(average_price(products)) # Output: 1.83 products = [\\"apples:2.75\\", \\"bread:3.00\\"] print(average_price(products)) # Output: 2.88 products = [] print(average_price(products)) # Output: 0.00 ```","solution":"def average_price(products): Calculate the average price of products from a list of strings formatted as \\"product:price\\". If the list is empty, return 0.00. Args: products (list): List of strings with each string in the format \\"product:price\\". Returns: float: The average price of the products, rounded to two decimal places. if not products: return 0.00 total_price = 0 for product in products: name, price = product.split(\\":\\") total_price += float(price) average = total_price / len(products) return round(average, 2)"},{"question":"In this coding challenge, you are required to create a function named **find_max_diff** that takes a list of integers as input. The function should find the two distinct numbers in the list that have the maximum difference between them, and then return a list with the two numbers in ascending order and their difference. **Requirements:** - The function should return the two numbers in ascending order along with their difference. - If the list contains fewer than two elements, the function should return an empty list. **Example:** ```python find_max_diff([2, 3, 10, 6, 4, 8, 1, 12]) returns [1, 12, 11] find_max_diff([7, 2, 3, 4, 6]) returns [2, 7, 5] find_max_diff([3]) returns [] find_max_diff([]) returns [] ```","solution":"def find_max_diff(lst): Returns the two numbers in ascending order that have the maximum difference along with their difference in a list. If the input list contains fewer than two elements, return an empty list. if len(lst) < 2: return [] min_num = min(lst) max_num = max(lst) max_diff = max_num - min_num return [min_num, max_num, max_diff]"},{"question":"Task Given an array of integers that represents daily temperature readings, find the number of days until a warmer temperature for each day. If there is no future day for which this is possible, put `0` instead. # Example: For `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`, the output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Explanation: - For day `1` (temperature `73`), the next day `74` is warmer. The answer is `1`. - For day `2` (temperature `74`), the next day `75` is warmer. The answer is `1`. - For day `3` (temperature `75`), it takes `4` days to reach a warmer temperature `76`. The answer is `4`. - For day `4` (temperature `71`), it takes `2` days to reach a warmer temperature `72`. The answer is `2`. - For day `5` (temperature `69`), it takes `1` day to reach a warmer temperature `70`. The answer is `1`. - For day `6` (temperature `72`), the next day `76` is warmer. The answer is `1`. - For day `7` (temperature `76`), there is no day with a warmer temperature. The answer is `0`. - For day `8` (temperature `73`), there is no day with a warmer temperature. The answer is `0`. # Input/Output - `[input]` integer array `temperatures` Array of integer temperatures. - `[output]` integer array Array with the number of days until a warmer temperature for each day.","solution":"def daily_temperatures(temperatures): Returns a list where each element is the number of days until a warmer temperature. If there is no future day (in the array) that\'s warmer, the value is 0. result = [0] * len(temperatures) stack = [] # this will store indexes of the temperatures array for curr_day, curr_temp in enumerate(temperatures): # Process stack items that are cooler than the current temperature while stack and temperatures[stack[-1]] < curr_temp: prev_day = stack.pop() result[prev_day] = curr_day - prev_day stack.append(curr_day) return result"},{"question":"You are given an array of integers where each element represents the height of a histogram bar. The width of each bar is 1. Calculate the area of the largest rectangle that can be formed within the bounds of the histogram. **Input:** - An array of integers `heights` where each integer represents the height of a histogram bar. **Output:** - A single integer representing the area of the largest rectangle that can be formed within the histogram. **Examples:** ```python max_histogram_area([2, 1, 5, 6, 2, 3]) => 10 max_histogram_area([2, 4]) => 4 ```","solution":"def max_histogram_area(heights): Returns the area of the largest rectangle that can be formed within the bounds of the histogram. :param heights: List[int] - List of integers representing the heights of the histogram bars :return: int - The area of the largest rectangle stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"# Puzzle Solver Your task in this kata is to design a function that solves a classic type of puzzle that involves rectangles and L-shaped pieces. # Description You are given an `n x m` grid, and an unlimited number of L-shaped pieces (Tetrominoes), each of which can be rotated and mirrored in any orientation. Each L-shaped piece occupies exactly four cells in the grid. Your goal is to determine whether you can fill the entire grid without leaving any cells empty, so that the entire grid is fully covered by L-shaped pieces. Input: - `n` (an integer): the number of rows in the grid (1 <= n <= 1000) - `m` (an integer): the number of columns in the grid (1 <= m <= 1000) Output: - Return `True` if it\'s possible to cover the entire `n x m` grid using exactly `n*m//4` L-shaped pieces, and `False` otherwise. # Additional Notes: - The grid doesn\'t necessarily need to be square. - Assume an infinite supply of L-shaped pieces, but you can only use them to cover exactly four cells in the grid each time. - The puzzle is not solvable if the product `n*m` is not divisible by 4. # Example: ```python can_cover_grid(4, 4) # Returns: True can_cover_grid(3, 5) # Returns: False ```","solution":"def can_cover_grid(n, m): Determines if a given n x m grid can be completely covered by L-shaped pieces. Each L-shaped piece covers exactly 4 cells in the grid. Args: n (int): The number of rows in the grid. m (int): The number of columns in the grid. Returns: bool: True if the grid can be fully covered by L-shaped pieces, False otherwise. # The grid can be fully covered by L-shaped pieces only if the product n*m is divisible by 4 return (n * m) % 4 == 0"},{"question":"You are given two strings, `S1` and `S2`, consisting of lowercase English letters. Your task is to find the length of the longest subsequence that is common to both strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements. For example, \\"abc\\", \\"ace\\", and \\"def\\" are subsequences of \\"abcdef\\". -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 1000), the length of the first string `S1`. The second line contains the string `S1`, which has exactly `n` characters. The third line contains a single integer `m` (1 ≤ m ≤ 1000), the length of the second string `S2`. The fourth line contains the string `S2`, which has exactly `m` characters. -----Output----- Output a single integer - the length of the longest common subsequence of `S1` and `S2`. -----Examples----- Input 6 abcdef 6 acdfgh Output 4 Input 5 abcde 3 ace Output 3 -----Note----- In the first sample case, the longest common subsequence between \\"abcdef\\" and \\"acdfgh\\" is \\"acdf\\", with length 4. In the second sample case, the longest common subsequence between \\"abcde\\" and \\"ace\\" is \\"ace\\", with length 3. The problem can be solved using dynamic programming, where you build a table `dp` of size `(n+1) x (m+1)` that stores the lengths of the longest common subsequences of substrings `S1[0..i-1]` and `S2[0..j-1]`. The table can be filled in a bottom-up manner, and the value at `dp[n][m]` will give the length of the longest common subsequence of the complete strings `S1` and `S2`.","solution":"def longest_common_subsequence(S1, S2): Returns the length of the longest common subsequence of S1 and S2. n = len(S1) m = len(S2) # Create a DP table with (n+1) x (m+1) dimensions dp = [[0] * (m+1) for _ in range(n+1)] # Fill the DP table for i in range(1, n+1): for j in range(1, m+1): if S1[i-1] == S2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # The length of the longest common subsequence will be in dp[n][m] return dp[n][m]"},{"question":"You are given two arrays representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return the sum as a new array in reverse order. Example: ``` Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8 Explanation: 342 + 465 = 807. The digits are stored in reverse order, so the output is also in reverse order. ``` Input: Two linked lists containing digits in reverse order. Output: A new linked list representing the sum in reverse order.","solution":"def add_two_numbers(l1, l2): Adds two numbers represented by linked lists where each node contains a single digit, and the digits are stored in reverse order. Args: l1 : List[int] - First number represented as a list of digits in reverse order. l2 : List[int] - Second number represented as a list of digits in reverse order. Returns: List[int] - Sum of the numbers as a list of digits in reverse order. result = [] carry = 0 max_length = max(len(l1), len(l2)) for i in range(max_length): digit1 = l1[i] if i < len(l1) else 0 digit2 = l2[i] if i < len(l2) else 0 total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) if carry: result.append(carry) return result"},{"question":"-----Problem Statement----- A \\"super prime\\" is a prime number that remains prime when its digits are cyclically rotated. For example, the prime number 197 remains prime (197, 719, 971) with each rotation of its digits, hence it is a super prime. In this problem, given a positive integer N, your task is to determine how many super primes exist in the range 1 to N inclusive. ----- Input ----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of exactly one line containing an integer N. ----- Constraints ----- - 1 ≤ T ≤ 100000 (10^5) - 1 ≤ N ≤ 100000 (10^5) ----- Output ----- For each test case, output the count of super primes in the range 1 to N. ----- Example ----- Input: 3 10 100 1000 Output: 4 13 25 ----- Explanation ----- Case #1: The super primes less than or equal to 10 are 2, 3, 5, and 7, making a total of 4. Case #2: The super primes less than or equal to 100 are 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97, making a total of 13. Case #3: The super primes less than or equal to 1000 are those in Case #2 plus additional super primes, making a total of 25.","solution":"def generate_primes_up_to(n): Returns a list of boolean values where the index is the number and the value at that index is True if the number is prime. sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return sieve def is_cyclic_prime(num, prime_sieve): Checks if num is a cyclic prime by rotating its digits and checking if all rotations are prime. digits = str(num) for i in range(len(digits)): rotated = int(digits[i:] + digits[:i]) if not prime_sieve[rotated]: return False return True def count_super_primes_upto_n(n, prime_sieve): Returns the count of super primes up to and including n. count = 0 for i in range(1, n + 1): if prime_sieve[i] and is_cyclic_prime(i, prime_sieve): count += 1 return count def super_primes(T, test_cases): For each integer N in the test cases, calculate the number of super primes between 1 and N inclusive. max_n = max(test_cases) prime_sieve = generate_primes_up_to(max_n) results = [] for n in test_cases: results.append(count_super_primes_upto_n(n, prime_sieve)) return results"},{"question":"You have just been hired by a bank to work on their new fraud detection system. One critical task is to identify if a series of transactions contains any fraudulent activity. A transaction is deemed fraudulent if it satisfies the following conditions: 1. Any transaction amount is negative (since a legitimate transaction cannot have a negative amount). 2. The total sum of transactions for a particular account exceeds a given limit within a specified time frame. --- # Transaction Details Each transaction is represented as a tuple containing: - Account ID (a unique identifier for the account, a string) - Transaction Amount (a float, the amount in USD) - Timestamp (an integer, representing the time of the transaction in seconds since the epoch) --- # Input You are given: 1. A list of transactions, where each transaction is represented as a tuple: `[(account_id, amount, timestamp), ...]` 2. An integer, `time_frame`, which specifies the time frame in seconds for evaluating the maximum allowable sum of transaction amounts. 3. A float, `limit`, which specifies the maximum allowable sum of transaction amounts within the given time frame. # Output Your task is to write a function: ```python def detect_fraud(transactions, time_frame, limit): ``` which takes in the list of transactions, the time frame, and the limit, and returns a list of account IDs that are involved in fraudulent activities. The list should be sorted in lexicographical order. # Constraints 1. The number of transactions will not exceed 1000. 2. The time frame will be a positive integer. 3. The limit will be a positive float. 4. Transaction timestamps are given in non-decreasing order. # Example ```python transactions = [ (\\"acc1\\", 200.0, 1609459200), (\\"acc2\\", -100.0, 1609459201), (\\"acc1\\", 300.0, 1609459900), (\\"acc3\\", 400.0, 1609459905), (\\"acc1\\", 100.0, 1609460200), (\\"acc2\\", 500.0, 1609460800) ] time_frame = 3600 limit = 500.0 print(detect_fraud(transactions, time_frame, limit)) ``` Should output: ```python [\\"acc1\\", \\"acc2\\"] ``` Explanation: - `acc2` has a negative transaction amount, so it is fraudulent. - `acc1` has transactions summing up to 600.0 USD within the time frame of 3600 seconds (from the first transaction at 1609459200 to the third transaction at 1609460200), which exceeds the limit of 500.0 USD. **Note**: In your implementation, consider using data structures that can efficiently handle the sliding window problem, such as deque, to check the sum of transactions within the specified time frame. This approach will help in managing and updating the sum dynamically without recalculating for each transaction.","solution":"from collections import deque, defaultdict def detect_fraud(transactions, time_frame, limit): fraudulent_accounts = set() account_transactions = defaultdict(deque) for account_id, amount, timestamp in transactions: if amount < 0: fraudulent_accounts.add(account_id) account_transactions[account_id].append((amount, timestamp)) current_sum = 0 valid_transactions = deque() while account_transactions[account_id]: t_amount, t_timestamp = account_transactions[account_id].popleft() if t_timestamp >= timestamp - time_frame: valid_transactions.append((t_amount, t_timestamp)) current_sum += t_amount account_transactions[account_id] = valid_transactions if current_sum > limit: fraudulent_accounts.add(account_id) return sorted(fraudulent_accounts)"},{"question":"Write a function `nearest_larger` that takes a list of integers `arr` and an integer `n`, and returns the smallest integer in `arr` that is larger than `n`. If no such integer exists, return -1. For example: ``` nearest_larger([1, 4, 6, 8, 9], 5) = 6. The smallest integer larger than 5 is 6. nearest_larger([3, 10, 2, 8, 15], 10) = 15. The smallest integer larger than 10 is 15. nearest_larger([3, 7, 5, 9], 9) = -1. There is no integer larger than 9. nearest_larger([2, 7, 3, 5], 1) = 2. The smallest integer larger than 1 is 2. ``` Input: - `arr` is a list of integers with `0 < len(arr) < 1e6` - `n` is an integer Output: - An integer, representing the smallest integer in the list that is larger than `n`, or -1 if such a number does not exist. Additional test cases can be included to ensure the function works for a variety of inputs.","solution":"def nearest_larger(arr, n): Returns the smallest integer in arr that is larger than n. If no such integer exists, returns -1. larger_elements = [x for x in arr if x > n] return min(larger_elements) if larger_elements else -1"},{"question":"You are given a string s consisting of lowercase English letters and an integer n. Your task is to rotate the string s by n positions to the left. If n is negative, rotate the string to the right by the absolute value of n. For example: ``` rotate_string(\\"abcdef\\", 2) = \\"cdefab\\" rotate_string(\\"abcdef\\", -2) = \\"efabcd\\" ``` If n is larger than the length of the string, it should wrap around. More examples in the test cases. Good luck!","solution":"def rotate_string(s, n): Rotates the string s by n positions to the left. If n is negative, rotates to the right by the absolute value of n. length = len(s) if length == 0: return s n = n % length # Performing the effective rotation return s[n:] + s[:n]"},{"question":"Alice is planning a grand dinner and inviting her friends to a long dinner table. She set the plates in such a way that the distance between each consecutive guest is the same. Alice has a certain number of guests and a certain length of the table. She wants to ensure everyone is seated perfectly while utilizing the full length of the table. Given the number of guests and the length of the table, calculate the maximum possible distance between any two consecutive guests. -----Input:----- - First line will contain T, number of test cases. - Each test case contains two space-separated integers N (Number of guests) and L (Length of the table). -----Output:----- For each test case, output in a single line the maximum distance between two consecutive guests. -----Constraints:----- - 1 ≤ T ≤ 10^5 - 2 ≤ N ≤ 10^9 - 1 ≤ L ≤ 10^9 -----Sample Input:----- 1 5 20 -----Sample Output:----- 4","solution":"def max_distance_between_guests(N, L): Returns the maximum possible distance between any two consecutive guests given the number of guests N and the length of the table L. return L // (N - 1) def process_input(input_lines): Processes input lines to calculate max distances for multiple test cases. T = int(input_lines[0]) results = [] for i in range(1, T + 1): N, L = map(int, input_lines[i].split()) results.append(max_distance_between_guests(N, L)) return results"},{"question":"Given an integer array arr and a target integer x, return the indices of the two numbers such that they add up to x. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines. - The first line of each test case contains two integers: n (the number of elements in the array) and x (the target sum). - The second line contains n space-separated integers representing the elements of the array. -----Output----- For each test case, print a line with two space-separated integers, the indices (1-based) of the two numbers in the array that add up to x. If no such pair exists, print \\"None\\". -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ n ≤ 1000 - -10^5 ≤ arr[i], x ≤ 10^5 -----Example Input----- 2 4 9 2 7 11 15 3 6 3 2 4 -----Example Output----- 1 2 None -----Explanation----- In the first test case, arr[1] + arr[2] = 2 + 7 = 9. In the second test case, no two elements sum up to 6.","solution":"def find_two_sum_indices(arr, target): Given an array of integers and a target value, return the indices (1-based) of the two numbers such that they add up to the target value. If no such pair exists, return \\"None\\". num_to_index = {} for i, num in enumerate(arr): difference = target - num if difference in num_to_index: return (num_to_index[difference] + 1, i + 1) num_to_index[num] = i return \\"None\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, x = test_cases[i][0] arr = test_cases[i][1] result = find_two_sum_indices(arr, x) if result == \\"None\\": results.append(\\"None\\") else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"Alice has a garden with m different types of flowers. The flowers grow in rows, and flowers of the same type are indistinguishable. Alice wants to plant the flowers in such a way that no two rows have the same type of flower adjacent to each other either horizontally or vertically. She also wants to maximize the number of rows in her garden. Determine the maximum number of rows Alice can have in her garden and a valid planting configuration. -----Input----- The first line of input will contain one integer m (1 ≤ m ≤ 100), the number of types of flowers. Then, m lines will follow. The i-th line will contain f_{i}, the number of flowers of the i-th type (1 ≤ f_{i} ≤ 100). The total number of flowers does not exceed 100. -----Output----- The first line should contain a single integer, the maximum number of rows Alice can have. The following lines should represent the garden\'s configuration, each containing integers representing the types of flowers in each row. -----Examples----- Input 2 2 2 Output 2 1 2 2 1 Input 3 1 3 1 Output 2 1 2 3 3 2 1 In the first example, Alice can plant one row with flower types 1 and 2 followed by another row with flower types 2 and 1. No two adjacent flowers in the same row are of the same type, and it maximizes the number of rows. In the second example, Alice can plant two rows, maximizing the use of given flowers while adhering to the conditions.","solution":"def max_rows(m, flowers): Determine the maximum number of rows Alice can have in her garden and a valid planting configuration. :param m: Number of different types of flowers :param flowers: List of integers representing the number of flowers of each type :return: Tuple with the maximum number of rows and the planting configuration # Find the maximum number of rows we can have total_flowers = sum(flowers) if total_flowers <= m: max_rows = 1 else: max_rows = total_flowers // m if total_flowers % m > 0: max_rows += 1 # Create the configuration config = [] for i in range(max_rows): row = [] for j in range(m): if flowers[j] > 0: row.append(j + 1) flowers[j] -= 1 config.append(row) return max_rows, config def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) flowers = [int(data[i + 1]) for i in range(m)] max_row_count, config = max_rows(m, flowers) print(max_row_count) for row in config: print(\' \'.join(map(str, row)))"},{"question":"Farmer John has a collection of cows, and he wants to arrange them in a line for a parade. Each cow has a specific height, represented by an integer. The arrangement of cows should follow a strict rule: no two adjacent cows in the line should have the same height, and the height of cows should alternate between strictly increasing and strictly decreasing. Formally, for any three consecutive cows with heights [h1, h2, h3] in the line, the following must hold true: - if h2 > h1, then h3 must be < h2 - if h2 < h1, then h3 must be > h2 Given a list of cow heights, determine the length of the longest possible parade that can be formed following the above rules. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of cows. - The second line of each test case contains N space-separated integers representing the heights of the cows. -----Output----- For each test case, print a single line containing one integer — the length of the longest possible parade. -----Constraints----- - 1 le T le 10^4 - 1 le N le 10^5 - 1 le text{Height of each cow} le 10^9 - The total sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 5 1 3 2 5 4 6 1 2 3 4 5 6 -----Example Output----- 5 2 -----Explanation----- Example case 1: The entire sequence [1, 3, 2, 5, 4] follows the rules, so the length is 5. Example case 2: Only subsequences like [1, 2] or [2, 3] can be used, as no longer subsequence alternates as required. The length is 2.","solution":"def longest_parade_length(n, heights): if n == 0: return 0 if n == 1: return 1 count = 1 prev_diff = 0 for i in range(1, n): diff = heights[i] - heights[i - 1] if (diff > 0 and prev_diff <= 0) or (diff < 0 and prev_diff >= 0): count += 1 prev_diff = diff return count def process_input(test_cases): results = [] for n, heights in test_cases: results.append(longest_parade_length(n, heights)) return results # Reading input and returning the results for all test cases def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 heights = list(map(int, lines[index].strip().split())) index += 1 test_cases.append((n, heights)) return test_cases"},{"question":"Task: You are given a function called **find_triplets** which needs to identify all unique triplets in the list which gives the sum of zero. # Rules/Notes: * Every triplet must be unique and must not be duplicated in the output. * Input list can have both positive and negative integers. * The elements in the triplet should be listed in ascending order and the triplets themselves should be ordered in ascending order inside the result list. * If no such triplets are found, return an empty list. # Input: * A list of integers, nums (length of the list is [0, 1000]) # Output: * A list of lists, where each sublist is a triplet that sums up to zero. Function Signature: ```python def find_triplets(nums: List[int]) -> List[List[int]]: # Your code here ``` Examples: Input: ```python find_triplets([0, -1, 2, -3, 1]) ``` Output: ```python [[-3, 1, 2], [-1, 0, 1]] ``` Input: ```python find_triplets([1, -2, 1, 0, 5]) ``` Output: ```python [[-2, 1, 1]] ``` Input: ```python find_triplets([1, 2, 3]) ``` Output: ```python [] ``` Input: ```python find_triplets([-1, 0, 1, 2, -1, -4]) ``` Output: ```python [[-1, -1, 2], [-1, 0, 1]] ```","solution":"from typing import List def find_triplets(nums: List[int]) -> List[List[int]]: nums.sort() triplets = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"You are given a string S consisting of lowercase alphabetic characters. Your task is to determine whether the string S is a palindrome permutation. A palindrome permutation is a string that can be rearranged to form a palindrome. For example, the string \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. -----Input:----- A single line containing the string S. -----Output:----- A single line containing \\"YES\\" if the string S can be rearranged to form a palindrome, otherwise \\"NO\\". -----Constraints:----- - S consists of lowercase letters and has at most 1000 characters. -----Sample input----- aabb -----Sample output----- YES","solution":"def is_palindrome_permutation(s): Determines if the string s can be rearranged to form a palindrome. :param s: String consisting of lowercase alphabetic characters. :returns: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can be rearranged to form a palindrome if at most one character has an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Design a function that validates a given IPv4 address. An IPv4 address consists of four separate octets, where each octet is an integer between 0 and 255 (inclusive), separated by dots (`.`). The function should return `True` if the input string is a valid IPv4 address, and `False` otherwise. Each octet should not contain leading zeros unless it is a single digit `0`. Example ``` is_valid_ipv4(\\"192.168.1.1\\") === True is_valid_ipv4(\\"256.256.256.256\\") === False is_valid_ipv4(\\"192.168.01.1\\") === False is_valid_ipv4(\\"192.168.1\\") === False is_valid_ipv4(\\"192.168.1.abc\\") === False ``` # Constraints - The input will be a string. - You can assume the function will be called with a non-empty string. - Only digits and dot characters will be present in the string aside from being potentially wrapped by whitespace.","solution":"def is_valid_ipv4(ip): Validates if the input string is a valid IPv4 address. # Strip any surrounding whitespace ip = ip.strip() # Split the IP address by dot parts = ip.split(\\".\\") # IPv4 must have exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be digits only and not empty if not part.isdigit() or not part: return False # Convert part to integer num = int(part) # Each part must be in range [0, 255] if num < 0 or num > 255: return False # No leading zeros allowed in parts, except part == \'0\' if part != str(num): return False return True"},{"question":"Saitama is training to increase his speed and stamina. There are n training tracks located in the training ground. The i-th track has a length of d_{i} and a training difficulty of t_{i}. Saitama wants to minimize his total training difficulty while running each track at least once. However, due to limited stamina and time, he can only run m tracks in a day and wants to maximize the total distance covered in these m tracks. Write a program that, given the lengths and training difficulties of the tracks, finds the maximum total distance Saitama can cover in a day while ensuring the total training difficulty remains minimized. Input: The first line of input contains two integers n (1 ≤ n ≤ 100 000) and m (1 ≤ m ≤ n) — the number of training tracks and the number of tracks Saitama can run in a day. The i-th of next n lines contains two integers d_{i} and t_{i} (1 ≤ d_{i}, t_{i} ≤ 1 000 000) — the length and training difficulty of the i-th track respectively. Output: Print two integers: the maximum total distance covered in a day and the minimized total training difficulty. Examples: Input 5 3 10 3 20 5 30 1 40 2 50 4 Output 120 8 Input 4 2 5 2 15 4 25 1 35 3 Output 60 3 Note: For the first sample case, Saitama can run the tracks with lengths 30, 40, and 50. This gives a total distance of 120 and the combined training difficulty of 1 (for 30) + 2 (for 40) + 4 (for 50) = 8. For the second sample case, Saitama can run the tracks with lengths 25 and 35. This gives a total distance of 60 and the combined training difficulty of 1 (for 25) + 3 (for 35) = 4.","solution":"def maximize_distance_minimize_difficulty(n, m, tracks): tracks.sort(key=lambda x: (-x[0], x[1])) # Sort by length descending, then by difficulty ascending selected_tracks = tracks[:m] total_distance = sum(track[0] for track in selected_tracks) total_difficulty = sum(track[1] for track in selected_tracks) return total_distance, total_difficulty"},{"question":"Given a list of integers, write a function that transforms each number into its \\"mirror\\" in a specific range, meaning that if the number is at one end of the given range, it should be converted to the equivalent number at the other end. The \\"mirror\\" of a number `x` in the range `[a, b]` is calculated as `a + (b - a) - (x - a)`. For example, if the range is [1, 10] and the number is 3, its mirror would be 8, because you move 2 positions away from 1 (the start of the range) to 3, and then you move 2 positions back from 10 (the end of the range) to get 8. Write a function that takes a list of integers and a range, and returns a new list of integers with each number replaced by its mirror in the specified range. # Function Signature ```python def mirror_numbers(nums: List[int], start: int, end: int) -> List[int]: pass ``` # Input - `nums` (List[int]): A list of integers. - `start` (int): The lower bound of the range. - `end` (int): The upper bound of the range. # Output - Return a new list of integers where each integer from the input list is replaced by its mirror in the given range. # Constraints - The input list may contain zero or more integers. - The start will always be less than or equal to the end. - All integers from the input list will lie in the inclusive range `[start, end]`. # Examples ```python print(mirror_numbers([2, 5, 9], 1, 10)) # [9, 6, 2] print(mirror_numbers([1, 4, 7, 10], 1, 5)) # [5, 2, 4, 1] print(mirror_numbers([3, 3, 3], 3, 6)) # [6, 6, 6] print(mirror_numbers([], 0, 100)) # [] ```","solution":"from typing import List def mirror_numbers(nums: List[int], start: int, end: int) -> List[int]: Transform each number into its \\"mirror\\" in the specified range. Args: nums (List[int]): A list of integers. start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: List[int]: A new list of integers where each integer from the input list is replaced by its mirror in the given range. return [start + (end - x) for x in nums]"},{"question":"Implement a function called `compress_string` that takes a non-empty string consisting of lowercase alphabetical characters. The function should return a new string where each group of consecutive identical characters in the input string is replaced by a single character followed by the count of that group if the count is greater than 1. For example: ```python compress_string(\'aaabbc\') => \'a3b2c\' compress_string(\'aabbaa\') => \'a2b2a2\' compress_string(\'abcd\') => \'abcd\' compress_string(\'zzzz\') => \'z4\' ``` **Constraints:** - The input string will only contain lowercase English letters. - The function should return a string as output.","solution":"def compress_string(s): Compresses the given string by replacing groups of consecutive identical characters with the character followed by the count if greater than 1. Parameters: s (str): The input string consisting of lowercase alphabetical characters. Returns: str: The compressed version of the input string. if not s: return \\"\\" compressed = [] count = 1 last_char = s[0] for char in s[1:]: if char == last_char: count += 1 else: if count > 1: compressed.append(f\'{last_char}{count}\') else: compressed.append(last_char) last_char = char count = 1 if count > 1: compressed.append(f\'{last_char}{count}\') else: compressed.append(last_char) return \'\'.join(compressed)"},{"question":"Write a function that takes a string containing digits and letters and returns a new string with the digits sorted in ascending order while keeping the letters in their original places. For example, for the input string \\"a3b2c1\\", the function should return \\"a1b2c3\\".","solution":"def sort_digits_keep_letters(s): Returns a new string with digits sorted in ascending order while keeping the letters in their original places. :param s: A string containing digits and letters :return: A new string with the digits sorted in ascending order digits = sorted([c for c in s if c.isdigit()]) digit_idx = 0 result = [] for c in s: if c.isdigit(): result.append(digits[digit_idx]) digit_idx += 1 else: result.append(c) return \'\'.join(result)"},{"question":"An intergalactic merchant is transporting goods between planets and needs to minimize the risk of contraband detection. The merchant has containers with different weights and must deliver them such that the total weight in each trip does not exceed the spaceship\'s weight limit. Additionally, the merchant prefers to minimize the number of trips to reduce the risk. Each container can be included in only one trip, and the merchant can only carry containers with weights summing up to less than or equal to the spaceship\'s weight limit in each trip. Your task is to determine the minimum number of trips the merchant needs to deliver all containers. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n (1 le n le 10^5) — the number of containers, and W (1 le W le 10^9) — the maximum weight the spaceship can carry in one trip. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le W) — the weights of the containers. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer on a new line — the minimum number of trips needed to deliver all containers. -----Example----- Input 2 5 10 1 1 1 9 8 3 7 2 3 5 Output 3 2 -----Note----- In the first test case, we can take the containers in the following way: 1. 9 2. 8 3. 1, 1, 1 In the second test case, we can take the containers in the following way: 1. 2, 5 2. 3","solution":"def min_trips(t, test_cases): results = [] for case in test_cases: n, W, weights = case weights.sort(reverse=True) # Sort weights in descending order trips = 0 i = 0 while i < n: remaining_capacity = W while i < n and weights[i] <= remaining_capacity: remaining_capacity -= weights[i] i += 1 trips += 1 results.append(trips) return results"},{"question":"# Back-Story Alice loves to collect stamps. She maintains a collection where each stamp has a unique identifier number. Every day, she either adds new stamps to her collection or scraps existing ones. She wants to keep track of her collection by understanding the differences between two lists of stamps over time to see what has been added or removed. # Kata Task You will be given: - The original list of stamp identifiers - The updated list of stamp identifiers You need to return: - A list of identifiers added to the collection since the original list - A list of identifiers removed from the collection since the original list # Notes - Each list will contain unique positive integers. - Return the lists in the format: `[added, removed]` where `added` is a list of identifiers added to the original collection, and `removed` is a list of identifiers removed from the original collection. - The order of the lists and elements within them does not matter. # Example ``` original: [3, 5, 6, 9] updated: [4, 5, 6, 10] Output: [[4, 10], [3, 9]] ``` Explanation: - Identifiers `4` and `10` have been added. - Identifiers `3` and `9` have been removed.","solution":"def track_stamps_changes(original, updated): Returns a list of identifiers added to the collection and a list of identifiers removed from the collection since the original list. :param original: List of integers representing the original collection of stamps. :param updated: List of integers representing the updated collection of stamps. :return: A list containing two lists: - The first list contains identifiers added to the collection. - The second list contains identifiers removed from the collection. original_set = set(original) updated_set = set(updated) added = list(updated_set - original_set) removed = list(original_set - updated_set) return [added, removed]"},{"question":"Given an array of positive integers and a target number `k`, determine whether there\'s a combination of elements in the array that sums up to `k`. The same element from the array can be used multiple times. For example: ```python can_sum([2, 3, 5], 8) => True ``` Explanation: There are various combinations to achieve `8` with `[2, 3, 5]`, such as `[2, 2, 2, 2]` and `[3, 5]`. If no combination exists to reach the target sum, return `False`. For example: ```python can_sum([3, 5, 7], 1) => False ``` Explanation: There\'s no possible way to sum up to `1` with the given array. Note: The array will not contain negative numbers, and the target number will always be a non-negative integer. Your task is to implement the `can_sum` function to solve this problem. Here are further examples for clarification: ```python can_sum([7, 14], 300) => False can_sum([5, 3, 4, 7], 7) => True can_sum([2, 4], 7) => False ``` **Good Luck!**","solution":"def can_sum(arr, k): Returns True if a combination of elements from the array can sum up to k, otherwise False. Elements can be used multiple times. dp = [False] * (k + 1) dp[0] = True for i in range(k + 1): if dp[i]: for num in arr: if i + num <= k: dp[i + num] = True return dp[k]"},{"question":"Design a class `RangeSumMatrix` that manages a 2D matrix and supports two main methods: 1. `updateElement(int row, int col, int newValue)` Updates the value of the element at position (row, col) in the matrix to `newValue`. 2. `getSum(int row1, int col1, int row2, int col2)` Returns the sum of all the elements within the submatrix defined by the top-left coordinate (row1, col1) and the bottom-right coordinate (row2, col2). Example 1: Input [\\"RangeSumMatrix\\", \\"updateElement\\", \\"getSum\\", \\"updateElement\\", \\"getSum\\"] [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [0, 0, 10], [0, 0, 1, 1], [2, 2, 5], [1, 0, 2, 2]] Output [null, null, 24, null, 22] Explanation RangeSumMatrix rangeSumMatrix = new RangeSumMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); rangeSumMatrix.updateElement(0, 0, 10); // The matrix is now: // 10 2 3 // 4 5 6 // 7 8 9 rangeSumMatrix.getSum(0, 0, 1, 1); // returns 10 + 2 + 4 + 5 = 21 rangeSumMatrix.updateElement(2, 2, 5); // The matrix is now: // 10 2 3 // 4 5 6 // 7 8 5 rangeSumMatrix.getSum(1, 0, 2, 2); // returns 4 + 5 + 6 + 7 + 8 + 5 = 35 Example 2: Input [\\"RangeSumMatrix\\", \\"getSum\\", \\"updateElement\\", \\"getSum\\", \\"updateElement\\", \\"getSum\\"] [[[[2, 4], [6, 8]]], [0, 0, 1, 1], [1, 1, 5], [0, 0, 1, 1], [0, 0, 3], [0, 1, 0, 1]] Output [null, 20, null, 17, null, 7] Explanation RangeSumMatrix rangeSumMatrix = new RangeSumMatrix([[2, 4], [6, 8]]); rangeSumMatrix.getSum(0, 0, 1, 1); // returns 2 + 4 + 6 + 8 = 20 rangeSumMatrix.updateElement(1, 1, 5); // The matrix is now: // 2 4 // 6 5 rangeSumMatrix.getSum(0, 0, 1, 1); // returns 2 + 4 + 6 + 5 = 17 rangeSumMatrix.updateElement(0, 0, 3); // The matrix is now: // 3 4 // 6 5 rangeSumMatrix.getSum(0, 1, 0, 1); // returns 4 Constraints: There will be at most 500 operations considering both methods: `updateElement` and `getSum`. 1 <= rows, cols <= 100 rows == matrix.length cols == matrix[i].length 0 <= row, col < rows 0 <= row1 <= row2 < rows 0 <= col1 <= col2 < cols -10^9 <= matrix[i][j], newValue <= 10^9","solution":"class RangeSumMatrix: def __init__(self, matrix): Initialize the RangeSumMatrix with the given 2D matrix. self.matrix = matrix def updateElement(self, row, col, newValue): Update the value of the matrix at the given (row, col) position to newValue. self.matrix[row][col] = newValue def getSum(self, row1, col1, row2, col2): Return the sum of the elements in the submatrix defined by (row1, col1) and (row2, col2). sum_val = 0 for i in range(row1, row2 + 1): for j in range(col1, col2 + 1): sum_val += self.matrix[i][j] return sum_val"},{"question":"Program a function `remove_odd_even(arr)` where `arr` is an array of integers. The function should return a new array that contains only the elements from `arr` that are either all even or all odd. Here\'s how the function should work: 1. If all elements in `arr` are even, return an array of all the even elements from `arr`. 2. If all elements in `arr` are odd, return an array of all the odd elements from `arr`. 3. If `arr` contains a mix of both odd and even numbers, return an empty array `[]`. - All integers in the provided array will be between -100 and 100. - The input array `arr` can contain up to 100 elements. Examples: ```python remove_odd_even([2, 4, 6, 8, 10]) # returns [2, 4, 6, 8, 10] because all elements are even remove_odd_even([1, 3, 5, 7, 9]) # returns [1, 3, 5, 7, 9] because all elements are odd remove_odd_even([1, 2, 3, 4, 5]) # returns [] because it contains mixed even and odd numbers ``` Constraints: - The function must check all numbers to determine whether they are all even or all odd. - You can use the modulo operator `%` to determine if a number is even (number % 2 == 0) or odd (number % 2 != 0).","solution":"def remove_odd_even(arr): Returns an array with only even elements if all elements are even, or only odd elements if all elements are odd, or an empty array if there are mixed even and odd elements. if not arr: return [] is_all_even = all(x % 2 == 0 for x in arr) is_all_odd = all(x % 2 != 0 for x in arr) if is_all_even: return [x for x in arr if x % 2 == 0] elif is_all_odd: return [x for x in arr if x % 2 != 0] else: return []"},{"question":"Alice is working on data analysis and needs to find the median of a list of integers. Write a function that receives a list of integers and returns the median value. If the list has an even number of elements, the function should return the average of the two middle numbers. ```if:shell In bash, the script is run with a list of integers as arguments. ```","solution":"def find_median(numbers): This function returns the median of a list of integers. If the list length is even, it returns the average of the two middle numbers. numbers_sorted = sorted(numbers) n = len(numbers_sorted) if n % 2 == 1: return numbers_sorted[n // 2] else: mid1 = numbers_sorted[n // 2 - 1] mid2 = numbers_sorted[n // 2] return (mid1 + mid2) / 2.0"},{"question":"Given a grid of size `m x n` initialized with all `0`s and several queries, each identified by a rectangle defined by four integers: `(r1, c1, r2, c2)` representing the top-left and bottom-right corners respectively, implement a function that performs the following operation: For each query, increment the value of each element within the defined rectangle by 1. After all queries have been processed, return the updated grid. You need to write a function that takes the dimensions `m` and `n` and a list of queries, then returns the updated grid. Function Signature: ```python def apply_queries(m: int, n: int, queries: List[Tuple[int, int, int, int]]) -> List[List[int]]: ``` **Example:** ```python m = 3 n = 3 queries = [(0, 0, 1, 1), (1, 1, 2, 2), (0, 0, 2, 2)] # Initial grid: # [ # [0, 0, 0], # [0, 0, 0], # [0, 0, 0] # ] # After first query (0, 0, 1, 1): # [ # [1, 1, 0], # [1, 1, 0], # [0, 0, 0] # ] # After second query (1, 1, 2, 2): # [ # [1, 1, 0], # [1, 2, 1], # [0, 1, 1] # ] # After third query (0, 0, 2, 2): # [ # [2, 2, 1], # [2, 3, 2], # [1, 2, 2] # ] # Output grid: # [ # [2, 2, 1], # [2, 3, 2], # [1, 2, 2] # ] ``` Constraints: - `1 <= m, n <= 100` - `1 <= len(queries) <= 1000` - `0 <= r1 <= r2 < m` - `0 <= c1 <= c2 < n` Make sure your function handles large inputs efficiently.","solution":"from typing import List, Tuple def apply_queries(m: int, n: int, queries: List[Tuple[int, int, int, int]]) -> List[List[int]]: # Initialize grid with all zeros grid = [[0 for _ in range(n)] for _ in range(m)] # Apply each query to the grid for r1, c1, r2, c2 in queries: for r in range(r1, r2 + 1): for c in range(c1, c2 + 1): grid[r][c] += 1 return grid"},{"question":"You have been given a string `s` consisting of lowercase English letters. Your task is to determine the minimum number of changes required to make `s` a palindrome. A palindrome is a string that reads the same forward and backward. A change involves replacing one character with another character. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The following `t` lines each contain a string `s` (1 ≤ |s| ≤ 1000). -----Output----- For each test case, print the minimum number of changes required to make `s` a palindrome. -----Examples----- Input 2 abca race Output 1 2","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes required to make the string `s` a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_changes_to_palindrome(s)) return results"},{"question":"Given an integer array and a positive integer `k`, return the maximum sum of any contiguous subarray of size `k`. For example, given the array `[2, 1, 5, 1, 3, 2]` and `k = 3`, the maximum sum subarray is `[5, 1, 3]` with a sum of `9`. `solve([2, 1, 5, 1, 3, 2], 3) = 9`. See test cases for more examples. Good luck! If you like subarray Katas, please try [Maximum subarray sum](https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c) [Minimum subarray sum](https://www.codewars.com/kata/5830192b17c8fd0f770001f9)","solution":"def solve(arr, k): Returns the maximum sum of any contiguous subarray of size `k`. Parameters: arr (list): An integer array. k (int): A positive integer representing the size of the subarray. Returns: int: The maximum sum of any contiguous subarray of size `k`. if not arr or k <= 0 or k > len(arr): return 0 max_sum = float(\'-inf\') current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if i >= k - 1: max_sum = max(max_sum, current_sum) current_sum -= arr[i - (k - 1)] return max_sum"},{"question":"You are working on a project management system and need to create a feature that identifies the top contributors based on the number of tasks they have completed. Given two lists of the same length like these: * contributors: `[\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"]` * tasks_completed: `[5, 15, 10, 7]` return the names of the three contributors who have completed the most tasks. **Note**: If multiple contributors have completed the same number of tasks, order them according to their original positions in the input list.","solution":"def top_contributors(contributors, tasks_completed): Returns a list of the top three contributors based on the number of tasks completed. Args: contributors (list of str): List of contributor names. tasks_completed (list of int): List of tasks completed corresponding to each contributor. Returns: list of str: List of names of the top three contributors. indexed_tasks = list(enumerate(tasks_completed)) sorted_indexed_tasks = sorted(indexed_tasks, key=lambda x: -x[1]) top_indices = [index for index, _ in sorted_indexed_tasks[:3]] return [contributors[i] for i in top_indices]"},{"question":"Given a string s, you need to find the length of the longest substring of s such that all its characters are unique (i.e., no duplicate characters). You are required to write a function that solves this problem. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - For each test case, there is a single line containing a string s. -----Output----- For each test case, output a single line containing the length of the longest substring with all unique characters. -----Constraints----- - 1 le T le 100 - 1 le |s| le 10^5 for each string s - The sum of the lengths of all strings over all test cases does not exceed 10^6 -----Example Input----- 3 abcabcbb bbbbb pwwkew -----Example Output----- 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. n = len(s) char_index = {} max_length = 0 start = 0 for i in range(n): if s[i] in char_index: start = max(char_index[s[i]] + 1, start) char_index[s[i]] = i max_length = max(max_length, i - start + 1) return max_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"Given a list of integers, write a function `longest_increasing_subsequence` that returns the length of the longest increasing subsequence in the list. An increasing subsequence is a subsequence that has all elements sorted in ascending order. For example: ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) === 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has length 4. longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) === 4 # Explanation: The longest increasing subsequence is [0, 1, 2, 3], which has length 4. longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) === 1 # Explanation: The longest increasing subsequence is [7], which has length 1. ``` Your function should have the signature: ```python def longest_increasing_subsequence(nums): ```","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of integers nums. if not nums: return 0 # Initialize the dp array where dp[i] will be the length of the longest increasing # subsequence ending at index i of nums dp = [1] * len(nums) # Build the dp array by comparing each pair of elements in the list for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The longest increasing subsequence is the maximum value in the dp array return max(dp)"},{"question":"Given an undirected graph with `n` vertices and `m` edges, you need to check if there is a cycle in the graph. If a cycle exists, return `True`. Otherwise, return `False`. -----Input----- The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. For each test case, the first line contains two space-separated integers `n` and `m` denoting the number of vertices and the number of edges in the graph, respectively. Each of the next `m` lines contains two space-separated integers `ui` and `vi`, denoting that there is an edge between vertices `ui` and `vi`. -----Output----- For each test case, output a single line either \\"True\\" or \\"False\\", indicating whether the graph contains a cycle. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ n ≤ 100 - 0 ≤ m ≤ 4950 - 1 ≤ ui, vi ≤ n -----Example----- Input 3 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 5 4 1 2 2 3 3 4 4 5 Output: True False False -----Explanation----- In the first example, the graph contains a cycle formed by the vertices 1-2-3-1. In the second example, the graph does not contain any cycle. In the third example, the graph does not contain any cycle.","solution":"def is_cyclic_dfs(graph, vertex, visited, parent): visited[vertex] = True for neighbor in graph[vertex]: if not visited[neighbor]: if is_cyclic_dfs(graph, neighbor, visited, vertex): return True elif neighbor != parent: return True return False def has_cycle(n, edges): graph = [[] for _ in range(n)] for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) visited = [False] * n for v in range(n): if not visited[v]: if is_cyclic_dfs(graph, v, visited, -1): return True return False def cycle_detection(test_cases): results = [] for n, m, edges in test_cases: results.append(has_cycle(n, edges)) return results"},{"question":"Task Victoria is a game enthusiast who loves playing tabletop games with her friends. Recently, she came across a new game that requires managing resources and making tactical decisions. In this game, each player is given a set number of resources, and they need to distribute these resources efficiently to maximize their score. The game has a rule that allows players to redistribute their resources if and only if the sum of resources divided by the number of players is an integer. Victoria needs your help to check if the resources can be redistributed equally among a specified number of players. # Input/Output - `[input]` integer `resources` A positive integer representing the total number of resources available. - `[input]` integer `players` A positive integer representing the number of players. - `[output]` a boolean Return `True` if the resources can be equally redistributed among the players, otherwise `False`. # Example For `resources = 10` and `players = 2`, the output should be `True` because 10 resources can be equally distributed among 2 players (each player gets 5 resources). For `resources = 10` and `players = 3`, the output should be `False` because 10 resources cannot be equally distributed among 3 players (each player would get an incomplete fraction). For `resources = 33` and `players = 11`, the output should be `True` because 33 resources can be equally distributed among 11 players (each player gets 3 resources). For `resources = 32` and `players = 6`, the output should be `False` because 32 resources cannot be equally distributed among 6 players (each player would get an incomplete fraction).","solution":"def can_redistribute(resources, players): Determines if the resources can be equally redistributed among the players. Args: resources (int): A positive integer representing the total number of resources available. players (int): A positive integer representing the number of players. Returns: bool: True if the resources can be equally redistributed among the players, otherwise False. return resources % players == 0"},{"question":"You are developing a website, and part of its functionality is to store user details such as age and username. You need to implement a function called `add_user` that takes a dictionary of existing users, an age, and a username. Your task is to: - Add the new user to the dictionary if the username is not already taken. - Return `True` if the user was successfully added. - Return `False` if the username is already taken or if the age is not a positive integer. # Example: ```python users = {\\"alice\\": 30, \\"bob\\": 25} add_user(users, 22, \\"charlie\\") == True # \\"charlie\\" successfully added add_user(users, 35, \\"alice\\") == False # \\"alice\\" already exists add_user(users, -5, \\"dave\\") == False # Invalid age ```","solution":"def add_user(users, age, username): Adds a new user to the dictionary if the username is not already taken and the age is a positive integer. Args: users (dict): Dictionary of existing users with usernames as keys and ages as values. age (int): The age of the new user. username (str): The username of the new user. Returns: bool: True if the user was successfully added, False otherwise. if isinstance(age, int) and age > 0 and username not in users: users[username] = age return True return False"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the maximum sum of any contiguous subarray of length `k`. Examples: arr = [1, 2, 3, 4, 5], k = 2 return 9. Explanation: The subarray [4,5] has the greatest sum. arr = [2, 1, 5, 1, 3, 2], k = 3 return 9. Explanation: The subarray [5,1,3] has the greatest sum. arr = [2, 1, 5, 1, 3, 2], k = 4 return 11. Explanation: The subarray [1,5,1,3] has the greatest sum. Note: You may assume `k` is always smaller than or equal to the length of the list.","solution":"def max_sum_subarray_k(arr, k): Returns the maximum sum of any contiguous subarray of length `k`. if not arr or k > len(arr): return 0 # Initialize the maximum sum with the first subarray of length k max_sum = sum(arr[:k]) current_sum = max_sum # Use sliding window approach to find the maximum sum for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a rectangular grid of size n times m where each cell contains a certain number of \\"jewels\\". The rows are numbered from 1 to n and the columns from 1 to m. You are a collector trying to collect as many jewels as possible, starting from the cell (1,1) and moving to the cell (n,m). You can only move either right or down from a given cell. Write a program to determine the maximum number of jewels you can collect in such a journey. -----Input----- - The first line of input contains two integers n and m representing the dimensions of the grid. - The next n lines each contain m integers representing the number of jewels in each cell of the grid. -----Output----- Output a single integer, the maximum number of jewels that can be collected moving from the top-left to the bottom-right cell of the grid. -----Constraints----- - 1 leq n, m leq 1000 - 0 leq text{jewels in each cell} leq 1000 -----Example Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Example Output----- 12 Explanation: One possible path to collect the maximum number of jewels (12) can be: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) Another path can be: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def max_jewels_collected(n, m, grid): # Create a DP table to store the maximum jewels collected up to each cell. dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1] # Example usage n = 3 m = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_jewels_collected(n, m, grid)) # Output: 12"},{"question":"Alex is studying binary trees and is particularly interested in the concept of \\"symmetric trees.\\" A binary tree is said to be symmetric if it is a mirror image of itself. Your task is to help Alex implement a function to check if a given binary tree is symmetric. -----Input:----- - First line will contain T, the number of test cases. - For each test case: - The subsequent lines describe the binary tree in level-order traversal (each node value separated by space, use \'N\' to represent null nodes). -----Output:----- For each test case, output in a single line \\"YES\\" if the tree is symmetric, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 10 - 1 leq Number of nodes in the binary tree leq 10^4 - Each node\'s value is an integer such that -10^4 leq Value leq 10^4 -----Sample Input:----- 2 1 2 2 3 4 4 3 1 2 2 N 3 N 3 -----Sample Output:----- YES NO ---Note--- - In the first test case, the tree is symmetric because the left subtree is a mirror image of the right subtree. - In the second test case, the tree is not symmetric as the left subtree is not a mirror image of the right subtree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric(root): if not root: return True def is_mirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root.left, root.right) def build_tree(nodes): if not nodes or nodes[0] == \'N\': return None root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): current = queue.pop(0) if nodes[i] != \'N\': current.left = TreeNode(int(nodes[i])) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] != \'N\': current.right = TreeNode(int(nodes[i])) queue.append(current.right) i += 1 return root def check_symmetric_trees(test_cases): results = [] for nodes in test_cases: root = build_tree(nodes) if is_symmetric(root): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse input and return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T+1): nodes = lines[i].split() test_cases.append(nodes) results = check_symmetric_trees(test_cases) return \'n\'.join(results)"},{"question":"=====Function Descriptions===== .sum() The .sum() function returns the sum of an iterable of numbers. The optional second argument is the start value which defaults to 0. >>> sum([1, 2, 3]) 6 >>> sum((1, 2, 3), 4) 10 =====Problem Statement===== The town library keeps records of book borrowings by each member. Each book is identified by a unique ID and each borrowing record contains the member\'s ID and the book\'s ID. You are given two lists: one of the members\' IDs and one of the corresponding book IDs they have borrowed. Your task is to find out which member has borrowed the maximum number of distinct books, and output their ID. If there is a tie between multiple members, return the smallest ID. =====Input Format===== The first line contains n, the number of borrowing records. The second line contains n space-separated integers representing members\' IDs. The third line contains n space-separated integers representing the corresponding book IDs. =====Constraints===== 1 < n < 1000 1 < Member ID < 1000 1 < Book ID < 1000 =====Output Format===== Output the ID of the member who has borrowed the most distinct books. If there is a tie, return the smallest ID.","solution":"from collections import defaultdict def member_with_max_books(members, books): Finds the member with the maximum number of distinct books borrowed. Args: members: list of integers representing member IDs. books: list of integers representing book IDs. Returns: int: The member ID that borrowed the maximum number of distinct books. borrow_records = defaultdict(set) for member, book in zip(members, books): borrow_records[member].add(book) max_books = 0 max_member = None for member, book_set in borrow_records.items(): if len(book_set) > max_books or (len(book_set) == max_books and member < max_member): max_books = len(book_set) max_member = member return max_member"},{"question":"Implement a function to evaluate if a given string is a palindrome, ignoring non-alphanumeric characters, and is case-insensitive. The function should return `True` if the string is a palindrome and `False` otherwise. For example: ```python var str = \\"A man, a plan, a canal: Panama\\" returns True var str = \\"race a car\\" returns False ```","solution":"def is_palindrome(s): Evaluates if a given string is a palindrome, ignoring non-alphanumeric characters and case. Args: s: str - The string to evaluate. Returns: bool - True if the string is a palindrome, False otherwise. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"Consider an array of integers representing the height of buildings in a row. An observer can see a building if and only if it is taller than all the buildings to its left. Your task is to return the number of buildings that can be seen from the left side of the row. For example: ```python count_visible_buildings([3, 7, 8, 3, 6, 1]) = 3, because the buildings with heights 3, 7, and 8 are visible. count_visible_buildings([1, 1, 1, 1]) = 1, because only the first building is visible. count_visible_buildings([4, 3, 2, 1]) = 1, because only the first building is visible. count_visible_buildings([1, 2, 3, 4, 5]) = 5, because all buildings are visible. count_visible_buildings([1, 3, 2, 5, 4, 6]) = 4, because the buildings with heights 1, 3, 5, and 6 are visible. ``` Do not modify the input array. More examples in the test cases. Good luck!","solution":"def count_visible_buildings(heights): Returns the number of buildings visible from the left side. if not heights: return 0 count = 1 max_height = heights[0] for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"Given a list of integers representing daily temperatures recorded over a period, your task is to find the longest streak of days with continuously increasing temperatures. For each day in the list, a \\"streak\\" is a successive series where each day\'s temperature is higher than the previous day\'s. If multiple streaks have the same length, return the longest streak that occurs first. If no such streak exists, return 0. Create a function `longest_increasing_streak(temperatures)` that takes in a list of integers and returns an integer representing the length of the longest increasing streak of temperatures. For example: ```python longest_increasing_streak([60, 61, 62, 59, 58, 63, 64, 66, 65, 68, 70, 69]) # Output: 4 (The streak 59 -> 58 -> 63 -> 64 -> 66) ``` Please ensure your solution is efficient and handles edge cases where the list might be empty or contains only one temperature reading.","solution":"def longest_increasing_streak(temperatures): if not temperatures: return 0 max_length = 0 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) # For the last streak return max_length"},{"question":"You are given an N x M grid representing a map of an archipelago of islands. Each cell in the grid either contains a \'1\' representing land or a \'0\' representing water. Two cells are considered part of the same island if they are both \'1\' and are adjacent vertically or horizontally (not diagonally). Your task is to count the number of distinct islands on the map. # Input Format - The first line contains two integers N and M, the dimensions of the grid. - The next N lines each contain a string of length M consisting of characters \'1\' or \'0\'. # Output Format - A single integer representing the number of distinct islands in the grid. # Constraints - 1 ≤ N, M ≤ 1000 - The grid contains only \'0\'s and \'1\'s. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` # Explanation There are three distinct islands in the given grid: 1. The top-left island formed by the cells (0,0), (0,1), (1,0), and (1,1). 2. The middle island formed by the cell (2,2). 3. The bottom-right island formed by the cells (3,3) and (3,4).","solution":"def count_islands(grid, n, m): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': island_count += 1 dfs(i, j) return island_count # Example Usage: n = 4 m = 5 grid = [ \\"11000\\", \\"11000\\", \\"00100\\", \\"00011\\" ] print(count_islands([list(row) for row in grid], n, m)) # Output: 3"},{"question":"A group of scientists is experimenting with Fibonacci sequences in a different form. Instead of the typical Fibonacci sequence where each number is the sum of the two preceding ones, they have defined a new sequence where each element is the sum of the previous three elements. Given the initial three elements, they want to calculate the nth element in this modified Fibonacci sequence. Can you help them? -----Input----- The first line contains an integer T (1 leq T leq 1000), the number of test cases. Each test case consists of a single line containing four integers a_1, a_2, a_3, n (0 leq a_1, a_2, a_3, n leq 10^{9}), representing the first three elements of the sequence and the position of the element to find, respectively. -----Output----- For each test case, output the nth element in the modified Fibonacci sequence on a new line. -----Examples----- Input 3 0 1 2 4 1 1 1 5 2 3 5 6 Output 4 3 21 -----Note----- In the first sample, the sequence is defined as follows: - a_1 = 0 - a_2 = 1 - a_3 = 2 - a_4 = a_1 + a_2 + a_3 = 0 + 1 + 2 = 3 - a_5 = a_2 + a_3 + a_4 = 1 + 2 + 3 = 6 and so on. The 4th element of this sequence is 3. In the second sample: - a_1 = 1 - a_2 = 1 - a_3 = 1 - a_4 = a_1 + a_2 + a_3 = 1 + 1 + 1 = 3 - a_5 = a_2 + a_3 + a_4 = 1 + 1 + 3 = 5 and so on. The 5th element of this sequence is 5. In the third sample: - a_1 = 2 - a_2 = 3 - a_3 = 5 - a_4 = a_1 + a_2 + a_3 = 2 + 3 + 5 = 10 - a_5 = a_2 + a_3 + a_4 = 3 + 5 + 10 = 18 - a_6 = a_3 + a_4 + a_5 = 5 + 10 + 18 = 33 and so on. The 6th element of this sequence is 33.","solution":"def modified_fibonacci(a1, a2, a3, n): Given the first three elements of the modified Fibonacci sequence and the position n, returns the nth element. if n == 1: return a1 elif n == 2: return a2 elif n == 3: return a3 sequence = [a1, a2, a3] for i in range(3, n): next_element = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_element) return sequence[n-1] def process_input(input_data): Processes the input data and produces the results for each test case. results = [] lines = input_data.strip().split(\\"n\\") T = int(lines[0]) for i in range(1, T + 1): a1, a2, a3, n = map(int, lines[i].split()) result = modified_fibonacci(a1, a2, a3, n) results.append(result) return results"},{"question":"**Implement** a function called `integerRange` that accepts two integers, `start` and `end`, and returns an array containing all the integers from `start` to `end` inclusive. If `start` is greater than `end`, the function should return an empty array. ``` // Examples integerRange(2, 6); // Returns [2, 3, 4, 5, 6] integerRange(10, 15); // Returns [10, 11, 12, 13, 14, 15] integerRange(5, 5); // Returns [5] integerRange(7, 2); // Returns [] ```","solution":"def integerRange(start, end): Returns a list of integers from start to end inclusive. If start is greater than end, returns an empty list. if start > end: return [] return list(range(start, end+1))"},{"question":"Write a function that takes an integer array of positive integers and a target sum, then returns all unique combinations in the array where the numbers sum to the target sum. Each number in the array can only be used once in the combination. # Example **Input:** ```python arr = [10,1,2,7,6,1,5] target = 8 ``` **Output:** ```python [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] ``` # Constraints - The same number may appear at different positions but should only be counted once per combination. - The solution set must not contain duplicate combinations. - The combinations can be returned in any order.","solution":"def combination_sum(arr, target): Returns all unique combinations in `arr` where the numbers sum to `target`. Each number in `arr` can only be used once in the combination. def backtrack(start, target, path): if target == 0: result.append(path) return for i in range(start, len(arr)): if i > start and arr[i] == arr[i - 1]: continue if arr[i] > target: break backtrack(i + 1, target - arr[i], path + [arr[i]]) arr.sort() result = [] backtrack(0, target, []) return result"},{"question":"You are a software engineer tasked with implementing functionality in a logistics application. One of the features to develop is a route optimizer for delivery trucks. Write a function that takes a list of delivery points, where each point is represented as a tuple of integers (x, y). The function should return the shortest route that starts from the origin point (0, 0), visits each delivery point exactly once, and then returns to the origin. You may use the Euclidean distance to calculate the distance between two points. ```python def shortest_route(points): return \'\'\'Shortest route visiting each point exactly once and returns to the origin\'\'\' ``` # Example: ```python points = [(1, 2), (4, 6), (3, 7)] shortest_route(points) ``` This should return a list of tuples representing the optimized route, starting and ending with (0, 0), for example: ```python [(0, 0), (1, 2), (3, 7), (4, 6), (0, 0)] ``` # Notes: - If the list of delivery points is empty, the function should return [(0, 0), (0, 0)]. - The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as `sqrt((x2 - x1)**2 + (y2 - y1)**2)`. - Consider edge cases such as when all delivery points are the same. - Implement an efficient algorithm to handle a reasonable number of delivery points.","solution":"from itertools import permutations from math import sqrt def euclidean_distance(p1, p2): return sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def total_distance(route): total = 0 for i in range(len(route) - 1): total += euclidean_distance(route[i], route[i+1]) return total def shortest_route(points): if not points: return [(0, 0), (0, 0)] points_with_origin = [(0, 0)] + points best_route = None min_distance = float(\'inf\') for perm in permutations(points): current_route = [(0, 0)] + list(perm) + [(0, 0)] current_distance = total_distance(current_route) if current_distance < min_distance: min_distance = current_distance best_route = current_route return best_route"},{"question":"Task You are given an integer `n` representing the depth of a symmetric Pascal\'s triangle portion. Your task is to generate the Pascal\'s triangle up to the nth row (inclusive) and return it as a list of lists. Each inner list represents a row in the triangle. # Example: For `n = 4`, the Pascal\'s triangle should be: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] ] ``` For `n = 2`, the Pascal\'s triangle should be: ``` [ [1], [1, 1] ] ``` **Note:** The depth `n` will be a non-negative integer, and valid inputs will not exceed 100. There will be no tests with invalid input. **Function Signature:** ```python def generate_pascals_triangle(n: int) -> List[List[int]]: ``` # Constraints: **Input:** - `n`: An integer representing the depth of the Pascal\'s triangle. **Output:** - A list of lists, where each inner list contains integers representing a row of Pascal\'s triangle.","solution":"from typing import List def generate_pascals_triangle(n: int) -> List[List[int]]: Generate Pascal\'s triangle up to the nth row (inclusive). :param n: Integer representing the depth of the Pascal\'s triangle :return: A list of lists, where each inner list represents a row in Pascal\'s triangle if n == 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Sumit is planning a treasure hunt game for his friends. He has an array a of size N representing the map, where each element has a value indicating the number of treasures at that location. To make the game interesting, he sets a rule: in one move, a player can collect treasures from a continuous subarray of any length but cannot revisit any previously collected subarray. Find the minimum number of moves required to collect all the treasures on the map. -----Input:----- - The first line will contain N, the number of locations. - The second line will contain N space-separated integers representing the number of treasures at each location. -----Output:----- Output the minimum number of moves required to collect all the treasures. -----Constraints----- - 1 leq N leq 10000 - 0 leq a[i] leq 100 -----Sample Input:----- 5 1 2 0 3 4 -----Sample Output:----- 3","solution":"def min_moves_to_collect_treasures(N, a): Returns the minimum number of moves required to collect all the treasures on the map. moves = 0 i = 0 while i < N: if a[i] > 0: moves += 1 while i < N and a[i] > 0: i += 1 else: i += 1 return moves"},{"question":"# Task **_Given_** an *array/list [] of integers* , **_Find_** *the first element that appears an odd number of times in the array/list* ___ # Notes * **_Array/list_** size is *at least 5*. * **_Array/list\'s numbers_** *could be a **_mixture_** of positives, negatives and zeros*. * **_There will always be at least one number that appears an odd number of times*. ___ # Input >> Output Examples ``` findOdd([1,7,2,9,2,7,3,7]) ==> return (1) ``` **_Explanation_**: Since **_1_** is the first element in the array/list that appears an odd number of times. ___ ``` findOdd([-3,-3,7,5,3,5,5,7]) ==> return (5) ``` **_Explanation_**: Since **_5_** is the first element in the array/list that appears an odd number of times. ___ ``` findOdd([0,0,2,2,3,3,4,4,4]) ==> return (4) ``` **_Explanation_**: Since **_4_** is the first element in the array/list that appears an odd number of times. ___ ___ Enjoy Coding!","solution":"def findOdd(arr): Given an array/list of integers, find the first element that appears an odd number of times. # Create a dictionary to count the occurrences of each element counts = {} # Count the occurrences for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 # Find the first element with an odd count for num in arr: if counts[num] % 2 != 0: return num"},{"question":"Write a function called `flatten_list` which takes a list of lists and returns a single list with all the elements of the nested lists in the same order. The function should only handle a depth of one (i.e., it will not need to handle lists of lists of lists).","solution":"def flatten_list(nested_list): Flattens a list of lists into a single list. Parameters: nested_list (List[List[Any]]): A list of lists to be flattened. Returns: List[Any]: A single, flattened list containing all the elements of the nested lists. return [item for sublist in nested_list for item in sublist]"},{"question":"Complete the function so that it returns the area of the rectangle when given the length and width as inputs. ```python def calculate_area(length, width): Calculate the area of a rectangle. Args: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle. # Implement function here pass # Example usage: # calculate_area(5, 3) # should return 15 ```","solution":"def calculate_area(length, width): Calculate the area of a rectangle. Args: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle. return length * width # Example usage: # calculate_area(5, 3) # should return 15"},{"question":"Alex likes probabilistic algorithms and is particularly fascinated by the properties of random number generators. He devised a problem where he needs to test if two random number generators produce sequences with similar properties. Suppose Alex has two random number generators, RNG1 and RNG2. Both RNGs generate sequences of integers. Alex will generate two sequences using these RNGs and then compare certain statistical properties of the sequences to decide if they are similar. Your task is to determine if the sequences generated by RNG1 and RNG2 are statistically similar. For simplicity, the similarity can be determined by comparing the mean and standard deviation of the two sequences. If the absolute difference of the means of the sequences is at most 0.01 and the absolute difference of their standard deviations is at most 0.01, then the sequences are considered similar. -----Input----- The first line contains an integer n (2 le n le 10^6) - the length of the sequences. The second line contains n integers representing the sequence generated by RNG1. The third line contains n integers representing the sequence generated by RNG2. -----Output----- Print \\"Similar\\" if the sequences are statistically similar. Otherwise, print \\"Different\\". -----Example----- Input 4 1 2 3 4 2 3 4 5 Output Similar -----Note----- The mean of the first sequence is 2.5 and the standard deviation is 1.118 (approximately). The mean of the second sequence is 3.5 and the standard deviation is 1.118 (approximately). The absolute difference in means is 1.0, and the absolute difference in standard deviations is 0.0, which does not satisfy the similarity condition.","solution":"def calculate_mean(sequence): return sum(sequence) / len(sequence) def calculate_std_dev(sequence, mean): variance = sum((x - mean) ** 2 for x in sequence) / len(sequence) return variance ** 0.5 def are_sequences_similar(n, sequence1, sequence2): mean1 = calculate_mean(sequence1) mean2 = calculate_mean(sequence2) std_dev1 = calculate_std_dev(sequence1, mean1) std_dev2 = calculate_std_dev(sequence2, mean2) if abs(mean1 - mean2) <= 0.01 and abs(std_dev1 - std_dev2) <= 0.01: return \\"Similar\\" else: return \\"Different\\" # Example usage: n = 4 sequence1 = [1, 2, 3, 4] sequence2 = [2, 3, 4, 5] print(are_sequences_similar(n, sequence1, sequence2))"},{"question":"=====Function Descriptions===== .intersection() The .intersection() operator returns the intersection of a set and the set of elements in an iterable. Sometimes, the & operator is used in place of .intersection() operator, but it operates only on the set of elements in set. Set is immutable to the .intersection() operation (or & operation). Example >>> s = set(\\"Hacker\\") >>> print s.intersection(\\"Rank\\") set([\'a\', \'k\']) >>> print s.intersection(set([\'R\', \'a\', \'n\', \'k\'])) set([\'a\', \'k\']) >>> print s.intersection([\'R\', \'a\', \'n\', \'k\']) set([\'a\', \'k\']) >>> print s.intersection(enumerate([\'R\', \'a\', \'n\', \'k\'])) set([]) >>> print s.intersection({\\"Rank\\":1}) set([]) >>> s & set(\\"Rank\\") set([\'a\', \'k\']) =====Problem Statement===== The volunteers of an environmental organization are working on two separate projects: reforestation and cleaning of water bodies. Some volunteers are working on only one project, while some are involved in both. You are given two sets of volunteer IDs. One set contains the IDs of volunteers working on the reforestation project, and the other set contains the IDs of volunteers working on cleaning the water bodies project. The same volunteer might be in both sets. Your task is to find the total number of volunteers who are involved in both projects. =====Input Format===== The first line contains an integer, n, the number of volunteers working on the reforestation project. The second line contains n space separated volunteer IDs of those volunteers. The third line contains b, the number of volunteers working on cleaning the water bodies project. The fourth line contains b space separated volunteer IDs of those volunteers. =====Constraints===== 0 < Total number of volunteers < 1000 =====Output Format===== Output the total number of volunteers who are working on both projects.","solution":"def count_common_volunteers(n, reforestation_volunteers, b, water_cleaning_volunteers): Returns the count of volunteers who are involved in both the reforestation and water cleaning projects. reforestation_set = set(reforestation_volunteers) water_cleaning_set = set(water_cleaning_volunteers) common_volunteers = reforestation_set.intersection(water_cleaning_set) return len(common_volunteers)"},{"question":"Task Implement a function to calculate the total number of unique binary search trees (BSTs) that can be formed using `n` distinct values. Given a number `n`, where `n` is between `1` and `10` (inclusive), your task is to determine how many different BSTs can be constructed with exactly `n` distinct values. Example For `n = 2`, the result should be `2` (the two BSTs are: [1, null, 2] and [2, 1]). For `n = 3`, the result should be `5`. Input/Output - `[input]` integer `n` Number of distinct values to form the BST. Assume that `1 <= n <= 10`. - `[output]` integer Return the total number of unique BSTs that can be formed using `n` distinct values.","solution":"def num_trees(n): Returns the total number of unique binary search trees (BSTs) that can be formed using n distinct values. # Base case if n == 0 or n == 1: return 1 # Initialize a list to store the number of unique BSTs for each number from 0 to n dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 # Fill the dp array using dynamic programming for i in range(2, n + 1): for j in range(1, i + 1): dp[i] += dp[j - 1] * dp[i - j] return dp[n]"},{"question":"You are given a list of integers representing the prices of a stock on consecutive days. Determine the maximum profit you can achieve if you are allowed to buy one share of the stock and then sell it at a later date. You can perform at most one transaction. Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e., max profit = 0. Constraints: 1 <= prices.length <= 10^5 0 <= prices[i] <= 10^4","solution":"def max_profit(prices): Returns the maximum profit achievable from buying and selling one share of the stock. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Sorting a list of strings based on their lengths can be helpful in various applications where the order of data is important. Task: Your job here is to create a function that takes a list of strings and returns a new list where the strings are sorted based on their lengths in descending order. If two strings have the same length, they should maintain their original order from the input list. Description of edge cases: 1. If the input list is empty, return an empty list. 2. If the list contains non-string elements, ignore these elements while sorting. 3. If the list contains strings of equal length, maintain their input order in the output list. What the function and parameters look like: ```python type(lst) #=> list : list_of_strings type(sort_by_length(lst)) #=> list : sorted_list_of_strings ``` Some examples: ```python sort_by_length([\\"apple\\", \\"banana\\", \\"kiwi\\", \\"lemon\\"]) #=> [\\"banana\\", \\"apple\\", \\"lemon\\", \\"kiwi\\"] sort_by_length([\\"\\", \\"a\\", \\"bb\\", \\"ccc\\"]) #=> [\\"ccc\\", \\"bb\\", \\"a\\", \\"\\"] sort_by_length([\\"cat\\", \\"bat\\", 123, \\"rat\\"]) #=> [\\"cat\\", \\"bat\\", \\"rat\\"] sort_by_length([]) #=> [] ``` In this problem, you need to implement a function `sort_by_length` that meets the above requirements and edge cases. This function will help in organizing data in a meaningful way based on the length of the strings.","solution":"def sort_by_length(lst): Sort a list of strings by their lengths in descending order. Maintain the original order for strings with the same length. Parameters: lst (list): List of strings to be sorted Returns: list: List of strings sorted by their lengths in descending order # Filter out non-string elements from the input list filtered_list = [s for s in lst if isinstance(s, str)] # Sort the list by length in descending order while maintaining the original order for strings of equal length sorted_list = sorted(filtered_list, key=len, reverse=True) return sorted_list"},{"question":"A museum has gained a new exhibit that includes a series of connected rooms. The museum is modeled as an undirected graph where each room is a node and each hallway connecting two rooms is an edge. The curator wants to install surveillance cameras in the museum rooms such that every hallway is monitored by at least one camera. Given the number of rooms (nodes) and the hallways (edges) connecting them, determine the minimum number of cameras required to cover all hallways. -----Input:----- - The first line contains two integers N and M, representing the number of rooms (nodes) and the number of hallways (edges) respectively. - The next M lines each contain two integers u and v, indicating there is a hallway (edge) between rooms u and v. -----Output:----- Print a single integer, the minimum number of cameras needed to cover all hallways. -----Constraints:----- - 1 leq N leq 1000 - 0 leq M leq 10000 - 1 leq u, v leq N - The graph is connected. -----Sample Input:----- 5 5 1 2 1 3 2 3 4 5 3 4 -----Sample Output:----- 2 -----Explanation:----- Placing cameras in rooms 3 and 4 covers the hallways. Specifically, the camera in room 3 covers the hallways (1-3), (2-3), and (3-4). The camera in room 4 covers the hallway (4-5). Thus, all hallways are covered using 2 cameras.","solution":"def find_min_cameras(n, m, edges): from collections import defaultdict # Helper function for finding a vertex cover of the graph def find_vertex_cover(n, edges): adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize all vertices as not visited visited = [False] * (n + 1) vertex_cover = [] # Consider each edge for u, v in edges: if not visited[u] and not visited[v]: visited[u] = True visited[v] = True vertex_cover.append(u) vertex_cover.append(v) return len(vertex_cover) // 2 return find_vertex_cover(n, edges)"},{"question":"Given an array of n integers, perform a series of operations that bring all elements to zero by successively subtracting the minimum non-zero element from all non-zero elements of the array. Count and print the number of non-zero elements subtracted at each step in the order of operation. -----Input----- The first line of input contains an integer n, the number of elements in the array. The second line of input consists of n integers separated by space, representing the elements of the array. -----Output----- Output the number of non-zero elements subtracted at each step in separate lines. -----Constraints----- - 1 ≤ n ≤ 100 - 1 ≤ array[i] ≤ 100 -----Example----- Input: 5 6 7 2 0 5 Output: 4 3 2 1","solution":"def subtract_to_zero_operations(arr): Given a list of integers, perform operations to make all elements zero. Each operation involves subtracting the minimum non-zero element from all non-zero elements. The function returns the count of non-zero elements subtracted at each step. :param arr: List of integers :return: List of integers representing the number of non-zero elements subtracted at each step operations_count = [] while any(x != 0 for x in arr): # Find the minimum non-zero element min_non_zero = min(x for x in arr if x != 0) # Perform the subtraction operation arr = [x - min_non_zero if x != 0 else x for x in arr] # Count non-zero elements before the operation non_zero_count = sum(x != 0 for x in arr) + 1 # Add the non-zero count to the list of operations count operations_count.append(non_zero_count) return operations_count"},{"question":"You are given a list of n integers, nums, and an integer target. Write a function to determine the number of unique quadruplets (a, b, c, d) in the list such that they add up to the given target. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Explanation: There are three unique quadruplets in the list that add up to the target 0. Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] Explanation: The only unique quadruplet in the list is [2, 2, 2, 2] which adds up to 8. Note: - The solution set must not contain duplicate quadruplets. - You may return the answer in any order. Constraints: - 1 <= nums.length <= 200 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def four_sum(nums, target): Returns unique quadruplets in the list such that they add up to the given target. nums.sort() quadruplets = [] n = len(nums) for a in range(n - 3): if a > 0 and nums[a] == nums[a - 1]: continue for b in range(a + 1, n - 2): if b > a + 1 and nums[b] == nums[b - 1]: continue left, right = b + 1, n - 1 while left < right: total = nums[a] + nums[b] + nums[left] + nums[right] if total == target: quadruplets.append([nums[a], nums[b], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Write a function that accepts a list of integers and a target integer. Your function should return all unique combinations of integers from the list that add up to the target integer. Each number in the list may be used only once in each combination, and the order of numbers in the combination does not matter. The solution set must not contain duplicate combinations. Example: ```python def combination_sum(nums, target): # Your code here # Test cases print(combination_sum([2, 3, 6, 7], 7)) # Expected output: [[7]] print(combination_sum([2, 3, 5], 8)) # Expected output: [[3, 5]] print(combination_sum([2, 3, 6, 7, 10], 10)) # Expected output: [[3, 7], [10]] print(combination_sum([1, 2, 3, 4, 5], 5)) # Expected output: [[1, 4], [2, 3], [5]] ``` Constraints: 1. The input list will have at most 20 integers. 2. Each integer in the input list will be positive and less than or equal to 30. 3. The target integer will be positive and less than or equal to 50.","solution":"def combination_sum(nums, target): Returns all unique combinations of integers from nums that add up to the target. def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: # skip duplicates continue backtrack(i + 1, target - nums[i], path + [nums[i]]) nums.sort() # sort to handle duplicates result = [] backtrack(0, target, []) return result"},{"question":"Polycarp likes playing with binary trees and powers of two. He has a binary tree and he wants to maximize the sum of values in the nodes along any path from the root to any leaf. Additionally, Polycarp can only include values that are powers of two (e.g., 1, 2, 4, 8, 16, etc.) in his sum. A binary tree is represented as follows: 1. Each node has a value which is a non-negative integer. 2. Each node has at most two children, referred to as the left child and the right child. Polycarp needs your help to write a function that, given the root of a binary tree, returns the maximum sum of values along any path from the root to a leaf, considering only the node values that are powers of two. **Function Signature:** ```python def max_power_of_two_path_sum(root: TreeNode) -> int: ``` **Input:** - `root` - a TreeNode instance representing the root of the binary tree. Each TreeNode has: - `val` (an integer representing the node value) - `left` (a TreeNode instance representing the left child, or `None` if there is no left child) - `right` (a TreeNode instance representing the right child, or `None` if there is no right child) **Output:** - An integer representing the maximum sum of node values that are powers of two along any path from the root to a leaf node. **Example:** ```python # Example Tree: # 5 # / # 3 10 # / / # 1 4 2 8 # Input: # root = TreeNode(val=5, left=TreeNode(val=3, left=TreeNode(val=1), right=TreeNode(val=4)), # right=TreeNode(val=10, left=TreeNode(val=2), right=TreeNode(val=8))) # Output: 10 ``` Explanation: - The maximum sum considering only power of two values is obtained on the path from root 5 -> right child 10 -> right child 8. Since 10 is not a power of two, we take the sum of the root and rightmost child which is 5+8=13. **Constraints:** - The number of nodes in the tree is in the range [1, 10^4]. - The value of each node is in the range [0, 10^9].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_power_of_two(x): Helper function to determine if a number is a power of two. return (x & (x - 1) == 0) and x != 0 def max_power_of_two_path_sum(root: TreeNode) -> int: Returns the maximum sum of values along any path from the root to a leaf considering only the node values that are powers of two. def helper(node): if not node: return 0 if not node.left and not node.right: return node.val if is_power_of_two(node.val) else 0 left_sum = helper(node.left) right_sum = helper(node.right) max_child_sum = max(left_sum, right_sum) return node.val + max_child_sum if is_power_of_two(node.val) else max_child_sum return helper(root)"},{"question":"Given a list of \'n\' distinct integers, return all possible permutations of the elements in the list. For example, if the input list is [1, 2, 3], the function should return: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] Example 1: Input: [0, 1] Output: [ [0, 1], [1, 0] ] Example 2: Input: [1] Output: [ [1] ] Example 3: Input: [] Output: [ [] ] Constraints: - The length of the list, n, is between 0 and 7.","solution":"from typing import List def permute(nums: List[int]) -> List[List[int]]: def backtrack(start=0): if start == len(nums): result.append(nums[:]) for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] result = [] backtrack() return result"},{"question":"Problem description: Anna loves organizing marathons for charity. The marathons are spread over several cities, and every city has a unique appeal rating based on its popularity. Anna wants to maximize the total appeal of the cities chosen for the marathon route. However, there is a constraint on the maximum number of cities that can be included in the route. Help Anna select the cities in such a way that the total appeal is maximized while maintaining the route length within the given limit. -----Input----- - The first line contains an integer `T` denoting the number of test cases. - For each test case: - The first line contains two integers `N` (number of cities) and `K` (maximum number of cities that can be included in the route). - The second line contains N integers representing the appeal ratings of the cities. -----Output----- - For each test case, print the maximum possible total appeal that can be achieved by selecting up to `K` cities. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - 1 ≤ appeal ratings ≤ 10^9 - Sum of N over all test cases ≤ 10^6 -----Example----- Input: 2 5 2 1 2 3 4 5 3 3 10 20 30 Output: 9 60 -----Explanation----- For the first test case: - The best selection is cities with appeal ratings of 4 and 5, which sums to 9. For the second test case: - The best selection is selecting all cities as K equals N, which sums to the appeal ratings of 10, 20, and 30, hence the total appeal is 60.","solution":"def maximize_total_appeal(T, test_cases): results = [] for test in test_cases: N, K, appeal_ratings = test # Sort the appeal ratings in descending order sorted_appeals = sorted(appeal_ratings, reverse=True) # Sum the top K highest appeal ratings max_appeal = sum(sorted_appeals[:K]) results.append(max_appeal) return results"},{"question":"In a small village, there is a festival organized in the main square. The festival consists of multiple events happening throughout the day. Each event has a fixed start time and duration. You want to attend the maximum number of events from start to end without overlapping. Each event is described by its start time and duration. Your task is to determine the maximum number of non-overlapping events you can attend. For example, suppose there are 5 events with the following (start time and duration): 1. (1, 4) - This event starts at time 1 and lasts for 4 units of time. 2. (3, 3) - This event starts at time 3 and lasts for 3 units of time. 3. (0, 2) - This event starts at time 0 and lasts for 2 units of time. 4. (5, 2) - This event starts at time 5 and lasts for 2 units of time. 5. (8, 1) - This event starts at time 8 and lasts for 1 unit of time. You can attend event 3 from time 0 to 2, then event 1 from time 1 to 5, and finally event 5 from time 8 to 9, making it a total of 3 events. -----Input format----- The first line contains an integer N, the number of events. The next N lines describe each event. Each of these N lines contains two space-separated integers s and d, where s is the start time of the event and d is the duration of the event. -----Output format----- Print a single integer, the maximum number of non-overlapping events you can attend. -----Constraints----- 1 ≤ N ≤ 100000 1 ≤ s, d ≤ 1000000 -----Sample Input----- 5 1 4 3 3 0 2 5 2 8 1 -----Sample Output----- 3","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be attended. Args: events (list of tuple): A list of tuples where each tuple contains two integers (start time, duration). Returns: int: The maximum number of non-overlapping events. # Sorting events by their end time (start time + duration) sorted_events = sorted(events, key=lambda x: x[0] + x[1]) count = 0 last_end_time = -1 for start, duration in sorted_events: end_time = start + duration if start >= last_end_time: count += 1 last_end_time = end_time return count def parse_input(input_text): Parses the input text into a list of events. Args: input_text (str): The input text. Returns: List[Tuple[int, int]]: A list of events where each event is described as a tuple (start time, duration). lines = input_text.split(\'n\') events = [] for line in lines[1:]: if line.strip(): s, d = map(int, line.split()) events.append((s, d)) return events"},{"question":"Cynthia loves to organize her books in a unique way. She arranges all the books in a single row, and each book has a thickness given in an array. However, she only wants to keep rearranging books in such a way that the total thickness of any contiguous subarray of books is as close as possible to a target thickness value T that she has in mind. Help Cynthia find out the length of the smallest subarray whose total thickness is at least T. -----Input----- First line will contain integer N denoting the number of books. Second line will contain N integers representing the thickness of each book. Third line will contain the target thickness value T. -----Output----- The length of the smallest contiguous subarray whose total thickness is at least T. If no such subarray is found, output -1. -----Constraints----- 1 <= N <= 100000 1 <= thickness[i] <= 1000 1 <= T <= 100000000 -----Example----- Input: 6 2 3 1 2 4 3 7 Output: 2 Explanation: The subarray [4, 3] has the total thickness of 7, which is the smallest subarray with total thickness of at least 7. Another subarray [1, 2, 4] has the total thickness of 7, but its length is 3, which is larger than 2. Hence, the smallest subarray length is 2.","solution":"def smallest_subarray_with_at_least_sum(N, thickness, T): Returns the length of the smallest contiguous subarray whose total thickness is at least T. If no such subarray is found, returns -1. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(N): current_sum += thickness[right] while current_sum >= T: min_length = min(min_length, right - left + 1) current_sum -= thickness[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are tasked with implementing a text compression algorithm. The goal is to replace sequences of the same character with a single character followed by the number of its occurrences. This process is known as Run-Length Encoding (RLE). Write a function `rle_encode` which takes a string as input and returns its RLE encoding. If the encoded string is not shorter than the original string, the function should return the original string instead. For example: ```python def rle_encode(s): pass print(rle_encode(\\"aaabbcc\\")) # returns \\"a3b2c2\\" print(rle_encode(\\"abcd\\")) # returns \\"abcd\\" print(rle_encode(\\"aaa\\")) # returns \\"a3\\" ``` # Constraints: 1. The input string will consist of only lowercase alphabets (a-z). 2. The maximum length of the input string will not exceed 1000 characters.","solution":"def rle_encode(s): if not s: return s encoded = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded.append(s[i-1] + str(count)) count = 1 encoded.append(s[-1] + str(count)) encoded_str = \'\'.join(encoded) if len(encoded_str) < len(s): return encoded_str else: return s"},{"question":"You are given a list of strings, each of which consists of lowercase letters (\'a\' to \'z\'). Each string represents a sequence of characters, where each character can appear multiple times. Your task is to determine if you can rearrange the characters of each string such that no two adjacent characters are the same. If this is possible, output \\"YES\\"; otherwise, output \\"NO\\". -----Input----- The first line contains a single integer T (1 le T le 1000) — the number of test cases. The next T lines contain the descriptions of test cases — one per line. Each line contains a single string consisting of lowercase letters. The length of each string is between 1 and 10^5. -----Output----- Print T answers — one per test case. For each test case, print \\"YES\\" if it is possible to rearrange the characters such that no two adjacent characters are the same, otherwise print \\"NO\\". -----Example----- Input 4 aabb aaab abc zzzz Output YES NO YES NO","solution":"from collections import Counter def can_rearrange_adjacent_distinct(strings): results = [] for s in strings: count = Counter(s) max_freq = max(count.values()) if max_freq > (len(s) + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results def process_test_cases(T, test_cases): return can_rearrange_adjacent_distinct(test_cases)"},{"question":"You are given an array of student records where each record contains \'name\', \'age\', \'score\' separated by commas. Your task is to find the names of the students who fit the following criteria: 1. Age must be between 18 and 25 (inclusive). 2. Score must be 75 or higher. Return a list of names of the students who fit the criteria. The names should be sorted in ascending order. Example 1: Input: records = [\\"john,20,80\\", \\"jane,22,60\\", \\"bob,23,90\\", \\"alice,19,75\\"] Output: [\\"alice\\", \\"bob\\", \\"john\\"] Explanation: - \\"john\\" is within the age range and has a score of 80. - \\"jane\\" is within the age range but does not have the required score. - \\"bob\\" is within the age range and has a score of 90. - \\"alice\\" is within the age range and has a score of 75. Example 2: Input: records = [\\"joe,26,85\\", \\"emily,21,65\\", \\"jack,24,80\\"] Output: [\\"jack\\"] Explanation: - \\"joe\\" is not within the age range. - \\"emily\\" is within the age range but does not have the required score. - \\"jack\\" is within the age range and has a score of 80. Constraints: - records.length <= 500 - Each record string follows the format \\"name,age,score\\". - Each {name} consists of lowercase English letters and has a length between 1 and 10. - Each {age} and {score} are integers and have a length of at most 3 digits.","solution":"def eligible_students(records): Returns the names of students between ages 18 and 25 (inclusive) and with a score of 75 or higher, sorted in ascending order. :param records: List of student records in the format \\"name,age,score\\". :return: List of eligible student names sorted in ascending order. eligible = [] for record in records: name, age, score = record.split(\',\') age = int(age) score = int(score) if 18 <= age <= 25 and score >= 75: eligible.append(name) return sorted(eligible)"},{"question":"Write a function `max_difference(arr)` that takes a list of integers `arr` and returns the maximum difference between any two elements in the array such that the larger element comes after the smaller one. For example: ``` max_difference([7, 1, 2, 5]) = 4. The maximum difference is 5 - 1 = 4. max_difference([7, 5, 3, 1]) = -1. No larger element comes after a smaller one. max_difference([1, 2, 6, 4, 5, 2]) = 5. The maximum difference is 6 - 1 = 5. ``` If the array contains fewer than two elements, return `-1`. Input constraints: - The length of `arr` is in the range [0, 1e6]. - Each element in `arr` is an integer in the range [-1e6, 1e6]. Good luck!","solution":"def max_difference(arr): Returns the maximum difference between any two elements in the array such that the larger element comes after the smaller one. If the array contains fewer than two elements, return -1. if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Implement a function `find_anagrams` that takes a string `s` and returns a list of all unique anagrams that can be formed using the characters of `s`. The output list should be sorted in lexicographical order. You may assume that the input string contains only lowercase letters. For example: ```python find_anagrams(\\"abc\\") # [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] find_anagrams(\\"aab\\") # [\'aab\', \'aba\', \'baa\'] find_anagrams(\\"a\\") # [\'a\'] find_anagrams(\\"aa\\") # [\'aa\'] ``` You can use any relevant algorithms or Python standard library features to achieve this. Remember to handle edge cases, such as when the input string is empty.","solution":"from itertools import permutations def find_anagrams(s): Returns a sorted list of all unique anagrams that can be formed using the characters of the given string. if not s: return [] perm = permutations(s) unique_anagrams = sorted(set(\'\'.join(p) for p in perm)) return unique_anagrams"},{"question":"**Diamond Shape Drawer** You will be given an odd integer `d` (size) and your task is to draw a diamond shaped pattern using asterisks (\'*\'). Each line should be separated with \'n\'. Constraints: - `d` will always be an odd integer greater than 0. - No need to check for invalid parameters. - There should be no trailing whitespaces at the end of each line. For example, ```python diamond(5) ``` Output: ``` * *** ***** *** * ``` Another example: ```python diamond(3) ``` Output: ``` * *** * ``` The size of the diamond indicates the widest section, which will always be in the middle, and each side of the middle is symmetrical. Write a function to achieve this pattern generation.","solution":"def diamond(d): Returns a string representing a diamond shape of width \'d\'. :param d: an odd integer representing the widest part of the diamond. :return: A string representing the diamond shape. if d % 2 == 0 or d <= 0: return \\"\\" diamond_shape = [] for i in range(d): if i <= d // 2: stars = \'*\' * (2 * i + 1) else: stars = \'*\' * (2 * (d - i - 1) + 1) spaces = \' \' * ((d - len(stars)) // 2) diamond_shape.append(spaces + stars + spaces) return \'n\'.join(diamond_shape)"},{"question":"# Task: Your task is to write a function that takes a mathematical expression as a string and returns a simplified version of that expression. The expression contains positive integers, addition (`+`), and subtraction (`-`) operators without any parentheses. The format of the result must show each term only once, combining like terms. There must be a single space between terms and operators. If an operator `+` is followed by a negative number, convert it to `-` and the positive equivalent of that number. Similarly, if an operator `-` is followed by a negative number, convert it to `+`. The method is called `simplify_expression` and takes in one string in the form of `integer op integer ...`, where `integer` is a positive integer and `op` is `+` or `-`. # Examples: ```python simplify_expression(\\"2 + 3 + 4\\") => \\"9\\" ``` > __CALCULATION:__ 2 + 3 + 4 = 9 ```python simplify_expression(\\"5 + 7 - 2\\") => \\"10\\" ``` > __CALCULATION:__ 5 + 7 - 2 = 10 ```python simplify_expression(\\"10 - 3 + 6 - 5\\") => \\"8\\" ``` > __CALCULATION:__ 10 - 3 + 6 - 5 = 8 ```python simplify_expression(\\"1 + 5 - 10 + 7 - 2 + 3\\") => \\"4\\" ``` > __CALCULATION:__ 1 + 5 - 10 + 7 - 2 + 3 = 4 # Notes: - You may assume that the input expression is always valid and contains no spaces within numbers. - Handle integer overflow and underflow within the range of the standard integer limit of your programming language. - Take care of situations involving multiple operations leading to negative results.","solution":"def simplify_expression(expression): Simplify the given mathematical expression by combining like terms. Parameters: expression (str): A string representing the mathematical expression with positive integers, addition (+) and subtraction (-) operators. Returns: str: A string representing the simplified result of the expression. # Split the expression into tokens tokens = expression.split() # Initialize the result result = 0 # Initialize a variable to keep track of the current operation current_operation = \'+\' for token in tokens: if token in \'+-\': # Update the current operation current_operation = token else: # Convert the token to an integer number = int(token) if current_operation == \'+\': result += number else: result -= number return str(result)"},{"question":"You are given a list of strings, `words`, and another string, `target`. Create a function that determines if the `target` can be constructed by concatenating words from the list. Each word from the list can be used multiple times. Note: The order of concatenation matters. Example: ```python words = [\\"abc\\", \\"def\\", \\"abcd\\"] target = \\"abcdef\\" ``` Output: ``` True ``` Example: ```python words = [\\"cat\\", \\"dog\\", \\"fish\\"] target = \\"catdogcat\\" ``` Output: ``` True ``` Example: ```python words = [\\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\"] target = \\"aaaaaaaab\\" ``` Output: ``` False ``` Constraints: - The length of `target` does not exceed 1000. - All strings in the list `words` are non-empty and have lengths up to 20. - The list `words` contains at most 1000 strings. Function Signature: ```python def can_construct_target(words: List[str], target: str) -> bool: # Your implementation here ```","solution":"from typing import List def can_construct_target(words: List[str], target: str) -> bool: Determines if the target string can be constructed by concatenating words from the list. Each word from the list can be used multiple times. dp = [False] * (len(target) + 1) dp[0] = True # Empty string can always be constructed for i in range(1, len(target) + 1): for word in words: if i >= len(word) and target[i - len(word):i] == word and dp[i - len(word)]: dp[i] = True break return dp[len(target)]"},{"question":"A warehouse manager wants to optimize the layout of boxes in a shelving unit to minimize the time taken to access any given box. The shelves are arranged in rows, and each row has a fixed number of boxes it can hold. Each box is identified by a unique ID, has a specific size, and belongs to a specific category. The manager wants to ensure that boxes of the same category are placed in the same row, and no row exceeds its capacity. Write a function that will help the warehouse manager determine the minimum number of rows needed to store all the boxes according to the given constraints. # Function Signature: ```python def minimum_rows(boxes: List[Tuple[int, int, str]], row_capacity: int) -> int: ``` # Input: - `boxes`: A list of tuples, where each tuple represents a box in the format `(ID, size, category)`. - `ID` (integer) is a unique identifier for the box. - `Size` (integer) is the size of the box, which determines the amount of space it occupies on a shelf. - `Category` (string) is the category the box belongs to, which determines that boxes of the same category should be grouped together in the same row. - `row_capacity`: An integer representing the maximum total size of boxes that can fit in a single row. # Output: - Return an integer representing the minimum number of rows required to store all the boxes while satisfying the constraints. # Constraints: - The total number of boxes will not exceed 10^5. - The size of each box will be at least 1 and will not exceed the row capacity. - The row capacity will be a positive integer. - The number of distinct categories will not exceed 10^4. # Example: ```python # Example 1 boxes = [(1, 3, \'A\'), (2, 4, \'A\'), (3, 2, \'B\'), (4, 1, \'B\'), (5, 5, \'C\')] row_capacity = 6 print(minimum_rows(boxes, row_capacity)) # Output: 3 # Explanation: # Category \'A\' needs two rows: (1, 3, \'A\'), (2, 4, \'A\') => 3, 4 (row 1, size: 3+4 > 6) # Category \'B\' needs one row: (3, 2, \'B\'), (4, 1, \'B\') => 2, 1 (row 2, size: 2+1 <= 6) # Category \'C\' needs one row: (5, 5, \'C\') => 5 (row 3, size: 5 <= 6) # Example 2 boxes = [(1, 2, \'A\'), (2, 2, \'A\'), (3, 2, \'A\'), (4, 2, \'A\'), (5, 2, \'A\'), (6, 2, \'A\')] row_capacity = 4 print(minimum_rows(boxes, row_capacity)) # Output: 3 # Explanation: # Category \'A\' needs three rows: (1, 2), (2, 2) => row 1, (3, 2), (4, 2) => row 2, (5, 2), (6, 2) => row 3 ``` # Notes: - Efficient grouping of boxes into the fewest number of rows given the constraints can be tackled with greedy algorithms or dynamic programming, while considering the categories and sizes. - Handle very large inputs efficiently within the given constraints.","solution":"from typing import List, Tuple from collections import defaultdict def minimum_rows(boxes: List[Tuple[int, int, str]], row_capacity: int) -> int: Determine the minimum number of rows required to store all boxes while satisfying the constraints. - All boxes of the same category must be in the same row. - No row should exceed its capacity. # Create a dictionary to group the size of boxes by their category category_sizes = defaultdict(list) for ID, size, category in boxes: category_sizes[category].append(size) min_rows = 0 # For each category, determine the number of rows needed for sizes in category_sizes.values(): sizes.sort() # Sort the sizes to facilitate packing rows efficiently current_capacity = 0 for size in sizes: if current_capacity + size > row_capacity: # If adding this size exceeds row capacity, start a new row min_rows += 1 current_capacity = size else: current_capacity += size if current_capacity > 0: min_rows += 1 # Count the last row if it has any boxes return min_rows"},{"question":"Chef is organizing a cooking competition and wants to create a unique and fair way to distribute ingredients. He has a list of M ingredients, each with a specific quantity. The quantities may not be equal. Chef wants to distribute these ingredients to N contestants such that each contestant gets the exact required amount of every ingredient. However, the ingredients come in large jars, and once a jar is opened, the leftover ingredients can\'t be stored and will be wasted. Therefore, Chef wants to minimize the number of jars opened for each ingredient to ensure there is as little waste as possible. Given the quantity of each ingredient required by one contestant and the total available quantity of the same ingredient in one jar, determine the minimum number of jars Chef needs to open per ingredient to distribute the required quantities to all N contestants. -----Input:----- - The first line contains two integers N and M, the number of contestants and the number of ingredients. - The next M lines each contain two integers R_i and Q_i, where R_i is the amount of ingredient i required by one contestant, and Q_i is the quantity of ingredient i available in one jar. -----Output:----- Print M space-separated integers, where the ith integer is the minimum number of jars needed to fulfill the requirement for the ith ingredient. -----Constraints----- - 1≤N≤100000 1 leq N leq 100000 - 1≤M≤100 1 leq M leq 100 - 1≤R_i≤1000 1 leq R_i leq 1000 - 1≤Q_i≤1000000 1 leq Q_i leq 1000000 -----Sample Input:----- 3 2 4 10 5 20 -----Sample Output:----- 2 1 -----Explanation:----- - For the first ingredient: Each contestant needs 4 units, so 3 contestants need 3*4 = 12 units. Each jar has 10 units, so Chef needs 2 jars (10 + 10 = 20 units). - For the second ingredient: Each contestant needs 5 units, so 3 contestants need 3*5 = 15 units. Each jar has 20 units, so Chef needs 1 jar.","solution":"import math def minimum_jars(N, M, ingredients): result = [] for R_i, Q_i in ingredients: total_required = N * R_i jars_needed = math.ceil(total_required / Q_i) result.append(jars_needed) return result"},{"question":"Implement a function `count_vowels_consonants` that takes a string `s` as input and returns a tuple `(vowels, consonants)`, where `vowels` is the count of all the vowels (a, e, i, o, u) in the string and `consonants` is the count of all the consonants in the string. Ignore case (i.e., treat \'A\' the same as \'a\') and any non-alphabet characters should not be counted as either vowels or consonants. Input - A single string `s` consisting of alphanumeric characters and punctuations. Output - A tuple of two integers. Example ```python count_vowels_consonants(\\"Hello World!\\") # Should return (3, 7) because there are 3 vowels (e, o, o) and 7 consonants (H, l, l, W, r, l, d). ``` ```python count_vowels_consonants(\\"Python 3.8\\") # Should return (1, 5) because there is 1 vowel (o) and 5 consonants (P, y, t, h, n). ``` ```python count_vowels_consonants(\\"I love coding!\\") # Should return (5, 6) because there are 5 vowels (I, o, e, o, i) and 6 consonants (l, v, c, d, n, g). ``` Notes - You should not assume anything about the input string other than it is a string of arbitrary length. - Consider all letters as vowels (a, e, i, o, u) and have the function return a tuple of counts.","solution":"def count_vowels_consonants(s): Counts the number of vowels and consonants in the given string s. Ignores case and non-alphabet characters. Parameters: s (str): The input string to be evaluated. Returns: tuple: A tuple containing the count of vowels and consonants. s = s.lower() vowels_set = {\'a\', \'e\', \'i\', \'o\', \'u\'} vowels = sum(1 for ch in s if ch in vowels_set) consonants = sum(1 for ch in s if ch.isalpha() and ch not in vowels_set) return (vowels, consonants)"},{"question":"Implement a function that takes a list of integers and returns the list with duplicates removed, while preserving the order of the first occurrence of each element.","solution":"def remove_duplicates(lst): Returns a list with duplicates removed, preserving the order of first occurrences. Parameters: lst (list): A list of integers. Returns: list: A list without duplicates. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Emily wants to compare two strings for recurring patterns. She defines a recurring pattern as a substring that appears at least twice in both strings, possibly overlapping but not shifting. The goal is to find the longest recurring pattern that exists in both strings. For example, consider the strings: ``` abcabcabc bcabcabc ``` In the above example, the longest recurring pattern that appears in both strings is \\"bcabcabc\\". ----Input:---- The input consists of two strings S1 and S2. Each string is comprised of lowercase characters (\'a\'-\'z\'). ----Output:---- Output a single line containing the longest recurring pattern that appears in both strings. If there are multiple patterns of the same length, output any one of them. If no such pattern exists, output \\"No pattern found\\". ----Constraints:---- - 1 leq |S1|, |S2| leq 1000 ----Sample Input 1---- abcabcabc bcabcabc ----Sample Output 1---- bcabcabc ----Sample Input 2---- abcdefg hijklmn ----Sample Output 2---- No pattern found","solution":"def longest_recurring_pattern(S1, S2): Find the longest recurring pattern that appears in both strings S1 and S2. m, n = len(S1), len(S2) max_len = 0 result = \\"No pattern found\\" # Creating a DP table to store lengths of the longest common suffixes dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the DP table for i in range(m): for j in range(n): if S1[i] == S2[j]: dp[i+1][j+1] = dp[i][j] + 1 if dp[i+1][j+1] > max_len: max_len = dp[i+1][j+1] result = S1[i - max_len + 1:i + 1] else: dp[i+1][j+1] = 0 return result"},{"question":"**Array Analysis Challenge** You are working on an analytical tool that processes numeric data sets represented as arrays. Your task is to write a function called `arrayAnalysis()` that takes in an array of integers and returns an object containing the following properties: 1. `mean`: The mean (average) of the numbers in the array. 2. `median`: The median value of the numbers in the array. 3. `mode`: An array of the mode(s) of the numbers in the array (most frequent number(s)). If there are multiple modes, include all of them in ascending order. 4. `range`: The difference between the largest and smallest numbers in the array. Make sure to handle edge cases where the array might be empty. In such a case, return all the properties set to `null`. ```js arrayAnalysis([1, 2, 2, 3, 4]); // => { mean: 2.4, median: 2, mode: [2], range: 3 } arrayAnalysis([1, 1, 2, 2, 3, 3]); // => { mean: 2, median: 2, mode: [1, 2, 3], range: 2 } arrayAnalysis([]); // => { mean: null, median: null, mode: [], range: null } ``` Ensure that: - The mean is a decimal number, calculated as the sum of the array elements divided by the number of elements. - The median is the middle number in a sorted, ascending or descending, list of numbers, or the average of the two middle numbers if the list is even. - The mode is the number that appears most frequently in the list. If multiple numbers have the same highest frequency, all of them should be included in the return array in ascending order. - The range is the difference between the maximum and minimum numbers in the array. If the array is empty, `range` should be `null`.","solution":"from collections import Counter import math def arrayAnalysis(arr): if not arr: return {\\"mean\\": None, \\"median\\": None, \\"mode\\": [], \\"range\\": None} n = len(arr) arr_sorted = sorted(arr) # mean mean_value = sum(arr) / n # median if n % 2 == 0: median_value = (arr_sorted[n // 2 - 1] + arr_sorted[n // 2]) / 2 else: median_value = arr_sorted[n // 2] # mode count = Counter(arr) max_freq = max(count.values()) mode_value = sorted([k for k, v in count.items() if v == max_freq]) # range range_value = max(arr) - min(arr) return {\\"mean\\": mean_value, \\"median\\": median_value, \\"mode\\": mode_value, \\"range\\": range_value}"},{"question":"You are given a 2D maze of size `n x m`, where each cell contains a certain number of gold coins. You start at the top-left cell (1,1) and your goal is to reach the bottom-right cell (n,m). From any cell (i, j), you are allowed to move to the cell directly to the right (i, j+1) or directly below (i+1, j). You want to collect the maximum number of gold coins possible when you reach the bottom-right cell. -----Input:----- - The first line of input contains two integers `n` and `m` separated by a space (1 ≤ n, m ≤ 1000). - The next `n` lines contain `m` integers each, which are the gold coins in each cell of the maze. -----Output:----- Output a single integer, the maximum number of gold coins you can collect when reaching the bottom-right cell. -----Constraints:----- - 1 ≤ n, m ≤ 1000 - 0 ≤ number of gold coins in any cell ≤ 1000 -----Sample Input:----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output:----- 12 -----Explanation:----- The path to collect the maximum number of gold coins is: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), which collects 1+3+5+2+1 = 12 coins.","solution":"def max_gold_coins(n, m, maze): # Initialize a 2D dp array with zeros dp = [[0 for _ in range(m)] for _ in range(n)] # Start at the first cell dp[0][0] = maze[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + maze[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + maze[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + maze[i][j] # The bottom-right cell contains the maximum number of gold coins we can collect return dp[n - 1][m - 1]"},{"question":"You are given an integer sequence A_1, A_2, ldots, A_N. You should process Q queries of the following types: - 1 L R X: Add X to each of the elements A_L, A_{L+1}, ldots, A_R. - 2 L R: Find and print the sum of the elements A_L, A_{L+1}, ldots, A_R. -----Input----- - The first line of the input contains a single integer N denoting the length of A. - The second line contains N integers, elements of A. - The next line will contain an integer, Q, number of queries. - Each of the next Q lines will contain one of 2 kinds of updates as mentioned in the statement. It’s guaranteed that each update is a valid update operation. -----Output----- For each query of the second type, print a single line containing one integer - the answer to that query. -----Constraints----- - 1 le N, Q le 10^5 - 0 le |A_i|, |X| le 10^5 -----Example Input----- 5 1 2 3 4 5 4 2 1 3 1 2 4 1 2 2 5 2 1 5 -----Example Output----- 6 12 16 -----Explanation----- Before the first operation, A = [1, 2, 3, 4, 5] For the first query, the sum of elements from 1 to 3 is 1+2+3=6. After the second query A = [1, 3, 4, 5, 5]. For the third query, the sum of elements from 2 to 5 is 3+4+5+5=17. For the fourth query, the sum of elements from 1 to 5 is 1+3+4+5+5=18.","solution":"def process_queries(N, array, Q, queries): Processes the list of queries on the given array. Parameters: - N: int, the length of the array. - array: list of int, the initial array. - Q: int, the number of queries. - queries: list of queries, where each query is a list where: - The first element is the type of the query (1 or 2). - If the type is 1, it\'s followed by L, R, and X - If the type is 2, it\'s followed by L and R Returns: - list of int, the results of the type 2 queries. results = [] for query in queries: if query[0] == 1: _, L, R, X = query for i in range(L-1, R): array[i] += X elif query[0] == 2: _, L, R = query results.append(sum(array[L-1:R])) return results"},{"question":"In a distant kingdom, there exists a unique tree-shaped city. The city contains M districts connected by roads such that there is exactly one path between any two districts. Each district is identified by a unique number from 1 to M. The city council decided to organize a navigation training for the residents, testing their skills in moving through the city. The training task is described as follows: - From a given starting district, residents must navigate through a sequence of connected districts to reach a target district. - Participants should always choose to visit districts with the smallest number first when given a choice. You are asked to simulate this navigation process and output the sequence of districts visited. -----Input----- - First line contains K, the number of test cases. - First line of each test case contains M, the number of districts, and S, T representing the starting and target districts respectively. - Each of the next M-1 lines contains U and V indicating there is a road between district U and district V. -----Output----- - For each test case, output the sequence of districts visited to navigate from S to T. -----Constraints----- - 1 <= K <= 10 - 2 <= M <= 10000 - 1 <= S, T <= M -----Example----- Input: 1 5 1 5 1 2 1 3 2 4 2 5 Output: 1 2 5","solution":"def navigate_districts(test_cases): def dfs(current, target, graph, visited, path): if current == target: return True visited.add(current) for neighbor in sorted(graph[current]): if neighbor not in visited: path.append(neighbor) if dfs(neighbor, target, graph, visited, path): return True path.pop() return False results = [] for test_case in test_cases: M, S, T, roads = test_case graph = {i: [] for i in range(1, M + 1)} for U, V in roads: graph[U].append(V) graph[V].append(U) path = [S] visited = set() dfs(S, T, graph, visited, path) results.append(path) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') K = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(K): M, S, T = map(int, input_lines[line_index].split()) roads = [tuple(map(int, input_lines[line_index + i + 1].split())) for i in range(M - 1)] test_cases.append((M, S, T, roads)) line_index += M return test_cases def format_output(results): return \\"n\\".join(\\" \\".join(map(str, result)) for result in results) # Function to receive input and produce output def main(input_string): test_cases = parse_input(input_string) results = navigate_districts(test_cases) return format_output(results)"},{"question":"Sarah loves playing with numbers. Recently, she became interested in finding the nearest palindromic number for any given integer. A palindromic number is a number that reads the same forwards and backwards, like 121 or 5445. Given an integer N, Sarah wants to find the smallest palindromic number that is greater than or equal to N. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. Each test case consists of one line containing a single integer N (in base ten). -----Output----- For each test case, output a single line containing the smallest palindromic number that is greater than or equal to N. -----Constraints----- 1 ≤ T ≤ 104 0 ≤ N ≤ 1012 -----Example----- Input: 3 123 808 1001 Output: 131 808 1001 -----Explanation----- In the first test case, the smallest palindromic number greater than 123 is 131. In the second test case, 808 is already a palindromic number. In the third test case, 1001 is already a palindromic number, so it remains unchanged.","solution":"def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(n): Find the smallest palindromic number greater than or equal to n. while True: if is_palindrome(n): return n n += 1 def find_nearest_palindromes(test_cases): Function to process multiple test cases for nearest palindrome number. results = [] for case in test_cases: results.append(next_palindrome(case)) return results"},{"question":"Given a string s and an array of integers spaces, return the string after inserting spaces at the given positions. Each integer in spaces represents the position (index) in the original string where a space will be added. If a space is to be added at index i, it should appear after the character at index i in the resulting string. For example: ``` input_string = \\"hellothere\\" spaces = [5] output: \\"hello there\\" input_string = \\"hellotheremyfriend\\" spaces = [5, 10, 12] output: \\"hello there my friend\\" input_string = \\"abcdef\\" spaces = [2, 4] output: \\"ab cd ef\\" ```","solution":"def insert_spaces(s, spaces): Inserts spaces into string `s` at the positions specified in `spaces`. Parameters: s (str): The input string. spaces (list of int): The list of positions to insert spaces. Returns: str: The resulting string with added spaces. offset = 0 for pos in spaces: s = s[:pos + offset] + \' \' + s[pos + offset:] offset += 1 return s"},{"question":"Complete the function that takes two strings `str1` and `str2`, and returns `True` if `str2` is a rotation of `str1`, and `False` otherwise. A string is considered a rotation of another if you can move some leading characters of one string to the end of the string to obtain the other string. **Constraints**: - Both strings have a length of `n (1 <= n <= 10^5)`. - The function should handle large inputs efficiently. **Note**: You are not allowed to use any in-built rotation or reverse functions. Example Given: ```str1 = \\"waterbottle\\", str2 = \\"erbottlewat\\"``` the function should return `True`, because \\"erbottlewat\\" is a rotation of \\"waterbottle\\". Given: ```str1 = \\"abcde\\", str2 = \\"abced\\"``` the function should return `False`, because \\"abced\\" is not a rotation of \\"abcde\\".","solution":"def is_rotation(str1, str2): Returns True if str2 is a rotation of str1, otherwise returns False. if len(str1) != len(str2): return False concatenated = str1 + str1 return str2 in concatenated"},{"question":"Overview Write a function that takes a list of integers and returns a new list where each element is the product of all the numbers in the original list except for the number at that position. ```python products([1,2,3,4]) => [24, 12, 8, 6] products([0, 1, 2, 3, 4]) => [24, 0, 0, 0, 0] ``` Specifics - The input list will only contain integers. - The resulting list should have the same length as the input list. - You must solve this without using division. - Each number in the input list has a position; for example, in [1,2,3,4], 1 is at position 0, 2 is at position 1, and so on. - The output list should be such that each element at position i is the product of all elements in the original list, except the one at position i. - You can assume the list will contain at least one element and will not exceed 100 elements.","solution":"def products(nums): Returns a new list where each element is the product of all the numbers in the original list except for the number at that position. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given a binary tree where each node has a value as an integer. Your task is to write a function that returns the smallest value in the tree that is larger than a given value k. If no such value exists, return -1. The binary tree is implemented with the following class: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your function should have the following signature: ```python def find_smallest_larger_than_k(root: TreeNode, k: int) -> int: ``` # Input - `root`: The root node of the binary tree. - `k`: An integer value. # Output - An integer value that is the smallest value in the tree larger than `k`. If no such value exists, return -1. # Example ```python # Example Binary Tree # 5 # / # 3 7 # / / # 2 4 6 8 root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(7) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.right.left = TreeNode(6) root.right.right = TreeNode(8) print(find_smallest_larger_than_k(root, 4)) # Output: 5 print(find_smallest_larger_than_k(root, 7)) # Output: 8 print(find_smallest_larger_than_k(root, 8)) # Output: -1 ``` # Constraints - The number of nodes in the tree is in the range [1, 1000]. - -10^6 <= Node.val <= 10^6 - -10^6 <= k <= 10^6","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_smallest_larger_than_k(root: TreeNode, k: int) -> int: def inorder_traversal(node): if node: inorder_traversal(node.left) if node.val > k: larger_values.append(node.val) inorder_traversal(node.right) larger_values = [] inorder_traversal(root) if not larger_values: return -1 return min(larger_values)"},{"question":"You are given a string S consisting of lowercase English letters. You need to determine the minimum number of operations required to convert the string into a palindrome. In one operation, you can delete one character from the string. A string is called a palindrome if it reads the same backward as forward. -----Input----- - The first line of the input contains a single integer n denoting the number of test cases. The description of n test cases follows. - Each of the next n lines contains a string S. -----Output----- For each test case, print a single integer representing the minimum number of operations required to convert the given string into a palindrome. -----Constraints----- - 1 le n le 10 - 1 le |S| le 1000 -----Subtasks----- Subtask #1 (30 points): 1 le |S| le 100 Subtask #2 (70 points): original constraints -----Example Input----- 2 abac racecar -----Example Output----- 1 0 -----Explanation----- Example case 1: We can delete the character \'b\' to make the string \\"aac\\", which is a palindrome. Example case 2: The string \\"racecar\\" is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to convert the string \'s\' into a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] longest_palin_subseq_length = longest_palindromic_subsequence(s) return len(s) - longest_palin_subseq_length def min_operations_for_multiple_cases(test_cases): results = [] for case in test_cases: results.append(min_operations_to_palindrome(case)) return results"},{"question":"You are given a string that represents a mathematical expression containing addition and subtraction operations only. Your task is to evaluate the expression and return the result as an integer. The expression will not contain any parentheses and will be properly formatted with spaces between numbers and operators. For example: ``` evaluate_expression(\\"3 + 5 - 2\\") => 6 evaluate_expression(\\"10 - 3 + 2 - 4\\") => 5 evaluate_expression(\\"2 + 2 + 2\\") => 6 ``` # Constraints - The input string will contain only non-negative integers and operators (`+` and `-`). - The input string will be a valid expression and will not be empty. - There will be exactly one space between each number and operator in the expression.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing addition and subtraction. Args: expression (str): The mathematical expression to evaluate. Returns: int: The result of the expression. tokens = expression.split() total = 0 current_operator = \\"+\\" for token in tokens: if token in {\\"+\\", \\"-\\"}: current_operator = token else: number = int(token) if current_operator == \\"+\\": total += number elif current_operator == \\"-\\": total -= number return total"},{"question":"You are given an array of integers and a target value. Create a function that determines whether there are two distinct numbers in the array that add up to the target value. The function should return a tuple of the indices of the two numbers, or `None` if no such pair exists. Assume the array has at least two elements. # Examples ```python find_pair([2, 7, 11, 15], 9) # ==> (0, 1) find_pair([3, 2, 4], 6) # ==> (1, 2) find_pair([3, 3], 6) # ==> (0, 1) find_pair([1, 2, 3, 4, 5], 10) # ==> None ``` # Notes - The input array may contain negative numbers or duplicates. - The indices in the tuple must be in ascending order.","solution":"def find_pair(nums, target): This function returns a tuple of indices of two numbers in the array `nums` that add up to the `target` value. If no such pair exists, it returns None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Calculate the smallest positive integer that is not present in a given list and is not the sum of any subset of integers from the list. Example 1: Input: [1, 2, 3, 10] Output: 7 Explanation: The smallest positive integer not present in the list and not the sum of any subset of [1, 2, 3, 10] is 7. Example 2: Input: [1, 1, 1, 1] Output: 5 Explanation: The smallest positive integer not present in the list and not the sum of any subset of [1, 1, 1, 1] is 5. Note: - The input list will have at least one integer and will contain only positive integers. - The length of the list will not exceed 10^4.","solution":"def smallest_positive_integer_not_in_sum(lst): Returns the smallest positive integer that is not present in the list and not the sum of any subset of integers from the list. lst.sort() smallest_missing = 1 for num in lst: if num > smallest_missing: break smallest_missing += num return smallest_missing"},{"question":"# Task Alice is conducting a survey in her neighborhood to understand the common favorite colors among the residents. She collects the list of favorite colors from each person and wants to find out the most frequently mentioned color. Write a function that takes a list of strings representing favorite colors and returns the color that appears most frequently. If there is a tie, return all colors involved in the tie as a list sorted in alphabetical order. # Example For `colors = [\\"red\\", \\"blue\\", \\"green\\", \\"blue\\", \\"red\\", \\"red\\"]`, the result should be `red`. For `colors = [\\"red\\", \\"blue\\", \\"green\\", \\"blue\\", \\"green\\"]`, the result should be `[\\"blue\\", \\"green\\"]`. # Input/Output - `[input]` list of strings `colors` The list of favorite colors. `colors.length >= 1` - `[output]` a string or a list of strings The color that appears most frequently, or a list of colors if there is a tie.","solution":"from collections import Counter def most_frequent_color(colors): Returns the color that appears most frequently. If there is a tie, returns a list of colors involved in the tie sorted alphabetically. color_counts = Counter(colors) max_count = max(color_counts.values()) most_frequent = [color for color in color_counts if color_counts[color] == max_count] if len(most_frequent) == 1: return most_frequent[0] return sorted(most_frequent)"},{"question":"You are given a list of integers representing the temperatures recorded over a week. Write a function `count_above_threshold(temperatures, threshold)` that counts and returns the number of days the temperature was above a given threshold. ```python >>> temperatures = [65, 70, 75, 80, 85, 90, 95] >>> threshold = 80 >>> count_above_threshold(temperatures, threshold) 3 ``` The function should return an integer representing the count of days the temperature was above the threshold provided as an input. The list of temperatures will always contain exactly 7 integers, representing one for each day of the week. The threshold will be an integer.","solution":"def count_above_threshold(temperatures, threshold): Returns the number of days the temperature was above the given threshold. :param temperatures: List of integers representing temperatures over a week :param threshold: Integer representing the temperature threshold :return: Integer count of days with temperature above the threshold return sum(temp > threshold for temp in temperatures)"},{"question":"A company is conducting interviews for the position of Software Engineer. As part of the assessment, candidates are given a coding task to evaluate their problem-solving skills and knowledge of algorithms. The task is as follows: The company uses a unique encryption algorithm to secure their communications. Whenever two engineers need to exchange confidential messages, they use this algorithm to ensure the messages can only be read by the intended recipient. The encryption algorithm generates a list of numbers, and the engineers use this list to encode and decode their messages. Given an integer N, the encryption algorithm generates a list of numbers such that each pair of adjacent numbers in the list has a greatest common divisor (GCD) of 1. This means that every pair of consecutive numbers in the list is coprime. Your task is to generate such a list of length N. -----Input----- - The input contains a single integer N which denotes the length of the list. -----Output----- - The output should be a single line containing N space-separated integers representing the required list. There may be multiple valid solutions; give any one of them. -----Constraints----- - 2 le N le 10^5 -----Example Input----- 4 -----Example Output----- 2 3 4 5 -----Explanation----- Example case 1: - One possible valid list is [2, 3, 4, 5] because 2 and 3 have GCD 1, 3 and 4 have GCD 1, and 4 and 5 have GCD 1. - Another possible solution would be [2, 3, 6, 7], and there are many other valid outputs. ```python def generate_coprime_list(N): result = [] current = 2 while len(result) < N: if all(gcd(current, num) == 1 for num in result): result.append(current) current += 1 return result if __name__ == \\"__main__\\": import sys input = sys.stdin.read from math import gcd N = int(input().strip()) result = generate_coprime_list(N) print(\' \'.join(map(str, result))) ``` Implement the above function to generate a valid list that meets the specified condition.","solution":"def generate_coprime_list(N): Generate a list of length N such that each pair of adjacent numbers in the list is coprime. # A simple way to ensure consecutive numbers are coprime is by using consecutive integers starting from 2 return list(range(2, 2 + N))"},{"question":"Create a function `isBalanced(s)` that takes a string `s` containing characters `(`, `)`, `{`, `}`, `[` and `]` and determines if the input string is balanced. A string is balanced if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. The function should return `True` if the string is balanced, and `False` otherwise. Examples: - `isBalanced(\\"()\\")` should return `True` - `isBalanced(\\"()[]{}\\")` should return `True` - `isBalanced(\\"(]\\")` should return `False` - `isBalanced(\\"([)]\\")` should return `False` - `isBalanced(\\"{[]}\\")` should return `True` Constraints: - The input string will only contain the characters `(`, `)`, `{`, `}`, `[` and `]`. - The length of the string will not exceed 1000 characters.","solution":"def isBalanced(s): Determines if the input string s is balanced with respect to brackets. Args: s (str): Input string containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: bool: True if the string is balanced, False otherwise stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): # If the character is an opening bracket stack.append(char) elif char in bracket_map: # If the character is a closing bracket if stack and stack[-1] == bracket_map[char]: # Check for matching opening bracket stack.pop() # Remove the matched opening bracket else: return False # Unmatched closing bracket or stack is empty return not stack # Stack should be empty if all opening brackets are matched"},{"question":"Jennie loves solving puzzles. Today, she is given a series of boxes arranged in a single row, each containing a distinct positive integer. The arrangement can be described as a permutation of the integers from 1 to n. Jennie can apply a special operation any number of times: she can select any two adjacent boxes and swap their contents. Her goal is to sort the boxes in ascending order, applying the least number of operations possible. Given the initial order of the numbers in the boxes, calculate the minimum number of adjacent swaps required to sort the permutation. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. - The first line of each test case contains an integer n, the number of boxes. - The second line of each test case contains n distinct space-separated integers, representing the initial order of the numbers in the boxes. -----Output----- - For each test case, output a single integer in a line corresponding to the minimum number of swaps required to sort the numbers. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ initial number in each box ≤ n -----Example----- Input: 2 3 3 1 2 4 4 3 2 1 Output: 2 6 -----Explanation----- In the first example, by swapping (3, 1) and then (3, 2), the sequence becomes sorted as [1, 2, 3]. In the second example, one of the possible solutions is: - Swap (4, 3) -> [3, 4, 2, 1] - Swap (4, 2) -> [3, 2, 4, 1] - Swap (4, 1) -> [3, 2, 1, 4] - Swap (3, 2) -> [2, 3, 1, 4] - Swap (3, 1) -> [2, 1, 3, 4] - Swap (2, 1) -> [1, 2, 3, 4] So, it takes 6 swaps to sort this sequence.","solution":"def min_adjacent_swaps(n, arr): Returns the minimum number of adjacent swaps required to sort the array. # Implementation of bubble sort to count number of swaps swaps = 0 for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: # Swap adjacent elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps def process_test_cases(T, test_cases): Processes the test cases and returns results of minimum swaps required for each. results = [] for case in test_cases: n, arr = case results.append(min_adjacent_swaps(n, arr)) return results"},{"question":"A company manufactures widgets in batches. Each batch contains a varying number of widgets, and each widget requires a different processing time. The company wants to minimize the maximum load on any single worker by distributing the processing time of widgets as evenly as possible among workers. Given `N` widgets and `W` workers, where each worker processes widgets consecutively from a batch, determine the minimum possible maximum processing time any single worker has. -----Input:----- - First line contains `T`, the number of test cases. Then the test cases follow. - For each test case, the first line contains `N` and `W` where `N` is the number of widgets and `W` is the number of workers. - Then the second line contains `N` space-separated integers representing the processing times of each widget. -----Output:----- - For each test case, print a single line containing the minimum possible maximum processing time for the hardest-working worker. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq W leq N - 1 leq text{Processing time of each widget} leq 10^9 - Sum of N over all test cases does not exceed 10^6 -----Sample Input:----- 2 7 3 10 15 20 25 30 35 40 5 2 10 5 15 20 25 -----Sample Output:----- 70 45 -----Explanation:----- Test case 1: Distribute widgets to minimize the maximum workload: Worker 1: [10, 15, 20] -> Total = 45 Worker 2: [25, 30] -> Total = 55 Worker 3: [35, 40] -> Total = 75 Maximum load on a single worker initially is 75. Adjust to minimize. Optimal distribution: Worker 1: [10, 15, 20] -> Total = 45 Worker 2: [25, 30] -> Total = 55 Worker 3: [35, 40] -> Total = 75 Better distribution could be: Worker 1: [10, 15, 20, 25] -> Total = 70 Worker 2: [30] -> Total = 30 Worker 3: [35, 40] -> Total = 75 Minimum possible maximum processing time is 70. Test case 2: Distribute widgets: Worker 1: [10, 5, 15] -> Total = 30 Worker 2: [20, 25] -> Total = 45 Optimal distribution is already minimum: Minimum possible maximum processing time is 45.","solution":"def is_valid_distribution(N, W, processing_times, max_load): current_worker = 1 current_load = 0 for time in processing_times: if current_load + time > max_load: current_worker += 1 current_load = time if current_worker > W: return False else: current_load += time return True def find_min_max_processing_time(N, W, processing_times): low, high = max(processing_times), sum(processing_times) while low < high: mid = (low + high) // 2 if is_valid_distribution(N, W, processing_times, mid): high = mid else: low = mid + 1 return low def minimum_maximum_load(T, test_cases): results = [] for i in range(T): N, W, processing_times = test_cases[i] results.append(find_min_max_processing_time(N, W, processing_times)) return results"},{"question":"# Context and Definitions You are developing a cool new Python package that provides enhanced functionality for matrices. You have designed a Matrix class that allows for basic matrix operations. This class will be used to perform operations such as matrix addition, subtraction, and multiplication. You have defined the Matrix data structure as follows: ```python class Matrix: def __init__(self, grid): self.grid = grid def __repr__(self): return f\\"Matrix({self.grid})\\" ``` A matrix is represented as a list of lists, where each inner list represents a row of the matrix. For instance, a 2x2 matrix with elements [[1, 2], [3, 4]] can be created as: ```python matrix = Matrix([[1, 2], [3, 4]]) print(matrix) # outputs: Matrix([[1, 2], [3, 4]]) ``` You now need to implement methods for matrix addition and matrix multiplication. # Matrix Addition Two matrices can be added if they have the same dimensions. The element at position (i, j) in the resulting matrix is the sum of the elements at position (i, j) in the input matrices. ```python def add(self, other): if len(self.grid) != len(other.grid) or len(self.grid[0]) != len(other.grid[0]): raise ValueError(\\"Matrices must have the same dimensions to be added.\\") result = [] for row in range(len(self.grid)): result_row = [] for col in range(len(self.grid[row])): result_row.append(self.grid[row][col] + other.grid[row][col]) result.append(result_row) return Matrix(result) ``` # Matrix Multiplication Two matrices can be multiplied if the number of columns in the first matrix is equal to the number of rows in the second matrix. The element at position (i, j) in the resulting matrix is the sum of the products of the corresponding elements in the ith row of the first matrix and the jth column of the second matrix. ```python def multiply(self, other): if len(self.grid[0]) != len(other.grid): raise ValueError(\\"Number of columns in first matrix must be equal to number of rows in second matrix to multiply.\\") result = [] for i in range(len(self.grid)): result_row = [] for j in range(len(other.grid[0])): cell_sum = 0 for k in range(len(self.grid[0])): cell_sum += self.grid[i][k] * other.grid[k][j] result_row.append(cell_sum) result.append(result_row) return Matrix(result) ``` # Examples of Usage ```python matrix1 = Matrix([[1, 2], [3, 4]]) matrix2 = Matrix([[5, 6], [7, 8]]) add_result = matrix1.add(matrix2) print(add_result) # outputs: Matrix([[6, 8], [10, 12]]) matrix3 = Matrix([[1, 2, 3], [4, 5, 6]]) matrix4 = Matrix([[7, 8], [9, 10], [11, 12]]) mul_result = matrix3.multiply(matrix4) print(mul_result) # outputs: Matrix([[58, 64], [139, 154]]) ``` # The New Requirements You are asked to implement these methods: - `add`: Create a new Matrix representing the sum of the given matrices. - `multiply`: Create a new Matrix representing the product of the given matrices. For this Kata, the definition of `Matrix` and the method `__repr__` are already loaded in your environment. # Your Task Implement the `add` and `multiply` methods within the `Matrix` class: ```python class Matrix: def __init__(self, grid): self.grid = grid def __repr__(self): return f\\"Matrix({self.grid})\\" def add(self, other): # Your implementation here def multiply(self, other): # Your implementation here ```","solution":"class Matrix: def __init__(self, grid): self.grid = grid def __repr__(self): return f\\"Matrix({self.grid})\\" def add(self, other): if len(self.grid) != len(other.grid) or len(self.grid[0]) != len(other.grid[0]): raise ValueError(\\"Matrices must have the same dimensions to be added.\\") result = [] for row in range(len(self.grid)): result_row = [] for col in range(len(self.grid[row])): result_row.append(self.grid[row][col] + other.grid[row][col]) result.append(result_row) return Matrix(result) def multiply(self, other): if len(self.grid[0]) != len(other.grid): raise ValueError(\\"Number of columns in first matrix must be equal to number of rows in second matrix to multiply.\\") result = [] for i in range(len(self.grid)): result_row = [] for j in range(len(other.grid[0])): cell_sum = 0 for k in range(len(self.grid[0])): cell_sum += self.grid[i][k] * other.grid[k][j] result_row.append(cell_sum) result.append(result_row) return Matrix(result)"},{"question":"Task Given a string `s`, your task is to determine whether it can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if at most one character appears an odd number of times. Implement a function that checks this condition. # Example For `s = \\"carrace\\"`, the output should be `true` as it can be rearranged to form \\"racecar\\", which is a palindrome. For `s = \\"daily\\"`, the output should be `false` as it cannot be rearranged to form a palindrome. # Input/Output `[input]` string `s` - A non-empty string consisting of lowercase alphabets, `1 ≤ s.length ≤ 1000`. `[output]` boolean - `true` if the string can be rearranged to form a palindrome, `false` otherwise.","solution":"def can_form_palindrome(s): Check if the given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count occurrences of each character counts = Counter(s) # Check how many characters have an odd count odd_counts = sum(1 for count in counts.values() if count % 2 == 1) # A string can be rearranged into a palindrome if at most one character has an odd count return odd_counts <= 1"},{"question":"Given an input string that represents a mathematical expression, create a function that evaluates and returns the result of the expression. The expression will only contain non-negative integers, the operators + (addition) and - (subtraction), and will not include any parentheses. For example, given the input string: ``` \\"3+5-2\\" ``` the output should be: ``` 6 ``` Another example with input string: ``` \\"10-3+2\\" ``` the output should be: ``` 9 ``` **Note**: You may assume that the input string is always a valid mathematical expression consisting of positive integers and operators + and -.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression containing non-negative integers and the operators + (addition) and - (subtraction). Args: expression (str): A string representing the mathematical expression. Returns: int: The result of the evaluated expression. # Split the expression into tokens (numbers and operators) tokens = [] num = \'\' for char in expression: if char.isdigit(): num += char else: tokens.append(int(num)) tokens.append(char) num = \'\' # Don\'t forget to add the last number to the tokens list if num: tokens.append(int(num)) # Evaluate the expression by processing tokens result = tokens[0] i = 1 while i < len(tokens): if tokens[i] == \'+\': result += tokens[i + 1] elif tokens[i] == \'-\': result -= tokens[i + 1] i += 2 return result"},{"question":"----- ANOMALY DETECTION ----- In a research facility, scientists are continuously monitoring temperature readings collected every minute. For every one hour period, they need to check for anomalies. An anomaly in the temperature is detected if the variance of the temperature within an hour exceeds a threshold value T. The variance is defined by the following formula: Variance = Sum((xi - mean)^2) / N where xi is the temperature reading, mean is the average temperature over N readings, and N is 60 (number of minutes in an hour). You are given a list of temperature readings for a period longer than one hour. Determine how many hours have an anomaly in their temperature readings. ----- Constraints 1≤T≤1000 N is a multiple of 60 1≤temperature reading≤100 Temperature readings are integers ----- Input Format Input is given from Standard Input in the following format: T N temperature_reading_1 temperature_reading_2 : temperature_reading_N ----- Output Print the number of hours that have an anomaly based on the given threshold T. ----- Example Test Case Input: 4 120 72 71 69 70 73 74 68 72 75 70 : 76 75 Output: 1 Explanation Calculate variance for each hour (every 60 readings). If the variance for that hour exceeds T, it is considered an anomaly. In this example, when calculating variance for two sets of 60 readings, only one set exceeds the threshold T, so the output is 1.","solution":"import math def calculate_variance(readings, mean): Calculate variance given a list of readings and their mean. N = len(readings) variance = sum((xi - mean) ** 2 for xi in readings) / N return variance def anomaly_detection(T, N, temperature_readings): Calculate the number of hours with temperature anomaly. :param T: Threshold value for anomaly detection. :param N: Total number of temperature readings. :param temperature_readings: List of temperature readings. :return: Number of hours with anomaly. hours = N // 60 anomaly_count = 0 for i in range(hours): readings = temperature_readings[i * 60:(i + 1) * 60] mean = sum(readings) / 60 variance = calculate_variance(readings, mean) if variance > T: anomaly_count += 1 return anomaly_count"},{"question":"A company is organizing a marathon event and needs a system to manage runner registrations. Each runner registers with their name, age, and the distance they plan to run (5km, 10km, or marathon). The organizers need to categorize runners into different age brackets and calculate the total number of participants in each distance category. Write a function `organize_marathon` that processes a list of runner registrations and returns a dictionary with the following structure: - Keys: \'5km\', \'10km\', and \'marathon\' - Values: Another dictionary with keys \'total_runners\' and \'age_brackets\'. \'total_runners\' should store the number of runners registered for the distance and \'age_brackets\' should contain a dictionary with keys \'under_18\', \'18_to_40\', and \'above_40\' along with the number of runners in each respective age bracket. The function should handle cases where the input list is empty by returning a dictionary with all values set to zero. INPUT: - A list of tuples, with each tuple containing a runner\'s name (string), age (integer), and distance category (string: \'5km\', \'10km\', \'marathon\'). OUTPUT: - A dictionary matching the described structure, categorizing runners by their distance and age. Example: ```python def organize_marathon(runners): # Function implementation goes here # Example input: runners = [ (\'Alice\', 25, \'5km\'), (\'Bob\', 17, \'10km\'), (\'Charlie\', 32, \'marathon\'), (\'David\', 41, \'5km\'), (\'Eve\', 39, \'10km\'), (\'Frank\', 15, \'marathon\') ] print(organize_marathon(runners)) # Expected output: # { # \'5km\': {\'total_runners\': 2, \'age_brackets\': {\'under_18\': 0, \'18_to_40\': 1, \'above_40\': 1}}, # \'10km\': {\'total_runners\': 2, \'age_brackets\': {\'under_18\': 1, \'18_to_40\': 1, \'above_40\': 0}}, # \'marathon\': {\'total_runners\': 2, \'age_brackets\': {\'under_18\': 1, \'18_to_40\': 1, \'above_40\': 0}} # } ```","solution":"def organize_marathon(runners): Organize runners into distance categories and age brackets. Args: runners (list of tuples): Each tuple contains (name, age, distance). Returns: dict: A dictionary categorizing runners by their distance and age. result = { \'5km\': {\'total_runners\': 0, \'age_brackets\': {\'under_18\': 0, \'18_to_40\': 0, \'above_40\': 0}}, \'10km\': {\'total_runners\': 0, \'age_brackets\': {\'under_18\': 0, \'18_to_40\': 0, \'above_40\': 0}}, \'marathon\': {\'total_runners\': 0, \'age_brackets\': {\'under_18\': 0, \'18_to_40\': 0, \'above_40\': 0}} } for _, age, distance in runners: if distance in result: result[distance][\'total_runners\'] += 1 if age < 18: result[distance][\'age_brackets\'][\'under_18\'] += 1 elif 18 <= age <= 40: result[distance][\'age_brackets\'][\'18_to_40\'] += 1 else: result[distance][\'age_brackets\'][\'above_40\'] += 1 return result"},{"question":"Given a series of tasks with varying levels of difficulty, each task is assigned an estimated completion time in minutes. You need to allocate these tasks to a limited number of workers such that the maximum completion time for any worker is minimized. Each worker can take on any number of tasks, but tasks cannot be split among workers. Your task is to implement a function that receives the number of workers and a list of task times, and returns the minimum possible maximum completion time for any worker. __Example:__ ```python tasks = [10, 20, 30, 40, 50] workers = 3 minimum_max_time(workers, tasks) #Returns 60 ``` __Explanation:__ One optimal way to assign the tasks is as follows: Worker 1: [50, 10] -> Total = 60 Worker 2: [40, 20] -> Total = 60 Worker 3: [30] -> Total = 30 Therefore, the maximum time for any worker is 60. Note that the objective is to minimize this maximum time. __Notes:__ - If the number of tasks is less than the number of workers, consider some workers doing zero workload. - Tasks\' list might contain between 1 and 10^4 tasks. - Number of workers can range from 1 to 10^4. - All task times are positive integers. - If it is impossible to distribute tasks, the function should return -1.","solution":"def minimum_max_time(workers, tasks): if len(tasks) < 1 or workers < 1: return -1 def canAllocate(mid): required_workers = 1 current_load = 0 for task in tasks: if current_load + task <= mid: current_load += task else: required_workers += 1 current_load = task if required_workers > workers: return False return True if workers >= len(tasks): return max(tasks) left, right = max(tasks), sum(tasks) answer = right while left <= right: mid = (left + right) // 2 if canAllocate(mid): answer = mid right = mid - 1 else: left = mid + 1 return answer"},{"question":"You are given a rectangle in a 2D plane, defined by its bottom-left corner at point (0, 0) and top-right corner at point (W, H). There are n points inside or on the boundary of the rectangle, each represented by its coordinates (xi, yi). You need to find the minimum number of horizontal and vertical lines required to cover all the given points. A horizontal line covers all points with the same y-coordinate, and a vertical line covers all points with the same x-coordinate. -----Input----- The first line of the input contains three integers W, H, and n (1 ≤ W, H ≤ 1000, 1 ≤ n ≤ 1000) — the width and height of the rectangle and the number of points. The next n lines contain two integers xi and yi (0 ≤ xi ≤ W, 0 ≤ yi ≤ H) — the coordinates of the points. -----Output----- Print the minimum number of lines required to cover all the points. -----Example----- Input 5 5 4 1 2 1 3 4 2 4 3 Output 2 Explanation: We can cover all points with the following lines: - A vertical line at x = 1 covers points (1, 2) and (1, 3). - A vertical line at x = 4 covers points (4, 2) and (4, 3). OR - A horizontal line at y = 2 covers points (1, 2) and (4, 2). - A horizontal line at y = 3 covers points (1, 3) and (4, 3).","solution":"def min_cover_lines(W, H, n, points): Returns the minimum number of horizontal and vertical lines required to cover all the given points. Parameters: W (int): Width of the rectangle H (int): Height of the rectangle n (int): Number of points points (list of tuples): List of tuples where each tuple contains (xi, yi) coordinates of a point Returns: int: Minimum number of lines required to cover all the points x_coords = set() y_coords = set() for x, y in points: x_coords.add(x) y_coords.add(y) # Minimum lines required to cover all points will be the minimum of # distinct x-coordinates (vertical lines) or distinct y-coordinates (horizontal lines) return min(len(x_coords), len(y_coords))"},{"question":"In a particular programming language, strings can be encoded using a simple Run Length Encoding (RLE) algorithm. This algorithm works by replacing sequences of the same character with a single character followed by the number of occurrences. For example: - The string `\\"aaabbcc\\"` would be encoded as `\\"a3b2c2\\"` - The string `\\"abcd\\"` would be encoded as `\\"a1b1c1d1\\"` - The string `\\"aabbbaa\\"` would be encoded as `\\"a2b3a2\\"` **Your task** is to write a function called `rle_encode` which takes a single string argument and returns the encoded string using the RLE algorithm described above. # Function Signature: ```python def rle_encode(input_string: str) -> str: # Your code here ``` # Constraints: 1. The input string will only contain lowercase English letters (`a-z`). 2. The maximum length of the input string will be `100`. # Example Usage: ```python # Example 1: print(rle_encode(\\"aaabbcc\\")) # Output: \\"a3b2c2\\" # Example 2: print(rle_encode(\\"abcd\\")) # Output: \\"a1b1c1d1\\" # Example 3: print(rle_encode(\\"aabbbaa\\")) # Output: \\"a2b3a2\\" ``` # Notes: 1. The encoded string should contain the character followed by the count without any spaces between them. 2. You don\'t need to handle empty strings as input, all input strings will have at least one character.","solution":"def rle_encode(input_string: str) -> str: Encodes the input string using Run Length Encoding (RLE) algorithm. Args: input_string (str): The string to encode. Returns: str: The RLE encoded string. if not input_string: return \\"\\" encoded_string = \\"\\" current_char = input_string[0] count = 1 for char in input_string[1:]: if char == current_char: count += 1 else: encoded_string += current_char + str(count) current_char = char count = 1 encoded_string += current_char + str(count) return encoded_string"},{"question":"Implement a function that takes a string containing only the digits 2-9 and returns a string representing all possible letter combinations that the number could represent on a classic phone keypad. The classic keypad looks like this: - 2: \\"abc\\" - 3: \\"def\\" - 4: \\"ghi\\" - 5: \\"jkl\\" - 6: \\"mno\\" - 7: \\"pqrs\\" - 8: \\"tuv\\" - 9: \\"wxyz\\" You can assume that the input string contains at least one digit. Example: \\"23\\" -> [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Notes: - You need to consider combinations in the order of the digits provided. - Return the results as a list of strings in lexicographical (dictionary) order. Hint: Use recursion or backtracking to generate all possible combinations.","solution":"def letter_combinations(digits): returns all possible letter combinations that the number could represent on a classic phone keypad. if not digits: return [] phone_map = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } combinations = [] def backtrack(index, current_combination): if index == len(digits): combinations.append(\'\'.join(current_combination)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: current_combination.append(letter) backtrack(index + 1, current_combination) current_combination.pop() backtrack(0, []) return sorted(combinations)"},{"question":"Book Management System - Create Book Class You are tasked with designing a system that manages a collection of books. To get started, you need to define a `Book` class with the following attributes: attribute | type | default value ---|---|--- Title | string | \\"Untitled\\" Author | string | \\"Unknown\\" Genre | string | \\"General\\" Year_Published | int | 0 ISBN | string | \\"0000000000\\" Your `Book` class should allow for the creation of book instances with specified attributes or default values if none are provided.","solution":"class Book: def __init__(self, title=\\"Untitled\\", author=\\"Unknown\\", genre=\\"General\\", year_published=0, isbn=\\"0000000000\\"): self.title = title self.author = author self.genre = genre self.year_published = year_published self.isbn = isbn"},{"question":"A digital office building uses a smart lock system to manage room access, driven by a schedule of employee check-ins. Every employee has a unique ID and check-in time. The system keeps track of the people inside each room and ensures that a single employee cannot occupy two different rooms at the same time. You need to write a function `find_overlaps` that analyzes a list of employee check-ins to identify any employees who have overlapping or conflicting check-ins. The function should take two arguments: 1. `events` - a list of tuples where each tuple contains: - `employee_id` (string): the unique ID of the employee, - `room_id` (string): the identifier of the room, - `start_time` (string in the format \\"HH:MM\\"): the check-in start time, - `end_time` (string in the format \\"HH:MM\\"): the check-in end time. The function should return a list of employee IDs who have conflicting check-ins. The check-in times for each employee should not overlap. # Example Usage: ```python events = [ (\\"E1\\", \\"Room1\\", \\"09:00\\", \\"10:00\\"), (\\"E2\\", \\"Room1\\", \\"09:30\\", \\"10:30\\"), (\\"E1\\", \\"Room2\\", \\"09:45\\", \\"10:45\\"), (\\"E3\\", \\"Room3\\", \\"11:00\\", \\"12:00\\"), (\\"E2\\", \\"Room2\\", \\"11:15\\", \\"12:15\\"), (\\"E3\\", \\"Room4\\", \\"11:30\\", \\"12:30\\") ] result = find_overlaps(events) print(result) # Output: [\\"E1\\", \\"E3\\"] ``` # Requirements: - The `start_time` and `end_time` are in 24-hour format (`HH:MM`), where `HH` is from `00` to `23` and `MM` is from `00` to `59`. - The function should handle the case where no check-ins overlap. - The output list should be sorted in ascending order of employee IDs and not contain duplicates. - You can assume that the input times are valid and well-formed. # Note: If an employee checks out from one room and checks into another room at the same minute, it is not considered an overlap. For example, a check-out at \\"10:00\\" from one room and a check-in at \\"10:00\\" in another room does not represent a conflict.","solution":"from collections import defaultdict from datetime import datetime def parse_time(t): return datetime.strptime(t, \\"%H:%M\\") def find_overlaps(events): employee_events = defaultdict(list) for event in events: employee_id, room_id, start_time, end_time = event start_time = parse_time(start_time) end_time = parse_time(end_time) employee_events[employee_id].append((start_time, end_time)) conflicts = set() for employee_id, times in employee_events.items(): times.sort() for i in range(len(times) - 1): if times[i][1] > times[i+1][0]: conflicts.add(employee_id) break return sorted(conflicts)"},{"question":"Your story A friend of yours is a robotics enthusiast and has recently been trying to implement a small robot capable of navigating a grid pattern. The grid is represented by a series of commands, each telling the robot to move in a specific direction. The robot starts at position (0, 0) and can move up, down, left, and right. Your friend has been struggling to visualize the robot\'s final position after executing a series of commands and has asked you for help to write a function that computes the robot\'s final position on the grid. Your plan * The commands will be provided as a string where each character represents a direction: * \'U\' for up (increases the y-coordinate by 1) * \'D\' for down (decreases the y-coordinate by 1) * \'L\' for left (decreases the x-coordinate by 1) * \'R\' for right (increases the x-coordinate by 1) * The function should take a single string of commands as input and return the final position of the robot as a tuple (x, y). Some examples ``` \\"UDLR\\" \\"(0, 0)\\" \\"UUUDDD\\" \\"(0, 0)\\" \\"UUDDLLRR\\" \\"(0, 0)\\" \\"UUU\\" \\"(0, 3)\\" \\"LL\\" \\"(-2, 0)\\" \\"UUDDLLRRR\\" \\"(1, 0)\\" ``` Enjoy coding!","solution":"def final_position(commands): Returns the final position of the robot after executing the commands. Args: commands (str): A string of commands where each command is one of \'U\', \'D\', \'L\', \'R\' representing up, down, left, and right respectively. Returns: tuple: The final position of the robot as (x, y). x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"You are given a collection of strings. You need to determine if any permutation of those strings can form a palindrome. A palindrome is a string that reads the same forward and backward. -----Input----- The first line contains an integer T, the number of test cases (1 ≤ T ≤ 10). Each of the next T lines contains a string of lowercase English letters (the length of each string is at most 1000). -----Output----- For each test case, output \\"YES\\" if any permutation of the given string can form a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input: 3 civic ivicc hello Output: YES YES NO Explanation: 1. \\"civic\\" is already a palindrome. 2. \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. 3. \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determine if any permutation of the string can form a palindrome. :param s: String to check :return: \'YES\' if a permutation can form a palindrome, otherwise \'NO\' from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count if odd_count > 1: return \\"NO\\" return \\"YES\\" def process_cases(cases): Process multiple test cases. :param cases: List of strings (test cases) :return: List of results for each test case results = [] for case in cases: results.append(can_form_palindrome(case)) return results"},{"question":"Task An adventurer is traversing through a dense forest, trying to find his way out. The forest can be represented as a rectangular grid of size `n x m`, where each cell can either be passable or blocked by a tree. The adventurer starts at the top-left corner of the grid (0,0) and aims to reach the bottom-right corner (n-1, m-1). The adventurer can move up, down, left, or right, but cannot step out of the grid or move into cells that are blocked by trees. Write a function to determine if there is a way for the adventurer to get out of the forest. # Example For `forest = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1] ]`, the output should be `True`. There is a path from the top-left corner to the bottom-right corner following the cells with 1s: - (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3). For `forest = [ [1, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1], [0, 0, 1, 1] ]`, the output should be `False`. There is no path from the top-left corner to the bottom-right corner since the adventurer can\'t get past the blocked cells. # Input/Output - `[input]` array of arrays `forest` Constraints: `2 ≤ n, m ≤ 20, forest[i][j] ∈ {0, 1}` - `[output]` a boolean Return `True` if there is a path for the adventurer to reach the bottom-right corner; otherwise, return `False`.","solution":"def is_path_possible(forest): Determines if there is a path from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) in a given forest grid. :param forest: List[List[int]], the forest grid where 1 is a passable cell and 0 is a blocked cell. :return: bool, True if a path exists, else False. def dfs(x, y): if x < 0 or y < 0 or x >= len(forest) or y >= len(forest[0]) or forest[x][y] == 0: return False if (x, y) == (len(forest) - 1, len(forest[0]) - 1): return True # Mark the cell as visited forest[x][y] = 0 # Traverse in all 4 possible directions if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False return dfs(0, 0)"},{"question":"=====Problem Statement===== You are given a string s representing a phrase. Your task is to find the length of the longest word in the string. A word is defined as a sequence of non-space characters. For example, for the phrase \\"The quick brown fox jumps over the lazy dog\\", the longest word is \\"jumps\\" with a length of 5. Write a function that returns the length of the longest word in the given phrase. =====Input Format===== A single line of input containing the string s. =====Constraints===== 1 ≤ len(s) ≤ 10^3 =====Output Format===== A single integer representing the length of the longest word in the string.","solution":"def longest_word_length(s): Returns the length of the longest word in the given string s. :param s: A string representing a phrase :type s: str :return: The length of the longest word in the string :rtype: int words = s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"You are tasked with helping the technical support team analyze network logs to identify potential security threats. Each log entry records a login attempt and contains a timestamp and an IP address. Sometimes, multiple login attempts come from the same IP address within a short period, indicating a possible brute-force attack. Write a function `detect_brute_force` that takes two inputs: 1. A list of tuples, where each tuple contains a string (timestamp in \\"YYYY-MM-DD HH:MM:SS\\" format) and a string (IP address). 2. An integer `threshold` that specifies the number of attempts considered as brute-force if made by the same IP address within a 5-minute window. Your function should return a collection of IP addresses identified as potential brute-force attackers. Here\'s an example: ```python login_attempts = [ (\\"2023-10-01 10:00:00\\", \\"192.168.1.1\\"), (\\"2023-10-01 10:01:30\\", \\"192.168.1.1\\"), (\\"2023-10-01 10:04:00\\", \\"192.168.1.1\\"), (\\"2023-10-01 10:06:00\\", \\"10.0.0.1\\"), (\\"2023-10-01 10:07:30\\", \\"10.0.0.1\\"), (\\"2023-10-01 10:08:00\\", \\"192.168.1.1\\"), (\\"2023-10-01 10:09:50\\", \\"192.168.1.1\\"), ] threshold = 3 detect_brute_force(login_attempts, threshold) # should return: {\\"192.168.1.1\\"} ``` Your implementation should efficiently process the list of login attempts, identify IP addresses with a high frequency of login attempts within short windows, account for the varying lengths of those windows, and return the correct set of IP addresses.","solution":"from datetime import datetime, timedelta def detect_brute_force(login_attempts, threshold): Detects IP addresses with potential brute-force attack attempts. Parameters: login_attempts (list of tuples): List of (timestamp, IP address) tuples. threshold (int): Number of attempts considered as brute-force in a 5-minute window. Returns: set: Set of IP addresses identified as potential brute-force attackers. from collections import defaultdict, deque # Convert timestamps to datetime objects and consolidate attempts by IP attempts_by_ip = defaultdict(deque) for timestamp, ip in login_attempts: time = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") attempts_by_ip[ip].append(time) brute_force_ips = set() for ip, times in attempts_by_ip.items(): times = deque(sorted(times)) window = deque() for time in times: window.append(time) while window and window[0] < time - timedelta(minutes=5): window.popleft() if len(window) >= threshold: brute_force_ips.add(ip) break return brute_force_ips"},{"question":"Chef loves baking cakes and experimenting with different ingredients. This time Chef discovered a new recipe that requires a certain number of ingredients to be added in specific quantities. However, Chef is a beginner and needs help in determining the total quantity of ingredients required for the recipe. Given an integer array `quantities` of size N, where each element represents the quantity of one type of ingredient required for the recipe, your task is to help Chef calculate the total quantity of ingredients needed. ------Input------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains: * An integer N, the number of types of ingredients. * An array `quantities`, containing N integers representing the quantity of each type of ingredient. ------Output------ For each test case, output one integer representing the total quantity of ingredients required for that recipe. ------Constraints------ - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ quantities[i] ≤ 1000 ------Example------ Input: 2 3 1 2 3 4 10 20 30 40 Output: 6 100 ------Explanation------ Example case 1: The array [1, 2, 3] has three ingredients with quantities 1, 2, and 3. The total quantity is 1+2+3 = 6. Example case 2: The array [10, 20, 30, 40] has four ingredients with quantities 10, 20, 30, and 40. The total quantity is 10+20+30+40 = 100.","solution":"def total_quantities(test_cases): Given a list of test cases, where each test case contains a list of ingredient quantities, return a list of total quantities for each test case. Parameters: test_cases (list of lists): List of test cases with ingredient quantities. Returns: list: List of total quantities for each test case. results = [] for quantities in test_cases: results.append(sum(quantities)) return results"},{"question":"Given a string representing a rotated alphabetical sequence, write a function that returns the original, non-rotated version of the string. The string will contain only lowercase alphabetical characters and can be shifted to the right by any number of positions. ```python def unravel_rotated_sequence(input_string: str, shift: int) -> str: # Your code here # Examples: unravel_rotated_sequence(\\"zab\\", 1) # should return \\"abc\\" unravel_rotated_sequence(\\"cdefgh\\", 2) # should return \\"qrstuv\\" unravel_rotated_sequence(\\"mnopqr\\", 5) # should return \\"abcdef\\" ``` # Constraints: - The length of `input_string` will be between 1 and 100. - The `shift` will be between 0 and 25. The function should efficiently handle strings of the maximum length and respect the shift constraints.","solution":"def unravel_rotated_sequence(input_string: str, shift: int) -> str: Returns the original, non-rotated version of the input_string that has been rotated to the right by the given number of positions. n = len(input_string) original = [] # Calculate the original indices by \\"unshifting\\" for i in range(n): original_index = (ord(input_string[i]) - ord(\'a\') - shift) % 26 original_char = chr(original_index + ord(\'a\')) original.append(original_char) return \'\'.join(original)"},{"question":"You are given an array representing the daily temperatures of a week. For each day, you must determine the number of days you would have to wait until a warmer temperature occurs. If there is no future day for which this is possible, just put 0 for that day. Write a function that takes an array of integers representing the temperatures and returns a list of integers representing the wait times. -----Input----- An integer array temperatures of length 7, where temperatures[i] represents the temperature on the ith day. -----Output----- An integer array result of length 7, where result[i] is the number of days you have to wait until a warmer temperature. If there is no such warmer day, result[i] is 0. -----Example----- Input: [73, 74, 75, 71, 69, 72, 76] Output: [1, 1, 4, 2, 1, 1, 0] Note: The function must achieve a time complexity of O(n), where n is the number of days.","solution":"def daily_temperatures(temperatures): Given an array of temperatures, returns an array of the number of days one would have to wait until a warmer temperature. If there is no future day with a warmer temperature, returns 0 for that day. Parameters: temperatures (list): List of integers representing daily temperatures. Returns: list: List of integers representing the wait times for a warmer temperature. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"Given an undirected graph with `N` nodes and `M` edges, we need to find the number of connected components in the graph after performing a series of operations. Each operation is of one of the following two types: 1. `ADD U V` - Add an edge between nodes `U` and `V`. 2. `REMOVE U V` - Remove the edge between nodes `U` and `V`. The initial state of the graph is described by the edges provided in the input. After performing each operation, output the number of connected components in the graph. -----Input----- - The first line of the input contains two integers `N` and `M`, the number of nodes and the number of edges, respectively. - The next `M` lines each contain two integers `U` and `V` denoting an edge between node `U` and node `V`. - The next line contains an integer `Q`, the number of operations. - Each of the next `Q` lines describes an operation in the format specified above. -----Output----- - For each operation, output a single integer, the number of connected components after performing that operation. -----Constraints----- - 1 ≤ N ≤ 100,000 - 0 ≤ M ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ U, V ≤ N - U ≠ V -----Example----- Input: 5 4 1 2 2 3 4 5 1 5 5 REMOVE 1 5 ADD 3 4 REMOVE 2 3 REMOVE 1 2 ADD 4 1 Output: 2 1 2 3 2","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size self.component_count = size def find(self, u): if self.root[u] != u: self.root[u] = self.find(self.root[u]) return self.root[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.root[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.root[root_u] = root_v else: self.root[root_v] = root_u self.rank[root_u] += 1 self.component_count -= 1 def connected(self, u, v): return self.find(u) == self.find(v) def count_components(self): return self.component_count def process_operations(n, edges, operations): uf = UnionFind(n) edge_set = set() for u, v in edges: if (u, v) not in edge_set and (v, u) not in edge_set: uf.union(u - 1, v - 1) edge_set.add((u, v)) result = [] for operation in operations: op, u, v = operation.split() u, v = int(u) - 1, int(v) - 1 if op == \\"ADD\\": if not uf.connected(u, v): uf.union(u, v) edge_set.add((u + 1, v + 1)) elif op == \\"REMOVE\\": if (u + 1, v + 1) in edge_set or (v + 1, u + 1) in edge_set: edge_set.remove((u + 1, v + 1) if (u + 1, v + 1) in edge_set else (v + 1, u + 1)) # To get component count after removal, re-initialize UF with remaining edges uf = UnionFind(n) for edge in edge_set: uf.union(edge[0] - 1, edge[1] - 1) result.append(uf.count_components()) return result"},{"question":"A social media application is gaining popularity, and the developers want to add a new feature to it. This feature involves identifying influencers based on their followers. You have been asked to implement this feature. You are given a list of N users and their followers information. Each user is represented by a unique integer from 0 to N-1. The followers information is given as a list of pairs, where each pair (a, b) means user a follows user b. A user is considered an influencer if they are followed by all other users and they follow no one. Write a function to identify the influencer user. If there is no influencer, return -1. -----Input----- The first line of input contains an integer N denoting the number of users. The second line contains an integer F denoting the number of follower pairs. Each of the following F lines contains two integers a and b representing that user a follows user b. -----Output----- Output a single integer denoting the influencer user, or -1 if there is no influencer. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ F ≤ N * (N - 1) -----Example----- Input: 4 3 0 1 1 2 3 2 Output: 2 -----Explanation----- Example case 1. Users 0, 1, and 3 all follow user 2 and user 2 does not follow anyone. Hence 2 is the influencer user.","solution":"def find_influencer(N, F, followers): in_degrees = [0] * N out_degrees = [0] * N for a, b in followers: out_degrees[a] += 1 in_degrees[b] += 1 for i in range(N): if in_degrees[i] == N - 1 and out_degrees[i] == 0: return i return -1"},{"question":"A \\"Hamming distance\\" between two strings of equal length is defined as the number of positions at which the corresponding characters are different. Given two strings, write a function to compute the Hamming distance. Function Signature: `def hamming_distance(str1: str, str2: str) -> int:` The function will take in two strings of equal length and return an integer representing the Hamming distance. Example: - Input: str1 = \\"karolin\\", str2 = \\"kathrin\\" - Output: 3 Explanation: In the example above, the Hamming distance between \\"karolin\\" and \\"kathrin\\" is 3. The differing positions are: - str1[1] = \\"a\\", str2[1] = \\"a\\" (same) - str1[2] = \\"r\\", str2[2] = \\"t\\" (different) - str1[3] = \\"o\\", str2[3] = \\"h\\" (different) - str1[4] = \\"l\\", str2[4] = \\"r\\" (different) - str1[5] = \\"i\\", str2[5] = \\"i\\" (same) - str1[6] = \\"n\\", str2[6] = \\"n\\" (same)","solution":"def hamming_distance(str1: str, str2: str) -> int: Compute the Hamming distance between two strings of equal length. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: int: The Hamming distance between str1 and str2. if len(str1) != len(str2): raise ValueError(\\"Strings must be of equal length\\") distance = 0 for i in range(len(str1)): if str1[i] != str2[i]: distance += 1 return distance"},{"question":"Priority Queue with Heaps A priority queue is an abstract data type that works like a regular queue or stack data structure, but with a priority associated with each element. An element with high priority is served before an element with low priority, regardless of its insertion order. The most efficient way to implement a priority queue is by using a binary heap. For this task, you need to create a MinHeap class for a min-heap priority queue where the lowest priority element is at the root. The class should have the following methods: 1. `__init__(self)` - Initializes an empty heap. 2. `insert(self, value)` - Inserts an element into the heap. 3. `get_min(self)` - Returns the smallest element in the heap without removing it. 4. `extract_min(self)` - Removes and returns the smallest element from the heap. 5. `heapify_up(self, index)` - Ensures the tree satisfies the heap property after insertion. 6. `heapify_down(self, index)` - Ensures the tree satisfies the heap property after removal. The heap property should be maintained at all times. For a min-heap, each parent node must be less than or equal to its children. Here is the starting template for your class: ```Python class MinHeap: def __init__(self): Initializes an empty heap self.heap = [] def insert(self, value): Inserts an element into the heap self.heap.append(value) self.heapify_up(len(self.heap) - 1) def get_min(self): Returns the smallest element in the heap without removing it if not self.heap: return None return self.heap[0] def extract_min(self): Removes and returns the smallest element from the heap if len(self.heap) == 0: return None min_elem = self.heap[0] self.heap[0] = self.heap.pop() self.heapify_down(0) return min_elem def heapify_up(self, index): Ensures the tree satisfies the heap property after insertion raise NotImplementedError(\\"To be implemented by the candidate\\") def heapify_down(self, index): Ensures the tree satisfies the heap property after removal raise NotImplementedError(\\"To be implemented by the candidate\\") ``` You will need to implement the `heapify_up` and `heapify_down` methods to ensure that the heap property is maintained. The `heapify_up` method is used to restore the heap property by moving the element at the given index up the tree until the heap property is satisfied. The `heapify_down` method is used to restore the heap property by moving the element at the given index down the tree until the heap property is satisfied. Here is an example of how the MinHeap class should work: ```Python heap = MinHeap() heap.insert(3) heap.insert(1) heap.insert(5) print(heap.get_min()) # Should print 1 print(heap.extract_min()) # Should print 1 print(heap.get_min()) # Should print 3 ``` You are required to write the missing methods so that they correctly implement the heap property.","solution":"class MinHeap: def __init__(self): Initializes an empty heap self.heap = [] def insert(self, value): Inserts an element into the heap self.heap.append(value) self.heapify_up(len(self.heap) - 1) def get_min(self): Returns the smallest element in the heap without removing it if not self.heap: return None return self.heap[0] def extract_min(self): Removes and returns the smallest element from the heap if len(self.heap) == 0: return None min_elem = self.heap[0] if len(self.heap) == 1: self.heap.pop() else: self.heap[0] = self.heap.pop() self.heapify_down(0) return min_elem def heapify_up(self, index): Ensures the tree satisfies the heap property after insertion while index > 0: parent_index = (index - 1) // 2 if self.heap[index] < self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] index = parent_index else: break def heapify_down(self, index): Ensures the tree satisfies the heap property after removal size = len(self.heap) while index < size: left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 smallest = index if left_child_index < size and self.heap[left_child_index] < self.heap[smallest]: smallest = left_child_index if right_child_index < size and self.heap[right_child_index] < self.heap[smallest]: smallest = right_child_index if smallest != index: self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index] index = smallest else: break"},{"question":"Task You are given two strings `a` and `b` composed of lowercase Latin letters. The string `b` was created by possibly repeating `a` multiple times and then removing several characters from the repeated sequence. Your task is to determine the minimum number of times the string `a` should be repeated to form a supersequence that contains `b` as a subsequence. If it is impossible to form such a supersequence, return `-1`. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, if `a = \\"abc\\"` and `b = \\"bcac\\"`, the smallest supersequence of `a` that contains `b` as a subsequence would be repeating `a` twice to get `\\"abcabc\\"`, from which you can delete \'a\' at position 1 and \'b\' at position 5 to obtain `\\"bcac\\"`. # Example For `a = \\"abc\\"` and `b = \\"bcac\\"`, the output should be `2`. ``` \\"abcabc\\" --> \\"bcac\\" - - ``` For `a = \\"abc\\"` and `b = \\"xyz\\"`, the output should be `-1`. It\'s impossible to form the word `b` from repetitions of `a`. # Function signature ```python def min_repeats(a: str, b: str) -> int: pass ``` # Input - `a`: a string of lowercase Latin letters, length between `1` and `100`. - `b`: a string of lowercase Latin letters, length between `1` and `100`. # Output - An integer indicating the minimum number of repetitions of `a` needed to form `b` as a subsequence or `-1` if it is not possible.","solution":"def min_repeats(a: str, b: str) -> int: # Function to check if b is a subsequence of s def is_subsequence(s, b): b_idx = 0 for char in s: if b_idx < len(b) and char == b[b_idx]: b_idx += 1 if b_idx == len(b): return True return b_idx == len(b) # Lengths of the strings len_a = len(a) len_b = len(b) # Maximum number of repetitions needed to cover the length of b max_repeats = (len_b + len_a - 1) // len_a + 1 # one extra to handle boundaries # Check with increasing repetitions of a for repeats in range(1, max_repeats + 1): if is_subsequence(a * repeats, b): return repeats return -1"},{"question":"# Task You are given a list of integers where every element appears exactly twice, except for one element which appears exactly once. Your task is to find the element that appears only once. # Example For `sequence = [2, 3, 5, 3, 2, 4, 4]`, the output should be `5`. For `sequence = [10, 1, 1, 2, 3, 3, 2]`, the output should be `10`. For `sequence = [7, 9, 7, 9, 6]`, the output should be `6`. # Input/Output - `[input]` integer array `sequence` The list of integers with one unique element. - `[output]` an integer The element that appears exactly once in the sequence.","solution":"def find_unique_element(sequence): Finds the element in the sequence that appears only once. :param sequence: List[int] - List of integers where every element appears twice except for one element. :return: int - The element that appears exactly once. unique_element = 0 for num in sequence: unique_element ^= num return unique_element"},{"question":"# Roman Numeral Converter Your task is to write a function that converts an integer to a Roman numeral. The function must accept a positive integer less than or equal to `3999` and returns its Roman numeral representation as a string. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given the following list of roman numeral symbols: - `I = 1` - `V = 5` - `X = 10` - `L = 50` - `C = 100` - `D = 500` - `M = 1000` Here are few examples: ```python convert_to_roman(3) # returns \\"III\\" convert_to_roman(4) # returns \\"IV\\" convert_to_roman(9) # returns \\"IX\\" convert_to_roman(58) # returns \\"LVIII\\" convert_to_roman(3999) # returns \\"MMMCMXCIX\\" ``` Your function should construct the Roman numeral representation of the given integer using the subtraction principle appropriately.","solution":"def convert_to_roman(num): Convert an integer to a Roman numeral. Parameters: num (int): A positive integer less than or equal to 3999 Returns: str: The Roman numeral representation of the integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"You are given a square matrix of integers. Your task is to write a function that determines whether the matrix is a magic square or not. A magic square is a square matrix in which the sum of every row, every column, and both diagonals are the same. The function should return true if the matrix is a magic square, and false otherwise. The matrix will always be non-empty, and all rows and columns will have the same length. Example 1: ``` isMagicSquare([[2,7,6],[9,5,1],[4,3,8]]) // true ``` Example 2: ``` isMagicSquare([[1,2,3],[4,5,6],[7,8,9]]) // false ``` Implement the `isMagicSquare` function as described above. Ensure that your solution checks all necessary conditions to verify if the matrix is indeed a magic square.","solution":"def isMagicSquare(matrix): Returns True if the given matrix is a magic square, otherwise False. n = len(matrix) if n == 1: # single element matrix is always a magic square return True sum_set = set() # Sum of the first row target_sum = sum(matrix[0]) sum_set.add(target_sum) # Check sums of all rows for row in matrix: if sum(row) != target_sum: return False # Check sums of all columns for col in range(n): col_sum = sum(matrix[row][col] for row in range(n)) sum_set.add(col_sum) if col_sum != target_sum: return False # Check sum of the main diagonal main_diag_sum = sum(matrix[i][i] for i in range(n)) sum_set.add(main_diag_sum) if main_diag_sum != target_sum: return False # Check sum of the secondary diagonal sec_diag_sum = sum(matrix[i][n-i-1] for i in range(n)) sum_set.add(sec_diag_sum) if sec_diag_sum != target_sum: return False # If all sums are the same, then it\'s a magic square return len(sum_set) == 1"},{"question":"=====Function Descriptions===== max The max tool computes the maximum value along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.max(my_array, axis = 0) #Output : [3 4] print numpy.max(my_array, axis = 1) #Output : [2 4] print numpy.max(my_array, axis = None) #Output : 4 print numpy.max(my_array) #Output : 4 By default, the axis is None. Therefore, it computes the max of the flattened array. min The min tool computes the minimum value along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.min(my_array, axis = 0) #Output : [1 2] print numpy.min(my_array, axis = 1) #Output : [1 3] print numpy.min(my_array, axis = None) #Output : 1 print numpy.min(my_array) #Output : 1 By default, the axis is None. Therefore, it computes the min of the flattened array. =====Problem Statement===== You are given a 2-D array of size NXM. Your task is to find: The max along axis 0 The min along axis 1 The min along axis None =====Input Format===== The first line contains the space separated values of N and M. The next N lines contain M space separated integers. =====Output Format===== First, print the max along axis 0. Second, print the min along axis 1. Third, print the min along axis None.","solution":"import numpy as np def array_operations(n, m, array): Given a 2-D array of size NxM, this function returns: - The max along axis 0 - The min along axis 1 - The min along axis None my_array = np.array(array) max_axis_0 = np.max(my_array, axis=0) min_axis_1 = np.min(my_array, axis=1) min_none = np.min(my_array, axis=None) return max_axis_0, min_axis_1, min_none"},{"question":"You are tasked with managing a library\'s book borrowing system. Each book in the library is identified by a unique book id and has a corresponding availability status indicating whether it is currently borrowed or available. To facilitate the process, implement the `Library` class which provides the following methods: - `Library(int[] books)` - Initializes the library with a list of book ids. - `borrowBook(int bookId)` - Allows a user to borrow a book. Returns `true` if the book is successfully borrowed (i.e., it was available), and `false` otherwise. - `returnBook(int bookId)` - Allows a user to return a book. Returns `true` if the book is successfully returned (i.e., it was borrowed), and `false` otherwise. - `checkAvailability(int bookId)` - Returns `true` if the specified book is available, `false` otherwise. # Example ```python library = Library([101, 102, 103, 104, 105]) # Borrowing books print(library.borrowBook(101)) # Output: True (Book 101 is now borrowed) print(library.borrowBook(101)) # Output: False (Book 101 is already borrowed) # Checking availability print(library.checkAvailability(101)) # Output: False (Book 101 is borrowed) print(library.checkAvailability(102)) # Output: True (Book 102 is available) # Returning books print(library.returnBook(101)) # Output: True (Book 101 is now returned) print(library.returnBook(101)) # Output: False (Book 101 was already returned) # Final availability check print(library.checkAvailability(101)) # Output: True (Book 101 is available again) ``` # Note: - Book ids are unique positive integers. - All operations should maintain a time complexity of O(1). - You may assume the `bookId` will always be one of the ids present in the initial list of book ids provided to the `Library` class.","solution":"class Library: def __init__(self, books): Initializes the library with a list of book ids. self.books_status = {book_id: True for book_id in books} # True indicates the book is available def borrowBook(self, bookId): Allows a user to borrow a book. Returns True if the book is successfully borrowed (i.e., it was available), and False otherwise. if self.books_status.get(bookId, False): # Check if the book is available self.books_status[bookId] = False return True return False def returnBook(self, bookId): Allows a user to return a book. Returns True if the book is successfully returned (i.e., it was borrowed), and False otherwise. if bookId in self.books_status and not self.books_status[bookId]: # Check if the book was borrowed self.books_status[bookId] = True return True return False def checkAvailability(self, bookId): Returns True if the specified book is available, False otherwise. return self.books_status.get(bookId, False)"},{"question":"Given an array of integers nums, return true if and only if it contains an element with at least three occurrences. Example 1: Input: nums = [1,2,3,1,2,1] Output: true Explanation: The element 1 appears 3 times. Example 2: Input: nums = [1,2,3,4] Output: false Explanation: No element appears 3 times. Example 3: Input: nums = [1,1,1,2,2,3,3,3,3] Output: true Explanation: The element 1 appears 3 times and the element 3 appears 4 times. Constraints: 2 <= nums.length <= 500 -10^3 <= nums[i] <= 10^3","solution":"def has_three_occurrences(nums): Returns True if there is an element with at least three occurrences in the array. from collections import Counter counts = Counter(nums) for count in counts.values(): if count >= 3: return True return False"},{"question":"Create a program to determine if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). # Objective Write a function that takes a string as input and determines if it is possible to rearrange the characters in the string to form a palindrome. The function should return `True` if it is possible to rearrange the characters to form a palindrome, and `False` otherwise. # Examples 1. Input: `\\"carrace\\"` Output: `True` Explanation: The string can be rearranged to the palindrome `\\"racecar\\"`. 2. Input: `\\"daily\\"` Output: `False` Explanation: The string cannot be rearranged to form a palindrome. # Constraints * The input string will only contain lower case letters (a-z) and no spaces or special characters. * The length of the input string will be between 1 and 1000 characters, inclusive. # Note To determine if a string can be rearranged to form a palindrome, you can use the fact that at most one character can have an odd frequency in the string. If more than one character has an odd frequency, it is not possible to rearrange the string to form a palindrome.","solution":"def can_form_palindrome(s): Determine if the characters of the input string can be rearranged to form a palindrome. :param s: str - The input string consisting of lowercase letters :return: bool - True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter # Count occurrences of each character char_count = Counter(s) # Calculate the number of characters with odd counts odd_frequency_count = sum(1 for count in char_count.values() if count % 2 != 0) # At most one character with an odd frequency is allowed return odd_frequency_count <= 1"},{"question":"You are given a list of string transactions that represent deposits and withdrawals in a bank account. Each transaction string is composed of a letter followed by a number. The letter \'D\' signifies a deposit, and the letter \'W\' signifies a withdrawal. For example, \\"D300\\" means a deposit of 300 units, and \\"W200\\" means a withdrawal of 200 units. Assume the initial balance in the account is zero. Write a function `calculate_balance()` that takes a list of such transaction strings and returns the final balance in the account after processing all the transactions. If a withdrawal would cause the balance to go negative, consider it invalid and ignore that transaction. For example, given the input: ```python [\\"D300\\", \\"W200\\", \\"D100\\", \\"W500\\", \\"D400\\"] ``` The function should return `600` since the last withdrawal of \\"W500\\" is invalid due to insufficient funds. For example, using the input above, `calculate_balance()` would return: ```python 600 ```","solution":"def calculate_balance(transactions): Calculate the final balance after processing a list of transactions. :param transactions: List of strings representing transactions. Each string starts with \'D\' for deposit or \'W\' for withdrawal, followed by the amount. :return: Final balance after processing all valid transactions. balance = 0 for transaction in transactions: type_of_transaction = transaction[0] amount = int(transaction[1:]) if type_of_transaction == \'D\': balance += amount elif type_of_transaction == \'W\': if balance >= amount: balance -= amount # Ignore invalid withdrawals return balance"},{"question":"# Story You have encountered a peculiar string manipulation task where the goal is to transform a given string according to specific rules. The string contains lowercase and uppercase alphabetic characters, and you must reformat the string by moving the lowercase characters to the beginning of the string, followed by the uppercase characters. The order among the lowercase and uppercase characters should be preserved. ___ # Task Write a function that takes a string as input and returns the string reformatted as described above. **Examples:** ``` reformat_string(\\"aBcDeF\\") -> \\"aceBDF\\" reformat_string(\\"HelloWorld\\") -> \\"elloorldHW\\" reformat_string(\\"Python\\") -> \\"ythonP\\" ``` **Note:** - The returned string should maintain the relative order of lowercase and uppercase characters from the original string. - The input string will not be empty and will only contain alphabetic characters.","solution":"def reformat_string(s): Reformats the given string by moving all lowercase characters to the beginning, followed by all uppercase characters. The relative order of characters is maintained. Args: s (str): The input string containing lowercase and uppercase alphabetic characters. Returns: str: The reformatted string. lowercase = [char for char in s if char.islower()] uppercase = [char for char in s if char.isupper()] return \'\'.join(lowercase + uppercase)"},{"question":"A robot is designed to move in an infinite grid starting from position (0, 0). The robot can receive a string of commands that include the following characters: - \'G\': Move one step forward in the current direction. - \'L\': Turn 90 degrees to the left. - \'R\': Turn 90 degrees to the right. The robot starts facing north. It is important to determine if the robot, after executing a sequence of commands, is bound to circle back to the starting point (0, 0) or if it will eventually keep moving away from the starting point forever. Given a string of commands, return True if and only if the robot returns to the starting point after executing the commands an arbitrary number of times (at least once). Note: The length of the command string will be 1 to 100. Example 1: Input: \\"GGLLGG\\" Output: True Explanation: The robot moves north to (0,2), then turns 180 degrees back to face south, and eventually returns to (0, 0). Example 2: Input: \\"GG\\" Output: False Explanation: The robot moves north indefinitely, continuously moving away from (0, 0). Example 3: Input: \\"GL\\" Output: True Explanation: The robot moves in a circle, returning to (0, 0) after four cycles.","solution":"def is_robot_bounded(instructions): Determines if the robot returns to the starting point (0, 0) after executing the sequence of commands at least once. # Initial state x, y = 0, 0 # Starting position direction_index = 0 # 0-North, 1-East, 2-South, 3-West # Directions corresponding to right turns directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for instruction in instructions: if instruction == \'G\': # Move forward x += directions[direction_index][0] y += directions[direction_index][1] elif instruction == \'L\': # Turn left direction_index = (direction_index - 1) % 4 elif instruction == \'R\': # Turn right direction_index = (direction_index + 1) % 4 # After one loop, the robot should be back at (0, 0) or facing in a different direction return (x == 0 and y == 0) or direction_index != 0"},{"question":"You are given a sequence of integers and you need to find the length of the longest subsequence that is strictly increasing. A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your Task Implement a method `longest_increasing_subsequence` that takes a list of integers as input and returns the length of the longest strictly increasing subsequence. # Examples - For the input list `[10, 9, 2, 5, 3, 7, 101, 18]`, the method should return `4` because the longest increasing subsequence is `[2, 3, 7, 18]`. - For the input list `[0, 1, 0, 3, 2, 3]`, the method should return `4` because the longest increasing subsequence is `[0, 1, 2, 3]`. - For the input list `[7, 7, 7, 7, 7, 7, 7]`, the method should return `1` because the longest increasing subsequence is `[7]`. # Constraints - The length of the sequence will be between `1` and `1000`. - Each element in the sequence is an integer.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence in the given list of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function, `digitSum` / `digit-sum` / `digit_sum` / `DigitSum`, that takes an integer `n` as an argument and returns the sum of its digits. If the input number is negative, the function should still return the sum of the digits as if the number were positive. For example, if the following numbers were passed as arguments: ```python 1234 ``` Your function would return the following output: ```python 10 ``` For example, if the following numbers were passed as arguments: ```python -567 ``` Your function would return the following output: ```python 18 ``` The function should also handle edge cases where the input number is 0, in which case, the returned sum should be 0.","solution":"def digit_sum(n): Returns the sum of the digits of the integer n. If n is negative, it treats it as if it were positive. n = abs(n) # Ensure n is positive return sum(int(digit) for digit in str(n))"},{"question":"=====Problem Statement===== You are tasked with simulating a basic online library system where users can borrow and return books. Specifications: The system should be able to handle the following commands: 1. `BORROW <User> <Book>`: Records that the user has borrowed the book. A user cannot borrow more than one copy of the same book simultaneously. 2. `RETURN <User> <Book>`: Records that the user has returned the book. A user cannot return a book they haven\'t borrowed. 3. `STATUS <Book>`: Prints the list of users who have borrowed this book, in order of borrowing time (oldest to newest). Examples: Input ``` 5 BORROW Alice Book1 RETURN Alice Book1 BORROW Bob Book1 BORROW Alice Book2 STATUS Book1 ``` Output ``` Bob ``` Input ``` 3 BORROW Alice Book1 BORROW Bob Book2 STATUS Book2 ``` Output ``` Bob ``` =====Input Format===== The first line contains M, the number of commands. The next M lines contain one command each. =====Constraints===== 0 < M < 100 =====Output Format===== For each `STATUS` command, print the names of users who have borrowed the specified book, each on a new line, in order of borrowing time. If no user has borrowed the book for the `STATUS` query, print `No one`. =====Sample Test Cases===== Input ``` 6 BORROW Alice Book1 BORROW Bob Book1 BORROW Charlie Book1 RETURN Alice Book1 STATUS Book1 BORROW Alice Book1 STATUS Book1 ``` Output ``` Bob Charlie Bob Charlie Alice ``` Additional Notes: - Ensure that your implementation can handle multiple commands and output the correct order of user names for status queries. - No two users will have the same name, and every book title is unique. - Consider edge cases such as no users borrowing a book before a `STATUS` command.","solution":"class OnlineLibrary: def __init__(self): self.books_borrowed = {} def borrow(self, user, book): if book not in self.books_borrowed: self.books_borrowed[book] = [] if user not in self.books_borrowed[book]: self.books_borrowed[book].append(user) def return_book(self, user, book): if book in self.books_borrowed and user in self.books_borrowed[book]: self.books_borrowed[book].remove(user) def status(self, book): if book in self.books_borrowed and self.books_borrowed[book]: return \'n\'.join(self.books_borrowed[book]) else: return \'No one\'"},{"question":"Write a function `sum_mul(n, m)` that will return the sum of all multiples of `n` below `m`. If `m` is not a positive integer or `n` is not a positive integer, return \\"INVALID\\". Examples: ``` sum_mul(2, 9) -> 20 (2 + 4 + 6 + 8) sum_mul(3, 10) -> 18 (3 + 6 + 9) sum_mul(4, -7) -> \\"INVALID\\" sum_mul(0, 15) -> \\"INVALID\\" ```","solution":"def sum_mul(n, m): Returns the sum of all multiples of `n` below `m`. If `m` or `n` is not a positive integer, returns \\"INVALID\\". if not (isinstance(n, int) and isinstance(m, int)) or n <= 0 or m <= 0: return \\"INVALID\\" return sum(range(n, m, n))"},{"question":"Implement a function that takes a string and returns the character that appears the most frequently. If multiple characters have the same highest frequency, return the one that appears first in the string. Input :: \\"sample string\\" Output :: \\"s\\"","solution":"def most_frequent_char(s): Returns the character that appears the most frequently in the string s. If multiple characters have the same highest frequency, return the one that appears first. char_frequency = {} for char in s: char_frequency[char] = char_frequency.get(char, 0) + 1 max_frequency = 0 most_frequent = \'\' for char in s: if char_frequency[char] > max_frequency: max_frequency = char_frequency[char] most_frequent = char return most_frequent"},{"question":"A large corporation has a surveillance system that monitors the movement of its employees throughout the day. The system generates a log that records the entry and exit times of each employee. Each log entry indicates whether the employee is entering or exiting the building, along with a timestamp. The goal is to calculate the total time each employee spent inside the building throughout the day. You are to write a program to determine this total time for each employee. **Input:** The input consists of multiple lines. Each line contains an employee ID (a positive integer), an action (\\"enter\\" or \\"exit\\"), and a timestamp in the format HH:MM (24-hour format). The input is terminated by a line containing only the word \\"END\\". **Output:** For each employee ID present in the log, output the total time (in hours and minutes) the employee spent inside the building. The output should be sorted by employee ID in ascending order. **Assumptions:** - The log is guaranteed to be well-formed. - There will be an \\"exit\\" entry for each \\"enter\\" entry for every employee. - No employee will have overlapping intervals of being inside the building. **Example:** Input: ``` 1 enter 09:00 2 enter 09:30 1 exit 12:00 2 exit 13:00 1 enter 14:00 1 exit 17:00 END ``` Output: ``` 1 06:00 2 03:30 ``` **Explanation:** - Employee 1 entered at 09:00 and exited at 12:00 (3 hours), then entered again at 14:00 and exited at 17:00 (3 more hours). Total: 6 hours. - Employee 2 entered at 09:30 and exited at 13:00 (3 hours 30 minutes). Total: 3 hours 30 minutes.","solution":"from datetime import datetime, timedelta from collections import defaultdict def calculate_total_time(logs): Calculate the total time each employee spent inside the building. Args: logs: List of strings where each string contains an employee ID, an action, and a timestamp. Returns: A dictionary where each key is an employee ID and the value is the total time in HH:MM format. time_format = \\"%H:%M\\" employee_times = defaultdict(timedelta) enter_times = {} for log in logs: if log == \\"END\\": break emp_id, action, timestamp = log.split() emp_id = int(emp_id) timestamp = datetime.strptime(timestamp, time_format) if action == \\"enter\\": enter_times[emp_id] = timestamp elif action == \\"exit\\": if emp_id in enter_times: enter_time = enter_times.pop(emp_id) time_spent = timestamp - enter_time employee_times[emp_id] += time_spent result = {} for emp_id, total_time in sorted(employee_times.items()): hours, remainder = divmod(total_time.seconds, 3600) minutes = remainder // 60 result[emp_id] = f\\"{hours:02}:{minutes:02}\\" return result"},{"question":"Robotic Vaccum Cleaner =========== You have just bought a new robotic vacuum cleaner for your home. You need to program its cleaning path based on a grid description of your house floor. Your task: ---------- Write a function `vacuumPath()` that calculates the final position of the robotic vacuum cleaner after a series of movement instructions. The function should take two arguments: - `start` (tuple of two integers), representing the starting coordinates (x, y) of the vacuum cleaner on the grid. - `movements` (array of strings), where each string is one of the following commands: `\\"UP\\"`, `\\"DOWN\\"`, `\\"LEFT\\"`, or `\\"RIGHT\\"`. The grid is an infinite 2D plane, and the coordinates can take any integer value. The function should return the final coordinates (x, y) as a tuple of two integers after following all the movement commands in the order they appear in the `movements` array. Have fun! > **Note:** Make sure the function handles all edge cases, such as multiple commands or no commands at all.","solution":"def vacuumPath(start, movements): Calculates the final position of the robotic vacuum cleaner after a series of movement instructions. Args: start (tuple): Starting coordinates (x, y) of the vacuum cleaner. movements (list): List of movement commands (\\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\"). Returns: tuple: Final coordinates (x, y) after executing all movements. x, y = start for move in movements: if move == \\"UP\\": y += 1 elif move == \\"DOWN\\": y -= 1 elif move == \\"LEFT\\": x -= 1 elif move == \\"RIGHT\\": x += 1 return (x, y)"},{"question":"# BACKGROUND: Alex loves geometry and often finds himself solving various geometric puzzles. Recently, he encountered an interesting problem involving circles and points. Given a circle and a set of points, Alex needs to determine which points lie inside the circle, which lie on the circumference, and which lie outside the circle. To solve this problem efficiently, he decided to write a program to automate this task. # TECHNICAL DETAILS: You need to determine a point\'s relationship to a circle by using the distance formula: - If the distance between the point and the circle\'s center is less than the radius, the point lies inside the circle. - If the distance is exactly equal to the radius, the point lies on the circumference. - If the distance is greater than the radius, the point lies outside the circle. # TASK: Write a function that takes as input: ``` - x_center and y_center: the coordinates (floats) of the circle\'s center; - radius: the radius (float) of the circle; - points: a list of tuples, where each tuple contains the coordinates (x, y) of a point (both floats). ``` and then returns: - A tuple of three lists: the first list containing points inside the circle, the second list containing points on the circumference, and the third list containing points outside the circle. Each point should be represented as a tuple (x, y). # NOTES: - Perform appropriate input validation to ensure that radius is a positive number. - If a point coincides exactly with the center of the circle, consider it as lying inside the circle. - Use an epsilon value to handle floating point precision issues when comparing distances. # EXAMPLE: ``` Input: x_center: 0.0 y_center: 0.0 radius: 1.0 points: [(0.0, 0.0), (1.0, 0.0), (0.5, 0.5), (2.0, 2.0)] Output: ([(0.0, 0.0), (0.5, 0.5)], [(1.0, 0.0)], [(2.0, 2.0)]) ```","solution":"import math def classify_points(x_center, y_center, radius, points): Classify points based on their relationship to a circle. Parameters: x_center (float): x-coordinate of the circle\'s center y_center (float): y-coordinate of the circle\'s center radius (float): radius of the circle points (list of tuples): list of points to classify, each represented as a tuple (x, y) Returns: tuple: A tuple of three lists: - List of points inside the circle - List of points on the circumference of the circle - List of points outside the circle if radius <= 0: raise ValueError(\\"Radius must be a positive number\\") epsilon = 1e-7 inside = [] on_circumference = [] outside = [] for (x, y) in points: distance = math.hypot(x - x_center, y - y_center) if distance < radius - epsilon: inside.append((x, y)) elif abs(distance - radius) <= epsilon: on_circumference.append((x, y)) else: outside.append((x, y)) return inside, on_circumference, outside"},{"question":"# Task You are given a string `s` consisting of lowercase English letters and a character `c`. Your task is to determine the shortest distance from each character in the string `s` to the character `c`. # Input/Output - `[input]` string `s` A non-empty string of lowercase English letters. `1 ≤ s.length ≤ 1000` - `[input]` character `c` A single lowercase English letter that is guaranteed to be present in the string `s`. - `[output]` an array of integers An array where each element `i` is the shortest distance from the character in position `i` of the string `s` to `c`. # Example For ``` s = \\"loveleetcode\\", c = \'e\' ``` the result should be ``` [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] ``` Explanation: The first \'e\' is at index 3, the second and third \'e\' are at indices 5 and 6, and the last \'e\' is at the index 11. The shortest distances for each character in the string to any \'e\' are calculated accordingly.","solution":"def shortest_to_char(s, c): Returns a list of integers representing the shortest distance from each character in the string `s` to the character `c`. n = len(s) answer = [float(\'inf\')] * n # First pass to find the shortest distance to the closest `c` on the left prev_position = float(\'-inf\') for i in range(n): if s[i] == c: prev_position = i answer[i] = min(answer[i], i - prev_position) # Second pass to find the shortest distance to the closest `c` on the right prev_position = float(\'inf\') for i in range(n-1, -1, -1): if s[i] == c: prev_position = i answer[i] = min(answer[i], prev_position - i) return answer"},{"question":"Count the Vowels! String Operation Maria needs to write a function that counts the number of vowels in a given string, considering only \'a\', \'e\', \'i\', \'o\', and \'u\' as vowels. She is struggling to get an accurate count. Can you help her by writing a function that takes a string as input and returns the number of vowels in that string?","solution":"def count_vowels(s): Returns the number of vowels (\'a\', \'e\', \'i\', \'o\', \'u\') in the input string s. vowels = \'aeiou\' return sum(1 for char in s.lower() if char in vowels)"},{"question":"Write a function that finds and returns the first repeated character in a given string. The function should return the repeated character as a string. If there are no repeated characters, return an empty string. The function should not be case-sensitive, so \'A\' and \'a\' are considered the same character. All inputs will be non-empty strings. Punctuation and special characters may be present in the string, and they should be treated just like any other character. Example Input: \\"Swiss\\" Example Output: \\"s\\"","solution":"def first_repeated_character(s): Returns the first repeated character in the given string (case insensitive). If no characters are repeated, returns an empty string. s = s.lower() seen = set() for char in s: if char in seen: return char seen.add(char) return \\"\\""},{"question":"Problem Amy is an event organizer for a seminar that includes several talks. She has a list of upcoming talks with their durations and needs to find the maximum number of talks she can include in a session given a specific time limit. What To Do Create a `maxTalksInSession` helper function that takes 1 integer argument which represents the maximum duration of the session in minutes. `talks` is an array of objects which are formatted as follows: ```python {\'speaker\': \'Speaker Name\', \'topic\': \'Topic of the Talk\', \'duration\': \'30\'} ``` Note: - The duration is given in minutes. Output should be the maximum number of talks that can be included in the session without exceeding the given time limit. If no talks can fit in the given time, return 0. Example: ```python talks = [ {\'speaker\': \'Alice\', \'topic\': \'AI and Robotics\', \'duration\': 45}, {\'speaker\': \'Bob\', \'topic\': \'Quantum Computing\', \'duration\': 40}, {\'speaker\': \'Charlie\', \'topic\': \'Blockchain Technology\', \'duration\': 50}, {\'speaker\': \'David\', \'topic\': \'Cybersecurity\', \'duration\': 30} ] maxTalksInSession(90) # Output should be 2 (e.g., \'Cybersecurity\' and \'Quantum Computing\' can fit within 90 minutes together) ```","solution":"def maxTalksInSession(max_duration, talks): talks = sorted(talks, key=lambda x: x[\'duration\']) total_duration = 0 num_talks = 0 for talk in talks: if total_duration + talk[\'duration\'] <= max_duration: total_duration += talk[\'duration\'] num_talks += 1 else: break return num_talks"},{"question":"Binary Tree - Maximum Depth Write a function `maxDepth()` that computes the maximum depth of a binary tree. The maximum depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. You are given the structure of a binary tree node as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The function should take the root of the binary tree as an input parameter and return an integer representing the maximum depth of the tree. Function Definition: ```python def maxDepth(root: TreeNode) -> int: # your code here ``` Example: ```python # Given the binary tree [3, 9, 20, None, None, 15, 7]: # # 3 # / # 9 20 # / # 15 7 # # The maximum depth is 3, since the longest path from the root to a leaf is: # 3 -> 20 -> 7 # Creating the tree nodes root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) print(maxDepth(root)) # Output: 3 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: Computes the maximum depth of a binary tree. :param root: TreeNode, the root of the binary tree :return: int, the maximum depth of the tree if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function that takes a string input containing a list of integers separated by spaces, and returns a new string where all the even integers are doubled and odd integers are left unchanged. Example: Input: \\"3 4 7 8 10 13\\" Output: \\"3 8 7 16 20 13\\"","solution":"def modify_integers(s): Takes a string input containing a list of integers separated by spaces, and returns a new string where all the even integers are doubled and odd integers are left unchanged. ints = map(int, s.split()) modified_ints = [str(x * 2) if x % 2 == 0 else str(x) for x in ints] return \' \'.join(modified_ints)"},{"question":"You are given a 2D grid of size m x n where each cell represents a piece of land (1) or water (0). A closed island is a region (4-directionally connected) that does not touch the border of the grid (i.e., not connected to the boundary). You need to find the number of closed islands in the grid. A closed island is completely surrounded by water and not connected to the grid boundary. Example: Input: [[1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1]] Output: 2 Explanation: There are two closed islands, one located in rows 1-3 and columns 1-2, and another located in row 4 and columns 0-1. Notes: - The size of the grid is in the range [1, 100]. - Each cell is either land (1) or water (0).","solution":"def numClosedIslands(grid): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n: return False if grid[x][y] == 1: return True grid[x][y] = 1 # mark as visited up = dfs(x - 1, y) down = dfs(x + 1, y) left = dfs(x, y - 1) right = dfs(x, y + 1) return up and down and left and right if not grid: return 0 m, n = len(grid), len(grid[0]) closed_islands = 0 for i in range(1, m - 1): for j in range(1, n - 1): if grid[i][j] == 0: if dfs(i, j): closed_islands += 1 return closed_islands"},{"question":"You are given two sequences of integers, `A` and `B`, each of length `N`. Your task is to merge these two sequences into a single sorted list and then perform `Q` queries on this merged list. Each query consists of an integer `k`, and your task is to find the `k-th` smallest element in the merged list. -----Input format----- The first line of the input contains a single integer, `N` (1 ≤ N ≤ 100000). The second line contains `N` integers representing the sequence `A`. The third line contains `N` integers representing the sequence `B`. The fourth line contains a single integer, `Q` (1 ≤ Q ≤ 100000). Each of the next `Q` lines contains a single integer, `k` (1 ≤ k ≤ 2N). -----Output format----- The output should consist of `Q` lines, each containing a single integer: the `k-th` smallest element in the merged list for the corresponding query. -----Sample input----- 5 1 3 5 7 9 2 4 6 8 10 3 1 5 10 -----Sample output----- 1 5 10 Note: The sequences `A` and `B` are already sorted individually. Your task is to merge them efficiently and answer each query in an optimal manner. Please ensure that your program runs within the time limits for the given constraints.","solution":"def merge_and_query(A, B, queries): Merges two sorted lists A and B, and finds the k-th smallest element for each query in queries. merged_list = sorted(A + B) results = [merged_list[k - 1] for k in queries] return results # Example usage: N = 5 A = [1, 3, 5, 7, 9] B = [2, 4, 6, 8, 10] Q = 3 queries = [1, 5, 10] print(merge_and_query(A, B, queries)) # Expected: [1, 5, 10]"},{"question":"Write a function that takes a list of strings and returns a new list containing only the strings that have their distinct characters sorted in alphabetical order. The function should preserve the relative order of the original list. Example: strings_with_order([\'abc\', \'bca\', \'aab\', \'xyz\', \'cba\']) should return [\'abc\', \'aab\', \'xyz\'] Function signature: def strings_with_order(strings: List[str]) -> List[str]:","solution":"from typing import List def strings_with_order(strings: List[str]) -> List[str]: def is_sorted_string(s: str) -> bool: return list(s) == sorted(s) return [s for s in strings if is_sorted_string(s)]"},{"question":"You\'re given a grid of size N x M filled with non-negative integers. You need to find the sum of the integers in the smallest rectangular sub-grid (having area at least 1) that contains at least one odd number. If there are no odd numbers in the grid, return -1. -----Input----- The first line of the input contains two integers N and M denoting the number of rows and columns in the grid. Each of the next N lines contains M integers separated by spaces, representing the values in the grid. -----Output----- Output a single integer — the sum of the integers in the smallest rectangular sub-grid containing at least one odd number. If there is no odd number in the grid, output -1. -----Constraints----- - 1 ≤ N, M ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 -----Example----- Input: 3 4 2 4 6 8 1 10 12 14 2 16 18 20 Output: 1 Input: 4 4 0 2 4 6 8 6 4 2 16 14 12 10 20 18 16 14 Output: -1 -----Explanation----- Test case 1. The grid is: 2 4 6 8 1 10 12 14 2 16 18 20 The smallest sub-grid containing at least one odd number is simply the cell with the number 1. Hence, the sum is 1. Test case 2. The grid is: 0 2 4 6 8 6 4 2 16 14 12 10 20 18 16 14 Since there are no odd numbers in the grid, the output is -1.","solution":"def smallest_odd_subgrid_sum(N, M, grid): Returns the sum of the integers in the smallest rectangular sub-grid that contains at least one odd number. If there are no odd numbers in the grid, returns -1. min_sum = float(\'inf\') has_odd = False for i in range(N): for j in range(M): if grid[i][j] % 2 != 0: has_odd = True min_sum = min(min_sum, grid[i][j]) return min_sum if has_odd else -1"},{"question":"Given a sequence of integers, an \\"alternating bit sequence\\" is defined as a sequence where the differences between successive numbers strictly alternate between 1 and -1. The first difference (if one exists) may be either 1 or -1. A sequence with fewer than two elements is trivially an alternating bit sequence. For example, [5,6,5,6,5] is an alternating bit sequence because the differences (1,-1,1,-1) alternate between 1 and -1. In contrast, [5,6,7,6,5] is not an alternating bit sequence as the differences (1,1,-1,-1) do not strictly alternate. Given a sequence of integers, return the length of the longest subsequence that forms an alternating bit sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order. Examples: Input: [5,6,5,6,5] Output: 5 The entire sequence is an alternating bit sequence. Input: [5,6,4,5,6,7] Output: 4 One possible subsequence that achieves this length is [5,6,5,6]. Input: [7,7,7,7,7] Output: 1 A single element is trivially an alternating bit sequence. Follow up: Can you devise an algorithm with a complexity better than O(n^2)?","solution":"def longest_alternating_bit_sequence(arr): Returns the length of the longest subsequence that forms an alternating bit sequence. if not arr: return 0 n = len(arr) if n == 1: return 1 # dp[i][0] stores max length of alternating sequence ending at arr[i] where last diff was +1 # dp[i][1] stores max length of alternating sequence ending at arr[i] where last diff was -1 dp = [[1, 1] for _ in range(n)] max_length = 1 for i in range(1, n): for j in range(i): if arr[i] - arr[j] == 1: dp[i][0] = max(dp[i][0], dp[j][1] + 1) elif arr[i] - arr[j] == -1: dp[i][1] = max(dp[i][1], dp[j][0] + 1) max_length = max(max_length, dp[i][0], dp[i][1]) return max_length"},{"question":"Create a function `move_zeros` that takes a list of numbers and returns a new list with the same numbers, but with all the zeros moved to the end. The non-zero numbers should maintain their original order. Example: ``` move_zeros([0, 1, 0, 3, 12]) => [1, 3, 12, 0, 0] move_zeros([4, 2, 5, 0, 0, 6, 7]) => [4, 2, 5, 6, 7, 0, 0] ```","solution":"def move_zeros(arr): Moves all zeros in the list to the end while maintaining the order of other elements. non_zeros = [num for num in arr if num != 0] zeros = [0] * (len(arr) - len(non_zeros)) return non_zeros + zeros"},{"question":"Write a function that takes a positive integer `n` and returns a list of all unique prime factors of `n` in ascending order. Here\'s how the function should work: - The function should first check if `n` is a positive integer greater than 1. If not, it should raise a ValueError with the message `Input must be a positive integer greater than 1`. - The function should then find all unique prime factors of `n`. - The result should be a list of these prime factors, sorted in ascending order. For example: ```python prime_factors(28) # returns [2, 7] prime_factors(44) # returns [2, 11] prime_factors(13) # returns [13] ``` Function signature: ```python def prime_factors(n: int) -> list: pass ```","solution":"def prime_factors(n: int) -> list: Returns a list of unique prime factors of n in ascending order. if not isinstance(n, int) or n <= 1: raise ValueError(\\"Input must be a positive integer greater than 1\\") factors = [] divisor = 2 while n > 1: if n % divisor == 0: if divisor not in factors: factors.append(divisor) n //= divisor else: divisor += 1 return factors"},{"question":"Given a matrix of size N times M consisting of integers. Write a function that finds the sum of all unique elements in the matrix. Note that an element is considered unique if it appears exactly once in the entire matrix. -----Input:----- - The first line contains two integers, N and M, the dimensions of the matrix (rows and columns respectively). - The following N lines each contain M integers representing the matrix elements. -----Output:----- - Output a single integer, the sum of all unique elements in the matrix. -----Constraints----- - 1 leq N, M leq 100 - -1000 leq matrix[i][j] leq 1000 -----Sample Input:----- 3 3 1 2 3 4 5 6 7 2 4 -----Sample Output:----- 22 -----Explanation:----- In the matrix: ``` 1 2 3 4 5 6 7 2 4 ``` The unique elements are 1, 3, 5, 6, and 7. Their sum is 1 + 3 + 5 + 6 + 7 = 22.","solution":"def sum_of_unique_elements(matrix): Returns the sum of all unique elements in the matrix. An element is considered unique if it appears exactly once in the entire matrix. element_count = {} # Count the frequency of each element in the matrix for row in matrix: for element in row: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Sum up only the unique elements unique_sum = sum(key for key, value in element_count.items() if value == 1) return unique_sum def parse_input(input_data): Parses the input data to extract matrix dimensions and the matrix itself. Returns N, M and the matrix. data = input_data.strip().split(\'n\') N, M = map(int, data[0].split()) matrix = [list(map(int, row.split())) for row in data[1:]] return N, M, matrix"},{"question":"-----Problem Statement----- In number theory, an abundant number or excessive number is a positive integer that is smaller than the sum of its proper divisors, excluding itself. For example, the number 12 is an abundant number because 1 + 2 + 3 + 4 + 6 = 16 > 12. You need to write a program that takes a set of integers and for each integer determines if it is an abundant number. If it is, the program should output the sum of its proper divisors. Otherwise, the program should output 0. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of exactly one line containing an integer N. -----Constraints----- - 1 ≤ T ≤ 100000 - 1 ≤ N ≤ 10000 -----Output----- For each test case, output the sum of the proper divisors of N if N is an abundant number, otherwise output 0. -----Example----- Input: 4 12 6 28 20 Output: 16 0 0 22 -----Explanation----- Case #1: The number 12 is an abundant number because 1 + 2 + 3 + 4 + 6 = 16 > 12. Case #2: The number 6 is not an abundant number because 1 + 2 + 3 = 6, which is not greater than 6. Case #3: The number 28 is not an abundant number because 1 + 2 + 4 + 7 + 14 = 28, which is not greater than 28. Case #4: The number 20 is an abundant number because 1 + 2 + 4 + 5 + 10 = 22 > 20.","solution":"def is_abundant_number(n): Determines if a number is an abundant number and returns the sum of its proper divisors. If it is not abundant, returns 0. Parameters: n (int): The integer to check for abundance. Returns: int: Sum of proper divisors if n is abundant, otherwise 0. if n < 2: return 0 proper_divisors_sum = 1 for i in range(2, int(n**0.5)+1): if n % i == 0: proper_divisors_sum += i if i != n // i: proper_divisors_sum += n // i return proper_divisors_sum if proper_divisors_sum > n else 0 def analyze_numbers(numbers): Analyzes a list of numbers to determine if each number is abundant and returns the appropriate results. Parameters: numbers (list): The list of integers to check for abundance. Returns: list: A list of results, where each result is the sum of proper divisors if the integer is abundant, otherwise 0. return [is_abundant_number(n) for n in numbers]"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the shortest substring that contains all the distinct characters present in the original string `s`. -----Input:----- - First line will contain an integer T, number of test cases. Then the test cases follow. - First line of each test case contains the string s. -----Output:----- For each test case, output a single integer, the length of the shortest substring that contains all distinct characters of the string s. -----Constraints----- - 1 leq T leq 100 - 1 leq |s| leq 10^5 - The sum of lengths of `s` over all test cases does not exceed 10^6 -----Sample Input:----- 2 abac abcabcbb -----Sample Output:----- 3 3 -----Explanation:----- In the first test case, the distinct characters are \'a\', \'b\', and \'c\'. The shortest substring containing all these characters is \\"bac\\", which has a length of 3. In the second test case, the distinct characters are \'a\', \'b\', and \'c\'. The shortest substrings containing all these characters are \\"abc\\". Hence, the output is 3.","solution":"def shortest_substring_length(s: str) -> int: n = len(s) distinct_chars = set(s) total_distinct = len(distinct_chars) left = 0 right = 0 count = {} min_length = n while right < n: count[s[right]] = count.get(s[right], 0) + 1 right += 1 while len(count) == total_distinct: min_length = min(min_length, right - left) count[s[left]] -= 1 if count[s[left]] == 0: del count[s[left]] left += 1 return min_length def process_test_cases(T: int, cases: list) -> list: results = [] for s in cases: results.append(shortest_substring_length(s)) return results"},{"question":"Write a function `is_ideal_array(arr)` that accepts an array of positive integers and determines if the array is \'ideal\'. An array is considered \'ideal\' if the greatest common divisor (GCD) of all its elements is greater than 1, and the sum of the elements is even. # Examples Example 1: ```python is_ideal_array([4, 6, 12, 8, 10]) -> True ``` Explanation: - The GCD of [4, 6, 12, 8, 10] is 2, which is greater than 1. - The sum of [4 + 6 + 12 + 8 + 10] is 40, which is even. - Therefore, the array is \'ideal\'. Example 2: ```python is_ideal_array([3, 5, 7, 9]) -> False ``` Explanation: - The GCD of [3, 5, 7, 9] is 1, which is not greater than 1. - Therefore, the array is not \'ideal\'. Example 3: ```python is_ideal_array([2, 4, 6, 8]) -> True ``` Explanation: - The GCD of [2, 4, 6, 8] is 2, which is greater than 1. - The sum of [2 + 4 + 6 + 8] is 20, which is even. - Therefore, the array is \'ideal\'. # Constraints - The array will have at least one element. - Each element in the array is a positive integer. - The length of the array will not exceed 1000.","solution":"from math import gcd from functools import reduce def is_ideal_array(arr): Determines if the given array is \'ideal\'. An array is called \'ideal\' if: 1. The GCD of all its elements is greater than 1. 2. The sum of the elements is even. # Calculate the GCD of all elements in the array array_gcd = reduce(gcd, arr) # Calculate the sum of all elements in the array array_sum = sum(arr) # Check if the GCD is greater than 1 and the sum is even return array_gcd > 1 and array_sum % 2 == 0"},{"question":"In this challenge, you are given an array of integers and you must return an array where each element is replaced by the number of times it appears in the original array. For example: * `frequency_count([4, 4, 4, 3, 3, 2, 1]) = [3, 3, 3, 2, 2, 1, 1]`. * `frequency_count([1, 2, 2, 3, 3, 3]) = [1, 2, 2, 3, 3, 3]`. Notes: - The input array will not be empty and will only contain positive integers. - The order of elements in the output array should match the order of their first appearance in the input array. Good luck!","solution":"def frequency_count(arr): Returns an array where each element is replaced by the number of times it appears in the original array. from collections import Counter freq = Counter(arr) return [freq[x] for x in arr]"},{"question":"Implement a function `longest_substring_without_repeating_characters(s: str) -> int` that takes a string `s` and returns the length of the longest substring without repeating characters. If the input string is empty, return `0`. # Examples: Input 1 \\"abcabcbb\\" Output 1 3 Explanation: The answer is \\"abc\\" with the length of 3. Input 2 \\"bbbbb\\" Output 2 1 Explanation: The answer is \\"b\\" with the length of 1. Input 3 \\"pwwkew\\" Output 3 3 Explanation: The answer is \\"wke\\" with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. *Note*: Your solution should have linear time complexity O(n).","solution":"def longest_substring_without_repeating_characters(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"=====Function Descriptions===== itertools.permutations(iterable, r=None) This function is used to create all possible permutations of a given iterable. If the optional argument \'r\' is provided, it generates all permutations of length \'r\'. Example Code >>> from itertools import permutations >>> list(permutations([1, 2, 3])) [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)] >>> list(permutations(\'AB\', 2)) [(\'A\', \'B\'), (\'B\', \'A\')] >>> list(permutations(\'ABC\', 2)) [(\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'C\', \'A\'), (\'C\', \'B\')] =====Problem Statement===== Given a string s and an integer r, generate and print all ordered permutations of length r. =====Input Format===== - The first line contains a string s. - The second line contains an integer r. =====Constraints===== 0 < len(s) ≤ 10 1 ≤ r ≤ len(s) =====Output Format===== Print all permutations of the given string s with length r, one per line, in lexicographic order. =====Example===== Input ABC 2 Output AB AC BA BC CA CB","solution":"from itertools import permutations def generate_permutations(s, r): Generates all ordered permutations of the string s with length r and prints them line by line. for perm in sorted(permutations(s, r)): print(\'\'.join(perm))"},{"question":"You are given a list of integers and a series of commands to manipulate this list. Each command can be one of three types: 1. `Insert x`: Insert the integer `x` at the end of the list. 2. `Delete x`: If the integer `x` is in the list, remove the first occurrence of `x`. 3. `PrintMax`: Print the maximum value in the current list. Your task is to write a program that processes these commands and performs the appropriate operations on the list. -----Input----- The first line contains an integer q (1 ≤ q ≤ 10^5) — the number of commands. Each of the next q lines contains a command of one of the three types described above. It is guaranteed that there will be at least one `PrintMax` command. -----Output----- For each `PrintMax` command, print the maximum value in the list. -----Examples----- Input 6 Insert 3 Insert 1 PrintMax Delete 3 PrintMax Insert 5 PrintMax Output 3 1 5 -----Note----- After the first `PrintMax` command, the list is `[3, 1]` and the output is `3`. After the second `PrintMax` command, the list is `[1]` and the output is `1`. After the third `PrintMax` command, the list is `[1, 5]` and the output is `5`.","solution":"def process_commands(commands): Processes a list of commands to manipulate a list of integers. Args: commands (list of str): List of commands to process. Returns: list of int: Output response for each \'PrintMax\' command. numbers = [] result = [] for command in commands: parts = command.split() if parts[0] == \'Insert\': num = int(parts[1]) numbers.append(num) elif parts[0] == \'Delete\': num = int(parts[1]) if num in numbers: numbers.remove(num) elif parts[0] == \'PrintMax\': if numbers: result.append(max(numbers)) return result"},{"question":"Write a program to calculate the minimum number of steps required to reduce a given integer x to 1. You can perform any of the following operations: 1. If x is even, divide it by 2. 2. If x is odd, you can either subtract 1 or add 1. Example 1: Input: x = 8 Output: 3 Explanation: 8 is even; divide by 2 to get 4. 4 is even; divide by 2 to get 2. 2 is even; divide by 2 to get 1. Total steps = 3. Example 2: Input: x = 7 Output: 4 Explanation: 7 is odd; subtract 1 to get 6. 6 is even; divide by 2 to get 3. 3 is odd; subtract 1 to get 2. 2 is even; divide by 2 to get 1. Total steps = 4. Example 3: Input: x = 15 Output: 5 Explanation: 15 is odd; add 1 to get 16. 16 is even; divide by 2 to get 8. 8 is even; divide by 2 to get 4. 4 is even; divide by 2 to get 2. 2 is even; divide by 2 to get 1. Total steps = 5. Constraints: 1 <= x <= 10^9","solution":"def min_steps_to_one(x): Returns the minimum number of steps required to reduce x to 1 by using the given operations. steps = 0 while x != 1: if x % 2 == 0: x //= 2 else: if (x == 3 or x % 4 == 1): x -= 1 else: x += 1 steps += 1 return steps"},{"question":"Given a list of non-negative integers representing the prices of items, and a non-negative integer `k`, find the maximum number of items you can buy with exactly `k` amount of money. For example, ``` prices = [1, 3, 2, 5, 4], k = 7 -> 3 (buy items with prices 1, 2, and 4) prices = [10, 6, 8, 3, 7], k = 15 -> 2 (buy items with prices 6 and 7) ``` You must not exceed the given `k` amount and each price can be used only once.","solution":"def max_items(prices, k): Returns the maximum number of items that can be bought with exactly k amount of money. prices.sort() count = 0 for price in prices: if k >= price: k -= price count += 1 else: break return count"},{"question":"Carla has a list of N integers, and she wants to find a special subarray with a unique property. The subarray should have the following characteristics: 1. The sum of the elements in the subarray is odd. 2. The subarray should have the maximum length among all subarrays with an odd sum. If there are multiple subarrays of the same maximum length, return any one of them. Given the value of N and the list of integers, can you help Carla find such a subarray? -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the size of the list. - The second line contains N space-separated integers, the elements of the list. -----Output:----- For each test case, if there exists a subarray with the given property, print the length of the maximum subarray with an odd sum. Otherwise, print -1. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^5 - 1 leq text{List elements} leq 10^6 -----Sample Input:----- 2 5 1 2 3 4 5 4 2 4 6 8 -----Sample Output:----- 5 -1 -----EXPLANATION:----- For the first test case, the entire array [1, 2, 3, 4, 5] has an odd sum (15), which is the maximum length possible. For the second test case, there is no subarray with an odd sum because all elements are even, hence the output is -1.","solution":"def find_max_odd_sum_subarray_length(test_cases): results = [] for case in test_cases: N, arr = case total_sum = sum(arr) if total_sum % 2 != 0: results.append(N) else: odd_present = False min_removal = float(\'inf\') for num in arr: if num % 2 != 0: odd_present = True min_removal = min(min_removal, num) if odd_present: results.append(N - 1) else: results.append(-1) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) arr = list(map(int, input_lines[line_index + 1].split())) test_cases.append((N, arr)) line_index += 2 return test_cases"},{"question":"An infected computer is trying to replicate itself amongst a network of n computers. Each computer is assigned an index from 1 to n, where n is the number of computers in the network. The connections between computers are represented by an n times n matrix M where M[i][j] = 1 denotes that there is a direct connection between computer i and computer j, and M[i][j] = 0 means there is no direct connection. Initially, only one computer is infected, and it is always the computer with index 1. The virus spreads from an infected computer to any directly connected computer that is not already infected. The spread occurs iteratively until no more computers can be infected. You are to determine how many computers are infected at the end of this process. -----Input----- The input consists of multiple test cases. The first line contains t (1 le t le 100) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 100) — the number of computers. - The next n lines each contain n integers representing the matrix M, where each integer is either 0 or 1. -----Output----- For each test case, output a single integer — the number of infected computers after the virus has finished spreading. -----Examples----- Input: 2 3 0 1 0 1 0 1 0 1 0 4 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 Output: 3 4 Explantion: In the first test case, computer 1 is directly connected to computer 2 and computer 2 is directly connected to computer 3. Thus, at the end, computers 1, 2, and 3 are infected. In the second test case, computer 1 infects computer 2, computer 2 infects computer 3, and computer 3 infects computer 4. Thus, all computers are infected.","solution":"def infected_computers(t, test_cases): results = [] for test in test_cases: n, matrix = test infected = [False] * n infected[0] = True queue = [0] while queue: current = queue.pop(0) for i in range(n): if matrix[current][i] == 1 and not infected[i]: infected[i] = True queue.append(i) results.append(sum(infected)) return results"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to find the maximum sum of a subarray of length `k`. A subarray is defined as a contiguous segment of the array. The sum of the subarray is the sum of its elements. Write a function, `maxSubarraySum(arr, k)`, that takes an array `arr` and an integer `k` as input, and returns the maximum sum of a subarray of length `k`. Example 1: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: The subarray with the maximum sum of length 3 is [5, 1, 3], and its sum is 9. Example 2: Input: arr = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: The subarray with the maximum sum of length 2 is [3, 4], and its sum is 7. Example 3: Input: arr = [1, 2, 3, 4, 5], k = 1 Output: 5 Explanation: The subarray with the maximum sum of length 1 is [5], and its sum is 5. Constraints: - 1 <= k <= arr.length <= 10^5 - -10^4 <= arr[i] <= 10^4","solution":"def maxSubarraySum(arr, k): Returns the maximum sum of a subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Scenario Description Maya is a software engineer who loves solving mathematical problems in efficient ways. Recently, she stumbled upon a problem involving Fibonacci numbers but with a twist. The problem is to find the Nth number in the modified Fibonacci sequence, where the nth term is defined as the sum of the previous k terms. For example, if k=3, the sequence will be T(n) = T(n-1) + T(n-2) + T(n-3). Given the initial k terms are all ones (1,...,1). Problem Statement You need to write a program to compute the nth term of the above-defined sequence modulo 10^9+7. # Input Format - The first line contains two integers n and k (1 ≤ n, k ≤ 10^5). - The second line contains k integers, which are the first k terms of the sequence (1,...,1). # Output Format - Print a single integer which is the nth term of the sequence modulo 10^9+7. # Constraints - 1 ≤ n, k ≤ 10^5 - The sequence terms fit in a 64-bit signed integer. # Example Input 5 3 1 1 1 Output 5 Explanation - The sequence starts with T(1) = 1, T(2) = 1, T(3) = 1. - For T(4), it will be T(3) + T(2) + T(1) = 1 + 1 + 1 = 3. - For T(5), it will be T(4) + T(3) + T(2) = 3 + 1 + 1 = 5. Use efficient algorithms and consider edge cases to make sure your solution performs well within the provided constraints.","solution":"def modified_fibonacci(n, k, initial_terms): Computes the nth term of the modified Fibonacci sequence where the nth term is the sum of the previous k terms, given the first k terms. MOD = 10**9 + 7 # If n is within the range of initial terms, just return the nth term directly if n <= k: return initial_terms[n-1] # Initialize the sequence with the given initial terms sequence = initial_terms[:] # Compute terms from k+1 to n for i in range(k, n): next_term = sum(sequence[i-k:i]) % MOD sequence.append(next_term) return sequence[-1]"},{"question":"You are tasked with designing a simulation for a library borrowing system where members can borrow and return books. The system should support two types of operations: 1. Borrow a book from the library. 2. Return a book to the library. Your task is to implement the system such that it can efficiently handle the given operations. # Input: - The first line contains two integers `N` and `Q`, denoting the number of books and the number of operations, respectively. - The next N lines contain the IDs of the books available in the library\'s collection. - The following Q lines represent the operations: - For a borrow operation, the input will be of the form \\"BORROW book_id\\". - For a return operation, the input will be of the form \\"RETURN book_id\\". # Output: For each borrow operation, print whether the book is available to borrow or already borrowed. For each return operation, print \\"RETURNED\\" if the book was borrowed and \\"NOT BORROWED\\" if the book was not borrowed in the first place. # Example: Input: ``` 5 6 1 2 3 4 5 BORROW 2 BORROW 2 RETURN 2 RETURN 2 BORROW 3 BORROW 5 ``` Output: ``` BORROWED ALREADY BORROWED RETURNED NOT BORROWED BORROWED BORROWED ``` # Constraints: - 1 ≤ N, Q ≤ 100,000 - The ID of each book is a unique integer - The operations occur sequentially in the order given Design the system such that it efficiently tracks the status of each book and handles borrow and return operations.","solution":"class LibrarySystem: def __init__(self, books): Initialize the library system with a list of available book IDs. self.available_books = set(books) self.borrowed_books = set() def borrow_book(self, book_id): Borrows a book from the library if it is available. Prints \\"BORROWED\\" if the book was successfully borrowed, otherwise prints \\"ALREADY BORROWED\\". if book_id in self.available_books: self.available_books.remove(book_id) self.borrowed_books.add(book_id) print(\\"BORROWED\\") else: print(\\"ALREADY BORROWED\\") def return_book(self, book_id): Returns a borrowed book to the library. Prints \\"RETURNED\\" if the book was successfully returned, otherwise prints \\"NOT BORROWED\\". if book_id in self.borrowed_books: self.borrowed_books.remove(book_id) self.available_books.add(book_id) print(\\"RETURNED\\") else: print(\\"NOT BORROWED\\")"},{"question":"Given a list of integers, separate the integers into two lists: one containing even integers and the other containing odd integers. The integers in the resultant lists should appear in the same order as they do in the original list. # Examples ```python Input: [1, 2, 3, 4, 5, 6] Output: ([2, 4, 6], [1, 3, 5]) Input: [7, 10, 13, 16, 19, 22] Output: ([10, 16, 22], [7, 13, 19]) ``` # Constraints - All integers are non-negative. - The size of the input list does not exceed 10^6.","solution":"def separate_even_odd(nums): Separates the integers in the input list into two lists: one containing even integers and the other containing odd integers. The integers in the resultant lists appear in the same order as they do in the original list. :param nums: List[int] - List of integers :return: Tuple[List[int], List[int]] - A tuple containing two lists: (even integers, odd integers) even = [] odd = [] for num in nums: if num % 2 == 0: even.append(num) else: odd.append(num) return (even, odd)"},{"question":"Given an array of distinct integers arr, a \\"mountain\\" is defined as a subarray that: - Has a length of at least 3. - There exists some index i (0 < i < subarray.length - 1) such that: - arr[0] < arr[1] < ... < arr[i] - arr[i] > arr[i + 1] > ... > arr[subarray.length - 1] Write a function that returns the length of the longest mountain in the array. If there is no mountain, return 0. Example: Input: arr = [2, 1, 4, 7, 3, 2, 5] Output: 5 Explanation: The longest mountain is [1, 4, 7, 3, 2] with length 5. Input: arr = [2, 2, 2] Output: 0 Explanation: There are no mountains in the array. Note: - 0 <= arr.length <= 10000 - 0 <= arr[i] <= 10000","solution":"def longest_mountain(arr): Returns the length of the longest mountain in the array. n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"You are developing a new security system and need to generate unique codes for each user. Each code must be a unique combination of letters and numbers. Given a string, generate all possible unique codes by replacing each character with the next character in the alphabet for a fixed number of positions, wrapping around after \'z\' to \'a\' and \'9\' to \'0\'. For example, replacing \'a\' with 2 positions results in \'c\', replacing \'z\' with 1 position results in \'a\', and replacing \'8\' with 3 positions results in \'1\'. You need to write a function that will take the input string and an integer representing the number of positions each character should be shifted. ```python def generate_unique_codes(input_string, shift): # your code here # Example usage print(generate_unique_codes(\\"abc123\\", 2)) # Output: \'cde345\' print(generate_unique_codes(\\"xyz789\\", 5)) # Output: \'cde234\' ``` # Explanation - The input string contains letters \'a\' to \'z\' and digits \'0\' to \'9\'. - Each character in the string is shifted by a fixed number of positions. - Overflow: - Letters wrap around: \'z\' + 1 = \'a\', \'y\' + 2 = \'a\' - Numbers wrap around: \'9\' + 1 = \'0\', \'8\' + 3 = \'1\' - Each unique code is generated by applying the shift to the input string fully. ___ For example: - input_string = \\"abc123\\", shift = 2 - \'a\' + 2 = \'c\', \'b\' + 2 = \'d\', \'c\' + 2 = \'e\' - \'1\' + 2 = \'3\', \'2\' + 2 = \'4\', \'3\' + 2 = \'5\' - Output should be \\"cde345\\" - input_string = \\"xyz789\\", shift = 5 - \'x\' + 5 = \'c\', \'y\' + 5 = \'d\', \'z\' + 5 = \'e\' - \'7\' + 5 = \'2\', \'8\' + 5 = \'3\', \'9\' + 5 = \'4\' - Output should be \\"cde234\\"","solution":"def generate_unique_codes(input_string, shift): Generates unique codes by shifting each character in the input string by a given number of positions. def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'0\' <= c <= \'9\': return chr((ord(c) - ord(\'0\') + shift) % 10 + ord(\'0\')) else: return c return \'\'.join(shift_char(c, shift) for c in input_string)"},{"question":"You are given a list of marble bags. Each bag contains some marbles with different weights. Your task is to determine the weight of the heaviest marble in each bag and print it. Input Format The first line contains an integer T, the number of test cases. T test cases follow. Each test case consists of two lines: - The first line contains an integer N, the number of marbles in the bag. - The second line contains N space-separated integers denoting the weights of the marbles. Constraints 1 <= T <= 1000 1 <= N <= 1000 1 <= weight of each marble <= 10000 Output Format For each test case, print the weight of the heaviest marble in the bag. Sample Input 3 5 1 2 3 4 5 4 10 20 30 40 3 100 200 300 Sample Output 5 40 300 Explanation In the first test case, the heaviest marble has a weight of 5. In the second test case, the heaviest marble has a weight of 40. In the third test case, the heaviest marble has a weight of 300.","solution":"def heaviest_marbles(test_cases): Returns a list of the weight of the heaviest marble for each test case. result = [] for case in test_cases: max_weight = max(case[\'marbles\']) result.append(max_weight) return result def parse_input(input_str): Parses the input string and returns the list of test cases. input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) marbles = list(map(int, input_lines[index + 1].split())) test_cases.append({\\"N\\": N, \\"marbles\\": marbles}) index += 2 return test_cases def format_output(results): Formats the results for output. return \\"n\\".join(map(str, results)) def main(input_str): Main function to process the input and produce the output. test_cases = parse_input(input_str) results = heaviest_marbles(test_cases) return format_output(results)"},{"question":"Alex runs a warehouse management system that requires parsing and manipulating SKU (Stock Keeping Unit) codes. A SKU code consists of an alphanumeric string, where each alphanumeric character represents either a specific category or identifier for products. Some SKUs have additional \'tags\' appended after a colon which provide additional modifiers or features of the product separated by commas. For example, a SKU code can be `\\"ABC123:color-red,size-medium,material-cotton\\"`, where `ABC123` is the main SKU and the rest are the tags. Alex needs a function to extract relevant information from SKUs in the following format: 1. Determine the main SKU from the given string. 2. Extract all tags and their values into a dictionary format. ```python def parse_sku(sku): # Your implementation here # Examples print(parse_sku(\\"ABC123:color-red,size-medium,material-cotton\\")) # Output: (\'ABC123\', {\'color\': \'red\', \'size\': \'medium\', \'material\': \'cotton\'}) print(parse_sku(\\"XY120:size-large,discount-20\\")) # Output: (\'XY120\', {\'size\': \'large\', \'discount\': \'20\'}) print(parse_sku(\\"PQ456\\")) # Output: (\'PQ456\', {}) print(parse_sku(\\"DET789:brand-nike,color-black\\")) # Output: (\'DET789\', {\'brand\': \'nike\', \'color\': \'black\'}) ``` It can be assumed that SKU codes are non-empty and follow the specified format. If no tags are present, the dictionary should be empty.","solution":"def parse_sku(sku): Parses a SKU string to extract the main SKU and tags. Parameters: sku (str): The SKU string to parse. Returns: tuple: A tuple where the first element is the main SKU (str), and the second element is a dictionary of tags. if \':\' in sku: main_sku, tags_str = sku.split(\':\', 1) tags_list = tags_str.split(\',\') tags = {tag.split(\'-\')[0]: tag.split(\'-\')[1] for tag in tags_list} else: main_sku = sku tags = {} return main_sku, tags"},{"question":"_A travel booking system needs a way to manage and sort booking reservations for flights. Each booking includes the passenger\'s name, departure city, and destination city. The system should efficiently track and update passenger records._ > Given a list of bookings formatted as a string of comma-separated values, where each booking is specified by the passenger\'s name, departure city, and destination city in the form \\"Name_DepartureCity_DestinationCity\\", your task is to write a function that processes these bookings by removing duplicates and sorting the bookings by the passenger\'s name. If two bookings have the same passenger name, sort them by the departure city alphabetically. **Your function should not only ensure the resulting list has no duplicates but also maintain the correct order as specified.** --- Examples --- --- Input: ``` \\"John_Dallas_NewYork, Alice_SF_LA, Bob_Boston_Chicago, John_Dallas_NewYork, Eve_Chicago_Dallas, Alice_SF_LA, Bob_NewYork_LA\\" ``` Output: ``` \\"Alice_SF_LA, Bob_Boston_Chicago, Bob_NewYork_LA, Eve_Chicago_Dallas, John_Dallas_NewYork\\" ``` --- Input: ``` \\"Carla_LA_NY, Andy_TX_CA, Carla_LA_NY, Andy_NY_TX, Andy_TX_CA, Carla_CA_TX\\" ``` Output: ``` \\"Andy_NY_TX, Andy_TX_CA, Carla_CA_TX, Carla_LA_NY\\" ``` => The function first removes duplicate bookings and then sorts the remaining bookings primarily by passenger name and secondarily by departure city. --- **Function Signature:** ```python def process_bookings(bookings: str) -> str: pass ```","solution":"def process_bookings(bookings: str) -> str: # Split the input string into individual bookings booking_list = bookings.split(\\", \\") # Remove duplicates by converting to a set first, then back to a list booking_list = list(set(booking_list)) # Sort the bookings first by passenger\'s name and then by departure city booking_list.sort(key=lambda booking: booking.split(\\"_\\")) # Join the sorted bookings back into a single string return \\", \\".join(booking_list)"},{"question":"# Task Write a function that receives a string `s` and returns the shortest string that can be obtained by removing characters from `s` to ensure no two adjacent characters are the same. # Input/Output `[input]` string `s` A string consisting of alphanumeric characters with 1 <= `len(s)` <= 100. No special characters or spaces, only letters (both uppercase and lowercase) and digits. [output] a string The shortest string possible with no two adjacent characters being the same. # Example For `s = \\"abccba\\"`, the output should be \\"abcba\\". For `s = \\"aabbcc\\"`, the output should be \\"abc\\". For `s = \\"aabbaa\\"`, the output should be \\"aba\\".","solution":"def remove_adjacent_duplicates(s): Given a string s, returns the shortest string that can be obtained by removing characters from s to ensure no two adjacent characters are the same. result = [] for char in s: if result and result[-1] == char: continue result.append(char) return \'\'.join(result)"},{"question":"In this task, you are given a non-negative integer. Your goal is to reorder its digits in such a way that you create the largest possible integer from those digits. For example: ```python max_possible_number(321) # returns 321 max_possible_number(2134) # returns 4321 max_possible_number(0) # returns 0 ``` Your function should handle the input as a numerical value and return the largest possible integer formed by rearranging its digits. Constraints: - The input will always be a non-negative integer (including zero). - You should not use any string or list conversion methods directly to solve this problem. Work with the number manipulation techniques like finding individual digits using arithmetic operations. Write your function in Python, and you can assume the input to your function will be the integer itself.","solution":"def max_possible_number(n): Returns the largest possible integer formed by rearranging the digits of the input non-negative integer n. # Store the count of each digit (0-9) digit_count = [0] * 10 # Extract digits and update their counts num = n while num > 0: digit = num % 10 digit_count[digit] += 1 num //= 10 # Construct the largest number by combining digits in reverse order max_number = 0 for digit in range(9, -1, -1): while digit_count[digit] > 0: max_number = max_number * 10 + digit digit_count[digit] -= 1 return max_number"},{"question":"=====Problem Statement===== You are given an array of integers A and an integer target sum S. Your task is to determine if there are two distinct elements in the array that add up to the target sum S. =====Input Format===== The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. The third line contains the integer target sum S. =====Output Format===== Print \\"YES\\" if there are two distinct elements in the array that add up to the target sum S. Otherwise, print \\"NO\\". =====Constraints===== 1 <= N <= 10^5 -10^9 <= A[i] <= 10^9 -10^9 <= S <= 10^9 =====Example===== Input: 5 1 2 3 4 5 9 Output: YES","solution":"def two_sum_exists(arr, target): Returns \\"YES\\" if there are two distinct elements in the array that add up to the target sum. Returns \\"NO\\" otherwise. seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"In this challenge, you are provided with an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array that add up to the target sum. For example, given the array `[2, 7, 11, 15]` and the target sum `9`, the pair of numbers that add up to `9` are `2` and `7`. Thus, `solve([2, 7, 11, 15], 9)` should return `True`. Similarly, for the array `[3, 2, 4]` and the target sum `6`, the pair of numbers are `2` and `4`. Hence, `solve([3, 2, 4], 6)` should return `True`. However, if no such pair exists in the array, return `False`. For instance, given the array `[1, 2, 3]` and the target sum `7`, there are no pairs that add up to `7`. Therefore, `solve([1, 2, 3], 7)` should return `False`. Make sure the function runs efficiently and handles edge cases properly. Good luck!","solution":"def solve(nums, target): Determines if there are two distinct elements in the array that add up to the target sum. Args: nums (list): List of integers. target (int): Target sum. Returns: bool: True if there are two distinct elements that add up to target, False otherwise. seen = set() for num in nums: if (target - num) in seen: return True seen.add(num) return False"},{"question":"Write a function named `maxDifference` that takes an array of integers as input and returns the maximum difference between two elements in the array where the larger element comes after the smaller one. For example: ```python maxDifference([2, 3, 10, 6, 4, 8, 1]) => 8 maxDifference([7, 9, 5, 6, 3, 2]) => 2 maxDifference([1, 2, 6, 4]) => 5 maxDifference([5, 4, 3, 2, 1]) => 0 ``` # Assumptions and Constraints: 1. The input array will have at least two elements. 2. If no such pair exists that satisfies the condition, the function should return `0`. 3. The elements in the array are all integers and can be positive or negative. # Function Signature: ```python def maxDifference(arr: List[int]) -> int: pass ```","solution":"from typing import List def maxDifference(arr: List[int]) -> int: if len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for num in arr[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"Professor Snape is known for his love of complex potions, and this time he has created a particularly challenging one. To brew this potion correctly, one must solve an ancient riddle involving prime numbers. The riddle states that one must find the sum of all prime numbers less than or equal to a given number N. Help Professor Snape by creating a program to solve this riddle. -----Input----- The first line of input contains an integer T denoting the number of test cases. The next T lines contain an integer N. -----Output----- For each test case, print a single line containing the sum of all prime numbers less than or equal to N. -----Constraints----- - 1 ≤ T ≤ 10000 - 1 ≤ N ≤ 100000 -----Example----- Input: 3 5 10 20 Output: 10 17 77","solution":"def sum_of_primes(N): Returns the sum of all prime numbers less than or equal to N. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0] = sieve[1] = False p = 2 while (p * p <= N): if (sieve[p] == True): for i in range(p * p, N + 1, p): sieve[i] = False p += 1 prime_sum = sum([i for i in range(N + 1) if sieve[i]]) return prime_sum def process_test_cases(test_cases): results = [] for N in test_cases: results.append(sum_of_primes(N)) return results"},{"question":"Given a list of intervals, merge all overlapping intervals. Example 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Note: Make sure the intervals are sorted in ascending order of their start times before merging. Each interval is a pair of integers [start, end] where start <= end.","solution":"def merge_intervals(intervals): Given a list of intervals, merge all overlapping intervals. :param intervals: List of intervals [start, end] :return: List of merged intervals if not intervals: return [] # Sort intervals by their start times. intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current # interval does not overlap with the previous, simply append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # Otherwise, there is overlap, so we merge the current interval # with the previous one. merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Design a function that evaluates mathematical expressions given in Reverse Polish Notation (RPN). The Notation Reverse Polish Notation (RPN) is a mathematical notation in which every operator follows all of its operands. It does not need any parentheses as long as the operators have a fixed number of operands. In conventional notation, the expression `(3 - 4) * 5` would be written as `3 4 - 5 *` in Reverse Polish Notation. * The input will be a list of strings, where each string is either an operator (`+`, `-`, `*`, `/`) or an integer. * Your function should properly evaluate the given RPN expression and return the result. Behavior: * If the input is invalid (e.g., too many operators, too few operators), you should raise a `ValueError` with the message `\\"Invalid RPN expression\\"`. * Division should use integer division truncating towards zero (e.g., 5 / 2 = 2 and 7 / -3 = -2). # RPN operations: - `+` : Addition (e.g., `2 3 +` = 5) - `-` : Subtraction (e.g., `4 3 -` = 1) - `*` : Multiplication (e.g., `2 3 *` = 6) - `/` : Integer Division truncating towards zero (e.g., `8 3 /` = 2, `7 -3 /` = -2) # Example Usage: ```python def evaluate_rpn(expression: list) -> int: # Your implementation here # Examples print(evaluate_rpn([\\"2\\", \\"3\\", \\"+\\"])) # Returns 5 print(evaluate_rpn([\\"4\\", \\"3\\", \\"-\\"])) # Returns 1 print(evaluate_rpn([\\"2\\", \\"3\\", \\"*\\"])) # Returns 6 print(evaluate_rpn([\\"8\\", \\"3\\", \\"/\\"])) # Returns 2 print(evaluate_rpn([\\"7\\", \\"-3\\", \\"/\\"])) # Returns -2 print(evaluate_rpn([\\"4\\", \\"2\\", \\"/\\", \\"6\\", \\"3\\", \\"-\\"])) # Should raise ValueError ``` Write a function evaluate_rpn that follows the above behavior. **Note:** Do not use any external libraries or functions for the evaluation. Implement the logic manually.","solution":"def evaluate_rpn(expression: list) -> int: Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, and /. Each operand may be an integer or another expression. Division should truncate towards zero. If the input is invalid, raise a ValueError with the message \\"Invalid RPN expression\\". stack = [] for token in expression: if token.lstrip(\'-\').isdigit(): # This will cover negative numbers as well stack.append(int(token)) else: if len(stack) < 2: raise ValueError(\\"Invalid RPN expression\\") b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Ensure division truncates towards zero else: raise ValueError(\\"Invalid RPN expression\\") if len(stack) != 1: raise ValueError(\\"Invalid RPN expression\\") return stack[0]"},{"question":"Background ---------- In the magical realm of Allevia, ancient structures known as Season Towers have been erected to control the balance of the four seasons. Each Season Tower is powered by a series of elemental crystals that regulate the seasonal flow. Due to a mystical disturbance, the crystals have become scattered across the kingdom. The council of wizards has tasked you with retrieving the crystals and restoring balance to Allevia. Mission Details --------------- The kingdom can be represented as a grid of cells, each with coordinates (x, y). The grid is bounded by `-k <= x, y <= k`, where `k` is a given integer. Each cell can contain one crystal. Your task is to collect all the crystals and return their final positions sorted primarily by the x-coordinate, and secondarily by the y-coordinate. You are given the following information: - A list of the initial positions of the crystals. - A list of movements, where each movement is represented as `[direction, distance]`. Directions are mapped to the following values: `0 = North, 1 = East, 2 = South, 3 = West`. Your function should return a list of final crystal positions sorted as mentioned above. Example ------- ```python initial_positions = [[2, 3], [-1, -1], [0, 0]] movements = [[2, 1], [1, 2], [0, 3], [3, 4]] ``` For the above input: ``` initial_positions = [[2, 3], [-1, -1], [0, 0]] movements = [[2, 1], [1, 2], [0, 3], [3, 4]] Applying the first movement [2, 1] (South, 1): Positions become [[2, 2], [-1, -2], [0, -1]] Applying the second movement [1, 2] (East, 2): Positions become [[4, 2], [1, -2], [2, -1]] Applying the third movement [0, 3] (North, 3): Positions become [[4, 5], [1, 1], [2, 2]] Applying the fourth movement [3, 4] (West, 4): Positions become [[0, 5], [-3, 1], [-2, 2]] Sorting the positions: Output should be [[-3, 1], [-2, 2], [0, 5]] ``` Additional Technical Details ---------------------------- - Inputs are always valid. - Crystal positions will always lie within the grid boundaries after all movements. - Movements are applied to all crystals simultaneously. - Initial positions and movements will always be non-empty lists. - Do not mutate the input lists. The goal of your function is to return the sorted final positions of the crystals. ```python def restore_season_towers(initial_positions, movements): # Your implementation here ``` **Note from the author:** This story and challenge were designed for educational purposes within the realm of fictional storytelling. Any resemblance to real-world scenarios is purely coincidental. Happy coding!","solution":"def restore_season_towers(initial_positions, movements): # Define the movement directions directions = { 0: (0, 1), # North 1: (1, 0), # East 2: (0, -1), # South 3: (-1, 0) # West } # Apply all movements to each crystal for movement in movements: direction, distance = movement dx, dy = directions[direction] # Update each crystal\'s position for i in range(len(initial_positions)): initial_positions[i][0] += dx * distance initial_positions[i][1] += dy * distance # Sort the final positions primarily by x-coordinate, secondarily by y-coordinate final_positions = sorted(initial_positions, key=lambda pos: (pos[0], pos[1])) return final_positions # Example usage: initial_positions = [[2, 3], [-1, -1], [0, 0]] movements = [[2, 1], [1, 2], [0, 3], [3, 4]] print(restore_season_towers(initial_positions, movements)) # Output should be [[-3, 1], [-2, 2], [0, 5]]"},{"question":"You are given a list of integers and an integer target. Write a function that finds all **unique combinations** of numbers in the list where the chosen numbers sum to the target. Each number in the list can be used multiple times in the combination. The function should return a list of all these unique combinations. The solution set must not contain duplicate combinations. **Input:** - A list of integers `candidates`. - An integer `target`. **Output:** - A list of lists, each containing unique combinations of integers that sum up to the target. **Examples:** ```python find_combinations([2, 3, 6, 7], 7) # Output: [[2, 2, 3], [7]] find_combinations([2, 3, 5], 8) # Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ``` **Constraints:** - All numbers (including the target) will be positive integers. - The solution set must not contain duplicate combinations. - Elements in a combination must be in non-descending order.","solution":"def find_combinations(candidates, target): def backtrack(current_combination, current_sum, start_index): if current_sum == target: result.append(list(current_combination)) return if current_sum > target: return for i in range(start_index, len(candidates)): current_combination.append(candidates[i]) backtrack(current_combination, current_sum + candidates[i], i) current_combination.pop() result = [] candidates.sort() backtrack([], 0, 0) return result"},{"question":"Given a list of strings representing commands executed in a text editor, your task is to return the final state of the text editor\'s content after all commands have been processed. The text editor has the following commands: - `\\"APPEND <text>\\"`: Append the given `<text>` to the end of the current content. - `\\"DELETE <n>\\"`: Delete the last `<n>` characters from the current content. If `<n>` is greater than the current content length, delete all characters. - `\\"UNDO\\"`: Revert the content to the state before the last command was executed. If there is no command to undo, do nothing. - `\\"REDO\\"`: Reapply the last undone command. If there is no command to redo, do nothing. Commands are given in the order they are executed. There may be multiple `\\"UNDO\\"` and `\\"REDO\\"` commands in sequence, and their effects should be cumulative. Your function should take a list of commands and return the final state of the text editor\'s content as a string. For example: ```python commands = [ \\"APPEND Hello\\", \\"APPEND World\\", \\"DELETE 5\\", \\"UNDO\\", \\"APPEND !\\", \\"UNDO\\", \\"UNDO\\", \\"REDO\\", \\"REDO\\", \\"REDO\\" ] ``` The above sequence of commands should result in the final content of `\\"Hello!\\"`. Write a function: ```python def text_editor(commands: List[str]) -> str: ``` # Constraints: - Each command in the `commands` list is a valid command string as described. - The number of commands will not exceed 1000. - The total length of appended text in any sequence of `APPEND` commands will not exceed 10000 characters. # Example ```python assert text_editor([ \\"APPEND Hello\\", \\"APPEND World\\", \\"DELETE 5\\", \\"UNDO\\", \\"APPEND !\\", \\"UNDO\\", \\"UNDO\\", \\"REDO\\", \\"REDO\\", \\"REDO\\" ]) == \\"Hello!\\" assert text_editor([ \\"APPEND abc\\", \\"DELETE 1\\", \\"DELETE 1\\", \\"DELETE 1\\", \\"UNDO\\", \\"UNDO\\", \\"UNDO\\" ]) == \\"abc\\" ```","solution":"def text_editor(commands): Returns the final state of the text editor\'s content after all commands have been processed. content = \\"\\" history = [] # to hold the history of states for UNDO operations redo_stack = [] # to hold the redo history for command in commands: if command.startswith(\\"APPEND\\"): text_to_append = command.split(\\" \\", 1)[1] history.append(content) content += text_to_append redo_stack.clear() # clear redo stack on new action elif command.startswith(\\"DELETE\\"): n = int(command.split(\\" \\", 1)[1]) history.append(content) content = content[:-n] if n <= len(content) else \\"\\" redo_stack.clear() # clear redo stack on new action elif command == \\"UNDO\\": if history: redo_stack.append(content) content = history.pop() elif command == \\"REDO\\": if redo_stack: history.append(content) content = redo_stack.pop() return content"},{"question":"David is organizing a race event where m participants are to cover a distance of d meters. Each participant has a maximum speed denoted by an integer s_i, where i ranges from 1 to m. During the race, each participant can either run at their maximum speed or rest (which is considered a speed of 0). David wants to determine the minimum time required for participants to cover the distance d if they can make any number of rests, but they must eventually reach the finish line. Assume that each participant can choose their own resting strategy such that their race completion time is minimized. -----Input----- The first line of input contains two integers m (1 ≤ m ≤ 10^5) and d (1 ≤ d ≤ 10^9), the number of participants and the race distance respectively. The second line contains m integers separated by space, s_1, s_2, ..., s_{m} (1 ≤ s_{i} ≤ 10^9), the maximum speeds of participants. -----Output----- Print m integers in one line. For each i from 1 to m, print the minimum time in seconds required for the i-th participant to cover the distance d. -----Examples----- Input 4 100 10 20 5 25 Output 10 5 20 4 Input 3 150 15 50 30 Output 10 3 5","solution":"def calculate_times(m, d, speeds): Given the number of participants, distance to cover, and list of maximum speeds, this function computes the minimum time required for each participant to cover the distance d. Parameters: m (int): Number of participants d (int): Distance to be covered speeds (list): List of maximum speeds for each participant Returns: list: List of minimum times for each participant to cover the distance times = [] for s in speeds: time = (d + s - 1) // s # Ceiling division times.append(time) return times"},{"question":"Your task is to write a function that receives a string of mixed characters and returns the longest contiguous substring that contains the same character. If there are multiple substrings of the same length, return the one that appears first. Examples ``` \\"aaabbbaaaccc\\" --> \\"aaa\\" \\"abcd\\" --> \\"a\\" \\"abbbcccd\\" --> \\"bbb\\" ``` In the first example, \\"aaa\\" is the longest contiguous substring with the same character. In the second example, each character appears only once, so return \\"a\\". In the third example, \\"bbb\\" is the longest contiguous substring with the same character.","solution":"def longest_contiguous_substring(s): Returns the longest contiguous substring that contains the same character. If there are multiple substrings of the same length, returns the one that appears first. if not s: return \\"\\" max_len = 1 current_len = 1 max_substring = s[0] current_char = s[0] for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 if current_len > max_len: max_len = current_len max_substring = s[i-current_len+1:i+1] else: current_len = 1 current_char = s[i] return max_substring"},{"question":"You are tasked with creating a seating chart for a wedding reception. The reception has to follow specific rules to ensure everyone has a seat and enjoys the event. The venue is organized as an N x M grid of seats. Some of the seats are reserved for family members and cannot be moved or left empty. Each family member has a predetermined seat assigned. Additionally, the bride and groom want to comply with the following rules: - Each guest should have their own seat (no sharing is allowed). - Family members must sit in their reserved seats. - Any remaining seats can be distributed among other guests, but every guest must be seated. Determine if it is possible to seat all guests and family members according to these rules. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with a line containing three integers N, M, and G – the number of rows, columns, and guests respectively (excluding family members). The next line contains an integer F denoting the number of family members. Each of the following F lines contains two integers Ri and Ci indicating the reserved seat for the i-th family member in row Ri and column Ci (1-indexed). -----Output----- For each test case, output a single line containing either \\"Possible\\" or \\"Impossible\\" denoting whether it\'s possible to seat all guests according to the rules. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 50 - 1 ≤ G ≤ N * M - 0 ≤ F ≤ 50 -----Example----- Input: 3 3 3 4 2 1 1 3 3 4 5 18 6 1 1 1 2 1 3 1 4 2 1 2 2 2 2 2 0 Output: Possible Impossible Possible -----Explanation----- Example case 1. There are 4 seats available (the 3x3 grid minus 2 reserved seats), which can accommodate all 4 guests. Example case 2. The grid has 20 seats (4x5) out of which 6 are reserved, leaving only 14 seats for 18 guests, hence it\'s impossible. Example case 3. A 2x2 grid has 4 seats, and with no reservations, it\'s possible to seat 2 guests.","solution":"def can_seat_all_guests(t, cases): results = [] for case in cases: N, M, G, F, family_reserved = case total_seats = N * M family_seats = len(family_reserved) available_seats = total_seats - family_seats if G <= available_seats: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Given a necklace with various colored beads, your task is to find the number of unique colors the necklace has. Each bead is represented by an integer, where each unique integer represents a different color. -----Input:----- - First line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of beads in the necklace. - The second line contains N integers separated by spaces which represent the colors of the beads. -----Output:----- For each test case, print the number of unique colors present in the necklace. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Integer color of bead ≤ 100000 -----Sample Input:----- 3 5 1 2 3 2 1 4 4 4 4 4 6 1 2 3 4 5 6 -----Sample Output:----- 3 1 6","solution":"def unique_bead_colors(test_cases): results = [] for case in test_cases: N, beads = case unique_colors = len(set(beads)) results.append(unique_colors) return results # Example usage: # test_cases = [(5, [1, 2, 3, 2, 1]), (4, [4, 4, 4, 4]), (6, [1, 2, 3, 4, 5, 6])] # print(unique_bead_colors(test_cases))"},{"question":"You are given a list of box weights and a target weight that represents the maximum weight that a single elevator can carry at a time. Each box needs to be transported to the top floor using the elevator, and you must find the minimum number of elevator trips required. -----Input:----- - The first line contains two integers n (1 <= n <= 1000) and w (1 <= w <= 10^9) - the number of boxes and the maximum weight the elevator can carry, respectively. - The second line contains n integers (1 <= weight_i <= 10^9) - the weights of the boxes. -----Output:----- - Output a single integer, the minimum number of elevator trips required to transport all the boxes. -----Sample Input:----- 5 10 2 3 4 5 7 -----Sample Output:----- 3 -----Explanation:----- In the sample above, one possible solution is to group the boxes in the following way: - First trip: box with weight 7 (total weight: 7) - Second trip: boxes with weights 3 and 4 (total weight: 7) - Third trip: boxes with weights 2 and 5 (total weight: 7) Hence, the minimum number of elevator trips needed is 3.","solution":"def min_elevator_trips(n, w, weights): Returns the minimum number of elevator trips required to transport all the boxes. weights.sort(reverse=True) trips = 0 used = [False] * n for i in range(n): if not used[i]: current_weight = weights[i] used[i] = True for j in range(i + 1, n): if not used[j] and current_weight + weights[j] <= w: current_weight += weights[j] used[j] = True trips += 1 return trips"},{"question":"Alice loves exploring array transformations. She gives you a challenge involving a specific transformation of an array. Given an initial array of integers, Alice wants you to create a new array where each element at index `i` is the product of all the elements in the original array except the one at index `i`. She wants you to do this without using division and in an efficient way, which means aiming for a linear time complexity. Formally, for a given array `arr` of size `n`, create an array `prod` where `prod[i]` is equal to the product of all elements of `arr` except `arr[i]`. -----Input:----- The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. Each test case consists of two lines: - The first line contains an integer `n` representing the size of the array. - The second line contains `n` space-separated integers representing the array elements. -----Output:----- For each test case, output a single line containing `n` space-separated integers representing the transformed array. -----Constraints:----- 1 leq T leq 100 1 leq n leq 10^5 -10^5 leq arr[i] leq 10^5 -----Sample Input:----- 2 4 1 2 3 4 3 5 6 7 -----Sample Output:----- 24 12 8 6 42 35 30","solution":"def array_product_transform(arr): n = len(arr) if n == 0: return [] # Initialize arrays to store the products left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Fill the result array by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve(test_cases): results = [] for case in test_cases: n, arr = case results.append(array_product_transform(arr)) return results"},{"question":"Given an array of integers, determine the length of the longest contiguous subarray such that every element in the subarray is of the same parity (either all even or all odd). Function Signature: ```python def longest_same_parity_subarray(arr: List[int]) -> int: ``` # Input - An array `arr` of `n` integers where `1 ≤ n ≤ 10^5` and each integer `1 ≤ arr[i] ≤ 10^6`. # Output - An integer denoting the length of the longest contiguous subarray with the same parity. # Example ```python assert longest_same_parity_subarray([1, 3, 5, 4, 6, 8]) == 3 assert longest_same_parity_subarray([2, 4, 7, 7, 8]) == 2 assert longest_same_parity_subarray([5, 9, 2, 2, 2, 3, 1]) == 3 ```","solution":"from typing import List def longest_same_parity_subarray(arr: List[int]) -> int: if not arr: return 0 max_length = 1 current_length = 1 current_parity = arr[0] % 2 for i in range(1, len(arr)): if (arr[i] % 2) == current_parity: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 current_parity = arr[i] % 2 # Final check after loop max_length = max(max_length, current_length) return max_length"},{"question":"Given an array of integers and a target integer, find two distinct integers in the array that sum up to the target value. Implement a function that returns the indices of these two integers. If no such integers exist, return `null`. - The input to the function is an array of integers and a target integer. - The function should return an array of indices `[index1, index2]` with `index1` being less than `index2`. **Note:** It\'s guaranteed that each input would have exactly one solution. You may not use the same element twice. Example ``` Input: array = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The two numbers that add up to 9 are 2 and 7. Their indices are 0 and 1. Input: array = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The two numbers that add up to 6 are 2 and 4. Their indices are 1 and 2. ```","solution":"def two_sum(nums, target): Returns the indices of the two distinct integers in the array that sum up to the target value. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return None"},{"question":"A company is developing a new text editor and one of the features is a word frequency counter. They want to know how many times each word appears in a document. For the sake of this task, a word is defined as a contiguous sequence of alphabetic characters, and it is case-insensitive (i.e., \\"Word\\" and \\"word\\" should be considered the same word). Write a program that reads multiple lines of text and outputs the frequency of each word in the text. The output should be a list of words and their corresponding frequencies, ordered by the words alphabetically. -----Input----- The first line contains an integer T denoting the number of lines of text. Each of the next T lines contains a string composed of English lowercase and uppercase alphabetical characters and spaces. You can assume that 1 <= T <= 100 and each line has at most 100 characters. -----Output----- For each word, output the word and its frequency in format \\"word: frequency\\", sorted alphabetically by words. Each word and its frequency should be printed on a new line. -----Example----- Input: 3 Hello world hello World HELLO hello hello Output: hello: 5 world: 2","solution":"def word_frequency_counter(T, lines): from collections import Counter import re word_counter = Counter() for line in lines: words = re.findall(r\'b[a-zA-Z]+b\', line.lower()) word_counter.update(words) sorted_word_count = sorted(word_counter.items()) result = [] for word, count in sorted_word_count: result.append(f\\"{word}: {count}\\") return result"},{"question":"Given an array A of N integers, determine if it is possible to reorder the array such that for all i (1 ≤ i ≤ N-1), the absolute difference between A[i] and A[i+1] is at most K. If such an ordering is possible, print one such arrangement. If it is not possible, print -1. -----Constraints----- - 2 ≤ N ≤ 100000 - 1 ≤ A[i] ≤ 10^9 - 1 ≤ K ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: N K A_1 A_2 ... A_N -----Output----- If an ordering that satisfies the condition does not exist, print -1. Otherwise, print N integers which denote one possible arrangement of the array. -----Sample Input----- 5 3 4 2 8 6 3 -----Sample Output----- 2 4 3 6 8","solution":"def reorder_array(N, K, A): A.sort() for i in range(1, N): if abs(A[i] - A[i-1]) > K: return -1 return A # Example use-case (it would be tailored to your specific input mechanism in real use): # input_data = # 5 3 # 4 2 8 6 3 # # input_lines = input_data.strip().split(\'n\') # N, K = map(int, input_lines[0].split()) # A = list(map(int, input_lines[1].split())) # print(reorder_array(N, K, A))"},{"question":"You have been given a string containing words separated by spaces. Each word consists of only lowercase English letters. Your task is to capitalize the first letter of each word and return the modified string. For example: - `capitalizeWords(\'hello world\')` should return `\'Hello World\'` - `capitalizeWords(\'programming is fun\')` should return `\'Programming Is Fun\'` - `capitalizeWords(\'this is a test\')` should return `\'This Is A Test\'`","solution":"def capitalizeWords(s): Returns the input string with the first letter of each word capitalized. return \' \'.join(word.capitalize() for word in s.split(\' \'))"},{"question":"Write a function that accepts a list of integers representing the prices of different items in a store and a budget represented by an integer. The function should determine the maximum number of different items that can be bought without exceeding the budget. If the total price of the items exceeds the budget even with the cheapest combination, the function should return 0. The function takes two arguments: `prices` (a list of integers) and `budget` (an integer).","solution":"def max_items_within_budget(prices, budget): Given a list of item prices and a budget, this function returns the maximum number of different items that can be bought without exceeding the budget. :param prices: List[int] - List of item prices :param budget: int - The provided budget :return: int - Maximum number of items that can be bought within the budget if not prices or budget <= 0: return 0 prices.sort() total_spent = 0 items_count = 0 for price in prices: if total_spent + price > budget: break total_spent += price items_count += 1 return items_count"},{"question":"You are given two matrices A and B of dimensions N times M. Your task is to determine if there exists a permutation of the rows of matrix A, say A\', such that A\' can be transformed into matrix B by permuting the columns of A\'. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The next N lines describe the matrix A. Each line contains M space-separated integers. - The next N lines describe the matrix B. Each line contains M space-separated integers. -----Output----- For each test case, print a single line containing \\"YES\\" if such a permutation exists, or \\"NO\\" otherwise. -----Constraints----- - 1 le T le 500 - 1 le N, M le 50 - 0 le A_{i, j}, B_{i, j} le 10^3 -----Example Input----- 2 2 2 1 2 3 4 3 4 1 2 2 3 4 1 2 3 1 2 3 1 2 3 4 5 6 3 4 5 6 1 2 -----Example Output----- YES NO","solution":"def can_transform_matrix(N, M, A, B): # Sort each row in both matrices sorted_A = [sorted(row) for row in A] sorted_B = [sorted(row) for row in B] # Sort the rows lexicographically sorted_A.sort() sorted_B.sort() # Compare sorted versions of A and B return sorted_A == sorted_B def matrix_permutation_possible(test_cases): results = [] for N, M, A, B in test_cases: if can_transform_matrix(N, M, A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse input and execute the solution def solve_problem(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) A = [] B = [] for i in range(N): A.append(list(map(int, lines[index + 1 + i].split()))) for j in range(N): B.append(list(map(int, lines[index + 1 + N + j].split()))) index += 1 + 2 * N test_cases.append((N, M, A, B)) result = matrix_permutation_possible(test_cases) return \\"n\\".join(result)"},{"question":"Tina loves playing with her toy fencing set, positioning her pieces to represent a field partitioned by fences. The field is represented by a grid of `m` rows and `n` columns where some cells contain a fence (\'#\') and others are empty (\'.\'). Tina wants to find the largest rectangular section of the field that is not interrupted by any fences. Can you help Tina determine the area of the largest empty rectangle in her field? -----Input----- The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid. The next `m` lines each contain `n` characters, representing the grid. Each character is either \'#\' or \'.\'. -----Output----- Print a single integer — the area of the largest rectangular section without any fences. -----Examples----- Input 6 7 ....... ..#.... .#..... ....... ..#.... .....#. Output 20 Input 4 4 .. .... ..#. .#.. Output 4 -----Note----- In the first example, the largest empty rectangle without any fences is of dimensions 4x5. In the second example, the largest empty rectangle is of dimensions 2x2.","solution":"def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_without_fences(grid, m, n): if not grid: return 0 height = [0] * n max_area = 0 for i in range(m): for j in range(n): if grid[i][j] == \'.\': height[j] += 1 else: height[j] = 0 max_area = max(max_area, max_histogram_area(height)) return max_area # Example usages def solve(m, n, grid): return largest_rectangle_without_fences(grid, m, n)"},{"question":"Write a function that takes an unsorted array of integers and a target sum, and returns all unique combinations of integers in the array that add up to the target sum. Each number in the array may only be used once in the combination. Example: Input: arr = [10, 1, 2, 7, 6, 1, 5], target = 8 Output: [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]] Explanation: - 1 + 1 + 6 = 8 - 1 + 2 + 5 = 8 - 1 + 7 = 8 - 2 + 6 = 8 Note: - All numbers (including target) will be positive integers. - The solution set must not contain duplicate combinations. - The array length will be in the range [2, 20].","solution":"def combination_sum2(arr, target): Returns all unique combinations in arr that add up to target. Each number in arr may only be used once in the combination. def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(arr)): if i > start and arr[i] == arr[i-1]: continue backtrack(i + 1, target - arr[i], path + [arr[i]]) arr.sort() result = [] backtrack(0, target, []) return result"},{"question":"You are given an initially empty String. You are required to perform a series of operations which are defined as follows: 1. **Add Character**: Given a character, append it to the string. 2. **Remove Character**: This will remove the last character of the string if there is any. 3. **Query**: Output the character at a given position in the string. You need to handle multiple operations and answer the queries. -----Input:----- - The first line contains an integer T, the number of operations. Then following T lines describe the operations. - Each operation is represented in one of the following forms: - \'A c\' where c is a lowercase English letter representing the Add Character operation. - \'R\' representing the Remove Character operation. - \'Q p\' where p is an integer representing the Query operation for 1-based index (i.e., query the p-th character of the string). -----Output:----- For each Query operation, print the result in a new line. If the queried position is invalid (e.g., p is greater than the current length of the string), print \'Invalid\'. -----Constraints----- - 1 leq T leq 10^5 - \'c\' is a lowercase English letter. - 1 leq p leq 10^5 -----Sample Input:----- 8 A a A b A c Q 2 R Q 3 R Q 1 -----Sample Output:----- b Invalid a -----Explanation:----- After the first three operations, the string becomes \\"abc\\". The fourth operation queries the second character \'b\'. The fifth operation removes the last character, so the string becomes \\"ab\\". The sixth operation queries the third character, which is invalid since the string length is now 2. The seventh operation further removes the last character, making the string \\"a\\". Finally, the eighth operation queries the first character, which is \'a\'.","solution":"def string_operations(operations): result = [] s = [] for operation in operations: parts = operation.split() op = parts[0] if op == \'A\': s.append(parts[1]) elif op == \'R\': if s: s.pop() elif op == \'Q\': p = int(parts[1]) if 1 <= p <= len(s): result.append(s[p-1]) else: result.append(\'Invalid\') return result"},{"question":"Implement a function that takes a string representing a mathematical expression and evaluates it. The expression may contain positive and negative integers, addition (+) and subtraction (-) operators, and possibly spaces. The function should return the result as an integer. Assume the input expression is valid. # Examples ```python evaluate_expression(\\"12 + 23 - 4 + 5\\") = 36 evaluate_expression(\\"100 - 50 + 25 - 5\\") = 70 evaluate_expression(\\"-30 + 10 - 5\\") = -25 evaluate_expression(\\"1 + 2 + 3 + 4 - 10\\") = 0 ``` # Notes: - The input string will consist of digits (0-9), spaces, and the + and - operators only. - The expression does not contain any parentheses. - Unary operators are not present except at the beginning of the expression (e.g., \\"-30\\" or \\"+20\\").","solution":"def evaluate_expression(expression: str) -> int: Evaluate a mathematical expression with addition and subtraction. :param expression: A string representing the mathematical expression :return: The result of the expression as an integer # Replace any spaces in the input expression expression = expression.replace(\\" \\", \\"\\") # Initialize variables to store current number and result number = 0 result = 0 sign = 1 # To handle positive/negative sign, 1 for positive and -1 for negative # Traverse each character in the expression for char in expression: if char.isdigit(): # If char is digit, build the current number number = number * 10 + int(char) else: # If char is either \'+\' or \'-\', complete the previous number result += sign * number # Reset number to 0 number = 0 # Determine the current sign if char == \'+\': sign = 1 elif char == \'-\': sign = -1 # Add the last number in the expression result += sign * number return result"},{"question":"Given a list of integers, write a program to find the first non-repeating integer in the list. If there is no non-repeating integer, return -1. -----Input----- The first line contains an integer T, the total number of test cases. For each test case, the first line contains an integer N, the number of integers in the list. The second line contains N integers separated by spaces. -----Output----- For each test case, display the first non-repeating integer in the list, or -1 if there is no such integer, in a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10000 - -1000000 ≤ integer in the list ≤ 1000000 -----Example----- Input: 3 5 1 2 2 1 3 4 4 5 4 6 3 7 7 7 Output: 3 5 -1","solution":"def find_first_non_repeating_integer(test_cases): results = [] for case in test_cases: number_count = {} for num in case: if num in number_count: number_count[num] += 1 else: number_count[num] = 1 first_non_repeating = -1 for num in case: if number_count[num] == 1: first_non_repeating = num break results.append(first_non_repeating) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, 2 * T, 2): N = int(lines[i]) case = list(map(int, lines[i + 1].split())) test_cases.append(case) return find_first_non_repeating_integer(test_cases)"},{"question":"-----Problem description.----- You are given a string containing digits and lowercase English letters. Your task is to sort all the digits in the string in non-descending order, while leaving the letters in their original positions. For instance, if given the string `s1d2r3`, after sorting the digits, the string should become `s1d2r3` because the digits are already sorted. For the string `a3b2c1`, after sorting, it should become `a1b2c3`. -----Input----- - The first line contains an integer T, the number of test cases. - Each of the following T lines contains a string. -----Output----- - Output T lines, each containing the transformed string for the corresponding input. -----Constraints----- - 1 ≤ T ≤ 104 - 1 ≤ length of each string ≤ 105 The sum of the lengths of the input strings does not exceed 106. -----Example----- Input: 3 a3b2c1 s1d2r3 4f2g1 Output: a1b2c3 s1d2r3 1f2g4 -----Explanation----- In the first case, the digits 3, 2, and 1 are sorted to become 1, 2, and 3 while the letters remain in their original position. In the second case, the string already has digits in the correct order, so it remains unchanged. The third case sorts the digits 4, 2, and 1 to become 1, 2, and 4 while maintaining the position of letters.","solution":"def sort_digits_in_string(s): Sorts all the digits in the string in non-descending order, while leaving the letters in their original positions. # Extract all the digits from the string digits = sorted([ch for ch in s if ch.isdigit()]) digit_index = 0 result = [] for ch in s: if ch.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(ch) return \'\'.join(result) def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [sort_digits_in_string(lines[i + 1]) for i in range(T)] return \'n\'.join(results)"},{"question":"Write a function that takes two strings representing binary numbers and returns a string that represents their sum, also in binary. The output string should not contain any leading zeros unless the result is \\"0\\". Examples ``` \\"110\\" + \\"101\\" ==> \\"1011\\" \\"11\\" + \\"1\\" ==> \\"100\\" \\"1\\" + \\"1\\" ==> \\"10\\" \\"0\\" + \\"0\\" ==> \\"0\\" ```","solution":"def add_binary(bin1, bin2): Adds two binary strings and returns their sum as a binary string. The result does not contain leading zeros unless the result is \'0\'. # Convert the binary strings to integers int1 = int(bin1, 2) int2 = int(bin2, 2) # Add the integers sum_int = int1 + int2 # Convert the sum back to binary and remove the \'0b\' prefix sum_bin = bin(sum_int)[2:] return sum_bin"},{"question":"Write a function mergeAndSort that takes two lists of integers as input, merges them into a single list, and then returns the list sorted in non-decreasing order. For example, given the lists [3, 1, 4] and [4, 6, 5], the function should return [1, 3, 4, 4, 5, 6].","solution":"def mergeAndSort(list1, list2): Merges two lists and returns a sorted list in non-decreasing order. Parameters: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: Sorted list containing all elements from list1 and list2. merged_list = list1 + list2 merged_list.sort() return merged_list"},{"question":"You are given a sequence of integers where each integer appears exactly twice except for one integer which appears exactly once. Your task is to find the unique integer. For example, given the input array [1, 2, 3, 2, 3, 1, 4], the output should be 4 as it is the only integer that appears once. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of integers in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) representing the sequence of integers. It\'s guaranteed that n is an odd number and the total sum of n over test cases doesn\'t exceed 10^5. -----Output----- Output the unique integer which appears exactly once in the sequence. -----Example----- Input 7 1 2 3 2 3 1 4 Output 4","solution":"def find_unique_integer(arr): Returns the unique integer that appears exactly once in the sequence. Assumes every integer appears twice except one which appears once. result = 0 for num in arr: result ^= num return result # Test function to parse input, and provide the actual function with the correct arguments def main(n, sequence): return find_unique_integer(sequence)"},{"question":"=====Problem Statement===== You are given a list of non-negative integers, and you need to rearrange them to form the largest possible integer. Concept To create the largest possible integer from a list of non-negative integers, you need to sort the numbers in a specific manner. This involves defining a custom comparator which determines the order of two numbers based on which combination produces a larger value. For instance, to decide the order between \\"3\\" and \\"30\\", you need to compare \\"330\\" and \\"303\\". =====Input Format===== First line contains integer n, the number of non-negative integers. Next line contains n space-separated non-negative integers. =====Constraints===== 1 ≤ n ≤ 100 0 ≤ each integer ≤ 10^9 =====Output Format===== Print the largest possible integer that can be formed by rearranging the given list of non-negative integers. =====Example===== Input 4 3 30 34 5 Output 534330 =====Explanation===== By comparing concatenations: - \\"3\\" + \\"30\\" -> \\"330\\" and \\"30\\" + \\"3\\" -> \\"303\\". Thus, \\"3\\" comes before \\"30\\". - Now, compare \\"34\\" + \\"3\\" -> \\"343\\" and \\"3\\" + \\"34\\" -> \\"334\\". Thus, \\"34\\" comes before \\"3\\". - Compare \\"5\\" + \\"34\\" -> \\"534\\" and \\"34\\" + \\"5\\" -> \\"345\\". Thus, \\"5\\" comes before \\"34\\". Therefore, the largest number formed is \\"534330\\".","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers, arrange them to form the largest possible integer. Parameters: nums (list): A list of non-negative integers Returns: str: The largest possible integer as a string # Convert all numbers to strings nums = list(map(str, nums)) # Custom comparator function def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort numbers using the custom comparator nums.sort(key=cmp_to_key(compare)) # Join and return the result, taking care of edge case with leading zeroes largest_num = \'\'.join(nums) return \'0\' if largest_num[0] == \'0\' else largest_num"},{"question":"Given a list of integers where each integer represents a vote for a candidate in an election, write a function named `winner` which takes a list of integers as an input and returns the integer representing the candidate who received the most votes. If there is a tie, return the smallest integer among the tied candidates. You can assume the input list is not empty and contains only positive integers. For example: ```python print(winner([1, 3, 2, 3, 2, 3])) # Output: 3 print(winner([5, 1, 2, 1, 5])) # Output: 1 print(winner([7, 7, 7, 8])) # Output: 7 ```","solution":"from collections import Counter def winner(votes): Returns the candidate with most votes. In case of a tie, returns the smallest candidate number. # Count the number of votes each candidate received vote_count = Counter(votes) # Find the maximum number of votes max_votes = max(vote_count.values()) # Get the list of candidates with max votes candidates_with_max_votes = [candidate for candidate, count in vote_count.items() if count == max_votes] # Return the smallest candidate among those with the max votes return min(candidates_with_max_votes)"},{"question":"You are given a string containing words and spaces. Each word is separated by a single space, and there are no leading or trailing spaces. Write a function `reverse_words(s: str) -> str` that takes a string `s` and returns the string with all words reversed individually and the order of words reversed. The spaces should be in the places they originally were. # Examples ```python reverse_words(\\"hello world\\") == \\"dlrow olleh\\" reverse_words(\\"coding is fun\\") == \\"nuf si gnidoc\\" reverse_words(\\"practice makes perfect\\") == \\"tcefrep sekam ecitcarp\\" reverse_words(\\"a b c d\\") == \\"d c b a\\" reverse_words(\\"algorithm\\") == \\"mhtirogla\\" ``` # Constraints - The length of `s` will always be greater than 0 and less than or equal to 10000. - All characters in `s` are ASCII characters. # Guidelines 1. Split the string into words. 2. Reverse each word individually. 3. Reverse the order of the words. 4. Join the words back into a single string, ensuring that there is a single space between words.","solution":"def reverse_words(s: str) -> str: Return the string with all words reversed individually and the order of words reversed. words = s.split() reversed_words = [word[::-1] for word in words] reversed_order = list(reversed(reversed_words)) return \' \'.join(reversed_order)"},{"question":"Write a function `sorted_squared_array` that takes a list of integers (both positive and negative) and returns a new list with the squares of each number, sorted in non-decreasing order. For example: ```python sorted_squared_array([-4, -1, 0, 3, 10]) == [0, 1, 9, 16, 100] sorted_squared_array([-7, -3, 2, 3, 11]) == [4, 9, 9, 49, 121] ```","solution":"def sorted_squared_array(nums): Returns a new list with the squares of each number in the input list, sorted in non-decreasing order. return sorted(x*x for x in nums)"},{"question":"Given a list of non-negative integers, your task is to arrange them such that they form the largest possible number. For example: ```python largest_number([3, 30, 34, 5, 9]) -> \\"9534330\\" largest_number([10, 2]) -> \\"210\\" ``` It is guaranteed that the result can be obtained within the range of a 32-bit signed integer. Constraints: - The input list can contain up to 100 integers. - Each integer in the list does not exceed 10^9. Write a function `largest_number` that takes a list of non-negative integers and returns a string representing the largest possible number that can be formed by arranging the list elements. ```python def largest_number(nums): # Implement your solution here pass ```","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers, arrange them such that they form the largest possible number. def compare(x, y): return 1 if x + y < y + x else -1 if x + y > y + x else 0 # Convert all integers to strings nums_str = list(map(str, nums)) # Sort numbers using custom comparator nums_str.sort(key=cmp_to_key(compare)) # Join sorted numbers into a single string result = \'\'.join(nums_str) # Edge case for a bunch of zeros return \'0\' if result[0] == \'0\' else result"},{"question":"Write a function named `most_frequent_chars` that takes a string input and returns a list of the characters that appear the most frequently in the string, in the order they first appear in the string. For example, if given the input `\'character\'`, the function should return `[\'c\', \'a\', \'r\']`, since the characters *c*, *a*, and *r* all appear twice and are the most frequent characters in the string. As an added challenge, upper- and lowercase letters should be considered distinct characters. For example, the input `\'Abba\'` should return `[\'b\']`, since *b* appears more frequently than *A* or *a*. If the string is empty, the function should return an empty list (`[]`).","solution":"def most_frequent_chars(s): Returns a list of the characters that appear the most frequently in the string, in the order they first appear in the string. from collections import Counter if not s: return [] # Create a dictionary to count the frequency of each character freq = Counter(s) # Find the highest frequency max_freq = max(freq.values()) # Return characters that have the highest frequency, in the order they first appear in the string result = [] for char in s: if freq[char] == max_freq and char not in result: result.append(char) return result"},{"question":"Given a rectangular 2D grid, your task is to find the size of the largest rectangle containing only 1s and return its area. Example 1: Input: matrix = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"] ] Output: 6 Explanation: The largest rectangle containing only 1s has an area of 6. Example 2: Input: matrix = [ [\\"0\\"] ] Output: 0 Example 3: Input: matrix = [ [\\"1\\"] ] Output: 1 Constraints: - rows == matrix.length - cols == matrix[i].length - 1 <= row, cols <= 200 - matrix[i][j] is \'0\' or \'1\'.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 cols = len(matrix[0]) heights = [0] * (cols + 1) # extra zero for easier calculation of dimensions for row in matrix: for i in range(cols): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 stack = [-1] for i in range(cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function `countArrangements(n)` that takes in an integer `n` (1 ≤ n ≤ 1000) and returns the number of ways to arrange `n` distinct books on shelves, where books on the same shelf are considered to be in the same arrangement regardless of order, but different combinations of shelves count as different arrangements. For example, if n = 4, the valid arrangements would be: - All 4 books on 1 shelf, - 3 books on 1 shelf and 1 book on another shelf, - 2 books on 1 shelf and 2 books on another shelf, - 2 books on 1 shelf, 1 on another, and 1 on another shelf, - 1 book on each of 4 shelves, etc. Return `-1` if the input `n` is not a valid integer within the inclusive range.","solution":"def countArrangements(n): if not isinstance(n, int) or n < 1 or n > 1000: return -1 # Use Bell number computation bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n + 1): bell[i][0] = bell[i-1][i-1] for j in range(1, i + 1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0]"},{"question":"Given a unique set of numbers, we want to find pairs of elements that sum to a target value k. Once pairs are found, return them as a list of tuples, sorted in increasing order of the first element, and if elements of any tuple match, sort by the second element as well. Example: For arr = [1, 5, 3, 7, 9, 2] and k = 10, the pairs that sum to 10 are: - (1, 9) - (3, 7) Hence, the returned list should be: [(1, 9), (3, 7)] **The Task:** Write a function `find_pairs(arr, k)` that receives the parameters: - `arr`: A list of unique integers. - `k`: An integer representing the target sum. The function should return a list of tuples containing pairs of elements from arr that sum to k, sorted as described above. Example Input/Output: - **Input:** arr = [1, 5, 3, 7, 9, 2], k = 10 - **Output:** [(1, 9), (3, 7)] - **Input:** arr = [11, 2, 8, 4, 5], k = 9 - **Output:** [(4, 5)] **Note:** - The length of the array `arr` may reach up to 2 million. - The target value `k` can be any integer within the range of typical integer values in Python. - The function should be optimized for both time and space complexity considering the constraints.","solution":"def find_pairs(arr, k): Find all unique pairs in the list that sum to k. Parameters: arr (list of int): A list of unique integers. k (int): An integer representing the target sum. Returns: list of tuples: A sorted list of tuples with pairs of elements that sum to k. # Dictionary to keep track of numbers we\'ve seen and their indices seen = {} pairs = [] # Traverse through each number in the list for number in arr: # Calculate the complement that would sum to k complement = k - number # Check if complement exists in the seen dictionary if complement in seen: # If it exists, add the pair sorted in ascending order pairs.append(tuple(sorted((number, complement)))) # Add the number to the dictionary (whether it was part of a pair or not) seen[number] = True # Sort the pairs list by the first element, and then by the second element return sorted(pairs)"},{"question":"Find the product of all integers between 1 and \\"N\\" (inclusive) that are divisible by a given integer \\"D\\". -----Input----- Input will start with an integer T, the number of test cases. Each test case consists of two integers, N and D. -----Output----- Output the product for each test case on a new line. If there are no integers between 1 and N divisible by D, output 1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, D ≤ 1000000 -----Example----- Input: 2 10 2 6 10 Output: 3840 1 -----Explanation----- Example case 1. The integers between 1 and 10 that are divisible by 2 are 2, 4, 6, 8, and 10. Their product is 2 * 4 * 6 * 8 * 10 = 3840. Example case 2. There are no integers between 1 and 6 that are divisible by 10, so the output is 1.","solution":"def product_of_divisibles(T, test_cases): Returns an array containing the product of all integers between 1 and N (inclusive) that are divisible by D for each test case. If there are no such integers, return 1. results = [] for N, D in test_cases: product = 1 has_divisible = False for i in range(D, N + 1, D): product *= i has_divisible = True if not has_divisible: product = 1 results.append(product) return results # Example usage: # print(product_of_divisibles(2, [(10, 2), (6, 10)])) # Output: [3840, 1]"},{"question":"You are given a string representing the names of participants in a marathon, separated by commas. The names of the finishers are appended in the order they finished the race. Your task is to find the name of the person who finished exactly in the middle position. If the number of participants is odd, return the name of the middle finisher. If the number of participants is even, return a string with the two middle finishers concatenated together, separated by an ampersand (\'&\'). For example: Input: \\"Adam,Brian,Chris,Danny\\" Output: \\"Brian&Chris\\" Input: \\"Emma,Frank,Gerry,Harry,Ivy,Jill\\" Output: \\"Harry&Ivy\\" Input: \\"Jake,Katie,Liam,Maya,Nina\\" Output: \\"Liam\\"","solution":"def middle_finisher(names: str) -> str: Returns the name(s) of the participant(s) who finished in the middle position(s). If the number of participants is odd, return the name of the middle finisher. If the number of participants is even, return a string with the two middle finishers concatenated together, separated by an ampersand (\'&\'). participants = names.split(\',\') n = len(participants) if n % 2 == 1: # Odd number of participants return participants[n // 2] else: # Even number of participants return participants[(n // 2) - 1] + \'&\' + participants[n // 2]"},{"question":"Description: Write a function that takes a list of integers and returns the longest consecutive subsequence. A consecutive subsequence is a sequence in which the elements are consecutive integers. Structure your solution to work efficiently with large arrays. Examples: Input `[100, 4, 200, 1, 3, 2]` --> Longest consecutive subsequence `[1, 2, 3, 4]`. Input `[9, 1, 8, 2, 3, 7, 6]` --> Longest consecutive subsequence `[1, 2, 3]`. Input `[0, -1, -2, 2, 1, 5]` --> Longest consecutive subsequence `[-2, -1, 0, 1, 2]`. Note: If there are multiple subsequences with the same longest length, you can return any one of them.","solution":"def longest_consecutive_subsequence(nums): Returns the longest consecutive subsequence from the list of integers. :param nums: List of integers :return: List of integers representing the longest consecutive subsequence if not nums: return [] nums_set = set(nums) longest_sequence = [] for num in nums: if num - 1 not in nums_set: # Start of a new sequence current_num = num current_sequence = [] while current_num in nums_set: current_sequence.append(current_num) current_num += 1 if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"Given an array of integers nums and a target integer x, return the smallest length of a contiguous subarray whose sum is at least x. If there isn\'t one, return 0 instead. A contiguous subarray is a subarray where the elements are consecutive elements from the original array. Example 1: nums = [2, 3, 1, 2, 4, 3] x = 7 Return 2. The subarray [4, 3] has the minimal length. Example 2: nums = [1, 1, 1, 1, 1, 1, 1, 1] x = 11 Return 0. No subarray has a sum of at least 11. Note: If you have figured out the O(n) solution, try coding it up.","solution":"def min_subarray_len(nums, x): Find the minimal length of a contiguous subarray of which the sum is at least x. If such a subarray doesn\'t exist, return 0. n = len(nums) min_length = float(\\"inf\\") current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= x: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\\"inf\\") else 0"},{"question":"Ania has recently moved to a new city to start her new job. Ania loves to explore new routes to work every day. The city is represented as a grid of size MxN where M is the number of rows and N is the number of columns. Ania starts her journey from the top-left corner of the grid (position (0, 0)) and her office is located at the bottom-right corner (position (M-1, N-1)). Ania can only move right or down at any point in time. Given the dimensions of the grid, calculate the number of unique paths Ania can take to reach her office. -----Input:----- - First line will contain T, number of testcases. - Each testcase contains a single line of input, two integers M and N. -----Output:----- For each testcase, output in a single line the number of unique paths from the start to the destination. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ M, N ≤ 100 -----Sample Input:----- 2 3 2 2 2 -----Sample Output:----- 3 2","solution":"def unique_paths(M, N): Returns the number of unique paths from the top-left corner to the bottom-right corner in a MxN grid. dp = [[1] * N for _ in range(M)] for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[M-1][N-1] def process_testcases(T, testcases): results = [] for M, N in testcases: results.append(unique_paths(M, N)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) testcases = [tuple(map(int, line.split())) for line in lines[1:T+1]] return T, testcases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"# Task You are given a string `s` and an integer `k`. Transform the given string by shifting each character `k` positions forward in the alphabet. If the shifted character exceeds \'z\', it should wrap around to the beginning of the alphabet. Return the transformed string. Note: Assume all characters in the string are lowercase English letters. # Example For `s = \\"xyz\\", k = 2`, the result should be `\\"zab\\"`. The character \'x\' shifted by 2 positions becomes \'z\'. The character \'y\' shifted by 2 positions becomes \'a\'. The character \'z\' shifted by 2 positions becomes \'b\'. Hence the transformed string is `\\"zab\\"`. For `s = \\"abc\\", k = 1`, the result should be `\\"bcd\\"`. The character \'a\' shifted by 1 position becomes \'b\'. The character \'b\' shifted by 1 position becomes \'c\'. The character \'c\' shifted by 1 position becomes \'d\'. Hence the transformed string is `\\"bcd\\"`. # Input/Output - `[input]` string `s` a non-empty string containing lowercase English letters. - `[input]` integer `k` a non-negative integer - `[output]` string the transformed string after shifting each character `k` positions forward in the alphabet.","solution":"def shift_string(s, k): Shifts each character in the string `s` forward by `k` positions in the alphabet. Wraps around if the shift goes past \'z\'. :param s: str, a string of lowercase English letters :param k: int, non-negative integer :return: str, the transformed string shifted_string = \\"\\" for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) shifted_string += new_char return shifted_string"},{"question":"In a small town, there are n houses arranged in a row, numbered from 1 to n. Each house i has a certain amount of candy, c_i (1 ≤ c_i ≤ 100,000). During Halloween, a group of kids will visit these houses, starting from house 1 and moving to house n, collecting candies. However, the kids can only collect candies from each house if the number of candies in that house is greater than the number of candies they collected from the previous house. Determine the maximum total amount of candies the kids can collect by visiting the houses in order from 1 to n. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The next line contains n integers c_i (1 ≤ c_i ≤ 100,000) — the amount of candies in each house. -----Output----- Print the maximum total amount of candies the kids can collect. -----Example----- Input 5 1 2 3 2 5 Output 8 -----Note----- In the first sample, the kids can collect candies from house 1 (1 candy), house 2 (2 candies), and house 3 (3 candies), and house 5 (2 candies). Thus, the maximum total amount of candies collected is 1 + 2 + 3 + 2 = 8. Note that they cannot collect candies from house 4 since it has fewer candies than the maximum collected from previous houses.","solution":"def max_candies(n, candies): Returns the maximum total amount of candies the kids can collect. :param n: int, number of houses. :param candies: List[int], amount of candies in each house. :return: int, maximum total amount of candies. if n == 0: return 0 max_total = candies[0] prev_candies = candies[0] for i in range(1, n): if candies[i] > prev_candies: max_total += candies[i] prev_candies = candies[i] return max_total"},{"question":"Write a function `match_sequence(S, T)` that takes in two strings S and T and determines whether S can be formed by removing some characters from T without rearranging the order of the remaining characters. If S can be formed, return `True`, otherwise return `False`. For example: - `match_sequence(\\"ace\\", \\"abcde\\")` should return `True` because S can be formed as \\"a\\", \\"c\\", and \\"e\\" appear in order in T. - `match_sequence(\\"aec\\", \\"abcde\\")` should return `False` because even though \\"a\\", \\"e\\", and \\"c\\" appear in T, they are not in the correct order.","solution":"def match_sequence(S, T): Determines if string S can be formed by removing some characters from string T without rearranging the order of the remaining characters. Parameters: - S: string to be formed - T: source string Returns: - True if S can be formed, False otherwise it = iter(T) return all(char in it for char in S)"},{"question":"Write a function that accepts a string and returns the first non-repeated character in it. The function should return the character itself. If there are no non-repeated characters in the string, return `None`. The function should be case-sensitive, meaning \'A\' and \'a\' are considered different characters. For example: ```python first_non_repeated_char(\\"stress\\") -> \'t\' first_non_repeated_char(\\"teeter\\") -> \'r\' first_non_repeated_char(\\"aabbcc\\") -> None ```","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in the string s. If there are no non-repeated characters, returns None. The function is case-sensitive. char_count = {} # Count occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a function that takes a list of strings, where each string represents a range of pages in a book (e.g., \\"1-4\\" or \\"6-8\\"), and returns a list of individual page numbers without duplicates. ```python def list_pages(ranges): # Your code here pass # Example inputs and expected outputs: print(list_pages([\\"1-4\\", \\"6-8\\"])) # Output: [1, 2, 3, 4, 6, 7, 8] print(list_pages([\\"1-3\\", \\"2-5\\"])) # Output: [1, 2, 3, 4, 5] print(list_pages([\\"10-12\\", \\"11-13\\"])) # Output: [10, 11, 12, 13] ``` Good luck!","solution":"def list_pages(ranges): Takes a list of strings, where each string represents a range of pages in a book (e.g., \\"1-4\\" or \\"6-8\\"), and returns a list of individual page numbers without duplicates. pages = set() for r in ranges: start, end = map(int, r.split(\'-\')) pages.update(range(start, end+1)) return sorted(pages)"},{"question":"Given an array ```nums```, write a function to find the smallest window in ```nums````` that, when sorted, will result in the entire array being sorted. If the array is already sorted, return 0. Example 1: Input: ```[2, 6, 4, 8, 10, 9, 15]``` Output: 5 Explanation: You need to sort the subarray ```[6, 4, 8, 10, 9]``` to make the entire array sorted. Example 2: Input: ```[1, 2, 3, 4]``` Output: 0 Explanation: The array is already sorted. Example 3: Input: ```[1, 3, 2, 2, 2]``` Output: 4 Explanation: You need to sort the subarray ```[3, 2, 2, 2]``` to make the entire array sorted. The function signature can be ```def findUnsortedSubarray(nums: List[int]) -> int:```.","solution":"from typing import List def findUnsortedSubarray(nums: List[int]) -> int: if not nums: return 0 sorted_nums = sorted(nums) start, end = 0, len(nums) - 1 while start < len(nums) and nums[start] == sorted_nums[start]: start += 1 while end > start and nums[end] == sorted_nums[end]: end -= 1 return end - start + 1 if start != len(nums) else 0"},{"question":"You need to implement a function that parses and interprets commands embedded in a string. The string consists of multiple sections, divided by colons, where each section represents a sub-command of the overall instruction. Your task is to process each section individually and combine the results as specified. Here is how the structure of the input string looks: ``` Header:Command1:Command2:...:CommandN:Footer ``` Each sub-command has a specific format: ``` <3-letter-operation><value> ``` Here are the operations you need to handle: 1. ADD - Adds the given value to the current accumulator. 2. SUB - Subtracts the given value from the current accumulator. 3. MUL - Multiplies the current accumulator by the given value. 4. DIV - Divides the current accumulator by the given value (integer division). The accumulator starts at 0. The Header and Footer are constant string identifiers \\"**BEGIN**\\" and \\"**END**\\" respectively, and should be returned as part of the final formatted response. # Example: If you receive the following string: ``` \\"BEGIN:ADD5:SUB2:MUL3:DIV6:END\\" ``` You should process each command starting with the initial accumulator of 0: 1. ADD5 -> 0 + 5 = 5 2. SUB2 -> 5 - 2 = 3 3. MUL3 -> 3 * 3 = 9 4. DIV6 -> 9 // 6 = 1 The result of processing these commands is 1. Therefore, your final output should be formatted as: ``` \\"BEGIN:RESULT1:END\\" ``` If the final value of the accumulator is negative, it should be converted to 0. If any command results in a division by zero, the output should halt processing and return: ``` \\"BEGIN:ERROR_DIV_BY_ZERO:END\\" ``` Write a function `process_commands(command_string: str) -> str` that takes the input string and returns the formatted result string. # Constraints: - The input string is guaranteed to start with \\"BEGIN:\\" and end with \\":END\\". - Valid operations are ADD, SUB, MUL, and DIV followed by a non-negative integer. - The accumulator will never exceed the bounds of a 32-bit signed integer during operation. Implement your solution in Python.","solution":"def process_commands(command_string: str) -> str: parts = command_string.split(\\":\\") header = parts[0] footer = parts[-1] if header != \\"BEGIN\\" or footer != \\"END\\": return \\"BEGIN:ERROR_INVALID_FORMAT:END\\" accumulator = 0 for part in parts[1:-1]: operation = part[:3] value = int(part[3:]) if operation == \\"ADD\\": accumulator += value elif operation == \\"SUB\\": accumulator -= value elif operation == \\"MUL\\": accumulator *= value elif operation == \\"DIV\\": if value == 0: return \\"BEGIN:ERROR_DIV_BY_ZERO:END\\" accumulator //= value else: return \\"BEGIN:ERROR_INVALID_OPERATION:END\\" accumulator = max(accumulator, 0) return f\\"{header}:RESULT{accumulator}:{footer}\\""},{"question":"You are helping a friend, Maria, organize her book collection. She has n books, each with a unique ISBN number. Maria wants to be able to find and categorize her books quickly, so she needs your help to sort them in increasing order of their ISBN numbers. Since Maria\'s collection is large, she needs the sorting to be efficient. Your task is to write a program that will read the ISBN numbers of Maria\'s books, sort them in ascending order, and print the sorted list. -----Input:----- The first line of input contains a single integer T , i.e number of test cases per file. The first line of each test case contains a single integer n - the number of books (1 leq n leq 10^5). The second line of each test case contains n integers representing the ISBN numbers of the books, separated by spaces. Each ISBN number is guaranteed to be unique and non-negative. -----Output:----- For each test case, print the sorted list of ISBN numbers in a single line, separated by spaces. -----Constraints:----- - 1 leq T leq 10 - 1 leq n leq 10^5 - 0 leq text{ISBN} < 10^9 -----Sample Input:----- 2 5 9780345391803 9780261103573 9780316769174 9780261102217 9780544003415 4 9780451524935 9780140283334 9780385472579 9780679783275 -----Sample Output:----- 9780261102217 9780261103573 9780316769174 9780345391803 9780544003415 9780140283334 9780385472579 9780451524935 9780679783275 -----EXPLANATION:----- In the first test case, the ISBN numbers are sorted in ascending order. The same operation is repeated for the second test case. The sorting should be efficient to handle up to 10^5 ISBN numbers within each test case.","solution":"def sort_isbn(test_cases): Sorts list of ISBNs for each test case in ascending order. Parameters: test_cases: List of tuples [(n, isbn_list), ...] n - number of books isbn_list - list of ISBN numbers Returns: List of sorted ISBN lists corresponding to each test case. result = [] for n, isbn_list in test_cases: sorted_list = sorted(isbn_list) result.append(sorted_list) return result def parse_input(input_str): Parses input string and returns list of test cases. Parameters: input_str: str Input string containing the number of test cases followed by each test case data Returns: List of tuples [(n, isbn_list), ...] lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) isbn_list = list(map(int, lines[index + 1].split())) test_cases.append((n, isbn_list)) index += 2 return test_cases def output_result(sorted_lists): Formats the sorted lists into an output string. Parameters: sorted_lists: List of sorted ISBN lists Returns: str output_lines = [] for sorted_list in sorted_lists: output_lines.append(\\" \\".join(map(str, sorted_list))) return \\"n\\".join(output_lines) # Example usage: input_str = 2 5 9780345391803 9780261103573 9780316769174 9780261102217 9780544003415 4 9780451524935 9780140283334 9780385472579 9780679783275 test_cases = parse_input(input_str) sorted_isbns = sort_isbn(test_cases) print(output_result(sorted_isbns))"},{"question":"Given a string `s`, find the length of the longest substring without repeating characters. For example, given s = \\"abcabcbb\\", the answer is \\"abc\\", which the length is 3; for s = \\"bbbbb\\", the answer is \\"b\\", with the length of 1; and for s = \\"pwwkew\\", the answer is \\"wke\\", with the length of 3. Note: Your answer must be the length of the substring, not the substring itself. Credits:Special thanks to @blueware Implement a function to perform division without using the division operator. Given two integers `dividend` and `divisor`, return the quotient after dividing `dividend` by `divisor`. For example, given dividend = 10 and divisor = 3, return 3. Given dividend = 7 and divisor = -3, return -2. Given dividend = 0 and divisor = 1, return 0. Note: 1. Both dividend and divisor are integers, where the divisor is non-zero. 2. The result should truncate toward zero, meaning it should be the largest integer less than or equal to the result.","solution":"def divide(dividend, divisor): Perform division without using the division operator. Returns the quotient after dividing `dividend` by `divisor`. if divisor == 0: raise ValueError(\\"Divisor cannot be zero\\") # Determine the sign of the quotient sign = -1 if (dividend < 0) ^ (divisor < 0) else 1 # Work with absolute values to determine the quotient dividend, divisor = abs(dividend), abs(divisor) quotient = 0 while dividend >= divisor: temp, multiple = divisor, 1 while dividend >= (temp << 1): temp <<= 1 multiple <<= 1 dividend -= temp quotient += multiple return sign * quotient"},{"question":"Write a function `transpose_matrix` that takes a 2D matrix (a list of lists) as input and returns its transpose. The transpose of a matrix is obtained by swapping the rows and columns. For example, if matrix `A` is of size `m x n`, its transpose `A^T` will be of size `n x m`. Write your function in a way that it can handle any size of the input matrix, including edge cases such as an empty matrix. **Examples:** - For the input matrix `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`, the function should return `[[1, 4, 7], [2, 5, 8], [3, 6, 9]]`. - For the input matrix `[[1, 2], [3, 4], [5, 6]]`, the function should return `[[1, 3, 5], [2, 4, 6]]`. - For the input matrix `[[1]]`, the function should return `[[1]]`. - For the input matrix `[]`, the function should return `[]`.","solution":"def transpose_matrix(matrix): Returns the transpose of the given 2D matrix. :param matrix: List[List[int]] - The input matrix to be transposed :return: List[List[int]] - The transposed matrix if not matrix: return [] rows, cols = len(matrix), len(matrix[0]) transposed = [] for c in range(cols): new_row = [] for r in range(rows): new_row.append(matrix[r][c]) transposed.append(new_row) return transposed"},{"question":"In a bustling city, there are N parking lots arranged in a straight line. Each parking lot has a certain number of free parking spaces which is recorded in an array `spaces` of length N. A carwash service wants to set up shop in one of these parking lots and needs at least K free spaces. Help the carwash service determine in how many different parking lots it can set up shop. -----Input----- The first line contains a single positive integer T <= 100, the number of test cases. T test cases follow. The first line of each test case contains two integers N and K, where 1 <= N <= 1000 and 0 <= K <= 1000. The second line of each test case contains N integers separated by spaces, representing the number of free spaces in each parking lot. -----Output----- For each test case, output a single line containing the number of parking lots with at least K free spaces. -----Example----- Input: 2 5 3 1 2 3 4 5 4 1 0 1 2 3 Output: 3 3","solution":"def carwash_parking_lots(T, test_cases): Determines the number of parking lots with at least K free parking spaces for all test cases. Args: T: int : number of test cases test_cases: list of tuples : each tuple contains two elements, (N, K, spaces) where N is the number of parking lots, K is the minimum required spaces, and spaces is a list of free spaces in each lot. Returns: result: list : list of integers, where each integer represents the number of parking lots with at least K free spaces. results = [] for i in range(T): N, K, spaces = test_cases[i] count = sum(1 for space in spaces if space >= K) results.append(count) return results"},{"question":"The library cataloging system needs a way to categorize books based on their unique identifiers. Each book has a unique identifier code, which is a string of alphanumeric characters. Your task is to write a function that determines if a given set of identifiers is unique. -----Input:----- - The first line contains N, the number of book identifiers. - The next N lines each contain one book identifier string. -----Output:----- - Print \\"YES\\" if all book identifier strings are unique. - Print \\"NO\\" if there is at least one duplicate book identifier string. -----Constraints----- - 1 leq N leq 1000 - The length of each identifier string is between 1 and 100 characters, inclusive. - Each identifier string consists only of uppercase letters, lowercase letters, and digits. -----Sample Input:----- 4 B1NJK2 A2B3K9 B1NJK2 Z7Y8X6 -----Sample Output:----- NO -----Sample Input:----- 3 MA5KDL Y6MN8T D3F4G7 -----Sample Output:----- YES -----EXPLANATION:----- In the first sample input, the identifier \\"B1NJK2\\" is repeated, so the output is \\"NO\\". In the second sample input, all identifiers are unique, so the output is \\"YES\\".","solution":"def are_identifiers_unique(N, identifiers): Determines if the given set of book identifiers is unique. Parameters: N (int): the number of book identifiers. identifiers (list of str): the list of book identifier strings. Returns: str: \\"YES\\" if all identifiers are unique, otherwise \\"NO\\". unique_identifiers = set(identifiers) if len(unique_identifiers) == N: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a list of integers, determine whether the list contains any duplicates. Implement the function `contains_duplicates(nums: List[int]) -> bool` which returns `True` if there are any duplicate integers in the list and `False` otherwise. You should aim for a solution with optimal time complexity. # Example ``` contains_duplicates([1, 2, 3, 4, 5]) => False contains_duplicates([1, 2, 3, 2, 5]) => True ``` # Constraints - The input list `nums` will have at most length `10^6`. - Each integer in the list `nums` will be between `-10^9` and `10^9`.","solution":"from typing import List def contains_duplicates(nums: List[int]) -> bool: Returns True if there are any duplicates in the list, otherwise returns False. seen = set() for num in nums: if num in seen: return True seen.add(num) return False"},{"question":"# Topic: Dynamic Programming - Longest Increasing Subsequence Given an array of integers, find the length of the longest increasing subsequence (LIS). A subsequence is derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. For example, in the array `[10, 9, 2, 5, 3, 7, 101, 18]`, the longest increasing subsequence is `[2, 3, 7, 18]`, which has a length of 4. Implement the function `longest_increasing_subsequence` that takes an array of integers as the input and returns the length of the longest increasing subsequence. ___ # Function Signature ```python def longest_increasing_subsequence(arr: list[int]) -> int: ``` # Input - `arr`: A list of integers, where `1 <= len(arr) <= 2500` and `-10^4 <= arr[i] <= 10^4`. # Output - Return the length of the longest increasing subsequence as an integer. ___ # Example ```python arr = [10, 9, 2, 5, 3, 7, 101, 18] assert longest_increasing_subsequence(arr) == 4 arr = [0, 1, 0, 3, 2, 3] assert longest_increasing_subsequence(arr) == 4 arr = [7, 7, 7, 7, 7, 7, 7] assert longest_increasing_subsequence(arr) == 1 ``` # Constraints - You should aim for an efficient solution with a time complexity of `O(n^2)` or better `O(n log n)`. - The function should handle edge cases gracefully.","solution":"def longest_increasing_subsequence(arr: list[int]) -> int: if not arr: return 0 n = len(arr) # dp array to store the length of LIS ending at each index dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function that takes an array of integers and returns a new array containing only the prime numbers from the original array, in the same order.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(arr): Returns a new array containing only the prime numbers from the original array. return [x for x in arr if is_prime(x)]"},{"question":"Write a function that takes a list of integers and returns a new list with the squares of each number, preserving the original order of the numbers, but only if the original number is even. ```python even_squares([1, 2, 3, 4, 5, 6]) == [4, 16, 36] even_squares([11, 22, 33, 44, 55]) == [484, 1936] even_squares([13, 15, 17]) == [] even_squares([10, -4, 13, 0]) == [100, 16, 0] ``` Consider edge cases, such as negative and zero values. Only even numbers should be squared and included in the output list.","solution":"def even_squares(numbers): Returns a new list containing the squares of even numbers from the input list. Args: numbers (list): A list of integers. Returns: list: A list containing the squares of all even integers from the input list. return [x**2 for x in numbers if x % 2 == 0]"},{"question":"Write a function that takes an array of numbers as input and returns a new array containing only the elements that are strictly greater than the average of the original array. For example, given the array `[1, 2, 3, 4, 5]`, the output should be `[4, 5]` since the average is `3`. If the array is `[10, 20, 30, 40, 50, 60]`, the output should be `[40, 50, 60]` since the average is `35`.","solution":"def elements_greater_than_average(arr): if len(arr) == 0: return [] avg = sum(arr) / len(arr) return [x for x in arr if x > avg]"},{"question":"Write a function that takes a list of integers and returns the length of the longest subsequence where the elements are in increasing order. A subsequence is derived by deleting some or no elements of the original list without changing the order of the remaining elements. Examples: input: [10, 9, 2, 5, 3, 7, 101, 18] output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], and the length is 4. input: [3, 10, 2, 1, 20] output: 3 Explanation: The longest increasing subsequence is [3, 10, 20], and the length is 3. input: [3, 2] output: 1 Explanation: The longest increasing subsequence is [3] or [2], and the length is 1. Note: - The function should handle lists with up to 2500 elements efficiently. - The values in the list will be in the range -10^9 to 10^9.","solution":"def length_of_lis(nums): if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string `s` which consists of lowercase letters and you are also given an integer `k`. Your task is to determine if the string can be decomposed into exactly `k` non-empty substrings such that each substring is a palindrome. A palindrome is a string that reads the same forward as backward. Return `true` if the string can be decomposed into exactly `k` parts that are all palindromes, otherwise, return `false`. # Examples: Example 1: Input: `s = \\"abacdcaba\\"`, `k = 3` Output: `true` Explanation: The string can be partitioned as [\\"aba\\", \\"cdc\\", \\"aba\\"], all of which are palindromes. Example 2: Input: `s = \\"abc\\"`, `k = 2` Output: `false` Explanation: There\'s no way to partition the string into exactly 2 palindromic substrings. Example 3: Input: `s = \\"aabb\\"`, `k = 4` Output: `true` Explanation: The string can be partitioned as [\\"a\\", \\"a\\", \\"b\\", \\"b\\"], all of which are palindromes. # Constraints: - `1 <= s.length <= 10^5` - `s` consists only of lowercase English letters. - `1 <= k <= s.length`","solution":"def can_partition_into_k_palindromes(s: str, k: int) -> bool: def is_palindrome(sub): return sub == sub[::-1] n = len(s) if k > n: return False # Minimum `k` is at most `count of characters - 1` changes are required # because each distinct change can create a new partition. dp = [[False] * (k + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(1, k + 1): for l in range(j-1, i): if dp[l][j-1] and is_palindrome(s[l:i]): dp[i][j] = True break return dp[n][k]"},{"question":"Create a function that takes a string containing a mathematical expression as an input and returns the result as an integer. The input string will only contain non-negative integers, addition, and multiplication operations, without any spaces. The input string will follow the usual operator precedence rules, i.e., multiplication before addition. Example: Input: \\"2+3*4\\" Output: 14 Input: \\"10+2*6+3\\" Output: 25 Input: \\"3+3*3*3+1\\" Output: 31 Note: You are not allowed to use built-in functions like `eval` to directly evaluate the expression. Write the function from scratch, considering the order of operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, addition (+) and multiplication (*) operations, following the usual arithmetic rules of precedence. Args: - expression (str): The mathematical expression in string format. Returns: - int: The result of the evaluated expression. def tokenize(expr): tokens = [] num = 0 for ch in expr: if ch.isdigit(): num = num * 10 + int(ch) else: tokens.append(num) tokens.append(ch) num = 0 tokens.append(num) return tokens def parse_term(tokens): term = tokens.pop(0) while tokens and tokens[0] == \'*\': tokens.pop(0) # Remove \'*\' term *= tokens.pop(0) return term tokens = tokenize(expression) result = 0 while tokens: term = parse_term(tokens) result += term if tokens and tokens[0] == \'+\': tokens.pop(0) # Remove \'+\' return result"},{"question":"Create a function `find_repeating_element(arr)` which takes an array of integers `arr` as input and returns the first repeating element in the array. If no element repeats, return `None`. The array can contain positive and negative integers, and may have zero. The function must have a time complexity of O(n). Examples: ```python find_repeating_element([3, 5, -2, 3, 7, 1]) == 3 find_repeating_element([1, 2, 3, 4, 5]) == None find_repeating_element([4, 5, 6, 7, 4, 8, 9]) == 4 find_repeating_element([0, -1, 2, -3, 4, -1, 5]) == -1 ``` Note: - You should iterate through the array at most once. - The use of additional data structures such as sets or dictionaries is allowed.","solution":"def find_repeating_element(arr): Returns the first repeating element in the array. If no element repeats, returns None. Parameters: arr (list of int): The input array. Returns: int or None: The first repeating element or None if no element repeats. seen = set() for number in arr: if number in seen: return number seen.add(number) return None"},{"question":"A supermarket manager needs to restock a shelf with products. The shelf can hold up to a specific weight, and the manager wants to maximize the total weight of the products on the shelf without exceeding the shelf\'s capacity. Given the weights of different products, determine the maximum total weight that can be placed on the shelf. -----Input----- The first line of the input contains a single integer W, the maximum weight the shelf can hold. The second line contains n space-separated integers representing the weights of the products. -----Output----- Print the maximum total weight that can be placed on the shelf without exceeding the capacity W. -----Constraints----- - 1 ≤ W ≤ 2000 - 1 ≤ n ≤ 100 - 1 ≤ weight of each product ≤ 100 -----Example----- Input: 50 10 20 30 40 50 60 Output: 50 -----Explanation----- The best way to maximize the total weight on the shelf without exceeding the capacity is to choose the product with weight 50. Hence, the output is 50.","solution":"def max_total_weight(W, weights): Determine the maximum total weight that can be placed on the shelf without exceeding the capacity W. Args: W (int): Maximum weight the shelf can hold. weights (list of int): List of weights of the products. Returns: int: Maximum total weight that can be placed on the shelf without exceeding W. num_items = len(weights) dp = [0] * (W + 1) for weight in weights: for current_capacity in range(W, weight-1, -1): dp[current_capacity] = max(dp[current_capacity], dp[current_capacity - weight] + weight) return dp[W]"},{"question":"You are given an array of n integers and an integer k. Your task is to count the number of distinct pairs (a, b) in the array such that a + b = k. A pair (a, b) is considered distinct from (b, a) if a neq b. - Note 1: Each element of the array can participate in multiple pairs. - Note 2: The array may contain duplicate values. -----Input----- The first line contains a positive integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the size of the array and the target sum. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, output the number of distinct pairs in the array such that their sum is equal to k. -----Example----- Input 3 5 10 1 2 3 7 8 4 4 1 2 3 3 6 0 -1 1 -1 1 2 -2 Output 2 1 3 -----Note----- For the first test case: The array is [1, 2, 3, 7, 8] and the target sum is 10. The pairs (3, 7) and (2, 8) sum to 10. Therefore, the answer is 2. For the second test case: The array is [1, 2, 3, 3] and the target sum is 4. The pair (1, 3) and (3, 1) are considered the same since we only consider distinct pairs. Therefore, the answer is 1. For the third test case: The array is [-1, 1, -1, 1, 2, -2] and the target sum is 0. The distinct pairs are (-1, 1), (-1, 1), (2, -2), which sum to 0. Therefore, the answer is 3.","solution":"def count_pairs(n, k, arr): Count the number of distinct pairs (a, b) in the array such that a + b = k. Parameters: n (int): Size of the array k (int): Target sum arr (list of int): Array of integers Returns: int: Number of distinct pairs seen = {} count = 0 for num in arr: target = k - num if target in seen and seen[target] > 0: count += 1 seen[target] -= 1 else: if num in seen: seen[num] += 1 else: seen[num] = 1 return count def solve(test_cases): Solve multiple test cases of the count_pairs function. Parameters: test_cases (list of tuples): Each tuple contains (n, k, arr) for a test case Returns: list of int: List of results for each test case results = [] for n, k, arr in test_cases: results.append(count_pairs(n, k, arr)) return results"},{"question":"There are N towns connected by M bidirectional roads. Each road has a specific length and a color. A town mayor wants to ensure that the roads in the town form a connected graph where no two roads of the same color meet at the same town. You need to help the mayor determine the maximum length of any colored road that does not result in a town having roads of the same color meeting at it. -----Constraints----- - All input values are integers. - 2 ≤ N ≤ 10^3 - 1 ≤ M ≤ 2×10^4 - 1 ≤ Length of any road ≤ 10^9 - 1 ≤ Color of any road ≤ 100 -----Input----- The input is given from Standard Input in the following format: N M U1 V1 L1 C1 U2 V2 L2 C2 : UM VM LM CM Each of the next M lines contains four integers Ui, Vi, Li, and Ci, indicating that there\'s a road between towns Ui and Vi with length Li and color Ci. -----Output----- Print the maximum length of any colored road that does not result in a town having roads of the same color meeting at it. -----Sample Input----- 4 5 1 2 4 1 1 3 3 2 2 4 2 1 3 4 5 1 1 4 8 2 -----Sample Output----- 8 The maximum length of any colored road while ensuring no two roads of the same color meet at any town is 8, and it is the road from town 1 to town 4 with color 2.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 return root_u != root_v def max_road_length(n, m, roads): roads.sort(key=lambda x: -x[2]) # Sort roads by length in descending order color_used = [{} for _ in range(n)] # Track used colors at each town uf = UnionFind(n) for u, v, l, c in roads: u -= 1 v -= 1 if uf.find(u) != uf.find(v): if c not in color_used[u] and c not in color_used[v]: uf.union(u, v) color_used[u][c] = True color_used[v][c] = True return l return -1 # This line should theoretically never be reached def maximum_non_conflicting_road_length(n, m, edges): return max_road_length(n, m, edges)"},{"question":"Given a string of integers, your task is to determine if the string represents an arithmetic progression. _____________________________________________________________ Rules: 1. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. 2. The input string can have any number of integers, but for this task, we will assume a minimum of 3 integers. 3. If the sequence is an arithmetic progression, return the difference as a string. 4. If it is not an arithmetic progression, return \\"Not an arithmetic progression\\". _______________________________________________________________ Input: A string of integers separated by whitespace, e.g. \'3 5 7 9 11\' Output: String message: the difference (e.g. \'2\') or \'Not an arithmetic progression\'.","solution":"def is_arithmetic_progression(s): Evaluates if a string of integers represents an arithmetic progression. Parameters: s (str): a string containing integers separated by spaces Returns: str: the common difference if it is an arithmetic progression, otherwise \'Not an arithmetic progression\'. numbers = list(map(int, s.split())) if len(numbers) < 3: return \\"Not an arithmetic progression\\" difference = numbers[1] - numbers[0] for i in range(2, len(numbers)): if numbers[i] - numbers[i-1] != difference: return \\"Not an arithmetic progression\\" return str(difference)"},{"question":"You are given a list of integers where each integer represents a duration in minutes. Write a function that takes this list and returns the total duration in the format \\"X hours Y minutes\\". For example: ```python def total_duration(durations): # Your code here # Sample Inputs: # durations = [30, 45, 120, 180, 15] # return: \\"6 hours 30 minutes\\" # durations = [60, 75, 80] # return: \\"3 hours 55 minutes\\" ```","solution":"def total_duration(durations): Takes a list of integers representing durations in minutes and returns the total duration in the format \\"X hours Y minutes\\". total_minutes = sum(durations) hours = total_minutes // 60 minutes = total_minutes % 60 return f\\"{hours} hours {minutes} minutes\\""},{"question":"Given a matrix of integers, determine if it is a Toeplitz matrix. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements. --- Example: -------- ``` Example matrix: [ [1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1] ] Correct output: True ``` Example: -------- ``` Example matrix: [ [1, 2, 3, 4], [5, 1, 9, 3], [6, 5, 1, 2], [7, 6, 5, 9] ] Correct output: False ``` --- Constraints: - The matrix is not empty and its size does not exceed 200x200. - Each element in the matrix is an integer.","solution":"def is_toeplitz_matrix(matrix): Determine if a given matrix is a Toeplitz matrix. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements. rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"For an array of integers A, a subarray is a contiguous part of the array. Let the sum of a subarray B be defined as sum(B). A subarray B is said to be a harmonic subarray if sum(B) times text{length}(B) is a prime number. You are given the task to determine how many harmonic subarrays there are in a given integer array. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines: - The first line contains an integer N, the number of elements in array A. - The second line contains N space-separated integers which represent the elements of A. -----Output:----- For each testcase, output in a single line the number of harmonic subarrays. -----Constraints----- - 1 leq T leq 5 - 1 leq N leq 500 - 1 leq text{elements of } A leq 10^3 -----Sample Input:----- 2 3 2 3 1 4 2 5 4 7 -----Sample Output:----- 2 3 -----Explanation:----- - Testcase 1: The subarrays of [2, 3, 1] are [2], [3], [1], [2, 3], [3, 1], [2, 3, 1]. Among these: - [2]: sum([2]) * length([2]) = 2 * 1 = 2 (not prime) - [3]: sum([3]) * length([3]) = 3 * 1 = 3 (prime) - [1]: sum([1]) * length([1]) = 1 * 1 = 1 (not prime) - [2, 3]: sum([2, 3]) * length([2, 3]) = 5 * 2 = 10 (not prime) - [3, 1]: sum([3, 1]) * length([3, 1]) = 4 * 2 = 8 (not prime) - [2, 3, 1]: sum([2, 3, 1]) * length([2, 3, 1]) = 6 * 3 = 18 (not prime) Only the subarrays [3] and [1] yield a prime number, so the output is 2. - Testcase 2: The subarrays of [2, 5, 4, 7] are [2], [5], [4], [7], [2, 5], [5, 4], [4, 7], [2, 5, 4], [5, 4, 7], [2, 5, 4, 7]. Among these, [5], [7], and [5, 4] result in prime numbers. Therefore, the output is 3.","solution":"def is_prime(num): Determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def count_harmonic_subarrays(N, A): Count the number of harmonic subarrays. count = 0 # Check all possible subarrays for start in range(N): subarray_sum = 0 for end in range(start, N): subarray_sum += A[end] subarray_len = end - start + 1 if is_prime(subarray_sum * subarray_len): count += 1 return count def solve(test_cases): results = [] for case in test_cases: N, A = case results.append(count_harmonic_subarrays(N, A)) return results # Wrapper function to parse input and call the solve function def harmonic_subarrays(T, cases): parsed_cases = [(int(cases[i][0]), list(map(int, cases[i][1].split()))) for i in range(T)] return solve(parsed_cases)"},{"question":"Story In recent years, the concept of palindromes has gained immense popularity in the world of computer science, particularly in string manipulation problems. A **palindrome** is a string that reads the same forward and backward, such as \\"madam\\" or \\"racecar.\\" It is a concept known and studied for its interesting properties and simplicity. Finding the longest palindromic substring within a given string is a classic problem that provides insight into various string manipulation techniques and algorithms. Named after this, the problem challenges you to find the largest segment of a string that is a palindrome. Exercise Your task is to write a function `longest_palindrome_substring(s)` that takes a single input, `s`, which is a string, and returns the longest palindromic substring found within `s`. If there are multiple longest palindromic substrings, return the one which appears first. # Guidelines 1. Your function should handle at most a string length of 1000 characters. 2. The input string will consist of lowercase English letters only. 3. The palindrome check is case insensitive. 4. If the input string is empty, return an empty string. # Example ```python longest_palindrome_substring(\\"babad\\") # returns \\"bab\\" or \\"aba\\" longest_palindrome_substring(\\"cbbd\\") # returns \\"bb\\" longest_palindrome_substring(\\"a\\") # returns \\"a\\" longest_palindrome_substring(\\"ac\\") # returns \\"a\\" or \\"c\\" ``` # Note To solve the problem efficiently, you may need to look into dynamic programming or other advanced techniques that handle the problem within a reasonable time complexity. Simple brute force might not be efficient enough for larger inputs. Good luck and happy coding!","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) start, max_length = 0, 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return s[start:start + max_length]"},{"question":"Filtering Even Numbers You are given a list of integers. Your task is to write a function that takes this list and returns a new list containing only the even numbers from the original list. Example input: ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Example output: ```python [2, 4, 6, 8, 10] ``` Function Signature: ```python def filter_even_numbers(lst: List[int]) -> List[int]: pass ```","solution":"from typing import List def filter_even_numbers(lst: List[int]) -> List[int]: Returns a new list containing only the even numbers from the original list. :param lst: List of integers :return: List of even integers return [num for num in lst if num % 2 == 0]"},{"question":"Calculate Inversions Given an array of integers, an inversion occurs if for any indices `i` and `j` (1 ≤ i < j ≤ N), `arr[i]` > `arr[j]`. Your task is to count the number of inversions in a given array. -----Input:----- The first line of the input contains a single integer `T`, the number of test cases. Each test case consists of two lines: - The first line contains a single integer `N`, the size of the array. - The second line contains `N` integers separated by spaces, representing the elements of the array. -----Output:----- For each test case, output a single integer denoting the number of inversions in the array. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -----Example:----- Input: 2 5 2 4 1 3 5 3 3 1 2 Output: 3 2 Explanation: Case 1: Inversions are (2,1), (4,1), (4,3). Case 2: Inversions are (3,1), (3,2).","solution":"def merge_and_count(arr, temp_arr, left, right): if left >= right: return 0 mid = (left + right) // 2 inv_count = merge_and_count(arr, temp_arr, left, mid) inv_count += merge_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_merge(arr, temp_arr, left, mid, right) return inv_count def merge_and_merge(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def count_inversions(arr): n = len(arr) temp_arr = [0] * n return merge_and_count(arr, temp_arr, 0, n - 1) def solve_inversions(num_cases, test_cases): results = [] for case in test_cases: n, arr = case inv_count = count_inversions(arr) results.append(inv_count) return results"},{"question":"Write a function that takes an integer `n` as input and returns the total number of trailing zeroes in the factorial of `n`. Trailing zeroes are a sequence of consecutive zeros at the end of a number. You should consider the mathematical properties of factorials and the fact that trailing zeroes are created by factors of 10, which are produced from the combination of factors 2 and 5. Given that there are generally more factors of 2 than 5, focus on counting the number of factors of 5 in the factorial of `n`. Example: - Input: `n = 5` - Output: `1` (5! = 120, which has 1 trailing zero) - Input: `n = 100` - Output: `24` (100! has 24 trailing zeroes)","solution":"def trailing_zeroes(n): Returns the number of trailing zeroes in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Task Write a function that counts the occurrences of each word length in a given string. The function should take a string as input and return a dictionary where the keys are word lengths and the values are the counts of words with those lengths. # Guidelines 1. Words are defined as sequences of characters separated by spaces. 2. Punctuation marks attached to words should not be counted as part of the word length. 3. The input string will contain only alphabetical characters, spaces, and punctuation marks (.,!?). # Constraints - The input string will have at most 1000 characters. # Examples ```python \\"Hello world!\\" --> {5: 1, 5: 1} \\"This is a test sentence.\\" --> {4: 1, 2: 1, 1: 1, 4: 1, 8: 1} \\"Python is amazing.\\" --> {6: 1, 2: 1, 7: 1} ```","solution":"import string def count_word_lengths(text): Counts the occurrences of each word length in a given text string. Parameters: text (str): The input string. Returns: dict: A dictionary where keys are word lengths and values are the counts of words with those lengths. # Remove punctuation from the text translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_text = text.translate(translator) # Split the text into words words = cleaned_text.split() # Create a dictionary to store the occurrences of each word length word_length_counts = {} # Iterate over each word in the list for word in words: length = len(word) if length in word_length_counts: word_length_counts[length] += 1 else: word_length_counts[length] = 1 return word_length_counts"},{"question":"A product manager has a checklist of tasks to complete when preparing a software release. Each task is assigned a time in minutes that it should take to complete. Given a list of task times and a maximum number of minutes he can allocate for these tasks, write a function that determines the maximum number of tasks he can complete without exceeding the given time limit. -----Input:----- - First line will contain two integers N (number of tasks) and M (maximum time available). - Second line will contain N space-separated integers representing the time required for each task. -----Output:----- Print the maximum number of tasks that can be completed within the given time limit in a single line. -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 10^5 - 1 leq text{time}_i leq 10000, where text{time}_i represents the time required to complete the i-th task. -----Sample Input:----- 5 50 10 20 30 40 50 -----Sample Output:----- 2 -----EXPLANATION:----- The maximum number of tasks that can be completed without exceeding the 50 minutes limit is 2 (tasks with times 10 and 20).","solution":"def max_tasks(N, M, task_times): Determines the maximum number of tasks that can be completed without exceeding the time limit. :param N: number of tasks :param M: maximum time available :param task_times: list of integers representing the time required for each task :return: maximum number of tasks that can be completed without exceeding the time limit task_times.sort() total_time = 0 count = 0 for time in task_times: if total_time + time <= M: total_time += time count += 1 else: break return count"},{"question":"A team of biologists is working on a project to identify and classify DNA sequences. They decide to develop a small utility to help them convert DNA sequences into corresponding RNA sequences and to validate DNA sequences for any invalid characters. DNA sequences are composed of the bases \'A\', \'C\', \'G\', and \'T\'. RNA sequences replace the base \'T\' with \'U\'. Write two functions: # Function 1: ```python dna_to_rna(dna_sequence) ``` This function should take a single string `dna_sequence` representing a DNA sequence and return a corresponding RNA sequence by replacing all occurrences of \'T\' with \'U\'. If `dna_sequence` contains invalid characters, return `None`. # Function 2: ```python validate_dna(dna_sequence) ``` This function should take a single string `dna_sequence` representing a DNA sequence and return `True` if the sequence contains only valid characters (\'A\', \'C\', \'G\', \'T\'), and `False` otherwise. # Example Usage: ```python dna_sequence = \\"ACGTACGT\\" # RNA sequence should be: \\"ACGUACGU\\" print(dna_to_rna(dna_sequence)) # Output: \\"ACGUACGU\\" dna_sequence = \\"ACGTACGTX\\" # Since the sequence contains an invalid character (X), the function should return None print(dna_to_rna(dna_sequence)) # Output: None print(validate_dna(dna_sequence)) # Output: False dna_sequence = \\"ACGTACGT\\" # The sequence contains only valid characters print(validate_dna(dna_sequence)) # Output: True ```","solution":"def dna_to_rna(dna_sequence): Converts a DNA sequence to an RNA sequence by replacing all occurrences of \'T\' with \'U\'. If the DNA sequence contains invalid characters, returns None. valid_bases = {\'A\', \'C\', \'G\', \'T\'} if not validate_dna(dna_sequence): return None return dna_sequence.replace(\'T\', \'U\') def validate_dna(dna_sequence): Validates a DNA sequence to ensure it contains only \'A\', \'C\', \'G\', and \'T\' characters. Returns True if the sequence is valid, otherwise False. valid_bases = {\'A\', \'C\', \'G\', \'T\'} return all(base in valid_bases for base in dna_sequence)"},{"question":"You have been hired by a software company to optimize their distribution system. The company wants to deliver products from a main warehouse to several distribution centers. Each distribution center has an individual demand and you know the travel time between the warehouse and each distribution center. You must determine the minimum time needed to deliver products to all distribution centers, assuming the truck can service multiple centers in a single round trip. The truck can carry an unlimited number of products and the time starts when the truck leaves the warehouse. -----Input:----- - First line will contain N, the number of distribution centers. - Next N lines contain two integers each: the demand of the i^{th} distribution center, D_i, and the travel time from the warehouse to the i^{th} distribution center, T_i. -----Output:----- Output a single integer, the minimum time needed to deliver products to all distribution centers. -----Constraints----- - 1 leq N leq 1000 - 1 leq D_i leq 100 - 1 leq T_i leq 1000 -----Sample Input:----- 3 10 5 20 10 15 5 -----Sample Output:----- 20 -----EXPLANATION:----- The optimal way to distribute the products, in this case, is to: - Make a round trip to the first and third distribution centers simultaneously, taking 5 units of time. The truck can return to the warehouse in another 5 units of time, totaling 10 units of time. - Then, make a round trip to the second distribution center, taking 10 units of time to go and come back. Thus, the total minimum time needed to deliver products to all distribution centers is 20 units of time.","solution":"def min_delivery_time(N, demands_travel): Returns the minimum time needed to deliver products to all distribution centers. Parameters: N (int): Number of distribution centers demands_travel (list of tuples): List of tuples where each tuple contains two integers (Demand of the ith center, Travel time to the ith center) Returns: int: Minimum time needed to deliver products to all distribution centers # Find the maximum travel time amongst all the distribution centers max_time = max([t for d, t in demands_travel]) # Since truck can carry multiple products and service multiple centers in one go, # it will always be feasible to go to the farthest center first. return max_time * 2"},{"question":"Write a function that takes a list of integers as input and returns a new list, where each original integer is replaced by the sum of all integers in the input list except itself. For example, given the input list `[1, 2, 3, 4]`, the output list should be `[9, 8, 7, 6]` because 1 is replaced by 2+3+4=9, 2 is replaced by 1+3+4=8, 3 is replaced by 1+2+4=7, and 4 is replaced by 1+2+3=6. If possible, try to implement this without using a nested loop.","solution":"def sum_except_self(lst): Takes a list of integers and returns a new list where each integer is replaced by the sum of all integers in the input list except itself. total_sum = sum(lst) return [total_sum - num for num in lst]"},{"question":"You\'ve been given a sequence of `n` distinct integers. You can transform this sequence into a non-decreasing sequence by performing a series of operations. In one operation, you can replace any element of the sequence with an integer that is greater than or equal to it. Your goal is to determine the minimum number of operations required to achieve the non-decreasing sequence. -----Input----- - The first line of input contains a single integer `n` (1 ≤ n ≤ 100 000) — the length of the sequence. - The second line contains `n` integers a_{1}, a_{2}, ..., a_{n} (1 ≤ a_{i} ≤ 1 000 000) — the elements of the sequence. -----Output----- - Print a single integer — the minimum number of operations required. -----Examples----- Input 5 2 3 5 4 6 Output 1 Input 6 1 2 3 4 5 6 Output 0 -----Note----- In the first sample case, the minimum number of operations required is 1. One way to achieve this is to replace the integer 4 with 5 or 6. In the second sample case, the sequence is already non-decreasing, so no operations are needed.","solution":"def min_operations_to_non_decreasing(n, sequence): Determines the minimum number of operations required to transform the sequence into a non-decreasing sequence. Parameters: n (int): The length of the sequence. sequence (List[int]): The list of integers. Returns: int: The minimum number of operations required. # Initialize the last seen value as the first element in the sequence. last_seen = sequence[0] operations = 0 for i in range(1, n): if sequence[i] < last_seen: operations += 1 else: last_seen = sequence[i] return operations"},{"question":"The prime factors of a positive integer are the prime numbers that divide the integer exactly. Write a function `prime_factors(n)` that takes a positive integer `n` and returns a list of its prime factors in ascending order. **Example:** Input: ``` prime_factors(28) ``` Output: ``` [2, 2, 7] ``` Input: ``` prime_factors(15) ``` Output: ``` [3, 5] ``` **Note:** You must ensure that your solution handles large integers efficiently.","solution":"def prime_factors(n): Returns the prime factors of a positive integer n in ascending order. factors = [] # Start with the smallest prime number 2 divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"# Objective Given a string of digits, rearrange the digits to create the smallest possible number that is greater than the original number. If no such number exists (i.e., the digits are in descending order), return the original number. Define a function `next_greater_number` that takes a single argument `num_str` (a string of digits) and returns a string representing the rearranged number or the original number if no greater number exists. Examples `next_greater_number(\\"218765\\")` = \\"251678\\" `next_greater_number(\\"1234\\")` = \\"1243\\" `next_greater_number(\\"4321\\")` = \\"4321\\" `next_greater_number(\\"534976\\")` = \\"536479\\" **Note:** - No error checking is needed. `num_str` will always contain only digits. - `num_str` ranges between length 1 and 100.","solution":"def next_greater_number(num_str): Returns the smallest possible number that is greater than the original number. If no such number exists, returns the original number. num_list = list(num_str) length = len(num_list) # Step back through the number to find the first digit that can be increased for i in range(length - 2, -1, -1): if num_list[i] < num_list[i + 1]: break else: # If no such digit is found, return the original number return num_str # Find the smallest digit on the right side of the found digit that is larger than it for j in range(length - 1, i, -1): if num_list[j] > num_list[i]: break # Swap the found digits num_list[i], num_list[j] = num_list[j], num_list[i] # Sort the digits to the right of the initial digit in ascending order num_list = num_list[:i + 1] + sorted(num_list[i + 1:]) return \'\'.join(num_list)"},{"question":"You are given an array of integers and a target integer. Your task is to determine whether there is a pair of distinct elements in the array that sum up to the given target integer. If such a pair exists, output the indices of the two numbers. If no such pair exists, output -1. The function signature should be: ```python def find_indices(nums: List[int], target: int) -> Union[Tuple[int, int], int]: pass ``` -----Input----- - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n space-separated integers nums[i] (0 ≤ nums[i] ≤ 10^6) — the elements of the array. - The third line contains an integer target (0 ≤ target ≤ 10^6) — the target sum. -----Output----- - If there exists a pair of distinct elements in the array that sum up to the target integer, output the 0-based indices of the two numbers in any order as a tuple. - If no such pair exists, output -1. -----Examples----- Input 5 2 7 11 15 1 9 Output (0, 1) Input 4 1 2 3 4 8 Output -1 -----Note----- In the first test case, the pair (2, 7) sums up to 9. Their indices are (0, 1). In the second test case, no pair of distinct elements sums up to 8.","solution":"from typing import List, Union, Tuple def find_indices(nums: List[int], target: int) -> Union[Tuple[int, int], int]: Determines whether there is a pair of distinct elements in the array that sum up to the given target integer. If such a pair exists, returns the indices of the two numbers. If no such pair exists, returns -1. seen = {} for i, num in enumerate(nums): difference = target - num if difference in seen: return (seen[difference], i) seen[num] = i return -1"},{"question":"Design an algorithm that takes a string containing only lowercase characters and identifies the longest substring with unique characters. The function should return the length of that longest substring. Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The longest substring with unique characters is \\"abc\\", which has a length of 3. Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The longest substring with unique characters is \\"b\\", which has a length of 1. Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The longest substring with unique characters is \\"wke\\", which has a length of 3. Note that \\"pwke\\" is also a valid answer, but the problem requires the length of the substring. Example 4: Input: \\"dvdf\\" Output: 3 Explanation: The longest substring with unique characters is \\"vdf\\", which has a length of 3. Constraints: - 0 <= s.length <= 50000 - s consists of English letters, digits, symbols, and spaces.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with unique characters. :param s: input string :return: length of the longest substring with unique characters n = len(s) if n == 0: return 0 char_set = set() left = 0 max_length = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"A startup company wants to automate the task of generating seating arrangements for their upcoming orientation session. They need a program that will help them arrange the attendees in a specific pattern based on the number of rows. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N, the number of rows for the seating arrangement. -----Output:----- For each test case, output the seating arrangement pattern. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- # # # # # -----Explanation:----- For N = 2, the program prints: # For N = 3, the program prints: # # For N = 4, the program prints: # #","solution":"def generate_seating_pattern(n): Returns the seating arrangement pattern for N rows. pattern = [] for i in range(1, n+1): pattern.append(\'#\' * i) return pattern def generate_patterns_for_test_cases(test_cases): Given a list of test cases, generates seating patterns for each case. results = [] for N in test_cases: results.extend(generate_seating_pattern(N)) results.append(\\"\\") # To add a separator between patterns return results def generate_seating_patterns(T, test_cases): Generates the seating patterns for multiple test cases. all_patterns = generate_patterns_for_test_cases(test_cases) # Join and return the full pattern string return \\"n\\".join(all_patterns).strip()"},{"question":"Implement a function that determines if a given string is a valid palindrome when considering only alphanumeric characters and ignoring case sensitivity. The function should return `\\"Valid Palindrome\\"` if the string meets these criteria, otherwise return `\\"Not a Palindrome\\"`. Input A single string, where the string length is at most (10^5) and can contain spaces, punctuation, and any printable characters. Example ``` is_palindrome(\\"A man, a plan, a canal, Panama\\") # should return \\"Valid Palindrome\\" is_palindrome(\\"race a car\\") # should return \\"Not a Palindrome\\" ```","solution":"def is_palindrome(s): Determines if a given string is a valid palindrome considering only alphanumeric characters and ignoring case sensitivity. :param s: str - input string :return: str - \\"Valid Palindrome\\" or \\"Not a Palindrome\\" # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome if filtered_chars == filtered_chars[::-1]: return \\"Valid Palindrome\\" else: return \\"Not a Palindrome\\""},{"question":"Write a function `longest_nondecreasing_subsequence` that takes in a list of integers and returns the length of the longest non-decreasing subsequence. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. # Examples ```python longest_nondecreasing_subsequence([10, 20, 30, 10, 20, 30, 40]) => 5 # [10, 10, 20, 30, 40] longest_nondecreasing_subsequence([5, 4, 3, 2, 1]) => 1 # [5] or [4] or [3] or [2] or [1] longest_nondecreasing_subsequence([10, 10, 10, 10, 10]) => 5 # [10, 10, 10, 10, 10] ``` **Notes:** 1. The elements in the non-decreasing subsequence need not be consecutive in the original list. 2. You can assume the list will have at least one element.","solution":"def longest_nondecreasing_subsequence(arr): Returns the length of the longest non-decreasing subsequence. if not arr: return 0 n = len(arr) dp = [1] * n # Initialize the dp array with 1\'s for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to find the maximum product of two elements in an array of integers. The two elements must be different and should come from the array itself. Example 1: Input: [3, 4, 5, 2] Output: 20 Explanation: The maximum product is 4 * 5 = 20. Example 2: Input: [1, 5, 4, 5] Output: 25 Explanation: The maximum product is 5 * 5 = 25. Note: The array will contain at least two elements. The numbers in the array will be non-negative.","solution":"def max_product(nums): Returns the maximum product of two distinct elements in the array. # Sort the array in descending order. nums.sort(reverse=True) # The maximum product will be the product of the two largest elements # in the sorted array. return nums[0] * nums[1]"},{"question":"Write a function that takes a list of integers and an integer `n` as input and returns a new list which contains only the elements that appear more than `n` times in the input list. The order of elements in the returned list should be the same as their first occurrence in the input list. For example, given the input `list = [4, 5, 6, 7, 5, 6, 5, 6, 6, 7]` and `n = 2`, the function should return `[5, 6]` because `5` appears 3 times and `6` appears 4 times. Ensure your solution has a reasonable time and space complexity.","solution":"def elements_more_than_n(lst, n): Returns a list of elements that appear more than `n` times in the input list `lst`. The order of the elements in the returned list is the same as their first occurrence in the input list. Parameters: - lst: List of integers - n: Integer threshold for minimum number of occurrences Returns: - A list of integers from collections import Counter # Count the occurrences of each element count = Counter(lst) # Find elements that appear more than `n` times result = [] seen = set() for element in lst: if count[element] > n and element not in seen: result.append(element) seen.add(element) return result"},{"question":"You just received a shipment of boxes containing various counts of oranges. To help sort the boxes, create a function that outputs a description of the box based on the number of oranges it contains. The number of oranges will always be a positive integer and there will always be at least 1 orange in the box. ```python The expected behavior is as follows: - The box contains fewer than 5 oranges: \\"Just a few\\" - The box contains at least 5 but fewer than 20 oranges: \\"A decent amount\\" - The box contains at least 20 but fewer than 50 oranges: \\"Quite a lot\\" - The box contains at least 50 but fewer than 100 oranges: \\"A huge amount\\" - The box contains exactly 100 oranges: \\"An abundance\\" The box will always contain between 1 and 100 oranges, inclusive. ```","solution":"def describe_box(number_of_oranges): Returns a description of the number of oranges in the box. if number_of_oranges < 5: return \\"Just a few\\" elif number_of_oranges < 20: return \\"A decent amount\\" elif number_of_oranges < 50: return \\"Quite a lot\\" elif number_of_oranges < 100: return \\"A huge amount\\" else: # number_of_oranges == 100 return \\"An abundance\\""},{"question":"Write a function that takes an integer `n` (1 <= n <= 20) and returns the nth value in the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding numbers, usually starting with 0 and 1. Example For example, when `n = 10`: The first 10 values in the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 Hence, the 10th value in the Fibonacci sequence is 34.","solution":"def fibonacci(n): Returns the nth value in the Fibonacci sequence. Args: n (int): Position in the Fibonacci sequence (1 <= n <= 20). Returns: int: The nth Fibonacci number. if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"You are given the task of designing a Cache system that supports the Least Frequently Used (LFU) eviction policy. Implement the LFUCache class: LFUCache(int capacity) Initializes the cache with a given capacity. int get(int key) Returns the value of the key if present in the cache, otherwise returns -1. void put(int key, int value) Updates the value of the key if present, or inserts the key-value pair if not present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. If there is a tie for least frequently used keys, the least recently used key should be invalidated and removed. Example: Input: [\\"LFUCache\\",\\"put\\",\\"put\\",\\"get\\",\\"put\\",\\"get\\",\\"put\\",\\"get\\",\\"get\\",\\"get\\"] [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]] Output: [null,null,null,1,null,-1,null,-1,3,4] Explanation: LFUCache cache = new LFUCache(2); cache.put(1, 1); // cache: {1=1} cache.put(2, 2); // cache: {1=1, 2=2} cache.get(1); // returns 1, cache: {2=2, 1=1} cache.put(3, 3); // evicts key 2, cache: {1=1, 3=3} cache.get(2); // returns -1 (not found) cache.put(4, 4); // evicts key 1, cache: {4=4, 3=3} cache.get(1); // returns -1 (not found) cache.get(3); // returns 3 cache.get(4); // returns 4 Constraints: 0 <= capacity <= 10000 -10^5 <= key <= 10^5 -10^5 <= value <= 10^5 At most 2 * 10^5 calls will be made to put and get.","solution":"from collections import defaultdict, OrderedDict class LFUCache: def __init__(self, capacity: int): self.capacity = capacity self.min_freq = 0 self.key_to_val_freq = {} self.freq_to_keys = defaultdict(OrderedDict) def _update_freq(self, key): val, freq = self.key_to_val_freq[key] del self.freq_to_keys[freq][key] # If the key was the only one with the current minimum frequency if not self.freq_to_keys[freq]: del self.freq_to_keys[freq] if self.min_freq == freq: self.min_freq += 1 # Update key\'s frequency new_freq = freq + 1 self.freq_to_keys[new_freq][key] = None self.key_to_val_freq[key] = (val, new_freq) def get(self, key: int) -> int: if key not in self.key_to_val_freq: return -1 self._update_freq(key) return self.key_to_val_freq[key][0] def put(self, key: int, value: int): if self.capacity == 0: return if key in self.key_to_val_freq: self.key_to_val_freq[key] = (value, self.key_to_val_freq[key][1]) self._update_freq(key) return if len(self.key_to_val_freq) >= self.capacity: lfu_key, _ = self.freq_to_keys[self.min_freq].popitem(last=False) del self.key_to_val_freq[lfu_key] self.key_to_val_freq[key] = (value, 1) self.freq_to_keys[1][key] = None self.min_freq = 1"},{"question":"# Task **_Given_** an *array/list [] of integers* , **_Find_** **_The product of the maximum and minimum numbers_** in the array. ___ # Notes * **_Array/list_** size is *at least 2*. * **_Array/list\'s numbers_** can **include positive, negative, and zero values**. * **_Repetition_** of numbers in *the array/list could occur*. ___ # Input >> Output Examples ``` maxProduct({3,10,5,2,7}) ==> return (30) ``` **_Explanation_**: * The maximum number in the array is `10` and the minimum number is `2`. * Their product is `10 * 2 = 20`. ___ ``` maxProduct({-3, 5, -1, 7}) ==> return (-21) ``` **_Explanation_**: * The maximum number in the array is `7` and the minimum number is `-3`. * Their product is `7 * -3 = -21`. ___ ``` maxProduct({-7, -4, -2, -6}) ==> return (42) ``` **_Explanation_**: * The maximum number in the array is `-2` and the minimum number is `-7`. * Their product is `-2 * -7 = 14`. ___ ``` maxProduct({0, 4, -2, 5}) ==> return (0) ``` **_Explanation_**: * The maximum number in the array is `5` and the minimum number is `-2`. * Their product is `5 * -2 = -10`. ___","solution":"def maxProduct(arr): Returns the product of the maximum and minimum numbers in an array. Parameters: arr (list): List of integers. Returns: int: Product of the maximum and minimum numbers in the array. max_num = max(arr) min_num = min(arr) return max_num * min_num"},{"question":"# Introduction An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Anagrams are fun to generate and can be used in many linguistic games and cryptographic applications. # Task Write a function `longest_anagram_substring` that accepts a list of strings and returns the longest substring from the list that is an anagram of any other substring in the same list. If there are multiple such substrings of the same length, return the lexicographically smallest one. If no such substring exists, return an empty string. # Function Signature ```python def longest_anagram_substring(strings: List[str]) -> str: # your code here ``` # Input - `strings`: A list of strings of length N (1 ≤ N ≤ 100). Each string contains only lowercase English letters and has a minimum length of 1 and a maximum length of 1000. # Output - A single string that is the longest anagram substring as described above. # Example ```python assert longest_anagram_substring([\\"listen\\", \\"silent\\", \\"enlists\\", \\"google\\", \\"gogole\\"]) == \\"listen\\" assert longest_anagram_substring([\\"ab\\", \\"cd\\", \\"ef\\", \\"gh\\"]) == \\"\\" ``` # Explanation In the first example, \\"listen\\" is an anagram of \\"silent\\" and both are the longest such substrings in the given list. In the second example, there are no anagrams among the given strings, so it returns an empty string. # Additional Notes - Be sure to consider efficiency in both time and space, as the input size can be quite large. - Pay close attention to how you handle lexicographical order when dealing with substrings of the same length.","solution":"from typing import List from collections import defaultdict def longest_anagram_substring(strings: List[str]) -> str: def get_sorted_signature(s: str) -> str: # Return the sorted version of the string as its signature return \'\'.join(sorted(s)) # Dictionary to maintain the groups of anagrams anagrams = defaultdict(list) for string in strings: signature = get_sorted_signature(string) anagrams[signature].append(string) # Initialize variables to keep track of the longest anagram substring longest_anagram = \\"\\" for group in anagrams.values(): if len(group) > 1: # Check if there\'s more than one anagram in the group for string in group: if (len(string) > len(longest_anagram) or (len(string) == len(longest_anagram) and string < longest_anagram)): longest_anagram = string return longest_anagram"},{"question":"A warehouse has a number of containers in a row, and you need to load a ship with these containers. Each container has a certain weight, and the ship has a weight capacity. You can choose a subarray of consecutive containers to load onto the ship such that the sum of their weights does not exceed the ship\'s capacity. Write a function that takes two inputs: 1. An array of integers `weights` where `weights[i]` is the weight of the i-th container. 2. An integer `capacity` representing the weight capacity of the ship. The function should return the length of the longest subarray of consecutive containers where the sum of their weights is less than or equal to the ship\'s capacity. If no valid subarray exists, return 0. Example 1: Input: weights = [1, 2, 3, 4, 5], capacity = 10 Output: 4 Explanation: The subarray [1, 2, 3, 4] has a sum of 10, which is within the capacity. Example 2: Input: weights = [4, 8, 5, 1, 7], capacity = 6 Output: 2 Explanation: The subarray [1, 5] or [5, 1] are within the capacity, each of length 2. Example 3: Input: weights = [7, 3, 4, 8], capacity = 6 Output: 1 Explanation: Subarray [3] or [4] are within the capacity, each of length 1. Example 4: Input: weights = [5, 6, 7, 8], capacity = 4 Output: 0 Explanation: There is no subarray with a sum less than or equal to 4. Constraints: - 1 <= weights.length <= 10^4 - 1 <= weights[i] <= 10^4 - 1 <= capacity <= 10^9","solution":"def longest_subarray(weights, capacity): Returns the length of the longest subarray where the sum of weights is less than or equal to the given capacity. n = len(weights) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += weights[end] while current_sum > capacity: current_sum -= weights[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a method that takes an integer `n` as an input and returns the number of trailing zeros in the factorial of that integer. For example: `countTrailingZeros(5)` should return 1 because 5! = 120, and there is one trailing zero in 120. `countTrailingZeros(10)` should return 2 because 10! = 3628800, and there are two trailing zeros in 3628800. Keep in mind that the factorial of large numbers can be extremely large, much larger than what an integer can hold. Make sure to handle such cases efficiently without calculating the factorial directly.","solution":"def countTrailingZeros(n): Returns the number of trailing zeros in the factorial of the integer n. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"Write a function **maxConsecutiveOnes** that takes an integer array **nums** as input and returns an integer representing the length of the longest consecutive sequence of 1s in the array. *Note that:* - The input array contains only 0s and 1s. - The function needs to traverse the array and track the longest sequence of 1s found. For example: ```python def maxConsecutiveOnes(nums): # Your code here # Examples print(maxConsecutiveOnes([1, 1, 0, 1, 1, 1])) # Output: 3 print(maxConsecutiveOnes([1, 0, 1, 1, 0, 1])) # Output: 2 ```","solution":"def maxConsecutiveOnes(nums): Returns the length of the longest consecutive sequence of 1s in the array. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"You are working on a word processing application and need to implement a feature that automatically formats a block of text into a specified line width. This feature should ensure that no words are broken between lines (i.e., words should not be split to fit into the line width) and should minimize the number of lines used. Write a function `format_text` that takes two parameters: a string `text` containing the block of text, and an integer `line_width` representing the maximum width of each line. The function should return a list of strings, where each string represents a properly formatted line. For instance, given the input: ``` text = \\"The quick brown fox jumps over the lazy dog\\" line_width = 10 ``` The output should be: ``` [ \\"The quick\\", \\"brown fox\\", \\"jumps over\\", \\"the lazy\\", \\"dog\\" ] ``` Your solution should handle edge cases, such as words longer than the specified line width (in such cases, place the word on a new line by itself), and ensure minimal line usage while keeping the code efficient. You can assume the input text only contains words separated by single spaces and does not have leading or trailing spaces.","solution":"def format_text(text, line_width): Formats the input text into lines with the specified maximum line width. Args: text (str): The block of text to be formatted. line_width (int): The maximum width of each line. Returns: list of str: A list of formatted lines. words = text.split() lines = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > line_width: if current_line: lines.append(\\" \\".join(current_line)) current_line = [word] current_length = len(word) else: current_line.append(word) current_length += len(word) if current_line: lines.append(\\" \\".join(current_line)) return lines"},{"question":"Implement a function that calculates the number of contiguous subarrays such that the product of their elements is less than a given integer k. The function should take a list of positive integers and the integer k as inputs and return the count of such subarrays. The function should be efficient to handle large input sizes. # Examples: ``` Input: arr = [10, 5, 2, 6], k = 100 Output: 8 Explanation: The contiguous subarrays whose product is less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] ``` ``` Input: arr = [1, 2, 3], k = 0 Output: 0 Explanation: There are no subarrays with product less than 0. ``` # Constraints: - 1 <= arr.length <= 50000 - 1 <= arr[i] <= 1000 - 0 <= k <= 10^6 # Notes: - Use a sliding window approach for optimal performance. - Consider edge cases where k is extremely small or the array contains large numbers. - First some static tests, followed by many random tests.","solution":"def count_subarrays_with_product_less_than_k(arr, k): if k <= 1: return 0 left = 0 product = 1 count = 0 for right in range(len(arr)): product *= arr[right] while product >= k and left <= right: product //= arr[left] left += 1 count += right - left + 1 return count"},{"question":"# Maximize the Difference ___ # Task **_Given_** a **_list of integers_** , **_sort the list in alternating high and low order_** such that the first integer is the largest, the second is the smallest, the third is the second largest, and so on. ___ # Notes * **_List/Array_** *may contain* **_positive, negative, or zero values_**. * **_List/Array_** *will always contain* **_at least two elements_** * **_Return the reordered list_** ___ # Input >> Output Examples ``` maximizeDifference([4, 3, 2, 1]) ==> return [4, 1, 3, 2] ``` **_Explanation_**: * The original list is `[4, 3, 2, 1]`. * The sorted list in alternating high and low order is `[4, 1, 3, 2]`. ___ ``` maximizeDifference([10, 5, 3, 8, 9, 2]) ==> return [10, 2, 9, 3, 8, 5] ``` **_Explanation_**: * The original list is `[10, 5, 3, 8, 9, 2]`. * The sorted list in alternating high and low order is `[10, 2, 9, 3, 8, 5]`. ___ ``` maximizeDifference([-1, -2, -3, -4]) ==> return [-1, -4, -2, -3] ``` **_Explanation_**: * The original list is `[-1, -2, -3, -4]`. * The sorted list in alternating high and low order is `[-1, -4, -2, -3]`. ___ # Enjoy Coding!","solution":"def maximizeDifference(nums): Returns the list sorted in alternating high and low order. The first integer is the largest, the second is the smallest, the third is the second largest, and so on. nums.sort() result = [] while nums: if nums: result.append(nums.pop(-1)) # largest if nums: result.append(nums.pop(0)) # smallest return result"},{"question":"Create a function that takes a string and returns a new string where all vowel occurrences have been doubled. If the parameter is not a string or if it is an empty string, return `-1`. For Example: `doubleVowels(\\"hello\\")` should return `\\"heelloo\\"` `doubleVowels(\\"world\\")` should return `\\"woorld\\"` `doubleVowels(\\"\\")` should return `-1`","solution":"def doubleVowels(input_str): Returns a new string where all vowel occurrences have been doubled. Parameters: - input_str (str): The input string to process. Returns: - str: The modified string with doubled vowels, or -1 for non-string or empty string input. if not isinstance(input_str, str) or input_str == \\"\\": return -1 vowels = \\"aeiouAEIOU\\" result = [] for char in input_str: if char in vowels: result.append(char * 2) else: result.append(char) return \'\'.join(result)"},{"question":"You have been given the task to implement an automatic grading system for a series of quizzes. Each quiz has a number of questions, and the scores for each student\'s answers are represented as percentages. Write a function that takes a list of quiz scores for each student and determines the letter grade for the student based on the following criteria: - \'A\' for scores 90% and above. - \'B\' for scores between 80% and 89%. - \'C\' for scores between 70% and 79%. - \'D\' for scores between 60% and 69%. - \'F\' for scores below 60%. You are required to implement the function `determine_grade(scores: List[float]) -> str` that takes a list of floating-point numbers representing the percentages of scores obtained by a student for the quiz and returns the student\'s letter grade based on the average of these scores according to the criteria mentioned above. # Example: ```python print(determine_grade([85.0, 92.0, 88.0])) # Output: \'B\' print(determine_grade([55.0, 65.0, 70.0])) # Output: \'D\' print(determine_grade([95.0, 93.0, 97.0])) # Output: \'A\' ``` # Constraints: - You can assume the list of scores will have at least one element. - The scores will be represented as floating-point numbers between 0 and 100, inclusive.","solution":"from typing import List def determine_grade(scores: List[float]) -> str: Determines the letter grade for a student based on the average of the given scores. Parameters: scores (List[float]): A list of floating-point numbers representing the percentages of scores Returns: str: The letter grade based on the average score if not scores: raise ValueError(\\"The list of scores cannot be empty.\\") average_score = sum(scores) / len(scores) if average_score >= 90: return \'A\' elif average_score >= 80: return \'B\' elif average_score >= 70: return \'C\' elif average_score >= 60: return \'D\' else: return \'F\'"},{"question":"Write a function to calculate the sum of digits of a given number string raised to the power of their respective positions (with the leftmost digit having a position value of 1). The sum should then be checked if it is a prime number. If it is, return true; otherwise, return false. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Example: ``` \\"123\\" -> true // 1^1 + 2^2 + 3^3 = 1 + 4 + 27 = 32 (not a prime number) \\"357\\" -> false // 3^1 + 5^2 + 7^3 = 3 + 25 + 343 = 371 (not a prime number) \\"57\\" -> true // 5^1 + 7^2 = 5 + 49 = 54 (not a prime number) \\"11\\" -> false // 1^1 + 1^2 = 1 + 1 = 2 (prime number) \\"1001\\" -> true // 1^1 + 0^2 + 0^3 + 1^4 = 1 + 0 + 0 + 1 = 2 (prime number) ```","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def sum_of_powers_and_prime_check(number_string): Calculate the sum of digits raised to the power of their positions. Check if the resulting sum is a prime number. total_sum = sum(int(digit) ** (index + 1) for index, digit in enumerate(number_string)) return is_prime(total_sum)"},{"question":"# Background Imagine you are developing software for an elevator system in a skyscraper. The task is to control the elevator\'s movement in an optimized fashion based on the requests from passengers. # Problem Statement You need to write a function to determine the sequence of floors visited by the elevator based on a given set of requests. The elevator system handles requests in two sets: `up` and `down`. The elevator will only change direction when there are no more requests in the current direction. - The elevator only starts moving in the \'up\' direction. - When all `up` requests are handled, it will handle the `down` requests. - The elevator does not stop at any floor if there are no requests for that floor. - Once all requests are handled, the elevator stays at the last visited floor. # Input - A list of integers `up`, representing the floors requested in the upward direction. - A list of integers `down`, representing the floors requested in the downward direction. # Output - A list of integers representing the sequence of floors visited by the elevator. # Example ```python def elevator_sequence(up, down): # Your code goes here # Example 1 up_requests = [3, 5, 7] down_requests = [1, 6] elevator_sequence(up_requests, down_requests) #=> [3, 5, 7, 6, 1] # Example 2 up_requests = [1, 3] down_requests = [2] elevator_sequence(up_requests, down_requests) #=> [1, 3, 2] # Example 3 up_requests = [] down_requests = [4, 2] elevator_sequence(up_requests, down_requests) #=> [4, 2] ``` # Constraints 1. Lists `up` and `down` may contain up to 100 unique, positive integers each. 2. Each floor number will be positive and less than 100. 3. The floors will not repeat within the same list.","solution":"def elevator_sequence(up, down): Determine the sequence of floors visited by the elevator based on given requests. Parameters: up (list): A list of integers representing the floors requested in the upward direction. down (list): A list of integers representing the floors requested in the downward direction. Returns: list: A list representing the sequence of floors visited by the elevator. # Elevator starts moving up and then moves down after handling all up requests. sequence = [] # Add up requests in ascending order. sequence.extend(sorted(up)) # Add down requests in descending order. sequence.extend(sorted(down, reverse=True)) return sequence"},{"question":"Write a function that takes a list of words and returns a list of words where each word is reversed, and the words are sorted by their lengths in descending order. In case of ties in length, maintain the original order of appearance. Example input: ``` [\'apple\', \'banana\', \'kiwi\', \'peach\'] [\'hello\', \'world\', \'a\', \'python\'] ``` Expected output: ``` [\'ananab\', \'elppa\', \'hcaep\', \'iwik\'] [\'nohtyp\', \'olleh\', \'dlrow\', \'a\'] ```","solution":"def reverse_and_sort_by_length(words): Takes a list of words, reverses each word, and returns a list of reversed words sorted by their original lengths in descending order. In case of ties in length, maintains the original order of appearance. # Reverse each word reversed_words = [word[::-1] for word in words] # Sort the reversed words by the original lengths in descending order, preserving the original order in case of ties sorted_words = sorted(reversed_words, key=lambda word: len(word), reverse=True) return sorted_words"},{"question":"You are given a maze represented by an N x M grid. Each cell in the grid is either an open path (denoted by \'.\') or a blocked path (denoted by \'#\'). You can move one step at a time up, down, left, or right, but you cannot move onto or through a blocked path. Your goal is to find the shortest path from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (N,M)). If a path exists, you need to output the length of the shortest path. If no such path exists, output -1. -----Input----- The first line of the input contains two integers T denoting the number of test cases. The description of T test cases follows. For each test case: The first line contains two space-separated integers N and M, the number of rows and columns in the grid. The next N lines contain M characters each, representing the grid. -----Output----- For each test case, output the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N, M ≤ 100 -----Example----- Input: 2 4 4 . . . # . # # . . . . . # . # . 3 3 . # . # . # . # . Output: 7 -1 Explanation: For the first test case, one possible shortest path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) -> (4,4), with length 7. For the second test case, there is no valid path from (1,1) to (3,3).","solution":"from collections import deque def shortest_path_in_maze(test_cases): results = [] for n, m, grid in test_cases: result = bfs_shortest_path(n, m, grid) results.append(result) return results def bfs_shortest_path(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) end = (n - 1, m - 1) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(start[0], start[1], 1)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function `find_pair_with_sum` which takes in a list of integers `lst` and a target sum `target`. The function should return a pair of integers from the list that sum up to the target value if such a pair exists, and `None` if no such pair exists. Each element in the list can be part of at most one pair. Note: You may assume that the list will not contain duplicate elements. Example: ```python find_pair_with_sum([1, 2, 3, 9], 8) # => None find_pair_with_sum([1, 2, 4, 4], 8) # => (4, 4) find_pair_with_sum([1, 2, 3, 4, 6], 10) # => (4, 6) ```","solution":"def find_pair_with_sum(lst, target): Returns a pair of integers from the list that sum up to the target value, or None if no such pair exists. seen = set() for num in lst: complement = target - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"The city of Gridville is laid out in a perfect grid, where each intersection is 1 unit apart. Each intersection can be referenced by its (X, Y) coordinates. A person starts off at the origin (0, 0) and moves to different intersections by following a set of directions. Your task is to compute the final coordinates of the destination after the last direction is followed. -----Input----- The first line contains a single positive integer N <= 100, the number of test cases. N test cases follow. Each test case comprises of two parts: 1. An integer M (1 <= M <= 100) that represents the number of steps in the path. 2. A string of M characters where each character is one of \'N\', \'S\', \'E\', \'W\' representing North, South, East, and West respectively. -----Output----- For each test case, output a single line containing two integers representing the X and Y coordinates of the final destination. ----- Example ----- Input: 2 5 NNESW 3 SSE Output: 1 2 0 -2 Explanation: For the first test case, the steps are as follows: Starting at (0, 0) Step 1: N to (0, 1) Step 2: N to (0, 2) Step 3: E to (1, 2) Step 4: S to (1, 1) Step 5: W to (0, 1) For the second test case, the steps are as follows: Starting at (0, 0) Step 1: S to (0, -1) Step 2: S to (0, -2) Step 3: E to (1, -2)","solution":"def final_coordinates(test_cases): results = [] for case in test_cases: M, steps = case x, y = 0, 0 for step in steps: if step == \'N\': y += 1 elif step == \'S\': y -= 1 elif step == \'E\': x += 1 elif step == \'W\': x -= 1 results.append((x, y)) return results"},{"question":"Marie is organizing a silent auction for a charity event. She wants to ensure that the bids are fairly distributed among all items. Marie needs to maximize the number of items that receive at least one bid, given the availability of bidders and their preferences. Each bidder has a preferred list of items they’d like to bid on. Marie can persuade each bidder to bid on a specific item from their preferred list, but each item can receive at most one bid from each bidder. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers n and m, where n is the number of items and m is the number of bidders. - The next m lines each contain an integer k followed by k space-separated integers which represent the items that the bidder prefers. -----Output----- For each test case, print a single line containing the maximum number of items that can receive at least one bid. -----Constraints----- - 1 ≤ T ≤ 103 - 1 ≤ n ≤ 100 - 1 ≤ m ≤ 100 - 1 ≤ k ≤ n - 1 ≤ item ≤ n -----Example----- Input: 2 3 3 2 1 2 2 2 3 1 1 4 4 1 1 1 2 1 3 1 4 Output: 3 4 -----Explanation----- Example case 1. The first bidder can bid on item 1, the second bidder on item 3, and the third bidder on item 2. All three items receive at least one bid. Example case 2. Each bidder bids on a different item, therefore, all four items receive at least one bid.","solution":"def max_items_with_bids(T, test_cases): results = [] for case in test_cases: n, m, bidders = case item_count = [0] * (n + 1) for bidder in bidders: for item in bidder: item_count[item] += 1 max_bids = sum(1 for count in item_count[1:] if count > 0) results.append(max_bids) return results # Input Parsing Function def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].strip().split()) index += 1 bidders = [] for __ in range(m): parts = list(map(int, lines[index].strip().split())) bidders.append(parts[1:]) index += 1 test_cases.append((n, m, bidders)) return T, test_cases"},{"question":"Escape The Maze You are trapped in a maze represented by a 2D grid consisting of cells. Each cell is denoted by a number where `0` represents an empty cell that you can pass through, and `1` represents a cell filled with an obstacle that you cannot pass. You start from the top-left corner of the grid, and your goal is to reach the bottom-right corner. You can only move up, down, left, or right, but not diagonally. Write a function `is_escape_possible(maze: List[List[int]]) -> bool` that determines whether it\'s possible to reach the bottom-right corner from the top-left corner. The function should return `True` if there is a valid path, and `False` otherwise. # Input - `maze`: a 2D list of integers representing the maze. # Output - Returns a boolean value `True` if escape is possible, otherwise `False`. # Example ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] assert is_escape_possible(maze) == True ``` # Constraints - The maze will be a non-empty, rectangular grid of at most 100 rows and 100 columns. - The start cell (top-left corner) and the end cell (bottom-right corner) will always be `0`. - Cells containing `1` are impassable obstacles. Cells containing `0` are passable spaces. # Implementation Notes - You can use a breadth-first search (BFS) or depth-first search (DFS) to explore possible paths through the maze. - Keep track of visited cells to avoid getting stuck in loops.","solution":"from typing import List from collections import deque def is_escape_possible(maze: List[List[int]]) -> bool: Determines if escape from the top-left corner to the bottom-right corner of the maze is possible. Args: maze (List[List[int]]): A 2D grid representing the maze. Returns: bool: True if escape is possible, otherwise False. if not maze or not maze[0]: return False rows, cols = len(maze), len(maze[0]) # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the BFS with the starting point queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() # If we\'ve reached the bottom-right corner if x == rows - 1 and y == cols - 1: return True # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Task You are given an array of integers. Your task is to process multiple queries on this array. Each query can be of the following two types: * [\'S\', l, r]: Calculate the sum of elements from index `l` to index `r` (inclusive). * [\'U\', i, v]: Update the element at index `i` to the value `v`. Array indices are 1-based (i.e., the first element is at index 1). Example ```python array_processing([1, 2, 3, 4, 5], [[\'S\', 1, 3], [\'U\', 3, 10], [\'S\', 1, 3], [\'S\', 3, 4], [\'U\', 5, 6], [\'S\', 4, 5]]) === [6, 13, 14, 10]; array_processing([1, 1, 1, 1, 1], [[\'S\', 1, 5], [\'U\', 3, 5], [\'S\', 2, 4]]) === [5, 7]; array_processing([0, 0, 0, 0, 0], [[\'S\', 1, 1], [\'U\', 1, 10], [\'S\', 1, 1]]) === [0, 10]; array_processing([10, 20, 30], [[\'S\', 1, 3], [\'U\', 2, 25], [\'S\', 2, 3]]) === [60, 55]; ``` Note * All inputs are valid. * Please optimize your algorithm to handle large arrays and multiple queries efficiently.","solution":"def array_processing(arr, queries): Process an array with a series of sum and update queries. Parameters: arr (list): Initial array of integers. queries (list): List of queries where each query is a list [type, (l or i), (r or v)]. Returns: list: Results of the sum queries. results = [] for query in queries: if query[0] == \'S\': l = query[1] - 1 r = query[2] results.append(sum(arr[l:r])) elif query[0] == \'U\': i = query[1] - 1 v = query[2] arr[i] = v return results"},{"question":"# Task Write a function that takes an integer `k` and returns all possible pairs `(a, b)` of distinct integers such that `a * b = k` and `1 ≤ a < b`. Return the pairs as a list of tuples sorted in ascending order based on the first element of each pair. # Example For `k = 6`, the output should be `[(1, 6), (2, 3)]`. For `k = 12`, the output should be `[(1, 12), (2, 6), (3, 4)]`. # Input/Output - `[input]` integer `k` `1 ≤ k ≤ 100` - `[output]` a list of tuples Each tuple contains two integers representing one possible pair `(a, b)` such that `a * b = k` and `1 ≤ a < b`. If no pair exists, return an empty list.","solution":"def find_pairs(k): Returns all possible pairs (a, b) of distinct integers such that a * b = k and 1 ≤ a < b. pairs = [] for a in range(1, int(k**0.5) + 1): if k % a == 0: b = k // a if a < b: pairs.append((a, b)) return pairs"},{"question":"# Task: You are given a string containing words separated by spaces. Your task is to return the length of the longest word in the string. If there are multiple words of the same maximum length, return the length of the first one encountered. # Input: A string `s` (1 ≤ |s| ≤ 1000), containing a single line with words of alphabetical characters separated by spaces. # Output: An integer representing the length of the longest word in the string. # Example: Input: \\"Find the length of the longest word here\\" Output: 7","solution":"def length_of_longest_word(s): Returns the length of the longest word in the string `s`. If there are multiple words of the same maximum length, returns the length of the first one encountered. words = s.split() max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) return max_length"},{"question":"In a tropical rainforest, there are n trees standing in a straight line, each with a certain height. The guardian, Eagle, needs to cut down some trees such that no two consecutive trees remain standing. Given the heights of the n trees, find the maximum number of trees the Eagle can keep standing. Note: The height of a tree does not affect the number of trees kept standing, the only rule is that no two consecutive trees can remain standing. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of trees in the rainforest. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the trees. -----Output----- Output a single integer representing the maximum number of trees Eagle can keep standing. -----Examples----- Input 5 3 4 5 4 3 Output 3 Input 6 1 2 3 4 5 6 Output 3 -----Note----- In the first sample, the maximum number of trees that can be kept standing without any two consecutive trees is 3, which could be the trees at positions 1, 3, and 5 (heights 3, 5, and 3). In the second sample, the trees kept standing could be at positions 1, 3, and 5, resulting in 3 trees.","solution":"def max_trees_standing(n, heights): Returns the maximum number of trees that can be kept standing such that no two consecutive trees remain standing. if n == 0: return 0 if n == 1: return 1 # Using a dynamic programming approach where dp[i] represents the maximum # number of trees that can be kept up to the i-th tree. dp = [0] * n dp[0] = 1 # Only one tree can be kept if there\'s only one tree dp[1] = 1 # Only one tree can be kept if there are two trees for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + 1) return dp[n-1]"},{"question":"The Tree Traversal Machine --------------------------- In this task, we\'re going to build a tree traversal machine called Tom. Tom will traverse binary trees and support simple operations like inserting nodes, and computing the sum of all node values. To assist you, a `TreeNode` class is provided, which represents the nodes of the tree. The TreeNode Class ------------------- The `TreeNode` class has the following methods available: ```python __init__(self, value): Initializes a new tree node with the given value, setting left and right children to None. insert_left(self, value): Inserts a new TreeNode with the given value to the left of the current node. insert_right(self, value): Inserts a new TreeNode with the given value to the right of the current node. ``` The tree is initially empty, and the root node is None until the first `insert` command is executed. The Operations -------------- The operations available are as follows: # Tree Operations ``` insert [value]: Inserts a node with the given value into the binary search tree. If the tree is empty, this node becomes the root. Otherwise, it is inserted following binary search tree rules (left child < parent < right child). sum: Computes and returns the sum of all node values in the tree. ``` # Traversal Operations ``` inorder: Returns a list of node values in inorder traversal (left, root, right). preorder: Returns a list of node values in preorder traversal (root, left, right). postorder: Returns a list of node values in postorder traversal (left, right, root). ``` For example: ```python tom = Tom() tom.execute(\'insert 5\') # Inserts root node with value 5 tom.execute(\'insert 3\') # Inserts node with value 3 as left child of 5 tom.execute(\'insert 7\') # Inserts node with value 7 as right child of 5 print(tom.execute(\'sum\')) # Should output 15 print(tom.execute(\'inorder\')) # Should output [3, 5, 7] print(tom.execute(\'preorder\')) # Should output [5, 3, 7] print(tom.execute(\'postorder\')) # Should output [3, 7, 5] ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_left(self, value): self.left = TreeNode(value) return self.left def insert_right(self, value): self.right = TreeNode(value) return self.right class Tom: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = TreeNode(value) else: self._insert(self.root, value) def _insert(self, node, value): if value < node.value: if node.left is None: node.insert_left(value) else: self._insert(node.left, value) elif value > node.value: if node.right is None: node.insert_right(value) else: self._insert(node.right, value) def sum(self): return self._sum(self.root) def _sum(self, node): if node is None: return 0 return node.value + self._sum(node.left) + self._sum(node.right) def inorder(self): return self._inorder(self.root, []) def _inorder(self, node, result): if node is None: return result self._inorder(node.left, result) result.append(node.value) self._inorder(node.right, result) return result def preorder(self): return self._preorder(self.root, []) def _preorder(self, node, result): if node is None: return result result.append(node.value) self._preorder(node.left, result) self._preorder(node.right, result) return result def postorder(self): return self._postorder(self.root, []) def _postorder(self, node, result): if node is None: return result self._postorder(node.left, result) self._postorder(node.right, result) result.append(node.value) return result def execute(self, command): parts = command.split() if parts[0] == \'insert\': self.insert(int(parts[1])) elif parts[0] == \'sum\': return self.sum() elif parts[0] == \'inorder\': return self.inorder() elif parts[0] == \'preorder\': return self.preorder() elif parts[0] == \'postorder\': return self.postorder()"},{"question":"Write a function `remove_duplicates` that accepts a list of integers and returns a new list with duplicate values removed, preserving the original order of the elements. For instance, if the input list is `[1, 3, 3, 5, 2, 1, 4]`, the function should return `[1, 3, 5, 2, 4]`. # Example ```python remove_duplicates([1, 3, 3, 5, 2, 1, 4]) # Output: [1, 3, 5, 2, 4] ``` # Constraints - All integers in the input list are positive. - The list can have up to 1000 elements. - The function should have a linear (`O(n)`) time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the original order. Args: lst (list of int): List of integers with possible duplicates. Returns: list of int: List of integers without duplicates, preserving order. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Write a function `find_duplicate_numbers` that takes a list of integers `nums` and returns a list of integers that are duplicates in the input list. The order of the returned list should be the same as the first occurrence of each duplicate in the input list. If no duplicates are found, return an empty list. For example: `find_duplicate_numbers([1, 2, 3, 2, 4, 5, 3, 6, 4])` >>> returns `[2, 3, 4]` `find_duplicate_numbers([1, 2, 3, 4, 5])` >>> returns `[]` `find_duplicate_numbers([5, 5, 5, 5, 5])` >>> returns `[5]` For an introduction to list operations and handling duplicates in Python, read: https://docs.python.org/3/tutorial/datastructures.html#more-on-lists. Hint: Consider using a set to track seen numbers.","solution":"def find_duplicate_numbers(nums): Returns a list of duplicate numbers from the input list `nums`. The order of the returned list matches the first occurrence of each duplicate. :param nums: List of integers :return: List of integer duplicates seen = set() duplicates = [] for num in nums: if num in seen and num not in duplicates: duplicates.append(num) seen.add(num) return duplicates"},{"question":"Write a function named `validate_sudoku` that takes a two-dimensional list (a list of lists) as an input representing a potentially solved Sudoku puzzle and returns `True` if the Sudoku solution is valid, and `False` otherwise. The Sudoku puzzle will be a 9x9 grid containing integers from 1 to 9. A valid Sudoku solution must satisfy the following criteria: 1. Each of the digits from 1 to 9 must appear exactly once in each row. 2. Each of the digits from 1 to 9 must appear exactly once in each column. 3. Each of the digits from 1 to 9 must appear exactly once in each of the nine 3x3 sub-grids of the grid. Here are some examples of how this function would be used: ```python valid_board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] invalid_board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 7, 7, 9] # Invalid: number 7 appears twice in the last sub-grid ] validate_sudoku(valid_board) # returns True validate_sudoku(invalid_board) # returns False ```","solution":"def validate_sudoku(board): def is_valid_group(group): return sorted(group) == list(range(1, 10)) # Check rows for row in board: if not is_valid_group(row): return False # Check columns for col in range(9): column = [board[row][col] for row in range(9)] if not is_valid_group(column): return False # Check 3x3 sub-grids for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): sub_grid = [ board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3) ] if not is_valid_group(sub_grid): return False return True"},{"question":"Given an integer `n`, write a function that returns a string containing the innermost prime factors of `n` in non-decreasing order. A prime factor of a number `n` is a prime number `p` such that `n` is divisible by `p`. **Rules:** - If `n` is less than 2, return \\"No prime factors\\". - Each prime factor should be listed the number of times it divides `n` completely. - The resulting string should list the factors separated by a space. **Examples:** ```python prime_factors(28) == \\"2 2 7\\" prime_factors(18) == \\"2 3 3\\" prime_factors(1) == \\"No prime factors\\" prime_factors(45) == \\"3 3 5\\" prime_factors(77) == \\"7 11\\" ``` **Function Signature:** ```python def prime_factors(n: int) -> str: ```","solution":"def prime_factors(n: int) -> str: Returns the prime factors of n in non-decreasing order as a string. if n < 2: return \\"No prime factors\\" factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(str(divisor)) n = n // divisor divisor += 1 return \' \'.join(factors)"},{"question":"Given a list of integers representing the maximum jump length at each position in the list, determine the minimum number of jumps required to reach the last index of the list starting from the first index. If it is not possible to reach the last index, return -1. Examples: ``` [2, 3, 1, 1, 4] Minimum jumps to reach the end = 2 Explanation: The initial list is [2, 3, 1, 1, 4]. From the first position (index 0), you can jump to index 1 or 2. From index 1, you can jump to index 3 or 4. Jumping from index 1 to index 4 is the fastest way to reach the end of the list. [3, 2, 1, 0, 4] Minimum jumps to reach the end = -1 Explanation: The initial list is [3, 2, 1, 0, 4]. From the first position (index 0), you can jump to index 1, 2, or 3. However, none of these positions allow you to reach the last index (index 4). ``` If the list contains only one element, the minimum number of jumps required is 0. Notes: - Each position in the list represents your maximum jump length at that position. - The list will always be an array of non-negative integers.","solution":"def min_jumps(nums): Determines the minimum number of jumps required to reach the last index. Parameters: nums (list): List of integers representing the maximum jump length at each position. Returns: int: Minimum number of jumps to reach the end or -1 if it is not possible. if len(nums) <= 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= len(nums) - 1: return jumps return -1 # if we exit the loop, it means we can\'t reach the end"},{"question":"Zara is a botanist who loves studying tree growth patterns. One day she was observing a specific type of tree, which can be represented as a binary tree with nodes numbered from 1 to n. In this tree, each node can have at most two children. Zara wants to gather information about the sum of values of the nodes along the path from the root node to every other node in the tree. A binary tree is given as input, and each node has a value associated with it. The value of the node with the number i is a_i. Zara needs to calculate the sum of values of nodes along the path from the root node to each node in the tree. Can you help Zara by writing a function to compute these sums? -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of nodes in the tree. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4), representing the values of the nodes. Each of the next n-1 lines contains two integers u and v (1 le u, v le n), denoting there is an edge between u and v in the tree. It is guaranteed that the given edges form a binary tree and node 1 is always the root. -----Output----- Output n integers where the i-th integer corresponds to the sum of values of nodes along the path from the root node to the node i. -----Examples----- Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 1 3 4 7 8 Input 3 2 1 4 1 2 1 3 Output 2 3 6","solution":"def path_sums(n, values, edges): from collections import defaultdict, deque # Create adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize sum array with None path_sum = [None] * (n + 1) path_sum[1] = values[0] # BFS to calculate the path sums queue = deque([1]) while queue: current = queue.popleft() for neighbor in tree[current]: if path_sum[neighbor] is None: path_sum[neighbor] = path_sum[current] + values[neighbor - 1] queue.append(neighbor) # Ignore the zeroth index as nodes are numbered from 1 to n return path_sum[1:] # Function to parse the inputs and return the results def solve(n, values, edges): return path_sums(n, values, edges)"},{"question":"In a fictional world, the inhabitants are enthusiastic about digital art and frequently use a grid-based canvas to create stunning pixel art. Each cell of the canvas can be either filled (denoted as 1) or empty (denoted as 0). Artists love working with rectangular patterns and often seek to understand various configurations of such patterns within their artwork. Given a binary matrix representing a canvas, you are to determine the size of the largest rectangle composed entirely of 1s. Your task is to find out the area of the largest rectangle containing only 1s in the given binary matrix. -----Input----- The input consists of a single test case. The first line contains two integers m and n (1 le m, n le 1000) — the dimensions of the binary matrix. The following m lines contain the binary matrix, where each line contains n integers (either 0 or 1) separated by spaces. -----Output----- Output one integer — the area of the largest rectangle composed entirely of 1s in the given binary matrix. -----Example----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 -----Note----- In the given example, the maximum rectangle composed entirely of 1s has an area of 6, which is formed by the 2nd and 3rd rows from the 3rd to 5th columns.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) height = [0] * (n + 1) max_area = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: height[j] += 1 else: height[j] = 0 stack = [-1] for j in range(n + 1): while height[j] < height[stack[-1]]: h = height[stack.pop()] w = j - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(j) return max_area"},{"question":"=====Function Descriptions===== .check_unique(input_str) This method is called to check if all characters in a given string are unique. The input_str argument is a string containing alphanumeric characters. Example: ``` check_unique(\\"hello\\") # Output -> No check_unique(\\"world\\") # Output -> Yes ``` The function should return \\"Yes\\" if all characters in the string are unique, and \\"No\\" otherwise. =====Problem Statement===== You are given a string of length N, consisting of lowercase English letters and digits. Your task is to determine if all characters in the string are unique. Print \\"Yes\\" if all characters are unique. Otherwise, print \\"No\\". =====Input Format===== The first line contains an integer N, the length of the string. The second line contains the string of length N. =====Constraints===== 1 <= N <= 1000 =====Output Format===== Print \\"Yes\\" if all characters in the given string are unique. Otherwise, print \\"No\\". Example Input 1: 5 hello Example Output 1: No Example Input 2: 5 world Example Output 2: Yes","solution":"def check_unique(input_str): Check if all characters in the given string are unique. return \\"Yes\\" if len(set(input_str)) == len(input_str) else \\"No\\""},{"question":"You are given an array of N integers. Determine the length of the longest subsequence that is strictly increasing and in which the sum of the elements is odd. ------Input------ - The first line of input contains an integer N. - The second line contains N space-separated integers representing the array. ------Output------ Print a single line containing the length of the longest strictly increasing subsequence with an odd sum. If no such subsequence exists, print 0. ------Constraints------ - 1 le N le 10^3 - 1 le A[i] le 10^5 ------Example Input------ 5 2 1 4 7 6 ------Example Output------ 3 ------Explanation------ A possible longest subsequence with an odd sum is [1, 4, 7]. The sum of its elements is 12, which is even. A longer subsequence is [1, 4, 6, 7], but it has an even sum as well. Therefore, the valid longest subsequence of an odd sum is [2, 1, 6] with a length of 3.","solution":"def find_longest_odd_sum_subsequence_length(arr): from itertools import combinations N = len(arr) max_length = 0 for length in range(1, N + 1): for subseq in combinations(arr, length): if all(subseq[i] < subseq[i + 1] for i in range(len(subseq) - 1)) and sum(subseq) % 2 == 1: max_length = max(max_length, length) return max_length"},{"question":"Given an integer N, write a program to print a hexadecimal representation of an MxM spiral matrix filled sequentially with numbers from 1 to N times N. -----Input:----- - A single integer N indicating the size of the matrix. -----Output:----- - M lines, each with M space-separated hexadecimal numbers in uppercase, representing the spiral matrix filled with sequential integers starting from 1 up to N times N. -----Constraints----- - 1 leq N leq 30 -----Sample Input:----- 3 -----Sample Output:----- 1 2 3 8 9 4 7 6 5","solution":"def generate_spiral_matrix(N): def spiral_coords(size): x, y = 0, 0 dx, dy = 0, 1 for _ in range(size * size): yield x, y if not (0 <= x + dx < size and 0 <= y + dy < size and matrix[x + dx][y + dy] == 0): dx, dy = dy, -dx x += dx y += dy matrix = [[0] * N for _ in range(N)] for i, (x, y) in enumerate(spiral_coords(N), 1): matrix[x][y] = i return matrix def print_hex_spiral_matrix(N): matrix = generate_spiral_matrix(N) for row in matrix: print(\\" \\".join(f\\"{num:X}\\" for num in row))"},{"question":"Create a function ```forestPaths(h, w, paths)``` that determines the number of distinct paths through a forest grid of size ```h``` by ```w```. # Problem Description You are given a forest in the form of a 2D grid with ```h``` rows and ```w``` columns. Each cell in the grid can either be walkable (\'.\') or contain an obstacle (\'#\'). Paths can only move right (\'R\') or down (\'D\') from the starting point at the top-left cell (0, 0) to the destination at the bottom-right cell (h-1, w-1). The function should compute the number of distinct paths from the starting point to the destination point while avoiding obstacles. # Function Signature ```python def forestPaths(h: int, w: int, paths: List[str]) -> int: ``` # Input - An integer ```h``` (1 <= h <= 50), the number of rows in the forest grid. - An integer ```w``` (1 <= w <= 50), the number of columns in the forest grid. - A list of ```h``` strings, each string representing a row in the grid, with each character being \'.\' or \'#\'. # Output - Return the number of distinct paths from (0, 0) to (h-1, w-1) avoiding obstacles. If no such path exists, return 0. # Example ```python >>> forestPaths(3, 3, [ \\"...\\", \\".#.\\", \\"...\\" ]) 2 >>> forestPaths(3, 3, [ \\".#.\\", \\".#.\\", \\"...\\" ]) 1 >>> forestPaths(2, 2, [ \\"..\\", \\"\\" ]) 0 ``` # Explanation - In the first example, there are 2 distinct paths from the start to the destination. - In the second example, there is only 1 distinct path since the second column is entirely blocked. - In the third example, it\'s impossible to reach the destination due to obstacles. # Note - You can assume that the starting cell (0, 0) and the destination cell (h-1, w-1) will never contain an obstacle. - Implement an efficient solution that considers all edge cases.","solution":"from typing import List def forestPaths(h: int, w: int, paths: List[str]) -> int: if paths[0][0] == \'#\' or paths[h-1][w-1] == \'#\': return 0 dp = [[0] * w for _ in range(h)] dp[0][0] = 1 for i in range(h): for j in range(w): if paths[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[h-1][w-1]"},{"question":"Given a grid of size `m x n` where each cell can either be `0` (empty) or `1` (obstacle), find the number of unique paths from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time and cannot move through obstacles. Example 1: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There are two possible paths to the bottom-right corner: Right -> Right -> Down -> Down and Down -> Down -> Right -> Right. Example 2: Input: grid = [[0,1],[0,0]] Output: 1 Explanation: There is only one possible path to the bottom-right corner: Down -> Right. Constraints: - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 100` - `grid[i][j]` is 0 or 1","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid, where you can only move either down or right at any point in time and cannot move through obstacles (cells with value 1). if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[-1][-1]"},{"question":"You are given a list of non-negative integers. Your task is to form the largest possible number by concatenating these integers together. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated non-negative integers. -----Output----- For each test case, print a single line containing the largest possible number that can be formed. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 0 le A_i le 10^9 for each valid i -----Subtasks----- Subtask #1 (40 points): N le 100 Subtask #2 (60 points): original constraints -----Example Input----- 2 3 3 30 34 4 54 546 548 60 -----Example Output----- 34330 6054854654","solution":"from functools import cmp_to_key def largest_number(nums): # Compare two strings by their concatenated order def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert integers to strings for comparison nums = list(map(str, nums)) # Sort using the custom comparator nums.sort(key=cmp_to_key(compare)) # Join the sorted list into a single string largest_num = \'\'.join(nums) # Handle the case where the largest number is \'0\' (meaning all numbers are zero) if largest_num[0] == \'0\': return \'0\' else: return largest_num def solve(T, test_cases): results = [] for i in range(T): N, nums = test_cases[i] results.append(largest_number(nums)) return results"},{"question":"A company is organizing a coding competition with N participants (numbered 1 through N). Each participant will solve a series of M problems (numbered 1 through M) during the competition. The problems vary in difficulty and point value. For the competition, the participants are given a score for each problem they solve correctly. The score they receive for solving problem j correctly is S_j. However, there is a twist. Each participant has a unique skill level that determines the maximum difficulty of problems they can solve. Participant i can only solve problems with difficulty levels up to D_i. Given the difficulty of each problem, the point values, and the skill level of each participant, calculate the maximum total score each participant can achieve. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line contains M space-separated integers D_1, D_2, ldots, D_M representing the difficulty level of each problem. - The third line contains M space-separated integers S_1, S_2, ldots, S_M representing the score for each problem. - N lines follow, each containing a single integer K_i denoting the skill level of participant i. -----Output----- For each test case, output N lines, each containing a single integer. For each participant i, print the maximum total score they can achieve. -----Constraints----- - 1 le T le 1,000 - 1 le N, M le 10^5 - 1 le D_i le 10^5 for each valid i - 1 le S_i le 10^9 for each valid i - 1 le K_i le 10^5 for each valid i - the sum of N over all test cases does not exceed 10^6 - the sum of M over all test cases does not exceed 10^6 -----Example Input----- 1 5 3 2 1 3 10 5 15 1 2 3 2 1 -----Example Output----- 5 15 30 15 5","solution":"def calculate_max_score(N, M, difficulties, scores, skills): # Create tuples of (difficulty, score) and sort them by difficulty in ascending order problems = sorted(zip(difficulties, scores)) # Calculate cumulative score array cumulative_scores = [0] * (M + 1) for index in range(1, M + 1): cumulative_scores[index] = cumulative_scores[index - 1] + problems[index - 1][1] # Function to find the maximum total score for a given skill def max_total_score(skill): low, high = 0, M while low < high: mid = (low + high + 1) // 2 if problems[mid - 1][0] <= skill: low = mid else: high = mid - 1 return cumulative_scores[low] return [max_total_score(skill) for skill in skills] def process_input(input_data): result = [] lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 for _ in range(T): N, M = map(int, lines[index].split()) index += 1 difficulties = list(map(int, lines[index].split())) index += 1 scores = list(map(int, lines[index].split())) index += 1 skills = [int(lines[index + i]) for i in range(N)] index += N result.extend(calculate_max_score(N, M, difficulties, scores, skills)) return result"},{"question":"Given an array of integers, find the smallest subarray having a sum equal to or greater than a given target sum. If such a subarray does not exist, return 0 instead. For example, given the array `[2, 1, 5, 2, 3, 2]` and target sum `7`: ``` solve([2, 1, 5, 2, 3, 2], 7) = 2 ``` Explanation: The smallest subarray with a sum of at least 7 is `[5, 2]`, which has length 2. More examples in test cases. Good luck!","solution":"def solve(arr, target): Given an array of integers, find the smallest subarray having a sum equal to or greater than a given target sum. If such a subarray does not exist, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= target: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Given an integer array `nums`, return the largest product that can be made by multiplying any three integers from the array. # Examples ``` nums = [1, 2, 3] -> 6 nums = [1, 2, 3, 4] -> 24 nums = [-10, -10, 5, 2] -> 500 nums = [1, 2, 3, -4, 5] -> 30 ``` # Note - The length of the array will be at least 3. - The values can be positive, negative, or zero.","solution":"def maximum_product_of_three(nums): Returns the largest product that can be made by multiplying any three integers from the array. nums.sort() # The largest product can be one of the following: # 1. Product of the three largest numbers. # 2. Product of the two smallest numbers (which could be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Car Rental Discounts You are the manager of a car rental company, and you want to offer special discounts to loyal customers. Customers who rent cars are eligible for a discount based on the number of days they rent. Here are the rules for the discounts: - If a customer rents a car for 3 or more days, they get 20 off the total price. - If a customer rents a car for 7 or more days, they get 50 off the total price. The rental rate per day is 40. Write a function that takes the number of days a customer wants to rent the car and returns the total cost after applying the appropriate discount. Function signature: ```python def rental_cost(days: int) -> int: pass ``` Examples: ```python rental_cost(2) # should return 80 because the total cost before any discount is 2 * 40 = 80, and no discount is applied. rental_cost(3) # should return 100 because the total cost before discount is 3 * 40 = 120, and 20 discount is applied. rental_cost(7) # should return 230 because the total cost before discount is 7 * 40 = 280, and 50 discount is applied. ``` Ensure your function computes the total cost accurately by applying the highest possible discount based on the number of days rented.","solution":"def rental_cost(days: int) -> int: Returns the total cost after applying the appropriate discount based on the rental days. base_cost = days * 40 if days >= 7: discount = 50 elif days >= 3: discount = 20 else: discount = 0 total_cost = base_cost - discount return total_cost"},{"question":"You are given a 2D grid of size m x n. Each cell in the grid can have one of three values: - 0 representing an empty cell - 1 representing a fresh orange - 2 representing a rotten orange Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Return the minimum number of minutes that is required for all the fresh oranges to become rotten. If it is impossible for all the fresh oranges to rot, return -1. # Function Signature ```python def orangesRotting(grid: List[List[int]]) -> int: pass ``` # Constraints - 1 <= m, n <= 10 - grid[i][j] is only 0, 1, or 2 # Example: Example 1: ```python Input: [[2,1,1],[1,1,0],[0,1,1]] Output: 4 ``` Example 2: ```python Input: [[2,1,1],[0,1,1],[1,0,1]] Output: -1 ``` Example 3: ```python Input: [[0,2]] Output: 0 ``` # Explanation: - In the first example, all the oranges become rotten by the 4th minute. - In the second example, it is impossible to rot all the oranges since fresh oranges at (2,2) and (2,0) are isolated. - In the third example, there are no fresh oranges to rot.","solution":"from typing import List from collections import deque def orangesRotting(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) queue = deque() fresh_oranges = 0 # Initialize queue with all initially rotten oranges for r in range(rows): for c in range(cols): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: fresh_oranges += 1 if fresh_oranges == 0: return 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] minutes_passed = 0 while queue: minutes_passed += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: grid[nx][ny] = 2 fresh_oranges -= 1 queue.append((nx, ny)) return minutes_passed - 1 if fresh_oranges == 0 else -1"},{"question":"Our Chef has a set of spices, each spice has a unique taste value assigned to it. The Chef likes to prepare a dish such that the sum of the taste values of the spices used in the dish is exactly equal to a given taste target, K. However, he also wants to ensure that no spice is used more than once in any dish to maintain the uniqueness of flavors. You are to help the Chef by writing a function that determines whether it is possible to select a subset of the spices that adds up to the exact target taste value, K. -----Input----- You will be given T, the number of test cases. For each test case, the first line contains two integers, N and K. N is the number of spices and K is the target taste value. The second line contains N integers representing the unique taste values of the spices. -----Output----- For each test case, output \\"YES\\" if it\'s possible to select a subset of spices such that their sum is exactly K. Otherwise, output \\"NO\\". -----Example----- Input: 2 4 10 2 3 7 8 5 9 1 2 3 4 5 Output: YES YES","solution":"def subset_sum_possible(spices, N, K): Check if it is possible to select a subset of spices that adds up to the exact target taste value K. dp = [False] * (K + 1) dp[0] = True for spice in spices: for j in range(K, spice - 1, -1): dp[j] = dp[j] or dp[j - spice] return dp[K] def chef_spices(T, test_cases): Determine for each test case whether a subset of spices can sum up to the target taste value and return \'YES\' or \'NO\' results = [] for i in range(T): N, K = test_cases[i][0] spices = test_cases[i][1] result = \\"YES\\" if subset_sum_possible(spices, N, K) else \\"NO\\" results.append(result) return results"},{"question":"You are given a list of student names and their corresponding scores in three different subjects - Mathematics, Science, and English. Each student has a unique name. # Task: - parameters: `names` - a list of unique student names, `scores` - a list of tuples where each tuple contains three integers representing the scores in Mathematics, Science, and English for each student in the list `names`. - return: the name of the student who has the highest average score across all three subjects. If multiple students have the same highest average score, return the one whose name comes first lexicographically. # Example: ```python names: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] scores: [(80, 70, 90), (85, 75, 95), (80, 80, 80)] The function should return: \\"Bob\\" ``` # Notes: - The length of `names` and `scores` is guaranteed to be the same. - Each tuple in `scores` corresponds to the student at the same index in `names`. - The scores range from 0 to 100 inclusive for each subject. - If the `names` list is empty, return \\"No students\\".","solution":"def highest_average_student(names, scores): if not names: return \\"No students\\" max_average = -1 top_student = None for i, name in enumerate(names): average = sum(scores[i]) / len(scores[i]) if average > max_average or (average == max_average and name < top_student): max_average = average top_student = name return top_student"},{"question":"You are given a string s which consists of lowercase letters. You need to determine if you can convert it to a palindrome by removing at most one character. Return true if it is possible to make the string a palindrome, and false otherwise. Example: Input: \\"abca\\" Output: true Explanation: You could remove the character \'b\' or \'c\' to make \\"aca\\" or \\"aba\\", both of which are palindromes. Input: \\"racecar\\" Output: true Explanation: The string is already a palindrome, hence no need to remove any character. Input: \\"abc\\" Output: false Explanation: There\'s no way to remove just one character to make \\"abc\\" a palindrome.","solution":"def can_convert_to_palindrome(s: str) -> bool: Determines if a string can be converted to a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if the string s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (j+i)//2 + 1)) for i in range(len(s) // 2): if s[i] != s[~i]: # ~i is equivalent to -(i+1) j = len(s) - 1 - i return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) return True"},{"question":"Given a string representing a mathematical expression that contains only non-negative integers and the operators +, -, *, and /, evaluate the expression and return the result as an integer. The expression is guaranteed to be valid, containing no spaces, and follows standard operator precedence. You may assume that the given expression is always valid, which means it always follows the given constraints. For example, it will never divide by zero, and it will follow an arithmetic syntax without any errors. **Examples:** ```python evaluate(\\"3+2*2\\") # Output: 7 evaluate(\\" 7-4 /2 \\") # Output: 5 evaluate(\\"5+6*3\\") # Output: 23 ``` Note: The multiplication and division operations have higher precedence than addition and subtraction.","solution":"def evaluate(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, *, and /. def apply_operator(operators, operands): operator = operators.pop() right_operand = operands.pop() left_operand = operands.pop() if operator == \'+\': operands.append(left_operand + right_operand) elif operator == \'-\': operands.append(left_operand - right_operand) elif operator == \'*\': operands.append(left_operand * right_operand) elif operator == \'/\': operands.append(int(left_operand / right_operand)) def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 operators = [] operands = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 elif expression[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, operands) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, operands) return operands[0]"},{"question":"Implement two functions: `encrypt_message` and `decrypt_message`. # encrypt_message Takes a string and an integer key as arguments. This function should encrypt the message using a Caesar cipher with the provided key. The Caesar cipher shifts each letter in the string by the number of positions defined by the key. The function should preserve the case of the characters and should not alter any non-alphabetic characters in the string. Examples: ``` encrypt_message(\\"Hello, World!\\", 3) --> \\"Khoor, Zruog!\\" encrypt_message(\\"abcXYZ\\", 2) --> \\"cdeZAB\\" encrypt_message(\\"Python\\", 0) --> \\"Python\\" ``` # decrypt_message Takes a string and an integer key as arguments. This function should decrypt a message that was encrypted using the Caesar cipher with the provided key. The process for decryption involves shifting back each letter in the string by the number of positions defined by the key. The function should preserve the case of the characters and should not alter any non-alphabetic characters in the string. Examples: ``` decrypt_message(\\"Khoor, Zruog!\\", 3) --> \\"Hello, World!\\" decrypt_message(\\"cdeZAB\\", 2) --> \\"abcXYZ\\" decrypt_message(\\"Python\\", 0) --> \\"Python\\" ``` **Note:** You can assume all arguments are valid so there is no need for error checking.","solution":"def encrypt_message(message, key): Encrypts the message using a Caesar cipher with the given key. encrypted_message = [] for char in message: if char.isalpha(): shift = ord(\'A\') if char.isupper() else ord(\'a\') encrypted_char = chr((ord(char) - shift + key) % 26 + shift) encrypted_message.append(encrypted_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message) def decrypt_message(message, key): Decrypts the message that was encrypted using a Caesar cipher with the given key. decrypted_message = [] for char in message: if char.isalpha(): shift = ord(\'A\') if char.isupper() else ord(\'a\') decrypted_char = chr((ord(char) - shift - key) % 26 + shift) decrypted_message.append(decrypted_char) else: decrypted_message.append(char) return \'\'.join(decrypted_message)"},{"question":"Johnny is practicing his arithmetic skills by playing with sequences of integers. He has a knack for performing specific operations on these sequences to transform them in interesting ways. His favorite operation is the \\"sum-alternating subtraction,\\" which he defines as follows: For a given sequence A = [a_1, a_2, ..., a_n] of length n, create a new sequence B where: B[i] = begin{cases} A[i] + A[i+1], & text{if } i text{ is odd and } i < n A[i] - A[i+1], & text{if } i text{ is even and } i < n A[i], & text{if } i = n end{cases} Given a sequence A, help Johnny compute the sequence B after performing the \\"sum-alternating subtraction\\" operation. -----Input----- The first line contains a single integer t (1 leq t leq 100), the number of test cases. The next t blocks each contain two lines. The first line of each block contains a single integer n (1 leq n leq 100), the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (-1000 leq a_i leq 1000), the elements of the sequence A. -----Output----- For each test case, output the transformed sequence B on a new line. Each sequence B should be printed as a space-separated list of integers. -----Example----- Input 3 5 1 3 2 8 5 4 4 7 1 3 1 10 Output 4 -1 10 -3 5 11 -6 4 -3 10 -----Explanation----- In the first example, the sequence A is [1, 3, 2, 8, 5]. The sequence B is computed as follows: - B[1] = A[1] + A[2] = 1 + 3 = 4 - B[2] = A[2] - A[3] = 3 - 2 = 1 - B[3] = A[3] + A[4] = 2 + 8 = 10 - B[4] = A[4] - A[5] = 8 - 5 = 3 - B[5] = A[5] = 5 Thus, B = [4, 1, 10, 3, 5].","solution":"def sum_alternating_subtraction(t, test_cases): results = [] for i in range(t): n, A = test_cases[i] B = [] for j in range(n): if j < n - 1: if j % 2 == 0: B.append(A[j] + A[j+1]) else: B.append(A[j] - A[j+1]) else: B.append(A[j]) results.append(B) return results"},{"question":"Create a function `common_prefix` that takes a list of strings and returns the longest common prefix shared among all the strings. If there is no common prefix, return an empty string. Look at the examples below for more details. ```python common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) => \\"fl\\" common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) => \\"\\" common_prefix([\\"interspecies\\", \\"interstellar\\", \\"interstate\\"]) => \\"inters\\" common_prefix([\\"throne\\", \\"throne\\"]) => \\"throne\\" ``` Assume that the function is case-sensitive and only contains lowercase alphabets. Uppercase characters are treated differently. For instance, ```python common_prefix([\\"hello\\", \\"Hello\\"]) => \\"\\" ```","solution":"def common_prefix(strings): Returns the longest common prefix shared among all the strings in the list. If there is no common prefix, returns an empty string. if not strings: return \\"\\" # Sort the list to easily compare the first and last strings strings.sort() first = strings[0] last = strings[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"In a distant land, there exist mystical flowers that bloom in a magical garden. Each flower has a unique blooming time and wilting time. The garden keeper wants to arrange them in such a way that there is always at least one flower blooming at any given time. Your task is to find out if it is possible to arrange flowers in such a way that every day from the earliest blooming time to the latest wilting time has at least one flower blooming. -----Input:----- - The first line contains an integer N, the number of flowers in the garden. - The next N lines each contain two integers B and W, the blooming time and wilting time of a flower. -----Output:----- Print \\"YES\\" if it is possible to arrange the flowers so that there is always at least one flower blooming at any given time. Otherwise, print \\"NO\\". -----Constraints----- - 1≤N≤1000 - 0≤B≤10000 - 0≤W≤10000 - B≤W -----Sample Input:----- 3 1 4 5 8 2 6 -----Sample Output:----- YES -----Sample Input:----- 3 1 3 4 6 7 9 -----Sample Output:----- NO -----Note:----- - Ensure to handle overlapping intervals effectively to find any gap in the blooming periods.","solution":"def can_arrange_flowers(N, intervals): Determine if it\'s possible to arrange flowers such that there is always at least one flower blooming at any given time from the earliest blooming time to the latest wilting time. Parameters: N (int): Number of flowers. intervals (list): List of tuples containing blooming and wilting times. Returns: bool: True if it\'s possible to arrange the flowers, False otherwise. # Sort intervals by blooming time intervals.sort() # Initialize the end variable with the ending time of the first interval end = intervals[0][1] for i in range(1, N): # If the next flower blooms after the current one has wilted, return False if intervals[i][0] > end: return False # Update the end to the maximum wilting time encountered end = max(end, intervals[i][1]) return True def flowers_blooming_possible(N, data): if can_arrange_flowers(N, data): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Eva has a sequence of n integers a_1, a_2, ldots, a_n. She wants to perform some operations on this sequence. An operation consists of choosing a contiguous subsequence of the array and reversing it. For example, if the initial sequence is [3, 5, 2, 6, 1], and she chooses to reverse the subsequence from the 2nd to the 4th elements (inclusive), the resulting sequence would be [3, 6, 2, 5, 1]. Eva\'s goal is to make the sequence strictly increasing (i.e., a_1 < a_2 < ldots < a_n) with the minimum number of operations. Determine the minimum number of operations required to achieve this goal. ----- Input ----- The first line contains one integer n (2 le n le 100,000). The second line contains n integers, a_1, a_2, ldots, a_n (1 le a_i le 200,000). ----- Output ----- Print one integer: the minimum number of operations required to make the sequence strictly increasing. ----- Examples ----- Input 5 3 1 2 5 4 Output 2 Input 3 2 3 1 Output 1 Input 6 1 2 3 4 5 6 Output 0 ----- Note ----- In the first example, the sequence can be sorted in two operations: reverse the subsequence [1, 2] to get [3, 2, 1, 5, 4], and then reverse the subsequence [3, 2, 1] to get [1, 2, 3, 5, 4], and finally reverse the subsequence [5, 4] to get [1, 2, 3, 4, 5]. In the second example, the sequence can be sorted in one operation: reverse the entire sequence to get [1, 2, 3]. In the third example, the sequence is already strictly increasing, so no operations are needed.","solution":"def min_operations_to_sort_sequence(n, sequence): Determine the minimum number of operations required to make the sequence strictly increasing. Args: n (int): The length of the sequence. sequence (List[int]): The sequence of integers. Returns: int: The minimum number of operations. from bisect import bisect_left lis = [] for x in sequence: pos = bisect_left(lis, x) if pos < len(lis): lis[pos] = x else: lis.append(x) # Length of LIS lis_length = len(lis) # Minimum number of operations return n - lis_length"},{"question":"You are given an n x n grid where each cell contains an integer. You are required to start at the top-left corner of the grid and move to the bottom-right corner. From each cell, you can move either right or down to the next cell. You want to find the minimal path sum from the top-left corner to the bottom-right corner, such that the sum of the integers along the path is minimal. For example, consider the following grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The path with the minimal sum is 1→3→1→1→1, which gives a sum of 7. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer n denoting the dimensions of the grid. - The next n lines each contain n integers, representing the grid. -----Output----- For each test case, print a single integer, the minimal path sum from the top-left to the bottom-right corner of the grid. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 -----Example----- Input: 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 Output: 7 3","solution":"def minimal_path_sum(grid): Given a 2D grid of integers, find the minimal path sum from the top-left corner to the bottom-right corner, where you can only move either right or down. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and first column for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def solve_minimal_path_sum(test_cases): results = [] for grid in test_cases: results.append(minimal_path_sum(grid)) return results def parse_input(input_data): Parses the input data into the required format. lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append(grid) index += n + 1 return test_cases"},{"question":"Write a function that accepts a string as input and returns a new string where every character is duplicated. Example: ```python double_char(\\"hello\\") # => returns \\"hheelllloo\\" ``` ```f# doubleChar \\"hello\\" // => returns \\"hheelllloo\\" ``` Note: - The input string can contain alphabets (both upper and lower case) and non-alphabet characters. - Ensure that the function handles empty strings appropriately by returning an empty string.","solution":"def double_char(s): Returns a new string where every character in the input string is duplicated. :param s: The input string :return: A new string with each character duplicated return \'\'.join([c * 2 for c in s])"},{"question":"# Task You are provided with an array of integers representing the capacities of containers and the exact volume of water you need to measure using these containers. Each container can be filled to its capacity or left empty, but you can only measure exact volumes that can be formed by combining the capacities of the provided containers any number of times. Write a function that determines if it is possible to measure the exact volume of water using the given containers. # Input/Output - `[input]` integer array `capacities` The capacities of the containers. `1 <= capacities.length <= 20` `1 <= capacities[i] <= 1000` - `[input]` integer `volume` The exact volume of water you need to measure. `0 <= volume <= 10000` - `[output]` a boolean value `true` if it is possible to measure the exact volume using the provided containers, `false` otherwise.","solution":"def can_measure_exact_volume(capacities, volume): Determines if the exact volume can be measured using the provided containers. Args: capacities (list): List of integer capacities of the containers. volume (int): The exact volume of water needed. Returns: bool: True if the exact volume can be measured using the containers, False otherwise. dp = [False] * (volume + 1) dp[0] = True for cap in capacities: for j in range(cap, volume + 1): if dp[j - cap]: dp[j] = True return dp[volume]"},{"question":"You are given a dictionary in the following format: ```python inventory = { \\"apples\\": 5, \\"oranges\\": 3, \\"bananas\\": 2 } ``` Each key represents a type of item, and each value represents the quantity of that item in stock. Write a function `update_inventory()` that takes two arguments: the `inventory` dictionary and a second dictionary `new_shipment` which has the same format as `inventory`, but represents a new shipment of items. Your function should update each item\'s quantity in the `inventory` dictionary by adding the corresponding quantity from the `new_shipment`. If an item in the `new_shipment` is not present in the `inventory`, it should be added to the `inventory`. For example, given the following `new_shipment`: ```python new_shipment = { \\"apples\\": 3, \\"oranges\\": 2, \\"grapes\\": 4 } ``` the function should update the `inventory` as: ```python inventory = { \\"apples\\": 8, \\"oranges\\": 5, \\"bananas\\": 2, \\"grapes\\": 4 } ``` The updated `inventory` should then be returned.","solution":"def update_inventory(inventory, new_shipment): Updates the inventory dictionary by adding the quantities from new_shipment. If an item in new_shipment is not present in inventory, it is added to the inventory. Args: inventory (dict): The original inventory of items. new_shipment (dict): The new shipment of items to be added to the inventory. Returns: dict: The updated inventory with quantities from new_shipment added. for item, quantity in new_shipment.items(): if item in inventory: inventory[item] += quantity else: inventory[item] = quantity return inventory"},{"question":"Given a grid of size N times M consisting of \'.\' and \'#\', where \'.\' represents a passable cell and \'#\' represents an impassable cell, determine the length of the longest path from the top-left corner to the bottom-right corner. You can only move right or down at each step. If it is impossible to reach the bottom-right corner, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The next N lines each contain M characters (\'.\' or \'#\'), representing the grid. -----Output----- For each test case, print a single line containing one integer ― the length of the longest path from the top-left corner to the bottom-right corner, or -1 if it is impossible to reach the bottom-right corner. -----Constraints----- - 1 le T le 100 - 1 le N, M le 100 - The cell at the top-left corner and the cell at the bottom-right corner will always be \'.\'. -----Example Input----- 2 3 3 ... .#. ... 4 4 .... .. .#.. .... -----Example Output----- 4 6 -----Explanation----- For the first test case, the optimal path takes 4 steps: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). For the second test case, the optimal path takes 6 steps: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3).","solution":"def longest_path_in_grid(T, test_cases): results = [] for case in test_cases: N, M, grid = case if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': results.append(-1) continue # DP array to store the longest path length to each cell dp = [[-1] * M for _ in range(N)] dp[0][0] = 0 for i in range(N): for j in range(M): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + 1) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + 1) result = dp[N-1][M-1] results.append(result if result != -1 else -1) return results"},{"question":"# Check if a String Contains All Alphabet Letters Write a function that checks if a given string contains all the letters of the English alphabet at least once. The function should ignore case and any non-alphabet characters. For example: ```python import string def is_pangram(s): alphabet = set(string.ascii_lowercase) s = s.lower() return set(filter(lambda x: x in alphabet, s)) == alphabet # Example Outputs print(is_pangram(\'The quick brown fox jumps over the lazy dog\')) # Should return True print(is_pangram(\'Hello, World!\')) # Should return False print(is_pangram(\'Pack my box with five dozen liquor jugs\')) # Should return True ```","solution":"import string def is_pangram(s): Checks if the string contains all the letters of the English alphabet at least once. The function ignores case and any non-alphabet characters. :param s: The input string to be checked :return: True if the string is a pangram, False otherwise alphabet = set(string.ascii_lowercase) s = s.lower() return set(filter(lambda x: x in alphabet, s)) == alphabet"},{"question":"**Given an array of distinct integers, identify and return all possible subsets of the array (the power set). Each subset should be sorted in non-descending order, and the entire collection of subsets should be sorted lexicographically (as strings). Create a function called `powerSet()` that accepts an array of distinct integers and returns the power set.** ``` powerSet([1, 2, 3]); // [ // [], // [1], // [1, 2], // [1, 2, 3], // [1, 3], // [2], // [2, 3], // [3] // ] powerSet([3, 1, 2]); // [ // [], // [1], // [1, 2], // [1, 2, 3], // [1, 3], // [2], // [2, 3], // [3] // ] ``` Note: - An empty set is a part of the power set. - The function should handle arrays of variable lengths but does not need to handle duplicates since input only contains distinct integers. - Each subset in the power set should be sorted in non-descending order. - The entire power set should be sorted lexicographically when represented as a string for each subset.","solution":"from itertools import chain, combinations def powerSet(input_list): Returns the power set of the input_list. Each subset is sorted and the entire collection of subsets is sorted lexicographically. input_list = sorted(input_list) subsets = list(chain.from_iterable(combinations(input_list, r) for r in range(len(input_list) + 1))) sorted_subsets = sorted(subsets, key=lambda x: (len(x), x)) return [list(subset) for subset in sorted_subsets]"},{"question":"Create a function that takes a list of integers and returns the sum of all prime numbers in the list. If there are no prime numbers in the list, the function should return 0. Remember, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Function Signature: ```python def sum_of_primes(numbers: List[int]) -> int: ``` # Example: ```python assert sum_of_primes([2, 3, 4, 5, 6]) == 10 # 2 + 3 + 5 = 10 assert sum_of_primes([1, 4, 6, 8]) == 0 # No prime numbers assert sum_of_primes([7, 13, 19, 23]) == 62 # 7 + 13 + 19 + 23 = 62 ```","solution":"from typing import List def is_prime(n: int) -> bool: Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(numbers: List[int]) -> int: Returns the sum of all prime numbers in the list. return sum(n for n in numbers if is_prime(n))"},{"question":"Sarah is developing a new image processing application and needs to implement a feature that detects the largest square block of pixels in an image that have the same color. Each pixel is represented by a number (ranging from 0 to 255), on a 2D grid. Given a matrix of integers representing pixel colors, your task is to find the size of the largest square sub-matrix where all the elements are the same. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers M and N, the dimensions of the matrix. - Each of the next M lines contains N space-separated integers, where each integer represents a color of a pixel. -----Output----- For each test case, print a single line containing one integer ― the size of the largest square sub-matrix with all equal elements. -----Constraints----- - 1 le T le 10 - 1 le M, N le 500 - 0 le A[i][j] le 255 for each valid i, j -----Example Input----- 1 3 3 1 1 1 1 1 1 1 1 1 -----Example Output----- 3 -----Explanation----- Example case 1: The entire matrix is one big 3x3 square where all elements are 1. Thus, the size of the largest square sub-matrix with all equal elements is 3.","solution":"def largest_square_block(matrix): if not matrix: return 0 M = len(matrix) N = len(matrix[0]) dp = [[0] * N for _ in range(M)] max_side = 0 for i in range(M): for j in range(N): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side def process_test_cases(test_cases): results = [] for matrix in test_cases: result = largest_square_block(matrix) results.append(result) return results"},{"question":"Write a function that takes a list of integers and returns a list containing the even numbers followed by the odd numbers, both groups sorted in ascending order. Maintain this sequence even if the original list contains negative integers. For example, given the list `[7, -3, 4, 2, -1, 0, -5, 8, -6]`, the output should be `[-6, 0, 2, 4, 8, -5, -3, -1, 7]`. # Notes: - You can assume that the input list contains at least one integer. - The function should handle negative numbers correctly. - Do not modify the input list. # Example: ```python def sort_even_odd(lst): # your code here print(sort_even_odd([7, -3, 4, 2, -1, 0, -5, 8, -6])) # should print [-6, 0, 2, 4, 8, -5, -3, -1, 7] ```","solution":"def sort_even_odd(lst): Returns a list containing the even numbers followed by the odd numbers, both groups sorted in ascending order. evens = sorted([x for x in lst if x % 2 == 0]) odds = sorted([x for x in lst if x % 2 != 0]) return evens + odds"},{"question":"Given a list of integers, your task is to create a new list where each element at index i (from 0 to n-1) is the nearest greater element to the right of the corresponding element in the original list. If there is no greater element to the right, place -1 at that index in the new list. The nearest greater element is the first greater element encountered when moving to the right on the given list. -----Input----- The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer n, the number of elements in the list. - The second line contains n space-separated integers representing the list. -----Output----- For each test case, output a single line containing n space-separated integers representing the new list. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ n ≤ 10^5 - 1 ≤ list[i] ≤ 10^9 -----Example----- Input: 3 4 1 3 2 4 5 5 6 7 8 9 6 9 7 6 5 4 3 Output: 3 4 4 -1 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -----Explanation----- Example case 1. - For index 0: the nearest greater element to the right of 1 is 3. - For index 1: the nearest greater element to the right of 3 is 4. - For index 2: the nearest greater element to the right of 2 is 4. - For index 3: there is no greater element to the right of 4, so we place -1. Example case 2. - For all indices, the next element is greater than the current, except at the last index which has no greater element to the right. Example case 3. - For all indices, there is no greater element to the right, hence all elements in the new list are -1.","solution":"def nearest_greater_elements(test_cases): This function takes a list of test cases with lists of integers and returns new lists where each element at index i is the nearest greater element to the right of the corresponding element in the original list, or -1 if no such element exists. results = [] for case in test_cases: n, lst = case result = [-1] * n stack = [] for i in range(n - 1, -1, -1): while stack and stack[-1] <= lst[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(lst[i]) results.append(result) return results"},{"question":"Alice is an avid puzzle solver, and she loves challenges that involve strings and numbers. One day, she encountered a new type of puzzle involving strings and a special transformation. The transformation involves converting a given string into an integer by interpreting each character as its corresponding position in the alphabetical order and then summing up these positions. For example, \'a\' is 1, \'b\' is 2, and so on up to \'z\' which is 26. She wants to determine the sum of this special transformation for various strings and find the remainder when this sum is divided by a large prime number, 10^9+7. Formally, you are given multiple test cases. For each test case, you are provided a string. For each string, transform it into a sum of positions in the alphabetical order and then compute the result modulo 10^9+7. -----Input----- The input consists of multiple test cases. The first line contains one integer t (1 leq t leq 10^5) — the number of test cases. Each test case is described as follows: a single line containing a string s (1 leq |s| leq 10^6) consisting of lowercase English letters. The sum of the lengths of all strings over all test cases does not exceed 10^6. -----Output----- For each test case, output one integer — the transformation result modulo 1,000,000,007. -----Example----- Input 3 abc z hello Output 6 26 52 -----Note----- In the first test case, \\"abc\\" is transformed to 1 + 2 + 3 = 6. In the second test case, \\"z\\" is transformed to 26. In the third test case, \\"hello\\" is transformed to 8 + 5 + 12 + 12 + 15 = 52.","solution":"def string_to_alpha_sum_mod(string): Converts a string to the sum of its characters\' alphabetical positions and returns the result modulo 10^9+7. MOD = 10**9 + 7 total_sum = sum(ord(char) - ord(\'a\') + 1 for char in string) return total_sum % MOD def process_test_cases(t, strings): Processes multiple test cases, computing the alpha sum modulo for each string. results = [] for string in strings: results.append(string_to_alpha_sum_mod(string)) return results # Example usage: # t = 3 # strings = [\\"abc\\", \\"z\\", \\"hello\\"] # print(process_test_cases(t, strings)) # Output: [6, 26, 52]"},{"question":"Given an integer array nums and an integer k, determine whether the array contains any duplicates within k indices of each other. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: true Explanation: The element nums[3] is a duplicate of nums[0], and they are at most 3 indices apart. Example 2: Input: nums = [1, 0, 1, 1], k = 1 Output: true Explanation: The element nums[3] is a duplicate of nums[2], and they are at most 1 index apart. Example 3: Input: nums = [1, 2, 3, 1, 2, 3], k = 2 Output: false Explanation: While there are duplicates in the array, none of them are within 2 indices of each other. Example 4: Input: nums = [4, 5, 6, 7, 8, 9, 4], k = 5 Output: false Explanation: The duplicates in the array are more than 5 indices apart. Example 5: Input: nums = [1, 2, 3, 4, 5, 1], k = 5 Output: true Explanation: The element nums[5] is a duplicate of nums[0], and they are exactly 5 indices apart. Constraints: - nums.length == n - 1 <= n <= 10^5 - -10^9 <= nums[i] <= 10^9 - 0 <= k <= 10^5","solution":"def contains_nearby_duplicate(nums, k): Determine whether the array contains any duplicates within k indices of each other. Args: nums: List[int] - List of integers. k: int - Range within which to check for duplicates. Returns: bool - True if a duplicate is found within k indices apart, False otherwise. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Assume you have a string comprised of lowercase English letters and you want to rearrange it such that no two adjacent characters are the same. If multiple rearrangements are possible, return any one of them. If it is not possible to rearrange the string in such a way, return an empty string. For example: ``` rearrange_string(\\"aabb\\") -> \\"abab\\" or \\"baba\\" rearrange_string(\\"aaabbc\\") -> \\"ababac\\" or any other valid rearrangement rearrange_string(\\"aaab\\") -> \\"\\" (since there is no way to rearrange it such that no two adjacent characters are the same) ``` Write a function `rearrange_string(s: str) -> str` to achieve the above.","solution":"import heapq from collections import Counter def rearrange_string(s: str) -> str: Rearranges the string \'s\' such that no two adjacent characters are the same. If it is not possible, returns an empty string. counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_str = \'\'.join(result) if len(rearranged_str) != len(s): return \\"\\" return rearranged_str"},{"question":"Complete the function that takes as input a string and returns a new string where each character in the original string is repeated once. For example: - `double_char(\'String\')` -> `\'SSttrriinngg\'` - `double_char(\'Hello World!\')` -> `\'HHeelllloo WWoorrlldd!!\'` - `double_char(\'1234!_ \')` -> `\'11223344!!__ \'`","solution":"def double_char(s): Returns a string where each character in the original string is repeated once. Parameters: s (str): The input string Returns: str: The transformed string with each character repeated once return \'\'.join([char * 2 for char in s])"},{"question":"A palindrome is a string that reads the same forward and backward. Typically, we only consider alphanumeric characters and ignore casing and non-alphanumeric characters when determining if a string is a palindrome. However, for this problem, you will implement a more advanced palindrome-checking function that considers all characters and casing. Write a function `is_advanced_palindrome(s: str) -> bool` that checks if the given string `s` is a palindrome in the advanced way described above. Your function should return `True` if the string is an advanced palindrome, and `False` otherwise. Examples: ``` is_advanced_palindrome(\\"A man, a plan, a canal, Panama\\") -> False is_advanced_palindrome(\\"No lemon, no melon\\") -> False is_advanced_palindrome(\\"Able was I ere I saw Elba\\") -> False is_advanced_palindrome(\\"abba\\") -> True is_advanced_palindrome(\\"aBba\\") -> False ``` Hints: - Consider the complete string, including all special characters and spaces. - Pay attention to case sensitivity.","solution":"def is_advanced_palindrome(s: str) -> bool: Checks if the given string s is a palindrome by considering all characters and case sensitivity. return s == s[::-1]"},{"question":"Complete the function that takes an integer n and returns a list of all prime numbers less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples ``` 10 ==> [2, 3, 5, 7] 20 ==> [2, 3, 5, 7, 11, 13, 17, 19] 5 ==> [2, 3] ```","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function that takes a list of integers and returns the greatest product of any three integers in the list. For example: ```python max_product_of_three([1, 10, 3, 5, 2]); # 150 (10 * 3 * 5) max_product_of_three([-10, -10, 1, 3, 2]); # 300 (-10 * -10 * 3) ``` Consider the possibility of negative numbers and ensure your function can handle lists with both positive and negative integers. ```if:nasm max_product_of_three: ```","solution":"def max_product_of_three(nums): nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given a sequence of Fibonacci numbers: `0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...`. Notice that `0` is in position `one`. A Fibonacci number is called a **\\"special Fibonacci\\"** if it is even and the sum of its digits is a prime number. For example: - `2` is in position `four` (the digit sum is `2`, which is prime). - `34` is in position `nine` (the digit sum is `3 + 4 = 7`, which is prime). Given a range `(a, b)`, what is the sum of special Fibonacci numbers within that range? Note that `a <= position <= b` and `b` will not exceed `10^6`. Good luck!","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def digit_sum(n): Return the sum of the digits of a number. return sum(int(digit) for digit in str(n)) def fibonacci(n): Generate the first n Fibonacci numbers. fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence def sum_special_fibonacci(a, b): Sum all special Fibonacci numbers from position a to b (1-indexed). A \\"special Fibonacci\\" number is an even Fibonacci number whose digit sum is a prime number. # Generate Fibonacci numbers up to position b if b <= 2: b = 3 # We need at least two initial Fibonacci numbers fib_sequence = fibonacci(b) special_sum = 0 for i in range(a - 1, b): # Convert to 0-indexed if fib_sequence[i] % 2 == 0 and is_prime(digit_sum(fib_sequence[i])): special_sum += fib_sequence[i] return special_sum"},{"question":"In a futuristic world, a new advanced digital currency called \\"Digicoins\\" has been invented. The concept of banks has become obsolete and transactions are conducted through personal digital wallets. Each wallet has a unique ID and a balance of Digicoins. To promote financial stability, the government has issued a policy mandating that the sum of Digicoins in a range of wallet IDs must meet a minimum threshold. Your task is to help people determine if their wallets are compliant with the new policy. Given a sequence of wallet balances and a number of queries, each query will specify a range of wallet IDs and a minimum threshold. For each query, determine if the sum of balances in the given range meets or exceeds the threshold. ----- Input: ----- - The first line contains an integer N, the number of wallets. - The second line contains N space-separated integers representing the balance of Digicoins in each wallet. - The third line contains an integer Q, the number of queries. - Each of the next Q lines contains three integers L, R, and T, representing the range of wallet IDs (inclusive, 1-based indexing) and the minimum threshold. ----- Output: ----- - For each query, output \\"YES\\" if the sum of balances in the specified range meets or exceeds the threshold T, otherwise output \\"NO\\". ----- Constraints: ----- - 1 leq N leq 10^5 - 1 leq balance_i leq 10^4 for 1 leq i leq N - 1 leq Q leq 10^5 - 1 leq L leq R leq N - 1 leq T leq 10^9 ----- Sample Input: ----- 5 10 20 30 40 50 3 1 3 60 2 5 120 1 5 200 ----- Expected Output: ----- YES YES NO ----- Explanation: ----- 1. For the first query, the sum of balances from wallet 1 to 3 is 10 + 20 + 30 = 60 which is equal to the threshold, so the output is \\"YES\\". 2. For the second query, the sum of balances from wallet 2 to 5 is 20 + 30 + 40 + 50 = 140 which exceeds the threshold, so the output is \\"YES\\". 3. For the third query, the sum of balances from wallet 1 to 5 is 10 + 20 + 30 + 40 + 50 = 150 which is less than the threshold, so the output is \\"NO\\".","solution":"def check_compliance(N, balances, Q, queries): Determines if the sum of balances in given ranges meets or exceeds the threshold. Parameters: N (int): Number of wallets balances (list): Balances of Digicoins in each wallet Q (int): Number of queries queries (list of tuples): Each tuple contains (L, R, T) representing the range and the threshold Returns: list: \\"YES\\" or \\"NO\\" for each query # Generate prefix sums for quick range sum queries prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i-1] + balances[i-1] results = [] # Process each query for L, R, T in queries: sum_in_range = prefix_sums[R] - prefix_sums[L-1] if sum_in_range >= T: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a function `longestCommonPrefix` which accepts an array of strings and returns the longest common prefix string among them. If there is no common prefix, return an empty string `\\"\\"`. # Notes - All given inputs are in lowercase. - If the input array is empty, return `\\"\\"`. - The input strings contain only lower-case English letters (`a-z`). # Example ```python Input: [\\"flower\\", \\"flow\\", \\"flight\\"] Output: \\"fl\\" Input: [\\"dog\\", \\"racecar\\", \\"car\\"] Output: \\"\\" ```","solution":"def longestCommonPrefix(strs): if not strs: return \\"\\" prefix = strs[0] for string in strs[1:]: while string[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] if not prefix: break return prefix"},{"question":"Write a function that takes a list of integers and a target sum, and returns all unique pairs of integers from the list that add up to the target sum. The pairs should be listed as tuples in a set. ```python find_pairs([1, 2, 3, 4, 5], 6) #= {(1, 5), (2, 4)} # 1 and 5 add up to 6 # 2 and 4 add up to 6 ``` Note - The order of the integers within each pair and the order of the pairs in the set does not matter. - Each pair should be unique (e.g., (1, 5) is the same as (5, 1) and should only be counted once). Constraints **1 <= len(list) <= 10^(5)** **-10^(6) <= element <= 10^(6)**","solution":"def find_pairs(nums, target): Returns a set of unique pairs of integers from the list \'nums\' that add up to the \'target\' sum. nums_seen = set() pairs = set() for num in nums: complement = target - num if complement in nums_seen: pairs.add((min(num, complement), max(num, complement))) nums_seen.add(num) return pairs"},{"question":"In text processing, a palindrome is a sequence of characters that reads the same backward and forward. Given a string, write a function \'longestPalindromeSubstr\' to find the longest substring of it which is a palindrome. For example: - Input : \\"babad\\" - Output: \\"bab\\" (Note: \\"aba\\" is also a valid answer, as both \\"bab\\" and \\"aba\\" are palindromes of the same length) - Input: \\"cbbd\\" - Output: \\"bb\\" Your function should efficiently find the longest palindromic substring. Consider edge cases where the input could be empty, a single character, or already a palindrome. Good luck!","solution":"def longestPalindromeSubstr(s: str) -> str: Function to find the longest palindromic substring. if not s: return \\"\\" if len(s) == 1: return s start = 0 max_length = 1 for i in range(1, len(s)): # Find the longest even length palindrome with center points as i-1 and i. low = i - 1 high = i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Find the longest odd length palindrome with center point as i. low = i - 1 high = i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"# Task You are to implement a basic CSV parser, a simplified version of a CSV parsing function. The function should take a string representing a CSV file and return a list of lists representing the data. CSV Format Rules 1. Fields are separated by commas (`,`). 2. Fields may contain double quotes (`\\"`). Fields containing commas or double quotes must be enclosed in double quotes. 3. A double quote character in a field must be represented by two double quote characters (`\\"\\"`). 4. Fields with leading or trailing whitespace should preserve those spaces. The provided CSV string will not have newlines within quoted text and will be well-formed according to the rules above. Examples ```python parse_csv(\'name,age,cityn\\"John Doe\\",30,\\"New York\\"\') # returns [[\'name\', \'age\', \'city\'], [\'John Doe\', \'30\', \'New York\']] parse_csv(\'product,quantity,pricen\\"Apple, Red\\",12,0.5n\\"Banana\\",30,\\"0.2\\"n\\"Grape, \\"Special\\"\\",100,\\"0.3\\"\') # returns [[\'product\', \'quantity\', \'price\'], [\'Apple, Red\', \'12\', \'0.5\'], [\'Banana\', \'30\', \'0.2\'], [\'Grape, \\"Special\\"\', \'100\', \'0.3\']] ``` Function Signature ```python def parse_csv(data: str) -> list: pass ```","solution":"def parse_csv(data: str) -> list: import csv from io import StringIO f = StringIO(data) reader = csv.reader(f, quoting=csv.QUOTE_MINIMAL) return [row for row in reader]"},{"question":"Andrew is fascinated by unique substrings of strings. He decided to solve a challenging problem involving palindromic substrings. Given a string S of length N, Andrew needs to count the number of unique palindromic substrings present in S. A palindromic substring is a substring which reads the same backward as forward. **Example:** For the string `ababa`, the palindromic substrings are `a`, `b`, `aba`, `bab`, `ababa`. However, `a` and `b` being repeated, the unique palindromic substrings are `a`, `b`, `aba`, `bab`, `ababa`. -----Input----- - The first and only line contains a string S of length N. -----Output----- - Output a single integer which represents the number of unique palindromic substrings in the string S. -----Constraints----- - 1 ≤ N ≤ 1000 - S will only contain lowercase English letters. **Example:** Input: ababa Output: 5 **Explanation:** The unique palindromic substrings in the string `ababa` are: - `a` - `b` - `aba` - `bab` - `ababa` So, the total number of unique palindromic substrings is 5.","solution":"def count_unique_palindromic_substrings(s): Returns the number of unique palindromic substrings in the string s. n = len(s) palindromic_substrings = set() # Function to expand around center and add palindromes to the set def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return len(palindromic_substrings)"},{"question":"Task Create a function that generates the nth Fibonacci sequence number. The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc. Starting at 1, 1 (i.e., the 1st and 2nd Fibonacci numbers are both 1), write a function to compute the nth Fibonacci number where n is a positive integer representing the position in the sequence. # Input - An integer `n` representing the position in the Fibonacci sequence (1-indexed). # Output - An integer representing the nth Fibonacci number. # Examples - `fib(1)` should return `1` - `fib(2)` should return `1` - `fib(3)` should return `2` - `fib(4)` should return `3` - `fib(5)` should return `5` - `fib(10)` should return `55` # Constraints - 1 ≤ n ≤ 30 # Notes - Do not use loops or iterative approaches. - Aim for a recursive solution or leveraging memoization techniques for optimization where necessary.","solution":"def fib(n, memo={1: 1, 2: 1}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n]"},{"question":"Description: In software development, it\'s often necessary to determine if an application session has expired. A common way to determine session validity is by comparing the current time to a stored timestamp marking the last activity. Your task is to write a function that checks if a session has expired. The function will receive two parameters: a timestamp representing the last activity and the session timeout duration in minutes. You should return `true` if the session has expired and `false` otherwise. Assume the current time is available as the variable `currentTime`, represented in the same format as the input timestamp. Examples: - Input: `lastActivity = 1622540000`, `timeout = 30` and `currentTime = 1622541800` --> Output: `true` (since the session has been inactive for more than 30 minutes) - Input: `lastActivity = 1622540000`, `timeout = 30` and `currentTime = 1622540800` --> Output: `false` (since the session has been inactive for less than 30 minutes) Notes: - The timestamp is given as a Unix timestamp (seconds since the Epoch). - Assume `currentTime` is always provided and is greater than or equal to `lastActivity`. - The timeout duration is always a positive integer.","solution":"def has_session_expired(lastActivity, timeout, currentTime): Returns True if the session has expired based on the last activity timestamp and the timeout duration in minutes, otherwise False. Parameters: lastActivity (int): Unix timestamp of the last activity timeout (int): Timeout duration in minutes currentTime (int): Current Unix timestamp Returns: bool: True if session has expired, False otherwise timeout_seconds = timeout * 60 expired = (currentTime - lastActivity) >= timeout_seconds return expired"},{"question":"Given a string of lowercase alphabetic characters, determine the length of the longest substring that contains all unique characters. For example, given the string `abcabcbb`: - The longest substring with all unique characters is `abc`, which has a length of 3. Another example, given the string `bbbbb`: - The longest substring with all unique characters is `b`, which has a length of 1. And one more example, given the string `pwwkew`: - The longest substring with all unique characters is `wke`, which has a length of 3. Note that the answer must be a substring, `pwke` is a subsequence and not a substring. Implement the function `length_of_longest_substring` to solve the problem. ```python def length_of_longest_substring(s: str) -> int: # Your code here # Examples: print(length_of_longest_substring(\\"abcabcbb\\")) # Output: 3 print(length_of_longest_substring(\\"bbbbb\\")) # Output: 1 print(length_of_longest_substring(\\"pwwkew\\")) # Output: 3 ``` Ensure you handle edge cases where the string could be empty.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. char_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Task Write a function `find_pairs` that takes an integer list `nums` and an integer `target` as parameters. The function should return a list of all unique pairs of values from `nums` whose sum is equal to `target`. Each pair should be presented as a list, sorted in non-descending order, and the overall list of pairs should also be sorted by the first element of each pair. # Constraints - The elements in `nums` are unique and the list length is between 2 and 1000. - The integer values in `nums` are between -1000 and 1000. - The integer `target` is between -2000 and 2000. # Examples `find_pairs([1, 2, 3, 4, 5], 5)` should return `[[1, 4], [2, 3]]`. `find_pairs([-1, 0, 1, 2, -2, -3], -1)` should return `[[-3, 2], [-2, 1], [-1, 0]]`. `find_pairs([3, 1, 4, 1, 5, 9, -2], 7)` should return `[[-2, 9], [3, 4]]`.","solution":"def find_pairs(nums, target): nums.sort() pairs = [] seen = set() for num in nums: complement = target - num if complement in seen: pairs.append([min(num, complement), max(num, complement)]) seen.add(num) pairs.sort() return pairs"},{"question":"Description We need a function that converts a snake_case string into a PascalCase string. PascalCase strings are where the first letter of each word is capitalized, and all words are concatenated without spaces. Snake_case strings have words separated by underscores (\'_\'). Examples ```python snake_to_pascal(\\"hello_world\\") == \\"HelloWorld\\" snake_to_pascal(\\"this_is_a_test\\") == \\"ThisIsATest\\" snake_to_pascal(\\"convert_me_to_pascal\\") == \\"ConvertMeToPascal\\" snake_to_pascal(\\"python_challenge\\") == \\"PythonChallenge\\" ```","solution":"def snake_to_pascal(snake_str): Converts a snake_case string to PascalCase string. Args: snake_str (str): String in snake_case format. Returns: str: String in PascalCase format. words = snake_str.split(\'_\') pascal_str = \'\'.join(word.capitalize() for word in words) return pascal_str"},{"question":"# Task Implement a function that takes a string `s` and an integer `k`, and shifts every letter in the string `s` by `k` positions in the alphabet. The shift wraps around, so if shifting a letter by `k` places exceeds the letter \'z\', it wraps back around to \'a\'. Spaces and punctuation in the string should remain unchanged. # Example For `s = \\"hello\\", k = 2`, the output should be `\\"jgnnq\\"`. For `s = \\"abc xyz!\\", k = 3`, the output should be `\\"def abc!\\"`. For `s = \\"shift by twenty-six\\", k = 26`, the output should be `\\"shift by twenty-six\\"`. # Input/Output - `[input]` string `s` `A non-empty string containing only alphanumeric characters and spaces.` - `[input]` integer `k` `An integer where 1 ≤ k ≤ 25.` - `[output]` a string","solution":"def shift_string(s, k): def shift_char(c, k): if c.islower(): return chr((ord(c) - ord(\'a\') + k) % 26 + ord(\'a\')) elif c.isupper(): return chr((ord(c) - ord(\'A\') + k) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(char, k) for char in s)"},{"question":"``` *********************** * Triangle Printing * * / * * / * * / * * / * * /_ _ _ _ _ _ _ _ * *********************** ``` Write a function that takes an integer `n` and prints an equilateral triangle with `n` rows. Each row in the triangle consists of `\'*\'`, aligned centrally, with appropriate spaces. Notes: - The base of the triangle will have `2n-1` `\'*\'` characters. - The triangle should be symmetrical. Example `print_triangle(3)` Output: ``` * *** ***** ``` `print_triangle(5)` Output: ``` * *** ***** ******* ********* ```","solution":"def print_triangle(n): Prints an equilateral triangle with n rows. for i in range(1, n + 1): spaces = \' \' * (n - i) stars = \'*\' * (2 * i - 1) print(spaces + stars + spaces)"},{"question":"Title]: Optimize the Warehouse Layout **Description:** You have been hired to optimize the layout of a warehouse. The warehouse consists of M rows and N columns, forming an M times N grid. Each cell of the grid contains a certain number of items. You can perform a single-row shift operation, which involves shifting items in any row to the left or right. After a shift, items that move out of the grid on one end reappear on the opposite end of the same row. Similarly, you can perform a single-column shift operation, which involves shifting items in any column up or down. After a shift, items that move out of the grid on one end reappear on the opposite end of the same column. Your task is to determine the minimum number of row and/or column shifts required to move all items from the top-left cell (0,0) to the bottom-right cell (M-1,N-1). **Input:** - The first line contains an integer T representing the number of test cases. - For each test case: - The first line contains two integers M and N representing the number of rows and columns in the warehouse grid. - The next M lines each contain N integers where the j-th integer in the i-th line represents the number of items in the cell (i,j) of the grid. **Output:** - For each test case, output a single integer representing the minimum number of shifts required to move all items from the top-left cell to the bottom-right cell. **Constraints:** - 1 le T le 10 - 1 le M, N le 100 - 0 le text{number of items in each cell} le 10^3 **Example Input:** ``` 2 2 2 1 2 3 4 3 2 1 2 3 4 5 6 ``` **Example Output:** ``` 3 9 ``` **Explanation:** In the first test case, the optimal solution could involve 2 right shifts of the first row and 1 down shift of the second column to move all items to the bottom-right cell. In the second test case, an optimal solution could involve several shifts to align all items at the bottom-right cell.","solution":"def min_shifts_to_bottom_right(t, cases): results = [] for case in cases: M, N, grid = case total_items = sum(sum(row) for row in grid) results.append(total_items) return results # Example cases t = 2 cases = [ (2, 2, [ [1, 2], [3, 4] ]), (3, 2, [ [1, 2], [3, 4], [5, 6] ]) ] print(min_shifts_to_bottom_right(t, cases))"},{"question":"Task Write a function that takes a list of integers and returns a dictionary with two keys: `\\"evens\\"` and `\\"odds\\"`. The value associated with `\\"evens\\"` should be a list of all even numbers from the input list, and the value associated with `\\"odds\\"` should be a list of all odd numbers from the input list. The integers in the result lists should appear in the same order as they do in the input list. Examples ```python [ 1, 2, 3, 4, 5, 6 ] => { \\"evens\\": [ 2, 4, 6 ], \\"odds\\": [ 1, 3, 5 ] } [ 7, 8, 9, 10, 1 ] => { \\"evens\\": [ 8, 10 ], \\"odds\\": [ 7, 9, 1 ] } ``` Please upvote and enjoy!","solution":"def separate_even_odd(numbers): Separates a list of integers into even and odd numbers. Args: numbers (list of int): A list of integers. Returns: dict: A dictionary with keys \'evens\' and \'odds\', containing lists of even and odd numbers, respectively. result = {\\"evens\\": [], \\"odds\\": []} for number in numbers: if number % 2 == 0: result[\\"evens\\"].append(number) else: result[\\"odds\\"].append(number) return result"},{"question":"Create a function that takes a list of integers and returns a string representation of the list where each integer is separated by a comma and a space. However, if the list is empty, the function should return the string \\"empty list\\". Expected results: ```python list_to_string([1, 2, 3, 4, 5]) ==> \\"1, 2, 3, 4, 5\\" list_to_string([10, 20, 30]) ==> \\"10, 20, 30\\" list_to_string([]) ==> \\"empty list\\" ```","solution":"def list_to_string(lst): Returns a string representation of the list where each integer is separated by a comma and a space. If the list is empty, returns the string \\"empty list\\". if not lst: return \\"empty list\\" return \\", \\".join(map(str, lst))"},{"question":"Mary is a castle architect and she loves designing strongly connected castles. A castle consists of several rooms connected by one-directional passages. A castle is considered strongly connected if there is a path from any room to any other room by following the passages either directly or through other rooms. Mary wants to create a castle with `n` rooms, where each room is labeled with a unique integer from 1 to `n`. Your task is to help her design this castle so that it is strongly connected. To make things interesting, Mary wants to have exactly `m` one-directional passages. -----Input----- The first line of the input contains two integers `n` (2 ≤ n ≤ 100) and `m` (n - 1 ≤ m ≤ 10^4) — the number of rooms and the number of passages respectively. -----Output----- Print `m` lines each containing two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing a one-directional passage from room `u` to room `v`. Ensure the castle is strongly connected with the given passages. If there are multiple solutions, print any of them. -----Examples----- Input 4 5 Output 1 2 2 3 3 4 4 1 1 3 Input 3 3 Output 1 2 2 3 3 1 -----Note----- In the first sample case, Mary has 4 rooms and wants 5 passages. A possible solution is to connect them in a circular manner (1 -> 2 -> 3 -> 4 -> 1) and add an additional passage (1 -> 3) to ensure strong connectivity. In the second sample case, Mary has 3 rooms and wants 3 passages. By connecting them in a circular manner (1 -> 2 -> 3 -> 1), the castle remains strongly connected.","solution":"def generate_strongly_connected_castle(n, m): Generates exactly m one-directional passages that make the castle of n rooms strongly connected. Parameters: n (int): Number of rooms. m (int): Number of passages. Returns: list of tuples: Each tuple contains two integers representing a one-directional passage from room u to room v. passages = [] # Step 1: Create a basic ring to ensure strong connectivity for i in range(1, n): passages.append((i, i + 1)) passages.append((n, 1)) # Step 2: Add additional passages if m > n additional_passages_needed = m - n current_room = 1 for i in range(additional_passages_needed): from_room = current_room to_room = (current_room + 2) % n + 1 passages.append((from_room, to_room)) current_room = (current_room % n) + 1 return passages"},{"question":"Write a function that finds the maximum length of a contiguous subarray within a given array of integers where the absolute difference between any two elements in the subarray is less than or equal to 1. E.g. Given the array `A1` equal to `[8, 2, 3, 3, 2, 4, 8, 9]`, the longest subarray that satisfies this condition is `[2, 3, 3, 2]`. So, the output should be `4`. For another array `A2` equals to `[1, 1, 1, 1, 1]`, the longest subarray that satisfies the condition is the whole array itself. Hence, the output should be `5`. Write a function `longest_contiguous_subarray(arr)` that takes in a list of integers as input and returns the length of the longest contiguous subarray that meets the condition. Features of the random tests: ``` number of tests = 100 1 <= len(arr) <= 10^5 -10^4 <= arr[i] <= 10^4 ```","solution":"def longest_contiguous_subarray(arr): Find the maximum length of a contiguous subarray within the given array where the absolute difference between any two elements is less than or equal to 1. Args: arr (list of int): List of integers. Returns: int: Length of the longest contiguous subarray. if not arr: return 0 # Initialize variables max_length = 1 current = 1 # Traverse the array for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= 1: current += 1 else: max_length = max(max_length, current) current = 1 max_length = max(max_length, current) # Return the longest length found return max_length"},{"question":"Task: Given a list of non-negative integers, return a list of the same length where each element represents the count of how many aliquot divisors the original element has. An aliquot divisor of a number is any divisor of that number excluding the number itself. **Example:** ```python aliquot_divisors([6, 8, 10]) == [3, 3, 3] ``` Explanation: - 6 has aliquot divisors: [1, 2, 3]. - 8 has aliquot divisors: [1, 2, 4]. - 10 has aliquot divisors: [1, 2, 5]. Hence, the function should return `[3, 3, 3]`. **Note:** Your solution should handle the edge case of `0`. By definition, `0` has an infinite number of divisors (every number divides 0), however, for the purpose of this problem, assume that `0` has `0` aliquot divisors. **Example:** ```python aliquot_divisors([0, 1, 2, 3, 5]) == [0, 0, 1, 1, 1] ``` Explanation: - 0 has aliquot divisors: [], thus count is 0. - 1 has aliquot divisors: [], thus count is 0. - 2 has aliquot divisors: [1], thus count is 1. - 3 has aliquot divisors: [1], thus count is 1. - 5 has aliquot divisors: [1], thus count is 1. Hence, the function should return `[0, 0, 1, 1, 1]`.","solution":"def aliquot_divisors(lst): Takes a list of non-negative integers and returns a list where each element represents the count of how many aliquot divisors the original element has. def count_aliquot_divisors(n): if n == 0: return 0 divisors = [i for i in range(1, n) if n % i == 0] return len(divisors) return [count_aliquot_divisors(x) for x in lst]"},{"question":"# Square-free Numbers A number is square-free if it is not divisible by any perfect square greater than 1. Given an integer `num`, write a function `is_square_free` that returns `True` if `num` is square-free, and `False` otherwise. Your task In this Kata, you will be tasked with determining whether the given integer (`0 < num < 10000000`) is a square-free number. Examples Consider the number `10`. It is square-free because it is not divisible by any perfect squares greater than 1 (4, 9, 16, etc.). Another example is `18`. It is not square-free because it is divisible by 9 (which is `3^2`). Additional examples: | **num** | **returns** | | ------ | ---------- | | 10 | True | | 18 | False | | 29 | True | | 36 | False | Note You may assume the input is always a positive integer within the specified range.","solution":"import math def is_square_free(num): Returns True if num is a square-free number, False otherwise. if num < 2: # 0 and 1 are trivially square-free by definition. return True for i in range(2, int(math.sqrt(num)) + 1): if num % (i * i) == 0: return False return True"},{"question":"You are given an array A of N integers. You have to choose a contiguous subarray A_l, A_{l+1}, ldots, A_r such that the sum of the subarray elements is divisible by a given integer K. If such a subarray does not exist, return -1; otherwise, return the length of the smallest subarray that satisfies the condition. -----Input:----- - The first line of the input contains an integer T, the number of test cases. The description of the T test cases follows. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output:----- For each test case, print a single integer – the length of the smallest contiguous subarray whose sum is divisible by K, or -1 if no such subarray exists. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 1 le K le 10^9 - -10^9 le A_i le 10^9 for each valid i -----Sample Input:----- 2 5 3 1 2 3 4 5 4 7 1 1 1 1 -----Sample Output:----- 2 -1","solution":"def smallest_subarray_with_sum_divisible_by_k(t, test_cases): Function to find the smallest subarray length with sum divisible by K. results = [] for test_case in test_cases: N, K = test_case[\\"N\\"], test_case[\\"K\\"] A = test_case[\\"A\\"] prefix_sum = 0 mod_map = {0: -1} min_length = float(\\"inf\\") for i in range(N): prefix_sum += A[i] mod_value = prefix_sum % K # adjust negative mod_value if mod_value < 0: mod_value += K if mod_value in mod_map: subarray_length = i - mod_map[mod_value] min_length = min(min_length, subarray_length) else: mod_map[mod_value] = i result = min_length if min_length != float(\\"inf\\") else -1 results.append(result) return results # Helper function to parse input and form test cases def parse_input(input_data): lines = input_data.split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): N, K = map(int, lines[index].split()) A = list(map(int, lines[index + 1].split())) test_cases.append({\\"N\\": N, \\"K\\": K, \\"A\\": A}) index += 2 return t, test_cases"},{"question":"A coding challenge platform wants to introduce a new feature where users can create collections of their favorite problems. Each user has a unique list of problems they have solved so far, and they can add any of these problems to their favorite collection. The platform needs a feature to load the favorite collection of problems for a given user and to ensure they are displayed in the order they were added to the collection. To help the platform, you need to implement the following functionalities using a dictionary where each key is a user\'s unique ID and the value is a list that maintains the order of problem IDs in their favorite collection: 1. **add_problem_to_favorites(user_id, problem_id)** - This function should add a new problem to the user\'s favorite list. If the problem already exists in the list, it should not be added again. 2. **remove_problem_from_favorites(user_id, problem_id)** - This function should remove a problem from the user\'s favorite list. If the problem does not exist in the list, nothing should happen. 3. **get_favorites_order(user_id)** - This function should return the list of problem IDs in the order they were added to the favorites. Write these three functions in Python. Assume that user_id and problem_id are always valid integers. **Example:** ```python add_problem_to_favorites(1, 101) add_problem_to_favorites(1, 102) add_problem_to_favorites(1, 103) print(get_favorites_order(1)) # Output: [101, 102, 103] add_problem_to_favorites(1, 102) print(get_favorites_order(1)) # Output: [101, 102, 103] (102 should not be added again) remove_problem_from_favorites(1, 102) print(get_favorites_order(1)) # Output: [101, 103] (102 is removed) ``` Implement the functions in such a way to ensure efficiency even with a large number of users and problems.","solution":"class ProblemCollection: def __init__(self): self.user_favorites = {} def add_problem_to_favorites(self, user_id, problem_id): if user_id not in self.user_favorites: self.user_favorites[user_id] = [] if problem_id not in self.user_favorites[user_id]: self.user_favorites[user_id].append(problem_id) def remove_problem_from_favorites(self, user_id, problem_id): if user_id in self.user_favorites: if problem_id in self.user_favorites[user_id]: self.user_favorites[user_id].remove(problem_id) def get_favorites_order(self, user_id): if user_id in self.user_favorites: return self.user_favorites[user_id] return []"},{"question":"A binary tree is a data structure where each node has at most two children, referred to as the left child and the right child. A Binary Search Tree (BST) is a special kind of binary tree where for every node, the value of all the nodes in the left subtree is less than the node\'s value, and the value of all the nodes in the right subtree is greater than the node\'s value. Given a binary tree, your task is to check if it is a Binary Search Tree (BST). **Input:** - A single line string representation of a binary tree in pre-order traversal where each node is a tuple written as `(value,left_subtree,right_subtree)`. An empty subtree is represented by `null`. **Output:** - Return `\\"True\\"` if the binary tree is a BST, otherwise return `\\"False\\"`. **Constraints:** - The values of the tree nodes are unique integers. - The number of nodes in the binary tree will not exceed 10^5. **Example:** Input: ``` (10,(5,(1,null,null),(8,null,null)),(15,(12,null,null),(20,null,null))) ``` Output: ``` True ``` Input: ``` (10,(5,(1,null,null),(12,null,null)),(15,(7,null,null),(20,null,null))) ``` Output: ``` False ```","solution":"class Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def parse_tree(preorder_str): if preorder_str == \'null\': return None if preorder_str[0] != \'(\' and preorder_str[-1] != \')\': return Node(int(preorder_str)) stack = [] i = 0 while i < len(preorder_str): if preorder_str[i] == \'(\': stack.append(i) elif preorder_str[i] == \')\': start = stack.pop() if not stack: root_tuple = preorder_str[start + 1:i].split(\',\', 1) root_value = int(root_tuple[0]) if len(root_tuple) == 1: return Node(root_value) left_subtree, right_subtree = parse_subtrees(root_tuple[1]) return Node(root_value, parse_tree(left_subtree), parse_tree(right_subtree)) i += 1 return None def parse_subtrees(subtree_str): counter = 0 i = 0 for char in subtree_str: if char == \'(\': counter += 1 if char == \')\': counter -= 1 if char == \',\' and counter == 0: return subtree_str[:i], subtree_str[i + 1:] i += 1 def isBST(root, mini=float(\'-inf\'), maxi=float(\'inf\')): if not root: return True if root.value <= mini or root.value >= maxi: return False return isBST(root.left, mini, root.value) and isBST(root.right, root.value, maxi) def check_binary_search_tree(preorder_str): root = parse_tree(preorder_str) return \\"True\\" if isBST(root) else \\"False\\""},{"question":"# Rotated Palindromes # Overview A palindrome is a string that reads the same forward and backward. For instance, \\"level\\", \\"radar\\", and \\"madam\\" are palindromes. Your task in this problem is a bit more challenging: you need to determine whether a string can be rearranged to form a palindrome, but with an additional twist: the palindrome can be split and rotated around the middle. **For example**, the string \\"aabb\\" can be rearranged into \\"abba\\" which is a palindrome. If you rotate \\"abba\\" around the middle you get \\"baab\\" which is also a palindrome. Hence, \\"aabb\\" can form a rotated palindrome. # Input - A single string s containing only lowercase alphabetical characters (1 ≤ length of s ≤ 100). # Output - A boolean value True if the string can be rearranged to form a rotated palindrome, and False otherwise. # Examples ```python def can_form_rotated_palindrome(s): pass print(can_form_rotated_palindrome(\\"aabb\\")) # True, can be rearranged to \\"abba\\" or \\"baab\\" print(can_form_rotated_palindrome(\\"abc\\")) # False, cannot form a palindrome print(can_form_rotated_palindrome(\\"aaa\\")) # True, can be rearranged to \\"aaa\\" # Explanation: # - \\"aabb\\" can become \\"abba\\" which rotates to \\"baab\\". # - \\"abc\\" cannot be rearranged into any palindrome to begin with. # - \\"aaa\\" is inherently a palindrome and stays the same upon any rotation. ``` # Requirements 1. **Step 1: Check if the input string can be rearranged to form a basic palindrome**. - For a string of even length, each character must appear an even number of times. - For a string of odd length, exactly one character can appear an odd number of times (and all others must appear an even number of times). 2. **Step 2: Recognize that any palindrome can be rotated around its center to form another valid palindrome**: - If a regular palindrome can be formed from the string, then the rotating property is intrinsically satisfied. # Note - Consider using a dictionary to count character frequencies and decide based on those counts. This problem tests understanding of palindrome properties, string manipulation, and comprehension of rotational symmetry in strings.","solution":"def can_form_rotated_palindrome(s): Determines if a given string can be rearranged to form a rotated palindrome. # Step 1: Count the frequency of each character in the string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Step 2: Check the conditions for forming a palindrome. odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can form a palindrome if at most one character has an odd frequency. return odd_count <= 1"},{"question":"Given an array of integers, write a function to determine if a subarray exists such that the sum of the subarray is equal to zero. If such a subarray exists, return `True`, otherwise return `False`. A subarray is defined as a contiguous segment of the array. # Input - A list of integers `arr` with a length between 1 and 10000. # Output - A boolean value (`True` or `False`). # Examples Example 1 ```python # Input arr = [1, 2, -3, 4] # Output True # Explanation The subarray [1, 2, -3] sums to zero. ``` Example 2 ```python # Input arr = [1, 2, 3] # Output False # Explanation There is no subarray that sums to zero. ``` Example 3 ```python # Input arr = [0, 1, 2] # Output True # Explanation The subarray [0] sums to zero. ``` # Note - Consider an efficient solution that doesn\'t use nested loop techniques to check for all possible subarrays, as this might not work well with large inputs. # Function Signature ```python def subarray_sum_zero(arr: List[int]) -> bool: # Your code here ```","solution":"from typing import List def subarray_sum_zero(arr: List[int]) -> bool: Determines if there exists a subarray with a sum of zero. Args: arr (List[int]): A list of integers. Returns: bool: True if there is a subarray that sums to zero, otherwise False. prefix_sum = 0 seen_sums = set() for num in arr: prefix_sum += num # If the prefix sum is 0 or exists in the set, we have found a zero-sum subarray if prefix_sum == 0 or prefix_sum in seen_sums: return True seen_sums.add(prefix_sum) return False"},{"question":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive, return the duplicate number. You must solve the problem without modifying the array nums and uses only constant extra space. Example 1: Input: nums = [1,3,4,2,2] Output: 2 Example 2: Input: nums = [3,1,3,4,2] Output: 3 Example 3: Input: nums = [1,1] Output: 1 Example 4: Input: nums = [1,1,2] Output: 1 Constraints: - 1 <= n <= 10^5 - nums.length == n + 1 - 1 <= nums[i] <= n - All the integers in nums appear only once except for precisely one integer which appears twice.","solution":"def find_duplicate(nums): Find the duplicate number in an array where there\'s exactly one duplicated integer. :param nums: List[int] - List of integers :return: int - The duplicated integer # Using Floyd\'s Tortoise and Hare (Cycle Detection) Algorithm # Phase 1: Finding the intersection point of the two runners. tortoise = nums[0] hare = nums[0] while True: tortoise = nums[tortoise] hare = nums[nums[hare]] if tortoise == hare: break # Phase 2: Finding the entrance to the cycle. tortoise = nums[0] while tortoise != hare: tortoise = nums[tortoise] hare = nums[hare] return hare"},{"question":"Given a string `s` of lowercase alphabets, write a function to return the character which appears the most frequently. If multiple characters have the same highest frequency, return the lexicographically smallest one. Examples ``` maxFrequencyChar(\\"test\\") ==> \\"t\\" maxFrequencyChar(\\"bbaaccdd\\") ==> \\"a\\" maxFrequencyChar(\\"abcd\\") ==> \\"a\\" ``` Explanation In the first example, \'t\' appears twice whereas \'e\' and \'s\' appear only once. Hence, \'t\' is the most frequently occurring character. In the second example, all characters appear twice, but \'a\' is lexicographically smallest among \'a\', \'b\', \'c\', and \'d\'. In the third example, all characters appear exactly once, so we return the smallest character \'a\'.","solution":"def maxFrequencyChar(s): Returns the character which appears the most frequently in the string s. If multiple characters have the same highest frequency, returns the lexicographically smallest one. from collections import Counter if not s: return None frequency = Counter(s) max_freq = max(frequency.values()) candidates = [char for char, freq in frequency.items() if freq == max_freq] return min(candidates)"},{"question":"Anya is organizing a series of coding contests and she wants to ensure the participants\' scores can be processed efficiently. Each contest results in a list of participant scores, but due to a clerical error, some scores might have been swapped. Anya suspects that only one such swapping occurred, if any. She needs your help to determine if it\'s possible to restore the correct order of scores by swapping exactly two scores. -----Input:----- - The first line contains an integer N which is the number of participants. - The second line contains space-separated N integers which are the given scores in a possibly incorrect order. It is guaranteed that the given scores are unique. -----Output:----- If it is possible to obtain the correct order by swapping exactly two scores, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - 1 leq N leq 1000 - 1 leq text{Scores}[i] leq 10^9 -----Sample Input 1:----- 5 1 3 2 4 5 -----Sample Output 1:----- YES -----Sample Input 2:----- 4 4 1 3 2 -----Sample Output 2:----- NO The problem requires you to detect if the given sequence of scores can be sorted in non-decreasing order by swapping exactly two elements once, and provide a simple \'YES\' or \'NO\' response based on the feasibility of such an operation.","solution":"def can_sort_by_one_swap(N, scores): Determines if the array can be sorted by swapping exactly two elements once. Returns \\"YES\\" if it is possible and \\"NO\\" otherwise. # Create a sorted version of the scores sorted_scores = sorted(scores) # Find all positions where the scores don\'t match the sorted version mismatch_positions = [] for i in range(N): if scores[i] != sorted_scores[i]: mismatch_positions.append(i) # If there are no mismatches, the list is already sorted if len(mismatch_positions) == 0: return \\"YES\\" # If there are exactly 2 mismatches, check if swapping them would sort the list if len(mismatch_positions) == 2: i, j = mismatch_positions scores[i], scores[j] = scores[j], scores[i] if scores == sorted_scores: return \\"YES\\" else: return \\"NO\\" # More than 2 mismatches means we can\'t fix the list with a single swap return \\"NO\\""},{"question":"You are given a list of people and their birth years. Write a function that takes this list and determines the oldest and youngest person. Each element in the list is a tuple containing the person\'s name and birth year. Implement the function `find_oldest_and_youngest(people)` which takes a list of tuples. Each tuple contains two elements: - a string representing the name of the person. - an integer representing the birth year. The function should return a tuple containing two elements: - The name of the oldest person. - The name of the youngest person. **Example:** ```python people = [(\\"Alice\\", 1986), (\\"Bob\\", 1978), (\\"Charlie\\", 1990), (\\"David\\", 1983)] print(find_oldest_and_youngest(people)) # Output: (\'Bob\', \'Charlie\') ``` **Constraints:** 1. The list contains at least one person. 2. No two people have the same birth year. The function should handle the input efficiently and accurately determine the correct names based on the birth years provided.","solution":"def find_oldest_and_youngest(people): Returns the oldest and youngest person\'s names from the list. Parameters: - people: A list of tuples where each tuple contains a name (string) and birth year (int) Returns: - A tuple containing two elements: the name of the oldest person and the name of the youngest person # Initialize variables to store the names and corresponding birth years of the oldest and youngest person oldest_person = people[0] youngest_person = people[0] # iterate through the list to find the oldest and youngest based on birth year for person in people: if person[1] < oldest_person[1]: oldest_person = person if person[1] > youngest_person[1]: youngest_person = person return (oldest_person[0], youngest_person[0])"},{"question":"Write a function that takes a list of integers `arr` and an integer `k` and returns the length of the longest subarray that contains at most `k` distinct integers. Example ``` arr = [1, 2, 1, 2, 3] k = 2 The longest subarray with at most 2 distinct integers is [1, 2, 1, 2], with a length of 4. output: 4 ``` Here\'s another example: ``` arr = [1, 2, 1, 3, 4] k = 2 The longest subarray with at most 2 distinct integers is [1, 2, 1], with a length of 3. output: 3 ```","solution":"def longest_subarray_with_k_distinct(arr, k): from collections import defaultdict n = len(arr) if n * k == 0: return 0 left, right = 0, 0 hashmap = defaultdict(int) max_length = 1 while right < n: hashmap[arr[right]] += 1 while len(hashmap) > k: hashmap[arr[left]] -= 1 if hashmap[arr[left]] == 0: del hashmap[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given a string which represents a roman numeral. Write a function to convert it to an integer. Example 1: Input: \\"III\\" Output: 3 Example 2: Input: \\"IV\\" Output: 4 Example 3: Input: \\"IX\\" Output: 9 Example 4: Input: \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Example 5: Input: \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \\"IIII\\". Instead, the number four is written as \\"IV\\". Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \\"IX\\". There are six instances where subtraction is used: * I can be placed before V (5) and X (10) to make 4 and 9. * X can be placed before L (50) and C (100) to make 40 and 90. * C can be placed before D (500) and M (1000) to make 400 and 900. Write a function `romanToInt(s)` that converts a Roman numeral string `s` to an integer. > Notes: >* Input (`s`) will always be a string and valid within the range of roman numerals. >* Your function should return an integer.","solution":"def romanToInt(s): Convert a roman numeral to an integer. :param s: A string representing roman numeral. :return: An integer representing the numeric value of the roman numeral. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } integer_value = 0 i = 0 while i < len(s): # If this is the subtractive combination if i + 1 < len(s) and roman_to_int[s[i]] < roman_to_int[s[i + 1]]: integer_value += roman_to_int[s[i + 1]] - roman_to_int[s[i]] i += 2 else: integer_value += roman_to_int[s[i]] i += 1 return integer_value"},{"question":"Given an integer array with all positive numbers, find the continuous subarray (containing at least one number) which has the largest sum and return its sum. Example: nums = [-2,1,-3,4,-1,2,1,-5,4] The subarray [4,-1,2,1] has the largest sum = 6. Therefore the output is 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Credits:Special thanks to @ll1226 for adding this problem and creating all test cases.","solution":"def max_subarray_sum(nums): Find the sum of the contiguous subarray within a one-dimensional integer array which has the largest sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Input: The first line contains a single integer T, the number of test cases. For each test case, the first line contains a single integer N, the number of nodes in the binary tree. The following N lines each contain two integers u and v and a character d (\'L\' or \'R\'), representing a node u, its child v, and the direction of the child (left or right). Output: For each test case, print \\"YES\\" if the binary tree is height-balanced, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 0 ≤ N ≤ 1000 Sample Input: 2 5 1 2 L 1 3 R 2 4 L 2 5 R 3 1 2 L 2 3 L 3 4 L Sample Output: YES NO Explanation: In the first test case, the binary tree is: 1 / 2 3 / 4 5 The tree is height-balanced since the height difference between left and right subtrees of every node is not more than 1. In the second test case, the binary tree is: 1 / 2 / 3 / 4 The tree is not height-balanced since the height difference between the left and right subtrees of node 2 is 3, which is greater than 1. Hence, the output is \\"NO\\".","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def is_balanced(root): def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = max(left_height, right_height) + 1 is_current_balanced = abs(left_height - right_height) <= 1 return current_height, left_balanced and right_balanced and is_current_balanced _, is_balanced_tree = check_height(root) return is_balanced_tree def build_tree(n, nodes): if n == 0: return None tree_nodes = {} for u, v, d in nodes: if u not in tree_nodes: tree_nodes[u] = TreeNode(u) if v not in tree_nodes: tree_nodes[v] = TreeNode(v) if d == \'L\': tree_nodes[u].left = tree_nodes[v] elif d == \'R\': tree_nodes[u].right = tree_nodes[v] return tree_nodes[nodes[0][0]] if nodes else None def solve(t, test_cases): results = [] for n, edges in test_cases: root = build_tree(n, edges) if is_balanced(root): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sam is a data scientist who loves analyzing large datasets. He has an array of integers representing different data points collected over time. However, due to noise, some of these data points are erroneous and need to be discarded. Sam learns of a rule that allows simplifying the dataset: any subsequence of the same element appearing consecutively in the array must be reduced to a single instance of that element. For example, the array `[2,2,1,1,1,3,3,2,2]` should be reduced to `[2,1,3,2]`. Can you help Sam by writing a program that reduces the array according to the rule mentioned? -----Input Format----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the array. - The next line contains N space-separated integers which are the elements of the array. -----Output Format----- - For each test case, output the reduced array as space-separated integers. -----Constraints----- - 1 <= T <= 100 - 1 <= N <= 100000 - 0 <= element <= 100000 -----Sample Input----- 2 5 1 1 2 2 3 6 4 4 4 5 5 1 -----Sample Output----- 1 2 3 4 5 1","solution":"def reduce_array(arr): Reduces the array by collapsing consecutive duplicates into one instance of each. Parameters: arr (list): A list of integers representing the array. Returns: list: A reduced list with consecutive duplicates removed. if not arr: return [] reduced = [arr[0]] for i in range(1, len(arr)): if arr[i] != arr[i - 1]: reduced.append(arr[i]) return reduced def process_test_cases(T, test_cases): Processes multiple test cases for the array reduction. Parameters: T (int): Number of test cases. test_cases (list): List of tuples, where each tuple contains the number of elements in the array and the array itself. Returns: list: A list of reduced arrays for all test cases. results = [] for N, arr in test_cases: reduced = reduce_array(arr) results.append(reduced) return results"},{"question":"Write a function that returns the longest string from an array of strings. If there are multiple strings of the same maximum length, the function should return the one that appears first in the array. # Input - An array of strings # Output - A single string, the longest string from the input array # Example ```python # Input: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] # Output: \\"banana\\" # Input: [\\"one\\", \\"three\\", \\"two\\"] # Output: \\"three\\" # Input: [\\"cat\\", \\"dog\\", \\"mouse\\", \\"elephant\\"] # Output: \\"elephant\\" ``` # Additional Details - You can assume the input array will contain at least one string. - All elements in the array will be non-empty strings.","solution":"def longest_string(strings): Returns the longest string from an array of strings. If there are multiple strings of the same maximum length, the function returns the one that appears first in the array. if not strings: return \'\' longest = strings[0] for s in strings[1:]: if len(s) > len(longest): longest = s return longest"},{"question":"Rohit has a rectangular grid of size N x M filled with non-negative integers. He wants to move from the top-left corner (1, 1) to the bottom-right corner (N, M) by only moving down or right at each step. Along his path, he collects the values of the cells he visits. Rohit wonders what the maximum sum of the values he can collect along any such path is. Can you help him solve this problem? -----Input:----- - The first line contains two space-separated integers, N and M, the dimensions of the grid. - The next N lines contain M space-separated integers each, representing the values in the grid. -----Output:----- - Output in a single line, the maximum sum of the values along any path from the top-left to the bottom-right corner. -----Constraints:----- - 1 leq N, M leq 1000 - 0 leq grid[i][j] leq 1000 -----Sample Input:----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 29 -----Explanation:----- - The path which gives the maximum sum is: 1 → 2 → 3 → 6 → 9. - The sum of this path is 1 + 2 + 3 + 6 + 9 = 21. Another path with the maximum sum is: 1 → 4 → 5 → 6 → 9.","solution":"def max_path_sum(N, M, grid): # Create a DP table with the same dimensions as the grid dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The value at the bottom-right corner is the result return dp[N - 1][M - 1]"},{"question":"The kingdom of Algoria has a unique tradition of evaluating the productivity of its farmers. Each year, all farmers are required to report the yield of their crops in terms of the number of units harvested. This information is recorded in a sequence, which represents the harvest yields for the year. The royal advisors are tasked with determining the longest increasing sub-sequence of harvest yields for each farmer. An increasing sub-sequence is a sequence of yields such that each subsequent yield in the sequence is higher than the previous one. However, the highest yield is limited under the influence of weather conditions and fertile lands. The advisors must compute this piece of information by evaluating each element in the sequence and finding the highest yield possible. Your task is to write a program that takes as input a sequence of integers representing the yield of the crops harvested by the farmers and outputs the length of the longest increasing sub-sequence for that sequence. -----Input:----- The first line contains a single integer N indicating the number of elements in the sequence. The next N lines (line 2,...,N+1) describe the yield of the crops harvested by each farmer during a certain period. Line i+1 contains a single positive integer indicating the yield of the i^{th} element in the sequence. -----Output:----- Your output should consist of a single integer - the length of the longest increasing sub-sequence. -----Constraints:----- - 1 leq N leq 50000. - No two elements in the sequence are the same. - You may also assume that in 30 % of the inputs 1 leq N leq 10000. -----Sample Input----- 7 10 22 9 33 21 50 41 -----Sample Output----- 4","solution":"def length_of_LIS(sequence): Returns the length of the longest increasing subsequence in the given sequence. :param sequence: List of integers representing the yields. :return: An integer representing the length of the longest increasing subsequence. if not sequence: return 0 from bisect import bisect_left lis = [] for yield_value in sequence: pos = bisect_left(lis, yield_value) if pos == len(lis): lis.append(yield_value) else: lis[pos] = yield_value return len(lis)"},{"question":"Complete the function to determine if a given string is an anagram of another string. Two strings are considered anagrams if they contain the same characters in the same frequencies. You can assume the input strings contain only lowercase alphabets. Example ```python input strings: \\"listen\\", \\"silent\\" output: True input strings: \\"hello\\", \\"billion\\" output: False ```","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, else returns False. return sorted(str1) == sorted(str2)"},{"question":"Task You are required to write a function `sum_pairs()` that will take an array of integers `arr` and a single integer `sum`. The function should find the first pair of numbers in the array that adds up to the given `sum` and returns that pair as a tuple `(a, b)` where `a` and `b` are the two numbers. If there is no such pair, return `None`. # Example ```python sum_pairs([10, 5, 2, 3, 7, 5], 10) ``` Output: ```python (3, 7) ``` The function would return `(3, 7)` because 3 and 7 add up to 10 and this is the first pair encountered in the array that sums up to 10. # Constraints - The list will have at least two integers. - The list and the sum will be composed of only integers, both positive and negative. - The solution should be optimized to handle large lists. # Notes - The first pair in the list is the pair whose second element has the smallest index. - If multiple pairs have the same second element index, return the one with the smallest first element index. If no such pair exists, return `None`. # Examples ```python sum_pairs([4, 3, 2, 3, 4], 6) ``` Output: ```python (4, 2) ``` ```python sum_pairs([11, 3, 7, 5], 10) ``` Output: ```python (3, 7) ``` ```python sum_pairs([1, 4, 8, 7, 3, 15], 11) ``` Output: ```python (4, 7) ``` ```python sum_pairs([1, -2, 3, 0, -6, 1], -6) ``` Output: ```python (0, -6) ``` ```python sum_pairs([20, -13, 40], -7) ``` Output: ```python None ```","solution":"def sum_pairs(arr, target_sum): Returns the first pair of numbers in the array that adds up to the target_sum as a tuple (a, b). If no such pair exists, returns None. seen = set() for number in arr: complement = target_sum - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"You are given a bookshelf with books of varying heights. Your task is to rearrange the books in a specific order based on the following rules: 1. All the books with even heights should come before the books with odd heights. 2. Within the group of books with even heights, the books should be sorted in ascending order. 3. Within the group of books with odd heights, the books should be sorted in descending order. Given an array of positive integers representing the heights of the books, write a function `rearrange_books` that returns a new array with the books rearranged according to the above rules. # Input - `books`: A list of positive integers, where each integer represents the height of a book. (1 <= height <= 10^4) # Output - A new list of integers representing the heights of the books in the required order. # Example ```python def rearrange_books(books): # Your code here # Example 1 books = [7, 2, 3, 8, 1, 5, 6] print(rearrange_books(books)) # Output: [2, 6, 8, 7, 5, 3, 1] # Example 2 books = [12, 11, 8, 7, 6, 5, 4] print(rearrange_books(books)) # Output: [4, 6, 8, 12, 11, 7, 5] ``` # Note - You must process the books in a way that meets the requirement constraints with optimal efficiency.","solution":"def rearrange_books(books): Rearrange the books such that: - Even height books come before odd height books - Even height books are sorted in ascending order - Odd height books are sorted in descending order even_books = sorted([book for book in books if book % 2 == 0]) odd_books = sorted([book for book in books if book % 2 != 0], reverse=True) return even_books + odd_books"},{"question":"# Task You are given a **2D rectangular board** of colored tiles, where each tile is represented by a string indicating its color. Your task is to find the largest rectangular sub-board where all the tiles are of the same color and return its area. # Input/Output - `[input]` a 2D array of strings `board` A rectangular board with dimensions `m x n` (1 ≤ m, n ≤ 100), where each string represents a color. - `[output]` an integer Return the area of the largest rectangular sub-board where all tiles are of the same color. # Example For `board = [ [\\"red\\", \\"blue\\", \\"blue\\", \\"red\\"], [\\"red\\", \\"blue\\", \\"blue\\", \\"blue\\"], [\\"red\\", \\"blue\\", \\"blue\\", \\"blue\\"], [\\"red\\", \\"red\\", \\"blue\\", \\"blue\\"]]` the output should be `6`. The largest rectangular sub-board with all tiles of the same color is made up of blue tiles at the bottom right corner. For `board = [ [\\"green\\", \\"green\\", \\"red\\"], [\\"green\\", \\"blue\\", \\"blue\\"], [\\"green\\", \\"blue\\", \\"blue\\"]]` the output should be `4`. The largest rectangular sub-board with all tiles of the same color is made up of blue tiles at the bottom right.","solution":"def largest_rectangle_of_same_color(board): def calculate_histogram_heights(board, color): m, n = len(board), len(board[0]) heights = [[0] * n for _ in range(m)] for col in range(n): for row in range(m): if board[row][col] == color: if row == 0: heights[row][col] = 1 else: heights[row][col] = heights[row - 1][col] + 1 return heights def max_histogram_area(heights_row): stack = [] max_area = 0 index = 0 while index < len(heights_row): if not stack or heights_row[index] >= heights_row[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() if stack: area = heights_row[top_of_stack] * (index - stack[-1] - 1) else: area = heights_row[top_of_stack] * index max_area = max(max_area, area) while stack: top_of_stack = stack.pop() if stack: area = heights_row[top_of_stack] * (index - stack[-1] - 1) else: area = heights_row[top_of_stack] * index max_area = max(max_area, area) return max_area m, n = len(board), len(board[0]) colors = set() for row in board: colors.update(row) max_area = 0 for color in colors: heights = calculate_histogram_heights(board, color) for heights_row in heights: max_area = max(max_area, max_histogram_area(heights_row)) return max_area"},{"question":"Given an array of integers, rotate the array to the right by a given number of steps. Write a function `rotate_array` that takes in two arguments: 1. An array of integers `arr` 2. An integer `k` representing the number of steps to rotate the array. The function should return the array after rotating it to the right by `k` steps. Examples: rotate_array([1, 2, 3, 4, 5, 6, 7], 3) returns [5, 6, 7, 1, 2, 3, 4] rotate_array([-1, -100, 3, 99], 2) returns [3, 99, -1, -100] rotate_array([1, 2, 3, 4, 5], 0) returns [1, 2, 3, 4, 5] rotate_array([1, 2, 3], 3) returns [1, 2, 3]","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The array of integers. k (int): Number of steps to rotate the array. Returns: list: The array after being rotated. if not arr: return [] n = len(arr) k = k % n # In case k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Given a string, the goal is to determine the longest substring without repeating characters. Implement a function `longestUniqueSubstring` that takes a single string input and returns the length of the longest substring with all unique characters. Example: ``` Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", which has a length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with a length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` Constraints: - The input string consists of English letters, digits, symbols and spaces. - The length of the input string is within the range [0, 10,000].","solution":"def longestUniqueSubstring(s): Returns the length of the longest substring with all unique characters. n = len(s) max_len = 0 start = 0 char_index_map = {} for i in range(n): if s[i] in char_index_map and char_index_map[s[i]] >= start: start = char_index_map[s[i]] + 1 char_index_map[s[i]] = i max_len = max(max_len, i - start + 1) return max_len"},{"question":"A game consists of placing n distinct integers on an n x n grid, such that each integer from 1 to n^2 appears exactly once. Your task is to create such an arrangement following specific rules for row and column sums. The sum of all integers in each row must be unique and the sum of all integers in each column must also be unique. Additionally, the sums of all row sums must be equal to the sums of all column sums. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100), the size of the grid. -----Output----- Print n lines, each containing n integers, representing the grid that meets the described conditions. It is guaranteed that at least one solution exists. If there are multiple solutions, print any of them. -----Example----- Input 3 Output 9 2 4 7 5 1 3 8 6 Input 2 Output 1 4 3 2 Input 4 Output 1 8 6 11 7 9 2 12 4 13 5 16 10 3 14 15 -----Note----- In the first sample case: The provided grid is: 9 2 4 7 5 1 3 8 6 The row sums are: 9 + 2 + 4 = 15 7 + 5 + 1 = 13 3 + 8 + 6 = 17 Each row sum is unique and: 15 + 13 + 17 = 45 The column sums are: 9 + 7 + 3 = 19 2 + 5 + 8 = 15 4 + 1 + 6 = 11 Each column sum is unique and: 19 + 15 + 11 = 45","solution":"import random def generate_grid(n): Generates an n x n grid with unique row and column sums and an equal sum of all row sums to all column sums. numbers = list(range(1, n * n + 1)) random.shuffle(numbers) grid = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): grid[i][j] = numbers.pop() return grid def check_unique_sums(grid): n = len(grid) row_sums = [sum(row) for row in grid] col_sums = [sum(col) for col in zip(*grid)] if len(set(row_sums)) != n or len(set(col_sums)) != n: return False return sum(row_sums) == sum(col_sums) def fix_grid(grid): n = len(grid) while not check_unique_sums(grid): grid = generate_grid(n) return grid def generate_valid_grid(n): grid = generate_grid(n) grid = fix_grid(grid) return grid"},{"question":"KZ the Developer is solving a coding problem where he needs to perform operations on strings. Given a string `s` consisting of lowercase English letters, KZ needs to transform it into a palindrome. A palindrome is a string that reads the same forward and backward. The only operation allowed is to change any character in the string to another lowercase English letter. KZ wants to do this with the minimum number of changes necessary. Your task is to help KZ find the minimum number of character changes required to turn the given string into a palindrome. -----Input----- The first and only line of the input contains a single string `s` (1 ≤ |s| ≤ 100 000) consisting of lowercase English letters. -----Output----- Print a single integer, the minimum number of character changes required to make the string `s` a palindrome. -----Examples----- Input abca Output 1 Input racecar Output 0 Input abcd Output 2 -----Explanation----- In the first example, changing the character `b` to `c` or `c` to `b` will make the string a palindrome (\\"acca\\" or \\"abba\\"). In the second example, the string is already a palindrome, so no changes are needed. In the third example, changing `a` to `d` and `c` to `b` will make the string a palindrome (\\"dbbd\\" or \\"bccb\\"). Thus, two changes are required.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes required to make the given string `s` a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Implement a function called `greeting` that takes a person\'s name as a string and an integer `n` (1 <= n <= 5) representing the number of different greetings. The function must return the person’s name inserted into a greeting chosen from one of the different greetings based on the value of `n`. The greetings are as follows: 1. \\"Hello, [name]!\\" 2. \\"Hi, [name]!\\" 3. \\"Greetings, [name]!\\" 4. \\"Welcome, [name]!\\" 5. \\"Hey, [name]!\\" For example: ```python greeting(\\"Alice\\", 1) ==> \\"Hello, Alice!\\" greeting(\\"Bob\\", 3) ==> \\"Greetings, Bob!\\" greeting(\\"Charlie\\", 5) ==> \\"Hey, Charlie!\\" greeting(\\"David\\", 2) ==> \\"Hi, David!\\" ```","solution":"def greeting(name, n): Returns a greeting with the person\'s name based on the value of n. Parameters: name (str): The name of the person. n (int): An integer between 1 and 5 representing the type of greeting. Returns: str: The greeting with the person\'s name. greetings = [ \\"Hello, {}!\\", \\"Hi, {}!\\", \\"Greetings, {}!\\", \\"Welcome, {}!\\", \\"Hey, {}!\\" ] if n < 1 or n > 5: raise ValueError(\\"n must be between 1 and 5\\") return greetings[n-1].format(name)"},{"question":"Two security guards, Alice and Bob, are patrolling a long corridor of length `n` units. Alice starts at the left end of the corridor (position 0) and Bob starts at the right end (position `n`). Each of them moves towards the center at a speed of 1 unit per minute. They will both meet at the central unit or pass by each other if the corridor has an even length. Given the length of the corridor, your task is to determine the unit of time (in minutes) when Alice and Bob will meet or pass each other. -----Input:----- - The first line provides an integer `T`, the number of test cases. - The following `T` lines each contain a single integer `n`, the length of the corridor. -----Output:----- For each test case, output a single integer, the minute when Alice and Bob will meet or pass each other. -----Constraints----- - 1 leq T leq 100000 - 1 leq n leq 10^9 -----Sample Input:----- 3 5 6 10 -----Sample Output:----- 2 3 5","solution":"def time_to_meet(n): Returns the time in minutes when Alice and Bob will meet or pass each other in a corridor of length n. return n // 2"},{"question":"A drone delivery company needs to navigate their drones to deliver packages in a city grid with obstacles. The city grid is represented by a matrix of size m times n, where each cell contains either a 0 (representing an empty space) or a 1 (representing an obstacle). The drone starts at the top-left corner of the grid (0, 0) and must reach the bottom-right corner (m-1, n-1). The drone can only move one step at a time in four possible directions: up, down, left, or right. The drone cannot move into cells containing obstacles or outside the bounds of the grid. Design an algorithm that finds the shortest path from the start to the goal. If no such path exists, return -1. -----Input----- The first line contains two integers m and n (2 le m, n le 1000), the dimensions of the grid. The next m lines contain n integers each, either 0 or 1, representing the grid. -----Output----- If a path exists, output a single integer representing the length of the shortest path from the start to the goal. If no path exists, output -1. -----Examples----- Input 5 6 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 Output 9 Input 3 3 0 1 0 0 1 0 0 0 0 Output 4 Input 3 3 0 1 0 1 1 0 0 0 0 Output -1 -----Note----- In the first example, the shortest path from the top-left corner to the bottom-right corner can be achieved by moving as follows: down, down, right, right, right, right, down, down, right. This results in 9 steps. In the second example, the shortest path from the top-left corner to the bottom-right corner can be achieved by moving as follows: down, down, right, right. This results in 4 steps. In the third example, there is no possible path from the top-left corner to the bottom-right corner due to obstacles completely blocking any possible route. Hence, the result is -1.","solution":"from collections import deque def shortest_path(m, n, grid): Finds the shortest path from top-left to bottom-right in a given grid. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] q = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while q: x, y, dist = q.popleft() if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny, dist+1)) return -1"},{"question":"The task: You are given an array of integers representing a list of scores from different matches. Each score can either be positive, negative, or zero. Your goal is to determine the maximum sum of any contiguous subarray within this list of scores. To illustrate the problem, consider the given sequence of scores: `[5, -2, 3, 4, -1]`. Among all possible subarrays, the subarray `[5, -2, 3, 4]` yields the maximum sum, which is `10`. Write a function `max_subarray_sum` that takes an array of integers as an input and returns an integer representing the maximum sum of any contiguous subarray. Function Signature: ```python def max_subarray_sum(scores: List[int]) -> int: ``` Constraints: - The length of the array will be between 1 and 1000. - The elements of the array will range from -1000 to 1000. Example: ```python assert max_subarray_sum([5, -2, 3, 4, -1]) == 10 assert max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7 assert max_subarray_sum([1, 2, -1, 2, 3, -5]) == 7 assert max_subarray_sum([-1, -2, -3, -4]) == -1 ```","solution":"from typing import List def max_subarray_sum(scores: List[int]) -> int: Returns the maximum sum of any contiguous subarray within the list of scores. # Initialize the variables current_sum = max_sum = scores[0] # Loop through the scores starting from the second element for score in scores[1:]: # Update the current sum to be either the current element itself # or continue the previous subarray sum by including the current element current_sum = max(score, current_sum + score) # Update the max_sum if current_sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of non-negative integers, count how many of them are palindromic in their binary representation. A number is palindromic in its binary form if it reads the same forwards and backwards. **Example:** ``` [1, 2, 3, 4, 5, 6, 7] --> 4 (binary representations: 1, 10, 11, 100, 101, 110, 111) (palindromes: 1, 11, 101, 111) (count: 4) [10, 22, 33, 44, 55] --> 2 (binary representations: 1010, 10110, 100001, 101100, 110111) (palindromes: 100001, 110111) (count: 2) [123, 456, 789, 101] --> 1 (binary representations: 1111011, 111001000, 1100010101, 1100101) (palindromes: 1100101) (count: 1) ``` Function Signature: ```python def count_palindromic_binaries(arr: List[int]) -> int: # your code here ```","solution":"def count_palindromic_binaries(arr): Count how many numbers in the given list have palindromic binary representations. :param arr: List of non-negative integers :return: Integer count of numbers with palindromic binary representations def is_binary_palindrome(n): binary_str = bin(n)[2:] # Convert to binary and strip the \'0b\' prefix return binary_str == binary_str[::-1] # Check if the binary string is a palindrome return sum(1 for num in arr if is_binary_palindrome(num))"},{"question":"=====Problem Statement===== A valid phone number meets the following criteria: - The phone number consists of exactly 10 digits. - The number does not contain any spaces, letters, or special characters. Given n phone numbers as input, print each valid phone number on a new line. If there are no valid phone numbers, print \\"None\\". Hint: Try using regular expressions to validate the phone numbers. For example, this code: import re pattern = re.compile(r\'^d{10}\') print(pattern.match(\'1234567890\')) # Should return a match object print(pattern.match(\'12345abcd9\')) # Should return None produces this output: <re.Match object; span=(0, 10), match=\'1234567890\'> None =====Input Format===== The first line contains a single integer, n, denoting the number of phone numbers. Each line i of the n subsequent lines contains a phone number as a string. =====Constraints===== 0 < n < 100 =====Output Format===== Print each valid phone number on a new line. If no valid phone numbers exist, print \\"None\\". You must print the valid phone numbers in the same order as they were received as input.","solution":"import re def validate_phone_numbers(n, phone_numbers): Prints valid phone numbers from the list or \\"None\\" if no valid phone numbers exist. Args: n (int): Number of phone numbers provided. phone_numbers (list): List of input phone numbers as strings. pattern = re.compile(r\'^d{10}\') valid_numbers = [] for number in phone_numbers: if pattern.match(number): valid_numbers.append(number) if valid_numbers: for number in valid_numbers: print(number) else: print(\\"None\\")"},{"question":"Implement a function that determines if a given string `s` (1 <= |s| <= 100) can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should return `true` if the string can be rearranged to form a palindrome and `false` otherwise. # Example Input 1: ``` s = \\"aabb\\" ``` Output 1: ``` true ``` Input 2: ``` s = \\"racecar\\" ``` Output 2: ``` true ``` Input 3: ``` s = \\"hello\\" ``` Output 3: ``` false ``` # Explanation 1. For the input `s = \\"aabb\\"`, the string can be rearranged to form \\"abba\\", which is a palindrome, so the function should return `true`. 2. For the input `s = \\"racecar\\"`, it is already a palindrome, so the function should return `true`. 3. For the input `s = \\"hello\\"`, there is no way to rearrange the string to form a palindrome, so the function should return `false`.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): Input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count frequency of each character char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can be rearranged to a palindrome if there is at most one character with an odd count return odd_count <= 1"},{"question":"You are given a list of non-negative integers representing the amount of rainwater trapped per unit area of an elevation map where the width of each bar is 1. Write a program to find how much rainwater can be trapped after raining. Example Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map [0,1,0,2,1,0,1,3,2,1,2,1] is represented by the array, and 6 units of rainwater (denoted in blue) are trapped. Note: - The input list can have a length of at most 100,000. - Each element in the list is a non-negative integer and will not exceed 100,000.","solution":"def trap(height): Return the total amount of rainwater trapped. :param height: List[int] - List of non-negative integers representing the elevation map :return: int - Total amount of trapped rainwater if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] trapped_water = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) trapped_water += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) trapped_water += right_max - height[right] return trapped_water"},{"question":"You are given two strings s and t. They are initially empty. You need to perform a sequence of operations to convert string s to string t using the following operations: - Append a character to the end of string s. - Delete the last character of string s. - You cannot perform any other operations. Return true if it is possible to convert s to t using a finite number of the allowed operations. Otherwise, return false. Example 1: Input: s = \\"\\", t = \\"abc\\" Output: true Explanation: We can perform the following operations: append(\'a\') -> \\"a\\", append(\'b\') -> \\"ab\\", append(\'c\') -> \\"abc\\" Example 2: Input: s = \\"abc\\", t = \\"ab\\" Output: true Explanation: We can perform the following operations: delete() -> \\"ab\\" Example 3: Input: s = \\"abc\\", t = \\"def\\" Output: false Constraints: - 0 <= s.length, t.length <= 1000 - s and t consist only of lowercase English letters","solution":"def can_convert(s, t): Checks if it is possible to convert string s to t using a sequence of the allowed operations. Args: s (str): The initial string. t (str): The target string. Returns: bool: True if it is possible to convert s to t using the allowed operations, False otherwise. if s == t: return True # Check for the possibility of conversion if len(s) <= len(t) and t.startswith(s): return True if len(s) > len(t) and s.startswith(t): return True return False"},{"question":"In an online marketplace, sellers offer a variety of products. Each product has a name, price, and rating out of 5 stars. Buyers often search for the product that offers the best balance between price and quality (rating). Write a function `best_product(products)` that, given a list of dictionaries where each dictionary contains `name`, `price`, and `rating` of a product, returns the name of the product that has the highest rating-to-price ratio. If there are multiple products with the same rating-to-price ratio, return the name of the product that appears first in the list. For example: ```python products = [ {\\"name\\": \\"Product A\\", \\"price\\": 10.0, \\"rating\\": 4.5}, {\\"name\\": \\"Product B\\", \\"price\\": 20.0, \\"rating\\": 4.7}, {\\"name\\": \\"Product C\\", \\"price\\": 5.0, \\"rating\\": 3.8} ] best_product(products) = \\"Product C\\" # Because \\"Product C\\" has the highest rating-to-price ratio of 0.76 ``` Note: The list `products` will always contain at least one product and each product will have a positive price and a rating between 0 and 5 stars.","solution":"def best_product(products): Returns the name of the product with the highest rating-to-price ratio. :param products: List of dictionaries, each containing \\"name\\", \\"price\\", and \\"rating\\" of a product :return: The name of the product with the highest rating-to-price ratio best_product_name = \\"\\" best_ratio = 0 for product in products: ratio = product[\'rating\'] / product[\'price\'] if ratio > best_ratio: best_ratio = ratio best_product_name = product[\'name\'] return best_product_name"},{"question":"Given a list of integers, write a function to find the maximum sum of any contiguous subarray of the list. -----Input:----- The input consists of a single line which contains space-separated integers representing the elements of the list. -----Output:----- Output a single integer which is the maximum sum of any contiguous subarray. -----Sample Input:----- -2 1 -3 4 -1 2 1 -5 4 -----Sample Output:----- 6","solution":"def max_subarray_sum(arr): Takes a list of integers and returns the maximum sum of any contiguous subarray. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer array of size 5, write a function to determine the mode (the number that appears most frequently). If there\'s a tie, return the smallest number among them. For example: - For the array `[4, 5, 2, 2, 3]`, the mode is `2`. - For the array `[1, 1, 2, 2, 3]`, return `1` since both `1` and `2` appear most frequently, but `1` is smaller.","solution":"from collections import Counter def mode_of_array(arr): Returns the mode of the given integer array. If there\'s a tie, returns the smallest number among the modes. if len(arr) != 5: raise ValueError(\\"Array must be of size 5.\\") count = Counter(arr) max_frequency = max(count.values()) modes = [num for num, freq in count.items() if freq == max_frequency] return min(modes)"},{"question":"In a certain country, there are exactly n cities and m bidirectional roads connecting these cities. The cities are numbered with integers from 1 to n. If there is a road between cities a and b, you can travel that road in either direction in exactly one hour. The government plans to build several new transport hubs in the cities, where each transport hub will reduce the travel time by half for any journey that starts or ends in that city. You need to determine the least number of transport hubs required to ensure that the travel time between any two cities is no more than k hours after the transport hubs are built. -----Input----- The first line contains three integers n, m, k (1 ≤ n ≤ 3000, n - 1 leq m leq operatorname{min} {3000, frac{n(n - 1)}{2} }, 1 ≤ k ≤ 3000) — the number of cities, the number of roads, and the maximum allowed travel time, respectively. The next m lines contain the descriptions of the roads as pairs of integers a_i, b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i). It is guaranteed that the roads allow travel from any city to any other city. Each pair of cities has at most one road between them. -----Output----- Print a single integer — the minimum number of transport hubs needed to ensure the travel time between any two cities is no more than k hours. If it is impossible to meet the condition even with transport hubs, print -1. -----Examples----- Input 4 3 2 1 2 2 3 3 4 Output 1 Input 5 5 2 1 2 2 3 3 4 4 5 5 1 Output 0 Input 6 5 1 1 2 2 3 3 4 4 5 5 6 Output -1","solution":"from collections import deque def bfs_shortest_path(graph, start, n): Perform BFS to find the shortest path from start to all other vertices in an unweighted graph. visited = [False] * (n + 1) distance = [float(\'inf\')] * (n + 1) queue = deque([start]) visited[start] = True distance[start] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) distance[neighbor] = distance[current] + 1 return distance def min_transport_hubs(n, m, k, roads): graph = [[] for _ in range(n + 1)] for a, b in roads: graph[a].append(b) graph[b].append(a) max_distance = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): distances = bfs_shortest_path(graph, i, n) for j in range(1, n + 1): max_distance[i][j] = distances[j] # Determine the minimum number of hubs required for hubs in range(n + 1): for mask in range(1 << n): if bin(mask).count(\'1\') != hubs: continue valid = True for i in range(1, n + 1): for j in range(1, n + 1): min_time = max_distance[i][j] for hub in range(n): if ((1 << hub) & mask) != 0: min_time = min(min_time, max_distance[i][hub + 1] // 2 + max_distance[hub + 1][j]) if min_time > k: valid = False break if not valid: break if valid: return hubs return -1"},{"question":"You are given an array of integers and a target number. Your task is to determine if there are two distinct indices i and j in the array such that the difference between the elements at those indices is exactly the target number. Write a function `find_pair_with_difference(arr, target)` that takes in a list of integers `arr` and an integer `target`, and returns `True` if such a pair exists, or `False` otherwise. Example: ``` find_pair_with_difference([1, 5, 3, 4, 2], 3) -> True find_pair_with_difference([1, 5, 3, 4, 2], 7) -> False find_pair_with_difference([1, 2, 3, 4, 5], 1) -> True ``` Constraints: - The length of the array is at most 10^5. - Each element in the array is a non-negative integer not exceeding 10^9. - The target number is a non-negative integer.","solution":"def find_pair_with_difference(arr, target): Determines if there are two distinct indices i and j in the array such that the difference between the elements at those indices is exactly the target number. :param arr: List of integers :param target: Integer :return: Boolean seen = set() for num in arr: if (num + target) in seen or (num - target) in seen: return True seen.add(num) return False"},{"question":"A logistics company wants to optimize freight delivery across its warehouse network. Each warehouse is a node in a graph, and each bidirectional road connecting two warehouses is an edge with a given travel time. The company plans to start a delivery from a specific warehouse and wants to ensure that the delivery can reach all other warehouses in the minimum possible time. To achieve this, they need to calculate the shortest path from the starting warehouse to every other warehouse. Can you help them by writing an algorithm to find these shortest paths? -----Input:----- - First line will contain T, number of testcases. - For each testcase: - The first line contains two integers N and M, the number of warehouses (nodes) and the number of roads (edges), respectively. - The second line contains an integer S, the starting warehouse. - The next M lines each contain three integers U, V, and W, denoting a bidirectional road from warehouse U to warehouse V with a travel time of W. -----Output:----- For each testcase, output a single line containing N integers, where the i-th integer is the shortest travel time from the starting warehouse S to warehouse i. If a warehouse is unreachable, print -1 for that warehouse. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 1 ≤ U, V ≤ N - 1 ≤ W ≤ 1000 -----Sample Input:----- 2 4 4 1 1 2 4 1 3 2 2 3 3 3 4 1 3 3 2 1 2 2 1 3 2 2 3 1 -----Sample Output:----- 0 4 2 3 2 0 1","solution":"import heapq def shortest_paths(T, testcases): # Helper function to perform Dijkstra\'s algorithm def dijkstra(N, edges, start): graph = [[] for _ in range(N)] for u, v, w in edges: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) dist = [float(\'inf\')] * N dist[start-1] = 0 min_heap = [(0, start-1)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for weight, v in graph[u]: if current_dist + weight < dist[v]: dist[v] = current_dist + weight heapq.heappush(min_heap, (dist[v], v)) return [-1 if d == float(\'inf\') else d for d in dist] results = [] for testcase in testcases: N, M, S, edges = testcase result = dijkstra(N, edges, S) results.append(\' \'.join(map(str, result))) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 testcases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) S = int(input_lines[index + 1]) edges = [] for j in range(M): U, V, W = map(int, input_lines[index + 2 + j].split()) edges.append((U, V, W)) testcases.append((N, M, S, edges)) index += 2 + M return T, testcases def main(input_str): T, testcases = parse_input(input_str) results = shortest_paths(T, testcases) return \'n\'.join(results)"},{"question":"Write a function that takes a list of mixed data types (integers, floats, strings) and returns a new list with only the elements that are either integers or floats, and in ascending order. retain_and_sort([3, \'hello\', 5.6, 7, \'42\', 1.2]) => [1.2, 3, 5.6, 7] retain_and_sort([\'world\', 4.4, \'test\', 2.2, 2, 8]) => [2, 2.2, 4.4, 8] retain_and_sort([\'abc\', \'xyz\']) => [] because there are no integers or floats in the list.","solution":"def retain_and_sort(lst): Returns a new list with only the elements that are either integers or floats, and in ascending order. Parameters: lst (list): The input list containing mixed data types. Returns: list: A list of integers and floats in ascending order. result = [x for x in lst if isinstance(x, (int, float))] return sorted(result)"},{"question":"Write a function that finds and returns the longest substring of a given string `s` that contains exactly `k` distinct characters. If there are multiple substrings with the same maximum length, return any one of them. If the given string `s` is empty or `k` is less than or equal to 0, return an empty string `\'\'`. # Examples: Input 1: s = \'eceba\', k = 2 Output 1: \'ece\' Input 2: s = \'aa\', k = 1 Output 2: \'aa\' Input 3: s = \'a\', k = 0 Output 3: \'\' (since `k` <= 0, return an empty string)","solution":"def longest_substring_with_k_distinct(s, k): if not s or k <= 0: return \\"\\" n = len(s) left = 0 right = 0 max_length = 0 start_index = 0 char_count = {} while right < n: char = s[right] if char not in char_count: char_count[char] = 0 char_count[char] += 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 if right - left + 1 > max_length: max_length = right - left + 1 start_index = left right += 1 return s[start_index:start_index + max_length]"},{"question":"Write a function that accepts a list of strings and returns a single string that contains all the original strings concatenated together, separated by commas. If the input list is empty, return an empty string. For example: ``` input = [\\"apple\\", \\"banana\\", \\"cherry\\"] --> \\"apple,banana,cherry\\" input = [] --> \\"\\" ```","solution":"def concatenate_strings(string_list): Concatenates a list of strings into a single string separated by commas. If the input list is empty, returns an empty string. Parameters: string_list (list): A list of strings to be concatenated. Returns: str: A single string with all the original strings concatenated together, separated by commas. return \',\'.join(string_list)"},{"question":"Write a function that finds the length of the longest substring without repeating characters in an input string. # Example `abcabcbb` -> 3 (substring: \\"abc\\") `bbbbb` -> 1 (substring: \\"b\\") `pwwkew` -> 3 (substring: \\"wke\\") Hint Consider using a sliding window technique for an efficient solution.","solution":"def length_of_longest_substring(s: str) -> int: Finds the length of the longest substring without repeating characters in an input string. Parameters: s (str): Input string Returns: int: Length of the longest substring without repeating characters char_index_map = {} left = 0 longest = 0 for right, char in enumerate(s): if char in char_index_map and char_index_map[char] >= left: left = char_index_map[char] + 1 char_index_map[char] = right longest = max(longest, right - left + 1) return longest"},{"question":"Given two lists of integers, `list1` and `list2`, your task is to create a new list that contains only the elements that are present in both input lists (`list1` and `list2`). The elements in the resulting list should maintain their order of appearance as they do in `list1`. If the same element appears multiple times in both lists, it should be included in the result as many times as it appears in `list1`. For example: ```python def common_elements(list1, list2): pass # Example usage: print(common_elements([1, 2, 3, 4, 5], [4, 3, 5, 1])) # Output: [1, 3, 4, 5] print(common_elements([7, 8, 2, 3, 7], [7, 2, 2, 8])) # Output: [7, 8, 2, 7] print(common_elements([5, 1, 2], [3, 6, 9])) # Output: [] ``` # Input: - `list1` and `list2` are two lists of integers # Output: - a list containing the elements present in both `list1` and `list2`, maintaining the order from `list1`","solution":"def common_elements(list1, list2): Returns a list of elements that are present in both list1 and list2, maintaining the order of appearance in list1. result = [] set_list2 = set(list2) for element in list1: if element in set_list2: result.append(element) return result"},{"question":"Write a function that generates Pascal\'s Triangle up to a given number of rows. Pascal\'s Triangle is a triangular array of integers where each element is the sum of the two directly above it. The triangle starts with a single 1 at the top. Given an integer `n`, the function should return a list of lists, representing the triangle row by row up to the `n`-th row. Here are a few examples of the function output: ``` Input: 1 and Output: [[1]] Input: 4 and Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] ] Input: 6 and Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1] ] ``` The function should handle `n` in a reasonable range (e.g., 1 ≤ `n` ≤ 30). ``` def generate_pascals_triangle(n): # Your code here pass ```","solution":"def generate_pascals_triangle(n): Generates Pascal\'s Triangle up to n rows. Args: n (int): Number of rows of Pascal\'s Triangle to generate. Returns: List[List[int]]: Pascal\'s Triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Jack and Jill are building a new school and want to ensure they have enough resources for all the classrooms. They have a list of required resources, and they also have a list of available resources. Each classroom requires certain quantities of each type of resource. Jack and Jill win if they can provide enough of each required resource for all classrooms. Otherwise, they lose. ---Input--- - The first line contains an integer N representing the number of classrooms. - The second line contains an integer M representing the number of different types of resources. - The next N lines contain M space-separated integers each, where the j^{th} integer in the i^{th} line represents the quantity of resource type j required by classroom i. - The following line contains M space-separated integers representing the total quantity of each type of resource available. ---Output--- - Print \\"Yes\\" if the available resources are enough to meet the requirements for all classrooms, otherwise print \\"No\\". ---Constraints--- - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq text{Quantity of each resource} leq 100 ---Example Input--- 3 3 1 2 3 3 2 1 2 2 2 10 10 10 ---Example Output--- Yes ---Explanation--- Examining the input example: - There are 3 classrooms and 3 types of resources. - The resource requirements for each classroom are [1, 2, 3], [3, 2, 1], and [2, 2, 2]. - Total available resources are [10, 10, 10]. Aggregating the resources required: - For resource type 1: 1 + 3 + 2 = 6 - For resource type 2: 2 + 2 + 2 = 6 - For resource type 3: 3 + 1 + 2 = 6 Since Jack and Jill have 10 units available for each type of resource, which is more than the required 6 units for each type, they win and the output is \\"Yes\\".","solution":"def can_provide_resources(N, M, classroom_requirements, available_resources): total_requirements = [0] * M # Aggregate the requirements for each resource type for requirement in classroom_requirements: for j in range(M): total_requirements[j] += requirement[j] # Check if available resources meet the total requirements for j in range(M): if available_resources[j] < total_requirements[j]: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string `s` consisting of lowercase English letters. You are also given an integer `k`. You can choose any substring of `s` and rearrange its letters in any order you want. Return the length of the longest substring that can be obtained such that there are at most `k` distinct characters in that substring. Example 1: Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The longest substring with at most 2 distinct characters is \\"ece\\" with length 3. Example 2: Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The longest substring with at most 1 distinct character is \\"aa\\" with length 2. Example 3: Input: s = \\"aabbcc\\", k = 2 Output: 4 Explanation: The longest substring with at most 2 distinct characters is \\"aabb\\" or \\"bbcc\\" with length 4. Constraints: - 1 <= s.length <= 10^5 - 1 <= k <= 26","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_map = {} while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Factorial Trailing Zeros Complete the function to calculate the number of trailing zeros in the factorial of a given non-negative integer `n`. Trailing zeros are the number of zeros at the end of the number (e.g., `25,000` has `3` trailing zeros). **Examples:** ```python factorial_trailing_zeros(5) # returns 1 because 5! = 120 has 1 trailing zero factorial_trailing_zeros(10) # returns 2 because 10! = 3628800 has 2 trailing zeros factorial_trailing_zeros(20) # returns 4 because 20! = 2432902008176640000 has 4 trailing zeros ``` Note: Ensure the function handles larger values of `n` efficiently without computing the entire factorial, which can be exceedingly large. ```python def factorial_trailing_zeros(n): Calculate the number of trailing zeros in the factorial of n. :param n: non-negative integer representing the number to calculate the factorial trailing zeros for. :return: integer count of trailing zeros in n! count = 0 base = 5 while n >= base: count += n // base base *= 5 return count ```","solution":"def factorial_trailing_zeros(n): Calculate the number of trailing zeros in the factorial of n. :param n: non-negative integer representing the number to calculate the factorial trailing zeros for. :return: integer count of trailing zeros in n! count = 0 base = 5 while n >= base: count += n // base base *= 5 return count"},{"question":"# Background Binary trees are an important structure in computer science, widely used for various tasks including searching, sorting, and expression evaluation. One specific type of binary tree is a Binary Search Tree (BST), which adheres to certain properties: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. # Problem Description In this problem, you are provided with a binary search tree, and you must find the k-th smallest element in that tree. The k-th smallest element is defined as the k-th element in the in-order traversal of the BST. Function Signature ```python def kth_smallest_element(root, k) -> int ``` # Input - `root`: The root node of the binary search tree. Each node has the following attributes: - `val`: an integer value representing the node’s value. - `left`: a reference to the left child node, or `None` if it does not exist. - `right`: a reference to the right child node, or `None` if it does not exist. - `k`: An integer representing the position (1-indexed) of the element to retrieve. # Output - An integer representing the k-th smallest element in the BST. # Constraints - The BST will have at least one node and at most `10^4` nodes. - The values of the nodes will be unique. - `1 <= k <= number of nodes in the BST`. # Example ```python # Given binary search tree: # 3 # / # 1 4 # # 2 root = TreeNode(3) root.left = TreeNode(1) root.right = TreeNode(4) root.left.right = TreeNode(2) kth_smallest_element(root, 1) # returns 1 kth_smallest_element(root, 2) # returns 2 kth_smallest_element(root, 3) # returns 3 kth_smallest_element(root, 4) # returns 4 ``` Hint - Perform an in-order traversal (left, node, right) of the binary search tree to retrieve the elements in sorted order. Acknowledgement This problem is inspired by LeetCode\'s \\"Kth Smallest Element in a BST\\". If you enjoy this problem, check out similar problems on their platform!","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest_element(root, k): Returns the k-th smallest element in the BST. def in_order_traversal(node): if node is None: return [] return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right) sorted_elements = in_order_traversal(root) return sorted_elements[k - 1]"},{"question":"Write a function named `findLongestSubarray` that takes a list of integers as input and returns the length of the longest subarray that consists of contiguous elements with the same value. For example: ``` Input: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5] Output: 4 ``` Explanation: The longest subarray with the same value is `[4, 4, 4, 4]`, which has a length of 4. Note: - If the input list is empty, the function should return 0. - The function should handle lists with both positive and negative integers, as well as zero.","solution":"def findLongestSubarray(nums): Returns the length of the longest subarray consisting of contiguous elements with the same value. If the input list is empty, the function returns 0. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(current_length, max_length)"},{"question":"Given an array of integers, print the next lexicographically greater permutation of the array. If no such permutation exists, return the array sorted in ascending order. Example 1: Input: [1,2,3] Output: [1,3,2] Example 2: Input: [3,2,1] Output: [1,2,3] Example 3: Input: [1,1,5] Output: [1,5,1] Note: The replacement must be in-place and use only constant extra memory.","solution":"def next_permutation(nums): Transforms the input list \'nums\' to its next lexicographically greater permutation. If no such permutation exists, transforms \'nums\' to the smallest possible permutation. # Step 1: Find the first decreasing element from the end i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 # Step 2: If such element exists, find the element just larger than itself if i >= 0: j = len(nums) - 1 while j >= 0 and nums[j] <= nums[i]: j -= 1 # Step 3: Swap these two elements nums[i], nums[j] = nums[j], nums[i] # Step 4: Reverse the elements after the first found element nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"You are part of a software engineering team working on a new project that involves processing large sets of data. One of the tasks involves computing statistical measures on subsets of data in an efficient manner. Given an array of integers, you are required to answer multiple queries, each asking for the sum of a specific subarray. The input consists of: 1. An integer N, representing the length of the array. 2. An array of N integers. 3. An integer Q, representing the number of queries. 4. Each query consists of two integers L and R, where L and R are the starting and ending indices (inclusive) of the subarray for which the sum needs to be computed. Your task is to preprocess the array efficiently such that each query can be answered in constant time. ---Input--- - The first line contains an integer N (1 ≤ N ≤ 10^5). - The second line contains N space-separated integers representing the elements of the array (|Array[i]| ≤ 10^3 for each valid i). - The third line contains an integer Q (1 ≤ Q ≤ 10^5). - The following Q lines each contain two integers L and R (1 ≤ L ≤ R ≤ N). ---Output--- For each query, print the sum of the elements in the subarray from L to R inclusive. ---Example Input--- 5 1 2 3 4 5 3 1 3 2 4 1 5 ---Example Output--- 6 9 15 ---Explanation--- For the first query, the sum of the subarray from index 1 to 3 (1-based) is 1+2+3=6. For the second query, the sum of the subarray from index 2 to 4 is 2+3+4=9. For the third query, the sum of the subarray from index 1 to 5 is 1+2+3+4+5=15.","solution":"def preprocess(array): Preprocess the array to create a prefix sum array to answer sum queries in O(1) time. prefix_sum = [0] * (len(array) + 1) for i in range(1, len(prefix_sum)): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] return prefix_sum def sum_query(prefix_sum, L, R): Compute the sum of the subarray from index L to R using the prefix sum array. L and R are 1-based indices. return prefix_sum[R] - prefix_sum[L - 1] # Example usage: # N = 5 # array = [1, 2, 3, 4, 5] # Q = 3 # queries = [(1, 3), (2, 4), (1, 5)] # prefix_sum = preprocess(array) # for L, R in queries: # print(sum_query(prefix_sum, L, R))"},{"question":"Your task is to write a function that takes a list of integers and returns a string representing the range(s) of consecutive numbers found within the list. The list may not be sorted initially, and you should first sort it before identifying the ranges. A range is defined as a sequence of consecutive numbers where no number is missing in between. If a number is not part of a range, it should appear alone in the result. # Example For example, given the following list: ```python format_ranges([1, 2, 3, 6, 7, 8, 10, 12, 13, 14]) ``` The function should return: ```python \\"1-3, 6-8, 10, 12-14\\" ``` # Additional Requirements - If the list is empty, return an empty string. - If the list has only one element, return that element as a string. - Ranges should be represented in the format `\\"start-end\\"`, and individual numbers should be represented as is. Separate ranges and numbers with a comma and a space. - The list will only contain non-negative integers. # Detailed Rules 1. Ensure the integers within each identified range or as individual values are sorted in ascending order. 2. Consecutive ranges should be merged into a single range. 3. Single integers should not be represented as a range but as a single number. # Function Signature ```python def format_ranges(lst: List[int]) -> str: ``` ```python # Examples: format_ranges([1, 2, 3, 6, 7, 8, 10, 12, 13, 14]) # returns \\"1-3, 6-8, 10, 12-14\\" format_ranges([1, 3, 5, 7]) # returns \\"1, 3, 5, 7\\" format_ranges([]) # returns \\"\\" format_ranges([10]) # returns \\"10\\" ``` This question tests your ability to manipulate lists and strings, identify sequences, and ensure correct formatting and sorting in your output.","solution":"def format_ranges(lst): if not lst: return \\"\\" lst.sort() result = [] start = lst[0] end = lst[0] for i in range(1, len(lst)): if lst[i] == end + 1: end = lst[i] else: if start == end: result.append(f\\"{start}\\") else: result.append(f\\"{start}-{end}\\") start = lst[i] end = lst[i] if start == end: result.append(f\\"{start}\\") else: result.append(f\\"{start}-{end}\\") return \\", \\".join(result)"},{"question":"You are given two strings, `str1` and `str2`. Your task is to determine if `str1` can be transformed into `str2` by rearranging its characters. Return `True` if it is possible, otherwise return `False`. The comparison should be case-sensitive. *Example* ```python can_transform(\\"listen\\", \\"silent\\") == True can_transform(\\"triangle\\", \\"integral\\") == True can_transform(\\"apple\\", \\"papel\\") == True can_transform(\\"rat\\", \\"car\\") == False ```","solution":"def can_transform(str1, str2): Determine if str1 can be transformed into str2 by rearranging its characters. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 can be transformed into str2, otherwise False. return sorted(str1) == sorted(str2)"},{"question":"The kingdom of Agrabah is under attack, and Aladdin needs your help to save it by finding the optimal way to traverse a dangerous map designed as a grid. The map is represented as an `n x m` grid of cells. Each cell may either contain a `0` (safe to walk on) or a `1` (landmine, cannot be walked on). Aladdin can start from any cell in the first row and wants to reach any cell in the last row, moving only down, left, or right at each step. Determine the length of the shortest path from the first row to the last row avoiding landmines. If it is not possible to reach the last row safely, return -1. -----Input----- The first line of the input contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next `n` lines contains `m` space-separated integers (either `0` or `1`) representing the grid. -----Output----- The output should be a single integer representing the length of the shortest path from any cell in the first row to any cell in the last row avoiding landmines. If no such path exists, output -1. -----Examples----- Input 3 4 0 0 1 0 1 0 1 0 0 0 0 0 Output 3 Input 3 3 1 1 1 1 0 1 1 1 1 Output -1","solution":"from collections import deque def find_shortest_path(n, m, grid): # Directions: down, left, right directions = [(1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS queue = deque() # Initialize visited set visited = set() # Enqueue all the safe cells in the first row for j in range(m): if grid[0][j] == 0: queue.append((0, j, 1)) visited.add((0, j)) # Perform BFS while queue: x, y, dist = queue.popleft() # If reached the last row if x == n - 1: return dist # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check boundaries and visit condition if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If no path found return -1"},{"question":"Alice loves playing with strings. She recently invented a new game to transform one string into another string. Given two strings, `A` and `B`, of equal length, the goal is to transform `A` into `B` using the minimum number of operations. The allowed operation is: 1. Choose any contiguous substring of `A` and reverse it. Assume that each string contains only lowercase English letters. -----Input----- The first line of input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. Each test case consists of three lines: - The first line contains an integer `N` denoting the length of the strings `A` and `B`. - The second line contains the string `A`. - The third line contains the string `B`. -----Output----- For each test case, output a single line containing one integer — the minimum number of operations required to transform `A` into `B`. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 -----Example----- Input: 3 3 abc bca 2 ab ba 4 abcd dcba Output: 2 1 1 -----Explanation----- Test case 1. Initial string `A` is \\"abc\\" and target string `B` is \\"bca\\": - Reverse the first two characters: \\"abc\\" -> \\"bac\\" (1 operation) - Reverse all three characters: \\"bac\\" -> \\"bca\\" (1 operation) Test case 2. Initial string `A` is \\"ab\\" and target string `B` is \\"ba\\": - Reverse the two characters: \\"ab\\" -> \\"ba\\" (1 operation) Test case 3. Initial string `A` is \\"abcd\\" and target string `B` is \\"dcba\\": - Reverse all four characters: \\"abcd\\" -> \\"dcba\\" (1 operation)","solution":"def min_operations_to_transform(A, B): Returns the minimum number of operations required to transform string A into string B. n = len(A) # Initialize the number of operations to 0 operations = 0 # Convert A and B into lists to easily swap elements A_list = list(A) B_list = list(B) # Use two pointers to find the mismatched segments left, right = 0, n - 1 while left < right: if A_list[left] != B_list[left] or A_list[right] != B_list[right]: # Find the segment to reverse l, r = left, right while l <= r and A_list[l] == B_list[l]: l += 1 while l <= r and A_list[r] == B_list[r]: r -= 1 # Reverse the segment A_list[l:r+1] = A_list[l:r+1][::-1] operations += 1 # Move the pointers inwards left += 1 right -= 1 # Check if the entire string matches if A_list == B_list: return operations return operations + 1 def solve(test_cases): results = [] for N, A, B in test_cases: results.append(min_operations_to_transform(A, B)) return results"},{"question":"=====Function Descriptions===== Python has a built-in function pow(x, y), which computes x raised to the power y. The three-argument form pow(x, y, z) computes the same but returns x raised to the power y modulo z (i.e., (x^y) % z). =====Problem Statement===== For example: >>> pow(3, 4) 81 >>> pow(3, 4, 5) 1 Task Read in three integers a, b, and c, and print two lines. The first line prints the result of pow(a, b). The second line prints the result of pow(a, b, c). =====Input Format===== The first line contains the first integer, a. The second line contains the second integer, b. The third line contains the third integer, c. =====Output Format===== Print the result as described above.","solution":"def compute_powers(a, b, c): Computes and returns the power values. - First, returns pow(a, b) - Second, returns pow(a, b, c) result1 = pow(a, b) result2 = pow(a, b, c) return result1, result2"},{"question":"You are tasked with designing a simple booking system for a small library. The library offers multiple study rooms that can be booked by students. Each room can only be booked for one hour at a time, and no room can be double-booked. Each booking must contain student ID, room number, and the time slot. Your task is to write a function that accepts the current bookings and new booking request and returns whether the new booking can be added without any conflicts. Example ```python current_bookings = [ {\\"student_id\\": 1, \\"room_number\\": 101, \\"time_slot\\": 9}, {\\"student_id\\": 2, \\"room_number\\": 102, \\"time_slot\\": 10}, {\\"student_id\\": 3, \\"room_number\\": 101, \\"time_slot\\": 11} ] new_booking = {\\"student_id\\": 4, \\"room_number\\": 101, \\"time_slot\\": 10} def can_book_room(current_bookings, new_booking): # Your implementation here print(can_book_room(current_bookings, new_booking)) # Output: True or False ``` Explanation In the given example, the library has three current bookings. The new booking request is checked to verify if room 101 is available at time slot 10. Since room 101 is not booked at 10, the function should return True. If the new booking was for time slot 9 in room 101, the function should return False because it would overlap with an existing booking.","solution":"def can_book_room(current_bookings, new_booking): Returns True if the new_booking can be added without conflict, otherwise False. for booking in current_bookings: if booking[\'room_number\'] == new_booking[\'room_number\'] and booking[\'time_slot\'] == new_booking[\'time_slot\']: return False return True"},{"question":"# Task You are working on a system that tracks performance metrics across various servers in a data center. A new requirement is to generate reports capturing the maximum and minimum CPU utilization for any given server over a specified time period. Write a function that, given a list of tuples representing CPU measurements (timestamp, cpu_utilization) and a server ID, returns the maximum and minimum CPU utilization for that server within the given data. # Example For `server_id = 2` and `data = [(1, 50, 2), (2, 20, 1), (3, 30, 2), (4, 10, 3), (5, 60, 2)]`, the output should be `(60, 30)`. Explanation: The CPU measurements for server ID 2 are [50, 30, 60]. The maximum value is 60, and the minimum value is 30. # Input/Output - `[input]` integer `server_id` The server ID for which you need to calculate the metrics. - `[input]` list of tuples `(timestamp, cpu_utilization, server_id)` A list of tuples where each tuple contains a timestamp (int), cpu_utilization (int), and a server ID (int). Constraints: 1 ≤ len(data) ≤ 10^5, 1 ≤ cpu_utilization ≤ 100, 1 ≤ server_id ≤ 1000 - `[output]` tuple (int, int) A tuple containing the maximum and minimum CPU utilization for the given server ID. Constraints: If the server ID is not found in the data, return an empty tuple.","solution":"def max_min_cpu_utilization(server_id, data): Returns the maximum and minimum CPU utilization for the given server ID within the given data. Parameters: server_id (int): The server ID data (list of tuples): Each tuple contains a timestamp (int), cpu_utilization (int), and a server ID (int) Returns: tuple: (max_cpu_utilization, min_cpu_utilization) if server_id is found, otherwise an empty tuple cpu_utilizations = [cpu for timestamp, cpu, sid in data if sid == server_id] if not cpu_utilizations: return () return max(cpu_utilizations), min(cpu_utilizations)"},{"question":"A confectionary company wants to automate the packaging of boxes of chocolates. Each box must contain 10 chocolates and a clear wrapping paper. The company has a bin where newly made chocolates are added continuously. You\'re tasked with writing a program to simulate the process of boxing chocolates. Here\'s how it works: - Each chocolate has a specific type, identified by an integer. - Chocolates in the bin are presented to you as a list of integers. - You need to fill as many boxes as possible with the chocolates from the bin. - Any excess chocolates that do not fit into the boxes must remain in the bin for future use. - Output the contents of each box, followed by the remaining chocolates in the bin after all possible boxes have been packed. -----Input----- The first line contains an integer N, the number of chocolates in the bin. The second line contains N integers representing the types of chocolates in the bin. -----Output----- First, output M lines representing the contents of each packed box, where M is the number of fully packed boxes. Each box should be represented as a list of 10 integers. Then, output a single line containing the remaining chocolates in the bin as a list of integers. If no chocolates are left in the bin, output an empty list. -----Constraints----- - 1 ≤ N ≤ 1000 - Each integer representing a chocolate type can range from 1 to 100. -----Example----- Input: 23 1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1 1 1 1 Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] [1, 1, 1] -----Explanation----- The first box is filled with the first 10 chocolates: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. The second box is filled with the next 10 chocolates: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]. Only 3 chocolates remain in the bin, so output them as [1, 1, 1].","solution":"def pack_chocolates(N, chocolates): Simulates the process of boxing chocolates. Arguments: N -- an integer representing the number of chocolates in the bin. chocolates -- a list of integers representing types of chocolates. Returns: A tuple with a list of packed boxes and a list of remaining chocolates. boxes = [] size = 10 while N >= size: box = chocolates[:size] boxes.append(box) chocolates = chocolates[size:] N -= size return boxes, chocolates"},{"question":"You are given an array of integers representing the stock prices of a company on different days. The task is to find the maximum profit that can be achieved by performing a single buy and a single sell operation. You need to buy the stock on one day and sell it on any later day. Write a function ```maxProfit(prices)``` that takes a list of integers ```prices``` as input and returns the maximum profit achievable. If it is not possible to make any profit, return 0. # Constraints: - The input list ```prices``` will have at least one integer (1 ≤ length of prices ≤ 10^5). - Each price in the array is a positive integer (1 ≤ prices[i] ≤ 10^4). # Example: ```python assert maxProfit([7, 1, 5, 3, 6, 4]) == 5 assert maxProfit([7, 6, 4, 3, 1]) == 0 ``` # Explanation: - In the first example, you can buy on day 2 (price = 1) and sell on day 5 (price = 6) to achieve a maximum profit of 5. - In the second example, there is no day-to-day price increase, so maximum profit is 0.","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by performing a single buy and a single sell operation. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price else: potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Given a string S consisting of lowercase letters and a dictionary D of words, return the shortest transformation sequence from S to a word in D that changes only one character at a time. Each transformed string must exist in the dictionary. Example 1: Input: S = \\"hit\\", D = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] Output: 3 Explanation: The shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" with 3 operations. Example 2: Input: S = \\"lead\\", D = [\\"load\\", \\"goad\\", \\"gold\\"] Output: 2 Explanation: The shortest transformation sequence is \\"lead\\" -> \\"load\\" -> \\"goad\\" with 2 operations. Example 3: Input: S = \\"game\\", D = [\\"fame\\", \\"lame\\", \\"same\\"] Output: 1 Explanation: The shortest transformation sequence is \\"game\\" -> \\"same\\" with 1 operation. Note: - 0 <= |S| <= 100 - 1 <= |D| <= 1000 - All strings in the input will be of the same length. - Only one shortest transformation sequence is required.","solution":"from collections import deque def is_one_letter_diff(word1, word2): Determines if word1 and word2 differ by exactly one letter. diff_count = sum(1 for a, b in zip(word1, word2) if a != b) return diff_count == 1 def shortest_transformation_sequence(S, D): Returns the shortest transformation sequence from S to a word in D, with transformations that exist in the dictionary and only change one letter at a time. if S in D: return 0 queue = deque([(S, 0)]) visited = set(S) while queue: current_word, steps = queue.popleft() for word in list(D): if word not in visited and is_one_letter_diff(current_word, word): if word in D: return steps + 1 queue.append((word, steps + 1)) visited.add(word) return -1 # In case there is no possible transformation"},{"question":"You are given a string consisting of lowercase alphabets and a list of queries. Each query consists of a single integer `k`, and the task is to determine the length of the longest substring that contains at most `k` distinct characters. Write a function `longest_substring_k_distinct(s, queries)` which takes a string `s` and a list of integers `queries` as input. Your function should return a list of integers, where each integer corresponds to the answer to the respective query. For example: ```python s = \'abcbaa\' queries = [1, 2, 3] longest_substring_k_distinct(s, queries) ----> [2, 3, 6] ``` - For `queries[0] = 1`, the longest substring with at most 1 distinct character is either \\"aa\\" which has a length of 2. - For `queries[1] = 2`, the longest substring with at most 2 distinct characters is \\"bcb\\" or \\"baa\\" which has a length of 3. - For `queries[2] = 3`, the longest substring with at most 3 distinct characters is the entire string \\"abcbaa\\" which has a length of 6. Features of the random tests: - Number of tests: 100 - Length of string `s`: 50 < len(s) < 10000 - Number of queries: 10 < len(queries) < 100","solution":"def longest_substring_k_distinct(s, queries): Returns a list of integers where each integer corresponds to the length of the longest substring that contains at most k distinct characters for each query. def longest_substring_with_k_distinct(s, k): n = len(s) if k == 0: return 0 if n == 0: return 0 left, right = 0, 0 char_count = {} max_len = 0 while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len results = [] for query in queries: results.append(longest_substring_with_k_distinct(s, query)) return results"},{"question":"Permutation Palindrome --------------------- Determine if any permutation of a given string can form a palindrome. Count characters in a way that allows at most one character to appear an odd number of times for the string to qualify as a potential palindrome. The input will be a non-empty string composed of lowercase alphabets. Example: ```python can_form_palindrome(\\"civic\\") # True can_form_palindrome(\\"ivicc\\") # True can_form_palindrome(\\"hello\\") # False ``` --------------------- Write a function that finds the first non-repeating character in a given string and returns its index. If no such character exists, return -1. The function should be case-insensitive in detecting repetitions but should return the index based on the original case-sensitive string. The input will be a non-empty string containing any printable ASCII characters. Example: ```python first_non_repeating_char(\\"sTreSS\\") # 3 first_non_repeating_char(\\"aAbBcC\\") # -1 first_non_repeating_char(\\"code\\") # 0 ``` --------------------- Create a function that takes in a string and returns the longest substring that contains only unique characters. If there are multiple such substrings of the same maximum length, return the one which appears first in the input string. The input will be a non-empty string containing printable ASCII characters. Example: ```python longest_unique_substring(\\"abcabcbb\\") # \\"abc\\" longest_unique_substring(\\"bbbbb\\") # \\"b\\" longest_unique_substring(\\"pwwkew\\") # \\"wke\\" ```","solution":"def can_form_palindrome(s): Determines if any permutation of the given string can form a palindrome. :param s: input string composed of lowercase alphabets :return: True if any permutation can form a palindrome, False otherwise from collections import Counter count = Counter(s) odd_count = sum(1 for char in count if count[char] % 2 != 0) return odd_count <= 1"},{"question":"Create a function that takes a string consisting of lowercase and uppercase alphabets and returns a dictionary where the keys are the positions of each variation of each letter in the original string, and the values are the corresponding letters. For example, given the string \\"aAbBccCa\\", the return dictionary should be `{0: \'a\', 1: \'A\', 2: \'b\', 3: \'B\', 4: \'c\', 5: \'c\', 6: \'C\', 7: \'a\' }`. Make sure your function handles uppercase and lowercase letters properly, maintaining their positions and uniqueness. Example ----- `\\"aAbBccCa\\"` becomes `{0: \'a\', 1: \'A\', 2: \'b\', 3: \'B\', 4: \'c\', 5: \'c\', 6: \'C\', 7: \'a\' }` Another example ----- `\\"xyzXYZ\\"` becomes `{0: \'x\', 1: \'y\', 2: \'z\', 3: \'X\', 4: \'Y\', 5: \'Z\'}`","solution":"def letter_positions(s): Takes a string consisting of lowercase and uppercase alphabets and returns a dictionary where the keys are the positions of each variation of each letter in the original string, and the values are the corresponding letters. return {i: char for i, char in enumerate(s)}"},{"question":"You are given a string `sentence`, and an array of strings `forbiddenWords`. Your task is to replace each forbidden word in the sentence with a string of asterisks (*) of the same length as the forbidden word. Example: Input: sentence = \\"The quick brown fox jumps over the lazy dog\\" forbiddenWords = [\\"quick\\", \\"fox\\", \\"lazy\\"] Output: \\"The ***** brown *** jumps over the **** dog\\" Note: - The input sentence consists of words separated by single spaces, and its length does not exceed 1000 characters. - Each word in the forbiddenWords list will be non-empty and consist of lowercase letters. - There will be no punctuation in the sentence.","solution":"def replace_forbidden_words(sentence, forbiddenWords): Replaces each forbidden word in the sentence with a string of asterisks (*) of the same length as the forbidden word. Parameters: sentence (str): The input sentence. forbiddenWords (list): A list of forbidden words to be replaced. Returns: str: The sentence with forbidden words replaced by asterisks. words = sentence.split() for i in range(len(words)): if words[i] in forbiddenWords: words[i] = \'*\' * len(words[i]) return \' \'.join(words)"},{"question":"Write a function called `validPalindrome` which takes a string `s` as input and returns `true` if the string can be made into a palindrome by removing at most one character, and `false` otherwise. A string is considered a palindrome if it reads the same forwards and backwards. The function should handle cases where the string length can be up to 10^5 characters. Consider both uppercase and lowercase characters as the same during comparisons.","solution":"def validPalindrome(s: str) -> bool: Returns true if the string can be made into a palindrome by removing at most one character. def is_palindrome_range(i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) i, j = 0, len(s) - 1 while i < j: if s[i].lower() != s[j].lower(): return is_palindrome_range(i+1, j) or is_palindrome_range(i, j-1) i += 1 j -= 1 return True"},{"question":"Create a function `bmi_calculator`, which calculates the Body Mass Index (BMI) and classifies it into categories based on given weight and height. This function should take two arguments: - weight: weight of the person in kilograms (integer or float) - height: height of the person in meters (integer or float) The function should return a string indicating the BMI category as follows: - \\"Underweight\\" if BMI is less than 18.5 - \\"Normal weight\\" if BMI is between 18.5 and 24.9 - \\"Overweight\\" if BMI is between 25 and 29.9 - \\"Obesity\\" if BMI is 30 or greater The BMI is calculated using the formula: [ text{BMI} = frac{text{weight}}{text{height}^2} ] Examples: ~~~if-not:nasm ```python bmi_calculator(70, 1.75) # \\"Normal weight\\" bmi_calculator(50, 1.6) # \\"Underweight\\" bmi_calculator(90, 1.8) # \\"Overweight\\" bmi_calculator(110, 1.75) # \\"Obesity\\" ``` ~~~ *Use arithmetic operations and conditional statements to classify the BMI.","solution":"def bmi_calculator(weight, height): Calculate BMI and return the category. Parameters: weight (int/float): Weight in kilograms. height (int/float): Height in meters. Returns: str: The BMI category. bmi = weight / (height ** 2) if bmi < 18.5: return \\"Underweight\\" elif 18.5 <= bmi < 24.9: return \\"Normal weight\\" elif 25 <= bmi < 29.9: return \\"Overweight\\" else: return \\"Obesity\\""},{"question":"*** Unique Characters Checker *** Write a function that determines if a given string contains only unique characters. Your function should return true if all characters in the string are unique, and false if there are any duplicate characters. You may assume the input string contains only lowercase alphabetic characters. Do not use any built-in functions that automatically solve the problem for you (e.g., `Set`, `distinct`, etc.), and do not modify the input string. Example: Input: \\"abcdef\\" Output: true Input: \\"apple\\" Output: false Looking for more character checking challenges? Check out related kata: https://www.codewars.com/kata/single-character-palindromes","solution":"def all_unique_characters(s): Determines if a given string contains only unique characters. Parameters: s (str): The input string containing only lowercase alphabetic characters. Returns: bool: True if all characters in the string are unique, False otherwise. char_seen = [False] * 26 # Since only lowercase alphabets are used, we use a fixed size list of 26. for char in s: index = ord(char) - ord(\'a\') if char_seen[index]: return False char_seen[index] = True return True"},{"question":"Given a positive integer n, return the total number of set bits (1s) in the binary representation of all numbers from 1 to n. Example 1: Input: n = 2 Output: 2 Explanation: 1 in binary is 1. 2 in binary is 10. Total set bits = 1 + 1 = 2. Example 2: Input: n = 5 Output: 7 Explanation: 1 in binary is 1. 2 in binary is 10. 3 in binary is 11. 4 in binary is 100. 5 in binary is 101. Total set bits = 1 + 1 + 2 + 1 + 2 = 7. Example 3: Input: n = 10 Output: 17 Explanation: 1 in binary is 1. 2 in binary is 10. 3 in binary is 11. 4 in binary is 100. 5 in binary is 101. 6 in binary is 110. 7 in binary is 111. 8 in binary is 1000. 9 in binary is 1001. 10 in binary is 1010. Total set bits = 1 + 1 + 2 + 1 + 2 + 2 + 3 + 1 + 2 + 2 = 17. Constraints: 1 <= n <= 10^5","solution":"def count_total_set_bits(n): Given a positive integer n, return the total number of set bits (1s) in the binary representation of all numbers from 1 to n. :param n: a positive integer :return: total number of set bits in binary representations of numbers from 1 to n def count_set_bits(x): count = 0 while x: count += x & 1 x >>= 1 return count total_set_bits = 0 for i in range(1, n+1): total_set_bits += count_set_bits(i) return total_set_bits"},{"question":"Write a function that checks whether a given word can be constructed using letters from a given magazine (string). Each letter in the magazine can only be used once. The function should return True if the word can be constructed, and False otherwise. For example, ```python can_construct(\\"hello\\", \\"hleolowo\\") ``` should return True, since we can rearrange the letters \'hleolowo\' to form \\"hello\\". ```python can_construct(\\"hello\\", \\"world\\") ``` should return False, since \\"world\\" does not contain the letters necessary to form \\"hello\\". The word and magazine passed to can_construct will only contain lowercase alphabetical characters.","solution":"def can_construct(word, magazine): Determines if a word can be constructed using letters from the magazine string. Each letter in the magazine can only be used once. :param word: The word to be constructed. :param magazine: The string containing letters that can be used to construct the word. :return: True if the word can be constructed, False otherwise. from collections import Counter word_counter = Counter(word) magazine_counter = Counter(magazine) for char in word_counter: if word_counter[char] > magazine_counter.get(char, 0): return False return True"},{"question":"# Identical Lists Write a function called `are_identical` that takes two lists as input and returns `True` if both lists contain the same elements in the same order, and `False` otherwise. Input - Two lists of integers `list1` and `list2`. Output - A boolean value: `True` if the lists are identical, `False` otherwise. Rules 1. Lists are considered identical if they have the same length and the same elements at each corresponding position. 2. If the input lists are empty, they should be considered identical. Example ```python are_identical([1, 2, 3], [1, 2, 3]) # Output: True are_identical([1, 2, 3], [1, 2, 4]) # Output: False are_identical([], []) # Output: True are_identical([1, 2, 3], []) # Output: False ``` Notes - Do not use any built-in list comparison functions. - Assume the elements in the lists are always integers. - You can traverse each list and compare each element individually to determine if the lists are identical.","solution":"def are_identical(list1, list2): Check if two lists are identical in both elements and order. if len(list1) != len(list2): return False for elem1, elem2 in zip(list1, list2): if elem1 != elem2: return False return True"},{"question":"Given an integer array `arr` and a target sum `S`, determine if there are two distinct elements in the array such that their sum is equal to `S`. If there are multiple pairs, print any pair, if there are none, print \\"No pair found\\". -----Input----- The first line contains an integer `N`, the number of elements in the array. The second line contains `N` space-separated integers representing the elements of the array. The third line contains the target sum `S`. -----Output----- Output a pair of integers if such a pair exists, otherwise print \\"No pair found\\". -----Constraints----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 - -10^9 ≤ S ≤ 10^9 -----Example----- Input: 5 1 2 3 4 5 7 Output: 2 5 -----Explanation----- Example case 1. The integers 2 and 5 in the sample array sum up to the target sum of 7. Therefore, one of the possible outputs is \\"2 5\\".","solution":"def find_pair_with_sum(arr, S): Given an integer array `arr` and a target sum `S`, determine if there are two distinct elements in the array such that their sum is equal to `S`. If a pair is found, return the pair, otherwise return \\"No pair found\\". seen = {} for number in arr: complement = S - number if complement in seen: return (complement, number) seen[number] = True return \\"No pair found\\""},{"question":"Given a string containing only the characters \'R\' (for Right) and \'L\' (for Left), you need to write a function that determines the maximum number of times you can split the string into balanced substrings. A substring is balanced if it contains an equal number of \'R\' and \'L\' characters. Write a function `balanced_splits(s)` that accepts a single parameter: - `s` - a string composed only of the characters \'R\' and \'L\' (1 ≤ |s| ≤ 10⁴). The function should return an integer representing the maximum number of balanced substrings. Example: ```python balanced_splits(\\"RLRRLLRLRL\\") # Should return 4 balanced_splits(\\"RLLLLRRRLR\\") # Should return 3 balanced_splits(\\"LLLLRRRR\\") # Should return 1 balanced_splits(\\"RLRRRLLRLL\\") # Should return 2 ``` Explanation: - For the string \\"RLRRLLRLRL\\", it can be split into \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\", which are all balanced. - For the string \\"RLLLLRRRLR\\", it can be split into \\"RL\\", \\"LLLRRR\\", \\"LR\\", which are all balanced. - For the string \\"LLLLRRRR\\", it can only be split into one substring \\"LLLLRRRR\\". - For the string \\"RLRRRLLRLL\\", it can be split into \\"RL\\", \\"RRRLLRLL\\", which are balanced.","solution":"def balanced_splits(s): Determines the maximum number of times the string can be split into balanced substrings. Args: s (str): A string composed only of the characters \'R\' and \'L\'. Returns: int: The maximum number of balanced substrings. balance = 0 count = 0 for char in s: if char == \'R\': balance += 1 elif char == \'L\': balance -= 1 if balance == 0: count += 1 return count"},{"question":"Given a string of lowercase alphabets, write a function to find the longest substring with all distinct characters. For example, given \\"abcabcbb\\", the function should return \\"abc\\" which has a length of 3. If there are multiple substrings with the same maximum length, return the first one. # Requirements 1. Implement `findLongestSubstring()` which takes a string as input and returns a string representing the longest substring with all distinct characters. 2. If the input string is empty, return an empty string. # Example ```python assert findLongestSubstring(\\"abcabcbb\\") == \\"abc\\" assert findLongestSubstring(\\"bbbbb\\") == \\"b\\" assert findLongestSubstring(\\"pwwkew\\") == \\"wke\\" assert findLongestSubstring(\\"\\") == \\"\\" assert findLongestSubstring(\\"abccdefgh\\") == \\"cdefgh\\" ``` # Constraints - The function should have a time complexity of O(n) where n is the length of the input string.","solution":"def findLongestSubstring(s): Returns the longest substring with all distinct characters. n = len(s) if n == 0: return \\"\\" # Dictionary to store the last positions of occurrence last_index = {} max_length = 0 start = 0 longest_substring_start = 0 for end in range(n): # If found within the current window, move the start right after the last occurrence if s[end] in last_index and last_index[s[end]] >= start: start = last_index[s[end]] + 1 # Update the last occurrence of the character last_index[s[end]] = end # Update the max length if needed if end - start + 1 > max_length: max_length = end - start + 1 longest_substring_start = start return s[longest_substring_start:longest_substring_start + max_length]"},{"question":"Given an array of integers A (not necessarily distinct), return the number of pairs (i, j) where i < j and A[i] + A[j] is even. Example 1: Input: [2, 4, 6, 8] Output: 6 Explanation: All pairs (2,4), (2,6), (2,8), (4,6), (4,8), (6,8) have an even sum. Example 2: Input: [1, 3, 5, 7] Output: 6 Explanation: All pairs (1,3), (1,5), (1,7), (3,5), (3,7), (5,7) have an even sum. Example 3: Input: [1, 2, 3, 4, 5] Output: 4 Explanation: Only pairs (1,3), (1,5), (2,4), and (4,6) have an even sum. Example 4: Input: [2, 2, 2, 2] Output: 6 Explanation: All pairs (2,2) have an even sum. Note: 1 <= A.length <= 10000 -10^4 <= A[i] <= 10^4","solution":"def count_even_sum_pairs(A): Returns the number of pairs (i, j) where i < j and A[i] + A[j] is even. even_count = 0 odd_count = 0 for num in A: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Calculation of pairs: nC2 = n*(n-1) / 2 even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"You are given an array of integers and a number k. The goal is to find the top k most frequent elements in the array. If there are multiple elements with the same frequency, you should prioritize the elements that appear first in the array. To achieve this, you need to implement a function: ```python def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: ``` ----Input:---- - The first parameter, `nums`, is a list of integers. - The second parameter, `k`, is a single integer representing the number of top frequent elements to return. ----Output:---- - The function should return a list of `k` integers representing the top k most frequent elements from the `nums` list. ----Constraints:---- - 1 leq len(nums) leq 10^5 - 1 leq k leq len(nums) - It is guaranteed that `k` is always valid and does not exceed the number of unique elements in the `nums` list. ----Examples:---- ```python # Example 1 nums = [1, 1, 1, 2, 2, 3] k = 2 print(top_k_frequent_elements(nums, k)) # Output: [1, 2] # Example 2 nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6] k = 3 print(top_k_frequent_elements(nums, k)) # Output: [6, 5, 1] # Example 3 nums = [4, 4, 4, 5, 5, 6] k = 1 print(top_k_frequent_elements(nums, k)) # Output: [4] ``` Explanation: 1. In example 1, the most frequent element is `1` (appearing 3 times), followed by `2` (2 times). Since `k` is 2, we return `[1, 2]`. 2. In example 2, `6` (4 times), `5` (3 times), and then `1` (1 time) are the top three frequent elements. 3. In example 3, `4` appears 3 times, making it the most frequent since `k` is 1, we return `[4]`. ----Hints:---- - Consider using a data structure that can help you count occurrences efficiently and another to keep track of the order of first appearance. - Sorting or heap can be used to extract the top k frequent elements. ```python def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: from collections import Counter, defaultdict import heapq freq_counter = Counter(nums) # Using default dict to keep track of order of first appearance order_dict = defaultdict(list) for idx, num in enumerate(nums): if num not in order_dict: order_dict[num].append(idx) # Preparing the heap to find the top k elements heap = [(-count, order_dict[num][0], num) for num, count in freq_counter.items()] heapq.heapify(heap) top_k = [heapq.heappop(heap)[2] for _ in range(k)] return top_k ``` This function leverages both a counter for frequency and a min-heap for determining the top k frequent elements efficiently. The `order_dict` helps manage the order of first appearance, ensuring the output respects the required prioritization.","solution":"from typing import List from collections import Counter, defaultdict import heapq def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: Returns the top k most frequent elements in nums. If multiple elements have the same frequency, prioritizes the elements that appear first. # Count frequencies of elements freq_counter = Counter(nums) # Using default dict to keep track of the order of first appearance order_dict = {} for idx, num in enumerate(nums): if num not in order_dict: order_dict[num] = idx # Preparing a min-heap to find the top k elements heap = [(-count, order_dict[num], num) for num, count in freq_counter.items()] heapq.heapify(heap) top_k = [heapq.heappop(heap)[2] for _ in range(k)] return top_k"},{"question":"You are given a binary tree with N nodes. Each node has a unique value associated with it, ranging from 1 to N. Write a program to determine if the tree is a \\"valid\\" binary search tree (BST). A binary search tree satisfies the following conditions: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both left and right subtrees must also be binary search trees. -----Input----- - The first line contains an integer N, the number of nodes in the binary tree. - The next N lines each describe a node in the format of three integers V, L, and R where V is the node\'s value, L is the value of its left child (-1 if no left child), and R is the value of its right child (-1 if no right child). -----Output----- - Output \\"YES\\" if the given binary tree is a valid binary search tree, otherwise print \\"NO\\". -----Constraints----- - 1 le N le 10^5 - 1 le V le N - -1 le L, R le N -----Example Input----- 5 4 2 5 2 1 3 5 -1 -1 1 -1 -1 3 -1 -1 -----Example Output----- YES -----Example Input----- 3 1 2 3 2 -1 -1 3 -1 -1 -----Example Output----- NO","solution":"def is_valid_bst(node_data): from collections import defaultdict # Building the tree tree = {} for data in node_data: V, L, R = data tree[V] = (L, R) # Helper function to validate a BST def validate(node, low, high): if node == -1: return True if not (low < node < high): return False left, right = tree.get(node, (-1, -1)) return validate(left, low, node) and validate(right, node, high) # Assuming the first item in node_data as root node. root = node_data[0][0] return validate(root, float(\'-inf\'), float(\'inf\')) def check_bst(n, node_data): return \\"YES\\" if is_valid_bst(node_data) else \\"NO\\""},{"question":"Write a function that takes a string consisting of words separated by spaces and returns the length of the shortest word in the string. The input string will not contain leading or trailing spaces, and there will always be at least one word. Example 1: Input: \\"I love programming\\" Output: 1 Explanation: The shortest word is \\"I\\" with length 1. Example 2: Input: \\"Coding is fun and educational\\" Output: 2 Explanation: The shortest words are \\"is\\" and \\"and\\", both with length 2. Note: 1. You can assume the input string will not have multiple spaces between words. 2. The input string will only contain alphabetic characters and spaces.","solution":"def find_shortest_word_length(s): Returns the length of the shortest word in the string s. words = s.split() return min(len(word) for word in words)"},{"question":"Write an algorithm that accepts a string containing a mix of upper and lowercase letters, and returns a new string where all the letters have their cases swapped. This means every lowercase letter should be converted to an uppercase letter and every uppercase letter to a lowercase letter. Example: Input: \\"AaBbCc\\" Output: \\"aAbBcC\\" Note: - The input string will contain only alphabetic characters. - You must ensure to handle both empty strings and non-empty strings appropriately.","solution":"def swap_case(s): This function takes a string and returns a new string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. :param s: str: Input string with mixed case letters :return: str: String with swapped letter cases return s.swapcase()"},{"question":"You are given an array of integers where each integer represents the height of a bar in a histogram. Your task is to write a function `max_histogram_area(arr)` that calculates the largest rectangular area that can be formed from the contiguous bars of the histogram. The width of each bar is 1 unit. For example, for the given array `[2, 1, 5, 6, 2, 3]`, the histogram would look like this: ``` | | | | | | | | | | | ------ 2 1 5 6 2 3 ``` The largest possible rectangular area is formed by the bars with heights `[5, 6]` and widths `[1, 1]` respectively, which form a rectangle of area `5*1 + 6*1 = 11`. Your function should return the maximum rectangular area. Function Signature: ```python def max_histogram_area(arr: List[int]) -> int: ``` # Constraints 1. The length of the array `n` will be in the range of 1 to 10^5. 2. The height of each bar will be in the range of 1 to 10^4. # Examples ```python print(max_histogram_area([2, 1, 5, 6, 2, 3])) # Output: 10 print(max_histogram_area([2, 4])) # Output: 4 print(max_histogram_area([1, 2, 3, 4, 5])) # Output: 9 print(max_histogram_area([5, 4, 1, 2])) # Output: 8 print(max_histogram_area([6])) # Output: 6 ``` Hint: You might want to use a stack to keep track of the indices of the bars. This approach could help you find and calculate the largest possible rectangular area efficiently. Happy coding!","solution":"from typing import List def max_histogram_area(arr: List[int]) -> int: Returns the maximum rectangular area in a histogram given its heights. # This function uses a stack to keep track of the indices of the bars. stack = [] max_area = 0 index = 0 while index < len(arr): # If this bar is higher than the bar at stack top, push it to the stack. if not stack or arr[index] >= arr[stack[-1]]: stack.append(index) index += 1 else: # Pop the top index. top_of_stack = stack.pop() # Calculate the area with arr[top_of_stack] as the smallest bar (height). area = (arr[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed. max_area = max(max_area, area) # Now, pop the remaining bars from the stack and calculate area. while stack: top_of_stack = stack.pop() area = (arr[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function that takes a list of integers and returns a new list that contains the squares of only the odd numbers from the original list, sorted in descending order. If the list is empty, the function should return an empty list. For example: ``` [1, 2, 3, 4, 5] --> [25, 9, 1] [12, 11, 10, 9] --> [121, 81] [] --> [] ```","solution":"def square_odds_desc(lst): Returns a list containing the squares of the odd numbers from the input list, sorted in descending order. return sorted([x ** 2 for x in lst if x % 2 != 0], reverse=True)"},{"question":"The city of \\"Graphville\\" has several bus stops, and some pairs of bus stops are connected directly by a bus line. Your task is to determine the minimum number of new bus lines needed so that every bus stop in the city can be reached from any other bus stop either directly or indirectly. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of bus stops and the number of direct bus lines. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting that there is a direct bus line between bus stop u and bus stop v. -----Output----- Print a single integer — the minimum number of new bus lines needed so that every bus stop can be reached from any other bus stop. -----Examples----- Input 5 3 1 2 2 3 3 4 Output 1 Input 4 0 Output 3 Input 3 1 1 2 Output 1 -----Note----- In the first sample, bus stop 5 is isolated and needs one more bus line to be connected to the rest (e.g., between bus stop 4 and 5). In the second sample, as there are no direct bus lines, we need 3 new bus lines to connect all four bus stops (e.g., 1-2, 2-3, and 3-4 or any other combination that connects all the bus stops). In the third sample, bus stop 3 is not connected to the other bus stops, so one more bus line is needed (e.g., between bus stop 2 and 3).","solution":"def min_new_bus_lines(n, m, edges): Returns the minimum number of new bus lines needed so that every bus stop can be reached from any other bus stop either directly or indirectly. from collections import defaultdict, deque if n == 1: # Only one bus stop, no lines needed. return 0 # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Function to perform BFS and mark all reachable nodes from a given starting node def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) components = 0 # Find all connected components for i in range(1, n + 1): if not visited[i]: components += 1 bfs(i, visited) # Minimum number of edges to add to connect \'components\' components is (components - 1) return components - 1"},{"question":"Company XYZ is looking to streamline its data processing pipeline. They need to develop a function that can transform their input data into a desired output format. The input data consists of multiple records, each containing a name and a corresponding identifier. The output should list unique names followed by the identifiers associated with each name, sorted in ascending order of the name strings. You need to write a function that takes in the number of records `N` and a list of `N` records. Each record is presented as a tuple (name, identifier). The function should return a dictionary where each key is a unique name, and the corresponding value is a list of identifiers associated with that name, sorted in ascending order. -----Constraints----- - 1 leq N leq 10^5 - Name is a non-empty string of up to 100 characters, containing only uppercase and lowercase English letters. - Identifier is an integer in the range [1, 10^9]. - Each name may have multiple identifiers associated with it in different records. -----Input----- Input is given from Standard Input in the following format: N name_1 id_1 name_2 id_2 : name_N id_N -----Output----- Output a dictionary in JSON format where keys are unique names and values are sorted lists of their associated identifiers. -----Sample Input----- 5 alice 3 bob 1 alice 2 charlie 5 bob 4 -----Sample Output----- { \\"alice\\": [2, 3], \\"bob\\": [1, 4], \\"charlie\\": [5] } Write the function to achieve the transformation described.","solution":"import json def transform_data(N, records): Transforms the input records into a dictionary where each key is a unique name, and the corresponding value is a list of identifiers associated with that name, sorted in ascending order. Args: N (int): The number of records. records (list of tuple): The records containing name and identifier. Returns: dict: Transformed data. result = {} for name, identifier in records: if name not in result: result[name] = [] result[name].append(identifier) for name in result: result[name].sort() return result # Example usage N = 5 records = [(\\"alice\\", 3), (\\"bob\\", 1), (\\"alice\\", 2), (\\"charlie\\", 5), (\\"bob\\", 4)] print(json.dumps(transform_data(N, records)))"},{"question":"Given a string containing a list of integers separated by commas, write a function that returns the median of the integers. The return value should be a float for precision. **Note:** - The input string will not be empty. - There will always be an odd number of integers to ensure a single median value. Examples ``` \\"1,3,3,6,7,8,9\\" --> 6.0 \\"1,2,3\\" --> 2.0 \\"7,8,9,10,11\\" --> 9.0 ```","solution":"def find_median(numbers: str) -> float: Returns the median of a list of integers found in the input string. The integers are separated by commas. nums = list(map(int, numbers.split(\',\'))) nums.sort() n = len(nums) median = float(nums[n // 2]) return median"},{"question":"There is an underground mall with N shops arranged in a line from 1 to N. Each shop sells a certain number of items represented by an array `items` where `items[i]` indicates the number of items in the i-th shop. The shop management conducts promotions by merging consecutive shops to form a bigger shop, which will then have many items equal to the sum of items in the merged shops. The task is to find out the total number of items in various ranges of shops according to the original configuration of items. -----Input----- - The first line contains an integer N - the number of shops. - The second line contains N integers, where the i-th integer represents the number of items in the i-th shop. - The third line contains an integer Q - the number of queries. - The next Q lines each contain two integers L and R (1 ≤ L ≤ R ≤ N) representing the range of shops. -----Output----- - For each query, output a single integer - the total number of items in the range from shop L to shop R, inclusive. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ items[i] ≤ 10^9 - 1 ≤ Q ≤ 10^5 - 1 ≤ L, R ≤ N -----Example----- Input: 5 2 4 1 6 3 3 1 3 2 5 1 5 Output: 7 14 16 -----Explanation----- The items array is [2, 4, 1, 6, 3] - For the first query (1, 3): 2 + 4 + 1 = 7 - For the second query (2, 5): 4 + 1 + 6 + 3 = 14 - For the third query (1, 5): 2 + 4 + 1 + 6 + 3 = 16","solution":"def preprocess_items(items): Precompute the prefix sums for the items list. prefix_sums = [0] * (len(items) + 1) for i in range(1, len(items) + 1): prefix_sums[i] = prefix_sums[i - 1] + items[i - 1] return prefix_sums def query_total_items(prefix_sums, L, R): Return the total number of items in the range [L, R] (1-based index). return prefix_sums[R] - prefix_sums[L - 1] def total_items_in_ranges(N, items, Q, queries): Process a list of queries to find the total number of items in specified ranges. Parameters: N (int): The number of shops. items (list of int): The number of items in each shop. Q (int): The number of queries. queries (list of tuple): List of queries where each query is a tuple (L, R). Returns: list of int: The totals for the specified ranges for each query. prefix_sums = preprocess_items(items) results = [] for L, R in queries: results.append(query_total_items(prefix_sums, L, R)) return results"},{"question":"Given two strings A and B, where B is a permutation of A with exactly one additional character, your task is to find the extra character in B. Write a function that takes in two strings A and B, and returns the extra character present in B. Example: Input: A = \\"abcde\\" B = \\"abcdef\\" Output: \\"f\\" Explanation: B contains all characters of A plus the extra character \'f\'. Note: - The strings A and B consist of lowercase letters only. - The length of string A is at most 1000. - B is guaranteed to be a permutation of A with one additional character.","solution":"def find_extra_character(A, B): Finds the extra character in string B, which is a permutation of string A with one additional character. Parameters: A (str): The original string. B (str): The string that is a permutation of A with one additional character. Returns: char: The extra character in string B. # Convert the strings to lists of characters and sort them a_sorted = sorted(A) b_sorted = sorted(B) # Iterate through the pairs of characters for a_char, b_char in zip(a_sorted, b_sorted): if a_char != b_char: return b_char # If all characters matched, the extra character is the last one in the sorted B list return b_sorted[-1]"},{"question":"Johnny loves string manipulation and enjoys creating new words from fragments of other words. Given two strings, A and B of the same length, Johnny wants to create a new string C by interleaving characters from A and B. One interleaving way is defined as picking the first character from A, then the first character from B, then the second character from A, then the second character from B, and so on. However, the interleaving rule may vary with multiple steps. Johnny needs some help in creating and understanding these strings. You need to answer Q queries. Each query will either update a character in one of the strings A or B, or determine the number of distinct characters in the new interleaved string C if created by following the current interleaving rule. -----Input----- There is a single test case. First line of input contains an integer N, denoting the length of strings A and B. Second line contains the string A. Third line contains the string B. Next line contains an integer Q, denoting number of queries. For each of the next Q queries, each line corresponds to one of the two types of the query. - 1 x C : Update the character at position x (1-indexed) of string A to character C. - 2 y D : Update the character at position y (1-indexed) of string B to character D. - 3 : Output the number of distinct characters in the interleaved string C formed by taking string A and B together. -----Output----- For each query of type 3, output the count of distinct characters in the new interleaved string C. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ x, y ≤ N - A and B will only contain lowercase English letters. - C and D will only be lowercase English letters. -----Example----- Input: 5 abcde fghij 4 1 3 k 3 2 5 z 3 Output: 10 10 -----Explanation----- In the first query, we update the 3rd character of string A to \'k\'. So, string A becomes \'abkde\' and string B is \'fghij\'. The interleaved string would be \'afbkgdhiej\' containing the distinct characters {a, b, k, d, e, f, g, h, i, j}, thus the output is 10. In the fourth query, we update the 5th character of string B to \'z\'. So, string A remains \'abkde\' and string B becomes \'fghiz\'. The interleaved string would now be \'afbkgdhiez\' which also contains 10 distinct characters.","solution":"def interleave_strings(A, B): Generate an interleaved string C from A and B. return \'\'.join([A[i] + B[i] for i in range(len(A))]) def count_distinct_characters(C): Count the number of distinct characters in the string C. return len(set(C)) def process_queries(N, A, B, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': # Update A x = int(parts[1]) - 1 C = parts[2] A = A[:x] + C + A[x+1:] elif parts[0] == \'2\': # Update B y = int(parts[1]) - 1 D = parts[2] B = B[:y] + D + B[y+1:] elif parts[0] == \'3\': # Count distinct characters in interleaved string interleaved = interleave_strings(A, B) results.append(count_distinct_characters(interleaved)) return results"},{"question":"You are given an array of integers `nums` and an integer `target`. Write a function that returns the number of continuous subarrays whose sum equals to `target`. Example 1: Input: nums = [1,1,1], target = 2 Output: 2 Explanation: There are two subarrays which sum up to target: [1,1] and [1,1] Example 2: Input: nums = [1,2,3], target = 3 Output: 2 Explanation: There are two subarrays which sum up to target: [1,2] and [3] Example 3: Input: nums = [-1,-1,1], target = 0 Output: 1 Explanation: There is one subarray which sums up to target: [-1, -1, 1] Note: 1. The length of the array can be up to 10,000. 2. The range of values in the array is between -1,000 and 1,000.","solution":"def subarray_sum(nums, target): Returns the number of continuous subarrays whose sum equals to target. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num if current_sum - target in prefix_sums: count += prefix_sums[current_sum - target] prefix_sums[current_sum] = prefix_sums.get(current_sum, 0) + 1 return count"},{"question":"You are given the head node root of a binary tree where every node contains an integer value. Write a function to find the maximum sum of any path from the root to a leaf node (i.e., a node with no children). A path in this context is defined as a sequence of nodes starting at the root node and progressing to a leaf node, where each next node in the sequence is a child of the previous node. Example 1: Input: [1,2,3] Output: 4 Explanation: The paths are: - 1 -> 2 (sum = 3) - 1 -> 3 (sum = 4) The maximum sum is 4. Example 2: Input: [10,9,20,null,null,15,7] Output: 35 Explanation: The paths are: - 10 -> 9 (sum = 19) - 10 -> 20 -> 15 (sum = 45) - 10 -> 20 -> 7 (sum = 37) The maximum sum is 45. Note: - The number of nodes in the tree will be in the range [1, 1000]. - Each node\'s value will be an integer in the range [-1000, 1000].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root: TreeNode) -> int: Finds the maximum sum path from the root to a leaf node in a binary tree. :param root: TreeNode, the root node of the binary tree. :return: int, the maximum sum path from root to leaf. if not root: return 0 if not root.left and not root.right: return root.val left_sum = -float(\'inf\') right_sum = -float(\'inf\') if root.left: left_sum = maxPathSum(root.left) if root.right: right_sum = maxPathSum(root.right) return root.val + max(left_sum, right_sum)"},{"question":"In the realm of string manipulation and pattern matching, regular expressions emerge as a powerful tool. One common task developers often face is to validate common data types such as email addresses, phone numbers, zip codes, etc. Let\'s focus on designing a function that validates and formats US phone numbers. Your task is to write a function called `format_us_phone_number` that takes a string as input representing a phone number. The function should validate the phone number format and then return it in the standardized format: `(XXX) XXX-XXXX`. If the provided phone number is invalid, the function should return `Invalid phone number`. The valid formats for the phone numbers are as follows: - 415-555-1234 - (415) 555-1234 - 415.555.1234 - 415 555 1234 - +1 415 555 1234 You need to ensure the area code and the rest of the number are separated correctly and account for optional country code. For example: ```python format_us_phone_number(\\"415-555-1234\\") # returns \\"(415) 555-1234\\" format_us_phone_number(\\"415 555 1234\\") # returns \\"(415) 555-1234\\" format_us_phone_number(\\"(415) 555-1234\\") # returns \\"(415) 555-1234\\" format_us_phone_number(\\"1-415-555-1234\\") # returns \\"(415) 555-1234\\" format_us_phone_number(\\"555-1234\\") # returns \\"Invalid phone number\\" ``` Make sure to consider edge cases and maybe add some examples to ensure robustness. Good luck!","solution":"import re def format_us_phone_number(phone_number): Validates and formats a US phone number to (XXX) XXX-XXXX. If the phone number is invalid, returns \'Invalid phone number\'. pattern = re.compile(r\'^(?:+?1s*[-.]?)?(?(d{3}))?[-.s]?(d{3})[-.s]?(d{4})\') match = pattern.match(phone_number) if match: return f\\"({match.group(1)}) {match.group(2)}-{match.group(3)}\\" return \\"Invalid phone number\\""},{"question":"Write a function `find_subarray_with_given_sum` that takes an array of integers and a target sum as input. The function should find the first continuous subarray within the array that adds up to the target sum and return the subarray. If no such subarray exists, return an empty array. # Example ```python find_subarray_with_given_sum([1, 2, 3, 4, 5], 9) # Should return [2, 3, 4] find_subarray_with_given_sum([1, 2, 3, 4, 5], 15) # Should return [1, 2, 3, 4, 5] find_subarray_with_given_sum([1, 2, 3, 4, 5], 20) # Should return [] ``` # Constraints - The array will contain only integers. - The length of the array will be between 1 and 100. - The target sum will be a positive integer.","solution":"def find_subarray_with_given_sum(arr, target_sum): Finds the first continuous subarray that sums up to the target_sum. :param arr: List of integers :param target_sum: An integer representing the target sum :return: A subarray that sums up to the target_sum, else an empty array current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > target_sum and start <= end: current_sum -= arr[start] start += 1 if current_sum == target_sum: return arr[start:end + 1] return []"},{"question":"-----Problem Statement----- You are given a binary string consisting of \'0\'s and \'1\'s. Your task is to transform this binary string into a string with all \'1\'s (i.e., all characters are \'1\') using the following operations: 1. Choose any substring consisting of consecutive \'0\'s and flip all characters in that substring (change \'0\'s to \'1\'s and vice versa). 2. Count the number of operations needed to transform the binary string into a string with all \'1\'s. Chef wants to minimize the number of operations to achieve the desired transformation. Please help him find the optimal number of operations. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The following T lines contain a single binary string for each test case. -----Output----- For each test case, print a single integer representing the minimal number of operations needed to transform the binary string into a string of all \'1\'s. -----Constraints----- - 1 ≤ T ≤ 1000. - 1 ≤ Length of binary string ≤ 1000. The total length of all binary strings in the input does not exceed 1000. -----Example----- Input: 3 00011 010101 11111 Output: 1 3 0","solution":"def min_operations_to_all_ones(binary_strings): Calculate the minimal number of operations needed to transform a binary string into a string of all \'1\'s. Parameters: binary_strings (list of str): A list of binary strings. Returns: list of int: A list containing the minimal number of operations for each binary string. results = [] for binary_string in binary_strings: zeroblocks = 0 in_zero_block = False for char in binary_string: if char == \'0\': if not in_zero_block: zeroblocks += 1 in_zero_block = True else: in_zero_block = False results.append(zeroblocks) return results # Example of how the function can be used: # binary_strings = [\\"00011\\", \\"010101\\", \\"11111\\"] # print(min_operations_to_all_ones(binary_strings)) # Output: [1, 3, 0]"},{"question":"Given a list of integers, create a function to find the three integers in the list that form the largest possible product. Return the product of these three integers. If the list has fewer than three integers, return `None`. The list can contain both positive and negative numbers. # Example Input: [1, 10, -5, 1, -100] Output: 5000 (10 * -5 * -100) Input: [1, 2] Output: None","solution":"def max_product_of_three(nums): Returns the product of the three integers in the list that form the largest possible product. If the list has fewer than three integers, returns None. if len(nums) < 3: return None nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given a matrix of size n x m filled with non-negative integers. Your task is to start from the top-left corner of the matrix and reach the bottom-right corner, moving only right or down. Write a function to return the minimum sum of all numbers along its path. Examples: Input: mat = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: The path that yields the minimum sum is 1→3→1→1→1, which gives the sum 7. Input: mat = [[1,2,5], [3,2,1]] Output: 6 Explanation: The path that yields the minimum sum is 1→2→2→1, which gives the sum 6. Note: n and m will be integers in the range [1, 100]. Each element of the matrix will be a non-negative integer.","solution":"def min_sum_path(mat): Returns the minimum sum of all numbers along the path starting from the top-left to the bottom-right corner of the matrix. if not mat or not mat[0]: return 0 n = len(mat) m = len(mat[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = mat[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + mat[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + mat[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + mat[i][j] return dp[-1][-1]"},{"question":"Write a function named `find_average` that takes a list of integers as input and returns the average of the values in the list. If the list is empty, the function should return `None`. Examples: - Input: `[1, 2, 3, 4, 5]` Output: `3.0` - Input: `[10, -10, 20, -20]` Output: `0.0` - Input: `[]` Output: `None`","solution":"def find_average(numbers): Returns the average of the integers in the list. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Task: Write a function **frequency_count** that takes a string as input and returns a dictionary with the frequency of each character in the string. # Rules/Note: * Ignore spaces and count only alphanumeric characters (a-z, A-Z, 0-9). * This function should be case-insensitive, i.e., \'a\' and \'A\' should be counted as the same character. * The keys of the resulting dictionary should be in lowercase. * Characters that do not appear in the string should not be included in the dictionary. Examples: frequency_count(\\"Hello World\\") Output: ```python {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` frequency_count(\\"Python 3.8\\") Output: ```python {\'p\': 1, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 1, \'n\': 1, \'3\': 1, \'8\': 1} ``` frequency_count(\\"Data Science\\") Output: ```python {\'d\': 1, \'a\': 2, \'t\': 1, \'s\': 1, \'c\': 2, \'i\': 1, \'e\': 2, \'n\': 1} ```","solution":"def frequency_count(s): Returns a dictionary with the frequency of each alphanumeric character in the string. The function is case-insensitive and ignores spaces. from collections import defaultdict freq = defaultdict(int) for char in s: if char.isalnum(): freq[char.lower()] += 1 return dict(freq)"},{"question":"Implement a function `count_duplicates` that takes a string as input and returns the count of characters that appear more than once in the string, regardless of case. **Examples:** ``` count_duplicates(\\"aA11\\") -> 2 count_duplicates(\\"abcde\\") -> 0 count_duplicates(\\"aabBcde\\") -> 2 count_duplicates(\\"aA11bbb\\") -> 3 ``` The input string will only consist of alphabetic characters (both upper and lower case) and numeric digits. The function should treat \'a\' and \'A\' as the same character, as well as digits as the same character regardless of their position in the string.","solution":"def count_duplicates(s): Returns the count of characters that appear more than once in the string, regardless of case. s = s.lower() char_count = {} duplicates_count = 0 for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for count in char_count.values(): if count > 1: duplicates_count += 1 return duplicates_count"},{"question":"=====Function Descriptions===== flatten The flatten tool returns a copy of the array collapsed into one dimension. import numpy as np array = np.array([[1,2,3], [4,5,6]]) print(np.flatten(array)) # Output: [1 2 3 4 5 6] concatenate The concatenate tool joins a sequence of arrays along an existing axis. import numpy as np array1 = np.array([[1, 2], [3, 4]]) array2 = np.array([[5, 6]]) print(np.concatenate((array1, array2), axis=0)) # Output: [[1 2] [3 4] [5 6]] =====Problem Statement===== You are given two arrays A and B. Both have dimensions of NXM. Your task is to concatenate them along the horizontal axis and then flatten the result into a one-dimensional array. =====Input Format===== The first line contains the integers N and M separated by space. The next N lines contain M space-separated integers of array A. The following N lines contain M space-separated integers of array B. =====Output Format===== Print the flattened result of the concatenated array A and B.","solution":"import numpy as np def concatenate_and_flatten(n, m, array_a, array_b): Concatenates two NxM arrays along the horizontal axis and then flattens the result. Parameters: - n: int, the number of rows in the supplied arrays. - m: int, the number of columns in the supplied arrays. - array_a: list of lists, the first NxM array. - array_b: list of lists, the second NxM array. Returns: A one-dimensional array obtained by concatenating and flattening the input arrays. array_a = np.array(array_a) array_b = np.array(array_b) concatenated = np.concatenate((array_a, array_b), axis=1) flattened = concatenated.flatten() return flattened"},{"question":"You will be given a string consisting of any combination of lowercase Latin letters (a-z) and digits (0-9). Your task is to determine if the string can be converted into a valid hexadecimal number by reordering its characters. For a string to be a valid hexadecimal number, it needs to contain only the characters 0-9 and a-f, and it must contain at least one digit. Input: A string consisting of lowercase Latin letters and digits. Output: Return `\\"yes\\"` if the characters of the string can be rearranged to form a valid hexadecimal number, otherwise return `\\"no\\"`. Examples #1: ``` \\"1a3f\\" --> \\"yes\\" ``` The string \\"1a3f\\" can be directly interpreted as a valid hexadecimal number. #2: ``` \\"abc12\\" --> \\"yes\\" ``` The string \\"abc12\\" can be rearranged to \\"12abc\\", which contains only valid hexadecimal characters. #3: ``` \\"xyz45\\" --> \\"no\\" ``` The string \\"xyz45\\" contains invalid hexadecimal characters \'x\', \'y\', and \'z\'. #4: ``` \\"abcdef\\" --> \\"no\\" ``` Although the string contains only valid hexadecimal letters, it does not contain any digit. #5: ``` \\"fe12y7\\" --> \\"no\\" ``` The string \\"fe12y7\\" contains an invalid hexadecimal character \'y\'.","solution":"def can_form_hexadecimal(s): Determines if the string can be converted into a valid hexadecimal number by reordering its characters. Parameters: s (str): The input string consisting of lowercase Latin letters and digits. Returns: str: \\"yes\\" if the string can be rearranged to form a valid hexadecimal number, otherwise \\"no\\". valid_hex_chars = set(\\"0123456789abcdef\\") has_digit = any(char.isdigit() for char in s) for char in s: if char not in valid_hex_chars: return \\"no\\" return \\"yes\\" if has_digit else \\"no\\""},{"question":"You are given a positive integer `n`. Find a palindrome number with `n` digits, or report that there are no such numbers. A palindrome is a number that reads the same backward as forward. -----Input----- The input consists of multiple test cases. The first line of the input contains a single integer `t` (1 leq t leq 400), the number of test cases. The next `t` lines each describe a test case. Each test case contains one positive integer `n` (1 leq n leq 10^5). It is guaranteed that the sum of `n` for all test cases does not exceed 10^5. -----Output----- For each test case, print a palindrome integer with `n` digits, or \\"-1\\" (without quotes), if no such number exists. If there are multiple possible solutions for s, print any solution. -----Example----- Input 4 1 2 3 4 Output 9 11 121 1221 -----Note----- In the first test case, the only possible palindrome number with one digit is any digit from `1` to `9`. Here `9` is chosen. For the second test case, possible solutions are: `11`, `22`, `33`, `44`, `55`, `66`, `77`, `88`, `99`. Here `11` is chosen. For the third test case, possible solutions could be `101`, `111`, `121`, `131`, ... etc. Here `121` is chosen. For the fourth test case, possible solutions could be `1001`, `1111`, `1221`, `1331` ... etc. Here `1221` is chosen.","solution":"def generate_palindrome(n): Generate a palindrome number with n digits, or return -1 if not possible. if n == 1: return \\"9\\" if n % 2 == 0: return \\"1\\" * (n // 2) + \\"1\\" * (n // 2) else: return \\"1\\" * (n // 2) + \\"1\\" + \\"1\\" * (n // 2) def get_palindromes(test_cases): results = [] for n in test_cases: results.append(generate_palindrome(n)) return results"},{"question":"You are given two lists: `list1` and `list2`, containing integers. Both lists are of the same length. Develop a function that returns a dictionary where each key is an element from `list1` and the corresponding value is the sum of elements in `list2` at positions in indexes where `list1` contains the respective key. Example ```python list1 = [1, 2, 1, 3, 1, 2, 3] list2 = [5, 6, 7, 8, 9, 10, 11] # Step by step explanation: # For key 1 in list1, the positions are [0, 2, 4] in list2 with respective values [5, 7, 9]. Sum = 21. # For key 2 in list1, the positions are [1, 5] in list2 with respective values [6, 10]. Sum = 16. # For key 3 in list1, the positions are [3, 6] in list2 with respective values [8, 11]. Sum = 19. # The resulting dictionary: output = {1: 21, 2: 16, 3: 19} ``` Function Signature ```python def map_sum(list1: List[int], list2: List[int]) -> Dict[int, int]: pass ``` Constraints - The lists `list1` and `list2` will contain between 1 and 1000 integers. - Each integer in `list1` can repeat several times. - The integers in `list2` are any valid integer (both positive and negative).","solution":"from typing import List, Dict def map_sum(list1: List[int], list2: List[int]) -> Dict[int, int]: Returns a dictionary where each key is an element from list1 and the corresponding value is the sum of elements in list2 at positions in indexes where list1 contains the respective key. result = {} for i in range(len(list1)): key = list1[i] if key in result: result[key] += list2[i] else: result[key] = list2[i] return result"},{"question":"Given an integer `n`, write a function that returns an array of its digits sorted in descending order. # Function Signature ```python def sort_digits_descending(n: int) -> List[int]: pass ``` # Input - A single integer `n` such that `0 <= n <= 10^18`. # Output - A list of integers representing the digits of the input number sorted in descending order. # Examples ```python sort_digits_descending(12345) # Output: [5, 4, 3, 2, 1] sort_digits_descending(987650) # Output: [9, 8, 7, 6, 5, 0] sort_digits_descending(102) # Output: [2, 1, 0] ```","solution":"from typing import List def sort_digits_descending(n: int) -> List[int]: Returns the digits of the integer `n` sorted in descending order. # Convert the integer to a string to easily iterate over the digits digits_str = str(n) # Convert each character to an integer and put in a list digits = [int(d) for d in digits_str] # Sort the digits in descending order digits.sort(reverse=True) return digits"},{"question":"Write a function `deep_sum` that takes a nested list of integers and returns the sum of all integers at all levels of nesting. # Example: ```python deep_sum([[1, 2, [3, 4]], [5, 6], 7]) # Output: 28 ``` # Constraints: - You may assume that the list only contains integers or other nested lists. - The depth of nesting could vary. # Requirements: - Implement the function recursively. - Do not use any built-in functions except those for basic list and integer operations.","solution":"def deep_sum(nested_list): Returns the sum of all integers in the nested list. Args: nested_list (list): A list containing integers or other nested lists. Returns: int: The sum of all integers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += deep_sum(element) else: total += element return total"},{"question":"Implement a function to calculate the sum of squares of all even numbers in a given list of integers. Your function should ignore non-integer values. Python: sum_of_squares([1,2,\'x\',3.5,4,5,-6.1,8,-10]) = 200 Explanation: 2^2 + 4^2 + 8^2 + (-10)^2 = 4 + 16 + 64 + 100 = 184","solution":"def sum_of_squares(lst): Returns the sum of squares of all even numbers in a given list of integers. Non-integer values in the list are ignored. return sum(x**2 for x in lst if isinstance(x, int) and x % 2 == 0)"},{"question":"You are given a string that consists of lowercase alphabets and slashes (\'/\'). This string represents a filesystem path where each slash (\'/\') denotes the separator between directories and files while each name between slashes is a directory or a file name. However, the string might contain redundant slashes, which means there could be multiple consecutive slashes. The given task is to simplify the filesystem path to remove redundant slashes and to resolve any occurrences of current directory references (\'.\') or parent directory references (\'..\'). Here are the rules to simplify the path: - Single dot (\'.\') refers to the current directory and can be ignored. - Double dots (\'..\') refer to going back to the parent directory, and you should remove the preceding directory or return the result to the root directory if it\'s not feasible to go back any further. - Multiple consecutive slashes should be reduced to a single one. - The result path must always begin with a single slash (\'/\') and not contain any trailing slashes unless it\'s the root directory. Your task is to convert the given string into its simplified version. # Input - A single string `path` (1 ≤ |path| ≤ 10^4), representing the filesystem path. # Output - Print the simplified canonical path string. # Examples **Example 1:** Input: ``` /home/ ``` Output: ``` /home ``` **Example 2:** Input: ``` /../ ``` Output: ``` / ``` **Example 3:** Input: ``` /home//foo/ ``` Output: ``` /home/foo ``` **Example 4:** Input: ``` /a/./b/../../c/ ``` Output: ``` /c ```","solution":"def simplify_path(path: str) -> str: Simplifies a given filesystem path according to the described rules. Args: path (str): A string representing the filesystem path. Returns: str: The simplified canonical path. parts = path.split(\'/\') stack = [] for part in parts: if part == \'..\': if stack: stack.pop() elif part == \'.\' or part == \'\': continue else: stack.append(part) return \'/\' + \'/\'.join(stack)"},{"question":"In a faraway galaxy, there is a planet called ByteLand where people communicate using sequences of numbers. The people of ByteLand have invented a unique way to encrypt their messages. To encrypt a message, they use a sequence of n integers and perform a series of operations. Each operation is one of the following: - Adding a constant value to an element in the sequence. - Multiplying an element by a constant value. - Swapping two chosen elements of the sequence. Given the initial sequence and a series of operations, your task is to determine the final state of the sequence after all operations are applied. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers separated by spaces — the initial sequence, where each integer is between -1000 and 1000 inclusive. The third line contains an integer q (1 ≤ q ≤ 1000) — the number of operations. The next q lines describe the operations to be performed. Each operation is presented in one of the following formats: - \\"add x idx\\" (where -1000 ≤ x ≤ 1000, 0 ≤ idx < n) — add x to the element at index idx. - \\"mult x idx\\" (where -100 ≤ x ≤ 100, 0 ≤ idx < n) — multiply the element at index idx by x. - \\"swap idx1 idx2\\" (where 0 ≤ idx1, idx2 < n) — swap the elements at index idx1 and idx2. -----Output----- Print the sequence after applying all operations. -----Example----- Input 5 1 2 3 4 5 3 add 3 1 mult 2 2 swap 0 4 Output 5 5 6 4 1 -----Note----- In the example, the initial sequence is [1, 2, 3, 4, 5]. 1. After the first operation \\"add 3 1\\", the sequence becomes [1, 5, 3, 4, 5]. 2. After the second operation \\"mult 2 2\\", the sequence becomes [1, 5, 6, 4, 5]. 3. After the third operation \\"swap 0 4\\", the sequence becomes [5, 5, 6, 4, 1].","solution":"def process_operations(n, sequence, q, operations): Processes a series of operations on a sequence of integers. Parameters: n (int): Length of the sequence. sequence (list of int): The initial sequence. q (int): Number of operations. operations (list of str): List of operations to be performed. Returns: list of int: The sequence after applying all operations. for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": x = int(parts[1]) idx = int(parts[2]) sequence[idx] += x elif command == \\"mult\\": x = int(parts[1]) idx = int(parts[2]) sequence[idx] *= x elif command == \\"swap\\": idx1 = int(parts[1]) idx2 = int(parts[2]) sequence[idx1], sequence[idx2] = sequence[idx2], sequence[idx1] return sequence # Example usage n = 5 sequence = [1, 2, 3, 4, 5] q = 3 operations = [\\"add 3 1\\", \\"mult 2 2\\", \\"swap 0 4\\"] print(process_operations(n, sequence, q, operations)) # Output: [5, 5, 6, 4, 1]"},{"question":"Write a function that takes a string as an input and returns the most frequently occurring character in that string. In case of a tie, return the character that appears first in the string. Your function should consider all characters including punctuation and whitespace, but it should treat uppercase and lowercase characters as distinct. Example: ``` Input: \\"Hello, World!\\" Output: \\"l\\" Input: \\"character\\" Output: \\"c\\" ``` # Function Signature ```python def most_frequent_char(s: str) -> str: pass ``` # Constraints - The string will have at least one character and can be up to 1000 characters long.","solution":"def most_frequent_char(s: str) -> str: Returns the most frequently occurring character in the string `s`. In case of a tie, returns the character that appears first in the string. from collections import Counter # Create a Counter object to count the frequency of each character char_count = Counter(s) # Get the maximum frequency max_freq = max(char_count.values()) # Find the first character in the string with the maximum frequency for char in s: if char_count[char] == max_freq: return char"},{"question":"In this Kata, you will write a function `find_longest_substring` that will find the length of the longest substring without repeating characters. For example: `find_longest_substring(\'abcabcbb\') = 3`, because the longest substring without repeating characters is `\'abc\'`. Another example: `find_longest_substring(\'bbbbb\') = 1`, since the longest substring is `\'b\'` which contains exactly 1 character. One more example: `find_longest_substring(\'pwwkew\') = 3`, because the longest substring without repeating characters is `\'wke\'`. Note that the answer must be a substring, `\'pwke\'` is a subsequence and not a substring. The strings will contain uppercase and lowercase letters as well as digits. More examples in the test cases. Good luck!","solution":"def find_longest_substring(s): Finds the length of the longest substring without repeating characters. n = len(s) longest = 0 start = 0 seen = {} for end in range(n): if s[end] in seen and seen[s[end]] >= start: start = seen[s[end]] + 1 seen[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"Task You are to create a function `decode_message` that decodes an encoded string according to a specified format described below. Description Given an encoded string, your task is to decode the string. The string is encoded with run-length encoding. This encoding method involves replacing successive identical characters with the character followed by the number of repetitions. For example: - The string \\"aaaabbc\\" would be encoded as \\"a4b2c1\\". - The string \\"hhhhiiii\\" would be encoded as \\"h4i4\\". Input The input is a single string that represents the encoded message. The encoded message: - Will always be a valid run-length encoded string. - Contains only lowercase alphabetic characters and digits representing the count of repeated characters. Output The function should return a single string that represents the decoded message. Examples ```python # Example 1 encoded = \\"a4b3c2\\" # Explanation: The string \\"a4b3c2\\" should be decoded as \\"aaaabbbcc\\" print(decode_message(encoded)) # Output: \\"aaaabbbcc\\" # Example 2 encoded = \\"h8i2a1\\" # Explanation: The string \\"h8i2a1\\" should be decoded as \\"hhhhhhhhiia\\" print(decode_message(encoded)) # Output: \\"hhhhhhhhiia\\" # Example 3 encoded = \\"x1y2z3\\" # Explanation: The string \\"x1y2z3\\" should be decoded as \\"xyyzzz\\" print(decode_message(encoded)) # Output: \\"xyyzzz\\" ``` Constraints 1. The encoded string will have a length `1 <= len(encoded) <= 100`. 2. The count of each character will be a positive integer between `1` and `99`. Implementation Please implement the function `decode_message(encoded: str) -> str:` based on the provided example cases and the details above.","solution":"def decode_message(encoded: str) -> str: Decodes a run-length encoded string. Parameters: encoded (str): The run-length encoded string. Returns: str: The decoded message. decoded_message = [] i = 0 while i < len(encoded): char = encoded[i] i += 1 num_start = i while i < len(encoded) and encoded[i].isdigit(): i += 1 count = int(encoded[num_start:i]) decoded_message.append(char * count) return \'\'.join(decoded_message)"},{"question":"You are given an array representing the heights of bars in a histogram. Each bar has a width of 1. Your task is to find the area of the largest rectangle that can be formed within the bounds of the histogram. The histogram is such that it is surrounded by the imaginary ground of y = 0 line, and the bars extend upwards or are flush equal to this base line. Example 1: Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle has an area of 10 units (between the 3rd and 4th bars with heights 5 and 6). Example 2: Input: [2, 4] Output: 4 Explanation: The largest rectangle has an area of 4 units (covering the bar with height 4).","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can be formed within the histogram bounds. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given two strings s1 and s2 of the same length, consisting of lowercase English letters. You want to transform s1 into s2 using the following operation any number of times: - Pick any character of s1 and change it to any other lowercase English character. Determine the minimum number of operations required to transform s1 into s2. Example 1: Input: s1 = \\"abcdef\\", s2 = \\"azcedf\\" Output: 3 Explanation: Change \'b\' to \'z\', \'c\' to \'c\' (no change needed), \'d\' to \'e\'. Example 2: Input: s1 = \\"hello\\", s2 = \\"world\\" Output: 4 Explanation: Change \'h\' to \'w\', \'e\' to \'o\', \'l\' to \'r\', \'o\' to \'d\'. Example 3: Input: s1 = \\"aaa\\", s2 = \\"aaa\\" Output: 0 Explanation: No changes needed. Constraints: 1 <= s1.length == s2.length <= 10^5 s1 and s2 consist only of lowercase English letters","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. An operation consists of picking any character of s1 and changing it to any other lowercase English character. :param s1: str: The initial string. :param s2: str: The target string. :return: int: The minimum number of operations required. # Assuming both s1 and s2 have the same length operations = 0 for ch1, ch2 in zip(s1, s2): if ch1 != ch2: operations += 1 return operations"},{"question":"Create a function that takes a list of intervals and merges all overlapping intervals, returning the resulting list of merged intervals. Each interval is represented as a two-element list [start, end], where start is less than or equal to end. Example 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Note: 1. The intervals should be returned in the order they appear in the input. 2. You may assume the given list of intervals is not empty.","solution":"def merge_intervals(intervals): Merges all overlapping intervals. :param intervals: List of intervals represented as [start, end] :return: List of merged intervals if not intervals: return [] # Sort intervals by starting time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] if current[0] <= last_merged[1]: # There is an overlap last_merged[1] = max(last_merged[1], current[1]) else: merged_intervals.append(current) return merged_intervals"},{"question":"Write a function that takes a positive integer `n` and returns a string representation of an n x n spiral matrix. The spiral matrix starts at the top-left corner with the number 1 and fills the matrix in a clockwise direction. Some examples: ``` (1) => \\"1\\" (2) => \\"1 2 4 3\\" (3) => \\"1 2 3 8 9 4 7 6 5\\" (4) => \\"1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7\\" ``` Write a function `spiral_matrix(n: int) -> str` to generate the spiral matrix as specified. The resulting string should represent the matrix with rows separated by newline characters and elements within rows separated by spaces. Each element should be right-aligned to accommodate the largest number in the matrix.","solution":"def spiral_matrix(n): Generates an n x n spiral matrix and returns its string representation. if n == 1: return \\"1\\" # Initialize the matrix with zeros matrix = [[0]*n for _ in range(n)] # Set the boundaries for the spiral movement top, bottom, left, right = 0, n-1, 0, n-1 num = 1 # Loop until all numbers are filled in the matrix while num <= n * n: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 # Transform matrix into required formatted string largest_num_width = len(str(n * n)) result = [] for row in matrix: formatted_row = \' \'.join(f\'{num:>{largest_num_width}}\' for num in row) result.append(formatted_row) return \\"n\\".join(result)"},{"question":"Create a function that takes a list of integers and returns the sum of all positive numbers in the list. If the list contains no positive numbers, the function should return 0. For example, given the input [3, -1, 5, -9, 2], the output should be 10 (because 3 + 5 + 2 = 10). If the input is [-3, -1, -5, -9], the output should be 0.","solution":"def sum_positive_numbers(numbers): Returns the sum of all positive numbers in the list. If the list contains no positive numbers, returns 0. return sum(num for num in numbers if num > 0)"},{"question":"Given a positive integer array and an integer `k`, write a function that returns the number of pairs (i, j) where i < j and the sum of the elements at these indices is divisible by `k`. The function takes two parameters: an array of positive integers (inputArr) and an integer (k). For example, if you receive an input array [1, 2, 3, 4, 5, 6] and the integer `k` is 5, your function should return 3, since the pairs (1, 4), (2, 3), and (4, 6) sum to 5, 5, and 10 respectively, all of which are divisible by 5.","solution":"def count_pairs_divisible_by_k(inputArr, k): This function counts the number of pairs (i, j) in the given array such that i < j and the sum of the elements at these indices is divisible by k. Parameters: inputArr (list): A list of positive integers k (int): An integer divisor Returns: int: The number of pairs (i, j) with i < j whose sum is divisible by k count = 0 n = len(inputArr) for i in range(n): for j in range(i + 1, n): if (inputArr[i] + inputArr[j]) % k == 0: count += 1 return count"},{"question":"In a far-off land called Technotopia, each city in the country is connected by bidirectional roads to form one large network. The country has a total of n cities and m roads connecting them. Additionally, each road has a toll fee associated with it. The government of Technotopia wants to minimize its transportation budget. They need to keep all cities connected while ensuring the sum of toll fees on the chosen roads is minimized. Given this, your task is to find the minimum possible sum of toll fees required to connect all the cities. -----Input----- The first line contains two integers n (1 le n le 10^5) and m (1 le m le 2*10^5) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers a, b, and c (1 le a, b le n, 1 le c le 10^9) — signifying a road between cities a and b with a toll fee of c. -----Output----- Print a single integer — the minimum sum of toll fees required to connect all cities. If it\'s impossible to connect all cities, print -1. -----Example----- Input 4 5 1 2 1 1 3 4 2 3 3 2 4 2 3 4 5 Output 6 -----Note----- In the given example, the minimum toll sum is obtained by selecting the roads (1, 2) with fee 1, (2, 4) with fee 2, and (2, 3) with fee 3 for a total sum of 1 + 2 + 3 = 6.","solution":"def find_minimum_toll(n, m, roads): Find the minimum sum of toll fees required to connect all cities. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list of tuples): Each tuple contains three integers a, b, and c signifying a road between cities a and b with a toll fee of c. Returns: int: Minimum sum of toll fees required to connect all cities. If not possible, return -1. # Sorting the roads based on the toll fee roads.sort(key=lambda x: x[2]) parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY total_toll = 0 edges_used = 0 for a, b, toll in roads: if find(a) != find(b): union(a, b) total_toll += toll edges_used += 1 if edges_used == n - 1: break # Check if we have used enough edges to connect all cities if edges_used == n - 1: return total_toll else: return -1"},{"question":"You are given a sequence of integers A_1, A_2, ..., A_N and an integer K. You need to find the maximum sum of a subarray of length exactly K. -----Input ----- - The first line of the input contains two positive integers N denoting the size of array, and K denoting the length of the subarray. - The next line contains N space-separated integers which represent the array A. -----Output----- Single line containing one integer, denoting the maximum possible sum of a subarray of length exactly K. -----Constraints----- - 1 leq N leq 10^5 - 1 leq K leq N - -10^4 leq A_i leq 10^4 -----Sample Input----- 5 3 1 2 3 -2 5 -----Sample Output----- 6 -----Explanation----- Sum of the subarray {1, 2, 3} is 6, which is the maximum sum among all subarrays of length 3.","solution":"def max_sum_subarray_length_k(N, K, A): Returns the maximum sum of a subarray of length exactly K. Parameters: N (int): Size of array A. K (int): Length of the subarray. A (list of int): The array of integers. Returns: int: The maximum possible sum of a subarray of length exactly K. # Calculate the sum of the first subarray of length K current_sum = sum(A[:K]) max_sum = current_sum # Sliding window to calculate the sum of subsequent subarrays of length K for i in range(K, N): current_sum += A[i] - A[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a string **s**, return the length of the longest substring of **s** that contains only unique characters. Assume the input string may contain any printable ASCII character, including whitespace. Note: The input string can be very long, so your solution should be optimized for performance.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index = {} max_length = start = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function that accepts an integer `n` and returns the nth number in the Fibonacci sequence. The function should handle the case where `n` is 0, returning 0 as the 0th Fibonacci number. For example: ```python fibonacci(5) == 5 fibonacci(10) == 55 ``` Note! The input is a non-negative integer `n`. The result should be an Integer.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. The Fibonacci sequence starts as 0, 1, 1, 2, 3, 5, 8, 13,... if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Ananda is hosting a special dinner and wants to invite select friends from her contact list. Each contact can either be categorized as a friend or an acquaintance. Ananda decided she\'ll only invite contacts who are in both categories, meaning they must be listed as both friends and acquaintances. Contacts are represented as unique IDs. Ananda has given you two lists of integers: - The \'friends\' list contains IDs of friends. - The \'acquaintances\' list contains IDs of acquaintances. Your task is to find the list of IDs that are present in both lists. **Input:** - The first line contains an integer T, the number of test cases. - Each test case consists of three lines: - The first line contains an integer N, the number of friends. - The second line contains N space-separated integers representing the IDs of friends. - The third line contains an integer M, the number of acquaintances. - The fourth line contains M space-separated integers representing the IDs of acquaintances. **Output:** For each test case, output a single line containing the IDs that are present in both lists, in ascending order. If no IDs are common, output \\"No common contacts\\". **Constraints:** - 1 ≤ T ≤ 1000 - 1 ≤ N, M ≤ 100000 - 1 ≤ ID ≤ 1000000 **Sample Input:** ``` 2 5 1 2 3 4 5 4 3 4 5 6 3 100 200 300 4 150 250 350 450 ``` **Sample Output:** ``` 3 4 5 No common contacts ``` **Explanation:** In the first test case, IDs 3, 4, and 5 are present in both lists. In the second test case, there are no common IDs, so the output is \\"No common contacts\\".","solution":"def common_contacts(test_cases): results = [] for friends, acquaintances in test_cases: common = sorted(set(friends).intersection(acquaintances)) if common: results.append(\\" \\".join(map(str, common))) else: results.append(\\"No common contacts\\") return results # Input Parsing Function def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) friends = list(map(int, input_lines[index + 1].split())) m = int(input_lines[index + 2]) acquaintances = list(map(int, input_lines[index + 3].split())) test_cases.append((friends, acquaintances)) index += 4 return test_cases"},{"question":"Implement a function that takes a string composed of \'(\', \')\', \'{\', \'}\', \'[\' and \']\' characters and determines if the string is a well-formed sequence of these parentheses. The sequence is considered well-formed if each type of bracket has a corresponding and correctly ordered matching pair. The function should return a boolean value, `True` if the string is correctly formed, otherwise `False`. # Examples: ```python is_well_formed(\\"(){}[]\\") => True is_well_formed(\\"[({})]\\") => True is_well_formed(\\"([)]\\") => False is_well_formed(\\"{[}\\") => False ``` # Notes: - An empty string is considered well-formed. - You can assume the input string only contains the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def is_well_formed(s): Returns True if the string s is a well-formed sequence of parentheses, otherwise False. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack == [] or stack.pop() != matching_bracket[char]: return False return stack == []"},{"question":"You are given a string s. You can perform the following operation on the string any number of times: select a non-empty substring and reverse it. The goal is to determine the minimum number of operations required to transform the string into a palindrome. -----Input----- The first line contains an integer t (1 le t le 50), the number of test cases in the input. Each of the next t lines contains a string s (1 le lvert s rvert le 100) consisting of lowercase English letters. -----Output----- For each test case, output a single integer representing the minimum number of operations needed to make the string a palindrome. -----Example----- Input 3 ab racecar hello Output 1 0 3 -----Note----- In the first test case, you can reverse the substring \\"a\\" once to make the string \\"ba\\", which is the same as \\"ab\\" reversed. In the second test case, \\"racecar\\" is already a palindrome, so no operations are needed. In the third test case, one possible sequence of operations is to reverse \\"o\\" to get \\"helol\\", then reverse \\"el\\" to get \\"hoell\\", and finally reverse \\"hel\\" to get \\"olleh\\". This ensures the string becomes \\"olleh\\", which is a palindrome.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations to transform the string s into a palindrome. n = len(s) # Create a dp table to store the minimum number of insertions required dp = [[0] * n for _ in range(n)] for l in range(2, n + 1): for i in range(n - l + 1): j = i + l - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1] def main(t, test_cases): results = [] for case in test_cases: results.append(min_operations_to_palindrome(case)) return results"},{"question":"There is a small village with n houses arranged in a circle. Due to the recent storm, some of the houses have been damaged and need repair. Each house is in either good condition or bad condition. The village council has a budget that allows repairing up to k consecutive houses in one go. They have to decide which segment of k consecutive houses to repair in order to maximize the number of houses that will be in good condition after the repair work. Your task is to find out the maximum number of houses that can be in good condition after repairing at most k consecutive houses. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 200,000, 0 ≤ k ≤ n) — the number of houses and the maximum number of consecutive houses that can be repaired. The second line contains a string of length n consisting of characters \'G\' and \'B\'. \'G\' denotes a house that is in good condition, and \'B\' denotes a house that is in bad condition. -----Output----- Print a single integer — the maximum number of houses that can be in good condition after repairing at most k consecutive houses. -----Examples----- Input 5 2 GBGBG Output 4 Input 6 3 BBBGBG Output 5 -----Note----- In the first example, repairing the segment [2, 3] makes the series GGGBG, GGGBG has 4 good houses in total. In the second example, repairing the segment [1, 3] makes the series GGGBBG, GGGBBG has 5 good houses in total.","solution":"def max_good_houses(n, k, houses): Returns the maximum number of houses that can be in good condition after repairing at most k consecutive houses. max_good = 0 current_good = houses.count(\'G\') # Calculate initial \'B\' to be repaired in the first k segment repair_count = sum(1 for i in range(k) if houses[i] == \'B\') max_good = max(max_good, current_good + repair_count) for i in range(1, n): if i + k - 1 < n: if houses[i-1] == \'B\': repair_count -= 1 if houses[i + k - 1] == \'B\': repair_count += 1 else: if houses[i-1] == \'B\': repair_count -= 1 if houses[(i + k - 1) % n] == \'B\': repair_count += 1 max_good = max(max_good, current_good + repair_count) return max_good"},{"question":"Mirror Image You are given a string of lowercase alphabets and your task is to create a mirror image of the string such that the mirrored part is concatenated to the original string. For example, if the input string is `abc`, the output should be `abccba`. # Function Signature ```python def create_mirror_image(s: str) -> str: ``` # Input - A single string `s` which consists only of lowercase alphabets (`1 <= len(s) <= 1000`). # Output - A single string which is the original string concatenated with its mirror image. # Examples: ```python assert create_mirror_image(\\"abc\\") == \\"abccba\\" assert create_mirror_image(\\"hello\\") == \\"helloolleh\\" assert create_mirror_image(\\"xyz\\") == \\"xyzzyx\\" ``` # Notes - The mirror image of a string is formed by reversing the order of characters in the string. - Your implementation should be efficient in handling the maximum input length.","solution":"def create_mirror_image(s: str) -> str: Given a string s, return the string concatenated with its mirror image, which is the reversed version of the string s. return s + s[::-1]"},{"question":"A small tech startup, Innovators Inc., wants to optimize their software build process. They have N developers and M different tasks to complete a software project. Each task i requires T_i units of time to finish, and each developer j can work on only one task at a time. The goal is to minimize the overall time taken to complete all the tasks, assuming that all developers can start working on tasks at the same time. Given the number of developers and the list of tasks with their respective time requirements, determine the minimum amount of time required to complete all tasks. -----Input:----- The first line contains two integers N and M, the number of developers and the number of tasks, respectively. The second line contains M integers, where the i-th integer represents the time T_i required to complete the i-th task. -----Output:----- Print a single integer, the minimum amount of time required to complete all tasks. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 10^3 - 1 leq T_i leq 10^4 -----Sample Input:----- 3 5 2 14 4 16 6 -----Sample Output:----- 16 -----Explanation:----- One optimal way to assign the tasks is as follows: - Developer 1 works on tasks 2 and 3 (14 + 4 = 18). - Developer 2 works on tasks 4 (16). - Developer 3 works on tasks 1 and 5 (2 + 6 = 8). The maximum time any developer spends is the minimum amount of time required to complete all tasks, which in this case is 16.","solution":"def min_time_to_complete_tasks(N, M, tasks): Given the number of developers N and the list of tasks with their respective time requirements, determine the minimum amount of time required to complete all tasks. from heapq import heappop, heappush # Min heap for the working times of the developers work_times = [0] * N # Assign the largest tasks first to minimize the maximum working time tasks.sort(reverse=True) for task in tasks: min_work = heappop(work_times) heappush(work_times, min_work + task) return max(work_times)"},{"question":"A group of friends is planning to explore a maze-like set of streets in their neighborhood. Their exploration starts from one particular street represented by a number. Help the friends to determine the next few streets based on a unique pattern they\'ve decided upon. -----Input:----- - The first line will contain T, the number of test cases. Then T test cases follow. - Each test case contains a single line of input, one integer N representing the starting street. -----Output:----- For each test case, output the next three streets in the order they will explore, ensuring the pattern follows the rules: 1. The first street explored is twice the original street number. 2. The second street explored is the original number plus the number of vowels in the name of the street (assuming the names are common words). 3. The third street explored is the sum of the first two streets squared, and then take the modulo 100 of the result. Assume all street names are derived from their number by appending the letter \'a\'. For example, Street number 3 becomes \\"3a\\". -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 -----Sample Input:----- 3 2 5 10 -----Sample Output:----- 4 3 25 10 6 36 20 11 41 -----Explanation:----- For Street 2 (Named \\"2a\\"): - Twice the original street number: 2 * 2 = 4 - Number of vowels in \\"2a\\": 1 vowel (\'a\'), thus 2 + 1 = 3 - Sum of first two streets squared, mod 100: (4 + 3)^2 % 100 = 49 % 100 = 49 For Street 5 (Named \\"5a\\"): - Twice the original street number: 2 * 5 = 10 - Number of vowels in \\"5a\\": 1 vowel (\'a\'), thus 5 + 1 = 6 - Sum of first two streets squared, mod 100: (10 + 6)^2 % 100 = 256 % 100 = 56 For Street 10 (Named \\"10a\\"): - Twice the original street number: 2 * 10 = 20 - Number of vowels in \\"10a\\": 1 vowel (\'a\'), thus 10 + 1 = 11 - Sum of first two streets squared, mod 100: (20 + 11)^2 % 100 = 961 % 100 = 61","solution":"def next_streets(T, test_cases): vowels = set(\'aeiouAEIOU\') results = [] for N in test_cases: street_name = f\\"{N}a\\" vowel_count = sum(1 for char in street_name if char in vowels) first_street = 2 * N second_street = N + vowel_count third_street = (first_street + second_street) ** 2 % 100 results.append((first_street, second_street, third_street)) return results"},{"question":"Note: This question carries 150 points. The city of Algorithmsville is organizing a coding competition, and they have a very unique scoring system. They want to assign scores to the participants based on their user ID which is a combination of letters and digits. The score is calculated as the sum of the ASCII values of all the characters in the user ID. For example, for user ID \\"A3B\\", the score would be 65 + 51 + 66 = 182. Given the list of participants\' user IDs, your task is to find out the user ID with the highest score. However, in case of a tie (i.e. multiple user IDs having the same score), return all the user IDs with that highest score. -----Input:----- - First line contains integer N as the number of participants. - Next N lines each contain a single string representing the user ID of a participant. -----Output:----- - Output one line for each user ID having the highest score. -----Constraints:----- - 1 ≤ N ≤ 1000 - Each user ID consists of only letters (uppercase and lowercase) and digits. - The length of each user ID is between 1 and 100 characters. -----Sample Input:----- 5 Alice123 Bob456 Charlie789 Delta0 Echo999 -----Sample Output:----- Charlie789","solution":"def calculate_ascii_score(user_id): Calculate the ASCII score of a user ID by summing ASCII values of all characters. return sum(ord(char) for char in user_id) def find_highest_score_user(ids): Given a list of user IDs, find the one(s) with the highest ASCII value score. if not ids: return [] highest_score = float(\'-inf\') highest_scoring_ids = [] for user_id in ids: score = calculate_ascii_score(user_id) if score > highest_score: highest_score = score highest_scoring_ids = [user_id] elif score == highest_score: highest_scoring_ids.append(user_id) return highest_scoring_ids"},{"question":"Your task is to manipulate a list of numbers according to a set of rules and return the adjusted list. The rules are as follows: 1. For each even-indexed number in the list, increase it by 1 if it\'s even and decrease it by 1 if it\'s odd. 2. For each odd-indexed number in the list, increase it by 2 if it\'s even and decrease it by 2 if it\'s odd. The function should then return the modified list of numbers. Some examples for better understanding: ```` Input: [1, 2, 3, 4, 5, 6] => Output: [0, 4, 2, 6, 4, 8] Input: [10, 21, 32, 45, 50] => Output: [11, 19, 33, 43, 51] Input: [7, 8, 9, 10] => Output: [6, 10, 8, 12] ```` Explanation: For the first example: - Even-indexed: 1 (odd, -1), 3 (odd, -1), 5 (odd, -1) => [0, 2, 2] - Odd-indexed: 2 (even, +2), 4 (even, +2), 6 (even, +2) => [4, 6, 8] For the second example: - Even-indexed: 10 (even, +1), 32 (even, +1), 50 (even, +1) => [11, 33, 51] - Odd-indexed: 21 (odd, -2), 45 (odd, -2) => [19, 43] For the third example: - Even-indexed: 7 (odd, -1), 9 (odd, -1) => [6, 8] - Odd-indexed: 8 (even, +2), 10 (even, +2) => [10, 12] Create a function `adjust_list(numbers: List[int]) -> List[int]` that takes a list of integers `numbers` and returns the modified list following the described rules.","solution":"from typing import List def adjust_list(numbers: List[int]) -> List[int]: Adjust the list of numbers according to specific rules. for i in range(len(numbers)): if i % 2 == 0: # Even index if numbers[i] % 2 == 0: numbers[i] += 1 else: numbers[i] -= 1 else: # Odd index if numbers[i] % 2 == 0: numbers[i] += 2 else: numbers[i] -= 2 return numbers"},{"question":"You are given a string representing a mathematical expression containing non-negative integers and the operators `+` (addition), `-` (subtraction), `*` (multiplication), and `/` (division). The expression may include parentheses to denote precedence, and spaces may appear between characters but should be ignored when evaluating the expression. Write a function `evaluate_expression(expression: str) -> float` that takes the string `expression` as input and returns the evaluated result as a float. Ensure your function can handle nested parentheses correctly and maintain the precedence of mathematical operations. Consider integer division should result in floating-point values for precise calculations. **Examples:** ```python evaluate_expression(\\"3 + 5 * 2\\") # Returns: 13.0 evaluate_expression(\\"(1 + 3) * (6 / 2)\\") # Returns: 12.0 evaluate_expression(\\"8 / 4 + (2 * 3)\\") # Returns: 8.0 evaluate_expression(\\"7 + (3 * (5 - 2))\\") # Returns: 16.0 ``` **Input Constraints:** - The input string only contains non-negative integers, parentheses `()`, and the operators `+`, `-`, `*`, `/`. - The input string is guaranteed to be a valid expression. - The evaluated result should be returned as a floating-point number rounded to one decimal place, if necessary.","solution":"def evaluate_expression(expression: str) -> float: def evaluate(tokens): stack = [] num = 0 sign = \'+\' i = 0 while i < len(tokens): token = tokens[i] if token.isdigit(): num = int(token) if token == \'(\': num, j = evaluate(tokens[i+1:]) i += j if token in \'+-*/)\' or i == len(tokens) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = float(stack[-1]) / num # explicitly converting to float if token == \')\': return sum(stack), i + 1 sign = token num = 0 i += 1 return sum(stack), i # Removing spaces from the expression expression = expression.replace(\' \', \'\') # Convert the string expression into a list of tokens tokens = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = \'\' while i < len(expression) and expression[i].isdigit(): num += expression[i] i += 1 tokens.append(num) else: tokens.append(expression[i]) i += 1 result, _ = evaluate(tokens) # Return the result rounded to one decimal place return round(result, 1)"},{"question":"A robot is located at the top-left corner of an m times n grid (marked \'Start\' in the diagram below which can be referenced). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). How many possible unique paths are there for the robot to go from start to finish? The diagram of the grid is as follows: ``` [ [\\"Start\\", \\"..\\", \\"..\\", \\"..\\", \\"..\\"], [\\"..\\", \\"..\\", \\"..\\", \\"..\\", \\"..\\"], [\\"..\\", \\"..\\", \\"..\\", \\"..\\", \\"..\\"], [\\"..\\", \\"..\\", \\"..\\", \\"..\\", \\"Finish\\"] ] ``` -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 50) — the number of test cases. The next t lines each contain two integers m and n (1 le m, n le 100) — the number of rows and columns in the grid. -----Output----- For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. -----Example----- Input 3 3 7 3 2 7 3 Output 28 3 28 Hint: You can use dynamic programming or combinatorial mathematics to solve this problem.","solution":"import math def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # We use the combinatorial method to calculate the number of unique paths # which is (m+n-2) choose (m-1) or (n-1), which is the total steps choose down steps return math.comb(m + n - 2, m - 1) def handle_test_cases(test_cases): results = [] for m, n in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"You are given a rectangular grid of cells with non-negative integer elevations. Water can flow from one cell to its neighboring cells (left, right, up, down) if the elevation of the neighboring cell is less than or equal to the current cell. You are tasked with determining the number of cells from which water can flow to both the Pacific Ocean and the Atlantic Ocean. The Pacific Ocean touches the left and top edges of the grid, and the Atlantic Ocean touches the right and bottom edges of the grid. -----Input----- Input begins with two integers, M and N, the dimensions of the grid (M rows and N columns). Following this are M lines, each containing N integers separated by spaces, representing the elevation map of the grid. The value of M and N will be no greater than 200, and the elevation values will be non-negative integers no greater than 10,000. -----Output----- Output the number of cells from which water can flow to both the Pacific and Atlantic Oceans. -----Sample Input----- 5 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 5 1 1 2 4 -----Sample Output----- 7","solution":"def pacific_atlantic_water_flow(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) def dfs(x, y, visited): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] visited.add((x, y)) while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and matrix[nx][ny] >= matrix[cx][cy]: stack.append((nx, ny)) visited.add((nx, ny)) pacific_reachable = set() atlantic_reachable = set() for i in range(m): dfs(i, 0, pacific_reachable) dfs(i, n-1, atlantic_reachable) for j in range(n): dfs(0, j, pacific_reachable) dfs(m-1, j, atlantic_reachable) return len(pacific_reachable & atlantic_reachable) # Reading input format def rect_grid_from_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix def solve(input_str): matrix = rect_grid_from_input(input_str) return pacific_atlantic_water_flow(matrix)"},{"question":"Given an array of positive integers representing the height of buildings, you are tasked with determining the total amount of water that could be trapped after raining. The structure of the buildings forms valleys and peaks that can trap water between them. Implement a function that calculates the volume of trapped water given the array of building heights. # Example: * For the array `[0,1,0,2,1,0,1,3,2,1,2,1]`, the function should return `6`. Explanation: - The 1 unit of water is trapped between heights 1 and 2. - 4 units of water are trapped between heights 3 and minimum of heights of left and right buildings. - 1 additional unit of water is trapped between heights 2 and 2. # Notes: * The input array is non-empty and contains at least one building. * The height and the length of the array will not exceed `10,000`.","solution":"def trap_water(heights): Returns the total volume of water that can be trapped. :param heights: List of positive integers representing the height of buildings. :return: Total volume of water that can be trapped between buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the elements that are prime numbers. A prime number is a number that has no divisors other than 1 and itself. If the input is not a list, return \\"Please enter a valid list\\". If the input list contains non-integer elements, they should be ignored, and only integer prime numbers should be considered. For example: - The input [10, 15, 3, 7, 8, \\"abc\\", 2, 4.5] should return [3, 7, 2] - The input \\"12345\\" should return \\"Please enter a valid list\\" - The input [20, 30, 40] should return []","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(lst): Takes a list of integers and returns a list of prime numbers. If the input is not a list, returns \\"Please enter a valid list\\". if not isinstance(lst, list): return \\"Please enter a valid list\\" return [x for x in lst if isinstance(x, int) and is_prime(x)]"},{"question":"Bob is an avid hiker. He likes to plan his hiking activities and make sure he\'s well-prepared for the terrain he will be encountering. Bob has a map with altitude information of his hiking trail. He needs to know when he will encounter an uphill, a downhill, or flat ground, based on the altitude changes of each section of the trail. Write a method `hiking_summary` that receives a list representing the altitudes at each checkpoint of the trail and returns a list of strings representing each section as `\\"Uphill\\"`, `\\"Downhill\\"`, or `\\"Flat\\"`. The function should: - Take in a list of integers `altitudes` where each integer represents the altitude at a checkpoint. - Compare consecutive checkpoints and categorize the trail section between them appropriately: - If the altitude increases: `\\"Uphill\\"` - If the altitude decreases: `\\"Downhill\\"` - If the altitude remains the same: `\\"Flat\\"` For example, given the altitudes `[100, 105, 102, 102, 108, 107]`, the function should return `[\\"Uphill\\", \\"Downhill\\", \\"Flat\\", \\"Uphill\\", \\"Downhill\\"]`. **Examples** Input: `[100, 105, 102, 102, 108, 107]` Output: `[\\"Uphill\\", \\"Downhill\\", \\"Flat\\", \\"Uphill\\", \\"Downhill\\"]` Input: `[90, 90, 92, 88, 87]` Output: `[\\"Flat\\", \\"Uphill\\", \\"Downhill\\", \\"Downhill\\"]` Input: `[120, 115, 115, 120, 125, 125, 122]` Output: `[\\"Downhill\\", \\"Flat\\", \\"Uphill\\", \\"Uphill\\", \\"Flat\\", \\"Downhill\\"]`","solution":"def hiking_summary(altitudes): This function receives a list of altitudes and returns a list of strings categorizing each section of the trail as \\"Uphill\\", \\"Downhill\\", or \\"Flat\\". result = [] for i in range(1, len(altitudes)): if altitudes[i] > altitudes[i - 1]: result.append(\\"Uphill\\") elif altitudes[i] < altitudes[i - 1]: result.append(\\"Downhill\\") else: result.append(\\"Flat\\") return result"},{"question":"The king wishes to create a new sequence for his kingdom\'s annual festival. You have to help the king by generating this sequence based on a given number N. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the sequence as described below. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 20 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 1 1 1 2 1 1 2 6 -----EXPLANATION:----- For each N, generate the sequence where: - The 1st element is always 1. - The 2nd element is also 1. - From the 3rd element onwards, each element is the factorial of its position (i!). For N=2: The sequence is 1 (1st position) and 1 (2nd position). For N=3: The sequence is 1 (1st position), 1 (2nd position), and 2 (3rd position, factorial of 2). For N=4: The first three elements are as above, and the 4th element is 6 (factorial of 3).","solution":"import math def generate_sequence(n): Generates the sequence for a given number n, where the 1st and 2nd elements are 1 and from the 3rd element onwards, each element is the factorial of its position. sequence = [] for i in range(1, n+1): if i <= 2: sequence.append(1) else: sequence.append(math.factorial(i-1)) return sequence def process_test_cases(tc): results = [] for n in tc: results.append(generate_sequence(n)) return results"},{"question":"Create a function that accepts a list of integers and returns a new list containing the same integers sorted in ascending order, except that all instances of the number 5 should be moved to the end of the list, maintaining the order of the other numbers. For example, given the list [3, 5, 2, 5, 8, 1], the function should return [1, 2, 3, 8, 5, 5]. Another example, given the list [5, 3, 4, 5, 1], the function should return [1, 3, 4, 5, 5].","solution":"def custom_sort_with_fives_at_end(lst): Returns a new list of integers sorted in ascending order with all instances of the number 5 moved to the end. # Separate the fives from other numbers non_fives = [x for x in lst if x != 5] fives = [x for x in lst if x == 5] # Sort the non-fives list sorted_non_fives = sorted(non_fives) # Concatenate the sorted non-fives list with the list of fives return sorted_non_fives + fives"},{"question":"Alice and Bob are playing a game on a 2D grid with N rows and M columns. Each cell of the grid is initially occupied either by a block or left empty. A cell occupied by a block is denoted by `#` and an empty cell is denoted by `.`. Alice can unblock any cell she desires, and Bob can also unblock any cell he desires. However, both can only unblock an initially blocked cell. When a cell is unblocked by either Alice or Bob, it is turned into a walkable cell, denoted by `.`. Alice and Bob will take turns to unblock the cells. Alice always goes first. The game ends when there are no more blocked cells left or when neither player can make a move. Alice wins the game if she can create an uninterrupted vertical or horizontal path of walkable cells connecting the top and bottom or left and right sides of the grid, respectively. Bob wins if Alice fails to achieve her path. Your task is to determine who will win the game given the initial state of the grid and assuming both play optimally. -----Input----- - The first line of the input contains two integers N and M - the number of rows and columns respectively. - Each of the next N lines contains a string of M characters, representing the initial state of each cell in the grid (`#` for a blocked cell and `.` for a walkable cell). -----Output----- Print \\"Alice\\" if Alice can create a winning path under optimal play. Otherwise, print \\"Bob\\". -----Constraints----- - 1 le N, M le 50 -----Example Input----- 4 5 .#..# ... .#..# #.#.. -----Example Output----- Alice -----Example Input----- 3 3 # # # -----Example Output----- Bob -----Explanation----- Example case 1: Alice can start by unblocking the cell at (1, 2). Thereafter, using optimal play, she can ensure the creation of a vertical path from the top to the bottom. Example case 2: No matter how optimally both play, Alice can\'t create a path through the grid. Thus, Bob wins.","solution":"def can_alice_win(N, M, grid): # Check for vertical path possibility for col in range(M): stack = [] visited = set() for row in range(N): if grid[row][col] == \'.\': stack.append((row, col)) visited.add((row, col)) while stack: r, c = stack.pop() if r == N - 1: return \\"Alice\\" for next_r in [r - 1, r + 1]: if 0 <= next_r < N and grid[next_r][c] == \'#\' and (next_r, c) not in visited: visited.add((next_r, c)) stack.append((next_r, c)) # Check for horizontal path possibility for row in range(N): stack = [] visited = set() for col in range(M): if grid[row][col] == \'.\': stack.append((row, col)) visited.add((row, col)) while stack: r, c = stack.pop() if c == M - 1: return \\"Alice\\" for next_c in [c - 1, c + 1]: if 0 <= next_c < M and grid[r][next_c] == \'#\' and (r, next_c) not in visited: visited.add((r, next_c)) stack.append((r, next_c)) return \\"Bob\\""},{"question":"# The problem Write a program that takes a string input representing a mathematical expression containing single-digit non-negative integers and the operators `+`, `-`, `*`, and `/`. The input may also contain parentheses `(` and `)` indicating standard order of operations. Your task is to evaluate this expression and return the result as an integer. # Example For the input `\\"(2+3)*(2+3)\\"`: 1. Evaluate the expression inside the parentheses first: `(2+3) = 5` 2. Multiply the results: `5 * 5 = 25` Thus, the output should be `25`. # Constraints - The input string will be non-empty and contain only characters `0-9`, `+`, `-`, `*`, `/`, `(`, `)`, and whitespace. - Division should be treated as integer division (i.e., truncate towards zero). - The expression is guaranteed to be valid and follows proper bracket usage. - The length of the expression will not exceed 100 characters. # Your task Write a function `evaluate_expression(expr: str) -> int` that processes the given string, evaluates the mathematical expression, and returns the result as an integer. **Note**: You may assume that the input string is properly formatted and the mathematical operations are valid according to standard order of operations.","solution":"def evaluate_expression(expr: str) -> int: Evaluates a mathematical expression involving +, -, *, /, (, and ). def evaluate(tokens): def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = val * 10 + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # Remove the \'(\' else: while operators and precedence(operators[-1]) >= precedence(tokens[i]): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[0] return evaluate(expr)"},{"question":"Description: # Task: Write a function that takes a list of integers and returns a tuple containing two lists: one list of the cumulative sums and another list of their cumulative products. The cumulative sum and cumulative product of a list are defined as follows: - Cumulative Sum: The ith element in this new list is the sum of the first i+1 elements from the original list. - Cumulative Product: The ith element in this new list is the product of the first i+1 elements from the original list. # Examples: ``` input([1, 2, 3, 4]) => returns ([1, 3, 6, 10], [1, 2, 6, 24]) input([5, 10, 15]) => returns ([5, 15, 30], [5, 50, 750]) input([1]) => returns ([1], [1]) input([]) => returns ([], []) ``` Note: The input list will always contain non-negative integers.","solution":"def cumulative_sum_and_product(lst): Returns a tuple of two lists: - the cumulative sums of the input list - the cumulative products of the input list if not lst: return ([], []) cumulative_sum = [] cumulative_product = [] sum_so_far = 0 product_so_far = 1 for num in lst: sum_so_far += num product_so_far *= num cumulative_sum.append(sum_so_far) cumulative_product.append(product_so_far) return (cumulative_sum, cumulative_product)"},{"question":"Given an array of integers, you need to answer Q queries where each query asks for the product of elements in the given range [L, R]. However, the product can be very large, so you should return it modulo 10^9 + 7. -----Input----- The first line of input contains two integers N and Q denoting the number of elements in the array and the number of queries, respectively. The second line contains N integers representing the elements of the array. The following Q lines each contain two integers L and R (1-based), which represent the range for which the product needs to be computed. -----Output----- For each query, output the product of elements in the range [L, R] modulo 10^9 + 7. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ A[i] ≤ 10^4 - 1 ≤ L ≤ R ≤ N -----Example----- Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 24 120 Note: Since the value of products can be very large, you may need to use logarithmic properties or segment tree for efficient computation.","solution":"def product_in_range(arr, queries): Compute the product of elements in a given range for multiple queries, and return the results modulo 10^9 + 7. MOD = 10**9 + 7 n = len(arr) # Precompute prefix products modulo MOD prefix_products = [1] * (n + 1) for i in range(1, n + 1): prefix_products[i] = (prefix_products[i-1] * arr[i-1]) % MOD results = [] for L, R in queries: product = (prefix_products[R] * pow(prefix_products[L-1], MOD-2, MOD)) % MOD results.append(product) return results # Example usage N = 5 Q = 3 arr = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4), (1, 5)] print(product_in_range(arr, queries)) # Output should be: [6, 24, 120]"},{"question":"You are given a string S consisting of lowercase alphabets. Determine if the string can be transformed into a palindrome by performing the following operation any number of times: - Choose a character and move it to the front of the string. -----Constraints----- - 1 leq |S| leq 300000 - S consists of only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If the string can be transformed into a palindrome, print Yes; otherwise, print No. -----Sample Input----- aabc -----Sample Output----- Yes The string can be transformed into a palindrome as follows: - Move \'a\' from the end to the front. The string S becomes aacb. - Move \'a\' from the second position to the front. The string S becomes aaaacb. - Move \'c\' from the third position to the front. The string S becomes caaaab. - Move \'b\' from the fourth position to the front. The string S becomes bca. Alternate transformations might result in the palindrome as well, but the above steps provide one possible sequence.","solution":"def can_form_palindrome(S): Checks if a string can be rearranged to form a palindrome by moving characters to the front. from collections import Counter count = Counter(S) odd_count = sum(1 for value in count.values() if value % 2 != 0) return odd_count <= 1"},{"question":"Write a function that takes a positive integer `n` and returns a string representing the number `n` in Roman numerals. Roman numerals are represented by the following symbols: ```text Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Letters can be combined to form numbers. For example, 2 is written as `II` in Roman numeral, just two one\'s added together. 12 is written as `XII`, which is simply `X + II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. For example: ```python to_roman(9) => \\"IX\\" to_roman(58) => \\"LVIII\\" to_roman(1994) => \\"MCMXCIV\\" ``` Function signature: ```python def to_roman(n: int) -> str: pass ```","solution":"def to_roman(n: int) -> str: Converts a positive integer n to its Roman numeral representation. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syms[i] n -= val[i] i += 1 return roman_num"},{"question":"You are developing a new sorting feature for a task management application. The tasks need to be sorted based on priority first (highest priority first) and then by date added (earliest date added first) if two tasks have the same priority. Each task is represented by a tuple, where the first element is an integer representing the priority (1 is the highest priority), and the second element is a string representing the date added in \'YYYY-MM-DD\' format. Write a function that takes a list of task tuples and returns a list of tasks sorted according to the rules described. **Examples:** ```python sort_tasks([(2, \\"2023-01-15\\"), (1, \\"2023-01-10\\"), (1, \\"2023-01-12\\"), (3, \\"2023-01-01\\")]) # => [(1, \\"2023-01-10\\"), (1, \\"2023-01-12\\"), (2, \\"2023-01-15\\"), (3, \\"2023-01-01\\")] sort_tasks([(2, \\"2023-06-07\\"), (3, \\"2023-05-01\\"), (2, \\"2023-04-12\\")]) # => [(2, \\"2023-04-12\\"), (2, \\"2023-06-07\\"), (3, \\"2023-05-01\\")] ```","solution":"def sort_tasks(tasks): Returns a list of tasks sorted by priority (highest first) and date added (earliest first). Args: tasks (list of tuple): A list of tasks where each task is represented by a tuple (priority, date_added) Returns: list of tuple: Sorted list of tasks. # Sorting the tasks with a composite key: primary key is priority (descending), secondary key is date (ascending) sorted_tasks = sorted(tasks, key=lambda task: (task[0], task[1])) return sorted_tasks"},{"question":"Write a function that takes a dictionary of people with their respective ages and returns a list of people (names) who are exactly a given age. The result should be sorted in alphabetical order. ```python exact_age({\'Alice\': 30, \'Bob\': 25, \'Charlie\': 30, \'David\': 25, \'Eve\': 35}, 30) # [\'Alice\', \'Charlie\'] exact_age({\'Alice\': 30, \'Bob\': 25, \'Charlie\': 30, \'David\': 25, \'Eve\': 35}, 25) # [\'Bob\', \'David\'] exact_age({\'Alice\': 30, \'Bob\': 25, \'Charlie\': 30, \'David\': 25, \'Eve\': 35}, 35) # [\'Eve\'] exact_age({\'Alice\': 22, \'Bob\': 25, \'Charlie\': 23, \'David\': 22, \'Eve\': 33}, 22) # [\'Alice\', \'David\'] ```","solution":"def exact_age(people_ages, target_age): Returns a list of names of people who are exactly the target age, sorted alphabetically. :param people_ages: Dictionary of people\'s names and their respective ages. :type people_ages: dict :param target_age: The age to filter on. :type target_age: int :return: List of names of people who are exactly the target age, sorted in alphabetical order. :rtype: list return sorted(name for name, age in people_ages.items() if age == target_age)"},{"question":"You have been hired to implement a task management system for a small company. The system should help keep track of tasks assigned to different employees. Each task has a unique identifier, a description, a priority level (low, medium, high), and a status (to do, in progress, done). Create a `TaskManager` class with the following functionalities: 1. Add a new task. 2. Update the status of a task. 3. Retrieve tasks based on their status. 4. Remove a completed task. The class should handle invalid inputs appropriately, such as attempting to update a non-existing task or using invalid status or priority levels. Your implementation should be able to handle multiple tasks and support at least 10 simultaneous tasks. Write the implementation of the `TaskManager` class and demonstrate its usage with the following example: ```python manager = TaskManager() # Adding tasks manager.add_task(1, \\"Complete report\\", \\"high\\", \\"to do\\") manager.add_task(2, \\"Test new software\\", \\"medium\\", \\"to do\\") manager.add_task(3, \\"Prepare presentation\\", \\"high\\", \\"in progress\\") # Updating task status manager.update_task_status(2, \\"done\\") # Retrieving tasks based on status print(manager.get_tasks_by_status(\\"to do\\")) print(manager.get_tasks_by_status(\\"done\\")) # Removing completed task manager.remove_task(2) ``` Expected output: ``` [{\'id\': 1, \'description\': \'Complete report\', \'priority\': \'high\', \'status\': \'to do\'}] [{\'id\': 2, \'description\': \'Test new software\', \'priority\': \'medium\', \'status\': \'done\'}] ```","solution":"class TaskManager: VALID_PRIORITIES = [\\"low\\", \\"medium\\", \\"high\\"] VALID_STATUSES = [\\"to do\\", \\"in progress\\", \\"done\\"] def __init__(self): self.tasks = {} def add_task(self, task_id, description, priority, status): if priority not in self.VALID_PRIORITIES: raise ValueError(f\\"Invalid priority level: {priority}\\") if status not in self.VALID_STATUSES: raise ValueError(f\\"Invalid status: {status}\\") if task_id in self.tasks: raise ValueError(f\\"Task ID {task_id} already exists\\") self.tasks[task_id] = { \\"description\\": description, \\"priority\\": priority, \\"status\\": status } def update_task_status(self, task_id, new_status): if new_status not in self.VALID_STATUSES: raise ValueError(f\\"Invalid status: {new_status}\\") if task_id not in self.tasks: raise KeyError(f\\"Task ID {task_id} does not exist\\") self.tasks[task_id][\\"status\\"] = new_status def get_tasks_by_status(self, status): if status not in self.VALID_STATUSES: raise ValueError(f\\"Invalid status: {status}\\") return [ {\\"id\\": task_id, \\"description\\": task[\\"description\\"], \\"priority\\": task[\\"priority\\"], \\"status\\": task[\\"status\\"] } for task_id, task in self.tasks.items() if task[\\"status\\"] == status ] def remove_task(self, task_id): if task_id not in self.tasks: raise KeyError(f\\"Task ID {task_id} does not exist\\") if self.tasks[task_id][\\"status\\"] != \\"done\\": raise ValueError(f\\"Can only remove tasks that are \'done\'\\") del self.tasks[task_id]"},{"question":"Given a list of non-negative integers `nums`, arrange them such that they form the largest possible number. The result should be represented as a string, not an integer. To achieve this, a custom comparator must be used to decide the order in which the numbers are concatenated. Specifically, for two numbers `x` and `y`, the order should be determined by comparing the two possible concatenations `xy` and `yx`. You may assume that every number in `nums` is non-negative and will fit within the range of a 32-bit signed integer. Example 1: Input: `[10, 2]` Output: `\\"210\\"` Example 2: Input: `[3, 30, 34, 5, 9]` Output: `\\"9534330\\"` Example 3: Input: `[1]` Output: `\\"1\\"` Example 4: Input: `[10]` Output: `\\"10\\"` Note: * The output must not contain any leading zeroes, except the number \\"0\\" itself. * The length of `nums` will be in the range `[1, 100]`. * Each integer in `nums` will be in the range `[0, 10^9]`. Hint: Use a custom sorting function to determine the order of concatenation.","solution":"from functools import cmp_to_key def largest_number(nums): def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert numbers to strings for easy comparison nums_str = list(map(str, nums)) # Sort the numbers based on the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Concatenate the results result = \'\'.join(nums_str) # Handle the case where the result is leading with multiple zeros return \'0\' if result[0] == \'0\' else result"},{"question":"Create a function that will take a string composed of letters and digits, and return a string where all the digits are replaced by their word equivalents. For example, \'1\' becomes \'one\', \'2\' becomes \'two\', etc. Non-digit characters should remain unchanged. e.g. \\"Hello2World\\" --> \\"HellotwoWorld\\" ```if:csharp Documentation: DigitsToWords.Convert Method (String) Converts all digits in a string to their word equivalents. Syntax public static string Convert( string input ) Parameters input Type: System.String The string containing digits to be converted. Return Value Type: System.String The string with digits replaced by their word equivalents. Exceptions Exception Condition ArgumentNullException input is null. ```","solution":"def digits_to_words(input_str): Converts all digits in a string to their word equivalents. Parameters: input_str (str): The string containing digits to be converted. Returns: str: The string with digits replaced by their word equivalents. digit_to_word = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } return \'\'.join(digit_to_word.get(char, char) for char in input_str)"},{"question":"You need to write a function that finds the first non-repeating character in a given string. Return the character if it exists, otherwise return an empty string. Examples: Handle edge cases where the string might be completely without unique characters. ```python first_non_repeating(\\"leetcode\\") == \'l\' first_non_repeating(\\"loveleetcode\\") == \'v\' first_non_repeating(\\"aabbcc\\") == \'\' ``` Happy coding!","solution":"def first_non_repeating(s): Returns the first non-repeating character in a string s. If there is no non-repeating character, return an empty string. char_count = {} # Count the frequency of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with count 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Given an input string, write a function that returns a new string where all repeated characters are replaced by a single occurrence of that character. The order of characters in the output string should be the same as their first appearance in the input string. Examples: ```python remove_repeats(\'programming\') # => \'progamin\' remove_repeats(\'aabccba\') # => \'abc\' remove_repeats(\'hello world!\') # => \'helo wrd!\' ``` Documentation: ```python remove_repeats(input_string); ``` - `input_string`: string - The input string from which to remove repeated characters. The function should: - Traverse the input string and keep track of characters that have already been encountered. - Append each new character to the result string. - If a character is encountered again, it should not be added to the result string to ensure only its first occurrence is retained.","solution":"def remove_repeats(input_string): Returns a string where all repeated characters in the input string are replaced by a single occurrence of that character. Parameters: input_string (str): The input string. Returns: str: The processed string with repeated characters removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \\"\\".join(result)"},{"question":"Task ===== You are to write a function that determines the first unique character in a given string. A unique character is a character that appears exactly once in the string. The function should return the index of the first unique character. If there are no unique characters, return -1. Function Signature ================== ```python def first_unique_character(s: str) -> int: ``` Parameters ========== - `s`: A string containing only lowercase alphabets (1 <= len(s) <= 10^5). Return Value ============ An integer representing the index of the first non-repeating character, or -1 if there is no such character. Examples ======== ```python assert first_unique_character(\\"leetcode\\") == 0 assert first_unique_character(\\"loveleetcode\\") == 2 assert first_unique_character(\\"aabbcc\\") == -1 ``` Notes ===== - Your solution should have optimal time complexity to handle large input sizes efficiently. - You may assume that the input string contains only lowercase letters.","solution":"def first_unique_character(s: str) -> int: Returns the index of the first unique character in a given string `s`. If there are no unique characters, returns -1. # Dictionary to store the count of each character char_count = {} # First pass to count all characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0. Examples: Input: nums = [2,1,2] Output: 5 Explanation: You can form a triangle with sides 2, 2, and 1, whose perimeter is 5. Input: nums = [1,2,1] Output: 0 Explanation: You cannot form a triangle with sides 1, 1, and 2. Input: nums = [3,2,3,4] Output: 10 Explanation: You can form a triangle with sides 3, 3, and 4, whose perimeter is 10. Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 10^6","solution":"def largest_perimeter(nums): Returns the largest perimeter of a triangle with a non-zero area formed from three of the lengths in the input array. If no such triangle exists, returns 0. nums.sort(reverse=True) # sort the array in descending order for i in range(len(nums) - 2): if nums[i] < nums[i+1] + nums[i+2]: return nums[i] + nums[i+1] + nums[i+2] return 0"},{"question":"A Palindromic Number is a number that remains the same when its digits are reversed. For example, 121 is a palindromic number because 121 reversed is still 121. On the other hand, 123 is not a palindromic number because 123 reversed is 321, which is different from 123. Write a method is_palindromic(x) (in Haskell: isPalindromic :: Integer -> Bool) which returns whether or not x is a Palindromic Number.","solution":"def is_palindromic(x): Returns True if x is a palindromic number, False otherwise. A palindromic number is a number that remains the same when its digits are reversed. x_str = str(x) return x_str == x_str[::-1]"},{"question":"**Counting Valid Parentheses Strings** You are given an integer N. You need to determine the number of valid parentheses strings of length 2*N that can be formed using exactly N opening brackets \'(\' and N closing brackets \')\'. A valid parentheses string is defined as: - An empty string \\"\\" is valid. - If \\"S\\" is a valid parentheses string, then so is \\"(\\" + S + \\")\\". - If \\"A\\" and \\"B\\" are valid parentheses strings, then so is \\"A\\" + \\"B\\". Your task is to calculate the number of such valid strings, modulo 10^9 + 7. -----Input:----- The input consists of a single integer N, the number of pairs of parentheses. -----Output:----- Output a single integer denoting the number of valid parentheses strings of length 2*N, modulo 10^9+7. -----Constraints:----- 1 <= N <= 1000 -----Example: Input: 3 Output: 5 Explanation: For N=3, the valid parentheses strings are: \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\". The total number of such valid strings is 5.","solution":"MOD = 10**9 + 7 def num_valid_parentheses(N): Returns the number of valid parentheses strings of length 2*N. if N == 0: return 1 catalan = [0] * (N + 1) catalan[0] = 1 for i in range(1, N + 1): for j in range(i): catalan[i] = (catalan[i] + catalan[j] * catalan[i - 1 - j]) % MOD return catalan[N]"},{"question":"Write a function `isLandlocked` that determines if a country is landlocked or not. A landlocked country is one that is entirely enclosed by land, or whose coastlines lie on endorheic basins. The function will take in a string representing the name of the country and return `true` if the country is landlocked, otherwise `false`. For simplicity, assume you are provided with a predefined dictionary `country_borders` where keys are country names and values are lists of neighboring countries. Another predefined dictionary `coastal_countries` contains country names as keys and boolean values indicating whether each country has a coastline. For example: ```python country_borders = { \\"Nepal\\": [\\"China\\", \\"India\\"], \\"Bhutan\\": [\\"China\\", \\"India\\"], \\"China\\": [\\"Nepal\\", \\"India\\", \\"Pakistan\\", \\"Bhutan\\", \\"Afghanistan\\"], \\"India\\": [\\"Nepal\\", \\"China\\", \\"Bhutan\\", \\"Pakistan\\"], \\"Canada\\": [\\"USA\\"], \\"USA\\": [\\"Canada\\", \\"Mexico\\"], \\"Mexico\\": [\\"USA\\"], # Add more countries as needed } coastal_countries = { \\"Nepal\\": False, \\"Bhutan\\": False, \\"China\\": True, \\"India\\": True, \\"Canada\\": True, \\"USA\\": True, \\"Mexico\\": True, # Add more countries as needed } def isLandlocked(country): # Your code here # pass print(isLandlocked(\\"Nepal\\")) # True print(isLandlocked(\\"China\\")) # False print(isLandlocked(\\"Canada\\")) # False ```","solution":"country_borders = { \\"Nepal\\": [\\"China\\", \\"India\\"], \\"Bhutan\\": [\\"China\\", \\"India\\"], \\"China\\": [\\"Nepal\\", \\"India\\", \\"Pakistan\\", \\"Bhutan\\", \\"Afghanistan\\"], \\"India\\": [\\"Nepal\\", \\"China\\", \\"Bhutan\\", \\"Pakistan\\"], \\"Canada\\": [\\"USA\\"], \\"USA\\": [\\"Canada\\", \\"Mexico\\"], \\"Mexico\\": [\\"USA\\"], # Add more countries as needed } coastal_countries = { \\"Nepal\\": False, \\"Bhutan\\": False, \\"China\\": True, \\"India\\": True, \\"Canada\\": True, \\"USA\\": True, \\"Mexico\\": True, # Add more countries as needed } def isLandlocked(country): Determines if a country is landlocked. Parameters: - country (str): The name of the country. Returns: - bool: True if the country is landlocked, otherwise False. return not coastal_countries.get(country, False)"},{"question":"A magic square is a grid of numbers where the sum of every row, column, and both main diagonals are all equal. An n x n matrix is said to be a magic square if it is filled with distinct integers from 1 to n^2 and the sums are as described. Task Write a function to determine if a given n x n grid is a magic square. The function should take a two-dimensional array (a list of lists) as input and return `True` if the grid forms a magic square and `False` otherwise. Input - A two-dimensional list `grid` representing the grid of size n x n, where 1 ≤ n ≤ 10. - Each element of the grid will be an integer. Output - Return `True` if the grid is a magic square, `False` otherwise. Example ``` is_magic_square([ [2, 7, 6], [9, 5, 1], [4, 3, 8] ]) == True is_magic_square([ [3, 5, 7], [8, 1, 6], [4, 9, 2] ]) == False is_magic_square([ [4, 9, 2], [3, 5, 7], [8, 1, 6] ]) == True ``` Happy coding!","solution":"def is_magic_square(grid): n = len(grid) # Calculate the magic constant (sum expected for every row, column, and diagonal) magic_constant = n * (n**2 + 1) // 2 # Check if all numbers from 1 to n^2 are present numbers = set() for row in grid: for num in row: numbers.add(num) if numbers != set(range(1, n**2 + 1)): return False # Check sums of rows for i in range(n): if sum(grid[i]) != magic_constant: return False # Check sums of columns for j in range(n): if sum(grid[i][j] for i in range(n)) != magic_constant: return False # Check sums of diagonals if sum(grid[i][i] for i in range(n)) != magic_constant: return False if sum(grid[i][n-i-1] for i in range(n)) != magic_constant: return False return True"},{"question":"Design a class TicTacToe that supports the following methods: 1. __init__(self, n): Initializes the class with the size n of the board as an n x n grid. 2. move(self, row, col, player): Player {player} makes a move at (row, col). Player 1 will use mark \'1\' and Player 2 will use mark \'2\'. The method should return: - 0 if no player wins - 1 if Player 1 wins - 2 if Player 2 wins A player is considered to have won if they have completed a full row, column, or either diagonal. Example: TicTacToe toe = TicTacToe(3); toe.move(0, 0, 1); -> Returns 0 (no one wins) toe.move(0, 2, 2); -> Returns 0 (no one wins) toe.move(2, 2, 1); -> Returns 0 (no one wins) toe.move(1, 1, 2); -> Returns 0 (no one wins) toe.move(2, 0, 1); -> Returns 0 (no one wins) toe.move(1, 0, 2); -> Returns 0 (no one wins) toe.move(2, 1, 1); -> Returns 1 (Player 1 wins) Constraints: - The board is of size n x n where 1 <= n <= 100. - A move function will only be called until the game has a winner. - row and col are zero-indexed. - A move can only be made to an empty cell.","solution":"class TicTacToe: def __init__(self, n): Initialize the TicTacToe board of size n x n. self.n = n self.board = [[0] * n for _ in range(n)] self.rows = [0] * n self.cols = [0] * n self.diagonal = 0 self.anti_diagonal = 0 def move(self, row, col, player): Player {player} places a mark on the (row, col) cell of the board. Returns: - 0 if no player wins - 1 if Player 1 wins - 2 if Player 2 wins mark = 1 if player == 1 else -1 # update row, column, diagonal, and anti-diagonal self.rows[row] += mark self.cols[col] += mark if row == col: self.diagonal += mark if row + col == self.n - 1: self.anti_diagonal += mark # check for win condition if abs(self.rows[row]) == self.n or abs(self.cols[col]) == self.n or abs(self.diagonal) == self.n or abs(self.anti_diagonal) == self.n: return player return 0"},{"question":"Shreya is practicing her drawing skills and loves drawing sequences of colored lines. She has a canvas that is divided into equal-length segments, and the segments are numbered from 1 to N. Each segment can be painted with a particular color identified by a unique integer. Shreya paints the segments in order, but she sometimes gets distracted and paints two consecutive segments with the same color. Shreya wants to fix her painting by ensuring that no two consecutive segments have the same color. To do this, she needs to repaint the minimum number of segments. Help Shreya determine this minimum number. -----Input:----- - The first line contains an integer N, the number of segments on Shreya\'s canvas. - The second line contains N space-separated integers, representing the sequence of colors painted on the segments. -----Output:----- Print a single integer which is the minimum number of segments that need to be repainted to ensure no two consecutive segments have the same color. -----Constraints----- - 1 leq N leq 1000 - 1 leq C_i leq 1000 (C_i denotes the color of the ith segment and is a positive integer) -----Sample Input:----- 6 1 2 2 3 3 1 -----Sample Output:----- 2","solution":"def min_repaints(N, colors): repaints = 0 for i in range(1, N): if colors[i] == colors[i - 1]: repaints += 1 return repaints"},{"question":"In a magical forest, there lives a tree called the Infinity Tree. This tree grows in a very unique way: there is a root node labeled 1, and each node can have any number of children but every node has a unique integer label. The tree is constructed step-by-step with a given set of operations, and your task is to determine the lowest common ancestor (LCA) of two given nodes in the tree, after each operation. Each operation is one of the following types: 1. \\"ADD u v\\" - adds a node as a child of the node labeled `u` with a unique label `v`. 2. \\"QUERY u v\\" - asks for the label of the LCA of nodes `u` and `v`. The tree starts with only the root node labeled 1. -----Input----- The first line contains a single integer `M` denoting the number of operations. Each of the next `M` lines contains an operation of one of the two types mentioned above. -----Output----- For each \\"QUERY\\" operation, print the label of the LCA of the two nodes given in the query. -----Constraints----- - 1 ≤ M ≤ 100,000 - 1 ≤ u, v ≤ 100,000 - The node labels are unique positive integers. -----Example----- Input: 7 ADD 1 2 ADD 1 3 ADD 2 4 ADD 2 5 QUERY 4 5 QUERY 4 3 QUERY 5 1 Output: 2 1 1 -----Explanation----- Example case: - We start with root node 1. - ADD 1 2: Node 2 is added as a child of node 1. - ADD 1 3: Node 3 is added as a child of node 1. - ADD 2 4: Node 4 is added as a child of node 2. - ADD 2 5: Node 5 is added as a child of node 2. - QUERY 4 5: The LCA of nodes 4 and 5 is 2. - QUERY 4 3: The LCA of nodes 4 and 3 is 1. - QUERY 5 1: The LCA of nodes 5 and 1 is 1.","solution":"class InfinityTree: def __init__(self): self.parent = {1: None} self.depth = {1: 0} def add(self, u, v): self.parent[v] = u self.depth[v] = self.depth[u] + 1 def find_lca(self, u, v): # Function to find the LCA # Bring both nodes to the same depth while self.depth[u] > self.depth[v]: u = self.parent[u] while self.depth[v] > self.depth[u]: v = self.parent[v] # Now move up together until we find the LCA while u != v: u = self.parent[u] v = self.parent[v] return u def infinity_tree_operations(operations): tree = InfinityTree() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": u = int(parts[1]) v = int(parts[2]) tree.add(u, v) elif parts[0] == \\"QUERY\\": u = int(parts[1]) v = int(parts[2]) lca = tree.find_lca(u, v) results.append(lca) return results"},{"question":"# Binary Tree Path Sum Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. For example: Given the below binary tree and `sum = 22`, ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` Return `true`, because the root-to-leaf path `5->4->11->2` equals 22. Function Signature ```python def has_path_sum(root: Optional[TreeNode], target_sum: int) -> bool: ``` # Input - `root`: The root node of the binary tree (BinaryTree). - `target_sum`: The target sum you need to achieve (integer). # Output - `True` if such a path exists, otherwise `False` (boolean). # Constraints - The number of nodes in the tree is in the range `[0, 1000]`. - `-1000 <= Node.val <= 1000` - `-1000 <= sum <= 1000` # Example ```python # Binary tree and sum = 22 # 5 # / # 4 8 # / / # 11 13 4 # / # 7 2 1 root = TreeNode(5) root.left = TreeNode(4) root.right = TreeNode(8) root.left.left = TreeNode(11) root.left.left.left = TreeNode(7) root.left.left.right = TreeNode(2) root.right.left = TreeNode(13) root.right.right = TreeNode(4) root.right.right.right = TreeNode(1) has_path_sum(root, 22) # Output: True ```","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def has_path_sum(root: Optional[TreeNode], target_sum: int) -> bool: Returns whether the binary tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. if not root: return False if not root.left and not root.right: return root.val == target_sum target_sum -= root.val return has_path_sum(root.left, target_sum) or has_path_sum(root.right, target_sum)"},{"question":"Write a function that takes a list of strings representing different types of fruits, and returns a dictionary with the count of each type of fruit. The input list may contain multiple instances of the same fruit, and the names of the fruits are case-insensitive. The function should normalize all fruit names to lowercase in the output dictionary. # Function Signature ```python def count_fruits(fruit_list: List[str]) -> Dict[str, int]: pass ``` # Example ```python assert count_fruits([\\"Apple\\", \\"Banana\\", \\"apple\\", \\"Orange\\", \\"banana\\", \\"BANANA\\", \\"orange\\", \\"ORANGE\\", \\"apple\\"]) == {\'apple\': 3, \'banana\': 3, \'orange\': 3} assert count_fruits([\\"kiwi\\", \\"mango\\", \\"Kiwi\\", \\"MANGO\\", \\"kiWI\\", \\"ManGO\\"]) == {\'kiwi\': 3, \'mango\': 3} ``` # Additional Notes: 1. The input list might be empty, in which case, the function should return an empty dictionary. 2. The fruit names will consist of alphabetic characters only, making case conversion straightforward.","solution":"from typing import List, Dict def count_fruits(fruit_list: List[str]) -> Dict[str, int]: fruit_count = {} for fruit in fruit_list: fruit_lower = fruit.lower() if fruit_lower in fruit_count: fruit_count[fruit_lower] += 1 else: fruit_count[fruit_lower] = 1 return fruit_count"},{"question":"Matrix Diagonal Sum You\'re given a square matrix of size NxN. Your task is to write a program to calculate the sum of the elements on both the main diagonal and the secondary diagonal. The main diagonal of a matrix is composed of the elements that stretch from the top left corner to the bottom right corner, while the secondary diagonal is composed of the elements that stretch from the top right to the bottom left corner. -----Input:----- - The first line of input contains an integer N, the size of the matrix. - The next N lines each contain N space-separated integers representing the elements of the matrix. -----Output:----- Print the sum of the elements on both diagonals. -----Constraints----- - 1 leq N leq 100 - Each element of the matrix will be an integer value between -1000 and 1000. -----Sample Input:----- 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 30","solution":"def matrix_diagonal_sum(matrix): n = len(matrix) main_diagonal = sum(matrix[i][i] for i in range(n)) secondary_diagonal = sum(matrix[i][n-i-1] for i in range(n)) return main_diagonal + secondary_diagonal # Example usage # N = 3 # matrix = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(matrix_diagonal_sum(matrix)) # Output should be 30"},{"question":"Mia is planning a hiking trip and wants to optimize her backpack packing. She has a list of items, each with a weight and a value representing their importance to her. She also has a maximum weight capacity for her backpack. Mia wants to pack the highest value items without exceeding her backpack\'s weight capacity. Write a function `optimize_backpack` that helps her achieve this. The function takes three parameters: 1. `weights`: an array of integers where each integer represents the weight of an item. 2. `values`: an array of integers where each integer represents the value of the corresponding item in `weights`. 3. `max_weight`: an integer representing the maximum weight capacity of Mia\'s backpack. The function should return the maximum total value that Mia can carry in her backpack without exceeding the weight limit. # Example ```python weights = [2, 3, 4, 5] values = [3, 4, 5, 6] max_weight = 5 ``` In this example, Mia can carry the items with weights `[2, 3]` for a total value of `7`. Therefore, `optimize_backpack(weights, values, max_weight)` should return `7`. # Constraints - The length of `weights` and `values` will always be the same. - All integers in the `weights` and `values` arrays are positive. - `max_weight` is a positive integer. - The function should be optimized for efficiency.","solution":"def optimize_backpack(weights, values, max_weight): Returns the maximum total value that can be carried in the backpack without exceeding max_weight. n = len(weights) dp = [[0 for w in range(max_weight + 1)] for i in range(n+1)] for i in range(1, n+1): for w in range(max_weight + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], values[i-1] + dp[i-1][w - weights[i-1]]) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight]"},{"question":"You are a legend in your school\'s programming club, constantly coming up with ingenious solutions, but now you face a more nuanced challenge. Your clubmate is perplexed by converting Roman numerals to integers and has asked for your assistance in automating this task. A Roman numeral is a string consisting of the seven Roman numeral symbols: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` The numeral is usually written largest to smallest from left to right. However, certain subtractive cases exist: - I can be placed before V and X to make 4 and 9. - X can be placed before L and C to make 40 and 90. - C can be placed before D and M to make 400 and 900. Given a Roman numeral, write a function that converts it to an integer. ```python roman1 = \\"III\\" roman_to_int(roman1) == 3 # III -> 3 roman2 = \\"IX\\" roman_to_int(roman2) == 9 # IX -> 9 roman3 = \\"LVIII\\" roman_to_int(roman3) == 58 # L + V + III -> 50 + 5 + 3 -> 58 roman4 = \\"MCMXCIV\\" roman_to_int(roman4) == 1994 # M + CM + XC + IV -> 1000 + 900 + 90 + 4 -> 1994 ``` Your function should take a string representing a valid Roman numeral and output an integer. ```python def roman_to_int(roman): # Your code here pass ```","solution":"def roman_to_int(roman): Converts a Roman numeral to an integer. roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"# Task Write a function that takes an integer as input and returns a list of its prime factors sorted in descending order. A prime factor is a factor of a number that is a prime number. # Inputs: - An integer `n`, where `2 <= n <= 10^6`. # Outputs: - A list of integers representing the prime factors of `n` sorted in descending order. # Example: - For `n = 28`, the function should return `[7, 2, 2]`. - For `n = 100`, the function should return `[5, 5, 2, 2]`. # Constraints: - The input number can be very large. Ensure your solution is optimized for large numbers and runs efficiently. # Note: - Use efficient algorithms for factorization and consider edge cases, such as when the input number itself is a prime number.","solution":"def prime_factors_descending(n): Returns a list of prime factors of n sorted in descending order. Parameters: n (int): The integer to find prime factors for. Returns: List[int]: A list of prime factors sorted in descending order. i = 2 factors = [] while i * i <= n: while n % i == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) factors.sort(reverse=True) return factors"},{"question":"You are given a list of integers representing the number of programming challenges solved by each participant in a coding competition. The list is sorted in non-decreasing order. A coding team can be formed by choosing a contiguous subarray of participants. The strength of a team is defined as the minimum number of challenges solved by any participant in the team. Your task is to find the maximum strength of a team for each possible team size from 1 to n, where n is the number of participants. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 2 × 10^5), the number of participants. The second line contains n integers separated by space, b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^9), representing the number of challenges solved by the participants. -----Output----- Print n integers in one line. For each x from 1 to n, print the maximum strength among all teams of size x. -----Examples----- Input 8 1 2 2 3 3 3 4 5 Output 5 4 3 3 3 2 2 1","solution":"def max_strength_for_team_size(n, challenges): Finds the maximum strength of a team for each possible team size from 1 to n. Args: n : int : The number of participants challenges : list : The list of integers representing the number of challenges solved by each participant (sorted in non-decreasing order) Returns: list : A list of n integers representing the maximum strength of a team of each size from 1 to n # The strength of the team of size x is the element at position -x (because the list is sorted in non-decreasing order) result = [challenges[-i] for i in range(1, n + 1)] return result # Example of usage n = 8 challenges = [1, 2, 2, 3, 3, 3, 4, 5] print(max_strength_for_team_size(n, challenges)) # Output: [5, 4, 3, 3, 3, 2, 2, 1]"},{"question":"You are developing a new software for a library to automate the process of managing book inventories. Each book has a unique ID, a title, and an author. The library manager wants to have a feature that generates a unique code for each book by combining the title, author, and book ID in a specific format. This format will be used to quickly identify and retrieve books from the inventory. Your task is to implement a function that takes three arguments: the book ID (an integer), the title of the book (a string), and the author of the book (a string). The function should return a unique code in the following format: ``` \\"ID-TITLE_AUTHOR\\" ``` Where: - `ID` is the book\'s unique ID padded with leading zeros to ensure it is exactly 5 digits long. - `TITLE` is the title of the book converted to uppercase and spaces replaced by hyphens. - `AUTHOR` is the first three characters of the author\'s last name converted to uppercase. If the author\'s name has less than three characters, use the entire name. For example: ``` function generateBookCode(150, \\"Harry Potter\\", \\"J.K. Rowling\\") // Returns: \\"00150-HARRY-POTTER_ROW\\" ``` ``` function generateBookCode(1, \\"To Kill a Mockingbird\\", \\"Harper Lee\\") // Returns: \\"00001-TO-KILL-A-MOCKINGBIRD_LEE\\" ``` Write the function `generateBookCode` that generates a unique code for a book given its ID, title, and author\'s name.","solution":"def generateBookCode(book_id, title, author): Generates a unique code for a book according to the specified format. Parameters: book_id (int): The unique ID of the book. title (str): The title of the book. author (str): The author of the book. Returns: str: The unique code for the book. book_id_str = str(book_id).zfill(5) title_str = title.upper().replace(\\" \\", \\"-\\") author_last_name = author.split()[-1] author_code = author_last_name[:3].upper() return f\\"{book_id_str}-{title_str}_{author_code}\\""},{"question":"Alice and Bob are playing a new game involving a grid of size N times M filled with non-negative integers. The game is played turn-by-turn with Alice starting first. On each turn, a player can select any row or column and remove it entirely from the grid. The value of a row or column is the sum of all the integers it contains. The player earns points equal to the value of the row or column they remove. The game ends when there are no more rows or columns left in the grid. Determine the winner if both players play optimally. -----Input:----- - First line contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains two space-separated integers N and M, the dimensions of the grid. - Next N lines each contain M space-separated integers representing the grid values. -----Output:----- For each test case, output \\"Alice\\" (without quotes) if Alice wins, \\"Bob\\" (without quotes) if Bob wins, otherwise \\"Draw\\" (without quotes) in a separate line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 - 1 leq M leq 50 - 0 leq text{Grid value} leq 10^3 -----Sample Input:----- 1 3 3 3 8 2 4 1 7 6 5 9 -----Sample Output:----- Alice -----Explanation:----- If Alice and Bob both play optimally, they will choose the rows and columns with the highest sums first. - Alice can choose the third row (6 + 5 + 9 = 20) or the second column (8 + 1 + 5 = 14). - Suppose Alice chooses the third row: Alice\'s score = 20. - Remaining grid: 3 8 2 4 1 7 - Bob can now choose the first row (3 + 8 + 2 = 13) or the second row (4 + 1 + 7 = 12). - Suppose Bob chooses the first row: Bob\'s score = 13. - Remaining grid: 4 1 7 Continuing in this fashion and considering all optimal plays, Alice will end up with more points, thus Alice wins.","solution":"def find_winner(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] grid = test_cases[t][1] total_sum = sum(sum(row) for row in grid) max_Alice_score = (total_sum + min(N, M) - 1) // 2 if total_sum % 2 == 1 and min(N, M) % 2 != 0: results.append(\\"Alice\\") else: results.append(\\"Draw\\") return results"},{"question":"The Story: You are developing a new text editor for programmers. One of the features of this editor is the ability to detect pairs of matching brackets in code. Your goal is to implement this feature to help users quickly identify and match brackets in their code. Task: Write a function that checks whether the brackets in a given string of code are balanced. The brackets that need to be balanced are `()`, `{}`, and `[]`. ```python >>> is_balanced(\\"if (a == b) { return [1, 2, 3]; }\\") True >>> is_balanced(\\"for (i = 0; i < n; i++) { array[i] = i * 2;\\") False >>> is_balanced(\\"function test() { if (a > b) { return \'error\'; } }\\") True >>> is_balanced(\\"while (x != y [ { ] }\\") False ``` Explanation: - A string is considered balanced if all types of brackets in the string match correctly. - Ensure to handle nested brackets as shown in the examples.","solution":"def is_balanced(code): Checks if the brackets in the given code string are balanced. The function considers the brackets (), {}, and []. Parameters: code (str): A string containing the code to be checked. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in code: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write a function `flatten_dict` to flatten a nested dictionary. # Notes: - The keys of the nested dictionary should be joined by a period (`.`) in the flattened dictionary. - Handle any level of nesting. - Preserve the order of keys in the nested dictionaries. # Examples: ```python flatten_dict({\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}) # => {\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3} flatten_dict({\\"x\\": {\\"y\\": {\\"z\\": 7}}, \\"w\\": 8}) # => {\\"x.y.z\\": 7, \\"w\\": 8} ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary by joining the keys with a period (\'.\'). Args: - d (dict): The dictionary to flatten. - parent_key (str): The base key to prefix for nested keys (used in recursion). - sep (str): The separator to use between keys. Returns: - dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function that takes an integer `N` and returns a string that consists of the numbers from 1 to `N` separated by comma and a space. For example, the following code will result in a string containing the numbers \\"1, 2, 3, 4, 5\\": ``` formatNumbers(5) // => \\"1, 2, 3, 4, 5\\" ```","solution":"def formatNumbers(N): Returns a string of numbers from 1 to N separated by a comma and a space. return \', \'.join(str(i) for i in range(1, N + 1))"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest contiguous subsequence such that it is strictly increasing. -----Input----- The first line of input will contain a single integer n (1 ≤ n ≤ 10,000), the length of the sequence. The second line of input will contain n integers separated by a space, representing the sequence. -----Output----- Print a single integer, the length of the longest strictly increasing contiguous subsequence. -----Example----- Input 9 1 2 3 4 1 2 3 4 5 Output 5 -----Note----- In the given sequence, the longest strictly increasing contiguous subsequence is [1, 2, 3, 4, 5], which has a length of 5.","solution":"def longest_increasing_subsequence_length(n, sequence): Finds the length of the longest contiguous subsequence that is strictly increasing. Parameters: n (int): The length of the sequence. sequence (list): A list of integers representing the sequence. Returns: int: The length of the longest contiguous subsequence that is strictly increasing. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage: n = 9 sequence = [1, 2, 3, 4, 1, 2, 3, 4, 5] print(longest_increasing_subsequence_length(n, sequence)) # Output: 5"},{"question":"Jorah Mormont, though exiled from Westeros, has a deep desire to protect his queen, Daenerys Targaryen, from any threats. To do so, he has enlisted the help of several scouts to keep an eye on potential enemies and report back. Each scout traverses a different route represented by a string consisting of characters \'N\', \'E\', \'S\', and \'W\' which stand for North, East, South, and West respectively. Jorah needs to determine if each scout returns to their original starting point after following their respective routes. Your task is to find out if the routes taken by the scouts form a closed loop returning them to the start. -----Input:----- - First line will contain N, the number of scouts. - Each of the next N lines will contain a string representing the route taken by a scout. -----Output:----- For each scout, output in a single line Yes if the route forms a closed loop returning to start, or No otherwise. -----Constraints----- - 1 leq N leq 100 - 1 leq |route| leq 10^5 -----Sample Input:----- 2 NESW NNESWW -----Sample Output:----- Yes No -----Explanation:----- The first route \\"NESW\\" returns to the start because each direction is countered by an opposite one. The second route \\"NNESWW\\" does not form a closed loop as while the directions balance out north-south, it ends one step west of the origin. Hence, the answer is No .","solution":"def does_route_return_to_start(routes): Determines if the given routes form a closed loop returning to the start. Parameters: routes (list of str): A list of strings representing the routes taken by scouts. Returns: list of str: A list of \\"Yes\\" or \\"No\\" indicating if each route forms a closed loop. results = [] for route in routes: x, y = 0, 0 for move in route: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 if x == 0 and y == 0: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Create a function that takes a string as input and returns a new string in which all the vowels (a, e, i, o, u) in the original string are replaced with the character \'@\'. The function should be case insensitive and maintain the case of the original non-vowel characters. Example: The transformed version of \\"Programming is fun!\\" is \\"Pr@gr@mm@ng @s f@n!\\" Make sure your function only replaces vowels and does not affect any other characters including punctuation and spaces. The input string may include upper and lower case letters, numbers, spaces, and punctuation marks. You may use any programming language of your choice to implement this function.","solution":"def replace_vowels(input_string): Replaces all vowels in the input string with \'@\' and returns the modified string. The replacement is done in a case-insensitive manner. vowels = \\"aeiouAEIOU\\" return \'\'.join(\'@\' if char in vowels else char for char in input_string)"},{"question":"John\'s network setup involves multiple routers connected in series. Each router can either increment or decrement the packet\'s value by 1. The goal is to determine the minimum number of steps (router transitions) required to convert a packet\'s initial value to the target value. You are given the initial value, the target value, and the number of routers which can increment (represented as `I`) and decrement (represented as `D`) values. Routers can only increment or decrement values; no other operations are possible. Write a program that determines the minimum steps required to achieve the target value using given `I` and `D` routers. If it\'s not possible to reach the target value, return `-1`. ----Input:---- - First line will contain a single integer `T`, the number of test cases. - Each test case consists of four space-separated integers: - Initial value of the packet. - Target value of the packet. - Number of routers that can increment (`I`). - Number of routers that can decrement (`D`). ----Output:---- For each test case, output the minimum steps to achieve the target value on a new line, or `-1` if it\'s not possible. ----Constraints:---- - `1 ≤ T ≤ 10^4` - `-10^9 ≤ Initial value, Target value ≤ 10^9` - `0 ≤ I, D ≤ 10^9` ----Sample Input:---- 3 3 7 5 0 10 3 3 10 5 5 1 1 ----Sample Output:---- 4 7 0 ----Explanation:---- 1. From an initial value of 3 to a target value of 7: - Incrementing 4 times achieves the target (4 ≤ 5), hence the output is 4. 2. From an initial value of 10 to a target value of 3: - Decrementing 7 times achieves the target (7 ≤ 10), hence the output is 7. 3. From an initial value of 5 to a target value of 5: - No increment or decrement is needed, hence the output is 0.","solution":"def minimum_steps(initial_value, target_value, I, D): diff = target_value - initial_value if diff > 0: # Need to increment if diff <= I: return diff else: return -1 elif diff < 0: # Need to decrement if -diff <= D: return -diff else: return -1 else: # initial_value == target_value return 0 def process_test_cases(test_cases): results = [] for test_case in test_cases: initial_value, target_value, I, D = test_case results.append(minimum_steps(initial_value, target_value, I, D)) return results"},{"question":"The Challenge ------------- You need to develop a function that performs matrix multiplication. The function will take in two two-dimensional lists (matrices) and return their product if they can be multiplied. If the matrices cannot be multiplied due to dimension mismatch, the function should return `None` or an appropriate error message. Matrix multiplication rules: - Two matrices, A (of size m x n) and B (of size p x q), can be multiplied only if n == p. - The resulting matrix will have a size of m x q. - Each element of the resulting matrix is obtained by taking the dot product of the corresponding row from the first matrix and the column from the second matrix. You need to implement the function `matrix_multiply(matrix_a, matrix_b)` in Python, which will handle the matrix multiplication. **Example:** ```python matrix_a = [ [1, 2, 3], [4, 5, 6] ] matrix_b = [ [7, 8], [9, 10], [11, 12] ] matrix_multiply(matrix_a, matrix_b) ``` **Output:** ```python [ [58, 64], [139, 154] ] ``` **Constraints:** - The input matrices will always contain integers. - The dimensions of the matrices will be such that they can either be multiplied or cannot (no empty matrices). **Additional Notes:** - Do not use any external libraries or built-in functions for matrix multiplication. - Make sure to handle edge cases such as when the matrices have dimensions that do not conform to matrix multiplication rules.","solution":"def matrix_multiply(matrix_a, matrix_b): Multiplies two matrices if they can be multiplied. Parameters: matrix_a (list of lists): The first matrix. matrix_b (list of lists): The second matrix. Returns: list of lists: The resulting matrix after multiplication, or None if the matrices cannot be multiplied. # Getting the dimensions of the matrices rows_a = len(matrix_a) cols_a = len(matrix_a[0]) rows_b = len(matrix_b) cols_b = len(matrix_b[0]) # Matrices can be multiplied only if cols_a == rows_b if cols_a != rows_b: return None # Initializing the resulting matrix with zeroes result_matrix = [[0 for _ in range(cols_b)] for _ in range(rows_a)] # Performing the matrix multiplication for i in range(rows_a): for j in range(cols_b): for k in range(cols_a): result_matrix[i][j] += matrix_a[i][k] * matrix_b[k][j] return result_matrix"},{"question":"Alex and Jordan are game developers. They have a game where a player needs to navigate a grid. Each cell of the grid contains a certain number of points. The player can only move right or down from any cell. The objective is to find the maximum points the player can collect by the time they reach the bottom-right corner of the grid. Write a program to determine the maximum points that can be collected. -----Input:----- - The first line contains an integer T, denoting the number of test cases. - Each test case starts with two integers N and M, the number of rows and columns in the grid respectively. - The next N lines each contain M integers separated by spaces, representing the points in each cell of the grid. -----Output:----- For each test case on a new line, print the maximum points that can be collected for the corresponding test case. -----Constraints----- - 1<=T<=10 - 1<=N, M<=100 - 0<= text{points in cells} <=100 -----Sample Input:----- 2 3 3 1 2 3 4 5 6 7 8 9 2 2 5 3 2 1 -----Sample Output:----- 29 9 -----EXPLANATION:----- For the first test case, the path that collects the maximum points is right->right->down->down, resulting in 1 + 2 + 3 + 6 + 9 = 21 points. For the second test case, the path that collects the maximum points is right->down, resulting in 5 + 3 + 1 = 9 points.","solution":"def max_points(T, test_cases): results = [] for case in test_cases: N, M, grid = case dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Initialize first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[N-1][M-1]) return results # Helper function for handling input and output formats def solve(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].strip().split(\' \')) grid = [] for i in range(1, N + 1): grid.append(list(map(int, lines[index + i].strip().split(\' \')))) test_cases.append((N, M, grid)) index += (N + 1) results = max_points(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"**[Rearrange Palindrome]** Given a string, the task is to determine whether the letters of the string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. You need to output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". **Note:** Consider case insensitivity for this problem. -----Input----- The input consists of a single line of text, containing only alphabetic characters. -----Output----- For this input string, print one line containing either \\"YES\\" or \\"NO\\". -----Example----- Input: civic Output: YES Input: ivicc Output: YES Input: hello Output: NO","solution":"def can_form_palindrome(s): Determines whether the letters of the string can be rearranged to form a palindrome. Args: s (str): The input string containing only alphabetic characters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". # Remove case sensitivity by converting the string to lower case s = s.lower() # Count the frequency of each character in the string char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check how many characters have an odd frequency odd_counts = 0 for count in char_count.values(): if count % 2 != 0: odd_counts += 1 # For the string to be able to form a palindrome, there can be at most one character with an odd frequency return \\"YES\\" if odd_counts <= 1 else \\"NO\\""},{"question":"A research team is working on a genetic algorithm to simulate and predict genetic sequences. They need to determine certain properties about DNA sequences. Your task is to help them analyze a given DNA sequence by determining the longest subsequence of a specific pattern. A DNA sequence is a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. The specific pattern you need to find is the longest subsequence that alternates between \'A\' and \'C\', or \'C\' and \'A\', starting with \'A\'. For example, in the sequence \\"ACACGTT\\", the longest subsequence that follows this pattern is \\"ACAC\\". -----Input----- The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string representing the DNA sequence. -----Output----- Output T lines with one integer each. Each integer represents the length of the longest subsequence for the corresponding DNA sequence following the \\"ACAC..\\" pattern. -----Constraints----- - 1 <= T <= 100 - 1 <= |S| <= 10^5, where |S| is the length of the DNA sequence. -----Example----- Input: 2 ACGTACAC AAAACCCGGT Output: 4 2","solution":"def find_longest_ac_subsequence_length(sequence): Returns the length of the longest subsequence that alternates between \'A\' and \'C\' in the given DNA sequence. max_length = 0 current_length = 0 expecting_a = True for char in sequence: if expecting_a and char == \'A\': current_length += 1 expecting_a = False elif not expecting_a and char == \'C\': current_length += 1 expecting_a = True else: if max_length < current_length: max_length = current_length # Reset the current sequence count if disruption occurs if char == \'A\': current_length = 1 expecting_a = False else: current_length = 0 expecting_a = True if max_length < current_length: max_length = current_length return max_length def longest_ac_subsequence(T, sequences): Returns a list with the length of the longest subsequence for each DNA sequence. result = [] for seq in sequences: result.append(find_longest_ac_subsequence_length(seq)) return result"},{"question":"**Implement a function `linked_list_swap` that operates on a singly linked list. The function should take a singly linked list and two integer values, `val1` and `val2`, as arguments and swap the nodes that contain these values. If one or both values are not present in the list, the function should leave the list unchanged. The function should not modify the values of the nodes, only switch the nodes themselves.** **Example:** Given the linked list: `1 -> 2 -> 3 -> 4 -> 5` If the function is called as `linked_list_swap(head, 2, 4)`, the linked list should be modified to: `1 -> 4 -> 3 -> 2 -> 5` **Properties:** - The function must handle edge cases, such as when one or both values are not present in the list. - The function must not create new nodes or change the values inside the nodes, only their positions. - The function\'s time complexity should be as efficient as possible. **Function Signature:** ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def linked_list_swap(head: ListNode, val1: int, val2: int) -> ListNode: # Your code here ```","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def linked_list_swap(head: ListNode, val1: int, val2: int) -> ListNode: if val1 == val2: return head prev1 = prev2 = None curr1 = curr2 = head found1 = found2 = False while curr1 and curr1.value != val1: prev1 = curr1 curr1 = curr1.next while curr2 and curr2.value != val2: prev2 = curr2 curr2 = curr2.next if curr1 and curr1.value == val1: found1 = True if curr2 and curr2.value == val2: found2 = True if not found1 or not found2: return head if prev1: prev1.next = curr2 else: head = curr2 if prev2: prev2.next = curr1 else: head = curr1 curr1.next, curr2.next = curr2.next, curr1.next return head"},{"question":"Challenge: Design a function to validate if strings in a list are valid email addresses. An email address is considered valid if it meets the following conditions: 1. It contains exactly one \'@\' symbol. 2. The local part (portion before \'@\') must contain only alphanumeric characters and the following special characters: \'.\', \'_\', and \'-\'. However, it cannot start or end with \'.\' or contain consecutive dots. 3. The domain part (portion after \'@\') must contain only alphanumeric characters and at least one \'.\', and the \'.\' cannot be the first or last character. Given a list of strings, return a new list containing only the valid email addresses in the same order as they appear in the input list. Example: Given [\'test.email@example.com\', \'username@domain.com\', \'.invalid@domain.com\', \'username@domain,com\', \'invalid@domain..com\', \'email@domain.com.\'], your function should return [\'test.email@example.com\', \'username@domain.com\']. Addendum: You should not use any external libraries for validating the email addresses. Implement the validation logic yourself according to the rules provided.","solution":"import re def is_valid_email(email): Returns True if the email is valid according to the defined rules, False otherwise. try: local, domain = email.split(\'@\') except ValueError: return False # Validate local part if not re.match(r\'^[a-zA-Z0-9]+([._-]?[a-zA-Z0-9]+)*\', local): return False # Validate domain part if not re.match(r\'^[a-zA-Z0-9]+(.[a-zA-Z0-9]+)*.[a-zA-Z]{2,}\', domain): return False if \'..\' in domain: # Consecutive dots in domain are not allowed return False return True def filter_valid_emails(emails): Filters and returns a list of valid emails according to the defined rules. return [email for email in emails if is_valid_email(email)]"},{"question":"You have been hired by a software development company to help optimize their database\'s search functionality. The database stores logs of user activities, and each log entry consists of an integer representing the activity type. Your task is to find the first occurring activity (represented as an integer) that is repeated exactly K times within a session. If no such activity exists, return -1. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is described in two lines. The first line contains two integers N and K, where N is the number of activities in the session, and K is the exact number of times an activity should be repeated. The second line contains N integers, which represent the activities in the session. -----Output Format:----- For each test case, output one integer in a new line - the first activity repeated exactly K times in the session or -1 if no such activity exists. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ 10 - 1 ≤ Activity value ≤ 105 -----Example----- Input: 2 6 2 1 2 3 1 2 3 5 3 10 20 10 10 20 Output: 1 10 -----Explanation:----- In the first test case, the activity \'1\' is the first to be repeated exactly 2 times. In the second test case, the activity \'10\' is the first to be repeated exactly 3 times.","solution":"def find_first_activity_repeated_k_times(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] activities = test_cases[i][1] activity_count = {} for activity in activities: if activity in activity_count: activity_count[activity] += 1 else: activity_count[activity] = 1 if activity_count[activity] == K: results.append(activity) break else: results.append(-1) return results"},{"question":"=====Function Descriptions===== Binary Search Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you\'ve narrowed down the possible locations to just one. Binary search operates with complexity O(log n). Example: ``` def binary_search(arr, x): low = 0 high = len(arr) - 1 mid = 0 while low <= high: mid = (high + low) // 2 if arr[mid] < x: low = mid + 1 elif arr[mid] > x: high = mid - 1 else: return mid return -1 arr = sorted([2, 3, 4, 10, 40]) x = 10 # Function call result = binary_search(arr, x) print(\\"Element is present at index\\", str(result)) ``` Output ``` Element is present at index 3 ``` =====Problem Statement===== You are given an array of integers in sorted order and an integer target value. Your task is to implement a function that performs binary search to find the position of the target value in the array. If the target value is present, return its index. Otherwise, return -1. =====Input Format===== The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the array elements. - The third line contains an integer X, the target value. =====Constraints===== 1 <= T <= 100 1 <= N <= 1000 -10^5 <= array elements <= 10^5 -10^5 <= X <= 10^5 =====Output Format===== For each test case, print a single line containing the index of the target value X in the array. If the target value is not present, print -1. =====Sample Input===== 2 5 2 3 4 10 40 10 5 1 2 3 4 5 7 =====Sample Output===== 3 -1","solution":"def binary_search(arr, x): Perform binary search on a sorted array to find the position of the target value. Parameters: arr (list): Sorted list of integers where we will search for the target value. x (int): The target value to search for. Returns: int: Index of the target value if found, otherwise -1. low = 0 high = len(arr) - 1 while low <= high: mid = (high + low) // 2 # Check if x is present at mid if arr[mid] < x: low = mid + 1 elif arr[mid] > x: high = mid - 1 else: return mid return -1 def process_test_cases(test_cases): results = [] for arr, x in test_cases: result = binary_search(arr, x) results.append(result) return results"},{"question":"In an attempt to manage and organize book readings efficiently, a famous library decided to implement a new system to handle their books and readers. They have different books, each having a distinct reading time. Readers can borrow any number of books. To make the most of their reading experience, they want to find the maximum number of books a reader can borrow such that the total reading time does not exceed a given limit. Given an array of integers where each element represents the reading time of a book and an integer representing the maximum allowed reading time, find the maximum number of books that a reader can borrow without exceeding the limit. # Input - The first line contains two integers N (1 le N le 10^5) and T (1 le T le 10^9), where N is the number of books and T is the maximum allowed reading time. - The second line contains N integers t_i (1 le t_i le 10^9), where t_i is the reading time of the i-th book. # Output - Output a single integer representing the maximum number of books a reader can borrow without exceeding the total time limit T. # Examples Example 1 **Input:** ``` 5 10 2 3 8 5 1 ``` **Output:** ``` 3 ``` **Explanation:** The reader can borrow books with reading times [2, 3, 1] which sums to 6 and doesn’t exceed the limit 10. Hence, the maximum number of books is 3. Example 2 **Input:** ``` 4 7 5 1 2 3 ``` **Output:** ``` 3 ``` **Explanation:** The reader can borrow books with reading times [1, 2, 3] which sums to 6 and doesn’t exceed the limit 7. Thus, the maximum number of books is 3.","solution":"def max_books(N, T, times): Returns the maximum number of books a reader can borrow without exceeding the total reading time limit T. Parameters: N (int): The number of books. T (int): The maximum allowed reading time. times (list): A list of integers where each element represents the reading time of a book. Returns: int: The maximum number of books. times.sort() current_time = 0 count = 0 for time in times: if current_time + time <= T: current_time += time count += 1 else: break return count"},{"question":"**Array Manipulation Challenge** Your task is to write a function called `sum_of_odd_elements` that accepts a list of integers and returns the sum of all odd elements in the list. However, there is a twist. If the sum of the odd elements exceeds 50, the function should return the string \\"Limit Exceeded\\". If there are no odd numbers in the list, the function should return 0. Examples: ```python sum_of_odd_elements([1, 2, 3, 4, 5]) # 9 sum_of_odd_elements([10, 20, 30]) # 0 sum_of_odd_elements([9, 3, 15, 7, 1, 23, 5]) # \\"Limit Exceeded\\" sum_of_odd_elements([11, 13, 17]) # 41 ``` Notes: - Consider a number odd if it is not divisible by 2. - Remember to handle both positive and negative integers.","solution":"def sum_of_odd_elements(lst): Returns the sum of all odd elements in the list. If the sum exceeds 50, returns \\"Limit Exceeded\\". If there are no odd numbers, returns 0. odd_sum = sum(x for x in lst if x % 2 != 0) if odd_sum > 50: return \\"Limit Exceeded\\" return odd_sum"},{"question":"An array is defined as a \\"balanced array\\" if the sum of the elements on the left half is equal to the sum of the elements on the right half. The array is divided into two halves at its midpoint. If the array has an odd length, the middle element is not considered in either half. Write a function named `isBalanced`/`is_balanced`/`IsBalanced` that accepts an integer array and returns `true` if it is a balanced array, else `false`.","solution":"def is_balanced(arr): Check if the array is balanced. n = len(arr) if n == 0: return True mid = n // 2 left_sum = sum(arr[:mid]) right_sum = sum(arr[mid + (n % 2):]) return left_sum == right_sum"},{"question":"You are given a string \\"S\\". You need to form words from the characters of the given string using those characters only once. The words formed should be dictionary words (i.e., valid English words). Determine the word with the maximum length that can be formed from the given string. If there are multiple words with the same maximum length, return the lexicographically smallest one. -----Input----- The input contains a single line with a string \\"S\\" (1 ≤ |S| ≤ 100), consisting of lowercase English letters only. -----Output----- Print a single word which is the longest valid dictionary word that can be formed using the characters in the string \\"S\\". If no valid words can be formed, print \\"No valid words\\". -----Constraints----- The dictionary of valid English words will be provided or assumed to exist and should be considered a predefined list. The validity of a word should be checked against this dictionary. -----Sample Input----- \\"example\\" -----Sample Output----- \\"exempla\\" -----Additional Notes----- 1. You can assume the existence of a dictionary or a way to verify if a word is valid. 2. The case sensitivity of words is not an issue; all input letters will be lowercase. 3. Focus on forming the longest word first, and if there are ties, select the smallest lexicographically. Given the word \\"example\\": \\"exempla\\" is a valid word and the longest one that can be formed by the letters. If looking at lexicographically smaller ones with the same length, and finding none, \\"exempla\\" is the output.","solution":"def longest_valid_word(s, dictionary): Finds the longest valid dictionary word that can be formed using the given string `s`. If multiple words have the same maximum length, the lexicographically smallest one is chosen. from itertools import permutations max_word = \\"No valid words\\" for length in range(len(s), 0, -1): perms = set(permutations(s, length)) for perm in perms: word = \'\'.join(perm) if word in dictionary: if max_word == \\"No valid words\\" or len(word) > len(max_word) or (len(word) == len(max_word) and word < max_word): max_word = word if max_word != \\"No valid words\\": break return max_word"},{"question":"A large online retail company organizes a promotional event where prices of products fluctuate continuously for a certain duration. The company showcases its popularity by displaying the highest price increase and the highest price decrease experienced by any product during the promotional event. Given a list of price changes for N products over M time intervals, calculate the maximum increase and the maximum decrease in price for any product. For example, if there are 4 products and 3 time intervals, and the price changes are as follows: Product 1: [5, -3, 4] Product 2: [-2, 6, -3] Product 3: [3, 3, -2] Product 4: [0, -4, 7] The price increases and decreases for each product are: Product 1: Increase = max(5, 5-3, 5-3+4) = 6, Decrease = min(5, 5-3, 5-3+4) = 0 Product 2: Increase = max(-2, -2+6, -2+6-3) = 4, Decrease = min(-2, -2+6, -2+6-3) = -2 Product 3: Increase = max(3, 3+3, 3+3-2) = 6, Decrease = min(3, 3+3, 3+3-2) = 1 Product 4: Increase = max(0, 0-4, 0-4+7) = 7, Decrease = min(0, 0-4, 0-4+7) = -4 Therefore, the highest price increase experienced by any product is 7, and the highest price decrease experienced by any product is -4. -----Input format----- Line 1: Two integers N and M, the number of products and the number of time intervals respectively. Next N lines: Each line contains M space-separated integers, representing the price changes of a product over M time intervals. -----Output format----- Two integers: the highest price increase and the highest price decrease experienced by any product. -----Sample input----- 4 3 5 -3 4 -2 6 -3 3 3 -2 0 -4 7 -----Sample output----- 7 -4 -----Test data----- In all subtasks, the price changes for any time interval are between -1,000 and 1,000 inclusive. - Subtask 1 (30 marks) : 1 ≤ N, M ≤ 1,000 - Subtask 2 (70 marks) : 1 ≤ N, M ≤ 100,000 -----Note----- The answer might not fit in a variable of type int. We recommend that type long long be used for computing the price fluctuations. If you use printf and scanf, you can use %lld for long long.","solution":"def max_price_fluctuations(n, m, price_changes): Calculates the highest price increase and highest price decrease experienced by any product during the promotional event. Parameters: n (int): Number of products. m (int): Number of time intervals. price_changes (list of list of int): A list where each sublist represents the price changes of a product over m time intervals. Returns: tuple: A tuple of two integers: the highest price increase and the highest price decrease. max_increase = float(\'-inf\') max_decrease = float(\'inf\') for changes in price_changes: current_increase = 0 current_sum = 0 current_min = 0 for change in changes: current_sum += change if current_sum - current_min > current_increase: current_increase = current_sum - current_min if current_sum < current_min: current_min = current_sum max_increase = max(max_increase, current_increase) max_decrease = min(max_decrease, current_min) return max_increase, max_decrease # Example usage: # n = 4 # m = 3 # price_changes = [ # [5, -3, 4], # [-2, 6, -3], # [3, 3, -2], # [0, -4, 7] # ] # print(max_price_fluctuations(n, m, price_changes)) # Output: (7, -4)"},{"question":"Sarah is a librarian, and she is organizing a list of books on her shelf. Each book is represented by an integer b[i] corresponding to its size. To make her job easier, she wants to find the longest subsequence of books such that the sizes of the books in the subsequence are strictly increasing. However, a bizarre rule in her library allows her to consider not only direct neighbors of books but also skipping some books. For this task, Sarah needs your help to determine the length of the longest strictly increasing subsequence of books. -----Input:----- - The first line will contain T, the number of test cases. - Each test case consists of two lines of input. - Input N, the number of books. - Input N integers representing the sizes of the books. -----Output:----- For each test case, output in a single line the length of the longest strictly increasing subsequence of book sizes. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq b[i] leq 2*10^5 -----Sample Input:----- 3 6 10 22 9 33 21 50 5 3 10 2 1 20 8 2 2 2 2 2 2 2 2 -----Sample Output:----- 4 3 1 -----EXPLANATION:----- In the first case, the longest strictly increasing subsequence is [10, 22, 33, 50] of length 4. In the second case, the longest strictly increasing subsequence is [3, 10, 20] of length 3. In the third case, all elements are the same, so the longest strictly increasing subsequence is any single element of length 1.","solution":"def length_of_lis(arr): Returns the length of longest increasing subsequence in the given array. if not arr: return 0 # Create an array to store our subsequence lis = [] for num in arr: # Use binary search to find the insertion point of the num in lis left, right = 0, len(lis) while left < right: mid = (left + right) // 2 if lis[mid] < num: left = mid + 1 else: right = mid if left == len(lis): lis.append(num) else: lis[left] = num return len(lis) def process_library_cases(cases): Processes multiple test cases and returns a list with the length of longest increasing subsequence for each case. results = [] for case in cases: N, books = case results.append(length_of_lis(books)) return results"},{"question":"Write a code that simulates a simplified stock transaction system. The code should process a list of stock prices, determine the maximum possible profit from one buy-and-sell transaction, and output the days to buy and sell for achieving this maximum profit. The code receives an array where each element represents the stock prices of a company over successive days. The objective is to find the pair of days (buy day and sell day) such that buying on the first day and selling later would yield the maximum profit. If no profit can be made, the function should return a tuple with both values set to -1. Rules: - You can only buy once and sell once. - You cannot sell a stock before you buy it. Examples: - Input: [8, 1, 2, 4, 6, 3] Output: (1, 4) - Input: [7, 6, 5, 4, 3, 2, 1] Output: (-1, -1) Note: The indices in the array represent the days, so an output of (1, 4) suggests buying on day 1 and selling on day 4.","solution":"def max_profit_stock_transaction(prices): Returns the days to buy and sell to achieve the maximum profit. Args: prices (List[int]): List of stock prices. Returns: Tuple[int, int]: A tuple containing the day to buy and the day to sell. if not prices or len(prices) < 2: return (-1, -1) min_price_day = 0 max_profit = 0 buy_day = -1 sell_day = -1 for current_day in range(1, len(prices)): if prices[current_day] < prices[min_price_day]: min_price_day = current_day current_profit = prices[current_day] - prices[min_price_day] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_day sell_day = current_day if max_profit <= 0: return (-1, -1) return (buy_day, sell_day)"},{"question":"Create a function that calculates the sum of values in a nested dictionary structure, ensuring to handle dictionaries nested within each other to any depth while considering only the values which are integers or floats. If the input is not a dictionary, the function should return 0. # Input - The function will receive a single argument which can be a dict or any other data type. # Output - The function will return a single integer or float which is the sum of all numeric values found in the nested dictionary. # Example ```python data = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': \'not a number\' }, \'g\': 4.5 }, \'h\': \'ignore this\', \'i\': { \'j\': { \'k\': 5 } } } result = sum_nested_dict_values(data) print(result) # Output should be 15.5 (1+2+3+4.5+5) ``` # Constraints - The dictionary keys will always be strings. - The values can be any type (int, float, string, dict, list, etc). # Additional Information - You can assume the dictionary won\'t contain circular references to itself. - If a value is a list of dictionaries, the function should not sum the values within these nested dictionaries. # Technical Details - The function should be designed to run in a reasonable time for inputs up to a depth of 100 nested dictionaries.","solution":"def sum_nested_dict_values(data): Recursively calculates the sum of all numeric values in a nested dictionary. If the input is not a dictionary, the function returns 0. if not isinstance(data, dict): return 0 total = 0 for key, value in data.items(): if isinstance(value, (int, float)): total += value elif isinstance(value, dict): total += sum_nested_dict_values(value) return total"},{"question":"You are given a 2D grid of size n times m. Each cell in the grid has a value, which is either 0 or 1. Your task is to find the size of the largest square containing only 1s. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains two space-separated integers n and m. - The next n lines each contain m space-separated integers denoting the grid values. -----Output----- For each test case, output an integer corresponding to the size of the largest square containing only 1s. -----Constraints----- - 1 le T le 100 - 1 le n, m le 300 - Each value in the grid is either 0 or 1. -----Example Input----- 2 3 3 1 1 1 1 1 1 1 1 1 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 -----Example Output----- 3 2 -----Explanation:----- Testcase 1: The entire grid is composed of 1s, so the largest square containing only 1s has size 3. Testcase 2: The largest square containing only 1s is of the following shape: 1 1 1 1","solution":"def largest_square_of_ones(grids): def find_largest_square(grid, n, m): max_side = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side results = [] for grid in grids: n, m = grid[0] matrix = grid[1] results.append(find_largest_square(matrix, n, m)) return results # Reading the inputs and creating a list of grids to process def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) grids = [] index = 1 for _ in range(T): n, m = map(int, input_lines[index].strip().split()) grid = [] for i in range(n): grid.append(list(map(int, input_lines[index + 1 + i].strip().split()))) grids.append(((n, m), grid)) index += n + 1 return grids def solve(input_data): grids = process_input(input_data) results = largest_square_of_ones(grids) return \\"n\\".join(map(str, results))"},{"question":"Write a function that takes an integer as input and returns the sum of all the digits of the squared value of that number. For example, if the input is 12, the squared value is 144, and the sum of the digits is 1 + 4 + 4 = 9.","solution":"def sum_of_squared_digits(n): Returns the sum of all the digits of the squared value of the input integer. squared_value = n ** 2 return sum(int(digit) for digit in str(squared_value))"},{"question":"In a kingdom far, far away, there are two types of citizens: Merchants and Farmers. The kingdom hosts an annual event where citizens form a queue to present their requests to the king. Each citizen in the queue can perform one of the two actions: 1. Increase wealth: A citizen can make a request that increases the wealth of all citizens of the same type by a fixed amount. 2. Decrease wealth: A citizen can make a request that decreases the wealth of all citizens of the opposite type by a fixed amount. Given a string representing each citizen\'s type in the queue, where \'M\' represents a Merchant and \'F\' represents a Farmer, you need to determine which type of citizen will accumulate more wealth by the end of the event. The initial wealth of each citizen is the same, and all citizens perform their actions optimally. Input: A string of characters (\'M\' and \'F\') denoting the sequence of citizens in the queue. Output: Return the type of citizens (\'Merchant\' or \'Farmer\') that will have higher collective wealth by the end of the event, or \'Tie\' if both types have the same wealth. Example 1: Input: \\"MF\\" Output: \\"Tie\\" Explanation: Both citizens increase the wealth of their own type once and decrease the wealth of the opposite type once, resulting in no net change. Example 2: Input: \\"MMF\\" Output: \\"Merchant\\" Explanation: The first two Merchants can use their increasing actions, outnumbering the single Farmer\'s actions. Example 3: Input: \\"FMM\\" Output: \\"Tie\\" Explanation: Each Farmer and Merchant performs their actions optimally, resulting in balanced changes in wealth. Note: 1. The length of the given string will be in the range [1, 10,000].","solution":"def determine_wealth_outcome(citizens_queue): Determines which type of citizen has higher collective wealth by the end of the event. Parameters: citizens_queue (str): A string representing the sequence of citizens in the queue (\'M\' for Merchant, \'F\' for Farmer) Returns: str: \'Merchant\', \'Farmer\' or \'Tie\' based on which type has higher collective wealth. merchants = citizens_queue.count(\'M\') farmers = citizens_queue.count(\'F\') if merchants > farmers: return \\"Merchant\\" elif farmers > merchants: return \\"Farmer\\" else: return \\"Tie\\""},{"question":"You are given a string representing a sequence of moves on a 2D grid. The moves are represented by characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Starting from the origin (0, 0), you need to determine if the series of moves will bring you back to the origin or not. Return true if you return to the origin after completing all the moves; otherwise, return false. Example 1: Input: moves = \\"UD\\" Output: true Explanation: The move \\"U\\" takes you from (0, 0) to (0, 1), and the move \\"D\\" takes you back to (0, 0). Example 2: Input: moves = \\"LL\\" Output: false Explanation: The move \\"L\\" takes you from (0, 0) to (-1, 0), and the move \\"L\\" again takes you to (-2, 0). Example 3: Input: moves = \\"RRDD\\" Output: false Explanation: The move \\"R\\" takes you from (0, 0) to (1, 0), the move \\"R\\" again takes you to (2, 0), the move \\"D\\" takes you to (2, -1), and the move \\"D\\" again takes you to (2, -2). Example 4: Input: moves = \\"UDLR\\" Output: true Explanation: The move \\"U\\" takes you from (0, 0) to (0, 1), the move \\"D\\" takes you back to (0, 0), the move \\"L\\" takes you to (-1, 0), and the move \\"R\\" takes you back to (0, 0). Constraints: - 1 <= moves.length <= 104 - moves only contains characters \'U\', \'D\', \'L\' and \'R\'.","solution":"def judge_circle(moves): Determine if a series of moves on a 2D grid returns to the origin. :param moves: string, representing the sequence of moves (\'U\', \'D\', \'L\', \'R\') :return: True if returns to origin, False otherwise x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"You are given an array of integers representing building heights. The rainwater trapped between buildings after raining can be calculated as the units of water stored between them. Write a function to calculate the total amount of rainwater trapped. -----Input----- - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N representing the number of buildings. - The second line contains N space-separated integers representing the height of each building. -----Output----- For each test case, print a single line containing one integer ― the total units of rainwater trapped. -----Constraints----- - 1 le T le 100 - 1 le N le 10^4 - 0 le height of building le 10^5 -----Example Input----- 2 6 0 1 0 2 1 0 1 3 2 1 2 1 5 4 2 0 3 2 5 -----Example Output----- 6 9 -----Explanation----- Example case 1: The buildings in positions 1 and 3 create a pit with height 1 and length 1, storing 1 unit of water. Similarly, buildings in positions 3 and 6 create additional pits that can store water, summing up to a total of 6 units. Example case 2: The buildings in positions 2 and 5 create a pit with varying heights, storing a total of 9 units of water.","solution":"def trap_rainwater(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N, heights = test_case results.append(trap_rainwater(heights)) return results"},{"question":"You are given a list of stock prices in chronological order representing the price of a single stock on different days. Your task is to write a function that finds the maximum profit that can be achieved by buying and selling the stock at most twice. The function should accept a list of integers as an input representing the stock prices and return an integer indicating the maximum profit. Note that you must sell the stock before you buy it again. Examples: - For the input `[3,3,5,0,0,3,1,4]`, the function should return `6`, as you can buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3, and then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3, thus creating a total profit of 6. - For the input `[1,2,3,4,5]`, the function should return `4`, as you can buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. - For the input `[7,6,4,3,1]`, the function should return `0`, as no transactions can be done to make a profit. Function signature: ```python def max_profit(prices: List[int]) -> int: ```","solution":"def max_profit(prices): Calculates the maximum profit with at most two transactions. Args: prices: List[int] - List of stock prices. Returns: int - Maximum profit. if not prices: return 0 n = len(prices) buy1, buy2 = float(\'inf\'), float(\'inf\') profit1, profit2 = 0, 0 for price in prices: buy1 = min(buy1, price) profit1 = max(profit1, price - buy1) buy2 = min(buy2, price - profit1) profit2 = max(profit2, price - buy2) return profit2"},{"question":"A teacher wants to evaluate the logical thinking of students by having them solve a sequence problem. For a given integer N, students need to generate a sequence of numbers where each number is the sum of the previous two numbers in the sequence, starting from 1. Help the teacher by coding a program that can generate this sequence for multiple test cases. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N, representing the number of terms in the sequence. -----Output:----- For each test case, output the sequence of N numbers, separated by spaces. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 1 2 5 -----Sample Output:----- 1 1 1 1 1 2 3 5 -----EXPLANATION:----- For the test case with N = 1, the sequence is just [1]. For the test case with N = 2, the sequence is [1, 1]. For the test case with N = 5, the sequence starts with [1, 1], then each subsequent number is the sum of the previous two: [1, 1, 2, 3, 5].","solution":"def generate_sequence(n): Generates a sequence of numbers where each number is the sum of the previous two numbers, starting from 1, with the first two numbers being 1 and 1. sequence = [] a, b = 1, 1 for i in range(n): sequence.append(a) a, b = b, a + b return sequence def sequence_for_test_cases(test_cases): Generate sequences for multiple test cases. Args: test_cases (list): A list of integers where each integer represents the number of terms in the sequence. Returns: list: A list of lists, where each list is the sequence for the corresponding test case. results = [] for n in test_cases: sequence = generate_sequence(n) results.append(sequence) return results"},{"question":"You are given a list of strings where each string represents an item in a grocery list. Each string consists of the item name, followed by a colon, followed by the quantity needed. Write a function `generate_shopping_list(input_list)` that takes in the list of strings and returns a dictionary that combines the quantities for duplicated items into a total quantity for each item. For example, if the input list is: ``` [\\"apple:2\\", \\"banana:3\\", \\"apple:4\\", \\"orange:1\\", \\"banana:2\\"] ``` The function should return: ``` {\'apple\': 6, \'banana\': 5, \'orange\': 1} ``` The input list will always contain items in the format `item:quantity`, and the quantity will always be a positive integer. Write your code to address this requirement and ensure to handle any edge cases appropriately.","solution":"def generate_shopping_list(input_list): Returns a dictionary with item names as keys and total quantities as values. shopping_dict = {} for item in input_list: item_name, quantity = item.split(\':\') quantity = int(quantity) if item_name in shopping_dict: shopping_dict[item_name] += quantity else: shopping_dict[item_name] = quantity return shopping_dict"},{"question":"Implement a function called `evaluate_expression` that takes a string containing a mathematical expression and returns the result of evaluating that expression. The expression may contain integers, addition (+), subtraction (-), multiplication (*), and division (/) operators. The expression will not contain any spaces and will always be a valid mathematical expression. The division operator (/) indicates integer division and should truncate towards zero. Your task is to parse the string and compute the final result following the standard order of operations (i.e., \\"PEMDAS/BODMAS\\" rules: Parentheses, Exponents, Multiplication and Division (from left to right), Addition and Subtraction (from left to right)). # Examples: ```python evaluate_expression(\\"3+5/2\\") # returns 5 evaluate_expression(\\"10+2*6\\") # returns 22 evaluate_expression(\\"100*2+12\\") # returns 212 evaluate_expression(\\"100*(2+12)/14\\") # returns 100 evaluate_expression(\\"4*2/2+3-1\\") # returns 6 evaluate_expression(\\"2-3+5*2\\") # returns 9 ``` # Note: - Do not use `eval` or any other built-in functions to directly compute the result. - You can assume that the input expression is always a valid mathematical expression with integer results.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string with operators +, -, *, /. Division (/) performs integer division and truncates towards zero. import re # Parsing the expression into tokens of numbers and operators tokens = re.findall(r\'d+|[+*/()-]\', expression) def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # integer division def precedence(operator): if operator in (\'+\', \'-\'): return 1 elif operator in (\'*\', \'/\'): return 2 return 0 values = [] operators = [] for token in tokens: if re.match(r\'d+\', token): values.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # pop \'(\' else: # operator is +, -, *, / while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"A programming competition has multiple rounds, and each round has its own set of problems with varying difficulty levels. Each problem has an associated score that a participant earns upon solving. Given an array `scores` where each element represents the score of a problem, write a function `max_relative_score_difference(scores)` that returns the maximum relative score difference one can obtain by selecting one problem\'s score and dividing it by another problem\'s score. The relative score difference is calculated as `score[i] / score[j]` where `i` and `j` are indices in the `scores` array and `i != j`. Constraints: - The length of the scores array will always be at least 2. - All scores are positive integers. For example: - If the input `scores` is `[2, 3, 6, 8]`, the function should return `4` which is calculated from `8 / 2`. - If the input `scores` is `[1, 5]`, the function should return `5` which is calculated from `5 / 1`.","solution":"def max_relative_score_difference(scores): Returns the maximum relative score difference one can obtain by dividing the highest score by the lowest score in the array \'scores\'. max_score = max(scores) min_score = min(scores) return max_score / min_score"},{"question":"Write a function that takes an array of integers and returns a new array with each element incremented by 1. The function will take in an array and will return a new array where each number is one greater than its initial value. # Examples ```python increment_array([1, 2, 3]) -> [2, 3, 4] increment_array([7, 0, -5]) -> [8, 1, -4] increment_array([0]) -> [1] ```","solution":"def increment_array(arr): Returns a new array with each element in the input array incremented by 1. Parameters: arr (list of int): List of integers to be incremented. Returns: list of int: New list of incremented integers. return [x + 1 for x in arr]"},{"question":"Write a program that takes an array of integers and an integer `K` and performs a circular left shift of the array `K` times. A circular left shift means that each element of the array is moved one position to the left, and the first element of the array is moved to the last position. Help a student complete the function to achieve this task efficiently. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - The first line contains `N` (size of the array) and `K` (number of shifts). - The second line contains `N` space-separated integers representing the elements of the array. -----Output:----- For each test case, output the array after `K` circular left shifts on a single line. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 0 leq K leq 10^5 - 1 leq arr[i] leq 10^9 -----Sample Input:----- 2 5 2 1 2 3 4 5 4 4 10 20 30 40 -----Sample Output:----- 3 4 5 1 2 10 20 30 40 (Note: For the second test case, after 4 circular left shifts, the array remains the same.)","solution":"def circular_left_shift(arr, k): Performs circular left shift of the array `k` times. n = len(arr) k = k % n # Normalize k in case it\'s greater than n return arr[k:] + arr[:k] def process_test_cases(test_cases): Process multiple test cases for circular left shift operations. results = [] for case in test_cases: n, k, array = case[\'n\'], case[\'k\'], case[\'array\'] shifted_array = circular_left_shift(array, k) results.append(\\" \\".join(map(str, shifted_array))) return results"},{"question":"You are given an array of integers and a target sum. You need to determine if there are two distinct elements in the array that sum up to the target value. Write a function `two_sum_exists` that takes in an array of integers `arr` and an integer `target`, and returns `true` if there are two distinct elements in the array whose sum equals `target`, and `false` otherwise. Function signature: `def two_sum_exists(arr: List[int], target: int) -> bool:` **Example 1:** ```python Input: arr = [2, 7, 11, 15], target = 9 Output: True Explanation: The elements 2 and 7 sum up to 9. ``` **Example 2:** ```python Input: arr = [1, 2, 3, 4], target = 8 Output: False Explanation: No two distinct elements sum up to 8. ``` **Example 3:** ```python Input: arr = [1, -2, 3, 6, 8], target = 4 Output: True Explanation: The elements 6 and -2 sum up to 4. ``` **Constraints:** - The array length will be at most 10^4. - Each element of the array is an integer in the range [-10^5, 10^5]. - The array can contain both positive and negative integers, and may have duplicate elements.","solution":"from typing import List def two_sum_exists(arr: List[int], target: int) -> bool: seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"You are given a list of cities and their connected roads. Each road connects two cities and has an associated travel time in minutes. Your task is to determine the minimum time required to travel from a given start city to a target city. If there is no valid path, return -1. You will be provided: * A list of tuples, where each tuple contains two integers representing connected cities and an integer indicating the travel time between them. * Two integers, start and target, representing the starting city and the target city respectively. You need to implement the following function: ```python def min_travel_time(roads, start, target): pass ``` * *roads*: List[Tuple[int, int, int]] - List of tuples representing roads where each tuple is of the form (city1, city2, travel_time). * *start*: int - the starting city. * *target*: int - the target city. Your function should return the minimum travel time as an integer or -1 if no path exists. Example: ```python roads = [ (1, 2, 5), (2, 3, 10), (1, 3, 15), (1, 4, 5), (4, 3, 5) ] print(min_travel_time(roads, 1, 3)) # Output should be 10, since the path 1 -> 4 -> 3 has a total travel time of 10 print(min_travel_time(roads, 1, 5)) # Output should be -1, since there is no path from city 1 to city 5 ``` *Note: You can assume that cities are represented as positive integers starting from 1 and that the roads form an undirected graph.*","solution":"import heapq from collections import defaultdict def min_travel_time(roads, start, target): Returns the minimum travel time from start city to target city. If no path exists, returns -1. if start == target: return 0 # Construct the graph graph = defaultdict(list) for city1, city2, travel_time in roads: graph[city1].append((travel_time, city2)) graph[city2].append((travel_time, city1)) # Priority queue to get the minimum travel time pq = [(0, start)] visited = set() while pq: current_time, current_city = heapq.heappop(pq) if current_city in visited: continue visited.add(current_city) if current_city == target: return current_time for time, neighbor in graph[current_city]: if neighbor not in visited: heapq.heappush(pq, (current_time + time, neighbor)) return -1"},{"question":"Grocery List Tracker You are asked to build a simple program to help users keep track of their grocery shopping. The program will allow users to add, remove, and display items in their grocery list. Each item in the list has a name and quantity. The program should handle the following functionalities: # 1. Add Item Write a function `add_item(grocery_list, item_name, quantity)` that takes in the current grocery list, the item name as a string, and the quantity as an integer. If the item already exists in the list, the function should update the item\'s quantity by adding the new quantity to the existing one. If the item does not exist, it should add a new entry to the list. # 2. Remove Item Write a function `remove_item(grocery_list, item_name)` that takes in the current grocery list and the item name as a string. The function should remove the item from the list if it exists. If the item does not exist, it should return a message indicating that the item is not found. # 3. Display List Write a function `display_list(grocery_list)` that takes in the current grocery list and prints out all items and their quantities. The list should be displayed in the following format: ``` Item: Bread, Quantity: 2 Item: Milk, Quantity: 1 ``` # Example Usage ```python grocery_list = {} add_item(grocery_list, \\"Bread\\", 2) add_item(grocery_list, \\"Milk\\", 1) add_item(grocery_list, \\"Bread\\", 1) remove_item(grocery_list, \\"Eggs\\") remove_item(grocery_list, \\"Milk\\") display_list(grocery_list) ``` # Expected Output ``` Item \'Eggs\' not found in the list. Item: Bread, Quantity: 3 ``` Ensure your code handles cases where an item is attempted to be removed that does not exist, and updates the quantity correctly when items are added again.","solution":"def add_item(grocery_list, item_name, quantity): Adds an item to the grocery list or updates its quantity if it already exists. :param grocery_list: dict, the current grocery list :param item_name: str, the name of the item :param quantity: int, the quantity of the item to add if item_name in grocery_list: grocery_list[item_name] += quantity else: grocery_list[item_name] = quantity def remove_item(grocery_list, item_name): Removes an item from the grocery list if it exists. :param grocery_list: dict, the current grocery list :param item_name: str, the name of the item to remove :return: str, a message indicating the result of the operation if item_name in grocery_list: del grocery_list[item_name] return f\\"Item \'{item_name}\' removed from the list.\\" else: return f\\"Item \'{item_name}\' not found in the list.\\" def display_list(grocery_list): Displays the items in the grocery list along with their quantities. :param grocery_list: dict, the current grocery list for item_name, quantity in grocery_list.items(): print(f\\"Item: {item_name}, Quantity: {quantity}\\")"},{"question":"Given a matrix of integers, where each element represents the height of a terrain at that point, find the number of \\"pits\\" in the matrix. A pit is defined as a group of connected cells with the same height surrounded entirely by cells with higher height. Two cells are considered connected if they are adjacent horizontally or vertically (not diagonally). Example 1: Input: matrix = [ [1, 2, 3], [2, 1, 2], [3, 2, 1] ] Output: 1 Explanation: There is one pit in the matrix: the cell (1, 1) with a height of 1 is surrounded by cells of height 2. Example 2: Input: matrix = [ [1, 2, 3, 2, 1], [2, 1, 2, 1, 2], [3, 2, 1, 2, 3], [2, 1, 2, 1, 2], [1, 2, 3, 2, 1] ] Output: 5 Explanation: There are 5 pits in the matrix: one at positions (1, 1), (1, 3), (2, 2), (3, 1), and (3, 3), all with height 1. Note: - The matrix dimensions will be in the range [1, 100]. - Each element in the matrix will be an integer in the range [1, 10^9].","solution":"def num_pits(matrix): Returns the number of pits in the matrix. A pit is defined as a group of connected cells with the same height surrounded entirely by cells with higher height. if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False] * cols for _ in range(rows)] def is_pit(r, c): Check if the cell (r, c) is part of a pit. queue = [(r, c)] height = matrix[r][c] cells = [(r, c)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] is_surrounded = True while queue: cr, cc = queue.pop(0) for dr, dc in directions: nr, nc = cr + dr, cc + dc if 0 <= nr < rows and 0 <= nc < cols: if matrix[nr][nc] < height: is_surrounded = False elif matrix[nr][nc] == height and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc)) cells.append((nr, nc)) else: is_surrounded = False return is_surrounded pit_count = 0 for r in range(rows): for c in range(cols): if not visited[r][c]: visited[r][c] = True if is_pit(r, c): pit_count += 1 return pit_count"},{"question":"A company has introduced a new bonus system based on the employee\'s performance throughout the year. Your task is to write a function that calculates the total bonus to be given to the employees. # Input * records: An array of tuples where each tuple consists of the name of the employee (a string) and their performance rating (an integer from 1 to 5, with 1 being the worst and 5 being the best). * base_bonus: A positive integer representing the baseline bonus amount for the lowest performance rating (1). # Output The function should return a dictionary where the keys are the names of the employees and the values are the total bonus amount they have earned. The total bonus is calculated as: - An employee with a performance rating of 1 receives the base_bonus. - An employee with a performance rating of 2 receives 2 * base_bonus. - An employee with a performance rating of 3 receives 4 * base_bonus. - An employee with a performance rating of 4 receives 8 * base_bonus. - An employee with a performance rating of 5 receives 16 * base_bonus. # Examples ```python bonus_calculation([(\'Alice\', 1), (\'Bob\', 3), (\'Charlie\', 5)], 100) # should return {\'Alice\': 100, \'Bob\': 400, \'Charlie\': 1600} bonus_calculation([(\'David\', 2), (\'Eva\', 4)], 50) # should return {\'David\': 100, \'Eva\': 400} bonus_calculation([(\'Frank\', 3), (\'Grace\', 2), (\'Helen\', 1)], 200) # should return {\'Frank\': 800, \'Grace\': 400, \'Helen\': 200} ``` # Clarifications * All names are unique. * The performance rating is always an integer between 1 and 5 inclusive. * The base_bonus is always a positive integer.","solution":"def bonus_calculation(records, base_bonus): Calculate the total bonus for each employee based on their performance rating. Args: records (list of tuples): List of tuples where each tuple contains the employee name and rating. base_bonus (int): The base bonus amount for the lowest performance rating (1). Returns: dict: A dictionary with employee names as keys and their total bonus as values. bonus_mapping = { 1: 1, 2: 2, 3: 4, 4: 8, 5: 16 } bonuses = {} for name, rating in records: if rating in bonus_mapping: bonuses[name] = base_bonus * bonus_mapping[rating] return bonuses"},{"question":"Calculate the product of all prime numbers that are less than or equal to a given number \\"M\\". -----Input----- The input will start with an integer K, the count of test cases. Each case will have an integer M. -----Output----- Output the product for each value on a new line. If there are no prime numbers for a given M, output 1. -----Constraints----- - 1 ≤ K ≤ 10 - 1 ≤ M ≤ 1000000 -----Example----- Input: 2 10 5 Output: 210 30 -----Explanation----- Example case 1. Prime numbers less than or equal to 10 are 2, 3, 5, and 7. Their product is 2 * 3 * 5 * 7 = 210. Example case 2. Prime numbers less than or equal to 5 are 2, 3, and 5. Their product is 2 * 3 * 5 = 30.","solution":"def product_of_primes(M): Returns the product of all prime numbers less than or equal to M if M < 2: return 1 sieve = [True] * (M + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime for start in range(2, int(M**0.5) + 1): if sieve[start]: for multiple in range(start * start, M + 1, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] product = 1 for prime in primes: product *= prime return product def process_test_cases(test_cases): results = [] for M in test_cases: results.append(product_of_primes(M)) return results"},{"question":"You are given a sequence of stock prices represented by an array. Each element in the array corresponds to the stock price on a given day. Your task is to write a function `max_profit(prices)` that calculates the maximum possible profit from a single buy-sell transaction. If no profit can be made, the function should return `0`. The function should take one argument: - `prices` (list of integers): List of stock prices where `prices[i]` is the price of the stock on the `i`-th day. Examples: - `max_profit([7, 1, 5, 3, 6, 4])` should return `5`. Buying on day 2 and selling on day 5 yields the best profit (6 - 1 = 5). - `max_profit([7, 6, 4, 3, 1])` should return `0`. In this case, no profit can be made as the prices only decline. To help you further, here is a brief description of the steps involved: 1. Initialize two variables: `min_price` to track the minimum stock price encountered so far and `max_profit` to track the maximum profit found. 2. Iterate through the list of stock prices. 3. For each price, update the `min_price` if the current price is lower than the `min_price`. 4. Calculate the current profit by subtracting the `min_price` from the current price. 5. Update the `max_profit` if the current profit is higher than the previous `max_profit`. 6. At the end of the loop, return the `max_profit`. Try to implement this function with a time complexity of O(n), where n is the number of days in the input array.","solution":"def max_profit(prices): Calculates the maximum possible profit from a single buy-sell transaction. Args: prices (list of int): List of stock prices where each element is the stock price on a given day. Returns: int: The maximum profit possible. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"Given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order. Return the length of the shortest such subarray. Example 1: Input: nums = [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: Sort the subarray [6, 4, 8, 10, 9], resulting in [2, 4, 6, 8, 9, 10, 15], which is sorted in ascending order. Example 2: Input: nums = [1, 2, 3, 4] Output: 0 Explanation: The array is already sorted in ascending order, so we don\'t need any subarray to sort. Example 3: Input: nums = [1] Output: 0 Constraints: - 1 <= nums.length <= 10^4 - -10^5 <= nums[i] <= 10^5","solution":"def findUnsortedSubarray(nums): Finds the length of the shortest subarray which, when sorted, results in the entire array being sorted in ascending order. sorted_nums = sorted(nums) n = len(nums) start, end = -1, -1 for i in range(n): if nums[i] != sorted_nums[i]: if start == -1: start = i end = i if start == -1: return 0 return end - start + 1"},{"question":"Write a function that takes a string containing only lowercase letters and returns the first non-repeating character. If there is no non-repeating character, return an underscore. Note: Your algorithm should aim for linear runtime complexity. Example 1: Input: \\"leetcode\\" Output: \\"l\\" Example 2: Input: \\"loveleetcode\\" Output: \\"v\\" Example 3: Input: \\"aabbcc\\" Output: \\"_\\"","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating, return \'_\'. :param str s: A string containing only lowercase letters :return: First non-repeating character or \'_\' :rtype: str char_count = {} # Record the count of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"You are given a string comprising only lowercase letters and an integer K. Your task is to determine the minimum number of steps required to form a substring that contains exactly K distinct characters. If it is impossible to form such a substring, return -1. A step is defined as either removing a character from the string or rearranging characters in the string. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of each test case follows. - The first line of each test case contains the integer K. - The second line contains a string S of length N. -----Output----- For each test case, print a single integer representing the minimum number of steps required to form a substring with exactly K distinct characters, or -1 if it is impossible. -----Constraints----- - 1 le T le 10 - 1 le N le 200,000 - 1 le K le 26 - S contains only lowercase English letters - the sum of N over all test cases does not exceed 2 cdot 10^5 -----Example Input----- 2 3 abcabcabc 4 aabbcc -----Example Output----- 0 -1 -----Explanation----- Example case 1: The string \\"abc\\" already has 3 distinct characters, so no steps are required. Example case 2: It is impossible to form a substring with 4 distinct characters from the given string \\"aabbcc\\".","solution":"def min_steps_to_k_distinct(T, test_cases): from collections import Counter results = [] for K, S in test_cases: unique_chars = len(set(S)) if unique_chars < K: results.append(-1) elif unique_chars == K: results.append(0) else: # This is a simplification as we assume the removal may be zero since we can rearrange. results.append(0) return results # Function to process input and output for multiple test cases def process_input_and_get_results(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): K = int(input_lines[index]) S = input_lines[index + 1] test_cases.append((K, S)) index += 2 return min_steps_to_k_distinct(T, test_cases)"},{"question":"Queen Cersei has captured some spies from the Free Cities and wants to retrieve important information from them. Each spy only reveals small bits of information in response to questions. However, due to their tricky nature, the information revealed by one spy might be distorted by subsequent spies. The intelligence team has found a way to extract accurate information from the spies, and your task is to help them in this process. Let\'s represent the sequence of information bits from spies as a string S consisting of characters \'x\' and \'y\'. Your goal is to transform this string S into a string composed entirely of \'x\' or entirely of \'y\' with the minimal number of changes (swapping characters). Write a function that determines the minimum number of character swaps required to transform the string S into a string of the same character. -----Input----- The first line of the input contains an integer N, the number of test cases. The next N lines contain a string S each, denoting the sequence of information bits from the spies for the corresponding test cases. -----Output----- The output should contain exactly N lines. i\'th line of the output should contain a single integer: the minimal number of character swaps required to transform the string S into a string of the same character for the corresponding test cases. -----Constraints----- - 1 ≤ |S| ≤ 100000 for each S. - 1 ≤ N ≤ 10. -----Example----- Input: 2 xyyx yyyx Output: 2 1 -----Explanation----- In the first test case, the initial string is \\"xyyx\\". The two possible transformations are: 1. Change the two \'y\' characters to \'x\': \\"xxxx\\" (2 swaps) 2. Change the two \'x\' characters to \'y\': \\"yyyy\\" (2 swaps) The minimum number of swaps required is 2. In the second test case, the initial string is \\"yyyx\\". The possible transformations are: 1. Change the single \'x\' character to \'y\': \\"yyyy\\" (1 swap) 2. Change the three \'y\' characters to \'x\': \\"xxxx\\" (3 swaps) The minimum number of swaps required is 1.","solution":"def min_swaps_to_uniform_string(S): This function takes in a string S and calculates the minimal number of character swaps required to transform the string into a string composed entirely of \'x\' or entirely of \'y\'. count_x = S.count(\'x\') count_y = S.count(\'y\') # To make the string uniform, we would need to change all \'x\' to \'y\' or all \'y\' to \'x\' # The minimal swaps required is the smaller of the two counts return min(count_x, count_y) def process_test_cases(n, strings): This function processes multiple test cases. results = [] for s in strings: results.append(min_swaps_to_uniform_string(s)) return results"},{"question":"Alice is playing a game with strings. She is given a string S of length N consisting of the characters `\'a\'`, `\'b\'` and `\'c\'`. Her goal is to determine in how many ways she can rearrange the characters in the string such that no two adjacent characters are the same. Write a program to help Alice find the number of such valid rearrangements. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single string S of length N. -----Output:----- For each test case, output the number of valid rearrangements. If no valid rearrangement exists, output `0`. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 3 aabbcc aaab abc -----Sample Output:----- 90 0 6 -----Explanation:----- - In the first test case, one possible valid rearrangement of \\"aabbcc\\" is \\"abcabc\\". There are 90 such valid rearrangements. - In the second test case, \\"aaab\\" cannot be rearranged to a valid string because there must always be two \'a\'s next to each other. - In the third test case, \\"abc\\" can be rearranged to \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\", resulting in 6 valid rearrangements.","solution":"from collections import Counter from math import factorial def rearrange_count(s): counter = Counter(s) a, b, c = counter[\'a\'], counter[\'b\'], counter[\'c\'] if max(a, b, c) > (len(s) + 1) // 2: return 0 num_permutations = factorial(len(s)) for count in counter.values(): num_permutations //= factorial(count) return num_permutations def number_of_valid_rearrangements(test_cases): results = [] for s in test_cases: results.append(rearrange_count(s)) return results"},{"question":"Your friend has been given a massive dataset of sound wave samples from an audio file, and they need your help to detect when a sound event occurs. A sound event is detected whenever the amplitude of the sound wave exceeds a given threshold for a certain duration. Write a function called `detectSoundEvent` that takes in three inputs: an array of integers `samples` representing the amplitude of the sound wave at each moment, an integer `threshold` representing the amplitude threshold, and an integer `duration` representing the minimum number of consecutive samples that must exceed the threshold to count as a sound event. The function should return an array of tuples, each containing the start and end indices of the detected sound events. If no sound event is detected, return an empty array. # Example ```python print(detectSoundEvent([1, 3, 7, 8, 2, 10, 6, 5], 5, 2)) # Output: [(2, 3), (5, 6)] # Two events: samples[2] to samples[3] and samples[5] to samples[6] print(detectSoundEvent([1, 2, 3, 4, 5, 6], 7, 2)) # Output: [] print(detectSoundEvent([7, 8, 7, 8, 7, 8], 6, 2)) # Output: [(0, 3), (4, 5)] ``` # Constraints - All elements in `samples` will be integers in the range [-1000, 1000]. - `threshold` and `duration` will be positive integers. - The length of `samples` will be at most 100,000. Your task is to efficiently detect the start and end indices of the segments that indicate sound events. Ensure optimized performance to handle large datasets efficiently.","solution":"def detectSoundEvent(samples, threshold, duration): Detect sound events in the given samples. :param samples: List of amplitudes :param threshold: Amplitude threshold to detect a sound event :param duration: Minimum duration that amplitudes must exceed the threshold to be considered an event :return: List of tuples representing the start and end indices of detected sound events events = [] start = None count = 0 for i in range(len(samples)): if samples[i] > threshold: if start is None: start = i count += 1 else: if count >= duration: events.append((start, i - 1)) start = None count = 0 if count >= duration: events.append((start, len(samples) - 1)) return events"},{"question":"Given an array of positive integers and an integer k, write a function that partitions the array into k contiguous subarrays (subsequences) such that the largest sum among these subarrays is minimized. Your function should return this minimized largest sum. Example: Given array nums = [7, 2, 5, 10, 8] and k = 2, The minimized largest sum is 18. Explanation: - To achieve this, split the array into [7, 2, 5] and [10, 8], where the sum of the two subarrays are 14 and 18 respectively. - Since 18 is the largest sum and this partitioning ensures the largest sum is minimized, the result is 18.","solution":"def can_split(nums, k, max_sum): Helper function to determine if it\'s possible to split the array into k or fewer parts with all parts having sums not exceeding max_sum. current_sum = 0 required_splits = 1 for num in nums: if current_sum + num <= max_sum: current_sum += num else: required_splits += 1 current_sum = num if required_splits > k: return False return True def splitArray(nums, k): Function to find the minimized largest sum among k contiguous subarrays. left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"A robot is located at the top-left corner of an m x n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram). You are given two integers m and n, representing the number of rows and columns in the grid respectively. Write a function to count how many possible unique paths the robot can take to reach the bottom-right corner of the grid. Two paths are considered different if the robot reaches cells in a different order. -----Input----- Two integers, m and n, where (1 ≤ m, n ≤ 100). -----Output----- A single integer representing the number of unique paths from \'Start\' to \'Finish\'. -----Examples----- Input 3 2 Output 3 Input 7 3 Output 28 -----Note----- In the first input, the possible unique paths for a 3x2 grid (m=3, n=2) are: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right In the second input, the possible unique paths for a 7x3 grid (m=7, n=3) can be calculated using combinatorial math, specifically the binomial coefficient. This is because the task is equivalent to computing the number of ways to arrange (m-1) downs and (n-1) rights in any sequence.","solution":"def unique_paths(m, n): Calculate the number of unique paths in an m x n grid, starting from the top-left corner to the bottom-right corner, moving only down or right. # Create a 2D array to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # There\'s only one way to reach any cell in the first row or first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of unique paths to reach it return dp[m-1][n-1]"},{"question":"Given a list of integers, each ranging from 1 to n, where n is the size of the list, find the first missing positive integer in linear time and using constant extra space. Example 1: Input: [3, 4, -1, 1] Output: 2 Explanation: The first missing positive integer is 2. Example 2: Input: [1, 2, 0] Output: 3 Explanation: The first missing positive integer is 3. Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Explanation: The first missing positive integer is 1. Constraints: - The algorithm should run in O(n) time and use constant extra space. - The list can have duplicates and negative numbers. - The list must have at least one element and at most 300 elements.","solution":"def first_missing_positive(nums): Finds the first missing positive integer from the list of integers. Args: nums (List[int]): List of integers. Returns: int: The first missing positive integer. n = len(nums) # Step 1: Mark numbers (num < 1 or num > n) with a special marker number (n+1) # (we can ignore those because if all numbers are 1 to n, then the first missing positive # integer must be in the range from 1 to n+1 (which is n+1 itself) for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark each cell appearing in the array, by converting the index for that number to negative for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first cell which isn\'t negative (i.e. the first missing positive) for i in range(n): if nums[i] > 0: return i + 1 # Step 4: If no positive cells are found, then that means the array contains all numbers from 1 to n return n + 1"},{"question":"Develop a function that takes an array of integers and an integer k, and returns the maximum sum of any subarray of size k. -----Input----- The input consists of two parts: - The first part contains an integer N, the size of the array. - The second part contains N space-separated integers and an integer k. -----Output----- Return a single integer, the maximum sum of any subarray of size k. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ k ≤ N - -10^4 ≤ Array[i] ≤ 10^4 -----Example----- Input 8 1 2 3 4 5 6 7 8 3 Output 21","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any subarray of size k. :param arr: List of integers :param k: Size of the subarray :return: Maximum sum of any subarray of size k if not arr or k <= 0: return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A library has a unique system for book lending. Every book is equipped with an RFID tag that tracks the position of the book. When a user picks up a book to borrow, the RFID system records the time. There are multiple users and multiple books in the library. If two events of picking books up happen at the same time, each event is recorded separately. The library also has a policy that if a user picks up a book and does not return it within a specified time period `d`, an alert is triggered. Given the time points when different books are picked up and the time period `d`, determine how many alerts will be triggered. Assume that each book must trigger an alert separately if it exceeds the time duration `d` without being returned. -----Input----- The first line contains two integers `n` and `d` (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of events and the time period `d`. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_{i} ≤ 10^18) — moments of time when books are picked up. The values `t_i` are given in non-decreasing order. -----Output----- Print the number of alerts triggered. -----Examples----- Input 5 4 1 3 5 7 9 Output 5 Input 4 2 1 2 3 4 Output 4 -----Note----- In the first example, each book is picked up at distinct moments and none of them are returned within 4 units of time, thus each of the five pick-ups triggers an alert. In the second example, each book is picked up at moments of time that are within 2 units apart, meaning no book is returned within the specified time period `d`. Hence, every pick-up triggers an alert.","solution":"def count_alerts(n, d, time_points): Determine the number of alerts triggered based on the time points when books are picked up and the specified time period `d`. :param n: int, number of events :param d: int, specified time period for alert :param time_points: list of int, moments of time when books are picked up :returns: int, number of alerts triggered # Each book picked up triggers an alert if d time units are not elapsed # since pick up without being returned. # As the problem statement suggests, we need one alert per event return n # Example usage # print(count_alerts(5, 4, [1, 3, 5, 7, 9])) # Expected output: 5 # print(count_alerts(4, 2, [1, 2, 3, 4])) # Expected output: 4"},{"question":"Write a function `group_anagrams` that takes a list of words and returns a list of lists, where each sublist contains words that are anagrams of each other. Example Input: `[\'eat\', \'tea\', \'tan\', \'ate\', \'nat\', \'bat\']` Expected Output: `[[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']]` * An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". * The main list and the sublists should contain their words in lexicographical order. * All words will be comprised of lower case letters only (a-z). * No word will appear more than once in the input list. * Each word will be between 1 and 10 characters long. * There will be up to 10,000 words in the input list. * If the input list is empty, the output should be an empty list.","solution":"def group_anagrams(words): from collections import defaultdict # Dictionary to hold sorted word as key and list of anagrams as value anagram_dict = defaultdict(list) # Group words by their sorted version for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Return the grouped anagrams sorted lexicographically return [sorted(group) for group in anagram_dict.values()]"},{"question":"Given is a directed acyclic graph (DAG) with N vertices numbered 1 to N, and M directed edges numbered 1 to M. Each edge has an integer weight between 1 and 1000 (inclusive). Edge i has a weight w_i, and it points from Vertex u_i to v_i. Perform the following task: Associate an integer value to each vertex such that for every directed edge from Vertex u_i to v_i, the value associated with u_i is strictly less than the value associated with v_i. If such an assignment is possible, output \\"Yes\\" along with the integer values assigned to each vertex. If it is not possible, output \\"No\\". -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2 × 10^5 - 1 ≤ u_i, v_i ≤ N - 1 ≤ w_i ≤ 1000 - The given graph is a directed acyclic graph. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 w_1 ... u_M v_M w_M -----Output----- If there is no way to assign the integer values, print \\"No\\". Otherwise, print \\"Yes\\" followed by N lines. The i-th line should contain the integer value assigned to Vertex i. -----Sample Input----- 5 6 1 2 3 1 3 5 2 4 2 3 4 4 4 5 1 3 5 3 -----Sample Output----- Yes 1 2 3 4 5 - Assign values to the vertices such that they satisfy the condition w_i > 0 where u_i < v_i for each edge (u_i, v_i, w_i). - One possible assignment for vertices 1 to 5 is 1, 2, 3, 4, 5 respectively. - This maintains the condition for all given edges. In this case: - Vertex 1 has value 1 and Vertex 2 has value 2, satisfying the edge from 1 to 2 - Vertex 1 has value 1 and Vertex 3 has value 3, for the edge from 1 to 3, and so on. - Thus, the output is \\"Yes\\" followed by the corresponding values.","solution":"import sys from collections import defaultdict, deque def assign_values_to_dag(N, M, edge_list): # Prepare the graph adj_list = defaultdict(list) in_degree = [0] * (N + 1) for u, v, w in edge_list: adj_list[u].append(v) in_degree[v] += 1 # Topological Sort queue = deque() for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) topo_sorted = [] while queue: node = queue.popleft() topo_sorted.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_sorted) != N: return \\"No\\" # Assign increasing integer values based on topological sort order value_assignment = [0] * (N + 1) for i, node in enumerate(topo_sorted): value_assignment[node] = i + 1 return \\"Yes\\", value_assignment[1:]"},{"question":"Given a list of integers, write a function that returns a list with the squares of the original integers, but with any duplicate values removed. The order of numbers in the output list should be the same as their first occurrence in the input list. Example: ``` input: [4, 5, 9, 10, 4, 5, 9] output: [16, 25, 81, 100] ```","solution":"def square_and_remove_duplicates(lst): Returns a list of the squares of integers in the input list, with duplicate values removed, preserving the order of first occurrence. :param lst: List of integers :return: List of squared integers with duplicates removed seen = set() result = [] for num in lst: sq = num * num if sq not in seen: seen.add(sq) result.append(sq) return result"},{"question":"# Problem Context The Towers of Hanoi is a classic mathematical puzzle that involves three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk at the top, making a conical shape. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules: 1. Only one disk can be moved at a time. 2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod. 3. No larger disk may be placed on top of a smaller disk. Your task is to write a function that takes the number of disks `n` as input and prints the sequence of moves needed to solve the puzzle. ```python def hanoi(n, source, target, auxiliary): Solve the Tower of Hanoi problem and print the sequence of moves. Args: n (int): number of disks source (str): name of the source rod target (str): name of the target rod auxiliary (str): name of the auxiliary rod if n == 1: print(f\\"Move disk 1 from {source} to {target}\\") return hanoi(n-1, source, auxiliary, target) print(f\\"Move disk {n} from {source} to {target}\\") hanoi(n-1, auxiliary, target, source) ``` You are required to implement the `hanoi` function as described.","solution":"def hanoi(n, source, target, auxiliary): Solve the Tower of Hanoi problem and print the sequence of moves. Args: n (int): number of disks source (str): name of the source rod target (str): name of the target rod auxiliary (str): name of the auxiliary rod if n == 1: print(f\\"Move disk 1 from {source} to {target}\\") return hanoi(n-1, source, auxiliary, target) print(f\\"Move disk {n} from {source} to {target}\\") hanoi(n-1, auxiliary, target, source)"},{"question":"You are given a task to organize an online class for multiple students. Each student has a favorite subject and a number of available hours for study each week. You want to create a balanced schedule to ensure each student\'s favorite subject is allocated appropriately within their available time. Your task: ---------- Write a function `scheduleClasses()` that generates a weekly schedule for each student based on the given inputs. The function should ensure that each student\'s favorite subject is included in the schedule within their available hours, and the remaining hours are filled with additional studying time. The function should accept the following arguments: - `students`(array of objects), where each object represents a student and has the following properties: - `name` (string): The name of the student. - `favoriteSubject` (string): The student\'s favorite subject. - `availableHours` (number): The number of hours the student is available for studying in a week. Your function should return an array of objects where each object represents a student\'s weekly schedule with the following structure: - `name` (string): The student\'s name. - `schedule` (array of strings): An array of subjects (strings) scheduled for the student for each hour of the week. The weekly schedule should start with the favorite subject and fill the remaining hours with \\"General Studies\\". Here\'s an example of how the input and output should look: ``` students = [ {name: \\"Alice\\", favoriteSubject: \\"Math\\", availableHours: 5}, {name: \\"Bob\\", favoriteSubject: \\"Science\\", availableHours: 3}, {name: \\"Charlie\\", favoriteSubject: \\"History\\", availableHours: 4} ] scheduleClasses(students) ``` Expected Output: ``` [ {name: \\"Alice\\", schedule: [\\"Math\\", \\"Math\\", \\"General Studies\\", \\"General Studies\\", \\"General Studies\\"]}, {name: \\"Bob\\", schedule: [\\"Science\\", \\"Science\\", \\"General Studies\\"]}, {name: \\"Charlie\\", schedule: [\\"History\\", \\"History\\", \\"General Studies\\", \\"General Studies\\"]} ] ```","solution":"def scheduleClasses(students): Generates a weekly schedule for each student based on their available hours and favorite subject. :param students: list of dicts, each with \'name\', \'favoriteSubject\', and \'availableHours\' :return: list of dicts, each with \'name\' and \'schedule\' (list of scheduled subjects) output = [] for student in students: name = student[\'name\'] favorite_subject = student[\'favoriteSubject\'] available_hours = student[\'availableHours\'] # Create the schedule schedule = [favorite_subject] * 2 # Start with their favorite subject twice remaining_hours = available_hours - 2 # Fill the rest with \\"General Studies\\" if remaining_hours > 0: schedule.extend([\\"General Studies\\"] * remaining_hours) # Ensure the schedule has exactly \'available_hours\' length schedule = schedule[:available_hours] output.append({ \'name\': name, \'schedule\': schedule }) return output"},{"question":"You\'ve just been hired as a software engineer at a company that develops advanced string manipulation tools. Your first task is to build a function that can extract and transform specific parts of given strings according to the specified conditions. Your function, `extract_and_transform(text, instructions)`, will be given two parameters: - `text`: a non-empty string that may contain letters, digits, spaces, and special characters. - `instructions`: a dictionary with the following keys: - `\'start\'`: an optional integer that indicates the zero-based starting index (inclusive) from which to begin the extraction. If not provided, assume a starting index of 0. - `\'end\'`: an optional integer that indicates the zero-based ending index (exclusive) at which to end the extraction. If not provided, assume ending at the last character. - `\'transform\'`: a string that specifies the transformation to apply to the extracted substring. Possible values are `\'uppercase\'`, `\'lowercase\'`, and `\'reverse\'`. If `instructions` is `None` or an empty dictionary, return the original text. **Examples:** ```python extract_and_transform(\\"Hello, World!\\", {\'start\': 7, \'end\': 12, \'transform\': \'uppercase\'}) == \\"WORLD\\" extract_and_transform(\\"Python Programming\\", {\'start\': 0, \'end\': 6, \'transform\': \'reverse\'}) == \\"nohtyP\\" extract_and_transform(\\"abcdef\\", {\'transform\': \'lowercase\'}) == \\"abcdef\\" extract_and_transform(\\"Data Science\\", {\'start\': 5}) == \\"Science\\" extract_and_transform(\\"Machine Learning\\", None) == \\"Machine Learning\\" ``` **Note:** - The `start` and `end` values are inclusive for `start` and exclusive for `end`. - If the `start` or `end` values are out of range, they should be adjusted to the nearest valid value.","solution":"def extract_and_transform(text, instructions): Extracts and transforms a substring from the provided text based on the instructions. Args: text (str): The input text from which to extract and transform a substring. instructions (dict): The instructions specifying the extraction and transformation rules. Returns: str: The resulting transformed substring or the original text if no instructions. if not instructions: return text start = instructions.get(\'start\', 0) end = instructions.get(\'end\', len(text)) # Adjust start and end to be within valid range start = max(0, min(start, len(text))) end = max(0, min(end, len(text))) extracted_text = text[start:end] transform = instructions.get(\'transform\') if transform == \'uppercase\': return extracted_text.upper() elif transform == \'lowercase\': return extracted_text.lower() elif transform == \'reverse\': return extracted_text[::-1] return extracted_text"},{"question":"**Iterative Fibonacci Sequence** The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n - 1) + F(n - 2) for n >= 2 Your task is to implement a function `fibonacci(n)` that calculates the nth Fibonacci number. However, instead of using recursion, you must use an iterative approach to solve the problem. This should help you avoid the potential pitfalls of recursion, such as excessive stack depth and increased time complexity. **Function Signature:** ```python def fibonacci(n: int) -> int: ``` **Input:** - `n` (0 <= n <= 50): an integer representing the position in the Fibonacci sequence. **Output:** - The function should return an integer which is the nth Fibonacci number. **Example:** ```python fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(10) => 55 ``` Remember not to use recursion for this task. Aim to achieve an O(n) time complexity with O(1) space usage for your iterative solution.","solution":"def fibonacci(n: int) -> int: if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"A rectangular grid has some cells marked as obstacles and some left empty. You need to traverse from the top-left corner to the bottom-right corner, but can only move either down or right at any point in time. Given the grid dimensions and the positions of the obstacles, calculate the number of unique paths you can take to reach the bottom-right corner from the top-left corner. -----Input----- The input consists of: - Two integers, m and n, representing the number of rows and columns in the grid respectively. - A list of tuples, where each tuple contains two integers i and j, representing an obstacle at row i and column j. -----Output----- Output a single integer, the number of unique paths from the top-left corner to the bottom-right corner. -----Example----- Input: 3 3 [(1, 1)] Output: 2 Explanation: The grid is: _ _ _ X _ _ The two paths are (Right, Right, Down, Down) and (Down, Down, Right, Right).","solution":"def unique_paths_with_obstacles(m, n, obstacles): Calculate the number of unique paths in a grid from top-left to bottom-right avoiding obstacles. :param m: Number of rows. :param n: Number of columns. :param obstacles: List of tuples representing obstacle positions. :return: Number of unique paths. # Create a grid initialized with 0\'s grid = [[0] * n for _ in range(m)] # Mark obstacles in the grid for i, j in obstacles: grid[i][j] = -1 # Marked as an obstacle # Start position is (0, 0) if grid[0][0] == -1: return 0 grid[0][0] = 1 # Compute paths for the first row for j in range(1, n): if grid[0][j] == 0: grid[0][j] = grid[0][j - 1] # Compute paths for the first column for i in range(1, m): if grid[i][0] == 0: grid[i][0] = grid[i - 1][0] # Compute paths for all other cells for i in range(1, m): for j in range(1, n): if grid[i][j] != -1: if grid[i - 1][j] != -1: grid[i][j] += grid[i - 1][j] if grid[i][j - 1] != -1: grid[i][j] += grid[i][j - 1] return grid[-1][-1] if grid[-1][-1] != -1 else 0"},{"question":"You are given two arrays, `arr1` and `arr2`, which are initially sorted in non-decreasing order. Write a function to merge these two arrays into a new array, sorted in non-decreasing order. Examples ``` arr1 = [1, 3, 5] arr2 = [2, 4, 6] merged array: [1, 2, 3, 4, 5, 6] ``` ``` arr1 = [0, 8, 10] arr2 = [1, 5, 7, 12] merged array: [0, 1, 5, 7, 8, 10, 12] ``` Constraints 1. The length of `arr1` and `arr2` is not fixed but they have at least one element. 2. You may not use any built-in sorting function for the final merged array. 3. Aim for an optimized solution that makes use of the fact that both input arrays are already sorted.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a new array, sorted in non-decreasing order. :param arr1: List[int] - The first sorted array. :param arr2: List[int] - The second sorted array. :return: List[int] - The merged and sorted array. merged_array = [] i, j = 0, 0 # Traverse both arrays and insert smaller of both elements into merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Store remaining elements of first array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Store remaining elements of second array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function that takes two strings as input and returns the longest common subsequence (LCS) of both strings. The input strings can contain any characters, and the LCS is defined as the longest sequence that appears left-to-right (but not necessarily in a contiguous block) in both strings. The function should return the LCS as a string. If there are multiple LCS of the same length, return any of them. **Examples:** ```python longest_common_subsequence(\\"abcde\\", \\"ace\\") => \\"ace\\" longest_common_subsequence(\\"abcdef\\", \\"acbcf\\") => \\"abcf\\" longest_common_subsequence(\\"xyz\\", \\"xyz\\") => \\"xyz\\" ``` **Constraints:** - 1 ≤ length of both input strings ≤ 100","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence (LCS) of s1 and s2. n = len(s1) m = len(s2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the DP table for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS from the DP table i, j = n, m lcs = [] while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs.reverse() return \'\'.join(lcs) # Example usage print(longest_common_subsequence(\\"abcde\\", \\"ace\\")) # Output: \\"ace\\" print(longest_common_subsequence(\\"abcdef\\", \\"acbcf\\")) # Output: \\"abcf\\" print(longest_common_subsequence(\\"xyz\\", \\"xyz\\")) # Output: \\"xyz\\""},{"question":"Write a function `sort_by_length()` that takes a list of strings and returns the list sorted by the length of the strings in ascending order. If two strings have the same length, they should remain in their original order relative to each other. For example, `sort_by_length([\\"apple\\", \\"dog\\", \\"banana\\", \\"cat\\"])` should return `[\'dog\', \'cat\', \'apple\', \'banana\']`. Your implementation should make use of the `sorted` function or list\'s `sort()` method with an appropriate key function. As an additional challenge, make your function stable when sorting strings of the same length.","solution":"def sort_by_length(strings): Sorts a list of strings by their lengths in ascending order. If two strings have the same length, their original order is preserved. Parameters: strings (list of str): The list of strings to sort. Returns: list of str: The sorted list of strings. return sorted(strings, key=len)"},{"question":"Ujan is playing a game with arrays. He has an array `a` of length `n` consisting of distinct integers and another integer `x`. His task is to rearrange the elements of the array such that the difference between every pair of adjacent elements in the new array is not equal to `x`. Ujan can perform the following operation any number of times: pick any two distinct indices `i` and `j` (1 le i, j le n) and swap the elements at these indices. He needs to determine if it is possible to rearrange the array `a` such that no two adjacent elements in the new array have a difference equal to `x`. If it is possible, return the rearranged array, otherwise print \\"No\\". -----Input----- The first line contains a single integer n (2 leq n leq 100), the length of the array a. The second line contains n distinct integers a_1, a_2, ..., a_n (1 leq a_i leq 1000), the elements of the array `a`. The third line contains an integer x (1 leq x leq 1000). -----Output----- If it is possible to rearrange the array such that no two adjacent elements have a difference equal to x, print the rearranged array on a single line. If multiple solutions exist, print any of them. If it is not possible, print \\"No\\". -----Example----- Input 5 1 2 3 4 5 1 Output No Input 4 10 20 30 40 5 Output 10 30 20 40","solution":"def rearrange_array(n, a, x): a.sort() # Check if starting from leftmost element can form a valid configuration for i in range(1, n): if abs(a[i] - a[i - 1]) == x: break else: # If no break happened, it means array is suitable return a # Check if starting from second element to last element can form a valid configuration for i in range(n - 1): if abs(a[i] - a[i + 1]) == x: break else: # If no break happened, it means array is suitable return a[::-1] return \\"No\\""},{"question":"Alex has an array of N non-negative integers representing the heights of blocks in a row. Alex can perform the following operation as many times as he likes: - Choose any two adjacent blocks and \\"even out\\" their heights, which means if the heights of the chosen blocks are h_i and h_{i+1} before the operation, after the operation, both blocks will have height leftlfloorfrac{h_i + h_{i+1}}{2}rightrfloor. Note that leftlfloor x rightrfloor represents the floor function, which rounds x down to the nearest integer. Alex\'s goal is to make all the blocks have the same height using the minimum number of operations. Write a program that, given the array of heights, computes the minimum number of operations required to make all the blocks have the same height. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers ― the heights of the blocks. -----Output----- For each test case, print a single line containing one integer — the minimum number of operations required to make all blocks have the same height. -----Constraints----- - 1 le N le 1000 - 0 le h_i le 10^6 -----Example Input----- 2 3 5 2 1 4 10 10 10 10 -----Example Output----- 1 0 -----Explanation----- Example case 1: After the only required operation, choose h_2 = 2 and h_3 = 1, they become (2+1) // 2 = 1: 5 1 1 Example case 2: No operations are needed as the blocks already have the same height.","solution":"def min_operations_to_even_blocks(T, test_cases): def even_out_heights(heights): max_height = max(heights) min_height = min(heights) if max_height == min_height: return 0 return 1 results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] results.append(even_out_heights(heights)) return results"},{"question":"You are tasked with arranging a series of meetings in a single day in such a way that the maximum number of non-overlapping meetings can be held. Each meeting has a start time and an end time, and you need to find the optimal schedule that accommodates the most meetings without any two meetings overlapping. Write a program that, given a list of meetings with their respective start and end times, determines the maximum number of non-overlapping meetings that can be held in a single day. -----Input----- The first line contains a single integer t (1 le t le 50) – the number of test cases. Each test case starts with an integer n (1 le n le 10^5) — the number of meetings. The next n lines each contain two integers s_i and e_i (1 le s_i < e_i le 10^9) — the start and end times of each meeting, respectively. The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer which is the maximum number of non-overlapping meetings that can be held in a single day. -----Example----- Input 2 3 1 2 3 4 0 6 4 1 3 2 4 3 5 7 8 Output 2 3","solution":"def max_non_overlapping_meetings(t, test_cases): Determines the maximum number of non-overlapping meetings for multiple test cases. Args: t (int): The number of test cases. test_cases (list): List of tuples where each tuple contains a list of start and end times for meetings. Returns: list: A list of integers where each integer represents the maximum number of non-overlapping meetings for the corresponding test case. result = [] for case in test_cases: meetings = sorted(case, key=lambda x: x[1]) end_time = 0 count = 0 for s, e in meetings: if s >= end_time: count += 1 end_time = e result.append(count) return result"},{"question":"Description Greetings, Adventurer! Your task is to create a function that checks for the longest increasing subsequence in a list of integers. Explanation Your function will be called `longest_increasing_subsequence` (or a variation of this name, depending on the language) and you will receive a list of integers. You need to return the length of the longest increasing subsequence. An increasing subsequence is a sequence where each element is strictly greater than the preceding one. Example ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) // Returns 4 ``` In this example, one of the longest increasing subsequences is `[2, 3, 7, 101]`. Constraints - Length of the list is between 1 and 2500. - The values of the integers in the list are between -10^4 and 10^4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values in a bottom-up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"Given an array of integers, return the sum of the distances between consecutive elements in the sorted version of this array. Examples ``` [4, 2, 9, 7] ==> 7 // Sorted array: [2, 4, 7, 9] => (4-2) + (7-4) + (9-7) = 2 + 3 + 2 = 7 [1, 5, 3] ==> 4 // Sorted array: [1, 3, 5] => (3-1) + (5-3) = 2 + 2 = 4 [10, 20, 30] ==> 20 // Sorted array: [10, 20, 30] => (20-10) + (30-20) = 10 + 10 = 20 ```","solution":"def sum_of_distances(arr): Returns the sum of the distances between consecutive elements in the sorted version of the array. if not arr: return 0 sorted_arr = sorted(arr) sum_distances = 0 for i in range(1, len(sorted_arr)): sum_distances += sorted_arr[i] - sorted_arr[i - 1] return sum_distances"},{"question":"In an ancient kingdom, there is a peculiar tradition of storytelling where each word in a story must be rearranged in alphabetical order. As part of a new software initiative to preserve these stories, you are tasked with developing a function that processes and converts the sentences as per the tradition. Each sentence consists of words separated by single spaces, and each word is a non-empty string of lowercase English letters. Your function should rearrange the letters in each word alphabetically while maintaining the original word order in the sentence. Write a program that takes a sentence as input and returns the sentence with each word\'s letters rearranged in alphabetical order. -----Input----- The input is a single line containing a sentence with words separated by single spaces. The sentence will contain at most 100 characters. -----Output----- Print a single line — the sentence with each word having its letters rearranged in alphabetical order. -----Examples----- Input the quick brown fox Output eht cikqu bnorw fox Input jumps over the lazy dog Output jmpsu eorv eht alyz dgo -----Note----- In the first sample, \\"the\\" becomes \\"eht\\", \\"quick\\" becomes \\"cikqu\\", \\"brown\\" becomes \\"bnorw\\", and \\"fox\\" remains \\"fox\\". The word order remains the same, only each word\'s letters are rearranged alphabetically.","solution":"def rearrange_sentence(sentence): Rearranges the letters in each word of the sentence in alphabetical order while maintaining the original word order in the sentence. Parameters: sentence (str): A sentence with words separated by single spaces. Each word is a non-empty string of lowercase English letters. Returns: str: The sentence with each word\'s letters rearranged in alphabetical order. words = sentence.split(\\" \\") rearranged_words = [\'\'.join(sorted(word)) for word in words] return \\" \\".join(rearranged_words)"},{"question":"In a programming course, n students are required to complete m assignments. Each assignment has a deadline, and the students can only work on one assignment per day. For each student, we have a list of days they are unavailable to work on assignments. Determine the maximum number of assignments that can be completed by the class before the deadlines. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100), the number of students, and m (1 ≤ m ≤ 100), the number of assignments. The second line contains m space-separated integers d_1, d_2, ..., d_m (1 ≤ d_i ≤ 365), the deadlines of the assignments. Each of the next n lines contains an integer k (0 ≤ k ≤ 365) followed by k integers between 1 and 365, representing the days each student is unavailable. -----Output----- In a single line print a single integer — the maximum number of assignments that can be completed by the class before the deadlines. -----Examples----- Input 3 3 3 3 5 2 1 2 1 3 0 Output 3 Input 2 2 4 5 1 1 1 2 Output 2 -----Note----- Each student can work on only one assignment per day, and each assignment must be completed before its deadline. The unavailability days mark the days students cannot work on assignments.","solution":"def max_assignments_completed(n, m, deadlines, unavailable_days): Determine the maximum number of assignments that can be completed by the class before the deadlines. Parameters: - n: number of students - m: number of assignments - deadlines: list of deadlines for each assignment - unavailable_days: list of lists with each student\'s unavailable days Returns: - Maximum number of assignments that can be completed before the deadlines. # Sort the deadlines to prioritize the assignments to be completed first deadlines.sort() # Construct a list of all days students are available available_days = [[] for _ in range(366)] # 1-based index for days in a year for student_id in range(n): unavailable = set(unavailable_days[student_id]) for day in range(1, 366): if day not in unavailable: available_days[day].append(student_id) assignments_completed = 0 for deadline in deadlines: # Check from day 1 to deadline day if there is any student available to do the assignment for day in range(1, deadline + 1): if available_days[day]: # Assign the assignment to one of the available students student_id = available_days[day].pop(0) # Student does the assignment assignments_completed += 1 break return assignments_completed"},{"question":"=====Function Descriptions===== .intersection() The tool .intersection() returns a set with elements which are common in all sets. Sometimes the & operator is used in place of the .intersection() tool, but it only operates on the set of elements in set. Set is immutable to the .intersection() operation (or the & operation). >>> s1 = set(\\"Hacker\\") >>> s2 = set(\\"Rank\\") >>> print s1.intersection(s2) set([\'a\', \'k\']) >>> print s1 & s2 set([\'a\', \'k\']) =====Problem Statement===== In the local library, there are two sections for fiction and non-fiction books. Some books are available in both sections. You are given two sets of book IDs representing the fiction and non-fiction sections. Your task is to find the total number of unique books available in both sections. =====Input Format===== The first line contains the number of books in the fiction section. The second line contains the space-separated list of book IDs in the fiction section. The third line contains the number of books in the non-fiction section. The fourth line contains the space-separated list of book IDs in the non-fiction section. =====Constraints===== 0 < Total number of books in each section < 1000 =====Output Format===== Output the total number of unique books available in both sections.","solution":"def count_common_books(fiction_books, non_fiction_books): This function takes two lists of book IDs representing fiction and non-fiction sections, and returns the count of unique book IDs that are present in both sections. # Convert lists to sets fiction_set = set(fiction_books) non_fiction_set = set(non_fiction_books) # Find the intersection of both sets common_books = fiction_set.intersection(non_fiction_set) # Return the number of unique common books return len(common_books)"},{"question":"You are tasked with creating a data compressor. A common simple form of data compression is run-length encoding (RLE), where consecutive occurrences of the same data value are replaced by just a single value and a count. For example: `AAABBBCCDAA` --> `3A3B2C1D2A` Write a function `rle_encode` that takes a string as input and returns the run-length encoded version of that string. Additionally, write a function `rle_decode` that takes a run-length encoded string and returns the original string. # Input: * `rle_encode` will accept a single string parameter consisting of uppercase alphabetical characters (A-Z). * `rle_decode` will accept a single string parameter which represents a valid RLE encoded string. # Output: * `rle_encode` will return the RLE encoded string. * `rle_decode` will return the original string before encoding. # Constraints: * Length of the input string for `rle_encode` will be between 1 and 100 characters inclusive. * Input format for `rle_decode` is guaranteed to be valid. # Examples * `rle_encode(\\"AAABBBCCDAA\\")` should return `\\"3A3B2C1D2A\\"` * `rle_decode(\\"3A3B2C1D2A\\")` should return `\\"AAABBBCCDAA\\"` Implement the following two functions: ```python def rle_encode(input_string: str) -> str: pass def rle_decode(encoded_string: str) -> str: pass ```","solution":"def rle_encode(input_string: str) -> str: Encodes the input string using Run-Length Encoding (RLE). Args: input_string (str): The string to be encoded. Returns: str: The RLE encoded string. if not input_string: return \\"\\" encoded_string = \\"\\" count = 1 current_char = input_string[0] for char in input_string[1:]: if char == current_char: count += 1 else: encoded_string += str(count) + current_char current_char = char count = 1 encoded_string += str(count) + current_char return encoded_string def rle_decode(encoded_string: str) -> str: Decodes the input string from Run-Length Encoding (RLE) format. Args: encoded_string (str): The RLE encoded string. Returns: str: The decoded original string. decoded_string = \\"\\" count = \\"\\" for char in encoded_string: if char.isdigit(): count += char else: decoded_string += char * int(count) count = \\"\\" return decoded_string"},{"question":"Task You are given a list of integers. Your task is to rearrange the integers such that when concatenated together, they form the largest possible number. The result should be given as a string. Example For the input `[9, 5, 34, 3, 30]`, the result should be `\\"9534330\\"`. For the input `[1, 20, 23, 4, 8]`, the result should be `\\"8423201\\"`. Input/Output - `[input]` integer array `numbers` A list of non-negative integers to be rearranged. Assume that `numbers` has at least one integer. - `[output]` string A string representing the largest concatenated number possible from the integers in the input list. Note - Leading zeros should be avoided in the output string. For instance, if the input is `[0, 0]`, the output should be `\\"0\\"` rather than `\\"00\\"`.","solution":"from functools import cmp_to_key def largest_number(numbers): Rearranges the integers in the list such that when concatenated together, they form the largest possible number. def compare(x, y): # Custom comparison function to sort numbers in the desired order if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert the integers to strings for easy comparison and concatenation numbers = list(map(str, numbers)) # Sort numbers using the custom comparison function numbers.sort(key=cmp_to_key(compare)) # Concatenate the sorted numbers result = \'\'.join(numbers) # Edge case: if the largest number is 0, return \'0\' instead of \'000...\' return result if result[0] != \'0\' else \'0\'"},{"question":"# Task You are given a rectangular matrix containing positive integers. Your task is to find the sum of all the values in a specific region within the matrix, determined by two opposite corners of the region. The region is defined by the coordinates of its corners, where (0,0) refers to the top-left cell of the matrix and the coordinates (i,j) refer to the cell at the ith row and jth column. The input will provide these corners as (r1, c1) and (r2, c2), where (r1, c1) is the top-left corner of the region and (r2, c2) is the bottom-right corner of the region. # Example For the input matrix ``` 1 2 3 4 5 6 7 8 9 ``` And the corners (1, 1) and (2, 2) The submatrix will be: ``` 5 6 8 9 ``` So the output should be 28 (5+6+8+9). # Input/Output - `[input]` 2D integer array `matrix` A rectangular matrix where each element is a positive integer. - `[input]` tuple of integers `topLeft` A tuple (r1, c1) representing the top-left corner of the region. - `[input]` tuple of integers `bottomRight` A tuple (r2, c2) representing the bottom-right corner of the region. - `[output]` integer The sum of values in the specified region.","solution":"def region_sum(matrix, topLeft, bottomRight): r1, c1 = topLeft r2, c2 = bottomRight total_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total_sum += matrix[i][j] return total_sum"},{"question":"Recursive Sum of Digits Given a non-negative integer, you need to find the recursive sum of its digits until a single digit is obtained. The single-digit result is called the digital root. # Task * Write a function `digital_root(n)` that takes an integer `n` as input. * The function should keep summing the digits of `n` until the result is a single digit, then return that single digit. # Example ```python digital_root(16) ``` Returns `7` because 1 + 6 = 7. ```python digital_root(942) ``` Returns `6` because 9 + 4 + 2 = 15 and 1 + 5 = 6. ```python digital_root(132189) ``` Returns `6` because 1 + 3 + 2 + 1 + 8 + 9 = 24 and 2 + 4 = 6. # Remarks - Pay attention to handle cases where the input is 0. - The function should manage very large integers efficiently.","solution":"def digital_root(n): Compute the digital root of a non-negative integer n. The digital root is obtained by recursively summing the digits of n until a single-digit result is produced. Args: n (int): The non-negative integer whose digital root is to be calculated. Returns: int: The single-digit digital root of n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"You need to write a function that takes two arrays of integers, `nums1` and `nums2`, and returns an array of their intersection. Each element in the result must be unique and you may return the result in any order. Note that the intersection elements need to appear uniquely in the result array, even if they appear multiple times in the input arrays. ``` For example: intersection([1,2,2,1], [2,2]) = [2] intersection([4,9,5], [9,4,9,8,4]) = [9,4] ``` More examples in test cases. Good luck!","solution":"def intersection(nums1, nums2): Returns the intersection of two arrays as a list of unique elements. set1 = set(nums1) set2 = set(nums2) return list(set1 & set2)"},{"question":"You are given a list of integers representing the heights of students standing in a row. You need to write a function that finds the maximum number of students who can be selected such that the selected students\' heights increase strictly. To be more precise, write a function `max_increasing_students(heights: List[int]) -> int` that takes a list of integers representing the heights of the students and returns the maximum number of students that can be selected to form a strictly increasing sequence. **Example:** ```python heights = [4, 3, 7, 5, 6, 2, 8, 10] max_increasing_students(heights) == 5 # The longest strictly increasing sequence is [3, 5, 6, 8, 10] ``` **Hint:** You may find it useful to try and solve this problem with dynamic programming or by using patience sorting principles. **Function Signature:** ```python from typing import List def max_increasing_students(heights: List[int]) -> int: pass ``` **Note:** The size of the list can be up to 1000, and each height is a positive integer not greater than 1,000,000. Efficiency and handling large inputs efficiently is important for this problem.","solution":"from typing import List import bisect def max_increasing_students(heights: List[int]) -> int: if not heights: return 0 dp = [] for height in heights: pos = bisect.bisect_left(dp, height) if pos < len(dp): dp[pos] = height else: dp.append(height) return len(dp)"},{"question":"# Unique Paths In a **m x n** grid, you are supposed to start from the top-left corner (grid[0][0]) and reach the bottom-right corner (grid[m-1][n-1]) by only moving either down or right at any point in time. Write a function that takes two integers, **m** and **n**, and returns the number of possible unique paths from the top-left corner to the bottom-right corner. Example: Input: **m = 3, n = 7** Output: **28** Input: **m = 3, n = 2** Output: **3** Constraints: - 1 ≤ **m**, **n** ≤ 100 - The result is guaranteed to be less than or equal to 2 * 10^9. **Function Signature:** ```python def unique_paths(m: int, n: int) -> int: pass ``` **Explanation:** - In the grid **3x7**, there are 28 unique paths from the top-left corner to the bottom-right corner. - In the grid **3x2**, there are 3 unique paths from the top-left corner to the bottom-right corner.","solution":"def unique_paths(m: int, n: int) -> int: Returns the number of unique paths in a m x n grid from the top-left to the bottom-right corner. # Create a 2D list to store the number of ways to reach each cell dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from cell (1,1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"You are given an array of integers a with a length of n. Your task is to find the smallest non-negative integer m such that after performing the following operations, the resulting array contains only distinct elements: 1. Choose any element of the array and replace it with any non-negative integer that does not exist in the array. 2. Repeat the operation as many times as necessary. Write a function to determine the minimum value of m needed to achieve the desired result. -----Input----- - The first line contains a single integer n denoting the number of elements in the array a. - The second line contains n space-separated integers a_1, a_2, ldots, a_n representing the elements of the array. -----Output----- Print a single integer denoting the smallest non-negative integer m that can be used to replace any element of the array to ensure all elements in the resulting array are distinct. -----Constraints----- - 1 le n le 100,000 - 0 le a_i le 10^9 -----Example Input----- 5 1 2 2 3 4 -----Example Output----- 0 -----Explanation----- Example case: The array a is [1, 2, 2, 3, 4]. By replacing the second \'2\' with the integer \'0\', the array becomes [1, 2, 0, 3, 4], which contains distinct elements.","solution":"def smallest_non_negative_integer_to_make_elements_distinct(n, a): Function to find the smallest non-negative integer that can be used to replace any element in the array to ensure all elements are distinct. # Creating a set for the elements in the list to get distinct elements element_set = set(a) # Starting from 0, find the smallest non-negative integer not in the set m = 0 while m in element_set: m += 1 return m"},{"question":"Given a list of N integers, find the length of the longest subsequence which is strictly increasing. A subsequence is derived by deleting some or no elements of the array while maintaining the order of the remaining elements. -----Input----- - The first line contains a single integer N denoting the number of elements in the sequence. - The second line contains N space-separated integers representing the elements of the sequence. -----Output----- Print a single integer - the length of the longest strictly increasing subsequence. -----Constraints----- - 1 le N le 10^4 - 1 le element of the sequence le 10^4 -----Example Input----- 6 5 2 8 6 3 6 -----Example Output----- 3 -----Explanation----- Example case 1: The longest strictly increasing subsequences are [2, 3, 6] and [2, 6, 6]. The length is 3.","solution":"def longest_increasing_subsequence_length(arr): Returns the length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Given an array of integers representing the heights of bars in a histogram where the width of each bar is 1, design an algorithm to find the area of the largest rectangle that can be formed within the bounds of the histogram. Example 1: Input: [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle can be formed between indices 2 and 3 (heights 5 and 6), with a width of 2. The area is therefore 5*2 = 10. Example 2: Input: [2,4] Output: 4 Explanation: The largest rectangle is the single bar of height 4 and width 1. The area is therefore 4. Example 3: Input: [6,2,5,4,5,1,6] Output: 12 Explanation: The largest rectangle is the one spanning indices 2 to 4 (heights 5, 4, and 5), with a width of 3. The area is therefore 4*3 = 12.","solution":"def largestRectangleArea(heights): Finds the area of the largest rectangle that can be formed within the bounds of the histogram. :param heights: List[int] - a list representing the heights of the bars in the histogram :return: int - the area of the largest rectangle stack = [] max_area = 0 heights.append(0) # Append a 0 to pop all remaining bars in the stack at the end for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) return max_area"},{"question":"Find the Longest Increasing Subsequence Given an array of integers, write a function that returns the length of the longest subsequence which is strictly increasing. A subsequence can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Your task is to implement a class that handles finding the longest increasing subsequence from an input array of integers. Implement the following API: * The class takes an integer array as input during initialization. * Implement a method `longest_increasing_subsequence` which returns an integer - the length of the longest strictly increasing subsequence. As a simple example: Imagine you initialize an instance of the class with the following array: ```python lis_instance = LongestIncreasingSubsequence([10, 9, 2, 5, 3, 7, 101, 18]) ``` When you call the method `longest_increasing_subsequence`, it should return 4, which corresponds to the subsequence [2, 3, 7, 101]. Example: ```python lis_instance.longest_increasing_subsequence() == 4 ``` Explanation: * The longest increasing subsequence in the array [10, 9, 2, 5, 3, 7, 101, 18] could be [2, 3, 7, 101]. Hint: There is a solution that can run in time complexity of O(n log n), where n is the length of the array. Using a Dynamic Programming approach can lead to a simpler O(n^2) solution but it won’t scale efficiently for larger inputs. Hint Two: Think of using a list or array to keep track of the smallest possible end element of an increasing subsequences of various lengths found so far. Note: Your implementation should be able to handle arrays with up to 10,000 elements efficiently. Example class structure: ```python class LongestIncreasingSubsequence: def __init__(self, nums): self.nums = nums def longest_increasing_subsequence(self): # Your implementation here pass ```","solution":"class LongestIncreasingSubsequence: def __init__(self, nums): self.nums = nums def longest_increasing_subsequence(self): if not self.nums: return 0 subsequence = [] for num in self.nums: pos = self.binary_search(subsequence, num) if pos < len(subsequence): subsequence[pos] = num else: subsequence.append(num) return len(subsequence) def binary_search(self, subsequence, num): left, right = 0, len(subsequence) - 1 while left <= right: mid = (left + right) // 2 if subsequence[mid] < num: left = mid + 1 else: right = mid - 1 return left"},{"question":"You are tasked with developing a library\'s new inventory system. Your job is to write a method that will allow the library staff to enter an ISBN of a book and return its title. You will be given a list of dictionaries containing details of the current books available in the library. Your code must find the book with the matching ISBN and then return its title. If no book is found with the given ISBN, it should return \\"Book not available\\". The list of books is preloaded and can be referenced using the variable `books`. It uses the following structure: ```python books = [ {\'isbn\': \\"978-3-16-148410-0\\", \'title\': \\"To Kill a Mockingbird\\"}, {\'isbn\': \\"978-0-7432-7356-5\\", \'title\': \\"The Da Vinci Code\\"}, ...... ] ``` There are no duplicate ISBNs in the list and the ISBN passed in will be a single string. Write a function `find_book_by_isbn(isbn)` that takes in the ISBN as an argument and returns the corresponding book title or \\"Book not available\\" if no book is found.","solution":"books = [ {\'isbn\': \\"978-3-16-148410-0\\", \'title\': \\"To Kill a Mockingbird\\"}, {\'isbn\': \\"978-0-7432-7356-5\\", \'title\': \\"The Da Vinci Code\\"} # Add more books as needed ] def find_book_by_isbn(isbn): Returns the title of the book for the given ISBN. If no book is found, returns \\"Book not available\\". for book in books: if book[\'isbn\'] == isbn: return book[\'title\'] return \\"Book not available\\""},{"question":"To help with data analysis, your task is to write a function that will determine the frequency of each character in a given string. The string will only contain lowercase alphabetical characters. This function should return a dictionary where the keys are the characters and the values are the frequencies of those characters. Ensure your function handles edge cases, such as an empty string, and returns an empty dictionary in such cases. The function should also be designed efficiently to handle long strings. A few examples: - char_frequency(\\"hello\\") will return: `{\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1}` - char_frequency(\\"banana\\") will return: `{\'b\': 1, \'a\': 3, \'n\': 2}` - char_frequency(\\"\\") will return: `{}` Remember to perform input validation to ensure the input string only contains lowercase alphabetical characters. If the input is invalid, the function should return \\"Invalid input\\". Here are some examples of invalid inputs: - char_frequency(\\"Hello123\\") will return: \\"Invalid input\\" - char_frequency(\\"Hello!\\") will return: \\"Invalid input\\"","solution":"def char_frequency(s): Returns the frequency of each character in the given string. Parameters: s (str): The input string containing only lowercase alphabetical characters. Returns: dict: A dictionary with characters as keys and their frequencies as values if input is valid. str: \\"Invalid input\\" if the input string contains characters other than lowercase alphabetical characters. if any(c < \'a\' or c > \'z\' for c in s): return \\"Invalid input\\" frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"You are managing a team of software developers building a web application. To optimize the application, you want to implement a caching mechanism that minimizes redundant calls to an expensive computation function. The function you need to optimize called `expensive_function(x: int) -> int` takes an integer input and returns an integer output after a time-consuming computation. Your goal is to write a caching decorator `with_cache` that can be applied to any function to cache its results. The cache should store up to a certain number of results, beyond which the oldest cached result should be removed (following an LRU: Least Recently Used cache eviction policy). The decorator should be applied to `expensive_function` such that the repeated calls with the same arguments return the result from the cache rather than re-executing the expensive function. Implement the `with_cache` decorator and a modified `expensive_function` such that: 1. It accepts a single integer input, `x`. 2. It uses the `with_cache` decorator to cache results. 3. The cache should store a maximum of 5 results. 4. On subsequent calls with the same input, the cached result should be returned. You can assume the underlying `expensive_function` logic may involve complex computations such as factoring large numbers, performing matrix multiplications, or other workloads that represent significant computational effort. **Function Signature:** ```python def with_cache(func: Callable[[int], int]) -> Callable[[int], int]: # your code here @with_cache def expensive_function(x: int) -> int: # assume this function performs an expensive computation pass # Example of usage: result = expensive_function(10) # This will compute the result repeat_result = expensive_function(10) # This should return cached result result = expensive_function(20) # New computation result = expensive_function(10) # Should still use cached result ``` **Example:** ```python # assume expensive_function is defined as # def expensive_function(x: int) -> int: # time.sleep(2) # Simulate a delay # return x * x # Example of some expensive operation print(expensive_function(2)) # Should compute and return 4 print(expensive_function(2)) # Should return cached result 4 without delay print(expensive_function(3)) # Should compute and return 9 print(expensive_function(4)) # Should compute and return 16 print(expensive_function(5)) # Should compute and return 25 print(expensive_function(6)) # Should compute and return 36 print(expensive_function(2)) # Since cache size is 5, and this was the oldest, it should re-compute and return 4 ```","solution":"from collections import OrderedDict def with_cache(func): cache = OrderedDict() max_cache_size = 5 def wrapper(x): if x in cache: # Move to the end to indicate recent use cache.move_to_end(x) return cache[x] result = func(x) cache[x] = result if len(cache) > max_cache_size: # Pop the first item (least recently used) cache.popitem(last=False) return result return wrapper @with_cache def expensive_function(x): # Placeholder for an expensive computation return x * x"},{"question":"# Task Given an integer `n`, return the product of all the prime numbers less than or equal to `n`. # Example For `n = 10`, the result should be `210` Since `2 * 3 * 5 * 7 = 210` For `n = 5`, the result should be `30` Since `2 * 3 * 5 = 30` For `n = 2`, the result should be `2` Since `2` is the only prime number less than or equal to `2`. # Input/Output - `[input]` integer `n` An integer `1 ≤ n ≤ 200`. - `[output]` an integer The product of all the prime numbers less than or equal to `n`.","solution":"def is_prime(num): Returns True if num is a prime number. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def product_of_primes(n): Returns the product of all prime numbers less than or equal to n. product = 1 for i in range(2, n + 1): if is_prime(i): product *= i return product"},{"question":"Sarah is organizing a charity run and needs to ensure that each runner can complete their chosen distance. She has M energy gels that she can distribute to the runners to increase their stamina. Each energy gel provides a specific stamina boost and has a specific cost. Sarah wants to know the minimum total cost to distribute the energy gels so that each runner can complete their chosen distance. Each runner can use multiple energy gels, but a runner can only use the gels that are distributed to them. -----Input----- The first line contains two integers N (1 leq N leq 10^5), representing the number of runners, and M (1 leq M leq 10^5), representing the number of available energy gels. The second line contains N integers D[i] (1 leq D[i] leq 10^9) separated by a single space representing the distance each runner needs to run. The third line contains N integers S[i] (1 leq S[i] leq 10^9) separated by a single space representing the current stamina of each runner. The fourth line contains M integers B[j] (1 leq B[j] leq 10^9) separated by a single space representing the stamina boost each energy gel provides. The fifth line contains M integers C[j] (1 leq C[j] leq 10^9) separated by a single space representing the cost of each energy gel. -----Output----- One integer representing the minimal total cost to distribute the energy gels so that each runner can complete their chosen distance. If there is no way to accomplish this, output -1. -----Examples----- Input 3 3 10000 20000 15000 5000 10000 7500 1000 5000 7500 15 10 8 Output 33 Input 2 2 30000 25000 15000 12000 5000 7500 20 25 Output 45 Input 2 1 30000 25000 15000 12000 10000 30 Output -1 -----Note----- First example: Sarah can distribute the first energy gel to the first runner and the third energy gel to the second runner. These runners will then have enough stamina to complete their distances. The third runner requires no additional energy gels. The total cost is 15 + 18 = 33. Second example: Sarah can distribute the energy gels in such a way that both runners can complete their distances. The total cost is 20 + 25 = 45. Third example: Sarah only has one energy gel, which is not sufficient for the runners to complete their respective distances.","solution":"def min_cost_to_distribute_gels(N, M, D, S, B, C): import heapq requirements = [] for i in range(N): if S[i] < D[i]: requirements.append((D[i] - S[i], i)) if not requirements: return 0 requirements.sort(reverse=True) gels = sorted(zip(B, C)) heap = [] idx = 0 total_cost = 0 for req, runner in requirements: while idx < M and gels[idx][0] <= req: heapq.heappush(heap, gels[idx][1]) idx += 1 if not heap: return -1 total_cost += heapq.heappop(heap) return total_cost"},{"question":"You are given two arrays `arr1` and `arr2` of integers. The goal is to create a new array that contains the elements of `arr1` and `arr2`, but in reverse order starting from the largest common element among the two arrays if it exists. If there are no common elements, simply concatenate `arr2` to `arr1` in reverse order separately. For example: - If `arr1 = [3, 4, 2, 9]` and `arr2 = [8, 4, 10]`, the largest common element is 4. Thus the new array would be `[10, 4, 8, 9, 2, 4, 3]`. - If `arr1 = [1, 5, 7]` and `arr2 = [2, 6, 7, 11]`, the largest common element is 7. Thus the new array would be `[11, 7, 6, 2, 7, 5, 1]`. - If `arr1 = [1, 3, 5]` and `arr2 = [2, 4, 6]`, there is no common element. Thus the new array would be `[6, 4, 2, 5, 3, 1]`. Your task is to write the function `mergeAndReverseOnCommon()` that takes in two arrays `arr1` and `arr2` and returns the merged and reversed array as described above. ```python def mergeAndReverseOnCommon(arr1, arr2): # Your implementation here pass ``` Write tests cases for different scenarios including: 1. Arrays with a common element. 2. Arrays without a common element. 3. Arrays having multiple common elements. 4. One or both arrays being empty.","solution":"def mergeAndReverseOnCommon(arr1, arr2): Merges two arrays in reverse order starting from the largest common element if it exists. If there are no common elements, concatenates arr2 to arr1 in reverse order separately. common_elements = set(arr1) & set(arr2) if common_elements: largest_common = max(common_elements) return arr2[::-1] + arr1[::-1] else: return arr2[::-1] + arr1[::-1]"},{"question":"=====Function Descriptions===== itertools.permutations(iterable[, r]) This method returns successive r-length permutations of elements in the iterable. If r is not specified or is None, then r defaults to the length of the iterable, and all possible full-length permutations are generated. Permutations are generated in lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in sorted order. Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat permutations. Example Code >>> from itertools import permutations >>> print(list(permutations(\'ABCD\', 2))) [(\'A\', \'B\'), (\'A\', \'C\'), (\'A\', \'D\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'B\', \'D\'), (\'C\', \'A\'), (\'C\', \'B\'), (\'C\', \'D\'), (\'D\', \'A\'), (\'D\', \'B\'), (\'D\', \'C\')] >>> print(list(permutations(range(3)))) [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)] =====Problem Statement===== Given a string s and an integer r, generate all possible permutations of the string of length r. =====Input Format===== The first line contains a string s. The second line contains an integer r. =====Constraints===== 1≤len(s)≤10 0≤r≤len(s) =====Output Format===== Print the permutations of the string s of length r in a lexicographically sorted list. Example Input ABCD 2 Output [(\'A\', \'B\'), (\'A\', \'C\'), (\'A\', \'D\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'B\', \'D\'), (\'C\', \'A\'), (\'C\', \'B\'), (\'C\', \'D\'), (\'D\', \'A\'), (\'D\', \'B\'), (\'D\', \'C\')]","solution":"from itertools import permutations def generate_permutations(s, r): Generate all possible permutations of string s of length r. Parameters: s (str): The input string. r (int): The length of each permutation. Returns: List[Tuple]: A list of tuples, each containing a permutation of length r. return list(permutations(s, r))"},{"question":"Write a function that takes an array of integers and returns the length of the longest contiguous subsequence where the difference between consecutive elements is exactly 1. For example, `longest_consecutive_subsequence([1, 2, 3, 4, 5, 6, 9, 10, 11])` should return `6`, because `[1, 2, 3, 4, 5, 6]` is the longest contiguous subsequence with consecutive elements differing by 1. The array is guaranteed to have at least one element. Good luck!","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest contiguous subsequence where the difference between consecutive elements is exactly 1. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] - arr[i - 1] == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a peaceful village, there is an old clock tower whose clock stopped working a long time ago. The villagers have decided to repair the clock, but they need to set it to the correct time. The clock has two hands: hour and minute, but no numbers on the dial. Since the old clock doesn\'t have any functional components, they resorted to determining the time through manual calculations. To help them set the time correctly, you are tasked with writing a program that determines the smaller angle between the hour and minute hands of the clock at a given time. The time format will be given as H:M, where H is the hour (in the range 1-12) and M is the minute (in the range 0-59). The angle should be measured in degrees. -----Input----- The first line of input contains an integer N, the number of test cases. Each of the following N lines contains one test case in the format \\"H:M\\". -----Output----- For each test case, output the smaller angle in degrees. -----Constraints----- 1 ≤ N ≤ 1000 1 ≤ H ≤ 12 0 ≤ M ≤ 59 -----Sample Input----- 3 3:00 6:15 12:45 -----Sample Output----- 90 97.5 112.5 -----Explanation----- In the first test case, the hour hand is at 3 and the minute hand is at 12, forming a right angle, which is 90 degrees. In the second test case, the minute hand is at 3 and the hour hand moves 1/4th of the way between 6 and 7, leading to a smaller angle of 97.5 degrees. In the third test case, the minute hand is at 9 and the hour hand moves 3/4th of the way between 12 and 1, resulting in a smaller angle of 112.5 degrees.","solution":"def calculate_smaller_angle(h, m): # Calculate the positions of the hour and minute hands in degrees hour_angle = (h % 12) * 30 + (m / 60) * 30 minute_angle = m * 6 # Calculate the absolute difference between the two angles angle = abs(hour_angle - minute_angle) # Return the smaller angle of the two possible angles return min(angle, 360 - angle) def get_smaller_angles(times): results = [] for time in times: h, m = map(int, time.split(\':\')) results.append(calculate_smaller_angle(h, m)) return results"},{"question":"Implement a FileSystem class to simulate a simple in-memory file system with directories and files. FileSystem class should support the following methods: FileSystem() Initializes the file system with a root directory \\"\'/\'\\". List<String> ls(String path) Returns a list of files and directories in the current directory given by path. The result should be lexicographically sorted. void mkdir(String path) Makes a new directory according to the given path. If the path already exists, do nothing. void addContentToFile(String filePath, String content) Adds content to the file at filePath. If the file does not exist, a new file will be created. String readContentFromFile(String filePath) Returns the content in the file at filePath. Example: Input: [\\"FileSystem\\",\\"mkdir\\",\\"addContentToFile\\",\\"ls\\",\\"readContentFromFile\\",\\"addContentToFile\\",\\"readContentFromFile\\"] [[],[\\"/a/b/c\\"],[\\"/a/b/c/d\\",\\"hello\\"],[\\"/a/b\\"],[\\"/a/b/c/d\\"],[\\"/a/b/c/d\\",\\" world\\"],[\\"/a/b/c/d\\"]] Output: [null,null,null,[\\"c\\"],\\"hello\\",null,\\"hello world\\"] Explanation: FileSystem fileSystem = new FileSystem(); fileSystem.mkdir(\\"/a/b/c\\"); // Make directory /a/b/c fileSystem.addContentToFile(\\"/a/b/c/d\\", \\"hello\\"); // Create a file /a/b/c/d with content \\"hello\\" fileSystem.ls(\\"/a/b\\"); // Return [\\"c\\"] since /a/b only contains one directory \\"c\\" fileSystem.readContentFromFile(\\"/a/b/c/d\\"); // Return \\"hello\\" fileSystem.addContentToFile(\\"/a/b/c/d\\", \\" world\\"); // Append \\" world\\" to the file /a/b/c/d fileSystem.readContentFromFile(\\"/a/b/c/d\\"); // Return \\"hello world\\" Constraints: - The path always starts with a slash \'/\'. - The path only contains lower-case English letters, slashes \'/\' and dots \'.\'. - A path is a string referring to a file or a directory. - At most 3000 calls will be made to any method. - You can assume all input is valid.","solution":"class FileSystem: def __init__(self): self.root = {\'isFile\': False, \'content\': {}, \'data\': \'\'} def ls(self, path): node = self._traverse(path) if node[\'isFile\']: return [path.split(\'/\')[-1]] return sorted(node[\'content\'].keys()) def mkdir(self, path): self._traverse(path, create=True) def addContentToFile(self, filePath, content): node = self._traverse(filePath, create=True) node[\'isFile\'] = True node[\'data\'] += content def readContentFromFile(self, filePath): node = self._traverse(filePath) return node[\'data\'] def _traverse(self, path, create=False): node = self.root if path == \'/\': return node parts = path.split(\'/\')[1:] for part in parts: if part not in node[\'content\']: if create: node[\'content\'][part] = {\'isFile\': False, \'content\': {}, \'data\': \'\'} else: raise FileNotFoundError(f\'Path {path} does not exist.\') node = node[\'content\'][part] return node"},{"question":"Jane loves palindromic sequences. She wants to generate a sequence of numbers that are palindromes from 1 up to a given number **(n)** where **n** is a positive integer. Help Jane by creating a function called **generate_palindromes** that will return a list of all the palindromic numbers from 1 to **n** inclusive. Constraints: * If **n < 1**, return an empty list. * The output list should be in ascending order. Examples: generate_palindromes(10) Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] generate_palindromes(22) Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22] generate_palindromes(101) Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101]","solution":"def generate_palindromes(n): Returns a list of palindromic numbers from 1 to n inclusive. if n < 1: return [] palindromes = [] for num in range(1, n + 1): if str(num) == str(num)[::-1]: palindromes.append(num) return palindromes"},{"question":"You are given a string containing a sequence of integers separated by commas (e.g., \\"1,2,3,4,5\\"). Your task is to implement a function that reverses the sequence of integers but does not reverse the integers themselves. The function should handle both positive and negative integers. Write a function that takes a string and returns a new string with the integers reversed in sequence. Function signature: `string reverse_sequence(string s);` Example 1: Input: s = \\"1,2,3,4,5\\" Output: \\"5,4,3,2,1\\" Example 2: Input: s = \\"-1,20,-300,4000,5\\" Output: \\"5,4000,-300,20,-1\\" Example 3: Input: s = \\"10,-20,30,-40,50,-60\\" Output: \\"-60,50,-40,30,-20,10\\" Note: - The input string will always contain at least one integer and each integer will be separated by a single comma. - There are no leading or trailing commas. - The integers in the input can be any valid 32-bit signed integers.","solution":"def reverse_sequence(s): Takes a string containing a sequence of integers separated by commas and returns a new string with the integers reversed in sequence but not reversed themselves. # Split the input string by commas to get individual integers as strings integer_list = s.split(\',\') # Reverse the list of integer strings integer_list.reverse() # Join the reversed list back into a single string with commas reversed_sequence = \',\'.join(integer_list) return reversed_sequence"},{"question":"Anagram Detector An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function to determine if one string is an anagram of another. Task The function should take two strings, and return `true` if one string is an anagram of the other, and `false` otherwise. The format: A function passing two strings, to determine if one is an anagram of the other. ```function isAnagram(str1, str2){ return true || false }``` Examples isAnagram(\\"listen\\", \\"silent\\") --> true Both strings contain the same letters with the same frequency, arranged differently. ---------------------------------------------------------- isAnagram(\\"Hello\\", \\"Olelh\\") --> true Both strings become \\"hello\\" after case normalization and reorganization, hence are anagrams. -------------------------------------------------------------------- isAnagram(\\"apple\\", \\"pale\\") --> false The second string lacks one \\"p\\" and one \\"l\\", so they are not anagrams. -------------------------------------------------------------------- isAnagram(\\"schoolmaster\\", \\"theclassroom\\") --> true Both strings, when rearranged, form identical letters and frequencies. -------------------------------------------------------------------- isAnagram(\\"astronomer\\", \\"moon starer\\") --> true Despite spaces, both strings contain the same letters in the same numbers. Remember to consider spaces and case differences as needed, keeping in mind to normalize the comparison.","solution":"def isAnagram(str1, str2): Returns True if str1 is an anagram of str2, False otherwise. # Normalize the strings: Remove spaces and convert to lower case normalized_str1 = \'\'.join(str1.split()).lower() normalized_str2 = \'\'.join(str2.split()).lower() # Sort the characters and compare return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Write a function `encode_roman(num: int) -> str` that converts a given integer to its corresponding Roman numeral representation. The function should handle integers from 1 to 3999 (inclusive). Roman numerals consist of the following symbols: - `I` - 1 - `V` - 5 - `X` - 10 - `L` - 50 - `C` - 100 - `D` - 500 - `M` - 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Examples: ```python encode_roman(3) == \'III\' encode_roman(4) == \'IV\' encode_roman(9) == \'IX\' encode_roman(58) == \'LVIII\' encode_roman(1994) == \'MCMXCIV\' ```","solution":"def encode_roman(num: int) -> str: Converts an integer number to a Roman numeral representation. Handles numbers from 1 to 3999 (inclusive). roman_numerals = [ (\'M\', 1000), (\'CM\', 900), (\'D\', 500), (\'CD\', 400), (\'C\', 100), (\'XC\', 90), (\'L\', 50), (\'XL\', 40), (\'X\', 10), (\'IX\', 9), (\'V\', 5), (\'IV\', 4), (\'I\', 1) ] result = [] for roman, value in roman_numerals: while num >= value: result.append(roman) num -= value return \'\'.join(result)"},{"question":"Write a function `find_min_fuel` that calculates the minimum amount of fuel required for a spaceship to travel a given distance. The spaceship consumes fuel at different rates depending on the distance traveled: - For the first 100 units of distance, the spaceship consumes 1 unit of fuel per distance unit. - For the next 200 units of distance, the spaceship consumes 1.5 units of fuel per distance unit. - For any distance beyond 300 units, the spaceship consumes 2 units of fuel per distance unit. The function receives the distance to be traveled as input and returns the minimum amount of fuel required. The distance will always be a positive integer. Example: ```python find_min_fuel(50) # should return 50 find_min_fuel(150) # should return 175 find_min_fuel(350) # should return 500 ```","solution":"def find_min_fuel(distance): Calculate the minimum amount of fuel required for the spaceship to travel a given distance. Parameters: distance (int): The distance to be traveled. Returns: int: The minimum amount of fuel required. fuel = 0 if distance <= 100: fuel = distance * 1 elif distance <= 300: fuel = 100 * 1 + (distance - 100) * 1.5 else: fuel = 100 * 1 + 200 * 1.5 + (distance - 300) * 2 return fuel"},{"question":"# RECTANGLE-FREE GRID Given a 2D grid of size `m x n`, determine if the grid contains any rectangle that is formed by four corners with the value of 1. A rectangle is valid if and only if it includes exactly four \'1\'s provided in the input grid\'s cells. Write a function `has_rectangle(grid: List[List[int]]) -> bool` that takes a 2D list representing the grid as input and returns `True` if the grid contains any rectangle following these conditions, otherwise, return `False`. CONSTRAINTS - The grid dimensions `m` and `n` are both between 1 and 100 (inclusive). - The grid values consist only of 0s and 1s. EXAMPLE ```python has_rectangle([[1, 0, 1], [0, 1, 0], [1, 0, 1]]) ``` The function should return `True` because the grid contains a rectangle at coordinates (0, 0), (0, 2), (2, 0), and (2, 2). ```python has_rectangle([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) ``` The function should return `False` because there are no four corners forming a rectangle containing only \'1\'s.","solution":"from typing import List def has_rectangle(grid: List[List[int]]) -> bool: Determines if the grid contains any rectangles formed by four corners with value of 1. Parameters: grid (List[List[int]]): The input grid of 0s and 1s. Returns: bool: True if at least one rectangle exists, otherwise False. if not grid or len(grid) < 2 or len(grid[0]) < 2: # Edge case: grid too small for any rectangle return False m, n = len(grid), len(grid[0]) # Check every combination of rows for r1 in range(m): for r2 in range(r1 + 1, m): # Check every combination of columns for c1 in range(n): if grid[r1][c1] == 1 and grid[r2][c1] == 1: for c2 in range(c1 + 1, n): if grid[r1][c2] == 1 and grid[r2][c2] == 1: return True return False"},{"question":"A storage facility needs efficient ways to locate and retrieve items stored in its many shelves. Each shelf has a certain number of identical compartments. Your task is to create an algorithm that helps in identifying the shelf and compartment number for a given item based on a simple numbering system. Shelves are numbered from 1 to S, and compartments within each shelf are numbered from 1 to C. Items are stored sequentially starting from the first compartment of the first shelf, moving to the second compartment of the first shelf, and so on, before moving to the first compartment of the next shelf. Given the total number of shelves (S), the number of compartments per shelf (C), and the item\'s position in this sequence, determine the shelf number and compartment number for the given item. -----Input----- The first line contains two integers S and C. The second line contains a single integer P which represents the position of the item in the sequence. -----Output----- Output two integers representing the shelf number and the compartment number where the item is located. -----Constraints----- - 1 ≤ S ≤ 1000 - 1 ≤ C ≤ 1000 - 1 ≤ P ≤ S * C -----Example----- Input: 3 4 8 Output: 2 4 -----Explanation----- Example case 1. There are 3 shelves each with 4 compartments. Item 8 is located in the 2nd shelf\'s 4th compartment. The items distribution is: Shelf 1: [1, 2, 3, 4] Shelf 2: [5, 6, 7, 8] Shelf 3: [9, 10, 11, 12]","solution":"def find_item_location(S, C, P): Determines the shelf number and compartment number of the given item. Parameters: S (int): Number of shelves. C (int): Number of compartments per shelf. P (int): Position of the item. Returns: tuple: (shelf_number, compartment_number) shelf_number = (P - 1) // C + 1 compartment_number = (P - 1) % C + 1 return shelf_number, compartment_number"},{"question":"# Find the First Non-repeating Character Given a string, find the first character that does not repeat. If all characters are repeating, return an empty string. Example: ``` Input: \\"swiss\\" Output: \\"w\\" ``` ``` Input: \\"effort\\" Output: \\"e\\" ``` ``` Input: \\"aabbcc\\" Output: \\"\\" ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating, returns an empty string. # Create a dictionary to count the occurrences of each character char_count = {} # Count the characters in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character is found, return an empty string return \\"\\""},{"question":"A string is considered balanced when every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. Write a function to determine if a given string is balanced and properly nested. You can assume the input string consists only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', without any whitespace or other characters. Examples: Input: \\"([]){}\\" Output: true Explanation: The string \\"([]){}\\" is balanced because every opening parenthesis has a corresponding closing parenthesis and the order of parentheses is correct. Input: \\"([)]\\" Output: false Explanation: The string \\"([)]\\" is not balanced because the order of parentheses is incorrect. Input: \\"{[()]}\\" Output: true Explanation: The string \\"{[()]}\\" is balanced because every opening parenthesis has a corresponding closing parenthesis and the order of parentheses is correct. Follow up: Could you solve it using only one pass through the string? Note: Your solution should have a linear time complexity, O(n), where n is the length of the input string.","solution":"def is_balanced(s): Determines if a given string of parentheses is balanced and properly nested. :param s: Input string consisting only of \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is balanced and properly nested, False otherwise stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False else: return False return stack == []"},{"question":"Write a function `is_anagram(str1, str2)` that determines whether the two input strings **str1** and **str2** are anagrams of each other. The function should return `True` if the strings are anagrams, and `False` if they are not. An anagram is a word or phrase formed by rearranging the letters of another, such as `listen` and `silent`. Your function should: - Ignore white spaces. - Be case-insensitive. Examples: - is_anagram(\\"Listen\\", \\"Silent\\") -> True - is_anagram(\\"Hello\\", \\"Olelh\\") -> True - is_anagram(\\"Dormitory\\", \\"Dirty room\\") -> True - is_anagram(\\"The eyes\\", \\"They see\\") -> True - is_anagram(\\"Hello\\", \\"World\\") -> False","solution":"def is_anagram(str1, str2): Determines whether str1 and str2 are anagrams of each other. Ignores white spaces and is case-insensitive. Args: str1 (str): The first input string. str2 (str): The second input string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Remove white spaces and convert to lowercase str1 = \'\'.join(str1.split()).lower() str2 = \'\'.join(str2.split()).lower() # Sort characters and compare return sorted(str1) == sorted(str2)"},{"question":"# Task Alice loves playing with arrays, but she got tired of manually generating pairs with the maximum sum. She needs your help with this. Given an array of integers, find a pair of elements that produce the highest possible sum. - Note that the two elements forming the pair must be different, meaning their indices are different. # Example For `array = [1, 4, 3, 2]`, the output should be `[4, 3]` The sum of 4 and 3 is 7, which is the maximum possible sum for a pair from this array. For `array = [10, 20, 30, 5]`, the output should be `[20, 30]` The sum of 20 and 30 is 50, which is the maximum possible sum for a pair from this array. # Input/Output - `[input]` array of integers `array` An array of integers. It is guaranteed that the array has at least two distinct elements. Constraints: 2 ≤ array.length ≤ 10^5, -10^3 ≤ array[i] ≤ 10^3 - `[output]` an array of integers A pair of integers with the highest possible sum. If there are multiple pairs with the same maximum sum, return any one of them.","solution":"def max_sum_pair(array): Finds a pair of elements in the array that produce the highest possible sum. if len(array) < 2: raise ValueError(\\"Array must contain at least 2 elements\\") first_max = -float(\'inf\') second_max = -float(\'inf\') for num in array: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return [first_max, second_max]"},{"question":"Write a function to merge two sorted lists into a single sorted list. The function should take two lists of integers as input and return a new list containing all the integers from the input lists, sorted in non-decreasing order. For example, given the lists `list1 = [1, 3, 5]` and `list2 = [2, 4, 6]`, your function should return `[1, 2, 3, 4, 5, 6]`. The function should handle cases where one or both of the input lists are empty, and still return a correctly sorted list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: - list1: A sorted list of integers. - list2: A sorted list of integers. Returns: - A new list containing all integers from list1 and list2, sorted in non-decreasing order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"# Task You have been given an array of non-negative integers representing a height map of blocks, where the width of each block is `1`. You need to compute how much water it can trap after raining. # Inputs: - `heights`: a list of non-negative integers representing the height of blocks. # Output: - An integer representing the total units of water that can be trapped. The height map blocks are represented as bars in a histogram-style chart. Each bar\'s width is `1`. Water trapped is calculated by the difference between the height of the current bar and the previous bars, considering the height of the potential boundary bars that can hold water. # Example For `heights = [0,1,0,2,1,0,1,3,2,1,2,1]`, the output should be `6`. For `heights = [4,2,0,3,2,5]`, the output should be `9`. # Explanation: - For the first example: ``` | | | _|_|_|_| ``` The total units of water that can be trapped are `6`. - For the second example: ``` | | ||| _|__|_||| ``` The total units of water that can be trapped are `9`. The output is the maximum possible volume of trapped water based on the histogram representation of the input heights.","solution":"def trap_water(heights): Calculate the total units of water that can be trapped. :param heights: List of non-negative integers representing the height map of blocks. :return: Integer representing the total units of water that can be trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Given a string S, Chef wants to count the number of substrings that are palindromes. Recall that a palindrome is a string that reads the same forward and backward. -----Input----- The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains a string S for that test case. -----Output----- For each test case, output a single line containing the count of palindromic substrings in S. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 (|S| denotes the length of the string S) - S consists only of lowercase English letters. -----Example----- Input: 2 abc aaa Output: 3 6 -----Explanation----- First Example: The palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". Second Example: The palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string s. n = len(s) count = 0 # Create a 2D table to store the palindromic status of substrings dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True count += 1 # Check for substring of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def process_test_cases(test_cases): Processes multiple test cases and returns the result as a list. results = [] for s in test_cases: result = count_palindromic_substrings(s) results.append(result) return results"},{"question":"Write a function that outputs the numbers from 1 to 100. However, for multiples of 3, it should output \\"Fizz\\" instead of the number and for multiples of 5, it should output \\"Buzz\\". For numbers which are multiples of both 3 and 5, output \\"FizzBuzz\\". Example Output: ``` 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz ... ```","solution":"def fizz_buzz(): Returns a list with the numbers from 1 to 100 transformed based on the FizzBuzz rules: - Multiples of 3 are replaced with \\"Fizz\\". - Multiples of 5 are replaced with \\"Buzz\\". - Multiples of both 3 and 5 are replaced with \\"FizzBuzz\\". result = [] for num in range(1, 101): if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(num)) return result"},{"question":"The manager of a library wants to develop a program that assists librarians in organizing books on shelves. Each book has a unique ISBN number, and the manager has a specific order in which the books should appear on the shelf. You are required to write a program that, given an initial arrangement of books on the shelf and a desired order, determines the minimum number of adjacent swaps required to achieve the desired arrangement. -----Input:----- - The first line will contain an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of books. - The second line contains N space-separated integers representing the initial arrangement of the books. - The third line contains N space-separated integers representing the desired order of the books. -----Output:----- For each test case, output the minimum number of adjacent swaps needed to arrange the books in the desired order. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq ISBNs leq 1000000 -----Sample Input:----- 2 4 4 3 2 1 1 2 3 4 3 3 1 2 1 2 3 -----Sample Output:----- 6 2 -----EXPLANATION:----- For the first test case, swapping adjacent books as follows achieves the desired order: 1. Swap (4, 3): 3 4 2 1 2. Swap (4, 2): 3 2 4 1 3. Swap (4, 1): 3 2 1 4 4. Swap (3, 2): 2 3 1 4 5. Swap (3, 1): 2 1 3 4 6. Swap (2, 1): 1 2 3 4 For the second test case, swapping adjacent books as follows achieves the desired order: 1. Swap (3, 1): 1 3 2 2. Swap (3, 2): 1 2 3","solution":"def min_adjacent_swaps(initial, desired): Returns the minimum number of adjacent swaps required to transform the initial list to the desired list. position = {value: i for i, value in enumerate(initial)} swaps = 0 for i in range(len(desired)): while position[desired[i]] != i: pos = position[desired[i]] # Swap desired[i] with the element at pos-1. initial[pos], initial[pos - 1] = initial[pos - 1], initial[pos] # Update positions position[initial[pos]] = pos position[initial[pos - 1]] = pos - 1 swaps += 1 return swaps def process_test_cases(T, test_cases): results = [] for case in test_cases: N, initial, desired = case result = min_adjacent_swaps(initial, desired) results.append(result) return results"},{"question":"You are given a string S of length N consisting of lowercase English letters. You need to determine the maximum number of distinct substrings of the string S that can be formed by rearranging the characters of S. Since the number of distinct substrings can be very large, output the result modulo 10^9 + 7. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string S. -----Output----- For each test case, print a single line containing one integer ― the number of distinct substrings modulo 10^9 + 7. -----Constraints----- - 1 le T le 1000 - 1 le N le 1000 -----Example Input----- 2 ab abc -----Example Output----- 4 15","solution":"def max_distinct_substrings(s): Determines the maximum number of distinct substrings of string s after rearranging its characters. n = len(s) MOD = 10**9 + 7 # The number of distinct substrings is given by sum of first N natural numbers total_substrings = (n * (n + 1) // 2) % MOD return total_substrings"},{"question":"Introduction A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string, we want to check if it can be rearranged to form a palindrome. For instance, \\"civic\\" is already a palindrome, \\"ivicc\\" can be rearranged to form \\"civic\\", but \\"hello\\" cannot be rearranged to form a palindrome. Task Write a function `canFormPalindrome` that accepts a string `s` and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Input - A single string `s` with a length between 1 and 1000, containing only lowercase English letters. # Output - A boolean value: `True` if the input string can be rearranged to form a palindrome, `False` otherwise. # Example ```python print(canFormPalindrome(\\"civic\\")) # True print(canFormPalindrome(\\"ivicc\\")) # True print(canFormPalindrome(\\"hello\\")) # False ``` # Constraints - The input string will only contain lowercase English letters. - The length of the string will be between 1 and 1000.","solution":"def canFormPalindrome(s): Returns True if the string s can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find how many characters have an odd count odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, # there should be at most one character with an odd count return odd_counts <= 1"},{"question":"Write a function that receives a list of strings and returns a list of integers representing the length of each string. However, any string that contains the letter \\"x\\" should be skipped. The function should preserve the order of the remaining strings\' lengths. For example: ```python Input: [\\"hello\\", \\"world\\", \\"example\\", \\"python\\"] Output: [5, 5, 6] Explanation: The string \\"example\\" is skipped because it contains the letter \'x\'. ``` A few more examples: ```python Input: [\\"test\\", \\"text\\", \\"code\\", \\"examine\\"] Output: [4, 4] Explanation: The strings \\"text\\" and \\"examine\\" are skipped because they contain the letter \'x\'. ``` ```python Input: [\\"alpha\\", \\"beta\\", \\"gamma\\"] Output: [5, 4, 5] Explanation: None of the strings contain the letter \'x\', so none are skipped. ``` ```python Input: [\\"xenon\\", \\"complex\\", \\"max\\"] Output: [] Explanation: All strings contain the letter \'x\', so all are skipped, resulting in an empty list. ``` Your implementation should ensure the function correctly filters out strings containing \'x\' and calculates the length of the remaining strings.","solution":"def length_of_strings(strings): Returns a list of integers representing the length of each string in the input list, except for those strings that contain \'x\'. return [len(s) for s in strings if \'x\' not in s]"},{"question":"You have been tasked with simulating a bank\'s transaction validation system. The bank maintains a ledger where every transaction is a deposit or a withdrawal to an account. Each transaction is described by an integer, where positive values indicate deposits and negative values indicate withdrawals. When a series of transactions is given, your task is to determine the final balance of the account, starting from an initial balance of zero, and to verify if the account has ever gone into overdraft at any point during the series. An overdraft occurs if the balance becomes negative at any point. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a series of space-separated integers representing transactions. -----Output:----- For each transaction series, output the final balance as an integer followed by a space and \\"YES\\" if the account has ever gone into overdraft during the series, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - Each transaction series contains at least 1 and at most 100,000 transactions. - Each transaction value x is such that -10^6 leq x leq 10^6 -----Sample Input:----- 3 500 -300 200 -1000 300 100 200 -50 -25 75 -200 100 -100 -----Sample Output:----- -300 YES 300 NO -200 YES","solution":"def process_transactions(transactions): Process a series of transactions and determine the final balance and overdraft status. Parameters: transactions (list of int): List of integer transactions (positive for deposit, negative for withdrawal) Returns: tuple: Final balance and \\"YES/NO\\" indicating if there was an overdraft balance = 0 overdraft_occurred = False for transaction in transactions: balance += transaction if balance < 0: overdraft_occurred = True return (balance, \\"YES\\" if overdraft_occurred else \\"NO\\") def main(input_lines): Main function to process multiple test cases of transactions from input lines. Parameters: input_lines (List[str]): List of input strings, with the first being the number of test cases and the subsequent lines being the transactions Returns: List[str]: List of output results for each test case, formatted as \\"balance YES/NO\\" T = int(input_lines[0]) results = [] for i in range(1, T + 1): transactions = list(map(int, input_lines[i].split())) balance, overdraft_status = process_transactions(transactions) results.append(f\\"{balance} {overdraft_status}\\") return results"},{"question":"Write a function that takes a string containing only digits from \'2\' to \'9\' and returns all possible letter combinations that the number could represent by following the T9 predictive text method on a traditional mobile phone. Example 1: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Explanation: 2 corresponds to [\\"a\\", \\"b\\", \\"c\\"] 3 corresponds to [\\"d\\", \\"e\\", \\"f\\"] Example 2: Input: \\"7\\" Output: [\\"p\\", \\"q\\", \\"r\\", \\"s\\"] Explanation: 7 corresponds to [\\"p\\", \\"q\\", \\"r\\", \\"s\\"] Example 3: Input: \\"47\\" Output: [\\"gp\\", \\"gq\\", \\"gr\\", \\"gs\\", \\"hp\\", \\"hq\\", \\"hr\\", \\"hs\\", \\"ip\\", \\"iq\\", \\"ir\\", \\"is\\"] Explanation: 4 corresponds to [\\"g\\", \\"h\\", \\"i\\"] 7 corresponds to [\\"p\\", \\"q\\", \\"r\\", \\"s\\"]","solution":"def letter_combinations(digits): Given a string containing digits from \'2\' to \'9\', returns all possible letter combinations that the phone number could represent. if not digits: return [] phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"The \\"EventManager\\" company is planning a large event where they need to assign n attendees to m available tables. Each attendee has constraints regarding which tables they can be assigned to. Each table can accommodate an unlimited number of attendees. Your task is to find out if it is possible to assign each attendee to a suitable table such that all constraints are met. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of attendees and the number of tables. Then n lines follow — each attendee\'s table constraints. At the beginning of the i-th line is an integer k_{i} (0 ≤ k_{i} ≤ m) — the number of tables the i-th attendee can sit at. Next, the i-th line contains k_{i} integers — t_{ij} (1 ≤ t_{ij} ≤ m) — the identifiers of tables the i-th attendee can sit at. It is guaranteed that all the identifiers in one list are distinct. Note that an attendee may have no table constraints. -----Output----- Print \\"YES\\" if it is possible to assign all attendees to tables according to their constraints, otherwise print \\"NO\\". -----Examples----- Input 3 4 2 1 2 2 2 3 1 4 Output YES Input 2 2 1 1 1 2 Output YES Input 3 3 1 1 1 2 0 Output NO -----Note----- In the first sample, it is possible to assign attendee 1 to table 1, attendee 2 to table 2, and attendee 3 to table 4. In the second sample, it is possible to assign attendee 1 to table 1 and attendee 2 to table 2. In the third sample, attendee 3 does not have any table constraints, making it impossible to assign them.","solution":"def can_assign_tables(n, m, constraints): Determines if it is possible to assign each attendee to a table such that all constraints are met. Parameters: - n (int): Number of attendees. - m (int): Number of tables. - constraints (list of list of int): List of constraints for each attendee. Returns: - str: \\"YES\\" if assignment is possible, otherwise \\"NO\\". # Check if any attendee has no possible tables for attendee in constraints: if not attendee: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n integers representing the heights of students standing in a line. You want to rearrange the students such that the difference in height between any two adjacent students is minimized. That is, you want to find a permutation of the list such that the maximum difference between heights of any two consecutive students in the permutation is as small as possible. Write a function to find any such permutation of the list. -----Input:----- The first line contains an integer n, denoting the number of students (1≤n≤105). The second line contains n integers h1,h2,…,hn, denoting the heights of the students (1≤hi≤109). -----Output:----- Output any permutation of the list such that the maximum difference between heights of any two consecutive students in the permutation is minimized. -----Constraints----- - 1≤n≤105 - 1≤hi≤109 -----Sample Input:----- 5 4 2 1 3 8 -----Sample Output:----- 1 2 3 4 8 -----Sample Input:----- 7 10 1 9 6 2 4 3 -----Sample Output:----- 1 2 3 4 6 9 10","solution":"def minimize_height_difference(n, heights): Rearranges the students such that the difference in height between any two adjacent students is minimized. sorted_heights = sorted(heights) return sorted_heights"},{"question":"Given an array of integers representing heights of people standing in a line, the goal is to sort the heights but maintaining the relative order of trees. Trees are represented with -1. *Parameters*: `heights` - array of integers containing heights and trees. *Example input*: ``` heights = [-1, 150, 190, 170, -1, -1, 160, 180] ``` *Output*: ``` [-1, 150, 160, 170, -1, -1, 180, 190] ``` # Constraints: - If a height is -1, it represents a tree and must remain in the same position. - Heights will always be positive integers (greater than 0). # Notes: * The order of the trees must not change. * Only the heights should be sorted, maintaining the same positions for -1. # Examples: ``` heights = [120, 180, -1, 160, -1, 150, 130] // return: [120, 130, -1, 150, -1, 160, 180] heights = [-1, -1, -1, -1, -1] // return: [-1, -1, -1, -1, -1] heights = [160, 140, 170, 150] // return: [140, 150, 160, 170] ``` Implement a function called `sortHeights` to achieve the desired output.","solution":"def sortHeights(heights): Sorts the heights but maintains the position of trees (-1). # Extract all heights that are not -1 only_heights = [height for height in heights if height != -1] # Sort the extracted heights only_heights.sort() # Create an iterator from the sorted heights height_iter = iter(only_heights) # Replace the non-tree positions in the original list with sorted heights sorted_heights = [next(height_iter) if height != -1 else -1 for height in heights] return sorted_heights"},{"question":"You are given an array of integers cards where cards[i] represents the value of the ith card. You are also given an integer k indicating the number of cards you can draw from the deck. In each turn, you can choose to draw one card from either the beginning or the end of the deck and add its value to your score. Your goal is to maximize your score by drawing exactly k cards. Return the maximum score you can achieve after drawing k cards. Example 1: Input: cards = [1, 2, 3, 4, 5, 6, 1], k = 3 Output: 12 Explanation: Draw the first card from the end (value = 1), then the last two cards from the beginning (values = 6 and 5). The maximum score is 1 + 6 + 5 = 12. Example 2: Input: cards = [2, 2, 2], k = 2 Output: 4 Explanation: Draw the first two cards from the beginning. The maximum score is 2 + 2 = 4. Example 3: Input: cards = [9, 7, 7, 9, 7, 7, 9], k = 7 Output: 55 Explanation: Draw all seven cards. The maximum score is 9 + 7 + 7 + 9 + 7 + 7 + 9 = 55. Constraints: 1 <= cards.length <= 10^5 1 <= cards[i] <= 10^4 1 <= k <= cards.length","solution":"def maxScore(cards, k): Returns the maximum score achievable by drawing exactly k cards. You can only draw from either the beginning or the end of the deck. # Initial score choosing first k cards from the start current_score = sum(cards[:k]) max_score = current_score # We move one card from the start to end until we exhaust k cards for i in range(1, k + 1): current_score += cards[-i] - cards[k - i] max_score = max(max_score, current_score) return max_score"},{"question":"Given a string consisting of lowercase English letters, you are to find the first non-repeating character in it and return its index. If it does not exist, return -1. -----Input----- The input contains a single string s (1 leqslant |s| leqslant 10^5) consisting of lowercase English letters. -----Output----- Print the index of the first non-repeating character in the string. If there isn\'t a non-repeating character, print -1. -----Examples----- Input leetcode Output 0 Input loveleetcode Output 2 Input aabb Output -1 -----Note----- In the first example, the first non-repeating character is the letter \'l\', which has an index of 0. In the second example, the first non-repeating character is \'v\', which is at index 2. In the third example, there are no characters that do not repeat, so the output is -1.","solution":"def first_uniq_char(s): Returns the index of the first non-repeating character in the string s. If there is no non-repeating character, return -1. # Dictionary to store frequency of each character char_count = {} # Pass 1: Count the frequency of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Pass 2: Find the index of the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index # If no non-repeating character is found, return -1 return -1"},{"question":"A game development company wants to create a new game that involves arranging tiles in a grid to form patterns. The grid has N rows and M columns, and each cell in the grid can either be empty or filled with a tile. The goal is to form the largest possible square of tiles, with all tiles in the square having the same color. You are given the colors of the tiles in the grid. Write a program to find the size of the largest square that can be formed with tiles of the same color. -----Input:----- - First line will contain T, the number of test cases. - Each test case has the following format: - First line contains two space-separated integers N and M representing the number of rows and columns in the grid. - Next N lines each contain M space-separated integers representing the colors of the tiles in the grid. -----Output:----- For each test case, output a single integer: the size of the largest square that can be formed with tiles of the same color. -----Constraints----- - 1 leq T leq 10 - 1 leq N, M leq 1000 - Colors of the tiles are represented by integers between 1 and 100. -----Sample Input:----- 2 4 5 1 2 2 3 3 1 2 2 3 3 4 4 4 4 4 4 4 4 4 5 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 2 1 -----Explanation:----- In the first test case, the largest square is of size 2 times 2 and consists of the color 4. In the second test case, the largest square that can be formed has a size 1 times 1 as all colors are distinct.","solution":"def largest_square(grid, N, M): dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if i == 0 or j == 0: dp[i][j] = 1 if grid[i][j] is not None else 0 elif grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 if grid[i][j] is not None else 0 max_side = max(max_side, dp[i][j]) return max_side def find_largest_square(test_cases): results = [] for (N, M, grid) in test_cases: results.append(largest_square(grid, N, M)) return results"},{"question":"Given an array of integers, write a function that separates the array into two parts such that the sum of elements in the first part is as close as possible to the sum of elements in the second part. The difference between the sums of the two parts should be minimized. -----Input----- The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of elements in the array. The second line of each test case contains N integers separated by space. -----Output----- For each test case, output a single integer denoting the minimum difference possible between the sums of the two parts. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Array elements ≤ 10000 -----Example----- Input: 2 4 1 6 11 5 3 10 20 15 Output: 1 5 -----Explanation----- Test case 1. We can partition [1, 6, 11, 5] into [1, 6] and [11, 5], where the sums are 7 and 16. The difference is |7-11| = 4. This is not the minimum. The optimal partition is [1, 11] and [6, 5], where the sums are 12 and 11. The difference is |12-11| = 1, which is the minimum possible. Test case 2. We can partition [10, 20, 15] into [10, 15] and [20], where the sums are 25 and 20. The difference is |25-20| = 5. This is the minimum possible.","solution":"def min_partition_difference(arr): Returns the minimum difference possible between the sums of two parts of the array. total_sum = sum(arr) n = len(arr) # Initialize a boolean DP array dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] # Initialize dp[i][0] = True for all i, because zero sum is possible with all subsets. for i in range(n + 1): dp[i][0] = True # Fill dp array for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]] else: dp[i][j] = dp[i-1][j] # Find the maximum value of j such that dp[n][j] is True, which means a subset with sum j is possible for j in range(total_sum // 2, -1, -1): if dp[n][j]: break diff = total_sum - 2 * j return diff def process_cases(T, cases): results = [] for i in range(T): N = cases[i][0] array = cases[i][1] result = min_partition_difference(array) results.append(result) return results"},{"question":"Given a list of integers, implement a function `find_missing_numbers` that finds all the numbers from 1 to N that are missing in the list. The list may or may not be sorted, and the numbers in the list are guaranteed to be within the range 1 to N (inclusive), but not all numbers in this range are necessarily present. # Input - `nums`: a list of integers representing the numbers in the range 1 to N with some missing numbers. - `N`: an integer representing the maximum number in the range (the length of the range is N). # Output - A list of integers representing the missing numbers from 1 to N. # Function Signature ```python def find_missing_numbers(nums: List[int], N: int) -> List[int]: ``` # Constraints - The list may have a length between 0 and N (0 ≤ len(nums) ≤ N). - Each number within the list is unique and lies between 1 and N. # Example ```python assert find_missing_numbers([4, 3, 1], 5) == [2, 5] assert find_missing_numbers([2, 5, 1, 3], 6) == [4, 6] assert find_missing_numbers([1, 2, 3], 3) == [] assert find_missing_numbers([], 4) == [1, 2, 3, 4] ``` # Notes 1. Pay attention to edge cases such as an empty list or a list that already contains all numbers in the range. 2. Your solution should have a time complexity as efficient as possible.","solution":"def find_missing_numbers(nums, N): Returns a list of missing numbers from 1 to N. Parameters: nums (list of int): The list of numbers in the range 1 to N. N (int): The maximum number in the range. Returns: list of int: The missing numbers from 1 to N. all_numbers = set(range(1, N+1)) present_numbers = set(nums) missing_numbers = all_numbers - present_numbers return sorted(list(missing_numbers))"},{"question":"You are given a list of integers nums which is sorted in non-decreasing order. You need to remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same and you should not use extra space for another array. After modifying the input array in-place, return the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [1, 1, 2] Output: 2, nums = [1, 2] Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn\'t matter what you leave beyond the returned length. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0, 1, 2, 3, 4] Explanation: Your function should return length = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It doesn\'t matter what you leave beyond the returned length. Example 3: Input: nums = [0,0,0,0,0] Output: 1, nums = [0] Explanation: Your function should return length = 1, with the first element of nums being 0. Constraints: 0 <= nums.length <= 100 -100 <= nums[i] <= 100 nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates in a sorted list in-place and returns the new length of the array. :type nums: List[int] :rtype: int if not nums: return 0 write_index = 1 # Initialize the write index to the position where the next unique element will be written. for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Consider a game in which you have to navigate a robot through a grid. The grid is represented as an m x n matrix. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. However, the robot can only move either down or right at any point in time. Write a program to count the number of unique paths the robot can take to reach the bottom-right corner of the grid starting from the top-left corner. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two integers, m and n, representing the number of rows and columns of the grid, respectively. -----Output:----- For each test case, output the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ m, n ≤ 100 -----Sample Input:----- 2 3 3 2 2 -----Sample Output:----- 6 2","solution":"def unique_paths(m, n): Returns the number of unique paths in an m x n grid. dp = [[1]*n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1] def main(input_values): Process the input values and return a list of results for each test case. results = [] index = 1 T = int(input_values[0]) for _ in range(T): m, n = map(int, input_values[index].split()) index += 1 results.append(unique_paths(m, n)) return results"},{"question":"# Anagrams Together Write a function that takes an array of strings and groups the anagrams together. Return the result as a list of lists, where each inner list contains words that are anagrams of each other. **An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once.** Example ``` Input: [\'eat\', \'tea\', \'tan\', \'ate\', \'nat\', \'bat\'] Output: [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] ```","solution":"from collections import defaultdict def group_anagrams(strs): Groups anagrams together. :param strs: List of strings :return: List of lists with grouped anagrams anagrams = defaultdict(list) for word in strs: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"A film editor is working on a project where different clips need to be merged in a specific order. For each clip i, it has a priority p_i which determines its position in the merged sequence (lower priority number means higher precedence). If two clips have the same priority, the one appearing first in the input list should be placed earlier. You are given the list of clips with their priorities, and your task is to determine the final order of the clips after they are merged based on their priorities. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer n, the number of clips. - The second line of each test case contains n space-separated integers, p_1, p_2, ..., p_n, where p_i is the priority of the i-th clip. -----Output:----- For each test case, output a single line with n space-separated integers representing the order of the clip indices (1-based) in the final merged sequence. -----Constraints----- - 1 leq T leq 1000 - 1 leq n leq 100 - 1 leq p_i leq 1000 -----Sample Input:----- 2 5 4 2 3 1 5 4 10 5 10 15 -----Sample Output:----- 4 2 3 1 5 2 1 3 4 -----Explanation:----- Test Case 1 - The priorities are [4, 2, 3, 1, 5], so the sorted priorities give the order: [1 (index 4), 2 (index 2), 3 (index 3), 4 (index 1), 5 (index 5)] leading to the output: \\"4 2 3 1 5\\". Test Case 2 - The priorities are [10, 5, 10, 15], so the sorted priorities give the order: [5 (index 2), 10 (index 1), 10 (index 3), 15 (index 4)] leading to the output: \\"2 1 3 4\\".","solution":"def merge_clips(test_cases): results = [] for case in test_cases: n, priorities = case # Create a list of (priority, index) tuples clips = [(priorities[i], i + 1) for i in range(n)] # Sort by (priority, index) since index is unique for all clips clips.sort() # Collect the indices in the sorted order sorted_indices = [clip[1] for clip in clips] results.append(\\" \\".join(map(str, sorted_indices))) return results # Function to parse the input and process the test cases def process_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): n = int(lines[line_index]) priorities = list(map(int, lines[line_index + 1].split())) test_cases.append((n, priorities)) line_index += 2 return merge_clips(test_cases)"},{"question":"Given a grid of size n times m, where each cell contains a number representing the height of that cell, your task is to find a path from the top-left corner (1, 1) to the bottom-right corner (n, m). The path must be such that the difference in height between any two adjacent cells on the path is at most 1. You can move from one cell to another if the cells are adjacent horizontally or vertically. The starting cell and the ending cell are always included in the path. It is guaranteed that a path always exists for the given constraints. -----Input----- The first line of input contains one integer t (1 leq t leq 10): the number of test cases. The first line of each test case contains two integers n and m (2 leq n, m leq 50): the dimensions of the grid. The next n lines contain m integers each, representing the heights of the cells in the grid. -----Output----- For each test case, print an integer d: the length of the path from the top-left corner to the bottom-right corner with the described properties. -----Example----- Input 2 3 3 1 2 3 2 3 4 3 4 5 2 2 5 6 6 7 Output 5 3 -----Note----- In the first test case, one possible path from the top-left corner to the bottom-right corner is: (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). In the second test case, one possible path is: (1, 1) -> (1, 2) -> (2, 2).","solution":"from collections import deque def min_path_length(t, test_cases): results = [] for case in test_cases: n, m = case[0] grid = case[1] def bfs(): queue = deque([(0, 0, 1)]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False]*m for _ in range(n)] visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if abs(grid[nx][ny] - grid[x][y]) <= 1: visited[nx][ny] = True queue.append((nx, ny, dist+1)) result = bfs() results.append(result) return results"},{"question":"In a certain magical land, there is a garden with a special type of tree known as the Fibonacci Tree. The unique property of this tree is that the height of the tree on the nth day is the nth number in the Fibonacci sequence. This means that the height of the tree grows according to the Fibonacci sequence, starting from day 1. Given a number of queries, each asking for the height of the tree on a particular day, your task is to provide the height of the Fibonacci Tree on that specific day. The Fibonacci sequence is defined as: - F(1) = 1 - F(2) = 1 - For n > 2: F(n) = F(n-1) + F(n-2) -----Input:----- The first line of the input contains a single integer Q denoting the number of queries. Each of the next Q lines contains a single integer n representing the day for which you need to find the height of the Fibonacci Tree. -----Output----- For each query, print a single line containing the height of the Fibonacci Tree on the nth day. -----Constraints----- - 1 leq Q leq 10^3 - 1 leq n leq 10^6 -----Example Input----- 3 1 5 10 -----Example Output----- 1 5 55 -----Explanation----- - For the first query: On day 1, the height is 1 (F(1)). - For the second query: On day 5, the height is 5 (as the sequence goes 1, 1, 2, 3, 5). - For the third query: On day 10, the height is 55 (as the sequence goes 1, 1, 2, 3, 5, 8, 13, 21, 34, 55).","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. This function is optimized with O(n) time complexity. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n+1): a, b = b, a + b return b def fibonacci_tree_heights(queries): Given a list of days, returns the heights of the Fibonacci Tree for those days. return [fibonacci(day) for day in queries]"},{"question":"A software development company is working on a version control system, and they need a function to determine the number of changes between two given strings. The changes are defined by the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform one string into another. Write a function `min_changes(s1, s2)` that takes two strings, `s1` and `s2`, as input and returns the minimum number of changes needed. Use dynamic programming to implement your solution efficiently. -----Input:----- - Two lines, each containing a single string, `s1` and `s2` respectively. - The length of each string can be up to 1000 characters. -----Output:----- Print the minimum number of changes required in a single line. -----Constraints----- - The strings only consist of lowercase English letters. -----Sample Input----- horse ros -----Sample Output----- 3 -----EXPLANATION----- To transform \\"horse\\" into \\"ros\\": 1. Replace \'h\' with \'r\' 2. Remove \'se\' 3. Adjust to match \\"ros\\"","solution":"def min_changes(s1, s2): Determines the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform string s1 into string s2 using dynamic programming. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Inserting all characters of s2 elif j == 0: dp[i][j] = i # Deleting all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no edit needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Substitute return dp[m][n]"},{"question":"A company\'s server logs its activities by recording entry and exit timestamps (in seconds past the epoch) for various events. Each event is represented as a tuple ((E_i, X_i, T_i)), where (E_i) is the event unique identifier, (X_i) is 1 for entry and 0 for exit, and (T_i) is the timestamp when the entry or exit occurred. You need to determine the time duration for which each event was active. An event is active from its first entry until its corresponding exit. Write a function `calculate_active_time(events: List[Tuple[int, int, int]]) -> Dict[int, int]` that takes a list of events (where each event is represented as a tuple) as input, and returns a dictionary where the keys are event IDs and the values are the total active time in seconds for each event. **Important:** - The list is sorted by timestamps in ascending order. - You can assume that every entry has a corresponding exit. - An event can have multiple entries and exits, but they occur in pairs (entry followed by exit). - No two events with the same ID will be active at the same time. **Example:** Input: `[(1, 1, 1609459200), (1, 0, 1609462800), (2, 1, 1609459200), (2, 0, 1609459800)]` Output: `{1: 3600, 2: 600}` **Explanation:** For event ID 1, the total active time is (1609462800 - 1609459200 = 3600) seconds. For event ID 2, the total active time is (1609459800 - 1609459200 = 600) seconds.","solution":"from typing import List, Tuple, Dict def calculate_active_time(events: List[Tuple[int, int, int]]) -> Dict[int, int]: Calculate the active time for each event given the list of event logs. :param events: List of tuples where each tuple represents an event (event ID, entry/exit, timestamp) :return: Dictionary where keys are event IDs and values are total active time in seconds active_times = {} event_start_times = {} for event_id, status, timestamp in events: if status == 1: # Entry event event_start_times[event_id] = timestamp elif status == 0: # Exit event if event_id in event_start_times: if event_id in active_times: active_times[event_id] += timestamp - event_start_times[event_id] else: active_times[event_id] = timestamp - event_start_times[event_id] event_start_times.pop(event_id, None) return active_times"},{"question":"You need to write a function that takes an array of integers and returns the maximum product of any two distinct numbers from the array. For example, for the array `[3, 5, -2, 8, 11]` the function should return `88`, because the maximum product is from the pair `(8, 11)`. For the array `[-10, -3, 5, 6, -2]`, the function should return `30`, from the pair `(-10, -3)`. You can assume the array has at least two numbers. If the array has only one number, return `None`.","solution":"def max_product_of_two(arr): Returns the maximum product of any two distinct numbers in the array. if len(arr) < 2: return None arr.sort(reverse=True) max1 = arr[0] * arr[1] # Product of the two largest numbers max2 = arr[-1] * arr[-2] # Product of the two smallest numbers (which could be negative) return max(max1, max2)"},{"question":"Write a function called `word_ladder_length` that calculates the minimum number of transformations required to convert one word (the `begin_word`) into another word (the `end_word`) using a given list of words as intermediate steps. Each transformation can only change one letter at a time, and each intermediate word must exist in the given list (`word_list`). # Constraints - Only one letter can be changed at a time. - Each transformed/intermediate word must be in the given `word_list`. - Each transformation must create a valid word from the list. - Case sensitivity can be ignored (assume all words are in lowercase). # Example ```python word_ladder_length( \\"hit\\", \\"cog\\", [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] ) # Returns 5 -> \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" word_ladder_length( \\"hit\\", \\"cog\\", [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] ) # Returns 0 (since \\"cog\\" is not in the list, it is not possible to transform \\"hit\\" into \\"cog\\") ``` # Notes * The function should return 0 if no possible sequence of transformations exists. * You can assume there are no duplicates in the word list. * You can assume `begin_word` and `end_word` are non-empty and of the same length. * You can use any data structure or algorithm that ensures efficient computation with potentially large inputs. # Function Signature ```python def word_ladder_length(begin_word: str, end_word: str, word_list: list) -> int: pass ```","solution":"from collections import deque def word_ladder_length(begin_word: str, end_word: str, word_list: list) -> int: if end_word not in word_list: return 0 word_set = set(word_list) queue = deque([(begin_word, 1)]) # queue holds tuples of (current_word, current_length) while queue: current_word, current_length = queue.popleft() if current_word == end_word: return current_length for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': # Change one letter at a time next_word = current_word[:i] + char + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, current_length + 1)) return 0"},{"question":"Given an array of integers, your task is to find an integer `k` that is the highest frequency number in the array. If there are multiple numbers with the same highest frequency, return the smallest number among them. -----Input----- The first line contains an integer n — the number of integers in the array (1 ≤ n ≤ 100000). The second line contains n integers separated by spaces, which represent the elements of the array (1 ≤ a_i ≤ 10^9). -----Output----- Print the integer `k` that has the highest frequency in the array. If multiple integers have the highest frequency, print the smallest one. -----Examples----- Input 5 4 4 1 1 2 Output 1 Input 6 1 2 2 3 3 3 Output 3 Input 8 7 7 8 8 9 9 9 1 Output 9 -----Note------ In the first example, both 4 and 1 have the same highest frequency (2 occurrences). The smallest number with the highest frequency is 1. In the second example, number 3 has the highest frequency (3 occurrences), so the output is 3. In the third example, number 9 has the highest frequency (3 occurrences), so the output is 9.","solution":"def highest_frequency_number(n, arr): Finds the integer k that is the highest frequency number in the array. If multiple numbers have the highest frequency, returns the smallest one among them. :param n: int, number of integers in the array :param arr: list of int, the elements of the array :return: int, the number with the highest frequency from collections import Counter # Count frequencies of each number frequency = Counter(arr) # Find the number with the highest frequency most_common = frequency.most_common() max_frequency = most_common[0][1] # Find the smallest number with the highest frequency candidates = [num for num, count in most_common if count == max_frequency] return min(candidates)"},{"question":"Given an array of integers, return the length of the longest contiguous subarray that forms an arithmetic progression. An array is considered to be an arithmetic progression if the difference between consecutive elements is always the same. Example: Input: [3, 6, 9, 12, 15, 10, 20, 5, 15, 25] Output: 5 Explanation: The longest contiguous subarray that forms an arithmetic progression is [3, 6, 9, 12, 15]. Constraints: - 1 <= array.length <= 1000 - -10^5 <= array[i] <= 10^5","solution":"def longest_arith_seq_length(array): if len(array) <= 1: return len(array) max_length = 1 current_length = 1 current_diff = None for i in range(1, len(array)): diff = array[i] - array[i - 1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 # reset, including current pair max_length = max(max_length, current_length) return max_length"},{"question":"=====Function Descriptions===== In Python, list comprehension provides a concise way to create lists. It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. >>> [x for x in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> [x**2 for x in range(10) if x % 2 == 0] [0, 4, 16, 36, 64] =====Problem Statement===== You are given a list of integers. Your task is to write a list comprehension that returns all the integers from the list that are divisible by 3 and greater than a given threshold. =====Input Format===== The first line contains a list of space-separated integers. The second line contains the threshold value as an integer. =====Constraints===== 1 <= len(list) <= 100 -100 <= integer values in list <= 100 -100 <= threshold <= 100 =====Output Format===== Output a list of integers that satisfy the conditions. =====Sample Input===== 3 10 15 22 33 50 10 =====Sample Output===== [15, 33]","solution":"def filter_divisible_by_3_and_above_threshold(lst, threshold): return [x for x in lst if x % 3 == 0 and x > threshold]"},{"question":"A music app wants to implement a new feature that generates playlists based on user preferences. Each user ranks the songs they like, and the app creates a \\"rank-based playlist.\\" The challenge is to identify which songs can and cannot be played in order. To help the developers, you need to write a function to generate this \\"rank-based playlist.\\" The playlist should list the songs in the order of their ranks. If a song has the same rank as another, it should be listed alphabetically after the song with a lower rank. -----Input:----- - The first line will contain an integer N, the number of songs. - The next N lines will each contain a string S (the song name) followed by an integer R (the rank). -----Output:----- - Output the playlist in order of ranks. If two songs have the same rank, sort them alphabetically. -----Constraints----- - 1 leq N leq 1000 - 1 leq text{length of S} leq 100 - 1 leq R leq 1000 -----Sample Input:----- 5 SongA 2 SongB 1 SongC 2 SongD 3 SongE 2 -----Sample Output:----- SongB SongA SongC SongE SongD -----EXPLANATION:----- - \\"SongB\\" has the rank of 1, so it should be played first. - \\"SongA\\", \\"SongC\\", and \\"SongE\\" all have the rank of 2, so they should be played after \\"SongB\\". Among them, \\"SongA\\" comes first alphabetically, followed by \\"SongC\\", and then \\"SongE\\". - \\"SongD\\" has the rank of 3, so it is played last.","solution":"def generate_playlist(N, songs): Returns a rank-based playlist. Parameters: - N: int, number of songs - songs: list of tuples, each tuple containing a string S (song name) and an int R (rank) Output: - A list of song names sorted by their rank. If two songs have the same rank, they are sorted alphabetically. # Sort the list of songs first by rank, and then alphabetically within the same rank sorted_songs = sorted(songs, key=lambda x: (x[1], x[0])) # Extract the song names in the sorted order playlist = [song[0] for song in sorted_songs] return playlist"},{"question":"Write a function that takes a list of integers and returns a list of the same integers sorted such that all the even numbers appear first, followed by all the odd numbers, while maintaining the relative order of even and odd numbers. For example: ```python sort_by_parity([3, 1, 2, 4]) == [2, 4, 3, 1] sort_by_parity([0, 1, 2]) == [0, 2, 1] sort_by_parity([1, 3, 5, 7, 2, 4, 6, 8]) == [2, 4, 6, 8, 1, 3, 5, 7] sort_by_parity([4, 2, 6, 8, 1, 3, 5, 7]) == [4, 2, 6, 8, 1, 3, 5, 7] ``` Your implementation should be efficient and ensure that the relative order of even and odd numbers remains unchanged.","solution":"def sort_by_parity(lst): Sorts a list of integers such that all even numbers appear first, followed by all the odd numbers, while maintaining the relative order of even and odd numbers. even = [x for x in lst if x % 2 == 0] odd = [x for x in lst if x % 2 != 0] return even + odd"},{"question":"# Circular String Rotation Given a string `s` and an integer `k`, write a function that returns the string after it has been rotated to the right by `k` positions. A rotation by 1 position means that the last character of the string moves to the first position, and every other character moves one position to the right. Rotations should be efficient, and aim for linear complexity. # Constraints: - The string `s` will only contain lowercase alphabetic characters (`a-z`). - The length of string `s` will be in the range `[0, 10^6]`. - The integer `k` will be within the range `[0, 10^6]`. # Input - A string `s`. - An integer `k`. # Output - The modified string after `k` rotations. # Examples Basic Tests ``` Input: (\\"hello\\", 2) Output: \\"lohel\\" ``` ``` Input: (\\"abcde\\", 3) Output: \\"cdeab\\" ``` ``` Input: (\\"rotate\\", 6) Output: \\"rotate\\" ``` Edge Cases ``` Input: (\\"a\\", 1) Output: \\"a\\" ``` ``` Input: (\\"\\", 0) Output: \\"\\" ```","solution":"def rotate_string(s, k): Rotates the string s to the right by k positions. Parameters: s (str): The input string to be rotated. k (int): Number of positions to rotate the string. Returns: str: The rotated string. # Edge cases: empty string or k is 0 if not s or k == 0: return s n = len(s) k = k % n # When k is larger than the length of s return s[-k:] + s[:-k]"},{"question":"You are given a list of integers representing timestamps in a day (in seconds). Write a function that takes this list and an integer `n` as input and finds the maximum number of consecutive timestamps where the differences between consecutive timestamps are less than or equal to `n` seconds. For example: If the list of timestamps is `[10, 20, 30, 40, 70, 80]` and `n = 15`, the function should return `4`, as the first four timestamps `10, 20, 30, 40` are consecutive, and the differences between each pair are less than or equal to `15`. Write a function `max_consecutive_timestamps(timestamps: List[int], n: int) -> int` that implements this logic. If there are no timestamps or if no consecutive timestamps meet the criteria, return `0`. # Example Input ``` timestamps = [10, 20, 30, 40, 70, 80] n = 15 ``` Output ``` 4 ``` Input ``` timestamps = [10, 100, 200, 300] n = 50 ``` Output ``` 1 ``` # Constraints * All timestamps are unique and are guaranteed to be sorted in non-decreasing order. * The length of the timestamps list, k, is between 0 and 1000. * The value of each timestamp is between 0 and 86,400 (the number of seconds in a day). * 0 <= n <= 86,400","solution":"def max_consecutive_timestamps(timestamps, n): if not timestamps: return 0 max_count = 1 current_count = 1 for i in range(1, len(timestamps)): if timestamps[i] - timestamps[i-1] <= n: current_count += 1 max_count = max(max_count, current_count) else: current_count = 1 return max_count"},{"question":"# Task Create a function that parses a given string consisting of pairs of words and numbers, then sums the values associated with each unique word. Each pair is separated by a comma and space, and within each pair the word and number are separated by a colon. The result should be a dictionary where the keys are words and the values are the sums. # Examples: ``` \\"sugar:3, salt:2, sugar:5, salt:1, pepper:4\\" -> {\\"sugar\\": 8, \\"salt\\": 3, \\"pepper\\": 4} \\"pen:1, pencil:1, pen:2\\" -> {\\"pen\\": 3, \\"pencil\\": 1} \\"apple:5, apple:5, apple:5\\" -> {\\"apple\\": 15} ``` # Function Signature: The implementation should start with `def parse_and_sum(s: str) -> dict:`","solution":"def parse_and_sum(s: str) -> dict: Parses a given string consisting of pairs of words and numbers, then sums the values associated with each unique word. Parameters: s (str): The input string Returns: dict: A dictionary with words as keys and their corresponding summed values as values. pairs = s.split(\\", \\") result = {} for pair in pairs: word, number = pair.split(\\":\\") number = int(number) if word in result: result[word] += number else: result[word] = number return result"},{"question":"Given a binary tree, implement an algorithm to perform an in-order traversal of the tree without using recursion. Return an array of node values representing the in-order traversal. # Input - The input will consist of a series of lines representing the nodes of the binary tree. - Each line will contain three integers `N`, `L`, and `R` where: - `N` is the value of the node. - `L` is the value of the left child of the node, or `-1` if there is no left child. - `R` is the value of the right child of the node, or `-1` if there is no right child. # Output - An array of integers representing the in-order traversal of the binary tree. # Constraints - The values of the nodes will be unique and will be between 1 and 10^4. - The input will represent the tree in level order. # Example Input ``` 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 ``` # Example Output ``` [4, 2, 5, 1, 3] ``` # Explanation The binary tree represented by the input is: ``` 1 / 2 3 / 4 5 ``` An in-order traversal visits the nodes in the following order: left subtree, root node, right subtree. Thus, the result is `[4, 2, 5, 1, 3]`.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree_from_input(lines): if not lines: return None nodes = {} for line in lines: N, L, R = map(int, line.split()) if N not in nodes: nodes[N] = TreeNode(N) node = nodes[N] if L != -1: if L not in nodes: nodes[L] = TreeNode(L) node.left = nodes[L] if R != -1: if R not in nodes: nodes[R] = TreeNode(R) node.right = nodes[R] return nodes[int(lines[0].split()[0])] def inorder_traversal(root): stack = [] current = root result = [] while stack or current: while current: stack.append(current) current = current.left current = stack.pop() result.append(current.value) current = current.right return result def binary_tree_inorder_traversal(input_lines): root = build_tree_from_input(input_lines) return inorder_traversal(root)"},{"question":"# Task You are given a string that represents a sequence of people entering a dance floor. Each person is represented as either a \'W\' for women or \'M\' for men. The dance requires exactly pairs of one man and one woman. Your task is to identify the maximum number of complete pairs that can be formed from the sequence. # Function Signature Implement a function `max_pairs(sequence: str) -> int` that takes in a string sequence and returns an integer representing the maximum number of pairs. **Constraints:** - The string length will be between 1 and 10^5. - The string will contain only the characters \'W\' and \'M\'. # Example * ex1 `max_pairs(\\"WMWMWWMW\\")` returns 3 * ex2 `max_pairs(\\"WWMMMMMM\\")` returns 2 * ex3 `max_pairs(\\"WWWWWW\\")` returns 0 # Explanation In example 1, 3 pairs can be formed: \'WM\', \'WM\', \'WM\', with one woman left unpaired. In example 2, 2 pairs can be formed: \'WM\', \'WM\', with four men left unpaired. In example 3, no pair can be formed since there are no men.","solution":"def max_pairs(sequence: str) -> int: Returns the maximum number of pairs that can be formed from given sequence representing \'W\' as women and \'M\' as men. A pair consists of one \'M\' and one \'W\'. count_W = sequence.count(\'W\') count_M = sequence.count(\'M\') # The maximum number of pairs is the minimum of the count of \'W\' and \'M\' return min(count_W, count_M)"},{"question":"# Task You have a list of integers representing the ages of different people standing in a line. Your task is to adjust their positions such that people older than a given threshold must remain where they are, while the rest can be rearranged in non-descending order. # Example Given `ages = [25, 50, 35, 45, 20, 60]` and `threshold = 45`, the output should be `[20, 50, 25, 45, 35, 60]`. # Input/Output - `[input]` integer array `ages` A list of ages of people. Constraints: `5 ≤ ages.length ≤ 30` `1 ≤ ages[i] ≤ 100` - `[input]` integer `threshold` An integer specifying the age threshold after which people cannot be moved. Constraints: `1 ≤ threshold ≤ 100` - `[output]` an integer array The reordered array with the condition that people older than or equal to the `threshold` remain in their original positions.","solution":"def adjust_positions(ages, threshold): Adjusts the positions of people in the list such that people older than or equal to the threshold remain in their positions, while the rest are rearranged in non-descending order. :param ages: List of integers representing ages. :param threshold: Integer representing the age threshold. :return: List of ages with the positions adjusted as per the given condition. # Collect the ages that can be rearranged rearrange_ages = [age for age in ages if age < threshold] # Sort these ages rearrange_ages.sort() # Initialize the result list result = [] i = 0 # Iterate over the ages and build the result list for age in ages: if age < threshold: result.append(rearrange_ages[i]) i += 1 else: result.append(age) return result"},{"question":"# Encrypt and Decrypt Strings with Caesar Cipher A Caesar cipher is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is shifted a certain number of places down the alphabet. For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on. The method is apparently named after Julius Caesar, who used it in his private correspondence. # Task Implement two functions, `encrypt` and `decrypt`, which will perform Caesar cipher encryption and decryption respectively. `encrypt` will take a string and an integer (shift value), and return the encrypted string. `decrypt` will take an encrypted string and an integer (shift value), and return the original string. 1. `encrypt` function: - Parameters: `text` (a string to be encrypted), `shift` (an integer, the shift value) - Return: an encrypted string 2. `decrypt` function: - Parameters: `text` (an encrypted string to be decrypted), `shift` (an integer, the shift value) - Return: the original string _Note_: - Both functions should only consider alphabetic characters and should maintain the case (lowercase and uppercase). Non-alphabetic characters should be left unchanged. - The functions should handle positive and negative shift values. # Examples ```python encrypt(\\"Hello, World!\\", 3) #=> \\"Khoor, Zruog!\\" encrypt(\\"abcXYZ\\", -5) #=> \\"vwxSTU\\" decrypt(\\"Khoor, Zruog!\\", 3) #=> \\"Hello, World!\\" decrypt(\\"vwxSTU\\", -5) #=> \\"abcXYZ\\" ``` # Additional Information For simplicity, you can assume the English alphabet with 26 characters. Adjustments for the boundaries (i.e., \'Z\' goes back to \'A\') should be handled correctly. Here\'s the ASCII value range for the English alphabet: - Uppercase letters: \'A\' (65) to \'Z\' (90) - Lowercase letters: \'a\' (97) to \'z\' (122) You might find modular arithmetic useful for wrapping the shifts around the alphabet boundaries.","solution":"def encrypt(text, shift): Encrypts the text using Caesar cipher with the given shift value. encrypted_text = [] for char in text: if char.isalpha(): shift_amount = shift % 26 if char.islower(): new_char = chr((ord(char) - ord(\'a\') + shift_amount) % 26 + ord(\'a\')) elif char.isupper(): new_char = chr((ord(char) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) encrypted_text.append(new_char) else: encrypted_text.append(char) return \'\'.join(encrypted_text) def decrypt(text, shift): Decrypts the text using Caesar cipher with the given shift value. return encrypt(text, -shift)"},{"question":"You are given a 2D grid where some of the cells are empty (represented by 0) and some are obstacles (represented by 1). You need to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1), avoiding the obstacles. You can only move up, down, left, and right. Implement the `shortestPath` function: ```python def shortestPath(grid: List[List[int]]) -> int: ``` - `grid` is a 2D list of integers where each integer is either 0 (empty) or 1 (obstacle). The function should return the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, return -1. # Example 1: Input: ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 0] ] ``` Output: ```python 8 ``` Explanation: One of the shortest paths is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4). # Example 2: Input: ```python grid = [ [0, 1], [1, 0] ] ``` Output: ```python -1 ``` Explanation: There is no path from the top-left corner to the bottom-right corner. # Constraints: - `1 <= grid.length, grid[0].length <= 100` - `grid[i][j]` is 0 or 1","solution":"from collections import deque from typing import List def shortestPath(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Matrix Rotation Given a square matrix, write a function that rotates the matrix 90 degrees clockwise. The function should modify the matrix in place and return the modified matrix. # Example Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: # Your code here ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates an NxN matrix 90 degrees clockwise. n = len(matrix) # Layer by layer approach for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): offset = i - first # Save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top return matrix"},{"question":"Check Anagram Determine if two input strings are anagrams of each other. Information Two strings are called anagrams if they contain the same characters, but possibly in a different order. For example, the strings \\"listen\\" and \\"silent\\" are anagrams as they both contain the same characters: \'l\', \'i\', \'s\', \'t\', \'e\', \'n\'. To determine if two strings are anagrams: 1. Check if the lengths of both strings are the same. 2. Sort the characters of both strings. 3. Compare the sorted versions of both strings. If both sorted strings are the same, then the input strings are anagrams of each other. For example: ``` Input: \\"listen\\", \\"silent\\" Output: true ``` ``` Input: \\"hello\\", \\"world\\" Output: false ```","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, otherwise returns False. # Check if the lengths of both strings are the same if len(str1) != len(str2): return False # Sort the characters of both strings and compare them return sorted(str1) == sorted(str2)"},{"question":"Write a function `findLongestWord` that takes a single string argument and returns the longest word in the string. If there are multiple words of the same maximum length, return the first one that appears. For the sake of this task, a word is defined as a sequence of alphanumeric characters (letters and digits) separated by spaces or punctuation. You can assume that the input will contain at least one word. Examples: ``` Input: \\"The quick brown fox.\\" Output: \\"quick\\" Input: \\"A journey of a thousand miles begins with a single step.\\" Output: \\"thousand\\" Input: \\"Hello, world!\\" Output: \\"Hello\\" ```","solution":"import re def findLongestWord(s): Returns the longest word in the string s. If there are multiple words with the same maximum length, returns the first one that appears. words = re.findall(r\'bw+b\', s) longest_word = max(words, key=len) return longest_word"},{"question":"Given a string, return a new string where each character in the original string is repeated twice. For example: `\\"hello\\"` should return `\\"hheelllloo\\"`. `\\"1234!\\"` should return `\\"11223344!!\\"`. The input string will consist of printable ASCII characters only.","solution":"def double_characters(s): Given a string, return a new string where each character in the original string is repeated twice. :param s: Original string :return: String with each character repeated twice return \'\'.join([char * 2 for char in s])"},{"question":"You are tasked with organizing a tournament for N teams. Each team plays against every other team exactly once. Each match has a predefined outcome represented as a point (1 for win and 0 for loss) for each team. A team\'s total points are calculated by summing the points from every match they played. You are a tournament organizer and need to ensure the standings are correct after all matches are completed. Your job is to determine the rankings of the teams based on their total points. If two or more teams have the same total points, rank them alphabetically by their team names. Write a function to determine and print the rankings of the teams. -----Input----- First line: An integer T representing the number of test cases. For each test case: - An integer N representing the number of teams. - A list of strings representing the names of the teams. - A list of lists where each inner list contains N integers representing the points of matches between the teams in the form of a matrix. -----Output----- For each test case, print the rankings of the teams. Each ranking contains the team name followed by its position in the standings. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 - Team names consist of uppercase alphabets and are unique. - Each matrix contains only 0s and 1s. - The sum of points will always result in integer totals. -----Example----- Input: 2 3 TEAM-A TEAM-B TEAM-C [ [0, 1, 1], [0, 0, 0], [0, 1, 0] ] 4 ALPHA BETA GAMMA DELTA [ [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0] ] Output: Case #1: 1 TEAM-A 2 TEAM-C 3 TEAM-B Case #2: 1 ALPHA 2 BETA 3 DELTA 4 GAMMA -----Explanation----- In the first example: - TEAM-A has 2 points (beats TEAM-B and TEAM-C). - TEAM-B has 0 points (loses to TEAM-A and TEAM-C). - TEAM-C has 1 point (beats TEAM-B). In the second example: - ALPHA has 3 points (beats BETA, GAMMA, and DELTA). - BETA has 2 points (beats GAMMA and DELTA). - DELTA has 1 point (beats GAMMA). - GAMMA has 0 points (loses all matches).","solution":"def determine_rankings(T, cases): results = [] for case_num in range(T): N = cases[case_num][0] team_names = cases[case_num][1] points_matrix = cases[case_num][2] # Calculate total points for each team total_points = [] for i in range(N): total_points.append((sum(points_matrix[i]), team_names[i])) # Sort by points (descending) then by name (alphabetically) total_points.sort(key=lambda x: (-x[0], x[1])) # Append the results results.append(f\\"Case #{case_num + 1}:\\") for rank, (points, name) in enumerate(total_points, start=1): results.append(f\\"{rank} {name}\\") return \\"n\\".join(results)"},{"question":"Maria has recently discovered an interest in cryptography and has decided to challenge herself by implementing a basic Caesar cipher. The Caesar cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down the alphabet. For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on, until \'Z\', which wraps around to \'A\'. Your task is to help Maria create a function to encrypt and decrypt messages using the Caesar cipher. # Function Signature ```python def caesar_cipher(text: str, shift: int, encrypt: bool) -> str: pass ``` # Input - `text`: A string containing the message to be encrypted or decrypted. `text` consists of alphabetic characters and spaces only. - `shift`: An integer representing the number of positions each letter should be shifted. - `encrypt`: A boolean flag indicating whether the function should encrypt (`True`) or decrypt (`False`) the message. # Output - Return the encrypted or decrypted string based on the value of the `encrypt` flag. # Example ```python # Example 1: text = \\"HELLO WORLD\\" shift = 3 encrypt = True print(caesar_cipher(text, shift, encrypt)) # Output: \\"KHOOR ZRUOG\\" # Example 2: text = \\"KHOOR ZRUOG\\" shift = 3 encrypt = False print(caesar_cipher(text, shift, encrypt)) # Output: \\"HELLO WORLD\\" ``` # Constraints - 1 ≤ length of `text` ≤ 1000 - -25 ≤ `shift` ≤ 25 - The function should preserve the case of the alphabetic characters (A-Z, a-z) and should not alter spaces. Create the function `caesar_cipher` that meets the above requirements.","solution":"def caesar_cipher(text: str, shift: int, encrypt: bool) -> str: Encrypt or decrypt a message using Caesar cipher. Parameters: - text: The input string consisting of alphabetic characters and spaces. - shift: The number of positions each letter should be shifted. - encrypt: Boolean flag; if True, encrypt the message; if False, decrypt it. Returns: - Encrypted or decrypted string based on the value of the encrypt flag. def shift_char(c, shift_amt): if c.isalpha(): start = ord(\'A\') if c.isupper() else ord(\'a\') return chr((ord(c) - start + shift_amt) % 26 + start) else: return c if not encrypt: shift = -shift return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"# Task: You have to write a function **generate_matrix** which takes an integer **n** as input and returns a list of lists representing an n x n spiral matrix filled with numbers from 1 to n². Rules/Note: * If the Argument is 0 or a Negative Integer then it should return an empty list. * The size of the returned matrix should be n x n. * Range of n is [0, 100] # Examples: generate_matrix(3): ``` [[1, 2, 3], [8, 9, 4], [7, 6, 5]] ``` generate_matrix(4): ``` [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] ``` generate_matrix(5): ``` [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]] ``` generate_matrix(0): ``` [] ```","solution":"def generate_matrix(n): Generates an n x n spiral matrix filled with numbers from 1 to n². Args: n (int): The size of the matrix. Returns: list: A 2D list representing the generated spiral matrix. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are given two strings, `s` and `t`. You need to determine the minimum window in `s` which contains all the characters present in `t` (including duplicates). If there are multiple such windows of the same length, return the one which occurs first. If no such window exists, return an empty string. For example: - Input: `s = \\"ADOBECODEBANC\\"`, `t = \\"ABC\\"` - Output: `\\"BANC\\"` Explanation: The minimum window that contains all characters of `t` is \\"BANC\\". Note: - The length of `s` and `t` will not exceed 100,000. - All characters are ASCII characters.","solution":"from collections import Counter, defaultdict def min_window(s, t): Returns the minimum window in s which contains all the characters present in t. If there are multiple such windows of the same length, return the one which occurs first. If no such window exists, return an empty string. if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\\"inf\\"), None, None while r < len(s): char = s[r] window_counts[char] += 1 if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"You are given a list of flight routes represented by pairs of cities. Each pair `(airport1, airport2)` means there is a direct flight from `airport1` to `airport2`. Write a function that takes the list of flight routes and a starting airport and returns a list of all the airports that are directly or indirectly reachable from the starting airport. Airports should be listed in the order they are first reached. For example: ```python flight_routes = [(\\"JFK\\", \\"LAX\\"), (\\"JFK\\", \\"ATL\\"), (\\"LAX\\", \\"SFO\\"), (\\"SFO\\", \\"SEA\\"), (\\"ATL\\", \\"DFW\\"), (\\"DFW\\", \\"HOU\\")] starting_airport = \\"JFK\\" reachable_airports(flight_routes, starting_airport) ``` Should return: ```python [\\"LAX\\", \\"ATL\\", \\"SFO\\", \\"SEA\\", \\"DFW\\", \\"HOU\\"] ``` You should implement the following function: ```python def reachable_airports(flight_routes, starting_airport): # Your code here ``` **Constraints:** 1. Each pair represents a direct flight, and the flights are bidirectional. 2. Assume there are no cycles in the flight routes. 3. You can use any data structures to help your implementation, but stay within reasonable limits of time and space complexity.","solution":"def reachable_airports(flight_routes, starting_airport): from collections import defaultdict, deque # Build adjacency list for the flight routes adjacency_list = defaultdict(list) for airport1, airport2 in flight_routes: adjacency_list[airport1].append(airport2) adjacency_list[airport2].append(airport1) # Since flights are bidirectional # BFS to find all reachable nodes reachable = [] visited = set() queue = deque([starting_airport]) visited.add(starting_airport) while queue: current_airport = queue.popleft() for neighbor in adjacency_list[current_airport]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) reachable.append(neighbor) return reachable"},{"question":"Write a function that takes an integer `n` and returns a list of strings representing all numbers from 1 to `n`. However, for multiples of 3, the string should be \\"Fizz\\" and for multiples of 5, the string should be \\"Buzz\\". For numbers which are multiples of both 3 and 5, the string should be \\"FizzBuzz\\". Examples: ``` Input: 5 Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\'] Input: 15 Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\'] ```","solution":"def fizz_buzz(n): Returns a list of strings representing numbers from 1 to n with special rules: - For multiples of 3, the string is \\"Fizz\\". - For multiples of 5, the string is \\"Buzz\\". - For multiples of both 3 and 5, the string is \\"FizzBuzz\\". result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"The city of Algorville is famous for its annual coding marathons. These marathons are very popular and attract coders from all over the world. The city has decided to record the scores of all participants and announce the winner with the highest score. However, due to a clerical error, some participants\' scores were recorded as negative numbers. To rectify this, the city council has hired you to write a program that processes the scores and returns the highest valid score. If all scores are invalid, your program should return -1. -----Input:----- The first line of the input contains a single integer N indicating the number of participants. The next line contains N integers, each representing the score of a participant. -----Output:----- Your output should consist of a single integer representing the highest valid score, or -1 if no valid scores are present. -----Constraints:----- - 1 leq N leq 100000. - The scores can be any integer between -1000000 and 1000000. -----Sample input 1:----- 5 12 -5 23 10 -100 -----Sample output 1:----- 23 -----Sample input 2:----- 4 -10 -20 -30 -40 -----Sample output 2:----- -1 -----Sample input 3:----- 6 -50 45 -12 14 0 -2 -----Sample output 3:----- 45","solution":"def highest_valid_score(N, scores): Return the highest valid score from the given list of scores. A valid score is a non-negative integer. If no valid scores are present, return -1. valid_scores = [score for score in scores if score >= 0] if valid_scores: return max(valid_scores) return -1"},{"question":"Write a function that receives a positive integer `n` and returns the sum of all the digits in the factorial of `n`. sum_factorial_digits(5) // returns 3 (5! = 120, sum of digits = 1 + 2 + 0 = 3) sum_factorial_digits(10) // returns 27 (10! = 3628800, sum of digits = 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27) *Consider performance and the use of efficient algorithms, especially for large values of `n`*","solution":"import math def sum_factorial_digits(n): Returns the sum of all the digits in the factorial of n. Parameters: n (int): A positive integer Returns: int: The sum of all the digits in the factorial of n factorial_value = math.factorial(n) # Convert the factorial value to string and sum up the individual digits return sum(int(digit) for digit in str(factorial_value))"},{"question":"Given two strings word1 and word2, convert word1 into word2 using the minimum number of operations. The allowed operations are insertion, deletion, and substitution of a single character. Write a function that determines this minimum number of operations required to transform word1 into word2. Example 1: Input: word1 = \\"kitten\\", word2 = \\"sitting\\" Output: 3 Explanation: - kitten -> sitten (substitute \'k\' with \'s\') - sitten -> sittin (substitute \'e\' with \'i\') - sittin -> sitting (insert \'g\') Example 2: Input: word1 = \\"flaw\\", word2 = \\"lawn\\" Output: 2 Explanation: - flaw -> law (delete \'f\') - law -> lawn (insert \'n\') Constraints: 1 <= word1.length, word2.length <= 1000 word1 and word2 consist of lowercase English letters only.","solution":"def minDistance(word1, word2): Returns the minimum number of operations required to convert word1 to word2. The allowed operations are insertion, deletion, and substitution of a single character. m, n = len(word1), len(word2) # Initialize the dp table with size (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base cases where one of the words is empty for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] # No operation required else: dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + 1) # Insert, Delete, or Substitute return dp[m][n]"},{"question":"Chef loves playing with strings. This time, he has two strings: S and T, of the same length N. He wants to transform S into T by performing a series of operations. In one operation, Chef can select any character in S and replace it with any other character. Chef is wondering about the minimum number of such operations required to transform S into T. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case consists of two strings S and T of length N on a single line. -----Output----- For each test case, print a single line containing one integer - the minimum number of operations required to transform S into T. -----Constraints----- - 1 le T le 100,000 - 1 le N le 100 -----Example Input----- 3 abc def hello world abcdef abcxyz -----Example Output----- 3 5 3","solution":"def min_operations_to_transform(S, T): Calculate the minimum number of operations required to transform string S into string T. if len(S) != len(T): raise ValueError(\\"Strings S and T must be of the same length\\") operations_count = 0 for s_char, t_char in zip(S, T): if s_char != t_char: operations_count += 1 return operations_count def handle_multiple_cases(test_cases): results = [] for S, T in test_cases: result = min_operations_to_transform(S, T) results.append(result) return results # Wrapper function to read input and call the solution function def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) test_cases = [tuple(line.split()) for line in data[1:T+1]] results = handle_multiple_cases(test_cases) for result in results: print(result)"},{"question":"Your task is to implement a function that finds and returns the longest substring made up of consecutive characters from the given string. A consecutive substring contains characters whose ASCII values increase by exactly 1 from the previous character. For example, given the string `\\"abcdxyzab\\"`: The consecutive substrings are `\\"abcd\\"`, `\\"xyz\\"` and `\\"ab\\"`. The function should return the longest of these substrings. If there are multiple substrings with the same length, it should return the first one encountered. Write a function `find_longest_consecutive_substring(s: str) -> str:` that takes a string `s` as input and returns the longest consecutive substring. Examples: - `find_longest_consecutive_substring(\\"abcdxyzab\\")` should return `\\"abcd\\"`. - `find_longest_consecutive_substring(\\"hijabcdefklmno\\")` should return `\\"abcdef\\"`. You can assume the given string will contain only lowercase English letters and will have at least one character. ```if:c If the string contains only one character, return that character. If the string does not have any consecutive characters, return the first character of the string. ``` ```if-not:c If the string contains only one character, return that character. If the string does not have any consecutive characters, return the first character of the string. ```","solution":"def find_longest_consecutive_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" max_len = 1 current_len = 1 max_substr = s[0] current_substr = s[0] for i in range(1, n): if ord(s[i]) == ord(s[i-1]) + 1: current_len += 1 current_substr += s[i] else: if current_len > max_len: max_len = current_len max_substr = current_substr current_len = 1 current_substr = s[i] if current_len > max_len: max_substr = current_substr return max_substr"},{"question":"Create a function that takes a string as input and returns the first non-repeating character in the string. If all characters are repeated or the string is empty, return an empty string. The function should be case-sensitive. Do not use any built-in string or array methods for this problem.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeated or the string is empty, returns an empty string. # Dictionary to store the frequency of each character char_count = {} # Count the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a frequency of 1 for char in s: if char_count[char] == 1: return char # If no non-repeating character is found, return an empty string return \\"\\""},{"question":"Given a list of lottery tickets, each represented by a string of digits, and a target integer sum, determine if there is a way to pick a combination of these tickets such that the sum of the chosen tickets\' digits equals the target sum. Example 1: Input: tickets = [\\"123\\", \\"456\\", \\"789\\"], target_sum = 15 Output: True Explanation: One possible combination is ticket \\"123\\" (sum = 6) and ticket \\"456\\" (sum = 15 - 6 = 9). Example 2: Input: tickets = [\\"111\\", \\"222\\", \\"333\\"], target_sum = 10 Output: False Explanation: There is no combination of tickets that sum up to 10. Note: The number of tickets will be in the range of [1, 100]. Each ticket string will have a length in the range of [1, 10]. The target sum is a non-negative integer which will not exceed 1000.","solution":"from itertools import combinations def can_achieve_target_sum(tickets, target_sum): Determine if there is a combination of tickets such that the sum of their digits equals the target sum. Args: tickets (list of str): The list of lottery tickets represented as strings of digits. target_sum (int): The target sum integer. Returns: bool: True if there is a combination of tickets that meets the target sum, False otherwise. # Step 1: Calculate the sum of digits for each ticket ticket_sums = [sum(map(int, ticket)) for ticket in tickets] # Step 2: Check combinations of tickets\' sums to see if any combination meets the target sum for r in range(1, len(tickets) + 1): for combination in combinations(ticket_sums, r): if sum(combination) == target_sum: return True return False"},{"question":"Given a list of integers, determine if the list can be partitioned into two sublists such that the sum of the elements in each sublist is the same. If such a partition is possible, return ``` \\"Possible\\" ```, otherwise return ``` \\"Impossible\\" ```. Input A list of integers 1 ≤ N ≤ 100,000 Example partition_possible([1, 5, 11, 5]) # should return Possible partition_possible([1, 2, 3, 5]) # should return Impossible","solution":"def partition_possible(nums): Determine if a list of integers can be partitioned into two sublists with equal sum. Args: nums (list): A list of integers. Returns: string: \\"Possible\\" if the partition exists, \\"Impossible\\" otherwise. total_sum = sum(nums) # If the total sum is odd, we cannot partition it into equal sublists if total_sum % 2 != 0: return \\"Impossible\\" target = total_sum // 2 n = len(nums) # Create a DP array where dp[i] will be True if there is a subset of the list with sum i dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"Possible\\" if dp[target] else \\"Impossible\\""},{"question":"[Write a function `find_unique_numbers` that takes a list of integers as input and returns a list of integers that appear exactly once in the input list. The output list should be sorted in ascending order. Example: ```python def find_unique_numbers(nums): # Your code here # Example usage: print(find_unique_numbers([4, 3, 2, 7, 8, 2, 3, 1])) # Output: [1, 4, 7, 8] print(find_unique_numbers([1, 1, 2, 2, 3, 4])) # Output: [3, 4] ```","solution":"def find_unique_numbers(nums): Returns a sorted list of integers that appear exactly once in the input list. from collections import Counter # Count the occurrences of each number in the list count = Counter(nums) # Extract the numbers that appear exactly once unique_nums = [num for num, cnt in count.items() if cnt == 1] # Sort the unique numbers in ascending order and return return sorted(unique_nums)"},{"question":"We often need to track the frequency of words in a body of text to understand the significance of each word in that context. Write a function that takes a string `text` as input and returns the `top 3 most common words` along with their frequencies. The function should ignore case, punctuation and common stop words like `the, is, in, at, which, on` (you can assume a pre-defined list of common stop words). If there are ties in frequencies within the top 3, include all the tied words in the output. The final answer should be in the form of a dictionary like `{ \'word1\': frequency1, \'word2\': frequency2, \'word3\': frequency3 }`. If there are fewer than three unique words in the input text, return the frequencies for however many words are present.","solution":"import re from collections import Counter def top_3_common_words(text): Returns a dictionary of the top 3 most common words along with their frequencies. Ignores case, punctuation, and common stop words. # Define the common stop words stop_words = set([\'the\', \'is\', \'in\', \'at\', \'which\', \'on\']) # Clean the text by removing punctuation and converting to lower case cleaned_text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the text into words words = cleaned_text.split() # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count the frequencies of each word word_counts = Counter(filtered_words) # Get the top 3 most common words and their frequencies most_common = word_counts.most_common(3) # If there are ties in frequencies within the top 3, include all the tied words in the output result = {} freq_counter = 0 for word, freq in most_common: if len(result) < 3: result[word] = freq freq_counter = freq else: if freq == freq_counter: result[word] = freq return result"},{"question":"Given a list of integers, write a function `find_missing_numbers(arr)` that finds all the missing numbers in the list. The list contains integers from 1 to n, where n is the length of the list plus the count of missing numbers. Return the missing numbers as a list sorted in ascending order. Example 1: ```python arr = [4, 3, 2, 7, 8, 2, 3, 1] find_missing_numbers(arr) # returns [5, 6] ``` Example 2: ```python arr = [1, 1, 2, 2] find_missing_numbers(arr) # returns [3, 4] ``` Example 3: ```python arr = [1, 2, 3, 4, 6, 7, 8, 9] find_missing_numbers(arr) # returns [5] ```","solution":"def find_missing_numbers(arr): Returns the missing numbers in the given list of integers where the list contains integers from 1 to n, where n is the length of the list plus the count of missing numbers. n = len(arr) all_numbers = set(range(1, n + 1)) present_numbers = set(arr) missing_numbers = sorted(all_numbers - present_numbers) return missing_numbers"},{"question":"You are given a grid of size n times m filled with integers. You need to find the largest plus sign that can be formed using cells with value 1. A plus sign consists of a center cell and four arms extending from it, with equal length in all four directions (up, down, left, right). The length of an arm is the number of 1s in that direction excluding the center cell. Your task is to determine the order of the largest plus sign in the grid or determine if it is impossible to form such a plus sign. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 500) — the number of rows and columns in the grid, respectively. Each of the next n lines contain m integers, either 0 or 1, representing the grid. -----Output----- Print the order of the largest plus sign. If no plus sign can be formed, print 0. -----Example----- Input 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output 2 Input 3 3 1 0 1 0 1 0 1 0 1 Output 0","solution":"def largest_plus_sign(grid): Function to determine the order of the largest plus sign in a given grid :param grid: List of List of integers representing the grid :return: Integer representing the order of the largest plus sign n = len(grid) if n == 0: return 0 m = len(grid[0]) # Initialize dp arrays left = [[0] * m for _ in range(n)] right = [[0] * m for _ in range(n)] up = [[0] * m for _ in range(n)] down = [[0] * m for _ in range(n)] # Fill dp arrays for i in range(n): for j in range(m): if grid[i][j] == 1: left[i][j] = left[i][j-1] + 1 if j > 0 else 1 up[i][j] = up[i-1][j] + 1 if i > 0 else 1 for i in range(n-1, -1, -1): for j in range(m-1, -1, -1): if grid[i][j] == 1: right[i][j] = right[i][j+1] + 1 if j < m-1 else 1 down[i][j] = down[i+1][j] + 1 if i < n-1 else 1 # Calculate the max order of the plus sign max_order = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: order = min(left[i][j], right[i][j], up[i][j], down[i][j]) max_order = max(max_order, order) # The order of a plus sign is the number of 1s in each direction plus the center 1 return max_order - 1 if max_order > 0 else 0 def read_input_and_solve(n, m, input_grid): grid = [] for row in input_grid: grid.append(list(map(int, row.split()))) return largest_plus_sign(grid)"},{"question":"Joy has a collection of n unique toys, each with a distinct integer ID. Every toy can be represented as a node in a graph, where there is an undirected edge between two nodes if the absolute difference between their IDs is a perfect square. Write a program to determine the sum of the sizes of all connected components in the graph. Two nodes belong to the same connected component if there is a path of edges between them. You need to find each connected component and sum the sizes of all these components. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of toys. The next line contains n distinct integers, the IDs of the toys (1 ≤ ID_i ≤ 10^9). -----Output----- Print a single integer — the sum of the sizes of all connected components in the graph. -----Example----- Input 5 1 4 9 16 23 Output 5 Explanation: The toys with IDs 1, 4, 9, and 16 form a connected component as the differences between consecutive perfect squares are perfect squares themselves. The toy with ID 23 forms a connected component by itself. Hence, the sum of the sizes of all connected components is 5.","solution":"import math from collections import defaultdict, deque def is_perfect_square(x): return int(math.isqrt(x)) ** 2 == x def sum_of_sizes_of_connected_components(n, toy_ids): def bfs(node): queue = deque([node]) visited[node] = True size = 0 while queue: current = queue.popleft() size += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size graph = defaultdict(list) toy_ids = sorted(toy_ids) for i in range(n): for j in range(i + 1, n): if is_perfect_square(abs(toy_ids[j] - toy_ids[i])): graph[toy_ids[i]].append(toy_ids[j]) graph[toy_ids[j]].append(toy_ids[i]) visited = {toy_id: False for toy_id in toy_ids} total_size = 0 for toy_id in toy_ids: if not visited[toy_id]: total_size += bfs(toy_id) return total_size"},{"question":"- Input: Two integers `m` and `n` and a list of integers `arr` of size `m*n` - Output: Returns a string representation of a spiral matrix formed with the given integers. Example: `spiral_matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])` returns ``` 1 2 3 8 9 4 7 6 5 ``` `spiral_matrix(4, 4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])` returns ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ``` Note: - If `m` or `n` is less than 1, it should return `\\"\\"`.","solution":"def spiral_matrix(m, n, arr): if m < 1 or n < 1 or len(arr) != m * n: return \\"\\" matrix = [[0] * n for _ in range(m)] top, bottom, left, right = 0, m-1, 0, n-1 index = 0 while index < len(arr): for i in range(left, right+1): if index < len(arr): matrix[top][i] = arr[index] index += 1 top += 1 for i in range(top, bottom+1): if index < len(arr): matrix[i][right] = arr[index] index += 1 right -= 1 for i in range(right, left-1, -1): if index < len(arr): matrix[bottom][i] = arr[index] index += 1 bottom -= 1 for i in range(bottom, top-1, -1): if index < len(arr): matrix[i][left] = arr[index] index += 1 left += 1 return \'n\'.join([\' \'.join(map(str, row)) for row in matrix])"},{"question":"You are given a list of integers, and your task is to find the longest subsequence such that all elements of the subsequence are in strictly ascending order. Write a function `longest_asc_subsequence(arr)` that takes a list of integers `arr` and returns the list of integers that form the longest strictly ascending subsequence. For instance: ```python arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] ``` The longest strictly ascending subsequence in this case would be `[10, 22, 33, 50, 60, 80]`. Another example: ```python arr = [3, 10, 2, 1, 20] ``` The longest strictly ascending subsequence in this case would be `[3, 10, 20]`. Yet another example: ```python arr = [3, 2] ``` The longest strictly ascending subsequence in this case would be `[3]`. **Constraints:** - The length of the list `arr` will not exceed 2000. - All elements in `arr` are integers and can be positive or negative.","solution":"def longest_asc_subsequence(arr): Returns the longest strictly ascending subsequence in the given list of integers. if not arr: return [] n = len(arr) # dp[i] will store the longest ascending subsequence that ends with arr[i] dp = [[] for _ in range(n)] # Initialize dp with each element being the subsequence containing only itself for i in range(n): dp[i] = [arr[i]] # Build the dp array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and len(dp[i]) < len(dp[j]) + 1: dp[i] = dp[j] + [arr[i]] # Find the longest subsequence in dp longest_subseq = [] for subseq in dp: if len(subseq) > len(longest_subseq): longest_subseq = subseq return longest_subseq"},{"question":"You are given an undirected graph with `n` nodes and `m` edges where each node is labeled from `1` to `n`. Each edge connects two nodes and has a weight associated with it. Your task is to find the Minimum Spanning Tree (MST) of the graph using Kruskal\'s algorithm and output its total weight. -----Input----- The first line contains two integers `n` and `m` (1 le n le 1000, 0 le m le 10000) — the number of nodes and edges in the graph respectively. The next `m` lines contain three integers `u`, `v`, and `w` (1 le u, v le n, 1 le w le 1000) — the endpoints of the edge and its weight. -----Output----- Print a single integer — the total weight of the Minimum Spanning Tree (MST). If there is no spanning tree possible, print `IMPOSSIBLE`. -----Example----- Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 2 5 Output 6","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return \\"IMPOSSIBLE\\" u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) total_weight = sum([w for u, v, w in result]) return total_weight def minimum_spanning_tree(n, m, edge_list): edges = [] for edge in edge_list: u, v, w = edge edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"Develop a Python function `price_calculator` that computes the final price of items after applying the given discounts. The function will take two parameters: a list of pairs (representing the items and their initial prices), and a dictionary of discounts. Each pair in the list represents an item and its corresponding initial price: `[(item_name_1, price_1), (item_name_2, price_2), ...]`. The dictionary contains the discount rates for specific items where the key is the item name and the value is the discount rate (in percentage): `{item_name_1: discount_rate_1, item_name_2: discount_rate_2, ...}`. The function should return a new list of pairs with the items and their final prices after applying the specified discounts. If an item does not have a specified discount, its price remains unchanged. # Example: ```python def price_calculator(items, discounts): # Your code goes here items = [(\\"apple\\", 100), (\\"banana\\", 80), (\\"orange\\", 90)] discounts = {\\"apple\\": 10, \\"orange\\": 20} print(price_calculator(items, discounts)) ``` # Output: ``` [(\\"apple\\", 90.0), (\\"banana\\", 80), (\\"orange\\", 72.0)] ``` # Explanation: - The apple has a 10% discount applied, so its final price is 100 - 10% of 100 = 100 - 10 = 90. - The banana does not have any discount, so its final price remains 80. - The orange has a 20% discount applied, so its final price is 90 - 20% of 90 = 90 - 18 = 72.","solution":"def price_calculator(items, discounts): Calculate the final price of items after applying given discounts. Parameters: items (list of tuples): List of pairs where each pair contains an item name and its initial price. discounts (dict): Dictionary where keys are item names and values are discount rates in percentage. Returns: list of tuples: List of pairs where each pair contains an item name and its final price after applying discounts. final_prices = [] for item, price in items: discount = discounts.get(item, 0) final_price = price - (price * discount / 100) final_prices.append((item, final_price)) return final_prices"},{"question":"You are given an array of integers A of length N. Your task is to determine if there exists a subset of the array whose sum is zero, excluding the empty subset. -----Input----- The first line contains the integer T, the number of test cases. Each test case consists of two lines. The first line contains the integer N, the number of elements in the array. The second line contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, print \\"YES\\" if there exists a non-empty subset whose sum is zero, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - -100 ≤ A[i] ≤ 100 -----Example----- Input: 2 5 3 1 -4 2 5 3 1 2 3 Output: YES NO -----Explanation----- For the first test case, the subset {3, -4, 1} has a sum of 0. For the second test case, there is no non-empty subset that sums to 0.","solution":"def has_zero_sum_subset(arr): Determines if there exists a non-empty subset of the array such that the sum is zero. n = len(arr) # Using a set to store the prefix sums prefix_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] results.append(has_zero_sum_subset(A)) return results"},{"question":"You are given an array of integers and a target sum. Determine whether there are two distinct elements in the array that add up to the target sum. If such elements exist, return their indices as a tuple (index1, index2). If no such pair exists, return None. Assume that each input would have exactly one solution, and you may not use the same element twice. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) Explanation: 2 + 7 = 9, so we return indices 0 and 1. Example 2: Input: nums = [3, 2, 4], target = 6 Output: (1, 2) Explanation: 2 + 4 = 6, so we return indices 1 and 2.","solution":"def two_sum(nums, target): Finds two distinct elements in the array that add up to the target sum and returns their indices. :param nums: List of integers :param target: Integer target sum :return: Tuple of indices of the two numbers that add up to target or None if no such pair exists. lookup = {} for i, num in enumerate(nums): needed = target - num if needed in lookup: return (lookup[needed], i) lookup[num] = i return None"},{"question":"You are given a sequence of integers B_1, B_2, ..., B_M. For each integer L (1 leq L leq M), determine the longest subsequence that is strictly increasing and is formed by any subarray that starts at B_1 and ends at B_L. ----- Constraints ----- - 1 leq M leq 2000 - 1 leq B_i leq 10^9 - All values in the input are integers. ----- Input ----- Input is given from Standard Input in the following format: M B_1 B_2 ... B_M ----- Output ----- Print M lines. In the i-th line, print the length of the longest strictly increasing subsequence that can be obtained from subarray B_1 ... B_i. ----- Sample Input ----- 5 1 2 3 2 4 ----- Sample Output ----- 1 2 3 3 4 Explanation: For L=1, the subarray is [1], and the longest increasing subsequence is [1], so the answer is 1. For L=2, the subarray is [1, 2], and the longest increasing subsequence is [1, 2], so the answer is 2. For L=3, the subarray is [1, 2, 3], and the longest increasing subsequence is [1, 2, 3], so the answer is 3. For L=4, the subarray is [1, 2, 3, 2]. The longest increasing subsequence is [1, 2, 3], so the answer is 3. For L=5, the subarray is [1, 2, 3, 2, 4]. The longest increasing subsequence is [1, 2, 3, 4], so the answer is 4.","solution":"def longest_increasing_subsequences(M, B): For each length L from 1 to M, computes the length of the longest strictly increasing subsequence that can be obtained from subarray B_1 ... B_L. Parameters: M: int - the length of sequence B B: list of int - the sequence of integers Returns: list of int - the lengths of the longest strictly increasing subsequences for each length L # dp array to store the length of the longest increasing subsequence ending at each index dp = [1] * M result = [0] * M # Construct the dp array for i in range(M): for j in range(i): if B[j] < B[i]: dp[i] = max(dp[i], dp[j] + 1) result[i] = max(dp[:i+1]) return result"},{"question":"You are managing a library\'s book inventory system. Each book is identified by its title and the name of its author. When a patron borrows or returns books, you need to update the inventory. You have been provided with logs of these borrow and return events, and your task is to process these logs to keep the inventory up to date. Implement a function `update_books(logs: List[str]) -> Dict[str, int]` that takes a list of log entries and returns a dictionary representing the current inventory of books. Each log entry is a string in one of the following formats: - `borrowed \\"<book_title>\\" by <author_name>` - `returned \\"<book_title>\\" by <author_name>` For example: ```python logs = [ \'borrowed \\"The Catcher in the Rye\\" by J.D. Salinger\', \'borrowed \\"To Kill a Mockingbird\\" by Harper Lee\', \'returned \\"The Catcher in the Rye\\" by J.D. Salinger\', \'borrowed \\"1984\\" by George Orwell\' ] ``` Your function should return: ```python { \'The Catcher in the Rye by J.D. Salinger\': 1, \'To Kill a Mockingbird by Harper Lee\': -1, \'1984 by George Orwell\': -1 } ``` In the resulting dictionary, each key is a string in the format `\\"<book_title> by <author_name>\\"` and the value is an integer where: - Positive numbers indicate the number of copies available in the library after accounting for the logs. - Negative numbers indicate the number of copies currently borrowed.","solution":"from typing import List, Dict def update_books(logs: List[str]) -> Dict[str, int]: inventory = {} for log in logs: action, details = log.split(\\" \\", 1) title, author = details.split(\'\\" by \') title = title.strip(\'\\"\') author = author.strip() book_key = f\'{title} by {author}\' if action == \\"borrowed\\": inventory[book_key] = inventory.get(book_key, 0) - 1 elif action == \\"returned\\": inventory[book_key] = inventory.get(book_key, 0) + 1 return inventory"},{"question":"Implement a function that takes two arguments: a string `text` and a string `substring`. The function should return the last index at which the `substring` is found in the `text`. If the `substring` is not found in the `text`, return -1. Example: ``` lastIndexOf(\\"hello world, hello!\\", \\"hello\\"); // should return 13. lastIndexOf(\\"hello world, hello!\\", \\"Hello\\"); // should return -1. lastIndexOf(\\"abracadabra\\", \\"abra\\"); // should return 7. lastIndexOf(\\"abracadabra\\", \\"xyz\\"); // should return -1. lastIndexOf(\\"abracadabra\\", \\"\\"); // should return the length of the string, 11 in this case. ``` Additional notes: - The search should be case-sensitive. - If the `substring` is an empty string, the function should return the length of the `text`. - The length of the `text` and `substring` can be defined by the formula: 0 <= length < +Infinity - No characters should be omitted or ignored during the search, including whitespace characters.","solution":"def lastIndexOf(text, substring): Returns the last index at which the substring is found in the text. If the substring is not found, returns -1. If the substring is empty, returns the length of the text. if substring == \\"\\": return len(text) return text.rfind(substring)"},{"question":"Implement a function that takes an integer as input and returns a string representing the input number in Roman numerals. The input integer will be within the range from 1 to 3999. The function should handle both the conversion and the formatting required to properly represent the Roman numeral.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Parameters: num (int): The integer to be converted. Should be in the range 1 to 3999. Returns: str: The Roman numeral representation of the input integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Task You are arranging a sequence of numbers in a particular order. There is an array of `n` integers. You will rearrange the array so that all even numbers appear before all odd numbers, while maintaining the relative order of both even and odd numbers. For example, given the array `[3, 1, 2, 4]`, you should rearrange it to `[2, 4, 3, 1]`. # Input/Output - `[input]` array of integers `arr` The array of integers you need to rearrange. `1 <= arr.length <= 2 * 10^5` `-10^6 <= arr[i] <= 10^6` - `[output]` array of integers The rearranged array such that all even numbers come before all odd numbers, preserving the relative order of both even and odd numbers. Example ```python Input: [3, 1, 2, 4] Output: [2, 4, 3, 1] ```","solution":"def rearrange_even_odd(arr): Rearranges the array so that all even numbers appear before all odd numbers, while maintaining the relative order of both even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"A robot on a grid can move in four directions only: up (U), down (D), left (L), and right (R). The robot starts at the origin (0,0) and the grid is infinite. You need to write a function that determines whether a given sequence of moves causes the robot to return to the origin. The function should take a single string of moves and return `true` if the moves bring the robot back to the origin and `false` otherwise. **Examples:** ```python moves(\\"UD\\") -> true moves(\\"LL\\") -> false moves(\\"RRDD\\") -> false moves(\\"LDRU\\") -> true ``` **Explanation:** - \\"UD\\": The robot moves up (0,1), then down (0,0) which is back to the origin. Thus, it returns `true`. - \\"LL\\": The robot moves left twice to (-2,0), which is not the origin. Thus, it returns `false`. - \\"RRDD\\": The robot moves right twice to (2,0), then down twice to (2,-2), which is not the origin. Thus, it returns `false`. - \\"LDRU\\": The robot makes a loop going left to (-1,0), down to (-1,-1), right to (0,-1), and up to (0,0), returning to the origin. Thus, it returns `true`.","solution":"def moves(sequence): Determines whether a given sequence of moves causes the robot to return to the origin. Args: sequence (str): Sequence of moves consisting of characters \'U\', \'D\', \'L\', \'R\'. Returns: bool: True if the moves bring the robot back to the origin, False otherwise. x, y = 0, 0 for move in sequence: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Complete the function that accepts an integer parameter and returns its digital root. The digital root is the recursive sum of all the digits in a number. Given `n`, take the sum of the digits of `n`. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. Examples ``` 16 ==> 7 // 1 + 6 = 7 942 ==> 6 // 9 + 4 + 2 = 15, 1 + 5 = 6 132189 ==> 6 // 1 + 3 + 2 + 1 + 8 + 9 = 24, 2 + 4 = 6 493193 ==> 2 // 4 + 9 + 3 + 1 + 9 + 3 = 29, 2 + 9 = 11, 1 + 1 = 2 ```","solution":"def digital_root(n): Returns the digital root of a given integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"> Given a string consisting of lowercase alphabets, you need to find out whether it is possible to make the string a palindrome by rearranging its characters. If possible, return a string \\"YES\\", otherwise return \\"NO\\". # Function Signature ```python def can_form_palindrome(s: str) -> str: pass ``` # Input - `s`: A string of length `1 ≤ len(s) ≤ 10^6` consisting of lowercase English letters. # Output - Return a string \\"YES\\" if it\'s possible to rearrange the characters of `s` to form a palindrome, otherwise return \\"NO\\". # Examples ```python can_form_palindrome(\\"civic\\") # \\"YES\\" can_form_palindrome(\\"ivicc\\") # \\"YES\\" can_form_palindrome(\\"hello\\") # \\"NO\\" can_form_palindrome(\\"aabbcc\\") # \\"YES\\" can_form_palindrome(\\"aabbc\\") # \\"YES\\" can_form_palindrome(\\"abc\\") # \\"NO\\" ``` # Notes - A palindrome reads the same backward as forward. - In order to rearrange the string to form a palindrome, at most one character can have an odd count, all other characters must have even counts. - Consider the frequency of each character in the string to determine if it\'s possible to form a palindrome.","solution":"def can_form_palindrome(s: str) -> str: Determines if it is possible to rearrange the characters of a string to form a palindrome. Parameters: s (str): A string consisting of lowercase English letters. Returns: str: \\"YES\\" if a palindrome can be formed, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"# Task Given a string `s` consisting of lower-case alphabets and digits, find the longest substring that contains equal numbers of alphabets and digits. If there are multiple substrings with the same length, return the leftmost one. If there is no such substring, return an empty string. # Examples ```python longest_balanced_substring(\\"a1b2c\\") => \\"a1b2\\" longest_balanced_substring(\\"abc123\\") => \\"abc123\\" longest_balanced_substring(\\"a123bc45\\") => \\"a123bc\\" longest_balanced_substring(\\"abcdef\\") => \\"\\" ``` # Constraints * `1 <= len(s) <= 10^4` # Hints 1. Use a sliding window approach to keep track of the counts of alphabets and digits. 2. A hashmap can help in maintaining and checking conditions for equality of counts.","solution":"def longest_balanced_substring(s: str) -> str: Finds the longest substring with equal numbers of alphabets and digits. If multiple substrings have the same length, returns the leftmost one. If no such substring exists, returns an empty string. # Stores the first index where a certain balance appears balance_to_index = {0: -1} balance = 0 max_length = 0 start_index = 0 for i, char in enumerate(s): if char.isalpha(): balance += 1 else: balance -= 1 if balance in balance_to_index: current_length = i - balance_to_index[balance] if current_length > max_length: max_length = current_length start_index = balance_to_index[balance] + 1 else: balance_to_index[balance] = i return s[start_index:start_index + max_length]"},{"question":"Write a function that receives a string containing sentence(s) and returns a dictionary, where the keys are the words in the string and the values are the number of times each word appears. The function should ignore punctuation and be case-insensitive. Some examples: - For the input string `\\"Hello, hello! How are you?\\"`, the function should return `{\\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 1}`. - For the input string `\\"This is a test. This test is only a test.\\"`, the function should return `{\\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 3, \\"only\\": 1}`.","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary where the keys are the words in the string and the values are the number of times each word appears. # Remove punctuation and make lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() words = text.split() frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Create a function to shift the digits of an integer to the left by a given number of positions. If the number is positive, the shifted digits should remain positive, and if the number is negative, the shifted digits should remain negative. The function should handle both positive and negative integers and return the result as an integer. If the number of positions to shift exceeds the length of the number, return 0. Python: shift_digits(12345, 2) = 34512 shift_digits(-98765, 3) = -65219 shift_digits(1234, 5) = 0","solution":"def shift_digits(number, positions): Shifts the digits of an integer to the left by a given number of positions. If the number is positive, the shifted digits remain positive. If the number is negative, the shifted digits remain negative. If positions exceed the length of the number, return 0. is_negative = number < 0 number_str = str(abs(number)) if positions >= len(number_str): return 0 shifted_str = number_str[positions:] + number_str[:positions] result = int(shifted_str) return -result if is_negative else result"},{"question":"Write a function that takes an array of integers representing stock prices on consecutive days. Your function should return the maximum profit you can make by buying and selling the stock exactly once. If no profit can be made, return 0. Example: ``` [7, 1, 5, 3, 6, 4] --> 5 (buy on day 2 at price 1 and sell on day 5 at price 6) [7, 6, 4, 3, 1] --> 0 (no profit can be made) ```","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling the stock exactly once. If no profit can be made, returns 0. :param prices: List[int] - list of stock prices on consecutive days :return: int - maximum profit if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Task Write a function that takes an array of integers and an integer k, and finds the length of the shortest subarray with a sum greater than or equal to k. If no such subarray exists, return -1. # Input/Output - `[input]` integer array `arr` and integer `k` - `arr` will have at least one element and at most 10^5 elements. - `k` will be a positive integer (1 <= k <= 10^9). - `[output]` an integer representing the length of the shortest subarray with a sum greater than or equal to k, or -1 if no such subarray exists. # Example ```python arr = [2, 1, 3, 4, 1, 1, 2, 3] k = 7 # Output should be 2 (subarray [3, 4] or [4, 3]) arr = [1, 2, 3] k = 6 # Output should be 3 (subarray [1, 2, 3]) arr = [1, 2] k = 5 # Output should be -1 (no subarray sums to 5) ```","solution":"def shortest_subarray_sum_gte_k(arr, k): from collections import deque n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] deque_index = deque() min_length = n + 1 for i in range(n + 1): while deque_index and prefix_sum[i] - prefix_sum[deque_index[0]] >= k: min_length = min(min_length, i - deque_index.popleft()) while deque_index and prefix_sum[i] <= prefix_sum[deque_index[-1]]: deque_index.pop() deque_index.append(i) return min_length if min_length <= n else -1"},{"question":"You are given an array of integers and you have to find the longest increasing subsequence in it. An increasing subsequence is a sequence of numbers where each number is less than the number following it. Your task is to determine the length of this longest increasing subsequence and print it. When determining the longest increasing subsequence, the elements do not have to be consecutive in the original array, but their relative order must be preserved. Input: - The first line contains an integer N, the number of elements in the array. - The second line contains N integers representing the elements of the array. Output: - A single integer representing the length of the longest increasing subsequence. Constraints: - 1 leq N leq 10^4 - -10^9 leq text{array elements} leq 10^9 Sample Input: 8 10 9 2 5 3 7 101 18 Sample Output: 4 EXPLANATION: The longest increasing subsequence is [2, 3, 7, 101], so the output is 4.","solution":"def length_of_lis(arr): Given an array of integers, returns the length of the longest increasing subsequence. if not arr: return 0 n = len(arr) dp = [1] * n # dp[i] will be the length of the longest increasing subsequence ending at i for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage: # arr = [10, 9, 2, 5, 3, 7, 101, 18] # print(length_of_lis(arr)) # Output: 4"},{"question":"Given a list of integers, determine whether the array can be partitioned into two equal subsets such that the sum of the elements in both subsets is equal. If it can be partitioned, return `True`, otherwise return `False`. **Function Signature:** ```python def can_partition(nums: List[int]) -> bool: ``` **Input:** - An integer array `nums` where the size of the array will be between 1 and 200 inclusive, and each element will be between 1 and 100 inclusive. **Output:** - Return a boolean value `True` if the array can be partitioned into two subsets with equal sum, otherwise `False`. **Example:** ```python can_partition([1, 5, 11, 5]) -> True # Explanation: The array can be partitioned as [1, 5, 5] and [11] or [1, 5, 11] and [5] can_partition([1, 2, 3, 5]) -> False # Explanation: The array cannot be partitioned into equal sum subsets. ``` **Note:** - The sum of array elements will not exceed 20,000.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: Determine whether the list of integers can be partitioned into two subsets such that the sum of the elements in both subsets is equal. total_sum = sum(nums) # If total sum is odd, can\'t partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Overview In computer science, recursion refers to the technique of a function calling itself in order to solve a problem. This approach can be particularly useful for solving problems with a natural hierarchical structure, such as those involving trees or nested lists. Task Your task is to write a recursive function `sum_nested_list(nested_list)` that takes a nested list of integers and returns the sum of all integers in the list. The list can contain other lists as elements, which in turn can contain more lists and so on. For example: ```python sum_nested_list([1, 2, [3, 4], [5, [6, 7]]]) # should return 28 sum_nested_list([[1], [2, [3, 4], [5, [6, 7]], 8], 9]) # should return 45 sum_nested_list([]) # should return 0 ``` Your implementation should handle any level of nested lists and it should be efficient enough to handle reasonably large inputs.","solution":"def sum_nested_list(nested_list): Returns the sum of all integers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Alexa is participating in a quiz competition. The quiz consists of N questions, each with a different point value. For each question i (1 ≤ i ≤ N), Alexa can either answer the question correctly and gain Pi points or skip it and gain no points. However, there is a catch: if Alexa skips more than K questions, her total score will be zero regardless of the other points she has accumulated. Alexa wants to maximize her final score, considering the restriction on the number of questions she can skip. As Alexa\'s friend, your task is to help her determine the maximum score she can achieve. ----Input---- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers P1, P2, ..., PN representing the point values of the questions. ----Output---- For each test case, print a single line containing the maximum score Alexa can achieve. ----Constraints---- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 0 ≤ K < N - 1 ≤ Pi ≤ 1000 for each valid i ----Example---- Input: 2 5 2 10 20 30 40 50 4 1 5 15 10 25 Output: 140 50 ----Explanation---- Example case 1: Alexa can skip at most two questions. The optimal strategy is to skip the questions with the lowest points: 10 and 20, and answer the rest, which gives her a total score of 30 + 40 + 50 = 120. Example case 2: Alexa can skip at most one question. The optimal strategy is to answer the three highest scoring questions: 15, 10, and 25, which gives her a total score of 15 + 10 + 25 = 50. She skips the question with 5 points.","solution":"def max_score(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] points = test_cases[i][1] # Sort points in descending order points.sort(reverse=True) # Alexa can skip at most K questions, so she will answer the highest N-K questions max_points = sum(points[:N-K]) # Record the result for this test case results.append(max_points) return results"},{"question":"Alice and Bob are playing a game wherein they have to pass a ball back and forth. Initially, Alice has the ball and throws it to Bob. The ball passes between them according to the rules of the game described below. The game ends when Alice has held the ball K times. Rules: 1. Alice always throws the ball to Bob. 2. Bob always throws the ball back to Alice unless the ball has been thrown by Bob an odd number of times, in such case, Bob gives the ball to Eve. 3. Eve always throws the ball back to Alice. Calculate how many total throws are needed for Alice to have the ball K times. -----Input:----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains a single integer K. -----Output:----- For each test case, print a single integer denoting the number of throws needed. -----Constraints----- - 1 le T le 10 - 1 le K le 10^6 -----Sample Input:----- 2 1 2 -----Sample Output:----- 0 2","solution":"def total_throws(K): Returns the total number of throws needed for Alice to hold the ball K times. if K == 1: return 0 return 2 * (K - 1) def process_test_cases(T, cases): Process each test case and compute the number of throws required for each provided number of times Alice should hold the ball. results = [] for K in cases: results.append(total_throws(K)) return results"},{"question":"```if-not:sql Create a function (or write a script in Shell) that takes a list of integers and returns the second largest integer in the list. If the list has less than 2 unique integers, return None. ``` ```if:sql SQL Notes: You will be given a table, `integer_list`, with one column `int_value`. Return a table with a single column `second_largest` containing the second largest unique integer from the `int_value` column. If there are less than 2 unique integers, return None. # integer_list table schema * int_value INT # output table schema * second_largest INT ```","solution":"def second_largest(nums): Returns the second largest unique integer in the list. If there are less than 2 unique integers, return None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Task You are given a string `S` consisting of lowercase alphabetical characters and an integer `k`. Your task is to find a substring of length `k` that contains the maximum number of unique characters, and return that substring. If there are multiple substrings with the same number of unique characters, return the one which appears first in the string. Example For `S = \\"abcabcbb\\"` and `k = 3`, the result should be `\\"abc\\"`. For `S = \\"aaaa\\"` and `k = 2`, the result should be `\\"aa\\"`. For `S = \\"abcde\\"` and `k = 2`, the result should be `\\"ab\\"`. Input/Output - `[input]` string `S` - A string of length between 1 and 1000 (inclusive) consisting of lowercase alphabetical characters. - `[input]` integer `k` - An integer between `1` and the length of `S` (inclusive), denoting the length of the substring to find. - `[output]` string - A substring of length `k` that contains the maximum number of unique characters. If there are multiple results, return the first one.","solution":"def max_unique_substring(S, k): Returns the substring of length k that contains the maximum number of unique characters. If there are multiple such substrings, returns the one which appears first in the string. max_unique_count = 0 max_unique_substr = S[:k] for i in range(len(S) - k + 1): substring = S[i:i + k] unique_chars = set(substring) unique_count = len(unique_chars) if unique_count > max_unique_count: max_unique_count = unique_count max_unique_substr = substring return max_unique_substr"},{"question":"You are given two integer arrays, `arr1` and `arr2`, which represent the number of available items from two different warehouses. Write a function `combine_and_sort` that combines these two arrays and returns a new array that contains unique item quantities with each quantity sorted in ascending order. For example, given: ``` arr1 = [4, 2, 9, 10, 2, 4] arr2 = [3, 2, 8, 10, 6, 4] ``` The function should return: ``` [2, 3, 4, 6, 8, 9, 10] ``` NOTES: - Arrays may contain duplicate values. - The resulting array should not contain any duplicates. - Ensure that the resulting array is sorted in ascending order. - If both input arrays are empty, the function should return an empty array.","solution":"def combine_and_sort(arr1, arr2): Combines two arrays, removes duplicates, and returns a sorted array of unique elements. # Combine both arrays and convert to a set to remove duplicates combined_set = set(arr1) | set(arr2) # Convert the set back to a sorted list sorted_list = sorted(combined_set) return sorted_list"},{"question":"Create a function that takes a list of integers and returns a new list with the elements sorted in non-decreasing order. However, all even numbers should appear before all odd numbers, while maintaining their relative order from the original list. Examples: ``` sort_even_before_odd([8, 3, 2, 5, 4, 7]) should return [8, 2, 4, 3, 5, 7] sort_even_before_odd([1, 2, 3, 4, 5, 6]) should return [2, 4, 6, 1, 3, 5] sort_even_before_odd([9, 11, 5, 3, 2, 6]) should return [2, 6, 9, 11, 5, 3] ```","solution":"def sort_even_before_odd(lst): Returns a new list with sorted elements such that all even numbers come before all odd numbers, while maintaining their relative order from the original list. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"You are given an integer array `nums` and an integer `target`. You need to find if there exists a subset of elements in `nums` that sums up to `target`. If such a subset exists, return a list of indices of the subset elements; otherwise, return an empty list. Note that the solution should aim to minimize the number of elements in the subset. If there are multiple subsets with the minimal number of elements, you may return any one of them. -----Input----- The first line contains a single integer `n` (1 le n le 1000) — the length of the array `nums`. The second line contains `n` integers (1 le nums[i] le 1000). The third line contains a single integer `target` (0 le target le 10000). -----Output----- Output a list of indices (0-based) of the subset elements that sum up to `target`. If no such subset exists, return an empty list. -----Examples----- Input 5 1 2 3 7 8 10 Output [1, 3] Input 4 1 2 5 6 11 Output [1, 2, 3] Input 3 2 4 6 9 Output [] -----Note----- In the first example, one of the minimal subsets that sum up to 10 is made up of elements at indices [1, 3] (2+7=9). Another valid subset is made up of elements at indices [0, 1, 2] (1+2+3=6). In the second example, one valid subset that sums up to 11 is made up of elements at indices [1, 2, 3] (2+5+6=13). In the third example, no subset will sum up to the target value of 9, so an empty list is returned.","solution":"def subset_sum(nums, target): Finds a subset of nums that sums up to target. If such a subset exists, returns a list of indices of the subset elements. Otherwise, returns an empty list. n = len(nums) dp = [[[False, []] for _ in range(target + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < nums[i-1]: dp[i][j] = dp[i-1][j] else: if dp[i-1][j][0]: dp[i][j] = dp[i-1][j] if dp[i-1][j-nums[i-1]][0]: dp[i][j] = [True, dp[i-1][j-nums[i-1]][1] + [i-1]] if dp[n][target][0]: return dp[n][target][1] else: return [] # Example usage: # nums = [1, 2, 3, 7, 8] # target = 10 # print(subset_sum(nums, target))"},{"question":"Implement a function `is_palindrome` that takes a single `string` as input and returns `True` if the string is a palindrome, and `False` otherwise. A palindrome is a string that reads the same backward as forward. Ignore spaces and case sensitivity when determining if the string is a palindrome. **Hint:** You can use string slicing and the `lower()` method to help with this challenge. **Examples:** - `is_palindrome(\\"A man a plan a canal Panama\\")` should return `True`. - `is_palindrome(\\"racecar\\")` should return `True`. - `is_palindrome(\\"hello\\")` should return `False`. Good luck!","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. Ignores spaces and case sensitivity. # Removing spaces and converting to lowercase cleaned_s = \'\'.join(s.split()).lower() # Checking if the string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"In a company, employees are organized in a hierarchy where each employee has at most one direct manager, except for the CEO who has no manager. An employee can report to the company CEO directly or indirectly through other managers. The company wants to implement a function called `find_reporting_chain` that, given an employee, returns a list of all the managers from the employee up to the CEO, including both. Here’s how the employee structure is represented: ```python class Employee: def __init__(self, name, manager=None): self.name = name self.manager = manager ceo = Employee(\\"CEO\\") manager_a = Employee(\\"Manager A\\", ceo) manager_b = Employee(\\"Manager B\\", manager_a) employee = Employee(\\"Employee\\", manager_b) ``` Using the example above, calling `find_reporting_chain(employee)` should return: ``` [\\"Employee\\", \\"Manager B\\", \\"Manager A\\", \\"CEO\\"] ``` Write the function `find_reporting_chain` to achieve this. Assume all inputs are valid employee objects.","solution":"class Employee: def __init__(self, name, manager=None): self.name = name self.manager = manager def find_reporting_chain(employee): Returns a list of the reporting chain from the employee up to the CEO. chain = [] current_employee = employee while current_employee is not None: chain.append(current_employee.name) current_employee = current_employee.manager return chain"},{"question":"A gardener is designing a flower bed layout for different seasons. The layout should resemble a triangle formed by rows of flowers. The gardener has a number N representing the number of rows in the triangular flower bed. Help the gardener design the code to generate this pattern. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the pattern of flowers, each row containing asterisks (*). -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 -----Sample Input:----- 2 3 4 -----Sample Output:----- * ** *** * ** *** **** -----EXPLANATION:----- The gardener needs a triangular pattern of flowers where each row corresponds to the row number filled with asterisks (*). The number of rows is given by N for each test case.","solution":"def generate_flower_bed_pattern(T, test_cases): Generate triangular patterns of flowers for given number of rows. Parameters: T (int): Number of test cases. test_cases (list of int): List of integers where each integer represents the number of rows. Returns: list of str: List of flower bed patterns where each pattern is separated by a blank line. results = [] for N in test_cases: pattern = [] for i in range(1, N+1): pattern.append(\'*\' * i) results.append(\'n\'.join(pattern)) return \'nn\'.join(results)"},{"question":"Problem Statement You are given a list of integers representing the amount of rainfall collected each day over a certain period. Write a function that returns the longest sequence of days with increasing rainfall amounts. If there are multiple sequences with the same length, return the first one encountered. # Input/Output - Input: A list of integers `rainfall`. - Output: A list of integers representing the longest sequence of days with increasing rainfall amounts. # Examples ```python longest_increasing_rainfall([1, 2, 3, 2, 5, 6, 7]) --> [1, 2, 3] longest_increasing_rainfall([10, 5, 6, 1, 2, 3, 4, 1, 2]) --> [1, 2, 3, 4] longest_increasing_rainfall([9, 5, 4, 3, 3, 2, 1]) --> [9] ``` # Constraints - The input list will contain only non-negative integers. - The length of the input list will be between 1 and 10,000. - Each element in the input list will be at most 10,000.","solution":"def longest_increasing_rainfall(rainfall): Returns the longest sequence of days with increasing rainfall amounts. Parameters: rainfall (list): A list of integers representing the rainfall amounts each day. Returns: list: Longest sequence of days with increasing rainfall amounts. if not rainfall: return [] longest_sequence = [] current_sequence = [] for i in range(len(rainfall)): if i == 0 or rainfall[i] > rainfall[i - 1]: current_sequence.append(rainfall[i]) else: if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence current_sequence = [rainfall[i]] if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"**Background** Binary trees are one of the fundamental data structures in computer science. One common problem involving binary trees is to check whether a binary tree is a Binary Search Tree (BST). A BST is a binary tree in which the value of each node is greater than all the values in its left subtree and less than all the values in its right subtree. In addition, both the left and right subtrees must also be binary search trees. **Task** Write a function that takes the root node of a binary tree and determines if the tree is a valid Binary Search Tree. The function should return `True` if the given tree is a valid BST, and `False` otherwise. You may define the binary tree node as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Here is the signature of the function: ```python def isValidBST(root: TreeNode) -> bool: ``` **Examples** ```python # Example 1 # Input: # 2 # / # 1 3 # Output: True # Example 2 # Input: # 5 # / # 1 4 # / # 3 6 # Output: False # Explanation: The root node\'s value is 5 but its right child\'s value is 4. # Example 3 # Input: # 10 # / # 5 15 # / # 6 20 # Output: False # Explanation: The root node\'s right child\'s left child value is 6 which is less # than 10. ``` **Hints** - Think about how you can keep track of the lower and upper limits for each node to determine if the tree remains valid as you traverse it. - You might need a helper function to pass these limits throughout recursion. **Resources** If you want to read more about binary trees and BSTs: https://en.wikipedia.org/wiki/Binary_search_tree","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root: TreeNode) -> bool: def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"A popular problem in computer science is the \\"Dining Philosopher\\" problem, which illustrates synchronization and deadlock avoidance mechanisms in concurrent programming. For this problem, you need to simulate a simplified version where multiple philosophers sit at a table, each engaged in the activity of eating and thinking. Each philosopher needs two forks to eat, and the challenge is to ensure that no philosopher starves due to lack of forks while avoiding deadlocks. You need to implement a function: ```python def diningPhilosophers(n, eatTime, thinkTime, maxRounds): ``` It takes in: 1. \\"n\\" a positive integer, representing the number of philosophers (and forks) at the table. 2. \\"eatTime\\" a positive integer, representing the time it takes for a philosopher to finish eating once they have acquired two forks. 3. \\"thinkTime\\" a positive integer, representing the time it takes for a philosopher to finish thinking before they attempt to eat again. 4. \\"maxRounds\\" a non-negative integer, representing the maximum number of rounds each philosopher will try to eat (or -1 if they continue indefinitely). The function does not return anything; instead, it should print to the console the state of each philosopher (either \\"Eating\\" or \\"Thinking\\") at each time unit according to the format \\"Philosopher X is Thinking/Eating\\" where X is the philosopher’s index (0 to n-1). Constraints: - The philosophers should follow the protocol: 1. Think for `thinkTime` units. 2. Attempt to pick up the two forks (if they are available, they will eat; otherwise, they will keep trying until they get both forks). 3. Eat for `eatTime` units. 4. Put down the forks and return to thinking. - Ensure that there\'s no deadlock and each philosopher gets a chance to eat. Example: ```python diningPhilosophers(3, 5, 3, 2) ``` Output: ``` Philosopher 0 is Thinking Philosopher 1 is Thinking Philosopher 2 is Thinking Philosopher 0 is Eating Philosopher 1 is Eating Philosopher 2 is Eating Philosopher 0 is Thinking Philosopher 1 is Thinking Philosopher 2 is Thinking ... ``` Note: The actual output might vary depending on the order in which philosophers pick up forks, but the sequence of states should demonstrate that all philosophers eventually get a chance to eat without any deadlock occurring.","solution":"import threading import time class Fork: def __init__(self): self.lock = threading.Lock() class Philosopher(threading.Thread): def __init__(self, index, leftFork, rightFork, eatTime, thinkTime, maxRounds): threading.Thread.__init__(self) self.index = index self.name = f\\"Philosopher {index}\\" self.leftFork = leftFork self.rightFork = rightFork self.eatTime = eatTime self.thinkTime = thinkTime self.maxRounds = maxRounds def run(self): rounds = 0 while self.maxRounds == -1 or rounds < self.maxRounds: print(f\\"{self.name} is Thinking\\") time.sleep(self.thinkTime) firstFork, secondFork = (self.leftFork, self.rightFork) if self.index % 2 == 0 else (self.rightFork, self.leftFork) with firstFork.lock: with secondFork.lock: print(f\\"{self.name} is Eating\\") time.sleep(self.eatTime) rounds += 1 def diningPhilosophers(n, eatTime, thinkTime, maxRounds): forks = [Fork() for _ in range(n)] philosophers = [Philosopher(i, forks[i], forks[(i+1) % n], eatTime, thinkTime, maxRounds) for i in range(n)] for philosopher in philosophers: philosopher.start() for philosopher in philosophers: philosopher.join()"},{"question":"Given a list of integers heights representing the heights (in meters) of buildings in a city skyline, return the index of the building that has the maximum clear view to the right. A building is said to have clear view to the right if there are no taller or equally tall buildings between it and the end of the list. Example 1: Input: heights = [3, 2, 4, 2, 1] Output: 2 Example 2: Input: heights = [5, 3, 4, 4, 2] Output: 0 Example 3: Input: heights = [1, 1, 1, 1, 1] Output: 4 Example 4: Input: heights = [7, 1, 2, 4, 6, 5] Output: 0 Constraints: 1. 1 <= heights.length <= 104 2. 0 <= heights[i] <= 106","solution":"def max_clear_view(heights): Returns the index of the building that has the maximum clear view to the right. max_index = len(heights) - 1 max_height = heights[-1] for i in range(len(heights) - 2, -1, -1): if heights[i] > max_height: max_index = i max_height = heights[i] return max_index"},{"question":"In a galaxy far, far away, the Galactic Federation is planning to construct a new hyperspace route connecting different star systems. The construction is organized in a series of steps, where each step requires a different amount of energy. The energy required for each step is provided in an array. However, the construction crew is allowed to take breaks between the steps, meaning they can choose any non-empty contiguous subsequence of steps to work on consecutively. The objective is to determine the maximum energy that can be gathered from any such subsequence of construction steps. -----Input:----- - The first line of the input contains a single integer N representing the number of construction steps. - The second line contains N space-separated integers E_1, E_2, ldots, E_N, where E_i represents the energy required for the i-th construction step. -----Output:----- Print a single integer, the maximum energy that can be gathered from any contiguous subsequence of construction steps. -----Constraints----- - 1 le N le 3 cdot 10^5 - -10^9 le E_i le 10^9 -----Sample Input:----- 5 1 -2 3 5 -1 -----Sample Output:----- 8","solution":"def max_energy(N, energy_levels): Returns the maximum energy that can be gathered from any contiguous subsequence of construction steps. Parameters: N (int): The number of construction steps. energy_levels (list of int): The energy required for each construction step. Return: int: The maximum energy that can be gathered. max_current = max_global = energy_levels[0] for i in range(1, N): max_current = max(energy_levels[i], max_current + energy_levels[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function **diamond(n)** that generates a diamond-shaped pattern given an odd number **n**. The diamond has the widest part in the middle row, and each row has increasing stars up to the middle row and then decreasing. The function should return the pattern as a string. Keep in mind: - If **n** is not an odd number, return an empty string. - The diamond should be symmetric and centered relative to its middle row. - The function should follow this structure: ``` def diamond(n): # your code here ``` Examples: ``` diamond(1) * ``` ``` diamond(3) * *** * ``` ``` diamond(5) * *** ***** *** * ``` ``` diamond(7) * *** ***** ******* ***** *** * ```","solution":"def diamond(n): Generates a diamond pattern given an odd number n. If n is not an odd number, returns an empty string. if n <= 0 or n % 2 == 0: return \\"\\" lines = [] mid_point = n // 2 for i in range(n): if i <= mid_point: num_stars = 2 * i + 1 else: num_stars = 2 * (n - i) - 1 line = \\" \\" * ((n - num_stars) // 2) + \\"*\\" * num_stars lines.append(line) return \\"n\\".join(lines)"},{"question":"You\'re developing a flight booking system that needs to handle various time zones. While the system primarily uses Coordinated Universal Time (UTC), certain features require displaying and converting to local times for different cities. Write a function `utc_to_local(utc_time, city)` that takes a time in UTC and the name of a city, and returns the local time in that city. The function should support the following cities and their corresponding time differences (in hours) from UTC: - New York: -5 - London: 0 - Paris: +1 - Tokyo: +9 - Sydney: +11 If the input city is not in the list, your function should return `None`. The `utc_time` parameter will be a string in the format \\"HH:MM\\". For example: - `utc_to_local(\\"15:30\\", \\"New York\\")` should return \\"10:30\\" - `utc_to_local(\\"08:00\\", \\"Sydney\\")` should return \\"19:00\\" - `utc_to_local(\\"13:15\\", \\"London\\")` should return \\"13:15\\" - `utc_to_local(\\"19:45\\", \\"Tokyo\\")` should return \\"04:45\\" - `utc_to_local(\\"22:00\\", \\"Mumbai\\")` should return `None`","solution":"def utc_to_local(utc_time, city): Converts a time in UTC to local time for a given city. :param utc_time: str, time in UTC in the format \\"HH:MM\\" :param city: str, name of the city :return: str, converted local time in the format \\"HH:MM\\" or None if city is not supported time_offsets = { \\"New York\\": -5, \\"London\\": 0, \\"Paris\\": +1, \\"Tokyo\\": +9, \\"Sydney\\": +11 } if city not in time_offsets: return None hours, minutes = map(int, utc_time.split(\':\')) local_hours = (hours + time_offsets[city]) % 24 return f\\"{local_hours:02}:{minutes:02}\\""},{"question":"You are given a list of daily temperatures, `temperatures`, that represents the average temperatures for each day of a given period. Write a function `days_until_warmer(temperatures)` that returns a list where, for each day in the input list, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Function signature: ```python def days_until_warmer(temperatures: List[int]) -> List[int]: pass ``` **Input:** - `temperatures`: a list of integers where each integer represents the average temperature of a day in the given period. **Output:** - A list where each element represents the number of days one has to wait for a warmer temperature. **Examples:** ```python days_until_warmer([73, 74, 75, 71, 69, 72, 76, 73]) # Outputs: [1, 1, 4, 2, 1, 1, 0, 0] days_until_warmer([30, 40, 50, 60]) # Outputs: [1, 1, 1, 0] days_until_warmer([30, 20, 10, 0]) # Outputs: [0, 0, 0, 0] ``` **Hint:** - Think in terms of using a stack to solve this efficiently.","solution":"from typing import List def days_until_warmer(temperatures: List[int]) -> List[int]: n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"A company is organizing a series of promotions in a supermarket. There are n different types of products, and each type has exactly one product. Some products can be paired together to offer a double discount. The products can be represented as nodes in an undirected graph, and the edges represent the possible pairings for the double discount. There are exactly m possible pairings. You are given the price of each product and the double discount for every possible pair. The goal is to determine the minimum cost to buy all products where only one pairing is used for the double discount. A pairing can only be used once and each product can only be involved in one pairing. If no pair is used for discount, you need to buy each product at its full price. -----Input----- The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000). The second line contains n integers, the prices of the products, price_{i} (1 ≤ price_{i} ≤ 100000). Each of the next m lines contains a description of a pairing. The i-th of these lines contains three integers a_{i}, b_{i}, discount_{i} (1 ≤ a_{i}, b_{i} ≤ n, 1 ≤ discount_{i} ≤ 100000), indicating that products a_{i} and b_{i} can be paired together to offer a discount of discount_{i}. -----Output----- Print a single integer: the minimum cost to buy all the products. -----Examples----- Input 4 3 4 7 2 5 1 2 3 1 3 2 3 4 4 Output 14 Input 3 1 6 4 5 1 2 2 Output 13 -----Note----- In the first sample, the best way is to use the pairing (3,4) with a discount of 4, resulting in buying all products with a total cost of 4 + 7 + 2 + 5 - 4 = 14. In the second sample, the best way is to use the pairing (1,2) with a discount of 2, resulting in buying all products with a total cost of 6 + 4 + 5 - 2 = 13.","solution":"def minimum_cost_to_buy_products(n, m, prices, pairings): # Initialize the total cost as the sum of all product prices total_cost = sum(prices) # Initialize the best discount as 0 best_discount = 0 # Loop through each pairing to find the best discount achieved for a, b, discount in pairings: best_discount = max(best_discount, discount) # The minimum cost is the total cost minus the best discount available min_cost = total_cost - best_discount return min_cost"},{"question":"Nora is an enthusiast of number sequences and loves discovering interesting properties about them. Recently, she came across a peculiar sequence called the \'ZU Sequence\'. The ZU Sequence is generated by the following rule: - Start with the number 1. - For each subsequent number, if the current number is even, halve it; if it\'s odd, multiply it by 3 and add 1. Given a number X, Nora wants to determine the length of the sequence starting from X until the sequence reaches 1 for the first time. -----Input:----- - The first line contains an integer T, denoting the number of test cases. T test cases will follow, each containing one line. - Each of the next T lines contains a single integer X (1 leq X leq 10^6). -----Output:----- - For each test case, output a single integer denoting the length of the ZU Sequence starting from X until it reaches 1. Note: The sequence always reaches 1 for every starting integer X. -----Constraints----- - T leq 1000 - 1 leq X leq 10^6 -----Sample Input:----- 3 4 7 1 -----Sample Output:----- 3 17 1 -----Explanation:----- - For the first test case, starting with 4: 4 -> 2 -> 1 (length = 3). - For the second test case, starting with 7: 7 -> 22 -> 11 -> 34 -> 17 -> 52 -> 26 -> 13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1 (length = 17). - For the third test case, starting with 1: 1 (length = 1).","solution":"def zu_sequence_length(x): Returns the length of the ZU Sequence starting from x until it reaches 1. length = 1 while x != 1: if x % 2 == 0: x //= 2 else: x = 3 * x + 1 length += 1 return length def calculate_zu_sequences(test_cases): Takes a list of test cases and returns a list of the lengths of the ZU sequences for each test case. return [zu_sequence_length(x) for x in test_cases] # Example usage: # T = 3 # test_cases = [4, 7, 1] # print(calculate_zu_sequences(test_cases)) # Output: [3, 17, 1]"},{"question":"A large number of students have enrolled in a coding contest. Given a list of contest scores, you need to find the highest score and the second highest score among the participants. If there is no second highest score (i.e., all participants have the same score), return \\"NO SECOND HIGHEST\\". -----Input:----- - The first line will contain N, the number of scores. - The second line contains N integers separated by a space, representing the scores of the participants. -----Output:----- Output a single line containing two integers separated by a space: the highest score and the second highest score. If there is no second highest score, output \\"NO SECOND HIGHEST\\". -----Constraints----- - 1 leq N leq 100000 - 0 leq score leq 100000 -----Sample Input:----- 5 10 20 20 30 30 -----Sample Output:----- 30 20 -----Sample Input:----- 3 50 50 50 -----Sample Output:----- NO SECOND HIGHEST -----Explanation:----- In the first sample, the highest score is 30 and the second highest score is 20. In the second sample, all participants have the same score, so there is no second highest score.","solution":"def find_highest_and_second_highest(scores): unique_scores = sorted(set(scores), reverse=True) if len(unique_scores) < 2: return \\"NO SECOND HIGHEST\\" else: return f\\"{unique_scores[0]} {unique_scores[1]}\\" def process_input_lines(lines): n = int(lines[0].strip()) scores = list(map(int, lines[1].strip().split())) return find_highest_and_second_highest(scores)"},{"question":"In a fictional game, there is a board represented by an N x N grid. Each cell of the grid contains either 0, 1, or 2 which represents different types of terrain on the board: plain (0), mountain (1), and water (2). Players can travel only on plains and mountains but not on water. Given a starting position (x, y) and a target position (p, q), determine if it is possible to reach the target position from the starting position by moving up, down, left, or right. You are also given T queries where each query consists of a starting point, ending point, and the board configuration. -----Input----- - The first line contains an integer T, the number of queries. - For each query: - The first line contains a single integer N which represents the dimensions of the N x N board. - The next N lines each contain N integers (0, 1, or 2) representing the grid. - The next line contains four integers x, y, p, q representing the starting and target positions. -----Output----- - For each query, output \\"yes\\" (without quotes) if it is possible to reach the target position from the starting position, otherwise output \\"no\\" (without quotes). -----Constraints and Subtasks----- - 1 <= T <= 100 - 1 <= N <= 100 - 0 <= x, y, p, q < N - Each cell in the grid is either 0, 1, or 2. -----Example----- Input: 2 4 0 0 2 1 0 1 1 2 2 1 0 0 0 1 0 0 0 0 3 3 3 0 1 2 1 1 2 2 2 0 0 0 2 2 Output: yes no","solution":"from collections import deque def is_reachable(N, grid, start, target): x, y = start p, q = target if grid[x][y] == 2 or grid[p][q] == 2: return \\"no\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = deque([(x, y)]) visited.add((x, y)) while queue: curr_x, curr_y = queue.popleft() if (curr_x, curr_y) == (p, q): return \\"yes\\" for dx, dy in directions: nx, ny = curr_x + dx, curr_y + dy if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] != 2 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"no\\" def process_queries(T, queries): results = [] for query in queries: N, grid, start, target = query results.append(is_reachable(N, grid, start, target)) return results def main(T, query_data): queries = [] index = 0 for _ in range(T): N = query_data[index] index += 1 grid = [] for _ in range(N): grid.append(query_data[index]) index += 1 start = query_data[index] target = query_data[index + 1] index += 2 queries.append((N, grid, start, target)) return process_queries(T, queries)"},{"question":"You have a string S consisting of lowercase English letters. You can perform the following operation any number of times: 1. Choose any substring of S that starts and ends with the same character and remove it from S. Your task is to determine whether it is possible to completely remove all characters from the string S by performing the above operation any number of times. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case consists of a single line containing the string S. -----Output----- - For each test case, output \\"YES\\" if it is possible to remove all characters from the string S, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 -----Example----- Input: 2 abba abc Output: YES NO -----Explanation----- Example case 1: - Perform the following operations: - Remove the substring \\"abba\\" (starts and ends with \'a\'). - All characters can be removed, so the answer is YES. Example case 2: - There is no way to remove all characters, as \\"abc\\" cannot be fully removed by the given operation. - Hence, the answer is NO.","solution":"def can_remove_all_characters(S): Returns \\"YES\\" if it is possible to remove all characters from the string S, otherwise returns \\"NO\\". from collections import Counter char_count = Counter(S) for count in char_count.values(): if count % 2 != 0: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): Processes multiple test cases. results = [] for S in test_cases: results.append(can_remove_all_characters(S)) return results"},{"question":"You have a list of integers and you need to find the longest consecutive subsequence of increasing numbers in the list. The sequence does not need to be contiguous in the original list, but must appear in the same order. Write a function that accepts a list of integers and returns the length of the longest increasing subsequence. **Example:** 1. For the input `lst = [10, 22, 9, 33, 21, 50, 41, 60, 80]`, the function should return `6` because the longest increasing subsequence is `[10, 22, 33, 50, 60, 80]`. 2. For the input `lst = [3, 10, 2, 1, 20]`, the function should return `3` because the longest increasing subsequence is `[3, 10, 20]`. 3. For the input `lst = [50, 3, 10, 7, 40, 80]`, the function should return `4` because the longest increasing subsequence is `[3, 7, 40, 80]`. **Input:** - A list of integers. **Output:** - An integer representing the length of the longest increasing subsequence.","solution":"def longest_increasing_subsequence(lst): Returns the length of the longest increasing subsequence. Args: lst: List of integers. Returns: Integer representing the length of the longest increasing subsequence. if not lst: return 0 n = len(lst) lis = [1] * n for i in range(1, n): for j in range(0, i): if lst[i] > lst[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"A valid parenthesis sequence is a string of parentheses that is either empty, or any valid parenthesis sequence `S` such as `(S)`, or a concatenation of two valid parenthesis sequences `S1` and `S2`, written as `S1S2`. Your task is to determine whether a given string of parentheses is a valid parenthesis sequence. If it is valid, your program should output \\"VALID\\". Otherwise, it should output \\"INVALID\\". -----Input:----- A single line containing a string of parentheses. The length of the string will not exceed 1,000 characters. -----Output:----- A single line with \\"VALID\\" if the parentheses form a valid sequence, and \\"INVALID\\" otherwise. -----Constraints:----- - The input string will contain only the characters `(` and `)`. -----Sample input----- ()()(()) -----Sample output----- VALID","solution":"def is_valid_parenthesis_sequence(s): Returns \'VALID\' if the input string is a valid parenthesis sequence, otherwise returns \'INVALID\'. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \'INVALID\' stack.pop() return \'VALID\' if not stack else \'INVALID\'"},{"question":"Rewrite the following function so that it prints \\"fizz\\" for multiples of three, \\"buzz\\" for multiples of five, and \\"fizzbuzz\\" for multiples of both three and five, in the given range. For numbers that are not multiples of three or five, print the number itself. Implement the function `fizzBuzzCustom(start, end)` that takes two integers, `start` and `end`, and prints the appropriate values for numbers in the inclusive range from `start` to `end`. *Example*: ```python fizzBuzzCustom(1, 15) ``` *Output*: ``` 1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz ``` *Note*: Ensure that the function works correctly for any range of positive integers provided.","solution":"def fizzBuzzCustom(start, end): Prints \'fizz\' for multiples of three, \'buzz\' for multiples of five, and \'fizzbuzz\' for multiples of both three and five for numbers in the inclusive range from `start` to `end`. For numbers that are not multiples of three or five, it prints the number itself. for num in range(start, end + 1): if num % 3 == 0 and num % 5 == 0: print(\\"fizzbuzz\\") elif num % 3 == 0: print(\\"fizz\\") elif num % 5 == 0: print(\\"buzz\\") else: print(num)"},{"question":"You are given a rectangular grid consisting of \'N\' rows and \'M\' columns with each cell either being land (\'L\') or water (\'W\'). You need to find the largest rectangular landmass (contiguous section of \'L\' cells) that can be formed on the grid. A landmass is defined as a rectangle containing only \'L\' cells. -----Input----- The first line contains two integers \'N\' and \'M\' (1 <= N, M <= 1000) - the dimensions of the grid. Each of the next \'N\' lines contains \'M\' characters, each either \'L\' or \'W\', representing the grid. -----Output----- Output one integer - the area of the largest rectangular landmass that can be formed on the grid. -----Constraints----- - The grid dimensions are such that 1 <= N, M <= 1000. - The grid is guaranteed to contain at least one \'L\' cell. - Each character in the grid is either \'L\' (land) or \'W\' (water). -----Example----- Input: 4 5 LWLWL LLLWW WLLWL LLLWL Output: 6 -----Explanation----- In this example, the largest contiguous rectangle of \'L\' cells is a 2x3 area starting in row 2, column 1, spanning up to row 3, column 3. The area of this rectangle is 2 * 3 = 6.","solution":"def maximalRectangle(grid): if not grid: return 0 max_area = 0 N = len(grid) M = len(grid[0]) heights = [0] * M for row in grid: for idx in range(M): if row[idx] == \'L\': heights[idx] += 1 else: heights[idx] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area # Function to take grid as input and return the area of the largest rectangle of \'L\' def findLargestLandmass(N, M, grid): return maximalRectangle(grid)"},{"question":"A company is organizing a relay race event. There are N participants, each identified by a unique integer from 1 to N. Each participant has a distinct speed, and their speed is given as an array of integers where the i-th integer represents the speed of the participant with ID i. In a relay race, participants form teams of exactly two people. The performance of a team is determined by the sum of the speeds of the two members. Given the array of speeds and the number of participants N, your task is to determine the number of unique but unordered teams that have a speed sum greater than a given value S. ————————————————————————————————————— INPUT • The first line contains a single integer T, the number of test cases. • Each test case consists of two lines: - The first line contains two integers N and S. - The second line contains N space-separated integers representing the speeds of participants. ———————————————————————————————————————— OUTPUT • For each test case, output a single line containing one integer — the number of unique teams with a speed sum greater than S. ————————————————————————————————————— CONSTRAINTS • 1 ≤ T ≤ 50 • 2 ≤ N ≤ 10^5 • 1 ≤ speed of each participant ≤ 10^3 • 1 ≤ S ≤ 2 * 10^3 ————————————————————————————————————— Example Input 2 4 5 1 3 5 7 3 8 4 2 6 ———————————————————————————————————————— Example Output 5 1","solution":"def count_teams_with_sum_greater_than_S(T, test_cases): results = [] for t in range(T): N, S = test_cases[t][0] speeds = sorted(test_cases[t][1]) count = 0 left, right = 0, N - 1 # Use two-pointer technique to count valid teams while left < right: if speeds[left] + speeds[right] > S: count += (right - left) right -= 1 else: left += 1 results.append(count) return results"},{"question":"A shop offers various discounts on products for promotional events, but the discounts are staggered based on the total bill amount. Write a function that takes in the total bill amount in dollars and returns the final amount after applying the correct discount. The discount categories are as follows: - If the total bill is less than 50: no discount. - If the total bill is between 50 and 100 (inclusive): 10% discount. - If the total bill is between 101 and 200 (inclusive): 20% discount. - If the total bill is more than 200: 30% discount. Implement a function `calculate_final_bill` which accepts an integer `total_bill` and returns the final bill amount after applying the appropriate discount. Ensure the result is rounded to two decimal places. Examples: - `calculate_final_bill(45)` should return `45.00`. - `calculate_final_bill(75)` should return `67.50`. - `calculate_final_bill(150)` should return `120.00`. - `calculate_final_bill(250)` should return `175.00`.","solution":"def calculate_final_bill(total_bill): Returns the final bill amount after applying the appropriate discount. Parameters: total_bill: int - The total bill amount in dollars before the discount. Returns: float - The final bill amount after the discount, rounded to two decimal places. if total_bill < 50: discount = 0 elif 50 <= total_bill <= 100: discount = 0.10 elif 101 <= total_bill <= 200: discount = 0.20 else: discount = 0.30 final_bill = total_bill * (1 - discount) return round(final_bill, 2)"},{"question":"You are given an integer n. You need to construct a permutation of numbers from 1 to n, such that the sum of absolute differences between each pair of consecutive elements in the permutation is maximized. A permutation of an array of integers is an arrangement of its elements into a sequence or linear order. Your task is to find such a permutation. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The only line of the test case contains one integer n (2 le n le 1000) — the size of the permutation. -----Output----- For each test case, print the permutation of length n that maximizes the sum of absolute differences between each pair of consecutive elements. -----Example----- Input 3 2 3 4 Output 1 2 3 1 2 4 1 3 2","solution":"def max_absolute_difference_permutation(n): Returns a permutation of numbers from 1 to n that maximizes the sum of absolute differences between consecutive elements. result = [] left = 1 right = n while left <= right: if left == right: result.append(left) else: result.append(right) result.append(left) left += 1 right -= 1 return result def process_cases(t, cases): results = [] for n in cases: results.append(max_absolute_difference_permutation(n)) return results"},{"question":"John loves geometry and he is fascinated by triangular numbers. He defines a triangular number as the number of dots forming an equilateral triangle. For example, the first few triangular numbers are 1, 3, 6, 10, 15. John wants to generalize it to an N-sided polygon where N > 2. John defines a polygonal number as the number of dots forming an N-sided polygon. For a given N, the k-th N-gonal number (P(N, k)) can be defined as: P(N, k) = (k * ((N - 2) * k - (N - 4))) / 2 John decides to write a program to generate the first M N-gonal numbers. Can you help him? -----Input----- First line contains T, number of test cases. Each test case consists of two integers N and M in one line. -----Output----- For each test case, output the first M N-gonal numbers in a single line separated by spaces. -----Constraints----- - 1 ≤ T ≤ 10 - 3 ≤ N ≤ 20 - 1 ≤ M ≤ 100 -----Example----- Input: 2 3 5 4 4 Output: 1 3 6 10 15 1 4 9 16 -----Explanation----- Test case 1: For N = 3 (triangular numbers), the first 5 numbers are: 1, 3, 6, 10, and 15. Test case 2: For N = 4 (square numbers), the first 4 numbers are: 1, 4, 9, and 16.","solution":"def polygonal_numbers(N, M): Return the first M N-gonal numbers. numbers = [] for k in range(1, M + 1): pn = (k * ((N - 2) * k - (N - 4))) // 2 numbers.append(pn) return numbers def generate_polygonal_numbers(test_cases): Generate the first M N-gonal numbers for each test case. results = [] for N, M in test_cases: results.append(polygonal_numbers(N, M)) return results"},{"question":"You are given an array of integers where each integer represents the number of a particular item\'s inventory in a warehouse. You need to determine the number of unique items and return a dictionary where keys are the unique inventory amounts and values are the counts of each unique amount. For example, given the array [4, 4, 8, 15, 16, 8, 23, 42, 4, 15], the unique inventory amounts are [4, 8, 15, 16, 23, 42]. The count of each unique amount is: - 4 appears 3 times - 8 appears 2 times - 15 appears 2 times - 16 appears 1 time - 23 appears 1 time - 42 appears 1 time Thus, the resulting dictionary is: {4: 3, 8: 2, 15: 2, 16: 1, 23: 1, 42: 1} Create a function `inventory_count` that takes in an array of integers and returns the described dictionary. ```inventory_count([1, 2, 3, 1, 2, 5, 1]) // {1: 3, 2: 2, 3: 1, 5: 1}``` ```inventory_count([10, 20, 30, 10, 20, 10]) // {10: 3, 20: 2, 30: 1}``` ```inventory_count([]) // {}``` ```inventory_count([5, 5, 5, 5, 5]) // {5: 5}``` ```inventory_count([4, 6, 8, 6, 10, 8, 4]) // {4: 2, 6: 2, 8: 2, 10: 1}```","solution":"def inventory_count(inventory): Returns a dictionary where keys are the unique inventory amounts and values are the counts of each unique amount. count_dict = {} for item in inventory: if item in count_dict: count_dict[item] += 1 else: count_dict[item] = 1 return count_dict"},{"question":"*** Matrix Diagonal Sum *** Consider a square matrix represented as a nested list in Python, where each element is a row of the matrix. You need to write a function `diagonal_sum(matrix)` that calculates the sum of all diagonal elements of the matrix. The matrix size is always n x n (where n is the number of rows and columns). Your function should return a single integer representing the sum of the primary diagonal elements. Hint: The primary diagonal of a matrix consists of elements that have equal row and column indices. Examples: ```python diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) = 15 diagonal_sum([[5, 4, 3], [2, 1, 0], [9, 8, 7]]) = 13 diagonal_sum([[3]]) = 3 ```","solution":"def diagonal_sum(matrix): Calculate the sum of the primary diagonal elements of a square matrix. Args: matrix (list of list of int): A 2D list representing the square matrix. Returns: int: Sum of the primary diagonal elements. n = len(matrix) return sum(matrix[i][i] for i in range(n))"},{"question":"Given a list of integers, find all the contiguous subarrays within which the elements are in strictly increasing order. A contiguous subarray is a subset of elements from the array, which are next to each other in order. You need to return the count of such subarrays. For example, for the input array `[1, 2, 3, 4, 1]`, the strictly increasing contiguous subarrays are: - `[1, 2]` - `[2, 3]` - `[3, 4]` - `[1, 2, 3]` - `[2, 3, 4]` - `[1, 2, 3, 4]` There are a total of 6 strictly increasing contiguous subarrays. Write a function `count_increasing_subarrays(arr)` that takes in a list of integers and returns the total number of strictly increasing contiguous subarrays. For instance: ``` count_increasing_subarrays([1, 2, 3, 4, 1]) => 6 count_increasing_subarrays([3, 3, 3]) => 0 count_increasing_subarrays([1, 2, 4, 3, 5, 7]) => 6 ``` Note: The input array can have up to `10000` elements. Ensure your solution is efficient.","solution":"def count_increasing_subarrays(arr): Returns the count of strictly increasing contiguous subarrays. n = len(arr) if n < 2: return 0 count = 0 length = 1 # Length of current increasing subarray for i in range(1, n): if arr[i] > arr[i - 1]: length += 1 else: if length > 1: count += (length - 1) * length // 2 length = 1 if length > 1: count += (length - 1) * length // 2 return count"},{"question":"You are developing a function named `find_closest` that helps locate the nearest point of interest (POI) from a given list. Each point of interest is represented by a tuple containing its name and its coordinates (x, y) in a 2D plane. Your goal is to write a function `find_closest(origin: Tuple[int, int], pois: List[Tuple[str, Tuple[int, int]]]) -> str` that takes in an origin point and a list of POIs, and returns the name of the closest POI to the origin. If multiple POIs are equidistant to the origin, return the lexicographically smallest name among them. **Constraints:** - The coordinates are integers and may be negative. - The list of POIs contains at least one point. - No two POIs have the exact same name. **Example:** ```python origin = (0, 0) pois = [ (\\"Library\\", (1, 2)), (\\"Cafe\\", (2, 2)), (\\"Bookstore\\", (1, 3)) ] find_closest(origin, pois) # Should return \\"Library\\" ``` Write the `find_closest` function that meets the specified requirements.","solution":"from typing import List, Tuple def find_closest(origin: Tuple[int, int], pois: List[Tuple[str, Tuple[int, int]]]) -> str: Returns the name of the closest point of interest (POI) from the given list. Parameters: origin (Tuple[int, int]): The origin point in the form (x, y). pois (List[Tuple[str, Tuple[int, int]]]): A list of POIs where each POI is a tuple containing the name and coordinates. Returns: str: The name of the closest POI to the origin. def distance_squared(p1, p2): return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 closest_poi = min(pois, key=lambda poi: (distance_squared(origin, poi[1]), poi[0])) return closest_poi[0]"},{"question":"Write a function called `spiralOrder` that takes a square matrix (2D list) as an input and returns a list representing the elements of the matrix traversed in a spiral order. You can assume the matrix will contain integer values only. For example: 1. For the matrix: ```python [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ```python spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` 2. For the matrix: ```python [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The function should return: ```python spiralOrder([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) # returns [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ```","solution":"def spiralOrder(matrix): Returns a list of elements of the matrix traversed in a spiral order. res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res"},{"question":"=====Function Description===== .ordinal() This operation converts an integer into its corresponding ordinal representation. Example >>> ordinal(1) \'1st\' >>> ordinal(2) \'2nd\' >>> ordinal(3) \'3rd\' >>> ordinal(4) \'4th\' >>> ordinal(11) \'11th\' >>> ordinal(21) \'21st\' >>> ordinal(22) \'22nd\' >>> ordinal(23) \'23rd\' .nth_element() This operation returns the nth element (1-based index) of a sorted list or raises an IndexError if the index is out of range. Example >>> lst = [5, 2, 9, 1, 5, 6] >>> nth_element(lst, 2) 2 >>> nth_element(lst, 5) 6 >>> nth_element(lst, 7) IndexError: list index out of range =====Problem Statement===== You are given a list of non-negative integers. Your task is to: 1. Convert each integer in the list to its ordinal representation using the .ordinal() function. 2. Return the nth element based on the given index using the .nth_element() function. =====Input Format===== The first line contains the integer n, the number of elements in the list. The second line contains n space-separated non-negative integers. The third line contains the integer i, which is the 1-based index of the element to be returned. =====Constraints===== 0 < n < 20 0 <= i < 20 =====Output Format===== Print the ordinal representation of the i-th smallest number in the list. =====Example Input===== 6 5 2 9 1 5 6 3 =====Example Output===== \'5th\' =====Example Input===== 5 11 22 33 44 55 2 =====Example Output===== \'22nd\'","solution":"def ordinal(num): Converts an integer to its ordinal representation. Args: num (int): The integer to convert. Returns: str: The ordinal representation of the integer. if 11 <= num % 100 <= 13: suffix = \'th\' else: suffixes = {1: \'st\', 2: \'nd\', 3: \'rd\'} suffix = suffixes.get(num % 10, \'th\') return f\\"{num}{suffix}\\" def nth_element(lst, n): Returns the nth element (1-based index) of a sorted list or raises an IndexError if the index is out of range. Args: lst (list): The list of non-negative integers to be sorted. n (int): The 1-based index of the desired element. Returns: int: The nth element in the sorted list. sorted_list = sorted(lst) if 1 <= n <= len(sorted_list): return sorted_list[n-1] else: raise IndexError(\\"list index out of range\\") def find_ordinal_at_index(lst, i): Converts each integer in the list to its ordinal representation and returns the ordinal representation of the i-th element. Args: lst (list): The list of non-negative integers. i (int): The 1-based index of the element to be converted to ordinal. Returns: str: The ordinal representation of the i-th element in the sorted list. nth_element_value = nth_element(lst, i) return ordinal(nth_element_value)"},{"question":"In a small village, every villager has a unique ID represented by an integer. The villagers have decided to create a secret communication network. In this network, each villager can only communicate with others whose IDs share the same set of unique digits (order of digits does not matter). You need to determine the number of distinct communication groups in the village. Two villagers belong to the same group if their IDs have the same set of unique digits. Write a function `communicationGroups(ids)` that takes a list of integers `ids` representing the IDs of the villagers and returns the number of distinct communication groups. # Example: ```python ids = [123, 321, 213, 456, 654, 789] communicationGroups(ids) # Returns 3 ``` In the example given: - Villagers with IDs 123, 321, and 213 belong to one group (same set of digits {1, 2, 3}). - Villagers with IDs 456 and 654 belong to another group (same set of digits {4, 5, 6}). - Villager with ID 789 forms another group (unique set of digits {7, 8, 9}). # Constraints: - The length of the input list `ids` will not exceed `10^4`. - Each ID in the list will be a positive integer and will not exceed `10^6`. Notes: - Consider using Python\'s set data structure to identify unique digits of each ID quickly. - Aim for an efficient solution that can handle the upper constraints on the input size.","solution":"def communicationGroups(ids): Returns the number of distinct communication groups based on the unique set of digits in each ID. unique_digit_sets = set() for id in ids: digit_set = frozenset(str(id)) # Convert ID to frozenset of its digits unique_digit_sets.add(digit_set) # Add the frozenset to the set of unique digit sets return len(unique_digit_sets)"},{"question":"You are given a list of non-negative integers representing the heights of blocks arranged linearly. The width of each block is `1`. Write a function to find the maximum area of water that can be contained between two blocks while keeping the water contained within the block heights. ```python def max_water_area(heights: List[int]) -> int: # Your code here ``` **Example:** ```python # Example 1 heights = [1,8,6,2,5,4,8,3,7] print(max_water_area(heights)) # Output: 49 # Example 2 heights = [1,1] print(max_water_area(heights)) # Output: 1 ``` **Note:** - The lengths of the list `heights` will be at least 2 and at most 10,000. - The height of each block is between 0 and 10,000 inclusive. - The width between adjacent blocks is always `1`.","solution":"from typing import List def max_water_area(heights: List[int]) -> int: This function returns the maximum area of water that can be contained between two blocks while keeping the water contained within the block heights. left = 0 right = len(heights) - 1 max_area = 0 while left < right: # Calculate the width and height width = right - left height = min(heights[left], heights[right]) # Calculate the area current_area = width * height # Update maximum area max_area = max(max_area, current_area) # Move the pointers if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Rotating Matrix Matrix rotation is an important concept in computer graphics and various algorithmic problems. Task: Write a function `rotateMatrix` that takes an `n x n` matrix (a two-dimensional array) as input and returns the matrix rotated 90 degrees clockwise. Input: The function will be passed an `n x n` matrix (a 2D array) with `n` rows and `n` columns consisting of integers. Example of input matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: The function should return the rotated matrix as a 2D array. Example output for the example input: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Additional explanation: - The first row of the input matrix becomes the last column of the output matrix. - The second row of the input matrix becomes the second last column of the output matrix. - The third row of the input matrix becomes the first column of the output matrix. In general, the element at matrix[i][j] in the original matrix will be placed at matrix[j][n-i-1] in the rotated matrix. Constraint: The matrix will always be square (i.e., the number of rows equals the number of columns). The size of the matrix will be at most 1000x1000. Feel free to write helper functions as needed. Happy coding!","solution":"def rotateMatrix(matrix): Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (list of list of ints): The input n x n matrix. Returns: list of list of ints: The rotated matrix. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"Determine if a given integer X can be expressed as the sum of two elements from an array. -----Input:----- - The first line will contain T, number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and X. - The next line contains N space-separated integers A_i denoting the elements of the array. -----Output:----- Print \\"YES\\" if there are two distinct elements A_i and A_j in the array such that A_i + A_j = X. Otherwise, print \\"NO\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^6 - -10^9 leq A_i leq 10^9 - -10^9 leq X leq 10^9 - Sum of N across all test cases doesn\'t exceed 10^6 -----Sample Input:----- 3 5 9 2 7 11 15 4 4 8 1 2 3 4 4 10 1 2 3 4 -----Sample Output:----- YES NO NO -----EXPLANATION:----- In the first test case, 2 + 7 = 9, so the output is \\"YES\\". In the second test case, there are no two numbers that sum up to 8, so the output is \\"NO\\". In the third test case, there are no two numbers that sum up to 10, so the output is \\"NO\\".","solution":"def can_sum_to_x(test_cases): results = [] for case in test_cases: N, X, A = case[\'N\'], case[\'X\'], case[\'A\'] found = False seen = set() for number in A: if (X - number) in seen: found = True break seen.add(number) results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Vanya is an avid puzzle solver, and his favorite puzzles involve manipulating strings. Recently, he came across an interesting challenge called the \\"Stable Rearrangement Puzzle.\\" The goal is to rearrange a given string\'s characters such that no two adjacent characters are the same. Vanya needs your help to solve this puzzle programmatically. Given a string consisting of lowercase English letters, write a program that either finds a valid rearrangement or determines that rearranging the string such that no two adjacent characters are the same is impossible. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 100,000) containing only lowercase English letters. -----Output----- If it is possible to rearrange the characters in the string such that no two adjacent characters are the same, print the resulting string. If no such rearrangement is possible, print \\"IMPOSSIBLE\\". -----Example----- Input aab Output aba -----Example----- Input aaab Output IMPOSSIBLE -----Explanation----- In the first example, the string \\"aab\\" can be rearranged to \\"aba\\" which satisfies the condition that no two adjacent characters are the same. In the second example, it is impossible to rearrange \\"aaab\\" such that no two adjacent characters are the same. Vanya is eager to see your solution to this challenging puzzle!","solution":"from heapq import heappop, heappush from collections import Counter def stable_rearrange(s): # Count frequency of each character freq = Counter(s) # Create a max heap based on character frequency (negative for max heap) max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heappop(max_heap) result.append(char) # Since we used one instance of `char`, decrement the count if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 prev_char = char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"IMPOSSIBLE\\" return result_str"},{"question":"Task You are developing a mobile video game and need to design the scoring algorithm for a competition where players compete to achieve the highest score. The game includes multiple levels, and each level awards a fixed number of points for completion. The complexity arises because players can replay levels multiple times to surpass their previous high scores for those levels. Given the scores achieved by a player, the scoring algorithm should calculate the player\'s total score by summing the highest scores for each level. # Input/Output `[input]` integer `n` An integer, the number of different levels in the game. `1 ≤ n ≤ 1000.` `[input]` 2D integer array `scores` A 2D array of integers, where each inner array represents the scores achieved by the player in a specific level. Each level is guaranteed to have at least one score recorded. `1 ≤ len(scores) ≤ 1000.` `1 ≤ len(scores[i]) ≤ 100.` `0 ≤ scores[i][j] ≤ 1000.` `[output]` an integer The total score by summing the highest scores achieved for each level. # Example For `n = 3` and `scores = [[50, 60, 70], [80, 40], [90, 100, 80]]`, the output should be `260`. The highest scores for each level are: - Level 1: 70 - Level 2: 80 - Level 3: 100 So, the total score = 70 + 80 + 100 = 250. For `n = 2` and `scores = [[30, 20, 10], [40, 50, 60]]`, the output should be `90`. The highest scores for each level are: - Level 1: 30 - Level 2: 60 So, the total score = 30 + 60 = 90.","solution":"def calculate_total_score(n, scores): Calculate the total score by summing the highest scores for each level. Parameters: n (int): Number of levels in the game. scores (list of list of int): 2D list where each inner list contains scores of a specific level. Returns: int: Total score. total_score = 0 for level_scores in scores: total_score += max(level_scores) return total_score"},{"question":"Task You are given a list of student records, where each record contains a student\'s name and a list of their test scores. You are to write a function that calculates the average test score for each student and returns a list of tuples, each containing a student\'s name and their average score, sorted by their average score in descending order. If two students have the same average score, they should be listed in alphabetical order by their names. # Input/Output `[input]` list of tuples `students` A list of student records, where each record is a tuple containing a student\'s name (a string) and a list of their test scores (list of integers). `[output]` list of tuples A list of tuples, each containing a student\'s name and their average score, sorted by average score in descending order. # Example Example 1 ``` students = [(\\"John\\", [88, 92, 85, 91]), (\\"Jane\\", [90, 92, 85, 89]), (\\"Dave\\", [85, 80, 83, 87])] ``` Expected output: ``` [(\\"Jane\\", 89.0), (\\"John\\", 89.0), (\\"Dave\\", 83.75)] ``` Explanation: - John: (88 + 92 + 85 + 91) / 4 = 89.0 - Jane: (90 + 92 + 85 + 89) / 4 = 89.0 - Dave: (85 + 80 + 83 + 87) / 4 = 83.75 Jane and John have the same average score of 89.0, and they are sorted alphabetically. Example 2 ``` students = [(\\"Alice\\", [100, 98, 96, 97]), (\\"Bob\\", [95, 94, 92, 90]), (\\"Charlie\\", [80, 85, 88, 84])] ``` Expected output: ``` [(\\"Alice\\", 97.75), (\\"Bob\\", 92.75), (\\"Charlie\\", 84.25)] ``` Explanation: - Alice: (100 + 98 + 96 + 97) / 4 = 97.75 - Bob: (95 + 94 + 92 + 90) / 4 = 92.75 - Charlie: (80 + 85 + 88 + 84) / 4 = 84.25","solution":"def calculate_average_scores(students): Calculate the average test score for each student and return a list of tuples sorted by average score in descending order. If two students have the same average score, they should be listed in alphabetical order by their names. Parameters: students (list of tuples): List of student records, where each record is a tuple containing a student\'s name and a list of their test scores. Returns: list of tuples: List of tuples, each containing a student\'s name and their average score, sorted by average score in descending order. avg_scores = [ (name, sum(scores) / len(scores)) for name, scores in students ] avg_scores_sorted = sorted(avg_scores, key=lambda x: (-x[1], x[0])) return avg_scores_sorted"},{"question":"You need to rotate the matrix clockwise by 90 degrees. The matrix is represented by a 2D list of integers. For example, if you are given the following matrix: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` The rotated matrix should be: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` #Input: A 2D list of integers representing the matrix, where each sublist has the same length (1 - 1000) and there are 1 to 1000 sublists. #Output: A 2D list of integers representing the rotated matrix.","solution":"def rotate_matrix(matrix): Rotates the given 2D matrix clockwise by 90 degrees. Parameters: matrix (list of list of int): The 2D matrix to be rotated. Returns: list of list of int: The rotated 2D matrix. return [list(reversed(col)) for col in zip(*matrix)]"},{"question":"Write a function named `rotateMatrix` that takes a 2D array (matrix) as an argument and returns the same matrix rotated 90 degrees clockwise. The function should handle matrices of any size (including non-square matrices). For example, the matrix ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` should become: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotateMatrix(matrix): Rotates the given 2D matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The input 2D array. Returns: list of list of int: The rotated 2D array. if not matrix or not matrix[0]: return matrix rows = len(matrix) cols = len(matrix[0]) rotated_matrix = [] for col in range(cols): new_row = [] for row in range(rows - 1, -1, -1): new_row.append(matrix[row][col]) rotated_matrix.append(new_row) return rotated_matrix"},{"question":"# Problem Statement Write a function that takes a string parameter representing a mathematical expression containing only positive integers and the operators \'+\', \'-\', \'*\', \'/\', and computes the result. The function should respect the standard operator precedence rules (i.e., multiplication and division have higher precedence over addition and subtraction). # Description A typical mathematical expression is evaluated by considering the precedence of operators. Multiplication and division are performed before addition and subtraction. Example Given the expression: `\'3+5*2-8/4\'` - First, perform the multiplication and division: - `5 * 2` results in `10` - `8 / 4` results in `2` - Now, replace these results in the original expression: - `\'3 + 10 - 2\'` - Finally, evaluate the addition and subtraction from left to right: - `3 + 10` results in `13` - `13 - 2` results in `11` Thus, the final result is `11`. Constraints - The input string will contain only positive integers and the operators \'+\', \'-\', \'*\', \'/\'. - The input string will not contain any parentheses. - Division will be integer division, and the final result should be an integer. - The input string will be a valid mathematical expression and will not be empty. Function Signature ```python def evaluate_expression(expression: str) -> int: pass ``` Test Cases ```python assert evaluate_expression(\'3+5*2-8/4\') == 11 assert evaluate_expression(\'10+2*6\') == 22 assert evaluate_expression(\'100*2+12\') == 212 assert evaluate_expression(\'100*(2+12)\') == 1400 assert evaluate_expression(\'100 * ( 2 + 12 ) / 14\') == 100 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluate the given mathematical expression string containing positive integers and the operators \'+\', \'-\', \'*\', \'/\'. def apply_operation(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(a // b) import re tokens = re.findall(r\'d+|[+*/-]\', expression) precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operands = [] operators = [] for token in tokens: if token.isdigit(): operands.append(int(token)) else: while operators and precedence[operators[-1]] >= precedence[token]: apply_operation(operands, operators.pop()) operators.append(token) while operators: apply_operation(operands, operators.pop()) return operands[0]"},{"question":"You have been tasked with building a scheduling system for a series of events. Each event has a start time and an end time. You need to determine the maximum number of events that can be attended without any overlap. For simplicity, you can assume that an event ending at time `t` does not overlap with another event starting at time `t`. Input: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of events. - The following `N` lines each contain two integers `start` and `end`, representing the start and end time of an event. Output: - For each test case, output a single integer representing the maximum number of non-overlapping events that can be attended. Constraints: - 1 leq T leq 10 - 1 leq N leq 10^4 - 1 leq start, end leq 10^9 Sample Input: ``` 2 3 1 2 2 3 3 4 4 1 3 3 4 4 6 2 5 ``` Sample Output: ``` 3 3 ``` Explanation: - In the first test case, the events `1-2`, `2-3`, and `3-4` do not overlap and all can be attended. - In the second test case, the optimal selection of events to attend are `1-3`, `3-4`, and `4-6`, allowing a maximum of 3 events without overlapping.","solution":"def max_non_overlapping_events(test_cases): results = [] for events in test_cases: events.sort(key=lambda x: x[1]) # Sort events based on their end times max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end results.append(max_events) return results def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 events = [] for _ in range(N): start, end = map(int, input_lines[index].split()) events.append((start, end)) index += 1 test_cases.append(events) return test_cases"},{"question":"You are a codebreaker tasked with deciphering a secret message. The encoded message is a string where each letter in the original message has been replaced by the next letter in the alphabet (e.g., \'a\' becomes \'b\', \'b\' becomes \'c\', ..., \'z\' becomes \'a\'). Your job is to write a function `decipher_message(encoded_message)` that takes the encoded message as a parameter and returns the original message. Here are the requirements: - The input is guaranteed to be a non-empty string containing only lowercase English letters. - You need to shift each character in the string back by one position in the alphabet to reveal the original message. - If the letter is \'a\', it should wrap around to \'z\'. For example: - `decipher_message(\\"bcd\\")` should return `\\"abc\\"`. - `decipher_message(\\"efg\\")` should return `\\"def\\"`. - `decipher_message(\\"a\\")` should return `\\"z\\"`. Function Signature: ```python def decipher_message(encoded_message: str) -> str: pass ``` Note: The implementation should handle strings efficiently and take care of edge cases, such as wrapping around the alphabet from \'a\' to \'z\'.","solution":"def decipher_message(encoded_message: str) -> str: Decipher the encoded message by shifting each character back by one position in the alphabet. If the character is \'a\', it wraps around to \'z\'. Args: encoded_message (str): The encoded message containing only lowercase English letters. Returns: str: The original message. deciphered_message = [] for char in encoded_message: if char == \'a\': deciphered_message.append(\'z\') else: deciphered_message.append(chr(ord(char) - 1)) return \'\'.join(deciphered_message)"},{"question":"=====Function Descriptions===== itertools.product() The itertools.product() function returns the Cartesian product of input iterables. Code >>> import itertools >>> itertools.product([1, 2, 3], repeat=2) <itertools.product object at 0x00DF4D0> >>> list(itertools.product([1, 2, 3], repeat=2)) [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)] itertools.permutations() The itertools.permutations() function generates all possible permutations of an iterable up to a specified length. Code >>> import itertools >>> itertools.permutations(\'abc\', 2) <itertools.permutations object at 0x00FCA80> >>> list(itertools.permutations(\'abc\', 2)) [(\'a\', \'b\'), (\'a\', \'c\'), (\'b\', \'a\'), (\'b\', \'c\'), (\'c\', \'a\'), (\'c\', \'b\')] =====Problem Statement===== You are given an alphanumeric string S. Your task is to generate all possible permutations of the characters in S. For each permutation, check if it is a palindrome. A string is considered a palindrome if it reads the same backward as forward, ignoring case and non-alphanumeric characters. =====Input Format===== A single line of input containing string S. =====Constraints===== 0 < len(S) < 10 A palindrome permutation always exists for the given input constraints. =====Output Format===== Print each unique palindrome permutation on a new line in any order. If no palindrome permutation exists, print -1.","solution":"import itertools def is_palindrome(s): cleaned = \'\'.join(filter(str.isalnum, s)).lower() return cleaned == cleaned[::-1] def palindrome_permutations(S): permutations = set(itertools.permutations(S)) palindrome_perms = [\\"\\".join(p) for p in permutations if is_palindrome(\\"\\".join(p))] if not palindrome_perms: print(\\"-1\\") else: for perm in palindrome_perms: print(perm)"},{"question":"Task: You have to write a function **factorial_zeros** that calculates the number of trailing zeros in the factorial of a given number n. # Rules/Note: * The input parameter **n** is an integer within the range [0, 10^4]. * The function should return the number of trailing zeros in **n!** (n factorial). * Trailing zeros are a sequence of 0s in the decimal representation of a number, after which no other digits follow. * Factorials can grow very large, so a direct computation of **n!** is not feasible. Examples: factorial_zeros(5): ``` 1 ``` Explanation: ``` 5! = 120, which has 1 trailing zero. ``` factorial_zeros(10): ``` 2 ``` Explanation: ``` 10! = 3628800, which has 2 trailing zeros. ``` factorial_zeros(20): ``` 4 ``` Explanation: ``` 20! = 2432902008176640000, which has 4 trailing zeros. ``` factorial_zeros(100): ``` 24 ``` Explanation: ``` 100! has 24 trailing zeros. ``` factorial_zeros(0): ``` 0 ``` Explanation: ``` 0! = 1, which has no trailing zeros. ``` factorial_zeros(1000): ``` 249 ``` Explanation: ``` 1000! has 249 trailing zeros. ```","solution":"def factorial_zeros(n): Returns the number of trailing zeros in n! count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"You are given an integer `n` representing the number of elements in an array. You need to perform the following operations sequentially and determine the resulting array: 1. Generate an array of size `n` with elements `[1, 2, 3, ..., n]`. 2. Reverse the array. 3. Replace each element in the reversed array with the cumulative sum of all elements from the start of the array up to the current element. For example: - If `n = 5`, the initial array would be `[1, 2, 3, 4, 5]`. - Reversing the array would result in `[5, 4, 3, 2, 1]`. - Replacing each element with the cumulative sum would result in `[5, 9, 12, 14, 15]`. Write a function that takes in an integer `n` and returns the final array after performing the above operations. Constraints - `1 <= n <= 10^5` Example ```python def transform_array(n): # your code here # Example print(transform_array(5)) # Output: [5, 9, 12, 14, 15] print(transform_array(3)) # Output: [3, 5, 6] ``` Note: Pay special attention to the performance of your solution, especially for large values of `n`.","solution":"def transform_array(n): Generates an array of size `n` with elements [1, 2, 3, ..., n], reverses the array, and then replaces each element with the cumulative sum up to that element. # Generate the initial array [1, 2, ..., n] arr = list(range(1, n + 1)) # Reverse the array arr.reverse() # Replace each element with the cumulative sum for i in range(1, n): arr[i] += arr[i - 1] return arr"},{"question":"Given an array of strings words, return the length of the longest string chain that can be formed with words from the given list. A string chain is a sequence of strings where each word is obtained by adding a single letter to the previous word. This means that for each string in the chain, there exists another string in the chain that is the same as the current string but with exactly one character removed. Example 1: Input: words = [\\"a\\",\\"b\\",\\"ba\\",\\"bca\\",\\"bda\\",\\"bdca\\"] Output: 4 Explanation: One possible chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\". Example 2: Input: words = [\\"abcd\\",\\"dbqca\\"] Output: 1 Explanation: The longest possible chain is either of the two words on their own. Constraints: - 1 <= words.length <= 1000 - 1 <= words[i].length <= 16 - words[i] only contains lowercase English letters.","solution":"def longest_str_chain(words): Returns the length of the longest string chain that can be formed with words from the given list. words.sort(key=len) # Sort words by length longest_chain = {} max_length = 1 # At least each word can be a chain of length 1 for word in words: current_length = 1 # Start with the current word itself for i in range(len(word)): prev_word = word[:i] + word[i+1:] # Remove one character if prev_word in longest_chain: # Check if the predecessor exists in the chain current_length = max(current_length, longest_chain[prev_word] + 1) longest_chain[word] = current_length max_length = max(max_length, current_length) return max_length"},{"question":"Write a function that determines if a given year is a leap year. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer representing a year. -----Output----- For each test case, output \\"Leap Year\\" if the given year is a leap year, otherwise print \\"Not a Leap Year\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1000 ≤ Year ≤ 3000 -----Example----- Input 4 2000 1999 2020 1900 Output Leap Year Not a Leap Year Leap Year Not a Leap Year","solution":"def is_leap_year(year): Determines if the given year is a leap year. A year is a leap year if: - It is divisible by 400, or - It is divisible by 4 but not divisible by 100. if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0): return \\"Leap Year\\" else: return \\"Not a Leap Year\\" def leap_years_test_cases(T, years): Determines if each year in the list `years` is a leap year, for a total of T test cases. results = [] for year in years: results.append(is_leap_year(year)) return results"},{"question":"You are given a list of items each represented by a pair of strings. The first string in each pair is an item and the second string is a category to which the item belongs. Your task is to design a function that filters these items based on a list of allowed categories. If an item belongs to one of the allowed categories, it should be included in the output list. -----Input----- - The first line of the input contains an integer `N` denoting the number of items. - Each of the following `N` lines contains two space-separated strings representing the item and its category. - The next line contains an integer `M` denoting the number of allowed categories. - The last line contains `M` space-separated strings representing the allowed categories. -----Output----- Output each item that belongs to one of the allowed categories, one per line in the same order as the input. -----Constraints----- - 1 ≤ N, M ≤ 1000 - The length of each string is between 1 and 20 characters and contains only lowercase Latin letters. -----Example----- Input: 4 apple fruit carrot vegetable orange fruit celery vegetable 2 fruit vegetable Output: apple carrot orange celery -----Explanation----- All the items belong to allowed categories \\"fruit\\" and \\"vegetable\\", so all items are included in the output.","solution":"def filter_items_by_category(items, allowed_categories): Filters the items based on the allowed categories. Parameters: items (list of tuples): A list where each tuple contains an item and its category. allowed_categories (list of str): A list of allowed categories. Returns: list: A list of items that belong to one of the allowed categories. allowed_set = set(allowed_categories) result = [item for item, category in items if category in allowed_set] return result"},{"question":"A transportation company wants to optimize its fleet management. For each vehicle in the fleet, the company records the starting and ending positions of the trips it makes. The challenge is to find the maximum number of trips that overlap at any given point in time. -----Input:----- - The first line contains an integer N, representing the number of trips. - Each of the next N lines contains two integers S_i and E_i, representing the start and end positions of the i-th trip. -----Output:----- Print a single integer — the maximum number of overlapping trips at any point in time. -----Constraints----- - 1 leq N leq 1000 - 1 leq S_i < E_i leq 10^6 -----Sample Input:----- 5 1 5 2 6 4 7 3 8 5 9 -----Sample Output:----- 4 -----EXPLANATION:----- Here, the maximum number of trips overlapping at any point in time is 4 (trips [1, 5], [2, 6], [4, 7], and [3, 8] all overlap around positions 4 and 5).","solution":"def max_overlap_trips(n, trips): events = [] # Creating events for each trip\'s start and end for start, end in trips: events.append((start, 1)) # 1 indicates start of a trip events.append((end, -1)) # -1 indicates end of a trip # Sorting events, prioritize start (-1) before end (1) if times are equal events.sort(key=lambda x: (x[0], x[1])) max_overlap = 0 current_overlap = 0 for event in events: current_overlap += event[1] if current_overlap > max_overlap: max_overlap = current_overlap return max_overlap # Sample usage: # N = 5 # trips = [(1, 5), (2, 6), (4, 7), (3, 8), (5, 9)] # print(max_overlap_trips(N, trips)) # Output should be 4"},{"question":"You are given an integer n. Your task is to create an array arr of length n such that the difference between any two consecutive elements is exactly 2. The initial element of the array is 0 (i.e. arr[0] = 0). In one operation, you can select any element in the array and increment or decrement its value by 1. The goal is to make all the elements of the array consecutive even numbers starting from 2. It is guaranteed that all the elements of the array can be made consecutive even numbers using some operations. Given an integer n, the length of the array, return the minimum number of operations needed to convert the array to consecutive even numbers starting from 2. Example 1: Input: n = 4 Output: 6 Explanation: Initial array: [0, 2, 4, 6] Target array: [2, 4, 6, 8] First operation: Increment 0 by 2 -> [2, 2, 4, 6] Second operation: Increment 2 by 2 -> [2, 4, 4, 6] Third operation: Decrement 4 by 2 -> [2, 4, 2, 6] Fourth operation: Increment 2 by 2 -> [2, 4, 4, 6] Fifth & Sixth operations: Increment 4 & 6 by 2 -> [2, 4, 6, 8] Example 2: Input: n = 3 Output: 4 Constraints: 1 <= n <= 10^4","solution":"def min_operations_to_consecutive_evens(n): Returns the minimum number of operations needed to convert the array to consecutive even numbers starting from 2. Param n: Length of the array Returns: Minimum number of operations return 2 * n"},{"question":"# Unique Stock Prices You are given an array `prices` where each element represents the stock price of a company in a given day. Your task is to determine the number of unique stock prices in the array. Write a function `count_unique_prices(prices: List[int]) -> int` that takes an array of stock prices and returns the number of unique stock prices. **Example:** ```python count_unique_prices([100, 200, 100, 300, 200, 400]) # returns 4 count_unique_prices([50, 50, 50, 50, 50]) # returns 1 count_unique_prices([75, 85, 95, 85, 75]) # returns 3 ``` In the first example, the unique stock prices are [100, 200, 300, 400], so the function returns 4. In the second example, there\'s only one unique price which is 50, so the function returns 1. In the third example, the unique stock prices are [75, 85, 95], hence the function returns 3.","solution":"from typing import List def count_unique_prices(prices: List[int]) -> int: Returns the number of unique stock prices in the given list. return len(set(prices))"},{"question":"Write a function that takes an integer n and returns the number of structurally unique binary search trees (BST) that store values 1 to n. Example: Input: 3 Output: 5 Explanation: There are a total of 5 unique BSTs for n = 3: 1 3 3 2 1 / / / 3 2 1 1 3 2 / / 2 1 2 3 Note: The range of n is [1, 19].","solution":"def numTrees(n): Returns the number of structurally unique BSTs that store values 1 to n. if n == 0 or n == 1: return 1 # dp[i] will store the number of unique BSTs that can be constructed with i nodes. dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): for j in range(1, i + 1): dp[i] += dp[j - 1] * dp[i - j] return dp[n]"},{"question":"=====Problem Statement===== You are given a list of integers and a target sum. Your task is to determine if there are two distinct elements in the list that add up to the given target sum. Print True if such a pair exists, and False otherwise. =====Example===== For the list [2, 7, 11, 15] and target sum 9, the output should be True because 2 and 7 add up to 9. For the list [1, 5, 3, 8] and target sum 10, the output should be False because no two distinct elements add up to 10. =====Input Format===== The first line contains the space separated integers of the list. The second line contains the integer target sum. =====Constraints===== 1 < len(list) < 1001 -10^5 < list[i] < 10^5 -10^5 < target sum < 10^5 =====Output Format===== Print True if there exist two distinct elements in the list that add up to the target sum. Otherwise, print False.","solution":"def has_pair_with_sum(nums, target): Determine if there are two distinct elements in the list that add up to the given target sum. :param nums: List of integers :param target: Integer target sum :return: Boolean indicating if such a pair exists seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Farmer Johny has a series of M fields each with a certain number of plants. He occasionally finds a pattern of consecutive fields where the number of plants forms a non-decreasing sequence. He wishes to know the longest pattern of such sequence after replanting at most one additional plant in any of the fields. -----Input:----- - The first line will contain one integer M. - The next line contains M space-separated integers representing the number of plants in each field. -----Output:----- Output a single integer, representing the length of the longest such sequence of fields after replanting at most one plant. -----Constraints----- - 1 leq M leq 10^5 - 0 leq text{number of plants in a field} leq 10^9 -----Sample Input:----- 6 3 1 2 4 3 5 -----Sample Output:----- 4 -----EXPLANATION:----- Replant one plant in the second field to make it 3, resulting in the sequence [3, 3, 2, 4, 3, 5]. The longest non-decreasing subsequence can now be [1, 2, 4, 5], which has length 4.","solution":"def longest_non_decreasing_sequence(m, fields): if m == 1: return 1 max_len = 0 current_len = 1 modified = [0] * m for i in range(1, m): if fields[i] >= fields[i - 1]: current_len += 1 else: current_len = 1 modified[i] = current_len max_len = max(modified) for j in range(1, m): if fields[j] < fields[j - 1]: if j > 1 and fields[j - 2] <= fields[j]: max_len = max(max_len, modified[j - 2] + 1) if j < m - 1 and fields[j - 1] <= fields[j + 1]: max_len = max(max_len, modified[j - 1] + 1) return max_len"},{"question":"You are tasked with creating a function that helps a library maintain its inventory of books. The function should either add a new book to the inventory or update the quantity of an existing book. The function should accept three parameters: 1. `inventory`: a list of dictionaries, where each dictionary has the following structure: ```python {\'title\': \\"The Great Gatsby\\", \'author\': \\"F. Scott Fitzgerald\\", \'quantity\': 3} ``` 2. `title`: a string representing the title of the book. 3. `adjustment`: an integer representing the number of copies to add or remove. The `inventory` list should be updated as follows: - If the book with the given `title` exists in the `inventory`, its `quantity` should be adjusted by the `adjustment` value. - If the `quantity` value after adjustment drops to zero or below, the book should be removed from the inventory. - If the book with the given `title` does not exist in the `inventory`, a new entry should be added with the given `title`, a placeholder `author` of \\"Unknown\\", and a `quantity` set to the value of `adjustment`. If `adjustment` is zero or negative, the book should not be added to the inventory. The function should return the updated `inventory`. Example: ```python inventory = [ {\'title\': \\"1984\\", \'author\': \\"George Orwell\\", \'quantity\': 5}, {\'title\': \\"Brave New World\\", \'author\': \\"Aldous Huxley\\", \'quantity\': 3} ] # Adjust quantity of an existing book update_inventory(inventory, \\"1984\\", -2) # Result: # [ # {\'title\': \\"1984\\", \'author\': \\"George Orwell\\", \'quantity\': 3}, # {\'title\': \\"Brave New World\\", \'author\': \\"Aldous Huxley\\", \'quantity\': 3} # ] # Add a new book update_inventory(inventory, \\"Fahrenheit 451\\", 4) # Result: # [ # {\'title\': \\"1984\\", \'author\': \\"George Orwell\\", \'quantity\': 3}, # {\'title\': \\"Brave New World\\", \'author\': \\"Aldous Huxley\\", \'quantity\': 3}, # {\'title\': \\"Fahrenheit 451\\", \'author\': \\"Unknown\\", \'quantity\': 4} # ] # Remove a book when quantity drops to zero update_inventory(inventory, \\"Brave New World\\", -3) # Result: # [ # {\'title\': \\"1984\\", \'author\': \\"George Orwell\\", \'quantity\': 3}, # {\'title\': \\"Fahrenheit 451\\", \'author\': \\"Unknown\\", \'quantity\': 4} # ] ```","solution":"def update_inventory(inventory, title, adjustment): Updates the inventory of books by either adding a new book, updating an existing book\'s quantity, or removing a book if its quantity drops to zero or below. :param inventory: List of dictionaries representing the inventory. :param title: Title of the book to add or update. :param adjustment: Number of copies to add or remove. :return: Updated inventory list. for book in inventory: if book[\'title\'] == title: book[\'quantity\'] += adjustment if book[\'quantity\'] <= 0: inventory.remove(book) return inventory if adjustment > 0: inventory.append({\'title\': title, \'author\': \\"Unknown\\", \'quantity\': adjustment}) return inventory"},{"question":"You are tasked with creating an efficient package delivery service. Given a list of packages with their weights and the maximum capacity of the delivery truck, your aim is to maximize the number of package deliveries without exceeding the truck\'s capacity. Implement a function `maximize_deliveries(packages, capacity)` that takes in a list of positive integers `packages` representing the weights of the packages and a positive integer `capacity` representing the truck\'s capacity. The function should return the maximum number of packages that can be delivered without exceeding the capacity. If no packages can be delivered, return 0. Notes: - You can assume that all weights are positive integers. - The package delivery should be done in a way to waste the least amount of truck capacity possible. Example: ```python maximize_deliveries([2, 3, 4, 5], 5) # returns 2, as the best option is taking packages with weights [2, 3] maximize_deliveries([1, 2, 3, 4], 7) # returns 3, as the best option is taking packages with weights [1, 2, 4] maximize_deliveries([9, 8, 7], 5) # returns 0, as none of the packages can fit in the truck maximize_deliveries([], 10) # returns 0, as there are no packages to deliver ```","solution":"def maximize_deliveries(packages, capacity): Returns the maximum number of packages that can be delivered without exceeding the given capacity. Parameters: packages (list of int): List of weights of the packages. capacity (int): Maximum capacity of the delivery truck. Returns: int: Maximum number of packages deliverable. packages.sort() # Sort packages in ascending order of weights total_weight = 0 count = 0 for weight in packages: if total_weight + weight <= capacity: total_weight += weight count += 1 else: break # truck\'s capacity exceeded return count"},{"question":"# Task Given a list of non-negative integers, determine the maximum possible product of three distinct numbers from the list. # Example For `nums = [1, 2, 3, 4]`, the result should be `24` Since the maximum product is `2 * 3 * 4 = 24`. For `nums = [10, 3, 5, 6, 20]`, the result should be `1200` Since the maximum product is `10 * 6 * 20 = 1200`. For `nums = [-10, -3, 5, 6, -20]`, the result should be `1200` Since the maximum product is `-10 * -20 * 6 = 1200`. # Input/Output - `[input]` array `nums` The list of non-negative integers, `3 ≤ nums.length ≤ 1000` and `0 ≤ nums[i] ≤ 10000`. - `[output]` an integer The maximum possible product of three distinct numbers from the list.","solution":"def maximum_product_of_three(nums): Given a list of integers, return the maximum possible product of three distinct numbers from the list. nums.sort() # We consider two possible cases: # 1. The product of the three largest numbers product1 = nums[-1] * nums[-2] * nums[-3] # 2. The product of the two smallest numbers and the largest number # This scenario is particularly important when dealing with negative numbers product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"}]'),S={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:O,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},j=["disabled"],z={key:0},Y={key:1};function D(r,e,u,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",Y,"Loading...")):(n(),i("span",z,"See more"))],8,j)):l("",!0)])}const L=d(S,[["render",D],["__scopeId","data-v-e52b1bcb"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/20.md","filePath":"quotes/20.md"}'),M={name:"quotes/20.md"},W=Object.assign(M,{setup(r){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,W as default};
