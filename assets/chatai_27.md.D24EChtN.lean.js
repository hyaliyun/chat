import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function S(a,e,l,p,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const F=c(k,[["render",S],["__scopeId","data-v-2f0fcba5"]]),C=JSON.parse('[{"question":"Design a function `combine_sorted_arrays` that takes in two sorted arrays of integers and returns a single sorted array that contains all elements from both input arrays. This function should maintain the sorted order. The function shall have the following signature: ```python def combine_sorted_arrays(arr1, arr2): # Your implementation goes here pass ``` # Parameters - `arr1` (list of int): The first sorted array. - `arr2` (list of int): The second sorted array. # Returns - (list of int): The merged sorted array containing all elements from `arr1` and `arr2`. # Constraints - You are not allowed to use any built-in sorting function (e.g., `sorted` in Python). - Both input arrays are already sorted in non-decreasing order. # Example Usage Given: ```python arr1 = [1, 3, 5] arr2 = [2, 4, 6] ``` When you call: ```python result = combine_sorted_arrays(arr1, arr2) ``` The function should return: ```python [1, 2, 3, 4, 5, 6] ``` Here\'s another example: Given: ```python arr1 = [-5, 0, 7] arr2 = [-10, -3, 8, 10] ``` When you call: ```python result = combine_sorted_arrays(arr1, arr2) ``` The function should return: ```python [-10, -5, -3, 0, 7, 8, 10] ``` # Implementation Notes: - Use a two-pointer approach to efficiently merge the arrays without additional sorting. - Consider edge cases where one of the arrays may be empty.","solution":"def combine_sorted_arrays(arr1, arr2): Combines two sorted arrays into a single sorted array. Parameters: - arr1 (list of int): The first sorted array. - arr2 (list of int): The second sorted array. Returns: - (list of int): The merged sorted array containing all elements from arr1 and arr2. i = 0 j = 0 merged = [] # Use two pointers to merge the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append remaining elements from arr1 or arr2 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"You are required to create a function called `find_factors` that will take an integer as a parameter and return a list of all its factors, in ascending order. Factors of a number are integers that divide the number without leaving any remainder. The primary purpose of this problem is to practice loop constructs and conditional statements in Python, while also getting familiar with basic mathematical operations. Key details: - Function name: `find_factors` - Parameter: `num` (an integer to find the factors of) - The function should return a list of factors of `num` in ascending order. Example: ```python print(find_factors(12)) # Output: [1, 2, 3, 4, 6, 12] print(find_factors(17)) # Output: [1, 17] print(find_factors(20)) # Output: [1, 2, 4, 5, 10, 20] print(find_factors(1)) # Output: [1] ``` #","solution":"def find_factors(num): Returns a list of factors of the given integer \'num\' in ascending order. factors = [] for i in range(1, num + 1): if num % i == 0: factors.append(i) return factors"},{"question":"You are provided with a dictionary where the keys are strings representing student names and the values are lists of numerical scores. Your task is to write a function named `calculate_student_averages` which calculates the average score for each student and returns a new dictionary with the student names as keys and their average scores as values. The function `calculate_student_averages` will take one argument: 1. `student_scores`: A dictionary where keys are student names (strings) and values are lists of numbers representing their scores. Your function should: 1. Calculate the average score for each student. 2. Return a new dictionary with the same keys (student names) and their respective average scores as values. For example, given the dictionary: ```python { \'Alice\': [85, 90, 78], \'Bob\': [92, 88, 79, 85], \'Charlie\': [100, 87, 93] } ``` The resulting dictionary should look like: ```python { \'Alice\': 84.33, \'Bob\': 86.0, \'Charlie\': 93.33 } ``` Note: Ensure the rounded average scores have two decimal places.","solution":"def calculate_student_averages(student_scores): Returns a dictionary with student names as keys and their average scores as values. Args: - student_scores (dict): A dictionary with student names as keys and lists of scores as values. Returns: - dict: A dictionary with student names as keys and their average scores as values. averages = {} for student, scores in student_scores.items(): if scores: average_score = round(sum(scores) / len(scores), 2) averages[student] = average_score else: averages[student] = 0.0 return averages"},{"question":"**Title: Implementing the PageRank Algorithm for a Small Web Graph** You need to design a function `pagerank` that implements the PageRank algorithm for a simplified web graph represented by an adjacency matrix. The function should compute the PageRank scores for all pages in the web graph. **Function: `pagerank(adj_matrix, damping_factor, num_iterations)`** **Parameters:** - `adj_matrix` (numpy.ndarray): A 2D NumPy array of shape (N, N) where `adj_matrix[i, j]` is 1 if there is a link from page `i` to page `j`, and 0 otherwise. - `damping_factor` (float): A value between 0 and 1 representing the probability that a user will continue clicking on links. - `num_iterations` (int): The number of iterations to perform in the PageRank algorithm. **Process:** 1. Initialize the PageRank scores for all pages to `1 / N`, where `N` is the number of pages (i.e., nodes). 2. For each iteration: - Update the PageRank score of each page using the formula: ``` PR(p) = (1 - damping_factor) / N + damping_factor * sum(PR(i) / L(i) for all i linking to p) ``` where `L(i)` is the number of outbound links from page `i`. - Ensure that dangling nodes (pages with no outbound links) are handled appropriately by redistributing their PageRank evenly across all pages. **Output:** - Return a NumPy array containing the final PageRank scores after all iterations. **Library to Use:** - `numpy`: For numerical operations and handling arrays. **Example:** ```python import numpy as np def pagerank(adj_matrix, damping_factor, num_iterations): N = adj_matrix.shape[0] pageranks = np.ones(N) / N for _ in range(num_iterations): new_pageranks = np.ones(N) * (1 - damping_factor) / N for i in range(N): for j in range(N): if adj_matrix[j, i] == 1: new_pageranks[i] += damping_factor * pageranks[j] / np.sum(adj_matrix[j]) pageranks = new_pageranks return pageranks # Sample usage adj_matrix = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) damping_factor = 0.85 num_iterations = 100 print(pagerank(adj_matrix, damping_factor, num_iterations)) ``` **Note:** This implementation should handle both cases where there are and aren\'t any outbound links from some pages. Ensure that the handling of dangling nodes (pages with no outbound links) is consistent with the PageRank algorithm.","solution":"import numpy as np def pagerank(adj_matrix, damping_factor, num_iterations): N = adj_matrix.shape[0] pageranks = np.ones(N) / N for _ in range(num_iterations): new_pageranks = np.ones(N) * (1 - damping_factor) / N for i in range(N): for j in range(N): if adj_matrix[j, i] == 1: new_pageranks[i] += damping_factor * pageranks[j] / np.sum(adj_matrix[j]) # Handle dangling nodes (pages with no outbound links) dangling_nodes = np.where(np.sum(adj_matrix, axis=1) == 0)[0] if len(dangling_nodes) > 0: new_pageranks += damping_factor * np.sum(pageranks[dangling_nodes]) / N pageranks = new_pageranks return pageranks"},{"question":"Write a Python function named `calculate_moving_average` that: 1. Reads a CSV file with at least two columns: \\"DATE\\" and \\"SALES\\". The file path should be provided as an argument to the function. 2. The \\"DATE\\" column contains date entries in `%Y-%m-%d` format. 3. The \\"SALES\\" column contains sales values. 4. Convert the \\"DATE\\" column to datetime objects using `pandas.to_datetime`. 5. Set the \\"DATE\\" column as the index of the DataFrame. 6. Calculate the moving average of the \\"SALES\\" column over a 3-month window. 7. Store the result in a new column named \\"MOVING_AVERAGE\\". 8. Return the transformed DataFrame. **Requirements:** - Use `pandas.read_csv` to read the CSV file. - Use `pandas.to_datetime` to convert date entries. - Use `pandas.DataFrame.rolling` to calculate the moving average. # Function Signature ```python import pandas as pd def calculate_moving_average(file_path: str) -> pd.DataFrame: pass ``` # Example Assume the CSV file has the following data: ``` DATE,SALES 2021-01-01,200 2021-02-01,220 2021-03-01,250 2021-04-01,280 ``` The expected output DataFrame should have the \\"DATE\\" column converted to datetime, set as the index, and a calculated \\"MOVING_AVERAGE\\" column showing the average sales over the last 3 months. ```plaintext SALES MOVING_AVERAGE DATE 2021-01-01 200 NaN 2021-02-01 220 NaN 2021-03-01 250 223.333333 2021-04-01 280 250.000000 ```","solution":"import pandas as pd def calculate_moving_average(file_path: str) -> pd.DataFrame: # Read the CSV file df = pd.read_csv(file_path) # Convert \\"DATE\\" column to datetime df[\'DATE\'] = pd.to_datetime(df[\'DATE\']) # Set \\"DATE\\" column as the index df.set_index(\'DATE\', inplace=True) # Calculate the 3-month moving average for the \\"SALES\\" column df[\'MOVING_AVERAGE\'] = df[\'SALES\'].rolling(window=3).mean() return df"},{"question":"You are tasked with writing a function that encodes a message using a simple letter substitution cipher. In this problem, you will write a function that maps each letter of the alphabet to another letter. The substitution is defined by a specified shifted alphabet, where each letter is shifted by a given number of places. The function you\'ll create is `encode_message`. This function will take two parameters: 1. `message`: A string that needs to be encoded. The message contains only lowercase letters and spaces. 2. `shift`: An integer representing the number of places by which to shift each letter in the alphabet. The function should: 1. Create a mapping of each letter to another letter based on the shift value. 2. Encode the message using the mapping. 3. Return the encoded message. # Example Usage ```python message = \\"hello world\\" shift = 3 result = encode_message(message, shift) print(result) # This returns and prints \'khoor zruog\', as each letter in the original message is shifted by 3 places in the alphabet. ``` # Note - Spaces should remain unchanged in the encoded message. - You can assume that the shift value will always be between 0 and 25, inclusive. # Hint - Consider using the `ord` and `chr` functions to handle character shifts efficiently.","solution":"def encode_message(message, shift): Encodes a message using a simple letter substitution cipher with a specified shift. Args: message (str): The message to encode, containing only lowercase letters and spaces. shift (int): The number of places to shift each letter in the alphabet. Returns: str: The encoded message. encoded_message = [] for char in message: if char == \' \': encoded_message.append(char) else: encoded_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encoded_message.append(encoded_char) return \'\'.join(encoded_message)"},{"question":"You are asked to write a Python function called `execute_operations` that takes in a list of integers and a list of operations to perform on these integers. The operations can include addition (`+`), subtraction (`-`), multiplication (`*`), and integer division (`//`). The operations will be provided in tuples, where each tuple contains the operation as a string and the operand as an integer. The function should take two arguments: - `numbers`: a list of integers to perform operations on. - `operations`: a list of tuples, where each tuple contains a string (one of `\\"+\\", \\"-\\", \\"*\\", \\"//\\"`) and an integer. The function should return a new list of integers where each number has had all the operations applied to it sequentially. To implement this: 1. Iterate over each number in the `numbers` list. 2. For each number, apply each operation in the `operations` list in order. 3. Store the result in a new list. Ensure to handle division by zero situations by skipping any division operation that would lead to such cases. Example Usage: ```python print(execute_operations([10, 20, 30], [(\\"+\\", 5), (\\"*\\", 2), (\\"//\\", 3)])) ``` Expected Output for Example Usage: ```python [10, 17, 23] ```","solution":"def execute_operations(numbers, operations): Applies a sequence of operations to a list of numbers. Parameters: - numbers (list of int): The list of integers to perform operations on. - operations (list of tuples): The list of operations to perform on each integer. Returns: - list of int: A new list of integers with the operations applied. result = [] for number in numbers: for operation, operand in operations: if operation == \'+\': number += operand elif operation == \'-\': number -= operand elif operation == \'*\': number *= operand elif operation == \'//\': if operand == 0: continue number //= operand result.append(number) return result"},{"question":"Create a Python function that takes a string as input and extracts details about the characters in the string. Specifically, your function should return a dictionary with: - \'total_characters\': The total number of characters in the string. - \'unique_characters\': A list of unique characters present in the string. - \'character_frequency\': A dictionary where keys are the characters from the string and values are their respective counts. The function should raise an exception if the input is not a string or if it is empty. You should write self-contained code starting with: ``` def analyze_string(input_string): ```","solution":"def analyze_string(input_string): Analyzes the given string to extract details about the characters in the string. Parameters: input_string (str): The string to be analyzed. Returns: dict: A dictionary with the total number of characters, a list of unique characters, and a character frequency dictionary. Raises: ValueError: If the input is not a string or if it is empty. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string.\\") if input_string == \\"\\": raise ValueError(\\"Input string cannot be empty.\\") total_characters = len(input_string) unique_characters = list(set(input_string)) character_frequency = {char: input_string.count(char) for char in unique_characters} return { \'total_characters\': total_characters, \'unique_characters\': unique_characters, \'character_frequency\': character_frequency }"},{"question":"In this assignment, you are tasked with designing a class in Python that implements a basic Queue data structure. Your class should follow the standard FIFO (First-In-First-Out) approach for adding and removing elements. # Task Write a class `Queue` that provides the following functionalities: 1. **enqueue(item)**: Adds `item` to the end of the queue. 2. **dequeue()**: Removes and returns the item at the front of the queue. If the queue is empty, return `None`. 3. **peek()**: Returns the item at the front of the queue without removing it. If the queue is empty, return `None`. 4. **is_empty()**: Returns `True` if the queue is empty, otherwise `False`. 5. **size()**: Returns the number of items in the queue. # Class Signature ```python class Queue: def __init__(self): # Your code here def enqueue(self, item): # Your code here def dequeue(self): # Your code here def peek(self): # Your code here def is_empty(self): # Your code here def size(self): # Your code here ``` # Example Usage ```python queue = Queue() # Enqueue elements queue.enqueue(1) queue.enqueue(2) queue.enqueue(3) # Peek the front element print(queue.peek()) # Output: 1 # Dequeue elements print(queue.dequeue()) # Output: 1 print(queue.dequeue()) # Output: 2 # Check the size of the queue print(queue.size()) # Output: 1 # Check if the queue is empty print(queue.is_empty()) # Output: False # Dequeue the last element print(queue.dequeue()) # Output: 3 # Check if the queue is empty again print(queue.is_empty()) # Output: True ``` You should ensure your class provides the functionalities described above and handles edge cases appropriately.","solution":"class Queue: def __init__(self): Initialize an empty queue. self._queue = [] def enqueue(self, item): Adds item to the end of the queue. Args: item: item to be added to the queue. self._queue.append(item) def dequeue(self): Removes and returns the item at the front of the queue. Returns: The item at the front of the queue if the queue is not empty, None otherwise. if not self.is_empty(): return self._queue.pop(0) return None def peek(self): Returns the item at the front of the queue without removing it. Returns: The item at the front of the queue if the queue is not empty, None otherwise. if not self.is_empty(): return self._queue[0] return None def is_empty(self): Checks if the queue is empty. Returns: True if the queue is empty, False otherwise. return len(self._queue) == 0 def size(self): Returns the number of items in the queue. Returns: The number of items in the queue. return len(self._queue)"},{"question":"You are required to write a Python function named `data_summary` that performs the following tasks: 1. **Load JSON Data**: Reads a JSON file and loads its content into a Python dictionary. The file path will be provided by the user. 2. **Count Keys**: Determines the total number of keys in the JSON file at the top level. 3. **Find Maximum Value**: Identifies the maximum numerical value from all the values in the JSON file. 4. **Generate Summary Report**: Creates a summary report that includes the following information. **Function Signature**: ```python def data_summary(file_path: str) -> None: ... ``` # Detailed Steps and Requirements 1. **Load JSON Data**: Use the `json` module to load the content of the JSON file into a dictionary. 2. **Key Count**: Count the number of keys present at the top level of the JSON structure. 3. **Maximum Value Identification**: Traverse through the dictionary, and find the maximum value assuming all values are either integers or lists of integers. 4. **Summary Report**: - Print the total number of keys. - Print the maximum value found in the JSON content. Ensure that the function properly handles and outputs the following format explicitly: - The key count prefixed with \'Key Count: \'. - The maximum value prefixed with \'Max Value: \'.","solution":"import json def data_summary(file_path: str) -> None: Reads a JSON file from the given file path, counts the top-level keys and finds the maximum integer value from the values. Prints the summary report with the total key count and the maximum value found. with open(file_path, \'r\') as file: data = json.load(file) key_count = len(data.keys()) max_value = _find_max_value(data) print(f\\"Key Count: {key_count}\\") print(f\\"Max Value: {max_value}\\") def _find_max_value(data): Recursively traverse the dictionary to find the maximum numerical value. max_value = float(\'-inf\') if isinstance(data, dict): for value in data.values(): max_value = max(max_value, _find_max_value(value)) elif isinstance(data, list): for item in data: max_value = max(max_value, _find_max_value(item)) elif isinstance(data, int): max_value = data return max_value"},{"question":"You are working on a library management system where you need to keep track of book borrowings. Each book can be borrowed by only one member at a time. Design a function that handles the borrowing process but ensures that no member can borrow more than 5 books simultaneously. Your task is to implement the `borrowBook` function to: 1. Check if the member has already borrowed 5 books. If so, prevent any more borrowings and raise a `ValueError` with the message \\"Limit reached\\". 2. Check if the book is already borrowed by someone else. If so, raise a `ValueError` with the message \\"Book already borrowed\\". 3. Otherwise, proceed with the borrowing process and update the records. **Function Signature** ```python def borrowBook(memberId: int, bookId: int) -> None: ``` **Parameters** - `memberId`: An integer representing the unique identifier of the member. - `bookId`: An integer representing the unique identifier of the book. **Requirements** 1. Check if the member has already borrowed 5 books. 2. Check if the book is currently borrowed by another member. 3. Update the records to reflect that the book is now borrowed by the member. **Libraries** - Assume the use of an ORM (Object Relational Model) for database operations. For simplicity, we use an in-memory store in the form of dictionaries. **Example Store Data** ```python members = { 1: {\\"name\\": \\"John\\", \\"borrowed_books\\": [101, 102, 103]}, 2: {\\"name\\": \\"Jane\\", \\"borrowed_books\\": [104, 105, 106, 107, 108]} } books = { 101: {\\"title\\": \\"Book A\\", \\"borrowed_by\\": 1}, 102: {\\"title\\": \\"Book B\\", \\"borrowed_by\\": 1}, 103: {\\"title\\": \\"Book C\\", \\"borrowed_by\\": 1}, 104: {\\"title\\": \\"Book D\\", \\"borrowed_by\\": 2}, 105: {\\"title\\": \\"Book E\\", \\"borrowed_by\\": 2}, 106: {\\"title\\": \\"Book F\\", \\"borrowed_by\\": 2}, 107: {\\"title\\": \\"Book G\\", \\"borrowed_by\\": 2}, 108: {\\"title\\": \\"Book H\\", \\"borrowed_by\\": 2}, 109: {\\"title\\": \\"Book I\\", \\"borrowed_by\\": None}, } ``` **Example Usage** ```python borrowBook(1, 109) # John borrows Book I borrowBook(2, 110) # raises ValueError(\\"Limit reached\\") because Jane already has 5 books borrowBook(1, 105) # raises ValueError(\\"Book already borrowed\\") ``` Ensure that the function handles the cases specified and updates the records accordingly.","solution":"# In-memory data stores for simplicity members = { 1: {\\"name\\": \\"John\\", \\"borrowed_books\\": [101, 102, 103]}, 2: {\\"name\\": \\"Jane\\", \\"borrowed_books\\": [104, 105, 106, 107, 108]} } books = { 101: {\\"title\\": \\"Book A\\", \\"borrowed_by\\": 1}, 102: {\\"title\\": \\"Book B\\", \\"borrowed_by\\": 1}, 103: {\\"title\\": \\"Book C\\", \\"borrowed_by\\": 1}, 104: {\\"title\\": \\"Book D\\", \\"borrowed_by\\": 2}, 105: {\\"title\\": \\"Book E\\", \\"borrowed_by\\": 2}, 106: {\\"title\\": \\"Book F\\", \\"borrowed_by\\": 2}, 107: {\\"title\\": \\"Book G\\", \\"borrowed_by\\": 2}, 108: {\\"title\\": \\"Book H\\", \\"borrowed_by\\": 2}, 109: {\\"title\\": \\"Book I\\", \\"borrowed_by\\": None}, } def borrowBook(memberId: int, bookId: int) -> None: Handles the process of borrowing a book for a member. # Check if the member exists if memberId not in members: raise ValueError(\\"Member not found\\") # Check if the book exists if bookId not in books: raise ValueError(\\"Book not found\\") member = members[memberId] book = books[bookId] # Check if the member has already borrowed 5 books if len(member[\'borrowed_books\']) >= 5: raise ValueError(\\"Limit reached\\") # Check if the book is already borrowed by someone else if book[\'borrowed_by\'] is not None: raise ValueError(\\"Book already borrowed\\") # Proceed with borrowing book[\'borrowed_by\'] = memberId member[\'borrowed_books\'].append(bookId)"},{"question":"You are required to implement a Python function named `count_sorted_words` that processes a given string and returns a list of unique words in the string, sorted alphabetically, along with the count of these unique words. The function will take a single parameter `text` which is a string. Your function should ignore punctuation and case when determining unique words, but the final output should be in lowercase. The function must return a tuple containing two elements: 1. A list of unique words sorted alphabetically. 2. The count of these unique words. **Function Signature:** ```python def count_sorted_words(text: str) -> tuple: pass ``` # Example Usage: ```python text = \\"Hello world! Hello, Python programmers. Welcome to the world of Python.\\" result = count_sorted_words(text) print(result) # Output should be ([\'hello\', \'of\', \'programmers\', \'python\', \'the\', \'to\', \'welcome\', \'world\'], 8) ``` # Constraints: - Words are to be considered case-insensitive. - Ignore punctuation when determining unique words. - Text may contain letters, digits, spaces, and punctuation marks. - The output list must be sorted alphabetically in lowercase.","solution":"import re def count_sorted_words(text: str) -> tuple: Process the given string to return a list of unique words, sorted alphabetically, and the count of these unique words. This function ignores case and punctuation. Parameters: text (str): The input string. Returns: tuple: A tuple containing a list of unique, sorted words and the count of unique words. # Convert text to lowercase and remove punctuation using regular expression text = text.lower() words = re.findall(r\'bw+b\', text) # Get unique words by converting list to a set unique_words = sorted(set(words)) return unique_words, len(unique_words)"},{"question":"You are required to write a Python function that takes a string as input and returns a dictionary where the keys are the characters in the string and the values are the counts of each character\'s occurrences. The function should ignore spaces and be case-insensitive, meaning \'A\' and \'a\' are considered the same character. Only include alphanumeric characters in the count. Function signature: ```python def character_count(text: str) -> dict: ``` - `text` (str): The input string whose character counts are to be computed. Ensure that the function: 1. Returns a dictionary with characters as keys and their respective counts as values. 2. Ignores spaces and is case-insensitive. 3. Includes only alphanumeric characters in the count. Considerations: - Use `str.lower()` to handle case insensitivity. - Use `str.isalnum()` to check for alphanumeric characters. Example: ```python print(character_count(\\"Hello World!\\")) ``` This should output: ```python {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def character_count(text: str) -> dict: Takes a string as input and returns a dictionary where the keys are the characters in the string and the values are the counts of each character\'s occurrences. Ignores spaces and is case-insensitive. Parameters: text (str): The input string whose character counts are to be computed. Returns: dict: A dictionary with characters as keys and their respective counts as values. count_dict = {} for char in text: if char.isalnum(): # Check if the character is alphanumeric char = char.lower() # Convert the character to lowercase if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"# Database Record Processing In an e-commerce application, orders are stored in a database and processed periodically. Each order has an associated status that indicates its state in the order processing workflow. You\'re tasked with creating a function that updates the order statuses based on specific business rules. The function `process_orders` should take in two lists: 1. `orders`: A list of dictionaries, each representing an order. Each dictionary contains the keys: - `order_id` (int): Unique identifier for the order - `product_id` (int): Unique identifier for the product - `quantity` (int): Quantity of the product ordered - `status` (str): Current status of the order, which can be \\"pending\\", \\"processed\\", \\"shipped\\", or \\"delivered\\" 2. `inventory`: A list of dictionaries, each representing a product in the inventory. Each dictionary contains the keys: - `product_id` (int): Unique identifier for the product - `quantity_in_stock` (int): Quantity of the product currently in stock The function should update the status of each order based on the following rules: 1. If an order is \\"pending\\" and the quantity of the product ordered is available in stock, update the order status to \\"processed\\" and decrease the inventory quantity by the ordered quantity. 2. If an order is \\"pending\\" and the quantity of the product ordered is NOT available in stock, the order status remains \\"pending\\". 3. Orders that are already \\"processed\\", \\"shipped\\", or \\"delivered\\" should not be changed. The function should return an updated list of orders and the updated inventory list. # Function Definition ```python def process_orders(orders, inventory): ``` # Example ```python orders = [ {\\"order_id\\": 1, \\"product_id\\": 101, \\"quantity\\": 2, \\"status\\": \\"pending\\"}, {\\"order_id\\": 2, \\"product_id\\": 102, \\"quantity\\": 1, \\"status\\": \\"processed\\"}, {\\"order_id\\": 3, \\"product_id\\": 101, \\"quantity\\": 4, \\"status\\": \\"pending\\"}, ] inventory = [ {\\"product_id\\": 101, \\"quantity_in_stock\\": 5}, {\\"product_id\\": 102, \\"quantity_in_stock\\": 2}, ] updated_orders, updated_inventory = process_orders(orders, inventory) print(updated_orders) print(updated_inventory) ``` # Expected Output ```python [ {\\"order_id\\": 1, \\"product_id\\": 101, \\"quantity\\": 2, \\"status\\": \\"processed\\"}, {\\"order_id\\": 2, \\"product_id\\": 102, \\"quantity\\": 1, \\"status\\": \\"processed\\"}, {\\"order_id\\": 3, \\"product_id\\": 101, \\"quantity\\": 4, \\"status\\": \\"pending\\"}, ] [ {\\"product_id\\": 101, \\"quantity_in_stock\\": 3}, {\\"product_id\\": 102, \\"quantity_in_stock\\": 2}, ] ```","solution":"def process_orders(orders, inventory): inventory_dict = {item[\'product_id\']: item[\'quantity_in_stock\'] for item in inventory} for order in orders: if order[\'status\'] == \'pending\': product_id = order[\'product_id\'] quantity_needed = order[\'quantity\'] if inventory_dict.get(product_id, 0) >= quantity_needed: order[\'status\'] = \'processed\' inventory_dict[product_id] -= quantity_needed updated_inventory = [ {\'product_id\': product_id, \'quantity_in_stock\': quantity} for product_id, quantity in inventory_dict.items() ] return orders, updated_inventory"},{"question":"You are required to create a Python function called `word_frequency_analyzer` that accepts a list of strings. This function should return a dictionary containing the frequency count of each unique word across all the strings in the input list. The task for this function is to: 1. Iterate through each string in the input list. 2. Split each string into individual words (considering spaces as delimiters). 3. Count the occurrences of each word across all strings. 4. Return a dictionary where keys are the unique words and values are their respective counts. # Function Specification: - **Function Name**: `word_frequency_analyzer` - **Input**: A list of strings. - **Output**: A dictionary with words as keys and their frequency counts as values. # Example: ```python input_data = [\\"apple banana apple\\", \\"banana fruit\\", \\"apple fruit banana\\"] response = word_frequency_analyzer(input_data) # The response should be: # { # \\"apple\\": 3, # \\"banana\\": 3, # \\"fruit\\": 2 # } ``` # Constraints: - Assume that all strings are in lowercase and contain only alphabetical characters and spaces. - Words are separated by any number of spaces.","solution":"def word_frequency_analyzer(strings): Analyzes the frequency of each word in a list of strings. Parameters: strings (list): A list of strings. Returns: dict: A dictionary where keys are unique words and values are their frequency counts. frequency = {} for string in strings: words = string.split() for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Your task is to implement a function `find_optimal_route` that uses a genetic algorithm to solve the Traveling Salesman Problem (TSP). The function should generate an initial population of possible routes, perform selection, crossover, and mutation, and evolve the population over a specified number of generations to find an optimal or near-optimal route. **Function Signature:** ```python def find_optimal_route(distance_matrix, population_size, generations, mutation_rate): Solves the Traveling Salesman Problem using a genetic algorithm. Parameters: distance_matrix (ndarray): A 2D array where the element at [i, j] represents the distance between city i and city j. population_size (int): The number of possible routes in the population. generations (int): The number of iterations or generations to evolve the population. mutation_rate (float): The probability of mutating an offspring route. Returns: list: A list representing the optimal route found. ``` **Details:** - `distance_matrix`: A 2D array representing the distances between cities. The element at `[i, j]` is the distance from city `i` to city `j`. - `population_size`: The number of potential routes to maintain in each generation. - `generations`: The number of generations to run the genetic algorithm. - `mutation_rate`: The probability that a mutation will occur in any offspring route. **Algorithm Steps:** 1. Initialize the population with random routes. 2. Evaluate the fitness of each route in the population using the total distance of the route. 3. Select routes for reproduction based on their fitness (shorter total distances are better). 4. Implement crossover operations to produce new offspring routes. 5. Apply mutations to some offspring routes based on the mutation rate. 6. Replace the old population with the new one. 7. Iterate steps 2-6 for a specified number of generations. 8. Return the best route found in the final population. # Example: Assume you have a distance matrix `dist_matrix`, a population size of 100, 500 generations, and a mutation rate of 0.01. You should be able to call: ```python optimal_route = find_optimal_route(dist_matrix, 100, 500, 0.01) ``` To obtain a list `optimal_route` representing the route visiting all cities once and returning to the starting point with minimal total distance. **Libraries to Use:** - `numpy` - Any other library needed for random operations like `random` or `itertools` #","solution":"import numpy as np import random def initialize_population(distance_matrix, population_size): num_cities = len(distance_matrix) population = [] for _ in range(population_size): route = list(np.random.permutation(num_cities)) population.append(route) return population def calculate_fitness(route, distance_matrix): total_distance = 0 for i in range(len(route)): total_distance += distance_matrix[route[i-1]][route[i]] return total_distance def rank_population(population, distance_matrix): fitness_results = {} for i in range(len(population)): fitness_results[i] = calculate_fitness(population[i], distance_matrix) return sorted(fitness_results.items(), key=lambda item: item[1]) def selection(pop_ranked, elite_size): selection_results = [] df = 0 for i in range(len(pop_ranked)): df += pop_ranked[i][1] cum_sum = 0 df_percentages = [] for i in range(len(pop_ranked)): fitness = pop_ranked[i][1] cum_sum += df - fitness df_percentages.append(cum_sum) for i in range(elite_size): selection_results.append(pop_ranked[i][0]) for i in range(len(pop_ranked) - elite_size): pick = random.uniform(0, df * (len(pop_ranked) - elite_size) - cum_sum) for j in range(len(pop_ranked)): if pick <= df_percentages[j]: selection_results.append(pop_ranked[j][0]) break return selection_results def mating_pool(population, selection_results): pool = [] for i in range(len(selection_results)): pool.append(population[selection_results[i]]) return pool def breed(parent1, parent2): gene_a = int(random.random() * len(parent1)) gene_b = int(random.random() * len(parent2)) start_gene = min(gene_a, gene_b) end_gene = max(gene_a, gene_b) child_p1 = parent1[start_gene:end_gene] child_p2 = [item for item in parent2 if item not in child_p1] child = child_p1 + child_p2 return child def breed_population(matingpool, elite_size): children = [] length = len(matingpool) - elite_size pool = random.sample(matingpool, len(matingpool)) for i in range(elite_size): children.append(matingpool[i]) for i in range(length): child = breed(pool[i], pool[len(matingpool)-i-1]) children.append(child) return children def mutate(route, mutation_rate): for swapped in range(len(route)): if(random.random() < mutation_rate): swap_with = int(random.random() * len(route)) city1 = route[swapped] city2 = route[swap_with] route[swapped] = city2 route[swap_with] = city1 return route def mutate_population(population, mutation_rate): mutated_pop = [] for ind in range(len(population)): mutated_ind = mutate(population[ind], mutation_rate) mutated_pop.append(mutated_ind) return mutated_pop def next_generation(current_gen, distance_matrix, elite_size, mutation_rate): pop_ranked = rank_population(current_gen, distance_matrix) selection_results = selection(pop_ranked, elite_size) matingpool = mating_pool(current_gen, selection_results) children = breed_population(matingpool, elite_size) next_generation = mutate_population(children, mutation_rate) return next_generation def find_optimal_route(distance_matrix, population_size, generations, mutation_rate): pop = initialize_population(distance_matrix, population_size) for i in range(generations): pop = next_generation(pop, distance_matrix, elite_size=population_size//10, mutation_rate=mutation_rate) best_route_index = rank_population(pop, distance_matrix)[0][0] best_route = pop[best_route_index] return best_route"},{"question":"Implement a function `merge_sorted_arrays` that merges two sorted arrays into a single sorted array. The input arrays can contain both integers and floats. It is guaranteed that each array will have unique elements and be sorted in ascending order. Your function, `merge_sorted_arrays`, should adhere to the following specifications: - **Function Name:** `merge_sorted_arrays` - **Parameters:** - `array1` (type: list of int/float): The first sorted array. - `array2` (type: list of int/float): The second sorted array. - **Returns:** (type: list of int/float) A sorted array consisting of all unique elements from both input arrays. # Example: ```python def merge_sorted_arrays(array1, array2): result = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: result.append(array1[i]) i += 1 else: result.append(array2[j]) j += 1 # Append remaining elements result.extend(array1[i:]) result.extend(array2[j:]) return result # Example usage: array1 = [1, 3, 5, 7] array2 = [2, 4, 6, 8] merged_array = merge_sorted_arrays(array1, array2) print(merged_array) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ``` **Note:** The function should efficiently handle arrays of different lengths and ensure that the final output array remains sorted. Use simple comparison operations to achieve merging.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. result = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: result.append(array1[i]) i += 1 else: result.append(array2[j]) j += 1 # Append remaining elements result.extend(array1[i:]) result.extend(array2[j:]) return result"},{"question":"In this problem, you need to write a function `merge_sorted_lists` that merges two pre-sorted lists of integers into a single sorted list, using the most efficient method possible. This problem will test your understanding of data structures and algorithms, specifically focusing on merging operations and efficiency in sorting. # Function Specification The function should be named `merge_sorted_lists` and should take the following parameters: - `list1` (list of int): The first list of sorted integers. - `list2` (list of int): The second list of sorted integers. # Output Specification The function should return a single list (list of int), which is the merged and sorted version of `list1` and `list2`. # Constraints - The lists will be pre-sorted in non-decreasing order. - Both `list1` and `list2` can be empty. - You should aim for a time complexity of O(n + m), where n is the length of `list1` and m is the length of `list2`. # Example Given the inputs: ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] ``` The function should return: ```python [1, 2, 3, 4, 5, 6, 7, 8] ``` # Hint - You might want to use a two-pointer technique to efficiently merge the lists while maintaining the order. # Test Cases Here are some example test cases you can use to verify your solution: ```python assert merge_sorted_lists([1, 2, 5], [3, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_sorted_lists([], [1, 2, 3]) == [1, 2, 3] assert merge_sorted_lists([2, 4, 6], []) == [2, 4, 6] assert merge_sorted_lists([], []) == [] assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1] ``` Your implementation should handle edge cases efficiently and ensure the final list is sorted.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: List of sorted integers. :param list2: List of sorted integers. :return: A new list containing all elements from list1 and list2, sorted. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements from list1 if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements from list2 if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a set of books where each book has a unique identifier and its borrowed status. Create a function `borrowBook(book_id, books)` that modifies the borrowed status of a book in the collection. 1. **Input**: - `book_id`: An integer representing the unique identifier of a book. - `books`: A dictionary where each key is an integer (book ID) and each value is a boolean indicating whether the book is borrowed (`True` if borrowed, `False` if available). 2. **Output**: - The function should return the updated `books` dictionary. - If the `book_id` is not in `books`, the function should raise a `KeyError` with the message \\"Book ID not found\\". 3. **Function Behavior**: - Check if `book_id` exists in `books`. - If it exists, toggle the borrowed status of the book (i.e., if it is `True`, change it to `False`, and vice versa). - If it does not exist, raise a `KeyError`. 4. **Libraries**: - You are not allowed to use any external libraries for this problem. Here is a sample template for your `borrowBook(book_id, books)` function: ```python def borrowBook(book_id, books): Modify the borrowed status of a book in the collection. Parameters ---------- book_id: An integer representing the unique identifier of a book books: A dictionary with book IDs as keys and borrowed status as values Returns ------- books: The updated dictionary with modified borrowed status SAMPLE USAGE ------------ books = {1: False, 2: True, 3: False} borrowBook(2, books) # {1: False, 2: False, 3: False} borrowBook(3, books) # {1: False, 2: False, 3: True} borrowBook(4, books) # Raises KeyError: Book ID not found # Implement the logic here ``` Ensure to write the function according to the specifications and make sure it handles typical scenarios, including edge cases.","solution":"def borrowBook(book_id, books): Modify the borrowed status of a book in the collection. Parameters ---------- book_id: An integer representing the unique identifier of a book books: A dictionary with book IDs as keys and borrowed status as values Returns ------- books: The updated dictionary with modified borrowed status Raises ------ KeyError: If the book_id is not found in books. if book_id not in books: raise KeyError(\\"Book ID not found\\") books[book_id] = not books[book_id] return books"},{"question":"You are developing a movie recommendation system. Your task is to analyze the watch history of users to identify the top 5 most watched movies in a given month and update a CSV file with this information. The system should follow these rules: 1. Each movie is uniquely identified by its title. If a user watches the same movie multiple times, it should be counted separately for each viewing. 2. The CSV file should contain the columns `title` and `watch_count`, representing the movie title and the number of times it was watched, respectively. 3. If multiple movies have the same watch count, they should be sorted alphabetically by their titles. 4. The function should replace the existing data in the CSV file with the new top 5 movies for the specified month. **Function Details:** - **Function Name:** `update_movie_rankings` - **Parameters:** - `watch_history` (list): A list of dictionaries, where each dictionary contains `user_id`, `title`, and `month`. The `month` value is a string in the `YYYY-MM` format. - `month` (str): The month for which you want to determine the top 5 movies, in the `YYYY-MM` format. - **Returns:** Nothing (The function should only update the CSV file specified as `Archivos/movie_rankings.csv`) **Example of `watch_history` list:** ```python watch_history = [ {\\"user_id\\": 1, \\"title\\": \\"Inception\\", \\"month\\": \\"2023-09\\"}, {\\"user_id\\": 2, \\"title\\": \\"Inception\\", \\"month\\": \\"2023-09\\"}, {\\"user_id\\": 3, \\"title\\": \\"Interstellar\\", \\"month\\": \\"2023-09\\"}, {\\"user_id\\": 1, \\"title\\": \\"Interstellar\\", \\"month\\": \\"2023-08\\"}, {\\"user_id\\": 4, \\"title\\": \\"Inception\\", \\"month\\": \\"2023-09\\"}, {\\"user_id\\": 1, \\"title\\": \\"The Dark Knight\\", \\"month\\": \\"2023-09\\"} ] ``` **Additional Notes:** - If the `Archivos/movie_rankings.csv` file does not exist, create it. - Ensure the CSV file is correctly formatted with headers and values. - Handle the case where there are less than 5 movies watched in the given month by recording all movies watched in that month in descending order of `watch_count`.","solution":"import csv from collections import Counter def update_movie_rankings(watch_history, month, file_path=\'Archivos/movie_rankings.csv\'): # Filter watch history for the given month monthly_watch_history = [entry[\'title\'] for entry in watch_history if entry[\'month\'] == month] # Count watch occurrences watch_count = Counter(monthly_watch_history) # Create sorted list of (title, count) tuples sorted_movies = sorted(watch_count.items(), key=lambda x: (-x[1], x[0])) # Take top 5 movies top_5_movies = sorted_movies[:5] # Write to CSV file with open(file_path, \'w\', newline=\'\', encoding=\'utf-8\') as f: writer = csv.writer(f) writer.writerow([\'title\', \'watch_count\']) for title, count in top_5_movies: writer.writerow([title, count])"},{"question":"You are given a list of integers and need to determine whether it is possible to partition this list into two subsets such that the sum of elements in both subsets are equal. Write a function `canPartition` that takes a list of integers as input and returns a boolean indicating whether such a partition is possible. The requirements are as follows: 1. Define a function named `canPartition`. 2. The function should take a list of integers `nums` as input. 3. The function should return `True` if the list can be partitioned into two subsets with equal sum, otherwise return `False`. To solve this problem, you can use a dynamic programming approach. Here\'s the brief idea: - Calculate the total sum of the array. If the total sum is odd, it is impossible to split the array into two equal subsets. - Use a 2D boolean DP array where `dp[i][j]` is `True` if a subset with sum `j` can be achieved using the first `i` numbers. **Function Specification:** - **Name**: `canPartition` - **Input**: A list of integers `nums` - **Output**: A boolean value indicating whether the array can be partitioned into two subsets with equal sum **Example Usage:** ```python print(canPartition([1, 5, 11, 5])) # Output: True print(canPartition([1, 2, 3, 5])) # Output: False ``` Your task is to implement this `canPartition` function as described above, using dynamic programming to determine the possibility of partitioning the list into two subsets with equal sum.","solution":"def canPartition(nums): Determines if it\'s possible to partition the given list of integers into two subsets such that the sum of elements in both subsets are equal. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a dp array where dp[i][j] will be True if a subset with sum j can be achieved using first i elements dp = [False] * (target + 1) dp[0] = True # Base case: sum of 0 can always be achieved # Iterate over each number for num in nums: # Update the dp array from right to left for j in range(target, num-1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are required to write a function named `find_top_k_frequent` that takes in one parameter: `nums`, a list of integers, and `k`, an integer, and returns a list of the `k` most frequent elements in `nums`. The elements in the output list can be in any order. Parameters: 1. `nums` (list): A list of integers. 2. `k` (int): An integer representing the number of top frequent elements to return. Requirements: 1. Use Python’s collections module, specifically `Counter` for counting elements. 2. Utilize a suitable algorithm or data structure to find the `k` most frequent elements efficiently. 3. Ensure the solution runs in O(N log k) time complexity, where N is the length of `nums`. Example usage: ```python nums = [1,1,1,2,2,3] k = 2 result = find_top_k_frequent(nums, k) print(result) # Output: [1, 2] nums = [4,4,1,1,1,2,2,3] k = 3 result = find_top_k_frequent(nums, k) print(result) # Output: [1, 4, 2] ``` - The function `find_top_k_frequent` should return a list containing the `k` most frequent integers in `nums`. - The order of elements in the resulting list does not matter.","solution":"from collections import Counter import heapq def find_top_k_frequent(nums, k): Returns the k most frequent elements in nums. Parameters: nums (list): A list of integers. k (int): An integer representing the number of top frequent elements to return. Returns: list: A list of the k most frequent elements in any order. if k == 0: return [] count = Counter(nums) return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"You are tasked with creating a Python function, `unique_word_counter`, which reads a text file and counts the number of unique words, ignoring case and punctuation. The function should return a dictionary where the keys are the unique words and the values are the counts of their occurrences. 1. **Reading the File**: - Open and read the contents of the text file specified by the file path passed as a parameter to the function. 2. **Processing Text**: - Convert all characters to lowercase to ensure the counts are case-insensitive. - Remove punctuation using the `string.punctuation` set from the `string` library. - Tokenize the text into individual words using whitespace as the delimiter. 3. **Counting Unique Words**: - Store each unique word and its occurrence count in a dictionary. - Iterate over the tokens and update the count for each word in the dictionary. 4. **Returning Results**: - Return the dictionary containing the counts of each unique word. Requirements: - Handle potential I/O errors when accessing the file. - Use the `str.translate` method in conjunction with `str.maketrans` to remove punctuation. - Ensure the function is efficient with respect to both time and space complexity. ```python import string def unique_word_counter(file_path): try: with open(file_path, \'r\') as file: text = file.read() except IOError: print(f\\"Error: File {file_path} cannot be opened.\\") return {} text = text.lower().translate(str.maketrans(\'\', \'\', string.punctuation)) words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count ```","solution":"import string def unique_word_counter(file_path): Reads a text file and counts the number of unique words, ignoring case and punctuation. Args: file_path (str): The path to the text file. Returns: dict: A dictionary with unique words as keys and their counts as values. try: with open(file_path, \'r\') as file: text = file.read() except IOError: print(f\\"Error: File {file_path} cannot be opened.\\") return {} text = text.lower().translate(str.maketrans(\'\', \'\', string.punctuation)) words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"# Check if a String is a Palindrome Using a Stack A palindrome is a string that reads the same forward and backward, ignoring non-alphanumeric characters and case differences. Write a Python function `is_palindrome(s)` that checks if the given string `s` is a palindrome by using a stack data structure. **Requirements:** - Only use built-ins and no external libraries (e.g., `collections`). - The function should ignore any non-alphanumeric characters and should not be case-sensitive. The function should have the following signature: ```python def is_palindrome(s: str) -> bool: ``` # Parameters: - `s` (str): The input string to check. # Returns: - `bool`: `True` if `s` is a palindrome, `False` otherwise. # Example: ```python print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) ``` This should return `True` since the input string is a palindrome after ignoring spaces, commas, colons, and case differences. ```python print(is_palindrome(\\"race a car\\")) ``` This should return `False` since the input string is not a palindrome. # Notes: - You may use helper functions if necessary. - Ensure the function is efficient for large input strings. # Hints: - Use a stack to store the characters of the string while processing the string. - A stack follows the Last In First Out (LIFO) principle, which is useful for this problem. - Clean the input string by removing non-alphanumeric characters and converting it to lower case before processing with the stack.","solution":"def is_palindrome(s: str) -> bool: def clean_string(s: str) -> str: return \'\'.join(char.lower() for char in s if char.isalnum()) cleaned_str = clean_string(s) stack = [] # Push all characters onto the stack for char in cleaned_str: stack.append(char) # Pop characters from the stack and check against the original string for char in cleaned_str: if char != stack.pop(): return False return True"},{"question":"Write a Python function named `display_wine_stats()` that loads the wine dataset using the `load_wine` function from the `sklearn.datasets` library and displays the following details about the dataset: 1. The total number of samples in the dataset. 2. The total number of unique classes (target) in the dataset. 3. A brief description of the dataset. The function should return the dataset in its complete form (as a Bunch object). You should make use of the `load_wine` function from the `sklearn.datasets` library to load the dataset. Here\'s the prototype of the function you need to implement: ```python def display_wine_stats(): Loads the wine dataset and displays its essential statistics. Returns: The loaded wine dataset (Bunch object). ```","solution":"from sklearn.datasets import load_wine def display_wine_stats(): Loads the wine dataset and displays its essential statistics. Returns: The loaded wine dataset (Bunch object). # Load the wine dataset wine_data = load_wine() # Total number of samples in the dataset num_samples = len(wine_data.data) print(f\\"Total number of samples: {num_samples}\\") # Total number of unique classes in the target num_classes = len(set(wine_data.target)) print(f\\"Total number of unique classes: {num_classes}\\") # Brief description of the dataset description = wine_data.DESCR print(\\"Description of the dataset:n\\", description) return wine_data"},{"question":"** You are required to write a function `median_stock_price` to compute the hourly median stock prices for given trading data. The data is provided in a CSV format where each row represents a stock trade with columns for the stock symbol, timestamp, and price. The CSV file\'s path will be given, and it contains entries for different stock symbols, some of which might be traded at the same time. Your task is to load the data using Pandas, process it to compute the hourly median prices for each stock symbol, and return the results as a Pandas DataFrame. # Function Definition ```python def median_stock_price(file_path): Computes the hourly median stock price for each stock symbol. Args: file_path (str): The path to the CSV file containing stock trading data. Returns: df (pd.DataFrame): A DataFrame containing the hourly median prices for each stock symbol. The DataFrame should have columns: \'Stock Symbol\', \'Hour\', \'Median Price\' ``` # Requirements: 1. Read the CSV file using `pd.read_csv`. 2. Convert the \'Timestamp\' column to datetime format using `pd.to_datetime`. 3. Extract the hour from the \'Timestamp\' and store it in a new column named \'Hour\'. 4. Group the data by \'Stock Symbol\' and \'Hour\', and compute the median of the \'Price\' column for each group. 5. The function should return a DataFrame with columns \'Stock Symbol\', \'Hour\', and \'Median Price\'. # Example Usage: Suppose you have a data file named \\"stock_trades.csv\\", and you call the function as follows: ```python median_prices = median_stock_price(\'stock_trades.csv\') print(median_prices) ``` # Data Example: Here\'s a snippet of what your CSV file (e.g., \'stock_trades.csv\') might look like: ``` Stock Symbol,Timestamp,Price AAPL,2023-01-01 09:15:00,150.75 AAPL,2023-01-01 09:30:00,151.00 GOOGL,2023-01-01 09:15:00,2800.50 ... ``` # Expected Output: For the given input data, the output DataFrame might look something like this: ``` Stock Symbol Hour Median Price 0 AAPL 9 150.88 1 AAPL 10 151.10 2 GOOGL 9 2800.50 ... ``` **","solution":"import pandas as pd def median_stock_price(file_path): Computes the hourly median stock price for each stock symbol. Args: file_path (str): The path to the CSV file containing stock trading data. Returns: df (pd.DataFrame): A DataFrame containing the hourly median prices for each stock symbol. The DataFrame should have columns: \'Stock Symbol\', \'Hour\', \'Median Price\' # Read the CSV file df = pd.read_csv(file_path) # Convert the \'Timestamp\' column to datetime format df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Extract the hour from the \'Timestamp\' and store it in a new column named \'Hour\' df[\'Hour\'] = df[\'Timestamp\'].dt.hour # Group the data by \'Stock Symbol\' and \'Hour\' and compute the median of the \'Price\' column grouped = df.groupby([\'Stock Symbol\', \'Hour\'], as_index=False).median() # Rename the \'Price\' column to \'Median Price\' result = grouped.rename(columns={\'Price\': \'Median Price\'}) return result"},{"question":"Create a function that takes a list of integers and an integer `k`, and returns `True` if there are three distinct elements in the list that sum up to `k`. The function should efficiently handle large lists and raise an exception if the list contains fewer than three elements. The function should return: bool: True if there exists a triplet in the list that sums up to `k`, False otherwise. You should write self-contained code starting with: ``` def task_func(nums, k): ```","solution":"def task_func(nums, k): Returns True if there are three distinct elements in the list that sum to k. Args: nums (list): A list of integers. k (int): The target sum. Returns: bool: True if there is a triplet that sums to k, False otherwise. Raises: Exception: If the input list contains fewer than three elements. if len(nums) < 3: raise ValueError(\\"The list must contain at least three elements.\\") nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: curr_sum = nums[i] + nums[left] + nums[right] if curr_sum == k: return True elif curr_sum < k: left += 1 else: right -= 1 return False"},{"question":"You are developing software to manage a fleet of drones that deliver packages across a city grid. Each drone starts at a central depot located at (0, 0) and must deliver packages to specified locations on the grid. However, the drones have limited battery life and must return to the depot before the battery depletes. Given the coordinates of the delivery locations, the battery life of each drone, and a drone speed that is uniform across all drones, you need to determine if each drone can make all the deliveries and return to the depot with the given battery life. Complete the function `can_complete_deliveries(num_drones, drone_speeds, battery_life, delivery_points)` which determines if each drone can complete all its deliveries and return to the depot. - `num_drones` is the number of drones in the fleet. - `drone_speeds` is a list of floats representing the speed of each drone in units per second. - `battery_life` is a list of integers representing the battery life of each drone in seconds. - `delivery_points` is a list of lists, where each sublist contains tuples representing the (x, y) coordinates of the delivery points for each drone. The function should return a list of booleans indicating whether each drone can complete its deliveries and return to the depot. **Function Signature:** ```python def can_complete_deliveries(num_drones, drone_speeds, battery_life, delivery_points): pass ``` **Example:** ```python num_drones = 2 drone_speeds = [1.0, 1.5] battery_life = [3600, 1800] delivery_points = [ [(1, 1), (2, 2)], # Delivery points for drone 1 [(3, 3), (4, 4), (1, 1)] # Delivery points for drone 2 ] result = can_complete_deliveries(num_drones, drone_speeds, battery_life, delivery_points) print(result) # Expected output: [True, False] ``` **Explanation:** - Drone 1: Speed = 1.0, Battery Life = 3600 seconds. Total Distance (0,0) -> (1,1) -> (2,2) -> (0,0) is 4*sqrt(2) ≈ 5.66 units. Time needed = 5.66/1.0 = 5.66 seconds < 3600 seconds, so True. - Drone 2: Speed = 1.5, Battery Life = 1800 seconds. Total Distance (0,0) -> (3,3) -> (4,4) -> (1,1) -> (0,0) is approx 14.14 units. Time needed = 14.14/1.5 ≈ 9.43 seconds > 1800 seconds, so False.","solution":"import math def can_complete_deliveries(num_drones, drone_speeds, battery_life, delivery_points): def distance(point1, point2): return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) results = [] for i in range(num_drones): total_distance = 0 current_position = (0, 0) for point in delivery_points[i]: total_distance += distance(current_position, point) current_position = point total_distance += distance(current_position, (0, 0)) max_distance = drone_speeds[i] * battery_life[i] results.append(total_distance <= max_distance) return results"},{"question":"You need to create a function named `generate_student_report()` to create a JSON file containing information about students and their grades in various subjects. The function should use Python\'s `json` library. # Main Tasks: 1. Define a dictionary named `students` with the following structure: - `students`: A list of dictionaries, each dictionary containing: - `name`: (string) the student\'s name. - `id`: (integer) a unique identifier for the student. - `grades`: a dictionary where keys are subject names and values are the grades obtained by the student. 2. Populate the `students` dictionary with the following data: - Student 1: - name: \\"Alice\\" - id: 101 - grades: - Math: 85 - English: 92 - Science: 88 - Student 2: - name: \\"Bob\\" - id: 102 - grades: - Math: 78 - English: 85 - Science: 80 - Student 3: - name: \\"Charlie\\" - id: 103 - grades: - Math: 93 - English: 87 - Science: 91 3. Convert the dictionary to a JSON string using `json.dumps()` with an indentation of 4 spaces. 4. Write the JSON string to a file named `student_report.json`. 5. Print a message \\"JSON file creation complete!\\" after successfully writing to the file. # Libraries: - **json** library for JSON serialization and file I/O operations. # Example JSON Format: ```json { \\"students\\": [ { \\"name\\": \\"Alice\\", \\"id\\": 101, \\"grades\\": { \\"Math\\": 85, \\"English\\": 92, \\"Science\\": 88 } }, { \\"name\\": \\"Bob\\", \\"id\\": 102, \\"grades\\": { \\"Math\\": 78, \\"English\\": 85, \\"Science\\": 80 } }, { \\"name\\": \\"Charlie\\", \\"id\\": 103, \\"grades\\": { \\"Math\\": 93, \\"English\\": 87, \\"Science\\": 91 } } ] } ``` # Function Signature: ```python def generate_student_report(): pass ```","solution":"import json def generate_student_report(): students = { \\"students\\": [ { \\"name\\": \\"Alice\\", \\"id\\": 101, \\"grades\\": { \\"Math\\": 85, \\"English\\": 92, \\"Science\\": 88 } }, { \\"name\\": \\"Bob\\", \\"id\\": 102, \\"grades\\": { \\"Math\\": 78, \\"English\\": 85, \\"Science\\": 80 } }, { \\"name\\": \\"Charlie\\", \\"id\\": 103, \\"grades\\": { \\"Math\\": 93, \\"English\\": 87, \\"Science\\": 91 } } ] } json_string = json.dumps(students, indent=4) with open(\\"student_report.json\\", \\"w\\") as json_file: json_file.write(json_string) print(\\"JSON file creation complete!\\")"},{"question":"**Objective:** Write a Python function named `segment_avg(data, k)` that accepts a list of integers `data` and an integer `k`, and returns a list of the average values of each contiguous sub-list of length `k` in the input list. **Details:** 1. The input to the function `segment_avg(data, k)` is a list of integers `data` and an integer `k`. 2. Compute the average of each contiguous sub-list of length `k` in the input list. 3. Return a list of these average values. **Requirements:** - Ensure the function returns an empty list if the length of `data` is less than `k`. - Use Python\'s built-in functions and methods for computations. - Make sure to handle edge cases such as negative numbers and zero values in the input list. **Example:** Suppose the input list is `[1, 2, 3, 4, 5]` and `k` is `3`. The function should return `[2.0, 3.0, 4.0]` since the averages of the sub-lists of length `3` are `(1+2+3)/3 = 2`, `(2+3+4)/3 = 3`, and `(3+4+5)/3 = 4`.","solution":"def segment_avg(data, k): Returns a list of average values of each contiguous sub-list of length k in the input list. if k <= 0 or len(data) < k: return [] averages = [] for i in range(len(data) - k + 1): sub_list = data[i:i + k] avg = sum(sub_list) / k averages.append(avg) return averages"},{"question":"You need to implement a function called `find_critical_connections` that finds all critical connections in a given undirected graph. A critical connection is an edge in the graph that, if removed, will make the graph disconnected. The critical connections should be identified using Tarjan\'s algorithm. The steps to follow are: 1. **Graph Representation**: - The graph is given as an edge list where each edge is represented by a pair of integers `[u, v]` indicating an undirected connection between vertices `u` and `v`. - Organize this input into an adjacency list for easier traversal. 2. **Tarjan\'s Algorithm**: - Implement Tarjan\'s algorithm to detect bridges (critical connections) in the graph. - Utilize depth-first search (DFS) to explore the graph and assign discovery times and low values to each vertex. - A bridge is found when the lowest reachable vertex from a subtree rooted with vertex `v` is below the discovery time of vertex `u`. 3. **Finding and Returning Critical Connections**: - Traverse the graph using Tarjan\'s algorithm to identify all critical connections. - Return a list of all such connections. Function Signature ```python def find_critical_connections(n: int, connections: List[List[int]]) -> List[List[int]]: pass ``` Input Parameters: - `n` (int): Number of vertices in the graph. - `connections` (List[List[int]]): List of edges, where each edge is represented by a list of two integers `[u, v]` indicating a bidirectional connection between vertices `u` and `v`. Output: - Returns a list of lists, where each list contains two integers representing a critical connection in the graph. **Example**: ```python n = 4 connections = [[0, 1], [1, 2], [2, 0], [1, 3]] critical_connections = find_critical_connections(n, connections) print(critical_connections) ``` **Expected Output**: ``` [[1, 3]] ``` # Assumptions & Constraints: - All vertices are numbered from `0` to `n-1`. - The graph may not be connected. - There are no duplicate edges in the input. # Explanation: In this example, removing the edge `[1, 3]` will make vertex `3` disconnected from the rest of the graph, hence it is a critical connection.","solution":"from typing import List def find_critical_connections(n: int, connections: List[List[int]]) -> List[List[int]]: def dfs(node, parent, discovery_time): visited[node] = True discover[node] = low[node] = discovery_time discovery_time += 1 for neighbor in graph[node]: if neighbor == parent: continue if not visited[neighbor]: dfs(neighbor, node, discovery_time) low[node] = min(low[node], low[neighbor]) if low[neighbor] > discover[node]: critical_edges.append([node, neighbor]) else: low[node] = min(low[node], discover[neighbor]) graph = [[] for _ in range(n)] for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * n discover = [float(\'inf\')] * n low = [float(\'inf\')] * n critical_edges = [] for i in range(n): if not visited[i]: dfs(i, -1, 0) return critical_edges"},{"question":"** Imagine you are implementing a basic version control system. Your task is to create a function `commit_changes(folder: str, commit_message: str) -> None` which performs the following tasks: 1. Navigate to the specified folder. 2. Identify all files within the folder and its subdirectories. 3. For each identified file, calculate its MD5 hash. 4. Store each file path along with its hash and the commit message in a dictionary, where the file path is the key, and a tuple of the hash and commit message is the value. 5. Save this dictionary to a file named `commit_log.json` in the specified folder. **Function signature:** ```python def commit_changes(folder: str, commit_message: str) -> None: ``` **Example:** Given a folder structure: ``` /my_project /src main.py helper.py README.md .gitignore ``` If `commit_changes(\'/my_project\', \'Initial commit\')` is called, the content of `commit_log.json` should be similar to: ```json { \\"src/main.py\\": (\\"d41d8cd98f00b204e9800998ecf8427e\\", \\"Initial commit\\"), \\"src/helper.py\\": (\\"a87ff679a2f3e71d9181a67b7542122c\\", \\"Initial commit\\"), \\"README.md\\": (\\"e9e2ff10b707b9123043987b5ed8c35b\\", \\"Initial commit\\"), \\".gitignore\\": (\\"c4ca4238a0b923820dcc509a6f75849b\\", \\"Initial commit\\") } ``` **Constraints:** - You can assume that the specified folder exists and is readable. - Each file\'s MD5 hash should be calculated based on the content of the file. - The `os` and `hashlib` modules should be used appropriately for traversing directories and generating file hashes. This problem is designed to help you learn how to handle file traversal and hashing in Python as well as basic JSON file operations for logging purposes. --- **","solution":"import os import hashlib import json def get_md5(file_path): hash_md5 = hashlib.md5() with open(file_path, \\"rb\\") as f: for chunk in iter(lambda: f.read(4096), b\\"\\"): hash_md5.update(chunk) return hash_md5.hexdigest() def commit_changes(folder, commit_message): commit_log = {} for root, _, files in os.walk(folder): for name in files: file_path = os.path.join(root, name) relative_path = os.path.relpath(file_path, folder) file_hash = get_md5(file_path) commit_log[relative_path] = (file_hash, commit_message) commit_log_path = os.path.join(folder, \\"commit_log.json\\") with open(commit_log_path, \'w\') as f: json.dump(commit_log, f, indent=4)"},{"question":"You are tasked with creating a Python function `sum_elements` that will sum the elements of a list of numbers. This function will read numbers from a `.txt` file and return their sum. **Function Definition**: - `sum_elements(file_name: str) -> int` - This function takes the name of a `.txt` file containing numbers (one number per line) as input and returns the sum of these numbers. **Behavior**: 1. Open the specified file in read mode. 2. Read each line from the file. 3. Convert each line to an integer and calculate the sum of all these numbers. 4. Return the resulting sum. 5. The function should handle scenarios where the file might not exist, or contains non-integer content. 6. If the file does not exist, it should raise a `FileNotFoundError`. 7. If any line in the file doesn\'t contain a valid integer, it should raise a `ValueError`. **Requirements**: - Use exception handling to manage errors related to file operations and invalid data. - Return the sum as an integer. Example usage: 1. Assume the content of `numbers.txt` is: ``` 10 20 30 ``` ```python result = sum_elements(\\"numbers.txt\\") print(result) # Output: 60 ``` 2. If the file does not exist: ```python result = sum_elements(\\"non_existent_file.txt\\") # Output: Raises FileNotFoundError ``` 3. If the file contains non-numeric data: Assume the content of `invalid_numbers.txt` is: ``` 10 abc 30 ``` ```python result = sum_elements(\\"invalid_numbers.txt\\") # Output: Raises ValueError indicating invalid literal for int() with base 10: \'abc\' ```","solution":"def sum_elements(file_name: str) -> int: Sums the elements of a list of numbers, read from a text file. Args: - file_name (str): The name of the file containing numbers, one per line. Returns: - int: The sum of the numbers. Raises: - FileNotFoundError: If the file does not exist. - ValueError: If a line in the file does not contain a valid integer. total = 0 try: with open(file_name, \'r\') as file: for line in file: total += int(line.strip()) except FileNotFoundError as e: raise FileNotFoundError(f\\"The file {file_name} does not exist.\\") from e except ValueError as e: raise ValueError(f\\"Invalid content detected in file {file_name}.\\") from e return total"},{"question":"Create a Python function that generates a 2D array of random integers, computes the element-wise square root of the array, and then plots a heatmap of the resulting values. The function should output with: matplotlib.axes._axes.Axes: A heatmap of the square roots of the elements of the 2D array. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(): ```","solution":"import numpy as np import matplotlib.pyplot as plt def task_func(rows, cols, seed=None): Generates a 2D array of random integers, computes the element-wise square root of the array, and plots a heatmap of the resulting values. Args: - rows (int): Number of rows in the 2D array. - cols (int): Number of columns in the 2D array. - seed (int, optional): Random seed for reproducibility. Default is None. Returns: - matplotlib.axes._axes.Axes: The axes object with the heatmap. if seed is not None: np.random.seed(seed) # Generate a 2D array of random integers between 1 and 100 array = np.random.randint(1, 101, size=(rows, cols)) # Compute the element-wise square root of the array sqrt_array = np.sqrt(array) # Plot the heatmap fig, ax = plt.subplots() cax = ax.imshow(sqrt_array, cmap=\'viridis\', aspect=\'auto\') fig.colorbar(cax) return ax"},{"question":"Write a function called `calculate_grade` that reads a CSV file containing student grades and calculates the final grade for each student. The CSV file is located at \'data/grades.csv\' and has the following columns: \'student_id\', \'name\', \'assignment1\', \'assignment2\', \'final_exam\'. The final grade is calculated as: Final Grade = (assignment1 * 0.3) + (assignment2 * 0.3) + (final_exam * 0.4) This function should: 1. Open and read the contents of \'data/grades.csv\' using the `csv.DictReader` function from the `csv` library. 2. Calculate the final grade for each student and store it in a dictionary where the key is the \'student_id\' and the value is the calculated final grade. 3. Return the dictionary containing student IDs and their corresponding final grades. Ensure the following: - Use the `csv.DictReader` function correctly to read the file contents into dictionaries. - Perform the correct calculations for the final grade. - Store the calculated final grades in a dictionary with the specified format.","solution":"import csv def calculate_grade(file_path=\'data/grades.csv\'): Reads a CSV file of student grades and calculates the final grade for each student. Final Grade = (assignment1 * 0.3) + (assignment2 * 0.3) + (final_exam * 0.4) Args: file_path (str): path to the CSV file. Default is \'data/grades.csv\'. Returns: dict: A dictionary with student_id as keys and their final grades as values. final_grades = {} with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: student_id = row[\'student_id\'] assignment1 = float(row[\'assignment1\']) assignment2 = float(row[\'assignment2\']) final_exam = float(row[\'final_exam\']) final_grade = (assignment1 * 0.3) + (assignment2 * 0.3) + (final_exam * 0.4) final_grades[student_id] = final_grade return final_grades"},{"question":"# Context: In this programming challenge, you will be practicing reading and processing text files, managing data structures, and using basic string manipulation tools. You will work with a text file that contains a collection of records, each comprised of a name and a list of scores. # Task: Your task is to write a function `process_scores(input_file)` that reads a file and processes the scores of the individuals listed. The input file contains one record per line, and each line has a format as specified below: - Each line contains a person\'s name followed by a comma `,` and then a list of their scores, separated by spaces. e.g., `John Doe, 78 67 92 83`. Your function should perform the following steps: 1. Open and read the file specified by `input_file`. 2. Parse each line to extract the name and scores. 3. Calculate the average score for each individual. 4. Identify the individual with the highest average score. 5. Return a dictionary containing: - `total_records`: the number of records processed. - `highest_average`: the name of the individual with the highest average score. - `highest_average_score`: the corresponding highest average score. # Function Signature: ```python def process_scores(input_file: str) -> dict: ``` # Example Usage: Assume the contents of `scores.txt` are as follows: ``` John Doe, 78 67 92 83 Jane Smith, 89 90 85 91 Emily Davis, 72 88 95 85 ``` Your function should produce: ```python result = process_scores(\'scores.txt\') # result would be: # { # \'total_records\': 3, # \'highest_average\': \'Jane Smith\', # \'highest_average_score\': 88.75 # } ``` # Note: - Assume that each line in the input file is correctly formatted. - Scores can be considered as floating-point numbers during calculations for higher precision if necessary. - If there are multiple individuals with the same highest average score, return the first one encountered in the file. # Additional Information: - Ensure robust file handling to avoid runtime errors. - Make use of Python\'s standard libraries and functions to achieve the task efficiently.","solution":"def process_scores(input_file: str) -> dict: highest_average_score = float(\'-inf\') highest_average_individual = \\"\\" total_records = 0 with open(input_file, \'r\') as file: for line in file: total_records += 1 name, scores_str = line.strip().split(\',\', 1) scores = list(map(int, scores_str.strip().split())) average_score = sum(scores) / len(scores) if average_score > highest_average_score: highest_average_score = average_score highest_average_individual = name return { \'total_records\': total_records, \'highest_average\': highest_average_individual, \'highest_average_score\': highest_average_score }"},{"question":"You are required to implement a function `find_means_and_median(data_list)` that takes a list of lists containing numerical values. Your task is to perform the following operations: 1. Calculate the mean (average) of each inner list and store it in a separate list. 2. Calculate the median (middle value) of each inner list and store it in another separate list. 3. Print out both the list of means and the list of medians. **Function Signature:** ```python def find_means_and_median(data_list: list) -> None: pass ``` **Requirements:** 1. You must use the `statistics` library to calculate the mean and median of the lists. 2. The function should handle the lists gracefully even if they contain a single element or are empty. **Example:** ```python data_list = [ [1, 2, 3, 4, 5], [5, 8, 12, 7, 6], [10, 20, 30], [3, 3, 3, 3, 3], [] ] find_means_and_median(data_list) ``` For the given `data_list`, the function should: - Calculate and print the list of means: `[3.0, 7.6, 20.0, 3.0, nan]` (where `nan` represents \'Not a Number\' for empty sublists or appropriate handling). - Calculate and print the list of medians: `[3, 7, 20, 3, nan]`. Implement the functionality carefully considering edge cases and ensure proper handling of different sizes of inner lists.","solution":"from statistics import mean, median from math import nan def find_means_and_median(data_list: list) -> None: means = [] medians = [] for lst in data_list: if lst: means.append(mean(lst)) medians.append(median(lst)) else: means.append(nan) medians.append(nan) print(\\"Means:\\", means) print(\\"Medians:\\", medians)"},{"question":"You are tasked with implementing a function `knapsack` that solves the 0/1 knapsack problem using dynamic programming. The knapsack problem is a classic algorithmic problem in which you are given a set of items, each with a weight and a value, and you must determine the maximum value you can carry in a knapsack that can hold a maximum weight `W`. You can either include an item in the knapsack or not (hence the name 0/1 knapsack). # Function Signature ```python def knapsack(W: int, weights: list, values: list, n: int) -> int: ``` # Parameters - `W` (int): The maximum capacity of the knapsack. - `weights` (list): A list of integers where each integer represents the weight of an item. - `values` (list): A list of integers where each integer represents the value of an item. The length of `values` is the same as `weights`. - `n` (int): The total number of items. # Returns - `int`: The maximum value that can be put in a knapsack of capacity `W`. # Examples ```python >>> weights = [1, 3, 4, 5] >>> values = [1, 4, 5, 7] >>> W = 7 >>> n = len(weights) >>> knapsack(W, weights, values, n) 9 >>> weights = [2, 3, 4, 5] >>> values = [3, 4, 5, 6] >>> W = 5 >>> n = len(weights) >>> knapsack(W, weights, values, n) 7 ``` # Notes - You may assume all inputs are non-negative integers. - The function should use dynamic programming to solve the problem efficiently. - The length of `weights` and `values` lists is equal to `n`. # Requirements Utilize the following `numpy` functions to complete your implementation: - `numpy.zeros` Implement the recursive approach with memoization.","solution":"import numpy as np def knapsack(W: int, weights: list, values: list, n: int) -> int: # Initialize a DP array with zeros dp = np.zeros((n + 1, W + 1)) # Fill the dp array for i in range(1, n + 1): for w in range(1, W + 1): if weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] # Return the maximum value that can be put in the knapsack of capacity W return int(dp[n][W])"},{"question":"You are asked to create a function that simulates the rolling of two six-sided dice and calculates the number of times a specific sum appears when the dice are rolled multiple times. The function will be called `dice_simulation(target_sum, num_rolls)`. The `dice_simulation` function should perform the following tasks: 1. Simulate rolling two six-sided dice `num_rolls` times. 2. Count how many times the sum of the two dice equals `target_sum`. 3. Print the total number of rolls and how many times the `target_sum` appeared. 4. Calculate and print the percentage of rolls that resulted in the `target_sum`. Ensure to import the `random` module for generating random numbers. Here is the structure for the function you need to implement: ```python import random def dice_simulation(target_sum, num_rolls): Simulates rolling two dice and counts occurrences of a specific sum. # Your implementation here ```","solution":"import random def dice_simulation(target_sum, num_rolls): Simulates rolling two dice and counts occurrences of a specific sum. Parameters: target_sum (int): The sum to count occurrences for. num_rolls (int): Number of times to roll the dice. Returns: tuple: Number of times the target_sum was rolled, and the percentage of rolls. count = 0 for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == target_sum: count += 1 percentage = (count / num_rolls) * 100 print(f\\"Total rolls: {num_rolls}\\") print(f\\"Number of times {target_sum} appeared: {count}\\") print(f\\"Percentage of rolls that resulted in {target_sum}: {percentage:.2f}%\\") return count, percentage"},{"question":"Write a function that takes a list of integers as input and returns a list of integers that includes only the prime numbers from the input list. Additionally, the function should plot a bar chart showing the frequency of each prime number in the output list. The bar chart should display prime numbers on the x-axis and their frequencies on the y-axis. The function should output with: list: A list containing the prime numbers found in the input list. matplotlib.axes.Axes: The Axes object of the plot displaying the frequency of the prime numbers. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import Counter def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def task_func(lst): ```","solution":"import matplotlib.pyplot as plt from collections import Counter def is_prime(n): Check if a number is prime. Args: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def task_func(lst): Filter the prime numbers from the input list and plot a bar chart of their frequencies. Args: lst (list): List of integers. Returns: list: A list of prime numbers from the input list. matplotlib.axes.Axes: The Axes object of the plot displaying the frequency of the prime numbers. primes = [n for n in lst if is_prime(n)] prime_counts = Counter(primes) fig, ax = plt.subplots() ax.bar(prime_counts.keys(), prime_counts.values()) ax.set_xlabel(\'Prime Numbers\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Frequency of Prime Numbers in List\') return primes, ax"},{"question":"In this problem, you are tasked with implementing a function called `unique_values_count` that counts unique values in a given array and returns a dictionary mapping each unique value to its count. This is a common problem often encountered in data analysis and manipulation tasks. Your task: - Write a function `unique_values_count(arr)`: - **Input**: - `arr`: A list of integers. - **Output**: - A dictionary where the keys are the unique integers from the input list, and the values are their respective counts in the list. **Function Signature**: ```python def unique_values_count(arr): ... ``` To implement this function, you should: 1. Initialize an empty dictionary. 2. Iterate over the elements in the input list. 3. For each element, check if it is already a key in the dictionary. 4. If it is, increment its value by one; otherwise, add it to the dictionary with a value of one. 5. Return the dictionary with the counts of each unique element. # Example ```python # Example 1 arr = [1, 2, 2, 3, 3, 3] print(unique_values_count(arr)) # Output: {1: 1, 2: 2, 3: 3} # Example 2 arr = [5, 5, 5, 5, 5] print(unique_values_count(arr)) # Output: {5: 5} # Example 3 arr = [4, 6, 7, 4, 6, 7, 4] print(unique_values_count(arr)) # Output: {4: 3, 6: 2, 7: 2} ``` Implement the function `unique_values_count` ensuring it follows the described process and returns accurate results for any list of integers.","solution":"def unique_values_count(arr): Counts unique values in an array and returns a dictionary where each key is a unique value from the array, and each value is the count of times that value appears in the array. Parameters: arr (list): List of integers. Returns: dict: Dictionary with unique integers as keys and their counts as values. counts = {} for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts"},{"question":"Given an integer array `nums` and an integer `target`, write a function `find_target_indices` that returns a list of indices of the elements in `nums` that add up to the `target`. Each input would have exactly one solution, and the same element cannot be reused. You may assume that each input would have exactly one solution and you may not use the same element twice. The function should run in O(n) time complexity. The function `find_target_indices` should: 1. Take an integer array `nums` and an integer `target` as parameters. 2. Return a list of two integers which are the indices of the elements in `nums` that add up to `target`. **Function Signature:** ```python def find_target_indices(nums, target): pass ``` **Example Usage:** ```python nums = [2, 7, 11, 15] target = 9 print(find_target_indices(nums, target)) # Output: [0, 1] nums = [3, 2, 4] target = 6 print(find_target_indices(nums, target)) # Output: [1, 2] nums = [3, 3] target = 6 print(find_target_indices(nums, target)) # Output: [0, 1] ``` **Constraints:** - `nums` contains at least 2 elements. - Each input would have exactly one solution. - You may not use the same element twice. # Approach: - The function should iterate over the array while keeping track of each element\'s index. - Utilize a dictionary to store the elements and their indices while checking if the complement (target - current element) exists in the dictionary. - Return the indices if the complement is found, ensuring a time complexity of O(n).","solution":"def find_target_indices(nums, target): Returns indices of the two numbers that add up to the specified target. :param nums: List of integers :param target: Integer target sum :return: List containing indices of the two numbers adding up to target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Write a Python function that processes a log file and extracts specific information based on user\'s queries. The log file consists of multiple lines where each line describes an event with a timestamp, event type, and event details. The user should be able to query events by type and a date range. Function Signature ```python def query_log_file(log_file_path, event_type, start_date, end_date): ``` Function Description - **log_file_path** (str): Path to the log file that needs to be processed. - **event_type** (str): The type of event the user wants to query (e.g., \'ERROR\', \'INFO\'). - **start_date** (str): The start of the date range for which the user wants to query events in the format \'YYYY-MM-DD\'. - **end_date** (str): The end of the date range for which the user wants to query events in the format \'YYYY-MM-DD\'. # Requirements 1. Open and read the log file line by line. 2. Extract the timestamp, event type, and event details from each line. 3. Filter the events by the given event type and the date range. 4. The date in the log file is part of the timestamp and is formatted as \'YYYY-MM-DD\'. 5. Return a list of event details that match the query. 6. Handle any exceptions that may occur when reading the file or processing the data. # Example ```text log_file.txt: 2023-07-01 12:00:00 ERROR Connection lost 2023-07-01 12:05:00 INFO Reconnected successfully 2023-07-02 09:12:34 ERROR Timeout occurred 2023-07-03 14:22:10 INFO System rebooted query_log_file(\'log_file.txt\', \'ERROR\', \'2023-07-01\', \'2023-07-02\') # Should return [\'Connection lost\', \'Timeout occurred\'] ```","solution":"def query_log_file(log_file_path, event_type, start_date, end_date): Processes a log file, filtering events by type and date range. :param log_file_path: str, path to the log file :param event_type: str, type of event to query (e.g., \'ERROR\', \'INFO\') :param start_date: str, start of the date range (\'YYYY-MM-DD\') :param end_date: str, end of the date range (\'YYYY-MM-DD\') :return: list of event details matching the query from datetime import datetime import re events = [] try: with open(log_file_path, \'r\') as file: for line in file: match = re.match(r\'(d{4}-d{2}-d{2}) d{2}:d{2}:d{2} (w+) (.+)\', line) if match: timestamp, log_event_type, log_event_details = match.groups() if log_event_type == event_type and start_date <= timestamp <= end_date: events.append(log_event_details) except Exception as e: print(f\\"Error processing log file: {e}\\") return events"},{"question":"You are tasked with writing a function that simulates the performance of a sorting algorithm across different sizes of input arrays. This function should utilize the `matplotlib.pyplot` library to visualize the results. Specifically, you need to set the title of the plot using the `matplotlib.pyplot.title` method. The provided code snippet generates input arrays of varying sizes and measures the time taken by a sorting algorithm to sort each array. The details specific to `matplotlib.pyplot.title` will be emphasized, as these are crucial for titling the plot created by the function. # Requirements: 1. **Function Name**: The function should be named `sorting_performance` and it should accept two parameters: - `max_size` (int): The maximum size of the input arrays to be tested. - `sort_function` (function): The sorting algorithm to be evaluated. 2. **Generate Input Arrays**: The function should generate random input arrays for sizes from 1 to `max_size`. Ensure the arrays are generated using a pseudorandom number generator for reproducibility. 3. **Simulation and Recording**: For each array size, run the provided sorting algorithm (`sort_function`) and record the time taken to sort the array in a list named `times`. 4. **Plotting Results**: Plot the time taken against the array sizes using `matplotlib.pyplot`. Set the title of the plot using the `matplotlib.pyplot.title` method. Save the plot as an image file and display it. 5. **Output**: The function should return the list of input sizes `sizes` and their corresponding `times`. # Code Snippet: ```python def sorting_performance(max_size, sort_function): import numpy as np import matplotlib.pyplot as plt import time # Times taken to sort arrays times = [] sizes = range(1, max_size + 1) for size in sizes: np.random.seed(0) # Set seed for reproducibility array = np.random.randint(low=0, high=1000, size=size) print(f\'Sorting Array of Size: {size}\') start_time = time.time() sort_function(array) end_time = time.time() times.append(end_time - start_time) plt.figure(figsize=(12, 10)) plt.plot(sizes, times) plt.xlabel(\'Array Size\', fontsize=16) plt.ylabel(\'Time (seconds)\', fontsize=16) plt.title(\'Sorting Algorithm Performance\', fontsize=20) # Required usage of matplotlib.pyplot.title plt.savefig(\'sorting_performance.jpg\') plt.show() return sizes, times ``` You are required to define the `sorting_performance` function using `matplotlib.pyplot.title` as specified. Make sure the function is self-contained and thoroughly tested.","solution":"def sorting_performance(max_size, sort_function): import numpy as np import matplotlib.pyplot as plt import time # Times taken to sort arrays times = [] sizes = range(1, max_size + 1) for size in sizes: np.random.seed(0) # Set seed for reproducibility array = np.random.randint(low=0, high=1000, size=size) start_time = time.time() sort_function(array) end_time = time.time() times.append(end_time - start_time) plt.figure(figsize=(12, 10)) plt.plot(sizes, times) plt.xlabel(\'Array Size\', fontsize=16) plt.ylabel(\'Time (seconds)\', fontsize=16) plt.title(\'Sorting Algorithm Performance\', fontsize=20) # Required usage of matplotlib.pyplot.title plt.savefig(\'sorting_performance.jpg\') plt.show() return list(sizes), times"},{"question":"In this problem, you are required to write a function that implements a simple file-based key-value store. The function should allow storing, retrieving, and deleting key-value pairs where both the key and value are strings. The data should be persisted in a file such that it is retained across program restarts. The file will be formatted with each key-value pair on a new line, separated by a comma (`key,value`). The function signature is as follows: ```python def key_value_store(command: str, key: str = \'\', value: str = \'\') -> str: Performs operations on a simple file-based key-value store. Args: command (str): The command to be executed, can be \'SET\', \'GET\', or \'DELETE\'. key (str): The key for the operation. Required for \'SET\', \'GET\', and \'DELETE\'. value (str): The value to be set for the key. Required for \'SET\' command. Returns: str: The value associated with the key for \'GET\' command, \\"SUCCESS\\" for \'SET\' and \'DELETE\' commands, \\"NOT FOUND\\" if the key does not exist for \'GET\' and \'DELETE\' commands. ``` **Detailed Explanation:** 1. **File Location**: Use a file named `store.txt` in the current working directory to store the key-value pairs. 2. **SET Command**: The \'SET\' command should add a new key-value pair or update the value if the key already exists. Each key-value pair should be stored on a new line in the format `key,value`. 3. **GET Command**: The \'GET\' command should retrieve the value associated with the provided key. If the key does not exist, return \\"NOT FOUND\\". 4. **DELETE Command**: The \'DELETE\' command should remove the key-value pair associated with the provided key. If the key does not exist, return \\"NOT FOUND\\". 5. **Data Handling**: Ensure appropriate handling of reading from and writing to the file to maintain data integrity. Here is an example of how to call your function: ```python key_value_store(\'SET\', \'name\', \'Alice\') print(key_value_store(\'GET\', \'name\')) # Outputs: Alice print(key_value_store(\'DELETE\', \'name\')) # Outputs: SUCCESS print(key_value_store(\'GET\', \'name\')) # Outputs: NOT FOUND ```","solution":"def key_value_store(command: str, key: str = \'\', value: str = \'\') -> str: Performs operations on a simple file-based key-value store. Args: command (str): The command to be executed, can be \'SET\', \'GET\', or \'DELETE\'. key (str): The key for the operation. Required for \'SET\', \'GET\', and \'DELETE\'. value (str): The value to be set for the key. Required for \'SET\' command. Returns: str: The value associated with the key for \'GET\' command, \\"SUCCESS\\" for \'SET\' and \'DELETE\' commands, \\"NOT FOUND\\" if the key does not exist for \'GET\' and \'DELETE\' commands. filename = \'store.txt\' def load_store(): store = {} try: with open(filename, \'r\') as file: for line in file: k, v = line.strip().split(\',\', 1) store[k] = v except FileNotFoundError: pass return store def save_store(store): with open(filename, \'w\') as file: for k, v in store.items(): file.write(f\\"{k},{v}n\\") store = load_store() if command == \'SET\': store[key] = value save_store(store) return \\"SUCCESS\\" elif command == \'GET\': return store.get(key, \\"NOT FOUND\\") elif command == \'DELETE\': if key in store: del store[key] save_store(store) return \\"SUCCESS\\" else: return \\"NOT FOUND\\""},{"question":"You are given a task to implement a K-Nearest Neighbors (KNN) classifier using the `scikit-learn` library to classify types of wines based on their chemical properties. The dataset for this problem is provided in CSV format and is named `wine_quality.csv`. The dataset contains the following columns: - `fixed acidity` - `volatile acidity` - `citric acid` - `residual sugar` - `chlorides` - `free sulfur dioxide` - `total sulfur dioxide` - `density` - `pH` - `sulphates` - `alcohol` - `quality` (the target label) Your task is to create a function `train_and_evaluate_knn` that performs the following: 1. Load the dataset. 2. Split the dataset into a training set (80%) and a test set (20%). 3. Standardize the feature columns using `StandardScaler`. 4. Train a K-Nearest Neighbors classifier using the features and the target labels. 5. Make predictions on the test set. 6. Calculate and print the accuracy score and the classification report of the model. Your function should be named `train_and_evaluate_knn` and have the following signature: ```python def train_and_evaluate_knn(csv_path: str) -> None: ``` Use the `KNeighborsClassifier` from `sklearn.neighbors.KNeighborsClassifier` to build the classifier.","solution":"from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, classification_report import pandas as pd def train_and_evaluate_knn(csv_path: str) -> None: # Load the dataset data = pd.read_csv(csv_path) # Separate features and target X = data.drop(\\"quality\\", axis=1) y = data[\\"quality\\"] # Split the dataset into a training set (80%) and a test set (20%) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Standardize the feature columns using StandardScaler scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Train a K-Nearest Neighbors classifier knn = KNeighborsClassifier(n_neighbors=5) # You can adjust the number of neighbors knn.fit(X_train_scaled, y_train) # Make predictions on the test set y_pred = knn.predict(X_test_scaled) # Calculate and print the accuracy score and the classification report of the model accuracy = accuracy_score(y_test, y_pred) class_report = classification_report(y_test, y_pred) print(f\\"Accuracy: {accuracy:.4f}\\") print(\\"Classification Report:\\") print(class_report)"},{"question":"You are tasked to implement a function `find_repeated_substrings(s: str, k: int) -> List[str]` which finds and returns all substrings of length `k` that occur more than once in the given string `s`. The function should be case-sensitive. If there are no repeated substrings, return an empty list. Pay attention to the efficiency of your solution with respect to time and space complexity. The function should follow these requirements: 1. The input `s` is a string consisting of lowercase and uppercase alphabetical letters. 2. The input `k` is an integer representing the length of the substring to search for repeated occurrences. 3. Return the repeated substrings in a list, preserving the order of their first appearance. Examples: ``` find_repeated_substrings(\\"banana\\", 2) ``` Output: ``` [\'an\', \'na\'] ``` ``` find_repeated_substrings(\\"abcdefg\\", 2) ``` Output: ``` [] ``` ``` find_repeated_substrings(\\"abcabcabc\\", 3) ``` Output: ``` [\'abc\', \'bca\', \'cab\'] ```","solution":"from typing import List def find_repeated_substrings(s: str, k: int) -> List[str]: Finds and returns all substrings of length k that occur more than once in the given string s. if k <= 0 or k > len(s): return [] substring_count = {} repeated_substrings = [] for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 for substring, count in substring_count.items(): if count > 1: repeated_substrings.append(substring) return repeated_substrings"},{"question":"You are given an array of integers and an integer target value. Your task is to write a function that finds all unique quadruplets in the array that sum up to the target value. The quadruplets should be listed in ascending order, and no duplicate quadruplets should be included in the result. # Requirements: 1. Your function should be named `find_quadruplets`. 2. Input to your function: - An array of integers. - A single integer representing the target value. 3. Output of your function: - A list of lists, where each inner list contains four integers that add up to the target value. The function prototype should look like this: ```python def find_quadruplets(nums: list, target: int) -> list: ``` # Example: Given the following inputs: ```python nums = [1, 0, -1, 0, -2, 2] target = 0 ``` Your function should return: ```python [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] ```","solution":"def find_quadruplets(nums: list, target: int) -> list: Finds all unique quadruplets in the array that sum up to the target value. Quadruplets are listed in ascending order, and no duplicate quadruplets are included in the result. nums.sort() # Sorting the array quadruplets = [] for i in range(len(nums) - 3): # Avoid duplicates for the first number if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, len(nums) - 2): # Avoid duplicates for the second number if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, len(nums) - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) # Avoid duplicates for the third and fourth numbers while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"You have been provided a long list of timestamps representing a series of events. Each event is marked with a timestamp in \\"YYYY-MM-DD hh:mm:ss\\" format. Your task is to write a function `analyze_timestamps` that calculates the following: 1. The total number of events. 2. The number of unique days on which events occurred. 3. The event that occurred first and the event that occurred last. 4. The number of events that occurred on the day with the maximum number of events (busiest day). The specific requirements of the function `analyze_timestamps` are: - Parse the timestamps and analyze them to obtain the required information. - Use Python\'s `datetime` module for parsing and manipulating the timestamps. - Return a dictionary containing the results. Function Signature: ```python def analyze_timestamps(timestamps: List[str]) -> Dict[str, Any]: ``` Usage of Required Libraries: - Use Python\'s `datetime` module for parsing the date and time. Example: ```python # List of event timestamps timestamps = [ \'2023-05-01 13:24:56\', \'2023-05-01 15:45:02\', \'2023-05-01 21:35:32\', \'2023-05-02 10:01:00\', \'2023-05-02 11:45:12\', \'2023-05-03 14:20:05\', \'2023-05-03 18:40:56\', \'2023-05-05 19:23:15\' ] result = analyze_timestamps(timestamps) print(result) ``` Expected Output: ```json { \\"total_events\\": 8, \\"unique_days\\": 4, \\"first_event\\": \\"2023-05-01 13:24:56\\", \\"last_event\\": \\"2023-05-05 19:23:15\\", \\"busiest_day_count\\": 3 } ``` # Detailed Steps: 1. Parse each timestamp to extract the date and time. 2. Calculate the total number of events from the length of the list. 3. Find the unique days by extracting the date part of each timestamp and storing them in a set. 4. Identify the first and last event by sorting the timestamps. 5. Determine the busiest day by counting the occurrences of each date and identifying the maximum. Test your implementation with different sets of timestamps to ensure accuracy and robustness.","solution":"from typing import List, Dict, Any from datetime import datetime from collections import Counter def analyze_timestamps(timestamps: List[str]) -> Dict[str, Any]: Analyzes a list of timestamps to calculate various statistics. Args: timestamps (List[str]): List of timestamps in \\"YYYY-MM-DD hh:mm:ss\\" format. Returns: Dict[str, Any]: Dictionary containing the calculated statistics. if not timestamps: return { \\"total_events\\": 0, \\"unique_days\\": 0, \\"first_event\\": None, \\"last_event\\": None, \\"busiest_day_count\\": 0 } # Convert string timestamps to datetime objects datetime_stamps = [datetime.strptime(ts, \\"%Y-%m-%d %H:%M:%S\\") for ts in timestamps] # Sort the datetime objects datetime_stamps.sort() # Calculate total number of events total_events = len(datetime_stamps) # Extract unique days unique_days = set(dt.date() for dt in datetime_stamps) # Calculate number of events for each day day_counts = Counter(dt.date() for dt in datetime_stamps) busiest_day_count = max(day_counts.values()) # Extract first and last event first_event = datetime_stamps[0].strftime(\\"%Y-%m-%d %H:%M:%S\\") last_event = datetime_stamps[-1].strftime(\\"%Y-%m-%d %H:%M:%S\\") return { \\"total_events\\": total_events, \\"unique_days\\": len(unique_days), \\"first_event\\": first_event, \\"last_event\\": last_event, \\"busiest_day_count\\": busiest_day_count }"},{"question":"In this exercise, you will create a function that performs polynomial interpolation on a given dataset (x, y) using Lagrange\'s method. The goal is to calculate the Lagrange polynomial that fits the given data points and use it to estimate the y value at a specified x value. You will utilize the NumPy library to accomplish this task. **Function Signature:** ```python def lagrange_interpolation(x, y, x_value): pass ``` **Instructions:** 1. Given the `x` and `y` data points, convert both lists to NumPy arrays using `numpy.asarray`. 2. Implement the Lagrange polynomial interpolation formula. For each x value, calculate the Lagrange basis polynomial ( L_i(x) ) using the following expression: - ( L_i(x) = prod_{j=0,jneq i}^{n-1} frac{x - x_j}{x_i - x_j} ) 3. Sum up the contributions of each Lagrange basis polynomial to estimate the y value at `x_value`: - ( P(x) = sum_{i=0}^{n-1} y_i cdot L_i(x) ) 4. Return the estimated y value at the specified `x_value`. **Example:** ```python x = [1, 2, 4] y = [1, 4, 16] x_value = 3 result = lagrange_interpolation(x, y, x_value) print(result) ``` Expected Output: ```python 9.0 ```","solution":"import numpy as np def lagrange_interpolation(x, y, x_value): Perform polynomial interpolation using Lagrange\'s method. Parameters: x (list or array-like): x coordinates of the data points y (list or array-like): y coordinates of the data points x_value (float): The x value at which to estimate the y value Returns: float: The estimated y value at x_value x = np.asarray(x) y = np.asarray(y) n = len(x) result = 0 for i in range(n): L_i = 1 for j in range(n): if i != j: L_i *= (x_value - x[j]) / (x[i] - x[j]) result += y[i] * L_i return result"},{"question":"Write a function that takes a list of strings and an integer `n`, and returns a new list consisting of strings that have exactly `n` vowels (a, e, i, o, u). The function should be case-insensitive and consider both uppercase and lowercase vowels. If no strings in the list meet the criteria, return an empty list. The function should output with: list: A list of strings meeting the vowel count criteria. You should write self-contained code starting with: ``` def filter_strings_by_vowel_count(strings, n): ```","solution":"def filter_strings_by_vowel_count(strings, n): Returns a list of strings that contain exactly n vowels. Parameters: strings (list): List of strings to be filtered. n (int): The exact number of vowels required in the string. Returns: list: A list of strings that have exactly n vowels. vowels = set(\\"aeiouAEIOU\\") result = [] for string in strings: vowel_count = sum(1 for char in string if char in vowels) if vowel_count == n: result.append(string) return result"},{"question":"In this problem, you are required to create a function that processes a text document to summarize its content. Specifically, you will write a function named `summarize_text` that identifies the most frequently occurring words in the text and displays them in order of frequency. Here is the signature of the function you\'ll need to implement: ```python def summarize_text(text, num_words): pass ``` Parameters: - `text` (str): The text document to be processed. - `num_words` (int): The number of top words to display based on their frequency. Functional Requirements: 1. **Text Processing**: - Normalize the text by converting it to lowercase. - Remove punctuation from the text. You can assume that the text will only contain the following punctuation marks: `, . ? ! ; : - ( )`. 2. **Word Frequency Calculation**: - Split the text into words and count the frequency of each word. 3. **Display Output**: - Sort the words by their frequency in descending order. If two words have the same frequency, sort them alphabetically. - Display the top `num_words` most frequently occurring words along with their frequencies. 4. **Edge Cases**: - If the `text` is empty, return an empty list. - If `num_words` is greater than the number of unique words in the text, return the frequency of all unique words. **Example Usage**: ```python text = \\"Hello world! It\'s a beautiful day in the neighborhood. Hello again, world!\\" num_words = 3 print(summarize_text(text, num_words)) # Output: [(\'hello\', 2), (\'world\', 2), (\'a\', 1)] ``` Do not import any additional libraries for handling string operations beyond built-in functionalities. Test your implementation by calling the `summarize_text` function with various sample texts to ensure it works as expected.","solution":"import re from collections import Counter def summarize_text(text, num_words): Summarizes the text by identifying the most frequently occurring words. Parameters: - text (str): The text document to be processed. - num_words (int): The number of top words to display based on their frequency. Returns: - List[Tuple[str, int]]: A list of tuples, each containing a word and its frequency, sorted by frequency and alphabetically. # Normalize the text by converting it to lowercase text = text.lower() # Remove punctuation text = re.sub(r\'[.,?!;:-()]\', \'\', text) # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort words by frequency (descending) and then alphabetically sorted_word_counts = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Get the top `num_words` words top_words = sorted_word_counts[:num_words] return top_words"},{"question":"You are tasked with creating a function to perform k-means clustering on a dataset using NumPy. This function will initialize cluster centroids randomly, assign each data point to the nearest centroid, update centroids, and iterate this process until the centroids do not change significantly. Required Libraries: - `numpy`: Ensure you are using NumPy for all operations. Function Name: - `k_means` Function Signature: ```python def k_means(data, k, max_iters=100, tol=1e-4): Perform k-means clustering on a given dataset. Args: data (np.ndarray): A 2D numpy array of shape (n_samples, n_features) representing the dataset. k (int): The number of clusters. max_iters (int, optional): The maximum number of iterations. Default is 100. tol (float, optional): The tolerance to declare convergence, based on the centroid shift. Default is 1e-4. Returns: tuple: A tuple containing: - centroids (np.ndarray): A 2D numpy array of shape (k, n_features) representing the final centroids. - labels (np.ndarray): A 1D numpy array of shape (n_samples,) representing the cluster labels for each data point. ``` Parameters: - `data` (np.ndarray): A 2D numpy array representing the dataset with `n_samples` rows and `n_features` columns. - `k` (int): The number of clusters to form. - `max_iters` (int, optional): The maximum number of iterations to run the algorithm. Default is 100. - `tol` (float, optional): The tolerance value for declaring convergence, based on the Euclidean distance shift of centroids. Default is 1e-4. Output: - Returns a tuple: - `centroids` (np.ndarray): A 2D array of shape (k, n_features) representing the final cluster centroids. - `labels` (np.ndarray): A 1D array of shape (n_samples,) containing the cluster label for each data point. Ensure to use the following NumPy functions: - `numpy.random.rand` for initializing centroids. - `numpy.linalg.norm` for calculating Euclidean distance. - `numpy.mean` for updating centroids. Here is an example of how the function might be utilized: ```python import numpy as np # Example usage of the function np.random.seed(42) data = np.random.rand(10, 2) # Data with 10 samples and 2 features k = 3 centroids, labels = k_means(data, k) print(\\"Centroids:n\\", centroids) print(\\"Labels:n\\", labels) ```","solution":"import numpy as np def k_means(data, k, max_iters=100, tol=1e-4): Perform k-means clustering on a given dataset. Args: data (np.ndarray): A 2D numpy array of shape (n_samples, n_features) representing the dataset. k (int): The number of clusters. max_iters (int, optional): The maximum number of iterations. Default is 100. tol (float, optional): The tolerance to declare convergence, based on the centroid shift. Default is 1e-4. Returns: tuple: A tuple containing: - centroids (np.ndarray): A 2D numpy array of shape (k, n_features) representing the final centroids. - labels (np.ndarray): A 1D numpy array of shape (n_samples,) representing the cluster labels for each data point. n_samples, n_features = data.shape # Randomly initialize the centroids np.random.seed(42) centroids = data[np.random.choice(n_samples, k, replace=False)] for _ in range(max_iters): # Assign labels based on closest centroid distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Calculate new centroids new_centroids = np.array([data[labels == j].mean(axis=0) for j in range(k)]) # Check for convergence if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < tol): break centroids = new_centroids return centroids, labels"},{"question":"In this task, you will create a Python function called `find_isbn_prefix` that takes a list of ISBN-10 codes and a prefix string and returns a list of all ISBN-10 codes that start with the given prefix. An ISBN-10 code is a 10-character string consisting of digits and possibly ending with the character \'X\'. You should perform a prefix match, which means the beginning characters of the ISBN-10 codes should match the provided prefix exactly. Function Signature ```python def find_isbn_prefix(isbns: list, prefix: str) -> list: ``` Input - `isbns` (list): A list of strings where each string is an ISBN-10 code. - `prefix` (str): A prefix string. Output - (list): A list of strings containing all ISBN-10 codes from the input list that start with the given prefix. The order of the ISBN-10 codes in the output list should match their order in the input list. Example ```python # Example 1 isbns = [\\"123456789X\\", \\"2345678901\\", \\"1234536789\\", \\"5678901234\\"] prefix = \\"123\\" output = find_isbn_prefix(isbns, prefix) print(output) # Output: [\\"123456789X\\", \\"1234536789\\"] # Example 2 isbns = [\\"9876543210\\", \\"5432109876\\", \\"6789012345\\", \\"0987654321\\"] prefix = \\"543\\" output = find_isbn_prefix(isbns, prefix) print(output) # Output: [\\"5432109876\\"] ``` Constraints 1. All input ISBNs will be valid, meaning they will be exactly 10 characters long and contain only digits or digits followed by \'X\'. 2. The prefix can be any non-empty string consisting of digits. 3. If no ISBNs match the prefix, return an empty list. Hints - Use Python\'s string method `startswith` to check if a string begins with the given prefix. - Iterate through each ISBN in the list and collect those that match the prefix. Good luck with implementing the `find_isbn_prefix` function!","solution":"def find_isbn_prefix(isbns: list, prefix: str) -> list: Returns a list of ISBN-10 codes that start with the given prefix. :param isbns: list of ISBN-10 codes (strings) :param prefix: prefix string :return: list of ISBN-10 codes that start with the given prefix return [isbn for isbn in isbns if isbn.startswith(prefix)]"},{"question":"You are required to write a function named `rotate_array` that rotates the elements of an array to the right by a given number of steps. This will help you understand array manipulation and how indices work in Python. **Function Signature:** ```python def rotate_array(arr: list, steps: int) -> list: ``` **Parameters:** - `arr` (list): A list of integers. - `steps` (int): The number of steps by which the array should be rotated to the right. This can be a non-negative integer. **Return:** - The function should return a new list where the elements are rotated to the right by the specified number of steps. **Function Behavior:** - If `arr` is empty, return an empty list. - If `steps` is greater than the length of the array, it should wrap around appropriately using modulo operation. - The function performs the specified number of right rotations and returns the resulting array. **Example Usage:** ```python rotate_array([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] rotate_array([1, 2, 3, 4, 5], 7) -> [4, 5, 1, 2, 3] # 7 % 5 = 2 rotate_array([], 3) -> [] rotate_array([1], 10) -> [1] ``` The primary goal of this exercise is to practice array manipulations and understand how to effectively handle index calculations when rotating arrays.","solution":"def rotate_array(arr: list, steps: int) -> list: Rotates the elements of the array to the right by the given number of steps. if not arr: return [] n = len(arr) steps = steps % n # Normalize the number of steps to be within the array length return arr[-steps:] + arr[:-steps]"},{"question":"Write a function `get_first_day_of_spring(year: int) -> datetime.date` to determine the first day of spring in a given year. The first day of spring in the Northern Hemisphere (also known as the Spring Equinox) typically falls around March 20th. Your task is to calculate the exact date of the Spring Equinox for a given year. To accomplish this, you can assume: 1. The Spring Equinox generally happens on March 20th but can slightly vary in actual astronomical calculations, thus we can simplify the problem by fixing it to March 20th. 2. If you desire to bring real-world nuance, a more complex astronomical algorithm might be applied, but this is outside the scope of this exercise. Use the `datetime` library in Python to achieve this. Example: ```python print(get_first_day_of_spring(2023)) # Output: datetime.date(2023, 3, 20) ``` **Constraints:** - The input year will be a positive integer greater than 1900. **Required Libraries:** - `datetime.date`","solution":"import datetime def get_first_day_of_spring(year: int) -> datetime.date: Returns the date of the first day of spring (Spring Equinox) for the given year. Assumes the Spring Equinox falls on March 20th. :param year: Year for which the first day of spring is to be calculated. :type year: int :return: Date of the first day of spring for the given year. :rtype: datetime.date return datetime.date(year, 3, 20)"},{"question":"You need to implement a function called `count_unique_integers` that counts the number of unique integers in a given list of integers. The function should consider the performance impact and avoid unnecessary computations or memory usage. It should also be able to handle large inputs efficiently. The specifications for your function are as follows: - **Function Name**: `count_unique_integers` - **Parameters**: - `numbers` (list of integers): A list containing integers for which unique numbers need to be counted. The function should return an integer representing the count of unique integers in the given list. # Examples - `count_unique_integers([1, 2, 2, 3, 4, 4, 5])` should return `5` - `count_unique_integers([1, 1, 1, 1, 1])` should return `1` - `count_unique_integers([])` should return `0`","solution":"def count_unique_integers(numbers): Returns the count of unique integers in the given list. Parameters: numbers (list of int): The list of integers to count unique integers from. Returns: int: The count of unique integers in the list. # Use a set to automatically handle duplicates and obtain unique values unique_numbers = set(numbers) return len(unique_numbers)"},{"question":"You are tasked with writing a function named `normalize_and_plot_histogram` which takes a dataset of numerical values, normalizes it to a specified range, and then plots a histogram of the normalized values. The goal of the function is to scale the data into a given range and present the distribution of the now normalized data in a histogram. Utilize the `sklearn.preprocessing.MinMaxScaler` for normalization and `matplotlib.pyplot.hist` for histogram plotting. # Function Signature: ```python def normalize_and_plot_histogram(data: np.ndarray, feature_range: tuple = (0, 1), bins: int = 10, title: str = \'Histogram of Normalized Data\'): ``` # Parameters: - `data` (np.ndarray): The dataset of numerical values (1D array). - `feature_range` (tuple, optional): A tuple specifying the desired range of transformed data. Default is (0, 1). - `bins` (int, optional): Number of bins to use for the histogram. Default is 10. - `title` (str, optional): The title of the histogram plot. Default is \'Histogram of Normalized Data\'. # Detailed Requirements: 1. Use `MinMaxScaler` to normalize the `data` to the specified `feature_range`. 2. Create a histogram of the normalized data with the specified number of `bins`. 3. Set the title of the histogram using the `title` parameter. 4. Display the plot using `matplotlib`. # Example: ```python import numpy as np data = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) normalize_and_plot_histogram(data, feature_range=(0, 1), bins=5) ``` This should generate a histogram of the normalized data with 5 bins, showing the data distribution within the range [0, 1].","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler def normalize_and_plot_histogram(data: np.ndarray, feature_range: tuple = (0, 1), bins: int = 10, title: str = \'Histogram of Normalized Data\'): Normalizes the input data to the specified range and plots a histogram. Parameters: - data (np.ndarray): The dataset of numerical values (1D array). - feature_range (tuple, optional): Desired range of transformed data. Default is (0, 1). - bins (int, optional): Number of bins for the histogram. Default is 10. - title (str, optional): Title of the histogram plot. Default is \'Histogram of Normalized Data\'. # Ensure data is a 2D array for MinMaxScaler data = data.reshape(-1, 1) # Normalize the data scaler = MinMaxScaler(feature_range=feature_range) normalized_data = scaler.fit_transform(data).flatten() # Plot histogram plt.hist(normalized_data, bins=bins, edgecolor=\'k\') plt.title(title) plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.show()"},{"question":"You are required to implement a function `filter_phone_numbers` that takes in a list of phone numbers as strings and a filter criterion. The phone numbers are to be filtered based on the area code provided in the criterion. The function should return a list of phone numbers that match the given area code. Each phone number in the list is formatted as a string in the form `\\"(XXX) YYY-ZZZZ\\"`, where `XXX` is the area code. Your function will: 1. Accept a list of phone numbers and a filter criterion (area code) as input. 2. Return a list of phone numbers that have the specified area code. The function signature should be: ```python def filter_phone_numbers(phone_numbers: list[str], area_code: str) -> list[str]: pass ``` **Requirements:** - Use string slicing and comparison to match the phone numbers with the given area code. - The area code should be matched strictly, considering the parentheses. Example usage: ```python phone_numbers = [\\"(123) 456-7890\\", \\"(456) 123-7890\\", \\"(123) 000-1234\\", \\"(789) 000-0000\\"] filtered_numbers = filter_phone_numbers(phone_numbers, \\"123\\") print(filtered_numbers) ``` Output should be: ```python [\'(123) 456-7890\', \'(123) 000-1234\'] ``` Additional example: ```python phone_numbers = [\\"(555) 123-4567\\", \\"(123) 555-7890\\", \\"(555) 678-1234\\", \\"(999) 000-0000\\"] filtered_numbers = filter_phone_numbers(phone_numbers, \\"555\\") print(filtered_numbers) ``` Output should be: ```python [\'(555) 123-4567\', \'(555) 678-1234\'] ```","solution":"def filter_phone_numbers(phone_numbers: list[str], area_code: str) -> list[str]: Filters the given list of phone numbers to include only those that match the given area code. :param phone_numbers: List of phone numbers in the format \\"(XXX) YYY-ZZZZ\\" :param area_code: Area code to filter the phone numbers by :return: List of phone numbers that have the specified area code filtered_numbers = [number for number in phone_numbers if number.startswith(f\\"({area_code})\\")] return filtered_numbers"},{"question":"You are given a string containing a sequence of parentheses, brackets, and braces. Write a function to determine if the sequence is valid. A sequence is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Your function should be named `is_valid_sequence`. The function signature is as follows: ```python def is_valid_sequence(s): pass ``` - **Parameters:** - `s`: A string containing the sequence of parentheses, brackets, and braces (e.g., `\\"()[]{}\\"` or `\\"[({})]\\"`). - **Returns:** - `True` if the sequence is valid. - `False` otherwise. - **Examples:** - `is_valid_sequence(\\"()\\")` should return `True`. - `is_valid_sequence(\\"([)]\\")` should return `False`. - `is_valid_sequence(\\"{[]}\\")` should return `True`. - **Requirements:** - The function should be implemented without using any additional libraries. - The solution should efficiently handle typical edge cases like empty strings or sequences with only one type of bracket.","solution":"def is_valid_sequence(s): Returns True if the sequence of parentheses, brackets, and braces is valid. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False else: return False return stack == []"},{"question":"Create a function called `encrypt_message` that implements a simple Caesar cipher for encrypting a message. The Caesar cipher shifts each letter in a text by a fixed number of positions down the alphabet. Your function should take in two parameters: a string `message` and an integer `shift`, and return the encrypted message. Requirements: 1. **Handling Shifts**: - The function should be able to handle both positive and negative `shift` values. - For a positive `shift`, each letter should be shifted to the right. - For a negative `shift`, each letter should be shifted to the left. 2. **Character Preservation**: - The function should preserve the case of each letter (i.e., upper case letters should remain upper case, and lower case letters should remain lower case). - Non-alphabetic characters (like spaces and punctuation) should remain unchanged. 3. **Circular Shift**: - If the shift moves past the end of the alphabet, it should wrap around (e.g., with a shift of 1, \'z\' becomes \'a\'). 4. **Input Validation**: - Ensure `message` is a string and `shift` is an integer. If the inputs are invalid, raise an appropriate exception. Implement the `encrypt_message` function to satisfy the above requirements. Use input/output as necessary to test and demonstrate the functionality. Example: - Input: `encrypt_message(\\"Hello, World!\\", 3)` - Output: `\\"Khoor, Zruog!\\"` - Input: `encrypt_message(\\"Goodbye, Earth!\\", -5)` - Output: `\\"Bjjyxcx, Zyomd!\\"`","solution":"def encrypt_message(message, shift): Encrypts the message using a Caesar cipher with a given shift. Parameters: message (str): The message to be encrypted. shift (int): The number of positions to shift each letter. Returns: str: The encrypted message. if not isinstance(message, str): raise ValueError(\\"message must be a string\\") if not isinstance(shift, int): raise ValueError(\\"shift must be an integer\\") encrypted_message = [] for char in message: if char.isalpha(): if char.isupper(): base = ord(\'A\') new_char = chr((ord(char) - base + shift) % 26 + base) elif char.islower(): base = ord(\'a\') new_char = chr((ord(char) - base + shift) % 26 + base) encrypted_message.append(new_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"You are required to write a Python function named `fibonacci_plot` that computes and plots the first `n` Fibonacci numbers. The function should make use of the `matplotlib.pyplot` library for plotting. Specifically, your function should accept one parameter: 1. `n`: An integer indicating the number of Fibonacci numbers to generate and plot. The function should perform the following steps: 1. Generate the first `n` Fibonacci numbers. 2. Create a list of indices from `0` to `n-1`. 3. Plot the indices and corresponding Fibonacci numbers using `matplotlib.pyplot.plot`. 4. Set the title of the plot to \\"Fibonacci Sequence\\". Function signature: ```python def fibonacci_plot(n): ``` Example usage: ```python import matplotlib.pyplot as plt def fibonacci_plot(n): # Generate Fibonacci numbers fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) # Generate x values x_values = range(n) # Plot the Fibonacci sequence plt.plot(x_values, fib, marker=\'o\') plt.title(\\"Fibonacci Sequence\\") plt.xlabel(\\"Index\\") plt.ylabel(\\"Fibonacci Number\\") plt.grid(True) plt.show() fibonacci_plot(15) ```","solution":"import matplotlib.pyplot as plt def fibonacci_plot(n): Generate and plot the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate and plot. if n <= 0: raise ValueError(\\"n must be a positive integer\\") # Generate Fibonacci numbers fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) # Handle the case where n = 1 if n == 1: fib = [0] # Generate x values x_values = range(n) # Plot the Fibonacci sequence plt.plot(x_values, fib, marker=\'o\') plt.title(\\"Fibonacci Sequence\\") plt.xlabel(\\"Index\\") plt.ylabel(\\"Fibonacci Number\\") plt.grid(True) plt.show()"},{"question":"Create a function to read a JSON file containing employee records, calculate the average \'salary\' for each \'department\', and generate a bar plot showing these averages. The function should output: DataFrame: A pandas DataFrame with the computed average salaries, containing the columns \'Department\' and \'Average Salary\'. Axes: A bar plot of \'Average Salary\' by \'Department\'. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def calculate_average_salary(json_file=\'/path/to/employees.json\'): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def calculate_average_salary(json_file): Reads a JSON file containing employee records, calculates the average \'salary\' for each \'department\', and generates a bar plot showing these averages. Parameters: json_file (str): Path to the JSON file containing employee records. Returns: pd.DataFrame: DataFrame with columns \'Department\' and \'Average Salary\'. Axes: A bar plot of \'Average Salary\' by \'Department\'. # Read JSON file into a pandas DataFrame df = pd.read_json(json_file) # Calculate the average salary per department avg_salary_df = df.groupby(\'department\', as_index=False)[\'salary\'].mean() avg_salary_df.rename(columns={\'salary\': \'Average Salary\', \'department\': \'Department\'}, inplace=True) # Plot the bar chart ax = avg_salary_df.plot(kind=\'bar\', x=\'Department\', y=\'Average Salary\', legend=False) plt.ylabel(\'Average Salary\') plt.title(\'Average Salary by Department\') return avg_salary_df, ax"},{"question":"You are given a file containing temperature data for each day of the year. The file is formatted as a CSV with two columns: \\"date\\" and \\"temperature\\". You need to write a function `analyze_temperature_data(file_path: str) -> dict` that reads the CSV file and returns a dictionary with the following analysis: - **highest_temp**: The highest temperature recorded. - **lowest_temp**: The lowest temperature recorded. - **average_temp**: The average temperature for the year. - **days_above_average**: The number of days with a temperature above the annual average. Requirements: - **Use the `csv` module to read the data.** - **Handle the possibility of missing or malformed data gracefully.** Here\'s how your function should be structured: ```python import csv def analyze_temperature_data(file_path: str) -> dict: pass ``` The dictionary returned should look like: ```python { \'highest_temp\': 45.2, \'lowest_temp\': -5.3, \'average_temp\': 22.1, \'days_above_average\': 185 } ``` Example Usage: Suppose the CSV file content is as follows: ``` date,temperature 2023-01-01,15.5 2023-01-02,16.3 ... 2023-12-31,14.2 ``` ```python file_path = \\"temperature_data.csv\\" analysis = analyze_temperature_data(file_path) print(analysis) # Output: {\'highest_temp\': 35.6, \'lowest_temp\': -10.2, \'average_temp\': 20.4, \'days_above_average\': 194} ```","solution":"import csv def analyze_temperature_data(file_path: str) -> dict: temperatures = [] with open(file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: temperatures.append(float(row[\'temperature\'])) except ValueError: # Handle the case where temperature is not a valid float continue if not temperatures: return { \'highest_temp\': None, \'lowest_temp\': None, \'average_temp\': None, \'days_above_average\': None } highest_temp = max(temperatures) lowest_temp = min(temperatures) average_temp = sum(temperatures) / len(temperatures) days_above_average = sum(1 for temp in temperatures if temp > average_temp) return { \'highest_temp\': highest_temp, \'lowest_temp\': lowest_temp, \'average_temp\': average_temp, \'days_above_average\': days_above_average }"},{"question":"You are tasked with writing a function named `calculate_statistics` that processes a list of integers and returns a dictionary containing the mean, median, and mode of the list. The function should handle cases where there can be more than one mode (multiple values that appear with the same highest frequency). # Requirements: 1. Calculate the mean of the list. 2. Calculate the median of the list. 3. Calculate the mode of the list (if there are multiple modes, return them all as a list). # Signature: ```python def calculate_statistics(numbers: list[int]) -> dict: # Your implementation here ``` # Constraints: - Assume the list contains at least one integer. - Use Python\'s built-in capabilities for calculations. Do not use external libraries. # Example: For the input list `numbers = [4, 1, 2, 2, 3, 5, 4]`: - Mean: 3.0 (sum of all numbers divided by count: (4+1+2+2+3+5+4)/7) - Median: 3 (middle value after sorting: [1,2,2,3,4,4,5]) - Mode: [2, 4] (both 2 and 4 appear twice, which is more frequent than 1, 3, and 5) Calling `calculate_statistics([4, 1, 2, 2, 3, 5, 4])` should return: ```python { \\"mean\\": 3.0, \\"median\\": 3, \\"mode\\": [2, 4] } ```","solution":"def calculate_statistics(numbers: list[int]) -> dict: from collections import Counter # Calculate mean mean = sum(numbers) / len(numbers) # Calculate median sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 # Calculate mode frequency = Counter(numbers) max_freq = max(frequency.values()) mode = sorted([num for num, freq in frequency.items() if freq == max_freq]) return {\\"mean\\": mean, \\"median\\": median, \\"mode\\": mode}"},{"question":"You are required to implement a function `balanced_substring(s)` that accepts a string `s` containing only the characters \'A\' and \'B\'. The function should return the length of the longest balanced substring within `s`. A balanced substring is defined as a contiguous segment of the string that contains an equal number of \'A\'s and \'B\'s. # Requirements 1. Implement the function `balanced_substring(s)`. 2. Ensure the function prints out the start and end indices of all identified balanced substrings during the process. 3. The function should robustly handle edge cases and perform operations efficiently. Here is the signature you are required to implement: ```python def balanced_substring(s: str) -> int: pass ``` # Example ```python >>> balanced_substring(\\"ABAB\\") Start: 0, End: 1 Start: 2, End: 3 Start: 0, End: 3 4 >>> balanced_substring(\\"AABB\\") Start: 0, End: 1 Start: 2, End: 3 Start: 1, End: 2 4 >>> balanced_substring(\\"AAAABBBB\\") Start: 3, End: 7 Start: 2, End: 6 Start: 1, End: 5 Start: 0, End: 4 8 ``` In this example, you can see the intermediate indices of the balanced substrings found and their corresponding lengths. # Notes - The function should correctly identify all potential balanced substrings and determine the maximum length among them. - Ensure to print the start and end indices of each identified balanced substring for debug and verification purposes.","solution":"def balanced_substring(s: str) -> int: max_length = 0 n = len(s) for start in range(n): count_a, count_b = 0, 0 for end in range(start, n): if s[end] == \'A\': count_a += 1 else: count_b += 1 if count_a == count_b: max_length = max(max_length, end - start + 1) print(f\\"Start: {start}, End: {end}\\") return max_length"},{"question":"You are required to design a function that processes a list of user activities and identifies the most frequent activity along with the duration each activity was performed. **Requirements:** 1. This function should be named `analyze_activities`. 2. It should take the following parameter: - `activities` (List of Tuple): Each tuple contains two elements: - `activity` (String): The name of the activity. - `duration` (Integer): The duration of the activity in minutes. 3. The function should return a tuple containing: - The name of the most frequent activity. - The total duration for that activity. **Detailed Instructions:** 1. Iterate through the list of activities, using a dictionary to keep track of the frequency and total duration for each activity. 2. If multiple activities have the same frequency, return the activity with the highest total duration. 3. If the list is empty, return an empty string and zero duration. **Function Signature:** ```python def analyze_activities(activities: List[Tuple[str, int]]) -> Tuple[str, int]: ... ``` **Example Usage:** ```python activities = [ (\'running\', 30), (\'coding\', 60), (\'running\', 20), (\'reading\', 40), (\'coding\', 30), (\'running\', 50) ] # analyze_activities(activities) -> (\'running\', 100) ```","solution":"from typing import List, Tuple def analyze_activities(activities: List[Tuple[str, int]]) -> Tuple[str, int]: Analyze the list of activities and return the most frequent activity along with its total duration. Parameters: - activities (List of Tuple): Each tuple contains two elements: - `activity` (String): The name of the activity. - `duration` (Integer): The duration of the activity in minutes. Returns: - A tuple containing: - The name of the most frequent activity. - The total duration for that activity. if not activities: return (\\"\\", 0) activity_count = {} activity_duration = {} for activity, duration in activities: if activity not in activity_count: activity_count[activity] = 0 activity_duration[activity] = 0 activity_count[activity] += 1 activity_duration[activity] += duration most_frequent_activity = max(activity_count, key=lambda k: (activity_count[k], activity_duration[k])) return most_frequent_activity, activity_duration[most_frequent_activity]"},{"question":"In this problem, you need to create a class `FibonacciSequence` that generates Fibonacci numbers. The goal is to understand object-oriented programming, class methods, and iterative algorithms for sequence generation. Your class, `FibonacciSequence`, should have the following methods: - `__init__(self, max_number: int)`: Initializes the sequence with a maximum number `max_number` up to which Fibonacci numbers must be generated. - `generate_sequence(self) -> list`: Generates the Fibonacci sequence up to, but not exceeding, `max_number` and returns it as a list. - `sum_even_terms(self) -> int`: Returns the sum of all even Fibonacci numbers up to `max_number`. - `sum_odd_terms(self) -> int`: Returns the sum of all odd Fibonacci numbers up to `max_number`. Here\'s a template for the class you need to write: ```python class FibonacciSequence: def __init__(self, max_number): Initializes the Fibonacci sequence generator with a maximum number. :param max_number: The maximum number up to which Fibonacci numbers must be generated :type max_number: int self.max_number = max_number def generate_sequence(self): Generates the Fibonacci sequence up to, but not exceeding, `max_number`. :return: List of Fibonacci numbers up to `max_number` :rtype: list sequence = [] a, b = 0, 1 while a <= self.max_number: sequence.append(a) a, b = b, a + b return sequence def sum_even_terms(self): Returns the sum of all even Fibonacci numbers up to `max_number`. :return: Sum of even Fibonacci numbers :rtype: int return sum(n for n in self.generate_sequence() if n % 2 == 0) def sum_odd_terms(self): Returns the sum of all odd Fibonacci numbers up to `max_number`. :return: Sum of odd Fibonacci numbers :rtype: int return sum(n for n in self.generate_sequence() if n % 2 != 0) # Example usage: fib_seq = FibonacciSequence(10) sequence = fib_seq.generate_sequence() print(sequence) # Output: [0, 1, 1, 2, 3, 5, 8] print(fib_seq.sum_even_terms()) # Output: 10 print(fib_seq.sum_odd_terms()) # Output: 10 ``` Ensure your solution follows the concepts of object-oriented programming and efficiently calculates the required sequences and sums.","solution":"class FibonacciSequence: def __init__(self, max_number: int): Initializes the Fibonacci sequence generator with a maximum number. :param max_number: The maximum number up to which Fibonacci numbers must be generated :type max_number: int self.max_number = max_number def generate_sequence(self) -> list: Generates the Fibonacci sequence up to, but not exceeding, `max_number`. :return: List of Fibonacci numbers up to `max_number` :rtype: list sequence = [] a, b = 0, 1 while a <= self.max_number: sequence.append(a) a, b = b, a + b return sequence def sum_even_terms(self) -> int: Returns the sum of all even Fibonacci numbers up to `max_number`. :return: Sum of even Fibonacci numbers :rtype: int return sum(n for n in self.generate_sequence() if n % 2 == 0) def sum_odd_terms(self) -> int: Returns the sum of all odd Fibonacci numbers up to `max_number`. :return: Sum of odd Fibonacci numbers :rtype: int return sum(n for n in self.generate_sequence() if n % 2 != 0)"},{"question":"You are tasked with implementing a function to filter and sort a list of dictionaries based on specific criteria. Your goal is to create a function called `filter_and_sort` that will take a list of dictionaries and two parameters: a string `key` to filter by and a number `threshold` for filtering. Specifically, your function should only include dictionaries where the value corresponding to `key` is greater than `threshold`, and then sort the filtered list in descending order based on the `key` value. Function Signature ```python def filter_and_sort(data, key, threshold): Function to filter and sort a list of dictionaries. :param data: (list of dictionaries) List of dictionaries to be filtered and sorted. :param key: (str) The key to filter and sort the dictionaries by. :param threshold: (number) The threshold value to filter dictionaries. :return: (list of dictionaries) The filtered and sorted list of dictionaries. ``` Parameters - `data`: A list of dictionaries to be filtered and sorted. - `key`: A string representing the key to filter and sort the dictionaries by. - `threshold`: A number representing the threshold value for filtering. Requirements 1. Only include dictionaries where the value corresponding to `key` is greater than `threshold`. 2. Sort the filtered list in descending order based on the value associated with `key`. 3. Ensure that the function handles edge cases such as an empty list or missing keys gracefully. Example ```python data = [ {\\"name\\": \\"Alice\\", \\"score\\": 65}, {\\"name\\": \\"Bob\\", \\"score\\": 75}, {\\"name\\": \\"Clara\\", \\"score\\": 55}, {\\"name\\": \\"Dave\\", \\"score\\": 85} ] key = \\"score\\" threshold = 60 filtered_sorted_data = filter_and_sort(data, key, threshold) print(filtered_sorted_data) # Output should be: # [ # {\\"name\\": \\"Dave\\", \\"score\\": 85}, # {\\"name\\": \\"Bob\\", \\"score\\": 75}, # {\\"name\\": \\"Alice\\", \\"score\\": 65} # ] ``` In the example above, the function should filter out Clara\'s dictionary since her score is below the threshold of 60 and then sort the remaining dictionaries by the score in descending order.","solution":"def filter_and_sort(data, key, threshold): Function to filter and sort a list of dictionaries. :param data: (list of dictionaries) List of dictionaries to be filtered and sorted. :param key: (str) The key to filter and sort the dictionaries by. :param threshold: (number) The threshold value to filter dictionaries. :return: (list of dictionaries) The filtered and sorted list of dictionaries. # Filter dictionaries where value corresponding to key is greater than threshold filtered_data = [d for d in data if d.get(key) is not None and d[key] > threshold] # Sort the filtered data in descending order based on the value associated with key sorted_data = sorted(filtered_data, key=lambda x: x[key], reverse=True) return sorted_data"},{"question":"In computational geometry, you often need to work with points on a plane and determine specific properties such as distance, midpoint, or collinearity. In this task, you will create a class `Point` that represents a point in 2D space. Additionally, you will implement methods to calculate the distance between two points and determine if three points are collinear. # Here\'s what you need to do: 1. Implement the `Point` class with the following attributes and methods: - `__init__(self, x, y)`: initializes a point with coordinates (x, y). - `distance_to(self, other)`: calculates and returns the Euclidean distance to another point. - `midpoint_to(self, other)`: calculates and returns the midpoint between this point and another point as a new `Point` object. - `is_collinear(self, p2, p3)`: determines if the points `self`, `p2`, and `p3` are collinear. 2. The `distance_to` method should: - Take another `Point` object as a parameter. - Use the Euclidean distance formula to compute and return the distance. 3. The `midpoint_to` method should: - Take another `Point` object as a parameter. - Calculate the midpoint coordinates and return a new `Point` object representing the midpoint. 4. The `is_collinear` method should: - Take two other `Point` objects (`p2` and `p3`) as parameters. - Return `True` if the three points lie on a single straight line, and `False` otherwise. You may assume that the floating-point arithmetic precision is sufficient for determining collinearity. Here\'s a skeleton to guide you: ```python class Point: def __init__(self, x, y): self.x = x self.y = y def distance_to(self, other): pass # Implement this method def midpoint_to(self, other): pass # Implement this method def is_collinear(self, p2, p3): pass # Implement this method # Example usage p1 = Point(0, 0) p2 = Point(3, 4) p3 = Point(6, 8) p4 = Point(1, 2) print(p1.distance_to(p2)) # Output: 5.0 print(p1.midpoint_to(p2).__dict__) # Output: {\'x\': 1.5, \'y\': 2.0} print(p1.is_collinear(p2, p3)) # Output: True print(p1.is_collinear(p2, p4)) # Output: False ``` # Requirements: - Use the proper mathematical formulas for distance, midpoint, and collinearity. - Ensure the methods handle various cases and inputs correctly. Test your implementation with diverse points to validate correctness and robustness.","solution":"import math class Point: def __init__(self, x, y): self.x = x self.y = y def distance_to(self, other): return math.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2) def midpoint_to(self, other): mid_x = (self.x + other.x) / 2 mid_y = (self.y + other.y) / 2 return Point(mid_x, mid_y) def is_collinear(self, p2, p3): return (p2.y - self.y) * (p3.x - self.x) == (p3.y - self.y) * (p2.x - self.x) # Example usage p1 = Point(0, 0) p2 = Point(3, 4) p3 = Point(6, 8) p4 = Point(1, 2) print(p1.distance_to(p2)) # Output: 5.0 print(p1.midpoint_to(p2).__dict__) # Output: {\'x\': 1.5, \'y\': 2.0} print(p1.is_collinear(p2, p3)) # Output: True print(p1.is_collinear(p2, p4)) # Output: False"},{"question":"You are tasked with creating a function that manages the inventory of items in an RPG (Role-Playing Game). The function needs to handle adding and removing items, ensuring that no more than a specified number of each item type is stored and that only items present in the game’s predefined item list can be added. The function will keep track of the quantities of each item and provide a summary of items upon request. Relevant Context - The player\'s inventory is represented by a dictionary. - The game has a predefined list of valid items. Specifics 1. The function should support adding and removing items from the inventory. 2. It should ensure no more than a maximum quantity of each item is stored. 3. Only items listed in the predefined item list can be added to the inventory. 4. It should provide a summary of the current inventory when requested. Function Specification - Function Name: `manage_inventory` - Parameters: - `inventory`: a dictionary representing the player\'s inventory where keys are item names and values are the corresponding quantities. - `actions`: a list of actions where each action is a tuple. Each tuple has the form (`action_type`, `item_name`, `quantity`), where: - `action_type`: a string which can be \\"add\\", \\"remove\\", or \\"summary\\". - `item_name`: a string representing the name of the item. - `quantity`: an integer specifying the quantity to add or remove. - `valid_items`: a list of strings representing the valid item names in the game. - `max_quantity`: an integer representing the maximum permitted quantity for each item. Conditions: - If the action is \\"add\\": - Ensure the item is in the list of valid items. - Ensure the quantity to be added does not exceed the maximum quantity for that item (if adding this quantity would exceed the maximum, only add up to the maximum). - Update the inventory accordingly. - If the action is \\"remove\\": - Ensure the item is in the inventory and the quantity to be removed does not make the item quantity negative (if removing this quantity would result in a negative quantity, remove only as much as possible down to zero). - Update the inventory accordingly. - If the action is \\"summary\\": - Return a summary dictionary of the current inventory. # Function Signature ```python def manage_inventory(inventory, actions, valid_items, max_quantity): pass ``` # Example Usage ```python valid_items = [\'potion\', \'elixir\', \'ether\', \'phoenix_down\'] inventory = {\'potion\': 5, \'elixir\': 2} actions = [ (\'add\', \'potion\', 3), (\'remove\', \'elixir\', 1), (\'add\', \'ether\', 2), (\'summary\', \'\', 0) ] max_quantity = 10 result = manage_inventory(inventory, actions, valid_items, max_quantity) print(result) # Expected output: {\'potion\': 8, \'elixir\': 1, \'ether\': 2} ```","solution":"def manage_inventory(inventory, actions, valid_items, max_quantity): for action in actions: action_type, item_name, quantity = action if action_type == \'add\': if item_name in valid_items: if item_name not in inventory: inventory[item_name] = 0 inventory[item_name] = min(max_quantity, inventory[item_name] + quantity) elif action_type == \'remove\': if item_name in inventory: inventory[item_name] = max(0, inventory[item_name] - quantity) elif action_type == \'summary\': return inventory.copy() return inventory.copy()"},{"question":"In this problem, you will implement a class to manage a simple inventory system for a bookstore. The class `Bookstore` will help keep track of books, their authors, and availability (stock quantity). The class will be initialized with no parameters and will support the following methods: - `add_book(title, author, quantity)`: Adds a book with the given title, author, and quantity to the inventory. If the book already exists, it updates the stock quantity by adding the specified quantity. - `sell_book(title, quantity)`: Decreases the stock quantity of the specified book by the given quantity. If the book does not exist or there is not enough stock, it should raise an appropriate exception. - `get_stock_info(title)`: Returns a dictionary containing the title, author, and stock quantity of the specified book. If the book does not exist, it should raise an appropriate exception. - `list_books()`: Returns a list of dictionaries, each containing the title, author, and stock quantity for all the books in the bookstore. **Class definition:** ```python class Bookstore: def __init__(self): # Your code here def add_book(self, title, author, quantity): # Your code here def sell_book(self, title, quantity): # Your code here def get_stock_info(self, title): # Your code here def list_books(self): # Your code here ``` **Requirements:** 1. The `add_book` method should ensure that the inventory is updated correctly whenever a new book is added or an existing book\'s quantity is increased. 2. The `sell_book` method should handle cases where the book does not exist or there is insufficient stock by raising an appropriate exception (e.g., `ValueError` with a suitable message). 3. The `get_stock_info` method should return detailed stock information in a dictionary format only if the book exists; otherwise, raise an appropriate exception. 4. The `list_books` method should return a list of dictionaries, each containing the inventory information for each book. **Example Usage:** ```python store = Bookstore() store.add_book(\\"Book A\\", \\"Author A\\", 10) store.add_book(\\"Book B\\", \\"Author B\\", 5) print(store.get_stock_info(\\"Book A\\")) # Expected: {\'title\': \'Book A\', \'author\': \'Author A\', \'quantity\': 10} store.sell_book(\\"Book A\\", 2) print(store.list_books()) # Expected: [{\'title\': \'Book A\', \'author\': \'Author A\', \'quantity\': 8}, {\'title\': \'Book B\', \'author\': \'Author B\', \'quantity\': 5}] ```","solution":"class Bookstore: def __init__(self): self.inventory = {} def add_book(self, title, author, quantity): if title in self.inventory: self.inventory[title][\'quantity\'] += quantity else: self.inventory[title] = {\'author\': author, \'quantity\': quantity} def sell_book(self, title, quantity): if title not in self.inventory: raise ValueError(f\\"Book \'{title}\' does not exist in inventory.\\") if self.inventory[title][\'quantity\'] < quantity: raise ValueError(f\\"Not enough stock for book \'{title}\'.\\") self.inventory[title][\'quantity\'] -= quantity def get_stock_info(self, title): if title not in self.inventory: raise ValueError(f\\"Book \'{title}\' does not exist in inventory.\\") return {\'title\': title, \'author\': self.inventory[title][\'author\'], \'quantity\': self.inventory[title][\'quantity\']} def list_books(self): return [{\'title\': title, \'author\': book_info[\'author\'], \'quantity\': book_info[\'quantity\']} for title, book_info in self.inventory.items()]"},{"question":"You are required to write a function to solve the N-Queens problem using a backtracking algorithm. The N-Queens problem involves placing `N` chess queens on an `N x N` chessboard so that no two queens threaten each other. This means no two queens can share the same row, column, or diagonal. Your function should generate all possible solutions for a given `N` and return them as a list of lists. Each solution should be represented as a list of `N` tuples, where each tuple `(i, j)` represents a queen\'s position on the board (i.e., `i` is the row index and `j` is the column index). To implement this, you need to write a function `solveNQueens(N)` where: - `N` is an integer representing the size of the board. - It returns a list of lists, where each inner list contains tuples representing a valid position for the queens. # Function Signature: ```python def solveNQueens(N): ``` # Example: ```python solveNQueens(4) ``` # Output: ```python [[(0, 1), (1, 3), (2, 0), (3, 2)], [(0, 2), (1, 0), (2, 3), (3, 1)]] ``` # Explanation: For `N = 4`, there are two valid solutions: 1. Place queens at positions `(0, 1)`, `(1, 3)`, `(2, 0)`, and `(3, 2)`. 2. Place queens at positions `(0, 2)`, `(1, 0)`, `(2, 3)`, and `(3, 1)`. Each tuple represents the row and column index of a queen on the chessboard. Notes: - Ensure your solution efficiently handles various `N` values. - Use a backtracking approach to explore all potential configurations. - Implement helper functions as needed to check if a queen can be placed on the board without conflicts. # Example of Helper Function: ```python def isSafe(board, row, col): # Check for safety of placing a queen at board[row][col] pass ``` This function will help determine if a queen can be placed on a specific position without being attacked by another queen.","solution":"def solveNQueens(N): def isSafe(board, row, col): # Check for queen in the same column for i in range(row): if board[i] == col: return False # Check for queens on the left upper diagonal for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i] == j: return False # Check for queens on the right upper diagonal for i, j in zip(range(row, -1, -1), range(col, N)): if board[i] == j: return False return True def solveNQueensUtil(board, row): if row == N: result.append([(i, board[i]) for i in range(N)]) return for col in range(N): if isSafe(board, row, col): board[row] = col solveNQueensUtil(board, row + 1) board[row] = -1 # backtrack result = [] board = [-1] * N solveNQueensUtil(board, 0) return result"},{"question":"You are asked to create a Python function to model and simulate the growth of a population of bacteria using a logistic growth model. The logistic growth model is represented by the differential equation: [ frac{dP}{dt} = r P left(1 - frac{P}{K}right) ] where: - ( P ) is the population size, - ( r ) is the intrinsic growth rate, - ( K ) is the carrying capacity of the environment. Your goal is to create a function named `simulate_logistic_growth` that performs the following tasks: 1. Simulate the growth of the bacteria population over `T` time steps. 2. Use a given initial population size `P0`, intrinsic growth rate `r`, and carrying capacity `K`. 3. Implement the numerical solution using the Euler method. 4. Optionally plot the population growth over time if the `display` parameter is set to `True`. Function signature: ```python def simulate_logistic_growth(T, P0, r, K, dt=1, display=False): Simulate the logistic growth of a bacterial population over T time steps. Parameters: T (int): Number of time steps. P0 (float): Initial population size. r (float): Intrinsic growth rate. K (float): Carrying capacity. dt (float): Time step size (default is 1). display (bool): Whether to plot the population growth (default is False). Returns: list: Population size at each time step. ``` Constraints: - Use a for loop to iterate over the time steps. - Update the population size using the Euler method. - Use the `matplotlib` library for plotting the population growth if `display` is `True`. # Requirements: - Ensure numerical stability by choosing a suitable `dt`. - Handle edge cases where the initial population may be zero. - Use `matplotlib.pyplot.plot` and `matplotlib.pyplot.show` to display the plots. # Example: ```python # Example usage: simulate_logistic_growth(100, 10, 0.3, 100, dt=0.1, display=True) ```","solution":"import matplotlib.pyplot as plt def simulate_logistic_growth(T, P0, r, K, dt=1, display=False): Simulate the logistic growth of a bacterial population over T time steps. Parameters: T (int): Number of time steps. P0 (float): Initial population size. r (float): Intrinsic growth rate. K (float): Carrying capacity. dt (float): Time step size (default is 1). display (bool): Whether to plot the population growth (default is False). Returns: list: Population size at each time step. # List to hold population sizes at each time step population = [] P = P0 for _ in range(T): # Append current population size to the list population.append(P) # Calculate the change in population using the Euler method dP = r * P * (1 - P / K) * dt P += dP if display: plt.plot(population) plt.xlabel(\'Time steps\') plt.ylabel(\'Population size\') plt.title(\'Logistic Growth Model Simulation\') plt.show() return population"},{"question":"In this problem, you are tasked with writing a function `filter_even_numbers(numbers)` which will filter out and return only the even numbers from a provided list of integers. The function should maintain the order of the provided list in the output. # Function Definition ```python def filter_even_numbers(numbers): Filter out and return the even numbers from a provided list of integers. :param numbers: List of integers to filter. :type numbers: list of int :return: List of even numbers in the original order. :rtype: list of int pass ``` # Example Usage Given the input list: ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Calling `filter_even_numbers(numbers)` should return: ```python [2, 4, 6, 8, 10] ``` # Requirements 1. Iterate through the given list and check each number for evenness. 2. Collect all even numbers in the same order as they appear in the input list. 3. Return the list of even numbers. # Note - Consider edge cases like an empty list or a list with no even numbers. - Ensure the function runs in linear time relative to the size of the input list.","solution":"def filter_even_numbers(numbers): Filter out and return the even numbers from a provided list of integers. :param numbers: List of integers to filter. :type numbers: list of int :return: List of even numbers in the original order. :rtype: list of int return [num for num in numbers if num % 2 == 0]"},{"question":"You are required to design and implement a function that traces and displays the shortest path between two points in a two-dimensional grid. The grid will be represented as a list of lists containing only 0s and 1s, where 0 indicates a navigable cell, and 1 indicates an obstacle. You can only move horizontally or vertically (not diagonally) from one cell to another. The function should be named `find_shortest_path` and must take three parameters: 1. `grid`: A 2D list representing the grid. 2. `start`: A tuple `(x, y)` representing the starting point coordinates. 3. `end`: A tuple `(x, y)` representing the ending point coordinates. To find the shortest path, you may use the Breadth-First Search (BFS) algorithm, which is suitable for unweighted grids. If a path exists, the function should return the list of coordinates representing the path from the starting point to the ending point, inclusive. If no path is found, return an empty list. Here’s the complete signature for the function you need to implement: ```python from collections import deque def find_shortest_path(grid, start, end): # Your implementation goes here ``` # Example: Given: - A grid: ``` [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0] ] ``` - `start` as `(0, 0)` - `end` as `(3, 4)` The function should return: ``` [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3), (3, 4)] ``` # Constraints: - The dimensions of the grid will be within the range of 1 to 100x100. - There will always be at least one valid starting and ending point pair within the grid. - Start and end points will have valid coordinates within the grid. - The grid will contain only binary values (0 and 1).","solution":"from collections import deque def find_shortest_path(grid, start, end): rows, cols = len(grid), len(grid[0]) def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0: yield nx, ny queue = deque([(start, [start])]) visited = set([start]) while queue: (x, y), path = queue.popleft() if (x, y) == end: return path for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), path + [(nx, ny)])) return [] # Example usage: # grid = [ # [0, 1, 0, 0, 0], # [0, 1, 0, 1, 0], # [0, 0, 0, 1, 0], # [0, 1, 0, 0, 0] # ] # start = (0, 0) # end = (3, 4) # print(find_shortest_path(grid, start, end))"},{"question":"You are required to implement a function named `generate_order_summary` to generate a summary of customer orders from an e-commerce platform. This function will take the data from an order CSV file, perform aggregation operations, and save the summarized information into a new CSV file. Here are the tasks your function needs to accomplish: 1. Read the order data from the CSV file using `pandas.read_csv`. 2. The order data includes the following columns: - `OrderID`: Unique identifier for each order. - `CustomerID`: Unique identifier for each customer. - `Product`: Name of the product ordered. - `Quantity`: Number of units ordered. - `Price`: Unit price of the product. - `OrderDate`: Date when the order was placed. 3. Create the following aggregations for each customer: - `Total_Orders`: Total number of orders placed by the customer. - `Total_Quantity`: Total quantity of all products ordered by the customer. - `Total_Spent`: Total amount spent by the customer, calculated as the sum of `Quantity * Price`. - `First_Order_Date`: The date of the first order placed by the customer. - `Last_Order_Date`: The date of the latest order placed by the customer. 4. Save the aggregated data into a new CSV file with the columns: `CustomerID`, `Total_Orders`, `Total_Quantity`, `Total_Spent`, `First_Order_Date`, `Last_Order_Date`. # Function signature: ```python def generate_order_summary(input_file: str, output_file: str, sep: str = \',\') -> None: ``` # Parameters: - `input_file` (str): Path to the CSV file containing order data. - `output_file` (str): Path to the CSV file where the summary report will be saved. - `sep` (str): Optional, specifies the delimiter to use for the CSV file, default is \',\'. # Returns: - None. The function saves the summarized data to the specified output file as a CSV. An example input data snippet might look like this: ``` OrderID,CustomerID,Product,Quantity,Price,OrderDate 1,1001,Widget A,2,19.99,2023-01-15 2,1001,Widget B,1,29.99,2023-01-17 3,1002,Widget A,3,19.99,2023-02-10 4,1002,Widget C,4,39.99,2023-03-15 ``` # Note: Utilize `pandas.read_csv` for reading input data and `pandas.DataFrame.to_csv` for saving the output CSV file. Employ appropriate aggregation functions from `pandas` to perform the specified operations.","solution":"import pandas as pd def generate_order_summary(input_file: str, output_file: str, sep: str = \',\') -> None: # Read the order data from the CSV file df = pd.read_csv(input_file, delimiter=sep) # Aggregation operations summary = df.groupby(\'CustomerID\').agg( Total_Orders=(\'OrderID\', \'count\'), Total_Quantity=(\'Quantity\', \'sum\'), Total_Spent=(\'Price\', lambda x: (x * df.loc[x.index, \'Quantity\']).sum()), First_Order_Date=(\'OrderDate\', \'min\'), Last_Order_Date=(\'OrderDate\', \'max\') ).reset_index() # Save the aggregated data into a new CSV file summary.to_csv(output_file, index=False, sep=sep)"},{"question":"Your task is to write a function that reads a JSON file containing a list of dictionary objects and computes statistics on a specified numeric field across all dictionaries. The computed statistics are: mean, median, variance, and standard deviation. These statistics should then be returned as a dictionary. The function should output with: dict: A dictionary containing the calculated mean, median, variance, and standard deviation. You should write self-contained code starting with: ``` import json import numpy as np def compute_statistics(json_file_path, field): ```","solution":"import json import numpy as np def compute_statistics(json_file_path, field): Reads a JSON file containing a list of dictionary objects and computes statistics (mean, median, variance, standard deviation) on a specified numeric field across all dictionaries. Args: json_file_path (str): The file path to the JSON file. field (str): The key for the numeric field to compute statistics on. Returns: dict: A dictionary containing the calculated mean, median, variance, and standard deviation. with open(json_file_path, \'r\') as f: data = json.load(f) if not data or field not in data[0]: raise ValueError(\\"Invalid JSON structure or missing field\\") values = [item[field] for item in data if field in item and isinstance(item[field], (int, float))] if not values: raise ValueError(\\"No valid numeric data found for the specified field\\") mean = np.mean(values) median = np.median(values) variance = np.var(values, ddof=1) std_deviation = np.std(values, ddof=1) return { \\"mean\\": mean, \\"median\\": median, \\"variance\\": variance, \\"standard_deviation\\": std_deviation }"},{"question":"You are given a 1D list of integers where each element represents the height of a building. Your task is to write a function that calculates the amount of water that would be trapped between the buildings if it rains. The function should take a single parameter, which is the list of building heights, and return the total amount of trapped water. The function signature should be: ```python def trapped_water(heights: List[int]) -> int: ``` # Parameters: - `heights`: A list of integers representing the height of buildings. # Returns: - `total_water`: An integer representing the total amount of trapped water. # Detailed description of the function: 1. Initialize two pointers, one at the beginning (`left`) and one at the end (`right`) of the list. 2. Also, initialize two variables to keep track of the maximum height seen so far from the left and right, respectively (`left_max` and `right_max`). 3. Iterate through the list using the two pointers until they meet. - For each position of the pointers, update the `left_max` and `right_max` values. - Depending on which side has the smaller height, calculate the water trapped at that position and move the pointer inward. 4. The water trapped at each position is calculated by subtracting the height of the building from the minimum of `left_max` and `right_max`. # Example: ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] total_water = trapped_water(heights) print(total_water) ``` Expected output: ``` 6 ```","solution":"from typing import List def trapped_water(heights: List[int]) -> int: if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] total_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) total_water += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) total_water += max(0, right_max - heights[right]) return total_water"},{"question":"Implement a function named `find_substring_occurrences` that takes two strings, `text` and `substring`, as arguments and returns the number of times `substring` occurs in `text` without overlapping. The function should also log when a match is found and its position in the string using debug-level logging messages. Your implementation must utilize the `logging` library to provide the debugging information as follows: - Log debug messages showing the start index of each non-overlapping match using `logging.debug()`. # Example: ```python import logging logging.basicConfig(level=logging.DEBUG) print(find_substring_occurrences(\\"test this test string test test\\", \\"test\\")) # Expected output: 4 # Expected log messages: # DEBUG:root:Match found at index 0 # DEBUG:root:Match found at index 10 # DEBUG:root:Match found at index 21 # DEBUG:root:Match found at index 26 print(find_substring_occurrences(\\"aaaaaa\\", \\"aaa\\")) # Expected output: 2 # Expected log messages: # DEBUG:root:Match found at index 0 # DEBUG:root:Match found at index 3 ``` # Constraints: - The inputs `text` and `substring` should consist of lowercase English letters only. - The length of `substring` should be less than or equal to the length of `text`.","solution":"import logging logging.basicConfig(level=logging.DEBUG) def find_substring_occurrences(text, substring): Returns the number of times `substring` occurs in `text` without overlapping. count = 0 index = 0 while index <= len(text) - len(substring): pos = text.find(substring, index) if pos == -1: break logging.debug(f\\"Match found at index {pos}\\") count += 1 index = pos + len(substring) return count"},{"question":"A logistics company wants to optimize the delivery route of its trucks to minimize travel time and fuel consumption. The problem can be modeled as the Traveling Salesman Problem (TSP), where each location must be visited exactly once, and the route taken should have the shortest possible length. Your task is to write a function `optimize_delivery_route()` that takes in the number of locations and a distance matrix, and returns the optimal route as a list of location indices. Here is the specification for the `optimize_delivery_route()` function: - **Function Name:** `optimize_delivery_route` - **Parameters:** - `num_locations` (int): The number of locations. - `distance_matrix` (list of lists): A 2D list where the element at `distance_matrix[i][j]` represents the distance between location `i` and location `j`. - **Output:** - **Returns:** A list of integers representing the indices of locations in the optimal visiting order. Make sure to utilize an appropriate algorithm to solve this problem efficiently for small to moderately large input sizes. Consider common TSP solving methods such as dynamic programming or backtracking. Example: ```python num_locations = 4 distance_matrix = [ [0, 20, 42, 35], [20, 0, 30, 34], [42, 30, 0, 12], [35, 34, 12, 0] ] # possible optimal route (one of the optimal solutions) # [0, 1, 3, 2] print(optimize_delivery_route(num_locations, distance_matrix)) ```","solution":"from itertools import permutations def optimize_delivery_route(num_locations, distance_matrix): Solves the Traveling Salesman Problem using a brute-force method to find the optimal route. Parameters: - num_locations (int): The number of locations. - distance_matrix (list of lists): 2D list representing distances between locations. Returns: - list: Indices of locations in the optimal visiting order. min_path = None min_distance = float(\'inf\') # Generate all possible permutations of locations except the starting location (index 0) for perm in permutations(range(1, num_locations)): current_path = [0] + list(perm) + [0] # Create a round-trip current_distance = sum(distance_matrix[current_path[i]][current_path[i+1]] for i in range(num_locations)) if current_distance < min_distance: min_distance = current_distance min_path = current_path[:-1] # Exclude the repeated starting point at the end return min_path"},{"question":"**Problem: Validating a Palindromic Subsequence** A palindromic subsequence is a sequence of characters from a given string that reads the same backward as forward, but the characters don\'t have to be contiguous. Your task is to determine the length of the longest palindromic subsequence within a given string. **Objective:** Write a function called `longest_palindromic_subsequence` that takes a string as input and returns the length of its longest palindromic subsequence. **Requirements:** 1. `longest_palindromic_subsequence(s: str) -> int`: This function should calculate the length of the longest palindromic subsequence in the string. 2. Utilize dynamic programming to efficiently determine the length. 3. The function should handle strings of length up to 1000 efficiently. **Example:** ```python print(longest_palindromic_subsequence(\\"bbbab\\")) # Output: 4 print(longest_palindromic_subsequence(\\"cbbd\\")) # Output: 2 ``` **Instructions:** 1. Define the function `longest_palindromic_subsequence(s: str) -> int`. 2. Initialize a dynamic programming table to store solutions of subproblems. 3. Use a nested loop to fill the table such that `dp[i][j]` represents the length of the longest palindromic subsequence in `s[i:j+1]`. 4. Use the formula: - If `s[i] == s[j]`, then `dp[i][j] = dp[i+1][j-1] + 2` - Else, `dp[i][j] = max(dp[i+1][j], dp[i][j-1])` 5. Return the value in `dp[0][n-1]` where `n` is the length of the string. 6. Ensure the efficiency and correctness of your implementation with the provided examples.","solution":"def longest_palindromic_subsequence(s: str) -> int: n = len(s) if n == 0: return 0 dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"You are asked to write a Python function named `append_suffix` that takes two arguments: a string `directory` representing the path to a directory, and a string `suffix` representing a suffix to append to all files and directories within the specified directory. Specifically, the function should: 1. List all files and directories in the provided directory using the `os.listdir` method. 2. For each file and directory name in the listed items: a. Append the specified suffix to the name. b. Rename the file or directory to the new name using the `os.rename` method. Python\'s `os` library should be used explicitly for listing and renaming the files and directories. # Example If the directory `/example_directory` contains the following items: ``` file1.txt file2.txt directory1 ``` And the suffix `\'_backup\'` is provided, after calling `append_suffix(\'/example_directory\', \'_backup\')`, the directory contents should be: ``` file1.txt_backup file2.txt_backup directory1_backup ``` # Function Signature ```python def append_suffix(directory: str, suffix: str) -> None: # Your code here ```","solution":"import os def append_suffix(directory: str, suffix: str) -> None: Appends the given suffix to all files and directories within the specified directory. :param directory: Path to the directory containing files and subdirectories. :param suffix: Suffix to append to each file and directory name. # List all entries in the directory entries = os.listdir(directory) # Rename each entry by appending the suffix for entry in entries: old_path = os.path.join(directory, entry) new_path = os.path.join(directory, entry + suffix) os.rename(old_path, new_path)"},{"question":"In this problem, you’re required to implement a Python function that simulates a card deck shuffling routine and deals hands of cards to players. You need to implement a function named `deal_hands` to achieve this. Here are the detailed requirements: 1. Create a `Deck` class with the following: - An initializer `__init__` method that creates a standard 52-card deck (13 ranks across 4 suits). - A method `shuffle` that shuffles the deck using the `random.shuffle` function from Python\'s `random` library. - A method `deal` that deals a specified number of hands with an equal number of cards per hand. 2. Implement the `deal_hands` function that: - Takes two parameters: - `num_players`: The number of hands (players) to deal. - `cards_per_hand`: The number of cards per hand. - Instantiates a `Deck` object, shuffles it, and then deals the specified number of hands with the specified number of cards. - Returns the dealt hands as a list of lists, where each sublist represents a hand of cards. - If there aren\'t enough cards to deal the specified number of hands with the specified cards per hand, the function should return an empty list. 3. The card deck should be represented with tuples in the form `(rank, suit)`, where: - `rank` can be one of: `\'2\'`, `\'3\'`, `\'4\'`, `\'5\'`, `\'6\'`, `\'7\'`, `\'8\'`, `\'9\'`, `\'10\'`, `\'J\'`, `\'Q\'`, `\'K\'`, `\'A\'`. - `suit` can be one of: `\'Hearts\'`, `\'Diamonds\'`, `\'Clubs\'`, `\'Spades\'`. Here’s an example of how the function would be used: ```python hands = deal_hands(num_players=4, cards_per_hand=5) for i, hand in enumerate(hands): print(f\\"Hand {i+1}: {hand}\\") ``` This will output something like: ``` Hand 1: [(\'4\', \'Hearts\'), (\'J\', \'Clubs\'), (\'9\', \'Diamonds\'), (\'A\', \'Spades\'), (\'8\', \'Hearts\')] Hand 2: [(\'7\', \'Clubs\'), (\'10\', \'Diamonds\'), (\'3\', \'Spades\'), (\'Q\', \'Hearts\'), (\'6\', \'Hearts\')] Hand 3: [(\'5\', \'Spades\'), (\'K\', \'Diamonds\'), (\'8\', \'Clubs\'), (\'2\', \'Hearts\'), (\'J\', \'Hearts\')] Hand 4: [(\'Q\', \'Clubs\'), (\'K\', \'Spades\'), (\'6\', \'Diamonds\'), (\'3\', \'Hearts\'), (\'7\', \'Spades\')] ``` If `num_players * cards_per_hand` is greater than 52, it should return an empty list: ```python hands = deal_hands(num_players=5, cards_per_hand=11) print(hands) # Output: [] ```","solution":"import random class Deck: def __init__(self): self.ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] self.suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] self.cards = [(rank, suit) for suit in self.suits for rank in self.ranks] def shuffle(self): random.shuffle(self.cards) def deal(self, num_hands, cards_per_hand): if num_hands * cards_per_hand > len(self.cards): return [] hands = [] for _ in range(num_hands): hand = [] for _ in range(cards_per_hand): hand.append(self.cards.pop(0)) hands.append(hand) return hands def deal_hands(num_players, cards_per_hand): deck = Deck() deck.shuffle() return deck.deal(num_players, cards_per_hand)"},{"question":"You are required to create a function named `grade_calculator` that helps teachers calculate and assign letter grades to student scores. The function should: 1. Take a single argument, a list of tuples where each tuple contains a student\'s name and their numerical score. 2. Calculate the letter grade based on the numerical score using the following scale: - A: 90 - 100 - B: 80 - 89 - C: 70 - 79 - D: 60 - 69 - F: < 60 3. Return a new list of tuples where each tuple contains a student\'s name and their corresponding letter grade. # Requirements: - You must use a function named `grade_calculator`. - The function should take one argument: a list of tuples in the format `[(str, int)]`. - Your function should return a list of tuples in the format `[(str, str)]`. # Example Usage: ```python student_scores = [(\\"Alice\\", 95), (\\"Bob\\", 67), (\\"Charlie\\", 82), (\\"Diana\\", 74), (\\"Eve\\", 59)] grade_calculator(student_scores) ``` # Expected Output: ```python [(\\"Alice\\", \\"A\\"), (\\"Bob\\", \\"D\\"), (\\"Charlie\\", \\"B\\"), (\\"Diana\\", \\"C\\"), (\\"Eve\\", \\"F\\")] ```","solution":"def grade_calculator(student_scores): Calculates and assigns letter grades to student scores. Args: student_scores (list of tuples): A list of tuples where each tuple contains a student\'s name (str) and their numerical score (int). Returns: list of tuples: A new list of tuples where each tuple contains a student\'s name (str) and their corresponding letter grade (str). grades = [] for name, score in student_scores: if 90 <= score <= 100: grade = \'A\' elif 80 <= score <= 89: grade = \'B\' elif 70 <= score <= 79: grade = \'C\' elif 60 <= score <= 69: grade = \'D\' else: grade = \'F\' grades.append((name, grade)) return grades"},{"question":"You need to implement a function called `reorganize_string(s)` that takes a string `s` and rearranges its characters so that no two adjacent characters are the same. If this is not possible, return an empty string. Here\'s more detailed functionality for your function: 1. **Input Parameter**: - `s` (str): The input string containing only lowercase English letters. 2. **Functionality**: - Use a frequency count to record the occurrences of each character in the string. - Use a priority queue (max-heap) to rearrange the characters based on their frequencies. - Repeatedly extract the most frequent character and append it to the result string. - Ensure that no two adjacent characters are the same by temporarily storing used characters until they can be safely re-added to the heap. - Handle cases where rearrangement is impossible by returning an empty string. 3. **Output**: - Return the rearranged string, or an empty string if it is not possible to arrange the characters such that no two adjacent characters are the same. **Requirements**: - Use a priority queue (max-heap) to manage and rearrange characters based on their frequencies. - Ensure that adjacent characters in the resulting string are not the same. Example usage: ```python result = reorganize_string(\\"aab\\") print(result) # Could return \\"aba\\" result = reorganize_string(\\"aaab\\") print(result) # Returns \\"\\" ```","solution":"from heapq import heappush, heappop from collections import Counter def reorganize_string(s): Rearranges string \'s\' so that no two adjacent characters are the same. Returns the rearranged string, or an empty string if it is not possible. if not s: return \\"\\" # Count frequency of each character freq_counter = Counter(s) # Create a max-heap based on character frequencies (-freq for max-heap behavior) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heappush(max_heap, max_heap.pop(0)) # Placeholder for the result result = [] # Previous character information to ensure no two adjacent chars are same prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heappop(max_heap) # Append current character to result result.append(char) # Since this character is used, decrement its frequency if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result_str = \'\'.join(result) # Return result only if rearranged string is valid return result_str if len(result_str) == len(s) else \\"\\""},{"question":"You are required to write a function that calculates the frequency of each word in a given text file and display the top N words along with their frequencies. The function should handle case-insensitivity and ignore punctuation. **Function Signature** ```python def top_n_frequent_words(file_path: str, N: int) -> List[Tuple[str, int]]: Returns the top N words with their frequencies from a given text file. Parameters: - file_path: str The path to the text file to be analyzed. - N: int The number of top frequent words to return. Returns: - List[Tuple[str, int]] A list of tuples, each containing a word and its frequency, sorted by frequency in descending order. pass ``` **Instructions** 1. Open and read the text file located at `file_path`. 2. Split the text into words, treating whitespaces as delimiters and ignoring punctuation marks. (Hint: `str.translate` and `str.maketrans` may be useful for removing punctuation) 3. Convert all words to lowercase to ensure case-insensitivity. 4. Calculate the frequency of each word in the text. 5. Prepare a list of tuples, where each tuple contains a word and its frequency. Sort this list in descending order based on the frequency. 6. Return the top N tuples from the sorted list. **Example** ```python # Assume the following is the content of \\"sample.txt\\" # \\"Hello world! Hello, Python. Let\'s code with Python. Hello again.\\" # Calling the function with the file path and N=3 top_n_frequent_words(\\"sample.txt\\", 3) # Expected Output: # [(\'hello\', 3), (\'python\', 2), (\'world\', 1)] ``` **Note**: Ensure to handle potential file I/O errors gracefully by implementing appropriate error handling techniques.","solution":"import os import string from typing import List, Tuple from collections import Counter def top_n_frequent_words(file_path: str, N: int) -> List[Tuple[str, int]]: Returns the top N words with their frequencies from a given text file. Parameters: - file_path: str The path to the text file to be analyzed. - N: int The number of top frequent words to return. Returns: - List[Tuple[str, int]] A list of tuples, each containing a word and its frequency, sorted by frequency in descending order. if not os.path.exists(file_path): raise ValueError(\\"The file does not exist.\\") with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Remove punctuation and convert text to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) clean_text = text.translate(translator).lower() # Split the text into words words = clean_text.split() # Count the frequency of each word word_counts = Counter(words) # Get the most common words most_common_words = word_counts.most_common(N) return most_common_words"},{"question":"You are required to create a function that accepts a list of integers and returns a dictionary with the frequencies of each unique element. This function will help in determining the frequency distribution of elements in a list, commonly used in data analysis. Function Signature: ```python def frequencyDistribution(lst): ``` # Parameters: - **lst (list of integers)**: The list of integers for which we need to calculate the frequency distribution. # Returns: - **dictionary**: A dictionary where the keys are the unique elements from the list and the values are their corresponding frequencies. # Implementation Details: 1. Create an empty dictionary to store the frequencies. 2. Iterate through each element in the list. 3. For each element, update its count in the dictionary. 4. Return the dictionary containing the frequencies of all unique elements. # Example: ```python lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] output = frequencyDistribution(lst) print(output) ``` # Expected Output: ``` {1: 1, 2: 2, 3: 3, 4: 4} ``` Make sure to handle the case where the list is empty, returning an empty dictionary.","solution":"def frequencyDistribution(lst): Returns a dictionary with the frequencies of each unique element in the list. Parameters: lst (list of integers): The list of integers for which we need to calculate the frequency distribution. Returns: dict: A dictionary where the keys are the unique elements from the list and the values are their corresponding frequencies. frequency_dict = {} for item in lst: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 return frequency_dict"},{"question":"The task is to practice list manipulations and basic string operations. You need to write a function named `list_processing()`, which will perform the following operations: 1. Accept a list of strings as input. 2. Filter out strings that are less than 5 characters long. 3. Convert each string to uppercase. 4. Sort the resulting list in ascending order. 5. Return the processed list. **Function Signature:** ```python def list_processing(strings: list) -> list: # Your code here ``` **Requirements:** - Accept a list of strings as an argument to the function. - Filter out any string elements that have a length of less than 5 characters. - Convert the remaining strings to uppercase. - Sort the uppercase strings in ascending order. - Return the sorted list of uppercase strings.","solution":"def list_processing(strings: list) -> list: Process a list of strings to filter out strings less than 5 characters, convert to uppercase, sort in ascending order, and return the processed list. :param strings: List of strings to be processed. :return: Processed list of strings. processed_list = [s.upper() for s in strings if len(s) >= 5] processed_list.sort() return processed_list"},{"question":"Create a function named `rectangle_intersect_area` that takes two tuples `rect1` and `rect2`. Each tuple represents a rectangle, where `rect1 = (x1, y1, w1, h1)` and `rect2 = (x2, y2, w2, h2)`. Here, `(x1, y1)` and `(x2, y2)` are the coordinates of the bottom-left corners of the rectangles, and `w1`, `h1`, `w2`, and `h2` represent the widths and heights of the rectangles, respectively. The function should determine whether the two rectangles intersect. If they do, calculate and return the area of the intersecting region. If they do not intersect, return `0`. **Function Signature** ```python def rectangle_intersect_area(rect1: tuple[int, int, int, int], rect2: tuple[int, int, int, int]) -> int: ``` **Examples** ```python rect1 = (2, 2, 4, 4) rect2 = (3, 3, 4, 4) rectangle_intersect_area(rect1, rect2) # Output: 9 rect1 = (0, 0, 2, 2) rect2 = (3, 3, 2, 2) rectangle_intersect_area(rect1, rect2) # Output: 0 ``` **Requirements** * Use basic arithmetic operations to determine the intersecting region. * Consider cases where the rectangles do not intersect at all.","solution":"def rectangle_intersect_area(rect1, rect2): Calculate the area of intersection between two rectangles. Each rectangle is represented as a tuple (x, y, width, height). Parameters: rect1 (tuple): (x1, y1, w1, h1) rect2 (tuple): (x2, y2, w2, h2) Returns: int: The area of intersection, or 0 if the rectangles do not intersect. x1, y1, w1, h1 = rect1 x2, y2, w2, h2 = rect2 # Calculate the x and y range of the first rectangle x1_end, y1_end = x1 + w1, y1 + h1 # Calculate the x and y range of the second rectangle x2_end, y2_end = x2 + w2, y2 + h2 # Determine the overlapping area by finding the max left corner and min right corner overlap_x_start = max(x1, x2) overlap_y_start = max(y1, y2) overlap_x_end = min(x1_end, x2_end) overlap_y_end = min(y1_end, y2_end) # Calculate width and height of the overlapping area overlap_width = overlap_x_end - overlap_x_start overlap_height = overlap_y_end - overlap_y_start # If the computed width or height of the overlapping area is negative or zero, there is no intersection if overlap_width <= 0 or overlap_height <= 0: return 0 # The area of intersection return overlap_width * overlap_height"},{"question":"You are required to write a function to simulate and plot a simple random walk in both one and two dimensions. The task helps to understand stochastic processes and the use of plotting libraries. **Objective:** Write a function `plot_random_walk(steps, dimensions)` that takes two parameters: - `steps`: an integer representing the number of steps in the random walk. - `dimensions`: an integer which can be either 1 or 2, determining whether the random walk is in one dimension or two dimensions. The function should: 1. Simulate a random walk for the given number of steps and dimensions. - For a one-dimensional random walk, starting from 0, at each step move either +1 or -1 with equal probability. - For a two-dimensional random walk, starting from (0, 0), at each step move in one of the four directions: (+1, 0), (-1, 0), (0, +1), or (0, -1) with equal probability. 2. Plot the random walk. - For a one-dimensional random walk, plot the position at each step on the y-axis against the step number on the x-axis. - For a two-dimensional random walk, plot the trajectory on an x-y plane. 3. Label the x-axis as \'Step number\' for the one-dimensional plot, \'X position\' for the two-dimensional plot. - For the one-dimensional plot, label the y-axis as \'Position\'. 4. Include appropriate titles: - \'1D Random Walk\' for the one-dimensional plot. - \'2D Random Walk\' for the two-dimensional plot. 5. Ensure that the plot clearly shows the trajectory of the random walk, and for the two-dimensional walk, annotate the starting point as \'Start\' and the ending point as \'End\'. You should use `matplotlib` for all plotting, and `numpy` to generate random steps. **Requirements:** - Use the `numpy.random.choice` method to generate the steps of the random walk. - Ensure that your plots are accurate and clearly labeled.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_random_walk(steps, dimensions): Plots a random walk with the given number of steps and dimensions. Parameters: steps (int): The number of steps in the random walk. dimensions (int): The number of dimensions of the random walk (1 or 2). if dimensions == 1: walk = np.cumsum(np.random.choice([-1, 1], size=steps)) plt.figure(figsize=(10, 6)) plt.plot(range(1, steps + 1), walk, marker=\'o\', linestyle=\'-\') plt.title(\'1D Random Walk\') plt.xlabel(\'Step number\') plt.ylabel(\'Position\') plt.show() elif dimensions == 2: x, y = [0], [0] for _ in range(steps): dx, dy = np.random.choice([-1, 1]), np.random.choice([-1, 1]) x.append(x[-1] + (dx if np.random.rand() > 0.5 else 0)) # each step moves either x or y y.append(y[-1] + (dy if np.random.rand() <= 0.5 else 0)) plt.figure(figsize=(10, 6)) plt.plot(x, y, marker=\'o\', linestyle=\'-\') plt.scatter([x[0], x[-1]], [y[0], y[-1]], color=\'red\') plt.text(x[0], y[0], \'Start\', fontsize=12, ha=\'right\') plt.text(x[-1], y[-1], \'End\', fontsize=12, ha=\'right\') plt.title(\'2D Random Walk\') plt.xlabel(\'X Position\') plt.ylabel(\'Y Position\') plt.grid(True) plt.show() else: raise ValueError(\\"Dimensions must be either 1 or 2.\\")"},{"question":"You are required to write a function called `plot_temperature_trends()` using the `matplotlib` library in Python. This function should generate a line plot of average monthly temperatures over a year. Here are the essential requirements for the function: 1. The function should take no arguments and should create a plot that displays the average monthly temperatures for each month. 2. Use the following lists for months and their corresponding temperatures: - `months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"]` - `temperatures = [30.0, 32.5, 45.2, 55.1, 65.5, 75.0, 80.6, 78.7, 70.3, 58.6, 45.9, 35.2]` 3. Calculate the median temperature and display it as a dashed horizontal line on the plot. 4. Customize the plot with the following characteristics: - Plot the temperatures with a blue line and square markers. - Set the plot title to \\"Average Monthly Temperatures\\" with a blue color and font size of 16. - Label the x-axis as \\"Months\\" and the y-axis as \\"Temperature (F)\\". - Include a legend that differentiates between the monthly temperatures and the median line. 5. Display the plot using `matplotlib.pyplot.show()`. 6. Use both the `matplotlib.pyplot.plot()` and `matplotlib.pyplot.axhline()` functions appropriately as per the provided documentation. The function signature should be: ```python def plot_temperature_trends(): ... ```","solution":"import matplotlib.pyplot as plt import numpy as np def plot_temperature_trends(): months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"] temperatures = [30.0, 32.5, 45.2, 55.1, 65.5, 75.0, 80.6, 78.7, 70.3, 58.6, 45.9, 35.2] median_temperature = np.median(temperatures) plt.plot(months, temperatures, color=\'blue\', marker=\'s\', label=\'Monthly Temperatures\') plt.axhline(median_temperature, color=\'red\', linestyle=\'--\', label=f\'Median Temperature: {median_temperature:.1f}F\') plt.title(\\"Average Monthly Temperatures\\", color=\'blue\', fontsize=16) plt.xlabel(\\"Months\\") plt.ylabel(\\"Temperature (F)\\") plt.legend() plt.show()"},{"question":"Write a function that accepts a list of strings representing file paths and a string representing a directory path. The function should copy all files from the list to the specified directory while maintaining the original directory structure. If the directory doesn\'t exist, it should be created. The function should raise the exception for: - FileNotFoundError: If any of the file paths in the list do not exist. - ValueError: If the input list is empty. The function should output: list: A list of strings representing the paths of the copied files in the new directory. You should write self-contained code starting with: ``` import os import shutil def task_func(file_paths, directory): ```","solution":"import os import shutil def task_func(file_paths, directory): if not file_paths: raise ValueError(\\"The input list is empty\\") copied_files = [] for file_path in file_paths: if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist\\") relative_path = os.path.relpath(file_path) destination_path = os.path.join(directory, relative_path) os.makedirs(os.path.dirname(destination_path), exist_ok=True) shutil.copy2(file_path, destination_path) copied_files.append(destination_path) return copied_files"},{"question":"You are asked to create a function `simulate_population_growth` that simulates population growth using the logistic growth model. This model is widely used in biological systems to describe population expansion over time in limited resources. Your task is to return a projection of the population size at discrete time intervals and generate a line plot of population growth over time using the `numpy` and `matplotlib.pyplot` libraries. # Requirements: - **Function Name**: `simulate_population_growth` - **Input Parameters**: - `initial_population` (float): The initial population size at time t=0. - `carrying_capacity` (float): The maximum population size that the environment can sustain indefinitely. - `growth_rate` (float): The intrinsic growth rate of the population. - `time_steps` (int): The number of time intervals over which to simulate the population growth. - **Output**: The function should return a numpy array of population sizes at each time step and also save a line plot named `population_growth.png`. # Steps to Follow: 1. Initialize an array to store population sizes over time, with the initial population at the first index. 2. Implement the logistic growth formula to compute the population at each subsequent time step using the formula: [ P(t+1) = P(t) + r cdot P(t) cdot left(1 - frac{P(t)}{K}right) ] where (P(t)) is the population at time t, (r) is the growth rate, and (K) is the carrying capacity. 3. Populate the array with computed population sizes. 4. Create a line plot of population size against time step using `matplotlib.pyplot.plot`. 5. Annotate the plot with appropriate labels, title, and legends. 6. Save the generated plot as `population_growth.png`. # Example Usage: ```python import numpy as np import matplotlib.pyplot as plt def simulate_population_growth(initial_population, carrying_capacity, growth_rate, time_steps): population = np.zeros(time_steps) population[0] = initial_population for t in range(1, time_steps): population[t] = population[t-1] + growth_rate * population[t-1] * (1 - population[t-1] / carrying_capacity) plt.figure(figsize=(10, 6)) plt.plot(population, label=\'Population Size\') plt.xlabel(\'Time Steps\') plt.ylabel(\'Population\') plt.title(\'Logistic Growth Model\') plt.legend() plt.grid(True) plt.savefig(\'population_growth.png\') return population # Example parameters initial_population = 50 carrying_capacity = 1000 growth_rate = 0.1 time_steps = 100 # Call the function simulate_population_growth(initial_population, carrying_capacity, growth_rate, time_steps) ``` **Note**: Ensure to initialize the population array using `numpy.zeros` and to plot using `matplotlib.pyplot.plot` as per the respective API requirements.","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_population_growth(initial_population, carrying_capacity, growth_rate, time_steps): Simulates population growth using the logistic growth model. Parameters: - initial_population (float): The initial population size at time t=0. - carrying_capacity (float): The maximum population size that the environment can sustain indefinitely. - growth_rate (float): The intrinsic growth rate of the population. - time_steps (int): The number of time intervals over which to simulate the population growth. Returns: - numpy.ndarray: Array of population sizes at each time step. population = np.zeros(time_steps) population[0] = initial_population for t in range(1, time_steps): population[t] = population[t-1] + growth_rate * population[t-1] * (1 - population[t-1] / carrying_capacity) plt.figure(figsize=(10, 6)) plt.plot(population, label=\'Population Size\') plt.xlabel(\'Time Steps\') plt.ylabel(\'Population\') plt.title(\'Logistic Growth Model\') plt.legend() plt.grid(True) plt.savefig(\'population_growth.png\') return population"},{"question":"You are asked to write a function named `convert_to_24_hour_format` that converts a given time in 12-hour AM/PM format to a 24-hour format. The input string will be in the format \\"hh:mm AM\\" or \\"hh:mm PM\\", where \\"hh\\" is the hour, \\"mm\\" is the minutes, \\"AM\\" and \\"PM\\" represent the time period. Here\'s how to convert the time: 1. If the input time is in the \\"AM\\" period: - If the hour is 12 (for 12 AM), convert it to 00. - If the hour is any value other than 12, keep it as is. 2. If the input time is in the \\"PM\\" period: - If the hour is 12 (for 12 PM), keep it as 12. - If the hour is any value other than 12, add 12 to the hour value. The function should take `time_12` as its parameter—a string representing time in the 12-hour AM/PM format—and return a string representing the time in the 24-hour format (\\"HH:MM\\"). Example: - `convert_to_24_hour_format(\\"02:45 PM\\")` should return `\\"14:45\\"` - `convert_to_24_hour_format(\\"12:00 AM\\")` should return `\\"00:00\\"` Write the function `convert_to_24_hour_format(time_12)` to correctly perform this conversion.","solution":"def convert_to_24_hour_format(time_12): Converts a given time in 12-hour AM/PM format to a 24-hour format. Parameters: time_12 (str): Time in 12-hour AM/PM format (\\"hh:mm AM\\" or \\"hh:mm PM\\") Returns: str: Time in 24-hour format (\\"HH:MM\\") # Split the input time into its components time, period = time_12.split() hours, minutes = map(int, time.split(\':\')) # Convert the time based on the period if period == \\"AM\\": if hours == 12: # Convert \\"12 AM\\" to \\"00\\" hours hours = 0 else: if hours != 12: # Convert PM hours to 24-hour format by adding 12 hours += 12 # Format the hours and minutes to ensure two digits return f\\"{hours:02}:{minutes:02}\\""},{"question":"You are managing a library database named `library.db` that contains a table called `books`. The `books` table includes the following columns: `ISBN` (text), `title` (text), `author` (text), `publication_year` (integer), and `genre` (text). You need to generate summary reports on the collection. Specifically, you should create two CSV files: 1. `books_by_author.csv`: List of all books grouped by authors, formatted with columns `Author_Name`, `Title`, `ISBN`, `Publication_Year`, `Genre`. 2. `books_by_genre.csv`: List of all books grouped by genres, formatted with columns `Genre`, `Title`, `ISBN`, `Author_Name`, `Publication_Year`. Both CSV files should use a comma (`,`) as a delimiter. Please write a function named `generate_library_reports` that will: 1. Connect to the `library.db` SQLite database. 2. Execute SQL queries to retrieve the needed information. 3. Write the data into the CSV files as described above. Ensure the `Author_Name` values in `books_by_author.csv` and `books_by_genre.csv` are formatted in title case using the .title() method. ```python import csv import sqlite3 def generate_library_reports(): # Connect to the library.db SQLite database conn = sqlite3.connect(\'library.db\') cursor = conn.cursor() # Write books by author to books_by_author.csv cursor.execute(\'\'\' SELECT author, title, ISBN, publication_year, genre FROM books ORDER BY author, title \'\'\') books_by_author = cursor.fetchall() with open(\'books_by_author.csv\', \'w\', newline=\'\', encoding=\'utf-8\') as author_file: writer = csv.writer(author_file) writer.writerow([\'Author_Name\', \'Title\', \'ISBN\', \'Publication_Year\', \'Genre\']) for row in books_by_author: author_name = row[0].title() writer.writerow([author_name, row[1], row[2], row[3], row[4]]) # Write books by genre to books_by_genre.csv cursor.execute(\'\'\' SELECT genre, title, ISBN, author, publication_year FROM books ORDER BY genre, title \'\'\') books_by_genre = cursor.fetchall() with open(\'books_by_genre.csv\', \'w\', newline=\'\', encoding=\'utf-8\') as genre_file: writer = csv.writer(genre_file) writer.writerow([\'Genre\', \'Title\', \'ISBN\', \'Author_Name\', \'Publication_Year\']) for row in books_by_genre: author_name = row[3].title() writer.writerow([row[0], row[1], row[2], author_name, row[4]]) # Close database connection conn.close() ```","solution":"import csv import sqlite3 def generate_library_reports(db_name=\'library.db\'): # Connect to the library.db SQLite database conn = sqlite3.connect(db_name) cursor = conn.cursor() # Write books by author to books_by_author.csv cursor.execute(\'\'\' SELECT author, title, ISBN, publication_year, genre FROM books ORDER BY author, title \'\'\') books_by_author = cursor.fetchall() with open(\'books_by_author.csv\', \'w\', newline=\'\', encoding=\'utf-8\') as author_file: writer = csv.writer(author_file) writer.writerow([\'Author_Name\', \'Title\', \'ISBN\', \'Publication_Year\', \'Genre\']) for row in books_by_author: author_name = row[0].title() if row[0] else \\"\\" writer.writerow([author_name, row[1], row[2], row[3], row[4]]) # Write books by genre to books_by_genre.csv cursor.execute(\'\'\' SELECT genre, title, ISBN, author, publication_year FROM books ORDER BY genre, title \'\'\') books_by_genre = cursor.fetchall() with open(\'books_by_genre.csv\', \'w\', newline=\'\', encoding=\'utf-8\') as genre_file: writer = csv.writer(genre_file) writer.writerow([\'Genre\', \'Title\', \'ISBN\', \'Author_Name\', \'Publication_Year\']) for row in books_by_genre: author_name = row[3].title() if row[3] else \\"\\" writer.writerow([row[0], row[1], row[2], author_name, row[4]]) # Close database connection conn.close()"},{"question":"You are tasked with writing a function that analyzes a given list of people\'s names along with their birth and death years. The function should determine the year in which the most people were alive. If there is a tie, return the earliest year. Function Signature: ```python def year_with_most_people_alive(people: typing.List[typing.Tuple[str, int, int]]) -> int: Determines the year with the maximum number of people alive. Args: people (typing.List[typing.Tuple[str, int, int]]): a list of tuples, each containing a person\'s name, birth year, and death year. Returns: int: the year with the most people alive. ``` # Requirements: 1. The birth year is inclusive, and the death year is exclusive (i.e., a person born in 1980 and died in 1990 was alive from 1980 to 1989). 2. Return the earliest year in case of a tie. # Example: If the input list `people` contains: ```python [ (\\"Alice\\", 1910, 1950), (\\"Bob\\", 1920, 1960), (\\"Charlie\\", 1925, 1935), (\\"David\\", 1930, 1980), (\\"Eve\\", 1940, 1960), ] ``` The function should return: ``` 1930 ``` # Explanation: - From 1910 to 1919: 1 person alive (Alice) - From 1920 to 1924: 2 people alive (Alice, Bob) - From 1925 to 1929: 3 people alive (Alice, Bob, Charlie) - From 1930 to 1935: 4 people alive (Alice, Bob, Charlie, David) - From 1936 to 1940: 3 people alive (Alice, Bob, David) - From 1941 to 1950: 3 people alive (Alice, Bob, David, Eve) - From 1951 to 1959: 3 people alive (Bob, David, Eve) - From 1960 to 1979: 1 person alive (David) - From 1980 onwards: 0 people alive","solution":"from typing import List, Tuple def year_with_most_people_alive(people: List[Tuple[str, int, int]]) -> int: Determines the year with the maximum number of people alive. Args: people (List[Tuple[str, int, int]]): a list of tuples, each containing a person\'s name, birth year, and death year. Returns: int: the year with the most people alive. year_changes = {} for _, birth_year, death_year in people: if birth_year in year_changes: year_changes[birth_year] += 1 else: year_changes[birth_year] = 1 if death_year in year_changes: year_changes[death_year] -= 1 else: year_changes[death_year] = -1 max_alive = 0 current_alive = 0 year_with_max_alive = None for year in sorted(year_changes.keys()): current_alive += year_changes[year] if current_alive > max_alive: max_alive = current_alive year_with_max_alive = year return year_with_max_alive"},{"question":"**Problem Title:** Calculate Intersection of Two Arrays **Objective:** You will implement a function `intersection` that computes the intersection of two arrays, returning an array of unique elements that are present in both input arrays. The function should handle both integer and string arrays and return the intersection in sorted order. **Function Signature:** ```python def intersection(arr1, arr2): pass ``` **Input Arguments:** - `arr1` (`list`): First list of elements (integers or strings). - `arr2` (`list`): Second list of elements (integers or strings). **Output:** - `result` (`list`): A sorted list of unique elements present in both `arr1` and `arr2`. **Background:** The intersection of two sets A and B is the set containing all elements that are both in A and in B. The order of elements in the result does not matter but should be sorted for consistency. **Example Usage:** ```python # Test 1: Integer Arrays arr1 = [1, 2, 2, 1] arr2 = [2, 2] print(intersection(arr1, arr2)) # Expected: [2] # Test 2: String Arrays arr1 = [\\"apple\\", \\"banana\\", \\"cherry\\"] arr2 = [\\"banana\\", \\"date\\", \\"fig\\", \\"cherry\\"] print(intersection(arr1, arr2)) # Expected: [\\"banana\\", \\"cherry\\"] # Test 3: Mixed Arrays arr1 = [1, 2, 3, 4] arr2 = [3, 4, 5, 6] print(intersection(arr1, arr2)) # Expected: [3, 4] ``` **Instructions:** - Implement the function `intersection` to compute the intersection of two lists. - Your solution should handle both integer and string elements in the input lists. - Ensure the output list contains unique elements and is sorted. - You should not use any external libraries for this implementation, aside from Python\'s standard libraries. **Considerations:** - Handle edge cases such as empty input lists. - Optimize for time complexity where possible, considering the potential size of input arrays.","solution":"def intersection(arr1, arr2): Returns the sorted list of unique elements present in both arr1 and arr2. set1 = set(arr1) set2 = set(arr2) result = list(set1.intersection(set2)) return sorted(result)"},{"question":"**Write a function `longest_unique_substring(s)` that takes a string `s` as input and returns the length of the longest substring without repeating characters. The function should use a sliding window approach to determine the longest substring with unique characters. # Requirements: 1. Define a function `longest_unique_substring(s)` where: - `s`: A string to be analyzed. 2. The function should return an integer representing the length of the longest substring of `s` in which all characters are unique. 3. Utilize a sliding window algorithm to efficiently find the longest unique substring. # Examples: ```python longest_unique_substring(\'abcabcbb\') # => 3 (\'abc\' is the longest unique substring) longest_unique_substring(\'bbbbb\') # => 1 (\'b\' is the longest unique substring) longest_unique_substring(\'pwwkew\') # => 3 (\'wke\' is the longest unique substring) ``` # Guidelines: - Ensure that the function is defined as specified. - The solution should use a sliding window technique to maintain the efficiency of the algorithm. ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_index_map: left = max(left, char_index_map[s[right]] + 1) char_index_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a file named `weather.csv` that contains weather data for multiple cities over several days. Each row in the CSV file represents weather information for a particular city on a specific day. The structure of the CSV file is as follows: ``` city,date,temperature,humidity,condition New York,2023-01-01,5,30,Clear Los Angeles,2023-01-01,20,10,Sunny Chicago,2023-01-01,-2,50,Snow New York,2023-01-02,3,45,Rain Los Angeles,2023-01-02,22,15,Sunny Chicago,2023-01-02,-5,40,Cloudy ``` Your task is to write a Python function named `analyze_weather`, which performs the following operations: 1. Reads the data from the `weather.csv` file. 2. Calculates the average temperature and humidity for each city over all recorded days. 3. Identifies cities that experienced at least one snow or rain condition. 4. Outputs a dictionary where the keys are city names and the values are dictionaries containing the following information: - `average_temperature`: The average temperature of the city. - `average_humidity`: The average humidity of the city. - `had_snow_or_rain`: A boolean indicating whether the city experienced snow or rain at least once. **Requirements:** - Use the `csv` library to read from the CSV file. - Ensure accurate calculations of averages. - Return the results as a dictionary with the specified structure. Example output for the given sample data: ```python { \\"New York\\": {\\"average_temperature\\": 4.0, \\"average_humidity\\": 37.5, \\"had_snow_or_rain\\": True}, \\"Los Angeles\\": {\\"average_temperature\\": 21.0, \\"average_humidity\\": 12.5, \\"had_snow_or_rain\\": False}, \\"Chicago\\": {\\"average_temperature\\": -3.5, \\"average_humidity\\": 45.0, \\"had_snow_or_rain\\": True} } ```","solution":"import csv def analyze_weather(file_path): Analyzes weather data from a CSV file and returns a dictionary containing average temperature, average humidity, and a boolean indicating if there was snow or rain for each city. Args: - file_path (str): Path to the CSV file containing weather data. Returns: - dict: A dictionary where keys are city names, and values are dictionaries containing average temperature, average humidity, and a boolean for snow or rain. city_data = {} with open(file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: city = row[\'city\'] temp = float(row[\'temperature\']) humidity = float(row[\'humidity\']) condition = row[\'condition\'] if city not in city_data: city_data[city] = { \'total_temp\': 0, \'total_humidity\': 0, \'num_entries\': 0, \'had_snow_or_rain\': False } city_data[city][\'total_temp\'] += temp city_data[city][\'total_humidity\'] += humidity city_data[city][\'num_entries\'] += 1 if condition in [\'Snow\', \'Rain\']: city_data[city][\'had_snow_or_rain\'] = True result = {} for city, data in city_data.items(): result[city] = { \'average_temperature\': data[\'total_temp\'] / data[\'num_entries\'], \'average_humidity\': data[\'total_humidity\'] / data[\'num_entries\'], \'had_snow_or_rain\': data[\'had_snow_or_rain\'] } return result"},{"question":"Calculate the cumulative sum of a given list of integers. The function should utilize standard Python libraries, including the itertools library. The result should be a list that contains the cumulative sums. The function should output: ``` List: A list of integers representing the cumulative sums of the input list. ``` You should write self-contained code starting with: ``` from itertools import accumulate def calculate_cumulative_sum(numbers): ```","solution":"from itertools import accumulate def calculate_cumulative_sum(numbers): Returns a list of cumulative sums of the given list of integers. return list(accumulate(numbers))"},{"question":"You are provided with a collection of emails in a CSV file named \'emails.csv\'. Each email has a \'subject\', \'sender\', \'content\', and \'spam\' label. Your task is to preprocess this dataset and then implement a Naive Bayes classifier to categorize the emails as spam or not spam. You need to write a function `classify_emails(file_path: str) -> dict:` that: 1. Loads the email data from the specified CSV file using the `pandas.read_csv()` function. 2. Drops any email entries with missing values. 3. Vectorizes the \'content\' of each email using the `CountVectorizer` from `sklearn.feature_extraction.text`. 4. Splits the dataset into training and testing sets using an 80-20 split. 5. Trains a Naive Bayes classifier on the training set. 6. Tests the classifier on the test set. 7. Returns a dictionary with the following keys: `accuracy`, `precision`, `recall`, and `f1_score`, representing the performance metrics of the classifier. Use the `pandas.read_csv()` function as part of this problem to load the data. Ensure the rest of the code is written to facilitate the preprocessing, vectorizing, and classification according to the functions mentioned. Function signature: ```python def classify_emails(file_path: str) -> dict: pass ```","solution":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score def classify_emails(file_path: str) -> dict: # Load the email data from the CSV file data = pd.read_csv(file_path) # Drop rows with missing values data.dropna(inplace=True) # Extract the content and spam labels X = data[\'content\'] y = data[\'spam\'] # Vectorize the content using CountVectorizer vectorizer = CountVectorizer() X_vectorized = vectorizer.fit_transform(X) # Split the dataset into training and testing sets with an 80-20 split X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42) # Train a Naive Bayes classifier on the training set classifier = MultinomialNB() classifier.fit(X_train, y_train) # Test the classifier on the test set y_pred = classifier.predict(X_test) # Calculate the performance metrics accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred) recall = recall_score(y_test, y_pred) f1 = f1_score(y_test, y_pred) # Return the performance metrics return { \'accuracy\': accuracy, \'precision\': precision, \'recall\': recall, \'f1_score\': f1 }"},{"question":"Write a Python function named `cumulativeProduct` that calculates the cumulative product of numbers in a list. The function should utilize the built-in `reduce` function from the `functools` module. Here are the specifics of the function: # Function Signature: ```python def cumulativeProduct(lst): ``` # Parameters: - `lst` (list): A list of numbers (integers or floats). # Returns: - A list of the same length as `lst`, where each element at index `i` is the product of all elements from the beginning of the list up to and including index `i`. # Instructions: 1. Import the `reduce` function from the `functools` module. 2. Use `reduce` to calculate and accumulate the product of list elements. 3. Return the cumulative product list. # Example: ```python from functools import reduce lst = [1, 2, 3, 4] output = cumulativeProduct(lst) # Expected output: [1, 2, 6, 24] ``` Implement the function `cumulativeProduct` to meet the above requirements.","solution":"from functools import reduce def cumulativeProduct(lst): Calculates the cumulative product of numbers in a list. Parameters: lst (list): A list of numbers (integers or floats). Returns: list: A list of the same length as lst, where each element at index i is the product of all elements from the beginning of the list up to and including index i. if not lst: return [] cumulative_product_list = [] current_product = 1 for num in lst: current_product *= num cumulative_product_list.append(current_product) return cumulative_product_list"},{"question":"You are asked to create a function that performs matrix multiplication with a twist. Given two matrices `A` and `B`, you need to find their product, but with an extra step: apply an element-wise activation function to the resulting matrix before returning it. An activation function in this context will be a specific mathematical operation (such as ReLU, sigmoid, or tanh) that you must apply to each element of the product matrix. The function `matrix_mult_with_activation` should perform matrix multiplication and then apply the specified activation function to each element of the resulting matrix. The supported activation functions should include: - `relu`: Applies the ReLU (Rectified Linear Unit) function, defined as `f(x) = max(0, x)`. - `sigmoid`: Applies the sigmoid function, defined as `f(x) = 1 / (1 + exp(-x))`. - `tanh`: Applies the hyperbolic tangent function, defined as `f(x) = tanh(x)`. Implement the function `matrix_mult_with_activation` with the following signature: ```python def matrix_mult_with_activation(A, B, activation=\'relu\'): ... ``` **Parameters**: - `A` (list of lists of floats): The first matrix to be multiplied. - `B` (list of lists of floats): The second matrix to be multiplied. - `activation` (str): The activation function to apply, default is `relu`. **Returns**: - A list of lists of floats representing the product of `A` and `B` after applying the activation function element-wise. **Instructions**: 1. Implement the matrix multiplication operation. 2. Implement the specified activation functions. 3. Apply the activation function to each element of the resulting matrix. **Example**: ```python A = [ [1, 2], [3, 4] ] B = [ [2, 0], [1, 2] ] activation = \'relu\' result = matrix_mult_with_activation(A, B, activation) print(result) # Output should be: [[4, 4], [10, 8]] ``` In the example, the matrix multiplication of `A` and `B` gives: ``` [ [1*2 + 2*1, 1*0 + 2*2], => [[4, 4], [3*2 + 4*1, 3*0 + 4*2] [10, 8]] ] ``` After applying the ReLU activation function (which doesn\'t change the values since they are all non-negative), the result remains `[[4, 4], [10, 8]]`.","solution":"import math def matrix_mult_with_activation(A, B, activation=\'relu\'): Multiplies two matrices A and B and then applies the given activation function element-wise to the result. Parameters: A (list of lists of floats): The first matrix to be multiplied. B (list of lists of floats): The second matrix to be multiplied. activation (str): The activation function to apply, default is \'relu\'. Returns: list of lists of floats: The resulting matrix after multiplication and activation. def relu(x): return max(0, x) def sigmoid(x): return 1 / (1 + math.exp(-x)) def tanh(x): return math.tanh(x) if activation == \'relu\': activation_fn = relu elif activation == \'sigmoid\': activation_fn = sigmoid elif activation == \'tanh\': activation_fn = tanh else: raise ValueError(\\"Unsupported activation function\\") # Check if matrices can be multiplied if len(A[0]) != len(B): raise ValueError(\\"Matrices A and B cannot be multiplied due to incompatible dimensions\\") # Matrix multiplication result = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))] # Apply activation function element-wise activated_result = [[activation_fn(element) for element in row] for row in result] return activated_result"},{"question":"You are required to design a function that generates a patterned spiral using the `turtle` graphics library in Python. Your goal is to complete the function `draw_spiral(turtle_obj, length, angle, increment, repetitions)` which takes in a turtle object and parameters to determine the length of the initial segment, the angle of turns, the increment in length after each segment, and the number of repetitions. Your function should meet the following requirements: - Utilize the `turtle.forward(distance)` method to draw each segment of the spiral. - Use the `turtle.right(angle)` method to turn the turtle. - Increment the length of each successive segment by a fixed amount. **Function Signature:** `def draw_spiral(turtle_obj, length, angle, increment, repetitions):` **Parameters:** - `turtle_obj` (`turtle.Turtle`): The turtle object used for drawing. - `length` (int): The initial length of the segment. - `angle` (int): The angle in degrees to turn the turtle after each segment. - `increment` (int): The amount by which the segment length increases after each turn. - `repetitions` (int): The total number of segments to draw in the spiral. **Details:** - Start drawing from the current position of the turtle. - Each segment should be incrementally longer than the previous one by the specified `increment`. **Example:** ```python import turtle # Assume the turtle object is initialized as follows: screen = turtle.Screen() t = turtle.Turtle() # Function call draw_spiral(t, 10, 45, 5, 20) ``` The above call to the function should draw a spiral that starts with the first segment of length 10, turns 45 degrees, and increments the length of each subsequent segment by 5. The pattern should repeat for 20 segments.","solution":"def draw_spiral(turtle_obj, length, angle, increment, repetitions): Draws a spiral using a turtle object. Parameters: - turtle_obj: The turtle object used for drawing. - length: The initial length of the segment. - angle: The angle in degrees to turn the turtle after each segment. - increment: The amount by which the segment length increases after each turn. - repetitions: The total number of segments to draw in the spiral. for _ in range(repetitions): turtle_obj.forward(length) turtle_obj.right(angle) length += increment"},{"question":"You are provided with a function that takes a list of integers and returns the list sorted in non-increasing order. Your task is to write a function called `sort_descending` that implements this behavior without using Python’s built-in sorting functions. The function `sort_descending` should use a sorting algorithm of your choice (such as bubble sort, selection sort, insertion sort, etc.) to sort the list in place. # Requirements: 1. Do not use Python\'s built-in `sorted()` or `list.sort()` methods. 2. The function should modify the input list in place. # Input: - `numbers`: A list of integers. # Output: - The same list of integers sorted in non-increasing order. # Example: ```python numbers = [4, 2, 5, 1, 3] sort_descending(numbers) ``` **Expected Output:** ```python [5, 4, 3, 2, 1] ```","solution":"def sort_descending(numbers): Sorts the list of integers in non-increasing order using bubble sort. :param numbers: List[int] :return: None (Modifies the list in place) n = len(numbers) for i in range(n): for j in range(0, n-i-1): if numbers[j] < numbers[j+1]: # Swap if the element found is less than the next element numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return"},{"question":"You are asked to write a Python function that reads a series of stock prices and calculates the moving average for a given window size. You will be using the `pandas` library to simplify the calculations and handle data efficiently. Given a list of stock prices and an integer window size, create a function named `moving_average` that returns a new list containing the moving averages. The moving average at position `i` is defined as the average of the last `window_size` stock prices up to and including position `i`. Here are the specific requirements to follow: - The moving averages should be calculated using a rolling window method. - You should handle edge cases where the window size is larger than the number of stock prices gracefully (in this case, the average should be computed for the available prices). Your function should look like this: ```python import pandas as pd def moving_average(prices, window_size): # Your code here ``` **Input:** - `prices`: A list of integers or floats representing stock prices. - `window_size`: An integer representing the size of the moving average window. **Output:** - A list of floats representing the moving averages for the given window size. **Example:** ```python prices = [120, 125, 130, 135, 140, 145, 150] window_size = 3 print(moving_average(prices, window_size)) # Output: [120.0, 122.5, 125.0, 130.0, 135.0, 140.0, 145.0] ``` In this example, the moving average is calculated for each position starting from the first price. Notice that when there are fewer than `window_size` prices available, the average is calculated for the prices that are available.","solution":"import pandas as pd def moving_average(prices, window_size): Calculates the moving average for the given list of stock prices and window size. Args: prices : list A list of integers or floats representing stock prices. window_size : int An integer representing the size of the moving average window. Returns: list A list of floats representing the moving averages for the given window size. if not prices or window_size <= 0: return [] series = pd.Series(prices) moving_averages = series.rolling(window=window_size, min_periods=1).mean().tolist() return moving_averages"},{"question":"You are required to implement a function called `find_prime_factors` that takes an integer `n` and returns a list of its unique prime factors in ascending order. A prime factor is a prime number that divides `n` exactly without leaving a remainder. Specifically, the function should perform the following steps: 1. Initialize an empty list to store the prime factors. 2. Check if 2 is a factor of `n`. If it is, add it to the list of prime factors and divide `n` by 2 repeatedly until it no longer divides evenly. 3. For every odd number from 3 up to the square root of `n` (inclusive), check if it is a factor of `n`. If it is, add it to the list of prime factors and divide `n` by that number repeatedly until it no longer divides evenly. 4. If `n` is still greater than 2 after the above steps, it means `n` itself is a prime number and should be added to the list of prime factors. 5. Return the list of prime factors. Here is how the function signature should look: ```python def find_prime_factors(n): pass # Example: # find_prime_factors(56) should return [2, 7] # find_prime_factors(97) should return [97] since 97 is a prime number ```","solution":"def find_prime_factors(n): Returns a list of unique prime factors of n in ascending order. prime_factors = [] # Step 2 if n % 2 == 0: prime_factors.append(2) while n % 2 == 0: n //= 2 # Step 3 for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: prime_factors.append(i) while n % i == 0: n //= i # Step 4 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"Convert a given string containing a mathematical expression into its equivalent Reverse Polish Notation (RPN) form. The function should evaluate operators like +, -, *, / and support parentheses to ensure proper precedence rules. The input string consists of non-negative integers and the aforementioned operators. The function should output: str: A space-separated string representing the input expression in RPN. You should write self-contained code starting with: ``` def infix_to_postfix(expression): ```","solution":"def infix_to_postfix(expression): Converts an infix mathematical expression string to its equivalent Reverse Polish Notation (RPN) form using the shunting-yard algorithm. # Operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} # Stack for operators operators = [] # Result list for the output RPN expression output = [] # Tokenize the input expression tokens = list(expression.replace(\' \', \'\')) # Function to check if a string is an integer def is_number(token): try: int(token) return True except ValueError: return False i = 0 while i < len(tokens): token = tokens[i] if is_number(token): # If the token is a number num = token while i+1 < len(tokens) and is_number(tokens[i+1]): i += 1 num += tokens[i] output.append(num) elif token == \'(\': # If the token is \'(\' operators.append(token) elif token == \')\': # If the token is \')\' while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop the \'(\' operator from stack else: # If the token is an operator while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[token]): output.append(operators.pop()) operators.append(token) i += 1 # Pop all the remaining operators in the stack while operators: output.append(operators.pop()) return \' \'.join(output)"},{"question":"Your task is to write a function `implement_threaded_file_reader()` that demonstrates concurrent file reading using threads in Python with the `threading` module. This function should perform the following tasks: 1. Create a thread that reads the contents of a given file. 2. Create a thread that writes a specified message to another file. 3. Ensure the file-reading thread successfully reads the entire file content. 4. Display the contents read from the file. Use the following guidelines: - Use the `threading` module exclusively for creating and managing threads. - Ensure that the file reading is completed and the entire content is printed out. - Handle any potential exceptions that may arise during file operations. Here is the signature of the function you need to implement: ```python import threading def implement_threaded_file_reader(read_filename, write_filename, message): # Implementation here ``` Example execution: - Supposing `read_filename` is `read_file.txt` which exists and contains \\"Hello from the file!\\" - Supposing `write_filename` is `write_file.txt` and `message` is \\"Writing to another file.\\" The output should reflect the content read from the file as follows: ``` Read content: Hello from the file! ``` - And `write_file.txt` should have the content: ``` Writing to another file. ``` Note: - Ensure that the reading and writing operations are performed concurrently. - Handle threading synchronization if necessary to avoid race conditions.","solution":"import threading def implement_threaded_file_reader(read_filename, write_filename, message): read_content = [] def read_file(): try: with open(read_filename, \'r\') as file: content = file.read() read_content.append(content) print(f\\"Read content: {content}\\") except Exception as e: print(f\\"Error while reading file: {e}\\") def write_file(): try: with open(write_filename, \'w\') as file: file.write(message) except Exception as e: print(f\\"Error while writing to file: {e}\\") read_thread = threading.Thread(target=read_file) write_thread = threading.Thread(target=write_file) read_thread.start() write_thread.start() read_thread.join() write_thread.join() return read_content[0] if read_content else None"},{"question":"You are tasked with creating a simple function to traverse and manipulate a basic data structure. The purpose of this exercise is to help you practice working with lists and loops in Python. Your task is to write a function named `sum_alternate_elements` that computes the sum of elements at even indices and the sum of elements at odd indices in a given list. Specifically, the function should achieve the following: 1. Take one parameter: - `numbers`: a list of integers. 2. The function should implement a loop that: - Iterates through the list. - Adds the value of the element to `even_sum` if its index is even. - Adds the value of the element to `odd_sum` if its index is odd. 3. The function should return a tuple containing two values: - The total sum of elements at even indices (`even_sum`). - The total sum of elements at odd indices (`odd_sum`). ```python def sum_alternate_elements(numbers): even_sum = 0 odd_sum = 0 for i in range(len(numbers)): if i % 2 == 0: even_sum += numbers[i] else: odd_sum += numbers[i] return even_sum, odd_sum ``` **Constraints:** - The `numbers` list can be empty, in which case both sums should be 0. - You can assume that the elements of `numbers` will be valid integers. Example: ```python sum_alternate_elements([1, 2, 3, 4, 5]) ``` This should return `(9, 6)` because the sum of elements at even indices (1, 3, 5) is 9, and the sum of elements at odd indices (2, 4) is 6.","solution":"def sum_alternate_elements(numbers): Computes the sum of elements at even indices and odd indices in the input list. Parameters: numbers (list): A list of integers. Returns: tuple: A tuple containing two integers - the sum of elements at even indices and the sum of elements at odd indices. even_sum = 0 odd_sum = 0 for i in range(len(numbers)): if i % 2 == 0: even_sum += numbers[i] else: odd_sum += numbers[i] return even_sum, odd_sum"},{"question":"** You are required to implement an algorithm to determine the longest contiguous subarray in a given array `arr` of integers, such that the absolute difference between any two elements in the subarray is less than or equal to `k`. The function should return the length of this longest subarray. The function signature is: ```python def longest_subarray_with_diff_at_most_k(arr, k): # Your implementation here ``` The function `longest_subarray_with_diff_at_most_k(arr, k)` should take two arguments: 1. `arr`: a list of integers. 2. `k`: an integer indicating the maximum allowed absolute difference. The function should return a single integer representing the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to `k`. # Example: ```python print(longest_subarray_with_diff_at_most_k([1, 3, 5, 9, 10], 3)) ``` Output: ``` 2 ``` Explanation: The longest subarray with an absolute difference of at most 3 is `[3, 5]` which has a length of 2. # Constraints: - The input list `arr` will have at most 10^5 integers. - Each integer in the list can be between -10^9 and 10^9 inclusive. - The value of `k` will be a non-negative integer within the same range as the list integers. **Note**: 1. If the input array is empty, the function should return 0. 2. The function should operate efficiently to handle large input sizes within reasonable time limits. Implement your solution in Python. **","solution":"def longest_subarray_with_diff_at_most_k(arr, k): if not arr: return 0 left = 0 max_length = 1 for right in range(1, len(arr)): while left < right and max(arr[left:right+1]) - min(arr[left:right+1]) > k: left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of logs, where each log is represented as a dictionary containing various information, including a key `\'duration\'` that represents the time taken in seconds by a particular task. Your task is to write a function `aggregate_task_durations(logs, interval)` that aggregates the task durations by the given interval. The aggregation should sum up the durations of tasks falling within the same interval of the given `interval`. For example, if the `interval` is 100 seconds and the durations range from 1 to 500 seconds, the aggregated durations should be grouped as follows: - Interval 1: Durations from 1 to 100 seconds - Interval 2: Durations from 101 to 200 seconds - Interval 3: Durations from 201 to 300 seconds - Interval 4: Durations from 301 to 400 seconds - Interval 5: Durations from 401 to 500 seconds You are required to use the `math.ceil` function from the `math` library. The `math.ceil` function returns the smallest integer greater than or equal to a given number. Function Description: ```python def aggregate_task_durations(logs, interval): Aggregates the task durations by the given interval :param logs: A list of dictionaries representing logs. Each dictionary contains at least the key \'duration\'. :param interval: The time interval (int) in seconds for aggregating the durations. :return: A dictionary where the keys are the interval numbers and the values are the summed durations. ``` Parameters: - `logs`: A list of dictionaries, where each dictionary represents a log and must contain the key `\'duration\'` with an integer value. - `interval`: An integer representing the time interval in seconds for aggregating the durations. Return: - A dictionary where the keys are the interval numbers (starting from 1) and the values are the summed durations for each interval. Example: ```python logs = [ {\'duration\': 50, \'task_id\': 1}, {\'duration\': 120, \'task_id\': 2}, {\'duration\': 180, \'task_id\': 3}, {\'duration\': 250, \'task_id\': 4}, {\'duration\': 75, \'task_id\': 5}, ] interval = 100 print(aggregate_task_durations(logs, interval)) # Expected Output: {1: 125, 2: 300, 3: 250} ```","solution":"import math def aggregate_task_durations(logs, interval): Aggregates the task durations by the given interval. :param logs: A list of dictionaries representing logs. Each dictionary contains at least the key \'duration\'. :param interval: The time interval (int) in seconds for aggregating the durations. :return: A dictionary where the keys are the interval numbers and the values are the summed durations. aggregation = {} for log in logs: duration = log[\'duration\'] interval_number = math.ceil(duration / interval) if interval_number not in aggregation: aggregation[interval_number] = 0 aggregation[interval_number] += duration return aggregation"},{"question":"Your task is to create a function named `custom_sorted_list` that generates a sorted list of unique numbers from a given list. The function should ensure that the returned list has unique elements and is sorted in ascending order. # Requirements: 1. **Function Name**: The function should be named `custom_sorted_list`. 2. **Parameters**: - The function should take one parameter `num_list`, which is a list of integers. 3. **Return**: The function should return a new list containing the unique elements from `num_list`, sorted in ascending order. # Constraints: - Assume the input list can contain up to 1,000,000 integers. - The input list may have duplicate values. - The function should be able to handle large lists efficiently. # Example: ```python def custom_sorted_list(num_list): # Your code here # Example Usage num_list = [5, 3, 6, 8, 2, 8, 1, 3, 5] result = custom_sorted_list(num_list) print(result) ``` When you run the above code, the output should be: ``` [1, 2, 3, 5, 6, 8] ``` # Note: - Ensure that the function does not modify the original input list. - It is recommended to use built-in Python functionalities for achieving the task.","solution":"def custom_sorted_list(num_list): This function returns a sorted list with unique elements from the input list. return sorted(set(num_list)) # Example Usage: # num_list = [5, 3, 6, 8, 2, 8, 1, 3, 5] # result = custom_sorted_list(num_list) # print(result) # Output: [1, 2, 3, 5, 6, 8]"},{"question":"Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent using a phone keypad mapping. Note that 1 does not map to any letters. The digits map to letters as follows: ``` 2: \\"abc\\" 3: \\"def\\" 4: \\"ghi\\" 5: \\"jkl\\" 6: \\"mno\\" 7: \\"pqrs\\" 8: \\"tuv\\" 9: \\"wxyz\\" ``` The function should output with: list: A list of all possible letter combinations that the number string could represent. You should write self-contained code starting with: ``` def phone_combinations(digits): ```","solution":"def phone_combinations(digits): Return all possible letter combinations that the provided digits string could represent. Parameters: digits (str): A string containing digits from 2 to 9 inclusive. Returns: list: List of all possible letter combinations. if not digits: return [] # Mapping of digit to corresponding letters phone_map = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\'\'.join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"You are tasked to write a function in Python that generates a series of Fibonacci numbers up to a specified limit, stores them in a numpy array, and prints the resulting array in reverse order. You should utilize the `numpy` library for creating and manipulating arrays. Your task is to write a function `fibonacci_reverse(limit)` that takes the following parameter: 1. `limit`: An integer that specifies the maximum terms of the Fibonacci sequence to generate. The function should: - Generate the Fibonacci sequence, ensuring that the sequence has at most `limit` terms. - Store the generated Fibonacci sequence in a numpy array. - Return the numpy array containing the Fibonacci sequence in reverse order. # Function Signature: ```python def fibonacci_reverse(limit: int) -> np.ndarray: pass ``` # Example: ```python limit = 10 result = fibonacci_reverse(limit) print(result) ``` Expected output: ``` [34 21 13 8 5 3 2 1 1 0] ``` # Requirements: Use the following NumPy functions: - `numpy.array()` - `numpy.flip()` - Any other relevant numpy functions for array operations. # Constraints: - The function should handle cases where `limit` is less than or equal to zero by returning an empty array. - Ensure that the Fibonacci sequence starts with 0 and 1.","solution":"import numpy as np def fibonacci_reverse(limit: int) -> np.ndarray: if limit <= 0: return np.array([]) fib_sequence = [0, 1] while len(fib_sequence) < limit: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) if len(fib_sequence) > limit: fib_sequence = fib_sequence[:limit] fib_array = np.array(fib_sequence) reversed_fib_array = np.flip(fib_array) return reversed_fib_array"},{"question":"You are tasked with creating a function that simulates the spread of a simple infectious disease in a closed population. The simulation is based on the following rules: 1. The population is represented as a list of individuals. Each individual is either healthy (represented by \\"H\\") or infected (represented by \\"I\\"). 2. At each step in the simulation, every infected individual has a chance to infect its direct neighbors (one to the left and one to the right). 3. If a healthy individual gets infected by one of its neighbors, it becomes infected in the next time step. 4. The probability of infection from an infected neighbor is given as a parameter. 5. The simulation runs for a specified number of steps or until there are no more healthy individuals. You will create a function named `simulate_infection` with the following parameters: - `population`: A list representing the initial state of the population with \\"H\\" for healthy and \\"I\\" for infected individuals. - `p_infect`: A float representing the probability that a healthy individual gets infected by an infected neighbor (0 <= p_infect <= 1). - `steps`: An integer specifying the number of steps to simulate. The function should return a list of states of the population, one for each time step (including the initial state). # Function Signature ```python def simulate_infection(population, p_infect, steps): # function implementation ``` # Example ```python initial_population = [\\"H\\", \\"I\\", \\"H\\", \\"H\\", \\"I\\", \\"H\\"] result = simulate_infection(initial_population, 0.3, 5) ``` Here, `result` would be a list of lists, where each inner list represents the state of the population at each time step, for example: ``` [ [\\"H\\", \\"I\\", \\"H\\", \\"H\\", \\"I\\", \\"H\\"], [\\"H\\", \\"I\\", \\"I\\", \\"H\\", \\"I\\", \\"H\\"], # After 1st step [\\"H\\", \\"I\\", \\"I\\", \\"I\\", \\"I\\", \\"H\\"], # After 2nd step [\\"H\\", \\"I\\", \\"I\\", \\"I\\", \\"I\\", \\"I\\"], # After 3rd step ... ] ``` # Requirements 1. Use the `random` library to simulate the probability of infection. 2. Ensure that the function correctly simulates the spread of infection for each time step. 3. Return a list of population states for each time step.","solution":"import random def simulate_infection(population, p_infect, steps): Simulates the spread of a simple infectious disease in a closed population. results = [population.copy()] for _ in range(steps): new_population = population.copy() for i in range(len(population)): if population[i] == \\"H\\": if i > 0 and population[i - 1] == \\"I\\" and random.random() < p_infect: new_population[i] = \\"I\\" if i < len(population) - 1 and population[i + 1] == \\"I\\" and random.random() < p_infect: new_population[i] = \\"I\\" population = new_population results.append(population.copy()) return results"},{"question":"Implement a function called `find_exclusive_elements` that takes two lists of integers and returns a list of elements that are exclusive to each list (i.e., elements that are in one list but not the other). The output list should be sorted in ascending order. Your function should have the following signature: ```python def find_exclusive_elements(list1: list, list2: list) -> list: ``` # Constraints: 1. The elements in `list1` and `list2` are all integers ranging from -1000 to 1000. 2. The length of `list1` and `list2` will not exceed 1000. 3. Do not use any library functions for set operations. # Example: ```python print(find_exclusive_elements([1, 2, 3, 4], [3, 4, 5, 6])) ``` Output: ``` [1, 2, 5, 6] ``` # Hints: - Use list comprehension to find elements that are in `list1` but not in `list2`, and vice versa. - Combine and sort the resulting lists before returning. # Objective: By solving this problem, you will gain practice in basic list operations, list comprehensions, and sorting algorithms in Python.","solution":"def find_exclusive_elements(list1: list, list2: list) -> list: Returns a list of elements that are exclusive to either list1 or list2. The result list is sorted in ascending order. exclusive_to_list1 = [elem for elem in list1 if elem not in list2] exclusive_to_list2 = [elem for elem in list2 if elem not in list1] result = exclusive_to_list1 + exclusive_to_list2 result.sort() return result"},{"question":"Create a Python function, `parse_calculations(s)`, that takes a string representing a series of simple mathematical calculations separated by commas and returns a list of results of these calculations. Each calculation in the input string will be in the format `<number><operator><number>`, where `<number>` is any integer and `<operator>` is one of `+`, `-`, `*`, or `/`. You must implement basic error handling to skip and report any invalid calculations (e.g., division by zero or malformed expressions). **Function Signature:** ```python def parse_calculations(s: str) -> list: pass ``` **Example:** ```python >>> parse_calculations(\\"3+2,12/4,5*6,8-3\\") [5, 3.0, 30, 5] >>> parse_calculations(\\"10+5,8/0,4*3,7/2,3%2\\") Invalid calculation: 8/0 Invalid calculation: 3%2 [15, 12, 3.5] ``` # Additional Requirements: - Ensure division results are floating-point numbers. - Handle spaces around numbers and operators gracefully. - Report invalid calculations without terminating the function prematurely. Here\'s a template to get you started: ```python def parse_calculations(s: str) -> list: import re def eval_calculation(calc_str): try: return eval(calc_str) except ZeroDivisionError: print(f\\"Invalid calculation: {calc_str}\\") except Exception: print(f\\"Invalid calculation: {calc_str}\\") return None calculations = re.findall(r\'d+s*[+-*/]s*d+\', s) results = [] for calc in calculations: result = eval_calculation(calc) if result is not None: results.append(result) return results # Example usage: if __name__ == \\"__main__\\": test_string = \\"3+2, 12/4, 5*6, 8-3, invalid, 9/0\\" print(parse_calculations(test_string)) ```","solution":"def parse_calculations(s: str) -> list: import re def eval_calculation(calc_str): try: return eval(calc_str) except ZeroDivisionError: print(f\\"Invalid calculation: {calc_str}\\") except Exception: print(f\\"Invalid calculation: {calc_str}\\") return None calculations = re.findall(r\'d+s*[+-*/]s*d+\', s) results = [] for calc in calculations: result = eval_calculation(calc) if result is not None: results.append(result) return results"},{"question":"You have been given a list of 1-D NumPy arrays, each containing integer elements. Your task is to write a function called `process_integer_arrays` that performs the following operations: 1. Use NumPy\'s `hstack` function to horizontally stack the provided list of 1-D arrays into a single 1-D array. 2. Remove any duplicate elements from the concatenated 1-D array while preserving the order of their first occurrence. 3. Sort only the even numbers present in the array in ascending order, keeping the odd numbers in their original positions. 4. Return the resulting 1-D NumPy array. **Requirements**: Use the `numpy.hstack` function as part of your solution. # Example Given input: ```python arrays = [np.array([4, 5, 6, 7]), np.array([2, 7, 1, 8, 6])] ``` The output should be: ```python array([2, 5, 4, 7, 6, 1, 8]) ``` Explanation: 1. The concatenated array from `hstack` is `[4, 5, 6, 7, 2, 7, 1, 8, 6]`. 2. After removing duplicates, the array becomes `[4, 5, 6, 7, 2, 1, 8]`. 3. The even numbers `[4, 6, 2, 8]` sorted are `[2, 4, 6, 8]`, and replacing them in the original positions gives `[2, 5, 4, 7, 6, 1, 8]`. Note: Preserving the order of first occurrences is key while removing duplicates.","solution":"import numpy as np def process_integer_arrays(arrays): Processes a list of 1-D NumPy arrays by concatenating them, removing duplicates, and sorting even numbers in ascending order while preserving the position of odd numbers. # Step 1: Horizontally stack the provided list of 1-D arrays into a single 1-D array combined_array = np.hstack(arrays) # Step 2: Remove duplicates while preserving the order of their first occurrence _, idx = np.unique(combined_array, return_index=True) unique_array = combined_array[np.sort(idx)] # Step 3: Sort only the even numbers in ascending order, preserving the positions of odd numbers even_numbers = sorted([num for num in unique_array if num % 2 == 0]) even_index = 0 for idx in range(len(unique_array)): if unique_array[idx] % 2 == 0: unique_array[idx] = even_numbers[even_index] even_index += 1 # Step 4: Return the resulting 1-D NumPy array return unique_array"},{"question":"Design a function named `replace_words(paragraph, substitutions)` that takes in a string representing a paragraph and a dictionary of substitutions mapping words to their replacement strings. Your function should return a new paragraph where every word found in the dictionary is replaced with its corresponding value. The function should preserve punctuation and case sensitivity. Here are the steps your function should follow: 1. Split the paragraph into words while keeping punctuation attached to the words. 2. Iterate through each word in the paragraph and check if the lowercase version of the word (excluding punctuation) exists in the substitution dictionary. 3. If the word exists in the dictionary, replace it while preserving the original case and punctuation. 4. Return the modified paragraph as a single string. **Constraints:** - You can assume that the substitutions dictionary will have words in lowercase. - Words are separated by spaces and may include punctuation at the end such as periods, commas, exclamation marks, etc. - The function should be case-insensitive with regards to replacements, but the output should maintain the original casing of each word. **Function Signature:** ```python def replace_words(paragraph, substitutions): pass ``` **Example Usage:** ```python paragraph = \\"Hello, World! This is a test. Welcome to the coding assessment.\\" substitutions = { \'hello\': \'hi\', \'world\': \'earth\', \'test\': \'quiz\', \'welcome\': \'greetings\' } new_paragraph = replace_words(paragraph, substitutions) print(new_paragraph) ``` This should output: `\\"Hi, Earth! This is a quiz. Greetings to the coding assessment.\\"`","solution":"import re def replace_words(paragraph, substitutions): Replace words in the paragraph according to the substitutions dictionary. Arguments: paragraph -- the string representing the paragraph substitutions -- the dictionary with words to replace and their replacements Returns: A new paragraph with words replaced according to the substitutions dictionary. def replace_word(match): word = match.group(0) # Strip punctuation from both ends leading_punc = re.match(r\'^W+\', word) trailing_punc = re.match(r\'W+\', word[::-1]) leading_punc = leading_punc.group(0) if leading_punc else \\"\\" trailing_punc = trailing_punc.group(0)[::-1] if trailing_punc else \\"\\" core_word = word[len(leading_punc): len(word) - len(trailing_punc)] lower_core_word = core_word.lower() if lower_core_word in substitutions: replacement = substitutions[lower_core_word] # Preserve original casing if core_word.istitle(): replacement = replacement.capitalize() elif core_word.isupper(): replacement = replacement.upper() replaced_word = f\\"{leading_punc}{replacement}{trailing_punc}\\" return replaced_word return word regex = re.compile(r\'w+|[^ws]\', re.UNICODE) result = regex.sub(replace_word, paragraph) return result"},{"question":"You are tasked with writing a function named `calculate_class_availability` using the Pandas library in Python. Your goal is to determine the availability of students for various classes based on survey data related to their free time. This function will be critical for optimizing class schedules. The function should accept the following parameters: - `class_times`: A DataFrame containing the potential class times with columns \'ClassName\' and \'TimeSlot\'. - `student_availability`: A DataFrame containing student availability with columns \'StudentID\', \'AvailableDays\', and \'AvailableTimeSlots\'. \'AvailableDays\' is a comma-separated string of days the student is available (e.g., \'monday,tuesday\'), and \'AvailableTimeSlots\' is a comma-separated string of times the student is available (e.g., \'09:00-10:00,14:00-15:00\'). Your task is to implement the function `calculate_class_availability(class_times, student_availability)` that performs the following operations: 1. Parse the \'AvailableDays\' and \'AvailableTimeSlots\' columns of the `student_availability` DataFrame into lists. 2. For each class in `class_times`, calculate the number of students who are available for both the day and timeslot specified by the class. 3. Create a new DataFrame with columns \'ClassName\', \'TimeSlot\', and \'NumberOfAvailableStudents\' that summarizes the number of students available for each class and timeslot. 4. Return the new DataFrame sorted by \'ClassName\' and \'TimeSlot\'. Considerations: - Assume time slots are in the format \'HH:MM-HH:MM\'. - Ensure robustness in handling different time formats and delimiters. - Optimize for performance given potentially large datasets. You must use Pandas effectively to manipulate and analyze the data as described.","solution":"import pandas as pd def calculate_class_availability(class_times, student_availability): # Step 1: Parse the \'AvailableDays\' and \'AvailableTimeSlots\' columns into lists student_availability[\'AvailableDays\'] = student_availability[\'AvailableDays\'].str.split(\',\') student_availability[\'AvailableTimeSlots\'] = student_availability[\'AvailableTimeSlots\'].str.split(\',\') # Prepare list to hold results results = [] # Step 2: Calculate the number of students available for each class and timeslot for _, class_time in class_times.iterrows(): class_name = class_time[\'ClassName\'] time_slot = class_time[\'TimeSlot\'] available_students = 0 for _, student in student_availability.iterrows(): if \'monday\' in student[\'AvailableDays\'] and time_slot in student[\'AvailableTimeSlots\']: # Simplified check for demo purposes available_students += 1 results.append({\'ClassName\': class_name, \'TimeSlot\': time_slot, \'NumberOfAvailableStudents\': available_students}) # Step 3: Create the resulting DataFrame result_df = pd.DataFrame(results) # Step 4: Return the sorted DataFrame return result_df.sort_values(by=[\'ClassName\', \'TimeSlot\']).reset_index(drop=True)"},{"question":"You have been given a task to create a function called `fibonacciMatrixMultiplication` that calculates the Nth Fibonacci number using matrix exponentiation. This method is efficient with a time complexity of O(log N). The Fibonacci sequence is defined as follows: ``` F(0) = 0 F(1) = 1 F(N) = F(N-1) + F(N-2) for N ≥ 2 ``` Matrix exponentiation can represent the Fibonacci calculation as: ``` | F(n) | = [ [1, 1], [1, 0] ]^(n-1) * [ [1], [0] ] | F(n-1) | ``` To complete this task: 1. Implement the function `fibonacciMatrixMultiplication(n)` that accepts a single argument: - `n`: a non-negative integer representing the position in the Fibonacci sequence. Inside the `fibonacciMatrixMultiplication` function, you should: 1. Create a helper function `matrixMultiply(A, B)` to multiply two 2x2 matrices. 2. Create a helper function `matrixPower(matrix, n)` that uses exponentiation by squaring to raise the matrix to the power `n`. 3. Utilize these helper functions to compute the power of the matrix `[[1, 1], [1, 0]]` to `n-1`. 4. Return the top-left element of the resulting matrix, which represents the Nth Fibonacci number. Here is an example input and output: - Given `n = 10`, the function should return `55` (the 10th Fibonacci number). Your task is to write the `fibonacciMatrixMultiplication` function that follows this logic. ```python def matrixMultiply(A, B): return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrixPower(matrix, n): result = [[1, 0], [0, 1]] while n > 0: if n % 2 == 1: result = matrixMultiply(result, matrix) matrix = matrixMultiply(matrix, matrix) n //= 2 return result def fibonacciMatrixMultiplication(n): if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result = matrixPower(F, n - 1) return result[0][0] # Example usage: print(fibonacciMatrixMultiplication(10)) # Output: 55 ```","solution":"def matrixMultiply(A, B): Multiplies two 2x2 matrices A and B and returns the result. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrixPower(matrix, n): Raises a 2x2 matrix to the power n and returns the result. result = [[1, 0], [0, 1]] # Identity matrix while n > 0: if n % 2 == 1: result = matrixMultiply(result, matrix) matrix = matrixMultiply(matrix, matrix) n //= 2 return result def fibonacciMatrixMultiplication(n): Returns the Nth Fibonacci number using matrix exponentiation. if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result = matrixPower(F, n - 1) return result[0][0] # Example usage: # print(fibonacciMatrixMultiplication(10)) # Output: 55"},{"question":"You are required to write a Python function named `generate_job_reports` that simulates the generation of job completion reports and handles them using concurrent file writing. This function should use multi-threading to manage the job reports concurrently. To achieve this: 1. The function should accept a list of job names (strings). 2. For each job name, it should simulate job completion by sleeping for a random period between 2 and 4 seconds. 3. After simulating the job completion, it should write a report to an individual file named after the job, indicating the thread name and job name in a predefined format. 4. The function should return a list of all file names created. Use the `threading.current_thread` function from the `threading` module to retrieve the current thread’s name. This function can be found at the [Python Library Documentation: current_thread in threading](https://docs.python.org/3/library/threading.html#threading.current_thread). Here is a template for the function you need to implement: ```python import threading import time import random def job_processor(name): time.sleep(random.randint(2, 4)) report = f\\"线程名:{threading.current_thread().name}; 工作：{name}\\" with open(f\\"{name}_report.txt\\", \\"w\\") as f: f.write(report) return f\\"{name}_report.txt\\" def generate_job_reports(job_names): # Your implementation here pass ``` # Requirements: - Use the `threading.current_thread` function from the `threading` module to obtain and log the current thread’s name. - Utilize multi-threading to handle the job reports concurrently. # Example usage: ```python job_names = [\\"Job1\\", \\"Job2\\", \\"Job3\\"] report_files = generate_job_reports(job_names) for file in report_files: with open(file, \\"r\\") as f: print(f.read()) ``` # Expected output: The output will vary due to the random sleep duration, but it should look similar to: ``` 线程名:Thread-1; 工作：Job1 线程名:Thread-2; 工作：Job2 线程名:Thread-3; 工作：Job3 ``` # Note: The actual thread names will differ each time you run the program. The individual report files will be created for each job name provided.","solution":"import threading import time import random def job_processor(name): time.sleep(random.randint(2, 4)) report = f\\"线程名:{threading.current_thread().name}; 工作：{name}\\" filename = f\\"{name}_report.txt\\" with open(filename, \\"w\\") as f: f.write(report) return filename def generate_job_reports(job_names): threads = [] results = [] def worker(name): result = job_processor(name) results.append(result) for name in job_names: thread = threading.Thread(target=worker, args=(name,)) threads.append(thread) thread.start() for thread in threads: thread.join() return results"},{"question":"** Write a function that takes a string representing an arithmetic expression and returns the result of the expression. The arithmetic expression can include addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). The function should handle both integer and floating-point numbers, and respect the order of operations (PEMDAS/BODMAS rules). Implement the following function: ```python def evaluate_expression(expression): This function takes an arithmetic expression as a string and returns the calculated result. The function correctly handles the order of operations and parenthesis. Parameters: expression (str): An arithmetic expression containing integers, floating-point numbers, and the operators +, -, *, /. Returns: float: The result of evaluating the arithmetic expression. ``` - `expression`: a string containing a valid arithmetic expression. You are not allowed to use the `eval` function in Python or any other direct evaluation methods provided by third-party libraries. Implement the parsing and computation of the expression manually to ensure understanding of the order of operations and the mechanics behind expression evaluation. **Example Usage:** ```python # Sample expressions expr1 = \\"3 + 5 * 2 - 9 / 3\\" expr2 = \\"(2 + 3) * (5 - 2)\\" expr3 = \\"7 + 3 * (10 / (12 / (3 + 1) - 1))\\" # Evaluate the expressions print(evaluate_expression(expr1)) # Output: 10.0 print(evaluate_expression(expr2)) # Output: 15.0 print(evaluate_expression(expr3)) # Output: 22.0 ``` The function should correctly parse and evaluate the given arithmetic expressions, applying the correct order of operations.","solution":"def evaluate_expression(expression): This function takes an arithmetic expression as a string and returns the calculated result. The function correctly handles the order of operations and parenthesis. Parameters: expression (str): An arithmetic expression containing integers, floating-point numbers, and the operators +, -, *, /. Returns: float: The result of evaluating the arithmetic expression. def parse_expression(expr): Parses the input expression into a list of tokens. tokens = [] num = \'\' i = 0 while i < len(expr): if expr[i].isdigit() or expr[i] == \'.\': num += expr[i] else: if num: tokens.append(float(num)) num = \'\' if expr[i] in \\"+-*/()\\": tokens.append(expr[i]) i += 1 if num: tokens.append(float(num)) return tokens def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def evaluate(tokens): values = [] operators = [] i = 0 while i < len(tokens): if isinstance(tokens[i], float): values.append(tokens[i]) elif tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i] == \')\': while operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(tokens[i])): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[-1] tokens = parse_expression(expression) result = evaluate(tokens) return result"},{"question":"In this problem, you are tasked to create a function named `find_highest_average(filename)`, which processes student scores stored in a CSV file and determines which student has the highest average score. The CSV file contains records of students\' names and their corresponding list of scores separated by commas. Your task is to: 1. Load the data from the specified CSV file. 2. Parse the data to extract students\' names and their scores. 3. Calculate the average score for each student. 4. Identify and print the student with the highest average score along with their average. # Requirements: - Utilize the `csv` module to handle the CSV file operations. - Ensure proper handling of file operations to avoid errors or data loss. - Implement proper error-checking to handle cases such as missing or malformed data. # Example Usage: Assume the `students_scores.csv` file contains the following data: ``` John Doe, 85, 90, 78 Jane Smith, 88, 92, 95 Adam Johnson, 70, 75, 80 ``` Running `find_highest_average(\'students_scores.csv\')` should output: ``` Student with the highest average score: Jane Smith Average score: 91.67 ``` **Note:** Ensure that your function handles varying numbers of scores per student and different numbers of students in the file.","solution":"import csv def find_highest_average(filename): highest_average = 0 top_student = \\"\\" with open(filename, mode=\'r\') as file: csv_reader = csv.reader(file) for row in csv_reader: if len(row) < 2: continue # Skip rows that don\'t have at least one score try: student_name = row[0] scores = list(map(int, row[1:])) average_score = sum(scores) / len(scores) if average_score > highest_average: highest_average = average_score top_student = student_name except ValueError: continue # Skip rows with invalid scores if top_student: print(f\\"Student with the highest average score: {top_student}\\") print(f\\"Average score: {highest_average:.2f}\\") else: print(\\"No valid data found.\\") # Example: Uncomment to run the example # find_highest_average(\'students_scores.csv\')"},{"question":"Design a Python function called `aggregate_statistics(data_list)` that calculates and returns a list containing statistics for a given list of numerical data. The statistics to calculate are: 1. The mean of the data. 2. The median of the data. 3. The mode of the data. 4. The standard deviation of the data. 5. The variance of the data. Your function should handle the following edge cases: - If `data_list` is empty, return an empty list. - If there are multiple values with the same highest frequency for the mode, return the smallest one. You may use the `statistics` module in Python to help with calculations where appropriate. Here is the specific functionality you need to implement in `aggregate_statistics`: ```python import statistics def aggregate_statistics(data_list): pass ``` Use functions from the `statistics` module such as `statistics.mean`, `statistics.median`, `statistics.stdev`, and `statistics.variance` where appropriate. Calculate the mode manually if there are cases of multiple modes.","solution":"import statistics from collections import Counter def aggregate_statistics(data_list): if not data_list: return [] mean_value = statistics.mean(data_list) median_value = statistics.median(data_list) counter = Counter(data_list) max_freq = max(counter.values()) mode_candidates = [k for k, v in counter.items() if v == max_freq] mode_value = min(mode_candidates) standard_deviation = statistics.stdev(data_list) if len(data_list) > 1 else 0 variance_value = statistics.variance(data_list) if len(data_list) > 1 else 0 return [mean_value, median_value, mode_value, standard_deviation, variance_value]"},{"question":"In this exercise, you will write a function that simulates a simple text-based ticket booking system for a movie theater. The system needs to keep track of available and booked seats in a single theater room with a grid layout. Your task is to implement a function called `book_seat` that receives three parameters: 1. `seats`: A 2D list representing seats in the theater, where `1` indicates a booked seat and `0` indicates an available seat. 2. `row`: An integer indicating the row number of the seat to be booked (0-indexed). 3. `col`: An integer indicating the column number of the seat to be booked (0-indexed). The function will: 1. Check if the seat at the given `row` and `col` is available. 2. If the seat is available (i.e., the value is `0`), mark it as booked by setting the value to `1` and return `True`. 3. If the seat is already booked (i.e., the value is `1`), return `False`. 4. If the `row` or `col` are out of bounds of the `seats` list, return `False`. The function signature should be: ```python def book_seat(seats, row, col): ``` Here is a detailed breakdown to help you get started: - The input `seats` is a list of lists, where each sublist represents a row of seats. - Check if the provided `row` and `col` are within the valid range of the `seats` list. - Modify the `seats` list in place if the seat booking is successful. - Ensure the function returns the correct boolean value based on the booking status. Examples: ```python seats = [ [0, 0, 1], [1, 0, 0], [0, 1, 0] ] # Booking an available seat print(book_seat(seats, 0, 1)) # Output: True print(seats) # Output: [[0, 1, 1], [1, 0, 0], [0, 1, 0]] # Trying to book a seat that\'s already booked print(book_seat(seats, 0, 2)) # Output: False # Booking another available seat print(book_seat(seats, 2, 2)) # Output: True print(seats) # Output: [[0, 1, 1], [1, 0, 0], [0, 1, 1]] ```","solution":"def book_seat(seats, row, col): Tries to book the seat at the specified row and column in the seating arrangement. Parameters: seats (list of list of int): 2D list representing seats in the theater. row (int): The row number of the seat to be booked. col (int): The column number of the seat to be booked. Returns: bool: True if the seat was successfully booked, False otherwise. # Check if the row and col are within the bounds if row < 0 or row >= len(seats) or col < 0 or col >= len(seats[0]): return False # Check if the seat is already booked if seats[row][col] == 1: return False # Book the seat seats[row][col] = 1 return True"},{"question":"You need to write a Python function called `generate_fibonacci` that generates the first `n` Fibonacci numbers and saves them into a SQLite database table named `fibonacci_sequence`. The function should: 1. Connect to a database file named `sequences.db`. 2. Create the table `fibonacci_sequence` with two columns: `id` (an integer primary key) and `value` (an integer representing the Fibonacci number). 3. Insert the first `n` Fibonacci numbers into the table. 4. Handle any potential exceptions that may occur (e.g., database connection issues). Use the sqlite3 module for database operations. Here\'s a template to help you get started: ```python import sqlite3 def generate_fibonacci(n): # Your code here pass # Call the function for testing generate_fibonacci(10) ```","solution":"import sqlite3 def generate_fibonacci(n): Generates the first n Fibonacci numbers and saves them into a SQLite database table. # Function to generate the first n Fibonacci numbers def fibonacci_numbers(n): fibs = [] a, b = 0, 1 for _ in range(n): fibs.append(a) a, b = b, a + b return fibs # Connect to the SQLite database (or create it if it doesn\'t exist) try: conn = sqlite3.connect(\'sequences.db\') cursor = conn.cursor() # Create the table if it doesn\'t exist cursor.execute(\'\'\' CREATE TABLE IF NOT EXISTS fibonacci_sequence ( id INTEGER PRIMARY KEY, value INTEGER ) \'\'\') # Clear the table before inserting new values cursor.execute(\'DELETE FROM fibonacci_sequence\') # Generate the Fibonacci sequence and insert it into the table fibs = fibonacci_numbers(n) for i, value in enumerate(fibs): cursor.execute(\'INSERT INTO fibonacci_sequence (id, value) VALUES (?, ?)\', (i+1, value)) # Commit the transaction conn.commit() except sqlite3.Error as e: print(f\\"An error occurred: {e}\\") finally: # Close the connection if conn: conn.close() # Call the function for testing generate_fibonacci(10)"},{"question":"You are required to write a Python function to create a bar chart using the `matplotlib` library. The function should be named `create_bar_chart` and must accept three parameters: - `categories` (a list of strings representing the names of the categories) - `values` (a list of integers or floats representing the values corresponding to each category) - `title` (a string representing the title of the bar chart) The function should generate a bar chart with the following specifications: 1. Set the title of the bar chart using the provided `title` parameter. 2. Set the labels of the x-axis and y-axis to \\"Categories\\" and \\"Values\\" respectively. 3. Rotate the x-axis labels by 45 degrees for better readability. 4. Include a grid on the y-axis. 5. Set a color of your choice for the bars. 6. Optionally, display the value of each bar above it for easier visualization. Your task primarily involves understanding and utilizing the `matplotlib.pyplot.bar` function and other basic plotting functions in `matplotlib`. Ensure that the function signature is as follows: ```python def create_bar_chart(categories, values, title): ``` Example: ```python categories = [\'A\', \'B\', \'C\', \'D\'] values = [10, 20, 15, 7] title = \'Sample Bar Chart\' create_bar_chart(categories, values, title) # This should create and display a bar chart with the specified configurations. ```","solution":"import matplotlib.pyplot as plt def create_bar_chart(categories, values, title): Creates a bar chart with the specified categories, values, and title. Parameters: - categories: list of strings representing the names of the categories. - values: list of integers or floats representing the values corresponding to each category. - title: string representing the title of the bar chart. plt.figure(figsize=(10, 6)) bars = plt.bar(categories, values, color=\'skyblue\') plt.title(title) plt.xlabel(\'Categories\') plt.ylabel(\'Values\') plt.xticks(rotation=45) plt.grid(axis=\'y\') # Display the value of each bar above it for bar in bars: yval = bar.get_height() plt.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f\'{yval:.2f}\', ha=\'center\', va=\'bottom\') plt.tight_layout() plt.show()"},{"question":"You are given a list of integers. Write a function to find and return a list containing all the unique prime factors of these integers. The function should output the prime factors in ascending order. The function should be implemented as: ``` def find_unique_prime_factors(numbers: list) -> list: ``` # Example: ``` Input: [12, 15, 21] Output: [2, 3, 5, 7] ```","solution":"def find_unique_prime_factors(numbers: list) -> list: Returns a sorted list of all unique prime factors of the given list of integers. def prime_factors(n): i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors unique_factors = set() for number in numbers: unique_factors.update(prime_factors(number)) return sorted(unique_factors)"},{"question":"You are given an array of integers where every element appears three times except for one, which appears exactly once. Your task is to create a function `findUniqueElement` that identifies and returns the element that appears only once. Use bitwise operations to achieve an optimal solution. Bitwise operations can be a powerful tool for problems involving counting and sets of elements, enabling efficient solutions without additional memory overhead. **Function Signature:** `def findUniqueElement(array):` **Input:** - `array`: list of integers - An array of integers where every element appears three times except for one. **Output:** - The function should return an integer, the element that appears only once. **Example Input:** ```python array = [2, 2, 3, 2, 4, 4, 4, 5, 3, 3] print(findUniqueElement(array)) ``` **Example Output:** ```python 5 ``` **Explanation:** In the provided array, the number `5` is the only element that does not appear three times, so the function should return `5`. All other numbers either appear exactly three times. The solution should focus on using bitwise operations to achieve an O(N) time complexity with O(1) additional space.","solution":"def findUniqueElement(array): # Initialize two variables which will hold the bitwise representation ones = 0 twos = 0 for num in array: # Update \'twos\' with those bits which are newly added to \'ones\' twos |= ones & num # Update \'ones\' with the current number ones ^= num # Determine the common bits between ones and twos common_bit_mask = ~(ones & twos) # Remove common bits from \'ones\' and \'twos\' ones &= common_bit_mask twos &= common_bit_mask return ones"},{"question":"Write a function named `unique_elements` that takes a list of integers and returns a new list with duplicate elements removed, while preserving the order of the first occurrence of each element. The function should not use any external library for this task. Specifically, the `unique_elements` function should: 1. Accept a list of integers as input. 2. Iterate through the input list and keep track of the elements that have already been encountered. 3. Ensure that only the first occurrence of each element is added to the new list. 4. Return the new list containing unique elements in the order they first appeared. Here\'s an example usage of the function: ```python def unique_elements(input_list): # Your implementation here example_list = [4, 5, 4, 6, 5, 7] result = unique_elements(example_list) print(result) # Expected output: [4, 5, 6, 7] ```","solution":"def unique_elements(input_list): Returns a new list with duplicate elements removed, preserving the order of the first occurrence of each element. Parameters: input_list (list): The list of integers from which duplicates need to be removed. Returns: list: A list with unique elements in the order of their first appearance. seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"You are asked to implement a function to convert a binary tree to its corresponding doubly linked list using an in-order traversal of the tree. Each node in the doubly linked list should contain the same value as the corresponding node in the binary tree. **Function Signature:** ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class DoublyListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def binary_tree_to_doubly_linked_list(root: TreeNode) -> DoublyListNode: Given a binary tree, convert it to a doubly linked list using in-order traversal. ``` **Input:** - `root` (TreeNode): The root node of the binary tree. **Output:** - `DoublyListNode`: The head of the doubly linked list. **Steps to follow:** 1. Perform an in-order traversal of the binary tree to access the nodes in ascending order. 2. Create the doubly linked list nodes, connecting them in the in-order sequence obtained. **Example:** ```python # Create the binary tree root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(5) root.left.left = TreeNode(1) root.left.right = TreeNode(3) # Convert to doubly linked list dll_head = binary_tree_to_doubly_linked_list(root) # Print the doubly linked list current = dll_head while current: print(current.val, end=\\" \\") current = current.next # Output: 1 2 3 4 5 ``` Note: - The nodes in the doubly linked list should maintain both `prev` and `next` pointers. - Ensure to handle edge cases such as an empty tree where the root is `None`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class DoublyListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def binary_tree_to_doubly_linked_list(root: TreeNode) -> DoublyListNode: Given a binary tree, convert it to a doubly linked list using in-order traversal. if not root: return None def in_order_traversal(node): if node: yield from in_order_traversal(node.left) yield node yield from in_order_traversal(node.right) head = None prev = None for tree_node in in_order_traversal(root): dll_node = DoublyListNode(tree_node.val) if prev: prev.next = dll_node dll_node.prev = prev else: head = dll_node prev = dll_node return head"},{"question":"In this problem, you need to create a Python function named `city_temperature_plot` that takes data on city temperatures and generates a line plot using the `matplotlib` library. The function will take two arguments: 1. `cities`: A list of strings, where each string represents the name of a city. 2. `temperatures`: A list of lists, where each sublist contains temperature values recorded at different times of the day for the corresponding city in the `cities` list. **Objective**: Implement the `city_temperature_plot` function to visualize the temperature changes of multiple cities over time. **Function Signature:** ```python def city_temperature_plot(cities: list, temperatures: list) -> None: # your code here ``` # Requirements To visualize the temperature changes of cities, the function should: 1. Use the `matplotlib.pyplot.plot` function to create a line plot for each city where: - The x-axis represents the time of day (from 0 to len(temperatures[0])-1). - The y-axis represents the temperature values. 2. Assign a distinct color for each city\'s plot. 3. Include a legend that maps each city to its corresponding line color. 4. Use the `matplotlib.pyplot.title` function to set the title of the plot to \\"City Temperature Over Time\\". 5. Use the `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` functions to label the x-axis as \\"Time of Day\\" and the y-axis as \\"Temperature\\". 6. Use the `matplotlib.pyplot.show` function to display the plot. # Example Consider the following data: ```python cities = [\\"New York\\", \\"Los Angeles\\", \\"Chicago\\"] temperatures = [ [68, 70, 75, 70, 65], # New York temperatures [75, 77, 80, 76, 74], # Los Angeles temperatures [60, 62, 65, 63, 61] # Chicago temperatures ] ``` The `city_temperature_plot` function should generate a line plot where each city\'s temperature data is plotted with a distinct color and labeled appropriately. # Constraints - The length of `cities` and `temperatures` will always be equal. - Each sublist in `temperatures` will have the same length. - The values in `temperatures` will be integers representing temperatures. # Hints - You can import the `matplotlib.pyplot` module as `plt`. - You can use the `plt.legend` function to add the legend to the plot. - Ensure that the plot is displayed by calling `plt.show()` at the end of your function.","solution":"import matplotlib.pyplot as plt def city_temperature_plot(cities: list, temperatures: list) -> None: Plots the temperature changes of multiple cities over time. Args: cities (list): A list of city names. temperatures (list): A list of lists, where each sublist contains temperature values for each city. for i, city in enumerate(cities): plt.plot(temperatures[i], label=city) plt.title(\'City Temperature Over Time\') plt.xlabel(\'Time of Day\') plt.ylabel(\'Temperature\') plt.legend() plt.show()"},{"question":"You are given a list of non-negative integers representing the heights of columns where the width of each column is 1. Determine the maximum amount of water that can be trapped after a downpour between these columns. Implement a function called `max_water_trapped` that accomplishes the following: 1. Takes a list of integers `heights` that represents the heights of the columns. 2. Utilizes a two-pointer approach to find the maximum amount of water that can be trapped: - Initialize two pointers, one at the beginning (`left`) and one at the end (`right`) of the list. - Initialize two variables to keep track of the maximum height seen so far from the left (`left_max`) and from the right (`right_max`). - Move the pointers towards each other, updating the maximum heights and calculating the trapped water for each column. 3. Returns an integer representing the total amount of water trapped. # Example Usage: ```python print(max_water_trapped([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])) # Output: 6 print(max_water_trapped([4, 2, 0, 3, 2, 5])) # Output: 9 ```","solution":"def max_water_trapped(heights): Calculate the maximum amount of water that can be trapped between columns of given heights. Parameters: heights (list of int): A list of non-negative integers representing the heights of columns. Returns: int: The total amount of water trapped. if len(heights) == 0: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: if heights[left] >= left_max: left_max = heights[left] else: water_trapped += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: water_trapped += right_max - heights[right] right -= 1 return water_trapped"},{"question":"Write a Python function `nested_dict_update` that updates the values of a nested dictionary with another dictionary. The function should take two dictionaries as input: the target dictionary, which needs to be updated, and the updates dictionary, which contains the new key-value pairs. If the values in the dictionaries are themselves dictionaries, the function should update them recursively, preserving existing deep keys. Function Signature ```python from typing import Dict, Any def nested_dict_update(target: Dict[Any, Any], updates: Dict[Any, Any]) -> None: pass ``` Parameters - `target (Dict[Any, Any])`: The dictionary to be updated. - `updates (Dict[Any, Any])`: The dictionary containing updates. Returns - `None`: This function should modify the `target` dictionary in place. Example ```python # Target dictionary target_dict = { \'a\': 1, \'b\': {\'c\': 3, \'d\': 4}, \'e\': 5 } # Updates dictionary updates_dict = { \'b\': {\'c\': 30, \'f\': 6}, \'g\': 7 } # Using the nested_dict_update function nested_dict_update(target_dict, updates_dict) print(target_dict) # Output: {\'a\': 1, \'b\': {\'c\': 30, \'d\': 4, \'f\': 6}, \'e\': 5, \'g\': 7} ``` Implement this `nested_dict_update` function in Python ensuring that updates are applied recursively where necessary.","solution":"from typing import Dict, Any def nested_dict_update(target: Dict[Any, Any], updates: Dict[Any, Any]) -> None: Updates the values of a nested dictionary with another dictionary recursively. Parameters: target (Dict[Any, Any]): The dictionary to be updated. updates (Dict[Any, Any]): The dictionary containing updates. Returns: None for key, value in updates.items(): if key in target and isinstance(target[key], dict) and isinstance(value, dict): nested_dict_update(target[key], value) else: target[key] = value"},{"question":"In this problem, you are required to process a list of student records and identify the students whose scores in a particular subject exceed a given threshold. The list of student records contains information such as the student\'s name, ID, and their scores in various subjects. Your task is to implement a function that filters the records based on the given criteria. You need to implement the function `filter_students_by_score(students, subject, threshold)`. This function should take three arguments: 1. `students`: A list of dictionaries, where each dictionary represents a student record with their name, ID, and scores in various subjects. 2. `subject`: A string indicating the subject for which the scores need to be examined. 3. `threshold`: A numeric value representing the score threshold. The function should return a list of dictionaries containing the records of students who have scores exceeding the given threshold in the specified subject. Here is the template for your function: ```python def filter_students_by_score(students, subject, threshold): Filters student records based on the score threshold for a specific subject. Parameters: students (list): A list of dictionaries containing student records. subject (str): The subject for which we are checking the scores. threshold (float): The score threshold. Returns: list: A list of dictionaries containing the filtered student records. # Your code goes here # Example Usage: # students = [ # {\'Name\': \'Alice\', \'ID\': 1, \'Math\': 82, \'English\': 74}, # {\'Name\': \'Bob\', \'ID\': 2, \'Math\': 90, \'English\': 85}, # {\'Name\': \'Charlie\', \'ID\': 3, \'Math\': 78, \'English\': 80} # ] # subject = \'Math\' # threshold = 80 # filtered_students = filter_students_by_score(students, subject, threshold) # print(filtered_students) # Output: [{\'Name\': \'Alice\', \'ID\': 1, \'Math\': 82, \'English\': 74}, {\'Name\': \'Bob\', \'ID\': 2, \'Math\': 90, \'English\': 85}] ```","solution":"def filter_students_by_score(students, subject, threshold): Filters student records based on the score threshold for a specific subject. Parameters: students (list): A list of dictionaries containing student records. subject (str): The subject for which we are checking the scores. threshold (float): The score threshold. Returns: list: A list of dictionaries containing the filtered student records. return [student for student in students if student.get(subject, 0) > threshold] # Example Usage: # students = [ # {\'Name\': \'Alice\', \'ID\': 1, \'Math\': 82, \'English\': 74}, # {\'Name\': \'Bob\', \'ID\': 2, \'Math\': 90, \'English\': 85}, # {\'Name\': \'Charlie\', \'ID\': 3, \'Math\': 78, \'English\': 80} # ] # subject = \'Math\' # threshold = 80 # filtered_students = filter_students_by_score(students, subject, threshold) # print(filtered_students) # Output: [{\'Name\': \'Alice\', \'ID\': 1, \'Math\': 82, \'English\': 74}, {\'Name\': \'Bob\', \'ID\': 2, \'Math\': 90, \'English\': 85}]"},{"question":"Generate an array of 1000 random integers between 1 and 500. Then, create a function that will return a dictionary containing the five most frequent elements and their respective counts. If there\'s a tie in the frequencies, the elements should be sorted in ascending order. Implement this with an efficient algorithm, ensuring the function completes in reasonable time for large inputs. The function should output: ``` dict: A dictionary with the five most frequent elements as keys and their counts as values. You should write self-contained code starting with: import numpy as np from collections import Counter def task_func(seed=42): ```","solution":"import numpy as np from collections import Counter def task_func(seed=42): Generate an array of 1000 random integers between 1 and 500, then return a dictionary containing the five most frequent elements and their respective counts. If there\'s a tie in the frequencies, the elements are sorted in ascending order. np.random.seed(seed) random_array = np.random.randint(1, 501, size=1000) counter = Counter(random_array) # Get the five most common elements and their counts most_common_five = counter.most_common(5) # Convert list of tuples into dictionary result = {elem: count for elem, count in most_common_five} return result"},{"question":"In data structures, searching for an element in a collection is a fundamental operation and variations in search algorithms offer different performance benefits. The **Binary Search Tree (BST)** is a data structure that maintains sorted order for dynamic sets. Your task is to implement a function `find_kth_smallest` to find the k-th smallest element in a given Binary Search Tree. The function should traverse the BST in an efficient manner to locate the desired element. You will be provided: 1. `root`: The root node of a Binary Search Tree. 2. `k`: An integer representing the position (1-indexed) of the smallest element to find. Each `TreeNode` in the BST is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` You need to implement the `find_kth_smallest` function as described below: ```python def find_kth_smallest(root, k): Finds the k-th smallest element in the given BST. :param root: TreeNode, root of the Binary Search Tree. :param k: int, the position of the smallest element to find (1-indexed). :return: int, the value of the k-th smallest element in the BST. pass ``` # Steps to Follow: 1. Implement an in-order traversal of the BST to visit nodes in ascending order. 2. Keep track of the count of visited nodes. 3. Return the value of the k-th visited node. # Example: Consider the following Binary Search Tree: ``` 5 / 3 8 / 2 4 9 / 1 ``` To find the 3rd smallest element: ```python # Constructing the tree root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(8) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.left.left.left = TreeNode(1) root.right.right = TreeNode(9) # Call the function result = find_kth_smallest(root, 3) # result should be 3 ``` # Constraints: - The number of nodes in the BST will be in the range `[1, 10^4]`. - Values of the nodes in the BST are unique. - `1 <= k <= number of nodes in the BST`. <Comment: The provided problem gives a clear understanding of the input and output, and outlines the steps needed to implement the solution. It requires understanding of BST properties and traversal techniques, ensuring reasonable complexity similar to the existing set.>","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_kth_smallest(root, k): Finds the k-th smallest element in the given BST. :param root: TreeNode, root of the Binary Search Tree. :param k: int, the position of the smallest element to find (1-indexed). :return: int, the value of the k-th smallest element in the BST. def inorder_traverse(node): if not node: return [] return inorder_traverse(node.left) + [node.val] + inorder_traverse(node.right) return inorder_traverse(root)[k-1]"},{"question":"You are tasked with creating a function called `sort_and_find_median` using the `pandas` library. This function will sort a DataFrame based on a given column and then find the median of another specified numeric column for each unique value in the sorted column. Your function should receive three parameters: 1. `df`: A pandas DataFrame with multiple columns. 2. `sort_by`: The column name on which the DataFrame should be sorted. 3. `median_col`: The column name for which the median value needs to be calculated for each unique value in `sort_by` column. Your function should perform the following steps: 1. Sort the `df` based on the `sort_by` column. 2. Group the DataFrame by unique values in the `sort_by` column. 3. Calculate the median of the `median_col` for each group. 4. Return a new DataFrame containing the unique values from the `sort_by` column and their corresponding median values from the `median_col` column. Here is a summary of the function requirements: - Function Name: `sort_and_find_median` - Input: - `df` (pandas DataFrame) - `sort_by` (string) - `median_col` (string) - Output: pandas DataFrame with two columns: `sort_by` and `median_col` # Example Usage ```python import pandas as pd data = { \\"Category\\": [\\"A\\", \\"B\\", \\"A\\", \\"B\\", \\"B\\", \\"C\\", \\"C\\"], \\"Values\\": [10, 20, 15, 25, 30, 35, 40] } df = pd.DataFrame(data) result = sort_and_find_median(df, \\"Category\\", \\"Values\\") print(result) ``` # Expected Output ``` Category Values 0 A 12.5 1 B 25.0 2 C 37.5 ``` The resulting DataFrame should show the median of \\"Values\\" for each unique \\"Category\\".","solution":"import pandas as pd def sort_and_find_median(df, sort_by, median_col): Sorts the dataframe by `sort_by` column and calculates the median of `median_col` for each unique value in the `sort_by` column. Parameters: - df: pandas DataFrame - sort_by: str, the column name to sort the DataFrame by - median_col: str, the column name to calculate the median for Returns: - pandas DataFrame containing the unique values from `sort_by` column and their corresponding median values from the `median_col` column. # Sort the dataframe by the specified column df_sorted = df.sort_values(by=sort_by) # Group the dataframe by the sorted column and calculate the median of the median column medians = df_sorted.groupby(sort_by)[median_col].median().reset_index() return medians"},{"question":"You need to implement a function `calculate_fine()` that calculates the fine for returning library books late. This problem will help you practice managing dates and simple calculations in Python. The library has the following fine structure: - If the book is returned within the due date, no fine is charged. - If the book is returned after the due date but within the same calendar month and year, a fine of 15 units per day is charged. - If the book is returned after the due date but within the same calendar year (but a different month), a fine of 500 units per month is charged. - If the book is returned in a different calendar year, a fixed fine of 10,000 units is charged. The function `calculate_fine()` should take two parameters: - `return_date`: a string in the format \'DD MM YYYY\' representing the date the book was returned. - `due_date`: a string in the format \'DD MM YYYY\' representing the due date for returning the book. The function should return an integer representing the fine amount. **Constraints:** - Both dates will be valid dates in the Gregorian calendar. - The return date will not be before the due date. **Example:** - Input: `return_date = \\"15 06 2023\\"`, `due_date = \\"10 06 2023\\"` Output: `75` - Input: `return_date = \\"15 07 2023\\"`, `due_date = \\"10 06 2023\\"` Output: `500` The crux of the problem lies in manipulating and comparing dates to determine the appropriate fine amount.","solution":"from datetime import datetime def calculate_fine(return_date, due_date): Calculates the fine for returning library books late. Parameters: - return_date: a string in the format \'DD MM YYYY\' representing the date the book was returned. - due_date: a string in the format \'DD MM YYYY\' representing the due date for returning the book. Returns: - An integer representing the fine amount. return_date = datetime.strptime(return_date, \'%d %m %Y\') due_date = datetime.strptime(due_date, \'%d %m %Y\') if return_date <= due_date: return 0 elif return_date.year == due_date.year and return_date.month == due_date.month: return (return_date - due_date).days * 15 elif return_date.year == due_date.year: return (return_date.month - due_date.month) * 500 else: return 10000"},{"question":"``` Implement a function that scans through a directory for JSON files containing a particular keyword in their content. It should read the JSON files, look for the keyword in the values, and collect the filenames of all the files that contain the keyword. The filenames should be written into a new JSON file. This demonstrates reading JSON files, searching for a specific keyword within their content, and writing results to a new JSON file. The function should output: str: The path to the new JSON file containing the list of filenames. You should write self-contained code starting with: ``` import json import os def find_json_files_with_keyword(directory, keyword, output_file): ```","solution":"import json import os def find_json_files_with_keyword(directory, keyword, output_file): Scans through a directory for JSON files containing a particular keyword in their content. Collects the filenames of all the files that contain the keyword and writes them to a new JSON file. Parameters: directory (str): The directory to scan for JSON files. keyword (str): The keyword to search for inside the JSON file values. output_file (str): The path to the new JSON file where result filenames will be written. Returns: str: The path to the new JSON file containing the list of filenames. matched_files = [] for root, _, files in os.walk(directory): for file in files: if file.endswith(\\".json\\"): file_path = os.path.join(root, file) try: with open(file_path, \\"r\\", encoding=\\"utf-8\\") as f: data = json.load(f) if any(keyword in str(value) for value in data.values()): matched_files.append(file_path) except (json.JSONDecodeError, IOError): continue with open(output_file, \\"w\\", encoding=\\"utf-8\\") as out_file: json.dump(matched_files, out_file) return output_file"},{"question":"Write a function named `generate_purchase_report()` that reads purchase data from a JSON file (`purchases.json`) located in a `data` directory and generates a report summarizing the total amount spent by each customer, storing the result in a CSV file named `purchase_report.csv`. Use the `pandas` library to handle data manipulation and the `json` library to read the JSON file. The function should handle any exceptions that may arise during the process and print appropriate messages to the console. Here are the detailed steps that your function should follow: 1. Read data from the JSON file `purchases.json` using the `json` library and store the data in a DataFrame named `purchases`. 2. Group the data by the `customer_id` column and calculate the total amount spent by each customer. 3. Store the resultant summary in a DataFrame named `summary`. 4. Write the `summary` DataFrame to a CSV file named `purchase_report.csv`. 5. Print messages to the console indicating the success or failure of the report generation process. **Function Signature:** ```python def generate_purchase_report(): pass ``` **Note:** - You are required to use the `json.load` function from the `json` library to read the JSON file. - You may assume that the directory structure and file names are correct and that the `pandas` and `json` libraries are installed.","solution":"import pandas as pd import json import os def generate_purchase_report(): try: # Define the path to the JSON file json_path = \'data/purchases.json\' # Read the JSON file with open(json_path, \'r\') as file: data = json.load(file) # Creating a DataFrame from JSON data purchases = pd.DataFrame(data) # Grouping by customer_id and calculating the total amount spent summary = purchases.groupby(\'customer_id\')[\'amount_spent\'].sum().reset_index() # Define the path to the output CSV file output_csv_path = \'data/purchase_report.csv\' # Writing the summary DataFrame to a CSV file summary.to_csv(output_csv_path, index=False) print(\\"Report generated successfully.\\") except FileNotFoundError: print(\\"File not found. Please check the file path.\\") except json.JSONDecodeError: print(\\"Error reading JSON file. Please check the file content.\\") except Exception as e: print(f\\"An error occurred: {e}\\") # Uncomment the line below to test the function # generate_purchase_report()"},{"question":"In this exercise, you are tasked with implementing a function that identifies and counts the number of unique words in a given text file. The function should also output the ten most common words in descending order of frequency. Your task is to implement a function named `analyze_text_file` that will: 1. Read the content of the text file located at `../../../data/sample.txt`. 2. Count the number of occurrences of each unique word in the text. Words should be considered case-insensitive (e.g., \\"Word\\" and \\"word\\" should be considered the same word). 3. Print the total number of unique words. 4. Print the ten most common words with their counts in descending order. Words can be separated by spaces, punctuation, and line breaks. Your solution should make use of the `collections` module for counting the word frequencies. Here is the function skeleton: ```python def analyze_text_file(): Analyze the text file to count unique words and find the ten most common words. :return: None # Your code here ```","solution":"import re from collections import Counter def analyze_text_file(): Analyze the text file to count unique words and find the ten most common words. :return: None # Reading the content of the text file with open(\'../../../data/sample.txt\', \'r\', encoding=\'utf-8\') as file: text = file.read() # Using regular expressions to find all words (considering words case-insensitive) words = re.findall(r\'bw+b\', text.lower()) # Counting the occurrences of each word word_count = Counter(words) # Printing the total number of unique words print(f\\"Total number of unique words: {len(word_count)}\\") # Printing the ten most common words with their counts in descending order most_common_words = word_count.most_common(10) print(\\"Ten most common words:\\") for word, count in most_common_words: print(f\\"{word}: {count}\\")"},{"question":"You are tasked with creating a function to analyze the performance of different search algorithms on a sorted list. For this problem, you will write a function called `compare_search_performance(n)` that: 1. Generates a sorted list of `n` random integers. 2. Implements both linear search and binary search algorithms. 3. Measures the time taken by each search algorithm to find 100 random elements within the list. 4. Plots the following graphs comparing the performance: - Search index vs. time taken for linear search. - Search index vs. time taken for binary search. - Search index vs. time taken for both searches on the same graph. 5. Uses the `matplotlib.pyplot` library for plotting the graphs. 6. Displays the plots using `matplotlib.pyplot.show()`. The function `compare_search_performance(n)` should take an integer `n` as input and execute the described tasks. Ensure to handle the plots clearly, add legends, and label the axes appropriately for better understanding. To summarize, you need to: - Generate a list and elements to search. - Implement linear search and binary search. - Measure and record the performance of each search. - Plot and display the comparison using `matplotlib.pyplot`. ```python import matplotlib.pyplot as plt import time import random def linear_search(arr, x): for i, num in enumerate(arr): if num == x: return i return -1 def binary_search(arr, x): low = 0 high = len(arr) - 1 mid = 0 while low <= high: mid = (high + low) // 2 if arr[mid] < x: low = mid + 1 elif arr[mid] > x: high = mid - 1 else: return mid return -1 def compare_search_performance(n): # Generate sorted list of n random integers sorted_list = sorted(random.sample(range(1, 1000000), n)) # Random elements to search within the list elements_to_search = [random.choice(sorted_list) for _ in range(100)] linear_times = [] binary_times = [] for i, elem in enumerate(elements_to_search): # Measure time for linear search start_time = time.time() linear_search(sorted_list, elem) linear_times.append(time.time() - start_time) # Measure time for binary search start_time = time.time() binary_search(sorted_list, elem) binary_times.append(time.time() - start_time) # Plotting the results plt.figure(figsize=(12, 6)) plt.subplot(1, 2, 1) plt.plot(range(1, 101), linear_times, label=\'Linear Search\') plt.plot(range(1, 101), binary_times, label=\'Binary Search\', linestyle=\'--\') plt.xlabel(\'Search Index\') plt.ylabel(\'Time (s)\') plt.title(\'Search Performance Comparison\') plt.legend() plt.subplot(1, 2, 2) plt.plot(range(1, 101), linear_times, label=\'Linear Search\') plt.plot(range(1, 101), binary_times, label=\'Binary Search\', linestyle=\'--\') plt.xlabel(\'Search Index\') plt.ylabel(\'Time (s)\') plt.title(\'Search Performance (Overlay)\') plt.legend() plt.tight_layout() plt.show() ```","solution":"import matplotlib.pyplot as plt import time import random def linear_search(arr, x): Implements linear search algorithm. for i, num in enumerate(arr): if num == x: return i return -1 def binary_search(arr, x): Implements binary search algorithm. low = 0 high = len(arr) - 1 while low <= high: mid = (high + low) // 2 if arr[mid] < x: low = mid + 1 elif arr[mid] > x: high = mid - 1 else: return mid return -1 def compare_search_performance(n): Compares the performance of linear search and binary search algorithms and plots the results. # Generate sorted list of n random integers sorted_list = sorted(random.sample(range(1, 1000000), n)) # Random elements to search within the list elements_to_search = [random.choice(sorted_list) for _ in range(100)] linear_times = [] binary_times = [] for i, elem in enumerate(elements_to_search): # Measure time for linear search start_time = time.time() linear_search(sorted_list, elem) linear_times.append(time.time() - start_time) # Measure time for binary search start_time = time.time() binary_search(sorted_list, elem) binary_times.append(time.time() - start_time) # Plotting the results plt.figure(figsize=(12, 6)) plt.subplot(1, 2, 1) plt.plot(range(1, 101), linear_times, label=\'Linear Search\') plt.plot(range(1, 101), binary_times, label=\'Binary Search\', linestyle=\'--\') plt.xlabel(\'Search Index\') plt.ylabel(\'Time (s)\') plt.title(\'Search Performance Comparison\') plt.legend() plt.subplot(1, 2, 2) plt.plot(range(1, 101), linear_times, label=\'Linear Search\') plt.plot(range(1, 101), binary_times, label=\'Binary Search\', linestyle=\'--\') plt.xlabel(\'Search Index\') plt.ylabel(\'Time (s)\') plt.title(\'Search Performance (Overlay)\') plt.legend() plt.tight_layout() plt.show()"},{"question":"You need to write a Python function called `add_custom_column` that takes in a DataFrame and a custom function, then applies the custom function to generate a new column in the DataFrame. # Function Signature ```python def add_custom_column(df: pd.DataFrame, column_name: str, custom_func: Callable[[pd.Series], pd.Series]) -> pd.DataFrame: ``` # Parameters - `df`: A pandas DataFrame to which the new column should be added. - `column_name`: A string representing the name of the new column to be added. - `custom_func`: A callable function that takes a pandas Series (a column from the DataFrame) and returns a pandas Series of the same length. # Returns - The function should return a DataFrame with the new column added. # Example ```python import pandas as pd # Example DataFrame data = { \'A\': [1, 2, 3, 4, 5], \'B\': [10, 20, 30, 40, 50] } df = pd.DataFrame(data) # Custom function def sum_row(series: pd.Series) -> pd.Series: return series.sum(axis=1) # Adding custom column new_df = add_custom_column(df, \'C\', sum_row) print(new_df) ``` Expected output: ``` A B C 0 1 10 11 1 2 20 22 2 3 30 33 3 4 40 44 4 5 50 55 ``` # Instructions - Make sure to import the pandas library within your function. - The `custom_func` should be applied to the DataFrame (not individual entries) and generate a Series that will be used to create the new column. - Ensure the new column has the same length as the original DataFrame.","solution":"import pandas as pd from typing import Callable def add_custom_column(df: pd.DataFrame, column_name: str, custom_func: Callable[[pd.DataFrame], pd.Series]) -> pd.DataFrame: Adds a new column to the DataFrame `df` using `custom_func` to generate the new column\'s values. Parameters: - df (pd.DataFrame): The DataFrame to which the new column will be added. - column_name (str): The name of the new column. - custom_func (Callable[[pd.DataFrame], pd.Series]): A custom function that takes a DataFrame and returns a Series. Returns: pd.DataFrame: DataFrame with the new column added. df[column_name] = custom_func(df) return df"},{"question":"You are asked to implement a function that finds the length of the longest substring without repeating characters in a given string. This problem helps in understanding the sliding window technique in Python. **Function Signature** ```python def length_of_longest_substring(s: str) -> int: pass ``` **Requirements:** 1. Use the sliding window technique. **Example:** ```python length_of_longest_substring(\\"abcabcbb\\") -> 3 length_of_longest_substring(\\"bbbbb\\") -> 1 length_of_longest_substring(\\"pwwkew\\") -> 3 ``` **Explanation:** - For the input `\\"abcabcbb\\"`, the answer is `3`, with the longest substring being `\\"abc\\"`. - For the input `\\"bbbbb\\"`, the answer is `1`, with the longest substring being `\\"b\\"`. - For the input `\\"pwwkew\\"`, the answer is `3`, with the longest substring being `\\"wke\\"`. Note that the answer must be a substring, `\\"pwke\\"`, which is not a substring.","solution":"def length_of_longest_substring(s: str) -> int: Finds the length of the longest substring without repeating characters. :param s: The input string :return: The length of the longest substring without repeating characters if not s: return 0 # Initialize the character set and two pointers char_set = set() left = 0 max_length = 0 # Use the sliding window technique with right pointer moving through the string for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function to solve a Sudoku puzzle using backtracking. The input will be a 9x9 grid with some cells filled with digits (1-9) and others being empty (represented by 0). The function should return the solved 9x9 grid. The function should start with: ``` def solve_sudoku(board): ``` You are required to validate the puzzle and ensure it follows Sudoku rules: - Each row, column, and 3x3 subgrid must contain the digits 1-9 without repetition. Input: ``` board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Expected output: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): # Check row for i in range(9): if board[row][i] == num: return False # Check column for i in range(9): if board[i][col] == num: return False # Check 3x3 grid start_row = row // 3 * 3 start_col = col // 3 * 3 for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def backtrack(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if backtrack(board): return True board[row][col] = 0 return False return True backtrack(board) return board # Example Sudoku puzzle board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] # Solving the puzzle solved_board = solve_sudoku(board) print(solved_board)"},{"question":"In this problem, you will create a function to implement integer factorization. Your task is to write a function `integerFactorization(n)` that takes an integer `n` and returns a list of all the prime factors of `n`. The list should present the factors in ascending order. Here are the steps the function should perform: 1. Initialize an empty list to store the factors. 2. Check and include all the 2s that divide `n`. 3. Check and include all the odd numbers from 3 to the square root of `n`. 4. If the remaining `n` is a prime number greater than 2, add it to the list of factors. 5. Return the list of factors. # Example Usage ```python def integerFactorization(n): # Your implementation here pass # Example print(integerFactorization(56)) # Output: [2, 2, 2, 7] print(integerFactorization(315)) # Output: [3, 3, 5, 7] ``` Your function should handle the factorization efficiently and correctly for varying sizes of integers. Be sure to test your implementation against a range of inputs.","solution":"import math def integerFactorization(n): Returns the list of prime factors of the given integer n in ascending order. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # Check for all the odd numbers from 3 to sqrt(n) for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"You are required to write a function named `reverse_lines`. This function will take a filename as its input parameter, read the contents of the file, and write a new file where each line is reversed in character order. The function shall maintain the original line order but reverse the characters in each line. The input file looks something like this: ``` Hello World Python is fun Coding challenges ``` The output file should look like this: ``` dlroW olleH nuf si nohtyP segnellahc gnidoC ``` # Function Requirements: 1. **Function Name:** `reverse_lines` 2. **Input Parameter:** - `input_file`: A string representing the filename of the input file. 3. **Output:** A new file named \'reversed_<original filename>\'. # Important Points: - Use file handling techniques to read from the input file and write to the output file. - Make sure the name of the new file starts with \'reversed_\' followed by the original filename. # Example: Assume you have a text file named `\\"example.txt\\"` with the following content: ``` Apples are red Bananas are yellow Grapes are purple ``` Calling the function: ```python reverse_lines(\\"example.txt\\") ``` Should create a file named `reversed_example.txt` with the following content: ``` der era selppA wolley era sananaB elprup era separG ```","solution":"def reverse_lines(input_file): Reads an input file, reverses each line character-by-character, and writes the reversed lines to a new file named \'reversed_<original filename>\'. :param input_file: The name of the input file to read from. with open(input_file, \'r\') as infile: lines = infile.readlines() reversed_lines = [line.strip()[::-1] + \'n\' for line in lines] output_file = f\\"reversed_{input_file}\\" with open(output_file, \'w\') as outfile: outfile.writelines(reversed_lines)"},{"question":"You are provided a dataset containing movie information with columns \'Title\', \'Genre\', \'Director\', \'Year\', \'Runtime\', and \'Rating\'. Your task is to analyze this dataset to understand trends in movie characteristics over decades. **Expectations**: 1. Write a function named `analyze_movie_trends` that accepts a `pandas.DataFrame` object `movies`. 2. The function should: - Categorize movies into decades based on their release year, creating a new column `\'Decade\'`. - Group the DataFrame by `\'Decade\'`, calculating the average `Runtime` and average `Rating` for each decade. - Identify the director who has directed the most movies in each decade. 3. Plot three subplots: - **Subplot 1**: Bar plot of the average Runtime of movies for each decade. - **Subplot 2**: Line plot of the average Rating of movies across decades. - **Subplot 3**: Horizontal bar plot of the number of movies directed by the top directors in each decade. **Specifications**: - The `movies` DataFrame has columns: [\'Title\', \'Genre\', \'Director\', \'Year\', \'Runtime\', \'Rating\']. - Manage data aggregation and transformation using `pandas`. - Ensure all plots are correctly labeled with titles, axes labels, and legends if necessary. - Use `matplotlib` for plotting and ensure to specifically use the following APIs: `matplotlib.pyplot.bar`, `matplotlib.pyplot.plot`, `matplotlib.pyplot.barh`, `matplotlib.pyplot.title`, `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, `matplotlib.pyplot.legend`. **Take care to correctly set up the plots and appropriately label axes and titles.**","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_movie_trends(movies): # Step 1: Categorize movies into decades movies[\'Decade\'] = (movies[\'Year\'] // 10) * 10 # Step 2: Group by decade and calculate average runtime and rating decade_stats = movies.groupby(\'Decade\').agg({ \'Runtime\': \'mean\', \'Rating\': \'mean\' }).reset_index() # Step 3: Identify the director with most movies in each decade director_counts = movies.groupby([\'Decade\', \'Director\']).size().reset_index(name=\'Count\') top_directors = director_counts.loc[director_counts.groupby(\'Decade\')[\'Count\'].idxmax()] # Plotting fig, axs = plt.subplots(3, 1, figsize=(10, 15)) # Subplot 1: Bar plot for average Runtime axs[0].bar(decade_stats[\'Decade\'], decade_stats[\'Runtime\']) axs[0].set_title(\'Average Runtime by Decade\') axs[0].set_xlabel(\'Decade\') axs[0].set_ylabel(\'Average Runtime (minutes)\') # Subplot 2: Line plot for average Rating axs[1].plot(decade_stats[\'Decade\'], decade_stats[\'Rating\'], \'-o\') axs[1].set_title(\'Average Rating by Decade\') axs[1].set_xlabel(\'Decade\') axs[1].set_ylabel(\'Average Rating\') # Subplot 3: Horizontal bar plot for number of movies by top directors # sorting top_directors by decade to ensure proper plot order top_directors = top_directors.sort_values(by=\'Decade\') axs[2].barh(top_directors.apply(lambda row: f\\"{row[\'Director\']} ({row[\'Decade\']})\\", axis=1), top_directors[\'Count\']) axs[2].set_title(\'Number of Movies by Top Directors per Decade\') axs[2].set_xlabel(\'Number of Movies\') axs[2].set_ylabel(\'Director (Decade)\') plt.tight_layout() plt.show()"},{"question":"This function takes a list of integers and returns a dictionary with the following keys: - \'sum\': the sum of all integers - \'avg\': the average of all integers - \'min\': the minimum integer - \'max\': the maximum integer Make sure to handle the case where the list is empty by returning None. You should write self-contained code starting with: ``` def analyze_list(int_list): ```","solution":"def analyze_list(int_list): Analyzes a list of integers and returns a dictionary with sum, average, minimum, and maximum. If the list is empty, returns None. if not int_list: return None result = { \'sum\': sum(int_list), \'avg\': sum(int_list) / len(int_list) if int_list else 0, \'min\': min(int_list), \'max\': max(int_list) } return result"},{"question":"Create an algorithm that takes a list of integers and returns a new list containing only the prime factors of each integer in the original list. If an integer is less than 2, exclude it from the result. Each integer in the result should appear as many times as it is a factor in the original integer. For example, if the list contains `[12, 15]`, the result should be `[2, 2, 3, 3, 5]`. The function should output a list of integers. You should write self-contained code starting with: ``` from typing import List def prime_factors_list(numbers: List[int]) -> List[int]: ``` **Note:** - Prime factors are prime numbers that exactly divide the given number. - Order the factors as they appear while factorizing each number. **Example:** ```python assert prime_factors_list([30, 14, 18, 1]) == [2, 3, 5, 2, 7, 2, 3, 3] ```","solution":"from typing import List def prime_factors_list(numbers: List[int]) -> List[int]: def prime_factors(n: int) -> List[int]: factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors result = [] for number in numbers: if number >= 2: result.extend(prime_factors(number)) return result"},{"question":"You are given a list of dictionary items representing products in an e-commerce store. Each dictionary contains keys `\'name\'`, `\'category\'`, and `\'price\'`. Write a function named `get_products_by_category` that takes two parameters: a list of product dictionaries `products` and a string `category_name`. The function should return a list of product names that belong to the given category, sorted in ascending order by their names. Function Signature: ```python def get_products_by_category(products, category_name): pass ``` Requirements: 1. Filter the products by the `category_name`. 2. Return a list of names of the products in the specified category, sorted alphabetically. **Example:** ```python products = [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 999.99}, {\\"name\\": \\"Shirt\\", \\"category\\": \\"Clothing\\", \\"price\\": 19.99}, {\\"name\\": \\"Smartphone\\", \\"category\\": \\"Electronics\\", \\"price\\": 499.99}, {\\"name\\": \\"Jeans\\", \\"category\\": \\"Clothing\\", \\"price\\": 39.99} ] category_name = \\"Electronics\\" print(get_products_by_category(products, category_name)) ``` **Expected Output:** ```python [\\"Laptop\\", \\"Smartphone\\"] ```","solution":"def get_products_by_category(products, category_name): Returns a list of product names in the given category, sorted by their names. :param products: List of dictionaries with product details. :param category_name: The category to filter products by. :return: List of product names in the given category, sorted alphabetically. filtered_products = [product[\'name\'] for product in products if product[\'category\'] == category_name] return sorted(filtered_products)"},{"question":"Given a sequence of n integers, your task is to find and return the longest subsequence that is strictly increasing. If there are multiple such subsequences of maximum length, return any one of them. Implement the following function: ```python def longest_increasing_subsequence(seq): # Your code here ``` **Parameters:** - `seq`: List of integers representing the sequence. **Return:** - A list containing the longest strictly increasing subsequence. # Example ```python seq = [10, 9, 2, 5, 3, 7, 101, 18] print(longest_increasing_subsequence(seq)) ``` **Output:** ```python [2, 3, 7, 18] ``` # Explanation: Among the possible increasing subsequences ([2, 3, 7], [2, 5, 7], etc.), the longest one is [2, 3, 7, 18]. Since the question specifies any one of the longest, the returned subsequence is valid. To complete this task, you should follow the Dynamic Programming approach, or alternatively, a binary search enhancement can be used for an optimized solution.","solution":"def longest_increasing_subsequence(seq): Returns the longest subsequence that is strictly increasing from the given list of integers. if not seq: return [] # Stores the indices of the smallest last value of the increasing subsequences of different lengths open_ends = [] # To store previous index values to reconstruct the sequence previous_indices = [-1] * len(seq) for i, value in enumerate(seq): # Perform binary search low, high = 0, len(open_ends) while low < high: mid = (low + high) // 2 if seq[open_ends[mid]] < value: low = mid + 1 else: high = mid if low >= len(open_ends): open_ends.append(i) else: open_ends[low] = i # Link this value to the previous index if low > 0: previous_indices[i] = open_ends[low - 1] # Reconstruct the sequence lis = [] k = open_ends[-1] while k != -1: lis.append(seq[k]) k = previous_indices[k] return lis[::-1]"},{"question":"You are given a list of tuples where each tuple contains a start date and an end date in the format \'YYYY-MM-DD\'. Your task is to implement a function called `find_longest_streak` that identifies the longest streak of consecutive dates within the list. A streak is defined as a sequence of tuples where the end date of one tuple is the start date of the next tuple. The function should follow these steps: 1. Parse the dates from each tuple. 2. Sort the tuples based on the start date. 3. Find the longest streak of consecutive dates where the end date of one tuple matches the start date of the next. 4. Return the start and end dates of the longest streak. If there are ties in the streak lengths, return the streak with the earliest start date. 5. If the list is empty, return `(None, None)`. # Function Signature ```python def find_longest_streak(date_ranges): pass ``` # Example ```python date_ranges = [(\'2023-01-01\', \'2023-01-03\'), (\'2023-01-03\', \'2023-01-05\'), (\'2023-01-05\', \'2023-01-07\'), (\'2023-02-01\', \'2023-02-04\'), (\'2023-01-07\', \'2023-01-10\')] print(find_longest_streak(date_ranges)) # Output: (\'2023-01-01\', \'2023-01-10\') date_ranges = [(\'2023-01-01\', \'2023-01-02\'), (\'2023-01-03\', \'2023-01-04\'), (\'2023-01-05\', \'2023-01-06\')] print(find_longest_streak(date_ranges)) # Output: (\'2023-01-05\', \'2023-01-06\') date_ranges = [(\'2023-03-01\', \'2023-03-01\')] print(find_longest_streak(date_ranges)) # Output: (\'2023-03-01\', \'2023-03-01\') date_ranges = [] print(find_longest_streak(date_ranges)) # Output: (None, None) ``` # Requirements - Parse dates using the `datetime` module. - Ensure the function is efficient and handles edge cases gracefully. - Sort the list by the start dates before processing.","solution":"from datetime import datetime def find_longest_streak(date_ranges): if not date_ranges: return (None, None) date_ranges = sorted(date_ranges, key=lambda x: x[0]) def parse_date(date_str): return datetime.strptime(date_str, \'%Y-%m-%d\') longest_streak_start = None longest_streak_end = None longest_streak_length = 0 current_streak_start = date_ranges[0][0] current_streak_end = date_ranges[0][1] current_streak_length = 1 for i in range(1, len(date_ranges)): prev_end = parse_date(date_ranges[i-1][1]) curr_start = parse_date(date_ranges[i][0]) if prev_end == curr_start: current_streak_end = date_ranges[i][1] current_streak_length += 1 else: if current_streak_length > longest_streak_length: longest_streak_start = current_streak_start longest_streak_end = current_streak_end longest_streak_length = current_streak_length current_streak_start = date_ranges[i][0] current_streak_end = date_ranges[i][1] current_streak_length = 1 if current_streak_length > longest_streak_length: longest_streak_start = current_streak_start longest_streak_end = current_streak_end return (longest_streak_start, longest_streak_end)"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that length. The function should also return the length of the longest string. The function should raise the exception for: TypeError: If the input is not a list of strings. The function should output with: dict: A dictionary with lengths as keys and lists of strings as values. int: The length of the longest string. You should write self-contained code starting with: ``` def process_strings(strings: list): ```","solution":"def process_strings(strings: list): Processes a list of strings and returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that length. Also returns the length of the longest string. Args: strings (list): A list of strings. Returns: dict: A dictionary with lengths as keys and lists of strings as values. int: The length of the longest string. Raises: TypeError: If the input is not a list of strings. if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings): raise TypeError(\\"Input must be a list of strings\\") result = {} max_length = 0 for string in strings: length = len(string) if length not in result: result[length] = [] result[length].append(string) if length > max_length: max_length = length return result, max_length"},{"question":"You are assigned to create a program that simulates the basic operations of a Library Management System. Implement a class `Library` that can: 1. Add a book to the library\'s collection. 2. Lend a book to a user. 3. Return a book to the library. 4. Display all available books in the library. **Class Signature:** ```python class Library: def __init__(self): pass def add_book(self, book_title: str) -> None: pass def lend_book(self, book_title: str, user_name: str) -> str: pass def return_book(self, book_title: str) -> str: pass def display_books(self) -> list: pass ``` **Methods:** - `__init__()`: Initializes the library with an empty collection of books. - `add_book(book_title: str)`: Adds the specified book to the library\'s collection. - `lend_book(book_title: str, user_name: str)`: Lends the specified book to the user if it\'s available. Returns a message indicating the outcome. - `return_book(book_title: str)`: Returns the specified book to the library\'s collection. Returns a message indicating the outcome. - `display_books()`: Returns a list of all available books in the library. **Constraints:** - If a book is already in the library, adding it again should either reject the addition or update the inventory count. - A book should not be lent out if it is not in the collection or already lent out. - Books are uniquely identified by their title. - The library can contain multiple copies of the same book. **Example:** ```python library = Library() library.add_book(\\"1984 by George Orwell\\") library.add_book(\\"To Kill a Mockingbird by Harper Lee\\") library.add_book(\\"1984 by George Orwell\\") # Assume library can hold multiple copies. print(library.display_books()) # [\\"1984 by George Orwell\\", \\"To Kill a Mockingbird by Harper Lee\\"] print(library.lend_book(\\"1984 by George Orwell\\", \\"John Doe\\")) # \\"1984 by George Orwell has been lent to John Doe.\\" print(library.lend_book(\\"1984 by George Orwell\\", \\"Jane Doe\\")) # \\"1984 by George Orwell is currently unavailable.\\" print(library.return_book(\\"1984 by George Orwell\\")) # \\"1984 by George Orwell has been returned.\\" print(library.display_books()) # [\\"1984 by George Orwell\\", \\"To Kill a Mockingbird by Harper Lee\\"] ```","solution":"class Library: def __init__(self): self.collection = {} self.lent_books = {} def add_book(self, book_title: str) -> None: if book_title in self.collection: self.collection[book_title] += 1 else: self.collection[book_title] = 1 def lend_book(self, book_title: str, user_name: str) -> str: if book_title in self.collection and self.collection[book_title] > 0: self.collection[book_title] -= 1 self.lent_books[user_name] = book_title return f\\"{book_title} has been lent to {user_name}.\\" return f\\"{book_title} is currently unavailable.\\" def return_book(self, book_title: str) -> str: if book_title in self.lent_books.values(): user_name = list(self.lent_books.keys())[list(self.lent_books.values()).index(book_title)] self.collection[book_title] += 1 del self.lent_books[user_name] return f\\"{book_title} has been returned.\\" return f\\"{book_title} was not lent out.\\" def display_books(self) -> list: available_books = [] for book, count in self.collection.items(): available_books.extend([book] * count) return available_books"},{"question":"You are tasked with developing a function named `most_frequent_day(city_file: str) -> str` that takes a city data file in CSV format as input and determines the most frequent day of the week for bike ride start times from the dataset. The day of the week should be returned as a string (e.g., \'Monday\', \'Tuesday\', etc.). Utilize the `pandas.to_datetime` function to handle date-time conversion and derive the day of the week from bike ride start times within your implementation. This exercise will help you practice working with date-time data using the pandas library and manipulating DataFrame objects effectively. Input: - `city_file` (str): The file path to the CSV file containing the bike ride data for a city. Assume the CSV file includes a column named \'Start Time\', which holds the date and time when each bike ride started. Output: - A string representing the most frequent day of the week for bike ride start times. Requirements: You must use the `pandas.to_datetime` function for converting the \'Start Time\' column to datetime format. Example: Given a CSV file (`city_data.csv`) with content: ``` Start Time,End Time,Trip Duration,... 2017-01-01 00:07:57,2017-01-01 00:20:53,776,... 2017-06-01 02:55:19,2017-06-01 03:05:12,593,... 2017-07-03 04:00:30,2017-07-03 04:12:45,735,... ``` ```python print(most_frequent_day(\'city_data.csv\')) # Output could be \'Monday\' (if Monday is the most frequent start day) ```","solution":"import pandas as pd def most_frequent_day(city_file: str) -> str: Determines the most frequent day of the week for bike ride start times from the dataset. Parameters: city_file (str): The file path to the CSV file containing the bike ride data for a city. Returns: str: The most frequent day of the week (e.g., \'Monday\', \'Tuesday\', etc.). df = pd.read_csv(city_file) df[\'Start Time\'] = pd.to_datetime(df[\'Start Time\']) df[\'Day of Week\'] = df[\'Start Time\'].dt.day_name() most_frequent_day = df[\'Day of Week\'].mode()[0] return most_frequent_day"},{"question":"Create a Python function `calculate_fare` that accepts the number of miles traveled and the type of ride as input and returns the fare. The fare rates are defined as follows: - **Economy**: Base fare of 2 plus 0.40 per mile. - **Premium**: Base fare of 5 plus 0.25 per mile. - **Deluxe**: Base fare of 10 plus 0.15 per mile. The function should correctly handle invalid input by raising a `ValueError` with an appropriate message. Additionally, write a helper function to read the input values of miles and ride type from the user and output the calculated fare. Ensure input values are validated before calculating the fare. Function Signature: ```python def calculate_fare(miles: float, ride_type: str) -> float: pass def input_and_calculate_fare() -> None: pass ``` # Example Usage For instance, if the input is: ``` Miles traveled: 10 Ride type: Economy ``` The output should be: ``` The fare for your ride is: 6.0 ``` # Requirements: - The `calculate_fare` function should calculate and return the fare based on the ride type. - The `input_and_calculate_fare` function should read the input values from the user, validate the inputs, and print the calculated fare to the console. - Raise a `ValueError` with a descriptive message for invalid miles (negative values) or ride types (not in \'Economy\', \'Premium\', \'Deluxe\').","solution":"def calculate_fare(miles: float, ride_type: str) -> float: Calculate the fare based on miles traveled and ride type. Parameters: miles (float): The number of miles traveled. ride_type (str): The type of ride. Must be \'Economy\', \'Premium\', or \'Deluxe\'. Returns: float: The calculated fare. Raises: ValueError: If miles is negative or ride_type is invalid. if miles < 0: raise ValueError(\\"Miles traveled cannot be negative.\\") if ride_type not in [\'Economy\', \'Premium\', \'Deluxe\']: raise ValueError(\\"Invalid ride type. Must be \'Economy\', \'Premium\', or \'Deluxe\'.\\") if ride_type == \'Economy\': base_fare = 2 per_mile_rate = 0.40 elif ride_type == \'Premium\': base_fare = 5 per_mile_rate = 0.25 elif ride_type == \'Deluxe\': base_fare = 10 per_mile_rate = 0.15 return base_fare + (per_mile_rate * miles) def input_and_calculate_fare() -> None: Read miles and ride type from the user, validate the inputs, and print the calculated fare. try: miles = float(input(\\"Miles traveled: \\")) ride_type = input(\\"Ride type (Economy, Premium, Deluxe): \\") fare = calculate_fare(miles, ride_type) print(f\\"The fare for your ride is: {fare:.2f}\\") except ValueError as e: print(f\\"Error: {e}\\")"},{"question":"You are given a function `is_valid_subsequence` that determines if a given list is a subsequence of another list. Your task is to implement a new function `longest_common_subsequence` that finds the longest common subsequence (LCS) between two lists and returns this subsequence. The LCS of two lists is the longest list that can be derived from both original lists by deleting some (or no) elements without changing the order of the remaining elements. # Function Signature: ```python def longest_common_subsequence(list1: list, list2: list) -> list: pass ``` # Parameters: 1. `list1` (list): The first list of elements. 2. `list2` (list): The second list of elements. # Returns: - A list representing the longest common subsequence between `list1` and `list2`. # Example: ```python list1 = [1, 3, 4, 1, 2, 1, 3] list2 = [3, 4, 1, 2, 1, 3, 5, 6] result = longest_common_subsequence(list1, list2) print(result) # Output should be: [3, 4, 1, 2, 1, 3] ``` # Note: 1. If there are multiple possible LCS, you can return any one of them. 2. The function should handle the cases where one or both lists are empty (return an empty list in such cases). 3. Make sure the function performs efficiently given the constraints. # Requirements: - Use dynamic programming to solve the problem. This will typically involve creating a 2D table where the entry at cell `(i, j)` represents the length of the LCS of the sequences `list1[0..i-1]` and `list2[0..j-1]`. - The function should be efficient in both time and space complexity wherever possible.","solution":"def longest_common_subsequence(list1, list2): Returns the longest common subsequence between list1 and list2. m, n = len(list1), len(list2) # Create a 2D table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp table for i in range(1, m + 1): for j in range(1, n + 1): if list1[i - 1] == list2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the longest common subsequence lcs = [] i, j = m, n while i > 0 and j > 0: if list1[i - 1] == list2[j - 1]: lcs.append(list1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 # Reverse the lcs as we built it backwards lcs.reverse() return lcs"},{"question":"You are asked to implement a function named `find_common_elements` which identifies the common elements between two given lists of integers and returns a sorted list of these common elements without duplicates. The complexity of the operation should be taken into consideration, aiming for an efficient solution. Here are the requirements for the `find_common_elements` function: 1. **Input:** The function takes two lists of integers as input parameters: - `list1`: A list of integers (e.g., [1, 3, 4, 6, 7, 9]) - `list2`: Another list of integers (e.g., [4, 5, 6, 7, 8, 10]) 2. **Output:** The function returns a sorted list of the integers that are present in both input lists, without any duplicates. 3. **Implementation Details:** - Convert both lists to sets to remove duplicates and to leverage set intersection for finding common elements. - Find the intersection of the two sets. - Convert the resulting set back to a list. - Sort the list in ascending order. - Return the sorted list of common elements. **Example:** ```python def find_common_elements(list1, list2): set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) return sorted(list(common_elements)) # Example usage: list1 = [1, 3, 4, 6, 7, 9] list2 = [4, 5, 6, 7, 8, 10] print(find_common_elements(list1, list2)) # Output: [4, 6, 7] ``` Create the `find_common_elements` function according to these requirements.","solution":"def find_common_elements(list1, list2): This function takes two lists of integers and returns a sorted list of common elements between the two lists. Removes duplicates and returns the result in ascending order. Parameters: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: Sorted list of common elements without duplicates. # Convert lists to sets for efficient intersection and duplicate removal set1 = set(list1) set2 = set(list2) # Find intersection of both sets common_elements = set1.intersection(set2) # Convert the result to a sorted list and return return sorted(list(common_elements)) # Example usage: list1 = [1, 3, 4, 6, 7, 9] list2 = [4, 5, 6, 7, 8, 10] print(find_common_elements(list1, list2)) # Output: [4, 6, 7]"},{"question":"Write a Python function named `calculate_running_average(file_name, output_file)` that reads integer data from a text file and computes the running average from the start of the file up to each point. The function should then write these running averages to a new file. The `file_name` parameter is the path to the input text file containing integer data, where each integer is on a new line. The `output_file` parameter is the path where the output file will be saved. Your function should work as follows: 1. Open the input file specified by `file_name` in read mode. 2. Open the output file specified by `output_file` in write mode. 3. Read the integers from the input file line by line. 4. For each integer, compute the running average up to that point and write the running average to the output file, each on a new line. 5. Print a success message indicating that the running average has been calculated and the result has been saved successfully. Here\'s an example of the input and output: **Input File (input.txt):** ``` 2 4 6 8 10 ``` **Output File (output.txt):** ``` 2.0 3.0 4.0 5.0 6.0 ``` # Constraints: - The input file will contain at least one integer. - You may assume the input file contains only integers, one per line. - The output file should be overwritten if it already exists. # Important Notes: - You must handle file operations appropriately using Python\'s built-in file operations.","solution":"def calculate_running_average(file_name, output_file): Calculates running average of integers from the input file, and writes the running averages to the output file. with open(file_name, \'r\') as f_in: lines = f_in.readlines() running_sum = 0 results = [] for i, line in enumerate(lines): num = int(line.strip()) running_sum += num running_avg = running_sum / (i + 1) results.append(f\\"{running_avg:.1f}\\") with open(output_file, \'w\') as f_out: for result in results: f_out.write(result + \'n\') print(f\\"Running average calculated and saved to {output_file} successfully.\\")"},{"question":"Given a JSON formatted string representing a tree structure, write a function that performs pre-order traversal on the tree and returns the traversal as a list of node values. Each node in the tree has a \\"value\\" and may have a \\"left\\" child and/or a \\"right\\" child. Your function should be able to handle an empty tree as well. The function should output with: list: A list of node values representing the pre-order traversal of the tree. You should write self-contained code starting with: ```python import json def pre_order_traversal(json_tree): tree = json.loads(json_tree) def traverse(node): if not node: return [] result = [node[\'value\']] result += traverse(node.get(\'left\')) result += traverse(node.get(\'right\')) return result return traverse(tree) # Example Usage: # json_tree = \'{\\"value\\": 1, \\"left\\": {\\"value\\": 2}, \\"right\\": {\\"value\\": 3, \\"left\\": {\\"value\\": 4}, \\"right\\": {\\"value\\": 5}}}\' # pre_order_traversal(json_tree) # Output: [1, 2, 3, 4, 5] ```","solution":"import json def pre_order_traversal(json_tree): tree = json.loads(json_tree) def traverse(node): if not node: return [] result = [node[\'value\']] result += traverse(node.get(\'left\')) result += traverse(node.get(\'right\')) return result return traverse(tree)"},{"question":"Create a function that validates and cleans a list of email addresses. The function should: 1. Accept a list of email addresses as input. 2. Remove any duplicates, preserving the order of first occurrence. 3. Discard any email addresses that do not match the standard email format (e.g., \'user@example.com\'). 4. Normalize the email addresses such that all characters are lowercase. 5. Return the cleaned list of email addresses. The function should handle typical edge cases, such as empty lists or lists with only invalid emails. You should write self-contained code starting with: ``` import re def clean_email_list(email_list): ```","solution":"import re def clean_email_list(email_list): Cleans and validates a list of email addresses. Parameters: email_list (list): A list of email addresses in string format. Returns: list: A cleaned list of email addresses with duplicates removed, invalid addresses discarded, and all characters in lowercase. seen = set() cleaned_list = [] email_regex = re.compile(r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\') for email in email_list: email_lower = email.lower() if email_regex.match(email_lower) and email_lower not in seen: seen.add(email_lower) cleaned_list.append(email_lower) return cleaned_list"},{"question":"You are given a square matrix where each element is either 0 or 1. Write a function `flip_matrix` that flips the values within the matrix. More specifically, a flip operation changes all 0s to 1s and all 1s to 0s. The function should return the flipped matrix. **Function Name:** ```python flip_matrix(matrix) ``` **Parameters:** - `matrix` (list of lists): A 2D array (square matrix) containing only 0s and 1s. **Returns:** - A list of lists representing the flipped matrix. **Flip Rule:** - For each element in the matrix, if it is 0, change it to 1. If it is 1, change it to 0. **Example Usage:** ```python matrix = [ [0, 1, 0], [1, 0, 1], [0, 0, 1] ] print(flip_matrix(matrix)) # Output: # [ # [1, 0, 1], # [0, 1, 0], # [1, 1, 0] # ] ``` **Note:** - The input matrix is always a square matrix (i.e., the number of rows and columns are the same). - The elements of the matrix are strictly 0s and 1s.","solution":"def flip_matrix(matrix): Flips the values in the matrix. Changes all 0s to 1s and all 1s to 0s. Parameters: - matrix (list of lists): A 2D square matrix containing only 0s and 1s. Returns: - list of lists: The flipped matrix. n = len(matrix) flipped_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): flipped_matrix[i][j] = 1 - matrix[i][j] return flipped_matrix"},{"question":"Given a list of integers, you are tasked with finding the length of the longest contiguous subarray that contains only distinct integers. In this problem, you need to implement the function `longest_unique_subarray(arr)`, which takes in one parameter: 1. `arr`: A list of integers. Your task is to use a sliding window technique along with a set to keep track of the unique elements within the current window. Expand the window from the start of the array to the end, ensuring each element within the window is distinct. If a duplicate is detected, contract the window from the left until all elements within it are unique again. Track and return the maximum length of such subarrays. The function signature should be: ```python def longest_unique_subarray(arr: list) -> int: ``` # Example: ```python arr = [2, 3, 4, 5, 3, 4, 5, 6] result = longest_unique_subarray(arr) print(result) # Output: 4, since the longest subarray with distinct elements is [2, 3, 4, 5] or [3, 4, 5, 6] arr = [1, 2, 1, 2, 3, 4, 2] result = longest_unique_subarray(arr) print(result) # Output: 4, since the longest subarray with distinct elements is [1, 2, 3, 4] ``` # Constraints: - The length of the array can be up to (10^5) elements. - The elements can be any integer value (positive, negative, or zero).","solution":"def longest_unique_subarray(arr): Returns the length of the longest contiguous subarray that contains only distinct integers. Args: - arr (list): A list of integers. Returns: - int: The length of the longest contiguous subarray with distinct integers. max_len = 0 left = 0 seen = set() for right in range(len(arr)): while arr[right] in seen: seen.remove(arr[left]) left += 1 seen.add(arr[right]) max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are tasked with implementing a function that works like a simplified version of `grep`, a command-line utility for searching plain-text data for lines that match a regular expression. In this simplified version, the goal is to search for lines in a list of strings that contain a specified substring. # Function to Implement Function Name: `simple_grep` **Parameters:** 1. `lines` (List[str]): A list of strings where each string represents a line of text. 2. `substring` (str): The substring to search for within each line. **Returns:** - The function should return a list of strings consisting of the lines from the input `lines` that contain the specified `substring`. **Procedure to follow:** 1. Iterate over each line in the `lines` list. 2. Check if the `substring` is found in the current line. 3. If the substring is found, include the line in the output list. 4. Return the list of lines that contain the substring. # Example Usage ```python def simple_grep(lines, substring): result = [] for line in lines: if substring in line: result.append(line) return result # Example lines lines = [ \\"The quick brown fox jumps over the lazy dog\\", \\"Hello world\\", \\"Python programming is fun\\", \\"Simple grep implementation\\", \\"Searching for substrings\\" ] # Example substring to search for substring = \\"simple\\" # Function call matching_lines = simple_grep(lines, substring) print(matching_lines) # Output: [\\"Simple grep implementation\\"] ``` Make sure to handle case sensitivity in your function. The example provided should be treated as a case-insensitive search.","solution":"def simple_grep(lines, substring): Returns a list of lines that contain the specified substring. The check is case-insensitive. Parameters: lines (List[str]): List of strings representing lines of text. substring (str): The substring to search for within each line. Returns: List[str]: A list of lines that contain the specified substring. result = [] substring_lower = substring.lower() for line in lines: if substring_lower in line.lower(): result.append(line) return result"},{"question":"You are tasked with developing a function `compress_string(input_str)` that takes a string input and returns a compressed version of it. The compression algorithm should work by converting consecutive repetitions of the same character into a single character followed by the number of occurrences. If the compressed string is not shorter than the original string, return the original string. Take care of edge cases and ensure the function handles strings of various lengths optimally. Here\'s how the function should work: 1. **Initialization**: Start with an empty list for building the compressed string. 2. **Iteration Through Characters**: Iterate through the input string, keeping track of the current character and its consecutive count. 3. **Building Compressed String**: - For each character, if it is the same as the previous one, increment the count. - If it is different, append the previous character and its count to the compressed list, then reset the current character and count. 4. **Final Append**: After the iteration, append the last character and its count to the compressed list. 5. **String Conversion**: Convert the compressed list back to a string. 6. **Comparison and Return**: - Compare the lengths of the compressed string and the original string. - Return the shorter string. If they are equal in length, return the original string. Examples: - `compress_string(\\"aaabccddd\\")` should return `\\"a3b1c2d3\\"`. - `compress_string(\\"abcd\\")` should return `\\"abcd\\"`, as compression does not reduce the length. Define the function as follows: ```python def compress_string(input_str): # Your implementation here ``` Ensure you test the function with various cases, including empty strings and strings with no consecutive repeating characters.","solution":"def compress_string(input_str): if not input_str: return input_str compressed = [] current_char = input_str[0] count = 1 for char in input_str[1:]: if char == current_char: count += 1 else: compressed.append(current_char + str(count)) current_char = char count = 1 # append the last accumulated character and count compressed.append(current_char + str(count)) compressed_str = \'\'.join(compressed) if len(compressed_str) < len(input_str): return compressed_str else: return input_str"},{"question":"You are working on a project where you need to analyze a set of text files containing various sentences. Your task is to write a Python function that reads all the text files in a given directory, removes any punctuation from the sentences, counts the frequency of each word across all files, and stores the counts in a new file named `word_counts.txt` in the same directory. Write a Python function named `count_words` that performs the following tasks: 1. Lists all `.txt` files in the provided directory. 2. Reads each `.txt` file and removes any punctuation from the content. 3. Counts the frequency of each word across all files (case-insensitive). 4. Writes the word counts to a new file named `word_counts.txt` in the same directory, with each line containing a word and its count, separated by a space. To accomplish this, you should use the `os.listdir` method to list the files in the directory and the `string.punctuation` constant to identify punctuation characters. Here is the signature for the function you need to implement: ```python def count_words(directory: str) -> None: Counts the frequency of each word in text files within a directory and writes results to a file. :param directory: Path to the directory containing the text files. pass ``` # Requirements - The function must handle only files with the `.txt` extension. - The function should ignore case when counting word frequencies (e.g., \'Hello\' and \'hello\' should be counted as the same word). - The function should print a message for each file indicating the number of words processed. - The output file `word_counts.txt` should list the words in alphabetical order. You are provided with the following documentation for the `string.punctuation` constant: ```python string.punctuation: str A string containing all ASCII punctuation characters. ```","solution":"import os import string from collections import defaultdict def count_words(directory: str) -> None: Counts the frequency of each word in text files within a directory and writes results to a file. :param directory: Path to the directory containing the text files. word_count = defaultdict(int) # List all .txt files in the directory files = [f for f in os.listdir(directory) if f.endswith(\'.txt\')] # Process each file for file in files: file_path = os.path.join(directory, file) with open(file_path, \'r\', encoding=\'utf-8\') as f: text = f.read().lower() text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) words = text.split() for word in words: word_count[word] += 1 print(f\\"Processed {len(words)} words from file: {file}\\") # Write the word counts to word_counts.txt in alphabetical order with open(os.path.join(directory, \'word_counts.txt\'), \'w\', encoding=\'utf-8\') as f: for word in sorted(word_count.keys()): f.write(f\\"{word} {word_count[word]}n\\")"},{"question":"You are given a set of weather data with daily temperature readings over multiple years. Your task is to analyze the data using the `pandas` library and follow these steps: 1. Read the CSV file containing the weather data. 2. Extract the average temperature for each year. 3. Identify the year with the highest average temperature and the year with the lowest average temperature. 4. Create a plot using the `matplotlib` library that shows the average temperature for each year, highlighting the highest and lowest average temperature years differently on the plot. 5. Add appropriate labels, a title, and a legend to the plot. 6. Save the plot as an image file. The CSV file `weather_data.csv` has the following columns: - `date`: The date of the recorded temperature in \'YYYY-MM-DD\' format. - `temperature`: The recorded temperature for that date. Write a function named `analyze_temperature_trends` which accomplishes the above objectives. The function should not take any arguments and should save the plot as \'temperature_trends.png\'.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_temperature_trends(): # Read the CSV file df = pd.read_csv(\'weather_data.csv\') # Convert the date column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Extract year from the date column df[\'year\'] = df[\'date\'].dt.year # Calculate the average temperature for each year yearly_avg_temp = df.groupby(\'year\')[\'temperature\'].mean() # Identify the year with the highest and lowest average temperature highest_avg_temp_year = yearly_avg_temp.idxmax() lowest_avg_temp_year = yearly_avg_temp.idxmin() # Plot the average temperature for each year plt.figure(figsize=(10, 6)) plt.plot(yearly_avg_temp.index, yearly_avg_temp.values, label=\'Average Temperature\', color=\'blue\') # Highlight the highest and lowest average temperature years plt.scatter(highest_avg_temp_year, yearly_avg_temp[highest_avg_temp_year], color=\'red\', zorder=5) plt.scatter(lowest_avg_temp_year, yearly_avg_temp[lowest_avg_temp_year], color=\'green\', zorder=5) # Add labels, title, and legend to the plot plt.xlabel(\'Year\') plt.ylabel(\'Average Temperature\') plt.title(\'Average Temperature Trends Over the Years\') plt.legend([\'Average Temperature\', \'Highest Avg Temp\', \'Lowest Avg Temp\']) # Save the plot as an image file plt.savefig(\'temperature_trends.png\') # Note: This function assumes the existence of \'weather_data.csv\' in the working directory. # Please ensure the dataset is available when running the function."},{"question":"You are given a list of unique integers, where each integer is between 1 and n inclusive, except for one integer that is missing and one integer that is duplicated. Your task is to identify the missing integer and the duplicated integer. # Required Function Write a function named `find_missing_and_duplicate(nums: List[int]) -> Tuple[int, int]` that performs the following tasks: 1. Takes a list of integers `nums` as its parameter. 2. Analyzes the list to find both the missing integer and the duplicated integer. 3. Returns a tuple where the first element is the missing integer and the second element is the duplicated integer. # Constraints - The length of the list `nums` is `n`, where `n` is the size of the expected range of integers (from 1 to n). - All integers in the list `nums` are between 1 and n inclusive. - There is exactly one missing integer and one duplicated integer. # Example ```python from typing import List, Tuple def find_missing_and_duplicate(nums: List[int]) -> Tuple[int, int]: # Implement your function here pass # Example of usage result = find_missing_and_duplicate([3, 1, 2, 5, 3]) print(result) # Output should be (4, 3) ``` # Explanation In the example `[3, 1, 2, 5, 3]`, the number `4` is missing and the number `3` is duplicated. The function should return `(4, 3)`. Ensure your solution is efficient and follows good documentation standards.","solution":"from typing import List, Tuple def find_missing_and_duplicate(nums: List[int]) -> Tuple[int, int]: Identifies the missing and duplicated integers from a list of unique integers where one integer is missing and one is duplicated. n = len(nums) total_sum = sum(range(1, n + 1)) actual_sum = sum(nums) total_square_sum = sum(x * x for x in range(1, n + 1)) actual_square_sum = sum(x * x for x in nums) # Using the formulas: # total_sum - actual_sum = missing - duplicate # total_square_sum - actual_square_sum = missing^2 - duplicate^2 = (missing + duplicate) * (missing - duplicate) diff = total_sum - actual_sum sum_diff = (total_square_sum - actual_square_sum) // diff missing = (diff + sum_diff) // 2 duplicate = sum_diff - missing return missing, duplicate"},{"question":"You are tasked with writing a Python function to simulate rolling a pair of six-sided dice a given number of times and return the results. Dice rolls are commonly used in board games and simulations, where each die shows a number between 1 and 6 inclusive. Your task is to implement the following function: ```python def roll_dice(num_rolls: int) -> List[Tuple[int, int]]: Simulates rolling a pair of six-sided dice num_rolls times. Parameters: - num_rolls: An integer representing the number of times to roll the dice. Returns: - A list of tuples, where each tuple contains two integers representing the result of each die. ``` **Constraints:** - You must use the `random.randint` function to generate the roll results. - Ensure that the number of rolls (`num_rolls`) is a positive integer. If not, raise a ValueError with an appropriate message. - The function should return a list of tuples, with each tuple containing two values representing each die\'s result in a roll. **Objective:** - Understand how to use the `random` module to generate random numbers. - Practice creating functions that perform repeated tasks and return a collection of results. - Handle input validation and exceptions appropriately.","solution":"import random from typing import List, Tuple def roll_dice(num_rolls: int) -> List[Tuple[int, int]]: Simulates rolling a pair of six-sided dice num_rolls times. Parameters: - num_rolls: An integer representing the number of times to roll the dice. Returns: - A list of tuples, where each tuple contains two integers representing the result of each die. Raises: - ValueError: If num_rolls is not a positive integer. if num_rolls <= 0: raise ValueError(\\"The number of rolls must be a positive integer.\\") rolls = [] for _ in range(num_rolls): roll = (random.randint(1, 6), random.randint(1, 6)) rolls.append(roll) return rolls"},{"question":"You are tasked with implementing a function that determines whether a given grid represents a valid Sudoku solution. A valid Sudoku solution requires that each row, each column, and each of the nine 3x3 sub-grids (also called boxes) contain all digits from 1 to 9 exactly once. We will use `numpy` for our array manipulations. The specifics for the implementation are as follows: - **Function Name**: `is_valid_sudoku` - **Inputs**: - `grid` (numpy.ndarray): A 2D numpy array of integers with shape `(9, 9)` representing the Sudoku grid, where each integer is between 1 and 9. - **Output**: - A boolean indicating whether the Sudoku grid is a valid solution. Your function should: 1. Verify that each row contains digits 1 to 9 exactly once. 2. Verify that each column contains digits 1 to 9 exactly once. 3. Verify that each 3x3 sub-grid contains digits 1 to 9 exactly once. Here is the function signature: ```python def is_valid_sudoku(grid): # Your implementation here pass ``` Ensure your implementation checks the specified conditions for rows, columns, and sub-grids. You may find `numpy.unique` useful for verifying the presence of digits 1 to 9 in rows, columns, and sub-grids.","solution":"import numpy as np def is_valid_sudoku(grid): Determines if the given Sudoku grid is a valid solution. Parameters: grid (numpy.ndarray): A 2D numpy array of integers with shape (9, 9). Returns: bool: True if the grid represents a valid Sudoku solution, False otherwise. def is_valid_group(group): return sorted(group) == list(range(1, 10)) # Check rows for row in grid: if not is_valid_group(row): return False # Check columns for col in grid.T: if not is_valid_group(col): return False # Check 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): sub_grid = grid[i:i+3, j:j+3].flatten() if not is_valid_group(sub_grid): return False return True"},{"question":"You are tasked with writing a function called `flatten_dict` that takes a nested dictionary and flattens it. The flattened dictionary will have keys as the concatenation of the nested keys separated by a \\".\\". Here are the detailed steps and constraints for your function: 1. The function shall have the following signature: ```python def flatten_dict(d: Dict[str, Any], parent_key: str = \\"\\", sep: str = \\".\\") -> Dict[str, Any]: ``` 2. The function should return a flattened version of the given dictionary `d`. 3. If the same key name appears in both nested dictionaries, they should be combined with the separator `sep` in the flat dictionary. 4. The nested dictionary keys should be concatenated with the given separator. 5. You can assume all keys in the dictionary and nested dictionaries are strings. Here\'s an example to clarify the requirements: - Example: ```python d = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } } } result = flatten_dict(d) # result should be {\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3} ```","solution":"from typing import Dict, Any def flatten_dict(d: Dict[str, Any], parent_key: str = \\"\\", sep: str = \\".\\") -> Dict[str, Any]: items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Create a function that takes a list of words and returns a dictionary where the keys are word lengths, and the values are lists of words of that length. Words should be case-insensitive and should be stored in lowercase in the dictionary. If an empty list is provided, the function should return an empty dictionary. The function should output with: dict: A dictionary with word lengths as keys and lists of words as values. You should write self-contained code starting with: ``` def word_length_dict(words_list): ```","solution":"def word_length_dict(words_list): Takes a list of words and returns a dictionary where the keys are word lengths, and the values are lists of words of that length. Words are case-insensitive and stored in lowercase in the dictionary. :param words_list: List of words (str) :return: Dictionary with word lengths as keys and lists of words of that length as values length_dict = {} for word in words_list: word_lower = word.lower() length = len(word_lower) if length in length_dict: length_dict[length].append(word_lower) else: length_dict[length] = [word_lower] return length_dict"},{"question":"You need to write a function called `find_unique_substrings` that finds all unique substrings of a given string of a specified length. Here are the steps the function should perform: 1. **Inputs**: The function should accept the following parameters: - A string `s`, which is the input string. - An integer `k`, which represents the length of the substrings to find. 2. **Processing**: - Create a set to store unique substrings of length `k`. - Iterate through the string `s` and extract each possible substring of length `k`. - Add each substring to the set to ensure that only unique substrings are kept. 3. **Output**: - Return the set of unique substrings. Here is the template for the function: ```python def find_unique_substrings(s, k): # Your code here pass ``` **Example:** If the function is called with: ```python print(find_unique_substrings(\\"abcabcabc\\", 3)) ``` The expected output should be: ```python {\'abc\', \'bca\', \'cab\'} ```","solution":"def find_unique_substrings(s, k): Finds all unique substrings of a given string of a specified length. Parameters: s (str): The input string. k (int): The length of the substrings to find. Returns: set: A set of unique substrings of length k. unique_substrings = set() if k > len(s) or k <= 0: return unique_substrings for i in range(len(s) - k + 1): substring = s[i:i+k] unique_substrings.add(substring) return unique_substrings"},{"question":"You are working with a dataset of temperature readings from different cities collected over a period of one year. The data has been provided in the form of a CSV file, where each row represents a daily temperature reading for a specific city. The columns are labeled as follows: - `\'Date\'`: the date of the reading in the format `YYYY-MM-DD`. - `\'City\'`: the name of the city. - `\'Temperature\'`: the temperature reading for that day in degrees Celsius. You need to analyze this data and implement a function `find_hottest_city()` that identifies the city with the highest average temperature over the year. Your task is to: 1. **Load the data** from a CSV file into a pandas DataFrame. Assume the file path is provided as an argument to the function. 2. **Calculate the average temperature for each city** over the course of the year. 3. **Identify the city with the highest average temperature**. 4. **Return the name of the city** with the highest average temperature. Below is the expected structure of the function: ```python import pandas as pd def find_hottest_city(file_path): # Load data data = pd.read_csv(file_path) # Calculate mean temperatures for each city city_avg_temps = data.groupby(\'City\')[\'Temperature\'].mean() # Find the hottest city hottest_city = city_avg_temps.idxmax() return hottest_city ``` Implement and return the name of the city with the highest average temperature from the function `find_hottest_city()`. Make sure to use the specified pandas APIs (`pandas.read_csv`, `pandas.DataFrame.groupby`, `pandas.DataFrame.mean`, and `pandas.Series.idxmax`).","solution":"import pandas as pd def find_hottest_city(file_path): Identifies the city with the highest average temperature over the year. Parameters: file_path (str): The file path to the CSV file containing the data. Returns: str: The name of the city with the highest average temperature. # Load data data = pd.read_csv(file_path) # Calculate mean temperatures for each city city_avg_temps = data.groupby(\'City\')[\'Temperature\'].mean() # Find the hottest city hottest_city = city_avg_temps.idxmax() return hottest_city"},{"question":"Create a function that calculates and returns the cosine similarity between two given text documents. The function should preprocess the text by converting it to lowercase, removing punctuation, and tokenizing it into words. The similarity measure should be based on the term frequency-inverse document frequency (TF-IDF) weighted vectors of the two documents. You should write self-contained code starting with: ``` from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity import string def calculate_cosine_similarity(doc1: str, doc2: str) -> float: def preprocess(text): # Convert to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) return text doc1 = preprocess(doc1) doc2 = preprocess(doc2) vectorizer = TfidfVectorizer() vectors = vectorizer.fit_transform([doc1, doc2]) return cosine_similarity(vectors[0:1], vectors[1:2])[0][0] ```","solution":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity import string def calculate_cosine_similarity(doc1: str, doc2: str) -> float: def preprocess(text): # Convert to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) return text doc1 = preprocess(doc1) doc2 = preprocess(doc2) vectorizer = TfidfVectorizer() vectors = vectorizer.fit_transform([doc1, doc2]) return cosine_similarity(vectors[0:1], vectors[1:2])[0][0]"},{"question":"Implement a function to generate all possible letter combinations from a provided string of digits, based on the mapping of numbers to letters on a traditional telephone keypad (2-9). The function should return a list of all possible combinations in alphabetical order. Note that: Each digit maps to a specific set of letters, for example: ``` 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" ``` The function should handle strings of varying lengths and return the combinations sorted in alphabetical order. If the input string contains any digit outside of the range 2-9, it should raise a ValueError. You should write self-contained code starting with: ```python from itertools import product def phone_combinations(digits): ```","solution":"from itertools import product def phone_combinations(digits): Generates all possible letter combinations based on a string of digits according to a traditional phone keypad. Parameters: digits (str): A string consisting of digits from 2 to 9. Returns: list: A list of all possible letter combinations in alphabetical order. Raises: ValueError: If the input contains any digit outside of the range 2-9. if not all(digit in \'23456789\' for digit in digits): raise ValueError(\\"Input contains invalid digit(s). Only digits 2-9 are allowed.\\") digit_to_letters = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } if not digits: return [] letter_groups = [digit_to_letters[digit] for digit in digits] combinations = [\'\'.join(combo) for combo in product(*letter_groups)] return sorted(combinations)"},{"question":"You are tasked with creating a function that takes a list of dictionary objects and writes them into an XML file. This type of data serialization is commonly used when dealing with configuration files and data exchange in web services. Your function `dict_to_xml` should take two arguments: - `data`: A list of dictionaries where each dictionary represents an item. - `xmlFilePath`: The file path where the generated XML file should be saved. The function should accomplish the following: 1. Create the root element `<items>`. 2. For each dictionary in the list, create a child element `<item>`. Within each `<item>`, add a sub-element for each key-value pair in the dictionary. 3. Write the XML tree to an XML file with appropriate formatting and indentation. **Function Signature:** ```python def dict_to_xml(data: list, xmlFilePath: str) -> None: ``` **Requirements:** - You must use the `xml.etree.ElementTree` module to create and write the XML document. - Each key in the dictionary should become a tag in the resulting XML, and its value should be the text content of that tag. # Example: Suppose you have a list of dictionaries as follows: ```python data = [ {\\"name\\": \\"John\\", \\"age\\": \\"23\\", \\"city\\": \\"New York\\"}, {\\"name\\": \\"Anna\\", \\"age\\": \\"30\\", \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Peter\\", \\"age\\": \\"35\\", \\"city\\": \\"Chicago\\"} ] ``` If you call `dict_to_xml(data, \'data.xml\')`, the `data.xml` file should contain: ```xml <items> <item> <name>John</name> <age>23</age> <city>New York</city> </item> <item> <name>Anna</name> <age>30</age> <city>Los Angeles</city> </item> <item> <name>Peter</name> <age>35</age> <city>Chicago</city> </item> </items> ``` #","solution":"import xml.etree.ElementTree as ET def dict_to_xml(data: list, xmlFilePath: str) -> None: root = ET.Element(\\"items\\") for entry in data: item = ET.SubElement(root, \\"item\\") for key, value in entry.items(): child = ET.SubElement(item, key) child.text = str(value) tree = ET.ElementTree(root) tree.write(xmlFilePath, encoding=\\"utf-8\\", xml_declaration=True)"},{"question":"You need to implement a function named `fibonacci_grid` that generates a grid of Fibonacci numbers. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The sequence starts with 0 and 1. Your task is to create a `m x n` grid where each cell contains a Fibonacci number in a row-major order, starting from the top-left corner. The sequence should continue left to right across each row and then proceed to the next row from top to bottom. **Function Signature:** ```python def fibonacci_grid(m: int, n: int) -> List[List[int]]: ``` # Requirements: 1. The function should return a two-dimensional list representing the grid with `m` rows and `n` columns filled with Fibonacci numbers. 2. The Fibonacci sequence should begin with 0 followed by 1. 3. Continue computing and placing Fibonacci numbers until the grid is completely filled. 4. The solution must handle grids of size 0 or 1, and should work for any positive integer values of `m` and `n`. # Example: Given input `m = 3` and `n = 4`, the function should return: ```python [ [0, 1, 1, 2], [3, 5, 8, 13], [21, 34, 55, 89] ] ``` # Notes: - Ensure input validation is performed where necessary. - Consider edge cases such as `m = 0` or `n = 0` and handle them appropriately. - The Fibonacci number generation should be efficient to handle reasonably large `m` and `n`. Here is a sample of how your function could be implemented: ```python from typing import List def fibonacci_grid(m: int, n: int) -> List[List[int]]: if m == 0 or n == 0: return [] def generate_fibonacci(k: int) -> List[int]: if k <= 0: return [] fib_seq = [0, 1] while len(fib_seq) < k: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:k] total_numbers = m * n fib_numbers = generate_fibonacci(total_numbers) grid = [] for i in range(m): row = fib_numbers[i * n:(i + 1) * n] grid.append(row) return grid ```","solution":"from typing import List def fibonacci_grid(m: int, n: int) -> List[List[int]]: if m <= 0 or n <= 0: return [] def generate_fibonacci(k: int) -> List[int]: fib_seq = [0, 1] while len(fib_seq) < k: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:k] total_numbers = m * n fib_numbers = generate_fibonacci(total_numbers) grid = [] for i in range(m): row = fib_numbers[i * n:(i + 1) * n] grid.append(row) return grid"},{"question":"You are to create a function that reads a given text input and performs a frequency analysis of each letter (a-z, case-insensitive). The function should then visualize the frequency distribution in the form of a horizontal bar chart using the `matplotlib` library in Python. Function Specification: - **Function Name**: `plot_letter_frequency` - **Parameters**: - `text` (string): A string of text for which to perform the frequency analysis. Inside the function: 1. Convert the text to lowercase to ensure case insensitivity. 2. Count the frequency of each letter (a-z) in the given text. 3. Use the `matplotlib` library to generate a horizontal bar chart: - The x-axis should represent the frequency. - The y-axis should represent the letters from \'a\' to \'z\'. 4. Set appropriate labels for the axes and a title for the chart. # Example: ```python plot_letter_frequency(\\"Hello World! This is a sample text to test letter frequency Analysis!\\") ``` This call should generate and display a horizontal bar chart showing the frequency of each letter in the given text.","solution":"import matplotlib.pyplot as plt from collections import Counter import string def plot_letter_frequency(text): Reads the given text, performs a frequency analysis of each letter (a-z, case-insensitive), and visualizes the frequency distribution with a horizontal bar chart. Parameters: text (string): A string of text for which to perform the frequency analysis. # Convert the text to lowercase to ensure case insensitivity text = text.lower() # Count the frequency of each letter (a-z) frequency = Counter(c for c in text if c in string.ascii_lowercase) # Extract the letters and their frequencies for the plot letters = sorted(frequency.keys()) frequencies = [frequency[letter] for letter in letters] # Create the plot plt.figure(figsize=(10, 8)) plt.barh(letters, frequencies, color=\'skyblue\') plt.xlabel(\'Frequency\') plt.ylabel(\'Letters\') plt.title(\'Frequency Analysis of Letters (a-z)\') plt.grid(True) plt.show()"},{"question":"**Problem: Balanced Parentheses Checker** In this problem, you are tasked with creating a function that takes a string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Your task is to implement the `is_balanced` function that returns `True` if the string is valid, and `False` otherwise. # Function: `is_balanced` Your task is to implement the `is_balanced` function which should take one parameter: 1. `s` (str): A string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The function should return a boolean value indicating if the string is valid. Use a stack data structure to solve this problem. # Requirements: - The function should correctly handle all nested bracket scenarios and return the correct boolean result. - Consider edge cases such as an empty string or a string with unbalanced brackets. - The function should have an O(n) time complexity where n is the length of the input string. # Example: ```python def is_balanced(s: str) -> bool: Check if the brackets in the string are balanced. :param s: A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is valid, False otherwise. ``` # Example Usage: ```python # Example 1: s = \\"{[()]}\\" print(is_balanced(s)) # Output: True # Example 2: s = \\"{[(])}\\" print(is_balanced(s)) # Output: False # Example 3: s = \\"({[({[]})]})\\" print(is_balanced(s)) # Output: True # Example 4: s = \\"\\" print(is_balanced(s)) # Output: True # Example 5: s = \\"([)]\\" print(is_balanced(s)) # Output: False ```","solution":"def is_balanced(s: str) -> bool: Check if the brackets in the string are balanced. :param s: A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are required to create a function called `get_unique_elements` that will analyze a list of elements and return a new list containing only the elements that appear exactly once in the original list. # Function Requirements: - **Function Name**: `get_unique_elements` - **Parameters**: - `elements`: A list of elements (integers, strings, etc.). - **Returns**: A list containing the elements that appear exactly once in the input list. # Detailed Steps: 1. **Count occurrences**: Use a dictionary to count the occurrences of each element in the input list. 2. **Collect unique elements**: Iterate through the dictionary and collect elements that have a count of exactly one. 3. **Return the list**: Return the list of elements that appear exactly once. # Example 1: Given the list: ```python [1, 2, 2, 3, 4, 4, 5] ``` After calling `get_unique_elements([1, 2, 2, 3, 4, 4, 5])`, the returned list should be: ```python [1, 3, 5] ``` # Example 2: Given the list: ```python [\'apple\', \'banana\', \'apple\', \'cherry\', \'banana\', \'date\'] ``` After calling `get_unique_elements([\'apple\', \'banana\', \'apple\', \'cherry\', \'banana\', \'date\'])`, the returned list should be: ```python [\'cherry\', \'date\'] ``` # Constraints: - The order of elements in the output list should be the same as their order of first appearance in the input list. - The elements in the input list can be of any hashable type. # Hints: - Utilize a collections.Counter or a dictionary to count the elements. - Use a list comprehension to filter elements based on their counts.","solution":"def get_unique_elements(elements): Returns a list of elements that appear exactly once in the input list. Parameters: elements (list): A list of elements (integers, strings, etc.). Returns: list: A list containing the elements that appear exactly once in the input list. from collections import Counter # Count the occurrences of each element element_counts = Counter(elements) # Collect unique elements (those that appear exactly once) unique_elements = [element for element in elements if element_counts[element] == 1] return unique_elements"},{"question":"You work for a logistics company that manages a fleet of vehicles and their trips. Each vehicle operates over a series of locations in a particular order, and you need to determine the sequence of operations and calculate the total distance covered. Your goal is to create a function named `calculate_total_distance` that will take the coordinates of the locations in the trip and return the total distance traveled by the vehicle. # Function Signature: ```python def calculate_total_distance(locations): locations : list of tuples : the list of coordinates (x, y) that denote the vehicle\'s trip locations ``` # Parameters: - `locations` (list of tuples): A list of tuples where each tuple represents the coordinates of a location `(x, y)` on the trip. # Instructions: 1. Import the necessary function: `math.sqrt` for distance calculations. 2. Initialize a variable `total_distance` to 0 to keep track of the accumulated distance. 3. Loop through consecutive pairs of locations: - Extract the coordinates of the current and next location. - Compute the Euclidean distance between the two locations. - Add the distance to `total_distance`. 4. Return the `total_distance` rounded to 2 decimal places. # Example Input: ```python locations = [(0, 0), (3, 4), (6, 8), (9, 12)] ``` # Expected Output: ```python calculate_total_distance(locations) ``` Should return: ```python 15.0 ``` # Explanation: The function calculates distances for each leg of the trip: - From (0, 0) to (3, 4) -> distance = 5.0 - From (3, 4) to (6, 8) -> distance = 5.0 - From (6, 8) to (9, 12) -> distance = 5.0 And sums them up to get the total distance: 5.0 + 5.0 + 5.0 = 15.0 Implement the function to compute the total distance accurately by following these steps.","solution":"import math def calculate_total_distance(locations): Calculate the total distance traveled given a list of coordinates. Parameters: locations (list of tuples): list of tuples representing the coordinates (x, y). Returns: float: total distance traveled, rounded to 2 decimal places. total_distance = 0 for i in range(len(locations) - 1): x1, y1 = locations[i] x2, y2 = locations[i + 1] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) total_distance += distance return round(total_distance, 2)"},{"question":"You are tasked with creating a function `generate_statistics()` to analyze a list of integers provided by the user and output a formatted summary table with the statistics: mean, median, mode, and range. The function should also visualize the distribution of the integers using the `matplotlib` library to create a histogram. Here are the specific requirements and steps for the function: 1. **Input Collection**: - Prompt the user to enter a series of integers separated by spaces. - Process the input to generate a list of integers. If the input is invalid, prompt the user again. 2. **Statistics Calculation**: - Compute the mean, median, mode, and range of the list of integers. - You may use the `statistics` library to assist in these calculations. 3. **Table Creation Using PrettyTable**: - Use the `prettytable.PrettyTable` class to create a table with two columns: \\"Statistic\\" and \\"Value\\". - Populate the table with the labels (\\"Mean\\", \\"Median\\", \\"Mode\\", \\"Range\\") and their corresponding values. 4. **Visualization Using Matplotlib**: - Create a histogram to display the distribution of the integers. - Label the axes appropriately and give the histogram a title indicating it represents the distribution of the user-provided integers. 5. **Output**: - Print the formatted table. - Display the histogram. # Function Requirements: - Function Name: `generate_statistics` - Input: None (user input via `input()`) - Output: A formatted table printed to the console and a histogram displayed - Use the `prettytable` library for table creation and formatting - Use the `matplotlib` library for histogram visualization Here is a code template to guide your implementation: ```python from prettytable import PrettyTable import matplotlib.pyplot as plt import statistics def generate_statistics(): while True: try: user_input = input(\\"Enter a series of integers separated by spaces: \\") num_list = list(map(int, user_input.split())) if not num_list: raise ValueError break except ValueError: print(\\"Invalid input. Please enter a series of integers separated by spaces.\\") mean = statistics.mean(num_list) median = statistics.median(num_list) mode = statistics.mode(num_list) value_range = max(num_list) - min(num_list) table = PrettyTable() table.field_names = [\\"Statistic\\", \\"Value\\"] table.add_row([\\"Mean\\", mean]) table.add_row([\\"Median\\", median]) table.add_row([\\"Mode\\", mode]) table.add_row([\\"Range\\", value_range]) print(table) plt.hist(num_list, bins=\'auto\') plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Provided Integers\') plt.show() ```","solution":"from prettytable import PrettyTable import matplotlib.pyplot as plt import statistics def generate_statistics(): while True: try: user_input = input(\\"Enter a series of integers separated by spaces: \\") num_list = list(map(int, user_input.split())) if not num_list: raise ValueError break except ValueError: print(\\"Invalid input. Please enter a series of integers separated by spaces.\\") mean = statistics.mean(num_list) median = statistics.median(num_list) mode = statistics.mode(num_list) value_range = max(num_list) - min(num_list) table = PrettyTable() table.field_names = [\\"Statistic\\", \\"Value\\"] table.add_row([\\"Mean\\", mean]) table.add_row([\\"Median\\", median]) table.add_row([\\"Mode\\", mode]) table.add_row([\\"Range\\", value_range]) print(table) plt.hist(num_list, bins=\'auto\') plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Provided Integers\') plt.show()"},{"question":"You are required to write a function in Python to determine if two given strings are anagrams of each other. Create a function named `are_anagrams`. This function should take two arguments: 1. `str1` (str): The first string. 2. `str2` (str): The second string. The function should return a boolean value (`True` or `False`) indicating whether the two strings are anagrams. # Requirements: - Ignore spaces and punctuation, and treat upper and lower case letters as equivalent. - Consider using the `re` module to remove non-alphanumeric characters. - An anagram is a word or phrase formed by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\". # Example: ```python str1 = \\"Dormitory\\" str2 = \\"Dirty room\\" # Expected Output: True ``` # Hint: To solve this task: 1. Use the `re.sub` function to remove non-alphanumeric characters from both strings. 2. Convert both strings to lowercase. 3. Sort the letters in each string and compare the results. Function Definition ```python def are_anagrams(str1, str2): # your code here ```","solution":"import re def are_anagrams(str1, str2): Determines if two strings are anagrams of each other, ignoring spaces, punctuation, and case. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_str1 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str1).lower() cleaned_str2 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str2).lower() # Sort the characters and compare return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"You are developing a simulation of a card game that uses a standard deck of 52 cards. Each card in the deck is represented by a two-character string, where the first character denotes the rank (2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, A), and the second character denotes the suit (C, D, H, S for Clubs, Diamonds, Hearts, and Spades respectively). Write a function named `shuffle_and_draw` that: 1. Shuffles the standard deck of 52 cards. 2. Draws the top five cards from the shuffled deck. 3. Returns both the shuffled deck (with the top five cards removed) and the list of the five drawn cards. Ensure that the deck is properly shuffled using the `random.shuffle` function. The remaining deck and the list of drawn cards should be returned in the format [remaining_deck, drawn_cards]. Note: You can pre-construct the deck in any way you find suitable, but it must contain all 52 cards exactly once.","solution":"import random def shuffle_and_draw(): # Constructing a standard deck of 52 cards ranks = \'23456789TJQKA\' suits = \'CDHS\' deck = [rank + suit for rank in ranks for suit in suits] # Shuffling the deck random.shuffle(deck) # Drawing the top five cards drawn_cards = deck[:5] remaining_deck = deck[5:] return remaining_deck, drawn_cards"},{"question":"In this problem, you need to implement a function called `generate_combinations` that generates all possible combinations of a given list of integers that sum up to a given target value. The function should take two input parameters: 1. `numbers`: A list of integers. 2. `target`: An integer that represents the target sum. The function should return a list of lists, where each inner list represents a unique combination of numbers from the input list that sum up to the target value. The combinations in the result list can be in any order, and the integers within each combination should be sorted in non-decreasing order. To solve this problem, consider using a recursive backtracking approach to explore all possible combinations. **Example:** ```python def generate_combinations(numbers, target): result = [] def backtrack(remain, comb, start): if remain == 0: # Combination found, add the current combination to the result result.append(list(comb)) return elif remain < 0: # Combination exceed the sum, stop exploration return for i in range(start, len(numbers)): comb.append(numbers[i]) backtrack(remain - numbers[i], comb, i) # Explore further with the number included comb.pop() # Backtrack to explore the next combination backtrack(target, [], 0) return result # Example usage: numbers = [2, 3, 6, 7] target = 7 print(generate_combinations(numbers, target)) # Expected output: # [ # [2, 2, 3], # [7] # ] ``` In this example: - `generate_combinations([2, 3, 6, 7], 7)` should return `[[2, 2, 3], [7]]`, because those are the combinations of numbers that add up to 7. - Note that the order of the combinations and the order of numbers within each combination does not matter.","solution":"def generate_combinations(numbers, target): result = [] def backtrack(remain, comb, start): if remain == 0: result.append(sorted(comb)) return elif remain < 0: return for i in range(start, len(numbers)): comb.append(numbers[i]) backtrack(remain - numbers[i], comb, i) comb.pop() backtrack(target, [], 0) unique_result = [] for comb in result: if comb not in unique_result: unique_result.append(comb) return unique_result"},{"question":"You are required to write a Python function `merge_dictionaries(dict1, dict2, keys)`, which takes in three parameters: 1. `dict1` (a dictionary): This is the first dictionary to be merged. 2. `dict2` (a dictionary): This is the second dictionary to be merged. 3. `keys` (a list of strings): This list specifies the set of keys that should be considered in the merge. The function should: 1. Create and return a new dictionary that contains key-value pairs from both `dict1` and `dict2`, but only for keys specified in the `keys` list. 2. If a key exists in both dictionaries, prefer the value from `dict2`. 3. If a key is missing in both dictionaries, it should not appear in the resulting dictionary. 4. Handle the following edge cases: - If `keys` is empty, return an empty dictionary. - If both dictionaries are empty, return an empty dictionary. # Example: ```python dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 20, \'c\': 30, \'d\': 40} keys = [\'a\', \'b\', \'d\'] merge_dictionaries(dict1, dict2, keys) # Output should be: {\'a\': 1, \'b\': 20, \'d\': 40} ``` **Make sure your function handles various edge cases and performs efficiently for larger inputs.**","solution":"def merge_dictionaries(dict1, dict2, keys): Merges dict1 and dict2 based on the specified keys list. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. keys (list): A list of keys to consider in the merge. Returns: dict: A new dictionary containing key-value pairs from both dict1 and dict2 as specified in the keys list. Values from dict2 take precedence if the same key exists in both dictionaries. result = {} for key in keys: if key in dict2: result[key] = dict2[key] elif key in dict1: result[key] = dict1[key] return result"},{"question":"You are to write a Python function named `process_transaction` that simulates a basic transaction system where a user can credit or debit an account. The function should handle input and validation to ensure that the transactions are processed correctly. Here are the detailed requirements for the function: 1. **Initial Balance**: - The function should start with an initial account balance of `0`. 2. **User Input for Transaction Type**: - Prompt the user to enter a transaction type (`credit` or `debit`). - If the input is invalid or empty, prompt the user again until a valid input is received. 3. **User Input for Amount**: - Prompt the user to enter an amount to credit or debit. - If the input is invalid (non-numeric, less than or equal to zero), prompt the user again until a valid input is received. 4. **Process Transaction**: - For `credit`, add the valid amount to the account balance. - For `debit`, subtract the valid amount from the account balance if the balance is sufficient. If the balance is insufficient, prompt the user with an error message and do not process the transaction. 5. **Option to Continue**: - After each transaction, ask the user if they want to perform another transaction (`Y` for yes, `N` for no). - If the user chooses `N`, terminate the function. - If the user chooses `Y`, repeat the process for transaction type and amount. 6. **Final Balance**: - Upon termination, print the final account balance. Your function should be: ```python def process_transaction(): # Implement this function as described. ```","solution":"def process_transaction(): balance = 0 def get_transaction_type(): while True: transaction_type = input(\\"Enter transaction type (credit/debit): \\").strip().lower() if transaction_type in {\\"credit\\", \\"debit\\"}: return transaction_type print(\\"Invalid transaction type. Please enter \'credit\' or \'debit\'.\\") def get_amount(): while True: try: amount = float(input(\\"Enter amount: \\").strip()) if amount > 0: return amount print(\\"Amount must be greater than zero.\\") except ValueError: print(\\"Invalid amount. Please enter a numeric value.\\") while True: transaction_type = get_transaction_type() amount = get_amount() if transaction_type == \\"credit\\": balance += amount elif transaction_type == \\"debit\\": if amount <= balance: balance -= amount else: print(f\\"Insufficient balance. Your current balance is {balance:.2f}.\\") continue_transaction = input(\\"Do you want to perform another transaction? (Y/N): \\").strip().upper() if continue_transaction != \\"Y\\": break print(f\\"Final account balance is {balance:.2f}\\")"},{"question":"Write a function that takes a string and an integer n as input and returns all unique substrings of length n. The function should consider substrings that are case sensitive, which means \'a\' and \'A\' are different. If n is greater than the length of the string, the function should return an empty list. The response should be sorted in lexicographical order. You should write self-contained code starting with: ```python def find_substrings(s, n): ```","solution":"def find_substrings(s, n): Returns all unique substrings of length n in lexicographical order. Case sensitive substrings. :param s: input string :param n: length of substrings :return: list of unique substrings of length n in lexicographical order if n > len(s): return [] substrings = set(s[i:i+n] for i in range(len(s) - n + 1)) return sorted(substrings)"},{"question":"Given a dictionary representing employees and their salary increases over several years, create a pandas DataFrame to display the total salary increase for each employee. Use collections.defaultdict to aggregate the increases for each employee. The function should output: pandas.core.frame.DataFrame: A DataFrame with columns \'Employee\' and \'Total Increase\', sorted by \'Employee\'. You should write self-contained code starting with: ``` import pandas as pd from collections import defaultdict def calculate_total_increases(employee_increases): ```","solution":"import pandas as pd from collections import defaultdict def calculate_total_increases(employee_increases): Calculate the total salary increase for each employee. Args: employee_increases (dict): A dictionary where the key is the employee name and the value is a list of salary increases over the years. Returns: pandas.DataFrame: A DataFrame with columns \'Employee\' and \'Total Increase\', sorted by \'Employee\'. total_increases = defaultdict(int) for employee, increases in employee_increases.items(): total_increases[employee] += sum(increases) df = pd.DataFrame(list(total_increases.items()), columns=[\'Employee\', \'Total Increase\']) df.sort_values(by=\'Employee\', inplace=True) return df"},{"question":"You are asked to develop a function that evaluates the similarity between two strings using the Levenshtein distance metric. The Levenshtein distance is a measure of the difference between two sequences, calculated as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Your function will be named `levenshtein_distance`. Here are the detailed requirements for your function: # Requirements 1. **Function Name:** `levenshtein_distance` 2. **Inputs:** - `str1`: A string representing the first sequence. - `str2`: A string representing the second sequence. # Instructions 1. Initialize a matrix of size `(len(str1) + 1) x (len(str2) + 1)`. 2. Fill in the base cases for the matrix where one of the strings is empty. 3. Iterate over the matrix to fill in the minimal edit distances between substrings of `str1` and `str2`. 4. Return the value in the bottom-right cell of the matrix, which represents the Levenshtein distance between the two input strings. # Example Usage Assume you have the following strings: ```python str1 = \\"kitten\\" str2 = \\"sitting\\" ``` You should be able to call: ```python distance = levenshtein_distance(str1, str2) print(distance) # Output should be 3 ``` Here\'s the expected implementation: ```python def levenshtein_distance(str1, str2): # Initialize the matrix m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: transforming empty string to a prefix of the other string for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Substitution # The Levenshtein distance is in the bottom-right cell return dp[-1][-1] ```","solution":"def levenshtein_distance(str1, str2): Calculates the Levenshtein distance between two strings. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: transforming empty string to a prefix of the other string for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Substitution # The Levenshtein distance is in the bottom-right cell return dp[-1][-1]"},{"question":"Given a list of dictionaries representing various products in a store and a category name, filter out the products that belong to the specified category, sort them by price in ascending order, and display the list. If the category is not found in any product, raise an error. Each dictionary contains: - \'product_id\': Unique identifier for the product (integer). - \'name\': Name of the product (string). - \'category\': Category of the product (string). - \'price\': Price of the product (float). Note that: The price value should be a positive number. If any price is found to be non-positive, raise an error. The function should raise the exception for: - ValueError: If the specified category is not found in any product. - ValueError: If any product has a non-positive price. The function should return with: - list: A list of dictionaries with products from the specified category, sorted by price in ascending order. You should write self-contained code starting with: ``` def filter_and_sort_products(products, category_name): ```","solution":"def filter_and_sort_products(products, category_name): Filters products by a given category and sorts them by price in ascending order. Parameters: products (list): List of product dictionaries. category_name (str): The category to filter by. Returns: list: Sorted list of product dictionaries in the specified category. Raises: ValueError: If no products match the specified category or if any product\'s price is non-positive. # Validate that all prices are positive numbers for product in products: if product[\'price\'] <= 0: raise ValueError(\\"Product price must be a positive number\\") # Filter products by the given category filtered_products = [product for product in products if product[\'category\'] == category_name] # If no products match the category, raise an error if not filtered_products: raise ValueError(f\\"No products found in category \'{category_name}\'\\") # Sort the filtered products by price in ascending order sorted_products = sorted(filtered_products, key=lambda x: x[\'price\']) return sorted_products"},{"question":"** You are given a dataset in the form of a CSV file that includes information about various car models and their specifications. Your task is to create a function `analyze_and_plot_car_data` that reads specified columns from the CSV file, performs a given statistical operation on those columns, and plots a histogram of values for one of the columns specified. # Function Definition ```python def analyze_and_plot_car_data(filename, columns, operation, plot_column): Reads specific columns from a CSV file, performs a statistical operation, and plots a histogram. Parameters: filename (str): The path to the CSV file. columns (list of int): List of column indices to use for the statistical operation. operation (str): The statistical operation to perform. One of \'SUM\' (Sum), \'MED\' (Median), \'VAR\' (Variance). plot_column (int): The index of the column for which to plot a histogram. Returns: pandas.Series: The result of the statistical operation. ``` # Input 1. **filename**: The path to the CSV file containing car data. 2. **columns**: A list of integers, each representing the index of a column in the CSV file that the user wants to analyze. The list should contain exactly two different integers. 3. **operation**: A string specifying the statistical operation to perform on the data. It can be one of \'SUM\' for sum, \'MED\' for median, or \'VAR\' for variance. 4. **plot_column**: An integer representing the index of the column for which a histogram will be plotted. # Output 1. A pandas Series with the result of the specified operation applied to the columns. 2. A histogram plot of the specified column using matplotlib. # Example Usage Assume we have a CSV file `cars_data.csv` structured as follows: ``` make,model,year,engine_size,horsepower,weight,mileage Toyota,Corolla,2018,1.8,132,2800,30 Ford,Mustang,2020,5.0,450,3700,20 ... ``` Calling `analyze_and_plot_car_data(\'cars_data.csv\', [3, 4], \'SUM\', 2)` will print the sum values of engine size and horsepower, and plot a histogram for the year of the cars. **","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_and_plot_car_data(filename, columns, operation, plot_column): Reads specific columns from a CSV file, performs a statistical operation, and plots a histogram. Parameters: filename (str): The path to the CSV file. columns (list of int): List of column indices to use for the statistical operation. operation (str): The statistical operation to perform. One of \'SUM\' (Sum), \'MED\' (Median), \'VAR\' (Variance). plot_column (int): The index of the column for which to plot a histogram. Returns: pandas.Series: The result of the statistical operation. # Read the CSV file df = pd.read_csv(filename) # Select the specified columns selected_columns = df.iloc[:, columns] # Perform the specified operation if operation == \'SUM\': result = selected_columns.sum() elif operation == \'MED\': result = selected_columns.median() elif operation == \'VAR\': result = selected_columns.var() else: raise ValueError(\\"Invalid operation. Use \'SUM\', \'MED\', or \'VAR\'.\\") # Plot the histogram for the specified column plt.figure(figsize=(10, 6)) df.iloc[:, plot_column].plot(kind=\'hist\', bins=20, edgecolor=\'black\') plt.title(f\'Histogram for column at index {plot_column}\') plt.xlabel(df.columns[plot_column]) plt.ylabel(\'Frequency\') plt.show() return result"},{"question":"In this problem, you are required to write a function to simulate a queue system using two stacks. The function you need to implement is `QueueUsingStacks`. Your class should provide three methods, `enqueue`, `dequeue`, and `peek`, which simulate queue operations using stacks. # Implementation Requirements: 1. The `QueueUsingStacks` class should utilize two stacks internally. You can use Python lists to simulate stack operations. 2. The `enqueue` method should add an element to the end of the queue. 3. The `dequeue` method should remove and return the element from the front of the queue. 4. The `peek` method should return the element at the front of the queue without removing it. 5. All method names and functionalities should be case-sensitive and match the specifications. 6. Handle edge cases where the queue is empty appropriately. The internal stacks should be manipulated so that they adhere to the First-In-First-Out (FIFO) principle required by a queue. # Example Usage: ```python class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, value): # Implementation details pass def dequeue(self): # Implementation details pass def peek(self): # Implementation details pass # Test the QueueUsingStacks class q = QueueUsingStacks() q.enqueue(1) q.enqueue(2) print(q.peek()) # Output: 1 print(q.dequeue()) # Output: 1 print(q.dequeue()) # Output: 2 ``` This class will simulate queue operations while using two stacks internally, ensuring that the methods `enqueue`, `dequeue`, and `peek` function correctly according to the FIFO principle.","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, value): self.stack1.append(value) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: raise IndexError(\\"dequeue from an empty queue\\") return self.stack2.pop() def peek(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: raise IndexError(\\"peek from an empty queue\\") return self.stack2[-1]"},{"question":"You are tasked with writing a function called `restaurant_reservation` that manages reservations for a restaurant. Given two lists: `listCustomers` and `listTables`, follow these steps: 1. Distribute customers to tables as evenly as possible. 2. Distribute any remaining customers randomly across the tables until all tables are full or all customers are seated. 3. Ensure no table exceeds its maximum seating capacity. # Requirements: - Use `random.sample` to randomly select customers from the list. - Each table should have a maximum capacity attribute. # Function Signature: ```python def restaurant_reservation(listCustomers: list, listTables: list) -> dict: ``` # Parameters: - `listCustomers`: A list of customer names (strings). - `listTables`: A list of tables, where each table is a dictionary with keys `\\"max_capacity\\"` (an integer) and `\\"seated_customers\\"` (an initially empty list). # Returns: - A dictionary where the keys are table indices and the values are lists of customer names seated at each respective table. # Example ```python customers = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\", \\"Frank\\"] tables = [{\\"max_capacity\\": 2, \\"seated_customers\\": []}, {\\"max_capacity\\": 3, \\"seated_customers\\": []}] result = restaurant_reservation(customers, tables) print(result) # Output: {0: [\'Alice\', \'David\'], 1: [\'Charlie\', \'Frank\', \'Eve\']} ``` # Notes: - The function should not modify the original `listCustomers` and `listTables` lists. - If customers remain after all tables are filled to capacity, those customers should remain unassigned.","solution":"import random def restaurant_reservation(listCustomers, listTables): result = {i: [] for i in range(len(listTables))} customers = listCustomers[:] random.shuffle(customers) for table_index, table in enumerate(listTables): while len(result[table_index]) < table[\\"max_capacity\\"] and customers: result[table_index].append(customers.pop()) return result"},{"question":"You need to design a function that visualizes polynomial regression results. The function `plotPolynomialRegression` should plot the regression curve and the scatter plot using the `matplotlib` library. Additionally, you must ensure that the figure gets closed after plotting to avoid excessive memory usage when dealing with multiple plots. Write a function `plotPolynomialRegression` that takes the following parameters: - `coefficients`: A list of coefficients for the polynomial where index represents the power of the corresponding term. - `X`: Numpy array representing the feature values. - `y`: Numpy array representing the target values. - `title`: A string representing the title of the plot. The function should do the following: - Generate the polynomial curve based on the provided coefficients. - Plot the scatter plot of the original data points. - Plot the polynomial regression curve. - Add the title to the plot using the provided `title` parameter. - Save the plot image with the title as the filename (replacing spaces in the title with underscores). - Close the figure window after saving the plot to manage memory usage efficiently. Your function should be structured as follows: ```python def plotPolynomialRegression(coefficients, X, y, title): # Your code goes here ``` Make sure to handle edge cases, such as empty input arrays and non-numeric values within the arrays. Use appropriate mathematical functions to evaluate the polynomial values and ensure the plot is visually accurate.","solution":"import numpy as np import matplotlib.pyplot as plt def plotPolynomialRegression(coefficients, X, y, title): Plots the polynomial regression results including the scatter plot of the original data and the polynomial regression curve. Parameters: coefficients (list): Coefficients of the polynomial where index represents the power of the corresponding term. X (np.ndarray): Feature values. y (np.ndarray): Target values. title (str): Title of the plot, also used as the filename. if len(X) == 0 or len(y) == 0: raise ValueError(\\"Input arrays X and y must not be empty.\\") if not all(isinstance(item, (int, float, np.integer, np.floating)) for item in X) or not all(isinstance(item, (int, float, np.integer, np.floating)) for item in y): raise ValueError(\\"All elements in X and y must be numeric.\\") # Sorting X for better plot results sorted_indices = np.argsort(X) X_sorted = X[sorted_indices] y_sorted = y[sorted_indices] # Generate polynomial regression curve values poly_values = np.polyval(coefficients[::-1], X_sorted) # Plotting plt.figure() plt.scatter(X, y, color=\'blue\', label=\'Data Points\') plt.plot(X_sorted, poly_values, color=\'red\', label=\'Polynomial Regression Curve\') plt.title(title) plt.xlabel(\'X values\') plt.ylabel(\'y values\') plt.legend() # Save the figure sanitized_title = title.replace(\\" \\", \\"_\\") + \\".png\\" plt.savefig(sanitized_title) # Close the plot to avoid memory issues plt.close()"},{"question":"Train a K-Nearest Neighbors (KNN) classifier using synthetic data and plot the decision boundary. Evaluate the model\'s accuracy on the training data. The function should output: tuple: A tuple containing three elements: 1. model: The trained KNeighborsClassifier model object from sklearn. 2. accuracy (float): The calculated accuracy of the model on the training data. 3. ax (matplotlib.axes.Axes): An Axes object displaying the scatter plot of the data points with the decision boundary overlayed on it. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_classification from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score from matplotlib.colors import ListedColormap def task_func(num_samples=100, n_neighbors=5): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_classification from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score from matplotlib.colors import ListedColormap def task_func(num_samples=100, n_neighbors=5): Trains a K-Nearest Neighbors (KNN) classifier using synthetic data and plots the decision boundary. Parameters: num_samples (int): Number of samples to generate for synthetic data n_neighbors (int): Number of neighbors to use for KNN Returns: tuple: (model, accuracy, ax) where model: The trained KNeighborsClassifier model accuracy: Accuracy of the model on the training data ax: The Axes object with the scatter plot and decision boundary # Generate synthetic data X, y = make_classification(n_samples=num_samples, n_features=2, n_classes=2, n_clusters_per_class=1, n_informative=2, n_redundant=0, random_state=42) # Train KNN classifier model = KNeighborsClassifier(n_neighbors=n_neighbors) model.fit(X, y) # Calculate accuracy on the training data y_pred = model.predict(X) accuracy = accuracy_score(y, y_pred) # Create decision boundary plot h = 0.02 # Step size in the mesh x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) Z = model.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) cmap_light = ListedColormap([\'#FFAAAA\', \'#AAAAFF\']) cmap_bold = ListedColormap([\'#FF0000\', \'#0000FF\']) fig, ax = plt.subplots() ax.contourf(xx, yy, Z, cmap=cmap_light) ax.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor=\'k\', s=20) return model, accuracy, ax"},{"question":"In this problem, you need to create a function called `create_mosaic_pattern(t, colorList, numRows, numCols, sideLength)`. This function uses the Python `turtle` library to draw a mosaic pattern consisting of squares, where each square can be one of the colors provided in `colorList`. Specifically, `colorList` is a list of strings, each representing a color. `numRows` and `numCols` are integers representing the number of rows and columns in the mosaic, respectively. `sideLength` is an integer representing the length of each side of the squares. Your task is to: - Use `turtle.penup` and `turtle.goto` to position the turtle at the starting point of each square without drawing. - Use `turtle.pendown` and `turtle.fillcolor` to draw and fill each square with a color chosen from `colorList`. - Make sure to use nested loops to efficiently draw the rows and columns of squares. Here is a sample code snippet to illustrate the parameters: ```python colorList = [\\"red\\", \\"blue\\", \\"green\\", \\"yellow\\"] numRows = 5 numCols = 5 sideLength = 40 ``` The colors from `colorList` should be used in order, cycling through the list as needed. Use the `turtle` library documentation for reference to functions like `penup`, `pendown`, `goto`, and `fillcolor`. Note: The `turtle` graphics window can be closed by clicking on the close box when the program completes.","solution":"import turtle def create_mosaic_pattern(t, colorList, numRows, numCols, sideLength): Draws a mosaic pattern of squares using the turtle library. Parameters: t (turtle.Turtle): The turtle instance to draw with. colorList (list): The list of colors to cycle through for the squares. numRows (int): The number of rows in the mosaic. numCols (int): The number of columns in the mosaic. sideLength (int): The length of each side of the squares. for row in range(numRows): for col in range(numCols): t.penup() t.goto(col * sideLength, -row * sideLength) t.pendown() t.fillcolor(colorList[(row * numCols + col) % len(colorList)]) t.begin_fill() for _ in range(4): t.forward(sideLength) t.right(90) t.end_fill() # Hide turtle after drawing t.hideturtle()"},{"question":"Reads a text file containing integers (one per line), calculates the sum of all integers, and writes the result into a new text file in the same directory. The function should raise the following exceptions: FileNotFoundError if the input text file does not exist, and ValueError if any line in the file cannot be converted to an integer. The function should output with: str: The path to the new text file containing the sum. You should write self-contained code starting with: ``` def calculate_sum(input_file_path): ```","solution":"import os def calculate_sum(input_file_path): Reads a text file containing integers (one per line), calculates the sum of all integers, and writes the result into a new text file in the same directory. Args: input_file_path (str): Path to the input text file. Returns: str: The path to the new text file containing the sum. Raises: FileNotFoundError: If the input file does not exist. ValueError: If any line in the file cannot be converted to an integer. if not os.path.exists(input_file_path): raise FileNotFoundError(f\\"The file {input_file_path} does not exist.\\") total_sum = 0 try: with open(input_file_path, \'r\') as file: for line in file: total_sum += int(line.strip()) except ValueError as e: raise ValueError(f\\"Cannot convert line to integer: {str(e)}\\") # Creating the output file path output_file_path = os.path.join(os.path.dirname(input_file_path), \\"sum.txt\\") # Writing the sum to the output file with open(output_file_path, \'w\') as file: file.write(str(total_sum)) return output_file_path"},{"question":"You are asked to create a Python function to manage and tax transactions in a simple banking system. The function will interact with a database of user transactions, applying tax rules before finalizing the transactions. # Instructions: Implement a function `process_transactions` that will: 1. Accept a list of transactions, where each transaction is a dictionary containing the following keys: - `\'user_id\'`: a unique identifier for the user (integer) - `\'amount\'`: the transaction amount (float, where a positive value represents a deposit and a negative value represents a withdrawal) - `\'timestamp\'`: the transaction timestamp (integer, representing Unix epoch time) 2. Tax rules: - If the transaction amount is positive and exceeds 1000, a tax of 2% is applied to the amount that exceeds 1000. - If the transaction amount is negative, a flat processing fee of 5 is charged. 3. Return a new list of processed transactions. Each processed transaction should include the original keys as well as: - `\'tax\'`: the calculated tax or processing fee. # Input: - `transactions`: A list of dictionaries where each dictionary represents a transaction with the keys `user_id`, `amount`, and `timestamp`. # Output: - A list of dictionaries representing the processed transactions, each including an additional key `\'tax\'` indicating the applied tax or fee. # Example Usage: ```python transactions = [ {\'user_id\': 1, \'amount\': 1200.0, \'timestamp\': 1664643540}, {\'user_id\': 2, \'amount\': -200.0, \'timestamp\': 1664643540}, {\'user_id\': 3, \'amount\': 5000.0, \'timestamp\': 1664643540}, {\'user_id\': 1, \'amount\': -500.0, \'timestamp\': 1664643540} ] processed_transactions = process_transactions(transactions) # Expected Output [ {\'user_id\': 1, \'amount\': 1200.0, \'timestamp\': 1664643540, \'tax\': 4.0}, {\'user_id\': 2, \'amount\': -200.0, \'timestamp\': 1664643540, \'tax\': 5.0}, {\'user_id\': 3, \'amount\': 5000.0, \'timestamp\': 1664643540, \'tax\': 80.0}, {\'user_id\': 1, \'amount\': -500.0, \'timestamp\': 1664643540, \'tax\': 5.0} ] ``` # Constraints: - Each transaction is processed independently. - The timestamp is provided for contextual information only and does not impact tax calculation. - The solution must handle an arbitrary number of transactions efficiently. Implement the `process_transactions` function below. ```python def process_transactions(transactions): # Your implementation goes here pass ```","solution":"def process_transactions(transactions): Process a list of transactions by applying tax rules. :param transactions: List[Dict], a list of transaction dictionaries :return: List[Dict], a list of processed transaction dictionaries processed_transactions = [] for transaction in transactions: user_id = transaction[\'user_id\'] amount = transaction[\'amount\'] timestamp = transaction[\'timestamp\'] if amount > 1000: tax = (amount - 1000) * 0.02 elif amount < 0: tax = 5.0 else: tax = 0.0 processed_transaction = { \'user_id\': user_id, \'amount\': amount, \'timestamp\': timestamp, \'tax\': tax } processed_transactions.append(processed_transaction) return processed_transactions"},{"question":"You are required to implement a function `longest_common_subsequence` that finds the length of the longest subsequence present in both of the given two strings. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. The function signature is as follows: ```python def longest_common_subsequence(str1, str2): Finds the length of the longest common subsequence between two given strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: int: The length of the longest common subsequence. ``` The function should adhere to the following constraints and requirements: 1. Both input strings will be non-empty and consist only of lowercase English letters. 2. The function should use dynamic programming to solve the problem efficiently. Details on dynamic programming: - Create a 2-dimensional list `dp` where `dp[i][j]` represents the length of the longest common subsequence of `str1[0...i-1]` and `str2[0...j-1]`. - If `str1[i-1] == str2[j-1]`, then `dp[i][j] = dp[i-1][j-1] + 1`. - Else, `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`. - The length of the longest common subsequence will be found in `dp[len(str1)][len(str2)]`. # Example Given the following input: ```python str1 = \\"abcde\\" str2 = \\"ace\\" ``` The expected output would be: ```python 3 ``` Explanation: The longest common subsequence is \\"ace\\". Another example: ```python str1 = \\"abc\\" str2 = \\"def\\" ``` The expected output would be: ```python 0 ``` Explanation: There is no common subsequence between \\"abc\\" and \\"def\\".","solution":"def longest_common_subsequence(str1, str2): Finds the length of the longest common subsequence between two given strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: int: The length of the longest common subsequence. m, n = len(str1), len(str2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence is in the bottom-right cell of the array return dp[m][n]"},{"question":"In data structures, a linked list is a common way to implement a dynamic and efficient sequence of elements. There are two types of linked lists: singly linked lists and doubly linked lists. For this problem, we will focus on the doubly linked list, where each node has pointers to both the next and previous nodes in the sequence. One important operation is to reverse the doubly linked list, changing the direction of the links between nodes in place. **Task:** Write a function named `reverseDoublyLinkedList` that takes as input the head of a doubly linked list, reverses the links between the nodes in place, and returns the new head of the list. **Class Definitions:** ```python class Node: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None ``` **Function Signature:** ```python def reverseDoublyLinkedList(head: Node) -> Node: ``` **Parameters:** - `head`: The head node of the doubly linked list. **Output:** - The new head node of the reversed doubly linked list. **Example:** ```python # Creating a doubly linked list dll = DoublyLinkedList() node1 = Node(1) node2 = Node(2) node3 = Node(3) node1.next = node2 node2.prev = node1 node2.next = node3 node3.prev = node2 dll.head = node1 # Reversing the doubly linked list new_head = reverseDoublyLinkedList(dll.head) # Print the reversed linked list current = new_head while current is not None: print(current.value, end=\' \') current = current.next ``` The expected output for the doubly linked list reversal should be: ``` 3 2 1 ``` **Hint:** - Traverse the linked list while swapping the `next` and `prev` pointers for each node. - Update the head of the linked list to be the last node encountered during the traversal.","solution":"class Node: def __init__(self, value): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def reverseDoublyLinkedList(head: Node) -> Node: if head is None: return None current = head new_head = None while current is not None: # Swap the next and prev pointers temp = current.next current.next = current.prev current.prev = temp # Update the new head to the current node new_head = current # Move to the next node in the original list current = temp return new_head"},{"question":"You are required to write a Python function named `normalize_and_export_csv` that processes CSV files in a specified directory by normalizing numeric columns and exporting the results to a new directory, with `-normalized` appended to the original directory name. **Function Signature:** ```python def normalize_and_export_csv(data_dir: str, columns: List[int], fname_pattern: str = \'\') -> str: pass ``` **Requirements:** 1. Parameter `data_dir` (string): The path to the directory containing the CSV files to be processed. 2. Parameter `columns` (list of integers): The indices of the columns in the CSV files that need to be normalized. 3. Parameter `fname_pattern` (string, default is an empty string): A substring that a filename must contain to be processed. 4. Return the new directory path containing the normalized CSV files. 5. Use the `shutil.copy` function from the `shutil` library to copy files that don\'t match the `fname_pattern` criterion to the new directory. 6. For files to be processed, read the data, normalize the specified columns, and export the normalized data to the new directory. **Normalization Process:** - Implement a `normalize` function to scale the values in the specified columns to a range of [0, 1]. - Calculate the minimum and maximum values for each specified column and use these to normalize the data. **Assumptions:** - The CSV files have a header row which should be retained in the output files. - Handle missing or non-numeric data in specified columns gracefully by ignoring those entries during normalization. - Use `pandas` library for reading and writing CSV files, and `numpy` for numerical operations. **Example:** ```python normalize_and_export_csv(\'data_csv\', [2, 3], \'norm\') ``` Given the directory `data_csv` contains files, the function will: - Create a new directory `data_csv-normalized`. - Copy files without the substring \'norm\' in their name to the new directory. - For files with \'norm\' in their name, read the data using `pandas`, normalize the specified columns, and save the normalized data to the new directory with `-normalized` added to the original filename.","solution":"import os import shutil import pandas as pd import numpy as np from typing import List def normalize_and_export_csv(data_dir: str, columns: List[int], fname_pattern: str = \'\') -> str: new_dir = f\\"{data_dir}-normalized\\" # Create the new directory if it does not exist if not os.path.exists(new_dir): os.makedirs(new_dir) # Process each file in the directory for fname in os.listdir(data_dir): src_path = os.path.join(data_dir, fname) dst_path = os.path.join(new_dir, fname) # If the filename doesn\'t match the pattern if fname_pattern not in fname: shutil.copy(src_path, dst_path) continue # Read the CSV file df = pd.read_csv(src_path) # Normalize the specified columns for col in columns: if col < len(df.columns): colname = df.columns[col] max_val = df[colname].max() min_val = df[colname].min() if max_val != min_val: df[colname] = (df[colname] - min_val) / (max_val - min_val) # Save the normalized data to the new directory with `-normalized` in the filename fname_normalized = fname.replace(\'.csv\', \'-normalized.csv\') dst_path_normalized = os.path.join(new_dir, fname_normalized) df.to_csv(dst_path_normalized, index=False) return new_dir"},{"question":"You are given a list of integers `elements`. Your task is to write a function named `findLongestIncreasingSubsequence` that finds the longest strictly increasing subsequence within the list. The function should return this subsequence as a list containing the integers in the order they appear in the original list. If there are multiple subsequences of the same maximum length, return the one that appears first. The specific details to implement in this function are given below: Function Signature: ```python def findLongestIncreasingSubsequence(elements: list) -> list: pass ``` Input: - `elements`: A list of integers. Output: - A list of integers representing the longest strictly increasing subsequence. Example: ```python elements = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(findLongestIncreasingSubsequence(elements)) ``` Expected output: ```text [10, 22, 33, 50, 60, 80] ``` Example: ```python elements = [3, 10, 2, 1, 20] print(findLongestIncreasingSubsequence(elements)) ``` Expected output: ```text [3, 10, 20] ``` Notes: An understanding of dynamic programming or greedy algorithms can be helpful in solving this problem efficiently. The solution should handle the case where the longest strictly increasing subsequence is of length 0 (i.e., when `elements` is an empty list), returning an empty list in such cases.","solution":"def findLongestIncreasingSubsequence(elements): if not elements: return [] n = len(elements) lis = [1] * n previous = [-1] * n for i in range(1, n): for j in range(i): if elements[i] > elements[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 previous[i] = j max_length = max(lis) max_index = lis.index(max_length) longest_increasing_subsequence = [] while max_index != -1: longest_increasing_subsequence.append(elements[max_index]) max_index = previous[max_index] return longest_increasing_subsequence[::-1]"},{"question":"Create a function `merge_and_reverse(arr1, arr2)` that takes two lists of integers, merges them into one list, and returns the merged list in reversed order. The task involves understanding how to work with list operations, which includes merging lists and reversing them. Here are the specific steps your function `merge_and_reverse(arr1, arr2)` should perform: 1. Merge the two lists `arr1` and `arr2`. 2. Reverse the merged list. 3. Return the reversed list. **Function Signature:** ```python def merge_and_reverse(arr1: List[int], arr2: List[int]) -> List[int]: ``` **Input:** - `arr1` (List[int]): A list of integers. - `arr2` (List[int]): Another list of integers. **Output:** - Returns a list of integers which is the merged list of `arr1` and `arr2`, reversed. **Constraints:** - Each list `arr1` and `arr2` will have at most `10^4` integers. - The integers in the lists can be negative, zero, or positive.","solution":"from typing import List def merge_and_reverse(arr1: List[int], arr2: List[int]) -> List[int]: Merges two lists and returns the merged list in reversed order. merged_list = arr1 + arr2 reversed_list = merged_list[::-1] return reversed_list"},{"question":"You have been tasked with collecting information about earthquakes from a public API provided by the US Geological Survey (USGS). Your goal is to write a Python function `get_earthquake_data(start_date, end_date, min_magnitude)` that takes three parameters: `start_date` and `end_date` (both strings in the format \\"YYYY-MM-DD\\") and `min_magnitude` (a float representing the minimum magnitude of the earthquakes to be retrieved). The function should return a list of dictionaries containing information about earthquakes that occurred within the specified date range and have a magnitude greater than or equal to the specified minimum magnitude. Each dictionary should contain the earthquake\'s time, latitude, longitude, place, and magnitude. Use the USGS Earthquake API to fetch the earthquake data. The base URL for the earthquake data is `https://earthquake.usgs.gov/fdsnws/event/1/query`, and the query parameters should be formatted as follows: `format=geojson&starttime={start_date}&endtime={end_date}&minmagnitude={min_magnitude}`. Here is the function signature you should create: ```python import requests def get_earthquake_data(start_date: str, end_date: str, min_magnitude: float) -> list: pass ``` The USGS Earthquake API documentation can be found [here](https://earthquake.usgs.gov/fdsnws/event/1/).","solution":"import requests def get_earthquake_data(start_date: str, end_date: str, min_magnitude: float) -> list: base_url = \\"https://earthquake.usgs.gov/fdsnws/event/1/query\\" params = { \'format\': \'geojson\', \'starttime\': start_date, \'endtime\': end_date, \'minmagnitude\': min_magnitude } response = requests.get(base_url, params=params) response.raise_for_status() earthquake_data = response.json() earthquakes = [] for feature in earthquake_data[\'features\']: properties = feature[\'properties\'] geometry = feature[\'geometry\'] earthquake_info = { \'time\': properties[\'time\'], \'latitude\': geometry[\'coordinates\'][1], \'longitude\': geometry[\'coordinates\'][0], \'place\': properties[\'place\'], \'magnitude\': properties[\'mag\'], } earthquakes.append(earthquake_info) return earthquakes"},{"question":"You are tasked with implementing a Python class that represents a student\'s academic record. This class should allow for the addition of courses and their respective grades, calculation of the student\'s Grade Point Average (GPA), and retrieval of the list of courses sorted by grades in descending order. # Task 1. Implement a class named `AcademicRecord` with the following functionalities: - An `__init__` method that initializes an empty dictionary to store courses and their grades. - An `add_course` method that takes two parameters: `course_name` and `grade`, and adds them to the dictionary. The `grade` should be a float between 0.0 and 4.0, where 4.0 is the highest grade. - A `calculate_gpa` method that calculates and returns the GPA as a float. The GPA is the average of all the grades in the dictionary. - A `get_courses_sorted_by_grade` method that returns a list of course names sorted by their grades in descending order. # Requirements - The class should handle edge cases such as no courses added yet (return GPA as 0.0). - Ensure that the `grade` input is validated to be within the range 0.0 to 4.0 when adding a course; otherwise, raise a `ValueError`. # Example ```python # Creating an instance of AcademicRecord record = AcademicRecord() # Adding courses and grades record.add_course(\'Mathematics\', 3.5) record.add_course(\'Physics\', 4.0) record.add_course(\'Chemistry\', 3.0) # Calculating GPA print(record.calculate_gpa()) # Output: 3.5 # Retrieving courses sorted by grade print(record.get_courses_sorted_by_grade()) # Output: [\'Physics\', \'Mathematics\', \'Chemistry\'] ``` Make sure your implementation follows good coding practices and handles errors appropriately.","solution":"class AcademicRecord: def __init__(self): self.courses = {} def add_course(self, course_name, grade): if not 0.0 <= grade <= 4.0: raise ValueError(\\"Grade must be between 0.0 and 4.0\\") self.courses[course_name] = grade def calculate_gpa(self): if not self.courses: return 0.0 total_grades = sum(self.courses.values()) return total_grades / len(self.courses) def get_courses_sorted_by_grade(self): return sorted(self.courses, key=lambda course: self.courses[course], reverse=True)"},{"question":"You have been given the task to write a function that processes and visualizes data using the pandas library. The function should handle data cleaning, manipulation, and visualization through a line plot. The goal is to ensure smooth data handling and accurate representation of trends in a given dataset. The function `process_and_plot_data` should incorporate the following functionalities: 1. **Parameters:** - `data` (pandas.DataFrame): The DataFrame containing numerical columns with data to be processed. - `columns` (list of str): A list of column names to be included in the plot. These columns must be present in `data`. - `resample_rule` (str, optional): A rule for down-/up-sampling the data (e.g., \'M\' for monthly). Default is `None`. - `fill_method` (str, optional): Method to use for filling missing values after resampling (\'bfill\', \'ffill\', etc.). Default is `\'ffill\'`. - `figsize` (tuple, optional): Size of the figure. Default is `(10, 6)`. - `title` (str, optional): Title for the plot. Default is `\'Processed Data Plot\'`. 2. **Functionality:** - Resample the data if `resample_rule` is provided. - Fill missing values using `fill_method` after resampling. - Create a line plot for the specified columns. - Configure plot aesthetics such as figure size, title, and legend. **Function Signature:** ```python def process_and_plot_data(data, columns, resample_rule=None, fill_method=\'ffill\', figsize=(10, 6), title=\'Processed Data Plot\'): # Your implementation here ``` **Example Usage:** ```python import pandas as pd import numpy as np # Generate example data date_rng = pd.date_range(start=\'2020-01-01\', end=\'2020-01-10\', freq=\'D\') data = pd.DataFrame(date_rng, columns=[\'date\']) data[\'A\'] = np.random.randn(len(date_rng)) data[\'B\'] = np.random.randn(len(date_rng)) data.set_index(\'date\', inplace=True) process_and_plot_data(data, [\'A\', \'B\'], resample_rule=\'2D\', fill_method=\'bfill\', figsize=(12, 8), title=\'Example Data Plot\') ``` Your task is to implement the `process_and_plot_data` function using the required `pandas` functionalities as described.","solution":"import pandas as pd import matplotlib.pyplot as plt def process_and_plot_data(data, columns, resample_rule=None, fill_method=\'ffill\', figsize=(10, 6), title=\'Processed Data Plot\'): Processes the data by resampling and filling missing values if needed, then plots the specified columns. :param data: pandas DataFrame containing the data :param columns: list of column names to be included in the plot :param resample_rule: rule for resampling the data, by default None :param fill_method: method to use for filling missing values after resampling, by default \'ffill\' :param figsize: size of the figure, by default (10, 6) :param title: title for the plot, by default \'Processed Data Plot\' if resample_rule: data = data.resample(resample_rule).mean() data = data.fillna(method=fill_method) plt.figure(figsize=figsize) for column in columns: plt.plot(data.index, data[column], label=column) plt.title(title) plt.legend() plt.show()"},{"question":"You are required to write a Python function named `word_count_in_string` that calculates the frequency of each word in a given input string and returns a dictionary with words as keys and their corresponding counts as values. For the purpose of this task, words are sequences of characters separated by spaces, and the function should ignore punctuation and be case-insensitive. Function Signature ```python def word_count_in_string(input_string: str) -> dict: pass ``` Parameters - `input_string` (str): A string which contains words separated by spaces. Returns - `dict`: A dictionary where the keys are words (in lowercase) and the values are the frequency counts of those words. Example Usage ```python >>> word_count_in_string(\\"Hello, hello world! World.\\") {\'hello\': 2, \'world\': 2} ```","solution":"import re from collections import Counter def word_count_in_string(input_string: str) -> dict: Calculates the frequency of each word in a given input string. Args: input_string (str): A string which contains words separated by spaces. Returns: dict: A dictionary where the keys are words (in lowercase) and the values are the frequency counts of those words. # Remove punctuation using regex and convert to lowercase cleaned_string = re.sub(r\'[^ws]\', \'\', input_string).lower() # Split string into words words = cleaned_string.split() # Count the frequency of each word word_counts = Counter(words) return dict(word_counts)"},{"question":"You need to write a Python function that performs hierarchical clustering on a given dataset and produces a dendrogram to visualize the clustering hierarchy. This function will help you understand the hierarchical structure of the dataset by depicting the cluster merging process. Your function will be named `plot_dendrogram`, and it should meet the following requirements: **Function Signature:** ```python def plot_dendrogram(X, method=\'ward\'): ``` **Parameters:** - `X`: A numpy array or pandas DataFrame containing the data to cluster. Each row corresponds to a sample, and each column corresponds to a feature. - `method`: A string specifying the linkage method to use for hierarchical clustering. Default is \'ward\'. Other options include \'single\', \'complete\', and \'average\'. **Returns:** - A matplotlib `Axes` object. **Function Behavior:** 1. Perform hierarchical clustering on the given dataset using the specified linkage method. 2. Generate a dendrogram plot to visualize the clustering process. 3. Display the dendrogram with appropriate axis labels and title. **Additional Information:** - You should make use of `scipy.cluster.hierarchy.linkage` and `scipy.cluster.hierarchy.dendrogram`. - Your function should be able to handle different linkage methods dynamically based on the input parameter. **Example Usage:** Assuming `X` is a numpy array with shape (5, 2), your function should create a dendrogram showing the hierarchical clustering process. ```python import numpy as np import matplotlib.pyplot as plt from scipy.cluster.hierarchy import linkage, dendrogram def plot_dendrogram(X, method=\'ward\'): # Compute the linkage matrix Z = linkage(X, method=method) # Plot the dendrogram fig, ax = plt.subplots() dendrogram(Z, ax=ax) ax.set_title(\'Hierarchical Clustering Dendrogram\') ax.set_xlabel(\'Sample index\') ax.set_ylabel(\'Distance\') plt.show() return ax # Example usage X = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) plot_dendrogram(X) ```","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from scipy.cluster.hierarchy import linkage, dendrogram def plot_dendrogram(X, method=\'ward\'): This function performs hierarchical clustering on the given dataset and produces a dendrogram. Params: X (numpy array or pandas DataFrame): The data to cluster. Each row is a sample, each column is a feature. method (str): The linkage method to use. One of ‘single’, ‘complete’, ‘average’, or ‘ward’. Default is \'ward\'. Returns: matplotlib.axes._subplots.AxesSubplot: The matplotlib Axes object containing the dendrogram. if isinstance(X, pd.DataFrame): X = X.values # Compute the linkage matrix Z = linkage(X, method=method) # Plot the dendrogram fig, ax = plt.subplots() dendrogram(Z, ax=ax) ax.set_title(f\'Hierarchical Clustering Dendrogram ({method} linkage)\') ax.set_xlabel(\'Sample index\') ax.set_ylabel(\'Distance\') plt.show() return ax"},{"question":"You have been hired to build a recommendation system for an e-commerce website. Your task is to develop a function that suggests related products based on previous purchase patterns using the `pandas` and `numpy` libraries. Write a function `recommend_products(purchase_history_file: str, product_id: int, n_recommendations: int = 5) -> List[int]` that takes the following parameters: - `purchase_history_file`: A string representing the file path to a CSV file containing purchase history records. Each row in the file represents a purchase transaction and contains two columns: `user_id` and `product_id`. - `product_id`: An integer representing the ID of the product for which recommendations are to be made. - `n_recommendations`: An integer that specifies the number of related products to recommend. Your function should perform the following: 1. Load the purchase history from the provided file path into a `pandas` DataFrame. 2. Identify customers who have purchased the specified product. 3. Find other products purchased by these customers. 4. Calculate how frequently each of these products was purchased alongside the specified product. 5. Suggest the top `n_recommendations` products that were most frequently purchased together with the specified product. 6. Return a list of product IDs representing the recommendations. **Assume the purchase history file is properly formatted and contains valid data for the analysis.** Example: ```python recommend_products(\\"purchase_history.csv\\", 101, 3) # Output: [203, 305, 207] ```","solution":"import pandas as pd import numpy as np from typing import List def recommend_products(purchase_history_file: str, product_id: int, n_recommendations: int = 5) -> List[int]: Recommends related products based on previous purchase patterns. :param purchase_history_file: File path to the purchase history CSV file. :param product_id: The ID of the product to find recommendations for. :param n_recommendations: Number of related products to recommend (default is 5). :return: A list of recommended product IDs. # Load purchase history into a pandas DataFrame df = pd.read_csv(purchase_history_file) # Identify customers who have purchased the specified product customers = df[df[\'product_id\'] == product_id][\'user_id\'].unique() # Find other products purchased by these customers other_products = df[df[\'user_id\'].isin(customers) & (df[\'product_id\'] != product_id)] # Calculate the frequency of each product purchased alongside the specified product product_counts = other_products[\'product_id\'].value_counts() # Suggest the top n_recommendations most frequently purchased products recommendations = product_counts.head(n_recommendations).index.tolist() return recommendations"},{"question":"To maintain consistency in the style, complexity, and notable details from the given question, here is an additional coding assessment question: You are tasked with writing a Python function `fetch_and_save_country_info()` that fetches information about countries and saves it to a JSON file. Each country record should include its name, capital, population, area, and a list of languages spoken. To fetch the data, use the [REST Countries API](https://restcountries.com/) endpoint. Specifically, request data from URL `https://restcountries.com/v3.1/all`. The data for each country should be stored in the `data` directory in a JSON file named `countries_info.json`. The JSON file should be formatted as an array of dictionaries, where each dictionary contains: 1. The country name. 2. The country capital. 3. The country population. 4. The country area. 5. A list of languages. You must use the following libraries for completion: - `requests` for making HTTP requests. - `json` for handling JSON data. Here is a detailed guideline to help you: - Function name should be `fetch_and_save_country_info`. - Use `requests.get` to make the HTTP requests. - Use `response.json()` to parse JSON data from the response. - Use `json.dump` to serialize Python objects as JSON. # Example Invocation ```python fetch_and_save_country_info() ``` # Expected Outcome The function should create a file `data/countries_info.json` containing the countries information structured as described.","solution":"import os import requests import json def fetch_and_save_country_info(): url = \'https://restcountries.com/v3.1/all\' response = requests.get(url) countries_data = response.json() countries_info = [] for country in countries_data: name = country.get(\'name\', {}).get(\'common\', \'Unknown\') capital = country.get(\'capital\', [\'Unknown\'])[0] population = country.get(\'population\', 0) area = country.get(\'area\', 0) languages = list(country.get(\'languages\', {}).values()) countries_info.append({ \'name\': name, \'capital\': capital, \'population\': population, \'area\': area, \'languages\': languages }) os.makedirs(\'data\', exist_ok=True) with open(\'data/countries_info.json\', \'w\') as f: json.dump(countries_info, f, indent=4)"},{"question":"In this problem, you will use the Python `random` module to simulate the roll of a six-sided die. Your task is to create a function named `roll_die` that simulates rolling a die multiple times and calculates the frequency of each outcome. # Requirements: 1. The `roll_die` function should accept a single argument `num_rolls` which represents the number of times the die should be rolled. 2. The function should return a dictionary where the keys are the die faces (integers from 1 to 6) and the values are the frequency of each face appearing in the rolls. # Example: ```python frequencies = roll_die(1000) print(frequencies) ``` This might output a result similar to: ```python {1: 170, 2: 164, 3: 159, 4: 164, 5: 158, 6: 185} ``` # Hints: - Use the `randint` function from the `random` module to generate a random integer between 1 and 6. - Initialize a dictionary with keys 1 through 6 and values set to 0. - Iterate the number of times specified by `num_rolls`, generate a random number, and update the frequency count in the dictionary. # Additional Information: You may need to import the `random` module. The `randint` function generates a random integer between the specified inclusive lower and upper limits. Refer to the `random.randint` function documentation: `random.randint`: ```plain random.randint(a, b) Return a random integer N such that a <= N <= b. Alias for randrange(a, b+1). ``` # Example Implementation: ```python import random def roll_die(num_rolls): frequencies = {i: 0 for i in range(1, 7)} for _ in range(num_rolls): roll = random.randint(1, 6) frequencies[roll] += 1 return frequencies # Example Usage frequencies = roll_die(1000) print(frequencies) ``` Ensure you format your output dictionary correctly and handle the random number generation appropriately.","solution":"import random def roll_die(num_rolls): Simulates rolling a six-sided die \'num_rolls\' times and returns the frequency of each outcome. Args: num_rolls (int): The number of times the die should be rolled. Returns: dict: A dictionary where keys are die faces (1 to 6) and values are the frequency of each face. if num_rolls <= 0: return {i: 0 for i in range(1, 7)} frequencies = {i: 0 for i in range(1, 7)} for _ in range(num_rolls): roll = random.randint(1, 6) frequencies[roll] += 1 return frequencies"},{"question":"** Write a program that takes a string as input and returns the most frequent character in the string. If there is a tie for the most frequent character, return the one that comes first alphabetically. In case the given string is empty, return an empty string. # Function Signature: ```python def most_frequent_character(s: str) -> str: ``` **Requirements**: 1. The function `most_frequent_character` should accept a string `s` as its parameter. 2. The function should return a single character, which is the most frequent one in `s`. 3. If there are multiple characters with the same highest frequency, return the character that comes first in alphabetical order. 4. Return an empty string if the input string `s` is empty. # Examples: 1. `most_frequent_character(\\"abcbab\\")` should return `\'a\'`. 2. `most_frequent_character(\\"geeksforgeeks\\")` should return `\'e\'`. 3. `most_frequent_character(\\"zxyabc\\")` should return `\'a\'`. 4. `most_frequent_character(\\"\\")` should return `\'\'`. # Additional Information: - You may assume that the input string contains only lowercase alphabets. # Hint: Consider using a dictionary to count the frequency of each character. Then, sort the characters by frequency and alphabetically to determine the result. **","solution":"def most_frequent_character(s: str) -> str: if not s: return \\"\\" # Dictionary to store the frequency of each character frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the character with the maximum frequency max_freq = max(frequency.values()) candidates = [char for char, freq in frequency.items() if freq == max_freq] # Return the alphabetically first character among the candidates return sorted(candidates)[0]"},{"question":"You are given a text file that contains a list of student names and their respective scores in multiple subjects. Each line in the file represents a different student\'s records and follows the format: ``` <student_name>: <subject1>=<score1>, <subject2>=<score2>, ... ``` Your task is to write a function `calculate_student_averages(filename: str) -> List[Tuple[str, float]]` using Python\'s built-in file handling and string manipulation methods. This function will read the text file specified by `filename`, compute the average score for each student, and return a sorted list of tuples. Each tuple will contain a student\'s name and their average score, sorted alphabetically by the student\'s name. Here\'s an example of what the text file might look like: ```plaintext Alice: math=85, science=90, english=78 Bob: english=82, math=76, history=89 Charlie: history=90, math=85, science=95 ``` Given this file, the output of the function should be: ```python [(\\"Alice\\", 84.33), (\\"Bob\\", 82.33), (\\"Charlie\\", 90.0)] ``` # Additional Notes: - You must handle cases where a student might have scores for different subjects. - Round the average scores to 2 decimal places. - You can assume that each student has at least one score and that the input file is well-formatted. # Function Signature: ```python def calculate_student_averages(filename: str) -> List[Tuple[str, float]]: pass ```","solution":"from typing import List, Tuple def calculate_student_averages(filename: str) -> List[Tuple[str, float]]: student_averages = [] with open(filename, \'r\') as file: for line in file: student_data = line.strip().split(\':\') student_name = student_data[0].strip() scores = student_data[1].split(\',\') total_score = 0 subject_count = 0 for score in scores: subject_score = score.split(\'=\')[1].strip() total_score += int(subject_score) subject_count += 1 average_score = round(total_score / subject_count, 2) student_averages.append((student_name, average_score)) student_averages.sort(key=lambda x: x[0]) return student_averages"},{"question":"You are assigned to create a program that converts a string representing a mathematical expression in infix notation to its equivalent postfix notation (also known as Reverse Polish Notation). **Function Name**: `infix_to_postfix` **Input**: 1. `expression` (str): A string representing a valid infix mathematical expression. The expression may include multi-digit integers, parentheses `()`, and the operators `+`, `-`, `*`, and `/`. **Output**: - The function should return a string representing the converted expression in postfix notation. **Constraints**: - The input expression will not contain any spaces. - The order of operations for the operators is as follows: - Parentheses have the highest precedence. - The `*` and `/` operators have higher precedence than `+` and `-`. - Operators of the same precedence are processed left-to-right. **Example**: For the input: ``` expression = \\"3+(4*5-2)/1\\" ``` Your function should return: ``` \\"345*2-1/+\\" ``` For the input: ``` expression = \\"(1+2)*(3-4)\\" ``` Your function should return: ``` \\"12+34-*\\" ```","solution":"def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] def has_higher_precedence(op1, op2): return precedence[op1] >= precedence[op2] i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = char while i + 1 < len(expression) and expression[i + 1].isdigit(): i += 1 num += expression[i] output.append(num) elif char == \'(\': operators.append(char) elif char == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() else: # char is an operator while (operators and operators[-1] in precedence and has_higher_precedence(operators[-1], char)): output.append(operators.pop()) operators.append(char) i += 1 while operators: output.append(operators.pop()) return \'\'.join(output)"},{"question":"In this task, you will implement a function that simulates a simplified delivery robot\'s journey using Python. The robot moves on a grid, following a sequence of instructions, and drops off packages at specified positions. Your objective is to determine the final position of the robot and the remaining packages to be delivered after executing all the instructions. # Instructions: 1. Implement the function `robot_journey` that accepts the following parameters: - `start_position`: A tuple `(x, y)` representing the robot\'s starting coordinates on the grid. - `instructions`: A list of strings representing movement instructions (`\\"UP\\"`, `\\"DOWN\\"`, `\\"LEFT\\"`, `\\"RIGHT\\"`) and drop-off instructions (`\\"DROP\\"`). - `initial_packages`: An integer representing the number of packages the robot starts with. - `drop_positions`: A list of tuples, where each tuple represents the coordinates `(x, y)` where a package needs to be dropped off. 2. The robot should move on the grid as per the movement instructions and can only drop a package if it has any remaining. 3. The robot should follow these rules: - `\\"UP\\"`: Moves up by 1 unit (i.e., changes position to `(x, y+1)`). - `\\"DOWN\\"`: Moves down by 1 unit (i.e., changes position to `(x, y-1)`). - `\\"LEFT\\"`: Moves left by 1 unit (i.e., changes position to `(x-1, y)`). - `\\"RIGHT\\"`: Moves right by 1 unit (i.e., changes position to `(x+1, y)`). - `\\"DROP\\"`: Drops a package at the current position if it\'s in the `drop_positions` list, and decreases the count of remaining packages by one. 4. The function should return a tuple consisting of: - The final position of the robot `(x, y)`. - The remaining number of packages the robot has. **Function Signature:** ```python def robot_journey(start_position, instructions, initial_packages, drop_positions): pass ``` **Example:** Given the following inputs: - `start_position = (0, 0)` - `instructions = [\\"UP\\", \\"UP\\", \\"RIGHT\\", \\"DROP\\", \\"DOWN\\", \\"LEFT\\", \\"DROP\\"]` - `initial_packages = 2` - `drop_positions = [(1, 2), (-1, 1)]` The function should return: `((0, 1), 1)` Explanation: - The robot starts at position `(0, 0)`. - Moves `UP` to `(0, 1)`. - Moves `UP` to `(0, 2)`. - Moves `RIGHT` to `(1, 2)`. - Drops a package at `(1, 2)`, reducing the packages count to 1. - Moves `DOWN` to `(1, 1)`. - Moves `LEFT` to `(0, 1)`. - Attempts to drop another package at `(0, 1)`, but this position is not in the `drop_positions` list. - Ends up at position `(0, 1)` with 1 package remaining.","solution":"def robot_journey(start_position, instructions, initial_packages, drop_positions): x, y = start_position remaining_packages = initial_packages for instruction in instructions: if instruction == \\"UP\\": y += 1 elif instruction == \\"DOWN\\": y -= 1 elif instruction == \\"LEFT\\": x -= 1 elif instruction == \\"RIGHT\\": x += 1 elif instruction == \\"DROP\\": if (x, y) in drop_positions and remaining_packages > 0: remaining_packages -= 1 return (x, y), remaining_packages"},{"question":"You are required to write a function `valid_email_addresses` that will take a list of email addresses and return only those which are valid according to the following rules: 1. The local part (the part before the \\"@\\") may contain letters (a-z), numbers (0-9), and the following characters: underscore (_), period (.), and hyphen (-). However, periods cannot be consecutive or at the start or end of the local part. 2. The domain name (the part after \\"@\\") must come from a predetermined set of valid domain names. **Function Signature:** ```python def valid_email_addresses(emails: list, valid_domains: list) -> list: ``` **Parameters:** - `emails` (list): A list of email address strings to be validated. - `valid_domains` (list): A list containing valid domain names. **Returns:** - A list of valid email address strings. **Detailed Requirements:** 1. Use regular expressions to validate the local part of the email address. 2. Validate that the domain part of the email address exists within the provided list of valid domains. The following example illustrates how the function should work: ```python emails = [\\"test.email@example.com\\", \\"invalid.@example.com\\", \\"valid-email@sample.org\\", \\"another.valid_email@domain.com\\"] valid_domains = [\\"example.com\\", \\"sample.org\\", \\"domain.com\\"] output = valid_email_addresses(emails, valid_domains) print(output) # Expected output: [\\"test.email@example.com\\", \\"valid-email@sample.org\\", \\"another.valid_email@domain.com\\"] ``` In this example: 1. \\"test.email@example.com\\" is valid because \\"example.com\\" is in the list of valid domains and \\"test.email\\" follows the local part rules. 2. \\"invalid.@example.com\\" is invalid because the local part ends with a period. 3. \\"valid-email@sample.org\\" is valid because \\"sample.org\\" is in the list of valid domains and \\"valid-email\\" follows the local part rules. 4. \\"another.valid_email@domain.com\\" is valid because \\"domain.com\\" is in the list of valid domains and \\"another.valid_email\\" follows the local part rules.","solution":"import re def valid_email_addresses(emails: list, valid_domains: list) -> list: Filters and returns a list of valid email addresses based on given rules. Parameters: - emails: list of email addresses to validate. - valid_domains: list of valid domain names. Returns: - List of valid email addresses. def is_valid_local_part(local): # Local part should not start or end with a period, and periods should not be consecutive if \\"..\\" in local or local.startswith(\\".\\") or local.endswith(\\".\\"): return False # Allowed characters for local part return bool(re.match(r\\"^[a-zA-Z0-9._-]+\\", local)) valid_emails = [] for email in emails: # Split email into local part and domain part if \'@\' in email: local, domain = email.rsplit(\'@\', 1) if domain in valid_domains and is_valid_local_part(local): valid_emails.append(email) return valid_emails"},{"question":"Write a function that reads a CSV file into a Pandas DataFrame, applies a linear regression model to predict a target variable based on one or more input features, and creates a scatter plot showing the actual vs. predicted values. The function should output a tuple with: - pd.DataFrame: The original DataFrame with an additional column for predicted values. - sklearn.linear_model.LinearRegression: The fitted linear regression model. - matplotlib.figure.Figure: The scatter plot of actual vs. predicted values. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression def task_func(file_path: str, features: list, target: str): ```","solution":"import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression def task_func(file_path: str, features: list, target: str): # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Extract input features (X) and target variable (y) X = df[features] y = df[target] # Initialize and fit the linear regression model model = LinearRegression() model.fit(X, y) # Predict the target values df[\'predicted\'] = model.predict(X) # Create a scatter plot of actual vs. predicted values fig, ax = plt.subplots() ax.scatter(y, df[\'predicted\'], edgecolors=(0, 0, 0)) ax.plot([y.min(), y.max()], [y.min(), y.max()], \'k--\', lw=4) ax.set_xlabel(\'Measured\') ax.set_ylabel(\'Predicted\') ax.set_title(\'Actual vs Predicted\') # Return the DataFrame, model, and plot return df, model, fig"},{"question":"Reads a JSON file into a pandas DataFrame, filters the DataFrame based on a given condition, and writes the filtered DataFrame to a new JSON file. The function should raise an exception for: FileNotFoundError: If the specified input file does not exist. ValueError: If the specified condition results in no rows being filtered. The function should output with: str: The filename of the saved filtered JSON file. You should write self-contained code starting with: ``` import pandas as pd def filter_json(input_file, output_file, filter_column, filter_value): ```","solution":"import pandas as pd def filter_json(input_file, output_file, filter_column, filter_value): try: df = pd.read_json(input_file) except FileNotFoundError: raise FileNotFoundError(f\\"The specified input file {input_file} does not exist.\\") filtered_df = df[df[filter_column] == filter_value] if filtered_df.empty: raise ValueError(f\\"No rows found for {filter_column} = {filter_value}.\\") filtered_df.to_json(output_file, orient=\'records\') return output_file"},{"question":"You are required to implement a function `plot_boxplot` that generates a Box Plot for a given dataset using `matplotlib`. The function should also optionally highlight outliers in a different color. Here\'s what your function should do: 1. **Function Signature**: ```python def plot_boxplot(data, ax=None, box_color=\'blue\', outlier_marker=\'o\', outlier_color=\'red\'): ``` 2. **Parameters**: - `data` (array-like): The input data for which the Box Plot is to be generated. - `ax` (matplotlib.axes.Axes, optional): An existing matplotlib Axes object. If `None`, a new Axes object will be created. - `box_color` (matplotlib color, optional): Color for the Box Plot. Default is \'blue\'. - `outlier_marker` (matplotlib marker, optional): Marker style for the outliers. Default is \'o\'. - `outlier_color` (matplotlib color, optional): Color for the outliers. Default is \'red\'. 3. **Returns**: - `ax` (matplotlib.axes.Axes): The Axes object containing the plot. - `outliers` (array-like): Array of outlier values identified in the data. **Requirements**: - Use `matplotlib.pyplot.gca` to get the current Axes if `ax` is `None`. - Use `numpy.percentile` to identify outliers, which are data points below 1.5 * IQR below the first quartile or above 1.5 * IQR above the third quartile. - The box plot should include the minimum, first quartile, median, third quartile, and maximum values of the data, ignoring outliers. **Example**: ```python import numpy as np data = np.random.randn(100) ax, outliers = plot_boxplot(data) print(f\\"Identified Outliers: {outliers}\\") ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_boxplot(data, ax=None, box_color=\'blue\', outlier_marker=\'o\', outlier_color=\'red\'): Generates a Box Plot for a given dataset and optionally highlights outliers in a different color. Parameters: - data: array-like, The input data for which the Box Plot is to be generated. - ax: matplotlib.axes.Axes, optional, An existing matplotlib Axes object. If None, a new Axes object will be created. - box_color: color, optional, Color for the Box Plot. Default is \'blue\'. - outlier_marker: marker style, optional, Marker style for the outliers. Default is \'o\'. - outlier_color: color, optional, Color for the outliers. Default is \'red\'. Returns: - ax: matplotlib.axes.Axes, The Axes object containing the plot. - outliers: array-like, Array of outlier values identified in the data. if ax is None: ax = plt.gca() # Compute the necessary percentiles q1 = np.percentile(data, 25) q3 = np.percentile(data, 75) iqr = q3 - q1 lower_bound = q1 - 1.5 * iqr upper_bound = q3 + 1.5 * iqr # Identify outliers outliers = [point for point in data if point < lower_bound or point > upper_bound] # Boxplot the data boxprops = dict(color=box_color) flierprops = dict(marker=outlier_marker, color=outlier_color, alpha=0.5) ax.boxplot(data, boxprops=boxprops, flierprops=flierprops) return ax, outliers"},{"question":"You are tasked with creating a function `flatten_json(json_dict)` that takes in a nested JSON object and returns a flattened version of it. The keys in the flattened JSON should consist of the keys from the nested JSON separated by dots, representing their hierarchy. Requirements: 1. Traverse the nested JSON dictionary and concatenate keys to reflect the hierarchy. 2. Handle nested dictionaries at any level. 3. The function should return a new dictionary with flattened keys. Function Signature: ```python def flatten_json(json_dict: dict) -> dict: pass ``` Example: Given the JSON object: ```python { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } } } ``` After executing `flatten_json`: The output should be: ```python { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4 } ```","solution":"def flatten_json(json_dict, parent_key=\'\', separator=\'.\') -> dict: Flattens a nested JSON dictionary. Args: json_dict (dict): The input nested JSON dictionary. parent_key (str): The base key for the current recursion level. separator (str): The separator between keys of different hierarchy levels. Returns: dict: A flattened dictionary with concatenated keys. items = [] for k, v in json_dict.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_json(v, new_key, separator=separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are required to write a function that identifies the most frequently occurring word in a given list of strings. Your solution should handle case sensitivity and punctuation appropriately. Specifically, the function will clean the text to remove punctuation, convert all words to lowercase, and ensure that plural forms or different tenses of words are considered as separate entries. Utilize Python\'s `collections.Counter` for efficient counting of words. Function Requirements - **Function Name**: `most_frequent_word` - **Parameters**: - `strings_list`: A list of strings where each string is a sequence of words separated by spaces. - **Returns**: A dictionary with the following keys: - `\'word\'`: The most frequently occurring word in the list of strings. - `\'count\'`: The number of times this word appears. Example Given the following list of strings: ```python strings_list = [\\"Hello world! Hello, everyone.\\", \\"Welcome to the world of coding.\\", \\"Hello and welcome!\\"] ``` Your function should return: ```python { \'word\': \'hello\', \'count\': 3 } ``` Ensure to remove punctuation, convert all words to lowercase, and handle any edge cases such as empty strings or lists. # Notes - Use the `string.punctuation` to remove punctuation from the input strings. - Words are case-insensitive, so \\"Hello\\" and \\"hello\\" should be considered the same. - Take care of empty inputs where the return values should be appropriate default values.","solution":"import string from collections import Counter def most_frequent_word(strings_list): Identify the most frequently occurring word in the given list of strings. Parameters: strings_list (list of str): A list of strings where each string is a sequence of words separated by spaces. Returns: dict: A dictionary with keys \'word\' and \'count\' representing the most frequently occurring word and its count. text = \' \'.join(strings_list).lower() translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) words = text.split() if not words: return {\'word\': None, \'count\': 0} word_counts = Counter(words) most_common_word, count = word_counts.most_common(1)[0] return {\'word\': most_common_word, \'count\': count}"},{"question":"You are tasked with creating a function named `calculate_feature_importance` that evaluates the importance of features in a Random Forest Classifier (RFC) model. The data provided consists of numerical features, and the goal is to identify which features contribute the most to the classification decision. Your function should perform the following tasks: 1. Instantiate and train an RFC model on the provided training data, using a specified `n_estimators` value of 100. 2. Use the trained model to compute the feature importances. 3. Return a dictionary where the keys correspond to feature names and the values correspond to their importance scores. **Function Signature:** ```python def calculate_feature_importance(X_train, y_train, feature_names): pass ``` * `X_train`: A Pandas DataFrame containing the training feature data. * `y_train`: A Numpy array or Pandas Series containing the binary labels for the training set. * `feature_names`: A list of strings containing the names of the features. Your function should make use of the `RandomForestClassifier` from `sklearn.ensemble` to fit the model and determine feature importances. **Requirements:** Use the `RandomForestClassifier` from `sklearn.ensemble`. Ensure that the returned dictionary is sorted by importance in descending order.","solution":"from sklearn.ensemble import RandomForestClassifier def calculate_feature_importance(X_train, y_train, feature_names): Trains a Random Forest Classifier on the provided data and computes feature importances. Args: X_train (pd.DataFrame): Training feature data. y_train (np.array or pd.Series): Binary labels for the training set. feature_names (list): List of feature names corresponding to the columns in X_train. Returns: dict: Dictionary with feature names as keys and their importance scores as values, sorted in descending order of importance. # Instantiate the RandomForestClassifier with 100 estimators rf_model = RandomForestClassifier(n_estimators=100, random_state=42) # Fit the model to the training data rf_model.fit(X_train, y_train) # Extract feature importances importances = rf_model.feature_importances_ # Create a dictionary of feature importances feature_importance_dict = dict(zip(feature_names, importances)) # Sort the dictionary by importance values in descending order sorted_feature_importance_dict = dict(sorted(feature_importance_dict.items(), key=lambda item: item[1], reverse=True)) return sorted_feature_importance_dict"},{"question":"In this exercise, you will write a Python function that generates a unique identifier (UUID) with specific characteristics. The function you will write must be named `generate_custom_uuid`. The UUID will be a string containing: 1. A random sequence of 8 alphanumeric characters. 2. A fixed hyphen (`-`). 3. A random sequence of 4 alphanumeric characters. 4. A fixed hyphen (`-`). 5. A fixed sequence of 4 characters: \\"ABCD\\". 6. A fixed hyphen (`-`). 7. A random sequence of 12 alphanumeric characters. The function must meet the following criteria: 1. Alphanumeric characters include both uppercase letters (A-Z) and digits (0-9). 2. Use the `random.choices` method from the `random` library to generate the random sequences. 3. The result should be a single string that combines these segments. # Function Signature ```python def generate_custom_uuid() -> str: pass ``` # Example An example output from the function might be: ``` \\"1A2B3C4D-5F6G-ABCD-7H8I9J0K1L2M\\" ``` # Constraints - Make sure to import the `random` module. - Use `random.choices` with the appropriate characters to generate the random sequences. # Requirements - **random.choices**: This method should be used to generate the 8-character, 4-character, and 12-character random sequences. - The fixed sequences must be an exact part of the final UUID string in the specified format.","solution":"import random import string def generate_custom_uuid() -> str: Generates a unique identifier (UUID) with specific characteristics. UUID format: 8 alphanumeric characters - 4 alphanumeric characters - \\"ABCD\\" - 12 alphanumeric characters alnum_chars = string.ascii_uppercase + string.digits part1 = \'\'.join(random.choices(alnum_chars, k=8)) part2 = \'\'.join(random.choices(alnum_chars, k=4)) part3 = \'ABCD\' part4 = \'\'.join(random.choices(alnum_chars, k=12)) custom_uuid = f\\"{part1}-{part2}-{part3}-{part4}\\" return custom_uuid"},{"question":"You are tasked to implement a function called `find_repeating` that identifies the one repeating number in a list containing `n+1` integers. The list is composed of elements between 1 and `n`, where exactly one element is repeated, making the total list size `n+1`. Your job is to find the repeated number. The function signature should be: ```python def find_repeating(lst: list) -> int: ... ``` **Constraints:** 1. The input list `lst` contains `n+1` integers, each in the range from 1 to `n`. 2. There exists exactly one repeated number in the list. **Requirements:** - Utilize Floyd\'s Tortoise and Hare (Cycle Detection) algorithm to determine the repeated number. # Example: ```python find_repeating([1, 3, 4, 2, 2]) ``` Should return: ```python 2 ``` # Floyd\'s Tortoise and Hare Algorithm: 1. Initialize two pointers, `tortoise` and `hare`, at the start of the list. 2. Move `tortoise` by one step and `hare` by two steps until they meet inside the cycle. 3. Once they meet, start one pointer at the beginning of the list and the other at the meeting point, moving both one step at a time until they meet again at the start of the cycle, which is the repeated number.","solution":"def find_repeating(lst): Identifies the one repeating number in a list containing `n+1` integers. Implements Floyd\'s Tortoise and Hare (Cycle Detection) algorithm. # Step 1: Initialize the tortoise and hare tortoise = lst[0] hare = lst[0] # Step 2: Move tortoise one step and hare two steps until they meet while True: tortoise = lst[tortoise] hare = lst[lst[hare]] if tortoise == hare: break # Step 3: Find the entry point of the cycle tortoise = lst[0] while tortoise != hare: tortoise = lst[tortoise] hare = lst[hare] return hare"},{"question":"You are given a pandas DataFrame containing product sales data from different stores over various months. The DataFrame has multiple columns, including \'store\', \'month\', and \'sales\'. Your task is to determine the store with the highest average sales per month and return its name. Implement a function `highest_average_sales(df, store_col, sales_col)` that takes the following parameters: - `df`: A pandas DataFrame containing the sales data. - `store_col`: A string representing the name of the column that contains the store names. - `sales_col`: A string representing the name of the column that contains the sales values for each store and month. The function should adhere to the following rules: 1. Calculate the average sales per month for each store. 2. Identify the store with the highest average sales. 3. Return the name of the store with the highest average sales. # Example Given the following DataFrame: ```python import pandas as pd data = { \'store\': [\'A\', \'A\', \'A\', \'B\', \'B\', \'B\', \'C\', \'C\', \'C\'], \'month\': [\'Jan\', \'Feb\', \'Mar\', \'Jan\', \'Feb\', \'Mar\', \'Jan\', \'Feb\', \'Mar\'], \'sales\': [100, 150, 130, 200, 190, 210, 50, 60, 55] } df = pd.DataFrame(data) ``` After running `highest_average_sales(df, \'store\', \'sales\')`, the function should return: ``` \'B\' ``` # Function Signature ```python import pandas as pd def highest_average_sales(df, store_col, sales_col): # Your code here pass ``` # Constraints - The function should handle cases where there are ties in average sales by returning any one of the tied stores. - Ensure that the DataFrame and column names provided are valid before proceeding with any operations.","solution":"import pandas as pd def highest_average_sales(df, store_col, sales_col): Returns the name of the store with the highest average sales per month. Parameters: df (pd.DataFrame): The DataFrame containing sales data. store_col (str): The name of the column containing store names. sales_col (str): The name of the column containing sales values. Returns: str: The name of the store with the highest average sales. if store_col not in df.columns or sales_col not in df.columns: raise ValueError(\\"Invalid store_col or sales_col name.\\") if df.empty: return None # Group by store and calculate the mean sales average_sales = df.groupby(store_col)[sales_col].mean() # Identify the store with the highest average sales store_with_highest_average = average_sales.idxmax() return store_with_highest_average"},{"question":"You are tasked with writing a function named `find_longest_common_substrings` that takes a list of strings and returns all the longest common substrings shared among the provided strings. Your function must meet the following requirements: 1. **Input Parameters:** - `strings` (list of str): A list of strings to analyze. 2. **Output:** - A list of the longest common substrings shared by all the strings. If there are multiple substrings of the same maximum length, return all of them. If no common substring is found, return an empty list. 3. **Restrictions:** - The function should handle cases where the input list may contain as few as one string. - Substring comparison should be case-sensitive. - There is no requirement to use any specific library; however, consider efficiency in your implementation. # Example For the input: - `strings` = [\\"abcdefgh\\", \\"abcdxyz\\", \\"abcdfgh\\"] The output list should be: ``` [\\"abcd\\"] ``` For the input: - `strings` = [\\"geeksforgeeks\\", \\"forgeeksgeeks\\", \\"geeksy\\"] The output list should be: ``` [\\"geeks\\"] ``` For the input: - `strings` = [\\"yeast\\", \\"east\\", \\"feast\\"] The output list should be: ``` [\\"east\\"] ``` Write the implementation of the function `find_longest_common_substrings`.","solution":"def find_longest_common_substrings(strings): if not strings: return [] def common_substrings(str1, str2): len1, len2 = len(str1), len(str2) table = [[0] * (len2 + 1) for _ in range(len1 + 1)] longest_substrings = {} longest_length = 0 for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i - 1] == str2[j - 1]: table[i][j] = table[i - 1][j - 1] + 1 if table[i][j] > longest_length: longest_length = table[i][j] longest_substrings = {str1[i - longest_length:i]} elif table[i][j] == longest_length: longest_substrings.add(str1[i - longest_length:i]) return longest_substrings, longest_length if len(strings) == 1: return [strings[0]] common_subs, _ = common_substrings(strings[0], strings[1]) for s in strings[2:]: new_common_subs = set() for sub in common_subs: for sub_candidate in common_substrings(sub, s)[0]: new_common_subs.add(sub_candidate) common_subs = new_common_subs if not common_subs: return [] max_length = max(map(len, common_subs)) if common_subs else 0 return [sub for sub in common_subs if len(sub) == max_length]"},{"question":"You are asked to create a function that takes a list of dictionaries representing a collection of books and a search criterion in the form of a dictionary. The function should filter and return the books that match all the criteria specified in the search criterion. Each book dictionary contains keys like \'title\', \'author\', \'year\', and \'genre\'. # Function Specification * **Function Name**: `filter_books` * **Parameters**: - `books`: a list of dictionaries, where each dictionary represents a book with keys like \'title\', \'author\', \'year\', and \'genre\'. - `criteria`: a dictionary containing the search criteria. The keys correspond to the keys in the book dictionaries and the values are the values to match. * **Returns**: - A list of dictionaries representing books that match all the given criteria. * **Behavior**: - Iterate through the list of books and check which books satisfy all the key-value pairs specified in the criteria dictionary. - Return a list of book dictionaries that match the criteria. # Example ```python books = [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'year\': 1960, \'genre\': \'Fiction\'}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'genre\': \'Dystopian\'}, {\'title\': \'Pride and Prejudice\', \'author\': \'Jane Austen\', \'year\': 1813, \'genre\': \'Romance\'}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'year\': 1925, \'genre\': \'Fiction\'} ] criteria = {\'author\': \'Jane Austen\', \'year\': 1813} filter_books(books, criteria) ``` **Expected Output**: ```python [{\'title\': \'Pride and Prejudice\', \'author\': \'Jane Austen\', \'year\': 1813, \'genre\': \'Romance\'}] ``` In this example, only the book \\"Pride and Prejudice\\" matches both the author \\"Jane Austen\\" and the year 1813, so it is the only book returned in the filtered list.","solution":"def filter_books(books, criteria): Returns a list of books that match all the given criteria. :param books: List of dictionaries, each representing a book with keys like \'title\', \'author\', \'year\', \'genre\'. :param criteria: Dictionary containing the search criteria. :return: List of dictionaries representing books that match all the given criteria. filtered_books = [] for book in books: match = True for key, value in criteria.items(): if book.get(key) != value: match = False break if match: filtered_books.append(book) return filtered_books"},{"question":"You are given a grid with rows and columns represented by a 2D list of integers. Each cell in the grid contains a value representing the cost to enter that cell. Write a function `min_path_sum` that finds the minimum cost path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. **Function Requirements:** 1. The function `min_path_sum` should accept a 2D list `grid` as its argument and return an integer representing the minimum cost to reach the bottom-right corner from the top-left corner. 2. The grid will always have at least one cell, and the cost will be a non-negative integer. **Example:** ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_path_sum(grid)) # Output: 7 ``` **Explanation:** The path with the minimum cost is 1 → 3 → 1 → 1 → 1 with a total cost of 7.","solution":"def min_path_sum(grid): Finds the minimum cost path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. :param grid: List[List[int]] - 2D list of integers representing the grid :return: int - minimum cost to reach the bottom-right corner if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Initialize a dp table with the same dimensions as the grid dp = [[0] * cols for _ in range(rows)] # Fill the dp table for r in range(rows): for c in range(cols): if r == 0 and c == 0: dp[r][c] = grid[r][c] elif r == 0: dp[r][c] = dp[r][c-1] + grid[r][c] elif c == 0: dp[r][c] = dp[r-1][c] + grid[r][c] else: dp[r][c] = min(dp[r-1][c], dp[r][c-1]) + grid[r][c] return dp[-1][-1]"},{"question":"You are implementing a bank transaction management system that needs to handle multiple types of transactions such as deposits, withdrawals, and account balance checks. Implement a class `BankAccount` that simulates a bank account with basic functionalities as described below. # Class Requirements - **Class Name**: `BankAccount` - **Attributes**: - `account_number` (string): The account number. - `balance` (float): The current balance of the account. # Methods 1. **`__init__(self, account_number, balance=0.0)`**: Initializes the bank account with the given account number and an optional initial balance (default is 0.0). 2. **`deposit(self, amount)`**: - Accepts a deposit amount (float) and adds it to the account balance. - Raises a `ValueError` if the deposit amount is not positive. 3. **`withdraw(self, amount)`**: - Accepts a withdrawal amount (float) and deducts it from the account balance. - Raises an `InsufficientFundsException` (custom exception) if the withdrawal amount exceeds the current balance. - Raises a `ValueError` for non-positive withdrawal amounts. 4. **`check_balance(self)`**: - Returns the current account balance (float). # Custom Exception Define a custom exception named `InsufficientFundsException` to handle insufficient funds during withdrawals. # Example Usage: ```python account = BankAccount(\\"123456789\\") account.deposit(500.0) print(account.check_balance()) # Output: 500.0 account.withdraw(200.0) print(account.check_balance()) # Output: 300.0 try: account.withdraw(400.0) except InsufficientFundsException: print(\\"Insufficient funds for this transaction.\\") ``` # Constraints: - Ensure that deposits and withdrawals update the balance accurately. - Handle edge cases such as negative deposits or withdrawals, and withdrawals larger than the available balance. # Notes: - The method signatures and the custom exception must be implemented exactly as described. - You do not need to implement any input/output functions outside the class and methods.","solution":"class InsufficientFundsException(Exception): pass class BankAccount: def __init__(self, account_number, balance=0.0): self.account_number = account_number self.balance = balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise InsufficientFundsException(\\"Insufficient funds\\") self.balance -= amount def check_balance(self): return self.balance"},{"question":"** You are tasked with writing a function that processes a list of stock prices and determines the maximum profit that can be made by buying and then selling one share of the stock. You can only complete one buy-sell transaction. Write a function named `max_profit` that performs the following tasks: 1. Takes a list of stock prices, where the index represents the day and the value represents the stock price on that day. 2. Traverses through the list and calculates the maximum possible profit from a single buy-sell transaction. 3. Returns the maximum profit that can be achieved. If no profit is possible, return 0. Your solution should have a time complexity of O(n), where n is the number of days (or length of the list). Example: ``` max_profit([7, 1, 5, 3, 6, 4]) ``` Output: ``` 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. If the list is `[7, 6, 4, 3, 1]`, the function should return `0` since no profit can be achieved. **","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling one share of the stock. If no profit is possible, returns 0. :param prices: List of stock prices where index represents the day and value represents the stock price. :return: Maximum possible profit. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the maximum sum of `k` consecutive elements in the list. The function should handle cases where the list length is less than `k` by returning `None`. You should write self-contained code starting with: ``` def max_consecutive_sum(input_list, k): ```","solution":"def max_consecutive_sum(input_list, k): Returns the maximum sum of `k` consecutive elements in the input_list. If the length of input_list is less than `k`, returns None. if len(input_list) < k: return None max_sum = sum(input_list[:k]) current_sum = max_sum for i in range(k, len(input_list)): current_sum = current_sum - input_list[i - k] + input_list[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are tasked with writing a function to determine the longest consecutive sequence of identical characters in a given string. This function should identify the character and the length of the longest contiguous sequence. If there are multiple sequences of the same length, return the character that appears first in the string. Function Signature: ```python def longest_consecutive_sequence(s: str) -> Tuple[str, int]: Find the character and length of the longest consecutive sequence of identical characters in the input string. Parameters: - s (str): Input string consisting of both uppercase and lowercase alphabets. Returns: - Tuple[str, int]: A tuple with the character and the length of its longest consecutive sequence. ``` Requirements 1. The input string `s` will consist of only alphabetic characters. 2. The function should return a tuple containing: - The character that has the longest consecutive sequence. - The length of this sequence. 3. If there are multiple sequences of the same length, return the character that appears first in the input string.","solution":"from typing import Tuple def longest_consecutive_sequence(s: str) -> Tuple[str, int]: if not s: return (\'\', 0) max_char = s[0] max_length = 1 current_char = s[0] current_length = 1 for i in range(1, len(s)): if s[i] == current_char: current_length += 1 else: if current_length > max_length: max_char = current_char max_length = current_length current_char = s[i] current_length = 1 if current_length > max_length: max_char = current_char max_length = current_length return (max_char, max_length)"},{"question":"You are asked to implement a function `tree_diameter(edges)` that computes the diameter of an undirected tree. The diameter of a tree is the length of the longest path between any two nodes in the tree. The function should return the diameter as an integer. The input tree is represented as a list of edges, where each edge is a tuple of two vertices. Use Breadth-First Search (BFS) to solve the problem. First, perform a BFS from an arbitrary node to find the farthest node from it. Then, perform another BFS from this farthest node to find the farthest node from it, which will give the diameter of the tree. Function Signature ```python def tree_diameter(edges: List[Tuple[int, int]]) -> int: ``` Input - `edges`: A list of tuples representing the edges of the tree. Each tuple contains two integers representing the connected vertices. For example: ```python [(0, 1), (1, 2), (1, 3), (3, 4)] ``` Output - Returns an integer representing the diameter of the tree. Constraints 1. The number of edges, `n`, is such that `1 ≤ n ≤ 10^4`. 2. The vertices are labeled with integers from 0 to n, where n is the number of edges (resulting in n+1 vertices). Example Input: ```python edges = [(0, 1), (1, 2), (1, 3), (3, 4)] ``` Output: ```python 3 ``` Explanation: The longest path is from node 2 to node 4 with path length 3 (2 -> 1 -> 3 -> 4).","solution":"from collections import deque, defaultdict from typing import List, Tuple def tree_diameter(edges: List[Tuple[int, int]]) -> int: if not edges: return 0 # Building the graph (it is an undirected graph) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function to perform BFS and return the farthest node and its distance def bfs(start): visited = set() queue = deque([(start, 0)]) farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() visited.add(node) if distance > max_distance: max_distance = distance farthest_node = node for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return farthest_node, max_distance # Perform a BFS from an arbitrary start node (pick node 0) farthest_from_start, _ = bfs(0) # Perform a BFS from the farthest node found in the first BFS _, diameter = bfs(farthest_from_start) return diameter"},{"question":"In this problem, you will implement the Dijkstra\'s algorithm, which is used for finding the shortest paths between nodes in a graph. The goal is to find the shortest path from a given starting node to a specific target node. You\'ll be provided with several helper functions: 1. `get_neighbors(node)`: Function returning a list of tuples, `(neighbor, weight)`, where `neighbor` is a connected node and `weight` is the edge cost to that neighbor. 2. `goal_test(node)`: Function returning a boolean indicating if the current node is the target node. 3. `actions`: Dictionary to store the action (or edge) that led to each node. 4. `parents`: Dictionary to store the parent of each node. 5. `costs`: Dictionary to store the shortest path cost associated with each node. Using the Python `heapq` library, specifically the `heappop` and `heappush` functions, complete the `dijkstra(start, target)` function to implement Dijkstra\'s algorithm. # Required Function Signature: ```python import heapq def dijkstra(start, target): Perform Dijkstra\'s algorithm from the start node to the target node. Params: start : initial node target : target node Returns: tuple : (path, total_cost, states_expanded) path : list of nodes that represents the shortest path to the target node total_cost : the total cost of the shortest path states_expanded : the total number of states that have been expanded ``` # Explanation: - `costs[start] = 0`: Initialize the cost for the given start node. - `states_expanded`: Counter for the number of nodes expanded during the search. - `frontier`: Priority queue to store the frontier nodes. - `explored`: A set of nodes that have been expanded. - `seen`: A set of nodes that have been added to the frontier. Use the `heapq.heappop` and `heapq.heappush` methods for efficient access to the smallest element in the frontier.","solution":"import heapq # Assumed helper functions and global variables def get_neighbors(node): # Implement this function to return actual neighbors and their weights pass def goal_test(node, target): return node == target actions = {} parents = {} costs = {} def dijkstra(start, target): Perform Dijkstra\'s algorithm from the start node to the target node. Params: start : initial node target : target node Returns: tuple : (path, total_cost, states_expanded) path : list of nodes that represents the shortest path to the target node total_cost : the total cost of the shortest path states_expanded : the total number of states that have been expanded global actions, parents, costs actions = {} parents = {} costs = {start: 0} frontier = [(0, start)] explored = set() states_expanded = 0 while frontier: current_cost, current_node = heapq.heappop(frontier) if current_node in explored: continue explored.add(current_node) states_expanded += 1 if goal_test(current_node, target): path = [] node = current_node while node is not None: path.append(node) node = parents.get(node, None) path.reverse() return path, current_cost, states_expanded for neighbor, weight in get_neighbors(current_node): new_cost = current_cost + weight if neighbor not in costs or new_cost < costs[neighbor]: costs[neighbor] = new_cost heapq.heappush(frontier, (new_cost, neighbor)) parents[neighbor] = current_node actions[neighbor] = (current_node, weight) return [], float(\'inf\'), states_expanded"},{"question":"You are required to write a Python function named `generate_anagrams(input_str, num_anagrams)` that generates and prints a specified number of unique anagrams from the given string. The generated anagrams should use all characters from the input string exactly once. Your function should ensure that each anagram is unique and the order of the characters in each generated anagram should be different from the others. **Function Signature:** ```python def generate_anagrams(input_str: str, num_anagrams: int) -> None: ``` **Parameters:** - `input_str` (str): The input string from which the anagrams are to be generated. - `num_anagrams` (int): The number of unique anagrams to generate from the input string. Your function should follow these steps: 1. Validate that the input string is non-empty and contains more than one character. 2. Generate unique anagrams using all characters from the input string. 3. Print the specified number of anagrams. If the number of requested anagrams exceeds the possible unique permutations of the input string, print all possible anagrams without any repetition. **Example:** If the input string is \\"abc\\" and `num_anagrams` is 4, you might generate outputs such as: - \\"abc\\" - \\"acb\\" - \\"bac\\" - \\"bca\\" However, if `num_anagrams` was set to a number higher than the possible permutations (e.g., 10 for \\"abc\\"), the function should print all possible anagrams without repetition: - \\"abc\\" - \\"acb\\" - \\"bac\\" - \\"bca\\" - \\"cab\\" - \\"cba\\" **Requirements:** - Use itertools.permutations to generate the anagrams. - Ensure uniqueness of the anagrams by using a set to store and check the anagrams. - Handle edge cases, such as when the input string has repeated characters or when the number of requested anagrams exceeds the total possible unique anagrams. ```python import itertools def generate_anagrams(input_str: str, num_anagrams: int) -> None: if not input_str or len(input_str) <= 1: print(\\"Input string must be non-empty and have more than one character.\\") return anagrams_set = set() all_permutations = itertools.permutations(input_str) for perm in all_permutations: anagram = \'\'.join(perm) if anagram not in anagrams_set: anagrams_set.add(anagram) print(anagram) if len(anagrams_set) >= num_anagrams: break if len(anagrams_set) < num_anagrams: print(f\\"Only {len(anagrams_set)} unique anagrams found.\\") ```","solution":"import itertools def generate_anagrams(input_str: str, num_anagrams: int) -> None: if not input_str or len(input_str) <= 1: print(\\"Input string must be non-empty and have more than one character.\\") return anagrams_set = set() all_permutations = itertools.permutations(input_str) for perm in all_permutations: anagram = \'\'.join(perm) if anagram not in anagrams_set: anagrams_set.add(anagram) print(anagram) if len(anagrams_set) >= num_anagrams: break if len(anagrams_set) < num_anagrams: print(f\\"Only {len(anagrams_set)} unique anagrams found.\\")"},{"question":"We need to develop a function called `plot_3d_surface` that takes in three parameters: 1. `X_values`: a 2D array or nested list representing the x-coordinates of the data points. 2. `Y_values`: a 2D array or nested list representing the y-coordinates of the data points. 3. `Z_values`: a 2D array or nested list representing the z-coordinates (heights) of the data points. The function should perform the following tasks: 1. Create a 3D surface plot using the provided data. 2. Customize the plot to include a color bar that maps the z-values to colors. 3. Set appropriate labels for the x-axis, y-axis, and z-axis. 4. Add a title to the plot. To complete this task, you will need to use the following functions from the `matplotlib` library: - `matplotlib.pyplot.figure`: to create a new figure. - `mpl_toolkits.mplot3d.Axes3D`: to enable 3D plotting capabilities. - `matplotlib.pyplot.plot_surface`: to create the 3D surface plot. - `matplotlib.pyplot.colorbar`: to add a color scale to the plot. - `matplotlib.pyplot.xlabel`: to set the x-axis label. - `matplotlib.pyplot.ylabel`: to set the y-axis label. - `matplotlib.pyplot.title`: to set the title of the plot. - `numpy.meshgrid`: to create a grid for plotting. # Function Signature ```python def plot_3d_surface(X_values, Y_values, Z_values): pass ``` # Example ```python import numpy as np X_values = np.linspace(-5, 5, 100) Y_values = np.linspace(-5, 5, 100) X_values, Y_values = np.meshgrid(X_values, Y_values) Z_values = np.sin(np.sqrt(X_values**2 + Y_values**2)) plot_3d_surface(X_values, Y_values, Z_values) ``` Expected behavior: The function will display a 3D surface plot of the provided x, y, z points with a color bar indicating the height of the surface, and appropriate labels and title. # Requirements: - Import the required libraries inside the function. - Follow a clean coding style with comments explaining each step.","solution":"def plot_3d_surface(X_values, Y_values, Z_values): Creates a 3D surface plot using the provided X, Y, and Z values. Parameters: X_values (2D array or nested list): x-coordinates of the data points. Y_values (2D array or nested list): y-coordinates of the data points. Z_values (2D array or nested list): z-coordinates (heights) of the data points. import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Create a new figure for the 3D surface plot fig = plt.figure() ax = fig.add_subplot(111, projection=\'3d\') # Plot the surface surf = ax.plot_surface(X_values, Y_values, Z_values, cmap=\'viridis\') # Add a color bar which maps values to colors fig.colorbar(surf, ax=ax, shrink=0.5, aspect=5) # Set labels for the axes ax.set_xlabel(\'X Axis\') ax.set_ylabel(\'Y Axis\') ax.set_zlabel(\'Z Axis\') # Add a title to the plot ax.set_title(\'3D Surface Plot\') # Show the plot plt.show()"},{"question":"You are asked to design and implement a Python function `find_max_consecutive_subarray(arr, k)` that finds the maximum sum of any contiguous subarray of length `k` within the given list of integers `arr`. To solve this problem, you should use the sliding window technique, which will help you efficiently compute the sums of contiguous subarrays without re-calculating the sum from scratch for every subarray. Your function should perform the following steps: 1. Initialize a variable to keep track of the current sum of the first `k` elements. 2. Use a loop to slide the window across the array, updating the sum by adding the next element and removing the first element of the previous window. 3. Keep track of the maximum sum encountered during the process. 4. Return the maximum sum found. For example, given the array `arr = [2, 1, 5, 1, 3, 2]` and `k = 3`, the subarrays of length `k` are: - `[2, 1, 5]` with sum 8 - `[1, 5, 1]` with sum 7 - `[5, 1, 3]` with sum 9 - `[1, 3, 2]` with sum 6 The function should return `9` as the maximum sum. **Constraints:** - You may assume `arr` has at least `k` elements. - `1 <= k <= len(arr) <= 10^5` - `-10^4 <= arr[i] <= 10^4` for all elements in `arr`. The function signature is: ```python def find_max_consecutive_subarray(arr: list[int], k: int) -> int: pass ```","solution":"def find_max_consecutive_subarray(arr, k): Finds the maximum sum of any contiguous subarray of length `k` within the given list of integers `arr`. # Initialize the sum for the first window of k elements current_sum = sum(arr[:k]) max_sum = current_sum # Slide the window across the array for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Load a JSON file into a Pandas DataFrame, convert any string dates in the specified column to datetime objects, then filter the DataFrame to include only rows where the dates are within the last year from today. The function should output with: pd.DataFrame: The filtered Pandas DataFrame. You should write self-contained code starting with: ``` import pandas as pd from datetime import datetime, timedelta def task_func(file_path: str, date_column: str) -> pd.DataFrame: ```","solution":"import pandas as pd from datetime import datetime, timedelta def task_func(file_path: str, date_column: str) -> pd.DataFrame: # Load JSON file into a Pandas DataFrame df = pd.read_json(file_path) # Convert string dates in the specified column to datetime objects df[date_column] = pd.to_datetime(df[date_column], errors=\'coerce\') # Get today\'s date and the date one year ago today = datetime.now() one_year_ago = today - timedelta(days=365) # Filter the DataFrame to include only rows where the dates are within the last year filtered_df = df[(df[date_column] >= one_year_ago) & (df[date_column] <= today)] return filtered_df"},{"question":"You are tasked with writing a Python function called `generate_combinations` that takes a list of elements and an integer n, and returns a list of all possible combinations of the elements taken n at a time. You will use the `itertools` library. # Function Signature ```python def generate_combinations(elements: list, n: int) -> list: Returns a list of all possible combinations of the input elements taken n at a time. ``` # Parameters - `elements (list)`: A list of elements from which combinations are to be generated. - `n (int)`: The number of elements in each combination. # Returns - `list`: A list containing all possible combinations of the input elements taken n at a time. Each combination should be represented as a list. # Task 1. Implement the `generate_combinations` function. 2. Ensure that the function returns combinations as lists, not tuples. # Example ```python # Example: Combinations of elements [1, 2, 3] taken 2 at a time combinations = generate_combinations([1, 2, 3], 2) print(combinations) # Expected output: [[1, 2], [1, 3], [2, 3]] ``` In this example, since we are taking 2 elements at a time from the list [1, 2, 3], the function returns all possible pairs of elements. Use the itertools library to facilitate the creation of combinations and convert the resulting tuples to lists.","solution":"from itertools import combinations def generate_combinations(elements: list, n: int) -> list: Returns a list of all possible combinations of the input elements taken n at a time. # Generate combinations of elements taken n at a time comb_tuples = combinations(elements, n) # Convert each tuple to a list and return the result return [list(comb) for comb in comb_tuples]"},{"question":"Write a function `sort_students(students)` that takes a list of tuples, where each tuple contains two elements: a student\'s name (string) and their grade (integer). Your task is to return a list of students\' names sorted by their grades in descending order. If two students have the same grade, they should be sorted by their names in ascending alphabetical order. Make sure to handle edge cases, such as an empty list, appropriately. Function signature: ```python def sort_students(students): pass ``` Sample Input: ```python students = [(\'John\', 90), (\'Alice\', 90), (\'Bob\', 80), (\'Daisy\', 95)] ``` Sample Output: ```python [\'Daisy\', \'Alice\', \'John\', \'Bob\'] ```","solution":"def sort_students(students): Sorts a list of students by their grades in descending order. If two students have the same grade, they are sorted by their names in ascending alphabetical order. Args: students (list of tuples): List where each tuple contains a student\'s name and grade. Returns: list of str: Sorted list of students\' names. # Sort by grade descending (-grade) and then by name ascending (name) sorted_students = sorted(students, key=lambda student: (-student[1], student[0])) return [student[0] for student in sorted_students]"},{"question":"You are required to write a Python function that simulates a simple card game. The game involves shuffling a standard deck of 52 playing cards and dealing a specified number of cards to a certain number of players. Once the cards are dealt, the function will determine the winner based on the highest total value of cards in hand. # Card Values - Cards 2 through 10 are worth their face value. - Jacks, Queens, and Kings are each worth 10 points. - Aces are worth 11 points. # Assumptions - Each player gets the same number of cards. - If the total number of cards to be dealt exceeds the number of cards in the deck (52), return an empty list for each player. - If there is a tie for the highest total, return a list of all tying players. # Function Specification Write a function `card_game(num_players, cards_per_player)` with the following parameters: 1. **`num_players` (int)**: The number of players in the game. 2. **`cards_per_player` (int)**: The number of cards each player receives. **Functionality**: - Create and shuffle a standard deck of 52 playing cards. - Deal the specified number of cards to each player. - Calculate the total value of each player\'s hand. - Determine the winning player(s) with the highest total value. **Return Value**: - Return a list of the player number(s) (1-based index) who have the highest total values. If there\'s a tie, include all tying players in the list. If the input parameters are invalid, return an empty list for each player. **Requirements**: - Use the `random.shuffle` function from the `random` module for shuffling the deck. # Example ```python # Assuming cards are represented as (\'rank\', \'suit\') tuples # and the suits are \'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\' sequence = card_game(4, 5) print(sequence) # Example output: [2] or [2, 4] if there\'s a tie ```","solution":"import random def card_game(num_players, cards_per_player): if num_players <= 0 or cards_per_player <= 0: return [[] for _ in range(num_players)] deck = [(rank, suit) for rank in range(2, 15) for suit in [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\']] random.shuffle(deck) total_cards_needed = num_players * cards_per_player if total_cards_needed > len(deck): return [[] for _ in range(num_players)] hands = [[] for _ in range(num_players)] for i in range(num_players): hands[i] = deck[i*cards_per_player: (i+1)*cards_per_player] def card_value(card): rank, suit = card if rank == 14: return 11 elif 11 <= rank <= 13: return 10 else: return rank totals = [sum(card_value(card) for card in hand) for hand in hands] max_value = max(totals) winners = [i + 1 for i, total in enumerate(totals) if total == max_value] return winners"},{"question":"In this problem, you are required to implement a function `FindOddOccurrences(arr)`. This function takes one parameter: - `arr` (a list of integers): This is the list of integers in which each element may appear an even or odd number of times. The goal of the function is to identify all integers that appear an odd number of times in the list and return a list of these integers. The output list should be sorted in ascending order. Here\'s a detailed breakdown of what the function should do: 1. Create a dictionary to count the occurrences of each element in the list. 2. Iterate through the list, updating the count for each element in the dictionary. 3. Identify the elements that have an odd count in the dictionary. 4. Sort these elements in ascending order. 5. Return the sorted list of elements that appear an odd number of times. You can assume that the input list `arr` contains at least one integer. **Function Signature** ```python def FindOddOccurrences(arr: list) -> list: pass ``` **Example** Given the input: - `arr = [5, 7, 2, 7, 5, 2, 5]` The function `FindOddOccurrences(arr)` should return `[5]`. Given another input: - `arr = [12, 3, 12, 4, 4, 9, 3, 3]` The function `FindOddOccurrences(arr)` should return `[3, 9]`.","solution":"def FindOddOccurrences(arr): Returns a list of elements that appear an odd number of times in the input list. The returned list is sorted in ascending order. # Dictionary to store count of each element count_dict = {} # Count occurrences of each element for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Find elements with odd occurrences odd_occurrences = [num for num, count in count_dict.items() if count % 2 == 1] # Sort the list of elements with odd occurrences odd_occurrences.sort() return odd_occurrences"},{"question":"Given a list of student names with their corresponding grades, write a function that calculates the letter grade for each student according to the following grade scale: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 The function will accept a list of dictionaries where each dictionary contains \'name\' and \'grade\'. The function should return a new list of dictionaries with \'name\' and \'letter_grade\'. For example, given the input list: ``` [{\'name\': \'Alice\', \'grade\': 85}, {\'name\': \'Bob\', \'grade\': 92}, {\'name\': \'Charlie\', \'grade\': 67}, {\'name\': \'David\', \'grade\': 73}] ``` The function should return: ``` [{\'name\': \'Alice\', \'letter_grade\': \'B\'}, {\'name\': \'Bob\', \'letter_grade\': \'A\'}, {\'name\': \'Charlie\', \'letter_grade\': \'D\'}, {\'name\': \'David\', \'letter_grade\': \'C\'}] ``` To solve this task, your function should start with the following definition: ``` def assign_letter_grades(students): ```","solution":"def assign_letter_grades(students): Assigns letter grades to students based on their numeric grades. Args: students (list): List of dictionaries, where each dictionary contains \'name\' and \'grade\'. Returns: list: List of dictionaries, where each dictionary contains \'name\' and \'letter_grade\'. def get_letter_grade(grade): if 90 <= grade <= 100: return \'A\' elif 80 <= grade <= 89: return \'B\' elif 70 <= grade <= 79: return \'C\' elif 60 <= grade <= 69: return \'D\' elif 0 <= grade <= 59: return \'F\' else: return \'Invalid grade\' result = [] for student in students: letter_grade = get_letter_grade(student[\'grade\']) result.append({\'name\': student[\'name\'], \'letter_grade\': letter_grade}) return result"},{"question":"Design a function that identifies clusters in a given dataset using the `KMeans` clustering algorithm from the `sklearn.cluster` module. The `KMeans` object will be used to cluster the samples and assign labels to each sample according to its cluster assignment. Function Specification: - **Function Name**: `find_clusters` - **Parameters**: - `data` (numpy array): The dataset (shape: `(n_samples, n_features)`). Each row represents a sample, and each column represents a feature. - `n_clusters` (int): The number of clusters to form. - **Returns**: - `labels` (numpy array): Array containing the cluster labels for each sample. Details: The function should: 1. Create a `KMeans` object with the specified number of clusters (`n_clusters`). 2. Fit this object to the provided data. 3. Predict the cluster labels for each sample. 4. Return the array of cluster labels. This function will help you understand how to use `KMeans` for clustering data in Python. # Example Usage: ```python import numpy as np from find_clusters import find_clusters data = np.array([ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0] ]) n_clusters = 2 labels = find_clusters(data, n_clusters) print(\\"Cluster labels:\\", labels) # Example output could be [0 0 1 1 0 1], indicating that the samples # have been assigned to either cluster 0 or cluster 1. ``` # Constraints: - Ensure the function handles datasets with at least one sample and one feature. - The number of clusters (`n_clusters`) should be at least 1. Use the relevant package as specified to implement your solution.","solution":"from sklearn.cluster import KMeans import numpy as np def find_clusters(data, n_clusters): Identifies clusters in the given dataset using KMeans clustering algorithm. Parameters: data (numpy array): The dataset (shape: (n_samples, n_features)). n_clusters (int): The number of clusters to form. Returns: labels (numpy array): Array containing the cluster labels for each sample. # Create a KMeans object with the specified number of clusters kmeans = KMeans(n_clusters=n_clusters, random_state=42) # Fit the KMeans object to the provided data kmeans.fit(data) # Predict the cluster labels for each sample labels = kmeans.labels_ return labels"},{"question":"You are given a problem where you need to manage and track the priority of task executions in a system such that tasks are executed based on their priority levels but with certain constraints. Each task has a specific priority value, and the system allows tweaking the priority of already scheduled tasks to optimize performance. **You need to implement a class `TaskScheduler` that provides the following functionalities:** 1. `add_task(task_id: str, priority: int) -> None`: Adds a new task with the given `task_id` and `priority`. If the task already exists, update its priority. 2. `execute_highest_priority_task() -> Tuple[str, int]`: Executes the highest priority task. If there are multiple tasks with the same highest priority, execute the one that was added first. Return a tuple of the task ID and its priority. 3. `tweak_priority(task_id: str, new_priority: int) -> bool`: Updates the priority of an existing task with the given `task_id` to `new_priority`. If the task does not exist, return `False`; otherwise, return `True`. 4. `task_count() -> int`: Returns the total number of tasks currently scheduled. **You also need to implement a `task` named-tuple with fields `task_id` and `priority` to represent each task.** # Example Usage: ```python scheduler = TaskScheduler() scheduler.add_task(\\"task1\\", 10) scheduler.add_task(\\"task2\\", 5) print(scheduler.execute_highest_priority_task()) # Output: (\\"task1\\", 10) scheduler.add_task(\\"task3\\", 15) scheduler.add_task(\\"task1\\", 20) print(scheduler.execute_highest_priority_task()) # Output: (\\"task1\\", 20) print(scheduler.tweak_priority(\\"task2\\", 25)) # Output: True print(scheduler.execute_highest_priority_task()) # Output: (\\"task2\\", 25) print(scheduler.task_count()) # Output: 1 ``` # Requirements: 1. Your implementation should efficiently handle updates and retrievals based on priority. 2. Tasks should be executed based on their priority in descending order. 3. In case of priority ties, tasks should be executed in the order they were added. 4. You must use Python\'s `collections.namedtuple` for representing tasks.","solution":"from collections import namedtuple, deque import heapq Task = namedtuple(\'Task\', [\'task_id\', \'priority\']) class TaskScheduler: def __init__(self): self.tasks = {} self.priority_queue = [] self.entry_finder = {} self.counter = 0 def add_task(self, task_id: str, priority: int) -> None: if task_id in self.tasks: self.tweak_priority(task_id, priority) else: self.counter += 1 task = Task(task_id, priority) self.tasks[task_id] = task heapq.heappush(self.priority_queue, (-priority, self.counter, task_id)) self.entry_finder[task_id] = (-priority, self.counter, task_id) def execute_highest_priority_task(self) -> Task: while self.priority_queue: _, _, task_id = heapq.heappop(self.priority_queue) task = self.tasks.pop(task_id, None) if task_id in self.entry_finder: del self.entry_finder[task_id] if task: return (task_id, task.priority) raise KeyError(\\"No tasks available\\") def tweak_priority(self, task_id: str, new_priority: int) -> bool: if task_id in self.tasks: old_task = self.tasks[task_id] new_task = Task(task_id, new_priority) self.tasks[task_id] = new_task self.counter += 1 entry = self.entry_finder.get(task_id) if entry: self.priority_queue.remove(entry) heapq.heapify(self.priority_queue) entry = (-new_priority, self.counter, task_id) heapq.heappush(self.priority_queue, entry) self.entry_finder[task_id] = entry return True return False def task_count(self) -> int: return len(self.tasks)"},{"question":"In this problem, you will write a Python function called `island_perimeter` that calculates the perimeter of an island represented by a 2D grid. The grid contains 1s (land) and 0s (water), and the island consists of all the contiguous land cells connected either horizontally or vertically. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). **Function Signature:** ```python def island_perimeter(grid: List[List[int]]) -> int: pass ``` **Input:** - `grid` (List[List[int]]): A binary matrix representing the island and water. The grid\'s dimensions are `m x n`. **Output:** - Returns an integer representing the perimeter of the island. **Constraints:** - `1 <= m, n <= 100` - The grid contains exactly one island (no lakes or other islands). **Example:** ```python island_perimeter([ [0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0] ]) --> 16 island_perimeter([ [1] ]) --> 4 island_perimeter([ [1, 0] ]) --> 4 ``` **Explanation:** 1. In the first example, the island\'s perimeter is calculated by counting the number of edges that are adjacent to water or the boundary of the grid. The island has 16 such edges. 2. In the second example, a single land cell constitutes the island, and it has a perimeter of 4. 3. In the third example, a single row with one land cell also results in a perimeter of 4.","solution":"def island_perimeter(grid): rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Check all four possible neighbors and count the missing ones if r == 0 or grid[r-1][c] == 0: # Up perimeter += 1 if r == rows-1 or grid[r+1][c] == 0: # Down perimeter += 1 if c == 0 or grid[r][c-1] == 0: # Left perimeter += 1 if c == cols-1 or grid[r][c+1] == 0: # Right perimeter += 1 return perimeter"},{"question":"You are tasked with designing an image processing function in Python using popular libraries. Specifically, you will use `Pillow` to manipulate the image and `requests` to retrieve the image from a given URL. You will also interact with the user to determine how the image should be processed. Create a function named `process_image_from_url(url)` that takes a single parameter: - `url` (str): The URL of the image to process. The function should perform the following steps: 1. Fetch the image from the provided URL using `requests.get`. 2. Load the image into a `Pillow` `Image` object. 3. Prompt the user with the message: `\\"Choose an operation: \'grayscale\', \'rotate\', \'thumbnail\', \'save\'. Type your choice: \\"`. Based on the user\'s choice, perform the respective operation: - If the user chooses `\'grayscale\'`, convert the image to grayscale using the `convert(\'L\')` method. - If the user chooses `\'rotate\'`, prompt the user to enter the degrees to rotate the image with the message: `\\"Enter the rotation angle in degrees: \\"`, and rotate the image using the `rotate()` method. - If the user chooses `\'thumbnail\'`, resize the image to thumbnail size (128x128) using the `thumbnail((128, 128))` method. - If the user chooses `\'save\'`, save the image locally with the filename `\'processed_image.jpg\'`. 4. After performing the operation, if the user chose to save the image, print the message: `\\"Image saved as processed_image.jpg\\"`. 5. Prompt the user if they would like to perform another operation on the same image with the message: `\\"Would you like to perform another operation on the same image? Type \'y\' for yes or \'n\' for no.\\"`. If the input is `\'y\'`, restart the operation prompt (step 3). If the input is `\'n\'`, print `\\"Bye!\\"` and exit the program. If the input is invalid, print `\\"Please enter a valid input.\\"` and restart the function. Use the following libraries: - `requests.get`: to fetch the image from the URL. - `Pillow.Image.open`: to load the image. - `Pillow.Image` methods: for image processing operations.","solution":"import requests from PIL import Image from io import BytesIO def process_image_from_url(url): # Fetch image from URL response = requests.get(url) response.raise_for_status() # Ensure successful request image = Image.open(BytesIO(response.content)) while True: # Prompting the user for the operation choice choice = input(\\"Choose an operation: \'grayscale\', \'rotate\', \'thumbnail\', \'save\'. Type your choice: \\").lower() if choice == \'grayscale\': image = image.convert(\'L\') image.show() elif choice == \'rotate\': angle = input(\\"Enter the rotation angle in degrees: \\") try: angle = float(angle) image = image.rotate(angle) image.show() except ValueError: print(\\"Invalid angle. Please enter a valid number\\") continue elif choice == \'thumbnail\': image.thumbnail((128, 128)) image.show() elif choice == \'save\': image.save(\'processed_image.jpg\') print(\\"Image saved as processed_image.jpg\\") another_op = input(\\"Would you like to perform another operation on the same image? Type \'y\' for yes or \'n\' for no.\\").lower() if another_op == \'y\': continue elif another_op == \'n\': print(\\"Bye!\\") break else: print(\\"Please enter a valid input.\\")"},{"question":"Write a function **`interleave_strings`** that takes two input strings, and interleaves their characters to produce a new string. If one string is longer than the other, append the remaining characters of the longer string to the end of the interleaved string. Function Signature ```python def interleave_strings(s1: str, s2: str) -> str: ... ``` Examples ```python interleave_strings(\\"abc\\", \\"123\\") # Output should be: \\"a1b2c3\\" ``` ```python interleave_strings(\\"abc\\", \\"12345\\") # Output should be: \\"a1b2c345\\" ``` ```python interleave_strings(\\"abcd\\", \\"12\\") # Output should be: \\"a1b2cd\\" ``` Requirements: 1. Assume the strings contain only alphanumeric characters. 2. The function should not use any external libraries. 3. Maintain the order of characters in the input strings. Constraints: - `0 <= len(s1), len(s2) <= 1000` Notes: - This exercise helps practice basic string manipulation and iteration. Consider edge cases such as empty strings as well.","solution":"def interleave_strings(s1: str, s2: str) -> str: Interleaves two input strings and returns a new interleaved string. If one string is longer than the other, the remaining characters of the longer string will be appended to the end of the interleaved string. :param s1: First input string :param s2: Second input string :return: Interleaved string # Initialize the result list, this will help in efficient string concatenation result = [] # Get the lengths of each string len_s1, len_s2 = len(s1), len(s2) # Find the minimum length to iterate over both strings min_len = min(len_s1, len_s2) # Interleave characters from both strings for i in range(min_len): result.append(s1[i]) result.append(s2[i]) # Append the remaining part of s1, if any if len_s1 > min_len: result.extend(s1[min_len:]) # Append the remaining part of s2, if any if len_s2 > min_len: result.extend(s2[min_len:]) # Join the list into a string and return return \'\'.join(result)"},{"question":"**Context:** You are working on a function to help a robotic vacuum cleaner navigate a rectangular grid. The robot starts at the top-left corner of the grid and can move either right or down. The goal is to find the number of unique paths the robot can take to reach the bottom-right corner of the grid. **Requirements:** 1. The function `unique_paths(m: int, n: int) -> int` should calculate the number of unique paths for a grid with `m` rows and `n` columns. 2. The robot can only move to the right or down at any point in time. 3. Utilize dynamic programming to optimize the solution. **Algorithm:** - Use a 2D list to store the number of paths to each cell. - The number of ways to get to a cell `(i, j)` is the sum of the number of ways to get to the cell directly above it `(i-1, j)` and the cell directly to the left of it `(i, j-1)`. **Example:** - `unique_paths(3, 7)` should return `28` because there are 28 different ways for the robot to navigate a 3x7 grid. - `unique_paths(3, 2)` should return `3` because there are 3 different ways for the robot to navigate a 3x2 grid. **Hint:** - Initialize the first row and first column of the 2D list with `1`, as there\'s only one way to reach any cell in the first row or column—from the left for the first row and from above for the first column. **Note:** - If `m` or `n` is `1`, then the number of unique paths is `1` since the robot can only follow one path all the way across the grid.","solution":"def unique_paths(m: int, n: int) -> int: Returns the number of unique paths from top-left to bottom-right of an m x n grid. The robot can only move either down or right at any point in time. if m == 1 or n == 1: return 1 # Initialize a 2D list with 1s for the first row and first column dp = [[1] * n for _ in range(m)] # Fill in the rest of the grid for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"You are tasked with building a classification model using logistic regression to analyze a dataset and predict binary outcomes. Your function will utilize key components from the `sklearn` library: `train_test_split`, `LogisticRegression`, and `accuracy_score` to achieve this. Your function should be named `evaluate_logistic_regression` and take three arguments: 1. `X` (array-like): A 2D array representing the input features. 2. `y` (array-like): A 1D array representing the binary target variable. 3. `random_state` (int): An integer value to set the random state for reproducibility of the train-test split. Here is a step-by-step breakdown of what your function should accomplish: 1. **Split the data**: Use `train_test_split` to divide `X` and `y` into training and testing sets. Ensure that 75% of the data is used for training, and 25% is used for testing. 2. **Standardize the features**: Scale the features using `StandardScaler` to standardize the input features such that they have zero mean and unit variance. 3. **Train the Model**: Fit a `LogisticRegression` model to the training data. 4. **Make Predictions**: Use the trained model to make predictions on the test set. 5. **Evaluate the Model**: Calculate the accuracy score using `accuracy_score` to determine the model\'s prediction accuracy on the test data. To clarify, include the following imports in your function: ```python from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score from sklearn.preprocessing import StandardScaler ``` After implementing the function, test it using some sample data to ensure it works as expected.","solution":"from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score from sklearn.preprocessing import StandardScaler def evaluate_logistic_regression(X, y, random_state): This function evaluates a logistic regression model using given input features and target variable. Parameters: X (array-like): 2D array representing the input features. y (array-like): 1D array representing the binary target variable. random_state (int): Random state for reproducibility of the train-test split. Returns: float: Accuracy of the logistic regression model on the test data. # Step 1: Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=random_state) # Step 2: Standardize the features scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Step 3: Train the model model = LogisticRegression() model.fit(X_train_scaled, y_train) # Step 4: Make predictions y_pred = model.predict(X_test_scaled) # Step 5: Evaluate the model accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Create a Python function called `generate_combinations` that returns all possible k-combinations of a given list of unique integers. A k-combination is a subset of k distinct elements from the list. The function should: 1. Take two input parameters, `input_list` (a list of unique integers), and `k` (the length of each combination). 2. Generate all possible k-combinations of the elements in `input_list`. 3. Return the list of k-combinations, with each combination being represented as a tuple. 4. Use the `itertools.combinations` function from the `itertools` module to generate the combinations. Be sure to follow the structure provided in the function signature below: ```python import itertools def generate_combinations(input_list: list, k: int) -> list: pass ``` # Example ```python generate_combinations([1, 2, 3, 4], 2) ``` Output should look like: ``` [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] ``` # Another Example ```python generate_combinations([5, 6, 7, 8, 9], 3) ``` Output should look like: ``` [(5, 6, 7), (5, 6, 8), (5, 6, 9), (5, 7, 8), (5, 7, 9), (5, 8, 9), (6, 7, 8), (6, 7, 9), (6, 8, 9), (7, 8, 9)] ```","solution":"import itertools def generate_combinations(input_list: list, k: int) -> list: Generate all possible k-combinations of the elements in input_list. Parameters: input_list (list): A list of unique integers. k (int): The length of each combination. Returns: list: A list of k-combinations, each represented as a tuple. return list(itertools.combinations(input_list, k))"},{"question":"In this exercise, you will practice using the `pandas` library in Python to manipulate and analyze data. Your task is to implement a function that reads a CSV file containing information about employees and performs a series of operations to clean, filter, and summarize the data. This problem helps you learn how to work with DataFrames and apply various methods for data analysis in Python. Your function should be called `process_employee_data` and should follow this signature: ```python def process_employee_data(file_path): ``` # Parameters: - `file_path`: A string indicating the path to the CSV file containing employee data. The CSV will have the following columns: \'Name\', \'Department\', \'Salary\', \'Age\'. # Requirements: 1. Read the CSV file using `pandas.read_csv`. 2. Drop any rows with missing or null values. 3. Filter out employees who are younger than 30 years old. 4. Group the data by \'Department\' and calculate the average salary for each department. 5. Sort the departments by the calculated average salary in descending order. 6. Return the resulting DataFrame with columns \'Department\' and \'AverageSalary\', containing the departments and their corresponding average salaries. # Example: ```python import pandas as pd # Provided CSV file content: # Name,Department,Salary,Age # Alice,Engineering,80000,30 # Bob,Marketing,75000,29 # Charlie,Engineering,120000,45 # Diana,Marketing,90000,35 # Eve,HR,70000,38 # Example file path file_path = \'employee_data.csv\' # Process the employee data result_df = process_employee_data(file_path) print(result_df) ``` Expected output (assuming the provided CSV content): ``` Department AverageSalary 0 Engineering 100000.0 1 Marketing 90000.0 2 HR 70000.0 ``` In this example, `process_employee_data` will read the CSV file, clean and filter the data, group it by \'Department\', calculate the average salary, sort the departments based on these averages, and return the resulting DataFrame. Your task is to write the `process_employee_data` function that performs the required operations as described.","solution":"import pandas as pd def process_employee_data(file_path): Reads a CSV file, cleans, filters, and summarizes employee data. Parameters: file_path (str): The path to the CSV file containing employee data. Returns: pd.DataFrame: A DataFrame with columns \'Department\' and \'AverageSalary\' containing the departments and their corresponding average salaries, sorted in descending order. # Step 1: Read the CSV file df = pd.read_csv(file_path) # Step 2: Drop rows with missing values df = df.dropna() # Step 3: Filter out employees younger than 30 df = df[df[\'Age\'] >= 30] # Step 4: Group by \'Department\' and calculate the average salary for each department avg_salary_df = df.groupby(\'Department\')[\'Salary\'].mean().reset_index() # Step 5: Rename the columns accordingly avg_salary_df.columns = [\'Department\', \'AverageSalary\'] # Step 6: Sort the resulting DataFrame by \'AverageSalary\' in descending order avg_salary_df = avg_salary_df.sort_values(by=\'AverageSalary\', ascending=False) return avg_salary_df"},{"question":"Generate a dataset representing sales transactions. Each transaction should include a transaction ID, date, product name, quantity sold, and unit price. Calculate the total revenue for each product, plot a bar chart showing total revenue by product using matplotlib, and return the DataFrame and the Axes object for the plot. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt from datetime import datetime, timedelta import numpy as np def task_func(num_transactions=50, seed=42): ```","solution":"import pandas as pd import matplotlib.pyplot as plt from datetime import datetime, timedelta import numpy as np def task_func(num_transactions=50, seed=42): np.random.seed(seed) # Generate sample data transaction_ids = [f\'TX{i:03d}\' for i in range(1, num_transactions + 1)] start_date = datetime.now() - timedelta(days=num_transactions) dates = [start_date + timedelta(days=i) for i in range(num_transactions)] products = [\'Product A\', \'Product B\', \'Product C\', \'Product D\'] product_names = np.random.choice(products, num_transactions) quantities = np.random.randint(1, 10, num_transactions) unit_prices = np.random.uniform(10, 100, num_transactions) # Create DataFrame data = { \'Transaction ID\': transaction_ids, \'Date\': dates, \'Product Name\': product_names, \'Quantity Sold\': quantities, \'Unit Price\': unit_prices } df = pd.DataFrame(data) # Calculate Total Revenue df[\'Total Revenue\'] = df[\'Quantity Sold\'] * df[\'Unit Price\'] # Group by product name and calculate total revenue revenue_by_product = df.groupby(\'Product Name\')[\'Total Revenue\'].sum().reset_index() # Plot the bar chart fig, ax = plt.subplots() ax.bar(revenue_by_product[\'Product Name\'], revenue_by_product[\'Total Revenue\']) ax.set_title(\'Total Revenue by Product\') ax.set_xlabel(\'Product Name\') ax.set_ylabel(\'Total Revenue\') return df, ax"},{"question":"You need to implement a function called `find_common_substrings` which, given two input strings, finds and returns all common substrings of a specified length. The function should take in three arguments: `str1` (first string), `str2` (second string), and `k` (the length of substrings to be found). The conditions are: 1. If the length of the substrings (`k`) is greater than the length of either `str1` or `str2`, return an empty list. 2. Return a list of unique common substrings of length `k`. The substrings should be in the order they appear in `str1`. To achieve this, you can follow these steps: 1. Generate all substrings of length `k` for `str1`. 2. Check if each of these substrings exists in `str2`. 3. Collect and return the unique common substrings. Example usage: ```python find_common_substrings(\\"abcdef\\", \\"defghi\\", 3) ``` This would return `[\'def\']` since \'def\' is a common substring of length 3 between the two strings. Implement this function in Python.","solution":"def find_common_substrings(str1, str2, k): Returns a list of unique common substrings of length k present in both str1 and str2. if k > len(str1) or k > len(str2): return [] substrings_str1 = {str1[i:i+k] for i in range(len(str1) - k + 1)} substrings_str2 = {str2[i:i+k] for i in range(len(str2) - k + 1)} common_substrings = substrings_str1 & substrings_str2 return sorted(list(common_substrings), key=lambda x: str1.index(x))"},{"question":"You are developing a feature for an e-commerce web application that requires a sorting function. Specifically, you need to write a function that sorts a list of dictionaries representing products by multiple fields. Your task is to write a function named `sort_products` that sorts the list of product dictionaries first by the \'category\' field in alphabetical order, and then by the \'price\' field in ascending order. Each product dictionary is guaranteed to have the keys \'name\', \'category\', and \'price\'. # Function Specifications **Inputs:** - `products`: A list of dictionaries, where each dictionary has the following structure: ```python { \'name\': str, # The name of the product \'category\': str, # The category of the product \'price\': float # The price of the product } ``` **Outputs:** - A list of dictionaries sorted per the criteria mentioned above. # Example ```python products = [ {\'name\': \'Product 1\', \'category\': \'Electronics\', \'price\': 99.99}, {\'name\': \'Product 2\', \'category\': \'Books\', \'price\': 10.99}, {\'name\': \'Product 3\', \'category\': \'Electronics\', \'price\': 59.99}, {\'name\': \'Product 4\', \'category\': \'Books\', \'price\': 7.99} ] sorted_products = sort_products(products) # After sorting, sorted_products should be: # [ # {\'name\': \'Product 4\', \'category\': \'Books\', \'price\': 7.99}, # {\'name\': \'Product 2\', \'category\': \'Books\', \'price\': 10.99}, # {\'name\': \'Product 3\', \'category\': \'Electronics\', \'price\': 59.99}, # {\'name\': \'Product 1\', \'category\': \'Electronics\', \'price\': 99.99} # ] ``` # Additional Guidelines: 1. Use Python\'s built-in sorting capabilities. 2. Ensure that the function sorts the list in-place for memory efficiency. 3. Add inline comments to explain the logic wherever necessary. # Function Signature ```python def sort_products(products: list) -> list: pass ```","solution":"def sort_products(products): Sorts a list of product dictionaries first by the \'category\' field in alphabetical order, and then by the \'price\' field in ascending order. Args: products (list): A list of dictionaries with keys \'name\', \'category\', and \'price\'. Returns: list: The input list sorted by specified criteria. # Sorting primarily by \'category\' and secondarily by \'price\' return sorted(products, key=lambda x: (x[\'category\'], x[\'price\']))"},{"question":"Write a function named `find_longest_consecutive_subsequence` that takes a list of integers as input and returns the length of the longest consecutive subsequence in the list. A consecutive subsequence is a sequence of numbers where each number is exactly one more than the previous number. The main objectives of this problem are: 1. To identify all consecutive subsequences in an unsorted list of integers. 2. To find the length of the longest consecutive subsequence. The function should follow these steps: 1. Remove duplicates from the input list to handle cases where the same number appears multiple times. 2. Use a set data structure to achieve O(1) time complexity for membership checks. 3. Iterate through the list and, for each number, check if it is the start of a sequence (i.e., the previous number is not in the set). 4. For each start of a sequence, count the length of the consecutive subsequence. 5. Keep track of the maximum length found during the iterations. **Function Signature:** ```python def find_longest_consecutive_subsequence(nums: list) -> int: pass ``` **Example Usage:** ```python print(find_longest_consecutive_subsequence([100, 4, 200, 1, 3, 2])) # Output: 4 (sequence: 1, 2, 3, 4) print(find_longest_consecutive_subsequence([0, -1, 1, 2, -2, -3])) # Output: 6 (sequence: -3, -2, -1, 0, 1, 2) ``` The function should efficiently find and return the length of the longest consecutive subsequence in the list.","solution":"def find_longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the list. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: # Only check for the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In this problem, you are required to write a function named `fibonacci_sum` that calculates the sum of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. # Requirements: 1. Your function must be named `fibonacci_sum`. 2. You must use specific functions from the `numpy` library: - `numpy.array` to store the Fibonacci numbers. - `numpy.sum` to compute the sum of the array elements. # Function Signature: ```python def fibonacci_sum(n: int) -> int: ``` # Parameters: - `n` (int): The number of terms in the Fibonacci sequence to include in the sum. # Returns: - `int`: Returns the sum of the first `n` Fibonacci numbers. # Constraints: - ( 1 leq n leq 50 ) # Example: ```python import numpy as np print(fibonacci_sum(5)) # Output: 7 (0, 1, 1, 2, 3) print(fibonacci_sum(10)) # Output: 88 (0, 1, 1, 2, 3, 5, 8, 13, 21, 34) ``` In the example above, the sum of the first 5 Fibonacci numbers (0, 1, 1, 2, 3) is 7. The sum of the first 10 Fibonacci numbers (0, 1, 1, 2, 3, 5, 8, 13, 21, 34) is 88. # Additional Information: The Fibonacci sequence can be generated iteratively, and storing the sequence values in an array or list can facilitate the summation process using built-in functions for computational efficiency.","solution":"import numpy as np def fibonacci_sum(n: int) -> int: if n <= 0: return 0 # Initialize the first two Fibonacci numbers fib = [0, 1] # Generate the Fibonacci sequence up to the nth number for i in range(2, n): fib.append(fib[-1] + fib[-2]) # Convert to numpy array fib_array = np.array(fib[:n]) # Return the sum of the first n Fibonacci numbers return np.sum(fib_array)"},{"question":"You are tasked with creating a utility function to generate a summary report of student grades from a given CSV file. This task requires you to write a function named `generate_grade_summary`. The function signature is as follows: ```python def generate_grade_summary(csv_file: str) -> dict: ``` # Function Specification - The function should take a single argument `csv_file`, which is the path to the CSV file containing the student grades. - The CSV file will have the following columns: `StudentID`, `Name`, `Grade`. - The function should read the CSV file and compute: - The average grade of all students. - The highest grade. - The lowest grade. - The number of students who have grades above the average. - The function should return a dictionary with the calculated statistics: ```python { \\"average_grade\\": float, \\"highest_grade\\": float, \\"lowest_grade\\": float, \\"above_average_count\\": int } ``` # Requirements - Utilize the `csv` module to read the CSV file. - Ensure to handle edge cases such as an empty CSV file or a CSV file with invalid data. # Example Usage ```python summary = generate_grade_summary(\'/path/to/grades.csv\') print(summary) ``` # Sample CSV Content ```csv StudentID,Name,Grade 1,John Doe,85 2,Jane Smith,92 3,Bob Johnson,78 4,Alice Brown,88 5,Charlie Black,91 ``` # Notes - Ensure proper handling of file operations to avoid resource leaks. - Validate the data read from the CSV file to handle scenarios such as missing grades or invalid grade values. Return appropriate responses or raise exceptions where necessary. - You only need to write the `generate_grade_summary` function; no additional code is required for input handling or output display.","solution":"import csv def generate_grade_summary(csv_file: str) -> dict: with open(csv_file, newline=\'\') as file: reader = csv.DictReader(file) grades = [] for row in reader: try: grade = float(row[\'Grade\']) grades.append(grade) except ValueError: continue if not grades: return { \\"average_grade\\": 0.0, \\"highest_grade\\": 0.0, \\"lowest_grade\\": 0.0, \\"above_average_count\\": 0 } average_grade = sum(grades) / len(grades) highest_grade = max(grades) lowest_grade = min(grades) above_average_count = sum(1 for grade in grades if grade > average_grade) return { \\"average_grade\\": average_grade, \\"highest_grade\\": highest_grade, \\"lowest_grade\\": lowest_grade, \\"above_average_count\\": above_average_count }"},{"question":"Write a Python function named `has_pair_with_sum` that takes a list of integers and a target sum as input, and returns `True` if there are two distinct numbers in the list that add up to the target sum, and `False` otherwise. The function should have a linear runtime complexity. Function Signature: ```python def has_pair_with_sum(int_list: list, target: int) -> bool: ``` Parameters: - `int_list` (list of int): A list of integers which can have both positive and negative numbers. - `target` (int): The target sum to check for. Returns: - `bool`: `True` if there are two distinct numbers in the list that add up to the target sum, `False` otherwise. Example: ```python int_list = [10, 15, 3, 7] target = 17 has_pair_with_sum(int_list, target) ``` Expected Output: ```python True ``` ```python int_list = [1, 2, 3, 9] target = 8 has_pair_with_sum(int_list, target) ``` Expected Output: ```python False ``` Constraints: 1. Each input list will have at least two integers. 2. Use an algorithm with linear runtime complexity (O(n)).","solution":"def has_pair_with_sum(int_list: list, target: int) -> bool: Checks if there are two distinct numbers in int_list that add up to the target sum. seen = set() for num in int_list: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"You are tasked with creating a function named `generate_histogram()` that generates a histogram of randomly generated integers. This function will specifically visualize the frequency distribution of the generated integers using the `matplotlib` library. Your function should generate 1000 random integers between 1 and 100, and then create a histogram to show their distribution. # Detailed Requirements: 1. **Function Name:** `generate_histogram`. 2. **Parameters:** - The function does not require any parameters. 3. **Functionality:** - Generate 1000 random integers between 1 and 100 using `numpy.random.randint`. - Create a histogram using `matplotlib.pyplot.hist`. - Label the x-axis as \\"Integer Value\\" using `matplotlib.pyplot.xlabel`. - Label the y-axis as \\"Frequency\\" using `matplotlib.pyplot.ylabel`. - Set the title of the plot to \\"Integer Frequency Distribution\\" using `matplotlib.pyplot.title`. - Save the plot as \\"histogram.png\\" using `matplotlib.pyplot.savefig`. 4. **Visual Requirements:** - The x-axis should be labeled \\"Integer Value\\". - The y-axis should be labeled \\"Frequency\\". - The plot should contain a title \\"Integer Frequency Distribution\\". By solving this problem, you will learn to leverage and practice key functions from the `matplotlib` library to generate and save histograms, as well as how to generate random data using `numpy`.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_histogram(): Generates a histogram of 1000 random integers between 1 and 100 and saves the plot as \'histogram.png\'. # Generate 1000 random integers between 1 and 100 random_integers = np.random.randint(1, 101, size=1000) # Create a histogram plt.hist(random_integers, bins=range(1, 102), edgecolor=\'black\') # Label x-axis and y-axis plt.xlabel(\'Integer Value\') plt.ylabel(\'Frequency\') # Set the title plt.title(\'Integer Frequency Distribution\') # Save the plot as \'histogram.png\' plt.savefig(\'histogram.png\') # Clear the plt to prevent overlap in tests plt.clf()"},{"question":"** Suppose you are given a system that needs to process streaming data coming in as a series of requests. Each request is represented as a dictionary containing user data, where each key is the user ID (an integer) and the value is a list of integers representing data points for that user in a particular time frame. You need to write a function `process_requests` that will perform the following operations for each user: 1. Accumulate all the data points across multiple requests. 2. Compute the median of all accumulated data points for each user after all requests are processed. 3. Return the results as a dictionary where the key is the user ID and the value is the computed median. To find the median: - Sort the list of numbers. - If the number of data points is odd, the median is the middle element. - If the number of data points is even, the median is the average of the two middle elements. **Function Signature:** ```python def process_requests(requests: list) -> dict: ... ``` **Arguments:** - `requests`: A list of dictionaries where each dictionary contains user data. For example: `[{1: [10, 20], 2: [15]}, {1: [30, 5], 2: [10, 25]}]` **Return:** - A dictionary where each key is a user ID and the value is the median of the accumulated data points for that user. **Example:** ```python requests = [{1: [10, 20], 2: [15]}, {1: [30, 5], 2: [10, 25]}] # The function should return: # {1: 15.0, 2: 15.0} ``` **Constraints:** - You may assume that all user IDs and data points are integers. - Each user ID can have a varying number of data points across different requests. - The list of numbers for each user will have at least one data point in total after processing all requests. - Do not use any external libraries for median calculation other than standard Python libraries. **","solution":"def process_requests(requests): from statistics import median user_data = {} for request in requests: for user_id, data_points in request.items(): if user_id not in user_data: user_data[user_id] = [] user_data[user_id].extend(data_points) for user_id in user_data: user_data[user_id] = median(user_data[user_id]) return user_data"},{"question":"You are tasked with developing a function to evaluate the efficiency of a sorting algorithm by plotting its performance over various input sizes. You need to create a function named `plot_sorting_performance` that takes two arguments: 1. `sorting_algorithm`: A function that takes a list of integers and sorts it in non-decreasing order. 2. `input_sizes`: A list of integers representing different input sizes for which the sorting performance needs to be evaluated. Your function should perform the following tasks: - Generate a list of random integers for each input size using `numpy.random.randint`. - Measure the execution time of the sorting algorithm for each input size using `time.time`. - Plot the execution time against the input sizes using `matplotlib.pyplot`. - Label the x-axis as \\"Input Size\\" and the y-axis as \\"Execution Time (seconds)\\" with `matplotlib.pyplot.ylabel`. - Set the title of the plot to \\"Sorting Algorithm Performance\\". - Use `matplotlib.pyplot.show` to display the generated plot. Ensure to use the libraries `numpy` and `matplotlib.pyplot` for data generation and visualization, and the `time` library for execution time measurement, as specified in the requirements.","solution":"import numpy as np import matplotlib.pyplot as plt import time def plot_sorting_performance(sorting_algorithm, input_sizes): Plots the performance of a sorting algorithm over various input sizes. Parameters: sorting_algorithm (func): A function that takes a list of integers and sorts it. input_sizes (list): A list of integers representing different input sizes. execution_times = [] for size in input_sizes: random_list = np.random.randint(0, 10000, size).tolist() start_time = time.time() sorting_algorithm(random_list) end_time = time.time() execution_times.append(end_time - start_time) plt.plot(input_sizes, execution_times, marker=\'o\') plt.xlabel(\\"Input Size\\") plt.ylabel(\\"Execution Time (seconds)\\") plt.title(\\"Sorting Algorithm Performance\\") plt.show()"},{"question":"In this problem, you are tasked with creating a pie chart using Python\'s Matplotlib library. The focus of this exercise is to understand how to customize the appearance of the chart by setting labels and a legend. You will write a function named `create_pie_chart` that does the following: 1. Take a list of values (`sizes`) and a list of labels (`labels`) as input parameters. 2. Plot a pie chart using the given values. 3. Assign the provided labels to each slice of the pie chart. 4. Add a title to the chart with the text \'Market Share\'. 5. Customize the slices to have different colors of your choice. 6. Add a legend to the chart placed at the upper right corner with the title \'Companies\'. Your function should display the chart using `plt.show()` at the end. **Function Signature:** ```python def create_pie_chart(sizes: List[float], labels: List[str]) -> None: pass ``` **Example:** ```python sizes = [15, 30, 45, 10] labels = [\'Company A\', \'Company B\', \'Company C\', \'Company D\'] create_pie_chart(sizes, labels) ``` **Expected Output:** A pie chart displaying the market share distribution adhering to the provided specifications with custom colors and a legend.","solution":"import matplotlib.pyplot as plt from typing import List def create_pie_chart(sizes: List[float], labels: List[str]) -> None: Creates a pie chart with the given sizes and labels, with a title \'Market Share\' and a legend titled \'Companies\'. # Define custom colors colors = [\'#ff9999\',\'#66b3ff\',\'#99ff99\',\'#ffcc99\'] # Create the pie chart plt.pie(sizes, labels=labels, colors=colors, autopct=\'%1.1f%%\', startangle=140) # Set the title plt.title(\'Market Share\') # Add a legend plt.legend(title=\'Companies\', loc=\'upper right\') # Display the chart plt.show()"},{"question":"You are tasked with implementing a function `pair_probability` that calculates the probability of selecting a pair of sampling points within a given radius from each other from a two-dimensional plane. You will use lists and basic mathematical operations as part of your implementation. # Function Signature ```python def pair_probability(points, radius): # Your code here ``` # Parameters: - `points` (list of tuples of floats): A list of tuples representing the coordinates of points on a 2D plane, where each tuple is of the form `(x, y)`. - `radius` (float): The radius within which to check if two points are considered a pair. # Returns: The function should return a float representing the probability of selecting a pair of points such that their Euclidean distance is within the given radius. # Requirements: - You must utilize basic list operations to process the points. - You must utilize the Euclidean distance formula to calculate the distance between two points. # Detailed Description: 1. Initialize a variable `pair_count` to 0 to count the number of pairs within the given radius. 2. Calculate the total number of possible pairs in the list using combinatorial mathematics. 3. Use nested loops to iterate over each pair of points in the list: - For each pair of distinct points `(p1, p2)`, calculate the Euclidean distance between them. - If the distance is less than or equal to the given radius, increment `pair_count` by 1. 4. Calculate the probability as `pair_count / total_number_of_pairs`. 5. Return the probability as a float. # Example: ```python points = [(1, 2), (3, 4), (5, 6), (7, 8)] radius = 5 probability = pair_probability(points, radius) # Expected Output: # probability should be a float: 0.5 (since there are 3 pairs within the radius among 6 possible pairs) ``` Implement the `pair_probability` function based on the given description.","solution":"from math import sqrt from itertools import combinations def pair_probability(points, radius): Calculate the probability of selecting a pair of sampling points within a given radius from each other from a 2D plane. Parameters: points (list of tuples of floats): A list of tuples representing the coordinates of points on a 2D plane. radius (float): The radius within which to check if two points are considered a pair. Returns: float: The probability of selecting a pair of points such that their Euclidean distance is within the given radius. def euclidean_distance(p1, p2): return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) total_pairs = list(combinations(points, 2)) pair_count = sum(1 for p1, p2 in total_pairs if euclidean_distance(p1, p2) <= radius) total_number_of_pairs = len(total_pairs) if total_number_of_pairs == 0: return 0.0 probability = pair_count / total_number_of_pairs return float(probability)"},{"question":"Implement a function `find_closest_elements(arr, k, x)` that finds the `k` closest integers to the given number `x` within the list `arr`. The result should be sorted in ascending order. The closest means the absolute difference between the number in the array and `x` should be minimal. If there is a tie, prioritize the smaller number. The function signature should be: ```python def find_closest_elements(arr, k, x): ... ``` # Example ```python arr = [1, 2, 3, 4, 5] k = 4 x = 3 result = find_closest_elements(arr, k, x) print(result) # Expected output: [1, 2, 3, 4] arr = [1, 3, 7, 8, 9] k = 3 x = 5 result = find_closest_elements(arr, k, x) print(result) # Expected output: [3, 7, 8] ```","solution":"def find_closest_elements(arr, k, x): Finds the k closest integers to x in arr. :param arr: List of integers to search. :param k: Number of closest elements to find. :param x: The integer to compare distances to. :return: A list of the k closest integers sorted in ascending order. # Sort the array based on the absolute difference with x. sorted_arr = sorted(arr, key=lambda num: (abs(num - x), num)) # Get the first k elements. closest_elements = sorted_arr[:k] # Return the resulting list sorted in ascending order. return sorted(closest_elements)"},{"question":"You need to write a Python function that processes a list of strings, identifies valid email addresses, and determines the most frequent domain. A valid email address is in the format `local-part@domain.com`. The function should filter out any strings that do not match the format and then count the occurrence of each domain. The input list can contain any combination of valid and invalid email addresses. The function you need to implement is named `most_frequent_domain`. This function takes a single input `email_list` which is a list of strings, and performs the following steps: 1. Validates each string in `email_list` to ensure it matches the email format. 2. Extracts the domain from valid email addresses. 3. Counts the occurrences of each domain. 4. Returns the domain with the highest frequency. In the case of a tie, return any one of the most frequent domains. Your implementation should make use of regular expressions to match the email format. The function signature should be: ```python def most_frequent_domain(email_list: list) -> str: ``` Example: ```python print(most_frequent_domain([\\"test.email+alex@leetcode.com\\", \\"test.email.leet+alex@code.com\\", \\"testemail+david@lee.tcode.com\\"])) # Output: \\"leetcode.com\\" or \\"code.com\\" ```","solution":"import re from collections import Counter def most_frequent_domain(email_list): Returns the most frequent domain from the valid email addresses in the list. email_pattern = re.compile(r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\') domains = [] for email in email_list: if email_pattern.match(email): domain = email.split(\'@\')[1] domains.append(domain) if not domains: return None domain_counts = Counter(domains) most_common_domain = domain_counts.most_common(1)[0][0] return most_common_domain"},{"question":"Create a function that simulates rolling a six-sided die `n` times, calculates the cumulative sum of the outcomes, and returns a Pandas DataFrame with two columns: \'Roll\' and \'CumulativeSum\'. The function should output: DataFrame: A pandas DataFrame containing the \'Roll\' values and their corresponding cumulative sums. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def roll_die_and_cumsum(n=10): ```","solution":"import pandas as pd import numpy as np def roll_die_and_cumsum(n=10): Simulates rolling a six-sided die \'n\' times and calculates the cumulative sum of the outcomes. Parameters: n (int): Number of times the die is rolled. Returns: pd.DataFrame: A DataFrame with two columns: \'Roll\' and \'CumulativeSum\'. np.random.seed(0) # This ensures reproducibility; remove or modify for true randomness rolls = np.random.randint(1, 7, size=n) # Simulate rolling the die \'n\' times cumsum = np.cumsum(rolls) # Calculate the cumulative sum df = pd.DataFrame({ \'Roll\': rolls, \'CumulativeSum\': cumsum }) return df"},{"question":"You are required to develop a Python function that calculates the iterative solution for the Fibonacci sequence using matrix exponentiation. This approach should enhance the process of computing large Fibonacci numbers efficiently in O(log n) time. In matrix exponentiation, the Fibonacci sequence can be represented using the following transformation matrix: [ T = begin{bmatrix} 1 & 1 1 & 0 end{bmatrix} ] The nth Fibonacci number can be found by raising the transformation matrix T to the power of (n - 1) and referring to the element at position [0][0] in the resulting matrix: [ T^{n-1} = begin{bmatrix} F(n) & F(n-1) F(n-1) & F(n-2) end{bmatrix} ] Write a function `fib(n)` that calculates the nth Fibonacci number using this method. ```python def fib(n): Compute the nth Fibonacci number using matrix exponentiation. Parameters ---------- n : int The position in the Fibonacci sequence. Returns ------- int The nth Fibonacci number. ``` # Example: ```python print(fib(10)) ``` Expected output: ``` 55 ``` # Your task: 1. Implement the `fib` function. 2. Utilize matrix multiplication and exponentiation to achieve the solution. 3. Ensure the function is optimized for handling large values of `n`. # Constraints: - The input `n` is an integer where 0 <= n <= 10^18. - Use efficient algorithms to handle the matrix operations. # Note: - You do not need to handle validation of the input; you may assume `n` will always be a valid non-negative integer. - Aim to write clean and efficient code that adheres to best practices. # Hint: - A helper function to perform matrix multiplication and another for matrix exponentiation might be useful. - Using Python\'s built-in integer type help in dealing with very large numbers seamlessly.","solution":"def mat_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]] ] def mat_pow(matrix, n): Raises a 2x2 matrix to the power of n using exponentiation by squaring. result = [[1, 0], [0, 1]] base = matrix while n: if n % 2 == 1: result = mat_mult(result, base) base = mat_mult(base, base) n //= 2 return result def fib(n): Compute the nth Fibonacci number using matrix exponentiation. Parameters ---------- n : int The position in the Fibonacci sequence. Returns ------- int The nth Fibonacci number. if n <= 1: return n # Transformation matrix T = [[1, 1], [1, 0]] # Raise T to the power of (n-1) T_n_minus_1 = mat_pow(T, n-1) # The result is in T_n_minus_1[0][0] return T_n_minus_1[0][0]"},{"question":"Implement a function called `sequence_alternator` that takes two string parameters `seq1` and `seq2`, and returns a new string that alternates characters from `seq1` and `seq2`. If one string is longer than the other, the excess characters should be appended to the end of the new string in their original order. **Function Signature:** ```python def sequence_alternator(seq1: str, seq2: str) -> str: ``` **Input:** - `seq1`: A string consisting of alphanumeric characters. - `seq2`: A string consisting of alphanumeric characters. **Output:** - A string that consists of alternating characters from `seq1` and `seq2`. **Example:** ```python sequence_alternator(\'abc\', \'123\') ``` **Output:** ``` \'a1b2c3\' ``` ```python sequence_alternator(\'hello\', \'worldwide\') ``` **Output:** ``` \'hweolrllodwide\' ``` **Constraints:** - The length of each input string will be between 1 and 1000 characters. - You are not allowed to use additional libraries, you must implement the solution using basic Python functions only. **Notes:** - Aim for an efficient solution that handles the alternation in a single pass through the strings. **Implementation Requirements:** - Ensure that your function is properly documented and follows PEP 8 guidelines.","solution":"def sequence_alternator(seq1: str, seq2: str) -> str: Returns a new string that alternates characters from seq1 and seq2. If one string is longer than the other, the excess characters are appended to the end of the new string. Parameters: seq1 (str): First input sequence of alphanumeric characters. seq2 (str): Second input sequence of alphanumeric characters. Returns: str: A string that alternates characters from seq1 and seq2. result = [] len1, len2 = len(seq1), len(seq2) # Iterate through the shorter length min_len = min(len1, len2) for i in range(min_len): result.append(seq1[i]) result.append(seq2[i]) # Append remaining characters if any if len1 > len2: result.extend(seq1[min_len:]) elif len2 > len1: result.extend(seq2[min_len:]) return \'\'.join(result)"},{"question":"Implement a function named `find_missing_positive` that takes a list of integers and returns the smallest missing positive integer from the list. The function should run in O(n) time complexity and O(1) space complexity (excluding the input list). To achieve this, you are required to modify the input list in-place to segregate positive numbers from non-positive numbers and then identify the smallest missing positive integer within the modified list. Function signature: ```python def find_missing_positive(nums: List[int]) -> int: ``` # Example: ```python input: [3, 4, -1, 1] output: 2 input: [7, 8, 9, 11, 12] output: 1 input: [1, 2, 0] output: 3 ``` # Constraints: - The length of the list will be between 1 and 1000. - Elements of the list will be integers within the range of [-2^31, 2^31 - 1]. Your task is to implement this function and ensure it satisfies the given examples and constraints.","solution":"from typing import List def find_missing_positive(nums: List[int]) -> int: n = len(nums) # Segregate positive numbers from non-positive numbers for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Place nums[i] in its correct position, i.e., nums[i] should be placed at index nums[i]-1 correct_pos = nums[i] - 1 nums[i], nums[correct_pos] = nums[correct_pos], nums[i] # Find the first missing positive number for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers from 1 to n are present, the missing number is n+1 return n + 1"},{"question":"You are tasked with writing a Python function called `simulate_journey`, which simulates the movement of a character in a 2D grid. The character must follow a series of moves specified by a given list of commands, starting from the initial position `(0, 0)`. The allowed moves are `\\"left\\"`, `\\"right\\"`, `\\"up\\"`, and `\\"down\\"`, each moving the character one step in the respective direction. Your function `simulate_journey` should take in one parameter: - `commands` (list): A list of strings, where each string is one of the allowed movement commands. Your function should return a tuple representing the final position `(x, y)` of the character after all the commands have been executed. Here\'s the step-by-step approach to implement this: 1. Initialize the starting position of the character at `(0, 0)`. 2. Iterate over each command in the `commands` list. 3. Update the character\'s position according to each command: - `\\"left\\"`: Decrease the x-coordinate by 1. - `\\"right\\"`: Increase the x-coordinate by 1. - `\\"up\\"`: Increase the y-coordinate by 1. - `\\"down\\"`: Decrease the y-coordinate by 1. 4. Return the final position as a tuple `(x, y)`. # Example ```python simulate_journey([\\"up\\", \\"up\\", \\"left\\", \\"down\\", \\"right\\", \\"right\\"]) ``` This should return the final position `(1, 1)` after executing all the commands. You are required to follow the guidelines mentioned and ensure that the function simulates the journey correctly based on the list of movement commands provided.","solution":"def simulate_journey(commands): Simulates the movement of a character in a 2D grid. Parameters: commands (list): A list of strings, where each string is one of the allowed movement commands. Returns: tuple: The final position (x, y) of the character after all commands have been executed. # Initial position x, y = 0, 0 # Process each command for command in commands: if command == \\"left\\": x -= 1 elif command == \\"right\\": x += 1 elif command == \\"up\\": y += 1 elif command == \\"down\\": y -= 1 # Return final position return (x, y)"},{"question":"You are provided with ride-sharing trip data for a city and need to analyze it. Each trip in the dataset has the following attributes: - `Trip Start Timestamp`: The start time of the trip. - `Trip End Timestamp`: The end time of the trip. - `Trip Distance`: Distance of the trip in miles. - `Pickup Location`: The latitude and longitude of the pickup location. - `Dropoff Location`: The latitude and longitude of the dropoff location. - `User` : Type of user (e.g., regular, premium). Your task is to write a function `calculate_trip_statistics(data, user_type, day_part)` that takes a list of dictionaries representing these trips and computes statistics filtered by user type and part of the day. The function should: 1. Filter the trips based on the `user_type` and the time of day (`day_part`). 2. Calculate and return the total number of trips, the average trip distance, and the total distance covered during the specified part of the day. The `day_part` will be one of the following strings: - \\"morning\\" (5 AM to 12 PM) - \\"afternoon\\" (12 PM to 5 PM) - \\"evening\\" (5 PM to 9 PM) - \\"night\\" (9 PM to 5 AM) Parameters: - `data` (list): A list of dictionaries, where each dictionary contains the data for a trip. - `user_type` (str): The type of user to filter by (e.g., \\"regular\\", \\"premium\\"). - `day_part` (str): The part of the day to filter by (e.g., \\"morning\\", \\"afternoon\\", \\"evening\\", \\"night\\"). Returns: - tuple: A tuple containing three elements: 1. Total number of trips for the specified user type and day part. 2. Average trip distance for the specified user type and day part. 3. Total distance covered for the specified user type and day part. Example usage: ```python data = [ {\\"Trip Start Timestamp\\": \\"2022-10-01 06:15:00\\", \\"Trip End Timestamp\\": \\"2022-10-01 06:45:00\\", \\"Trip Distance\\": 12.3, \\"Pickup Location\\": [40.7128, -74.0060], \\"Dropoff Location\\": [40.7769, -73.9813], \\"User\\": \\"regular\\"}, {\\"Trip Start Timestamp\\": \\"2022-10-01 14:30:00\\", \\"Trip End Timestamp\\": \\"2022-10-01 15:00:00\\", \\"Trip Distance\\": 8.5, \\"Pickup Location\\": [40.7128, -74.0060], \\"Dropoff Location\\": [40.7421, -74.0059], \\"User\\": \\"premium\\"}, {\\"Trip Start Timestamp\\": \\"2022-10-01 20:00:00\\", \\"Trip End Timestamp\\": \\"2022-10-01 20:30:00\\", \\"Trip Distance\\": 5.0, \\"Pickup Location\\": [40.7128, -74.0060], \\"Dropoff Location\\": [40.7060, -74.0090], \\"User\\": \\"regular\\"} ] output = calculate_trip_statistics(data, \\"regular\\", \\"morning\\") print(output) # Output: (1, 12.3, 12.3) ```","solution":"from datetime import datetime def calculate_trip_statistics(data, user_type, day_part): Calculate trip statistics filtered by user type and part of the day. Parameters: - data (list): A list of dictionaries representing trip data. - user_type (str): Type of user to filter by (e.g., \\"regular\\", \\"premium\\"). - day_part (str): Part of the day to filter by (e.g., \\"morning\\", \\"afternoon\\", \\"evening\\", \\"night\\"). Returns: - tuple: (total number of trips, average trip distance, total distance covered). # Define time ranges for each part of the day day_part_ranges = { \\"morning\\": (5, 12), \\"afternoon\\": (12, 17), \\"evening\\": (17, 21), \\"night\\": (21, 5) # night spans over midnight, hence the special consideration } start_hour, end_hour = day_part_ranges[day_part] def is_in_day_part(timestamp, start_hour, end_hour): hour = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\").hour if start_hour < end_hour: return start_hour <= hour < end_hour else: # manages the night case where the time span is across the midnight return hour >= start_hour or hour < end_hour filtered_trips = [trip for trip in data if trip[\'User\'] == user_type and is_in_day_part(trip[\'Trip Start Timestamp\'], start_hour, end_hour)] total_trips = len(filtered_trips) total_distance = sum(trip[\\"Trip Distance\\"] for trip in filtered_trips) average_distance = (total_distance / total_trips) if total_trips > 0 else 0 return total_trips, average_distance, total_distance"},{"question":"You need to implement a function called `compress_string` that takes a single input parameter: a string `s`. The function should compress the string using the following basic compression algorithm: 1. Count the number of consecutive occurrences of each character and append the character followed by the count to a new string. 2. If the compressed string is not smaller than the original string, return the original string. For example: - \\"aabcccccaaa\\" should be compressed to \\"a2b1c5a3\\". - \\"abc\\" should remain \\"abc\\" as the compressed string would not be shorter. The function should handle strings containing uppercase and lowercase alphabetic characters only. Here is the signature of the function you need to implement: ```python def compress_string(s: str) -> str: pass ```","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # append the last set of characters compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that processes a list of dictionaries representing employees, where each dictionary contains \'name\', \'position\', and \'salary\' keys. The function should: 1. Filter out employees who earn less than a specified salary threshold. 2. Calculate the average salary of the remaining employees. 3. Sort the remaining employees by position (alphabetically) and then by salary (descending order). Return a tuple containing: - The filtered and sorted list of dictionaries. - The average salary of the remaining employees (rounded to 2 decimal places). Ensure that the function handles and reports any data-related errors gracefully. You should write self-contained code starting with: ``` def process_employees(employee_list, salary_threshold): ```","solution":"def process_employees(employee_list, salary_threshold): Process the list of employee dictionaries to filter, sort and compute average salary. - Filters out employees earning less than the salary_threshold. - Calculates the average salary of the remaining employees. - Sorts remaining employees first by position (alphabetically) and then by salary (descending). Args: employee_list (list): List of dictionaries with \'name\', \'position\', and \'salary\' keys. salary_threshold (int): Salary threshold to filter employees. Returns: tuple: Filtered and sorted list of dictionaries and average salary of remaining employees. try: # Filter out employees who earn less than the salary threshold filtered_employees = [emp for emp in employee_list if emp[\'salary\'] >= salary_threshold] if not filtered_employees: return ([], 0) # Calculate the average salary of the remaining employees total_salary = sum(emp[\'salary\'] for emp in filtered_employees) average_salary = round(total_salary / len(filtered_employees), 2) # Sort by position (alphabetically) and then by salary (descending) filtered_employees.sort(key=lambda x: (x[\'position\'], -x[\'salary\'])) return (filtered_employees, average_salary) except (KeyError, TypeError) as e: print(f\\"Error: {e}\\") return ([], 0)"},{"question":"You are asked to write a function `simulate_dice_rolls` that simulates rolling a pair of six-sided dice a specified number of times and analyzes the results. The function should take an integer parameter `n` which indicates the number of times the dice should be rolled, and it should return a dictionary containing the frequency of each possible sum of the two dice. The function should follow these steps: 1. Create a function `roll_dice` that simulates rolling a pair of six-sided dice and returns their sum. 2. Roll the dice `n` times and keep track of the frequency of each possible sum (from 2 to 12). 3. Store and return the frequencies in a dictionary where the keys are the possible sums and the values are the corresponding frequencies. Ensure you provide a correctly formatted docstring for the function and include a brief demonstration of the function with `n=1000`. # Example ```python def simulate_dice_rolls(n): Simulate rolling a pair of six-sided dice n times and return the frequency of each possible sum. Parameters: n (int): The number of times to roll the dice. Returns: dict: A dictionary containing the frequency of each possible sum from 2 to 12. from random import randint def roll_dice(): return randint(1, 6) + randint(1, 6) frequencies = {i: 0 for i in range(2, 13)} for _ in range(n): result = roll_dice() frequencies[result] += 1 return frequencies # Example usage result = simulate_dice_rolls(1000) print(result) ``` # Note: - You should ensure the dictionary contains keys for all sums from 2 to 12, even if some sums do not occur.","solution":"def simulate_dice_rolls(n): Simulate rolling a pair of six-sided dice n times and return the frequency of each possible sum. Parameters: n (int): The number of times to roll the dice. Returns: dict: A dictionary containing the frequency of each possible sum from 2 to 12. from random import randint def roll_dice(): return randint(1, 6) + randint(1, 6) frequencies = {i: 0 for i in range(2, 13)} for _ in range(n): result = roll_dice() frequencies[result] += 1 return frequencies # Example usage result = simulate_dice_rolls(1000) print(result)"},{"question":"Design a function named `is_ascending_sequence` that checks if all elements in a given list are in strictly ascending order. The function needs to take a single parameter which is a list of integers. If the list is strictly ascending, return `True`. Otherwise, return `False`. A list is considered strictly ascending if each element is greater than the preceding one. # Requirements: 1. Implement the function `is_ascending_sequence(lst)`. 2. The function should take a list of integers, `lst`, as its only parameter. 3. Return `True` if the list is strictly ascending; otherwise, return `False`. # Example ```python lst1 = [1, 2, 3, 4, 5] result1 = is_ascending_sequence(lst1) print(result1) # Expected output: True lst2 = [1, 2, 2, 3, 4] result2 = is_ascending_sequence(lst2) print(result2) # Expected output: False lst3 = [5, 4, 3, 2, 1] result3 = is_ascending_sequence(lst3) print(result3) # Expected output: False ``` In the first example, the list `[1, 2, 3, 4, 5]` is strictly ascending, so the function returns `True`. In the second example, there is a repetition of the number `2`, thus the list is not strictly ascending, and the function returns `False`. In the third example, the list `[5, 4, 3, 2, 1]` is in descending order, hence the function returns `False`. # Constraints 1. The list will contain at least 2 elements. 2. The elements in the list will be integers.","solution":"def is_ascending_sequence(lst): Checks if all elements in the input list are in strictly ascending order. Args: lst (list): A list of integers. Returns: bool: True if the list is strictly ascending, False otherwise. # Iterate through the list and check if each element is greater than the previous one for i in range(1, len(lst)): if lst[i] <= lst[i - 1]: return False return True"},{"question":"Given a list of dictionaries representing book inventory with the following structure: ```python books = [ {\\"id\\": 1, \\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"price\\": 29.99, \\"stock\\": 3}, {\\"id\\": 2, \\"title\\": \\"Data Structures\\", \\"author\\": \\"Jane Smith\\", \\"price\\": 24.99, \\"stock\\": 10}, {\\"id\\": 3, \\"title\\": \\"Machine Learning\\", \\"author\\": \\"Tom Johnson\\", \\"price\\": 39.99, \\"stock\\": 0}, {\\"id\\": 4, \\"title\\": \\"Deep Learning\\", \\"author\\": \\"Kate Winslet\\", \\"price\\": 50.00, \\"stock\\": 7}, {\\"id\\": 5, \\"title\\": \\"Artificial Intelligence\\", \\"author\\": \\"Henry Ford\\", \\"price\\": 45.50, \\"stock\\": 5}, ] ``` Write a function `update_inventory(books: List[Dict], sales: List[Tuple[int, int]]) -> List[Dict]` that takes the book inventory list and a list of tuples representing sales transactions. Each tuple in the sales list contains a book `id` and `quantity` sold. The function should update the `stock` of each book according to the sales and return the updated list of books. If the stock of a book goes below zero, set the stock to zero. For example, given the sales: ```python sales = [ (1, 2), # Sold 2 copies of book with id 1 (3, 1), # Sold 1 copy of book with id 3 (4, 8), # Sold 8 copies of book with id 4 ] ``` The function should return: ```python updated_books = [ {\\"id\\": 1, \\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"price\\": 29.99, \\"stock\\": 1}, {\\"id\\": 2, \\"title\\": \\"Data Structures\\", \\"author\\": \\"Jane Smith\\", \\"price\\": 24.99, \\"stock\\": 10}, {\\"id\\": 3, \\"title\\": \\"Machine Learning\\", \\"author\\": \\"Tom Johnson\\", \\"price\\": 39.99, \\"stock\\": 0}, {\\"id\\": 4, \\"title\\": \\"Deep Learning\\", \\"author\\": \\"Kate Winslet\\", \\"price\\": 50.00, \\"stock\\": 0}, {\\"id\\": 5, \\"title\\": \\"Artificial Intelligence\\", \\"author\\": \\"Henry Ford\\", \\"price\\": 45.50, \\"stock\\": 5}, ] ``` **Requirements:** - Iterate through each sale, update the stock of the corresponding book. - Ensure that the stock does not go below zero. - Use appropriate data handling techniques to modify the list of dictionaries in place.","solution":"from typing import List, Dict, Tuple def update_inventory(books: List[Dict], sales: List[Tuple[int, int]]) -> List[Dict]: # Create a dictionary for quick lookup by book id books_dict = {book[\'id\']: book for book in books} # Iterate through each sale transaction for sale_id, quantity in sales: if sale_id in books_dict: # Update the stock for the corresponding book new_stock = books_dict[sale_id][\'stock\'] - quantity # Ensure stock does not go below zero books_dict[sale_id][\'stock\'] = max(new_stock, 0) # Return the updated list of books return list(books_dict.values())"},{"question":"Write a function that reads a CSV file from a given URL, calculates the average of numerical values in a specified column, and returns the result. The function should handle URL errors, file reading errors, CSV format errors, and ensure the specified column exists and contains numerical values. The function should output: - float: The average of the specified column. - None: If the URL is invalid, the file cannot be read, is not a CSV file, the specified column does not exist, or contains non-numeric values. You should write self-contained code starting with: ``` import csv import urllib.request import io def calculate_average(url, column_name): ```","solution":"import csv import urllib.request import io def calculate_average(url, column_name): try: response = urllib.request.urlopen(url) csv_file = io.StringIO(response.read().decode(\'utf-8\')) reader = csv.DictReader(csv_file) column_values = [] for row in reader: if column_name not in row: return None try: column_values.append(float(row[column_name])) except ValueError: return None if not column_values: return None return sum(column_values) / len(column_values) except (urllib.error.URLError, ValueError, csv.Error): return None"},{"question":"You have been tasked to write a function that checks if a string is a valid email address based on specific criteria. Your function, `is_valid_email(email)`, should verify the provided email string against the following conditions: 1. The email must contain exactly one `@` symbol. 2. The email should have at least one character before the `@` symbol. 3. The domain name after the `@` symbol must contain at least one period (`.`). 4. The part before the period in the domain name must have at least one character. 5. The domain suffix after the period must be at least 2 characters long. Write the function `is_valid_email(email)` which returns `True` if the email meets all the criteria, otherwise, it returns `False`. **Function Signature:** ```python def is_valid_email(email: str) -> bool: ... ``` # Example ```python email1 = \\"example@domain.com\\" print(is_valid_email(email1)) # Expected Output: True email2 = \\"example@domain\\" print(is_valid_email(email2)) # Expected Output: False email3 = \\"@domain.com\\" print(is_valid_email(email3)) # Expected Output: False email4 = \\"example.domain.com\\" print(is_valid_email(email4)) # Expected Output: False ``` # Constraints - The input is assumed to be a non-empty string. - The function should make a case-sensitive validation of the email string. - The `@` and `.` symbols should not be at the start or end of the email.","solution":"def is_valid_email(email: str) -> bool: Checks if the given string is a valid email address based on specific criteria. Parameters: - email (str): The email address to be validated. Returns: - bool: True if the email is valid, False otherwise. # Checking for exactly one \'@\' symbol if email.count(\'@\') != 1: return False local, domain = email.split(\'@\') # Checking for at least one character before the \'@\' symbol if len(local) == 0: return False # Checking for at least one period in the domain name if domain.count(\'.\') < 1: return False # Splitting the domain name on the first period primary_domain, domain_suffix = domain.split(\'.\', 1) # Checking for at least one character before the period in the domain name if len(primary_domain) == 0: return False # Checking for at least two characters in the domain suffix if len(domain_suffix) < 2: return False return True"},{"question":"Write a function that generates a histogram to visualize the frequency distribution of a specified column from a dataset provided in a CSV file. The function should load the data from the CSV file, plot the histogram with appropriate labels and title, and return the pandas DataFrame containing the data, as well as the matplotlib Axes object for the histogram. The function should output with: pd.DataFrame: The DataFrame containing the loaded data. matplotlib.axes.Axes: The Axes object with the histogram. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def visualize_histogram(csv_file, col): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def visualize_histogram(csv_file, col): Loads data from a CSV file and plots a histogram of the specified column. Parameters: csv_file (str): The path to the CSV file. col (str): The column to plot the histogram. Returns: pd.DataFrame: The DataFrame containing the loaded data. matplotlib.axes.Axes: The Axes object with the histogram. # Load the data from the CSV file data = pd.read_csv(csv_file) # Plot the histogram ax = data[col].plot(kind=\'hist\', title=f\'Histogram of {col}\') ax.set_xlabel(col) ax.set_ylabel(\'Frequency\') # Show the plot plt.show() return data, ax"},{"question":"Develop a function that takes as input the daily temperatures of a city for an entire year (given as a list of integers) and performs the following tasks: 1. Identify the hottest and coldest days of the year. 2. Calculate the average temperature for each month. 3. Determine the longest streak of consecutive days with above-average temperatures for the year. The function should output a tuple containing: - The temperatures of the hottest and coldest days. - A dictionary where keys are month names and values are the average temperatures of the respective months. - An integer representing the longest streak of consecutive days with above-average temperatures. You should write self-contained code starting with: ``` def analyze_temperatures(daily_temperatures): ```","solution":"from statistics import mean def analyze_temperatures(daily_temperatures): Analyze the daily temperatures of a city for an entire year. Parameters: daily_temperatures (list of int): List of daily temperatures for the year (365 days). Returns: tuple: containing: - Hottest and coldest day temperatures. - Dictionary with month names as keys and average temperatures as values. - Longest streak of consecutive days with above-average temperatures. if len(daily_temperatures) != 365: raise ValueError(\\"Input list must contain exactly 365 temperatures.\\") # Constants MONTHS = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"] DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Identify hottest and coldest days hottest = max(daily_temperatures) coldest = min(daily_temperatures) # Calculate average temperature for each month monthly_averages = {} start = 0 for i, month in enumerate(MONTHS): end = start + DAYS_IN_MONTH[i] monthly_averages[month] = mean(daily_temperatures[start:end]) start = end # Overall average temperature for the year overall_avg = mean(daily_temperatures) # Determine the longest streak of above-average temperatures longest_streak = 0 current_streak = 0 for temp in daily_temperatures: if temp > overall_avg: current_streak += 1 longest_streak = max(longest_streak, current_streak) else: current_streak = 0 return (hottest, coldest), monthly_averages, longest_streak"},{"question":"You need to design a function named `analyzeText` that processes a list of text documents and performs various analytical tasks based on the specified mode. Each document is represented as an object with two attributes: `title` and `content`. The `analyzeText` function should accept the following parameters: - `documents` (list): A list of document objects, where each object has two attributes - `title` (string) and `content` (string). - `mode` (string): Determines the type of analysis to be performed. The mode can be one of the following: `\'word_count\'`, `\'common_words\'`, or `\'longest_content\'`. Depending on the value of the mode, your function should perform and return the following: - `\'word_count\'`: A dictionary where the keys are the document titles and the values are the word counts for each document. - `\'common_words\'`: A set of words that are common to all documents. A word is defined as a contiguous sequence of alphabetic characters, case-insensitive. - `\'longest_content\'`: The title of the document with the longest content based on the number of words. **Example Input:** ```python class Document: def __init__(self, title, content): self.title = title self.content = content documents = [Document(\\"Doc1\\", \\"The quick brown fox jumps over the lazy dog\\"), Document(\\"Doc2\\", \\"The quick brown fox is quick\\"), Document(\\"Doc3\\", \\"A quick brown dog outpaces a quick fox\\")] mode = \'common_words\' ``` **Example Output:** ```python {\\"quick\\", \\"brown\\"} ``` **Function Signature:** ```python def analyzeText(documents, mode): pass ``` Your task is to implement the `analyzeText` function such that it fulfills the described behavior.","solution":"class Document: def __init__(self, title, content): self.title = title self.content = content def analyzeText(documents, mode): if mode == \'word_count\': return {doc.title: len(doc.content.split()) for doc in documents} elif mode == \'common_words\': def get_words(content): return set(content.lower().split()) common_words = get_words(documents[0].content) for doc in documents[1:]: common_words.intersection_update(get_words(doc.content)) return common_words elif mode == \'longest_content\': longest_doc = max(documents, key=lambda doc: len(doc.content.split())) return longest_doc.title else: raise ValueError(\\"Invalid mode\\")"},{"question":"Create a function that accepts a string of text and returns a dictionary where the keys are words from the text and the values are the number of times each word appears. Words should be considered case-insensitively, and the function should ignore punctuation and special characters. The function should be written as follows: ``` import re from collections import Counter from typing import Dict def word_count(text: str) -> Dict[str, int]: ```","solution":"import re from collections import Counter from typing import Dict def word_count(text: str) -> Dict[str, int]: # Remove punctuation and special characters, normalize case words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of words word_counter = Counter(words) return dict(word_counter)"},{"question":"You are tasked with writing a function named `Find_Largest_Divisible_Subset` that finds the largest subset of a given list of integers such that every pair `(x, y)` in the subset satisfies `x % y == 0` or `y % x == 0`. **Input:** 1. `nums` (list of int): A list of positive integers. **Output:** The function should return the largest subset that meets the criteria. If there are multiple solutions of the same size, return any of them. **Function Signature:** ```python def Find_Largest_Divisible_Subset(nums: List[int]) -> List[int]: ``` **Specific Requirements:** - You may assume that the input list of integers has at least one element and that all elements are distinct. - The resulting subset should be sorted in ascending order. - Focus on optimizing the time complexity of your solution. **Example Usage:** ```python nums = [1, 2, 4, 8] subset = Find_Largest_Divisible_Subset(nums) # Example output: [1, 2, 4, 8] nums = [3, 6, 9, 12] subset = Find_Largest_Divisible_Subset(nums) # Example output: [3, 6, 12] ``` #","solution":"from typing import List def Find_Largest_Divisible_Subset(nums: List[int]) -> List[int]: Returns the largest subset such that for every pair (x, y) in the subset, x % y == 0 or y % x == 0. if not nums: return [] # Sort nums to ensure we can build subsets where elements are multiple of their precursors. nums.sort() n = len(nums) dp = [1] * n previous_index = [-1] * n max_size, max_index = 1, 0 for i in range(1, n): for j in range(i): if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0: if dp[j] + 1 > dp[i]: dp[i] = dp[j] + 1 previous_index[i] = j if dp[i] > max_size: max_size = dp[i] max_index = i # Reconstruct the largest divisible subset result = [] while max_index != -1: result.append(nums[max_index]) max_index = previous_index[max_index] result.reverse() return result"},{"question":"In this coding challenge, you are required to write a function `unique_integers_sum_to_zero(n)`. The goal of the function is to generate an array of `n` unique integers that sum to zero. # Instructions 1. The function should generate `n` distinct integers. 2. Ensure that the sum of all integers in the array equals zero. 3. If `n` is even, the integers should be symmetric around zero (e.g., for `n=4` the output could be `[-2, -1, 1, 2]`). 4. If `n` is odd, include zero in the array and ensure symmetry around zero (e.g., for `n=5` the output could be `[-2, -1, 0, 1, 2]`). # Requirements - You must ensure that the array contains exactly `n` distinct integers. - The integers in the array must sum to zero. - The function should handle edge cases where `n` is 1 or any other small value. # Examples ```python # Example 1 n = 4 # Sample Output: [-2, -1, 1, 2] # Example 2 n = 5 # Sample Output: [-2, -1, 0, 1, 2] ``` # Function Signature ```python def unique_integers_sum_to_zero(n: int) -> List[int]: ```","solution":"from typing import List def unique_integers_sum_to_zero(n: int) -> List[int]: Generate a list of n unique integers that sum to zero. :param n: The number of unique integers. :return: A list of n unique integers that sum to zero. result = [] if n % 2 != 0: # if n is odd result.append(0) n -= 1 for i in range(1, n // 2 + 1): result.append(i) result.append(-i) return result"},{"question":"You are required to implement a function named `find_missing_number(sequence)` that identifies the missing number from an arithmetic sequence. An arithmetic sequence is a sequence of numbers where the difference between consecutive terms is constant. This function should take one parameter: 1. `sequence`: A list containing `n` integers representing an incomplete arithmetic sequence with only one number missing. You need to: 1. Determine the common difference `d` of the arithmetic sequence. 2. Find the missing number by comparing the difference between elements. # Example: ```python sequence = [2, 4, 6, 10] # The sequence with a missing number (8 in this case) print(find_missing_number(sequence)) # output should be 8 ``` # Function Signature: ```python def find_missing_number(sequence): pass ``` # Constraints: - The sequence will have at least 3 elements. - The missing number will always be one of the numbers that fits the arithmetic sequence pattern. - All elements of the sequence are unique integers. - The sequence will contain at most one missing number. # Implementation hints: - To find the common difference `d`, you can calculate the differences between consecutive elements and take the most frequent difference as `d`. - Traverse the sequence and check where the difference between consecutive elements deviates from `d`. The deviation indicates the position of the missing number.","solution":"def find_missing_number(sequence): Identifies the missing number from an incomplete arithmetic sequence. Parameters: sequence (list): A list of integers representing an incomplete arithmetic sequence. Returns: int: The missing number in the sequence. # Calculate the common difference assuming small initial sequence n = len(sequence) # Find the difference between the first two elements and the last two elements, which should ideally give us the common difference d1 = sequence[1] - sequence[0] d2 = sequence[-1] - sequence[-2] # We take the most assumed difference as d d = min(d1, d2) # Iterate through the sequence and find where the difference deviates from \'d\' for i in range(n - 1): if sequence[i + 1] - sequence[i] != d: # The missing number would be the current element plus the common difference return sequence[i] + d return None # In case no missing number is found (edge case), though problem states there is always a missing number"},{"question":"You are building a dynamic leaderboard for a gaming app. The leaderboard should support adding new scores, removing scores, and retrieving the top `k` highest scores efficiently. You need to implement a `Leaderboard` class that manages these operations. # Class Details **Class Name:** `Leaderboard` **Methods:** 1. `__init__()`: Initializes the leaderboard. 2. `add_score(player_id: int, score: int) -> None`: Adds the given `score` for the `player_id`. If the player already has a score, this method should add to their current score. 3. `remove_player(player_id: int) -> bool`: Removes the player from the leaderboard. Returns `True` if the player was successfully removed, otherwise `False`. 4. `top(k: int) -> List[int]`: Returns a list of the IDs of the top `k` players with the highest scores, sorted in descending order of scores. If two players have the same score, the player with the lower `player_id` should appear first. # Instructions: - Use a dictionary to store player scores with `player_id` as the key and their cumulative score as the value. - Utilize a data structure that allows efficient tracking and sorting of the top scores. - Aim for efficient implementation with regards to time and space complexity. **Example:** ```python lb = Leaderboard() lb.add_score(1, 100) lb.add_score(2, 200) lb.add_score(1, 50) print(lb.top(1)) # Output: [2] print(lb.top(2)) # Output: [2, 1] print(lb.remove_player(1)) # Output: True print(lb.top(1)) # Output: [2] print(lb.remove_player(3)) # Output: False ``` **Requirements:** - Ensure that the leaderboard handles large data sets and frequent updates efficiently. - Avoid unnecessary complexity and aim for clear, readable code. Below is a simplified outline for `Leaderboard` class: ```python from typing import List class Leaderboard: def __init__(self): # Initialize the data structure pass def add_score(self, player_id: int, score: int) -> None: # Add or update the player\'s score pass def remove_player(self, player_id: int) -> bool: # Remove the player and return True if successful pass def top(self, k: int) -> List[int]: # Return the top k player IDs based on scores pass ```","solution":"from typing import List from collections import defaultdict class Leaderboard: def __init__(self): self.scores = defaultdict(int) self.sorted_scores = [] def add_score(self, player_id: int, score: int) -> None: self.scores[player_id] += score self._update_sorted_scores() def remove_player(self, player_id: int) -> bool: if player_id in self.scores: del self.scores[player_id] self._update_sorted_scores() return True else: return False def top(self, k: int) -> List[int]: return [player_id for player_id, _ in self.sorted_scores[:k]] def _update_sorted_scores(self): self.sorted_scores = sorted(self.scores.items(), key=lambda x: (-x[1], x[0]))"},{"question":"You are required to write a function named `process_integers` that takes a list of integers as input and returns a dictionary with the following analyses: 1. **Even and Odd Counts**: - Count the number of even integers and odd integers in the list and store them with keys `\\"even_count\\"` and `\\"odd_count\\"` respectively. 2. **Prime Numbers**: - Identify all the prime numbers in the list and store them in a list with the key `\\"primes\\"`. 3. **Sum of Squares**: - Calculate the sum of squares of all the integers in the list and store it with the key `\\"sum_of_squares\\"`. The function should handle cases where the input list might be empty gracefully. ```python def process_integers(integers): # Implementation here ```","solution":"def process_integers(integers): def is_prime(n): Helper function to check if a number is prime if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True result = { \\"even_count\\": 0, \\"odd_count\\": 0, \\"primes\\": [], \\"sum_of_squares\\": 0 } for num in integers: if num % 2 == 0: result[\\"even_count\\"] += 1 else: result[\\"odd_count\\"] += 1 if is_prime(num): result[\\"primes\\"].append(num) result[\\"sum_of_squares\\"] += num ** 2 return result"},{"question":"In this problem, you are required to write a Python function named `summarize_weather_data` that processes weather data from a CSV file and calculates summary statistics on daily temperatures. You will use the `pandas` library for this task. The CSV file, \\"weather_data.csv,\\" is located in the same directory as your script. It contains columns such as \\"Date\\", \\"Temperature\\", \\"Humidity\\", and \\"City\\". Each row corresponds to the weather data of a single day in a specific city. The function will have two arguments: - `city` (str): The name of the city to analyze (e.g., \\"San Francisco\\", \\"New York\\", or \\"Chicago\\"). - `month` (int): The month to filter by, represented as an integer (1 for January, 2 for February, etc.). Your function should: 1. Load the CSV file into a pandas DataFrame. 2. Convert the \\"Date\\" column to datetime. 3. Filter the DataFrame for the specified city and month. 4. Calculate summary statistics for the daily \\"Temperature\\" column: - Mean temperature - Median temperature - Minimum temperature - Maximum temperature 5. Return a dictionary containing the calculated statistics. You are required to use the `pandas.read_csv` method to load the data. Here\'s a step-by-step function signature for your reference: ```python def summarize_weather_data(city: str, month: int) -> dict: pass ```","solution":"import pandas as pd def summarize_weather_data(city: str, month: int) -> dict: # Load the CSV file df = pd.read_csv(\'weather_data.csv\') # Convert the \\"Date\\" column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter the DataFrame for the specified city and month filtered_df = df[(df[\'City\'] == city) & (df[\'Date\'].dt.month == month)] # Calculate summary statistics for the daily \\"Temperature\\" column mean_temperature = filtered_df[\'Temperature\'].mean() median_temperature = filtered_df[\'Temperature\'].median() min_temperature = filtered_df[\'Temperature\'].min() max_temperature = filtered_df[\'Temperature\'].max() # Return a dictionary containing the calculated statistics return { \'mean_temperature\': mean_temperature, \'median_temperature\': median_temperature, \'min_temperature\': min_temperature, \'max_temperature\': max_temperature }"},{"question":"Implement a function that simulates a simple card game between two players and determines the winner. Each player will be dealt the same number of cards from a standard 52-card deck. The value of each card is determined as follows: 2–10 are worth their face value, J, Q, and K are worth 10 points each, and A is worth 11 points. The suits of the cards (hearts, diamonds, clubs, and spades) are irrelevant to the score. The function should shuffle the deck, deal the specified number of cards to each player, calculate the score for each player, and determine the winner. If the number of cards per player \'cards_per_player\' is not between 1 and 26 (inclusive), raise a ValueError with a message stating \\"Number of cards per player must be between 1 and 26.\\" The function should return: tuple: A tuple containing the scores of both players and the winner (\\"Player 1\\", \\"Player 2\\", or \\"Tie\\" in case of a draw). You should write self-contained code starting with: ``` import random def card_game(cards_per_player): ```","solution":"import random def card_game(cards_per_player): Simulates a card game between two players. Parameters: cards_per_player (int): Number of cards dealt to each player. Returns: tuple: A tuple containing the scores of both players and the winner (\\"Player 1\\", \\"Player 2\\", or \\"Tie\\"). if not (1 <= cards_per_player <= 26): raise ValueError(\\"Number of cards per player must be between 1 and 26.\\") deck = [ \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\' ] * 4 # 4 suits random.shuffle(deck) def card_value(card): if card in \'JQK\': return 10 elif card == \'A\': return 11 else: return int(card) player1_cards = deck[:cards_per_player] player2_cards = deck[cards_per_player:2 * cards_per_player] player1_score = sum(card_value(card) for card in player1_cards) player2_score = sum(card_value(card) for card in player2_cards) if player1_score > player2_score: winner = \\"Player 1\\" elif player2_score > player1_score: winner = \\"Player 2\\" else: winner = \\"Tie\\" return (player1_score, player2_score, winner)"},{"question":"Write a function named `serialize_deserialize_tree` which can serialize a binary tree into a string and deserialize the string back into the binary tree. The function should have the following specifications: - The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - The function should have two main operations: - `serialize`: Converts the tree into a comma separated string where null nodes are represented by the placeholder `\'#\'`. - `deserialize`: Converts the serialized string back into the original binary tree. The function should follow this structure: ```python class Codec: def serialize(self, root): Encodes a tree to a single string. pass def deserialize(self, data): Decodes your encoded data to tree. pass ``` - The `serialize` method should take the root node of the binary tree and return a serialized string. - The `deserialize` method should take the serialized string and return the root node of the binary tree. Here is a template for your function structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: def serialize(self, root): Encodes a tree to a single string. :type root: TreeNode :rtype: str def preorder(node): if not node: return [\'#\'] return [str(node.val)] + preorder(node.left) + preorder(node.right) return \',\'.join(preorder(root)) def deserialize(self, data): Decodes your encoded data to tree. :type data: str :rtype: TreeNode def build_tree(vals): val = next(vals) if val == \'#\': return None node = TreeNode(int(val)) node.left = build_tree(vals) node.right = build_tree(vals) return node vals = iter(data.split(\',\')) return build_tree(vals) ``` Implement the `serialize` and `deserialize` methods to handle any binary tree structure efficiently.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: def serialize(self, root): Encodes a tree to a single string. :type root: TreeNode :rtype: str def preorder(node): if not node: return [\'#\'] return [str(node.val)] + preorder(node.left) + preorder(node.right) return \',\'.join(preorder(root)) def deserialize(self, data): Decodes your encoded data to tree. :type data: str :rtype: TreeNode def build_tree(vals): val = next(vals) if val == \'#\': return None node = TreeNode(int(val)) node.left = build_tree(vals) node.right = build_tree(vals) return node vals = iter(data.split(\',\')) return build_tree(vals)"},{"question":"You are tasked with implementing a function `calculate_max_distance(points, K)` that calculates the maximum distance you can place `K` flags on given points such that the minimum distance between any two flags is maximized. The points are given on a number line. 1. **Input**: - `points`: A list of integers representing the positions of different points on a number line. - `K`: An integer representing the number of flags you need to place. 2. **Output**: - Return an integer representing the maximum of the minimum distances between any two flags. # Example ```python points = [1, 2, 8, 4, 9] K = 3 print(calculate_max_distance(points, K)) # Output: 3 ``` # Explanation: For the given example, you can place the flags at positions 1, 4, and 8 such that the minimum distance between any two flags is 3. **Function Definition**: ```python def calculate_max_distance(points, K): Args: points (list of int): A list of integers representing points on a number line. K (int): The number of flags to place. Returns: int: The maximum of the minimum distances between any two flags. pass ``` **Constraints**: - The number of points, `N`, is between `2` and `10^5`. - Points can range from `-10^9` to `10^9`. - `K` is between `2` and `N`. **Hints**: 1. Sort the points first to simplify the logic for placing flags. 2. Use binary search to find the maximum distance. 3. Implement a helper function that checks if it\'s possible to place flags with a given minimum distance. Implement the function `calculate_max_distance` that: 1. Sorts the input points. 2. Uses binary search to determine the maximum minimum distance. 3. Uses a helper function to check the feasibility of placing flags with the current minimum distance during the binary search process.","solution":"def calculate_max_distance(points, K): def can_place_flags(points, K, min_dist): count = 1 last_placed = points[0] for i in range(1, len(points)): if points[i] - last_placed >= min_dist: count += 1 last_placed = points[i] if count >= K: return True return False points.sort() left, right = 0, points[-1] - points[0] max_min_dist = 0 while left <= right: mid = (left + right) // 2 if can_place_flags(points, K, mid): max_min_dist = mid left = mid + 1 else: right = mid - 1 return max_min_dist"},{"question":"You are tasked with creating a log analysis tool for a server. Write a Python function named `analyze_server_logs` that takes a list of log entries and performs the following actions: 1. Parses each log entry to extract the timestamp (in the format \\"YYYY-MM-DD HH:MM:SS\\") and the log level (one of: \\"INFO\\", \\"WARNING\\", \\"ERROR\\"). 2. Logs the count of each log level. 3. Filters the log entries to extract those with the \\"ERROR\\" level and stores them in a list. 4. Calculates and logs the percentage of \\"ERROR\\" log entries with respect to the total number of entries. 5. Calculates the time difference in seconds between the first and last log entries with the \\"ERROR\\" level and logs this duration. Below is the template for the function you need to complete: ```python from datetime import datetime def analyze_server_logs(log_entries): Analyzes the given list of server log entries for insights. Parameters: log_entries (list): A list where each entry is a string representing a log entry. Example Usage: logs = [ \\"2023-01-01 12:00:00 INFO Service started\\", \\"2023-01-01 12:05:00 ERROR Unable to connect to database\\", \\"2023-01-01 12:10:00 WARNING High memory usage\\", \\"2023-01-01 12:15:00 ERROR Timeout on request\\", \\"2023-01-01 12:20:00 INFO Service stopped\\" ] analyze_server_logs(logs) # Implement the function here ```","solution":"from datetime import datetime def analyze_server_logs(log_entries): Analyzes the given list of server log entries for insights. Parameters: log_entries (list): A list where each entry is a string representing a log entry. Example Usage: logs = [ \\"2023-01-01 12:00:00 INFO Service started\\", \\"2023-01-01 12:05:00 ERROR Unable to connect to database\\", \\"2023-01-01 12:10:00 WARNING High memory usage\\", \\"2023-01-01 12:15:00 ERROR Timeout on request\\", \\"2023-01-01 12:20:00 INFO Service stopped\\" ] analyze_server_logs(logs) log_levels = {\\"INFO\\": 0, \\"WARNING\\": 0, \\"ERROR\\": 0} error_entries = [] for entry in log_entries: timestamp_str, log_level = entry.split(\\" \\")[:3:2] log_level = log_level.split(\' \')[0] if log_level in log_levels: log_levels[log_level] += 1 if log_level == \\"ERROR\\": error_entries.append(entry) total_entries = len(log_entries) error_count = log_levels[\\"ERROR\\"] # Logging the count of each log level print(f\\"INFO: {log_levels[\'INFO\']}\\") print(f\\"WARNING: {log_levels[\'WARNING\']}\\") print(f\\"ERROR: {log_levels[\'ERROR\']}\\") # Logging the percentage of ERROR log entries if total_entries > 0: error_percentage = (error_count / total_entries) * 100 print(f\\"Percentage of ERROR log entries: {error_percentage:.2f}%\\") else: print(\\"Percentage of ERROR log entries: 0.00%\\") if error_count > 0: first_error_time = datetime.strptime(error_entries[0].split(\\" \\")[0] + \' \' + error_entries[0].split(\\" \\")[1], \'%Y-%m-%d %H:%M:%S\') last_error_time = datetime.strptime(error_entries[-1].split(\\" \\")[0] + \' \' + error_entries[-1].split(\\" \\")[1], \'%Y-%m-%d %H:%M:%S\') time_difference = (last_error_time - first_error_time).total_seconds() print(f\\"Time difference between first and last ERROR log entries: {time_difference} seconds\\") else: print(\\"Time difference between first and last ERROR log entries: 0 seconds\\")"},{"question":"You are given a directed graph represented as an adjacency matrix `A` where `A[i][j]` is 1 if there\'s a directed edge from node `i` to node `j`, and 0 otherwise. Your task is to implement a function `detect_cycle_in_directed_graph(A)` that determines whether the graph contains any cycle. # Function Signature ```python def detect_cycle_in_directed_graph(A: List[List[int]]) -> bool: ... ``` # Parameters - `A`: A 2D list of integers representing the adjacency matrix of the graph. It is a square matrix where `A[i][j]` is 1 if there is a directed edge from node `i` to node `j`, and 0 if there is no edge. # Requirements - Implement the cycle detection algorithm using Depth-First Search (DFS). - The function should return `True` if a cycle is detected in the graph, and `False` otherwise. - You are not allowed to use any external libraries for graph algorithms. # Example Suppose you are given the following input: ```python A = [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 0] ] ``` This graph contains the cycle: `0 -> 1 -> 2 -> 0`. Hence, the function should return `True`. If you are given the following input: ```python A = [ [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 0] ] ``` This graph does not contain any cycle. Hence, the function should return `False`. # Task Implement the function `detect_cycle_in_directed_graph`.","solution":"from typing import List def detect_cycle_in_directed_graph(A: List[List[int]]) -> bool: def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for i in range(len(A)): if A[node][i]: if not visited[i]: if dfs(i, visited, rec_stack): return True elif rec_stack[i]: return True rec_stack[node] = False return False visited = [False] * len(A) rec_stack = [False] * len(A) for node in range(len(A)): if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"This function receives a string of words separated by spaces and returns the longest word in the string. If there are multiple words with the same length, return the first one that appears. You should write self-contained code starting with: ``` def find_longest_word(sentence): ```","solution":"def find_longest_word(sentence): Returns the longest word in the sentence. If there are multiple words with the same length, returns the first one that appears. words = sentence.split() if not words: return \\"\\" longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"You have been tasked to implement a simplified flight reservation system for an airline. Your goal is to write a class `FlightReservation` that manages flight seats and reservations. **Requirements:** 1. The class should be named `FlightReservation`. 2. The class should have an attribute `seats` which is a list of strings representing the seat numbers (e.g., [\'1A\', \'1B\', \'1C\', \'1D\', ...]). 3. The class should have an attribute `reservations` which is a dictionary where the keys are seat numbers and the values are the names of the passengers who have reserved those seats. 4. Implement the following methods in the class: - `reserve_seat(self, seat_number, passenger_name)`: Reserves the specified seat for the given passenger name. If the seat is already reserved, it should raise a `ValueError` with the message \\"Seat already reserved\\". - `cancel_reservation(self, seat_number)`: Cancels the reservation for the specified seat number. If the seat is not reserved, it should raise a `ValueError` with the message \\"Seat not reserved\\". - `get_reservation(self, seat_number)`: Returns the name of the passenger who reserved the specified seat number. If the seat is not reserved, it should return `None`. - `get_all_reservations(self)`: Returns a dictionary of all reservations. 5. Ensure that seat numbers provided in reservations and cancellations are valid (i.e., they exist in the `seats` list). If a seat number is invalid, the methods should raise a `ValueError` with the message \\"Invalid seat number\\". **Sample Usage:** ```python # Sample seats list seats = [\'1A\', \'1B\', \'1C\', \'1D\', \'2A\', \'2B\', \'2C\', \'2D\'] # Create an instance of FlightReservation flight_reservation = FlightReservation(seats) # Reserve a seat flight_reservation.reserve_seat(\'1A\', \'John Doe\') # Attempt to reserve an already reserved seat (should raise ValueError) flight_reservation.reserve_seat(\'1A\', \'Jane Doe\') # Get the reservation for a seat print(flight_reservation.get_reservation(\'1A\')) # Output: John Doe # Cancel a reservation flight_reservation.cancel_reservation(\'1A\') # Attempt to cancel an unreserved seat (should raise ValueError) flight_reservation.cancel_reservation(\'1A\') # Get all reservations print(flight_reservation.get_all_reservations()) # Output: {} ``` **Notes:** - Handle potential errors gracefully by raising appropriate `ValueError` exceptions with clear error messages. - Assume case-sensitive seat numbers (i.e., \'1A\' is different from \'1a\'). The class should be implemented as follows: ```python class FlightReservation: def __init__(self, seats): self.seats = seats self.reservations = {} def reserve_seat(self, seat_number, passenger_name): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") if seat_number in self.reservations: raise ValueError(\\"Seat already reserved\\") self.reservations[seat_number] = passenger_name def cancel_reservation(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") if seat_number not in self.reservations: raise ValueError(\\"Seat not reserved\\") del self.reservations[seat_number] def get_reservation(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") return self.reservations.get(seat_number, None) def get_all_reservations(self): return self.reservations ``` Feel free to add any additional methods or attributes if needed to enhance the functionality as long as the core requirements are met.","solution":"class FlightReservation: def __init__(self, seats): self.seats = seats self.reservations = {} def reserve_seat(self, seat_number, passenger_name): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") if seat_number in self.reservations: raise ValueError(\\"Seat already reserved\\") self.reservations[seat_number] = passenger_name def cancel_reservation(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") if seat_number not in self.reservations: raise ValueError(\\"Seat not reserved\\") del self.reservations[seat_number] def get_reservation(self, seat_number): if seat_number not in self.seats: raise ValueError(\\"Invalid seat number\\") return self.reservations.get(seat_number, None) def get_all_reservations(self): return self.reservations"},{"question":"Write a function to determine the minimum number of coins needed to make change for a given amount of money. The function will receive two inputs: a list of coin denominations and the target amount. Utilize a dynamic programming approach to solve this problem efficiently. The function should output with: int: The minimal number of coins needed to achieve the target amount. If it is impossible to make the amount with the given denominations, return -1. You should write self-contained code starting with: ``` def min_coins(coins, amount): ```","solution":"def min_coins(coins, amount): Determine the minimum number of coins needed to make the target amount. :param coins: List[int] - List of coin denominations :param amount: int - Target amount :return: int - Minimum number of coins needed or -1 if impossible # Initialize the array with a larger value than any possible number of coins (amount+1) dp = [amount + 1] * (amount + 1) # Base case: 0 coins are needed to make amount 0 dp[0] = 0 # Build up dp array for a in range(1, amount + 1): for coin in coins: if coin <= a: dp[a] = min(dp[a], dp[a - coin] + 1) # If dp[amount] is still set to amount + 1, it means it\'s not possible to make up that amount with the given coins return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a function named `file_content_reverser` that reads the content of a given text file, reverses the order of the lines, and writes the reversed content back to the same file. Here\'s what the `file_content_reverser` function should do: 1. Open the specified text file in read mode. - Read all the lines from the file into a list. 2. Reverse the order of the lines. 3. Open the same text file in write mode. - Write the reversed lines back to the file. The function should accurately handle any text file, regardless of the number of lines it contains. ```python def file_content_reverser(file_path): with open(file_path, \'r\') as file: lines = file.readlines() reversed_lines = lines[::-1] with open(file_path, \'w\') as file: file.writelines(reversed_lines) ```","solution":"def file_content_reverser(file_path): Reads the content of a given text file, reverses the order of the lines, and writes the reversed content back to the same file. :param file_path: Path to the input file. # Step 1: Open the file in read mode and read all lines with open(file_path, \'r\') as file: lines = file.readlines() # Step 2: Reverse the order of the lines reversed_lines = lines[::-1] # Step 3: Open the file in write mode and write the reversed lines with open(file_path, \'w\') as file: file.writelines(reversed_lines)"},{"question":"You are required to write a function `is_prime(n)` that determines whether a given integer ( n ) is a prime number. Requirements: 1. The function should return `True` if ( n ) is a prime number, and `False` otherwise. 2. The input integer ( n ) will be a positive integer greater than 1. 3. Optimize the function to handle larger integers efficiently. 4. The function should meet the following specifications: ```python def is_prime(n): Determines if the given integer n is a prime number. Parameters: n (int): The integer to be checked. Returns: bool: True if n is a prime number, False otherwise. ``` Example: ```python >>> is_prime(11) True >>> is_prime(15) False ```","solution":"def is_prime(n): Determines if the given integer n is a prime number. Parameters: n (int): The integer to be checked. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % i + 2 == 0: return False i += 6 return True"},{"question":"You are asked to implement a solution to perform matrix multiplication without using any built-in matrix operations. You will create a function that multiplies two matrices and returns the resulting matrix. Given: - Two 2-dimensional lists `A` and `B`, which represent matrices of dimensions `m x n` and `n x p` respectively. You need to: 1. Implement a function `matrix_multiply` that takes two arguments `A` and `B`. 2. Perform matrix multiplication and return the resulting `m x p` matrix. # Constraints: - The input matrices will always have compatible dimensions for multiplication. - The dimensions of matrix `A` and matrix `B` will be such that no dimension will exceed 100. # Example: ```python A = [[1, 2, 3], [4, 5, 6]] B = [[7, 8], [9, 10], [11, 12]] ``` The resulting matrix will be: ```python C = [[58, 64], [139, 154]] ``` # Implementation ```python def matrix_multiply(A, B): # Get the number of rows and columns for matrices A and B m, n = len(A), len(A[0]) n, p = len(B), len(B[0]) # Note: len(B) should be equal to `n` # Initialize the resulting matrix C with zeroes C = [[0 for _ in range(p)] for __ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C # Example Usage: A = [[1, 2, 3], [4, 5, 6]] B = [[7, 8], [9, 10], [11, 12]] result = matrix_multiply(A, B) print(result) ``` The function `matrix_multiply` computes the product of matrices `A` and `B` and returns the resultant matrix. Ensure to handle various predefined test cases to validate your implementation.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the resulting matrix. Args: A (list of list of int): The first matrix with dimensions m x n. B (list of list of int): The second matrix with dimensions n x p. Returns: list of list of int: The resulting matrix with dimensions m x p. # Get the dimensions m, n = len(A), len(A[0]) n, p = len(B), len(B[0]) # Initialize result matrix with zeroes C = [[0 for _ in range(p)] for _ in range(m)] # Matrix multiplication for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"You are given a function named `evaluate_expression` that evaluates and simplifies an arithmetic expression represented as a string. The function should compute the result of the expression considering operator precedence - multiplication and division before addition and subtraction. Implement the function without using any built-in `eval()` or similar functions that directly interpret the expression. You should handle integers only and assume the input string is a valid arithmetic expression. **Function Signature** ```python def evaluate_expression(expression: str) -> int: ``` **Input Parameters** 1. **expression (str)**: A string representing a valid arithmetic expression containing integers and operators (`+`, `-`, `*`, `/`). **Output** - **int**: The result of evaluating the arithmetic expression. **Description** 1. **Operator Precedence**: Consider that multiplication (*) and division (/) have higher precedence over addition (+) and subtraction (-). 2. **Integer Division**: When dividing two integers in Python, the result should truncate towards zero. 3. **No Floating Point Numbers**: Ensure your computation involves only integers and integer results for division operations. **Example** Consider the following evaluates: ```python assert evaluate_expression(\\"3+5/2\\") == 5 # 3 + (5 / 2) = 3 + 2 = 5 assert evaluate_expression(\\"10+2*6\\") == 22 # 10 + (2 * 6) = 10 + 12 = 22 assert evaluate_expression(\\"100*2+12\\") == 212 # (100 * 2) + 12 = 200 + 12 = 212 assert evaluate_expression(\\"100*(2+12)\\") == 1400 # 100 * (2 + 12) = 100 * 14 = 1400 assert evaluate_expression(\\"100*(2+12)/14\\") == 100 # (100 * 14) / 14 = 1400 / 14 = 100 ``` **Constraints** - The input string `expression` can have a length up to `10^5`. - The operations should only include `+`, `-`, `*`, `/`. - Each integer in the expression will fit within the 32-bit signed integer range. Implement the function as described to correctly parse and evaluate arithmetic expressions per the given examples and constraints.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a given arithmetic expression considering operator precedence and returns the result as an integer. :param expression: A string representing a valid arithmetic expression. :return: The result of the evaluated expression as an integer. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # Truncate towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def eval_expression(tokens): operands = [] operators = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = val * 10 + int(tokens[i]) i += 1 operands.append(val) i -= 1 elif tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operands, operators.pop()) operators.pop() elif tokens[i] in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(tokens[i])): apply_operator(operands, operators.pop()) operators.append(tokens[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[-1] expression = expression.replace(\\" \\", \\"\\") return eval_expression(list(expression))"},{"question":"You are tasked with implementing a function called `organize_team_data`. This function will take two parameters: `input_filename` and `output_filename`. The task of this function is to process a CSV file that contains employee data and produce a JSON output file. This JSON should map each unique team identifier to a list of employee names belonging to that team. The CSV file represented by `input_filename` follows this structure: it includes a header row, followed by rows of employee data. The relevant columns are as follows: - Column at index 0: `employee_id` - Column at index 1: `employee_name` - Column at index 2: `team_code` Your task is to organize the data in a dictionary with team identifiers as keys and store the list of employee names for each team. You must then convert this dictionary to a JSON-formatted string and write it to the `output_filename` file using the `json.dump` method. **Constraints/Requirements:** - Use the `csv.reader` function to read the CSV file. - Use the `json.dump` function to serialize the dictionary into a JSON file. - Skip the header row in the CSV file. - Ensure the final JSON file is compact, with no unnecessary whitespace. ```python def organize_team_data(input_filename, output_filename): pass ``` Ensure your solution adheres to these constraints and efficiently processes the CSV data to meet the requirements. The solution should write the JSON-formatted data to the specified output file.","solution":"import csv import json def organize_team_data(input_filename, output_filename): This function processes a CSV file containing employee data and produces a JSON output file that maps each unique team identifier to a list of employee names belonging to that team. Args: input_filename (str): The name of the input CSV file. output_filename (str): The name of the output JSON file. team_data = {} # Read the CSV file with open(input_filename, mode=\'r\', newline=\'\') as csv_file: csv_reader = csv.reader(csv_file) next(csv_reader) # Skip the header row for row in csv_reader: employee_id, employee_name, team_code = row if team_code in team_data: team_data[team_code].append(employee_name) else: team_data[team_code] = [employee_name] # Write the data to the JSON file with open(output_filename, mode=\'w\') as json_file: json.dump(team_data, json_file, separators=(\',\', \':\'))"},{"question":"Given a requirement to process and analyze real-time data streams, write a Python function named `moving_average` that computes the moving average for a given window size over a streaming data sequence. Your function should take a generator representing real-time data and an integer representing the window size. It should return a generator that yields the moving average of the data as new data points become available. You are required to use the `collections.deque` to maintain the fixed-size window for efficient computation of the moving average. Function Signature ```python def moving_average(data_stream, window_size): pass ``` Parameters - **data_stream (generator)**: A generator yielding real-time data points as floats or integers. - **window_size (int)**: The size of the window over which to compute the moving average. Returns - **generator**: A generator that yields the moving average as each new data point is processed. Constraints - The generator should yield the average only after processing at least `window_size` data points. - The function should handle edge cases gracefully, such as when the window size is larger than the available data points at the beginning by simply returning averages as soon as enough data is accumulated. - The data stream can be assumed to provide an infinite sequence of data points. Example ```python import collections def moving_average(data_stream, window_size): window = collections.deque(maxlen=window_size) cumulative_sum = 0 for value in data_stream: window.append(value) cumulative_sum += value if len(window) > window_size: cumulative_sum -= window[0] if len(window) == window_size: yield cumulative_sum / window_size # Example usage def data_stream_generator(): for value in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: yield value mov_avg_gen = moving_average(data_stream_generator(), 3) print(list(mov_avg_gen)) # Output: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0] ``` This should compute and print the moving average for consecutive windows of 3 data points from the `data_stream_generator`.","solution":"import collections def moving_average(data_stream, window_size): Computes the moving average for a given window size over a streaming data sequence. Parameters: - data_stream (generator): A generator yielding real-time data points as floats or integers. - window_size (int): The size of the window over which to compute the moving average. Returns: - generator: A generator that yields the moving average as each new data point is processed. window = collections.deque(maxlen=window_size) cumulative_sum = 0 for value in data_stream: window.append(value) cumulative_sum += value if len(window) == window_size: yield cumulative_sum / window_size cumulative_sum -= window[0]"},{"question":"Create a function that constructs a binary search tree (BST) from a given list of integers, performs an in-order traversal of the BST, and returns a list of sorted integers. The function should start with: ``` class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root, value): if not root: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def in_order_traversal(root, result=[]): if root: in_order_traversal(root.left, result) result.append(root.value) in_order_traversal(root.right, result) return result def construct_bst_and_traverse(input_list): Constructs a BST from the input list and returns the sorted list using in-order traversal. Parameters: input_list (list): A list of integers to create the BST. Returns: list: A list of integers sorted in ascending order. if not input_list: return [] root = None for value in input_list: root = insert_into_bst(root, value) sorted_list = in_order_traversal(root, []) return sorted_list ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert_into_bst(root, value): if not root: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def in_order_traversal(root, result=[]): if root: in_order_traversal(root.left, result) result.append(root.value) in_order_traversal(root.right, result) return result def construct_bst_and_traverse(input_list): Constructs a BST from the input list and returns the sorted list using in-order traversal. Parameters: input_list (list): A list of integers to create the BST. Returns: list: A list of integers sorted in ascending order. if not input_list: return [] root = None for value in input_list: root = insert_into_bst(root, value) sorted_list = in_order_traversal(root, []) return sorted_list"},{"question":"Your task is to write a function named `most_frequent_integer` that identifies the integer which appears most frequently within a given list. If there\'s a tie, return the smallest integer among the ones that appear most frequently. To solve this problem, you will utilize the `collections.Counter` library in Python. The `Counter` will help you efficiently count the occurrences of each integer. Function Signature: ```python def most_frequent_integer(numbers: list[int]) -> int: ``` Input: - `numbers`: A list of integers. Output: - Returns an integer which is the most frequently occurring in the given list. If there is a tie, return the smallest integer among those with the highest frequency. Constraints: - You must use the `collections.Counter` to count integer occurrences. - The input list will have at least one integer. Example: ```python result = most_frequent_integer([1, 3, 3, 2, 1, 4, 2, 2]) print(result) # Output: 2 ```","solution":"from collections import Counter def most_frequent_integer(numbers: list[int]) -> int: Returns the integer that appears most frequently in the input list. If there is a tie for the most frequent integer, returns the smallest one. count = Counter(numbers) max_freq = max(count.values()) candidates = [num for num, freq in count.items() if freq == max_freq] return min(candidates)"},{"question":"You are required to write a Python function named `analyze_text_file` that reads a text file containing multiple lines of text, processes this data to compute the word frequency, and then writes the results to an output text file sorted by the frequency of words in descending order. The function should prompt the user for the input and output file names and handle file operations. Function Signature ```python def analyze_text_file(): pass # function implementation here ``` Detailed Requirements 1. **Reading Input File:** - The function should prompt the user for the input file name. - If the input provided is \\"quit\\", the function should return and exit immediately. - Open and read the input text file line by line. 2. **Processing Data:** - For each line in the file, split it into words and update a dictionary where the keys are words and the values are their corresponding frequency counts. - Ensure that the word counting is case-insensitive (e.g., \\"Word\\" and \\"word\\" should be considered the same word). - Ignore punctuation in processing (e.g., \\"word,\\" and \\"word\\" should be considered the same word). 3. **Writing Output File:** - Prompt the user for the output file name. - Write the word frequencies to an output text file, sorted by frequency in descending order. Ensure this file is saved in an `output/` directory. - Each line of the output file should contain a word followed by its frequency count, separated by a space. 4. **Example Processing:** - Given a line: \\"This is a test. This test is fun!\\" - Update the dictionary as follows: `{\\"this\\": 2, \\"is\\": 2, \\"a\\": 1, \\"test\\": 2, \\"fun\\": 1}` Example Usage If an input text file named `input_text.txt` contains: ``` Hello world! The sun is shining bright. Hello again, world. ``` And calling `analyze_text_file()` results in an output text file named `word_frequencies.txt` in the `output/` directory with the following content: ``` hello 2 world 2 the 1 sun 1 is 1 shining 1 bright 1 again 1 ``` Where each word is followed by its frequency count, and the list is sorted by frequency in descending order.","solution":"import os import re from collections import defaultdict def analyze_text_file(): input_file = input(\\"Enter the input file name (or \'quit\' to exit): \\") if input_file.lower() == \'quit\': return word_count = defaultdict(int) try: with open(input_file, \'r\') as file: for line in file: words = re.findall(r\'bw+b\', line.lower()) for word in words: word_count[word] += 1 except FileNotFoundError: print(\\"File not found. Please check the file name and try again.\\") return output_file = input(\\"Enter the output file name: \\") output_dir = \'output\' if not os.path.exists(output_dir): os.makedirs(output_dir) sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True) with open(os.path.join(output_dir, output_file), \'w\') as file: for word, count in sorted_word_count: file.write(f\\"{word} {count}n\\")"},{"question":"--- You have been tasked with analyzing the sales performance of a chain of stores. Your goal is to find out which product categories contribute the most to the overall sales and the sales trend over a series of months. You are given a data frame (`df`) consisting of a `Sale Date` column and a `Category` column, along with a `Revenue` column representing the revenue generated from sales. Your task involves generating insights into the sales data by finding the highest revenue-generating categories for each month. Implement a function named `category_sales_stats(df)` that: 1. Converts the `Sale Date` column to datetime objects. 2. Extracts the month and year from the `Sale Date` column. 3. Groups the data frame by month, year, and category to calculate the total revenue for each category in each month. 4. For each month, identifies and prints the category with the highest revenue and the total revenue generated by this category. # Input: - `df` (pandas DataFrame): This DataFrame contains columns named `Sale Date`, `Category`, and `Revenue`. # Output: The function prints the month, the year, the highest revenue-generating category, and the total revenue generated by this category for each month. # Instructions: 1. Ensure to use `pandas.to_datetime` for date-time conversion. 2. Assume the `Sale Date`, `Category`, and `Revenue` columns are always present and properly formatted. 3. Use appropriate pandas functions to group by and aggregate data. Here is a sample code snippet to guide you: ```python import pandas as pd def category_sales_stats(df): Displays statistics on the highest revenue-generating categories per month. # Convert the \'Sale Date\' column to datetime df[\'Sale Date\'] = pd.to_datetime(df[\'Sale Date\']) # Extract month and year from \'Sale Date\' column df[\'year\'] = df[\'Sale Date\'].dt.year df[\'month\'] = df[\'Sale Date\'].dt.month # Group by year, month, and category to calculate total revenue per category revenue_per_category = df.groupby([\'year\', \'month\', \'Category\']).agg({\'Revenue\': \'sum\'}).reset_index() # Find the highest revenue-generating category for each month grouped = revenue_per_category.groupby([\'year\', \'month\']) for (year, month), group in grouped: highest_revenue_category = group.loc[group[\'Revenue\'].idxmax()] cat = highest_revenue_category[\'Category\'] revenue = highest_revenue_category[\'Revenue\'] print(f\'Year: {year}, Month: {month}, Highest Revenue Category: {cat}, Revenue: {revenue}\') # Example usage: # df = pd.DataFrame({ # \'Sale Date\': [\'2023-01-15\', \'2023-01-10\', \'2023-02-20\', \'2023-02-25\'], # \'Category\': [\'Electronics\', \'Furniture\', \'Electronics\', \'Furniture\'], # \'Revenue\': [2000, 1500, 3000, 2000] # }) # category_sales_stats(df) ``` This function provides insights into the most profitable product categories for each month, helping to understand sales trends and performance. Ensure all steps are implemented as requested and do not forget to use `pandas.to_datetime`.","solution":"import pandas as pd def category_sales_stats(df): Displays statistics on the highest revenue-generating categories per month. # Convert the \'Sale Date\' column to datetime df[\'Sale Date\'] = pd.to_datetime(df[\'Sale Date\']) # Extract month and year from \'Sale Date\' column df[\'year\'] = df[\'Sale Date\'].dt.year df[\'month\'] = df[\'Sale Date\'].dt.month # Group by year, month, and category to calculate total revenue per category revenue_per_category = df.groupby([\'year\', \'month\', \'Category\']).agg({\'Revenue\': \'sum\'}).reset_index() # Find the highest revenue-generating category for each month grouped = revenue_per_category.groupby([\'year\', \'month\']) for (year, month), group in grouped: highest_revenue_category = group.loc[group[\'Revenue\'].idxmax()] cat = highest_revenue_category[\'Category\'] revenue = highest_revenue_category[\'Revenue\'] print(f\'Year: {year}, Month: {month}, Highest Revenue Category: {cat}, Revenue: {revenue}\')"},{"question":"You are required to develop a function named `generate_random_integers` that performs the following tasks: 1. **Input Parameters**: - `num_integers`: an integer representing the number of random integers to generate. - `lower_bound`: an integer representing the inclusive lower bound of the range. - `upper_bound`: an integer representing the inclusive upper bound of the range. - `file_path`: a string representing the path of the file to save the generated random integers. 2. **Functionality**: - Verify that `num_integers` is a positive number. - Ensure `lower_bound` is less than or equal to `upper_bound`. - Generate `num_integers` random integers within the specified range (`lower_bound` to `upper_bound` inclusive) using the `random` module. - Write the generated random integers to a file specified by `file_path`. Each integer should be written on a new line. - Also return the list of generated random integers as the output of the function. 3. **Output**: - Write the generated random integers to the specified file, each on a new line. - Return the list of generated random integers. You can use the `random.randint` function for generating random integers. Example usage of your function might look like: ```python random_integers = generate_random_integers(5, 10, 20, \\"random_numbers.txt\\") ```","solution":"import random def generate_random_integers(num_integers, lower_bound, upper_bound, file_path): Generates a specified number of random integers within a given range and writes them to a file. Parameters: - num_integers: int, number of random integers to generate. - lower_bound: int, inclusive lower bound of the range. - upper_bound: int, inclusive upper bound of the range. - file_path: string, path of the file to save the generated random integers. Returns: - List of generated random integers. if num_integers <= 0: raise ValueError(\\"num_integers must be a positive integer\\") if lower_bound > upper_bound: raise ValueError(\\"lower_bound must be less than or equal to upper_bound\\") random_integers = [random.randint(lower_bound, upper_bound) for _ in range(num_integers)] with open(file_path, \'w\') as file: for num in random_integers: file.write(f\\"{num}n\\") return random_integers"},{"question":"# Objective: Write a function named `find_missing_numbers` that finds all missing numbers from an unsorted list of integers within a given range. # Input: 1. `nums`: An unsorted list of integers. 2. `start`: An integer representing the start of the range. 3. `end`: An integer representing the end of the range (inclusive). # Output: - The function should return a list of integers representing the missing numbers from the given range that are not in the input list. The numbers in the output list should be sorted in ascending order. # Requirements: - Your solution must handle ranges and input list sizes up to 10^6 efficiently. # Example: ```python # Example 1 result = find_missing_numbers([4, 3, 2, 7, 8, 2, 3, 1], 1, 10) print(result) # Output: [5, 6, 9, 10] # Example 2 result = find_missing_numbers([10, 14, 11, 12, 16, 15], 10, 20) print(result) # Output: [13, 17, 18, 19, 20] # Example 3 result = find_missing_numbers([], 1, 5) print(result) # Output: [1, 2, 3, 4, 5] ``` # Explanation: - The function should iterate over the range from `start` to `end` and check which numbers are missing from the `nums` list. - Return the list of missing numbers sorted in ascending order.","solution":"def find_missing_numbers(nums, start, end): Finds and returns the missing numbers within the specified range that are not in the input list. :param nums: List[int], a list of integers. :param start: int, the start of the range. :param end: int, the end of the range (inclusive). :return: List[int], a list of the missing numbers. # Use a set for faster lookup num_set = set(nums) missing_numbers = [] # Iterate over the range and find missing numbers for number in range(start, end + 1): if number not in num_set: missing_numbers.append(number) return missing_numbers"},{"question":"You are required to write a function that calculates the frequency of each character in a given string and then returns a dictionary with characters as keys and their corresponding frequencies as values. This exercise will help you practice working with dictionaries and iteration over strings in Python. **Function Name:** `character_frequency` **Function Signature:** ```python def character_frequency(s: str) -> dict: ``` **Parameters:** - `s` (str): The input string for which the character frequency is to be calculated. **Output:** - The function should return a dictionary where keys are characters, and values are the frequencies of these characters in the input string. **Example:** Given the following string: ```python s = \\"hello world\\" ``` If you call the function: ```python result = character_frequency(s) ``` The result should be: ```python { \'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1 } ``` **Requirements:** 1. The function should be case-sensitive, meaning \'A\' and \'a\' should be considered different characters. 2. The function should handle all types of characters (letters, digits, spaces, punctuation, etc.) correctly. 3. You may use Python\'s built-in dictionary data structure to store the character frequencies.","solution":"def character_frequency(s: str) -> dict: Calculate the frequency of each character in the given string. Parameters: - s (str): The input string. Returns: - dict: A dictionary where keys are characters and values are their corresponding frequencies. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Create a function that takes an integer `n` as input and returns a list of the first `n` prime numbers. If `n` is less than or equal to 0, the function should return an empty list. The function should be efficient in finding the prime numbers. You should write self-contained code starting with: ``` def find_primes(n): ```","solution":"def find_primes(n): Returns a list of the first n prime numbers. If n <= 0, returns an empty list. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"You need to write a function that determines if a given grid containing \'X\' and \'O\' forms a Tic-Tac-Toe winning state for \'X\'. A winning state is defined as having three \'X\'s in a row either horizontally, vertically, or diagonally. The function `is_winning_state` should take a 3x3 grid and return `True` if there is a winning state for \'X\', and `False` otherwise. # Function Signature ```python def is_winning_state(grid: List[List[str]]) -> bool: ``` # Input - `grid`: A 3x3 list of lists containing \'X\' or \'O\'. # Output - A boolean value indicating if the grid represents a winning state for \'X\'. # Example ```python print(is_winning_state([[\'X\', \'O\', \'O\'], [\'X\', \'X\', \'X\'], [\'O\', \'O\', \'X\']])) # True (horizontal win in the second row) print(is_winning_state([[\'X\', \'O\', \'X\'], [\'O\', \'X\', \'O\'], [\'O\', \'X\', \'O\']])) # False (no winning state) print(is_winning_state([[\'X\', \'O\', \'O\'], [\'O\', \'X\', \'O\'], [\'O\', \'O\', \'X\']])) # True (diagonal win) print(is_winning_state([[\'X\', \'X\', \'X\'], [\'O\', \'O\', \'O\'], [\'X\', \'O\', \'O\']])) # True (horizontal win in the first row) ``` # Constraints - The grid will always be a 3x3 list of lists with elements either \'X\' or \'O\'.","solution":"from typing import List def is_winning_state(grid: List[List[str]]) -> bool: # Check rows for row in grid: if row == [\'X\', \'X\', \'X\']: return True # Check columns for col in range(3): if grid[0][col] == \'X\' and grid[1][col] == \'X\' and grid[2][col] == \'X\': return True # Check diagonals if grid[0][0] == \'X\' and grid[1][1] == \'X\' and grid[2][2] == \'X\': return True if grid[0][2] == \'X\' and grid[1][1] == \'X\' and grid[2][0] == \'X\': return True return False"},{"question":"**Objective:** Develop a function to perform k-means clustering, a popular unsupervised learning technique used to partition data into (k) clusters. This exercise will help you understand the iterative nature of k-means, centroid initialization, and the convergence process. **Problem Context:** Given the dataset (data) with (n) features and (m) examples, the desired number of clusters (k), and the maximum number of iterations (max_iters), your task is to implement the function `kmeans` that will cluster the data into (k) clusters. **Function Signature:** ```python def kmeans(data, k, max_iters): ``` **Arguments:** - `data` (numpy array): The dataset represented as a matrix of shape (m, n). - `k` (int): The number of clusters. - `max_iters` (int): The maximum number of iterations for the k-means algorithm. **Returns:** - `centroids` (numpy array): The final centroids representing each cluster (shape (k), (n)). - `labels` (numpy array): An array of shape ((m),) where each element represents the assigned cluster index for each data point. **Requirements:** 1. **Randomly initialize the centroids** by selecting (k) data points from the dataset. 2. **Iterate through the k-means algorithm** up to `max_iters`: - Assign each data point to the nearest centroid. - Recompute the centroids based on the current cluster memberships. 3. **Terminate early if centroids do not change** between iterations indicating convergence. **Example:** ```python data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]) k = 2 max_iters = 300 centroids, labels = kmeans(data, k, max_iters) print(\\"Final centroids:\\", centroids) print(\\"Assigned labels:\\", labels) ``` **Notes:** - Utilize `numpy` for efficient matrix and vector operations. - Consider edge cases such as when (k) is greater than or equal to the number of data points. - Implement checks to avoid infinite loops in case of non-convergence.","solution":"import numpy as np def kmeans(data, k, max_iters): Perform k-means clustering on the given data. Parameters: data (numpy array): The dataset represented as a matrix of shape (m, n). k (int): The number of clusters. max_iters (int): The maximum number of iterations for the k-means algorithm. Returns: centroids (numpy array): The final centroids representing each cluster (shape (k, n)). labels (numpy array): An array of shape (m,) where each element represents the assigned cluster index for each data point. m, n = data.shape centroids = data[np.random.choice(m, k, replace=False)] prev_centroids = centroids.copy() for _ in range(max_iters): # Compute distances and assign clusters distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Recompute centroids for i in range(k): points = data[labels == i] if len(points) > 0: centroids[i] = np.mean(points, axis=0) # Check for convergence if np.all(prev_centroids == centroids): break prev_centroids = centroids.copy() return centroids, labels"},{"question":"Given a string representing a mathematical expression, create a function that evaluates the expression and returns the result. The string may contain integers, basic arithmetic operators (+, -, *, /), and parentheses. You should implement a simple parser and not use the `eval` function or any similar built-in functions. The function should handle: - Correct precedence of operations. - Nested parentheses. - Division by zero by raising a `ZeroDivisionError`. You should write self-contained code starting with: ``` def evaluate_expression(expression): ``` # Example: ``` evaluate_expression(\\"3 + (2 * 4) - 5 / 5\\") ``` # Output: ``` 10.0","solution":"def evaluate_expression(expression): def parse_expression(tokens): def parse_term(tokens): result = parse_factor(tokens) while tokens and tokens[0] in (\'*\', \'/\'): op = tokens.pop(0) if op == \'*\': result *= parse_factor(tokens) elif op == \'/\': divisor = parse_factor(tokens) if divisor == 0: raise ZeroDivisionError(\\"division by zero\\") result /= divisor return result def parse_factor(tokens): if tokens[0] == \'(\': tokens.pop(0) # remove \'(\' result = parse_expression(tokens) tokens.pop(0) # remove \')\' return result else: return float(tokens.pop(0)) result = parse_term(tokens) while tokens and tokens[0] in (\'+\', \'-\'): op = tokens.pop(0) if op == \'+\': result += parse_term(tokens) elif op == \'-\': result -= parse_term(tokens) return result tokens = [] number = \\"\\" for char in expression: if char.isdigit() or char == \'.\': number += char else: if number: tokens.append(number) number = \\"\\" if char in \'+-*/()\': tokens.append(char) if number: tokens.append(number) return parse_expression(tokens)"},{"question":"You are tasked with writing a function `solve_sudoku` that solves a Sudoku puzzle. The algorithm should use a backtracking approach to find and return the solution to the given puzzle. This problem requires the use of **recursive algorithms** and **matrix manipulation**. The function `solve_sudoku` should take a single parameter: - `board` (list of lists): A 9x9 list of integers representing the Sudoku board, where empty cells are denoted by 0. The function should modify the input `board` directly to contain the solved Sudoku puzzle. Rules of Sudoku: 1. Each row must contain the numbers 1 to 9 without repetition. 2. Each column must contain the numbers 1 to 9 without repetition. 3. Each of the 9 3x3 sub-boxes of the grid must contain the numbers 1 to 9 without repetition. Example usage: ```python board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solve_sudoku(board) print(board) ``` After calling `solve_sudoku`, `board` should be modified to: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"def solve_sudoku(board): Solves the given Sudoku board using backtracking. Modifies the board in-place to contain the solution. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num: return False if board[i][col] == num: return False if board[row//3*3 + i//3][col//3*3 + i%3] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True solve(board)"},{"question":"# Objective Create a Python function named `rotate_list` that rotates the elements of a list to the right by a given number of steps. This function aims to help you understand and manipulate lists and indices effectively. # Function Signature ```python def rotate_list(lst, k): # Your implementation ``` # Input - `lst` (list): A list of integers. - `k` (int): Number of steps to rotate the list to the right. # Output - (list): The rotated list. # Explanation 1. If the list is empty or `k` is zero, return the list as is. 2. Find the effective rotation steps by taking `k % len(lst)` since rotating by the length of the list results in the original list. 3. Split the list into two parts: the end segment of length `k` and the remaining part. 4. Concatenate these two parts to form the rotated list. # Example ```python # Example Input lst = [1, 2, 3, 4, 5, 6, 7] k = 3 # Example Output rotated_lst = rotate_list(lst, k) print(rotated_lst) # Expected: [5, 6, 7, 1, 2, 3, 4] ``` # Additional Example ```python # Example Input lst = [10, 20, 30, 40, 50] k = 2 # Example Output rotated_lst = rotate_list(lst, k) print(rotated_lst) # Expected: [40, 50, 10, 20, 30] ``` **Note**: Use slicing to handle the list manipulation for efficient implementation.","solution":"def rotate_list(lst, k): Rotates the elements of the list \'lst\' to the right by \'k\' steps. if not lst or k == 0: return lst n = len(lst) k = k % n # To handle cases where k is greater than the length of the list return lst[-k:] + lst[:-k]"},{"question":"You are given a list of integers which may contain duplicates. Your task is to write a Python function that returns a list of unique integers sorted in ascending order, but with a twist: you must use the `set` data structure to remove duplicates and the `sorted` function to sort the list. Write a Python function `unique_sorted_integers(integers)` that: 1. Takes a list of integers as input. 2. Removes any duplicate integers using a set. 3. Sorts the remaining integers in ascending order. 4. Returns the sorted list of unique integers. **Function Signature:** ```python def unique_sorted_integers(integers: List[int]) -> List[int]: # Implementation here ``` **Example:** If the input list is: ``` [4, 2, 7, 3, 2, 3, 9, 1] ``` The output should be: ``` [1, 2, 3, 4, 7, 9] ``` #","solution":"def unique_sorted_integers(integers): Returns a list of unique integers sorted in ascending order. Parameters: integers (list): List of integers which may contain duplicates. Returns: list: Sorted list of unique integers. unique_integers = set(integers) # Remove duplicates using set sorted_integers = sorted(unique_integers) # Sort the unique integers return sorted_integers"},{"question":"Design a function that simulates a queueing system, where multiple customers join a queue and are then served one at a time. Each customer has a unique service time. Your task is to implement a function called `simulate_queue` that processes customers and provides information about the order in which they are served and their wait times. For this problem: 1. You are provided with a list of tuples, where each tuple represents a customer. The first element of each tuple is a unique customer identifier (an integer), and the second element is the service time for that customer (an integer, in seconds). 2. Customers join the queue in the order provided in the list. 3. Each customer starts being served immediately once the previous customer is done. Your task is to return a list of tuples for each customer, where the first element is the customer identifier and the second element is the total wait time for that customer (time spent waiting plus their own service time). **Function Signature:** ```python def simulate_queue(customers: list) -> list: ``` **Parameters:** - `customers` (list): A list of tuples, where each tuple contains an integer customer identifier and an integer service time. **Returns:** - `list`: A list of tuples, where each tuple contains an integer customer identifier and an integer total wait time. **Examples:** ```python # Example 1 customers = [(1, 5), (2, 3), (3, 8)] simulate_queue(customers) # Output: [(1, 5), (2, 8), (3, 16)] # Example 2 customers = [(1, 4), (2, 2), (3, 1), (4, 7)] simulate_queue(customers) # Output: [(1, 4), (2, 6), (3, 7), (4, 14)] ``` In Example 1: - Customer 1 is served immediately and finishes in 5 seconds. - Customer 2 waits for 5 seconds while Customer 1 is served and then takes 3 seconds to be served themselves, for a total wait time of 8 seconds. - Customer 3 waits for 8 seconds (time taken by Customer 1 and Customer 2 combined) and then takes 8 seconds to be served themselves, for a total wait time of 16 seconds. In Example 2: - Customer 1 is served immediately and finishes in 4 seconds. - Customer 2 waits for 4 seconds and then takes 2 seconds to be served themselves, for a total wait time of 6 seconds. - Customer 3 waits for 6 seconds and then takes 1 second to be served themselves, for a total wait time of 7 seconds. - Customer 4 waits for 7 seconds and then takes 7 seconds to be served themselves, for a total wait time of 14 seconds.","solution":"def simulate_queue(customers: list) -> list: Simulates a queueing system and returns the total wait time for each customer. total_wait_times = [] cumulative_time = 0 for customer_id, service_time in customers: wait_time = cumulative_time + service_time total_wait_times.append((customer_id, wait_time)) cumulative_time += service_time return total_wait_times"},{"question":"You are required to write a function called `analyze_temperature_data` that reads temperature data from a CSV file and calculates the average temperature for each month and the number of days where the temperature exceeded a given threshold. **Function Signature:** ```python def analyze_temperature_data(csv_file: str, threshold: float) -> Tuple[Dict[str, float], int]: ``` **Parameters:** 1. `csv_file` (str): The path to the CSV file containing the temperature data. The CSV file will have a column `date` in `YYYY-MM-DD` format and a column `temperature` in float. 2. `threshold` (float): The temperature threshold to count the number of days where the temperature exceeded this value. **Returns:** - A tuple with two elements: 1. A dictionary where keys are month names (\\"January\\", \\"February\\", ..., \\"December\\") and values are the average temperatures for these months. 2. An integer representing the number of days where the temperature exceeded the threshold. **Requirements:** 1. Load the data from the CSV file using the `pandas.read_csv` function. 2. Convert the `date` column to datetime format using `pandas.to_datetime`. 3. Extract the month from the `date` column. 4. Calculate the average temperature for each month. 5. Count the number of days where the temperature exceeded the given threshold. **Example Usage:** ```python from typing import Dict, Tuple import pandas as pd def analyze_temperature_data(csv_file: str, threshold: float) -> Tuple[Dict[str, float], int]: df = pd.read_csv(csv_file) df[\'date\'] = pd.to_datetime(df[\'date\']) df[\'month\'] = df[\'date\'].dt.strftime(\'%B\') avg_temps = df.groupby(\'month\')[\'temperature\'].mean().to_dict() exceeded_days = df[df[\'temperature\'] > threshold].shape[0] return avg_temps, exceeded_days # Assuming temperature_data.csv contains the relevant data average_temperatures, days_above_threshold = analyze_temperature_data(\'temperature_data.csv\', 30.0) print(average_temperatures) print(days_above_threshold) ```","solution":"import pandas as pd from typing import Dict, Tuple def analyze_temperature_data(csv_file: str, threshold: float) -> Tuple[Dict[str, float], int]: # Read the CSV file df = pd.read_csv(csv_file) # Convert the date column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Extract the month from the date column df[\'month\'] = df[\'date\'].dt.strftime(\'%B\') # Calculate average temperature for each month avg_temps = df.groupby(\'month\')[\'temperature\'].mean().to_dict() # Count the number of days where the temperature exceeded the given threshold exceeded_days = df[df[\'temperature\'] > threshold].shape[0] return avg_temps, exceeded_days"},{"question":"Write a Python function called `analyze_email_addresses` that takes a list of email addresses and returns a dictionary with the domains as keys and the number of occurrences of each domain as values. Your function should ignore case when counting the occurrences of each domain. The function should ignore any invalid email addresses (those not containing exactly one \'@\' symbol). Function Signature: ```python def analyze_email_addresses(emails: list[str]) -> dict: ... ``` Requirements: 1. The function must correctly handle an empty list and return an empty dictionary. 2. Domains should be case insensitive, meaning \'Example.com\' should be treated the same as \'example.com\'. 3. The function should disregard any email addresses that do not conform to the basic structure of `name@domain`. # Example Usage: ```python emails = [\\"alice@example.com\\", \\"bob@company.com\\", \\"charlie@Example.com\\", \\"dave@school.edu\\", \\"eve@School.edu\\", \\"invalid_email@\\", \\"@invalid.com\\", \\"invalid.com\\"] result = analyze_email_addresses(emails) print(result) # Output: {\'example.com\': 2, \'company.com\': 1, \'school.edu\': 2} ``` Hints: - You may use the `str.split(\'@\')` method to separate the local part and domain of the email address. - Utilize the `str.lower()` method to handle domain case sensitivity. - Consider using a `collections.defaultdict` to simplify counting occurrences.","solution":"def analyze_email_addresses(emails: list[str]) -> dict: from collections import defaultdict domain_counts = defaultdict(int) for email in emails: parts = email.split(\'@\') if len(parts) == 2 and all(parts): domain = parts[1].lower() domain_counts[domain] += 1 return dict(domain_counts)"},{"question":"Design a function `find_longest_substring(s)` that takes a string `s` as input and returns the length of the longest substring that contains all unique characters. The function should be efficient enough to handle strings containing up to 1000 characters. A substring is defined as a contiguous sequence of characters within a string. For this problem, the substring must consist of non-repeating characters. The function should utilize sliding window technique to ensure optimal performance. Your task is to: 1. Implement the function `find_longest_substring(s)` that finds the length of the longest substring with all unique characters. 2. Handle cases where the string could be empty or contain repeated characters. ```python def find_longest_substring(s): # Details to be filled by the student pass ``` **Example:** ```python print(find_longest_substring(\\"abcabcbb\\")) # Output should be 3 print(find_longest_substring(\\"bbbbb\\")) # Output should be 1 print(find_longest_substring(\\"pwwkew\\")) # Output should be 3 print(find_longest_substring(\\"\\")) # Output should be 0 ``` The function should handle various inputs and ensure the correctness of the output according to the description provided.","solution":"def find_longest_substring(s): Returns the length of the longest substring with all unique characters. if not s: return 0 max_length = 0 start = 0 char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function called `find_top_students` that utilizes the Pandas library to identify the top students based on their test scores from a given dataset. This exercise will demonstrate how to use `pandas.DataFrame` and basic DataFrame operations to filter and sort data. The function should perform the following tasks: 1. Create a DataFrame using the provided dictionary. 2. Filter the DataFrame to include only students who scored above a given threshold. 3. Sort the filtered DataFrame by scores in descending order. 4. Return the sorted DataFrame containing only the names and scores of the top students. Specifically, the function `find_top_students` should: - Take two inputs: a dictionary representing the student data and an integer threshold score. - Construct a Pandas DataFrame from the provided dictionary. - Filter the DataFrame to include only rows where the \'Score\' is greater than the threshold. - Sort the filtered DataFrame in descending order based on the \'Score\' column. - Return a DataFrame containing only the \'Name\' and \'Score\' columns of the top students. Here is an example of the dictionary: ```python data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\'], \'Score\': [88, 92, 77, 85, 90] } ``` Write the function `find_top_students` that follows the above requirements.","solution":"import pandas as pd def find_top_students(data, threshold): Identify top students who scored above a given threshold. :param data: dict, a dictionary with keys \'Name\' and \'Score\'. :param threshold: int, score threshold. :return: DataFrame containing only \'Name\' and \'Score\' of students who scored above the threshold, sorted by \'Score\' in descending order. # Create DataFrame from the provided dictionary df = pd.DataFrame(data) # Filter the DataFrame to include only students who scored above the threshold filtered_df = df[df[\'Score\'] > threshold] # Sort the filtered DataFrame by \'Score\' in descending order sorted_df = filtered_df.sort_values(by=\'Score\', ascending=False) # Return the DataFrame containing only the \'Name\' and \'Score\' columns return sorted_df[[\'Name\', \'Score\']]"},{"question":"You are tasked with creating a function `find_longest_subsequence(arr)` that finds the longest contiguous subsequence of an array where the absolute difference between any two consecutive elements is exactly one. Here are the steps your function should follow: 1. Iterate through the array to find all the contiguous subsequences where the absolute difference between consecutive elements is one. 2. Track the starting and ending indices of the current valid subsequence. 3. Update the indices whenever the difference condition is violated and start a new subsequence. 4. Keep track of the maximum length subsequence found during the iteration process. 5. Return the longest contiguous subsequence. Your function should have the following structure: ```python def find_longest_subsequence(arr): # Initialize variables to track current and max subsequence length and indices # Iterate through the array to find valid subsequences # Update indices and max length when appropriate # Return the longest contiguous subsequence ``` For example: ```python arr = [1, 2, 3, 2, 3, 7, 4, 5, 3, 4] print(find_longest_subsequence(arr)) ``` The expected output for this example would be: ```python [1, 2, 3, 2, 3] ``` Your implementation must handle the edge cases, such as an empty array or an array with all elements being the same. The returned subsequence should be the first one encountered if there are multiple subsequences with the same maximum length.","solution":"def find_longest_subsequence(arr): if not arr: return [] max_subseq = [] current_subseq = [arr[0]] for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_subseq.append(arr[i]) else: if len(current_subseq) > len(max_subseq): max_subseq = current_subseq current_subseq = [arr[i]] if len(current_subseq) > len(max_subseq): max_subseq = current_subseq return max_subseq"},{"question":"Write a function that simulates a simple queuing system at a bank. The bank has one teller and a list of customers arriving at different times, each needing a certain amount of service time. You need to calculate the time each customer will finish being served. The function should be named `simulate_bank_queue` and should take the following inputs: - `arrival_times`: A list of integers where each integer represents the arrival time of a customer. The list is sorted in non-decreasing order. - `service_times`: A list of integers where each integer represents the amount of time a customer requires at the teller. The length of `service_times` is the same as `arrival_times`. The function should return a list of integers representing the time each customer will leave the bank. ```python def simulate_bank_queue(arrival_times, service_times): # Function implementation goes here pass ``` # Parameters: - `arrival_times` (list of int): A list of non-decreasing integers representing the times at which customers arrive at the bank. - `service_times` (list of int): A list of integers representing the service duration required by each customer. # Returns: - `list of int`: A list of integers where each integer represents the time at which a customer finishes being served. # Example: ```python arrival_times = [1, 5, 9] service_times = [2, 3, 1] result = simulate_bank_queue(arrival_times, service_times) print(result) # Expected Output: [3, 8, 10] ``` In this example: - The first customer arrives at time 1 and leaves at time 3 (1 + 2). - The second customer arrives at time 5 and leaves at time 8 (5 + 3). - The third customer arrives at time 9 and is served immediately, leaving at time 10 (9 + 1). The function should correctly simulate the queue and calculate the leave times for the customers.","solution":"def simulate_bank_queue(arrival_times, service_times): Simulates a simple queuing system at a bank. Parameters: arrival_times (list of int): A list of non-decreasing integers representing the times at which customers arrive at the bank. service_times (list of int): A list of integers representing the service duration required by each customer. Returns: list of int: A list of integers where each integer represents the time at which a customer finishes being served. if not arrival_times or not service_times or len(arrival_times) != len(service_times): return [] finish_times = [] current_time = 0 for arrival, service in zip(arrival_times, service_times): current_time = max(current_time, arrival) + service finish_times.append(current_time) return finish_times"},{"question":"Your task is to design a function named `longest_vowel_substring` that finds the length of the longest substring in a given string that contains only vowels. The function should follow these steps: 1. Traverse through the input string and identify all substrings consisting entirely of vowels (a, e, i, o, u). 2. Keep track of the length of each vowel substring encountered. 3. Determine the longest length found among all vowel substrings. The input to the function will be: - A single string `s` representing the input text, which may contain both uppercase and lowercase characters. The function should return an integer representing the length of the longest vowel-only substring. Example: ``` Input: \\"earthproblem\\" Output: 2 Input: \\"beautiful\\" Output: 3 ``` Note: Ensure to handle edge cases such as an empty string or a string with no vowels. Use built-in Python functions and efficient algorithms to optimize the performance of the solution.","solution":"def longest_vowel_substring(s): This function finds the length of the longest substring consisting only of vowels. :param s: The input string :return: The length of the longest vowel-only substring vowels = set(\'aeiouAEIOU\') max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Implement a function called `random_forest_feature_importance` that trains a Random Forest classifier on a given dataset and plots the feature importances using a bar chart. Utilize the `RandomForestClassifier` class from the `sklearn.ensemble` module for training the model and the `bar` function from `matplotlib.pyplot` for plotting. The function should: 1. Accept three parameters: - `X`: A 2D numpy array representing the input features of the dataset. - `y`: A 1D numpy array representing the target labels of the dataset. - `plot`: A boolean flag indicating whether to plot the feature importances. 2. Train a `RandomForestClassifier` on the input dataset `X` and `y`. 3. Return the feature importances as a 1D numpy array. 4. When `plot` is `True`, create a bar chart of the feature importances, with appropriate labels and title. Ensure the bar chart is properly visualized using `matplotlib.pyplot.bar`. The function signature is as follows: ```python def random_forest_feature_importance(X, y, plot=False): # Your implementation here ``` # Example Usage: ```python import numpy as np from sklearn import datasets # Load a sample dataset for demonstration iris = datasets.load_iris() X = iris.data y = iris.target # Call the function to train Random Forest and plot feature importances random_forest_feature_importance(X, y, plot=True) ```","solution":"from sklearn.ensemble import RandomForestClassifier import matplotlib.pyplot as plt import numpy as np def random_forest_feature_importance(X, y, plot=False): Train a Random Forest classifier and return the feature importances. Args: X (numpy.ndarray): 2D array representing the input features. y (numpy.ndarray): 1D array representing the target labels. plot (bool): Flag to indicate whether to plot the feature importances. Returns: numpy.ndarray: 1D array of feature importances. # Initialize and train the Random Forest classifier clf = RandomForestClassifier() clf.fit(X, y) # Get feature importances from the trained classifier importances = clf.feature_importances_ # Plot the feature importances if plot flag is True if plot: plt.figure(figsize=(10, 6)) indices = np.argsort(importances)[::-1] plt.bar(range(X.shape[1]), importances[indices], align=\'center\') plt.xticks(range(X.shape[1]), indices) plt.xlabel(\'Feature Index\') plt.ylabel(\'Feature Importance\') plt.title(\'Random Forest Feature Importances\') plt.show() return importances"},{"question":"Write a function named `warehouse_sorting` that helps a warehouse to sort items into various categories based on their weight. The function should take a list of dictionaries as its input, where each dictionary represents an item with attributes `name` (a string) and `weight` (an integer). The function should return a dictionary with the categories \\"light\\", \\"medium\\", and \\"heavy\\" based on the following logic: 1. Items with a weight less than 20 units are categorized as \\"light\\". 2. Items with a weight between 20 (inclusive) and 50 (exclusive) units are categorized as \\"medium\\". 3. Items with a weight of 50 units or more are categorized as \\"heavy\\". The output dictionary should have three keys: \\"light\\", \\"medium\\", and \\"heavy\\", each associated with a list of item names sorted in alphabetical order. **Function Signature:** ```python def warehouse_sorting(items: list) -> dict: pass ``` # Example ```python items = [ {\\"name\\": \\"item1\\", \\"weight\\": 10}, {\\"name\\": \\"item2\\", \\"weight\\": 25}, {\\"name\\": \\"item3\\", \\"weight\\": 50}, {\\"name\\": \\"item4\\", \\"weight\\": 5}, {\\"name\\": \\"item5\\", \\"weight\\": 45}, {\\"name\\": \\"item6\\", \\"weight\\": 55} ] print(warehouse_sorting(items)) ``` # Expected Output ```python { \\"light\\": [\\"item1\\", \\"item4\\"], \\"medium\\": [\\"item2\\", \\"item5\\"], \\"heavy\\": [\\"item3\\", \\"item6\\"] } ```","solution":"def warehouse_sorting(items): categories = { \\"light\\": [], \\"medium\\": [], \\"heavy\\": [] } for item in items: if item[\'weight\'] < 20: categories[\'light\'].append(item[\'name\']) elif 20 <= item[\'weight\'] < 50: categories[\'medium\'].append(item[\'name\']) else: categories[\'heavy\'].append(item[\'name\']) for category in categories: categories[category].sort() return categories"},{"question":"Write a Python function called `calculate_time_difference` that takes two arguments, `start_time` and `end_time`. Both arguments are strings representing time in the \\"HH:MM:SS\\" format (24-hour clock). The function should calculate the difference between `end_time` and `start_time`, and return a string representing this difference in the same \\"HH:MM:SS\\" format. For simplicity, you can assume that: 1. Both `start_time` and `end_time` refer to times on the same day. 2. `end_time` is always greater than or equal to `start_time`. You must adhere to the following requirements: 1. Parse the time strings correctly and convert them to a suitable format for calculation. 2. Handle cases where the difference in time components (hours, minutes, seconds) might require borrowing from the next higher component. Here is a simple usage example: ```python # Suppose we want to calculate the difference between 08:23:15 and 15:45:30. result = calculate_time_difference(\\"08:23:15\\", \\"15:45:30\\") print(result) # Output: \\"07:22:15\\" ```","solution":"def calculate_time_difference(start_time, end_time): Calculate the time difference between start_time and end_time. Arguments: start_time -- str in \\"HH:MM:SS\\" format end_time -- str in \\"HH:MM:SS\\" format Returns: str -- Time difference in \\"HH:MM:SS\\" format # Parse the time strings into hours, minutes, and seconds start_hours, start_minutes, start_seconds = map(int, start_time.split(\':\')) end_hours, end_minutes, end_seconds = map(int, end_time.split(\':\')) # Calculate the difference in seconds delta_seconds = end_seconds - start_seconds borrow_minutes = 0 if delta_seconds < 0: delta_seconds += 60 borrow_minutes = 1 # Calculate the difference in minutes delta_minutes = end_minutes - start_minutes - borrow_minutes borrow_hours = 0 if delta_minutes < 0: delta_minutes += 60 borrow_hours = 1 # Calculate the difference in hours delta_hours = end_hours - start_hours - borrow_hours # Format the result as \\"HH:MM:SS\\" return f\\"{delta_hours:02}:{delta_minutes:02}:{delta_seconds:02}\\""},{"question":"**Context:** You are working on a text processing project, and one of the tasks is to identify and count the most frequent words in a given text. You want to ensure that common stop words (e.g., \\"and\\", \\"the\\", \\"is\\", etc.) are not counted. Additionally, the words should be counted in a case-insensitive manner. **Objective:** You need to write a function called `count_frequent_words` which takes two parameters: `text` and `num_words`. The function will return a list of the `num_words` most frequent words in the text, excluding common stop words, sorted by frequency in descending order. If multiple words have the same frequency, they should be sorted alphabetically. **Function Signature:** ```python def count_frequent_words(text, num_words): pass ``` **Parameters:** 1. `text` (str): A string containing the text to be processed. 2. `num_words` (int): The number of most frequent words to return. **Example Usage:** ```python text = \\"This is a test. This test is only a test.\\" num_words = 2 print(count_frequent_words(text, num_words)) # Output: [\'test\', \'this\'] ``` **Requirements:** - Use the `collections.Counter` class to count word frequencies. - Remove punctuation and convert the text to lower case. - Exclude common stop words from the output. You can assume the stop words list contains: [\\"and\\", \\"the\\", \\"is\\", \\"in\\", \\"it\\", \\"of\\", \\"to\\", \\"a\\", \\"with\\"]. - Return a list of the `num_words` most frequent words, sorted by frequency in descending order and alphabetically for ties. **Hint:** You might want to use `str.maketrans` to remove punctuation and `Counter.most_common` to get the most frequent words.","solution":"from collections import Counter import re def count_frequent_words(text, num_words): stop_words = set([\\"and\\", \\"the\\", \\"is\\", \\"in\\", \\"it\\", \\"of\\", \\"to\\", \\"a\\", \\"with\\"]) # Remove punctuation and convert text to lower case text = re.sub(r\'[^ws]\', \'\', text).lower() # Split text into words and filter out stop words words = [word for word in text.split() if word not in stop_words] # Count word frequencies word_counts = Counter(words) # Get the most common words, sorted by frequency and alphabetically for ties most_common_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Extract the words from the tuples and take the top `num_words` result = [word for word, count in most_common_words[:num_words]] return result"},{"question":"You are given a JSON file named `student_grades.json` which contains an array of objects, each representing a student and their respective grades in various subjects. The structure of the JSON file is as follows: ```json [ { \\"student_id\\": \\"S1\\", \\"name\\": \\"Alice\\", \\"grades\\": { \\"Math\\": 85, \\"Science\\": 92, \\"English\\": 78, \\"History\\": 88 } }, { \\"student_id\\": \\"S2\\", \\"name\\": \\"Bob\\", \\"grades\\": { \\"Math\\": 90, \\"Science\\": 80, \\"English\\": 85, \\"History\\": 86 } }, ... ] ``` Your task is to write a Python function named `calculate_average_grades` that reads the JSON file and performs the following tasks: - Calculate the average grade for each student. - Create a new JSON file named `average_grades.json` that contains the `student_id`, `name`, and their calculated `average_grade`. The structure of the output JSON file should be as follows: ```json [ { \\"student_id\\": \\"S1\\", \\"name\\": \\"Alice\\", \\"average_grade\\": 85.75 }, { \\"student_id\\": \\"S2\\", \\"name\\": \\"Bob\\", \\"average_grade\\": 85.25 }, ... ] ``` The function should follow these specifications: - Use the `json` library to read and write JSON files. - Handle any exceptions that may arise during file operations and print appropriate error messages. - Round the calculated average to two decimal places. The function should not return anything but must create the `average_grades.json` file with the specified structure.","solution":"import json def calculate_average_grades(input_filename=\'student_grades.json\', output_filename=\'average_grades.json\'): try: # Read the JSON file with open(input_filename, \'r\') as f: student_data = json.load(f) # Create list to store the output data output_data = [] # Calculate average grades for each student for student in student_data: grades = student[\'grades\'].values() average_grade = round(sum(grades) / len(grades), 2) output_data.append({ \'student_id\': student[\'student_id\'], \'name\': student[\'name\'], \'average_grade\': average_grade }) # Write to the output JSON file with open(output_filename, \'w\') as f: json.dump(output_data, f, indent=4) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are required to implement a function that performs K-Means Clustering using the `sklearn.cluster.KMeans` class. K-Means Clustering is an unsupervised learning algorithm used to partition data into k clusters, where each data point belongs to the cluster with the nearest mean. This problem is designed to test your understanding of clustering techniques using the scikit-learn library. Implement the function `k_means_clustering(data, num_clusters, plot_clusters=False)` that: 1. Performs K-Means Clustering on the provided dataset. 2. Optionally plots the clustered data points and cluster centroids if `plot_clusters` is set to `True`. 3. Returns the cluster labels for each data point and the coordinates of the cluster centroids. The function parameters are as follows: - `data`: A pandas DataFrame containing the dataset, with each row representing a data point and columns representing the features. - `num_clusters`: An integer representing the number of clusters to form. - `plot_clusters`: A boolean indicating whether to plot the data points and centroids. Ensure that you create and fit the `KMeans` object from `sklearn.cluster.KMeans`, and provide the clustered data plots with distinct colors for each cluster and markers for the centroids. Here is a sample function signature: ```python def k_means_clustering(data, num_clusters, plot_clusters=False): pass ``` Requirements: - Use `sklearn.cluster.KMeans` to perform the clustering. - Use `matplotlib.pyplot` to create the plots. - Assume `pandas` is used for data manipulation.","solution":"import matplotlib.pyplot as plt from sklearn.cluster import KMeans import pandas as pd def k_means_clustering(data, num_clusters, plot_clusters=False): Perform K-Means Clustering on the provided data. Parameters: - data (pandas.DataFrame): The dataset with features. - num_clusters (int): The number of clusters to form. - plot_clusters (bool): If True, plot the data points and cluster centroids. Returns: - cluster_labels (list): Cluster labels for each data point. - cluster_centers (list): Coordinates of cluster centroids. # Ensure the input data is a pandas DataFrame if not isinstance(data, pd.DataFrame): raise ValueError(\\"Input data must be a pandas DataFrame\\") # Create and fit the KMeans model kmeans = KMeans(n_clusters=num_clusters, random_state=42) kmeans.fit(data) # Retrieve the cluster labels and cluster centers cluster_labels = kmeans.labels_ cluster_centers = kmeans.cluster_centers_ # Plot the data points and cluster centroids if plot_clusters is True if plot_clusters: plt.figure(figsize=(8, 6)) plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=cluster_labels, s=50, cmap=\'viridis\') plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], c=\'red\', s=200, alpha=0.75, marker=\'X\') plt.title(\'K-Means Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() return list(cluster_labels), cluster_centers.tolist()"},{"question":"In this exercise, you will create a function that simulates a basic text-based game character\'s inventory system. Your task is to design a class `Inventory` that allows adding, removing, and displaying items. Each item will have a name and a quantity. Design the class `Inventory` with the following methods: - `__init__(self)`: Initializes an empty inventory. - `add_item(self, item_name: str, quantity: int) -> None`: Adds the specified quantity of the given item to the inventory. If the item already exists, increase its quantity. - `remove_item(self, item_name: str, quantity: int) -> bool`: Removes the specified quantity of the given item from the inventory if available. If the item\'s quantity becomes zero or less, remove the item completely from the inventory. Return `True` if the operation was successful, otherwise return `False` (for example, if trying to remove more than available). - `get_items(self) -> List[Tuple[str, int]]`: Returns a list of tuples where each tuple contains an item name and its quantity. Additionally, write code to demonstrate the following functionality: 1. Create an inventory instance. 2. Add 5 units of \\"Sword\\", 3 units of \\"Shield\\". 3. Remove 2 units of \\"Sword\\". 4. Attempt to remove 1 unit of \\"Potion\\" (not available). 5. Display the items in the inventory. Example usage: ```python inventory = Inventory() inventory.add_item(\\"Sword\\", 5) inventory.add_item(\\"Shield\\", 3) inventory.remove_item(\\"Sword\\", 2) success = inventory.remove_item(\\"Potion\\", 1) items = inventory.get_items() print(items) # Expected Output: [(\'Sword\', 3), (\'Shield\', 3)] print(success) # Expected Output: False ```","solution":"from typing import List, Tuple class Inventory: def __init__(self): self.items = {} def add_item(self, item_name: str, quantity: int) -> None: Adds the specified quantity of the given item to the inventory. If the item already exists, increase its quantity. if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove_item(self, item_name: str, quantity: int) -> bool: Removes the specified quantity of the given item from the inventory if available. If the item\'s quantity becomes zero or less, remove the item completely from the inventory. Returns `True` if the operation was successful, otherwise returns `False`. if item_name in self.items and self.items[item_name] >= quantity: self.items[item_name] -= quantity if self.items[item_name] <= 0: del self.items[item_name] return True return False def get_items(self) -> List[Tuple[str, int]]: Returns a list of tuples where each tuple contains an item name and its quantity. return list(self.items.items()) # Demonstration inventory = Inventory() inventory.add_item(\\"Sword\\", 5) inventory.add_item(\\"Shield\\", 3) inventory.remove_item(\\"Sword\\", 2) success = inventory.remove_item(\\"Potion\\", 1) items = inventory.get_items() print(items) # Expected Output: [(\'Sword\', 3), (\'Shield\', 3)] print(success) # Expected Output: False"},{"question":"Create a function named `find_longest_palindromic_subsequence` that takes a single input parameter: - `s`: A string representing the input sequence of characters The function should perform the following tasks: 1. Identify the longest palindromic subsequence within the given string. 2. Return the length of this longest palindromic subsequence. A palindromic subsequence is a sequence that reads the same backwards as forwards and can be derived from the original string by deleting some or none of the characters without changing the order of the remaining characters. **Specific Requirements**: - Use dynamic programming to find the solution efficiently. - Implement efficient storage to keep track of intermediate results for subproblems. - The time complexity of the solution should be approximately O(n^2), where n is the length of the input string. - Use a 2D array to store the lengths of palindromic subsequences of various subsections of the string. Implement the function `find_longest_palindromic_subsequence(s)` as described.","solution":"def find_longest_palindromic_subsequence(s): n = len(s) if n == 0: return 0 # Create a 2D array to store lengths of palindromic subsequences dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of longest palindromic subsequence return dp[0][n-1]"},{"question":"You are to write a function `def magic_square_checker(matrix: list[list[int]]) -> bool:` that checks if a given 3x3 matrix is a magic square or not. A 3x3 matrix is considered a magic square if the following conditions hold true: 1. All the numbers from 1 to 9 are present in the matrix. 2. The sums of the numbers in each row, each column, and the two main diagonals are all the same. # Input and Output - The function takes one argument: - `matrix`: A list of lists representing a 3x3 matrix of integers. - The function returns `True` if the given matrix is a magic square, and `False` otherwise. # Example ```python assert magic_square_checker([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True assert magic_square_checker([[3, 5, 7], [8, 1, 6], [4, 9, 2]]) == False ``` # Constraints - The matrix will always be a 3x3 matrix (i.e., a list of three lists, each containing three integers). - Elements of the matrix are integers between 1 and 9. # Approach 1. Check if all numbers from 1 to 9 are present in the matrix. 2. Compute the sum of each row. 3. Compute the sum of each column. 4. Compute the sum of the two main diagonals. 5. Ensure all these sums are the same. ```python def magic_square_checker(matrix: list[list[int]]) -> bool: # Flatten the matrix to check if all numbers from 1 to 9 are present flat_matrix = [num for row in matrix for num in row] if set(flat_matrix) != set(range(1, 10)): return False # Calculate the sum for the first row as the target sum target_sum = sum(matrix[0]) # Check the sums of rows for row in matrix: if sum(row) != target_sum: return False # Check the sums of columns for col in range(3): if sum(matrix[row][col] for row in range(3)) != target_sum: return False # Check the sums of the diagonals if sum(matrix[i][i] for i in range(3)) != target_sum: return False if sum(matrix[i][2 - i] for i in range(3)) != target_sum: return False return True ```","solution":"def magic_square_checker(matrix: list[list[int]]) -> bool: Checks if the given 3x3 matrix is a magic square. Args: matrix (list[list[int]]): A 3x3 matrix of integers. Returns: bool: True if the matrix is a magic square, False otherwise. # Flatten the matrix to check if all numbers from 1 to 9 are present flat_matrix = [num for row in matrix for num in row] if set(flat_matrix) != set(range(1, 10)): return False # Calculate the sum for the first row as the target sum target_sum = sum(matrix[0]) # Check the sums of rows for row in matrix: if sum(row) != target_sum: return False # Check the sums of columns for col in range(3): if sum(matrix[row][col] for row in range(3)) != target_sum: return False # Check the sums of the diagonals if sum(matrix[i][i] for i in range(3)) != target_sum: return False if sum(matrix[i][2 - i] for i in range(3)) != target_sum: return False return True"},{"question":"You are required to create a function in Python that takes a list of integers and returns a new list where each element is the product of all the numbers in the original list except the number at that position. This exercise will help you understand how to manipulate lists and use iterative processes to solve array-related problems. Your task is to implement a function called `product_except_self()` that takes one parameter `nums`. This function will return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. Here is what your function needs to do: 1. Initialize an empty result list with the same length as the input list. 2. Iterate through the input list and calculate the product of all elements except the current element at each index. 3. Populate the result list with the calculated products. 4. Return the result list. **Function Signature:** ```python def product_except_self(nums: list) -> list: # implementation here ``` # Example: ```python print(product_except_self([1,2,3,4])) ``` This should return `[24, 12, 8, 6]` because: - The product of all elements except `1` is `2*3*4 = 24` - The product of all elements except `2` is `1*3*4 = 12` - The product of all elements except `3` is `1*2*4 = 8` - The product of all elements except `4` is `1*2*3 = 6` # Constraints: - The length of the input list will be between 2 and 1000. - Each element in the input list will be an integer between -1000 and 1000. - The product of any subset of the list will not exceed the range of 32-bit integers.","solution":"def product_except_self(nums): Returns a new list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. n = len(nums) res = [1] * n prefix = 1 for i in range(n): res[i] = prefix prefix *= nums[i] suffix = 1 for i in range(n-1, -1, -1): res[i] *= suffix suffix *= nums[i] return res"},{"question":"In this problem, you are asked to create a function that generates a bar chart to visualize the frequency of unique words in a given text. The function will process a string of text, count the occurrence of each unique word, and produce a bar chart indicating the frequency of the top `n` most common words. You will utilize the `collections.Counter` to count the words and `matplotlib` to plot the bar chart. **Function Specifications**: 1. Function Name: `plot_word_frequency` 2. Parameters: - `text`: A string containing the text to be analyzed. - `n`: An integer indicating the number of top most common words to display. - `ignore_case`: A boolean indicating whether the word counting should be case-insensitive. **Function Output**: - The function should generate a bar chart of the word frequencies for the top `n` most common words. **Requirements**: - Use `collections.Counter` to count word frequencies. - Use `matplotlib.pyplot` for plotting the bar chart. **Steps to Implement**: 1. Preprocess the text to remove punctuation and normalize case based on the parameter `ignore_case`. 2. Split the text into words and count their frequencies using `collections.Counter`. 3. Extract the top `n` most common words and their frequencies. 4. Use `matplotlib` to draw and customize the bar chart. Example Usage: ```python from collections import Counter import matplotlib.pyplot as plt import re def plot_word_frequency(text, n, ignore_case): # Preprocess text: Remove punctuation and normalize case text = re.sub(r\'[^ws]\', \'\', text) if ignore_case: text = text.lower() # Split text into words and count frequencies words = text.split() word_counts = Counter(words) # Get the top n most common words common_words = word_counts.most_common(n) # Separate words and frequencies for plotting words, frequencies = zip(*common_words) # Plot bar chart plt.figure(figsize=(10, 5)) plt.bar(words, frequencies, color=\'blue\') plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(f\'Top {n} Most Common Words\') plt.xticks(rotation=45) plt.show() # Example data text = \\"Hello world! This is a test. Hello again, world. Testing, one, two, three. Hello world!\\" n = 3 ignore_case = True plot_word_frequency(text, n, ignore_case) ```","solution":"from collections import Counter import matplotlib.pyplot as plt import re def plot_word_frequency(text, n, ignore_case=True): Generates a bar chart to visualize the frequency of the top n most common words in a given text. Parameters: text (str): The text to analyze. n (int): The number of top most common words to display. ignore_case (bool): Whether to normalize case for word counting. # Preprocess text: Remove punctuation and normalize case text = re.sub(r\'[^ws]\', \'\', text) if ignore_case: text = text.lower() # Split text into words and count frequencies words = text.split() word_counts = Counter(words) # Get the top n most common words common_words = word_counts.most_common(n) if not common_words: print(\\"No words to display.\\") return # Separate words and frequencies for plotting words, frequencies = zip(*common_words) # Plotting the bar chart plt.figure(figsize=(10, 5)) plt.bar(words, frequencies, color=\'blue\') plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(f\'Top {n} Most Common Words\') plt.xticks(rotation=45) plt.tight_layout() plt.show()"},{"question":"Write a function named `capitalize_nth_letter` that capitalizes every nth letter of an input string. If the string has fewer characters than `n`, return the original string. Here are the detailed requirements: 1. **Function Name**: `capitalize_nth_letter` 2. **Parameters**: - `input_string` (str): The string in which every nth letter will be capitalized. - `n` (int): The position of the letters to be capitalized (1-based index). 3. **Behavior**: - If `n` is less than or equal to 0, raise a `ValueError` with the message \\"n must be greater than 0\\". - If `n` is greater than the length of `input_string`, return `input_string` as is. - Capitalize every nth letter. The counting of positions should be 1-based. For example, if `n` is 2, the 2nd, 4th, 6th, etc., letters need to be capitalized. - Return the modified string. Write the function `capitalize_nth_letter` to accomplish the above tasks. Here is an example of its usage: ```python capitalize_nth_letter(\\"hello world\\", 2) # Output: \\"hElLo wOrLd\\" capitalize_nth_letter(\\"python programming\\", 5) # Output: \\"pythOn prOgrAmmIng\\" capitalize_nth_letter(\\"short\\", 10) # Output: \\"short\\" ``` Use the following sample code: ```python def capitalize_nth_letter(input_string, n): if n <= 0: raise ValueError(\\"n must be greater than 0\\") result_chars = [] for i, char in enumerate(input_string): if (i + 1) % n == 0: result_chars.append(char.upper()) else: result_chars.append(char) return \'\'.join(result_chars) ```","solution":"def capitalize_nth_letter(input_string, n): if n <= 0: raise ValueError(\\"n must be greater than 0\\") if n > len(input_string): return input_string result_chars = [] for i, char in enumerate(input_string): if (i + 1) % n == 0: result_chars.append(char.upper()) else: result_chars.append(char) return \'\'.join(result_chars)"},{"question":"You are required to create a function named `compress_string` that takes a single parameter: `input_string`. - `input_string`: A string consisting of alphabetical characters. The goal of this function is to: 1. Compress the input string by using the counts of repeated characters. 2. The compression should be case-sensitive, meaning treat \'a\' and \'A\' as different characters. 3. Only compress the string if the compressed string is shorter than the original string. If not, return the original string. The compression should follow these rules: - Consecutive characters are replaced by the character followed by the number of times it appears consecutively. - For example, the string \\"aaabbccaaa\\" should be compressed to \\"a3b2c2a3\\". Here are the specific steps your function should follow: 1. Iterate over the string and count consecutive characters. 2. Build the compressed string. 3. Compare the lengths of the compressed and original strings, and return the shortest one. Your function signature should look like this: ```python def compress_string(input_string): pass ``` Here are two examples to illustrate the expected behavior: 1. `compress_string(\\"aaabbccaaa\\")` should return `\\"a3b2c2a3\\"`. 2. `compress_string(\\"abc\\")` should return `\\"abc\\"` because the compressed version \\"a1b1c1\\" is not shorter than the original string. Ensure to handle both uppercase and lowercase characters appropriately.","solution":"def compress_string(input_string): Compress the input string using the counts of repeated characters. Args: input_string (str): The input string consisting of alphabetical characters. Returns: str: The compressed string if it\'s shorter than the original; otherwise, the original string. if not input_string: return input_string compressed = [] count = 1 for i in range(1, len(input_string)): if input_string[i] == input_string[i - 1]: count += 1 else: compressed.append(input_string[i - 1] + str(count)) count = 1 # To handle the last set of characters compressed.append(input_string[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(input_string) else input_string"},{"question":"You are required to write a function named `remove_duplicates` that takes a single argument, a list of integers, and returns a new list with the duplicates removed. The order of the elements in the returned list should be the same as their first occurrence in the original list. The function should use `collections.OrderedDict` to preserve the order and remove duplicates efficiently. # Function Signature ```python from typing import List from collections import OrderedDict def remove_duplicates(nums: List[int]) -> List[int]: ... ``` # Requirements - The function should maintain the order of the first occurrence of each element. - The function should use `collections.OrderedDict` for an efficient solution. # Example ```python >>> remove_duplicates([3, 1, 2, 3, 2, 1, 4]) [3, 1, 2, 4] >>> remove_duplicates([1, 2, 2, 3, 4, 4, 5]) [1, 2, 3, 4, 5] >>> remove_duplicates([7, 7, 7, 7, 7]) [7] >>> remove_duplicates([]) [] ``` # Constraints - The input list can be empty. - The input list elements are all integers.","solution":"from typing import List from collections import OrderedDict def remove_duplicates(nums: List[int]) -> List[int]: Removes duplicates from the list while preserving the order of first occurrences. return list(OrderedDict.fromkeys(nums))"},{"question":"# Unique Character String Count In this task, you are required to find the number of distinct strings that can be formed using exactly `N` unique characters taken from a given set of letters. The set of letters contains all lowercase English letters `(\'a\' to \'z\')`. The generated strings must contain every character only once. Given an integer `N`, your task is to implement a function `count_unique_strings(N)` to calculate the number of such strings. 1. Use `math.factorial` to compute permutations. 2. If (N) is greater than `26`, return `0` since you cannot form strings with more than 26 different characters from the set. 3. If (N) is `0`, return `1` since there\'s only one way to form an empty string. Here is the signature of the function you need to implement: ```python def count_unique_strings(N): # Your code goes here ``` **Example**: ```python print(count_unique_strings(3)) # Expected Output: 15600 ``` **Constraints**: - `0 <= N <= 26`","solution":"import math def count_unique_strings(N): Returns the number of distinct strings that can be formed using exactly N unique characters from the set of lowercase English letters. if N > 26: return 0 if N == 0: return 1 return math.factorial(26) // math.factorial(26 - N)"},{"question":"You are given a dataset, `house_prices.csv`, which contains various features describing houses along with a \'Price\' column that indicates the price of the house. Your goal is to build a regression model to predict the price of houses based on the given features. **Function Requirements:** Write a function named `predict_house_prices` that performs the following steps: 1. **Import necessary libraries**: `pandas`, `numpy`, `sklearn`. 2. **Read the dataset** from a CSV file using `pandas.read_csv`. 3. **Separate features and target variable**: - The column \'Price\' should be the target variable (`y`). - All other columns should be the features (`X`). 4. **Split the data** into training and testing sets using a 70-30 split. 5. **Train a regression model** (e.g., Linear Regression) on the training data. 6. **Generate predictions** on the testing data. 7. **Compute regression metrics** such as Mean Absolute Error (MAE), Mean Squared Error (MSE), and R-squared score. 8. **Print the regression metrics**. **Example:** ```python def predict_house_prices(file_name: str): # Your code goes here. # Usage predict_house_prices(\'house_prices.csv\') ```","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score def predict_house_prices(file_name: str): # Step 2: Read the dataset data = pd.read_csv(file_name) # Step 3: Separate features and target variable X = data.drop(columns=\'Price\') y = data[\'Price\'] # Step 4: Split the data into training and testing sets (70-30 split) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Step 5: Train a regression model on the training data model = LinearRegression() model.fit(X_train, y_train) # Step 6: Generate predictions on the testing data y_pred = model.predict(X_test) # Step 7: Compute regression metrics mae = mean_absolute_error(y_test, y_pred) mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) # Step 8: Print the regression metrics print(f\\"Mean Absolute Error (MAE): {mae:.2f}\\") print(f\\"Mean Squared Error (MSE): {mse:.2f}\\") print(f\\"R-squared Score: {r2:.2f}\\")"},{"question":"You are required to write a function named `find_pairs_with_given_sum` that reads numbers from a text file and outputs pairs of numbers that add up to a specific target sum. The function should leverage the `collections.defaultdict` and `logging.basicConfig` APIs as follows: 1. **Use `collections.defaultdict`**: This data structure will help manage the frequency of each number efficiently. 2. **Use `logging.basicConfig`**: Configure basic logging to keep track of the function\'s operations during execution. Log levels you should use include: \'INFO\' for the start of important processes and \'DEBUG\' for specific actions taken within those processes. # Function Signature ```python def find_pairs_with_given_sum(filename: str, target_sum: int) -> None: ``` # Arguments - `filename`: A string that represents the path to the text file you want to read. - `target_sum`: An integer value that denotes the target sum you are looking for. # Description The function should: 1. Read the text file specified by `filename` line by line. 2. Extract numbers from each line. You can assume that each line contains only one integer. 3. Calculate and store the frequency of each number using `collections.defaultdict`. 4. For each number in the file, determine if a complementary number (such that the two numbers add up to the `target_sum`) exists in the file. 5. Log an \'INFO\' message when starting to look for pairs. 6. Log a \'DEBUG\' message each time a valid pair is found and when it is added to the results. 7. Print the pairs of numbers in the format: `(number1, number2)`. # Example For example, given a file `numbers.txt` with the following content: ``` 1 5 3 7 9 2 4 6 8 0 ``` And `target_sum = 10`, the output might look like: ``` (1, 9) (2, 8) (3, 7) (4, 6) ``` # Constraints - You may assume the file is in a proper format and no extra cleaning of numbers is necessary. - The file size is moderate; hence performance optimizations are not a primary concern.","solution":"import logging from collections import defaultdict def find_pairs_with_given_sum(filename: str, target_sum: int) -> None: Function to find and print pairs of numbers that add up to a given target sum from a file. logging.basicConfig(level=logging.DEBUG, format=\'%(levelname)s: %(message)s\') # Read the file and extract numbers with open(filename, \'r\') as file: numbers = [int(line.strip()) for line in file] # Dictionary to store the frequency of each number num_counts = defaultdict(int) for number in numbers: num_counts[number] += 1 # Set to track pairs to ensure each pair is printed once pairs = set() logging.info(\\"Starting to find pairs\\") for number in numbers: complement = target_sum - number if complement in num_counts: # Ensure not to count the same pair twice if complement == number and num_counts[number] < 2: continue if (min(number, complement), max(number, complement)) not in pairs: pairs.add((min(number, complement), max(number, complement))) logging.debug(f\\"Pair found: ({min(number, complement)}, {max(number, complement)})\\") for pair in pairs: print(pair)"},{"question":"You need to implement a Python function `transform_and_augment_image_data` to load and augment image data for machine learning purposes using the `PIL` and `numpy` libraries. The data preparation involves resizing images, converting to grayscale, normalizing pixel values, and generating synthetic data through random rotations. # Instructions: 1. **Load Data:** - Read image files from the directory specified by the parameter `image_dir`, where each image has the format `image_1.png`, `image_2.png`, ..., `image_N.png` and `N` is the total number of images. - Use `os.listdir` to obtain the list of image filenames. 2. **Data Preparation:** - For each image: - Open the image using `PIL.Image`. - Resize the image to `64x64` pixels. - Convert the image to grayscale. - Convert the image to a numpy array with pixel values normalized to the range `[0, 1]`. - Store the resulting array in a list named `data`. 3. **Data Augmentation:** - Generate augmented data by randomly rotating each image by an angle between -30 and 30 degrees. - Store the rotated images in the list `augmented_data`. 4. **Return Data:** - Concatenate the original `data` and `augmented_data` lists into a single numpy array and return it. # Function Signature: ```python import os import numpy as np from PIL import Image def transform_and_augment_image_data(image_dir): pass # Your implementation here ``` # Requirements: - Use `PIL.Image.open` to open image files. - Use `PIL.Image.resize` to resize images. - Use `PIL.ImageOps.grayscale` to convert images to grayscale. - Use `numpy.asarray` to convert images to numpy arrays. - Use `numpy.concatenate` to concatenate arrays. - Use `numpy.random.uniform` to generate random rotation angles. - Use `PIL.Image.rotate` to rotate images. # Example: Suppose the directory `images/` contains 100 images named `image_1.png`, `image_2.png`, ..., `image_100.png`. After running the function, you should get a numpy array containing 200 images: the original 100 images and 100 randomly rotated images, all resized to `64x64` pixels, converted to grayscale, and normalized to pixel values in the range `[0, 1]`.","solution":"import os import numpy as np from PIL import Image, ImageOps def transform_and_augment_image_data(image_dir): data = [] augmented_data = [] # Load and process images image_files = [f for f in os.listdir(image_dir) if f.endswith(\'.png\')] for image_file in image_files: image_path = os.path.join(image_dir, image_file) with Image.open(image_path) as img: img = img.resize((64, 64)) img = ImageOps.grayscale(img) img_array = np.asarray(img) / 255.0 data.append(img_array) # Rotate image randomly angle = np.random.uniform(-30, 30) img_rotated = img.rotate(angle) img_rotated_array = np.asarray(img_rotated) / 255.0 augmented_data.append(img_rotated_array) data = np.array(data) augmented_data = np.array(augmented_data) combined_data = np.concatenate((data, augmented_data), axis=0) return combined_data"},{"question":"You are required to write a function that generates and validates an email address based on given criteria. The function should take two parameters: 1. `username`: The username part of the email, which must only contain alphanumeric characters and underscores. It should be between 4 and 25 characters long. 2. `domain`: The domain name of the email, which must only contain lowercase letters, hyphens, and periods. It should end with a valid top-level domain (TLD) from a specified list. Additionally, the top-level domain must be one of the following: `[\'com\', \'org\', \'net\', \'edu\']`. Your function should: - Validate the `username` and `domain` according to the criteria. - Construct the email address if both `username` and `domain` are valid. - Return the generated email address if valid, otherwise return an error message indicating the cause of invalidity. **Function Signature:** ```python def generate_and_validate_email(username, domain): # Your implementation here ``` # Example Usage: ```python username = \\"user_name123\\" domain = \\"example.com\\" print(generate_and_validate_email(username, domain)) ``` # Expected Output: If the `username` and `domain` are valid: ```python \\"user_name123@example.com\\" ``` If the `username` is invalid (e.g., too short): ```python \\"Error: Username must be between 4 and 25 characters long and contain only alphanumeric characters and underscores.\\" ``` If the `domain` is invalid (e.g., invalid TLD): ```python \\"Error: Domain must only contain lowercase letters, hyphens, periods, and end with a valid TLD: com, org, net, edu.\\" ```","solution":"import re def generate_and_validate_email(username, domain): Generate and validate an email address based on given criteria. Parameters: username (str): The username part of the email. domain (str): The domain name of the email. Returns: str: The generated email address if valid, otherwise an error message. # Username validation if not (4 <= len(username) <= 25): return \\"Error: Username must be between 4 and 25 characters long and contain only alphanumeric characters and underscores.\\" if not re.match(r\'^[w_]+\', username): return \\"Error: Username must be between 4 and 25 characters long and contain only alphanumeric characters and underscores.\\" # Domain validation valid_tlds = [\'com\', \'org\', \'net\', \'edu\'] domain_parts = domain.split(\'.\') if len(domain_parts) < 2: return \\"Error: Domain must only contain lowercase letters, hyphens, periods, and end with a valid TLD: com, org, net, edu.\\" tld = domain_parts[-1] if tld not in valid_tlds: return \\"Error: Domain must only contain lowercase letters, hyphens, periods, and end with a valid TLD: com, org, net, edu.\\" if not re.match(r\'^[a-z0-9.-]+\', domain): return \\"Error: Domain must only contain lowercase letters, hyphens, periods, and end with a valid TLD: com, org, net, edu.\\" # Email construction email_address = f\\"{username}@{domain}\\" return email_address"},{"question":"You are tasked with writing a Python function named `interleave_lists` that takes two lists of integers and returns a new list with elements of the given lists interleaved. **Function Signature:** ```python def interleave_lists(list1, list2): pass ``` **Requirements:** 1. If the lists are of different lengths, the function should continue interleaving until one list is exhausted and append the remaining elements of the longer list to the result. 2. You must use the built-in `zip` function and handle the remaining elements using `itertools.chain` if necessary. **Objective:** The function `interleave_lists` should return a new list where the elements are interleaved from `list1` and `list2`, maintaining their relative order. If one list is longer, its remaining elements should be appended to the end of the resulting list. **Examples:** ```python print(interleave_lists([1, 2, 3], [4, 5, 6])) # Output: [1, 4, 2, 5, 3, 6] print(interleave_lists([1, 2], [3, 4, 5, 6])) # Output: [1, 3, 2, 4, 5, 6] ``` Provide the implementation of `interleave_lists` following these constraints.","solution":"from itertools import chain def interleave_lists(list1, list2): Returns a new list with elements of list1 and list2 interleaved. If the lists are of different lengths, the function appends the remaining elements of the longer list to the result. interleaved = list(chain.from_iterable(zip(list1, list2))) # Find the remaining elements from the longer list (if any) if len(list1) > len(list2): interleaved.extend(list1[len(list2):]) else: interleaved.extend(list2[len(list1):]) return interleaved"},{"question":"In this problem, you are asked to write a Python function that simulates a basic queue system. Your task is to create a queue class and implement methods to add and remove items from the queue, check if the queue is empty, and view the item at the front of the queue without removing it. Your class will be named `SimpleQueue` and should include the following methods: 1. `enqueue(self, item)`: Adds an item to the end of the queue. 2. `dequeue(self)`: Removes and returns the item from the front of the queue. If the queue is empty, it should return `None`. 3. `is_empty(self)`: Returns `True` if the queue is empty, otherwise returns `False`. 4. `peek(self)`: Returns the item at the front of the queue without removing it. If the queue is empty, it should return `None`. The following example demonstrates the expected behavior of your queue implementation: ```python q = SimpleQueue() q.enqueue(1) q.enqueue(2) print(q.is_empty()) # Output: False print(q.peek()) # Output: 1 print(q.dequeue()) # Output: 1 print(q.dequeue()) # Output: 2 print(q.dequeue()) # Output: None print(q.is_empty()) # Output: True ``` Ensure your `SimpleQueue` class correctly implements the described methods and adheres to typical queue behavior. You may use any internal data structure to maintain the queue\'s state, but your chosen structure should support efficient enqueue and dequeue operations.","solution":"class SimpleQueue: def __init__(self): self.queue = [] def enqueue(self, item): Adds an item to the end of the queue. self.queue.append(item) def dequeue(self): Removes and returns the item from the front of the queue. If the queue is empty, returns None. if self.is_empty(): return None return self.queue.pop(0) def is_empty(self): Returns True if the queue is empty, otherwise returns False. return len(self.queue) == 0 def peek(self): Returns the item at the front of the queue without removing it. If the queue is empty, returns None. if self.is_empty(): return None return self.queue[0]"},{"question":"Write a Python function that takes a list of strings representing file paths, filters out files that do not exist or are not readable, and then returns a dictionary where each key is the file path and the value is the number of lines in that file. The function should ensure that it handles any potential exceptions that might occur during file access. The function should output: ``` dict: A dictionary where each key is a valid file path from the input list, and the value is the total number of lines in that file. ``` You should write self-contained code starting with: ``` def count_lines_in_files(file_paths): ```","solution":"import os def count_lines_in_files(file_paths): Takes a list of file paths and returns a dictionary with the number of lines in each file. Args: file_paths (list): A list of strings representing file paths. Returns: dict: A dictionary where each key is a valid file path from the input list, and the value is the total number of lines in that file. result = {} for file_path in file_paths: if os.path.isfile(file_path) and os.access(file_path, os.R_OK): try: with open(file_path, \'r\') as file: num_lines = sum(1 for line in file) result[file_path] = num_lines except Exception as e: # Handle the exception if necessary, for now just continue continue return result"},{"question":"You need to implement a function called `find_optimal_path` that will find the shortest path in a grid. This function will utilize the Breadth-First Search (BFS) algorithm to determine the shortest path from the top-left to the bottom-right corner of a grid containing obstacles. Here is what you need to do: 1. **Function Signature**: ```python def find_optimal_path(grid): ``` 2. **Parameters**: - `grid`: A 2D list of integers where `0` represents an open path and `1` represents an obstacle. 3. **Output**: - The function should return an integer representing the length of the shortest path from the top-left to the bottom-right corner. If no path exists, return `-1`. 4. **Tasks**: - Implement the BFS algorithm to find the shortest path in an unweighted grid. - Consider valid moves to be up, down, left, and right. - Ensure that you avoid revisiting cells and handle edge cases like the absence of a valid path. 5. **Helper Function**: - You may define any helper functions that you need within `find_optimal_path`. Here is an example input and output: ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] path_length = find_optimal_path(grid) # Output: 9 ``` #","solution":"from collections import deque def find_optimal_path(grid): Finds the shortest path in the grid from top-left to bottom-right using BFS. Parameters: grid (List[List[int]]): 2D list of integers where 0 is an open path and 1 is an obstacle. Returns: int: The length of the shortest path from top-left to bottom-right corner. Returns -1 if no path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) visited = set() visited.add((0, 0)) while queue: x, y, distance = queue.popleft() if x == rows - 1 and y == cols - 1: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, distance + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given a sales dataset in CSV format for a retail company, containing columns such as `Date`, `Product ID`, `Product Name`, `Quantity Sold`, and `Revenue`. Write a Python function, `sales_summary(filename: str, start_date: str, end_date: str) -> pd.DataFrame`, that: 1. Reads data from the CSV file specified by the `filename`. 2. Parses the `Date` column to date format. 3. Filters the DataFrame to include only rows where the `Date` falls between `start_date` and `end_date` (inclusive). 4. Groups the filtered DataFrame by `Product ID` and `Product Name`. 5. Calculates the total `Quantity Sold` and total `Revenue` for each product. 6. Sorts the resulting DataFrame by `Revenue` in descending order. The parameters are: - `filename` (str): The name of the CSV file to read. - `start_date` (str): The start date of the date range to filter by, in the format `\\"YYYY-MM-DD\\"`. - `end_date` (str): The end date of the date range to filter by, in the format `\\"YYYY-MM-DD\\"`. Return: - `pd.DataFrame`: A DataFrame containing columns `Product ID`, `Product Name`, `Total Quantity Sold`, and `Total Revenue`, sorted by `Total Revenue` in descending order. Use the `pandas.read_csv` function to load data, `pandas.to_datetime` function to convert date columns, and `pandas.DataFrame.groupby` method to group and summarize data.","solution":"import pandas as pd def sales_summary(filename: str, start_date: str, end_date: str) -> pd.DataFrame: # Load the CSV file into a DataFrame df = pd.read_csv(filename) # Convert the `Date` column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter the DataFrame for the specified date range mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) filtered_df = df[mask] # Group by `Product ID` and `Product Name`, and calculate total quantities and revenues summary_df = filtered_df.groupby([\'Product ID\', \'Product Name\']).agg( Total_Quantity_Sold=pd.NamedAgg(column=\'Quantity Sold\', aggfunc=\'sum\'), Total_Revenue=pd.NamedAgg(column=\'Revenue\', aggfunc=\'sum\') ).reset_index() # Sort by `Total Revenue` in descending order summary_df = summary_df.sort_values(by=\'Total_Revenue\', ascending=False) return summary_df"},{"question":"You are tasked with writing a function called `normalize_scores` which takes a list of numerical scores and returns a new list where each score is normalized to a scale of 0 to 1. Normalization is done using the min-max normalization method, which is defined as: [ text{normalized_value} = frac{x - min(x)}{max(x) - min(x)} ] where (x) is an element in the list. To solve this problem, you must use the following NumPy functions: 1. `numpy.min` 2. `numpy.max` 3. `numpy.array` **Function Signature:** ```python def normalize_scores(scores: list) -> np.ndarray: pass ``` **Input:** - `scores`: A list of numerical values (e.g., `[50, 80, 90, 70, 60]`). **Output:** - A NumPy array where each element is the normalized score corresponding to the elements in the input list (e.g., `np.array([0.0, 0.75, 1.0, 0.5, 0.25])`). **Examples:** ```python normalize_scores([50, 80, 90, 70, 60]) # Output: array([0. , 0.75, 1. , 0.5 , 0.25]) normalize_scores([10, 20, 30, 40, 50]) # Output: array([0. , 0.25, 0.5 , 0.75, 1. ]) normalize_scores([100, 100, 100]) # Output: array([0., 0., 0.]) (Note: If min and max values are the same, all normalized values will be zero.) ``` Make sure to implement the function using the specified NumPy functions (`numpy.min`, `numpy.max`, `numpy.array`). Do not use loops or list comprehensions for element-wise operations.","solution":"import numpy as np def normalize_scores(scores: list) -> np.ndarray: Normalizes the input scores list using min-max normalization to a scale of 0 to 1. Args: - scores: List of numerical scores. Returns: - A NumPy array with normalized scores. if len(scores) == 0: return np.array([]) scores_array = np.array(scores) min_score = np.min(scores_array) max_score = np.max(scores_array) # Prevent division by zero if all scores are the same if min_score == max_score: return np.zeros(len(scores)) normalized_scores = (scores_array - min_score) / (max_score - min_score) return normalized_scores"},{"question":"**Title:** Analyzing Weather Data for Monthly Averages **Description:** In this problem, you are required to analyze weather data and calculate monthly average temperatures for a given year using the `pandas` library. The function you need to write is named `calculate_monthly_averages`. The input to the function will be: - `data`: A pandas DataFrame containing two columns: `date` and `temperature`. - `date`: A string in the format \'YYYY-MM-DD\' representing the date. - `temperature`: A float representing the temperature on that date. The function should perform the following tasks: 1. Convert the `date` column to a pandas datetime object. 2. Group the data by month. 3. Calculate the average temperature for each month. 4. Return a new pandas DataFrame with two columns: `month` and `average_temperature`. The `month` column should be in the format \'YYYY-MM\' (e.g., \'2023-07\'). **Function Signature:** ```python import pandas as pd def calculate_monthly_averages(data: pd.DataFrame) -> pd.DataFrame: # Your code here ``` **Example:** Input: ```python data = pd.DataFrame({ \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-02-01\', \'2023-02-02\', \'2023-02-03\'], \'temperature\': [30.5, 32.0, 35.3, 33.1, 34.8] }) ``` Output: ```python month average_temperature 0 2023-01 31.25 1 2023-02 34.40 ``` **Additional Information:** - Assume the input DataFrame `data` always contains valid dates and temperatures for a single year. - Ensure the resulting DataFrame is sorted by month in ascending order.","solution":"import pandas as pd def calculate_monthly_averages(data: pd.DataFrame) -> pd.DataFrame: Calculate the average temperature for each month from the provided weather data. Parameters: data (pd.DataFrame): DataFrame containing weather data with \'date\' and \'temperature\' columns. Returns: pd.DataFrame: DataFrame with \'month\' and \'average_temperature\' columns, sorted by month. # Convert date column to datetime data[\'date\'] = pd.to_datetime(data[\'date\']) # Extract year-month part for grouping data[\'month\'] = data[\'date\'].dt.strftime(\'%Y-%m\') # Calculate average temperature for each month monthly_avg = data.groupby(\'month\')[\'temperature\'].mean().reset_index() # Rename the columns monthly_avg.columns = [\'month\', \'average_temperature\'] return monthly_avg.sort_values(\'month\').reset_index(drop=True)"},{"question":"Your task is to write a Python function using the `numpy` library to compute the gradient of a quadratic function (f(t) = a cdot t^2 + b cdot t + c) at a given point (t). Specifically, you should implement the following function: ```python def compute_quadratic_gradient(a, b, c, t): Computes the gradient of the quadratic function f(t) = a * t^2 + b * t + c at a given point t. Parameters ---------- a : float Coefficient of t^2. b : float Coefficient of t. c : float Constant term. t : float or array_like The point(s) at which the gradient is to be computed. Returns ------- ndarray The computed gradient(s) for the given point(s) `t`. ``` # Detailed Explanation: 1. **Inputs:** - `a`: The coefficient of ( t^2 ). - `b`: The coefficient of ( t ). - `c`: The constant term (although it does not affect the gradient). - `t`: The point or array-like input of points where the gradient needs to be computed. 2. **Output:** - An ndarray containing the gradient values for each value of `t`. 3. **Behavior:** - The gradient of the quadratic function ( f(t) ) with respect to ( t ) is: [ f\'(t) = 2 cdot a cdot t + b ] - Compute the gradient using the given coefficients ( a ) and ( b ), and the input point(s) ( t ). You must use the `numpy.asarray` function in your implementation to handle array-like inputs for `t`.","solution":"import numpy as np def compute_quadratic_gradient(a, b, c, t): Computes the gradient of the quadratic function f(t) = a * t^2 + b * t + c at a given point t. Parameters ---------- a : float Coefficient of t^2. b : float Coefficient of t. c : float Constant term. t : float or array_like The point(s) at which the gradient is to be computed. Returns ------- ndarray The computed gradient(s) for the given point(s) `t`. t = np.asarray(t) gradient = 2 * a * t + b return gradient"},{"question":"You are tasked with creating a function that processes a text file containing numbers and calculates the sum of all even numbers in the file. This task is designed to help you get comfortable with reading files, parsing strings, and implementing basic logic in Python. # Function Specification Name: `sum_even_numbers_in_file` # Parameters: - `filename` (str): The name of the file to be processed. # Description: 1. The function will open the file with the provided filename in read mode. 2. It will read all lines of the file. Each line is expected to contain a single integer. 3. The function will calculate the sum of all even integers from the file. 4. Finally, it will return the resulting sum. # Constraints: - The file specified by `filename` should exist and be readable. - Each line of the file should contain a valid integer number. # Example usage: Assuming the content of `numbers.txt` is: ``` 1 2 3 4 5 6 ``` Calling `sum_even_numbers_in_file(\\"numbers.txt\\")` should return: ``` 12 ``` # Important Note: Make sure to handle potential exceptions that may arise from file operations or parsing integers.","solution":"def sum_even_numbers_in_file(filename): Reads a file containing integers, one per line, and calculates the sum of all even numbers. Parameters: filename (str): The name of the file to be processed. Returns: int: The sum of all even integers in the file. try: with open(filename, \'r\') as file: sum_even = 0 for line in file: number = int(line.strip()) if number % 2 == 0: sum_even += number return sum_even except (IOError, ValueError) as e: print(f\\"Error processing the file: {e}\\") return 0"},{"question":"You are tasked with designing a function `simplify_fractions(fractions)` which takes a single argument: - `fractions`: a list of tuples, where each tuple contains two integers representing the numerator and denominator of a fraction. Your function should: 1. Simplify each fraction in the list. 2. Return a list of tuples representing the simplified fractions. 3. If the denominator of a fraction is zero, the function should return \\"Undefined\\" for that fraction. To simplify a fraction, divide the numerator and the denominator by their greatest common divisor (GCD). # Example If `fractions = [(8, 12), (3, 7), (5, 0), (20, 5)]`, the function should produce: ``` [(2, 3), (3, 7), \\"Undefined\\", (4, 1)] ``` # Notes - You can use the `math.gcd` function to find the GCD of two numbers. - A fraction is undefined if its denominator is zero. - Ensure that the final results are in the form of tuples with positive denominators.","solution":"import math def simplify_fractions(fractions): Simplifies a list of fractions represented by tuples (numerator, denominator). Args: fractions (list of tuples): List of tuples where each tuple contains two integers (numerator, denominator) Returns: list: A list of tuples representing the simplified fractions, or \\"Undefined\\" for fractions with zero denominators. simplified = [] for numerator, denominator in fractions: if denominator == 0: simplified.append(\\"Undefined\\") else: gcd = math.gcd(numerator, denominator) simplified_fraction = (numerator // gcd, denominator // gcd) if simplified_fraction[1] < 0: # Ensure positive denominator simplified_fraction = (-simplified_fraction[0], -simplified_fraction[1]) simplified.append(simplified_fraction) return simplified"},{"question":"Create a function that parses a given CSV file containing employee details (Name, Age, Department, Salary) and calculates the average salary for each department. The function should return a dictionary where keys are department names and values are the corresponding average salaries. Properly handle file-related exceptions and log errors to a file if any exception occurs. The function should return: dict: A dictionary where keys are department names and values are the average salaries. You should write self-contained code starting with: ``` import csv import os def calculate_average_salary(file_path): ```","solution":"import csv import os import logging # Setup logging logging.basicConfig(filename=\'errors.log\', level=logging.ERROR) def calculate_average_salary(file_path): Parses a given CSV file and calculates the average salary for each department. Args: - file_path (str): The path to the CSV file containing employee details. Returns: - dict: A dictionary where keys are department names and values are the average salaries. if not os.path.exists(file_path): logging.error(f\\"File not found: {file_path}\\") return {} department_salaries = {} department_counts = {} try: # Read the CSV file with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: department = row[\'Department\'] salary = float(row[\'Salary\']) # Updating total salary and count for the department if department in department_salaries: department_salaries[department] += salary department_counts[department] += 1 else: department_salaries[department] = salary department_counts[department] = 1 # Calculating average salary for each department average_salaries = {dept: department_salaries[dept] / department_counts[dept] for dept in department_salaries} return average_salaries except Exception as e: logging.error(f\\"An error occurred: {str(e)}\\") return {}"},{"question":"**Implement a function to simulate a simple version of the \\"towers of Hanoi\\" problem in Python, using recursion to solve the problem. The function should move the disks from the source peg to the destination peg using an auxiliary peg.** # Function Requirements - Name: `hanoi` - Parameters: - `num_disks`: An integer representing the number of disks to move. - `source`: A string representing the name of the source peg. - `auxiliary`: A string representing the name of the auxiliary peg. - `destination`: A string representing the name of the destination peg. - Returns: A list of tuples, where each tuple represents a move. Each tuple contains two strings: the name of the peg from which a disk is moved and the name of the peg to which the disk is moved. # Problem Constraints 1. Initially, all disks are on the source peg. 2. Disks are moved one at a time. 3. A larger disk can never be placed on top of a smaller disk. 4. Use a recursive approach to solve the problem. # Example ```python hanoi(2, \'A\', \'B\', \'C\') ``` This should return a list of moves: ```python [(\'A\', \'C\'), (\'A\', \'B\'), (\'C\', \'B\')] ``` Which represents moving the disks from peg \'A\' to peg \'C\', then from \'A\' to \'B\', and finally from \'C\' to \'B\'. **Requirements**: The function must use recursion to implement the solution, and handle different numbers of disks correctly by generating the appropriate moves following the rules of the Towers of Hanoi problem.","solution":"def hanoi(num_disks, source, auxiliary, destination): Solves the Towers of Hanoi problem. Parameters: num_disks (int): The number of disks to move. source (str): The name of the source peg. auxiliary (str): The name of the auxiliary peg. destination (str): The name of the destination peg. Returns: moves (list of tuples): A list of moves, where each move is represented as a tuple (from_peg, to_peg). moves = [] def solve(n, src, aux, dest): if n == 1: moves.append((src, dest)) else: solve(n-1, src, dest, aux) moves.append((src, dest)) solve(n-1, aux, src, dest) solve(num_disks, source, auxiliary, destination) return moves"},{"question":"** Your task is to create a function that simulates a simple match-making algorithm for a speed-dating event. The goal is to ensure that everyone at the event gets a chance to meet multiple partners without any repetition or missing out. The given function `matchmaking` should take two parameters: 1. `participants`: a list of strings where each string is a name representing a participant. 2. `rounds`: an integer specifying the number of rounds of meetings. Each round, the participants should be paired up differently. If there are an odd number of participants, one person will sit out each round, and no one should sit out more than once if possible. The function should return a dictionary where the keys are round numbers (starting from 1) and the values are lists of tuples, each containing two participants\' names representing a pair. If there\'s an odd number of participants, one entry in the list should be a single name (the person sitting out). Here is an example of the expected function signature: ```python def matchmaking(participants, rounds): pass ``` Example usage: ```python participants = [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\'] rounds = 3 print(matchmaking(participants, rounds)) ``` Example output: ```python { 1: [(\'Alice\', \'Bob\'), (\'Charlie\', \'David\'), \'Eve\'], 2: [(\'Alice\', \'Charlie\'), (\'Bob\', \'Eve\'), \'David\'], 3: [(\'Alice\', \'David\'), (\'Bob\', \'Charlie\'), \'Eve\'] } ``` Note: The order of pairs within each round does not matter, nor does the order of rounds themselves.","solution":"def matchmaking(participants, rounds): Simulates a simple match-making algorithm for a speed-dating event. Args: participants (list): A list of participant names. rounds (int): The number of rounds of meetings. Returns: dict: A dictionary where keys are round numbers and values are lists of pairs of participants. If an odd number of participants, one participant will sit out each round. from collections import deque pairs_by_round = {} num_participants = len(participants) participants_deque = deque(participants) for round_num in range(1, rounds + 1): pairs = [] round_participants_deque = participants_deque.copy() if num_participants % 2 != 0: # If odd number of participants, the last one will sit out sitter = round_participants_deque.pop() else: sitter = None while len(round_participants_deque) > 1: p1 = round_participants_deque.popleft() p2 = round_participants_deque.popleft() pairs.append((p1, p2)) if sitter: pairs.append(sitter) pairs_by_round[round_num] = pairs # Rotate the deque to get new pairings in the next round participants_deque.rotate(-1) return pairs_by_round"},{"question":"You are required to implement a Python function `merge_sorted_arrays` that takes two sorted lists of integers and merges them into a single sorted list. The function should handle duplicates and maintain the order of elements as they appear in the input lists. Your function should take the following parameters: - `list1`: a list of integers, which is already sorted in ascending order. - `list2`: a list of integers, which is also sorted in ascending order. The function should return: - `merged_list`: a single list of integers, containing all elements from both input lists, sorted in ascending order. You **must** implement the merging process without using built-in Python functions like `sorted` or in-place sort methods. Here is your prototype: ```python def merge_sorted_arrays(list1, list2): # Your implementation here pass ``` Example: ```python list1 = [1, 3, 5, 7] list2 = [2, 3, 6, 8] # merge_sorted_arrays(list1, list2) should return [1, 2, 3, 3, 5, 6, 7, 8] ```","solution":"def merge_sorted_arrays(list1, list2): Merges two sorted lists into a single sorted list. :param list1: List of integers sorted in ascending order. :param list2: List of integers sorted in ascending order. :return: Merged list of integers sorted in ascending order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, add them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, add them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that takes a DataFrame with columns \'name\', \'date\', \'start_time\', and \'end_time\' and calculates the total hours worked for each individual within a specified date range. The \'start_time\' and \'end_time\' columns are strings in the format \'HH:MM\', and the \'date\' column is in \'YYYY-MM-DD\' format. If the date range specified does not intersect with any dates in the DataFrame, the function should return an empty dictionary. The function should raise a ValueError if any of the required columns are missing from the DataFrame. The function should output: dict: A dictionary where keys are the individual\'s names and values are their respective total hours worked within the given date range. You should write self-contained code starting with: ``` import pandas as pd from datetime import datetime def calculate_hours_worked(df, start_date, end_date): ```","solution":"import pandas as pd from datetime import datetime def calculate_hours_worked(df, start_date, end_date): Calculate the total hours worked for each individual within a specified date range. Args: df (pd.DataFrame): DataFrame with columns \'name\', \'date\', \'start_time\', and \'end_time\'. start_date (str): The start date in \'YYYY-MM-DD\' format. end_date (str): The end date in \'YYYY-MM-DD\' format. Returns: dict: A dictionary where keys are the individual\'s names and values are their respective total hours worked. required_columns = {\'name\', \'date\', \'start_time\', \'end_time\'} if not required_columns.issubset(df.columns): raise ValueError(f\\"DataFrame is missing required columns: {required_columns - set(df.columns)}\\") # Convert date columns to datetime df[\'date\'] = pd.to_datetime(df[\'date\']) start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') # Filter rows within the specified date range mask = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) filtered_df = df[mask] if filtered_df.empty: return {} # Calculate hours for each row def calc_hours(row): start = datetime.strptime(row[\'start_time\'], \'%H:%M\') end = datetime.strptime(row[\'end_time\'], \'%H:%M\') return (end - start).seconds / 3600 filtered_df[\'hours_worked\'] = filtered_df.apply(calc_hours, axis=1) # Aggregate total hours worked by name result = filtered_df.groupby(\'name\')[\'hours_worked\'].sum().to_dict() return result"},{"question":"Write a function that takes a list of strings and a delimiter character. The function should concatenate the strings in the list into a single string, but each substring should appear in reverse order. The final concatenated string should use the provided delimiter to separate the elements. If the delimiter is not provided, use a comma \',\' as a default delimiter. Ensure the function handles edge cases such as an empty list. The function should output the concatenated string with reversed substrings. You should write self-contained code starting with: ``` def reverse_concatenate(strings, delimiter=\',\'): ```","solution":"def reverse_concatenate(strings, delimiter=\',\'): Takes a list of strings and a delimiter character. Concatenates the strings in the list into a single string with each substring reversed and separated by the provided delimiter. :param strings: A list of strings to concatenate. :param delimiter: A delimiter to separate the substrings. Default is \',\'. :return: A concatenated string with each substring reversed. reversed_strings = [s[::-1] for s in strings] return delimiter.join(reversed_strings)"},{"question":"You are tasked with writing a function called `generate_unique_pairs` to create unique pairs of elements from a given list of numbers. The key requirements are: 1. **Function Signature:** `def generate_unique_pairs(numbers):` 2. **Parameters:** - `numbers`: A list of integers provided by the user. 3. **Functionality:** - The function should return a list of tuples, where each tuple contains a unique pair of distinct elements from the input list. - Ensure that each pair `(a, b)` is unique, meaning `(a, b)` and `(b, a)` should be considered as the same pair and should not both be included in the result. For instance: ```python generate_unique_pairs([1, 2, 3]) # This should return [(1, 2), (1, 3), (2, 3)] or in some other order. generate_unique_pairs([4, 5, 5]) # This should return [(4, 5)] because both 5s are the same element and cannot form distinct pairs. ``` Implement the function `generate_unique_pairs` ensuring that it handles edge cases such as empty lists or lists with only one element gracefully. Your implementation should also avoid creating duplicate pairs like (1, 2) and (2, 1). Below is a sample code snippet to start with: ```python def generate_unique_pairs(numbers): # Implement the function here pass # Example usage: # pairs = generate_unique_pairs([1, 2, 3]) # print(pairs) ```","solution":"def generate_unique_pairs(numbers): Returns a list of unique pairs of distinct elements from the input list. Each pair (a, b) is unique and considers (a, b) and (b, a) as the same pair. unique_pairs = [] n = len(numbers) # Use a set to track pairs to ensure uniqueness pairs_set = set() for i in range(n): for j in range(i + 1, n): if numbers[i] != numbers[j]: pair = (numbers[i], numbers[j]) if numbers[i] < numbers[j] else (numbers[j], numbers[i]) if pair not in pairs_set: pairs_set.add(pair) unique_pairs.append(pair) return unique_pairs"},{"question":"You are tasked with writing a Python function that creates a 2D array representing a checkerboard pattern. A checkerboard pattern is widely used in various fields, including computer graphics, and it consists of alternating squares of two different colors. The pattern is defined by several parameters, including the number of rows and columns in each square and the total size of the checkerboard. Your function should be named `checkerboard_pattern` and should use the `numpy` library to create the 2D array. The function\'s parameters are specified below: - `square_size` (int): Size of each square in the checkerboard pattern (height and width of one square). - `num_rows` (int): Number of rows of squares in the checkerboard pattern. - `num_cols` (int): Number of columns of squares in the checkerboard pattern. - `value1` (float): Value to use for the first color in the checkerboard. - `value2` (float): Value to use for the second color in the checkerboard. The function should return a 2D NumPy array representing the checkerboard pattern with alternating squares of `value1` and `value2`. ```python def checkerboard_pattern(square_size=10, num_rows=8, num_cols=8, value1=0.0, value2=1.0): pass ``` Ensure that the implementation successfully alternates between the two specified values to create the checkerboard pattern correctly.","solution":"import numpy as np def checkerboard_pattern(square_size=10, num_rows=8, num_cols=8, value1=0.0, value2=1.0): Creates a 2D array representing a checkerboard pattern. :param square_size: int, size of each square in the checkerboard pattern (height and width of one square). :param num_rows: int, number of rows of squares in the checkerboard pattern. :param num_cols: int, number of columns of squares in the checkerboard pattern. :param value1: float, value to use for the first color in the checkerboard. :param value2: float, value to use for the second color in the checkerboard. :return: 2D NumPy array representing the checkerboard pattern. row_pattern = np.hstack([np.full((square_size, square_size), value1 if (i % 2 == 0) else value2) for i in range(num_cols)]) checkerboard = np.vstack([row_pattern if (i % 2 == 0) else np.roll(row_pattern, square_size, axis=1) for i in range(num_rows)]) return checkerboard"},{"question":"Write a program that reads a text file containing a list of numbers (one number per line), calculates the square of each number, and outputs a new file with these squared numbers while preserving the order. The function should: 1. Read from the input file path provided as an argument. 2. Write to the output file path provided as another argument. Ensure proper handling of exceptions, such as file not found or unreadable files. The function should start with: ``` def square_numbers(input_file_path, output_file_path): ```","solution":"def square_numbers(input_file_path, output_file_path): Reads a text file containing a list of numbers (one per line), calculates the square of each number, and writes the results to a new file, preserving the order. try: with open(input_file_path, \'r\') as infile: numbers = infile.readlines() squared_numbers = [] for number in numbers: try: num = float(number.strip()) squared_numbers.append(num ** 2) except ValueError: # If the number is not valid, skip it or handle it as needed pass with open(output_file_path, \'w\') as outfile: for squared in squared_numbers: outfile.write(f\\"{squared}n\\") except FileNotFoundError: print(f\\"Error: The file {input_file_path} was not found.\\") except IOError: print(f\\"Error: The file {input_file_path} could not be read.\\")"},{"question":"You are required to design a function that takes an arithmetic expression in infix notation (standard notation) and converts it to postfix notation (Reverse Polish Notation or RPN) using the Shunting Yard algorithm. The postfix expression can then be evaluated to get the result. Your function should be named `evaluate_expression` and accept the following parameter: 1. `expression` - A string representing a valid arithmetic expression. This expression can contain positive integers and the following operators: `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), and parentheses `(` and `)` to denote precedence. The function should perform the following: - Convert the infix expression to postfix notation using the Shunting Yard algorithm. - Evaluate the postfix expression to return the result as a float. Assume that the input expression is valid and the division is a float division. Function Signature ```python def evaluate_expression(expression): # Your implementation here ``` **Example:** ```python print(evaluate_expression(\\"3 + 4 * 2 / (1 - 5)\\")) # should return 1.0 print(evaluate_expression(\\"10 + 3 * 5 / (16 - 4)\\")) # should return 11.25 ```","solution":"def evaluate_expression(expression): def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] def has_higher_precedence(op1, op2): return precedence[op1] >= precedence[op2] i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = char while i + 1 < len(expression) and expression[i + 1].isdigit(): num += expression[i + 1] i += 1 output.append(num) elif char in \'+-*/\': while (operators and operators[-1] != \'(\' and has_higher_precedence(operators[-1], char)): output.append(operators.pop()) operators.append(char) elif char == \'(\': operators.append(char) elif char == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # remove the \'(\' from the stack i += 1 while operators: output.append(operators.pop()) return output def evaluate_postfix(postfix): stack = [] for token in postfix: if token.isdigit(): stack.append(float(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a / b stack.append(result) return stack[0] postfix = infix_to_postfix(expression) return evaluate_postfix(postfix) # Example Outputs print(evaluate_expression(\\"3 + 4 * 2 / (1 - 5)\\")) # should return 1.0 print(evaluate_expression(\\"10 + 3 * 5 / (16 - 4)\\")) # should return 11.25"},{"question":"Write a function that takes as input a list of strings and a target word. The function should count the number of times each string in the list appears as a substring within the target word and return a dictionary with the strings as keys and their respective counts as values. If a string never appears as a substring, it should not be included in the dictionary. The function should output: dict: A dictionary where the keys are the strings from the input list and the values are their respective counts of appearances as substrings in the target word. You should write self-contained code starting with: ``` def substring_counts(str_list, target): ```","solution":"def substring_counts(str_list, target): Count the number of times each string in the list appears as a substring in the target word. Args: str_list (list of str): List of strings to search for. target (str): The word in which to search for substrings. Returns: dict: Dictionary with strings from str_list as keys and their counts as values. counts = {} for string in str_list: count = target.count(string) if count > 0: counts[string] = count return counts"},{"question":"You are asked to design a Python function named `generate_prime_factors()` that determines the prime factors of a given positive integer. A prime factor is a factor that is a prime number. Your task is to return a sorted list of all prime factors of the input number. Here is the breakdown of what the function should do: 1. Fetch the value of the input integer. 2. Determine the prime factors of this integer. 3. Return a sorted list of the unique prime factors. To simulate fetching the input integer, define a helper function `get_input_integer()` that returns an integer. Similarly, define a helper function `return_prime_factors(prime_factors)` that prints the sorted list of prime factors. # Helper Functions - `get_input_integer()`: Returns an integer value representing the input number. - `return_prime_factors(prime_factors)`: Takes a single argument `prime_factors`, which is a sorted list of prime factors, and prints it. # Example: ```python # Simulated helper function output: # get_input_integer() returns: 56 # Expected prime factors calculation: # Prime factors of 56 = [2, 7] # return_prime_factors([2, 7]) would output: # [2, 7] ``` # Requirements: - Name your function as `generate_prime_factors`. - You **must** ensure the returned list only contains unique prime factors and is sorted in ascending order. Implement and complete this function to meet the described behavior.","solution":"def get_input_integer(): Simulates fetching an input integer. Replace with actual input mechanism if needed. return 56 # Example input; replace with actual input retrieval code as needed def return_prime_factors(prime_factors): Outputs the sorted list of prime factors. print(prime_factors) def generate_prime_factors(): Determines the prime factors of a given positive integer and returns a sorted list of unique prime factors. n = get_input_integer() prime_factors = set() i = 2 while i * i <= n: if n % i: i += 1 else: n //= i prime_factors.add(i) if n > 1: prime_factors.add(n) return_prime_factors(sorted(prime_factors))"},{"question":"** Given a `pandas` DataFrame containing information about various products sold in a store, each product is categorized into different categories identified by the `category` column. Each product also has an associated `rating` out of 5, and a `price`. Your task is to create a function `calculate_category_statistics` that calculates the mean and median price for each category. Furthermore, the function should also calculate the average rating for each category and return these values in a consolidated dictionary. The function should: 1. Identify the unique categories using `df[\'category\'].unique()`. 2. For each category: - Compute the mean price. - Compute the median price. - Compute the average rating. 3. Return a dictionary where the keys are the category names, and the values are another dictionary with keys `\'mean_price\'`, `\'median_price\'`, and `\'average_rating\'`. The dataset DataFrame will have the following structure (for example purposes): ```plaintext | ProductId | Category | Price | Rating | |--------------|--------------|---------|---------| | 1 | Electronics | 299.99| 4.5 | | 2 | Furniture | 599.00| 3.9 | | 3 | Clothing | 49.99| 4.2 | | 4 | Electronics | 159.99| 4.0 | | 5 | Furniture | 799.00| 4.1 | | 6 | Clothing | 19.99| 3.8 | ``` The function signature should be: ```python def calculate_category_statistics(df: pd.DataFrame) -> Dict[str, Dict[str, float]]: pass ``` **","solution":"import pandas as pd from typing import Dict def calculate_category_statistics(df: pd.DataFrame) -> Dict[str, Dict[str, float]]: Calculate mean price, median price, and average rating for each category in the DataFrame. categories = df[\'category\'].unique() category_stats = {} for category in categories: category_df = df[df[\'category\'] == category] mean_price = category_df[\'price\'].mean() median_price = category_df[\'price\'].median() average_rating = category_df[\'rating\'].mean() category_stats[category] = { \'mean_price\': mean_price, \'median_price\': median_price, \'average_rating\': average_rating } return category_stats"},{"question":"You are tasked to implement a function named `analyze_string_pattern` that will take a string as input and return a dictionary with specific characteristics of the string. These characteristics include: 1. The total number of characters in the string. 2. The number of alphabetic characters. 3. The number of digits. 4. The number of whitespace characters. 5. A flag indicating whether the string is a palindrome (ignoring case and non-alphanumeric characters). The function should be thorough in evaluating the string and should handle edge cases such as empty strings. **Here\'s the function signature:** ```python def analyze_string_pattern(input_string: str) -> dict: # Your code goes here ``` **Example Input:** ```python analyze_string_pattern(\\"A man, a plan, a canal: Panama\\") ``` **Example Output:** ```python { \'total_characters\': 30, \'alphabetic_characters\': 21, \'digit_characters\': 0, \'whitespace_characters\': 6, \'is_palindrome\': True } ``` Note: - Alphabetic characters count should include both uppercase and lowercase letters. - The palindrome check should ignore spaces, punctuation, and be case-insensitive. For example, \\"A man, a plan, a canal: Panama\\" is considered a palindrome.","solution":"import re def analyze_string_pattern(input_string: str) -> dict: Analyzes the input string and returns a dictionary with various characteristics. total_characters = len(input_string) alphabetic_characters = sum(char.isalpha() for char in input_string) digit_characters = sum(char.isdigit() for char in input_string) whitespace_characters = sum(char.isspace() for char in input_string) # Check if the string is a palindrome clean_string = re.sub(r\'[^A-Za-z0-9]\', \'\', input_string).lower() is_palindrome = clean_string == clean_string[::-1] return { \'total_characters\': total_characters, \'alphabetic_characters\': alphabetic_characters, \'digit_characters\': digit_characters, \'whitespace_characters\': whitespace_characters, \'is_palindrome\': is_palindrome }"},{"question":"You need to write a function named `is_valid_room` to check if a given room description string meets specific criteria for validity. The room description string should follow specific format rules as provided below: 1. The room description starts with a series of lowercase words separated by hyphens (`-`). 2. This is followed by a series of digits enclosed in square brackets (`[digits]`). 3. Any other format is considered invalid. Your function should return `True` if the room description is valid and `False` otherwise. For this task, you should use the `re.fullmatch` function from the `re` module in Python. The `re` module allows you to perform advanced string matching using regular expressions. # Function Signature ```python def is_valid_room(description: str) -> bool: ``` # Example ```python # Example 1 input_description = \\"kitchen-table-chairs[1234]\\" expected_output = True print(is_valid_room(input_description)) # Should print: True # Example 2 input_description = \\"livingroom[5678]\\" expected_output = True print(is_valid_room(input_description)) # Should print: True # Example 3 input_description = \\"diningroom-table[67890a]\\" expected_output = False print(is_valid_room(input_description)) # Should print: False # Example 4 input_description = \\"bedroom-furniture[91011]\\" expected_output = True print(is_valid_room(input_description)) # Should print: True # Example 5 input_description = \\"bathroom[-12ab]\\" expected_output = False print(is_valid_room(input_description)) # Should print: False ``` # Additional Notes - Ensure your regular expression correctly matches the required pattern for a valid room description. - Utilize the `re.fullmatch` function to specify the format rules for validation. - Do not modify the input string inside the function; simply evaluate its validity based on the given criteria.","solution":"import re def is_valid_room(description: str) -> bool: Checks if the given room description is valid. A valid room description starts with a series of lowercase words separated by hyphens (-), followed by a series of digits enclosed in square brackets ([digits]). # Regular expression to match the room description pattern pattern = re.compile(r\'^[a-z]+(-[a-z]+)*[d+]\') # Use fullmatch to ensure the entire string matches the pattern if re.fullmatch(pattern, description): return True else: return False"},{"question":"You are tasked with writing a Python class to manage a simple TODO list. The class should allow the user to add, remove, and view tasks. Each task is represented by a dictionary with a unique ID, a description, and a status indicating whether the task is completed or not. The class should handle tasks through a list of dictionaries. The class signature and functionality are described as follows: ```python class TodoList: def __init__(self): Initializes an empty TODO list. def add_task(self, description: str) -> int: Adds a new task with the given description and returns the unique ID of the task. Args: description (str): Description of the new task. Returns: int: Unique ID of the newly added task. def remove_task(self, task_id: int) -> bool: Removes the task with the given ID from the TODO list. Args: task_id (int): Unique ID of the task to remove. Returns: bool: True if the task was successfully removed, False otherwise. def mark_completed(self, task_id: int) -> bool: Marks the task with the given ID as completed. Args: task_id (int): Unique ID of the task to mark as completed. Returns: bool: True if the task was successfully marked as completed, False otherwise. def view_tasks(self) -> list: Returns a list of all tasks, each represented as a dictionary. Returns: list: A list of dictionaries, each representing a task with keys \'id\', \'description\', and \'completed\'. ``` # Requirements: 1. **Unique IDs**: Each task should have a unique integer ID assigned sequentially starting from 1. 2. **Task Representation**: Each task is a dictionary with keys `\'id\'`, `\'description\'`, and `\'completed\'`. 3. **Class Initialization**: The TODO list is initialized as empty. 4. **Task Management**: Users can add, remove, mark as completed, and view tasks through the class methods. # Example Usage: ```python todo_list = TodoList() task_id = todo_list.add_task(\\"Buy groceries\\") print(todo_list.view_tasks()) # Output: [{\'id\': 1, \'description\': \'Buy groceries\', \'completed\': False}] todo_list.mark_completed(task_id) print(todo_list.view_tasks()) # Output: [{\'id\': 1, \'description\': \'Buy groceries\', \'completed\': True}] status = todo_list.remove_task(task_id) print(status) # Output: True print(todo_list.view_tasks()) # Output: [] ``` # Constraints: - Task descriptions are non-empty strings with a maximum length of 255 characters. - Task IDs are positive integers. - If an operation fails (e.g., removing a non-existent task), return `False` or an appropriate error message. # Hint: To manage unique IDs, consider keeping track of the next ID as an instance variable. ```python self.next_id = 1 ```","solution":"class TodoList: def __init__(self): Initializes an empty TODO list. self.tasks = [] self.next_id = 1 def add_task(self, description: str) -> int: Adds a new task with the given description and returns the unique ID of the task. Args: description (str): Description of the new task. Returns: int: Unique ID of the newly added task. task = { \'id\': self.next_id, \'description\': description, \'completed\': False } self.tasks.append(task) self.next_id += 1 return task[\'id\'] def remove_task(self, task_id: int) -> bool: Removes the task with the given ID from the TODO list. Args: task_id (int): Unique ID of the task to remove. Returns: bool: True if the task was successfully removed, False otherwise. for task in self.tasks: if task[\'id\'] == task_id: self.tasks.remove(task) return True return False def mark_completed(self, task_id: int) -> bool: Marks the task with the given ID as completed. Args: task_id (int): Unique ID of the task to mark as completed. Returns: bool: True if the task was successfully marked as completed, False otherwise. for task in self.tasks: if task[\'id\'] == task_id: task[\'completed\'] = True return True return False def view_tasks(self) -> list: Returns a list of all tasks, each represented as a dictionary. Returns: list: A list of dictionaries, each representing a task with keys \'id\', \'description\', and \'completed\'. return self.tasks"},{"question":"Given a list of integers, find all unique pairs (i, j) such that i < j and the sum of the pair is equal to a given target value. The function should return a sorted list of these pairs where each pair (i, j) is sorted in ascending order. Include an explanation of the approach used to find the pairs. The function should output with: list: A list of unique pairs (i, j) where i < j and the sum is equal to the target value, sorted in ascending order. You should write self-contained code starting with: ``` def find_pairs(numbers, target): ```","solution":"def find_pairs(numbers, target): Finds all unique pairs (i, j) such that i < j and the sum of the pair is equal to the target value. Parameters: numbers (list): A list of integers. target (int): The target sum for each pair. Returns: list: A list of unique pairs (i, j) where i < j, and the sum is equal to the target value. pairs = [] seen = set() added = set() for i, num in enumerate(numbers): complement = target - num if complement in seen: pair = (complement, num) if complement < num else (num, complement) if pair not in added: pairs.append(pair) added.add(pair) seen.add(num) pairs.sort() return pairs"},{"question":"You need to implement a function that determines if there exists a cycle within a directed graph. This is a crucial problem in graph theory as it has many practical applications, including in scheduling, routing, and resource allocation problems. The function you will implement is called `has_cycle` and should use Depth-First Search (DFS) to detect cycles. The signature of the function is: ```python def has_cycle(graph): pass ``` # Requirements: - **Input**: - `graph` is represented as an adjacency list. It\'s a dictionary where keys are node identifiers and values are lists of neighboring node identifiers. - **Output**: - The function should return `True` if there is a cycle in the graph and `False` otherwise. # Example: ```python graph1 = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\'] } print(has_cycle(graph1)) # Output: True graph2 = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [] } print(has_cycle(graph2)) # Output: False ``` # Constraints: - The graph may have zero or more nodes. - Nodes are represented as strings. - The graph does not necessarily have to be connected. Your task is to define the `has_cycle` function and detect cycles using the DFS technique, taking care to mark nodes during the search to check for back edges.","solution":"def has_cycle(graph): Detects if there\'s a cycle in the directed graph. :param graph: A dictionary representing the adjacency list of the graph :return: True if a cycle is present, False otherwise def dfs(node): if node in visiting: return True if node in visited: return False # mark the node as visiting visiting.add(node) # visit all the neighbours for neighbour in graph.get(node, []): if dfs(neighbour): return True # mark the node as visited visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in graph.keys(): if dfs(node): return True return False"},{"question":"You are given a dataset containing information about various products sold over multiple days. Your task is to create a function named `analyze_sales` that processes this dataset to output specific statistical insights. The function should use the `pandas` library for handling the data and `statistics` library for computing the average. Here are the detailed steps required to achieve this: 1. **Input Data**: The function will accept two parameters: - `sales_data`: A list of dictionaries where each dictionary contains `product_id`, `day`, `units_sold`, and `sales_amount` representing the number of units sold and the total sales amount for that product on a particular day. - `target_units_sold`: An integer representing the target total units sold across all products and days. 2. **Output Data**: The function returns a dictionary where each `product_id` maps to a dictionary containing: - `\'total_sales_amount\'`: The sum of all sales amounts for that product. - `\'average_units_sold\'`: The average number of units sold per day for that product. - `\'met_target_units_sold\'`: A boolean indicating if the total units sold for that product is greater than or equal to the `target_units_sold`. 3. **Steps**: - Convert the list of dictionaries into a pandas `DataFrame` for easier manipulation. - Group the data by `product_id` to calculate the required statistics for each product. - Compute the sum of sales amounts and the average units sold for each product. - Check if the total units sold for each product meets or exceeds the target units sold. - Return the results in the specified format. 4. **Requirements**: - Use `pandas` library for handling data frames and computations. - Use `statistics.mean` for computing the average. Here is the detailed signature of your function: ```python def analyze_sales(sales_data: list, target_units_sold: int) -> dict: # Implementation here ``` **Example Input:** ```python sales_data = [ {\'product_id\': \'A\', \'day\': 1, \'units_sold\': 10, \'sales_amount\': 100}, {\'product_id\': \'A\', \'day\': 2, \'units_sold\': 15, \'sales_amount\': 150}, {\'product_id\': \'B\', \'day\': 1, \'units_sold\': 5, \'sales_amount\': 50}, {\'product_id\': \'B\', \'day\': 2, \'units_sold\': 10, \'sales_amount\': 100} ] target_units_sold = 20 ``` **Example Output:** ```python { \'A\': {\'total_sales_amount\': 250, \'average_units_sold\': 12.5, \'met_target_units_sold\': True}, \'B\': {\'total_sales_amount\': 150, \'average_units_sold\': 7.5, \'met_target_units_sold\': False} } ``` The goal is to ensure you are proficient with the `pandas.DataFrame` object for data processing and the `statistics.mean` function for computing averages, key skills in data analysis using Python.","solution":"import pandas as pd import statistics def analyze_sales(sales_data: list, target_units_sold: int) -> dict: # Convert the list of dictionaries into a DataFrame df = pd.DataFrame(sales_data) # Group by `product_id` and aggregate the required statistics grouped = df.groupby(\'product_id\').agg({ \'sales_amount\': \'sum\', \'units_sold\': [\'sum\', \'count\'] }).reset_index() # Flatten the multi-level columns grouped.columns = [\'product_id\', \'total_sales_amount\', \'total_units_sold\', \'days_count\'] # Compute the required statistics result = {} for _, row in grouped.iterrows(): product_id = row[\'product_id\'] total_sales_amount = row[\'total_sales_amount\'] total_units_sold = row[\'total_units_sold\'] days_count = row[\'days_count\'] average_units_sold = statistics.mean([total_units_sold / days_count]) met_target_units_sold = total_units_sold >= target_units_sold result[product_id] = { \'total_sales_amount\': total_sales_amount, \'average_units_sold\': average_units_sold, \'met_target_units_sold\': met_target_units_sold } return result"},{"question":"A trucking company wants to optimize its delivery routes. You are assigned the task of creating a function `optimize_routes` that takes as input a list of delivery points, each represented by a tuple of coordinates (x, y), and a maximum distance `d`. The function should: 1. Calculate the Euclidean distance between every pair of delivery points. 2. Create clusters of delivery points such that the maximum distance between any two points in a cluster does not exceed `d`. 3. Write the clusters to a file named `clusters.json` in JSON format, where each cluster is represented as a list of points. You should use the `math.dist` function from the `math` library to calculate the Euclidean distance between points. **Function Signature:** ```python def optimize_routes(points: List[Tuple[int, int]], max_distance: float) -> None: ``` **Parameters:** - `points` (List[Tuple[int, int]]): A list of delivery points, each represented by a tuple of coordinates (x, y). - `max_distance` (float): The maximum allowed distance between any two points in a single cluster. **Example:** ```python optimize_routes([(0, 0), (1, 1), (4, 5), (6, 7)], 5.0) ``` **Expected Output:** - A JSON file `clusters.json` containing the clusters of delivery points. For the given example, the content might look like: ```json [ [[0, 0], [1, 1]], [[4, 5], [6, 7]] ] ``` Note that the clustering algorithm should ensure that the maximum distance between any two points in the same cluster does not exceed the specified `max_distance`.","solution":"import json from typing import List, Tuple from math import dist def optimize_routes(points: List[Tuple[int, int]], max_distance: float) -> None: def within_distance(p1, p2, max_distance): return dist(p1, p2) <= max_distance clusters = [] for point in points: added_to_cluster = False for cluster in clusters: if all(within_distance(point, existing_point, max_distance) for existing_point in cluster): cluster.append(point) added_to_cluster = True break if not added_to_cluster: clusters.append([point]) with open(\'clusters.json\', \'w\') as file: json.dump([[list(point) for point in cluster] for cluster in clusters], file)"},{"question":"--- In this task, you will implement a function `valid_brackets_sequence` that determines whether a sequence of brackets is valid. The sequence is considered valid if it meets the following criteria: 1. Every opening bracket has a corresponding closing bracket. 2. The brackets are properly nested. You are given a string consisting of three types of brackets: `()`, `{}`, and `[]`. The function should return `True` if the sequence is valid, and `False` otherwise. **Function Signature:** ```python def valid_brackets_sequence(s: str) -> bool: ``` **Parameters:** - `s`: A string containing the brackets to be validated. **Returns:** - A boolean value indicating whether the bracket sequence is valid. **Instructions:** 1. Write the `valid_brackets_sequence` function to check for balanced and properly nested brackets. 2. Use a stack data structure to keep track of opening brackets. 3. Ensure every closing bracket correctly matches the last opened bracket. 4. Return `True` if the sequence is valid, and `False` otherwise. **Example:** ```python print(valid_brackets_sequence(\\"()\\")) # Expected output: True print(valid_brackets_sequence(\\"()[]{}\\")) # Expected output: True print(valid_brackets_sequence(\\"(]\\")) # Expected output: False print(valid_brackets_sequence(\\"([)]\\")) # Expected output: False print(valid_brackets_sequence(\\"{[]}\\")) # Expected output: True ``` **Constraints:** - The input string `s` will only contain the characters `()[]{}` - The length of `s` will be between `0` and `10^4`","solution":"def valid_brackets_sequence(s: str) -> bool: Determine if the bracket sequence is valid. Parameters: s (str): The string containing the brackets. Returns: bool: True if the sequence is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack == [] or bracket_map[char] != stack.pop(): return False else: # In case there are characters other than the given types of brackets return False return stack == []"},{"question":"# Introduction Navigating a grid is a common problem in many applications, including games, path-finding algorithms, and robotics. In this problem, you will implement a function to determine if there is a valid path for a robot to move from the top-left corner to the bottom-right corner of a grid. The grid contains cells that are either impassable (denoted by 0) or passable (denoted by 1). # Problem You are required to write a function `isPath(grid)` which will determine if there exists a path from the top-left corner to the bottom-right corner of the grid. # Function Signature ```python def isPath(grid): pass ``` # Parameters 1. `grid`: A 2D list of integers where each integer is either 0 (impassable) or 1 (passable). The grid is guaranteed to be non-empty and rectangular (NxM). # Requirements 1. The robot can move only in four directions: up, down, left, and right. 2. Return `True` if there exists a path from the top-left corner to the bottom-right corner; otherwise, return `False`. 3. The function should handle grids of varying sizes efficiently. # Example ```python grid1 = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1] ] grid2 = [ [1, 0], [0, 1] ] print(isPath(grid1)) # Output: True print(isPath(grid2)) # Output: False ``` # Expected Behavior For the first example, the function should return `True` because there is a path for the robot to move from the top-left corner to the bottom-right corner. For the second example, the function should return `False` because no such path exists. Note: You do not need to handle the initialization of the grid; assume it is provided as input to the function.","solution":"def isPath(grid): Returns True if there exists a path from the top-left corner to the bottom-right corner of the grid, False otherwise. The grid is a 2D list with 0 representing impassable cells and 1 representing passable cells. from collections import deque def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1 if not grid or grid[0][0] == 0 or grid[-1][-1] == 0: return False rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (rows - 1, cols - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Load a CSV file containing a list of books, each with a title, author, and publication year. Sort the book list by publication year in descending order, then alphabetically by title, and return the sorted list. If the CSV file does not exist or is empty, raise an appropriate exception. Your function should return: list: A list of dictionaries, where each dictionary represents a book with keys \'title\', \'author\', and \'publication_year\'. You should write self-contained code starting with: ``` import csv import os def sort_books(csv_file_path): ```","solution":"import csv import os def sort_books(csv_file_path): Load a CSV file containing a list of books, sort by publication year in descending order and alphabetically by title. :param csv_file_path: Path to the CSV file containing the list of books. :return: A sorted list of dictionaries, where each dictionary represents a book with keys \'title\', \'author\', and \'publication_year\'. :raises FileNotFoundError: If the CSV file does not exist. :raises ValueError: If the CSV file is empty. if not os.path.exists(csv_file_path): raise FileNotFoundError(f\\"No such file: \'{csv_file_path}\'\\") books = [] with open(csv_file_path, mode=\'r\', newline=\'\', encoding=\'utf-8\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: if row.get(\'title\') and row.get(\'author\') and row.get(\'publication_year\'): books.append({ \'title\': row[\'title\'], \'author\': row[\'author\'], \'publication_year\': int(row[\'publication_year\']) }) if not books: raise ValueError(\\"The CSV file is empty or does not contain valid book entries.\\") sorted_books = sorted(books, key=lambda x: (-x[\'publication_year\'], x[\'title\'])) return sorted_books"},{"question":"Write a function that generates a bar plot to visualize categorical data distribution. This function takes in a dictionary where keys are categories and values are their corresponding counts. The x-axis should display the categories, and the y-axis should display the counts. The bar plot helps in understanding the distribution of counts among the categories. The function should output with: Axes object (matplotlib.axes._axes.Axes): The bar plot displaying the distribution of the categorical data. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def plot_category_distribution(data): ```","solution":"import matplotlib.pyplot as plt def plot_category_distribution(data): Generates a bar plot to visualize categorical data distribution. Parameters: data (dict): Dictionary where keys are categories and values are counts. Returns: Axes object (matplotlib.axes._axes.Axes): The bar plot displaying the distribution. categories = list(data.keys()) counts = list(data.values()) fig, ax = plt.subplots() ax.bar(categories, counts) ax.set_xlabel(\'Categories\') ax.set_ylabel(\'Counts\') ax.set_title(\'Category Distribution\') return ax"},{"question":"# Forest Fire Simulation with Cellular Automaton Model You are tasked with creating a forest fire simulation model using cellular automata. The goal is to understand the spread of fire through a forest grid over time and the final burned area. To achieve this, you will create a function `forest_fire_simulation(grid_size, num_iterations, density)` that performs the following steps: 1. **Initialize the Forest Grid**: Create a `grid_size x grid_size` numpy array. Populate the grid with trees (`1`) and empty spaces (`0`) based on the specified `density` (probability between 0 and 1 that a cell contains a tree). 2. **Start the Fire**: Set the tree in the center of the grid on fire (set it to `2`). 3. **Simulate the Fire Spread**: Loop through the `num_iterations`: - For each cell in the grid that is on fire (`2`), spread the fire to neighboring cells (North, South, East, West) that contain trees (`1`), setting them on fire as well (`2`). - After spreading the fire, turn the cell into burned land (`3`). 4. **Store Results**: After the simulation completes, count the number of burned trees (`3`) and return the percentage of the forest that burned. Required library: `numpy` # Function Signature ```python def forest_fire_simulation(grid_size: int, num_iterations: int, density: float) -> float: ``` # Example Usage ```python percentage_burned = forest_fire_simulation(grid_size=50, num_iterations=30, density=0.6) print(f\\"Percentage of forest burned: {percentage_burned}%\\") ``` Expected output: A float value indicating the percentage of the forest that burned. # Constraints & Assumptions - `grid_size` is positive integer representing the size of the square grid (e.g., 50 for a 50x50 grid). - `num_iterations` is a positive integer defining how many iterations the simulation runs. - `density` is a float between 0 and 1 indicating the chance a cell initially contains a tree. - The fire only spreads to adjacent cells (not diagonally). - All necessary imports should be within the `forest_fire_simulation` function.","solution":"import numpy as np def forest_fire_simulation(grid_size: int, num_iterations: int, density: float) -> float: Simulates a forest fire using a cellular automaton model. Args: grid_size (int): The size of the forest grid (grid_size x grid_size). num_iterations (int): Number of iterations to simulate the fire spread. density (float): Probability that a cell initially contains a tree (between 0 and 1). Returns: float: Percentage of forest burned. # Initialize the forest grid forest = np.random.choice([0, 1], size=(grid_size, grid_size), p=[1-density, density]) # Set the center cell on fire center = grid_size // 2 if forest[center, center] == 1: forest[center, center] = 2 # Simulate the fire spread for _ in range(num_iterations): new_forest = forest.copy() for i in range(grid_size): for j in range(grid_size): if forest[i, j] == 2: # If the cell is on fire for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]: # Check neighbors if 0 <= x < grid_size and 0 <= y < grid_size and forest[x, y] == 1: new_forest[x, y] = 2 new_forest[i, j] = 3 # Turn burned cell to burned land forest = new_forest # Calculate the percentage of forest burned total_trees = np.sum(forest != 0) burned_trees = np.sum(forest == 3) if total_trees == 0: return 0.0 return (burned_trees / total_trees) * 100"},{"question":"You are tasked with implementing a function `reverse_linked_list` that reverses a singly linked list. The linked list is defined with the following `ListNode` class: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Your task is to write a function: ```python def reverse_linked_list(head: ListNode) -> ListNode: # Implementation here ``` # Parameters: - `head` (`ListNode`): The head node of the singly linked list. # Output: - (`ListNode`): The new head node of the reversed singly linked list. # Example: ```python # Helper function to create a linked list from a list of values def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for val in values[1:]: current.next = ListNode(val) current = current.next return head # Helper function to convert linked list to list of values def linked_list_to_list(head): values = [] current = head while current: values.append(current.val) current = current.next return values # Example Inputs values = [1, 2, 3, 4, 5] head = create_linked_list(values) # Reverse the linked list new_head = reverse_linked_list(head) # Convert reversed linked list to list to print print(linked_list_to_list(new_head)) # Output should be [5, 4, 3, 2, 1] ``` This function will help you understand how to manipulate pointers in a linked list and reverse the order of nodes. # Libraries: - None","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head: ListNode) -> ListNode: Reverses a singly linked list. Parameters: head (ListNode): The head node of the singly linked list. Returns: ListNode: The new head node of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"You are tasked with developing a function to determine whether a given string can form a palindrome by rearranging its characters. This exercise will provide practice with Python\'s `collections` module, especially the `Counter` class. **Function to Implement:** ```python def can_form_palindrome(s): \'\'\' Takes a string, s, and determines if its letters can be rearranged to form a palindrome. The function returns True if it is possible to rearrange the string into a palindrome, else False. \'\'\' ``` **Requirements:** - The function should leverage the `collections.Counter` to count the frequency of each character in the string. - A string can be rearranged to form a palindrome if at most one character has an odd frequency. **Notes:** - Ignore spaces and consider only alphabetic characters (case-insensitive). - The function does not need to generate the actual palindrome, only to check if it is possible. **Steps to Follow:** 1. Use `Counter` from the `collections` module to count the frequency of each character in the string. 2. Iterate through the frequency counts to determine how many characters have an odd frequency. 3. Return True if at most one character has an odd frequency; otherwise, return False. # Example: - `can_form_palindrome(\\"civic\\")` should return `True` because \\"civic\\" is already a palindrome. - `can_form_palindrome(\\"ivicc\\")` should return `True` because it can be rearranged to \\"civic\\". - `can_form_palindrome(\\"hello\\")` should return `False` because it cannot be rearranged to form a palindrome. # Additional Example: ```python print(can_form_palindrome(\\"A man, a plan, a canal: Panama\\")) # Should return True ``` **Your task is to complete the `can_form_palindrome` function ensuring it meets the requirements outlined above.**","solution":"from collections import Counter def can_form_palindrome(s): \'\'\' Takes a string, s, and determines if its letters can be rearranged to form a palindrome. The function returns True if it is possible to rearrange the string into a palindrome, else False. \'\'\' # Remove non-alphabetic characters and convert to lowercase s = \'\'.join(filter(str.isalpha, s)).lower() # Count the frequency of each character char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd frequency, it cannot form a palindrome return odd_count <= 1"},{"question":"You are required to write a Python function named `plot_fruit_sales_trend` that takes a pandas DataFrame as its input. This DataFrame contains information about monthly fruit sales over a year with columns \'month\' (which may include values from \'January\' to \'December\') and \'sales\' (which contains the number of units sold). Your task is to generate a line chart visualizing the fruit sales trend over the months. You should use the `matplotlib` library to create this line chart. Title the chart \\"Monthly Fruit Sales\\" and ensure the title’s font size is set to 18. The function signature should be: ```python def plot_fruit_sales_trend(df: pd.DataFrame) -> None: ``` Ensure the line chart has the following properties: 1. The x-axis should be labeled \'Month\'. 2. The y-axis should be labeled \'Sales\'. 3. The data points should be marked with a circle. 4. Include grid lines to make the chart easier to read. 5. Use a different color for the line, such as \'blue\'. 6. Rotate the x-axis labels by 45 degrees to ensure they are readable.","solution":"import matplotlib.pyplot as plt import pandas as pd def plot_fruit_sales_trend(df: pd.DataFrame) -> None: Plots the fruit sales trend over the months. Parameters: df (pd.DataFrame): A DataFrame containing \'month\' and \'sales\' columns. Returns: None plt.figure(figsize=(10, 6)) # Set the figure size plt.plot(df[\'month\'], df[\'sales\'], marker=\'o\', color=\'blue\') # Plot with a line and circle markers plt.title(\\"Monthly Fruit Sales\\", fontsize=18) # Title with font size 18 plt.xlabel(\\"Month\\") # X-axis label plt.ylabel(\\"Sales\\") # Y-axis label plt.grid(True) # Enable grid lines plt.xticks(rotation=45) # Rotate x-axis labels plt.tight_layout() # Adjust layout to make room for rotated x-axis labels plt.show() # Display the plot"},{"question":"Write a Python function that processes a log file to filter and summarize its contents. The log file contains several lines, each representing an event with a timestamp, a log level, and a message in the format: `[timestamp] [log_level] message`. The log levels are `ERROR`, `WARNING`, `INFO`, and `DEBUG`. Your task is to create a summary that counts the number of occurrences of each log level and filters out log messages containing certain keywords. Implement the function `process_log_file(path: str, keywords: List[str]) -> Tuple[Dict[str, int], List[str]]` that: 1. Takes a string `path` representing the path to the log file. 2. Takes a list of strings `keywords` which contains the keywords that, if present in a log message, will cause the message to be filtered out. 3. Reads the log file from the given path using the `pathlib.Path` module to handle file operations. 4. Counts the number of occurrences of each log level and returns this as a dictionary. 5. Filters out log messages that contain any of the keywords provided and returns the remaining log messages as a list of strings. Here is an example of how your function should behave: - **Input**: A file at path `/path/to/log.txt` containing: ```plaintext [2023-01-01 10:00:00] ERROR Unable to connect to server [2023-01-01 10:05:00] INFO Connection established [2023-01-01 10:10:00] WARNING Disk space low [2023-01-01 10:15:00] ERROR Disk space exhausted [2023-01-01 10:20:00] DEBUG Disk cleanup initiated [2023-01-01 10:25:00] INFO Disk cleanup completed ``` And a list of keywords: `[\\"server\\", \\"exhausted\\"]` - **Output**: ```python ( { \'ERROR\': 2, \'WARNING\': 1, \'INFO\': 2, \'DEBUG\': 1 }, [ \'[2023-01-01 10:05:00] INFO Connection established\', \'[2023-01-01 10:10:00] WARNING Disk space low\', \'[2023-01-01 10:20:00] DEBUG Disk cleanup initiated\', \'[2023-01-01 10:25:00] INFO Disk cleanup completed\' ] ) ``` Your task is to use the `pathlib.Path` module to read the file and perform the necessary string manipulations to count the log levels and filter the messages as specified.","solution":"from pathlib import Path from typing import List, Tuple, Dict def process_log_file(path: str, keywords: List[str]) -> Tuple[Dict[str, int], List[str]]: Processes a log file to count log level occurrences and filter out messages containing keywords. :param path: Path to the log file :param keywords: List of keywords to filter out log messages :return: Tuple containing a dictionary of log level counts and a list of filtered log messages log_level_counts = {\'ERROR\': 0, \'WARNING\': 0, \'INFO\': 0, \'DEBUG\': 0} filtered_log_messages = [] log_file_path = Path(path) with log_file_path.open(\'r\') as file: for line in file: # Extract the log level from the line log_level = None if \'ERROR\' in line: log_level = \'ERROR\' elif \'WARNING\' in line: log_level = \'WARNING\' elif \'INFO\' in line: log_level = \'INFO\' elif \'DEBUG\' in line: log_level = \'DEBUG\' # Update the log level count if log_level: log_level_counts[log_level] += 1 # Check if any of the keywords are in the line if any(keyword in line for keyword in keywords): continue # Append the line to the filtered log messages filtered_log_messages.append(line.strip()) return log_level_counts, filtered_log_messages"},{"question":"In this problem, you will use the `datetime` module to analyze a set of timestamps and calculate the duration of time spent on activities. Your task is to write a function named `calculate_activity_lengths` that takes a list of tuples as an argument. Each tuple contains two strings representing the start and end timestamps of an activity in the format `YYYY-MM-DD HH:MM:SS`. The function should return a list of durations in minutes for each activity. # Function Specification **Function Name:** `calculate_activity_lengths` **Parameters:** - `activity_intervals`: A list of tuples, where each tuple contains two strings: - The first string represents the start timestamp of an activity. - The second string represents the end timestamp of the activity. # Requirements 1. Use the `datetime` module to parse the start and end timestamps. 2. For each tuple in the input list, calculate the duration of the activity in minutes. 3. Return a list of floating-point numbers representing the durations of each activity in minutes. Here is a scaffold for the function definition: ```python from datetime import datetime def calculate_activity_lengths(activity_intervals): # Your code here ``` # Example Let\'s say you have the following input list: ```python activity_intervals = [ (\\"2023-01-01 08:00:00\\", \\"2023-01-01 09:30:00\\"), (\\"2023-01-01 10:15:00\\", \\"2023-01-01 11:00:00\\"), (\\"2023-01-01 13:00:00\\", \\"2023-01-01 13:45:00\\") ] ``` Calling `calculate_activity_lengths(activity_intervals)` should return a list: ```python [90.0, 45.0, 45.0] ``` _Explanation_: - The first activity lasts for 90 minutes (1 hour and 30 minutes). - The second activity lasts for 45 minutes. - The third activity also lasts for 45 minutes.","solution":"from datetime import datetime def calculate_activity_lengths(activity_intervals): durations = [] for start, end in activity_intervals: start_time = datetime.strptime(start, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end, \\"%Y-%m-%d %H:%M:%S\\") duration = (end_time - start_time).total_seconds() / 60 durations.append(duration) return durations"},{"question":"You are tasked with developing a function to manage employee data in an SQLite-based database for a company system. The company keeps track of employee information including their id, name, department, and employment status. You need to write a function `manage_employee_data(db_name: str, operations: list) -> None` that executes a series of operations on the database. Each operation in the `operations` list is a tuple that follows the structure: - `(\\"add\\", id, name, department, status)`: Adds a new employee with the provided details. - `(\\"remove\\", id)`: Removes the employee with the specified id. - `(\\"update_status\\", id, new_status)`: Updates the employment status of the employee with the given id. - `(\\"move_department\\", id, new_department)`: Moves the employee with the specified id to a new department. Your task is to implement the function `manage_employee_data` that performs the following actions: 1. Connect to an SQLite database named `db_name` provided as a function argument. 2. Create an `Employees` table if it does not already exist. The table should contain: - `id` (INTEGER): The unique identifier for each employee. - `name` (TEXT): The name of the employee. - `department` (TEXT): The department where the employee works. - `status` (TEXT): The employment status of the employee (e.g., \\"active\\", \\"terminated\\"). 3. Execute the operations provided in the `operations` list in the given order. 4. Ensure data integrity by handling errors such as attempting to update or remove a non-existent employee. Here is a partial implementation that provides context: ```python import sqlite3 def manage_employee_data(db_name: str, operations: list) -> None: conn = sqlite3.connect(db_name) c = conn.cursor() c.execute(\'\'\'CREATE TABLE IF NOT EXISTS Employees ( id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT)\'\'\') for operation in operations: if operation[0] == \\"add\\": c.execute(\\"INSERT INTO Employees (id, name, department, status) VALUES (?, ?, ?, ?)\\", (operation[1], operation[2], operation[3], operation[4])) elif operation[0] == \\"remove\\": c.execute(\\"DELETE FROM Employees WHERE id=?\\", (operation[1],)) elif operation[0] == \\"update_status\\": c.execute(\\"UPDATE Employees SET status=? WHERE id=?\\", (operation[2], operation[1])) elif operation[0] == \\"move_department\\": c.execute(\\"UPDATE Employees SET department=? WHERE id=?\\", (operation[2], operation[1])) conn.commit() conn.close() ``` Write and complete the function `manage_employee_data` based on the above requirements.","solution":"import sqlite3 def manage_employee_data(db_name: str, operations: list) -> None: conn = sqlite3.connect(db_name) c = conn.cursor() c.execute(\'\'\'CREATE TABLE IF NOT EXISTS Employees ( id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT)\'\'\') for operation in operations: if operation[0] == \\"add\\": try: c.execute(\\"INSERT INTO Employees (id, name, department, status) VALUES (?, ?, ?, ?)\\", (operation[1], operation[2], operation[3], operation[4])) except sqlite3.IntegrityError: print(f\\"Employee with id {operation[1]} already exists.\\") elif operation[0] == \\"remove\\": c.execute(\\"DELETE FROM Employees WHERE id=?\\", (operation[1],)) elif operation[0] == \\"update_status\\": c.execute(\\"UPDATE Employees SET status=? WHERE id=?\\", (operation[2], operation[1])) elif operation[0] == \\"move_department\\": c.execute(\\"UPDATE Employees SET department=? WHERE id=?\\", (operation[2], operation[1])) conn.commit() conn.close()"},{"question":"You are asked to write a function `non_repeating_sum(arr)` which takes in a list of integers `arr` and returns the sum of all non-repeating (unique) elements in the list. The function should efficiently identify and sum only the elements that appear exactly once in the input list. The function should: 1. Identify elements that appear exactly once in the list. 2. Compute and return the sum of those unique elements. **Function Signature**: `def non_repeating_sum(arr: list) -> int:` **Example:** ```python >>> non_repeating_sum([4, 5, 7, 5, 4, 8]) 15 # Explanation: The non-repeating elements are [7, 8], and their sum is 15. >>> non_repeating_sum([10, 20, 30, 10]) 50 # Explanation: The non-repeating elements are [20, 30], and their sum is 50. >>> non_repeating_sum([1, 2, 2, 3, 4, 4]) 4 # Explanation: The non-repeating elements are [1, 3], and their sum is 4. ``` **Note**: Ensure you correctly handle lists with various lengths and compositions.","solution":"def non_repeating_sum(arr): Returns the sum of all non-repeating (unique) elements in the list. from collections import Counter count = Counter(arr) return sum(key for key, value in count.items() if value == 1)"},{"question":"You are required to create a Python function that performs arithmetic operations on a list of integers and returns the results as a new list. The function signature is `operate_list(nums, operation)`, where `nums` is a list of integers and `operation` is a string representing the arithmetic operation. The possible operations are `addition`, `subtraction`, `multiplication`, and `division`. Your function must apply the specified operation sequentially on the integers in the list. The operations proceed as follows: - **addition**: returns a list where each element is the cumulative sum of elements up to that index in the original list. - **subtraction**: returns a list where each element is the cumulative subtraction of elements up to that index. - **multiplication**: returns a list where each element is the cumulative product of elements up to that index. - **division**: returns a list where each element is the cumulative division of elements up to that index. The function should handle `ZeroDivisionError` by replacing division results that lead to division by zero with `float(\'inf\')`. Requirements: 1. The function `operate_list(nums, operation)` should handle the cumulative operations as described. 2. If an unsupported operation string is provided, the function should raise a `ValueError` with the message \\"Unsupported operation\\". Here is the prototype of the function: ```python def operate_list(nums, operation): # Your implementation here ``` # Examples 1. `operate_list([1, 2, 3, 4], \\"addition\\")` should return `[1, 3, 6, 10]`. 2. `operate_list([10, 5, 1], \\"subtraction\\")` should return `[10, 5, 4]`. 3. `operate_list([1, 2, 3], \\"multiplication\\")` should return `[1, 2, 6]`. 4. `operate_list([8, 2, 0], \\"division\\")` should return `[8.0, 4.0, float(\'inf\')]`.","solution":"def operate_list(nums, operation): if not nums: return nums result = [nums[0]] for i in range(1, len(nums)): if operation == \\"addition\\": result.append(result[-1] + nums[i]) elif operation == \\"subtraction\\": result.append(result[-1] - nums[i]) elif operation == \\"multiplication\\": result.append(result[-1] * nums[i]) elif operation == \\"division\\": try: result.append(result[-1] / nums[i]) except ZeroDivisionError: result.append(float(\'inf\')) else: raise ValueError(\\"Unsupported operation\\") return result"},{"question":"In data processing pipelines, transforming text data into numerical data is a common prerequisite for many machine learning tasks. One such transformation is to convert tokens (words or phrases) into unique integer indices which can be used directly in machine learning models. We want to implement a function `tokenizer`, which takes a list of documents (each document is a string) and returns a dictionary that maps each unique token to a unique integer index. Additionally, the function should use a given delimiter to split the documents into tokens. **Function Signature**: ```python def tokenizer(documents: list, delimiter: str) -> dict: Tokenize the documents into unique tokens and map each token to a unique integer index. Parameters: - documents (list): A list of strings, where each string is a document containing text. - delimiter (str): A string representing the delimiter used to split each document into tokens. Returns: - dict: A dictionary mapping each unique token to a unique integer index. ``` **Requirements**: - Initialize the indexing from 0. - Tokens should be case-sensitive (i.e., treat \\"word\\" and \\"Word\\" as different tokens). - Avoid including empty tokens in the resulting dictionary. **Example Usage**: ```python docs = [\\"hello world\\", \\"hello\\", \\"machine learning is fun\\"] delim = \\" \\" token_indices = tokenizer(docs, delim) # Expected output: {\'hello\': 0, \'world\': 1, \'machine\': 2, \'learning\': 3, \'is\': 4, \'fun\': 5} ```","solution":"def tokenizer(documents, delimiter): Tokenize the documents into unique tokens and map each token to a unique integer index. Parameters: - documents (list): A list of strings, where each string is a document containing text. - delimiter (str): A string representing the delimiter used to split each document into tokens. Returns: - dict: A dictionary mapping each unique token to a unique integer index. token_to_index = {} current_index = 0 for document in documents: tokens = document.split(delimiter) for token in tokens: if token and token not in token_to_index: token_to_index[token] = current_index current_index += 1 return token_to_index"},{"question":"**Scenario:** You work for a logistics company that monitors the inventory levels of various warehouses. Each warehouse maintains a record of its stock in CSV files, which are updated daily with information on incoming and outgoing items. The company wants to identify the top N items by stock level at any given time. Your task is to create a function that processes this data and identifies the top N items with the highest stock levels. **Function to Implement:** You need to write a function named `top_n_items` that takes the following parameters: - `warehouse` (str): The name of the warehouse to analyze. - `n` (int): The number of top items to identify. The function should: 1. Read the warehouse\'s CSV file into a Pandas DataFrame. 2. Aggregate the inventory data to get the total stock level for each item. 3. Identify the top N items with the highest stock levels. 4. Return a DataFrame containing the top N items and their stock levels. **Libraries to Use:** - `pandas.read_csv`: To read the CSV files into DataFrames. **Example Usage:** ```python top_items_df = top_n_items(\'central_warehouse\', 5) print(top_items_df) ``` **Dataset Structure:** Assume each warehouse\'s CSV file has at least the following columns: - \'Item ID\': The unique identifier for the item. - \'Stock Level\': The current stock level of the item. - Other columns that may include additional inventory-related information. **Constraints:** - Assume the CSV file path for each warehouse is stored in a dictionary `WAREHOUSE_DATA` where keys are warehouse names in lowercase and values are the file paths. [WAREHOUSE_DATA] ```python WAREHOUSE_DATA = { \'central_warehouse\': \'central_warehouse.csv\', \'east_warehouse\': \'east_warehouse.csv\', \'west_warehouse\': \'west_warehouse.csv\' } ```","solution":"import pandas as pd WAREHOUSE_DATA = { \'central_warehouse\': \'central_warehouse.csv\', \'east_warehouse\': \'east_warehouse.csv\', \'west_warehouse\': \'west_warehouse.csv\' } def top_n_items(warehouse, n): Identify the top N items by stock level in the given warehouse. Parameters: warehouse (str): The name of the warehouse to analyze. n (int): The number of top items to identify. Returns: pd.DataFrame: A DataFrame containing the top N items and their stock levels. # Get the CSV file path for the given warehouse file_path = WAREHOUSE_DATA.get(warehouse.lower()) if not file_path: raise ValueError(f\\"Warehouse {warehouse} not found.\\") # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Aggregate the inventory data to get the total stock level for each item aggregated_df = df.groupby(\'Item ID\')[\'Stock Level\'].sum().reset_index() # Sort the items by stock level in descending order and get the top N items top_items_df = aggregated_df.sort_values(by=\'Stock Level\', ascending=False).head(n) return top_items_df"},{"question":"In the context of text data processing, a common task is to compute word frequencies from a given document. Word frequency analysis is crucial for various natural language processing tasks, such as text summarization, sentiment analysis, and topic modeling. In this problem, you are required to implement a function `word_frequency` that calculates the frequency of each unique word in a given list of words. The function should return a dictionary where keys are the unique words, and values are their respective counts. **Function Signature:** ```python def word_frequency(words: List[str]) -> Dict[str, int]: pass ``` **Parameters:** - `words (List[str])`: A list of words represented as strings. **Returns:** - `Dict[str, int]`: A dictionary where keys are the unique words, and values are their counts in the input list. **Example:** Given the input list of words: ```python words = [\\"the\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"jumps\\", \\"over\\", \\"the\\", \\"lazy\\", \\"dog\\"] ``` The function should return: ```python {\'the\': 2, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 1} ``` **Implementation Details:** 1. Use a dictionary to keep track of word counts. 2. Iterate through the list of words, updating the dictionary with each word\'s count. 3. Ensure to handle the case where words might be repeated. **Hints:** - You can use the `collections.defaultdict` for easier initialization of dictionary values. - Make use of the `dict.get` method to retrieve and update word counts efficiently. You are encouraged to explore Python dictionary methods to implement the solution efficiently.","solution":"from typing import List, Dict def word_frequency(words: List[str]) -> Dict[str, int]: Calculate the frequency of each unique word in a given list of words. :param words: List of words represented as strings. :return: Dictionary where keys are the unique words and values are their counts. frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"In data analysis, determining the similarity between different data points is often a key task. One common measure of similarity is the cosine similarity, which calculates the cosine of the angle between two non-zero vectors in an inner product space. For this exercise, you will write a Python function `cosine_similarity_matrix(X)` that computes the cosine similarity matrix for a given dataset. **Function Signature:** ```python import numpy as np def cosine_similarity_matrix(X: np.ndarray) -> np.ndarray: pass ``` **Parameters:** - `X (np.ndarray)`: A numpy 2D array of shape `(n, d)` where `n` is the number of data points and `d` is the number of features of each data point. **Returns:** - `np.ndarray`: A numpy 2D array of shape `(n, n)` containing the cosine similarity between each pair of data points. **Constraints:** 1. Raise a `TypeError` if `X` is not a numpy.ndarray. 2. Raise a `ValueError` if `X` does not have at least two dimensions. Your implementation must use the following `numpy` functions: - `numpy.dot` - `numpy.linalg.norm` **Examples:** ```python import numpy as np # Example 1 X = np.array([[1, 0], [0, 1]]) print(cosine_similarity_matrix(X)) # Example 2 X = np.array([[1, 1], [1, 1], [0, 1]]) print(cosine_similarity_matrix(X)) ``` **Expected Output:** ```python # Example 1 [[1. 0.] [0. 1.]] # Example 2 [[1. 1. 0.70710678] [1. 1. 0.70710678] [0.70710678 0.70710678 1. ]] ``` This exercise will help you understand how to calculate the cosine similarity between vectors and work with matrix operations using numpy, a fundamental package for scientific computing in Python.","solution":"import numpy as np def cosine_similarity_matrix(X: np.ndarray) -> np.ndarray: Computes the cosine similarity matrix for a given dataset. Parameters: X (np.ndarray): A numpy 2D array of shape (n, d) where n is the number of data points and d is the number of features of each data point. Returns: np.ndarray: A numpy 2D array of shape (n, n) containing the cosine similarity between each pair of data points. Raises: TypeError: If X is not a numpy ndarray. ValueError: If X does not have at least two dimensions. if not isinstance(X, np.ndarray): raise TypeError(\\"Input X must be a numpy ndarray.\\") if X.ndim != 2: raise ValueError(\\"Input X must have exactly two dimensions.\\") # Compute the dot product of X with its transpose dot_product = np.dot(X, X.T) # Compute the norm (magnitude) of each vector norms = np.linalg.norm(X, axis=1, keepdims=True) # Compute the outer product of norms norms_outer = np.dot(norms, norms.T) # Calculate cosine similarity similarity_matrix = dot_product / norms_outer # Handle potential division by zero similarity_matrix = np.nan_to_num(similarity_matrix) return similarity_matrix"},{"question":"You are tasked with designing a function that can determine whether a given string can be rearranged to form a palindrome. A string is a palindrome if it reads the same forwards and backwards. For the string to be rearrangeable into a palindrome, at most one character can have an odd count; the rest must have even counts. Function Name: `canFormPalindrome` Parameters: - `s`: a string consisting of lowercase letters. Returns: - `True` if the string can be rearranged to form a palindrome, `False` otherwise. Instructions: 1. Use a dictionary or collections.Counter to count the frequency of each character in the string. 2. Check how many characters have an odd frequency. 3. If more than one character has an odd frequency, return `False`. Otherwise, return `True`. Examples: ```python def canFormPalindrome(s): from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1 print(canFormPalindrome(\\"carrace\\")) # Expected output: True (can be rearranged to \\"racecar\\") print(canFormPalindrome(\\"daily\\")) # Expected output: False (no possible palindrome formation) ```","solution":"def canFormPalindrome(s): Determines if the input string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1"},{"question":"** You are tasked with writing a function that simulates an inventory system for a small retail store. The store sells various products, and each product has a unique name and a specific quantity in stock. The inventory system should support adding new products, updating the quantity of existing products, and removing products from the inventory. You need to implement a class `Inventory` with the following methods: 1. `add_product(name: str, quantity: int) -> None`: Adds a new product with the given name and quantity to the inventory. If the product already exists, it increases the quantity by the specified amount. 2. `remove_product(name: str) -> None`: Removes the product with the given name from the inventory. If the product does not exist, the method should do nothing. 3. `update_quantity(name: str, quantity: int) -> None`: Updates the quantity of the product with the given name. If the product does not exist, the method should add it with the specified quantity. 4. `get_quantity(name: str) -> int`: Returns the quantity of the product with the given name. If the product does not exist, it should return 0. # Class Signature ```python class Inventory: def __init__(self): pass def add_product(self, name: str, quantity: int) -> None: pass def remove_product(self, name: str) -> None: pass def update_quantity(self, name: str, quantity: int) -> None: pass def get_quantity(self, name: str) -> int: pass ``` # Example ```python inventory = Inventory() # Adding and updating products inventory.add_product(\\"apple\\", 50) inventory.add_product(\\"banana\\", 30) inventory.update_quantity(\\"apple\\", 20) # apple quantity should now be 70 # Getting product quantity print(inventory.get_quantity(\\"apple\\")) # Output: 70 print(inventory.get_quantity(\\"banana\\")) # Output: 30 print(inventory.get_quantity(\\"orange\\")) # Output: 0 # Removing a product inventory.remove_product(\\"banana\\") # Getting quantity of a removed product print(inventory.get_quantity(\\"banana\\")) # Output: 0 ``` # Note - Make sure to handle edge cases such as trying to remove or update a product that doesn\'t exist. - Ensure the class is designed to handle a large number of products efficiently. **","solution":"class Inventory: def __init__(self): self.products = {} def add_product(self, name: str, quantity: int) -> None: if name in self.products: self.products[name] += quantity else: self.products[name] = quantity def remove_product(self, name: str) -> None: if name in self.products: del self.products[name] def update_quantity(self, name: str, quantity: int) -> None: self.products[name] = quantity def get_quantity(self, name: str) -> int: return self.products.get(name, 0)"},{"question":"For a given list of strings, write a function that calculates the frequency of each word and returns a dictionary with words as keys and their frequencies as values. The returned dictionary should be sorted in descending order of frequencies, and in case of a tie, sort alphabetically by the word. The function should start with: ``` def word_frequency(words): ```","solution":"def word_frequency(words): Returns a dictionary of words and their frequencies sorted by frequency in descending order, and by word alphabetically for words with the same frequency. from collections import Counter # Count the frequency of each word word_counts = Counter(words) # Sort the dictionary by frequency and then alphabetically sorted_word_counts = dict(sorted(word_counts.items(), key=lambda item: (-item[1], item[0]))) return sorted_word_counts"},{"question":"In this assignment, you are required to implement a function that generates a sequence of Fibonacci numbers and writes them to a file. Your task is to create a function called `write_fibonacci(n, filename)`. Here is the detailed specification for the `write_fibonacci(n, filename)` function: - The function should generate the first `n` Fibonacci numbers. - The Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n-1) + F(n-2)` for `n > 1` - The function should write these numbers to a file named by the `filename` parameter. - Each Fibonacci number should be written on a new line in the file. **Function Signature:** ```python def write_fibonacci(n: int, filename: str) -> None: pass ``` **Example Usage:** ```python # To generate the first 10 Fibonacci numbers and save them to \'fibonacci.txt\' write_fibonacci(10, \'fibonacci.txt\') ``` **Content of \'fibonacci.txt\' after the function call:** ``` 0 1 1 2 3 5 8 13 21 34 ``` Complete the function `write_fibonacci` such that it adheres to the specifications and correctly generates the Fibonacci sequence and writes it to the specified file.","solution":"def write_fibonacci(n: int, filename: str) -> None: Generate the first n Fibonacci numbers and write them to a file. Args: n (int): Number of Fibonacci numbers to generate. filename (str): The name of the file to write the Fibonacci numbers to. if n <= 0: return fibonacci_numbers = [0, 1] for i in range(2, n): fibonacci_numbers.append(fibonacci_numbers[-1] + fibonacci_numbers[-2]) # If n == 1, we should only include the first Fibonacci number if n == 1: fibonacci_numbers = fibonacci_numbers[:1] with open(filename, \'w\') as file: for number in fibonacci_numbers: file.write(f\\"{number}n\\")"},{"question":"You are given a CSV file containing data of transactions, and your task is to analyze this data to determine the total sales for each product category. For this problem, you need to utilize Python\'s `csv` and `collections` libraries to achieve this task. Your function, named `calculate_total_sales`, should: 1. Read the CSV file named `transactions.csv`. 2. Each row in the CSV file represents a single transaction and has the following columns: - `transaction_id` (str): The unique identifier for the transaction. - `product_category` (str): The category of the product sold. - `amount` (float): The amount of the transaction. 3. Calculate the total sales for each product category. 4. Return a dictionary where the keys are product categories and the values are the corresponding total sales. Here is the function signature: ```python def calculate_total_sales(filename: str = \'transactions.csv\') -> dict: pass ``` # Input: - `filename` (str): Optional. The filename containing the transaction data. Default is `transactions.csv`. # Output: - A dictionary where keys are the product categories (str) and values are the total sales (float) for each category. # Example: Assume the content of `transactions.csv` is: ``` transaction_id,product_category,amount 1,Electronics,1200.50 2,Furniture,300.75 3,Electronics,800.25 4,Clothing,150.00 5,Furniture,450.00 6,Clothing,200.00 ``` The function should return: ```python { \'Electronics\': 2000.75, \'Furniture\': 750.75, \'Clothing\': 350.00 } ``` # Constraints: - The CSV file will always contain valid transactions data. - Assume well-formatted CSV with no missing or invalid entries. - Amounts are always non-negative numbers. - Handle large datasets efficiently using appropriate data structures.","solution":"import csv from collections import defaultdict def calculate_total_sales(filename: str = \'transactions.csv\') -> dict: total_sales = defaultdict(float) with open(filename, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: category = row[\'product_category\'] amount = float(row[\'amount\']) total_sales[category] += amount return dict(total_sales)"},{"question":"Write a function named `analyze_temperature_readings` that takes a list of daily temperature readings for a week (7 days) and returns a dictionary containing the following information: 1. The highest temperature of the week. 2. The lowest temperature of the week. 3. The average temperature of the week. 4. The number of days with above-average temperatures. 5. The number of days with below-average temperatures. If the input list does not contain exactly 7 elements, the function should raise a `ValueError` with the message \\"The input list must contain exactly 7 temperature readings.\\" # Example Usage ```python readings = [70, 75, 80, 82, 78, 74, 79] result = analyze_temperature_readings(readings) print(result) # Expected output: # { # \'highest\': 82, # \'lowest\': 70, # \'average\': 76.85714285714286, # \'above_average_days\': 4, # \'below_average_days\': 3 # } ``` # Requirements 1. The function should accept a single parameter `readings` which is a list of integers or floats. 2. The function should return a dictionary as specified above. 3. If the input list does not have exactly 7 elements, the function should raise a `ValueError` with the appropriate message. 4. Calculate the average temperature to a precision that allows differentiation of above-average and below-average days based on the comparator used.","solution":"def analyze_temperature_readings(readings): This function analyzes a list of 7 daily temperature readings and returns a dictionary with the highest, lowest, and average temperatures of the week, and the count of days with above-average and below-average temperatures. :param readings: List of daily temperature readings for a week (7 readings). :return: Dictionary with highest, lowest, average temperatures, number of above-average days, and number of below-average days. if len(readings) != 7: raise ValueError(\\"The input list must contain exactly 7 temperature readings.\\") highest = max(readings) lowest = min(readings) average = sum(readings) / len(readings) above_average_days = sum(1 for temp in readings if temp > average) below_average_days = sum(1 for temp in readings if temp < average) return { \'highest\': highest, \'lowest\': lowest, \'average\': average, \'above_average_days\': above_average_days, \'below_average_days\': below_average_days }"},{"question":"You are building an inventory management system for a bookstore. The inventory data is represented in a JSON format and contains details about books such as ISBN, title, author, genre, and quantity. Your objective is to write a function that updates the inventory based on a list of sales transactions. Each transaction specifies an ISBN and the number of copies sold. Your function should return the updated inventory, where the quantity of each book has been appropriately adjusted. The JSON data for the inventory is in the following format: ```json { \\"books\\": [ { \\"isbn\\": \\"12345\\", \\"title\\": \\"Book 1\\", \\"author\\": \\"Author A\\", \\"genre\\": \\"Fiction\\", \\"quantity\\": 10 }, { \\"isbn\\": \\"67890\\", \\"title\\": \\"Book 2\\", \\"author\\": \\"Author B\\", \\"genre\\": \\"Non-Fiction\\", \\"quantity\\": 5 } ] } ``` A sales transaction is represented as a dictionary in the following format: ```json { \\"isbn\\": \\"12345\\", \\"sold\\": 2 } ``` Your task is to: 1. Write a function `update_inventory(inventory: dict, transactions: list) -> dict` that takes in the current inventory and a list of transactions. 2. Update the quantity of each book in the inventory based on the sales transactions. 3. Return the updated inventory. # Function Signature ```python def update_inventory(inventory: dict, transactions: list) -> dict: # Your code here ``` # Example Usage ```python inventory = { \\"books\\": [ { \\"isbn\\": \\"12345\\", \\"title\\": \\"Book 1\\", \\"author\\": \\"Author A\\", \\"genre\\": \\"Fiction\\", \\"quantity\\": 10 }, { \\"isbn\\": \\"67890\\", \\"title\\": \\"Book 2\\", \\"author\\": \\"Author B\\", \\"genre\\": \\"Non-Fiction\\", \\"quantity\\": 5 } ] } transactions = [ {\\"isbn\\": \\"12345\\", \\"sold\\": 2}, {\\"isbn\\": \\"67890\\", \\"sold\\": 1} ] print(update_inventory(inventory, transactions)) # Expected Output: { # \\"books\\": [ # { # \\"isbn\\": \\"12345\\", # \\"title\\": \\"Book 1\\", # \\"author\\": \\"Author A\\", # \\"genre\\": \\"Fiction\\", # \\"quantity\\": 8 # }, # { # \\"isbn\\": \\"67890\\", # \\"title\\": \\"Book 2\\", # \\"author\\": \\"Author B\\", # \\"genre\\": \\"Non-Fiction\\", # \\"quantity\\": 4 # } # ] # } ```","solution":"def update_inventory(inventory: dict, transactions: list) -> dict: Updates the quantity of books in the inventory based on the sales transactions. Parameters: inventory (dict): The current inventory data. transactions (list): A list of sales transactions. Returns: dict: The updated inventory. isbn_to_book = {book[\'isbn\']: book for book in inventory[\'books\']} for transaction in transactions: isbn = transaction[\'isbn\'] sold = transaction[\'sold\'] if isbn in isbn_to_book: isbn_to_book[isbn][\'quantity\'] -= sold return inventory"},{"question":"Design a function that receives a list of tuples, each containing a product name and its price. The function should categorize the products into three price ranges: \\"budget\\" (price < 10), \\"standard\\" (10 ≤ price < 50), and \\"premium\\" (price ≥50). Each price range should be represented in a dictionary where the keys are the range categories and the values are lists of product names in that range. Products should be sorted alphabetically within their respective categories. The function should raise a ValueError if any tuple does not contain exactly two elements or if the second element is not a number (int or float). The function should output: dict: A dictionary with three keys (\\"budget\\", \\"standard\\", \\"premium\\"), each containing a list of product names sorted alphabetically. You should write self-contained code starting with: ``` def categorize_products(products): ```","solution":"def categorize_products(products): Categorize products into \'budget\', \'standard\', and \'premium\' based on their prices. Params: products (list of tuple): A list where each tuple contains a product name (str) and its price (int or float) Returns: dict: A dictionary with keys \'budget\', \'standard\', \'premium\', each containing a list of product names sorted alphabetically. Raises: ValueError: If any tuple does not contain exactly two elements or if the second element is not a number (int or float). # Initialize the result dictionary categories = { \\"budget\\": [], \\"standard\\": [], \\"premium\\": [] } for product in products: if not isinstance(product, tuple) or len(product) != 2: raise ValueError(\\"Each product must be a tuple with exactly two elements.\\") name, price = product if not isinstance(price, (int, float)): raise ValueError(\\"The second element of each tuple must be a number (int or float).\\") if price < 10: categories[\\"budget\\"].append(name) elif price < 50: categories[\\"standard\\"].append(name) else: categories[\\"premium\\"].append(name) # Sort product names in each category alphabetically for key in categories: categories[key].sort() return categories"},{"question":"You have a log file named `web_access.log` which records the access to a website. Each line in the log file contains the following information space-separated: IP address, access date-time, request method, URL, response status code, and the size of the response in bytes. Your task is to write a function called `parse_web_access_log` that reads the log file, processes each line, and returns a list of dictionaries. Each dictionary should represent a single log entry, with keys \'ip\', \'datetime\', \'method\', \'url\', \'status_code\', and \'size\', corresponding to each piece of information in the log line. **Requirements:** 1. Use the `open` function to read the log file line by line. 2. Split each line into its respective components. 3. Convert the response size and status code to integers. 4. Return a list of dictionaries where each dictionary represents a parsed log entry. **Function Signature:** ```python def parse_web_access_log(file_path: str) -> list[dict]: pass ``` Inputs: - `file_path` (str): The path to the `web_access.log` file. Output: - A list of dictionaries where each dictionary corresponds to a log entry. Example Input: ``` 192.168.0.1 2023-10-10T14:48:00 GET /home 200 1024 192.168.0.2 2023-10-10T14:49:00 POST /login 401 512 ``` Example Output: ```python [ { \'ip\': \'192.168.0.1\', \'datetime\': \'2023-10-10T14:48:00\', \'method\': \'GET\', \'url\': \'/home\', \'status_code\': 200, \'size\': 1024 }, { \'ip\': \'192.168.0.2\', \'datetime\': \'2023-10-10T14:49:00\', \'method\': \'POST\', \'url\': \'/login\', \'status_code\': 401, \'size\': 512 } ] ```","solution":"def parse_web_access_log(file_path: str) -> list[dict]: log_entries = [] with open(file_path, \'r\') as file: for line in file: parts = line.strip().split() entry = { \'ip\': parts[0], \'datetime\': parts[1], \'method\': parts[2], \'url\': parts[3], \'status_code\': int(parts[4]), \'size\': int(parts[5]) } log_entries.append(entry) return log_entries"},{"question":"You are working on a system to manage inventory for a small store. The store sells various products and you need to generate inventory reports based on specified criteria. Your task is to complete the function `inventory_report(products, criteria)`: 1. **Function Definition:** - **`inventory_report(products, criteria)`** - **Arguments:** - `products` (list of dicts): Each dictionary contains details about a product with keys `name` (str), `category` (str), `price` (float), and `quantity` (int). - `criteria` (str): Specifies the criteria for the report. It can be \\"category\\", \\"price>50\\", \\"stock<10\\". 2. **Functionality:** - The function should filter the products based on the specified `criteria` and return a list of product names that match the criteria. - If the criteria is \\"category\\", group products by their category and keep the name of products for each category. - If the criteria is \\"price>50\\", filter out products priced above 50 units. - If the criteria is \\"stock<10\\", filter out products that have a quantity less than 10. 3. **Return Value:** - The function should return a dictionary where: - The keys are the category names (when criteria is \\"category\\") and the values are lists of product names in those categories. - The key is \\"price>50\\" and the value is a list of product names priced above 50 (when criteria is \\"price>50\\"). - The key is \\"stock<10\\" and the value is a list of product names with a stock less than 10 (when criteria is \\"stock<10\\"). 4. **Example:** ```python products = [ {\'name\': \'apple\', \'category\': \'fruit\', \'price\': 55.0, \'quantity\': 20}, {\'name\': \'banana\', \'category\': \'fruit\', \'price\': 30.0, \'quantity\': 5}, {\'name\': \'carrot\', \'category\': \'vegetable\', \'price\': 25.0, \'quantity\': 12}, {\'name\': \'donut\', \'category\': \'snack\', \'price\': 60.0, \'quantity\': 7} ] criteria = \\"category\\" # Output: {\'fruit\': [\'apple\', \'banana\'], \'vegetable\': [\'carrot\'], \'snack\': [\'donut\']} criteria = \\"price>50\\" # Output: {\'price>50\': [\'apple\', \'donut\']} criteria = \\"stock<10\\" # Output: {\'stock<10\': [\'banana\', \'donut\']} ```","solution":"def inventory_report(products, criteria): Generates an inventory report based on the specified criteria. Arguments: - products: list of dicts, where each dict contains product details with keys \'name\', \'category\', \'price\', and \'quantity\'. - criteria: str, specifies the criteria for the report. Can be \\"category\\", \\"price>50\\", or \\"stock<10\\". Returns: - dict: Dictionary with keys and values based on the criteria. if criteria == \\"category\\": report = {} for product in products: cat = product[\'category\'] if cat not in report: report[cat] = [] report[cat].append(product[\'name\']) return report elif criteria == \\"price>50\\": return {\'price>50\': [product[\'name\'] for product in products if product[\'price\'] > 50]} elif criteria == \\"stock<10\\": return {\'stock<10\': [product[\'name\'] for product in products if product[\'quantity\'] < 10]} else: return {}"},{"question":"In computer graphics, performing transformations such as translation, scaling, and rotation on points is essential for various applications including animations, simulations, and modeling. One common representation to handle transformations is using homogenous coordinates and matrices. You are required to write a function named `apply_transformation_matrix(points, transformation_matrix)` that applies a given transformation matrix to a set of 2D points. The transformation should be done in homogeneous coordinates. The inputs to the function are as follows: - `points`: a 2D NumPy array of shape (N, 2), where N is the number of points. Each row represents a point with its (x, y) coordinates. - `transformation_matrix`: a 2D NumPy array of shape (3, 3) representing the transformation matrix. The function should return a 2D NumPy array of shape (N, 2) representing the transformed points. The steps to apply the transformation are: 1. Convert the 2D points to homogeneous coordinates by appending a column of ones. 2. Perform matrix multiplication of the points in homogeneous coordinates with the transformation matrix. 3. Convert back to Cartesian coordinates by dividing by the homogeneous coordinate. Include the following NumPy functions in your implementation: `numpy.dot`, `numpy.hstack`. Example: ```python import numpy as np points = np.array([[1, 2], [3, 4], [5, 6]]) transformation_matrix = np.array([ [1, 0, 2], [0, 1, 3], [0, 0, 1] ]) transformed_points = apply_transformation_matrix(points, transformation_matrix) print(transformed_points) ``` Expected Output: ``` [[3. 5.] [5. 7.] [7. 9.]] ```","solution":"import numpy as np def apply_transformation_matrix(points, transformation_matrix): Applies a given transformation matrix to a set of 2D points in homogeneous coordinates. Args: - points (np.ndarray): 2D array of shape (N, 2) where N is the number of points. - transformation_matrix (np.ndarray): 2D array of shape (3, 3) representing the transformation matrix. Returns: - np.ndarray: 2D array of shape (N, 2) representing the transformed points. # Convert points to homogeneous coordinates by appending a column of ones ones = np.ones((points.shape[0], 1)) homogeneous_points = np.hstack((points, ones)) # Perform matrix multiplication transformed_homogeneous_points = np.dot(homogeneous_points, transformation_matrix.T) # Convert back to Cartesian coordinates by dividing by the homogeneous coordinate transformed_points = transformed_homogeneous_points[:, :2] / transformed_homogeneous_points[:, 2][:, np.newaxis] return transformed_points"},{"question":"You are required to write a function that normalizes a given matrix with respect to its rows. This function, called `normalize_rows`, will take in a 2D list or a NumPy array where each row represents a separate data point, and each column represents a feature. The goal is to normalize each row so that the values in a row sum up to 1. Specifically, your function should: 1. For each row, compute the sum of the elements. 2. Divide each element in the row by the row sum to normalize the values. Your function should have the following signature: ```python import numpy as np def normalize_rows(matrix): # Your code here ``` - `matrix`: 2D list or NumPy array where each row represents a separate data point and each column represents a feature. **Requirements:** - You should ensure the output is a NumPy array, even if the input is a 2D list. - If a row sum is zero, handle it by setting that row to have all elements as zero. # Example Usage Given the following matrix: ``` matrix = [ [1, 2, 3], [4, 5, 6], [0, 0, 0], [7, 8, 9] ] ``` Your function should normalize each row such that the sum of elements in each row equals 1. # Expected Output The function should return the following matrix: ``` [ [0.16666667, 0.33333333, 0.5], [0.26666667, 0.33333333, 0.4], [0, 0, 0], [0.29166667, 0.33333333, 0.375] ] ``` # Example Code ```python import numpy as np matrix = [ [1, 2, 3], [4, 5, 6], [0, 0, 0], [7, 8, 9] ] normalized_matrix = normalize_rows(matrix) print(normalized_matrix) ``` The `normalize_rows` function should ensure that the output matches the expected normalized matrix.","solution":"import numpy as np def normalize_rows(matrix): Normalizes the rows of a given matrix such that the sum of elements in each row equals 1. Parameters: matrix (2D list or numpy array): Input matrix with rows representing data points and columns representing features. Returns: numpy array: The normalized matrix with the same shape as input, where each row sums up to 1. matrix = np.array(matrix, dtype=float) row_sums = matrix.sum(axis=1) row_sums[row_sums == 0] = 1 # To avoid division by zero normalized_matrix = matrix / row_sums[:, np.newaxis] return normalized_matrix"},{"question":"You are given a list of tuples representing edges of an undirected, weighted graph, where each tuple consists of two nodes and the weight of the edge connecting them. Your task is to implement a function `min_spanning_tree(graph)` that calculates the Minimum Spanning Tree (MST) of the graph using Prim\'s algorithm. The function should return a set of edges that form the MST. If the graph is disconnected, return `None`. **Function Signature:** ```python def min_spanning_tree(graph): pass ``` **Parameters:** - `graph`: A list of tuples, where each tuple `(u, v, w)` represents an edge between nodes `u` and `v` with weight `w`. **Returns:** - A set of tuples representing the edges in the MST. If the graph is disconnected, return `None`. **Example:** ```python graph = [(0, 1, 1), (0, 2, 3), (1, 2, 1), (1, 3, 4), (2, 3, 2)] print(min_spanning_tree(graph)) # Expected output: {(0, 1, 1), (1, 2, 1), (2, 3, 2)} graph = [(0, 1, 1), (0, 2, 3), (2, 3, 2)] print(min_spanning_tree(graph)) # Expected output: None ``` To solve this problem, ensure you read the graph structure carefully and correctly implement Prim\'s algorithm to find the MST.","solution":"import heapq from collections import defaultdict def min_spanning_tree(graph): Returns the Minimum Spanning Tree (MST) of a given undirected, weighted graph using Prim\'s algorithm. If the graph is disconnected, returns None. if not graph: return None # Build adjacency list adj = defaultdict(list) for u, v, w in graph: adj[u].append((w, v)) adj[v].append((w, u)) # Start the MST from the first vertex start_vertex = graph[0][0] visited = set([start_vertex]) edges = [(w, start_vertex, v) for w, v in adj[start_vertex]] heapq.heapify(edges) mst = set() while edges: w, u, v = heapq.heappop(edges) if v not in visited: visited.add(v) mst.add((u, v, w)) for next_w, next_v in adj[v]: if next_v not in visited: heapq.heappush(edges, (next_w, v, next_v)) # Check if MST includes all vertices if len(visited) != len(adj): return None return mst"},{"question":"You are required to create a Python function that processes a list of integers and identifies elements that are local maxima. An element is considered a local maximum if it is greater than its immediate neighbors. Your task is to write the function `find_local_maxima`, which takes a list of integers and returns a list of the local maxima. **Function Name:** `find_local_maxima(lst)` **Inputs:** - `lst`: A list of integers of length ( n ) (where ( n geq 1 )). **Outputs:** - A list of integers containing the local maxima. **Requirements:** - The function should return an empty list if there are no local maxima. - Ensure the function works correctly for various list lengths and values, including lists with repeated values. - Handle edge cases where the list has fewer than three elements separately. **Example:** ```python result = find_local_maxima([1, 3, 2, 4, 1]) print(result) # Output: [3, 4] result = find_local_maxima([1, 2, 3, 4, 5]) print(result) # Output: [] result = find_local_maxima([5, 4, 3, 2, 1]) print(result) # Output: [] result = find_local_maxima([3, 3, 3, 3, 3]) print(result) # Output: [] result = find_local_maxima([2]) print(result) # Output: [] ```","solution":"def find_local_maxima(lst): Returns a list of local maxima in the input list. An element is a local maximum if it is greater than its immediate neighbors. Parameters: lst (list): A list of integers. Returns: list: A list of local maxima. n = len(lst) if n < 3: return [] local_maxima = [] for i in range(1, n - 1): if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]: local_maxima.append(lst[i]) return local_maxima"},{"question":"You are tasked with implementing a function that simulates a simple banking system. The function should be capable of processing a series of transactions represented as a list of dictionaries. Each transaction can be either a deposit or a withdrawal, and the function should maintain and update the account balance accordingly. For this task, ensure to handle potential errors, such as insufficient funds for a withdrawal. Your function should have the following signature: ```python def process_transactions(transactions: list, initial_balance: float) -> float: ``` # Input - `transactions`: A list of dictionaries where each dictionary represents a transaction with the following keys: - `type`: A string either `\\"deposit\\"` or `\\"withdrawal\\"` indicating the type of transaction. - `amount`: A float representing the transaction amount. - `initial_balance`: A float representing the starting balance of the account. # Output - Return a float representing the final balance after processing all transactions. # Additional Details - If a withdrawal transaction requests more money than is available in the account, it should be skipped, and the account balance should remain unchanged. - If a deposit transaction is processed, the amount is added to the account balance. # Example Given: ```python transactions = [ {\\"type\\": \\"deposit\\", \\"amount\\": 100.0}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 50.0}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 60.0}, {\\"type\\": \\"deposit\\", \\"amount\\": 70.0}, ] initial_balance = 20.0 ``` The function should return the final balance after processing all transactions: `140.0`.","solution":"def process_transactions(transactions: list, initial_balance: float) -> float: Processes a list of transactions and returns the final account balance. balance = initial_balance for transaction in transactions: if transaction[\\"type\\"] == \\"deposit\\": balance += transaction[\\"amount\\"] elif transaction[\\"type\\"] == \\"withdrawal\\": if transaction[\\"amount\\"] <= balance: balance -= transaction[\\"amount\\"] else: raise ValueError(f\\"Unknown transaction type: {transaction[\'type\']}\\") return balance"},{"question":"You are required to write a function named `matrix_sine` which utilizes the `numpy.sin` function to compute the element-wise sine of an array of angles. Specifically, the function should take one argument: 1. `angles` - a 2D array-like structure (list of lists, tuple of tuples, or a 2D NumPy array) containing the angles in radians. The function should return a 2D NumPy array where each element is the sine of the corresponding element in the input array. You must use the `numpy.sin` function to achieve this. # Requirements: - The function must use the `numpy.sin` function from the NumPy library. - The input should be converted to a NumPy array if it is not already one. # Example: ```python import numpy as np angles = [[0, np.pi/2, np.pi], [3*np.pi/2, 2*np.pi, 5*np.pi/2]] print(matrix_sine(angles)) # Expected Output: # array([[ 0.0000000e+00, 1.0000000e+00, 1.2246468e-16], # [-1.0000000e+00, -2.4492936e-16, 1.0000000e+00]]) angles = np.array([[0, np.pi/4, np.pi/2], [np.pi, 3*np.pi/4, 2*np.pi]]) print(matrix_sine(angles)) # Expected Output: # array([[ 0. , 0.70710678, 1. ], # [ 0. , 0.70710678, -2.4492936e-16]]) ```","solution":"import numpy as np def matrix_sine(angles): Computes the element-wise sine of an array of angles in radians. Parameters: angles (array-like): A 2D array-like structure (list of lists, tuple of tuples, or a 2D NumPy array) Returns: np.ndarray: A 2D NumPy array where each element is the sine of the corresponding element in the input array angles_array = np.array(angles) # Convert the input to a NumPy array if it isn\'t already return np.sin(angles_array) # Apply the element-wise sine function"},{"question":"You are required to implement a function called `count_words_in_files` that takes a list of file paths as an argument and returns a dictionary where the keys are the file names and the values are the number of words in each file. For this task, you will need to use Python\'s `os` and `re` libraries. 1. **Iterate through the file paths**: Loop through each file path in the input list. 2. **Extract File Name**: Use the `os.path.basename` method to get the file name from the file path. 3. **Read File Content**: Open and read the content of each file. 4. **Count Words**: Utilize the `re.findall` method to count the words in the file. Consider a word as any sequence of characters separated by whitespace. 5. **Store in Dictionary**: Store the file name and the corresponding word count in a dictionary. 6. **Return the Dictionary**: Return the dictionary containing file names and their respective word counts. Here\'s a skeleton of what the function might look like: ```python import os import re def count_words_in_files(file_paths): # Function implementation here ``` # Detailed Requirements: - Use `os.path.basename` to extract the file name from each file path. - Open each file in read mode and read its content. - Use `re.findall(r\'bw+b\', content)` to find all words in the file content. - A word is defined as a sequence of word characters (`w`). - Count the number of words found and store the file name and word count in a dictionary. - Return the dictionary after processing all files. # Example: Given a list of file paths: ```python file_paths = [\\"example1.txt\\", \\"example2.txt\\"] ``` If `example1.txt` contains: `Hello, world! This is a test.` and `example2.txt` contains: `Another file with more words...`, The function should return: ```python { \\"example1.txt\\": 6, \\"example2.txt\\": 5 } ```","solution":"import os import re def count_words_in_files(file_paths): word_counts = {} for file_path in file_paths: file_name = os.path.basename(file_path) with open(file_path, \'r\') as file: content = file.read() words = re.findall(r\'bw+b\', content) word_counts[file_name] = len(words) return word_counts"},{"question":"You need to create a function to simulate the propagation of signals over a directed acyclic graph (DAG). Each node in the graph will have an initial signal value, and the signals will propagate through the graph according to specific rules until all nodes have processed their signals. **Function Name:** `propagate_signals` **Parameters:** - `graph` (dict): A dictionary representing the DAG where each key is a node and the value is a list of nodes it points to (its neighbors). - `signals` (dict): A dictionary where each key is a node and the value is the initial signal value for that node. **Requirements:** 1. The function should propagate the signals through the graph such that each node processes its signal by multiplying it by the sum of the signals of its neighbors. 2. The propagation stops when all nodes have processed their signals exactly once. **Behavior:** - The function should return a dictionary where each key is a node and the value is its final signal value after propagation. - Propagation should respect the directionality of the edges in the graph. **Example Use Case:** ```python def propagate_signals(graph, signals): # Dictionary to hold the final signal values after propagation final_signals = {node: val for node, val in signals.items()} # Topological sorting of the graph\'s nodes def topological_sort(graph): from collections import deque, defaultdict in_degree = defaultdict(int) for node in graph: in_degree[node] += 0 # Ensure the node is in in_degree for neighbor in graph[node]: in_degree[neighbor] += 1 q = deque([n for n in in_degree if in_degree[n] == 0]) topo_order = [] while q: current = q.popleft() topo_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: q.append(neighbor) return topo_order topo_order = topological_sort(graph) # Process signals for node in topo_order: neighbors = graph[node] if neighbors: final_signals[node] *= sum(final_signals[neigh] for neigh in neighbors) return final_signals # Example DAG and signal initial values graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'D\'], \'D\': [] } signals = { \'A\': 3, \'B\': 2, \'C\': 1, \'D\': 0 } # Propagate signals final_signals = propagate_signals(graph, signals) print(final_signals) # Expected Output: Final signal values in the graph after propagation ``` In this example, the directed acyclic graph (DAG) comprises nodes \'A\', \'B\', \'C\', and \'D\', with initial signal values of 3, 2, 1, and 0, respectively. The function `propagate_signals` processes these signals following the graph\'s structure and rules, resulting in the final signal values for each node.","solution":"def propagate_signals(graph, signals): # Dictionary to hold the final signal values after propagation final_signals = {node: val for node, val in signals.items()} # Topological sorting of the graph\'s nodes def topological_sort(graph): from collections import deque, defaultdict in_degree = defaultdict(int) for node in graph: in_degree[node] += 0 # Ensure the node is in in_degree for neighbor in graph[node]: in_degree[neighbor] += 1 q = deque([n for n in in_degree if in_degree[n] == 0]) topo_order = [] while q: current = q.popleft() topo_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: q.append(neighbor) return topo_order topo_order = topological_sort(graph) # Process signals for node in topo_order: neighbors = graph[node] if neighbors: final_signals[node] *= sum(final_signals[neigh] for neigh in neighbors) return final_signals"},{"question":"You are given a string `s` that represents a computer file path. Implement a function named `simplify_path` that simplifies the path and returns the canonical path. The function should follow these rules to simplify the path: 1. A single dot `.` means the current directory. 2. A double dot `..` means moving up one directory. 3. Multiple consecutive slashes should be replaced by a single slash. 4. The returned canonical path should start with a single slash `/`. 5. The canonical path should not end with a slash `/` (unless it is the root directory). The function signature is: ```python def simplify_path(s): Simplifies a given file path. Parameters: s (str): The input file path to be simplified. Returns: str: The simplified canonical path. ``` # Constraints: - The input string consists of printable ASCII characters. - The length of the input string is at most 3000 characters. # Example: ```python # Example 1 s1 = \\"/home/\\" print(simplify_path(s1)) # Expected Output: \\"/home\\" # Example 2 s2 = \\"/../\\" print(simplify_path(s2)) # Expected Output: \\"/\\" # Example 3 s3 = \\"/home//foo/\\" print(simplify_path(s3)) # Expected Output: \\"/home/foo\\" # Example 4 s4 = \\"/a/./b/../../c/\\" print(simplify_path(s4)) # Expected Output: \\"/c\\" ```","solution":"def simplify_path(s): Simplifies a given file path. Parameters: s (str): The input file path to be simplified. Returns: str: The simplified canonical path. stack = [] parts = s.split(\'/\') for part in parts: if part == \'\' or part == \'.\': continue elif part == \'..\': if stack: stack.pop() else: stack.append(part) canonical_path = \'/\' + \'/\'.join(stack) return canonical_path"},{"question":"You are required to write a Python function named `merge_sort_lists` that merges two sorted lists into a single sorted list. The lists can contain any comparable elements (e.g., integers, strings, etc.). # Function Signature: ```python def merge_sort_lists(list1: list, list2: list) -> list: ``` # Parameters: - **list1 (list):** The first sorted list. - **list2 (list):** The second sorted list. # Returns: - **list:** A new sorted list that contains all elements from `list1` and `list2`. # Requirements: 1. Do not use Python\'s built-in `sorted()` function. 2. Ensure the merged list remains sorted. # Description: Merging two sorted lists is a fundamental operation often used in various algorithms, such as the merge step in merge sort. Your function should iterate through both input lists simultaneously, adding the smaller element to the new list each time, until one of the lists is exhausted. Then, it should append the remaining elements from the other list. # Example: ```python def merge_sort_lists(list1, list2): # Implementation here pass # Test cases: list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] # Expected output: [1, 2, 3, 4, 5, 6, 7, 8] print(merge_sort_lists(list1, list2)) list1 = [\'apple\', \'banana\', \'cherry\'] list2 = [\'apricot\', \'blueberry\', \'citrus\'] # Expected output: [\'apple\', \'apricot\', \'banana\', \'blueberry\', \'cherry\', \'citrus\'] print(merge_sort_lists(list1, list2)) ``` Ensure your function works for these test cases and others that test the edge cases like one or both lists being empty, lists with duplicate elements, etc.","solution":"def merge_sort_lists(list1, list2): Merge two sorted lists into a single sorted list. Args: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A new sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smaller element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, append them while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, append them while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that takes a list of integers and an integer k as input and returns the list of integers rotated to the right by k steps. You must handle both positive and negative k values and ensure the rotation works for lists of any length without using built-in list rotation functions. The function should: 1. Be able to rotate the list by a positive or negative k value. 2. Handle cases where k is larger than the length of the list. 3. Return the rotated list as output. Example: ``` Input: [1, 2, 3, 4, 5], k=2 Output: [4, 5, 1, 2, 3] Input: [1, 2, 3, 4, 5], k=-2 Output: [3, 4, 5, 1, 2] ``` You should write self-contained code starting with: ``` def rotate_list(nums, k): ``` Output: ``` List[int]: The rotated list of integers. ```","solution":"def rotate_list(nums, k): Rotates the list to the right by k steps. Handles both positive and negative k. :param nums: List of integers to be rotated. :param k: Number of steps to rotate the list by. :return: Rotated list. n = len(nums) if n == 0: return nums k = k % n # Normalize k to be within the range of 0 to n-1 return nums[-k:] + nums[:-k]"},{"question":"You are given a list of customer purchase records, where each record is represented as a dictionary with the keys \'name\', \'item\', and \'amount\'. Your task is to write a Python function `generate_invoice` that groups the total amount spent by each customer and prints a summary invoice. The summary should display each customer\'s name followed by the total amount they spent, sorted alphabetically by customer name. Requirements: - Use the `collections.defaultdict` to accumulate the total amount spent by each customer. - Sort the customer names alphabetically before printing the summary. Function Signature: ```python def generate_invoice(purchases: list) -> None: pass ``` Where: - `purchases` is a list of dictionaries, each containing \'name\' (string), \'item\' (string), and \'amount\' (float). Example Usage: ```python purchases = [ {\'name\': \'Alice\', \'item\': \'Apple\', \'amount\': 2.5}, {\'name\': \'Bob\', \'item\': \'Banana\', \'amount\': 1.2}, {\'name\': \'Alice\', \'item\': \'Orange\', \'amount\': 3.0}, {\'name\': \'Charlie\', \'item\': \'Mango\', \'amount\': 5.0}, {\'name\': \'Bob\', \'item\': \'Grapes\', \'amount\': 2.8} ] generate_invoice(purchases) ``` The above code will print: ``` Alice: 5.5 Bob: 4.0 Charlie: 5.0 ```","solution":"from collections import defaultdict def generate_invoice(purchases): Generates an invoice that shows the total amount spent by each customer. :param purchases: List of dictionaries with keys \'name\', \'item\', \'amount\' :return: None totals = defaultdict(float) for purchase in purchases: name = purchase[\'name\'] amount = purchase[\'amount\'] totals[name] += amount for name in sorted(totals): print(f\\"{name}: {totals[name]}\\")"},{"question":"You are developing a data processing application in Python using the `pandas` library. The application requires reading a large dataset from a CSV file, filtering the data, and processing it to generate specific statistics. Your task is to implement a function named `filter_and_compute_statistics` that performs the following steps: 1. Read the dataset from a CSV file named `data.csv`, which contains columns `category`, `value1`, and `value2`. 2. Filter the rows where `value1` is greater than 50 and `value2` is less than 100. 3. Group the remaining data by the `category` column. 4. For each group, compute the mean and standard deviation of both `value1` and `value2`. 5. Return a DataFrame containing the results with `category` as the index and columns `mean_value1`, `std_value1`, `mean_value2`, and `std_value2`. You are required to use the `pandas.read_csv` function to read the CSV file. Function signature: `def filter_and_compute_statistics() -> pd.DataFrame` Note: - Ensure you handle any potential issues that may arise from loading the CSV file. - Presume that you have already installed the necessary packages (`pandas`). - Your output DataFrame should have the `category` as the index and the computed statistics as columns.","solution":"import pandas as pd def filter_and_compute_statistics() -> pd.DataFrame: Reads data from \'data.csv\', filters based on given conditions, groups by \'category\', and computes mean and standard deviation of \'value1\' and \'value2\'. Returns a DataFrame with statistics. try: # Load data from CSV file df = pd.read_csv(\'data.csv\') # Filter rows where \'value1\' > 50 and \'value2\' < 100 filtered_df = df[(df[\'value1\'] > 50) & (df[\'value2\'] < 100)] # Group by \'category\' and compute mean and std for \'value1\' and \'value2\' stats_df = filtered_df.groupby(\'category\').agg( mean_value1=(\'value1\', \'mean\'), std_value1=(\'value1\', \'std\'), mean_value2=(\'value2\', \'mean\'), std_value2=(\'value2\', \'std\') ) return stats_df except Exception as e: print(f\\"Error: {e}\\") return pd.DataFrame() # Return empty DataFrame in case of error"},{"question":"Create a function `evaluate_expression` that takes a mathematical expression provided as a string and returns its evaluated result. The input string can include integers, parentheses for grouping, and the operators `+` (addition), `-` (subtraction), `*` (multiplication), and `/` (division). The function should correctly handle the order of operations (PEMDAS/BODMAS rules) and spaces within the expression. Ensure that the division operation produces a floating-point result. **Function Signature**: ```python def evaluate_expression(expression: str) -> float: ``` **Parameters**: - `expression` (str): A string containing a valid mathematical expression which potentially includes integers, parentheses, operators (+, -, *, /), and spaces. **Returns**: - `float`: The numerical result of the evaluated expression. # Example: ```python expression1 = \\"3 + (2 * 5) - 7 / (1 + 1)\\" result1 = evaluate_expression(expression1) print(result1) # Expected output: 9.5 expression2 = \\"(4 + 8) * (6 / 3)\\" result2 = evaluate_expression(expression2) print(result2) # Expected output: 24.0 ``` # Constraints: - Do not use the `eval` function or any built-in function that directly evaluates the expression. - Handle edge cases such as empty strings or invalid expressions by raising a `ValueError` with an appropriate message. # Notes: - Consider implementing a tokenizer to handle the individual components of the expression. - Use the Shunting Yard algorithm or recursive descent parsing to ensure correct evaluation of the expression.","solution":"def evaluate_expression(expression: str) -> float: import re def tokenize(expression): Convert string into a list of tokens (numbers, operators, parentheses). tokens = re.findall(r\'d+.d+|d+|[()+-*/]\', expression.replace(\' \', \'\')) return tokens def shunting_yard(tokens): Convert infix expression to postfix (Reverse Polish Notation). precedence = {\'+\':1, \'-\':1, \'*\':2, \'/\':2} output = [] operators = [] for token in tokens: if re.match(r\'d+\', token): output.append(token) elif token in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[token]): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop the \'(\' while operators: output.append(operators.pop()) return output def evaluate_rpn(rpn): Evaluate expression given in Reverse Polish Notation. stack = [] for token in rpn: if token.isnumeric() or re.match(r\'d+.d+\', token): stack.append(float(token)) else: a = stack.pop() b = stack.pop() if token == \'+\': stack.append(b + a) elif token == \'-\': stack.append(b - a) elif token == \'*\': stack.append(b * a) elif token == \'/\': stack.append(b / a) return stack[0] if not expression: raise ValueError(\\"Invalid expression\\") try: tokens = tokenize(expression) rpn = shunting_yard(tokens) result = evaluate_rpn(rpn) return result except Exception as e: raise ValueError(\\"Error in evaluating expression: \\" + str(e))"},{"question":"Create a function that reads a list of strings, counts the frequency of each unique word (case insensitive), and returns a dictionary with words as keys and their corresponding counts as values. The function should handle punctuation, ignore case, and exclude any numeric strings. You should write self-contained code starting with: ``` import re from collections import defaultdict def word_count(strings_list): ```","solution":"import re from collections import defaultdict def word_count(strings_list): Reads a list of strings, counts the frequency of each unique word (case insensitive), and returns a dictionary with words as keys and their corresponding counts as values. Parameters: strings_list (list of str): List of strings to be processed. Returns: dict: Dictionary with words as keys and their counts as values. word_frequency = defaultdict(int) word_pattern = re.compile(r\'bw+b\') for string in strings_list: words = word_pattern.findall(string.lower()) for word in words: if not word.isnumeric(): word_frequency[word] += 1 return dict(word_frequency)"},{"question":"You are required to write a function named `merge_sorted_arrays` that merges two sorted lists into a single sorted list. This is a common task in various algorithms, particularly in the merge step of the Merge Sort algorithm. The function should take two lists of integers as its input and return a new list that contains all the elements from the input lists in sorted order. Your implementation should not use the built-in sorting functions but instead merge the lists by comparing elements one by one. This ensures that the merging process is efficient and operates in linear time relative to the sum of the lengths of the input lists. Here is the signature of the function you need to implement: ```python def merge_sorted_arrays(list1: list, list2: list) -> list: Merge two sorted lists into a single sorted list. # Your code here ``` For example: - For `list1 = [1, 3, 5]` and `list2 = [2, 4, 6]`, the output should be: ``` [1, 2, 3, 4, 5, 6] ``` - For `list1 = [0, 7, 8]` and `list2 = [2, 4, 9]`, the output should be: ``` [0, 2, 4, 7, 8, 9] ``` Edge cases to consider: - If one or both of the input lists are empty, the function should return the non-empty list or an empty list if both are empty. Write the code for `merge_sorted_arrays` and make sure it merges the two sorted lists efficiently without using any built-in sorting functions.","solution":"def merge_sorted_arrays(list1, list2): Merge two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # While both lists have unexamined elements while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add the remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Add the remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a collection of strings and you need to perform a **word frequency analysis** using Python. Implement a function that processes a list of strings and returns a dictionary with each word and its corresponding frequency count. Your task is to complete the function `word_frequency_analysis(strings)` with the following specifications: 1. **Function Signature**: ```python def word_frequency_analysis(strings): ``` 2. **Inputs**: - `strings`: A list of strings where each string is a sequence of words separated by spaces. Each word only consists of alphabetic characters and the strings can be of any length. 3. **Output**: - `frequency_dict`: A dictionary where the keys are words and the values are the frequency counts of those words across all the strings in the input list. 4. **Instructions**: - The function should ignore case (i.e., treat \\"Word\\" and \\"word\\" as the same word). - Words should include only alphabetic characters. No punctuation marks or numbers. - Return the frequency dictionary sorted by words in ascending order. **Example**: ```python strings = [ \\"Hello world\\", \\"world of programming\\", \\"Programming in Python\\", \\"hello Python world\\" ] print(word_frequency_analysis(strings)) # Expected output: {\'hello\': 2, \'in\': 1, \'of\': 1, \'programming\': 2, \'python\': 2, \'world\': 3} ``` **Notes**: - Ensure that your solution correctly handles upper and lower case words by normalizing them to lower case. - The returned dictionary must be sorted by the words (keys) in ascending order.","solution":"def word_frequency_analysis(strings): Perform word frequency analysis on a list of strings. The analysis is case-insensitive and the resulting dictionary is sorted by words in ascending order. from collections import defaultdict frequency_dict = defaultdict(int) for string in strings: words = string.lower().split() for word in words: frequency_dict[word] += 1 # Convert defaultdict to a regular dict and sort it by keys sorted_frequency_dict = dict(sorted(frequency_dict.items())) return sorted_frequency_dict"},{"question":"You are given a list of integers and asked to implement a function named `maximum_subarray_sum(arr)` that finds the contiguous subarray (containing at least one number) within the given array which has the largest sum. Your function should also return the starting and ending indices of this subarray for further verification. Here are the specific requirements for your function: 1. **maximum_subarray_sum(arr)**: This function takes a list of integers `arr` as its input. It should return a tuple of three values: the largest sum, the starting index, and the ending index of the subarray that provides this sum. If there are multiple subarrays with the same maximum sum, return the indices of the first such subarray encountered. Requirements: - Use an efficient algorithm like Kadane\'s algorithm, which runs in linear time, to solve this problem. - Keep track of both the maximum sum found and the indices of the subarray providing this sum. Example: ```python maximum_subarray_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) # should return (9, 2, 6) because the subarray [3, 4, -1, 2, 1] has the maximum sum of 9 and starts at index 2 and ends at index 6 maximum_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3]) # should return (7, 2, 6) because the subarray [4, -1, -2, 1, 5] has the maximum sum of 7 and starts at index 2 and ends at index 6 ``` Your function should correctly identify both the maximum sum and the corresponding subarray indices as specified.","solution":"def maximum_subarray_sum(arr): Finds the contiguous subarray within a list that has the largest sum and returns the sum along with the starting and ending indices of the subarray. Parameters: arr (list): List of integers. Returns: tuple: A tuple containing the maximum sum, starting index, and ending index. if not arr: return (0, -1, -1) max_sum = current_sum = arr[0] start = end = 0 temp_start = 0 for i in range(1, len(arr)): if current_sum + arr[i] < arr[i]: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (max_sum, start, end)"},{"question":"You are provided with a text file named `textfile.txt` containing a mixture of words and numbers, all separated by spaces. You need to write a Python function that reads the contents of the file, extracts all the words, and writes them into a new file named `words.txt`. Additionally, the function should print the total count of words written to the new file for verification. To accomplish this task, you need to use the built-in `open` function for file operations. The function should be named `extract_words` and should adhere to the following specifications: 1. Open and read the contents of `textfile.txt`. 2. Extract all words (sequences of alphabetical characters) from the content. 3. Write the extracted words, each on a new line, into a file named `words.txt`. 4. Print the total count of words written to `words.txt`. You are provided with a partially implemented function. Complete the function by focusing on reading, processing the content, and writing the extracted words to a new file. ```python def extract_words(): # Step 1: Open and read the contents of the text file with open(\\"textfile.txt\\", \\"r\\") as file: content = file.read() # Step 2: Extract all words from the content words = [word for word in content.split() if word.isalpha()] # Step 3: Write the extracted words to the new file with open(\\"words.txt\\", \\"w\\") as file: for word in words: file.write(word + \\"n\\") # Step 4: Print the total count of words written print(f\\"Total number of words written: {len(words)}\\") # You can now call the function to see if it works. # extract_words() ```","solution":"def extract_words(): # Step 1: Open and read the contents of the text file with open(\\"textfile.txt\\", \\"r\\") as file: content = file.read() # Step 2: Extract all words from the content words = [word for word in content.split() if word.isalpha()] # Step 3: Write the extracted words to the new file with open(\\"words.txt\\", \\"w\\") as file: for word in words: file.write(word + \\"n\\") # Step 4: Print the total count of words written print(f\\"Total number of words written: {len(words)}\\")"},{"question":"You are tasked with writing a Python function named `find_non_repeating` that finds the first non-repeating character in a given string. This problem is to be solved without using extra data structures for counting characters, but rather through an efficient traversal of the string. Here are the specific requirements for the function: - The function should accept the following parameter: - `s`: A string where you need to find the first non-repeating character. - The function should return: - The first non-repeating character in the string `s`. - If all characters are repeating or if the string is empty, return `None`. - The logic should ensure efficiency in terms of time complexity and avoid using additional memory for storing counts in dictionaries or other collection types. Implement this function to address the problem using iterative techniques while adhering to these constraints. Here\'s a prototype for the function: ```python def find_non_repeating(s: str) -> str: # Your implementation here pass ``` Ensure that you handle various edge cases such as: - Empty string. - String with all characters repeating. - String with a mix of repeating and non-repeating characters.","solution":"def find_non_repeating(s: str) -> str: length = len(s) for i in range(length): is_repeating = False for j in range(length): if i != j and s[i] == s[j]: is_repeating = True break if not is_repeating: return s[i] return None"},{"question":"You are given a task to process a series of transactions for a financial analysis project. Your goal is to calculate the moving average of transaction amounts over a specified window size. This helps in smoothing out short-term fluctuations and highlighting longer-term trends in the data. Your function should be named `moving_average` and must accept two parameters: - `transactions`: A list of integers or floats representing transaction amounts. - `window_size`: An integer representing the size of the window over which the average should be calculated. Your function should then: 1. Validate that `window_size` is a positive integer and less than or equal to the length of the `transactions` list. 2. Calculate the moving average for each position in the list where a full window can be applied. 3. Return a list of moving averages, with each average as a float rounded to two decimal places. Here is an example of how the function should be called: ```python transactions = [100, 200, 300, 400, 500, 600, 700] window_size = 3 result = moving_average(transactions, window_size) print(result) # Output should be: [200.0, 300.0, 400.0, 500.0, 600.0] ``` Ensure that your implementation handles edge cases such as an empty transactions list or an invalid window size appropriately by returning an empty list.","solution":"def moving_average(transactions, window_size): Calculates the moving average of transaction amounts over a specified window size. Args: - transactions: List of integers or floats representing transaction amounts. - window_size: Integer representing the size of the window over which the average should be calculated. Returns: - List of floats representing the moving averages, rounded to two decimal places. if not transactions or window_size <= 0 or window_size > len(transactions): return [] moving_averages = [] for i in range(len(transactions) - window_size + 1): window = transactions[i:i + window_size] window_average = round(sum(window) / window_size, 2) moving_averages.append(window_average) return moving_averages"},{"question":"You are given a list of `weights` representing the weight of each item and a list of `values` representing the value of each item. Also, you have a maximum weight `max_weight` that your bag can carry. Your task is to implement the function `knapsack` to find the maximum total value you can accumulate in your bag without exceeding the weight `max_weight`. You should use the dynamic programming approach to solve this problem. **Function Signature**: ```python def knapsack(weights: list, values: list, max_weight: int) -> int: ``` **Input**: - `weights` (list of ints): A list where each element represents the weight of an item. - `values` (list of ints): A list where each element represents the value of an item. - `max_weight` (int): The maximum weight the bag can carry. **Output**: - An integer representing the maximum total value that can be accumulated in the bag without exceeding the weight `max_weight`. # [Example] ```python weights = [1, 3, 4, 5] values = [1, 4, 5, 7] max_weight = 7 assert knapsack(weights, values, max_weight) == 9 # Selecting items with weights 3 and 4 (total value = 9) weights = [2, 2, 3] values = [4, 3, 5] max_weight = 4 assert knapsack(weights, values, max_weight) == 7 # Selecting items with weights 2 and 2 (total value = 7) ``` # Constraints - The lengths of `weights` and `values` are the same and do not exceed 100. - Individual weights and values range from 1 to 1000. - max_weight ranges from 1 to 10000.","solution":"def knapsack(weights: list, values: list, max_weight: int) -> int: Determines the maximum value that can be carried in a knapsack with a given weight capacity. Args: weights (list of int): List of item weights. values (list of int): List of item values. max_weight (int): Maximum weight capacity of the knapsack. Returns: int: Maximum value that can be accumulated without exceeding max_weight. n = len(weights) dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(max_weight + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight]"},{"question":"Write a function `find_longest_consecutive_sequence(arr)` that takes an unsorted array of integers and returns the length of the longest consecutive elements sequence. Your task is: - Sort the array. - Iterate through the array while keeping track of the length of the current consecutive sequence. - Whenever a break in a sequence is found, compare its length with the longest sequence found so far and update if necessary. - Return the length of the longest sequence found. The function signature should be: ```python def find_longest_consecutive_sequence(arr): Finds the length of the longest consecutive elements sequence. Parameters: ----------- arr : List[int] An unsorted list of integers. Returns: -------- int The length of the longest consecutive elements sequence. ``` # Examples ```python find_longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) # Output: 4 because the longest consecutive elements sequence is [1, 2, 3, 4] find_longest_consecutive_sequence([0, -1, 1, 2, 3]) # Output: 5 because the longest consecutive elements sequence is [-1, 0, 1, 2, 3] ``` Ensure your implementation efficiently handles edge cases such as an empty array or a single-element array.","solution":"def find_longest_consecutive_sequence(arr): Finds the length of the longest consecutive elements sequence. Parameters: ----------- arr : List[int] An unsorted list of integers. Returns: -------- int The length of the longest consecutive elements sequence. if not arr: return 0 arr = sorted(set(arr)) longest_streak = 1 current_streak = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are tasked with creating a function called `find_missing_numbers` that identifies the missing numbers in a given list of integers. The list is supposed to contain consecutive numbers but has some missing elements. The goal is to: 1. Identify the missing numbers in the list based on the smallest and largest number provided within the list. 2. Return a sorted list of the missing numbers. Ensure that the function: - Takes in a single list of integers as a parameter. - Returns a sorted list of the missing numbers. **Function Signature:** ```python def find_missing_numbers(nums): pass ``` **Example Usage:** Given the list `nums` as: ```python nums = [1, 2, 4, 6, 7, 9, 10] ``` When calling: ```python missing_numbers = find_missing_numbers(nums) print(missing_numbers) ``` The output should be: ``` [3, 5, 8] ``` Explanation: - The complete sequence should be `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`. - The missing numbers from the list `[1, 2, 4, 6, 7, 9, 10]` are `[3, 5, 8]`.","solution":"def find_missing_numbers(nums): Returns a sorted list of missing numbers in the given list of integers. The list should contain consecutive numbers but has some missing elements. if not nums: return [] full_set = range(min(nums), max(nums) + 1) missing_nums = sorted(set(full_set) - set(nums)) return missing_nums"},{"question":"Write a function that takes a list of strings, where each string represents a mathematical expression involving addition, subtraction, and/or multiplication. The function should evaluate each expression and return a list of the results. The mathematical expressions are guaranteed to be valid. The function should return: List[float]: A list of evaluation results for each expression in the input list. You should write self-contained code starting with: ``` def evaluate_expressions(expressions): ```","solution":"def evaluate_expressions(expressions): Evaluate a list of mathematical expressions given as strings. Parameters: expressions (list of str): List of strings, where each string is a valid mathematical expression involving addition, subtraction, and/or multiplication. Returns: list of float: Evaluation results of each expression in the input list. results = [] for expr in expressions: result = eval(expr) results.append(result) return results"},{"question":"A company wants to implement a system to manage its product inventory. Each product has a unique product ID, name, quantity in stock, and price per unit. They need a function that can process a list of products and return the product with the highest value in stock (quantity * price). The function should handle cases where there could be multiple products with the same highest value by returning any one of them. Your task is to write a function `find_highest_value_product(products)` that will perform the following steps: 1. Iterate through the list of products, where each product is represented as a dictionary with keys `product_id`, `name`, `quantity`, and `price`. 2. Calculate the value of each product in stock (quantity * price). 3. Determine the product with the highest value. 4. Return a dictionary representing the product with the highest value. **Function Signature:** ```python def find_highest_value_product(products: List[Dict[str, Any]]) -> Dict[str, Any]: ``` **Input:** - `products`: a list of dictionaries, where each dictionary contains the following keys: - `product_id` (str): the unique ID of the product - `name` (str): the name of the product - `quantity` (int): the quantity of the product in stock - `price` (float): the price per unit of the product **Output:** - A dictionary representing the product with the highest value in stock. **Example:** ```python products = [ {\\"product_id\\": \\"A123\\", \\"name\\": \\"Widget\\", \\"quantity\\": 100, \\"price\\": 2.50}, {\\"product_id\\": \\"B456\\", \\"name\\": \\"Gadget\\", \\"quantity\\": 200, \\"price\\": 1.75}, {\\"product_id\\": \\"C789\\", \\"name\\": \\"Doodad\\", \\"quantity\\": 150, \\"price\\": 1.25} ] highest_value_product = find_highest_value_product(products) print(highest_value_product) ``` **Expected Output:** ```python {\\"product_id\\": \\"B456\\", \\"name\\": \\"Gadget\\", \\"quantity\\": 200, \\"price\\": 1.75} ```","solution":"def find_highest_value_product(products): Returns the product with the highest value in stock (quantity * price). if not products: return None highest_value_product = products[0] highest_value = products[0][\'quantity\'] * products[0][\'price\'] for product in products[1:]: current_value = product[\'quantity\'] * product[\'price\'] if current_value > highest_value: highest_value = current_value highest_value_product = product return highest_value_product"},{"question":"You are required to develop a function that calculates the intersection point of two lines, if it exists. Each line is represented by two points on a 2D plane. Given four points, your function should determine if the two lines intersect and, if so, return the intersection point `(x, y)` coordinates. If the lines do not intersect or are coincident, your function should return `None`. Write a function named `find_intersection` that accepts the following parameters: - `x1`, `y1` (float): The x and y coordinates of the first point on the first line. - `x2`, `y2` (float): The x and y coordinates of the second point on the first line. - `x3`, `y3` (float): The x and y coordinates of the first point on the second line. - `x4`, `y4` (float): The x and y coordinates of the second point on the second line. The function should calculate whether and where the two lines intersect using the formula derived from the line equations: ``` Line 1: (x2 - x1)(y - y1) = (y2 - y1)(x - x1) Line 2: (x4 - x3)(y - y3) = (y4 - y3)(x - x3) ``` If the lines intersect, the function should return a tuple `(x, y)`. If the lines are parallel or coincident, the function should return `None`. # Example ```python intersection = find_intersection(1, 1, 4, 4, 1, 8, 2, 4) print(intersection) # Output: None (The lines are parallel and do not intersect) intersection = find_intersection(1, 1, 4, 4, 1, 8, 8, 1) print(intersection) # Output: (4.5, 4.5) (The lines intersect at (4.5, 4.5)) ``` # Requirements: 1. Implement the `find_intersection` function as described. 2. Use proper mathematical operations to determine the intersection point. 3. Ensure the function correctly handles cases where the lines are parallel or coincident.","solution":"def find_intersection(x1, y1, x2, y2, x3, y3, x4, y4): Finds the intersection point of two lines given by points (x1, y1) & (x2, y2) for the first line and (x3, y3) & (x4, y4) for the second line. Returns a tuple (x, y) of the intersection point or None if the lines are parallel or coincident. # Calculate the differences dx1, dy1 = x2 - x1, y2 - y1 dx2, dy2 = x4 - x3, y4 - y3 determinant = dx1 * dy2 - dy1 * dx2 # If determinant is zero, lines are parallel or coincident if determinant == 0: return None # Using Cramer\'s rule to solve for x and y determinant_x = (x3 - x1) * dy2 - (y3 - y1) * dx2 determinant_y = dx1 * (y3 - y1) - dy1 * (x3 - x1) t1 = determinant_x / determinant # t2 = determinant_y / determinant # Not actually needed to determine x intersection_x = x1 + t1 * dx1 intersection_y = y1 + t1 * dy1 return (intersection_x, intersection_y)"},{"question":"You are required to create a Python script that simulates a library management system for borrowing books. The library has a limited number of copies for each book, and a user can borrow a book if it is available. Develop a class-based solution to manage the library\'s operations. - **Class**: `Library` - **Attributes**: - `books`: A dictionary where keys are book titles (strings) and values are the number of copies available (integers). - **Methods**: - `add_book(self, title, count)`: Adds a new book to the library or updates the count if the book already exists. - `borrow_book(self, title)`: Reduces the count of the specified book by one if available, otherwise informs the user that the book is not available. - `return_book(self, title)`: Increments the count of the specified book if it was borrowed before. - `view_books(self)`: Displays all the books in the library with their current availability. Create an instance of the `Library` class and demonstrate its functionality by adding, borrowing, returning, and viewing books. **Example**: ``` library = Library() library.add_book(\\"1984\\", 3) library.add_book(\\"To Kill a Mockingbird\\", 2) library.view_books() # Output: # 1984: 3 copies # To Kill a Mockingbird: 2 copies library.borrow_book(\\"1984\\") library.view_books() # Output: # 1984: 2 copies # To Kill a Mockingbird: 2 copies library.return_book(\\"1984\\") library.view_books() # Output: # 1984: 3 copies # To Kill a Mockingbird: 2 copies ``` **Instructions:** 1. Define a class `Library` with the mentioned attributes and methods. 2. Implement the `add_book`, `borrow_book`, `return_book`, and `view_books` methods. 3. Create an instance of the `Library` class and demonstrate the usage of all methods. 4. Ensure proper handling of cases when a user tries to borrow a book that is not available or return a book that was not borrowed.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title, count): Adds a new book to the library or updates the count if the book already exists. if title in self.books: self.books[title] += count else: self.books[title] = count def borrow_book(self, title): Reduces the count of the specified book by one if available, otherwise informs the user that the book is not available. if title in self.books and self.books[title] > 0: self.books[title] -= 1 return True else: return False, \\"The book is not available\\" def return_book(self, title): Increments the count of the specified book if it was borrowed before. if title in self.books: self.books[title] += 1 return True else: return False, \\"The book was not borrowed from this library\\" def view_books(self): Displays all the books in the library with their current availability. for title, count in self.books.items(): print(f\\"{title}: {count} copies\\")"},{"question":"In this problem, you will implement a function to generate a list of prime numbers using the Sieve of Eratosthenes algorithm. This classic algorithm efficiently identifies all prime numbers up to a given limit. Your task is to understand and deploy this algorithm to solve the problem. Here are the specifications: 1. **Function Name**: `generate_primes` 2. **Parameters**: - `limit` (an integer, representing the upper limit up to which primes are to be generated). 3. **Functionality**: - Implement the Sieve of Eratosthenes algorithm to find all prime numbers up to the given `limit`. - Initialize a list to mark prime numbers and set all entries to `True`. Index 0 and 1 should be set to `False`, as 0 and 1 are not prime numbers. - Iterate over the list, marking the multiples of each prime starting from 2 as `False`. - Collect and return all indices that remain `True` (these are the prime numbers). # Example: ```python def generate_primes(limit): # Input: limit (integer) # Output: List of prime numbers up to `limit` pass # Example usage: print(generate_primes(20)) # Output: [2, 3, 5, 7, 11, 13, 17, 19] ```","solution":"def generate_primes(limit): Returns a list of prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. if limit < 2: return [] # Initialize an array of boolean values is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, int(limit**0.5) + 1): if is_prime[i]: for j in range(i * i, limit + 1, i): is_prime[j] = False return [i for i in range(2, limit + 1) if is_prime[i]]"},{"question":"You are tasked with creating a function to analyze sales data and identify top-selling products per region. Specifically, for each region, you need to find the top 3 products based on sales volume. The function `generate_top_selling_products` should: 1. Read a CSV file containing sales data. 2. Calculate the total sales volume for each product within each region. 3. Identify the top 3 products by sales volume for each region. 4. Save the resulting top-selling products to a new CSV file. The input CSV file and its structure are as follows: - `sales_data.csv`: - Columns: \\"Region\\", \\"ProductID\\", \\"SalesVolume\\" - Example: ``` Region,ProductID,SalesVolume North,P1,200 North,P2,150 South,P3,300 North,P1,100 South,P2,200 ``` The output CSV file should be named `top_selling_products.csv` and have the following columns: - \\"Region\\" - \\"ProductID\\" - \\"TotalSalesVolume\\" You are required to use the `pandas` library for reading from and writing to CSV files, as well as any other processing. Here is the template for the function: ```python import pandas as pd def generate_top_selling_products(sales_file: str, output_file: str): # Your code here ```","solution":"import pandas as pd def generate_top_selling_products(sales_file: str, output_file: str): # Read the sales data from the input CSV file sales_data = pd.read_csv(sales_file) # Calculate the total sales volume for each product within each region sales_summary = sales_data.groupby([\'Region\', \'ProductID\'])[\'SalesVolume\'].sum().reset_index() # Identify the top 3 products by sales volume for each region top_selling = sales_summary.sort_values([\'Region\', \'SalesVolume\'], ascending=[True, False]).groupby(\'Region\').head(3) # Save the resulting top-selling products to the output CSV file top_selling.to_csv(output_file, index=False)"},{"question":"Create a function that simulates generating a list of ordered pairs, representing edges in a graph. Each pair consists of two random integers. The function should serialize this list to JSON and calculate the degree (the number of connected edges) of each node in the graph. Use the \'collections\' module to count the degrees, \'random\' to generate random edges, and \'json\' for serialization. Assume nodes are integers ranging from 1 to 10, and each edge is undirected. The function should output: tuple: A tuple containing: (1) A JSON string of the list of edge pairs. (2) A dictionary with the degree of each node. You should write self-contained code starting with: ``` import collections import random import json def generate_graph(num_edges, seed=None): ```","solution":"import collections import random import json def generate_graph(num_edges, seed=None): Generates a list of edges represented as ordered pairs of random integers, serializes this list to JSON, and calculates the degree of each node in the graph. Parameters: num_edges (int): Number of edges to generate. seed (int, optional): Seed for random number generator. Returns: tuple: A tuple containing: (1) A JSON string of the list of edge pairs. (2) A dictionary with the degree of each node. if seed is not None: random.seed(seed) edges = [] for _ in range(num_edges): u = random.randint(1, 10) v = random.randint(1, 10) if u != v: edges.append((u, v)) # Serialize list of edges to JSON edges_json = json.dumps(edges) # Calculate degrees degree_count = collections.Counter() for u, v in edges: degree_count[u] += 1 degree_count[v] += 1 degree_dict = dict(degree_count) return edges_json, degree_dict"},{"question":"** You are required to implement a function that sorts a list of strings based on their lengths. If two strings have the same length, they should retain their original lexical order. The function, `sort_strings_by_length`, should take a list of strings as input and return a new list sorted by the criteria mentioned above. **Function Signature:** ```python def sort_strings_by_length(strings): # your code here pass ``` **Constraints:** - The input list will contain between 1 and 100 strings. - Each string will have between 1 and 100 characters. - The input list will not contain duplicate strings. **Example:** ```python strings = [\\"word\\", \\"python\\", \\"a\\", \\"list\\", \\"sort\\", \\"by\\", \\"length\\"] sorted_strings = sort_strings_by_length(strings) print(sorted_strings) ``` **Expected Output:** ```python [\'a\', \'by\', \'word\', \'list\', \'sort\', \'python\', \'length\'] ```","solution":"def sort_strings_by_length(strings): Sorts a list of strings based on their lengths. If two strings have the same length, they retain their original order. Parameters: strings (list): The list of strings to be sorted. Returns: list: A new list of strings sorted by length. return sorted(strings, key=len)"},{"question":"Write a function named `compute_average_grades` that processes a list of student grades and computes the average grade for each student along with the overall class average. The function should: 1. Accept a dictionary where the keys are student names and the values are lists of integer grades. 2. For each student, compute the average grade and store the result in a new dictionary where the keys are student names and the values are their average grades. 3. Compute the overall class average from all the grades. 4. Return a tuple containing the dictionary of student averages and the overall class average. Ensure your implementation handles edge cases, such as when the list of grades is empty.","solution":"def compute_average_grades(student_grades): Computes the average grade for each student and the overall class average. Parameters: student_grades (dict): A dictionary where the keys are student names and the values are lists of integer grades. Returns: tuple: A tuple containing a dictionary of student averages and the overall class average. student_averages = {} all_grades = [] for student, grades in student_grades.items(): if grades: average = sum(grades) / len(grades) else: average = 0 student_averages[student] = average all_grades.extend(grades) if all_grades: overall_class_average = sum(all_grades) / len(all_grades) else: overall_class_average = 0 return student_averages, overall_class_average"},{"question":"Write a function that takes in a string as input and returns the longest word from that string. In the case where there are multiple words of the same maximum length, return the word that appears first. Consider words to be sequences of characters separated by spaces, and ignore punctuation. Your code should start with: ``` def longest_word(input_string): ```","solution":"import string def longest_word(input_string): Returns the longest word in the input string. If there are multiple words of the same length, it returns the first one. Punctuation is ignored. # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_string = input_string.translate(translator) # Split the string into words words = cleaned_string.split() # Find the longest word longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"In this task, you will create a function named `extract_and_sort_numbers` that takes a string containing both numbers and alphabet characters as input and returns a sorted list of the extracted numbers in ascending order. The function should follow these steps: 1. Extract all the numerical substrings from the input string. 2. Convert the extracted numerical substrings to integers. 3. Sort the integers in ascending order. 4. Return the sorted list of integers. Here is the detailed function signature: ```python def extract_and_sort_numbers(input_string: str) -> list: Extracts numerical substrings from the input string, converts them to integers, sorts them in ascending order, and returns the sorted list. Parameters: input_string (str): The input string containing both numbers and alphabet characters. Returns: list: List of sorted integers extracted from the input string. pass ``` Example Usage: If your input string is `\\"abc123xyz45de6\\"`, the function should extract the numbers `123`, `45`, and `6`, and return `[6, 45, 123]`. ```python extract_and_sort_numbers(\\"abc123xyz45de6\\") # Output: [6, 45, 123] ``` Note: You can assume that the input string will always contain at least one number and that the numbers will not have leading zeros.","solution":"import re def extract_and_sort_numbers(input_string: str) -> list: Extracts numerical substrings from the input string, converts them to integers, sorts them in ascending order, and returns the sorted list. Parameters: input_string (str): The input string containing both numbers and alphabet characters. Returns: list: List of sorted integers extracted from the input string. # Using regular expression to find all numbers in the string numbers = re.findall(r\'d+\', input_string) # Converting the found numbers to integers numbers = [int(number) for number in numbers] # Sorting the list of numbers numbers.sort() return numbers"},{"question":"Load a text file containing a list of sentences, perform tokenization to split each sentence into words, count the frequency of each word, and visualize the word frequency distribution using a bar chart. The function should handle the following: FileNotFoundError: If the specified text file does not exist. ValueError: If the file cannot be read. The function should output: dict: A dictionary where the keys are words and values are their respective counts. Axes: A Matplotlib Axes object representing the bar chart of word frequencies. The plot includes: Title: \'Word Frequency Distribution\' X-axis label: \'Words\' Y-axis label: \'Frequency\' You should write self-contained code starting with: ``` import os import matplotlib.pyplot as plt from collections import Counter import string def task_func(text_file: str) -> (dict, plt.Axes): ```","solution":"import os import matplotlib.pyplot as plt from collections import Counter import string def task_func(text_file: str) -> (dict, plt.Axes): if not os.path.exists(text_file): raise FileNotFoundError(\\"The specified text file does not exist.\\") try: with open(text_file, \'r\', encoding=\'utf-8\') as file: text = file.read() except Exception as e: raise ValueError(f\\"An error occurred while reading the file: {e}\\") # Tokenization words = text.translate(str.maketrans(\'\', \'\', string.punctuation)).lower().split() # Count the frequency of each word word_freq = Counter(words) # Visualization fig, ax = plt.subplots() ax.bar(word_freq.keys(), word_freq.values()) ax.set_title(\'Word Frequency Distribution\') ax.set_xlabel(\'Words\') ax.set_ylabel(\'Frequency\') plt.xticks(rotation=90) return dict(word_freq), ax"},{"question":"You are working on a friend suggestion system for a social networking platform. Each user can have a certain number of friends, represented as an undirected graph where each node is a user and each edge represents a friendship between two users. Your task is to suggest new friends for a user based on mutual friends. A new friend recommendation for user ( u ) is any user ( v ) who is not already a friend of ( u ) but shares at least two mutual friends with ( u ). You are required to implement a function `suggest_friends(graph, user)` that does the following: 1. Takes an undirected graph represented as an adjacency list (dictionary) and a specific user. 2. Identifies and suggests new friends for the user as described above. # Function Signature ```python def suggest_friends(graph: Dict[int, List[int]], user: int) -> List[int]: pass ``` # Input - `graph`: A dictionary where the key is an integer representing a user, and the value is a list of integers representing the friends of that user. - `user`: An integer representing the specific user for whom the friend suggestions are to be made. # Outputs - Returns a list of integers representing the suggested new friends for the given user. If no new friends can be suggested, return an empty list. # Constraints - The graph is undirected, i.e., if user ( u ) is a friend of user ( v ), then ( v ) is a friend of ( u ). - The graph has at most 1000 users. - Each user can have at most 100 friends. - The user IDs will be consecutive integers starting from 0. # Example Input ```python graph = { 0: [1, 2, 3], 1: [0, 2], 2: [0, 1, 3], 3: [0, 2] } user = 1 ``` Output ```python [3] ``` In this example, user 1 has two mutual friends with user 3 (users 0 and 2), but user 1 is not currently friends with user 3. Therefore, user 3 is suggested as a new friend for user 1.","solution":"from typing import Dict, List def suggest_friends(graph: Dict[int, List[int]], user: int) -> List[int]: mutual_count = {} for friend in graph[user]: for friend_of_friend in graph[friend]: if friend_of_friend != user and friend_of_friend not in graph[user]: if friend_of_friend not in mutual_count: mutual_count[friend_of_friend] = 0 mutual_count[friend_of_friend] += 1 suggested_friends = [person for person in mutual_count if mutual_count[person] >= 2] return suggested_friends"},{"question":"You are tasked with designing a function that processes a text document and extracts all the unique words, along with their frequency of occurrence. The main requirements are: 1. Implement a function named `word_frequency` that takes the path to a text file as an argument. 2. The function should read the contents of the file using the `open` method. 3. Convert all words to lowercase to ensure the count is case-insensitive. 4. Remove any punctuation from the words. 5. Count the frequency of each unique word and store the results in a dictionary where the keys are the words, and the values are their corresponding frequencies. 6. Return the dictionary sorted by frequency in descending order. In case of a tie, words should be sorted alphabetically. # Example: Assume the content of the file `example.txt` is: \\"Hello, world! Hello Python. This is a new world of coding.\\" ```python def word_frequency(file_path): pass ``` Note: - You may use the `string` module for removing punctuation. - Words should be treated as sequences of alphabetic characters only.","solution":"import string from collections import Counter def word_frequency(file_path): Reads a text file and returns a dictionary of word frequency sorted by frequency in descending order. Ties are broken by alphabetical order. :param file_path: Path to the text file :return: Dictionary with words as keys and their frequencies as values with open(file_path, \'r\') as file: text = file.read() # Removing punctuation, converting to lowercase, and splitting into words translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator).lower() words = text.split() # Counting the frequency of each word word_counts = Counter(words) # Sorting by frequency (descending), then alphabetically (ascending) sorted_word_counts = dict(sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))) return sorted_word_counts"},{"question":"You are tasked with developing a function to manage a networking system where packets are transmitted between nodes. Each packet has a weight associated with it, which represents its size. The network must prioritize which packets to send based on their weight and the current time. Use the Python built-in libraries to accomplish this. **Function Name**: `prioritize_packets` **Parameters**: - `packets`: A list of tuples where each tuple contains two elements: - `weight` (int): The weight of the packet. - `timestamp` (int): The time at which the packet was created. **Functionality**: 1. Sort the list of packets in descending order based on their weight. 2. For packets with the same weight, sort them in ascending order based on their timestamp. 3. Return the sorted list of packets. **Return**: - `List[Tuple[int, int]]`: The list of packets sorted based on the criteria mentioned. **Instructions**: 1. Use the `sorted()` function with a custom lambda function as the key to sort the packets according to the given criteria. 2. Do not modify the original list of packets.","solution":"def prioritize_packets(packets): Return the list of packets sorted based on their weight in descending order. For packets with the same weight, sort them by timestamp in ascending order. Parameters: packets (List[Tuple[int, int]]): List of packets where each packet is represented by a tuple (weight, timestamp). Returns: List[Tuple[int, int]]: Sorted list of packets. return sorted(packets, key=lambda x: (-x[0], x[1]))"},{"question":"You are developing a user management system and need to implement a function that verifies user passwords based on specific security criteria. The password needs to meet the following conditions: 1. Must be at least 8 characters long. 2. Must contain at least one uppercase letter. 3. Must contain at least one lowercase letter. 4. Must contain at least one numerical digit. 5. Must contain at least one special character (e.g., `!@#%^&*()`). Write a function `is_valid_password(password)` that takes a password string as input and returns `True` if the password meets all the criteria. Otherwise, return `False`. # Function Signature: ```python def is_valid_password(password: str) -> bool: pass ``` # Parameters: - `password` (str): The password string to be validated. # Returns: - `bool`: `True` if the password is valid, `False` otherwise. # Example: ```python print(is_valid_password(\\"MyP@ssw0rd!\\")) # Should return True print(is_valid_password(\\"password\\")) # Should return False print(is_valid_password(\\"Short1!\\")) # Should return False print(is_valid_password(\\"NoNumber!\\")) # Should return False print(is_valid_password(\\"NoSpecialChar1\\")) # Should return False ``` Ensure your function comprehensively checks all the mentioned criteria and delivers the correct output.","solution":"import re def is_valid_password(password: str) -> bool: Verifies if the password meets all security criteria. Args: password (str): The password string to be validated. Returns: bool: True if the password is valid, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*(),.?\\":{}|<>]\', password): return False return True"},{"question":"You are tasked with designing a system to simulate the performance of a genetic algorithm in optimizing a mathematical function. The goal is to maximize the value of a given function, `f(x) = -x^2 + 5x`, within the range of `0 <= x <= 5`. Here\'s a detailed breakdown of the task: 1. **Individual Class**: Implement a class representing an individual in the population. Each individual should have a genotype (represented by a binary string) and a fitness score. The conversion from genotype to phenotype (real value of `x`) and the fitness evaluation should be included in this class. 2. **Genetic Algorithm Function**: Implement the genetic algorithm using the following steps: - **Initialization**: Start with a randomly generated population of individuals. - **Selection**: Use a selection mechanism (e.g., roulette wheel selection) to pick individuals for mating based on their fitness. - **Crossover**: Implement a crossover mechanism to create new offspring from pairs of parents. - **Mutation**: Introduce random mutations to the offspring to maintain diversity. - **Replacement**: Replace the old population with the new generation of individuals. - Repeat the process for a specified number of generations. Here\'s a template for your `Individual` class and `genetic_algorithm` function: ```python import numpy as np import random class Individual: def __init__(self, binary_string): self.genotype = binary_string self.phenotype = self.decode() self.fitness = self.evaluate_fitness() def decode(self): return int(self.genotype, 2) / (2**len(self.genotype) - 1) * 5 def evaluate_fitness(self): x = self.phenotype return -x**2 + 5*x def mutate(self, mutation_rate): new_genotype = \'\'.join( bit if np.random.random() > mutation_rate else str(1 - int(bit)) for bit in self.genotype ) return Individual(new_genotype) def genetic_algorithm(pop_size, num_generations, mutation_rate, individual_length): population = [Individual(\'\'.join(random.choice(\'01\') for _ in range(individual_length))) for _ in range(pop_size)] for generation in range(num_generations): fitness_scores = np.array([individual.fitness for individual in population]) probabilities = fitness_scores / np.sum(fitness_scores) new_population = [] for _ in range(pop_size // 2): parents = np.random.choice(population, size=2, p=probabilities) crossover_point = np.random.randint(1, individual_length - 1) child1_genotype = parents[0].genotype[:crossover_point] + parents[1].genotype[crossover_point:] child2_genotype = parents[1].genotype[:crossover_point] + parents[0].genotype[crossover_point:] child1 = Individual(child1_genotype).mutate(mutation_rate) child2 = Individual(child2_genotype).mutate(mutation_rate) new_population.extend([child1, child2]) population = new_population best_individual = max(population, key=lambda ind: ind.fitness) return best_individual.phenotype, best_individual.fitness if __name__ == \\"__main__\\": pop_size = 30 num_generations = 100 mutation_rate = 0.01 individual_length = 6 # 6 bits to represent values from 0 to 5 best_x, best_fitness = genetic_algorithm(pop_size, num_generations, mutation_rate, individual_length) print(f\\"Best x: {best_x}, Best fitness: {best_fitness}\\") ``` # Task: 1. Implement the `Individual` class to handle the genotype-to-phenotype conversion and fitness evaluation based on the quadratic function `f(x) = -x^2 + 5x`. 2. Implement the `genetic_algorithm` function to optimize the function using the genetic algorithm approach. 3. Ensure the use of `numpy` functions and efficient operations where appropriate. Test your implemented function to verify it works as expected and observe the converged results. # Example Usage: ```python if __name__ == \\"__main__\\": pop_size = 30 num_generations = 100 mutation_rate = 0.01 individual_length = 6 # 6 bits to represent values from 0 to 5 best_x, best_fitness = genetic_algorithm(pop_size, num_generations, mutation_rate, individual_length) print(f\\"Best x: {best_x}, Best fitness: {best_fitness}\\") ``` # Expected Output: - The optimal value of `x` within the range `0 <= x <= 5` that maximizes the function `f(x) = -x^2 + 5x`. - The corresponding fitness value (should be close to the maximum possible fitness).","solution":"import numpy as np import random class Individual: def __init__(self, binary_string): self.genotype = binary_string self.phenotype = self.decode() self.fitness = self.evaluate_fitness() def decode(self): # Decode the binary string to a real value of x within 0 to 5 return int(self.genotype, 2) / (2**len(self.genotype) - 1) * 5 def evaluate_fitness(self): # Evaluate the fitness based on the given quadratic function x = self.phenotype return -x**2 + 5*x def mutate(self, mutation_rate): # Apply mutation to the individual with the given mutation rate new_genotype = \'\'.join( bit if np.random.random() > mutation_rate else str(1 - int(bit)) for bit in self.genotype ) return Individual(new_genotype) def genetic_algorithm(pop_size, num_generations, mutation_rate, individual_length): # Initialize population with randomly generated individuals population = [Individual(\'\'.join(random.choice(\'01\') for _ in range(individual_length))) for _ in range(pop_size)] for generation in range(num_generations): fitness_scores = np.array([individual.fitness for individual in population]) probabilities = fitness_scores / np.sum(fitness_scores) new_population = [] for _ in range(pop_size // 2): parents = np.random.choice(population, size=2, p=probabilities) crossover_point = np.random.randint(1, individual_length - 1) child1_genotype = parents[0].genotype[:crossover_point] + parents[1].genotype[crossover_point:] child2_genotype = parents[1].genotype[:crossover_point] + parents[0].genotype[crossover_point:] child1 = Individual(child1_genotype).mutate(mutation_rate) child2 = Individual(child2_genotype).mutate(mutation_rate) new_population.extend([child1, child2]) population = new_population best_individual = max(population, key=lambda ind: ind.fitness) return best_individual.phenotype, best_individual.fitness if __name__ == \\"__main__\\": pop_size = 30 num_generations = 100 mutation_rate = 0.01 individual_length = 6 # 6 bits to represent values from 0 to 5 best_x, best_fitness = genetic_algorithm(pop_size, num_generations, mutation_rate, individual_length) print(f\\"Best x: {best_x}, Best fitness: {best_fitness}\\")"},{"question":"You are tasked to calculate the Greatest Common Divisor (GCD) of an array of integers using the Euclidean algorithm. The Euclidean algorithm for finding GCD of two integers is based on the principle that the GCD of two numbers also divides their difference. The formula can be written as: [ text{GCD}(a, b) = text{GCD}(b, a bmod b) ] Write a Python function `gcd_of_array(array)` that takes an array of integers and returns their GCD. # Requirements: 1. Use the Euclidean algorithm to compute the GCD of two numbers. 2. Extend this algorithm to handle an array of integers. The function should: - Accept an array of integers as an input. - Compute the GCD of the entire array using the Euclidean algorithm. - Return the GCD of the array. # Specific Instructions: - The function should be named `gcd_of_array`. - You may assume the array contains at least two integers. ```python def gcd_of_two(a, b): while b: a, b = b, a % b return a def gcd_of_array(array): gcd = array[0] for num in array[1:]: gcd = gcd_of_two(gcd, num) return gcd # Example usage: # array = [48, 64, 256] # print(gcd_of_array(array)) # Expected output: 16 ``` Test your function with different sets of arrays to ensure it works correctly.","solution":"def gcd_of_two(a, b): Computes the GCD of two numbers using the Euclidean algorithm. while b: a, b = b, a % b return a def gcd_of_array(array): Computes the GCD of an array of integers using the Euclidean algorithm. gcd = array[0] for num in array[1:]: gcd = gcd_of_two(gcd, num) return gcd"},{"question":"You are to write a function that simulates the rolling of two six-sided dice and calculates the probability of rolling a sum equal to a given target number. The function will take the target sum as its input and return the probability as a floating-point number rounded to two decimal places. You will need to simulate the rolling of the dice a large number of times to have an accurate probability calculation. **Function Name:** `calculate_probability` **Parameter:** - `target`: An integer value representing the desired sum of the two dice. **Requirements:** 1. Simulate the rolling of two six-sided dice at least 100,000 times. 2. Count the number of times the sum of the two dice equals the target sum. 3. Calculate the probability as the number of successful events divided by the total number of simulations. 4. Return the probability rounded to two decimal places. **Example:** Suppose you have the following input: ```python target = 7 ``` The function call `calculate_probability(target)` should simulate the dice rolls and return the probability of rolling a sum of 7. **Note:** The target sum will always be in the range from 2 to 12, inclusive.","solution":"import random def calculate_probability(target): Calculates the probability of rolling a given target sum with two six-sided dice. Parameters: target (int): The desired sum of the two dice. Returns: float: The probability of the target sum occurring, rounded to two decimal places. if target < 2 or target > 12: raise ValueError(\\"Target sum must be between 2 and 12 inclusive.\\") num_simulations = 100_000 success_count = 0 for _ in range(num_simulations): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == target: success_count += 1 probability = success_count / num_simulations return round(probability, 2)"},{"question":"Write a Python function named `categorize_invoices` that takes a list of invoice dictionaries as input and returns a dictionary categorizing the invoices by their status. The invoices list may contain multiple dictionaries where each dictionary represents an invoice with the following keys: `id` (a unique identifier for the invoice), `amount` (a float representing the amount of the invoice), and `status` (a string that can be either \\"paid\\", \\"unpaid\\", or \\"overdue\\"). The function should categorize each invoice based on its status into three lists: `paid`, `unpaid`, and `overdue`. The result should be a dictionary with keys \'paid\', \'unpaid\', and \'overdue\', where each value is a list of dictionaries containing the invoices of the corresponding status. Here is an outline of the function you need to develop: ```python def categorize_invoices(invoices): Categorizes a list of invoice dictionaries by their status. @param invoices: list of dict: List of dictionaries, each representing an invoice with \'id\', \'amount\', and \'status\' keys @return: dict: A dictionary categorized by invoice status (\'paid\', \'unpaid\', and \'overdue\') pass # Implement the function ``` You can assume that all input invoices will have valid `id`, `amount`, and `status` keys.","solution":"def categorize_invoices(invoices): Categorizes a list of invoice dictionaries by their status. @param invoices: list of dict: List of dictionaries, each representing an invoice with \'id\', \'amount\', and \'status\' keys @return: dict: A dictionary categorized by invoice status (\'paid\', \'unpaid\', and \'overdue\') categorized = {\'paid\': [], \'unpaid\': [], \'overdue\': []} for invoice in invoices: status = invoice[\'status\'] if status in categorized: categorized[status].append(invoice) return categorized"},{"question":"You are to write a function named `find_majority_element` that finds the majority element in a list of integers. The majority element is the element that appears more than `n // 2` times in the list, where `n` is the length of the list. If no majority element exists, the function should return `None`. The function should use the Boyer-Moore Voting Algorithm for finding the majority element in linear time and constant space. Here are the specific requirements for the function: 1. The function should be named `find_majority_element`. 2. Use the Boyer-Moore Voting Algorithm to identify the candidate for majority element. 3. After determining the candidate, verify if it truly is the majority element by counting its occurrences in the list. 4. If the candidate is the majority element, return it. Otherwise, return `None`. The function definition should look like this: ```python def find_majority_element(nums): if not nums: return None # Boyer-Moore Voting Algorithm to find the candidate candidate = None count = 0 for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify if the candidate is actually the majority element if nums.count(candidate) > len(nums) // 2: return candidate else: return None ``` Write the `find_majority_element` function to meet the above requirements.","solution":"def find_majority_element(nums): if not nums: return None # Boyer-Moore Voting Algorithm to find the candidate candidate = None count = 0 for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify if the candidate is actually the majority element if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"You are tasked with creating a function named `spiral_traverse` that traverses a 2D matrix in a spiral order and returns the elements as a list. This involves starting at the top-left corner of the matrix and moving right, then down, then left, and up, and repeating this cycle until all elements are visited. The function signature is as follows: ```python def spiral_traverse(matrix): ``` # Parameters: - `matrix`: A list of lists where each sublist represents a row in the matrix. For example, `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`. # Returns: - A list of elements in the order they are traversed spirally. # Example: Given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: `[1, 2, 3, 6, 9, 8, 7, 4, 5]` # Constraints: - You may assume that the matrix has a consistent size, meaning all rows have the same number of columns and the matrix is not jagged. - The matrix may be empty; handle such cases gracefully. Implement the function to solve this problem, adhering to the constraints and requirements provided.","solution":"def spiral_traverse(matrix): if not matrix: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right on the top row for j in range(left, right + 1): result.append(matrix[top][j]) top += 1 # Traverse from top to bottom on the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left on the bottom row for j in range(right, left - 1, -1): result.append(matrix[bottom][j]) bottom -= 1 if left <= right: # Traverse from bottom to top on the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"# Background In this problem, you will write a function that simulates a robot moving around on a grid. The robot starts at a given position on a 2D grid and will move according to a set of commands. Each command tells the robot to move one step in a specified direction (up, down, left, or right). The function will return the robot\'s final position after executing all the commands. # Requirements You have to make use of a list of tuples where each tuple represents a command. Each command consists of a direction and the number of steps the robot should move in that direction. The directions are represented as strings: \\"up\\", \\"down\\", \\"left\\", and \\"right\\". # Task Implement the function `final_position(start, commands)`. The function will take two parameters: 1. `start` (tuple): The starting position of the robot. It is a tuple containing two integers (x, y). 2. `commands` (list of tuples): A list of commands where each command is a tuple with a direction (string) and the number of steps (int). The function should return the final position of the robot as a tuple (x, y). # Function Constraints - The commands will always be valid, i.e., the direction will be one of \\"up\\", \\"down\\", \\"left\\", \\"right\\". - The number of steps will be a positive integer. # Example Usage ```python def final_position(start, commands): x, y = start for command in commands: direction, steps = command if direction == \\"up\\": y += steps elif direction == \\"down\\": y -= steps elif direction == \\"left\\": x -= steps elif direction == \\"right\\": x += steps return (x, y) # Example initial position and commands start_position = (0, 0) command_list = [(\\"up\\", 5), (\\"right\\", 3), (\\"down\\", 2), (\\"left\\", 4)] print(final_position(start_position, command_list)) # Output should be (-1, 3) ``` **Note:** Adjust the command list and start position in the example usage as necessary to test your solution.","solution":"def final_position(start, commands): x, y = start for command in commands: direction, steps = command if direction == \\"up\\": y += steps elif direction == \\"down\\": y -= steps elif direction == \\"left\\": x -= steps elif direction == \\"right\\": x += steps return (x, y)"},{"question":"** In this problem, you are tasked with developing a function to simulate a simplified banking system. The goal is to create classes and methods to manage customer accounts and perform transactions such as deposits, withdrawals, and transfers. You need to write a set of classes to represent a banking system with the following specifications: 1. **Class `Bank`**: - Manages multiple customer accounts. - Should be able to add new customer accounts. - Should be able to transfer money between accounts. 2. **Class `Customer`**: - Represents a customer with an account balance. - Should have methods to deposit and withdraw money. - Should keep track of the account balance and prevent overdrafts. # Class Definitions **Bank Class:** ```python class Bank: def __init__(self): pass def add_customer(self, customer_name, initial_balance): pass def transfer(self, from_customer, to_customer, amount): pass ``` **Customer Class:** ```python class Customer: def __init__(self, name, balance=0): pass def deposit(self, amount): pass def withdraw(self, amount): pass ``` # Methods: 1. **Bank**: - `add_customer(self, customer_name, initial_balance)`: Adds a new customer with the specified initial balance. - `transfer(self, from_customer, to_customer, amount)`: Transfers the specified amount from one customer\'s account balance to another\'s if sufficient funds exist. 2. **Customer**: - `deposit(self, amount)`: Increases the customer\'s account balance by the specified amount. - `withdraw(self, amount)`: Decreases the customer\'s account balance by the specified amount, if sufficient funds exist. # Example: ```python bank = Bank() bank.add_customer(\\"Alice\\", 1000) bank.add_customer(\\"Bob\\", 500) print(bank.customers[\\"Alice\\"].balance) # Output: 1000 print(bank.customers[\\"Bob\\"].balance) # Output: 500 bank.customers[\\"Alice\\"].deposit(200) print(bank.customers[\\"Alice\\"].balance) # Output: 1200 bank.customers[\\"Alice\\"].withdraw(300) print(bank.customers[\\"Alice\\"].balance) # Output: 900 bank.transfer(\\"Alice\\", \\"Bob\\", 100) print(bank.customers[\\"Alice\\"].balance) # Output: 800 print(bank.customers[\\"Bob\\"].balance) # Output: 600 ``` The given example demonstrates the functionality of creating a bank, adding customers, depositing money, withdrawing money, and transferring money between customers.","solution":"class Bank: def __init__(self): self.customers = {} def add_customer(self, customer_name, initial_balance): if customer_name not in self.customers: self.customers[customer_name] = Customer(customer_name, initial_balance) def transfer(self, from_customer, to_customer, amount): if from_customer in self.customers and to_customer in self.customers: if self.customers[from_customer].balance >= amount: self.customers[from_customer].withdraw(amount) self.customers[to_customer].deposit(amount) class Customer: def __init__(self, name, balance=0): self.name = name self.balance = balance def deposit(self, amount): if amount > 0: self.balance += amount def withdraw(self, amount): if 0 < amount <= self.balance: self.balance -= amount"},{"question":"You are tasked with creating a function using Python to manipulate and analyze strings. The goal is to design a function named `reverse_words` that takes a single string as an input parameter, reverses the order of the words, and returns the resulting string. Each word will be separated by a single space, and the original string will have no leading or trailing spaces. # Requirements: 1. Implement the `reverse_words` function that: - Takes a single string `sentence` as input. - Splits the input string into words based on spaces. - Reverses the order of words. - Joins the reversed words with a single space and returns the result. # Function Signature: ```python def reverse_words(sentence: str) -> str: ``` # Examples: ```python # Example 1 input_string = \\"hello world\\" output_string = reverse_words(input_string) print(output_string) # Output should be: \\"world hello\\" # Example 2 input_string = \\"The quick brown fox\\" output_string = reverse_words(input_string) print(output_string) # Output should be: \\"fox brown quick The\\" # Example 3 input_string = \\"Python is fun\\" output_string = reverse_words(input_string) print(output_string) # Output should be: \\"fun is Python\\" ``` # Code Structure: - Define the `reverse_words` function. - Split the input string into a list of words. - Reverse the list of words. - Join the reversed list into a single string separated by spaces and return it.","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in a given sentence. Args: sentence (str): A single string of words separated by spaces. Returns: str: The input string with the words in reversed order. words = sentence.split(\' \') reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Convert a list of dictionaries containing details about multiple products (name, price, quantity, category) into a Pandas DataFrame, then calculate the total value of inventory per category (price * quantity). The function should output with: pd.DataFrame: A Pandas DataFrame containing the product details. pd.Series: A Pandas Series indexed by category with the total inventory value per category. You should write self-contained code starting with: ``` import pandas as pd def inventory_value(product_list): ```","solution":"import pandas as pd def inventory_value(product_list): Convert a list, where each element is a dictionary containing details about a product, into a Pandas DataFrame. Then calculate the total value of inventory per category. :param product_list: List of dictionaries with product details. :return: Tuple consisting of - Pandas DataFrame with product details. - Pandas Series with total inventory value per category. # Convert the list of dictionaries into a DataFrame df = pd.DataFrame(product_list) # Calculate total inventory value (price * quantity) per category df[\'total_value\'] = df[\'price\'] * df[\'quantity\'] inventory_value_per_category = df.groupby(\'category\')[\'total_value\'].sum() return df, inventory_value_per_category"},{"question":"You need to write a Python function named `merge_sorted_arrays` that merges multiple sorted arrays into one single sorted array. The arrays are expected to be sorted in ascending order. Specifically: 1. Create a function called `merge_sorted_arrays` which accepts a list of lists, where each inner list represents a sorted array. 2. The function should return a single sorted list containing all elements from the input arrays merged in ascending order. # Function Signature ```python from typing import List def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: pass ``` # Requirements - Do not use any sorting functions (e.g., `sorted()`) to sort the final merged array. The merging process should take advantage of the pre-sorted nature of the input arrays. # Example ```python arrays = [[1, 3, 5], [2, 4, 6], [0, 7, 8]] merged_array = merge_sorted_arrays(arrays) print(merged_array) # Output should be [0, 1, 2, 3, 4, 5, 6, 7, 8] ``` # Notes - The input arrays are guaranteed to be sorted. - Focus on an efficient merging algorithm that leverages the sorted property of the input arrays. - You can assume all arrays consist of integers and can be of varying lengths, including being empty.","solution":"from typing import List import heapq def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: Merges multiple sorted arrays into one single sorted array. Args: arrays (List[List[int]]): List of sorted arrays to merge. Returns: List[int]: A merged sorted array. min_heap = [] # Initialize the heap with the first element from each array for i, array in enumerate(arrays): if array: heapq.heappush(min_heap, (array[0], i, 0)) result = [] while min_heap: value, array_index, element_index = heapq.heappop(min_heap) result.append(value) next_element_index = element_index + 1 if next_element_index < len(arrays[array_index]): next_value = arrays[array_index][next_element_index] heapq.heappush(min_heap, (next_value, array_index, next_element_index)) return result"},{"question":"You are tasked with implementing the Apriori algorithm for frequent itemsets mining and association rule learning over a list of transactions. This involves identifying the most frequently occurring sets of items and establishing rules indicating how the presence of an item or set of items influences the presence of another item or set of items. You must write a function `apriori(transactions, min_support, min_confidence)` that identifies frequent itemsets with support greater than or equal to `min_support` and then generates the association rules with confidence greater than or equal to `min_confidence`. **Function Description:** ```python def apriori(transactions, min_support, min_confidence): Perform the Apriori algorithm to find frequent itemsets and generate association rules. Parameters: transactions (list of list of str): A list of transactions, where each transaction is a list of items (strings). min_support (float): The minimum support threshold. min_confidence (float): The minimum confidence threshold. Returns: tuple: A tuple containing two elements, the first is a list of frequent itemsets, and the second is a list of association rules. Each association rule is represented as a tuple (antecedent, consequent, confidence). # Your implementation here pass ``` **Parameters:** 1. `transactions` (list of list of str): A list of transactions, where each transaction is represented as a list of items. 2. `min_support` (float): The minimum support threshold as a proportion (i.e., a value between 0 and 1). 3. `min_confidence` (float): The minimum confidence threshold as a proportion (i.e., a value between 0 and 1). **Returns:** - A tuple containing: - A list of frequent itemsets. Each itemset is a tuple of items. - A list of association rules. Each rule is represented as a tuple `(antecedent, consequent, confidence)` where `antecedent` and `consequent` are tuples of items, and `confidence` is a float. **Example:** Suppose you have the following transactions: ```python transactions = [ [\'bread\', \'milk\'], [\'bread\', \'diaper\', \'beer\', \'egg\'], [\'milk\', \'diaper\', \'beer\', \'coke\'], [\'bread\', \'milk\', \'diaper\', \'beer\'], [\'bread\', \'milk\', \'diaper\', \'coke\'], ] ``` And you set the minimum support and confidence thresholds as follows: ```python min_support = 0.6 min_confidence = 0.8 ``` The function should find and return the frequent itemsets and association rules that meet the criteria: ```python frequent_itemsets = [ (\'bread\', \'diaper\'), (\'bread\', \'milk\'), (\'diaper\', \'milk\'), (\'diaper\', \'beer\') ] association_rules = [ ((\'bread\',), (\'milk\',), 0.8), ((\'milk\',), (\'bread\',), 0.75), ((\'diaper\',), (\'milk\',), 0.75) ] ```","solution":"from itertools import combinations, chain def apriori(transactions, min_support, min_confidence): def get_frequent_itemsets(transactions, current_itemsets, min_support): itemset_support = {} for itemset in current_itemsets: for transaction in transactions: if set(itemset).issubset(transaction): itemset_support[itemset] = itemset_support.get(itemset, 0) + 1 total_transactions = len(transactions) frequent_itemsets = [] for itemset, support_count in itemset_support.items(): support = support_count / total_transactions if support >= min_support: frequent_itemsets.append(itemset) return frequent_itemsets def generate_next_itemsets(frequent_itemsets, k): return list(set( [tuple(sorted(set(a) | set(b))) for a in frequent_itemsets for b in frequent_itemsets if len(set(a) & set(b)) == k-2] )) def get_itemset_support(itemset, transactions): support_count = sum(1 for transaction in transactions if set(itemset).issubset(transaction)) return support_count / len(transactions) def generate_association_rules(frequent_itemsets, transactions, min_confidence): rules = [] for itemset in frequent_itemsets: for i in range(1, len(itemset)): for antecedent in combinations(itemset, i): consequent = tuple(set(itemset) - set(antecedent)) antecedent_support = get_itemset_support(antecedent, transactions) itemset_support = get_itemset_support(itemset, transactions) confidence = itemset_support / antecedent_support if confidence >= min_confidence: rules.append((antecedent, consequent, confidence)) return rules # Generate initial candidate itemsets (1-itemsets) itemsets = list(chain.from_iterable((tuple([item]) for item in set(chain.from_iterable(transactions))))) frequent_itemsets = get_frequent_itemsets(transactions, itemsets, min_support) all_frequent_itemsets = list(frequent_itemsets) k = 2 while frequent_itemsets: next_itemsets = generate_next_itemsets(frequent_itemsets, k) frequent_itemsets = get_frequent_itemsets(transactions, next_itemsets, min_support) all_frequent_itemsets.extend(frequent_itemsets) k += 1 association_rules = generate_association_rules(all_frequent_itemsets, transactions, min_confidence) return all_frequent_itemsets, association_rules"},{"question":"You are provided with a list of strings representing sentences. Your task is to write a function called `word_frequencies` that calculates the frequency of each unique word across all sentences and returns a dictionary with words as keys and their corresponding frequencies as values. The comparison of words should be case-insensitive. # Requirements 1. You need to use the `collections` library, in particular, the `Counter` class to count the frequencies. 2. The function should convert all words to lowercase to ensure case-insensitive comparison. 3. A word should be defined as a continuous sequence of alphabetic characters (`a-z`, `A-Z`). Punctuation should be ignored. 4. The function should sort the dictionary by frequency in descending order. In case of a tie, sort the words alphabetically. # Function Signature ```python def word_frequencies(sentences: List[str]) -> Dict[str, int]: pass ``` # Input - `sentences`: A list of strings where each string represents a sentence. # Output - A dictionary with words as keys (in lowercase) and their corresponding frequencies as values, sorted by frequency in descending order. # Example ```python from typing import List, Dict from collections import Counter import re def word_frequencies(sentences: List[str]) -> Dict[str, int]: words = [] for sentence in sentences: words.extend(re.findall(r\'b[a-zA-Z]+b\', sentence.lower())) frequencies = Counter(words) sorted_frequencies = dict(sorted(frequencies.items(), key=lambda item: (-item[1], item[0]))) return sorted_frequencies # Example usage: sentences = [\\"The quick brown fox jumps over the lazy dog.\\", \\"The quick brown fox is quick.\\"] freqs = word_frequencies(sentences) print(freqs) # Expected Output: {\'the\': 3, \'quick\': 3, \'brown\': 2, \'fox\': 2, \'is\': 1, \'jumps\': 1, \'lazy\': 1, \'over\': 1, \'dog\': 1} ```","solution":"from typing import List, Dict from collections import Counter import re def word_frequencies(sentences: List[str]) -> Dict[str, int]: Calculates the frequency of each unique word across all sentences and returns a dictionary with words as keys and their corresponding frequencies as values. Comparison of words is case-insensitive and punctuation is ignored. words = [] for sentence in sentences: # Extract words while ignoring punctuation and converting to lowercase words.extend(re.findall(r\'b[a-zA-Z]+b\', sentence.lower())) # Calculate word frequencies frequencies = Counter(words) # Sort by frequency (descending) and alphabetically in case of a tie sorted_frequencies = dict(sorted(frequencies.items(), key=lambda item: (-item[1], item[0]))) return sorted_frequencies # Example usage: # sentences = [\\"The quick brown fox jumps over the lazy dog.\\", \\"The quick brown fox is quick.\\"] # freqs = word_frequencies(sentences) # print(freqs) # Expected Output: {\'the\': 3, \'quick\': 3, \'brown\': 2, \'fox\': 2, \'is\': 1, \'jumps\': 1, \'lazy\': 1, \'over\': 1, \'dog\': 1}"},{"question":"# Background Sorting algorithms are fundamental to computer science and are widely used in various applications. Among the many sorting algorithms, Merge Sort and Quick Sort are two of the most popular ones due to their efficiency and performance. Merge Sort is a stable, divide-and-conquer algorithm with a time complexity of O(n log n), whereas Quick Sort, though generally faster, has a worst-case time complexity of O(n^2). Both algorithms exhibit excellent performance in many practical applications and they are implemented in different ways to suit various needs. # Problem Statement You are required to implement a function named `hybrid_sort()` that combines both Merge Sort and Quick Sort. The idea is to use Merge Sort when the array size exceeds a specified threshold and Quick Sort otherwise. This hybrid approach leverages the strengths of both algorithms to optimize sorting. The function should take two parameters: - `arr`: A list of numbers that need to be sorted. - `threshold`: An integer value representing the size threshold to switch between Merge Sort and Quick Sort. The function should return the sorted list of numbers. # Implementation Details 1. Implement Merge Sort as a recursive function. This function should be called if the size of the array exceeds the threshold. 2. Implement Quick Sort also as a recursive function. This function should be called if the size of the array is less than or equal to the threshold. 3. Make sure to choose an appropriate pivot in Quick Sort to ensure good performance. 4. Utilize list slicing in Merge Sort to handle subarrays. # Example Usage ```python def hybrid_sort(arr, threshold): if len(arr) <= threshold: return quick_sort(arr) else: return merge_sort(arr) def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result # Example usage arr = [10, 7, 8, 9, 1, 5] threshold = 4 sorted_arr = hybrid_sort(arr, threshold) print(sorted_arr) ``` # Requirements Ensure that your implementation of `hybrid_sort` correctly switches between the two sorting algorithms based on the given threshold. The `quick_sort` and `merge_sort` functions should be implemented separately and called appropriately as described.","solution":"def hybrid_sort(arr, threshold): if len(arr) <= threshold: return quick_sort(arr) else: return merge_sort(arr) def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result"},{"question":"Simulate a simplified vending machine operation: 1) Accept a list of coin values provided by the user. 2) Calculate the total value of the coins. 3) Enable the user to select an item from a predefined list of items with their prices. 4) Dispense the item if the user has inserted enough money and return the change, if any. 5) If the user does not have enough money, prompt them to insert more coins or cancel the transaction. The function should raise exceptions for: ValueError: If an invalid coin value is provided. KeyError: If the selected item does not exist. The function should output: tuple: A tuple containing the dispensed item and the returned change. You should write self-contained code starting with: ```python def vending_machine(coins, item_selection): items = {\'soda\': 1.50, \'chips\': 1.00, \'candy\': 0.75} valid_coins = [0.05, 0.10, 0.25, 0.50, 1.00] total_value = 0 for coin in coins: if coin not in valid_coins: raise ValueError(\\"Invalid coin value\\") total_value += coin if item_selection not in items: raise KeyError(\\"Item does not exist\\") item_price = items[item_selection] if total_value < item_price: print(\\"Insufficient funds. Please insert more coins or cancel the transaction.\\") return None change = total_value - item_price return (item_selection, change) ```","solution":"def vending_machine(coins, item_selection): Simulates a simplified vending machine operation. Args: coins (list of floats): A list of coin values provided by the user. item_selection (str): The name of the item selected by the user. Returns: tuple: A tuple containing the dispensed item (str) and the returned change (float). Raises: ValueError: If an invalid coin value is provided. KeyError: If the selected item does not exist. items = {\'soda\': 1.50, \'chips\': 1.00, \'candy\': 0.75} valid_coins = [0.05, 0.10, 0.25, 0.50, 1.00] total_value = 0.0 for coin in coins: if coin not in valid_coins: raise ValueError(\\"Invalid coin value\\") total_value += coin if item_selection not in items: raise KeyError(\\"Item does not exist\\") item_price = items[item_selection] if total_value < item_price: print(\\"Insufficient funds. Please insert more coins or cancel the transaction.\\") return None change = total_value - item_price return (item_selection, change)"},{"question":"Implement a function that accepts a dictionary with key-value pairs representing grocery items and their prices, and a target budget. The function should return a list of all possible combinations of grocery items that add up to the given budget or less, without exceeding it. Each item can only be used once in each combination. If no combination meets the requirement, the function should return an empty list. For example, given the dictionary `{\\"apple\\": 2, \\"orange\\": 3, \\"banana\\": 1, \\"grape\\": 4}` and a budget of 5, the function should return combinations like `[[\\"apple\\", \\"banana\\", \\"banana\\"], [\\"orange\\"], [\\"banana\\", \\"banana\\", \\"banana\\", \\"banana\\", \\"banana\\"], [\\"banana\\", \\"grape\\"]]`. Use the following definition as a starting point: ``` def find_combinations(item_prices, budget): ``` The function should return: ``` List[List[str]]: A list of lists containing the item combinations that add up to the budget or less. ```","solution":"def find_combinations(item_prices, budget): Returns all possible combinations of grocery items that add up to the given budget or less. Each item can only be used once in each combination. If no combination is found, it returns an empty list. items = list(item_prices.keys()) prices = list(item_prices.values()) result = [] def backtrack(index, current_combination, current_sum): if current_sum <= budget: result.append(list(current_combination)) if current_sum >= budget: return for i in range(index, len(items)): current_combination.append(items[i]) current_sum += prices[i] backtrack(i + 1, current_combination, current_sum) current_combination.pop() current_sum -= prices[i] backtrack(0, [], 0) # Remove the empty combination that is added initially result = [combination for combination in result if combination] return result"},{"question":"In this problem, you are required to write a function `replace_values_in_matrix` to replace all occurrences of a specific value in a 2D matrix with another value. The function should directly modify the original matrix. # Specifications: - **Function Name**: `replace_values_in_matrix` - **Parameters**: - `matrix`: A 2D list of integers representing the matrix. - `target_value`: An integer value in the matrix that needs to be replaced. - `replacement_value`: An integer value that will replace the target_value in the matrix. - **Functionality**: - Iterate through each element in the matrix. - Replace all instances of `target_value` with `replacement_value`. - Modify the input matrix in-place without returning anything. # Requirements: - Handle matrices of varied sizes, including edge cases like empty matrices. - Efficiently replace the values without creating any additional large data structures. # Example Given the following matrix: ```python matrix = [ [1, 2, 3], [4, 1, 6], [7, 8, 1] ] ``` and the function call: ```python replace_values_in_matrix(matrix, 1, 9) ``` The matrix should be modified to: ```python [ [9, 2, 3], [4, 9, 6], [7, 8, 9] ] ``` # Note: Ensure that the original matrix is modified directly and that the replacement is done efficiently.","solution":"def replace_values_in_matrix(matrix, target_value, replacement_value): Replace all occurrences of target_value in the matrix with replacement_value. Args: matrix (list of list of int): The 2D matrix of integers. target_value (int): The value to be replaced. replacement_value (int): The value to replace with. for i in range(len(matrix)): for j in range(len(matrix[i])): if matrix[i][j] == target_value: matrix[i][j] = replacement_value"},{"question":"You are tasked with writing a function called `visualize_kmeans_clusters` that applies the KMeans clustering algorithm from the `sklearn.cluster` library to a given dataset and then visualizes the clusters. Your function will take the dataset and the number of clusters to form as inputs. The function signature should be: ```python def visualize_kmeans_clusters(data, n_clusters): ``` The function should perform the following tasks: 1. Apply KMeans clustering to the dataset with the specified number of clusters. 2. Extract cluster labels and centroids. 3. Use matplotlib to create a scatter plot of the data points, colored according to their cluster labels. 4. Plot the centroids of the clusters on the same scatter plot, using a distinct marker. Ensure you import and use the `KMeans` from `sklearn.cluster` and `pyplot` from `matplotlib` correctly. Here is an example of how the function should behave: ```python import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def visualize_kmeans_clusters(data, n_clusters): # Step 1: Apply KMeans clustering kmeans = KMeans(n_clusters=n_clusters) kmeans.fit(data) labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Step 2: Create scatter plot plt.figure(figsize=(10, 8)) plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\', marker=\'o\', edgecolor=\'k\', s=50) # Step 3: Plot centroids plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'X\', s=200, alpha=0.75, edgecolor=\'k\') plt.title(f\'KMeans Clustering with {n_clusters} Clusters\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') # Show plot plt.show() ``` By completing this function, you will effectively demonstrate the application of KMeans clustering and visualize the structured clusters in your dataset.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def visualize_kmeans_clusters(data, n_clusters): Apply KMeans clustering to the dataset and visualize the clusters. Parameters: data (np.ndarray): The input dataset of shape (n_samples, n_features). n_clusters (int): The number of clusters to form. Returns: None # Step 1: Apply KMeans clustering kmeans = KMeans(n_clusters=n_clusters) kmeans.fit(data) labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Step 2: Create scatter plot plt.figure(figsize=(10, 8)) plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\', marker=\'o\', edgecolor=\'k\', s=50) # Step 3: Plot centroids plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'X\', s=200, alpha=0.75, edgecolor=\'k\') plt.title(f\'KMeans Clustering with {n_clusters} Clusters\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') # Show plot plt.show()"},{"question":"You are tasked with designing a function that flattens a nested list structure into a single list of values. This function must handle lists of arbitrary depth and ensure all nested elements are included in the final flat list. # Function Requirements - **Function Name:** `flatten_nested_list` - **Parameters:** - `nested_list`: A list that can contain other lists, which themselves can contain more lists, and so on. # Task 1. The function should recursively navigate through all levels of the nested list to retrieve all values. 2. Append each value from the innermost lists to a new list. 3. Return the flattened list containing all values from the original nested structure. # Instructions - You are expected to use recursion to solve this task, though iterative solutions are also acceptable. - Ensure that all types of nested structures are properly flattened. - Return a single flat list of all values. # Example Suppose `nested_list` is `[1, [2, 3], [4, [5, [6, 7]]]]`: 1. The function should recursively retrieve all values to get `[1, 2, 3, 4, 5, 6, 7]`. 2. Return the flattened list. # Additional Instructions - Assume that the list may contain any type of elements, but only lists and single elements will be involved in the nesting. - Handle cases where lists might be empty. # Sample Test Cases Input ```python nested_list = [1, [2, 3], [4, [5, [6, 7]]]] ``` Output ```python [1, 2, 3, 4, 5, 6, 7] ``` Input ```python nested_list = [[1, 2, [3]], 4, [5, [6, [7, 8]], 9]] ``` Output ```python [1, 2, 3, 4, 5, 6, 7, 8, 9] ```","solution":"def flatten_nested_list(nested_list): Flattens a nested list into a single list containing all values. Parameters: nested_list (list): A list that may contain other lists to arbitrary depth. Returns: list: A flattened list containing all individual values. flattened = [] def flatten(sublist): for element in sublist: if isinstance(element, list): flatten(element) else: flattened.append(element) flatten(nested_list) return flattened"},{"question":"You are tasked with summarizing customer transactions data using the pandas library in Python. Specifically, you need to read a CSV file containing transaction details and compute summaries, including the total amount spent by each customer, and returning the customer who spent the most. Create a function called `summarize_transactions` that: 1. Accepts one parameter: `file_path`, a string representing the path to the CSV file containing transaction data. 2. Loads the CSV file into a pandas DataFrame. 3. Summarizes the data to compute the following: - Total amount spent by each customer (group by \'CustomerID\'). - The customer ID of the customer who has spent the most. 4. Returns a tuple containing a DataFrame with two columns (`CustomerID` and `TotalSpent`) and the `CustomerID` of the customer who spent the most. Notes: 1. The CSV file contains at least the following columns: \'CustomerID\' and \'AmountSpent\'. 2. Handle missing values by setting them to zero in the \'AmountSpent\' column. Implement the function as follows: ```python import pandas as pd def summarize_transactions(file_path): # Load the data into a pandas DataFrame df = pd.read_csv(file_path) # Fill missing values in the \'AmountSpent\' column with zero df[\'AmountSpent\'] = df[\'AmountSpent\'].fillna(0) # Group by \'CustomerID\' and compute the total amount spent by each customer summary_df = df.groupby(\'CustomerID\')[\'AmountSpent\'].sum().reset_index() summary_df.rename(columns={\'AmountSpent\': \'TotalSpent\'}, inplace=True) # Find the CustomerID of the customer who spent the most top_customer = summary_df.loc[summary_df[\'TotalSpent\'].idxmax(), \'CustomerID\'] # Return the summary DataFrame and the top customer ID return summary_df, top_customer ``` Example usage: ```python summary_df, top_customer = summarize_transactions(\'transaction_data/transactions.csv\') print(summary_df.head()) print(\\"Customer who spent the most:\\", top_customer) ```","solution":"import pandas as pd def summarize_transactions(file_path): Summarize customer transactions from a CSV file. Parameters: file_path (str): Path to the CSV file containing transaction data. Returns: tuple: A DataFrame with total amount spent by each customer (\'CustomerID\', \'TotalSpent\'), and the CustomerID of the customer who spent the most. # Load the data into a pandas DataFrame df = pd.read_csv(file_path) # Fill missing values in the \'AmountSpent\' column with zero df[\'AmountSpent\'] = df[\'AmountSpent\'].fillna(0) # Group by \'CustomerID\' and compute the total amount spent by each customer summary_df = df.groupby(\'CustomerID\')[\'AmountSpent\'].sum().reset_index() summary_df.rename(columns={\'AmountSpent\': \'TotalSpent\'}, inplace=True) # Find the CustomerID of the customer who spent the most top_customer = summary_df.loc[summary_df[\'TotalSpent\'].idxmax(), \'CustomerID\'] # Return the summary DataFrame and the top customer ID return summary_df, top_customer"},{"question":"Generate random points in a 2D space, group them into specified clusters using k-means clustering, and visualize the clusters using different colors. The function should also return the centroid coordinates of each cluster. Use numpy to generate the points, sklearn to perform the clustering, and matplotlib to plot the data. The function should output with: list: A list of tuples, where each tuple represents the coordinates of a cluster centroid. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def cluster_points(num_points=300, num_clusters=3, random_state=42): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def cluster_points(num_points=300, num_clusters=3, random_state=42): Generates random points in a 2D space, group them into specified clusters using k-means clustering, and visualize the clusters using different colors. Returns the centroid coordinates of each cluster. Parameters: num_points (int): Number of random points to generate. Default is 300. num_clusters (int): Number of clusters to form. Default is 3. random_state (int): Random seed for reproducibility. Default is 42. Returns: list: A list of tuples, where each tuple represents the coordinates of a cluster centroid. # Generate random points np.random.seed(random_state) points = np.random.rand(num_points, 2) # Performing k-means clustering kmeans = KMeans(n_clusters=num_clusters, random_state=random_state) kmeans.fit(points) # Get cluster labels and centroids labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Plotting the clusters for i in range(num_clusters): cluster_points = points[labels == i] plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f\'Cluster {i+1}\') plt.scatter(centroids[:, 0], centroids[:, 1], s=300, c=\'red\', label=\'Centroids\') plt.legend() plt.title(\\"K-Means Clustering\\") plt.show() # Returning the centroid coordinates as a list of tuples return [tuple(centroid) for centroid in centroids]"},{"question":"You are given a log of events from a website containing details about user activities. Each event log includes information such as the timestamp of the event, the user ID, and the type of action performed. Your task is to write a function called `analyze_user_activity(logfile: str, action: str) -> Tuple[str, Union[str, int]]` that reads and processes this data to identify the user with the most frequent specified action. **Data Format:** The data is stored in a CSV file containing at least the following columns: - `\'timestamp\'`: The time when the action occurred. - `\'user_id\'`: The ID of the user performing the action. - `\'action\'`: The type of action performed by the user. **Function Requirements:** 1. Use the `pandas` library, specifically `pandas.read_csv()` to read data and `pandas.to_datetime()` to convert date strings to Python datetime objects. 2. Filter the data to include only the rows where the `\'action\'` matches the specified `action` parameter. 3. Group the filtered data by `\'user_id\'` and count the number of occurrences of the `action` for each user. 4. Identify the `user_id` with the highest count of the specified `action`. 5. If multiple users have the same highest count, return any one of them. 6. Handle the case where no user has performed the specified action by returning `(\\"No users found\\", 0)`. **Edge Cases:** - The input `action` might not be present in the logs, handle gracefully by returning `(\\"No users found\\", 0)`. **Example Usage:** ```python # Assuming \'logfile.csv\' contains: # timestamp,user_id,action # \'2023-01-01 10:00:00\', \'user_1\', \'login\' # \'2023-01-01 10:05:00\', \'user_2\', \'logout\' # \'2023-01-01 10:10:00\', \'user_1\', \'login\' result = analyze_user_activity(\'logfile.csv\', \'login\') # Expected output: (\'user_1\', 2) ``` **Constraints:** - Assume the actions are case-sensitive. - The `logfile` parameter is a string representing the file path to the CSV file.","solution":"import pandas as pd from typing import Tuple, Union def analyze_user_activity(logfile: str, action: str) -> Tuple[str, Union[str, int]]: Analyzes user activity from a log file and identifies the user with the most frequent specified action. Parameters: - logfile: str - The path to the CSV file containing the event logs. - action: str - The action to analyze within the event logs. Returns: - Tuple[str, Union[str, int]] - The user ID with the most frequent specified action and the count of that action. # Read the log file into a DataFrame data = pd.read_csv(logfile) # Filter the rows for the specified action filtered_data = data[data[\'action\'] == action] if filtered_data.empty: return (\\"No users found\\", 0) # Group by \'user_id\' and count the occurrences of the action action_counts = filtered_data.groupby(\'user_id\').count()[\'action\'] # Identify the user with the highest count of the specified action user_with_max_action = action_counts.idxmax() max_action_count = action_counts.max() return (user_with_max_action, max_action_count)"},{"question":"You are given an incomplete implementation of a function that computes the least common ancestor (LCA) of two nodes in a binary search tree (BST). Your task is to complete the implementation of `find_lca` which takes the root of the BST and two node values and returns the value of their least common ancestor. The function should be named `find_lca` and have the following signature: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root: TreeNode, node1: int, node2: int) -> int: ``` # Parameters: - `root`: A `TreeNode` representing the root of the BST. - `node1`: An integer representing the value of the first node. - `node2`: An integer representing the value of the second node. # Returns: - The function should return an integer representing the value of the least common ancestor of the two given nodes in the BST. If either node does not exist in the tree, return `None`. # Constraints: - The binary search tree is guaranteed to be a valid BST. - All values in the nodes are unique. - The values `node1` and `node2` are guaranteed to be in the BST. # Example: ```python # Sample tree construction root = TreeNode(6) root.left = TreeNode(2) root.right = TreeNode(8) root.left.left = TreeNode(0) root.left.right = TreeNode(4) root.right.left = TreeNode(7) root.right.right = TreeNode(9) root.left.right.left = TreeNode(3) root.left.right.right = TreeNode(5) # Function call result = find_lca(root, 2, 8) # Expected example result print(result) # Output: 6 (the value of the least common ancestor) ``` # Algorithm: 1. Traverse the BST starting from the root. 2. If both `node1` and `node2` are smaller than the root, then LCA lies in the left subtree. 3. If both `node1` and `node2` are greater than the root, then LCA lies in the right subtree. 4. If one of `node1` or `node2` matches the root, or they lie on either side, then root is the LCA. # Complete Implementation: You can now proceed to complete the `find_lca` function based on the above guidelines and algorithm.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root: TreeNode, node1: int, node2: int) -> int: # Traverse the tree from the root current = root while current: # If both node1 and node2 are less than the current node\'s value, move to the left child if node1 < current.value and node2 < current.value: current = current.left # If both node1 and node2 are greater than the current node\'s value, move to the right child elif node1 > current.value and node2 > current.value: current = current.right else: # We have found the split point, i.e., the LCA node return current.value # In case there is no LCA found, return None (though the problem guarantees the nodes\' existence in the tree) return None"},{"question":"You are tasked with writing a function that counts the unique elements in a given 2D NumPy array and returns the count of each unique element using the `numpy.unique` function. # Function Signature ```python def count_unique_elements(array: np.ndarray) -> dict: pass ``` # Input Parameters: 1. `array` (np.ndarray): A 2D NumPy array of numerical values. # Output: - Returns a dictionary where keys are the unique elements from the array, and values are their counts. # Requirements: 1. Utilize the `numpy.unique` function to find and count unique elements. 2. Ensure the function can handle arrays of varying sizes and element types, including integers and floats. 3. Handle cases where the array might have repeating and non-repeating elements. # Example: ```python import numpy as np array = np.array([[1, 2, 2], [3, 4, 1]]) # Count the unique elements in the array. print(count_unique_elements(array)) # Output: {1: 2, 2: 2, 3: 1, 4: 1} ``` ---","solution":"import numpy as np def count_unique_elements(array: np.ndarray) -> dict: Count the unique elements in a 2D NumPy array and return their counts. Parameters: array (np.ndarray): A 2D NumPy array of numerical values. Returns: dict: A dictionary where keys are the unique elements from the array, and values are their counts. unique_elements, counts = np.unique(array, return_counts=True) return dict(zip(unique_elements, counts))"},{"question":"Write a Python function that takes a list of nested dictionaries and flattens each dictionary. The function should convert nested dictionaries into a single level dictionary, with keys representing the path to the original values separated by an underscore \\"_\\". Then, return a list of the flattened dictionaries. The function should output with: - list: A list of flattened dictionaries. You should write self-contained code starting with: ``` def flatten_dict(dct, parent_key=\'\', sep=\'_\'): return {<implementation code>} def flatten_list_of_dicts(nested_list): ``` Example: ``` # Input nested_list = [ {\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3}}}, {\'f\': {\'g\': {\'h\': 4}}, \'i\': 5} ] # Output [ {\'a\': 1, \'b_c\': 2, \'b_d_e\': 3}, {\'f_g_h\': 4, \'i\': 5} ] ```","solution":"def flatten_dict(dct, parent_key=\'\', sep=\'_\'): Flattens a nested dictionary. Converts it to a single level dictionary with keys as the path joined by the given separator. :param dct: The dictionary to flatten. :param parent_key: The base key to use for the flattened structure. :param sep: The separator to use between keys. :return: A flattened dictionary. items = [] for k, v in dct.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) def flatten_list_of_dicts(nested_list): Takes a list of nested dictionaries and flattens each dictionary. :param nested_list: List of nested dictionaries. :return: List of flattened dictionaries. return [flatten_dict(dct) for dct in nested_list]"},{"question":"You are given a list of integers `arr` and an integer `k`. Your task is to write a function `find_kth_largest(arr, k)` that returns the kth largest element in the list. To achieve this efficiently, utilize the `heapq` module to maintain a min-heap of size `k`. # Function Signature: ```python def find_kth_largest(arr: List[int], k: int) -> int: ``` # Parameters: - `arr`: A list of integers. - `k`: An integer representing the rank of the largest element to find. # Returns: - An integer representing the kth largest element in the list. # Example: ```python arr = [3, 2, 1, 5, 6, 4] k = 2 print(find_kth_largest(arr, k)) # Output: 5 arr = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 print(find_kth_largest(arr, k)) # Output: 4 ``` # Constraints: - The list `arr` can contain up to 10^5 elements. - The value of `k` is a valid integer such that 1 ≤ k ≤ len(arr). - The elements in the list `arr` will all be integers and can be positive, negative, or zero. # Requirements: - Ensure that you use the `heapq` module to maintain a min-heap of size `k` in your implementation.","solution":"import heapq from typing import List def find_kth_largest(arr: List[int], k: int) -> int: Finds the kth largest element in the list using a min-heap. Parameters: arr (List[int]): The list of integers. k (int): The rank of the largest element to find. Returns: int: The kth largest element in the list. min_heap = arr[:k] heapq.heapify(min_heap) for num in arr[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) return min_heap[0]"},{"question":"** You are given a list of integers representing the height of bars in a histogram. Your task is to find the size of the largest rectangular area that can be formed in the histogram. The width of each bar is 1 unit. Here\'s what you need to do: 1. Create a function `largest_rectangle_area(heights: List[int]) -> int` which computes and returns the area of the largest rectangle in the histogram. # Requirements - The input list `heights` contains non-negative integers representing the height of each bar in the histogram. - The function should efficiently compute the maximum rectangular area that can be formed within the bounds of the histogram. - You must use a stack-based algorithm to achieve optimal time complexity. # Example For the histogram with heights `heights = [2, 1, 5, 6, 2, 3]`, the function `largest_rectangle_area` should return `10` because the largest rectangular area is formed by taking the heights `[5, 6]` (which gives us an area of `5 * 2 = 10`). **Input:** ```python heights = [2, 1, 5, 6, 2, 3] ``` **Output:** The function should return `10`. # Explanation - The bar at position 2 (height = 5) and position 3 (height = 6) can form a rectangle with width 2 (between position 2 and position 3), resulting in an area of `2 * 5 = 10` which is the largest possible rectangle area in this histogram. --- **","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Finds the size of the largest rectangular area that can be formed in a histogram. :param heights: List of integers representing the height of each bar. :return: The area of the largest rectangle that can be formed. stack = [] max_area = 0 # Append a zero height to handle the final elements in the stack heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else (i - stack[-1] - 1) max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"You are tasked with creating a function to count the frequency of each word in a given string. This is a common task in text processing and analysis. The function should follow these requirements: 1. **Function Name**: `count_words` 2. **Parameter**: A single string parameter `text`, which represents the input string to be analyzed. 3. **Functionality**: - The function should split the string into words based on whitespace. - It should count the frequency of each word, ignoring case (i.e., treat \\"Word\\" and \\"word\\" as the same word). - The function should return a dictionary where the keys are words and the values are their respective counts. 4. **Output**: The function should output a dictionary containing the frequency of each word in the given string. # Example: If the function is called with the input `count_words(\\"The cat in the hat. The Cat in a hat.\\")`, the output should be: ``` {\'the\': 2, \'cat\': 2, \'in\': 2, \'hat\': 2, \'a\': 1} ``` **Requirements**: - Use the `str.split` function to split the string into words. - Use `str.lower` to ensure the word count is case insensitive. - Ignore punctuation (you may assume the text contains only alphabetic characters and spaces for simplicity). Your task is to implement the `count_words` function following the above requirements.","solution":"import re from collections import defaultdict def count_words(text): Count the frequency of each word in a given text, ignoring case and punctuation :param text: str - input string to be analyzed :return: dict - dictionary with words and their respective counts # Use regex to remove punctuation and convert to lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() words = text.split() word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You are given a list of integers. Your task is to group these integers into sublists based on the number of digits they contain. For example, the number 123 has 3 digits, and the number 45 has 2 digits. The output should be a dictionary where each key represents the number of digits, and the corresponding value is a list of integers that have that many digits. To accomplish this, you need to write a function named `group_by_digit_count` which performs the following actions: 1. Determines the number of digits in each integer. 2. Groups the integers into sublists based on their digit count. 3. Returns the dictionary with keys as the digit count and values as lists of integers. Here is a summary of the required function signature and expected behavior: ```python def group_by_digit_count(list_of_integers): This function takes a list of integers and groups them into sublists based on the number of digits they contain. Parameters: list_of_integers (list of int): A list containing the integers to be grouped. Returns: dict: A dictionary where each key is the number of digits, and the value is a list of integers with that number of digits. pass ``` Example: ```python numbers = [123, 45, 6789, 5, 12, 789, 4567] print(group_by_digit_count(numbers)) ``` Expected Output: ``` {3: [123, 789], 2: [45, 12], 4: [6789, 4567], 1: [5]} ```","solution":"def group_by_digit_count(list_of_integers): This function takes a list of integers and groups them into sublists based on the number of digits they contain. Parameters: list_of_integers (list of int): A list containing the integers to be grouped. Returns: dict: A dictionary where each key is the number of digits, and the value is a list of integers with that number of digits. result = {} for num in list_of_integers: digit_count = len(str(abs(num))) # to handle negative numbers as well if digit_count not in result: result[digit_count] = [] result[digit_count].append(num) return result"},{"question":"You are tasked with developing a function that computes the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. You can only move either down or right at any point in time. **Function Name:** `unique_paths` **Parameters:** 1. `m` (int): The number of rows in the grid. 2. `n` (int): The number of columns in the grid. **Return Value:** - Returns an integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. **Objective:** The objective is to employ combinatorial mathematics to solve this problem. Specifically, you need to calculate the binomial coefficient to determine the number of paths. # Formula The number of unique paths in an `m x n` grid is given by: [ text{unique_paths}(m, n) = frac{(m+n-2)!}{(m-1)!(n-1)!} ] This formula arises from the fact that the problem of finding unique paths is equivalent to choosing `m-1` movements down from a total of `m+n-2` movements (down + right). # Example: For instance, - If `m` is 3 and `n` is 7, the number of unique paths can be calculated using the formula: [ text{unique_paths}(3, 7) ] You are expected to: 1. Calculate the factorial of the required numbers. 2. Apply the combinatorial formula to obtain the result. 3. Return the computed value. # Requirements Use the following math library functions: - `math.factorial`","solution":"import math def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Calculate the binomial coefficient (m+n-2 choose m-1) return math.factorial(m + n - 2) // (math.factorial(m - 1) * math.factorial(n - 1))"},{"question":"You are required to create a function called `increment_elements` which takes two arguments: 1. `input_list`: A list of integers. 2. `increment_by`: An integer value by which each element of the list should be incremented. This argument defaults to 1 if not provided. The function should: - Increment each element in the `input_list` by the value of `increment_by`. - Return a new list containing the incremented values. - Raise a `TypeError` if the `input_list` contains non-integer values. Implement this functionality ensuring you correctly handle the default value and the type checking. **Function Signature:** ```python def increment_elements(input_list, increment_by=1): pass ``` **Example Usage:** ```python print(increment_elements([1, 2, 3])) # Expected Output: [2, 3, 4] print(increment_elements([1, 2, 3], 2)) # Expected Output: [3, 4, 5] print(increment_elements([5, 10, 15], 10)) # Expected Output: [15, 20, 25] print(increment_elements([5, 10, \'a\'], 2)) # Expected Output: TypeError ```","solution":"def increment_elements(input_list, increment_by=1): Increment each integer in the input_list by the value of increment_by. Args: input_list (list): A list of integers. increment_by (int, optional): The value to increment each element by. Defaults to 1. Returns: list: A new list with incremented values. Raises: TypeError: If input_list contains non-integer values. if not all(isinstance(i, int) for i in input_list): raise TypeError(\\"All elements in the list must be integers\\") return [i + increment_by for i in input_list]"},{"question":"You are tasked with writing a function `reformat_phones(phone_list)` that takes a list of phone numbers in various formats and returns a list of phone numbers formatted consistently in the form \\"(XXX) XXX-XXXX\\". The input list will contain phone numbers that can be provided in varying formats: 1. Numbers might be separated by spaces, dashes, or dots, e.g. \\"123 456 7890\\", \\"123-456-7890\\", or \\"123.456.7890\\". 2. Numbers might also be formatted with country codes and enclosed in parentheses, such as \\"+1 (123) 456-7890\\" or just \\"(123) 456-7890\\". 3. Sometimes international prefixes might be included but are to be stripped off. Your function should: 1. Parse each phone number and extract the digits. 2. Reformat the extracted digits into the format \\"(XXX) XXX-XXXX\\". 3. Raise a `ValueError` if the number contains other than 10 digits (ignoring any country code). For solving this problem, you are required to use regular expressions via the `re` library in Python. Function Signature: ```python def reformat_phones(phone_list: list) -> list: ``` **Example:** ```python phone_list = [\\"123 456 7890\\", \\"123-456-7890\\", \\"123.456.7890\\", \\"+1 (123) 456-7890\\"] print(reformat_phones(phone_list)) # This should output [\'(123) 456-7890\', \'(123) 456-7890\', \'(123) 456-7890\', \'(123) 456-7890\'] ``` **Note:** Any phone number with an incorrect format should trigger a `ValueError` with the message \\"Invalid phone number format\\".","solution":"import re def reformat_phones(phone_list): Takes a list of phone numbers in various formats and returns a list of phone numbers formatted consistently in the form \\"(XXX) XXX-XXXX\\". Args: phone_list (list): List of phone numbers as strings. Returns: list: List of phone numbers formatted as \\"(XXX) XXX-XXXX\\". Raises: ValueError: If the number contains other than 10 digits (ignoring any country code). formatted_numbers = [] for phone in phone_list: # Extract digits from the phone number digits = re.sub(r\'D\', \'\', phone) # Remove leading country code if it exists if len(digits) > 10: if digits.startswith(\'1\'): digits = digits[1:] if len(digits) != 10: raise ValueError(\\"Invalid phone number format\\") formatted_phone = f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\" formatted_numbers.append(formatted_phone) return formatted_numbers"},{"question":"In this problem, you are required to write a function `findMissingNumber(arr)` that finds and returns the missing number from a given list of consecutive integers. The list will contain integers from `1` to `n` with exactly one number missing. The function should compute the expected sum of the first `n` integers using the formula `n*(n+1)/2` and compare it with the actual sum of the elements in the array to find the missing number. The function you need to write is defined as: ```python def findMissingNumber(arr): # your code here ``` **Input**: - `arr` (list): A list of integers representing a sequence with one number missing. **Output**: - An integer representing the missing number in the list. **Constraints**: - The length of `arr` is `n-1`, where the list contains numbers from `1` to `n` with one missing. - All elements in `arr` are distinct. **Examples**: 1. `findMissingNumber([1, 2, 4, 5, 6])` should return `3`. 2. `findMissingNumber([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1])` should return `15`. 3. `findMissingNumber([1, 3])` should return `2`. Note that the function should efficiently compute the missing number in a manner that uses basic arithmetic operations for the summation approach.","solution":"def findMissingNumber(arr): Finds the missing number in a list of consecutive integers starting from 1 to n. Args: arr (list): The given list with one number missing. Returns: int: The missing number. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"** You are working on an automated data processing pipeline that handles various data transformation tasks on a list of integers. One of the tasks involves identifying and handling duplicate values in an efficient manner. Your task is to write a function named `find_duplicates` that does the following: 1. Takes a list of integers as an input. 2. Returns a list of integers that are duplicates in the input list. The returned list should be sorted in ascending order and should not contain any additional duplicates. **Constraints:** - The input list can contain both positive and negative integers. - The input list length can vary from 0 to 10^4. - Aim for an efficient solution with a time complexity of O(n log n) or better. **Example:** ```python find_duplicates([4, 3, 2, 7, 8, 2, 3, 1]) -> [2, 3] find_duplicates([10, 20, 10, -1, -1, 0]) -> [-1, 10] find_duplicates([1, 2, 3, 4, 5]) -> [] ``` Write the `find_duplicates` function to solve this problem. **","solution":"def find_duplicates(nums): Returns a sorted list of duplicates from the input list of integers. if not nums: return [] nums.sort() duplicates = set() prev = None for num in nums: if num == prev: duplicates.add(num) prev = num return sorted(duplicates)"},{"question":"Implement a function named `validate_email_addresses` that verifies the validity of a list of email addresses based on specified criteria. The function should accept one argument `emails`, which is a list of strings, with each string being an email address to validate. The function returns a dictionary with the email addresses as keys and boolean values as values indicating whether the emails are valid or not. The validation criteria are: 1. The email address must contain exactly one `@` character. 2. There must be at least one character before the `@` character. 3. There must be a domain name (i.e., at least one `.` character after the `@`). 4. The top-level domain (the part after the last `.`) must be at least 2 characters long. For example: ```python emails = [ \\"test@example.com\\", \\"invalidemail.com\\", \\"@missinglocalpart.com\\", \\"missingdomain@.com\\", \\"missingdot@domaincom\\", \\"short@domain.c\\", ] result = validate_email_addresses(emails) print(result) # The output should be: # { # \\"test@example.com\\": True, # \\"invalidemail.com\\": False, # \\"@missinglocalpart.com\\": False, # \\"missingdomain@.com\\": False, # \\"missingdot@domaincom\\": False, # \\"short@domain.c\\": False, # } ``` Ensure proper handling for: - Emails with multiple `@` characters. - Emails that do not meet the specified criteria.","solution":"def validate_email_addresses(emails): Validate a list of email addresses based on given criteria. Parameters: emails (list of str): List of email addresses to validate. Returns: dict: Dictionary with email addresses as keys and boolean values as values indicating whether the emails are valid or not. def is_valid_email(email): if email.count(\'@\') != 1: return False local_part, domain_part = email.split(\'@\') if not local_part: return False if \'.\' not in domain_part: return False domain_name, *top_level_domain = domain_part.rsplit(\'.\', 1) if not domain_name or len(top_level_domain[-1]) < 2: return False return True return {email: is_valid_email(email) for email in emails}"},{"question":"You are required to write a function named `generate_histogram` which takes one argument: 1. `data` (a list of integers). The function should: 1. Calculate the frequency of each unique integer in the list. 2. Plot a histogram displaying the frequencies of the integers using the Matplotlib library. 3. Label the x-axis with \'Integers\' and the y-axis with \'Frequency\'. 4. Return a dictionary where the keys are the unique integers and the values are their corresponding frequencies. Instructions: - Use the Matplotlib library to plot the histogram. - Make sure to handle edge cases where the list might be empty. Here is the signature of the function: ```python def generate_histogram(data: list) -> dict: ``` Example: ```python import matplotlib.pyplot as plt data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] histogram = generate_histogram(data) print(histogram) # Output: {1: 1, 2: 2, 3: 3, 4: 4} # The function will also display a histogram plot. ```","solution":"import matplotlib.pyplot as plt from collections import Counter def generate_histogram(data: list) -> dict: Calculates the frequency of each unique integer in the list `data` and plots a histogram. Parameters: data (list): A list of integers. Returns: dict: A dictionary where keys are unique integers from `data` and values are their corresponding frequencies. # Calculate the frequency of each unique integer frequency = Counter(data) # Plot the histogram plt.bar(frequency.keys(), frequency.values()) plt.xlabel(\'Integers\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Frequencies\') plt.show() return dict(frequency)"},{"question":"You are required to write a Python function that calculates the shortest path in a grid from a start position to an end position based on provided constraints. The function should be named `shortest_path`, and it should use breadth-first search (BFS) to find the shortest route. The grid, start position, and end position are given as inputs, along with possible move directions. The function should accept the following parameters: - `grid` (list of lists of integers): The grid representing the area. Each cell\'s value indicates whether the cell is traversable (`0`) or blocked (`1`). - `start` (tuple of two integers): The starting coordinates (row, column) in the grid. - `end` (tuple of two integers): The destination coordinates (row, column) in the grid. - `moves` (list of tuples of two integers): Allowed movements in the grid. Each tuple corresponds to a possible direction (row_move, column_move) such as up, down, left, and right. The function should return a list of coordinate tuples representing the shortest path from `start` to `end`. If no path exists, the function should return an empty list. Here is a detailed description of the requirements: - Use BFS to explore the grid, starting from the `start` position. - Only traverse cells that are within grid boundaries and marked as `0`. - Track the path taken and ensure the path reconstructed at the end is the shortest. - If the `start` or `end` position is blocked or if there is no valid path, return an empty list. Example input and output: ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] start = (0, 0) end = (4, 4) moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right path = shortest_path(grid, start, end, moves) print(path) # Expected output: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] ``` Your implementation should handle the breadth-first search efficiently and return the correct shortest path.","solution":"from collections import deque def shortest_path(grid, start, end, moves): Finds the shortest path in a grid using breadth-first search (BFS). Args: grid (list of lists of int): The grid where the path is searched. start (tuple of int): The starting coordinates (row, col). end (tuple of int): The destination coordinates (row, col). moves (list of tuples of int): Allowed movements in the grid (row_move, col_move). Returns: list of tuples of int: The shortest path from start to end. if grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return [] rows, cols = len(grid), len(grid[0]) visited = set() queue = deque([(start, [start])]) visited.add(start) while queue: (current, path) = queue.popleft() if current == end: return path for move in moves: next_row, next_col = current[0] + move[0], current[1] + move[1] next_position = (next_row, next_col) if 0 <= next_row < rows and 0 <= next_col < cols and grid[next_row][next_col] == 0 and next_position not in visited: visited.add(next_position) queue.append((next_position, path + [next_position])) return []"},{"question":"In this task, you are required to write a function named `filter_restaurants` that filters a list of restaurant dictionaries based on a user-defined criteria. The list of restaurant dictionaries and the criteria will be provided as input parameters. # Task: 1. Implement a function `filter_restaurants(restaurants, criteria)` where: - `restaurants` is a list of dictionaries, where each dictionary represents a restaurant and contains the following keys: - `\'name\'`: a string representing the name of the restaurant. - `\'cuisine\'`: a string representing the type of cuisine served at the restaurant. - `\'rating\'`: a float representing the average rating of the restaurant out of 5. - `\'price\'`: an integer representing the price level of the restaurant, with 1 being the cheapest and 5 being the most expensive. - `criteria` is a dictionary that contains the following keys: - `\'cuisine\'` (optional): a string representing the type of cuisine to filter by. - `\'min_rating\'` (optional): a float representing the minimum acceptable rating. - `\'max_price\'` (optional): an integer representing the maximum acceptable price level. 2. The function should return a list of dictionaries representing the restaurants that match all the specified criteria. If a criterion is not provided (i.e., not present in the criteria dictionary), it should not be used for filtering. # Requirements: - Use list comprehensions to filter the restaurants. - Ensure that the filtering logic is efficient and accounts for the optional nature of each filtering criterion. # Example Usage: ```python restaurants = [ {\'name\': \'Pizza Place\', \'cuisine\': \'Italian\', \'rating\': 4.5, \'price\': 2}, {\'name\': \'Sushi Spot\', \'cuisine\': \'Japanese\', \'rating\': 4.2, \'price\': 3}, {\'name\': \'Burger Joint\', \'cuisine\': \'American\', \'rating\': 4.0, \'price\': 1}, {\'name\': \'French Bistro\', \'cuisine\': \'French\', \'rating\': 4.7, \'price\': 5}, ] criteria = {\'cuisine\': \'Japanese\', \'min_rating\': 4.0, \'max_price\': 3} print(filter_restaurants(restaurants, criteria)) ``` Upon running the example above, the function should return the following output: ```python [ {\'name\': \'Sushi Spot\', \'cuisine\': \'Japanese\', \'rating\': 4.2, \'price\': 3} ] ```","solution":"def filter_restaurants(restaurants, criteria): Filters a list of restaurants based on the given criteria. :param restaurants: List[Dict], list of restaurants where each restaurant is a dictionary containing \'name\', \'cuisine\', \'rating\', and \'price\' keys. :param criteria: Dict, dictionary with optional \'cuisine\', \'min_rating\', and \'max_price\' keys. :return: List[Dict], list of restaurants that match all the specified criteria. return [ restaurant for restaurant in restaurants if (\'cuisine\' not in criteria or restaurant[\'cuisine\'] == criteria[\'cuisine\']) and (\'min_rating\' not in criteria or restaurant[\'rating\'] >= criteria[\'min_rating\']) and (\'max_price\' not in criteria or restaurant[\'price\'] <= criteria[\'max_price\']) ]"},{"question":"Create a function called `generate_markov_chain(text)` that generates a Markov Chain based on the provided input text string. The function should follow these detailed steps: 1. **Input**: A single string `text` which contains multiple sentences. All sentences are separated by a period followed by a space. 2. **Output**: A dictionary representing the Markov Chain. In this dictionary, each key is a word, and the value is a dictionary of subsequent words with their occurrence counts. # Detailed Steps: 1. Split the `text` into a list of words by spaces while retaining the periods attached to the words. 2. Traverse this list of words and construct the Markov Chain, where: - Each word (except the last one) points to the dictionary of words that can follow it. - If a word is followed by a period, the next word starts a new sentence (but in the Markov chain, periods should be treated the same as any other word). - Increment the count of each subsequent word appropriately in the dictionary. ```python def generate_markov_chain(text): words = text.split() markov_chain = {} for i in range(len(words) - 1): current_word = words[i] next_word = words[i + 1] if current_word not in markov_chain: markov_chain[current_word] = {} if next_word not in markov_chain[current_word]: markov_chain[current_word][next_word] = 1 else: markov_chain[current_word][next_word] = markov_chain[current_word][next_word] + 1 return markov_chain ``` # Example: Input: ```plaintext \\"hello world. hello there. welcome to the world of programming.\\" ``` Output: ```python { \\"hello\\": {\\"world.\\": 1, \\"there.\\": 1}, \\"world.\\": {\\"hello\\": 1}, \\"there.\\": {\\"welcome\\": 1}, \\"welcome\\": {\\"to\\": 1}, \\"to\\": {\\"the\\": 1}, \\"the\\": {\\"world\\": 1}, \\"world\\": {\\"of\\": 1}, \\"of\\": {\\"programming.\\": 1} } ```","solution":"def generate_markov_chain(text): words = text.split() markov_chain = {} for i in range(len(words) - 1): current_word = words[i] next_word = words[i + 1] if current_word not in markov_chain: markov_chain[current_word] = {} if next_word not in markov_chain[current_word]: markov_chain[current_word][next_word] = 1 else: markov_chain[current_word][next_word] += 1 return markov_chain"},{"question":"Write a function `balanced_parentheses(string)` that checks whether the parentheses in a given string are balanced. Balanced parentheses mean that each opening parenthesis has a corresponding closing parenthesis, and the pairs are correctly nested. The function should iterate through the given string character-by-character and use a stack to keep track of the parentheses. If the string has balanced parentheses, it should return `True`, otherwise, it should return `False`. **Requirements:** 1. Implement the stack functionality manually using a list (do not use any collection or stack libraries). 2. Consider only the characters \'(\' and \')\' in the string; other characters should be ignored. 3. The function should handle empty strings and strings without any parentheses, returning `True` in those cases. **Function Specification:** - **Function Name:** `balanced_parentheses` - **Input:** `string` (a string containing the characters to be checked). - **Output:** `True` if the parentheses are balanced, `False` otherwise. **Example:** ```python balanced_parentheses(\\"(abc(123))\\") # Should return True balanced_parentheses(\\"((b)c))\\") # Should return False balanced_parentheses(\\"\\") # Should return True balanced_parentheses(\\"abc\\") # Should return True balanced_parentheses(\\")(\\") # Should return False ``` By matching the provided questions in style, complexity, and length, this question ensures continuity in the assessment environment and validates understanding of fundamental data structures like stacks.","solution":"def balanced_parentheses(string): Checks whether the parentheses in given string are balanced. Args: string (str): The string containing characters to be checked. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in string: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"** Implement a function named `sparse_matrix_sum` which computes the sum of two sparse matrices represented in the coordinate list (COO) format. The function `sparse_matrix_sum` will follow this signature: ```python def sparse_matrix_sum(sparse_matrix1: List[Tuple[int, int, int]], sparse_matrix2: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]: Computes the sum of two sparse matrices given in COO format. Parameters: sparse_matrix1 (List[Tuple[int, int, int]]): List of tuples representing the first sparse matrix. sparse_matrix2 (List[Tuple[int, int, int]]): List of tuples representing the second sparse matrix. Returns: List[Tuple[int, int, int]]: List of tuples representing the summed sparse matrix in COO format. ``` # Requirements 1. Each matrix is represented as a list of tuples where each tuple `(row, col, value)` represents a non-zero element in the matrix. 2. The matrices are guaranteed to be of the same dimensions. 3. If a position has a zero value in both matrices, it should not appear in the output. 4. If a sum at a certain position results in zero, it should not appear in the output. # Examples ```python # Example 1 sparse_matrix1 = [(0, 0, 1), (1, 2, 2), (2, 1, 3)] sparse_matrix2 = [(0, 0, 4), (1, 1, 5), (1, 2, -2), (2, 1, 1)] print(sparse_matrix_sum(sparse_matrix1, sparse_matrix2)) ``` Expected Output for Example 1: ``` [(0, 0, 5), (1, 1, 5), (2, 1, 4)] ``` ```python # Example 2 sparse_matrix1 = [(0, 0, 2), (0, 1, 3)] sparse_matrix2 = [(0, 1, -3), (1, 0, 4), (1, 1, 3)] print(sparse_matrix_sum(sparse_matrix1, sparse_matrix2)) ``` Expected Output for Example 2: ``` [(0, 0, 2), (1, 0, 4), (1, 1, 3)] ``` Write the function `sparse_matrix_sum` as described. Be sure to test your implementation with various inputs to ensure its correctness. **","solution":"from typing import List, Tuple def sparse_matrix_sum(sparse_matrix1: List[Tuple[int, int, int]], sparse_matrix2: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]: Computes the sum of two sparse matrices given in COO format. Parameters: sparse_matrix1 (List[Tuple[int, int, int]]): List of tuples representing the first sparse matrix. sparse_matrix2 (List[Tuple[int, int, int]]): List of tuples representing the second sparse matrix. Returns: List[Tuple[int, int, int]]: List of tuples representing the summed sparse matrix in COO format. from collections import defaultdict elements = defaultdict(int) for row, col, value in sparse_matrix1: elements[(row, col)] += value for row, col, value in sparse_matrix2: elements[(row, col)] += value result = [(row, col, value) for (row, col), value in elements.items() if value != 0] return sorted(result, key=lambda x: (x[0], x[1]))"},{"question":"You are required to write a Python function named `generate_sine_wave_plot()` that uses the NumPy and Matplotlib libraries to generate and visualize a sine wave, as well as annotate the plot at a specific point. Here are the detailed steps your function should follow: 1. Use NumPy to create an array of `x` values from 0 to 2π, with an interval of 0.01. 2. Generate the corresponding `y` values for a sine wave using the NumPy `sin` function. 3. Create a line plot of the sine wave using Matplotlib\'s `plot` function. 4. Annotate the plot at the point (π, 0) with the text \'Peak\' and an arrow pointing to the exact location. Make sure to follow these specific instructions: - Your function should not take any arguments. - Use the `np.arange` function to generate the `x` array. - Ensure the plot has an appropriate title, x-axis label \'x values\', and y-axis label \'sin(x)\'. - Set the limits of the x-axis to [0, 2π] and the y-axis to [-1, 1]. - Use Matplotlib\'s `annotate` function to add the text and arrow at the specified point. - Show the final plot using the `plt.show()` function. Here\'s the required function definition: ```python def generate_sine_wave_plot(): pass ``` Ensure that you import all necessary libraries within this function.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_sine_wave_plot(): Generates a sine wave plot, annotates the point (π, 0) with \'Peak\', and displays the plot. # Step 1: Create an array of x values from 0 to 2π with an interval of 0.01 x = np.arange(0, 2 * np.pi, 0.01) # Step 2: Generate the corresponding y values for a sine wave y = np.sin(x) # Step 3: Create the line plot plt.plot(x, y) # Title and labels plt.title(\'Sine Wave\') plt.xlabel(\'x values\') plt.ylabel(\'sin(x)\') # Limits plt.xlim([0, 2 * np.pi]) plt.ylim([-1, 1]) # Step 4: Annotate the plot at the point (π, 0) with \'Peak\' plt.annotate(\'Peak\', xy=(np.pi, 0), xytext=(np.pi + 1, 0.5), arrowprops=dict(facecolor=\'black\', shrink=0.05)) # Show the plot plt.show()"},{"question":"In this task, you will create a function `split_and_sort_file_content` that processes the text content of a given file, splits it into individual words, sorts these words alphabetically, removes duplicates, and saves the resulting sorted words into a new file. Here is the functionality required: 1. The function should read the content of a given file. 2. Split the content into individual words based on whitespace (spaces, tabs, and newlines). 3. Sort these words alphabetically. 4. Remove any duplicates from the sorted list. 5. Write the unique, sorted words into a new file called \'sorted_output.txt\'. Ensure the function handles potential errors gracefully, such as the file not existing or being unreadable, and prints appropriate error messages. Use the following variable in your function: - `file_path`: The path to the input file whose content is to be processed. Here is the function signature: ```python def split_and_sort_file_content(file_path): ``` **Note**: Use Python\'s built-in file handling methods, string operations, and list manipulations to achieve the required functionality.","solution":"def split_and_sort_file_content(file_path): Processes the text content of the provided file, splits it into words, sorts these words alphabetically, removes duplicates, and saves the resulting sorted words into a new file called \'sorted_output.txt\'. :param file_path: Path to the input file with text content to be processed. try: with open(file_path, \'r\') as file: content = file.read() words = content.split() unique_words = sorted(set(words)) with open(\'sorted_output.txt\', \'w\') as output_file: for word in unique_words: output_file.write(word + \\"n\\") except FileNotFoundError: print(f\\"Error: The file at {file_path} does not exist.\\") except IOError: print(f\\"Error: Could not read the file at {file_path}.\\")"},{"question":"You have been tasked with creating a function that generates a scatter plot for two groups of data points and fits a linear regression line for each group. The scatter plot should include distinct colors for each group, a legend, and annotations for outliers (data points that deviate significantly from the regression line). Additionally, calculate and display the R-squared values for each regression line. Please write a function named `plot_scatter_with_regression` that takes in the following arguments: - `x1`: A list of x-coordinates for Group 1. - `y1`: A list of y-coordinates corresponding to `x1`. - `x2`: A list of x-coordinates for Group 2. - `y2`: A list of y-coordinates corresponding to `x2`. - `outlier_threshold`: A threshold value to identify outliers. The function should carry out the following steps: 1. Create a scatter plot of both groups with distinct colors. 2. Fit a linear regression line for each group and plot it on the scatter plot. 3. Calculate and display the R-squared values for each regression line as annotations on the plot. 4. Identify and annotate outliers that deviate from the regression line by more than the specified threshold. Here\'s a structure to help you get started: ```python def plot_scatter_with_regression(x1, y1, x2, y2, outlier_threshold): import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score # Step 1: Create scatter plots plt.scatter(x1, y1, color=\'blue\', label=\'Group 1\') plt.scatter(x2, y2, color=\'green\', label=\'Group 2\') # Step 2: Fit linear regression lines def fit_and_plot_regression(x, y, color, label): x = np.array(x).reshape(-1, 1) y = np.array(y) model = LinearRegression().fit(x, y) y_pred = model.predict(x) r2 = r2_score(y, y_pred) plt.plot(x, y_pred, color=color, label=f\'{label} Regression (R²={r2:.2f})\') return y_pred, r2 y1_pred, r2_1 = fit_and_plot_regression(x1, y1, \'blue\', \'Group 1\') y2_pred, r2_2 = fit_and_plot_regression(x2, y2, \'green\', \'Group 2\') # Step 3: Identify and annotate outliers def annotate_outliers(x, y, y_pred, threshold): for i in range(len(y)): if abs(y[i] - y_pred[i]) > threshold: plt.annotate(f\'({x[i]}, {y[i]})\', (x[i], y[i]), textcoords=\\"offset points\\", xytext=(5,-5), ha=\'center\') annotate_outliers(x1, y1, y1_pred, outlier_threshold) annotate_outliers(x2, y2, y2_pred, outlier_threshold) # Step 4: Add legend and display plot plt.legend() plt.xlabel(\'X-axis\') plt.ylabel(\'Y-axis\') plt.title(\'Scatter Plot with Linear Regression Lines\') plt.show() ``` Implement this function ensuring the proper plotting of scatter points, fitting of regression lines, the display of R-squared values, and the annotation of outliers. Use matplotlib for displaying the figure correctly and sklearn for linear regression.","solution":"def plot_scatter_with_regression(x1, y1, x2, y2, outlier_threshold): import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score # Step 1: Create scatter plots plt.scatter(x1, y1, color=\'blue\', label=\'Group 1\') plt.scatter(x2, y2, color=\'green\', label=\'Group 2\') # Step 2: Fit linear regression lines def fit_and_plot_regression(x, y, color, label): x = np.array(x).reshape(-1, 1) y = np.array(y) model = LinearRegression().fit(x, y) y_pred = model.predict(x) r2 = r2_score(y, y_pred) plt.plot(x, y_pred, color=color, label=f\'{label} Regression (R²={r2:.2f})\') return y_pred, r2 y1_pred, r2_1 = fit_and_plot_regression(x1, y1, \'blue\', \'Group 1\') y2_pred, r2_2 = fit_and_plot_regression(x2, y2, \'green\', \'Group 2\') # Step 3: Identify and annotate outliers def annotate_outliers(x, y, y_pred, threshold): for i in range(len(y)): if abs(y[i] - y_pred[i]) > threshold: plt.annotate(f\'({x[i]}, {y[i]})\', (x[i], y[i]), textcoords=\\"offset points\\", xytext=(5,-5), ha=\'center\') annotate_outliers(x1, y1, y1_pred, outlier_threshold) annotate_outliers(x2, y2, y2_pred, outlier_threshold) # Step 4: Add legend and display plot plt.legend() plt.xlabel(\'X-axis\') plt.ylabel(\'Y-axis\') plt.title(\'Scatter Plot with Linear Regression Lines\') plt.show()"},{"question":"# Background You have been contracted to build a simple email validation function for an online registration system. An email address is considered valid if it follows these rules: 1. It contains exactly one `@` character. 2. The local part (the part before the `@` symbol) may contain uppercase and lowercase letters, digits, dots (`.`), hyphens (`-`), and underscores (`_`), but it must not start or end with a dot, hyphen, or underscore. 3. The domain part (the part after the `@` symbol) must contain at least one dot (`.`) and only lowercase letters and may have digits. Additionally, the last part of the domain (top-level domain) should only have lowercase letters with length between 2 and 6 characters. # Objective Write a function `is_valid_email(email: str) -> bool` that checks if the given email string is valid according to the above rules and returns `True` if it is valid, and `False` otherwise. # Constraints - The function must check each rule specified and return `False` immediately if any rule is violated. - The regular expressions module (`re`) can be used for pattern matching. - No external libraries or modules outside of Python\'s standard library can be used. # Function Signature ```python def is_valid_email(email: str) -> bool: pass ```","solution":"import re def is_valid_email(email: str) -> bool: Validates an email address based on the specified rules. # Split the email address into local and domain parts if \'@\' not in email or email.count(\'@\') != 1: return False local_part, domain_part = email.split(\'@\') # Validate the local part local_pattern = r\'^[a-zA-Z0-9]([a-zA-Z0-9._-]{0,62}[a-zA-Z0-9])?\' if not re.fullmatch(local_pattern, local_part): return False # Validate the domain part domain_pattern = r\'^[a-z0-9]+(.[a-z0-9-]+)*.[a-z]{2,6}\' if not re.fullmatch(domain_pattern, domain_part): return False return True"},{"question":"You are given a log file containing records of user accesses to various resources in a system. Each row in the log file represents a single access event with the following comma-separated fields: timestamp, user_id, resource_id. Your task is to analyze this log file and identify the top N most frequently accessed resources along with the number of accesses for each resource. Create a function named `most_accessed_resources` that will: 1. Read the log file from the provided path. 2. Parse the contents to count the frequency of accesses for each resource_id. 3. Identify the top N most frequently accessed resources. 4. Return this data as a list of tuples where each tuple contains a resource_id and its corresponding access count, sorted in descending order of accesses. The function signature should be: ```python def most_accessed_resources(file_path: str, N: int) -> List[Tuple[str, int]]: ``` # Input: - `file_path`: A string representing the path to the log file. - `N`: An integer specifying the number of top accessed resources to return. # Output: - A list of tuples where each tuple contains a resource_id and the number of times it was accessed, sorted in descending order of access count. # Example: Suppose the log file contains the following records: ``` 2023-10-05T12:34:56,user1,resource1 2023-10-05T12:35:01,user2,resource1 2023-10-05T12:35:10,user3,resource2 2023-10-05T12:35:15,user1,resource2 2023-10-05T12:35:20,user3,resource1 ``` If `N = 2`, the function should return: ```python [(\'resource1\', 3), (\'resource2\', 2)] ``` # Requirements: - Use Python\'s built-in file operations to read the log file. - Ensure proper handling of edge cases such as empty files or invalid records. - Utilize efficient data structures to manage counting and sorting the resource accesses.","solution":"from typing import List, Tuple from collections import Counter def most_accessed_resources(file_path: str, N: int) -> List[Tuple[str, int]]: This function reads a log file, counts accesses of each resource, and returns the top N most frequently accessed resources. :param file_path: Path to the log file. :param N: Number of top accessed resources to return. :return: A list of tuples where each tuple contains a resource_id and its access count. # Initialize a Counter to track accesses for each resource_id resource_access_counts = Counter() # Read the log file and update the counts with open(file_path, \'r\') as file: for line in file: parts = line.strip().split(\',\') if len(parts) == 3: resource_id = parts[2] resource_access_counts[resource_id] += 1 # Get the most common N accessed resources most_common_resources = resource_access_counts.most_common(N) return most_common_resources"},{"question":"You are given a list of integers where every element appears twice except for one element, which appears only once. You need to find and return the element that appears only once. This is a common problem in computer science, often requiring a basic understanding of bit manipulation and linear time complexities. Task: Write a function named `find_unique_element(nums)` that: 1. Accepts a list of integers `nums` as its parameter. 2. Returns the single integer that appears only once in the list. Constraints: - Your solution should have a linear runtime complexity (O(n)) and use constant space (O(1)). - You can assume that the input list is non-empty and contains exactly one unique element. Example: If `find_unique_element([4, 1, 2, 1, 2])` is called, the function should return `4`. Instructions: Implement the function `find_unique_element(nums)` to find the unique element in the list using the principles of bit manipulation or any other efficient method that adheres to the constraints. Hint: Think about how the XOR operation can be utilized to solve this problem efficiently.","solution":"def find_unique_element(nums): Returns the unique element in the list where every other element appears twice. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"Write a Python function `rotate_image` that rotates a given grayscale image by a specified angle. This function should make use of the `scipy.ndimage.rotate` function to perform the rotation. Ensure the function can handle inappropriate angles and has the option to save the rotated image as a file, specified by a title. The function\'s parameters should include: - `img`: A NumPy array representing a grayscale image (2D array of type `np.float32` with values in range [0., 1.]). - `angle`: A float representing the angle in degrees by which the image should be rotated. Positive values for clockwise rotation. - `title`: A string for the title of the rotated image, which also serves as the filename if saving the image. - `save_image`: A boolean indicating whether to save the rotated image to disk as a PNG file. Ensure the function checks for invalid angle types (it should be a float) and raises a `TypeError` if the angle is not valid. If `save_image` is set to `True`, the rotated image should be saved to a file named `<title>.png`. You will need to use `matplotlib.pyplot.imshow` to display the rotated image and `matplotlib.pyplot.savefig` if you choose to save the image to disk. Example usage: ```python import numpy as np from scipy.ndimage import rotate import matplotlib.pyplot as plt def rotate_image(img, angle, title, save_image=False): if not isinstance(angle, (int, float)): raise TypeError(\\"Angle must be a float.\\") rotated_img = rotate(img, angle, reshape=True) fig, ax = plt.subplots() ax.imshow(rotated_img, cmap=\'gray\') ax.set_title(title) plt.show() if save_image: plt.imsave(f\\"{title}.png\\", rotated_img, cmap=\'gray\') # Create a sample grayscale image image = np.random.rand(100, 100).astype(np.float32) # Rotate the image by 45 degrees rotate_image(image, 45.0, \\"45 Degree Rotation\\", save_image=True) ```","solution":"import numpy as np from scipy.ndimage import rotate import matplotlib.pyplot as plt def rotate_image(img, angle, title, save_image=False): Rotates a given grayscale image by a specified angle. Parameters: img (numpy.ndarray): A 2D array of type np.float32 representing the grayscale image. angle (float): The angle in degrees by which the image should be rotated. Positive values for clockwise rotation. title (str): A string for the title of the rotated image and file name if saving it. save_image (bool): A boolean indicating whether to save the rotated image to disk as a PNG file. Raises: TypeError: If the angle is not a float. if not isinstance(angle, (int, float)): raise TypeError(\\"Angle must be a float or int.\\") rotated_img = rotate(img, angle, reshape=True) fig, ax = plt.subplots() ax.imshow(rotated_img, cmap=\'gray\') ax.set_title(title) plt.show() if save_image: plt.imsave(f\\"{title}.png\\", rotated_img, cmap=\'gray\') # Example usage: # Create a sample grayscale image image = np.random.rand(100, 100).astype(np.float32) # Rotate the image by 45 degrees rotate_image(image, 45.0, \\"45 Degree Rotation\\", save_image=True)"},{"question":"You are required to implement a function named `rotate_matrix_90` that takes a 2D list (matrix) as an input and returns a new matrix that is rotated 90 degrees clockwise. Do not use built-in functions for rotating or transposing the matrix; instead, manually compute the transformation. Here\'s the prototype for the function you need to implement: ```python def rotate_matrix_90(matrix: List[List[int]]) -> List[List[int]]: # Your implementation here ``` **Constraints:** 1. The input matrix will have at least one element. 2. The input matrix will be a well-formed 2D list, meaning all rows will have the same length. **Examples:** Example 1: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_matrix_90(matrix)) # Expected Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Example 2: ```python matrix = [ [1, 2], [3, 4], [5, 6] ] print(rotate_matrix_90(matrix)) # Expected Output: [[5, 3, 1], [6, 4, 2]] ``` Use this problem to test your understanding of matrix manipulation and the logic required to manually rotate a matrix.","solution":"def rotate_matrix_90(matrix): Rotates a given 2D matrix 90 degrees clockwise. :param matrix: List[List[int]] - a 2D list representing the matrix :return: List[List[int]] - the rotated matrix num_rows = len(matrix) num_cols = len(matrix[0]) # Initialize the rotated matrix with the correct shape rotated_matrix = [[0] * num_rows for _ in range(num_cols)] for i in range(num_rows): for j in range(num_cols): rotated_matrix[j][num_rows - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are tasked with implementing a function that compresses a given string using a simple form of run-length encoding (RLE). This compression technique is particularly effective for strings with sequences of repeating characters. The key concept is to replace sequences of the same character with that character followed by the number of times it repeats. Your task is to implement the function `compress_string(s)` that takes a string `s` and returns its compressed form using RLE. The compressed string should only be shorter if the encoding actually reduces the original string\'s length; otherwise, return the original string. # Function Signature ```python def compress_string(s: str) -> str: ``` # Input - `s` (str): A string consisting of uppercase and lowercase English letters. # Output - (str): The compressed string using RLE if it shortens the original string; otherwise, the original string. # Example ```python assert compress_string(\\"aaabcccccaaa\\") == \\"a3b1c5a3\\" # \\"aaabcccccaaa\\" is compressed to \\"a3b1c5a3\\" assert compress_string(\\"abcdef\\") == \\"abcdef\\" # \\"abcdef\\" cannot be compressed further ``` # Constraints - The string will only contain uppercase and lowercase English letters. - The maximum length of the string `s` is 1000 characters. # Additional Notes - If a character repeats consecutively, its frequency should be appended next to it. Single characters should still have a frequency of 1. - The output should be the original string if compression does not reduce the string\'s length. For instance, \\"abcdef\\" stays \\"abcdef\\" since \\"a1b1c1d1e1f1\\" is longer. - You should handle both uppercase and lowercase letters as distinct characters. ```python def compress_string(s: str) -> str: n = len(s) if n == 0: return \\"\\" encoded_string = [] i = 0 while i < n: count = 1 while i + 1 < n and s[i] == s[i+1]: i += 1 count += 1 encoded_string.append(s[i]) encoded_string.append(str(count)) i += 1 rle_string = \'\'.join(encoded_string) # Return the original string if compressed version isn\'t shorter return rle_string if len(rle_string) < n else s # Test cases print(compress_string(\\"aaabcccccaaa\\")) # Output: \\"a3b1c5a3\\" print(compress_string(\\"abcdef\\")) # Output: \\"abcdef\\" print(compress_string(\\"\\")) # Output: \\"\\" print(compress_string(\\"aabbcc\\")) # Output: \\"aabbcc\\" ```","solution":"def compress_string(s: str) -> str: Compresses a given string s using run-length encoding (RLE). Parameters: s (str): The input string consisting of uppercase and lowercase English letters. Returns: str: The RLE compressed string if it is shorter than the original string, otherwise the original string. n = len(s) if n == 0: return \\"\\" encoded_string = [] i = 0 while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: i += 1 count += 1 encoded_string.append(s[i]) encoded_string.append(str(count)) i += 1 rle_string = \'\'.join(encoded_string) # Return the original string if compressed version isn\'t shorter return rle_string if len(rle_string) < n else s"},{"question":"In many scientific applications, it is crucial to be able to compute the root of a function accurately. The Bisection method is a simple iterative method to find the roots of a continuous function. You are required to write a function named `bisection_method` that uses the Bisection method to find the root of a given function `f` over a given interval `[a, b]`. The function should take the following parameters: 1. `f` (function): The continuous function for which we want to find the root. 2. `a` (float): The starting point of the interval. 3. `b` (float): The ending point of the interval. 4. `tol` (float): The tolerance level, which determines the required precision of the solution. 5. `max_iter` (int): The maximum number of iterations allowed. The Bisection method follows these steps: 1. Check if `f(a)` and `f(b)` have opposite signs. If they do not, the bisection method cannot be applied, and you should return `None`. 2. Compute the midpoint `c = (a + b) / 2`. 3. Evaluate `f(c)`. 4. If `f(c)` is close enough to zero (within the tolerance `tol`), then `c` is the root, and the function should return `c`. 5. Otherwise, determine the subinterval `[a, c]` or `[c, b]` which contains the root. Replace the interval `[a, b]` with this subinterval. 6. Repeat steps 2-5 until the root is found within the specified tolerance or the maximum number of iterations is reached. # Signature of the function ```python def bisection_method(f, a, b, tol=1e-8, max_iter=100): ``` # Example Suppose we have a continuous function: ```python def f(x): return x**2 - 4 ``` We can call: ```python root = bisection_method(f, 1, 3, tol=1e-8, max_iter=100) print(root) # Output should be close to 2 because 2^2 - 4 = 0 ``` # Libraries - No external libraries are required for this function. # Notes - Ensure the function `f` is continuous over the interval `[a, b]`. - The function should handle cases where the method cannot be applied (when `f(a)` and `f(b)` have the same sign).","solution":"def bisection_method(f, a, b, tol=1e-8, max_iter=100): Uses the Bisection method to find the root of the function f in the interval [a, b]. Parameters: f (function): A continuous function for which the root is to be found. a (float): The start of the interval. b (float): The end of the interval. tol (float): Tolerance level to determine the required precision of the solution. max_iter (int): Maximum number of iterations allowed. Returns: float: The root of the function if found within the tolerance and iteration limits. None: If the root cannot be found or if f(a) and f(b) have the same sign. if f(a) * f(b) >= 0: # Bisection method cannot be applied if f(a) and f(b) do not have opposite signs return None for _ in range(max_iter): c = (a + b) / 2 if abs(f(c)) < tol: return c elif f(a) * f(c) < 0: b = c else: a = c # If the loop ends without finding the root within tolerance, # we return the midpoint from the last iteration return (a + b) / 2"},{"question":"You are tasked with creating a function that processes a list of words to determine and visualize the frequency of their first letters. The function should use the `matplotlib.pyplot` module to create a bar chart where each bar represents the frequency of a particular starting letter from the alphabet. Requirements: 1. Write a function named `plot_first_letter_frequency` with a parameter `words_list` (list of strings). 2. The function should achieve the following: - Create a dictionary to store counts of words starting with each letter (case insensitive). - Populate the dictionary by iterating through the `words_list`. - Generate a bar chart that displays the frequency of words starting with each letter. - Ensure the x-axis labels cover all letters from \'A\' to \'Z\', even those with zero frequency. - Set the x-axis label as \\"Letters\\" and the y-axis label as \\"Frequency\\". - Add a title \\"First Letter Frequency in Words List\\". - Display the bar chart using `matplotlib.pyplot.show()`. Example: ```python words = [\\"Apple\\", \\"Banana\\", \\"apricot\\", \\"blueberry\\", \\"Almond\\", \\"Cherry\\", \\"cucumber\\"] plot_first_letter_frequency(words) ``` This will generate and display a bar chart showing the frequency of first letters (case insensitive) from the provided list of words.","solution":"import matplotlib.pyplot as plt from collections import defaultdict import string def plot_first_letter_frequency(words_list): Plot the frequency of first letters of words in the words_list using a bar chart. Parameters: words_list (list of str): List of words to process. # Initialize a dictionary to store counts of words starting with each letter (case insensitive) letter_freq = defaultdict(int) # Populate the dictionary by iterating through the words_list for word in words_list: if word: # Ensure the word is not an empty string first_letter = word[0].upper() if first_letter in string.ascii_uppercase: letter_freq[first_letter] += 1 # Ensure all letters from \'A\' to \'Z\' are included in the dictionary, even with zero frequency frequencies = [letter_freq[letter] for letter in string.ascii_uppercase] # Generate a bar chart plt.figure(figsize=(10, 5)) plt.bar(string.ascii_uppercase, frequencies, color=\'skyblue\') plt.xlabel(\'Letters\') plt.ylabel(\'Frequency\') plt.title(\'First Letter Frequency in Words List\') plt.show()"},{"question":"Consider the following task: Create a function named `normalize_vectors` utilizing the NumPy library that normalizes a collection of 3D vectors stored in a 2D array. The function should take no arguments and should: 1. Generate a 2D array `vectors` of shape (5, 3) using the `np.array` method, where each row represents a 3D vector: ``` vectors = [[3, 4, 0], [1, 2, 2], [4, 4, 4], [6, 0, 8], [1, 2, 1]] ``` 2. Normalize each vector to have a unit norm (i.e., the vector\'s magnitude should be 1), ensuring that each vector maintains its direction. To achieve the normalization, compute the L2 norm of each vector and then divide each vector\'s components by its corresponding norm. Use NumPy\'s functions for these operations. Here is the signature of the function: ```python def normalize_vectors(): ``` The function should return the array containing the normalized vectors. **Example:** ```python >>> result = normalize_vectors() >>> print(result) [[0.6 0.8 0. ] [0.33333333 0.66666667 0.66666667] [0.57735027 0.57735027 0.57735027] [0.6 0. 0.8 ] [0.40824829 0.81649658 0.40824829]] ``` Ensure that your implementation performs the required normalization precisely.","solution":"import numpy as np def normalize_vectors(): Normalizes a 2D array of 3D vectors to unit norm. vectors = np.array([ [3, 4, 0], [1, 2, 2], [4, 4, 4], [6, 0, 8], [1, 2, 1] ]) norms = np.linalg.norm(vectors, axis=1, keepdims=True) normalized_vectors = vectors / norms return normalized_vectors"},{"question":"You are required to create a function `find_median_from_stream(numbers)` that processes a stream of numbers and returns the median of the current numbers after processing each one. **Function Name:** `find_median_from_stream` **Parameters:** - `numbers`: A list of integers representing a stream of numbers incoming one by one. **Returns:** - A list of floats where each element represents the median of the numbers processed up to that point. **Instructions:** 1. Implement a data structure that can efficiently manage the incoming numbers and retrieve the median after each insertion. 2. For each number in the input list, insert it into the data structure and compute the median. 3. Maintain a balanced approach where you divide the numbers into two heaps (max-heap for the lower half and min-heap for the upper half) to keep track of the median. **Requirements:** Use the following Python Standard Library functions and modules: - `heapq.heappush()` - `heapq.heappop()` **Hint:** - Use two heaps: a max-heap for the lower half of the numbers and a min-heap for the upper half. - Python\'s `heapq` module creates a min-heap, so to simulate a max-heap, you can invert the values stored in the heap. **Example:** Input: ```python numbers = [5, 15, 1, 3] ``` Output: ```python [5.0, 10.0, 5.0, 4.0] ```","solution":"import heapq def find_median_from_stream(numbers): Processes a stream of numbers and returns the median of the current numbers after processing each one. Parameters: numbers (list): A list of integers representing a stream of numbers incoming one by one. Returns: list: A list of floats where each element represents the median of the numbers processed up to that point. lower_half = [] # max-heap (inverted min-heap) upper_half = [] # min-heap medians = [] for number in numbers: # Insert number into the appropriate heap if not lower_half or number <= -lower_half[0]: heapq.heappush(lower_half, -number) else: heapq.heappush(upper_half, number) # Rebalance the heaps if necessary if len(lower_half) > len(upper_half) + 1: heapq.heappush(upper_half, -heapq.heappop(lower_half)) elif len(upper_half) > len(lower_half): heapq.heappush(lower_half, -heapq.heappop(upper_half)) # Calculate the median if len(lower_half) == len(upper_half): median = (-lower_half[0] + upper_half[0]) / 2.0 else: median = float(-lower_half[0]) medians.append(median) return medians"},{"question":"You are asked to create a function named `balance_bookkeeping` to help balance the expenses and revenues in a company\'s bookkeeping system. This function should process a series of transactions given as a list of dictionaries and calculate the net balance, the total expenses, and the total revenues. Here are the specific requirements: 1. **Function Signature**: ```python def balance_bookkeeping(transactions: List[Dict[str, Any]]) -> Dict[str, float]: ``` 2. **Parameters**: - `transactions` (List[Dict[str, Any]]): A list where each element is a dictionary representing a transaction. Each transaction dictionary will have: - `type` (str): The type of transaction, either \\"expense\\" or \\"revenue\\". - `amount` (float): The amount of the transaction. - `date` (str): The date of the transaction in the format \\"YYYY-MM-DD\\". 3. **Return Value**: - The function should return a dictionary containing: - `net_balance` (float): The net balance calculated as total revenues minus total expenses. - `total_expenses` (float): The total sum of all expenses. - `total_revenues` (float): The total sum of all revenues. 4. **Example**: ```python transactions = [ {\'type\': \'revenue\', \'amount\': 1000.0, \'date\': \'2023-01-15\'}, {\'type\': \'expense\', \'amount\': 200.0, \'date\': \'2023-01-20\'}, {\'type\': \'revenue\', \'amount\': 500.0, \'date\': \'2023-01-25\'}, {\'type\': \'expense\', \'amount\': 300.0, \'date\': \'2023-02-01\'} ] result = balance_bookkeeping(transactions) # Expected output: # { # \'net_balance\': 1000.0, # \'total_expenses\': 500.0, # \'total_revenues\': 1500.0 # } ``` 5. **Hints**: - Iterate over the list of transactions to separate and sum up expenses and revenues. - Use dictionary operations to store and return the computed values.","solution":"from typing import List, Dict, Any def balance_bookkeeping(transactions: List[Dict[str, Any]]) -> Dict[str, float]: total_expenses = 0.0 total_revenues = 0.0 for transaction in transactions: if transaction[\'type\'] == \'expense\': total_expenses += transaction[\'amount\'] elif transaction[\'type\'] == \'revenue\': total_revenues += transaction[\'amount\'] net_balance = total_revenues - total_expenses return { \'net_balance\': net_balance, \'total_expenses\': total_expenses, \'total_revenues\': total_revenues }"},{"question":"You are tasked with implementing a function to process a text file that contains information about various products and their prices. Each line in the file represents a single product, with the product name and price separated by a comma. Your function will read the file, compute the total cost of all products, and return a dictionary where the keys are the product names and the values are their respective prices. **Function Signature:** ```python def process_product_file(file_path): Reads a product file from the given file path, calculates the total cost of products, and returns a dictionary with product names as keys and prices as values. :param file_path: str The path to the product file. :return: dict A dictionary where keys are product names and values are prices, and the total cost. ``` Requirements - Open and read the text file from `file_path`. - Each line in the file will be formatted as `product_name,price`. - Parse each line to extract the product name and price. - Calculate the total cost of all products and include it in the return dictionary with the key `total_cost`. Input - `file_path`: A string representing the path to the text file containing product data. Output - Returns a dictionary where keys are product names and values are floats representing prices. - The dictionary should also include the key `total_cost` with the total price of all products. Example Suppose the file at `sample_file_path` has the following content: ``` Apple,0.50 Banana,0.30 Orange,0.80 ``` The function call `process_product_file(\\"sample_file_path\\")` should return: ```python { \\"Apple\\": 0.50, \\"Banana\\": 0.30, \\"Orange\\": 0.80, \\"total_cost\\": 1.60 } ```","solution":"def process_product_file(file_path): Reads a product file from the given file path, calculates the total cost of products, and returns a dictionary with product names as keys and prices as values. :param file_path: str The path to the product file. :return: dict A dictionary where keys are product names and values are prices, and the total cost. product_prices = {} total_cost = 0.0 with open(file_path, \'r\') as file: for line in file: product, price = line.strip().split(\',\') price = float(price) product_prices[product] = price total_cost += price product_prices[\'total_cost\'] = total_cost return product_prices"},{"question":"In software development, especially in backend applications, it\'s common to handle user management and access control. Suppose you are tasked to create a function to process and manage user account information. You need to implement a function that filters user accounts based on their status and sorts them by the date they were created. You are required to write a function `filter_and_sort_users` that achieves the following: 1. Takes as input: - A dataframe `users_df` containing columns such as \'user_id\', \'status\', \'creation_date\', and other user details. - A string `status` to filter the user accounts by (\'active\', \'inactive\', \'suspended\'). - A boolean `ascending` that determines the sorting order by creation date. If `True`, sort in ascending order, otherwise sort in descending order. Default is `True`. 2. Returns a dataframe containing user accounts that match the given status, sorted by their creation date based on the provided order. Function signature: ```python def filter_and_sort_users(users_df, status, ascending=True): pass ``` Here is an example of how the dataframe might look: ``` user_id status creation_date other_details 0 101 active 2021-01-10 ... 1 102 inactive 2020-05-15 ... 2 103 suspended 2022-07-20 ... ... ``` **Requirements**: - Filter the dataframe to include only the user accounts that match the given status. - Sort the resulting dataframe by the \'creation_date\' column based on the order specified by the `ascending` parameter. - Ensure the input status to filter exists in the dataframe; if not, raise a `ValueError`. - Handle cases where the `creation_date` might be in different formats and ensure proper sorting by converting it to a common datetime format before sorting. **Example Use Cases**: ```python filter_and_sort_users(users_df, status=\'active\', ascending=True) filter_and_sort_users(users_df, status=\'inactive\', ascending=False) ```","solution":"import pandas as pd def filter_and_sort_users(users_df, status, ascending=True): Filters and sorts user accounts based on their status and creation date. Parameters: users_df (pd.DataFrame): DataFrame containing user account information. status (str): Status to filter users by (\'active\', \'inactive\', \'suspended\'). ascending (bool): Sorting order for creation date. Default is True. Returns: pd.DataFrame: Filtered and sorted DataFrame. Raises: ValueError: If the given status is not found in the DataFrame. # Ensure the status is valid if status not in users_df[\'status\'].unique(): raise ValueError(f\\"Status \'{status}\' not found in the DataFrame.\\") # Filter by the given status filtered_df = users_df[users_df[\'status\'] == status] # Convert \'creation_date\' to datetime for proper sorting if not pd.api.types.is_datetime64_any_dtype(filtered_df[\'creation_date\']): filtered_df[\'creation_date\'] = pd.to_datetime(filtered_df[\'creation_date\']) # Sort by \'creation_date\' column sorted_df = filtered_df.sort_values(by=\'creation_date\', ascending=ascending) return sorted_df"},{"question":"You are given a list of string expressions representing mathematical equations. Each equation is a string consisting of integers and the operators `+`, `-`, `*`, and `/`. Your task is to evaluate these equations and return the results in a new list. Create a function `evaluate_equations(equations)` that receives a list of equations and returns a list of their corresponding results. Assume that each equation is valid and does not contain any spaces. **Requirements for the function:** - **Input:** - `equations`: A list of strings, where each string represents a mathematical equation. - **Output:** - A list of floats or integers representing the results of the equations. **Example input and output:** ```python input_equations = [\\"3+5\\", \\"10-2*3/4\\", \\"8*3+2\\"] result = evaluate_equations(input_equations) print(result) # Output: [8, 8.5, 26] ``` To implement the function, you can use Python\'s built-in `eval()` function, but be sure to handle the input carefully to avoid any security risks associated with using `eval()`.","solution":"def evaluate_equations(equations): Evaluates a list of string mathematical equations. Returns a list of results for each equation. :param equations: List of strings, where each string is a mathematical equation. :return: List of results (float or int). results = [] for eq in equations: # Directly evaluate the equation using Python\'s eval function # We assume equations are safe and valid as per the problem statement. results.append(eval(eq)) return results"},{"question":"You are given an array of integers and a target value T. Your task is to find all pairs of integers in the array that sum up to T. Each pair should be a tuple of integers (a, b), with `a < b`, and pairs should be listed in ascending order based on the first element of the pair. If there are multiple pairs with the same first element, they should be ordered by the second element. Write a function named `find_pairs_with_sum` to accomplish this task. The function should take the following input: - `arr`: A list of integers. - `T`: An integer representing the target sum. The function should return a list of tuples containing the pairs that sum up to T, ordered as described above. # Function Signature ```python def find_pairs_with_sum(arr: list, T: int) -> list: ``` # Example ```python # Example input list arr = [1, 5, 7, -1, 5] T = 6 result = find_pairs_with_sum(arr, T) print(result) # Expected output: [(1, 5), (-1, 7)] ``` # Implementation Constraints - Account for all edge cases like empty input - Ensure the pairs are sorted as required - Optimize for time and space efficiency","solution":"def find_pairs_with_sum(arr: list, T: int) -> list: Finds all pairs of integers in the array that sum up to T, with the pairs sorted in ascending order based on the first and second elements. pairs = [] seen = set() for num in arr: target = T - num if target in seen: pairs.append((min(num, target), max(num, target))) seen.add(num) # Sort pairs primarily by the first element, and then by the second element pairs = list(set(pairs)) pairs.sort() return pairs"},{"question":"**Context:** You are designing a resource allocation system for a cloud computing platform. Each cloud server can host multiple virtual machines (VMs), but each VM requires a specific amount of CPU and memory resources. The system needs to ensure that any new VM being added to a server does not exceed the available resources of that server. **Goal:** You need to implement a function named `can_allocate_vm` that determines if a new VM can be allocated to a server without exceeding its CPU and memory limits. **Further Details:** - The function should take the following parameters: - `server_cpu`: The total CPU capacity of the server. - `server_memory`: The total memory capacity of the server. - `allocated_vms`: A list of tuples, where each tuple contains the CPU and memory allocation of a currently allocated VM (e.g., `[(2, 4), (1, 1)]` means two VMs are allocated, using 2 CPU and 4 memory, and 1 CPU and 1 memory, respectively). - `new_vm`: A tuple representing the CPU and memory requirements of the new VM to be allocated. - The function should return `True` if the new VM can be allocated within the given server\'s remaining resources, and `False` otherwise. **Function Signature:** ```python def can_allocate_vm(server_cpu, server_memory, allocated_vms, new_vm): pass ``` **Example:** ```python server_cpu = 10 server_memory = 20 allocated_vms = [(2, 4), (3, 5), (1, 2)] new_vm = (3, 8) result = can_allocate_vm(server_cpu, server_memory, allocated_vms, new_vm) print(result) # Output: True ``` In the example above, the server has 10 CPU and 20 memory in total. The currently allocated VMs use up a total of 6 CPU and 11 memory. Adding the new VM with 3 CPU and 8 memory would result in 9 CPU and 19 memory being used, which is within the server’s capacity, so the function returns `True`. **Constraints:** - The `server_cpu`, `server_memory`, and all VM resource values will be non-negative integers. - The `allocated_vms` list, `new_vm` tuple, and all elements within them will only contain integers.","solution":"def can_allocate_vm(server_cpu, server_memory, allocated_vms, new_vm): Determines if a new VM can be added to the server without exceeding available CPU and memory resources. Parameters: server_cpu (int): Total CPU capacity of the server. server_memory (int): Total memory capacity of the server. allocated_vms (list): List of tuples representing CPU and memory allocation of currently allocated VMs. new_vm (tuple): A tuple representing the CPU and memory requirements of the new VM to be allocated. Returns: bool: True if the new VM can be allocated, False otherwise. total_allocated_cpu = sum(cpu for cpu, memory in allocated_vms) total_allocated_memory = sum(memory for cpu, memory in allocated_vms) remaining_cpu = server_cpu - total_allocated_cpu remaining_memory = server_memory - total_allocated_memory return new_vm[0] <= remaining_cpu and new_vm[1] <= remaining_memory"},{"question":"Create a function named `count_words_in_file` that takes a single argument `filepath`, which is the full path of a text file. This function should open the file, count the number of occurrences of each word in the file, and return a dictionary where the keys are words, and the values are the counts of occurrences for each word. Here are some specific requirements for the function: - Words are case insensitive. For example, \\"Word\\", \\"word\\", and \\"WORD\\" should be counted as the same word. - Words should be stripped of punctuation and special characters, but you can assume the punctuation is limited to the standard set (e.g., `.,!?`). The expected dictionary should contain the following key-value pairs format: ```python { \'word1\': count1, \'word2\': count2, ... } ``` # Example For a file with the following content: ``` Hello world! This is a test. Hello again, world. ``` The function should return a dictionary like this: ```python { \'hello\': 2, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1, \'again\': 1 } ``` # Function Signature: ```python def count_words_in_file(filepath: str) -> Dict[str, int]: ```","solution":"import string from collections import defaultdict from typing import Dict def count_words_in_file(filepath: str) -> Dict[str, int]: word_count = defaultdict(int) with open(filepath, \'r\', encoding=\'utf-8\') as file: for line in file: for word in line.split(): cleaned_word = word.strip(string.punctuation).lower() if cleaned_word: word_count[cleaned_word] += 1 return dict(word_count)"},{"question":"You need to create a function `find_common_elements(dicts_list)` that takes a list of dictionaries and returns a list of elements that are present in every dictionary\'s value lists. Requirements: 1. The function should take a list `dicts_list`, which contains multiple dictionaries. 2. Each dictionary has strings as keys and lists of integers as values. 3. Determine the common elements that appear in the value lists of all dictionaries. 4. Return a sorted list of these common elements (sorted in ascending order). Example: Given the following list of dictionaries: ```python dicts_list = [ {\'A\': [1, 2, 3], \'B\': [2, 3, 4]}, {\'C\': [2, 3, 5], \'D\': [2, 3]}, {\'E\': [1, 2, 3], \'F\': [2, 3, 6]} ] ``` The function should return: ``` [2, 3] ``` #","solution":"def find_common_elements(dicts_list): Returns a sorted list of elements that are present in the value lists of all dictionaries in the input list. if not dicts_list: return [] # Get all the values from the first dictionary common_elements = set() for key in dicts_list[0]: common_elements.update(dicts_list[0][key]) # Intersect with values from all other dictionaries for dictionary in dicts_list[1:]: current_values = set() for key in dictionary: current_values.update(dictionary[key]) common_elements.intersection_update(current_values) return sorted(list(common_elements))"},{"question":"You are tasked with implementing a function called `first_repeated_character(s)`. This function will take a string parameter `s` and return the first character that appears more than once in the string. If there is no such character, the function should return `None`. To achieve this, you can use a set to keep track of characters that have been seen as you iterate through the string. Once you find a character that has already been seen, return it as the first repeated character. Your function should adhere to this signature: ```python def first_repeated_character(s: str) -> Optional[str]: ``` **Example:** ```python first_repeated_character(\\"hello\\") # Should return \\"l\\" first_repeated_character(\\"abcdefg\\") # Should return None first_repeated_character(\\"aabcc\\") # Should return \\"a\\" ```","solution":"from typing import Optional def first_repeated_character(s: str) -> Optional[str]: seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Create a function called `knapsack_problem(capacity, weights, values)` in Python to solve the 0/1 Knapsack problem using dynamic programming. The function should return the maximum value that can be placed in a knapsack of given capacity. The 0/1 knapsack problem is a classic optimization problem where you are given a set of items, each with a weight and a value, and you need to determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit (capacity), and the total value is as large as possible. Unlike the \\"fractional knapsack problem,\\" here, you cannot break items into smaller parts; you can either take the whole item or not take it at all. # Function Signature ```python def knapsack_problem(capacity, weights, values): Solves the 0/1 Knapsack problem and returns the maximum value that fits into the knapsack. Parameters: capacity (int): The total weight capacity of the knapsack. weights (List[int]): A list of weights of the items. values (List[int]): A list of values corresponding to the items. Returns: int: The maximum value that can be carried in the knapsack. ``` # Input: 1. `capacity`: An integer representing the maximum weight capacity of the knapsack. 2. `weights`: A list of integers where each integer represents the weight of a specific item. 3. `values`: A list of integers where each integer represents the value of a specific item. # Output: An integer representing the maximum value that can be obtained by selecting items without exceeding the knapsack capacity. # Requirements: 1. Utilize dynamic programming to solve the problem. 2. Ensure the solution is efficient and falls within acceptable time limits for given constraints. # Example Usage: ```python # Given capacity, weights of the items, and their respective values capacity = 50 weights = [10, 20, 30] values = [60, 100, 120] # The function should return 220, which is the maximum value that fits in the knapsack max_value = knapsack_problem(capacity, weights, values) ``` # Constraints: - 1 <= capacity <= 10^3 - 1 <= len(weights) == len(values) <= 100 - 1 <= weights[i] <= 1000 - 1 <= values[i] <= 1000","solution":"def knapsack_problem(capacity, weights, values): Solves the 0/1 Knapsack problem and returns the maximum value that fits into the knapsack. Parameters: capacity (int): The total weight capacity of the knapsack. weights (List[int]): A list of weights of the items. values (List[int]): A list of values corresponding to the items. Returns: int: The maximum value that can be carried in the knapsack. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"You are given a dataset in CSV format containing information about books from a public library. The data resides in \'_library_data/Books_Info.csv\' and it includes the following columns: \'Title\', \'Author\', \'Genre\', \'PublishedYear\', and \'CheckedOut\'. Your task is to create a function named `process_books_data` which: 1. Reads the CSV file into a Pandas DataFrame. 2. Filters the DataFrame to include only the books published in the 21st century (year >= 2000). 3. Groups the data by \'Genre\' and calculates the average number of times the books have been checked out within each genre. 4. Sorts the resulting data by the genre name in ascending order. 5. Writes the processed DataFrame to a new CSV file named \'_library_data/Books_CheckedOut_Averages.csv\'. Function Signature: ```python def process_books_data(infile: str) -> None: pass ``` Here, `infile` is a string that holds the path to the input CSV file. Expected Behavior: - The function processes the data correctly and saves the results in the specified format.","solution":"import pandas as pd def process_books_data(infile: str) -> None: # Step 1: Read the CSV file into a Pandas DataFrame df = pd.read_csv(infile) # Step 2: Filter the DataFrame to include only the books published in the 21st century (year >= 2000) df_21st_century = df[df[\'PublishedYear\'] >= 2000] # Step 3: Group the data by \'Genre\' and calculate the average number of times the books have been checked out within each genre avg_checked_out = df_21st_century.groupby(\'Genre\')[\'CheckedOut\'].mean().reset_index() # Step 4: Sort the resulting data by the genre name in ascending order sorted_avg_checked_out = avg_checked_out.sort_values(by=\'Genre\') # Step 5: Write the processed DataFrame to a new CSV file sorted_avg_checked_out.to_csv(\'_library_data/Books_CheckedOut_Averages.csv\', index=False) # Example usage: # process_books_data(\'_library_data/Books_Info.csv\')"},{"question":"Title: Analyzing Word Frequency in Text Documents You are tasked with building a function `analyze_word_frequency` which reads multiple text documents, processes the text to calculate word frequencies, and returns a dictionary of the most common words across all documents. # Function Signature ```python def analyze_word_frequency(file_paths: list, top_n: int = 10) -> dict: pass ``` # Parameters - `file_paths` (list): A list of file paths to text documents. - `top_n` (int): The number of most common words to return. Defaults to 10. # Requirements 1. Read each file specified in `file_paths`. 2. For each file, preprocess the text: - Remove any punctuation. - Convert all characters to lowercase. 3. Calculate the frequency of each word across all documents. 4. Return a dictionary where the keys are the top `top_n` most common words and the values are their frequencies. 5. If `top_n` is greater than the total number of unique words, print a message \\"top_n exceeds unique word count, all words will be returned.\\" and return the frequencies of all words. 6. Handle any file reading errors gracefully by printing an informative message and continuing to the next file. # Constraints - You may assume that all files are encoded in UTF-8. - Use the `collections.Counter` class to aid in counting word frequencies. # Example ```python file_paths = [\'document1.txt\', \'document2.txt\', \'document3.txt\'] result = analyze_word_frequency(file_paths, top_n=5) print(result) ``` This might return a dictionary such as: ``` {\'the\': 120, \'and\': 85, \'to\': 78, \'of\': 74, \'a\': 69} ``` # Notes - Do not include numbers in the word counts. - The function should efficiently handle large files and a high number of unique words.","solution":"import os import string from collections import Counter def analyze_word_frequency(file_paths: list, top_n: int = 10) -> dict: This function reads multiple text documents, processes the text to calculate word frequencies, and returns a dictionary of the most common words across all documents. Parameters: - file_paths (list): A list of file paths to text documents. - top_n (int): The number of most common words to return. Defaults to 10. Returns: - dict: A dictionary where the keys are the top `top_n` most common words and the values are their frequencies. word_counter = Counter() for path in file_paths: try: with open(path, \'r\', encoding=\'utf-8\') as file: text = file.read() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) words = [word.lower() for word in text.split() if word.isalpha()] word_counter.update(words) except Exception as e: print(f\\"Error reading file {path}: {e}\\") common_words = word_counter.most_common(top_n) # If top_n exceeds the number of unique words, return all words if top_n > len(word_counter): print(\\"top_n exceeds unique word count, all words will be returned.\\") return dict(word_counter) return dict(common_words)"},{"question":"Write a function that reads a CSV file from a given file path, processes the data, and generates a summary. The summary should include the following statistics for each numerical column: - Mean - Median - Standard Deviation If the CSV file cannot be read (e.g., due to a nonexistent file or incorrect permissions), the function should raise an IOError with the message \\"Failed to read the CSV file.\\" If the CSV contains no numerical columns, the function should raise a ValueError with the message \\"No numerical columns in the CSV.\\" The function should output: - A dictionary where the keys are the column names and the values are another dictionary containing the \'mean\', \'median\', and \'std\' statistics for that column. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def generate_csv_summary(file_path): ```","solution":"import pandas as pd import numpy as np def generate_csv_summary(file_path): Reads a CSV file, processes the data and generates summary statistics for each numerical column. Parameters: file_path (str): The file path to the CSV file. Returns: dict: Summary statistics including mean, median, and std deviation for each numerical column. try: df = pd.read_csv(file_path) except Exception: raise IOError(\\"Failed to read the CSV file.\\") num_cols = df.select_dtypes(include=[np.number]) if num_cols.empty: raise ValueError(\\"No numerical columns in the CSV.\\") summary = {} for col in num_cols.columns: summary[col] = { \'mean\': num_cols[col].mean(), \'median\': num_cols[col].median(), \'std\': num_cols[col].std() } return summary"},{"question":"# Develop a Function for Sorting a List of Dictionaries by a Specific Key You need to create a function that sorts a list of dictionaries based on a specified key. The sorting should be done in ascending order and handle cases where the key may not be present in all dictionaries. **Function Details:** 1. **Function Name:** `sort_dict_list` 2. **Function Parameters:** - `dict_list`: A list of dictionaries to be sorted. - `sort_key`: A string representing the key by which to sort the dictionaries. 3. **Function Behavior:** - The function should return a new list of dictionaries sorted based on the specified key. - If a dictionary does not contain the specified key, it should be placed at the end of the list. - In case of a tie (i.e., when two dictionaries have the same value for the sort_key), maintain their relative order from the original list (stable sort). 4. **Constraints:** - Each dictionary will have string keys and values can be integers or strings. - The function should handle an empty list by returning an empty list. **Example:** ```python dict_list = [ {\'name\': \'Alice\', \'age\': 34}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'age\': 30}, {\'name\': \'David\'}, {\'name\': \'Eve\', \'age\': 29} ] sort_key = \'age\' sorted_list = sort_dict_list(dict_list, sort_key) print(sorted_list) ``` **Expected Output:** ```python [ {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Eve\', \'age\': 29}, {\'name\': \'Charlie\', \'age\': 30}, {\'name\': \'Alice\', \'age\': 34}, {\'name\': \'David\'} ] ```","solution":"def sort_dict_list(dict_list, sort_key): Sorts a list of dictionaries based on a specified key in ascending order. Dictionaries without the key are placed at the end. return sorted(dict_list, key=lambda x: (sort_key not in x, x.get(sort_key)))"},{"question":"You need to implement a function that takes an array of integers and rearranges it such that all even numbers appear before all odd numbers while preserving the relative order of both even and odd numbers from the original array. The function, `rearrange_even_odd(arr: List[int]) -> List[int>`, should follow these guidelines: 1. **Traverse the array**: Iterate through the array to identify even and odd numbers. 2. **Reorder the array**: Ensure that all even numbers come before all odd numbers, maintaining the initial relative order of even and odd numbers within their respective groups. Input - A list of integers `arr`, which may include both even and odd numbers. Output - A list of integers with all even numbers followed by all odd numbers, preserving the relative order from the input array. **Example** ```python arr = [1, 2, 3, 4, 5, 6] print(rearrange_even_odd(arr)) ``` **Expected Output** ```python [2, 4, 6, 1, 3, 5] ``` Constraints - The input list `arr` will have a length between `1` and `1000`. - All elements in the array are integers between `-10000` and `10000`. # Note - You may not use any built-in sort functions; the order must be maintained by traversing and reconstructing the list as specified.","solution":"def rearrange_even_odd(arr): Rearrange the array such that all even numbers appear before all odd numbers while preserving the relative order of both even and odd numbers from the original array. :param arr: List of integers :return: List of integers with even numbers followed by odd numbers even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"Write a Python function `complex_signal_processing` that takes in the following parameters: - `A`, `B`, `C`: floats representing signal magnitudes - `omega_A`, `omega_B`, `omega_C`: floats representing angular frequencies - `phi_A`, `phi_B`, `phi_C`: floats representing phase shifts - `alpha`, `beta`, `gamma`: floats representing damping coefficients - `t`: time as a float The function should compute the real and imaginary parts of the complex signal using the following set of equations: ```python real_part = ( A * math.exp(-alpha * t) * math.cos(omega_A * t + phi_A) + B * math.exp(-beta * t) * math.cos(omega_B * t + phi_B) + C * math.exp(-gamma * t) * math.cos(omega_C * t + phi_C) ) imaginary_part = ( A * math.exp(-alpha * t) * math.sin(omega_A * t + phi_A) + B * math.exp(-beta * t) * math.sin(omega_B * t + phi_B) + C * math.exp(-gamma * t) * math.sin(omega_C * t + phi_C) ) complex_signal = complex(real_part, imaginary_part) ``` # Requirements: - You must use `math.exp`, `math.cos`, and `math.sin` from the `math` library as required. - The function should return the computed complex signal. # [Function Signature] ```python def complex_signal_processing(A, B, C, omega_A, omega_B, omega_C, phi_A, phi_B, phi_C, alpha, beta, gamma, t) -> complex: pass ```","solution":"import math def complex_signal_processing(A, B, C, omega_A, omega_B, omega_C, phi_A, phi_B, phi_C, alpha, beta, gamma, t): Computes the complex signal based on the provided parameters. Parameters: A, B, C (float): Signal magnitudes. omega_A, omega_B, omega_C (float): Angular frequencies. phi_A, phi_B, phi_C (float): Phase shifts. alpha, beta, gamma (float): Damping coefficients. t (float): Time. Returns: complex: The complex signal computed using the specified formulas. real_part = ( A * math.exp(-alpha * t) * math.cos(omega_A * t + phi_A) + B * math.exp(-beta * t) * math.cos(omega_B * t + phi_B) + C * math.exp(-gamma * t) * math.cos(omega_C * t + phi_C) ) imaginary_part = ( A * math.exp(-alpha * t) * math.sin(omega_A * t + phi_A) + B * math.exp(-beta * t) * math.sin(omega_B * t + phi_B) + C * math.exp(-gamma * t) * math.sin(omega_C * t + phi_C) ) complex_signal = complex(real_part, imaginary_part) return complex_signal"},{"question":"Implement a function called `replace_elements` that takes a list of integers `nums` and an integer `val`, and replaces every occurrence of `val` in the list with double its value. The function should return the updated list. The function should iterate over the list one time only (O(n) time complexity) and directly modify the original list. For example, if the input list is `[1, 2, 3, 2, 4]` and the value to replace is `2`, the function should return `[1, 4, 3, 4, 4]`. Function Signature ```python def replace_elements(nums: List[int], val: int) -> List[int]: pass ``` Example ```python print(replace_elements([1, 2, 3, 2, 4], 2)) # Output: [1, 4, 3, 4, 4] print(replace_elements([5, 6, 7, 8], 7)) # Output: [5, 6, 14, 8] ``` Constraints - The list `nums` contains up to (10^5) elements. - Each element in the list is an integer between (-10^9) and (10^9). - The value `val` is also an integer between (-10^9) and (10^9).","solution":"from typing import List def replace_elements(nums: List[int], val: int) -> List[int]: Replaces every occurrence of `val` in `nums` with double its value. Parameters: nums (List[int]): List of integers. val (int): Integer value to replace. Returns: List[int]: Modified list. for i in range(len(nums)): if nums[i] == val: nums[i] = val * 2 return nums"},{"question":"**You are required to develop a function called `sort_strings_by_length` that takes a list of strings and returns a new list where the strings are sorted by their length in ascending order. If two strings have the same length, they should appear in alphabetical order in the sorted list. Your function should be able to handle mixed-case strings appropriately, such that the sorting is done in a case-insensitive manner. This means that \'apple\' and \'Apple\' would be treated as equal in terms of alphabetical order. **Function Signature:** ```python def sort_strings_by_length(strings: List[str]) -> List[str]: ``` **Parameters:** - `strings` (List[str]): A list of strings to be sorted. **Returns:** - (List[str]): A new list of strings sorted by the specified criteria. **Examples:** ```python input_list = [\\"banana\\", \\"Apple\\", \\"cherry\\", \\"date\\", \\"elderberry\\", \\"fig\\", \\"grape\\"] sorted_list = sort_strings_by_length(input_list) print(sorted_list) # Output: [\'fig\', \'date\', \'Apple\', \'banana\', \'cherry\', \'grape\', \'elderberry\'] input_list = [\\"a\\", \\"abc\\", \\"AB\\", \\"ab\\", \\"Abc\\", \\"b\\", \\"B\\"] sorted_list = sort_strings_by_length(input_list) print(sorted_list) # Output: [\'a\', \'b\', \'B\', \'AB\', \'ab\', \'Abc\', \'abc\'] ``` **Notes:** - The input list `strings` can contain strings with any mix of upper and lower case letters. - The solution should take into account both the length and the lexicographic order of strings in a case-insensitive manner.","solution":"from typing import List def sort_strings_by_length(strings: List[str]) -> List[str]: Returns a new list where the strings are sorted by their length in ascending order. If two strings have the same length, they appear in alphabetical order in the sorted list. The sorting is done in a case-insensitive manner. return sorted(strings, key=lambda s: (len(s), s.lower()))"},{"question":"You are tasked with creating a utility function for a library management system. Your function, `calculate_fine`, will determine the fine for overdue books based on a set of predefined rules. # Requirements: 1. The function should accept two parameters: `return_date` and `due_date`, both in the format `YYYY-MM-DD`. 2. The fine is calculated based on the number of days a book is overdue: - If the book is returned on or before the due date, no fine is charged. - If the book is overdue by up to 5 days, the fine is 50 cents per day. - If the book is overdue by more than 5 days but up to 10 days, the fine is 1 dollar per day. - If the book is overdue by more than 10 days, the fine is 2 dollars per day, but capped at a maximum of 30 dollars. 3. Ensure the function calculates the fine accurately using the provided rules. # Input: - `return_date` (str): The actual return date of the book. - `due_date` (str): The due date of the book. # Output: - A float representing the total fine amount. # Example: ```python from datetime import datetime def calculate_fine(return_date: str, due_date: str) -> float: # Your implementation here pass # Example usage: return_date = \'2023-04-15\' due_date = \'2023-04-10\' fine = calculate_fine(return_date, due_date) print(fine) # Output should be 3.0 for 3 days overdue at 1 dollar per day ``` # Instructions: 1. Use the `datetime` library for date calculations. 2. Handle date format errors gracefully and ensure the function returns the correct fine as specified. 3. Ensure the function `calculate_fine` is efficient and adheres to the defined fine structure.","solution":"from datetime import datetime def calculate_fine(return_date: str, due_date: str) -> float: Calculate the fine for overdue books based on the return date and due date. Parameters: return_date (str): The actual return date of the book in \'YYYY-MM-DD\' format. due_date (str): The due date of the book in \'YYYY-MM-DD\' format. Returns: float: The total fine amount. try: return_date = datetime.strptime(return_date, \'%Y-%m-%d\') due_date = datetime.strptime(due_date, \'%Y-%m-%d\') except ValueError: return 0.0 # In case of invalid date format, no fine will be charged. overdue_days = (return_date - due_date).days if overdue_days <= 0: return 0.0 elif overdue_days <= 5: return overdue_days * 0.50 elif overdue_days <= 10: return overdue_days * 1.0 else: return min(overdue_days * 2.0, 30.0)"},{"question":"You are required to write a Python function `schedule_tasks()` to determine the minimum number of machines required to execute a list of tasks without overlapping. Each task has a start time and an end time. The function must calculate the minimum number of machines needed so that no two tasks are running simultaneously on the same machine. If two tasks touch at a single point, they can share the same machine. Objective 1. Read the list of tasks, where each task is represented by a tuple containing the start and end time. 2. Determine the minimum number of machines required to execute all tasks such that no two tasks overlap on the same machine. Input 1. `tasks` (List[Tuple[int, int]]): A list of tuples where each tuple contains the start and end time of a task. Output - (int): The minimum number of machines required to execute all tasks without overlap. Function Signature ```python def schedule_tasks(tasks: List[Tuple[int, int]]) -> int: ``` Example ```python tasks = [(1, 4), (2, 5), (3, 6), (7, 8)] print(schedule_tasks(tasks)) # Expected Output: 3 tasks = [(1, 2), (2, 3), (3, 4), (4, 5)] print(schedule_tasks(tasks)) # Expected Output: 1 ```","solution":"from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int]]) -> int: # Sort the tasks by their starting time sorted_tasks = sorted(tasks, key=lambda x: x[0]) # Use a heap to keep track of end times of tasks currently using machines import heapq heap = [] machines = 0 for task in sorted_tasks: start, end = task # Remove all machines that have finished their tasks before the start of the current task while heap and heap[0] <= start: heapq.heappop(heap) # Add the end time of the current task to the heap heapq.heappush(heap, end) # The number of machines needed is the maximum size of the heap at any time machines = max(machines, len(heap)) return machines"},{"question":"You are given a dataset that contains information about movie ratings. The dataset includes columns such as `user_id`, `movie_id`, `rating`, and `timestamp`, which represents the time the rating was given. Your task is to create a function named `transform_and_analyze_ratings` that performs the following steps: 1. **Feature Extraction**: - Extract the year, month, day, hour, minute, and second from the `timestamp` column. - Create a binary feature `is_late_night` to indicate if the rating was given late at night (between 10 PM and 4 AM). - Create a binary feature `is_weekend` to indicate if the rating was given on a weekend (Saturday or Sunday). 2. **Data Aggregation**: - Calculate the average rating for each movie. - Calculate the number of ratings for each movie. - Calculate the number of unique users who rated each movie. 3. **Feature Engineering**: - Create a feature `rating_per_user` to capture the average number of ratings per user. - Calculate the standard deviation of ratings for each movie. 4. **Output the Result**: - Return a DataFrame that includes `movie_id`, `average_rating`, `num_ratings`, `num_unique_users`, `rating_per_user`, and `std_rating`. The function should accept a filename (the path to the CSV file) and return the resulting DataFrame. **Libraries to Use**: - `pandas.read_csv` to read data from the CSV file.","solution":"import pandas as pd import numpy as np def transform_and_analyze_ratings(filename): # Load the CSV file df = pd.read_csv(filename) # Convert the timestamp to datetime format df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Extract year, month, day, hour, minute, and second from the timestamp df[\'year\'] = df[\'timestamp\'].dt.year df[\'month\'] = df[\'timestamp\'].dt.month df[\'day\'] = df[\'timestamp\'].dt.day df[\'hour\'] = df[\'timestamp\'].dt.hour df[\'minute\'] = df[\'timestamp\'].dt.minute df[\'second\'] = df[\'timestamp\'].dt.second # Create binary feature for late night ratings df[\'is_late_night\'] = df[\'hour\'].apply(lambda x: 1 if 22 <= x or x < 4 else 0) # Create binary feature for weekend ratings df[\'is_weekend\'] = df[\'timestamp\'].dt.weekday.apply(lambda x: 1 if x >= 5 else 0) # Calculate average rating for each movie avg_rating = df.groupby(\'movie_id\')[\'rating\'].mean().reset_index() avg_rating.columns = [\'movie_id\', \'average_rating\'] # Calculate the number of ratings for each movie num_ratings = df.groupby(\'movie_id\')[\'rating\'].count().reset_index() num_ratings.columns = [\'movie_id\', \'num_ratings\'] # Calculate the number of unique users who rated each movie num_unique_users = df.groupby(\'movie_id\')[\'user_id\'].nunique().reset_index() num_unique_users.columns = [\'movie_id\', \'num_unique_users\'] # Calculate the average number of ratings per user rating_per_user = df.groupby(\'user_id\')[\'rating\'].count().mean() # Calculate the standard deviation of ratings for each movie std_rating = df.groupby(\'movie_id\')[\'rating\'].std().reset_index() std_rating.columns = [\'movie_id\', \'std_rating\'] # Merge all the calculated features into a single DataFrame result_df = avg_rating.merge(num_ratings, on=\'movie_id\') result_df = result_df.merge(num_unique_users, on=\'movie_id\') result_df = result_df.merge(std_rating, on=\'movie_id\') # Add a column for the average number of ratings per user result_df[\'rating_per_user\'] = rating_per_user return result_df"},{"question":"Create a function that simulates random walks in a 2D plane and visualizes the paths taken within a given number of steps. The visual representation should clearly show the start and end points of each walk and use different colors for different walks. The function should output with: None: The function should display the plot but not return any value. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walks(num_walks, num_steps): ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walks(num_walks, num_steps): Simulates and visualizes random walks in a 2D plane. Parameters: num_walks (int): Number of walks to simulate. num_steps (int): Number of steps in each walk. Returns: None: The function displays the plot but does not return any value. plt.figure(figsize=(10, 6)) colors = plt.cm.viridis(np.linspace(0, 1, num_walks)) for i in range(num_walks): x = np.cumsum(np.random.choice([-1, 1], size=num_steps)) y = np.cumsum(np.random.choice([-1, 1], size=num_steps)) plt.plot(x, y, color=colors[i], label=f\'Walk {i+1}\') plt.scatter(x[0], y[0], color=colors[i], edgecolor=\'k\', s=100) # starting point plt.scatter(x[-1], y[-1], color=colors[i], edgecolor=\'red\', s=100) # ending point plt.title(\'Random Walks in 2D Plane\') plt.xlabel(\'X position\') plt.ylabel(\'Y position\') plt.legend() plt.grid(True) plt.show()"},{"question":"Design a Python function that reads a text file, counts the frequency of each word in the file (ignoring case), and returns a dictionary with words as keys and their frequencies as values. The function should handle punctuation and special characters by ignoring them. The function will receive the file path as input. You should write self-contained code starting with: ``` import string def task_func(file_path: str) -> dict: ```","solution":"import string def task_func(file_path: str) -> dict: Reads a text file, counts the frequency of each word in the file (ignoring case), and returns a dictionary with words as keys and their frequencies as values. word_count = {} with open(file_path, \'r\') as file: for line in file: # Remove punctuation and convert to lowercase line = line.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = line.split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a function `find_common_elements(arr1, arr2)` that finds the common elements between two sorted arrays and returns them as a new sorted array. Both input arrays `arr1` and `arr2` are guaranteed to be sorted in non-decreasing order. Your implementation should aim for an efficient solution to leverage the fact that the arrays are sorted. **Function Signature:** ```python def find_common_elements(arr1, arr2): ... ``` **Requirements:** 1. The function should return a list of common elements in sorted order. 2. The solution should have a time complexity better than (O(n times m)), where (n) and (m) are the lengths of `arr1` and `arr2` respectively. **Your task:** - Implement the function `find_common_elements(arr1, arr2)`. - The function should return a list of elements present in both input arrays. **Example:** ```python arr1 = [1, 2, 4, 5, 6] arr2 = [2, 4, 6, 8] common_elements = find_common_elements(arr1, arr2) print(common_elements) # Output: [2, 4, 6] ```","solution":"def find_common_elements(arr1, arr2): Returns the list of common elements in sorted order between two input sorted arrays. common_elements = [] i = j = 0 n, m = len(arr1), len(arr2) while i < n and j < m: if arr1[i] == arr2[j]: common_elements.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return common_elements"},{"question":"You are given a dataset consisting of several transactions, with each transaction containing the date of transaction (`date`), the amount spent (`amount`), and the category of expense (`category`). Your task is to write a function `summarize_expenses_by_category(transactions: pd.DataFrame) -> pd.DataFrame` that computes the following metrics for each category: 1. Total `amount` spent in that category. 2. Mean `amount` spent per transaction in that category. 3. The date of the highest `amount` transaction within that category. 4. The `amount` of the highest transaction within that category. The function should return a new DataFrame with these computed metrics, containing four columns: 1. `total_amount`: The sum of amounts for each category. 2. `mean_amount`: The mean of amounts for each category. 3. `highest_transaction_date`: The date of the highest transaction within each category. 4. `highest_transaction_amount`: The amount of the highest transaction within each category. Ensure that your implementation handles edge cases properly, such as categories with no transactions, and document your code thoroughly. **Requirements:** - Group the data by `category`. - Calculate the required metrics for each category. - Ensure proper handling of missing or null values in the transactions dataset.","solution":"import pandas as pd def summarize_expenses_by_category(transactions: pd.DataFrame) -> pd.DataFrame: Computes the total amount, mean amount, date of highest transaction, and amount of highest transaction for each expense category in the given transactions DataFrame. Parameters: transactions (pd.DataFrame): DataFrame containing transactions with columns - \'date\', \'amount\', \'category\'. Returns: pd.DataFrame: DataFrame with summary metrics for each category, containing columns: \'total_amount\', \'mean_amount\', \'highest_transaction_date\', \'highest_transaction_amount\'. # Ensure proper types transactions[\'date\'] = pd.to_datetime(transactions[\'date\'], errors=\'coerce\') transactions[\'amount\'] = pd.to_numeric(transactions[\'amount\'], errors=\'coerce\') # Remove rows with NaN values in critical columns transactions = transactions.dropna(subset=[\'date\', \'amount\', \'category\']) # Group by category and calculate required metrics summary = transactions.groupby(\'category\').agg( total_amount=(\'amount\', \'sum\'), mean_amount=(\'amount\', \'mean\'), highest_transaction_date=(\'date\', lambda x: x.loc[x.idxmax()]), highest_transaction_amount=(\'amount\', \'max\') ).reset_index() return summary"},{"question":"You are working with a dataset that keeps track of user activities on a website. The dataset consists of a CSV file named \'activities.csv\'. This file contains multiple entries with the following columns: \'UserId\', \'Activity\', \'Timestamp\'. Your goal is to identify active users and visualize activity trends. **Your task is to write a function named `analyze_activities` that performs the following operations:** 1. Load the \'activities.csv\' file using **Pandas\' `read_csv`** function. 2. Convert the \'Timestamp\' column to datetime format. 3. Group the data by \'UserId\' and count the number of activities per user. 4. Identify and return the user with the maximum number of activities. 5. Create a summary table showing the total number of activities for each month. 6. Plot a bar chart of the total number of activities per month using **Matplotlib**. The function should return the `UserId` of the most active user and display the bar chart of monthly activities. **Function Signature:** ```python def analyze_activities(file_path): ``` Ensure to handle exceptions if the input file is not found or reading fails. Display a relevant error message in such cases. Example usage could be: ```python most_active_user = analyze_activities(\'activities.csv\') print(f\\"The most active user is: {most_active_user}\\") ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_activities(file_path): try: # Load the activities dataset df = pd.read_csv(file_path) # Convert the \'Timestamp\' column to datetime format df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Group by \'UserId\' and count the number of activities per user user_activity_counts = df.groupby(\'UserId\').size() # Identify the user with the maximum number of activities most_active_user = user_activity_counts.idxmax() # Create a summary table showing total number of activities for each month df[\'Month\'] = df[\'Timestamp\'].dt.to_period(\'M\') monthly_activity_counts = df.groupby(\'Month\').size() # Plot a bar chart of total number of activities per month monthly_activity_counts.plot(kind=\'bar\') plt.xlabel(\'Month\') plt.ylabel(\'Total Activities\') plt.title(\'Monthly Activity Trends\') plt.show() return most_active_user except FileNotFoundError: print(f\\"The file {file_path} was not found.\\") return None except Exception as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"You are required to implement a Python function that mimics a simplified version of the Unix `grep` command. The function, named `simple_grep`, should search for a specified substring in a given list of strings and print all lines that contain the substring. The search should be case-insensitive. **Requirements:** 1. The function should take two arguments: the substring to search for and the list of strings to search within. 2. It should print each line from the list of strings that contains the substring. 3. The substring matching should be case-insensitive. **Function signature:** ```python def simple_grep(substring, lines): ... ``` **Example Usage:** ```python lines = [ \\"The quick brown fox\\", \\"jumps over the lazy dog\\", \\"THE QUICK BROWN DOG\\", \\"and runs away\\" ] simple_grep(\\"quick\\", lines) ``` Upon running the example, you should see an output similar to: ``` The quick brown fox THE QUICK BROWN DOG ``` In this example, both lines containing the substring \\"quick\\" (case-insensitive) are printed.","solution":"def simple_grep(substring, lines): Searches for the substring in the list of strings and prints each line that contains the substring. The search is case-insensitive. :param substring: str, the substring to search for. :param lines: List[str], the list of strings to search within. substring_lower = substring.lower() for line in lines: if substring_lower in line.lower(): print(line)"},{"question":"In this problem, you are tasked with creating a function that processes a list of dictionaries and returns a subset of data filtered based on given criteria. The original list contains dictionaries with the following keys: `\'id\'`, `\'name\'`, and `\'score\'`. Your function should filter out dictionaries where the score is below a certain threshold and then sort the remaining dictionaries by their score in descending order. Your task is to implement a function called `filter_and_sort` that processes the list according to the specified conditions. # Function Specifications: 1. **Function Name**: `filter_and_sort` 2. **Input**: A list of dictionaries and a numeric score threshold 3. **Output**: A list of dictionaries filtered and sorted as described Here is an example of what the function signature might look like: ```python def filter_and_sort(data, threshold): # Step 1: Filter out dictionaries where the \'score\' is below the threshold. # Step 2: Sort the remaining dictionaries by \'score\' in descending order. # Step 3: Return the sorted list. ``` # Requirements: - You must make sure to handle cases where the list might be empty or where no dictionaries meet the threshold criteria. - Maintain the order of keys within each dictionary in the original format. # Examples: Example 1: Input: ```python data = [ {\'id\': 1, \'name\': \'Alice\', \'score\': 85}, {\'id\': 2, \'name\': \'Bob\', \'score\': 90}, {\'id\': 3, \'name\': \'Charlie\', \'score\': 75} ] threshold = 80 ``` Output: ```python [ {\'id\': 2, \'name\': \'Bob\', \'score\': 90}, {\'id\': 1, \'name\': \'Alice\', \'score\': 85} ] ``` Example 2: Input: ```python data = [ {\'id\': 1, \'name\': \'Alice\', \'score\': 60}, {\'id\': 2, \'name\': \'Bob\', \'score\': 70} ] threshold = 80 ``` Output: ```python [] ``` # Notes: - If multiple dictionaries have the same score, maintain their relative order as they appear in the input list. - Ensure input validation for the expected format of the list of dictionaries.","solution":"def filter_and_sort(data, threshold): Filters and sorts the data based on the given score threshold. Parameters: data (list of dict): List containing dictionaries with \'id\', \'name\', and \'score\' keys. threshold (int or float): Score threshold for filtering. Returns: list of dict: Filtered and sorted list of dictionaries. # Step 1: Filter out dictionaries where the \'score\' is below the threshold. filtered_data = [d for d in data if d[\'score\'] >= threshold] # Step 2: Sort the remaining dictionaries by \'score\' in descending order. sorted_data = sorted(filtered_data, key=lambda x: x[\'score\'], reverse=True) # Step 3: Return the sorted list. return sorted_data"},{"question":"You are required to write a function called `graph_plot` using the Python `matplotlib` library. The `graph_plot` function should create a figure and an axis object, plot a sine wave for values ranging from 0 to 2π, and customize the plot by setting the title to \\"Sine Wave\\", the x-axis label to \\"X values\\", the y-axis label to \\"Sine of X\\", and enabling a grid. To summarize, your `graph_plot` function should perform the following steps: 1. Import the necessary functions from the `matplotlib` library. 2. Create a figure and an axis object using `plt.subplots()`. 3. Generate the x values ranging from 0 to 2π with an appropriate resolution. 4. Compute the sine of x values. 5. Plot the x values against their sine values. 6. Set the plot title to \\"Sine Wave\\". 7. Label the x-axis as \\"X values\\" and the y-axis as \\"Sine of X\\". 8. Enable the grid on the plot. 9. Display the plot. Ensure your implementation adheres to the standard usage of the `matplotlib` library as documented. ```python import matplotlib.pyplot as plt import numpy as np def graph_plot(): # Step 1: Importing functions - already covered at the top # Step 2: Creating a figure and an axis object fig, ax = plt.subplots() # Step 3: Generating the x values x = np.linspace(0, 2 * np.pi, 100) # Step 4: Computing the sine of x values y = np.sin(x) # Step 5: Plotting the x values against their sine values ax.plot(x, y) # Step 6: Setting the plot title ax.set_title(\\"Sine Wave\\") # Step 7: Labeling the x-axis and y-axis ax.set_xlabel(\\"X values\\") ax.set_ylabel(\\"Sine of X\\") # Step 8: Enabling the grid ax.grid(True) # Step 9: Displaying the plot plt.show() # Call the function to plot the graph graph_plot() ```","solution":"import matplotlib.pyplot as plt import numpy as np def graph_plot(): # Create a figure and an axis object fig, ax = plt.subplots() # Generate the x values ranging from 0 to 2π with 100 points x = np.linspace(0, 2 * np.pi, 100) # Compute the sine of x values y = np.sin(x) # Plot the x values against their sine values ax.plot(x, y) # Set the plot title ax.set_title(\\"Sine Wave\\") # Label the x-axis and y-axis ax.set_xlabel(\\"X values\\") ax.set_ylabel(\\"Sine of X\\") # Enable the grid on the plot ax.grid(True) # Display the plot plt.show()"},{"question":"You are tasked with writing a Python function called `rotatePoint` that calculates the new position of a point after it has been rotated by a given angle around the origin (0, 0). The rotation should be done in a counterclockwise direction. The relevant trigonometric functions to use from the `math` library are `math.cos` and `math.sin`. Function Signature: ```python def rotatePoint(x: float, y: float, angle_deg: float) -> (float, float): ``` Parameters: - `x` (float): The x-coordinate of the point. - `y` (float): The y-coordinate of the point. - `angle_deg` (float): The angle (in degrees) by which the point should be rotated counterclockwise around the origin. Returns: - A tuple (float, float) containing: - The x-coordinate of the new position of the point after rotation. - The y-coordinate of the new position of the point after rotation. Instructions: 1. Convert the given angle from degrees to radians. 2. Use the rotation matrix to compute the new coordinates. 3. Apply the matrix multiplication with the original coordinates and the angle in radians to get the new position. # Example: ```python new_x, new_y = rotatePoint(1.0, 0.0, 90.0) print(new_x, new_y) # Output should be approximately (0.0, 1.0) ``` This will provide the new x and y coordinates of the point after rotating it by the specified angle around the origin. # Library Documentation: - `math.sin(x)`: Returns the sine of x (measured in radians). - `math.cos(x)`: Returns the cosine of x (measured in radians). # Constraints: - The angle should be in degrees and it will be converted to radians as needed. - The coordinates of the point can be any real numbers. # Hint: - To convert an angle from degrees to radians, use `math.radians(angle_in_degrees)`. - The rotation matrix for a counterclockwise rotation by an angle θ is: [ begin{pmatrix} cos(theta) & -sin(theta) sin(theta) & cos(theta) end{pmatrix} ] - Apply the matrix to the point (x, y) to find the new coordinates: [ x\' = x cdot cos(theta) - y cdot sin(theta) ] [ y\' = x cdot sin(theta) + y cdot cos(theta) ]","solution":"import math def rotatePoint(x: float, y: float, angle_deg: float) -> (float, float): Rotates a point (x, y) counterclockwise by a given angle in degrees around the origin (0, 0). Parameters: x (float): The x-coordinate of the point. y (float): The y-coordinate of the point. angle_deg (float): The angle in degrees to rotate the point counterclockwise. Returns: tuple: The new x and y coordinates of the point after rotation. angle_rad = math.radians(angle_deg) new_x = x * math.cos(angle_rad) - y * math.sin(angle_rad) new_y = x * math.sin(angle_rad) + y * math.cos(angle_rad) return new_x, new_y"},{"question":"You are tasked with writing a single function named `find_optimal_route`, which will identify the shortest path in a graph from a start node to an end node. The graph is represented as an adjacency list dictionary where the keys are node names, and the values are lists of tuples, with each tuple containing a neighboring node and the weight of the edge connecting them. The function should implement Dijkstra\'s algorithm to find the shortest path. # Input Format - The graph is an adjacency list dictionary where keys are node names (strings) and values are lists of tuples. Each tuple consists of a neighboring node name (string) and the edge weight (float). - The start and end nodes are strings representing the names of the nodes in the graph. # Output Format The function should return a tuple containing two elements: - A list of nodes representing the shortest path from the start node to the end node. - The total weight of the shortest path. # Constraints - The graph is connected. - All edge weights are non-negative. # Assumptions - There will always be at least one path from the start node to the end node. # Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start_node = \'A\' end_node = \'D\' assert find_optimal_route(graph, start_node, end_node) == ([\'A\', \'B\', \'C\', \'D\'], 4.0) ``` # Function Definition ```python def find_optimal_route(graph, start, end): Find the shortest path in a graph from start node to end node using Dijkstra\'s algorithm. Parameters: ----------- graph : dict Adjacency list representing the graph where keys are node names and values are lists of tuples. start : str The starting node. end : str The ending node. Returns: -------- path : list List of nodes representing the shortest path from start to end. total_weight : float Total weight of the shortest path. ```","solution":"import heapq def find_optimal_route(graph, start, end): Find the shortest path in a graph from the start node to the end node using Dijkstra\'s algorithm. Parameters: ----------- graph : dict Adjacency list representing the graph where keys are node names and values are lists of tuples. start : str The starting node. end : str The ending node. Returns: -------- path : list List of nodes representing the shortest path from start to end. total_cost : float Total cost (or weight) of the shortest path. # Priority queue to hold nodes to be evaluated and their current cumulative weights priority_queue = [(0, start, [])] visited = set() while priority_queue: (current_weight, current_node, path) = heapq.heappop(priority_queue) if current_node in visited: continue path = path + [current_node] visited.add(current_node) # When the end node is reached, return the path and the cumulative weight if current_node == end: return (path, current_weight) # Evaluate neighbors of the current node for neighbor, weight in graph.get(current_node, []): if neighbor not in visited: heapq.heappush(priority_queue, (current_weight + weight, neighbor, path)) return ([], float(\'inf\')) # In case there is no path from start to end"},{"question":"Your task is to implement a function named `prime_numbers_in_range` in Python. This function will find all prime numbers within a specified range and write them to a file. Here’s a detailed description of what the function should do: 1. **Function Signature**: ```python def prime_numbers_in_range(filename: str, start: int, end: int) -> None: ``` 2. **Parameters**: - `filename`: A string representing the name of the file to which the prime numbers will be written. - `start`: An integer specifying the start of the range (inclusive). - `end`: An integer specifying the end of the range (exclusive). 3. **Functionality**: - Write a helper function `is_prime` that takes an integer as input and returns `True` if the number is prime, and `False` otherwise. - Iterate over each number in the range `[start, end)`. - Use the `is_prime` helper function to determine if the current number is a prime number. - Open a file with the given `filename` in write mode. - Write each prime number to the file, with each number on a new line. 4. **Output**: - The function does not return any value. - The output is written to the file specified by `filename`. 5. **Helper Function**: - The `is_prime` helper function should handle typical prime number logic, such as checking divisibility by numbers up to the square root of the given number. Here is a summary of what you need to do: - Write the function `prime_numbers_in_range` - Write a helper function `is_prime` to determine if a number is prime. - Find all prime numbers in the range `[start, end)` - Write the prime numbers to the specified file, ensuring each prime number is on a new line.","solution":"def is_prime(n): Helper function to determine if the number n is prime. Returns True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def prime_numbers_in_range(filename, start, end): Writes all prime numbers in the range [start, end) to the specified file. Each prime number will be on a new line. primes = [str(number) for number in range(start, end) if is_prime(number)] with open(filename, \'w\') as file: file.write(\\"n\\".join(primes))"},{"question":"You are developing a function to process a list of integers by grouping consecutive numbers into sublists. Consecutive numbers are numbers that appear one right after the other in the sequence. After grouping, you need to find all unique sums of these groups and return them in a sorted list. Write a function named `group_and_sort_sums` which adheres to the following specifications: 1. **Parameters**: - `numbers` (list of integers): The list of integers to be processed. 2. **Functionality**: - First, group consecutive numbers from the input list into sublists. - Compute the sum of each sublist. - Collect all unique sums. - Return the unique sums sorted in ascending order. **Requirements**: - You are not allowed to use external libraries for this task. - Ensure that the function handles an empty input list by returning an empty list. **Example**: ```python group_and_sort_sums([1, 2, 4, 5, 6, 8, 9]) # The consecutive groups are: [1, 2], [4, 5, 6], [8, 9] # Their sums are: 3, 15, 17 # Unique sums sorted: [3, 15, 17] group_and_sort_sums([10, 11, 12, 13, 15]) # The consecutive groups are: [10, 11, 12, 13], [15] # Their sums are: 46, 15 # Unique sums sorted: [15, 46] ``` Given these inputs, the function would return: ```python group_and_sort_sums([1, 3, 5]) # All numbers are isolated, so the sums are the numbers themselves: [1, 3, 5] # Unique sums sorted: [1, 3, 5] ```","solution":"def group_and_sort_sums(numbers): Group consecutive numbers from the input list into sublists, compute the sum of each sublist, collect all unique sums, and return the unique sums sorted in ascending order. :param numbers: List of integers to be processed. :return: Sorted list of unique sums of grouped consecutive numbers. if not numbers: return [] # Initialize variables groups = [] current_group = [numbers[0]] # Traverse the list and group consecutive numbers for i in range(1, len(numbers)): if numbers[i] == numbers[i - 1] + 1: current_group.append(numbers[i]) else: groups.append(current_group) current_group = [numbers[i]] # Append the last group groups.append(current_group) # Compute sums of each group sums = {sum(group) for group in groups} # Return sorted unique sums return sorted(sums)"},{"question":"You are tasked with developing a function that computes the determinant of a matrix. You will be provided with a square matrix represented as a 2D numpy array. The function should use recursive approach to calculate the determinant for any size of matrix. Your goal is to write a function `matrix_determinant(matrix)` that calculates and returns the determinant of the provided matrix. Function Signature ```python def matrix_determinant(matrix: np.ndarray) -> float: pass ``` Parameters - `matrix` (np.ndarray): A 2D numpy array of shape (n, n) representing a square matrix where n is the number of rows and columns. Returns - (float): The determinant of the provided square matrix. Example ```python import numpy as np matrix = np.array([[1, 2], [3, 4]]) det = matrix_determinant(matrix) print(det) # Output: -2.0 ``` # Explanation - In the example above, the determinant of the matrix (begin{bmatrix} 1 & 2 3 & 4 end{bmatrix}) is calculated using the formula (1*4 - 2*3 = -2). - Ensure to use a recursive approach to handle larger matrices. - You may use helper functions if needed to achieve the solution.","solution":"import numpy as np def matrix_determinant(matrix: np.ndarray) -> float: Computes the determinant of a square matrix using a recursive approach. Parameters: matrix (np.ndarray): A 2D numpy array of shape (n, n) representing a square matrix. Returns: float: The determinant of the provided square matrix. n = matrix.shape[0] # Base case for a 1x1 matrix if n == 1: return matrix[0, 0] # Base case for a 2x2 matrix if n == 2: return matrix[0, 0] * matrix[1, 1] - matrix[0, 1] * matrix[1, 0] determinant = 0.0 # Recursively calculate the determinant for larger matrices for c in range(n): # Form the minor matrix by skipping the current row and column minor = np.delete(np.delete(matrix, 0, axis=0), c, axis=1) cofactor = ((-1) ** c) * matrix[0, c] * matrix_determinant(minor) determinant += cofactor return determinant"},{"question":"You are given a list of pairs `coordinates` where each pair represents the x and y coordinates of a point in a 2D plane. Your task is to write a function `k_closest_points(coordinates, k)` that finds the `k` closest points to the origin (0, 0). To determine the \\"closeness\\" of a point to the origin, use the Euclidean distance formula. The function should return a list of the `k` closest pairs, sorted based on their distance from the origin in ascending order. If two points have the same distance from the origin, you should maintain their relative ordering as they appear in the input list. Function Signature: ```python def k_closest_points(coordinates: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]: # Implementation here pass ``` **Input:** - `coordinates`: A list of tuples, where each tuple (int, int) represents the x and y coordinates of a point in 2D plane. - `k`: An integer representing the number of closest points to return. **Output:** - A list of `k` tuples representing the `k` closest points to the origin, sorted by their distance from the origin in ascending order. **Note:** - The distance from a point `(x, y)` to the origin (0, 0) is calculated as `sqrt(x^2 + y^2)`. However, for comparing distances, you can omit the square root to avoid unnecessary computations. - The input list will always contain at least `k` points. **Example:** ```python >>> coordinates = [(1, 2), (3, 4), (1, -1), (-2, 1), (2, 2)] >>> k = 3 >>> k_closest_points(coordinates, k) [(1, -1), (1, 2), (-2, 1)] ``` In this example, the points\' distances from the origin are: - (1, 2) -> sqrt((1^2) + (2^2)) = sqrt(1 + 4) = sqrt(5) - (3, 4) -> sqrt((3^2) + (4^2)) = sqrt(9 + 16) = sqrt(25) - (1, -1) -> sqrt((1^2) + (-1^2)) = sqrt(1 + 1) = sqrt(2) - (-2, 1) -> sqrt((-2^2) + (1^2)) = sqrt(4 + 1) = sqrt(5) - (2, 2) -> sqrt((2^2) + (2^2)) = sqrt(4 + 4) = sqrt(8) The three closest points to the origin are (1, -1) with distance sqrt(2), (1, 2) with distance sqrt(5), and (-2, 1) with distance sqrt(5). Since (1, 2) appears before (-2, 1) in the input list, it should also appear first in the output list.","solution":"from typing import List, Tuple import heapq def k_closest_points(coordinates: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]: Finds the k closest points to the origin (0, 0). Args: coordinates (List[Tuple[int, int]]): List of tuples, where each tuple represents the x and y coordinates of a point in 2D plane. k (int): Number of closest points to return. Returns: List[Tuple[int, int]]: List of k tuples representing the k closest points to the origin. def distance(point: Tuple[int, int]) -> int: return point[0]**2 + point[1]**2 # Using a min-heap to store the closest points closest_points = heapq.nsmallest(k, coordinates, key=distance) return closest_points"},{"question":"You are working with a dataset of employees in a company stored in a CSV file. Your task is to perform various analyses on this data using Python and the pandas library. Implement a function `employee_analysis(filepath)` that performs the following tasks: 1. Reads a CSV file specified by `filepath` into a pandas DataFrame. 2. Identifies and prints the names of the top 5 highest-paid employees (based on the `salary` column). 3. Adds a new column called `tenure_range` to the DataFrame, which categorizes the employees\' tenure as: - `1-3 years` for employees with `tenure` between 1 and 3 years (inclusive), - `4-7 years` for employees with `tenure` between 4 and 7 years (inclusive), - `8+ years` for employees with `tenure` 8 years or more. 4. Computes and prints the mean, minimum, and maximum salaries for each `department` in the company. 5. Generates and prints a cross-tabulation showing the average salary for each combination of `department` and `tenure_range`. The CSV file has the following columns: - `name`: Employee\'s full name. - `department`: Employee\'s department. - `role`: Employee\'s role. - `salary`: Employee\'s salary. - `tenure`: Employee\'s tenure in years. For this task, ensure you utilize the `pandas.read_csv` function to read the data. Ensure your print statements match the requirements exactly.","solution":"import pandas as pd def employee_analysis(filepath): # Read the CSV file into a DataFrame df = pd.read_csv(filepath) # Identify and print the names of the top 5 highest-paid employees top_5_highest_paid = df.nlargest(5, \'salary\')[[\'name\', \'salary\']] print(\\"Top 5 highest-paid employees:\\") print(top_5_highest_paid[[\'name\', \'salary\']]) # Add a new column tenure_range based on the tenure of employees def categorize_tenure(years): if 1 <= years <= 3: return \'1-3 years\' elif 4 <= years <= 7: return \'4-7 years\' elif years >= 8: return \'8+ years\' return \'unknown\' df[\'tenure_range\'] = df[\'tenure\'].apply(categorize_tenure) # Compute mean, minimum, and maximum salaries for each department department_salary_stats = df.groupby(\'department\')[\'salary\'].agg([\'mean\', \'min\', \'max\']) print(\\"nSalary statistics by department:\\") print(department_salary_stats) # Generate a cross-tabulation of average salary for each combination of department and tenure_range average_salary_crosstab = pd.crosstab(df[\'department\'], df[\'tenure_range\'], values=df[\'salary\'], aggfunc=\'mean\') print(\\"nAverage salary cross-tabulation by department and tenure_range:\\") print(average_salary_crosstab)"},{"question":"You need to implement a function `construct_playlist` that generates a structured playlist of songs for a music streaming platform. The playlist should consist of entries that are grouped based on the album title. Each song belongs to exactly one album, and the songs should appear in the same order as they were provided. The function should take a list of dictionaries called `song_list`, where each dictionary contains details about a song: - `title`: The title of the song. - `artist`: The artist\'s name. - `album`: The album name to which the song belongs. The function should return a dictionary where each key is an album title and its value is a list of songs (dictionaries) from that album, maintaining their order of appearance in the input list. Function signature: ```python def construct_playlist(song_list: list) -> dict: ``` Example Input: ```python song_list = [ {\'title\': \'Song1\', \'artist\': \'Artist1\', \'album\': \'Album1\'}, {\'title\': \'Song2\', \'artist\': \'Artist1\', \'album\': \'Album1\'}, {\'title\': \'Song3\', \'artist\': \'Artist2\', \'album\': \'Album2\'}, {\'title\': \'Song4\', \'artist\': \'Artist3\', \'album\': \'Album3\'}, {\'title\': \'Song5\', \'artist\': \'Artist1\', \'album\': \'Album1\'} ] ``` Expected Output: ```python { \'Album1\': [ {\'title\': \'Song1\', \'artist\': \'Artist1\', \'album\': \'Album1\'}, {\'title\': \'Song2\', \'artist\': \'Artist1\', \'album\': \'Album1\'}, {\'title\': \'Song5\', \'artist\': \'Artist1\', \'album\': \'Album1\'} ], \'Album2\': [ {\'title\': \'Song3\', \'artist\': \'Artist2\', \'album\': \'Album2\'} ], \'Album3\': [ {\'title\': \'Song4\', \'artist\': \'Artist3\', \'album\': \'Album3\'} ] } ``` **Requirements**: 1. The function should maintain the order of songs as given in the `song_list`. 2. The keys in the output dictionary (album titles) should be unique. 3. Each list of songs in the output dictionary should only contain songs from the corresponding album.","solution":"def construct_playlist(song_list): Generates a structured playlist grouped by album. Args: song_list (list): List of song dictionaries, each containing \'title\', \'artist\', and \'album\'. Returns: dict: A dictionary where keys are album titles and values are lists of songs from that album. playlist = {} for song in song_list: album = song[\'album\'] if album not in playlist: playlist[album] = [] playlist[album].append(song) return playlist"},{"question":"You are given a list of dictionaries, where each dictionary represents a student\'s information with \'name\', \'age\', and \'grades\'. Write a function that transforms this list into a pandas DataFrame, computes the average grade for each student, and adds this as a new column to the DataFrame. The function will return the updated DataFrame. The function should output with: pd.DataFrame: A DataFrame containing student\'s data along with their average grades. You should write self-contained code starting with: ``` import pandas as pd def process_student_data(student_list): ```","solution":"import pandas as pd def process_student_data(student_list): Transforms a list of dictionaries into a pandas DataFrame, computes the average grade for each student, and adds this as a new column to the DataFrame. # Create the DataFrame from the list of dictionaries df = pd.DataFrame(student_list) # Calculate the average grade for each student df[\'average_grade\'] = df[\'grades\'].apply(lambda x: sum(x) / len(x) if len(x) > 0 else 0) return df"},{"question":"You are given a string manipulation task where you need to detect and correct certain misspellings in a document. Specifically, you need to identify all occurrences of a common misspelling of the word \\"definitely\\" written as \\"definately\\" and convert them to the correct form. Write a function `correct_spelling(document: str) -> str` that performs the following operations: 1. **Identify Misspellings:** Search for all instances of the misspelled word \\"definately\\" in the input document. 2. **Replace with Correct Word:** Replace every occurrence of the misspelled word with \\"definitely\\". 3. **Return the Corrected Document:** The function should return the document with all corrections made. **Requirements:** - Use the `re.sub` function from the `re` (regular expression) library to find and replace the misspelled words. - Ensure that the correction is case-sensitive (i.e., it should only replace the exact misspelling \\"definately\\" and not any other close variations).","solution":"import re def correct_spelling(document: str) -> str: This function finds all occurrences of the misspelled word \'definately\' in the given document and replaces them with \'definitely\'. corrected_document = re.sub(r\'bdefinatelyb\', \'definitely\', document) return corrected_document"},{"question":"In this problem, you\'ll create a function named `find_shortest_superstring` that takes a list of strings and returns the shortest string that contains each string in the list as a substring. This problem is an instance of the \\"Shortest Superstring Problem,\\" which is NP-hard, so for simplicity, you can consider a greedy algorithm approach. Your task is to: 1. Define the function `find_shortest_superstring` with the specified argument. 2. Implement a greedy algorithm to build the shortest superstring by iteratively merging the most overlapping strings. 3. Return the resulting shortest superstring. Function Signature: ```python def find_shortest_superstring(strings: list) -> str: pass ``` # Example Given: ```python strings = [\\"catgc\\", \\"ctaagt\\", \\"gcta\\", \\"ttca\\", \\"atgcatc\\"] ``` An example call: ```python result = find_shortest_superstring(strings) print(result) ``` Should produce a superstring like: ```python \\"gctaagttcatgcatc\\" ``` Note: Multiple solutions can exist since there can be different valid shortest superstrings. You just need to return one of the valid shortest superstrings.","solution":"def find_shortest_superstring(strings: list) -> str: def merge_strings(a, b): max_overlap_len = min(len(a), len(b)) best_overlap = \\"\\" best_idx = 0 # Check prefix of b matches suffix of a for i in range(1, max_overlap_len + 1): if a[-i:] == b[:i]: if i > len(best_overlap): best_overlap = b[:i] best_idx = i # Check suffix of b matches prefix of a for i in range(1, max_overlap_len + 1): if b[-i:] == a[:i]: if i > len(best_overlap): best_overlap = a[:i] best_idx = -i if best_idx >= 0: return a + b[best_idx:], len(best_overlap) else: return b + a[-best_idx:], len(best_overlap) while len(strings) > 1: max_overlap = -1 best_pair = None merged_string = \\"\\" for i in range(len(strings)): for j in range(len(strings)): if i != j: merged, overlap = merge_strings(strings[i], strings[j]) if overlap > max_overlap: max_overlap = overlap best_pair = (i, j) merged_string = merged strings.pop(best_pair[1]) strings.pop(best_pair[0]) strings.append(merged_string) return strings[0]"},{"question":"You are required to implement a function called `resize_and_rotate_image(image_path, size, angle)` that makes use of the `Pillow` library to perform two basic image manipulations: resizing and rotating. This function is meant to help you understand and employ fundamental operations of the `Pillow` library, particularly using `PIL.Image.open`, `PIL.Image.Image.resize`, and `PIL.Image.Image.rotate`. Your function should: 1. Open an image from the specified file path (`image_path`). 2. Resize the image to the given dimensions (`size`), which is a tuple specifying the new width and height (width, height). 3. Rotate the resized image by the specified angle (`angle`), in degrees counter-clockwise. 4. Return the manipulated image object. The `image_path` is a string representing the path to the image file, `size` is a tuple of two integers defining the new size of the image, and `angle` is a float indicating the rotation angle in degrees. Please make sure to import the necessary components from `Pillow` to ensure your function works as intended. **Example Usage:** ```python resized_rotated_image = resize_and_rotate_image(\'path/to/image.jpg\', (200, 300), 45) resized_rotated_image.show() ``` This call should open an image from the given path, resize it to 200x300 pixels, rotate it by 45 degrees counter-clockwise, and then return the manipulated image object that can be displayed.","solution":"from PIL import Image def resize_and_rotate_image(image_path, size, angle): Open an image from the specified file path (`image_path`), resize it to the given dimensions (`size`), and rotate it by the specified angle (`angle`). :param image_path: str, path to the image file :param size: tuple, new size of the image (width, height) :param angle: float, rotation angle in degrees counter-clockwise :return: Image object, the manipulated image with Image.open(image_path) as img: resized_image = img.resize(size) rotated_image = resized_image.rotate(angle) return rotated_image"},{"question":"You are required to implement a function `can_form_palindrome(s: str) -> bool` that determines if any permutation of the string `s` can form a palindrome. A palindrome is a string that reads the same forwards and backwards. The definition of your function is as follows: ```python def can_form_palindrome(s: str) -> bool: pass ``` # Constraints: - The input will be a string `s` where ( 1 leq text{len}(s) leq 10^5 ). - The string `s` will consist of lowercase English letters only. # Explanation of the Problem: 1. A string can form a palindrome if, at most, one character has an odd frequency. 2. All other characters must have even frequencies to allow for a symmetrical arrangement. Your task is to implement this function efficiently to check whether any permutation of the string can be a palindrome by analyzing the character frequencies. # Example: ```python print(can_form_palindrome(\\"civic\\")) # Should return True (because \\"civic\\" itself is a palindrome) print(can_form_palindrome(\\"ivicc\\")) # Should return True (because \\"civic\\" is a permutation) print(can_form_palindrome(\\"hello\\")) # Should return False (no permutation can form a palindrome) print(can_form_palindrome(\\"aabbcc\\")) # Should return True (e.g., \\"abccba\\" is a permutation that is a palindrome) ``` Ensure your solution is optimized for handling the upper constraint efficiently.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"You have been provided with a dataset containing information about sales transactions in different stores. Your task is to write a function that processes the sales data and provides insights into the average sales and total sales for each store. # Function Requirements: 1. **Function Name**: `sales_insights` 2. **Parameters**: - `df`: A pandas DataFrame containing sales data. 3. **Functionality**: - The function should: - Calculate the total sales for each store. - Calculate the average sales per transaction for each store. - The results should be presented in a DataFrame with the columns: \'store_id\', \'total_sales\', \'average_sales\'. - Display how long the calculation took in seconds. # Expected Actions: - Use the `pandas` library to manipulate the DataFrame. - Group data by \'store_id\' and calculate total and average sales. - Create and output a DataFrame to display the sales statistics. - Measure the execution time of the function. # Example: ```python import pandas as pd import time data = { \'store_id\': [1, 2, 1, 2, 1, 3], \'transaction_value\': [100, 150, 200, 300, 100, 250] } df = pd.DataFrame(data) sales_insights(df) ``` Expected Output: ``` store_id total_sales average_sales 0 1 400 133.333333 1 2 450 225.000000 2 3 250 250.000000 This took 0.001234 seconds. ---------------------------------------- ```","solution":"import pandas as pd import time def sales_insights(df): Processes sales data and returns insights into the average sales and total sales for each store along with the execution time. Parameters: df (pd.DataFrame): The sales data DataFrame with columns \'store_id\' and \'transaction_value\'. Returns: pd.DataFrame: A DataFrame containing \'store_id\', \'total_sales\', and \'average_sales\' columns. start_time = time.time() insights = df.groupby(\'store_id\').agg( total_sales=(\'transaction_value\', \'sum\'), average_sales=(\'transaction_value\', \'mean\') ).reset_index() end_time = time.time() elapsed_time = end_time - start_time print(f\\"This took {elapsed_time:.6f} seconds.\\") return insights"},{"question":"You are required to implement a function that simulates a simple consumer which takes numbers from a queue and processes them. For this task, you need to utilize the `time.sleep` function from the `time` module to control the rate at which numbers are consumed. Here are the specific requirements for this function: 1. **Function Signature**: The function should be named `consume`. 2. **Parameters**: - `id` (integer): An identifier for the consumer. - `q` (queue.Queue): A queue from which the numbers will be consumed. 3. **Functionality**: - The function should run indefinitely. - Retrieve a number from the queue `q`. - Print a message in the format: `\\"consumer {id} processed data {num}\\"` where `{id}` is replaced with the consumer\'s ID and `{num}` is replaced with the retrieved number. - Use `time.sleep(2)` to sleep for 2 seconds after processing each number. Make sure to use the `time.sleep` function from the `time` module to implement the delay.","solution":"import time from queue import Queue def consume(id, q): Consumes numbers from the queue `q` and processes them, printing a message and sleeping for 2 seconds after each. Parameters: id (int): Identifier for the consumer. q (queue.Queue): Queue from which the numbers will be consumed. while True: num = q.get() print(f\\"consumer {id} processed data {num}\\") time.sleep(2) q.task_done()"},{"question":"Write a function named `maximal_sum_subarray` that finds the subarray within a given array of integers that has the largest sum. The function should return the sum of this subarray. Your task involves the following steps: 1. If the array is empty, return 0. 2. Traverse the array while keeping track of the current subarray sum and the maximal subarray sum found so far. 3. For each element in the array, decide whether to include it in the current subarray sum or to start a new subarray from this element. 4. Update the maximal subarray sum whenever the current subarray sum exceeds it. Here is the step-by-step instruction for the `maximal_sum_subarray` function: 1. Initialize two variables: `max_sum` to store the maximal subarray sum and `current_sum` to store the current subarray sum. 2. Traverse the array using a loop. For each element, update `current_sum` to be the maximum of the element itself or `current_sum` plus the element. This determines if the current subarray should be extended or a new subarray should start. 3. Update `max_sum` to be the maximum of `max_sum` and `current_sum`. 4. After the loop, `max_sum` will hold the largest sum of any subarray found in the array. **Function Signature:** ```python def maximal_sum_subarray(arr: list[int]) -> int: pass ``` Here\'s an example prototype and usage: ```python def maximal_sum_subarray(arr: list[int]) -> int: if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum ``` **Example Usage:** ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(maximal_sum_subarray(arr)) # Output should be 6, for subarray [4, -1, 2, 1] ```","solution":"def maximal_sum_subarray(arr): Finds the subarray with the maximal sum within the given array of integers. Args: arr (list of int): The input array of integers. Returns: int: The sum of the subarray with the maximal sum. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a string of words separated by spaces and returns a dictionary where each key is a unique word (case insensitive) from the string and the corresponding value is the count of occurrences of that word. Ignore punctuation and ensure that the words are treated in a case-insensitive manner. The function should start with: ```python import re from collections import defaultdict # Function to count word frequencies def count_words(string): ``` **Example:** ```python string = \\"Hello, world! This is a test. Hello world.\\" output = count_words(string) print(output) ``` **Output:** ```python { \'hello\': 2, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1 } ```","solution":"import re from collections import defaultdict def count_words(string): Returns a dictionary with the count of each word in the input `string`. Words are case insensitive and punctuation is ignored. # Convert to lowercase and remove punctuation string = re.sub(r\'[^ws]\', \'\', string.lower()) # Split the string into words words = string.split() # Count each word word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count) # Example usage string = \\"Hello, world! This is a test. Hello world.\\" output = count_words(string) print(output)"},{"question":"You are tasked with analyzing a log file and generating a report summarizing the HTTP status codes. The log file (`log_file`) contains HTTP request logs, each line formatted as follows: ``` <timestamp> <HTTP method> <URL> <HTTP status code> ``` You need to read the log file and produce a summary report (`summary_report`) indicating the count of each HTTP status code found in the log. Here’s what you need to do: 1. Read the log file line by line. 2. For each line, parse the HTTP status code. 3. Keep a count of each unique HTTP status code. 4. Create the summary report file `summary_report` containing the counts of each HTTP status code in descending order of occurrence. If multiple status codes have the same count, list them in ascending numerical order. Write a function named `generate_summary_report` that performs these tasks. Function Signature: ```python def generate_summary_report(log_file: str, summary_report: str) -> None: # Your code here ``` Input: - `log_file`: A string representing the path to the log file. - `summary_report`: A string representing the path to the output summary report file. Output: - The function should create/overwrite the file `summary_report` containing the sorted count of HTTP status codes. # Example: Assume the content of the log file `sample.log` is: ``` 2023-03-08T10:04:56 GET /home 200 2023-03-08T10:05:12 POST /login 302 2023-03-08T10:05:34 GET /dashboard 200 2023-03-08T10:06:01 GET /profile 404 2023-03-08T10:06:45 POST /update 500 2023-03-08T10:07:12 GET /home 200 2023-03-08T10:07:30 GET /profile 404 ``` After processing, `summary_report` should contain: ``` 200 3 404 2 302 1 500 1 ``` # Constraints: - Assume the log file is small enough to be read into memory. - Each log entry follow the format `<timestamp> <HTTP method> <URL> <HTTP status code>`. - Timestamps and URLs can contain spaces, but the status code is always a three-digit number at the end of the line. - The produced summary report should list status codes in descending order of their count, with ties resolved by numerical order of the status codes.","solution":"def generate_summary_report(log_file: str, summary_report: str) -> None: from collections import Counter with open(log_file, \'r\') as file: lines = file.readlines() status_count = Counter() for line in lines: status_code = line.strip().split()[-1] status_count[status_code] += 1 sorted_status_count = sorted(status_count.items(), key=lambda item: (-item[1], int(item[0]))) with open(summary_report, \'w\') as file: for status_code, count in sorted_status_count: file.write(f\\"{status_code} {count}n\\")"},{"question":"Create a function that takes two arguments: a list of integers and an integer n. The function should return True if the list contains any pair of numbers that add up to n, and False otherwise. The solution should have a time complexity better than O(n^2). The function should output: bool: True if such a pair exists, False otherwise. You should write self-contained code starting with: ``` def has_pair_with_sum(lst, n): ```","solution":"def has_pair_with_sum(lst, n): Checks if there is a pair of numbers in the list that adds up to the given sum n. Args: lst (list): List of integers. n (int): Target sum. Returns: bool: True if a pair with sum n exists, False otherwise. seen = set() for number in lst: required = n - number if required in seen: return True seen.add(number) return False"},{"question":"You are required to write a Python function that simulates a basic vending machine. The vending machine stocks various products, each with a unique ID, a name, a price, and a quantity available. Customers can purchase products by providing the product ID and the quantity they wish to buy. The function should handle purchase requests and update the stock accordingly, printing relevant messages to indicate the transaction status. Your goal is to create a function `vending_machine` that takes three arguments: - `stock`: a list of dictionaries where each dictionary represents a product with the keys \'id\', \'name\', \'price\', and \'quantity\' - `product_id`: an integer representing the product ID the customer wants to purchase - `quantity`: an integer representing the quantity the customer wants to purchase The function should: 1. Check if the product ID exists in the stock. If it does not, print \\"Product not found\\" and return. 2. Check if the requested quantity is available. If it is not, print \\"Insufficient stock for {product_name}\\" and return. 3. Deduct the requested quantity from the stock and print \\"Transaction Successful: {product_name} - {quantity} units sold\\". 4. If after the purchase the quantity of a product drops to 0, print a restocking message \\"Restock needed for {product_name}\\". Assume each product ID is unique and provided input is valid. Example usage: ```python stock = [ {\'id\': 1, \'name\': \'Soda\', \'price\': 1.50, \'quantity\': 10}, {\'id\': 2, \'name\': \'Chips\', \'price\': 2.00, \'quantity\': 5}, {\'id\': 3, \'name\': \'Candy\', \'price\': 0.75, \'quantity\': 8} ] # Example function call vending_machine(stock, 2, 3) ``` Expected output: ``` Transaction Successful: Chips - 3 units sold ``` If the usage was: ```python vending_machine(stock, 2, 6) ``` Expected output: ``` Insufficient stock for Chips ```","solution":"def vending_machine(stock, product_id, quantity): Simulates a basic vending machine by processing purchase requests and updating stock. Parameters: stock (list): List of dictionaries where each dictionary represents a product with \'id\', \'name\', \'price\', and \'quantity\'. product_id (int): The ID of the product to be purchased. quantity (int): The amount of the product to be purchased. Returns: None for product in stock: if product[\'id\'] == product_id: if product[\'quantity\'] < quantity: print(f\\"Insufficient stock for {product[\'name\']}\\") return product[\'quantity\'] -= quantity print(f\\"Transaction Successful: {product[\'name\']} - {quantity} units sold\\") if product[\'quantity\'] == 0: print(f\\"Restock needed for {product[\'name\']}\\") return print(\\"Product not found\\")"},{"question":"Create a function `detect_cycle(graph: Dict[int, List[int]]) -> bool` that detects if a directed graph has a cycle. The graph is provided as an adjacency list dictionary, where keys represent nodes and values are lists of nodes they point to. The function should return `True` if there\'s at least one cycle in the graph, and `False` otherwise. To determine if the graph contains a cycle, use Depth-First Search (DFS) and track the state of each node: 1. Not visited 2. Visiting (part of the current DFS path) 3. Visited (already processed and no cycle found in its path) Here is the detailed approach: - For each node, if it\'s not visited, start a DFS. - During DFS, mark the node as visiting. - Recursively visit all its neighbors. - If a neighbor is marked as visiting, a cycle is detected. - If no cycle is found in the DFS path of the specific node, mark it as visited. **Example:** ```python graph = { 1: [2], 2: [3], 3: [4], 4: [2] # This creates a cycle (2 -> 3 -> 4 -> 2) } print(detect_cycle(graph)) # Outputs True graph = { 1: [2], 2: [3], 3: [4], 4: [5] # No cycle } print(detect_cycle(graph)) # Outputs False ``` **Requirements:** - Implement cycle detection using DFS with appropriate state tracking. - Handle the case where the graph is empty (no nodes).","solution":"def detect_cycle(graph: dict) -> bool: Detects if a directed graph has a cycle using Depth-First Search (DFS). Args: graph (dict): The adjacency list of the graph. Returns: bool: True if the graph has a cycle, otherwise False. def dfs(node): if node in visiting: return True if node in visited: return False visiting.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in graph: if node not in visited: if dfs(node): return True return False"},{"question":"In this problem, you will implement the PageRank algorithm. The objective is to rank a set of web pages based on their importance, which is determined by the links between them. The task is to simulate the PageRank algorithm using the power iteration method. The function you need to implement is named `page_rank`. This function should take the following parameters: - `links`: A square numpy array `L` of size `n x n`, where `n` is the number of web pages. The element `L[i][j]` is `1` if there is a link from page `j` to page `i`, and `0` otherwise. - `num_iters`: The maximum number of iterations to run the power iteration method. - `alpha`: (optional) A damping factor used in the PageRank formula, typically set to 0.85. Default is `0.85`. - `tol`: (optional) A tolerance for convergence criteria. If the change in rank values is smaller than `tol`, the algorithm should stop. Default is `1e-5`. The function should return a numpy array of size `n`, where each element is the PageRank score of the corresponding web page. # Requirements: 1. Normalize the link matrix `L` to form a transition matrix `T` where `T[i][j]` represents the probability of moving from page `j` to page `i`. 2. Initialize the rank vector uniformly. 3. Perform power iteration: repeatedly update the rank vector using the transition matrix and damping factor until convergence or the maximum number of iterations is reached. 4. For each iteration: - Update the rank vector considering the damping factor and teleportation. - Check if the rank vector has converged using the specified tolerance `tol`. # Example Usage: ```python import numpy as np # Example link matrix links = np.array([[0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 0]]) # Perform PageRank ranks = page_rank(links, num_iters=100) print(ranks) ``` # Constraints: - `links` is guaranteed to be a non-empty square 2D numpy array where `L[i][j]` is 1 or 0. - `num_iters` is guaranteed to be a positive integer. - `0 < alpha < 1`. - `tol` is guaranteed to be a small positive float.","solution":"import numpy as np def page_rank(links, num_iters, alpha=0.85, tol=1e-5): Perform the PageRank algorithm using power iteration method. Parameters: links (numpy.array): A square numpy array of size n x n representing link relationships. num_iters (int): The maximum number of iterations. alpha (float): The damping factor, default is 0.85. tol (float): The tolerance for convergence, default is 1e-5. Returns: numpy.array: The PageRank values of each web page. # Total number of pages n = links.shape[0] # Calculate the transition matrix T with normalization T = np.zeros((n, n)) for j in range(n): out_links = np.sum(links[:, j]) if out_links != 0: T[:, j] = links[:, j] / out_links else: T[:, j] = 1.0 / n # Initialize the rank vector with equal probability rank = np.ones(n) / n # Power iteration for _ in range(num_iters): new_rank = alpha * T @ rank + (1 - alpha) / n if np.linalg.norm(new_rank - rank, 1) < tol: break rank = new_rank return rank"},{"question":"You are required to implement a function that generates a series of dates, given a start date and an interval in days. The function should yield the dates successively. # Function Signature ```python def generate_dates(start_date: str, interval: int): Generate dates starting from the \'start_date\', spaced by \'interval\' days. :param start_date: A string representing the start date in \'YYYY-MM-DD\' format. :param interval: An integer representing the number of days between each date. :return: A generator that yields dates in \'YYYY-MM-DD\' format. ``` # Requirements: 1. Use the `datetime` module to handle date manipulations. 2. The `start_date` parameter will be a string in \'YYYY-MM-DD\' format. 3. The `interval` parameter will be a positive integer that determines the spacing between successive dates. 4. The function should yield dates in \'YYYY-MM-DD\' format as strings. # Example: ```python dates = generate_dates(\'2023-01-01\', 5) print(next(dates)) # Output: \'2023-01-01\' print(next(dates)) # Output: \'2023-01-06\' print(next(dates)) # Output: \'2023-01-11\' print(next(dates)) # Output: \'2023-01-16\' ```","solution":"from datetime import datetime, timedelta def generate_dates(start_date: str, interval: int): Generate dates starting from the \'start_date\', spaced by \'interval\' days. :param start_date: A string representing the start date in \'YYYY-MM-DD\' format. :param interval: An integer representing the number of days between each date. :return: A generator that yields dates in \'YYYY-MM-DD\' format. current_date = datetime.strptime(start_date, \'%Y-%m-%d\').date() delta = timedelta(days=interval) while True: yield current_date.strftime(\'%Y-%m-%d\') current_date += delta"},{"question":"Your task is to write a function `is_anagram(s1, s2)` that determines if two given strings `s1` and `s2` are anagrams. Two strings are anagrams if they contain the same characters in the same frequencies but arranged differently. The function should be implemented using the `collections` library, specifically, utilizing the `Counter` class to count character occurrences in the strings. # Function Signature ```python def is_anagram(s1: str, s2: str) -> bool: ``` # Parameters - `s1` (str): The first string to compare. - `s2` (str): The second string to compare. # Returns - `bool`: Returns `True` if `s1` and `s2` are anagrams and `False` otherwise. # Constraints - You must use the `collections.Counter` class from the `collections` library to count character occurrences. # Example ```python assert is_anagram(\\"listen\\", \\"silent\\") == True assert is_anagram(\\"triangle\\", \\"integral\\") == True assert is_anagram(\\"apple\\", \\"pale\\") == False assert is_anagram(\\"anagram\\", \\"nagaram\\") == True assert is_anagram(\\"rat\\", \\"car\\") == False ``` # Explanation - `is_anagram(\\"listen\\", \\"silent\\") == True`: Both strings contain the characters [\'l\', \'i\', \'s\', \'t\', \'e\', \'n\'] arranged differently. - `is_anagram(\\"triangle\\", \\"integral\\") == True`: Both strings contain the characters [\'t\', \'r\', \'i\', \'a\', \'n\', \'g\', \'l\', \'e\']. - `is_anagram(\\"apple\\", \\"pale\\") == False`: The first string contains two \'p\' characters while the second contains none. - `is_anagram(\\"anagram\\", \\"nagaram\\") == True`: Both strings contain the characters [\'a\', \'n\', \'a\', \'g\', \'r\', \'a\', \'m\']. - `is_anagram(\\"rat\\", \\"car\\") == False`: The strings contain different characters. Implement the function according to the guidelines provided.","solution":"from collections import Counter def is_anagram(s1: str, s2: str) -> bool: Determines if two strings are anagrams using collections.Counter to count characters. return Counter(s1) == Counter(s2)"},{"question":"Write a function that reads a CSV file and outputs a new CSV file with all numerical columns normalized to a range between 0 and 1. The function should raise an exception if the input file is not found or is not in a valid CSV format. Additionally, the function must log each column\'s minimum and maximum values before and after normalization in a \'normalization.log\' file. The function should return the path of the newly created normalized CSV file. You should write self-contained code starting with: ``` import pandas as pd import logging def normalize_csv(input_csv, output_csv): ```","solution":"import pandas as pd import logging def normalize_csv(input_csv, output_csv): Reads a CSV file, normalizes all numerical columns to a range between 0 and 1, and outputs a new CSV file. Logs the minimum and maximum values of each column before and after normalization. Parameters: - input_csv: Path to the input CSV file - output_csv: Path to the output CSV file with normalized values Returns: - Path to the newly created normalized CSV file # Setup logging logging.basicConfig(filename=\'normalization.log\', level=logging.INFO, format=\'%(asctime)s - %(message)s\') try: # Read the CSV file df = pd.read_csv(input_csv) except FileNotFoundError: raise FileNotFoundError(f\\"The file {input_csv} does not exist.\\") except pd.errors.EmptyDataError: raise ValueError(f\\"The file {input_csv} is empty or not a valid CSV file.\\") numeric_columns = df.select_dtypes(include=[\'number\']).columns if numeric_columns.empty: raise ValueError(\\"There are no numerical columns to normalize.\\") # Normalizing the data for col in numeric_columns: min_val = df[col].min() max_val = df[col].max() logging.info(f\\"Column \'{col}\': min before normalization = {min_val}, max before normalization = {max_val}\\") # Normalize the column df[col] = (df[col] - min_val) / (max_val - min_val) logging.info(f\\"Column \'{col}\': min after normalization = {df[col].min()}, max after normalization = {df[col].max()}\\") # Save the new dataframe to a CSV file df.to_csv(output_csv, index=False) return output_csv"},{"question":"A palindromic subsequence is a subsequence of a string that reads the same forward and backward. Given a string ( s ), your task is to find the length of the longest palindromic subsequence in the string. Write a Python function `longest_palindromic_subsequence` that takes a string ( s ) as input and returns the length of the longest palindromic subsequence. **Function Signature:** ```python def longest_palindromic_subsequence(s): Find the length of the longest palindromic subsequence in the input string. Parameters: s (str): The input string. Returns: int: Length of the longest palindromic subsequence. ``` **Requirements:** 1. The function should use dynamic programming to solve the problem. 2. The function should have a time complexity of ( O(n^2) ), where ( n ) is the length of the input string. 3. The function should handle edge cases, such as an empty string. **Example Usage:** ```python s = \\"bbbab\\" length = longest_palindromic_subsequence(s) print(length) # Output: 4 s = \\"cbbd\\" length = longest_palindromic_subsequence(s) print(length) # Output: 2 ``` **Hint:** 1. Consider creating a 2D list `dp` where `dp[i][j]` represents the length of the longest palindromic subsequence between the indices ( i ) and ( j ). 2. Initialize `dp[i][i]` to 1 for all ( i ), as each character is a palindromic subsequence of length 1. 3. Update the `dp` table by considering substrings of increasing lengths. For each substring, if the characters at both ends are the same, then the longest palindromic subsequence is determined by the length of the subsequence within those ends plus two. Otherwise, it is the maximum of the lengths by excluding either end character. **Algorithm Explanation:** 1. Create a 2D list `dp` with dimensions ( n times n ). 2. Initialize all diagonal values `dp[i][i]` to 1. 3. For each length from 2 to ( n ), consider all substrings of that length and update the `dp` table based on the characters at the string\'s current start and end indices. 4. The value `dp[0][n-1]` will give the length of the longest palindromic subsequence.","solution":"def longest_palindromic_subsequence(s): Find the length of the longest palindromic subsequence in the input string. Parameters: s (str): The input string. Returns: int: Length of the longest palindromic subsequence. if not s: return 0 n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i + 1][j - 1] if length > 2 else 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"You are tasked with creating a Python function named `find_common_elements(list1: List[int], list2: List[int]) -> List[int]` that identifies common elements between two lists of integers. The function should return a sorted list containing the unique common elements found in both input lists. Your task is to: 1. Identify which elements are present in both lists. 2. Ensure the result contains only unique elements. 3. Sort the output list in ascending order before returning. Note that the input lists can contain duplicate elements and are not sorted. You should make use of Python\'s built-in data structures and algorithms to achieve an efficient solution. Below is the function signature you need to implement: ```python from typing import List def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: pass ```","solution":"from typing import List def find_common_elements(list1: List[int], list2: List[int]) -> List[int]: Returns a sorted list of unique common elements between list1 and list2. # Convert both lists to sets to find unique elements set1 = set(list1) set2 = set(list2) # Find common elements using set intersection common_elements = set1 & set2 # Convert the set of common elements back to a sorted list return sorted(common_elements)"},{"question":"You are tasked with creating a function to process and manipulate lists and dictionaries in Python. The goal is to practice basic operations and transformations on these data structures. **Function to Implement:** ```python def process_data_structures(): pass ``` **Functionality Requirements:** 1. **List of Squares:** - Create a list of the squares of integers from 1 to 10 (inclusive), store it in variable `squares_list`, and print it. 2. **Filtered List:** - Filter out all odd numbers from `squares_list`, store the result in variable `filtered_squares_list`, and print it. 3. **Dictionary of Squares:** - Convert `squares_list` into a dictionary where the key is the integer and the value is its square. Store it in variable `squares_dict` and print it. 4. **Filtered Dictionary:** - Filter out all dictionary entries where the key is an odd number from `squares_dict`, store the result in variable `filtered_squares_dict`, and print it. 5. **List from Dictionary Keys:** - Create a list of keys from `filtered_squares_dict`, store it in variable `keys_list`, and print it. 6. **List from Dictionary Values:** - Create a list of values from `filtered_squares_dict`, store it in variable `values_list`, and print it. 7. **Sum of Values:** - Find the sum of all values in `values_list`, store the result in variable `sum_values`, and print it. **Additional Information:** - Use list comprehensions and dictionary comprehensions where applicable. - Ensure all intermediate results are printed. - The function does not take any parameters and does not return any value. #","solution":"def process_data_structures(): # List of squares from 1 to 10 squares_list = [i**2 for i in range(1, 11)] print(\\"Squares List:\\", squares_list) # Filter out all odd numbers filtered_squares_list = [i for i in squares_list if i % 2 == 0] print(\\"Filtered Squares List:\\", filtered_squares_list) # Convert to dictionary with key as integer and value as square squares_dict = {i: i**2 for i in range(1, 11)} print(\\"Squares Dictionary:\\", squares_dict) # Filter out dictionary entries where the key is an odd number filtered_squares_dict = {k: v for k, v in squares_dict.items() if k % 2 == 0} print(\\"Filtered Squares Dictionary:\\", filtered_squares_dict) # Create a list of keys from filtered_squares_dict keys_list = list(filtered_squares_dict.keys()) print(\\"Keys List:\\", keys_list) # Create a list of values from filtered_squares_dict values_list = list(filtered_squares_dict.values()) print(\\"Values List:\\", values_list) # Sum of all values in values_list sum_values = sum(values_list) print(\\"Sum of Values:\\", sum_values)"},{"question":"You are given a sequence of integers that represent stock prices recorded at regular intervals throughout a day. Your task is to write a function that finds the maximum possible profit you can achieve by buying and then selling one share of the stock. Note that you must buy the stock before you can sell it, and you cannot buy and sell the stock at the same time. Implement the function `max_profit(prices)` that accepts a list of integers called `prices`. Each integer in the list represents the stock price at a certain time throughout the day. 1. Iterate through the `prices` list. 2. Keep track of the minimum price encountered so far. 3. Compute the profit by subtracting the current price with the minimum price encountered. 4. Update the maximum profit if the calculated profit is higher than the current maximum profit. 5. Return the maximum profit after iterating through the entire list. If there are fewer than two prices, the function should return 0, as no transaction is possible. # Example: Given: ```python prices = [7, 1, 5, 3, 6, 4] ``` Your function should return `5`, which is the maximum profit achieved by buying at the price of `1` and selling at the price of `6`. Given: ```python prices = [7, 6, 4, 3, 1] ``` Your function should return `0`, as no profit can be made since prices are decreasing throughout the day.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and then selling one share of stock. Parameters: prices: List[int] - list of stock prices. Returns: int - maximum profit that can be achieved, or 0 if no profit is possible. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"This function calculates and plots the moving average of a given list of temperatures over a specified window size. The moving average provides a smoothed version of the temperature trends by averaging the values within the window. If the window size is larger than the length of the temperatures list or less than 1, raise a ValueError. The function should output: ax (matplotlib.axes._axes.Axes): The axis object of the generated temperature moving average plot, with the title \'Moving Average of Temperatures\', \'Day\' on the x-axis, and \'Temperature\' on the y-axis. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def moving_average_plot(temperatures, window_size): ```","solution":"import numpy as np import matplotlib.pyplot as plt def moving_average_plot(temperatures, window_size): This function calculates and plots the moving average of a given list of temperatures over a specified window size. Parameters: temperatures (list of floats/integers): The list of temperature values. window_size (int): The size of the window over which to calculate the moving average. Returns: matplotlib.axes._axes.Axes: The axis object of the generated temperature moving average plot. Raises: ValueError: If window_size is greater than the length of the temperatures list or less than 1. if window_size > len(temperatures) or window_size < 1: raise ValueError(\\"window_size must be between 1 and the length of the temperatures list\\") # Calculate the moving average moving_avg = np.convolve(temperatures, np.ones(window_size)/window_size, mode=\'valid\') # Plot the results fig, ax = plt.subplots() ax.plot(range(len(moving_avg)), moving_avg, label=\'Moving Average\') ax.set_title(\'Moving Average of Temperatures\') ax.set_xlabel(\'Day\') ax.set_ylabel(\'Temperature\') ax.legend() return ax"},{"question":"You are to write a function `sort_log_files(logs: List[str]) -> List[str]` that takes a list of log files and returns them sorted. Each log is a space-delimited string of words, where the first word is an identifier. # Constraints: - Identifier consists of only lowercase English letters and is at the start of each log file. - There are two types of logs: 1. Letter-logs: Logs where all following words consist of only lowercase English letters. 2. Digit-logs: Logs where all following words consist of digits. - The function needs to sort the logs such that all the letter-logs come before any digit-log. - The letter-logs should be sorted lexicographically based on their content. If their contents are the same, sort them based on their identifiers. - The digit-logs should maintain their relative ordering among themselves. # Instructions: 1. Define the function `sort_log_files(logs)`. 2. Separate the logs into letter-logs and digit-logs. 3. Sort the letter-logs lexicographically by their contents and then by their identifiers. 4. Combine the sorted letter-logs with the unchanged order of digit-logs. 5. Return the combined list. # Example: Input: ``` logs = [\\"dig1 8 1 5 1\\", \\"let1 art can\\", \\"dig2 3 6\\", \\"let2 own kit dog\\", \\"let3 art zero\\"] ``` Output: ``` [\\"let1 art can\\", \\"let3 art zero\\", \\"let2 own kit dog\\", \\"dig1 8 1 5 1\\", \\"dig2 3 6\\"] ``` # Hints: - Use the `str.split()` method to break up each log into its components. - Utilize Python\'s sorting capabilities, where you can provide a custom sort key for complex sorting rules. - Remember to maintain the original relative order of digit-logs after sorting the letter-logs.","solution":"from typing import List def sort_log_files(logs: List[str]) -> List[str]: def get_log_key(log): identifier, content = log.split(\\" \\", 1) if content.replace(\\" \\", \\"\\").isdigit(): # It\'s a digit-log, return a tuple that keeps it at the end return (1,) else: # It\'s a letter-log, return a tuple for sorting return (0, content, identifier) # Sort logs using the custom key sorted_logs = sorted(logs, key=get_log_key) return sorted_logs"},{"question":"You are given a list of integers, representing temperatures recorded over a week. Your task is to implement a function that calculates the average temperature and then generates a bar chart to visualize the temperature variation throughout the week, saving the chart to a specified file using the `matplotlib` library. Follow these requirements closely: # Function Name - `temperature_chart` # Input Parameters - `temperatures`: A list of 7 integers or floats, each representing the temperature of a day in the week. - `fname`: A string representing the filename (including path) to save the generated chart. # Output - The function does not return anything. It saves a bar chart to the specified file. # Requirements 1. Use `matplotlib.pyplot` to generate the chart. 2. The chart must include: - A bar for each day\'s temperature. - Labels for the x-axis (\\"Day of the Week\\") and y-axis (\\"Temperature (°C)\\"). - A grid on the chart. - A horizontal line indicating the average temperature of the week. - The days of the week labeled from \\"Monday\\" to \\"Sunday\\" on the x-axis. 3. The chart should be saved with a DPI of 300. 4. Use `matplotlib.pyplot.savefig` to save the figure. 5. Use `matplotlib.pyplot.close` to close the figure after saving. 6. The average temperature line should be prominently marked and labeled. # Example ```python temperatures = [22, 24, 19, 23, 25, 21, 20] fname = \\"week_temperatures.png\\" temperature_chart(temperatures, fname) ``` In this example, the function will generate and save a bar chart showing the daily temperatures and a line for the average temperature for the week in the specified file.","solution":"import matplotlib.pyplot as plt def temperature_chart(temperatures, fname): Generate a bar chart to visualize the temperature variations throughout the week and save the chart to a specified file. Parameters: temperatures (list of float/int): A list of 7 temperatures representing each day of the week. fname (str): The filename (including path) to save the generated chart. if len(temperatures) != 7: raise ValueError(\\"The temperatures list must contain exactly 7 elements.\\") days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] avg_temperature = sum(temperatures) / len(temperatures) plt.figure(figsize=(10, 6)) plt.bar(days_of_week, temperatures, color=\'skyblue\') plt.axhline(y=avg_temperature, color=\'r\', linestyle=\'--\', label=f\'Avg Temp: {avg_temperature:.2f}°C\') plt.xlabel(\'Day of the Week\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Weekly Temperature Chart\') plt.grid(True) plt.legend() plt.savefig(fname, dpi=300) plt.close()"},{"question":"Create a function to calculate the Manhattan distance between two points in a 2D space given their coordinates as tuples (x1, y1) and (x2, y2). The Manhattan distance between two points is the sum of the absolute differences of their Cartesian coordinates. The function should output: int: The Manhattan distance between the two points. You should write self-contained code starting with: ``` def manhattan_distance(point1, point2): ``` Example: ``` point1 = (1, 2) point2 = (4, 6) manhattan_distance(point1, point2) ``` Output: ``` 7 ```","solution":"def manhattan_distance(point1, point2): Calculate the Manhattan distance between two points in a 2D space. Args: point1: A tuple (x1, y1) representing the coordinates of the first point. point2: A tuple (x2, y2) representing the coordinates of the second point. Returns: int: The Manhattan distance between the two points. x1, y1 = point1 x2, y2 = point2 return abs(x1 - x2) + abs(y1 - y2)"},{"question":"You are developing a simplified hotel reservation system. Guests can book rooms for a certain number of nights, and your system should be able to manage the bookings, ensuring there are no overlaps for the same room. # Task: Implement a `Hotel` class to manage room reservations. This class will track reservations and prevent double bookings for any room. Each room can only have one reservation at a time. The `Hotel` class should have the following methods: 1. `__init__(self)`: Initialize the hotel with an empty dictionary to store reservations. 2. `book_room(self, room_id, start_date, end_date)`: Book a room with a unique identifier `room_id` from `start_date` to `end_date`. If the room is already booked for any date within this range, return `False`. Otherwise, store the booking and return `True`. 3. `cancel_booking(self, room_id, start_date, end_date)`: Cancel an existing booking. If the booking exists, remove it and return `True`. If there is no such booking, return `False`. Parameters: - `room_id (int)`: The identifier for the room. - `start_date (str)`: The start date of the booking in the format `\\"YYYY-MM-DD\\"`. - `end_date (str)`: The end date of the booking in the format `\\"YYYY-MM-DD\\"`. Returns: - `book_room` method: `bool`: `True` if the booking is successful, `False` if the booking overlaps with an existing booking. - `cancel_booking` method: `bool`: `True` if the cancellation is successful, `False` if there is no such booking. # Example: ```python hotel = Hotel() # Book room 101 print(hotel.book_room(101, \\"2023-10-01\\", \\"2023-10-05\\")) # Output: True # Attempt to double book room 101 print(hotel.book_room(101, \\"2023-10-03\\", \\"2023-10-06\\")) # Output: False # Cancel booking for room 101 print(hotel.cancel_booking(101, \\"2023-10-01\\", \\"2023-10-05\\")) # Output: True # Book room 101 again after cancellation print(hotel.book_room(101, \\"2023-10-03\\", \\"2023-10-06\\")) # Output: True ``` # Note: - Assume dates are given in the format `\\"YYYY-MM-DD\\"`, and the `end_date` is exclusive. - You can use the `datetime` library to handle date operations. - The system should only track non-overlapping bookings per room within the given date ranges.","solution":"from datetime import datetime class Hotel: def __init__(self): self.reservations = {} def book_room(self, room_id, start_date, end_date): start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") if room_id not in self.reservations: self.reservations[room_id] = [] for booking in self.reservations[room_id]: if not (end_date <= booking[0] or start_date >= booking[1]): return False self.reservations[room_id].append((start_date, end_date)) return True def cancel_booking(self, room_id, start_date, end_date): start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") if room_id in self.reservations: for booking in self.reservations[room_id]: if booking[0] == start_date and booking[1] == end_date: self.reservations[room_id].remove(booking) return True return False"},{"question":"You are tasked with developing a function to simulate a simple traffic light system at an intersection. The system should manage the states of the traffic lights and ensure that the lights change in the correct sequence with appropriate timing for each state. Implement a function called `traffic_light_simulator` that takes the following parameters: - `green_duration`: The duration (in seconds) for which the green light stays on. - `yellow_duration`: The duration (in seconds) for which the yellow light stays on. - `red_duration`: The duration (in seconds) for which the red light stays on. - `cycles`: The number of complete light cycles to simulate. Your function should: 1. Print the current state of the traffic light (Green, Yellow, Red) and the time remaining in that state. 2. Transition through the states in the order: Green -> Yellow -> Red -> Green, repeating for the specified number of cycles. 3. Use appropriate delays to simulate the duration each light stays on. **Implementation Requirements:** - Use `time.sleep` to simulate the duration of each light state. - Ensure that the traffic light sequence runs synchronously. Here\'s an example call to your function: ```python traffic_light_simulator(green_duration=10, yellow_duration=3, red_duration=7, cycles=5) ``` This call should simulate and print the state transitions and durations for 5 complete cycles of the traffic light.","solution":"import time def traffic_light_simulator(green_duration, yellow_duration, red_duration, cycles): states = [\\"Green\\", \\"Yellow\\", \\"Red\\"] durations = [green_duration, yellow_duration, red_duration] for cycle in range(cycles): for state, duration in zip(states, durations): print(f\\"{state} light on for {duration} seconds\\") time.sleep(duration) # Simulating the traffic light state duration # This function simulates the traffic light with the given duration for each state and number of cycles."},{"question":"You are developing a simple library management system in Python. The system should allow users to add books to the library, borrow books, return books, and view the list of available books. Your task is to create a class `Library` that supports the following methods: 1. `add_book(title)`: Adds a new book with the given `title` to the library. If the book already exists, increment the quantity by one. 2. `borrow_book(title)`: Allows a user to borrow a book with the given `title` if it is available. If the book is available, decrement the quantity by one and print \\"Book borrowed successfully: <title>\\". If the book is not available or does not exist, print \\"Sorry, the book is not available\\". 3. `return_book(title)`: Allows a user to return a book with the given `title`. If the book exists in the library, increment the quantity by one and print \\"Book returned successfully: <title>\\". If the book does not exist, print \\"This book does not belong to the library\\". 4. `list_books()`: Prints a list of all available books in the library with their quantities in the format \\"Title (Quantity)\\". Implement the required class `Library` with the methods as described. Ensure the class handles the operations correctly and efficiently. ```python class Library: def __init__(self): # Your implementation here def add_book(self, title): # Your implementation here def borrow_book(self, title): # Your implementation here def return_book(self, title): # Your implementation here def list_books(self): # Your implementation here # Example usage: # library = Library() # library.add_book(\\"The Great Gatsby\\") # library.add_book(\\"1984\\") # library.borrow_book(\\"The Great Gatsby\\") # library.return_book(\\"The Great Gatsby\\") # library.list_books() ``` # Additional Instructions - Ensure that the class maintains a correct count of each title in the library. - Handle cases where the operations must deal with books that don\'t exist in the library.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title): if title in self.books: self.books[title] += 1 else: self.books[title] = 1 def borrow_book(self, title): if title in self.books and self.books[title] > 0: self.books[title] -= 1 print(f\\"Book borrowed successfully: {title}\\") else: print(\\"Sorry, the book is not available\\") def return_book(self, title): if title in self.books: self.books[title] += 1 print(f\\"Book returned successfully: {title}\\") else: print(\\"This book does not belong to the library\\") def list_books(self): for title, quantity in self.books.items(): print(f\\"{title} ({quantity})\\")"},{"question":"Create a function named `generate_fibonacci_square_spirals()` that utilizes the Python `turtle` module to draw Fibonacci square spirals. These spirals should showcase squares with side lengths corresponding to Fibonacci numbers, placed in a spiral pattern where each new square\'s side length is the sum of the lengths of the previous two. 1. Setting up a `turtle.Screen`: - Background color should be set to `\'white\'`. 2. Creating a `turtle.Turtle`: - Set its drawing speed to the maximum (fastest) speed. - Change its color to `\'black\'`. - Position the turtle to the starting coordinates `(-200, 0)`. - Set the width of the pen to 2. 3. Drawing the pattern: - Initialize the first two Fibonacci numbers as `a = 1` and `b = 1`. - Draw the first two squares with side lengths derived from `a` and `b`. - Continue drawing the squares, each new square having a side length that is the sum of the side lengths of the previous two squares. - Position the turtle correctly to form the spiral by rotating and moving forward after each square. 4. Draw at least 10 squares to form the Fibonacci spiral pattern. 5. Ensure the drawn window only closes when clicked. The function definition should be: ```python def generate_fibonacci_square_spirals(): # Your code starts here ``` **Python Libraries Required:** - `turtle.Screen` - `turtle.Turtle`","solution":"import turtle def generate_fibonacci_square_spirals(): # Create the screen and set the background color screen = turtle.Screen() screen.bgcolor(\\"white\\") # Create the turtle, set its speed, color, and pen width t = turtle.Turtle() t.speed(0) # Fastest speed t.color(\\"black\\") t.width(2) # Position the turtle at the starting point t.penup() t.goto(-200, 0) t.pendown() # Initialize the first two Fibonacci numbers a = 1 b = 1 # Draw at least 10 squares for _ in range(10): # Draw each square with sides of length a for _ in range(4): t.forward(a * 20) t.left(90) # Move to the next corner of the square and prepare for drawing the next square t.forward(a * 20) t.right(90) # Update the Fibonacci numbers a, b = b, a + b # Close the window when clicked screen.exitonclick()"},{"question":"A major online retailer maintains a massive log file containing information about transactions made on their platform. Each transaction is recorded in a JSON file, where each entry contains the `TransactionID`, `UserID`, `TimeStamp`, `ProductID`, `ProductCategory`, `Quantity`, and `Price`. Your task is to write a function called `process_transactions(file_path)` that reads the given log file, calculates the total expenditure for each user, and writes the results to a new JSON file named \'user_expenditure.json\'. The function needs to: 1. Read the input JSON file specified by `file_path`. 2. Calculate the total expenditure for each user. The expenditure for a single transaction is determined by multiplying the `Quantity` by the `Price`. 3. Write the expenditure data to \'user_expenditure.json\', in the format: ```json { \\"UserID1\\": TotalExpenditure1, \\"UserID2\\": TotalExpenditure2, ... } ``` You are explicitly required to use Python\'s in-built `json` module to handle the reading and writing of JSON files. Assume that the input file structure is consistent and will always include the fields mentioned above. ```python import json def process_transactions(file_path): with open(file_path, \'r\') as file: data = json.load(file) user_expenditure = {} for transaction in data: user_id = transaction[\'UserID\'] total_price = transaction[\'Quantity\'] * transaction[\'Price\'] if user_id in user_expenditure: user_expenditure[user_id] += total_price else: user_expenditure[user_id] = total_price with open(\'user_expenditure.json\', \'w\') as outfile: json.dump(user_expenditure, outfile, indent=4) ```","solution":"import json def process_transactions(file_path): with open(file_path, \'r\') as file: data = json.load(file) user_expenditure = {} for transaction in data: user_id = transaction[\'UserID\'] total_price = transaction[\'Quantity\'] * transaction[\'Price\'] if user_id in user_expenditure: user_expenditure[user_id] += total_price else: user_expenditure[user_id] = total_price with open(\'user_expenditure.json\', \'w\') as outfile: json.dump(user_expenditure, outfile, indent=4)"},{"question":"# The Sierpinski Triangle The Sierpinski Triangle is a fractal and attractive fixed set that displays self-similarity on various scales. It is constructed by recursively subdividing an equilateral triangle into smaller equilateral triangles. # Objective Your task is to use the provided code snippet as inspiration to implement the `sierpinski_triangle` function. The function aims to generate the vertices of the Sierpinski triangle for a given depth. The given depth (`d`) determines how many times the triangle subdivides itself. # Function Signature ```python def sierpinski_triangle(d: int, p1: Point, p2: Point, p3: Point) -> None: ``` # Input Parameters 1. `d` (int): The depth of recursion. Determines the number of levels the triangle will subdivide into. 2. `p1` (Point): The first vertex of the triangle. 3. `p2` (Point): The second vertex of the triangle. 4. `p3` (Point): The third vertex of the triangle. # Point Class You\'ll need to have a `Point` class to represent points in the 2D space. ```python class Point: def __init__(self, x: float, y: float): self.x = x self.y = y ``` # Requirements 1. Ensure that you print the intermediate vertices generated during the recursion. This means creating a helper function to print points and collect them in a list for debugging. 2. Use basic geometric calculations to determine the midpoints of the edges of the triangles. # Example Suppose we call the following function: ```python sierpinski_triangle(2, Point(0, 0), Point(1, 0), Point(0.5, 0.866)) ``` The function should calculate and print the intermediate vertices required to draw the Sierpinski triangle between `p1`, `p2`, and `p3` at depth 2.","solution":"class Point: def __init__(self, x: float, y: float): self.x = x self.y = y def __eq__(self, other): return self.x == other.x and self.y == other.y def __repr__(self): return f\\"Point({self.x}, {self.y})\\" def sierpinski_triangle(d: int, p1: Point, p2: Point, p3: Point) -> None: Generates and prints the vertices of the Sierpinski triangle. Parameters: d (int): The depth of recursion. p1 (Point): The first vertex of the triangle. p2 (Point): The second vertex of the triangle. p3 (Point): The third vertex of the triangle. if d == 0: print(p1, p2, p3) return # Calculate midpoints of each side of the triangle mid_p12 = midpoint(p1, p2) mid_p23 = midpoint(p2, p3) mid_p31 = midpoint(p1, p3) # Recursively draw smaller triangles sierpinski_triangle(d - 1, p1, mid_p12, mid_p31) sierpinski_triangle(d - 1, mid_p12, p2, mid_p23) sierpinski_triangle(d - 1, mid_p31, mid_p23, p3) def midpoint(p1: Point, p2: Point) -> Point: Calculate the midpoint between two points. Parameters: p1 (Point): The first point. p2 (Point): The second point. Returns: Point: The midpoint between p1 and p2. mid_x = (p1.x + p2.x) / 2 mid_y = (p1.y + p2.y) / 2 return Point(mid_x, mid_y)"},{"question":"Create a function `generate_substrings` that takes a string `input_str` and returns a list of all unique substrings of `input_str`. The substrings should be sorted in the order they appear in the original string. **Function Signature:** ```python def generate_substrings(input_str: str) -> list: ``` **Parameters:** - `input_str` (str): The input string from which to generate substrings. **Returns:** - `list`: A list of unique substrings sorted in the order of their first appearance in `input_str`. **Example:** ```python input_str = \\"abc\\" generate_substrings(input_str) # Returns [\'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\'] input_str = \\"abca\\" generate_substrings(input_str) # Returns [\'a\', \'ab\', \'abc\', \'abca\', \'b\', \'bc\', \'bca\', \'c\', \'ca\'] ```","solution":"def generate_substrings(input_str: str) -> list: Generates all unique substrings of the input string in the order they appear. Parameters: input_str (str): The input string from which to generate substrings. Returns: list: A list of unique substrings sorted in the order of their first appearance in input_str. substrings = set() result = [] for i in range(len(input_str)): for j in range(i + 1, len(input_str) + 1): substring = input_str[i:j] if substring not in substrings: substrings.add(substring) result.append(substring) return result"},{"question":"In software development, one common problem is scheduling tasks for optimal performance. Assume you are given a set of tasks where each task has a start time and end time. Your objective is to implement a function called `max_non_overlapping_tasks` to determine the maximum number of non-overlapping tasks that can be performed. You must implement the `max_non_overlapping_tasks` function with the following signature: ```python def max_non_overlapping_tasks(tasks): \'\'\'Given a list of tasks, each defined by a start and end time, output the maximum number of non-overlapping tasks that can be performed. Input: tasks: List of tuples where each tuple contains two integers (start_time, end_time). Returns: An integer representing the maximum number of non-overlapping tasks. \'\'\' ``` To solve this problem, you should: 1. Sort the tasks based on their end time. 2. Use a greedy algorithm to select the maximum number of non-overlapping tasks. **Example:** ```python tasks = [(1, 3), (2, 5), (4, 6), (6, 7)] max_tasks = max_non_overlapping_tasks(tasks) print(max_tasks) # Output should be 3 as the tasks (1, 3), (4, 6), and (6, 7) can be performed without any overlap. ``` You will need to handle cases where tasks may have the same start or end time and ensure the function\'s efficiency for large datasets.","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks, each defined by a start and end time, output the maximum number of non-overlapping tasks that can be performed. Input: tasks: List of tuples where each tuple contains two integers (start_time, end_time). Returns: An integer representing the maximum number of non-overlapping tasks. # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) # Initialize variables to keep track of the end time of the last selected task last_end_time = float(\'-inf\') count = 0 # Iterate through the sorted tasks for start, end in tasks: # If the start time of the current task is not overlapping with the last selected task if start >= last_end_time: # Select the current task last_end_time = end count += 1 return count"},{"question":"Write a function `generate_maze` that generates a maze using Prim\'s algorithm for maze generation. The maze should be represented as a 2D grid of cells where `0` represents a wall and `1` represents an open path. The maze should have a specified number of rows and columns, and should start with all cells as walls. _PARAMETERS:_ 1. `rows` (int): An integer representing the number of rows in the maze. 2. `cols` (int): An integer representing the number of columns in the maze. _RETURN:_ - A `list of lists` representing the maze with `0` as the wall and `1` as the path. _USEFUL LIBRARY FUNCTIONS:_ 1. `random.choice`: Used to select a random element from a non-empty sequence. 2. `random.shuffle`: Shuffles the sequence in place. 3. `random.randint`: Returns a random integer within the specified range. _EXAMPLE:_ ```python maze = generate_maze(10, 10) ``` _INVOCATION:_ ```python # Ensure the function `generate_maze` generates a maze correctly using Prim\'s algorithm. ``` _SOLUTION SKELETON:_ ```python import random def generate_maze(rows, cols): def get_neighbours(cell): r, c = cell neighbours = [] for dr, dc in [(2, 0), (-2, 0), (0, 2), (0, -2)]: nr, nc = r + dr, c + dc if 1 <= nr < rows - 1 and 1 <= nc < cols - 1: neighbours.append((nr, nc)) return neighbours maze = [[0 for _ in range(cols)] for _ in range(rows)] start_row, start_col = (random.choice(range(1, rows, 2)), random.choice(range(1, cols, 2))) maze[start_row][start_col] = 1 walls = get_neighbours((start_row, start_col)) while walls: random_item = random.choice(walls) walls.remove(random_item) r, c = random_item if maze[r][c] == 0: neighbours = get_neighbours((r, c)) paths = [neighbour for neighbour in neighbours if maze[neighbour[0]][neighbour[1]] == 1] if len(paths) == 1: maze[r][c] = 1 wall_r, wall_c = (r + paths[0][0]) // 2, (c + paths[0][1]) // 2 maze[wall_r][wall_c] = 1 walls += [neighbour for neighbour in neighbours if maze[neighbour[0]][neighbour[1]] == 0] random.shuffle(walls) return maze ```","solution":"import random def generate_maze(rows, cols): Generates a maze using Prim\'s algorithm. Parameters: rows (int): The number of rows in the maze. cols (int): The number of columns in the maze. Returns: list of lists: The generated maze with \'0\' representing a wall and \'1\' representing a path. def get_neighbours(cell): r, c = cell neighbours = [] for dr, dc in [(2, 0), (-2, 0), (0, 2), (0, -2)]: nr, nc = r + dr, c + dc if 1 <= nr < rows - 1 and 1 <= nc < cols - 1: neighbours.append((nr, nc)) return neighbours maze = [[0 for _ in range(cols)] for _ in range(rows)] start_row, start_col = (random.choice(range(1, rows, 2)), random.choice(range(1, cols, 2))) maze[start_row][start_col] = 1 walls = [(start_row + dr, start_col + dc) for dr, dc in [(2, 0), (-2, 0), (0, 2), (0, -2)] if 1 <= start_row + dr < rows - 1 and 1 <= start_col + dc < cols - 1] while walls: random_item = random.choice(walls) walls.remove(random_item) r, c = random_item if maze[r][c] == 0: neighbours = get_neighbours((r, c)) paths = [neighbour for neighbour in neighbours if maze[neighbour[0]][neighbour[1]] == 1] if len(paths) == 1: # Ensures there\'s exactly one connecting path (not forming cycles) maze[r][c] = 1 wall_r, wall_c = (r + paths[0][0]) // 2, (c + paths[0][1]) // 2 maze[wall_r][wall_c] = 1 new_neighbours = [(r + dr, c + dc) for dr, dc in [(2, 0), (-2, 0), (0, 2), (0, -2)] if 1 <= r + dr < rows - 1 and 1 <= c + dc < cols - 1 and maze[r + dr][c + dc] == 0] walls += new_neighbours random.shuffle(walls) return maze"},{"question":"# Problem Statement You are tasked with creating a function named `find_most_frequent` that detects and returns the most frequently occurring element from a given list of integers. If multiple elements have the same highest frequency, return the smallest element among them. # Functional Requirements: 1. The function `find_most_frequent` should take a list of integers as its parameter. 2. The function should return a single integer: the most frequently occurring element in the list. 3. If there are multiple elements with the same frequency, you should return the smallest integer among them. # Constraints: - The input list will have at least one integer. - The elements of the list are within the range of (-10^6, 10^6). # Example: ```python nums = [1, 3, 2, 3, 1, 3, 2, 1, 1] print(find_most_frequent(nums)) ``` Output: ``` 1 ``` Explanation: In the example list, both `1` and `3` appear 4 times. Since `1` is smaller than `3`, the function returns `1`.","solution":"def find_most_frequent(nums): Returns the most frequently occurring element in the list. If multiple elements have the same highest frequency, returns the smallest element among them. from collections import Counter count = Counter(nums) max_freq = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_freq] return min(most_frequent)"},{"question":"You are tasked with creating a function that reads a list of integers from a file, sorts the integers in ascending order, and writes the sorted list back to another specified file. You will use the `open` function to handle file operations and should ensure that the input file exists before attempting to read from it. Your task is to write a Python function named `sort_integers_from_file`. This function should accept two parameters: 1. `input_file` (str): The name of the input file containing a list of integers, one per line. 2. `output_file` (str): The name of the output file where the sorted list of integers should be written. The function should: 1. Read the integers from the `input_file`. 2. Sort the integers in ascending order. 3. Write the sorted list of integers to the `output_file`. **Function Signature**: ```python def sort_integers_from_file(input_file: str, output_file: str) -> None: ``` **Constraints**: 1. You can assume the integers in the file are separated by new lines. 2. You need to use basic file operations in Python. 3. If the `input_file` does not exist, your function should raise a `FileNotFoundError`. # Example Suppose you have a file named `unsorted_numbers.txt` containing the following integers: ``` 3 1 4 1 5 9 ``` You want to sort these integers and write the sorted list to a file named `sorted_numbers.txt`. - Input: - `input_file = \\"unsorted_numbers.txt\\"` - `output_file = \\"sorted_numbers.txt\\"` - Expected Execution: ```python sort_integers_from_file(\\"unsorted_numbers.txt\\", \\"sorted_numbers.txt\\") ``` After the function call, the file `sorted_numbers.txt` should have the following content: ``` 1 1 3 4 5 9 ```","solution":"def sort_integers_from_file(input_file: str, output_file: str) -> None: Reads a list of integers from the input_file, sorts them in ascending order, and writes the sorted list to the output_file. try: # Read integers from input file with open(input_file, \'r\') as file: integers = [int(line.strip()) for line in file.readlines()] # Sort the integers integers.sort() # Write sorted integers to the output file with open(output_file, \'w\') as file: for integer in integers: file.write(f\\"{integer}n\\") except FileNotFoundError: raise FileNotFoundError(f\\"The file {input_file} does not exist.\\")"},{"question":"**Function Name:** `generate_report_card` **Function Objective:** You need to design a function that processes a list of student records to calculate their average scores, assigns letter grades based on the average, and returns the results in a structured format. The function should output the results as a list of dictionaries, where each dictionary contains the student\'s name, average score, and letter grade. **Details and Requirements:** 1. **Function Definition:** ```python def generate_report_card(records: List[Dict[str, Union[str, List[int]]]]) -> List[Dict[str, Union[str, float]]] ``` 2. **Parameters:** - `records` (List[Dict[str, Union[str, List[int]]]]): A list of dictionaries, each containing a student\'s name (str) and a list of their scores (List[int]). 3. **Functionality:** - Calculate the average score for each student. - Assign a letter grade based on the average score: - \'A\' for average scores 90 and above - \'B\' for average scores between 80 and 89 - \'C\' for average scores between 70 and 79 - \'D\' for average scores between 60 and 69 - \'F\' for average scores below 60 - Return a list of dictionaries. Each dictionary should contain the keys: \'name\' (str), \'average\' (float), and \'grade\' (str). 4. **Restrictions and Instructions:** - Ensure proper handling of edge cases, such as empty scores lists. - Use Python\'s built-in functions and structures for computations. **Example Usage:** Assume `student_records` contains: ```python student_records = [ {\'name\': \'Alice\', \'scores\': [85, 92, 78]}, {\'name\': \'Bob\', \'scores\': [69, 75, 80]}, {\'name\': \'Charlie\', \'scores\': [90, 93, 94]} ] ``` After running the function: ```python report = generate_report_card(student_records) print(report) ``` The output should be: ```python [ {\'name\': \'Alice\', \'average\': 85.0, \'grade\': \'B\'}, {\'name\': \'Bob\', \'average\': 74.67, \'grade\': \'C\'}, {\'name\': \'Charlie\', \'average\': 92.33, \'grade\': \'A\'} ] ```","solution":"from typing import List, Dict, Union def generate_report_card(records: List[Dict[str, Union[str, List[int]]]]) -> List[Dict[str, Union[str, float]]]: def calculate_average(scores: List[int]) -> float: if not scores: return 0.0 return sum(scores) / len(scores) def assign_letter_grade(average: float) -> str: if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' report = [] for record in records: name = record.get(\'name\', \'Unknown\') scores = record.get(\'scores\', []) average = round(calculate_average(scores), 2) grade = assign_letter_grade(average) report.append({ \'name\': name, \'average\': average, \'grade\': grade }) return report"},{"question":"**Context:** Graph traversal is a fundamental technique used in various computational problems. One common method is Depth-First Search (DFS), which explores as far as possible along each branch before backtracking. This problem will involve implementing the iterative version of DFS to traverse and label connected components in an undirected graph. **Objective:** Write a function `connected_components(graph)` that identifies and labels all the connected components in a given undirected graph using an iterative version of Depth-First Search (DFS). The graph is represented as an adjacency list. **Function Signature:** ```python def connected_components(graph): ``` **Parameters:** 1. `graph` (dict): A dictionary representing an undirected graph where the keys are node identifiers and the values are lists of nodes (neighbors) these nodes are connected to. **Return Value:** A dictionary where the keys are node identifiers, and values are the labels of the connected components to which they belong. Component labels can be any unique identifier (e.g., integers starting from 0). **Approach:** 1. Initialize a dictionary to store the component labels of each node. 2. Use an iterative DFS to traverse the graph. 3. Assign a unique label to each newly discovered connected component. 4. During the traversal, label all nodes that are part of the same connected component with the same label. Here is how the implementation should look: ```python def connected_components(graph): component_label = {} current_label = 0 def iterative_dfs(start): stack = [start] while stack: node = stack.pop() if node not in component_label: component_label[node] = current_label stack.extend(neighbor for neighbor in graph[node] if neighbor not in component_label) for node in graph: if node not in component_label: iterative_dfs(node) current_label += 1 return component_label ``` **Example Usage:** ``` graph = { 0: [1, 2], 1: [0, 2], 2: [0, 1], 3: [4], 4: [3] } print(connected_components(graph)) # Output: {0: 0, 1: 0, 2: 0, 3: 1, 4: 1} ``` In the example above, nodes `0`, `1`, and `2` form one connected component, and nodes `3` and `4` form another connected component, with components labeled `0` and `1` respectively. Ensure your implementation accounts for all nodes in the input graph.","solution":"def connected_components(graph): component_label = {} # To store the component labels of each node current_label = 0 # Start labeling components from 0 def iterative_dfs(start): stack = [start] while stack: node = stack.pop() if node not in component_label: component_label[node] = current_label stack.extend(neighbor for neighbor in graph[node] if neighbor not in component_label) # Traverse all nodes in the graph for node in graph: if node not in component_label: iterative_dfs(node) current_label += 1 # Increment the label for each new component return component_label"},{"question":"You are tasked with creating a Python function that demonstrates the use of list comprehensions and dictionary operations. Your function, named `count_duplicates`, will take a list of integers as input and return a dictionary where the keys are the integers from the list and the values are the counts of how many times each integer appears in the list. Your function should be defined as follows: ```python def count_duplicates(numbers): Counts the occurrences of each integer in the list and returns a dictionary with counts. Parameters: - numbers (list of int): A list of integers. Returns: - dict: A dictionary where keys are integers from the list and values are the counts of occurrences. ``` Requirements: 1. Use a list comprehension to iterate through the list of integers. 2. Use a dictionary to store the counts of each integer. 3. Return the dictionary with the count of occurrences for each integer. Example: ```python numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] result = count_duplicates(numbers) # Expected Output: {1: 1, 2: 2, 3: 3, 4: 4} ```","solution":"def count_duplicates(numbers): Counts the occurrences of each integer in the list and returns a dictionary with counts. Parameters: - numbers (list of int): A list of integers. Returns: - dict: A dictionary where keys are integers from the list and values are the counts of occurrences. return {num: numbers.count(num) for num in set(numbers)}"},{"question":"In this problem, you are required to implement a username validation system for a new application. The username must adhere to the following rules: 1. The username must be at least 5 characters long and at most 12 characters long. 2. The username must start with an uppercase letter. 3. The username can only contain alphanumeric characters (letters and digits). Your task is to write a function named `validate_username(username)` that returns `True` if the username satisfies all the above criteria, and `False` otherwise. The function has one parameter: - `username`: A string representing the username to be validated. # Input Constraints: - The length of the username will be between 1 and 100 characters. - The username may contain any printable ASCII characters. # Example Usage ```python print(validate_username(\\"JohnDoe123\\")) # True print(validate_username(\\"johnDoe123\\")) # False, does not start with an uppercase letter print(validate_username(\\"John@Doe123\\")) # False, contains a special character \'@\' print(validate_username(\\"Jo\\")) # False, too short ```","solution":"def validate_username(username): Validates the username based on the specified criteria. Rules: 1. The username must be at least 5 characters long and at most 12 characters long. 2. The username must start with an uppercase letter. 3. The username can only contain alphanumeric characters (letters and digits). Params: - username (str): The username to validate. Returns: - bool: True if the username is valid, False otherwise. if not (5 <= len(username) <= 12): return False if not username[0].isupper(): return False if not username.isalnum(): return False return True"},{"question":"Implement a function that takes a list of dictionaries representing students and their scores in various subjects. Each dictionary contains the student\'s name and a dictionary of subject-score pairs. Calculate the average score for each student and add it to the dictionary. Return a new list of dictionaries with the added \'average_score\' key-value pair. The function should output with: List of dictionaries: Each dictionary should include the student\'s name, scores, and \'average_score\'. You should write self-contained code starting with: ``` def calculate_student_averages(students): ```","solution":"def calculate_student_averages(students): This function takes a list of dictionaries representing students and their scores in various subjects, calculates the average score for each student, and adds it to the dictionary as \'average_score\'. Parameters: students (list): A list of dictionaries, where each dictionary represents a student. Returns: list: A new list of dictionaries with the added \'average_score\' key-value pair. result = [] for student in students: scores = student[\'scores\'].values() average_score = sum(scores) / len(scores) if scores else 0 student_copy = student.copy() student_copy[\'average_score\'] = average_score result.append(student_copy) return result"},{"question":"Write a Python function called `find_peak` that takes a list of unsorted integers and returns a peak element. A peak element is defined as an element that is not smaller than its neighbors. For corner elements, we need to consider only one neighbor. The function should return the value of any one of the peak elements. You can assume that the list contains at least one element. Here are the rules: 1. If the element at index 0 is greater than the element at index 1, then the element at index 0 is a peak. 2. If the element at index n-1 is greater than the element at index n-2 (where n is the length of the list), then the element at index n-1 is a peak. 3. For other elements, if an element at index i is not smaller than both its neighbors, then the element at index i is a peak. Here is an example of how your function will be used: ```python # Example usage: result = find_peak([1, 3, 20, 4, 1, 0]) print(result) # Output could be 20 (as it is a peak), or it could be 4 if there are multiple peaks. ``` Function Signature: ```python def find_peak(arr: list) -> int: ```","solution":"def find_peak(arr: list) -> int: Returns a peak element from the given list of unsorted integers. A peak element is defined as an element that is not smaller than its neighbors. n = len(arr) if n == 1: return arr[0] if arr[0] >= arr[1]: return arr[0] if arr[n-1] >= arr[n-2]: return arr[n-1] for i in range(1, n-1): if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return arr[i]"},{"question":"Write a function that finds all prime numbers up to a specified number `n` using the Sieve of Eratosthenes algorithm. The function should return a list of prime numbers in ascending order. If `n` is less than 2, the function should return an empty list. Raise the following exceptions as necessary: ValueError - If the specified number `n` is not an integer or is negative. The function should output: list: A list of prime numbers up to the specified number `n`. You should write self-contained code starting with: ``` def sieve_of_eratosthenes(n): ```","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers up to a specified number `n` using the Sieve of Eratosthenes algorithm. Parameters: - n (int): The upper limit up to which to find prime numbers (inclusive). Returns: - list: A list of prime numbers up to the specified number `n`. Raises: - ValueError: If `n` is not an integer or is negative. if not isinstance(n, int) or n < 0: raise ValueError(\\"The specified number `n` must be a non-negative integer.\\") if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [number for number, is_prime in enumerate(sieve) if is_prime]"},{"question":"You are tasked with writing a function `longest_palindromic_subsequence` that finds the longest palindromic subsequence in a given string. A palindromic subsequence is a sequence that can be derived from the original string by deleting some or no elements without changing the order of the remaining characters, and reads the same backward as forward. To achieve this, you may use dynamic programming. Follow these steps: 1. Create a 2D array `dp` where `dp[i][j]` represents the length of the longest palindromic subsequence in the substring `s[i:j+1]`. 2. Initialize the table such that `dp[i][i] = 1` for all `i`, as a single character is always a palindrome of length 1. 3. Populate the table using the following relations: - If `s[i] == s[j]`, then `dp[i][j] = dp[i+1][j-1] + 2` - Else, `dp[i][j] = max(dp[i+1][j], dp[i][j-1])` 4. The value `dp[0][n-1]` will contain the length of the longest palindromic subsequence, where `n` is the length of the string. The function definition is as follows: ```python def longest_palindromic_subsequence(s): Find the length of the longest palindromic subsequence in a given string. Parameters: s (str): The input string. Returns: int: The length of the longest palindromic subsequence. pass ``` # Requirements: - Use dynamic programming to solve the problem. - The function should run with time complexity of O(n^2) and space complexity of O(n^2), where `n` is the length of the string. Example: ```python s = \\"bbbab\\" print(longest_palindromic_subsequence(s)) # Output: 4, as the longest palindromic subsequence is \\"bbbb\\" s = \\"cbbd\\" print(longest_palindromic_subsequence(s)) # Output: 2, as the longest palindromic subsequence can be \\"bb\\" ```","solution":"def longest_palindromic_subsequence(s): Find the length of the longest palindromic subsequence in a given string. Parameters: s (str): The input string. Returns: int: The length of the longest palindromic subsequence. n = len(s) if n == 0: return 0 # Create a 2D dp array with zeros dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for length in range(2, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The result is in dp[0][n-1] return dp[0][n-1]"},{"question":"You are required to write a Python function that computes the cumulative sum of elements in a list but only includes numbers that are greater than their immediate predecessor in the list. Function Signature ```python def cumulative_greater_sum(nums): Compute the cumulative sum of elements that are greater than their immediate predecessor. Parameters: nums : list A list of numerical values. Returns: result : list A list containing the cumulative sums of elements that are greater than their immediate predecessor. pass ``` Inputs - `nums`: A list of numerical values. The length of the list is at least 1. Outputs - `result`: A list containing the cumulative sums of elements that are greater than their immediate predecessor. # Requirements 1. Implement the function using basic list operations and control structures. 2. Iterate through the input list starting from the second element and compare it with its immediate predecessor. 3. If an element is greater than its predecessor, add it to a cumulative sum and store this sum in the output list. # Example ```python nums = [1, 3, 2, 5, 4, 6, 8] result = cumulative_greater_sum(nums) print(\\"result:\\", result) ``` Expected output: ``` result: [3, 8, 14, 22] ``` # Requirements for the Solution - Ensure the function handles edge cases like an empty list or a list with only one element. - Do not use any additional libraries; rely on basic Python constructs.","solution":"def cumulative_greater_sum(nums): Compute the cumulative sum of elements that are greater than their immediate predecessor. Parameters: nums : list A list of numerical values. Returns: result : list A list containing the cumulative sums of elements that are greater than their immediate predecessor. if not nums: return [] cumulative_sum = 0 result = [] for i in range(1, len(nums)): if nums[i] > nums[i - 1]: cumulative_sum += nums[i] result.append(cumulative_sum) return result"},{"question":"This function receives a list of integers as input and returns a dictionary where each key is an integer from the list, and the corresponding value is the factorial of that integer. If the list is empty, the function should return an empty dictionary. You should write self-contained code starting with: ``` def calculate_factorials(numbers): ```","solution":"def factorial(n): Helper function to calculate the factorial of a number. if n == 0: return 1 else: return n * factorial(n - 1) def calculate_factorials(numbers): Returns a dictionary where each key is an integer from the list \'numbers\', and the corresponding value is the factorial of that integer. return {num: factorial(num) for num in numbers}"},{"question":"In this problem, you are required to write a function named `get_factorial` that computes the factorial of a given non-negative integer. The factorial of a number `n` is the product of all positive integers less than or equal to `n`. It is denoted by `n!`. The factorial of `0` is defined to be `1`. # Function Signature: ```python def get_factorial(n: int) -> int: pass ``` # Inputs: - `n`: A non-negative integer. # Output: - Returns the factorial of the given number as an integer. # Example: ```python n = 5 factorial = get_factorial(n) print(factorial) # Output should be 120 ``` # Explanation: In the given example, the value of `n` is 5. The factorial of 5, denoted as `5!`, is calculated as follows: [ 5! = 5 times 4 times 3 times 2 times 1 = 120 ] Make sure to handle the base case where `n` is zero, and recursively or iteratively calculate the factorial for other values.","solution":"def get_factorial(n: int) -> int: Computes the factorial of a given non-negative integer. if n == 0: return 1 factorial = 1 for i in range(1, n + 1): factorial *= i return factorial"},{"question":"You need to create a function called `compute_equilibrium_index()` that takes in a list of integers and returns the equilibrium index of the list. The equilibrium index is defined as an index such that the sum of elements at lower indices is equal to the sum of elements at higher indices. If there are multiple equilibrium indices, the function should return the first one. If no equilibrium index exists, the function should return -1. # Function Signature ```python def compute_equilibrium_index(arr: list[int]) -> int: ``` # Input - `arr`: a list of integers, where -10<sup>3</sup> ≤ arr[i] ≤ 10<sup>3</sup> for 1 ≤ len(arr) ≤ 10<sup>5</sup>. # Output - An integer representing the first equilibrium index, or -1 if no equilibrium index exists. # Example Usage ```python compute_equilibrium_index([1, 3, 5, 2, 2]) ``` Expected Output: ```plaintext 2 ``` # Example Explanation For the list [1, 3, 5, 2, 2]: - The sum of elements before index 2 is 1 + 3 = 4. - The sum of elements after index 2 is 2 + 2 = 4. Therefore, the equilibrium index is 2. # Constraints - The function should have a time complexity of O(n). - The function should handle edge cases like an empty list, a list with only one element, or lists where no equilibrium index exists.","solution":"def compute_equilibrium_index(arr: list[int]) -> int: total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1"},{"question":"You are required to design a function that reads data from a JSON file, transforms the data in a specified manner, and then saves the modified data back to a new JSON file. Your task is to implement a function named `process_json` which takes two arguments `input_file` and `output_file`. The `input_file` is the path to a JSON file containing a list of dictionaries. Each dictionary represents a user with the following structure: ```json [ { \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"country\\": \\"USA\\" }, ... ] ``` The `process_json` function will perform the following transformations on the data: 1. Capitalize the first letter of each user\'s name. 2. Add a new key-value pair \\"status\\": \\"active\\" to each user dictionary. 3. Increment the age of each user by 1. The final transformed data should then be saved to the `output_file` in JSON format. # Detailed Steps 1. Define a function named `process_json` that takes two parameters `input_file` and `output_file`. 2. Read the JSON data from the `input_file`. 3. Perform the required transformations on each user\'s data. 4. Write the modified data to the `output_file` in JSON format. # Example Usage ```python process_json(\'users.json\', \'updated_users.json\') # This should read the data from \'users.json\', transform it, and write the modified data to \'updated_users.json\'. ``` # Example Input ```json [ { \\"name\\": \\"john doe\\", \\"age\\": 30, \\"country\\": \\"USA\\" }, { \\"name\\": \\"jane smith\\", \\"age\\": 25, \\"country\\": \\"Canada\\" } ] ``` # Example Output ```json [ { \\"name\\": \\"John doe\\", \\"age\\": 31, \\"country\\": \\"USA\\", \\"status\\": \\"active\\" }, { \\"name\\": \\"Jane smith\\", \\"age\\": 26, \\"country\\": \\"Canada\\", \\"status\\": \\"active\\" } ] ``` # Note Ensure that the function performs proper file handling to read and write JSON files. Use Python\'s built-in `json` module for parsing and serializing JSON data.","solution":"import json def process_json(input_file, output_file): with open(input_file, \'r\') as f: data = json.load(f) for user in data: user[\'name\'] = user[\'name\'].capitalize() user[\'status\'] = \'active\' user[\'age\'] += 1 with open(output_file, \'w\') as f: json.dump(data, f, indent=4)"},{"question":"In modern text processing, it is often necessary to analyze paragraphs and identify trends or specific structures. A common task is to determine the length of the longest sentence in a given paragraph, where sentences are defined as segments of text terminated by a period, exclamation mark, or question mark. You are tasked with writing a function called `longest_sentence_length` that finds the length of the longest sentence in terms of word count in a given paragraph. **Function Specification**: ```python def longest_sentence_length(paragraph: str) -> int: Finds the length of the longest sentence in a given paragraph. Parameters ========== paragraph: str A string representing a paragraph containing multiple sentences. Returns ======= max_length: int The length of the longest sentence in the paragraph in terms of word count. ``` **Requirements**: - Use basic string operations only. - Sentences are terminated by \'.\', \'!\', or \'?\'. - Ignore any leading or trailing whitespace and consider only the non-empty sentences. - For splitting sentences, use the built-in `split` function and handle edge cases with multiple sentence terminators. **Details**: 1. Split the paragraph into sentences based on the terminating characters. 2. Count the number of words in each sentence. 3. Determine the sentence with the maximum word count and return this count. **Example**: ```python paragraph = \\"This is the first sentence! Is this the second? Yes, this is the third sentence.\\" result = longest_sentence_length(paragraph) print(result) ``` Expected output: ``` 6 ``` Explanation: - The first sentence: \\"This is the first sentence\\" has 5 words. - The second sentence: \\"Is this the second\\" has 4 words. - The third sentence: \\"Yes, this is the third sentence\\" has 6 words. Therefore, the length of the longest sentence is 6.","solution":"def longest_sentence_length(paragraph: str) -> int: Finds the length of the longest sentence in a given paragraph. Parameters ========== paragraph: str A string representing a paragraph containing multiple sentences. Returns ======= max_length: int The length of the longest sentence in the paragraph in terms of word count. import re # Split the paragraph into sentences using regex to handle \'.\', \'!\', or \'?\' sentences = re.split(r\'[.!?]\', paragraph) max_length = 0 for sentence in sentences: # Strip leading/trailing whitespace and filter empty sentences words = sentence.strip().split() if words: max_length = max(max_length, len(words)) return max_length"},{"question":"You are required to implement a function `merge_blocks(blocks)` that merges overlapping or touching blocks in a list of blocks. Each block is represented as a tuple `(start, end)` where `start` and `end` are inclusive integers indicating the start and end of the block, respectively. Two blocks `(a, b)` and `(c, d)` (where `a <= b` and `c <= d`) are considered overlapping or touching if there is at least one integer `z` such that `a <= z <= b` and `c <= z <= d`. # Requirements: 1. Implement the function `merge_blocks(blocks)` that takes a list of blocks as its input and returns a new list of merged blocks. 2. Ensure that the blocks in the returned list are non-overlapping and non-touching after merging. 3. The list of input blocks may not be sorted. The output list of merged blocks should be sorted by their start values. # Example: Given `blocks = [(1, 3), (2, 6), (8, 10), (15, 18)]`, the function should work as follows: 1. The blocks `(1, 3)` and `(2, 6)` overlap, so they should be merged to `(1, 6)`. 2. The block `(8, 10)` does not overlap with or touch any other block. 3. The block `(15, 18)` does not overlap with or touch any other block. 4. The final list of merged blocks should be `[(1, 6), (8, 10), (15, 18)]`. **Function Signature:** ```python def merge_blocks(blocks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` # Constraints: - Each block is represented as a tuple of two integers `(start, end)` where ( 1 leq text{start} leq text{end} leq 10^6 ). - ( 1 leq text{len}(blocks) leq 10^4 ). # Hint: - Sort the list of blocks by their starting points first, then merge the blocks by iterating through the sorted list. # Notes: - Ensure the function runs efficiently for large inputs. - The output list of merged blocks should be sorted by their start values.","solution":"from typing import List, Tuple def merge_blocks(blocks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: # Sort the blocks by their starting points blocks.sort(key=lambda x: x[0]) merged_blocks = [] for block in blocks: if not merged_blocks or merged_blocks[-1][1] < block[0] - 1: merged_blocks.append(block) else: merged_blocks[-1] = (merged_blocks[-1][0], max(merged_blocks[-1][1], block[1])) return merged_blocks"},{"question":"In this exercise, you will work with the `math` module in Python to create a function that calculates the area of a polygon. You will be provided with a partial implementation of the function; your task is to complete it using the concepts of geometry and the `math` module\'s capabilities. You\'ll primarily use the functions `math.degrees()`, `math.radians()`, `math.sin()`, and `math.cos()` from the `math` library. # Function Specification: - **Function Name:** `calculate_polygon_area` - **Parameters:** - `n_sides` (int): The number of sides of the polygon. - `side_length` (float): The length of each side of the polygon. # Detailed Instructions: 1. **Check** if the number of sides is valid (greater than 2). If not, return 0. 2. Use `math.radians()` and `math.degrees()` to convert between radians and degrees where necessary. 3. **Calculate** the apothem (the distance from the center to the midpoint of a side) using the formula: [ text{Apothem} = frac{text{side_length}}{2 times tan(frac{pi}{n_sides})} ] 4. **Calculate** the area using the formula: [ text{Area} = frac{1}{2} times n_sides times text{side_length} times text{Apothem} ] # Example Call: ```python calculate_polygon_area(5, 10) ``` # Expected Output: The function should return the area of the polygon as a float. For the example call above, the output should be approximately: ``` 172.047 ``` # Requirements: Use only the specified `math` functions to implement this feature. Do not use any additional math functions.","solution":"import math def calculate_polygon_area(n_sides, side_length): Calculate the area of a regular polygon. Parameters: n_sides (int): The number of sides of the polygon. side_length (float): The length of each side of the polygon. Returns: float: The area of the polygon. if n_sides < 3: return 0 apothem = side_length / (2 * math.tan(math.pi / n_sides)) area = (1 / 2) * n_sides * side_length * apothem return area"},{"question":"**Problem:** Implement a function called `calculate_running_sum` in Python that computes the running sum of an input integer array, but skips over specified indices. # Function Signature: ```python def calculate_running_sum(nums, skipped_indices=list()): Calculate the running sum of an integer array while skipping specified indices. Parameters: nums (list of int): Input list of integers. skipped_indices (list of int, optional): List of indices to be skipped during the running sum calculation. Returns: list of int: The running sum array where specified indices are skipped. ``` # Instructions: 1. **Input:** - A list of integers `nums`. - An optional list `skipped_indices` containing indices that should be skipped during the running sum calculation. 2. **Output:** - A list of integers representing the running sum. 3. **Running Sum Calculation**: - Iterate through the input list `nums`. - For each element, if the element\'s index is in `skipped_indices`, leave the running sum unchanged for that index. - Otherwise, add the current element to the running sum of the previous elements. 4. **Constraints**: - Assume all indices in `skipped_indices` are valid and within the range of `nums`. Here is an example call to `calculate_running_sum`: ```python nums = [1, 2, 3, 4, 5] skipped_indices = [1, 3] calculate_running_sum(nums, skipped_indices) # Expected output: [1, 1, 4, 4, 9] ```","solution":"def calculate_running_sum(nums, skipped_indices=list()): Calculate the running sum of an integer array while skipping specified indices. Parameters: nums (list of int): Input list of integers. skipped_indices (list of int, optional): List of indices to be skipped during the running sum calculation. Returns: list of int: The running sum array where specified indices are skipped. running_sum = 0 result = [] for i, num in enumerate(nums): if i in skipped_indices: result.append(running_sum) else: running_sum += num result.append(running_sum) return result"},{"question":"A well-known data structure problem involves sorting a nearly sorted (or K-sorted) array. An array is said to be K-sorted if every element is at most K positions away from its target position in a fully sorted array. Your task is to write a Python function that takes a K-sorted array and an integer K, and then sorts it in ascending order. This function should efficiently handle the sorting process, leveraging a minimum heap (priority queue) to achieve an optimal runtime. # Function Signature ```python def k_sorted_array_sort(arr, k): \'\'\' Sorts a K-sorted array in ascending order. Parameters: arr (list): A K-sorted list of integers. k (int): An integer representing how far each element is from its sorted position. Returns: sorted_arr (list): The sorted list. \'\'\' pass ``` # Input - `arr`: A list of integers representing the K-sorted array. - `k`: An integer indicating the maximum distance any element is from its target position. # Output - A list of integers representing the sorted array. # Example ```python arr = [3, 2, 1, 5, 4, 7, 6, 5] k = 2 sorted_arr = k_sorted_array_sort(arr, k) # Output: [1, 2, 3, 4, 5, 5, 6, 7] ``` # Note To solve the problem efficiently: 1. Use a heap to maintain a sliding window of K+1 elements. 2. Pop the smallest element from the heap and append it to your result list. 3. Continue this process until the entire array is sorted. # Libraries For this task, you may use the `heapq` library which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.","solution":"import heapq def k_sorted_array_sort(arr, k): Sorts a K-sorted array in ascending order. Parameters: arr (list): A K-sorted list of integers. k (int): An integer representing how far each element is from its sorted position. Returns: sorted_arr (list): The sorted list. min_heap = [] sorted_arr = [] # Initialize the heap with the first k+1 elements for num in arr[:k+1]: heapq.heappush(min_heap, num) # Process the remaining elements and maintain the heap for num in arr[k+1:]: sorted_arr.append(heapq.heappop(min_heap)) heapq.heappush(min_heap, num) # Append remaining elements in heap to result while min_heap: sorted_arr.append(heapq.heappop(min_heap)) return sorted_arr # Example usage: # arr = [3, 2, 1, 5, 4, 7, 6, 5] # k = 2 # sorted_arr = k_sorted_array_sort(arr, k) # Output: [1, 2, 3, 4, 5, 5, 6, 7] # print(sorted_arr)"},{"question":"Given a list of integers, write a function to find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. The function should output an integer representing the maximum subarray sum. You should write self-contained code starting with: ``` def task_func(arr): ```","solution":"def task_func(arr): Returns the largest sum of a contiguous subarray within a given input array. if not arr: # If the list is empty, return 0 return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are asked to implement a simplified version of a scheduling algorithm to solve the \\"Job Scheduling with Deadlines and Profits\\" problem, where each job has a deadline and profit, and the goal is to maximize the total profit by scheduling as many jobs as possible within their deadlines. # Problem Statement: You need to complete the function `job_scheduling` which takes a list of jobs, where each job is represented as a tuple with three elements: `(job_id, deadline, profit)`. Your function should return a tuple containing two elements: 1. A list of scheduled job IDs in the order they should be executed. 2. The maximum profit obtainable by scheduling these jobs. # Function Signature: ```python def job_scheduling(jobs): Schedule jobs to maximize profit within given deadlines. Parameters: - jobs: List of tuples, where each tuple contains (job_id, deadline, profit). Returns: Tuple: A list of scheduled job IDs and the maximum profit. ``` # Parameters: 1. **jobs**: A list of tuples where each tuple consists of three elements: - **job_id**: An integer representing the job identifier. - **deadline**: An integer representing the job\'s deadline by which it must be completed. - **profit**: An integer representing the profit earned by completing the job. # Constraints 1. All job deadlines are positive integers. 2. Each job takes exactly one unit of time. 3. If two jobs have the same profit, they are scheduled in the order they appear in the input list. 4. The length of the job list is between `1` and `10^4`. # Objective The function\'s goal is to schedule jobs in order to maximize the total profit while respecting each job\'s deadline. The output should be a list of job IDs in the order they should be executed and the total maximum profit. # Example ```python jobs = [(1, 4, 20), (2, 1, 10), (3, 1, 40), (4, 1, 30)] scheduled_jobs, max_profit = job_scheduling(jobs) print(scheduled_jobs) # Output could be: [3, 1] print(max_profit) # Output: 60 ```","solution":"def job_scheduling(jobs): Schedule jobs to maximize profit within given deadlines. Parameters: - jobs: List of tuples, where each tuple contains (job_id, deadline, profit). Returns: Tuple: A list of scheduled job IDs and the maximum profit. # Sort jobs based on profit in descending order jobs.sort(key=lambda x: x[2], reverse=True) # Find the maximum deadline to give an idea of the timeframe we are dealing with max_deadline = max(job[1] for job in jobs) # Initialize a list to keep track of free time slots schedule = [-1] * (max_deadline + 1) total_profit = 0 job_sequence = [] # Iterate through each job to place them in the schedule for job in jobs: job_id, deadline, profit = job # Try to find a free slot for this job for d in range(deadline, 0, -1): if schedule[d] == -1: schedule[d] = job_id total_profit += profit job_sequence.append(job_id) break return job_sequence, total_profit"},{"question":"Implement a function to calculate the frequency of each word in a given text file and save these frequencies to another file in a sorted order by word frequencies in descending order. The function takes the input file path, reads the file\'s content, counts the frequency of each word, and writes the sorted word frequencies to a new file. If the input file does not exist, the function should raise a FileNotFoundError. The function should output with the path of the output file. You should write self-contained code starting with: ``` import os from collections import Counter def task_func(input_file_path, output_file_path): ```","solution":"import os from collections import Counter def task_func(input_file_path, output_file_path): Calculates the frequency of each word in the given text file and saves the frequencies to another file sorted by word frequencies in descending order. The function returns the path of the output file. :param input_file_path: Path to the input text file. :param output_file_path: Path to the output file where frequencies will be saved. :return: Path of the output file. if not os.path.exists(input_file_path): raise FileNotFoundError(\\"Input file does not exist\\") with open(input_file_path, \'r\') as file: text = file.read() # Calculate word frequencies words = text.split() word_counts = Counter(words) # Sort by frequency in descending order sorted_word_counts = sorted(word_counts.items(), key=lambda item: item[1], reverse=True) # Write to output file with open(output_file_path, \'w\') as file: for word, count in sorted_word_counts: file.write(f\\"{word}: {count}n\\") return output_file_path"},{"question":"You are provided with a JSON file that contains product sales data for an e-commerce store over several months. Your task is to write a function `plot_sales_trend(filename, product_id)` that constructs a pandas DataFrame and utilizes its functionalities to visualize the monthly sales trend of a specified product. The JSON file includes the following structure: ```json [ { \\"ProductID\\": \\"A123\\", \\"Date\\": \\"2023-01-15\\", \\"Units Sold\\": 5, \\"Revenue\\": 100.0 }, { \\"ProductID\\": \\"B456\\", \\"Date\\": \\"2023-01-15\\", \\"Units Sold\\": 2, \\"Revenue\\": 50.0 }, ... ] ``` Where each entry represents sales data for a specific product on a given date. Steps your function should follow: 1. **Read the data:** Use pandas\' `read_json` method to read the JSON file into a DataFrame. 2. **Filter the data by product ID:** Filter the rows where `ProductID` matches the provided `product_id`. 3. **Resample the data by month:** Convert the \'Date\' column to datetime format, and resample the data by month to calculate the total \'Units Sold\' and \'Revenue\' per month. 4. **Plot the data:** Use matplotlib to plot two subplots: - The first subplot should show the total \'Units Sold\' by month. - The second subplot should show the total \'Revenue\' by month. Requirements: - Use the `pandas` library to handle the DataFrame operations. - Use the `matplotlib` library for plotting. # Function Signature ```python def plot_sales_trend(filename: str, product_id: str) -> None: pass ``` # Example Usage ```python plot_sales_trend(\'sales_data.json\', \'A123\') ``` # Note - Ensure the plots are appropriately labeled and plotted. - Make sure to handle any missing data gracefully.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_trend(filename: str, product_id: str) -> None: Plots the sales trend for a specified product ID from a JSON file containing sales data. Args: filename (str): The name of the JSON file containing the sales data. product_id (str): The product ID for which sales trends need to be plotted. Returns: None # Read the JSON file into a DataFrame df = pd.read_json(filename) # Filter the DataFrame for the specified product ID df_product = df[df[\'ProductID\'] == product_id] # Convert the \'Date\' column to datetime format df_product[\'Date\'] = pd.to_datetime(df_product[\'Date\']) # Resample the data by month, summing the \'Units Sold\' and \'Revenue\' fields df_product.set_index(\'Date\', inplace=True) df_monthly = df_product.resample(\'M\').sum() # Plot the data fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 8)) # Plotting \'Units Sold\' axes[0].plot(df_monthly.index, df_monthly[\'Units Sold\'], marker=\'o\') axes[0].set_title(\'Monthly Units Sold for Product \' + product_id) axes[0].set_xlabel(\'Month\') axes[0].set_ylabel(\'Units Sold\') # Plotting \'Revenue\' axes[1].plot(df_monthly.index, df_monthly[\'Revenue\'], marker=\'o\') axes[1].set_title(\'Monthly Revenue for Product \' + product_id) axes[1].set_xlabel(\'Month\') axes[1].set_ylabel(\'Revenue\') # Adjust layout plt.tight_layout() plt.show()"},{"question":"Write a Python function named `running_mean` that computes the running mean of a 1-dimensional input array with a specified window size. The running mean is defined as the mean of the elements within a sliding window that moves across the array. The function should utilize the `numpy` library to perform the calculations. **Function Signature:** ```python def running_mean(arr: np.array, window_size: int) -> np.array: pass ``` **Parameters:** - `arr` (np.array): A 1-dimensional NumPy array of numerical values. - `window_size` (int): The size of the sliding window to compute the mean. **Returns:** - np.array: A 1-dimensional NumPy array containing the running means. **Example:** ```python import numpy as np arr = np.array([1, 3, 5, 2, 8, 10, 6]) window_size = 3 result = running_mean(arr, window_size) print(result) # Output should be close to [3.0, 3.333, 5.0, 6.666, 8.0] ``` **Constraints:** - The window size will always be a positive integer less than or equal to the length of the input array. - You should use `numpy` operations to efficiently calculate the running means.","solution":"import numpy as np def running_mean(arr: np.array, window_size: int) -> np.array: Computes the running mean of a 1-dimensional input array with a specified window size. Parameters: arr (np.array): A 1-dimensional NumPy array of numerical values. window_size (int): The size of the sliding window to compute the mean. Returns: np.array: A 1-dimensional NumPy array containing the running means. if window_size <= 0: raise ValueError(\\"Window size must be a positive integer.\\") if window_size > len(arr): raise ValueError(\\"Window size must be less than or equal to the length of the input array.\\") cumsum = np.cumsum(np.insert(arr, 0, 0)) running_mean = (cumsum[window_size:] - cumsum[:-window_size]) / window_size return running_mean"},{"question":"Considering the design and complexity structure of the provided sample question, here is another question that aligns with the same style, complexity, and scope: The problem at hand is to implement a function to find the shortest path in a weighted directed graph using Dijkstra\'s algorithm. Specifically, you are asked to write a function called `dijkstra_algorithm` which will take as input: 1. `graph`: A dictionary where the keys are node identifiers and the values are dictionaries representing the neighboring nodes with the edge weights. For example, `graph[node1][node2]` is the weight of the edge from `node1` to `node2`. 2. `start`: The starting node identifier. The function should return the following: - `distances`: A dictionary where the keys are node identifiers and the values are the shortest distances from the start node to that node. - `previous_nodes`: A dictionary where the keys are node identifiers and the values represent the preceding node on the shortest path from the start node to that node. To perform this calculation, make sure to use a priority queue for efficient extraction of the node with the smallest distance. The function signature should be: ```python import heapq def dijkstra_algorithm(graph, start): # Your code here ```","solution":"import heapq def dijkstra_algorithm(graph, start): Implements Dijkstra\'s algorithm to find the shortest path in a weighted directed graph. Parameters: graph (dict): A dictionary representing the graph where keys are node identifiers and values are dictionaries with neighboring nodes as keys and edge weights as values. start (any): The starting node identifier. Returns: distances (dict): A dictionary with node identifiers as keys and the shortest distances from the start node to those nodes as values. previous_nodes (dict): A dictionary with node identifiers as keys and the preceding node on the shortest path from the start node to those nodes as values. # Priority queue for nodes to explore priority_queue = [] heapq.heappush(priority_queue, (0, start)) # Distances dictionary with default value as infinity distances = {node: float(\'inf\') for node in graph} distances[start] = 0 # Previous nodes dictionary to reconstruct paths previous_nodes = {node: None for node in graph} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we popped the node with the current shortest distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return distances, previous_nodes"},{"question":"# Optimal Meeting Point on a Grid You are given a 2D grid where each cell may contain a friend standing at that position. Write a function to find an optimal meeting point for the friends such that the total travel distance of all friends to this meeting point is minimized. The travel distance is defined as the Manhattan Distance, which for two points (x1, y1) and (x2, y2) is given by: [ text{Manhattan Distance} = |x1 - x2| + |y1 - y2| ] # Function Signature ```python def optimal_meeting_point(grid: List[List[int]]) -> Tuple[int, int]: Parameters ---------- :param grid: a 2D list representing the grid where 1 indicates a friend\'s position, 0 indicates empty. :type grid: List[List[int]] Returns ------- :return: Tuple[int, int] The optimal meeting point coordinates (x, y) that minimizes the total travel distance. ``` # Instructions 1. **Parameters**: - `grid` (List[List[int]]): A 2D list of integers where `grid[i][j] = 1` represents a friend at coordinate (i, j) and `grid[i][j] = 0` represents an empty cell. 2. **Returns**: - A tuple `(x, y)` representing the coordinates of the optimal meeting point. # Example ```python grid = [ [1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0] ] optimal_meeting_point(grid) ``` This would return `(0, 2)` as the optimal meeting point which minimizes the total travel distance for all friends on the given grid. # Notes - You may assume that there is at least one friend in the given grid. - Ensure your solution is efficient to handle larger grids with dimensions up to 1000 x 1000.","solution":"from typing import List, Tuple def optimal_meeting_point(grid: List[List[int]]) -> Tuple[int, int]: Returns the optimal meeting point coordinates on a 2D grid for minimizing the total travel distance. Parameters: grid (List[List[int]]): A 2D list where 1 indicates a friend\'s position and 0 indicates empty. Returns: Tuple[int, int]: The optimal meeting point coordinates (x, y). def gather_positions(grid: List[List[int]]) -> Tuple[List[int], List[int]]: rows = [] cols = [] for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: rows.append(i) cols.append(j) return rows, cols def find_median(lst: List[int]) -> int: lst.sort() n = len(lst) mid_index = n // 2 if n % 2 == 0: return lst[mid_index - 1] else: return lst[mid_index] rows, cols = gather_positions(grid) rows.sort() cols.sort() row_median = find_median(rows) col_median = find_median(cols) return (row_median, col_median)"},{"question":"You are charged with developing a weather reporting system that forecasts the temperature for the next week. Your objective is to write a Python function named `generateWeeklyForecast(temperatureRange)`, which generates a random list of temperatures for seven days within a specified range. The function should take a tuple `temperatureRange` as input, representing the lower and upper bounds of the temperature in degrees Celsius. Your function should: 1. Validate that `temperatureRange` is a tuple containing two integers. 2. Use the `random.randint` method to generate seven random temperatures within the specified range. 3. Return a list of these temperatures. 4. Include error handling to manage invalid input types or invalid ranges. Specific guidelines for implementation: - Ensure `temperatureRange` is a tuple of two integers where the first integer is less than or equal to the second integer. - Use the `random.randint(lower, upper)` method to generate each day’s temperature. - If the input validation fails, raise a `ValueError` with an appropriate error message. This function is intended to help you practice input validation, randomness, and list operations in Python.","solution":"import random def generateWeeklyForecast(temperatureRange): Generates a list of predicted temperatures for the next week within the given range. Parameters: temperatureRange (tuple): A tuple containing two integers (lower bound, upper bound). Returns: list: A list of 7 integers representing daily temperatures. Raises: ValueError: If temperatureRange is not a tuple of two integers or if the range is invalid. if not isinstance(temperatureRange, tuple) or len(temperatureRange) != 2: raise ValueError(\\"temperatureRange must be a tuple of two integers.\\") lower, upper = temperatureRange if not (isinstance(lower, int) and isinstance(upper, int)): raise ValueError(\\"temperatureRange must contain two integers.\\") if lower > upper: raise ValueError(\\"The first integer in temperatureRange should be less than or equal to the second integer.\\") return [random.randint(lower, upper) for _ in range(7)]"},{"question":"You are required to implement a function `find_common_anagrams` that identifies common anagrams across two different lists of strings. This function should: 1. Take two lists of strings as inputs. 2. For each string in the first list, determine whether there is an anagram of it present in the second list. 3. Return a list of tuples where each tuple consists of a string from the first list and its matching anagram from the second list. Function signature: ```python def find_common_anagrams(list1: List[str], list2: List[str]) -> List[Tuple[str, str]]: pass ``` Parameters: - `list1` (List[str]): The first list of strings. - `list2` (List[str]): The second list of strings. Returns: - `List[Tuple[str, str]]`: A list of tuples, where each tuple contains a string from the first list and its corresponding anagram from the second list. Constraints: - Strings in the input lists will contain only lowercase alphabetical characters and will be non-empty. - The function should identify unique pairs of anagrams. Example Usage: ```python list1 = [\\"listen\\", \\"evil\\", \\"god\\"] list2 = [\\"silent\\", \\"vile\\", \\"dog\\", \\"live\\"] result = find_common_anagrams(list1, list2) print(result) # Expected output: [(\'listen\', \'silent\'), (\'evil\', \'vile\'), (\'god\', \'dog\')] ``` #","solution":"from typing import List, Tuple def find_common_anagrams(list1: List[str], list2: List[str]) -> List[Tuple[str, str]]: Finds common anagrams between two lists of strings. Parameters: list1 (List[str]): The first list of strings. list2 (List[str]): The second list of strings. Returns: List[Tuple[str, str]]: A list of tuples, where each tuple contains a string from the first list and its corresponding anagram from the second list. def sorted_string(s: str) -> str: return \'\'.join(sorted(s)) # Creating a dictionary to map sorted string to original string for list2 list2_dict = {} for word in list2: sorted_word = sorted_string(word) if sorted_word in list2_dict: list2_dict[sorted_word].append(word) else: list2_dict[sorted_word] = [word] result = [] for word in list1: sorted_word = sorted_string(word) if sorted_word in list2_dict: result.append((word, list2_dict[sorted_word].pop(0))) if not list2_dict[sorted_word]: # Clean up empty list del list2_dict[sorted_word] return result"},{"question":"Write a function `nearest_smaller_numbers(arr)` that takes a list of integers `arr` as input and returns a new list of integers where for each element in the input list, the corresponding element in the output list is the last seen smaller number that appears before the current element in the input list. If there is no such smaller number, the corresponding element in the output list should be -1. The steps your function should follow are: 1. Create an empty stack to keep track of the indexes of elements. 2. Iterate over each element in the input list and for each element: a. While the stack is not empty and the element at the index in the stack is greater than or equal to the current element, pop the stack. b. If the stack is empty, append -1 to the output list (no smaller number found); otherwise, append the element corresponding to the current top index of the stack to the output list. c. Push the current index onto the stack. 3. Return the output list. The structure of your function `nearest_smaller_numbers(arr)` should involve the following tasks: 1. Iterate over the elements of the list while maintaining a stack. 2. Use the stack to keep track of the potential nearest smaller numbers. 3. Construct and return the list of nearest smaller numbers according to the described logic. Example Usage: ```python nearest_smaller_numbers([2, 1, 5, 6, 2, 3]) # Output: [-1, -1, 1, 5, 1, 2] ``` The function should handle edge cases where: 1. The input list is empty. 2. All the elements in the list are the same. 3. The list is strictly increasing or strictly decreasing. **Hint**: Using a stack allows you to efficiently keep track of the nearest smaller numbers seen so far.","solution":"def nearest_smaller_numbers(arr): Returns a list of nearest smaller numbers for each element in arr. The nearest smaller number is defined as the last seen number that is smaller and appears before the current element. If no such number exists, -1 is appended. result = [] stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] >= arr[i]: stack.pop() if not stack: result.append(-1) else: result.append(arr[stack[-1]]) stack.append(i) return result"},{"question":"Design a function to simulate throwing a dice multiple times and calculating the frequency of each face coming up. Implement a function named `dice_simulation` which takes an integer `n`, the number of dice rolls, as input and returns a dictionary where the keys are the faces of the dice (1 through 6) and the values are the counts of how many times each face appeared. Here are the steps required to accomplish this: 1. Import the `random` module. 2. Initialize a dictionary with keys 1 through 6 and values set to 0. This dictionary will store the count for each face. 3. Use a loop to simulate rolling the dice `n` times. In each iteration, generate a random number between 1 and 6 using `random.randint`. 4. Increment the count for the corresponding face in the dictionary. 5. Return the dictionary containing the counts for each face after all rolls are completed. **Example:** ```python # To simulate rolling a dice 10 times result = dice_simulation(10) # Example output might be {1: 2, 2: 1, 3: 2, 4: 1, 5: 2, 6: 2} ``` **Instructions:** 1. Ensure you import the random module at the beginning of your code. 2. Follow the conventions and definitions to create the dictionary based on the dice rolls. ```python def dice_simulation(n): import random count_dict = {i: 0 for i in range(1, 7)} for _ in range(n): face = random.randint(1, 6) count_dict[face] += 1 return count_dict ```","solution":"import random def dice_simulation(n): Simulates rolling a dice `n` times and returns the frequency of each face coming up. Parameters: n (int): Number of times the dice is rolled. Returns: dict: A dictionary with the faces of the dice as keys and their frequency as values. count_dict = {i: 0 for i in range(1, 7)} for _ in range(n): face = random.randint(1, 6) count_dict[face] += 1 return count_dict"},{"question":"You are tasked with implementing a function that simulates a simple traffic light system at an intersection of two roads. The traffic lights should operate in a synchronized cycle with the following states: 1. Both roads have green lights for 60 seconds. 2. Both roads have yellow lights for 5 seconds. 3. Both roads have red lights for 2 seconds. Your function will be named `traffic_light_simulation`. It should simulate the traffic light cycle for a given number of cycles. Use `time.sleep` to represent the duration of each light state. Function Signature ```python def traffic_light_simulation(cycles): Parameters: cycles (int): The number of full traffic light cycles to simulate. Returns: None ``` Instructions 1. Print the light state (\\"Green\\", \\"Yellow\\", or \\"Red\\") for each road at every state change. 2. Use `time.sleep` to wait for the appropriate duration at each state: - Green light: 60 seconds - Yellow light: 5 seconds - Red light: 2 seconds 3. Ensure the states cycle correctly for the specified number of cycles. Example ```python traffic_light_simulation(1) ``` Expected Output: ``` Cycle 1: Road 1: Green Road 2: Green (wait 60 seconds) Road 1: Yellow Road 2: Yellow (wait 5 seconds) Road 1: Red Road 2: Red (wait 2 seconds) ``` Note: The `traffic_light_simulation` function should pause the execution with `time.sleep` to simulate the duration of each state realistically.","solution":"import time def traffic_light_simulation(cycles): Simulate a traffic light system for a given number of cycles. Parameters: cycles (int): The number of full traffic light cycles to simulate. Returns: None for cycle in range(1, cycles + 1): print(f\\"Cycle {cycle}:\\") # Green light phase print(\\"Road 1: Green\\") print(\\"Road 2: Green\\") time.sleep(60) # simulate 60 seconds of green light # Yellow light phase print(\\"Road 1: Yellow\\") print(\\"Road 2: Yellow\\") time.sleep(5) # simulate 5 seconds of yellow light # Red light phase print(\\"Road 1: Red\\") print(\\"Road 2: Red\\") time.sleep(2) # simulate 2 seconds of red light"},{"question":"Create a utility that reads a CSV file containing employee data and generates a summary report. The CSV file includes the following columns: `EmployeeID`, `Name`, `Department`, `Salary`, and `JoiningDate`. The function should: 1. Read the CSV file using Pandas. 2. Calculate the total number of employees. 3. Calculate the average salary of all employees. 4. Find the department with the highest number of employees. 5. Find the name of the employee with the highest salary. The function should output: - int: Total number of employees. - float: Average salary of employees. - str: Department with the most employees. - str: Name of the highest-paid employee. You should write self-contained code starting with: ``` import pandas as pd def generate_report(csv_file_path): ```","solution":"import pandas as pd def generate_report(csv_file_path): # Read the CSV file df = pd.read_csv(csv_file_path) # Calculate the total number of employees total_employees = len(df) # Calculate the average salary of all employees average_salary = df[\'Salary\'].mean() # Find the department with the highest number of employees department_with_most_employees = df[\'Department\'].value_counts().idxmax() # Find the name of the employee with the highest salary highest_paid_employee = df.loc[df[\'Salary\'].idxmax(), \'Name\'] return total_employees, average_salary, department_with_most_employees, highest_paid_employee"},{"question":"You are tasked with implementing a function `group_anagrams` that takes a list of strings and groups the anagrams together. Anagrams are words or phrases made by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should return a list of lists, where each sublist consists of anagrams grouped together. Function Name: `group_anagrams` Parameters: - `words` (list of str): A list of words. Returns: - `list of list of str`: A list of lists where each sublist contains words that are anagrams of each other. Tasks: 1. Use a data structure to keep track of the grouped anagrams. 2. Sort each word to determine the common key for anagrams. 3. Iterate through the list of words to group them accordingly. Example: ```python words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] print(group_anagrams(words)) # Expected output: [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] ``` **Note**: The order of the groups and the order of words within each group does not matter.","solution":"def group_anagrams(words): Groups anagrams together from a list of words. Parameters: words (list of str): A list of words. Returns: list of list of str: A list of lists where each sublist contains words that are anagrams of each other. from collections import defaultdict anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Write a function to parse and extract all the email addresses from a given text file. The function should read the file content, identify email addresses using regular expressions, and return them as a list. The function should output: list: A list of strings, where each string is an email address found in the file. You should write self-contained code starting with: ``` import re def extract_emails(file_path): ```","solution":"import re def extract_emails(file_path): Extracts and returns a list of email addresses from the given text file. Parameters: file_path (str): The path of the file to read from. Returns: list: A list of email addresses found in the file. email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' with open(file_path, \'r\') as file: file_content = file.read() emails = re.findall(email_pattern, file_content) return emails"},{"question":"You are tasked with writing a function named `perform_kmeans_clustering` that uses the sklearn library to cluster a given dataset into a specified number of clusters, and then visualizes the clusters and centroids. This function will load the iris dataset, perform KMeans clustering, and plot the clustered data points and centroids. Your function should follow these steps: 1. **Load the iris dataset** using `sklearn.datasets.load_iris`. This dataset consists of measurements of iris flowers. 2. **Perform KMeans clustering**: - Initialize the KMeans object with the specified number of clusters. - Fit the KMeans object to the iris data. - Predict the cluster for each data point. - Obtain the coordinates of the cluster centers. 3. **Visualize the clusters**: - Use a scatter plot to visualize the data points colored by their cluster. - Mark the cluster centroids on the plot. 4. **Evaluate the model**: - Print out the inertia of the KMeans model. - Print out the number of iterations the KMeans algorithm ran to convergence. You must use the following required libraries in your implementation: - `sklearn.datasets.load_iris` - `sklearn.cluster.KMeans` - `matplotlib.pyplot` **Function Signature:** ```python def perform_kmeans_clustering(n_clusters: int): pass ```","solution":"from sklearn.datasets import load_iris from sklearn.cluster import KMeans import matplotlib.pyplot as plt def perform_kmeans_clustering(n_clusters: int): Perform KMeans clustering on the iris dataset and visualize the clusters. Parameters: n_clusters (int): The number of clusters to form. # Load the iris dataset iris = load_iris() X = iris.data # Perform KMeans clustering kmeans = KMeans(n_clusters=n_clusters) kmeans.fit(X) y_kmeans = kmeans.predict(X) centroids = kmeans.cluster_centers_ # Plot the clustered data points and centroids plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap=\'viridis\') plt.scatter(centroids[:, 0], centroids[:, 1], s=200, c=\'red\', label=\'Centroids\', marker=\'X\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.title(f\'KMeans Clustering with {n_clusters} clusters\') plt.legend() plt.show() # Print out the inertia and number of iterations print(f\'Inertia: {kmeans.inertia_}\') print(f\'Number of iterations: {kmeans.n_iter_}\')"},{"question":"Load a list of strings from a text file, then analyze the frequency of each word across all strings, excluding a given set of stop words. The function should write the frequency analysis to another text file in descending order of frequency. Each line of the output file should contain a word and its corresponding count, separated by a space. If the input file does not exist, an appropriate error should be raised. The function should output: str: The absolute path of the created text file with the word frequency analysis. You should write self-contained code starting with: ```python import os from collections import Counter def task_func(input_file, output_file, stop_words): ```","solution":"import os from collections import Counter def task_func(input_file, output_file, stop_words): Reads a list of strings from a text file, analyzes the frequency of each word across all strings, excluding given stop words, and writes the frequency analysis to another text file in descending order of frequency. Args: - input_file (str): Path to the input text file containing strings. - output_file (str): Path to the output text file where word frequency analysis will be written. - stop_words (set): A set of words to be excluded from the frequency analysis. Returns: - str: The absolute path of the created text file with word frequency analysis. if not os.path.exists(input_file): raise FileNotFoundError(f\\"The input file {input_file} does not exist.\\") with open(input_file, \'r\') as file: text = file.read() words = text.split() words = [word.lower().strip(\'.!?,\\"\'\') for word in words if word.lower() not in stop_words] word_counts = Counter(words) sorted_word_counts = word_counts.most_common() with open(output_file, \'w\') as file: for word, count in sorted_word_counts: file.write(f\\"{word} {count}n\\") return os.path.abspath(output_file)"},{"question":"# Problem: Calculate Matrices Intersection Given two non-empty matrices A and B of size MxN and PxQ, respectively, write a function `matrices_intersection(A, B)` that returns a matrix representing the intersection of A and B. The intersection of two matrices is a new matrix containing only the elements that are present in both matrices (considering each element\'s first occurrence). If there are multiple occurrences of an element in both matrices, only the first common occurrence is considered. To solve this problem, use the numpy library to handle arrays and the sys library to print the version of Python being used. # Function Signature ```python def matrices_intersection(A, B): A: numpy array - Matrix of size MxN. B: numpy array - Matrix of size PxQ. Return: numpy array - Intersection matrix of size KxL containing common elements from both matrices. ``` # Example ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) B = np.array([[5, 7, 9], [0, 2, 8], [3, 4, 6]]) intersection = matrices_intersection(A, B) print(intersection) ``` # Requirements 1. Use `numpy.array` to process the matrices. 2. Use `sys.version` to print the executed Python version.","solution":"import numpy as np def matrices_intersection(A, B): A: numpy array - Matrix of size MxN. B: numpy array - Matrix of size PxQ. Return: numpy array - Intersection matrix containing common elements from both matrices. # Flatten the matrices to find common elements A_flat = A.flatten() B_flat = B.flatten() # Use sets to find the intersection intersection_elements = set(A_flat).intersection(set(B_flat)) # Return the intersection as a sorted list intersection_list = sorted(intersection_elements) # Convert the intersection list back to a numpy array return np.array(intersection_list) # Print the Python version being executed import sys print(\\"Python version:\\", sys.version)"},{"question":"You are tasked with implementing a function named `mergeSortedArrays` that merges two pre-sorted arrays into a single sorted array. Each of the arrays contains integers, and they are sorted in non-decreasing order. Your function `mergeSortedArrays` should accept two parameters: - `array1`: A list of integers representing the first sorted array. - `array2`: A list of integers representing the second sorted array. The goal is to merge these two sorted arrays into a single sorted array efficiently. **Function Signature:** ```python def mergeSortedArrays(array1: list[int], array2: list[int]) -> list[int]: pass ``` **Example Usage:** ```python result = mergeSortedArrays([1, 3, 5], [2, 4, 6]) print(result) # Output should be [1, 2, 3, 4, 5, 6] result = mergeSortedArrays([-1, 0, 1], [-2, 2, 3]) print(result) # Output should be [-2, -1, 0, 1, 2, 3] ``` # Constraints: - The input arrays `array1` and `array2` will not be empty. - The combined length of the arrays will not exceed 10^6. - The inputs are guaranteed to be sorted. You should aim to achieve this in linear time complexity, O(n + m), where n and m are the lengths of `array1` and `array2`, respectively.","solution":"def mergeSortedArrays(array1, array2): Merges two pre-sorted arrays into a single sorted array. Args: array1 (list[int]): The first sorted array. array2 (list[int]): The second sorted array. Returns: list[int]: A new sorted array that contains all elements from array1 and array2. merged_array = [] i, j = 0, 0 # Traverse both arrays and append smaller element from array1 or array2 to merged_array while i < len(array1) and j < len(array2): if array1[i] <= array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Append remaining elements of array1 (if any) while i < len(array1): merged_array.append(array1[i]) i += 1 # Append remaining elements of array2 (if any) while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"**Context:** You are given a dataset in a CSV format that contains historical weather data for various cities. The dataset includes a column named `Timestamp` which records the date and time of each weather observation, and a column named `Temperature` which records the temperature in degrees Celsius. As part of an analysis project, we need to filter the data based on a specified date range and calculate the average temperature for that range. **Objective:** Write a function named `average_temperature` that takes a city name, a start date, and an end date as inputs and returns the average temperature for that city within the specified date range. **Function Specifications:** - **Function Name:** `average_temperature` - **Arguments:** 1. `city` (str): Name of the city to analyze. 2. `start_date` (str): Start date in the format \'YYYY-MM-DD\'. 3. `end_date` (str): End date in the format \'YYYY-MM-DD\'. - **Returns:** - A float representing the average temperature in degrees Celsius over the specified date range. **Details:** 1. Load the data for the specified city from a CSV file (use a dictionary `CITY_WEATHER_DATA` where the key is the city name, and the value is the file path to the CSV file). 2. Convert the `Timestamp` column to datetime using `pandas.to_datetime`. 3. Filter the DataFrame for records where the `Timestamp` is within the specified date range. 4. Calculate the average temperature for the filtered records and return it rounded to two decimal places. Use the `pandas.to_datetime` function to perform the datetime conversion. **Dataset Example:** Assume `CITY_WEATHER_DATA` is a dictionary that maps city names to their corresponding CSV file paths: ```python CITY_WEATHER_DATA = { \'boston\': \'boston_weather.csv\', \'seattle\': \'seattle_weather.csv\', \'san francisco\': \'san_francisco_weather.csv\' } ``` **Example Usage:** ```python avg_temp = average_temperature(\'boston\', \'2022-01-01\', \'2022-01-31\') print(f\\"The average temperature in Boston for January 2022 was: {avg_temp} °C\\") ```","solution":"import pandas as pd CITY_WEATHER_DATA = { \'boston\': \'boston_weather.csv\', \'seattle\': \'seattle_weather.csv\', \'san francisco\': \'san_francisco_weather.csv\' } def average_temperature(city, start_date, end_date): if city not in CITY_WEATHER_DATA: raise ValueError(f\\"No data available for the city: {city}\\") # Load the data from the corresponding CSV file df = pd.read_csv(CITY_WEATHER_DATA[city]) # Convert the \'Timestamp\' column to datetime df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Filter the DataFrame for the given date range mask = (df[\'Timestamp\'] >= start_date) & (df[\'Timestamp\'] <= end_date) filtered_df = df.loc[mask] if filtered_df.empty: raise ValueError(f\\"No weather data available for {city} from {start_date} to {end_date}\\") # Calculate and return the average temperature rounded to two decimal places avg_temp = filtered_df[\'Temperature\'].mean() return round(avg_temp, 2)"},{"question":"You are asked to write a Python function that processes a list of integers and returns a new list where each element is the product of every other element in the original list. The function should take a list of integers as input and return a list of integers where each position `i` contains the product of all elements in the input list except the one at position `i`. **Function Signature:** ```python def product_except_self(nums: list) -> list: ``` # Requirements: 1. The function should handle lists of any length, including a single element (in this case, return `[1]`). 2. Ensure the function does not use division in its solution. 3. Optimize the function to run in linear time and use constant space (excluding the output list). # Example: Given the list: `[1, 2, 3, 4]` The function call: ```python result = product_except_self([1, 2, 3, 4]) ``` The result should be: ```python [24, 12, 8, 6] ``` # Explanation: - For the element at index 0, the product of all other elements is `2 * 3 * 4 = 24`. - For the element at index 1, the product of all other elements is `1 * 3 * 4 = 12`. - For the element at index 2, the product of all other elements is `1 * 2 * 4 = 8`. - For the element at index 3, the product of all other elements is `1 * 2 * 3 = 6`. Use a two-pass approach to fill the result array: one pass to calculate the product of elements before each index, and another to calculate the product of elements after each index.","solution":"def product_except_self(nums: list) -> list: Given a list of integers, returns a new list where each element at index \'i\' is the product of all elements in the original list except the one at \'i\'. length = len(nums) if length == 1: return [1] # Create arrays to store the products left_product = [1] * length right_product = [1] * length result = [1] * length # Fill in the left_product array for i in range(1, length): left_product[i] = left_product[i - 1] * nums[i - 1] # Fill in the right_product array for i in range(length - 2, -1, -1): right_product[i] = right_product[i + 1] * nums[i + 1] # Construct the result array for i in range(length): result[i] = left_product[i] * right_product[i] return result"},{"question":"Create a function to simulate rolling two six-sided dice 1000 times, and plot the resulting sums (ranging from 2 to 12) using a histogram. The function should use `random` to simulate the rolls, `numpy` for data handling, and `matplotlib` to create the histogram. The function should output a tuple: - fig (Figure): The Figure object containing the histogram. - ax (Axes): The Axes object representing the histogram. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import numpy as np import random def roll_dice_histogram(): ```","solution":"import matplotlib.pyplot as plt import numpy as np import random def roll_dice_histogram(): Simulates rolling two six-sided dice 1000 times, and plots the resulting sums using a histogram. Returns: tuple: (fig, ax) where fig is the Figure object, and ax is the Axes object of the histogram. # Simulate rolling the dice 1000 times rolls = [random.randint(1, 6) + random.randint(1, 6) for _ in range(1000)] # Create the histogram plot fig, ax = plt.subplots() ax.hist(rolls, bins=np.arange(1.5, 13.5, 1), edgecolor=\'black\', align=\'mid\') ax.set_xticks(range(2, 13)) ax.set_xlabel(\'Sum of Rolls\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Histogram of Sums of Rolling Two Six-Sided Dice 1000 Times\') # Display the plot plt.show() return fig, ax"},{"question":"# Background: You are developing a file management system for a professional who needs to organize their text documents. They have a folder containing numerous text files and want a function to read all these files, count the frequency of each word, and save the consolidated word count into a new text file. Your task is to implement a Python function called `word_count_consolidator(input_folder, output_file)` that performs this operation. # Specifications: 1. **Function Name**: `word_count_consolidator` 2. **Parameters**: - `input_folder` (type: `str`): The directory path where the text files are stored. - `output_file` (type: `str`): The file path where the consolidated word count should be saved. 3. **Functionality**: - The function should check if the `input_folder` exists. If it does not, the function should print an appropriate error message and exit using `sys.exit()`. - List all files in the `input_folder` using `os.listdir()`. - Read each text file, count the frequency of each word, and store these counts in a dictionary. Words should be treated case-insensitively. - Save the word counts to the `output_file` in alphabetical order. Each line in the output file should be formatted as `word: frequency`. # Requirements: - Use the `os.listdir()` function to list files in the directory. - Use the `sys.exit()` function to handle errors if the `input_folder` does not exist. - Read and write text files using built-in Python functions. # Example: Given a folder structure as follows: ``` input_folder/ document1.txt document2.txt output_file.txt ``` If `document1.txt` contains: ``` Hello world hello ``` And `document2.txt` contains: ``` world of Python python programming Hello ``` After executing `word_count_consolidator(\\"input_folder/\\", \\"output_file.txt\\")`, the `output_file.txt` should contain: ``` hello: 3 of: 1 programming: 1 python: 2 world: 2 ``` # Hints: - Use `re.findall()` from the `re` library to extract words from text files. - Use `os.path.join()` to create full file paths.","solution":"import os import sys import re from collections import defaultdict def word_count_consolidator(input_folder, output_file): if not os.path.exists(input_folder): print(f\\"Error: Directory \'{input_folder}\' does not exist.\\") sys.exit(1) word_count = defaultdict(int) for filename in os.listdir(input_folder): file_path = os.path.join(input_folder, filename) if os.path.isfile(file_path): with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read().lower() words = re.findall(r\'bw+b\', content) for word in words: word_count[word] += 1 with open(output_file, \'w\', encoding=\'utf-8\') as outfile: for word in sorted(word_count): outfile.write(f\\"{word}: {word_count[word]}n\\")"},{"question":"You are required to write a Python function that reads a file, counts the frequency of each word in the file, and writes the result to a new file. The words should be considered case-insensitively, and the output should list words in alphabetical order. Specifically, your function should: 1. Read the content of a text file named `input.txt`. 2. Count the frequency of each word found in the file (case insensitive). 3. Write the word frequencies to a new file named `output.txt`, listing each word and its frequency on a new line in the format `word: frequency`. The words should be sorted in alphabetical order. Your function should be named `word_frequency_counter`. Here is a template for the `word_frequency_counter` function you need to complete: ```python def word_frequency_counter(): # Step 1: Read the content of \'input.txt\' # Step 2: Count the frequency of each word (case insensitive) # Step 3: Write the result to \'output.txt\' in alphabetical order ```","solution":"def word_frequency_counter(): from collections import Counter import re # Step 1: Read the content of \'input.txt\' with open(\'input.txt\', \'r\') as file: text = file.read().lower() # Step 2: Count the frequency of each word (case insensitive) words = re.findall(r\'bw+b\', text) word_counts = Counter(words) # Step 3: Write the result to \'output.txt\' in alphabetical order with open(\'output.txt\', \'w\') as file: for word in sorted(word_counts): file.write(f\\"{word}: {word_counts[word]}n\\")"},{"question":"You are tasked with implementing a basic k-means clustering algorithm using NumPy. The algorithm should be able to partition the given data points into `k` clusters based on their features. Write a function `k_means(data, k, max_iterations=100)` that performs the following steps: 1. Randomly initializes `k` centroids from the data points. 2. Assigns each data point to the nearest centroid. 3. Recalculates the centroids as the mean of all points assigned to them. 4. Repeats steps 2 and 3 for a given number of iterations or until the centroids do not change significantly. For simplicity, you can use the Euclidean distance to measure the closeness of the points to the centroids. **Function Signature:** ```python import numpy as np def k_means(data, k, max_iterations=100): # Your implementation here pass ``` # Example Assume: - `data` is a `numpy` array of shape [num_points, num_features] - `k=3` - `max_iterations=10` Your function should partition the data points into 3 clusters and return: - `centroids`: a numpy array of shape [k, num_features] representing the final centroid positions. - `labels`: a numpy array of shape [num_points] where each value represents the index of the cluster to which the respective data point has been assigned.","solution":"import numpy as np def k_means(data, k, max_iterations=100): # Step 1: Initialize centroids by randomly selecting \'k\' points from the data num_points, num_features = data.shape indices = np.random.choice(num_points, k, replace=False) centroids = data[indices] for _ in range(max_iterations): # Step 2: Assign each point to the nearest centroid distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2)) labels = np.argmin(distances, axis=0) # Step 3: Calculate new centroids based on the mean of assigned points new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)]) # Step 4: Check if centroids have changed; if not, break the loop if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"** Write a function `reverse_words_in_string(s)` that takes a string `s` as input and returns the string with the words reversed. Your solution should aim for O(n) time complexity and should not use any built-in string split or reverse methods. Requirements: 1. You may assume that the input string only contains letters and spaces. 2. Words are separated by a single space. 3. There will be no leading or trailing spaces in the input string. For example: ```python reverse_words_in_string(\\"hello world\\") # returns \\"world hello\\" reverse_words_in_string(\\"python is fun\\") # returns \\"fun is python\\" ``` To help you get started, consider this helper function which reverses a portion of a list: ```python def reverse_list_segment(lst, start, end): while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 ``` You should apply this helper function for reversing the entire string initially, and then for reversing each word in the reversed string to get the final result. Instructions: 1. Convert the input string to a list of characters. 2. Reverse the entire list of characters. 3. Reverse each word in the reversed list. 4. Convert the list of characters back to a string and return it. Ensure your implementation is efficient and follows the guidelines provided. **","solution":"def reverse_list_segment(lst, start, end): while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 def reverse_words_in_string(s): if not s: return \\"\\" # Convert string to list of characters char_list = list(s) # Reverse the entire list of characters reverse_list_segment(char_list, 0, len(char_list) - 1) start = 0 # Reverse each word in the reversed list for end in range(len(char_list) + 1): if end == len(char_list) or char_list[end] == \' \': reverse_list_segment(char_list, start, end - 1) start = end + 1 # Convert list of characters back to a string return \'\'.join(char_list)"},{"question":"You are tasked to write a Python function named `max_product_subarray()` that takes a list of integers `nums` as input and returns the maximum product of a contiguous subarray within the list. To achieve this, you need to consider the possibility of negative numbers affecting the product, and therefore keep track of the maximum and minimum products at each step. **Function Signature:** ```python def max_product_subarray(nums: list) -> int: ``` # Input - `nums` (list): A list of integers with a length of at least one. # Output - Returns an integer representing the maximum product of a contiguous subarray in the input list. # Constraints - The length of the list is between 1 and 10^4. - The elements in the list are between -10 and 10, inclusive. # Example ```python nums = [2, 3, -2, 4] result = max_product_subarray(nums) print(result) ``` Expected Output: ```python 6 ``` # Explanation: - The contiguous subarray `[2, 3]` has the largest product, which is `6`. # Additional Example ```python nums = [-2, 0, -1] result = max_product_subarray(nums) print(result) ``` Expected Output: ```python 0 ``` # Explanation: - The contiguous subarrays are `[-2], [0], [-1]`, and the maximum product among them is `0`. Use the provided API documentation to understand how Python handles list manipulations and relevant operations.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray in the input list of integers. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Implement a function called `water_flow_simulation` that simulates the flow of water in a given 2-dimensional topographic grid and calculates the resulting height of water at each point after rainfall. The function takes the following inputs: 1. `terrain`: A 2D list where each element represents the height of the terrain at that point. 2. `rainfall`: A positive integer representing the amount of rainfall (in units) that falls uniformly across the entire grid. The function should perform the following steps: 1. For each cell in the grid, add the rainfall amount to the terrain height. 2. Simulate the water flow based on the difference in height between adjacent cells. Water flows from a cell to each of its lower adjacent cells (up, down, left, right) until no more water can flow. 3. Return a 2D list representing the final height of water at each point in the grid after the water flow has stabilized. Assume water will only flow to lower adjacent cells and that water will distribute evenly if it can spread over more than one adjacent lower cell. # Function Signature ```python def water_flow_simulation(terrain, rainfall): pass ``` # Example Usage ```python terrain = [ [1, 2, 2], [3, 4, 2], [2, 1, 1] ] rainfall = 2 final_heights = water_flow_simulation(terrain, rainfall) print(final_heights) ``` # Requirements - The `terrain` input should be a well-defined 2D list with positive integer values. - The function should correctly simulate the water flow and update the height of each cell appropriately. - The function must handle edge cases, such as terrain with no lower adjacent cells to flow into.","solution":"def water_flow_simulation(terrain, rainfall): rows = len(terrain) cols = len(terrain[0]) water_heights = [[terrain[row][col] + rainfall for col in range(cols)] for row in range(rows)] def flow_water(r, c): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(r, c)] visited = set(stack) while stack: r, c = stack.pop() current_height = water_heights[r][c] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited: if water_heights[nr][nc] < current_height: diff = current_height - terrain[r][c] - rainfall flow_amount = min(diff, terrain[r][c] + rainfall - terrain[nr][nc]) water_heights[r][c] -= flow_amount water_heights[nr][nc] += flow_amount visited.add((nr, nc)) stack.append((nr, nc)) for r in range(rows): for c in range(cols): flow_water(r, c) return water_heights"},{"question":"Write a function named `TemperatureStatistics` that takes a list of integers representing daily temperatures and an integer `k`, representing a specific window size. The function should return a list of tuples, where each tuple contains three values: the minimum temperature, maximum temperature, and average temperature (rounded to two decimal places) for each window of size `k`. If the length of the list is less than `k`, the function should terminate using `sys.exit` with an appropriate error message. The function should effectively handle edge cases and ensure compliance with the requirements. Ensure to use the `sys.exit` library API as per the following documentation: **Library API Documentation:** - `sys.exit`: `sys.exit = exit(status=None, /)`: Exit the interpreter by raising SystemExit(status). If the status is omitted or None, it defaults to zero (i.e., success). If the status is an integer, it will be used as the system exit status. If it is another kind of object, it will be printed and the system exit status will be one (i.e., failure). **Function Signature:** ```python def TemperatureStatistics(temperatures: list, k: int) -> list: pass ``` **Example:** ```python print(TemperatureStatistics([30, 32, 35, 36, 28, 40, 42, 33], 3)) # Example output: [(30, 35, 32.33), (32, 36, 34.33), (28, 36, 33.0), (28, 40, 34.67), (28, 42, 36.67), (33, 42, 38.33)] print(TemperatureStatistics([25, 27, 26], 4)) # Should exit with error message: \'The length of temperatures list is less than the window size.\' ```","solution":"import sys def TemperatureStatistics(temperatures, k): Returns a list of tuples containing minimum temperature, maximum temperature, and average temperature for each window of size k from the input temperatures list. Parameters: temperatures (list): A list of integers representing daily temperatures. k (int): Size of the window to compute the statistics. Returns: list: A list of tuples where each tuple contains three values: (minimum temperature, maximum temperature, average temperature rounded to two decimal places). If the length of the list is less than `k`, the function terminates using sys.exit with an appropriate error message. if len(temperatures) < k: sys.exit(\'The length of temperatures list is less than the window size.\') result = [] for i in range(len(temperatures) - k + 1): window = temperatures[i:i + k] min_temp = min(window) max_temp = max(window) avg_temp = round(sum(window) / k, 2) result.append((min_temp, max_temp, avg_temp)) return result"},{"question":"# Fibonacci Sequence Generator with Memos Write a function `fibonacci` that returns the Nth number in the Fibonacci sequence, using memoization to optimize its performance. Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Your implementation should efficiently calculate large values of N by storing previously computed values. Function Signature: ```python def fibonacci(n, memo={}): ``` Parameters: - `n`: An integer N specifying the position in the Fibonacci sequence (N >= 0). - `memo`: A dictionary used to store computed Fibonacci numbers to avoid redundant calculations. Returns: - An integer representing the Nth Fibonacci number. # Requirements: 1. **Use memoization**: Store already calculated Fibonacci numbers in a dictionary to avoid recomputation. 2. **Ensure the function can handle large inputs efficiently.** # Example: Given input: ```python n = 10 ``` Calling `fibonacci(n)` should return 55 because the 10th number in the Fibonacci sequence is 55. # Objective: Implement the `fibonacci` function to understand how recursion combined with memoization can significantly improve the performance when dealing with problems that have overlapping subproblems.","solution":"def fibonacci(n, memo={}): Returns the Nth number in the Fibonacci sequence using memoization. Parameters: n (int): The position in the Fibonacci sequence (N >= 0). memo (dict): A dictionary to store previously computed Fibonacci numbers. Returns: int: The Nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function named `find_most_frequent_words(file_path, n)` that takes two arguments: - `file_path` (a string): The path to the text file to be processed. - `n` (an integer): The number of most frequent words to return. The function should perform the following tasks: 1. Open and read the specified text file. 2. Use regular expressions to split the text into individual words. 3. Count the frequency of each word in the text, disregarding case (i.e., \'Word\' and \'word\' should be counted as the same word). 4. Return a list of tuples containing the `n` most frequent words and their frequencies, sorted in descending order of frequency. 5. If there are multiple words with the same frequency, sort them lexicographically in ascending order. Handle the following edge cases: - The specified `file_path` does not exist. - The specified `n` is greater than the number of unique words in the text. - The file is empty or contains non-standard text encoding. Make sure to import any necessary libraries within your function.","solution":"import os import re from collections import Counter def find_most_frequent_words(file_path, n): Returns the n most frequent words and their frequencies from a given text file. :param file_path: Path to the text file. :param n: Number of most frequent words to return. :return: A list of tuples containing the n most frequent words and their frequencies. if not os.path.isfile(file_path): raise FileNotFoundError(f\\"The file at {file_path} does not exist.\\") try: with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() except Exception as e: raise e words = re.findall(r\'bw+b\', text.lower()) word_counts = Counter(words) most_common_words = word_counts.most_common() most_common_words.sort(key=lambda x: (-x[1], x[0])) return most_common_words[:n]"},{"question":"Your task is to write a function called `find_anagrams` that identifies all the anagrams of a given word within a list of words. An anagram is formed by rearranging the letters of a word to produce a new word, using all the original letters exactly once. Implement the function with the following signature: ```python def find_anagrams(word: str, words: list) -> list: ``` - **Parameters**: - `word` (str): The reference word to find anagrams of. - `words` (list): A list of words (str) to check for being anagrams of the reference word. - **Returns**: - `list`: Return a list of words from the input list that are anagrams of the reference word. The function should consider case sensitivity, where \'Listen\' is not an anagram of \'Silent\'. Your solution should be as efficient as possible in order to handle longer lists and larger words effectively.","solution":"def find_anagrams(word: str, words: list) -> list: Identifies all anagrams of a given word within a list of words. anagrams = [] sorted_word = sorted(word) for candidate in words: if sorted(candidate) == sorted_word: anagrams.append(candidate) return anagrams"},{"question":"You are required to write a function `filter_and_summarize_sales(files, month)` that takes a list of CSV file names and a month (as a string) as input, and performs the following tasks using the `pandas` library: 1. Reads each CSV file from the specified directory `data/sales/`. 2. Combines all the data from these files into a single DataFrame. 3. Filters the rows where the \\"Month\\" column matches the given month (case-insensitive). 4. Groups the filtered data by the \\"Product\\" column and calculates the total \\"Quantity Sold\\" for each product. 5. Writes the resulting summary DataFrame to a new CSV file named `sales_summary_<month>.csv` in the `data/sales/` directory, where `<month>` is replaced by the given month in lowercase. Ensure that you use the `pandas.read_csv` function to read the CSV files and the `pandas.concat` function to concatenate the DataFrames. Example Usage: Assume we have three CSV files: - `sales_q1.csv` with: ``` Date,Product,Quantity Sold,Month 2023-01-05,Widget A,10,January 2023-02-14,Widget B,5,February 2023-03-03,Widget A,7,March ``` - `sales_q2.csv` with: ``` Date,Product,Quantity Sold,Month 2023-04-10,Widget B,8,April 2023-05-21,Widget C,6,May 2023-06-30,Widget A,12,June ``` - `sales_q3.csv` with: ``` Date,Product,Quantity Sold,Month 2023-07-07,Widget B,9,July 2023-08-19,Widget C,4,August 2023-09-02,Widget A,14,September ``` Calling `filter_and_summarize_sales([\'sales_q1.csv\', \'sales_q2.csv\', \'sales_q3.csv\'], \'March\')` will read the files, concatenate them, filter the rows where the \\"Month\\" column is \\"March\\", group the data by the \\"Product\\" column, and calculate the total \\"Quantity Sold\\" for each product. The result will then be saved in a CSV file named `sales_summary_march.csv`. The resulting `sales_summary_march.csv` file content would be: ``` Product,Quantity Sold Widget A,7 ``` Constraints: - You must use the `pandas.read_csv` and `pandas.concat` functions as described. - Assume the input files have a consistent structure with columns [\\"Date\\", \\"Product\\", \\"Quantity Sold\\", \\"Month\\"].","solution":"import pandas as pd import os def filter_and_summarize_sales(files, month): Reads multiple CSV files, filters data by the given month and summarizes sales data. Parameters: files (list of str): List of CSV file names to read. month (str): The month to filter by. Returns: None # Directory containing the sales data data_dir = \'data/sales/\' # Initialize an empty list to store DataFrames dataframes = [] # Read each CSV file and append the DataFrame to the list for file in files: file_path = os.path.join(data_dir, file) df = pd.read_csv(file_path) dataframes.append(df) # Concatenate all the DataFrames combined_df = pd.concat(dataframes, ignore_index=True) # Convert the \\"Month\\" column to lowercase for case-insensitive comparison combined_df[\'Month\'] = combined_df[\'Month\'].str.lower() # Filter rows where the \\"Month\\" column matches the given month (case-insensitive) month_lower = month.lower() filtered_df = combined_df[combined_df[\'Month\'] == month_lower] # Group by \\"Product\\" and calculate the total \\"Quantity Sold\\" summary_df = filtered_df.groupby(\'Product\')[\'Quantity Sold\'].sum().reset_index() # Construct the output file name output_file_name = f\'sales_summary_{month_lower}.csv\' output_file_path = os.path.join(data_dir, output_file_name) # Write the resulting DataFrame to a new CSV file summary_df.to_csv(output_file_path, index=False)"},{"question":"Given an integer `n`, write a function to generate a square matrix filled with elements from 1 to n² in spiral order. The function signature should be: ``` def generate_spiral_matrix(n: int) -> List[List[int]]: ``` The function should return a two-dimensional list (matrix) containing the spiral order elements. For example: ``` generate_spiral_matrix(3) ``` should return ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` The function should start with: ``` def generate_spiral_matrix(n: int) -> List[List[int]]: ```","solution":"from typing import List def generate_spiral_matrix(n: int) -> List[List[int]]: Generates a n x n square matrix filled with elements from 1 to n² in spiral order. matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n-1, 0, n-1 num = 1 while left <= right and top <= bottom: # traverse from left to right at the top for j in range(left, right + 1): matrix[top][j] = num num += 1 top += 1 # traverse from top to bottom at the right for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # traverse from right to left at the bottom for j in range(right, left - 1, -1): matrix[bottom][j] = num num += 1 bottom -= 1 # traverse from bottom to top at the left for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are tasked with creating a function `vector_operations` that performs various operations on two input lists representing vectors. This problem aims to educate on the use of Python\'s list comprehension, zip function, and basic mathematical operations. Specifically, you need to: 1. Compute the element-wise sum of the two vectors. 2. Compute the element-wise product of the two vectors. 3. Calculate the dot product of the two vectors. # Function Details - **Function Name**: `vector_operations` - **Parameters**: - `vector1` (list of integers/floats): The first input vector. - `vector2` (list of integers/floats): The second input vector. - **Return**: A tuple containing three elements: - The element-wise sum of the two vectors (list of integers/floats). - The element-wise product of the two vectors (list of integers/floats). - The dot product of the two vectors (a single integer/float). # Instructions 1. Define the function `vector_operations(vector1, vector2)` that performs the required operations. 2. Ensure that the two input vectors are of the same length before proceeding with the operations. 3. Use list comprehension and the zip function to compute the element-wise sum and product of the vectors. 4. Compute the dot product as the sum of the element-wise products. # Example ```python vector1 = [1, 2, 3] vector2 = [4, 5, 6] result = vector_operations(vector1, vector2) print(result) # Output: ([5, 7, 9], [4, 10, 18], 32) ``` In this example: 1. The element-wise sum is [1+4, 2+5, 3+6] = [5, 7, 9]. 2. The element-wise product is [1*4, 2*5, 3*6] = [4, 10, 18]. 3. The dot product is (1*4) + (2*5) + (3*6) = 32. # Libraries to Use: None, only standard Python functions and list comprehensions.","solution":"def vector_operations(vector1, vector2): Performs element-wise sum, element-wise product, and dot product on two vectors. :param vector1: List of integers/floats. :param vector2: List of integers/floats. :return: A tuple of three elements: - List of element-wise sum. - List of element-wise product. - Dot product (a single integer/float). if len(vector1) != len(vector2): raise ValueError(\\"Both vectors must be of the same length.\\") elementwise_sum = [x + y for x, y in zip(vector1, vector2)] elementwise_product = [x * y for x, y in zip(vector1, vector2)] dot_product = sum(x * y for x, y in zip(vector1, vector2)) return elementwise_sum, elementwise_product, dot_product"},{"question":"You are required to write a function named `get_all_subclasses` that, given a class object `cls`, returns a set of all subclasses of `cls` in its inheritance hierarchy. This can include direct subclasses, indirect subclasses, etc. To accomplish this, you should recursively traverse down the inheritance hierarchy of the given class. Here is the template for your function: ```python def get_all_subclasses(cls): # Your implementation here pass ``` **Example:** ```python class A: pass class B(A): pass class C(A): pass class D(B): pass # Calling get_all_subclasses should yield: # get_all_subclasses(A) => {B, C, D} # get_all_subclasses(B) => {D} # get_all_subclasses(C) => set() ``` **Your goal is to complete the function `get_all_subclasses` so that it accurately retrieves all subclasses for a given class, accounting for all levels of inheritance.**","solution":"def get_all_subclasses(cls): Returns a set of all subclasses (direct and indirect) of class `cls`. subclasses = set(cls.__subclasses__()) for subclass in subclasses.copy(): subclasses.update(get_all_subclasses(subclass)) return subclasses"},{"question":"You are required to write a function named `draw_bar_chart` that takes in two parameters: 1. `data`: A dictionary where keys are category names (strings) and values are the corresponding numerical values (integers or floats). 2. `title`: A string that specifies the title to be displayed on top of the bar chart. The function should utilize the Matplotlib library to plot a bar chart with the provided data and title. You must use the functions `matplotlib.pyplot.bar`, `matplotlib.pyplot.title`, and `matplotlib.pyplot.show` from the Matplotlib library to achieve this. Here\'s a detailed breakdown of the function\'s requirements: - Use `matplotlib.pyplot.bar` to create the bar chart where the categories are translated to the x-axis and the corresponding values to the heights of the bars. - Use `matplotlib.pyplot.title` to set the title of the bar chart. - Use `matplotlib.pyplot.show` to display the bar chart. # Example: ```python # Example data data = { \\"Apples\\": 10, \\"Bananas\\": 15, \\"Cherries\\": 7, \\"Dates\\": 3 } title = \\"Fruit Count\\" # Call the function to draw the bar chart draw_bar_chart(data, title) ``` # Expected Output: When you call the `draw_bar_chart` function, a window displaying the bar chart with the given title on top should pop up. The x-axis should represent the categories (\\"Apples\\", \\"Bananas\\", \\"Cherries\\", \\"Dates\\") and the y-axis should represent their numerical values (10, 15, 7, 3). # Guidelines: - Ensure that your function signature is `draw_bar_chart(data: dict, title: str) -> None`. - Use the specified Matplotlib functions according to their documentation to properly display the bar chart and title. - Handle the parameters appropriately to draw the bar chart with the given data and title.","solution":"import matplotlib.pyplot as plt def draw_bar_chart(data: dict, title: str) -> None: Draws a bar chart using the given data and title. Parameters: data (dict): A dictionary where keys are category names (strings) and values are the corresponding numerical values (integers or floats). title (str): The title of the bar chart. # Extracting the keys and values from the data dictionary categories = list(data.keys()) values = list(data.values()) # Plotting the bar chart plt.bar(categories, values) # Adding the title plt.title(title) # Displaying the bar chart plt.show()"},{"question":"You are tasked with creating a function called `arithmetic_sequence_sum` that computes the sum of a given arithmetic sequence. An arithmetic sequence is defined by its first term, common difference, and the number of terms. # Function Signature ```python def arithmetic_sequence_sum(a: int, d: int, n: int) -> int: pass ``` # Requirements 1. Calculate the sum of the first `n` terms of the sequence. 2. The sum of an arithmetic sequence can be calculated using the formula: [ text{Sum} = frac{n}{2} times (2a + (n-1)d) ] # Input - `a`: An integer representing the first term of the sequence. - `d`: An integer representing the common difference between consecutive terms. - `n`: An integer representing the number of terms in the sequence. # Output - Return an integer representing the sum of the first `n` terms of the sequence. # Example ```python a = 1 d = 2 n = 5 print(arithmetic_sequence_sum(a, d, n)) # Output: 25 ``` # Explanation Given `a = 1`, `d = 2`, and `n = 5`, the sequence is: 1, 3, 5, 7, 9. The sum of these terms is ( 1 + 3 + 5 + 7 + 9 = 25 ). Note: Ensure that your function handles both positive and negative values for `a`, `d`, and `n`.","solution":"def arithmetic_sequence_sum(a: int, d: int, n: int) -> int: Calculates the sum of the first n terms of an arithmetic sequence. Parameters: a (int): The first term of the sequence. d (int): The common difference between consecutive terms. n (int): The number of terms in the sequence. Returns: int: The sum of the first n terms. if n <= 0: return 0 # Sum of the first n terms of an arithmetic sequence sum_n_terms = n * (2 * a + (n - 1) * d) // 2 return sum_n_terms"},{"question":"# Objective: You will implement a Python function `manipulate_and_plot_2d_array` that performs two main tasks: 1. Generate a 10x10 2D array of random integers between 0 and 100. 2. Plot a heatmap of the array with a color gradient. # Function Definition ```python def manipulate_and_plot_2d_array(): This function generates a 10x10 2D array of random integers between 0 and 100. It also plots a heatmap of the array using a color gradient. Returns: tuple: A tuple containing the generated 2D array and a dictionary with \'min\', \'max\', and \'mean\' values of the array. Displays: A matplotlib heatmap of the generated 2D array. pass ``` # Requirements: - **Use Numpy**: - `numpy.random.randint` to generate the 2D array of random integers. - `numpy.min` to compute the minimum value of the array. - `numpy.max` to compute the maximum value of the array. - `numpy.mean` to compute the mean value of the array. - **Use Matplotlib**: - `matplotlib.pyplot.imshow` to plot the heatmap. - Include a color bar and appropriate title to the heatmap. # Instructions: 1. **Generate Data**: Generate a 10x10 2D array filled with random integers between 0 and 100. 2. **Compute Statistics**: - Compute the minimum value of the array using `numpy.min`. - Compute the maximum value of the array using `numpy.max`. - Compute the mean value of the array using `numpy.mean`. 3. **Heatmap Plot**: Plot a heatmap of the generated array. 4. **Return Data**: Return the generated 2D array and a dictionary containing the computed \'min\', \'max\', and \'mean\' values of the array. # Example Usage: ```python output_array, stats = manipulate_and_plot_2d_array() print(output_array) # Expected output: A 10x10 numpy array with random integers between 0 and 100 print(stats) # Expected output format: {\'min\': <min_value>, \'max\': <max_value>, \'mean\': <mean_value>} ```","solution":"import numpy as np import matplotlib.pyplot as plt def manipulate_and_plot_2d_array(): This function generates a 10x10 2D array of random integers between 0 and 100. It also plots a heatmap of the array using a color gradient. Returns: tuple: A tuple containing the generated 2D array and a dictionary with \'min\', \'max\', and \'mean\' values of the array. Displays: A matplotlib heatmap of the generated 2D array. # Generate a 10x10 2D array of random integers between 0 and 100 array = np.random.randint(0, 101, (10, 10)) # Compute the minimum, maximum, and mean values of the array min_value = np.min(array) max_value = np.max(array) mean_value = np.mean(array) # Dictionary to hold the statistics stats = { \'min\': min_value, \'max\': max_value, \'mean\': mean_value } # Plotting the heatmap plt.imshow(array, cmap=\'viridis\', interpolation=\'nearest\') plt.colorbar(label=\'Value\') plt.title(\'Heatmap of 10x10 Random Array\') plt.show() return array, stats"},{"question":"You have been tasked with writing a function `find_next_prime()` that helps in identifying the next prime number greater than a given integer. This function will be useful in various applications, such as cryptographic algorithms, where prime numbers play a crucial role. For this task, follow these specific requirements: 1. Create a helper function `is_prime(n)` that returns `True` if `n` is a prime number and `False` otherwise. 2. The `is_prime(n)` function should check for prime status by testing divisibility from 2 up to the square root of `n`. 3. The `find_next_prime(n)` function should take an integer `n` as input and return the smallest prime number greater than `n`. Here\'s a breakdown of the task: - The `is_prime(n)` function should return `False` for any number less than 2. - The `find_next_prime(n)` function should increment `n` by 1 until a prime number is found. - Make sure to use efficient algorithms to check for prime status to handle larger values of `n`. Here is the code snippet to begin with: ```python def is_prime(n): Return True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_next_prime(n): Return the smallest prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate # Example usage n = 14 print(find_next_prime(n)) # Output should be 17 ``` You are required to implement the `find_next_prime(n)` function based on the description above.","solution":"def is_prime(n): Return True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_next_prime(n): Return the smallest prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Transform a given binary tree into its mirror image. Define a function that takes the root of a binary tree and returns the root of the mirrored binary tree. Each node in the input tree contains an integer value and has left and right children. The function should output: TreeNode: The root node of the mirrored binary tree. You should write self-contained code starting with: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root): ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root): if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively apply the same operation to the children mirror_tree(root.left) mirror_tree(root.right) return root"},{"question":"You are tasked with implementing a function that finds the second largest number in a list. The function should handle lists with at least two unique elements. If the list has fewer than two unique elements, the function should raise a `ValueError`. In particular, the function should: 1. Traverse the list to identify the largest and the second largest elements. 2. Make sure that the second largest element is smaller than the largest but larger than all other elements in the list. 3. Raise an appropriate error if there aren\'t enough unique elements to determine a second largest value. Your function should be named `find_second_largest` and adhere to the following signature: ```python def find_second_largest(numbers): Find the second largest number in the list. Parameters: numbers (list): A list of integers. Returns: int: The second largest number in the list. Raises: ValueError: If there are less than two unique numbers in the list. ``` **Example:** ```python numbers = [10, 20, 4, 45, 45, 99, 99, 99] result = find_second_largest(numbers) print(result) # Output should be 45 ``` **Example with Error:** ```python numbers = [99, 99, 99] result = find_second_largest(numbers) # Should raise ValueError: \\"Not enough unique elements to determine the second largest.\\" ``` In this example, the function should return 45 when input is `[10, 20, 4, 45, 45, 99, 99, 99]`, and should raise a `ValueError` when input is `[99, 99, 99]` due to insufficient unique elements.","solution":"def find_second_largest(numbers): Find the second largest number in the list. Parameters: numbers (list): A list of integers. Returns: int: The second largest number in the list. Raises: ValueError: If there are less than two unique numbers in the list. unique_numbers = list(set(numbers)) # Get unique elements if len(unique_numbers) < 2: raise ValueError(\\"Not enough unique elements to determine the second largest.\\") unique_numbers.sort(reverse=True) # Sort in descending order return unique_numbers[1]"},{"question":"# Problem: Simulating a Two-Dimensional Random Walk In this problem, you will implement a function to simulate a two-dimensional random walk. A random walk is a path that consists of a series of random steps in a mathematical space. This type of walk is often used to simulate various natural phenomena such as the movement of molecules in a liquid, stock market fluctuations, and more. # Function Specification - **Function Name**: `random_walk_2d` - **Input**: - `n` (int): Number of steps in the random walk. - `seed` (int, optional): A random seed to ensure reproducibility. - **Output**: - `path` (list of tuples): A list of (x, y) coordinates representing the path of the random walk. # Requirements - Use the Python module `random` to generate random steps. - Ensure that each step is one unit in the direction: up, down, left, or right. - Handle cases where `n` is a non-positive integer by returning an empty list. - Use the provided `seed` argument to set the random seed if it is given. # Example ```python # Example usage: n = 5 seed = 123 path = random_walk_2d(n, seed) # Sample output for path might be: # [(0, 0), (1, 0), (1, -1), (2, -1), (2, -2), (2, -1)] ``` # Implementation Details 1. Initialize the starting position at (0, 0). 2. Use `random.seed(seed)` if the seed is provided. 3. For each of the `n` steps, randomly choose a direction and compute the next position. 4. Append each new position to the path. 5. Return the final path as a list of (x, y) tuples, representing the coordinates at each step. This problem serves to practice the use of random number generation and list manipulation in Python. It tests the ability to simulate a simple stochastic process and handle edge cases accordingly.","solution":"import random def random_walk_2d(n, seed=None): Simulates a 2D random walk. Parameters: - n (int): Number of steps in the random walk - seed (int, optional): A random seed to ensure reproducibility Returns: - path (list of tuples): A list of (x, y) coordinates representing the path of the random walk if n <= 0: return [] if seed is not None: random.seed(seed) x, y = 0, 0 path = [(x, y)] for _ in range(n): step = random.choice([\'up\', \'down\', \'left\', \'right\']) if step == \'up\': y += 1 elif step == \'down\': y -= 1 elif step == \'left\': x -= 1 elif step == \'right\': x += 1 path.append((x, y)) return path"},{"question":"You are given a dictionary where the keys are words and the values are dictionaries. Each value dictionary contains a list of synonyms for the corresponding key word. Your task is to implement a function to find all words that have a synonym relationship directly or indirectly. Two words are related if they have a common synonym or are connected through a chain of synonyms. Write a function `find_synonym_groups` which takes a dictionary of synonyms and returns a list of sets, where each set contains words that are synonymously related. # Function Signature ```python def find_synonym_groups(synonyms: dict) -> list: ``` # Parameters - `synonyms` (dict): A dictionary where keys are words (str) and values are dictionaries containing a list of synonyms (list of str). # Instructions 1. Implement a helper function to perform a depth-first search (DFS) to find all connected components (groups of synonyms). 2. Traverse each word in the dictionary to determine which group it belongs to. 3. Return a list of sets where each set contains all words that are interconnected through synonym relationships. # Example ```python synonyms = { \\"happy\\": {\\"synonyms\\": [\\"joyful\\", \\"elated\\"]}, \\"joyful\\": {\\"synonyms\\": [\\"cheerful\\"]}, \\"cheerful\\": {\\"synonyms\\": []}, \\"sad\\": {\\"synonyms\\": [\\"unhappy\\", \\"sorrowful\\"]}, \\"unhappy\\": {\\"synonyms\\": [\\"miserable\\"]}, \\"miserable\\": {\\"synonyms\\": []}, \\"elated\\": {\\"synonyms\\": [\\"thrilled\\"]}, \\"thrilled\\": {\\"synonyms\\": []}, \\"sorrowful\\": {\\"synonyms\\": []} } print(find_synonym_groups(synonyms)) ``` # Expected Output ``` [{\'happy\', \'joyful\', \'cheerful\', \'elated\', \'thrilled\'}, {\'sad\', \'unhappy\', \'miserable\', \'sorrowful\'}] ``` Ensure that each word appears in only one set in the output list and that there are no duplicate words. The sets can be in any order as long as each group is complete.","solution":"def find_synonym_groups(synonyms: dict) -> list: def dfs(word, visited, group): if word not in visited: visited.add(word) group.add(word) for synonym in synonyms[word][\'synonyms\']: dfs(synonym, visited, group) for key, value in synonyms.items(): if word in value[\'synonyms\']: dfs(key, visited, group) visited = set() groups = [] for word in synonyms: if word not in visited: group = set() dfs(word, visited, group) groups.append(group) return groups"},{"question":"Write a function named `count_unique_values` that takes a list of integers and returns the count of unique integers in the list. The function must efficiently handle large lists and compute the result in a time-efficient manner. You should not use any additional libraries aside from the standard Python libraries. Function signature: `def count_unique_values(lst: List[int]) -> int:` # Requirements: - Use appropriate data structures to ensure efficient counting. - Ensure the function handles edge cases such as empty lists and lists with repeated values. # Example: ```python lst1 = [1, 2, 3, 4, 5] assert count_unique_values(lst1) == 5 lst2 = [1, 2, 2, 3, 3, 3, 4, 5, 5] assert count_unique_values(lst2) == 5 lst3 = [] assert count_unique_values(lst3) == 0 ``` # Explanation: - For `lst1`, all values are unique, so the function should return 5. - For `lst2`, the unique values are {1, 2, 3, 4, 5}, so the function should return 5. - For `lst3`, no values are present, so the function should return 0.","solution":"from typing import List def count_unique_values(lst: List[int]) -> int: Returns the number of unique integers in the list. unique_values = set(lst) return len(unique_values)"},{"question":"You are tasked with implementing a Python function named `calculate_averages` that processes a series of student records, each containing a student name and a list of their grades for different subjects. The function should return a dictionary where each key is a student\'s name, and the value is their average grade rounded to two decimal places. Grades are given as integers between 0 and 100, inclusive. The input to the function will be a list of tuples, with each tuple containing a student\'s name (a string) and their list of grades (a list of integers). # Function Signature ```python def calculate_averages(records: list[tuple[str, list[int]]]) -> dict[str, float]: Calculates the average grades for each student. :param records: A list of tuples containing student names and their grades. :return: A dictionary where each key is a student\'s name and each value is their average grade. ``` # Example Input ```python records = [ (\\"Alice\\", [85, 90, 78]), (\\"Bob\\", [90, 95, 92]), (\\"Charlie\\", [70, 80, 85, 90]) ] ``` # Example Output ```python { \\"Alice\\": 84.33, \\"Bob\\": 92.33, \\"Charlie\\": 81.25 } ``` # Explanation - For each student, compute the average of their grades. - The result is a dictionary where the keys are student names and the values are their average grades rounded to two decimal places. # Detailed Requirements 1. Iterate over each record in the input list. 2. For each student, calculate the average of their grades. 3. Round the average to two decimal places and store it in the result dictionary using the student\'s name as the key. 4. Return the resulting dictionary. # Constraints - The input list is non-empty and will contain valid student records. - Each student record will have a non-empty list of grades. - Grades are integers between 0 and 100, inclusive.","solution":"def calculate_averages(records: list[tuple[str, list[int]]]) -> dict[str, float]: Calculates the average grades for each student based on a list of records. :param records: A list of tuples containing student names and their grades. :return: A dictionary where each key is a student\'s name and each value is their average grade. averages = {} for name, grades in records: average = sum(grades) / len(grades) averages[name] = round(average, 2) return averages"},{"question":"You need to write a function `simulate_robot_vacuum` that simulates the operation of a robot vacuum cleaner navigating a room. The function should take in a single string parameter representing a sequence of commands and determine the final position of the robot vacuum on a 2D grid. The robot starts at position `(0, 0)` on the grid. The commands can be: - `\'U\'` for moving up (increase the y-coordinate by 1), - `\'D\'` for moving down (decrease the y-coordinate by 1), - `\'L\'` for moving left (decrease the x-coordinate by 1), - `\'R\'` for moving right (increase the x-coordinate by 1). The function should return the final position of the robot vacuum as a tuple of two integers. # Example ```python print(simulate_robot_vacuum(\\"URDDL\\")) ``` **Output:** `(1, 0)` In this example: 1. `\'U\'` moves the robot to `(0, 1)` 2. `\'R\'` moves the robot to `(1, 1)` 3. `\'D\'` moves the robot to `(1, 0)` 4. `\'D\'` moves the robot to `(1, -1)` 5. `\'L\'` moves the robot to `(0, -1)` So, the final position is `(0, -1)`. # Function Signature ```python def simulate_robot_vacuum(commands: str) -> Tuple[int, int]: pass ```","solution":"def simulate_robot_vacuum(commands): Simulates the operation of a robot vacuum cleaner navigating a room. Args: - commands (str): A sequence of commands (\'U\', \'D\', \'L\', \'R\'). Returns: - tuple: The final position (x, y) of the robot vacuum. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"You are provided with a function framework that takes a text containing multiple paragraphs and extracts the first paragraph while removing any leading or trailing whitespace from it. The function is expected to return the paragraph as a clean string. You are to implement a function named `extract_first_paragraph` using Python\'s built-in string methods. Function Signature ```python def extract_first_paragraph(text: str) -> str: pass ``` Specifications - The function should take a single argument `text`, which is a string containing multiple paragraphs. - Paragraphs in the text are separated by two newline characters (`nn`). - Your task is to extract the first paragraph from the text and return it as a string, with any leading or trailing whitespace removed. - If the text does not contain any paragraphs, the function should return an empty string. Example ```python text = This is the first paragraph. This is the second paragraph. This is still the second paragraph. This is the third paragraph. extract_first_paragraph(text) ``` Expected output: ```python \\"This is the first paragraph.\\" ```","solution":"def extract_first_paragraph(text: str) -> str: Extracts the first paragraph from the given text and removes any leading or trailing whitespace. Parameters: text (str): The input text containing multiple paragraphs. Returns: str: The first paragraph, with leading or trailing whitespace removed. # Split the text by double newline characters paragraphs = text.split(\\"nn\\") # Return the first paragraph with leading/trailing whitespace removed if paragraphs: return paragraphs[0].strip() return \\"\\""},{"question":"You are given a text file containing a list of students and their respective scores in multiple subjects. Each line in the text file is formatted as follows: ``` student_name,subject1_score,subject2_score,...,subjectN_score ``` Design a function `compute_student_averages` that reads the file, processes the data, and calculates the average score for each student across all subjects. Your function should take the following parameters: - `file_path`: A string representing the path to the text file. The function should perform the following operations: 1. Open and read the file line by line. 2. For each line, extract the student\'s name and their scores as a list of floats. 3. Calculate the average score for the student. 4. Store the student\'s name and their average score in a dictionary. Finally, return the dictionary containing each student\'s name as the key and their average score as the value. Example input file (`students_scores.txt`): ``` John,88,76,92,85 Jane,90,82,87,79 Doe,78,85,88,92 ``` Example usage: ```python averages = compute_student_averages(\'students_scores.txt\') print(averages) # Output: {\'John\': 85.25, \'Jane\': 84.5, \'Doe\': 85.75} ```","solution":"def compute_student_averages(file_path): Reads a file containing students\' scores and calculates the average score for each student. Parameters: file_path (str): The path to the text file containing students\' scores. Returns: dict: A dictionary containing each student\'s name and their average score. averages = {} with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: parts = line.strip().split(\',\') name = parts[0] scores = list(map(float, parts[1:])) avg_score = sum(scores) / len(scores) averages[name] = avg_score return averages"},{"question":"You are given a task to implement a text processing function that identifies the most frequent words in a set of strings, while ignoring a provided set of stopwords. Implement the function `find_most_frequent_words(texts: List[str], stopwords: Set[str], top_n: int) -> List[Tuple[str, int]]` which performs the following steps: 1. Iterate over all the strings in the `texts` list and split each string into individual words. 2. Normalize the words by converting them to lowercase to ensure case insensitivity. 3. Exclude any words found in the `stopwords` set. 4. Count the frequency of each remaining word. 5. Identify the top `n` most frequent words. 6. Return a list of tuples, where each tuple contains a word and its frequency, sorted in descending order of frequency. If two words have the same frequency, they should be sorted alphabetically. The goal is to provide a function useful for tasks such as keyword extraction or common word identification in a collection of documents. You must use Python\'s built-in `collections.Counter` for counting the word frequencies and ensure the solution handles edge cases like empty input and ties in frequency appropriately.","solution":"from typing import List, Set, Tuple from collections import Counter def find_most_frequent_words(texts: List[str], stopwords: Set[str], top_n: int) -> List[Tuple[str, int]]: Identifies the most frequent words in a set of strings, excluding provided stopwords, and returns the top `top_n` most frequent words with their counts. word_counter = Counter() for text in texts: words = text.lower().split() for word in words: if word not in stopwords: word_counter[word] += 1 most_common_words = word_counter.most_common() most_common_words.sort(key=lambda x: (-x[1], x[0])) # Sort by frequency desc, then alphabetically return most_common_words[:top_n]"},{"question":"You are tasked with writing a Python function that reads lines from a text file and prints them in reverse order to the console. Your function should handle the file I/O processes and ensure proper error handling for file operations. Function Name: `print_lines_in_reverse` Your function should: 1. Accept a single parameter: the file path of the text file to be processed. 2. Open the specified file in read mode. 3. Read all lines from the file into a list. 4. Print each line from the list in reverse order, one line at a time. 5. Handle any potential file not found errors and print an appropriate message. 6. Ensure that the file is properly closed after processing, regardless of whether an error occurred. Example input file (`example.txt`): ``` First line of the file. Second line of the file. Third line of the file. ``` Expected output when the function is called with the path to `example.txt`: ``` Third line of the file. Second line of the file. First line of the file. ``` If the file does not exist at the specified path, your function should print: ``` Error: The specified file was not found. ``` Make sure your implementation is efficient and follows best practices for file handling in Python.","solution":"def print_lines_in_reverse(file_path): Reads lines from a text file and prints them in reverse order to the console. Handles file not found error and ensures the file is properly closed after processing. :param file_path: Path to the text file to be processed. try: with open(file_path, \'r\') as file: lines = file.readlines() for line in reversed(lines): print(line.strip()) except FileNotFoundError: print(\\"Error: The specified file was not found.\\")"},{"question":"You are required to write a function named `convert_to_snake_case` that takes in a string containing a phrase written in camelCase and converts it into snake_case. The function should maintain consistent capitalization based on the original camelCase string, and only convert the naming convention. The function should follow these requirements: 1. **Identify Camel Case Patterns**: Use Python\'s `re` library to identify occurrences of camelCase formatting in the input string. 2. **Convert to Snake Case**: Replace the camelCase formatting with snake_case, ensuring all transitions from lower to upper case letters are replaced with an underscore followed by the lower case version of the upper case letter. Your task is to implement the `convert_to_snake_case` function adhering to these requirements and demonstrating the use of `re` library\'s regex capabilities. **Function Signature:** ```python def convert_to_snake_case(camel_case_str: str) -> str: ``` **Input:** - `camel_case_str` (str): A string representing a phrase in camelCase. **Output:** - (str): The same phrase converted into snake_case format. **Example:** ```python input_str = \\"thisIsCamelCase\\" output_str = \\"this_is_camel_case\\" converted_str = convert_to_snake_case(input_str) assert converted_str == output_str input_str_2 = \\"convertThisStringToSnakeCase\\" output_str_2 = \\"convert_this_string_to_snake_case\\" converted_str_2 = convert_to_snake_case(input_str_2) assert converted_str_2 == output_str_2 ```","solution":"import re def convert_to_snake_case(camel_case_str: str) -> str: Converts a camelCase string to snake_case. # Replace all instances where a lowercase letter is followed by an uppercase letter # with the lowercase letter followed by an underscore and then the lowercase letter equivalent of the uppercase letter snake_case_str = re.sub(r\'([a-z])([A-Z])\', r\'1_2\', camel_case_str) return snake_case_str.lower()"},{"question":"You are required to create a function named `evaluate_knight_moves` in Python that takes in a 2D array representing a chess board with multiple positions for Knight pieces and returns a 2D array indicating the number of valid moves each Knight can make. The chess board is represented as a 2D array of size n x n, where each element is either a 0 (empty square) or 1 (square occupied by a Knight). A Knight moves in an \\"L\\" shaped pattern: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Ensure the program limits the moves to within the bounds of the board. Function Signature: ```python def evaluate_knight_moves(board: List[List[int]]) -> List[List[int]]: pass ``` Input: - `board`: A 2D list of integers where: - `board[i][j]` is 1 if there is a knight at position (i, j), else 0. Output: - Returns a 2D list of the same size as `board` where each element represents the number of valid moves the Knight at that position can make. Example: ```python chess_board = [ [0, 1, 0], [0, 0, 0], [1, 0, 0] ] move_counts = evaluate_knight_moves(chess_board) # move_counts should be: # [[0, 2, 0], # [0, 0, 0], # [2, 0, 0]] print(move_counts) ``` Note: A Knight\'s move is valid if it stays within the grid boundaries after the move. The function should iterate through the board, calculate valid moves for each Knight, and return the new board with the respective move counts.","solution":"from typing import List def evaluate_knight_moves(board: List[List[int]]) -> List[List[int]]: # Possible moves for a knight in chess moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] n = len(board) result = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): if board[i][j] == 1: # There\'s a knight valid_moves = 0 for move in moves: ni, nj = i + move[0], j + move[1] if 0 <= ni < n and 0 <= nj < n: # Move is within bounds valid_moves += 1 result[i][j] = valid_moves return result"},{"question":"# Context: You are given a JSON file containing information about various movies. The structure of the file includes fields like `title`, `year`, `genres`, `ratings`, and `votes`. Your task is to write a function `filter_movies` that will load the JSON data into a pandas DataFrame, then filter and process this data based on specific criteria provided as function parameters. # Function Details: You need to implement the `filter_movies` function. **Function Signature**: ```python def filter_movies(location: str, required_genres: list, min_votes: int, top_n: int) -> pd.DataFrame: ``` **Parameters**: - `location` (str): The location (file path) where the JSON file containing the movie data is located. - `required_genres` (list): A list of genres that the movie must have to be included in the resulting DataFrame. - `min_votes` (int): The minimum number of votes a movie must have to be included in the resulting DataFrame. - `top_n` (int): The number of top-rated movies to return, sorted by their ratings in descending order. **Returns**: - The function should return a pandas DataFrame that contains the filtered movie data as per the requirements. # Requirements: 1. Use the `pandas.read_json` function to read the JSON data. 2. Utilize the pandas `DataFrame` API to filter and manipulate the data. 3. Ensure the returned DataFrame contains only the movies that match the `required_genres` and have at least `min_votes`. 4. The resulting DataFrame should be sorted by the `ratings` column in descending order. 5. The final DataFrame should contain no more than `top_n` movies. # Example Usage: Given you have the following JSON file: ```json [ {\\"title\\": \\"Movie A\\", \\"year\\": 2021, \\"genres\\": [\\"Drama\\", \\"Thriller\\"], \\"ratings\\": 8.2, \\"votes\\": 1500}, {\\"title\\": \\"Movie B\\", \\"year\\": 2020, \\"genres\\": [\\"Action\\", \\"Comedy\\"], \\"ratings\\": 7.1, \\"votes\\": 850}, {\\"title\\": \\"Movie C\\", \\"year\\": 2022, \\"genres\\": [\\"Drama\\", \\"Comedy\\"], \\"ratings\\": 8.7, \\"votes\\": 2500}, {\\"title\\": \\"Movie D\\", \\"year\\": 2019, \\"genres\\": [\\"Drama\\"], \\"ratings\\": 9.0, \\"votes\\": 3000} ] ``` ```python location = \'path/to/movies_data.json\' required_genres = [\'Drama\'] min_votes = 1000 top_n = 2 df = filter_movies(location, required_genres, min_votes, top_n) print(df) ``` The expected output might look like: ```python title year genres ratings votes 3 Movie D 2019 [Drama] 9.0 3000 2 Movie C 2022 [Drama, Comedy] 8.7 2500 ```","solution":"import pandas as pd def filter_movies(location: str, required_genres: list, min_votes: int, top_n: int) -> pd.DataFrame: Filters and returns the top rated movies based on the specified criteria. Args: location (str): The file path where the JSON file is located. required_genres (list): A list of genres that the movie must have. min_votes (int): The minimum number of votes a movie must have. top_n (int): The number of top rated movies to return. Returns: pd.DataFrame: A DataFrame containing the filtered and sorted movies. # Load the data from the JSON file df = pd.read_json(location) # Filter the DataFrame based on the required genres genre_filter = df[\'genres\'].apply(lambda genres: any(genre in genres for genre in required_genres)) df_filtered = df[genre_filter] # Further filter based on the minimum number of votes df_filtered = df_filtered[df_filtered[\'votes\'] >= min_votes] # Sort the DataFrame by ratings in descending order and pick the top N df_filtered = df_filtered.sort_values(by=\'ratings\', ascending=False).head(top_n) return df_filtered"},{"question":"In this exercise, you will write a Python function that identifies all the prime numbers within a given range. Your task is to implement a function named `primes_in_range` that takes two arguments `start` and `end` and returns a list of all prime numbers within that range (inclusive). A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. You need to make use of basic mathematical operations and control structures in Python. # Requirements: 1. **Function Name:** `primes_in_range` 2. **Input:** The function accepts two integers (`start` and `end`), representing the range of numbers to check for primality. 3. **Output:** The function returns a list of integers, each a prime number within the specified range. # Steps to Achieve: 1. Define a helper function `is_prime` that checks if a number is prime by iterating up to the square root of the number. 2. Iterate through the range from `start` to `end` (inclusive). 3. Use the helper function to check each number for primality. 4. Collect all prime numbers in a list and return it. # Example: **Input:** ```python start = 10 end = 50 ``` **Output:** ```python [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ```","solution":"import math def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False for i in range(5, int(math.sqrt(n)) + 1, 6): if n % i == 0 or n % (i + 2) == 0: return False return True def primes_in_range(start, end): Returns a list of prime numbers in the given range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"In this problem, you will implement a function called `spotify_top_tracks` that fetches the top tracks for a given artist from the Spotify API. The function should create a directory with the artist\'s name (spaces replaced by underscores and converted to lowercase). It will then save the track details in a text file within this directory. This task involves using HTTP requests to fetch data, parsing JSON content, creating directories, and writing to a file. Here are the required specifications for the function: **Function Signature:** ```python def spotify_top_tracks(artist_name: str, track_count: int) -> None: ``` **Input Parameters:** - `artist_name` (str): The name of the artist for whom top tracks are to be fetched. - `track_count` (int): The number of top tracks to be retrieved. **Functionality:** 1. Create a directory named after `artist_name` (with spaces replaced by underscores and all in lowercase). 2. Send a request to the Spotify API to search for the artist\'s ID using the specified artist\'s name. 3. Use the retrieved artist ID to fetch the top tracks of the artist from another endpoint. 4. Save the details of the first `track_count` tracks into a text file named `top_tracks.txt` inside the created directory. Each track\'s details should include the track name, album name, and release date. **Requirements:** - Use the `requests` library to handle HTTP requests. - Use the `os` library to handle directory creation (`os.mkdir`). - Handle the Spotify API\'s authentication requirements (using an appropriate method, such as client credentials flow). - Use the `json` library to parse JSON data. **Example:** ```python spotify_top_tracks(\\"Ed Sheeran\\", 3) ``` After execution, the function should create a directory named `ed_sheeran` and save a text file named `top_tracks.txt` with the details of the top 3 tracks of Ed Sheeran in the format: ``` Track Name: Shape of You Album Name: ÷ (Deluxe) Release Date: 2017-03-03 Track Name: Castle on the Hill Album Name: ÷ (Deluxe) Release Date: 2017-03-03 Track Name: Perfect Album Name: ÷ (Deluxe) Release Date: 2017-03-03 ```","solution":"import os import requests import json def spotify_top_tracks(artist_name: str, track_count: int) -> None: base_url = \\"https://api.spotify.com/v1\\" auth_url = \\"https://accounts.spotify.com/api/token\\" client_id = \\"YOUR_CLIENT_ID\\" client_secret = \\"YOUR_CLIENT_SECRET\\" # Encode the Client ID and Client Secret auth_response = requests.post(auth_url, { \'grant_type\': \'client_credentials\', \'client_id\': client_id, \'client_secret\': client_secret, }) auth_response_data = auth_response.json() access_token = auth_response_data[\'access_token\'] headers = { \'Authorization\': f\'Bearer {access_token}\', } # Replace spaces with underscores and convert to lowercase artist_dir = artist_name.replace(\' \', \'_\').lower() if not os.path.exists(artist_dir): os.mkdir(artist_dir) # Search for the artist ID search_url = f\\"{base_url}/search\\" search_params = { \'q\': artist_name, \'type\': \'artist\', \'limit\': 1 } search_response = requests.get(search_url, headers=headers, params=search_params) search_results = search_response.json() if len(search_results[\'artists\'][\'items\']) == 0: raise Exception(\\"Artist not found\\") artist_id = search_results[\'artists\'][\'items\'][0][\'id\'] # Fetch top tracks using artist ID top_tracks_url = f\\"{base_url}/artists/{artist_id}/top-tracks\\" top_tracks_params = { \'country\': \'US\' } top_tracks_response = requests.get(top_tracks_url, headers=headers, params=top_tracks_params) top_tracks_data = top_tracks_response.json() # Write track details to a file top_tracks_path = os.path.join(artist_dir, \'top_tracks.txt\') with open(top_tracks_path, \'w\') as file: for track in top_tracks_data[\'tracks\'][:track_count]: file.write(f\\"Track Name: {track[\'name\']}n\\") file.write(f\\"Album Name: {track[\'album\'][\'name\']}n\\") file.write(f\\"Release Date: {track[\'album\'][\'release_date\']}nn\\")"},{"question":"You are required to develop a function that simulates the movement of a set of particles in a 2D space using NumPy and Matplotlib. The function will visualize the initial positions of the particles and their movements after a specified time interval. Implement the function `simulate_particle_motion(num_particles, time_interval, velocity_range, initial_positions)` that performs the following tasks: 1. Takes in four parameters: - `num_particles` (int): The number of particles to be simulated. - `time_interval` (float): The time interval over which the particles\' positions are updated. - `velocity_range` (tuple or list of two floats): The minimum and maximum values for the velocity of the particles. - `initial_positions` (2D list of floats or list of tuples): A list containing the initial (x, y) positions of the particles. 2. Uses `numpy`: - Generates random velocity vectors for the particles within the specified `velocity_range`. - Updates the positions of the particles based on their velocities and the `time_interval`. 3. Uses `matplotlib`: - Plots the initial positions of the particles using circle markers (`\'o\'`). - Plots the final positions of the particles after the time interval using square markers (`\'s\'`). Here is the structure you should follow in your function: ```python import numpy as np import matplotlib.pyplot as plt def simulate_particle_motion(num_particles, time_interval, velocity_range, initial_positions): # Generate random velocities for the particles within the given range velocities = np.random.uniform(velocity_range[0], velocity_range[1], (num_particles, 2)) # Convert initial_positions to a numpy array positions = np.array(initial_positions) # Update the positions of the particles based on their velocities and the time interval final_positions = positions + velocities * time_interval # Plot the initial positions plt.plot(positions[:, 0], positions[:, 1], \'o\', label=\'Initial Positions\') # Plot the final positions plt.plot(final_positions[:, 0], final_positions[:, 1], \'s\', label=\'Final Positions\') # Adding grid, labels, and title plt.grid(True) plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.title(\'Particle Motion Simulation\') plt.legend() # Display the plot plt.show() ``` When calling this function, you should be able to see the initial and final positions of the particles in the 2D space, visualizing their movement over the specified time interval. Adjusting the number of particles, time interval, and velocity range should change the simulation accordingly.","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_particle_motion(num_particles, time_interval, velocity_range, initial_positions): Simulates the movement of particles in a 2D space and visualizes their initial and final positions. :param num_particles: The number of particles to be simulated. :param time_interval: The time interval over which the particles\' positions are updated. :param velocity_range: The minimum and maximum values for the velocity of the particles. :param initial_positions: A list containing the initial (x, y) positions of the particles. # Generate random velocities for the particles within the given range velocities = np.random.uniform(velocity_range[0], velocity_range[1], (num_particles, 2)) # Convert initial_positions to a numpy array positions = np.array(initial_positions) # Update the positions of the particles based on their velocities and the time interval final_positions = positions + velocities * time_interval # Plot the initial positions plt.plot(positions[:, 0], positions[:, 1], \'o\', label=\'Initial Positions\') # Plot the final positions plt.plot(final_positions[:, 0], final_positions[:, 1], \'s\', label=\'Final Positions\') # Adding grid, labels, and title plt.grid(True) plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.title(\'Particle Motion Simulation\') plt.legend() # Display the plot plt.show()"}]'),R={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},D={class:"card-container"},P={key:0,class:"empty-state"},z=["disabled"],Y={key:0},N={key:1};function O(a,e,l,p,r,s){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",D,[(n(!0),i(b,null,w(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",N,"Loading...")):(n(),i("span",Y,"See more"))],8,z)):u("",!0)])}const j=c(R,[["render",O],["__scopeId","data-v-c74e4dac"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/27.md","filePath":"chatai/27.md"}'),L={name:"chatai/27.md"},B=Object.assign(L,{setup(a){return(e,l)=>(n(),i("div",null,[x(j)]))}});export{M as __pageData,B as default};
